### YamlMime:ManagedReference
items:
- uid: "com.azure.core.implementation.TypeUtil"
  id: "TypeUtil"
  parent: "com.azure.core.implementation"
  children:
  - "com.azure.core.implementation.TypeUtil.createParameterizedType(java.lang.Class<?>,java.lang.reflect.Type...)"
  - "com.azure.core.implementation.TypeUtil.getAllClasses(java.lang.Class<?>)"
  - "com.azure.core.implementation.TypeUtil.getRawClass(java.lang.reflect.Type)"
  - "com.azure.core.implementation.TypeUtil.getRestResponseBodyType(java.lang.reflect.Type)"
  - "com.azure.core.implementation.TypeUtil.getSuperType(java.lang.reflect.Type)"
  - "com.azure.core.implementation.TypeUtil.getSuperType(java.lang.reflect.Type,java.lang.Class<?>)"
  - "com.azure.core.implementation.TypeUtil.getTypeArgument(java.lang.reflect.Type)"
  - "com.azure.core.implementation.TypeUtil.getTypeArguments(java.lang.reflect.Type)"
  - "com.azure.core.implementation.TypeUtil.isTypeOrSubTypeOf(java.lang.reflect.Type,java.lang.reflect.Type)"
  - "com.azure.core.implementation.TypeUtil.restResponseTypeExpectsBody(java.lang.reflect.ParameterizedType)"
  langs:
  - "java"
  name: "TypeUtil"
  nameWithType: "TypeUtil"
  fullName: "com.azure.core.implementation.TypeUtil"
  type: "Class"
  package: "com.azure.core.implementation"
  summary: "Utility type exposing methods to deal with <xref uid=\"com.azure.core.implementation.serializer.jsonwrapper.api.Type\" data-throw-if-not-resolved=\"false\">Type</xref>."
  syntax:
    content: "public final class TypeUtil"
  inheritance:
  - "java.lang.Object"
  inheritedMembers:
  - "java.lang.Object.clone()"
  - "java.lang.Object.equals(java.lang.Object)"
  - "java.lang.Object.finalize()"
  - "java.lang.Object.getClass()"
  - "java.lang.Object.hashCode()"
  - "java.lang.Object.notify()"
  - "java.lang.Object.notifyAll()"
  - "java.lang.Object.toString()"
  - "java.lang.Object.wait()"
  - "java.lang.Object.wait(long)"
  - "java.lang.Object.wait(long,int)"
- uid: "com.azure.core.implementation.TypeUtil.TypeUtil()"
  id: "TypeUtil()"
  parent: "com.azure.core.implementation.TypeUtil"
  langs:
  - "java"
  name: "TypeUtil()"
  nameWithType: "TypeUtil.TypeUtil()"
  fullName: "com.azure.core.implementation.TypeUtil.TypeUtil()"
  overload: "com.azure.core.implementation.TypeUtil.TypeUtil*"
  type: "Constructor"
  package: "com.azure.core.implementation"
  syntax:
    content: "private TypeUtil()"
- uid: "com.azure.core.implementation.TypeUtil.createParameterizedType(java.lang.Class<?>,java.lang.reflect.Type...)"
  id: "createParameterizedType(java.lang.Class<?>,java.lang.reflect.Type...)"
  parent: "com.azure.core.implementation.TypeUtil"
  langs:
  - "java"
  name: "createParameterizedType(Class<?> rawClass, Type[] genericTypes)"
  nameWithType: "TypeUtil.createParameterizedType(Class<?> rawClass, Type[] genericTypes)"
  fullName: "com.azure.core.implementation.TypeUtil.createParameterizedType(Class<?> rawClass, Type[] genericTypes)"
  overload: "com.azure.core.implementation.TypeUtil.createParameterizedType*"
  type: "Method"
  package: "com.azure.core.implementation"
  summary: "Create a parameterized type from a raw class and its type arguments."
  syntax:
    content: "public static ParameterizedType createParameterizedType(Class<?> rawClass, Type[] genericTypes)"
    parameters:
    - id: "rawClass"
      type: "java.lang.Class<?>"
      description: "the raw class to construct the parameterized type"
    - id: "genericTypes"
      type: "java.lang.reflect.Type[]"
      description: "the generic arguments"
    return:
      type: "java.lang.reflect.ParameterizedType"
      description: "the parameterized type"
- uid: "com.azure.core.implementation.TypeUtil.getAllClasses(java.lang.Class<?>)"
  id: "getAllClasses(java.lang.Class<?>)"
  parent: "com.azure.core.implementation.TypeUtil"
  langs:
  - "java"
  name: "getAllClasses(Class<?> clazz)"
  nameWithType: "TypeUtil.getAllClasses(Class<?> clazz)"
  fullName: "com.azure.core.implementation.TypeUtil.getAllClasses(Class<?> clazz)"
  overload: "com.azure.core.implementation.TypeUtil.getAllClasses*"
  type: "Method"
  package: "com.azure.core.implementation"
  summary: "Find all super classes including provided class."
  syntax:
    content: "public static List<Class<?>> getAllClasses(Class<?> clazz)"
    parameters:
    - id: "clazz"
      type: "java.lang.Class<?>"
      description: "the raw class to find super types for"
    return:
      type: "java.util.List<java.lang.Class<?>>"
      description: "the list of super classes"
- uid: "com.azure.core.implementation.TypeUtil.getRawClass(java.lang.reflect.Type)"
  id: "getRawClass(java.lang.reflect.Type)"
  parent: "com.azure.core.implementation.TypeUtil"
  langs:
  - "java"
  name: "getRawClass(Type type)"
  nameWithType: "TypeUtil.getRawClass(Type type)"
  fullName: "com.azure.core.implementation.TypeUtil.getRawClass(Type type)"
  overload: "com.azure.core.implementation.TypeUtil.getRawClass*"
  type: "Method"
  package: "com.azure.core.implementation"
  summary: "Get the raw class for a given type."
  syntax:
    content: "public static Class<?> getRawClass(Type type)"
    parameters:
    - id: "type"
      type: "java.lang.reflect.Type"
      description: "the input type"
    return:
      type: "java.lang.Class<?>"
      description: "the raw class"
- uid: "com.azure.core.implementation.TypeUtil.getRestResponseBodyType(java.lang.reflect.Type)"
  id: "getRestResponseBodyType(java.lang.reflect.Type)"
  parent: "com.azure.core.implementation.TypeUtil"
  langs:
  - "java"
  name: "getRestResponseBodyType(Type restResponseReturnType)"
  nameWithType: "TypeUtil.getRestResponseBodyType(Type restResponseReturnType)"
  fullName: "com.azure.core.implementation.TypeUtil.getRestResponseBodyType(Type restResponseReturnType)"
  overload: "com.azure.core.implementation.TypeUtil.getRestResponseBodyType*"
  type: "Method"
  package: "com.azure.core.implementation"
  summary: "Returns the body type expected in the rest response."
  syntax:
    content: "public static Type getRestResponseBodyType(Type restResponseReturnType)"
    parameters:
    - id: "restResponseReturnType"
      type: "java.lang.reflect.Type"
      description: "The RestResponse subtype containing the type arguments we are inspecting."
    return:
      type: "java.lang.reflect.Type"
      description: "The type of the body."
- uid: "com.azure.core.implementation.TypeUtil.getSuperType(java.lang.reflect.Type)"
  id: "getSuperType(java.lang.reflect.Type)"
  parent: "com.azure.core.implementation.TypeUtil"
  langs:
  - "java"
  name: "getSuperType(Type type)"
  nameWithType: "TypeUtil.getSuperType(Type type)"
  fullName: "com.azure.core.implementation.TypeUtil.getSuperType(Type type)"
  overload: "com.azure.core.implementation.TypeUtil.getSuperType*"
  type: "Method"
  package: "com.azure.core.implementation"
  summary: "Get the super type for a given type."
  syntax:
    content: "public static Type getSuperType(Type type)"
    parameters:
    - id: "type"
      type: "java.lang.reflect.Type"
      description: "the input type"
    return:
      type: "java.lang.reflect.Type"
      description: "the direct super type"
- uid: "com.azure.core.implementation.TypeUtil.getSuperType(java.lang.reflect.Type,java.lang.Class<?>)"
  id: "getSuperType(java.lang.reflect.Type,java.lang.Class<?>)"
  parent: "com.azure.core.implementation.TypeUtil"
  langs:
  - "java"
  name: "getSuperType(Type subType, Class<?> rawSuperType)"
  nameWithType: "TypeUtil.getSuperType(Type subType, Class<?> rawSuperType)"
  fullName: "com.azure.core.implementation.TypeUtil.getSuperType(Type subType, Class<?> rawSuperType)"
  overload: "com.azure.core.implementation.TypeUtil.getSuperType*"
  type: "Method"
  package: "com.azure.core.implementation"
  summary: "Get the super type for a type in its super type chain, which has a raw class that matches the specified class."
  syntax:
    content: "public static Type getSuperType(Type subType, Class<?> rawSuperType)"
    parameters:
    - id: "subType"
      type: "java.lang.reflect.Type"
      description: "the sub type to find super type for"
    - id: "rawSuperType"
      type: "java.lang.Class<?>"
      description: "the raw class for the super type"
    return:
      type: "java.lang.reflect.Type"
      description: "the super type that matches the requirement"
- uid: "com.azure.core.implementation.TypeUtil.getTypeArgument(java.lang.reflect.Type)"
  id: "getTypeArgument(java.lang.reflect.Type)"
  parent: "com.azure.core.implementation.TypeUtil"
  langs:
  - "java"
  name: "getTypeArgument(Type type)"
  nameWithType: "TypeUtil.getTypeArgument(Type type)"
  fullName: "com.azure.core.implementation.TypeUtil.getTypeArgument(Type type)"
  overload: "com.azure.core.implementation.TypeUtil.getTypeArgument*"
  type: "Method"
  package: "com.azure.core.implementation"
  summary: "Get the generic argument, or the first if the type has more than one."
  syntax:
    content: "public static Type getTypeArgument(Type type)"
    parameters:
    - id: "type"
      type: "java.lang.reflect.Type"
      description: "the type to get arguments"
    return:
      type: "java.lang.reflect.Type"
      description: "the generic argument, null if type is not parameterized"
- uid: "com.azure.core.implementation.TypeUtil.getTypeArguments(java.lang.reflect.Type)"
  id: "getTypeArguments(java.lang.reflect.Type)"
  parent: "com.azure.core.implementation.TypeUtil"
  langs:
  - "java"
  name: "getTypeArguments(Type type)"
  nameWithType: "TypeUtil.getTypeArguments(Type type)"
  fullName: "com.azure.core.implementation.TypeUtil.getTypeArguments(Type type)"
  overload: "com.azure.core.implementation.TypeUtil.getTypeArguments*"
  type: "Method"
  package: "com.azure.core.implementation"
  summary: "Get the generic arguments for a type."
  syntax:
    content: "public static Type[] getTypeArguments(Type type)"
    parameters:
    - id: "type"
      type: "java.lang.reflect.Type"
      description: "the type to get arguments"
    return:
      type: "java.lang.reflect.Type[]"
      description: "the generic arguments, empty if type is not parameterized"
- uid: "com.azure.core.implementation.TypeUtil.isTypeOrSubTypeOf(java.lang.reflect.Type,java.lang.reflect.Type)"
  id: "isTypeOrSubTypeOf(java.lang.reflect.Type,java.lang.reflect.Type)"
  parent: "com.azure.core.implementation.TypeUtil"
  langs:
  - "java"
  name: "isTypeOrSubTypeOf(Type subType, Type superType)"
  nameWithType: "TypeUtil.isTypeOrSubTypeOf(Type subType, Type superType)"
  fullName: "com.azure.core.implementation.TypeUtil.isTypeOrSubTypeOf(Type subType, Type superType)"
  overload: "com.azure.core.implementation.TypeUtil.isTypeOrSubTypeOf*"
  type: "Method"
  package: "com.azure.core.implementation"
  summary: "Determines if a type is the same or a subtype for another type."
  syntax:
    content: "public static boolean isTypeOrSubTypeOf(Type subType, Type superType)"
    parameters:
    - id: "subType"
      type: "java.lang.reflect.Type"
      description: "the supposed sub type"
    - id: "superType"
      type: "java.lang.reflect.Type"
      description: "the supposed super type"
    return:
      type: "boolean"
      description: "true if the first type is the same or a subtype for the second type"
- uid: "com.azure.core.implementation.TypeUtil.restResponseTypeExpectsBody(java.lang.reflect.ParameterizedType)"
  id: "restResponseTypeExpectsBody(java.lang.reflect.ParameterizedType)"
  parent: "com.azure.core.implementation.TypeUtil"
  langs:
  - "java"
  name: "restResponseTypeExpectsBody(ParameterizedType restResponseReturnType)"
  nameWithType: "TypeUtil.restResponseTypeExpectsBody(ParameterizedType restResponseReturnType)"
  fullName: "com.azure.core.implementation.TypeUtil.restResponseTypeExpectsBody(ParameterizedType restResponseReturnType)"
  overload: "com.azure.core.implementation.TypeUtil.restResponseTypeExpectsBody*"
  type: "Method"
  package: "com.azure.core.implementation"
  summary: "Returns whether the rest response expects to have any body (by checking if the body parameter type is set to Void, in which case no body is expected)."
  syntax:
    content: "public static boolean restResponseTypeExpectsBody(ParameterizedType restResponseReturnType)"
    parameters:
    - id: "restResponseReturnType"
      type: "java.lang.reflect.ParameterizedType"
      description: "The RestResponse subtype containing the type arguments we are inspecting."
    return:
      type: "boolean"
      description: "True if a body is expected, false if a Void body is expected."
references:
- uid: "com.azure.core.implementation.TypeUtil.TypeUtil*"
  name: "TypeUtil"
  nameWithType: "TypeUtil.TypeUtil"
  fullName: "com.azure.core.implementation.TypeUtil.TypeUtil"
  package: "com.azure.core.implementation"
- uid: "java.lang.Class<?>"
  spec.java:
  - uid: "java.lang.Class"
    name: "Class"
    fullName: "java.lang.Class"
  - name: "<"
    fullName: "<"
  - uid: "?"
    name: "?"
    fullName: "?"
  - name: ">"
    fullName: ">"
- uid: "java.util.List<java.lang.Class<?>>"
  spec.java:
  - uid: "java.util.List"
    name: "List"
    fullName: "java.util.List"
  - name: "<"
    fullName: "<"
  - uid: "java.lang.Class"
    name: "Class"
    fullName: "java.lang.Class"
  - name: "<"
    fullName: "<"
  - uid: "?"
    name: "?"
    fullName: "?"
  - name: ">"
    fullName: ">"
  - name: ">"
    fullName: ">"
- uid: "com.azure.core.implementation.TypeUtil.getAllClasses*"
  name: "getAllClasses"
  nameWithType: "TypeUtil.getAllClasses"
  fullName: "com.azure.core.implementation.TypeUtil.getAllClasses"
  package: "com.azure.core.implementation"
- uid: "java.lang.reflect.Type"
  spec.java:
  - uid: "java.lang.reflect.Type"
    name: "Type"
    fullName: "java.lang.reflect.Type"
- uid: "java.lang.reflect.Type[]"
  spec.java:
  - uid: "java.lang.reflect.Type"
    name: "Type"
    fullName: "java.lang.reflect.Type"
  - name: "[]"
    fullName: "[]"
- uid: "com.azure.core.implementation.TypeUtil.getTypeArguments*"
  name: "getTypeArguments"
  nameWithType: "TypeUtil.getTypeArguments"
  fullName: "com.azure.core.implementation.TypeUtil.getTypeArguments"
  package: "com.azure.core.implementation"
- uid: "com.azure.core.implementation.TypeUtil.getTypeArgument*"
  name: "getTypeArgument"
  nameWithType: "TypeUtil.getTypeArgument"
  fullName: "com.azure.core.implementation.TypeUtil.getTypeArgument"
  package: "com.azure.core.implementation"
- uid: "com.azure.core.implementation.TypeUtil.getRawClass*"
  name: "getRawClass"
  nameWithType: "TypeUtil.getRawClass"
  fullName: "com.azure.core.implementation.TypeUtil.getRawClass"
  package: "com.azure.core.implementation"
- uid: "com.azure.core.implementation.TypeUtil.getSuperType*"
  name: "getSuperType"
  nameWithType: "TypeUtil.getSuperType"
  fullName: "com.azure.core.implementation.TypeUtil.getSuperType"
  package: "com.azure.core.implementation"
- uid: "boolean"
  spec.java:
  - uid: "boolean"
    name: "boolean"
    fullName: "boolean"
- uid: "com.azure.core.implementation.TypeUtil.isTypeOrSubTypeOf*"
  name: "isTypeOrSubTypeOf"
  nameWithType: "TypeUtil.isTypeOrSubTypeOf"
  fullName: "com.azure.core.implementation.TypeUtil.isTypeOrSubTypeOf"
  package: "com.azure.core.implementation"
- uid: "java.lang.reflect.ParameterizedType"
  spec.java:
  - uid: "java.lang.reflect.ParameterizedType"
    name: "ParameterizedType"
    fullName: "java.lang.reflect.ParameterizedType"
- uid: "com.azure.core.implementation.TypeUtil.createParameterizedType*"
  name: "createParameterizedType"
  nameWithType: "TypeUtil.createParameterizedType"
  fullName: "com.azure.core.implementation.TypeUtil.createParameterizedType"
  package: "com.azure.core.implementation"
- uid: "com.azure.core.implementation.TypeUtil.restResponseTypeExpectsBody*"
  name: "restResponseTypeExpectsBody"
  nameWithType: "TypeUtil.restResponseTypeExpectsBody"
  fullName: "com.azure.core.implementation.TypeUtil.restResponseTypeExpectsBody"
  package: "com.azure.core.implementation"
- uid: "com.azure.core.implementation.TypeUtil.getRestResponseBodyType*"
  name: "getRestResponseBodyType"
  nameWithType: "TypeUtil.getRestResponseBodyType"
  fullName: "com.azure.core.implementation.TypeUtil.getRestResponseBodyType"
  package: "com.azure.core.implementation"
- uid: "java.lang.Object.notify()"
  name: "Object.notify()"
  nameWithType: "Object.notify()"
  fullName: "java.lang.Object.notify()"
- uid: "java.lang.Object.wait()"
  name: "Object.wait()"
  nameWithType: "Object.wait()"
  fullName: "java.lang.Object.wait()"
- uid: "java.lang.Object.finalize()"
  name: "Object.finalize()"
  nameWithType: "Object.finalize()"
  fullName: "java.lang.Object.finalize()"
- uid: "java.lang.Object.clone()"
  name: "Object.clone()"
  nameWithType: "Object.clone()"
  fullName: "java.lang.Object.clone()"
- uid: "java.lang.Object.notifyAll()"
  name: "Object.notifyAll()"
  nameWithType: "Object.notifyAll()"
  fullName: "java.lang.Object.notifyAll()"
- uid: "java.lang.Object.equals(java.lang.Object)"
  name: "Object.equals(Object)"
  nameWithType: "Object.equals(Object)"
  fullName: "java.lang.Object.equals(java.lang.Object)"
- uid: "java.lang.Object.getClass()"
  name: "Object.getClass()"
  nameWithType: "Object.getClass()"
  fullName: "java.lang.Object.getClass()"
- uid: "java.lang.Object.wait(long)"
  name: "Object.wait(long)"
  nameWithType: "Object.wait(long)"
  fullName: "java.lang.Object.wait(long)"
- uid: "java.lang.Object.hashCode()"
  name: "Object.hashCode()"
  nameWithType: "Object.hashCode()"
  fullName: "java.lang.Object.hashCode()"
- uid: "java.lang.Object.wait(long,int)"
  name: "Object.wait(long,int)"
  nameWithType: "Object.wait(long,int)"
  fullName: "java.lang.Object.wait(long,int)"
- uid: "java.lang.Object.toString()"
  name: "Object.toString()"
  nameWithType: "Object.toString()"
  fullName: "java.lang.Object.toString()"
- uid: "java.lang.Class"
  name: "Class"
  nameWithType: "Class"
  fullName: "java.lang.Class"
- uid: "?"
  name: "?"
  nameWithType: "?"
  fullName: "?"
- uid: "java.util.List"
  name: "List"
  nameWithType: "List"
  fullName: "java.util.List"
