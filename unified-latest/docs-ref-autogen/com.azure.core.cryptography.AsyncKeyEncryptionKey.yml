### YamlMime:ManagedReference
items:
- uid: "com.azure.core.cryptography.AsyncKeyEncryptionKey"
  id: "AsyncKeyEncryptionKey"
  parent: "com.azure.core.cryptography"
  children:
  - "com.azure.core.cryptography.AsyncKeyEncryptionKey.getKeyId()"
  - "com.azure.core.cryptography.AsyncKeyEncryptionKey.unwrapKey(java.lang.String,byte[])"
  - "com.azure.core.cryptography.AsyncKeyEncryptionKey.wrapKey(java.lang.String,byte[])"
  langs:
  - "java"
  name: "AsyncKeyEncryptionKey"
  nameWithType: "AsyncKeyEncryptionKey"
  fullName: "com.azure.core.cryptography.AsyncKeyEncryptionKey"
  type: "Interface"
  package: "com.azure.core.cryptography"
  summary: "A key which is used to asynchronously encrypt, or wrap, another key."
  syntax:
    content: "public interface AsyncKeyEncryptionKey"
- uid: "com.azure.core.cryptography.AsyncKeyEncryptionKey.getKeyId()"
  id: "getKeyId()"
  parent: "com.azure.core.cryptography.AsyncKeyEncryptionKey"
  langs:
  - "java"
  name: "getKeyId()"
  nameWithType: "AsyncKeyEncryptionKey.getKeyId()"
  fullName: "com.azure.core.cryptography.AsyncKeyEncryptionKey.getKeyId()"
  overload: "com.azure.core.cryptography.AsyncKeyEncryptionKey.getKeyId*"
  type: "Method"
  package: "com.azure.core.cryptography"
  summary: "Retrieves the key identifier."
  syntax:
    content: "public abstract Mono<String> getKeyId()"
    return:
      type: "reactor.core.publisher.Mono<java.lang.String>"
      description: "A <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\">Mono</xref> containing key identifier."
- uid: "com.azure.core.cryptography.AsyncKeyEncryptionKey.unwrapKey(java.lang.String,byte[])"
  id: "unwrapKey(java.lang.String,byte[])"
  parent: "com.azure.core.cryptography.AsyncKeyEncryptionKey"
  langs:
  - "java"
  name: "unwrapKey(String algorithm, byte[] encryptedKey)"
  nameWithType: "AsyncKeyEncryptionKey.unwrapKey(String algorithm, byte[] encryptedKey)"
  fullName: "com.azure.core.cryptography.AsyncKeyEncryptionKey.unwrapKey(String algorithm, byte[] encryptedKey)"
  overload: "com.azure.core.cryptography.AsyncKeyEncryptionKey.unwrapKey*"
  type: "Method"
  package: "com.azure.core.cryptography"
  summary: "Decrypts the specified encrypted key using the specified algorithm."
  syntax:
    content: "public abstract Mono<byte[]> unwrapKey(String algorithm, byte[] encryptedKey)"
    parameters:
    - id: "algorithm"
      type: "java.lang.String"
      description: "The key wrap algorithm which was used to encrypt the specified encrypted key."
    - id: "encryptedKey"
      type: "byte[]"
      description: "The encrypted key content to be decrypted."
    return:
      type: "reactor.core.publisher.Mono<byte[]>"
      description: "A <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\">Mono</xref> containing the decrypted key bytes."
- uid: "com.azure.core.cryptography.AsyncKeyEncryptionKey.wrapKey(java.lang.String,byte[])"
  id: "wrapKey(java.lang.String,byte[])"
  parent: "com.azure.core.cryptography.AsyncKeyEncryptionKey"
  langs:
  - "java"
  name: "wrapKey(String algorithm, byte[] key)"
  nameWithType: "AsyncKeyEncryptionKey.wrapKey(String algorithm, byte[] key)"
  fullName: "com.azure.core.cryptography.AsyncKeyEncryptionKey.wrapKey(String algorithm, byte[] key)"
  overload: "com.azure.core.cryptography.AsyncKeyEncryptionKey.wrapKey*"
  type: "Method"
  package: "com.azure.core.cryptography"
  summary: "Encrypts the specified key using the specified algorithm."
  syntax:
    content: "public abstract Mono<byte[]> wrapKey(String algorithm, byte[] key)"
    parameters:
    - id: "algorithm"
      type: "java.lang.String"
      description: "The key wrap algorithm used to encrypt the specified key."
    - id: "key"
      type: "byte[]"
      description: "The key content to be encrypted."
    return:
      type: "reactor.core.publisher.Mono<byte[]>"
      description: "A <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\">Mono</xref> containing the encrypted key bytes."
references:
- uid: "reactor.core.publisher.Mono<java.lang.String>"
  spec.java:
  - uid: "reactor.core.publisher.Mono"
    name: "Mono"
    fullName: "reactor.core.publisher.Mono"
  - name: "<"
    fullName: "<"
  - uid: "java.lang.String"
    name: "String"
    fullName: "java.lang.String"
  - name: ">"
    fullName: ">"
- uid: "com.azure.core.cryptography.AsyncKeyEncryptionKey.getKeyId*"
  name: "getKeyId"
  nameWithType: "AsyncKeyEncryptionKey.getKeyId"
  fullName: "com.azure.core.cryptography.AsyncKeyEncryptionKey.getKeyId"
  package: "com.azure.core.cryptography"
- uid: "java.lang.String"
  spec.java:
  - uid: "java.lang.String"
    name: "String"
    fullName: "java.lang.String"
- uid: "byte[]"
  spec.java:
  - uid: "byte"
    name: "byte"
    fullName: "byte"
  - name: "[]"
    fullName: "[]"
- uid: "reactor.core.publisher.Mono<byte[]>"
  spec.java:
  - uid: "reactor.core.publisher.Mono"
    name: "Mono"
    fullName: "reactor.core.publisher.Mono"
  - name: "<"
    fullName: "<"
  - uid: "byte"
    name: "byte"
    fullName: "byte"
  - name: "[]"
    fullName: "[]"
  - name: ">"
    fullName: ">"
- uid: "com.azure.core.cryptography.AsyncKeyEncryptionKey.wrapKey*"
  name: "wrapKey"
  nameWithType: "AsyncKeyEncryptionKey.wrapKey"
  fullName: "com.azure.core.cryptography.AsyncKeyEncryptionKey.wrapKey"
  package: "com.azure.core.cryptography"
- uid: "com.azure.core.cryptography.AsyncKeyEncryptionKey.unwrapKey*"
  name: "unwrapKey"
  nameWithType: "AsyncKeyEncryptionKey.unwrapKey"
  fullName: "com.azure.core.cryptography.AsyncKeyEncryptionKey.unwrapKey"
  package: "com.azure.core.cryptography"
- uid: "reactor.core.publisher.Mono"
  name: "Mono"
  nameWithType: "Mono"
  fullName: "reactor.core.publisher.Mono"
