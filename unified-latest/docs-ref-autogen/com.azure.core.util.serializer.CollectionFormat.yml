### YamlMime:ManagedReference
items:
- uid: "com.azure.core.util.serializer.CollectionFormat"
  id: "CollectionFormat"
  parent: "com.azure.core.util.serializer"
  children:
  - "com.azure.core.util.serializer.CollectionFormat.CSV"
  - "com.azure.core.util.serializer.CollectionFormat.MULTI"
  - "com.azure.core.util.serializer.CollectionFormat.PIPES"
  - "com.azure.core.util.serializer.CollectionFormat.SSV"
  - "com.azure.core.util.serializer.CollectionFormat.TSV"
  - "com.azure.core.util.serializer.CollectionFormat.getDelimiter()"
  - "com.azure.core.util.serializer.CollectionFormat.valueOf(java.lang.String)"
  - "com.azure.core.util.serializer.CollectionFormat.values()"
  langs:
  - "java"
  name: "CollectionFormat"
  nameWithType: "CollectionFormat"
  fullName: "com.azure.core.util.serializer.CollectionFormat"
  type: "Enum"
  package: "com.azure.core.util.serializer"
  summary: "Swagger collection format to use for joining <xref uid=\"java.util.List\" data-throw-if-not-resolved=\"false\">java.util.List</xref> parameters in paths, queries, and headers. See [ https://github.com/swagger-api/swagger-spec/blob/master/versions/2.0.md\\#fixed-fields-7][https_github.com_swagger-api_swagger-spec_blob_master_versions_2.0.md_fixed-fields-7].\n\n\n[https_github.com_swagger-api_swagger-spec_blob_master_versions_2.0.md_fixed-fields-7]: https://github.com/swagger-api/swagger-spec/blob/master/versions/2.0.md#fixed-fields-7"
  syntax:
    content: "public enum CollectionFormat extends Enum<CollectionFormat>"
  inheritance:
  - "java.lang.Object"
  - "java.lang.Enum"
  inheritedMembers:
  - "java.lang.Enum.<T>valueOf(java.lang.Class<T>,java.lang.String)"
  - "java.lang.Enum.clone()"
  - "java.lang.Enum.compareTo(E)"
  - "java.lang.Enum.equals(java.lang.Object)"
  - "java.lang.Enum.finalize()"
  - "java.lang.Enum.getDeclaringClass()"
  - "java.lang.Enum.hashCode()"
  - "java.lang.Enum.name()"
  - "java.lang.Enum.ordinal()"
  - "java.lang.Enum.toString()"
  - "java.lang.Object.getClass()"
  - "java.lang.Object.notify()"
  - "java.lang.Object.notifyAll()"
  - "java.lang.Object.wait()"
  - "java.lang.Object.wait(long)"
  - "java.lang.Object.wait(long,int)"
- uid: "com.azure.core.util.serializer.CollectionFormat.CSV"
  id: "CSV"
  parent: "com.azure.core.util.serializer.CollectionFormat"
  langs:
  - "java"
  name: "CSV"
  nameWithType: "CollectionFormat.CSV"
  fullName: "com.azure.core.util.serializer.CollectionFormat.CSV"
  type: "Field"
  package: "com.azure.core.util.serializer"
  summary: "Comma separated values. E.g. foo,bar"
  syntax:
    content: "public static final CollectionFormat CSV"
    return:
      type: "com.azure.core.util.serializer.CollectionFormat"
- uid: "com.azure.core.util.serializer.CollectionFormat.CollectionFormat(java.lang.String)"
  id: "CollectionFormat(java.lang.String)"
  parent: "com.azure.core.util.serializer.CollectionFormat"
  langs:
  - "java"
  name: "CollectionFormat(String delimiter)"
  nameWithType: "CollectionFormat.CollectionFormat(String delimiter)"
  fullName: "com.azure.core.util.serializer.CollectionFormat.CollectionFormat(String delimiter)"
  overload: "com.azure.core.util.serializer.CollectionFormat.CollectionFormat*"
  type: "Constructor"
  package: "com.azure.core.util.serializer"
  summary: "Creates CollectionFormat enum."
  syntax:
    content: "private CollectionFormat(String delimiter)"
    parameters:
    - id: "delimiter"
      type: "java.lang.String"
      description: "the delimiter as a string."
- uid: "com.azure.core.util.serializer.CollectionFormat.MULTI"
  id: "MULTI"
  parent: "com.azure.core.util.serializer.CollectionFormat"
  langs:
  - "java"
  name: "MULTI"
  nameWithType: "CollectionFormat.MULTI"
  fullName: "com.azure.core.util.serializer.CollectionFormat.MULTI"
  type: "Field"
  package: "com.azure.core.util.serializer"
  summary: "Corresponds to multiple parameter instances instead of multiple values for a single instance. E.g. foo=bar&foo=baz"
  syntax:
    content: "public static final CollectionFormat MULTI"
    return:
      type: "com.azure.core.util.serializer.CollectionFormat"
- uid: "com.azure.core.util.serializer.CollectionFormat.PIPES"
  id: "PIPES"
  parent: "com.azure.core.util.serializer.CollectionFormat"
  langs:
  - "java"
  name: "PIPES"
  nameWithType: "CollectionFormat.PIPES"
  fullName: "com.azure.core.util.serializer.CollectionFormat.PIPES"
  type: "Field"
  package: "com.azure.core.util.serializer"
  summary: "Pipe(|) separated values. E.g. foo|bar"
  syntax:
    content: "public static final CollectionFormat PIPES"
    return:
      type: "com.azure.core.util.serializer.CollectionFormat"
- uid: "com.azure.core.util.serializer.CollectionFormat.SSV"
  id: "SSV"
  parent: "com.azure.core.util.serializer.CollectionFormat"
  langs:
  - "java"
  name: "SSV"
  nameWithType: "CollectionFormat.SSV"
  fullName: "com.azure.core.util.serializer.CollectionFormat.SSV"
  type: "Field"
  package: "com.azure.core.util.serializer"
  summary: "Space separated values. E.g. foo bar"
  syntax:
    content: "public static final CollectionFormat SSV"
    return:
      type: "com.azure.core.util.serializer.CollectionFormat"
- uid: "com.azure.core.util.serializer.CollectionFormat.TSV"
  id: "TSV"
  parent: "com.azure.core.util.serializer.CollectionFormat"
  langs:
  - "java"
  name: "TSV"
  nameWithType: "CollectionFormat.TSV"
  fullName: "com.azure.core.util.serializer.CollectionFormat.TSV"
  type: "Field"
  package: "com.azure.core.util.serializer"
  summary: "Tab separated values. E.g. foo\\\\tbar"
  syntax:
    content: "public static final CollectionFormat TSV"
    return:
      type: "com.azure.core.util.serializer.CollectionFormat"
- uid: "com.azure.core.util.serializer.CollectionFormat.getDelimiter()"
  id: "getDelimiter()"
  parent: "com.azure.core.util.serializer.CollectionFormat"
  langs:
  - "java"
  name: "getDelimiter()"
  nameWithType: "CollectionFormat.getDelimiter()"
  fullName: "com.azure.core.util.serializer.CollectionFormat.getDelimiter()"
  overload: "com.azure.core.util.serializer.CollectionFormat.getDelimiter*"
  type: "Method"
  package: "com.azure.core.util.serializer"
  summary: "Gets the delimiter used to join a list of parameters."
  syntax:
    content: "public String getDelimiter()"
    return:
      type: "java.lang.String"
      description: "the delimiter of the current collection format."
- uid: "com.azure.core.util.serializer.CollectionFormat.valueOf(java.lang.String)"
  id: "valueOf(java.lang.String)"
  parent: "com.azure.core.util.serializer.CollectionFormat"
  langs:
  - "java"
  name: "valueOf(String name)"
  nameWithType: "CollectionFormat.valueOf(String name)"
  fullName: "com.azure.core.util.serializer.CollectionFormat.valueOf(String name)"
  overload: "com.azure.core.util.serializer.CollectionFormat.valueOf*"
  type: "Method"
  package: "com.azure.core.util.serializer"
  syntax:
    content: "public static CollectionFormat valueOf(String name)"
    parameters:
    - id: "name"
      type: "java.lang.String"
    return:
      type: "com.azure.core.util.serializer.CollectionFormat"
- uid: "com.azure.core.util.serializer.CollectionFormat.values()"
  id: "values()"
  parent: "com.azure.core.util.serializer.CollectionFormat"
  langs:
  - "java"
  name: "values()"
  nameWithType: "CollectionFormat.values()"
  fullName: "com.azure.core.util.serializer.CollectionFormat.values()"
  overload: "com.azure.core.util.serializer.CollectionFormat.values*"
  type: "Method"
  package: "com.azure.core.util.serializer"
  syntax:
    content: "public static CollectionFormat[] values()"
    return:
      type: "com.azure.core.util.serializer.CollectionFormat[]"
references:
- uid: "java.lang.String"
  spec.java:
  - uid: "java.lang.String"
    name: "String"
    fullName: "java.lang.String"
- uid: "com.azure.core.util.serializer.CollectionFormat.CollectionFormat*"
  name: "CollectionFormat"
  nameWithType: "CollectionFormat.CollectionFormat"
  fullName: "com.azure.core.util.serializer.CollectionFormat.CollectionFormat"
  package: "com.azure.core.util.serializer"
- uid: "com.azure.core.util.serializer.CollectionFormat[]"
  spec.java:
  - uid: "com.azure.core.util.serializer.CollectionFormat"
    name: "CollectionFormat"
    fullName: "com.azure.core.util.serializer.CollectionFormat"
  - name: "[]"
    fullName: "[]"
- uid: "com.azure.core.util.serializer.CollectionFormat.values*"
  name: "values"
  nameWithType: "CollectionFormat.values"
  fullName: "com.azure.core.util.serializer.CollectionFormat.values"
  package: "com.azure.core.util.serializer"
- uid: "com.azure.core.util.serializer.CollectionFormat.valueOf*"
  name: "valueOf"
  nameWithType: "CollectionFormat.valueOf"
  fullName: "com.azure.core.util.serializer.CollectionFormat.valueOf"
  package: "com.azure.core.util.serializer"
- uid: "com.azure.core.util.serializer.CollectionFormat.getDelimiter*"
  name: "getDelimiter"
  nameWithType: "CollectionFormat.getDelimiter"
  fullName: "com.azure.core.util.serializer.CollectionFormat.getDelimiter"
  package: "com.azure.core.util.serializer"
- uid: "java.lang.Enum<com.azure.core.util.serializer.CollectionFormat>"
  name: "Enum<CollectionFormat>"
  nameWithType: "Enum<CollectionFormat>"
  fullName: "java.lang.Enum<com.azure.core.util.serializer.CollectionFormat>"
- uid: "java.lang.Object.notify()"
  name: "Object.notify()"
  nameWithType: "Object.notify()"
  fullName: "java.lang.Object.notify()"
- uid: "java.lang.Enum.toString()"
  name: "Enum.toString()"
  nameWithType: "Enum.toString()"
  fullName: "java.lang.Enum.toString()"
- uid: "java.lang.Object.wait()"
  name: "Object.wait()"
  nameWithType: "Object.wait()"
  fullName: "java.lang.Object.wait()"
- uid: "java.lang.Enum.clone()"
  name: "Enum.clone()"
  nameWithType: "Enum.clone()"
  fullName: "java.lang.Enum.clone()"
- uid: "java.lang.Enum.finalize()"
  name: "Enum.finalize()"
  nameWithType: "Enum.finalize()"
  fullName: "java.lang.Enum.finalize()"
- uid: "java.lang.Object.notifyAll()"
  name: "Object.notifyAll()"
  nameWithType: "Object.notifyAll()"
  fullName: "java.lang.Object.notifyAll()"
- uid: "java.lang.Enum.compareTo(E)"
  name: "Enum.compareTo(E)"
  nameWithType: "Enum.compareTo(E)"
  fullName: "java.lang.Enum.compareTo(E)"
- uid: "java.lang.Enum.name()"
  name: "Enum.name()"
  nameWithType: "Enum.name()"
  fullName: "java.lang.Enum.name()"
- uid: "java.lang.Enum.<T>valueOf(java.lang.Class<T>,java.lang.String)"
  name: "Enum.<T>valueOf(Class<T>,String)"
  nameWithType: "Enum.<T>valueOf(Class<T>,String)"
  fullName: "java.lang.Enum.<T>valueOf(java.lang.Class<T>,java.lang.String)"
- uid: "java.lang.Object.getClass()"
  name: "Object.getClass()"
  nameWithType: "Object.getClass()"
  fullName: "java.lang.Object.getClass()"
- uid: "java.lang.Enum.getDeclaringClass()"
  name: "Enum.getDeclaringClass()"
  nameWithType: "Enum.getDeclaringClass()"
  fullName: "java.lang.Enum.getDeclaringClass()"
- uid: "java.lang.Object.wait(long)"
  name: "Object.wait(long)"
  nameWithType: "Object.wait(long)"
  fullName: "java.lang.Object.wait(long)"
- uid: "java.lang.Enum.ordinal()"
  name: "Enum.ordinal()"
  nameWithType: "Enum.ordinal()"
  fullName: "java.lang.Enum.ordinal()"
- uid: "java.lang.Enum.hashCode()"
  name: "Enum.hashCode()"
  nameWithType: "Enum.hashCode()"
  fullName: "java.lang.Enum.hashCode()"
- uid: "java.lang.Object.wait(long,int)"
  name: "Object.wait(long,int)"
  nameWithType: "Object.wait(long,int)"
  fullName: "java.lang.Object.wait(long,int)"
- uid: "java.lang.Enum.equals(java.lang.Object)"
  name: "Enum.equals(Object)"
  nameWithType: "Enum.equals(Object)"
  fullName: "java.lang.Enum.equals(java.lang.Object)"
- uid: "java.lang.Enum"
  name: "Enum"
  nameWithType: "Enum"
  fullName: "java.lang.Enum"
- uid: "java.lang.Enum."
  name: "Enum."
  nameWithType: "Enum."
  fullName: "java.lang.Enum."
- uid: "T>,java.lang.String)"
  name: "T>,String)"
  nameWithType: "T>,String)"
  fullName: "T>,java.lang.String)"
- uid: "T>valueOf(java.lang.Class"
  name: "T>valueOf(Class"
  nameWithType: "T>valueOf(Class"
  fullName: "T>valueOf(java.lang.Class"
