### YamlMime:ManagedReference
items:
- uid: "com.azure.storage.blob.ProgressReporter.ParallelProgressReporter"
  id: "ParallelProgressReporter"
  parent: "com.azure.storage.blob"
  children:
  - "com.azure.storage.blob.ProgressReporter.ParallelProgressReporter.ParallelProgressReporter(com.azure.storage.blob.ProgressReceiver,java.util.concurrent.locks.Lock,java.util.concurrent.atomic.AtomicLong)"
  - "com.azure.storage.blob.ProgressReporter.ParallelProgressReporter.reportProgress(long)"
  - "com.azure.storage.blob.ProgressReporter.ParallelProgressReporter.rewindProgress()"
  langs:
  - "java"
  name: "ProgressReporter.ParallelProgressReporter"
  nameWithType: "ProgressReporter.ParallelProgressReporter"
  fullName: "com.azure.storage.blob.ProgressReporter.ParallelProgressReporter"
  type: "Class"
  package: "com.azure.storage.blob"
  summary: "This type is used to keep track of the total amount of data transferred as a part of a parallel upload in order to coordinate progress reporting to the end user. We need this additional type because we can't keep local state directly as lambdas require captured local variables to be effectively final."
  syntax:
    content: "private static class ProgressReporter.ParallelProgressReporter extends ProgressReporter.ProgressReporterImpl"
  inheritance:
  - "java.lang.Object"
  - "com.azure.storage.blob.ProgressReporter.ProgressReporterImpl"
  inheritedMembers:
  - "com.azure.storage.blob.ProgressReporter.ProgressReporterImpl.addProgressReporting(reactor.core.publisher.Flux<java.nio.ByteBuffer>)"
  - "com.azure.storage.blob.ProgressReporter.ProgressReporterImpl.reportProgress(long)"
  - "com.azure.storage.blob.ProgressReporter.ProgressReporterImpl.rewindProgress()"
  - "java.lang.Object.clone()"
  - "java.lang.Object.equals(java.lang.Object)"
  - "java.lang.Object.finalize()"
  - "java.lang.Object.getClass()"
  - "java.lang.Object.hashCode()"
  - "java.lang.Object.notify()"
  - "java.lang.Object.notifyAll()"
  - "java.lang.Object.toString()"
  - "java.lang.Object.wait()"
  - "java.lang.Object.wait(long)"
  - "java.lang.Object.wait(long,int)"
- uid: "com.azure.storage.blob.ProgressReporter.ParallelProgressReporter.ParallelProgressReporter(com.azure.storage.blob.ProgressReceiver,java.util.concurrent.locks.Lock,java.util.concurrent.atomic.AtomicLong)"
  id: "ParallelProgressReporter(com.azure.storage.blob.ProgressReceiver,java.util.concurrent.locks.Lock,java.util.concurrent.atomic.AtomicLong)"
  parent: "com.azure.storage.blob.ProgressReporter.ParallelProgressReporter"
  langs:
  - "java"
  name: "ParallelProgressReporter(ProgressReceiver progressReceiver, Lock lock, AtomicLong totalProgress)"
  nameWithType: "ProgressReporter.ParallelProgressReporter.ParallelProgressReporter(ProgressReceiver progressReceiver, Lock lock, AtomicLong totalProgress)"
  fullName: "com.azure.storage.blob.ProgressReporter.ParallelProgressReporter.ParallelProgressReporter(ProgressReceiver progressReceiver, Lock lock, AtomicLong totalProgress)"
  overload: "com.azure.storage.blob.ProgressReporter.ParallelProgressReporter.ParallelProgressReporter*"
  type: "Constructor"
  package: "com.azure.storage.blob"
  syntax:
    content: " ParallelProgressReporter(ProgressReceiver progressReceiver, Lock lock, AtomicLong totalProgress)"
    parameters:
    - id: "progressReceiver"
      type: "com.azure.storage.blob.ProgressReceiver"
    - id: "lock"
      type: "java.util.concurrent.locks.Lock"
    - id: "totalProgress"
      type: "java.util.concurrent.atomic.AtomicLong"
- uid: "com.azure.storage.blob.ProgressReporter.ParallelProgressReporter.reportProgress(long)"
  id: "reportProgress(long)"
  parent: "com.azure.storage.blob.ProgressReporter.ParallelProgressReporter"
  langs:
  - "java"
  name: "reportProgress(long bytesTransferred)"
  nameWithType: "ProgressReporter.ParallelProgressReporter.reportProgress(long bytesTransferred)"
  fullName: "com.azure.storage.blob.ProgressReporter.ParallelProgressReporter.reportProgress(long bytesTransferred)"
  overload: "com.azure.storage.blob.ProgressReporter.ParallelProgressReporter.reportProgress*"
  type: "Method"
  package: "com.azure.storage.blob"
  syntax:
    content: "public void reportProgress(long bytesTransferred)"
    parameters:
    - id: "bytesTransferred"
      type: "long"
- uid: "com.azure.storage.blob.ProgressReporter.ParallelProgressReporter.rewindProgress()"
  id: "rewindProgress()"
  parent: "com.azure.storage.blob.ProgressReporter.ParallelProgressReporter"
  langs:
  - "java"
  name: "rewindProgress()"
  nameWithType: "ProgressReporter.ParallelProgressReporter.rewindProgress()"
  fullName: "com.azure.storage.blob.ProgressReporter.ParallelProgressReporter.rewindProgress()"
  overload: "com.azure.storage.blob.ProgressReporter.ParallelProgressReporter.rewindProgress*"
  type: "Method"
  package: "com.azure.storage.blob"
  syntax:
    content: "public void rewindProgress()"
references:
- uid: "com.azure.storage.blob.ProgressReceiver"
  name: "ProgressReceiver"
  nameWithType: "ProgressReceiver"
  fullName: "com.azure.storage.blob.ProgressReceiver"
- uid: "java.util.concurrent.locks.Lock"
  spec.java:
  - uid: "java.util.concurrent.locks.Lock"
    name: "Lock"
    fullName: "java.util.concurrent.locks.Lock"
- uid: "java.util.concurrent.atomic.AtomicLong"
  spec.java:
  - uid: "java.util.concurrent.atomic.AtomicLong"
    name: "AtomicLong"
    fullName: "java.util.concurrent.atomic.AtomicLong"
- uid: "com.azure.storage.blob.ProgressReporter.ParallelProgressReporter.ParallelProgressReporter*"
  name: "ParallelProgressReporter"
  nameWithType: "ProgressReporter.ParallelProgressReporter.ParallelProgressReporter"
  fullName: "com.azure.storage.blob.ProgressReporter.ParallelProgressReporter.ParallelProgressReporter"
  package: "com.azure.storage.blob"
- uid: "long"
  spec.java:
  - uid: "long"
    name: "long"
    fullName: "long"
- uid: "com.azure.storage.blob.ProgressReporter.ParallelProgressReporter.reportProgress*"
  name: "reportProgress"
  nameWithType: "ProgressReporter.ParallelProgressReporter.reportProgress"
  fullName: "com.azure.storage.blob.ProgressReporter.ParallelProgressReporter.reportProgress"
  package: "com.azure.storage.blob"
- uid: "com.azure.storage.blob.ProgressReporter.ParallelProgressReporter.rewindProgress*"
  name: "rewindProgress"
  nameWithType: "ProgressReporter.ParallelProgressReporter.rewindProgress"
  fullName: "com.azure.storage.blob.ProgressReporter.ParallelProgressReporter.rewindProgress"
  package: "com.azure.storage.blob"
- uid: "com.azure.storage.blob.ProgressReporter.ProgressReporterImpl"
  name: "ProgressReporter.ProgressReporterImpl"
  nameWithType: "ProgressReporter.ProgressReporterImpl"
  fullName: "com.azure.storage.blob.ProgressReporter.ProgressReporterImpl"
- uid: "java.lang.Object.notify()"
  name: "Object.notify()"
  nameWithType: "Object.notify()"
  fullName: "java.lang.Object.notify()"
- uid: "java.lang.Object.wait()"
  name: "Object.wait()"
  nameWithType: "Object.wait()"
  fullName: "java.lang.Object.wait()"
- uid: "java.lang.Object.finalize()"
  name: "Object.finalize()"
  nameWithType: "Object.finalize()"
  fullName: "java.lang.Object.finalize()"
- uid: "java.lang.Object.notifyAll()"
  name: "Object.notifyAll()"
  nameWithType: "Object.notifyAll()"
  fullName: "java.lang.Object.notifyAll()"
- uid: "java.lang.Object.clone()"
  name: "Object.clone()"
  nameWithType: "Object.clone()"
  fullName: "java.lang.Object.clone()"
- uid: "java.lang.Object.equals(java.lang.Object)"
  name: "Object.equals(Object)"
  nameWithType: "Object.equals(Object)"
  fullName: "java.lang.Object.equals(java.lang.Object)"
- uid: "com.azure.storage.blob.ProgressReporter.ProgressReporterImpl.reportProgress(long)"
  name: "ProgressReporter.ProgressReporterImpl.reportProgress(long)"
  nameWithType: "ProgressReporter.ProgressReporterImpl.reportProgress(long)"
  fullName: "com.azure.storage.blob.ProgressReporter.ProgressReporterImpl.reportProgress(long)"
- uid: "com.azure.storage.blob.ProgressReporter.ProgressReporterImpl.addProgressReporting(reactor.core.publisher.Flux<java.nio.ByteBuffer>)"
  name: "ProgressReporter.ProgressReporterImpl.addProgressReporting(Flux<ByteBuffer>)"
  nameWithType: "ProgressReporter.ProgressReporterImpl.addProgressReporting(Flux<ByteBuffer>)"
  fullName: "com.azure.storage.blob.ProgressReporter.ProgressReporterImpl.addProgressReporting(reactor.core.publisher.Flux<java.nio.ByteBuffer>)"
- uid: "java.lang.Object.toString()"
  name: "Object.toString()"
  nameWithType: "Object.toString()"
  fullName: "java.lang.Object.toString()"
- uid: "java.lang.Object.getClass()"
  name: "Object.getClass()"
  nameWithType: "Object.getClass()"
  fullName: "java.lang.Object.getClass()"
- uid: "java.lang.Object.wait(long)"
  name: "Object.wait(long)"
  nameWithType: "Object.wait(long)"
  fullName: "java.lang.Object.wait(long)"
- uid: "java.lang.Object.hashCode()"
  name: "Object.hashCode()"
  nameWithType: "Object.hashCode()"
  fullName: "java.lang.Object.hashCode()"
- uid: "java.lang.Object.wait(long,int)"
  name: "Object.wait(long,int)"
  nameWithType: "Object.wait(long,int)"
  fullName: "java.lang.Object.wait(long,int)"
- uid: "com.azure.storage.blob.ProgressReporter.ProgressReporterImpl.rewindProgress()"
  name: "ProgressReporter.ProgressReporterImpl.rewindProgress()"
  nameWithType: "ProgressReporter.ProgressReporterImpl.rewindProgress()"
  fullName: "com.azure.storage.blob.ProgressReporter.ProgressReporterImpl.rewindProgress()"
- uid: "java.nio.ByteBuffer>)"
  name: "ByteBuffer>)"
  nameWithType: "ByteBuffer>)"
  fullName: "java.nio.ByteBuffer>)"
- uid: "com.azure.storage.blob.ProgressReporter.ProgressReporterImpl.addProgressReporting(reactor.core.publisher.Flux"
  name: "ProgressReporter.ProgressReporterImpl.addProgressReporting(Flux"
  nameWithType: "ProgressReporter.ProgressReporterImpl.addProgressReporting(Flux"
  fullName: "com.azure.storage.blob.ProgressReporter.ProgressReporterImpl.addProgressReporting(reactor.core.publisher.Flux"
