### YamlMime:ManagedReference
items:
- uid: "com.azure.core.util.logging.ClientLogger"
  id: "ClientLogger"
  parent: "com.azure.core.util.logging"
  children:
  - "com.azure.core.util.logging.ClientLogger.ClientLogger(java.lang.Class<?>)"
  - "com.azure.core.util.logging.ClientLogger.ClientLogger(java.lang.String)"
  - "com.azure.core.util.logging.ClientLogger.canLogAtLevel(com.azure.core.util.logging.LogLevel)"
  - "com.azure.core.util.logging.ClientLogger.error(java.lang.String,java.lang.Object...)"
  - "com.azure.core.util.logging.ClientLogger.info(java.lang.String,java.lang.Object...)"
  - "com.azure.core.util.logging.ClientLogger.logExceptionAsError(java.lang.RuntimeException)"
  - "com.azure.core.util.logging.ClientLogger.logExceptionAsWarning(java.lang.RuntimeException)"
  - "com.azure.core.util.logging.ClientLogger.verbose(java.lang.String,java.lang.Object...)"
  - "com.azure.core.util.logging.ClientLogger.warning(java.lang.String,java.lang.Object...)"
  langs:
  - "java"
  name: "ClientLogger"
  nameWithType: "ClientLogger"
  fullName: "com.azure.core.util.logging.ClientLogger"
  type: "Class"
  package: "com.azure.core.util.logging"
  summary: "This is a fluent logger helper class that wraps a pluggable <xref uid=\"\" data-throw-if-not-resolved=\"false\">Logger</xref>.\n\nThis logger logs formattable messages that use `{}` as the placeholder. When a <xref uid=\"\" data-throw-if-not-resolved=\"false\">throwable</xref> is the last argument of the format varargs and the logger is enabled for <xref uid=\"\" data-throw-if-not-resolved=\"false\">verbose</xref>, the stack trace for the throwable is logged.\n\nA minimum logging level threshold is determined by the <xref uid=\"com.azure.core.util.Configuration.PROPERTY_AZURE_LOG_LEVEL\" data-throw-if-not-resolved=\"false\">AZURE_LOG_LEVEL</xref> environment configuration. By default logging is **disabled**.\n\n**Log level hierarchy**\n\n1.  <xref uid=\"\" data-throw-if-not-resolved=\"false\">Error</xref>\n2.  <xref uid=\"\" data-throw-if-not-resolved=\"false\">Warning</xref>\n3.  <xref uid=\"\" data-throw-if-not-resolved=\"false\">Info</xref>\n4.  <xref uid=\"\" data-throw-if-not-resolved=\"false\">Verbose</xref>"
  syntax:
    content: "public class ClientLogger"
  inheritance:
  - "java.lang.Object"
  inheritedMembers:
  - "java.lang.Object.clone()"
  - "java.lang.Object.equals(java.lang.Object)"
  - "java.lang.Object.finalize()"
  - "java.lang.Object.getClass()"
  - "java.lang.Object.hashCode()"
  - "java.lang.Object.notify()"
  - "java.lang.Object.notifyAll()"
  - "java.lang.Object.toString()"
  - "java.lang.Object.wait()"
  - "java.lang.Object.wait(long)"
  - "java.lang.Object.wait(long,int)"
- uid: "com.azure.core.util.logging.ClientLogger.ClientLogger(java.lang.Class<?>)"
  id: "ClientLogger(java.lang.Class<?>)"
  parent: "com.azure.core.util.logging.ClientLogger"
  langs:
  - "java"
  name: "ClientLogger(Class<?> clazz)"
  nameWithType: "ClientLogger.ClientLogger(Class<?> clazz)"
  fullName: "com.azure.core.util.logging.ClientLogger.ClientLogger(Class<?> clazz)"
  overload: "com.azure.core.util.logging.ClientLogger.ClientLogger*"
  type: "Constructor"
  package: "com.azure.core.util.logging"
  summary: "Retrieves a logger for the passed class using the <xref uid=\"\" data-throw-if-not-resolved=\"false\">LoggerFactory</xref>."
  syntax:
    content: "public ClientLogger(Class<?> clazz)"
    parameters:
    - id: "clazz"
      type: "java.lang.Class<?>"
      description: "Class creating the logger."
- uid: "com.azure.core.util.logging.ClientLogger.ClientLogger(java.lang.String)"
  id: "ClientLogger(java.lang.String)"
  parent: "com.azure.core.util.logging.ClientLogger"
  langs:
  - "java"
  name: "ClientLogger(String className)"
  nameWithType: "ClientLogger.ClientLogger(String className)"
  fullName: "com.azure.core.util.logging.ClientLogger.ClientLogger(String className)"
  overload: "com.azure.core.util.logging.ClientLogger.ClientLogger*"
  type: "Constructor"
  package: "com.azure.core.util.logging"
  summary: "Retrieves a logger for the passed class name using the <xref uid=\"\" data-throw-if-not-resolved=\"false\">LoggerFactory</xref>."
  syntax:
    content: "public ClientLogger(String className)"
    parameters:
    - id: "className"
      type: "java.lang.String"
      description: "Class name creating the logger."
- uid: "com.azure.core.util.logging.ClientLogger.canLogAtLevel(com.azure.core.util.logging.LogLevel)"
  id: "canLogAtLevel(com.azure.core.util.logging.LogLevel)"
  parent: "com.azure.core.util.logging.ClientLogger"
  langs:
  - "java"
  name: "canLogAtLevel(LogLevel logLevel)"
  nameWithType: "ClientLogger.canLogAtLevel(LogLevel logLevel)"
  fullName: "com.azure.core.util.logging.ClientLogger.canLogAtLevel(LogLevel logLevel)"
  overload: "com.azure.core.util.logging.ClientLogger.canLogAtLevel*"
  type: "Method"
  package: "com.azure.core.util.logging"
  summary: "Determines if the environment and logger support logging at the given log level."
  syntax:
    content: "public boolean canLogAtLevel(LogLevel logLevel)"
    parameters:
    - id: "logLevel"
      type: "com.azure.core.util.logging.LogLevel"
      description: "The <xref uid=\"com.azure.core.util.logging.LogLevel\" data-throw-if-not-resolved=\"false\">LogLevel</xref> being validated as supported."
    return:
      type: "boolean"
      description: "Flag indicating if the environment and logger support logging at the given log level."
- uid: "com.azure.core.util.logging.ClientLogger.error(java.lang.String,java.lang.Object...)"
  id: "error(java.lang.String,java.lang.Object...)"
  parent: "com.azure.core.util.logging.ClientLogger"
  langs:
  - "java"
  name: "error(String format, Object[] args)"
  nameWithType: "ClientLogger.error(String format, Object[] args)"
  fullName: "com.azure.core.util.logging.ClientLogger.error(String format, Object[] args)"
  overload: "com.azure.core.util.logging.ClientLogger.error*"
  type: "Method"
  package: "com.azure.core.util.logging"
  summary: "Logs a formattable message that uses `{}` as the placeholder at `error` log level.\n\n**Code samples**\n\nLogging an error with stack trace.\n\n\\{@codesnippet com.azure.core.util.logging.clientlogger.error\\}"
  syntax:
    content: "public void error(String format, Object[] args)"
    parameters:
    - id: "format"
      type: "java.lang.String"
      description: "The formattable message to log."
    - id: "args"
      type: "java.lang.Object[]"
      description: "Arguments for the message. If an exception is being logged, the last argument should be the\n     <xref uid=\"\" data-throw-if-not-resolved=\"false\">Throwable</xref>."
- uid: "com.azure.core.util.logging.ClientLogger.info(java.lang.String,java.lang.Object...)"
  id: "info(java.lang.String,java.lang.Object...)"
  parent: "com.azure.core.util.logging.ClientLogger"
  langs:
  - "java"
  name: "info(String format, Object[] args)"
  nameWithType: "ClientLogger.info(String format, Object[] args)"
  fullName: "com.azure.core.util.logging.ClientLogger.info(String format, Object[] args)"
  overload: "com.azure.core.util.logging.ClientLogger.info*"
  type: "Method"
  package: "com.azure.core.util.logging"
  summary: "Logs a formattable message that uses `{}` as the placeholder at `informational` log level.\n\n**Code samples**\n\nLogging a message at informational log level.\n\n\\{@codesnippet com.azure.core.util.logging.clientlogger.info\\}"
  syntax:
    content: "public void info(String format, Object[] args)"
    parameters:
    - id: "format"
      type: "java.lang.String"
      description: "The formattable message to log"
    - id: "args"
      type: "java.lang.Object[]"
      description: "Arguments for the message. If an exception is being logged, the last argument should be the\n     <xref uid=\"\" data-throw-if-not-resolved=\"false\">Throwable</xref>."
- uid: "com.azure.core.util.logging.ClientLogger.logExceptionAsError(java.lang.RuntimeException)"
  id: "logExceptionAsError(java.lang.RuntimeException)"
  parent: "com.azure.core.util.logging.ClientLogger"
  langs:
  - "java"
  name: "logExceptionAsError(RuntimeException runtimeException)"
  nameWithType: "ClientLogger.logExceptionAsError(RuntimeException runtimeException)"
  fullName: "com.azure.core.util.logging.ClientLogger.logExceptionAsError(RuntimeException runtimeException)"
  overload: "com.azure.core.util.logging.ClientLogger.logExceptionAsError*"
  type: "Method"
  package: "com.azure.core.util.logging"
  summary: "Logs the <xref uid=\"java.lang.RuntimeException\" data-throw-if-not-resolved=\"false\">RuntimeException</xref> at the error level and returns it to be thrown."
  syntax:
    content: "public RuntimeException logExceptionAsError(RuntimeException runtimeException)"
    parameters:
    - id: "runtimeException"
      type: "java.lang.RuntimeException"
      description: "RuntimeException to be logged and returned."
    return:
      type: "java.lang.RuntimeException"
      description: "The passed <code>RuntimeException</code>."
- uid: "com.azure.core.util.logging.ClientLogger.logExceptionAsWarning(java.lang.RuntimeException)"
  id: "logExceptionAsWarning(java.lang.RuntimeException)"
  parent: "com.azure.core.util.logging.ClientLogger"
  langs:
  - "java"
  name: "logExceptionAsWarning(RuntimeException runtimeException)"
  nameWithType: "ClientLogger.logExceptionAsWarning(RuntimeException runtimeException)"
  fullName: "com.azure.core.util.logging.ClientLogger.logExceptionAsWarning(RuntimeException runtimeException)"
  overload: "com.azure.core.util.logging.ClientLogger.logExceptionAsWarning*"
  type: "Method"
  package: "com.azure.core.util.logging"
  summary: "Logs the <xref uid=\"java.lang.RuntimeException\" data-throw-if-not-resolved=\"false\">RuntimeException</xref> at the warning level and returns it to be thrown."
  syntax:
    content: "public RuntimeException logExceptionAsWarning(RuntimeException runtimeException)"
    parameters:
    - id: "runtimeException"
      type: "java.lang.RuntimeException"
      description: "RuntimeException to be logged and returned."
    return:
      type: "java.lang.RuntimeException"
      description: "The passed <code>RuntimeException</code>."
- uid: "com.azure.core.util.logging.ClientLogger.verbose(java.lang.String,java.lang.Object...)"
  id: "verbose(java.lang.String,java.lang.Object...)"
  parent: "com.azure.core.util.logging.ClientLogger"
  langs:
  - "java"
  name: "verbose(String format, Object[] args)"
  nameWithType: "ClientLogger.verbose(String format, Object[] args)"
  fullName: "com.azure.core.util.logging.ClientLogger.verbose(String format, Object[] args)"
  overload: "com.azure.core.util.logging.ClientLogger.verbose*"
  type: "Method"
  package: "com.azure.core.util.logging"
  summary: "Logs a formattable message that uses `{}` as the placeholder at `verbose` log level.\n\n**Code samples**\n\nLogging a message at verbose log level.\n\n\\{@codesnippet com.azure.core.util.logging.clientlogger.verbose\\}"
  syntax:
    content: "public void verbose(String format, Object[] args)"
    parameters:
    - id: "format"
      type: "java.lang.String"
      description: "The formattable message to log."
    - id: "args"
      type: "java.lang.Object[]"
      description: "Arguments for the message. If an exception is being logged, the last argument should be the\n     <xref uid=\"\" data-throw-if-not-resolved=\"false\">Throwable</xref>."
- uid: "com.azure.core.util.logging.ClientLogger.warning(java.lang.String,java.lang.Object...)"
  id: "warning(java.lang.String,java.lang.Object...)"
  parent: "com.azure.core.util.logging.ClientLogger"
  langs:
  - "java"
  name: "warning(String format, Object[] args)"
  nameWithType: "ClientLogger.warning(String format, Object[] args)"
  fullName: "com.azure.core.util.logging.ClientLogger.warning(String format, Object[] args)"
  overload: "com.azure.core.util.logging.ClientLogger.warning*"
  type: "Method"
  package: "com.azure.core.util.logging"
  summary: "Logs a formattable message that uses `{}` as the placeholder at `warning` log level.\n\n**Code samples**\n\nLogging a message at warning log level.\n\n\\{@codesnippet com.azure.core.util.logging.clientlogger.warning\\}"
  syntax:
    content: "public void warning(String format, Object[] args)"
    parameters:
    - id: "format"
      type: "java.lang.String"
      description: "The formattable message to log."
    - id: "args"
      type: "java.lang.Object[]"
      description: "Arguments for the message. If an exception is being logged, the last argument should be the\n     <xref uid=\"\" data-throw-if-not-resolved=\"false\">Throwable</xref>."
references:
- uid: "java.lang.Class<?>"
  spec.java:
  - uid: "java.lang.Class"
    name: "Class"
    fullName: "java.lang.Class"
  - name: "<"
    fullName: "<"
  - uid: "?"
    name: "?"
    fullName: "?"
  - name: ">"
    fullName: ">"
- uid: "com.azure.core.util.logging.ClientLogger.ClientLogger*"
  name: "ClientLogger"
  nameWithType: "ClientLogger.ClientLogger"
  fullName: "com.azure.core.util.logging.ClientLogger.ClientLogger"
  package: "com.azure.core.util.logging"
- uid: "java.lang.String"
  spec.java:
  - uid: "java.lang.String"
    name: "String"
    fullName: "java.lang.String"
- uid: "java.lang.Object[]"
  spec.java:
  - uid: "java.lang.Object"
    name: "Object"
    fullName: "java.lang.Object"
  - name: "[]"
    fullName: "[]"
- uid: "com.azure.core.util.logging.ClientLogger.verbose*"
  name: "verbose"
  nameWithType: "ClientLogger.verbose"
  fullName: "com.azure.core.util.logging.ClientLogger.verbose"
  package: "com.azure.core.util.logging"
- uid: "com.azure.core.util.logging.ClientLogger.info*"
  name: "info"
  nameWithType: "ClientLogger.info"
  fullName: "com.azure.core.util.logging.ClientLogger.info"
  package: "com.azure.core.util.logging"
- uid: "com.azure.core.util.logging.ClientLogger.warning*"
  name: "warning"
  nameWithType: "ClientLogger.warning"
  fullName: "com.azure.core.util.logging.ClientLogger.warning"
  package: "com.azure.core.util.logging"
- uid: "com.azure.core.util.logging.ClientLogger.error*"
  name: "error"
  nameWithType: "ClientLogger.error"
  fullName: "com.azure.core.util.logging.ClientLogger.error"
  package: "com.azure.core.util.logging"
- uid: "java.lang.RuntimeException"
  spec.java:
  - uid: "java.lang.RuntimeException"
    name: "RuntimeException"
    fullName: "java.lang.RuntimeException"
- uid: "com.azure.core.util.logging.ClientLogger.logExceptionAsWarning*"
  name: "logExceptionAsWarning"
  nameWithType: "ClientLogger.logExceptionAsWarning"
  fullName: "com.azure.core.util.logging.ClientLogger.logExceptionAsWarning"
  package: "com.azure.core.util.logging"
- uid: "com.azure.core.util.logging.ClientLogger.logExceptionAsError*"
  name: "logExceptionAsError"
  nameWithType: "ClientLogger.logExceptionAsError"
  fullName: "com.azure.core.util.logging.ClientLogger.logExceptionAsError"
  package: "com.azure.core.util.logging"
- uid: "com.azure.core.util.logging.LogLevel"
  name: "LogLevel"
  nameWithType: "LogLevel"
  fullName: "com.azure.core.util.logging.LogLevel"
- uid: "boolean"
  spec.java:
  - uid: "boolean"
    name: "boolean"
    fullName: "boolean"
- uid: "com.azure.core.util.logging.ClientLogger.canLogAtLevel*"
  name: "canLogAtLevel"
  nameWithType: "ClientLogger.canLogAtLevel"
  fullName: "com.azure.core.util.logging.ClientLogger.canLogAtLevel"
  package: "com.azure.core.util.logging"
- uid: "java.lang.Object.notify()"
  name: "Object.notify()"
  nameWithType: "Object.notify()"
  fullName: "java.lang.Object.notify()"
- uid: "java.lang.Object.wait()"
  name: "Object.wait()"
  nameWithType: "Object.wait()"
  fullName: "java.lang.Object.wait()"
- uid: "java.lang.Object.finalize()"
  name: "Object.finalize()"
  nameWithType: "Object.finalize()"
  fullName: "java.lang.Object.finalize()"
- uid: "java.lang.Object.clone()"
  name: "Object.clone()"
  nameWithType: "Object.clone()"
  fullName: "java.lang.Object.clone()"
- uid: "java.lang.Object.notifyAll()"
  name: "Object.notifyAll()"
  nameWithType: "Object.notifyAll()"
  fullName: "java.lang.Object.notifyAll()"
- uid: "java.lang.Object.equals(java.lang.Object)"
  name: "Object.equals(Object)"
  nameWithType: "Object.equals(Object)"
  fullName: "java.lang.Object.equals(java.lang.Object)"
- uid: "java.lang.Object.getClass()"
  name: "Object.getClass()"
  nameWithType: "Object.getClass()"
  fullName: "java.lang.Object.getClass()"
- uid: "java.lang.Object.wait(long)"
  name: "Object.wait(long)"
  nameWithType: "Object.wait(long)"
  fullName: "java.lang.Object.wait(long)"
- uid: "java.lang.Object.hashCode()"
  name: "Object.hashCode()"
  nameWithType: "Object.hashCode()"
  fullName: "java.lang.Object.hashCode()"
- uid: "java.lang.Object.wait(long,int)"
  name: "Object.wait(long,int)"
  nameWithType: "Object.wait(long,int)"
  fullName: "java.lang.Object.wait(long,int)"
- uid: "java.lang.Object.toString()"
  name: "Object.toString()"
  nameWithType: "Object.toString()"
  fullName: "java.lang.Object.toString()"
- uid: "java.lang.Class"
  name: "Class"
  nameWithType: "Class"
  fullName: "java.lang.Class"
- uid: "?"
  name: "?"
  nameWithType: "?"
  fullName: "?"
