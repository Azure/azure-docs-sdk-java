### YamlMime:ManagedReference
items:
- uid: "com.azure.core.http.rest.PagedIterable"
  id: "PagedIterable"
  parent: "com.azure.core.http.rest"
  children:
  - "com.azure.core.http.rest.PagedIterable.<S>mapPage(java.util.function.Function<T,S>)"
  - "com.azure.core.http.rest.PagedIterable.PagedIterable(com.azure.core.http.rest.PagedFlux<T>)"
  langs:
  - "java"
  name: "PagedIterable<T>"
  nameWithType: "PagedIterable<T>"
  fullName: "com.azure.core.http.rest.PagedIterable<T>"
  type: "Class"
  package: "com.azure.core.http.rest"
  summary: "This class provides utility to iterate over <xref uid=\"com.azure.core.http.rest.PagedResponse\" data-throw-if-not-resolved=\"false\">PagedResponse</xref> using <xref uid=\"java.util.stream.Stream\" data-throw-if-not-resolved=\"false\">Stream</xref> and <xref uid=\"java.lang.Iterable\" data-throw-if-not-resolved=\"false\">Iterable</xref> interfaces.\n\n**Code sample using <xref uid=\"java.util.stream.Stream\" data-throw-if-not-resolved=\"false\">Stream</xref> by page**\n\n\\{@codesnippet com.azure.core.http.rest.pagedIterable.streamByPage\\}\n\n**Code sample using <xref uid=\"java.lang.Iterable\" data-throw-if-not-resolved=\"false\">Iterable</xref> by page**\n\n\\{@codesnippet com.azure.core.http.rest.pagedIterable.iterableByPage\\}\n\n**Code sample using <xref uid=\"java.lang.Iterable\" data-throw-if-not-resolved=\"false\">Iterable</xref> by page and while loop**\n\n\\{@codesnippet com.azure.core.http.rest.pagedIterable.iterableByPage.while\\}"
  syntax:
    content: "public class PagedIterable<T> extends PagedIterableBase<T,PagedResponse<T>>"
    typeParameters:
    - id: "T"
  inheritance:
  - "java.lang.Object"
  - "com.azure.core.util.IterableStream"
  - "com.azure.core.http.rest.PagedIterableBase"
  inheritedMembers:
  - "com.azure.core.http.rest.PagedIterableBase.iterableByPage()"
  - "com.azure.core.http.rest.PagedIterableBase.iterableByPage(java.lang.String)"
  - "com.azure.core.http.rest.PagedIterableBase.streamByPage()"
  - "com.azure.core.http.rest.PagedIterableBase.streamByPage(java.lang.String)"
  - "com.azure.core.util.IterableStream.iterator()"
  - "com.azure.core.util.IterableStream.stream()"
  - "java.lang.Object.clone()"
  - "java.lang.Object.equals(java.lang.Object)"
  - "java.lang.Object.finalize()"
  - "java.lang.Object.getClass()"
  - "java.lang.Object.hashCode()"
  - "java.lang.Object.notify()"
  - "java.lang.Object.notifyAll()"
  - "java.lang.Object.toString()"
  - "java.lang.Object.wait()"
  - "java.lang.Object.wait(long)"
  - "java.lang.Object.wait(long,int)"
- uid: "com.azure.core.http.rest.PagedIterable.<S>mapPage(java.util.function.Function<T,S>)"
  id: "<S>mapPage(java.util.function.Function<T,S>)"
  parent: "com.azure.core.http.rest.PagedIterable"
  langs:
  - "java"
  name: "<S>mapPage(Function<T,S> mapper)"
  nameWithType: "PagedIterable<T>.<S>mapPage(Function<T,S> mapper)"
  fullName: "com.azure.core.http.rest.PagedIterable<T>.<S>mapPage(Function<T,S> mapper)"
  overload: "com.azure.core.http.rest.PagedIterable.mapPage*"
  type: "Method"
  package: "com.azure.core.http.rest"
  summary: "Maps this PagedIterable instance of T to a PagedIterable instance of type S as per the provided mapper function."
  syntax:
    content: "public PagedIterable<S> <S>mapPage(Function<T,S> mapper)"
    parameters:
    - id: "mapper"
      type: "java.util.function.Function<T,S>"
      description: "The mapper function to convert from type T to type S."
    return:
      type: "com.azure.core.http.rest.PagedIterable<S>"
      description: "A PagedIterable of type S."
- uid: "com.azure.core.http.rest.PagedIterable.PagedIterable(com.azure.core.http.rest.PagedFlux<T>)"
  id: "PagedIterable(com.azure.core.http.rest.PagedFlux<T>)"
  parent: "com.azure.core.http.rest.PagedIterable"
  langs:
  - "java"
  name: "PagedIterable(PagedFlux<T> pagedFlux)"
  nameWithType: "PagedIterable<T>.PagedIterable(PagedFlux<T> pagedFlux)"
  fullName: "com.azure.core.http.rest.PagedIterable<T>.PagedIterable(PagedFlux<T> pagedFlux)"
  overload: "com.azure.core.http.rest.PagedIterable.PagedIterable*"
  type: "Constructor"
  package: "com.azure.core.http.rest"
  summary: "Creates instance given <xref uid=\"com.azure.core.http.rest.PagedFlux\" data-throw-if-not-resolved=\"false\">PagedFlux</xref>."
  syntax:
    content: "public PagedIterable(PagedFlux<T> pagedFlux)"
    parameters:
    - id: "pagedFlux"
      type: "com.azure.core.http.rest.PagedFlux<T>"
      description: "to use as iterable"
references:
- uid: "com.azure.core.http.rest.PagedFlux<T>"
  spec.java:
  - uid: "com.azure.core.http.rest.PagedFlux"
    name: "PagedFlux"
    fullName: "com.azure.core.http.rest.PagedFlux"
  - name: "<"
    fullName: "<"
  - uid: "T"
    name: "T"
    fullName: "T"
  - name: ">"
    fullName: ">"
- uid: "com.azure.core.http.rest.PagedIterable.PagedIterable*"
  name: "PagedIterable"
  nameWithType: "PagedIterable<T>.PagedIterable"
  fullName: "com.azure.core.http.rest.PagedIterable<T>.PagedIterable"
  package: "com.azure.core.http.rest"
- uid: "java.util.function.Function<T,S>"
  spec.java:
  - uid: "java.util.function.Function"
    name: "Function"
    fullName: "java.util.function.Function"
  - name: "<"
    fullName: "<"
  - uid: "T"
    name: "T"
    fullName: "T"
  - name: ","
    fullName: ","
  - uid: "S"
    name: "S"
    fullName: "S"
  - name: ">"
    fullName: ">"
- uid: "com.azure.core.http.rest.PagedIterable<S>"
  spec.java:
  - uid: "com.azure.core.http.rest.PagedIterable"
    name: "PagedIterable"
    fullName: "com.azure.core.http.rest.PagedIterable"
  - name: "<"
    fullName: "<"
  - uid: "S"
    name: "S"
    fullName: "S"
  - name: ">"
    fullName: ">"
- uid: "com.azure.core.http.rest.PagedIterable.mapPage*"
  name: "<S>mapPage"
  nameWithType: "PagedIterable<T>.<S>mapPage"
  fullName: "com.azure.core.http.rest.PagedIterable<T>.<S>mapPage"
  package: "com.azure.core.http.rest"
- uid: "T"
  name: "T"
  nameWithType: "T"
  fullName: "T"
- uid: "com.azure.core.http.rest.PagedIterableBase<T,com.azure.core.http.rest.PagedResponse<T>>"
  name: "PagedIterableBase<T,PagedResponse<T>>"
  nameWithType: "PagedIterableBase<T,PagedResponse<T>>"
  fullName: "com.azure.core.http.rest.PagedIterableBase<T,com.azure.core.http.rest.PagedResponse<T>>"
- uid: "java.lang.Object.notify()"
  name: "Object.notify()"
  nameWithType: "Object.notify()"
  fullName: "java.lang.Object.notify()"
- uid: "java.lang.Object.wait()"
  name: "Object.wait()"
  nameWithType: "Object.wait()"
  fullName: "java.lang.Object.wait()"
- uid: "java.lang.Object.finalize()"
  name: "Object.finalize()"
  nameWithType: "Object.finalize()"
  fullName: "java.lang.Object.finalize()"
- uid: "java.lang.Object.notifyAll()"
  name: "Object.notifyAll()"
  nameWithType: "Object.notifyAll()"
  fullName: "java.lang.Object.notifyAll()"
- uid: "java.lang.Object.clone()"
  name: "Object.clone()"
  nameWithType: "Object.clone()"
  fullName: "java.lang.Object.clone()"
- uid: "com.azure.core.http.rest.PagedIterableBase.streamByPage(java.lang.String)"
  name: "PagedIterableBase.streamByPage(String)"
  nameWithType: "PagedIterableBase.streamByPage(String)"
  fullName: "com.azure.core.http.rest.PagedIterableBase.streamByPage(java.lang.String)"
- uid: "java.lang.Object.equals(java.lang.Object)"
  name: "Object.equals(Object)"
  nameWithType: "Object.equals(Object)"
  fullName: "java.lang.Object.equals(java.lang.Object)"
- uid: "com.azure.core.http.rest.PagedIterableBase.streamByPage()"
  name: "PagedIterableBase.streamByPage()"
  nameWithType: "PagedIterableBase.streamByPage()"
  fullName: "com.azure.core.http.rest.PagedIterableBase.streamByPage()"
- uid: "com.azure.core.util.IterableStream.iterator()"
  name: "IterableStream.iterator()"
  nameWithType: "IterableStream.iterator()"
  fullName: "com.azure.core.util.IterableStream.iterator()"
- uid: "java.lang.Object.toString()"
  name: "Object.toString()"
  nameWithType: "Object.toString()"
  fullName: "java.lang.Object.toString()"
- uid: "com.azure.core.http.rest.PagedIterableBase.iterableByPage(java.lang.String)"
  name: "PagedIterableBase.iterableByPage(String)"
  nameWithType: "PagedIterableBase.iterableByPage(String)"
  fullName: "com.azure.core.http.rest.PagedIterableBase.iterableByPage(java.lang.String)"
- uid: "com.azure.core.http.rest.PagedIterableBase.iterableByPage()"
  name: "PagedIterableBase.iterableByPage()"
  nameWithType: "PagedIterableBase.iterableByPage()"
  fullName: "com.azure.core.http.rest.PagedIterableBase.iterableByPage()"
- uid: "java.lang.Object.getClass()"
  name: "Object.getClass()"
  nameWithType: "Object.getClass()"
  fullName: "java.lang.Object.getClass()"
- uid: "java.lang.Object.wait(long)"
  name: "Object.wait(long)"
  nameWithType: "Object.wait(long)"
  fullName: "java.lang.Object.wait(long)"
- uid: "java.lang.Object.hashCode()"
  name: "Object.hashCode()"
  nameWithType: "Object.hashCode()"
  fullName: "java.lang.Object.hashCode()"
- uid: "java.lang.Object.wait(long,int)"
  name: "Object.wait(long,int)"
  nameWithType: "Object.wait(long,int)"
  fullName: "java.lang.Object.wait(long,int)"
- uid: "com.azure.core.util.IterableStream.stream()"
  name: "IterableStream.stream()"
  nameWithType: "IterableStream.stream()"
  fullName: "com.azure.core.util.IterableStream.stream()"
- uid: "com.azure.core.http.rest.PagedFlux"
  name: "PagedFlux"
  nameWithType: "PagedFlux"
  fullName: "com.azure.core.http.rest.PagedFlux"
- uid: "T,S"
  name: "T,S"
  nameWithType: "T,S"
  fullName: "T,S"
- uid: "java.util.function.Function"
  name: "Function"
  nameWithType: "Function"
  fullName: "java.util.function.Function"
- uid: "S"
  name: "S"
  nameWithType: "S"
  fullName: "S"
- uid: "T,com.azure.core.http.rest.PagedResponse"
  name: "T,PagedResponse"
  nameWithType: "T,PagedResponse"
  fullName: "T,com.azure.core.http.rest.PagedResponse"
- uid: "com.azure.core.http.rest.PagedIterableBase"
  name: "PagedIterableBase"
  nameWithType: "PagedIterableBase"
  fullName: "com.azure.core.http.rest.PagedIterableBase"
