### YamlMime:ManagedReference
items:
- uid: "com.azure.core.util.IterableStream"
  id: "IterableStream"
  parent: "com.azure.core.util"
  children:
  - "com.azure.core.util.IterableStream.IterableStream(java.lang.Iterable<T>)"
  - "com.azure.core.util.IterableStream.IterableStream(reactor.core.publisher.Flux<T>)"
  - "com.azure.core.util.IterableStream.iterator()"
  - "com.azure.core.util.IterableStream.stream()"
  langs:
  - "java"
  name: "IterableStream<T>"
  nameWithType: "IterableStream<T>"
  fullName: "com.azure.core.util.IterableStream<T>"
  type: "Class"
  package: "com.azure.core.util"
  summary: "This class provides utility to iterate over values using standard 'for-each' style loops, or to convert them into a Stream and operate in that fashion. All the values are preserved even if they are traversed multiple times.\n\n**Code sample using Stream**\n\n\\{@codesnippet com.azure.core.util.iterableStream.stream\\}\n\n**Code sample using Iterator**\n\n\\{@codesnippet com.azure.core.util.iterableStream.iterator.while\\}\n\n**Code sample using Stream and filter**\n\n\\{@codesnippet com.azure.core.util.iterableStream.stream.filter\\}"
  syntax:
    content: "public class IterableStream<T> implements Iterable<T>"
    typeParameters:
    - id: "T"
  inheritance:
  - "java.lang.Object"
  implements:
  - "java.lang.Iterable<T>"
  inheritedMembers:
  - "java.lang.Object.clone()"
  - "java.lang.Object.equals(java.lang.Object)"
  - "java.lang.Object.finalize()"
  - "java.lang.Object.getClass()"
  - "java.lang.Object.hashCode()"
  - "java.lang.Object.notify()"
  - "java.lang.Object.notifyAll()"
  - "java.lang.Object.toString()"
  - "java.lang.Object.wait()"
  - "java.lang.Object.wait(long)"
  - "java.lang.Object.wait(long,int)"
- uid: "com.azure.core.util.IterableStream.IterableStream(java.lang.Iterable<T>)"
  id: "IterableStream(java.lang.Iterable<T>)"
  parent: "com.azure.core.util.IterableStream"
  langs:
  - "java"
  name: "IterableStream(Iterable<T> iterable)"
  nameWithType: "IterableStream<T>.IterableStream(Iterable<T> iterable)"
  fullName: "com.azure.core.util.IterableStream<T>.IterableStream(Iterable<T> iterable)"
  overload: "com.azure.core.util.IterableStream.IterableStream*"
  type: "Constructor"
  package: "com.azure.core.util"
  summary: "Creates an instance with the given <xref uid=\"java.lang.Iterable\" data-throw-if-not-resolved=\"false\">Iterable</xref>."
  syntax:
    content: "public IterableStream(Iterable<T> iterable)"
    parameters:
    - id: "iterable"
      type: "java.lang.Iterable<T>"
      description: "Collection of items to iterate over."
- uid: "com.azure.core.util.IterableStream.IterableStream(reactor.core.publisher.Flux<T>)"
  id: "IterableStream(reactor.core.publisher.Flux<T>)"
  parent: "com.azure.core.util.IterableStream"
  langs:
  - "java"
  name: "IterableStream(Flux<T> flux)"
  nameWithType: "IterableStream<T>.IterableStream(Flux<T> flux)"
  fullName: "com.azure.core.util.IterableStream<T>.IterableStream(Flux<T> flux)"
  overload: "com.azure.core.util.IterableStream.IterableStream*"
  type: "Constructor"
  package: "com.azure.core.util"
  summary: "Creates an instance with the given <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\">Flux</xref>."
  syntax:
    content: "public IterableStream(Flux<T> flux)"
    parameters:
    - id: "flux"
      type: "reactor.core.publisher.Flux<T>"
      description: "Flux of items to iterate over."
- uid: "com.azure.core.util.IterableStream.iterator()"
  id: "iterator()"
  parent: "com.azure.core.util.IterableStream"
  langs:
  - "java"
  name: "iterator()"
  nameWithType: "IterableStream<T>.iterator()"
  fullName: "com.azure.core.util.IterableStream<T>.iterator()"
  overload: "com.azure.core.util.IterableStream.iterator*"
  type: "Method"
  package: "com.azure.core.util"
  summary: "Utility function to provide <xref uid=\"java.util.Iterator\" data-throw-if-not-resolved=\"false\">Iterator</xref> of value `T`. It will provide same collection of `T` values if called multiple times."
  syntax:
    content: "public Iterator<T> iterator()"
    return:
      type: "java.util.Iterator<T>"
      description: "<xref uid=\"java.util.Iterator\" data-throw-if-not-resolved=\"false\">Iterator</xref> of value <code>T</code>."
- uid: "com.azure.core.util.IterableStream.stream()"
  id: "stream()"
  parent: "com.azure.core.util.IterableStream"
  langs:
  - "java"
  name: "stream()"
  nameWithType: "IterableStream<T>.stream()"
  fullName: "com.azure.core.util.IterableStream<T>.stream()"
  overload: "com.azure.core.util.IterableStream.stream*"
  type: "Method"
  package: "com.azure.core.util"
  summary: "Utility function to provide <xref uid=\"java.util.stream.Stream\" data-throw-if-not-resolved=\"false\">Stream</xref> of value `T`. It will provide the same stream of `T` values if called multiple times."
  syntax:
    content: "public Stream<T> stream()"
    return:
      type: "java.util.stream.Stream<T>"
      description: "<xref uid=\"java.util.stream.Stream\" data-throw-if-not-resolved=\"false\">Stream</xref> of value <code>T</code>."
references:
- uid: "reactor.core.publisher.Flux<T>"
  spec.java:
  - uid: "reactor.core.publisher.Flux"
    name: "Flux"
    fullName: "reactor.core.publisher.Flux"
  - name: "<"
    fullName: "<"
  - uid: "T"
    name: "T"
    fullName: "T"
  - name: ">"
    fullName: ">"
- uid: "com.azure.core.util.IterableStream.IterableStream*"
  name: "IterableStream"
  nameWithType: "IterableStream<T>.IterableStream"
  fullName: "com.azure.core.util.IterableStream<T>.IterableStream"
  package: "com.azure.core.util"
- uid: "java.lang.Iterable<T>"
  spec.java:
  - uid: "java.lang.Iterable"
    name: "Iterable"
    fullName: "java.lang.Iterable"
  - name: "<"
    fullName: "<"
  - uid: "T"
    name: "T"
    fullName: "T"
  - name: ">"
    fullName: ">"
- uid: "java.util.stream.Stream<T>"
  spec.java:
  - uid: "java.util.stream.Stream"
    name: "Stream"
    fullName: "java.util.stream.Stream"
  - name: "<"
    fullName: "<"
  - uid: "T"
    name: "T"
    fullName: "T"
  - name: ">"
    fullName: ">"
- uid: "com.azure.core.util.IterableStream.stream*"
  name: "stream"
  nameWithType: "IterableStream<T>.stream"
  fullName: "com.azure.core.util.IterableStream<T>.stream"
  package: "com.azure.core.util"
- uid: "java.util.Iterator<T>"
  spec.java:
  - uid: "java.util.Iterator"
    name: "Iterator"
    fullName: "java.util.Iterator"
  - name: "<"
    fullName: "<"
  - uid: "T"
    name: "T"
    fullName: "T"
  - name: ">"
    fullName: ">"
- uid: "com.azure.core.util.IterableStream.iterator*"
  name: "iterator"
  nameWithType: "IterableStream<T>.iterator"
  fullName: "com.azure.core.util.IterableStream<T>.iterator"
  package: "com.azure.core.util"
- uid: "T"
  name: "T"
  nameWithType: "T"
  fullName: "T"
- uid: "java.lang.Object.notify()"
  name: "Object.notify()"
  nameWithType: "Object.notify()"
  fullName: "java.lang.Object.notify()"
- uid: "java.lang.Object.wait()"
  name: "Object.wait()"
  nameWithType: "Object.wait()"
  fullName: "java.lang.Object.wait()"
- uid: "java.lang.Object.finalize()"
  name: "Object.finalize()"
  nameWithType: "Object.finalize()"
  fullName: "java.lang.Object.finalize()"
- uid: "java.lang.Object.clone()"
  name: "Object.clone()"
  nameWithType: "Object.clone()"
  fullName: "java.lang.Object.clone()"
- uid: "java.lang.Object.notifyAll()"
  name: "Object.notifyAll()"
  nameWithType: "Object.notifyAll()"
  fullName: "java.lang.Object.notifyAll()"
- uid: "java.lang.Object.equals(java.lang.Object)"
  name: "Object.equals(Object)"
  nameWithType: "Object.equals(Object)"
  fullName: "java.lang.Object.equals(java.lang.Object)"
- uid: "java.lang.Object.getClass()"
  name: "Object.getClass()"
  nameWithType: "Object.getClass()"
  fullName: "java.lang.Object.getClass()"
- uid: "java.lang.Object.wait(long)"
  name: "Object.wait(long)"
  nameWithType: "Object.wait(long)"
  fullName: "java.lang.Object.wait(long)"
- uid: "java.lang.Object.hashCode()"
  name: "Object.hashCode()"
  nameWithType: "Object.hashCode()"
  fullName: "java.lang.Object.hashCode()"
- uid: "java.lang.Object.wait(long,int)"
  name: "Object.wait(long,int)"
  nameWithType: "Object.wait(long,int)"
  fullName: "java.lang.Object.wait(long,int)"
- uid: "java.lang.Object.toString()"
  name: "Object.toString()"
  nameWithType: "Object.toString()"
  fullName: "java.lang.Object.toString()"
- uid: "reactor.core.publisher.Flux"
  name: "Flux"
  nameWithType: "Flux"
  fullName: "reactor.core.publisher.Flux"
- uid: "java.lang.Iterable"
  name: "Iterable"
  nameWithType: "Iterable"
  fullName: "java.lang.Iterable"
- uid: "java.util.stream.Stream"
  name: "Stream"
  nameWithType: "Stream"
  fullName: "java.util.stream.Stream"
- uid: "java.util.Iterator"
  name: "Iterator"
  nameWithType: "Iterator"
  fullName: "java.util.Iterator"
