### YamlMime:ManagedReference
items:
- uid: "com.azure.core.http.rest.PagedIterableBase"
  id: "PagedIterableBase"
  parent: "com.azure.core.http.rest"
  children:
  - "com.azure.core.http.rest.PagedIterableBase.PagedIterableBase(com.azure.core.http.rest.PagedFluxBase<T,P>)"
  - "com.azure.core.http.rest.PagedIterableBase.iterableByPage()"
  - "com.azure.core.http.rest.PagedIterableBase.iterableByPage(java.lang.String)"
  - "com.azure.core.http.rest.PagedIterableBase.streamByPage()"
  - "com.azure.core.http.rest.PagedIterableBase.streamByPage(java.lang.String)"
  langs:
  - "java"
  name: "PagedIterableBase<T,P>"
  nameWithType: "PagedIterableBase<T,P>"
  fullName: "com.azure.core.http.rest.PagedIterableBase<T,P>"
  type: "Class"
  package: "com.azure.core.http.rest"
  summary: "This class provides utility to iterate over responses that extend <xref uid=\"com.azure.core.http.rest.PagedResponse\" data-throw-if-not-resolved=\"false\">PagedResponse</xref> using <xref uid=\"java.util.stream.Stream\" data-throw-if-not-resolved=\"false\">Stream</xref> and <xref uid=\"java.lang.Iterable\" data-throw-if-not-resolved=\"false\">Iterable</xref> interfaces.\n\n**Code sample using <xref uid=\"java.util.stream.Stream\" data-throw-if-not-resolved=\"false\">Stream</xref> by page**\n\n\\{@codesnippet com.azure.core.http.rest.pagedIterableBase.streamByPage\\}\n\n**Code sample using <xref uid=\"java.lang.Iterable\" data-throw-if-not-resolved=\"false\">Iterable</xref> by page**\n\n\\{@codesnippet com.azure.core.http.rest.pagedIterableBase.iterableByPage\\}\n\n**Code sample using <xref uid=\"java.lang.Iterable\" data-throw-if-not-resolved=\"false\">Iterable</xref> by page and while loop**\n\n\\{@codesnippet com.azure.core.http.rest.pagedIterableBase.iterableByPage.while\\}"
  syntax:
    content: "public class PagedIterableBase<T,P> extends IterableStream<T>"
    typeParameters:
    - id: "T"
    - id: "P"
  inheritance:
  - "java.lang.Object"
  - "com.azure.core.util.IterableStream"
  inheritedMembers:
  - "com.azure.core.util.IterableStream.iterator()"
  - "com.azure.core.util.IterableStream.stream()"
  - "java.lang.Object.clone()"
  - "java.lang.Object.equals(java.lang.Object)"
  - "java.lang.Object.finalize()"
  - "java.lang.Object.getClass()"
  - "java.lang.Object.hashCode()"
  - "java.lang.Object.notify()"
  - "java.lang.Object.notifyAll()"
  - "java.lang.Object.toString()"
  - "java.lang.Object.wait()"
  - "java.lang.Object.wait(long)"
  - "java.lang.Object.wait(long,int)"
- uid: "com.azure.core.http.rest.PagedIterableBase.PagedIterableBase(com.azure.core.http.rest.PagedFluxBase<T,P>)"
  id: "PagedIterableBase(com.azure.core.http.rest.PagedFluxBase<T,P>)"
  parent: "com.azure.core.http.rest.PagedIterableBase"
  langs:
  - "java"
  name: "PagedIterableBase(PagedFluxBase<T,P> pagedFluxBase)"
  nameWithType: "PagedIterableBase<T,P>.PagedIterableBase(PagedFluxBase<T,P> pagedFluxBase)"
  fullName: "com.azure.core.http.rest.PagedIterableBase<T,P>.PagedIterableBase(PagedFluxBase<T,P> pagedFluxBase)"
  overload: "com.azure.core.http.rest.PagedIterableBase.PagedIterableBase*"
  type: "Constructor"
  package: "com.azure.core.http.rest"
  summary: "Creates instance given <xref uid=\"com.azure.core.http.rest.PagedFluxBase\" data-throw-if-not-resolved=\"false\">PagedFluxBase</xref>."
  syntax:
    content: "public PagedIterableBase(PagedFluxBase<T,P> pagedFluxBase)"
    parameters:
    - id: "pagedFluxBase"
      type: "com.azure.core.http.rest.PagedFluxBase<T,P>"
      description: "to use as iterable"
- uid: "com.azure.core.http.rest.PagedIterableBase.iterableByPage()"
  id: "iterableByPage()"
  parent: "com.azure.core.http.rest.PagedIterableBase"
  langs:
  - "java"
  name: "iterableByPage()"
  nameWithType: "PagedIterableBase<T,P>.iterableByPage()"
  fullName: "com.azure.core.http.rest.PagedIterableBase<T,P>.iterableByPage()"
  overload: "com.azure.core.http.rest.PagedIterableBase.iterableByPage*"
  type: "Method"
  package: "com.azure.core.http.rest"
  summary: "Provides <xref uid=\"java.lang.Iterable\" data-throw-if-not-resolved=\"false\">Iterable</xref> API for\\{ @link PagedResponse\\} It will provide same collection of `T` values from starting if called multiple times."
  syntax:
    content: "public Iterable<P> iterableByPage()"
    return:
      type: "java.lang.Iterable<P>"
      description: "<xref uid=\"java.lang.Iterable\" data-throw-if-not-resolved=\"false\">Iterable</xref> interface"
- uid: "com.azure.core.http.rest.PagedIterableBase.iterableByPage(java.lang.String)"
  id: "iterableByPage(java.lang.String)"
  parent: "com.azure.core.http.rest.PagedIterableBase"
  langs:
  - "java"
  name: "iterableByPage(String continuationToken)"
  nameWithType: "PagedIterableBase<T,P>.iterableByPage(String continuationToken)"
  fullName: "com.azure.core.http.rest.PagedIterableBase<T,P>.iterableByPage(String continuationToken)"
  overload: "com.azure.core.http.rest.PagedIterableBase.iterableByPage*"
  type: "Method"
  package: "com.azure.core.http.rest"
  summary: "Provides <xref uid=\"java.lang.Iterable\" data-throw-if-not-resolved=\"false\">Iterable</xref> API for <xref uid=\"com.azure.core.http.rest.PagedResponse\" data-throw-if-not-resolved=\"false\">PagedResponse</xref>, starting from the next page associated with the given continuation token. To start from first page, use <xref uid=\"com.azure.core.http.rest.PagedIterableBase.streamByPage()\" data-throw-if-not-resolved=\"false\">#streamByPage()</xref> instead. It will provide same collection of T values from starting if called multiple times."
  syntax:
    content: "public Iterable<P> iterableByPage(String continuationToken)"
    parameters:
    - id: "continuationToken"
      type: "java.lang.String"
      description: "The continuation token used to fetch the next page"
    return:
      type: "java.lang.Iterable<P>"
      description: "<xref uid=\"java.lang.Iterable\" data-throw-if-not-resolved=\"false\">Iterable</xref> interface"
- uid: "com.azure.core.http.rest.PagedIterableBase.streamByPage()"
  id: "streamByPage()"
  parent: "com.azure.core.http.rest.PagedIterableBase"
  langs:
  - "java"
  name: "streamByPage()"
  nameWithType: "PagedIterableBase<T,P>.streamByPage()"
  fullName: "com.azure.core.http.rest.PagedIterableBase<T,P>.streamByPage()"
  overload: "com.azure.core.http.rest.PagedIterableBase.streamByPage*"
  type: "Method"
  package: "com.azure.core.http.rest"
  summary: "Retrieve the <xref uid=\"java.util.stream.Stream\" data-throw-if-not-resolved=\"false\">Stream</xref>, one page at a time. It will provide same <xref uid=\"java.util.stream.Stream\" data-throw-if-not-resolved=\"false\">Stream</xref> of T values from starting if called multiple times."
  syntax:
    content: "public Stream<P> streamByPage()"
    return:
      type: "java.util.stream.Stream<P>"
      description: "<xref uid=\"java.util.stream.Stream\" data-throw-if-not-resolved=\"false\">Stream</xref> of a Response that extends <xref uid=\"com.azure.core.http.rest.PagedResponse\" data-throw-if-not-resolved=\"false\">PagedResponse</xref>"
- uid: "com.azure.core.http.rest.PagedIterableBase.streamByPage(java.lang.String)"
  id: "streamByPage(java.lang.String)"
  parent: "com.azure.core.http.rest.PagedIterableBase"
  langs:
  - "java"
  name: "streamByPage(String continuationToken)"
  nameWithType: "PagedIterableBase<T,P>.streamByPage(String continuationToken)"
  fullName: "com.azure.core.http.rest.PagedIterableBase<T,P>.streamByPage(String continuationToken)"
  overload: "com.azure.core.http.rest.PagedIterableBase.streamByPage*"
  type: "Method"
  package: "com.azure.core.http.rest"
  summary: "Retrieve the <xref uid=\"java.util.stream.Stream\" data-throw-if-not-resolved=\"false\">Stream</xref>, one page at a time, starting from the next page associated with the given continuation token. To start from first page, use <xref uid=\"com.azure.core.http.rest.PagedIterableBase.streamByPage()\" data-throw-if-not-resolved=\"false\">#streamByPage()</xref> instead."
  syntax:
    content: "public Stream<P> streamByPage(String continuationToken)"
    parameters:
    - id: "continuationToken"
      type: "java.lang.String"
      description: "The continuation token used to fetch the next page"
    return:
      type: "java.util.stream.Stream<P>"
      description: "<xref uid=\"java.util.stream.Stream\" data-throw-if-not-resolved=\"false\">Stream</xref> of a Response that extends <xref uid=\"com.azure.core.http.rest.PagedResponse\" data-throw-if-not-resolved=\"false\">PagedResponse</xref>, starting from the page associated\n with the continuation token"
references:
- uid: "com.azure.core.http.rest.PagedFluxBase<T,P>"
  spec.java:
  - uid: "com.azure.core.http.rest.PagedFluxBase"
    name: "PagedFluxBase"
    fullName: "com.azure.core.http.rest.PagedFluxBase"
  - name: "<"
    fullName: "<"
  - uid: "T"
    name: "T"
    fullName: "T"
  - name: ","
    fullName: ","
  - uid: "P"
    name: "P"
    fullName: "P"
  - name: ">"
    fullName: ">"
- uid: "com.azure.core.http.rest.PagedIterableBase.PagedIterableBase*"
  name: "PagedIterableBase"
  nameWithType: "PagedIterableBase<T,P>.PagedIterableBase"
  fullName: "com.azure.core.http.rest.PagedIterableBase<T,P>.PagedIterableBase"
  package: "com.azure.core.http.rest"
- uid: "java.util.stream.Stream<P>"
  spec.java:
  - uid: "java.util.stream.Stream"
    name: "Stream"
    fullName: "java.util.stream.Stream"
  - name: "<"
    fullName: "<"
  - uid: "P"
    name: "P"
    fullName: "P"
  - name: ">"
    fullName: ">"
- uid: "com.azure.core.http.rest.PagedIterableBase.streamByPage*"
  name: "streamByPage"
  nameWithType: "PagedIterableBase<T,P>.streamByPage"
  fullName: "com.azure.core.http.rest.PagedIterableBase<T,P>.streamByPage"
  package: "com.azure.core.http.rest"
- uid: "java.lang.String"
  spec.java:
  - uid: "java.lang.String"
    name: "String"
    fullName: "java.lang.String"
- uid: "java.lang.Iterable<P>"
  spec.java:
  - uid: "java.lang.Iterable"
    name: "Iterable"
    fullName: "java.lang.Iterable"
  - name: "<"
    fullName: "<"
  - uid: "P"
    name: "P"
    fullName: "P"
  - name: ">"
    fullName: ">"
- uid: "com.azure.core.http.rest.PagedIterableBase.iterableByPage*"
  name: "iterableByPage"
  nameWithType: "PagedIterableBase<T,P>.iterableByPage"
  fullName: "com.azure.core.http.rest.PagedIterableBase<T,P>.iterableByPage"
  package: "com.azure.core.http.rest"
- uid: "T"
  name: "T"
  nameWithType: "T"
  fullName: "T"
- uid: "P"
  name: "P"
  nameWithType: "P"
  fullName: "P"
- uid: "com.azure.core.util.IterableStream<T>"
  name: "IterableStream<T>"
  nameWithType: "IterableStream<T>"
  fullName: "com.azure.core.util.IterableStream<T>"
- uid: "java.lang.Object.notify()"
  name: "Object.notify()"
  nameWithType: "Object.notify()"
  fullName: "java.lang.Object.notify()"
- uid: "java.lang.Object.wait()"
  name: "Object.wait()"
  nameWithType: "Object.wait()"
  fullName: "java.lang.Object.wait()"
- uid: "java.lang.Object.finalize()"
  name: "Object.finalize()"
  nameWithType: "Object.finalize()"
  fullName: "java.lang.Object.finalize()"
- uid: "java.lang.Object.notifyAll()"
  name: "Object.notifyAll()"
  nameWithType: "Object.notifyAll()"
  fullName: "java.lang.Object.notifyAll()"
- uid: "java.lang.Object.clone()"
  name: "Object.clone()"
  nameWithType: "Object.clone()"
  fullName: "java.lang.Object.clone()"
- uid: "java.lang.Object.equals(java.lang.Object)"
  name: "Object.equals(Object)"
  nameWithType: "Object.equals(Object)"
  fullName: "java.lang.Object.equals(java.lang.Object)"
- uid: "com.azure.core.util.IterableStream.iterator()"
  name: "IterableStream.iterator()"
  nameWithType: "IterableStream.iterator()"
  fullName: "com.azure.core.util.IterableStream.iterator()"
- uid: "java.lang.Object.toString()"
  name: "Object.toString()"
  nameWithType: "Object.toString()"
  fullName: "java.lang.Object.toString()"
- uid: "java.lang.Object.getClass()"
  name: "Object.getClass()"
  nameWithType: "Object.getClass()"
  fullName: "java.lang.Object.getClass()"
- uid: "java.lang.Object.wait(long)"
  name: "Object.wait(long)"
  nameWithType: "Object.wait(long)"
  fullName: "java.lang.Object.wait(long)"
- uid: "java.lang.Object.hashCode()"
  name: "Object.hashCode()"
  nameWithType: "Object.hashCode()"
  fullName: "java.lang.Object.hashCode()"
- uid: "java.lang.Object.wait(long,int)"
  name: "Object.wait(long,int)"
  nameWithType: "Object.wait(long,int)"
  fullName: "java.lang.Object.wait(long,int)"
- uid: "com.azure.core.util.IterableStream.stream()"
  name: "IterableStream.stream()"
  nameWithType: "IterableStream.stream()"
  fullName: "com.azure.core.util.IterableStream.stream()"
- uid: "com.azure.core.http.rest.PagedFluxBase"
  name: "PagedFluxBase"
  nameWithType: "PagedFluxBase"
  fullName: "com.azure.core.http.rest.PagedFluxBase"
- uid: "T,P"
  name: "T,P"
  nameWithType: "T,P"
  fullName: "T,P"
- uid: "java.util.stream.Stream"
  name: "Stream"
  nameWithType: "Stream"
  fullName: "java.util.stream.Stream"
- uid: "java.lang.Iterable"
  name: "Iterable"
  nameWithType: "Iterable"
  fullName: "java.lang.Iterable"
- uid: "com.azure.core.util.IterableStream"
  name: "IterableStream"
  nameWithType: "IterableStream"
  fullName: "com.azure.core.util.IterableStream"
