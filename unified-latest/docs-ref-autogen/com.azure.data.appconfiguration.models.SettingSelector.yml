### YamlMime:ManagedReference
items:
- uid: "com.azure.data.appconfiguration.models.SettingSelector"
  id: "SettingSelector"
  parent: "com.azure.data.appconfiguration.models"
  children:
  - "com.azure.data.appconfiguration.models.SettingSelector.SettingSelector()"
  - "com.azure.data.appconfiguration.models.SettingSelector.getAcceptDateTime()"
  - "com.azure.data.appconfiguration.models.SettingSelector.getFields()"
  - "com.azure.data.appconfiguration.models.SettingSelector.getKeyFilter()"
  - "com.azure.data.appconfiguration.models.SettingSelector.getLabelFilter()"
  - "com.azure.data.appconfiguration.models.SettingSelector.setAcceptDatetime(java.time.OffsetDateTime)"
  - "com.azure.data.appconfiguration.models.SettingSelector.setFields(com.azure.data.appconfiguration.models.SettingFields...)"
  - "com.azure.data.appconfiguration.models.SettingSelector.setKeyFilter(java.lang.String)"
  - "com.azure.data.appconfiguration.models.SettingSelector.setLabelFilter(java.lang.String)"
  - "com.azure.data.appconfiguration.models.SettingSelector.toString()"
  langs:
  - "java"
  name: "SettingSelector"
  nameWithType: "SettingSelector"
  fullName: "com.azure.data.appconfiguration.models.SettingSelector"
  type: "Class"
  package: "com.azure.data.appconfiguration.models"
  summary: "A set of options for selecting configuration settings from App Configuration service.\n\n *  Providing <xref uid=\"com.azure.data.appconfiguration.models.SettingSelector.getLabelFilter()\" data-throw-if-not-resolved=\"false\">labelFilter</xref> will filter <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting\" data-throw-if-not-resolved=\"false\">ConfigurationSettings</xref> that match any label name in conjunction with the keys that are passed in to the service request.\n *  Providing <xref uid=\"com.azure.data.appconfiguration.models.SettingSelector.getAcceptDateTime()\" data-throw-if-not-resolved=\"false\">acceptDateTime</xref> will return the representation of matching <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting\" data-throw-if-not-resolved=\"false\">ConfigurationSetting</xref> at that given <xref uid=\"\" data-throw-if-not-resolved=\"false\">OffsetDateTime</xref>.\n *  Providing <xref uid=\"com.azure.data.appconfiguration.models.SettingSelector.getFields()\" data-throw-if-not-resolved=\"false\">fields</xref> will populate only those <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting\" data-throw-if-not-resolved=\"false\">ConfigurationSetting</xref> fields in the response. By default, all of the fields are returned."
  syntax:
    content: "public class SettingSelector"
  inheritance:
  - "java.lang.Object"
  inheritedMembers:
  - "java.lang.Object.clone()"
  - "java.lang.Object.equals(java.lang.Object)"
  - "java.lang.Object.finalize()"
  - "java.lang.Object.getClass()"
  - "java.lang.Object.hashCode()"
  - "java.lang.Object.notify()"
  - "java.lang.Object.notifyAll()"
  - "java.lang.Object.toString()"
  - "java.lang.Object.wait()"
  - "java.lang.Object.wait(long)"
  - "java.lang.Object.wait(long,int)"
- uid: "com.azure.data.appconfiguration.models.SettingSelector.SettingSelector()"
  id: "SettingSelector()"
  parent: "com.azure.data.appconfiguration.models.SettingSelector"
  langs:
  - "java"
  name: "SettingSelector()"
  nameWithType: "SettingSelector.SettingSelector()"
  fullName: "com.azure.data.appconfiguration.models.SettingSelector.SettingSelector()"
  overload: "com.azure.data.appconfiguration.models.SettingSelector.SettingSelector*"
  type: "Constructor"
  package: "com.azure.data.appconfiguration.models"
  summary: "Creates a setting selector that will populate responses with all of the <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting\" data-throw-if-not-resolved=\"false\">ConfigurationSetting's</xref> properties and select all <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting.getKey()\" data-throw-if-not-resolved=\"false\">keys</xref>."
  syntax:
    content: "public SettingSelector()"
- uid: "com.azure.data.appconfiguration.models.SettingSelector.getAcceptDateTime()"
  id: "getAcceptDateTime()"
  parent: "com.azure.data.appconfiguration.models.SettingSelector"
  langs:
  - "java"
  name: "getAcceptDateTime()"
  nameWithType: "SettingSelector.getAcceptDateTime()"
  fullName: "com.azure.data.appconfiguration.models.SettingSelector.getAcceptDateTime()"
  overload: "com.azure.data.appconfiguration.models.SettingSelector.getAcceptDateTime*"
  type: "Method"
  package: "com.azure.data.appconfiguration.models"
  summary: "Gets the date time for the request query. When the query is performed, if `acceptDateTime` is set, the <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting.getValue()\" data-throw-if-not-resolved=\"false\">configuration setting value</xref> at that point in time is returned. Otherwise, the current value is returned."
  syntax:
    content: "public String getAcceptDateTime()"
    return:
      type: "java.lang.String"
      description: "Gets the currently set datetime in <xref uid=\"\" data-throw-if-not-resolved=\"false\">DateTimeFormatter#RFC_1123_DATE_TIME</xref> format."
- uid: "com.azure.data.appconfiguration.models.SettingSelector.getFields()"
  id: "getFields()"
  parent: "com.azure.data.appconfiguration.models.SettingSelector"
  langs:
  - "java"
  name: "getFields()"
  nameWithType: "SettingSelector.getFields()"
  fullName: "com.azure.data.appconfiguration.models.SettingSelector.getFields()"
  overload: "com.azure.data.appconfiguration.models.SettingSelector.getFields*"
  type: "Method"
  package: "com.azure.data.appconfiguration.models"
  summary: "Gets the fields on <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting\" data-throw-if-not-resolved=\"false\">ConfigurationSetting</xref> to return from the GET request. If none are set, the service returns the ConfigurationSettings with all of their fields populated."
  syntax:
    content: "public SettingFields[] getFields()"
    return:
      type: "com.azure.data.appconfiguration.models.SettingFields[]"
      description: "The set of <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting\" data-throw-if-not-resolved=\"false\">ConfigurationSetting</xref> fields to return for a GET request."
- uid: "com.azure.data.appconfiguration.models.SettingSelector.getKeyFilter()"
  id: "getKeyFilter()"
  parent: "com.azure.data.appconfiguration.models.SettingSelector"
  langs:
  - "java"
  name: "getKeyFilter()"
  nameWithType: "SettingSelector.getKeyFilter()"
  fullName: "com.azure.data.appconfiguration.models.SettingSelector.getKeyFilter()"
  overload: "com.azure.data.appconfiguration.models.SettingSelector.getKeyFilter*"
  type: "Method"
  package: "com.azure.data.appconfiguration.models"
  summary: "Gets the expressions to filter <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting.getKey()\" data-throw-if-not-resolved=\"false\">keys</xref> on for the request.\n\nExamples:\n\n *  If `keyFilter = \"*\"`, settings with any key are returned.\n *  If `keyFilter = \"abc1234\"`, settings with a key equal to \"abc1234\" are returned.\n *  If `keyFilter = \"abc*\"`, settings with a key starting with \"abc\" are returned.\n *  If `keyFilter = \"*abc*\"`, settings with a key containing \"abc\" are returned.\n *  If `keyFilter = \"abc,def\"`, settings with a key equal to \"abc\" or \"def\" are returned."
  syntax:
    content: "public String getKeyFilter()"
    return:
      type: "java.lang.String"
      description: "The expressions to filter ConfigurationSetting keys on."
- uid: "com.azure.data.appconfiguration.models.SettingSelector.getLabelFilter()"
  id: "getLabelFilter()"
  parent: "com.azure.data.appconfiguration.models.SettingSelector"
  langs:
  - "java"
  name: "getLabelFilter()"
  nameWithType: "SettingSelector.getLabelFilter()"
  fullName: "com.azure.data.appconfiguration.models.SettingSelector.getLabelFilter()"
  overload: "com.azure.data.appconfiguration.models.SettingSelector.getLabelFilter*"
  type: "Method"
  package: "com.azure.data.appconfiguration.models"
  summary: "Gets the labels used to filter settings based on their <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting.getLabel()\" data-throw-if-not-resolved=\"false\">label</xref> in the service. If the value is `null` or an empty string, all ConfigurationSettings with <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting.NO_LABEL\" data-throw-if-not-resolved=\"false\">ConfigurationSetting#NO_LABEL</xref> are returned.\n\nExamples:\n\n *  If `labelFilter = \"*\"`, settings with any label are returned.\n *  If `labelFilter = \"\\0\"`, settings without any label are returned.\n *  If `labelFilter = \"\"`, settings without any label are returned.\n *  If `labelFilter = null`, settings without any label are returned.\n *  If `labelFilter = \"abc1234\"`, settings with a label equal to \"abc1234\" are returned.\n *  If `labelFilter = \"abc*\"`, settings with a label starting with \"abc\" are returned.\n *  If `labelFilter = \"*abc*\"`, settings with a label containing \"abc\" are returned.\n *  If `labelFilter = \"abc,def\"`, settings with labels \"abc\" or \"def\" are returned."
  syntax:
    content: "public String getLabelFilter()"
    return:
      type: "java.lang.String"
      description: "labels The labels used to filter GET requests from the service."
- uid: "com.azure.data.appconfiguration.models.SettingSelector.setAcceptDatetime(java.time.OffsetDateTime)"
  id: "setAcceptDatetime(java.time.OffsetDateTime)"
  parent: "com.azure.data.appconfiguration.models.SettingSelector"
  langs:
  - "java"
  name: "setAcceptDatetime(OffsetDateTime datetime)"
  nameWithType: "SettingSelector.setAcceptDatetime(OffsetDateTime datetime)"
  fullName: "com.azure.data.appconfiguration.models.SettingSelector.setAcceptDatetime(OffsetDateTime datetime)"
  overload: "com.azure.data.appconfiguration.models.SettingSelector.setAcceptDatetime*"
  type: "Method"
  package: "com.azure.data.appconfiguration.models"
  summary: "If set, then configuration setting values will be retrieved as they existed at the provided datetime. Otherwise, the current values are returned."
  syntax:
    content: "public SettingSelector setAcceptDatetime(OffsetDateTime datetime)"
    parameters:
    - id: "datetime"
      type: "java.time.OffsetDateTime"
      description: "The value of the configuration setting at that given <xref uid=\"\" data-throw-if-not-resolved=\"false\">OffsetDateTime</xref>."
    return:
      type: "com.azure.data.appconfiguration.models.SettingSelector"
      description: "The updated SettingSelector object."
- uid: "com.azure.data.appconfiguration.models.SettingSelector.setFields(com.azure.data.appconfiguration.models.SettingFields...)"
  id: "setFields(com.azure.data.appconfiguration.models.SettingFields...)"
  parent: "com.azure.data.appconfiguration.models.SettingSelector"
  langs:
  - "java"
  name: "setFields(SettingFields[] fields)"
  nameWithType: "SettingSelector.setFields(SettingFields[] fields)"
  fullName: "com.azure.data.appconfiguration.models.SettingSelector.setFields(SettingFields[] fields)"
  overload: "com.azure.data.appconfiguration.models.SettingSelector.setFields*"
  type: "Method"
  package: "com.azure.data.appconfiguration.models"
  summary: "Sets fields that will be returned in the response corresponding to properties in <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting\" data-throw-if-not-resolved=\"false\">ConfigurationSetting</xref>. If none are set, the service returns ConfigurationSettings with all of their fields populated."
  syntax:
    content: "public SettingSelector setFields(SettingFields[] fields)"
    parameters:
    - id: "fields"
      type: "com.azure.data.appconfiguration.models.SettingFields[]"
      description: "The fields to select for the query response. If none are set, the service will return the\n ConfigurationSettings with a default set of properties."
    return:
      type: "com.azure.data.appconfiguration.models.SettingSelector"
      description: "The updated SettingSelector object."
- uid: "com.azure.data.appconfiguration.models.SettingSelector.setKeyFilter(java.lang.String)"
  id: "setKeyFilter(java.lang.String)"
  parent: "com.azure.data.appconfiguration.models.SettingSelector"
  langs:
  - "java"
  name: "setKeyFilter(String keyFilter)"
  nameWithType: "SettingSelector.setKeyFilter(String keyFilter)"
  fullName: "com.azure.data.appconfiguration.models.SettingSelector.setKeyFilter(String keyFilter)"
  overload: "com.azure.data.appconfiguration.models.SettingSelector.setKeyFilter*"
  type: "Method"
  package: "com.azure.data.appconfiguration.models"
  summary: "Sets the expressions to filter <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting.getKey()\" data-throw-if-not-resolved=\"false\">keys</xref> on for the request.\n\nExamples:\n\n *  If `keyFilter = \"*\"`, settings with any key are returned.\n *  If `keyFilter = \"abc1234\"`, settings with a key equal to \"abc1234\" are returned.\n *  If `keyFilter = \"abc*\"`, settings with a key starting with \"abc\" are returned.\n *  If `keyFilter = \"*abc*\"`, settings with a key containing \"abc\" are returned.\n *  If `keyFilter = \"abc,def\"`, settings with a key equal to \"abc\" or \"def\" are returned."
  syntax:
    content: "public SettingSelector setKeyFilter(String keyFilter)"
    parameters:
    - id: "keyFilter"
      type: "java.lang.String"
      description: "The expressions to filter ConfigurationSetting keys on."
    return:
      type: "com.azure.data.appconfiguration.models.SettingSelector"
      description: "The updated SettingSelector object"
- uid: "com.azure.data.appconfiguration.models.SettingSelector.setLabelFilter(java.lang.String)"
  id: "setLabelFilter(java.lang.String)"
  parent: "com.azure.data.appconfiguration.models.SettingSelector"
  langs:
  - "java"
  name: "setLabelFilter(String labelFilter)"
  nameWithType: "SettingSelector.setLabelFilter(String labelFilter)"
  fullName: "com.azure.data.appconfiguration.models.SettingSelector.setLabelFilter(String labelFilter)"
  overload: "com.azure.data.appconfiguration.models.SettingSelector.setLabelFilter*"
  type: "Method"
  package: "com.azure.data.appconfiguration.models"
  summary: "Sets the expression to filter <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting.getLabel()\" data-throw-if-not-resolved=\"false\">labels</xref> on for the request.\n\nExamples:\n\n *  If `labelFilter = \"*\"`, settings with any label are returned.\n *  If `labelFilter = \"\\0\"`, settings without any label are returned. (This is the default label.)\n *  If `labelFilter = \"abc1234\"`, settings with a label equal to \"abc1234\" are returned.\n *  If `labelFilter = \"abc*\"`, settings with a label starting with \"abc\" are returned.\n *  If `labelFilter = \"*abc*\"`, settings with a label containing \"abc\" are returned.\n *  If `labelFilter = \"abc,def\"`, settings with labels \"abc\" or \"def\" are returned."
  syntax:
    content: "public SettingSelector setLabelFilter(String labelFilter)"
    parameters:
    - id: "labelFilter"
      type: "java.lang.String"
      description: "The expressions to filter ConfigurationSetting labels on. If the provided value is\n <code>null</code> or <code>\"\"</code>, all ConfigurationSettings will be returned regardless of their label."
    return:
      type: "com.azure.data.appconfiguration.models.SettingSelector"
      description: "SettingSelector The updated SettingSelector object."
- uid: "com.azure.data.appconfiguration.models.SettingSelector.toString()"
  id: "toString()"
  parent: "com.azure.data.appconfiguration.models.SettingSelector"
  langs:
  - "java"
  name: "toString()"
  nameWithType: "SettingSelector.toString()"
  fullName: "com.azure.data.appconfiguration.models.SettingSelector.toString()"
  overload: "com.azure.data.appconfiguration.models.SettingSelector.toString*"
  type: "Method"
  package: "com.azure.data.appconfiguration.models"
  syntax:
    content: "public String toString()"
    return:
      type: "java.lang.String"
references:
- uid: "com.azure.data.appconfiguration.models.SettingSelector.SettingSelector*"
  name: "SettingSelector"
  nameWithType: "SettingSelector.SettingSelector"
  fullName: "com.azure.data.appconfiguration.models.SettingSelector.SettingSelector"
  package: "com.azure.data.appconfiguration.models"
- uid: "java.lang.String"
  spec.java:
  - uid: "java.lang.String"
    name: "String"
    fullName: "java.lang.String"
- uid: "com.azure.data.appconfiguration.models.SettingSelector.getKeyFilter*"
  name: "getKeyFilter"
  nameWithType: "SettingSelector.getKeyFilter"
  fullName: "com.azure.data.appconfiguration.models.SettingSelector.getKeyFilter"
  package: "com.azure.data.appconfiguration.models"
- uid: "com.azure.data.appconfiguration.models.SettingSelector.setKeyFilter*"
  name: "setKeyFilter"
  nameWithType: "SettingSelector.setKeyFilter"
  fullName: "com.azure.data.appconfiguration.models.SettingSelector.setKeyFilter"
  package: "com.azure.data.appconfiguration.models"
- uid: "com.azure.data.appconfiguration.models.SettingSelector.getLabelFilter*"
  name: "getLabelFilter"
  nameWithType: "SettingSelector.getLabelFilter"
  fullName: "com.azure.data.appconfiguration.models.SettingSelector.getLabelFilter"
  package: "com.azure.data.appconfiguration.models"
- uid: "com.azure.data.appconfiguration.models.SettingSelector.setLabelFilter*"
  name: "setLabelFilter"
  nameWithType: "SettingSelector.setLabelFilter"
  fullName: "com.azure.data.appconfiguration.models.SettingSelector.setLabelFilter"
  package: "com.azure.data.appconfiguration.models"
- uid: "com.azure.data.appconfiguration.models.SettingSelector.getAcceptDateTime*"
  name: "getAcceptDateTime"
  nameWithType: "SettingSelector.getAcceptDateTime"
  fullName: "com.azure.data.appconfiguration.models.SettingSelector.getAcceptDateTime"
  package: "com.azure.data.appconfiguration.models"
- uid: "java.time.OffsetDateTime"
  spec.java:
  - uid: "java.time.OffsetDateTime"
    name: "OffsetDateTime"
    fullName: "java.time.OffsetDateTime"
- uid: "com.azure.data.appconfiguration.models.SettingSelector.setAcceptDatetime*"
  name: "setAcceptDatetime"
  nameWithType: "SettingSelector.setAcceptDatetime"
  fullName: "com.azure.data.appconfiguration.models.SettingSelector.setAcceptDatetime"
  package: "com.azure.data.appconfiguration.models"
- uid: "com.azure.data.appconfiguration.models.SettingFields[]"
  spec.java:
  - uid: "com.azure.data.appconfiguration.models.SettingFields"
    name: "SettingFields"
    fullName: "com.azure.data.appconfiguration.models.SettingFields"
  - name: "[]"
    fullName: "[]"
- uid: "com.azure.data.appconfiguration.models.SettingSelector.getFields*"
  name: "getFields"
  nameWithType: "SettingSelector.getFields"
  fullName: "com.azure.data.appconfiguration.models.SettingSelector.getFields"
  package: "com.azure.data.appconfiguration.models"
- uid: "com.azure.data.appconfiguration.models.SettingSelector.setFields*"
  name: "setFields"
  nameWithType: "SettingSelector.setFields"
  fullName: "com.azure.data.appconfiguration.models.SettingSelector.setFields"
  package: "com.azure.data.appconfiguration.models"
- uid: "com.azure.data.appconfiguration.models.SettingSelector.toString*"
  name: "toString"
  nameWithType: "SettingSelector.toString"
  fullName: "com.azure.data.appconfiguration.models.SettingSelector.toString"
  package: "com.azure.data.appconfiguration.models"
- uid: "java.lang.Object.notify()"
  name: "Object.notify()"
  nameWithType: "Object.notify()"
  fullName: "java.lang.Object.notify()"
- uid: "java.lang.Object.wait()"
  name: "Object.wait()"
  nameWithType: "Object.wait()"
  fullName: "java.lang.Object.wait()"
- uid: "java.lang.Object.finalize()"
  name: "Object.finalize()"
  nameWithType: "Object.finalize()"
  fullName: "java.lang.Object.finalize()"
- uid: "java.lang.Object.clone()"
  name: "Object.clone()"
  nameWithType: "Object.clone()"
  fullName: "java.lang.Object.clone()"
- uid: "java.lang.Object.notifyAll()"
  name: "Object.notifyAll()"
  nameWithType: "Object.notifyAll()"
  fullName: "java.lang.Object.notifyAll()"
- uid: "java.lang.Object.equals(java.lang.Object)"
  name: "Object.equals(Object)"
  nameWithType: "Object.equals(Object)"
  fullName: "java.lang.Object.equals(java.lang.Object)"
- uid: "java.lang.Object.getClass()"
  name: "Object.getClass()"
  nameWithType: "Object.getClass()"
  fullName: "java.lang.Object.getClass()"
- uid: "java.lang.Object.wait(long)"
  name: "Object.wait(long)"
  nameWithType: "Object.wait(long)"
  fullName: "java.lang.Object.wait(long)"
- uid: "java.lang.Object.hashCode()"
  name: "Object.hashCode()"
  nameWithType: "Object.hashCode()"
  fullName: "java.lang.Object.hashCode()"
- uid: "java.lang.Object.wait(long,int)"
  name: "Object.wait(long,int)"
  nameWithType: "Object.wait(long,int)"
  fullName: "java.lang.Object.wait(long,int)"
- uid: "java.lang.Object.toString()"
  name: "Object.toString()"
  nameWithType: "Object.toString()"
  fullName: "java.lang.Object.toString()"
