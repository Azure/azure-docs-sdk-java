### YamlMime:JavaMember
uid: "com.azure.search.documents.indexes.SearchIndexerAsyncClient.createOrUpdateIndexerWithResponse*"
fullName: "com.azure.search.documents.indexes.SearchIndexerAsyncClient.createOrUpdateIndexerWithResponse"
name: "createOrUpdateIndexerWithResponse"
nameWithType: "SearchIndexerAsyncClient.createOrUpdateIndexerWithResponse"
members:
- uid: "com.azure.search.documents.indexes.SearchIndexerAsyncClient.createOrUpdateIndexerWithResponse(com.azure.search.documents.indexes.models.SearchIndexer,boolean)"
  fullName: "com.azure.search.documents.indexes.SearchIndexerAsyncClient.createOrUpdateIndexerWithResponse(SearchIndexer indexer, boolean onlyIfUnchanged)"
  name: "createOrUpdateIndexerWithResponse(SearchIndexer indexer, boolean onlyIfUnchanged)"
  nameWithType: "SearchIndexerAsyncClient.createOrUpdateIndexerWithResponse(SearchIndexer indexer, boolean onlyIfUnchanged)"
  summary: "Creates a new Azure Cognitive Search indexer or updates an indexer if it already exists.\n\n**Code Sample**\n\nCreate or update search indexer named \"searchIndexer\".\n\n```java\nsearchIndexerAsyncClient.getIndexer(\"searchIndexer\")\n     .flatMap(searchIndexerFromService -> {\n         searchIndexerFromService.setFieldMappings(Collections.singletonList(\n             new FieldMapping(\"hotelName\").setTargetFieldName(\"HotelName\")));\n         return searchIndexerAsyncClient.createOrUpdateIndexerWithResponse(searchIndexerFromService, true);\n     })\n     .subscribe(indexerFromService ->\n         System.out.printf(\"The status code of the response is %s.%nThe indexer name is %s. \"\n             + \"The target field name of indexer is %s.%n\", indexerFromService.getStatusCode(),\n         indexerFromService.getValue().getName(),\n         indexerFromService.getValue().getFieldMappings().get(0).getTargetFieldName()));\n```"
  parameters:
  - description: "the definition of the <xref uid=\"com.azure.search.documents.indexes.models.SearchIndexer\" data-throw-if-not-resolved=\"false\" data-raw-source=\"SearchIndexer\"></xref> to create or update"
    name: "indexer"
    type: "<xref href=\"com.azure.search.documents.indexes.models.SearchIndexer?alt=com.azure.search.documents.indexes.models.SearchIndexer&text=SearchIndexer\" data-throw-if-not-resolved=\"False\" />"
  - description: "<code>true</code> to update if the <code>indexer</code> is the same as the current service value.\n <code>false</code> to always update existing value."
    name: "onlyIfUnchanged"
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<SearchIndexer>> createOrUpdateIndexerWithResponse(SearchIndexer indexer, boolean onlyIfUnchanged)"
  returns:
    description: "a response containing the created Indexer."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.search.documents.indexes.models.SearchIndexer?alt=com.azure.search.documents.indexes.models.SearchIndexer&text=SearchIndexer\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
type: "method"
metadata: {}
package: "com.azure.search.documents.indexes"
artifact: com.azure:azure-search-documents:11.2.0-beta.3
