### YamlMime:JavaMember
uid: "com.azure.cosmos.implementation.guava25.collect.ImmutableList.copyOf*"
fullName: "com.azure.cosmos.implementation.guava25.collect.ImmutableList<E>.<E>copyOf"
name: "<E>copyOf"
nameWithType: "ImmutableList<E>.<E>copyOf"
members:
- uid: "com.azure.cosmos.implementation.guava25.collect.ImmutableList.<E>copyOf(E[])"
  fullName: "com.azure.cosmos.implementation.guava25.collect.ImmutableList<E>.<E>copyOf(E[] elements)"
  name: "<E>copyOf(E[] elements)"
  nameWithType: "ImmutableList<E>.<E>copyOf(E[] elements)"
  summary: "Returns an immutable list containing the given elements, in order."
  parameters:
  - name: "elements"
    type: "<xref href=\"E?alt=E&text=E\" data-throw-if-not-resolved=\"False\" />[]"
  syntax: "public static ImmutableList<E> <E>copyOf(E[] elements)"
  returns:
    type: "<xref href=\"com.azure.cosmos.implementation.guava25.collect.ImmutableList?alt=com.azure.cosmos.implementation.guava25.collect.ImmutableList&text=ImmutableList\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"E?alt=E&text=E\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.cosmos.implementation.guava25.collect.ImmutableList.<E>copyOf(java.lang.Iterable<? extends E>)"
  fullName: "com.azure.cosmos.implementation.guava25.collect.ImmutableList<E>.<E>copyOf(Iterable<? extends E> elements)"
  name: "<E>copyOf(Iterable<? extends E> elements)"
  nameWithType: "ImmutableList<E>.<E>copyOf(Iterable<? extends E> elements)"
  summary: "Returns an immutable list containing the given elements, in order. If `elements` is a <xref uid=\"java.util.Collection\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Collection\"></xref>, this method behaves exactly as <xref uid=\"com.azure.cosmos.implementation.guava25.collect.ImmutableList.&lt;E&gt;copyOf(java.util.Collection&lt;? extends E&gt;)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#copyOf(Collection)\"></xref>; otherwise, it behaves exactly as `copyOf(elements.iterator()`."
  parameters:
  - name: "elements"
    type: "<xref href=\"java.lang.Iterable?alt=java.lang.Iterable&text=Iterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"? extends E?alt=? extends E&text=? extends E\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public static ImmutableList<E> <E>copyOf(Iterable<? extends E> elements)"
  returns:
    type: "<xref href=\"com.azure.cosmos.implementation.guava25.collect.ImmutableList?alt=com.azure.cosmos.implementation.guava25.collect.ImmutableList&text=ImmutableList\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"E?alt=E&text=E\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.cosmos.implementation.guava25.collect.ImmutableList.<E>copyOf(java.util.Collection<? extends E>)"
  fullName: "com.azure.cosmos.implementation.guava25.collect.ImmutableList<E>.<E>copyOf(Collection<? extends E> elements)"
  name: "<E>copyOf(Collection<? extends E> elements)"
  nameWithType: "ImmutableList<E>.<E>copyOf(Collection<? extends E> elements)"
  summary: "Returns an immutable list containing the given elements, in order.\n\nDespite the method name, this method attempts to avoid actually copying the data when it is safe to do so. The exact circumstances under which a copy will or will not be performed are undocumented and subject to change.\n\nNote that if `list` is a `List`, then `ImmutableList.copyOf(list)` returns an `ImmutableList` containing each of the strings in `list`, while ImmutableList.of(list)\\} returns an `ImmutableList>` containing one element (the given list itself).\n\nThis method is safe to use even when `elements` is a synchronized or concurrent collection that is currently being modified by another thread."
  parameters:
  - name: "elements"
    type: "<xref href=\"java.util.Collection?alt=java.util.Collection&text=Collection\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"? extends E?alt=? extends E&text=? extends E\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public static ImmutableList<E> <E>copyOf(Collection<? extends E> elements)"
  returns:
    type: "<xref href=\"com.azure.cosmos.implementation.guava25.collect.ImmutableList?alt=com.azure.cosmos.implementation.guava25.collect.ImmutableList&text=ImmutableList\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"E?alt=E&text=E\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.cosmos.implementation.guava25.collect.ImmutableList.<E>copyOf(java.util.Iterator<? extends E>)"
  fullName: "com.azure.cosmos.implementation.guava25.collect.ImmutableList<E>.<E>copyOf(Iterator<? extends E> elements)"
  name: "<E>copyOf(Iterator<? extends E> elements)"
  nameWithType: "ImmutableList<E>.<E>copyOf(Iterator<? extends E> elements)"
  summary: "Returns an immutable list containing the given elements, in order."
  parameters:
  - name: "elements"
    type: "<xref href=\"java.util.Iterator?alt=java.util.Iterator&text=Iterator\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"? extends E?alt=? extends E&text=? extends E\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public static ImmutableList<E> <E>copyOf(Iterator<? extends E> elements)"
  returns:
    type: "<xref href=\"com.azure.cosmos.implementation.guava25.collect.ImmutableList?alt=com.azure.cosmos.implementation.guava25.collect.ImmutableList&text=ImmutableList\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"E?alt=E&text=E\" data-throw-if-not-resolved=\"False\" />&gt;"
type: "method"
metadata: {}
package: "com.azure.cosmos.implementation.guava25.collect"
artifact: com.azure:azure-cosmos:4.4.0-beta.1
