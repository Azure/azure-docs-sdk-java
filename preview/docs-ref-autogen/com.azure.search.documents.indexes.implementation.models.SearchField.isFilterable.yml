### YamlMime:JavaMember
uid: "com.azure.search.documents.indexes.implementation.models.SearchField.isFilterable*"
fullName: "com.azure.search.documents.indexes.implementation.models.SearchField.isFilterable"
name: "isFilterable"
nameWithType: "SearchField.isFilterable"
members:
- uid: "com.azure.search.documents.indexes.implementation.models.SearchField.isFilterable()"
  fullName: "com.azure.search.documents.indexes.implementation.models.SearchField.isFilterable()"
  name: "isFilterable()"
  nameWithType: "SearchField.isFilterable()"
  summary: "Get the filterable property: A value indicating whether to enable the field to be referenced in $filter queries. filterable differs from searchable in how strings are handled. Fields of type Edm.String or Collection(Edm.String) that are filterable do not undergo word-breaking, so comparisons are for exact matches only. For example, if you set such a field f to \"sunny day\", $filter=f eq 'sunny' will find no matches, but $filter=f eq 'sunny day' will. This property must be null for complex fields. Default is true for simple fields and null for complex fields."
  syntax: "public Boolean isFilterable()"
  returns:
    description: "the filterable value."
    type: "<xref href=\"java.lang.Boolean?alt=java.lang.Boolean&text=Boolean\" data-throw-if-not-resolved=\"False\" />"
type: "method"
metadata: {}
package: "com.azure.search.documents.indexes.implementation.models"
artifact: com.azure:azure-search-documents:11.2.0-beta.3
