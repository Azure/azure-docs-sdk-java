### YamlMime:JavaEnum
uid: "com.fasterxml.jackson.core.StreamWriteFeature"
fullName: "com.fasterxml.jackson.core.StreamWriteFeature"
name: "StreamWriteFeature"
nameWithType: "StreamWriteFeature"
summary: "Token writer (generator) features not-specific to any particular format backend. Eventual replacement for non-JSON-specific <xref uid=\"com.fasterxml.jackson.core.JsonGenerator.Feature\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.fasterxml.jackson.core.JsonGenerator.Feature\"></xref>s."
inheritances:
- "<xref href=\"java.lang.Object\" data-throw-if-not-resolved=\"False\" />"
- "<xref href=\"java.lang.Enum\" data-throw-if-not-resolved=\"False\" />"
inheritedMembers:
- "java.lang.Enum.<T>valueOf(java.lang.Class<T>,java.lang.String)"
- "java.lang.Enum.clone()"
- "java.lang.Enum.compareTo(E)"
- "java.lang.Enum.equals(java.lang.Object)"
- "java.lang.Enum.finalize()"
- "java.lang.Enum.getDeclaringClass()"
- "java.lang.Enum.hashCode()"
- "java.lang.Enum.name()"
- "java.lang.Enum.ordinal()"
- "java.lang.Enum.toString()"
- "java.lang.Object.getClass()"
- "java.lang.Object.notify()"
- "java.lang.Object.notifyAll()"
- "java.lang.Object.wait()"
- "java.lang.Object.wait(long)"
- "java.lang.Object.wait(long,int)"
syntax: "public enum StreamWriteFeature extends Enum<StreamWriteFeature>"
fields:
- uid: "com.fasterxml.jackson.core.StreamWriteFeature.AUTO_CLOSE_CONTENT"
  fullName: "com.fasterxml.jackson.core.StreamWriteFeature.AUTO_CLOSE_CONTENT"
  name: "AUTO_CLOSE_CONTENT"
  nameWithType: "StreamWriteFeature.AUTO_CLOSE_CONTENT"
  summary: "Feature that determines what happens when the generator is closed while there are still unmatched <xref uid=\"com.fasterxml.jackson.core.JsonToken.START_ARRAY\" data-throw-if-not-resolved=\"false\" data-raw-source=\"JsonToken#START_ARRAY\"></xref> or <xref uid=\"com.fasterxml.jackson.core.JsonToken.START_OBJECT\" data-throw-if-not-resolved=\"false\" data-raw-source=\"JsonToken#START_OBJECT\"></xref> entries in output content. If enabled, such Array(s) and/or Object(s) are automatically closed (that is, matching END\\_ token write call is made for all open scopes); if disabled, no additional write calls are made.\n\nFeature is enabled by default."
- uid: "com.fasterxml.jackson.core.StreamWriteFeature.AUTO_CLOSE_TARGET"
  fullName: "com.fasterxml.jackson.core.StreamWriteFeature.AUTO_CLOSE_TARGET"
  name: "AUTO_CLOSE_TARGET"
  nameWithType: "StreamWriteFeature.AUTO_CLOSE_TARGET"
  summary: "Feature that determines whether generator will automatically close underlying output target that is NOT owned by the generator. If disabled, calling application has to separately close the underlying <xref uid=\"java.io.OutputStream\" data-throw-if-not-resolved=\"false\" data-raw-source=\"OutputStream\"></xref> and <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Writer\"></xref> instances used to create the generator. If enabled, generator will handle closing, as long as generator itself gets closed: this happens when end-of-input is encountered, or generator is closed by a call to <xref uid=\"com.fasterxml.jackson.core.JsonGenerator.close*\" data-throw-if-not-resolved=\"false\" data-raw-source=\"JsonGenerator#close\"></xref>.\n\nFeature is enabled by default."
- uid: "com.fasterxml.jackson.core.StreamWriteFeature.FLUSH_PASSED_TO_STREAM"
  fullName: "com.fasterxml.jackson.core.StreamWriteFeature.FLUSH_PASSED_TO_STREAM"
  name: "FLUSH_PASSED_TO_STREAM"
  nameWithType: "StreamWriteFeature.FLUSH_PASSED_TO_STREAM"
  summary: "Feature that specifies that calls to <xref uid=\"com.fasterxml.jackson.core.JsonGenerator.flush*\" data-throw-if-not-resolved=\"false\" data-raw-source=\"JsonGenerator#flush\"></xref> will cause matching `flush()` to underlying <xref uid=\"java.io.OutputStream\" data-throw-if-not-resolved=\"false\" data-raw-source=\"OutputStream\"></xref> or <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Writer\"></xref>; if disabled this will not be done. Main reason to disable this feature is to prevent flushing at generator level, if it is not possible to prevent method being called by other code (like `ObjectMapper` or third party libraries).\n\nFeature is enabled by default."
- uid: "com.fasterxml.jackson.core.StreamWriteFeature.IGNORE_UNKNOWN"
  fullName: "com.fasterxml.jackson.core.StreamWriteFeature.IGNORE_UNKNOWN"
  name: "IGNORE_UNKNOWN"
  nameWithType: "StreamWriteFeature.IGNORE_UNKNOWN"
  summary: "Feature that determines what to do if the underlying data format requires knowledge of all properties to output, and if no definition is found for a property that caller tries to write. If enabled, such properties will be quietly ignored; if disabled, a <xref uid=\"com.fasterxml.jackson.core.JsonProcessingException\" data-throw-if-not-resolved=\"false\" data-raw-source=\"JsonProcessingException\"></xref> will be thrown to indicate the problem. Typically most textual data formats do NOT require schema information (although some do, such as CSV), whereas many binary data formats do require definitions (such as Avro, protobuf), although not all (Smile, CBOR, BSON and MessagePack do not).\n\nNote that support for this feature is implemented by individual data format module, if (and only if) it makes sense for the format in question. For JSON, for example, this feature has no effect as properties need not be pre-defined.\n\nFeature is disabled by default, meaning that if the underlying data format requires knowledge of all properties to output, attempts to write an unknown property will result in a <xref uid=\"com.fasterxml.jackson.core.JsonProcessingException\" data-throw-if-not-resolved=\"false\" data-raw-source=\"JsonProcessingException\"></xref>"
- uid: "com.fasterxml.jackson.core.StreamWriteFeature.STRICT_DUPLICATE_DETECTION"
  fullName: "com.fasterxml.jackson.core.StreamWriteFeature.STRICT_DUPLICATE_DETECTION"
  name: "STRICT_DUPLICATE_DETECTION"
  nameWithType: "StreamWriteFeature.STRICT_DUPLICATE_DETECTION"
  summary: "Feature that determines whether <xref uid=\"com.fasterxml.jackson.core.JsonGenerator\" data-throw-if-not-resolved=\"false\" data-raw-source=\"JsonGenerator\"></xref> will explicitly check that no duplicate JSON Object field names are written. If enabled, generator will check all names within context and report duplicates by throwing a <xref uid=\"com.fasterxml.jackson.core.JsonGenerationException\" data-throw-if-not-resolved=\"false\" data-raw-source=\"JsonGenerationException\"></xref>; if disabled, no such checking will be done. Assumption in latter case is that caller takes care of not trying to write duplicate names.\n\nNote that enabling this feature will incur performance overhead due to having to store and check additional information.\n\nFeature is disabled by default."
- uid: "com.fasterxml.jackson.core.StreamWriteFeature.WRITE_BIGDECIMAL_AS_PLAIN"
  fullName: "com.fasterxml.jackson.core.StreamWriteFeature.WRITE_BIGDECIMAL_AS_PLAIN"
  name: "WRITE_BIGDECIMAL_AS_PLAIN"
  nameWithType: "StreamWriteFeature.WRITE_BIGDECIMAL_AS_PLAIN"
  summary: "Feature that determines whether <xref uid=\"java.math.BigDecimal\" data-throw-if-not-resolved=\"false\" data-raw-source=\"java.math.BigDecimal\"></xref> entries are serialized using <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"java.math.BigDecimal#toPlainString()\"></xref> to prevent values to be written using scientific notation.\n\nNOTE: only affects generators that serialize <xref uid=\"java.math.BigDecimal\" data-throw-if-not-resolved=\"false\" data-raw-source=\"java.math.BigDecimal\"></xref>s using textual representation (textual formats but potentially some binary formats).\n\nFeature is disabled by default, so default output mode is used; this generally depends on how <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BigDecimal\"></xref> has been created."
methods:
- uid: "com.fasterxml.jackson.core.StreamWriteFeature.collectDefaults()"
  fullName: "com.fasterxml.jackson.core.StreamWriteFeature.collectDefaults()"
  name: "collectDefaults()"
  nameWithType: "StreamWriteFeature.collectDefaults()"
  summary: "Method that calculates bit set (flags) of all features that are enabled by default."
  syntax: "public static int collectDefaults()"
  returns:
    type: "<xref href=\"int?alt=int&text=int\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.fasterxml.jackson.core.StreamWriteFeature.enabledByDefault()"
  fullName: "com.fasterxml.jackson.core.StreamWriteFeature.enabledByDefault()"
  name: "enabledByDefault()"
  nameWithType: "StreamWriteFeature.enabledByDefault()"
  syntax: "public boolean enabledByDefault()"
  returns:
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.fasterxml.jackson.core.StreamWriteFeature.enabledIn(int)"
  fullName: "com.fasterxml.jackson.core.StreamWriteFeature.enabledIn(int flags)"
  name: "enabledIn(int flags)"
  nameWithType: "StreamWriteFeature.enabledIn(int flags)"
  parameters:
  - name: "flags"
    type: "<xref href=\"int?alt=int&text=int\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public boolean enabledIn(int flags)"
  returns:
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.fasterxml.jackson.core.StreamWriteFeature.getMask()"
  fullName: "com.fasterxml.jackson.core.StreamWriteFeature.getMask()"
  name: "getMask()"
  nameWithType: "StreamWriteFeature.getMask()"
  syntax: "public int getMask()"
  returns:
    type: "<xref href=\"int?alt=int&text=int\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.fasterxml.jackson.core.StreamWriteFeature.mappedFeature()"
  fullName: "com.fasterxml.jackson.core.StreamWriteFeature.mappedFeature()"
  name: "mappedFeature()"
  nameWithType: "StreamWriteFeature.mappedFeature()"
  syntax: "public JsonGenerator.Feature mappedFeature()"
  returns:
    type: "<xref href=\"com.fasterxml.jackson.core.JsonGenerator.Feature?alt=com.fasterxml.jackson.core.JsonGenerator.Feature&text=Feature\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.fasterxml.jackson.core.StreamWriteFeature.valueOf(java.lang.String)"
  fullName: "com.fasterxml.jackson.core.StreamWriteFeature.valueOf(String name)"
  name: "valueOf(String name)"
  nameWithType: "StreamWriteFeature.valueOf(String name)"
  parameters:
  - name: "name"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public static StreamWriteFeature valueOf(String name)"
  returns:
    type: "<xref href=\"com.fasterxml.jackson.core.StreamWriteFeature?alt=com.fasterxml.jackson.core.StreamWriteFeature&text=StreamWriteFeature\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.fasterxml.jackson.core.StreamWriteFeature.values()"
  fullName: "com.fasterxml.jackson.core.StreamWriteFeature.values()"
  name: "values()"
  nameWithType: "StreamWriteFeature.values()"
  syntax: "public static StreamWriteFeature[] values()"
  returns:
    type: "<xref href=\"com.fasterxml.jackson.core.StreamWriteFeature?alt=com.fasterxml.jackson.core.StreamWriteFeature&text=StreamWriteFeature\" data-throw-if-not-resolved=\"False\" />[]"
metadata: {}
package: "com.fasterxml.jackson.core"
artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
