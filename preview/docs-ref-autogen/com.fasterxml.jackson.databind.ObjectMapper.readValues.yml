### YamlMime:JavaMember
uid: "com.fasterxml.jackson.databind.ObjectMapper.readValues*"
fullName: "com.fasterxml.jackson.databind.ObjectMapper.<T>readValues"
name: "<T>readValues"
nameWithType: "ObjectMapper.<T>readValues"
members:
- uid: "com.fasterxml.jackson.databind.ObjectMapper.<T>readValues(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.core.type.ResolvedType)"
  fullName: "com.fasterxml.jackson.databind.ObjectMapper.<T>readValues(JsonParser p, ResolvedType valueType)"
  name: "<T>readValues(JsonParser p, ResolvedType valueType)"
  nameWithType: "ObjectMapper.<T>readValues(JsonParser p, ResolvedType valueType)"
  summary: "Convenience method, equivalent in function to:\n\n```java\nreaderFor(valueType).readValues(p);\n```\n\nMethod for reading sequence of Objects from parser stream. Sequence can be either root-level \"unwrapped\" sequence (without surrounding JSON array), or a sequence contained in a JSON Array. In either case <xref uid=\"com.fasterxml.jackson.core.JsonParser\" data-throw-if-not-resolved=\"false\" data-raw-source=\"JsonParser\"></xref> **MUST** point to the first token of the first element, OR not point to any token (in which case it is advanced to the next token). This means, specifically, that for wrapped sequences, parser MUST NOT point to the surrounding `START_ARRAY` (one that contains values to read) but rather to the token following it which is the first token of the first value to read.\n\nNote that <xref uid=\"com.fasterxml.jackson.databind.ObjectReader\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ObjectReader\"></xref> has more complete set of variants."
  overridden: "com.fasterxml.jackson.core.ObjectCodec.<T>readValues(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.core.type.ResolvedType)"
  parameters:
  - name: "p"
    type: "<xref href=\"com.fasterxml.jackson.core.JsonParser?alt=com.fasterxml.jackson.core.JsonParser&text=JsonParser\" data-throw-if-not-resolved=\"False\" />"
  - name: "valueType"
    type: "<xref href=\"com.fasterxml.jackson.core.type.ResolvedType?alt=com.fasterxml.jackson.core.type.ResolvedType&text=ResolvedType\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public MappingIterator<T> <T>readValues(JsonParser p, ResolvedType valueType)"
  exceptions:
  - type: "<xref href=\"java.io.IOException?alt=java.io.IOException&text=IOException\" data-throw-if-not-resolved=\"False\" />"
  - type: "<xref href=\"com.fasterxml.jackson.core.JsonProcessingException?alt=com.fasterxml.jackson.core.JsonProcessingException&text=JsonProcessingException\" data-throw-if-not-resolved=\"False\" />"
  returns:
    type: "<xref href=\"com.fasterxml.jackson.databind.MappingIterator?alt=com.fasterxml.jackson.databind.MappingIterator&text=MappingIterator\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.fasterxml.jackson.databind.ObjectMapper.<T>readValues(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.core.type.TypeReference<T>)"
  fullName: "com.fasterxml.jackson.databind.ObjectMapper.<T>readValues(JsonParser p, TypeReference<T> valueTypeRef)"
  name: "<T>readValues(JsonParser p, TypeReference<T> valueTypeRef)"
  nameWithType: "ObjectMapper.<T>readValues(JsonParser p, TypeReference<T> valueTypeRef)"
  summary: "Method for reading sequence of Objects from parser stream."
  overridden: "com.fasterxml.jackson.core.ObjectCodec.<T>readValues(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.core.type.TypeReference<T>)"
  parameters:
  - name: "p"
    type: "<xref href=\"com.fasterxml.jackson.core.JsonParser?alt=com.fasterxml.jackson.core.JsonParser&text=JsonParser\" data-throw-if-not-resolved=\"False\" />"
  - name: "valueTypeRef"
    type: "<xref href=\"com.fasterxml.jackson.core.type.TypeReference?alt=com.fasterxml.jackson.core.type.TypeReference&text=TypeReference\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public MappingIterator<T> <T>readValues(JsonParser p, TypeReference<T> valueTypeRef)"
  exceptions:
  - type: "<xref href=\"java.io.IOException?alt=java.io.IOException&text=IOException\" data-throw-if-not-resolved=\"False\" />"
  - type: "<xref href=\"com.fasterxml.jackson.core.JsonProcessingException?alt=com.fasterxml.jackson.core.JsonProcessingException&text=JsonProcessingException\" data-throw-if-not-resolved=\"False\" />"
  returns:
    type: "<xref href=\"com.fasterxml.jackson.databind.MappingIterator?alt=com.fasterxml.jackson.databind.MappingIterator&text=MappingIterator\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.fasterxml.jackson.databind.ObjectMapper.<T>readValues(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.JavaType)"
  fullName: "com.fasterxml.jackson.databind.ObjectMapper.<T>readValues(JsonParser p, JavaType valueType)"
  name: "<T>readValues(JsonParser p, JavaType valueType)"
  nameWithType: "ObjectMapper.<T>readValues(JsonParser p, JavaType valueType)"
  summary: "Convenience method, equivalent in function to:\n\n```java\nreaderFor(valueType).readValues(p);\n```\n\nType-safe overload of <xref uid=\"com.fasterxml.jackson.databind.ObjectMapper.&lt;T&gt;readValues(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.core.type.ResolvedType)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#readValues(JsonParser, ResolvedType)\"></xref>."
  parameters:
  - name: "p"
    type: "<xref href=\"com.fasterxml.jackson.core.JsonParser?alt=com.fasterxml.jackson.core.JsonParser&text=JsonParser\" data-throw-if-not-resolved=\"False\" />"
  - name: "valueType"
    type: "<xref href=\"com.fasterxml.jackson.databind.JavaType?alt=com.fasterxml.jackson.databind.JavaType&text=JavaType\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public MappingIterator<T> <T>readValues(JsonParser p, JavaType valueType)"
  exceptions:
  - type: "<xref href=\"java.io.IOException?alt=java.io.IOException&text=IOException\" data-throw-if-not-resolved=\"False\" />"
  - type: "<xref href=\"com.fasterxml.jackson.core.JsonProcessingException?alt=com.fasterxml.jackson.core.JsonProcessingException&text=JsonProcessingException\" data-throw-if-not-resolved=\"False\" />"
  returns:
    type: "<xref href=\"com.fasterxml.jackson.databind.MappingIterator?alt=com.fasterxml.jackson.databind.MappingIterator&text=MappingIterator\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.fasterxml.jackson.databind.ObjectMapper.<T>readValues(com.fasterxml.jackson.core.JsonParser,java.lang.Class<T>)"
  fullName: "com.fasterxml.jackson.databind.ObjectMapper.<T>readValues(JsonParser p, Class<T> valueType)"
  name: "<T>readValues(JsonParser p, Class<T> valueType)"
  nameWithType: "ObjectMapper.<T>readValues(JsonParser p, Class<T> valueType)"
  summary: "Convenience method, equivalent in function to:\n\n```java\nreaderFor(valueType).readValues(p);\n```\n\nType-safe overload of <xref uid=\"com.fasterxml.jackson.databind.ObjectMapper.&lt;T&gt;readValues(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.core.type.ResolvedType)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#readValues(JsonParser, ResolvedType)\"></xref>."
  overridden: "com.fasterxml.jackson.core.ObjectCodec.<T>readValues(com.fasterxml.jackson.core.JsonParser,java.lang.Class<T>)"
  parameters:
  - name: "p"
    type: "<xref href=\"com.fasterxml.jackson.core.JsonParser?alt=com.fasterxml.jackson.core.JsonParser&text=JsonParser\" data-throw-if-not-resolved=\"False\" />"
  - name: "valueType"
    type: "<xref href=\"java.lang.Class?alt=java.lang.Class&text=Class\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public MappingIterator<T> <T>readValues(JsonParser p, Class<T> valueType)"
  exceptions:
  - type: "<xref href=\"java.io.IOException?alt=java.io.IOException&text=IOException\" data-throw-if-not-resolved=\"False\" />"
  - type: "<xref href=\"com.fasterxml.jackson.core.JsonProcessingException?alt=com.fasterxml.jackson.core.JsonProcessingException&text=JsonProcessingException\" data-throw-if-not-resolved=\"False\" />"
  returns:
    type: "<xref href=\"com.fasterxml.jackson.databind.MappingIterator?alt=com.fasterxml.jackson.databind.MappingIterator&text=MappingIterator\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
type: "method"
metadata: {}
package: "com.fasterxml.jackson.databind"
artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
