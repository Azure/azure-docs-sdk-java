### YamlMime:ManagedReference
items:
- uid: com.azure.cosmos.implementation.guava25.collect.HashBiMap
  id: HashBiMap
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect
  children:
  - com.azure.cosmos.implementation.guava25.collect.HashBiMap.<K,V>create()
  - com.azure.cosmos.implementation.guava25.collect.HashBiMap.<K,V>create(int)
  - com.azure.cosmos.implementation.guava25.collect.HashBiMap.<K,V>create(java.util.Map<? extends K,? extends V>)
  - com.azure.cosmos.implementation.guava25.collect.HashBiMap.clear()
  - com.azure.cosmos.implementation.guava25.collect.HashBiMap.containsKey(java.lang.Object)
  - com.azure.cosmos.implementation.guava25.collect.HashBiMap.containsValue(java.lang.Object)
  - com.azure.cosmos.implementation.guava25.collect.HashBiMap.forEach(java.util.function.BiConsumer<? super K,? super V>)
  - com.azure.cosmos.implementation.guava25.collect.HashBiMap.forcePut(K,V)
  - com.azure.cosmos.implementation.guava25.collect.HashBiMap.get(java.lang.Object)
  - com.azure.cosmos.implementation.guava25.collect.HashBiMap.inverse()
  - com.azure.cosmos.implementation.guava25.collect.HashBiMap.keySet()
  - com.azure.cosmos.implementation.guava25.collect.HashBiMap.put(K,V)
  - com.azure.cosmos.implementation.guava25.collect.HashBiMap.remove(java.lang.Object)
  - com.azure.cosmos.implementation.guava25.collect.HashBiMap.replaceAll(java.util.function.BiFunction<? super K,? super V,? extends V>)
  - com.azure.cosmos.implementation.guava25.collect.HashBiMap.size()
  - com.azure.cosmos.implementation.guava25.collect.HashBiMap.values()
  langs:
  - java
  name: HashBiMap<K,V>
  nameWithType: HashBiMap<K,V>
  fullName: com.azure.cosmos.implementation.guava25.collect.HashBiMap<K,V>
  type: Class
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    A <xref uid="com.azure.cosmos.implementation.guava25.collect.BiMap" data-throw-if-not-resolved="false">BiMap</xref> backed by two hash tables. This implementation allows null keys and values. A `HashBiMap` and its inverse are both serializable.


    This implementation guarantees insertion-based iteration order of its keys.


    See the Guava User Guide article on [ `BiMap` ][_BiMap_].



    [_BiMap_]: https://github.com/google/guava/wiki/NewCollectionTypesExplained#bimap
  syntax:
    content: public final class HashBiMap<K,V> extends Maps.IteratorBasedAbstractMap<K,V> implements BiMap<K,V>, Serializable
    typeParameters:
    - id: K
    - id: V
  inheritance:
  - java.lang.Object
  - java.util.AbstractMap
  - com.azure.cosmos.implementation.guava25.collect.Maps.IteratorBasedAbstractMap
  implements:
  - com.azure.cosmos.implementation.guava25.collect.BiMap<K,V>
  - java.io.Serializable
  inheritedMembers:
  - com.azure.cosmos.implementation.guava25.collect.Maps.IteratorBasedAbstractMap.clear()
  - com.azure.cosmos.implementation.guava25.collect.Maps.IteratorBasedAbstractMap.entrySet()
  - com.azure.cosmos.implementation.guava25.collect.Maps.IteratorBasedAbstractMap.size()
  - java.lang.Object.finalize()
  - java.lang.Object.getClass()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
  - java.util.AbstractMap.clone()
  - java.util.AbstractMap.containsKey(java.lang.Object)
  - java.util.AbstractMap.containsValue(java.lang.Object)
  - java.util.AbstractMap.equals(java.lang.Object)
  - java.util.AbstractMap.get(java.lang.Object)
  - java.util.AbstractMap.hashCode()
  - java.util.AbstractMap.isEmpty()
  - java.util.AbstractMap.keySet()
  - java.util.AbstractMap.put(K,V)
  - java.util.AbstractMap.putAll(java.util.Map<? extends K,? extends V>)
  - java.util.AbstractMap.remove(java.lang.Object)
  - java.util.AbstractMap.toString()
  - java.util.AbstractMap.values()
- uid: com.azure.cosmos.implementation.guava25.collect.HashBiMap.<K,V>create()
  id: <K,V>create()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.HashBiMap
  langs:
  - java
  name: <K,V>create()
  nameWithType: HashBiMap<K,V>.<K,V>create()
  fullName: com.azure.cosmos.implementation.guava25.collect.HashBiMap<K,V>.<K,V>create()
  overload: com.azure.cosmos.implementation.guava25.collect.HashBiMap.create*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Returns a new, empty `HashBiMap` with the default initial capacity (16).
  syntax:
    content: public static HashBiMap<K,V> <K,V>create()
    return:
      type: com.azure.cosmos.implementation.guava25.collect.HashBiMap<K,V>
- uid: com.azure.cosmos.implementation.guava25.collect.HashBiMap.<K,V>create(int)
  id: <K,V>create(int)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.HashBiMap
  langs:
  - java
  name: <K,V>create(int expectedSize)
  nameWithType: HashBiMap<K,V>.<K,V>create(int expectedSize)
  fullName: com.azure.cosmos.implementation.guava25.collect.HashBiMap<K,V>.<K,V>create(int expectedSize)
  overload: com.azure.cosmos.implementation.guava25.collect.HashBiMap.create*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Constructs a new, empty bimap with the specified expected size.
  syntax:
    content: public static HashBiMap<K,V> <K,V>create(int expectedSize)
    parameters:
    - id: expectedSize
      type: int
      description: the expected number of entries
    return:
      type: com.azure.cosmos.implementation.guava25.collect.HashBiMap<K,V>
- uid: com.azure.cosmos.implementation.guava25.collect.HashBiMap.<K,V>create(java.util.Map<? extends K,? extends V>)
  id: <K,V>create(java.util.Map<? extends K,? extends V>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.HashBiMap
  langs:
  - java
  name: <K,V>create(Map<? extends K,? extends V> map)
  nameWithType: HashBiMap<K,V>.<K,V>create(Map<? extends K,? extends V> map)
  fullName: com.azure.cosmos.implementation.guava25.collect.HashBiMap<K,V>.<K,V>create(Map<? extends K,? extends V> map)
  overload: com.azure.cosmos.implementation.guava25.collect.HashBiMap.create*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Constructs a new bimap containing initial values from `map`. The bimap is created with an initial capacity sufficient to hold the mappings in the specified map.
  syntax:
    content: public static HashBiMap<K,V> <K,V>create(Map<? extends K,? extends V> map)
    parameters:
    - id: map
      type: java.util.Map<? extends K,? extends V>
    return:
      type: com.azure.cosmos.implementation.guava25.collect.HashBiMap<K,V>
- uid: com.azure.cosmos.implementation.guava25.collect.HashBiMap.HashBiMap(int)
  id: HashBiMap(int)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.HashBiMap
  langs:
  - java
  name: HashBiMap(int expectedSize)
  nameWithType: HashBiMap<K,V>.HashBiMap(int expectedSize)
  fullName: com.azure.cosmos.implementation.guava25.collect.HashBiMap<K,V>.HashBiMap(int expectedSize)
  overload: com.azure.cosmos.implementation.guava25.collect.HashBiMap.HashBiMap*
  type: Constructor
  package: com.azure.cosmos.implementation.guava25.collect
  syntax:
    content: private HashBiMap(int expectedSize)
    parameters:
    - id: expectedSize
      type: int
- uid: com.azure.cosmos.implementation.guava25.collect.HashBiMap.clear()
  id: clear()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.HashBiMap
  langs:
  - java
  name: clear()
  nameWithType: HashBiMap<K,V>.clear()
  fullName: com.azure.cosmos.implementation.guava25.collect.HashBiMap<K,V>.clear()
  overload: com.azure.cosmos.implementation.guava25.collect.HashBiMap.clear*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  syntax:
    content: public void clear()
- uid: com.azure.cosmos.implementation.guava25.collect.HashBiMap.containsKey(java.lang.Object)
  id: containsKey(java.lang.Object)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.HashBiMap
  langs:
  - java
  name: containsKey(Object key)
  nameWithType: HashBiMap<K,V>.containsKey(Object key)
  fullName: com.azure.cosmos.implementation.guava25.collect.HashBiMap<K,V>.containsKey(Object key)
  overload: com.azure.cosmos.implementation.guava25.collect.HashBiMap.containsKey*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  syntax:
    content: public boolean containsKey(Object key)
    parameters:
    - id: key
      type: java.lang.Object
    return:
      type: boolean
- uid: com.azure.cosmos.implementation.guava25.collect.HashBiMap.containsValue(java.lang.Object)
  id: containsValue(java.lang.Object)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.HashBiMap
  langs:
  - java
  name: containsValue(Object value)
  nameWithType: HashBiMap<K,V>.containsValue(Object value)
  fullName: com.azure.cosmos.implementation.guava25.collect.HashBiMap<K,V>.containsValue(Object value)
  overload: com.azure.cosmos.implementation.guava25.collect.HashBiMap.containsValue*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  syntax:
    content: public boolean containsValue(Object value)
    parameters:
    - id: value
      type: java.lang.Object
    return:
      type: boolean
- uid: com.azure.cosmos.implementation.guava25.collect.HashBiMap.forEach(java.util.function.BiConsumer<? super K,? super V>)
  id: forEach(java.util.function.BiConsumer<? super K,? super V>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.HashBiMap
  langs:
  - java
  name: forEach(BiConsumer<? super K,? super V> action)
  nameWithType: HashBiMap<K,V>.forEach(BiConsumer<? super K,? super V> action)
  fullName: com.azure.cosmos.implementation.guava25.collect.HashBiMap<K,V>.forEach(BiConsumer<? super K,? super V> action)
  overload: com.azure.cosmos.implementation.guava25.collect.HashBiMap.forEach*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  syntax:
    content: public void forEach(BiConsumer<? super K,? super V> action)
    parameters:
    - id: action
      type: java.util.function.BiConsumer<? super K,? super V>
- uid: com.azure.cosmos.implementation.guava25.collect.HashBiMap.forcePut(K,V)
  id: forcePut(K,V)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.HashBiMap
  langs:
  - java
  name: forcePut(K key, V value)
  nameWithType: HashBiMap<K,V>.forcePut(K key, V value)
  fullName: com.azure.cosmos.implementation.guava25.collect.HashBiMap<K,V>.forcePut(K key, V value)
  overload: com.azure.cosmos.implementation.guava25.collect.HashBiMap.forcePut*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    An alternate form of `put` that silently removes any existing entry with the value `value` before proceeding with the <xref uid="com.azure.cosmos.implementation.guava25.collect.HashBiMap.put" data-throw-if-not-resolved="false">#put</xref> operation. If the bimap previously contained the provided key-value mapping, this method has no effect.


    Note that a successful call to this method could cause the size of the bimap to increase by one, stay the same, or even decrease by one.


    **Warning:** If an existing entry with this value is removed, the key for that entry is discarded and not returned.
  syntax:
    content: public V forcePut(K key, V value)
    parameters:
    - id: key
      type: K
    - id: value
      type: V
    return:
      type: V
- uid: com.azure.cosmos.implementation.guava25.collect.HashBiMap.get(java.lang.Object)
  id: get(java.lang.Object)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.HashBiMap
  langs:
  - java
  name: get(Object key)
  nameWithType: HashBiMap<K,V>.get(Object key)
  fullName: com.azure.cosmos.implementation.guava25.collect.HashBiMap<K,V>.get(Object key)
  overload: com.azure.cosmos.implementation.guava25.collect.HashBiMap.get*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  syntax:
    content: public V get(Object key)
    parameters:
    - id: key
      type: java.lang.Object
    return:
      type: V
- uid: com.azure.cosmos.implementation.guava25.collect.HashBiMap.inverse()
  id: inverse()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.HashBiMap
  langs:
  - java
  name: inverse()
  nameWithType: HashBiMap<K,V>.inverse()
  fullName: com.azure.cosmos.implementation.guava25.collect.HashBiMap<K,V>.inverse()
  overload: com.azure.cosmos.implementation.guava25.collect.HashBiMap.inverse*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Returns the inverse view of this bimap, which maps each of this bimap's values to its associated key. The two bimaps are backed by the same data; any changes to one will appear in the other.


    **Note:**There is no guaranteed correspondence between the iteration order of a bimap and that of its inverse.
  syntax:
    content: public BiMap<V,K> inverse()
    return:
      type: com.azure.cosmos.implementation.guava25.collect.BiMap<V,K>
- uid: com.azure.cosmos.implementation.guava25.collect.HashBiMap.keySet()
  id: keySet()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.HashBiMap
  langs:
  - java
  name: keySet()
  nameWithType: HashBiMap<K,V>.keySet()
  fullName: com.azure.cosmos.implementation.guava25.collect.HashBiMap<K,V>.keySet()
  overload: com.azure.cosmos.implementation.guava25.collect.HashBiMap.keySet*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  syntax:
    content: public Set<K> keySet()
    return:
      type: java.util.Set<K>
- uid: com.azure.cosmos.implementation.guava25.collect.HashBiMap.put(K,V)
  id: put(K,V)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.HashBiMap
  langs:
  - java
  name: put(K key, V value)
  nameWithType: HashBiMap<K,V>.put(K key, V value)
  fullName: com.azure.cosmos.implementation.guava25.collect.HashBiMap<K,V>.put(K key, V value)
  overload: com.azure.cosmos.implementation.guava25.collect.HashBiMap.put*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  syntax:
    content: public V put(K key, V value)
    parameters:
    - id: key
      type: K
    - id: value
      type: V
    return:
      type: V
- uid: com.azure.cosmos.implementation.guava25.collect.HashBiMap.remove(java.lang.Object)
  id: remove(java.lang.Object)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.HashBiMap
  langs:
  - java
  name: remove(Object key)
  nameWithType: HashBiMap<K,V>.remove(Object key)
  fullName: com.azure.cosmos.implementation.guava25.collect.HashBiMap<K,V>.remove(Object key)
  overload: com.azure.cosmos.implementation.guava25.collect.HashBiMap.remove*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  syntax:
    content: public V remove(Object key)
    parameters:
    - id: key
      type: java.lang.Object
    return:
      type: V
- uid: com.azure.cosmos.implementation.guava25.collect.HashBiMap.replaceAll(java.util.function.BiFunction<? super K,? super V,? extends V>)
  id: replaceAll(java.util.function.BiFunction<? super K,? super V,? extends V>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.HashBiMap
  langs:
  - java
  name: replaceAll(BiFunction<? super K,? super V,? extends V> function)
  nameWithType: HashBiMap<K,V>.replaceAll(BiFunction<? super K,? super V,? extends V> function)
  fullName: com.azure.cosmos.implementation.guava25.collect.HashBiMap<K,V>.replaceAll(BiFunction<? super K,? super V,? extends V> function)
  overload: com.azure.cosmos.implementation.guava25.collect.HashBiMap.replaceAll*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  syntax:
    content: public void replaceAll(BiFunction<? super K,? super V,? extends V> function)
    parameters:
    - id: function
      type: java.util.function.BiFunction<? super K,? super V,? extends V>
- uid: com.azure.cosmos.implementation.guava25.collect.HashBiMap.size()
  id: size()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.HashBiMap
  langs:
  - java
  name: size()
  nameWithType: HashBiMap<K,V>.size()
  fullName: com.azure.cosmos.implementation.guava25.collect.HashBiMap<K,V>.size()
  overload: com.azure.cosmos.implementation.guava25.collect.HashBiMap.size*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  syntax:
    content: public int size()
    return:
      type: int
- uid: com.azure.cosmos.implementation.guava25.collect.HashBiMap.values()
  id: values()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.HashBiMap
  langs:
  - java
  name: values()
  nameWithType: HashBiMap<K,V>.values()
  fullName: com.azure.cosmos.implementation.guava25.collect.HashBiMap<K,V>.values()
  overload: com.azure.cosmos.implementation.guava25.collect.HashBiMap.values*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Because a bimap has unique values, this method returns a <xref uid="java.util.Set" data-throw-if-not-resolved="false">Set</xref>, instead of the <xref uid="java.util.Collection" data-throw-if-not-resolved="false">java.util.Collection</xref> specified in the <xref uid="java.util.Map" data-throw-if-not-resolved="false">Map</xref> interface.
  syntax:
    content: public Set<V> values()
    return:
      type: java.util.Set<V>
references:
- uid: int
  spec.java:
  - uid: int
    name: int
    fullName: int
- uid: com.azure.cosmos.implementation.guava25.collect.HashBiMap.HashBiMap*
  name: HashBiMap
  nameWithType: HashBiMap<K,V>.HashBiMap
  fullName: com.azure.cosmos.implementation.guava25.collect.HashBiMap<K,V>.HashBiMap
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.HashBiMap<K,V>
  spec.java:
  - uid: com.azure.cosmos.implementation.guava25.collect.HashBiMap
    name: HashBiMap
    fullName: com.azure.cosmos.implementation.guava25.collect.HashBiMap
  - name: <
    fullName: <
  - uid: K
    name: K
    fullName: K
  - name: ','
    fullName: ','
  - uid: V
    name: V
    fullName: V
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.HashBiMap.create*
  name: <K,V>create
  nameWithType: HashBiMap<K,V>.<K,V>create
  fullName: com.azure.cosmos.implementation.guava25.collect.HashBiMap<K,V>.<K,V>create
  package: com.azure.cosmos.implementation.guava25.collect
- uid: java.util.Map<? extends K,? extends V>
  spec.java:
  - uid: java.util.Map
    name: Map
    fullName: java.util.Map
  - name: <
    fullName: <
  - uid: '? extends K'
    name: '? extends K'
    fullName: '? extends K'
  - name: ','
    fullName: ','
  - uid: '? extends V'
    name: '? extends V'
    fullName: '? extends V'
  - name: '>'
    fullName: '>'
- uid: java.lang.Object
  spec.java:
  - uid: java.lang.Object
    name: Object
    fullName: java.lang.Object
- uid: boolean
  spec.java:
  - uid: boolean
    name: boolean
    fullName: boolean
- uid: com.azure.cosmos.implementation.guava25.collect.HashBiMap.containsKey*
  name: containsKey
  nameWithType: HashBiMap<K,V>.containsKey
  fullName: com.azure.cosmos.implementation.guava25.collect.HashBiMap<K,V>.containsKey
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.HashBiMap.containsValue*
  name: containsValue
  nameWithType: HashBiMap<K,V>.containsValue
  fullName: com.azure.cosmos.implementation.guava25.collect.HashBiMap<K,V>.containsValue
  package: com.azure.cosmos.implementation.guava25.collect
- uid: V
  spec.java:
  - uid: V
    name: V
    fullName: V
- uid: com.azure.cosmos.implementation.guava25.collect.HashBiMap.get*
  name: get
  nameWithType: HashBiMap<K,V>.get
  fullName: com.azure.cosmos.implementation.guava25.collect.HashBiMap<K,V>.get
  package: com.azure.cosmos.implementation.guava25.collect
- uid: K
  spec.java:
  - uid: K
    name: K
    fullName: K
- uid: com.azure.cosmos.implementation.guava25.collect.HashBiMap.put*
  name: put
  nameWithType: HashBiMap<K,V>.put
  fullName: com.azure.cosmos.implementation.guava25.collect.HashBiMap<K,V>.put
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.HashBiMap.forcePut*
  name: forcePut
  nameWithType: HashBiMap<K,V>.forcePut
  fullName: com.azure.cosmos.implementation.guava25.collect.HashBiMap<K,V>.forcePut
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.HashBiMap.remove*
  name: remove
  nameWithType: HashBiMap<K,V>.remove
  fullName: com.azure.cosmos.implementation.guava25.collect.HashBiMap<K,V>.remove
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.HashBiMap.clear*
  name: clear
  nameWithType: HashBiMap<K,V>.clear
  fullName: com.azure.cosmos.implementation.guava25.collect.HashBiMap<K,V>.clear
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.HashBiMap.size*
  name: size
  nameWithType: HashBiMap<K,V>.size
  fullName: com.azure.cosmos.implementation.guava25.collect.HashBiMap<K,V>.size
  package: com.azure.cosmos.implementation.guava25.collect
- uid: java.util.Set<K>
  spec.java:
  - uid: java.util.Set
    name: Set
    fullName: java.util.Set
  - name: <
    fullName: <
  - uid: K
    name: K
    fullName: K
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.HashBiMap.keySet*
  name: keySet
  nameWithType: HashBiMap<K,V>.keySet
  fullName: com.azure.cosmos.implementation.guava25.collect.HashBiMap<K,V>.keySet
  package: com.azure.cosmos.implementation.guava25.collect
- uid: java.util.Set<V>
  spec.java:
  - uid: java.util.Set
    name: Set
    fullName: java.util.Set
  - name: <
    fullName: <
  - uid: V
    name: V
    fullName: V
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.HashBiMap.values*
  name: values
  nameWithType: HashBiMap<K,V>.values
  fullName: com.azure.cosmos.implementation.guava25.collect.HashBiMap<K,V>.values
  package: com.azure.cosmos.implementation.guava25.collect
- uid: java.util.function.BiConsumer<? super K,? super V>
  spec.java:
  - uid: java.util.function.BiConsumer
    name: BiConsumer
    fullName: java.util.function.BiConsumer
  - name: <
    fullName: <
  - uid: '? super K'
    name: '? super K'
    fullName: '? super K'
  - name: ','
    fullName: ','
  - uid: '? super V'
    name: '? super V'
    fullName: '? super V'
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.HashBiMap.forEach*
  name: forEach
  nameWithType: HashBiMap<K,V>.forEach
  fullName: com.azure.cosmos.implementation.guava25.collect.HashBiMap<K,V>.forEach
  package: com.azure.cosmos.implementation.guava25.collect
- uid: java.util.function.BiFunction<? super K,? super V,? extends V>
  spec.java:
  - uid: java.util.function.BiFunction
    name: BiFunction
    fullName: java.util.function.BiFunction
  - name: <
    fullName: <
  - uid: '? super K'
    name: '? super K'
    fullName: '? super K'
  - name: ','
    fullName: ','
  - uid: '? super V'
    name: '? super V'
    fullName: '? super V'
  - name: ','
    fullName: ','
  - uid: '? extends V'
    name: '? extends V'
    fullName: '? extends V'
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.HashBiMap.replaceAll*
  name: replaceAll
  nameWithType: HashBiMap<K,V>.replaceAll
  fullName: com.azure.cosmos.implementation.guava25.collect.HashBiMap<K,V>.replaceAll
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.BiMap<V,K>
  spec.java:
  - uid: com.azure.cosmos.implementation.guava25.collect.BiMap
    name: BiMap
    fullName: com.azure.cosmos.implementation.guava25.collect.BiMap
  - name: <
    fullName: <
  - uid: V
    name: V
    fullName: V
  - name: ','
    fullName: ','
  - uid: K
    name: K
    fullName: K
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.HashBiMap.inverse*
  name: inverse
  nameWithType: HashBiMap<K,V>.inverse
  fullName: com.azure.cosmos.implementation.guava25.collect.HashBiMap<K,V>.inverse
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.Maps.IteratorBasedAbstractMap<K,V>
  name: Maps.IteratorBasedAbstractMap<K,V>
  nameWithType: Maps.IteratorBasedAbstractMap<K,V>
  fullName: com.azure.cosmos.implementation.guava25.collect.Maps.IteratorBasedAbstractMap<K,V>
- uid: com.azure.cosmos.implementation.guava25.collect.BiMap<K,V>
  name: BiMap<K,V>
  nameWithType: BiMap<K,V>
  fullName: com.azure.cosmos.implementation.guava25.collect.BiMap<K,V>
- uid: java.io.Serializable
  name: Serializable
  nameWithType: Serializable
  fullName: java.io.Serializable
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: java.util.AbstractMap.put(K,V)
  name: AbstractMap.put(K,V)
  nameWithType: AbstractMap.put(K,V)
  fullName: java.util.AbstractMap.put(K,V)
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: java.lang.Object.finalize()
  name: Object.finalize()
  nameWithType: Object.finalize()
  fullName: java.lang.Object.finalize()
- uid: java.util.AbstractMap.hashCode()
  name: AbstractMap.hashCode()
  nameWithType: AbstractMap.hashCode()
  fullName: java.util.AbstractMap.hashCode()
- uid: java.util.AbstractMap.remove(java.lang.Object)
  name: AbstractMap.remove(Object)
  nameWithType: AbstractMap.remove(Object)
  fullName: java.util.AbstractMap.remove(java.lang.Object)
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: java.util.AbstractMap.get(java.lang.Object)
  name: AbstractMap.get(Object)
  nameWithType: AbstractMap.get(Object)
  fullName: java.util.AbstractMap.get(java.lang.Object)
- uid: java.util.AbstractMap.toString()
  name: AbstractMap.toString()
  nameWithType: AbstractMap.toString()
  fullName: java.util.AbstractMap.toString()
- uid: com.azure.cosmos.implementation.guava25.collect.Maps.IteratorBasedAbstractMap.size()
  name: Maps.IteratorBasedAbstractMap.size()
  nameWithType: Maps.IteratorBasedAbstractMap.size()
  fullName: com.azure.cosmos.implementation.guava25.collect.Maps.IteratorBasedAbstractMap.size()
- uid: java.util.AbstractMap.clone()
  name: AbstractMap.clone()
  nameWithType: AbstractMap.clone()
  fullName: java.util.AbstractMap.clone()
- uid: java.util.AbstractMap.keySet()
  name: AbstractMap.keySet()
  nameWithType: AbstractMap.keySet()
  fullName: java.util.AbstractMap.keySet()
- uid: java.util.AbstractMap.equals(java.lang.Object)
  name: AbstractMap.equals(Object)
  nameWithType: AbstractMap.equals(Object)
  fullName: java.util.AbstractMap.equals(java.lang.Object)
- uid: com.azure.cosmos.implementation.guava25.collect.Maps.IteratorBasedAbstractMap.entrySet()
  name: Maps.IteratorBasedAbstractMap.entrySet()
  nameWithType: Maps.IteratorBasedAbstractMap.entrySet()
  fullName: com.azure.cosmos.implementation.guava25.collect.Maps.IteratorBasedAbstractMap.entrySet()
- uid: java.util.AbstractMap.containsValue(java.lang.Object)
  name: AbstractMap.containsValue(Object)
  nameWithType: AbstractMap.containsValue(Object)
  fullName: java.util.AbstractMap.containsValue(java.lang.Object)
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.util.AbstractMap.isEmpty()
  name: AbstractMap.isEmpty()
  nameWithType: AbstractMap.isEmpty()
  fullName: java.util.AbstractMap.isEmpty()
- uid: java.util.AbstractMap.values()
  name: AbstractMap.values()
  nameWithType: AbstractMap.values()
  fullName: java.util.AbstractMap.values()
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: com.azure.cosmos.implementation.guava25.collect.Maps.IteratorBasedAbstractMap.clear()
  name: Maps.IteratorBasedAbstractMap.clear()
  nameWithType: Maps.IteratorBasedAbstractMap.clear()
  fullName: com.azure.cosmos.implementation.guava25.collect.Maps.IteratorBasedAbstractMap.clear()
- uid: java.util.AbstractMap.putAll(java.util.Map<? extends K,? extends V>)
  name: AbstractMap.putAll(Map<? extends K,? extends V>)
  nameWithType: AbstractMap.putAll(Map<? extends K,? extends V>)
  fullName: java.util.AbstractMap.putAll(java.util.Map<? extends K,? extends V>)
- uid: java.util.AbstractMap.containsKey(java.lang.Object)
  name: AbstractMap.containsKey(Object)
  nameWithType: AbstractMap.containsKey(Object)
  fullName: java.util.AbstractMap.containsKey(java.lang.Object)
- uid: K,V
  name: K,V
  nameWithType: K,V
  fullName: K,V
- uid: java.util.Map
  name: Map
  nameWithType: Map
  fullName: java.util.Map
- uid: '? extends K,? extends V'
  name: '? extends K,? extends V'
  nameWithType: '? extends K,? extends V'
  fullName: '? extends K,? extends V'
- uid: java.util.Set
  name: Set
  nameWithType: Set
  fullName: java.util.Set
- uid: '? super K,? super V'
  name: '? super K,? super V'
  nameWithType: '? super K,? super V'
  fullName: '? super K,? super V'
- uid: java.util.function.BiConsumer
  name: BiConsumer
  nameWithType: BiConsumer
  fullName: java.util.function.BiConsumer
- uid: java.util.function.BiFunction
  name: BiFunction
  nameWithType: BiFunction
  fullName: java.util.function.BiFunction
- uid: '? super K,? super V,? extends V'
  name: '? super K,? super V,? extends V'
  nameWithType: '? super K,? super V,? extends V'
  fullName: '? super K,? super V,? extends V'
- uid: V,K
  name: V,K
  nameWithType: V,K
  fullName: V,K
- uid: com.azure.cosmos.implementation.guava25.collect.BiMap
  name: BiMap
  nameWithType: BiMap
  fullName: com.azure.cosmos.implementation.guava25.collect.BiMap
- uid: com.azure.cosmos.implementation.guava25.collect.Maps.IteratorBasedAbstractMap
  name: Maps.IteratorBasedAbstractMap
  nameWithType: Maps.IteratorBasedAbstractMap
  fullName: com.azure.cosmos.implementation.guava25.collect.Maps.IteratorBasedAbstractMap
- uid: java.util.AbstractMap.putAll(java.util.Map
  name: AbstractMap.putAll(Map
  nameWithType: AbstractMap.putAll(Map
  fullName: java.util.AbstractMap.putAll(java.util.Map
- uid: '? extends K,? extends V>)'
  name: '? extends K,? extends V>)'
  nameWithType: '? extends K,? extends V>)'
  fullName: '? extends K,? extends V>)'
