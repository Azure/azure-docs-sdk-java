### YamlMime:JavaMember
uid: "com.microsoft.azure.sdk.iot.device.InternalClient.subscribeToDesiredProperties*"
fullName: "com.microsoft.azure.sdk.iot.device.InternalClient.subscribeToDesiredProperties"
name: "subscribeToDesiredProperties"
nameWithType: "InternalClient.subscribeToDesiredProperties"
members:
- uid: "com.microsoft.azure.sdk.iot.device.InternalClient.subscribeToDesiredProperties(java.util.Map<com.microsoft.azure.sdk.iot.device.DeviceTwin.Property,com.microsoft.azure.sdk.iot.device.DeviceTwin.Pair<com.microsoft.azure.sdk.iot.device.DeviceTwin.PropertyCallBack<java.lang.String,java.lang.Object>,java.lang.Object>>)"
  fullName: "com.microsoft.azure.sdk.iot.device.InternalClient.subscribeToDesiredProperties(Map<DeviceTwin.Property,DeviceTwin.Pair<DeviceTwin.PropertyCallBack<String,Object>,Object>> onDesiredPropertyChange)"
  name: "subscribeToDesiredProperties(Map<DeviceTwin.Property,DeviceTwin.Pair<DeviceTwin.PropertyCallBack<String,Object>,Object>> onDesiredPropertyChange)"
  nameWithType: "InternalClient.subscribeToDesiredProperties(Map<DeviceTwin.Property,DeviceTwin.Pair<DeviceTwin.PropertyCallBack<String,Object>,Object>> onDesiredPropertyChange)"
  summary: "Subscribes to desired properties. This client will receive a callback each time a desired property is updated. That callback will either contain the full desired properties set, or only the updated desired property depending on how the desired property was changed. IoT Hub supports a PUT and a PATCH on the twin. The PUT will cause this device client to receive the full desired properties set, and the PATCH will cause this device client to only receive the updated desired properties. Similarly, the version of each desired property will be incremented from a PUT call, and only the actually updated desired property will have its version incremented from a PATCH call. The java service client library uses the PATCH call when updated desired properties, but it builds the patch such that all properties are included in the patch. As a result, the device side will receive full twin updates, not partial updates. See [PUT][] and [PATCH][]\n\n\n[PUT]: https://docs.microsoft.com/en-us/rest/api/iothub/service/twin/replacedevicetwin\n[PATCH]: https://docs.microsoft.com/en-us/rest/api/iothub/service/twin/updatedevicetwin"
  parameters:
  - description: "the Map for desired properties and their corresponding callback and context. Can be <code>null</code>."
    name: "onDesiredPropertyChange"
    type: "<xref href=\"java.util.Map?alt=java.util.Map&text=Map\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.sdk.iot.device.DeviceTwin.Property?alt=com.microsoft.azure.sdk.iot.device.DeviceTwin.Property&text=Property\" data-throw-if-not-resolved=\"False\" />,<xref href=\"com.microsoft.azure.sdk.iot.device.DeviceTwin.Pair?alt=com.microsoft.azure.sdk.iot.device.DeviceTwin.Pair&text=Pair\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.sdk.iot.device.DeviceTwin.PropertyCallBack?alt=com.microsoft.azure.sdk.iot.device.DeviceTwin.PropertyCallBack&text=PropertyCallBack\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />,<xref href=\"java.lang.Object?alt=java.lang.Object&text=Object\" data-throw-if-not-resolved=\"False\" />&gt;,<xref href=\"java.lang.Object?alt=java.lang.Object&text=Object\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
  syntax: "public void subscribeToDesiredProperties(Map<DeviceTwin.Property,DeviceTwin.Pair<DeviceTwin.PropertyCallBack<String,Object>,Object>> onDesiredPropertyChange)"
  exceptions:
  - description: "if called when client is not opened or called before starting twin."
    type: "<xref href=\"java.io.IOException?alt=java.io.IOException&text=IOException\" data-throw-if-not-resolved=\"False\" />"
type: "method"
metadata: {}
package: "com.microsoft.azure.sdk.iot.device"
artifact: com.microsoft.azure.sdk.iot:iot-device-client-preview:1.2.0
