### YamlMime:ManagedReference
items:
- uid: com.fasterxml.jackson.annotation.ObjectIdGenerator
  id: ObjectIdGenerator
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.annotation
  children:
  - com.fasterxml.jackson.annotation.ObjectIdGenerator.IdKey
  - com.fasterxml.jackson.annotation.ObjectIdGenerator.ObjectIdGenerator()
  - com.fasterxml.jackson.annotation.ObjectIdGenerator.canUseFor(com.fasterxml.jackson.annotation.ObjectIdGenerator<?>)
  - com.fasterxml.jackson.annotation.ObjectIdGenerator.forScope(java.lang.Class<?>)
  - com.fasterxml.jackson.annotation.ObjectIdGenerator.generateId(java.lang.Object)
  - com.fasterxml.jackson.annotation.ObjectIdGenerator.getScope()
  - com.fasterxml.jackson.annotation.ObjectIdGenerator.isValidReferencePropertyName(java.lang.String,java.lang.Object)
  - com.fasterxml.jackson.annotation.ObjectIdGenerator.key(java.lang.Object)
  - com.fasterxml.jackson.annotation.ObjectIdGenerator.maySerializeAsObject()
  - com.fasterxml.jackson.annotation.ObjectIdGenerator.newForSerialization(java.lang.Object)
  langs:
  - java
  name: ObjectIdGenerator<T>
  nameWithType: ObjectIdGenerator<T>
  fullName: com.fasterxml.jackson.annotation.ObjectIdGenerator<T>
  type: Class
  package: com.fasterxml.jackson.annotation
  summary: Definition of API used for constructing Object Identifiers (as annotated using <xref uid="com.fasterxml.jackson.annotation.JsonIdentityInfo" data-throw-if-not-resolved="false">JsonIdentityInfo</xref>). Also defines factory methods used for creating instances for serialization, deserialization.
  syntax:
    content: public abstract class ObjectIdGenerator<T> implements Serializable
    typeParameters:
    - id: T
  inheritance:
  - java.lang.Object
  implements:
  - java.io.Serializable
  inheritedMembers:
  - java.lang.Object.clone()
  - java.lang.Object.equals(java.lang.Object)
  - java.lang.Object.finalize()
  - java.lang.Object.getClass()
  - java.lang.Object.hashCode()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.toString()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
- uid: com.fasterxml.jackson.annotation.ObjectIdGenerator.ObjectIdGenerator()
  id: ObjectIdGenerator()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.annotation.ObjectIdGenerator
  langs:
  - java
  name: ObjectIdGenerator()
  nameWithType: ObjectIdGenerator<T>.ObjectIdGenerator()
  fullName: com.fasterxml.jackson.annotation.ObjectIdGenerator<T>.ObjectIdGenerator()
  overload: com.fasterxml.jackson.annotation.ObjectIdGenerator.ObjectIdGenerator*
  type: Constructor
  package: com.fasterxml.jackson.annotation
  syntax:
    content: public ObjectIdGenerator()
- uid: com.fasterxml.jackson.annotation.ObjectIdGenerator.canUseFor(com.fasterxml.jackson.annotation.ObjectIdGenerator<?>)
  id: canUseFor(com.fasterxml.jackson.annotation.ObjectIdGenerator<?>)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.annotation.ObjectIdGenerator
  langs:
  - java
  name: canUseFor(ObjectIdGenerator<?> gen)
  nameWithType: ObjectIdGenerator<T>.canUseFor(ObjectIdGenerator<?> gen)
  fullName: com.fasterxml.jackson.annotation.ObjectIdGenerator<T>.canUseFor(ObjectIdGenerator<?> gen)
  overload: com.fasterxml.jackson.annotation.ObjectIdGenerator.canUseFor*
  type: Method
  package: com.fasterxml.jackson.annotation
  summary: Method called to check whether this generator instance can be used for Object Ids of specific generator type and scope; determination is based by passing a configured "blueprint" (prototype) instance; from which the actual instances are created (using <xref uid="com.fasterxml.jackson.annotation.ObjectIdGenerator.newForSerialization" data-throw-if-not-resolved="false">#newForSerialization</xref>).
  syntax:
    content: public abstract boolean canUseFor(ObjectIdGenerator<?> gen)
    parameters:
    - id: gen
      type: com.fasterxml.jackson.annotation.ObjectIdGenerator<?>
    return:
      type: boolean
      description: True if this instance can be used as-is; false if not
- uid: com.fasterxml.jackson.annotation.ObjectIdGenerator.forScope(java.lang.Class<?>)
  id: forScope(java.lang.Class<?>)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.annotation.ObjectIdGenerator
  langs:
  - java
  name: forScope(Class<?> scope)
  nameWithType: ObjectIdGenerator<T>.forScope(Class<?> scope)
  fullName: com.fasterxml.jackson.annotation.ObjectIdGenerator<T>.forScope(Class<?> scope)
  overload: com.fasterxml.jackson.annotation.ObjectIdGenerator.forScope*
  type: Method
  package: com.fasterxml.jackson.annotation
  summary: Factory method to create a blueprint instance for specified scope. Generators that do not use scope may return 'this'.
  syntax:
    content: public abstract ObjectIdGenerator<T> forScope(Class<?> scope)
    parameters:
    - id: scope
      type: java.lang.Class<?>
    return:
      type: com.fasterxml.jackson.annotation.ObjectIdGenerator<T>
- uid: com.fasterxml.jackson.annotation.ObjectIdGenerator.generateId(java.lang.Object)
  id: generateId(java.lang.Object)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.annotation.ObjectIdGenerator
  langs:
  - java
  name: generateId(Object forPojo)
  nameWithType: ObjectIdGenerator<T>.generateId(Object forPojo)
  fullName: com.fasterxml.jackson.annotation.ObjectIdGenerator<T>.generateId(Object forPojo)
  overload: com.fasterxml.jackson.annotation.ObjectIdGenerator.generateId*
  type: Method
  package: com.fasterxml.jackson.annotation
  summary: Method used for generating a new Object Identifier to serialize for given POJO.
  syntax:
    content: public abstract T generateId(Object forPojo)
    parameters:
    - id: forPojo
      type: java.lang.Object
      description: POJO for which identifier is needed
    return:
      type: T
      description: Object Identifier to use.
- uid: com.fasterxml.jackson.annotation.ObjectIdGenerator.getScope()
  id: getScope()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.annotation.ObjectIdGenerator
  langs:
  - java
  name: getScope()
  nameWithType: ObjectIdGenerator<T>.getScope()
  fullName: com.fasterxml.jackson.annotation.ObjectIdGenerator<T>.getScope()
  overload: com.fasterxml.jackson.annotation.ObjectIdGenerator.getScope*
  type: Method
  package: com.fasterxml.jackson.annotation
  syntax:
    content: public abstract Class<?> getScope()
    return:
      type: java.lang.Class<?>
- uid: com.fasterxml.jackson.annotation.ObjectIdGenerator.isValidReferencePropertyName(java.lang.String,java.lang.Object)
  id: isValidReferencePropertyName(java.lang.String,java.lang.Object)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.annotation.ObjectIdGenerator
  langs:
  - java
  name: isValidReferencePropertyName(String name, Object parser)
  nameWithType: ObjectIdGenerator<T>.isValidReferencePropertyName(String name, Object parser)
  fullName: com.fasterxml.jackson.annotation.ObjectIdGenerator<T>.isValidReferencePropertyName(String name, Object parser)
  overload: com.fasterxml.jackson.annotation.ObjectIdGenerator.isValidReferencePropertyName*
  type: Method
  package: com.fasterxml.jackson.annotation
  summary: Accessor that may be called (after verifying (via <xref uid="com.fasterxml.jackson.annotation.ObjectIdGenerator.maySerializeAsObject()" data-throw-if-not-resolved="false">#maySerializeAsObject()</xref>) whether given name
  syntax:
    content: public boolean isValidReferencePropertyName(String name, Object parser)
    parameters:
    - id: name
      type: java.lang.String
      description: Name of property to check
    - id: parser
      type: java.lang.Object
      description: >-
        Parser that points to property name, in case generator needs
            further verification (note: untyped, because <code>JsonParser</code> is defined
            in `jackson-core`, and this package does not depend on it).
    return:
      type: boolean
- uid: com.fasterxml.jackson.annotation.ObjectIdGenerator.key(java.lang.Object)
  id: key(java.lang.Object)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.annotation.ObjectIdGenerator
  langs:
  - java
  name: key(Object key)
  nameWithType: ObjectIdGenerator<T>.key(Object key)
  fullName: com.fasterxml.jackson.annotation.ObjectIdGenerator<T>.key(Object key)
  overload: com.fasterxml.jackson.annotation.ObjectIdGenerator.key*
  type: Method
  package: com.fasterxml.jackson.annotation
  summary: Method for constructing key to use for ObjectId-to-POJO maps.
  syntax:
    content: public abstract ObjectIdGenerator.IdKey key(Object key)
    parameters:
    - id: key
      type: java.lang.Object
    return:
      type: com.fasterxml.jackson.annotation.ObjectIdGenerator.IdKey
- uid: com.fasterxml.jackson.annotation.ObjectIdGenerator.maySerializeAsObject()
  id: maySerializeAsObject()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.annotation.ObjectIdGenerator
  langs:
  - java
  name: maySerializeAsObject()
  nameWithType: ObjectIdGenerator<T>.maySerializeAsObject()
  fullName: com.fasterxml.jackson.annotation.ObjectIdGenerator<T>.maySerializeAsObject()
  overload: com.fasterxml.jackson.annotation.ObjectIdGenerator.maySerializeAsObject*
  type: Method
  package: com.fasterxml.jackson.annotation
  summary: >-
    Accessor that needs to be overridden to return `true` if the Object Id may be serialized as JSON Object; used by, for example, JSOG handling. The reason accessor is needed is because handling such Object Ids is more complex and may incur additional buffering or performance overhead, avoiding of which makes sense for common case of scalar object ids (or native object ids some formats support).


    Default implementation returns `false`, so needs to be overridden by Object-producing generators.
  syntax:
    content: public boolean maySerializeAsObject()
    return:
      type: boolean
- uid: com.fasterxml.jackson.annotation.ObjectIdGenerator.newForSerialization(java.lang.Object)
  id: newForSerialization(java.lang.Object)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.annotation.ObjectIdGenerator
  langs:
  - java
  name: newForSerialization(Object context)
  nameWithType: ObjectIdGenerator<T>.newForSerialization(Object context)
  fullName: com.fasterxml.jackson.annotation.ObjectIdGenerator<T>.newForSerialization(Object context)
  overload: com.fasterxml.jackson.annotation.ObjectIdGenerator.newForSerialization*
  type: Method
  package: com.fasterxml.jackson.annotation
  summary: >-
    Factory method called to create a new instance to use for serialization: needed since generators may have state (next id to produce).


    Note that actual type of 'context' is `com.fasterxml.jackson.databind.SerializerProvider`, but can not be declared here as type itself (as well as call to this object) comes from databind package.
  syntax:
    content: public abstract ObjectIdGenerator<T> newForSerialization(Object context)
    parameters:
    - id: context
      type: java.lang.Object
      description: >-
        Serialization context object used (of type
            <code>com.fasterxml.jackson.databind.SerializerProvider</code>;
            may be needed by more complex generators to access contextual
            information such as configuration.
    return:
      type: com.fasterxml.jackson.annotation.ObjectIdGenerator<T>
references:
- uid: com.fasterxml.jackson.annotation.ObjectIdGenerator.ObjectIdGenerator*
  name: ObjectIdGenerator
  nameWithType: ObjectIdGenerator<T>.ObjectIdGenerator
  fullName: com.fasterxml.jackson.annotation.ObjectIdGenerator<T>.ObjectIdGenerator
  package: com.fasterxml.jackson.annotation
- uid: java.lang.Class<?>
  spec.java:
  - uid: java.lang.Class
    name: Class
    fullName: java.lang.Class
  - name: <
    fullName: <
  - uid: '?'
    name: '?'
    fullName: '?'
  - name: '>'
    fullName: '>'
- uid: com.fasterxml.jackson.annotation.ObjectIdGenerator.getScope*
  name: getScope
  nameWithType: ObjectIdGenerator<T>.getScope
  fullName: com.fasterxml.jackson.annotation.ObjectIdGenerator<T>.getScope
  package: com.fasterxml.jackson.annotation
- uid: com.fasterxml.jackson.annotation.ObjectIdGenerator<?>
  spec.java:
  - uid: com.fasterxml.jackson.annotation.ObjectIdGenerator
    name: ObjectIdGenerator
    fullName: com.fasterxml.jackson.annotation.ObjectIdGenerator
  - name: <
    fullName: <
  - uid: '?'
    name: '?'
    fullName: '?'
  - name: '>'
    fullName: '>'
- uid: boolean
  spec.java:
  - uid: boolean
    name: boolean
    fullName: boolean
- uid: com.fasterxml.jackson.annotation.ObjectIdGenerator.canUseFor*
  name: canUseFor
  nameWithType: ObjectIdGenerator<T>.canUseFor
  fullName: com.fasterxml.jackson.annotation.ObjectIdGenerator<T>.canUseFor
  package: com.fasterxml.jackson.annotation
- uid: com.fasterxml.jackson.annotation.ObjectIdGenerator.maySerializeAsObject*
  name: maySerializeAsObject
  nameWithType: ObjectIdGenerator<T>.maySerializeAsObject
  fullName: com.fasterxml.jackson.annotation.ObjectIdGenerator<T>.maySerializeAsObject
  package: com.fasterxml.jackson.annotation
- uid: java.lang.String
  spec.java:
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
- uid: java.lang.Object
  spec.java:
  - uid: java.lang.Object
    name: Object
    fullName: java.lang.Object
- uid: com.fasterxml.jackson.annotation.ObjectIdGenerator.isValidReferencePropertyName*
  name: isValidReferencePropertyName
  nameWithType: ObjectIdGenerator<T>.isValidReferencePropertyName
  fullName: com.fasterxml.jackson.annotation.ObjectIdGenerator<T>.isValidReferencePropertyName
  package: com.fasterxml.jackson.annotation
- uid: com.fasterxml.jackson.annotation.ObjectIdGenerator<T>
  spec.java:
  - uid: com.fasterxml.jackson.annotation.ObjectIdGenerator
    name: ObjectIdGenerator
    fullName: com.fasterxml.jackson.annotation.ObjectIdGenerator
  - name: <
    fullName: <
  - uid: T
    name: T
    fullName: T
  - name: '>'
    fullName: '>'
- uid: com.fasterxml.jackson.annotation.ObjectIdGenerator.forScope*
  name: forScope
  nameWithType: ObjectIdGenerator<T>.forScope
  fullName: com.fasterxml.jackson.annotation.ObjectIdGenerator<T>.forScope
  package: com.fasterxml.jackson.annotation
- uid: com.fasterxml.jackson.annotation.ObjectIdGenerator.newForSerialization*
  name: newForSerialization
  nameWithType: ObjectIdGenerator<T>.newForSerialization
  fullName: com.fasterxml.jackson.annotation.ObjectIdGenerator<T>.newForSerialization
  package: com.fasterxml.jackson.annotation
- uid: com.fasterxml.jackson.annotation.ObjectIdGenerator.IdKey
  name: ObjectIdGenerator.IdKey
  nameWithType: ObjectIdGenerator.IdKey
  fullName: com.fasterxml.jackson.annotation.ObjectIdGenerator.IdKey
- uid: com.fasterxml.jackson.annotation.ObjectIdGenerator.key*
  name: key
  nameWithType: ObjectIdGenerator<T>.key
  fullName: com.fasterxml.jackson.annotation.ObjectIdGenerator<T>.key
  package: com.fasterxml.jackson.annotation
- uid: T
  spec.java:
  - uid: T
    name: T
    fullName: T
- uid: com.fasterxml.jackson.annotation.ObjectIdGenerator.generateId*
  name: generateId
  nameWithType: ObjectIdGenerator<T>.generateId
  fullName: com.fasterxml.jackson.annotation.ObjectIdGenerator<T>.generateId
  package: com.fasterxml.jackson.annotation
- uid: java.io.Serializable
  name: Serializable
  nameWithType: Serializable
  fullName: java.io.Serializable
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: java.lang.Object.finalize()
  name: Object.finalize()
  nameWithType: Object.finalize()
  fullName: java.lang.Object.finalize()
- uid: java.lang.Object.clone()
  name: Object.clone()
  nameWithType: Object.clone()
  fullName: java.lang.Object.clone()
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: java.lang.Object.equals(java.lang.Object)
  name: Object.equals(Object)
  nameWithType: Object.equals(Object)
  fullName: java.lang.Object.equals(java.lang.Object)
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.lang.Object.hashCode()
  name: Object.hashCode()
  nameWithType: Object.hashCode()
  fullName: java.lang.Object.hashCode()
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: java.lang.Object.toString()
  name: Object.toString()
  nameWithType: Object.toString()
  fullName: java.lang.Object.toString()
- uid: java.lang.Class
  name: Class
  nameWithType: Class
  fullName: java.lang.Class
- uid: '?'
  name: '?'
  nameWithType: '?'
  fullName: '?'
