### YamlMime:ManagedReference
items:
- uid: com.azure.digitaltwins.core.implementation.DigitalTwinsImpl
  id: DigitalTwinsImpl
  artifact: com.azure:azure-digitaltwins-core:1.0.0-beta.1
  parent: com.azure.digitaltwins.core.implementation
  children:
  - com.azure.digitaltwins.core.implementation.DigitalTwinsImpl.addRelationshipWithResponseAsync(java.lang.String,java.lang.String,java.lang.Object,com.azure.core.util.Context)
  - com.azure.digitaltwins.core.implementation.DigitalTwinsImpl.addWithResponseAsync(java.lang.String,java.lang.Object,com.azure.core.util.Context)
  - com.azure.digitaltwins.core.implementation.DigitalTwinsImpl.deleteRelationshipWithResponseAsync(java.lang.String,java.lang.String,java.lang.String,com.azure.core.util.Context)
  - com.azure.digitaltwins.core.implementation.DigitalTwinsImpl.deleteWithResponseAsync(java.lang.String,java.lang.String,com.azure.core.util.Context)
  - com.azure.digitaltwins.core.implementation.DigitalTwinsImpl.getByIdWithResponseAsync(java.lang.String,com.azure.core.util.Context)
  - com.azure.digitaltwins.core.implementation.DigitalTwinsImpl.getComponentWithResponseAsync(java.lang.String,java.lang.String,com.azure.core.util.Context)
  - com.azure.digitaltwins.core.implementation.DigitalTwinsImpl.getRelationshipByIdWithResponseAsync(java.lang.String,java.lang.String,com.azure.core.util.Context)
  - com.azure.digitaltwins.core.implementation.DigitalTwinsImpl.listIncomingRelationshipsNextSinglePageAsync(java.lang.String,com.azure.core.util.Context)
  - com.azure.digitaltwins.core.implementation.DigitalTwinsImpl.listIncomingRelationshipsSinglePageAsync(java.lang.String,com.azure.core.util.Context)
  - com.azure.digitaltwins.core.implementation.DigitalTwinsImpl.listRelationshipsNextSinglePageAsync(java.lang.String,com.azure.core.util.Context)
  - com.azure.digitaltwins.core.implementation.DigitalTwinsImpl.listRelationshipsSinglePageAsync(java.lang.String,java.lang.String,com.azure.core.util.Context)
  - com.azure.digitaltwins.core.implementation.DigitalTwinsImpl.sendComponentTelemetryWithResponseAsync(java.lang.String,java.lang.String,java.lang.String,java.lang.Object,java.lang.String,com.azure.core.util.Context)
  - com.azure.digitaltwins.core.implementation.DigitalTwinsImpl.sendTelemetryWithResponseAsync(java.lang.String,java.lang.String,java.lang.Object,java.lang.String,com.azure.core.util.Context)
  - com.azure.digitaltwins.core.implementation.DigitalTwinsImpl.updateComponentWithResponseAsync(java.lang.String,java.lang.String,java.lang.String,java.util.List<java.lang.Object>,com.azure.core.util.Context)
  - com.azure.digitaltwins.core.implementation.DigitalTwinsImpl.updateRelationshipWithResponseAsync(java.lang.String,java.lang.String,java.lang.String,java.util.List<java.lang.Object>,com.azure.core.util.Context)
  - com.azure.digitaltwins.core.implementation.DigitalTwinsImpl.updateWithResponseAsync(java.lang.String,java.util.List<java.lang.Object>,java.lang.String,com.azure.core.util.Context)
  langs:
  - java
  name: DigitalTwinsImpl
  nameWithType: DigitalTwinsImpl
  fullName: com.azure.digitaltwins.core.implementation.DigitalTwinsImpl
  type: Class
  package: com.azure.digitaltwins.core.implementation
  summary: An instance of this class provides access to all the operations defined in DigitalTwins.
  syntax:
    content: public final class DigitalTwinsImpl
  inheritance:
  - java.lang.Object
  inheritedMembers:
  - java.lang.Object.clone()
  - java.lang.Object.equals(java.lang.Object)
  - java.lang.Object.finalize()
  - java.lang.Object.getClass()
  - java.lang.Object.hashCode()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.toString()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
- uid: com.azure.digitaltwins.core.implementation.DigitalTwinsImpl.DigitalTwinsImpl(com.azure.digitaltwins.core.implementation.AzureDigitalTwinsAPIImpl)
  id: DigitalTwinsImpl(com.azure.digitaltwins.core.implementation.AzureDigitalTwinsAPIImpl)
  artifact: com.azure:azure-digitaltwins-core:1.0.0-beta.1
  parent: com.azure.digitaltwins.core.implementation.DigitalTwinsImpl
  langs:
  - java
  name: DigitalTwinsImpl(AzureDigitalTwinsAPIImpl client)
  nameWithType: DigitalTwinsImpl.DigitalTwinsImpl(AzureDigitalTwinsAPIImpl client)
  fullName: com.azure.digitaltwins.core.implementation.DigitalTwinsImpl.DigitalTwinsImpl(AzureDigitalTwinsAPIImpl client)
  overload: com.azure.digitaltwins.core.implementation.DigitalTwinsImpl.DigitalTwinsImpl*
  type: Constructor
  package: com.azure.digitaltwins.core.implementation
  summary: Initializes an instance of DigitalTwinsImpl.
  syntax:
    content: " DigitalTwinsImpl(AzureDigitalTwinsAPIImpl client)"
    parameters:
    - id: client
      type: com.azure.digitaltwins.core.implementation.AzureDigitalTwinsAPIImpl
      description: the instance of the service client containing this operation class.
- uid: com.azure.digitaltwins.core.implementation.DigitalTwinsImpl.addRelationshipWithResponseAsync(java.lang.String,java.lang.String,java.lang.Object,com.azure.core.util.Context)
  id: addRelationshipWithResponseAsync(java.lang.String,java.lang.String,java.lang.Object,com.azure.core.util.Context)
  artifact: com.azure:azure-digitaltwins-core:1.0.0-beta.1
  parent: com.azure.digitaltwins.core.implementation.DigitalTwinsImpl
  langs:
  - java
  name: addRelationshipWithResponseAsync(String id, String relationshipId, Object relationship, Context context)
  nameWithType: DigitalTwinsImpl.addRelationshipWithResponseAsync(String id, String relationshipId, Object relationship, Context context)
  fullName: com.azure.digitaltwins.core.implementation.DigitalTwinsImpl.addRelationshipWithResponseAsync(String id, String relationshipId, Object relationship, Context context)
  overload: com.azure.digitaltwins.core.implementation.DigitalTwinsImpl.addRelationshipWithResponseAsync*
  type: Method
  package: com.azure.digitaltwins.core.implementation
  summary: 'Adds a relationship between two digital twins. Status codes: 200 (OK): Success. 400 (Bad Request): The request is invalid. 404 (Not Found): There is either no digital twin, target digital twin, or relationship with the provided id. 409 (Conflict): A relationship with the provided id already exists.'
  syntax:
    content: public Mono<DigitalTwinsAddRelationshipResponse> addRelationshipWithResponseAsync(String id, String relationshipId, Object relationship, Context context)
    parameters:
    - id: id
      type: java.lang.String
      description: The id of the digital twin. The id is unique within the service and case sensitive.
    - id: relationshipId
      type: java.lang.String
      description: The id of the relationship. The id is unique within the digital twin and case sensitive.
    - id: relationship
      type: java.lang.Object
      description: Any object.
    - id: context
      type: com.azure.core.util.Context
      description: The context to associate with this operation.
    return:
      type: reactor.core.publisher.Mono<com.azure.digitaltwins.core.implementation.models.DigitalTwinsAddRelationshipResponse>
      description: any object.
- uid: com.azure.digitaltwins.core.implementation.DigitalTwinsImpl.addWithResponseAsync(java.lang.String,java.lang.Object,com.azure.core.util.Context)
  id: addWithResponseAsync(java.lang.String,java.lang.Object,com.azure.core.util.Context)
  artifact: com.azure:azure-digitaltwins-core:1.0.0-beta.1
  parent: com.azure.digitaltwins.core.implementation.DigitalTwinsImpl
  langs:
  - java
  name: addWithResponseAsync(String id, Object twin, Context context)
  nameWithType: DigitalTwinsImpl.addWithResponseAsync(String id, Object twin, Context context)
  fullName: com.azure.digitaltwins.core.implementation.DigitalTwinsImpl.addWithResponseAsync(String id, Object twin, Context context)
  overload: com.azure.digitaltwins.core.implementation.DigitalTwinsImpl.addWithResponseAsync*
  type: Method
  package: com.azure.digitaltwins.core.implementation
  summary: 'Adds or replaces a digital twin. Status codes: 200 (OK): Success. 400 (Bad Request): The request is invalid. 412 (Precondition Failed): The model is decommissioned or the digital twin already exists (when using If-None-Match: \*).'
  syntax:
    content: public Mono<DigitalTwinsAddResponse> addWithResponseAsync(String id, Object twin, Context context)
    parameters:
    - id: id
      type: java.lang.String
      description: The id of the digital twin. The id is unique within the service and case sensitive.
    - id: twin
      type: java.lang.Object
      description: Any object.
    - id: context
      type: com.azure.core.util.Context
      description: The context to associate with this operation.
    return:
      type: reactor.core.publisher.Mono<com.azure.digitaltwins.core.implementation.models.DigitalTwinsAddResponse>
      description: any object.
- uid: com.azure.digitaltwins.core.implementation.DigitalTwinsImpl.deleteRelationshipWithResponseAsync(java.lang.String,java.lang.String,java.lang.String,com.azure.core.util.Context)
  id: deleteRelationshipWithResponseAsync(java.lang.String,java.lang.String,java.lang.String,com.azure.core.util.Context)
  artifact: com.azure:azure-digitaltwins-core:1.0.0-beta.1
  parent: com.azure.digitaltwins.core.implementation.DigitalTwinsImpl
  langs:
  - java
  name: deleteRelationshipWithResponseAsync(String id, String relationshipId, String ifMatch, Context context)
  nameWithType: DigitalTwinsImpl.deleteRelationshipWithResponseAsync(String id, String relationshipId, String ifMatch, Context context)
  fullName: com.azure.digitaltwins.core.implementation.DigitalTwinsImpl.deleteRelationshipWithResponseAsync(String id, String relationshipId, String ifMatch, Context context)
  overload: com.azure.digitaltwins.core.implementation.DigitalTwinsImpl.deleteRelationshipWithResponseAsync*
  type: Method
  package: com.azure.digitaltwins.core.implementation
  summary: 'Deletes a relationship between two digital twins. Status codes: 200 (OK): Success. 404 (Not Found): There is either no digital twin or relationship with the provided id.'
  syntax:
    content: public Mono<Response<Void>> deleteRelationshipWithResponseAsync(String id, String relationshipId, String ifMatch, Context context)
    parameters:
    - id: id
      type: java.lang.String
      description: The id of the digital twin. The id is unique within the service and case sensitive.
    - id: relationshipId
      type: java.lang.String
      description: The id of the relationship. The id is unique within the digital twin and case sensitive.
    - id: ifMatch
      type: java.lang.String
      description: >-
        Only perform the operation if the entity's etag matches one of the etags provided or * is
             provided.
    - id: context
      type: com.azure.core.util.Context
      description: The context to associate with this operation.
    return:
      type: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<java.lang.Void>>
      description: the completion.
- uid: com.azure.digitaltwins.core.implementation.DigitalTwinsImpl.deleteWithResponseAsync(java.lang.String,java.lang.String,com.azure.core.util.Context)
  id: deleteWithResponseAsync(java.lang.String,java.lang.String,com.azure.core.util.Context)
  artifact: com.azure:azure-digitaltwins-core:1.0.0-beta.1
  parent: com.azure.digitaltwins.core.implementation.DigitalTwinsImpl
  langs:
  - java
  name: deleteWithResponseAsync(String id, String ifMatch, Context context)
  nameWithType: DigitalTwinsImpl.deleteWithResponseAsync(String id, String ifMatch, Context context)
  fullName: com.azure.digitaltwins.core.implementation.DigitalTwinsImpl.deleteWithResponseAsync(String id, String ifMatch, Context context)
  overload: com.azure.digitaltwins.core.implementation.DigitalTwinsImpl.deleteWithResponseAsync*
  type: Method
  package: com.azure.digitaltwins.core.implementation
  summary: 'Deletes a digital twin. All relationships referencing the digital twin must already be deleted. Status codes: 200 (OK): Success. 400 (Bad Request): The request is invalid. 404 (Not Found): There is no digital twin with the provided id.'
  syntax:
    content: public Mono<Response<Void>> deleteWithResponseAsync(String id, String ifMatch, Context context)
    parameters:
    - id: id
      type: java.lang.String
      description: The id of the digital twin. The id is unique within the service and case sensitive.
    - id: ifMatch
      type: java.lang.String
      description: >-
        Only perform the operation if the entity's etag matches one of the etags provided or * is
             provided.
    - id: context
      type: com.azure.core.util.Context
      description: The context to associate with this operation.
    return:
      type: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<java.lang.Void>>
      description: the completion.
- uid: com.azure.digitaltwins.core.implementation.DigitalTwinsImpl.getByIdWithResponseAsync(java.lang.String,com.azure.core.util.Context)
  id: getByIdWithResponseAsync(java.lang.String,com.azure.core.util.Context)
  artifact: com.azure:azure-digitaltwins-core:1.0.0-beta.1
  parent: com.azure.digitaltwins.core.implementation.DigitalTwinsImpl
  langs:
  - java
  name: getByIdWithResponseAsync(String id, Context context)
  nameWithType: DigitalTwinsImpl.getByIdWithResponseAsync(String id, Context context)
  fullName: com.azure.digitaltwins.core.implementation.DigitalTwinsImpl.getByIdWithResponseAsync(String id, Context context)
  overload: com.azure.digitaltwins.core.implementation.DigitalTwinsImpl.getByIdWithResponseAsync*
  type: Method
  package: com.azure.digitaltwins.core.implementation
  summary: 'Retrieves a digital twin. Status codes: 200 (OK): Success. 404 (Not Found): There is no digital twin with the provided id.'
  syntax:
    content: public Mono<DigitalTwinsGetByIdResponse> getByIdWithResponseAsync(String id, Context context)
    parameters:
    - id: id
      type: java.lang.String
      description: The id of the digital twin. The id is unique within the service and case sensitive.
    - id: context
      type: com.azure.core.util.Context
      description: The context to associate with this operation.
    return:
      type: reactor.core.publisher.Mono<com.azure.digitaltwins.core.implementation.models.DigitalTwinsGetByIdResponse>
      description: any object.
- uid: com.azure.digitaltwins.core.implementation.DigitalTwinsImpl.getComponentWithResponseAsync(java.lang.String,java.lang.String,com.azure.core.util.Context)
  id: getComponentWithResponseAsync(java.lang.String,java.lang.String,com.azure.core.util.Context)
  artifact: com.azure:azure-digitaltwins-core:1.0.0-beta.1
  parent: com.azure.digitaltwins.core.implementation.DigitalTwinsImpl
  langs:
  - java
  name: getComponentWithResponseAsync(String id, String componentPath, Context context)
  nameWithType: DigitalTwinsImpl.getComponentWithResponseAsync(String id, String componentPath, Context context)
  fullName: com.azure.digitaltwins.core.implementation.DigitalTwinsImpl.getComponentWithResponseAsync(String id, String componentPath, Context context)
  overload: com.azure.digitaltwins.core.implementation.DigitalTwinsImpl.getComponentWithResponseAsync*
  type: Method
  package: com.azure.digitaltwins.core.implementation
  summary: 'Retrieves a component from a digital twin. Status codes: 200 (OK): Success. 404 (Not Found): There is either no digital twin with the provided id or the component path is invalid.'
  syntax:
    content: public Mono<DigitalTwinsGetComponentResponse> getComponentWithResponseAsync(String id, String componentPath, Context context)
    parameters:
    - id: id
      type: java.lang.String
      description: The id of the digital twin. The id is unique within the service and case sensitive.
    - id: componentPath
      type: java.lang.String
      description: The name of the DTDL component.
    - id: context
      type: com.azure.core.util.Context
      description: The context to associate with this operation.
    return:
      type: reactor.core.publisher.Mono<com.azure.digitaltwins.core.implementation.models.DigitalTwinsGetComponentResponse>
      description: any object.
- uid: com.azure.digitaltwins.core.implementation.DigitalTwinsImpl.getRelationshipByIdWithResponseAsync(java.lang.String,java.lang.String,com.azure.core.util.Context)
  id: getRelationshipByIdWithResponseAsync(java.lang.String,java.lang.String,com.azure.core.util.Context)
  artifact: com.azure:azure-digitaltwins-core:1.0.0-beta.1
  parent: com.azure.digitaltwins.core.implementation.DigitalTwinsImpl
  langs:
  - java
  name: getRelationshipByIdWithResponseAsync(String id, String relationshipId, Context context)
  nameWithType: DigitalTwinsImpl.getRelationshipByIdWithResponseAsync(String id, String relationshipId, Context context)
  fullName: com.azure.digitaltwins.core.implementation.DigitalTwinsImpl.getRelationshipByIdWithResponseAsync(String id, String relationshipId, Context context)
  overload: com.azure.digitaltwins.core.implementation.DigitalTwinsImpl.getRelationshipByIdWithResponseAsync*
  type: Method
  package: com.azure.digitaltwins.core.implementation
  summary: 'Retrieves a relationship between two digital twins. Status codes: 200 (OK): Success. 404 (Not Found): There is either no digital twin or relationship with the provided id.'
  syntax:
    content: public Mono<DigitalTwinsGetRelationshipByIdResponse> getRelationshipByIdWithResponseAsync(String id, String relationshipId, Context context)
    parameters:
    - id: id
      type: java.lang.String
      description: The id of the digital twin. The id is unique within the service and case sensitive.
    - id: relationshipId
      type: java.lang.String
      description: The id of the relationship. The id is unique within the digital twin and case sensitive.
    - id: context
      type: com.azure.core.util.Context
      description: The context to associate with this operation.
    return:
      type: reactor.core.publisher.Mono<com.azure.digitaltwins.core.implementation.models.DigitalTwinsGetRelationshipByIdResponse>
      description: any object.
- uid: com.azure.digitaltwins.core.implementation.DigitalTwinsImpl.listIncomingRelationshipsNextSinglePageAsync(java.lang.String,com.azure.core.util.Context)
  id: listIncomingRelationshipsNextSinglePageAsync(java.lang.String,com.azure.core.util.Context)
  artifact: com.azure:azure-digitaltwins-core:1.0.0-beta.1
  parent: com.azure.digitaltwins.core.implementation.DigitalTwinsImpl
  langs:
  - java
  name: listIncomingRelationshipsNextSinglePageAsync(String nextLink, Context context)
  nameWithType: DigitalTwinsImpl.listIncomingRelationshipsNextSinglePageAsync(String nextLink, Context context)
  fullName: com.azure.digitaltwins.core.implementation.DigitalTwinsImpl.listIncomingRelationshipsNextSinglePageAsync(String nextLink, Context context)
  overload: com.azure.digitaltwins.core.implementation.DigitalTwinsImpl.listIncomingRelationshipsNextSinglePageAsync*
  type: Method
  package: com.azure.digitaltwins.core.implementation
  summary: Get the next page of items.
  syntax:
    content: public Mono<PagedResponse<IncomingRelationship>> listIncomingRelationshipsNextSinglePageAsync(String nextLink, Context context)
    parameters:
    - id: nextLink
      type: java.lang.String
      description: The nextLink parameter.
    - id: context
      type: com.azure.core.util.Context
      description: The context to associate with this operation.
    return:
      type: reactor.core.publisher.Mono<com.azure.core.http.rest.PagedResponse<com.azure.digitaltwins.core.implementation.models.IncomingRelationship>>
      description: a collection of incoming relationships which relate digital twins together.
- uid: com.azure.digitaltwins.core.implementation.DigitalTwinsImpl.listIncomingRelationshipsSinglePageAsync(java.lang.String,com.azure.core.util.Context)
  id: listIncomingRelationshipsSinglePageAsync(java.lang.String,com.azure.core.util.Context)
  artifact: com.azure:azure-digitaltwins-core:1.0.0-beta.1
  parent: com.azure.digitaltwins.core.implementation.DigitalTwinsImpl
  langs:
  - java
  name: listIncomingRelationshipsSinglePageAsync(String id, Context context)
  nameWithType: DigitalTwinsImpl.listIncomingRelationshipsSinglePageAsync(String id, Context context)
  fullName: com.azure.digitaltwins.core.implementation.DigitalTwinsImpl.listIncomingRelationshipsSinglePageAsync(String id, Context context)
  overload: com.azure.digitaltwins.core.implementation.DigitalTwinsImpl.listIncomingRelationshipsSinglePageAsync*
  type: Method
  package: com.azure.digitaltwins.core.implementation
  summary: 'Retrieves all incoming relationship for a digital twin. Status codes: 200 (OK): Success. 400 (Bad Request): The request is invalid. 404 (Not Found): There is no digital twin with the provided id.'
  syntax:
    content: public Mono<PagedResponse<IncomingRelationship>> listIncomingRelationshipsSinglePageAsync(String id, Context context)
    parameters:
    - id: id
      type: java.lang.String
      description: The id of the digital twin. The id is unique within the service and case sensitive.
    - id: context
      type: com.azure.core.util.Context
      description: The context to associate with this operation.
    return:
      type: reactor.core.publisher.Mono<com.azure.core.http.rest.PagedResponse<com.azure.digitaltwins.core.implementation.models.IncomingRelationship>>
      description: a collection of incoming relationships which relate digital twins together.
- uid: com.azure.digitaltwins.core.implementation.DigitalTwinsImpl.listRelationshipsNextSinglePageAsync(java.lang.String,com.azure.core.util.Context)
  id: listRelationshipsNextSinglePageAsync(java.lang.String,com.azure.core.util.Context)
  artifact: com.azure:azure-digitaltwins-core:1.0.0-beta.1
  parent: com.azure.digitaltwins.core.implementation.DigitalTwinsImpl
  langs:
  - java
  name: listRelationshipsNextSinglePageAsync(String nextLink, Context context)
  nameWithType: DigitalTwinsImpl.listRelationshipsNextSinglePageAsync(String nextLink, Context context)
  fullName: com.azure.digitaltwins.core.implementation.DigitalTwinsImpl.listRelationshipsNextSinglePageAsync(String nextLink, Context context)
  overload: com.azure.digitaltwins.core.implementation.DigitalTwinsImpl.listRelationshipsNextSinglePageAsync*
  type: Method
  package: com.azure.digitaltwins.core.implementation
  summary: Get the next page of items.
  syntax:
    content: public Mono<PagedResponse<Object>> listRelationshipsNextSinglePageAsync(String nextLink, Context context)
    parameters:
    - id: nextLink
      type: java.lang.String
      description: The nextLink parameter.
    - id: context
      type: com.azure.core.util.Context
      description: The context to associate with this operation.
    return:
      type: reactor.core.publisher.Mono<com.azure.core.http.rest.PagedResponse<java.lang.Object>>
      description: a collection of relationships which relate digital twins together.
- uid: com.azure.digitaltwins.core.implementation.DigitalTwinsImpl.listRelationshipsSinglePageAsync(java.lang.String,java.lang.String,com.azure.core.util.Context)
  id: listRelationshipsSinglePageAsync(java.lang.String,java.lang.String,com.azure.core.util.Context)
  artifact: com.azure:azure-digitaltwins-core:1.0.0-beta.1
  parent: com.azure.digitaltwins.core.implementation.DigitalTwinsImpl
  langs:
  - java
  name: listRelationshipsSinglePageAsync(String id, String relationshipName, Context context)
  nameWithType: DigitalTwinsImpl.listRelationshipsSinglePageAsync(String id, String relationshipName, Context context)
  fullName: com.azure.digitaltwins.core.implementation.DigitalTwinsImpl.listRelationshipsSinglePageAsync(String id, String relationshipName, Context context)
  overload: com.azure.digitaltwins.core.implementation.DigitalTwinsImpl.listRelationshipsSinglePageAsync*
  type: Method
  package: com.azure.digitaltwins.core.implementation
  summary: 'Retrieves the relationships from a digital twin. Status codes: 200 (OK): Success. 400 (Bad Request): The request is invalid. 404 (Not Found): There is no digital twin with the provided id.'
  syntax:
    content: public Mono<PagedResponse<Object>> listRelationshipsSinglePageAsync(String id, String relationshipName, Context context)
    parameters:
    - id: id
      type: java.lang.String
      description: The id of the digital twin. The id is unique within the service and case sensitive.
    - id: relationshipName
      type: java.lang.String
      description: The name of the relationship.
    - id: context
      type: com.azure.core.util.Context
      description: The context to associate with this operation.
    return:
      type: reactor.core.publisher.Mono<com.azure.core.http.rest.PagedResponse<java.lang.Object>>
      description: a collection of relationships which relate digital twins together.
- uid: com.azure.digitaltwins.core.implementation.DigitalTwinsImpl.sendComponentTelemetryWithResponseAsync(java.lang.String,java.lang.String,java.lang.String,java.lang.Object,java.lang.String,com.azure.core.util.Context)
  id: sendComponentTelemetryWithResponseAsync(java.lang.String,java.lang.String,java.lang.String,java.lang.Object,java.lang.String,com.azure.core.util.Context)
  artifact: com.azure:azure-digitaltwins-core:1.0.0-beta.1
  parent: com.azure.digitaltwins.core.implementation.DigitalTwinsImpl
  langs:
  - java
  name: sendComponentTelemetryWithResponseAsync(String id, String componentPath, String dtId, Object telemetry, String dtTimestamp, Context context)
  nameWithType: DigitalTwinsImpl.sendComponentTelemetryWithResponseAsync(String id, String componentPath, String dtId, Object telemetry, String dtTimestamp, Context context)
  fullName: com.azure.digitaltwins.core.implementation.DigitalTwinsImpl.sendComponentTelemetryWithResponseAsync(String id, String componentPath, String dtId, Object telemetry, String dtTimestamp, Context context)
  overload: com.azure.digitaltwins.core.implementation.DigitalTwinsImpl.sendComponentTelemetryWithResponseAsync*
  type: Method
  package: com.azure.digitaltwins.core.implementation
  summary: 'Sends telemetry on behalf of a component in a digital twin. Status codes: 200 (OK): Success. 400 (Bad Request): The request is invalid. 404 (Not Found): There is either no digital twin with the provided id or the component path is invalid.'
  syntax:
    content: public Mono<Response<Void>> sendComponentTelemetryWithResponseAsync(String id, String componentPath, String dtId, Object telemetry, String dtTimestamp, Context context)
    parameters:
    - id: id
      type: java.lang.String
      description: The id of the digital twin. The id is unique within the service and case sensitive.
    - id: componentPath
      type: java.lang.String
      description: The name of the DTDL component.
    - id: dtId
      type: java.lang.String
      description: >-
        A unique message identifier (in the scope of the digital twin id) that is commonly used for
             de-duplicating messages.
    - id: telemetry
      type: java.lang.Object
      description: Any object.
    - id: dtTimestamp
      type: java.lang.String
      description: An RFC 3339 timestamp that identifies the time the telemetry was measured.
    - id: context
      type: com.azure.core.util.Context
      description: The context to associate with this operation.
    return:
      type: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<java.lang.Void>>
      description: the completion.
- uid: com.azure.digitaltwins.core.implementation.DigitalTwinsImpl.sendTelemetryWithResponseAsync(java.lang.String,java.lang.String,java.lang.Object,java.lang.String,com.azure.core.util.Context)
  id: sendTelemetryWithResponseAsync(java.lang.String,java.lang.String,java.lang.Object,java.lang.String,com.azure.core.util.Context)
  artifact: com.azure:azure-digitaltwins-core:1.0.0-beta.1
  parent: com.azure.digitaltwins.core.implementation.DigitalTwinsImpl
  langs:
  - java
  name: sendTelemetryWithResponseAsync(String id, String dtId, Object telemetry, String dtTimestamp, Context context)
  nameWithType: DigitalTwinsImpl.sendTelemetryWithResponseAsync(String id, String dtId, Object telemetry, String dtTimestamp, Context context)
  fullName: com.azure.digitaltwins.core.implementation.DigitalTwinsImpl.sendTelemetryWithResponseAsync(String id, String dtId, Object telemetry, String dtTimestamp, Context context)
  overload: com.azure.digitaltwins.core.implementation.DigitalTwinsImpl.sendTelemetryWithResponseAsync*
  type: Method
  package: com.azure.digitaltwins.core.implementation
  summary: 'Sends telemetry on behalf of a digital twin. Status codes: 200 (OK): Success. 400 (Bad Request): The request is invalid. 404 (Not Found): There is no digital twin with the provided id.'
  syntax:
    content: public Mono<Response<Void>> sendTelemetryWithResponseAsync(String id, String dtId, Object telemetry, String dtTimestamp, Context context)
    parameters:
    - id: id
      type: java.lang.String
      description: The id of the digital twin. The id is unique within the service and case sensitive.
    - id: dtId
      type: java.lang.String
      description: >-
        A unique message identifier (in the scope of the digital twin id) that is commonly used for
             de-duplicating messages.
    - id: telemetry
      type: java.lang.Object
      description: Any object.
    - id: dtTimestamp
      type: java.lang.String
      description: An RFC 3339 timestamp that identifies the time the telemetry was measured.
    - id: context
      type: com.azure.core.util.Context
      description: The context to associate with this operation.
    return:
      type: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<java.lang.Void>>
      description: the completion.
- uid: com.azure.digitaltwins.core.implementation.DigitalTwinsImpl.updateComponentWithResponseAsync(java.lang.String,java.lang.String,java.lang.String,java.util.List<java.lang.Object>,com.azure.core.util.Context)
  id: updateComponentWithResponseAsync(java.lang.String,java.lang.String,java.lang.String,java.util.List<java.lang.Object>,com.azure.core.util.Context)
  artifact: com.azure:azure-digitaltwins-core:1.0.0-beta.1
  parent: com.azure.digitaltwins.core.implementation.DigitalTwinsImpl
  langs:
  - java
  name: updateComponentWithResponseAsync(String id, String componentPath, String ifMatch, List<Object> patchDocument, Context context)
  nameWithType: DigitalTwinsImpl.updateComponentWithResponseAsync(String id, String componentPath, String ifMatch, List<Object> patchDocument, Context context)
  fullName: com.azure.digitaltwins.core.implementation.DigitalTwinsImpl.updateComponentWithResponseAsync(String id, String componentPath, String ifMatch, List<Object> patchDocument, Context context)
  overload: com.azure.digitaltwins.core.implementation.DigitalTwinsImpl.updateComponentWithResponseAsync*
  type: Method
  package: com.azure.digitaltwins.core.implementation
  summary: 'Updates a component on a digital twin. Status codes: 200 (OK): Success. 400 (Bad Request): The request is invalid. 404 (Not Found): There is either no digital twin with the provided id or the component path is invalid.'
  syntax:
    content: public Mono<DigitalTwinsUpdateComponentResponse> updateComponentWithResponseAsync(String id, String componentPath, String ifMatch, List<Object> patchDocument, Context context)
    parameters:
    - id: id
      type: java.lang.String
      description: The id of the digital twin. The id is unique within the service and case sensitive.
    - id: componentPath
      type: java.lang.String
      description: The name of the DTDL component.
    - id: ifMatch
      type: java.lang.String
      description: >-
        Only perform the operation if the entity's etag matches one of the etags provided or * is
             provided.
    - id: patchDocument
      type: java.util.List<java.lang.Object>
      description: Array of any.
    - id: context
      type: com.azure.core.util.Context
      description: The context to associate with this operation.
    return:
      type: reactor.core.publisher.Mono<com.azure.digitaltwins.core.implementation.models.DigitalTwinsUpdateComponentResponse>
      description: the completion.
- uid: com.azure.digitaltwins.core.implementation.DigitalTwinsImpl.updateRelationshipWithResponseAsync(java.lang.String,java.lang.String,java.lang.String,java.util.List<java.lang.Object>,com.azure.core.util.Context)
  id: updateRelationshipWithResponseAsync(java.lang.String,java.lang.String,java.lang.String,java.util.List<java.lang.Object>,com.azure.core.util.Context)
  artifact: com.azure:azure-digitaltwins-core:1.0.0-beta.1
  parent: com.azure.digitaltwins.core.implementation.DigitalTwinsImpl
  langs:
  - java
  name: updateRelationshipWithResponseAsync(String id, String relationshipId, String ifMatch, List<Object> patchDocument, Context context)
  nameWithType: DigitalTwinsImpl.updateRelationshipWithResponseAsync(String id, String relationshipId, String ifMatch, List<Object> patchDocument, Context context)
  fullName: com.azure.digitaltwins.core.implementation.DigitalTwinsImpl.updateRelationshipWithResponseAsync(String id, String relationshipId, String ifMatch, List<Object> patchDocument, Context context)
  overload: com.azure.digitaltwins.core.implementation.DigitalTwinsImpl.updateRelationshipWithResponseAsync*
  type: Method
  package: com.azure.digitaltwins.core.implementation
  summary: 'Updates the properties on a relationship between two digital twins. Status codes: 200 (OK): Success. 400 (Bad Request): The request is invalid. 404 (Not Found): There is either no digital twin or relationship with the provided id.'
  syntax:
    content: public Mono<DigitalTwinsUpdateRelationshipResponse> updateRelationshipWithResponseAsync(String id, String relationshipId, String ifMatch, List<Object> patchDocument, Context context)
    parameters:
    - id: id
      type: java.lang.String
      description: The id of the digital twin. The id is unique within the service and case sensitive.
    - id: relationshipId
      type: java.lang.String
      description: The id of the relationship. The id is unique within the digital twin and case sensitive.
    - id: ifMatch
      type: java.lang.String
      description: >-
        Only perform the operation if the entity's etag matches one of the etags provided or * is
             provided.
    - id: patchDocument
      type: java.util.List<java.lang.Object>
      description: Array of any.
    - id: context
      type: com.azure.core.util.Context
      description: The context to associate with this operation.
    return:
      type: reactor.core.publisher.Mono<com.azure.digitaltwins.core.implementation.models.DigitalTwinsUpdateRelationshipResponse>
      description: the completion.
- uid: com.azure.digitaltwins.core.implementation.DigitalTwinsImpl.updateWithResponseAsync(java.lang.String,java.util.List<java.lang.Object>,java.lang.String,com.azure.core.util.Context)
  id: updateWithResponseAsync(java.lang.String,java.util.List<java.lang.Object>,java.lang.String,com.azure.core.util.Context)
  artifact: com.azure:azure-digitaltwins-core:1.0.0-beta.1
  parent: com.azure.digitaltwins.core.implementation.DigitalTwinsImpl
  langs:
  - java
  name: updateWithResponseAsync(String id, List<Object> patchDocument, String ifMatch, Context context)
  nameWithType: DigitalTwinsImpl.updateWithResponseAsync(String id, List<Object> patchDocument, String ifMatch, Context context)
  fullName: com.azure.digitaltwins.core.implementation.DigitalTwinsImpl.updateWithResponseAsync(String id, List<Object> patchDocument, String ifMatch, Context context)
  overload: com.azure.digitaltwins.core.implementation.DigitalTwinsImpl.updateWithResponseAsync*
  type: Method
  package: com.azure.digitaltwins.core.implementation
  summary: 'Updates a digital twin. Status codes: 200 (OK): Success. 400 (Bad Request): The request is invalid. 404 (Not Found): There is no digital twin with the provided id.'
  syntax:
    content: public Mono<DigitalTwinsUpdateResponse> updateWithResponseAsync(String id, List<Object> patchDocument, String ifMatch, Context context)
    parameters:
    - id: id
      type: java.lang.String
      description: The id of the digital twin. The id is unique within the service and case sensitive.
    - id: patchDocument
      type: java.util.List<java.lang.Object>
      description: Array of any.
    - id: ifMatch
      type: java.lang.String
      description: >-
        Only perform the operation if the entity's etag matches one of the etags provided or * is
             provided.
    - id: context
      type: com.azure.core.util.Context
      description: The context to associate with this operation.
    return:
      type: reactor.core.publisher.Mono<com.azure.digitaltwins.core.implementation.models.DigitalTwinsUpdateResponse>
      description: the completion.
references:
- uid: com.azure.digitaltwins.core.implementation.AzureDigitalTwinsAPIImpl
  name: AzureDigitalTwinsAPIImpl
  nameWithType: AzureDigitalTwinsAPIImpl
  fullName: com.azure.digitaltwins.core.implementation.AzureDigitalTwinsAPIImpl
- uid: com.azure.digitaltwins.core.implementation.DigitalTwinsImpl.DigitalTwinsImpl*
  name: DigitalTwinsImpl
  nameWithType: DigitalTwinsImpl.DigitalTwinsImpl
  fullName: com.azure.digitaltwins.core.implementation.DigitalTwinsImpl.DigitalTwinsImpl
  package: com.azure.digitaltwins.core.implementation
- uid: java.lang.String
  spec.java:
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
- uid: com.azure.core.util.Context
  spec.java:
  - uid: com.azure.core.util.Context
    name: Context
    fullName: com.azure.core.util.Context
- uid: reactor.core.publisher.Mono<com.azure.digitaltwins.core.implementation.models.DigitalTwinsGetByIdResponse>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: com.azure.digitaltwins.core.implementation.models.DigitalTwinsGetByIdResponse
    name: DigitalTwinsGetByIdResponse
    fullName: com.azure.digitaltwins.core.implementation.models.DigitalTwinsGetByIdResponse
  - name: '>'
    fullName: '>'
- uid: com.azure.digitaltwins.core.implementation.DigitalTwinsImpl.getByIdWithResponseAsync*
  name: getByIdWithResponseAsync
  nameWithType: DigitalTwinsImpl.getByIdWithResponseAsync
  fullName: com.azure.digitaltwins.core.implementation.DigitalTwinsImpl.getByIdWithResponseAsync
  package: com.azure.digitaltwins.core.implementation
- uid: java.lang.Object
  spec.java:
  - uid: java.lang.Object
    name: Object
    fullName: java.lang.Object
- uid: reactor.core.publisher.Mono<com.azure.digitaltwins.core.implementation.models.DigitalTwinsAddResponse>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: com.azure.digitaltwins.core.implementation.models.DigitalTwinsAddResponse
    name: DigitalTwinsAddResponse
    fullName: com.azure.digitaltwins.core.implementation.models.DigitalTwinsAddResponse
  - name: '>'
    fullName: '>'
- uid: com.azure.digitaltwins.core.implementation.DigitalTwinsImpl.addWithResponseAsync*
  name: addWithResponseAsync
  nameWithType: DigitalTwinsImpl.addWithResponseAsync
  fullName: com.azure.digitaltwins.core.implementation.DigitalTwinsImpl.addWithResponseAsync
  package: com.azure.digitaltwins.core.implementation
- uid: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<java.lang.Void>>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: com.azure.core.http.rest.Response
    name: Response
    fullName: com.azure.core.http.rest.Response
  - name: <
    fullName: <
  - uid: java.lang.Void
    name: Void
    fullName: java.lang.Void
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
- uid: com.azure.digitaltwins.core.implementation.DigitalTwinsImpl.deleteWithResponseAsync*
  name: deleteWithResponseAsync
  nameWithType: DigitalTwinsImpl.deleteWithResponseAsync
  fullName: com.azure.digitaltwins.core.implementation.DigitalTwinsImpl.deleteWithResponseAsync
  package: com.azure.digitaltwins.core.implementation
- uid: java.util.List<java.lang.Object>
  spec.java:
  - uid: java.util.List
    name: List
    fullName: java.util.List
  - name: <
    fullName: <
  - uid: java.lang.Object
    name: Object
    fullName: java.lang.Object
  - name: '>'
    fullName: '>'
- uid: reactor.core.publisher.Mono<com.azure.digitaltwins.core.implementation.models.DigitalTwinsUpdateResponse>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: com.azure.digitaltwins.core.implementation.models.DigitalTwinsUpdateResponse
    name: DigitalTwinsUpdateResponse
    fullName: com.azure.digitaltwins.core.implementation.models.DigitalTwinsUpdateResponse
  - name: '>'
    fullName: '>'
- uid: com.azure.digitaltwins.core.implementation.DigitalTwinsImpl.updateWithResponseAsync*
  name: updateWithResponseAsync
  nameWithType: DigitalTwinsImpl.updateWithResponseAsync
  fullName: com.azure.digitaltwins.core.implementation.DigitalTwinsImpl.updateWithResponseAsync
  package: com.azure.digitaltwins.core.implementation
- uid: reactor.core.publisher.Mono<com.azure.digitaltwins.core.implementation.models.DigitalTwinsGetRelationshipByIdResponse>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: com.azure.digitaltwins.core.implementation.models.DigitalTwinsGetRelationshipByIdResponse
    name: DigitalTwinsGetRelationshipByIdResponse
    fullName: com.azure.digitaltwins.core.implementation.models.DigitalTwinsGetRelationshipByIdResponse
  - name: '>'
    fullName: '>'
- uid: com.azure.digitaltwins.core.implementation.DigitalTwinsImpl.getRelationshipByIdWithResponseAsync*
  name: getRelationshipByIdWithResponseAsync
  nameWithType: DigitalTwinsImpl.getRelationshipByIdWithResponseAsync
  fullName: com.azure.digitaltwins.core.implementation.DigitalTwinsImpl.getRelationshipByIdWithResponseAsync
  package: com.azure.digitaltwins.core.implementation
- uid: reactor.core.publisher.Mono<com.azure.digitaltwins.core.implementation.models.DigitalTwinsAddRelationshipResponse>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: com.azure.digitaltwins.core.implementation.models.DigitalTwinsAddRelationshipResponse
    name: DigitalTwinsAddRelationshipResponse
    fullName: com.azure.digitaltwins.core.implementation.models.DigitalTwinsAddRelationshipResponse
  - name: '>'
    fullName: '>'
- uid: com.azure.digitaltwins.core.implementation.DigitalTwinsImpl.addRelationshipWithResponseAsync*
  name: addRelationshipWithResponseAsync
  nameWithType: DigitalTwinsImpl.addRelationshipWithResponseAsync
  fullName: com.azure.digitaltwins.core.implementation.DigitalTwinsImpl.addRelationshipWithResponseAsync
  package: com.azure.digitaltwins.core.implementation
- uid: com.azure.digitaltwins.core.implementation.DigitalTwinsImpl.deleteRelationshipWithResponseAsync*
  name: deleteRelationshipWithResponseAsync
  nameWithType: DigitalTwinsImpl.deleteRelationshipWithResponseAsync
  fullName: com.azure.digitaltwins.core.implementation.DigitalTwinsImpl.deleteRelationshipWithResponseAsync
  package: com.azure.digitaltwins.core.implementation
- uid: reactor.core.publisher.Mono<com.azure.digitaltwins.core.implementation.models.DigitalTwinsUpdateRelationshipResponse>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: com.azure.digitaltwins.core.implementation.models.DigitalTwinsUpdateRelationshipResponse
    name: DigitalTwinsUpdateRelationshipResponse
    fullName: com.azure.digitaltwins.core.implementation.models.DigitalTwinsUpdateRelationshipResponse
  - name: '>'
    fullName: '>'
- uid: com.azure.digitaltwins.core.implementation.DigitalTwinsImpl.updateRelationshipWithResponseAsync*
  name: updateRelationshipWithResponseAsync
  nameWithType: DigitalTwinsImpl.updateRelationshipWithResponseAsync
  fullName: com.azure.digitaltwins.core.implementation.DigitalTwinsImpl.updateRelationshipWithResponseAsync
  package: com.azure.digitaltwins.core.implementation
- uid: reactor.core.publisher.Mono<com.azure.core.http.rest.PagedResponse<java.lang.Object>>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: com.azure.core.http.rest.PagedResponse
    name: PagedResponse
    fullName: com.azure.core.http.rest.PagedResponse
  - name: <
    fullName: <
  - uid: java.lang.Object
    name: Object
    fullName: java.lang.Object
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
- uid: com.azure.digitaltwins.core.implementation.DigitalTwinsImpl.listRelationshipsSinglePageAsync*
  name: listRelationshipsSinglePageAsync
  nameWithType: DigitalTwinsImpl.listRelationshipsSinglePageAsync
  fullName: com.azure.digitaltwins.core.implementation.DigitalTwinsImpl.listRelationshipsSinglePageAsync
  package: com.azure.digitaltwins.core.implementation
- uid: reactor.core.publisher.Mono<com.azure.core.http.rest.PagedResponse<com.azure.digitaltwins.core.implementation.models.IncomingRelationship>>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: com.azure.core.http.rest.PagedResponse
    name: PagedResponse
    fullName: com.azure.core.http.rest.PagedResponse
  - name: <
    fullName: <
  - uid: com.azure.digitaltwins.core.implementation.models.IncomingRelationship
    name: IncomingRelationship
    fullName: com.azure.digitaltwins.core.implementation.models.IncomingRelationship
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
- uid: com.azure.digitaltwins.core.implementation.DigitalTwinsImpl.listIncomingRelationshipsSinglePageAsync*
  name: listIncomingRelationshipsSinglePageAsync
  nameWithType: DigitalTwinsImpl.listIncomingRelationshipsSinglePageAsync
  fullName: com.azure.digitaltwins.core.implementation.DigitalTwinsImpl.listIncomingRelationshipsSinglePageAsync
  package: com.azure.digitaltwins.core.implementation
- uid: com.azure.digitaltwins.core.implementation.DigitalTwinsImpl.sendTelemetryWithResponseAsync*
  name: sendTelemetryWithResponseAsync
  nameWithType: DigitalTwinsImpl.sendTelemetryWithResponseAsync
  fullName: com.azure.digitaltwins.core.implementation.DigitalTwinsImpl.sendTelemetryWithResponseAsync
  package: com.azure.digitaltwins.core.implementation
- uid: com.azure.digitaltwins.core.implementation.DigitalTwinsImpl.sendComponentTelemetryWithResponseAsync*
  name: sendComponentTelemetryWithResponseAsync
  nameWithType: DigitalTwinsImpl.sendComponentTelemetryWithResponseAsync
  fullName: com.azure.digitaltwins.core.implementation.DigitalTwinsImpl.sendComponentTelemetryWithResponseAsync
  package: com.azure.digitaltwins.core.implementation
- uid: reactor.core.publisher.Mono<com.azure.digitaltwins.core.implementation.models.DigitalTwinsGetComponentResponse>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: com.azure.digitaltwins.core.implementation.models.DigitalTwinsGetComponentResponse
    name: DigitalTwinsGetComponentResponse
    fullName: com.azure.digitaltwins.core.implementation.models.DigitalTwinsGetComponentResponse
  - name: '>'
    fullName: '>'
- uid: com.azure.digitaltwins.core.implementation.DigitalTwinsImpl.getComponentWithResponseAsync*
  name: getComponentWithResponseAsync
  nameWithType: DigitalTwinsImpl.getComponentWithResponseAsync
  fullName: com.azure.digitaltwins.core.implementation.DigitalTwinsImpl.getComponentWithResponseAsync
  package: com.azure.digitaltwins.core.implementation
- uid: reactor.core.publisher.Mono<com.azure.digitaltwins.core.implementation.models.DigitalTwinsUpdateComponentResponse>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: com.azure.digitaltwins.core.implementation.models.DigitalTwinsUpdateComponentResponse
    name: DigitalTwinsUpdateComponentResponse
    fullName: com.azure.digitaltwins.core.implementation.models.DigitalTwinsUpdateComponentResponse
  - name: '>'
    fullName: '>'
- uid: com.azure.digitaltwins.core.implementation.DigitalTwinsImpl.updateComponentWithResponseAsync*
  name: updateComponentWithResponseAsync
  nameWithType: DigitalTwinsImpl.updateComponentWithResponseAsync
  fullName: com.azure.digitaltwins.core.implementation.DigitalTwinsImpl.updateComponentWithResponseAsync
  package: com.azure.digitaltwins.core.implementation
- uid: com.azure.digitaltwins.core.implementation.DigitalTwinsImpl.listRelationshipsNextSinglePageAsync*
  name: listRelationshipsNextSinglePageAsync
  nameWithType: DigitalTwinsImpl.listRelationshipsNextSinglePageAsync
  fullName: com.azure.digitaltwins.core.implementation.DigitalTwinsImpl.listRelationshipsNextSinglePageAsync
  package: com.azure.digitaltwins.core.implementation
- uid: com.azure.digitaltwins.core.implementation.DigitalTwinsImpl.listIncomingRelationshipsNextSinglePageAsync*
  name: listIncomingRelationshipsNextSinglePageAsync
  nameWithType: DigitalTwinsImpl.listIncomingRelationshipsNextSinglePageAsync
  fullName: com.azure.digitaltwins.core.implementation.DigitalTwinsImpl.listIncomingRelationshipsNextSinglePageAsync
  package: com.azure.digitaltwins.core.implementation
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: java.lang.Object.finalize()
  name: Object.finalize()
  nameWithType: Object.finalize()
  fullName: java.lang.Object.finalize()
- uid: java.lang.Object.clone()
  name: Object.clone()
  nameWithType: Object.clone()
  fullName: java.lang.Object.clone()
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: java.lang.Object.equals(java.lang.Object)
  name: Object.equals(Object)
  nameWithType: Object.equals(Object)
  fullName: java.lang.Object.equals(java.lang.Object)
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.lang.Object.hashCode()
  name: Object.hashCode()
  nameWithType: Object.hashCode()
  fullName: java.lang.Object.hashCode()
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: java.lang.Object.toString()
  name: Object.toString()
  nameWithType: Object.toString()
  fullName: java.lang.Object.toString()
- uid: com.azure.digitaltwins.core.implementation.models.DigitalTwinsGetByIdResponse
  name: DigitalTwinsGetByIdResponse
  nameWithType: DigitalTwinsGetByIdResponse
  fullName: com.azure.digitaltwins.core.implementation.models.DigitalTwinsGetByIdResponse
- uid: reactor.core.publisher.Mono
  name: Mono
  nameWithType: Mono
  fullName: reactor.core.publisher.Mono
- uid: com.azure.digitaltwins.core.implementation.models.DigitalTwinsAddResponse
  name: DigitalTwinsAddResponse
  nameWithType: DigitalTwinsAddResponse
  fullName: com.azure.digitaltwins.core.implementation.models.DigitalTwinsAddResponse
- uid: java.lang.Void
  name: Void
  nameWithType: Void
  fullName: java.lang.Void
- uid: com.azure.core.http.rest.Response
  name: Response
  nameWithType: Response
  fullName: com.azure.core.http.rest.Response
- uid: java.util.List
  name: List
  nameWithType: List
  fullName: java.util.List
- uid: com.azure.digitaltwins.core.implementation.models.DigitalTwinsUpdateResponse
  name: DigitalTwinsUpdateResponse
  nameWithType: DigitalTwinsUpdateResponse
  fullName: com.azure.digitaltwins.core.implementation.models.DigitalTwinsUpdateResponse
- uid: com.azure.digitaltwins.core.implementation.models.DigitalTwinsGetRelationshipByIdResponse
  name: DigitalTwinsGetRelationshipByIdResponse
  nameWithType: DigitalTwinsGetRelationshipByIdResponse
  fullName: com.azure.digitaltwins.core.implementation.models.DigitalTwinsGetRelationshipByIdResponse
- uid: com.azure.digitaltwins.core.implementation.models.DigitalTwinsAddRelationshipResponse
  name: DigitalTwinsAddRelationshipResponse
  nameWithType: DigitalTwinsAddRelationshipResponse
  fullName: com.azure.digitaltwins.core.implementation.models.DigitalTwinsAddRelationshipResponse
- uid: com.azure.digitaltwins.core.implementation.models.DigitalTwinsUpdateRelationshipResponse
  name: DigitalTwinsUpdateRelationshipResponse
  nameWithType: DigitalTwinsUpdateRelationshipResponse
  fullName: com.azure.digitaltwins.core.implementation.models.DigitalTwinsUpdateRelationshipResponse
- uid: com.azure.core.http.rest.PagedResponse
  name: PagedResponse
  nameWithType: PagedResponse
  fullName: com.azure.core.http.rest.PagedResponse
- uid: com.azure.digitaltwins.core.implementation.models.IncomingRelationship
  name: IncomingRelationship
  nameWithType: IncomingRelationship
  fullName: com.azure.digitaltwins.core.implementation.models.IncomingRelationship
- uid: com.azure.digitaltwins.core.implementation.models.DigitalTwinsGetComponentResponse
  name: DigitalTwinsGetComponentResponse
  nameWithType: DigitalTwinsGetComponentResponse
  fullName: com.azure.digitaltwins.core.implementation.models.DigitalTwinsGetComponentResponse
- uid: com.azure.digitaltwins.core.implementation.models.DigitalTwinsUpdateComponentResponse
  name: DigitalTwinsUpdateComponentResponse
  nameWithType: DigitalTwinsUpdateComponentResponse
  fullName: com.azure.digitaltwins.core.implementation.models.DigitalTwinsUpdateComponentResponse
