### YamlMime:JavaEnum
uid: "com.fasterxml.jackson.core.StreamReadCapability"
fullName: "com.fasterxml.jackson.core.StreamReadCapability"
name: "StreamReadCapability"
nameWithType: "StreamReadCapability"
summary: "Set of on/off capabilities that a <xref uid=\"com.fasterxml.jackson.core.JsonParser\" data-throw-if-not-resolved=\"false\" data-raw-source=\"JsonParser\"></xref> for given format (or in case of buffering, original format) has. Used in some cases to adjust aspects of things like content conversions, coercions and validation by format-agnostic functionality. Specific or expected usage documented by individual capability entry Javadocs."
inheritances:
- "<xref href=\"java.lang.Object\" data-throw-if-not-resolved=\"False\" />"
- "<xref href=\"java.lang.Enum\" data-throw-if-not-resolved=\"False\" />"
inheritedMembers:
- "java.lang.Enum.<T>valueOf(java.lang.Class<T>,java.lang.String)"
- "java.lang.Enum.clone()"
- "java.lang.Enum.compareTo(E)"
- "java.lang.Enum.equals(java.lang.Object)"
- "java.lang.Enum.finalize()"
- "java.lang.Enum.getDeclaringClass()"
- "java.lang.Enum.hashCode()"
- "java.lang.Enum.name()"
- "java.lang.Enum.ordinal()"
- "java.lang.Enum.toString()"
- "java.lang.Object.getClass()"
- "java.lang.Object.notify()"
- "java.lang.Object.notifyAll()"
- "java.lang.Object.wait()"
- "java.lang.Object.wait(long)"
- "java.lang.Object.wait(long,int)"
syntax: "public enum StreamReadCapability extends Enum<StreamReadCapability> implements JacksonFeature"
fields:
- uid: "com.fasterxml.jackson.core.StreamReadCapability.DUPLICATE_PROPERTIES"
  fullName: "com.fasterxml.jackson.core.StreamReadCapability.DUPLICATE_PROPERTIES"
  name: "DUPLICATE_PROPERTIES"
  nameWithType: "StreamReadCapability.DUPLICATE_PROPERTIES"
  summary: "Capability that indicates that data format can expose multiple properties with same name (\"duplicates\") within one Object context. This is usually not enabled, except for formats like `xml` that have content model that does not map cleanly to JSON-based token stream.\n\nCapability may be used for allowing secondary mapping of such duplicates in case of using Tree Model (see <xref uid=\"com.fasterxml.jackson.core.TreeNode\" data-throw-if-not-resolved=\"false\" data-raw-source=\"TreeNode\"></xref>), or \"untyped\" databinding (mapping content as generic <xref uid=\"java.lang.Object\" data-throw-if-not-resolved=\"false\" data-raw-source=\"java.lang.Object\"></xref>).\n\nCapability is currently only enabled for XML format backend."
- uid: "com.fasterxml.jackson.core.StreamReadCapability.SCALARS_AS_OBJECTS"
  fullName: "com.fasterxml.jackson.core.StreamReadCapability.SCALARS_AS_OBJECTS"
  name: "SCALARS_AS_OBJECTS"
  nameWithType: "StreamReadCapability.SCALARS_AS_OBJECTS"
  summary: "Capability that indicates that data format may in some cases expose Scalar values (whether typed or untyped) as Object values. There are additional access methods at databind level: this capability may be used to decide whether to attempt to use such methods especially in potentially ambiguous cases.\n\nCapability is currently only enabled for XML format backend."
- uid: "com.fasterxml.jackson.core.StreamReadCapability.UNTYPED_SCALARS"
  fullName: "com.fasterxml.jackson.core.StreamReadCapability.UNTYPED_SCALARS"
  name: "UNTYPED_SCALARS"
  nameWithType: "StreamReadCapability.UNTYPED_SCALARS"
  summary: "Capability that indicates that data format only exposed \"untyped\" scalars: that is, instead of Number, Boolean and String types all scalar values are reported as text (<xref uid=\"com.fasterxml.jackson.core.JsonToken.VALUE_STRING\" data-throw-if-not-resolved=\"false\" data-raw-source=\"JsonToken#VALUE_STRING\"></xref>) unless some sort of coercion is implied by caller.\n\nThis capability is true for many textual formats like CSV, Properties and XML."
methods:
- uid: "com.fasterxml.jackson.core.StreamReadCapability.enabledByDefault()"
  fullName: "com.fasterxml.jackson.core.StreamReadCapability.enabledByDefault()"
  name: "enabledByDefault()"
  nameWithType: "StreamReadCapability.enabledByDefault()"
  summary: "Accessor for checking whether this feature is enabled by default."
  syntax: "public boolean enabledByDefault()"
  returns:
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.fasterxml.jackson.core.StreamReadCapability.enabledIn(int)"
  fullName: "com.fasterxml.jackson.core.StreamReadCapability.enabledIn(int flags)"
  name: "enabledIn(int flags)"
  nameWithType: "StreamReadCapability.enabledIn(int flags)"
  summary: "Convenience method for checking whether feature is enabled in given bitmask."
  parameters:
  - name: "flags"
    type: "<xref href=\"int?alt=int&text=int\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public boolean enabledIn(int flags)"
  returns:
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.fasterxml.jackson.core.StreamReadCapability.getMask()"
  fullName: "com.fasterxml.jackson.core.StreamReadCapability.getMask()"
  name: "getMask()"
  nameWithType: "StreamReadCapability.getMask()"
  summary: "Returns bit mask for this feature instance; must be a single bit, that is of form `1 << N`."
  syntax: "public int getMask()"
  returns:
    type: "<xref href=\"int?alt=int&text=int\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.fasterxml.jackson.core.StreamReadCapability.valueOf(java.lang.String)"
  fullName: "com.fasterxml.jackson.core.StreamReadCapability.valueOf(String name)"
  name: "valueOf(String name)"
  nameWithType: "StreamReadCapability.valueOf(String name)"
  parameters:
  - name: "name"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public static StreamReadCapability valueOf(String name)"
  returns:
    type: "<xref href=\"com.fasterxml.jackson.core.StreamReadCapability?alt=com.fasterxml.jackson.core.StreamReadCapability&text=StreamReadCapability\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.fasterxml.jackson.core.StreamReadCapability.values()"
  fullName: "com.fasterxml.jackson.core.StreamReadCapability.values()"
  name: "values()"
  nameWithType: "StreamReadCapability.values()"
  syntax: "public static StreamReadCapability[] values()"
  returns:
    type: "<xref href=\"com.fasterxml.jackson.core.StreamReadCapability?alt=com.fasterxml.jackson.core.StreamReadCapability&text=StreamReadCapability\" data-throw-if-not-resolved=\"False\" />[]"
implements:
- "<xref href=\"com.fasterxml.jackson.core.util.JacksonFeature?alt=com.fasterxml.jackson.core.util.JacksonFeature&text=JacksonFeature\" data-throw-if-not-resolved=\"False\" />"
metadata: {}
package: "com.fasterxml.jackson.core"
artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.5
