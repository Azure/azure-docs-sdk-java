### YamlMime:JavaMember
uid: "com.azure.cosmos.implementation.guava25.collect.Maps.newLinkedHashMapWithExpectedSize*"
fullName: "com.azure.cosmos.implementation.guava25.collect.Maps.<K,V>newLinkedHashMapWithExpectedSize"
name: "<K,V>newLinkedHashMapWithExpectedSize"
nameWithType: "Maps.<K,V>newLinkedHashMapWithExpectedSize"
members:
- uid: "com.azure.cosmos.implementation.guava25.collect.Maps.<K,V>newLinkedHashMapWithExpectedSize(int)"
  fullName: "com.azure.cosmos.implementation.guava25.collect.Maps.<K,V>newLinkedHashMapWithExpectedSize(int expectedSize)"
  name: "<K,V>newLinkedHashMapWithExpectedSize(int expectedSize)"
  nameWithType: "Maps.<K,V>newLinkedHashMapWithExpectedSize(int expectedSize)"
  summary: "Creates a `LinkedHashMap` instance, with a high enough \"initial capacity\" that it *should* hold `expectedSize` elements without growth. This behavior cannot be broadly guaranteed, but it is observed to be true for OpenJDK 1.7. It also can't be guaranteed that the method isn't inadvertently *oversizing* the returned map."
  parameters:
  - description: "the number of entries you expect to add to the returned map"
    name: "expectedSize"
    type: "<xref href=\"int?alt=int&text=int\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public static LinkedHashMap<K,V> <K,V>newLinkedHashMapWithExpectedSize(int expectedSize)"
  returns:
    description: "a new, empty <code>LinkedHashMap</code> with enough capacity to hold <code>expectedSize</code>\n     entries without resizing"
    type: "<xref href=\"java.util.LinkedHashMap?alt=java.util.LinkedHashMap&text=LinkedHashMap\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"K?alt=K&text=K\" data-throw-if-not-resolved=\"False\" />,<xref href=\"V?alt=V&text=V\" data-throw-if-not-resolved=\"False\" />&gt;"
type: "method"
metadata: {}
package: "com.azure.cosmos.implementation.guava25.collect"
artifact: com.azure:azure-cosmos:4.4.0-beta.1
