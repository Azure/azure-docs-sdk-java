### YamlMime:JavaType
uid: "com.azure.cosmos.implementation.guava25.base.Preconditions"
fullName: "com.azure.cosmos.implementation.guava25.base.Preconditions"
name: "Preconditions"
nameWithType: "Preconditions"
summary: "Static convenience methods that help a method or constructor check whether it was invoked correctly (that is, whether its *preconditions* were met).\n\nIf the precondition is not met, the `Preconditions` method throws an unchecked exception of a specified type, which helps the method in which the exception was thrown communicate that its caller has made a mistake. This allows constructs such as\n\n```java\npublic static double sqrt(double value) {\n   if (value < 0) {\n     throw new IllegalArgumentException(\"input is negative: \" + value);\n   }\n   // calculate square root\n }\n```\n\nto be replaced with the more compact\n\n```java\npublic static double sqrt(double value) {\n   checkArgument(value >= 0, \"input is negative: %s\", value);\n   // calculate square root\n }\n```\n\nso that a hypothetical bad caller of this method, such as:\n\n```java\nvoid exampleBadCaller() {\n     double d = sqrt(-1.0);\n }\n```\n\nwould be flagged as having called `sqrt()` with an illegal argument.\n\n### Performance ###\n\nAvoid passing message arguments that are expensive to compute; your code will always compute them, even though they usually won't be needed. If you have such arguments, use the conventional if/throw idiom instead.\n\nDepending on your message arguments, memory may be allocated for boxing and varargs array creation. However, the methods of this class have a large number of overloads that prevent such allocations in many common cases.\n\nThe message string is not formatted unless the exception will be thrown, so the cost of the string formatting itself should not be a concern.\n\nAs with any performance concerns, you should consider profiling your code (in a production environment if possible) before spending a lot of effort on tweaking a particular element.\n\n### Other types of preconditions ###\n\nNot every type of precondition failure is supported by these methods. Continue to throw standard JDK exceptions such as <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"java.util.NoSuchElementException\"></xref> or <xref uid=\"java.lang.UnsupportedOperationException\" data-throw-if-not-resolved=\"false\" data-raw-source=\"UnsupportedOperationException\"></xref> in the situations they are intended for.\n\n### Non-preconditions ###\n\nIt is of course possible to use the methods of this class to check for invalid conditions which are *not the caller's fault*. Doing so is **not recommended** because it is misleading to future readers of the code and of stack traces. See [Conditional failures explained][] in the Guava User Guide for more advice. Notably, <xref uid=\"com.azure.cosmos.implementation.guava25.base.Verify\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Verify\"></xref> offers assertions similar to those in this class for non-precondition checks.\n\n### `java.util.Objects.requireNonNull()` ###\n\nProjects which use `com.google.common` should generally avoid the use of <xref uid=\"com.azure.cosmos.implementation.guava25.base.Objects.requireNonNull*\" data-throw-if-not-resolved=\"false\" data-raw-source=\"java.util.Objects#requireNonNull(Object)\"></xref>. Instead, use whichever of <xref uid=\"com.azure.cosmos.implementation.guava25.base.Preconditions.checkNotNull*\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#checkNotNull(Object)\"></xref> or <xref uid=\"com.azure.cosmos.implementation.guava25.base.Verify.verifyNotNull*\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Verify#verifyNotNull(Object)\"></xref> is appropriate to the situation. (The same goes for the message-accepting overloads.)\n\n### Only `%s` is supported ###\n\nIn `Preconditions` error message template strings, only the `\"%s\"` specifier is supported, not the full range of <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"java.util.Formatter\"></xref> specifiers.\n\n### More information ###\n\nSee the Guava User Guide on [using `Preconditions`][using _Preconditions].\n\n\n[Conditional failures explained]: https://github.com/google/guava/wiki/ConditionalFailuresExplained\n[using _Preconditions]: https://github.com/google/guava/wiki/PreconditionsExplained"
inheritances:
- "<xref href=\"java.lang.Object\" data-throw-if-not-resolved=\"False\" />"
inheritedMembers:
- "java.lang.Object.clone()"
- "java.lang.Object.equals(java.lang.Object)"
- "java.lang.Object.finalize()"
- "java.lang.Object.getClass()"
- "java.lang.Object.hashCode()"
- "java.lang.Object.notify()"
- "java.lang.Object.notifyAll()"
- "java.lang.Object.toString()"
- "java.lang.Object.wait()"
- "java.lang.Object.wait(long)"
- "java.lang.Object.wait(long,int)"
syntax: "public final class Preconditions"
methods:
- "com.azure.cosmos.implementation.guava25.base.Preconditions.<T>checkNotNull(T)"
- "com.azure.cosmos.implementation.guava25.base.Preconditions.<T>checkNotNull(T,java.lang.Object)"
- "com.azure.cosmos.implementation.guava25.base.Preconditions.<T>checkNotNull(T,java.lang.String,char)"
- "com.azure.cosmos.implementation.guava25.base.Preconditions.<T>checkNotNull(T,java.lang.String,char,char)"
- "com.azure.cosmos.implementation.guava25.base.Preconditions.<T>checkNotNull(T,java.lang.String,char,int)"
- "com.azure.cosmos.implementation.guava25.base.Preconditions.<T>checkNotNull(T,java.lang.String,char,java.lang.Object)"
- "com.azure.cosmos.implementation.guava25.base.Preconditions.<T>checkNotNull(T,java.lang.String,char,long)"
- "com.azure.cosmos.implementation.guava25.base.Preconditions.<T>checkNotNull(T,java.lang.String,int)"
- "com.azure.cosmos.implementation.guava25.base.Preconditions.<T>checkNotNull(T,java.lang.String,int,char)"
- "com.azure.cosmos.implementation.guava25.base.Preconditions.<T>checkNotNull(T,java.lang.String,int,int)"
- "com.azure.cosmos.implementation.guava25.base.Preconditions.<T>checkNotNull(T,java.lang.String,int,java.lang.Object)"
- "com.azure.cosmos.implementation.guava25.base.Preconditions.<T>checkNotNull(T,java.lang.String,int,long)"
- "com.azure.cosmos.implementation.guava25.base.Preconditions.<T>checkNotNull(T,java.lang.String,java.lang.Object)"
- "com.azure.cosmos.implementation.guava25.base.Preconditions.<T>checkNotNull(T,java.lang.String,java.lang.Object,char)"
- "com.azure.cosmos.implementation.guava25.base.Preconditions.<T>checkNotNull(T,java.lang.String,java.lang.Object,int)"
- "com.azure.cosmos.implementation.guava25.base.Preconditions.<T>checkNotNull(T,java.lang.String,java.lang.Object,java.lang.Object)"
- "com.azure.cosmos.implementation.guava25.base.Preconditions.<T>checkNotNull(T,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object)"
- "com.azure.cosmos.implementation.guava25.base.Preconditions.<T>checkNotNull(T,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)"
- "com.azure.cosmos.implementation.guava25.base.Preconditions.<T>checkNotNull(T,java.lang.String,java.lang.Object,long)"
- "com.azure.cosmos.implementation.guava25.base.Preconditions.<T>checkNotNull(T,java.lang.String,java.lang.Object...)"
- "com.azure.cosmos.implementation.guava25.base.Preconditions.<T>checkNotNull(T,java.lang.String,long)"
- "com.azure.cosmos.implementation.guava25.base.Preconditions.<T>checkNotNull(T,java.lang.String,long,char)"
- "com.azure.cosmos.implementation.guava25.base.Preconditions.<T>checkNotNull(T,java.lang.String,long,int)"
- "com.azure.cosmos.implementation.guava25.base.Preconditions.<T>checkNotNull(T,java.lang.String,long,java.lang.Object)"
- "com.azure.cosmos.implementation.guava25.base.Preconditions.<T>checkNotNull(T,java.lang.String,long,long)"
- "com.azure.cosmos.implementation.guava25.base.Preconditions.checkArgument(boolean)"
- "com.azure.cosmos.implementation.guava25.base.Preconditions.checkArgument(boolean,java.lang.Object)"
- "com.azure.cosmos.implementation.guava25.base.Preconditions.checkArgument(boolean,java.lang.String,char)"
- "com.azure.cosmos.implementation.guava25.base.Preconditions.checkArgument(boolean,java.lang.String,char,char)"
- "com.azure.cosmos.implementation.guava25.base.Preconditions.checkArgument(boolean,java.lang.String,char,int)"
- "com.azure.cosmos.implementation.guava25.base.Preconditions.checkArgument(boolean,java.lang.String,char,java.lang.Object)"
- "com.azure.cosmos.implementation.guava25.base.Preconditions.checkArgument(boolean,java.lang.String,char,long)"
- "com.azure.cosmos.implementation.guava25.base.Preconditions.checkArgument(boolean,java.lang.String,int)"
- "com.azure.cosmos.implementation.guava25.base.Preconditions.checkArgument(boolean,java.lang.String,int,char)"
- "com.azure.cosmos.implementation.guava25.base.Preconditions.checkArgument(boolean,java.lang.String,int,int)"
- "com.azure.cosmos.implementation.guava25.base.Preconditions.checkArgument(boolean,java.lang.String,int,java.lang.Object)"
- "com.azure.cosmos.implementation.guava25.base.Preconditions.checkArgument(boolean,java.lang.String,int,long)"
- "com.azure.cosmos.implementation.guava25.base.Preconditions.checkArgument(boolean,java.lang.String,java.lang.Object)"
- "com.azure.cosmos.implementation.guava25.base.Preconditions.checkArgument(boolean,java.lang.String,java.lang.Object,char)"
- "com.azure.cosmos.implementation.guava25.base.Preconditions.checkArgument(boolean,java.lang.String,java.lang.Object,int)"
- "com.azure.cosmos.implementation.guava25.base.Preconditions.checkArgument(boolean,java.lang.String,java.lang.Object,java.lang.Object)"
- "com.azure.cosmos.implementation.guava25.base.Preconditions.checkArgument(boolean,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object)"
- "com.azure.cosmos.implementation.guava25.base.Preconditions.checkArgument(boolean,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)"
- "com.azure.cosmos.implementation.guava25.base.Preconditions.checkArgument(boolean,java.lang.String,java.lang.Object,long)"
- "com.azure.cosmos.implementation.guava25.base.Preconditions.checkArgument(boolean,java.lang.String,java.lang.Object...)"
- "com.azure.cosmos.implementation.guava25.base.Preconditions.checkArgument(boolean,java.lang.String,long)"
- "com.azure.cosmos.implementation.guava25.base.Preconditions.checkArgument(boolean,java.lang.String,long,char)"
- "com.azure.cosmos.implementation.guava25.base.Preconditions.checkArgument(boolean,java.lang.String,long,int)"
- "com.azure.cosmos.implementation.guava25.base.Preconditions.checkArgument(boolean,java.lang.String,long,java.lang.Object)"
- "com.azure.cosmos.implementation.guava25.base.Preconditions.checkArgument(boolean,java.lang.String,long,long)"
- "com.azure.cosmos.implementation.guava25.base.Preconditions.checkElementIndex(int,int)"
- "com.azure.cosmos.implementation.guava25.base.Preconditions.checkElementIndex(int,int,java.lang.String)"
- "com.azure.cosmos.implementation.guava25.base.Preconditions.checkPositionIndex(int,int)"
- "com.azure.cosmos.implementation.guava25.base.Preconditions.checkPositionIndex(int,int,java.lang.String)"
- "com.azure.cosmos.implementation.guava25.base.Preconditions.checkPositionIndexes(int,int,int)"
- "com.azure.cosmos.implementation.guava25.base.Preconditions.checkState(boolean)"
- "com.azure.cosmos.implementation.guava25.base.Preconditions.checkState(boolean,java.lang.Object)"
- "com.azure.cosmos.implementation.guava25.base.Preconditions.checkState(boolean,java.lang.String,char)"
- "com.azure.cosmos.implementation.guava25.base.Preconditions.checkState(boolean,java.lang.String,char,char)"
- "com.azure.cosmos.implementation.guava25.base.Preconditions.checkState(boolean,java.lang.String,char,int)"
- "com.azure.cosmos.implementation.guava25.base.Preconditions.checkState(boolean,java.lang.String,char,java.lang.Object)"
- "com.azure.cosmos.implementation.guava25.base.Preconditions.checkState(boolean,java.lang.String,char,long)"
- "com.azure.cosmos.implementation.guava25.base.Preconditions.checkState(boolean,java.lang.String,int)"
- "com.azure.cosmos.implementation.guava25.base.Preconditions.checkState(boolean,java.lang.String,int,char)"
- "com.azure.cosmos.implementation.guava25.base.Preconditions.checkState(boolean,java.lang.String,int,int)"
- "com.azure.cosmos.implementation.guava25.base.Preconditions.checkState(boolean,java.lang.String,int,java.lang.Object)"
- "com.azure.cosmos.implementation.guava25.base.Preconditions.checkState(boolean,java.lang.String,int,long)"
- "com.azure.cosmos.implementation.guava25.base.Preconditions.checkState(boolean,java.lang.String,java.lang.Object)"
- "com.azure.cosmos.implementation.guava25.base.Preconditions.checkState(boolean,java.lang.String,java.lang.Object,char)"
- "com.azure.cosmos.implementation.guava25.base.Preconditions.checkState(boolean,java.lang.String,java.lang.Object,int)"
- "com.azure.cosmos.implementation.guava25.base.Preconditions.checkState(boolean,java.lang.String,java.lang.Object,java.lang.Object)"
- "com.azure.cosmos.implementation.guava25.base.Preconditions.checkState(boolean,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object)"
- "com.azure.cosmos.implementation.guava25.base.Preconditions.checkState(boolean,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)"
- "com.azure.cosmos.implementation.guava25.base.Preconditions.checkState(boolean,java.lang.String,java.lang.Object,long)"
- "com.azure.cosmos.implementation.guava25.base.Preconditions.checkState(boolean,java.lang.String,java.lang.Object...)"
- "com.azure.cosmos.implementation.guava25.base.Preconditions.checkState(boolean,java.lang.String,long)"
- "com.azure.cosmos.implementation.guava25.base.Preconditions.checkState(boolean,java.lang.String,long,char)"
- "com.azure.cosmos.implementation.guava25.base.Preconditions.checkState(boolean,java.lang.String,long,int)"
- "com.azure.cosmos.implementation.guava25.base.Preconditions.checkState(boolean,java.lang.String,long,java.lang.Object)"
- "com.azure.cosmos.implementation.guava25.base.Preconditions.checkState(boolean,java.lang.String,long,long)"
type: "class"
metadata: {}
package: "com.azure.cosmos.implementation.guava25.base"
artifact: com.azure:azure-cosmos:4.4.0-beta.1
