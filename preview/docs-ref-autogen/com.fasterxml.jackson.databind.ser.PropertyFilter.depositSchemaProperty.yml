### YamlMime:JavaMember
uid: "com.fasterxml.jackson.databind.ser.PropertyFilter.depositSchemaProperty*"
fullName: "com.fasterxml.jackson.databind.ser.PropertyFilter.depositSchemaProperty"
name: "depositSchemaProperty"
nameWithType: "PropertyFilter.depositSchemaProperty"
members:
- uid: "com.fasterxml.jackson.databind.ser.PropertyFilter.depositSchemaProperty(com.fasterxml.jackson.databind.ser.PropertyWriter,com.fasterxml.jackson.databind.jsonFormatVisitors.JsonObjectFormatVisitor,com.fasterxml.jackson.databind.SerializerProvider)"
  fullName: "com.fasterxml.jackson.databind.ser.PropertyFilter.depositSchemaProperty(PropertyWriter writer, jsonFormatVisitors.JsonObjectFormatVisitor objectVisitor, SerializerProvider provider)"
  name: "depositSchemaProperty(PropertyWriter writer, jsonFormatVisitors.JsonObjectFormatVisitor objectVisitor, SerializerProvider provider)"
  nameWithType: "PropertyFilter.depositSchemaProperty(PropertyWriter writer, jsonFormatVisitors.JsonObjectFormatVisitor objectVisitor, SerializerProvider provider)"
  summary: "Method called by <xref uid=\"com.fasterxml.jackson.databind.ser.BeanSerializer\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BeanSerializer\"></xref> to let the filter determine whether, and in what form the given property exist within the parent, or root, schema. Filters can omit adding the property to the node, or choose the form of the schema value for the property\n\nTypical implementation is something like:\n\n```java\nif (include(writer)) {\n      writer.depositSchemaProperty(objectVisitor, provider);\n }\n```"
  parameters:
  - description: "Bean property serializer to use to create schema value"
    name: "writer"
    type: "<xref href=\"com.fasterxml.jackson.databind.ser.PropertyWriter?alt=com.fasterxml.jackson.databind.ser.PropertyWriter&text=PropertyWriter\" data-throw-if-not-resolved=\"False\" />"
  - description: "JsonObjectFormatVisitor which should be aware of \n the property's existence"
    name: "objectVisitor"
    type: "<xref href=\"com.fasterxml.jackson.databind.jsonFormatVisitors.JsonObjectFormatVisitor?alt=com.fasterxml.jackson.databind.jsonFormatVisitors.JsonObjectFormatVisitor&text=JsonObjectFormatVisitor\" data-throw-if-not-resolved=\"False\" />"
  - description: "Provider that can be used for accessing dynamic aspects of serialization\n \tprocessing"
    name: "provider"
    type: "<xref href=\"com.fasterxml.jackson.databind.SerializerProvider?alt=com.fasterxml.jackson.databind.SerializerProvider&text=SerializerProvider\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract void depositSchemaProperty(PropertyWriter writer, jsonFormatVisitors.JsonObjectFormatVisitor objectVisitor, SerializerProvider provider)"
  exceptions:
  - type: "<xref href=\"com.fasterxml.jackson.databind.JsonMappingException?alt=com.fasterxml.jackson.databind.JsonMappingException&text=JsonMappingException\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.fasterxml.jackson.databind.ser.PropertyFilter.depositSchemaProperty(com.fasterxml.jackson.databind.ser.PropertyWriter,com.fasterxml.jackson.databind.node.ObjectNode,com.fasterxml.jackson.databind.SerializerProvider)"
  fullName: "com.fasterxml.jackson.databind.ser.PropertyFilter.depositSchemaProperty(PropertyWriter writer, ObjectNode propertiesNode, SerializerProvider provider)"
  name: "depositSchemaProperty(PropertyWriter writer, ObjectNode propertiesNode, SerializerProvider provider)"
  nameWithType: "PropertyFilter.depositSchemaProperty(PropertyWriter writer, ObjectNode propertiesNode, SerializerProvider provider)"
  summary: "Method called by <xref uid=\"com.fasterxml.jackson.databind.ser.BeanSerializer\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BeanSerializer\"></xref> to let the filter determine whether, and in what form the given property exist within the parent, or root, schema. Filters can omit adding the property to the node, or choose the form of the schema value for the property.\n\nTypical implementation is something like:\n\n```java\nif (include(writer)) {\n      writer.depositSchemaProperty(propertiesNode, provider);\n }\n```"
  parameters:
  - description: "Bean property writer to use to create schema value"
    name: "writer"
    type: "<xref href=\"com.fasterxml.jackson.databind.ser.PropertyWriter?alt=com.fasterxml.jackson.databind.ser.PropertyWriter&text=PropertyWriter\" data-throw-if-not-resolved=\"False\" />"
  - description: "Node which the given property would exist within"
    name: "propertiesNode"
    type: "<xref href=\"com.fasterxml.jackson.databind.node.ObjectNode?alt=com.fasterxml.jackson.databind.node.ObjectNode&text=ObjectNode\" data-throw-if-not-resolved=\"False\" />"
  - description: "Provider that can be used for accessing dynamic aspects of serialization\n \tprocessing"
    name: "provider"
    type: "<xref href=\"com.fasterxml.jackson.databind.SerializerProvider?alt=com.fasterxml.jackson.databind.SerializerProvider&text=SerializerProvider\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract void depositSchemaProperty(PropertyWriter writer, ObjectNode propertiesNode, SerializerProvider provider)"
  exceptions:
  - type: "<xref href=\"com.fasterxml.jackson.databind.JsonMappingException?alt=com.fasterxml.jackson.databind.JsonMappingException&text=JsonMappingException\" data-throw-if-not-resolved=\"False\" />"
type: "method"
metadata: {}
package: "com.fasterxml.jackson.databind.ser"
artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
