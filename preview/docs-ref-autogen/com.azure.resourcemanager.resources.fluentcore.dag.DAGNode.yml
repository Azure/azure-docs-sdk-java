### YamlMime:ManagedReference
items:
- uid: com.azure.resourcemanager.resources.fluentcore.dag.DAGNode
  id: DAGNode
  artifact: com.azure.resourcemanager:azure-resourcemanager-resources:2.0.0-beta.2
  parent: com.azure.resourcemanager.resources.fluentcore.dag
  children:
  - com.azure.resourcemanager.resources.fluentcore.dag.DAGNode.DAGNode(java.lang.String,DataT)
  - com.azure.resourcemanager.resources.fluentcore.dag.DAGNode.addDependency(java.lang.String)
  - com.azure.resourcemanager.resources.fluentcore.dag.DAGNode.addDependent(java.lang.String)
  - com.azure.resourcemanager.resources.fluentcore.dag.DAGNode.dependencyKeys()
  - com.azure.resourcemanager.resources.fluentcore.dag.DAGNode.hasDependencies()
  - com.azure.resourcemanager.resources.fluentcore.dag.DAGNode.initialize()
  - com.azure.resourcemanager.resources.fluentcore.dag.DAGNode.isPreparer()
  - com.azure.resourcemanager.resources.fluentcore.dag.DAGNode.lock()
  - com.azure.resourcemanager.resources.fluentcore.dag.DAGNode.onFaultedResolution(java.lang.String,java.lang.Throwable)
  - com.azure.resourcemanager.resources.fluentcore.dag.DAGNode.onSuccessfulResolution(java.lang.String)
  - com.azure.resourcemanager.resources.fluentcore.dag.DAGNode.removeDependency(java.lang.String)
  - com.azure.resourcemanager.resources.fluentcore.dag.DAGNode.setPreparer(boolean)
  langs:
  - java
  name: DAGNode<DataT,NodeT>
  nameWithType: DAGNode<DataT,NodeT>
  fullName: com.azure.resourcemanager.resources.fluentcore.dag.DAGNode<DataT,NodeT>
  type: Class
  package: com.azure.resourcemanager.resources.fluentcore.dag
  summary: The type representing node in a <xref uid="com.azure.resourcemanager.resources.fluentcore.dag.DAGraph" data-throw-if-not-resolved="false">DAGraph</xref>.
  syntax:
    content: public class DAGNode<DataT,NodeT> extends Node<DataT,NodeT>
    typeParameters:
    - id: DataT
    - id: NodeT
  inheritance:
  - java.lang.Object
  - com.azure.resourcemanager.resources.fluentcore.dag.Node
  inheritedMembers:
  - com.azure.resourcemanager.resources.fluentcore.dag.Node.addChild(java.lang.String)
  - com.azure.resourcemanager.resources.fluentcore.dag.Node.children()
  - com.azure.resourcemanager.resources.fluentcore.dag.Node.data()
  - com.azure.resourcemanager.resources.fluentcore.dag.Node.hasChildren()
  - com.azure.resourcemanager.resources.fluentcore.dag.Node.key()
  - com.azure.resourcemanager.resources.fluentcore.dag.Node.owner()
  - com.azure.resourcemanager.resources.fluentcore.dag.Node.removeChild(java.lang.String)
  - com.azure.resourcemanager.resources.fluentcore.dag.Node.setOwner(com.azure.resourcemanager.resources.fluentcore.dag.Graph<DataT,NodeT>)
  - java.lang.Object.clone()
  - java.lang.Object.equals(java.lang.Object)
  - java.lang.Object.finalize()
  - java.lang.Object.getClass()
  - java.lang.Object.hashCode()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.toString()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
- uid: com.azure.resourcemanager.resources.fluentcore.dag.DAGNode.DAGNode(java.lang.String,DataT)
  id: DAGNode(java.lang.String,DataT)
  artifact: com.azure.resourcemanager:azure-resourcemanager-resources:2.0.0-beta.2
  parent: com.azure.resourcemanager.resources.fluentcore.dag.DAGNode
  langs:
  - java
  name: DAGNode(String key, DataT data)
  nameWithType: DAGNode<DataT,NodeT>.DAGNode(String key, DataT data)
  fullName: com.azure.resourcemanager.resources.fluentcore.dag.DAGNode<DataT,NodeT>.DAGNode(String key, DataT data)
  overload: com.azure.resourcemanager.resources.fluentcore.dag.DAGNode.DAGNode*
  type: Constructor
  package: com.azure.resourcemanager.resources.fluentcore.dag
  summary: Creates a DAG node.
  syntax:
    content: public DAGNode(String key, DataT data)
    parameters:
    - id: key
      type: java.lang.String
      description: unique id of the node
    - id: data
      type: DataT
      description: data to be stored in the node
- uid: com.azure.resourcemanager.resources.fluentcore.dag.DAGNode.addDependency(java.lang.String)
  id: addDependency(java.lang.String)
  artifact: com.azure.resourcemanager:azure-resourcemanager-resources:2.0.0-beta.2
  parent: com.azure.resourcemanager.resources.fluentcore.dag.DAGNode
  langs:
  - java
  name: addDependency(String dependencyKey)
  nameWithType: DAGNode<DataT,NodeT>.addDependency(String dependencyKey)
  fullName: com.azure.resourcemanager.resources.fluentcore.dag.DAGNode<DataT,NodeT>.addDependency(String dependencyKey)
  overload: com.azure.resourcemanager.resources.fluentcore.dag.DAGNode.addDependency*
  type: Method
  package: com.azure.resourcemanager.resources.fluentcore.dag
  summary: Mark the node identified by the given key as this node's dependency.
  syntax:
    content: public void addDependency(String dependencyKey)
    parameters:
    - id: dependencyKey
      type: java.lang.String
      description: the id of the dependency node
- uid: com.azure.resourcemanager.resources.fluentcore.dag.DAGNode.addDependent(java.lang.String)
  id: addDependent(java.lang.String)
  artifact: com.azure.resourcemanager:azure-resourcemanager-resources:2.0.0-beta.2
  parent: com.azure.resourcemanager.resources.fluentcore.dag.DAGNode
  langs:
  - java
  name: addDependent(String key)
  nameWithType: DAGNode<DataT,NodeT>.addDependent(String key)
  fullName: com.azure.resourcemanager.resources.fluentcore.dag.DAGNode<DataT,NodeT>.addDependent(String key)
  overload: com.azure.resourcemanager.resources.fluentcore.dag.DAGNode.addDependent*
  type: Method
  package: com.azure.resourcemanager.resources.fluentcore.dag
  summary: Mark the node identified by the given key as dependent of this node.
  syntax:
    content: public void addDependent(String key)
    parameters:
    - id: key
      type: java.lang.String
      description: the id of the dependent node
- uid: com.azure.resourcemanager.resources.fluentcore.dag.DAGNode.dependencyKeys()
  id: dependencyKeys()
  artifact: com.azure.resourcemanager:azure-resourcemanager-resources:2.0.0-beta.2
  parent: com.azure.resourcemanager.resources.fluentcore.dag.DAGNode
  langs:
  - java
  name: dependencyKeys()
  nameWithType: DAGNode<DataT,NodeT>.dependencyKeys()
  fullName: com.azure.resourcemanager.resources.fluentcore.dag.DAGNode<DataT,NodeT>.dependencyKeys()
  overload: com.azure.resourcemanager.resources.fluentcore.dag.DAGNode.dependencyKeys*
  type: Method
  package: com.azure.resourcemanager.resources.fluentcore.dag
  syntax:
    content: public List<String> dependencyKeys()
    return:
      type: java.util.List<java.lang.String>
      description: a list of keys of nodes in <xref uid="com.azure.resourcemanager.resources.fluentcore.dag.DAGraph" data-throw-if-not-resolved="false">DAGraph</xref> that this node depends on
- uid: com.azure.resourcemanager.resources.fluentcore.dag.DAGNode.hasDependencies()
  id: hasDependencies()
  artifact: com.azure.resourcemanager:azure-resourcemanager-resources:2.0.0-beta.2
  parent: com.azure.resourcemanager.resources.fluentcore.dag.DAGNode
  langs:
  - java
  name: hasDependencies()
  nameWithType: DAGNode<DataT,NodeT>.hasDependencies()
  fullName: com.azure.resourcemanager.resources.fluentcore.dag.DAGNode<DataT,NodeT>.hasDependencies()
  overload: com.azure.resourcemanager.resources.fluentcore.dag.DAGNode.hasDependencies*
  type: Method
  package: com.azure.resourcemanager.resources.fluentcore.dag
  syntax:
    content: public boolean hasDependencies()
    return:
      type: boolean
      description: true if this node has any dependency
- uid: com.azure.resourcemanager.resources.fluentcore.dag.DAGNode.initialize()
  id: initialize()
  artifact: com.azure.resourcemanager:azure-resourcemanager-resources:2.0.0-beta.2
  parent: com.azure.resourcemanager.resources.fluentcore.dag.DAGNode
  langs:
  - java
  name: initialize()
  nameWithType: DAGNode<DataT,NodeT>.initialize()
  fullName: com.azure.resourcemanager.resources.fluentcore.dag.DAGNode<DataT,NodeT>.initialize()
  overload: com.azure.resourcemanager.resources.fluentcore.dag.DAGNode.initialize*
  type: Method
  package: com.azure.resourcemanager.resources.fluentcore.dag
  summary: Initialize the node so that traversal can be performed on the parent DAG.
  syntax:
    content: public void initialize()
- uid: com.azure.resourcemanager.resources.fluentcore.dag.DAGNode.isPreparer()
  id: isPreparer()
  artifact: com.azure.resourcemanager:azure-resourcemanager-resources:2.0.0-beta.2
  parent: com.azure.resourcemanager.resources.fluentcore.dag.DAGNode
  langs:
  - java
  name: isPreparer()
  nameWithType: DAGNode<DataT,NodeT>.isPreparer()
  fullName: com.azure.resourcemanager.resources.fluentcore.dag.DAGNode<DataT,NodeT>.isPreparer()
  overload: com.azure.resourcemanager.resources.fluentcore.dag.DAGNode.isPreparer*
  type: Method
  package: com.azure.resourcemanager.resources.fluentcore.dag
  syntax:
    content: public boolean isPreparer()
    return:
      type: boolean
      description: true if this node is marked as preparer
- uid: com.azure.resourcemanager.resources.fluentcore.dag.DAGNode.lock()
  id: lock()
  artifact: com.azure.resourcemanager:azure-resourcemanager-resources:2.0.0-beta.2
  parent: com.azure.resourcemanager.resources.fluentcore.dag.DAGNode
  langs:
  - java
  name: lock()
  nameWithType: DAGNode<DataT,NodeT>.lock()
  fullName: com.azure.resourcemanager.resources.fluentcore.dag.DAGNode<DataT,NodeT>.lock()
  overload: com.azure.resourcemanager.resources.fluentcore.dag.DAGNode.lock*
  type: Method
  package: com.azure.resourcemanager.resources.fluentcore.dag
  syntax:
    content: public ReentrantLock lock()
    return:
      type: java.util.concurrent.locks.ReentrantLock
      description: the lock to be used while performing thread safe operation on this node.
- uid: com.azure.resourcemanager.resources.fluentcore.dag.DAGNode.onFaultedResolution(java.lang.String,java.lang.Throwable)
  id: onFaultedResolution(java.lang.String,java.lang.Throwable)
  artifact: com.azure.resourcemanager:azure-resourcemanager-resources:2.0.0-beta.2
  parent: com.azure.resourcemanager.resources.fluentcore.dag.DAGNode
  langs:
  - java
  name: onFaultedResolution(String dependencyKey, Throwable throwable)
  nameWithType: DAGNode<DataT,NodeT>.onFaultedResolution(String dependencyKey, Throwable throwable)
  fullName: com.azure.resourcemanager.resources.fluentcore.dag.DAGNode<DataT,NodeT>.onFaultedResolution(String dependencyKey, Throwable throwable)
  overload: com.azure.resourcemanager.resources.fluentcore.dag.DAGNode.onFaultedResolution*
  type: Method
  package: com.azure.resourcemanager.resources.fluentcore.dag
  summary: Reports a dependency of this node has been faulted.
  syntax:
    content: protected void onFaultedResolution(String dependencyKey, Throwable throwable)
    parameters:
    - id: dependencyKey
      type: java.lang.String
      description: the id of the dependency node
    - id: throwable
      type: java.lang.Throwable
      description: the reason for unsuccessful resolution
- uid: com.azure.resourcemanager.resources.fluentcore.dag.DAGNode.onSuccessfulResolution(java.lang.String)
  id: onSuccessfulResolution(java.lang.String)
  artifact: com.azure.resourcemanager:azure-resourcemanager-resources:2.0.0-beta.2
  parent: com.azure.resourcemanager.resources.fluentcore.dag.DAGNode
  langs:
  - java
  name: onSuccessfulResolution(String dependencyKey)
  nameWithType: DAGNode<DataT,NodeT>.onSuccessfulResolution(String dependencyKey)
  fullName: com.azure.resourcemanager.resources.fluentcore.dag.DAGNode<DataT,NodeT>.onSuccessfulResolution(String dependencyKey)
  overload: com.azure.resourcemanager.resources.fluentcore.dag.DAGNode.onSuccessfulResolution*
  type: Method
  package: com.azure.resourcemanager.resources.fluentcore.dag
  summary: Reports a dependency of this node has been successfully resolved.
  syntax:
    content: protected void onSuccessfulResolution(String dependencyKey)
    parameters:
    - id: dependencyKey
      type: java.lang.String
      description: the id of the dependency node
- uid: com.azure.resourcemanager.resources.fluentcore.dag.DAGNode.removeDependency(java.lang.String)
  id: removeDependency(java.lang.String)
  artifact: com.azure.resourcemanager:azure-resourcemanager-resources:2.0.0-beta.2
  parent: com.azure.resourcemanager.resources.fluentcore.dag.DAGNode
  langs:
  - java
  name: removeDependency(String dependencyKey)
  nameWithType: DAGNode<DataT,NodeT>.removeDependency(String dependencyKey)
  fullName: com.azure.resourcemanager.resources.fluentcore.dag.DAGNode<DataT,NodeT>.removeDependency(String dependencyKey)
  overload: com.azure.resourcemanager.resources.fluentcore.dag.DAGNode.removeDependency*
  type: Method
  package: com.azure.resourcemanager.resources.fluentcore.dag
  summary: Remove the dependency node identified by the given key from the dependencies.
  syntax:
    content: public void removeDependency(String dependencyKey)
    parameters:
    - id: dependencyKey
      type: java.lang.String
      description: the id of the dependency node
- uid: com.azure.resourcemanager.resources.fluentcore.dag.DAGNode.setPreparer(boolean)
  id: setPreparer(boolean)
  artifact: com.azure.resourcemanager:azure-resourcemanager-resources:2.0.0-beta.2
  parent: com.azure.resourcemanager.resources.fluentcore.dag.DAGNode
  langs:
  - java
  name: setPreparer(boolean isPreparer)
  nameWithType: DAGNode<DataT,NodeT>.setPreparer(boolean isPreparer)
  fullName: com.azure.resourcemanager.resources.fluentcore.dag.DAGNode<DataT,NodeT>.setPreparer(boolean isPreparer)
  overload: com.azure.resourcemanager.resources.fluentcore.dag.DAGNode.setPreparer*
  type: Method
  package: com.azure.resourcemanager.resources.fluentcore.dag
  summary: Mark or un-mark this node as preparer.
  syntax:
    content: public void setPreparer(boolean isPreparer)
    parameters:
    - id: isPreparer
      type: boolean
      description: true if this node needs to be marked as preparer, false otherwise.
references:
- uid: java.lang.String
  spec.java:
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
- uid: DataT
  spec.java:
  - uid: DataT
    name: DataT
    fullName: DataT
- uid: com.azure.resourcemanager.resources.fluentcore.dag.DAGNode.DAGNode*
  name: DAGNode
  nameWithType: DAGNode<DataT,NodeT>.DAGNode
  fullName: com.azure.resourcemanager.resources.fluentcore.dag.DAGNode<DataT,NodeT>.DAGNode
  package: com.azure.resourcemanager.resources.fluentcore.dag
- uid: java.util.concurrent.locks.ReentrantLock
  spec.java:
  - uid: java.util.concurrent.locks.ReentrantLock
    name: ReentrantLock
    fullName: java.util.concurrent.locks.ReentrantLock
- uid: com.azure.resourcemanager.resources.fluentcore.dag.DAGNode.lock*
  name: lock
  nameWithType: DAGNode<DataT,NodeT>.lock
  fullName: com.azure.resourcemanager.resources.fluentcore.dag.DAGNode<DataT,NodeT>.lock
  package: com.azure.resourcemanager.resources.fluentcore.dag
- uid: com.azure.resourcemanager.resources.fluentcore.dag.DAGNode.addDependent*
  name: addDependent
  nameWithType: DAGNode<DataT,NodeT>.addDependent
  fullName: com.azure.resourcemanager.resources.fluentcore.dag.DAGNode<DataT,NodeT>.addDependent
  package: com.azure.resourcemanager.resources.fluentcore.dag
- uid: java.util.List<java.lang.String>
  spec.java:
  - uid: java.util.List
    name: List
    fullName: java.util.List
  - name: <
    fullName: <
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
  - name: '>'
    fullName: '>'
- uid: com.azure.resourcemanager.resources.fluentcore.dag.DAGNode.dependencyKeys*
  name: dependencyKeys
  nameWithType: DAGNode<DataT,NodeT>.dependencyKeys
  fullName: com.azure.resourcemanager.resources.fluentcore.dag.DAGNode<DataT,NodeT>.dependencyKeys
  package: com.azure.resourcemanager.resources.fluentcore.dag
- uid: com.azure.resourcemanager.resources.fluentcore.dag.DAGNode.addDependency*
  name: addDependency
  nameWithType: DAGNode<DataT,NodeT>.addDependency
  fullName: com.azure.resourcemanager.resources.fluentcore.dag.DAGNode<DataT,NodeT>.addDependency
  package: com.azure.resourcemanager.resources.fluentcore.dag
- uid: com.azure.resourcemanager.resources.fluentcore.dag.DAGNode.removeDependency*
  name: removeDependency
  nameWithType: DAGNode<DataT,NodeT>.removeDependency
  fullName: com.azure.resourcemanager.resources.fluentcore.dag.DAGNode<DataT,NodeT>.removeDependency
  package: com.azure.resourcemanager.resources.fluentcore.dag
- uid: boolean
  spec.java:
  - uid: boolean
    name: boolean
    fullName: boolean
- uid: com.azure.resourcemanager.resources.fluentcore.dag.DAGNode.hasDependencies*
  name: hasDependencies
  nameWithType: DAGNode<DataT,NodeT>.hasDependencies
  fullName: com.azure.resourcemanager.resources.fluentcore.dag.DAGNode<DataT,NodeT>.hasDependencies
  package: com.azure.resourcemanager.resources.fluentcore.dag
- uid: com.azure.resourcemanager.resources.fluentcore.dag.DAGNode.setPreparer*
  name: setPreparer
  nameWithType: DAGNode<DataT,NodeT>.setPreparer
  fullName: com.azure.resourcemanager.resources.fluentcore.dag.DAGNode<DataT,NodeT>.setPreparer
  package: com.azure.resourcemanager.resources.fluentcore.dag
- uid: com.azure.resourcemanager.resources.fluentcore.dag.DAGNode.isPreparer*
  name: isPreparer
  nameWithType: DAGNode<DataT,NodeT>.isPreparer
  fullName: com.azure.resourcemanager.resources.fluentcore.dag.DAGNode<DataT,NodeT>.isPreparer
  package: com.azure.resourcemanager.resources.fluentcore.dag
- uid: com.azure.resourcemanager.resources.fluentcore.dag.DAGNode.initialize*
  name: initialize
  nameWithType: DAGNode<DataT,NodeT>.initialize
  fullName: com.azure.resourcemanager.resources.fluentcore.dag.DAGNode<DataT,NodeT>.initialize
  package: com.azure.resourcemanager.resources.fluentcore.dag
- uid: com.azure.resourcemanager.resources.fluentcore.dag.DAGNode.onSuccessfulResolution*
  name: onSuccessfulResolution
  nameWithType: DAGNode<DataT,NodeT>.onSuccessfulResolution
  fullName: com.azure.resourcemanager.resources.fluentcore.dag.DAGNode<DataT,NodeT>.onSuccessfulResolution
  package: com.azure.resourcemanager.resources.fluentcore.dag
- uid: java.lang.Throwable
  spec.java:
  - uid: java.lang.Throwable
    name: Throwable
    fullName: java.lang.Throwable
- uid: com.azure.resourcemanager.resources.fluentcore.dag.DAGNode.onFaultedResolution*
  name: onFaultedResolution
  nameWithType: DAGNode<DataT,NodeT>.onFaultedResolution
  fullName: com.azure.resourcemanager.resources.fluentcore.dag.DAGNode<DataT,NodeT>.onFaultedResolution
  package: com.azure.resourcemanager.resources.fluentcore.dag
- uid: NodeT
  name: NodeT
  nameWithType: NodeT
  fullName: NodeT
- uid: com.azure.resourcemanager.resources.fluentcore.dag.Node<DataT,NodeT>
  name: Node<DataT,NodeT>
  nameWithType: Node<DataT,NodeT>
  fullName: com.azure.resourcemanager.resources.fluentcore.dag.Node<DataT,NodeT>
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: com.azure.resourcemanager.resources.fluentcore.dag.Node.removeChild(java.lang.String)
  name: Node.removeChild(String)
  nameWithType: Node.removeChild(String)
  fullName: com.azure.resourcemanager.resources.fluentcore.dag.Node.removeChild(java.lang.String)
- uid: java.lang.Object.finalize()
  name: Object.finalize()
  nameWithType: Object.finalize()
  fullName: java.lang.Object.finalize()
- uid: com.azure.resourcemanager.resources.fluentcore.dag.Node.children()
  name: Node.children()
  nameWithType: Node.children()
  fullName: com.azure.resourcemanager.resources.fluentcore.dag.Node.children()
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: java.lang.Object.clone()
  name: Object.clone()
  nameWithType: Object.clone()
  fullName: java.lang.Object.clone()
- uid: com.azure.resourcemanager.resources.fluentcore.dag.Node.data()
  name: Node.data()
  nameWithType: Node.data()
  fullName: com.azure.resourcemanager.resources.fluentcore.dag.Node.data()
- uid: java.lang.Object.equals(java.lang.Object)
  name: Object.equals(Object)
  nameWithType: Object.equals(Object)
  fullName: java.lang.Object.equals(java.lang.Object)
- uid: com.azure.resourcemanager.resources.fluentcore.dag.Node.hasChildren()
  name: Node.hasChildren()
  nameWithType: Node.hasChildren()
  fullName: com.azure.resourcemanager.resources.fluentcore.dag.Node.hasChildren()
- uid: java.lang.Object.toString()
  name: Object.toString()
  nameWithType: Object.toString()
  fullName: java.lang.Object.toString()
- uid: com.azure.resourcemanager.resources.fluentcore.dag.Node.key()
  name: Node.key()
  nameWithType: Node.key()
  fullName: com.azure.resourcemanager.resources.fluentcore.dag.Node.key()
- uid: com.azure.resourcemanager.resources.fluentcore.dag.Node.setOwner(com.azure.resourcemanager.resources.fluentcore.dag.Graph<DataT,NodeT>)
  name: Node.setOwner(Graph<DataT,NodeT>)
  nameWithType: Node.setOwner(Graph<DataT,NodeT>)
  fullName: com.azure.resourcemanager.resources.fluentcore.dag.Node.setOwner(com.azure.resourcemanager.resources.fluentcore.dag.Graph<DataT,NodeT>)
- uid: com.azure.resourcemanager.resources.fluentcore.dag.Node.owner()
  name: Node.owner()
  nameWithType: Node.owner()
  fullName: com.azure.resourcemanager.resources.fluentcore.dag.Node.owner()
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.lang.Object.hashCode()
  name: Object.hashCode()
  nameWithType: Object.hashCode()
  fullName: java.lang.Object.hashCode()
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: com.azure.resourcemanager.resources.fluentcore.dag.Node.addChild(java.lang.String)
  name: Node.addChild(String)
  nameWithType: Node.addChild(String)
  fullName: com.azure.resourcemanager.resources.fluentcore.dag.Node.addChild(java.lang.String)
- uid: java.util.List
  name: List
  nameWithType: List
  fullName: java.util.List
- uid: com.azure.resourcemanager.resources.fluentcore.dag.Node
  name: Node
  nameWithType: Node
  fullName: com.azure.resourcemanager.resources.fluentcore.dag.Node
- uid: DataT,NodeT
  name: DataT,NodeT
  nameWithType: DataT,NodeT
  fullName: DataT,NodeT
- uid: DataT,NodeT>)
  name: DataT,NodeT>)
  nameWithType: DataT,NodeT>)
  fullName: DataT,NodeT>)
- uid: com.azure.resourcemanager.resources.fluentcore.dag.Node.setOwner(com.azure.resourcemanager.resources.fluentcore.dag.Graph
  name: Node.setOwner(Graph
  nameWithType: Node.setOwner(Graph
  fullName: com.azure.resourcemanager.resources.fluentcore.dag.Node.setOwner(com.azure.resourcemanager.resources.fluentcore.dag.Graph
