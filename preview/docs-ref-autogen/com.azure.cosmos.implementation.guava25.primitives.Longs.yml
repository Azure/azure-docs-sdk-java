### YamlMime:ManagedReference
items:
- uid: com.azure.cosmos.implementation.guava25.primitives.Longs
  id: Longs
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.primitives
  children:
  - com.azure.cosmos.implementation.guava25.primitives.Longs.BYTES
  - com.azure.cosmos.implementation.guava25.primitives.Longs.MAX_POWER_OF_TWO
  - com.azure.cosmos.implementation.guava25.primitives.Longs.asList(long...)
  - com.azure.cosmos.implementation.guava25.primitives.Longs.compare(long,long)
  - com.azure.cosmos.implementation.guava25.primitives.Longs.concat(long[]...)
  - com.azure.cosmos.implementation.guava25.primitives.Longs.constrainToRange(long,long,long)
  - com.azure.cosmos.implementation.guava25.primitives.Longs.contains(long[],long)
  - com.azure.cosmos.implementation.guava25.primitives.Longs.ensureCapacity(long[],int,int)
  - com.azure.cosmos.implementation.guava25.primitives.Longs.fromByteArray(byte[])
  - com.azure.cosmos.implementation.guava25.primitives.Longs.fromBytes(byte,byte,byte,byte,byte,byte,byte,byte)
  - com.azure.cosmos.implementation.guava25.primitives.Longs.hashCode(long)
  - com.azure.cosmos.implementation.guava25.primitives.Longs.indexOf(long[],long)
  - com.azure.cosmos.implementation.guava25.primitives.Longs.indexOf(long[],long[])
  - com.azure.cosmos.implementation.guava25.primitives.Longs.join(java.lang.String,long...)
  - com.azure.cosmos.implementation.guava25.primitives.Longs.lastIndexOf(long[],long)
  - com.azure.cosmos.implementation.guava25.primitives.Longs.lexicographicalComparator()
  - com.azure.cosmos.implementation.guava25.primitives.Longs.max(long...)
  - com.azure.cosmos.implementation.guava25.primitives.Longs.min(long...)
  - com.azure.cosmos.implementation.guava25.primitives.Longs.reverse(long[])
  - com.azure.cosmos.implementation.guava25.primitives.Longs.reverse(long[],int,int)
  - com.azure.cosmos.implementation.guava25.primitives.Longs.sortDescending(long[])
  - com.azure.cosmos.implementation.guava25.primitives.Longs.sortDescending(long[],int,int)
  - com.azure.cosmos.implementation.guava25.primitives.Longs.stringConverter()
  - com.azure.cosmos.implementation.guava25.primitives.Longs.toArray(java.util.Collection<? extends java.lang.Number>)
  - com.azure.cosmos.implementation.guava25.primitives.Longs.toByteArray(long)
  - com.azure.cosmos.implementation.guava25.primitives.Longs.tryParse(java.lang.String)
  - com.azure.cosmos.implementation.guava25.primitives.Longs.tryParse(java.lang.String,int)
  langs:
  - java
  name: Longs
  nameWithType: Longs
  fullName: com.azure.cosmos.implementation.guava25.primitives.Longs
  type: Class
  package: com.azure.cosmos.implementation.guava25.primitives
  summary: >-
    Static utility methods pertaining to `long` primitives, that are not already found in either <xref uid="java.lang.Long" data-throw-if-not-resolved="false">Long</xref> or <xref uid="" data-throw-if-not-resolved="false">Arrays</xref>.


    See the Guava User Guide article on [primitive utilities][].



    [primitive utilities]: https://github.com/google/guava/wiki/PrimitivesExplained
  syntax:
    content: public final class Longs
  inheritance:
  - java.lang.Object
  inheritedMembers:
  - java.lang.Object.clone()
  - java.lang.Object.equals(java.lang.Object)
  - java.lang.Object.finalize()
  - java.lang.Object.getClass()
  - java.lang.Object.hashCode()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.toString()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
- uid: com.azure.cosmos.implementation.guava25.primitives.Longs.BYTES
  id: BYTES
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.primitives.Longs
  langs:
  - java
  name: BYTES
  nameWithType: Longs.BYTES
  fullName: com.azure.cosmos.implementation.guava25.primitives.Longs.BYTES
  type: Field
  package: com.azure.cosmos.implementation.guava25.primitives
  summary: >-
    The number of bytes required to represent a primitive `long` value.


    **Java 8 users:** use <xref uid="java.lang.Long.BYTES" data-throw-if-not-resolved="false">Long#BYTES</xref> instead.
  syntax:
    content: public static final int BYTES
    return:
      type: int
- uid: com.azure.cosmos.implementation.guava25.primitives.Longs.Longs()
  id: Longs()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.primitives.Longs
  langs:
  - java
  name: Longs()
  nameWithType: Longs.Longs()
  fullName: com.azure.cosmos.implementation.guava25.primitives.Longs.Longs()
  overload: com.azure.cosmos.implementation.guava25.primitives.Longs.Longs*
  type: Constructor
  package: com.azure.cosmos.implementation.guava25.primitives
  syntax:
    content: private Longs()
- uid: com.azure.cosmos.implementation.guava25.primitives.Longs.MAX_POWER_OF_TWO
  id: MAX_POWER_OF_TWO
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.primitives.Longs
  langs:
  - java
  name: MAX_POWER_OF_TWO
  nameWithType: Longs.MAX_POWER_OF_TWO
  fullName: com.azure.cosmos.implementation.guava25.primitives.Longs.MAX_POWER_OF_TWO
  type: Field
  package: com.azure.cosmos.implementation.guava25.primitives
  summary: The largest power of two that can be represented as a `long`.
  syntax:
    content: public static final long MAX_POWER_OF_TWO
    return:
      type: long
- uid: com.azure.cosmos.implementation.guava25.primitives.Longs.asList(long...)
  id: asList(long...)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.primitives.Longs
  langs:
  - java
  name: asList(long[] backingArray)
  nameWithType: Longs.asList(long[] backingArray)
  fullName: com.azure.cosmos.implementation.guava25.primitives.Longs.asList(long[] backingArray)
  overload: com.azure.cosmos.implementation.guava25.primitives.Longs.asList*
  type: Method
  package: com.azure.cosmos.implementation.guava25.primitives
  summary: >-
    Returns a fixed-size list backed by the specified array, similar to <xref uid="" data-throw-if-not-resolved="false">Arrays#asList(Object[])</xref>. The list supports <xref uid="java.util.List.set*" data-throw-if-not-resolved="false">List#set(int, Object)</xref>, but any attempt to set a value to `null` will result in a <xref uid="" data-throw-if-not-resolved="false">NullPointerException</xref>.


    The returned list maintains the values, but not the identities, of `Long` objects written to or read from it. For example, whether `list.get(0) == list.get(0)` is true for the returned list is unspecified.


    **Note:** when possible, you should represent your data as an <xref uid="" data-throw-if-not-resolved="false">ImmutableLongArray</xref> instead, which has an <xref uid="" data-throw-if-not-resolved="false">asList</xref> view.
  syntax:
    content: public static List<Long> asList(long[] backingArray)
    parameters:
    - id: backingArray
      type: long[]
      description: the array to back the list
    return:
      type: java.util.List<java.lang.Long>
      description: a list view of the array
- uid: com.azure.cosmos.implementation.guava25.primitives.Longs.compare(long,long)
  id: compare(long,long)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.primitives.Longs
  langs:
  - java
  name: compare(long a, long b)
  nameWithType: Longs.compare(long a, long b)
  fullName: com.azure.cosmos.implementation.guava25.primitives.Longs.compare(long a, long b)
  overload: com.azure.cosmos.implementation.guava25.primitives.Longs.compare*
  type: Method
  package: com.azure.cosmos.implementation.guava25.primitives
  summary: >-
    Compares the two specified `long` values. The sign of the value returned is the same as that of `((Long) a).compareTo(b)`.


    **Note for Java 7 and later:** this method should be treated as deprecated; use the equivalent <xref uid="java.lang.Long.compare" data-throw-if-not-resolved="false">Long#compare</xref> method instead.
  syntax:
    content: public static int compare(long a, long b)
    parameters:
    - id: a
      type: long
      description: the first <code>long</code> to compare
    - id: b
      type: long
      description: the second <code>long</code> to compare
    return:
      type: int
      description: >-
        a negative value if <code>a</code> is less than <code>b</code>; a positive value if <code>a</code> is
             greater than <code>b</code>; or zero if they are equal
- uid: com.azure.cosmos.implementation.guava25.primitives.Longs.concat(long[]...)
  id: concat(long[]...)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.primitives.Longs
  langs:
  - java
  name: concat(long[][] arrays)
  nameWithType: Longs.concat(long[][] arrays)
  fullName: com.azure.cosmos.implementation.guava25.primitives.Longs.concat(long[][] arrays)
  overload: com.azure.cosmos.implementation.guava25.primitives.Longs.concat*
  type: Method
  package: com.azure.cosmos.implementation.guava25.primitives
  summary: Returns the values from each provided array combined into a single array. For example, `concat(new long[] {a, b}, new long[] {}, new long[] {c}` returns the array `{a, b, c}`.
  syntax:
    content: public static long[] concat(long[][] arrays)
    parameters:
    - id: arrays
      type: long[][]
      description: zero or more <code>long</code> arrays
    return:
      type: long[]
      description: a single array containing all the values from the source arrays, in order
- uid: com.azure.cosmos.implementation.guava25.primitives.Longs.constrainToRange(long,long,long)
  id: constrainToRange(long,long,long)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.primitives.Longs
  langs:
  - java
  name: constrainToRange(long value, long min, long max)
  nameWithType: Longs.constrainToRange(long value, long min, long max)
  fullName: com.azure.cosmos.implementation.guava25.primitives.Longs.constrainToRange(long value, long min, long max)
  overload: com.azure.cosmos.implementation.guava25.primitives.Longs.constrainToRange*
  type: Method
  package: com.azure.cosmos.implementation.guava25.primitives
  summary: >-
    Returns the value nearest to `value` which is within the closed range `[min..max]`.


    If `value` is within the range `[min..max]`, `value` is returned unchanged. If `value` is less than `min`, `min` is returned, and if `value` is greater than `max`, `max` is returned.
  syntax:
    content: public static long constrainToRange(long value, long min, long max)
    parameters:
    - id: value
      type: long
      description: the <code>long</code> value to constrain
    - id: min
      type: long
      description: the lower bound (inclusive) of the range to constrain <code>value</code> to
    - id: max
      type: long
      description: the upper bound (inclusive) of the range to constrain <code>value</code> to
    return:
      type: long
- uid: com.azure.cosmos.implementation.guava25.primitives.Longs.contains(long[],long)
  id: contains(long[],long)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.primitives.Longs
  langs:
  - java
  name: contains(long[] array, long target)
  nameWithType: Longs.contains(long[] array, long target)
  fullName: com.azure.cosmos.implementation.guava25.primitives.Longs.contains(long[] array, long target)
  overload: com.azure.cosmos.implementation.guava25.primitives.Longs.contains*
  type: Method
  package: com.azure.cosmos.implementation.guava25.primitives
  summary: Returns `true` if `target` is present as an element anywhere in `array`.
  syntax:
    content: public static boolean contains(long[] array, long target)
    parameters:
    - id: array
      type: long[]
      description: an array of <code>long</code> values, possibly empty
    - id: target
      type: long
      description: a primitive <code>long</code> value
    return:
      type: boolean
      description: <code>true</code> if <code>array[i] == target</code> for some value of <code>i</code>
- uid: com.azure.cosmos.implementation.guava25.primitives.Longs.ensureCapacity(long[],int,int)
  id: ensureCapacity(long[],int,int)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.primitives.Longs
  langs:
  - java
  name: ensureCapacity(long[] array, int minLength, int padding)
  nameWithType: Longs.ensureCapacity(long[] array, int minLength, int padding)
  fullName: com.azure.cosmos.implementation.guava25.primitives.Longs.ensureCapacity(long[] array, int minLength, int padding)
  overload: com.azure.cosmos.implementation.guava25.primitives.Longs.ensureCapacity*
  type: Method
  package: com.azure.cosmos.implementation.guava25.primitives
  summary: Returns an array containing the same values as `array`, but guaranteed to be of a specified minimum length. If `array` already has a length of at least `minLength`, it is returned directly. Otherwise, a new array of size `minLength + padding` is returned, containing the values of `array`, and zeroes in the remaining places.
  syntax:
    content: public static long[] ensureCapacity(long[] array, int minLength, int padding)
    parameters:
    - id: array
      type: long[]
      description: the source array
    - id: minLength
      type: int
      description: the minimum length the returned array must guarantee
    - id: padding
      type: int
      description: an extra amount to "grow" the array by if growth is necessary
    return:
      type: long[]
      description: >-
        an array containing the values of <code>array</code>, with guaranteed minimum length <code>
             minLength</code>
- uid: com.azure.cosmos.implementation.guava25.primitives.Longs.fromByteArray(byte[])
  id: fromByteArray(byte[])
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.primitives.Longs
  langs:
  - java
  name: fromByteArray(byte[] bytes)
  nameWithType: Longs.fromByteArray(byte[] bytes)
  fullName: com.azure.cosmos.implementation.guava25.primitives.Longs.fromByteArray(byte[] bytes)
  overload: com.azure.cosmos.implementation.guava25.primitives.Longs.fromByteArray*
  type: Method
  package: com.azure.cosmos.implementation.guava25.primitives
  summary: >-
    Returns the `long` value whose big-endian representation is stored in the first 8 bytes of `bytes`; equivalent to `ByteBuffer.wrap(bytes).getLong()`. For example, the input byte array `{0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19}` would yield the `long` value `0x1213141516171819L`.


    Arguably, it's preferable to use <xref uid="java.nio.ByteBuffer" data-throw-if-not-resolved="false">java.nio.ByteBuffer</xref>; that library exposes much more flexibility at little cost in readability.
  syntax:
    content: public static long fromByteArray(byte[] bytes)
    parameters:
    - id: bytes
      type: byte[]
    return:
      type: long
- uid: com.azure.cosmos.implementation.guava25.primitives.Longs.fromBytes(byte,byte,byte,byte,byte,byte,byte,byte)
  id: fromBytes(byte,byte,byte,byte,byte,byte,byte,byte)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.primitives.Longs
  langs:
  - java
  name: fromBytes(byte b1, byte b2, byte b3, byte b4, byte b5, byte b6, byte b7, byte b8)
  nameWithType: Longs.fromBytes(byte b1, byte b2, byte b3, byte b4, byte b5, byte b6, byte b7, byte b8)
  fullName: com.azure.cosmos.implementation.guava25.primitives.Longs.fromBytes(byte b1, byte b2, byte b3, byte b4, byte b5, byte b6, byte b7, byte b8)
  overload: com.azure.cosmos.implementation.guava25.primitives.Longs.fromBytes*
  type: Method
  package: com.azure.cosmos.implementation.guava25.primitives
  summary: Returns the `long` value whose byte representation is the given 8 bytes, in big-endian order; equivalent to `Longs.fromByteArray(new byte[] {b1, b2, b3, b4, b5, b6, b7, b8})`.
  syntax:
    content: public static long fromBytes(byte b1, byte b2, byte b3, byte b4, byte b5, byte b6, byte b7, byte b8)
    parameters:
    - id: b1
      type: byte
    - id: b2
      type: byte
    - id: b3
      type: byte
    - id: b4
      type: byte
    - id: b5
      type: byte
    - id: b6
      type: byte
    - id: b7
      type: byte
    - id: b8
      type: byte
    return:
      type: long
- uid: com.azure.cosmos.implementation.guava25.primitives.Longs.hashCode(long)
  id: hashCode(long)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.primitives.Longs
  langs:
  - java
  name: hashCode(long value)
  nameWithType: Longs.hashCode(long value)
  fullName: com.azure.cosmos.implementation.guava25.primitives.Longs.hashCode(long value)
  overload: com.azure.cosmos.implementation.guava25.primitives.Longs.hashCode*
  type: Method
  package: com.azure.cosmos.implementation.guava25.primitives
  summary: >-
    Returns a hash code for `value`; equal to the result of invoking `((Long) value).hashCode()`.


    This method always return the value specified by <xref uid="java.lang.Long.hashCode*" data-throw-if-not-resolved="false">Long#hashCode()</xref> in java, which might be different from `((Long) value).hashCode()` in GWT because <xref uid="java.lang.Long.hashCode*" data-throw-if-not-resolved="false">Long#hashCode()</xref> in GWT does not obey the JRE contract.


    **Java 8 users:** use <xref uid="java.lang.Long.hashCode*" data-throw-if-not-resolved="false">Long#hashCode(long)</xref> instead.
  syntax:
    content: public static int hashCode(long value)
    parameters:
    - id: value
      type: long
      description: a primitive <code>long</code> value
    return:
      type: int
      description: a hash code for the value
- uid: com.azure.cosmos.implementation.guava25.primitives.Longs.indexOf(long[],long)
  id: indexOf(long[],long)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.primitives.Longs
  langs:
  - java
  name: indexOf(long[] array, long target)
  nameWithType: Longs.indexOf(long[] array, long target)
  fullName: com.azure.cosmos.implementation.guava25.primitives.Longs.indexOf(long[] array, long target)
  overload: com.azure.cosmos.implementation.guava25.primitives.Longs.indexOf*
  type: Method
  package: com.azure.cosmos.implementation.guava25.primitives
  summary: Returns the index of the first appearance of the value `target` in `array`.
  syntax:
    content: public static int indexOf(long[] array, long target)
    parameters:
    - id: array
      type: long[]
      description: an array of <code>long</code> values, possibly empty
    - id: target
      type: long
      description: a primitive <code>long</code> value
    return:
      type: int
      description: >-
        the least index <code>i</code> for which <code>array[i] == target</code>, or <code>-1</code> if no
             such index exists.
- uid: com.azure.cosmos.implementation.guava25.primitives.Longs.indexOf(long[],long[])
  id: indexOf(long[],long[])
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.primitives.Longs
  langs:
  - java
  name: indexOf(long[] array, long[] target)
  nameWithType: Longs.indexOf(long[] array, long[] target)
  fullName: com.azure.cosmos.implementation.guava25.primitives.Longs.indexOf(long[] array, long[] target)
  overload: com.azure.cosmos.implementation.guava25.primitives.Longs.indexOf*
  type: Method
  package: com.azure.cosmos.implementation.guava25.primitives
  summary: >-
    Returns the start position of the first occurrence of the specified `target` within `array`, or `-1` if there is no such occurrence.


    More formally, returns the lowest index `i` such that `Arrays.copyOfRange(array, i, i + target.length)` contains exactly the same elements as `target`.
  syntax:
    content: public static int indexOf(long[] array, long[] target)
    parameters:
    - id: array
      type: long[]
      description: the array to search for the sequence <code>target</code>
    - id: target
      type: long[]
      description: the array to search for as a sub-sequence of <code>array</code>
    return:
      type: int
- uid: com.azure.cosmos.implementation.guava25.primitives.Longs.join(java.lang.String,long...)
  id: join(java.lang.String,long...)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.primitives.Longs
  langs:
  - java
  name: join(String separator, long[] array)
  nameWithType: Longs.join(String separator, long[] array)
  fullName: com.azure.cosmos.implementation.guava25.primitives.Longs.join(String separator, long[] array)
  overload: com.azure.cosmos.implementation.guava25.primitives.Longs.join*
  type: Method
  package: com.azure.cosmos.implementation.guava25.primitives
  summary: Returns a string containing the supplied `long` values separated by `separator`. For example, `join("-", 1L, 2L, 3L)` returns the string `"1-2-3"`.
  syntax:
    content: public static String join(String separator, long[] array)
    parameters:
    - id: separator
      type: java.lang.String
      description: >-
        the text that should appear between consecutive values in the resulting string
             (but not at the start or end)
    - id: array
      type: long[]
      description: an array of <code>long</code> values, possibly empty
    return:
      type: java.lang.String
- uid: com.azure.cosmos.implementation.guava25.primitives.Longs.lastIndexOf(long[],long)
  id: lastIndexOf(long[],long)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.primitives.Longs
  langs:
  - java
  name: lastIndexOf(long[] array, long target)
  nameWithType: Longs.lastIndexOf(long[] array, long target)
  fullName: com.azure.cosmos.implementation.guava25.primitives.Longs.lastIndexOf(long[] array, long target)
  overload: com.azure.cosmos.implementation.guava25.primitives.Longs.lastIndexOf*
  type: Method
  package: com.azure.cosmos.implementation.guava25.primitives
  summary: Returns the index of the last appearance of the value `target` in `array`.
  syntax:
    content: public static int lastIndexOf(long[] array, long target)
    parameters:
    - id: array
      type: long[]
      description: an array of <code>long</code> values, possibly empty
    - id: target
      type: long
      description: a primitive <code>long</code> value
    return:
      type: int
      description: >-
        the greatest index <code>i</code> for which <code>array[i] == target</code>, or <code>-1</code> if no
             such index exists.
- uid: com.azure.cosmos.implementation.guava25.primitives.Longs.lexicographicalComparator()
  id: lexicographicalComparator()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.primitives.Longs
  langs:
  - java
  name: lexicographicalComparator()
  nameWithType: Longs.lexicographicalComparator()
  fullName: com.azure.cosmos.implementation.guava25.primitives.Longs.lexicographicalComparator()
  overload: com.azure.cosmos.implementation.guava25.primitives.Longs.lexicographicalComparator*
  type: Method
  package: com.azure.cosmos.implementation.guava25.primitives
  summary: >-
    Returns a comparator that compares two `long` arrays [lexicographically][]. That is, it compares, using <xref uid="com.azure.cosmos.implementation.guava25.primitives.Longs.compare(long,long)" data-throw-if-not-resolved="false">#compare(long, long)</xref>), the first pair of values that follow any common prefix, or when one array is a prefix of the other, treats the shorter array as the lesser. For example, `[] < [1L] < [1L, 2L] < [2L]`.


    The returned comparator is inconsistent with <xref uid="java.lang.Object.equals(java.lang.Object)" data-throw-if-not-resolved="false">Object#equals(Object)</xref> (since arrays support only identity equality), but it is consistent with <xref uid="Arrays#equals(long[],
     long[])" data-throw-if-not-resolved="false">Arrays#equals(long[],
     long[])</xref>.


    [lexicographically]: http://en.wikipedia.org/wiki/Lexicographical_order
  syntax:
    content: public static Comparator<long[]> lexicographicalComparator()
    return:
      type: java.util.Comparator<long[]>
- uid: com.azure.cosmos.implementation.guava25.primitives.Longs.max(long...)
  id: max(long...)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.primitives.Longs
  langs:
  - java
  name: max(long[] array)
  nameWithType: Longs.max(long[] array)
  fullName: com.azure.cosmos.implementation.guava25.primitives.Longs.max(long[] array)
  overload: com.azure.cosmos.implementation.guava25.primitives.Longs.max*
  type: Method
  package: com.azure.cosmos.implementation.guava25.primitives
  summary: Returns the greatest value present in `array`.
  syntax:
    content: public static long max(long[] array)
    parameters:
    - id: array
      type: long[]
      description: a <i>nonempty</i> array of <code>long</code> values
    return:
      type: long
      description: >-
        the value present in <code>array</code> that is greater than or equal to every other value
             in the array
- uid: com.azure.cosmos.implementation.guava25.primitives.Longs.min(long...)
  id: min(long...)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.primitives.Longs
  langs:
  - java
  name: min(long[] array)
  nameWithType: Longs.min(long[] array)
  fullName: com.azure.cosmos.implementation.guava25.primitives.Longs.min(long[] array)
  overload: com.azure.cosmos.implementation.guava25.primitives.Longs.min*
  type: Method
  package: com.azure.cosmos.implementation.guava25.primitives
  summary: Returns the least value present in `array`.
  syntax:
    content: public static long min(long[] array)
    parameters:
    - id: array
      type: long[]
      description: a <i>nonempty</i> array of <code>long</code> values
    return:
      type: long
      description: >-
        the value present in <code>array</code> that is less than or equal to every other value in
             the array
- uid: com.azure.cosmos.implementation.guava25.primitives.Longs.reverse(long[])
  id: reverse(long[])
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.primitives.Longs
  langs:
  - java
  name: reverse(long[] array)
  nameWithType: Longs.reverse(long[] array)
  fullName: com.azure.cosmos.implementation.guava25.primitives.Longs.reverse(long[] array)
  overload: com.azure.cosmos.implementation.guava25.primitives.Longs.reverse*
  type: Method
  package: com.azure.cosmos.implementation.guava25.primitives
  summary: Reverses the elements of `array`. This is equivalent to `Collections.reverse(Longs.asList(array))`, but is likely to be more efficient.
  syntax:
    content: public static void reverse(long[] array)
    parameters:
    - id: array
      type: long[]
- uid: com.azure.cosmos.implementation.guava25.primitives.Longs.reverse(long[],int,int)
  id: reverse(long[],int,int)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.primitives.Longs
  langs:
  - java
  name: reverse(long[] array, int fromIndex, int toIndex)
  nameWithType: Longs.reverse(long[] array, int fromIndex, int toIndex)
  fullName: com.azure.cosmos.implementation.guava25.primitives.Longs.reverse(long[] array, int fromIndex, int toIndex)
  overload: com.azure.cosmos.implementation.guava25.primitives.Longs.reverse*
  type: Method
  package: com.azure.cosmos.implementation.guava25.primitives
  summary: Reverses the elements of `array` between `fromIndex` inclusive and `toIndex` exclusive. This is equivalent to `Collections.reverse(Longs.asList(array).subList(fromIndex, toIndex))`, but is likely to be more efficient.
  syntax:
    content: public static void reverse(long[] array, int fromIndex, int toIndex)
    parameters:
    - id: array
      type: long[]
    - id: fromIndex
      type: int
    - id: toIndex
      type: int
- uid: com.azure.cosmos.implementation.guava25.primitives.Longs.sortDescending(long[])
  id: sortDescending(long[])
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.primitives.Longs
  langs:
  - java
  name: sortDescending(long[] array)
  nameWithType: Longs.sortDescending(long[] array)
  fullName: com.azure.cosmos.implementation.guava25.primitives.Longs.sortDescending(long[] array)
  overload: com.azure.cosmos.implementation.guava25.primitives.Longs.sortDescending*
  type: Method
  package: com.azure.cosmos.implementation.guava25.primitives
  summary: Sorts the elements of `array` in descending order.
  syntax:
    content: public static void sortDescending(long[] array)
    parameters:
    - id: array
      type: long[]
- uid: com.azure.cosmos.implementation.guava25.primitives.Longs.sortDescending(long[],int,int)
  id: sortDescending(long[],int,int)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.primitives.Longs
  langs:
  - java
  name: sortDescending(long[] array, int fromIndex, int toIndex)
  nameWithType: Longs.sortDescending(long[] array, int fromIndex, int toIndex)
  fullName: com.azure.cosmos.implementation.guava25.primitives.Longs.sortDescending(long[] array, int fromIndex, int toIndex)
  overload: com.azure.cosmos.implementation.guava25.primitives.Longs.sortDescending*
  type: Method
  package: com.azure.cosmos.implementation.guava25.primitives
  summary: Sorts the elements of `array` between `fromIndex` inclusive and `toIndex` exclusive in descending order.
  syntax:
    content: public static void sortDescending(long[] array, int fromIndex, int toIndex)
    parameters:
    - id: array
      type: long[]
    - id: fromIndex
      type: int
    - id: toIndex
      type: int
- uid: com.azure.cosmos.implementation.guava25.primitives.Longs.stringConverter()
  id: stringConverter()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.primitives.Longs
  langs:
  - java
  name: stringConverter()
  nameWithType: Longs.stringConverter()
  fullName: com.azure.cosmos.implementation.guava25.primitives.Longs.stringConverter()
  overload: com.azure.cosmos.implementation.guava25.primitives.Longs.stringConverter*
  type: Method
  package: com.azure.cosmos.implementation.guava25.primitives
  summary: >-
    Returns a serializable converter object that converts between strings and longs using <xref uid="java.lang.Long.decode" data-throw-if-not-resolved="false">Long#decode</xref> and <xref uid="java.lang.Long.toString*" data-throw-if-not-resolved="false">Long#toString()</xref>. The returned converter throws <xref uid="" data-throw-if-not-resolved="false">NumberFormatException</xref> if the input string is invalid.


    **Warning:** please see <xref uid="java.lang.Long.decode" data-throw-if-not-resolved="false">Long#decode</xref> to understand exactly how strings are parsed. For example, the string `"0123"` is treated as *octal* and converted to the value `83L`.
  syntax:
    content: public static Converter<String,Long> stringConverter()
    return:
      type: com.azure.cosmos.implementation.guava25.base.Converter<java.lang.String,java.lang.Long>
- uid: com.azure.cosmos.implementation.guava25.primitives.Longs.toArray(java.util.Collection<? extends java.lang.Number>)
  id: toArray(java.util.Collection<? extends java.lang.Number>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.primitives.Longs
  langs:
  - java
  name: toArray(Collection<? extends Number> collection)
  nameWithType: Longs.toArray(Collection<? extends Number> collection)
  fullName: com.azure.cosmos.implementation.guava25.primitives.Longs.toArray(Collection<? extends Number> collection)
  overload: com.azure.cosmos.implementation.guava25.primitives.Longs.toArray*
  type: Method
  package: com.azure.cosmos.implementation.guava25.primitives
  summary: >-
    Returns an array containing each value of `collection`, converted to a `long` value in the manner of <xref uid="? extends java.lang.Number.longValue" data-throw-if-not-resolved="false">Number#longValue</xref>.


    Elements are copied from the argument collection as if by `collection.toArray()`. Calling this method is as thread-safe as calling that method.
  syntax:
    content: public static long[] toArray(Collection<? extends Number> collection)
    parameters:
    - id: collection
      type: java.util.Collection<? extends java.lang.Number>
      description: a collection of <code>Number</code> instances
    return:
      type: long[]
      description: >-
        an array containing the same values as <code>collection</code>, in the same order, converted
             to primitives
- uid: com.azure.cosmos.implementation.guava25.primitives.Longs.toByteArray(long)
  id: toByteArray(long)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.primitives.Longs
  langs:
  - java
  name: toByteArray(long value)
  nameWithType: Longs.toByteArray(long value)
  fullName: com.azure.cosmos.implementation.guava25.primitives.Longs.toByteArray(long value)
  overload: com.azure.cosmos.implementation.guava25.primitives.Longs.toByteArray*
  type: Method
  package: com.azure.cosmos.implementation.guava25.primitives
  summary: >-
    Returns a big-endian representation of `value` in an 8-element byte array; equivalent to `ByteBuffer.allocate(8).putLong(value).array()`. For example, the input value `0x1213141516171819L` would yield the byte array `{0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19}`.


    If you need to convert and concatenate several values (possibly even of different types), use a shared <xref uid="java.nio.ByteBuffer" data-throw-if-not-resolved="false">java.nio.ByteBuffer</xref> instance, or use <xref uid="" data-throw-if-not-resolved="false">com.azure.cosmos.io.ByteStreams#newDataOutput()</xref> to get a growable buffer.
  syntax:
    content: public static byte[] toByteArray(long value)
    parameters:
    - id: value
      type: long
    return:
      type: byte[]
- uid: com.azure.cosmos.implementation.guava25.primitives.Longs.tryParse(java.lang.String)
  id: tryParse(java.lang.String)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.primitives.Longs
  langs:
  - java
  name: tryParse(String string)
  nameWithType: Longs.tryParse(String string)
  fullName: com.azure.cosmos.implementation.guava25.primitives.Longs.tryParse(String string)
  overload: com.azure.cosmos.implementation.guava25.primitives.Longs.tryParse*
  type: Method
  package: com.azure.cosmos.implementation.guava25.primitives
  summary: >-
    Parses the specified string as a signed decimal long value. The ASCII character `'-'` ( `'\u002D'`) is recognized as the minus sign.


    Unlike <xref uid="java.lang.Long.parseLong*" data-throw-if-not-resolved="false">Long#parseLong(String)</xref>, this method returns `null` instead of throwing an exception if parsing fails. Additionally, this method only accepts ASCII digits, and returns `null` if non-ASCII digits are present in the string.


    Note that strings prefixed with ASCII `'+'` are rejected, even under JDK 7, despite the change to <xref uid="java.lang.Long.parseLong*" data-throw-if-not-resolved="false">Long#parseLong(String)</xref> for that version.
  syntax:
    content: public static Long tryParse(String string)
    parameters:
    - id: string
      type: java.lang.String
      description: the string representation of a long value
    return:
      type: java.lang.Long
      description: >-
        the long value represented by <code>string</code>, or <code>null</code> if <code>string</code> has a
             length of zero or cannot be parsed as a long value
- uid: com.azure.cosmos.implementation.guava25.primitives.Longs.tryParse(java.lang.String,int)
  id: tryParse(java.lang.String,int)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.primitives.Longs
  langs:
  - java
  name: tryParse(String string, int radix)
  nameWithType: Longs.tryParse(String string, int radix)
  fullName: com.azure.cosmos.implementation.guava25.primitives.Longs.tryParse(String string, int radix)
  overload: com.azure.cosmos.implementation.guava25.primitives.Longs.tryParse*
  type: Method
  package: com.azure.cosmos.implementation.guava25.primitives
  summary: >-
    Parses the specified string as a signed long value using the specified radix. The ASCII character `'-'` (`'\u002D'`) is recognized as the minus sign.


    Unlike <xref uid="java.lang.Long.parseLong*" data-throw-if-not-resolved="false">Long#parseLong(String, int)</xref>, this method returns `null` instead of throwing an exception if parsing fails. Additionally, this method only accepts ASCII digits, and returns `null` if non-ASCII digits are present in the string.


    Note that strings prefixed with ASCII `'+'` are rejected, even under JDK 7, despite the change to <xref uid="java.lang.Long.parseLong*" data-throw-if-not-resolved="false">Long#parseLong(String, int)</xref> for that version.
  syntax:
    content: public static Long tryParse(String string, int radix)
    parameters:
    - id: string
      type: java.lang.String
      description: the string representation of an long value
    - id: radix
      type: int
      description: the radix to use when parsing
    return:
      type: java.lang.Long
      description: >-
        the long value represented by <code>string</code> using <code>radix</code>, or <code>null</code> if
             <code>string</code> has a length of zero or cannot be parsed as a long value
references:
- uid: com.azure.cosmos.implementation.guava25.primitives.Longs.Longs*
  name: Longs
  nameWithType: Longs.Longs
  fullName: com.azure.cosmos.implementation.guava25.primitives.Longs.Longs
  package: com.azure.cosmos.implementation.guava25.primitives
- uid: long
  spec.java:
  - uid: long
    name: long
    fullName: long
- uid: int
  spec.java:
  - uid: int
    name: int
    fullName: int
- uid: com.azure.cosmos.implementation.guava25.primitives.Longs.hashCode*
  name: hashCode
  nameWithType: Longs.hashCode
  fullName: com.azure.cosmos.implementation.guava25.primitives.Longs.hashCode
  package: com.azure.cosmos.implementation.guava25.primitives
- uid: com.azure.cosmos.implementation.guava25.primitives.Longs.compare*
  name: compare
  nameWithType: Longs.compare
  fullName: com.azure.cosmos.implementation.guava25.primitives.Longs.compare
  package: com.azure.cosmos.implementation.guava25.primitives
- uid: long[]
  spec.java:
  - uid: long
    name: long
    fullName: long
  - name: '[]'
    fullName: '[]'
- uid: boolean
  spec.java:
  - uid: boolean
    name: boolean
    fullName: boolean
- uid: com.azure.cosmos.implementation.guava25.primitives.Longs.contains*
  name: contains
  nameWithType: Longs.contains
  fullName: com.azure.cosmos.implementation.guava25.primitives.Longs.contains
  package: com.azure.cosmos.implementation.guava25.primitives
- uid: com.azure.cosmos.implementation.guava25.primitives.Longs.indexOf*
  name: indexOf
  nameWithType: Longs.indexOf
  fullName: com.azure.cosmos.implementation.guava25.primitives.Longs.indexOf
  package: com.azure.cosmos.implementation.guava25.primitives
- uid: com.azure.cosmos.implementation.guava25.primitives.Longs.lastIndexOf*
  name: lastIndexOf
  nameWithType: Longs.lastIndexOf
  fullName: com.azure.cosmos.implementation.guava25.primitives.Longs.lastIndexOf
  package: com.azure.cosmos.implementation.guava25.primitives
- uid: com.azure.cosmos.implementation.guava25.primitives.Longs.min*
  name: min
  nameWithType: Longs.min
  fullName: com.azure.cosmos.implementation.guava25.primitives.Longs.min
  package: com.azure.cosmos.implementation.guava25.primitives
- uid: com.azure.cosmos.implementation.guava25.primitives.Longs.max*
  name: max
  nameWithType: Longs.max
  fullName: com.azure.cosmos.implementation.guava25.primitives.Longs.max
  package: com.azure.cosmos.implementation.guava25.primitives
- uid: com.azure.cosmos.implementation.guava25.primitives.Longs.constrainToRange*
  name: constrainToRange
  nameWithType: Longs.constrainToRange
  fullName: com.azure.cosmos.implementation.guava25.primitives.Longs.constrainToRange
  package: com.azure.cosmos.implementation.guava25.primitives
- uid: long[][]
  spec.java:
  - uid: long
    name: long
    fullName: long
  - name: '[]'
    fullName: '[]'
  - name: '[]'
    fullName: '[]'
- uid: com.azure.cosmos.implementation.guava25.primitives.Longs.concat*
  name: concat
  nameWithType: Longs.concat
  fullName: com.azure.cosmos.implementation.guava25.primitives.Longs.concat
  package: com.azure.cosmos.implementation.guava25.primitives
- uid: byte[]
  spec.java:
  - uid: byte
    name: byte
    fullName: byte
  - name: '[]'
    fullName: '[]'
- uid: com.azure.cosmos.implementation.guava25.primitives.Longs.toByteArray*
  name: toByteArray
  nameWithType: Longs.toByteArray
  fullName: com.azure.cosmos.implementation.guava25.primitives.Longs.toByteArray
  package: com.azure.cosmos.implementation.guava25.primitives
- uid: com.azure.cosmos.implementation.guava25.primitives.Longs.fromByteArray*
  name: fromByteArray
  nameWithType: Longs.fromByteArray
  fullName: com.azure.cosmos.implementation.guava25.primitives.Longs.fromByteArray
  package: com.azure.cosmos.implementation.guava25.primitives
- uid: byte
  spec.java:
  - uid: byte
    name: byte
    fullName: byte
- uid: com.azure.cosmos.implementation.guava25.primitives.Longs.fromBytes*
  name: fromBytes
  nameWithType: Longs.fromBytes
  fullName: com.azure.cosmos.implementation.guava25.primitives.Longs.fromBytes
  package: com.azure.cosmos.implementation.guava25.primitives
- uid: java.lang.String
  spec.java:
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
- uid: java.lang.Long
  spec.java:
  - uid: java.lang.Long
    name: Long
    fullName: java.lang.Long
- uid: com.azure.cosmos.implementation.guava25.primitives.Longs.tryParse*
  name: tryParse
  nameWithType: Longs.tryParse
  fullName: com.azure.cosmos.implementation.guava25.primitives.Longs.tryParse
  package: com.azure.cosmos.implementation.guava25.primitives
- uid: com.azure.cosmos.implementation.guava25.base.Converter<java.lang.String,java.lang.Long>
  spec.java:
  - uid: com.azure.cosmos.implementation.guava25.base.Converter
    name: Converter
    fullName: com.azure.cosmos.implementation.guava25.base.Converter
  - name: <
    fullName: <
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
  - name: ','
    fullName: ','
  - uid: java.lang.Long
    name: Long
    fullName: java.lang.Long
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.primitives.Longs.stringConverter*
  name: stringConverter
  nameWithType: Longs.stringConverter
  fullName: com.azure.cosmos.implementation.guava25.primitives.Longs.stringConverter
  package: com.azure.cosmos.implementation.guava25.primitives
- uid: com.azure.cosmos.implementation.guava25.primitives.Longs.ensureCapacity*
  name: ensureCapacity
  nameWithType: Longs.ensureCapacity
  fullName: com.azure.cosmos.implementation.guava25.primitives.Longs.ensureCapacity
  package: com.azure.cosmos.implementation.guava25.primitives
- uid: com.azure.cosmos.implementation.guava25.primitives.Longs.join*
  name: join
  nameWithType: Longs.join
  fullName: com.azure.cosmos.implementation.guava25.primitives.Longs.join
  package: com.azure.cosmos.implementation.guava25.primitives
- uid: java.util.Comparator<long[]>
  spec.java:
  - uid: java.util.Comparator
    name: Comparator
    fullName: java.util.Comparator
  - name: <
    fullName: <
  - uid: long
    name: long
    fullName: long
  - name: '[]'
    fullName: '[]'
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.primitives.Longs.lexicographicalComparator*
  name: lexicographicalComparator
  nameWithType: Longs.lexicographicalComparator
  fullName: com.azure.cosmos.implementation.guava25.primitives.Longs.lexicographicalComparator
  package: com.azure.cosmos.implementation.guava25.primitives
- uid: com.azure.cosmos.implementation.guava25.primitives.Longs.sortDescending*
  name: sortDescending
  nameWithType: Longs.sortDescending
  fullName: com.azure.cosmos.implementation.guava25.primitives.Longs.sortDescending
  package: com.azure.cosmos.implementation.guava25.primitives
- uid: com.azure.cosmos.implementation.guava25.primitives.Longs.reverse*
  name: reverse
  nameWithType: Longs.reverse
  fullName: com.azure.cosmos.implementation.guava25.primitives.Longs.reverse
  package: com.azure.cosmos.implementation.guava25.primitives
- uid: java.util.Collection<? extends java.lang.Number>
  spec.java:
  - uid: java.util.Collection
    name: Collection
    fullName: java.util.Collection
  - name: <
    fullName: <
  - uid: '? extends java.lang.Number'
    name: Number
    fullName: '? extends java.lang.Number'
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.primitives.Longs.toArray*
  name: toArray
  nameWithType: Longs.toArray
  fullName: com.azure.cosmos.implementation.guava25.primitives.Longs.toArray
  package: com.azure.cosmos.implementation.guava25.primitives
- uid: java.util.List<java.lang.Long>
  spec.java:
  - uid: java.util.List
    name: List
    fullName: java.util.List
  - name: <
    fullName: <
  - uid: java.lang.Long
    name: Long
    fullName: java.lang.Long
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.primitives.Longs.asList*
  name: asList
  nameWithType: Longs.asList
  fullName: com.azure.cosmos.implementation.guava25.primitives.Longs.asList
  package: com.azure.cosmos.implementation.guava25.primitives
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: java.lang.Object.finalize()
  name: Object.finalize()
  nameWithType: Object.finalize()
  fullName: java.lang.Object.finalize()
- uid: java.lang.Object.clone()
  name: Object.clone()
  nameWithType: Object.clone()
  fullName: java.lang.Object.clone()
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: java.lang.Object.equals(java.lang.Object)
  name: Object.equals(Object)
  nameWithType: Object.equals(Object)
  fullName: java.lang.Object.equals(java.lang.Object)
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.lang.Object.hashCode()
  name: Object.hashCode()
  nameWithType: Object.hashCode()
  fullName: java.lang.Object.hashCode()
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: java.lang.Object.toString()
  name: Object.toString()
  nameWithType: Object.toString()
  fullName: java.lang.Object.toString()
- uid: java.lang.String,java.lang.Long
  name: String,Long
  nameWithType: String,Long
  fullName: java.lang.String,java.lang.Long
- uid: com.azure.cosmos.implementation.guava25.base.Converter
  name: Converter
  nameWithType: Converter
  fullName: com.azure.cosmos.implementation.guava25.base.Converter
- uid: java.util.Comparator
  name: Comparator
  nameWithType: Comparator
  fullName: java.util.Comparator
- uid: java.util.Collection
  name: Collection
  nameWithType: Collection
  fullName: java.util.Collection
- uid: '? extends java.lang.Number'
  name: '? extends Number'
  nameWithType: '? extends Number'
  fullName: '? extends java.lang.Number'
- uid: java.util.List
  name: List
  nameWithType: List
  fullName: java.util.List
