### YamlMime:ManagedReference
items:
- uid: org.apache.commons.codec.digest.UnixCrypt
  id: UnixCrypt
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.apache.commons.codec.digest
  children:
  - org.apache.commons.codec.digest.UnixCrypt.UnixCrypt()
  - org.apache.commons.codec.digest.UnixCrypt.crypt(byte[])
  - org.apache.commons.codec.digest.UnixCrypt.crypt(byte[],java.lang.String)
  - org.apache.commons.codec.digest.UnixCrypt.crypt(java.lang.String)
  - org.apache.commons.codec.digest.UnixCrypt.crypt(java.lang.String,java.lang.String)
  langs:
  - java
  name: UnixCrypt
  nameWithType: UnixCrypt
  fullName: org.apache.commons.codec.digest.UnixCrypt
  type: Class
  package: org.apache.commons.codec.digest
  summary: >-
    Unix crypt(3) algorithm implementation.


    This class only implements the traditional 56 bit DES based algorithm. Please use DigestUtils.crypt() for a method that distinguishes between all the algorithms supported in the current glibc's crypt().


    The Java implementation was taken from the JetSpeed Portal project (see org.apache.jetspeed.services.security.ldap.UnixCrypt).


    This class is slightly incompatible if the given salt contains characters that are not part of the allowed range \[a-zA-Z0-9./\].


    This class is immutable and thread-safe.
  syntax:
    content: public class UnixCrypt
  inheritance:
  - java.lang.Object
  inheritedMembers:
  - java.lang.Object.clone()
  - java.lang.Object.equals(java.lang.Object)
  - java.lang.Object.finalize()
  - java.lang.Object.getClass()
  - java.lang.Object.hashCode()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.toString()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
- uid: org.apache.commons.codec.digest.UnixCrypt.UnixCrypt()
  id: UnixCrypt()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.apache.commons.codec.digest.UnixCrypt
  langs:
  - java
  name: UnixCrypt()
  nameWithType: UnixCrypt.UnixCrypt()
  fullName: org.apache.commons.codec.digest.UnixCrypt.UnixCrypt()
  overload: org.apache.commons.codec.digest.UnixCrypt.UnixCrypt*
  type: Constructor
  package: org.apache.commons.codec.digest
  syntax:
    content: public UnixCrypt()
- uid: org.apache.commons.codec.digest.UnixCrypt.crypt(byte[])
  id: crypt(byte[])
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.apache.commons.codec.digest.UnixCrypt
  langs:
  - java
  name: crypt(byte[] original)
  nameWithType: UnixCrypt.crypt(byte[] original)
  fullName: org.apache.commons.codec.digest.UnixCrypt.crypt(byte[] original)
  overload: org.apache.commons.codec.digest.UnixCrypt.crypt*
  type: Method
  package: org.apache.commons.codec.digest
  summary: >-
    Generates a crypt(3) compatible hash using the DES algorithm.


    A salt is generated for you using <xref uid="" data-throw-if-not-resolved="false">ThreadLocalRandom</xref>; for more secure salts consider using <xref uid="" data-throw-if-not-resolved="false">SecureRandom</xref> to generate your own salts and calling <xref uid="org.apache.commons.codec.digest.UnixCrypt.crypt(byte[],java.lang.String)" data-throw-if-not-resolved="false">#crypt(byte[], String)</xref>.
  syntax:
    content: public static String crypt(byte[] original)
    parameters:
    - id: original
      type: byte[]
      description: plaintext password
    return:
      type: java.lang.String
      description: a 13 character string starting with the salt string
- uid: org.apache.commons.codec.digest.UnixCrypt.crypt(byte[],java.lang.String)
  id: crypt(byte[],java.lang.String)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.apache.commons.codec.digest.UnixCrypt
  langs:
  - java
  name: crypt(byte[] original, String salt)
  nameWithType: UnixCrypt.crypt(byte[] original, String salt)
  fullName: org.apache.commons.codec.digest.UnixCrypt.crypt(byte[] original, String salt)
  overload: org.apache.commons.codec.digest.UnixCrypt.crypt*
  type: Method
  package: org.apache.commons.codec.digest
  summary: >-
    Generates a crypt(3) compatible hash using the DES algorithm.


    Using unspecified characters as salt results incompatible hash values.
  syntax:
    content: public static String crypt(byte[] original, String salt)
    parameters:
    - id: original
      type: byte[]
      description: plaintext password
    - id: salt
      type: java.lang.String
      description: >-
        a two character string drawn from [a-zA-Z0-9./]. The salt may be null, in which case a salt is
                    generated for you using <xref uid="" data-throw-if-not-resolved="false">ThreadLocalRandom</xref>; for more secure salts consider using
                    <xref uid="" data-throw-if-not-resolved="false">SecureRandom</xref> to generate your own salts.
    return:
      type: java.lang.String
      description: a 13 character string starting with the salt string
- uid: org.apache.commons.codec.digest.UnixCrypt.crypt(java.lang.String)
  id: crypt(java.lang.String)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.apache.commons.codec.digest.UnixCrypt
  langs:
  - java
  name: crypt(String original)
  nameWithType: UnixCrypt.crypt(String original)
  fullName: org.apache.commons.codec.digest.UnixCrypt.crypt(String original)
  overload: org.apache.commons.codec.digest.UnixCrypt.crypt*
  type: Method
  package: org.apache.commons.codec.digest
  summary: >-
    Generates a crypt(3) compatible hash using the DES algorithm.


    A salt is generated for you using <xref uid="" data-throw-if-not-resolved="false">ThreadLocalRandom</xref>; for more secure salts consider using <xref uid="" data-throw-if-not-resolved="false">SecureRandom</xref> to generate your own salts and calling <xref uid="org.apache.commons.codec.digest.UnixCrypt.crypt(java.lang.String,java.lang.String)" data-throw-if-not-resolved="false">#crypt(String, String)</xref>.
  syntax:
    content: public static String crypt(String original)
    parameters:
    - id: original
      type: java.lang.String
      description: plaintext password
    return:
      type: java.lang.String
      description: a 13 character string starting with the salt string
- uid: org.apache.commons.codec.digest.UnixCrypt.crypt(java.lang.String,java.lang.String)
  id: crypt(java.lang.String,java.lang.String)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.apache.commons.codec.digest.UnixCrypt
  langs:
  - java
  name: crypt(String original, String salt)
  nameWithType: UnixCrypt.crypt(String original, String salt)
  fullName: org.apache.commons.codec.digest.UnixCrypt.crypt(String original, String salt)
  overload: org.apache.commons.codec.digest.UnixCrypt.crypt*
  type: Method
  package: org.apache.commons.codec.digest
  summary: Generates a crypt(3) compatible hash using the DES algorithm.
  syntax:
    content: public static String crypt(String original, String salt)
    parameters:
    - id: original
      type: java.lang.String
      description: plaintext password
    - id: salt
      type: java.lang.String
      description: >-
        a two character string drawn from [a-zA-Z0-9./]. The salt may be null, in which case a salt is
                    generated for you using <xref uid="" data-throw-if-not-resolved="false">ThreadLocalRandom</xref>; for more secure salts consider using
                    <xref uid="" data-throw-if-not-resolved="false">SecureRandom</xref> to generate your own salts.
    return:
      type: java.lang.String
      description: a 13 character string starting with the salt string
references:
- uid: org.apache.commons.codec.digest.UnixCrypt.UnixCrypt*
  name: UnixCrypt
  nameWithType: UnixCrypt.UnixCrypt
  fullName: org.apache.commons.codec.digest.UnixCrypt.UnixCrypt
  package: org.apache.commons.codec.digest
- uid: byte[]
  spec.java:
  - uid: byte
    name: byte
    fullName: byte
  - name: '[]'
    fullName: '[]'
- uid: java.lang.String
  spec.java:
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
- uid: org.apache.commons.codec.digest.UnixCrypt.crypt*
  name: crypt
  nameWithType: UnixCrypt.crypt
  fullName: org.apache.commons.codec.digest.UnixCrypt.crypt
  package: org.apache.commons.codec.digest
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: java.lang.Object.finalize()
  name: Object.finalize()
  nameWithType: Object.finalize()
  fullName: java.lang.Object.finalize()
- uid: java.lang.Object.clone()
  name: Object.clone()
  nameWithType: Object.clone()
  fullName: java.lang.Object.clone()
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: java.lang.Object.equals(java.lang.Object)
  name: Object.equals(Object)
  nameWithType: Object.equals(Object)
  fullName: java.lang.Object.equals(java.lang.Object)
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.lang.Object.hashCode()
  name: Object.hashCode()
  nameWithType: Object.hashCode()
  fullName: java.lang.Object.hashCode()
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: java.lang.Object.toString()
  name: Object.toString()
  nameWithType: Object.toString()
  fullName: java.lang.Object.toString()
