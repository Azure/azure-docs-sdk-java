### YamlMime:ManagedReference
items:
- uid: com.azure.security.keyvault.keys.KeyAsyncClient
  id: KeyAsyncClient
  artifact: com.azure:azure-security-keyvault-keys:4.2.0-beta.4
  parent: com.azure.security.keyvault.keys
  children:
  - com.azure.security.keyvault.keys.KeyAsyncClient.backupKey(java.lang.String)
  - com.azure.security.keyvault.keys.KeyAsyncClient.backupKeyWithResponse(java.lang.String)
  - com.azure.security.keyvault.keys.KeyAsyncClient.beginDeleteKey(java.lang.String)
  - com.azure.security.keyvault.keys.KeyAsyncClient.beginRecoverDeletedKey(java.lang.String)
  - com.azure.security.keyvault.keys.KeyAsyncClient.createEcKey(com.azure.security.keyvault.keys.models.CreateEcKeyOptions)
  - com.azure.security.keyvault.keys.KeyAsyncClient.createEcKeyWithResponse(com.azure.security.keyvault.keys.models.CreateEcKeyOptions)
  - com.azure.security.keyvault.keys.KeyAsyncClient.createKey(com.azure.security.keyvault.keys.models.CreateKeyOptions)
  - com.azure.security.keyvault.keys.KeyAsyncClient.createKey(java.lang.String,com.azure.security.keyvault.keys.models.KeyType)
  - com.azure.security.keyvault.keys.KeyAsyncClient.createKeyWithResponse(com.azure.security.keyvault.keys.models.CreateKeyOptions)
  - com.azure.security.keyvault.keys.KeyAsyncClient.createRsaKey(com.azure.security.keyvault.keys.models.CreateRsaKeyOptions)
  - com.azure.security.keyvault.keys.KeyAsyncClient.createRsaKeyWithResponse(com.azure.security.keyvault.keys.models.CreateRsaKeyOptions)
  - com.azure.security.keyvault.keys.KeyAsyncClient.getDeletedKey(java.lang.String)
  - com.azure.security.keyvault.keys.KeyAsyncClient.getDeletedKeyWithResponse(java.lang.String)
  - com.azure.security.keyvault.keys.KeyAsyncClient.getKey(java.lang.String)
  - com.azure.security.keyvault.keys.KeyAsyncClient.getKey(java.lang.String,java.lang.String)
  - com.azure.security.keyvault.keys.KeyAsyncClient.getKeyWithResponse(java.lang.String,java.lang.String)
  - com.azure.security.keyvault.keys.KeyAsyncClient.getVaultUrl()
  - com.azure.security.keyvault.keys.KeyAsyncClient.importKey(com.azure.security.keyvault.keys.models.ImportKeyOptions)
  - com.azure.security.keyvault.keys.KeyAsyncClient.importKey(java.lang.String,com.azure.security.keyvault.keys.models.JsonWebKey)
  - com.azure.security.keyvault.keys.KeyAsyncClient.importKeyWithResponse(com.azure.security.keyvault.keys.models.ImportKeyOptions)
  - com.azure.security.keyvault.keys.KeyAsyncClient.listDeletedKeys()
  - com.azure.security.keyvault.keys.KeyAsyncClient.listPropertiesOfKeyVersions(java.lang.String)
  - com.azure.security.keyvault.keys.KeyAsyncClient.listPropertiesOfKeys()
  - com.azure.security.keyvault.keys.KeyAsyncClient.purgeDeletedKey(java.lang.String)
  - com.azure.security.keyvault.keys.KeyAsyncClient.purgeDeletedKeyWithResponse(java.lang.String)
  - com.azure.security.keyvault.keys.KeyAsyncClient.restoreKeyBackup(byte[])
  - com.azure.security.keyvault.keys.KeyAsyncClient.restoreKeyBackupWithResponse(byte[])
  - com.azure.security.keyvault.keys.KeyAsyncClient.updateKeyProperties(com.azure.security.keyvault.keys.models.KeyProperties,com.azure.security.keyvault.keys.models.KeyOperation...)
  - com.azure.security.keyvault.keys.KeyAsyncClient.updateKeyPropertiesWithResponse(com.azure.security.keyvault.keys.models.KeyProperties,com.azure.security.keyvault.keys.models.KeyOperation...)
  langs:
  - java
  name: KeyAsyncClient
  nameWithType: KeyAsyncClient
  fullName: com.azure.security.keyvault.keys.KeyAsyncClient
  type: Class
  package: com.azure.security.keyvault.keys
  summary: >-
    The KeyAsyncClient provides asynchronous methods to manage <xref uid="com.azure.security.keyvault.keys.models.KeyVaultKey" data-throw-if-not-resolved="false">keys</xref> in the Azure Key Vault. The client supports creating, retrieving, updating, deleting, purging, backing up, restoring and listing the <xref uid="com.azure.security.keyvault.keys.models.KeyVaultKey" data-throw-if-not-resolved="false">keys</xref>. The client also supports listing <xref uid="com.azure.security.keyvault.keys.models.DeletedKey" data-throw-if-not-resolved="false">deleted keys</xref> for a soft-delete enabled Azure Key Vault.


    **Samples to construct the async client**


    ```java

    KeyAsyncClient keyAsyncClient = new KeyClientBuilder()
         .vaultUrl("https://myvault.azure.net/")
         .credential(new DefaultAzureCredentialBuilder().build())
         .buildAsyncClient();
    ```
  syntax:
    content: public final class KeyAsyncClient
  inheritance:
  - java.lang.Object
  inheritedMembers:
  - java.lang.Object.clone()
  - java.lang.Object.equals(java.lang.Object)
  - java.lang.Object.finalize()
  - java.lang.Object.getClass()
  - java.lang.Object.hashCode()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.toString()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
- uid: com.azure.security.keyvault.keys.KeyAsyncClient.KeyAsyncClient(java.net.URL,com.azure.core.http.HttpPipeline,com.azure.security.keyvault.keys.KeyServiceVersion)
  id: KeyAsyncClient(java.net.URL,com.azure.core.http.HttpPipeline,com.azure.security.keyvault.keys.KeyServiceVersion)
  artifact: com.azure:azure-security-keyvault-keys:4.2.0-beta.4
  parent: com.azure.security.keyvault.keys.KeyAsyncClient
  langs:
  - java
  name: KeyAsyncClient(URL vaultUrl, HttpPipeline pipeline, KeyServiceVersion version)
  nameWithType: KeyAsyncClient.KeyAsyncClient(URL vaultUrl, HttpPipeline pipeline, KeyServiceVersion version)
  fullName: com.azure.security.keyvault.keys.KeyAsyncClient.KeyAsyncClient(URL vaultUrl, HttpPipeline pipeline, KeyServiceVersion version)
  overload: com.azure.security.keyvault.keys.KeyAsyncClient.KeyAsyncClient*
  type: Constructor
  package: com.azure.security.keyvault.keys
  summary: Creates a KeyAsyncClient that uses `pipeline` to service requests
  syntax:
    content: " KeyAsyncClient(URL vaultUrl, HttpPipeline pipeline, KeyServiceVersion version)"
    parameters:
    - id: vaultUrl
      type: java.net.URL
      description: URL for the Azure KeyVault service.
    - id: pipeline
      type: com.azure.core.http.HttpPipeline
      description: HttpPipeline that the HTTP requests and responses flow through.
    - id: version
      type: com.azure.security.keyvault.keys.KeyServiceVersion
      description: <xref uid="com.azure.security.keyvault.keys.KeyServiceVersion" data-throw-if-not-resolved="false">KeyServiceVersion</xref> of the service to be used when making requests.
- uid: com.azure.security.keyvault.keys.KeyAsyncClient.backupKey(java.lang.String)
  id: backupKey(java.lang.String)
  artifact: com.azure:azure-security-keyvault-keys:4.2.0-beta.4
  parent: com.azure.security.keyvault.keys.KeyAsyncClient
  langs:
  - java
  name: backupKey(String name)
  nameWithType: KeyAsyncClient.backupKey(String name)
  fullName: com.azure.security.keyvault.keys.KeyAsyncClient.backupKey(String name)
  overload: com.azure.security.keyvault.keys.KeyAsyncClient.backupKey*
  type: Method
  package: com.azure.security.keyvault.keys
  summary: >-
    Requests a backup of the specified key be downloaded to the client. The Key Backup operation exports a key from Azure Key Vault in a protected form. Note that this operation does not return key material in a form that can be used outside the Azure Key Vault system, the returned key material is either protected to a Azure Key Vault HSM or to Azure Key Vault itself. The intent of this operation is to allow a client to generate a key in one Azure Key Vault instance, backup the key, and then restore it into another Azure Key Vault instance. The backup operation may be used to export, in protected form, any key type from Azure Key Vault. Individual versions of a key cannot be backed up. Backup / Restore can be performed within geographical boundaries only; meaning that a backup from one geographical area cannot be restored to another geographical area. For example, a backup from the US geographical area cannot be restored in an EU geographical area. This operation requires the `key/backup` permission.


    **Code Samples**


    Backs up the key from the key vault. Subscribes to the call asynchronously and prints out the length of the key's backup byte array returned in the response.


    ```java

    keyAsyncClient.backupKey("keyName")
         .subscriberContext(Context.of(key1, value1, key2, value2))
         .subscribe(keyBackupResponse ->
             System.out.printf("Key's Backup Byte array's length %s %n", keyBackupResponse.length));
    ```
  syntax:
    content: public Mono<byte[]> backupKey(String name)
    parameters:
    - id: name
      type: java.lang.String
      description: The name of the key.
    return:
      type: reactor.core.publisher.Mono<byte[]>
      description: A <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> containing the backed up key blob.
- uid: com.azure.security.keyvault.keys.KeyAsyncClient.backupKeyWithResponse(java.lang.String)
  id: backupKeyWithResponse(java.lang.String)
  artifact: com.azure:azure-security-keyvault-keys:4.2.0-beta.4
  parent: com.azure.security.keyvault.keys.KeyAsyncClient
  langs:
  - java
  name: backupKeyWithResponse(String name)
  nameWithType: KeyAsyncClient.backupKeyWithResponse(String name)
  fullName: com.azure.security.keyvault.keys.KeyAsyncClient.backupKeyWithResponse(String name)
  overload: com.azure.security.keyvault.keys.KeyAsyncClient.backupKeyWithResponse*
  type: Method
  package: com.azure.security.keyvault.keys
  summary: >-
    Requests a backup of the specified key be downloaded to the client. The Key Backup operation exports a key from Azure Key Vault in a protected form. Note that this operation does not return key material in a form that can be used outside the Azure Key Vault system, the returned key material is either protected to a Azure Key Vault HSM or to Azure Key Vault itself. The intent of this operation is to allow a client to generate a key in one Azure Key Vault instance, backup the key, and then restore it into another Azure Key Vault instance. The backup operation may be used to export, in protected form, any key type from Azure Key Vault. Individual versions of a key cannot be backed up. Backup / Restore can be performed within geographical boundaries only; meaning that a backup from one geographical area cannot be restored to another geographical area. For example, a backup from the US geographical area cannot be restored in an EU geographical area. This operation requires the `key/backup` permission.


    **Code Samples**


    Backs up the key from the key vault. Subscribes to the call asynchronously and prints out the length of the key's backup byte array returned in the response.


    ```java

    keyAsyncClient.backupKeyWithResponse("keyName")
         .subscriberContext(Context.of(key1, value1, key2, value2))
         .subscribe(keyBackupResponse ->
             System.out.printf("Key's Backup Byte array's length %s %n", keyBackupResponse.getValue().length));
    ```
  syntax:
    content: public Mono<Response<byte[]>> backupKeyWithResponse(String name)
    parameters:
    - id: name
      type: java.lang.String
      description: The name of the key.
    return:
      type: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<byte[]>>
      description: >-
        A <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> containing a <xref uid="com.azure.core.http.rest.Response" data-throw-if-not-resolved="false">Response</xref> whose <xref uid="com.azure.core.http.rest.Response.getValue*" data-throw-if-not-resolved="false">value</xref> contains the backed up
             key blob.
- uid: com.azure.security.keyvault.keys.KeyAsyncClient.beginDeleteKey(java.lang.String)
  id: beginDeleteKey(java.lang.String)
  artifact: com.azure:azure-security-keyvault-keys:4.2.0-beta.4
  parent: com.azure.security.keyvault.keys.KeyAsyncClient
  langs:
  - java
  name: beginDeleteKey(String name)
  nameWithType: KeyAsyncClient.beginDeleteKey(String name)
  fullName: com.azure.security.keyvault.keys.KeyAsyncClient.beginDeleteKey(String name)
  overload: com.azure.security.keyvault.keys.KeyAsyncClient.beginDeleteKey*
  type: Method
  package: com.azure.security.keyvault.keys
  summary: >-
    Deletes a key of any type from the key vault. If soft-delete is enabled on the key vault then the key is placed in the deleted state and requires to be purged for permanent deletion else the key is permanently deleted. The delete operation applies to any key stored in Azure Key Vault but it cannot be applied to an individual version of a key. This operation removes the cryptographic material associated with the key, which means the key is not usable for Sign/Verify, Wrap/Unwrap or Encrypt/Decrypt operations. This operation requires the `keys/delete` permission.


    **Code Samples**


    Deletes the key in the Azure Key Vault. Subscribes to the call asynchronously and prints out the deleted key details when a response has been received.


    ```java

    keyAsyncClient.beginDeleteKey("keyName")
         .subscribe(pollResponse -> {
             System.out.println("Delete Status: " + pollResponse.getStatus().toString());
             System.out.println("Delete Key Name: " + pollResponse.getValue().getName());
             System.out.println("Key Delete Date: " + pollResponse.getValue().getDeletedOn().toString());
         });
    ```
  syntax:
    content: public PollerFlux<DeletedKey,Void> beginDeleteKey(String name)
    parameters:
    - id: name
      type: java.lang.String
      description: The name of the key to be deleted.
    return:
      type: com.azure.core.util.polling.PollerFlux<com.azure.security.keyvault.keys.models.DeletedKey,java.lang.Void>
      description: A <xref uid="com.azure.core.util.polling.PollerFlux" data-throw-if-not-resolved="false">PollerFlux</xref> to poll on the <xref uid="com.azure.security.keyvault.keys.models.DeletedKey" data-throw-if-not-resolved="false">deleted key</xref> status.
- uid: com.azure.security.keyvault.keys.KeyAsyncClient.beginRecoverDeletedKey(java.lang.String)
  id: beginRecoverDeletedKey(java.lang.String)
  artifact: com.azure:azure-security-keyvault-keys:4.2.0-beta.4
  parent: com.azure.security.keyvault.keys.KeyAsyncClient
  langs:
  - java
  name: beginRecoverDeletedKey(String name)
  nameWithType: KeyAsyncClient.beginRecoverDeletedKey(String name)
  fullName: com.azure.security.keyvault.keys.KeyAsyncClient.beginRecoverDeletedKey(String name)
  overload: com.azure.security.keyvault.keys.KeyAsyncClient.beginRecoverDeletedKey*
  type: Method
  package: com.azure.security.keyvault.keys
  summary: >-
    Recovers the deleted key in the key vault to its latest version and can only be performed on a soft-delete enabled vault. An attempt to recover an non-deleted key will return an error. Consider this the inverse of the delete operation on soft-delete enabled vaults. This operation requires the `keys/recover` permission.


    **Code Samples**


    Recovers the deleted key from the key vault enabled for soft-delete. Subscribes to the call asynchronously and prints out the recovered key details when a response has been received.


    //Assuming key is deleted on a soft-delete enabled vault.


    ```java

    keyAsyncClient.beginRecoverDeletedKey("deletedKeyName")
         .subscribe(pollResponse -> {
             System.out.println("Recovery Status: " + pollResponse.getStatus().toString());
             System.out.println("Recover Key Name: " + pollResponse.getValue().getName());
             System.out.println("Recover Key Type: " + pollResponse.getValue().getKeyType());
         });
    ```
  syntax:
    content: public PollerFlux<KeyVaultKey,Void> beginRecoverDeletedKey(String name)
    parameters:
    - id: name
      type: java.lang.String
      description: The name of the deleted key to be recovered.
    return:
      type: com.azure.core.util.polling.PollerFlux<com.azure.security.keyvault.keys.models.KeyVaultKey,java.lang.Void>
      description: A <xref uid="com.azure.core.util.polling.PollerFlux" data-throw-if-not-resolved="false">PollerFlux</xref> to poll on the <xref uid="com.azure.security.keyvault.keys.models.KeyVaultKey" data-throw-if-not-resolved="false">recovered key</xref> status.
- uid: com.azure.security.keyvault.keys.KeyAsyncClient.createEcKey(com.azure.security.keyvault.keys.models.CreateEcKeyOptions)
  id: createEcKey(com.azure.security.keyvault.keys.models.CreateEcKeyOptions)
  artifact: com.azure:azure-security-keyvault-keys:4.2.0-beta.4
  parent: com.azure.security.keyvault.keys.KeyAsyncClient
  langs:
  - java
  name: createEcKey(CreateEcKeyOptions createEcKeyOptions)
  nameWithType: KeyAsyncClient.createEcKey(CreateEcKeyOptions createEcKeyOptions)
  fullName: com.azure.security.keyvault.keys.KeyAsyncClient.createEcKey(CreateEcKeyOptions createEcKeyOptions)
  overload: com.azure.security.keyvault.keys.KeyAsyncClient.createEcKey*
  type: Method
  package: com.azure.security.keyvault.keys
  summary: >-
    Creates a new Ec key and stores it in the key vault. The create Ec key operation can be used to create any Ec key type in key vault. If the named key already exists, Azure Key Vault creates a new version of the key. It requires the `keys/create` permission.


    The <xref uid="com.azure.security.keyvault.keys.models.CreateEcKeyOptions" data-throw-if-not-resolved="false">CreateEcKeyOptions</xref> parameter is required. The <xref uid="com.azure.security.keyvault.keys.models.CreateEcKeyOptions.getCurveName()" data-throw-if-not-resolved="false">key curve</xref> can be optionally specified. If not specified, default value of <xref uid="com.azure.security.keyvault.keys.models.KeyCurveName.P_256" data-throw-if-not-resolved="false">P-256</xref> is used by Azure Key Vault. The <xref uid="com.azure.security.keyvault.keys.models.CreateEcKeyOptions.getExpiresOn*" data-throw-if-not-resolved="false">expires</xref> and <xref uid="com.azure.security.keyvault.keys.models.CreateEcKeyOptions.getNotBefore*" data-throw-if-not-resolved="false">notBefore</xref> values are optional. The <xref uid="com.azure.security.keyvault.keys.models.CreateEcKeyOptions.isEnabled*" data-throw-if-not-resolved="false">enabled</xref> field is set to true by Azure Key Vault, if not specified.


    The <xref uid="com.azure.security.keyvault.keys.models.CreateEcKeyOptions.getKeyType*" data-throw-if-not-resolved="false">keyType</xref> indicates the type of key to create. Possible values include: <xref uid="com.azure.security.keyvault.keys.models.KeyType.EC" data-throw-if-not-resolved="false">EC</xref> and <xref uid="com.azure.security.keyvault.keys.models.KeyType.EC_HSM" data-throw-if-not-resolved="false">EC-HSM</xref>.


    **Code Samples**


    Creates a new EC key with P-384 web key curve. The key activates in one day and expires in one year. Subscribes to the call asynchronously and prints out the newly created ec key details when a response has been received.


    ```java

    CreateEcKeyOptions createEcKeyOptions = new CreateEcKeyOptions("keyName")
         .setCurveName(KeyCurveName.P_384)
         .setNotBefore(OffsetDateTime.now().plusDays(1))
         .setExpiresOn(OffsetDateTime.now().plusYears(1));
     keyAsyncClient.createEcKey(createEcKeyOptions)
         .subscriberContext(Context.of(key1, value1, key2, value2))
         .subscribe(keyResponse ->
             System.out.printf("Key is created with name %s and id %s %n", keyResponse.getName(),
                 keyResponse.getId()));
    ```
  syntax:
    content: public Mono<KeyVaultKey> createEcKey(CreateEcKeyOptions createEcKeyOptions)
    parameters:
    - id: createEcKeyOptions
      type: com.azure.security.keyvault.keys.models.CreateEcKeyOptions
      description: The key options object containing information about the ec key being created.
    return:
      type: reactor.core.publisher.Mono<com.azure.security.keyvault.keys.models.KeyVaultKey>
      description: A <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> containing the <xref uid="com.azure.security.keyvault.keys.models.KeyVaultKey" data-throw-if-not-resolved="false">created key</xref>.
- uid: com.azure.security.keyvault.keys.KeyAsyncClient.createEcKeyWithResponse(com.azure.security.keyvault.keys.models.CreateEcKeyOptions)
  id: createEcKeyWithResponse(com.azure.security.keyvault.keys.models.CreateEcKeyOptions)
  artifact: com.azure:azure-security-keyvault-keys:4.2.0-beta.4
  parent: com.azure.security.keyvault.keys.KeyAsyncClient
  langs:
  - java
  name: createEcKeyWithResponse(CreateEcKeyOptions createEcKeyOptions)
  nameWithType: KeyAsyncClient.createEcKeyWithResponse(CreateEcKeyOptions createEcKeyOptions)
  fullName: com.azure.security.keyvault.keys.KeyAsyncClient.createEcKeyWithResponse(CreateEcKeyOptions createEcKeyOptions)
  overload: com.azure.security.keyvault.keys.KeyAsyncClient.createEcKeyWithResponse*
  type: Method
  package: com.azure.security.keyvault.keys
  summary: >-
    Creates a new Ec key and stores it in the key vault. The create Ec key operation can be used to create any Ec key type in key vault. If the named key already exists, Azure Key Vault creates a new version of the key. It requires the `keys/create` permission.


    The <xref uid="com.azure.security.keyvault.keys.models.CreateEcKeyOptions" data-throw-if-not-resolved="false">CreateEcKeyOptions</xref> parameter is required. The <xref uid="com.azure.security.keyvault.keys.models.CreateEcKeyOptions.getCurveName()" data-throw-if-not-resolved="false">key curve</xref> can be optionally specified. If not specified, default value of <xref uid="com.azure.security.keyvault.keys.models.KeyCurveName.P_256" data-throw-if-not-resolved="false">P-256</xref> is used by Azure Key Vault. The <xref uid="com.azure.security.keyvault.keys.models.CreateEcKeyOptions.getExpiresOn*" data-throw-if-not-resolved="false">expires</xref> and <xref uid="com.azure.security.keyvault.keys.models.CreateEcKeyOptions.getNotBefore*" data-throw-if-not-resolved="false">notBefore</xref> values are optional. The <xref uid="com.azure.security.keyvault.keys.models.CreateEcKeyOptions.isEnabled*" data-throw-if-not-resolved="false">enabled</xref> field is set to true by Azure Key Vault, if not specified.


    The <xref uid="com.azure.security.keyvault.keys.models.CreateEcKeyOptions.getKeyType*" data-throw-if-not-resolved="false">keyType</xref> indicates the type of key to create. Possible values include: <xref uid="com.azure.security.keyvault.keys.models.KeyType.EC" data-throw-if-not-resolved="false">EC</xref> and <xref uid="com.azure.security.keyvault.keys.models.KeyType.EC_HSM" data-throw-if-not-resolved="false">EC-HSM</xref>.


    **Code Samples**


    Creates a new EC key with P-384 web key curve. The key activates in one day and expires in one year. Subscribes to the call asynchronously and prints out the newly created ec key details when a response has been received.


    ```java

    CreateEcKeyOptions createEcKeyOptions = new CreateEcKeyOptions("keyName")
         .setCurveName(KeyCurveName.P_384)
         .setNotBefore(OffsetDateTime.now().plusDays(1))
         .setExpiresOn(OffsetDateTime.now().plusYears(1));
     keyAsyncClient.createEcKeyWithResponse(createEcKeyOptions)
         .subscriberContext(Context.of(key1, value1, key2, value2))
         .subscribe(keyResponse ->
             System.out.printf("Key is created with name %s and id %s %n", keyResponse.getValue().getName(),
                 keyResponse.getValue().getId()));
    ```
  syntax:
    content: public Mono<Response<KeyVaultKey>> createEcKeyWithResponse(CreateEcKeyOptions createEcKeyOptions)
    parameters:
    - id: createEcKeyOptions
      type: com.azure.security.keyvault.keys.models.CreateEcKeyOptions
      description: The key options object containing information about the ec key being created.
    return:
      type: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.security.keyvault.keys.models.KeyVaultKey>>
      description: A <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> containing a <xref uid="com.azure.core.http.rest.Response" data-throw-if-not-resolved="false">Response</xref> whose <xref uid="com.azure.core.http.rest.Response.getValue*" data-throw-if-not-resolved="false">value</xref> contains the <xref uid="com.azure.security.keyvault.keys.models.KeyVaultKey" data-throw-if-not-resolved="false">created key</xref>.
- uid: com.azure.security.keyvault.keys.KeyAsyncClient.createKey(com.azure.security.keyvault.keys.models.CreateKeyOptions)
  id: createKey(com.azure.security.keyvault.keys.models.CreateKeyOptions)
  artifact: com.azure:azure-security-keyvault-keys:4.2.0-beta.4
  parent: com.azure.security.keyvault.keys.KeyAsyncClient
  langs:
  - java
  name: createKey(CreateKeyOptions createKeyOptions)
  nameWithType: KeyAsyncClient.createKey(CreateKeyOptions createKeyOptions)
  fullName: com.azure.security.keyvault.keys.KeyAsyncClient.createKey(CreateKeyOptions createKeyOptions)
  overload: com.azure.security.keyvault.keys.KeyAsyncClient.createKey*
  type: Method
  package: com.azure.security.keyvault.keys
  summary: >-
    Creates a new key and stores it in the key vault. The create key operation can be used to create any key type in key vault. If the named key already exists, Azure Key Vault creates a new version of the key. It requires the `keys/create` permission.


    The <xref uid="com.azure.security.keyvault.keys.models.CreateKeyOptions" data-throw-if-not-resolved="false">CreateKeyOptions</xref> is required. The <xref uid="com.azure.security.keyvault.keys.models.CreateKeyOptions.getExpiresOn()" data-throw-if-not-resolved="false">expires</xref> and <xref uid="com.azure.security.keyvault.keys.models.CreateKeyOptions.getNotBefore()" data-throw-if-not-resolved="false">notBefore</xref> values are optional. The <xref uid="com.azure.security.keyvault.keys.models.CreateKeyOptions.isEnabled()" data-throw-if-not-resolved="false">enabled</xref> field is set to true by Azure Key Vault, if not specified.


    The <xref uid="com.azure.security.keyvault.keys.models.CreateKeyOptions.getKeyType()" data-throw-if-not-resolved="false">keyType</xref> indicates the type of key to create. Possible values include: <xref uid="com.azure.security.keyvault.keys.models.KeyType.EC" data-throw-if-not-resolved="false">EC</xref>, <xref uid="com.azure.security.keyvault.keys.models.KeyType.EC_HSM" data-throw-if-not-resolved="false">EC-HSM</xref>, <xref uid="com.azure.security.keyvault.keys.models.KeyType.RSA" data-throw-if-not-resolved="false">RSA</xref>, <xref uid="com.azure.security.keyvault.keys.models.KeyType.RSA_HSM" data-throw-if-not-resolved="false">RSA-HSM</xref> and <xref uid="com.azure.security.keyvault.keys.models.KeyType.OCT" data-throw-if-not-resolved="false">OCT</xref>.


    **Code Samples**


    Creates a new Rsa key which activates in one day and expires in one year. Subscribes to the call asynchronously and prints out the newly created key details when a response has been received.


    ```java

    CreateKeyOptions createKeyOptions = new CreateKeyOptions("keyName", KeyType.RSA)
         .setNotBefore(OffsetDateTime.now().plusDays(1))
         .setExpiresOn(OffsetDateTime.now().plusYears(1));
     keyAsyncClient.createKey(createKeyOptions)
         .subscriberContext(Context.of(key1, value1, key2, value2))
         .subscribe(keyResponse ->
             System.out.printf("Key is created with name %s and id %s %n", keyResponse.getName(),
                 keyResponse.getId()));
    ```
  syntax:
    content: public Mono<KeyVaultKey> createKey(CreateKeyOptions createKeyOptions)
    parameters:
    - id: createKeyOptions
      type: com.azure.security.keyvault.keys.models.CreateKeyOptions
      description: The key configuration object containing information about the key being created.
    return:
      type: reactor.core.publisher.Mono<com.azure.security.keyvault.keys.models.KeyVaultKey>
      description: A <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> containing the <xref uid="com.azure.security.keyvault.keys.models.KeyVaultKey" data-throw-if-not-resolved="false">created key</xref>.
- uid: com.azure.security.keyvault.keys.KeyAsyncClient.createKey(java.lang.String,com.azure.security.keyvault.keys.models.KeyType)
  id: createKey(java.lang.String,com.azure.security.keyvault.keys.models.KeyType)
  artifact: com.azure:azure-security-keyvault-keys:4.2.0-beta.4
  parent: com.azure.security.keyvault.keys.KeyAsyncClient
  langs:
  - java
  name: createKey(String name, KeyType keyType)
  nameWithType: KeyAsyncClient.createKey(String name, KeyType keyType)
  fullName: com.azure.security.keyvault.keys.KeyAsyncClient.createKey(String name, KeyType keyType)
  overload: com.azure.security.keyvault.keys.KeyAsyncClient.createKey*
  type: Method
  package: com.azure.security.keyvault.keys
  summary: >-
    Creates a new key and stores it in the key vault. The create key operation can be used to create any key type in key vault. If the named key already exists, Azure Key Vault creates a new version of the key. It requires the `keys/create` permission.


    The <xref uid="com.azure.security.keyvault.keys.models.KeyType" data-throw-if-not-resolved="false">keyType</xref> indicates the type of key to create. Possible values include: <xref uid="com.azure.security.keyvault.keys.models.KeyType.EC" data-throw-if-not-resolved="false">EC</xref>, <xref uid="com.azure.security.keyvault.keys.models.KeyType.EC_HSM" data-throw-if-not-resolved="false">EC-HSM</xref>, <xref uid="com.azure.security.keyvault.keys.models.KeyType.RSA" data-throw-if-not-resolved="false">RSA</xref>, <xref uid="com.azure.security.keyvault.keys.models.KeyType.RSA_HSM" data-throw-if-not-resolved="false">RSA-HSM</xref> and <xref uid="com.azure.security.keyvault.keys.models.KeyType.OCT" data-throw-if-not-resolved="false">OCT</xref>.


    **Code Samples**


    Creates a new EC key. Subscribes to the call asynchronously and prints out the newly created key details when a response has been received.


    ```java

    keyAsyncClient.createKey("keyName", KeyType.EC)
         .subscriberContext(Context.of(key1, value1, key2, value2))
         .subscribe(keyResponse ->
             System.out.printf("Key is created with name %s and id %s %n", keyResponse.getName(),
                 keyResponse.getId()));
    ```
  syntax:
    content: public Mono<KeyVaultKey> createKey(String name, KeyType keyType)
    parameters:
    - id: name
      type: java.lang.String
      description: The name of the key being created.
    - id: keyType
      type: com.azure.security.keyvault.keys.models.KeyType
      description: The type of key to create. For valid values, see <xref uid="com.azure.security.keyvault.keys.models.KeyType" data-throw-if-not-resolved="false">KeyType</xref>.
    return:
      type: reactor.core.publisher.Mono<com.azure.security.keyvault.keys.models.KeyVaultKey>
      description: A <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> containing the <xref uid="com.azure.security.keyvault.keys.models.KeyVaultKey" data-throw-if-not-resolved="false">created key</xref>.
- uid: com.azure.security.keyvault.keys.KeyAsyncClient.createKeyWithResponse(com.azure.security.keyvault.keys.models.CreateKeyOptions)
  id: createKeyWithResponse(com.azure.security.keyvault.keys.models.CreateKeyOptions)
  artifact: com.azure:azure-security-keyvault-keys:4.2.0-beta.4
  parent: com.azure.security.keyvault.keys.KeyAsyncClient
  langs:
  - java
  name: createKeyWithResponse(CreateKeyOptions createKeyOptions)
  nameWithType: KeyAsyncClient.createKeyWithResponse(CreateKeyOptions createKeyOptions)
  fullName: com.azure.security.keyvault.keys.KeyAsyncClient.createKeyWithResponse(CreateKeyOptions createKeyOptions)
  overload: com.azure.security.keyvault.keys.KeyAsyncClient.createKeyWithResponse*
  type: Method
  package: com.azure.security.keyvault.keys
  summary: >-
    Creates a new key and stores it in the key vault. The create key operation can be used to create any key type in key vault. If the named key already exists, Azure Key Vault creates a new version of the key. It requires the `keys/create` permission.


    The <xref uid="com.azure.security.keyvault.keys.models.KeyType" data-throw-if-not-resolved="false">keyType</xref> indicates the type of key to create. Possible values include: <xref uid="com.azure.security.keyvault.keys.models.KeyType.EC" data-throw-if-not-resolved="false">EC</xref>, <xref uid="com.azure.security.keyvault.keys.models.KeyType.EC_HSM" data-throw-if-not-resolved="false">EC-HSM</xref>, <xref uid="com.azure.security.keyvault.keys.models.KeyType.RSA" data-throw-if-not-resolved="false">RSA</xref>, <xref uid="com.azure.security.keyvault.keys.models.KeyType.RSA_HSM" data-throw-if-not-resolved="false">RSA-HSM</xref> and <xref uid="com.azure.security.keyvault.keys.models.KeyType.OCT" data-throw-if-not-resolved="false">OCT</xref>.


    **Code Samples**


    Creates a new EC key. Subscribes to the call asynchronously and prints out the newly created key details when a response has been received.


    ```java

    CreateKeyOptions createKeyOptions = new CreateKeyOptions("keyName", KeyType.RSA)
         .setNotBefore(OffsetDateTime.now().plusDays(1))
         .setExpiresOn(OffsetDateTime.now().plusYears(1));
     keyAsyncClient.createKeyWithResponse(createKeyOptions)
         .subscriberContext(Context.of(key1, value1, key2, value2))
         .subscribe(keyResponse ->
             System.out.printf("Key is created with name %s and id %s %n", keyResponse.getValue().getName(),
                 keyResponse.getValue().getId()));
    ```
  syntax:
    content: public Mono<Response<KeyVaultKey>> createKeyWithResponse(CreateKeyOptions createKeyOptions)
    parameters:
    - id: createKeyOptions
      type: com.azure.security.keyvault.keys.models.CreateKeyOptions
      description: The key configuration object containing information about the key being created.
    return:
      type: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.security.keyvault.keys.models.KeyVaultKey>>
      description: A <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> containing a <xref uid="com.azure.core.http.rest.Response" data-throw-if-not-resolved="false">Response</xref> whose <xref uid="com.azure.core.http.rest.Response.getValue*" data-throw-if-not-resolved="false">value</xref> contains the <xref uid="com.azure.security.keyvault.keys.models.KeyVaultKey" data-throw-if-not-resolved="false">created key</xref>.
- uid: com.azure.security.keyvault.keys.KeyAsyncClient.createRsaKey(com.azure.security.keyvault.keys.models.CreateRsaKeyOptions)
  id: createRsaKey(com.azure.security.keyvault.keys.models.CreateRsaKeyOptions)
  artifact: com.azure:azure-security-keyvault-keys:4.2.0-beta.4
  parent: com.azure.security.keyvault.keys.KeyAsyncClient
  langs:
  - java
  name: createRsaKey(CreateRsaKeyOptions createRsaKeyOptions)
  nameWithType: KeyAsyncClient.createRsaKey(CreateRsaKeyOptions createRsaKeyOptions)
  fullName: com.azure.security.keyvault.keys.KeyAsyncClient.createRsaKey(CreateRsaKeyOptions createRsaKeyOptions)
  overload: com.azure.security.keyvault.keys.KeyAsyncClient.createRsaKey*
  type: Method
  package: com.azure.security.keyvault.keys
  summary: >-
    Creates a new Rsa key and stores it in the key vault. The create Rsa key operation can be used to create any Rsa key type in key vault. If the named key already exists, Azure Key Vault creates a new version of the key. It requires the `keys/create` permission.


    The <xref uid="com.azure.security.keyvault.keys.models.CreateRsaKeyOptions" data-throw-if-not-resolved="false">CreateRsaKeyOptions</xref> is required. The <xref uid="com.azure.security.keyvault.keys.models.CreateRsaKeyOptions.getKeySize()" data-throw-if-not-resolved="false">keySize</xref> can be optionally specified. The <xref uid="com.azure.security.keyvault.keys.models.CreateRsaKeyOptions.getExpiresOn*" data-throw-if-not-resolved="false">expires</xref> and <xref uid="com.azure.security.keyvault.keys.models.CreateRsaKeyOptions.getNotBefore*" data-throw-if-not-resolved="false">notBefore</xref> values are optional. The <xref uid="com.azure.security.keyvault.keys.models.CreateRsaKeyOptions.isEnabled*" data-throw-if-not-resolved="false">enabled</xref> field is set to true by Azure Key Vault, if not specified.


    The <xref uid="com.azure.security.keyvault.keys.models.CreateRsaKeyOptions.getKeyType*" data-throw-if-not-resolved="false">keyType</xref> indicates the type of key to create. Possible values include: <xref uid="com.azure.security.keyvault.keys.models.KeyType.RSA" data-throw-if-not-resolved="false">RSA</xref> and <xref uid="com.azure.security.keyvault.keys.models.KeyType.RSA_HSM" data-throw-if-not-resolved="false">RSA-HSM</xref>.


    **Code Samples**


    Creates a new RSA key with size 2048 which activates in one day and expires in one year. Subscribes to the call asynchronously and prints out the newly created key details when a response has been received.


    ```java

    CreateRsaKeyOptions createRsaKeyOptions = new CreateRsaKeyOptions("keyName")
         .setKeySize(2048)
         .setNotBefore(OffsetDateTime.now().plusDays(1))
         .setExpiresOn(OffsetDateTime.now().plusYears(1));
     keyAsyncClient.createRsaKey(createRsaKeyOptions)
         .subscriberContext(Context.of(key1, value1, key2, value2))
         .subscribe(keyResponse ->
             System.out.printf("Key is created with name %s and id %s %n", keyResponse.getName(),
                 keyResponse.getId()));
    ```
  syntax:
    content: public Mono<KeyVaultKey> createRsaKey(CreateRsaKeyOptions createRsaKeyOptions)
    parameters:
    - id: createRsaKeyOptions
      type: com.azure.security.keyvault.keys.models.CreateRsaKeyOptions
      description: >-
        The key configuration object containing information about the rsa key being
             created.
    return:
      type: reactor.core.publisher.Mono<com.azure.security.keyvault.keys.models.KeyVaultKey>
      description: A <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> containing the <xref uid="com.azure.security.keyvault.keys.models.KeyVaultKey" data-throw-if-not-resolved="false">created key</xref>.
- uid: com.azure.security.keyvault.keys.KeyAsyncClient.createRsaKeyWithResponse(com.azure.security.keyvault.keys.models.CreateRsaKeyOptions)
  id: createRsaKeyWithResponse(com.azure.security.keyvault.keys.models.CreateRsaKeyOptions)
  artifact: com.azure:azure-security-keyvault-keys:4.2.0-beta.4
  parent: com.azure.security.keyvault.keys.KeyAsyncClient
  langs:
  - java
  name: createRsaKeyWithResponse(CreateRsaKeyOptions createRsaKeyOptions)
  nameWithType: KeyAsyncClient.createRsaKeyWithResponse(CreateRsaKeyOptions createRsaKeyOptions)
  fullName: com.azure.security.keyvault.keys.KeyAsyncClient.createRsaKeyWithResponse(CreateRsaKeyOptions createRsaKeyOptions)
  overload: com.azure.security.keyvault.keys.KeyAsyncClient.createRsaKeyWithResponse*
  type: Method
  package: com.azure.security.keyvault.keys
  summary: >-
    Creates a new Rsa key and stores it in the key vault. The create Rsa key operation can be used to create any Rsa key type in key vault. If the named key already exists, Azure Key Vault creates a new version of the key. It requires the `keys/create` permission.


    The <xref uid="com.azure.security.keyvault.keys.models.CreateRsaKeyOptions" data-throw-if-not-resolved="false">CreateRsaKeyOptions</xref> is required. The <xref uid="com.azure.security.keyvault.keys.models.CreateRsaKeyOptions.getKeySize()" data-throw-if-not-resolved="false">keySize</xref> can be optionally specified. The <xref uid="com.azure.security.keyvault.keys.models.CreateRsaKeyOptions.getExpiresOn*" data-throw-if-not-resolved="false">expires</xref> and <xref uid="com.azure.security.keyvault.keys.models.CreateRsaKeyOptions.getNotBefore*" data-throw-if-not-resolved="false">notBefore</xref> values are optional. The <xref uid="com.azure.security.keyvault.keys.models.CreateRsaKeyOptions.isEnabled*" data-throw-if-not-resolved="false">enabled</xref> field is set to true by Azure Key Vault, if not specified.


    The <xref uid="com.azure.security.keyvault.keys.models.CreateRsaKeyOptions.getKeyType*" data-throw-if-not-resolved="false">keyType</xref> indicates the type of key to create. Possible values include: <xref uid="com.azure.security.keyvault.keys.models.KeyType.RSA" data-throw-if-not-resolved="false">RSA</xref> and <xref uid="com.azure.security.keyvault.keys.models.KeyType.RSA_HSM" data-throw-if-not-resolved="false">RSA-HSM</xref>.


    ```java

    CreateRsaKeyOptions createRsaKeyOptions = new CreateRsaKeyOptions("keyName")
         .setKeySize(2048)
         .setNotBefore(OffsetDateTime.now().plusDays(1))
         .setExpiresOn(OffsetDateTime.now().plusYears(1));
     keyAsyncClient.createRsaKeyWithResponse(createRsaKeyOptions)
         .subscriberContext(Context.of(key1, value1, key2, value2))
         .subscribe(keyResponse ->
             System.out.printf("Key is created with name %s and id %s %n", keyResponse.getValue().getName(),
                 keyResponse.getValue().getId()));
    ```
  syntax:
    content: public Mono<Response<KeyVaultKey>> createRsaKeyWithResponse(CreateRsaKeyOptions createRsaKeyOptions)
    parameters:
    - id: createRsaKeyOptions
      type: com.azure.security.keyvault.keys.models.CreateRsaKeyOptions
      description: >-
        The key configuration object containing information about the rsa key being
             created.
    return:
      type: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.security.keyvault.keys.models.KeyVaultKey>>
      description: A <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> containing a <xref uid="com.azure.core.http.rest.Response" data-throw-if-not-resolved="false">Response</xref> whose <xref uid="com.azure.core.http.rest.Response.getValue*" data-throw-if-not-resolved="false">value</xref> contains the <xref uid="com.azure.security.keyvault.keys.models.KeyVaultKey" data-throw-if-not-resolved="false">created key</xref>.
- uid: com.azure.security.keyvault.keys.KeyAsyncClient.getDeletedKey(java.lang.String)
  id: getDeletedKey(java.lang.String)
  artifact: com.azure:azure-security-keyvault-keys:4.2.0-beta.4
  parent: com.azure.security.keyvault.keys.KeyAsyncClient
  langs:
  - java
  name: getDeletedKey(String name)
  nameWithType: KeyAsyncClient.getDeletedKey(String name)
  fullName: com.azure.security.keyvault.keys.KeyAsyncClient.getDeletedKey(String name)
  overload: com.azure.security.keyvault.keys.KeyAsyncClient.getDeletedKey*
  type: Method
  package: com.azure.security.keyvault.keys
  summary: >-
    Gets the public part of a deleted key. The Get Deleted Key operation is applicable for soft-delete enabled vaults. This operation requires the `keys/get` permission.


    **Code Samples**


    Gets the deleted key from the key vault enabled for soft-delete. Subscribes to the call asynchronously and prints out the deleted key details when a response has been received.


    //Assuming key is deleted on a soft-delete enabled vault.


    ```java

    keyAsyncClient.getDeletedKey("keyName")
         .subscriberContext(Context.of(key1, value1, key2, value2))
         .subscribe(keyResponse ->
             System.out.printf("Deleted Key's Recovery Id %s", keyResponse.getRecoveryId()));
    ```
  syntax:
    content: public Mono<DeletedKey> getDeletedKey(String name)
    parameters:
    - id: name
      type: java.lang.String
      description: The name of the deleted key.
    return:
      type: reactor.core.publisher.Mono<com.azure.security.keyvault.keys.models.DeletedKey>
      description: A <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> containing the <xref uid="com.azure.security.keyvault.keys.models.DeletedKey" data-throw-if-not-resolved="false">deleted key</xref>.
- uid: com.azure.security.keyvault.keys.KeyAsyncClient.getDeletedKeyWithResponse(java.lang.String)
  id: getDeletedKeyWithResponse(java.lang.String)
  artifact: com.azure:azure-security-keyvault-keys:4.2.0-beta.4
  parent: com.azure.security.keyvault.keys.KeyAsyncClient
  langs:
  - java
  name: getDeletedKeyWithResponse(String name)
  nameWithType: KeyAsyncClient.getDeletedKeyWithResponse(String name)
  fullName: com.azure.security.keyvault.keys.KeyAsyncClient.getDeletedKeyWithResponse(String name)
  overload: com.azure.security.keyvault.keys.KeyAsyncClient.getDeletedKeyWithResponse*
  type: Method
  package: com.azure.security.keyvault.keys
  summary: >-
    Gets the public part of a deleted key. The Get Deleted Key operation is applicable for soft-delete enabled vaults. This operation requires the `keys/get` permission.


    **Code Samples**


    Gets the deleted key from the key vault enabled for soft-delete. Subscribes to the call asynchronously and prints out the deleted key details when a response has been received.


    //Assuming key is deleted on a soft-delete enabled vault.


    ```java

    keyAsyncClient.getDeletedKeyWithResponse("keyName")
         .subscriberContext(Context.of(key1, value1, key2, value2))
         .subscribe(deletedKeyResponse ->
             System.out.printf("Deleted Key's Recovery Id %s", deletedKeyResponse.getValue().getRecoveryId()));
    ```
  syntax:
    content: public Mono<Response<DeletedKey>> getDeletedKeyWithResponse(String name)
    parameters:
    - id: name
      type: java.lang.String
      description: The name of the deleted key.
    return:
      type: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.security.keyvault.keys.models.DeletedKey>>
      description: A <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> containing a <xref uid="com.azure.core.http.rest.Response" data-throw-if-not-resolved="false">Response</xref> whose <xref uid="com.azure.core.http.rest.Response.getValue*" data-throw-if-not-resolved="false">value</xref> contains the <xref uid="com.azure.security.keyvault.keys.models.DeletedKey" data-throw-if-not-resolved="false">deleted key</xref>.
- uid: com.azure.security.keyvault.keys.KeyAsyncClient.getKey(java.lang.String)
  id: getKey(java.lang.String)
  artifact: com.azure:azure-security-keyvault-keys:4.2.0-beta.4
  parent: com.azure.security.keyvault.keys.KeyAsyncClient
  langs:
  - java
  name: getKey(String name)
  nameWithType: KeyAsyncClient.getKey(String name)
  fullName: com.azure.security.keyvault.keys.KeyAsyncClient.getKey(String name)
  overload: com.azure.security.keyvault.keys.KeyAsyncClient.getKey*
  type: Method
  package: com.azure.security.keyvault.keys
  summary: >-
    Get the public part of the latest version of the specified key from the key vault. The get key operation is applicable to all key types and it requires the `keys/get` permission.


    **Code Samples**


    Gets latest version of the key in the key vault. Subscribes to the call asynchronously and prints out the returned key details when a response has been received.


    ```java

    keyAsyncClient.getKey("keyName")
         .subscriberContext(Context.of(key1, value1, key2, value2))
         .subscribe(keyResponse ->
             System.out.printf("Key is created with name %s and id %s %n", keyResponse.getName(),
                 keyResponse.getId()));
    ```
  syntax:
    content: public Mono<KeyVaultKey> getKey(String name)
    parameters:
    - id: name
      type: java.lang.String
      description: The name of the key.
    return:
      type: reactor.core.publisher.Mono<com.azure.security.keyvault.keys.models.KeyVaultKey>
      description: >-
        A <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> containing the requested <xref uid="com.azure.security.keyvault.keys.models.KeyVaultKey" data-throw-if-not-resolved="false">key</xref>. The content of the key is null
         if <code>name</code> is null or empty.
- uid: com.azure.security.keyvault.keys.KeyAsyncClient.getKey(java.lang.String,java.lang.String)
  id: getKey(java.lang.String,java.lang.String)
  artifact: com.azure:azure-security-keyvault-keys:4.2.0-beta.4
  parent: com.azure.security.keyvault.keys.KeyAsyncClient
  langs:
  - java
  name: getKey(String name, String version)
  nameWithType: KeyAsyncClient.getKey(String name, String version)
  fullName: com.azure.security.keyvault.keys.KeyAsyncClient.getKey(String name, String version)
  overload: com.azure.security.keyvault.keys.KeyAsyncClient.getKey*
  type: Method
  package: com.azure.security.keyvault.keys
  summary: >-
    Gets the public part of the specified key and key version. The get key operation is applicable to all key types and it requires the `keys/get` permission.


    **Code Samples**


    Gets a specific version of the key in the key vault. Subscribes to the call asynchronously and prints out the returned key details when a response has been received.


    ```java

    String keyVersion = "6A385B124DEF4096AF1361A85B16C204";
     keyAsyncClient.getKey("keyName", keyVersion)
         .subscriberContext(Context.of(key1, value1, key2, value2))
         .subscribe(keyResponse ->
             System.out.printf("Key is created with name %s and id %s %n", keyResponse.getName(),
                 keyResponse.getId()));
    ```
  syntax:
    content: public Mono<KeyVaultKey> getKey(String name, String version)
    parameters:
    - id: name
      type: java.lang.String
      description: The name of the key, cannot be null
    - id: version
      type: java.lang.String
      description: >-
        The version of the key to retrieve. If this is an empty String or null, this call is
             equivalent to calling <xref uid="com.azure.security.keyvault.keys.KeyAsyncClient.getKey(java.lang.String)" data-throw-if-not-resolved="false">KeyAsyncClient#getKey(String)</xref>, with the latest version being retrieved.
    return:
      type: reactor.core.publisher.Mono<com.azure.security.keyvault.keys.models.KeyVaultKey>
      description: >-
        A <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> containing the requested <xref uid="com.azure.security.keyvault.keys.models.KeyVaultKey" data-throw-if-not-resolved="false">key</xref>.
         The content of the key is null if both <code>name</code> and <code>version</code> are null or empty.
- uid: com.azure.security.keyvault.keys.KeyAsyncClient.getKeyWithResponse(java.lang.String,java.lang.String)
  id: getKeyWithResponse(java.lang.String,java.lang.String)
  artifact: com.azure:azure-security-keyvault-keys:4.2.0-beta.4
  parent: com.azure.security.keyvault.keys.KeyAsyncClient
  langs:
  - java
  name: getKeyWithResponse(String name, String version)
  nameWithType: KeyAsyncClient.getKeyWithResponse(String name, String version)
  fullName: com.azure.security.keyvault.keys.KeyAsyncClient.getKeyWithResponse(String name, String version)
  overload: com.azure.security.keyvault.keys.KeyAsyncClient.getKeyWithResponse*
  type: Method
  package: com.azure.security.keyvault.keys
  summary: >-
    Gets the public part of the specified key and key version. The get key operation is applicable to all key types and it requires the `keys/get` permission.


    **Code Samples**


    Gets a specific version of the key in the key vault. Subscribes to the call asynchronously and prints out the returned key details when a response has been received.


    ```java

    String keyVersion = "6A385B124DEF4096AF1361A85B16C204";
     keyAsyncClient.getKeyWithResponse("keyName", keyVersion)
         .subscriberContext(Context.of(key1, value1, key2, value2))
         .subscribe(keyResponse ->
             System.out.printf("Key is created with name %s and id %s %n",
                 keyResponse.getValue().getName(), keyResponse.getValue().getId()));
    ```
  syntax:
    content: public Mono<Response<KeyVaultKey>> getKeyWithResponse(String name, String version)
    parameters:
    - id: name
      type: java.lang.String
      description: The name of the key, cannot be null
    - id: version
      type: java.lang.String
      description: >-
        The version of the key to retrieve. If this is an empty String or null, this call is
             equivalent to calling <xref uid="com.azure.security.keyvault.keys.KeyAsyncClient.getKey(java.lang.String)" data-throw-if-not-resolved="false">KeyAsyncClient#getKey(String)</xref>, with the latest version being retrieved.
    return:
      type: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.security.keyvault.keys.models.KeyVaultKey>>
      description: >-
        A <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> containing a <xref uid="com.azure.core.http.rest.Response" data-throw-if-not-resolved="false">Response</xref> whose <xref uid="com.azure.core.http.rest.Response.getValue*" data-throw-if-not-resolved="false">value</xref> contains the requested
             <xref uid="com.azure.security.keyvault.keys.models.KeyVaultKey" data-throw-if-not-resolved="false">key</xref>. The content of the key is null if both <code>name</code> and <code>version</code>
             are null or empty.
- uid: com.azure.security.keyvault.keys.KeyAsyncClient.getVaultUrl()
  id: getVaultUrl()
  artifact: com.azure:azure-security-keyvault-keys:4.2.0-beta.4
  parent: com.azure.security.keyvault.keys.KeyAsyncClient
  langs:
  - java
  name: getVaultUrl()
  nameWithType: KeyAsyncClient.getVaultUrl()
  fullName: com.azure.security.keyvault.keys.KeyAsyncClient.getVaultUrl()
  overload: com.azure.security.keyvault.keys.KeyAsyncClient.getVaultUrl*
  type: Method
  package: com.azure.security.keyvault.keys
  summary: Get the vault endpoint url to which service requests are sent to.
  syntax:
    content: public String getVaultUrl()
    return:
      type: java.lang.String
      description: the vault endpoint url
- uid: com.azure.security.keyvault.keys.KeyAsyncClient.importKey(com.azure.security.keyvault.keys.models.ImportKeyOptions)
  id: importKey(com.azure.security.keyvault.keys.models.ImportKeyOptions)
  artifact: com.azure:azure-security-keyvault-keys:4.2.0-beta.4
  parent: com.azure.security.keyvault.keys.KeyAsyncClient
  langs:
  - java
  name: importKey(ImportKeyOptions importKeyOptions)
  nameWithType: KeyAsyncClient.importKey(ImportKeyOptions importKeyOptions)
  fullName: com.azure.security.keyvault.keys.KeyAsyncClient.importKey(ImportKeyOptions importKeyOptions)
  overload: com.azure.security.keyvault.keys.KeyAsyncClient.importKey*
  type: Method
  package: com.azure.security.keyvault.keys
  summary: >-
    Imports an externally created key and stores it in key vault. The import key operation may be used to import any key type into the Azure Key Vault. If the named key already exists, Azure Key Vault creates a new version of the key. This operation requires the `keys/import` permission.


    The `keyImportOptions` is required and its fields <xref uid="com.azure.security.keyvault.keys.models.ImportKeyOptions.getName*" data-throw-if-not-resolved="false">name</xref> and <xref uid="com.azure.security.keyvault.keys.models.ImportKeyOptions.getKey()" data-throw-if-not-resolved="false">key material</xref> cannot be null. The <xref uid="com.azure.security.keyvault.keys.models.ImportKeyOptions.getExpiresOn*" data-throw-if-not-resolved="false">expires</xref> and <xref uid="com.azure.security.keyvault.keys.models.ImportKeyOptions.getNotBefore*" data-throw-if-not-resolved="false">notBefore</xref> values in `keyImportOptions` are optional. If not specified, no values are set for the fields. The <xref uid="com.azure.security.keyvault.keys.models.ImportKeyOptions.isEnabled*" data-throw-if-not-resolved="false">enabled</xref> field is set to true and the <xref uid="com.azure.security.keyvault.keys.models.ImportKeyOptions.isHardwareProtected()" data-throw-if-not-resolved="false">hsm</xref> field is set to false by Azure Key Vault, if they are not specified.


    **Code Samples**


    Imports a new key into key vault. Subscribes to the call asynchronously and prints out the newly imported key details when a response has been received.


    ```java

    ImportKeyOptions options = new ImportKeyOptions("keyName", jsonWebKeyToImport)
         .setHardwareProtected(false);
     keyAsyncClient.importKey(options).subscribe(keyResponse ->
         System.out.printf("Key is imported with name %s and id %s \n", keyResponse.getName(), keyResponse.getId()));
    ```
  syntax:
    content: public Mono<KeyVaultKey> importKey(ImportKeyOptions importKeyOptions)
    parameters:
    - id: importKeyOptions
      type: com.azure.security.keyvault.keys.models.ImportKeyOptions
      description: >-
        The key import configuration object containing information about the json web key
             being imported.
    return:
      type: reactor.core.publisher.Mono<com.azure.security.keyvault.keys.models.KeyVaultKey>
      description: A <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> containing the <xref uid="com.azure.security.keyvault.keys.models.KeyVaultKey" data-throw-if-not-resolved="false">imported key</xref>.
- uid: com.azure.security.keyvault.keys.KeyAsyncClient.importKey(java.lang.String,com.azure.security.keyvault.keys.models.JsonWebKey)
  id: importKey(java.lang.String,com.azure.security.keyvault.keys.models.JsonWebKey)
  artifact: com.azure:azure-security-keyvault-keys:4.2.0-beta.4
  parent: com.azure.security.keyvault.keys.KeyAsyncClient
  langs:
  - java
  name: importKey(String name, JsonWebKey keyMaterial)
  nameWithType: KeyAsyncClient.importKey(String name, JsonWebKey keyMaterial)
  fullName: com.azure.security.keyvault.keys.KeyAsyncClient.importKey(String name, JsonWebKey keyMaterial)
  overload: com.azure.security.keyvault.keys.KeyAsyncClient.importKey*
  type: Method
  package: com.azure.security.keyvault.keys
  summary: >-
    Imports an externally created key and stores it in key vault. The import key operation may be used to import any key type into the Azure Key Vault. If the named key already exists, Azure Key Vault creates a new version of the key. This operation requires the `keys/import` permission.


    **Code Samples**


    Imports a new key into key vault. Subscribes to the call asynchronously and prints out the newly imported key details when a response has been received.


    ```java

    keyAsyncClient.importKey("keyName", jsonWebKeyToImport).subscribe(keyResponse ->
         System.out.printf("Key is imported with name %s and id %s \n", keyResponse.getName(), keyResponse.getId()));
    ```
  syntax:
    content: public Mono<KeyVaultKey> importKey(String name, JsonWebKey keyMaterial)
    parameters:
    - id: name
      type: java.lang.String
      description: The name for the imported key.
    - id: keyMaterial
      type: com.azure.security.keyvault.keys.models.JsonWebKey
      description: The Json web key being imported.
    return:
      type: reactor.core.publisher.Mono<com.azure.security.keyvault.keys.models.KeyVaultKey>
      description: A <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> containing a <xref uid="com.azure.core.http.rest.Response" data-throw-if-not-resolved="false">Response</xref> whose <xref uid="com.azure.core.http.rest.Response.getValue*" data-throw-if-not-resolved="false">value</xref> contains the <xref uid="com.azure.security.keyvault.keys.models.KeyVaultKey" data-throw-if-not-resolved="false">imported key</xref>.
- uid: com.azure.security.keyvault.keys.KeyAsyncClient.importKeyWithResponse(com.azure.security.keyvault.keys.models.ImportKeyOptions)
  id: importKeyWithResponse(com.azure.security.keyvault.keys.models.ImportKeyOptions)
  artifact: com.azure:azure-security-keyvault-keys:4.2.0-beta.4
  parent: com.azure.security.keyvault.keys.KeyAsyncClient
  langs:
  - java
  name: importKeyWithResponse(ImportKeyOptions importKeyOptions)
  nameWithType: KeyAsyncClient.importKeyWithResponse(ImportKeyOptions importKeyOptions)
  fullName: com.azure.security.keyvault.keys.KeyAsyncClient.importKeyWithResponse(ImportKeyOptions importKeyOptions)
  overload: com.azure.security.keyvault.keys.KeyAsyncClient.importKeyWithResponse*
  type: Method
  package: com.azure.security.keyvault.keys
  summary: >-
    Imports an externally created key and stores it in key vault. The import key operation may be used to import any key type into the Azure Key Vault. If the named key already exists, Azure Key Vault creates a new version of the key. This operation requires the `keys/import` permission.


    The `keyImportOptions` is required and its fields <xref uid="com.azure.security.keyvault.keys.models.ImportKeyOptions.getName*" data-throw-if-not-resolved="false">name</xref> and <xref uid="com.azure.security.keyvault.keys.models.ImportKeyOptions.getKey()" data-throw-if-not-resolved="false">key material</xref> cannot be null. The <xref uid="com.azure.security.keyvault.keys.models.ImportKeyOptions.getExpiresOn*" data-throw-if-not-resolved="false">expires</xref> and <xref uid="com.azure.security.keyvault.keys.models.ImportKeyOptions.getNotBefore*" data-throw-if-not-resolved="false">notBefore</xref> values in `keyImportOptions` are optional. If not specified, no values are set for the fields. The <xref uid="com.azure.security.keyvault.keys.models.ImportKeyOptions.isEnabled*" data-throw-if-not-resolved="false">enabled</xref> field is set to true and the <xref uid="com.azure.security.keyvault.keys.models.ImportKeyOptions.isHardwareProtected()" data-throw-if-not-resolved="false">hsm</xref> field is set to false by Azure Key Vault, if they are not specified.


    **Code Samples**


    Imports a new key into key vault. Subscribes to the call asynchronously and prints out the newly imported key details when a response has been received.


    ```java

    ImportKeyOptions importKeyOptions = new ImportKeyOptions("keyName", jsonWebKeyToImport)
         .setHardwareProtected(false);
     keyAsyncClient.importKeyWithResponse(importKeyOptions).subscribe(keyResponse ->
         System.out.printf("Key is imported with name %s and id %s \n", keyResponse.getValue().getName(),
             keyResponse.getValue().getId()));
    ```
  syntax:
    content: public Mono<Response<KeyVaultKey>> importKeyWithResponse(ImportKeyOptions importKeyOptions)
    parameters:
    - id: importKeyOptions
      type: com.azure.security.keyvault.keys.models.ImportKeyOptions
      description: >-
        The key import configuration object containing information about the json web key
             being imported.
    return:
      type: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.security.keyvault.keys.models.KeyVaultKey>>
      description: A <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> containing a <xref uid="com.azure.core.http.rest.Response" data-throw-if-not-resolved="false">Response</xref> whose <xref uid="com.azure.core.http.rest.Response.getValue*" data-throw-if-not-resolved="false">value</xref> contains the <xref uid="com.azure.security.keyvault.keys.models.KeyVaultKey" data-throw-if-not-resolved="false">imported key</xref>.
- uid: com.azure.security.keyvault.keys.KeyAsyncClient.listDeletedKeys()
  id: listDeletedKeys()
  artifact: com.azure:azure-security-keyvault-keys:4.2.0-beta.4
  parent: com.azure.security.keyvault.keys.KeyAsyncClient
  langs:
  - java
  name: listDeletedKeys()
  nameWithType: KeyAsyncClient.listDeletedKeys()
  fullName: com.azure.security.keyvault.keys.KeyAsyncClient.listDeletedKeys()
  overload: com.azure.security.keyvault.keys.KeyAsyncClient.listDeletedKeys*
  type: Method
  package: com.azure.security.keyvault.keys
  summary: >-
    Lists <xref uid="com.azure.security.keyvault.keys.models.DeletedKey" data-throw-if-not-resolved="false">deleted keys</xref> of the key vault. The deleted keys are retrieved as JSON Web Key structures that contain the public part of a deleted key. The Get Deleted Keys operation is applicable for vaults enabled for soft-delete. This operation requires the `keys/list` permission.


    **Code Samples**


    Lists the deleted keys in the key vault. Subscribes to the call asynchronously and prints out the recovery id of each deleted key when a response has been received.


    ```java

    keyAsyncClient.listDeletedKeys()
         .subscriberContext(Context.of(key1, value1, key2, value2))
         .subscribe(deletedKey  -> System.out.printf("Deleted key's recovery Id %s", deletedKey.getRecoveryId()));
    ```
  syntax:
    content: public PagedFlux<DeletedKey> listDeletedKeys()
    return:
      type: com.azure.core.http.rest.PagedFlux<com.azure.security.keyvault.keys.models.DeletedKey>
      description: A <xref uid="com.azure.core.http.rest.PagedFlux" data-throw-if-not-resolved="false">PagedFlux</xref> containing all of the <xref uid="com.azure.security.keyvault.keys.models.DeletedKey" data-throw-if-not-resolved="false">deleted keys</xref> in the vault.
- uid: com.azure.security.keyvault.keys.KeyAsyncClient.listPropertiesOfKeyVersions(java.lang.String)
  id: listPropertiesOfKeyVersions(java.lang.String)
  artifact: com.azure:azure-security-keyvault-keys:4.2.0-beta.4
  parent: com.azure.security.keyvault.keys.KeyAsyncClient
  langs:
  - java
  name: listPropertiesOfKeyVersions(String name)
  nameWithType: KeyAsyncClient.listPropertiesOfKeyVersions(String name)
  fullName: com.azure.security.keyvault.keys.KeyAsyncClient.listPropertiesOfKeyVersions(String name)
  overload: com.azure.security.keyvault.keys.KeyAsyncClient.listPropertiesOfKeyVersions*
  type: Method
  package: com.azure.security.keyvault.keys
  summary: >-
    List all versions of the specified key. The individual key response in the flux is represented by <xref uid="com.azure.security.keyvault.keys.models.KeyProperties" data-throw-if-not-resolved="false">KeyProperties</xref> as only the key identifier, attributes and tags are provided in the response. The key material values are not provided in the response. This operation requires the `keys/list` permission.


    It is possible to get the keys with key material of all the versions from this information. Convert the <xref uid="" data-throw-if-not-resolved="false">Flux</xref> containing <xref uid="com.azure.security.keyvault.keys.models.KeyProperties" data-throw-if-not-resolved="false">key properties</xref> to <xref uid="" data-throw-if-not-resolved="false">Flux</xref> containing <xref uid="com.azure.security.keyvault.keys.models.KeyVaultKey" data-throw-if-not-resolved="false">key</xref> using <xref uid="com.azure.security.keyvault.keys.KeyAsyncClient.getKey(java.lang.String,java.lang.String)" data-throw-if-not-resolved="false">KeyAsyncClient#getKey(String, String)</xref> within <xref uid="" data-throw-if-not-resolved="false">Flux#flatMap(Function)</xref>.


    ```java

    keyAsyncClient.listPropertiesOfKeyVersions("keyName")
         .subscriberContext(Context.of(key1, value1, key2, value2))
         .subscribe(keyProperties -> keyAsyncClient.getKey(keyProperties.getName(), keyProperties.getVersion())
             .subscribe(keyResponse ->
                 System.out.printf("Received key's version with name %s, type %s and version %s",
                     keyResponse.getName(),
                     keyResponse.getKeyType(), keyResponse.getProperties().getVersion())));
    ```
  syntax:
    content: public PagedFlux<KeyProperties> listPropertiesOfKeyVersions(String name)
    parameters:
    - id: name
      type: java.lang.String
      description: The name of the key.
    return:
      type: com.azure.core.http.rest.PagedFlux<com.azure.security.keyvault.keys.models.KeyProperties>
      description: >-
        A <xref uid="com.azure.core.http.rest.PagedFlux" data-throw-if-not-resolved="false">PagedFlux</xref> containing <xref uid="com.azure.security.keyvault.keys.models.KeyProperties" data-throw-if-not-resolved="false">key</xref> of all the versions of the specified key in the vault.
             Flux is empty if key with <code>name</code> does not exist in key vault.
- uid: com.azure.security.keyvault.keys.KeyAsyncClient.listPropertiesOfKeys()
  id: listPropertiesOfKeys()
  artifact: com.azure:azure-security-keyvault-keys:4.2.0-beta.4
  parent: com.azure.security.keyvault.keys.KeyAsyncClient
  langs:
  - java
  name: listPropertiesOfKeys()
  nameWithType: KeyAsyncClient.listPropertiesOfKeys()
  fullName: com.azure.security.keyvault.keys.KeyAsyncClient.listPropertiesOfKeys()
  overload: com.azure.security.keyvault.keys.KeyAsyncClient.listPropertiesOfKeys*
  type: Method
  package: com.azure.security.keyvault.keys
  summary: >-
    List keys in the key vault. Retrieves a list of the keys in the Key Vault as JSON Web Key structures that contain the public part of a stored key. The List operation is applicable to all key types and the individual key response in the flux is represented by <xref uid="com.azure.security.keyvault.keys.models.KeyProperties" data-throw-if-not-resolved="false">KeyProperties</xref> as only the key identifier, attributes and tags are provided in the response. The key material and individual key versions are not listed in the response. This operation requires the `keys/list` permission.


    It is possible to get full keys with key material from this information. Convert the <xref uid="" data-throw-if-not-resolved="false">Flux</xref> containing <xref uid="com.azure.security.keyvault.keys.models.KeyProperties" data-throw-if-not-resolved="false">key properties</xref> to <xref uid="" data-throw-if-not-resolved="false">Flux</xref> containing <xref uid="com.azure.security.keyvault.keys.models.KeyVaultKey" data-throw-if-not-resolved="false">key</xref> using <xref uid="com.azure.security.keyvault.keys.KeyAsyncClient.getKey(java.lang.String,java.lang.String)" data-throw-if-not-resolved="false">KeyAsyncClient#getKey(String, String)</xref> within <xref uid="" data-throw-if-not-resolved="false">Flux#flatMap(Function)</xref>.


    ```java

    keyAsyncClient.listPropertiesOfKeys()
         .subscriberContext(Context.of(key1, value1, key2, value2))
         .subscribe(keyProperties -> keyAsyncClient.getKey(keyProperties.getName(), keyProperties.getVersion())
             .subscribe(keyResponse -> System.out.printf("Received key with name %s and type %s",
                 keyResponse.getName(),
                  keyResponse.getKeyType())));
    ```
  syntax:
    content: public PagedFlux<KeyProperties> listPropertiesOfKeys()
    return:
      type: com.azure.core.http.rest.PagedFlux<com.azure.security.keyvault.keys.models.KeyProperties>
      description: A <xref uid="com.azure.core.http.rest.PagedFlux" data-throw-if-not-resolved="false">PagedFlux</xref> containing <xref uid="com.azure.security.keyvault.keys.models.KeyProperties" data-throw-if-not-resolved="false">key</xref> of all the keys in the vault.
- uid: com.azure.security.keyvault.keys.KeyAsyncClient.purgeDeletedKey(java.lang.String)
  id: purgeDeletedKey(java.lang.String)
  artifact: com.azure:azure-security-keyvault-keys:4.2.0-beta.4
  parent: com.azure.security.keyvault.keys.KeyAsyncClient
  langs:
  - java
  name: purgeDeletedKey(String name)
  nameWithType: KeyAsyncClient.purgeDeletedKey(String name)
  fullName: com.azure.security.keyvault.keys.KeyAsyncClient.purgeDeletedKey(String name)
  overload: com.azure.security.keyvault.keys.KeyAsyncClient.purgeDeletedKey*
  type: Method
  package: com.azure.security.keyvault.keys
  summary: >-
    Permanently deletes the specified key without the possibility of recovery. The Purge Deleted Key operation is applicable for soft-delete enabled vaults. This operation requires the `keys/purge` permission.


    **Code Samples**


    Purges the deleted key from the key vault enabled for soft-delete. Subscribes to the call asynchronously and prints out the status code from the server response when a response has been received.


    //Assuming key is deleted on a soft-delete enabled vault.


    ```java

    keyAsyncClient.purgeDeletedKey("deletedKeyName")
         .subscribe(purgeResponse ->
             System.out.println("Successfully Purged deleted Key"));
    ```
  syntax:
    content: public Mono<Void> purgeDeletedKey(String name)
    parameters:
    - id: name
      type: java.lang.String
      description: The name of the deleted key.
    return:
      type: reactor.core.publisher.Mono<java.lang.Void>
      description: An empty <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref>.
- uid: com.azure.security.keyvault.keys.KeyAsyncClient.purgeDeletedKeyWithResponse(java.lang.String)
  id: purgeDeletedKeyWithResponse(java.lang.String)
  artifact: com.azure:azure-security-keyvault-keys:4.2.0-beta.4
  parent: com.azure.security.keyvault.keys.KeyAsyncClient
  langs:
  - java
  name: purgeDeletedKeyWithResponse(String name)
  nameWithType: KeyAsyncClient.purgeDeletedKeyWithResponse(String name)
  fullName: com.azure.security.keyvault.keys.KeyAsyncClient.purgeDeletedKeyWithResponse(String name)
  overload: com.azure.security.keyvault.keys.KeyAsyncClient.purgeDeletedKeyWithResponse*
  type: Method
  package: com.azure.security.keyvault.keys
  summary: >-
    Permanently deletes the specified key without the possibility of recovery. The Purge Deleted Key operation is applicable for soft-delete enabled vaults. This operation requires the `keys/purge` permission.


    **Code Samples**


    Purges the deleted key from the key vault enabled for soft-delete. Subscribes to the call asynchronously and prints out the status code from the server response when a response has been received.


    //Assuming key is deleted on a soft-delete enabled vault.


    ```java

    keyAsyncClient.purgeDeletedKeyWithResponse("deletedKeyName")
         .subscriberContext(Context.of(key1, value1, key2, value2))
         .subscribe(purgeResponse ->
             System.out.printf("Purge Status response %d %n", purgeResponse.getStatusCode()));
    ```
  syntax:
    content: public Mono<Response<Void>> purgeDeletedKeyWithResponse(String name)
    parameters:
    - id: name
      type: java.lang.String
      description: The name of the deleted key.
    return:
      type: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<java.lang.Void>>
      description: A <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> containing a Response containing status code and HTTP headers.
- uid: com.azure.security.keyvault.keys.KeyAsyncClient.restoreKeyBackup(byte[])
  id: restoreKeyBackup(byte[])
  artifact: com.azure:azure-security-keyvault-keys:4.2.0-beta.4
  parent: com.azure.security.keyvault.keys.KeyAsyncClient
  langs:
  - java
  name: restoreKeyBackup(byte[] backup)
  nameWithType: KeyAsyncClient.restoreKeyBackup(byte[] backup)
  fullName: com.azure.security.keyvault.keys.KeyAsyncClient.restoreKeyBackup(byte[] backup)
  overload: com.azure.security.keyvault.keys.KeyAsyncClient.restoreKeyBackup*
  type: Method
  package: com.azure.security.keyvault.keys
  summary: >-
    Restores a backed up key to a vault. Imports a previously backed up key into Azure Key Vault, restoring the key, its key identifier, attributes and access control policies. The restore operation may be used to import a previously backed up key. The individual versions of a key cannot be restored. The key is restored in its entirety with the same key name as it had when it was backed up. If the key name is not available in the target Key Vault, the restore operation will be rejected. While the key name is retained during restore, the final key identifier will change if the key is restored to a different vault. Restore will restore all versions and preserve version identifiers. The restore operation is subject to security constraints: The target Key Vault must be owned by the same Microsoft Azure Subscription as the source Key Vault The user must have restore permission in the target Key Vault. This operation requires the `keys/restore` permission.


    **Code Samples**


    Restores the key in the key vault from its backup. Subscribes to the call asynchronously and prints out the restored key details when a response has been received.


    //Pass the Key Backup Byte array to the restore operation.


    ```java

    byte[] keyBackupByteArray = {};
     keyAsyncClient.restoreKeyBackup(keyBackupByteArray)
         .subscriberContext(Context.of(key1, value1, key2, value2))
         .subscribe(keyResponse  ->
             System.out.printf("Restored Key with name %s and id %s %n", keyResponse.getName(),
                 keyResponse.getId()));
    ```
  syntax:
    content: public Mono<KeyVaultKey> restoreKeyBackup(byte[] backup)
    parameters:
    - id: backup
      type: byte[]
      description: The backup blob associated with the key.
    return:
      type: reactor.core.publisher.Mono<com.azure.security.keyvault.keys.models.KeyVaultKey>
      description: A <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> containing the <xref uid="com.azure.security.keyvault.keys.models.KeyVaultKey" data-throw-if-not-resolved="false">restored key</xref>.
- uid: com.azure.security.keyvault.keys.KeyAsyncClient.restoreKeyBackupWithResponse(byte[])
  id: restoreKeyBackupWithResponse(byte[])
  artifact: com.azure:azure-security-keyvault-keys:4.2.0-beta.4
  parent: com.azure.security.keyvault.keys.KeyAsyncClient
  langs:
  - java
  name: restoreKeyBackupWithResponse(byte[] backup)
  nameWithType: KeyAsyncClient.restoreKeyBackupWithResponse(byte[] backup)
  fullName: com.azure.security.keyvault.keys.KeyAsyncClient.restoreKeyBackupWithResponse(byte[] backup)
  overload: com.azure.security.keyvault.keys.KeyAsyncClient.restoreKeyBackupWithResponse*
  type: Method
  package: com.azure.security.keyvault.keys
  summary: >-
    Restores a backed up key to a vault. Imports a previously backed up key into Azure Key Vault, restoring the key, its key identifier, attributes and access control policies. The restore operation may be used to import a previously backed up key. The individual versions of a key cannot be restored. The key is restored in its entirety with the same key name as it had when it was backed up. If the key name is not available in the target Key Vault, the restore operation will be rejected. While the key name is retained during restore, the final key identifier will change if the key is restored to a different vault. Restore will restore all versions and preserve version identifiers. The restore operation is subject to security constraints: The target Key Vault must be owned by the same Microsoft Azure Subscription as the source Key Vault The user must have restore permission in the target Key Vault. This operation requires the `keys/restore` permission.


    **Code Samples**


    Restores the key in the key vault from its backup. Subscribes to the call asynchronously and prints out the restored key details when a response has been received.


    //Pass the Key Backup Byte array to the restore operation.


    ```java

    byte[] keyBackupByteArray = {};
     keyAsyncClient.restoreKeyBackupWithResponse(keyBackupByteArray)
         .subscriberContext(Context.of(key1, value1, key2, value2))
         .subscribe(keyResponse  ->
             System.out.printf("Restored Key with name %s and id %s %n", keyResponse.getValue().getName(),
                 keyResponse.getValue().getId()));
    ```
  syntax:
    content: public Mono<Response<KeyVaultKey>> restoreKeyBackupWithResponse(byte[] backup)
    parameters:
    - id: backup
      type: byte[]
      description: The backup blob associated with the key.
    return:
      type: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.security.keyvault.keys.models.KeyVaultKey>>
      description: A <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> containing a <xref uid="com.azure.core.http.rest.Response" data-throw-if-not-resolved="false">Response</xref> whose <xref uid="com.azure.core.http.rest.Response.getValue*" data-throw-if-not-resolved="false">value</xref> contains the <xref uid="com.azure.security.keyvault.keys.models.KeyVaultKey" data-throw-if-not-resolved="false">restored key</xref>.
- uid: com.azure.security.keyvault.keys.KeyAsyncClient.updateKeyProperties(com.azure.security.keyvault.keys.models.KeyProperties,com.azure.security.keyvault.keys.models.KeyOperation...)
  id: updateKeyProperties(com.azure.security.keyvault.keys.models.KeyProperties,com.azure.security.keyvault.keys.models.KeyOperation...)
  artifact: com.azure:azure-security-keyvault-keys:4.2.0-beta.4
  parent: com.azure.security.keyvault.keys.KeyAsyncClient
  langs:
  - java
  name: updateKeyProperties(KeyProperties keyProperties, KeyOperation[] keyOperations)
  nameWithType: KeyAsyncClient.updateKeyProperties(KeyProperties keyProperties, KeyOperation[] keyOperations)
  fullName: com.azure.security.keyvault.keys.KeyAsyncClient.updateKeyProperties(KeyProperties keyProperties, KeyOperation[] keyOperations)
  overload: com.azure.security.keyvault.keys.KeyAsyncClient.updateKeyProperties*
  type: Method
  package: com.azure.security.keyvault.keys
  summary: >-
    Updates the attributes and key operations associated with the specified key, but not the cryptographic key material of the specified key in the key vault. The update operation changes specified attributes of an existing stored key and attributes that are not specified in the request are left unchanged. The cryptographic key material of a key itself cannot be changed. This operation requires the `keys/set` permission.


    **Code Samples**


    Gets latest version of the key, changes its notBefore time and then updates it in the Azure Key Vault. Subscribes to the call asynchronously and prints out the returned key details when a response has been received.


    ```java

    keyAsyncClient.getKey("keyName")
          .subscribe(keyResponse  -> {
              //Update the not before time of the key.
              keyResponse.getProperties().setNotBefore(OffsetDateTime.now().plusDays(50));
              keyAsyncClient.updateKeyProperties(keyResponse.getProperties(), KeyOperation.ENCRYPT,
                  KeyOperation.DECRYPT)
                  .subscriberContext(Context.of(key1, value1, key2, value2))
                  .subscribe(updatedKeyResponse  ->
                      System.out.printf("Key's updated not before time %s %n",
                          updatedKeyResponse.getProperties().getNotBefore().toString()));
          });
    ```
  syntax:
    content: public Mono<KeyVaultKey> updateKeyProperties(KeyProperties keyProperties, KeyOperation[] keyOperations)
    parameters:
    - id: keyProperties
      type: com.azure.security.keyvault.keys.models.KeyProperties
      description: The <xref uid="com.azure.security.keyvault.keys.models.KeyProperties" data-throw-if-not-resolved="false">key properties</xref> object with updated properties.
    - id: keyOperations
      type: com.azure.security.keyvault.keys.models.KeyOperation[]
      description: The updated key operations to associate with the key.
    return:
      type: reactor.core.publisher.Mono<com.azure.security.keyvault.keys.models.KeyVaultKey>
      description: A <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> containing the <xref uid="com.azure.security.keyvault.keys.models.KeyVaultKey" data-throw-if-not-resolved="false">updated key</xref>.
- uid: com.azure.security.keyvault.keys.KeyAsyncClient.updateKeyPropertiesWithResponse(com.azure.security.keyvault.keys.models.KeyProperties,com.azure.security.keyvault.keys.models.KeyOperation...)
  id: updateKeyPropertiesWithResponse(com.azure.security.keyvault.keys.models.KeyProperties,com.azure.security.keyvault.keys.models.KeyOperation...)
  artifact: com.azure:azure-security-keyvault-keys:4.2.0-beta.4
  parent: com.azure.security.keyvault.keys.KeyAsyncClient
  langs:
  - java
  name: updateKeyPropertiesWithResponse(KeyProperties keyProperties, KeyOperation[] keyOperations)
  nameWithType: KeyAsyncClient.updateKeyPropertiesWithResponse(KeyProperties keyProperties, KeyOperation[] keyOperations)
  fullName: com.azure.security.keyvault.keys.KeyAsyncClient.updateKeyPropertiesWithResponse(KeyProperties keyProperties, KeyOperation[] keyOperations)
  overload: com.azure.security.keyvault.keys.KeyAsyncClient.updateKeyPropertiesWithResponse*
  type: Method
  package: com.azure.security.keyvault.keys
  summary: >-
    Updates the attributes and key operations associated with the specified key, but not the cryptographic key material of the specified key in the key vault. The update operation changes specified attributes of an existing stored key and attributes that are not specified in the request are left unchanged. The cryptographic key material of a key itself cannot be changed. This operation requires the `keys/set` permission.


    **Code Samples**


    Gets latest version of the key, changes its notBefore time and then updates it in the Azure Key Vault. Subscribes to the call asynchronously and prints out the returned key details when a response has been received.


    ```java

    keyAsyncClient.getKey("keyName")
         .subscribe(keyResponse  -> {
             //Update the not before time of the key.
             keyResponse.getProperties().setNotBefore(OffsetDateTime.now().plusDays(50));
             keyAsyncClient.updateKeyPropertiesWithResponse(keyResponse.getProperties(), KeyOperation.ENCRYPT,
                 KeyOperation.DECRYPT)
                 .subscriberContext(Context.of(key1, value1, key2, value2))
                 .subscribe(updatedKeyResponse  ->
                     System.out.printf("Key's updated not before time %s %n",
                         updatedKeyResponse.getValue().getProperties().getNotBefore().toString()));
         });
    ```
  syntax:
    content: public Mono<Response<KeyVaultKey>> updateKeyPropertiesWithResponse(KeyProperties keyProperties, KeyOperation[] keyOperations)
    parameters:
    - id: keyProperties
      type: com.azure.security.keyvault.keys.models.KeyProperties
      description: The <xref uid="com.azure.security.keyvault.keys.models.KeyProperties" data-throw-if-not-resolved="false">key properties</xref> object with updated properties.
    - id: keyOperations
      type: com.azure.security.keyvault.keys.models.KeyOperation[]
      description: The updated key operations to associate with the key.
    return:
      type: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.security.keyvault.keys.models.KeyVaultKey>>
      description: A <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> containing a <xref uid="com.azure.core.http.rest.Response" data-throw-if-not-resolved="false">Response</xref> whose <xref uid="com.azure.core.http.rest.Response.getValue*" data-throw-if-not-resolved="false">value</xref> contains the <xref uid="com.azure.security.keyvault.keys.models.KeyVaultKey" data-throw-if-not-resolved="false">updated key</xref>.
references:
- uid: java.net.URL
  spec.java:
  - uid: java.net.URL
    name: URL
    fullName: java.net.URL
- uid: com.azure.core.http.HttpPipeline
  spec.java:
  - uid: com.azure.core.http.HttpPipeline
    name: HttpPipeline
    fullName: com.azure.core.http.HttpPipeline
- uid: com.azure.security.keyvault.keys.KeyServiceVersion
  name: KeyServiceVersion
  nameWithType: KeyServiceVersion
  fullName: com.azure.security.keyvault.keys.KeyServiceVersion
- uid: com.azure.security.keyvault.keys.KeyAsyncClient.KeyAsyncClient*
  name: KeyAsyncClient
  nameWithType: KeyAsyncClient.KeyAsyncClient
  fullName: com.azure.security.keyvault.keys.KeyAsyncClient.KeyAsyncClient
  package: com.azure.security.keyvault.keys
- uid: java.lang.String
  spec.java:
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
- uid: com.azure.security.keyvault.keys.KeyAsyncClient.getVaultUrl*
  name: getVaultUrl
  nameWithType: KeyAsyncClient.getVaultUrl
  fullName: com.azure.security.keyvault.keys.KeyAsyncClient.getVaultUrl
  package: com.azure.security.keyvault.keys
- uid: com.azure.security.keyvault.keys.models.KeyType
  name: KeyType
  nameWithType: KeyType
  fullName: com.azure.security.keyvault.keys.models.KeyType
- uid: reactor.core.publisher.Mono<com.azure.security.keyvault.keys.models.KeyVaultKey>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: com.azure.security.keyvault.keys.models.KeyVaultKey
    name: KeyVaultKey
    fullName: com.azure.security.keyvault.keys.models.KeyVaultKey
  - name: '>'
    fullName: '>'
- uid: com.azure.security.keyvault.keys.KeyAsyncClient.createKey*
  name: createKey
  nameWithType: KeyAsyncClient.createKey
  fullName: com.azure.security.keyvault.keys.KeyAsyncClient.createKey
  package: com.azure.security.keyvault.keys
- uid: com.azure.security.keyvault.keys.models.CreateKeyOptions
  name: CreateKeyOptions
  nameWithType: CreateKeyOptions
  fullName: com.azure.security.keyvault.keys.models.CreateKeyOptions
- uid: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.security.keyvault.keys.models.KeyVaultKey>>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: com.azure.core.http.rest.Response
    name: Response
    fullName: com.azure.core.http.rest.Response
  - name: <
    fullName: <
  - uid: com.azure.security.keyvault.keys.models.KeyVaultKey
    name: KeyVaultKey
    fullName: com.azure.security.keyvault.keys.models.KeyVaultKey
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
- uid: com.azure.security.keyvault.keys.KeyAsyncClient.createKeyWithResponse*
  name: createKeyWithResponse
  nameWithType: KeyAsyncClient.createKeyWithResponse
  fullName: com.azure.security.keyvault.keys.KeyAsyncClient.createKeyWithResponse
  package: com.azure.security.keyvault.keys
- uid: com.azure.security.keyvault.keys.models.CreateRsaKeyOptions
  name: CreateRsaKeyOptions
  nameWithType: CreateRsaKeyOptions
  fullName: com.azure.security.keyvault.keys.models.CreateRsaKeyOptions
- uid: com.azure.security.keyvault.keys.KeyAsyncClient.createRsaKey*
  name: createRsaKey
  nameWithType: KeyAsyncClient.createRsaKey
  fullName: com.azure.security.keyvault.keys.KeyAsyncClient.createRsaKey
  package: com.azure.security.keyvault.keys
- uid: com.azure.security.keyvault.keys.KeyAsyncClient.createRsaKeyWithResponse*
  name: createRsaKeyWithResponse
  nameWithType: KeyAsyncClient.createRsaKeyWithResponse
  fullName: com.azure.security.keyvault.keys.KeyAsyncClient.createRsaKeyWithResponse
  package: com.azure.security.keyvault.keys
- uid: com.azure.security.keyvault.keys.models.CreateEcKeyOptions
  name: CreateEcKeyOptions
  nameWithType: CreateEcKeyOptions
  fullName: com.azure.security.keyvault.keys.models.CreateEcKeyOptions
- uid: com.azure.security.keyvault.keys.KeyAsyncClient.createEcKey*
  name: createEcKey
  nameWithType: KeyAsyncClient.createEcKey
  fullName: com.azure.security.keyvault.keys.KeyAsyncClient.createEcKey
  package: com.azure.security.keyvault.keys
- uid: com.azure.security.keyvault.keys.KeyAsyncClient.createEcKeyWithResponse*
  name: createEcKeyWithResponse
  nameWithType: KeyAsyncClient.createEcKeyWithResponse
  fullName: com.azure.security.keyvault.keys.KeyAsyncClient.createEcKeyWithResponse
  package: com.azure.security.keyvault.keys
- uid: com.azure.security.keyvault.keys.models.JsonWebKey
  name: JsonWebKey
  nameWithType: JsonWebKey
  fullName: com.azure.security.keyvault.keys.models.JsonWebKey
- uid: com.azure.security.keyvault.keys.KeyAsyncClient.importKey*
  name: importKey
  nameWithType: KeyAsyncClient.importKey
  fullName: com.azure.security.keyvault.keys.KeyAsyncClient.importKey
  package: com.azure.security.keyvault.keys
- uid: com.azure.security.keyvault.keys.models.ImportKeyOptions
  name: ImportKeyOptions
  nameWithType: ImportKeyOptions
  fullName: com.azure.security.keyvault.keys.models.ImportKeyOptions
- uid: com.azure.security.keyvault.keys.KeyAsyncClient.importKeyWithResponse*
  name: importKeyWithResponse
  nameWithType: KeyAsyncClient.importKeyWithResponse
  fullName: com.azure.security.keyvault.keys.KeyAsyncClient.importKeyWithResponse
  package: com.azure.security.keyvault.keys
- uid: com.azure.security.keyvault.keys.KeyAsyncClient.getKey*
  name: getKey
  nameWithType: KeyAsyncClient.getKey
  fullName: com.azure.security.keyvault.keys.KeyAsyncClient.getKey
  package: com.azure.security.keyvault.keys
- uid: com.azure.security.keyvault.keys.KeyAsyncClient.getKeyWithResponse*
  name: getKeyWithResponse
  nameWithType: KeyAsyncClient.getKeyWithResponse
  fullName: com.azure.security.keyvault.keys.KeyAsyncClient.getKeyWithResponse
  package: com.azure.security.keyvault.keys
- uid: com.azure.security.keyvault.keys.models.KeyProperties
  name: KeyProperties
  nameWithType: KeyProperties
  fullName: com.azure.security.keyvault.keys.models.KeyProperties
- uid: com.azure.security.keyvault.keys.models.KeyOperation[]
  spec.java:
  - uid: com.azure.security.keyvault.keys.models.KeyOperation
    name: KeyOperation
    fullName: com.azure.security.keyvault.keys.models.KeyOperation
  - name: '[]'
    fullName: '[]'
- uid: com.azure.security.keyvault.keys.KeyAsyncClient.updateKeyPropertiesWithResponse*
  name: updateKeyPropertiesWithResponse
  nameWithType: KeyAsyncClient.updateKeyPropertiesWithResponse
  fullName: com.azure.security.keyvault.keys.KeyAsyncClient.updateKeyPropertiesWithResponse
  package: com.azure.security.keyvault.keys
- uid: com.azure.security.keyvault.keys.KeyAsyncClient.updateKeyProperties*
  name: updateKeyProperties
  nameWithType: KeyAsyncClient.updateKeyProperties
  fullName: com.azure.security.keyvault.keys.KeyAsyncClient.updateKeyProperties
  package: com.azure.security.keyvault.keys
- uid: com.azure.core.util.polling.PollerFlux<com.azure.security.keyvault.keys.models.DeletedKey,java.lang.Void>
  spec.java:
  - uid: com.azure.core.util.polling.PollerFlux
    name: PollerFlux
    fullName: com.azure.core.util.polling.PollerFlux
  - name: <
    fullName: <
  - uid: com.azure.security.keyvault.keys.models.DeletedKey
    name: DeletedKey
    fullName: com.azure.security.keyvault.keys.models.DeletedKey
  - name: ','
    fullName: ','
  - uid: java.lang.Void
    name: Void
    fullName: java.lang.Void
  - name: '>'
    fullName: '>'
- uid: com.azure.security.keyvault.keys.KeyAsyncClient.beginDeleteKey*
  name: beginDeleteKey
  nameWithType: KeyAsyncClient.beginDeleteKey
  fullName: com.azure.security.keyvault.keys.KeyAsyncClient.beginDeleteKey
  package: com.azure.security.keyvault.keys
- uid: reactor.core.publisher.Mono<com.azure.security.keyvault.keys.models.DeletedKey>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: com.azure.security.keyvault.keys.models.DeletedKey
    name: DeletedKey
    fullName: com.azure.security.keyvault.keys.models.DeletedKey
  - name: '>'
    fullName: '>'
- uid: com.azure.security.keyvault.keys.KeyAsyncClient.getDeletedKey*
  name: getDeletedKey
  nameWithType: KeyAsyncClient.getDeletedKey
  fullName: com.azure.security.keyvault.keys.KeyAsyncClient.getDeletedKey
  package: com.azure.security.keyvault.keys
- uid: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.security.keyvault.keys.models.DeletedKey>>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: com.azure.core.http.rest.Response
    name: Response
    fullName: com.azure.core.http.rest.Response
  - name: <
    fullName: <
  - uid: com.azure.security.keyvault.keys.models.DeletedKey
    name: DeletedKey
    fullName: com.azure.security.keyvault.keys.models.DeletedKey
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
- uid: com.azure.security.keyvault.keys.KeyAsyncClient.getDeletedKeyWithResponse*
  name: getDeletedKeyWithResponse
  nameWithType: KeyAsyncClient.getDeletedKeyWithResponse
  fullName: com.azure.security.keyvault.keys.KeyAsyncClient.getDeletedKeyWithResponse
  package: com.azure.security.keyvault.keys
- uid: reactor.core.publisher.Mono<java.lang.Void>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: java.lang.Void
    name: Void
    fullName: java.lang.Void
  - name: '>'
    fullName: '>'
- uid: com.azure.security.keyvault.keys.KeyAsyncClient.purgeDeletedKey*
  name: purgeDeletedKey
  nameWithType: KeyAsyncClient.purgeDeletedKey
  fullName: com.azure.security.keyvault.keys.KeyAsyncClient.purgeDeletedKey
  package: com.azure.security.keyvault.keys
- uid: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<java.lang.Void>>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: com.azure.core.http.rest.Response
    name: Response
    fullName: com.azure.core.http.rest.Response
  - name: <
    fullName: <
  - uid: java.lang.Void
    name: Void
    fullName: java.lang.Void
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
- uid: com.azure.security.keyvault.keys.KeyAsyncClient.purgeDeletedKeyWithResponse*
  name: purgeDeletedKeyWithResponse
  nameWithType: KeyAsyncClient.purgeDeletedKeyWithResponse
  fullName: com.azure.security.keyvault.keys.KeyAsyncClient.purgeDeletedKeyWithResponse
  package: com.azure.security.keyvault.keys
- uid: com.azure.core.util.polling.PollerFlux<com.azure.security.keyvault.keys.models.KeyVaultKey,java.lang.Void>
  spec.java:
  - uid: com.azure.core.util.polling.PollerFlux
    name: PollerFlux
    fullName: com.azure.core.util.polling.PollerFlux
  - name: <
    fullName: <
  - uid: com.azure.security.keyvault.keys.models.KeyVaultKey
    name: KeyVaultKey
    fullName: com.azure.security.keyvault.keys.models.KeyVaultKey
  - name: ','
    fullName: ','
  - uid: java.lang.Void
    name: Void
    fullName: java.lang.Void
  - name: '>'
    fullName: '>'
- uid: com.azure.security.keyvault.keys.KeyAsyncClient.beginRecoverDeletedKey*
  name: beginRecoverDeletedKey
  nameWithType: KeyAsyncClient.beginRecoverDeletedKey
  fullName: com.azure.security.keyvault.keys.KeyAsyncClient.beginRecoverDeletedKey
  package: com.azure.security.keyvault.keys
- uid: reactor.core.publisher.Mono<byte[]>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: byte
    name: byte
    fullName: byte
  - name: '[]'
    fullName: '[]'
  - name: '>'
    fullName: '>'
- uid: com.azure.security.keyvault.keys.KeyAsyncClient.backupKey*
  name: backupKey
  nameWithType: KeyAsyncClient.backupKey
  fullName: com.azure.security.keyvault.keys.KeyAsyncClient.backupKey
  package: com.azure.security.keyvault.keys
- uid: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<byte[]>>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: com.azure.core.http.rest.Response
    name: Response
    fullName: com.azure.core.http.rest.Response
  - name: <
    fullName: <
  - uid: byte
    name: byte
    fullName: byte
  - name: '[]'
    fullName: '[]'
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
- uid: com.azure.security.keyvault.keys.KeyAsyncClient.backupKeyWithResponse*
  name: backupKeyWithResponse
  nameWithType: KeyAsyncClient.backupKeyWithResponse
  fullName: com.azure.security.keyvault.keys.KeyAsyncClient.backupKeyWithResponse
  package: com.azure.security.keyvault.keys
- uid: byte[]
  spec.java:
  - uid: byte
    name: byte
    fullName: byte
  - name: '[]'
    fullName: '[]'
- uid: com.azure.security.keyvault.keys.KeyAsyncClient.restoreKeyBackup*
  name: restoreKeyBackup
  nameWithType: KeyAsyncClient.restoreKeyBackup
  fullName: com.azure.security.keyvault.keys.KeyAsyncClient.restoreKeyBackup
  package: com.azure.security.keyvault.keys
- uid: com.azure.security.keyvault.keys.KeyAsyncClient.restoreKeyBackupWithResponse*
  name: restoreKeyBackupWithResponse
  nameWithType: KeyAsyncClient.restoreKeyBackupWithResponse
  fullName: com.azure.security.keyvault.keys.KeyAsyncClient.restoreKeyBackupWithResponse
  package: com.azure.security.keyvault.keys
- uid: com.azure.core.http.rest.PagedFlux<com.azure.security.keyvault.keys.models.KeyProperties>
  spec.java:
  - uid: com.azure.core.http.rest.PagedFlux
    name: PagedFlux
    fullName: com.azure.core.http.rest.PagedFlux
  - name: <
    fullName: <
  - uid: com.azure.security.keyvault.keys.models.KeyProperties
    name: KeyProperties
    fullName: com.azure.security.keyvault.keys.models.KeyProperties
  - name: '>'
    fullName: '>'
- uid: com.azure.security.keyvault.keys.KeyAsyncClient.listPropertiesOfKeys*
  name: listPropertiesOfKeys
  nameWithType: KeyAsyncClient.listPropertiesOfKeys
  fullName: com.azure.security.keyvault.keys.KeyAsyncClient.listPropertiesOfKeys
  package: com.azure.security.keyvault.keys
- uid: com.azure.core.http.rest.PagedFlux<com.azure.security.keyvault.keys.models.DeletedKey>
  spec.java:
  - uid: com.azure.core.http.rest.PagedFlux
    name: PagedFlux
    fullName: com.azure.core.http.rest.PagedFlux
  - name: <
    fullName: <
  - uid: com.azure.security.keyvault.keys.models.DeletedKey
    name: DeletedKey
    fullName: com.azure.security.keyvault.keys.models.DeletedKey
  - name: '>'
    fullName: '>'
- uid: com.azure.security.keyvault.keys.KeyAsyncClient.listDeletedKeys*
  name: listDeletedKeys
  nameWithType: KeyAsyncClient.listDeletedKeys
  fullName: com.azure.security.keyvault.keys.KeyAsyncClient.listDeletedKeys
  package: com.azure.security.keyvault.keys
- uid: com.azure.security.keyvault.keys.KeyAsyncClient.listPropertiesOfKeyVersions*
  name: listPropertiesOfKeyVersions
  nameWithType: KeyAsyncClient.listPropertiesOfKeyVersions
  fullName: com.azure.security.keyvault.keys.KeyAsyncClient.listPropertiesOfKeyVersions
  package: com.azure.security.keyvault.keys
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: java.lang.Object.finalize()
  name: Object.finalize()
  nameWithType: Object.finalize()
  fullName: java.lang.Object.finalize()
- uid: java.lang.Object.clone()
  name: Object.clone()
  nameWithType: Object.clone()
  fullName: java.lang.Object.clone()
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: java.lang.Object.equals(java.lang.Object)
  name: Object.equals(Object)
  nameWithType: Object.equals(Object)
  fullName: java.lang.Object.equals(java.lang.Object)
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.lang.Object.hashCode()
  name: Object.hashCode()
  nameWithType: Object.hashCode()
  fullName: java.lang.Object.hashCode()
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: java.lang.Object.toString()
  name: Object.toString()
  nameWithType: Object.toString()
  fullName: java.lang.Object.toString()
- uid: com.azure.security.keyvault.keys.models.KeyVaultKey
  name: KeyVaultKey
  nameWithType: KeyVaultKey
  fullName: com.azure.security.keyvault.keys.models.KeyVaultKey
- uid: reactor.core.publisher.Mono
  name: Mono
  nameWithType: Mono
  fullName: reactor.core.publisher.Mono
- uid: com.azure.core.http.rest.Response
  name: Response
  nameWithType: Response
  fullName: com.azure.core.http.rest.Response
- uid: com.azure.security.keyvault.keys.models.DeletedKey,java.lang.Void
  name: DeletedKey,Void
  nameWithType: DeletedKey,Void
  fullName: com.azure.security.keyvault.keys.models.DeletedKey,java.lang.Void
- uid: com.azure.core.util.polling.PollerFlux
  name: PollerFlux
  nameWithType: PollerFlux
  fullName: com.azure.core.util.polling.PollerFlux
- uid: com.azure.security.keyvault.keys.models.DeletedKey
  name: DeletedKey
  nameWithType: DeletedKey
  fullName: com.azure.security.keyvault.keys.models.DeletedKey
- uid: java.lang.Void
  name: Void
  nameWithType: Void
  fullName: java.lang.Void
- uid: com.azure.security.keyvault.keys.models.KeyVaultKey,java.lang.Void
  name: KeyVaultKey,Void
  nameWithType: KeyVaultKey,Void
  fullName: com.azure.security.keyvault.keys.models.KeyVaultKey,java.lang.Void
- uid: com.azure.core.http.rest.PagedFlux
  name: PagedFlux
  nameWithType: PagedFlux
  fullName: com.azure.core.http.rest.PagedFlux
