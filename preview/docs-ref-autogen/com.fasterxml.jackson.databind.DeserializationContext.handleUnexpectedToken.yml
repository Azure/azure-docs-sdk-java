### YamlMime:JavaMember
uid: "com.fasterxml.jackson.databind.DeserializationContext.handleUnexpectedToken*"
fullName: "com.fasterxml.jackson.databind.DeserializationContext.handleUnexpectedToken"
name: "handleUnexpectedToken"
nameWithType: "DeserializationContext.handleUnexpectedToken"
members:
- uid: "com.fasterxml.jackson.databind.DeserializationContext.handleUnexpectedToken(com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.core.JsonParser)"
  fullName: "com.fasterxml.jackson.databind.DeserializationContext.handleUnexpectedToken(JavaType targetType, JsonParser p)"
  name: "handleUnexpectedToken(JavaType targetType, JsonParser p)"
  nameWithType: "DeserializationContext.handleUnexpectedToken(JavaType targetType, JsonParser p)"
  summary: "Method that deserializers should call if the first token of the value to deserialize is of unexpected type (that is, type of token that deserializer cannot handle). This could occur, for example, if a Number deserializer encounter <xref uid=\"com.fasterxml.jackson.core.JsonToken.START_ARRAY\" data-throw-if-not-resolved=\"false\" data-raw-source=\"JsonToken#START_ARRAY\"></xref> instead of <xref uid=\"com.fasterxml.jackson.core.JsonToken.VALUE_NUMBER_INT\" data-throw-if-not-resolved=\"false\" data-raw-source=\"JsonToken#VALUE_NUMBER_INT\"></xref> or <xref uid=\"com.fasterxml.jackson.core.JsonToken.VALUE_NUMBER_FLOAT\" data-throw-if-not-resolved=\"false\" data-raw-source=\"JsonToken#VALUE_NUMBER_FLOAT\"></xref>."
  parameters:
  - description: "Type that was to be instantiated"
    name: "targetType"
    type: "<xref href=\"com.fasterxml.jackson.databind.JavaType?alt=com.fasterxml.jackson.databind.JavaType&text=JavaType\" data-throw-if-not-resolved=\"False\" />"
  - description: "Parser that points to the JSON value to decode"
    name: "p"
    type: "<xref href=\"com.fasterxml.jackson.core.JsonParser?alt=com.fasterxml.jackson.core.JsonParser&text=JsonParser\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Object handleUnexpectedToken(JavaType targetType, JsonParser p)"
  exceptions:
  - type: "<xref href=\"java.io.IOException?alt=java.io.IOException&text=IOException\" data-throw-if-not-resolved=\"False\" />"
  returns:
    description: "Object that should be constructed, if any; has to be of type <code>instClass</code>"
    type: "<xref href=\"java.lang.Object?alt=java.lang.Object&text=Object\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.fasterxml.jackson.databind.DeserializationContext.handleUnexpectedToken(com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.core.JsonToken,com.fasterxml.jackson.core.JsonParser,java.lang.String,java.lang.Object...)"
  fullName: "com.fasterxml.jackson.databind.DeserializationContext.handleUnexpectedToken(JavaType targetType, JsonToken t, JsonParser p, String msg, Object[] msgArgs)"
  name: "handleUnexpectedToken(JavaType targetType, JsonToken t, JsonParser p, String msg, Object[] msgArgs)"
  nameWithType: "DeserializationContext.handleUnexpectedToken(JavaType targetType, JsonToken t, JsonParser p, String msg, Object[] msgArgs)"
  summary: "Method that deserializers should call if the first token of the value to deserialize is of unexpected type (that is, type of token that deserializer cannot handle). This could occur, for example, if a Number deserializer encounter <xref uid=\"com.fasterxml.jackson.core.JsonToken.START_ARRAY\" data-throw-if-not-resolved=\"false\" data-raw-source=\"JsonToken#START_ARRAY\"></xref> instead of <xref uid=\"com.fasterxml.jackson.core.JsonToken.VALUE_NUMBER_INT\" data-throw-if-not-resolved=\"false\" data-raw-source=\"JsonToken#VALUE_NUMBER_INT\"></xref> or <xref uid=\"com.fasterxml.jackson.core.JsonToken.VALUE_NUMBER_FLOAT\" data-throw-if-not-resolved=\"false\" data-raw-source=\"JsonToken#VALUE_NUMBER_FLOAT\"></xref>."
  parameters:
  - description: "Type that was to be instantiated"
    name: "targetType"
    type: "<xref href=\"com.fasterxml.jackson.databind.JavaType?alt=com.fasterxml.jackson.databind.JavaType&text=JavaType\" data-throw-if-not-resolved=\"False\" />"
  - description: "Token encountered that does not match expected"
    name: "t"
    type: "<xref href=\"com.fasterxml.jackson.core.JsonToken?alt=com.fasterxml.jackson.core.JsonToken&text=JsonToken\" data-throw-if-not-resolved=\"False\" />"
  - description: "Parser that points to the JSON value to decode"
    name: "p"
    type: "<xref href=\"com.fasterxml.jackson.core.JsonParser?alt=com.fasterxml.jackson.core.JsonParser&text=JsonParser\" data-throw-if-not-resolved=\"False\" />"
  - name: "msg"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - name: "msgArgs"
    type: "<xref href=\"java.lang.Object?alt=java.lang.Object&text=Object\" data-throw-if-not-resolved=\"False\" />[]"
  syntax: "public Object handleUnexpectedToken(JavaType targetType, JsonToken t, JsonParser p, String msg, Object[] msgArgs)"
  exceptions:
  - type: "<xref href=\"java.io.IOException?alt=java.io.IOException&text=IOException\" data-throw-if-not-resolved=\"False\" />"
  returns:
    description: "Object that should be constructed, if any; has to be of type <code>instClass</code>"
    type: "<xref href=\"java.lang.Object?alt=java.lang.Object&text=Object\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.fasterxml.jackson.databind.DeserializationContext.handleUnexpectedToken(java.lang.Class<?>,com.fasterxml.jackson.core.JsonParser)"
  fullName: "com.fasterxml.jackson.databind.DeserializationContext.handleUnexpectedToken(Class<?> instClass, JsonParser p)"
  name: "handleUnexpectedToken(Class<?> instClass, JsonParser p)"
  nameWithType: "DeserializationContext.handleUnexpectedToken(Class<?> instClass, JsonParser p)"
  summary: "Method that deserializers should call if the first token of the value to deserialize is of unexpected type (that is, type of token that deserializer cannot handle). This could occur, for example, if a Number deserializer encounter <xref uid=\"com.fasterxml.jackson.core.JsonToken.START_ARRAY\" data-throw-if-not-resolved=\"false\" data-raw-source=\"JsonToken#START_ARRAY\"></xref> instead of <xref uid=\"com.fasterxml.jackson.core.JsonToken.VALUE_NUMBER_INT\" data-throw-if-not-resolved=\"false\" data-raw-source=\"JsonToken#VALUE_NUMBER_INT\"></xref> or <xref uid=\"com.fasterxml.jackson.core.JsonToken.VALUE_NUMBER_FLOAT\" data-throw-if-not-resolved=\"false\" data-raw-source=\"JsonToken#VALUE_NUMBER_FLOAT\"></xref>."
  parameters:
  - description: "Type that was to be instantiated"
    name: "instClass"
    type: "<xref href=\"java.lang.Class?alt=java.lang.Class&text=Class\" data-throw-if-not-resolved=\"False\" />&lt;?&gt;"
  - description: "Parser that points to the JSON value to decode"
    name: "p"
    type: "<xref href=\"com.fasterxml.jackson.core.JsonParser?alt=com.fasterxml.jackson.core.JsonParser&text=JsonParser\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Object handleUnexpectedToken(Class<?> instClass, JsonParser p)"
  exceptions:
  - type: "<xref href=\"java.io.IOException?alt=java.io.IOException&text=IOException\" data-throw-if-not-resolved=\"False\" />"
  returns:
    description: "Object that should be constructed, if any; has to be of type <code>instClass</code>"
    type: "<xref href=\"java.lang.Object?alt=java.lang.Object&text=Object\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.fasterxml.jackson.databind.DeserializationContext.handleUnexpectedToken(java.lang.Class<?>,com.fasterxml.jackson.core.JsonToken,com.fasterxml.jackson.core.JsonParser,java.lang.String,java.lang.Object...)"
  fullName: "com.fasterxml.jackson.databind.DeserializationContext.handleUnexpectedToken(Class<?> instClass, JsonToken t, JsonParser p, String msg, Object[] msgArgs)"
  name: "handleUnexpectedToken(Class<?> instClass, JsonToken t, JsonParser p, String msg, Object[] msgArgs)"
  nameWithType: "DeserializationContext.handleUnexpectedToken(Class<?> instClass, JsonToken t, JsonParser p, String msg, Object[] msgArgs)"
  summary: "Method that deserializers should call if the first token of the value to deserialize is of unexpected type (that is, type of token that deserializer cannot handle). This could occur, for example, if a Number deserializer encounter <xref uid=\"com.fasterxml.jackson.core.JsonToken.START_ARRAY\" data-throw-if-not-resolved=\"false\" data-raw-source=\"JsonToken#START_ARRAY\"></xref> instead of <xref uid=\"com.fasterxml.jackson.core.JsonToken.VALUE_NUMBER_INT\" data-throw-if-not-resolved=\"false\" data-raw-source=\"JsonToken#VALUE_NUMBER_INT\"></xref> or <xref uid=\"com.fasterxml.jackson.core.JsonToken.VALUE_NUMBER_FLOAT\" data-throw-if-not-resolved=\"false\" data-raw-source=\"JsonToken#VALUE_NUMBER_FLOAT\"></xref>."
  parameters:
  - description: "Type that was to be instantiated"
    name: "instClass"
    type: "<xref href=\"java.lang.Class?alt=java.lang.Class&text=Class\" data-throw-if-not-resolved=\"False\" />&lt;?&gt;"
  - description: "Token encountered that does match expected"
    name: "t"
    type: "<xref href=\"com.fasterxml.jackson.core.JsonToken?alt=com.fasterxml.jackson.core.JsonToken&text=JsonToken\" data-throw-if-not-resolved=\"False\" />"
  - description: "Parser that points to the JSON value to decode"
    name: "p"
    type: "<xref href=\"com.fasterxml.jackson.core.JsonParser?alt=com.fasterxml.jackson.core.JsonParser&text=JsonParser\" data-throw-if-not-resolved=\"False\" />"
  - name: "msg"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - name: "msgArgs"
    type: "<xref href=\"java.lang.Object?alt=java.lang.Object&text=Object\" data-throw-if-not-resolved=\"False\" />[]"
  syntax: "public Object handleUnexpectedToken(Class<?> instClass, JsonToken t, JsonParser p, String msg, Object[] msgArgs)"
  exceptions:
  - type: "<xref href=\"java.io.IOException?alt=java.io.IOException&text=IOException\" data-throw-if-not-resolved=\"False\" />"
  returns:
    description: "Object that should be constructed, if any; has to be of type <code>instClass</code>"
    type: "<xref href=\"java.lang.Object?alt=java.lang.Object&text=Object\" data-throw-if-not-resolved=\"False\" />"
type: "method"
metadata: {}
package: "com.fasterxml.jackson.databind"
artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
