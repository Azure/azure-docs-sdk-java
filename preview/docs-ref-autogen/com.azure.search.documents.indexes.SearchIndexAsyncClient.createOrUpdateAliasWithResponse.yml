### YamlMime:JavaMember
uid: "com.azure.search.documents.indexes.SearchIndexAsyncClient.createOrUpdateAliasWithResponse*"
fullName: "com.azure.search.documents.indexes.SearchIndexAsyncClient.createOrUpdateAliasWithResponse"
name: "createOrUpdateAliasWithResponse"
nameWithType: "SearchIndexAsyncClient.createOrUpdateAliasWithResponse"
members:
- uid: "com.azure.search.documents.indexes.SearchIndexAsyncClient.createOrUpdateAliasWithResponse(com.azure.search.documents.indexes.models.SearchAlias,boolean)"
  fullName: "com.azure.search.documents.indexes.SearchIndexAsyncClient.createOrUpdateAliasWithResponse(SearchAlias alias, boolean onlyIfUnchanged)"
  name: "createOrUpdateAliasWithResponse(SearchAlias alias, boolean onlyIfUnchanged)"
  nameWithType: "SearchIndexAsyncClient.createOrUpdateAliasWithResponse(SearchAlias alias, boolean onlyIfUnchanged)"
  summary: "Creates or updates an Azure Cognitive Search alias.\n\n**Code Sample**\n\nCreate then update the search alias named \"my-alias\".\n\n```java\nsearchIndexAsyncClient.createOrUpdateAliasWithResponse(\n         new SearchAlias(\"my-alias\", Collections.singletonList(\"index-to-alias\")), false)\n     .flatMap(response -> {\n         System.out.printf(\"Response status code %d. Created alias '%s' that aliases index '%s'.\",\n             response.getStatusCode(), response.getValue().getName(), response.getValue().getIndexes().get(0));\n\n         return searchIndexAsyncClient.createOrUpdateAliasWithResponse(\n             new SearchAlias(response.getValue().getName(), Collections.singletonList(\"new-index-to-alias\"))\n             .setETag(response.getValue().getETag()), true);\n     }).subscribe(response ->\n         System.out.printf(\"Response status code %d. Updated alias '%s' that aliases index '%s'.\",\n         response.getStatusCode(), response.getValue().getName(), response.getValue().getIndexes().get(0)));\n```"
  parameters:
  - description: "definition of the alias to create or update."
    name: "alias"
    type: "<xref href=\"com.azure.search.documents.indexes.models.SearchAlias?alt=com.azure.search.documents.indexes.models.SearchAlias&text=SearchAlias\" data-throw-if-not-resolved=\"False\" />"
  - description: "only update the alias if the eTag matches the alias on the service"
    name: "onlyIfUnchanged"
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<SearchAlias>> createOrUpdateAliasWithResponse(SearchAlias alias, boolean onlyIfUnchanged)"
  returns:
    description: "the created or updated alias."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.search.documents.indexes.models.SearchAlias?alt=com.azure.search.documents.indexes.models.SearchAlias&text=SearchAlias\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
type: "method"
metadata: {}
package: "com.azure.search.documents.indexes"
artifact: com.azure:azure-search-documents:11.5.0-beta.7
