### YamlMime:JavaMember
uid: "com.azure.cosmos.implementation.guava25.collect.Sets.newTreeSet*"
fullName: "com.azure.cosmos.implementation.guava25.collect.Sets.<E>newTreeSet"
name: "<E>newTreeSet"
nameWithType: "Sets.<E>newTreeSet"
members:
- uid: "com.azure.cosmos.implementation.guava25.collect.Sets.<E>newTreeSet()"
  fullName: "com.azure.cosmos.implementation.guava25.collect.Sets.<E>newTreeSet()"
  name: "<E>newTreeSet()"
  nameWithType: "Sets.<E>newTreeSet()"
  summary: "Creates a *mutable*, empty `TreeSet` instance sorted by the natural sort ordering of its elements.\n\n**Note:** if mutability is not required, use <xref uid=\"com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.&lt;E&gt;of()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ImmutableSortedSet#of()\"></xref> instead.\n\n**Note for Java 7 and later:** this method is now unnecessary and should be treated as deprecated. Instead, use the `TreeSet` constructor directly, taking advantage of the new [\"diamond\" syntax][diamond_ syntax].\n\n\n[diamond_ syntax]: http://goo.gl/iz2Wi"
  syntax: "public static TreeSet<E> <E>newTreeSet()"
  returns:
    description: "a new, empty <code>TreeSet</code>"
    type: "<xref href=\"java.util.TreeSet?alt=java.util.TreeSet&text=TreeSet\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"E?alt=E&text=E\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.cosmos.implementation.guava25.collect.Sets.<E>newTreeSet(java.lang.Iterable<? extends E>)"
  fullName: "com.azure.cosmos.implementation.guava25.collect.Sets.<E>newTreeSet(Iterable<? extends E> elements)"
  name: "<E>newTreeSet(Iterable<? extends E> elements)"
  nameWithType: "Sets.<E>newTreeSet(Iterable<? extends E> elements)"
  summary: "Creates a *mutable* `TreeSet` instance containing the given elements sorted by their natural ordering.\n\n**Note:** if mutability is not required, use <xref uid=\"com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.&lt;E&gt;copyOf(java.lang.Iterable&lt;? extends E&gt;)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ImmutableSortedSet#copyOf(Iterable)\"></xref> instead.\n\n**Note:** If `elements` is a `SortedSet` with an explicit comparator, this method has different behavior than <xref uid=\"java.util.TreeSet.TreeSet*\" data-throw-if-not-resolved=\"false\" data-raw-source=\"TreeSet#TreeSet(SortedSet)\"></xref>, which returns a `TreeSet` with that comparator.\n\n**Note for Java 7 and later:** this method is now unnecessary and should be treated as deprecated. Instead, use the `TreeSet` constructor directly, taking advantage of the new [\"diamond\" syntax][diamond_ syntax].\n\nThis method is just a small convenience for creating an empty set and then calling <xref uid=\"com.azure.cosmos.implementation.guava25.collect.Iterables.addAll\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Iterables#addAll\"></xref>. This method is not very useful and will likely be deprecated in the future.\n\n\n[diamond_ syntax]: http://goo.gl/iz2Wi"
  parameters:
  - description: "the elements that the set should contain"
    name: "elements"
    type: "<xref href=\"java.lang.Iterable?alt=java.lang.Iterable&text=Iterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"? extends E?alt=? extends E&text=? extends E\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public static TreeSet<E> <E>newTreeSet(Iterable<? extends E> elements)"
  returns:
    description: "a new <code>TreeSet</code> containing those elements (minus duplicates)"
    type: "<xref href=\"java.util.TreeSet?alt=java.util.TreeSet&text=TreeSet\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"E?alt=E&text=E\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.cosmos.implementation.guava25.collect.Sets.<E>newTreeSet(java.util.Comparator<? super E>)"
  fullName: "com.azure.cosmos.implementation.guava25.collect.Sets.<E>newTreeSet(Comparator<? super E> comparator)"
  name: "<E>newTreeSet(Comparator<? super E> comparator)"
  nameWithType: "Sets.<E>newTreeSet(Comparator<? super E> comparator)"
  summary: "Creates a *mutable*, empty `TreeSet` instance with the given comparator.\n\n**Note:** if mutability is not required, use `ImmutableSortedSet.orderedBy(comparator).build()` instead.\n\n**Note for Java 7 and later:** this method is now unnecessary and should be treated as deprecated. Instead, use the `TreeSet` constructor directly, taking advantage of the new [\"diamond\" syntax][diamond_ syntax]. One caveat to this is that the `TreeSet` constructor uses a null `Comparator` to mean \"natural ordering,\" whereas this factory rejects null. Clean your code accordingly.\n\n\n[diamond_ syntax]: http://goo.gl/iz2Wi"
  parameters:
  - description: "the comparator to use to sort the set"
    name: "comparator"
    type: "<xref href=\"java.util.Comparator?alt=java.util.Comparator&text=Comparator\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"? super E?alt=? super E&text=? super E\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public static TreeSet<E> <E>newTreeSet(Comparator<? super E> comparator)"
  returns:
    description: "a new, empty <code>TreeSet</code>"
    type: "<xref href=\"java.util.TreeSet?alt=java.util.TreeSet&text=TreeSet\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"E?alt=E&text=E\" data-throw-if-not-resolved=\"False\" />&gt;"
type: "method"
metadata: {}
package: "com.azure.cosmos.implementation.guava25.collect"
artifact: com.azure:azure-cosmos:4.4.0-beta.1
