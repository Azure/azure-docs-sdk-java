### YamlMime:JavaType
uid: "com.azure.search.documents.indexes.SearchIndexerClient"
fullName: "com.azure.search.documents.indexes.SearchIndexerClient"
name: "SearchIndexerClient"
nameWithType: "SearchIndexerClient"
summary: "This class provides a client that contains the operations for creating, getting, listing, updating, or deleting data source connections, indexers, or skillsets and running or resetting indexers in an Azure AI Search service."
inheritances:
- "<xref href=\"java.lang.Object?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
inheritedClassMethods:
- classRef: "java.lang.<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html\">Object</a>"
  methodsRef:
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#clone--\">clone</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#equals-java.lang.Object-\">equals</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#finalize--\">finalize</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#getClass--\">getClass</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#hashCode--\">hashCode</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#notify--\">notify</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#notifyAll--\">notifyAll</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#toString--\">toString</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#wait--\">wait</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#wait-long-\">wait</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#wait-long-int-\">wait</a>"
syntax: "public class **SearchIndexerClient**"
methods:
- uid: "com.azure.search.documents.indexes.SearchIndexerClient.createDataSourceConnection(com.azure.search.documents.indexes.models.SearchIndexerDataSourceConnection)"
  fullName: "com.azure.search.documents.indexes.SearchIndexerClient.createDataSourceConnection(SearchIndexerDataSourceConnection dataSourceConnection)"
  name: "createDataSourceConnection(SearchIndexerDataSourceConnection dataSourceConnection)"
  nameWithType: "SearchIndexerClient.createDataSourceConnection(SearchIndexerDataSourceConnection dataSourceConnection)"
  summary: "Creates a new Azure AI Search data source"
  parameters:
  - description: "The definition of the data source to create"
    name: "dataSourceConnection"
    type: "<xref href=\"com.azure.search.documents.indexes.models.SearchIndexerDataSourceConnection?alt=com.azure.search.documents.indexes.models.SearchIndexerDataSourceConnection&text=SearchIndexerDataSourceConnection\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public SearchIndexerDataSourceConnection createDataSourceConnection(SearchIndexerDataSourceConnection dataSourceConnection)"
  desc: "Creates a new Azure AI Search data source\n\n**Code Sample**\n\nCreate search indexer data source connection named \"dataSource\".\n\n```java\nSearchIndexerDataSourceConnection dataSource = new SearchIndexerDataSourceConnection(\"dataSource\",\n     com.azure.search.documents.indexes.models.SearchIndexerDataSourceType.AZURE_BLOB, \"{connectionString}\",\n     new com.azure.search.documents.indexes.models.SearchIndexerDataContainer(\"container\"));\n SearchIndexerDataSourceConnection dataSourceFromService =\n     SEARCH_INDEXER_CLIENT.createDataSourceConnection(dataSource);\n System.out.printf(\"The data source name is %s. The ETag of data source is %s.%n\",\n     dataSourceFromService.getName(), dataSourceFromService.getETag());\n```"
  returns:
    description: "the data source that was created."
    type: "<xref href=\"com.azure.search.documents.indexes.models.SearchIndexerDataSourceConnection?alt=com.azure.search.documents.indexes.models.SearchIndexerDataSourceConnection&text=SearchIndexerDataSourceConnection\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.search.documents.indexes.SearchIndexerClient.createDataSourceConnectionWithResponse(com.azure.search.documents.indexes.models.SearchIndexerDataSourceConnection,com.azure.core.util.Context)"
  fullName: "com.azure.search.documents.indexes.SearchIndexerClient.createDataSourceConnectionWithResponse(SearchIndexerDataSourceConnection dataSourceConnection, Context context)"
  name: "createDataSourceConnectionWithResponse(SearchIndexerDataSourceConnection dataSourceConnection, Context context)"
  nameWithType: "SearchIndexerClient.createDataSourceConnectionWithResponse(SearchIndexerDataSourceConnection dataSourceConnection, Context context)"
  summary: "Creates a new Azure AI Search data source"
  parameters:
  - description: "the definition of the data source to create doesn't match specified values"
    name: "dataSourceConnection"
    type: "<xref href=\"com.azure.search.documents.indexes.models.SearchIndexerDataSourceConnection?alt=com.azure.search.documents.indexes.models.SearchIndexerDataSourceConnection&text=SearchIndexerDataSourceConnection\" data-throw-if-not-resolved=\"False\" />"
  - description: "additional context that is passed through the HTTP pipeline during the service call"
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<SearchIndexerDataSourceConnection> createDataSourceConnectionWithResponse(SearchIndexerDataSourceConnection dataSourceConnection, Context context)"
  desc: "Creates a new Azure AI Search data source\n\n**Code Sample**\n\nCreate search indexer data source connection named \"dataSource\".\n\n```java\nSearchIndexerDataSourceConnection dataSource = new SearchIndexerDataSourceConnection(\"dataSource\",\n     SearchIndexerDataSourceType.AZURE_BLOB, \"{connectionString}\",\n     new SearchIndexerDataContainer(\"container\"));\n Response<SearchIndexerDataSourceConnection> dataSourceFromService =\n     SEARCH_INDEXER_CLIENT.createDataSourceConnectionWithResponse(dataSource, new Context(KEY_1, VALUE_1));\n\n System.out.printf(\"The status code of the response is %s. The data source name is %s.%n\",\n     dataSourceFromService.getStatusCode(), dataSourceFromService.getValue().getName());\n```"
  returns:
    description: "a response containing data source that was created."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.search.documents.indexes.models.SearchIndexerDataSourceConnection?alt=com.azure.search.documents.indexes.models.SearchIndexerDataSourceConnection&text=SearchIndexerDataSourceConnection\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.search.documents.indexes.SearchIndexerClient.createIndexer(com.azure.search.documents.indexes.models.SearchIndexer)"
  fullName: "com.azure.search.documents.indexes.SearchIndexerClient.createIndexer(SearchIndexer indexer)"
  name: "createIndexer(SearchIndexer indexer)"
  nameWithType: "SearchIndexerClient.createIndexer(SearchIndexer indexer)"
  summary: "Creates a new Azure AI Search indexer."
  parameters:
  - description: "definition of the indexer to create."
    name: "indexer"
    type: "<xref href=\"com.azure.search.documents.indexes.models.SearchIndexer?alt=com.azure.search.documents.indexes.models.SearchIndexer&text=SearchIndexer\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public SearchIndexer createIndexer(SearchIndexer indexer)"
  desc: "Creates a new Azure AI Search indexer.\n\n**Code Sample**\n\nCreate search indexer named \"searchIndexer\".\n\n```java\nSearchIndexer searchIndexer = new SearchIndexer(\"searchIndexer\", \"dataSource\",\n     \"searchIndex\");\n SearchIndexer indexerFromService = SEARCH_INDEXER_CLIENT.createIndexer(searchIndexer);\n System.out.printf(\"The indexer name is %s. The ETag of indexer is %s.%n\", indexerFromService.getName(),\n     indexerFromService.getETag());\n```"
  returns:
    description: "the created Indexer."
    type: "<xref href=\"com.azure.search.documents.indexes.models.SearchIndexer?alt=com.azure.search.documents.indexes.models.SearchIndexer&text=SearchIndexer\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.search.documents.indexes.SearchIndexerClient.createIndexerWithResponse(com.azure.search.documents.indexes.models.SearchIndexer,com.azure.core.util.Context)"
  fullName: "com.azure.search.documents.indexes.SearchIndexerClient.createIndexerWithResponse(SearchIndexer indexer, Context context)"
  name: "createIndexerWithResponse(SearchIndexer indexer, Context context)"
  nameWithType: "SearchIndexerClient.createIndexerWithResponse(SearchIndexer indexer, Context context)"
  summary: "Creates a new Azure AI Search indexer."
  parameters:
  - description: "definition of the indexer to create"
    name: "indexer"
    type: "<xref href=\"com.azure.search.documents.indexes.models.SearchIndexer?alt=com.azure.search.documents.indexes.models.SearchIndexer&text=SearchIndexer\" data-throw-if-not-resolved=\"False\" />"
  - description: "additional context that is passed through the HTTP pipeline during the service call"
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<SearchIndexer> createIndexerWithResponse(SearchIndexer indexer, Context context)"
  desc: "Creates a new Azure AI Search indexer.\n\n**Code Sample**\n\nCreate search indexer named \"searchIndexer\".\n\n```java\nSearchIndexer searchIndexer = new SearchIndexer(\"searchIndexer\", \"dataSource\",\n     \"searchIndex\");\n Response<SearchIndexer> indexerFromServiceResponse = SEARCH_INDEXER_CLIENT.createIndexerWithResponse(\n     searchIndexer, new Context(KEY_1, VALUE_1));\n\n System.out.printf(\"The status code of the response is %s. The indexer name is %s.%n\",\n     indexerFromServiceResponse.getStatusCode(), indexerFromServiceResponse.getValue().getName());\n```"
  returns:
    description: "a response containing the created Indexer."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.search.documents.indexes.models.SearchIndexer?alt=com.azure.search.documents.indexes.models.SearchIndexer&text=SearchIndexer\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.search.documents.indexes.SearchIndexerClient.createOrUpdateDataSourceConnection(com.azure.search.documents.indexes.models.SearchIndexerDataSourceConnection)"
  fullName: "com.azure.search.documents.indexes.SearchIndexerClient.createOrUpdateDataSourceConnection(SearchIndexerDataSourceConnection dataSourceConnection)"
  name: "createOrUpdateDataSourceConnection(SearchIndexerDataSourceConnection dataSourceConnection)"
  nameWithType: "SearchIndexerClient.createOrUpdateDataSourceConnection(SearchIndexerDataSourceConnection dataSourceConnection)"
  summary: "Creates a new Azure AI Search data source or updates a data source if it already exists"
  parameters:
  - description: "The definition of the data source to create or update."
    name: "dataSourceConnection"
    type: "<xref href=\"com.azure.search.documents.indexes.models.SearchIndexerDataSourceConnection?alt=com.azure.search.documents.indexes.models.SearchIndexerDataSourceConnection&text=SearchIndexerDataSourceConnection\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public SearchIndexerDataSourceConnection createOrUpdateDataSourceConnection(SearchIndexerDataSourceConnection dataSourceConnection)"
  desc: "Creates a new Azure AI Search data source or updates a data source if it already exists\n\n**Code Sample**\n\nCreate or update search indexer data source connection named \"dataSource\".\n\n```java\nSearchIndexerDataSourceConnection dataSource = SEARCH_INDEXER_CLIENT.getDataSourceConnection(\"dataSource\");\n dataSource.setContainer(new SearchIndexerDataContainer(\"updatecontainer\"));\n\n SearchIndexerDataSourceConnection updateDataSource = SEARCH_INDEXER_CLIENT\n     .createOrUpdateDataSourceConnection(dataSource);\n System.out.printf(\"The dataSource name is %s. The container name of dataSource is %s.%n\",\n     updateDataSource.getName(), updateDataSource.getContainer().getName());\n```"
  returns:
    description: "the data source that was created or updated."
    type: "<xref href=\"com.azure.search.documents.indexes.models.SearchIndexerDataSourceConnection?alt=com.azure.search.documents.indexes.models.SearchIndexerDataSourceConnection&text=SearchIndexerDataSourceConnection\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.search.documents.indexes.SearchIndexerClient.createOrUpdateDataSourceConnectionWithResponse(com.azure.search.documents.indexes.models.SearchIndexerDataSourceConnection,boolean,com.azure.core.util.Context)"
  fullName: "com.azure.search.documents.indexes.SearchIndexerClient.createOrUpdateDataSourceConnectionWithResponse(SearchIndexerDataSourceConnection dataSourceConnection, boolean onlyIfUnchanged, Context context)"
  name: "createOrUpdateDataSourceConnectionWithResponse(SearchIndexerDataSourceConnection dataSourceConnection, boolean onlyIfUnchanged, Context context)"
  nameWithType: "SearchIndexerClient.createOrUpdateDataSourceConnectionWithResponse(SearchIndexerDataSourceConnection dataSourceConnection, boolean onlyIfUnchanged, Context context)"
  summary: "Creates a new Azure AI Search data source or updates a data source if it already exists."
  parameters:
  - description: "the <xref uid=\"com.azure.search.documents.indexes.models.SearchIndexerDataSourceConnection\" data-throw-if-not-resolved=\"false\" data-raw-source=\"SearchIndexerDataSourceConnection\"></xref> to create or update"
    name: "dataSourceConnection"
    type: "<xref href=\"com.azure.search.documents.indexes.models.SearchIndexerDataSourceConnection?alt=com.azure.search.documents.indexes.models.SearchIndexerDataSourceConnection&text=SearchIndexerDataSourceConnection\" data-throw-if-not-resolved=\"False\" />"
  - description: "<code>true</code> to update if the <code>dataSourceConnection</code> is the same as the current\n service value. <code>false</code> to always update existing value."
    name: "onlyIfUnchanged"
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
  - description: "additional context that is passed through the HTTP pipeline during the service call"
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<SearchIndexerDataSourceConnection> createOrUpdateDataSourceConnectionWithResponse(SearchIndexerDataSourceConnection dataSourceConnection, boolean onlyIfUnchanged, Context context)"
  desc: "Creates a new Azure AI Search data source or updates a data source if it already exists.\n\n**Code Sample**\n\nCreate or update search indexer data source connection named \"dataSource\".\n\n```java\nSearchIndexerDataSourceConnection dataSource = SEARCH_INDEXER_CLIENT.getDataSourceConnection(\"dataSource\");\n dataSource.setContainer(new SearchIndexerDataContainer(\"updatecontainer\"));\n\n Response<SearchIndexerDataSourceConnection> updateDataSource = SEARCH_INDEXER_CLIENT\n     .createOrUpdateDataSourceConnectionWithResponse(dataSource, true, new Context(KEY_1, VALUE_1));\n System.out.printf(\"The status code of the response is %s.%nThe dataSource name is %s. \"\n     + \"The container name of dataSource is %s.%n\", updateDataSource.getStatusCode(),\n     updateDataSource.getValue().getName(), updateDataSource.getValue().getContainer().getName());\n```"
  returns:
    description: "a response containing data source that was created or updated."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.search.documents.indexes.models.SearchIndexerDataSourceConnection?alt=com.azure.search.documents.indexes.models.SearchIndexerDataSourceConnection&text=SearchIndexerDataSourceConnection\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.search.documents.indexes.SearchIndexerClient.createOrUpdateIndexer(com.azure.search.documents.indexes.models.SearchIndexer)"
  fullName: "com.azure.search.documents.indexes.SearchIndexerClient.createOrUpdateIndexer(SearchIndexer indexer)"
  name: "createOrUpdateIndexer(SearchIndexer indexer)"
  nameWithType: "SearchIndexerClient.createOrUpdateIndexer(SearchIndexer indexer)"
  summary: "Creates a new Azure AI Search indexer or updates an indexer if it already exists."
  parameters:
  - description: "The definition of the indexer to create or update."
    name: "indexer"
    type: "<xref href=\"com.azure.search.documents.indexes.models.SearchIndexer?alt=com.azure.search.documents.indexes.models.SearchIndexer&text=SearchIndexer\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public SearchIndexer createOrUpdateIndexer(SearchIndexer indexer)"
  desc: "Creates a new Azure AI Search indexer or updates an indexer if it already exists.\n\n**Code Sample**\n\nCreate or update search indexer named \"searchIndexer\".\n\n```java\nSearchIndexer searchIndexerFromService = SEARCH_INDEXER_CLIENT.getIndexer(\"searchIndexer\");\n searchIndexerFromService.setFieldMappings(Collections.singletonList(\n     new FieldMapping(\"hotelName\").setTargetFieldName(\"HotelName\")));\n SearchIndexer updateIndexer = SEARCH_INDEXER_CLIENT.createOrUpdateIndexer(searchIndexerFromService);\n System.out.printf(\"The indexer name is %s. The target field name of indexer is %s.%n\",\n     updateIndexer.getName(), updateIndexer.getFieldMappings().get(0).getTargetFieldName());\n```"
  returns:
    description: "a response containing the created Indexer."
    type: "<xref href=\"com.azure.search.documents.indexes.models.SearchIndexer?alt=com.azure.search.documents.indexes.models.SearchIndexer&text=SearchIndexer\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.search.documents.indexes.SearchIndexerClient.createOrUpdateIndexerWithResponse(com.azure.search.documents.indexes.models.SearchIndexer,boolean,com.azure.core.util.Context)"
  fullName: "com.azure.search.documents.indexes.SearchIndexerClient.createOrUpdateIndexerWithResponse(SearchIndexer indexer, boolean onlyIfUnchanged, Context context)"
  name: "createOrUpdateIndexerWithResponse(SearchIndexer indexer, boolean onlyIfUnchanged, Context context)"
  nameWithType: "SearchIndexerClient.createOrUpdateIndexerWithResponse(SearchIndexer indexer, boolean onlyIfUnchanged, Context context)"
  summary: "Creates a new Azure AI Search indexer or updates an indexer if it already exists."
  parameters:
  - description: "The <xref uid=\"com.azure.search.documents.indexes.models.SearchIndexer\" data-throw-if-not-resolved=\"false\" data-raw-source=\"SearchIndexer\"></xref> to create or update."
    name: "indexer"
    type: "<xref href=\"com.azure.search.documents.indexes.models.SearchIndexer?alt=com.azure.search.documents.indexes.models.SearchIndexer&text=SearchIndexer\" data-throw-if-not-resolved=\"False\" />"
  - description: "<code>true</code> to update if the <code>indexer</code> is the same as the current service value.\n <code>false</code> to always update existing value."
    name: "onlyIfUnchanged"
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
  - description: "additional context that is passed through the HTTP pipeline during the service call"
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<SearchIndexer> createOrUpdateIndexerWithResponse(SearchIndexer indexer, boolean onlyIfUnchanged, Context context)"
  desc: "Creates a new Azure AI Search indexer or updates an indexer if it already exists.\n\n**Code Sample**\n\nCreate or update search indexer named \"searchIndexer\".\n\n```java\nSearchIndexer searchIndexerFromService = SEARCH_INDEXER_CLIENT.getIndexer(\"searchIndexer\");\n searchIndexerFromService.setFieldMappings(Collections.singletonList(\n     new FieldMapping(\"hotelName\").setTargetFieldName(\"HotelName\")));\n Response<SearchIndexer> indexerFromService = SEARCH_INDEXER_CLIENT.createOrUpdateIndexerWithResponse(\n     searchIndexerFromService, true, new Context(KEY_1, VALUE_1));\n System.out.printf(\"The status code of the response is %s.%nThe indexer name is %s. \"\n     + \"The target field name of indexer is %s.%n\", indexerFromService.getStatusCode(),\n     indexerFromService.getValue().getName(),\n     indexerFromService.getValue().getFieldMappings().get(0).getTargetFieldName());\n```"
  returns:
    description: "A response object containing the Indexer."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.search.documents.indexes.models.SearchIndexer?alt=com.azure.search.documents.indexes.models.SearchIndexer&text=SearchIndexer\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.search.documents.indexes.SearchIndexerClient.createOrUpdateSkillset(com.azure.search.documents.indexes.models.SearchIndexerSkillset)"
  fullName: "com.azure.search.documents.indexes.SearchIndexerClient.createOrUpdateSkillset(SearchIndexerSkillset skillset)"
  name: "createOrUpdateSkillset(SearchIndexerSkillset skillset)"
  nameWithType: "SearchIndexerClient.createOrUpdateSkillset(SearchIndexerSkillset skillset)"
  summary: "Creates a new Azure AI Search skillset or updates a skillset if it already exists."
  parameters:
  - description: "the <xref uid=\"com.azure.search.documents.indexes.models.SearchIndexerSkillset\" data-throw-if-not-resolved=\"false\" data-raw-source=\"SearchIndexerSkillset\"></xref> to create or update."
    name: "skillset"
    type: "<xref href=\"com.azure.search.documents.indexes.models.SearchIndexerSkillset?alt=com.azure.search.documents.indexes.models.SearchIndexerSkillset&text=SearchIndexerSkillset\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public SearchIndexerSkillset createOrUpdateSkillset(SearchIndexerSkillset skillset)"
  desc: "Creates a new Azure AI Search skillset or updates a skillset if it already exists.\n\n**Code Sample**\n\nCreate or update search indexer skillset \"searchIndexerSkillset\".\n\n```java\nSearchIndexerSkillset indexerSkillset = SEARCH_INDEXER_CLIENT.getSkillset(\"searchIndexerSkillset\");\n indexerSkillset.setDescription(\"This is new description!\");\n SearchIndexerSkillset updateSkillset = SEARCH_INDEXER_CLIENT.createOrUpdateSkillset(indexerSkillset);\n System.out.printf(\"The indexer skillset name is %s. The description of indexer skillset is %s.%n\",\n     updateSkillset.getName(), updateSkillset.getDescription());\n```"
  returns:
    description: "the skillset that was created or updated."
    type: "<xref href=\"com.azure.search.documents.indexes.models.SearchIndexerSkillset?alt=com.azure.search.documents.indexes.models.SearchIndexerSkillset&text=SearchIndexerSkillset\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.search.documents.indexes.SearchIndexerClient.createOrUpdateSkillsetWithResponse(com.azure.search.documents.indexes.models.SearchIndexerSkillset,boolean,com.azure.core.util.Context)"
  fullName: "com.azure.search.documents.indexes.SearchIndexerClient.createOrUpdateSkillsetWithResponse(SearchIndexerSkillset skillset, boolean onlyIfUnchanged, Context context)"
  name: "createOrUpdateSkillsetWithResponse(SearchIndexerSkillset skillset, boolean onlyIfUnchanged, Context context)"
  nameWithType: "SearchIndexerClient.createOrUpdateSkillsetWithResponse(SearchIndexerSkillset skillset, boolean onlyIfUnchanged, Context context)"
  summary: "Creates a new Azure AI Search skillset or updates a skillset if it already exists."
  parameters:
  - description: "the <xref uid=\"com.azure.search.documents.indexes.models.SearchIndexerSkillset\" data-throw-if-not-resolved=\"false\" data-raw-source=\"SearchIndexerSkillset\"></xref> to create or update."
    name: "skillset"
    type: "<xref href=\"com.azure.search.documents.indexes.models.SearchIndexerSkillset?alt=com.azure.search.documents.indexes.models.SearchIndexerSkillset&text=SearchIndexerSkillset\" data-throw-if-not-resolved=\"False\" />"
  - description: "<code>true</code> to update if the <code>skillset</code> is the same as the current service value.\n <code>false</code> to always update existing value."
    name: "onlyIfUnchanged"
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
  - description: "additional context that is passed through the HTTP pipeline during the service call"
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<SearchIndexerSkillset> createOrUpdateSkillsetWithResponse(SearchIndexerSkillset skillset, boolean onlyIfUnchanged, Context context)"
  desc: "Creates a new Azure AI Search skillset or updates a skillset if it already exists.\n\n**Code Sample**\n\nCreate or update search indexer skillset \"searchIndexerSkillset\".\n\n```java\nSearchIndexerSkillset indexerSkillset = SEARCH_INDEXER_CLIENT.getSkillset(\"searchIndexerSkillset\");\n indexerSkillset.setDescription(\"This is new description!\");\n Response<SearchIndexerSkillset> updateSkillsetResponse = SEARCH_INDEXER_CLIENT.createOrUpdateSkillsetWithResponse(\n     indexerSkillset, true, new Context(KEY_1, VALUE_1));\n System.out.printf(\"The status code of the response is %s.%nThe indexer skillset name is %s. \"\n         + \"The description of indexer skillset is %s.%n\", updateSkillsetResponse.getStatusCode(),\n     updateSkillsetResponse.getValue().getName(),\n     updateSkillsetResponse.getValue().getDescription());\n```"
  returns:
    description: "a response containing the skillset that was created or updated."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.search.documents.indexes.models.SearchIndexerSkillset?alt=com.azure.search.documents.indexes.models.SearchIndexerSkillset&text=SearchIndexerSkillset\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.search.documents.indexes.SearchIndexerClient.createSkillset(com.azure.search.documents.indexes.models.SearchIndexerSkillset)"
  fullName: "com.azure.search.documents.indexes.SearchIndexerClient.createSkillset(SearchIndexerSkillset skillset)"
  name: "createSkillset(SearchIndexerSkillset skillset)"
  nameWithType: "SearchIndexerClient.createSkillset(SearchIndexerSkillset skillset)"
  summary: "Creates a new skillset in an Azure AI Search service."
  parameters:
  - description: "definition of the skillset containing one or more cognitive skills"
    name: "skillset"
    type: "<xref href=\"com.azure.search.documents.indexes.models.SearchIndexerSkillset?alt=com.azure.search.documents.indexes.models.SearchIndexerSkillset&text=SearchIndexerSkillset\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public SearchIndexerSkillset createSkillset(SearchIndexerSkillset skillset)"
  desc: "Creates a new skillset in an Azure AI Search service.\n\n**Code Sample**\n\nCreate search indexer skillset \"searchIndexerSkillset\".\n\n```java\nList<InputFieldMappingEntry> inputs = Collections.singletonList(\n     new InputFieldMappingEntry(\"image\")\n         .setSource(\"/document/normalized_images/*\")\n );\n\n List<OutputFieldMappingEntry> outputs = Arrays.asList(\n     new OutputFieldMappingEntry(\"text\")\n         .setTargetName(\"mytext\"),\n     new OutputFieldMappingEntry(\"layoutText\")\n         .setTargetName(\"myLayoutText\")\n );\n SearchIndexerSkillset searchIndexerSkillset = new SearchIndexerSkillset(\"searchIndexerSkillset\",\n     Collections.singletonList(new OcrSkill(inputs, outputs)\n         .setShouldDetectOrientation(true)\n         .setDefaultLanguageCode(null)\n         .setName(\"myocr\")\n         .setDescription(\"Extracts text (plain and structured) from image.\")\n         .setContext(\"/document/normalized_images/*\")));\n SearchIndexerSkillset skillset = SEARCH_INDEXER_CLIENT.createSkillset(searchIndexerSkillset);\n System.out.printf(\"The indexer skillset name is %s. The ETag of indexer skillset is %s.%n\",\n     skillset.getName(), skillset.getETag());\n```"
  returns:
    description: "the created SearchIndexerSkillset."
    type: "<xref href=\"com.azure.search.documents.indexes.models.SearchIndexerSkillset?alt=com.azure.search.documents.indexes.models.SearchIndexerSkillset&text=SearchIndexerSkillset\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.search.documents.indexes.SearchIndexerClient.createSkillsetWithResponse(com.azure.search.documents.indexes.models.SearchIndexerSkillset,com.azure.core.util.Context)"
  fullName: "com.azure.search.documents.indexes.SearchIndexerClient.createSkillsetWithResponse(SearchIndexerSkillset skillset, Context context)"
  name: "createSkillsetWithResponse(SearchIndexerSkillset skillset, Context context)"
  nameWithType: "SearchIndexerClient.createSkillsetWithResponse(SearchIndexerSkillset skillset, Context context)"
  summary: "Creates a new skillset in an Azure AI Search service."
  parameters:
  - description: "definition of the skillset containing one or more cognitive skills"
    name: "skillset"
    type: "<xref href=\"com.azure.search.documents.indexes.models.SearchIndexerSkillset?alt=com.azure.search.documents.indexes.models.SearchIndexerSkillset&text=SearchIndexerSkillset\" data-throw-if-not-resolved=\"False\" />"
  - description: "additional context that is passed through the HTTP pipeline during the service call"
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<SearchIndexerSkillset> createSkillsetWithResponse(SearchIndexerSkillset skillset, Context context)"
  desc: "Creates a new skillset in an Azure AI Search service.\n\n**Code Sample**\n\nCreate search indexer skillset \"searchIndexerSkillset\".\n\n```java\nList<InputFieldMappingEntry> inputs = Collections.singletonList(\n     new InputFieldMappingEntry(\"image\")\n         .setSource(\"/document/normalized_images/*\")\n );\n\n List<OutputFieldMappingEntry> outputs = Arrays.asList(\n     new OutputFieldMappingEntry(\"text\")\n         .setTargetName(\"mytext\"),\n     new OutputFieldMappingEntry(\"layoutText\")\n         .setTargetName(\"myLayoutText\")\n );\n SearchIndexerSkillset searchIndexerSkillset = new SearchIndexerSkillset(\"searchIndexerSkillset\",\n     Collections.singletonList(new OcrSkill(inputs, outputs)\n         .setShouldDetectOrientation(true)\n         .setDefaultLanguageCode(null)\n         .setName(\"myocr\")\n         .setDescription(\"Extracts text (plain and structured) from image.\")\n         .setContext(\"/document/normalized_images/*\")));\n Response<SearchIndexerSkillset> skillsetWithResponse =\n     SEARCH_INDEXER_CLIENT.createSkillsetWithResponse(searchIndexerSkillset, new Context(KEY_1, VALUE_1));\n System.out.printf(\"The status code of the response is %s. The indexer skillset name is %s.%n\",\n     skillsetWithResponse.getStatusCode(), skillsetWithResponse.getValue().getName());\n```"
  returns:
    description: "a response containing the created SearchIndexerSkillset."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.search.documents.indexes.models.SearchIndexerSkillset?alt=com.azure.search.documents.indexes.models.SearchIndexerSkillset&text=SearchIndexerSkillset\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.search.documents.indexes.SearchIndexerClient.deleteDataSourceConnection(java.lang.String)"
  fullName: "com.azure.search.documents.indexes.SearchIndexerClient.deleteDataSourceConnection(String dataSourceConnectionName)"
  name: "deleteDataSourceConnection(String dataSourceConnectionName)"
  nameWithType: "SearchIndexerClient.deleteDataSourceConnection(String dataSourceConnectionName)"
  summary: "Delete a Data<wbr>Source"
  parameters:
  - description: "the name of the data source to be deleted"
    name: "dataSourceConnectionName"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public void deleteDataSourceConnection(String dataSourceConnectionName)"
  desc: "Delete a DataSource\n\n**Code Sample**\n\nDelete all search indexer data source connection named \"dataSource\".\n\n```java\nSEARCH_INDEXER_CLIENT.deleteDataSourceConnection(\"dataSource\");\n```"
- uid: "com.azure.search.documents.indexes.SearchIndexerClient.deleteDataSourceConnectionWithResponse(com.azure.search.documents.indexes.models.SearchIndexerDataSourceConnection,boolean,com.azure.core.util.Context)"
  fullName: "com.azure.search.documents.indexes.SearchIndexerClient.deleteDataSourceConnectionWithResponse(SearchIndexerDataSourceConnection dataSourceConnection, boolean onlyIfUnchanged, Context context)"
  name: "deleteDataSourceConnectionWithResponse(SearchIndexerDataSourceConnection dataSourceConnection, boolean onlyIfUnchanged, Context context)"
  nameWithType: "SearchIndexerClient.deleteDataSourceConnectionWithResponse(SearchIndexerDataSourceConnection dataSourceConnection, boolean onlyIfUnchanged, Context context)"
  summary: "Delete a Data<wbr>Source with Response"
  parameters:
  - description: "the <xref uid=\"com.azure.search.documents.indexes.models.SearchIndexerDataSourceConnection\" data-throw-if-not-resolved=\"false\" data-raw-source=\"SearchIndexerDataSourceConnection\"></xref> to be deleted."
    name: "dataSourceConnection"
    type: "<xref href=\"com.azure.search.documents.indexes.models.SearchIndexerDataSourceConnection?alt=com.azure.search.documents.indexes.models.SearchIndexerDataSourceConnection&text=SearchIndexerDataSourceConnection\" data-throw-if-not-resolved=\"False\" />"
  - description: "<code>true</code> to delete if the <code>dataSourceConnection</code> is the same as the current\n service value. <code>false</code> to always delete existing value."
    name: "onlyIfUnchanged"
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
  - description: "additional context that is passed through the HTTP pipeline during the service call"
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<Void> deleteDataSourceConnectionWithResponse(SearchIndexerDataSourceConnection dataSourceConnection, boolean onlyIfUnchanged, Context context)"
  desc: "Delete a DataSource with Response\n\n**Code Sample**\n\nDelete all search indexer data source connection named \"dataSource\".\n\n```java\nSearchIndexerDataSourceConnection dataSource =\n     SEARCH_INDEXER_CLIENT.getDataSourceConnection(\"dataSource\");\n Response<Void> deleteResponse = SEARCH_INDEXER_CLIENT.deleteDataSourceConnectionWithResponse(dataSource, true,\n     new Context(KEY_1, VALUE_1));\n System.out.printf(\"The status code of the response is %d.%n\", deleteResponse.getStatusCode());\n```"
  returns:
    description: "an empty response"
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Void.html\">Void</a>&gt;"
- uid: "com.azure.search.documents.indexes.SearchIndexerClient.deleteIndexer(java.lang.String)"
  fullName: "com.azure.search.documents.indexes.SearchIndexerClient.deleteIndexer(String indexerName)"
  name: "deleteIndexer(String indexerName)"
  nameWithType: "SearchIndexerClient.deleteIndexer(String indexerName)"
  summary: "Deletes an Azure AI Search indexer."
  parameters:
  - description: "the name of the indexer to delete"
    name: "indexerName"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public void deleteIndexer(String indexerName)"
  desc: "Deletes an Azure AI Search indexer.\n\n**Code Sample**\n\nDelete search indexer named \"searchIndexer\".\n\n```java\nSEARCH_INDEXER_CLIENT.deleteIndexer(\"searchIndexer\");\n```"
- uid: "com.azure.search.documents.indexes.SearchIndexerClient.deleteIndexerWithResponse(com.azure.search.documents.indexes.models.SearchIndexer,boolean,com.azure.core.util.Context)"
  fullName: "com.azure.search.documents.indexes.SearchIndexerClient.deleteIndexerWithResponse(SearchIndexer indexer, boolean onlyIfUnchanged, Context context)"
  name: "deleteIndexerWithResponse(SearchIndexer indexer, boolean onlyIfUnchanged, Context context)"
  nameWithType: "SearchIndexerClient.deleteIndexerWithResponse(SearchIndexer indexer, boolean onlyIfUnchanged, Context context)"
  summary: "Deletes an Azure AI Search indexer."
  parameters:
  - description: "the search <xref uid=\"com.azure.search.documents.indexes.models.SearchIndexer\" data-throw-if-not-resolved=\"false\" data-raw-source=\"SearchIndexer\"></xref>"
    name: "indexer"
    type: "<xref href=\"com.azure.search.documents.indexes.models.SearchIndexer?alt=com.azure.search.documents.indexes.models.SearchIndexer&text=SearchIndexer\" data-throw-if-not-resolved=\"False\" />"
  - description: "<code>true</code> to delete if the <code>indexer</code> is the same as the current service value.\n <code>false</code> to always delete existing value."
    name: "onlyIfUnchanged"
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
  - description: "the context"
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<Void> deleteIndexerWithResponse(SearchIndexer indexer, boolean onlyIfUnchanged, Context context)"
  desc: "Deletes an Azure AI Search indexer.\n\n**Code Sample**\n\nDelete search index named \"searchIndexer\".\n\n```java\nSearchIndexer searchIndexer = SEARCH_INDEXER_CLIENT.getIndexer(\"searchIndexer\");\n Response<Void> deleteResponse = SEARCH_INDEXER_CLIENT.deleteIndexerWithResponse(searchIndexer, true,\n     new Context(KEY_1, VALUE_1));\n System.out.printf(\"The status code of the response is %d.%n\", deleteResponse.getStatusCode());\n```"
  returns:
    description: "a response signalling completion."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Void.html\">Void</a>&gt;"
- uid: "com.azure.search.documents.indexes.SearchIndexerClient.deleteSkillset(java.lang.String)"
  fullName: "com.azure.search.documents.indexes.SearchIndexerClient.deleteSkillset(String skillsetName)"
  name: "deleteSkillset(String skillsetName)"
  nameWithType: "SearchIndexerClient.deleteSkillset(String skillsetName)"
  summary: "Deletes a cognitive skillset in an Azure AI Search service."
  parameters:
  - description: "the name of the skillset to delete"
    name: "skillsetName"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public void deleteSkillset(String skillsetName)"
  desc: "Deletes a cognitive skillset in an Azure AI Search service.\n\n**Code Sample**\n\nDelete search indexer skillset \"searchIndexerSkillset\".\n\n```java\nSEARCH_INDEXER_CLIENT.deleteSkillset(\"searchIndexerSkillset\");\n```"
- uid: "com.azure.search.documents.indexes.SearchIndexerClient.deleteSkillsetWithResponse(com.azure.search.documents.indexes.models.SearchIndexerSkillset,boolean,com.azure.core.util.Context)"
  fullName: "com.azure.search.documents.indexes.SearchIndexerClient.deleteSkillsetWithResponse(SearchIndexerSkillset skillset, boolean onlyIfUnchanged, Context context)"
  name: "deleteSkillsetWithResponse(SearchIndexerSkillset skillset, boolean onlyIfUnchanged, Context context)"
  nameWithType: "SearchIndexerClient.deleteSkillsetWithResponse(SearchIndexerSkillset skillset, boolean onlyIfUnchanged, Context context)"
  summary: "Deletes a cognitive skillset in an Azure AI Search service."
  parameters:
  - description: "the <xref uid=\"com.azure.search.documents.indexes.models.SearchIndexerSkillset\" data-throw-if-not-resolved=\"false\" data-raw-source=\"SearchIndexerSkillset\"></xref> to delete."
    name: "skillset"
    type: "<xref href=\"com.azure.search.documents.indexes.models.SearchIndexerSkillset?alt=com.azure.search.documents.indexes.models.SearchIndexerSkillset&text=SearchIndexerSkillset\" data-throw-if-not-resolved=\"False\" />"
  - description: "<code>true</code> to delete if the <code>skillset</code> is the same as the current service value.\n <code>false</code> to always delete existing value."
    name: "onlyIfUnchanged"
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
  - description: "additional context that is passed through the HTTP pipeline during the service call"
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<Void> deleteSkillsetWithResponse(SearchIndexerSkillset skillset, boolean onlyIfUnchanged, Context context)"
  desc: "Deletes a cognitive skillset in an Azure AI Search service.\n\n**Code Sample**\n\nDelete search indexer skillset \"searchIndexerSkillset\".\n\n```java\nSearchIndexerSkillset searchIndexerSkillset = SEARCH_INDEXER_CLIENT.getSkillset(\"searchIndexerSkillset\");\n Response<Void> deleteResponse = SEARCH_INDEXER_CLIENT.deleteSkillsetWithResponse(searchIndexerSkillset, true,\n     new Context(KEY_1, VALUE_1));\n System.out.printf(\"The status code of the response is %d.%n\", deleteResponse.getStatusCode());\n```"
  returns:
    description: "a response signalling completion."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Void.html\">Void</a>&gt;"
- uid: "com.azure.search.documents.indexes.SearchIndexerClient.getDataSourceConnection(java.lang.String)"
  fullName: "com.azure.search.documents.indexes.SearchIndexerClient.getDataSourceConnection(String dataSourceConnectionName)"
  name: "getDataSourceConnection(String dataSourceConnectionName)"
  nameWithType: "SearchIndexerClient.getDataSourceConnection(String dataSourceConnectionName)"
  summary: "Retrieves a Data<wbr>Source from an Azure AI Search service."
  parameters:
  - description: "the name of the data source to retrieve"
    name: "dataSourceConnectionName"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public SearchIndexerDataSourceConnection getDataSourceConnection(String dataSourceConnectionName)"
  desc: "Retrieves a DataSource from an Azure AI Search service.\n\n**Code Sample**\n\nGet search indexer data source connection named \"dataSource\".\n\n```java\nSearchIndexerDataSourceConnection dataSource =\n     SEARCH_INDEXER_CLIENT.getDataSourceConnection(\"dataSource\");\n System.out.printf(\"The dataSource name is %s. The ETag of dataSource is %s.%n\", dataSource.getName(),\n     dataSource.getETag());\n```"
  returns:
    description: "the DataSource."
    type: "<xref href=\"com.azure.search.documents.indexes.models.SearchIndexerDataSourceConnection?alt=com.azure.search.documents.indexes.models.SearchIndexerDataSourceConnection&text=SearchIndexerDataSourceConnection\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.search.documents.indexes.SearchIndexerClient.getDataSourceConnectionWithResponse(java.lang.String,com.azure.core.util.Context)"
  fullName: "com.azure.search.documents.indexes.SearchIndexerClient.getDataSourceConnectionWithResponse(String dataSourceConnectionName, Context context)"
  name: "getDataSourceConnectionWithResponse(String dataSourceConnectionName, Context context)"
  nameWithType: "SearchIndexerClient.getDataSourceConnectionWithResponse(String dataSourceConnectionName, Context context)"
  summary: "Retrieves a Data<wbr>Source from an Azure AI Search service."
  parameters:
  - description: "the name of the data source to retrieve"
    name: "dataSourceConnectionName"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "additional context that is passed through the HTTP pipeline during the service call"
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<SearchIndexerDataSourceConnection> getDataSourceConnectionWithResponse(String dataSourceConnectionName, Context context)"
  desc: "Retrieves a DataSource from an Azure AI Search service.\n\n**Code Sample**\n\nGet search indexer data source connection named \"dataSource\".\n\n```java\nResponse<SearchIndexerDataSourceConnection> dataSource =\n     SEARCH_INDEXER_CLIENT.getDataSourceConnectionWithResponse(\n         \"dataSource\", new Context(KEY_1, VALUE_1));\n\n System.out.printf(\"The status code of the response is %s. The data source name is %s.%n\",\n     dataSource.getStatusCode(), dataSource.getValue().getName());\n```"
  returns:
    description: "a response containing the DataSource."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.search.documents.indexes.models.SearchIndexerDataSourceConnection?alt=com.azure.search.documents.indexes.models.SearchIndexerDataSourceConnection&text=SearchIndexerDataSourceConnection\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.search.documents.indexes.SearchIndexerClient.getEndpoint()"
  fullName: "com.azure.search.documents.indexes.SearchIndexerClient.getEndpoint()"
  name: "getEndpoint()"
  nameWithType: "SearchIndexerClient.getEndpoint()"
  summary: "Gets the endpoint for the Azure AI Search service."
  syntax: "public String getEndpoint()"
  desc: "Gets the endpoint for the Azure AI Search service."
  returns:
    description: "the endpoint value."
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
- uid: "com.azure.search.documents.indexes.SearchIndexerClient.getIndexer(java.lang.String)"
  fullName: "com.azure.search.documents.indexes.SearchIndexerClient.getIndexer(String indexerName)"
  name: "getIndexer(String indexerName)"
  nameWithType: "SearchIndexerClient.getIndexer(String indexerName)"
  summary: "Retrieves an indexer definition."
  parameters:
  - description: "the name of the indexer to retrieve"
    name: "indexerName"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public SearchIndexer getIndexer(String indexerName)"
  desc: "Retrieves an indexer definition.\n\n**Code Sample**\n\nGet search indexer with name \"searchIndexer\".\n\n```java\nSearchIndexer indexerFromService =\n     SEARCH_INDEXER_CLIENT.getIndexer(\"searchIndexer\");\n System.out.printf(\"The indexer name is %s. The ETag of indexer is %s.%n\", indexerFromService.getName(),\n     indexerFromService.getETag());\n```"
  returns:
    description: "the indexer."
    type: "<xref href=\"com.azure.search.documents.indexes.models.SearchIndexer?alt=com.azure.search.documents.indexes.models.SearchIndexer&text=SearchIndexer\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.search.documents.indexes.SearchIndexerClient.getIndexerStatus(java.lang.String)"
  fullName: "com.azure.search.documents.indexes.SearchIndexerClient.getIndexerStatus(String indexerName)"
  name: "getIndexerStatus(String indexerName)"
  nameWithType: "SearchIndexerClient.getIndexerStatus(String indexerName)"
  summary: "Returns the current status and execution history of an indexer."
  parameters:
  - description: "the name of the indexer for which to retrieve status"
    name: "indexerName"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public SearchIndexerStatus getIndexerStatus(String indexerName)"
  desc: "Returns the current status and execution history of an indexer.\n\n**Code Sample**\n\nGet search indexer status.\n\n```java\nSearchIndexerStatus indexerStatus = SEARCH_INDEXER_CLIENT.getIndexerStatus(\"searchIndexer\");\n System.out.printf(\"The indexer status is %s.%n\", indexerStatus.getStatus());\n```"
  returns:
    description: "a response with the indexer execution info."
    type: "<xref href=\"com.azure.search.documents.indexes.models.SearchIndexerStatus?alt=com.azure.search.documents.indexes.models.SearchIndexerStatus&text=SearchIndexerStatus\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.search.documents.indexes.SearchIndexerClient.getIndexerStatusWithResponse(java.lang.String,com.azure.core.util.Context)"
  fullName: "com.azure.search.documents.indexes.SearchIndexerClient.getIndexerStatusWithResponse(String indexerName, Context context)"
  name: "getIndexerStatusWithResponse(String indexerName, Context context)"
  nameWithType: "SearchIndexerClient.getIndexerStatusWithResponse(String indexerName, Context context)"
  summary: "Returns the current status and execution history of an indexer."
  parameters:
  - description: "the name of the indexer for which to retrieve status"
    name: "indexerName"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "additional context that is passed through the HTTP pipeline during the service call"
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<SearchIndexerStatus> getIndexerStatusWithResponse(String indexerName, Context context)"
  desc: "Returns the current status and execution history of an indexer.\n\n**Code Sample**\n\nGet search indexer status.\n\n```java\nResponse<SearchIndexerStatus> response = SEARCH_INDEXER_CLIENT.getIndexerStatusWithResponse(\"searchIndexer\",\n     new Context(KEY_1, VALUE_1));\n System.out.printf(\"The status code of the response is %s.%nThe indexer status is %s.%n\",\n     response.getStatusCode(), response.getValue().getStatus());\n```"
  returns:
    description: "a response with the indexer execution info."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.search.documents.indexes.models.SearchIndexerStatus?alt=com.azure.search.documents.indexes.models.SearchIndexerStatus&text=SearchIndexerStatus\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.search.documents.indexes.SearchIndexerClient.getIndexerWithResponse(java.lang.String,com.azure.core.util.Context)"
  fullName: "com.azure.search.documents.indexes.SearchIndexerClient.getIndexerWithResponse(String indexerName, Context context)"
  name: "getIndexerWithResponse(String indexerName, Context context)"
  nameWithType: "SearchIndexerClient.getIndexerWithResponse(String indexerName, Context context)"
  summary: "Retrieves an indexer definition."
  parameters:
  - description: "the name of the indexer to retrieve"
    name: "indexerName"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "additional context that is passed through the HTTP pipeline during the service call"
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<SearchIndexer> getIndexerWithResponse(String indexerName, Context context)"
  desc: "Retrieves an indexer definition.\n\n**Code Sample**\n\nGet search indexer with name \"searchIndexer\".\n\n```java\nResponse<SearchIndexer> indexerFromServiceResponse = SEARCH_INDEXER_CLIENT.getIndexerWithResponse(\n     \"searchIndexer\", new Context(KEY_1, VALUE_1));\n\n System.out.printf(\"The status code of the response is %s. The indexer name is %s.%n\",\n     indexerFromServiceResponse.getStatusCode(), indexerFromServiceResponse.getValue().getName());\n```"
  returns:
    description: "a response containing the indexer."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.search.documents.indexes.models.SearchIndexer?alt=com.azure.search.documents.indexes.models.SearchIndexer&text=SearchIndexer\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.search.documents.indexes.SearchIndexerClient.getSkillset(java.lang.String)"
  fullName: "com.azure.search.documents.indexes.SearchIndexerClient.getSkillset(String skillsetName)"
  name: "getSkillset(String skillsetName)"
  nameWithType: "SearchIndexerClient.getSkillset(String skillsetName)"
  summary: "Retrieves a skillset definition."
  parameters:
  - description: "the name of the skillset to retrieve"
    name: "skillsetName"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public SearchIndexerSkillset getSkillset(String skillsetName)"
  desc: "Retrieves a skillset definition.\n\n**Code Sample**\n\nGet search indexer skillset \"searchIndexerSkillset\".\n\n```java\nSearchIndexerSkillset indexerSkillset =\n     SEARCH_INDEXER_CLIENT.getSkillset(\"searchIndexerSkillset\");\n System.out.printf(\"The indexer skillset name is %s. The ETag of indexer skillset is %s.%n\",\n     indexerSkillset.getName(), indexerSkillset.getETag());\n```"
  returns:
    description: "the SearchIndexerSkillset."
    type: "<xref href=\"com.azure.search.documents.indexes.models.SearchIndexerSkillset?alt=com.azure.search.documents.indexes.models.SearchIndexerSkillset&text=SearchIndexerSkillset\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.search.documents.indexes.SearchIndexerClient.getSkillsetWithResponse(java.lang.String,com.azure.core.util.Context)"
  fullName: "com.azure.search.documents.indexes.SearchIndexerClient.getSkillsetWithResponse(String skillsetName, Context context)"
  name: "getSkillsetWithResponse(String skillsetName, Context context)"
  nameWithType: "SearchIndexerClient.getSkillsetWithResponse(String skillsetName, Context context)"
  summary: "Retrieves a skillset definition."
  parameters:
  - description: "the name of the skillset to retrieve"
    name: "skillsetName"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "additional context that is passed through the HTTP pipeline during the service call"
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<SearchIndexerSkillset> getSkillsetWithResponse(String skillsetName, Context context)"
  desc: "Retrieves a skillset definition.\n\n**Code Sample**\n\nGet search indexer skillset \"searchIndexerSkillset\".\n\n```java\nResponse<SearchIndexerSkillset> skillsetWithResponse = SEARCH_INDEXER_CLIENT.getSkillsetWithResponse(\n     \"searchIndexerSkillset\", new Context(KEY_1, VALUE_1));\n\n System.out.printf(\"The status code of the response is %s. The indexer skillset name is %s.%n\",\n     skillsetWithResponse.getStatusCode(), skillsetWithResponse.getValue().getName());\n```"
  returns:
    description: "a response containing the SearchIndexerSkillset."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.search.documents.indexes.models.SearchIndexerSkillset?alt=com.azure.search.documents.indexes.models.SearchIndexerSkillset&text=SearchIndexerSkillset\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.search.documents.indexes.SearchIndexerClient.listDataSourceConnectionNames()"
  fullName: "com.azure.search.documents.indexes.SearchIndexerClient.listDataSourceConnectionNames()"
  name: "listDataSourceConnectionNames()"
  nameWithType: "SearchIndexerClient.listDataSourceConnectionNames()"
  summary: "List all Data<wbr>Source names from an Azure AI Search service."
  syntax: "public PagedIterable<String> listDataSourceConnectionNames()"
  desc: "List all DataSource names from an Azure AI Search service.\n\n**Code Sample**\n\nList all search indexer data source connection names.\n\n```java\nPagedIterable<String> dataSources = SEARCH_INDEXER_CLIENT.listDataSourceConnectionNames();\n for (String dataSourceName: dataSources) {\n     System.out.printf(\"The dataSource name is %s.%n\", dataSourceName);\n }\n```"
  returns:
    description: "a list of DataSources names"
    type: "<xref href=\"com.azure.core.http.rest.PagedIterable?alt=com.azure.core.http.rest.PagedIterable&text=PagedIterable\" data-throw-if-not-resolved=\"False\" />&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>&gt;"
- uid: "com.azure.search.documents.indexes.SearchIndexerClient.listDataSourceConnectionNames(com.azure.core.util.Context)"
  fullName: "com.azure.search.documents.indexes.SearchIndexerClient.listDataSourceConnectionNames(Context context)"
  name: "listDataSourceConnectionNames(Context context)"
  nameWithType: "SearchIndexerClient.listDataSourceConnectionNames(Context context)"
  summary: "List all Data<wbr>Sources names from an Azure AI Search service."
  parameters:
  - description: "Additional context that is passed through the HTTP pipeline during the service call."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PagedIterable<String> listDataSourceConnectionNames(Context context)"
  desc: "List all DataSources names from an Azure AI Search service.\n\n**Code Sample**\n\nList all search indexer data source connection names.\n\n```java\nPagedIterable<String> dataSources = SEARCH_INDEXER_CLIENT.listDataSourceConnectionNames(new Context(KEY_1, VALUE_1));\n System.out.println(\"The status code of the response is\"\n     + dataSources.iterableByPage().iterator().next().getStatusCode());\n for (String dataSourceName: dataSources) {\n     System.out.printf(\"The dataSource name is %s.%n\", dataSourceName);\n }\n```"
  returns:
    description: "a response containing the list of DataSource names."
    type: "<xref href=\"com.azure.core.http.rest.PagedIterable?alt=com.azure.core.http.rest.PagedIterable&text=PagedIterable\" data-throw-if-not-resolved=\"False\" />&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>&gt;"
- uid: "com.azure.search.documents.indexes.SearchIndexerClient.listDataSourceConnections()"
  fullName: "com.azure.search.documents.indexes.SearchIndexerClient.listDataSourceConnections()"
  name: "listDataSourceConnections()"
  nameWithType: "SearchIndexerClient.listDataSourceConnections()"
  summary: "List all Data<wbr>Sources from an Azure AI Search service."
  syntax: "public PagedIterable<SearchIndexerDataSourceConnection> listDataSourceConnections()"
  desc: "List all DataSources from an Azure AI Search service.\n\n**Code Sample**\n\nList all search indexer data source connections.\n\n```java\nPagedIterable<SearchIndexerDataSourceConnection> dataSources = SEARCH_INDEXER_CLIENT.listDataSourceConnections();\n for (SearchIndexerDataSourceConnection dataSource: dataSources) {\n     System.out.printf(\"The dataSource name is %s. The ETag of dataSource is %s.%n\", dataSource.getName(),\n         dataSource.getETag());\n }\n```"
  returns:
    description: "a list of DataSources"
    type: "<xref href=\"com.azure.core.http.rest.PagedIterable?alt=com.azure.core.http.rest.PagedIterable&text=PagedIterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.search.documents.indexes.models.SearchIndexerDataSourceConnection?alt=com.azure.search.documents.indexes.models.SearchIndexerDataSourceConnection&text=SearchIndexerDataSourceConnection\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.search.documents.indexes.SearchIndexerClient.listDataSourceConnections(com.azure.core.util.Context)"
  fullName: "com.azure.search.documents.indexes.SearchIndexerClient.listDataSourceConnections(Context context)"
  name: "listDataSourceConnections(Context context)"
  nameWithType: "SearchIndexerClient.listDataSourceConnections(Context context)"
  summary: "List all Data<wbr>Sources from an Azure AI Search service."
  parameters:
  - description: "Additional context that is passed through the HTTP pipeline during the service call."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PagedIterable<SearchIndexerDataSourceConnection> listDataSourceConnections(Context context)"
  desc: "List all DataSources from an Azure AI Search service.\n\n**Code Sample**\n\nList all search indexer data source connections.\n\n```java\nPagedIterable<SearchIndexerDataSourceConnection> dataSources =\n     SEARCH_INDEXER_CLIENT.listDataSourceConnections(new Context(KEY_1, VALUE_1));\n\n System.out.println(\"The status code of the response is\"\n     + dataSources.iterableByPage().iterator().next().getStatusCode());\n for (SearchIndexerDataSourceConnection dataSource: dataSources) {\n     System.out.printf(\"The dataSource name is %s. The ETag of dataSource is %s.%n\",\n         dataSource.getName(), dataSource.getETag());\n }\n```"
  returns:
    description: "a response containing the list of DataSources."
    type: "<xref href=\"com.azure.core.http.rest.PagedIterable?alt=com.azure.core.http.rest.PagedIterable&text=PagedIterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.search.documents.indexes.models.SearchIndexerDataSourceConnection?alt=com.azure.search.documents.indexes.models.SearchIndexerDataSourceConnection&text=SearchIndexerDataSourceConnection\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.search.documents.indexes.SearchIndexerClient.listIndexerNames()"
  fullName: "com.azure.search.documents.indexes.SearchIndexerClient.listIndexerNames()"
  name: "listIndexerNames()"
  nameWithType: "SearchIndexerClient.listIndexerNames()"
  summary: "Lists all indexers names for an Azure AI Search service."
  syntax: "public PagedIterable<String> listIndexerNames()"
  desc: "Lists all indexers names for an Azure AI Search service.\n\n**Code Sample**\n\nList all search indexer names.\n\n```java\nPagedIterable<String> indexers = SEARCH_INDEXER_CLIENT.listIndexerNames();\n for (String indexerName: indexers) {\n     System.out.printf(\"The indexer name is %s.%n\", indexerName);\n }\n```"
  returns:
    description: "all Indexer names from the Search service ."
    type: "<xref href=\"com.azure.core.http.rest.PagedIterable?alt=com.azure.core.http.rest.PagedIterable&text=PagedIterable\" data-throw-if-not-resolved=\"False\" />&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>&gt;"
- uid: "com.azure.search.documents.indexes.SearchIndexerClient.listIndexerNames(com.azure.core.util.Context)"
  fullName: "com.azure.search.documents.indexes.SearchIndexerClient.listIndexerNames(Context context)"
  name: "listIndexerNames(Context context)"
  nameWithType: "SearchIndexerClient.listIndexerNames(Context context)"
  summary: "Lists all indexers names for an Azure AI Search service."
  parameters:
  - description: "additional context that is passed through the HTTP pipeline during the service call"
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PagedIterable<String> listIndexerNames(Context context)"
  desc: "Lists all indexers names for an Azure AI Search service.\n\n**Code Sample**\n\nList all search indexer names.\n\n```java\nPagedIterable<String> indexers = SEARCH_INDEXER_CLIENT.listIndexerNames(new Context(KEY_1, VALUE_1));\n System.out.println(\"The status code of the response is\"\n     + indexers.iterableByPage().iterator().next().getStatusCode());\n for (String indexerName: indexers) {\n     System.out.printf(\"The indexer name is %s.%n\", indexerName);\n }\n```"
  returns:
    description: "all Indexer names from the Search service."
    type: "<xref href=\"com.azure.core.http.rest.PagedIterable?alt=com.azure.core.http.rest.PagedIterable&text=PagedIterable\" data-throw-if-not-resolved=\"False\" />&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>&gt;"
- uid: "com.azure.search.documents.indexes.SearchIndexerClient.listIndexers()"
  fullName: "com.azure.search.documents.indexes.SearchIndexerClient.listIndexers()"
  name: "listIndexers()"
  nameWithType: "SearchIndexerClient.listIndexers()"
  summary: "Lists all indexers available for an Azure AI Search service."
  syntax: "public PagedIterable<SearchIndexer> listIndexers()"
  desc: "Lists all indexers available for an Azure AI Search service.\n\n**Code Sample**\n\nList all search indexers.\n\n```java\nPagedIterable<SearchIndexer> indexers = SEARCH_INDEXER_CLIENT.listIndexers();\n for (SearchIndexer indexer: indexers) {\n     System.out.printf(\"The indexer name is %s. The ETag of indexer is %s.%n\", indexer.getName(),\n         indexer.getETag());\n }\n```"
  returns:
    description: "all Indexers from the Search service."
    type: "<xref href=\"com.azure.core.http.rest.PagedIterable?alt=com.azure.core.http.rest.PagedIterable&text=PagedIterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.search.documents.indexes.models.SearchIndexer?alt=com.azure.search.documents.indexes.models.SearchIndexer&text=SearchIndexer\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.search.documents.indexes.SearchIndexerClient.listIndexers(com.azure.core.util.Context)"
  fullName: "com.azure.search.documents.indexes.SearchIndexerClient.listIndexers(Context context)"
  name: "listIndexers(Context context)"
  nameWithType: "SearchIndexerClient.listIndexers(Context context)"
  summary: "Lists all indexers available for an Azure AI Search service."
  parameters:
  - description: "additional context that is passed through the HTTP pipeline during the service call"
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PagedIterable<SearchIndexer> listIndexers(Context context)"
  desc: "Lists all indexers available for an Azure AI Search service.\n\n**Code Sample**\n\nList all search indexers.\n\n```java\nPagedIterable<SearchIndexer> indexers = SEARCH_INDEXER_CLIENT.listIndexers(new Context(KEY_1, VALUE_1));\n System.out.println(\"The status code of the response is\"\n     + indexers.iterableByPage().iterator().next().getStatusCode());\n for (SearchIndexer indexer: indexers) {\n     System.out.printf(\"The indexer name is %s. The ETag of index is %s.%n\",\n         indexer.getName(), indexer.getETag());\n }\n```"
  returns:
    description: "all Indexers from the Search service."
    type: "<xref href=\"com.azure.core.http.rest.PagedIterable?alt=com.azure.core.http.rest.PagedIterable&text=PagedIterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.search.documents.indexes.models.SearchIndexer?alt=com.azure.search.documents.indexes.models.SearchIndexer&text=SearchIndexer\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.search.documents.indexes.SearchIndexerClient.listSkillsetNames()"
  fullName: "com.azure.search.documents.indexes.SearchIndexerClient.listSkillsetNames()"
  name: "listSkillsetNames()"
  nameWithType: "SearchIndexerClient.listSkillsetNames()"
  summary: "Lists all skillset names for an Azure AI Search service."
  syntax: "public PagedIterable<String> listSkillsetNames()"
  desc: "Lists all skillset names for an Azure AI Search service.\n\n**Code Sample**\n\nList all search indexer skillset names.\n\n```java\nPagedIterable<String> skillsetNames = SEARCH_INDEXER_CLIENT.listSkillsetNames();\n for (String skillsetName: skillsetNames) {\n     System.out.printf(\"The indexer skillset name is %s.%n\", skillsetName);\n }\n```"
  returns:
    description: "the list of skillset names."
    type: "<xref href=\"com.azure.core.http.rest.PagedIterable?alt=com.azure.core.http.rest.PagedIterable&text=PagedIterable\" data-throw-if-not-resolved=\"False\" />&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>&gt;"
- uid: "com.azure.search.documents.indexes.SearchIndexerClient.listSkillsetNames(com.azure.core.util.Context)"
  fullName: "com.azure.search.documents.indexes.SearchIndexerClient.listSkillsetNames(Context context)"
  name: "listSkillsetNames(Context context)"
  nameWithType: "SearchIndexerClient.listSkillsetNames(Context context)"
  summary: "Lists all skillset names for an Azure AI Search service."
  parameters:
  - description: "additional context that is passed through the HTTP pipeline during the service call"
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PagedIterable<String> listSkillsetNames(Context context)"
  desc: "Lists all skillset names for an Azure AI Search service.\n\n**Code Sample**\n\nList all search indexer skillset names with response.\n\n```java\nPagedIterable<String> skillsetNames = SEARCH_INDEXER_CLIENT.listSkillsetNames(new Context(KEY_1, VALUE_1));\n System.out.println(\"The status code of the response is\"\n     + skillsetNames.iterableByPage().iterator().next().getStatusCode());\n for (String skillsetName: skillsetNames) {\n     System.out.printf(\"The indexer skillset name is %s.%n\", skillsetName);\n }\n```"
  returns:
    description: "the list of skillset names."
    type: "<xref href=\"com.azure.core.http.rest.PagedIterable?alt=com.azure.core.http.rest.PagedIterable&text=PagedIterable\" data-throw-if-not-resolved=\"False\" />&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>&gt;"
- uid: "com.azure.search.documents.indexes.SearchIndexerClient.listSkillsets()"
  fullName: "com.azure.search.documents.indexes.SearchIndexerClient.listSkillsets()"
  name: "listSkillsets()"
  nameWithType: "SearchIndexerClient.listSkillsets()"
  summary: "Lists all skillsets available for an Azure AI Search service."
  syntax: "public PagedIterable<SearchIndexerSkillset> listSkillsets()"
  desc: "Lists all skillsets available for an Azure AI Search service.\n\n**Code Sample**\n\nList all search indexer skillsets.\n\n```java\nPagedIterable<SearchIndexerSkillset> indexerSkillsets = SEARCH_INDEXER_CLIENT.listSkillsets();\n for (SearchIndexerSkillset skillset: indexerSkillsets) {\n     System.out.printf(\"The skillset name is %s. The ETag of skillset is %s.%n\", skillset.getName(),\n         skillset.getETag());\n }\n```"
  returns:
    description: "the list of skillsets."
    type: "<xref href=\"com.azure.core.http.rest.PagedIterable?alt=com.azure.core.http.rest.PagedIterable&text=PagedIterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.search.documents.indexes.models.SearchIndexerSkillset?alt=com.azure.search.documents.indexes.models.SearchIndexerSkillset&text=SearchIndexerSkillset\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.search.documents.indexes.SearchIndexerClient.listSkillsets(com.azure.core.util.Context)"
  fullName: "com.azure.search.documents.indexes.SearchIndexerClient.listSkillsets(Context context)"
  name: "listSkillsets(Context context)"
  nameWithType: "SearchIndexerClient.listSkillsets(Context context)"
  summary: "Lists all skillsets available for an Azure AI Search service."
  parameters:
  - description: "additional context that is passed through the HTTP pipeline during the service call"
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PagedIterable<SearchIndexerSkillset> listSkillsets(Context context)"
  desc: "Lists all skillsets available for an Azure AI Search service.\n\n**Code Sample**\n\nList all search indexer skillsets.\n\n```java\nPagedIterable<SearchIndexerSkillset> indexerSkillsets = SEARCH_INDEXER_CLIENT\n     .listSkillsets(new Context(KEY_1, VALUE_1));\n System.out.println(\"The status code of the response is\"\n     + indexerSkillsets.iterableByPage().iterator().next().getStatusCode());\n for (SearchIndexerSkillset skillset: indexerSkillsets) {\n     System.out.printf(\"The skillset name is %s. The ETag of skillset is %s.%n\",\n         skillset.getName(), skillset.getETag());\n }\n```"
  returns:
    description: "the list of skillsets."
    type: "<xref href=\"com.azure.core.http.rest.PagedIterable?alt=com.azure.core.http.rest.PagedIterable&text=PagedIterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.search.documents.indexes.models.SearchIndexerSkillset?alt=com.azure.search.documents.indexes.models.SearchIndexerSkillset&text=SearchIndexerSkillset\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.search.documents.indexes.SearchIndexerClient.resetIndexer(java.lang.String)"
  fullName: "com.azure.search.documents.indexes.SearchIndexerClient.resetIndexer(String indexerName)"
  name: "resetIndexer(String indexerName)"
  nameWithType: "SearchIndexerClient.resetIndexer(String indexerName)"
  summary: "Resets the change tracking state associated with an indexer."
  parameters:
  - description: "the name of the indexer to reset"
    name: "indexerName"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public void resetIndexer(String indexerName)"
  desc: "Resets the change tracking state associated with an indexer.\n\n**Code Sample**\n\nReset search indexer named \"searchIndexer\".\n\n```java\nSEARCH_INDEXER_CLIENT.resetIndexer(\"searchIndexer\");\n```"
- uid: "com.azure.search.documents.indexes.SearchIndexerClient.resetIndexerWithResponse(java.lang.String,com.azure.core.util.Context)"
  fullName: "com.azure.search.documents.indexes.SearchIndexerClient.resetIndexerWithResponse(String indexerName, Context context)"
  name: "resetIndexerWithResponse(String indexerName, Context context)"
  nameWithType: "SearchIndexerClient.resetIndexerWithResponse(String indexerName, Context context)"
  summary: "Resets the change tracking state associated with an indexer."
  parameters:
  - description: "the name of the indexer to reset"
    name: "indexerName"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "additional context that is passed through the HTTP pipeline during the service call"
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<Void> resetIndexerWithResponse(String indexerName, Context context)"
  desc: "Resets the change tracking state associated with an indexer.\n\n**Code Sample**\n\nReset search indexer named \"searchIndexer\".\n\n```java\nResponse<Void> response = SEARCH_INDEXER_CLIENT.resetIndexerWithResponse(\"searchIndexer\",\n     new Context(KEY_1, VALUE_1));\n System.out.println(\"The status code of the response is \" + response.getStatusCode());\n```"
  returns:
    description: "a response signalling completion."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Void.html\">Void</a>&gt;"
- uid: "com.azure.search.documents.indexes.SearchIndexerClient.runIndexer(java.lang.String)"
  fullName: "com.azure.search.documents.indexes.SearchIndexerClient.runIndexer(String indexerName)"
  name: "runIndexer(String indexerName)"
  nameWithType: "SearchIndexerClient.runIndexer(String indexerName)"
  summary: "Runs an indexer on-demand."
  parameters:
  - description: "the name of the indexer to run"
    name: "indexerName"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public void runIndexer(String indexerName)"
  desc: "Runs an indexer on-demand.\n\n**Code Sample**\n\nRun search indexer named \"searchIndexer\".\n\n```java\nSEARCH_INDEXER_CLIENT.runIndexer(\"searchIndexer\");\n```"
- uid: "com.azure.search.documents.indexes.SearchIndexerClient.runIndexerWithResponse(java.lang.String,com.azure.core.util.Context)"
  fullName: "com.azure.search.documents.indexes.SearchIndexerClient.runIndexerWithResponse(String indexerName, Context context)"
  name: "runIndexerWithResponse(String indexerName, Context context)"
  nameWithType: "SearchIndexerClient.runIndexerWithResponse(String indexerName, Context context)"
  summary: "Runs an indexer on-demand."
  parameters:
  - description: "the name of the indexer to run"
    name: "indexerName"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "additional context that is passed through the HTTP pipeline during the service call"
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<Void> runIndexerWithResponse(String indexerName, Context context)"
  desc: "Runs an indexer on-demand.\n\n**Code Sample**\n\nRun search indexer named \"searchIndexer\".\n\n```java\nResponse<Void> response = SEARCH_INDEXER_CLIENT.runIndexerWithResponse(\"searchIndexer\",\n     new Context(KEY_1, VALUE_1));\n System.out.println(\"The status code of the response is \" + response.getStatusCode());\n```"
  returns:
    description: "a response signalling completion."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Void.html\">Void</a>&gt;"
type: "class"
desc: "This class provides a client that contains the operations for creating, getting, listing, updating, or deleting data source connections, indexers, or skillsets and running or resetting indexers in an Azure AI Search service.\n\n## Overview ##\n\nIndexers provide indexing automation. An indexer connects to a data source, reads in the data, and passes it to a skillset pipeline for indexing into a target search index. Indexers read from an external source using connection information in a data source, and serialize the incoming data into JSON search documents. In addition to a data source, an indexer also requires an index. The index specifies the fields and attributes of the search documents.\n\nA skillset adds external processing steps to indexer execution, and is usually used to add AI or deep learning models to analyze or transform content to make it searchable in an index. The contents of a skillset are one or more skills, which can be [built-in skills][] created by Microsoft, custom skills, or a combination of both. Built-in skills exist for image analysis, including OCR, and natural language processing. Other examples of built-in skills include entity recognition, key phrase extraction, chunking text into logical pages, among others. A skillset is high-level standalone object that exists on a level equivalent to indexes, indexers, and data sources, but it's operational only within indexer processing. As a high-level object, you can design a skillset once, and then reference it in multiple indexers.\n\nThis client provides a synchronous API for accessing indexers and skillsets. This client allows you to create, update, list, or delete indexers and skillsets. It can also be used to run or reset indexers.\n\n## Getting Started ##\n\nAuthenticating and building instances of this client are handled by <xref uid=\"com.azure.search.documents.indexes.SearchIndexerClientBuilder\" data-throw-if-not-resolved=\"false\" data-raw-source=\"SearchIndexerClientBuilder\"></xref>. This sample shows you how to authenticate and build this client:\n\n```java\nSearchIndexerClient searchIndexerClient = new SearchIndexerClientBuilder()\n     .endpoint(\"{endpoint}\")\n     .credential(new AzureKeyCredential(\"{admin-key}\"))\n     .buildClient();\n```\n\nFor more information on authentication and building, see the <xref uid=\"com.azure.search.documents.indexes.SearchIndexerClientBuilder\" data-throw-if-not-resolved=\"false\" data-raw-source=\"SearchIndexerClientBuilder\"></xref> documentation.\n\n## Examples ##\n\nThe following examples all use [a simple Hotel data set][] that you can [ import into your own index from the Azure portal.][import into your own index from the Azure portal.] These are just a few of the basics - please check out [our Samples ][our Samples]for much more.\n\n### Create an Indexer ###\n\nThe following sample creates an indexer.\n\n```java\nSearchIndexer indexer = new SearchIndexer(\"example-indexer\", \"example-datasource\", \"example-index\");\n SearchIndexer createdIndexer = searchIndexerClient.createIndexer(indexer);\n System.out.printf(\"Created indexer name: %s%n\", createdIndexer.getName());\n```\n\n *For an asynchronous sample, see <xref uid=\"com.azure.search.documents.indexes.SearchIndexerAsyncClient.createIndexer(com.azure.search.documents.indexes.models.SearchIndexer)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"SearchIndexerAsyncClient#createIndexer(SearchIndexer)\"></xref>.* \n\n### List all Indexers ###\n\nThe following sample lists all indexers.\n\n```java\nsearchIndexerClient.listIndexers().forEach(indexer ->\n     System.out.printf(\"Retrieved indexer name: %s%n\", indexer.getName())\n );\n```\n\n *For an asynchronous sample, see <xref uid=\"com.azure.search.documents.indexes.SearchIndexerAsyncClient.listIndexers()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"SearchIndexerAsyncClient#listIndexers()\"></xref>.* \n\n### Get an Indexer ###\n\nThe following sample gets an indexer.\n\n```java\nSearchIndexer indexer = searchIndexerClient.getIndexer(\"example-indexer\");\n System.out.printf(\"Retrieved indexer name: %s%n\", indexer.getName());\n```\n\n *For an asynchronous sample, see <xref uid=\"com.azure.search.documents.indexes.SearchIndexerAsyncClient.getIndexer(java.lang.String)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"SearchIndexerAsyncClient#getIndexer(String)\"></xref>.* \n\n### Update an Indexer ###\n\nThe following sample updates an indexer.\n\n```java\nSearchIndexer indexer = searchIndexerClient.getIndexer(\"example-indexer\");\n indexer.setDescription(\"This is a new description for this indexer\");\n SearchIndexer updatedIndexer = searchIndexerClient.createOrUpdateIndexer(indexer);\n System.out.printf(\"Updated indexer name: %s, description: %s%n\", updatedIndexer.getName(),\n     updatedIndexer.getDescription());\n```\n\n *For an asynchronous sample, see <xref uid=\"com.azure.search.documents.indexes.SearchIndexerAsyncClient.createOrUpdateIndexer(com.azure.search.documents.indexes.models.SearchIndexer)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"SearchIndexerAsyncClient#createOrUpdateIndexer(SearchIndexer)\"></xref>.* \n\n### Delete an Indexer ###\n\nThe following sample deletes an indexer.\n\n```java\nsearchIndexerClient.deleteIndexer(\"example-indexer\");\n```\n\n *For an asynchronous sample, see <xref uid=\"com.azure.search.documents.indexes.SearchIndexerAsyncClient.deleteIndexer(java.lang.String)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"SearchIndexerAsyncClient#deleteIndexer(String)\"></xref>.* \n\n### Run an Indexer ###\n\nThe following sample runs an indexer.\n\n```java\nsearchIndexerClient.runIndexer(\"example-indexer\");\n```\n\n *For an asynchronous sample, see <xref uid=\"com.azure.search.documents.indexes.SearchIndexerAsyncClient.runIndexer(java.lang.String)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"SearchIndexerAsyncClient#runIndexer(String)\"></xref>.* \n\n### Reset an Indexer ###\n\nThe following sample resets an indexer.\n\n```java\nsearchIndexerClient.resetIndexer(\"example-indexer\");\n```\n\n *For an asynchronous sample, see <xref uid=\"com.azure.search.documents.indexes.SearchIndexerAsyncClient.resetIndexer(java.lang.String)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"SearchIndexerAsyncClient#resetIndexer(String)\"></xref>.* \n\n### Create a Skillset ###\n\nThe following sample creates a skillset.\n\n```java\nList<InputFieldMappingEntry> inputs = Collections.singletonList(\n     new InputFieldMappingEntry(\"image\")\n         .setSource(\"/document/normalized_images/*\")\n );\n\n List<OutputFieldMappingEntry> outputs = Arrays.asList(\n     new OutputFieldMappingEntry(\"text\")\n         .setTargetName(\"mytext\"),\n     new OutputFieldMappingEntry(\"layoutText\")\n         .setTargetName(\"myLayoutText\")\n );\n\n List<SearchIndexerSkill> skills = Collections.singletonList(\n     new OcrSkill(inputs, outputs)\n         .setShouldDetectOrientation(true)\n         .setDefaultLanguageCode(null)\n         .setName(\"myocr\")\n         .setDescription(\"Extracts text (plain and structured) from image.\")\n         .setContext(\"/document/normalized_images/*\")\n );\n\n SearchIndexerSkillset skillset = new SearchIndexerSkillset(\"skillsetName\", skills)\n     .setDescription(\"Extracts text (plain and structured) from image.\");\n\n System.out.println(String.format(\"Creating OCR skillset '%s'\", skillset.getName()));\n\n SearchIndexerSkillset createdSkillset = searchIndexerClient.createSkillset(skillset);\n\n System.out.println(\"Created OCR skillset\");\n System.out.println(String.format(\"Name: %s\", createdSkillset.getName()));\n System.out.println(String.format(\"ETag: %s\", createdSkillset.getETag()));\n```\n\n *For an asynchronous sample, see <xref uid=\"com.azure.search.documents.indexes.SearchIndexerAsyncClient.createSkillset(com.azure.search.documents.indexes.models.SearchIndexerSkillset)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"SearchIndexerAsyncClient#createSkillset(SearchIndexerSkillset)\"></xref>.* \n\n### List all Skillsets ###\n\nThe following sample lists all skillsets.\n\n```java\nsearchIndexerClient.listSkillsets().forEach(skillset ->\n     System.out.printf(\"Retrieved skillset name: %s%n\", skillset.getName())\n );\n```\n\n *For an asynchronous sample, see <xref uid=\"com.azure.search.documents.indexes.SearchIndexerAsyncClient.listSkillsets()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"SearchIndexerAsyncClient#listSkillsets()\"></xref>.* \n\n### Get a Skillset ###\n\nThe following sample gets a skillset.\n\n```java\nSearchIndexerSkillset skillset = searchIndexerClient.getSkillset(\"example-skillset\");\n System.out.printf(\"Retrieved skillset name: %s%n\", skillset.getName());\n```\n\n *For an asynchronous sample, see <xref uid=\"com.azure.search.documents.indexes.SearchIndexerAsyncClient.getSkillset(java.lang.String)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"SearchIndexerAsyncClient#getSkillset(String)\"></xref>.* \n\n### Update a Skillset ###\n\nThe following sample updates a skillset.\n\n```java\nSearchIndexerSkillset skillset = searchIndexerClient.getSkillset(\"example-skillset\");\n skillset.setDescription(\"This is a new description for this skillset\");\n SearchIndexerSkillset updatedSkillset = searchIndexerClient.createOrUpdateSkillset(skillset);\n System.out.printf(\"Updated skillset name: %s, description: %s%n\", updatedSkillset.getName(),\n     updatedSkillset.getDescription());\n```\n\n *For an asynchronous sample, see <xref uid=\"com.azure.search.documents.indexes.SearchIndexerAsyncClient.createOrUpdateSkillset(com.azure.search.documents.indexes.models.SearchIndexerSkillset)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"SearchIndexerAsyncClient#createOrUpdateSkillset(SearchIndexerSkillset)\"></xref>.* \n\n### Delete a Skillset ###\n\nThe following sample deletes a skillset.\n\n```java\nsearchIndexerClient.deleteSkillset(\"example-skillset\");\n```\n\n *For an asynchronous sample, see <xref uid=\"com.azure.search.documents.indexes.SearchIndexerAsyncClient.deleteSkillset(java.lang.String)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"SearchIndexerAsyncClient#deleteSkillset(String)\"></xref>.* \n\n\n[built-in skills]: https://learn.microsoft.com/azure/search/cognitive-search-predefined-skills\n[a simple Hotel data set]: https://github.com/Azure-Samples/azure-search-sample-data\n[import into your own index from the Azure portal.]: https://learn.microsoft.com/azure/search/search-get-started-portal#step-1---start-the-import-data-wizard-and-create-a-data-source\n[our Samples]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/search/azure-search-documents/src/samples/README.md"
metadata: {}
package: "com.azure.search.documents.indexes"
artifact: com.azure:azure-search-documents:11.8.0-beta.1
