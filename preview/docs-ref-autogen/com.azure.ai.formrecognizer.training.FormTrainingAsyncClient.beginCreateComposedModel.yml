### YamlMime:JavaMember
uid: "com.azure.ai.formrecognizer.training.FormTrainingAsyncClient.beginCreateComposedModel*"
fullName: "com.azure.ai.formrecognizer.training.FormTrainingAsyncClient.beginCreateComposedModel"
name: "beginCreateComposedModel"
nameWithType: "FormTrainingAsyncClient.beginCreateComposedModel"
members:
- uid: "com.azure.ai.formrecognizer.training.FormTrainingAsyncClient.beginCreateComposedModel(java.util.List<java.lang.String>)"
  fullName: "com.azure.ai.formrecognizer.training.FormTrainingAsyncClient.beginCreateComposedModel(List<String> modelIds)"
  name: "beginCreateComposedModel(List<String> modelIds)"
  nameWithType: "FormTrainingAsyncClient.beginCreateComposedModel(List<String> modelIds)"
  summary: "Create a composed model from the provided list of existing models in the account.\n\nThis operations fails if the list consists of an invalid, non-existing model Id or duplicate Ids. This operation is currently only supported for custom models trained using labels.\n\nThe service does not support cancellation of the long running operation and returns with an error message indicating absence of cancellation support.\n\n**Code sample**\n\n```java\nString labeledModelId1 = \"5f21ab8d-71a6-42d8-9856-ef5985c486a8\";\n String labeledModelId2 = \"d7b0904c-841f-46f9-a9f4-3f2273eef7c9\";\n formTrainingAsyncClient.beginCreateComposedModel(Arrays.asList(labeledModelId1, labeledModelId2))\n     // if training polling operation completed, retrieve the final result.\n     .flatMap(AsyncPollResponse::getFinalResult)\n     .subscribe(customFormModel -> {\n         System.out.printf(\"Model Id: %s%n\", customFormModel.getModelId());\n         System.out.printf(\"Model Status: %s%n\", customFormModel.getModelStatus());\n         System.out.printf(\"Is this a composed model: %s%n\",\n             customFormModel.getCustomModelProperties().isComposed());\n         customFormModel.getSubmodels()\n             .forEach(customFormSubmodel -> customFormSubmodel.getFields()\n                 .forEach((key, customFormModelField) ->\n                     System.out.printf(\"Form type: %s Field Text: %s Field Accuracy: %f%n\",\n                         key, customFormModelField.getName(), customFormModelField.getAccuracy())));\n     });\n```"
  parameters:
  - description: "The list of models Ids to form the composed model."
    name: "modelIds"
    type: "<xref href=\"java.util.List?alt=java.util.List&text=List\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public PollerFlux<FormRecognizerOperationResult,CustomFormModel> beginCreateComposedModel(List<String> modelIds)"
  returns:
    description: "A <xref uid=\"com.azure.core.util.polling.PollerFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PollerFlux\"></xref> that polls the create composed model operation until it has completed, has failed,\n or has been cancelled. The completed operation returns the created <xref uid=\"com.azure.ai.formrecognizer.training.models.CustomFormModel\" data-throw-if-not-resolved=\"false\" data-raw-source=\"composed model\"></xref>."
    type: "<xref href=\"com.azure.core.util.polling.PollerFlux?alt=com.azure.core.util.polling.PollerFlux&text=PollerFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.ai.formrecognizer.models.FormRecognizerOperationResult?alt=com.azure.ai.formrecognizer.models.FormRecognizerOperationResult&text=FormRecognizerOperationResult\" data-throw-if-not-resolved=\"False\" />,<xref href=\"com.azure.ai.formrecognizer.training.models.CustomFormModel?alt=com.azure.ai.formrecognizer.training.models.CustomFormModel&text=CustomFormModel\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.ai.formrecognizer.training.FormTrainingAsyncClient.beginCreateComposedModel(java.util.List<java.lang.String>,com.azure.ai.formrecognizer.models.CreateComposedModelOptions)"
  fullName: "com.azure.ai.formrecognizer.training.FormTrainingAsyncClient.beginCreateComposedModel(List<String> modelIds, CreateComposedModelOptions createComposedModelOptions)"
  name: "beginCreateComposedModel(List<String> modelIds, CreateComposedModelOptions createComposedModelOptions)"
  nameWithType: "FormTrainingAsyncClient.beginCreateComposedModel(List<String> modelIds, CreateComposedModelOptions createComposedModelOptions)"
  summary: "Create a composed model from the provided list of existing models in the account.\n\nThis operations fails if the list consists of an invalid, non-existing model Id or duplicate Ids. This operation is currently only supported for custom models trained using labels.\n\nThe service does not support cancellation of the long running operation and returns with an error message indicating absence of cancellation support.\n\n**Code sample**\n\n```java\nString labeledModelId1 = \"5f21ab8d-71a6-42d8-9856-ef5985c486a8\";\n String labeledModelId2 = \"d7b0904c-841f-46f9-a9f4-3f2273eef7c9\";\n formTrainingAsyncClient.beginCreateComposedModel(Arrays.asList(labeledModelId1, labeledModelId2),\n     new CreateComposedModelOptions()\n         .setModelName(\"my composed model name\")\n         .setPollInterval(Duration.ofSeconds(5)))\n     // if training polling operation completed, retrieve the final result.\n     .flatMap(AsyncPollResponse::getFinalResult)\n     .subscribe(customFormModel -> {\n         System.out.printf(\"Model Id: %s%n\", customFormModel.getModelId());\n         System.out.printf(\"Model Status: %s%n\", customFormModel.getModelStatus());\n         System.out.printf(\"Model display name: %s%n\", customFormModel.getModelName());\n         System.out.printf(\"Is this a composed model: %s%n\",\n             customFormModel.getCustomModelProperties().isComposed());\n \n         customFormModel.getSubmodels()\n             .forEach(customFormSubmodel -> customFormSubmodel.getFields()\n                 .forEach((key, customFormModelField) ->\n                     System.out.printf(\"Form type: %s Field Text: %s Field Accuracy: %f%n\",\n                         key, customFormModelField.getName(), customFormModelField.getAccuracy())));\n     });\n```"
  parameters:
  - description: "The list of models Ids to form the composed model."
    name: "modelIds"
    type: "<xref href=\"java.util.List?alt=java.util.List&text=List\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />&gt;"
  - description: "The configurable <xref uid=\"com.azure.ai.formrecognizer.models.CreateComposedModelOptions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"options\"></xref> to pass when\n creating a composed model."
    name: "createComposedModelOptions"
    type: "<xref href=\"com.azure.ai.formrecognizer.models.CreateComposedModelOptions?alt=com.azure.ai.formrecognizer.models.CreateComposedModelOptions&text=CreateComposedModelOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PollerFlux<FormRecognizerOperationResult,CustomFormModel> beginCreateComposedModel(List<String> modelIds, CreateComposedModelOptions createComposedModelOptions)"
  returns:
    description: "A <xref uid=\"com.azure.core.util.polling.PollerFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PollerFlux\"></xref> that polls the create composed model operation until it has completed, has failed,\n or has been cancelled. The completed operation returns the copied model <xref uid=\"com.azure.ai.formrecognizer.training.models.CustomFormModel\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CustomFormModel\"></xref>."
    type: "<xref href=\"com.azure.core.util.polling.PollerFlux?alt=com.azure.core.util.polling.PollerFlux&text=PollerFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.ai.formrecognizer.models.FormRecognizerOperationResult?alt=com.azure.ai.formrecognizer.models.FormRecognizerOperationResult&text=FormRecognizerOperationResult\" data-throw-if-not-resolved=\"False\" />,<xref href=\"com.azure.ai.formrecognizer.training.models.CustomFormModel?alt=com.azure.ai.formrecognizer.training.models.CustomFormModel&text=CustomFormModel\" data-throw-if-not-resolved=\"False\" />&gt;"
type: "method"
metadata: {}
package: "com.azure.ai.formrecognizer.training"
artifact: com.azure:azure-ai-formrecognizer:3.1.0-beta.1
