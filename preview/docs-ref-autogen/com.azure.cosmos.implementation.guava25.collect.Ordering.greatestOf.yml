### YamlMime:JavaMember
uid: "com.azure.cosmos.implementation.guava25.collect.Ordering.greatestOf*"
fullName: "com.azure.cosmos.implementation.guava25.collect.Ordering<T>.<E>greatestOf"
name: "<E>greatestOf"
nameWithType: "Ordering<T>.<E>greatestOf"
members:
- uid: "com.azure.cosmos.implementation.guava25.collect.Ordering.<E>greatestOf(java.lang.Iterable<E>,int)"
  fullName: "com.azure.cosmos.implementation.guava25.collect.Ordering<T>.<E>greatestOf(Iterable<E> iterable, int k)"
  name: "<E>greatestOf(Iterable<E> iterable, int k)"
  nameWithType: "Ordering<T>.<E>greatestOf(Iterable<E> iterable, int k)"
  summary: "Returns the `k` greatest elements of the given iterable according to this ordering, in order from greatest to least. If there are fewer than `k` elements present, all will be included.\n\nThe implementation does not necessarily use a *stable* sorting algorithm; when multiple elements are equivalent, it is undefined which will come first.\n\n**Java 8 users:** Use `Streams.stream(iterable).collect(Comparators.greatest(k, thisComparator))` instead."
  parameters:
  - name: "iterable"
    type: "<xref href=\"java.lang.Iterable?alt=java.lang.Iterable&text=Iterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"E?alt=E&text=E\" data-throw-if-not-resolved=\"False\" />&gt;"
  - name: "k"
    type: "<xref href=\"int?alt=int&text=int\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public List<E> <E>greatestOf(Iterable<E> iterable, int k)"
  returns:
    description: "an immutable <code>RandomAccess</code> list of the <code>k</code> greatest elements in\n     <i>descending order</i>"
    type: "<xref href=\"java.util.List?alt=java.util.List&text=List\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"E?alt=E&text=E\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.cosmos.implementation.guava25.collect.Ordering.<E>greatestOf(java.util.Iterator<E>,int)"
  fullName: "com.azure.cosmos.implementation.guava25.collect.Ordering<T>.<E>greatestOf(Iterator<E> iterator, int k)"
  name: "<E>greatestOf(Iterator<E> iterator, int k)"
  nameWithType: "Ordering<T>.<E>greatestOf(Iterator<E> iterator, int k)"
  summary: "Returns the `k` greatest elements from the given iterator according to this ordering, in order from greatest to least. If there are fewer than `k` elements present, all will be included.\n\nThe implementation does not necessarily use a *stable* sorting algorithm; when multiple elements are equivalent, it is undefined which will come first.\n\n**Java 8 users:** Continue to use this method for now. After the next release of Guava, use `Streams.stream(iterator).collect(Comparators.greatest(k, thisComparator))` instead."
  parameters:
  - name: "iterator"
    type: "<xref href=\"java.util.Iterator?alt=java.util.Iterator&text=Iterator\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"E?alt=E&text=E\" data-throw-if-not-resolved=\"False\" />&gt;"
  - name: "k"
    type: "<xref href=\"int?alt=int&text=int\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public List<E> <E>greatestOf(Iterator<E> iterator, int k)"
  returns:
    description: "an immutable <code>RandomAccess</code> list of the <code>k</code> greatest elements in\n     <i>descending order</i>"
    type: "<xref href=\"java.util.List?alt=java.util.List&text=List\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"E?alt=E&text=E\" data-throw-if-not-resolved=\"False\" />&gt;"
type: "method"
metadata: {}
package: "com.azure.cosmos.implementation.guava25.collect"
artifact: com.azure:azure-cosmos:4.4.0-beta.1
