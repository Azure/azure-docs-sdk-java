### YamlMime:ManagedReference
items:
- uid: com.azure.messaging.eventhubs.EventPositionIntegrationTest
  id: EventPositionIntegrationTest
  parent: com.azure.messaging.eventhubs
  children:
  - com.azure.messaging.eventhubs.EventPositionIntegrationTest.afterTest()
  - com.azure.messaging.eventhubs.EventPositionIntegrationTest.beforeTest()
  - com.azure.messaging.eventhubs.EventPositionIntegrationTest.EventPositionIntegrationTest()
  - com.azure.messaging.eventhubs.EventPositionIntegrationTest.receiveEarliestMessages()
  - com.azure.messaging.eventhubs.EventPositionIntegrationTest.receiveLatestMessages()
  - com.azure.messaging.eventhubs.EventPositionIntegrationTest.receiveLatestMessagesNoneAdded()
  - com.azure.messaging.eventhubs.EventPositionIntegrationTest.receiveMessageFromEnqueuedTime()
  - com.azure.messaging.eventhubs.EventPositionIntegrationTest.receiveMessageFromEnqueuedTimeReceivedMessage()
  - com.azure.messaging.eventhubs.EventPositionIntegrationTest.receiveMessageFromOffsetInclusive()
  - com.azure.messaging.eventhubs.EventPositionIntegrationTest.receiveMessageFromOffsetNonInclusive()
  - com.azure.messaging.eventhubs.EventPositionIntegrationTest.receiveMessageFromSequenceNumberInclusive()
  - com.azure.messaging.eventhubs.EventPositionIntegrationTest.receiveMessageFromSequenceNumberNonInclusive()
  - com.azure.messaging.eventhubs.EventPositionIntegrationTest.testName
  - com.azure.messaging.eventhubs.EventPositionIntegrationTest.testName()
  href: com.azure.messaging.eventhubs.EventPositionIntegrationTest.yml
  langs:
  - java
  name: EventPositionIntegrationTest
  nameWithType: EventPositionIntegrationTest
  fullName: com.azure.messaging.eventhubs.EventPositionIntegrationTest
  type: Class
  source:
    remote: &o0
      path: sdk/eventhubs/azure-eventhubs/src/test/java/com/azure/messaging/eventhubs/EventPositionIntegrationTest.java
      branch: master
      repo: https://github.com/Azure/azure-sdk-for-java
    path: sdk/eventhubs/azure-eventhubs/src/test/java/com/azure/messaging/eventhubs/EventPositionIntegrationTest.java
    startLine: 37
  package: com.azure.messaging.eventhubs
  summary: "<p>Tests that <xref uid=\"com.azure.messaging.eventhubs.EventHubConsumer\" data-throw-if-not-resolved=\"false\">EventHubConsumer</xref> can be created with various <xref uid=\"\" data-throw-if-not-resolved=\"false\">EventPositions</xref>. </p>"
  syntax:
    content: public class EventPositionIntegrationTest extends ApiTestBase
  inheritance:
  - java.lang.Object
  - com.azure.core.test.TestBase
  - com.azure.messaging.eventhubs.implementation.ApiTestBase
  inheritedMembers:
  - com.azure.messaging.eventhubs.implementation.ApiTestBase.ApiTestBase(ClientLogger)
  - com.azure.messaging.eventhubs.implementation.ApiTestBase.dispose(Closeable...)
  - com.azure.messaging.eventhubs.implementation.ApiTestBase.getAuthorizationType()
  - com.azure.messaging.eventhubs.implementation.ApiTestBase.getConnectionOptions()
  - com.azure.messaging.eventhubs.implementation.ApiTestBase.getConnectionString()
  - com.azure.messaging.eventhubs.implementation.ApiTestBase.getConnectionStringProperties()
  - com.azure.messaging.eventhubs.implementation.ApiTestBase.getReactor()
  - com.azure.messaging.eventhubs.implementation.ApiTestBase.getReactorProvider()
  - com.azure.messaging.eventhubs.implementation.ApiTestBase.getTestMode()
  - com.azure.messaging.eventhubs.implementation.ApiTestBase.getTokenCredential()
  - com.azure.core.test.TestBase.interceptorManager
  - com.azure.messaging.eventhubs.implementation.ApiTestBase.logger
  - com.azure.messaging.eventhubs.implementation.ApiTestBase.setTransportType(TransportType)
  - com.azure.core.test.TestBase.setupClass()
  - com.azure.messaging.eventhubs.implementation.ApiTestBase.setupTest()
  - com.azure.messaging.eventhubs.implementation.ApiTestBase.skipIfNotRecordMode()
  - com.azure.messaging.eventhubs.implementation.ApiTestBase.teardownTest()
  - com.azure.core.test.TestBase.testResourceNamer
  - com.azure.messaging.eventhubs.implementation.ApiTestBase.TIMEOUT
- uid: com.azure.messaging.eventhubs.EventPositionIntegrationTest.afterTest()
  id: afterTest()
  parent: com.azure.messaging.eventhubs.EventPositionIntegrationTest
  href: com.azure.messaging.eventhubs.EventPositionIntegrationTest.yml
  langs:
  - java
  name: afterTest()
  nameWithType: EventPositionIntegrationTest.afterTest()
  fullName: com.azure.messaging.eventhubs.EventPositionIntegrationTest.afterTest()
  overload: com.azure.messaging.eventhubs.EventPositionIntegrationTest.afterTest*
  type: Method
  source:
    remote: *o0
    path: sdk/eventhubs/azure-eventhubs/src/test/java/com/azure/messaging/eventhubs/EventPositionIntegrationTest.java
    startLine: 73
  package: com.azure.messaging.eventhubs
  syntax:
    content: protected void afterTest()
- uid: com.azure.messaging.eventhubs.EventPositionIntegrationTest.beforeTest()
  id: beforeTest()
  parent: com.azure.messaging.eventhubs.EventPositionIntegrationTest
  href: com.azure.messaging.eventhubs.EventPositionIntegrationTest.yml
  langs:
  - java
  name: beforeTest()
  nameWithType: EventPositionIntegrationTest.beforeTest()
  fullName: com.azure.messaging.eventhubs.EventPositionIntegrationTest.beforeTest()
  overload: com.azure.messaging.eventhubs.EventPositionIntegrationTest.beforeTest*
  type: Method
  source:
    remote: *o0
    path: sdk/eventhubs/azure-eventhubs/src/test/java/com/azure/messaging/eventhubs/EventPositionIntegrationTest.java
    startLine: 63
  package: com.azure.messaging.eventhubs
  syntax:
    content: protected void beforeTest()
- uid: com.azure.messaging.eventhubs.EventPositionIntegrationTest.EventPositionIntegrationTest()
  id: EventPositionIntegrationTest()
  parent: com.azure.messaging.eventhubs.EventPositionIntegrationTest
  href: com.azure.messaging.eventhubs.EventPositionIntegrationTest.yml
  langs:
  - java
  name: EventPositionIntegrationTest()
  nameWithType: EventPositionIntegrationTest.EventPositionIntegrationTest()
  fullName: com.azure.messaging.eventhubs.EventPositionIntegrationTest.EventPositionIntegrationTest()
  overload: com.azure.messaging.eventhubs.EventPositionIntegrationTest.EventPositionIntegrationTest*
  type: Constructor
  source:
    remote: *o0
    path: sdk/eventhubs/azure-eventhubs/src/test/java/com/azure/messaging/eventhubs/EventPositionIntegrationTest.java
    startLine: 50
  package: com.azure.messaging.eventhubs
  syntax:
    content: public EventPositionIntegrationTest()
- uid: com.azure.messaging.eventhubs.EventPositionIntegrationTest.receiveEarliestMessages()
  id: receiveEarliestMessages()
  parent: com.azure.messaging.eventhubs.EventPositionIntegrationTest
  href: com.azure.messaging.eventhubs.EventPositionIntegrationTest.yml
  langs:
  - java
  name: receiveEarliestMessages()
  nameWithType: EventPositionIntegrationTest.receiveEarliestMessages()
  fullName: com.azure.messaging.eventhubs.EventPositionIntegrationTest.receiveEarliestMessages()
  overload: com.azure.messaging.eventhubs.EventPositionIntegrationTest.receiveEarliestMessages*
  type: Method
  source:
    remote: *o0
    path: sdk/eventhubs/azure-eventhubs/src/test/java/com/azure/messaging/eventhubs/EventPositionIntegrationTest.java
    startLine: 82
  package: com.azure.messaging.eventhubs
  summary: "<p>Test that we receive the same messages using <xref uid=\"com.azure.messaging.eventhubs.models.EventPosition.earliest()\" data-throw-if-not-resolved=\"false\">EventPosition#earliest()</xref> and <xref uid=\"com.azure.messaging.eventhubs.models.EventPosition.fromEnqueuedTime(Instant)\" data-throw-if-not-resolved=\"false\">EventPosition#fromEnqueuedTime(Instant)</xref> where the enqueued time is <xref uid=\"\" data-throw-if-not-resolved=\"false\">Instant#EPOCH</xref>. </p>"
  syntax:
    content: public void receiveEarliestMessages()
- uid: com.azure.messaging.eventhubs.EventPositionIntegrationTest.receiveLatestMessages()
  id: receiveLatestMessages()
  parent: com.azure.messaging.eventhubs.EventPositionIntegrationTest
  href: com.azure.messaging.eventhubs.EventPositionIntegrationTest.yml
  langs:
  - java
  name: receiveLatestMessages()
  nameWithType: EventPositionIntegrationTest.receiveLatestMessages()
  fullName: com.azure.messaging.eventhubs.EventPositionIntegrationTest.receiveLatestMessages()
  overload: com.azure.messaging.eventhubs.EventPositionIntegrationTest.receiveLatestMessages*
  type: Method
  source:
    remote: *o0
    path: sdk/eventhubs/azure-eventhubs/src/test/java/com/azure/messaging/eventhubs/EventPositionIntegrationTest.java
    startLine: 143
  package: com.azure.messaging.eventhubs
  summary: "<p>Test for receiving message from latest offset </p>"
  syntax:
    content: public void receiveLatestMessages()
- uid: com.azure.messaging.eventhubs.EventPositionIntegrationTest.receiveLatestMessagesNoneAdded()
  id: receiveLatestMessagesNoneAdded()
  parent: com.azure.messaging.eventhubs.EventPositionIntegrationTest
  href: com.azure.messaging.eventhubs.EventPositionIntegrationTest.yml
  langs:
  - java
  name: receiveLatestMessagesNoneAdded()
  nameWithType: EventPositionIntegrationTest.receiveLatestMessagesNoneAdded()
  fullName: com.azure.messaging.eventhubs.EventPositionIntegrationTest.receiveLatestMessagesNoneAdded()
  overload: com.azure.messaging.eventhubs.EventPositionIntegrationTest.receiveLatestMessagesNoneAdded*
  type: Method
  source:
    remote: *o0
    path: sdk/eventhubs/azure-eventhubs/src/test/java/com/azure/messaging/eventhubs/EventPositionIntegrationTest.java
    startLine: 124
  package: com.azure.messaging.eventhubs
  summary: "<p>Verify that if no new items are added at the end of the stream, we don't get any events. </p>"
  syntax:
    content: public void receiveLatestMessagesNoneAdded()
- uid: com.azure.messaging.eventhubs.EventPositionIntegrationTest.receiveMessageFromEnqueuedTime()
  id: receiveMessageFromEnqueuedTime()
  parent: com.azure.messaging.eventhubs.EventPositionIntegrationTest
  href: com.azure.messaging.eventhubs.EventPositionIntegrationTest.yml
  langs:
  - java
  name: receiveMessageFromEnqueuedTime()
  nameWithType: EventPositionIntegrationTest.receiveMessageFromEnqueuedTime()
  fullName: com.azure.messaging.eventhubs.EventPositionIntegrationTest.receiveMessageFromEnqueuedTime()
  overload: com.azure.messaging.eventhubs.EventPositionIntegrationTest.receiveMessageFromEnqueuedTime*
  type: Method
  source:
    remote: *o0
    path: sdk/eventhubs/azure-eventhubs/src/test/java/com/azure/messaging/eventhubs/EventPositionIntegrationTest.java
    startLine: 176
  package: com.azure.messaging.eventhubs
  summary: "<p>Test for receiving messages start at enqueued time or after the enqueued time. </p>"
  syntax:
    content: public void receiveMessageFromEnqueuedTime()
- uid: com.azure.messaging.eventhubs.EventPositionIntegrationTest.receiveMessageFromEnqueuedTimeReceivedMessage()
  id: receiveMessageFromEnqueuedTimeReceivedMessage()
  parent: com.azure.messaging.eventhubs.EventPositionIntegrationTest
  href: com.azure.messaging.eventhubs.EventPositionIntegrationTest.yml
  langs:
  - java
  name: receiveMessageFromEnqueuedTimeReceivedMessage()
  nameWithType: EventPositionIntegrationTest.receiveMessageFromEnqueuedTimeReceivedMessage()
  fullName: com.azure.messaging.eventhubs.EventPositionIntegrationTest.receiveMessageFromEnqueuedTimeReceivedMessage()
  overload: com.azure.messaging.eventhubs.EventPositionIntegrationTest.receiveMessageFromEnqueuedTimeReceivedMessage*
  type: Method
  source:
    remote: *o0
    path: sdk/eventhubs/azure-eventhubs/src/test/java/com/azure/messaging/eventhubs/EventPositionIntegrationTest.java
    startLine: 202
  package: com.azure.messaging.eventhubs
  summary: "<p>Test for receiving messages with a previously received message. </p>"
  syntax:
    content: public void receiveMessageFromEnqueuedTimeReceivedMessage()
- uid: com.azure.messaging.eventhubs.EventPositionIntegrationTest.receiveMessageFromOffsetInclusive()
  id: receiveMessageFromOffsetInclusive()
  parent: com.azure.messaging.eventhubs.EventPositionIntegrationTest
  href: com.azure.messaging.eventhubs.EventPositionIntegrationTest.yml
  langs:
  - java
  name: receiveMessageFromOffsetInclusive()
  nameWithType: EventPositionIntegrationTest.receiveMessageFromOffsetInclusive()
  fullName: com.azure.messaging.eventhubs.EventPositionIntegrationTest.receiveMessageFromOffsetInclusive()
  overload: com.azure.messaging.eventhubs.EventPositionIntegrationTest.receiveMessageFromOffsetInclusive*
  type: Method
  source:
    remote: *o0
    path: sdk/eventhubs/azure-eventhubs/src/test/java/com/azure/messaging/eventhubs/EventPositionIntegrationTest.java
    startLine: 229
  package: com.azure.messaging.eventhubs
  summary: "<p>Tests that we can get an event using the inclusive offset. </p>"
  syntax:
    content: public void receiveMessageFromOffsetInclusive()
- uid: com.azure.messaging.eventhubs.EventPositionIntegrationTest.receiveMessageFromOffsetNonInclusive()
  id: receiveMessageFromOffsetNonInclusive()
  parent: com.azure.messaging.eventhubs.EventPositionIntegrationTest
  href: com.azure.messaging.eventhubs.EventPositionIntegrationTest.yml
  langs:
  - java
  name: receiveMessageFromOffsetNonInclusive()
  nameWithType: EventPositionIntegrationTest.receiveMessageFromOffsetNonInclusive()
  fullName: com.azure.messaging.eventhubs.EventPositionIntegrationTest.receiveMessageFromOffsetNonInclusive()
  overload: com.azure.messaging.eventhubs.EventPositionIntegrationTest.receiveMessageFromOffsetNonInclusive*
  type: Method
  source:
    remote: *o0
    path: sdk/eventhubs/azure-eventhubs/src/test/java/com/azure/messaging/eventhubs/EventPositionIntegrationTest.java
    startLine: 255
  package: com.azure.messaging.eventhubs
  summary: "<p>Tests that we can get an event using the non-inclusive offset. </p>"
  syntax:
    content: public void receiveMessageFromOffsetNonInclusive()
- uid: com.azure.messaging.eventhubs.EventPositionIntegrationTest.receiveMessageFromSequenceNumberInclusive()
  id: receiveMessageFromSequenceNumberInclusive()
  parent: com.azure.messaging.eventhubs.EventPositionIntegrationTest
  href: com.azure.messaging.eventhubs.EventPositionIntegrationTest.yml
  langs:
  - java
  name: receiveMessageFromSequenceNumberInclusive()
  nameWithType: EventPositionIntegrationTest.receiveMessageFromSequenceNumberInclusive()
  fullName: com.azure.messaging.eventhubs.EventPositionIntegrationTest.receiveMessageFromSequenceNumberInclusive()
  overload: com.azure.messaging.eventhubs.EventPositionIntegrationTest.receiveMessageFromSequenceNumberInclusive*
  type: Method
  source:
    remote: *o0
    path: sdk/eventhubs/azure-eventhubs/src/test/java/com/azure/messaging/eventhubs/EventPositionIntegrationTest.java
    startLine: 281
  package: com.azure.messaging.eventhubs
  summary: "<p>Test for receiving sequence number with inclusive sequence number. </p>"
  syntax:
    content: public void receiveMessageFromSequenceNumberInclusive()
- uid: com.azure.messaging.eventhubs.EventPositionIntegrationTest.receiveMessageFromSequenceNumberNonInclusive()
  id: receiveMessageFromSequenceNumberNonInclusive()
  parent: com.azure.messaging.eventhubs.EventPositionIntegrationTest
  href: com.azure.messaging.eventhubs.EventPositionIntegrationTest.yml
  langs:
  - java
  name: receiveMessageFromSequenceNumberNonInclusive()
  nameWithType: EventPositionIntegrationTest.receiveMessageFromSequenceNumberNonInclusive()
  fullName: com.azure.messaging.eventhubs.EventPositionIntegrationTest.receiveMessageFromSequenceNumberNonInclusive()
  overload: com.azure.messaging.eventhubs.EventPositionIntegrationTest.receiveMessageFromSequenceNumberNonInclusive*
  type: Method
  source:
    remote: *o0
    path: sdk/eventhubs/azure-eventhubs/src/test/java/com/azure/messaging/eventhubs/EventPositionIntegrationTest.java
    startLine: 307
  package: com.azure.messaging.eventhubs
  summary: "<p>Test for receiving sequence number with non-inclusive sequence number. </p>"
  syntax:
    content: public void receiveMessageFromSequenceNumberNonInclusive()
- uid: com.azure.messaging.eventhubs.EventPositionIntegrationTest.testName
  id: testName
  parent: com.azure.messaging.eventhubs.EventPositionIntegrationTest
  href: com.azure.messaging.eventhubs.EventPositionIntegrationTest.yml
  langs:
  - java
  name: testName
  nameWithType: EventPositionIntegrationTest.testName
  fullName: com.azure.messaging.eventhubs.EventPositionIntegrationTest.testName
  type: Field
  source:
    remote: *o0
    path: sdk/eventhubs/azure-eventhubs/src/test/java/com/azure/messaging/eventhubs/EventPositionIntegrationTest.java
    startLine: 55
  package: com.azure.messaging.eventhubs
  syntax:
    content: public TestName testName= new TestName()
    return:
      type: 1e0ad879
- uid: com.azure.messaging.eventhubs.EventPositionIntegrationTest.testName()
  id: testName()
  parent: com.azure.messaging.eventhubs.EventPositionIntegrationTest
  href: com.azure.messaging.eventhubs.EventPositionIntegrationTest.yml
  langs:
  - java
  name: testName()
  nameWithType: EventPositionIntegrationTest.testName()
  fullName: com.azure.messaging.eventhubs.EventPositionIntegrationTest.testName()
  overload: com.azure.messaging.eventhubs.EventPositionIntegrationTest.testName*
  type: Method
  source:
    remote: *o0
    path: sdk/eventhubs/azure-eventhubs/src/test/java/com/azure/messaging/eventhubs/EventPositionIntegrationTest.java
    startLine: 58
  package: com.azure.messaging.eventhubs
  syntax:
    content: protected String testName()
    return:
      type: "26831127"
references:
- uid: 1e0ad879
  spec.java:
  - name: TestName
    fullName: TestName
- uid: com.azure.messaging.eventhubs.EventPositionIntegrationTest.EventPositionIntegrationTest*
  name: EventPositionIntegrationTest
  nameWithType: EventPositionIntegrationTest.EventPositionIntegrationTest
  fullName: com.azure.messaging.eventhubs.EventPositionIntegrationTest.EventPositionIntegrationTest
  package: com.azure.messaging.eventhubs
- uid: com.azure.messaging.eventhubs.EventPositionIntegrationTest.receiveEarliestMessages*
  name: receiveEarliestMessages
  nameWithType: EventPositionIntegrationTest.receiveEarliestMessages
  fullName: com.azure.messaging.eventhubs.EventPositionIntegrationTest.receiveEarliestMessages
  package: com.azure.messaging.eventhubs
- uid: com.azure.messaging.eventhubs.EventPositionIntegrationTest.receiveLatestMessagesNoneAdded*
  name: receiveLatestMessagesNoneAdded
  nameWithType: EventPositionIntegrationTest.receiveLatestMessagesNoneAdded
  fullName: com.azure.messaging.eventhubs.EventPositionIntegrationTest.receiveLatestMessagesNoneAdded
  package: com.azure.messaging.eventhubs
- uid: com.azure.messaging.eventhubs.EventPositionIntegrationTest.receiveLatestMessages*
  name: receiveLatestMessages
  nameWithType: EventPositionIntegrationTest.receiveLatestMessages
  fullName: com.azure.messaging.eventhubs.EventPositionIntegrationTest.receiveLatestMessages
  package: com.azure.messaging.eventhubs
- uid: com.azure.messaging.eventhubs.EventPositionIntegrationTest.receiveMessageFromEnqueuedTime*
  name: receiveMessageFromEnqueuedTime
  nameWithType: EventPositionIntegrationTest.receiveMessageFromEnqueuedTime
  fullName: com.azure.messaging.eventhubs.EventPositionIntegrationTest.receiveMessageFromEnqueuedTime
  package: com.azure.messaging.eventhubs
- uid: com.azure.messaging.eventhubs.EventPositionIntegrationTest.receiveMessageFromEnqueuedTimeReceivedMessage*
  name: receiveMessageFromEnqueuedTimeReceivedMessage
  nameWithType: EventPositionIntegrationTest.receiveMessageFromEnqueuedTimeReceivedMessage
  fullName: com.azure.messaging.eventhubs.EventPositionIntegrationTest.receiveMessageFromEnqueuedTimeReceivedMessage
  package: com.azure.messaging.eventhubs
- uid: com.azure.messaging.eventhubs.EventPositionIntegrationTest.receiveMessageFromOffsetInclusive*
  name: receiveMessageFromOffsetInclusive
  nameWithType: EventPositionIntegrationTest.receiveMessageFromOffsetInclusive
  fullName: com.azure.messaging.eventhubs.EventPositionIntegrationTest.receiveMessageFromOffsetInclusive
  package: com.azure.messaging.eventhubs
- uid: com.azure.messaging.eventhubs.EventPositionIntegrationTest.receiveMessageFromOffsetNonInclusive*
  name: receiveMessageFromOffsetNonInclusive
  nameWithType: EventPositionIntegrationTest.receiveMessageFromOffsetNonInclusive
  fullName: com.azure.messaging.eventhubs.EventPositionIntegrationTest.receiveMessageFromOffsetNonInclusive
  package: com.azure.messaging.eventhubs
- uid: com.azure.messaging.eventhubs.EventPositionIntegrationTest.receiveMessageFromSequenceNumberInclusive*
  name: receiveMessageFromSequenceNumberInclusive
  nameWithType: EventPositionIntegrationTest.receiveMessageFromSequenceNumberInclusive
  fullName: com.azure.messaging.eventhubs.EventPositionIntegrationTest.receiveMessageFromSequenceNumberInclusive
  package: com.azure.messaging.eventhubs
- uid: com.azure.messaging.eventhubs.EventPositionIntegrationTest.receiveMessageFromSequenceNumberNonInclusive*
  name: receiveMessageFromSequenceNumberNonInclusive
  nameWithType: EventPositionIntegrationTest.receiveMessageFromSequenceNumberNonInclusive
  fullName: com.azure.messaging.eventhubs.EventPositionIntegrationTest.receiveMessageFromSequenceNumberNonInclusive
  package: com.azure.messaging.eventhubs
- uid: "26831127"
  spec.java:
  - name: String
    fullName: String
- uid: com.azure.messaging.eventhubs.EventPositionIntegrationTest.testName*
  name: testName
  nameWithType: EventPositionIntegrationTest.testName
  fullName: com.azure.messaging.eventhubs.EventPositionIntegrationTest.testName
  package: com.azure.messaging.eventhubs
- uid: com.azure.messaging.eventhubs.EventPositionIntegrationTest.beforeTest*
  name: beforeTest
  nameWithType: EventPositionIntegrationTest.beforeTest
  fullName: com.azure.messaging.eventhubs.EventPositionIntegrationTest.beforeTest
  package: com.azure.messaging.eventhubs
- uid: com.azure.messaging.eventhubs.EventPositionIntegrationTest.afterTest*
  name: afterTest
  nameWithType: EventPositionIntegrationTest.afterTest
  fullName: com.azure.messaging.eventhubs.EventPositionIntegrationTest.afterTest
  package: com.azure.messaging.eventhubs
- uid: com.azure.messaging.eventhubs.implementation.ApiTestBase.ApiTestBase(ClientLogger)
  parent: com.azure.messaging.eventhubs.implementation.ApiTestBase
  href: com.azure.messaging.eventhubs.implementation.ApiTestBase.yml
  name: ApiTestBase(ClientLogger logger)
  nameWithType: ApiTestBase.ApiTestBase(ClientLogger logger)
  fullName: com.azure.messaging.eventhubs.implementation.ApiTestBase.ApiTestBase(ClientLogger logger)
  type: Constructor
  syntax:
    content: protected ApiTestBase(ClientLogger logger)
    parameters:
    - id: logger
      type: com.azure.core.util.logging.ClientLogger
- uid: com.azure.messaging.eventhubs.implementation.ApiTestBase.dispose(Closeable...)
  parent: com.azure.messaging.eventhubs.implementation.ApiTestBase
  href: com.azure.messaging.eventhubs.implementation.ApiTestBase.yml
  name: dispose(Closeable... closeables)
  nameWithType: ApiTestBase.dispose(Closeable... closeables)
  fullName: com.azure.messaging.eventhubs.implementation.ApiTestBase.dispose(Closeable... closeables)
  type: Method
  summary: "<p>Disposes of any <xref uid=\"\" data-throw-if-not-resolved=\"false\">Closeable</xref> resources.</p>\r\n<p></p>"
  syntax:
    content: protected void dispose(Closeable... closeables)
    parameters:
    - id: closeables
      type: 05580a22
      description: >-
        <p>The closeables to dispose of. If a closeable is<code>null 

            </code> , it is skipped. </p>
- uid: com.azure.messaging.eventhubs.implementation.ApiTestBase.getAuthorizationType()
  parent: com.azure.messaging.eventhubs.implementation.ApiTestBase
  href: com.azure.messaging.eventhubs.implementation.ApiTestBase.yml
  name: getAuthorizationType()
  nameWithType: ApiTestBase.getAuthorizationType()
  fullName: com.azure.messaging.eventhubs.implementation.ApiTestBase.getAuthorizationType()
  type: Method
  syntax:
    content: protected CBSAuthorizationType getAuthorizationType()
    return:
      type: com.azure.messaging.eventhubs.implementation.CBSAuthorizationType
- uid: com.azure.messaging.eventhubs.implementation.ApiTestBase.getConnectionOptions()
  parent: com.azure.messaging.eventhubs.implementation.ApiTestBase
  href: com.azure.messaging.eventhubs.implementation.ApiTestBase.yml
  name: getConnectionOptions()
  nameWithType: ApiTestBase.getConnectionOptions()
  fullName: com.azure.messaging.eventhubs.implementation.ApiTestBase.getConnectionOptions()
  type: Method
  syntax:
    content: protected ConnectionOptions getConnectionOptions()
    return:
      type: com.azure.messaging.eventhubs.implementation.ConnectionOptions
- uid: com.azure.messaging.eventhubs.implementation.ApiTestBase.getConnectionString()
  parent: com.azure.messaging.eventhubs.implementation.ApiTestBase
  href: com.azure.messaging.eventhubs.implementation.ApiTestBase.yml
  name: getConnectionString()
  nameWithType: ApiTestBase.getConnectionString()
  fullName: com.azure.messaging.eventhubs.implementation.ApiTestBase.getConnectionString()
  type: Method
  syntax:
    content: protected String getConnectionString()
    return:
      type: "26831127"
- uid: com.azure.messaging.eventhubs.implementation.ApiTestBase.getConnectionStringProperties()
  parent: com.azure.messaging.eventhubs.implementation.ApiTestBase
  href: com.azure.messaging.eventhubs.implementation.ApiTestBase.yml
  name: getConnectionStringProperties()
  nameWithType: ApiTestBase.getConnectionStringProperties()
  fullName: com.azure.messaging.eventhubs.implementation.ApiTestBase.getConnectionStringProperties()
  type: Method
  syntax:
    content: protected ConnectionStringProperties getConnectionStringProperties()
    return:
      type: com.azure.messaging.eventhubs.implementation.ConnectionStringProperties
- uid: com.azure.messaging.eventhubs.implementation.ApiTestBase.getReactor()
  parent: com.azure.messaging.eventhubs.implementation.ApiTestBase
  href: com.azure.messaging.eventhubs.implementation.ApiTestBase.yml
  name: getReactor()
  nameWithType: ApiTestBase.getReactor()
  fullName: com.azure.messaging.eventhubs.implementation.ApiTestBase.getReactor()
  type: Method
  syntax:
    content: protected Reactor getReactor()
    return:
      type: 5f183614
- uid: com.azure.messaging.eventhubs.implementation.ApiTestBase.getReactorProvider()
  parent: com.azure.messaging.eventhubs.implementation.ApiTestBase
  href: com.azure.messaging.eventhubs.implementation.ApiTestBase.yml
  name: getReactorProvider()
  nameWithType: ApiTestBase.getReactorProvider()
  fullName: com.azure.messaging.eventhubs.implementation.ApiTestBase.getReactorProvider()
  type: Method
  syntax:
    content: protected ReactorProvider getReactorProvider()
    return:
      type: com.azure.messaging.eventhubs.implementation.ReactorProvider
- uid: com.azure.messaging.eventhubs.implementation.ApiTestBase.getTestMode()
  parent: com.azure.messaging.eventhubs.implementation.ApiTestBase
  href: com.azure.messaging.eventhubs.implementation.ApiTestBase.yml
  name: getTestMode()
  nameWithType: ApiTestBase.getTestMode()
  fullName: com.azure.messaging.eventhubs.implementation.ApiTestBase.getTestMode()
  type: Method
  summary: "<p>Gets the test mode for this API test. If AZURE_TEST_MODE equals <xref uid=\"com.azure.core.test.TestMode.RECORD\" data-throw-if-not-resolved=\"false\">TestMode#RECORD</xref> and Event Hubs connection string is set, then we return <xref uid=\"com.azure.core.test.TestMode.RECORD\" data-throw-if-not-resolved=\"false\">TestMode#RECORD</xref>. Otherwise, <xref uid=\"com.azure.core.test.TestMode.PLAYBACK\" data-throw-if-not-resolved=\"false\">TestMode#PLAYBACK</xref> is returned. </p>"
  syntax:
    content: public TestMode getTestMode()
    return:
      type: com.azure.core.test.TestMode
- uid: com.azure.messaging.eventhubs.implementation.ApiTestBase.getTokenCredential()
  parent: com.azure.messaging.eventhubs.implementation.ApiTestBase
  href: com.azure.messaging.eventhubs.implementation.ApiTestBase.yml
  name: getTokenCredential()
  nameWithType: ApiTestBase.getTokenCredential()
  fullName: com.azure.messaging.eventhubs.implementation.ApiTestBase.getTokenCredential()
  type: Method
  syntax:
    content: protected TokenCredential getTokenCredential()
    return:
      type: com.azure.core.credentials.TokenCredential
- uid: com.azure.core.test.TestBase.interceptorManager
  parent: com.azure.core.test.TestBase
  href: com.azure.core.test.TestBase.yml
  name: interceptorManager
  nameWithType: TestBase.interceptorManager
  fullName: com.azure.core.test.TestBase.interceptorManager
  type: Field
  syntax:
    content: protected InterceptorManager interceptorManager
    return:
      type: com.azure.core.test.InterceptorManager
- uid: com.azure.messaging.eventhubs.implementation.ApiTestBase.logger
  parent: com.azure.messaging.eventhubs.implementation.ApiTestBase
  href: com.azure.messaging.eventhubs.implementation.ApiTestBase.yml
  name: logger
  nameWithType: ApiTestBase.logger
  fullName: com.azure.messaging.eventhubs.implementation.ApiTestBase.logger
  type: Field
  syntax:
    content: protected final ClientLogger logger
    return:
      type: 93de0ef9com.azure.core.util.logging.ClientLogger
- uid: com.azure.messaging.eventhubs.implementation.ApiTestBase.setTransportType(TransportType)
  parent: com.azure.messaging.eventhubs.implementation.ApiTestBase
  href: com.azure.messaging.eventhubs.implementation.ApiTestBase.yml
  name: setTransportType(TransportType transportType)
  nameWithType: ApiTestBase.setTransportType(TransportType transportType)
  fullName: com.azure.messaging.eventhubs.implementation.ApiTestBase.setTransportType(TransportType transportType)
  type: Method
  syntax:
    content: protected void setTransportType(TransportType transportType)
    parameters:
    - id: transportType
      type: com.azure.core.amqp.TransportType
- uid: com.azure.core.test.TestBase.setupClass()
  parent: com.azure.core.test.TestBase
  href: com.azure.core.test.TestBase.yml
  name: setupClass()
  nameWithType: TestBase.setupClass()
  fullName: com.azure.core.test.TestBase.setupClass()
  type: Method
  summary: "<p>Before tests are executed, determines the test mode by reading the <xref uid=\"\" data-throw-if-not-resolved=\"false\">TestBase#AZURE_TEST_MODE</xref> environment variable. If it is not set, <xref uid=\"com.azure.core.test.TestMode.PLAYBACK\" data-throw-if-not-resolved=\"false\">TestMode#PLAYBACK</xref></p>"
  syntax:
    content: public static void setupClass()
- uid: com.azure.messaging.eventhubs.implementation.ApiTestBase.setupTest()
  parent: com.azure.messaging.eventhubs.implementation.ApiTestBase
  href: com.azure.messaging.eventhubs.implementation.ApiTestBase.yml
  name: setupTest()
  nameWithType: ApiTestBase.setupTest()
  fullName: com.azure.messaging.eventhubs.implementation.ApiTestBase.setupTest()
  type: Method
  syntax:
    content: public void setupTest()
- uid: com.azure.messaging.eventhubs.implementation.ApiTestBase.skipIfNotRecordMode()
  parent: com.azure.messaging.eventhubs.implementation.ApiTestBase
  href: com.azure.messaging.eventhubs.implementation.ApiTestBase.yml
  name: skipIfNotRecordMode()
  nameWithType: ApiTestBase.skipIfNotRecordMode()
  fullName: com.azure.messaging.eventhubs.implementation.ApiTestBase.skipIfNotRecordMode()
  type: Method
  syntax:
    content: protected void skipIfNotRecordMode()
- uid: com.azure.messaging.eventhubs.implementation.ApiTestBase.teardownTest()
  parent: com.azure.messaging.eventhubs.implementation.ApiTestBase
  href: com.azure.messaging.eventhubs.implementation.ApiTestBase.yml
  name: teardownTest()
  nameWithType: ApiTestBase.teardownTest()
  fullName: com.azure.messaging.eventhubs.implementation.ApiTestBase.teardownTest()
  type: Method
  syntax:
    content: public void teardownTest()
- uid: com.azure.core.test.TestBase.testResourceNamer
  parent: com.azure.core.test.TestBase
  href: com.azure.core.test.TestBase.yml
  name: testResourceNamer
  nameWithType: TestBase.testResourceNamer
  fullName: com.azure.core.test.TestBase.testResourceNamer
  type: Field
  syntax:
    content: protected TestResourceNamer testResourceNamer
    return:
      type: com.azure.core.test.utils.TestResourceNamer
- uid: com.azure.messaging.eventhubs.implementation.ApiTestBase.TIMEOUT
  parent: com.azure.messaging.eventhubs.implementation.ApiTestBase
  href: com.azure.messaging.eventhubs.implementation.ApiTestBase.yml
  name: TIMEOUT
  nameWithType: ApiTestBase.TIMEOUT
  fullName: com.azure.messaging.eventhubs.implementation.ApiTestBase.TIMEOUT
  type: Field
  syntax:
    content: protected static final Duration TIMEOUT= Duration.ofSeconds(30)
    return:
      type: 89ac7c4d
- uid: com.azure.messaging.eventhubs.implementation.ApiTestBase
  parent: com.azure.messaging.eventhubs.implementation
  href: com.azure.messaging.eventhubs.implementation.ApiTestBase.yml
  name: ApiTestBase
  nameWithType: ApiTestBase
  fullName: com.azure.messaging.eventhubs.implementation.ApiTestBase
  type: Class
  summary: "<p>Test base for running live and offline tests. </p>"
  syntax:
    content: public class ApiTestBase extends TestBase
- uid: com.azure.messaging.eventhubs.EventData
  parent: com.azure.messaging.eventhubs
  href: com.azure.messaging.eventhubs.EventData.yml
  name: EventData
  nameWithType: EventData
  fullName: com.azure.messaging.eventhubs.EventData
  type: Class
  summary: "<p>The data structure encapsulating the event being sent-to and received-from Event Hubs. Each Event Hub partition can be visualized as a stream of <xref uid=\"com.azure.messaging.eventhubs.EventData\" data-throw-if-not-resolved=\"false\">EventData</xref>.</p>\r\n<p>Here's how AMQP message sections map to <xref uid=\"com.azure.messaging.eventhubs.EventData\" data-throw-if-not-resolved=\"false\">EventData</xref>. For reference, the specification can be found here: <a href=\"http://docs.oasis-open.org/amqp/core/v1.0/os/amqp-core-complete-v1.0-os.pdf\">AMQP 1.0 specification</a></p>\r\n<p>\r\n  <orderedlist>\r\n    <li>\r\n      <p>\r\n        <xref uid=\"com.azure.messaging.eventhubs.EventData.properties()\" data-throw-if-not-resolved=\"false\">properties()</xref> - AMQPMessage.ApplicationProperties section </p>\r\n    </li>\r\n    <li>\r\n      <p>\r\n        <xref uid=\"com.azure.messaging.eventhubs.EventData.body()\" data-throw-if-not-resolved=\"false\">body()</xref> - if AMQPMessage.Body has Data section </p>\r\n    </li>\r\n  </orderedlist>\r\n</p>\r\n<p>Serializing a received <xref uid=\"com.azure.messaging.eventhubs.EventData\" data-throw-if-not-resolved=\"false\">EventData</xref> with AMQP sections other than ApplicationProperties (with primitive Java types) and Data section is not supported. </p>\r\n<p></p>"
  syntax:
    content: public class EventData
- uid: com.azure.messaging.eventhubs.EventHubAsyncClient
  parent: com.azure.messaging.eventhubs
  href: com.azure.messaging.eventhubs.EventHubAsyncClient.yml
  name: EventHubAsyncClient
  nameWithType: EventHubAsyncClient
  fullName: com.azure.messaging.eventhubs.EventHubAsyncClient
  type: Class
  summary: "<p>The main point of interaction with Azure Event Hubs, the client offers a connection to a specific Event Hub within the Event Hubs namespace and offers operations for sending event data, receiving events, and inspecting the connected Event Hub.</p>\r\n<p>\r\n  <b>Creating an <xref uid=\"com.azure.messaging.eventhubs.EventHubAsyncClient\" data-throw-if-not-resolved=\"false\">EventHubAsyncClient</xref> using Event Hubs namespace connection string</b>\r\n</p>\r\n<p>{ com.azure.messaging.eventhubs.eventhubclientbuilder.connectionString::string-string}</p>\r\n<p>\r\n  <b>Creating an <xref uid=\"com.azure.messaging.eventhubs.EventHubAsyncClient\" data-throw-if-not-resolved=\"false\">EventHubAsyncClient</xref> using Event Hub instance connection string</b>\r\n</p>\r\n<p>{ com.azure.messaging.eventhubs.eventhubclientbuilder.connectionstring::string}</p>\r\n<p></p>"
  syntax:
    content: public class EventHubAsyncClient
- uid: com.azure.messaging.eventhubs.models.EventPosition.earliest()
  parent: com.azure.messaging.eventhubs.models.EventPosition
  href: com.azure.messaging.eventhubs.models.EventPosition.yml
  name: earliest()
  nameWithType: EventPosition.earliest()
  fullName: com.azure.messaging.eventhubs.models.EventPosition.earliest()
  type: Method
  summary: "<p>Corresponds to the location of the first event present in the partition. Use this position to begin receiving from the first event that was enqueued in the partition which has not expired due to the retention policy.</p>\r\n<p></p>"
  syntax:
    content: public static EventPosition earliest()
    return:
      type: com.azure.messaging.eventhubs.models.EventPosition
      description: <p>An <xref uid="com.azure.messaging.eventhubs.models.EventPosition" data-throw-if-not-resolved="false">EventPosition</xref> set to the start of an Event Hub stream. </p>
- uid: com.azure.messaging.eventhubs.models.EventPosition.fromEnqueuedTime(Instant)
  parent: com.azure.messaging.eventhubs.models.EventPosition
  href: com.azure.messaging.eventhubs.models.EventPosition.yml
  name: fromEnqueuedTime(Instant enqueuedDateTime)
  nameWithType: EventPosition.fromEnqueuedTime(Instant enqueuedDateTime)
  fullName: com.azure.messaging.eventhubs.models.EventPosition.fromEnqueuedTime(Instant enqueuedDateTime)
  type: Method
  summary: "<p>Creates a position at the given <xref uid=\"\" data-throw-if-not-resolved=\"false\">Instant</xref>. Corresponds to a specific instance within a partition to begin looking for an event. The event enqueued after the requested<code>enqueuedDateTime \r\n    </code> becomes the current position.</p>\r\n<p></p>"
  syntax:
    content: public static EventPosition fromEnqueuedTime(Instant enqueuedDateTime)
    parameters:
    - id: enqueuedDateTime
      type: 328f8254
      description: <p>The instant, in UTC, from which the next available event should be chosen. </p>
    return:
      type: com.azure.messaging.eventhubs.models.EventPosition
      description: <p>An <xref uid="com.azure.messaging.eventhubs.models.EventPosition" data-throw-if-not-resolved="false">EventPosition</xref> object. </p>
- uid: com.azure.messaging.eventhubs.EventHubConsumer
  parent: com.azure.messaging.eventhubs
  href: com.azure.messaging.eventhubs.EventHubConsumer.yml
  name: EventHubConsumer
  nameWithType: EventHubConsumer
  fullName: com.azure.messaging.eventhubs.EventHubConsumer
  type: Class
  summary: "<p>A consumer responsible for reading <xref uid=\"com.azure.messaging.eventhubs.EventData\" data-throw-if-not-resolved=\"false\">EventData</xref> from a specific Event Hub partition in the context of a specific consumer group.</p>\r\n<p>\r\n  <ul>\r\n    <li>\r\n      <p>If <xref uid=\"com.azure.messaging.eventhubs.EventHubConsumer\" data-throw-if-not-resolved=\"false\">EventHubConsumer</xref> is created where <xref uid=\"com.azure.messaging.eventhubs.models.EventHubConsumerOptions.ownerLevel()\" data-throw-if-not-resolved=\"false\">EventHubConsumerOptions#ownerLevel()</xref> has a value, then Event Hubs service will guarantee only one active consumer exists per partitionId and consumer group combination. This consumer is sometimes referred to as an \"Epoch Consumer.\" </p>\r\n    </li>\r\n    <li>\r\n      <p>Multiple consumers per partitionId and consumer group combination can be created by not setting <xref uid=\"com.azure.messaging.eventhubs.models.EventHubConsumerOptions.ownerLevel()\" data-throw-if-not-resolved=\"false\">EventHubConsumerOptions#ownerLevel()</xref> when creating consumers. This non-exclusive consumer is sometimes referred to as a \"Non-Epoch Consumer.\" </p>\r\n    </li>\r\n  </ul>\r\n</p>\r\n<p>\r\n  <b>Consuming events from Event Hub</b>\r\n</p>\r\n<p>{ com.azure.messaging.eventhubs.eventhubconsumer.receive}</p>\r\n<p>\r\n  <b>Rate limiting consumption of events from Event Hub</b>\r\n</p>\r\n<p>For event consumers that need to limit the number of events they receive at a given time, they can use <xref uid=\"\" data-throw-if-not-resolved=\"false\">BaseSubscriber#request(long)</xref>.</p>\r\n<p>{ com.azure.messaging.eventhubs.eventhubconsumer.receiveBackpressure}</p>\r\n<p></p>"
  syntax:
    content: public class EventHubConsumer
