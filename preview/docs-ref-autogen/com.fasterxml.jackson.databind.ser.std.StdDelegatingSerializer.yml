### YamlMime:ManagedReference
items:
- uid: com.fasterxml.jackson.databind.ser.std.StdDelegatingSerializer
  id: StdDelegatingSerializer
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.std
  children:
  - com.fasterxml.jackson.databind.ser.std.StdDelegatingSerializer.<T>StdDelegatingSerializer(java.lang.Class<T>,com.fasterxml.jackson.databind.util.Converter<T,?>)
  - com.fasterxml.jackson.databind.ser.std.StdDelegatingSerializer.StdDelegatingSerializer(com.fasterxml.jackson.databind.util.Converter<?,?>)
  - com.fasterxml.jackson.databind.ser.std.StdDelegatingSerializer.StdDelegatingSerializer(com.fasterxml.jackson.databind.util.Converter<java.lang.Object,?>,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.JsonSerializer<?>)
  - com.fasterxml.jackson.databind.ser.std.StdDelegatingSerializer._converter
  - com.fasterxml.jackson.databind.ser.std.StdDelegatingSerializer._delegateSerializer
  - com.fasterxml.jackson.databind.ser.std.StdDelegatingSerializer._delegateType
  - com.fasterxml.jackson.databind.ser.std.StdDelegatingSerializer._findSerializer(java.lang.Object,com.fasterxml.jackson.databind.SerializerProvider)
  - com.fasterxml.jackson.databind.ser.std.StdDelegatingSerializer.acceptJsonFormatVisitor(com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper,com.fasterxml.jackson.databind.JavaType)
  - com.fasterxml.jackson.databind.ser.std.StdDelegatingSerializer.convertValue(java.lang.Object)
  - com.fasterxml.jackson.databind.ser.std.StdDelegatingSerializer.createContextual(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.BeanProperty)
  - com.fasterxml.jackson.databind.ser.std.StdDelegatingSerializer.getConverter()
  - com.fasterxml.jackson.databind.ser.std.StdDelegatingSerializer.getDelegatee()
  - com.fasterxml.jackson.databind.ser.std.StdDelegatingSerializer.getSchema(com.fasterxml.jackson.databind.SerializerProvider,java.lang.reflect.Type)
  - com.fasterxml.jackson.databind.ser.std.StdDelegatingSerializer.getSchema(com.fasterxml.jackson.databind.SerializerProvider,java.lang.reflect.Type,boolean)
  - com.fasterxml.jackson.databind.ser.std.StdDelegatingSerializer.isEmpty(com.fasterxml.jackson.databind.SerializerProvider,java.lang.Object)
  - com.fasterxml.jackson.databind.ser.std.StdDelegatingSerializer.resolve(com.fasterxml.jackson.databind.SerializerProvider)
  - com.fasterxml.jackson.databind.ser.std.StdDelegatingSerializer.serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)
  - com.fasterxml.jackson.databind.ser.std.StdDelegatingSerializer.serializeWithType(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.jsontype.TypeSerializer)
  - com.fasterxml.jackson.databind.ser.std.StdDelegatingSerializer.withDelegate(com.fasterxml.jackson.databind.util.Converter<java.lang.Object,?>,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.JsonSerializer<?>)
  langs:
  - java
  name: StdDelegatingSerializer
  nameWithType: StdDelegatingSerializer
  fullName: com.fasterxml.jackson.databind.ser.std.StdDelegatingSerializer
  type: Class
  package: com.fasterxml.jackson.databind.ser.std
  summary: >-
    Serializer implementation where given Java type is first converted to an intermediate "delegate type" (using a configured <xref uid="com.fasterxml.jackson.databind.util.Converter" data-throw-if-not-resolved="false">Converter</xref>, and then this delegate value is serialized by Jackson.


    Note that although types may be related, they must not be same; trying to do this will result in an exception.
  syntax:
    content: public class StdDelegatingSerializer extends StdSerializer<Object> implements ContextualSerializer, ResolvableSerializer, jsonFormatVisitors.JsonFormatVisitable, SchemaAware
  inheritance:
  - java.lang.Object
  - com.fasterxml.jackson.databind.JsonSerializer
  - com.fasterxml.jackson.databind.ser.std.StdSerializer
  implements:
  - com.fasterxml.jackson.databind.ser.ContextualSerializer
  - com.fasterxml.jackson.databind.ser.ResolvableSerializer
  - com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitable
  - com.fasterxml.jackson.databind.jsonschema.SchemaAware
  inheritedMembers:
  - com.fasterxml.jackson.databind.JsonSerializer.getDelegatee()
  - com.fasterxml.jackson.databind.JsonSerializer.isEmpty(T)
  - com.fasterxml.jackson.databind.JsonSerializer.isEmpty(com.fasterxml.jackson.databind.SerializerProvider,T)
  - com.fasterxml.jackson.databind.JsonSerializer.isUnwrappingSerializer()
  - com.fasterxml.jackson.databind.JsonSerializer.properties()
  - com.fasterxml.jackson.databind.JsonSerializer.replaceDelegatee(com.fasterxml.jackson.databind.JsonSerializer<?>)
  - com.fasterxml.jackson.databind.JsonSerializer.serializeWithType(T,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.jsontype.TypeSerializer)
  - com.fasterxml.jackson.databind.JsonSerializer.unwrappingSerializer(com.fasterxml.jackson.databind.util.NameTransformer)
  - com.fasterxml.jackson.databind.JsonSerializer.usesObjectId()
  - com.fasterxml.jackson.databind.JsonSerializer.withFilterId(java.lang.Object)
  - com.fasterxml.jackson.databind.ser.std.StdSerializer._neitherNull(java.lang.Object,java.lang.Object)
  - com.fasterxml.jackson.databind.ser.std.StdSerializer._nonEmpty(java.util.Collection<?>)
  - com.fasterxml.jackson.databind.ser.std.StdSerializer.acceptJsonFormatVisitor(com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper,com.fasterxml.jackson.databind.JavaType)
  - com.fasterxml.jackson.databind.ser.std.StdSerializer.createSchemaNode(java.lang.String)
  - com.fasterxml.jackson.databind.ser.std.StdSerializer.createSchemaNode(java.lang.String,boolean)
  - com.fasterxml.jackson.databind.ser.std.StdSerializer.findAnnotatedContentSerializer(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.BeanProperty)
  - com.fasterxml.jackson.databind.ser.std.StdSerializer.findContextualConvertingSerializer(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.BeanProperty,com.fasterxml.jackson.databind.JsonSerializer<?>)
  - com.fasterxml.jackson.databind.ser.std.StdSerializer.findConvertingContentSerializer(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.BeanProperty,com.fasterxml.jackson.databind.JsonSerializer<?>)
  - com.fasterxml.jackson.databind.ser.std.StdSerializer.findFormatFeature(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.BeanProperty,java.lang.Class<?>,com.fasterxml.jackson.annotation.JsonFormat.Feature)
  - com.fasterxml.jackson.databind.ser.std.StdSerializer.findFormatOverrides(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.BeanProperty,java.lang.Class<?>)
  - com.fasterxml.jackson.databind.ser.std.StdSerializer.findIncludeOverrides(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.BeanProperty,java.lang.Class<?>)
  - com.fasterxml.jackson.databind.ser.std.StdSerializer.findPropertyFilter(com.fasterxml.jackson.databind.SerializerProvider,java.lang.Object,java.lang.Object)
  - com.fasterxml.jackson.databind.ser.std.StdSerializer.getSchema(com.fasterxml.jackson.databind.SerializerProvider,java.lang.reflect.Type)
  - com.fasterxml.jackson.databind.ser.std.StdSerializer.getSchema(com.fasterxml.jackson.databind.SerializerProvider,java.lang.reflect.Type,boolean)
  - com.fasterxml.jackson.databind.ser.std.StdSerializer.handledType()
  - com.fasterxml.jackson.databind.ser.std.StdSerializer.isDefaultSerializer(com.fasterxml.jackson.databind.JsonSerializer<?>)
  - com.fasterxml.jackson.databind.ser.std.StdSerializer.serialize(T,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)
  - com.fasterxml.jackson.databind.ser.std.StdSerializer.visitArrayFormat(com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.JsonSerializer<?>,com.fasterxml.jackson.databind.JavaType)
  - com.fasterxml.jackson.databind.ser.std.StdSerializer.visitArrayFormat(com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatTypes)
  - com.fasterxml.jackson.databind.ser.std.StdSerializer.visitFloatFormat(com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.core.JsonParser.NumberType)
  - com.fasterxml.jackson.databind.ser.std.StdSerializer.visitIntFormat(com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.core.JsonParser.NumberType)
  - com.fasterxml.jackson.databind.ser.std.StdSerializer.visitIntFormat(com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.core.JsonParser.NumberType,com.fasterxml.jackson.databind.jsonFormatVisitors.JsonValueFormat)
  - com.fasterxml.jackson.databind.ser.std.StdSerializer.visitStringFormat(com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper,com.fasterxml.jackson.databind.JavaType)
  - com.fasterxml.jackson.databind.ser.std.StdSerializer.visitStringFormat(com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.jsonFormatVisitors.JsonValueFormat)
  - com.fasterxml.jackson.databind.ser.std.StdSerializer.wrapAndThrow(com.fasterxml.jackson.databind.SerializerProvider,java.lang.Throwable,java.lang.Object,int)
  - com.fasterxml.jackson.databind.ser.std.StdSerializer.wrapAndThrow(com.fasterxml.jackson.databind.SerializerProvider,java.lang.Throwable,java.lang.Object,java.lang.String)
  - java.lang.Object.clone()
  - java.lang.Object.equals(java.lang.Object)
  - java.lang.Object.finalize()
  - java.lang.Object.getClass()
  - java.lang.Object.hashCode()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.toString()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
- uid: com.fasterxml.jackson.databind.ser.std.StdDelegatingSerializer.<T>StdDelegatingSerializer(java.lang.Class<T>,com.fasterxml.jackson.databind.util.Converter<T,?>)
  id: <T>StdDelegatingSerializer(java.lang.Class<T>,com.fasterxml.jackson.databind.util.Converter<T,?>)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.std.StdDelegatingSerializer
  langs:
  - java
  name: <T>StdDelegatingSerializer(Class<T> cls, Converter<T,?> converter)
  nameWithType: StdDelegatingSerializer.<T>StdDelegatingSerializer(Class<T> cls, Converter<T,?> converter)
  fullName: com.fasterxml.jackson.databind.ser.std.StdDelegatingSerializer.<T>StdDelegatingSerializer(Class<T> cls, Converter<T,?> converter)
  overload: com.fasterxml.jackson.databind.ser.std.StdDelegatingSerializer.StdDelegatingSerializer*
  type: Constructor
  package: com.fasterxml.jackson.databind.ser.std
  syntax:
    content: public <T>StdDelegatingSerializer(Class<T> cls, Converter<T,?> converter)
    parameters:
    - id: cls
      type: java.lang.Class<T>
    - id: converter
      type: com.fasterxml.jackson.databind.util.Converter<T,?>
- uid: com.fasterxml.jackson.databind.ser.std.StdDelegatingSerializer.StdDelegatingSerializer(com.fasterxml.jackson.databind.util.Converter<?,?>)
  id: StdDelegatingSerializer(com.fasterxml.jackson.databind.util.Converter<?,?>)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.std.StdDelegatingSerializer
  langs:
  - java
  name: StdDelegatingSerializer(Converter<?,?> converter)
  nameWithType: StdDelegatingSerializer.StdDelegatingSerializer(Converter<?,?> converter)
  fullName: com.fasterxml.jackson.databind.ser.std.StdDelegatingSerializer.StdDelegatingSerializer(Converter<?,?> converter)
  overload: com.fasterxml.jackson.databind.ser.std.StdDelegatingSerializer.StdDelegatingSerializer*
  type: Constructor
  package: com.fasterxml.jackson.databind.ser.std
  syntax:
    content: public StdDelegatingSerializer(Converter<?,?> converter)
    parameters:
    - id: converter
      type: com.fasterxml.jackson.databind.util.Converter<?,?>
- uid: com.fasterxml.jackson.databind.ser.std.StdDelegatingSerializer.StdDelegatingSerializer(com.fasterxml.jackson.databind.util.Converter<java.lang.Object,?>,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.JsonSerializer<?>)
  id: StdDelegatingSerializer(com.fasterxml.jackson.databind.util.Converter<java.lang.Object,?>,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.JsonSerializer<?>)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.std.StdDelegatingSerializer
  langs:
  - java
  name: StdDelegatingSerializer(Converter<Object,?> converter, JavaType delegateType, JsonSerializer<?> delegateSerializer)
  nameWithType: StdDelegatingSerializer.StdDelegatingSerializer(Converter<Object,?> converter, JavaType delegateType, JsonSerializer<?> delegateSerializer)
  fullName: com.fasterxml.jackson.databind.ser.std.StdDelegatingSerializer.StdDelegatingSerializer(Converter<Object,?> converter, JavaType delegateType, JsonSerializer<?> delegateSerializer)
  overload: com.fasterxml.jackson.databind.ser.std.StdDelegatingSerializer.StdDelegatingSerializer*
  type: Constructor
  package: com.fasterxml.jackson.databind.ser.std
  syntax:
    content: public StdDelegatingSerializer(Converter<Object,?> converter, JavaType delegateType, JsonSerializer<?> delegateSerializer)
    parameters:
    - id: converter
      type: com.fasterxml.jackson.databind.util.Converter<java.lang.Object,?>
    - id: delegateType
      type: com.fasterxml.jackson.databind.JavaType
    - id: delegateSerializer
      type: com.fasterxml.jackson.databind.JsonSerializer<?>
- uid: com.fasterxml.jackson.databind.ser.std.StdDelegatingSerializer._converter
  id: _converter
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.std.StdDelegatingSerializer
  langs:
  - java
  name: _converter
  nameWithType: StdDelegatingSerializer._converter
  fullName: com.fasterxml.jackson.databind.ser.std.StdDelegatingSerializer._converter
  type: Field
  package: com.fasterxml.jackson.databind.ser.std
  syntax:
    content: protected final Converter<Object,?> _converter
    return:
      type: com.fasterxml.jackson.databind.util.Converter<java.lang.Object,?>
- uid: com.fasterxml.jackson.databind.ser.std.StdDelegatingSerializer._delegateSerializer
  id: _delegateSerializer
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.std.StdDelegatingSerializer
  langs:
  - java
  name: _delegateSerializer
  nameWithType: StdDelegatingSerializer._delegateSerializer
  fullName: com.fasterxml.jackson.databind.ser.std.StdDelegatingSerializer._delegateSerializer
  type: Field
  package: com.fasterxml.jackson.databind.ser.std
  summary: Underlying serializer for type `T`.
  syntax:
    content: protected final JsonSerializer<Object> _delegateSerializer
    return:
      type: com.fasterxml.jackson.databind.JsonSerializer<java.lang.Object>
- uid: com.fasterxml.jackson.databind.ser.std.StdDelegatingSerializer._delegateType
  id: _delegateType
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.std.StdDelegatingSerializer
  langs:
  - java
  name: _delegateType
  nameWithType: StdDelegatingSerializer._delegateType
  fullName: com.fasterxml.jackson.databind.ser.std.StdDelegatingSerializer._delegateType
  type: Field
  package: com.fasterxml.jackson.databind.ser.std
  summary: Fully resolved delegate type, with generic information if any available.
  syntax:
    content: protected final JavaType _delegateType
    return:
      type: com.fasterxml.jackson.databind.JavaType
- uid: com.fasterxml.jackson.databind.ser.std.StdDelegatingSerializer._findSerializer(java.lang.Object,com.fasterxml.jackson.databind.SerializerProvider)
  id: _findSerializer(java.lang.Object,com.fasterxml.jackson.databind.SerializerProvider)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.std.StdDelegatingSerializer
  langs:
  - java
  name: _findSerializer(Object value, SerializerProvider serializers)
  nameWithType: StdDelegatingSerializer._findSerializer(Object value, SerializerProvider serializers)
  fullName: com.fasterxml.jackson.databind.ser.std.StdDelegatingSerializer._findSerializer(Object value, SerializerProvider serializers)
  overload: com.fasterxml.jackson.databind.ser.std.StdDelegatingSerializer._findSerializer*
  type: Method
  package: com.fasterxml.jackson.databind.ser.std
  summary: Helper method used for locating serializer to use in dynamic use case, where actual type value gets converted to is not specified beyond basic <xref uid="java.lang.Object" data-throw-if-not-resolved="false">java.lang.Object</xref>, and where serializer needs to be located dynamically based on actual value type.
  syntax:
    content: protected JsonSerializer<Object> _findSerializer(Object value, SerializerProvider serializers)
    parameters:
    - id: value
      type: java.lang.Object
    - id: serializers
      type: com.fasterxml.jackson.databind.SerializerProvider
    return:
      type: com.fasterxml.jackson.databind.JsonSerializer<java.lang.Object>
  exceptions:
  - type: com.fasterxml.jackson.databind.JsonMappingException
- uid: com.fasterxml.jackson.databind.ser.std.StdDelegatingSerializer.acceptJsonFormatVisitor(com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper,com.fasterxml.jackson.databind.JavaType)
  id: acceptJsonFormatVisitor(com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper,com.fasterxml.jackson.databind.JavaType)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.std.StdDelegatingSerializer
  langs:
  - java
  name: acceptJsonFormatVisitor(jsonFormatVisitors.JsonFormatVisitorWrapper visitor, JavaType typeHint)
  nameWithType: StdDelegatingSerializer.acceptJsonFormatVisitor(jsonFormatVisitors.JsonFormatVisitorWrapper visitor, JavaType typeHint)
  fullName: com.fasterxml.jackson.databind.ser.std.StdDelegatingSerializer.acceptJsonFormatVisitor(jsonFormatVisitors.JsonFormatVisitorWrapper visitor, JavaType typeHint)
  overload: com.fasterxml.jackson.databind.ser.std.StdDelegatingSerializer.acceptJsonFormatVisitor*
  type: Method
  package: com.fasterxml.jackson.databind.ser.std
  summary: Default implementation specifies no format. This behavior is usually overriden by custom serializers.
  syntax:
    content: public void acceptJsonFormatVisitor(jsonFormatVisitors.JsonFormatVisitorWrapper visitor, JavaType typeHint)
    parameters:
    - id: visitor
      type: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper
    - id: typeHint
      type: com.fasterxml.jackson.databind.JavaType
  exceptions:
  - type: com.fasterxml.jackson.databind.JsonMappingException
- uid: com.fasterxml.jackson.databind.ser.std.StdDelegatingSerializer.convertValue(java.lang.Object)
  id: convertValue(java.lang.Object)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.std.StdDelegatingSerializer
  langs:
  - java
  name: convertValue(Object value)
  nameWithType: StdDelegatingSerializer.convertValue(Object value)
  fullName: com.fasterxml.jackson.databind.ser.std.StdDelegatingSerializer.convertValue(Object value)
  overload: com.fasterxml.jackson.databind.ser.std.StdDelegatingSerializer.convertValue*
  type: Method
  package: com.fasterxml.jackson.databind.ser.std
  summary: >-
    Method called to convert from source Java value into delegate value (which will be serialized using standard Jackson serializer for delegate type)


    The default implementation uses configured <xref uid="com.fasterxml.jackson.databind.util.Converter" data-throw-if-not-resolved="false">Converter</xref> to do conversion.
  syntax:
    content: protected Object convertValue(Object value)
    parameters:
    - id: value
      type: java.lang.Object
      description: Value to convert
    return:
      type: java.lang.Object
      description: Result of conversion
- uid: com.fasterxml.jackson.databind.ser.std.StdDelegatingSerializer.createContextual(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.BeanProperty)
  id: createContextual(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.BeanProperty)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.std.StdDelegatingSerializer
  langs:
  - java
  name: createContextual(SerializerProvider provider, BeanProperty property)
  nameWithType: StdDelegatingSerializer.createContextual(SerializerProvider provider, BeanProperty property)
  fullName: com.fasterxml.jackson.databind.ser.std.StdDelegatingSerializer.createContextual(SerializerProvider provider, BeanProperty property)
  overload: com.fasterxml.jackson.databind.ser.std.StdDelegatingSerializer.createContextual*
  type: Method
  package: com.fasterxml.jackson.databind.ser.std
  summary: Method called to see if a different (or differently configured) serializer is needed to serialize values of specified property. Note that instance that this method is called on is typically shared one and as a result method should **NOT** modify this instance but rather construct and return a new instance. This instance should only be returned as-is, in case it is already suitable for use.
  syntax:
    content: public JsonSerializer<?> createContextual(SerializerProvider provider, BeanProperty property)
    parameters:
    - id: provider
      type: com.fasterxml.jackson.databind.SerializerProvider
    - id: property
      type: com.fasterxml.jackson.databind.BeanProperty
    return:
      type: com.fasterxml.jackson.databind.JsonSerializer<?>
  exceptions:
  - type: com.fasterxml.jackson.databind.JsonMappingException
- uid: com.fasterxml.jackson.databind.ser.std.StdDelegatingSerializer.getConverter()
  id: getConverter()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.std.StdDelegatingSerializer
  langs:
  - java
  name: getConverter()
  nameWithType: StdDelegatingSerializer.getConverter()
  fullName: com.fasterxml.jackson.databind.ser.std.StdDelegatingSerializer.getConverter()
  overload: com.fasterxml.jackson.databind.ser.std.StdDelegatingSerializer.getConverter*
  type: Method
  package: com.fasterxml.jackson.databind.ser.std
  syntax:
    content: protected Converter<Object,?> getConverter()
    return:
      type: com.fasterxml.jackson.databind.util.Converter<java.lang.Object,?>
- uid: com.fasterxml.jackson.databind.ser.std.StdDelegatingSerializer.getDelegatee()
  id: getDelegatee()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.std.StdDelegatingSerializer
  langs:
  - java
  name: getDelegatee()
  nameWithType: StdDelegatingSerializer.getDelegatee()
  fullName: com.fasterxml.jackson.databind.ser.std.StdDelegatingSerializer.getDelegatee()
  overload: com.fasterxml.jackson.databind.ser.std.StdDelegatingSerializer.getDelegatee*
  type: Method
  package: com.fasterxml.jackson.databind.ser.std
  summary: Accessor that can be used to determine if this serializer uses another serializer for actual serialization, by delegating calls. If so, will return immediate delegate (which itself may delegate to further serializers); otherwise will return null.
  syntax:
    content: public JsonSerializer<?> getDelegatee()
    return:
      type: com.fasterxml.jackson.databind.JsonSerializer<?>
- uid: com.fasterxml.jackson.databind.ser.std.StdDelegatingSerializer.getSchema(com.fasterxml.jackson.databind.SerializerProvider,java.lang.reflect.Type)
  id: getSchema(com.fasterxml.jackson.databind.SerializerProvider,java.lang.reflect.Type)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.std.StdDelegatingSerializer
  langs:
  - java
  name: getSchema(SerializerProvider provider, Type typeHint)
  nameWithType: StdDelegatingSerializer.getSchema(SerializerProvider provider, Type typeHint)
  fullName: com.fasterxml.jackson.databind.ser.std.StdDelegatingSerializer.getSchema(SerializerProvider provider, Type typeHint)
  overload: com.fasterxml.jackson.databind.ser.std.StdDelegatingSerializer.getSchema*
  type: Method
  package: com.fasterxml.jackson.databind.ser.std
  summary: Default implementation simply claims type is "string"; usually overriden by custom serializers.
  syntax:
    content: public JsonNode getSchema(SerializerProvider provider, Type typeHint)
    parameters:
    - id: provider
      type: com.fasterxml.jackson.databind.SerializerProvider
    - id: typeHint
      type: java.lang.reflect.Type
    return:
      type: com.fasterxml.jackson.databind.JsonNode
  exceptions:
  - type: com.fasterxml.jackson.databind.JsonMappingException
- uid: com.fasterxml.jackson.databind.ser.std.StdDelegatingSerializer.getSchema(com.fasterxml.jackson.databind.SerializerProvider,java.lang.reflect.Type,boolean)
  id: getSchema(com.fasterxml.jackson.databind.SerializerProvider,java.lang.reflect.Type,boolean)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.std.StdDelegatingSerializer
  langs:
  - java
  name: getSchema(SerializerProvider provider, Type typeHint, boolean isOptional)
  nameWithType: StdDelegatingSerializer.getSchema(SerializerProvider provider, Type typeHint, boolean isOptional)
  fullName: com.fasterxml.jackson.databind.ser.std.StdDelegatingSerializer.getSchema(SerializerProvider provider, Type typeHint, boolean isOptional)
  overload: com.fasterxml.jackson.databind.ser.std.StdDelegatingSerializer.getSchema*
  type: Method
  package: com.fasterxml.jackson.databind.ser.std
  summary: Default implementation simply claims type is "string"; usually overriden by custom serializers.
  syntax:
    content: public JsonNode getSchema(SerializerProvider provider, Type typeHint, boolean isOptional)
    parameters:
    - id: provider
      type: com.fasterxml.jackson.databind.SerializerProvider
    - id: typeHint
      type: java.lang.reflect.Type
    - id: isOptional
      type: boolean
    return:
      type: com.fasterxml.jackson.databind.JsonNode
  exceptions:
  - type: com.fasterxml.jackson.databind.JsonMappingException
- uid: com.fasterxml.jackson.databind.ser.std.StdDelegatingSerializer.isEmpty(com.fasterxml.jackson.databind.SerializerProvider,java.lang.Object)
  id: isEmpty(com.fasterxml.jackson.databind.SerializerProvider,java.lang.Object)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.std.StdDelegatingSerializer
  langs:
  - java
  name: isEmpty(SerializerProvider prov, Object value)
  nameWithType: StdDelegatingSerializer.isEmpty(SerializerProvider prov, Object value)
  fullName: com.fasterxml.jackson.databind.ser.std.StdDelegatingSerializer.isEmpty(SerializerProvider prov, Object value)
  overload: com.fasterxml.jackson.databind.ser.std.StdDelegatingSerializer.isEmpty*
  type: Method
  package: com.fasterxml.jackson.databind.ser.std
  summary: >-
    Method called to check whether given serializable value is considered "empty" value (for purposes of suppressing serialization of empty values).


    Default implementation will consider only null values to be empty.


    NOTE: replaces <xref uid="com.fasterxml.jackson.databind.ser.std.StdDelegatingSerializer.isEmpty*" data-throw-if-not-resolved="false">#isEmpty(Object)</xref>, which was deprecated in 2.5
  syntax:
    content: public boolean isEmpty(SerializerProvider prov, Object value)
    parameters:
    - id: prov
      type: com.fasterxml.jackson.databind.SerializerProvider
    - id: value
      type: java.lang.Object
    return:
      type: boolean
- uid: com.fasterxml.jackson.databind.ser.std.StdDelegatingSerializer.resolve(com.fasterxml.jackson.databind.SerializerProvider)
  id: resolve(com.fasterxml.jackson.databind.SerializerProvider)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.std.StdDelegatingSerializer
  langs:
  - java
  name: resolve(SerializerProvider provider)
  nameWithType: StdDelegatingSerializer.resolve(SerializerProvider provider)
  fullName: com.fasterxml.jackson.databind.ser.std.StdDelegatingSerializer.resolve(SerializerProvider provider)
  overload: com.fasterxml.jackson.databind.ser.std.StdDelegatingSerializer.resolve*
  type: Method
  package: com.fasterxml.jackson.databind.ser.std
  summary: >-
    Method called after <xref uid="com.fasterxml.jackson.databind.SerializerProvider" data-throw-if-not-resolved="false">SerializerProvider</xref> has registered the serializer, but before it has returned it to the caller. Called object can then resolve its dependencies to other types, including self-references (direct or indirect).


    Note that this method does NOT return serializer, since resolution is not allowed to change actual serializer to use.
  syntax:
    content: public void resolve(SerializerProvider provider)
    parameters:
    - id: provider
      type: com.fasterxml.jackson.databind.SerializerProvider
  exceptions:
  - type: com.fasterxml.jackson.databind.JsonMappingException
- uid: com.fasterxml.jackson.databind.ser.std.StdDelegatingSerializer.serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)
  id: serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.std.StdDelegatingSerializer
  langs:
  - java
  name: serialize(Object value, JsonGenerator gen, SerializerProvider provider)
  nameWithType: StdDelegatingSerializer.serialize(Object value, JsonGenerator gen, SerializerProvider provider)
  fullName: com.fasterxml.jackson.databind.ser.std.StdDelegatingSerializer.serialize(Object value, JsonGenerator gen, SerializerProvider provider)
  overload: com.fasterxml.jackson.databind.ser.std.StdDelegatingSerializer.serialize*
  type: Method
  package: com.fasterxml.jackson.databind.ser.std
  summary: Method that can be called to ask implementation to serialize values of type this serializer handles.
  syntax:
    content: public void serialize(Object value, JsonGenerator gen, SerializerProvider provider)
    parameters:
    - id: value
      type: java.lang.Object
    - id: gen
      type: com.fasterxml.jackson.core.JsonGenerator
    - id: provider
      type: com.fasterxml.jackson.databind.SerializerProvider
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.databind.ser.std.StdDelegatingSerializer.serializeWithType(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.jsontype.TypeSerializer)
  id: serializeWithType(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.jsontype.TypeSerializer)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.std.StdDelegatingSerializer
  langs:
  - java
  name: serializeWithType(Object value, JsonGenerator gen, SerializerProvider provider, TypeSerializer typeSer)
  nameWithType: StdDelegatingSerializer.serializeWithType(Object value, JsonGenerator gen, SerializerProvider provider, TypeSerializer typeSer)
  fullName: com.fasterxml.jackson.databind.ser.std.StdDelegatingSerializer.serializeWithType(Object value, JsonGenerator gen, SerializerProvider provider, TypeSerializer typeSer)
  overload: com.fasterxml.jackson.databind.ser.std.StdDelegatingSerializer.serializeWithType*
  type: Method
  package: com.fasterxml.jackson.databind.ser.std
  summary: >-
    Method that can be called to ask implementation to serialize values of type this serializer handles, using specified type serializer for embedding necessary type information.


    Default implementation will throw <xref uid="" data-throw-if-not-resolved="false">UnsupportedOperationException</xref> to indicate that proper type handling needs to be implemented.


    For simple datatypes written as a single scalar value (JSON String, Number, Boolean), implementation would look like:


    ```java

    // note: method to call depends on whether this type is serialized as JSON scalar, object or Array!
      typeSer.writeTypePrefixForScalar(value, gen);
      serialize(value, gen, provider);
      typeSer.writeTypeSuffixForScalar(value, gen);
    ```


    and implementations for type serialized as JSON Arrays or Objects would differ slightly, as `START-ARRAY`/`END-ARRAY` and `START-OBJECT`/`END-OBJECT` pairs need to be properly handled with respect to serializing of contents.
  syntax:
    content: public void serializeWithType(Object value, JsonGenerator gen, SerializerProvider provider, TypeSerializer typeSer)
    parameters:
    - id: value
      type: java.lang.Object
    - id: gen
      type: com.fasterxml.jackson.core.JsonGenerator
    - id: provider
      type: com.fasterxml.jackson.databind.SerializerProvider
    - id: typeSer
      type: com.fasterxml.jackson.databind.jsontype.TypeSerializer
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.databind.ser.std.StdDelegatingSerializer.withDelegate(com.fasterxml.jackson.databind.util.Converter<java.lang.Object,?>,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.JsonSerializer<?>)
  id: withDelegate(com.fasterxml.jackson.databind.util.Converter<java.lang.Object,?>,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.JsonSerializer<?>)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.std.StdDelegatingSerializer
  langs:
  - java
  name: withDelegate(Converter<Object,?> converter, JavaType delegateType, JsonSerializer<?> delegateSerializer)
  nameWithType: StdDelegatingSerializer.withDelegate(Converter<Object,?> converter, JavaType delegateType, JsonSerializer<?> delegateSerializer)
  fullName: com.fasterxml.jackson.databind.ser.std.StdDelegatingSerializer.withDelegate(Converter<Object,?> converter, JavaType delegateType, JsonSerializer<?> delegateSerializer)
  overload: com.fasterxml.jackson.databind.ser.std.StdDelegatingSerializer.withDelegate*
  type: Method
  package: com.fasterxml.jackson.databind.ser.std
  summary: Method used for creating resolved contextual instances. Must be overridden when sub-classing.
  syntax:
    content: protected StdDelegatingSerializer withDelegate(Converter<Object,?> converter, JavaType delegateType, JsonSerializer<?> delegateSerializer)
    parameters:
    - id: converter
      type: com.fasterxml.jackson.databind.util.Converter<java.lang.Object,?>
    - id: delegateType
      type: com.fasterxml.jackson.databind.JavaType
    - id: delegateSerializer
      type: com.fasterxml.jackson.databind.JsonSerializer<?>
    return:
      type: com.fasterxml.jackson.databind.ser.std.StdDelegatingSerializer
references:
- uid: com.fasterxml.jackson.databind.util.Converter<?,?>
  spec.java:
  - uid: com.fasterxml.jackson.databind.util.Converter
    name: Converter
    fullName: com.fasterxml.jackson.databind.util.Converter
  - name: <
    fullName: <
  - uid: '?'
    name: '?'
    fullName: '?'
  - name: ','
    fullName: ','
  - uid: '?'
    name: '?'
    fullName: '?'
  - name: '>'
    fullName: '>'
- uid: com.fasterxml.jackson.databind.ser.std.StdDelegatingSerializer.StdDelegatingSerializer*
  name: StdDelegatingSerializer
  nameWithType: StdDelegatingSerializer.StdDelegatingSerializer
  fullName: com.fasterxml.jackson.databind.ser.std.StdDelegatingSerializer.StdDelegatingSerializer
  package: com.fasterxml.jackson.databind.ser.std
- uid: java.lang.Class<T>
  spec.java:
  - uid: java.lang.Class
    name: Class
    fullName: java.lang.Class
  - name: <
    fullName: <
  - uid: T
    name: T
    fullName: T
  - name: '>'
    fullName: '>'
- uid: com.fasterxml.jackson.databind.util.Converter<T,?>
  spec.java:
  - uid: com.fasterxml.jackson.databind.util.Converter
    name: Converter
    fullName: com.fasterxml.jackson.databind.util.Converter
  - name: <
    fullName: <
  - uid: T
    name: T
    fullName: T
  - name: ','
    fullName: ','
  - uid: '?'
    name: '?'
    fullName: '?'
  - name: '>'
    fullName: '>'
- uid: com.fasterxml.jackson.databind.util.Converter<java.lang.Object,?>
  spec.java:
  - uid: com.fasterxml.jackson.databind.util.Converter
    name: Converter
    fullName: com.fasterxml.jackson.databind.util.Converter
  - name: <
    fullName: <
  - uid: java.lang.Object
    name: Object
    fullName: java.lang.Object
  - name: ','
    fullName: ','
  - uid: '?'
    name: '?'
    fullName: '?'
  - name: '>'
    fullName: '>'
- uid: com.fasterxml.jackson.databind.JavaType
  name: JavaType
  nameWithType: JavaType
  fullName: com.fasterxml.jackson.databind.JavaType
- uid: com.fasterxml.jackson.databind.JsonSerializer<?>
  spec.java:
  - uid: com.fasterxml.jackson.databind.JsonSerializer
    name: JsonSerializer
    fullName: com.fasterxml.jackson.databind.JsonSerializer
  - name: <
    fullName: <
  - uid: '?'
    name: '?'
    fullName: '?'
  - name: '>'
    fullName: '>'
- uid: com.fasterxml.jackson.databind.ser.std.StdDelegatingSerializer.withDelegate*
  name: withDelegate
  nameWithType: StdDelegatingSerializer.withDelegate
  fullName: com.fasterxml.jackson.databind.ser.std.StdDelegatingSerializer.withDelegate
  package: com.fasterxml.jackson.databind.ser.std
- uid: com.fasterxml.jackson.databind.JsonMappingException
  name: JsonMappingException
  nameWithType: JsonMappingException
  fullName: com.fasterxml.jackson.databind.JsonMappingException
- uid: com.fasterxml.jackson.databind.SerializerProvider
  name: SerializerProvider
  nameWithType: SerializerProvider
  fullName: com.fasterxml.jackson.databind.SerializerProvider
- uid: com.fasterxml.jackson.databind.ser.std.StdDelegatingSerializer.resolve*
  name: resolve
  nameWithType: StdDelegatingSerializer.resolve
  fullName: com.fasterxml.jackson.databind.ser.std.StdDelegatingSerializer.resolve
  package: com.fasterxml.jackson.databind.ser.std
- uid: com.fasterxml.jackson.databind.BeanProperty
  name: BeanProperty
  nameWithType: BeanProperty
  fullName: com.fasterxml.jackson.databind.BeanProperty
- uid: com.fasterxml.jackson.databind.ser.std.StdDelegatingSerializer.createContextual*
  name: createContextual
  nameWithType: StdDelegatingSerializer.createContextual
  fullName: com.fasterxml.jackson.databind.ser.std.StdDelegatingSerializer.createContextual
  package: com.fasterxml.jackson.databind.ser.std
- uid: com.fasterxml.jackson.databind.ser.std.StdDelegatingSerializer.getConverter*
  name: getConverter
  nameWithType: StdDelegatingSerializer.getConverter
  fullName: com.fasterxml.jackson.databind.ser.std.StdDelegatingSerializer.getConverter
  package: com.fasterxml.jackson.databind.ser.std
- uid: com.fasterxml.jackson.databind.ser.std.StdDelegatingSerializer.getDelegatee*
  name: getDelegatee
  nameWithType: StdDelegatingSerializer.getDelegatee
  fullName: com.fasterxml.jackson.databind.ser.std.StdDelegatingSerializer.getDelegatee
  package: com.fasterxml.jackson.databind.ser.std
- uid: java.io.IOException
  spec.java:
  - uid: java.io.IOException
    name: IOException
    fullName: java.io.IOException
- uid: java.lang.Object
  spec.java:
  - uid: java.lang.Object
    name: Object
    fullName: java.lang.Object
- uid: com.fasterxml.jackson.core.JsonGenerator
  name: JsonGenerator
  nameWithType: JsonGenerator
  fullName: com.fasterxml.jackson.core.JsonGenerator
- uid: com.fasterxml.jackson.databind.ser.std.StdDelegatingSerializer.serialize*
  name: serialize
  nameWithType: StdDelegatingSerializer.serialize
  fullName: com.fasterxml.jackson.databind.ser.std.StdDelegatingSerializer.serialize
  package: com.fasterxml.jackson.databind.ser.std
- uid: com.fasterxml.jackson.databind.jsontype.TypeSerializer
  name: TypeSerializer
  nameWithType: TypeSerializer
  fullName: com.fasterxml.jackson.databind.jsontype.TypeSerializer
- uid: com.fasterxml.jackson.databind.ser.std.StdDelegatingSerializer.serializeWithType*
  name: serializeWithType
  nameWithType: StdDelegatingSerializer.serializeWithType
  fullName: com.fasterxml.jackson.databind.ser.std.StdDelegatingSerializer.serializeWithType
  package: com.fasterxml.jackson.databind.ser.std
- uid: boolean
  spec.java:
  - uid: boolean
    name: boolean
    fullName: boolean
- uid: com.fasterxml.jackson.databind.ser.std.StdDelegatingSerializer.isEmpty*
  name: isEmpty
  nameWithType: StdDelegatingSerializer.isEmpty
  fullName: com.fasterxml.jackson.databind.ser.std.StdDelegatingSerializer.isEmpty
  package: com.fasterxml.jackson.databind.ser.std
- uid: java.lang.reflect.Type
  spec.java:
  - uid: java.lang.reflect.Type
    name: Type
    fullName: java.lang.reflect.Type
- uid: com.fasterxml.jackson.databind.JsonNode
  name: JsonNode
  nameWithType: JsonNode
  fullName: com.fasterxml.jackson.databind.JsonNode
- uid: com.fasterxml.jackson.databind.ser.std.StdDelegatingSerializer.getSchema*
  name: getSchema
  nameWithType: StdDelegatingSerializer.getSchema
  fullName: com.fasterxml.jackson.databind.ser.std.StdDelegatingSerializer.getSchema
  package: com.fasterxml.jackson.databind.ser.std
- uid: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper
  name: jsonFormatVisitors.JsonFormatVisitorWrapper
  nameWithType: jsonFormatVisitors.JsonFormatVisitorWrapper
  fullName: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper
- uid: com.fasterxml.jackson.databind.ser.std.StdDelegatingSerializer.acceptJsonFormatVisitor*
  name: acceptJsonFormatVisitor
  nameWithType: StdDelegatingSerializer.acceptJsonFormatVisitor
  fullName: com.fasterxml.jackson.databind.ser.std.StdDelegatingSerializer.acceptJsonFormatVisitor
  package: com.fasterxml.jackson.databind.ser.std
- uid: com.fasterxml.jackson.databind.ser.std.StdDelegatingSerializer.convertValue*
  name: convertValue
  nameWithType: StdDelegatingSerializer.convertValue
  fullName: com.fasterxml.jackson.databind.ser.std.StdDelegatingSerializer.convertValue
  package: com.fasterxml.jackson.databind.ser.std
- uid: com.fasterxml.jackson.databind.JsonSerializer<java.lang.Object>
  spec.java:
  - uid: com.fasterxml.jackson.databind.JsonSerializer
    name: JsonSerializer
    fullName: com.fasterxml.jackson.databind.JsonSerializer
  - name: <
    fullName: <
  - uid: java.lang.Object
    name: Object
    fullName: java.lang.Object
  - name: '>'
    fullName: '>'
- uid: com.fasterxml.jackson.databind.ser.std.StdDelegatingSerializer._findSerializer*
  name: _findSerializer
  nameWithType: StdDelegatingSerializer._findSerializer
  fullName: com.fasterxml.jackson.databind.ser.std.StdDelegatingSerializer._findSerializer
  package: com.fasterxml.jackson.databind.ser.std
- uid: com.fasterxml.jackson.databind.ser.std.StdSerializer<java.lang.Object>
  name: StdSerializer<Object>
  nameWithType: StdSerializer<Object>
  fullName: com.fasterxml.jackson.databind.ser.std.StdSerializer<java.lang.Object>
- uid: com.fasterxml.jackson.databind.jsonschema.SchemaAware
  name: SchemaAware
  nameWithType: SchemaAware
  fullName: com.fasterxml.jackson.databind.jsonschema.SchemaAware
- uid: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitable
  name: jsonFormatVisitors.JsonFormatVisitable
  nameWithType: jsonFormatVisitors.JsonFormatVisitable
  fullName: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitable
- uid: com.fasterxml.jackson.databind.ser.ContextualSerializer
  name: ContextualSerializer
  nameWithType: ContextualSerializer
  fullName: com.fasterxml.jackson.databind.ser.ContextualSerializer
- uid: com.fasterxml.jackson.databind.ser.ResolvableSerializer
  name: ResolvableSerializer
  nameWithType: ResolvableSerializer
  fullName: com.fasterxml.jackson.databind.ser.ResolvableSerializer
- uid: com.fasterxml.jackson.databind.ser.std.StdSerializer.findFormatFeature(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.BeanProperty,java.lang.Class<?>,com.fasterxml.jackson.annotation.JsonFormat.Feature)
  name: StdSerializer.findFormatFeature(SerializerProvider,BeanProperty,Class<?>,JsonFormat.Feature)
  nameWithType: StdSerializer.findFormatFeature(SerializerProvider,BeanProperty,Class<?>,JsonFormat.Feature)
  fullName: com.fasterxml.jackson.databind.ser.std.StdSerializer.findFormatFeature(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.BeanProperty,java.lang.Class<?>,com.fasterxml.jackson.annotation.JsonFormat.Feature)
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: com.fasterxml.jackson.databind.JsonSerializer.isEmpty(com.fasterxml.jackson.databind.SerializerProvider,T)
  name: JsonSerializer.isEmpty(SerializerProvider,T)
  nameWithType: JsonSerializer.isEmpty(SerializerProvider,T)
  fullName: com.fasterxml.jackson.databind.JsonSerializer.isEmpty(com.fasterxml.jackson.databind.SerializerProvider,T)
- uid: java.lang.Object.finalize()
  name: Object.finalize()
  nameWithType: Object.finalize()
  fullName: java.lang.Object.finalize()
- uid: com.fasterxml.jackson.databind.JsonSerializer.properties()
  name: JsonSerializer.properties()
  nameWithType: JsonSerializer.properties()
  fullName: com.fasterxml.jackson.databind.JsonSerializer.properties()
- uid: com.fasterxml.jackson.databind.ser.std.StdSerializer.findIncludeOverrides(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.BeanProperty,java.lang.Class<?>)
  name: StdSerializer.findIncludeOverrides(SerializerProvider,BeanProperty,Class<?>)
  nameWithType: StdSerializer.findIncludeOverrides(SerializerProvider,BeanProperty,Class<?>)
  fullName: com.fasterxml.jackson.databind.ser.std.StdSerializer.findIncludeOverrides(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.BeanProperty,java.lang.Class<?>)
- uid: java.lang.Object.clone()
  name: Object.clone()
  nameWithType: Object.clone()
  fullName: java.lang.Object.clone()
- uid: com.fasterxml.jackson.databind.JsonSerializer.serializeWithType(T,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.jsontype.TypeSerializer)
  name: JsonSerializer.serializeWithType(T,JsonGenerator,SerializerProvider,TypeSerializer)
  nameWithType: JsonSerializer.serializeWithType(T,JsonGenerator,SerializerProvider,TypeSerializer)
  fullName: com.fasterxml.jackson.databind.JsonSerializer.serializeWithType(T,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.jsontype.TypeSerializer)
- uid: com.fasterxml.jackson.databind.ser.std.StdSerializer.findPropertyFilter(com.fasterxml.jackson.databind.SerializerProvider,java.lang.Object,java.lang.Object)
  name: StdSerializer.findPropertyFilter(SerializerProvider,Object,Object)
  nameWithType: StdSerializer.findPropertyFilter(SerializerProvider,Object,Object)
  fullName: com.fasterxml.jackson.databind.ser.std.StdSerializer.findPropertyFilter(com.fasterxml.jackson.databind.SerializerProvider,java.lang.Object,java.lang.Object)
- uid: com.fasterxml.jackson.databind.ser.std.StdSerializer.visitIntFormat(com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.core.JsonParser.NumberType)
  name: StdSerializer.visitIntFormat(jsonFormatVisitors.JsonFormatVisitorWrapper,JavaType,JsonParser.NumberType)
  nameWithType: StdSerializer.visitIntFormat(jsonFormatVisitors.JsonFormatVisitorWrapper,JavaType,JsonParser.NumberType)
  fullName: com.fasterxml.jackson.databind.ser.std.StdSerializer.visitIntFormat(com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.core.JsonParser.NumberType)
- uid: com.fasterxml.jackson.databind.ser.std.StdSerializer.serialize(T,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)
  name: StdSerializer.serialize(T,JsonGenerator,SerializerProvider)
  nameWithType: StdSerializer.serialize(T,JsonGenerator,SerializerProvider)
  fullName: com.fasterxml.jackson.databind.ser.std.StdSerializer.serialize(T,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)
- uid: com.fasterxml.jackson.databind.ser.std.StdSerializer.findConvertingContentSerializer(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.BeanProperty,com.fasterxml.jackson.databind.JsonSerializer<?>)
  name: StdSerializer.findConvertingContentSerializer(SerializerProvider,BeanProperty,JsonSerializer<?>)
  nameWithType: StdSerializer.findConvertingContentSerializer(SerializerProvider,BeanProperty,JsonSerializer<?>)
  fullName: com.fasterxml.jackson.databind.ser.std.StdSerializer.findConvertingContentSerializer(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.BeanProperty,com.fasterxml.jackson.databind.JsonSerializer<?>)
- uid: com.fasterxml.jackson.databind.JsonSerializer.getDelegatee()
  name: JsonSerializer.getDelegatee()
  nameWithType: JsonSerializer.getDelegatee()
  fullName: com.fasterxml.jackson.databind.JsonSerializer.getDelegatee()
- uid: com.fasterxml.jackson.databind.ser.std.StdSerializer.visitFloatFormat(com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.core.JsonParser.NumberType)
  name: StdSerializer.visitFloatFormat(jsonFormatVisitors.JsonFormatVisitorWrapper,JavaType,JsonParser.NumberType)
  nameWithType: StdSerializer.visitFloatFormat(jsonFormatVisitors.JsonFormatVisitorWrapper,JavaType,JsonParser.NumberType)
  fullName: com.fasterxml.jackson.databind.ser.std.StdSerializer.visitFloatFormat(com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.core.JsonParser.NumberType)
- uid: com.fasterxml.jackson.databind.ser.std.StdSerializer.acceptJsonFormatVisitor(com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper,com.fasterxml.jackson.databind.JavaType)
  name: StdSerializer.acceptJsonFormatVisitor(jsonFormatVisitors.JsonFormatVisitorWrapper,JavaType)
  nameWithType: StdSerializer.acceptJsonFormatVisitor(jsonFormatVisitors.JsonFormatVisitorWrapper,JavaType)
  fullName: com.fasterxml.jackson.databind.ser.std.StdSerializer.acceptJsonFormatVisitor(com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper,com.fasterxml.jackson.databind.JavaType)
- uid: com.fasterxml.jackson.databind.JsonSerializer.unwrappingSerializer(com.fasterxml.jackson.databind.util.NameTransformer)
  name: JsonSerializer.unwrappingSerializer(NameTransformer)
  nameWithType: JsonSerializer.unwrappingSerializer(NameTransformer)
  fullName: com.fasterxml.jackson.databind.JsonSerializer.unwrappingSerializer(com.fasterxml.jackson.databind.util.NameTransformer)
- uid: com.fasterxml.jackson.databind.ser.std.StdSerializer.wrapAndThrow(com.fasterxml.jackson.databind.SerializerProvider,java.lang.Throwable,java.lang.Object,int)
  name: StdSerializer.wrapAndThrow(SerializerProvider,Throwable,Object,int)
  nameWithType: StdSerializer.wrapAndThrow(SerializerProvider,Throwable,Object,int)
  fullName: com.fasterxml.jackson.databind.ser.std.StdSerializer.wrapAndThrow(com.fasterxml.jackson.databind.SerializerProvider,java.lang.Throwable,java.lang.Object,int)
- uid: com.fasterxml.jackson.databind.ser.std.StdSerializer.visitStringFormat(com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper,com.fasterxml.jackson.databind.JavaType)
  name: StdSerializer.visitStringFormat(jsonFormatVisitors.JsonFormatVisitorWrapper,JavaType)
  nameWithType: StdSerializer.visitStringFormat(jsonFormatVisitors.JsonFormatVisitorWrapper,JavaType)
  fullName: com.fasterxml.jackson.databind.ser.std.StdSerializer.visitStringFormat(com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper,com.fasterxml.jackson.databind.JavaType)
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: java.lang.Object.hashCode()
  name: Object.hashCode()
  nameWithType: Object.hashCode()
  fullName: java.lang.Object.hashCode()
- uid: com.fasterxml.jackson.databind.ser.std.StdSerializer.visitStringFormat(com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.jsonFormatVisitors.JsonValueFormat)
  name: StdSerializer.visitStringFormat(jsonFormatVisitors.JsonFormatVisitorWrapper,JavaType,jsonFormatVisitors.JsonValueFormat)
  nameWithType: StdSerializer.visitStringFormat(jsonFormatVisitors.JsonFormatVisitorWrapper,JavaType,jsonFormatVisitors.JsonValueFormat)
  fullName: com.fasterxml.jackson.databind.ser.std.StdSerializer.visitStringFormat(com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.jsonFormatVisitors.JsonValueFormat)
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: com.fasterxml.jackson.databind.ser.std.StdSerializer.getSchema(com.fasterxml.jackson.databind.SerializerProvider,java.lang.reflect.Type,boolean)
  name: StdSerializer.getSchema(SerializerProvider,Type,boolean)
  nameWithType: StdSerializer.getSchema(SerializerProvider,Type,boolean)
  fullName: com.fasterxml.jackson.databind.ser.std.StdSerializer.getSchema(com.fasterxml.jackson.databind.SerializerProvider,java.lang.reflect.Type,boolean)
- uid: com.fasterxml.jackson.databind.JsonSerializer.isUnwrappingSerializer()
  name: JsonSerializer.isUnwrappingSerializer()
  nameWithType: JsonSerializer.isUnwrappingSerializer()
  fullName: com.fasterxml.jackson.databind.JsonSerializer.isUnwrappingSerializer()
- uid: com.fasterxml.jackson.databind.ser.std.StdSerializer.visitArrayFormat(com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatTypes)
  name: StdSerializer.visitArrayFormat(jsonFormatVisitors.JsonFormatVisitorWrapper,JavaType,jsonFormatVisitors.JsonFormatTypes)
  nameWithType: StdSerializer.visitArrayFormat(jsonFormatVisitors.JsonFormatVisitorWrapper,JavaType,jsonFormatVisitors.JsonFormatTypes)
  fullName: com.fasterxml.jackson.databind.ser.std.StdSerializer.visitArrayFormat(com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatTypes)
- uid: com.fasterxml.jackson.databind.ser.std.StdSerializer._nonEmpty(java.util.Collection<?>)
  name: StdSerializer._nonEmpty(Collection<?>)
  nameWithType: StdSerializer._nonEmpty(Collection<?>)
  fullName: com.fasterxml.jackson.databind.ser.std.StdSerializer._nonEmpty(java.util.Collection<?>)
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: com.fasterxml.jackson.databind.ser.std.StdSerializer.visitIntFormat(com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.core.JsonParser.NumberType,com.fasterxml.jackson.databind.jsonFormatVisitors.JsonValueFormat)
  name: StdSerializer.visitIntFormat(jsonFormatVisitors.JsonFormatVisitorWrapper,JavaType,JsonParser.NumberType,jsonFormatVisitors.JsonValueFormat)
  nameWithType: StdSerializer.visitIntFormat(jsonFormatVisitors.JsonFormatVisitorWrapper,JavaType,JsonParser.NumberType,jsonFormatVisitors.JsonValueFormat)
  fullName: com.fasterxml.jackson.databind.ser.std.StdSerializer.visitIntFormat(com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.core.JsonParser.NumberType,com.fasterxml.jackson.databind.jsonFormatVisitors.JsonValueFormat)
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: com.fasterxml.jackson.databind.ser.std.StdSerializer.isDefaultSerializer(com.fasterxml.jackson.databind.JsonSerializer<?>)
  name: StdSerializer.isDefaultSerializer(JsonSerializer<?>)
  nameWithType: StdSerializer.isDefaultSerializer(JsonSerializer<?>)
  fullName: com.fasterxml.jackson.databind.ser.std.StdSerializer.isDefaultSerializer(com.fasterxml.jackson.databind.JsonSerializer<?>)
- uid: com.fasterxml.jackson.databind.ser.std.StdSerializer.handledType()
  name: StdSerializer.handledType()
  nameWithType: StdSerializer.handledType()
  fullName: com.fasterxml.jackson.databind.ser.std.StdSerializer.handledType()
- uid: java.lang.Object.equals(java.lang.Object)
  name: Object.equals(Object)
  nameWithType: Object.equals(Object)
  fullName: java.lang.Object.equals(java.lang.Object)
- uid: com.fasterxml.jackson.databind.ser.std.StdSerializer.createSchemaNode(java.lang.String,boolean)
  name: StdSerializer.createSchemaNode(String,boolean)
  nameWithType: StdSerializer.createSchemaNode(String,boolean)
  fullName: com.fasterxml.jackson.databind.ser.std.StdSerializer.createSchemaNode(java.lang.String,boolean)
- uid: com.fasterxml.jackson.databind.ser.std.StdSerializer.createSchemaNode(java.lang.String)
  name: StdSerializer.createSchemaNode(String)
  nameWithType: StdSerializer.createSchemaNode(String)
  fullName: com.fasterxml.jackson.databind.ser.std.StdSerializer.createSchemaNode(java.lang.String)
- uid: java.lang.Object.toString()
  name: Object.toString()
  nameWithType: Object.toString()
  fullName: java.lang.Object.toString()
- uid: com.fasterxml.jackson.databind.ser.std.StdSerializer.getSchema(com.fasterxml.jackson.databind.SerializerProvider,java.lang.reflect.Type)
  name: StdSerializer.getSchema(SerializerProvider,Type)
  nameWithType: StdSerializer.getSchema(SerializerProvider,Type)
  fullName: com.fasterxml.jackson.databind.ser.std.StdSerializer.getSchema(com.fasterxml.jackson.databind.SerializerProvider,java.lang.reflect.Type)
- uid: com.fasterxml.jackson.databind.JsonSerializer.withFilterId(java.lang.Object)
  name: JsonSerializer.withFilterId(Object)
  nameWithType: JsonSerializer.withFilterId(Object)
  fullName: com.fasterxml.jackson.databind.JsonSerializer.withFilterId(java.lang.Object)
- uid: com.fasterxml.jackson.databind.ser.std.StdSerializer.visitArrayFormat(com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.JsonSerializer<?>,com.fasterxml.jackson.databind.JavaType)
  name: StdSerializer.visitArrayFormat(jsonFormatVisitors.JsonFormatVisitorWrapper,JavaType,JsonSerializer<?>,JavaType)
  nameWithType: StdSerializer.visitArrayFormat(jsonFormatVisitors.JsonFormatVisitorWrapper,JavaType,JsonSerializer<?>,JavaType)
  fullName: com.fasterxml.jackson.databind.ser.std.StdSerializer.visitArrayFormat(com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.JsonSerializer<?>,com.fasterxml.jackson.databind.JavaType)
- uid: com.fasterxml.jackson.databind.ser.std.StdSerializer.findAnnotatedContentSerializer(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.BeanProperty)
  name: StdSerializer.findAnnotatedContentSerializer(SerializerProvider,BeanProperty)
  nameWithType: StdSerializer.findAnnotatedContentSerializer(SerializerProvider,BeanProperty)
  fullName: com.fasterxml.jackson.databind.ser.std.StdSerializer.findAnnotatedContentSerializer(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.BeanProperty)
- uid: com.fasterxml.jackson.databind.JsonSerializer.isEmpty(T)
  name: JsonSerializer.isEmpty(T)
  nameWithType: JsonSerializer.isEmpty(T)
  fullName: com.fasterxml.jackson.databind.JsonSerializer.isEmpty(T)
- uid: com.fasterxml.jackson.databind.JsonSerializer.usesObjectId()
  name: JsonSerializer.usesObjectId()
  nameWithType: JsonSerializer.usesObjectId()
  fullName: com.fasterxml.jackson.databind.JsonSerializer.usesObjectId()
- uid: com.fasterxml.jackson.databind.ser.std.StdSerializer.findFormatOverrides(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.BeanProperty,java.lang.Class<?>)
  name: StdSerializer.findFormatOverrides(SerializerProvider,BeanProperty,Class<?>)
  nameWithType: StdSerializer.findFormatOverrides(SerializerProvider,BeanProperty,Class<?>)
  fullName: com.fasterxml.jackson.databind.ser.std.StdSerializer.findFormatOverrides(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.BeanProperty,java.lang.Class<?>)
- uid: com.fasterxml.jackson.databind.JsonSerializer.replaceDelegatee(com.fasterxml.jackson.databind.JsonSerializer<?>)
  name: JsonSerializer.replaceDelegatee(JsonSerializer<?>)
  nameWithType: JsonSerializer.replaceDelegatee(JsonSerializer<?>)
  fullName: com.fasterxml.jackson.databind.JsonSerializer.replaceDelegatee(com.fasterxml.jackson.databind.JsonSerializer<?>)
- uid: com.fasterxml.jackson.databind.ser.std.StdSerializer.findContextualConvertingSerializer(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.BeanProperty,com.fasterxml.jackson.databind.JsonSerializer<?>)
  name: StdSerializer.findContextualConvertingSerializer(SerializerProvider,BeanProperty,JsonSerializer<?>)
  nameWithType: StdSerializer.findContextualConvertingSerializer(SerializerProvider,BeanProperty,JsonSerializer<?>)
  fullName: com.fasterxml.jackson.databind.ser.std.StdSerializer.findContextualConvertingSerializer(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.BeanProperty,com.fasterxml.jackson.databind.JsonSerializer<?>)
- uid: com.fasterxml.jackson.databind.ser.std.StdSerializer._neitherNull(java.lang.Object,java.lang.Object)
  name: StdSerializer._neitherNull(Object,Object)
  nameWithType: StdSerializer._neitherNull(Object,Object)
  fullName: com.fasterxml.jackson.databind.ser.std.StdSerializer._neitherNull(java.lang.Object,java.lang.Object)
- uid: com.fasterxml.jackson.databind.ser.std.StdSerializer.wrapAndThrow(com.fasterxml.jackson.databind.SerializerProvider,java.lang.Throwable,java.lang.Object,java.lang.String)
  name: StdSerializer.wrapAndThrow(SerializerProvider,Throwable,Object,String)
  nameWithType: StdSerializer.wrapAndThrow(SerializerProvider,Throwable,Object,String)
  fullName: com.fasterxml.jackson.databind.ser.std.StdSerializer.wrapAndThrow(com.fasterxml.jackson.databind.SerializerProvider,java.lang.Throwable,java.lang.Object,java.lang.String)
- uid: ?,?
  name: ?,?
  nameWithType: ?,?
  fullName: ?,?
- uid: com.fasterxml.jackson.databind.util.Converter
  name: Converter
  nameWithType: Converter
  fullName: com.fasterxml.jackson.databind.util.Converter
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: java.lang.Class
  name: Class
  nameWithType: Class
  fullName: java.lang.Class
- uid: T,?
  name: T,?
  nameWithType: T,?
  fullName: T,?
- uid: java.lang.Object,?
  name: Object,?
  nameWithType: Object,?
  fullName: java.lang.Object,?
- uid: com.fasterxml.jackson.databind.JsonSerializer
  name: JsonSerializer
  nameWithType: JsonSerializer
  fullName: com.fasterxml.jackson.databind.JsonSerializer
- uid: '?'
  name: '?'
  nameWithType: '?'
  fullName: '?'
- uid: com.fasterxml.jackson.databind.ser.std.StdSerializer
  name: StdSerializer
  nameWithType: StdSerializer
  fullName: com.fasterxml.jackson.databind.ser.std.StdSerializer
- uid: ?>,com.fasterxml.jackson.annotation.JsonFormat.Feature)
  name: ?>,JsonFormat.Feature)
  nameWithType: ?>,JsonFormat.Feature)
  fullName: ?>,com.fasterxml.jackson.annotation.JsonFormat.Feature)
- uid: com.fasterxml.jackson.databind.ser.std.StdSerializer.findFormatFeature(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.BeanProperty,java.lang.Class
  name: StdSerializer.findFormatFeature(SerializerProvider,BeanProperty,Class
  nameWithType: StdSerializer.findFormatFeature(SerializerProvider,BeanProperty,Class
  fullName: com.fasterxml.jackson.databind.ser.std.StdSerializer.findFormatFeature(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.BeanProperty,java.lang.Class
- uid: ?>)
  name: ?>)
  nameWithType: ?>)
  fullName: ?>)
- uid: com.fasterxml.jackson.databind.ser.std.StdSerializer.findIncludeOverrides(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.BeanProperty,java.lang.Class
  name: StdSerializer.findIncludeOverrides(SerializerProvider,BeanProperty,Class
  nameWithType: StdSerializer.findIncludeOverrides(SerializerProvider,BeanProperty,Class
  fullName: com.fasterxml.jackson.databind.ser.std.StdSerializer.findIncludeOverrides(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.BeanProperty,java.lang.Class
- uid: com.fasterxml.jackson.databind.ser.std.StdSerializer.findConvertingContentSerializer(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.BeanProperty,com.fasterxml.jackson.databind.JsonSerializer
  name: StdSerializer.findConvertingContentSerializer(SerializerProvider,BeanProperty,JsonSerializer
  nameWithType: StdSerializer.findConvertingContentSerializer(SerializerProvider,BeanProperty,JsonSerializer
  fullName: com.fasterxml.jackson.databind.ser.std.StdSerializer.findConvertingContentSerializer(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.BeanProperty,com.fasterxml.jackson.databind.JsonSerializer
- uid: com.fasterxml.jackson.databind.ser.std.StdSerializer._nonEmpty(java.util.Collection
  name: StdSerializer._nonEmpty(Collection
  nameWithType: StdSerializer._nonEmpty(Collection
  fullName: com.fasterxml.jackson.databind.ser.std.StdSerializer._nonEmpty(java.util.Collection
- uid: com.fasterxml.jackson.databind.ser.std.StdSerializer.isDefaultSerializer(com.fasterxml.jackson.databind.JsonSerializer
  name: StdSerializer.isDefaultSerializer(JsonSerializer
  nameWithType: StdSerializer.isDefaultSerializer(JsonSerializer
  fullName: com.fasterxml.jackson.databind.ser.std.StdSerializer.isDefaultSerializer(com.fasterxml.jackson.databind.JsonSerializer
- uid: com.fasterxml.jackson.databind.ser.std.StdSerializer.visitArrayFormat(com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.JsonSerializer
  name: StdSerializer.visitArrayFormat(jsonFormatVisitors.JsonFormatVisitorWrapper,JavaType,JsonSerializer
  nameWithType: StdSerializer.visitArrayFormat(jsonFormatVisitors.JsonFormatVisitorWrapper,JavaType,JsonSerializer
  fullName: com.fasterxml.jackson.databind.ser.std.StdSerializer.visitArrayFormat(com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.JsonSerializer
- uid: ?>,com.fasterxml.jackson.databind.JavaType)
  name: ?>,JavaType)
  nameWithType: ?>,JavaType)
  fullName: ?>,com.fasterxml.jackson.databind.JavaType)
- uid: com.fasterxml.jackson.databind.ser.std.StdSerializer.findFormatOverrides(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.BeanProperty,java.lang.Class
  name: StdSerializer.findFormatOverrides(SerializerProvider,BeanProperty,Class
  nameWithType: StdSerializer.findFormatOverrides(SerializerProvider,BeanProperty,Class
  fullName: com.fasterxml.jackson.databind.ser.std.StdSerializer.findFormatOverrides(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.BeanProperty,java.lang.Class
- uid: com.fasterxml.jackson.databind.JsonSerializer.replaceDelegatee(com.fasterxml.jackson.databind.JsonSerializer
  name: JsonSerializer.replaceDelegatee(JsonSerializer
  nameWithType: JsonSerializer.replaceDelegatee(JsonSerializer
  fullName: com.fasterxml.jackson.databind.JsonSerializer.replaceDelegatee(com.fasterxml.jackson.databind.JsonSerializer
- uid: com.fasterxml.jackson.databind.ser.std.StdSerializer.findContextualConvertingSerializer(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.BeanProperty,com.fasterxml.jackson.databind.JsonSerializer
  name: StdSerializer.findContextualConvertingSerializer(SerializerProvider,BeanProperty,JsonSerializer
  nameWithType: StdSerializer.findContextualConvertingSerializer(SerializerProvider,BeanProperty,JsonSerializer
  fullName: com.fasterxml.jackson.databind.ser.std.StdSerializer.findContextualConvertingSerializer(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.BeanProperty,com.fasterxml.jackson.databind.JsonSerializer
