### YamlMime:JavaMember
uid: "com.azure.cosmos.implementation.guava25.collect.RangeSet.enclosesAll*"
fullName: "com.azure.cosmos.implementation.guava25.collect.RangeSet<C>.enclosesAll"
name: "enclosesAll"
nameWithType: "RangeSet<C>.enclosesAll"
members:
- uid: "com.azure.cosmos.implementation.guava25.collect.RangeSet.enclosesAll(com.azure.cosmos.implementation.guava25.collect.RangeSet<C>)"
  fullName: "com.azure.cosmos.implementation.guava25.collect.RangeSet<C>.enclosesAll(RangeSet<C> other)"
  name: "enclosesAll(RangeSet<C> other)"
  nameWithType: "RangeSet<C>.enclosesAll(RangeSet<C> other)"
  summary: "Returns `true` if for each member range in `other` there exists a member range in this range set which <xref uid=\"com.azure.cosmos.implementation.guava25.collect.Range.encloses\" data-throw-if-not-resolved=\"false\" data-raw-source=\"encloses\"></xref> it. It follows that `this.contains(value)` whenever `other.contains(value)`. Returns `true` if `other` is empty.\n\nThis is equivalent to checking if this range set <xref uid=\"com.azure.cosmos.implementation.guava25.collect.RangeSet.encloses\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#encloses\"></xref> each of the ranges in `other`."
  parameters:
  - name: "other"
    type: "<xref href=\"com.azure.cosmos.implementation.guava25.collect.RangeSet?alt=com.azure.cosmos.implementation.guava25.collect.RangeSet&text=RangeSet\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"C?alt=C&text=C\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public abstract boolean enclosesAll(RangeSet<C> other)"
  returns:
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.cosmos.implementation.guava25.collect.RangeSet.enclosesAll(java.lang.Iterable<com.azure.cosmos.implementation.guava25.collect.Range<C>>)"
  fullName: "com.azure.cosmos.implementation.guava25.collect.RangeSet<C>.enclosesAll(Iterable<Range<C>> other)"
  name: "enclosesAll(Iterable<Range<C>> other)"
  nameWithType: "RangeSet<C>.enclosesAll(Iterable<Range<C>> other)"
  summary: "Returns `true` if for each range in `other` there exists a member range in this range set which <xref uid=\"com.azure.cosmos.implementation.guava25.collect.Range.encloses\" data-throw-if-not-resolved=\"false\" data-raw-source=\"encloses\"></xref> it. Returns `true` if `other` is empty.\n\nThis is equivalent to checking if this range set <xref uid=\"com.azure.cosmos.implementation.guava25.collect.RangeSet.encloses\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#encloses\"></xref> each range in `other`."
  parameters:
  - name: "other"
    type: "<xref href=\"java.lang.Iterable?alt=java.lang.Iterable&text=Iterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.cosmos.implementation.guava25.collect.Range?alt=com.azure.cosmos.implementation.guava25.collect.Range&text=Range\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"C?alt=C&text=C\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
  syntax: "public default boolean enclosesAll(Iterable<Range<C>> other)"
  returns:
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
type: "method"
metadata: {}
package: "com.azure.cosmos.implementation.guava25.collect"
artifact: com.azure:azure-cosmos:4.4.0-beta.1
