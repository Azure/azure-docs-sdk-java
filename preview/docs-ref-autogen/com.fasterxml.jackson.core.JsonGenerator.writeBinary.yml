### YamlMime:JavaMember
uid: "com.fasterxml.jackson.core.JsonGenerator.writeBinary*"
fullName: "com.fasterxml.jackson.core.JsonGenerator.writeBinary"
name: "writeBinary"
nameWithType: "JsonGenerator.writeBinary"
members:
- uid: "com.fasterxml.jackson.core.JsonGenerator.writeBinary(byte[])"
  fullName: "com.fasterxml.jackson.core.JsonGenerator.writeBinary(byte[] data)"
  name: "writeBinary(byte[] data)"
  nameWithType: "JsonGenerator.writeBinary(byte[] data)"
  summary: "Similar to <xref uid=\"com.fasterxml.jackson.core.JsonGenerator.writeBinary(com.fasterxml.jackson.core.Base64Variant,byte[],int,int)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#writeBinary(Base64Variant,byte[],int,int)\"></xref>, but assumes default to using the Jackson default Base64 variant (which is <xref uid=\"com.fasterxml.jackson.core.Base64Variants.MIME_NO_LINEFEEDS\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Base64Variants#MIME_NO_LINEFEEDS\"></xref>). Also assumes that whole byte array is to be output."
  parameters:
  - name: "data"
    type: "<xref href=\"byte?alt=byte&text=byte\" data-throw-if-not-resolved=\"False\" />[]"
  syntax: "public void writeBinary(byte[] data)"
  exceptions:
  - type: "<xref href=\"java.io.IOException?alt=java.io.IOException&text=IOException\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.fasterxml.jackson.core.JsonGenerator.writeBinary(byte[],int,int)"
  fullName: "com.fasterxml.jackson.core.JsonGenerator.writeBinary(byte[] data, int offset, int len)"
  name: "writeBinary(byte[] data, int offset, int len)"
  nameWithType: "JsonGenerator.writeBinary(byte[] data, int offset, int len)"
  summary: "Similar to <xref uid=\"com.fasterxml.jackson.core.JsonGenerator.writeBinary(com.fasterxml.jackson.core.Base64Variant,byte[],int,int)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#writeBinary(Base64Variant,byte[],int,int)\"></xref>, but default to using the Jackson default Base64 variant (which is <xref uid=\"com.fasterxml.jackson.core.Base64Variants.MIME_NO_LINEFEEDS\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Base64Variants#MIME_NO_LINEFEEDS\"></xref>)."
  parameters:
  - name: "data"
    type: "<xref href=\"byte?alt=byte&text=byte\" data-throw-if-not-resolved=\"False\" />[]"
  - name: "offset"
    type: "<xref href=\"int?alt=int&text=int\" data-throw-if-not-resolved=\"False\" />"
  - name: "len"
    type: "<xref href=\"int?alt=int&text=int\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public void writeBinary(byte[] data, int offset, int len)"
  exceptions:
  - type: "<xref href=\"java.io.IOException?alt=java.io.IOException&text=IOException\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.fasterxml.jackson.core.JsonGenerator.writeBinary(com.fasterxml.jackson.core.Base64Variant,byte[],int,int)"
  fullName: "com.fasterxml.jackson.core.JsonGenerator.writeBinary(Base64Variant bv, byte[] data, int offset, int len)"
  name: "writeBinary(Base64Variant bv, byte[] data, int offset, int len)"
  nameWithType: "JsonGenerator.writeBinary(Base64Variant bv, byte[] data, int offset, int len)"
  summary: "Method that will output given chunk of binary data as base64 encoded, as a complete String value (surrounded by double quotes). This method defaults\n\nNote: because JSON Strings can not contain unescaped linefeeds, if linefeeds are included (as per last argument), they must be escaped. This adds overhead for decoding without improving readability. Alternatively if linefeeds are not included, resulting String value may violate the requirement of base64 RFC which mandates line-length of 76 characters and use of linefeeds. However, all <xref uid=\"com.fasterxml.jackson.core.JsonParser\" data-throw-if-not-resolved=\"false\" data-raw-source=\"JsonParser\"></xref> implementations are required to accept such \"long line base64\"; as do typical production-level base64 decoders."
  parameters:
  - description: "Base64 variant to use: defines details such as\n   whether padding is used (and if so, using which character);\n   what is the maximum line length before adding linefeed,\n   and also the underlying alphabet to use."
    name: "bv"
    type: "<xref href=\"com.fasterxml.jackson.core.Base64Variant?alt=com.fasterxml.jackson.core.Base64Variant&text=Base64Variant\" data-throw-if-not-resolved=\"False\" />"
  - name: "data"
    type: "<xref href=\"byte?alt=byte&text=byte\" data-throw-if-not-resolved=\"False\" />[]"
  - name: "offset"
    type: "<xref href=\"int?alt=int&text=int\" data-throw-if-not-resolved=\"False\" />"
  - name: "len"
    type: "<xref href=\"int?alt=int&text=int\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract void writeBinary(Base64Variant bv, byte[] data, int offset, int len)"
  exceptions:
  - type: "<xref href=\"java.io.IOException?alt=java.io.IOException&text=IOException\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.fasterxml.jackson.core.JsonGenerator.writeBinary(com.fasterxml.jackson.core.Base64Variant,java.io.InputStream,int)"
  fullName: "com.fasterxml.jackson.core.JsonGenerator.writeBinary(Base64Variant bv, InputStream data, int dataLength)"
  name: "writeBinary(Base64Variant bv, InputStream data, int dataLength)"
  nameWithType: "JsonGenerator.writeBinary(Base64Variant bv, InputStream data, int dataLength)"
  summary: "Method similar to <xref uid=\"com.fasterxml.jackson.core.JsonGenerator.writeBinary(com.fasterxml.jackson.core.Base64Variant,byte[],int,int)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#writeBinary(Base64Variant,byte[],int,int)\"></xref>, but where input is provided through a stream, allowing for incremental writes without holding the whole input in memory."
  parameters:
  - description: "Base64 variant to use"
    name: "bv"
    type: "<xref href=\"com.fasterxml.jackson.core.Base64Variant?alt=com.fasterxml.jackson.core.Base64Variant&text=Base64Variant\" data-throw-if-not-resolved=\"False\" />"
  - description: "InputStream to use for reading binary data to write.\n    Will not be closed after successful write operation"
    name: "data"
    type: "<xref href=\"java.io.InputStream?alt=java.io.InputStream&text=InputStream\" data-throw-if-not-resolved=\"False\" />"
  - description: "(optional) number of bytes that will be available;\n    or -1 to be indicate it is not known.\n    If a positive length is given, <code>data</code> MUST provide at least\n    that many bytes: if not, an exception will be thrown.\n    Note that implementations\n    need not support cases where length is not known in advance; this\n    depends on underlying data format: JSON output does NOT require length,\n    other formats may."
    name: "dataLength"
    type: "<xref href=\"int?alt=int&text=int\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract int writeBinary(Base64Variant bv, InputStream data, int dataLength)"
  exceptions:
  - type: "<xref href=\"java.io.IOException?alt=java.io.IOException&text=IOException\" data-throw-if-not-resolved=\"False\" />"
  returns:
    description: "Number of bytes read from <code>data</code> and written as binary payload"
    type: "<xref href=\"int?alt=int&text=int\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.fasterxml.jackson.core.JsonGenerator.writeBinary(java.io.InputStream,int)"
  fullName: "com.fasterxml.jackson.core.JsonGenerator.writeBinary(InputStream data, int dataLength)"
  name: "writeBinary(InputStream data, int dataLength)"
  nameWithType: "JsonGenerator.writeBinary(InputStream data, int dataLength)"
  summary: "Similar to <xref uid=\"com.fasterxml.jackson.core.JsonGenerator.writeBinary(com.fasterxml.jackson.core.Base64Variant,java.io.InputStream,int)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#writeBinary(Base64Variant,InputStream,int)\"></xref>, but assumes default to using the Jackson default Base64 variant (which is <xref uid=\"com.fasterxml.jackson.core.Base64Variants.MIME_NO_LINEFEEDS\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Base64Variants#MIME_NO_LINEFEEDS\"></xref>)."
  parameters:
  - description: "InputStream to use for reading binary data to write.\n    Will not be closed after successful write operation"
    name: "data"
    type: "<xref href=\"java.io.InputStream?alt=java.io.InputStream&text=InputStream\" data-throw-if-not-resolved=\"False\" />"
  - description: "(optional) number of bytes that will be available;\n    or -1 to be indicate it is not known. Note that implementations\n    need not support cases where length is not known in advance; this\n    depends on underlying data format: JSON output does NOT require length,\n    other formats may"
    name: "dataLength"
    type: "<xref href=\"int?alt=int&text=int\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public int writeBinary(InputStream data, int dataLength)"
  exceptions:
  - type: "<xref href=\"java.io.IOException?alt=java.io.IOException&text=IOException\" data-throw-if-not-resolved=\"False\" />"
  returns:
    type: "<xref href=\"int?alt=int&text=int\" data-throw-if-not-resolved=\"False\" />"
type: "method"
metadata: {}
package: "com.fasterxml.jackson.core"
artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
