### YamlMime:JavaType
uid: "com.azure.messaging.eventhubs.EventHubProducerAsyncClient"
fullName: "com.azure.messaging.eventhubs.EventHubProducerAsyncClient"
name: "EventHubProducerAsyncClient"
nameWithType: "EventHubProducerAsyncClient"
summary: "An **asynchronous** producer responsible for transmitting <xref uid=\"com.azure.messaging.eventhubs.EventData\" data-throw-if-not-resolved=\"false\" data-raw-source=\"EventData\"></xref> to a specific Event Hub, grouped together in batches."
inheritances:
- "<xref href=\"java.lang.Object?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
inheritedClassMethods:
- classRef: "java.lang.<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html\">Object</a>"
  methodsRef:
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#clone--\">clone</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#equals-java.lang.Object-\">equals</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#finalize--\">finalize</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#getClass--\">getClass</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#hashCode--\">hashCode</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#notify--\">notify</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#notifyAll--\">notifyAll</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#toString--\">toString</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#wait--\">wait</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#wait-long-\">wait</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#wait-long-int-\">wait</a>"
syntax: "public class **EventHubProducerAsyncClient**</br> implements <a href=\"https://docs.oracle.com/javase/8/docs/api/java/io/Closeable.html\">Closeable</a>"
methods:
- uid: "com.azure.messaging.eventhubs.EventHubProducerAsyncClient.close()"
  fullName: "com.azure.messaging.eventhubs.EventHubProducerAsyncClient.close()"
  name: "close()"
  nameWithType: "EventHubProducerAsyncClient.close()"
  summary: "Disposes of the <xref uid=\"com.azure.messaging.eventhubs.EventHubProducerAsyncClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"EventHubProducerAsyncClient\"></xref>."
  syntax: "public void close()"
  desc: "Disposes of the <xref uid=\"com.azure.messaging.eventhubs.EventHubProducerAsyncClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"EventHubProducerAsyncClient\"></xref>. If the client had a dedicated connection, the underlying connection is also closed."
- uid: "com.azure.messaging.eventhubs.EventHubProducerAsyncClient.createBatch()"
  fullName: "com.azure.messaging.eventhubs.EventHubProducerAsyncClient.createBatch()"
  name: "createBatch()"
  nameWithType: "EventHubProducerAsyncClient.createBatch()"
  summary: "Creates an <xref uid=\"com.azure.messaging.eventhubs.EventDataBatch\" data-throw-if-not-resolved=\"false\" data-raw-source=\"EventDataBatch\"></xref> that can fit as many events as the transport allows."
  syntax: "public Mono<EventDataBatch> createBatch()"
  desc: "Creates an <xref uid=\"com.azure.messaging.eventhubs.EventDataBatch\" data-throw-if-not-resolved=\"false\" data-raw-source=\"EventDataBatch\"></xref> that can fit as many events as the transport allows."
  returns:
    description: "A new <xref uid=\"com.azure.messaging.eventhubs.EventDataBatch\" data-throw-if-not-resolved=\"false\" data-raw-source=\"EventDataBatch\"></xref> that can fit as many events as the transport allows."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.messaging.eventhubs.EventDataBatch?alt=com.azure.messaging.eventhubs.EventDataBatch&text=EventDataBatch\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.messaging.eventhubs.EventHubProducerAsyncClient.createBatch(com.azure.messaging.eventhubs.models.CreateBatchOptions)"
  fullName: "com.azure.messaging.eventhubs.EventHubProducerAsyncClient.createBatch(CreateBatchOptions options)"
  name: "createBatch(CreateBatchOptions options)"
  nameWithType: "EventHubProducerAsyncClient.createBatch(CreateBatchOptions options)"
  summary: "Creates an <xref uid=\"com.azure.messaging.eventhubs.EventDataBatch\" data-throw-if-not-resolved=\"false\" data-raw-source=\"EventDataBatch\"></xref> configured with the options specified."
  parameters:
  - description: "A set of options used to configure the <xref uid=\"com.azure.messaging.eventhubs.EventDataBatch\" data-throw-if-not-resolved=\"false\" data-raw-source=\"EventDataBatch\"></xref>."
    name: "options"
    type: "<xref href=\"com.azure.messaging.eventhubs.models.CreateBatchOptions?alt=com.azure.messaging.eventhubs.models.CreateBatchOptions&text=CreateBatchOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<EventDataBatch> createBatch(CreateBatchOptions options)"
  desc: "Creates an <xref uid=\"com.azure.messaging.eventhubs.EventDataBatch\" data-throw-if-not-resolved=\"false\" data-raw-source=\"EventDataBatch\"></xref> configured with the options specified."
  returns:
    description: "A new <xref uid=\"com.azure.messaging.eventhubs.EventDataBatch\" data-throw-if-not-resolved=\"false\" data-raw-source=\"EventDataBatch\"></xref> that can fit as many events as the transport allows."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.messaging.eventhubs.EventDataBatch?alt=com.azure.messaging.eventhubs.EventDataBatch&text=EventDataBatch\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.messaging.eventhubs.EventHubProducerAsyncClient.getEventHubName()"
  fullName: "com.azure.messaging.eventhubs.EventHubProducerAsyncClient.getEventHubName()"
  name: "getEventHubName()"
  nameWithType: "EventHubProducerAsyncClient.getEventHubName()"
  summary: "Gets the Event Hub name this client interacts with."
  syntax: "public String getEventHubName()"
  desc: "Gets the Event Hub name this client interacts with."
  returns:
    description: "The Event Hub name this client interacts with."
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
- uid: "com.azure.messaging.eventhubs.EventHubProducerAsyncClient.getEventHubProperties()"
  fullName: "com.azure.messaging.eventhubs.EventHubProducerAsyncClient.getEventHubProperties()"
  name: "getEventHubProperties()"
  nameWithType: "EventHubProducerAsyncClient.getEventHubProperties()"
  summary: "Retrieves information about an Event Hub, including the number of partitions present and their identifiers."
  syntax: "public Mono<EventHubProperties> getEventHubProperties()"
  desc: "Retrieves information about an Event Hub, including the number of partitions present and their identifiers."
  returns:
    description: "The set of information for the Event Hub that this client is associated with."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.messaging.eventhubs.EventHubProperties?alt=com.azure.messaging.eventhubs.EventHubProperties&text=EventHubProperties\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.messaging.eventhubs.EventHubProducerAsyncClient.getFullyQualifiedNamespace()"
  fullName: "com.azure.messaging.eventhubs.EventHubProducerAsyncClient.getFullyQualifiedNamespace()"
  name: "getFullyQualifiedNamespace()"
  nameWithType: "EventHubProducerAsyncClient.getFullyQualifiedNamespace()"
  summary: "Gets the fully qualified Event Hubs namespace that the connection is associated with."
  syntax: "public String getFullyQualifiedNamespace()"
  desc: "Gets the fully qualified Event Hubs namespace that the connection is associated with. This is likely similar to `{yournamespace}.servicebus.windows.net`."
  returns:
    description: "The fully qualified Event Hubs namespace that the connection is associated with."
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
- uid: "com.azure.messaging.eventhubs.EventHubProducerAsyncClient.getIdentifier()"
  fullName: "com.azure.messaging.eventhubs.EventHubProducerAsyncClient.getIdentifier()"
  name: "getIdentifier()"
  nameWithType: "EventHubProducerAsyncClient.getIdentifier()"
  summary: "Gets the client identifier."
  syntax: "public String getIdentifier()"
  desc: "Gets the client identifier."
  returns:
    description: "The unique identifier string for current client."
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
- uid: "com.azure.messaging.eventhubs.EventHubProducerAsyncClient.getPartitionIds()"
  fullName: "com.azure.messaging.eventhubs.EventHubProducerAsyncClient.getPartitionIds()"
  name: "getPartitionIds()"
  nameWithType: "EventHubProducerAsyncClient.getPartitionIds()"
  summary: "Retrieves the identifiers for the partitions of an Event Hub."
  syntax: "public Flux<String> getPartitionIds()"
  desc: "Retrieves the identifiers for the partitions of an Event Hub."
  returns:
    description: "A Flux of identifiers for the partitions of an Event Hub."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Flux.html\">Flux</a>&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>&gt;"
- uid: "com.azure.messaging.eventhubs.EventHubProducerAsyncClient.getPartitionProperties(java.lang.String)"
  fullName: "com.azure.messaging.eventhubs.EventHubProducerAsyncClient.getPartitionProperties(String partitionId)"
  name: "getPartitionProperties(String partitionId)"
  nameWithType: "EventHubProducerAsyncClient.getPartitionProperties(String partitionId)"
  summary: "Retrieves information about a specific partition for an Event Hub, including elements that describe the available events in the partition event stream."
  parameters:
  - description: "The unique identifier of a partition associated with the Event Hub."
    name: "partitionId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public Mono<PartitionProperties> getPartitionProperties(String partitionId)"
  desc: "Retrieves information about a specific partition for an Event Hub, including elements that describe the available events in the partition event stream."
  returns:
    description: "The set of information for the requested partition under the Event Hub this client is associated with."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.messaging.eventhubs.PartitionProperties?alt=com.azure.messaging.eventhubs.PartitionProperties&text=PartitionProperties\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.messaging.eventhubs.EventHubProducerAsyncClient.send(com.azure.messaging.eventhubs.EventDataBatch)"
  fullName: "com.azure.messaging.eventhubs.EventHubProducerAsyncClient.send(EventDataBatch batch)"
  name: "send(EventDataBatch batch)"
  nameWithType: "EventHubProducerAsyncClient.send(EventDataBatch batch)"
  summary: "Sends the batch to the associated Event Hub."
  parameters:
  - description: "The batch to send to the service."
    name: "batch"
    type: "<xref href=\"com.azure.messaging.eventhubs.EventDataBatch?alt=com.azure.messaging.eventhubs.EventDataBatch&text=EventDataBatch\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Void> send(EventDataBatch batch)"
  desc: "Sends the batch to the associated Event Hub."
  returns:
    description: "A <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> that completes when the batch is pushed to the service."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Void.html\">Void</a>&gt;"
- uid: "com.azure.messaging.eventhubs.EventHubProducerAsyncClient.send(java.lang.Iterable<com.azure.messaging.eventhubs.EventData>)"
  fullName: "com.azure.messaging.eventhubs.EventHubProducerAsyncClient.send(Iterable<EventData> events)"
  name: "send(Iterable<EventData> events)"
  nameWithType: "EventHubProducerAsyncClient.send(Iterable<EventData> events)"
  summary: "Sends a set of events to the associated Event Hub using a batched approach."
  parameters:
  - description: "Events to send to the service."
    name: "events"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Iterable.html\">Iterable</a>&lt;<xref href=\"com.azure.messaging.eventhubs.EventData?alt=com.azure.messaging.eventhubs.EventData&text=EventData\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public Mono<Void> send(Iterable<EventData> events)"
  desc: "Sends a set of events to the associated Event Hub using a batched approach. If the size of events exceed the maximum size of a single batch, an exception will be triggered and the send will fail. By default, the message size is the max amount allowed on the link.\n\n```java\nList<EventData> events = Arrays.asList(new EventData(\"maple\"), new EventData(\"aspen\"),\n     new EventData(\"oak\"));\n\n producer.send(events)\n     .subscribe(unused -> {\n     },\n         error -> System.err.println(\"Error occurred while sending events:\" + error),\n         () -> System.out.println(\"Send complete.\"));\n```\n\nFor more information regarding the maximum event size allowed, see [Azure Event Hubs Quotas and Limits][].\n\n\n[Azure Event Hubs Quotas and Limits]: https://docs.microsoft.com/azure/event-hubs/event-hubs-quotas"
  returns:
    description: "A <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> that completes when all events are pushed to the service."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Void.html\">Void</a>&gt;"
- uid: "com.azure.messaging.eventhubs.EventHubProducerAsyncClient.send(java.lang.Iterable<com.azure.messaging.eventhubs.EventData>,com.azure.messaging.eventhubs.models.SendOptions)"
  fullName: "com.azure.messaging.eventhubs.EventHubProducerAsyncClient.send(Iterable<EventData> events, SendOptions options)"
  name: "send(Iterable<EventData> events, SendOptions options)"
  nameWithType: "EventHubProducerAsyncClient.send(Iterable<EventData> events, SendOptions options)"
  summary: "Sends a set of events to the associated Event Hub using a batched approach."
  parameters:
  - description: "Events to send to the service."
    name: "events"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Iterable.html\">Iterable</a>&lt;<xref href=\"com.azure.messaging.eventhubs.EventData?alt=com.azure.messaging.eventhubs.EventData&text=EventData\" data-throw-if-not-resolved=\"False\" />&gt;"
  - description: "The set of options to consider when sending this batch."
    name: "options"
    type: "<xref href=\"com.azure.messaging.eventhubs.models.SendOptions?alt=com.azure.messaging.eventhubs.models.SendOptions&text=SendOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Void> send(Iterable<EventData> events, SendOptions options)"
  desc: "Sends a set of events to the associated Event Hub using a batched approach. If the size of events exceed the maximum size of a single batch, an exception will be triggered and the send will fail. By default, the message size is the max amount allowed on the link.\n\n```java\nList<EventData> events = Arrays.asList(new EventData(\"Melbourne\"), new EventData(\"London\"),\n     new EventData(\"New York\"));\n\n SendOptions sendOptions = new SendOptions().setPartitionKey(\"cities\");\n producer.send(events, sendOptions)\n     .subscribe(unused -> {\n     },\n         error -> System.err.println(\"Error occurred while sending events:\" + error),\n         () -> System.out.println(\"Send complete.\"));\n```\n\nFor more information regarding the maximum event size allowed, see [Azure Event Hubs Quotas and Limits][].\n\n\n[Azure Event Hubs Quotas and Limits]: https://docs.microsoft.com/azure/event-hubs/event-hubs-quotas"
  returns:
    description: "A <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> that completes when all events are pushed to the service."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Void.html\">Void</a>&gt;"
type: "class"
desc: "An **asynchronous** producer responsible for transmitting <xref uid=\"com.azure.messaging.eventhubs.EventData\" data-throw-if-not-resolved=\"false\" data-raw-source=\"EventData\"></xref> to a specific Event Hub, grouped together in batches. Depending on the <xref uid=\"com.azure.messaging.eventhubs.models.CreateBatchOptions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"options\"></xref> specified when creating an <xref uid=\"com.azure.messaging.eventhubs.EventDataBatch\" data-throw-if-not-resolved=\"false\" data-raw-source=\"EventDataBatch\"></xref>, the events may be automatically routed to an available partition or specific to a partition. More information and specific recommendations for strategies to use when publishing events is in: [ Distribute events to partitions][Distribute events to partitions]\n\nAllowing automatic routing of partitions is recommended when:\n\n *  The sending of events needs to be highly available.\n *  The event data should be evenly distributed among all available partitions.\n\nIf no partition id is specified, the following rules are used for automatically selecting one:\n\n1.  Distribute the events equally amongst all available partitions using a round-robin approach.\n2.  If a partition becomes unavailable, the Event Hubs service will automatically detect it and forward the message to another available partition.\n\nThe examples shown in this document use a credential object named DefaultAzureCredential for authentication, which is appropriate for most scenarios, including local development and production environments. Additionally, we recommend using [managed identity][] for authentication in production environments. You can find more information on different ways of authenticating and their corresponding credential types in the [Azure Identity documentation\"][Azure Identity documentation].\n\n**Sample: Construct a <xref uid=\"com.azure.messaging.eventhubs.EventHubProducerAsyncClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"EventHubProducerAsyncClient\"></xref>**\n\nThe following code sample demonstrates the creation of the asynchronous client <xref uid=\"com.azure.messaging.eventhubs.EventHubProducerAsyncClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"EventHubProducerAsyncClient\"></xref>. The `fullyQualifiedNamespace` is the Event Hubs Namespace's host name. It is listed under the \"Essentials\" panel after navigating to the Event Hubs Namespace via Azure Portal.\n\n```java\nTokenCredential credential = new DefaultAzureCredentialBuilder().build();\n\n // \"<<fully-qualified-namespace>>\" will look similar to \"{your-namespace}.servicebus.windows.net\"\n // \"<<event-hub-name>>\" will be the name of the Event Hub instance you created inside the Event Hubs namespace.\n EventHubProducerAsyncClient producer = new EventHubClientBuilder()\n     .credential(\"<<fully-qualified-namespace>>\", \"<<event-hub-name>>\",\n         credential)\n     .buildAsyncProducerClient();\n```\n\n**Sample: Create a producer and publish events to any partition**\n\nThe following code sample demonstrates how to send a set of events to Event Hub. Events are distributed via automatic routing because no options were set when creating the <xref uid=\"com.azure.messaging.eventhubs.EventDataBatch\" data-throw-if-not-resolved=\"false\" data-raw-source=\"EventDataBatch\"></xref> via <xref uid=\"com.azure.messaging.eventhubs.EventHubProducerAsyncClient.createBatch()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#createBatch()\"></xref>. Using <xref uid=\"com.azure.messaging.eventhubs.EventDataBatch\" data-throw-if-not-resolved=\"false\" data-raw-source=\"EventDataBatch\"></xref> is recommended because multiple events can be sent across the underlying connection with a single message.\n\n<xref uid=\"com.azure.messaging.eventhubs.EventHubProducerAsyncClient.createBatch()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#createBatch()\"></xref> and <xref uid=\"com.azure.messaging.eventhubs.EventHubProducerAsyncClient.send(com.azure.messaging.eventhubs.EventDataBatch)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#send(EventDataBatch)\"></xref> are non-blocking calls. After setting up the operation, its async representation is returned. The `Mono` must be subscribed to, like the sample below, to start publishing the event batch.\n\n```java\n// Creating a batch without options set, will allow for automatic routing of events to any partition.\n producer.createBatch().flatMap(batch -> {\n     batch.tryAdd(new EventData(\"test-event-1\"));\n     batch.tryAdd(new EventData(\"test-event-2\"));\n     return producer.send(batch);\n }).subscribe(unused -> {\n },\n     error -> System.err.println(\"Error occurred while sending batch:\" + error),\n     () -> System.out.println(\"Send complete.\"));\n```\n\n**Sample: Publish events to partition \"1\"**\n\nThe following code sample demonstrates how to send a set of events to Event Hub to partition \"1\". <xref uid=\"com.azure.messaging.eventhubs.EventDataBatch\" data-throw-if-not-resolved=\"false\" data-raw-source=\"EventDataBatch\"></xref> via <xref uid=\"com.azure.messaging.eventhubs.EventHubProducerAsyncClient.createBatch(com.azure.messaging.eventhubs.models.CreateBatchOptions)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#createBatch(CreateBatchOptions)\"></xref>. Partition identifiers can be obtained using <xref uid=\"com.azure.messaging.eventhubs.EventHubProducerAsyncClient.getPartitionIds()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#getPartitionIds()\"></xref>. Using <xref uid=\"com.azure.messaging.eventhubs.EventDataBatch\" data-throw-if-not-resolved=\"false\" data-raw-source=\"EventDataBatch\"></xref> is recommended because multiple events can be sent across the underlying connection with a single message.\n\n<xref uid=\"com.azure.messaging.eventhubs.EventHubProducerAsyncClient.createBatch(com.azure.messaging.eventhubs.models.CreateBatchOptions)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#createBatch(CreateBatchOptions)\"></xref> and <xref uid=\"com.azure.messaging.eventhubs.EventHubProducerAsyncClient.send(com.azure.messaging.eventhubs.EventDataBatch)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#send(EventDataBatch)\"></xref> are non-blocking calls. After setting up the operation, its async representation is returned. The `Mono` must be subscribed to, like the sample below, to start publishing the event batch.\n\n```java\nCreateBatchOptions options = new CreateBatchOptions().setPartitionId(\"1\");\n producer.createBatch(options).flatMap(batch -> {\n     batch.tryAdd(new EventData(\"test-event-1\"));\n     batch.tryAdd(new EventData(\"test-event-2\"));\n     return producer.send(batch);\n }).subscribe(unused -> {\n },\n     error -> System.err.println(\"Error occurred while sending batch to partition 1:\" + error),\n     () -> System.out.println(\"Send to partition 1 complete.\"));\n```\n\n**Sample: Publish events to the same partition, grouped together using partition key**\n\nIn the code sample below, all events with the same partition key, \"bread\" are sent to the same partition. When <xref uid=\"com.azure.messaging.eventhubs.models.CreateBatchOptions.setPartitionId(java.lang.String)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CreateBatchOptions#setPartitionId(String)\"></xref> is specified, it tells the Event Hubs service that these events belong to the same group and should belong to the same partition. Useful in the case where developers want events to end up in the same partition, but do not care which partition it ends up in.\n\n<xref uid=\"com.azure.messaging.eventhubs.EventHubProducerAsyncClient.createBatch(com.azure.messaging.eventhubs.models.CreateBatchOptions)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#createBatch(CreateBatchOptions)\"></xref> and <xref uid=\"com.azure.messaging.eventhubs.EventHubProducerAsyncClient.send(com.azure.messaging.eventhubs.EventDataBatch)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#send(EventDataBatch)\"></xref> are non-blocking calls. After setting up the operation, its async representation is returned. The `Mono` must be subscribed to, like the sample below, to start publishing the event batch.\n\n```java\nCreateBatchOptions options = new CreateBatchOptions().setPartitionKey(\"bread\");\n\n producer.createBatch(options).flatMap(batch -> {\n     batch.tryAdd(new EventData(\"sourdough\"));\n     batch.tryAdd(new EventData(\"rye\"));\n     return producer.send(batch);\n }).subscribe(unused -> {\n },\n     error -> System.err.println(\"Error occurred while sending batch:\" + error),\n     () -> System.out.println(\"Send complete.\"));\n```\n\n**Sample: Publish events using a size-limited <xref uid=\"com.azure.messaging.eventhubs.EventDataBatch\" data-throw-if-not-resolved=\"false\" data-raw-source=\"EventDataBatch\"></xref>**\n\nIn the code sample below, all batches are created with a max size of 256 bytes using <xref uid=\"com.azure.messaging.eventhubs.models.CreateBatchOptions.setMaximumSizeInBytes(int)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CreateBatchOptions#setMaximumSizeInBytes(int)\"></xref> is specified. Events inside the batch are automatically routed because no partition id or partition key are specified.\n\n<xref uid=\"com.azure.messaging.eventhubs.EventHubProducerAsyncClient.createBatch(com.azure.messaging.eventhubs.models.CreateBatchOptions)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#createBatch(CreateBatchOptions)\"></xref> and <xref uid=\"com.azure.messaging.eventhubs.EventHubProducerAsyncClient.send(com.azure.messaging.eventhubs.EventDataBatch)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#send(EventDataBatch)\"></xref> are non-blocking calls. After setting up the operation, its async representation is returned. The `Mono` must be subscribed to, like the sample below, to start publishing the event batch.\n\n```java\nFlux<EventData> telemetryEvents = Flux.just(firstEvent, secondEvent);\n\n // Setting `setMaximumSizeInBytes` when creating a batch, limits the size of that batch.\n // In this case, all the batches created with these options are limited to 256 bytes.\n CreateBatchOptions options = new CreateBatchOptions().setMaximumSizeInBytes(256);\n AtomicReference<EventDataBatch> currentBatch = new AtomicReference<>(\n     producer.createBatch(options).block());\n\n // The sample Flux contains two events, but it could be an infinite stream of telemetry events.\n Disposable publishingOperation = telemetryEvents.flatMap(event -> {\n     EventDataBatch batch = currentBatch.get();\n\n     if (batch.tryAdd(event)) {\n         return Mono.empty();\n     }\n\n     // Send the current batch then create another size-limited EventDataBatch and try to fit the event into\n     // this new batch.\n     return producer.send(batch).then(\n         producer.createBatch(options).map(newBatch -> {\n             currentBatch.set(newBatch);\n\n             // Add the event that did not fit in the previous batch.\n             if (!newBatch.tryAdd(event)) {\n                 return Mono.error(new IllegalArgumentException(\n                     \"Event was too large to fit in an empty batch. Max size: \"\n                         + newBatch.getMaxSizeInBytes()));\n             }\n\n             return Mono.empty();\n         }));\n }).subscribe(unused -> {\n }, error -> {\n     System.out.println(\"Error occurred publishing events: \" + error);\n }, () -> {\n     System.out.println(\"Completed publishing operation.\");\n });\n```\n\n\n[Distribute events to partitions]: https://learn.microsoft.com/azure/architecture/reference-architectures/event-hubs/partitioning-in-event-hubs-and-kafka#distribute-events-to-partitions\n[managed identity]: https://learn.microsoft.com/azure/active-directory/managed-identities-azure-resources/\n[Azure Identity documentation]: https://learn.microsoft.com/java/api/overview/azure/identity-readme"
implements:
- "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/io/Closeable.html\">Closeable</a>"
metadata: {}
package: "com.azure.messaging.eventhubs"
artifact: com.azure:azure-messaging-eventhubs:5.19.0-beta.3
