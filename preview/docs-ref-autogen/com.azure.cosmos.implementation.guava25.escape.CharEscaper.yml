### YamlMime:ManagedReference
items:
- uid: com.azure.cosmos.implementation.guava25.escape.CharEscaper
  id: CharEscaper
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.escape
  children:
  - com.azure.cosmos.implementation.guava25.escape.CharEscaper.CharEscaper()
  - com.azure.cosmos.implementation.guava25.escape.CharEscaper.escape(char)
  - com.azure.cosmos.implementation.guava25.escape.CharEscaper.escape(java.lang.String)
  - com.azure.cosmos.implementation.guava25.escape.CharEscaper.escapeSlow(java.lang.String,int)
  langs:
  - java
  name: CharEscaper
  nameWithType: CharEscaper
  fullName: com.azure.cosmos.implementation.guava25.escape.CharEscaper
  type: Class
  package: com.azure.cosmos.implementation.guava25.escape
  summary: >-
    An object that converts literal text into a format safe for inclusion in a particular context (such as an XML document). Typically (but not always), the inverse process of "unescaping" the text is performed automatically by the relevant parser.


    For example, an XML escaper would convert the literal string `"Foo"` into `"Foo<Bar>"` to prevent `""` from being confused with an XML tag. When the resulting XML document is parsed, the parser API will return this text as the original literal string `"Foo"`.


    A `CharEscaper` instance is required to be stateless, and safe when used concurrently by multiple threads.


    Popular escapers are defined as constants in classes like <xref uid="" data-throw-if-not-resolved="false">com.azure.cosmos.html.HtmlEscapers</xref> and <xref uid="" data-throw-if-not-resolved="false">com.azure.cosmos.xml.XmlEscapers</xref>. To create your own escapers extend this class and implement the <xref uid="com.azure.cosmos.implementation.guava25.escape.CharEscaper.escape(char)" data-throw-if-not-resolved="false">#escape(char)</xref> method.
  syntax:
    content: public abstract class CharEscaper extends Escaper
  inheritance:
  - java.lang.Object
  - com.azure.cosmos.implementation.guava25.escape.Escaper
  inheritedMembers:
  - com.azure.cosmos.implementation.guava25.escape.Escaper.asFunction()
  - com.azure.cosmos.implementation.guava25.escape.Escaper.escape(java.lang.String)
  - java.lang.Object.clone()
  - java.lang.Object.equals(java.lang.Object)
  - java.lang.Object.finalize()
  - java.lang.Object.getClass()
  - java.lang.Object.hashCode()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.toString()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
- uid: com.azure.cosmos.implementation.guava25.escape.CharEscaper.CharEscaper()
  id: CharEscaper()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.escape.CharEscaper
  langs:
  - java
  name: CharEscaper()
  nameWithType: CharEscaper.CharEscaper()
  fullName: com.azure.cosmos.implementation.guava25.escape.CharEscaper.CharEscaper()
  overload: com.azure.cosmos.implementation.guava25.escape.CharEscaper.CharEscaper*
  type: Constructor
  package: com.azure.cosmos.implementation.guava25.escape
  summary: Constructor for use by subclasses.
  syntax:
    content: protected CharEscaper()
- uid: com.azure.cosmos.implementation.guava25.escape.CharEscaper.escape(char)
  id: escape(char)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.escape.CharEscaper
  langs:
  - java
  name: escape(char c)
  nameWithType: CharEscaper.escape(char c)
  fullName: com.azure.cosmos.implementation.guava25.escape.CharEscaper.escape(char c)
  overload: com.azure.cosmos.implementation.guava25.escape.CharEscaper.escape*
  type: Method
  package: com.azure.cosmos.implementation.guava25.escape
  summary: >-
    Returns the escaped form of the given character, or `null` if this character does not need to be escaped. If an empty array is returned, this effectively strips the input character from the resulting text.


    If the character does not need to be escaped, this method should return `null`, rather than a one-character array containing the character itself. This enables the escaping algorithm to perform more efficiently.


    An escaper is expected to be able to deal with any `char` value, so this method should not throw any exceptions.
  syntax:
    content: protected abstract char[] escape(char c)
    parameters:
    - id: c
      type: char
      description: the character to escape if necessary
    return:
      type: char[]
      description: the replacement characters, or <code>null</code> if no escaping was needed
- uid: com.azure.cosmos.implementation.guava25.escape.CharEscaper.escape(java.lang.String)
  id: escape(java.lang.String)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.escape.CharEscaper
  langs:
  - java
  name: escape(String string)
  nameWithType: CharEscaper.escape(String string)
  fullName: com.azure.cosmos.implementation.guava25.escape.CharEscaper.escape(String string)
  overload: com.azure.cosmos.implementation.guava25.escape.CharEscaper.escape*
  type: Method
  package: com.azure.cosmos.implementation.guava25.escape
  summary: Returns the escaped form of a given literal string.
  syntax:
    content: public String escape(String string)
    parameters:
    - id: string
      type: java.lang.String
      description: the literal string to be escaped
    return:
      type: java.lang.String
      description: the escaped form of <code>string</code>
- uid: com.azure.cosmos.implementation.guava25.escape.CharEscaper.escapeSlow(java.lang.String,int)
  id: escapeSlow(java.lang.String,int)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.escape.CharEscaper
  langs:
  - java
  name: escapeSlow(String s, int index)
  nameWithType: CharEscaper.escapeSlow(String s, int index)
  fullName: com.azure.cosmos.implementation.guava25.escape.CharEscaper.escapeSlow(String s, int index)
  overload: com.azure.cosmos.implementation.guava25.escape.CharEscaper.escapeSlow*
  type: Method
  package: com.azure.cosmos.implementation.guava25.escape
  summary: Returns the escaped form of a given literal string, starting at the given index. This method is called by the <xref uid="com.azure.cosmos.implementation.guava25.escape.CharEscaper.escape(java.lang.String)" data-throw-if-not-resolved="false">#escape(String)</xref> method when it discovers that escaping is required. It is protected to allow subclasses to override the fastpath escaping function to inline their escaping test. See <xref uid="com.azure.cosmos.implementation.guava25.escape.CharEscaperBuilder" data-throw-if-not-resolved="false">CharEscaperBuilder</xref> for an example usage.
  syntax:
    content: protected final String escapeSlow(String s, int index)
    parameters:
    - id: s
      type: java.lang.String
      description: the literal string to be escaped
    - id: index
      type: int
      description: the index to start escaping from
    return:
      type: java.lang.String
      description: the escaped form of <code>string</code>
references:
- uid: com.azure.cosmos.implementation.guava25.escape.CharEscaper.CharEscaper*
  name: CharEscaper
  nameWithType: CharEscaper.CharEscaper
  fullName: com.azure.cosmos.implementation.guava25.escape.CharEscaper.CharEscaper
  package: com.azure.cosmos.implementation.guava25.escape
- uid: java.lang.String
  spec.java:
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
- uid: com.azure.cosmos.implementation.guava25.escape.CharEscaper.escape*
  name: escape
  nameWithType: CharEscaper.escape
  fullName: com.azure.cosmos.implementation.guava25.escape.CharEscaper.escape
  package: com.azure.cosmos.implementation.guava25.escape
- uid: char
  spec.java:
  - uid: char
    name: char
    fullName: char
- uid: char[]
  spec.java:
  - uid: char
    name: char
    fullName: char
  - name: '[]'
    fullName: '[]'
- uid: int
  spec.java:
  - uid: int
    name: int
    fullName: int
- uid: com.azure.cosmos.implementation.guava25.escape.CharEscaper.escapeSlow*
  name: escapeSlow
  nameWithType: CharEscaper.escapeSlow
  fullName: com.azure.cosmos.implementation.guava25.escape.CharEscaper.escapeSlow
  package: com.azure.cosmos.implementation.guava25.escape
- uid: com.azure.cosmos.implementation.guava25.escape.Escaper
  name: Escaper
  nameWithType: Escaper
  fullName: com.azure.cosmos.implementation.guava25.escape.Escaper
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: java.lang.Object.finalize()
  name: Object.finalize()
  nameWithType: Object.finalize()
  fullName: java.lang.Object.finalize()
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: java.lang.Object.clone()
  name: Object.clone()
  nameWithType: Object.clone()
  fullName: java.lang.Object.clone()
- uid: java.lang.Object.equals(java.lang.Object)
  name: Object.equals(Object)
  nameWithType: Object.equals(Object)
  fullName: java.lang.Object.equals(java.lang.Object)
- uid: java.lang.Object.toString()
  name: Object.toString()
  nameWithType: Object.toString()
  fullName: java.lang.Object.toString()
- uid: com.azure.cosmos.implementation.guava25.escape.Escaper.asFunction()
  name: Escaper.asFunction()
  nameWithType: Escaper.asFunction()
  fullName: com.azure.cosmos.implementation.guava25.escape.Escaper.asFunction()
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.lang.Object.hashCode()
  name: Object.hashCode()
  nameWithType: Object.hashCode()
  fullName: java.lang.Object.hashCode()
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: com.azure.cosmos.implementation.guava25.escape.Escaper.escape(java.lang.String)
  name: Escaper.escape(String)
  nameWithType: Escaper.escape(String)
  fullName: com.azure.cosmos.implementation.guava25.escape.Escaper.escape(java.lang.String)
