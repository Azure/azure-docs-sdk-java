### YamlMime:JavaMember
uid: "com.azure.storage.file.datalake.DataLakeFileClient.openQueryInputStream*"
fullName: "com.azure.storage.file.datalake.DataLakeFileClient.openQueryInputStream"
name: "openQueryInputStream"
nameWithType: "DataLakeFileClient.openQueryInputStream"
members:
- uid: "com.azure.storage.file.datalake.DataLakeFileClient.openQueryInputStream(java.lang.String)"
  fullName: "com.azure.storage.file.datalake.DataLakeFileClient.openQueryInputStream(String expression)"
  name: "openQueryInputStream(String expression)"
  nameWithType: "DataLakeFileClient.openQueryInputStream(String expression)"
  summary: "Opens an input stream to query the file.\n\nFor more information, see the [Azure Docs][]\n\n**Code Samples**\n\n```java\nString expression = \"SELECT * from BlobStorage\";\n InputStream inputStream = client.openQueryInputStream(expression);\n // Now you can read from the input stream like you would normally.\n```\n\n\n[Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/query-blob-contents"
  parameters:
  - description: "The query expression."
    name: "expression"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public InputStream openQueryInputStream(String expression)"
  returns:
    description: "An <code>InputStream</code> object that represents the stream to use for reading the query response."
    type: "<xref href=\"java.io.InputStream?alt=java.io.InputStream&text=InputStream\" data-throw-if-not-resolved=\"False\" />"
type: "method"
metadata: {}
package: "com.azure.storage.file.datalake"
artifact: com.azure:azure-storage-file-datalake:12.3.0-beta.1
