### YamlMime:ManagedReference
items:
- uid: com.fasterxml.jackson.core.type.WritableTypeId
  id: WritableTypeId
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.type
  children:
  - com.fasterxml.jackson.core.type.WritableTypeId.Inclusion
  - com.fasterxml.jackson.core.type.WritableTypeId.WritableTypeId()
  - com.fasterxml.jackson.core.type.WritableTypeId.WritableTypeId(java.lang.Object,com.fasterxml.jackson.core.JsonToken)
  - com.fasterxml.jackson.core.type.WritableTypeId.WritableTypeId(java.lang.Object,com.fasterxml.jackson.core.JsonToken,java.lang.Object)
  - com.fasterxml.jackson.core.type.WritableTypeId.WritableTypeId(java.lang.Object,java.lang.Class<?>,com.fasterxml.jackson.core.JsonToken)
  - com.fasterxml.jackson.core.type.WritableTypeId.asProperty
  - com.fasterxml.jackson.core.type.WritableTypeId.extra
  - com.fasterxml.jackson.core.type.WritableTypeId.forValue
  - com.fasterxml.jackson.core.type.WritableTypeId.forValueType
  - com.fasterxml.jackson.core.type.WritableTypeId.id
  - com.fasterxml.jackson.core.type.WritableTypeId.include
  - com.fasterxml.jackson.core.type.WritableTypeId.valueShape
  - com.fasterxml.jackson.core.type.WritableTypeId.wrapperWritten
  langs:
  - java
  name: WritableTypeId
  nameWithType: WritableTypeId
  fullName: com.fasterxml.jackson.core.type.WritableTypeId
  type: Class
  package: com.fasterxml.jackson.core.type
  summary: >-
    This is a simple value class used between core streaming and higher level databinding to pass information about type ids to write. Properties are exposed and mutable on purpose: they are only used for communication over serialization of a single value, and neither retained across calls nor shared between threads.


    Usual usage pattern is such that instance of this class is passed on two calls that are needed for outputting type id (and possible additional wrapping, depending on format; JSON, for example, requires wrapping as type id is part of regular data): first, a "prefix" write (which usually includes actual id), performed before value write; and then matching "suffix" write after value serialization.
  syntax:
    content: public class WritableTypeId
  inheritance:
  - java.lang.Object
  inheritedMembers:
  - java.lang.Object.clone()
  - java.lang.Object.equals(java.lang.Object)
  - java.lang.Object.finalize()
  - java.lang.Object.getClass()
  - java.lang.Object.hashCode()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.toString()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
- uid: com.fasterxml.jackson.core.type.WritableTypeId.WritableTypeId()
  id: WritableTypeId()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.type.WritableTypeId
  langs:
  - java
  name: WritableTypeId()
  nameWithType: WritableTypeId.WritableTypeId()
  fullName: com.fasterxml.jackson.core.type.WritableTypeId.WritableTypeId()
  overload: com.fasterxml.jackson.core.type.WritableTypeId.WritableTypeId*
  type: Constructor
  package: com.fasterxml.jackson.core.type
  syntax:
    content: public WritableTypeId()
- uid: com.fasterxml.jackson.core.type.WritableTypeId.WritableTypeId(java.lang.Object,com.fasterxml.jackson.core.JsonToken)
  id: WritableTypeId(java.lang.Object,com.fasterxml.jackson.core.JsonToken)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.type.WritableTypeId
  langs:
  - java
  name: WritableTypeId(Object value, JsonToken valueShape0)
  nameWithType: WritableTypeId.WritableTypeId(Object value, JsonToken valueShape0)
  fullName: com.fasterxml.jackson.core.type.WritableTypeId.WritableTypeId(Object value, JsonToken valueShape0)
  overload: com.fasterxml.jackson.core.type.WritableTypeId.WritableTypeId*
  type: Constructor
  package: com.fasterxml.jackson.core.type
  summary: Constructor used when calling a method for generating and writing Type Id; caller only knows value object and its intended shape.
  syntax:
    content: public WritableTypeId(Object value, JsonToken valueShape0)
    parameters:
    - id: value
      type: java.lang.Object
    - id: valueShape0
      type: com.fasterxml.jackson.core.JsonToken
- uid: com.fasterxml.jackson.core.type.WritableTypeId.WritableTypeId(java.lang.Object,com.fasterxml.jackson.core.JsonToken,java.lang.Object)
  id: WritableTypeId(java.lang.Object,com.fasterxml.jackson.core.JsonToken,java.lang.Object)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.type.WritableTypeId
  langs:
  - java
  name: WritableTypeId(Object value, JsonToken valueShape0, Object id0)
  nameWithType: WritableTypeId.WritableTypeId(Object value, JsonToken valueShape0, Object id0)
  fullName: com.fasterxml.jackson.core.type.WritableTypeId.WritableTypeId(Object value, JsonToken valueShape0, Object id0)
  overload: com.fasterxml.jackson.core.type.WritableTypeId.WritableTypeId*
  type: Constructor
  package: com.fasterxml.jackson.core.type
  summary: Constructor used when calling a method for writing Type Id; caller knows value object, its intended shape as well as id to use; but not details of wrapping (if any).
  syntax:
    content: public WritableTypeId(Object value, JsonToken valueShape0, Object id0)
    parameters:
    - id: value
      type: java.lang.Object
    - id: valueShape0
      type: com.fasterxml.jackson.core.JsonToken
    - id: id0
      type: java.lang.Object
- uid: com.fasterxml.jackson.core.type.WritableTypeId.WritableTypeId(java.lang.Object,java.lang.Class<?>,com.fasterxml.jackson.core.JsonToken)
  id: WritableTypeId(java.lang.Object,java.lang.Class<?>,com.fasterxml.jackson.core.JsonToken)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.type.WritableTypeId
  langs:
  - java
  name: WritableTypeId(Object value, Class<?> valueType0, JsonToken valueShape0)
  nameWithType: WritableTypeId.WritableTypeId(Object value, Class<?> valueType0, JsonToken valueShape0)
  fullName: com.fasterxml.jackson.core.type.WritableTypeId.WritableTypeId(Object value, Class<?> valueType0, JsonToken valueShape0)
  overload: com.fasterxml.jackson.core.type.WritableTypeId.WritableTypeId*
  type: Constructor
  package: com.fasterxml.jackson.core.type
  summary: Constructor used when calling a method for generating and writing Type Id, but where actual type to use for generating id is NOT the type of value (but its supertype).
  syntax:
    content: public WritableTypeId(Object value, Class<?> valueType0, JsonToken valueShape0)
    parameters:
    - id: value
      type: java.lang.Object
    - id: valueType0
      type: java.lang.Class<?>
    - id: valueShape0
      type: com.fasterxml.jackson.core.JsonToken
- uid: com.fasterxml.jackson.core.type.WritableTypeId.asProperty
  id: asProperty
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.type.WritableTypeId
  langs:
  - java
  name: asProperty
  nameWithType: WritableTypeId.asProperty
  fullName: com.fasterxml.jackson.core.type.WritableTypeId.asProperty
  type: Field
  package: com.fasterxml.jackson.core.type
  summary: >-
    If type id is to be embedded as a regular property, name of the property; otherwise \`null\`.


    NOTE: if "wrap-as-Object" is used, this does NOT contain property name to use but \`null\`.
  syntax:
    content: public String asProperty
    return:
      type: java.lang.String
- uid: com.fasterxml.jackson.core.type.WritableTypeId.extra
  id: extra
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.type.WritableTypeId
  langs:
  - java
  name: extra
  nameWithType: WritableTypeId.extra
  fullName: com.fasterxml.jackson.core.type.WritableTypeId.extra
  type: Field
  package: com.fasterxml.jackson.core.type
  summary: Optional additional information that generator may add during "prefix write", to be available on matching "suffix write".
  syntax:
    content: public Object extra
    return:
      type: java.lang.Object
- uid: com.fasterxml.jackson.core.type.WritableTypeId.forValue
  id: forValue
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.type.WritableTypeId
  langs:
  - java
  name: forValue
  nameWithType: WritableTypeId.forValue
  fullName: com.fasterxml.jackson.core.type.WritableTypeId.forValue
  type: Field
  package: com.fasterxml.jackson.core.type
  summary: Java object for which type id is being written. Not needed by default handling, but may be useful for customized format handling.
  syntax:
    content: public Object forValue
    return:
      type: java.lang.Object
- uid: com.fasterxml.jackson.core.type.WritableTypeId.forValueType
  id: forValueType
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.type.WritableTypeId
  langs:
  - java
  name: forValueType
  nameWithType: WritableTypeId.forValueType
  fullName: com.fasterxml.jackson.core.type.WritableTypeId.forValueType
  type: Field
  package: com.fasterxml.jackson.core.type
  summary: '(optional) Super-type of <xref uid="com.fasterxml.jackson.core.type.WritableTypeId.forValue" data-throw-if-not-resolved="false">#forValue</xref> to use for type id generation (if no explicit id passed): used instead of actual class of <xref uid="com.fasterxml.jackson.core.type.WritableTypeId.forValue" data-throw-if-not-resolved="false">#forValue</xref> in cases where we do not want to use the "real" type but something more generic, usually to work around specific problem with implementation type, or its deserializer.'
  syntax:
    content: public Class<?> forValueType
    return:
      type: java.lang.Class<?>
- uid: com.fasterxml.jackson.core.type.WritableTypeId.id
  id: id
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.type.WritableTypeId
  langs:
  - java
  name: id
  nameWithType: WritableTypeId.id
  fullName: com.fasterxml.jackson.core.type.WritableTypeId.id
  type: Field
  package: com.fasterxml.jackson.core.type
  summary: 'Actual type id to use: usually \{link java.lang.String\}.'
  syntax:
    content: public Object id
    return:
      type: java.lang.Object
- uid: com.fasterxml.jackson.core.type.WritableTypeId.include
  id: include
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.type.WritableTypeId
  langs:
  - java
  name: include
  nameWithType: WritableTypeId.include
  fullName: com.fasterxml.jackson.core.type.WritableTypeId.include
  type: Field
  package: com.fasterxml.jackson.core.type
  summary: Property used to indicate style of inclusion for this type id, in cases where no native type id may be used (either because format has none, like JSON; or because use of native type ids is disabled \[with YAML\]).
  syntax:
    content: public WritableTypeId.Inclusion include
    return:
      type: com.fasterxml.jackson.core.type.WritableTypeId.Inclusion
- uid: com.fasterxml.jackson.core.type.WritableTypeId.valueShape
  id: valueShape
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.type.WritableTypeId
  langs:
  - java
  name: valueShape
  nameWithType: WritableTypeId.valueShape
  fullName: com.fasterxml.jackson.core.type.WritableTypeId.valueShape
  type: Field
  package: com.fasterxml.jackson.core.type
  summary: 'Information about intended shape of the value being written (that is, <xref uid="com.fasterxml.jackson.core.type.WritableTypeId.forValue" data-throw-if-not-resolved="false">#forValue</xref>); in case of structured values, start token of the structure; for scalars, value token. Main difference is between structured values (<xref uid="com.fasterxml.jackson.core.JsonToken.START_ARRAY" data-throw-if-not-resolved="false">JsonToken#START_ARRAY</xref>, <xref uid="com.fasterxml.jackson.core.JsonToken.START_OBJECT" data-throw-if-not-resolved="false">JsonToken#START_OBJECT</xref>) and scalars (<xref uid="com.fasterxml.jackson.core.JsonToken.VALUE_STRING" data-throw-if-not-resolved="false">JsonToken#VALUE_STRING</xref>): specific scalar type may not be important for processing.'
  syntax:
    content: public JsonToken valueShape
    return:
      type: com.fasterxml.jackson.core.JsonToken
- uid: com.fasterxml.jackson.core.type.WritableTypeId.wrapperWritten
  id: wrapperWritten
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.type.WritableTypeId
  langs:
  - java
  name: wrapperWritten
  nameWithType: WritableTypeId.wrapperWritten
  fullName: com.fasterxml.jackson.core.type.WritableTypeId.wrapperWritten
  type: Field
  package: com.fasterxml.jackson.core.type
  summary: Flag that can be set to indicate that wrapper structure was written (during prefix-writing); used to determine if suffix requires matching close markers.
  syntax:
    content: public boolean wrapperWritten
    return:
      type: boolean
references:
- uid: com.fasterxml.jackson.core.type.WritableTypeId.WritableTypeId*
  name: WritableTypeId
  nameWithType: WritableTypeId.WritableTypeId
  fullName: com.fasterxml.jackson.core.type.WritableTypeId.WritableTypeId
  package: com.fasterxml.jackson.core.type
- uid: java.lang.Object
  spec.java:
  - uid: java.lang.Object
    name: Object
    fullName: java.lang.Object
- uid: com.fasterxml.jackson.core.JsonToken
  name: JsonToken
  nameWithType: JsonToken
  fullName: com.fasterxml.jackson.core.JsonToken
- uid: java.lang.Class<?>
  spec.java:
  - uid: java.lang.Class
    name: Class
    fullName: java.lang.Class
  - name: <
    fullName: <
  - uid: '?'
    name: '?'
    fullName: '?'
  - name: '>'
    fullName: '>'
- uid: java.lang.String
  spec.java:
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
- uid: com.fasterxml.jackson.core.type.WritableTypeId.Inclusion
  name: WritableTypeId.Inclusion
  nameWithType: WritableTypeId.Inclusion
  fullName: com.fasterxml.jackson.core.type.WritableTypeId.Inclusion
- uid: boolean
  spec.java:
  - uid: boolean
    name: boolean
    fullName: boolean
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: java.lang.Object.finalize()
  name: Object.finalize()
  nameWithType: Object.finalize()
  fullName: java.lang.Object.finalize()
- uid: java.lang.Object.clone()
  name: Object.clone()
  nameWithType: Object.clone()
  fullName: java.lang.Object.clone()
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: java.lang.Object.equals(java.lang.Object)
  name: Object.equals(Object)
  nameWithType: Object.equals(Object)
  fullName: java.lang.Object.equals(java.lang.Object)
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.lang.Object.hashCode()
  name: Object.hashCode()
  nameWithType: Object.hashCode()
  fullName: java.lang.Object.hashCode()
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: java.lang.Object.toString()
  name: Object.toString()
  nameWithType: Object.toString()
  fullName: java.lang.Object.toString()
- uid: java.lang.Class
  name: Class
  nameWithType: Class
  fullName: java.lang.Class
- uid: '?'
  name: '?'
  nameWithType: '?'
  fullName: '?'
