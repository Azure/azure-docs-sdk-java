### YamlMime:JavaMember
uid: "com.fasterxml.jackson.databind.deser.std.PrimitiveArrayDeserializers.deserialize*"
fullName: "com.fasterxml.jackson.databind.deser.std.PrimitiveArrayDeserializers<T>.deserialize"
name: "deserialize"
nameWithType: "PrimitiveArrayDeserializers<T>.deserialize"
members:
- uid: "com.fasterxml.jackson.databind.deser.std.PrimitiveArrayDeserializers.deserialize(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,T)"
  fullName: "com.fasterxml.jackson.databind.deser.std.PrimitiveArrayDeserializers<T>.deserialize(JsonParser p, DeserializationContext ctxt, T existing)"
  name: "deserialize(JsonParser p, DeserializationContext ctxt, T existing)"
  nameWithType: "PrimitiveArrayDeserializers<T>.deserialize(JsonParser p, DeserializationContext ctxt, T existing)"
  summary: "Alternate deserialization method (compared to the most commonly used, <xref uid=\"com.fasterxml.jackson.databind.deser.std.PrimitiveArrayDeserializers.deserialize*\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#deserialize(JsonParser, DeserializationContext)\"></xref>), which takes in initialized value instance, to be configured and/or populated by deserializer. Method is not necessarily used (or supported) by all types (it will not work for immutable types, for obvious reasons): most commonly it is used for Collections and Maps. It may be used both with \"updating readers\" (for POJOs) and when Collections and Maps use \"getter as setter\".\n\nDefault implementation just throws <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"UnsupportedOperationException\"></xref>, to indicate that types that do not explicitly add support do not necessarily support update-existing-value operation (esp. immutable types)"
  overridden: "com.fasterxml.jackson.databind.JsonDeserializer.deserialize(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,T)"
  parameters:
  - name: "p"
    type: "<xref href=\"com.fasterxml.jackson.core.JsonParser?alt=com.fasterxml.jackson.core.JsonParser&text=JsonParser\" data-throw-if-not-resolved=\"False\" />"
  - name: "ctxt"
    type: "<xref href=\"com.fasterxml.jackson.databind.DeserializationContext?alt=com.fasterxml.jackson.databind.DeserializationContext&text=DeserializationContext\" data-throw-if-not-resolved=\"False\" />"
  - name: "existing"
    type: "<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public T deserialize(JsonParser p, DeserializationContext ctxt, T existing)"
  exceptions:
  - type: "<xref href=\"java.io.IOException?alt=java.io.IOException&text=IOException\" data-throw-if-not-resolved=\"False\" />"
  returns:
    type: "<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />"
type: "method"
metadata: {}
package: "com.fasterxml.jackson.databind.deser.std"
artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
