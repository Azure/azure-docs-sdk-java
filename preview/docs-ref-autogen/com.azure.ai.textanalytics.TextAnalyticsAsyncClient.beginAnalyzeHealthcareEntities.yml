### YamlMime:JavaMember
uid: "com.azure.ai.textanalytics.TextAnalyticsAsyncClient.beginAnalyzeHealthcareEntities*"
fullName: "com.azure.ai.textanalytics.TextAnalyticsAsyncClient.beginAnalyzeHealthcareEntities"
name: "beginAnalyzeHealthcareEntities"
nameWithType: "TextAnalyticsAsyncClient.beginAnalyzeHealthcareEntities"
members:
- uid: "com.azure.ai.textanalytics.TextAnalyticsAsyncClient.beginAnalyzeHealthcareEntities(java.lang.Iterable<com.azure.ai.textanalytics.models.TextDocumentInput>,com.azure.ai.textanalytics.models.AnalyzeHealthcareEntitiesOptions)"
  fullName: "com.azure.ai.textanalytics.TextAnalyticsAsyncClient.beginAnalyzeHealthcareEntities(Iterable<TextDocumentInput> documents, AnalyzeHealthcareEntitiesOptions options)"
  name: "beginAnalyzeHealthcareEntities(Iterable<TextDocumentInput> documents, AnalyzeHealthcareEntitiesOptions options)"
  nameWithType: "TextAnalyticsAsyncClient.beginAnalyzeHealthcareEntities(Iterable<TextDocumentInput> documents, AnalyzeHealthcareEntitiesOptions options)"
  summary: "Analyze healthcare entities, entity data sources, and entity relations in a list of <xref uid=\"com.azure.ai.textanalytics.models.TextDocumentInput\" data-throw-if-not-resolved=\"false\" data-raw-source=\"documents\"></xref> with provided request options. Note: In order to use this functionality, request to access public preview is required. Azure Active Directory (AAD) is not currently supported. For more information see [this][]. See [this][this 1] supported languages in Text Analytics API.\n\nAnalyze healthcare entities, entity data sources, and entity relations in a list of <xref uid=\"com.azure.ai.textanalytics.models.TextDocumentInput\" data-throw-if-not-resolved=\"false\" data-raw-source=\"document\"></xref> and provided request options to show statistics. Subscribes to the call asynchronously and prints out the entity details when a response is received.\n\n```java\nList<TextDocumentInput> documents = new ArrayList<>();\n for (int i = 0; i < 3; i++) {\n     documents.add(new TextDocumentInput(Integer.toString(i),\n         \"The patient is a 54-year-old gentleman with a history of progressive angina \"\n             + \"over the past several months.\"));\n }\n \n AnalyzeHealthcareEntitiesOptions options = new AnalyzeHealthcareEntitiesOptions()\n     .setIncludeStatistics(true);\n \n textAnalyticsAsyncClient.beginAnalyzeHealthcareEntities(documents, options)\n     .flatMap(pollResult -> {\n         AnalyzeHealthcareEntitiesOperationDetail operationResult = pollResult.getValue();\n         System.out.printf(\"Operation created time: %s, expiration time: %s.%n\",\n             operationResult.getCreatedAt(), operationResult.getExpiresAt());\n         return pollResult.getFinalResult();\n     })\n     .subscribe(healthcareTaskResultPagedFlux -> {\n         healthcareTaskResultPagedFlux.subscribe(\n             healthcareTaskResult -> {\n                 // Model version\n                 System.out.printf(\"Results of Azure Text Analytics \\\"Analyze Healthcare\\\" Model, version: %s%n\",\n                     healthcareTaskResult.getModelVersion());\n \n                 TextDocumentBatchStatistics healthcareTaskStatistics = healthcareTaskResult.getStatistics();\n                 // Batch statistics\n                 System.out.printf(\"Documents statistics: document count = %s, erroneous document count = %s,\"\n                                       + \" transaction count = %s, valid document count = %s.%n\",\n                     healthcareTaskStatistics.getDocumentCount(),\n                     healthcareTaskStatistics.getInvalidDocumentCount(),\n                     healthcareTaskStatistics.getTransactionCount(),\n                     healthcareTaskStatistics.getValidDocumentCount());\n \n                 healthcareTaskResult.forEach(healthcareEntitiesResult -> {\n                     System.out.println(\"document id = \" + healthcareEntitiesResult.getId());\n                     System.out.println(\"Document entities: \");\n                     AtomicInteger ct = new AtomicInteger();\n                     healthcareEntitiesResult.getEntities().forEach(healthcareEntity -> {\n                         System.out.printf(\n                             \"\\ti = %d, Text: %s, category: %s, confidence score: %f.%n\",\n                             ct.getAndIncrement(), healthcareEntity.getText(), healthcareEntity.getCategory(),\n                             healthcareEntity.getConfidenceScore());\n \n                         IterableStream<EntityDataSource> healthcareEntityDataSources =\n                             healthcareEntity.getDataSources();\n                         if (healthcareEntityDataSources != null) {\n                             healthcareEntityDataSources.forEach(healthcareEntityLink -> System.out.printf(\n                                 \"\\t\\tEntity ID in data source: %s, data source: %s.%n\",\n                                 healthcareEntityLink.getEntityId(), healthcareEntityLink.getName()));\n                         }\n                     });\n                     // Healthcare entity relation groups\n                     healthcareEntitiesResult.getEntityRelations().forEach(entityRelation -> {\n                         System.out.printf(\"\\tRelation type: %s.%n\", entityRelation.getRelationType());\n                         entityRelation.getRoles().forEach(role -> {\n                             final HealthcareEntity entity = role.getEntity();\n                             System.out.printf(\"\\t\\tEntity text: %s, category: %s, role: %s.%n\",\n                                 entity.getText(), entity.getCategory(), role.getName());\n                         });\n                     });\n                 });\n             }\n         );\n     });\n```\n\n\n[this]: https://docs.microsoft.com/azure/cognitive-services/text-analytics/how-tos/text-analytics-for-health?tabs=ner#request-access-to-the-public-preview\n[this 1]: https://aka.ms/talangs"
  parameters:
  - description: "A list of <xref uid=\"com.azure.ai.textanalytics.models.TextDocumentInput\" data-throw-if-not-resolved=\"false\" data-raw-source=\"documents\"></xref> to be analyzed."
    name: "documents"
    type: "<xref href=\"java.lang.Iterable?alt=java.lang.Iterable&text=Iterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.ai.textanalytics.models.TextDocumentInput?alt=com.azure.ai.textanalytics.models.TextDocumentInput&text=TextDocumentInput\" data-throw-if-not-resolved=\"False\" />&gt;"
  - description: "The additional configurable <xref uid=\"com.azure.ai.textanalytics.models.AnalyzeHealthcareEntitiesOptions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"options\"></xref> that may be passed\n when analyzing healthcare entities."
    name: "options"
    type: "<xref href=\"com.azure.ai.textanalytics.models.AnalyzeHealthcareEntitiesOptions?alt=com.azure.ai.textanalytics.models.AnalyzeHealthcareEntitiesOptions&text=AnalyzeHealthcareEntitiesOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PollerFlux<AnalyzeHealthcareEntitiesOperationDetail,PagedFlux<AnalyzeHealthcareEntitiesResultCollection>> beginAnalyzeHealthcareEntities(Iterable<TextDocumentInput> documents, AnalyzeHealthcareEntitiesOptions options)"
  returns:
    description: "A <xref uid=\"com.azure.core.util.polling.PollerFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PollerFlux\"></xref> that polls the analyze healthcare operation until it has completed, has failed,\n or has been cancelled. The completed operation returns a <xref uid=\"com.azure.core.http.rest.PagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedFlux\"></xref> of\n <xref uid=\"com.azure.ai.textanalytics.util.AnalyzeHealthcareEntitiesResultCollection\" data-throw-if-not-resolved=\"false\" data-raw-source=\"AnalyzeHealthcareEntitiesResultCollection\"></xref>."
    type: "<xref href=\"com.azure.core.util.polling.PollerFlux?alt=com.azure.core.util.polling.PollerFlux&text=PollerFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.ai.textanalytics.models.AnalyzeHealthcareEntitiesOperationDetail?alt=com.azure.ai.textanalytics.models.AnalyzeHealthcareEntitiesOperationDetail&text=AnalyzeHealthcareEntitiesOperationDetail\" data-throw-if-not-resolved=\"False\" />,<xref href=\"com.azure.core.http.rest.PagedFlux?alt=com.azure.core.http.rest.PagedFlux&text=PagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.ai.textanalytics.util.AnalyzeHealthcareEntitiesResultCollection?alt=com.azure.ai.textanalytics.util.AnalyzeHealthcareEntitiesResultCollection&text=AnalyzeHealthcareEntitiesResultCollection\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.ai.textanalytics.TextAnalyticsAsyncClient.beginAnalyzeHealthcareEntities(java.lang.Iterable<java.lang.String>,java.lang.String,com.azure.ai.textanalytics.models.AnalyzeHealthcareEntitiesOptions)"
  fullName: "com.azure.ai.textanalytics.TextAnalyticsAsyncClient.beginAnalyzeHealthcareEntities(Iterable<String> documents, String language, AnalyzeHealthcareEntitiesOptions options)"
  name: "beginAnalyzeHealthcareEntities(Iterable<String> documents, String language, AnalyzeHealthcareEntitiesOptions options)"
  nameWithType: "TextAnalyticsAsyncClient.beginAnalyzeHealthcareEntities(Iterable<String> documents, String language, AnalyzeHealthcareEntitiesOptions options)"
  summary: "Analyze healthcare entities, entity data sources, and entity relations in a list of <xref uid=\"java.lang.String\" data-throw-if-not-resolved=\"false\" data-raw-source=\"documents\"></xref> with provided request options. Note: In order to use this functionality, request to access public preview is required. Azure Active Directory (AAD) is not currently supported. For more information see [this][]. See [this][this 1] supported languages in Text Analytics API.\n\n\n[this]: https://docs.microsoft.com/azure/cognitive-services/text-analytics/how-tos/text-analytics-for-health?tabs=ner#request-access-to-the-public-preview\n[this 1]: https://aka.ms/talangs"
  parameters:
  - description: "A list of documents to be analyzed.\n For text length limits, maximum batch size, and supported text encoding, see\n <a href=\"https://docs.microsoft.com/azure/cognitive-services/text-analytics/overview#data-limits\">data limits</a>."
    name: "documents"
    type: "<xref href=\"java.lang.Iterable?alt=java.lang.Iterable&text=Iterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />&gt;"
  - description: "The 2 letter ISO 639-1 representation of language for the documents. If not set, uses \"en\" for\n English as default."
    name: "language"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The additional configurable <xref uid=\"com.azure.ai.textanalytics.models.AnalyzeHealthcareEntitiesOptions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"options\"></xref> that may be passed\n when analyzing healthcare entities."
    name: "options"
    type: "<xref href=\"com.azure.ai.textanalytics.models.AnalyzeHealthcareEntitiesOptions?alt=com.azure.ai.textanalytics.models.AnalyzeHealthcareEntitiesOptions&text=AnalyzeHealthcareEntitiesOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PollerFlux<AnalyzeHealthcareEntitiesOperationDetail,PagedFlux<AnalyzeHealthcareEntitiesResultCollection>> beginAnalyzeHealthcareEntities(Iterable<String> documents, String language, AnalyzeHealthcareEntitiesOptions options)"
  returns:
    description: "A <xref uid=\"com.azure.core.util.polling.PollerFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PollerFlux\"></xref> that polls the analyze healthcare operation until it has completed, has failed,\n or has been cancelled. The completed operation returns a <xref uid=\"com.azure.core.http.rest.PagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedFlux\"></xref> of\n <xref uid=\"com.azure.ai.textanalytics.util.AnalyzeHealthcareEntitiesResultCollection\" data-throw-if-not-resolved=\"false\" data-raw-source=\"AnalyzeHealthcareEntitiesResultCollection\"></xref>."
    type: "<xref href=\"com.azure.core.util.polling.PollerFlux?alt=com.azure.core.util.polling.PollerFlux&text=PollerFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.ai.textanalytics.models.AnalyzeHealthcareEntitiesOperationDetail?alt=com.azure.ai.textanalytics.models.AnalyzeHealthcareEntitiesOperationDetail&text=AnalyzeHealthcareEntitiesOperationDetail\" data-throw-if-not-resolved=\"False\" />,<xref href=\"com.azure.core.http.rest.PagedFlux?alt=com.azure.core.http.rest.PagedFlux&text=PagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.ai.textanalytics.util.AnalyzeHealthcareEntitiesResultCollection?alt=com.azure.ai.textanalytics.util.AnalyzeHealthcareEntitiesResultCollection&text=AnalyzeHealthcareEntitiesResultCollection\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
type: "method"
metadata: {}
package: "com.azure.ai.textanalytics"
artifact: com.azure:azure-ai-textanalytics:5.1.0-beta.6
