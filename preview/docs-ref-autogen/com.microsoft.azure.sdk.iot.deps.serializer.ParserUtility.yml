### YamlMime:JavaType
uid: "com.microsoft.azure.sdk.iot.deps.serializer.ParserUtility"
fullName: "com.microsoft.azure.sdk.iot.deps.serializer.ParserUtility"
name: "ParserUtility"
nameWithType: "ParserUtility"
summary: "Set of static functions to help the serializer."
inheritances:
- "<xref href=\"java.lang.Object?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
inheritedMembers:
- "java.lang.Object.clone()"
- "java.lang.Object.equals(java.lang.Object)"
- "java.lang.Object.finalize()"
- "java.lang.Object.getClass()"
- "java.lang.Object.hashCode()"
- "java.lang.Object.notify()"
- "java.lang.Object.notifyAll()"
- "java.lang.Object.toString()"
- "java.lang.Object.wait()"
- "java.lang.Object.wait(long)"
- "java.lang.Object.wait(long,int)"
syntax: "public class ParserUtility"
constructors:
- uid: "com.microsoft.azure.sdk.iot.deps.serializer.ParserUtility.ParserUtility()"
  fullName: "com.microsoft.azure.sdk.iot.deps.serializer.ParserUtility.ParserUtility()"
  name: "ParserUtility()"
  nameWithType: "ParserUtility.ParserUtility()"
  syntax: "public ParserUtility()"
methods:
- uid: "com.microsoft.azure.sdk.iot.deps.serializer.ParserUtility.dateTimeUtcToString(java.util.Date)"
  fullName: "com.microsoft.azure.sdk.iot.deps.serializer.ParserUtility.dateTimeUtcToString(Date date)"
  name: "dateTimeUtcToString(Date date)"
  nameWithType: "ParserUtility.dateTimeUtcToString(Date date)"
  summary: "Helper to convert the provided Date UTC into String."
  modifiers:
  - "static"
  parameters:
  - description: "is the <code>Date</code> with the date and time"
    name: "date"
    type: "<xref href=\"java.util.Date?alt=java.util.Date&text=Date\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public static String dateTimeUtcToString(Date date)"
  exceptions:
  - description: "if the provided date is <code>null</code>."
    type: "<xref href=\"java.lang.IllegalArgumentException?alt=java.lang.IllegalArgumentException&text=IllegalArgumentException\" data-throw-if-not-resolved=\"False\" />"
  desc: "Helper to convert the provided Date UTC into String. Expected result: \"2016-06-01T21:22:43.799Z\""
  returns:
    description: "the <code>String</code> with the date and time using the UTC format."
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.sdk.iot.deps.serializer.ParserUtility.getDateStringFromDate(java.util.Date)"
  fullName: "com.microsoft.azure.sdk.iot.deps.serializer.ParserUtility.getDateStringFromDate(Date date)"
  name: "getDateStringFromDate(Date date)"
  nameWithType: "ParserUtility.getDateStringFromDate(Date date)"
  summary: "Convert from a date object back into a string representation Expected format of returned string: \"2016-01-21T11:05:21\""
  modifiers:
  - "static"
  parameters:
  - description: "the date to convert into a string"
    name: "date"
    type: "<xref href=\"java.util.Date?alt=java.util.Date&text=Date\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public static String getDateStringFromDate(Date date)"
  exceptions:
  - description: "if the provided date is null"
    type: "<xref href=\"java.lang.IllegalArgumentException?alt=java.lang.IllegalArgumentException&text=IllegalArgumentException\" data-throw-if-not-resolved=\"False\" />"
  desc: "Convert from a date object back into a string representation Expected format of returned string: \"2016-01-21T11:05:21\""
  returns:
    description: "the date represented as a string"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.sdk.iot.deps.serializer.ParserUtility.getDateTimeUtc(java.lang.String)"
  fullName: "com.microsoft.azure.sdk.iot.deps.serializer.ParserUtility.getDateTimeUtc(String dataTime)"
  name: "getDateTimeUtc(String dataTime)"
  nameWithType: "ParserUtility.getDateTimeUtc(String dataTime)"
  summary: "Helper to convert the provided string in a UTC Date."
  modifiers:
  - "static"
  parameters:
  - description: "is the string with the date and time"
    name: "dataTime"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public static Date getDateTimeUtc(String dataTime)"
  exceptions:
  - description: "if the date and time in the string is not in the correct format."
    type: "<xref href=\"java.lang.IllegalArgumentException?alt=java.lang.IllegalArgumentException&text=IllegalArgumentException\" data-throw-if-not-resolved=\"False\" />"
  desc: "Helper to convert the provided string in a UTC Date. Expected format: \"2016-06-01T21:22:43.7996883Z\""
  returns:
    description: "Date parsed from the string"
    type: "<xref href=\"java.util.Date?alt=java.util.Date&text=Date\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.sdk.iot.deps.serializer.ParserUtility.getJsonArrayValue(com.google.gson.JsonArray)"
  fullName: "com.microsoft.azure.sdk.iot.deps.serializer.ParserUtility.getJsonArrayValue(JsonArray jsonArray)"
  name: "getJsonArrayValue(JsonArray jsonArray)"
  nameWithType: "ParserUtility.getJsonArrayValue(JsonArray jsonArray)"
  modifiers:
  - "static"
  parameters:
  - name: "jsonArray"
    type: "<xref href=\"com.google.gson.JsonArray?alt=com.google.gson.JsonArray&text=JsonArray\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public static List<Object> getJsonArrayValue(JsonArray jsonArray)"
  returns:
    type: "<xref href=\"java.util.List?alt=java.util.List&text=List\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Object?alt=java.lang.Object&text=Object\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.sdk.iot.deps.serializer.ParserUtility.getJsonObjectValue(com.google.gson.JsonObject)"
  fullName: "com.microsoft.azure.sdk.iot.deps.serializer.ParserUtility.getJsonObjectValue(JsonObject jsonObject)"
  name: "getJsonObjectValue(JsonObject jsonObject)"
  nameWithType: "ParserUtility.getJsonObjectValue(JsonObject jsonObject)"
  modifiers:
  - "static"
  parameters:
  - name: "jsonObject"
    type: "<xref href=\"com.google.gson.JsonObject?alt=com.google.gson.JsonObject&text=JsonObject\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public static Map<String,Object> getJsonObjectValue(JsonObject jsonObject)"
  returns:
    type: "<xref href=\"java.util.Map?alt=java.util.Map&text=Map\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />,<xref href=\"java.lang.Object?alt=java.lang.Object&text=Object\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.sdk.iot.deps.serializer.ParserUtility.getJsonPrimitiveValue(com.google.gson.JsonPrimitive)"
  fullName: "com.microsoft.azure.sdk.iot.deps.serializer.ParserUtility.getJsonPrimitiveValue(JsonPrimitive jsonPrimitive)"
  name: "getJsonPrimitiveValue(JsonPrimitive jsonPrimitive)"
  nameWithType: "ParserUtility.getJsonPrimitiveValue(JsonPrimitive jsonPrimitive)"
  modifiers:
  - "static"
  parameters:
  - name: "jsonPrimitive"
    type: "<xref href=\"com.google.gson.JsonPrimitive?alt=com.google.gson.JsonPrimitive&text=JsonPrimitive\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public static Object getJsonPrimitiveValue(JsonPrimitive jsonPrimitive)"
  returns:
    type: "<xref href=\"java.lang.Object?alt=java.lang.Object&text=Object\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.sdk.iot.deps.serializer.ParserUtility.mapToJsonElement(java.util.Map<java.lang.String,java.lang.Object>)"
  fullName: "com.microsoft.azure.sdk.iot.deps.serializer.ParserUtility.mapToJsonElement(Map<String,Object> map)"
  name: "mapToJsonElement(Map<String,Object> map)"
  nameWithType: "ParserUtility.mapToJsonElement(Map<String,Object> map)"
  summary: "Helper to convert a provided map in to a Json<wbr>Element, including sub-maps."
  modifiers:
  - "static"
  parameters:
  - description: "is the map to serialize"
    name: "map"
    type: "<xref href=\"java.util.Map?alt=java.util.Map&text=Map\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />,<xref href=\"java.lang.Object?alt=java.lang.Object&text=Object\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public static JsonElement mapToJsonElement(Map<String,Object> map)"
  exceptions:
  - description: "if the provided map is null."
    type: "<xref href=\"java.lang.IllegalArgumentException?alt=java.lang.IllegalArgumentException&text=IllegalArgumentException\" data-throw-if-not-resolved=\"False\" />"
  desc: "Helper to convert a provided map in to a JsonElement, including sub-maps."
  returns:
    description: "a JsonElement that represents the content of the map."
    type: "<xref href=\"com.google.gson.JsonElement?alt=com.google.gson.JsonElement&text=JsonElement\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.sdk.iot.deps.serializer.ParserUtility.resolveJsonElement(com.google.gson.JsonElement)"
  fullName: "com.microsoft.azure.sdk.iot.deps.serializer.ParserUtility.resolveJsonElement(JsonElement jsonElement)"
  name: "resolveJsonElement(JsonElement jsonElement)"
  nameWithType: "ParserUtility.resolveJsonElement(JsonElement jsonElement)"
  modifiers:
  - "static"
  parameters:
  - name: "jsonElement"
    type: "<xref href=\"com.google.gson.JsonElement?alt=com.google.gson.JsonElement&text=JsonElement\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public static Object resolveJsonElement(JsonElement jsonElement)"
  returns:
    type: "<xref href=\"java.lang.Object?alt=java.lang.Object&text=Object\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.sdk.iot.deps.serializer.ParserUtility.stringToDateTimeOffset(java.lang.String)"
  fullName: "com.microsoft.azure.sdk.iot.deps.serializer.ParserUtility.stringToDateTimeOffset(String dateTime)"
  name: "stringToDateTimeOffset(String dateTime)"
  nameWithType: "ParserUtility.stringToDateTimeOffset(String dateTime)"
  summary: "Helper to convert the provided string in a offset Date."
  modifiers:
  - "static"
  parameters:
  - description: "is the string with the date and time"
    name: "dateTime"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public static Date stringToDateTimeOffset(String dateTime)"
  exceptions:
  - description: "if the date and time in the string is not in the correct format."
    type: "<xref href=\"java.lang.IllegalArgumentException?alt=java.lang.IllegalArgumentException&text=IllegalArgumentException\" data-throw-if-not-resolved=\"False\" />"
  desc: "Helper to convert the provided string in a offset Date. Expected format: \"2016-06-01T21:22:41+00:00\""
  returns:
    description: "Date parsed from the string"
    type: "<xref href=\"java.util.Date?alt=java.util.Date&text=Date\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.sdk.iot.deps.serializer.ParserUtility.validateBlobName(java.lang.String)"
  fullName: "com.microsoft.azure.sdk.iot.deps.serializer.ParserUtility.validateBlobName(String blobName)"
  name: "validateBlobName(String blobName)"
  nameWithType: "ParserUtility.validateBlobName(String blobName)"
  summary: "Helper to validate if the provided blob name is not null, empty, and valid."
  modifiers:
  - "static"
  parameters:
  - description: "is the blob name to be validated."
    name: "blobName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public static void validateBlobName(String blobName)"
  exceptions:
  - description: "if the blob name do not fit the criteria."
    type: "<xref href=\"java.lang.IllegalArgumentException?alt=java.lang.IllegalArgumentException&text=IllegalArgumentException\" data-throw-if-not-resolved=\"False\" />"
  desc: "Helper to validate if the provided blob name is not null, empty, and valid."
- uid: "com.microsoft.azure.sdk.iot.deps.serializer.ParserUtility.validateHostName(java.lang.String)"
  fullName: "com.microsoft.azure.sdk.iot.deps.serializer.ParserUtility.validateHostName(String hostName)"
  name: "validateHostName(String hostName)"
  nameWithType: "ParserUtility.validateHostName(String hostName)"
  summary: "Validate if a provided host name is valid using the follow criteria."
  modifiers:
  - "static"
  parameters:
  - description: "is the host name to test"
    name: "hostName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public static void validateHostName(String hostName)"
  exceptions:
  - description: "if the provided host name do not fits the criteria"
    type: "<xref href=\"java.lang.IllegalArgumentException?alt=java.lang.IllegalArgumentException&text=IllegalArgumentException\" data-throw-if-not-resolved=\"False\" />"
  desc: "Validate if a provided host name is valid using the follow criteria. A case-sensitive string (up to 128 char long) of ASCII 7-bit alphanumeric chars + \\{'-', ':', '.', '+', '%', '\\_', '\\#', '\\*', '?', '!', '(', ')', ',', '=', '@', ';', '$', '''\\}. Contains at least one separator '.'"
- uid: "com.microsoft.azure.sdk.iot.deps.serializer.ParserUtility.validateId(java.lang.String)"
  fullName: "com.microsoft.azure.sdk.iot.deps.serializer.ParserUtility.validateId(String id)"
  name: "validateId(String id)"
  nameWithType: "ParserUtility.validateId(String id)"
  summary: "Validate if a provided ID is valid using the follow criteria."
  modifiers:
  - "static"
  parameters:
  - description: "is the ID to test"
    name: "id"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public static void validateId(String id)"
  exceptions:
  - description: "if the ID do not fits the criteria"
    type: "<xref href=\"java.lang.IllegalArgumentException?alt=java.lang.IllegalArgumentException&text=IllegalArgumentException\" data-throw-if-not-resolved=\"False\" />"
  desc: "Validate if a provided ID is valid using the follow criteria. A case-sensitive string (up to 128 char long) of ASCII 7-bit alphanumeric chars + \\{'-', ':', '.', '+', '%', '\\_', '\\#', '\\*', '?', '!', '(', ')', ',', '=', '@', ';', '$', '''\\}."
- uid: "com.microsoft.azure.sdk.iot.deps.serializer.ParserUtility.validateMap(java.util.Map<java.lang.String,java.lang.Object>)"
  fullName: "com.microsoft.azure.sdk.iot.deps.serializer.ParserUtility.validateMap(Map<String,Object> map)"
  name: "validateMap(Map<String,Object> map)"
  nameWithType: "ParserUtility.validateMap(Map<String,Object> map)"
  summary: "Helper to validate if the provided map in terms of maximum levels and optionally if the keys ar not metadata."
  modifiers:
  - "static"
  parameters:
  - description: "the <code>Map</code> to be validate. It can be <code>null</code>, and it will succeed in this case."
    name: "map"
    type: "<xref href=\"java.util.Map?alt=java.util.Map&text=Map\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />,<xref href=\"java.lang.Object?alt=java.lang.Object&text=Object\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public static void validateMap(Map<String,Object> map)"
  exceptions:
  - description: "If the Map contains more than maxLevel levels or do not allow metadata\n                                  but contains metadata key."
    type: "<xref href=\"java.lang.IllegalArgumentException?alt=java.lang.IllegalArgumentException&text=IllegalArgumentException\" data-throw-if-not-resolved=\"False\" />"
  desc: "Helper to validate if the provided map in terms of maximum levels and optionally if the keys ar not metadata."
- uid: "com.microsoft.azure.sdk.iot.deps.serializer.ParserUtility.validateObject(java.lang.Object)"
  fullName: "com.microsoft.azure.sdk.iot.deps.serializer.ParserUtility.validateObject(Object val)"
  name: "validateObject(Object val)"
  nameWithType: "ParserUtility.validateObject(Object val)"
  summary: "Helper to validate if the provided object is not null."
  modifiers:
  - "static"
  parameters:
  - description: "is the object to be validated."
    name: "val"
    type: "<xref href=\"java.lang.Object?alt=java.lang.Object&text=Object\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public static void validateObject(Object val)"
  exceptions:
  - description: "if the object do not fit the criteria."
    type: "<xref href=\"java.lang.IllegalArgumentException?alt=java.lang.IllegalArgumentException&text=IllegalArgumentException\" data-throw-if-not-resolved=\"False\" />"
  desc: "Helper to validate if the provided object is not null."
- uid: "com.microsoft.azure.sdk.iot.deps.serializer.ParserUtility.validateQuery(java.lang.String)"
  fullName: "com.microsoft.azure.sdk.iot.deps.serializer.ParserUtility.validateQuery(String query)"
  name: "validateQuery(String query)"
  nameWithType: "ParserUtility.validateQuery(String query)"
  summary: "Validates if query contains select and from keywords and also if it is a valid utf-8 string"
  modifiers:
  - "static"
  parameters:
  - description: "query to be validated"
    name: "query"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public static void validateQuery(String query)"
  exceptions:
  - description: "if query does not contain \"select\" or \"from\" or is not a valid utf-8 string"
    type: "<xref href=\"java.lang.IllegalArgumentException?alt=java.lang.IllegalArgumentException&text=IllegalArgumentException\" data-throw-if-not-resolved=\"False\" />"
  desc: "Validates if query contains select and from keywords and also if it is a valid utf-8 string"
- uid: "com.microsoft.azure.sdk.iot.deps.serializer.ParserUtility.validateStringUTF8(java.lang.String)"
  fullName: "com.microsoft.azure.sdk.iot.deps.serializer.ParserUtility.validateStringUTF8(String str)"
  name: "validateStringUTF8(String str)"
  nameWithType: "ParserUtility.validateStringUTF8(String str)"
  summary: "Helper to validate if the provided string is not null, empty, and all characters are UTF-8."
  modifiers:
  - "static"
  parameters:
  - description: "is the string to be validated."
    name: "str"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public static void validateStringUTF8(String str)"
  exceptions:
  - description: "if the string do not fit the criteria."
    type: "<xref href=\"java.lang.IllegalArgumentException?alt=java.lang.IllegalArgumentException&text=IllegalArgumentException\" data-throw-if-not-resolved=\"False\" />"
  desc: "Helper to validate if the provided string is not null, empty, and all characters are UTF-8."
type: "class"
desc: "Set of static functions to help the serializer."
metadata: {}
package: "com.microsoft.azure.sdk.iot.deps.serializer"
artifact: com.microsoft.azure.sdk.iot:iot-deps-preview:1.1.0
