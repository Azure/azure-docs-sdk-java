### YamlMime:JavaType
uid: "com.azure.cosmos.implementation.guava25.collect.Sets"
fullName: "com.azure.cosmos.implementation.guava25.collect.Sets"
name: "Sets"
nameWithType: "Sets"
summary: "Static utility methods pertaining to <xref uid=\"java.util.Set\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Set\"></xref> instances. Also see this class's counterparts <xref uid=\"com.azure.cosmos.implementation.Lists\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Lists\"></xref>, <xref uid=\"com.azure.cosmos.implementation.guava25.collect.Maps\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Maps\"></xref> and <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Queues\"></xref>.\n\nSee the Guava User Guide article on [ `Sets`][_Sets].\n\n\n[_Sets]: https://github.com/google/guava/wiki/CollectionUtilitiesExplained#sets"
inheritances:
- "<xref href=\"java.lang.Object\" data-throw-if-not-resolved=\"False\" />"
inheritedMembers:
- "java.lang.Object.clone()"
- "java.lang.Object.equals(java.lang.Object)"
- "java.lang.Object.finalize()"
- "java.lang.Object.getClass()"
- "java.lang.Object.hashCode()"
- "java.lang.Object.notify()"
- "java.lang.Object.notifyAll()"
- "java.lang.Object.toString()"
- "java.lang.Object.wait()"
- "java.lang.Object.wait(long)"
- "java.lang.Object.wait(long,int)"
syntax: "public final class Sets"
methods:
- "com.azure.cosmos.implementation.guava25.collect.Sets.<B>cartesianProduct(java.util.List<? extends java.util.Set<? extends B>>)"
- "com.azure.cosmos.implementation.guava25.collect.Sets.<B>cartesianProduct(java.util.Set<? extends B>...)"
- "com.azure.cosmos.implementation.guava25.collect.Sets.<E>combinations(java.util.Set<E>,int)"
- "com.azure.cosmos.implementation.guava25.collect.Sets.<E>complementOf(java.util.Collection<E>)"
- "com.azure.cosmos.implementation.guava25.collect.Sets.<E>complementOf(java.util.Collection<E>,java.lang.Class<E>)"
- "com.azure.cosmos.implementation.guava25.collect.Sets.<E>difference(java.util.Set<E>,java.util.Set<?>)"
- "com.azure.cosmos.implementation.guava25.collect.Sets.<E>filter(java.util.NavigableSet<E>,com.azure.cosmos.implementation.guava25.base.Predicate<? super E>)"
- "com.azure.cosmos.implementation.guava25.collect.Sets.<E>filter(java.util.Set<E>,com.azure.cosmos.implementation.guava25.base.Predicate<? super E>)"
- "com.azure.cosmos.implementation.guava25.collect.Sets.<E>filter(java.util.SortedSet<E>,com.azure.cosmos.implementation.guava25.base.Predicate<? super E>)"
- "com.azure.cosmos.implementation.guava25.collect.Sets.<E>immutableEnumSet(E,E...)"
- "com.azure.cosmos.implementation.guava25.collect.Sets.<E>immutableEnumSet(java.lang.Iterable<E>)"
- "com.azure.cosmos.implementation.guava25.collect.Sets.<E>intersection(java.util.Set<E>,java.util.Set<?>)"
- "com.azure.cosmos.implementation.guava25.collect.Sets.<E>newConcurrentHashSet()"
- "com.azure.cosmos.implementation.guava25.collect.Sets.<E>newConcurrentHashSet(java.lang.Iterable<? extends E>)"
- "com.azure.cosmos.implementation.guava25.collect.Sets.<E>newCopyOnWriteArraySet()"
- "com.azure.cosmos.implementation.guava25.collect.Sets.<E>newCopyOnWriteArraySet(java.lang.Iterable<? extends E>)"
- "com.azure.cosmos.implementation.guava25.collect.Sets.<E>newEnumSet(java.lang.Iterable<E>,java.lang.Class<E>)"
- "com.azure.cosmos.implementation.guava25.collect.Sets.<E>newHashSet()"
- "com.azure.cosmos.implementation.guava25.collect.Sets.<E>newHashSet(E...)"
- "com.azure.cosmos.implementation.guava25.collect.Sets.<E>newHashSet(java.lang.Iterable<? extends E>)"
- "com.azure.cosmos.implementation.guava25.collect.Sets.<E>newHashSet(java.util.Iterator<? extends E>)"
- "com.azure.cosmos.implementation.guava25.collect.Sets.<E>newHashSetWithExpectedSize(int)"
- "com.azure.cosmos.implementation.guava25.collect.Sets.<E>newIdentityHashSet()"
- "com.azure.cosmos.implementation.guava25.collect.Sets.<E>newLinkedHashSet()"
- "com.azure.cosmos.implementation.guava25.collect.Sets.<E>newLinkedHashSet(java.lang.Iterable<? extends E>)"
- "com.azure.cosmos.implementation.guava25.collect.Sets.<E>newLinkedHashSetWithExpectedSize(int)"
- "com.azure.cosmos.implementation.guava25.collect.Sets.<E>newSetFromMap(java.util.Map<E,java.lang.Boolean>)"
- "com.azure.cosmos.implementation.guava25.collect.Sets.<E>newTreeSet()"
- "com.azure.cosmos.implementation.guava25.collect.Sets.<E>newTreeSet(java.lang.Iterable<? extends E>)"
- "com.azure.cosmos.implementation.guava25.collect.Sets.<E>newTreeSet(java.util.Comparator<? super E>)"
- "com.azure.cosmos.implementation.guava25.collect.Sets.<E>powerSet(java.util.Set<E>)"
- "com.azure.cosmos.implementation.guava25.collect.Sets.<E>symmetricDifference(java.util.Set<? extends E>,java.util.Set<? extends E>)"
- "com.azure.cosmos.implementation.guava25.collect.Sets.<E>synchronizedNavigableSet(java.util.NavigableSet<E>)"
- "com.azure.cosmos.implementation.guava25.collect.Sets.<E>toImmutableEnumSet()"
- "com.azure.cosmos.implementation.guava25.collect.Sets.<E>union(java.util.Set<? extends E>,java.util.Set<? extends E>)"
- "com.azure.cosmos.implementation.guava25.collect.Sets.<E>unmodifiableNavigableSet(java.util.NavigableSet<E>)"
- "com.azure.cosmos.implementation.guava25.collect.Sets.<K>subSet(java.util.NavigableSet<K>,com.azure.cosmos.implementation.guava25.collect.Range<K>)"
type: "class"
metadata: {}
package: "com.azure.cosmos.implementation.guava25.collect"
artifact: com.azure:azure-cosmos:4.4.0-beta.1
