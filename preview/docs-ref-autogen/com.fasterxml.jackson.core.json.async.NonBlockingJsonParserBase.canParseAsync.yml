### YamlMime:JavaMember
uid: "com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase.canParseAsync*"
fullName: "com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase.canParseAsync"
name: "canParseAsync"
nameWithType: "NonBlockingJsonParserBase.canParseAsync"
members:
- uid: "com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase.canParseAsync()"
  fullName: "com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase.canParseAsync()"
  name: "canParseAsync()"
  nameWithType: "NonBlockingJsonParserBase.canParseAsync()"
  summary: "Method that can be called to determine if this parser instance uses non-blocking (\"asynchronous\") input access for decoding or not. Access mode is determined by earlier calls via <xref uid=\"com.fasterxml.jackson.core.JsonFactory\" data-throw-if-not-resolved=\"false\" data-raw-source=\"JsonFactory\"></xref>; it may not be changed after construction.\n\nIf non-blocking decoding is u (@code true\\}, it is possible to call <xref uid=\"com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase.getNonBlockingInputFeeder*\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#getNonBlockingInputFeeder()\"></xref> to obtain object to use for feeding input; otherwise (`false` returned) input is read by blocking"
  overridden: "com.fasterxml.jackson.core.JsonParser.canParseAsync()"
  syntax: "public boolean canParseAsync()"
  returns:
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
type: "method"
metadata: {}
package: "com.fasterxml.jackson.core.json.async"
artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
