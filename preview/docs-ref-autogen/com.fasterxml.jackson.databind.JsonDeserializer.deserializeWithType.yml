### YamlMime:JavaMember
uid: "com.fasterxml.jackson.databind.JsonDeserializer.deserializeWithType*"
fullName: "com.fasterxml.jackson.databind.JsonDeserializer<T>.deserializeWithType"
name: "deserializeWithType"
nameWithType: "JsonDeserializer<T>.deserializeWithType"
members:
- uid: "com.fasterxml.jackson.databind.JsonDeserializer.deserializeWithType(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,com.fasterxml.jackson.databind.jsontype.TypeDeserializer)"
  fullName: "com.fasterxml.jackson.databind.JsonDeserializer<T>.deserializeWithType(JsonParser p, DeserializationContext ctxt, TypeDeserializer typeDeserializer)"
  name: "deserializeWithType(JsonParser p, DeserializationContext ctxt, TypeDeserializer typeDeserializer)"
  nameWithType: "JsonDeserializer<T>.deserializeWithType(JsonParser p, DeserializationContext ctxt, TypeDeserializer typeDeserializer)"
  summary: "Deserialization called when type being deserialized is defined to contain additional type identifier, to allow for correctly instantiating correct subtype. This can be due to annotation on type (or its supertype), or due to global settings without annotations.\n\nDefault implementation may work for some types, but ideally subclasses should not rely on current default implementation. Implementation is mostly provided to avoid compilation errors with older code."
  parameters:
  - name: "p"
    type: "<xref href=\"com.fasterxml.jackson.core.JsonParser?alt=com.fasterxml.jackson.core.JsonParser&text=JsonParser\" data-throw-if-not-resolved=\"False\" />"
  - name: "ctxt"
    type: "<xref href=\"com.fasterxml.jackson.databind.DeserializationContext?alt=com.fasterxml.jackson.databind.DeserializationContext&text=DeserializationContext\" data-throw-if-not-resolved=\"False\" />"
  - description: "Deserializer to use for handling type information"
    name: "typeDeserializer"
    type: "<xref href=\"com.fasterxml.jackson.databind.jsontype.TypeDeserializer?alt=com.fasterxml.jackson.databind.jsontype.TypeDeserializer&text=TypeDeserializer\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Object deserializeWithType(JsonParser p, DeserializationContext ctxt, TypeDeserializer typeDeserializer)"
  exceptions:
  - type: "<xref href=\"java.io.IOException?alt=java.io.IOException&text=IOException\" data-throw-if-not-resolved=\"False\" />"
  returns:
    type: "<xref href=\"java.lang.Object?alt=java.lang.Object&text=Object\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.fasterxml.jackson.databind.JsonDeserializer.deserializeWithType(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,com.fasterxml.jackson.databind.jsontype.TypeDeserializer,T)"
  fullName: "com.fasterxml.jackson.databind.JsonDeserializer<T>.deserializeWithType(JsonParser p, DeserializationContext ctxt, TypeDeserializer typeDeserializer, T intoValue)"
  name: "deserializeWithType(JsonParser p, DeserializationContext ctxt, TypeDeserializer typeDeserializer, T intoValue)"
  nameWithType: "JsonDeserializer<T>.deserializeWithType(JsonParser p, DeserializationContext ctxt, TypeDeserializer typeDeserializer, T intoValue)"
  summary: "Method similar to <xref uid=\"com.fasterxml.jackson.databind.JsonDeserializer.deserializeWithType(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,com.fasterxml.jackson.databind.jsontype.TypeDeserializer)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#deserializeWithType(JsonParser,DeserializationContext,TypeDeserializer)\"></xref> but called when merging value. Considered \"bad merge\" by default implementation, but if <xref uid=\"com.fasterxml.jackson.databind.MapperFeature.IGNORE_MERGE_FOR_UNMERGEABLE\" data-throw-if-not-resolved=\"false\" data-raw-source=\"MapperFeature#IGNORE_MERGE_FOR_UNMERGEABLE\"></xref> is enabled will simple delegate to <xref uid=\"com.fasterxml.jackson.databind.JsonDeserializer.deserializeWithType(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,com.fasterxml.jackson.databind.jsontype.TypeDeserializer)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#deserializeWithType(JsonParser, DeserializationContext, TypeDeserializer)\"></xref>."
  parameters:
  - name: "p"
    type: "<xref href=\"com.fasterxml.jackson.core.JsonParser?alt=com.fasterxml.jackson.core.JsonParser&text=JsonParser\" data-throw-if-not-resolved=\"False\" />"
  - name: "ctxt"
    type: "<xref href=\"com.fasterxml.jackson.databind.DeserializationContext?alt=com.fasterxml.jackson.databind.DeserializationContext&text=DeserializationContext\" data-throw-if-not-resolved=\"False\" />"
  - name: "typeDeserializer"
    type: "<xref href=\"com.fasterxml.jackson.databind.jsontype.TypeDeserializer?alt=com.fasterxml.jackson.databind.jsontype.TypeDeserializer&text=TypeDeserializer\" data-throw-if-not-resolved=\"False\" />"
  - name: "intoValue"
    type: "<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Object deserializeWithType(JsonParser p, DeserializationContext ctxt, TypeDeserializer typeDeserializer, T intoValue)"
  exceptions:
  - type: "<xref href=\"java.io.IOException?alt=java.io.IOException&text=IOException\" data-throw-if-not-resolved=\"False\" />"
  returns:
    type: "<xref href=\"java.lang.Object?alt=java.lang.Object&text=Object\" data-throw-if-not-resolved=\"False\" />"
type: "method"
metadata: {}
package: "com.fasterxml.jackson.databind"
artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
