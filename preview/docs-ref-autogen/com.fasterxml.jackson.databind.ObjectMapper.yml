### YamlMime:ManagedReference
items:
- uid: com.fasterxml.jackson.databind.ObjectMapper
  id: ObjectMapper
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind
  children:
  - com.fasterxml.jackson.databind.ObjectMapper.<T>convertValue(java.lang.Object,com.fasterxml.jackson.core.type.TypeReference<T>)
  - com.fasterxml.jackson.databind.ObjectMapper.<T>convertValue(java.lang.Object,com.fasterxml.jackson.databind.JavaType)
  - com.fasterxml.jackson.databind.ObjectMapper.<T>convertValue(java.lang.Object,java.lang.Class<T>)
  - com.fasterxml.jackson.databind.ObjectMapper.<T>readTree(com.fasterxml.jackson.core.JsonParser)
  - com.fasterxml.jackson.databind.ObjectMapper.<T>readValue(byte[],com.fasterxml.jackson.core.type.TypeReference<T>)
  - com.fasterxml.jackson.databind.ObjectMapper.<T>readValue(byte[],com.fasterxml.jackson.databind.JavaType)
  - com.fasterxml.jackson.databind.ObjectMapper.<T>readValue(byte[],int,int,com.fasterxml.jackson.core.type.TypeReference<T>)
  - com.fasterxml.jackson.databind.ObjectMapper.<T>readValue(byte[],int,int,com.fasterxml.jackson.databind.JavaType)
  - com.fasterxml.jackson.databind.ObjectMapper.<T>readValue(byte[],int,int,java.lang.Class<T>)
  - com.fasterxml.jackson.databind.ObjectMapper.<T>readValue(byte[],java.lang.Class<T>)
  - com.fasterxml.jackson.databind.ObjectMapper.<T>readValue(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.core.type.ResolvedType)
  - com.fasterxml.jackson.databind.ObjectMapper.<T>readValue(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.core.type.TypeReference<T>)
  - com.fasterxml.jackson.databind.ObjectMapper.<T>readValue(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.JavaType)
  - com.fasterxml.jackson.databind.ObjectMapper.<T>readValue(com.fasterxml.jackson.core.JsonParser,java.lang.Class<T>)
  - com.fasterxml.jackson.databind.ObjectMapper.<T>readValue(java.io.DataInput,com.fasterxml.jackson.databind.JavaType)
  - com.fasterxml.jackson.databind.ObjectMapper.<T>readValue(java.io.DataInput,java.lang.Class<T>)
  - com.fasterxml.jackson.databind.ObjectMapper.<T>readValue(java.io.File,com.fasterxml.jackson.core.type.TypeReference<T>)
  - com.fasterxml.jackson.databind.ObjectMapper.<T>readValue(java.io.File,com.fasterxml.jackson.databind.JavaType)
  - com.fasterxml.jackson.databind.ObjectMapper.<T>readValue(java.io.File,java.lang.Class<T>)
  - com.fasterxml.jackson.databind.ObjectMapper.<T>readValue(java.io.InputStream,com.fasterxml.jackson.core.type.TypeReference<T>)
  - com.fasterxml.jackson.databind.ObjectMapper.<T>readValue(java.io.InputStream,com.fasterxml.jackson.databind.JavaType)
  - com.fasterxml.jackson.databind.ObjectMapper.<T>readValue(java.io.InputStream,java.lang.Class<T>)
  - com.fasterxml.jackson.databind.ObjectMapper.<T>readValue(java.io.Reader,com.fasterxml.jackson.core.type.TypeReference<T>)
  - com.fasterxml.jackson.databind.ObjectMapper.<T>readValue(java.io.Reader,com.fasterxml.jackson.databind.JavaType)
  - com.fasterxml.jackson.databind.ObjectMapper.<T>readValue(java.io.Reader,java.lang.Class<T>)
  - com.fasterxml.jackson.databind.ObjectMapper.<T>readValue(java.lang.String,com.fasterxml.jackson.core.type.TypeReference<T>)
  - com.fasterxml.jackson.databind.ObjectMapper.<T>readValue(java.lang.String,com.fasterxml.jackson.databind.JavaType)
  - com.fasterxml.jackson.databind.ObjectMapper.<T>readValue(java.lang.String,java.lang.Class<T>)
  - com.fasterxml.jackson.databind.ObjectMapper.<T>readValue(java.net.URL,com.fasterxml.jackson.core.type.TypeReference<T>)
  - com.fasterxml.jackson.databind.ObjectMapper.<T>readValue(java.net.URL,com.fasterxml.jackson.databind.JavaType)
  - com.fasterxml.jackson.databind.ObjectMapper.<T>readValue(java.net.URL,java.lang.Class<T>)
  - com.fasterxml.jackson.databind.ObjectMapper.<T>readValues(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.core.type.ResolvedType)
  - com.fasterxml.jackson.databind.ObjectMapper.<T>readValues(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.core.type.TypeReference<T>)
  - com.fasterxml.jackson.databind.ObjectMapper.<T>readValues(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.JavaType)
  - com.fasterxml.jackson.databind.ObjectMapper.<T>readValues(com.fasterxml.jackson.core.JsonParser,java.lang.Class<T>)
  - com.fasterxml.jackson.databind.ObjectMapper.<T>treeToValue(com.fasterxml.jackson.core.TreeNode,java.lang.Class<T>)
  - com.fasterxml.jackson.databind.ObjectMapper.<T>updateValue(T,java.lang.Object)
  - com.fasterxml.jackson.databind.ObjectMapper.<T>valueToTree(java.lang.Object)
  - com.fasterxml.jackson.databind.ObjectMapper.DEFAULT_ANNOTATION_INTROSPECTOR
  - com.fasterxml.jackson.databind.ObjectMapper.DEFAULT_BASE
  - com.fasterxml.jackson.databind.ObjectMapper.DefaultTypeResolverBuilder
  - com.fasterxml.jackson.databind.ObjectMapper.DefaultTyping
  - com.fasterxml.jackson.databind.ObjectMapper.ObjectMapper()
  - com.fasterxml.jackson.databind.ObjectMapper.ObjectMapper(com.fasterxml.jackson.core.JsonFactory)
  - com.fasterxml.jackson.databind.ObjectMapper.ObjectMapper(com.fasterxml.jackson.core.JsonFactory,com.fasterxml.jackson.databind.ser.DefaultSerializerProvider,com.fasterxml.jackson.databind.deser.DefaultDeserializationContext)
  - com.fasterxml.jackson.databind.ObjectMapper.ObjectMapper(com.fasterxml.jackson.databind.ObjectMapper)
  - com.fasterxml.jackson.databind.ObjectMapper._assertNotNull(java.lang.String,java.lang.Object)
  - com.fasterxml.jackson.databind.ObjectMapper._checkInvalidCopy(java.lang.Class<?>)
  - com.fasterxml.jackson.databind.ObjectMapper._configAndWriteValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)
  - com.fasterxml.jackson.databind.ObjectMapper._configOverrides
  - com.fasterxml.jackson.databind.ObjectMapper._constructDefaultTypeResolverBuilder(com.fasterxml.jackson.databind.ObjectMapper.DefaultTyping,com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator)
  - com.fasterxml.jackson.databind.ObjectMapper._convert(java.lang.Object,com.fasterxml.jackson.databind.JavaType)
  - com.fasterxml.jackson.databind.ObjectMapper._deserializationConfig
  - com.fasterxml.jackson.databind.ObjectMapper._deserializationContext
  - com.fasterxml.jackson.databind.ObjectMapper._findRootDeserializer(com.fasterxml.jackson.databind.DeserializationContext,com.fasterxml.jackson.databind.JavaType)
  - com.fasterxml.jackson.databind.ObjectMapper._initForReading(com.fasterxml.jackson.core.JsonParser)
  - com.fasterxml.jackson.databind.ObjectMapper._initForReading(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.JavaType)
  - com.fasterxml.jackson.databind.ObjectMapper._injectableValues
  - com.fasterxml.jackson.databind.ObjectMapper._jsonFactory
  - com.fasterxml.jackson.databind.ObjectMapper._mixIns
  - com.fasterxml.jackson.databind.ObjectMapper._newReader(com.fasterxml.jackson.databind.DeserializationConfig)
  - com.fasterxml.jackson.databind.ObjectMapper._newReader(com.fasterxml.jackson.databind.DeserializationConfig,com.fasterxml.jackson.databind.JavaType,java.lang.Object,com.fasterxml.jackson.core.FormatSchema,com.fasterxml.jackson.databind.InjectableValues)
  - com.fasterxml.jackson.databind.ObjectMapper._newWriter(com.fasterxml.jackson.databind.SerializationConfig)
  - com.fasterxml.jackson.databind.ObjectMapper._newWriter(com.fasterxml.jackson.databind.SerializationConfig,com.fasterxml.jackson.core.FormatSchema)
  - com.fasterxml.jackson.databind.ObjectMapper._newWriter(com.fasterxml.jackson.databind.SerializationConfig,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.core.PrettyPrinter)
  - com.fasterxml.jackson.databind.ObjectMapper._readMapAndClose(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.JavaType)
  - com.fasterxml.jackson.databind.ObjectMapper._readTreeAndClose(com.fasterxml.jackson.core.JsonParser)
  - com.fasterxml.jackson.databind.ObjectMapper._readValue(com.fasterxml.jackson.databind.DeserializationConfig,com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.JavaType)
  - com.fasterxml.jackson.databind.ObjectMapper._registeredModuleTypes
  - com.fasterxml.jackson.databind.ObjectMapper._rootDeserializers
  - com.fasterxml.jackson.databind.ObjectMapper._serializationConfig
  - com.fasterxml.jackson.databind.ObjectMapper._serializerFactory
  - com.fasterxml.jackson.databind.ObjectMapper._serializerProvider
  - com.fasterxml.jackson.databind.ObjectMapper._serializerProvider(com.fasterxml.jackson.databind.SerializationConfig)
  - com.fasterxml.jackson.databind.ObjectMapper._subtypeResolver
  - com.fasterxml.jackson.databind.ObjectMapper._typeFactory
  - com.fasterxml.jackson.databind.ObjectMapper._unwrapAndDeserialize(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,com.fasterxml.jackson.databind.DeserializationConfig,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.JsonDeserializer<java.lang.Object>)
  - com.fasterxml.jackson.databind.ObjectMapper._verifyNoTrailingTokens(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,com.fasterxml.jackson.databind.JavaType)
  - com.fasterxml.jackson.databind.ObjectMapper._verifySchemaType(com.fasterxml.jackson.core.FormatSchema)
  - com.fasterxml.jackson.databind.ObjectMapper._writeValueAndClose(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)
  - com.fasterxml.jackson.databind.ObjectMapper.acceptJsonFormatVisitor(com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper)
  - com.fasterxml.jackson.databind.ObjectMapper.acceptJsonFormatVisitor(java.lang.Class<?>,com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper)
  - com.fasterxml.jackson.databind.ObjectMapper.activateDefaultTyping(com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator)
  - com.fasterxml.jackson.databind.ObjectMapper.activateDefaultTyping(com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator,com.fasterxml.jackson.databind.ObjectMapper.DefaultTyping)
  - com.fasterxml.jackson.databind.ObjectMapper.activateDefaultTyping(com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator,com.fasterxml.jackson.databind.ObjectMapper.DefaultTyping,com.fasterxml.jackson.annotation.JsonTypeInfo.As)
  - com.fasterxml.jackson.databind.ObjectMapper.activateDefaultTypingAsProperty(com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator,com.fasterxml.jackson.databind.ObjectMapper.DefaultTyping,java.lang.String)
  - com.fasterxml.jackson.databind.ObjectMapper.addHandler(com.fasterxml.jackson.databind.deser.DeserializationProblemHandler)
  - com.fasterxml.jackson.databind.ObjectMapper.addMixIn(java.lang.Class<?>,java.lang.Class<?>)
  - com.fasterxml.jackson.databind.ObjectMapper.addMixInAnnotations(java.lang.Class<?>,java.lang.Class<?>)
  - com.fasterxml.jackson.databind.ObjectMapper.canDeserialize(com.fasterxml.jackson.databind.JavaType)
  - com.fasterxml.jackson.databind.ObjectMapper.canDeserialize(com.fasterxml.jackson.databind.JavaType,java.util.concurrent.atomic.AtomicReference<java.lang.Throwable>)
  - com.fasterxml.jackson.databind.ObjectMapper.canSerialize(java.lang.Class<?>)
  - com.fasterxml.jackson.databind.ObjectMapper.canSerialize(java.lang.Class<?>,java.util.concurrent.atomic.AtomicReference<java.lang.Throwable>)
  - com.fasterxml.jackson.databind.ObjectMapper.clearProblemHandlers()
  - com.fasterxml.jackson.databind.ObjectMapper.configOverride(java.lang.Class<?>)
  - com.fasterxml.jackson.databind.ObjectMapper.configure(com.fasterxml.jackson.core.JsonGenerator.Feature,boolean)
  - com.fasterxml.jackson.databind.ObjectMapper.configure(com.fasterxml.jackson.core.JsonParser.Feature,boolean)
  - com.fasterxml.jackson.databind.ObjectMapper.configure(com.fasterxml.jackson.databind.DeserializationFeature,boolean)
  - com.fasterxml.jackson.databind.ObjectMapper.configure(com.fasterxml.jackson.databind.MapperFeature,boolean)
  - com.fasterxml.jackson.databind.ObjectMapper.configure(com.fasterxml.jackson.databind.SerializationFeature,boolean)
  - com.fasterxml.jackson.databind.ObjectMapper.constructType(java.lang.reflect.Type)
  - com.fasterxml.jackson.databind.ObjectMapper.copy()
  - com.fasterxml.jackson.databind.ObjectMapper.createArrayNode()
  - com.fasterxml.jackson.databind.ObjectMapper.createDeserializationContext(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationConfig)
  - com.fasterxml.jackson.databind.ObjectMapper.createGenerator(java.io.DataOutput)
  - com.fasterxml.jackson.databind.ObjectMapper.createGenerator(java.io.File,com.fasterxml.jackson.core.JsonEncoding)
  - com.fasterxml.jackson.databind.ObjectMapper.createGenerator(java.io.OutputStream)
  - com.fasterxml.jackson.databind.ObjectMapper.createGenerator(java.io.OutputStream,com.fasterxml.jackson.core.JsonEncoding)
  - com.fasterxml.jackson.databind.ObjectMapper.createGenerator(java.io.Writer)
  - com.fasterxml.jackson.databind.ObjectMapper.createNonBlockingByteArrayParser()
  - com.fasterxml.jackson.databind.ObjectMapper.createObjectNode()
  - com.fasterxml.jackson.databind.ObjectMapper.createParser(byte[])
  - com.fasterxml.jackson.databind.ObjectMapper.createParser(byte[],int,int)
  - com.fasterxml.jackson.databind.ObjectMapper.createParser(char[])
  - com.fasterxml.jackson.databind.ObjectMapper.createParser(char[],int,int)
  - com.fasterxml.jackson.databind.ObjectMapper.createParser(java.io.DataInput)
  - com.fasterxml.jackson.databind.ObjectMapper.createParser(java.io.File)
  - com.fasterxml.jackson.databind.ObjectMapper.createParser(java.io.InputStream)
  - com.fasterxml.jackson.databind.ObjectMapper.createParser(java.io.Reader)
  - com.fasterxml.jackson.databind.ObjectMapper.createParser(java.lang.String)
  - com.fasterxml.jackson.databind.ObjectMapper.createParser(java.net.URL)
  - com.fasterxml.jackson.databind.ObjectMapper.deactivateDefaultTyping()
  - com.fasterxml.jackson.databind.ObjectMapper.defaultClassIntrospector()
  - com.fasterxml.jackson.databind.ObjectMapper.disable(com.fasterxml.jackson.core.JsonGenerator.Feature...)
  - com.fasterxml.jackson.databind.ObjectMapper.disable(com.fasterxml.jackson.core.JsonParser.Feature...)
  - com.fasterxml.jackson.databind.ObjectMapper.disable(com.fasterxml.jackson.databind.DeserializationFeature)
  - com.fasterxml.jackson.databind.ObjectMapper.disable(com.fasterxml.jackson.databind.DeserializationFeature,com.fasterxml.jackson.databind.DeserializationFeature...)
  - com.fasterxml.jackson.databind.ObjectMapper.disable(com.fasterxml.jackson.databind.MapperFeature...)
  - com.fasterxml.jackson.databind.ObjectMapper.disable(com.fasterxml.jackson.databind.SerializationFeature)
  - com.fasterxml.jackson.databind.ObjectMapper.disable(com.fasterxml.jackson.databind.SerializationFeature,com.fasterxml.jackson.databind.SerializationFeature...)
  - com.fasterxml.jackson.databind.ObjectMapper.disableDefaultTyping()
  - com.fasterxml.jackson.databind.ObjectMapper.enable(com.fasterxml.jackson.core.JsonGenerator.Feature...)
  - com.fasterxml.jackson.databind.ObjectMapper.enable(com.fasterxml.jackson.core.JsonParser.Feature...)
  - com.fasterxml.jackson.databind.ObjectMapper.enable(com.fasterxml.jackson.databind.DeserializationFeature)
  - com.fasterxml.jackson.databind.ObjectMapper.enable(com.fasterxml.jackson.databind.DeserializationFeature,com.fasterxml.jackson.databind.DeserializationFeature...)
  - com.fasterxml.jackson.databind.ObjectMapper.enable(com.fasterxml.jackson.databind.MapperFeature...)
  - com.fasterxml.jackson.databind.ObjectMapper.enable(com.fasterxml.jackson.databind.SerializationFeature)
  - com.fasterxml.jackson.databind.ObjectMapper.enable(com.fasterxml.jackson.databind.SerializationFeature,com.fasterxml.jackson.databind.SerializationFeature...)
  - com.fasterxml.jackson.databind.ObjectMapper.enableDefaultTyping()
  - com.fasterxml.jackson.databind.ObjectMapper.enableDefaultTyping(com.fasterxml.jackson.databind.ObjectMapper.DefaultTyping)
  - com.fasterxml.jackson.databind.ObjectMapper.enableDefaultTyping(com.fasterxml.jackson.databind.ObjectMapper.DefaultTyping,com.fasterxml.jackson.annotation.JsonTypeInfo.As)
  - com.fasterxml.jackson.databind.ObjectMapper.enableDefaultTypingAsProperty(com.fasterxml.jackson.databind.ObjectMapper.DefaultTyping,java.lang.String)
  - com.fasterxml.jackson.databind.ObjectMapper.findAndRegisterModules()
  - com.fasterxml.jackson.databind.ObjectMapper.findMixInClassFor(java.lang.Class<?>)
  - com.fasterxml.jackson.databind.ObjectMapper.findModules()
  - com.fasterxml.jackson.databind.ObjectMapper.findModules(java.lang.ClassLoader)
  - com.fasterxml.jackson.databind.ObjectMapper.generateJsonSchema(java.lang.Class<?>)
  - com.fasterxml.jackson.databind.ObjectMapper.getDateFormat()
  - com.fasterxml.jackson.databind.ObjectMapper.getDeserializationConfig()
  - com.fasterxml.jackson.databind.ObjectMapper.getDeserializationContext()
  - com.fasterxml.jackson.databind.ObjectMapper.getFactory()
  - com.fasterxml.jackson.databind.ObjectMapper.getInjectableValues()
  - com.fasterxml.jackson.databind.ObjectMapper.getJsonFactory()
  - com.fasterxml.jackson.databind.ObjectMapper.getNodeFactory()
  - com.fasterxml.jackson.databind.ObjectMapper.getPolymorphicTypeValidator()
  - com.fasterxml.jackson.databind.ObjectMapper.getPropertyNamingStrategy()
  - com.fasterxml.jackson.databind.ObjectMapper.getRegisteredModuleIds()
  - com.fasterxml.jackson.databind.ObjectMapper.getSerializationConfig()
  - com.fasterxml.jackson.databind.ObjectMapper.getSerializerFactory()
  - com.fasterxml.jackson.databind.ObjectMapper.getSerializerProvider()
  - com.fasterxml.jackson.databind.ObjectMapper.getSerializerProviderInstance()
  - com.fasterxml.jackson.databind.ObjectMapper.getSubtypeResolver()
  - com.fasterxml.jackson.databind.ObjectMapper.getTypeFactory()
  - com.fasterxml.jackson.databind.ObjectMapper.getVisibilityChecker()
  - com.fasterxml.jackson.databind.ObjectMapper.isEnabled(com.fasterxml.jackson.core.JsonFactory.Feature)
  - com.fasterxml.jackson.databind.ObjectMapper.isEnabled(com.fasterxml.jackson.core.JsonGenerator.Feature)
  - com.fasterxml.jackson.databind.ObjectMapper.isEnabled(com.fasterxml.jackson.core.JsonParser.Feature)
  - com.fasterxml.jackson.databind.ObjectMapper.isEnabled(com.fasterxml.jackson.core.StreamReadFeature)
  - com.fasterxml.jackson.databind.ObjectMapper.isEnabled(com.fasterxml.jackson.core.StreamWriteFeature)
  - com.fasterxml.jackson.databind.ObjectMapper.isEnabled(com.fasterxml.jackson.databind.DeserializationFeature)
  - com.fasterxml.jackson.databind.ObjectMapper.isEnabled(com.fasterxml.jackson.databind.MapperFeature)
  - com.fasterxml.jackson.databind.ObjectMapper.isEnabled(com.fasterxml.jackson.databind.SerializationFeature)
  - com.fasterxml.jackson.databind.ObjectMapper.missingNode()
  - com.fasterxml.jackson.databind.ObjectMapper.mixInCount()
  - com.fasterxml.jackson.databind.ObjectMapper.nullNode()
  - com.fasterxml.jackson.databind.ObjectMapper.readTree(byte[])
  - com.fasterxml.jackson.databind.ObjectMapper.readTree(byte[],int,int)
  - com.fasterxml.jackson.databind.ObjectMapper.readTree(java.io.File)
  - com.fasterxml.jackson.databind.ObjectMapper.readTree(java.io.InputStream)
  - com.fasterxml.jackson.databind.ObjectMapper.readTree(java.io.Reader)
  - com.fasterxml.jackson.databind.ObjectMapper.readTree(java.lang.String)
  - com.fasterxml.jackson.databind.ObjectMapper.readTree(java.net.URL)
  - com.fasterxml.jackson.databind.ObjectMapper.reader()
  - com.fasterxml.jackson.databind.ObjectMapper.reader(com.fasterxml.jackson.core.Base64Variant)
  - com.fasterxml.jackson.databind.ObjectMapper.reader(com.fasterxml.jackson.core.FormatSchema)
  - com.fasterxml.jackson.databind.ObjectMapper.reader(com.fasterxml.jackson.core.type.TypeReference<?>)
  - com.fasterxml.jackson.databind.ObjectMapper.reader(com.fasterxml.jackson.databind.DeserializationFeature)
  - com.fasterxml.jackson.databind.ObjectMapper.reader(com.fasterxml.jackson.databind.DeserializationFeature,com.fasterxml.jackson.databind.DeserializationFeature...)
  - com.fasterxml.jackson.databind.ObjectMapper.reader(com.fasterxml.jackson.databind.InjectableValues)
  - com.fasterxml.jackson.databind.ObjectMapper.reader(com.fasterxml.jackson.databind.JavaType)
  - com.fasterxml.jackson.databind.ObjectMapper.reader(com.fasterxml.jackson.databind.cfg.ContextAttributes)
  - com.fasterxml.jackson.databind.ObjectMapper.reader(com.fasterxml.jackson.databind.node.JsonNodeFactory)
  - com.fasterxml.jackson.databind.ObjectMapper.reader(java.lang.Class<?>)
  - com.fasterxml.jackson.databind.ObjectMapper.readerFor(com.fasterxml.jackson.core.type.TypeReference<?>)
  - com.fasterxml.jackson.databind.ObjectMapper.readerFor(com.fasterxml.jackson.databind.JavaType)
  - com.fasterxml.jackson.databind.ObjectMapper.readerFor(java.lang.Class<?>)
  - com.fasterxml.jackson.databind.ObjectMapper.readerForArrayOf(java.lang.Class<?>)
  - com.fasterxml.jackson.databind.ObjectMapper.readerForListOf(java.lang.Class<?>)
  - com.fasterxml.jackson.databind.ObjectMapper.readerForMapOf(java.lang.Class<?>)
  - com.fasterxml.jackson.databind.ObjectMapper.readerForUpdating(java.lang.Object)
  - com.fasterxml.jackson.databind.ObjectMapper.readerWithView(java.lang.Class<?>)
  - com.fasterxml.jackson.databind.ObjectMapper.registerModule(com.fasterxml.jackson.databind.Module)
  - com.fasterxml.jackson.databind.ObjectMapper.registerModules(com.fasterxml.jackson.databind.Module...)
  - com.fasterxml.jackson.databind.ObjectMapper.registerModules(java.lang.Iterable<? extends com.fasterxml.jackson.databind.Module>)
  - com.fasterxml.jackson.databind.ObjectMapper.registerSubtypes(com.fasterxml.jackson.databind.jsontype.NamedType...)
  - com.fasterxml.jackson.databind.ObjectMapper.registerSubtypes(java.lang.Class<?>...)
  - com.fasterxml.jackson.databind.ObjectMapper.registerSubtypes(java.util.Collection<java.lang.Class<?>>)
  - com.fasterxml.jackson.databind.ObjectMapper.setAnnotationIntrospector(com.fasterxml.jackson.databind.AnnotationIntrospector)
  - com.fasterxml.jackson.databind.ObjectMapper.setAnnotationIntrospectors(com.fasterxml.jackson.databind.AnnotationIntrospector,com.fasterxml.jackson.databind.AnnotationIntrospector)
  - com.fasterxml.jackson.databind.ObjectMapper.setBase64Variant(com.fasterxml.jackson.core.Base64Variant)
  - com.fasterxml.jackson.databind.ObjectMapper.setConfig(com.fasterxml.jackson.databind.DeserializationConfig)
  - com.fasterxml.jackson.databind.ObjectMapper.setConfig(com.fasterxml.jackson.databind.SerializationConfig)
  - com.fasterxml.jackson.databind.ObjectMapper.setDateFormat(java.text.DateFormat)
  - com.fasterxml.jackson.databind.ObjectMapper.setDefaultLeniency(java.lang.Boolean)
  - com.fasterxml.jackson.databind.ObjectMapper.setDefaultMergeable(java.lang.Boolean)
  - com.fasterxml.jackson.databind.ObjectMapper.setDefaultPrettyPrinter(com.fasterxml.jackson.core.PrettyPrinter)
  - com.fasterxml.jackson.databind.ObjectMapper.setDefaultPropertyInclusion(com.fasterxml.jackson.annotation.JsonInclude.Include)
  - com.fasterxml.jackson.databind.ObjectMapper.setDefaultPropertyInclusion(com.fasterxml.jackson.annotation.JsonInclude.Value)
  - com.fasterxml.jackson.databind.ObjectMapper.setDefaultSetterInfo(com.fasterxml.jackson.annotation.JsonSetter.Value)
  - com.fasterxml.jackson.databind.ObjectMapper.setDefaultTyping(com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder<?>)
  - com.fasterxml.jackson.databind.ObjectMapper.setDefaultVisibility(com.fasterxml.jackson.annotation.JsonAutoDetect.Value)
  - com.fasterxml.jackson.databind.ObjectMapper.setFilterProvider(com.fasterxml.jackson.databind.ser.FilterProvider)
  - com.fasterxml.jackson.databind.ObjectMapper.setFilters(com.fasterxml.jackson.databind.ser.FilterProvider)
  - com.fasterxml.jackson.databind.ObjectMapper.setHandlerInstantiator(com.fasterxml.jackson.databind.cfg.HandlerInstantiator)
  - com.fasterxml.jackson.databind.ObjectMapper.setInjectableValues(com.fasterxml.jackson.databind.InjectableValues)
  - com.fasterxml.jackson.databind.ObjectMapper.setLocale(java.util.Locale)
  - com.fasterxml.jackson.databind.ObjectMapper.setMixInAnnotations(java.util.Map<java.lang.Class<?>,java.lang.Class<?>>)
  - com.fasterxml.jackson.databind.ObjectMapper.setMixInResolver(com.fasterxml.jackson.databind.introspect.ClassIntrospector.MixInResolver)
  - com.fasterxml.jackson.databind.ObjectMapper.setMixIns(java.util.Map<java.lang.Class<?>,java.lang.Class<?>>)
  - com.fasterxml.jackson.databind.ObjectMapper.setNodeFactory(com.fasterxml.jackson.databind.node.JsonNodeFactory)
  - com.fasterxml.jackson.databind.ObjectMapper.setPolymorphicTypeValidator(com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator)
  - com.fasterxml.jackson.databind.ObjectMapper.setPropertyInclusion(com.fasterxml.jackson.annotation.JsonInclude.Value)
  - com.fasterxml.jackson.databind.ObjectMapper.setPropertyNamingStrategy(com.fasterxml.jackson.databind.PropertyNamingStrategy)
  - com.fasterxml.jackson.databind.ObjectMapper.setSerializationInclusion(com.fasterxml.jackson.annotation.JsonInclude.Include)
  - com.fasterxml.jackson.databind.ObjectMapper.setSerializerFactory(com.fasterxml.jackson.databind.ser.SerializerFactory)
  - com.fasterxml.jackson.databind.ObjectMapper.setSerializerProvider(com.fasterxml.jackson.databind.ser.DefaultSerializerProvider)
  - com.fasterxml.jackson.databind.ObjectMapper.setSubtypeResolver(com.fasterxml.jackson.databind.jsontype.SubtypeResolver)
  - com.fasterxml.jackson.databind.ObjectMapper.setTimeZone(java.util.TimeZone)
  - com.fasterxml.jackson.databind.ObjectMapper.setTypeFactory(com.fasterxml.jackson.databind.type.TypeFactory)
  - com.fasterxml.jackson.databind.ObjectMapper.setVisibility(com.fasterxml.jackson.annotation.PropertyAccessor,com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility)
  - com.fasterxml.jackson.databind.ObjectMapper.setVisibility(com.fasterxml.jackson.databind.introspect.VisibilityChecker<?>)
  - com.fasterxml.jackson.databind.ObjectMapper.setVisibilityChecker(com.fasterxml.jackson.databind.introspect.VisibilityChecker<?>)
  - com.fasterxml.jackson.databind.ObjectMapper.tokenStreamFactory()
  - com.fasterxml.jackson.databind.ObjectMapper.treeAsTokens(com.fasterxml.jackson.core.TreeNode)
  - com.fasterxml.jackson.databind.ObjectMapper.version()
  - com.fasterxml.jackson.databind.ObjectMapper.writeTree(com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.core.TreeNode)
  - com.fasterxml.jackson.databind.ObjectMapper.writeTree(com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.JsonNode)
  - com.fasterxml.jackson.databind.ObjectMapper.writeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)
  - com.fasterxml.jackson.databind.ObjectMapper.writeValue(java.io.DataOutput,java.lang.Object)
  - com.fasterxml.jackson.databind.ObjectMapper.writeValue(java.io.File,java.lang.Object)
  - com.fasterxml.jackson.databind.ObjectMapper.writeValue(java.io.OutputStream,java.lang.Object)
  - com.fasterxml.jackson.databind.ObjectMapper.writeValue(java.io.Writer,java.lang.Object)
  - com.fasterxml.jackson.databind.ObjectMapper.writeValueAsBytes(java.lang.Object)
  - com.fasterxml.jackson.databind.ObjectMapper.writeValueAsString(java.lang.Object)
  - com.fasterxml.jackson.databind.ObjectMapper.writer()
  - com.fasterxml.jackson.databind.ObjectMapper.writer(com.fasterxml.jackson.core.Base64Variant)
  - com.fasterxml.jackson.databind.ObjectMapper.writer(com.fasterxml.jackson.core.FormatSchema)
  - com.fasterxml.jackson.databind.ObjectMapper.writer(com.fasterxml.jackson.core.PrettyPrinter)
  - com.fasterxml.jackson.databind.ObjectMapper.writer(com.fasterxml.jackson.core.io.CharacterEscapes)
  - com.fasterxml.jackson.databind.ObjectMapper.writer(com.fasterxml.jackson.databind.SerializationFeature)
  - com.fasterxml.jackson.databind.ObjectMapper.writer(com.fasterxml.jackson.databind.SerializationFeature,com.fasterxml.jackson.databind.SerializationFeature...)
  - com.fasterxml.jackson.databind.ObjectMapper.writer(com.fasterxml.jackson.databind.cfg.ContextAttributes)
  - com.fasterxml.jackson.databind.ObjectMapper.writer(com.fasterxml.jackson.databind.ser.FilterProvider)
  - com.fasterxml.jackson.databind.ObjectMapper.writer(java.text.DateFormat)
  - com.fasterxml.jackson.databind.ObjectMapper.writerFor(com.fasterxml.jackson.core.type.TypeReference<?>)
  - com.fasterxml.jackson.databind.ObjectMapper.writerFor(com.fasterxml.jackson.databind.JavaType)
  - com.fasterxml.jackson.databind.ObjectMapper.writerFor(java.lang.Class<?>)
  - com.fasterxml.jackson.databind.ObjectMapper.writerWithDefaultPrettyPrinter()
  - com.fasterxml.jackson.databind.ObjectMapper.writerWithType(com.fasterxml.jackson.core.type.TypeReference<?>)
  - com.fasterxml.jackson.databind.ObjectMapper.writerWithType(com.fasterxml.jackson.databind.JavaType)
  - com.fasterxml.jackson.databind.ObjectMapper.writerWithType(java.lang.Class<?>)
  - com.fasterxml.jackson.databind.ObjectMapper.writerWithView(java.lang.Class<?>)
  langs:
  - java
  name: ObjectMapper
  nameWithType: ObjectMapper
  fullName: com.fasterxml.jackson.databind.ObjectMapper
  type: Class
  package: com.fasterxml.jackson.databind
  summary: >-
    ObjectMapper provides functionality for reading and writing JSON, either to and from basic POJOs (Plain Old Java Objects), or to and from a general-purpose JSON Tree Model (<xref uid="com.fasterxml.jackson.databind.JsonNode" data-throw-if-not-resolved="false">JsonNode</xref>), as well as related functionality for performing conversions. It is also highly customizable to work both with different styles of JSON content, and to support more advanced Object concepts such as polymorphism and Object identity. `ObjectMapper` also acts as a factory for more advanced <xref uid="com.fasterxml.jackson.databind.ObjectReader" data-throw-if-not-resolved="false">ObjectReader</xref> and <xref uid="com.fasterxml.jackson.databind.ObjectWriter" data-throw-if-not-resolved="false">ObjectWriter</xref> classes. Mapper (and <xref uid="com.fasterxml.jackson.databind.ObjectReader" data-throw-if-not-resolved="false">ObjectReader</xref>s, <xref uid="com.fasterxml.jackson.databind.ObjectWriter" data-throw-if-not-resolved="false">ObjectWriter</xref>s it constructs) will use instances of <xref uid="com.fasterxml.jackson.core.JsonParser" data-throw-if-not-resolved="false">JsonParser</xref> and <xref uid="com.fasterxml.jackson.core.JsonGenerator" data-throw-if-not-resolved="false">JsonGenerator</xref> for implementing actual reading/writing of JSON. Note that although most read and write methods are exposed through this class, some of the functionality is only exposed via <xref uid="com.fasterxml.jackson.databind.ObjectReader" data-throw-if-not-resolved="false">ObjectReader</xref> and <xref uid="com.fasterxml.jackson.databind.ObjectWriter" data-throw-if-not-resolved="false">ObjectWriter</xref>: specifically, reading/writing of longer sequences of values is only available through <xref uid="com.fasterxml.jackson.databind.ObjectReader.&lt;T&gt;readValues(java.io.InputStream)" data-throw-if-not-resolved="false">ObjectReader#readValues(InputStream)</xref> and <xref uid="com.fasterxml.jackson.databind.ObjectWriter.writeValues(java.io.OutputStream)" data-throw-if-not-resolved="false">ObjectWriter#writeValues(OutputStream)</xref>.


    Simplest usage is of form:


    ```java

    final ObjectMapper mapper = new ObjectMapper(); // can use static singleton, inject: just make sure to reuse!
      MyValue value = new MyValue();
      // ... and configure
      File newState = new File("my-stuff.json");
      mapper.writeValue(newState, value); // writes JSON serialization of MyValue instance
      // or, read
      MyValue older = mapper.readValue(new File("my-older-stuff.json"), MyValue.class);

      // Or if you prefer JSON Tree representation:
      JsonNode root = mapper.readTree(newState);
      // and find values by, for example, using a com.fasterxml.jackson.core.JsonPointer expression:
      int age = root.at("/personal/age").getValueAsInt();
    ```


    The main conversion API is defined in <xref uid="com.fasterxml.jackson.core.ObjectCodec" data-throw-if-not-resolved="false">ObjectCodec</xref>, so that implementation details of this class need not be exposed to streaming parser and generator classes. Usage via <xref uid="com.fasterxml.jackson.core.ObjectCodec" data-throw-if-not-resolved="false">ObjectCodec</xref> is, however, usually only for cases where dependency to <xref uid="com.fasterxml.jackson.databind.ObjectMapper" data-throw-if-not-resolved="false">ObjectMapper</xref> is either not possible (from Streaming API), or undesireable (when only relying on Streaming API).


    Mapper instances are fully thread-safe provided that ALL configuration of the instance occurs before ANY read or write calls. If configuration of a mapper instance is modified after first usage, changes may or may not take effect, and configuration calls themselves may fail. If you need to use different configuration, you have two main possibilities:

     *  Construct and use <xref uid="com.fasterxml.jackson.databind.ObjectReader" data-throw-if-not-resolved="false">ObjectReader</xref> for reading, <xref uid="com.fasterxml.jackson.databind.ObjectWriter" data-throw-if-not-resolved="false">ObjectWriter</xref> for writing. Both types are fully immutable and you can freely create new instances with different configuration using either factory methods of <xref uid="com.fasterxml.jackson.databind.ObjectMapper" data-throw-if-not-resolved="false">ObjectMapper</xref>, or readers/writers themselves. Construction of new <xref uid="com.fasterxml.jackson.databind.ObjectReader" data-throw-if-not-resolved="false">ObjectReader</xref>s and <xref uid="com.fasterxml.jackson.databind.ObjectWriter" data-throw-if-not-resolved="false">ObjectWriter</xref>s is a very light-weight operation so it is usually appropriate to create these on per-call basis, as needed, for configuring things like optional indentation of JSON.
     *  If the specific kind of configurability is not available via <xref uid="com.fasterxml.jackson.databind.ObjectReader" data-throw-if-not-resolved="false">ObjectReader</xref> and <xref uid="com.fasterxml.jackson.databind.ObjectWriter" data-throw-if-not-resolved="false">ObjectWriter</xref>, you may need to use multiple <xref uid="com.fasterxml.jackson.databind.ObjectMapper" data-throw-if-not-resolved="false">ObjectMapper</xref> instead (for example: you cannot change mix-in annotations on-the-fly; or, set of custom (de)serializers). To help with this usage, you may want to use method <xref uid="com.fasterxml.jackson.databind.ObjectMapper.copy()" data-throw-if-not-resolved="false">#copy()</xref> which creates a clone of the mapper with specific configuration, and allows configuration of the copied instance before it gets used. Note that <xref uid="com.fasterxml.jackson.databind.ObjectMapper.copy*" data-throw-if-not-resolved="false">#copy</xref> operation is as expensive as constructing a new <xref uid="com.fasterxml.jackson.databind.ObjectMapper" data-throw-if-not-resolved="false">ObjectMapper</xref> instance: if possible, you should still pool and reuse mappers if you intend to use them for multiple operations.

    Note on caching: root-level deserializers are always cached, and accessed using full (generics-aware) type information. This is different from caching of referenced types, which is more limited and is done only for a subset of all deserializer types. The main reason for difference is that at root-level there is no incoming reference (and hence no referencing property, no referral information or annotations to produce differing deserializers), and that the performance impact greatest at root level (since it'll essentially cache the full graph of deserializers involved).


    Notes on security: use "default typing" feature (see <xref uid="com.fasterxml.jackson.databind.ObjectMapper.enableDefaultTyping()" data-throw-if-not-resolved="false">#enableDefaultTyping()</xref>) is a potential security risk, if used with untrusted content (content generated by untrusted external parties). If so, you may want to construct a custom <xref uid="com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder" data-throw-if-not-resolved="false">TypeResolverBuilder</xref> implementation to limit possible types to instantiate, (using <xref uid="com.fasterxml.jackson.databind.ObjectMapper.setDefaultTyping*" data-throw-if-not-resolved="false">#setDefaultTyping</xref>).
  syntax:
    content: public class ObjectMapper extends ObjectCodec implements Versioned, Serializable
  inheritance:
  - java.lang.Object
  - com.fasterxml.jackson.core.TreeCodec
  - com.fasterxml.jackson.core.ObjectCodec
  implements:
  - com.fasterxml.jackson.core.Versioned
  - java.io.Serializable
  inheritedMembers:
  - com.fasterxml.jackson.core.ObjectCodec.<T>readTree(com.fasterxml.jackson.core.JsonParser)
  - com.fasterxml.jackson.core.ObjectCodec.<T>readValue(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.core.type.ResolvedType)
  - com.fasterxml.jackson.core.ObjectCodec.<T>readValue(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.core.type.TypeReference<T>)
  - com.fasterxml.jackson.core.ObjectCodec.<T>readValue(com.fasterxml.jackson.core.JsonParser,java.lang.Class<T>)
  - com.fasterxml.jackson.core.ObjectCodec.<T>readValues(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.core.type.ResolvedType)
  - com.fasterxml.jackson.core.ObjectCodec.<T>readValues(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.core.type.TypeReference<T>)
  - com.fasterxml.jackson.core.ObjectCodec.<T>readValues(com.fasterxml.jackson.core.JsonParser,java.lang.Class<T>)
  - com.fasterxml.jackson.core.ObjectCodec.<T>treeToValue(com.fasterxml.jackson.core.TreeNode,java.lang.Class<T>)
  - com.fasterxml.jackson.core.ObjectCodec.createArrayNode()
  - com.fasterxml.jackson.core.ObjectCodec.createObjectNode()
  - com.fasterxml.jackson.core.ObjectCodec.getFactory()
  - com.fasterxml.jackson.core.ObjectCodec.getJsonFactory()
  - com.fasterxml.jackson.core.ObjectCodec.treeAsTokens(com.fasterxml.jackson.core.TreeNode)
  - com.fasterxml.jackson.core.ObjectCodec.version()
  - com.fasterxml.jackson.core.ObjectCodec.writeTree(com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.core.TreeNode)
  - com.fasterxml.jackson.core.ObjectCodec.writeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)
  - com.fasterxml.jackson.core.TreeCodec.missingNode()
  - com.fasterxml.jackson.core.TreeCodec.nullNode()
  - java.lang.Object.clone()
  - java.lang.Object.equals(java.lang.Object)
  - java.lang.Object.finalize()
  - java.lang.Object.getClass()
  - java.lang.Object.hashCode()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.toString()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
- uid: com.fasterxml.jackson.databind.ObjectMapper.<T>convertValue(java.lang.Object,com.fasterxml.jackson.core.type.TypeReference<T>)
  id: <T>convertValue(java.lang.Object,com.fasterxml.jackson.core.type.TypeReference<T>)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ObjectMapper
  langs:
  - java
  name: <T>convertValue(Object fromValue, TypeReference<T> toValueTypeRef)
  nameWithType: ObjectMapper.<T>convertValue(Object fromValue, TypeReference<T> toValueTypeRef)
  fullName: com.fasterxml.jackson.databind.ObjectMapper.<T>convertValue(Object fromValue, TypeReference<T> toValueTypeRef)
  overload: com.fasterxml.jackson.databind.ObjectMapper.convertValue*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: See <xref uid="com.fasterxml.jackson.databind.ObjectMapper.&lt;T&gt;convertValue(java.lang.Object,java.lang.Class&lt;T&gt;)" data-throw-if-not-resolved="false">#convertValue(Object, Class)</xref>
  syntax:
    content: public T <T>convertValue(Object fromValue, TypeReference<T> toValueTypeRef)
    parameters:
    - id: fromValue
      type: java.lang.Object
    - id: toValueTypeRef
      type: com.fasterxml.jackson.core.type.TypeReference<T>
    return:
      type: T
  exceptions:
  - type: java.lang.IllegalArgumentException
- uid: com.fasterxml.jackson.databind.ObjectMapper.<T>convertValue(java.lang.Object,com.fasterxml.jackson.databind.JavaType)
  id: <T>convertValue(java.lang.Object,com.fasterxml.jackson.databind.JavaType)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ObjectMapper
  langs:
  - java
  name: <T>convertValue(Object fromValue, JavaType toValueType)
  nameWithType: ObjectMapper.<T>convertValue(Object fromValue, JavaType toValueType)
  fullName: com.fasterxml.jackson.databind.ObjectMapper.<T>convertValue(Object fromValue, JavaType toValueType)
  overload: com.fasterxml.jackson.databind.ObjectMapper.convertValue*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: See <xref uid="com.fasterxml.jackson.databind.ObjectMapper.&lt;T&gt;convertValue(java.lang.Object,java.lang.Class&lt;T&gt;)" data-throw-if-not-resolved="false">#convertValue(Object, Class)</xref>
  syntax:
    content: public T <T>convertValue(Object fromValue, JavaType toValueType)
    parameters:
    - id: fromValue
      type: java.lang.Object
    - id: toValueType
      type: com.fasterxml.jackson.databind.JavaType
    return:
      type: T
  exceptions:
  - type: java.lang.IllegalArgumentException
- uid: com.fasterxml.jackson.databind.ObjectMapper.<T>convertValue(java.lang.Object,java.lang.Class<T>)
  id: <T>convertValue(java.lang.Object,java.lang.Class<T>)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ObjectMapper
  langs:
  - java
  name: <T>convertValue(Object fromValue, Class<T> toValueType)
  nameWithType: ObjectMapper.<T>convertValue(Object fromValue, Class<T> toValueType)
  fullName: com.fasterxml.jackson.databind.ObjectMapper.<T>convertValue(Object fromValue, Class<T> toValueType)
  overload: com.fasterxml.jackson.databind.ObjectMapper.convertValue*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: >-
    Convenience method for doing two-step conversion from given value, into instance of given value type, by writing value into temporary buffer and reading from the buffer into specified target type.


    This method is functionally similar to first serializing given value into JSON, and then binding JSON data into value of given type, but should be more efficient since full serialization does not (need to) occur. However, same converters (serializers, deserializers) will be used as for data binding, meaning same object mapper configuration works.


    Note that behavior changed slightly between Jackson 2.9 and 2.10 so that whereas earlier some optimizations were used to avoid write/read cycle in case input was of target type, from 2.10 onwards full processing is always performed. See [databind\#2220][databind_2220] for full details of the change.


    Further note that it is possible that in some cases behavior does differ from full serialize-then-deserialize cycle: in most case differences are unintentional (that is, flaws to fix) and should be reported, but the behavior is not guaranteed to be 100% the same: the goal is to allow efficient value conversions for structurally compatible Objects, according to standard Jackson configuration.


    Finally, this functionality is not designed to support "advanced" use cases, such as conversion of polymorphic values, or cases where Object Identity is used.



    [databind_2220]: https://github.com/FasterXML/jackson-databind/issues/2220
  syntax:
    content: public T <T>convertValue(Object fromValue, Class<T> toValueType)
    parameters:
    - id: fromValue
      type: java.lang.Object
    - id: toValueType
      type: java.lang.Class<T>
    return:
      type: T
  exceptions:
  - type: java.lang.IllegalArgumentException
    description: >-
      If conversion fails due to incompatible type;
          if so, root cause will contain underlying checked exception data binding
          functionality threw
- uid: com.fasterxml.jackson.databind.ObjectMapper.<T>readTree(com.fasterxml.jackson.core.JsonParser)
  id: <T>readTree(com.fasterxml.jackson.core.JsonParser)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ObjectMapper
  langs:
  - java
  name: <T>readTree(JsonParser p)
  nameWithType: ObjectMapper.<T>readTree(JsonParser p)
  fullName: com.fasterxml.jackson.databind.ObjectMapper.<T>readTree(JsonParser p)
  overload: com.fasterxml.jackson.databind.ObjectMapper.readTree*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: >-
    Method to deserialize JSON content as a tree <xref uid="com.fasterxml.jackson.databind.JsonNode" data-throw-if-not-resolved="false">JsonNode</xref>. Returns <xref uid="com.fasterxml.jackson.databind.JsonNode" data-throw-if-not-resolved="false">JsonNode</xref> that represents the root of the resulting tree, if there was content to read, or `null` if no more content is accessible via passed <xref uid="com.fasterxml.jackson.core.JsonParser" data-throw-if-not-resolved="false">JsonParser</xref>.


    NOTE! Behavior with end-of-input (no more content) differs between this `readTree` method, and all other methods that take input source: latter will return "missing node", NOT `null`
  syntax:
    content: public T <T>readTree(JsonParser p)
    parameters:
    - id: p
      type: com.fasterxml.jackson.core.JsonParser
    return:
      type: T
      description: >-
        a <xref uid="com.fasterxml.jackson.databind.JsonNode" data-throw-if-not-resolved="false">JsonNode</xref>, if valid JSON content found; null
           if input has no content to bind -- note, however, that if
           JSON <code>null</code> token is found, it will be represented
           as a non-null <xref uid="com.fasterxml.jackson.databind.JsonNode" data-throw-if-not-resolved="false">JsonNode</xref> (one that returns <code>true</code>
           for <xref uid="com.fasterxml.jackson.databind.JsonNode.isNull()" data-throw-if-not-resolved="false">JsonNode#isNull()</xref>
  exceptions:
  - type: java.io.IOException
    description: >-
      if a low-level I/O problem (unexpected end-of-input,
         network error) occurs (passed through as-is without additional wrapping -- note
         that this is one case where <xref uid="DeserializationFeature#WRAP_EXCEPTIONS" data-throw-if-not-resolved="false">DeserializationFeature#WRAP_EXCEPTIONS</xref>
         does NOT result in wrapping of exception even if enabled)
  - type: com.fasterxml.jackson.core.JsonProcessingException
    description: >-
      if a low-level I/O problem (unexpected end-of-input,
         network error) occurs (passed through as-is without additional wrapping -- note
         that this is one case where <xref uid="DeserializationFeature#WRAP_EXCEPTIONS" data-throw-if-not-resolved="false">DeserializationFeature#WRAP_EXCEPTIONS</xref>
         does NOT result in wrapping of exception even if enabled)
- uid: com.fasterxml.jackson.databind.ObjectMapper.<T>readValue(byte[],com.fasterxml.jackson.core.type.TypeReference<T>)
  id: <T>readValue(byte[],com.fasterxml.jackson.core.type.TypeReference<T>)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ObjectMapper
  langs:
  - java
  name: <T>readValue(byte[] src, TypeReference<T> valueTypeRef)
  nameWithType: ObjectMapper.<T>readValue(byte[] src, TypeReference<T> valueTypeRef)
  fullName: com.fasterxml.jackson.databind.ObjectMapper.<T>readValue(byte[] src, TypeReference<T> valueTypeRef)
  overload: com.fasterxml.jackson.databind.ObjectMapper.readValue*
  type: Method
  package: com.fasterxml.jackson.databind
  syntax:
    content: public T <T>readValue(byte[] src, TypeReference<T> valueTypeRef)
    parameters:
    - id: src
      type: byte[]
    - id: valueTypeRef
      type: com.fasterxml.jackson.core.type.TypeReference<T>
    return:
      type: T
  exceptions:
  - type: java.io.IOException
  - type: com.fasterxml.jackson.core.JsonParseException
  - type: com.fasterxml.jackson.databind.JsonMappingException
- uid: com.fasterxml.jackson.databind.ObjectMapper.<T>readValue(byte[],com.fasterxml.jackson.databind.JavaType)
  id: <T>readValue(byte[],com.fasterxml.jackson.databind.JavaType)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ObjectMapper
  langs:
  - java
  name: <T>readValue(byte[] src, JavaType valueType)
  nameWithType: ObjectMapper.<T>readValue(byte[] src, JavaType valueType)
  fullName: com.fasterxml.jackson.databind.ObjectMapper.<T>readValue(byte[] src, JavaType valueType)
  overload: com.fasterxml.jackson.databind.ObjectMapper.readValue*
  type: Method
  package: com.fasterxml.jackson.databind
  syntax:
    content: public T <T>readValue(byte[] src, JavaType valueType)
    parameters:
    - id: src
      type: byte[]
    - id: valueType
      type: com.fasterxml.jackson.databind.JavaType
    return:
      type: T
  exceptions:
  - type: java.io.IOException
  - type: com.fasterxml.jackson.core.JsonParseException
  - type: com.fasterxml.jackson.databind.JsonMappingException
- uid: com.fasterxml.jackson.databind.ObjectMapper.<T>readValue(byte[],int,int,com.fasterxml.jackson.core.type.TypeReference<T>)
  id: <T>readValue(byte[],int,int,com.fasterxml.jackson.core.type.TypeReference<T>)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ObjectMapper
  langs:
  - java
  name: <T>readValue(byte[] src, int offset, int len, TypeReference<T> valueTypeRef)
  nameWithType: ObjectMapper.<T>readValue(byte[] src, int offset, int len, TypeReference<T> valueTypeRef)
  fullName: com.fasterxml.jackson.databind.ObjectMapper.<T>readValue(byte[] src, int offset, int len, TypeReference<T> valueTypeRef)
  overload: com.fasterxml.jackson.databind.ObjectMapper.readValue*
  type: Method
  package: com.fasterxml.jackson.databind
  syntax:
    content: public T <T>readValue(byte[] src, int offset, int len, TypeReference<T> valueTypeRef)
    parameters:
    - id: src
      type: byte[]
    - id: offset
      type: int
    - id: len
      type: int
    - id: valueTypeRef
      type: com.fasterxml.jackson.core.type.TypeReference<T>
    return:
      type: T
  exceptions:
  - type: java.io.IOException
  - type: com.fasterxml.jackson.core.JsonParseException
  - type: com.fasterxml.jackson.databind.JsonMappingException
- uid: com.fasterxml.jackson.databind.ObjectMapper.<T>readValue(byte[],int,int,com.fasterxml.jackson.databind.JavaType)
  id: <T>readValue(byte[],int,int,com.fasterxml.jackson.databind.JavaType)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ObjectMapper
  langs:
  - java
  name: <T>readValue(byte[] src, int offset, int len, JavaType valueType)
  nameWithType: ObjectMapper.<T>readValue(byte[] src, int offset, int len, JavaType valueType)
  fullName: com.fasterxml.jackson.databind.ObjectMapper.<T>readValue(byte[] src, int offset, int len, JavaType valueType)
  overload: com.fasterxml.jackson.databind.ObjectMapper.readValue*
  type: Method
  package: com.fasterxml.jackson.databind
  syntax:
    content: public T <T>readValue(byte[] src, int offset, int len, JavaType valueType)
    parameters:
    - id: src
      type: byte[]
    - id: offset
      type: int
    - id: len
      type: int
    - id: valueType
      type: com.fasterxml.jackson.databind.JavaType
    return:
      type: T
  exceptions:
  - type: java.io.IOException
  - type: com.fasterxml.jackson.core.JsonParseException
  - type: com.fasterxml.jackson.databind.JsonMappingException
- uid: com.fasterxml.jackson.databind.ObjectMapper.<T>readValue(byte[],int,int,java.lang.Class<T>)
  id: <T>readValue(byte[],int,int,java.lang.Class<T>)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ObjectMapper
  langs:
  - java
  name: <T>readValue(byte[] src, int offset, int len, Class<T> valueType)
  nameWithType: ObjectMapper.<T>readValue(byte[] src, int offset, int len, Class<T> valueType)
  fullName: com.fasterxml.jackson.databind.ObjectMapper.<T>readValue(byte[] src, int offset, int len, Class<T> valueType)
  overload: com.fasterxml.jackson.databind.ObjectMapper.readValue*
  type: Method
  package: com.fasterxml.jackson.databind
  syntax:
    content: public T <T>readValue(byte[] src, int offset, int len, Class<T> valueType)
    parameters:
    - id: src
      type: byte[]
    - id: offset
      type: int
    - id: len
      type: int
    - id: valueType
      type: java.lang.Class<T>
    return:
      type: T
  exceptions:
  - type: java.io.IOException
  - type: com.fasterxml.jackson.core.JsonParseException
  - type: com.fasterxml.jackson.databind.JsonMappingException
- uid: com.fasterxml.jackson.databind.ObjectMapper.<T>readValue(byte[],java.lang.Class<T>)
  id: <T>readValue(byte[],java.lang.Class<T>)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ObjectMapper
  langs:
  - java
  name: <T>readValue(byte[] src, Class<T> valueType)
  nameWithType: ObjectMapper.<T>readValue(byte[] src, Class<T> valueType)
  fullName: com.fasterxml.jackson.databind.ObjectMapper.<T>readValue(byte[] src, Class<T> valueType)
  overload: com.fasterxml.jackson.databind.ObjectMapper.readValue*
  type: Method
  package: com.fasterxml.jackson.databind
  syntax:
    content: public T <T>readValue(byte[] src, Class<T> valueType)
    parameters:
    - id: src
      type: byte[]
    - id: valueType
      type: java.lang.Class<T>
    return:
      type: T
  exceptions:
  - type: java.io.IOException
  - type: com.fasterxml.jackson.core.JsonParseException
  - type: com.fasterxml.jackson.databind.JsonMappingException
- uid: com.fasterxml.jackson.databind.ObjectMapper.<T>readValue(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.core.type.ResolvedType)
  id: <T>readValue(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.core.type.ResolvedType)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ObjectMapper
  langs:
  - java
  name: <T>readValue(JsonParser p, ResolvedType valueType)
  nameWithType: ObjectMapper.<T>readValue(JsonParser p, ResolvedType valueType)
  fullName: com.fasterxml.jackson.databind.ObjectMapper.<T>readValue(JsonParser p, ResolvedType valueType)
  overload: com.fasterxml.jackson.databind.ObjectMapper.readValue*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: Method to deserialize JSON content into a Java type, reference to which is passed as argument. Type is passed using Jackson specific type; instance of which can be constructed using <xref uid="com.fasterxml.jackson.databind.type.TypeFactory" data-throw-if-not-resolved="false">TypeFactory</xref>.
  syntax:
    content: public final T <T>readValue(JsonParser p, ResolvedType valueType)
    parameters:
    - id: p
      type: com.fasterxml.jackson.core.JsonParser
    - id: valueType
      type: com.fasterxml.jackson.core.type.ResolvedType
    return:
      type: T
  exceptions:
  - type: java.io.IOException
    description: >-
      if a low-level I/O problem (unexpected end-of-input,
         network error) occurs (passed through as-is without additional wrapping -- note
         that this is one case where <xref uid="DeserializationFeature#WRAP_EXCEPTIONS" data-throw-if-not-resolved="false">DeserializationFeature#WRAP_EXCEPTIONS</xref>
         does NOT result in wrapping of exception even if enabled)
  - type: com.fasterxml.jackson.core.JsonParseException
    description: >-
      if a low-level I/O problem (unexpected end-of-input,
         network error) occurs (passed through as-is without additional wrapping -- note
         that this is one case where <xref uid="DeserializationFeature#WRAP_EXCEPTIONS" data-throw-if-not-resolved="false">DeserializationFeature#WRAP_EXCEPTIONS</xref>
         does NOT result in wrapping of exception even if enabled)
  - type: com.fasterxml.jackson.databind.JsonMappingException
    description: >-
      if a low-level I/O problem (unexpected end-of-input,
         network error) occurs (passed through as-is without additional wrapping -- note
         that this is one case where <xref uid="DeserializationFeature#WRAP_EXCEPTIONS" data-throw-if-not-resolved="false">DeserializationFeature#WRAP_EXCEPTIONS</xref>
         does NOT result in wrapping of exception even if enabled)
- uid: com.fasterxml.jackson.databind.ObjectMapper.<T>readValue(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.core.type.TypeReference<T>)
  id: <T>readValue(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.core.type.TypeReference<T>)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ObjectMapper
  langs:
  - java
  name: <T>readValue(JsonParser p, TypeReference<T> valueTypeRef)
  nameWithType: ObjectMapper.<T>readValue(JsonParser p, TypeReference<T> valueTypeRef)
  fullName: com.fasterxml.jackson.databind.ObjectMapper.<T>readValue(JsonParser p, TypeReference<T> valueTypeRef)
  overload: com.fasterxml.jackson.databind.ObjectMapper.readValue*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: Method to deserialize JSON content into a Java type, reference to which is passed as argument. Type is passed using so-called "super type token" (see ) and specifically needs to be used if the root type is a parameterized (generic) container type.
  syntax:
    content: public T <T>readValue(JsonParser p, TypeReference<T> valueTypeRef)
    parameters:
    - id: p
      type: com.fasterxml.jackson.core.JsonParser
    - id: valueTypeRef
      type: com.fasterxml.jackson.core.type.TypeReference<T>
    return:
      type: T
  exceptions:
  - type: java.io.IOException
    description: >-
      if a low-level I/O problem (unexpected end-of-input,
         network error) occurs (passed through as-is without additional wrapping -- note
         that this is one case where <xref uid="DeserializationFeature#WRAP_EXCEPTIONS" data-throw-if-not-resolved="false">DeserializationFeature#WRAP_EXCEPTIONS</xref>
         does NOT result in wrapping of exception even if enabled)
  - type: com.fasterxml.jackson.core.JsonParseException
    description: >-
      if a low-level I/O problem (unexpected end-of-input,
         network error) occurs (passed through as-is without additional wrapping -- note
         that this is one case where <xref uid="DeserializationFeature#WRAP_EXCEPTIONS" data-throw-if-not-resolved="false">DeserializationFeature#WRAP_EXCEPTIONS</xref>
         does NOT result in wrapping of exception even if enabled)
  - type: com.fasterxml.jackson.databind.JsonMappingException
    description: >-
      if a low-level I/O problem (unexpected end-of-input,
         network error) occurs (passed through as-is without additional wrapping -- note
         that this is one case where <xref uid="DeserializationFeature#WRAP_EXCEPTIONS" data-throw-if-not-resolved="false">DeserializationFeature#WRAP_EXCEPTIONS</xref>
         does NOT result in wrapping of exception even if enabled)
- uid: com.fasterxml.jackson.databind.ObjectMapper.<T>readValue(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.JavaType)
  id: <T>readValue(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.JavaType)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ObjectMapper
  langs:
  - java
  name: <T>readValue(JsonParser p, JavaType valueType)
  nameWithType: ObjectMapper.<T>readValue(JsonParser p, JavaType valueType)
  fullName: com.fasterxml.jackson.databind.ObjectMapper.<T>readValue(JsonParser p, JavaType valueType)
  overload: com.fasterxml.jackson.databind.ObjectMapper.readValue*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: Type-safe overloaded method, basically alias for <xref uid="com.fasterxml.jackson.databind.ObjectMapper.&lt;T&gt;readValue(com.fasterxml.jackson.core.JsonParser,java.lang.Class&lt;T&gt;)" data-throw-if-not-resolved="false">#readValue(JsonParser, Class)</xref>.
  syntax:
    content: public T <T>readValue(JsonParser p, JavaType valueType)
    parameters:
    - id: p
      type: com.fasterxml.jackson.core.JsonParser
    - id: valueType
      type: com.fasterxml.jackson.databind.JavaType
    return:
      type: T
  exceptions:
  - type: java.io.IOException
    description: >-
      if a low-level I/O problem (unexpected end-of-input,
         network error) occurs (passed through as-is without additional wrapping -- note
         that this is one case where <xref uid="DeserializationFeature#WRAP_EXCEPTIONS" data-throw-if-not-resolved="false">DeserializationFeature#WRAP_EXCEPTIONS</xref>
         does NOT result in wrapping of exception even if enabled)
  - type: com.fasterxml.jackson.core.JsonParseException
    description: >-
      if a low-level I/O problem (unexpected end-of-input,
         network error) occurs (passed through as-is without additional wrapping -- note
         that this is one case where <xref uid="DeserializationFeature#WRAP_EXCEPTIONS" data-throw-if-not-resolved="false">DeserializationFeature#WRAP_EXCEPTIONS</xref>
         does NOT result in wrapping of exception even if enabled)
  - type: com.fasterxml.jackson.databind.JsonMappingException
    description: >-
      if a low-level I/O problem (unexpected end-of-input,
         network error) occurs (passed through as-is without additional wrapping -- note
         that this is one case where <xref uid="DeserializationFeature#WRAP_EXCEPTIONS" data-throw-if-not-resolved="false">DeserializationFeature#WRAP_EXCEPTIONS</xref>
         does NOT result in wrapping of exception even if enabled)
- uid: com.fasterxml.jackson.databind.ObjectMapper.<T>readValue(com.fasterxml.jackson.core.JsonParser,java.lang.Class<T>)
  id: <T>readValue(com.fasterxml.jackson.core.JsonParser,java.lang.Class<T>)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ObjectMapper
  langs:
  - java
  name: <T>readValue(JsonParser p, Class<T> valueType)
  nameWithType: ObjectMapper.<T>readValue(JsonParser p, Class<T> valueType)
  fullName: com.fasterxml.jackson.databind.ObjectMapper.<T>readValue(JsonParser p, Class<T> valueType)
  overload: com.fasterxml.jackson.databind.ObjectMapper.readValue*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: >-
    Method to deserialize JSON content into a non-container type (it can be an array type, however): typically a bean, array or a wrapper type (like <xref uid="java.lang.Boolean" data-throw-if-not-resolved="false">java.lang.Boolean</xref>).


    Note: this method should NOT be used if the result type is a container (<xref uid="java.util.Collection" data-throw-if-not-resolved="false">java.util.Collection</xref> or <xref uid="java.util.Map" data-throw-if-not-resolved="false">java.util.Map</xref>. The reason is that due to type erasure, key and value types cannot be introspected when using this method.
  syntax:
    content: public T <T>readValue(JsonParser p, Class<T> valueType)
    parameters:
    - id: p
      type: com.fasterxml.jackson.core.JsonParser
    - id: valueType
      type: java.lang.Class<T>
    return:
      type: T
  exceptions:
  - type: java.io.IOException
    description: >-
      if a low-level I/O problem (unexpected end-of-input,
         network error) occurs (passed through as-is without additional wrapping -- note
         that this is one case where <xref uid="DeserializationFeature#WRAP_EXCEPTIONS" data-throw-if-not-resolved="false">DeserializationFeature#WRAP_EXCEPTIONS</xref>
         does NOT result in wrapping of exception even if enabled)
  - type: com.fasterxml.jackson.core.JsonParseException
    description: >-
      if a low-level I/O problem (unexpected end-of-input,
         network error) occurs (passed through as-is without additional wrapping -- note
         that this is one case where <xref uid="DeserializationFeature#WRAP_EXCEPTIONS" data-throw-if-not-resolved="false">DeserializationFeature#WRAP_EXCEPTIONS</xref>
         does NOT result in wrapping of exception even if enabled)
  - type: com.fasterxml.jackson.databind.JsonMappingException
    description: >-
      if a low-level I/O problem (unexpected end-of-input,
         network error) occurs (passed through as-is without additional wrapping -- note
         that this is one case where <xref uid="DeserializationFeature#WRAP_EXCEPTIONS" data-throw-if-not-resolved="false">DeserializationFeature#WRAP_EXCEPTIONS</xref>
         does NOT result in wrapping of exception even if enabled)
- uid: com.fasterxml.jackson.databind.ObjectMapper.<T>readValue(java.io.DataInput,com.fasterxml.jackson.databind.JavaType)
  id: <T>readValue(java.io.DataInput,com.fasterxml.jackson.databind.JavaType)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ObjectMapper
  langs:
  - java
  name: <T>readValue(DataInput src, JavaType valueType)
  nameWithType: ObjectMapper.<T>readValue(DataInput src, JavaType valueType)
  fullName: com.fasterxml.jackson.databind.ObjectMapper.<T>readValue(DataInput src, JavaType valueType)
  overload: com.fasterxml.jackson.databind.ObjectMapper.readValue*
  type: Method
  package: com.fasterxml.jackson.databind
  syntax:
    content: public T <T>readValue(DataInput src, JavaType valueType)
    parameters:
    - id: src
      type: java.io.DataInput
    - id: valueType
      type: com.fasterxml.jackson.databind.JavaType
    return:
      type: T
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.databind.ObjectMapper.<T>readValue(java.io.DataInput,java.lang.Class<T>)
  id: <T>readValue(java.io.DataInput,java.lang.Class<T>)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ObjectMapper
  langs:
  - java
  name: <T>readValue(DataInput src, Class<T> valueType)
  nameWithType: ObjectMapper.<T>readValue(DataInput src, Class<T> valueType)
  fullName: com.fasterxml.jackson.databind.ObjectMapper.<T>readValue(DataInput src, Class<T> valueType)
  overload: com.fasterxml.jackson.databind.ObjectMapper.readValue*
  type: Method
  package: com.fasterxml.jackson.databind
  syntax:
    content: public T <T>readValue(DataInput src, Class<T> valueType)
    parameters:
    - id: src
      type: java.io.DataInput
    - id: valueType
      type: java.lang.Class<T>
    return:
      type: T
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.databind.ObjectMapper.<T>readValue(java.io.File,com.fasterxml.jackson.core.type.TypeReference<T>)
  id: <T>readValue(java.io.File,com.fasterxml.jackson.core.type.TypeReference<T>)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ObjectMapper
  langs:
  - java
  name: <T>readValue(File src, TypeReference<T> valueTypeRef)
  nameWithType: ObjectMapper.<T>readValue(File src, TypeReference<T> valueTypeRef)
  fullName: com.fasterxml.jackson.databind.ObjectMapper.<T>readValue(File src, TypeReference<T> valueTypeRef)
  overload: com.fasterxml.jackson.databind.ObjectMapper.readValue*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: Method to deserialize JSON content from given file into given Java type.
  syntax:
    content: public T <T>readValue(File src, TypeReference<T> valueTypeRef)
    parameters:
    - id: src
      type: java.io.File
    - id: valueTypeRef
      type: com.fasterxml.jackson.core.type.TypeReference<T>
    return:
      type: T
  exceptions:
  - type: java.io.IOException
    description: >-
      if a low-level I/O problem (unexpected end-of-input,
         network error) occurs (passed through as-is without additional wrapping -- note
         that this is one case where <xref uid="DeserializationFeature#WRAP_EXCEPTIONS" data-throw-if-not-resolved="false">DeserializationFeature#WRAP_EXCEPTIONS</xref>
         does NOT result in wrapping of exception even if enabled)
  - type: com.fasterxml.jackson.core.JsonParseException
    description: >-
      if a low-level I/O problem (unexpected end-of-input,
         network error) occurs (passed through as-is without additional wrapping -- note
         that this is one case where <xref uid="DeserializationFeature#WRAP_EXCEPTIONS" data-throw-if-not-resolved="false">DeserializationFeature#WRAP_EXCEPTIONS</xref>
         does NOT result in wrapping of exception even if enabled)
  - type: com.fasterxml.jackson.databind.JsonMappingException
    description: >-
      if a low-level I/O problem (unexpected end-of-input,
         network error) occurs (passed through as-is without additional wrapping -- note
         that this is one case where <xref uid="DeserializationFeature#WRAP_EXCEPTIONS" data-throw-if-not-resolved="false">DeserializationFeature#WRAP_EXCEPTIONS</xref>
         does NOT result in wrapping of exception even if enabled)
- uid: com.fasterxml.jackson.databind.ObjectMapper.<T>readValue(java.io.File,com.fasterxml.jackson.databind.JavaType)
  id: <T>readValue(java.io.File,com.fasterxml.jackson.databind.JavaType)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ObjectMapper
  langs:
  - java
  name: <T>readValue(File src, JavaType valueType)
  nameWithType: ObjectMapper.<T>readValue(File src, JavaType valueType)
  fullName: com.fasterxml.jackson.databind.ObjectMapper.<T>readValue(File src, JavaType valueType)
  overload: com.fasterxml.jackson.databind.ObjectMapper.readValue*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: Method to deserialize JSON content from given file into given Java type.
  syntax:
    content: public T <T>readValue(File src, JavaType valueType)
    parameters:
    - id: src
      type: java.io.File
    - id: valueType
      type: com.fasterxml.jackson.databind.JavaType
    return:
      type: T
  exceptions:
  - type: java.io.IOException
    description: >-
      if a low-level I/O problem (unexpected end-of-input,
         network error) occurs (passed through as-is without additional wrapping -- note
         that this is one case where <xref uid="DeserializationFeature#WRAP_EXCEPTIONS" data-throw-if-not-resolved="false">DeserializationFeature#WRAP_EXCEPTIONS</xref>
         does NOT result in wrapping of exception even if enabled)
  - type: com.fasterxml.jackson.core.JsonParseException
    description: >-
      if a low-level I/O problem (unexpected end-of-input,
         network error) occurs (passed through as-is without additional wrapping -- note
         that this is one case where <xref uid="DeserializationFeature#WRAP_EXCEPTIONS" data-throw-if-not-resolved="false">DeserializationFeature#WRAP_EXCEPTIONS</xref>
         does NOT result in wrapping of exception even if enabled)
  - type: com.fasterxml.jackson.databind.JsonMappingException
    description: >-
      if a low-level I/O problem (unexpected end-of-input,
         network error) occurs (passed through as-is without additional wrapping -- note
         that this is one case where <xref uid="DeserializationFeature#WRAP_EXCEPTIONS" data-throw-if-not-resolved="false">DeserializationFeature#WRAP_EXCEPTIONS</xref>
         does NOT result in wrapping of exception even if enabled)
- uid: com.fasterxml.jackson.databind.ObjectMapper.<T>readValue(java.io.File,java.lang.Class<T>)
  id: <T>readValue(java.io.File,java.lang.Class<T>)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ObjectMapper
  langs:
  - java
  name: <T>readValue(File src, Class<T> valueType)
  nameWithType: ObjectMapper.<T>readValue(File src, Class<T> valueType)
  fullName: com.fasterxml.jackson.databind.ObjectMapper.<T>readValue(File src, Class<T> valueType)
  overload: com.fasterxml.jackson.databind.ObjectMapper.readValue*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: Method to deserialize JSON content from given file into given Java type.
  syntax:
    content: public T <T>readValue(File src, Class<T> valueType)
    parameters:
    - id: src
      type: java.io.File
    - id: valueType
      type: java.lang.Class<T>
    return:
      type: T
  exceptions:
  - type: java.io.IOException
    description: >-
      if a low-level I/O problem (unexpected end-of-input,
         network error) occurs (passed through as-is without additional wrapping -- note
         that this is one case where <xref uid="DeserializationFeature#WRAP_EXCEPTIONS" data-throw-if-not-resolved="false">DeserializationFeature#WRAP_EXCEPTIONS</xref>
         does NOT result in wrapping of exception even if enabled)
  - type: com.fasterxml.jackson.core.JsonParseException
    description: >-
      if a low-level I/O problem (unexpected end-of-input,
         network error) occurs (passed through as-is without additional wrapping -- note
         that this is one case where <xref uid="DeserializationFeature#WRAP_EXCEPTIONS" data-throw-if-not-resolved="false">DeserializationFeature#WRAP_EXCEPTIONS</xref>
         does NOT result in wrapping of exception even if enabled)
  - type: com.fasterxml.jackson.databind.JsonMappingException
    description: >-
      if a low-level I/O problem (unexpected end-of-input,
         network error) occurs (passed through as-is without additional wrapping -- note
         that this is one case where <xref uid="DeserializationFeature#WRAP_EXCEPTIONS" data-throw-if-not-resolved="false">DeserializationFeature#WRAP_EXCEPTIONS</xref>
         does NOT result in wrapping of exception even if enabled)
- uid: com.fasterxml.jackson.databind.ObjectMapper.<T>readValue(java.io.InputStream,com.fasterxml.jackson.core.type.TypeReference<T>)
  id: <T>readValue(java.io.InputStream,com.fasterxml.jackson.core.type.TypeReference<T>)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ObjectMapper
  langs:
  - java
  name: <T>readValue(InputStream src, TypeReference<T> valueTypeRef)
  nameWithType: ObjectMapper.<T>readValue(InputStream src, TypeReference<T> valueTypeRef)
  fullName: com.fasterxml.jackson.databind.ObjectMapper.<T>readValue(InputStream src, TypeReference<T> valueTypeRef)
  overload: com.fasterxml.jackson.databind.ObjectMapper.readValue*
  type: Method
  package: com.fasterxml.jackson.databind
  syntax:
    content: public T <T>readValue(InputStream src, TypeReference<T> valueTypeRef)
    parameters:
    - id: src
      type: java.io.InputStream
    - id: valueTypeRef
      type: com.fasterxml.jackson.core.type.TypeReference<T>
    return:
      type: T
  exceptions:
  - type: java.io.IOException
  - type: com.fasterxml.jackson.core.JsonParseException
  - type: com.fasterxml.jackson.databind.JsonMappingException
- uid: com.fasterxml.jackson.databind.ObjectMapper.<T>readValue(java.io.InputStream,com.fasterxml.jackson.databind.JavaType)
  id: <T>readValue(java.io.InputStream,com.fasterxml.jackson.databind.JavaType)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ObjectMapper
  langs:
  - java
  name: <T>readValue(InputStream src, JavaType valueType)
  nameWithType: ObjectMapper.<T>readValue(InputStream src, JavaType valueType)
  fullName: com.fasterxml.jackson.databind.ObjectMapper.<T>readValue(InputStream src, JavaType valueType)
  overload: com.fasterxml.jackson.databind.ObjectMapper.readValue*
  type: Method
  package: com.fasterxml.jackson.databind
  syntax:
    content: public T <T>readValue(InputStream src, JavaType valueType)
    parameters:
    - id: src
      type: java.io.InputStream
    - id: valueType
      type: com.fasterxml.jackson.databind.JavaType
    return:
      type: T
  exceptions:
  - type: java.io.IOException
  - type: com.fasterxml.jackson.core.JsonParseException
  - type: com.fasterxml.jackson.databind.JsonMappingException
- uid: com.fasterxml.jackson.databind.ObjectMapper.<T>readValue(java.io.InputStream,java.lang.Class<T>)
  id: <T>readValue(java.io.InputStream,java.lang.Class<T>)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ObjectMapper
  langs:
  - java
  name: <T>readValue(InputStream src, Class<T> valueType)
  nameWithType: ObjectMapper.<T>readValue(InputStream src, Class<T> valueType)
  fullName: com.fasterxml.jackson.databind.ObjectMapper.<T>readValue(InputStream src, Class<T> valueType)
  overload: com.fasterxml.jackson.databind.ObjectMapper.readValue*
  type: Method
  package: com.fasterxml.jackson.databind
  syntax:
    content: public T <T>readValue(InputStream src, Class<T> valueType)
    parameters:
    - id: src
      type: java.io.InputStream
    - id: valueType
      type: java.lang.Class<T>
    return:
      type: T
  exceptions:
  - type: java.io.IOException
  - type: com.fasterxml.jackson.core.JsonParseException
  - type: com.fasterxml.jackson.databind.JsonMappingException
- uid: com.fasterxml.jackson.databind.ObjectMapper.<T>readValue(java.io.Reader,com.fasterxml.jackson.core.type.TypeReference<T>)
  id: <T>readValue(java.io.Reader,com.fasterxml.jackson.core.type.TypeReference<T>)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ObjectMapper
  langs:
  - java
  name: <T>readValue(Reader src, TypeReference<T> valueTypeRef)
  nameWithType: ObjectMapper.<T>readValue(Reader src, TypeReference<T> valueTypeRef)
  fullName: com.fasterxml.jackson.databind.ObjectMapper.<T>readValue(Reader src, TypeReference<T> valueTypeRef)
  overload: com.fasterxml.jackson.databind.ObjectMapper.readValue*
  type: Method
  package: com.fasterxml.jackson.databind
  syntax:
    content: public T <T>readValue(Reader src, TypeReference<T> valueTypeRef)
    parameters:
    - id: src
      type: java.io.Reader
    - id: valueTypeRef
      type: com.fasterxml.jackson.core.type.TypeReference<T>
    return:
      type: T
  exceptions:
  - type: java.io.IOException
  - type: com.fasterxml.jackson.core.JsonParseException
  - type: com.fasterxml.jackson.databind.JsonMappingException
- uid: com.fasterxml.jackson.databind.ObjectMapper.<T>readValue(java.io.Reader,com.fasterxml.jackson.databind.JavaType)
  id: <T>readValue(java.io.Reader,com.fasterxml.jackson.databind.JavaType)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ObjectMapper
  langs:
  - java
  name: <T>readValue(Reader src, JavaType valueType)
  nameWithType: ObjectMapper.<T>readValue(Reader src, JavaType valueType)
  fullName: com.fasterxml.jackson.databind.ObjectMapper.<T>readValue(Reader src, JavaType valueType)
  overload: com.fasterxml.jackson.databind.ObjectMapper.readValue*
  type: Method
  package: com.fasterxml.jackson.databind
  syntax:
    content: public T <T>readValue(Reader src, JavaType valueType)
    parameters:
    - id: src
      type: java.io.Reader
    - id: valueType
      type: com.fasterxml.jackson.databind.JavaType
    return:
      type: T
  exceptions:
  - type: java.io.IOException
  - type: com.fasterxml.jackson.core.JsonParseException
  - type: com.fasterxml.jackson.databind.JsonMappingException
- uid: com.fasterxml.jackson.databind.ObjectMapper.<T>readValue(java.io.Reader,java.lang.Class<T>)
  id: <T>readValue(java.io.Reader,java.lang.Class<T>)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ObjectMapper
  langs:
  - java
  name: <T>readValue(Reader src, Class<T> valueType)
  nameWithType: ObjectMapper.<T>readValue(Reader src, Class<T> valueType)
  fullName: com.fasterxml.jackson.databind.ObjectMapper.<T>readValue(Reader src, Class<T> valueType)
  overload: com.fasterxml.jackson.databind.ObjectMapper.readValue*
  type: Method
  package: com.fasterxml.jackson.databind
  syntax:
    content: public T <T>readValue(Reader src, Class<T> valueType)
    parameters:
    - id: src
      type: java.io.Reader
    - id: valueType
      type: java.lang.Class<T>
    return:
      type: T
  exceptions:
  - type: java.io.IOException
  - type: com.fasterxml.jackson.core.JsonParseException
  - type: com.fasterxml.jackson.databind.JsonMappingException
- uid: com.fasterxml.jackson.databind.ObjectMapper.<T>readValue(java.lang.String,com.fasterxml.jackson.core.type.TypeReference<T>)
  id: <T>readValue(java.lang.String,com.fasterxml.jackson.core.type.TypeReference<T>)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ObjectMapper
  langs:
  - java
  name: <T>readValue(String content, TypeReference<T> valueTypeRef)
  nameWithType: ObjectMapper.<T>readValue(String content, TypeReference<T> valueTypeRef)
  fullName: com.fasterxml.jackson.databind.ObjectMapper.<T>readValue(String content, TypeReference<T> valueTypeRef)
  overload: com.fasterxml.jackson.databind.ObjectMapper.readValue*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: Method to deserialize JSON content from given JSON content String.
  syntax:
    content: public T <T>readValue(String content, TypeReference<T> valueTypeRef)
    parameters:
    - id: content
      type: java.lang.String
    - id: valueTypeRef
      type: com.fasterxml.jackson.core.type.TypeReference<T>
    return:
      type: T
  exceptions:
  - type: com.fasterxml.jackson.core.JsonProcessingException
    description: >-
      if underlying input contains invalid content
          of type <xref uid="JsonParser" data-throw-if-not-resolved="false">JsonParser</xref> supports (JSON for default case)
  - type: com.fasterxml.jackson.databind.JsonMappingException
    description: >-
      if underlying input contains invalid content
          of type <xref uid="JsonParser" data-throw-if-not-resolved="false">JsonParser</xref> supports (JSON for default case)
- uid: com.fasterxml.jackson.databind.ObjectMapper.<T>readValue(java.lang.String,com.fasterxml.jackson.databind.JavaType)
  id: <T>readValue(java.lang.String,com.fasterxml.jackson.databind.JavaType)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ObjectMapper
  langs:
  - java
  name: <T>readValue(String content, JavaType valueType)
  nameWithType: ObjectMapper.<T>readValue(String content, JavaType valueType)
  fullName: com.fasterxml.jackson.databind.ObjectMapper.<T>readValue(String content, JavaType valueType)
  overload: com.fasterxml.jackson.databind.ObjectMapper.readValue*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: Method to deserialize JSON content from given JSON content String.
  syntax:
    content: public T <T>readValue(String content, JavaType valueType)
    parameters:
    - id: content
      type: java.lang.String
    - id: valueType
      type: com.fasterxml.jackson.databind.JavaType
    return:
      type: T
  exceptions:
  - type: com.fasterxml.jackson.core.JsonProcessingException
    description: >-
      if underlying input contains invalid content
          of type <xref uid="JsonParser" data-throw-if-not-resolved="false">JsonParser</xref> supports (JSON for default case)
  - type: com.fasterxml.jackson.databind.JsonMappingException
    description: >-
      if underlying input contains invalid content
          of type <xref uid="JsonParser" data-throw-if-not-resolved="false">JsonParser</xref> supports (JSON for default case)
- uid: com.fasterxml.jackson.databind.ObjectMapper.<T>readValue(java.lang.String,java.lang.Class<T>)
  id: <T>readValue(java.lang.String,java.lang.Class<T>)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ObjectMapper
  langs:
  - java
  name: <T>readValue(String content, Class<T> valueType)
  nameWithType: ObjectMapper.<T>readValue(String content, Class<T> valueType)
  fullName: com.fasterxml.jackson.databind.ObjectMapper.<T>readValue(String content, Class<T> valueType)
  overload: com.fasterxml.jackson.databind.ObjectMapper.readValue*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: Method to deserialize JSON content from given JSON content String.
  syntax:
    content: public T <T>readValue(String content, Class<T> valueType)
    parameters:
    - id: content
      type: java.lang.String
    - id: valueType
      type: java.lang.Class<T>
    return:
      type: T
  exceptions:
  - type: com.fasterxml.jackson.core.JsonProcessingException
    description: >-
      if underlying input contains invalid content
          of type <xref uid="JsonParser" data-throw-if-not-resolved="false">JsonParser</xref> supports (JSON for default case)
  - type: com.fasterxml.jackson.databind.JsonMappingException
    description: >-
      if underlying input contains invalid content
          of type <xref uid="JsonParser" data-throw-if-not-resolved="false">JsonParser</xref> supports (JSON for default case)
- uid: com.fasterxml.jackson.databind.ObjectMapper.<T>readValue(java.net.URL,com.fasterxml.jackson.core.type.TypeReference<T>)
  id: <T>readValue(java.net.URL,com.fasterxml.jackson.core.type.TypeReference<T>)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ObjectMapper
  langs:
  - java
  name: <T>readValue(URL src, TypeReference<T> valueTypeRef)
  nameWithType: ObjectMapper.<T>readValue(URL src, TypeReference<T> valueTypeRef)
  fullName: com.fasterxml.jackson.databind.ObjectMapper.<T>readValue(URL src, TypeReference<T> valueTypeRef)
  overload: com.fasterxml.jackson.databind.ObjectMapper.readValue*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: Same as <xref uid="com.fasterxml.jackson.databind.ObjectMapper.readValue*" data-throw-if-not-resolved="false">#readValue(java.net.URL, Class)</xref> except that target specified by <xref uid="com.fasterxml.jackson.core.type.TypeReference" data-throw-if-not-resolved="false">TypeReference</xref>.
  syntax:
    content: public T <T>readValue(URL src, TypeReference<T> valueTypeRef)
    parameters:
    - id: src
      type: java.net.URL
    - id: valueTypeRef
      type: com.fasterxml.jackson.core.type.TypeReference<T>
    return:
      type: T
  exceptions:
  - type: java.io.IOException
  - type: com.fasterxml.jackson.core.JsonParseException
  - type: com.fasterxml.jackson.databind.JsonMappingException
- uid: com.fasterxml.jackson.databind.ObjectMapper.<T>readValue(java.net.URL,com.fasterxml.jackson.databind.JavaType)
  id: <T>readValue(java.net.URL,com.fasterxml.jackson.databind.JavaType)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ObjectMapper
  langs:
  - java
  name: <T>readValue(URL src, JavaType valueType)
  nameWithType: ObjectMapper.<T>readValue(URL src, JavaType valueType)
  fullName: com.fasterxml.jackson.databind.ObjectMapper.<T>readValue(URL src, JavaType valueType)
  overload: com.fasterxml.jackson.databind.ObjectMapper.readValue*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: Same as <xref uid="com.fasterxml.jackson.databind.ObjectMapper.readValue*" data-throw-if-not-resolved="false">#readValue(java.net.URL, Class)</xref> except that target specified by <xref uid="com.fasterxml.jackson.databind.JavaType" data-throw-if-not-resolved="false">JavaType</xref>.
  syntax:
    content: public T <T>readValue(URL src, JavaType valueType)
    parameters:
    - id: src
      type: java.net.URL
    - id: valueType
      type: com.fasterxml.jackson.databind.JavaType
    return:
      type: T
  exceptions:
  - type: java.io.IOException
  - type: com.fasterxml.jackson.core.JsonParseException
  - type: com.fasterxml.jackson.databind.JsonMappingException
- uid: com.fasterxml.jackson.databind.ObjectMapper.<T>readValue(java.net.URL,java.lang.Class<T>)
  id: <T>readValue(java.net.URL,java.lang.Class<T>)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ObjectMapper
  langs:
  - java
  name: <T>readValue(URL src, Class<T> valueType)
  nameWithType: ObjectMapper.<T>readValue(URL src, Class<T> valueType)
  fullName: com.fasterxml.jackson.databind.ObjectMapper.<T>readValue(URL src, Class<T> valueType)
  overload: com.fasterxml.jackson.databind.ObjectMapper.readValue*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: >-
    Method to deserialize JSON content from given resource into given Java type.


    NOTE: handling of <xref uid="java.net.URL" data-throw-if-not-resolved="false">java.net.URL</xref> is delegated to <xref uid="com.fasterxml.jackson.core.JsonFactory.createParser(java.net.URL)" data-throw-if-not-resolved="false">JsonFactory#createParser(java.net.URL)</xref> and usually simply calls <xref uid="java.net.URL.openStream*" data-throw-if-not-resolved="false">java.net.URL#openStream()</xref>, meaning no special handling is done. If different HTTP connection options are needed you will need to create <xref uid="java.io.InputStream" data-throw-if-not-resolved="false">java.io.InputStream</xref> separately.
  syntax:
    content: public T <T>readValue(URL src, Class<T> valueType)
    parameters:
    - id: src
      type: java.net.URL
    - id: valueType
      type: java.lang.Class<T>
    return:
      type: T
  exceptions:
  - type: java.io.IOException
    description: >-
      if a low-level I/O problem (unexpected end-of-input,
         network error) occurs (passed through as-is without additional wrapping -- note
         that this is one case where <xref uid="DeserializationFeature#WRAP_EXCEPTIONS" data-throw-if-not-resolved="false">DeserializationFeature#WRAP_EXCEPTIONS</xref>
         does NOT result in wrapping of exception even if enabled)
  - type: com.fasterxml.jackson.core.JsonParseException
    description: >-
      if a low-level I/O problem (unexpected end-of-input,
         network error) occurs (passed through as-is without additional wrapping -- note
         that this is one case where <xref uid="DeserializationFeature#WRAP_EXCEPTIONS" data-throw-if-not-resolved="false">DeserializationFeature#WRAP_EXCEPTIONS</xref>
         does NOT result in wrapping of exception even if enabled)
  - type: com.fasterxml.jackson.databind.JsonMappingException
    description: >-
      if a low-level I/O problem (unexpected end-of-input,
         network error) occurs (passed through as-is without additional wrapping -- note
         that this is one case where <xref uid="DeserializationFeature#WRAP_EXCEPTIONS" data-throw-if-not-resolved="false">DeserializationFeature#WRAP_EXCEPTIONS</xref>
         does NOT result in wrapping of exception even if enabled)
- uid: com.fasterxml.jackson.databind.ObjectMapper.<T>readValues(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.core.type.ResolvedType)
  id: <T>readValues(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.core.type.ResolvedType)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ObjectMapper
  langs:
  - java
  name: <T>readValues(JsonParser p, ResolvedType valueType)
  nameWithType: ObjectMapper.<T>readValues(JsonParser p, ResolvedType valueType)
  fullName: com.fasterxml.jackson.databind.ObjectMapper.<T>readValues(JsonParser p, ResolvedType valueType)
  overload: com.fasterxml.jackson.databind.ObjectMapper.readValues*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: >-
    Convenience method, equivalent in function to:


    ```java

    readerFor(valueType).readValues(p);

    ```


    Method for reading sequence of Objects from parser stream. Sequence can be either root-level "unwrapped" sequence (without surrounding JSON array), or a sequence contained in a JSON Array. In either case <xref uid="com.fasterxml.jackson.core.JsonParser" data-throw-if-not-resolved="false">JsonParser</xref> **MUST** point to the first token of the first element, OR not point to any token (in which case it is advanced to the next token). This means, specifically, that for wrapped sequences, parser MUST NOT point to the surrounding `START_ARRAY` (one that contains values to read) but rather to the token following it which is the first token of the first value to read.


    Note that <xref uid="com.fasterxml.jackson.databind.ObjectReader" data-throw-if-not-resolved="false">ObjectReader</xref> has more complete set of variants.
  syntax:
    content: public MappingIterator<T> <T>readValues(JsonParser p, ResolvedType valueType)
    parameters:
    - id: p
      type: com.fasterxml.jackson.core.JsonParser
    - id: valueType
      type: com.fasterxml.jackson.core.type.ResolvedType
    return:
      type: com.fasterxml.jackson.databind.MappingIterator<T>
  exceptions:
  - type: java.io.IOException
  - type: com.fasterxml.jackson.core.JsonProcessingException
- uid: com.fasterxml.jackson.databind.ObjectMapper.<T>readValues(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.core.type.TypeReference<T>)
  id: <T>readValues(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.core.type.TypeReference<T>)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ObjectMapper
  langs:
  - java
  name: <T>readValues(JsonParser p, TypeReference<T> valueTypeRef)
  nameWithType: ObjectMapper.<T>readValues(JsonParser p, TypeReference<T> valueTypeRef)
  fullName: com.fasterxml.jackson.databind.ObjectMapper.<T>readValues(JsonParser p, TypeReference<T> valueTypeRef)
  overload: com.fasterxml.jackson.databind.ObjectMapper.readValues*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: Method for reading sequence of Objects from parser stream.
  syntax:
    content: public MappingIterator<T> <T>readValues(JsonParser p, TypeReference<T> valueTypeRef)
    parameters:
    - id: p
      type: com.fasterxml.jackson.core.JsonParser
    - id: valueTypeRef
      type: com.fasterxml.jackson.core.type.TypeReference<T>
    return:
      type: com.fasterxml.jackson.databind.MappingIterator<T>
  exceptions:
  - type: java.io.IOException
  - type: com.fasterxml.jackson.core.JsonProcessingException
- uid: com.fasterxml.jackson.databind.ObjectMapper.<T>readValues(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.JavaType)
  id: <T>readValues(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.JavaType)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ObjectMapper
  langs:
  - java
  name: <T>readValues(JsonParser p, JavaType valueType)
  nameWithType: ObjectMapper.<T>readValues(JsonParser p, JavaType valueType)
  fullName: com.fasterxml.jackson.databind.ObjectMapper.<T>readValues(JsonParser p, JavaType valueType)
  overload: com.fasterxml.jackson.databind.ObjectMapper.readValues*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: >-
    Convenience method, equivalent in function to:


    ```java

    readerFor(valueType).readValues(p);

    ```


    Type-safe overload of <xref uid="com.fasterxml.jackson.databind.ObjectMapper.&lt;T&gt;readValues(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.core.type.ResolvedType)" data-throw-if-not-resolved="false">#readValues(JsonParser, ResolvedType)</xref>.
  syntax:
    content: public MappingIterator<T> <T>readValues(JsonParser p, JavaType valueType)
    parameters:
    - id: p
      type: com.fasterxml.jackson.core.JsonParser
    - id: valueType
      type: com.fasterxml.jackson.databind.JavaType
    return:
      type: com.fasterxml.jackson.databind.MappingIterator<T>
  exceptions:
  - type: java.io.IOException
  - type: com.fasterxml.jackson.core.JsonProcessingException
- uid: com.fasterxml.jackson.databind.ObjectMapper.<T>readValues(com.fasterxml.jackson.core.JsonParser,java.lang.Class<T>)
  id: <T>readValues(com.fasterxml.jackson.core.JsonParser,java.lang.Class<T>)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ObjectMapper
  langs:
  - java
  name: <T>readValues(JsonParser p, Class<T> valueType)
  nameWithType: ObjectMapper.<T>readValues(JsonParser p, Class<T> valueType)
  fullName: com.fasterxml.jackson.databind.ObjectMapper.<T>readValues(JsonParser p, Class<T> valueType)
  overload: com.fasterxml.jackson.databind.ObjectMapper.readValues*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: >-
    Convenience method, equivalent in function to:


    ```java

    readerFor(valueType).readValues(p);

    ```


    Type-safe overload of <xref uid="com.fasterxml.jackson.databind.ObjectMapper.&lt;T&gt;readValues(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.core.type.ResolvedType)" data-throw-if-not-resolved="false">#readValues(JsonParser, ResolvedType)</xref>.
  syntax:
    content: public MappingIterator<T> <T>readValues(JsonParser p, Class<T> valueType)
    parameters:
    - id: p
      type: com.fasterxml.jackson.core.JsonParser
    - id: valueType
      type: java.lang.Class<T>
    return:
      type: com.fasterxml.jackson.databind.MappingIterator<T>
  exceptions:
  - type: java.io.IOException
  - type: com.fasterxml.jackson.core.JsonProcessingException
- uid: com.fasterxml.jackson.databind.ObjectMapper.<T>treeToValue(com.fasterxml.jackson.core.TreeNode,java.lang.Class<T>)
  id: <T>treeToValue(com.fasterxml.jackson.core.TreeNode,java.lang.Class<T>)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ObjectMapper
  langs:
  - java
  name: <T>treeToValue(TreeNode n, Class<T> valueType)
  nameWithType: ObjectMapper.<T>treeToValue(TreeNode n, Class<T> valueType)
  fullName: com.fasterxml.jackson.databind.ObjectMapper.<T>treeToValue(TreeNode n, Class<T> valueType)
  overload: com.fasterxml.jackson.databind.ObjectMapper.treeToValue*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: >-
    Convenience conversion method that will bind data given JSON tree contains into specific value (usually bean) type.


    Functionally equivalent to:


    ```java

    objectMapper.convertValue(n, valueClass);

    ```
  syntax:
    content: public T <T>treeToValue(TreeNode n, Class<T> valueType)
    parameters:
    - id: n
      type: com.fasterxml.jackson.core.TreeNode
    - id: valueType
      type: java.lang.Class<T>
    return:
      type: T
  exceptions:
  - type: com.fasterxml.jackson.core.JsonProcessingException
- uid: com.fasterxml.jackson.databind.ObjectMapper.<T>updateValue(T,java.lang.Object)
  id: <T>updateValue(T,java.lang.Object)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ObjectMapper
  langs:
  - java
  name: <T>updateValue(T valueToUpdate, Object overrides)
  nameWithType: ObjectMapper.<T>updateValue(T valueToUpdate, Object overrides)
  fullName: com.fasterxml.jackson.databind.ObjectMapper.<T>updateValue(T valueToUpdate, Object overrides)
  overload: com.fasterxml.jackson.databind.ObjectMapper.updateValue*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: >-
    Convenience method similar to <xref uid="com.fasterxml.jackson.databind.ObjectMapper.&lt;T&gt;convertValue(java.lang.Object,com.fasterxml.jackson.databind.JavaType)" data-throw-if-not-resolved="false">#convertValue(Object, JavaType)</xref> but one in which


    Implementation is approximately as follows:


    1.  Serialize \`updateWithValue\` into <xref uid="com.fasterxml.jackson.databind.util.TokenBuffer" data-throw-if-not-resolved="false">TokenBuffer</xref>

    2.  Construct <xref uid="com.fasterxml.jackson.databind.ObjectReader" data-throw-if-not-resolved="false">ObjectReader</xref> with \`valueToUpdate\` (using <xref uid="com.fasterxml.jackson.databind.ObjectMapper.readerForUpdating(java.lang.Object)" data-throw-if-not-resolved="false">#readerForUpdating(Object)</xref>)

    3.  Construct <xref uid="com.fasterxml.jackson.core.JsonParser" data-throw-if-not-resolved="false">JsonParser</xref> (using <xref uid="com.fasterxml.jackson.databind.util.TokenBuffer.asParser()" data-throw-if-not-resolved="false">TokenBuffer#asParser()</xref>)

    4.  Update using <xref uid="com.fasterxml.jackson.databind.ObjectReader.&lt;T&gt;readValue(com.fasterxml.jackson.core.JsonParser)" data-throw-if-not-resolved="false">ObjectReader#readValue(JsonParser)</xref>.

    5.  Return \`valueToUpdate\`


    Note that update is "shallow" in that only first level of properties (or, immediate contents of container to update) are modified, unless properties themselves indicate that merging should be applied for contents. Such merging can be specified using annotations (see `JsonMerge`) as well as using "config overrides" (see <xref uid="com.fasterxml.jackson.databind.ObjectMapper.configOverride(java.lang.Class&lt;?&gt;)" data-throw-if-not-resolved="false">#configOverride(Class)</xref> and <xref uid="com.fasterxml.jackson.databind.ObjectMapper.setDefaultMergeable(java.lang.Boolean)" data-throw-if-not-resolved="false">#setDefaultMergeable(Boolean)</xref>).
  syntax:
    content: public T <T>updateValue(T valueToUpdate, Object overrides)
    parameters:
    - id: valueToUpdate
      type: T
      description: Object to update
    - id: overrides
      type: java.lang.Object
      description: >-
        Object to conceptually serialize and merge into value to
             update; can be thought of as a provider for overrides to apply.
    return:
      type: T
      description: >-
        Either the first argument (`valueToUpdate`), if it is mutable; or a result of
             creating new instance that is result of "merging" values (for example, "updating" a
             Java array will create a new array)
  exceptions:
  - type: com.fasterxml.jackson.databind.JsonMappingException
    description: if there are structural incompatibilities that prevent update.
- uid: com.fasterxml.jackson.databind.ObjectMapper.<T>valueToTree(java.lang.Object)
  id: <T>valueToTree(java.lang.Object)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ObjectMapper
  langs:
  - java
  name: <T>valueToTree(Object fromValue)
  nameWithType: ObjectMapper.<T>valueToTree(Object fromValue)
  fullName: com.fasterxml.jackson.databind.ObjectMapper.<T>valueToTree(Object fromValue)
  overload: com.fasterxml.jackson.databind.ObjectMapper.valueToTree*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: >-
    Reverse of <xref uid="com.fasterxml.jackson.databind.ObjectMapper.treeToValue" data-throw-if-not-resolved="false">#treeToValue</xref>; given a value (usually bean), will construct equivalent JSON Tree representation. Functionally similar to serializing value into JSON and parsing JSON as tree, but more efficient.


    NOTE: while results are usually identical to that of serialization followed by deserialization, this is not always the case. In some cases serialization into intermediate representation will retain encapsulation of things like raw value (<xref uid="com.fasterxml.jackson.databind.util.RawValue" data-throw-if-not-resolved="false">com.fasterxml.jackson.databind.util.RawValue</xref>) or basic node identity (<xref uid="com.fasterxml.jackson.databind.JsonNode" data-throw-if-not-resolved="false">JsonNode</xref>). If so, result is a valid tree, but values are not re-constructed through actual JSON representation. So if transformation requires actual materialization of JSON (or other data format that this mapper produces), it will be necessary to do actual serialization.
  syntax:
    content: public T <T>valueToTree(Object fromValue)
    parameters:
    - id: fromValue
      type: java.lang.Object
      description: Bean value to convert
    return:
      type: T
      description: >-
        (non-null) Root node of the resulting JSON tree: in case of <code>null</code> value,
            node for which <xref uid="com.fasterxml.jackson.databind.JsonNode.isNull()" data-throw-if-not-resolved="false">JsonNode#isNull()</xref> returns <code>true</code>.
  exceptions:
  - type: java.lang.IllegalArgumentException
- uid: com.fasterxml.jackson.databind.ObjectMapper.DEFAULT_ANNOTATION_INTROSPECTOR
  id: DEFAULT_ANNOTATION_INTROSPECTOR
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ObjectMapper
  langs:
  - java
  name: DEFAULT_ANNOTATION_INTROSPECTOR
  nameWithType: ObjectMapper.DEFAULT_ANNOTATION_INTROSPECTOR
  fullName: com.fasterxml.jackson.databind.ObjectMapper.DEFAULT_ANNOTATION_INTROSPECTOR
  type: Field
  package: com.fasterxml.jackson.databind
  syntax:
    content: protected static final AnnotationIntrospector DEFAULT_ANNOTATION_INTROSPECTOR
    return:
      type: com.fasterxml.jackson.databind.AnnotationIntrospector
- uid: com.fasterxml.jackson.databind.ObjectMapper.DEFAULT_BASE
  id: DEFAULT_BASE
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ObjectMapper
  langs:
  - java
  name: DEFAULT_BASE
  nameWithType: ObjectMapper.DEFAULT_BASE
  fullName: com.fasterxml.jackson.databind.ObjectMapper.DEFAULT_BASE
  type: Field
  package: com.fasterxml.jackson.databind
  summary: Base settings contain defaults used for all <xref uid="com.fasterxml.jackson.databind.ObjectMapper" data-throw-if-not-resolved="false">ObjectMapper</xref> instances.
  syntax:
    content: protected static final BaseSettings DEFAULT_BASE
    return:
      type: com.fasterxml.jackson.databind.cfg.BaseSettings
- uid: com.fasterxml.jackson.databind.ObjectMapper.ObjectMapper()
  id: ObjectMapper()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ObjectMapper
  langs:
  - java
  name: ObjectMapper()
  nameWithType: ObjectMapper.ObjectMapper()
  fullName: com.fasterxml.jackson.databind.ObjectMapper.ObjectMapper()
  overload: com.fasterxml.jackson.databind.ObjectMapper.ObjectMapper*
  type: Constructor
  package: com.fasterxml.jackson.databind
  summary: Default constructor, which will construct the default <xref uid="com.fasterxml.jackson.core.JsonFactory" data-throw-if-not-resolved="false">JsonFactory</xref> as necessary, use <xref uid="com.fasterxml.jackson.databind.SerializerProvider" data-throw-if-not-resolved="false">SerializerProvider</xref> as its <xref uid="com.fasterxml.jackson.databind.SerializerProvider" data-throw-if-not-resolved="false">SerializerProvider</xref>, and <xref uid="com.fasterxml.jackson.databind.ser.BeanSerializerFactory" data-throw-if-not-resolved="false">BeanSerializerFactory</xref> as its <xref uid="com.fasterxml.jackson.databind.ser.SerializerFactory" data-throw-if-not-resolved="false">SerializerFactory</xref>. This means that it can serialize all standard JDK types, as well as regular Java Beans (based on method names and Jackson-specific annotations), but does not support JAXB annotations.
  syntax:
    content: public ObjectMapper()
- uid: com.fasterxml.jackson.databind.ObjectMapper.ObjectMapper(com.fasterxml.jackson.core.JsonFactory)
  id: ObjectMapper(com.fasterxml.jackson.core.JsonFactory)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ObjectMapper
  langs:
  - java
  name: ObjectMapper(JsonFactory jf)
  nameWithType: ObjectMapper.ObjectMapper(JsonFactory jf)
  fullName: com.fasterxml.jackson.databind.ObjectMapper.ObjectMapper(JsonFactory jf)
  overload: com.fasterxml.jackson.databind.ObjectMapper.ObjectMapper*
  type: Constructor
  package: com.fasterxml.jackson.databind
  summary: Constructs instance that uses specified <xref uid="com.fasterxml.jackson.core.JsonFactory" data-throw-if-not-resolved="false">JsonFactory</xref> for constructing necessary <xref uid="com.fasterxml.jackson.core.JsonParser" data-throw-if-not-resolved="false">JsonParser</xref>s and/or <xref uid="com.fasterxml.jackson.core.JsonGenerator" data-throw-if-not-resolved="false">JsonGenerator</xref>s.
  syntax:
    content: public ObjectMapper(JsonFactory jf)
    parameters:
    - id: jf
      type: com.fasterxml.jackson.core.JsonFactory
- uid: com.fasterxml.jackson.databind.ObjectMapper.ObjectMapper(com.fasterxml.jackson.core.JsonFactory,com.fasterxml.jackson.databind.ser.DefaultSerializerProvider,com.fasterxml.jackson.databind.deser.DefaultDeserializationContext)
  id: ObjectMapper(com.fasterxml.jackson.core.JsonFactory,com.fasterxml.jackson.databind.ser.DefaultSerializerProvider,com.fasterxml.jackson.databind.deser.DefaultDeserializationContext)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ObjectMapper
  langs:
  - java
  name: ObjectMapper(JsonFactory jf, DefaultSerializerProvider sp, DefaultDeserializationContext dc)
  nameWithType: ObjectMapper.ObjectMapper(JsonFactory jf, DefaultSerializerProvider sp, DefaultDeserializationContext dc)
  fullName: com.fasterxml.jackson.databind.ObjectMapper.ObjectMapper(JsonFactory jf, DefaultSerializerProvider sp, DefaultDeserializationContext dc)
  overload: com.fasterxml.jackson.databind.ObjectMapper.ObjectMapper*
  type: Constructor
  package: com.fasterxml.jackson.databind
  summary: Constructs instance that uses specified <xref uid="com.fasterxml.jackson.core.JsonFactory" data-throw-if-not-resolved="false">JsonFactory</xref> for constructing necessary <xref uid="com.fasterxml.jackson.core.JsonParser" data-throw-if-not-resolved="false">JsonParser</xref>s and/or <xref uid="com.fasterxml.jackson.core.JsonGenerator" data-throw-if-not-resolved="false">JsonGenerator</xref>s, and uses given providers for accessing serializers and deserializers.
  syntax:
    content: public ObjectMapper(JsonFactory jf, DefaultSerializerProvider sp, DefaultDeserializationContext dc)
    parameters:
    - id: jf
      type: com.fasterxml.jackson.core.JsonFactory
      description: 'JsonFactory to use: if null, a new <xref uid="com.fasterxml.jackson.databind.MappingJsonFactory" data-throw-if-not-resolved="false">MappingJsonFactory</xref> will be constructed'
    - id: sp
      type: com.fasterxml.jackson.databind.ser.DefaultSerializerProvider
      description: 'SerializerProvider to use: if null, a <xref uid="com.fasterxml.jackson.databind.SerializerProvider" data-throw-if-not-resolved="false">SerializerProvider</xref> will be constructed'
    - id: dc
      type: com.fasterxml.jackson.databind.deser.DefaultDeserializationContext
      description: >-
        Blueprint deserialization context instance to use for creating
            actual context objects; if null, will construct standard
            <xref uid="com.fasterxml.jackson.databind.DeserializationContext" data-throw-if-not-resolved="false">DeserializationContext</xref>
- uid: com.fasterxml.jackson.databind.ObjectMapper.ObjectMapper(com.fasterxml.jackson.databind.ObjectMapper)
  id: ObjectMapper(com.fasterxml.jackson.databind.ObjectMapper)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ObjectMapper
  langs:
  - java
  name: ObjectMapper(ObjectMapper src)
  nameWithType: ObjectMapper.ObjectMapper(ObjectMapper src)
  fullName: com.fasterxml.jackson.databind.ObjectMapper.ObjectMapper(ObjectMapper src)
  overload: com.fasterxml.jackson.databind.ObjectMapper.ObjectMapper*
  type: Constructor
  package: com.fasterxml.jackson.databind
  summary: Copy-constructor, mostly used to support <xref uid="com.fasterxml.jackson.databind.ObjectMapper.copy*" data-throw-if-not-resolved="false">#copy</xref>.
  syntax:
    content: protected ObjectMapper(ObjectMapper src)
    parameters:
    - id: src
      type: com.fasterxml.jackson.databind.ObjectMapper
- uid: com.fasterxml.jackson.databind.ObjectMapper._assertNotNull(java.lang.String,java.lang.Object)
  id: _assertNotNull(java.lang.String,java.lang.Object)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ObjectMapper
  langs:
  - java
  name: _assertNotNull(String paramName, Object src)
  nameWithType: ObjectMapper._assertNotNull(String paramName, Object src)
  fullName: com.fasterxml.jackson.databind.ObjectMapper._assertNotNull(String paramName, Object src)
  overload: com.fasterxml.jackson.databind.ObjectMapper._assertNotNull*
  type: Method
  package: com.fasterxml.jackson.databind
  syntax:
    content: protected final void _assertNotNull(String paramName, Object src)
    parameters:
    - id: paramName
      type: java.lang.String
    - id: src
      type: java.lang.Object
- uid: com.fasterxml.jackson.databind.ObjectMapper._checkInvalidCopy(java.lang.Class<?>)
  id: _checkInvalidCopy(java.lang.Class<?>)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ObjectMapper
  langs:
  - java
  name: _checkInvalidCopy(Class<?> exp)
  nameWithType: ObjectMapper._checkInvalidCopy(Class<?> exp)
  fullName: com.fasterxml.jackson.databind.ObjectMapper._checkInvalidCopy(Class<?> exp)
  overload: com.fasterxml.jackson.databind.ObjectMapper._checkInvalidCopy*
  type: Method
  package: com.fasterxml.jackson.databind
  syntax:
    content: protected void _checkInvalidCopy(Class<?> exp)
    parameters:
    - id: exp
      type: java.lang.Class<?>
- uid: com.fasterxml.jackson.databind.ObjectMapper._configAndWriteValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)
  id: _configAndWriteValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ObjectMapper
  langs:
  - java
  name: _configAndWriteValue(JsonGenerator g, Object value)
  nameWithType: ObjectMapper._configAndWriteValue(JsonGenerator g, Object value)
  fullName: com.fasterxml.jackson.databind.ObjectMapper._configAndWriteValue(JsonGenerator g, Object value)
  overload: com.fasterxml.jackson.databind.ObjectMapper._configAndWriteValue*
  type: Method
  package: com.fasterxml.jackson.databind
  syntax:
    content: protected final void _configAndWriteValue(JsonGenerator g, Object value)
    parameters:
    - id: g
      type: com.fasterxml.jackson.core.JsonGenerator
    - id: value
      type: java.lang.Object
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.databind.ObjectMapper._configOverrides
  id: _configOverrides
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ObjectMapper
  langs:
  - java
  name: _configOverrides
  nameWithType: ObjectMapper._configOverrides
  fullName: com.fasterxml.jackson.databind.ObjectMapper._configOverrides
  type: Field
  package: com.fasterxml.jackson.databind
  summary: Currently active per-type configuration overrides, accessed by declared type of property.
  syntax:
    content: protected final ConfigOverrides _configOverrides
    return:
      type: com.fasterxml.jackson.databind.cfg.ConfigOverrides
- uid: com.fasterxml.jackson.databind.ObjectMapper._constructDefaultTypeResolverBuilder(com.fasterxml.jackson.databind.ObjectMapper.DefaultTyping,com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator)
  id: _constructDefaultTypeResolverBuilder(com.fasterxml.jackson.databind.ObjectMapper.DefaultTyping,com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ObjectMapper
  langs:
  - java
  name: _constructDefaultTypeResolverBuilder(ObjectMapper.DefaultTyping applicability, PolymorphicTypeValidator ptv)
  nameWithType: ObjectMapper._constructDefaultTypeResolverBuilder(ObjectMapper.DefaultTyping applicability, PolymorphicTypeValidator ptv)
  fullName: com.fasterxml.jackson.databind.ObjectMapper._constructDefaultTypeResolverBuilder(ObjectMapper.DefaultTyping applicability, PolymorphicTypeValidator ptv)
  overload: com.fasterxml.jackson.databind.ObjectMapper._constructDefaultTypeResolverBuilder*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: Overridable factory method, separate to allow format-specific mappers (and specifically XML-backed one, currently) to offer custom <xref uid="com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder" data-throw-if-not-resolved="false">TypeResolverBuilder</xref> subtypes.
  syntax:
    content: protected TypeResolverBuilder<?> _constructDefaultTypeResolverBuilder(ObjectMapper.DefaultTyping applicability, PolymorphicTypeValidator ptv)
    parameters:
    - id: applicability
      type: com.fasterxml.jackson.databind.ObjectMapper.DefaultTyping
    - id: ptv
      type: com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator
    return:
      type: com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder<?>
- uid: com.fasterxml.jackson.databind.ObjectMapper._convert(java.lang.Object,com.fasterxml.jackson.databind.JavaType)
  id: _convert(java.lang.Object,com.fasterxml.jackson.databind.JavaType)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ObjectMapper
  langs:
  - java
  name: _convert(Object fromValue, JavaType toValueType)
  nameWithType: ObjectMapper._convert(Object fromValue, JavaType toValueType)
  fullName: com.fasterxml.jackson.databind.ObjectMapper._convert(Object fromValue, JavaType toValueType)
  overload: com.fasterxml.jackson.databind.ObjectMapper._convert*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: 'Actual conversion implementation: instead of using existing read and write methods, much of code is inlined. Reason for this is that we must avoid root value wrapping/unwrapping both for efficiency and for correctness. If root value wrapping/unwrapping is actually desired, caller must use explicit `writeValue` and `readValue` methods.'
  syntax:
    content: protected Object _convert(Object fromValue, JavaType toValueType)
    parameters:
    - id: fromValue
      type: java.lang.Object
    - id: toValueType
      type: com.fasterxml.jackson.databind.JavaType
    return:
      type: java.lang.Object
  exceptions:
  - type: java.lang.IllegalArgumentException
- uid: com.fasterxml.jackson.databind.ObjectMapper._deserializationConfig
  id: _deserializationConfig
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ObjectMapper
  langs:
  - java
  name: _deserializationConfig
  nameWithType: ObjectMapper._deserializationConfig
  fullName: com.fasterxml.jackson.databind.ObjectMapper._deserializationConfig
  type: Field
  package: com.fasterxml.jackson.databind
  summary: Configuration object that defines basic global settings for the serialization process
  syntax:
    content: protected DeserializationConfig _deserializationConfig
    return:
      type: com.fasterxml.jackson.databind.DeserializationConfig
- uid: com.fasterxml.jackson.databind.ObjectMapper._deserializationContext
  id: _deserializationContext
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ObjectMapper
  langs:
  - java
  name: _deserializationContext
  nameWithType: ObjectMapper._deserializationContext
  fullName: com.fasterxml.jackson.databind.ObjectMapper._deserializationContext
  type: Field
  package: com.fasterxml.jackson.databind
  summary: Blueprint context object; stored here to allow custom sub-classes. Contains references to objects needed for deserialization construction (cache, factory).
  syntax:
    content: protected DefaultDeserializationContext _deserializationContext
    return:
      type: com.fasterxml.jackson.databind.deser.DefaultDeserializationContext
- uid: com.fasterxml.jackson.databind.ObjectMapper._findRootDeserializer(com.fasterxml.jackson.databind.DeserializationContext,com.fasterxml.jackson.databind.JavaType)
  id: _findRootDeserializer(com.fasterxml.jackson.databind.DeserializationContext,com.fasterxml.jackson.databind.JavaType)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ObjectMapper
  langs:
  - java
  name: _findRootDeserializer(DeserializationContext ctxt, JavaType valueType)
  nameWithType: ObjectMapper._findRootDeserializer(DeserializationContext ctxt, JavaType valueType)
  fullName: com.fasterxml.jackson.databind.ObjectMapper._findRootDeserializer(DeserializationContext ctxt, JavaType valueType)
  overload: com.fasterxml.jackson.databind.ObjectMapper._findRootDeserializer*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: Method called to locate deserializer for the passed root-level value.
  syntax:
    content: protected JsonDeserializer<Object> _findRootDeserializer(DeserializationContext ctxt, JavaType valueType)
    parameters:
    - id: ctxt
      type: com.fasterxml.jackson.databind.DeserializationContext
    - id: valueType
      type: com.fasterxml.jackson.databind.JavaType
    return:
      type: com.fasterxml.jackson.databind.JsonDeserializer<java.lang.Object>
  exceptions:
  - type: com.fasterxml.jackson.databind.JsonMappingException
- uid: com.fasterxml.jackson.databind.ObjectMapper._initForReading(com.fasterxml.jackson.core.JsonParser)
  id: _initForReading(com.fasterxml.jackson.core.JsonParser)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ObjectMapper
  langs:
  - java
  name: _initForReading(JsonParser p)
  nameWithType: ObjectMapper._initForReading(JsonParser p)
  fullName: com.fasterxml.jackson.databind.ObjectMapper._initForReading(JsonParser p)
  overload: com.fasterxml.jackson.databind.ObjectMapper._initForReading*
  type: Method
  package: com.fasterxml.jackson.databind
  syntax:
    content: protected JsonToken _initForReading(JsonParser p)
    parameters:
    - id: p
      type: com.fasterxml.jackson.core.JsonParser
    return:
      type: com.fasterxml.jackson.core.JsonToken
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.databind.ObjectMapper._initForReading(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.JavaType)
  id: _initForReading(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.JavaType)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ObjectMapper
  langs:
  - java
  name: _initForReading(JsonParser p, JavaType targetType)
  nameWithType: ObjectMapper._initForReading(JsonParser p, JavaType targetType)
  fullName: com.fasterxml.jackson.databind.ObjectMapper._initForReading(JsonParser p, JavaType targetType)
  overload: com.fasterxml.jackson.databind.ObjectMapper._initForReading*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: Method called to ensure that given parser is ready for reading content for data binding.
  syntax:
    content: protected JsonToken _initForReading(JsonParser p, JavaType targetType)
    parameters:
    - id: p
      type: com.fasterxml.jackson.core.JsonParser
    - id: targetType
      type: com.fasterxml.jackson.databind.JavaType
    return:
      type: com.fasterxml.jackson.core.JsonToken
      description: >-
        First token to be used for data binding after this call:
          can never be null as exception will be thrown if parser cannot
          provide more tokens.
  exceptions:
  - type: java.io.IOException
    description: >-
      if the underlying input source has problems during
         parsing
- uid: com.fasterxml.jackson.databind.ObjectMapper._injectableValues
  id: _injectableValues
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ObjectMapper
  langs:
  - java
  name: _injectableValues
  nameWithType: ObjectMapper._injectableValues
  fullName: com.fasterxml.jackson.databind.ObjectMapper._injectableValues
  type: Field
  package: com.fasterxml.jackson.databind
  summary: Provider for values to inject in deserialized POJOs.
  syntax:
    content: protected InjectableValues _injectableValues
    return:
      type: com.fasterxml.jackson.databind.InjectableValues
- uid: com.fasterxml.jackson.databind.ObjectMapper._jsonFactory
  id: _jsonFactory
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ObjectMapper
  langs:
  - java
  name: _jsonFactory
  nameWithType: ObjectMapper._jsonFactory
  fullName: com.fasterxml.jackson.databind.ObjectMapper._jsonFactory
  type: Field
  package: com.fasterxml.jackson.databind
  summary: Factory used to create <xref uid="com.fasterxml.jackson.core.JsonParser" data-throw-if-not-resolved="false">JsonParser</xref> and <xref uid="com.fasterxml.jackson.core.JsonGenerator" data-throw-if-not-resolved="false">JsonGenerator</xref> instances as necessary.
  syntax:
    content: protected final JsonFactory _jsonFactory
    return:
      type: com.fasterxml.jackson.core.JsonFactory
- uid: com.fasterxml.jackson.databind.ObjectMapper._mixIns
  id: _mixIns
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ObjectMapper
  langs:
  - java
  name: _mixIns
  nameWithType: ObjectMapper._mixIns
  fullName: com.fasterxml.jackson.databind.ObjectMapper._mixIns
  type: Field
  package: com.fasterxml.jackson.databind
  summary: >-
    Mapping that defines how to apply mix-in annotations: key is the type to received additional annotations, and value is the type that has annotations to "mix in".


    Annotations associated with the value classes will be used to override annotations of the key class, associated with the same field or method. They can be further masked by sub-classes: you can think of it as injecting annotations between the target class and its sub-classes (or interfaces)
  syntax:
    content: protected SimpleMixInResolver _mixIns
    return:
      type: com.fasterxml.jackson.databind.introspect.SimpleMixInResolver
- uid: com.fasterxml.jackson.databind.ObjectMapper._newReader(com.fasterxml.jackson.databind.DeserializationConfig)
  id: _newReader(com.fasterxml.jackson.databind.DeserializationConfig)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ObjectMapper
  langs:
  - java
  name: _newReader(DeserializationConfig config)
  nameWithType: ObjectMapper._newReader(DeserializationConfig config)
  fullName: com.fasterxml.jackson.databind.ObjectMapper._newReader(DeserializationConfig config)
  overload: com.fasterxml.jackson.databind.ObjectMapper._newReader*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: Factory method sub-classes must override, to produce <xref uid="com.fasterxml.jackson.databind.ObjectReader" data-throw-if-not-resolved="false">ObjectReader</xref> instances of proper sub-type
  syntax:
    content: protected ObjectReader _newReader(DeserializationConfig config)
    parameters:
    - id: config
      type: com.fasterxml.jackson.databind.DeserializationConfig
    return:
      type: com.fasterxml.jackson.databind.ObjectReader
- uid: com.fasterxml.jackson.databind.ObjectMapper._newReader(com.fasterxml.jackson.databind.DeserializationConfig,com.fasterxml.jackson.databind.JavaType,java.lang.Object,com.fasterxml.jackson.core.FormatSchema,com.fasterxml.jackson.databind.InjectableValues)
  id: _newReader(com.fasterxml.jackson.databind.DeserializationConfig,com.fasterxml.jackson.databind.JavaType,java.lang.Object,com.fasterxml.jackson.core.FormatSchema,com.fasterxml.jackson.databind.InjectableValues)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ObjectMapper
  langs:
  - java
  name: _newReader(DeserializationConfig config, JavaType valueType, Object valueToUpdate, FormatSchema schema, InjectableValues injectableValues)
  nameWithType: ObjectMapper._newReader(DeserializationConfig config, JavaType valueType, Object valueToUpdate, FormatSchema schema, InjectableValues injectableValues)
  fullName: com.fasterxml.jackson.databind.ObjectMapper._newReader(DeserializationConfig config, JavaType valueType, Object valueToUpdate, FormatSchema schema, InjectableValues injectableValues)
  overload: com.fasterxml.jackson.databind.ObjectMapper._newReader*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: Factory method sub-classes must override, to produce <xref uid="com.fasterxml.jackson.databind.ObjectReader" data-throw-if-not-resolved="false">ObjectReader</xref> instances of proper sub-type
  syntax:
    content: protected ObjectReader _newReader(DeserializationConfig config, JavaType valueType, Object valueToUpdate, FormatSchema schema, InjectableValues injectableValues)
    parameters:
    - id: config
      type: com.fasterxml.jackson.databind.DeserializationConfig
    - id: valueType
      type: com.fasterxml.jackson.databind.JavaType
    - id: valueToUpdate
      type: java.lang.Object
    - id: schema
      type: com.fasterxml.jackson.core.FormatSchema
    - id: injectableValues
      type: com.fasterxml.jackson.databind.InjectableValues
    return:
      type: com.fasterxml.jackson.databind.ObjectReader
- uid: com.fasterxml.jackson.databind.ObjectMapper._newWriter(com.fasterxml.jackson.databind.SerializationConfig)
  id: _newWriter(com.fasterxml.jackson.databind.SerializationConfig)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ObjectMapper
  langs:
  - java
  name: _newWriter(SerializationConfig config)
  nameWithType: ObjectMapper._newWriter(SerializationConfig config)
  fullName: com.fasterxml.jackson.databind.ObjectMapper._newWriter(SerializationConfig config)
  overload: com.fasterxml.jackson.databind.ObjectMapper._newWriter*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: Factory method sub-classes must override, to produce <xref uid="com.fasterxml.jackson.databind.ObjectWriter" data-throw-if-not-resolved="false">ObjectWriter</xref> instances of proper sub-type
  syntax:
    content: protected ObjectWriter _newWriter(SerializationConfig config)
    parameters:
    - id: config
      type: com.fasterxml.jackson.databind.SerializationConfig
    return:
      type: com.fasterxml.jackson.databind.ObjectWriter
- uid: com.fasterxml.jackson.databind.ObjectMapper._newWriter(com.fasterxml.jackson.databind.SerializationConfig,com.fasterxml.jackson.core.FormatSchema)
  id: _newWriter(com.fasterxml.jackson.databind.SerializationConfig,com.fasterxml.jackson.core.FormatSchema)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ObjectMapper
  langs:
  - java
  name: _newWriter(SerializationConfig config, FormatSchema schema)
  nameWithType: ObjectMapper._newWriter(SerializationConfig config, FormatSchema schema)
  fullName: com.fasterxml.jackson.databind.ObjectMapper._newWriter(SerializationConfig config, FormatSchema schema)
  overload: com.fasterxml.jackson.databind.ObjectMapper._newWriter*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: Factory method sub-classes must override, to produce <xref uid="com.fasterxml.jackson.databind.ObjectWriter" data-throw-if-not-resolved="false">ObjectWriter</xref> instances of proper sub-type
  syntax:
    content: protected ObjectWriter _newWriter(SerializationConfig config, FormatSchema schema)
    parameters:
    - id: config
      type: com.fasterxml.jackson.databind.SerializationConfig
    - id: schema
      type: com.fasterxml.jackson.core.FormatSchema
    return:
      type: com.fasterxml.jackson.databind.ObjectWriter
- uid: com.fasterxml.jackson.databind.ObjectMapper._newWriter(com.fasterxml.jackson.databind.SerializationConfig,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.core.PrettyPrinter)
  id: _newWriter(com.fasterxml.jackson.databind.SerializationConfig,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.core.PrettyPrinter)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ObjectMapper
  langs:
  - java
  name: _newWriter(SerializationConfig config, JavaType rootType, PrettyPrinter pp)
  nameWithType: ObjectMapper._newWriter(SerializationConfig config, JavaType rootType, PrettyPrinter pp)
  fullName: com.fasterxml.jackson.databind.ObjectMapper._newWriter(SerializationConfig config, JavaType rootType, PrettyPrinter pp)
  overload: com.fasterxml.jackson.databind.ObjectMapper._newWriter*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: Factory method sub-classes must override, to produce <xref uid="com.fasterxml.jackson.databind.ObjectWriter" data-throw-if-not-resolved="false">ObjectWriter</xref> instances of proper sub-type
  syntax:
    content: protected ObjectWriter _newWriter(SerializationConfig config, JavaType rootType, PrettyPrinter pp)
    parameters:
    - id: config
      type: com.fasterxml.jackson.databind.SerializationConfig
    - id: rootType
      type: com.fasterxml.jackson.databind.JavaType
    - id: pp
      type: com.fasterxml.jackson.core.PrettyPrinter
    return:
      type: com.fasterxml.jackson.databind.ObjectWriter
- uid: com.fasterxml.jackson.databind.ObjectMapper._readMapAndClose(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.JavaType)
  id: _readMapAndClose(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.JavaType)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ObjectMapper
  langs:
  - java
  name: _readMapAndClose(JsonParser p0, JavaType valueType)
  nameWithType: ObjectMapper._readMapAndClose(JsonParser p0, JavaType valueType)
  fullName: com.fasterxml.jackson.databind.ObjectMapper._readMapAndClose(JsonParser p0, JavaType valueType)
  overload: com.fasterxml.jackson.databind.ObjectMapper._readMapAndClose*
  type: Method
  package: com.fasterxml.jackson.databind
  syntax:
    content: protected Object _readMapAndClose(JsonParser p0, JavaType valueType)
    parameters:
    - id: p0
      type: com.fasterxml.jackson.core.JsonParser
    - id: valueType
      type: com.fasterxml.jackson.databind.JavaType
    return:
      type: java.lang.Object
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.databind.ObjectMapper._readTreeAndClose(com.fasterxml.jackson.core.JsonParser)
  id: _readTreeAndClose(com.fasterxml.jackson.core.JsonParser)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ObjectMapper
  langs:
  - java
  name: _readTreeAndClose(JsonParser p0)
  nameWithType: ObjectMapper._readTreeAndClose(JsonParser p0)
  fullName: com.fasterxml.jackson.databind.ObjectMapper._readTreeAndClose(JsonParser p0)
  overload: com.fasterxml.jackson.databind.ObjectMapper._readTreeAndClose*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: Similar to <xref uid="com.fasterxml.jackson.databind.ObjectMapper._readMapAndClose*" data-throw-if-not-resolved="false">#_readMapAndClose</xref> but specialized for `JsonNode` reading.
  syntax:
    content: protected JsonNode _readTreeAndClose(JsonParser p0)
    parameters:
    - id: p0
      type: com.fasterxml.jackson.core.JsonParser
    return:
      type: com.fasterxml.jackson.databind.JsonNode
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.databind.ObjectMapper._readValue(com.fasterxml.jackson.databind.DeserializationConfig,com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.JavaType)
  id: _readValue(com.fasterxml.jackson.databind.DeserializationConfig,com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.JavaType)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ObjectMapper
  langs:
  - java
  name: _readValue(DeserializationConfig cfg, JsonParser p, JavaType valueType)
  nameWithType: ObjectMapper._readValue(DeserializationConfig cfg, JsonParser p, JavaType valueType)
  fullName: com.fasterxml.jackson.databind.ObjectMapper._readValue(DeserializationConfig cfg, JsonParser p, JavaType valueType)
  overload: com.fasterxml.jackson.databind.ObjectMapper._readValue*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: Actual implementation of value reading+binding operation.
  syntax:
    content: protected Object _readValue(DeserializationConfig cfg, JsonParser p, JavaType valueType)
    parameters:
    - id: cfg
      type: com.fasterxml.jackson.databind.DeserializationConfig
    - id: p
      type: com.fasterxml.jackson.core.JsonParser
    - id: valueType
      type: com.fasterxml.jackson.databind.JavaType
    return:
      type: java.lang.Object
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.databind.ObjectMapper._registeredModuleTypes
  id: _registeredModuleTypes
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ObjectMapper
  langs:
  - java
  name: _registeredModuleTypes
  nameWithType: ObjectMapper._registeredModuleTypes
  fullName: com.fasterxml.jackson.databind.ObjectMapper._registeredModuleTypes
  type: Field
  package: com.fasterxml.jackson.databind
  summary: Set of module types (as per <xref uid="com.fasterxml.jackson.databind.Module.getTypeId()" data-throw-if-not-resolved="false">Module#getTypeId()</xref> that have been registered; kept track of iff <xref uid="com.fasterxml.jackson.databind.MapperFeature.IGNORE_DUPLICATE_MODULE_REGISTRATIONS" data-throw-if-not-resolved="false">MapperFeature#IGNORE_DUPLICATE_MODULE_REGISTRATIONS</xref> is enabled, so that duplicate registration calls can be ignored (to avoid adding same handlers multiple times, mostly).
  syntax:
    content: protected Set<Object> _registeredModuleTypes
    return:
      type: java.util.Set<java.lang.Object>
- uid: com.fasterxml.jackson.databind.ObjectMapper._rootDeserializers
  id: _rootDeserializers
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ObjectMapper
  langs:
  - java
  name: _rootDeserializers
  nameWithType: ObjectMapper._rootDeserializers
  fullName: com.fasterxml.jackson.databind.ObjectMapper._rootDeserializers
  type: Field
  package: com.fasterxml.jackson.databind
  summary: >-
    We will use a separate main-level Map for keeping track of root-level deserializers. This is where most successful cache lookups get resolved. Map will contain resolvers for all kinds of types, including container types: this is different from the component cache which will only cache bean deserializers.


    Given that we don't expect much concurrency for additions (should very quickly converge to zero after startup), let's explicitly define a low concurrency setting.


    These may are either "raw" deserializers (when no type information is needed for base type), or type-wrapped deserializers (if it is needed)
  syntax:
    content: protected final ConcurrentHashMap<JavaType,JsonDeserializer<Object>> _rootDeserializers
    return:
      type: java.util.concurrent.ConcurrentHashMap<com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.JsonDeserializer<java.lang.Object>>
- uid: com.fasterxml.jackson.databind.ObjectMapper._serializationConfig
  id: _serializationConfig
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ObjectMapper
  langs:
  - java
  name: _serializationConfig
  nameWithType: ObjectMapper._serializationConfig
  fullName: com.fasterxml.jackson.databind.ObjectMapper._serializationConfig
  type: Field
  package: com.fasterxml.jackson.databind
  summary: Configuration object that defines basic global settings for the serialization process
  syntax:
    content: protected SerializationConfig _serializationConfig
    return:
      type: com.fasterxml.jackson.databind.SerializationConfig
- uid: com.fasterxml.jackson.databind.ObjectMapper._serializerFactory
  id: _serializerFactory
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ObjectMapper
  langs:
  - java
  name: _serializerFactory
  nameWithType: ObjectMapper._serializerFactory
  fullName: com.fasterxml.jackson.databind.ObjectMapper._serializerFactory
  type: Field
  package: com.fasterxml.jackson.databind
  summary: Serializer factory used for constructing serializers.
  syntax:
    content: protected SerializerFactory _serializerFactory
    return:
      type: com.fasterxml.jackson.databind.ser.SerializerFactory
- uid: com.fasterxml.jackson.databind.ObjectMapper._serializerProvider
  id: _serializerProvider
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ObjectMapper
  langs:
  - java
  name: _serializerProvider
  nameWithType: ObjectMapper._serializerProvider
  fullName: com.fasterxml.jackson.databind.ObjectMapper._serializerProvider
  type: Field
  package: com.fasterxml.jackson.databind
  summary: >-
    Object that manages access to serializers used for serialization, including caching. It is configured with <xref uid="com.fasterxml.jackson.databind.ObjectMapper._serializerFactory" data-throw-if-not-resolved="false">#_serializerFactory</xref> to allow for constructing custom serializers.


    Note: while serializers are only exposed <xref uid="com.fasterxml.jackson.databind.SerializerProvider" data-throw-if-not-resolved="false">SerializerProvider</xref>, mappers and readers need to access additional API defined by <xref uid="com.fasterxml.jackson.databind.ser.DefaultSerializerProvider" data-throw-if-not-resolved="false">DefaultSerializerProvider</xref>
  syntax:
    content: protected DefaultSerializerProvider _serializerProvider
    return:
      type: com.fasterxml.jackson.databind.ser.DefaultSerializerProvider
- uid: com.fasterxml.jackson.databind.ObjectMapper._serializerProvider(com.fasterxml.jackson.databind.SerializationConfig)
  id: _serializerProvider(com.fasterxml.jackson.databind.SerializationConfig)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ObjectMapper
  langs:
  - java
  name: _serializerProvider(SerializationConfig config)
  nameWithType: ObjectMapper._serializerProvider(SerializationConfig config)
  fullName: com.fasterxml.jackson.databind.ObjectMapper._serializerProvider(SerializationConfig config)
  overload: com.fasterxml.jackson.databind.ObjectMapper._serializerProvider*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: Overridable helper method used for constructing <xref uid="com.fasterxml.jackson.databind.SerializerProvider" data-throw-if-not-resolved="false">SerializerProvider</xref> to use for serialization.
  syntax:
    content: protected DefaultSerializerProvider _serializerProvider(SerializationConfig config)
    parameters:
    - id: config
      type: com.fasterxml.jackson.databind.SerializationConfig
    return:
      type: com.fasterxml.jackson.databind.ser.DefaultSerializerProvider
- uid: com.fasterxml.jackson.databind.ObjectMapper._subtypeResolver
  id: _subtypeResolver
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ObjectMapper
  langs:
  - java
  name: _subtypeResolver
  nameWithType: ObjectMapper._subtypeResolver
  fullName: com.fasterxml.jackson.databind.ObjectMapper._subtypeResolver
  type: Field
  package: com.fasterxml.jackson.databind
  summary: Thing used for registering sub-types, resolving them to super/sub-types as needed.
  syntax:
    content: protected SubtypeResolver _subtypeResolver
    return:
      type: com.fasterxml.jackson.databind.jsontype.SubtypeResolver
- uid: com.fasterxml.jackson.databind.ObjectMapper._typeFactory
  id: _typeFactory
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ObjectMapper
  langs:
  - java
  name: _typeFactory
  nameWithType: ObjectMapper._typeFactory
  fullName: com.fasterxml.jackson.databind.ObjectMapper._typeFactory
  type: Field
  package: com.fasterxml.jackson.databind
  summary: Specific factory used for creating <xref uid="com.fasterxml.jackson.databind.JavaType" data-throw-if-not-resolved="false">JavaType</xref> instances; needed to allow modules to add more custom type handling (mostly to support types of non-Java JVM languages)
  syntax:
    content: protected TypeFactory _typeFactory
    return:
      type: com.fasterxml.jackson.databind.type.TypeFactory
- uid: com.fasterxml.jackson.databind.ObjectMapper._unwrapAndDeserialize(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,com.fasterxml.jackson.databind.DeserializationConfig,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.JsonDeserializer<java.lang.Object>)
  id: _unwrapAndDeserialize(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,com.fasterxml.jackson.databind.DeserializationConfig,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.JsonDeserializer<java.lang.Object>)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ObjectMapper
  langs:
  - java
  name: _unwrapAndDeserialize(JsonParser p, DeserializationContext ctxt, DeserializationConfig config, JavaType rootType, JsonDeserializer<Object> deser)
  nameWithType: ObjectMapper._unwrapAndDeserialize(JsonParser p, DeserializationContext ctxt, DeserializationConfig config, JavaType rootType, JsonDeserializer<Object> deser)
  fullName: com.fasterxml.jackson.databind.ObjectMapper._unwrapAndDeserialize(JsonParser p, DeserializationContext ctxt, DeserializationConfig config, JavaType rootType, JsonDeserializer<Object> deser)
  overload: com.fasterxml.jackson.databind.ObjectMapper._unwrapAndDeserialize*
  type: Method
  package: com.fasterxml.jackson.databind
  syntax:
    content: protected Object _unwrapAndDeserialize(JsonParser p, DeserializationContext ctxt, DeserializationConfig config, JavaType rootType, JsonDeserializer<Object> deser)
    parameters:
    - id: p
      type: com.fasterxml.jackson.core.JsonParser
    - id: ctxt
      type: com.fasterxml.jackson.databind.DeserializationContext
    - id: config
      type: com.fasterxml.jackson.databind.DeserializationConfig
    - id: rootType
      type: com.fasterxml.jackson.databind.JavaType
    - id: deser
      type: com.fasterxml.jackson.databind.JsonDeserializer<java.lang.Object>
    return:
      type: java.lang.Object
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.databind.ObjectMapper._verifyNoTrailingTokens(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,com.fasterxml.jackson.databind.JavaType)
  id: _verifyNoTrailingTokens(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,com.fasterxml.jackson.databind.JavaType)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ObjectMapper
  langs:
  - java
  name: _verifyNoTrailingTokens(JsonParser p, DeserializationContext ctxt, JavaType bindType)
  nameWithType: ObjectMapper._verifyNoTrailingTokens(JsonParser p, DeserializationContext ctxt, JavaType bindType)
  fullName: com.fasterxml.jackson.databind.ObjectMapper._verifyNoTrailingTokens(JsonParser p, DeserializationContext ctxt, JavaType bindType)
  overload: com.fasterxml.jackson.databind.ObjectMapper._verifyNoTrailingTokens*
  type: Method
  package: com.fasterxml.jackson.databind
  syntax:
    content: protected final void _verifyNoTrailingTokens(JsonParser p, DeserializationContext ctxt, JavaType bindType)
    parameters:
    - id: p
      type: com.fasterxml.jackson.core.JsonParser
    - id: ctxt
      type: com.fasterxml.jackson.databind.DeserializationContext
    - id: bindType
      type: com.fasterxml.jackson.databind.JavaType
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.databind.ObjectMapper._verifySchemaType(com.fasterxml.jackson.core.FormatSchema)
  id: _verifySchemaType(com.fasterxml.jackson.core.FormatSchema)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ObjectMapper
  langs:
  - java
  name: _verifySchemaType(FormatSchema schema)
  nameWithType: ObjectMapper._verifySchemaType(FormatSchema schema)
  fullName: com.fasterxml.jackson.databind.ObjectMapper._verifySchemaType(FormatSchema schema)
  overload: com.fasterxml.jackson.databind.ObjectMapper._verifySchemaType*
  type: Method
  package: com.fasterxml.jackson.databind
  syntax:
    content: protected void _verifySchemaType(FormatSchema schema)
    parameters:
    - id: schema
      type: com.fasterxml.jackson.core.FormatSchema
- uid: com.fasterxml.jackson.databind.ObjectMapper._writeValueAndClose(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)
  id: _writeValueAndClose(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ObjectMapper
  langs:
  - java
  name: _writeValueAndClose(JsonGenerator g, Object value)
  nameWithType: ObjectMapper._writeValueAndClose(JsonGenerator g, Object value)
  fullName: com.fasterxml.jackson.databind.ObjectMapper._writeValueAndClose(JsonGenerator g, Object value)
  overload: com.fasterxml.jackson.databind.ObjectMapper._writeValueAndClose*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: Method called to configure the generator as necessary and then call write functionality
  syntax:
    content: protected final void _writeValueAndClose(JsonGenerator g, Object value)
    parameters:
    - id: g
      type: com.fasterxml.jackson.core.JsonGenerator
    - id: value
      type: java.lang.Object
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.databind.ObjectMapper.acceptJsonFormatVisitor(com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper)
  id: acceptJsonFormatVisitor(com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ObjectMapper
  langs:
  - java
  name: acceptJsonFormatVisitor(JavaType type, jsonFormatVisitors.JsonFormatVisitorWrapper visitor)
  nameWithType: ObjectMapper.acceptJsonFormatVisitor(JavaType type, jsonFormatVisitors.JsonFormatVisitorWrapper visitor)
  fullName: com.fasterxml.jackson.databind.ObjectMapper.acceptJsonFormatVisitor(JavaType type, jsonFormatVisitors.JsonFormatVisitorWrapper visitor)
  overload: com.fasterxml.jackson.databind.ObjectMapper.acceptJsonFormatVisitor*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: >-
    Method for visiting type hierarchy for given type, using specified visitor. Visitation uses `Serializer` hierarchy and related properties


    This method can be used for things like generating [JSON Schema][] instance for specified type.



    [JSON Schema]: http://json-schema.org/
  syntax:
    content: public void acceptJsonFormatVisitor(JavaType type, jsonFormatVisitors.JsonFormatVisitorWrapper visitor)
    parameters:
    - id: type
      type: com.fasterxml.jackson.databind.JavaType
      description: Type to generate schema for (possibly with generic signature)
    - id: visitor
      type: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper
  exceptions:
  - type: com.fasterxml.jackson.databind.JsonMappingException
- uid: com.fasterxml.jackson.databind.ObjectMapper.acceptJsonFormatVisitor(java.lang.Class<?>,com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper)
  id: acceptJsonFormatVisitor(java.lang.Class<?>,com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ObjectMapper
  langs:
  - java
  name: acceptJsonFormatVisitor(Class<?> type, jsonFormatVisitors.JsonFormatVisitorWrapper visitor)
  nameWithType: ObjectMapper.acceptJsonFormatVisitor(Class<?> type, jsonFormatVisitors.JsonFormatVisitorWrapper visitor)
  fullName: com.fasterxml.jackson.databind.ObjectMapper.acceptJsonFormatVisitor(Class<?> type, jsonFormatVisitors.JsonFormatVisitorWrapper visitor)
  overload: com.fasterxml.jackson.databind.ObjectMapper.acceptJsonFormatVisitor*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: >-
    Method for visiting type hierarchy for given type, using specified visitor.


    This method can be used for things like generating [JSON Schema][] instance for specified type.



    [JSON Schema]: http://json-schema.org/
  syntax:
    content: public void acceptJsonFormatVisitor(Class<?> type, jsonFormatVisitors.JsonFormatVisitorWrapper visitor)
    parameters:
    - id: type
      type: java.lang.Class<?>
      description: Type to generate schema for (possibly with generic signature)
    - id: visitor
      type: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper
  exceptions:
  - type: com.fasterxml.jackson.databind.JsonMappingException
- uid: com.fasterxml.jackson.databind.ObjectMapper.activateDefaultTyping(com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator)
  id: activateDefaultTyping(com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ObjectMapper
  langs:
  - java
  name: activateDefaultTyping(PolymorphicTypeValidator ptv)
  nameWithType: ObjectMapper.activateDefaultTyping(PolymorphicTypeValidator ptv)
  fullName: com.fasterxml.jackson.databind.ObjectMapper.activateDefaultTyping(PolymorphicTypeValidator ptv)
  overload: com.fasterxml.jackson.databind.ObjectMapper.activateDefaultTyping*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: >-
    Convenience method that is equivalent to calling


    ```java

    activateDefaultTyping(ptv, DefaultTyping.OBJECT_AND_NON_CONCRETE);

    ```


    NOTE: choice of <xref uid="com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator" data-throw-if-not-resolved="false">PolymorphicTypeValidator</xref> to pass is critical for security as allowing all subtypes can be risky for untrusted content.
  syntax:
    content: public ObjectMapper activateDefaultTyping(PolymorphicTypeValidator ptv)
    parameters:
    - id: ptv
      type: com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator
      description: >-
        Validator used to verify that actual subtypes to deserialize are valid against
            whatever criteria validator uses: important in case where untrusted content is deserialized.
    return:
      type: com.fasterxml.jackson.databind.ObjectMapper
- uid: com.fasterxml.jackson.databind.ObjectMapper.activateDefaultTyping(com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator,com.fasterxml.jackson.databind.ObjectMapper.DefaultTyping)
  id: activateDefaultTyping(com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator,com.fasterxml.jackson.databind.ObjectMapper.DefaultTyping)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ObjectMapper
  langs:
  - java
  name: activateDefaultTyping(PolymorphicTypeValidator ptv, ObjectMapper.DefaultTyping applicability)
  nameWithType: ObjectMapper.activateDefaultTyping(PolymorphicTypeValidator ptv, ObjectMapper.DefaultTyping applicability)
  fullName: com.fasterxml.jackson.databind.ObjectMapper.activateDefaultTyping(PolymorphicTypeValidator ptv, ObjectMapper.DefaultTyping applicability)
  overload: com.fasterxml.jackson.databind.ObjectMapper.activateDefaultTyping*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: >-
    Convenience method that is equivalent to calling


    ```java

    activateDefaultTyping(ptv, dti, JsonTypeInfo.As.WRAPPER_ARRAY);

    ```


    NOTE: choice of <xref uid="com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator" data-throw-if-not-resolved="false">PolymorphicTypeValidator</xref> to pass is critical for security as allowing all subtypes can be risky for untrusted content.
  syntax:
    content: public ObjectMapper activateDefaultTyping(PolymorphicTypeValidator ptv, ObjectMapper.DefaultTyping applicability)
    parameters:
    - id: ptv
      type: com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator
      description: >-
        Validator used to verify that actual subtypes to deserialize are valid against
            whatever criteria validator uses: important in case where untrusted content is deserialized.
    - id: applicability
      type: com.fasterxml.jackson.databind.ObjectMapper.DefaultTyping
      description: >-
        Defines kinds of types for which additional type information
            is added; see <xref uid="" data-throw-if-not-resolved="false">DefaultTyping</xref> for more information.
    return:
      type: com.fasterxml.jackson.databind.ObjectMapper
- uid: com.fasterxml.jackson.databind.ObjectMapper.activateDefaultTyping(com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator,com.fasterxml.jackson.databind.ObjectMapper.DefaultTyping,com.fasterxml.jackson.annotation.JsonTypeInfo.As)
  id: activateDefaultTyping(com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator,com.fasterxml.jackson.databind.ObjectMapper.DefaultTyping,com.fasterxml.jackson.annotation.JsonTypeInfo.As)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ObjectMapper
  langs:
  - java
  name: activateDefaultTyping(PolymorphicTypeValidator ptv, ObjectMapper.DefaultTyping applicability, JsonTypeInfo.As includeAs)
  nameWithType: ObjectMapper.activateDefaultTyping(PolymorphicTypeValidator ptv, ObjectMapper.DefaultTyping applicability, JsonTypeInfo.As includeAs)
  fullName: com.fasterxml.jackson.databind.ObjectMapper.activateDefaultTyping(PolymorphicTypeValidator ptv, ObjectMapper.DefaultTyping applicability, JsonTypeInfo.As includeAs)
  overload: com.fasterxml.jackson.databind.ObjectMapper.activateDefaultTyping*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: >-
    Method for enabling automatic inclusion of type information ("Default Typing"), needed for proper deserialization of polymorphic types (unless types have been annotated with <xref uid="com.fasterxml.jackson.annotation.JsonTypeInfo" data-throw-if-not-resolved="false">com.fasterxml.jackson.annotation.JsonTypeInfo</xref>).


    NOTE: use of `JsonTypeInfo.As#EXTERNAL_PROPERTY` **NOT SUPPORTED**; and attempts of do so will throw an <xref uid="java.lang.IllegalArgumentException" data-throw-if-not-resolved="false">IllegalArgumentException</xref> to make this limitation explicit.


    NOTE: choice of <xref uid="com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator" data-throw-if-not-resolved="false">PolymorphicTypeValidator</xref> to pass is critical for security as allowing all subtypes can be risky for untrusted content.
  syntax:
    content: public ObjectMapper activateDefaultTyping(PolymorphicTypeValidator ptv, ObjectMapper.DefaultTyping applicability, JsonTypeInfo.As includeAs)
    parameters:
    - id: ptv
      type: com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator
      description: >-
        Validator used to verify that actual subtypes to deserialize are valid against
            whatever criteria validator uses: important in case where untrusted content is deserialized.
    - id: applicability
      type: com.fasterxml.jackson.databind.ObjectMapper.DefaultTyping
      description: >-
        Defines kinds of types for which additional type information
            is added; see <xref uid="" data-throw-if-not-resolved="false">DefaultTyping</xref> for more information.
    - id: includeAs
      type: com.fasterxml.jackson.annotation.JsonTypeInfo.As
    return:
      type: com.fasterxml.jackson.databind.ObjectMapper
- uid: com.fasterxml.jackson.databind.ObjectMapper.activateDefaultTypingAsProperty(com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator,com.fasterxml.jackson.databind.ObjectMapper.DefaultTyping,java.lang.String)
  id: activateDefaultTypingAsProperty(com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator,com.fasterxml.jackson.databind.ObjectMapper.DefaultTyping,java.lang.String)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ObjectMapper
  langs:
  - java
  name: activateDefaultTypingAsProperty(PolymorphicTypeValidator ptv, ObjectMapper.DefaultTyping applicability, String propertyName)
  nameWithType: ObjectMapper.activateDefaultTypingAsProperty(PolymorphicTypeValidator ptv, ObjectMapper.DefaultTyping applicability, String propertyName)
  fullName: com.fasterxml.jackson.databind.ObjectMapper.activateDefaultTypingAsProperty(PolymorphicTypeValidator ptv, ObjectMapper.DefaultTyping applicability, String propertyName)
  overload: com.fasterxml.jackson.databind.ObjectMapper.activateDefaultTypingAsProperty*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: >-
    Method for enabling automatic inclusion of type information ("Default Typing") -- needed for proper deserialization of polymorphic types (unless types have been annotated with <xref uid="com.fasterxml.jackson.annotation.JsonTypeInfo" data-throw-if-not-resolved="false">com.fasterxml.jackson.annotation.JsonTypeInfo</xref>) -- using "As.PROPERTY" inclusion mechanism and specified property name to use for inclusion (default being "@class" since default type information always uses class name as type identifier)


    NOTE: choice of <xref uid="com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator" data-throw-if-not-resolved="false">PolymorphicTypeValidator</xref> to pass is critical for security as allowing all subtypes can be risky for untrusted content.
  syntax:
    content: public ObjectMapper activateDefaultTypingAsProperty(PolymorphicTypeValidator ptv, ObjectMapper.DefaultTyping applicability, String propertyName)
    parameters:
    - id: ptv
      type: com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator
      description: >-
        Validator used to verify that actual subtypes to deserialize are valid against
            whatever criteria validator uses: important in case where untrusted content is deserialized.
    - id: applicability
      type: com.fasterxml.jackson.databind.ObjectMapper.DefaultTyping
      description: >-
        Defines kinds of types for which additional type information
            is added; see <xref uid="" data-throw-if-not-resolved="false">DefaultTyping</xref> for more information.
    - id: propertyName
      type: java.lang.String
      description: Name of property used for including type id for polymorphic values.
    return:
      type: com.fasterxml.jackson.databind.ObjectMapper
- uid: com.fasterxml.jackson.databind.ObjectMapper.addHandler(com.fasterxml.jackson.databind.deser.DeserializationProblemHandler)
  id: addHandler(com.fasterxml.jackson.databind.deser.DeserializationProblemHandler)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ObjectMapper
  langs:
  - java
  name: addHandler(DeserializationProblemHandler h)
  nameWithType: ObjectMapper.addHandler(DeserializationProblemHandler h)
  fullName: com.fasterxml.jackson.databind.ObjectMapper.addHandler(DeserializationProblemHandler h)
  overload: com.fasterxml.jackson.databind.ObjectMapper.addHandler*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: Method for adding specified <xref uid="com.fasterxml.jackson.databind.deser.DeserializationProblemHandler" data-throw-if-not-resolved="false">DeserializationProblemHandler</xref> to be used for handling specific problems during deserialization.
  syntax:
    content: public ObjectMapper addHandler(DeserializationProblemHandler h)
    parameters:
    - id: h
      type: com.fasterxml.jackson.databind.deser.DeserializationProblemHandler
    return:
      type: com.fasterxml.jackson.databind.ObjectMapper
- uid: com.fasterxml.jackson.databind.ObjectMapper.addMixIn(java.lang.Class<?>,java.lang.Class<?>)
  id: addMixIn(java.lang.Class<?>,java.lang.Class<?>)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ObjectMapper
  langs:
  - java
  name: addMixIn(Class<?> target, Class<?> mixinSource)
  nameWithType: ObjectMapper.addMixIn(Class<?> target, Class<?> mixinSource)
  fullName: com.fasterxml.jackson.databind.ObjectMapper.addMixIn(Class<?> target, Class<?> mixinSource)
  overload: com.fasterxml.jackson.databind.ObjectMapper.addMixIn*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: Method to use for adding mix-in annotations to use for augmenting specified class or interface. All annotations from `mixinSource` are taken to override annotations that `target` (or its supertypes) has.
  syntax:
    content: public ObjectMapper addMixIn(Class<?> target, Class<?> mixinSource)
    parameters:
    - id: target
      type: java.lang.Class<?>
      description: Class (or interface) whose annotations to effectively override
    - id: mixinSource
      type: java.lang.Class<?>
      description: >-
        Class (or interface) whose annotations are to
           be "added" to target's annotations, overriding as necessary
    return:
      type: com.fasterxml.jackson.databind.ObjectMapper
- uid: com.fasterxml.jackson.databind.ObjectMapper.addMixInAnnotations(java.lang.Class<?>,java.lang.Class<?>)
  id: addMixInAnnotations(java.lang.Class<?>,java.lang.Class<?>)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ObjectMapper
  langs:
  - java
  name: addMixInAnnotations(Class<?> target, Class<?> mixinSource)
  nameWithType: ObjectMapper.addMixInAnnotations(Class<?> target, Class<?> mixinSource)
  fullName: com.fasterxml.jackson.databind.ObjectMapper.addMixInAnnotations(Class<?> target, Class<?> mixinSource)
  overload: com.fasterxml.jackson.databind.ObjectMapper.addMixInAnnotations*
  type: Method
  package: com.fasterxml.jackson.databind
  syntax:
    content: public final void addMixInAnnotations(Class<?> target, Class<?> mixinSource)
    parameters:
    - id: target
      type: java.lang.Class<?>
    - id: mixinSource
      type: java.lang.Class<?>
- uid: com.fasterxml.jackson.databind.ObjectMapper.canDeserialize(com.fasterxml.jackson.databind.JavaType)
  id: canDeserialize(com.fasterxml.jackson.databind.JavaType)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ObjectMapper
  langs:
  - java
  name: canDeserialize(JavaType type)
  nameWithType: ObjectMapper.canDeserialize(JavaType type)
  fullName: com.fasterxml.jackson.databind.ObjectMapper.canDeserialize(JavaType type)
  overload: com.fasterxml.jackson.databind.ObjectMapper.canDeserialize*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: >-
    Method that can be called to check whether mapper thinks it could deserialize an Object of given type. Check is done by checking whether a registered deserializer can be found or built for the type; if not (either by no mapping being found, or through an `Exception` being thrown, false is returned.


    **NOTE**: in case an exception is thrown during course of trying co construct matching deserializer, it will be effectively swallowed. If you want access to that exception, call <xref uid="com.fasterxml.jackson.databind.ObjectMapper.canDeserialize(com.fasterxml.jackson.databind.JavaType,java.util.concurrent.atomic.AtomicReference&lt;java.lang.Throwable&gt;)" data-throw-if-not-resolved="false">#canDeserialize(JavaType, AtomicReference)</xref> instead.
  syntax:
    content: public boolean canDeserialize(JavaType type)
    parameters:
    - id: type
      type: com.fasterxml.jackson.databind.JavaType
    return:
      type: boolean
      description: >-
        True if mapper can find a serializer for instances of
          given class (potentially serializable), false otherwise (not
          serializable)
- uid: com.fasterxml.jackson.databind.ObjectMapper.canDeserialize(com.fasterxml.jackson.databind.JavaType,java.util.concurrent.atomic.AtomicReference<java.lang.Throwable>)
  id: canDeserialize(com.fasterxml.jackson.databind.JavaType,java.util.concurrent.atomic.AtomicReference<java.lang.Throwable>)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ObjectMapper
  langs:
  - java
  name: canDeserialize(JavaType type, AtomicReference<Throwable> cause)
  nameWithType: ObjectMapper.canDeserialize(JavaType type, AtomicReference<Throwable> cause)
  fullName: com.fasterxml.jackson.databind.ObjectMapper.canDeserialize(JavaType type, AtomicReference<Throwable> cause)
  overload: com.fasterxml.jackson.databind.ObjectMapper.canDeserialize*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: 'Method similar to <xref uid="com.fasterxml.jackson.databind.ObjectMapper.canDeserialize(com.fasterxml.jackson.databind.JavaType)" data-throw-if-not-resolved="false">#canDeserialize(JavaType)</xref> but that can return actual <xref uid="java.lang.Throwable" data-throw-if-not-resolved="false">Throwable</xref> that was thrown when trying to construct serializer: this may be useful in figuring out what the actual problem is.'
  syntax:
    content: public boolean canDeserialize(JavaType type, AtomicReference<Throwable> cause)
    parameters:
    - id: type
      type: com.fasterxml.jackson.databind.JavaType
    - id: cause
      type: java.util.concurrent.atomic.AtomicReference<java.lang.Throwable>
    return:
      type: boolean
- uid: com.fasterxml.jackson.databind.ObjectMapper.canSerialize(java.lang.Class<?>)
  id: canSerialize(java.lang.Class<?>)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ObjectMapper
  langs:
  - java
  name: canSerialize(Class<?> type)
  nameWithType: ObjectMapper.canSerialize(Class<?> type)
  fullName: com.fasterxml.jackson.databind.ObjectMapper.canSerialize(Class<?> type)
  overload: com.fasterxml.jackson.databind.ObjectMapper.canSerialize*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: >-
    Method that can be called to check whether mapper thinks it could serialize an instance of given Class. Check is done by checking whether a serializer can be found for the type.


    NOTE: since this method does NOT throw exceptions, but internal processing may, caller usually has little information as to why serialization would fail. If you want access to internal <xref uid="java.lang.Exception" data-throw-if-not-resolved="false">Exception</xref>, call <xref uid="com.fasterxml.jackson.databind.ObjectMapper.canSerialize(java.lang.Class&lt;?&gt;,java.util.concurrent.atomic.AtomicReference&lt;java.lang.Throwable&gt;)" data-throw-if-not-resolved="false">#canSerialize(Class, AtomicReference)</xref> instead.
  syntax:
    content: public boolean canSerialize(Class<?> type)
    parameters:
    - id: type
      type: java.lang.Class<?>
    return:
      type: boolean
      description: >-
        True if mapper can find a serializer for instances of
          given class (potentially serializable), false otherwise (not
          serializable)
- uid: com.fasterxml.jackson.databind.ObjectMapper.canSerialize(java.lang.Class<?>,java.util.concurrent.atomic.AtomicReference<java.lang.Throwable>)
  id: canSerialize(java.lang.Class<?>,java.util.concurrent.atomic.AtomicReference<java.lang.Throwable>)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ObjectMapper
  langs:
  - java
  name: canSerialize(Class<?> type, AtomicReference<Throwable> cause)
  nameWithType: ObjectMapper.canSerialize(Class<?> type, AtomicReference<Throwable> cause)
  fullName: com.fasterxml.jackson.databind.ObjectMapper.canSerialize(Class<?> type, AtomicReference<Throwable> cause)
  overload: com.fasterxml.jackson.databind.ObjectMapper.canSerialize*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: 'Method similar to <xref uid="com.fasterxml.jackson.databind.ObjectMapper.canSerialize(java.lang.Class&lt;?&gt;)" data-throw-if-not-resolved="false">#canSerialize(Class)</xref> but that can return actual <xref uid="java.lang.Throwable" data-throw-if-not-resolved="false">Throwable</xref> that was thrown when trying to construct serializer: this may be useful in figuring out what the actual problem is.'
  syntax:
    content: public boolean canSerialize(Class<?> type, AtomicReference<Throwable> cause)
    parameters:
    - id: type
      type: java.lang.Class<?>
    - id: cause
      type: java.util.concurrent.atomic.AtomicReference<java.lang.Throwable>
    return:
      type: boolean
- uid: com.fasterxml.jackson.databind.ObjectMapper.clearProblemHandlers()
  id: clearProblemHandlers()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ObjectMapper
  langs:
  - java
  name: clearProblemHandlers()
  nameWithType: ObjectMapper.clearProblemHandlers()
  fullName: com.fasterxml.jackson.databind.ObjectMapper.clearProblemHandlers()
  overload: com.fasterxml.jackson.databind.ObjectMapper.clearProblemHandlers*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: Method for removing all registered <xref uid="com.fasterxml.jackson.databind.deser.DeserializationProblemHandler" data-throw-if-not-resolved="false">DeserializationProblemHandler</xref>s instances from this mapper.
  syntax:
    content: public ObjectMapper clearProblemHandlers()
    return:
      type: com.fasterxml.jackson.databind.ObjectMapper
- uid: com.fasterxml.jackson.databind.ObjectMapper.configOverride(java.lang.Class<?>)
  id: configOverride(java.lang.Class<?>)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ObjectMapper
  langs:
  - java
  name: configOverride(Class<?> type)
  nameWithType: ObjectMapper.configOverride(Class<?> type)
  fullName: com.fasterxml.jackson.databind.ObjectMapper.configOverride(Class<?> type)
  overload: com.fasterxml.jackson.databind.ObjectMapper.configOverride*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: >-
    Accessor for getting a mutable configuration override object for given type, needed to add or change per-type overrides applied to properties of given type. Usage is through returned object by calling "setter" methods, which directly modify override object and take effect directly. For example you can do


    ```java

    mapper.configOverride(java.util.Date.class)
           .setFormat(JsonFormat.Value.forPattern("yyyy-MM-dd"));
    ```


    to change the default format to use for properties of type <xref uid="java.util.Date" data-throw-if-not-resolved="false">java.util.Date</xref> (possibly further overridden by per-property annotations)
  syntax:
    content: public MutableConfigOverride configOverride(Class<?> type)
    parameters:
    - id: type
      type: java.lang.Class<?>
    return:
      type: com.fasterxml.jackson.databind.cfg.MutableConfigOverride
- uid: com.fasterxml.jackson.databind.ObjectMapper.configure(com.fasterxml.jackson.core.JsonGenerator.Feature,boolean)
  id: configure(com.fasterxml.jackson.core.JsonGenerator.Feature,boolean)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ObjectMapper
  langs:
  - java
  name: configure(JsonGenerator.Feature f, boolean state)
  nameWithType: ObjectMapper.configure(JsonGenerator.Feature f, boolean state)
  fullName: com.fasterxml.jackson.databind.ObjectMapper.configure(JsonGenerator.Feature f, boolean state)
  overload: com.fasterxml.jackson.databind.ObjectMapper.configure*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: >-
    Method for changing state of an on/off <xref uid="com.fasterxml.jackson.core.JsonGenerator" data-throw-if-not-resolved="false">JsonGenerator</xref> feature for generator instances this object mapper creates.


    Note that this is equivalent to directly calling same method on <xref uid="com.fasterxml.jackson.databind.ObjectMapper.getFactory*" data-throw-if-not-resolved="false">#getFactory</xref>.


    WARNING: since this method directly modifies state of underlying <xref uid="com.fasterxml.jackson.core.JsonFactory" data-throw-if-not-resolved="false">JsonFactory</xref>, it will change observed configuration by <xref uid="com.fasterxml.jackson.databind.ObjectWriter" data-throw-if-not-resolved="false">ObjectWriter</xref>s as well -- to avoid this, use <xref uid="com.fasterxml.jackson.databind.ObjectWriter.with(com.fasterxml.jackson.core.JsonGenerator.Feature)" data-throw-if-not-resolved="false">ObjectWriter#with(JsonGenerator.Feature)</xref> instead.
  syntax:
    content: public ObjectMapper configure(JsonGenerator.Feature f, boolean state)
    parameters:
    - id: f
      type: com.fasterxml.jackson.core.JsonGenerator.Feature
    - id: state
      type: boolean
    return:
      type: com.fasterxml.jackson.databind.ObjectMapper
- uid: com.fasterxml.jackson.databind.ObjectMapper.configure(com.fasterxml.jackson.core.JsonParser.Feature,boolean)
  id: configure(com.fasterxml.jackson.core.JsonParser.Feature,boolean)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ObjectMapper
  langs:
  - java
  name: configure(JsonParser.Feature f, boolean state)
  nameWithType: ObjectMapper.configure(JsonParser.Feature f, boolean state)
  fullName: com.fasterxml.jackson.databind.ObjectMapper.configure(JsonParser.Feature f, boolean state)
  overload: com.fasterxml.jackson.databind.ObjectMapper.configure*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: >-
    Method for changing state of specified <xref uid="com.fasterxml.jackson.core.JsonParser.Feature" data-throw-if-not-resolved="false">com.fasterxml.jackson.core.JsonParser.Feature</xref>s for parser instances this object mapper creates.


    Note that this is equivalent to directly calling same method on <xref uid="com.fasterxml.jackson.databind.ObjectMapper.getFactory*" data-throw-if-not-resolved="false">#getFactory</xref>.


    WARNING: since this method directly modifies state of underlying <xref uid="com.fasterxml.jackson.core.JsonFactory" data-throw-if-not-resolved="false">JsonFactory</xref>, it will change observed configuration by <xref uid="com.fasterxml.jackson.databind.ObjectReader" data-throw-if-not-resolved="false">ObjectReader</xref>s as well -- to avoid this, use <xref uid="com.fasterxml.jackson.databind.ObjectReader.with(com.fasterxml.jackson.core.JsonParser.Feature)" data-throw-if-not-resolved="false">ObjectReader#with(JsonParser.Feature)</xref> instead.
  syntax:
    content: public ObjectMapper configure(JsonParser.Feature f, boolean state)
    parameters:
    - id: f
      type: com.fasterxml.jackson.core.JsonParser.Feature
    - id: state
      type: boolean
    return:
      type: com.fasterxml.jackson.databind.ObjectMapper
- uid: com.fasterxml.jackson.databind.ObjectMapper.configure(com.fasterxml.jackson.databind.DeserializationFeature,boolean)
  id: configure(com.fasterxml.jackson.databind.DeserializationFeature,boolean)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ObjectMapper
  langs:
  - java
  name: configure(DeserializationFeature f, boolean state)
  nameWithType: ObjectMapper.configure(DeserializationFeature f, boolean state)
  fullName: com.fasterxml.jackson.databind.ObjectMapper.configure(DeserializationFeature f, boolean state)
  overload: com.fasterxml.jackson.databind.ObjectMapper.configure*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: Method for changing state of an on/off deserialization feature for this object mapper.
  syntax:
    content: public ObjectMapper configure(DeserializationFeature f, boolean state)
    parameters:
    - id: f
      type: com.fasterxml.jackson.databind.DeserializationFeature
    - id: state
      type: boolean
    return:
      type: com.fasterxml.jackson.databind.ObjectMapper
- uid: com.fasterxml.jackson.databind.ObjectMapper.configure(com.fasterxml.jackson.databind.MapperFeature,boolean)
  id: configure(com.fasterxml.jackson.databind.MapperFeature,boolean)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ObjectMapper
  langs:
  - java
  name: configure(MapperFeature f, boolean state)
  nameWithType: ObjectMapper.configure(MapperFeature f, boolean state)
  fullName: com.fasterxml.jackson.databind.ObjectMapper.configure(MapperFeature f, boolean state)
  overload: com.fasterxml.jackson.databind.ObjectMapper.configure*
  type: Method
  package: com.fasterxml.jackson.databind
  syntax:
    content: public ObjectMapper configure(MapperFeature f, boolean state)
    parameters:
    - id: f
      type: com.fasterxml.jackson.databind.MapperFeature
    - id: state
      type: boolean
    return:
      type: com.fasterxml.jackson.databind.ObjectMapper
- uid: com.fasterxml.jackson.databind.ObjectMapper.configure(com.fasterxml.jackson.databind.SerializationFeature,boolean)
  id: configure(com.fasterxml.jackson.databind.SerializationFeature,boolean)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ObjectMapper
  langs:
  - java
  name: configure(SerializationFeature f, boolean state)
  nameWithType: ObjectMapper.configure(SerializationFeature f, boolean state)
  fullName: com.fasterxml.jackson.databind.ObjectMapper.configure(SerializationFeature f, boolean state)
  overload: com.fasterxml.jackson.databind.ObjectMapper.configure*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: Method for changing state of an on/off serialization feature for this object mapper.
  syntax:
    content: public ObjectMapper configure(SerializationFeature f, boolean state)
    parameters:
    - id: f
      type: com.fasterxml.jackson.databind.SerializationFeature
    - id: state
      type: boolean
    return:
      type: com.fasterxml.jackson.databind.ObjectMapper
- uid: com.fasterxml.jackson.databind.ObjectMapper.constructType(java.lang.reflect.Type)
  id: constructType(java.lang.reflect.Type)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ObjectMapper
  langs:
  - java
  name: constructType(Type t)
  nameWithType: ObjectMapper.constructType(Type t)
  fullName: com.fasterxml.jackson.databind.ObjectMapper.constructType(Type t)
  overload: com.fasterxml.jackson.databind.ObjectMapper.constructType*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: Convenience method for constructing <xref uid="com.fasterxml.jackson.databind.JavaType" data-throw-if-not-resolved="false">JavaType</xref> out of given type (typically `java.lang.Class`), but without explicit context.
  syntax:
    content: public JavaType constructType(Type t)
    parameters:
    - id: t
      type: java.lang.reflect.Type
    return:
      type: com.fasterxml.jackson.databind.JavaType
- uid: com.fasterxml.jackson.databind.ObjectMapper.copy()
  id: copy()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ObjectMapper
  langs:
  - java
  name: copy()
  nameWithType: ObjectMapper.copy()
  fullName: com.fasterxml.jackson.databind.ObjectMapper.copy()
  overload: com.fasterxml.jackson.databind.ObjectMapper.copy*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: >-
    Method for creating a new <xref uid="com.fasterxml.jackson.databind.ObjectMapper" data-throw-if-not-resolved="false">ObjectMapper</xref> instance that has same initial configuration as this instance. Note that this also requires making a copy of the underlying <xref uid="com.fasterxml.jackson.core.JsonFactory" data-throw-if-not-resolved="false">JsonFactory</xref> instance.


    Method is typically used when multiple, differently configured mappers are needed. Although configuration is shared, cached serializers and deserializers are NOT shared, which means that the new instance may be re-configured before use; meaning that it behaves the same way as if an instance was constructed from scratch.
  syntax:
    content: public ObjectMapper copy()
    return:
      type: com.fasterxml.jackson.databind.ObjectMapper
- uid: com.fasterxml.jackson.databind.ObjectMapper.createArrayNode()
  id: createArrayNode()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ObjectMapper
  langs:
  - java
  name: createArrayNode()
  nameWithType: ObjectMapper.createArrayNode()
  fullName: com.fasterxml.jackson.databind.ObjectMapper.createArrayNode()
  overload: com.fasterxml.jackson.databind.ObjectMapper.createArrayNode*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: "Note: return type is co-variant, as basic ObjectCodec abstraction cannot refer to concrete node types (as it's part of core package, whereas impls are part of mapper package)"
  syntax:
    content: public ArrayNode createArrayNode()
    return:
      type: com.fasterxml.jackson.databind.node.ArrayNode
- uid: com.fasterxml.jackson.databind.ObjectMapper.createDeserializationContext(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationConfig)
  id: createDeserializationContext(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationConfig)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ObjectMapper
  langs:
  - java
  name: createDeserializationContext(JsonParser p, DeserializationConfig cfg)
  nameWithType: ObjectMapper.createDeserializationContext(JsonParser p, DeserializationConfig cfg)
  fullName: com.fasterxml.jackson.databind.ObjectMapper.createDeserializationContext(JsonParser p, DeserializationConfig cfg)
  overload: com.fasterxml.jackson.databind.ObjectMapper.createDeserializationContext*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: Internal helper method called to create an instance of <xref uid="com.fasterxml.jackson.databind.DeserializationContext" data-throw-if-not-resolved="false">DeserializationContext</xref> for deserializing a single root value. Can be overridden if a custom context is needed.
  syntax:
    content: protected DefaultDeserializationContext createDeserializationContext(JsonParser p, DeserializationConfig cfg)
    parameters:
    - id: p
      type: com.fasterxml.jackson.core.JsonParser
    - id: cfg
      type: com.fasterxml.jackson.databind.DeserializationConfig
    return:
      type: com.fasterxml.jackson.databind.deser.DefaultDeserializationContext
- uid: com.fasterxml.jackson.databind.ObjectMapper.createGenerator(java.io.DataOutput)
  id: createGenerator(java.io.DataOutput)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ObjectMapper
  langs:
  - java
  name: createGenerator(DataOutput out)
  nameWithType: ObjectMapper.createGenerator(DataOutput out)
  fullName: com.fasterxml.jackson.databind.ObjectMapper.createGenerator(DataOutput out)
  overload: com.fasterxml.jackson.databind.ObjectMapper.createGenerator*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: 'Factory method for constructing properly initialized <xref uid="com.fasterxml.jackson.core.JsonGenerator" data-throw-if-not-resolved="false">JsonGenerator</xref> to write content using specified <xref uid="java.io.DataOutput" data-throw-if-not-resolved="false">DataOutput</xref>. Generator is not managed (or "owned") by mapper: caller is responsible for properly closing it once content generation is complete.'
  syntax:
    content: public JsonGenerator createGenerator(DataOutput out)
    parameters:
    - id: out
      type: java.io.DataOutput
    return:
      type: com.fasterxml.jackson.core.JsonGenerator
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.databind.ObjectMapper.createGenerator(java.io.File,com.fasterxml.jackson.core.JsonEncoding)
  id: createGenerator(java.io.File,com.fasterxml.jackson.core.JsonEncoding)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ObjectMapper
  langs:
  - java
  name: createGenerator(File outputFile, JsonEncoding enc)
  nameWithType: ObjectMapper.createGenerator(File outputFile, JsonEncoding enc)
  fullName: com.fasterxml.jackson.databind.ObjectMapper.createGenerator(File outputFile, JsonEncoding enc)
  overload: com.fasterxml.jackson.databind.ObjectMapper.createGenerator*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: 'Factory method for constructing properly initialized <xref uid="com.fasterxml.jackson.core.JsonGenerator" data-throw-if-not-resolved="false">JsonGenerator</xref> to write content to specified <xref uid="java.io.File" data-throw-if-not-resolved="false">File</xref>, using specified encoding. Generator is not managed (or "owned") by mapper: caller is responsible for properly closing it once content generation is complete.'
  syntax:
    content: public JsonGenerator createGenerator(File outputFile, JsonEncoding enc)
    parameters:
    - id: outputFile
      type: java.io.File
    - id: enc
      type: com.fasterxml.jackson.core.JsonEncoding
    return:
      type: com.fasterxml.jackson.core.JsonGenerator
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.databind.ObjectMapper.createGenerator(java.io.OutputStream)
  id: createGenerator(java.io.OutputStream)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ObjectMapper
  langs:
  - java
  name: createGenerator(OutputStream out)
  nameWithType: ObjectMapper.createGenerator(OutputStream out)
  fullName: com.fasterxml.jackson.databind.ObjectMapper.createGenerator(OutputStream out)
  overload: com.fasterxml.jackson.databind.ObjectMapper.createGenerator*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: 'Factory method for constructing properly initialized <xref uid="com.fasterxml.jackson.core.JsonGenerator" data-throw-if-not-resolved="false">JsonGenerator</xref> to write content using specified <xref uid="java.io.OutputStream" data-throw-if-not-resolved="false">OutputStream</xref>. Generator is not managed (or "owned") by mapper: caller is responsible for properly closing it once content generation is complete.'
  syntax:
    content: public JsonGenerator createGenerator(OutputStream out)
    parameters:
    - id: out
      type: java.io.OutputStream
    return:
      type: com.fasterxml.jackson.core.JsonGenerator
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.databind.ObjectMapper.createGenerator(java.io.OutputStream,com.fasterxml.jackson.core.JsonEncoding)
  id: createGenerator(java.io.OutputStream,com.fasterxml.jackson.core.JsonEncoding)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ObjectMapper
  langs:
  - java
  name: createGenerator(OutputStream out, JsonEncoding enc)
  nameWithType: ObjectMapper.createGenerator(OutputStream out, JsonEncoding enc)
  fullName: com.fasterxml.jackson.databind.ObjectMapper.createGenerator(OutputStream out, JsonEncoding enc)
  overload: com.fasterxml.jackson.databind.ObjectMapper.createGenerator*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: 'Factory method for constructing properly initialized <xref uid="com.fasterxml.jackson.core.JsonGenerator" data-throw-if-not-resolved="false">JsonGenerator</xref> to write content using specified <xref uid="java.io.OutputStream" data-throw-if-not-resolved="false">OutputStream</xref> and encoding. Generator is not managed (or "owned") by mapper: caller is responsible for properly closing it once content generation is complete.'
  syntax:
    content: public JsonGenerator createGenerator(OutputStream out, JsonEncoding enc)
    parameters:
    - id: out
      type: java.io.OutputStream
    - id: enc
      type: com.fasterxml.jackson.core.JsonEncoding
    return:
      type: com.fasterxml.jackson.core.JsonGenerator
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.databind.ObjectMapper.createGenerator(java.io.Writer)
  id: createGenerator(java.io.Writer)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ObjectMapper
  langs:
  - java
  name: createGenerator(Writer w)
  nameWithType: ObjectMapper.createGenerator(Writer w)
  fullName: com.fasterxml.jackson.databind.ObjectMapper.createGenerator(Writer w)
  overload: com.fasterxml.jackson.databind.ObjectMapper.createGenerator*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: 'Factory method for constructing properly initialized <xref uid="com.fasterxml.jackson.core.JsonGenerator" data-throw-if-not-resolved="false">JsonGenerator</xref> to write content using specified <xref uid="java.io.Writer" data-throw-if-not-resolved="false">Writer</xref>. Generator is not managed (or "owned") by mapper: caller is responsible for properly closing it once content generation is complete.'
  syntax:
    content: public JsonGenerator createGenerator(Writer w)
    parameters:
    - id: w
      type: java.io.Writer
    return:
      type: com.fasterxml.jackson.core.JsonGenerator
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.databind.ObjectMapper.createNonBlockingByteArrayParser()
  id: createNonBlockingByteArrayParser()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ObjectMapper
  langs:
  - java
  name: createNonBlockingByteArrayParser()
  nameWithType: ObjectMapper.createNonBlockingByteArrayParser()
  fullName: com.fasterxml.jackson.databind.ObjectMapper.createNonBlockingByteArrayParser()
  overload: com.fasterxml.jackson.databind.ObjectMapper.createNonBlockingByteArrayParser*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: 'Factory method for constructing properly initialized <xref uid="com.fasterxml.jackson.core.JsonParser" data-throw-if-not-resolved="false">JsonParser</xref> to read content using non-blocking (asynchronous) mode. Parser is not managed (or "owned") by ObjectMapper: caller is responsible for properly closing it once content reading is complete.'
  syntax:
    content: public JsonParser createNonBlockingByteArrayParser()
    return:
      type: com.fasterxml.jackson.core.JsonParser
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.databind.ObjectMapper.createObjectNode()
  id: createObjectNode()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ObjectMapper
  langs:
  - java
  name: createObjectNode()
  nameWithType: ObjectMapper.createObjectNode()
  fullName: com.fasterxml.jackson.databind.ObjectMapper.createObjectNode()
  overload: com.fasterxml.jackson.databind.ObjectMapper.createObjectNode*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: "Note: return type is co-variant, as basic ObjectCodec abstraction cannot refer to concrete node types (as it's part of core package, whereas impls are part of mapper package)"
  syntax:
    content: public ObjectNode createObjectNode()
    return:
      type: com.fasterxml.jackson.databind.node.ObjectNode
- uid: com.fasterxml.jackson.databind.ObjectMapper.createParser(byte[])
  id: createParser(byte[])
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ObjectMapper
  langs:
  - java
  name: createParser(byte[] content)
  nameWithType: ObjectMapper.createParser(byte[] content)
  fullName: com.fasterxml.jackson.databind.ObjectMapper.createParser(byte[] content)
  overload: com.fasterxml.jackson.databind.ObjectMapper.createParser*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: 'Factory method for constructing properly initialized <xref uid="com.fasterxml.jackson.core.JsonParser" data-throw-if-not-resolved="false">JsonParser</xref> to read content from specified byte array. Parser is not managed (or "owned") by ObjectMapper: caller is responsible for properly closing it once content reading is complete.'
  syntax:
    content: public JsonParser createParser(byte[] content)
    parameters:
    - id: content
      type: byte[]
    return:
      type: com.fasterxml.jackson.core.JsonParser
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.databind.ObjectMapper.createParser(byte[],int,int)
  id: createParser(byte[],int,int)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ObjectMapper
  langs:
  - java
  name: createParser(byte[] content, int offset, int len)
  nameWithType: ObjectMapper.createParser(byte[] content, int offset, int len)
  fullName: com.fasterxml.jackson.databind.ObjectMapper.createParser(byte[] content, int offset, int len)
  overload: com.fasterxml.jackson.databind.ObjectMapper.createParser*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: 'Factory method for constructing properly initialized <xref uid="com.fasterxml.jackson.core.JsonParser" data-throw-if-not-resolved="false">JsonParser</xref> to read content from specified byte array. Parser is not managed (or "owned") by ObjectMapper: caller is responsible for properly closing it once content reading is complete.'
  syntax:
    content: public JsonParser createParser(byte[] content, int offset, int len)
    parameters:
    - id: content
      type: byte[]
    - id: offset
      type: int
    - id: len
      type: int
    return:
      type: com.fasterxml.jackson.core.JsonParser
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.databind.ObjectMapper.createParser(char[])
  id: createParser(char[])
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ObjectMapper
  langs:
  - java
  name: createParser(char[] content)
  nameWithType: ObjectMapper.createParser(char[] content)
  fullName: com.fasterxml.jackson.databind.ObjectMapper.createParser(char[] content)
  overload: com.fasterxml.jackson.databind.ObjectMapper.createParser*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: 'Factory method for constructing properly initialized <xref uid="com.fasterxml.jackson.core.JsonParser" data-throw-if-not-resolved="false">JsonParser</xref> to read content from specified character array Parser is not managed (or "owned") by ObjectMapper: caller is responsible for properly closing it once content reading is complete.'
  syntax:
    content: public JsonParser createParser(char[] content)
    parameters:
    - id: content
      type: char[]
    return:
      type: com.fasterxml.jackson.core.JsonParser
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.databind.ObjectMapper.createParser(char[],int,int)
  id: createParser(char[],int,int)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ObjectMapper
  langs:
  - java
  name: createParser(char[] content, int offset, int len)
  nameWithType: ObjectMapper.createParser(char[] content, int offset, int len)
  fullName: com.fasterxml.jackson.databind.ObjectMapper.createParser(char[] content, int offset, int len)
  overload: com.fasterxml.jackson.databind.ObjectMapper.createParser*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: 'Factory method for constructing properly initialized <xref uid="com.fasterxml.jackson.core.JsonParser" data-throw-if-not-resolved="false">JsonParser</xref> to read content from specified character array. Parser is not managed (or "owned") by ObjectMapper: caller is responsible for properly closing it once content reading is complete.'
  syntax:
    content: public JsonParser createParser(char[] content, int offset, int len)
    parameters:
    - id: content
      type: char[]
    - id: offset
      type: int
    - id: len
      type: int
    return:
      type: com.fasterxml.jackson.core.JsonParser
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.databind.ObjectMapper.createParser(java.io.DataInput)
  id: createParser(java.io.DataInput)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ObjectMapper
  langs:
  - java
  name: createParser(DataInput content)
  nameWithType: ObjectMapper.createParser(DataInput content)
  fullName: com.fasterxml.jackson.databind.ObjectMapper.createParser(DataInput content)
  overload: com.fasterxml.jackson.databind.ObjectMapper.createParser*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: 'Factory method for constructing properly initialized <xref uid="com.fasterxml.jackson.core.JsonParser" data-throw-if-not-resolved="false">JsonParser</xref> to read content using specified <xref uid="java.io.DataInput" data-throw-if-not-resolved="false">DataInput</xref>. Parser is not managed (or "owned") by ObjectMapper: caller is responsible for properly closing it once content reading is complete.'
  syntax:
    content: public JsonParser createParser(DataInput content)
    parameters:
    - id: content
      type: java.io.DataInput
    return:
      type: com.fasterxml.jackson.core.JsonParser
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.databind.ObjectMapper.createParser(java.io.File)
  id: createParser(java.io.File)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ObjectMapper
  langs:
  - java
  name: createParser(File src)
  nameWithType: ObjectMapper.createParser(File src)
  fullName: com.fasterxml.jackson.databind.ObjectMapper.createParser(File src)
  overload: com.fasterxml.jackson.databind.ObjectMapper.createParser*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: 'Factory method for constructing properly initialized <xref uid="com.fasterxml.jackson.core.JsonParser" data-throw-if-not-resolved="false">JsonParser</xref> to read content from specified <xref uid="java.io.File" data-throw-if-not-resolved="false">File</xref>. Parser is not managed (or "owned") by ObjectMapper: caller is responsible for properly closing it once content reading is complete.'
  syntax:
    content: public JsonParser createParser(File src)
    parameters:
    - id: src
      type: java.io.File
    return:
      type: com.fasterxml.jackson.core.JsonParser
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.databind.ObjectMapper.createParser(java.io.InputStream)
  id: createParser(java.io.InputStream)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ObjectMapper
  langs:
  - java
  name: createParser(InputStream in)
  nameWithType: ObjectMapper.createParser(InputStream in)
  fullName: com.fasterxml.jackson.databind.ObjectMapper.createParser(InputStream in)
  overload: com.fasterxml.jackson.databind.ObjectMapper.createParser*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: 'Factory method for constructing properly initialized <xref uid="com.fasterxml.jackson.core.JsonParser" data-throw-if-not-resolved="false">JsonParser</xref> to read content using specified <xref uid="java.io.InputStream" data-throw-if-not-resolved="false">InputStream</xref>. Parser is not managed (or "owned") by ObjectMapper: caller is responsible for properly closing it once content reading is complete.'
  syntax:
    content: public JsonParser createParser(InputStream in)
    parameters:
    - id: in
      type: java.io.InputStream
    return:
      type: com.fasterxml.jackson.core.JsonParser
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.databind.ObjectMapper.createParser(java.io.Reader)
  id: createParser(java.io.Reader)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ObjectMapper
  langs:
  - java
  name: createParser(Reader r)
  nameWithType: ObjectMapper.createParser(Reader r)
  fullName: com.fasterxml.jackson.databind.ObjectMapper.createParser(Reader r)
  overload: com.fasterxml.jackson.databind.ObjectMapper.createParser*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: 'Factory method for constructing properly initialized <xref uid="com.fasterxml.jackson.core.JsonParser" data-throw-if-not-resolved="false">JsonParser</xref> to read content using specified <xref uid="java.io.Reader" data-throw-if-not-resolved="false">Reader</xref>. Parser is not managed (or "owned") by ObjectMapper: caller is responsible for properly closing it once content reading is complete.'
  syntax:
    content: public JsonParser createParser(Reader r)
    parameters:
    - id: r
      type: java.io.Reader
    return:
      type: com.fasterxml.jackson.core.JsonParser
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.databind.ObjectMapper.createParser(java.lang.String)
  id: createParser(java.lang.String)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ObjectMapper
  langs:
  - java
  name: createParser(String content)
  nameWithType: ObjectMapper.createParser(String content)
  fullName: com.fasterxml.jackson.databind.ObjectMapper.createParser(String content)
  overload: com.fasterxml.jackson.databind.ObjectMapper.createParser*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: 'Factory method for constructing properly initialized <xref uid="com.fasterxml.jackson.core.JsonParser" data-throw-if-not-resolved="false">JsonParser</xref> to read content from specified String. Parser is not managed (or "owned") by ObjectMapper: caller is responsible for properly closing it once content reading is complete.'
  syntax:
    content: public JsonParser createParser(String content)
    parameters:
    - id: content
      type: java.lang.String
    return:
      type: com.fasterxml.jackson.core.JsonParser
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.databind.ObjectMapper.createParser(java.net.URL)
  id: createParser(java.net.URL)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ObjectMapper
  langs:
  - java
  name: createParser(URL src)
  nameWithType: ObjectMapper.createParser(URL src)
  fullName: com.fasterxml.jackson.databind.ObjectMapper.createParser(URL src)
  overload: com.fasterxml.jackson.databind.ObjectMapper.createParser*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: 'Factory method for constructing properly initialized <xref uid="com.fasterxml.jackson.core.JsonParser" data-throw-if-not-resolved="false">JsonParser</xref> to read content from specified <xref uid="java.io.File" data-throw-if-not-resolved="false">File</xref>. Parser is not managed (or "owned") by ObjectMapper: caller is responsible for properly closing it once content reading is complete.'
  syntax:
    content: public JsonParser createParser(URL src)
    parameters:
    - id: src
      type: java.net.URL
    return:
      type: com.fasterxml.jackson.core.JsonParser
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.databind.ObjectMapper.deactivateDefaultTyping()
  id: deactivateDefaultTyping()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ObjectMapper
  langs:
  - java
  name: deactivateDefaultTyping()
  nameWithType: ObjectMapper.deactivateDefaultTyping()
  fullName: com.fasterxml.jackson.databind.ObjectMapper.deactivateDefaultTyping()
  overload: com.fasterxml.jackson.databind.ObjectMapper.deactivateDefaultTyping*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: Method for disabling automatic inclusion of type information; if so, only explicitly annotated types (ones with <xref uid="com.fasterxml.jackson.annotation.JsonTypeInfo" data-throw-if-not-resolved="false">com.fasterxml.jackson.annotation.JsonTypeInfo</xref>) will have additional embedded type information.
  syntax:
    content: public ObjectMapper deactivateDefaultTyping()
    return:
      type: com.fasterxml.jackson.databind.ObjectMapper
- uid: com.fasterxml.jackson.databind.ObjectMapper.defaultClassIntrospector()
  id: defaultClassIntrospector()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ObjectMapper
  langs:
  - java
  name: defaultClassIntrospector()
  nameWithType: ObjectMapper.defaultClassIntrospector()
  fullName: com.fasterxml.jackson.databind.ObjectMapper.defaultClassIntrospector()
  overload: com.fasterxml.jackson.databind.ObjectMapper.defaultClassIntrospector*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: Overridable helper method used to construct default <xref uid="com.fasterxml.jackson.databind.introspect.ClassIntrospector" data-throw-if-not-resolved="false">ClassIntrospector</xref> to use.
  syntax:
    content: protected ClassIntrospector defaultClassIntrospector()
    return:
      type: com.fasterxml.jackson.databind.introspect.ClassIntrospector
- uid: com.fasterxml.jackson.databind.ObjectMapper.disable(com.fasterxml.jackson.core.JsonGenerator.Feature...)
  id: disable(com.fasterxml.jackson.core.JsonGenerator.Feature...)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ObjectMapper
  langs:
  - java
  name: disable(JsonGenerator.Feature[] features)
  nameWithType: ObjectMapper.disable(JsonGenerator.Feature[] features)
  fullName: com.fasterxml.jackson.databind.ObjectMapper.disable(JsonGenerator.Feature[] features)
  overload: com.fasterxml.jackson.databind.ObjectMapper.disable*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: >-
    Method for disabling specified <xref uid="com.fasterxml.jackson.core.JsonGenerator.Feature" data-throw-if-not-resolved="false">com.fasterxml.jackson.core.JsonGenerator.Feature</xref>s for parser instances this object mapper creates.


    Note that this is equivalent to directly calling same method on <xref uid="com.fasterxml.jackson.databind.ObjectMapper.getFactory*" data-throw-if-not-resolved="false">#getFactory</xref>.


    WARNING: since this method directly modifies state of underlying <xref uid="com.fasterxml.jackson.core.JsonFactory" data-throw-if-not-resolved="false">JsonFactory</xref>, it will change observed configuration by <xref uid="com.fasterxml.jackson.databind.ObjectWriter" data-throw-if-not-resolved="false">ObjectWriter</xref>s as well -- to avoid this, use <xref uid="com.fasterxml.jackson.databind.ObjectWriter.without(com.fasterxml.jackson.core.JsonGenerator.Feature)" data-throw-if-not-resolved="false">ObjectWriter#without(JsonGenerator.Feature)</xref> instead.
  syntax:
    content: public ObjectMapper disable(JsonGenerator.Feature[] features)
    parameters:
    - id: features
      type: com.fasterxml.jackson.core.JsonGenerator.Feature[]
    return:
      type: com.fasterxml.jackson.databind.ObjectMapper
- uid: com.fasterxml.jackson.databind.ObjectMapper.disable(com.fasterxml.jackson.core.JsonParser.Feature...)
  id: disable(com.fasterxml.jackson.core.JsonParser.Feature...)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ObjectMapper
  langs:
  - java
  name: disable(JsonParser.Feature[] features)
  nameWithType: ObjectMapper.disable(JsonParser.Feature[] features)
  fullName: com.fasterxml.jackson.databind.ObjectMapper.disable(JsonParser.Feature[] features)
  overload: com.fasterxml.jackson.databind.ObjectMapper.disable*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: >-
    Method for disabling specified <xref uid="com.fasterxml.jackson.core.JsonParser.Feature" data-throw-if-not-resolved="false">com.fasterxml.jackson.core.JsonParser.Feature</xref>s for parser instances this object mapper creates.


    Note that this is equivalent to directly calling same method on <xref uid="com.fasterxml.jackson.databind.ObjectMapper.getFactory*" data-throw-if-not-resolved="false">#getFactory</xref>.


    WARNING: since this method directly modifies state of underlying <xref uid="com.fasterxml.jackson.core.JsonFactory" data-throw-if-not-resolved="false">JsonFactory</xref>, it will change observed configuration by <xref uid="com.fasterxml.jackson.databind.ObjectReader" data-throw-if-not-resolved="false">ObjectReader</xref>s as well -- to avoid this, use <xref uid="com.fasterxml.jackson.databind.ObjectReader.without(com.fasterxml.jackson.core.JsonParser.Feature)" data-throw-if-not-resolved="false">ObjectReader#without(JsonParser.Feature)</xref> instead.
  syntax:
    content: public ObjectMapper disable(JsonParser.Feature[] features)
    parameters:
    - id: features
      type: com.fasterxml.jackson.core.JsonParser.Feature[]
    return:
      type: com.fasterxml.jackson.databind.ObjectMapper
- uid: com.fasterxml.jackson.databind.ObjectMapper.disable(com.fasterxml.jackson.databind.DeserializationFeature)
  id: disable(com.fasterxml.jackson.databind.DeserializationFeature)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ObjectMapper
  langs:
  - java
  name: disable(DeserializationFeature feature)
  nameWithType: ObjectMapper.disable(DeserializationFeature feature)
  fullName: com.fasterxml.jackson.databind.ObjectMapper.disable(DeserializationFeature feature)
  overload: com.fasterxml.jackson.databind.ObjectMapper.disable*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: Method for enabling specified <xref uid="com.fasterxml.jackson.databind.DeserializationConfig" data-throw-if-not-resolved="false">DeserializationConfig</xref> features. Modifies and returns this instance; no new object is created.
  syntax:
    content: public ObjectMapper disable(DeserializationFeature feature)
    parameters:
    - id: feature
      type: com.fasterxml.jackson.databind.DeserializationFeature
    return:
      type: com.fasterxml.jackson.databind.ObjectMapper
- uid: com.fasterxml.jackson.databind.ObjectMapper.disable(com.fasterxml.jackson.databind.DeserializationFeature,com.fasterxml.jackson.databind.DeserializationFeature...)
  id: disable(com.fasterxml.jackson.databind.DeserializationFeature,com.fasterxml.jackson.databind.DeserializationFeature...)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ObjectMapper
  langs:
  - java
  name: disable(DeserializationFeature first, DeserializationFeature[] f)
  nameWithType: ObjectMapper.disable(DeserializationFeature first, DeserializationFeature[] f)
  fullName: com.fasterxml.jackson.databind.ObjectMapper.disable(DeserializationFeature first, DeserializationFeature[] f)
  overload: com.fasterxml.jackson.databind.ObjectMapper.disable*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: Method for enabling specified <xref uid="com.fasterxml.jackson.databind.DeserializationConfig" data-throw-if-not-resolved="false">DeserializationConfig</xref> features. Modifies and returns this instance; no new object is created.
  syntax:
    content: public ObjectMapper disable(DeserializationFeature first, DeserializationFeature[] f)
    parameters:
    - id: first
      type: com.fasterxml.jackson.databind.DeserializationFeature
    - id: f
      type: com.fasterxml.jackson.databind.DeserializationFeature[]
    return:
      type: com.fasterxml.jackson.databind.ObjectMapper
- uid: com.fasterxml.jackson.databind.ObjectMapper.disable(com.fasterxml.jackson.databind.MapperFeature...)
  id: disable(com.fasterxml.jackson.databind.MapperFeature...)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ObjectMapper
  langs:
  - java
  name: disable(MapperFeature[] f)
  nameWithType: ObjectMapper.disable(MapperFeature[] f)
  fullName: com.fasterxml.jackson.databind.ObjectMapper.disable(MapperFeature[] f)
  overload: com.fasterxml.jackson.databind.ObjectMapper.disable*
  type: Method
  package: com.fasterxml.jackson.databind
  syntax:
    content: public ObjectMapper disable(MapperFeature[] f)
    parameters:
    - id: f
      type: com.fasterxml.jackson.databind.MapperFeature[]
    return:
      type: com.fasterxml.jackson.databind.ObjectMapper
- uid: com.fasterxml.jackson.databind.ObjectMapper.disable(com.fasterxml.jackson.databind.SerializationFeature)
  id: disable(com.fasterxml.jackson.databind.SerializationFeature)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ObjectMapper
  langs:
  - java
  name: disable(SerializationFeature f)
  nameWithType: ObjectMapper.disable(SerializationFeature f)
  fullName: com.fasterxml.jackson.databind.ObjectMapper.disable(SerializationFeature f)
  overload: com.fasterxml.jackson.databind.ObjectMapper.disable*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: Method for enabling specified <xref uid="com.fasterxml.jackson.databind.DeserializationConfig" data-throw-if-not-resolved="false">DeserializationConfig</xref> features. Modifies and returns this instance; no new object is created.
  syntax:
    content: public ObjectMapper disable(SerializationFeature f)
    parameters:
    - id: f
      type: com.fasterxml.jackson.databind.SerializationFeature
    return:
      type: com.fasterxml.jackson.databind.ObjectMapper
- uid: com.fasterxml.jackson.databind.ObjectMapper.disable(com.fasterxml.jackson.databind.SerializationFeature,com.fasterxml.jackson.databind.SerializationFeature...)
  id: disable(com.fasterxml.jackson.databind.SerializationFeature,com.fasterxml.jackson.databind.SerializationFeature...)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ObjectMapper
  langs:
  - java
  name: disable(SerializationFeature first, SerializationFeature[] f)
  nameWithType: ObjectMapper.disable(SerializationFeature first, SerializationFeature[] f)
  fullName: com.fasterxml.jackson.databind.ObjectMapper.disable(SerializationFeature first, SerializationFeature[] f)
  overload: com.fasterxml.jackson.databind.ObjectMapper.disable*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: Method for enabling specified <xref uid="com.fasterxml.jackson.databind.DeserializationConfig" data-throw-if-not-resolved="false">DeserializationConfig</xref> features. Modifies and returns this instance; no new object is created.
  syntax:
    content: public ObjectMapper disable(SerializationFeature first, SerializationFeature[] f)
    parameters:
    - id: first
      type: com.fasterxml.jackson.databind.SerializationFeature
    - id: f
      type: com.fasterxml.jackson.databind.SerializationFeature[]
    return:
      type: com.fasterxml.jackson.databind.ObjectMapper
- uid: com.fasterxml.jackson.databind.ObjectMapper.disableDefaultTyping()
  id: disableDefaultTyping()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ObjectMapper
  langs:
  - java
  name: disableDefaultTyping()
  nameWithType: ObjectMapper.disableDefaultTyping()
  fullName: com.fasterxml.jackson.databind.ObjectMapper.disableDefaultTyping()
  overload: com.fasterxml.jackson.databind.ObjectMapper.disableDefaultTyping*
  type: Method
  package: com.fasterxml.jackson.databind
  syntax:
    content: public ObjectMapper disableDefaultTyping()
    return:
      type: com.fasterxml.jackson.databind.ObjectMapper
- uid: com.fasterxml.jackson.databind.ObjectMapper.enable(com.fasterxml.jackson.core.JsonGenerator.Feature...)
  id: enable(com.fasterxml.jackson.core.JsonGenerator.Feature...)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ObjectMapper
  langs:
  - java
  name: enable(JsonGenerator.Feature[] features)
  nameWithType: ObjectMapper.enable(JsonGenerator.Feature[] features)
  fullName: com.fasterxml.jackson.databind.ObjectMapper.enable(JsonGenerator.Feature[] features)
  overload: com.fasterxml.jackson.databind.ObjectMapper.enable*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: >-
    Method for enabling specified <xref uid="com.fasterxml.jackson.core.JsonGenerator.Feature" data-throw-if-not-resolved="false">com.fasterxml.jackson.core.JsonGenerator.Feature</xref>s for parser instances this object mapper creates.


    Note that this is equivalent to directly calling same method on <xref uid="com.fasterxml.jackson.databind.ObjectMapper.getFactory*" data-throw-if-not-resolved="false">#getFactory</xref>.


    WARNING: since this method directly modifies state of underlying <xref uid="com.fasterxml.jackson.core.JsonFactory" data-throw-if-not-resolved="false">JsonFactory</xref>, it will change observed configuration by <xref uid="com.fasterxml.jackson.databind.ObjectWriter" data-throw-if-not-resolved="false">ObjectWriter</xref>s as well -- to avoid this, use <xref uid="com.fasterxml.jackson.databind.ObjectWriter.with(com.fasterxml.jackson.core.JsonGenerator.Feature)" data-throw-if-not-resolved="false">ObjectWriter#with(JsonGenerator.Feature)</xref> instead.
  syntax:
    content: public ObjectMapper enable(JsonGenerator.Feature[] features)
    parameters:
    - id: features
      type: com.fasterxml.jackson.core.JsonGenerator.Feature[]
    return:
      type: com.fasterxml.jackson.databind.ObjectMapper
- uid: com.fasterxml.jackson.databind.ObjectMapper.enable(com.fasterxml.jackson.core.JsonParser.Feature...)
  id: enable(com.fasterxml.jackson.core.JsonParser.Feature...)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ObjectMapper
  langs:
  - java
  name: enable(JsonParser.Feature[] features)
  nameWithType: ObjectMapper.enable(JsonParser.Feature[] features)
  fullName: com.fasterxml.jackson.databind.ObjectMapper.enable(JsonParser.Feature[] features)
  overload: com.fasterxml.jackson.databind.ObjectMapper.enable*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: >-
    Method for enabling specified <xref uid="com.fasterxml.jackson.core.JsonParser.Feature" data-throw-if-not-resolved="false">com.fasterxml.jackson.core.JsonParser.Feature</xref>s for parser instances this object mapper creates.


    Note that this is equivalent to directly calling same method on <xref uid="com.fasterxml.jackson.databind.ObjectMapper.getFactory*" data-throw-if-not-resolved="false">#getFactory</xref>.


    WARNING: since this method directly modifies state of underlying <xref uid="com.fasterxml.jackson.core.JsonFactory" data-throw-if-not-resolved="false">JsonFactory</xref>, it will change observed configuration by <xref uid="com.fasterxml.jackson.databind.ObjectReader" data-throw-if-not-resolved="false">ObjectReader</xref>s as well -- to avoid this, use <xref uid="com.fasterxml.jackson.databind.ObjectReader.with(com.fasterxml.jackson.core.JsonParser.Feature)" data-throw-if-not-resolved="false">ObjectReader#with(JsonParser.Feature)</xref> instead.
  syntax:
    content: public ObjectMapper enable(JsonParser.Feature[] features)
    parameters:
    - id: features
      type: com.fasterxml.jackson.core.JsonParser.Feature[]
    return:
      type: com.fasterxml.jackson.databind.ObjectMapper
- uid: com.fasterxml.jackson.databind.ObjectMapper.enable(com.fasterxml.jackson.databind.DeserializationFeature)
  id: enable(com.fasterxml.jackson.databind.DeserializationFeature)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ObjectMapper
  langs:
  - java
  name: enable(DeserializationFeature feature)
  nameWithType: ObjectMapper.enable(DeserializationFeature feature)
  fullName: com.fasterxml.jackson.databind.ObjectMapper.enable(DeserializationFeature feature)
  overload: com.fasterxml.jackson.databind.ObjectMapper.enable*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: Method for enabling specified <xref uid="com.fasterxml.jackson.databind.DeserializationConfig" data-throw-if-not-resolved="false">DeserializationConfig</xref> features. Modifies and returns this instance; no new object is created.
  syntax:
    content: public ObjectMapper enable(DeserializationFeature feature)
    parameters:
    - id: feature
      type: com.fasterxml.jackson.databind.DeserializationFeature
    return:
      type: com.fasterxml.jackson.databind.ObjectMapper
- uid: com.fasterxml.jackson.databind.ObjectMapper.enable(com.fasterxml.jackson.databind.DeserializationFeature,com.fasterxml.jackson.databind.DeserializationFeature...)
  id: enable(com.fasterxml.jackson.databind.DeserializationFeature,com.fasterxml.jackson.databind.DeserializationFeature...)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ObjectMapper
  langs:
  - java
  name: enable(DeserializationFeature first, DeserializationFeature[] f)
  nameWithType: ObjectMapper.enable(DeserializationFeature first, DeserializationFeature[] f)
  fullName: com.fasterxml.jackson.databind.ObjectMapper.enable(DeserializationFeature first, DeserializationFeature[] f)
  overload: com.fasterxml.jackson.databind.ObjectMapper.enable*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: Method for enabling specified <xref uid="com.fasterxml.jackson.databind.DeserializationConfig" data-throw-if-not-resolved="false">DeserializationConfig</xref> features. Modifies and returns this instance; no new object is created.
  syntax:
    content: public ObjectMapper enable(DeserializationFeature first, DeserializationFeature[] f)
    parameters:
    - id: first
      type: com.fasterxml.jackson.databind.DeserializationFeature
    - id: f
      type: com.fasterxml.jackson.databind.DeserializationFeature[]
    return:
      type: com.fasterxml.jackson.databind.ObjectMapper
- uid: com.fasterxml.jackson.databind.ObjectMapper.enable(com.fasterxml.jackson.databind.MapperFeature...)
  id: enable(com.fasterxml.jackson.databind.MapperFeature...)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ObjectMapper
  langs:
  - java
  name: enable(MapperFeature[] f)
  nameWithType: ObjectMapper.enable(MapperFeature[] f)
  fullName: com.fasterxml.jackson.databind.ObjectMapper.enable(MapperFeature[] f)
  overload: com.fasterxml.jackson.databind.ObjectMapper.enable*
  type: Method
  package: com.fasterxml.jackson.databind
  syntax:
    content: public ObjectMapper enable(MapperFeature[] f)
    parameters:
    - id: f
      type: com.fasterxml.jackson.databind.MapperFeature[]
    return:
      type: com.fasterxml.jackson.databind.ObjectMapper
- uid: com.fasterxml.jackson.databind.ObjectMapper.enable(com.fasterxml.jackson.databind.SerializationFeature)
  id: enable(com.fasterxml.jackson.databind.SerializationFeature)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ObjectMapper
  langs:
  - java
  name: enable(SerializationFeature f)
  nameWithType: ObjectMapper.enable(SerializationFeature f)
  fullName: com.fasterxml.jackson.databind.ObjectMapper.enable(SerializationFeature f)
  overload: com.fasterxml.jackson.databind.ObjectMapper.enable*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: Method for enabling specified <xref uid="com.fasterxml.jackson.databind.DeserializationConfig" data-throw-if-not-resolved="false">DeserializationConfig</xref> feature. Modifies and returns this instance; no new object is created.
  syntax:
    content: public ObjectMapper enable(SerializationFeature f)
    parameters:
    - id: f
      type: com.fasterxml.jackson.databind.SerializationFeature
    return:
      type: com.fasterxml.jackson.databind.ObjectMapper
- uid: com.fasterxml.jackson.databind.ObjectMapper.enable(com.fasterxml.jackson.databind.SerializationFeature,com.fasterxml.jackson.databind.SerializationFeature...)
  id: enable(com.fasterxml.jackson.databind.SerializationFeature,com.fasterxml.jackson.databind.SerializationFeature...)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ObjectMapper
  langs:
  - java
  name: enable(SerializationFeature first, SerializationFeature[] f)
  nameWithType: ObjectMapper.enable(SerializationFeature first, SerializationFeature[] f)
  fullName: com.fasterxml.jackson.databind.ObjectMapper.enable(SerializationFeature first, SerializationFeature[] f)
  overload: com.fasterxml.jackson.databind.ObjectMapper.enable*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: Method for enabling specified <xref uid="com.fasterxml.jackson.databind.DeserializationConfig" data-throw-if-not-resolved="false">DeserializationConfig</xref> features. Modifies and returns this instance; no new object is created.
  syntax:
    content: public ObjectMapper enable(SerializationFeature first, SerializationFeature[] f)
    parameters:
    - id: first
      type: com.fasterxml.jackson.databind.SerializationFeature
    - id: f
      type: com.fasterxml.jackson.databind.SerializationFeature[]
    return:
      type: com.fasterxml.jackson.databind.ObjectMapper
- uid: com.fasterxml.jackson.databind.ObjectMapper.enableDefaultTyping()
  id: enableDefaultTyping()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ObjectMapper
  langs:
  - java
  name: enableDefaultTyping()
  nameWithType: ObjectMapper.enableDefaultTyping()
  fullName: com.fasterxml.jackson.databind.ObjectMapper.enableDefaultTyping()
  overload: com.fasterxml.jackson.databind.ObjectMapper.enableDefaultTyping*
  type: Method
  package: com.fasterxml.jackson.databind
  syntax:
    content: public ObjectMapper enableDefaultTyping()
    return:
      type: com.fasterxml.jackson.databind.ObjectMapper
- uid: com.fasterxml.jackson.databind.ObjectMapper.enableDefaultTyping(com.fasterxml.jackson.databind.ObjectMapper.DefaultTyping)
  id: enableDefaultTyping(com.fasterxml.jackson.databind.ObjectMapper.DefaultTyping)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ObjectMapper
  langs:
  - java
  name: enableDefaultTyping(ObjectMapper.DefaultTyping dti)
  nameWithType: ObjectMapper.enableDefaultTyping(ObjectMapper.DefaultTyping dti)
  fullName: com.fasterxml.jackson.databind.ObjectMapper.enableDefaultTyping(ObjectMapper.DefaultTyping dti)
  overload: com.fasterxml.jackson.databind.ObjectMapper.enableDefaultTyping*
  type: Method
  package: com.fasterxml.jackson.databind
  syntax:
    content: public ObjectMapper enableDefaultTyping(ObjectMapper.DefaultTyping dti)
    parameters:
    - id: dti
      type: com.fasterxml.jackson.databind.ObjectMapper.DefaultTyping
    return:
      type: com.fasterxml.jackson.databind.ObjectMapper
- uid: com.fasterxml.jackson.databind.ObjectMapper.enableDefaultTyping(com.fasterxml.jackson.databind.ObjectMapper.DefaultTyping,com.fasterxml.jackson.annotation.JsonTypeInfo.As)
  id: enableDefaultTyping(com.fasterxml.jackson.databind.ObjectMapper.DefaultTyping,com.fasterxml.jackson.annotation.JsonTypeInfo.As)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ObjectMapper
  langs:
  - java
  name: enableDefaultTyping(ObjectMapper.DefaultTyping applicability, JsonTypeInfo.As includeAs)
  nameWithType: ObjectMapper.enableDefaultTyping(ObjectMapper.DefaultTyping applicability, JsonTypeInfo.As includeAs)
  fullName: com.fasterxml.jackson.databind.ObjectMapper.enableDefaultTyping(ObjectMapper.DefaultTyping applicability, JsonTypeInfo.As includeAs)
  overload: com.fasterxml.jackson.databind.ObjectMapper.enableDefaultTyping*
  type: Method
  package: com.fasterxml.jackson.databind
  syntax:
    content: public ObjectMapper enableDefaultTyping(ObjectMapper.DefaultTyping applicability, JsonTypeInfo.As includeAs)
    parameters:
    - id: applicability
      type: com.fasterxml.jackson.databind.ObjectMapper.DefaultTyping
    - id: includeAs
      type: com.fasterxml.jackson.annotation.JsonTypeInfo.As
    return:
      type: com.fasterxml.jackson.databind.ObjectMapper
- uid: com.fasterxml.jackson.databind.ObjectMapper.enableDefaultTypingAsProperty(com.fasterxml.jackson.databind.ObjectMapper.DefaultTyping,java.lang.String)
  id: enableDefaultTypingAsProperty(com.fasterxml.jackson.databind.ObjectMapper.DefaultTyping,java.lang.String)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ObjectMapper
  langs:
  - java
  name: enableDefaultTypingAsProperty(ObjectMapper.DefaultTyping applicability, String propertyName)
  nameWithType: ObjectMapper.enableDefaultTypingAsProperty(ObjectMapper.DefaultTyping applicability, String propertyName)
  fullName: com.fasterxml.jackson.databind.ObjectMapper.enableDefaultTypingAsProperty(ObjectMapper.DefaultTyping applicability, String propertyName)
  overload: com.fasterxml.jackson.databind.ObjectMapper.enableDefaultTypingAsProperty*
  type: Method
  package: com.fasterxml.jackson.databind
  syntax:
    content: public ObjectMapper enableDefaultTypingAsProperty(ObjectMapper.DefaultTyping applicability, String propertyName)
    parameters:
    - id: applicability
      type: com.fasterxml.jackson.databind.ObjectMapper.DefaultTyping
    - id: propertyName
      type: java.lang.String
    return:
      type: com.fasterxml.jackson.databind.ObjectMapper
- uid: com.fasterxml.jackson.databind.ObjectMapper.findAndRegisterModules()
  id: findAndRegisterModules()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ObjectMapper
  langs:
  - java
  name: findAndRegisterModules()
  nameWithType: ObjectMapper.findAndRegisterModules()
  fullName: com.fasterxml.jackson.databind.ObjectMapper.findAndRegisterModules()
  overload: com.fasterxml.jackson.databind.ObjectMapper.findAndRegisterModules*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: >-
    Convenience method that is functionally equivalent to: `mapper.registerModules(mapper.findModules());`


    As with <xref uid="com.fasterxml.jackson.databind.ObjectMapper.findModules()" data-throw-if-not-resolved="false">#findModules()</xref>, no caching is done for modules, so care needs to be taken to either create and share a single mapper instance; or to cache introspected set of modules.
  syntax:
    content: public ObjectMapper findAndRegisterModules()
    return:
      type: com.fasterxml.jackson.databind.ObjectMapper
- uid: com.fasterxml.jackson.databind.ObjectMapper.findMixInClassFor(java.lang.Class<?>)
  id: findMixInClassFor(java.lang.Class<?>)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ObjectMapper
  langs:
  - java
  name: findMixInClassFor(Class<?> cls)
  nameWithType: ObjectMapper.findMixInClassFor(Class<?> cls)
  fullName: com.fasterxml.jackson.databind.ObjectMapper.findMixInClassFor(Class<?> cls)
  overload: com.fasterxml.jackson.databind.ObjectMapper.findMixInClassFor*
  type: Method
  package: com.fasterxml.jackson.databind
  syntax:
    content: public Class<?> findMixInClassFor(Class<?> cls)
    parameters:
    - id: cls
      type: java.lang.Class<?>
    return:
      type: java.lang.Class<?>
- uid: com.fasterxml.jackson.databind.ObjectMapper.findModules()
  id: findModules()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ObjectMapper
  langs:
  - java
  name: findModules()
  nameWithType: ObjectMapper.findModules()
  fullName: com.fasterxml.jackson.databind.ObjectMapper.findModules()
  overload: com.fasterxml.jackson.databind.ObjectMapper.findModules*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: >-
    Method for locating available methods, using JDK <xref uid="" data-throw-if-not-resolved="false">ServiceLoader</xref> facility, along with module-provided SPI.


    Note that method does not do any caching, so calls should be considered potentially expensive.
  syntax:
    content: public static List<Module> findModules()
    return:
      type: java.util.List<com.fasterxml.jackson.databind.Module>
- uid: com.fasterxml.jackson.databind.ObjectMapper.findModules(java.lang.ClassLoader)
  id: findModules(java.lang.ClassLoader)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ObjectMapper
  langs:
  - java
  name: findModules(ClassLoader classLoader)
  nameWithType: ObjectMapper.findModules(ClassLoader classLoader)
  fullName: com.fasterxml.jackson.databind.ObjectMapper.findModules(ClassLoader classLoader)
  overload: com.fasterxml.jackson.databind.ObjectMapper.findModules*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: >-
    Method for locating available methods, using JDK <xref uid="" data-throw-if-not-resolved="false">ServiceLoader</xref> facility, along with module-provided SPI.


    Note that method does not do any caching, so calls should be considered potentially expensive.
  syntax:
    content: public static List<Module> findModules(ClassLoader classLoader)
    parameters:
    - id: classLoader
      type: java.lang.ClassLoader
    return:
      type: java.util.List<com.fasterxml.jackson.databind.Module>
- uid: com.fasterxml.jackson.databind.ObjectMapper.generateJsonSchema(java.lang.Class<?>)
  id: generateJsonSchema(java.lang.Class<?>)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ObjectMapper
  langs:
  - java
  name: generateJsonSchema(Class<?> t)
  nameWithType: ObjectMapper.generateJsonSchema(Class<?> t)
  fullName: com.fasterxml.jackson.databind.ObjectMapper.generateJsonSchema(Class<?> t)
  overload: com.fasterxml.jackson.databind.ObjectMapper.generateJsonSchema*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: >-
    Generate [Json-schema][] instance for specified class.



    [Json-schema]: http://json-schema.org/
  syntax:
    content: public JsonSchema generateJsonSchema(Class<?> t)
    parameters:
    - id: t
      type: java.lang.Class<?>
      description: The class to generate schema for
    return:
      type: com.fasterxml.jackson.databind.jsonschema.JsonSchema
      description: Constructed JSON schema.
  exceptions:
  - type: com.fasterxml.jackson.databind.JsonMappingException
- uid: com.fasterxml.jackson.databind.ObjectMapper.getDateFormat()
  id: getDateFormat()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ObjectMapper
  langs:
  - java
  name: getDateFormat()
  nameWithType: ObjectMapper.getDateFormat()
  fullName: com.fasterxml.jackson.databind.ObjectMapper.getDateFormat()
  overload: com.fasterxml.jackson.databind.ObjectMapper.getDateFormat*
  type: Method
  package: com.fasterxml.jackson.databind
  syntax:
    content: public DateFormat getDateFormat()
    return:
      type: java.text.DateFormat
- uid: com.fasterxml.jackson.databind.ObjectMapper.getDeserializationConfig()
  id: getDeserializationConfig()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ObjectMapper
  langs:
  - java
  name: getDeserializationConfig()
  nameWithType: ObjectMapper.getDeserializationConfig()
  fullName: com.fasterxml.jackson.databind.ObjectMapper.getDeserializationConfig()
  overload: com.fasterxml.jackson.databind.ObjectMapper.getDeserializationConfig*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: >-
    Method that returns the shared default <xref uid="com.fasterxml.jackson.databind.DeserializationConfig" data-throw-if-not-resolved="false">DeserializationConfig</xref> object that defines configuration settings for deserialization.


    Note that since instances are immutable, you can NOT change settings by accessing an instance and calling methods: this will simply create new instance of config object.
  syntax:
    content: public DeserializationConfig getDeserializationConfig()
    return:
      type: com.fasterxml.jackson.databind.DeserializationConfig
- uid: com.fasterxml.jackson.databind.ObjectMapper.getDeserializationContext()
  id: getDeserializationContext()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ObjectMapper
  langs:
  - java
  name: getDeserializationContext()
  nameWithType: ObjectMapper.getDeserializationContext()
  fullName: com.fasterxml.jackson.databind.ObjectMapper.getDeserializationContext()
  overload: com.fasterxml.jackson.databind.ObjectMapper.getDeserializationContext*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: >-
    Method for getting current <xref uid="com.fasterxml.jackson.databind.DeserializationContext" data-throw-if-not-resolved="false">DeserializationContext</xref>.


    Note that since instances are immutable, you can NOT change settings by accessing an instance and calling methods: this will simply create new instance of context object.
  syntax:
    content: public DeserializationContext getDeserializationContext()
    return:
      type: com.fasterxml.jackson.databind.DeserializationContext
- uid: com.fasterxml.jackson.databind.ObjectMapper.getFactory()
  id: getFactory()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ObjectMapper
  langs:
  - java
  name: getFactory()
  nameWithType: ObjectMapper.getFactory()
  fullName: com.fasterxml.jackson.databind.ObjectMapper.getFactory()
  overload: com.fasterxml.jackson.databind.ObjectMapper.getFactory*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: Accessor for finding underlying data format factory (<xref uid="com.fasterxml.jackson.core.JsonFactory" data-throw-if-not-resolved="false">JsonFactory</xref>) codec will use for data binding.
  syntax:
    content: public JsonFactory getFactory()
    return:
      type: com.fasterxml.jackson.core.JsonFactory
- uid: com.fasterxml.jackson.databind.ObjectMapper.getInjectableValues()
  id: getInjectableValues()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ObjectMapper
  langs:
  - java
  name: getInjectableValues()
  nameWithType: ObjectMapper.getInjectableValues()
  fullName: com.fasterxml.jackson.databind.ObjectMapper.getInjectableValues()
  overload: com.fasterxml.jackson.databind.ObjectMapper.getInjectableValues*
  type: Method
  package: com.fasterxml.jackson.databind
  syntax:
    content: public InjectableValues getInjectableValues()
    return:
      type: com.fasterxml.jackson.databind.InjectableValues
- uid: com.fasterxml.jackson.databind.ObjectMapper.getJsonFactory()
  id: getJsonFactory()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ObjectMapper
  langs:
  - java
  name: getJsonFactory()
  nameWithType: ObjectMapper.getJsonFactory()
  fullName: com.fasterxml.jackson.databind.ObjectMapper.getJsonFactory()
  overload: com.fasterxml.jackson.databind.ObjectMapper.getJsonFactory*
  type: Method
  package: com.fasterxml.jackson.databind
  syntax:
    content: public JsonFactory getJsonFactory()
    return:
      type: com.fasterxml.jackson.core.JsonFactory
- uid: com.fasterxml.jackson.databind.ObjectMapper.getNodeFactory()
  id: getNodeFactory()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ObjectMapper
  langs:
  - java
  name: getNodeFactory()
  nameWithType: ObjectMapper.getNodeFactory()
  fullName: com.fasterxml.jackson.databind.ObjectMapper.getNodeFactory()
  overload: com.fasterxml.jackson.databind.ObjectMapper.getNodeFactory*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: >-
    Method that can be used to get hold of <xref uid="com.fasterxml.jackson.databind.node.JsonNodeFactory" data-throw-if-not-resolved="false">JsonNodeFactory</xref> that this mapper will use when directly constructing root <xref uid="com.fasterxml.jackson.databind.JsonNode" data-throw-if-not-resolved="false">JsonNode</xref> instances for Trees.


    Note: this is just a shortcut for calling


    ```java

    getDeserializationConfig().getNodeFactory()

    ```
  syntax:
    content: public JsonNodeFactory getNodeFactory()
    return:
      type: com.fasterxml.jackson.databind.node.JsonNodeFactory
- uid: com.fasterxml.jackson.databind.ObjectMapper.getPolymorphicTypeValidator()
  id: getPolymorphicTypeValidator()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ObjectMapper
  langs:
  - java
  name: getPolymorphicTypeValidator()
  nameWithType: ObjectMapper.getPolymorphicTypeValidator()
  fullName: com.fasterxml.jackson.databind.ObjectMapper.getPolymorphicTypeValidator()
  overload: com.fasterxml.jackson.databind.ObjectMapper.getPolymorphicTypeValidator*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: Accessor for configured <xref uid="com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator" data-throw-if-not-resolved="false">PolymorphicTypeValidator</xref> used for validating polymorphic subtypes used with explicit polymorphic types (annotation-based), but NOT one with "default typing" (see <xref uid="com.fasterxml.jackson.databind.ObjectMapper.activateDefaultTyping(com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator)" data-throw-if-not-resolved="false">#activateDefaultTyping(PolymorphicTypeValidator)</xref> for details).
  syntax:
    content: public PolymorphicTypeValidator getPolymorphicTypeValidator()
    return:
      type: com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator
- uid: com.fasterxml.jackson.databind.ObjectMapper.getPropertyNamingStrategy()
  id: getPropertyNamingStrategy()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ObjectMapper
  langs:
  - java
  name: getPropertyNamingStrategy()
  nameWithType: ObjectMapper.getPropertyNamingStrategy()
  fullName: com.fasterxml.jackson.databind.ObjectMapper.getPropertyNamingStrategy()
  overload: com.fasterxml.jackson.databind.ObjectMapper.getPropertyNamingStrategy*
  type: Method
  package: com.fasterxml.jackson.databind
  syntax:
    content: public PropertyNamingStrategy getPropertyNamingStrategy()
    return:
      type: com.fasterxml.jackson.databind.PropertyNamingStrategy
- uid: com.fasterxml.jackson.databind.ObjectMapper.getRegisteredModuleIds()
  id: getRegisteredModuleIds()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ObjectMapper
  langs:
  - java
  name: getRegisteredModuleIds()
  nameWithType: ObjectMapper.getRegisteredModuleIds()
  fullName: com.fasterxml.jackson.databind.ObjectMapper.getRegisteredModuleIds()
  overload: com.fasterxml.jackson.databind.ObjectMapper.getRegisteredModuleIds*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: The set of <xref uid="com.fasterxml.jackson.databind.Module" data-throw-if-not-resolved="false">Module</xref> typeIds that are registered in this ObjectMapper. By default the typeId for a module is it's full class name (see <xref uid="com.fasterxml.jackson.databind.Module.getTypeId()" data-throw-if-not-resolved="false">Module#getTypeId()</xref>).
  syntax:
    content: public Set<Object> getRegisteredModuleIds()
    return:
      type: java.util.Set<java.lang.Object>
- uid: com.fasterxml.jackson.databind.ObjectMapper.getSerializationConfig()
  id: getSerializationConfig()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ObjectMapper
  langs:
  - java
  name: getSerializationConfig()
  nameWithType: ObjectMapper.getSerializationConfig()
  fullName: com.fasterxml.jackson.databind.ObjectMapper.getSerializationConfig()
  overload: com.fasterxml.jackson.databind.ObjectMapper.getSerializationConfig*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: >-
    Method that returns the shared default <xref uid="com.fasterxml.jackson.databind.SerializationConfig" data-throw-if-not-resolved="false">SerializationConfig</xref> object that defines configuration settings for serialization.


    Note that since instances are immutable, you can NOT change settings by accessing an instance and calling methods: this will simply create new instance of config object.
  syntax:
    content: public SerializationConfig getSerializationConfig()
    return:
      type: com.fasterxml.jackson.databind.SerializationConfig
- uid: com.fasterxml.jackson.databind.ObjectMapper.getSerializerFactory()
  id: getSerializerFactory()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ObjectMapper
  langs:
  - java
  name: getSerializerFactory()
  nameWithType: ObjectMapper.getSerializerFactory()
  fullName: com.fasterxml.jackson.databind.ObjectMapper.getSerializerFactory()
  overload: com.fasterxml.jackson.databind.ObjectMapper.getSerializerFactory*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: >-
    Method for getting current <xref uid="com.fasterxml.jackson.databind.ser.SerializerFactory" data-throw-if-not-resolved="false">SerializerFactory</xref>.


    Note that since instances are immutable, you can NOT change settings by accessing an instance and calling methods: this will simply create new instance of factory object.
  syntax:
    content: public SerializerFactory getSerializerFactory()
    return:
      type: com.fasterxml.jackson.databind.ser.SerializerFactory
- uid: com.fasterxml.jackson.databind.ObjectMapper.getSerializerProvider()
  id: getSerializerProvider()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ObjectMapper
  langs:
  - java
  name: getSerializerProvider()
  nameWithType: ObjectMapper.getSerializerProvider()
  fullName: com.fasterxml.jackson.databind.ObjectMapper.getSerializerProvider()
  overload: com.fasterxml.jackson.databind.ObjectMapper.getSerializerProvider*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: 'Accessor for the "blueprint" (or, factory) instance, from which instances are created by calling <xref uid="com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.createInstance*" data-throw-if-not-resolved="false">DefaultSerializerProvider#createInstance</xref>. Note that returned instance cannot be directly used as it is not properly configured: to get a properly configured instance to call, use <xref uid="com.fasterxml.jackson.databind.ObjectMapper.getSerializerProviderInstance()" data-throw-if-not-resolved="false">#getSerializerProviderInstance()</xref> instead.'
  syntax:
    content: public SerializerProvider getSerializerProvider()
    return:
      type: com.fasterxml.jackson.databind.SerializerProvider
- uid: com.fasterxml.jackson.databind.ObjectMapper.getSerializerProviderInstance()
  id: getSerializerProviderInstance()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ObjectMapper
  langs:
  - java
  name: getSerializerProviderInstance()
  nameWithType: ObjectMapper.getSerializerProviderInstance()
  fullName: com.fasterxml.jackson.databind.ObjectMapper.getSerializerProviderInstance()
  overload: com.fasterxml.jackson.databind.ObjectMapper.getSerializerProviderInstance*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: Accessor for constructing and returning a <xref uid="com.fasterxml.jackson.databind.SerializerProvider" data-throw-if-not-resolved="false">SerializerProvider</xref> instance that may be used for accessing serializers. This is same as calling <xref uid="com.fasterxml.jackson.databind.ObjectMapper.getSerializerProvider*" data-throw-if-not-resolved="false">#getSerializerProvider</xref>, and calling `createInstance` on it.
  syntax:
    content: public SerializerProvider getSerializerProviderInstance()
    return:
      type: com.fasterxml.jackson.databind.SerializerProvider
- uid: com.fasterxml.jackson.databind.ObjectMapper.getSubtypeResolver()
  id: getSubtypeResolver()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ObjectMapper
  langs:
  - java
  name: getSubtypeResolver()
  nameWithType: ObjectMapper.getSubtypeResolver()
  fullName: com.fasterxml.jackson.databind.ObjectMapper.getSubtypeResolver()
  overload: com.fasterxml.jackson.databind.ObjectMapper.getSubtypeResolver*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: Method for accessing subtype resolver in use.
  syntax:
    content: public SubtypeResolver getSubtypeResolver()
    return:
      type: com.fasterxml.jackson.databind.jsontype.SubtypeResolver
- uid: com.fasterxml.jackson.databind.ObjectMapper.getTypeFactory()
  id: getTypeFactory()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ObjectMapper
  langs:
  - java
  name: getTypeFactory()
  nameWithType: ObjectMapper.getTypeFactory()
  fullName: com.fasterxml.jackson.databind.ObjectMapper.getTypeFactory()
  overload: com.fasterxml.jackson.databind.ObjectMapper.getTypeFactory*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: Accessor for getting currently configured <xref uid="com.fasterxml.jackson.databind.type.TypeFactory" data-throw-if-not-resolved="false">TypeFactory</xref> instance.
  syntax:
    content: public TypeFactory getTypeFactory()
    return:
      type: com.fasterxml.jackson.databind.type.TypeFactory
- uid: com.fasterxml.jackson.databind.ObjectMapper.getVisibilityChecker()
  id: getVisibilityChecker()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ObjectMapper
  langs:
  - java
  name: getVisibilityChecker()
  nameWithType: ObjectMapper.getVisibilityChecker()
  fullName: com.fasterxml.jackson.databind.ObjectMapper.getVisibilityChecker()
  overload: com.fasterxml.jackson.databind.ObjectMapper.getVisibilityChecker*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: Method for accessing currently configured visibility checker; object used for determining whether given property element (method, field, constructor) can be auto-detected or not.
  syntax:
    content: public VisibilityChecker<?> getVisibilityChecker()
    return:
      type: com.fasterxml.jackson.databind.introspect.VisibilityChecker<?>
- uid: com.fasterxml.jackson.databind.ObjectMapper.isEnabled(com.fasterxml.jackson.core.JsonFactory.Feature)
  id: isEnabled(com.fasterxml.jackson.core.JsonFactory.Feature)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ObjectMapper
  langs:
  - java
  name: isEnabled(JsonFactory.Feature f)
  nameWithType: ObjectMapper.isEnabled(JsonFactory.Feature f)
  fullName: com.fasterxml.jackson.databind.ObjectMapper.isEnabled(JsonFactory.Feature f)
  overload: com.fasterxml.jackson.databind.ObjectMapper.isEnabled*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: >-
    Convenience method, equivalent to:


    ```java

    getJsonFactory().isEnabled(f);

    ```
  syntax:
    content: public boolean isEnabled(JsonFactory.Feature f)
    parameters:
    - id: f
      type: com.fasterxml.jackson.core.JsonFactory.Feature
    return:
      type: boolean
- uid: com.fasterxml.jackson.databind.ObjectMapper.isEnabled(com.fasterxml.jackson.core.JsonGenerator.Feature)
  id: isEnabled(com.fasterxml.jackson.core.JsonGenerator.Feature)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ObjectMapper
  langs:
  - java
  name: isEnabled(JsonGenerator.Feature f)
  nameWithType: ObjectMapper.isEnabled(JsonGenerator.Feature f)
  fullName: com.fasterxml.jackson.databind.ObjectMapper.isEnabled(JsonGenerator.Feature f)
  overload: com.fasterxml.jackson.databind.ObjectMapper.isEnabled*
  type: Method
  package: com.fasterxml.jackson.databind
  syntax:
    content: public boolean isEnabled(JsonGenerator.Feature f)
    parameters:
    - id: f
      type: com.fasterxml.jackson.core.JsonGenerator.Feature
    return:
      type: boolean
- uid: com.fasterxml.jackson.databind.ObjectMapper.isEnabled(com.fasterxml.jackson.core.JsonParser.Feature)
  id: isEnabled(com.fasterxml.jackson.core.JsonParser.Feature)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ObjectMapper
  langs:
  - java
  name: isEnabled(JsonParser.Feature f)
  nameWithType: ObjectMapper.isEnabled(JsonParser.Feature f)
  fullName: com.fasterxml.jackson.databind.ObjectMapper.isEnabled(JsonParser.Feature f)
  overload: com.fasterxml.jackson.databind.ObjectMapper.isEnabled*
  type: Method
  package: com.fasterxml.jackson.databind
  syntax:
    content: public boolean isEnabled(JsonParser.Feature f)
    parameters:
    - id: f
      type: com.fasterxml.jackson.core.JsonParser.Feature
    return:
      type: boolean
- uid: com.fasterxml.jackson.databind.ObjectMapper.isEnabled(com.fasterxml.jackson.core.StreamReadFeature)
  id: isEnabled(com.fasterxml.jackson.core.StreamReadFeature)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ObjectMapper
  langs:
  - java
  name: isEnabled(StreamReadFeature f)
  nameWithType: ObjectMapper.isEnabled(StreamReadFeature f)
  fullName: com.fasterxml.jackson.databind.ObjectMapper.isEnabled(StreamReadFeature f)
  overload: com.fasterxml.jackson.databind.ObjectMapper.isEnabled*
  type: Method
  package: com.fasterxml.jackson.databind
  syntax:
    content: public boolean isEnabled(StreamReadFeature f)
    parameters:
    - id: f
      type: com.fasterxml.jackson.core.StreamReadFeature
    return:
      type: boolean
- uid: com.fasterxml.jackson.databind.ObjectMapper.isEnabled(com.fasterxml.jackson.core.StreamWriteFeature)
  id: isEnabled(com.fasterxml.jackson.core.StreamWriteFeature)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ObjectMapper
  langs:
  - java
  name: isEnabled(StreamWriteFeature f)
  nameWithType: ObjectMapper.isEnabled(StreamWriteFeature f)
  fullName: com.fasterxml.jackson.databind.ObjectMapper.isEnabled(StreamWriteFeature f)
  overload: com.fasterxml.jackson.databind.ObjectMapper.isEnabled*
  type: Method
  package: com.fasterxml.jackson.databind
  syntax:
    content: public boolean isEnabled(StreamWriteFeature f)
    parameters:
    - id: f
      type: com.fasterxml.jackson.core.StreamWriteFeature
    return:
      type: boolean
- uid: com.fasterxml.jackson.databind.ObjectMapper.isEnabled(com.fasterxml.jackson.databind.DeserializationFeature)
  id: isEnabled(com.fasterxml.jackson.databind.DeserializationFeature)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ObjectMapper
  langs:
  - java
  name: isEnabled(DeserializationFeature f)
  nameWithType: ObjectMapper.isEnabled(DeserializationFeature f)
  fullName: com.fasterxml.jackson.databind.ObjectMapper.isEnabled(DeserializationFeature f)
  overload: com.fasterxml.jackson.databind.ObjectMapper.isEnabled*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: Method for checking whether given deserialization-specific feature is enabled.
  syntax:
    content: public boolean isEnabled(DeserializationFeature f)
    parameters:
    - id: f
      type: com.fasterxml.jackson.databind.DeserializationFeature
    return:
      type: boolean
- uid: com.fasterxml.jackson.databind.ObjectMapper.isEnabled(com.fasterxml.jackson.databind.MapperFeature)
  id: isEnabled(com.fasterxml.jackson.databind.MapperFeature)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ObjectMapper
  langs:
  - java
  name: isEnabled(MapperFeature f)
  nameWithType: ObjectMapper.isEnabled(MapperFeature f)
  fullName: com.fasterxml.jackson.databind.ObjectMapper.isEnabled(MapperFeature f)
  overload: com.fasterxml.jackson.databind.ObjectMapper.isEnabled*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: Method for checking whether given <xref uid="com.fasterxml.jackson.databind.MapperFeature" data-throw-if-not-resolved="false">MapperFeature</xref> is enabled.
  syntax:
    content: public boolean isEnabled(MapperFeature f)
    parameters:
    - id: f
      type: com.fasterxml.jackson.databind.MapperFeature
    return:
      type: boolean
- uid: com.fasterxml.jackson.databind.ObjectMapper.isEnabled(com.fasterxml.jackson.databind.SerializationFeature)
  id: isEnabled(com.fasterxml.jackson.databind.SerializationFeature)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ObjectMapper
  langs:
  - java
  name: isEnabled(SerializationFeature f)
  nameWithType: ObjectMapper.isEnabled(SerializationFeature f)
  fullName: com.fasterxml.jackson.databind.ObjectMapper.isEnabled(SerializationFeature f)
  overload: com.fasterxml.jackson.databind.ObjectMapper.isEnabled*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: Method for checking whether given serialization-specific feature is enabled.
  syntax:
    content: public boolean isEnabled(SerializationFeature f)
    parameters:
    - id: f
      type: com.fasterxml.jackson.databind.SerializationFeature
    return:
      type: boolean
- uid: com.fasterxml.jackson.databind.ObjectMapper.missingNode()
  id: missingNode()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ObjectMapper
  langs:
  - java
  name: missingNode()
  nameWithType: ObjectMapper.missingNode()
  fullName: com.fasterxml.jackson.databind.ObjectMapper.missingNode()
  overload: com.fasterxml.jackson.databind.ObjectMapper.missingNode*
  type: Method
  package: com.fasterxml.jackson.databind
  syntax:
    content: public JsonNode missingNode()
    return:
      type: com.fasterxml.jackson.databind.JsonNode
- uid: com.fasterxml.jackson.databind.ObjectMapper.mixInCount()
  id: mixInCount()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ObjectMapper
  langs:
  - java
  name: mixInCount()
  nameWithType: ObjectMapper.mixInCount()
  fullName: com.fasterxml.jackson.databind.ObjectMapper.mixInCount()
  overload: com.fasterxml.jackson.databind.ObjectMapper.mixInCount*
  type: Method
  package: com.fasterxml.jackson.databind
  syntax:
    content: public int mixInCount()
    return:
      type: int
- uid: com.fasterxml.jackson.databind.ObjectMapper.nullNode()
  id: nullNode()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ObjectMapper
  langs:
  - java
  name: nullNode()
  nameWithType: ObjectMapper.nullNode()
  fullName: com.fasterxml.jackson.databind.ObjectMapper.nullNode()
  overload: com.fasterxml.jackson.databind.ObjectMapper.nullNode*
  type: Method
  package: com.fasterxml.jackson.databind
  syntax:
    content: public JsonNode nullNode()
    return:
      type: com.fasterxml.jackson.databind.JsonNode
- uid: com.fasterxml.jackson.databind.ObjectMapper.readTree(byte[])
  id: readTree(byte[])
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ObjectMapper
  langs:
  - java
  name: readTree(byte[] content)
  nameWithType: ObjectMapper.readTree(byte[] content)
  fullName: com.fasterxml.jackson.databind.ObjectMapper.readTree(byte[] content)
  overload: com.fasterxml.jackson.databind.ObjectMapper.readTree*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: Same as <xref uid="com.fasterxml.jackson.databind.ObjectMapper.readTree(java.io.InputStream)" data-throw-if-not-resolved="false">#readTree(InputStream)</xref> except content read from passed-in byte array.
  syntax:
    content: public JsonNode readTree(byte[] content)
    parameters:
    - id: content
      type: byte[]
    return:
      type: com.fasterxml.jackson.databind.JsonNode
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.databind.ObjectMapper.readTree(byte[],int,int)
  id: readTree(byte[],int,int)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ObjectMapper
  langs:
  - java
  name: readTree(byte[] content, int offset, int len)
  nameWithType: ObjectMapper.readTree(byte[] content, int offset, int len)
  fullName: com.fasterxml.jackson.databind.ObjectMapper.readTree(byte[] content, int offset, int len)
  overload: com.fasterxml.jackson.databind.ObjectMapper.readTree*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: Same as <xref uid="com.fasterxml.jackson.databind.ObjectMapper.readTree(java.io.InputStream)" data-throw-if-not-resolved="false">#readTree(InputStream)</xref> except content read from passed-in byte array.
  syntax:
    content: public JsonNode readTree(byte[] content, int offset, int len)
    parameters:
    - id: content
      type: byte[]
    - id: offset
      type: int
    - id: len
      type: int
    return:
      type: com.fasterxml.jackson.databind.JsonNode
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.databind.ObjectMapper.readTree(java.io.File)
  id: readTree(java.io.File)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ObjectMapper
  langs:
  - java
  name: readTree(File file)
  nameWithType: ObjectMapper.readTree(File file)
  fullName: com.fasterxml.jackson.databind.ObjectMapper.readTree(File file)
  overload: com.fasterxml.jackson.databind.ObjectMapper.readTree*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: Same as <xref uid="com.fasterxml.jackson.databind.ObjectMapper.readTree(java.io.InputStream)" data-throw-if-not-resolved="false">#readTree(InputStream)</xref> except content read from passed-in <xref uid="java.io.File" data-throw-if-not-resolved="false">File</xref>.
  syntax:
    content: public JsonNode readTree(File file)
    parameters:
    - id: file
      type: java.io.File
    return:
      type: com.fasterxml.jackson.databind.JsonNode
  exceptions:
  - type: java.io.IOException
  - type: com.fasterxml.jackson.core.JsonProcessingException
- uid: com.fasterxml.jackson.databind.ObjectMapper.readTree(java.io.InputStream)
  id: readTree(java.io.InputStream)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ObjectMapper
  langs:
  - java
  name: readTree(InputStream in)
  nameWithType: ObjectMapper.readTree(InputStream in)
  fullName: com.fasterxml.jackson.databind.ObjectMapper.readTree(InputStream in)
  overload: com.fasterxml.jackson.databind.ObjectMapper.readTree*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: >-
    Method to deserialize JSON content as tree expressed using set of <xref uid="com.fasterxml.jackson.databind.JsonNode" data-throw-if-not-resolved="false">JsonNode</xref> instances. Returns root of the resulting tree (where root can consist of just a single node if the current event is a value event, not container).


    If a low-level I/O problem (missing input, network error) occurs, a <xref uid="java.io.IOException" data-throw-if-not-resolved="false">IOException</xref> will be thrown. If a parsing problem occurs (invalid JSON), <xref uid="com.fasterxml.jackson.core.JsonParseException" data-throw-if-not-resolved="false">JsonParseException</xref> will be thrown. If no content is found from input (end-of-input), Java `null` will be returned.
  syntax:
    content: public JsonNode readTree(InputStream in)
    parameters:
    - id: in
      type: java.io.InputStream
      description: >-
        Input stream used to read JSON content
           for building the JSON tree.
    return:
      type: com.fasterxml.jackson.databind.JsonNode
      description: >-
        a <xref uid="com.fasterxml.jackson.databind.JsonNode" data-throw-if-not-resolved="false">JsonNode</xref>, if valid JSON content found; null
           if input has no content to bind -- note, however, that if
           JSON <code>null</code> token is found, it will be represented
           as a non-null <xref uid="com.fasterxml.jackson.databind.JsonNode" data-throw-if-not-resolved="false">JsonNode</xref> (one that returns <code>true</code>
           for <xref uid="com.fasterxml.jackson.databind.JsonNode.isNull()" data-throw-if-not-resolved="false">JsonNode#isNull()</xref>
  exceptions:
  - type: java.io.IOException
    description: >-
      if underlying input contains invalid content
          of type <xref uid="JsonParser" data-throw-if-not-resolved="false">JsonParser</xref> supports (JSON for default case)
- uid: com.fasterxml.jackson.databind.ObjectMapper.readTree(java.io.Reader)
  id: readTree(java.io.Reader)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ObjectMapper
  langs:
  - java
  name: readTree(Reader r)
  nameWithType: ObjectMapper.readTree(Reader r)
  fullName: com.fasterxml.jackson.databind.ObjectMapper.readTree(Reader r)
  overload: com.fasterxml.jackson.databind.ObjectMapper.readTree*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: Same as <xref uid="com.fasterxml.jackson.databind.ObjectMapper.readTree(java.io.InputStream)" data-throw-if-not-resolved="false">#readTree(InputStream)</xref> except content accessed through passed-in <xref uid="java.io.Reader" data-throw-if-not-resolved="false">Reader</xref>
  syntax:
    content: public JsonNode readTree(Reader r)
    parameters:
    - id: r
      type: java.io.Reader
    return:
      type: com.fasterxml.jackson.databind.JsonNode
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.databind.ObjectMapper.readTree(java.lang.String)
  id: readTree(java.lang.String)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ObjectMapper
  langs:
  - java
  name: readTree(String content)
  nameWithType: ObjectMapper.readTree(String content)
  fullName: com.fasterxml.jackson.databind.ObjectMapper.readTree(String content)
  overload: com.fasterxml.jackson.databind.ObjectMapper.readTree*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: Same as <xref uid="com.fasterxml.jackson.databind.ObjectMapper.readTree(java.io.InputStream)" data-throw-if-not-resolved="false">#readTree(InputStream)</xref> except content read from passed-in <xref uid="java.lang.String" data-throw-if-not-resolved="false">String</xref>
  syntax:
    content: public JsonNode readTree(String content)
    parameters:
    - id: content
      type: java.lang.String
    return:
      type: com.fasterxml.jackson.databind.JsonNode
  exceptions:
  - type: com.fasterxml.jackson.core.JsonProcessingException
  - type: com.fasterxml.jackson.databind.JsonMappingException
- uid: com.fasterxml.jackson.databind.ObjectMapper.readTree(java.net.URL)
  id: readTree(java.net.URL)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ObjectMapper
  langs:
  - java
  name: readTree(URL source)
  nameWithType: ObjectMapper.readTree(URL source)
  fullName: com.fasterxml.jackson.databind.ObjectMapper.readTree(URL source)
  overload: com.fasterxml.jackson.databind.ObjectMapper.readTree*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: >-
    Same as <xref uid="com.fasterxml.jackson.databind.ObjectMapper.readTree(java.io.InputStream)" data-throw-if-not-resolved="false">#readTree(InputStream)</xref> except content read from passed-in <xref uid="java.net.URL" data-throw-if-not-resolved="false">URL</xref>.


    NOTE: handling of <xref uid="java.net.URL" data-throw-if-not-resolved="false">java.net.URL</xref> is delegated to <xref uid="com.fasterxml.jackson.core.JsonFactory.createParser(java.net.URL)" data-throw-if-not-resolved="false">JsonFactory#createParser(java.net.URL)</xref> and usually simply calls <xref uid="java.net.URL.openStream*" data-throw-if-not-resolved="false">java.net.URL#openStream()</xref>, meaning no special handling is done. If different HTTP connection options are needed you will need to create <xref uid="java.io.InputStream" data-throw-if-not-resolved="false">java.io.InputStream</xref> separately.
  syntax:
    content: public JsonNode readTree(URL source)
    parameters:
    - id: source
      type: java.net.URL
    return:
      type: com.fasterxml.jackson.databind.JsonNode
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.databind.ObjectMapper.reader()
  id: reader()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ObjectMapper
  langs:
  - java
  name: reader()
  nameWithType: ObjectMapper.reader()
  fullName: com.fasterxml.jackson.databind.ObjectMapper.reader()
  overload: com.fasterxml.jackson.databind.ObjectMapper.reader*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: Factory method for constructing <xref uid="com.fasterxml.jackson.databind.ObjectReader" data-throw-if-not-resolved="false">ObjectReader</xref> with default settings. Note that the resulting instance is NOT usable as is, without defining expected value type.
  syntax:
    content: public ObjectReader reader()
    return:
      type: com.fasterxml.jackson.databind.ObjectReader
- uid: com.fasterxml.jackson.databind.ObjectMapper.reader(com.fasterxml.jackson.core.Base64Variant)
  id: reader(com.fasterxml.jackson.core.Base64Variant)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ObjectMapper
  langs:
  - java
  name: reader(Base64Variant defaultBase64)
  nameWithType: ObjectMapper.reader(Base64Variant defaultBase64)
  fullName: com.fasterxml.jackson.databind.ObjectMapper.reader(Base64Variant defaultBase64)
  overload: com.fasterxml.jackson.databind.ObjectMapper.reader*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: Factory method for constructing <xref uid="com.fasterxml.jackson.databind.ObjectReader" data-throw-if-not-resolved="false">ObjectReader</xref> that will use specified Base64 encoding variant for Base64-encoded binary data.
  syntax:
    content: public ObjectReader reader(Base64Variant defaultBase64)
    parameters:
    - id: defaultBase64
      type: com.fasterxml.jackson.core.Base64Variant
    return:
      type: com.fasterxml.jackson.databind.ObjectReader
- uid: com.fasterxml.jackson.databind.ObjectMapper.reader(com.fasterxml.jackson.core.FormatSchema)
  id: reader(com.fasterxml.jackson.core.FormatSchema)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ObjectMapper
  langs:
  - java
  name: reader(FormatSchema schema)
  nameWithType: ObjectMapper.reader(FormatSchema schema)
  fullName: com.fasterxml.jackson.databind.ObjectMapper.reader(FormatSchema schema)
  overload: com.fasterxml.jackson.databind.ObjectMapper.reader*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: Factory method for constructing <xref uid="com.fasterxml.jackson.databind.ObjectReader" data-throw-if-not-resolved="false">ObjectReader</xref> that will pass specific schema object to <xref uid="com.fasterxml.jackson.core.JsonParser" data-throw-if-not-resolved="false">JsonParser</xref> used for reading content.
  syntax:
    content: public ObjectReader reader(FormatSchema schema)
    parameters:
    - id: schema
      type: com.fasterxml.jackson.core.FormatSchema
      description: Schema to pass to parser
    return:
      type: com.fasterxml.jackson.databind.ObjectReader
- uid: com.fasterxml.jackson.databind.ObjectMapper.reader(com.fasterxml.jackson.core.type.TypeReference<?>)
  id: reader(com.fasterxml.jackson.core.type.TypeReference<?>)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ObjectMapper
  langs:
  - java
  name: reader(TypeReference<?> type)
  nameWithType: ObjectMapper.reader(TypeReference<?> type)
  fullName: com.fasterxml.jackson.databind.ObjectMapper.reader(TypeReference<?> type)
  overload: com.fasterxml.jackson.databind.ObjectMapper.reader*
  type: Method
  package: com.fasterxml.jackson.databind
  syntax:
    content: public ObjectReader reader(TypeReference<?> type)
    parameters:
    - id: type
      type: com.fasterxml.jackson.core.type.TypeReference<?>
    return:
      type: com.fasterxml.jackson.databind.ObjectReader
- uid: com.fasterxml.jackson.databind.ObjectMapper.reader(com.fasterxml.jackson.databind.DeserializationFeature)
  id: reader(com.fasterxml.jackson.databind.DeserializationFeature)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ObjectMapper
  langs:
  - java
  name: reader(DeserializationFeature feature)
  nameWithType: ObjectMapper.reader(DeserializationFeature feature)
  fullName: com.fasterxml.jackson.databind.ObjectMapper.reader(DeserializationFeature feature)
  overload: com.fasterxml.jackson.databind.ObjectMapper.reader*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: Factory method for constructing <xref uid="com.fasterxml.jackson.databind.ObjectReader" data-throw-if-not-resolved="false">ObjectReader</xref> with specified feature enabled (compared to settings that this mapper instance has). Note that the resulting instance is NOT usable as is, without defining expected value type.
  syntax:
    content: public ObjectReader reader(DeserializationFeature feature)
    parameters:
    - id: feature
      type: com.fasterxml.jackson.databind.DeserializationFeature
    return:
      type: com.fasterxml.jackson.databind.ObjectReader
- uid: com.fasterxml.jackson.databind.ObjectMapper.reader(com.fasterxml.jackson.databind.DeserializationFeature,com.fasterxml.jackson.databind.DeserializationFeature...)
  id: reader(com.fasterxml.jackson.databind.DeserializationFeature,com.fasterxml.jackson.databind.DeserializationFeature...)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ObjectMapper
  langs:
  - java
  name: reader(DeserializationFeature first, DeserializationFeature[] other)
  nameWithType: ObjectMapper.reader(DeserializationFeature first, DeserializationFeature[] other)
  fullName: com.fasterxml.jackson.databind.ObjectMapper.reader(DeserializationFeature first, DeserializationFeature[] other)
  overload: com.fasterxml.jackson.databind.ObjectMapper.reader*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: Factory method for constructing <xref uid="com.fasterxml.jackson.databind.ObjectReader" data-throw-if-not-resolved="false">ObjectReader</xref> with specified features enabled (compared to settings that this mapper instance has). Note that the resulting instance is NOT usable as is, without defining expected value type.
  syntax:
    content: public ObjectReader reader(DeserializationFeature first, DeserializationFeature[] other)
    parameters:
    - id: first
      type: com.fasterxml.jackson.databind.DeserializationFeature
    - id: other
      type: com.fasterxml.jackson.databind.DeserializationFeature[]
    return:
      type: com.fasterxml.jackson.databind.ObjectReader
- uid: com.fasterxml.jackson.databind.ObjectMapper.reader(com.fasterxml.jackson.databind.InjectableValues)
  id: reader(com.fasterxml.jackson.databind.InjectableValues)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ObjectMapper
  langs:
  - java
  name: reader(InjectableValues injectableValues)
  nameWithType: ObjectMapper.reader(InjectableValues injectableValues)
  fullName: com.fasterxml.jackson.databind.ObjectMapper.reader(InjectableValues injectableValues)
  overload: com.fasterxml.jackson.databind.ObjectMapper.reader*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: Factory method for constructing <xref uid="com.fasterxml.jackson.databind.ObjectReader" data-throw-if-not-resolved="false">ObjectReader</xref> that will use specified injectable values.
  syntax:
    content: public ObjectReader reader(InjectableValues injectableValues)
    parameters:
    - id: injectableValues
      type: com.fasterxml.jackson.databind.InjectableValues
      description: Injectable values to use
    return:
      type: com.fasterxml.jackson.databind.ObjectReader
- uid: com.fasterxml.jackson.databind.ObjectMapper.reader(com.fasterxml.jackson.databind.JavaType)
  id: reader(com.fasterxml.jackson.databind.JavaType)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ObjectMapper
  langs:
  - java
  name: reader(JavaType type)
  nameWithType: ObjectMapper.reader(JavaType type)
  fullName: com.fasterxml.jackson.databind.ObjectMapper.reader(JavaType type)
  overload: com.fasterxml.jackson.databind.ObjectMapper.reader*
  type: Method
  package: com.fasterxml.jackson.databind
  syntax:
    content: public ObjectReader reader(JavaType type)
    parameters:
    - id: type
      type: com.fasterxml.jackson.databind.JavaType
    return:
      type: com.fasterxml.jackson.databind.ObjectReader
- uid: com.fasterxml.jackson.databind.ObjectMapper.reader(com.fasterxml.jackson.databind.cfg.ContextAttributes)
  id: reader(com.fasterxml.jackson.databind.cfg.ContextAttributes)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ObjectMapper
  langs:
  - java
  name: reader(ContextAttributes attrs)
  nameWithType: ObjectMapper.reader(ContextAttributes attrs)
  fullName: com.fasterxml.jackson.databind.ObjectMapper.reader(ContextAttributes attrs)
  overload: com.fasterxml.jackson.databind.ObjectMapper.reader*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: Factory method for constructing <xref uid="com.fasterxml.jackson.databind.ObjectReader" data-throw-if-not-resolved="false">ObjectReader</xref> that will use specified default attributes.
  syntax:
    content: public ObjectReader reader(ContextAttributes attrs)
    parameters:
    - id: attrs
      type: com.fasterxml.jackson.databind.cfg.ContextAttributes
    return:
      type: com.fasterxml.jackson.databind.ObjectReader
- uid: com.fasterxml.jackson.databind.ObjectMapper.reader(com.fasterxml.jackson.databind.node.JsonNodeFactory)
  id: reader(com.fasterxml.jackson.databind.node.JsonNodeFactory)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ObjectMapper
  langs:
  - java
  name: reader(JsonNodeFactory f)
  nameWithType: ObjectMapper.reader(JsonNodeFactory f)
  fullName: com.fasterxml.jackson.databind.ObjectMapper.reader(JsonNodeFactory f)
  overload: com.fasterxml.jackson.databind.ObjectMapper.reader*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: Factory method for constructing <xref uid="com.fasterxml.jackson.databind.ObjectReader" data-throw-if-not-resolved="false">ObjectReader</xref> that will use specified <xref uid="com.fasterxml.jackson.databind.node.JsonNodeFactory" data-throw-if-not-resolved="false">JsonNodeFactory</xref> for constructing JSON trees.
  syntax:
    content: public ObjectReader reader(JsonNodeFactory f)
    parameters:
    - id: f
      type: com.fasterxml.jackson.databind.node.JsonNodeFactory
    return:
      type: com.fasterxml.jackson.databind.ObjectReader
- uid: com.fasterxml.jackson.databind.ObjectMapper.reader(java.lang.Class<?>)
  id: reader(java.lang.Class<?>)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ObjectMapper
  langs:
  - java
  name: reader(Class<?> type)
  nameWithType: ObjectMapper.reader(Class<?> type)
  fullName: com.fasterxml.jackson.databind.ObjectMapper.reader(Class<?> type)
  overload: com.fasterxml.jackson.databind.ObjectMapper.reader*
  type: Method
  package: com.fasterxml.jackson.databind
  syntax:
    content: public ObjectReader reader(Class<?> type)
    parameters:
    - id: type
      type: java.lang.Class<?>
    return:
      type: com.fasterxml.jackson.databind.ObjectReader
- uid: com.fasterxml.jackson.databind.ObjectMapper.readerFor(com.fasterxml.jackson.core.type.TypeReference<?>)
  id: readerFor(com.fasterxml.jackson.core.type.TypeReference<?>)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ObjectMapper
  langs:
  - java
  name: readerFor(TypeReference<?> type)
  nameWithType: ObjectMapper.readerFor(TypeReference<?> type)
  fullName: com.fasterxml.jackson.databind.ObjectMapper.readerFor(TypeReference<?> type)
  overload: com.fasterxml.jackson.databind.ObjectMapper.readerFor*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: Factory method for constructing <xref uid="com.fasterxml.jackson.databind.ObjectReader" data-throw-if-not-resolved="false">ObjectReader</xref> that will read or update instances of specified type
  syntax:
    content: public ObjectReader readerFor(TypeReference<?> type)
    parameters:
    - id: type
      type: com.fasterxml.jackson.core.type.TypeReference<?>
    return:
      type: com.fasterxml.jackson.databind.ObjectReader
- uid: com.fasterxml.jackson.databind.ObjectMapper.readerFor(com.fasterxml.jackson.databind.JavaType)
  id: readerFor(com.fasterxml.jackson.databind.JavaType)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ObjectMapper
  langs:
  - java
  name: readerFor(JavaType type)
  nameWithType: ObjectMapper.readerFor(JavaType type)
  fullName: com.fasterxml.jackson.databind.ObjectMapper.readerFor(JavaType type)
  overload: com.fasterxml.jackson.databind.ObjectMapper.readerFor*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: Factory method for constructing <xref uid="com.fasterxml.jackson.databind.ObjectReader" data-throw-if-not-resolved="false">ObjectReader</xref> that will read or update instances of specified type
  syntax:
    content: public ObjectReader readerFor(JavaType type)
    parameters:
    - id: type
      type: com.fasterxml.jackson.databind.JavaType
    return:
      type: com.fasterxml.jackson.databind.ObjectReader
- uid: com.fasterxml.jackson.databind.ObjectMapper.readerFor(java.lang.Class<?>)
  id: readerFor(java.lang.Class<?>)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ObjectMapper
  langs:
  - java
  name: readerFor(Class<?> type)
  nameWithType: ObjectMapper.readerFor(Class<?> type)
  fullName: com.fasterxml.jackson.databind.ObjectMapper.readerFor(Class<?> type)
  overload: com.fasterxml.jackson.databind.ObjectMapper.readerFor*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: Factory method for constructing <xref uid="com.fasterxml.jackson.databind.ObjectReader" data-throw-if-not-resolved="false">ObjectReader</xref> that will read or update instances of specified type
  syntax:
    content: public ObjectReader readerFor(Class<?> type)
    parameters:
    - id: type
      type: java.lang.Class<?>
    return:
      type: com.fasterxml.jackson.databind.ObjectReader
- uid: com.fasterxml.jackson.databind.ObjectMapper.readerForArrayOf(java.lang.Class<?>)
  id: readerForArrayOf(java.lang.Class<?>)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ObjectMapper
  langs:
  - java
  name: readerForArrayOf(Class<?> type)
  nameWithType: ObjectMapper.readerForArrayOf(Class<?> type)
  fullName: com.fasterxml.jackson.databind.ObjectMapper.readerForArrayOf(Class<?> type)
  overload: com.fasterxml.jackson.databind.ObjectMapper.readerForArrayOf*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: >-
    Factory method for constructing <xref uid="com.fasterxml.jackson.databind.ObjectReader" data-throw-if-not-resolved="false">ObjectReader</xref> that will read values of a type `List`. Functionally same as:


    ```java

    readerFor(type[].class);

    ```
  syntax:
    content: public ObjectReader readerForArrayOf(Class<?> type)
    parameters:
    - id: type
      type: java.lang.Class<?>
    return:
      type: com.fasterxml.jackson.databind.ObjectReader
- uid: com.fasterxml.jackson.databind.ObjectMapper.readerForListOf(java.lang.Class<?>)
  id: readerForListOf(java.lang.Class<?>)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ObjectMapper
  langs:
  - java
  name: readerForListOf(Class<?> type)
  nameWithType: ObjectMapper.readerForListOf(Class<?> type)
  fullName: com.fasterxml.jackson.databind.ObjectMapper.readerForListOf(Class<?> type)
  overload: com.fasterxml.jackson.databind.ObjectMapper.readerForListOf*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: >-
    Factory method for constructing <xref uid="com.fasterxml.jackson.databind.ObjectReader" data-throw-if-not-resolved="false">ObjectReader</xref> that will read or update instances of a type `List`. Functionally same as:


    ```java

    readerFor(new TypeReference<List<type>>() { });

    ```
  syntax:
    content: public ObjectReader readerForListOf(Class<?> type)
    parameters:
    - id: type
      type: java.lang.Class<?>
    return:
      type: com.fasterxml.jackson.databind.ObjectReader
- uid: com.fasterxml.jackson.databind.ObjectMapper.readerForMapOf(java.lang.Class<?>)
  id: readerForMapOf(java.lang.Class<?>)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ObjectMapper
  langs:
  - java
  name: readerForMapOf(Class<?> type)
  nameWithType: ObjectMapper.readerForMapOf(Class<?> type)
  fullName: com.fasterxml.jackson.databind.ObjectMapper.readerForMapOf(Class<?> type)
  overload: com.fasterxml.jackson.databind.ObjectMapper.readerForMapOf*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: >-
    Factory method for constructing <xref uid="com.fasterxml.jackson.databind.ObjectReader" data-throw-if-not-resolved="false">ObjectReader</xref> that will read or update instances of a type `Map` Functionally same as:


    ```java

    readerFor(new TypeReference<Map<String, type>>() { });

    ```
  syntax:
    content: public ObjectReader readerForMapOf(Class<?> type)
    parameters:
    - id: type
      type: java.lang.Class<?>
    return:
      type: com.fasterxml.jackson.databind.ObjectReader
- uid: com.fasterxml.jackson.databind.ObjectMapper.readerForUpdating(java.lang.Object)
  id: readerForUpdating(java.lang.Object)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ObjectMapper
  langs:
  - java
  name: readerForUpdating(Object valueToUpdate)
  nameWithType: ObjectMapper.readerForUpdating(Object valueToUpdate)
  fullName: com.fasterxml.jackson.databind.ObjectMapper.readerForUpdating(Object valueToUpdate)
  overload: com.fasterxml.jackson.databind.ObjectMapper.readerForUpdating*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: Factory method for constructing <xref uid="com.fasterxml.jackson.databind.ObjectReader" data-throw-if-not-resolved="false">ObjectReader</xref> that will update given Object (usually Bean, but can be a Collection or Map as well, but NOT an array) with JSON data. Deserialization occurs normally except that the root-level value in JSON is not used for instantiating a new object; instead give updateable object is used as root. Runtime type of value object is used for locating deserializer, unless overridden by other factory methods of <xref uid="com.fasterxml.jackson.databind.ObjectReader" data-throw-if-not-resolved="false">ObjectReader</xref>
  syntax:
    content: public ObjectReader readerForUpdating(Object valueToUpdate)
    parameters:
    - id: valueToUpdate
      type: java.lang.Object
    return:
      type: com.fasterxml.jackson.databind.ObjectReader
- uid: com.fasterxml.jackson.databind.ObjectMapper.readerWithView(java.lang.Class<?>)
  id: readerWithView(java.lang.Class<?>)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ObjectMapper
  langs:
  - java
  name: readerWithView(Class<?> view)
  nameWithType: ObjectMapper.readerWithView(Class<?> view)
  fullName: com.fasterxml.jackson.databind.ObjectMapper.readerWithView(Class<?> view)
  overload: com.fasterxml.jackson.databind.ObjectMapper.readerWithView*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: Factory method for constructing <xref uid="com.fasterxml.jackson.databind.ObjectReader" data-throw-if-not-resolved="false">ObjectReader</xref> that will deserialize objects using specified JSON View (filter).
  syntax:
    content: public ObjectReader readerWithView(Class<?> view)
    parameters:
    - id: view
      type: java.lang.Class<?>
    return:
      type: com.fasterxml.jackson.databind.ObjectReader
- uid: com.fasterxml.jackson.databind.ObjectMapper.registerModule(com.fasterxml.jackson.databind.Module)
  id: registerModule(com.fasterxml.jackson.databind.Module)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ObjectMapper
  langs:
  - java
  name: registerModule(Module module)
  nameWithType: ObjectMapper.registerModule(Module module)
  fullName: com.fasterxml.jackson.databind.ObjectMapper.registerModule(Module module)
  overload: com.fasterxml.jackson.databind.ObjectMapper.registerModule*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: Method for registering a module that can extend functionality provided by this mapper; for example, by adding providers for custom serializers and deserializers.
  syntax:
    content: public ObjectMapper registerModule(Module module)
    parameters:
    - id: module
      type: com.fasterxml.jackson.databind.Module
      description: Module to register
    return:
      type: com.fasterxml.jackson.databind.ObjectMapper
- uid: com.fasterxml.jackson.databind.ObjectMapper.registerModules(com.fasterxml.jackson.databind.Module...)
  id: registerModules(com.fasterxml.jackson.databind.Module...)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ObjectMapper
  langs:
  - java
  name: registerModules(Module[] modules)
  nameWithType: ObjectMapper.registerModules(Module[] modules)
  fullName: com.fasterxml.jackson.databind.ObjectMapper.registerModules(Module[] modules)
  overload: com.fasterxml.jackson.databind.ObjectMapper.registerModules*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: >-
    Convenience method for registering specified modules in order; functionally equivalent to:


    ```java

    for (Module module : modules) {
          registerModule(module);
       }
    ```
  syntax:
    content: public ObjectMapper registerModules(Module[] modules)
    parameters:
    - id: modules
      type: com.fasterxml.jackson.databind.Module[]
    return:
      type: com.fasterxml.jackson.databind.ObjectMapper
- uid: com.fasterxml.jackson.databind.ObjectMapper.registerModules(java.lang.Iterable<? extends com.fasterxml.jackson.databind.Module>)
  id: registerModules(java.lang.Iterable<? extends com.fasterxml.jackson.databind.Module>)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ObjectMapper
  langs:
  - java
  name: registerModules(Iterable<? extends Module> modules)
  nameWithType: ObjectMapper.registerModules(Iterable<? extends Module> modules)
  fullName: com.fasterxml.jackson.databind.ObjectMapper.registerModules(Iterable<? extends Module> modules)
  overload: com.fasterxml.jackson.databind.ObjectMapper.registerModules*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: >-
    Convenience method for registering specified modules in order; functionally equivalent to:


    ```java

    for (Module module : modules) {
          registerModule(module);
       }
    ```
  syntax:
    content: public ObjectMapper registerModules(Iterable<? extends Module> modules)
    parameters:
    - id: modules
      type: java.lang.Iterable<? extends com.fasterxml.jackson.databind.Module>
    return:
      type: com.fasterxml.jackson.databind.ObjectMapper
- uid: com.fasterxml.jackson.databind.ObjectMapper.registerSubtypes(com.fasterxml.jackson.databind.jsontype.NamedType...)
  id: registerSubtypes(com.fasterxml.jackson.databind.jsontype.NamedType...)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ObjectMapper
  langs:
  - java
  name: registerSubtypes(NamedType[] types)
  nameWithType: ObjectMapper.registerSubtypes(NamedType[] types)
  fullName: com.fasterxml.jackson.databind.ObjectMapper.registerSubtypes(NamedType[] types)
  overload: com.fasterxml.jackson.databind.ObjectMapper.registerSubtypes*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: Method for registering specified class as a subtype, so that typename-based resolution can link supertypes to subtypes (as an alternative to using annotations). Name may be provided as part of argument, but if not will be based on annotations or use default name (unqualified class name).
  syntax:
    content: public void registerSubtypes(NamedType[] types)
    parameters:
    - id: types
      type: com.fasterxml.jackson.databind.jsontype.NamedType[]
- uid: com.fasterxml.jackson.databind.ObjectMapper.registerSubtypes(java.lang.Class<?>...)
  id: registerSubtypes(java.lang.Class<?>...)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ObjectMapper
  langs:
  - java
  name: registerSubtypes(Class<?>[] classes)
  nameWithType: ObjectMapper.registerSubtypes(Class<?>[] classes)
  fullName: com.fasterxml.jackson.databind.ObjectMapper.registerSubtypes(Class<?>[] classes)
  overload: com.fasterxml.jackson.databind.ObjectMapper.registerSubtypes*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: Method for registering specified class as a subtype, so that typename-based resolution can link supertypes to subtypes (as an alternative to using annotations). Type for given class is determined from appropriate annotation; or if missing, default name (unqualified class name)
  syntax:
    content: public void registerSubtypes(Class<?>[] classes)
    parameters:
    - id: classes
      type: java.lang.Class<?>[]
- uid: com.fasterxml.jackson.databind.ObjectMapper.registerSubtypes(java.util.Collection<java.lang.Class<?>>)
  id: registerSubtypes(java.util.Collection<java.lang.Class<?>>)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ObjectMapper
  langs:
  - java
  name: registerSubtypes(Collection<Class<?>> subtypes)
  nameWithType: ObjectMapper.registerSubtypes(Collection<Class<?>> subtypes)
  fullName: com.fasterxml.jackson.databind.ObjectMapper.registerSubtypes(Collection<Class<?>> subtypes)
  overload: com.fasterxml.jackson.databind.ObjectMapper.registerSubtypes*
  type: Method
  package: com.fasterxml.jackson.databind
  syntax:
    content: public void registerSubtypes(Collection<Class<?>> subtypes)
    parameters:
    - id: subtypes
      type: java.util.Collection<java.lang.Class<?>>
- uid: com.fasterxml.jackson.databind.ObjectMapper.setAnnotationIntrospector(com.fasterxml.jackson.databind.AnnotationIntrospector)
  id: setAnnotationIntrospector(com.fasterxml.jackson.databind.AnnotationIntrospector)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ObjectMapper
  langs:
  - java
  name: setAnnotationIntrospector(AnnotationIntrospector ai)
  nameWithType: ObjectMapper.setAnnotationIntrospector(AnnotationIntrospector ai)
  fullName: com.fasterxml.jackson.databind.ObjectMapper.setAnnotationIntrospector(AnnotationIntrospector ai)
  overload: com.fasterxml.jackson.databind.ObjectMapper.setAnnotationIntrospector*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: Method for setting <xref uid="com.fasterxml.jackson.databind.AnnotationIntrospector" data-throw-if-not-resolved="false">AnnotationIntrospector</xref> used by this mapper instance for both serialization and deserialization. Note that doing this will replace the current introspector, which may lead to unavailability of core Jackson annotations. If you want to combine handling of multiple introspectors, have a look at <xref uid="com.fasterxml.jackson.databind.introspect.AnnotationIntrospectorPair" data-throw-if-not-resolved="false">com.fasterxml.jackson.databind.introspect.AnnotationIntrospectorPair</xref>.
  syntax:
    content: public ObjectMapper setAnnotationIntrospector(AnnotationIntrospector ai)
    parameters:
    - id: ai
      type: com.fasterxml.jackson.databind.AnnotationIntrospector
    return:
      type: com.fasterxml.jackson.databind.ObjectMapper
- uid: com.fasterxml.jackson.databind.ObjectMapper.setAnnotationIntrospectors(com.fasterxml.jackson.databind.AnnotationIntrospector,com.fasterxml.jackson.databind.AnnotationIntrospector)
  id: setAnnotationIntrospectors(com.fasterxml.jackson.databind.AnnotationIntrospector,com.fasterxml.jackson.databind.AnnotationIntrospector)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ObjectMapper
  langs:
  - java
  name: setAnnotationIntrospectors(AnnotationIntrospector serializerAI, AnnotationIntrospector deserializerAI)
  nameWithType: ObjectMapper.setAnnotationIntrospectors(AnnotationIntrospector serializerAI, AnnotationIntrospector deserializerAI)
  fullName: com.fasterxml.jackson.databind.ObjectMapper.setAnnotationIntrospectors(AnnotationIntrospector serializerAI, AnnotationIntrospector deserializerAI)
  overload: com.fasterxml.jackson.databind.ObjectMapper.setAnnotationIntrospectors*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: Method for changing <xref uid="com.fasterxml.jackson.databind.AnnotationIntrospector" data-throw-if-not-resolved="false">AnnotationIntrospector</xref> instances used by this mapper instance for serialization and deserialization, specifying them separately so that different introspection can be used for different aspects
  syntax:
    content: public ObjectMapper setAnnotationIntrospectors(AnnotationIntrospector serializerAI, AnnotationIntrospector deserializerAI)
    parameters:
    - id: serializerAI
      type: com.fasterxml.jackson.databind.AnnotationIntrospector
      description: >-
        <xref uid="com.fasterxml.jackson.databind.AnnotationIntrospector" data-throw-if-not-resolved="false">AnnotationIntrospector</xref> to use for configuring
            serialization
    - id: deserializerAI
      type: com.fasterxml.jackson.databind.AnnotationIntrospector
      description: >-
        <xref uid="com.fasterxml.jackson.databind.AnnotationIntrospector" data-throw-if-not-resolved="false">AnnotationIntrospector</xref> to use for configuring
            deserialization
    return:
      type: com.fasterxml.jackson.databind.ObjectMapper
- uid: com.fasterxml.jackson.databind.ObjectMapper.setBase64Variant(com.fasterxml.jackson.core.Base64Variant)
  id: setBase64Variant(com.fasterxml.jackson.core.Base64Variant)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ObjectMapper
  langs:
  - java
  name: setBase64Variant(Base64Variant v)
  nameWithType: ObjectMapper.setBase64Variant(Base64Variant v)
  fullName: com.fasterxml.jackson.databind.ObjectMapper.setBase64Variant(Base64Variant v)
  overload: com.fasterxml.jackson.databind.ObjectMapper.setBase64Variant*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: Method that will configure default <xref uid="com.fasterxml.jackson.core.Base64Variant" data-throw-if-not-resolved="false">Base64Variant</xref> that `byte[]` serializers and deserializers will use.
  syntax:
    content: public ObjectMapper setBase64Variant(Base64Variant v)
    parameters:
    - id: v
      type: com.fasterxml.jackson.core.Base64Variant
      description: Base64 variant to use
    return:
      type: com.fasterxml.jackson.databind.ObjectMapper
      description: This mapper, for convenience to allow chaining
- uid: com.fasterxml.jackson.databind.ObjectMapper.setConfig(com.fasterxml.jackson.databind.DeserializationConfig)
  id: setConfig(com.fasterxml.jackson.databind.DeserializationConfig)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ObjectMapper
  langs:
  - java
  name: setConfig(DeserializationConfig config)
  nameWithType: ObjectMapper.setConfig(DeserializationConfig config)
  fullName: com.fasterxml.jackson.databind.ObjectMapper.setConfig(DeserializationConfig config)
  overload: com.fasterxml.jackson.databind.ObjectMapper.setConfig*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: >-
    Method that allows overriding of the underlying <xref uid="com.fasterxml.jackson.databind.DeserializationConfig" data-throw-if-not-resolved="false">DeserializationConfig</xref> object. It is added as a fallback method that may be used if no other configuration modifier method works: it should not be used if there are alternatives, and its use is generally discouraged.


    **NOTE**: only use this method if you know what you are doing -- it allows by-passing some of checks applied to other configuration methods. Also keep in mind that as with all configuration of <xref uid="com.fasterxml.jackson.databind.ObjectMapper" data-throw-if-not-resolved="false">ObjectMapper</xref>, this is only thread-safe if done before calling any deserialization methods.
  syntax:
    content: public ObjectMapper setConfig(DeserializationConfig config)
    parameters:
    - id: config
      type: com.fasterxml.jackson.databind.DeserializationConfig
    return:
      type: com.fasterxml.jackson.databind.ObjectMapper
- uid: com.fasterxml.jackson.databind.ObjectMapper.setConfig(com.fasterxml.jackson.databind.SerializationConfig)
  id: setConfig(com.fasterxml.jackson.databind.SerializationConfig)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ObjectMapper
  langs:
  - java
  name: setConfig(SerializationConfig config)
  nameWithType: ObjectMapper.setConfig(SerializationConfig config)
  fullName: com.fasterxml.jackson.databind.ObjectMapper.setConfig(SerializationConfig config)
  overload: com.fasterxml.jackson.databind.ObjectMapper.setConfig*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: >-
    Method that allows overriding of the underlying <xref uid="com.fasterxml.jackson.databind.SerializationConfig" data-throw-if-not-resolved="false">SerializationConfig</xref> object, which contains serialization-specific configuration settings. It is added as a fallback method that may be used if no other configuration modifier method works: it should not be used if there are alternatives, and its use is generally discouraged.


    **NOTE**: only use this method if you know what you are doing -- it allows by-passing some of checks applied to other configuration methods. Also keep in mind that as with all configuration of <xref uid="com.fasterxml.jackson.databind.ObjectMapper" data-throw-if-not-resolved="false">ObjectMapper</xref>, this is only thread-safe if done before calling any serialization methods.
  syntax:
    content: public ObjectMapper setConfig(SerializationConfig config)
    parameters:
    - id: config
      type: com.fasterxml.jackson.databind.SerializationConfig
    return:
      type: com.fasterxml.jackson.databind.ObjectMapper
- uid: com.fasterxml.jackson.databind.ObjectMapper.setDateFormat(java.text.DateFormat)
  id: setDateFormat(java.text.DateFormat)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ObjectMapper
  langs:
  - java
  name: setDateFormat(DateFormat dateFormat)
  nameWithType: ObjectMapper.setDateFormat(DateFormat dateFormat)
  fullName: com.fasterxml.jackson.databind.ObjectMapper.setDateFormat(DateFormat dateFormat)
  overload: com.fasterxml.jackson.databind.ObjectMapper.setDateFormat*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: Method for configuring the default <xref uid="java.text.DateFormat" data-throw-if-not-resolved="false">DateFormat</xref> to use when serializing time values as Strings, and deserializing from JSON Strings. This is preferably to directly modifying <xref uid="com.fasterxml.jackson.databind.SerializationConfig" data-throw-if-not-resolved="false">SerializationConfig</xref> and <xref uid="com.fasterxml.jackson.databind.DeserializationConfig" data-throw-if-not-resolved="false">DeserializationConfig</xref> instances. If you need per-request configuration, use <xref uid="com.fasterxml.jackson.databind.ObjectMapper.writer(java.text.DateFormat)" data-throw-if-not-resolved="false">#writer(DateFormat)</xref> to create properly configured <xref uid="com.fasterxml.jackson.databind.ObjectWriter" data-throw-if-not-resolved="false">ObjectWriter</xref> and use that; this because <xref uid="com.fasterxml.jackson.databind.ObjectWriter" data-throw-if-not-resolved="false">ObjectWriter</xref>s are thread-safe whereas ObjectMapper itself is only thread-safe when configuring methods (such as this one) are NOT called.
  syntax:
    content: public ObjectMapper setDateFormat(DateFormat dateFormat)
    parameters:
    - id: dateFormat
      type: java.text.DateFormat
    return:
      type: com.fasterxml.jackson.databind.ObjectMapper
- uid: com.fasterxml.jackson.databind.ObjectMapper.setDefaultLeniency(java.lang.Boolean)
  id: setDefaultLeniency(java.lang.Boolean)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ObjectMapper
  langs:
  - java
  name: setDefaultLeniency(Boolean b)
  nameWithType: ObjectMapper.setDefaultLeniency(Boolean b)
  fullName: com.fasterxml.jackson.databind.ObjectMapper.setDefaultLeniency(Boolean b)
  overload: com.fasterxml.jackson.databind.ObjectMapper.setDefaultLeniency*
  type: Method
  package: com.fasterxml.jackson.databind
  syntax:
    content: public ObjectMapper setDefaultLeniency(Boolean b)
    parameters:
    - id: b
      type: java.lang.Boolean
    return:
      type: com.fasterxml.jackson.databind.ObjectMapper
- uid: com.fasterxml.jackson.databind.ObjectMapper.setDefaultMergeable(java.lang.Boolean)
  id: setDefaultMergeable(java.lang.Boolean)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ObjectMapper
  langs:
  - java
  name: setDefaultMergeable(Boolean b)
  nameWithType: ObjectMapper.setDefaultMergeable(Boolean b)
  fullName: com.fasterxml.jackson.databind.ObjectMapper.setDefaultMergeable(Boolean b)
  overload: com.fasterxml.jackson.databind.ObjectMapper.setDefaultMergeable*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: Method for setting default Setter configuration, regarding things like merging, null-handling; used for properties for which there are no per-type or per-property overrides (via annotations or config overrides).
  syntax:
    content: public ObjectMapper setDefaultMergeable(Boolean b)
    parameters:
    - id: b
      type: java.lang.Boolean
    return:
      type: com.fasterxml.jackson.databind.ObjectMapper
- uid: com.fasterxml.jackson.databind.ObjectMapper.setDefaultPrettyPrinter(com.fasterxml.jackson.core.PrettyPrinter)
  id: setDefaultPrettyPrinter(com.fasterxml.jackson.core.PrettyPrinter)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ObjectMapper
  langs:
  - java
  name: setDefaultPrettyPrinter(PrettyPrinter pp)
  nameWithType: ObjectMapper.setDefaultPrettyPrinter(PrettyPrinter pp)
  fullName: com.fasterxml.jackson.databind.ObjectMapper.setDefaultPrettyPrinter(PrettyPrinter pp)
  overload: com.fasterxml.jackson.databind.ObjectMapper.setDefaultPrettyPrinter*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: Method for specifying <xref uid="com.fasterxml.jackson.core.PrettyPrinter" data-throw-if-not-resolved="false">PrettyPrinter</xref> to use when "default pretty-printing" is enabled (by enabling <xref uid="com.fasterxml.jackson.databind.SerializationFeature.INDENT_OUTPUT" data-throw-if-not-resolved="false">SerializationFeature#INDENT_OUTPUT</xref>)
  syntax:
    content: public ObjectMapper setDefaultPrettyPrinter(PrettyPrinter pp)
    parameters:
    - id: pp
      type: com.fasterxml.jackson.core.PrettyPrinter
      description: Pretty printer to use by default.
    return:
      type: com.fasterxml.jackson.databind.ObjectMapper
      description: This mapper, useful for call-chaining
- uid: com.fasterxml.jackson.databind.ObjectMapper.setDefaultPropertyInclusion(com.fasterxml.jackson.annotation.JsonInclude.Include)
  id: setDefaultPropertyInclusion(com.fasterxml.jackson.annotation.JsonInclude.Include)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ObjectMapper
  langs:
  - java
  name: setDefaultPropertyInclusion(JsonInclude.Include incl)
  nameWithType: ObjectMapper.setDefaultPropertyInclusion(JsonInclude.Include incl)
  fullName: com.fasterxml.jackson.databind.ObjectMapper.setDefaultPropertyInclusion(JsonInclude.Include incl)
  overload: com.fasterxml.jackson.databind.ObjectMapper.setDefaultPropertyInclusion*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: >-
    Short-cut for:


    ```java

    setDefaultPropertyInclusion(JsonInclude.Value.construct(incl, incl));

    ```
  syntax:
    content: public ObjectMapper setDefaultPropertyInclusion(JsonInclude.Include incl)
    parameters:
    - id: incl
      type: com.fasterxml.jackson.annotation.JsonInclude.Include
    return:
      type: com.fasterxml.jackson.databind.ObjectMapper
- uid: com.fasterxml.jackson.databind.ObjectMapper.setDefaultPropertyInclusion(com.fasterxml.jackson.annotation.JsonInclude.Value)
  id: setDefaultPropertyInclusion(com.fasterxml.jackson.annotation.JsonInclude.Value)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ObjectMapper
  langs:
  - java
  name: setDefaultPropertyInclusion(JsonInclude.Value incl)
  nameWithType: ObjectMapper.setDefaultPropertyInclusion(JsonInclude.Value incl)
  fullName: com.fasterxml.jackson.databind.ObjectMapper.setDefaultPropertyInclusion(JsonInclude.Value incl)
  overload: com.fasterxml.jackson.databind.ObjectMapper.setDefaultPropertyInclusion*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: Method for setting default POJO property inclusion strategy for serialization, applied for all properties for which there are no per-type or per-property overrides (via annotations or config overrides).
  syntax:
    content: public ObjectMapper setDefaultPropertyInclusion(JsonInclude.Value incl)
    parameters:
    - id: incl
      type: com.fasterxml.jackson.annotation.JsonInclude.Value
    return:
      type: com.fasterxml.jackson.databind.ObjectMapper
- uid: com.fasterxml.jackson.databind.ObjectMapper.setDefaultSetterInfo(com.fasterxml.jackson.annotation.JsonSetter.Value)
  id: setDefaultSetterInfo(com.fasterxml.jackson.annotation.JsonSetter.Value)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ObjectMapper
  langs:
  - java
  name: setDefaultSetterInfo(JsonSetter.Value v)
  nameWithType: ObjectMapper.setDefaultSetterInfo(JsonSetter.Value v)
  fullName: com.fasterxml.jackson.databind.ObjectMapper.setDefaultSetterInfo(JsonSetter.Value v)
  overload: com.fasterxml.jackson.databind.ObjectMapper.setDefaultSetterInfo*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: Method for setting default Setter configuration, regarding things like merging, null-handling; used for properties for which there are no per-type or per-property overrides (via annotations or config overrides).
  syntax:
    content: public ObjectMapper setDefaultSetterInfo(JsonSetter.Value v)
    parameters:
    - id: v
      type: com.fasterxml.jackson.annotation.JsonSetter.Value
    return:
      type: com.fasterxml.jackson.databind.ObjectMapper
- uid: com.fasterxml.jackson.databind.ObjectMapper.setDefaultTyping(com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder<?>)
  id: setDefaultTyping(com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder<?>)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ObjectMapper
  langs:
  - java
  name: setDefaultTyping(TypeResolverBuilder<?> typer)
  nameWithType: ObjectMapper.setDefaultTyping(TypeResolverBuilder<?> typer)
  fullName: com.fasterxml.jackson.databind.ObjectMapper.setDefaultTyping(TypeResolverBuilder<?> typer)
  overload: com.fasterxml.jackson.databind.ObjectMapper.setDefaultTyping*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: >-
    Method for enabling automatic inclusion of type information ("Default Typing"), using specified handler object for determining which types this affects, as well as details of how information is embedded.


    NOTE: use of Default Typing can be a potential security risk if incoming content comes from untrusted sources, so care should be taken to use a <xref uid="com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder" data-throw-if-not-resolved="false">TypeResolverBuilder</xref> that can limit allowed classes to deserialize. Note in particular that <xref uid="com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder" data-throw-if-not-resolved="false">com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder</xref> DOES NOT limit applicability but creates type (de)serializers for all types.
  syntax:
    content: public ObjectMapper setDefaultTyping(TypeResolverBuilder<?> typer)
    parameters:
    - id: typer
      type: com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder<?>
      description: Type information inclusion handler
    return:
      type: com.fasterxml.jackson.databind.ObjectMapper
- uid: com.fasterxml.jackson.databind.ObjectMapper.setDefaultVisibility(com.fasterxml.jackson.annotation.JsonAutoDetect.Value)
  id: setDefaultVisibility(com.fasterxml.jackson.annotation.JsonAutoDetect.Value)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ObjectMapper
  langs:
  - java
  name: setDefaultVisibility(JsonAutoDetect.Value vis)
  nameWithType: ObjectMapper.setDefaultVisibility(JsonAutoDetect.Value vis)
  fullName: com.fasterxml.jackson.databind.ObjectMapper.setDefaultVisibility(JsonAutoDetect.Value vis)
  overload: com.fasterxml.jackson.databind.ObjectMapper.setDefaultVisibility*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: Method for setting auto-detection visibility definition defaults, which are in effect unless overridden by annotations (like `JsonAutoDetect`) or per-type visibility overrides.
  syntax:
    content: public ObjectMapper setDefaultVisibility(JsonAutoDetect.Value vis)
    parameters:
    - id: vis
      type: com.fasterxml.jackson.annotation.JsonAutoDetect.Value
    return:
      type: com.fasterxml.jackson.databind.ObjectMapper
- uid: com.fasterxml.jackson.databind.ObjectMapper.setFilterProvider(com.fasterxml.jackson.databind.ser.FilterProvider)
  id: setFilterProvider(com.fasterxml.jackson.databind.ser.FilterProvider)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ObjectMapper
  langs:
  - java
  name: setFilterProvider(FilterProvider filterProvider)
  nameWithType: ObjectMapper.setFilterProvider(FilterProvider filterProvider)
  fullName: com.fasterxml.jackson.databind.ObjectMapper.setFilterProvider(FilterProvider filterProvider)
  overload: com.fasterxml.jackson.databind.ObjectMapper.setFilterProvider*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: >-
    Method for configuring this mapper to use specified <xref uid="com.fasterxml.jackson.databind.ser.FilterProvider" data-throw-if-not-resolved="false">FilterProvider</xref> for mapping Filter Ids to actual filter instances.


    Note that usually it is better to use method <xref uid="com.fasterxml.jackson.databind.ObjectMapper.writer(com.fasterxml.jackson.databind.ser.FilterProvider)" data-throw-if-not-resolved="false">#writer(FilterProvider)</xref>; however, sometimes this method is more convenient. For example, some frameworks only allow configuring of ObjectMapper instances and not <xref uid="com.fasterxml.jackson.databind.ObjectWriter" data-throw-if-not-resolved="false">ObjectWriter</xref>s.
  syntax:
    content: public ObjectMapper setFilterProvider(FilterProvider filterProvider)
    parameters:
    - id: filterProvider
      type: com.fasterxml.jackson.databind.ser.FilterProvider
    return:
      type: com.fasterxml.jackson.databind.ObjectMapper
- uid: com.fasterxml.jackson.databind.ObjectMapper.setFilters(com.fasterxml.jackson.databind.ser.FilterProvider)
  id: setFilters(com.fasterxml.jackson.databind.ser.FilterProvider)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ObjectMapper
  langs:
  - java
  name: setFilters(FilterProvider filterProvider)
  nameWithType: ObjectMapper.setFilters(FilterProvider filterProvider)
  fullName: com.fasterxml.jackson.databind.ObjectMapper.setFilters(FilterProvider filterProvider)
  overload: com.fasterxml.jackson.databind.ObjectMapper.setFilters*
  type: Method
  package: com.fasterxml.jackson.databind
  syntax:
    content: public void setFilters(FilterProvider filterProvider)
    parameters:
    - id: filterProvider
      type: com.fasterxml.jackson.databind.ser.FilterProvider
- uid: com.fasterxml.jackson.databind.ObjectMapper.setHandlerInstantiator(com.fasterxml.jackson.databind.cfg.HandlerInstantiator)
  id: setHandlerInstantiator(com.fasterxml.jackson.databind.cfg.HandlerInstantiator)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ObjectMapper
  langs:
  - java
  name: setHandlerInstantiator(HandlerInstantiator hi)
  nameWithType: ObjectMapper.setHandlerInstantiator(HandlerInstantiator hi)
  fullName: com.fasterxml.jackson.databind.ObjectMapper.setHandlerInstantiator(HandlerInstantiator hi)
  overload: com.fasterxml.jackson.databind.ObjectMapper.setHandlerInstantiator*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: Method for configuring <xref uid="com.fasterxml.jackson.databind.cfg.HandlerInstantiator" data-throw-if-not-resolved="false">HandlerInstantiator</xref> to use for creating instances of handlers (such as serializers, deserializers, type and type id resolvers), given a class.
  syntax:
    content: public Object setHandlerInstantiator(HandlerInstantiator hi)
    parameters:
    - id: hi
      type: com.fasterxml.jackson.databind.cfg.HandlerInstantiator
      description: Instantiator to use; if null, use the default implementation
    return:
      type: java.lang.Object
- uid: com.fasterxml.jackson.databind.ObjectMapper.setInjectableValues(com.fasterxml.jackson.databind.InjectableValues)
  id: setInjectableValues(com.fasterxml.jackson.databind.InjectableValues)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ObjectMapper
  langs:
  - java
  name: setInjectableValues(InjectableValues injectableValues)
  nameWithType: ObjectMapper.setInjectableValues(InjectableValues injectableValues)
  fullName: com.fasterxml.jackson.databind.ObjectMapper.setInjectableValues(InjectableValues injectableValues)
  overload: com.fasterxml.jackson.databind.ObjectMapper.setInjectableValues*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: Method for configuring <xref uid="com.fasterxml.jackson.databind.InjectableValues" data-throw-if-not-resolved="false">InjectableValues</xref> which used to find values to inject.
  syntax:
    content: public ObjectMapper setInjectableValues(InjectableValues injectableValues)
    parameters:
    - id: injectableValues
      type: com.fasterxml.jackson.databind.InjectableValues
    return:
      type: com.fasterxml.jackson.databind.ObjectMapper
- uid: com.fasterxml.jackson.databind.ObjectMapper.setLocale(java.util.Locale)
  id: setLocale(java.util.Locale)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ObjectMapper
  langs:
  - java
  name: setLocale(Locale l)
  nameWithType: ObjectMapper.setLocale(Locale l)
  fullName: com.fasterxml.jackson.databind.ObjectMapper.setLocale(Locale l)
  overload: com.fasterxml.jackson.databind.ObjectMapper.setLocale*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: Method for overriding default locale to use for formatting. Default value used is <xref uid="java.util.Locale.getDefault*" data-throw-if-not-resolved="false">Locale#getDefault()</xref>.
  syntax:
    content: public ObjectMapper setLocale(Locale l)
    parameters:
    - id: l
      type: java.util.Locale
    return:
      type: com.fasterxml.jackson.databind.ObjectMapper
- uid: com.fasterxml.jackson.databind.ObjectMapper.setMixInAnnotations(java.util.Map<java.lang.Class<?>,java.lang.Class<?>>)
  id: setMixInAnnotations(java.util.Map<java.lang.Class<?>,java.lang.Class<?>>)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ObjectMapper
  langs:
  - java
  name: setMixInAnnotations(Map<Class<?>,Class<?>> sourceMixins)
  nameWithType: ObjectMapper.setMixInAnnotations(Map<Class<?>,Class<?>> sourceMixins)
  fullName: com.fasterxml.jackson.databind.ObjectMapper.setMixInAnnotations(Map<Class<?>,Class<?>> sourceMixins)
  overload: com.fasterxml.jackson.databind.ObjectMapper.setMixInAnnotations*
  type: Method
  package: com.fasterxml.jackson.databind
  syntax:
    content: public void setMixInAnnotations(Map<Class<?>,Class<?>> sourceMixins)
    parameters:
    - id: sourceMixins
      type: java.util.Map<java.lang.Class<?>,java.lang.Class<?>>
- uid: com.fasterxml.jackson.databind.ObjectMapper.setMixInResolver(com.fasterxml.jackson.databind.introspect.ClassIntrospector.MixInResolver)
  id: setMixInResolver(com.fasterxml.jackson.databind.introspect.ClassIntrospector.MixInResolver)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ObjectMapper
  langs:
  - java
  name: setMixInResolver(ClassIntrospector.MixInResolver resolver)
  nameWithType: ObjectMapper.setMixInResolver(ClassIntrospector.MixInResolver resolver)
  fullName: com.fasterxml.jackson.databind.ObjectMapper.setMixInResolver(ClassIntrospector.MixInResolver resolver)
  overload: com.fasterxml.jackson.databind.ObjectMapper.setMixInResolver*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: Method that can be called to specify given resolver for locating mix-in classes to use, overriding directly added mappings. Note that direct mappings are not cleared, but they are only applied if resolver does not provide mix-in matches.
  syntax:
    content: public ObjectMapper setMixInResolver(ClassIntrospector.MixInResolver resolver)
    parameters:
    - id: resolver
      type: com.fasterxml.jackson.databind.introspect.ClassIntrospector.MixInResolver
    return:
      type: com.fasterxml.jackson.databind.ObjectMapper
- uid: com.fasterxml.jackson.databind.ObjectMapper.setMixIns(java.util.Map<java.lang.Class<?>,java.lang.Class<?>>)
  id: setMixIns(java.util.Map<java.lang.Class<?>,java.lang.Class<?>>)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ObjectMapper
  langs:
  - java
  name: setMixIns(Map<Class<?>,Class<?>> sourceMixins)
  nameWithType: ObjectMapper.setMixIns(Map<Class<?>,Class<?>> sourceMixins)
  fullName: com.fasterxml.jackson.databind.ObjectMapper.setMixIns(Map<Class<?>,Class<?>> sourceMixins)
  overload: com.fasterxml.jackson.databind.ObjectMapper.setMixIns*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: >-
    Method to use for defining mix-in annotations to use for augmenting annotations that processable (serializable / deserializable) classes have. Mixing in is done when introspecting class annotations and properties. Map passed contains keys that are target classes (ones to augment with new annotation overrides), and values that are source classes (have annotations to use for augmentation). Annotations from source classes (and their supertypes) will **override** annotations that target classes (and their super-types) have.


    Note that this method will CLEAR any previously defined mix-ins for this mapper.
  syntax:
    content: public ObjectMapper setMixIns(Map<Class<?>,Class<?>> sourceMixins)
    parameters:
    - id: sourceMixins
      type: java.util.Map<java.lang.Class<?>,java.lang.Class<?>>
    return:
      type: com.fasterxml.jackson.databind.ObjectMapper
- uid: com.fasterxml.jackson.databind.ObjectMapper.setNodeFactory(com.fasterxml.jackson.databind.node.JsonNodeFactory)
  id: setNodeFactory(com.fasterxml.jackson.databind.node.JsonNodeFactory)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ObjectMapper
  langs:
  - java
  name: setNodeFactory(JsonNodeFactory f)
  nameWithType: ObjectMapper.setNodeFactory(JsonNodeFactory f)
  fullName: com.fasterxml.jackson.databind.ObjectMapper.setNodeFactory(JsonNodeFactory f)
  overload: com.fasterxml.jackson.databind.ObjectMapper.setNodeFactory*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: Method for specifying <xref uid="com.fasterxml.jackson.databind.node.JsonNodeFactory" data-throw-if-not-resolved="false">JsonNodeFactory</xref> to use for constructing root level tree nodes (via method <xref uid="com.fasterxml.jackson.databind.ObjectMapper.createObjectNode*" data-throw-if-not-resolved="false">#createObjectNode</xref>
  syntax:
    content: public ObjectMapper setNodeFactory(JsonNodeFactory f)
    parameters:
    - id: f
      type: com.fasterxml.jackson.databind.node.JsonNodeFactory
    return:
      type: com.fasterxml.jackson.databind.ObjectMapper
- uid: com.fasterxml.jackson.databind.ObjectMapper.setPolymorphicTypeValidator(com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator)
  id: setPolymorphicTypeValidator(com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ObjectMapper
  langs:
  - java
  name: setPolymorphicTypeValidator(PolymorphicTypeValidator ptv)
  nameWithType: ObjectMapper.setPolymorphicTypeValidator(PolymorphicTypeValidator ptv)
  fullName: com.fasterxml.jackson.databind.ObjectMapper.setPolymorphicTypeValidator(PolymorphicTypeValidator ptv)
  overload: com.fasterxml.jackson.databind.ObjectMapper.setPolymorphicTypeValidator*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: Method for specifying <xref uid="com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator" data-throw-if-not-resolved="false">PolymorphicTypeValidator</xref> to use for validating polymorphic subtypes used with explicit polymorphic types (annotation-based), but NOT one with "default typing" (see <xref uid="com.fasterxml.jackson.databind.ObjectMapper.activateDefaultTyping(com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator)" data-throw-if-not-resolved="false">#activateDefaultTyping(PolymorphicTypeValidator)</xref> for details).
  syntax:
    content: public ObjectMapper setPolymorphicTypeValidator(PolymorphicTypeValidator ptv)
    parameters:
    - id: ptv
      type: com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator
    return:
      type: com.fasterxml.jackson.databind.ObjectMapper
- uid: com.fasterxml.jackson.databind.ObjectMapper.setPropertyInclusion(com.fasterxml.jackson.annotation.JsonInclude.Value)
  id: setPropertyInclusion(com.fasterxml.jackson.annotation.JsonInclude.Value)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ObjectMapper
  langs:
  - java
  name: setPropertyInclusion(JsonInclude.Value incl)
  nameWithType: ObjectMapper.setPropertyInclusion(JsonInclude.Value incl)
  fullName: com.fasterxml.jackson.databind.ObjectMapper.setPropertyInclusion(JsonInclude.Value incl)
  overload: com.fasterxml.jackson.databind.ObjectMapper.setPropertyInclusion*
  type: Method
  package: com.fasterxml.jackson.databind
  syntax:
    content: public ObjectMapper setPropertyInclusion(JsonInclude.Value incl)
    parameters:
    - id: incl
      type: com.fasterxml.jackson.annotation.JsonInclude.Value
    return:
      type: com.fasterxml.jackson.databind.ObjectMapper
- uid: com.fasterxml.jackson.databind.ObjectMapper.setPropertyNamingStrategy(com.fasterxml.jackson.databind.PropertyNamingStrategy)
  id: setPropertyNamingStrategy(com.fasterxml.jackson.databind.PropertyNamingStrategy)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ObjectMapper
  langs:
  - java
  name: setPropertyNamingStrategy(PropertyNamingStrategy s)
  nameWithType: ObjectMapper.setPropertyNamingStrategy(PropertyNamingStrategy s)
  fullName: com.fasterxml.jackson.databind.ObjectMapper.setPropertyNamingStrategy(PropertyNamingStrategy s)
  overload: com.fasterxml.jackson.databind.ObjectMapper.setPropertyNamingStrategy*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: Method for setting custom property naming strategy to use.
  syntax:
    content: public ObjectMapper setPropertyNamingStrategy(PropertyNamingStrategy s)
    parameters:
    - id: s
      type: com.fasterxml.jackson.databind.PropertyNamingStrategy
    return:
      type: com.fasterxml.jackson.databind.ObjectMapper
- uid: com.fasterxml.jackson.databind.ObjectMapper.setSerializationInclusion(com.fasterxml.jackson.annotation.JsonInclude.Include)
  id: setSerializationInclusion(com.fasterxml.jackson.annotation.JsonInclude.Include)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ObjectMapper
  langs:
  - java
  name: setSerializationInclusion(JsonInclude.Include incl)
  nameWithType: ObjectMapper.setSerializationInclusion(JsonInclude.Include incl)
  fullName: com.fasterxml.jackson.databind.ObjectMapper.setSerializationInclusion(JsonInclude.Include incl)
  overload: com.fasterxml.jackson.databind.ObjectMapper.setSerializationInclusion*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: >-
    Convenience method, equivalent to calling:


    ```java

    setPropertyInclusion(JsonInclude.Value.construct(incl, incl));

    ```


    NOTE: behavior differs slightly from 2.8, where second argument was implied to be `JsonInclude.Include.ALWAYS`.
  syntax:
    content: public ObjectMapper setSerializationInclusion(JsonInclude.Include incl)
    parameters:
    - id: incl
      type: com.fasterxml.jackson.annotation.JsonInclude.Include
    return:
      type: com.fasterxml.jackson.databind.ObjectMapper
- uid: com.fasterxml.jackson.databind.ObjectMapper.setSerializerFactory(com.fasterxml.jackson.databind.ser.SerializerFactory)
  id: setSerializerFactory(com.fasterxml.jackson.databind.ser.SerializerFactory)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ObjectMapper
  langs:
  - java
  name: setSerializerFactory(SerializerFactory f)
  nameWithType: ObjectMapper.setSerializerFactory(SerializerFactory f)
  fullName: com.fasterxml.jackson.databind.ObjectMapper.setSerializerFactory(SerializerFactory f)
  overload: com.fasterxml.jackson.databind.ObjectMapper.setSerializerFactory*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: Method for setting specific <xref uid="com.fasterxml.jackson.databind.ser.SerializerFactory" data-throw-if-not-resolved="false">SerializerFactory</xref> to use for constructing (bean) serializers.
  syntax:
    content: public ObjectMapper setSerializerFactory(SerializerFactory f)
    parameters:
    - id: f
      type: com.fasterxml.jackson.databind.ser.SerializerFactory
    return:
      type: com.fasterxml.jackson.databind.ObjectMapper
- uid: com.fasterxml.jackson.databind.ObjectMapper.setSerializerProvider(com.fasterxml.jackson.databind.ser.DefaultSerializerProvider)
  id: setSerializerProvider(com.fasterxml.jackson.databind.ser.DefaultSerializerProvider)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ObjectMapper
  langs:
  - java
  name: setSerializerProvider(DefaultSerializerProvider p)
  nameWithType: ObjectMapper.setSerializerProvider(DefaultSerializerProvider p)
  fullName: com.fasterxml.jackson.databind.ObjectMapper.setSerializerProvider(DefaultSerializerProvider p)
  overload: com.fasterxml.jackson.databind.ObjectMapper.setSerializerProvider*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: Method for setting "blueprint" <xref uid="com.fasterxml.jackson.databind.SerializerProvider" data-throw-if-not-resolved="false">SerializerProvider</xref> instance to use as the base for actual provider instances to use for handling caching of <xref uid="com.fasterxml.jackson.databind.JsonSerializer" data-throw-if-not-resolved="false">JsonSerializer</xref> instances.
  syntax:
    content: public ObjectMapper setSerializerProvider(DefaultSerializerProvider p)
    parameters:
    - id: p
      type: com.fasterxml.jackson.databind.ser.DefaultSerializerProvider
    return:
      type: com.fasterxml.jackson.databind.ObjectMapper
- uid: com.fasterxml.jackson.databind.ObjectMapper.setSubtypeResolver(com.fasterxml.jackson.databind.jsontype.SubtypeResolver)
  id: setSubtypeResolver(com.fasterxml.jackson.databind.jsontype.SubtypeResolver)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ObjectMapper
  langs:
  - java
  name: setSubtypeResolver(SubtypeResolver str)
  nameWithType: ObjectMapper.setSubtypeResolver(SubtypeResolver str)
  fullName: com.fasterxml.jackson.databind.ObjectMapper.setSubtypeResolver(SubtypeResolver str)
  overload: com.fasterxml.jackson.databind.ObjectMapper.setSubtypeResolver*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: Method for setting custom subtype resolver to use.
  syntax:
    content: public ObjectMapper setSubtypeResolver(SubtypeResolver str)
    parameters:
    - id: str
      type: com.fasterxml.jackson.databind.jsontype.SubtypeResolver
    return:
      type: com.fasterxml.jackson.databind.ObjectMapper
- uid: com.fasterxml.jackson.databind.ObjectMapper.setTimeZone(java.util.TimeZone)
  id: setTimeZone(java.util.TimeZone)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ObjectMapper
  langs:
  - java
  name: setTimeZone(TimeZone tz)
  nameWithType: ObjectMapper.setTimeZone(TimeZone tz)
  fullName: com.fasterxml.jackson.databind.ObjectMapper.setTimeZone(TimeZone tz)
  overload: com.fasterxml.jackson.databind.ObjectMapper.setTimeZone*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: Method for overriding default TimeZone to use for formatting. Default value used is UTC (NOT default TimeZone of JVM).
  syntax:
    content: public ObjectMapper setTimeZone(TimeZone tz)
    parameters:
    - id: tz
      type: java.util.TimeZone
    return:
      type: com.fasterxml.jackson.databind.ObjectMapper
- uid: com.fasterxml.jackson.databind.ObjectMapper.setTypeFactory(com.fasterxml.jackson.databind.type.TypeFactory)
  id: setTypeFactory(com.fasterxml.jackson.databind.type.TypeFactory)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ObjectMapper
  langs:
  - java
  name: setTypeFactory(TypeFactory f)
  nameWithType: ObjectMapper.setTypeFactory(TypeFactory f)
  fullName: com.fasterxml.jackson.databind.ObjectMapper.setTypeFactory(TypeFactory f)
  overload: com.fasterxml.jackson.databind.ObjectMapper.setTypeFactory*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: >-
    Method that can be used to override <xref uid="com.fasterxml.jackson.databind.type.TypeFactory" data-throw-if-not-resolved="false">TypeFactory</xref> instance used by this mapper.


    Note: will also set <xref uid="com.fasterxml.jackson.databind.type.TypeFactory" data-throw-if-not-resolved="false">TypeFactory</xref> that deserialization and serialization config objects use.
  syntax:
    content: public ObjectMapper setTypeFactory(TypeFactory f)
    parameters:
    - id: f
      type: com.fasterxml.jackson.databind.type.TypeFactory
    return:
      type: com.fasterxml.jackson.databind.ObjectMapper
- uid: com.fasterxml.jackson.databind.ObjectMapper.setVisibility(com.fasterxml.jackson.annotation.PropertyAccessor,com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility)
  id: setVisibility(com.fasterxml.jackson.annotation.PropertyAccessor,com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ObjectMapper
  langs:
  - java
  name: setVisibility(PropertyAccessor forMethod, JsonAutoDetect.Visibility visibility)
  nameWithType: ObjectMapper.setVisibility(PropertyAccessor forMethod, JsonAutoDetect.Visibility visibility)
  fullName: com.fasterxml.jackson.databind.ObjectMapper.setVisibility(PropertyAccessor forMethod, JsonAutoDetect.Visibility visibility)
  overload: com.fasterxml.jackson.databind.ObjectMapper.setVisibility*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: >-
    Convenience method that allows changing configuration for underlying <xref uid="com.fasterxml.jackson.databind.introspect.VisibilityChecker" data-throw-if-not-resolved="false">VisibilityChecker</xref>s, to change details of what kinds of properties are auto-detected. Basically short cut for doing:


    ```java

    mapper.setVisibilityChecker(
         mapper.getVisibilityChecker().withVisibility(forMethod, visibility)
      );
    ```


    one common use case would be to do:


    ```java

    mapper.setVisibility(JsonMethod.FIELD, Visibility.ANY);

    ```


    which would make all member fields serializable without further annotations, instead of just public fields (default setting).
  syntax:
    content: public ObjectMapper setVisibility(PropertyAccessor forMethod, JsonAutoDetect.Visibility visibility)
    parameters:
    - id: forMethod
      type: com.fasterxml.jackson.annotation.PropertyAccessor
      description: >-
        Type of property descriptor affected (field, getter/isGetter,
             setter, creator)
    - id: visibility
      type: com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility
      description: Minimum visibility to require for the property descriptors of type
    return:
      type: com.fasterxml.jackson.databind.ObjectMapper
      description: >-
        Modified mapper instance (that is, "this"), to allow chaining
            of configuration calls
- uid: com.fasterxml.jackson.databind.ObjectMapper.setVisibility(com.fasterxml.jackson.databind.introspect.VisibilityChecker<?>)
  id: setVisibility(com.fasterxml.jackson.databind.introspect.VisibilityChecker<?>)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ObjectMapper
  langs:
  - java
  name: setVisibility(VisibilityChecker<?> vc)
  nameWithType: ObjectMapper.setVisibility(VisibilityChecker<?> vc)
  fullName: com.fasterxml.jackson.databind.ObjectMapper.setVisibility(VisibilityChecker<?> vc)
  overload: com.fasterxml.jackson.databind.ObjectMapper.setVisibility*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: 'Method for setting currently configured default <xref uid="com.fasterxml.jackson.databind.introspect.VisibilityChecker" data-throw-if-not-resolved="false">VisibilityChecker</xref>, object used for determining whether given property element (method, field, constructor) can be auto-detected or not. This default checker is used as the base visibility: per-class overrides (both via annotations and per-type config overrides) can further change these settings.'
  syntax:
    content: public ObjectMapper setVisibility(VisibilityChecker<?> vc)
    parameters:
    - id: vc
      type: com.fasterxml.jackson.databind.introspect.VisibilityChecker<?>
    return:
      type: com.fasterxml.jackson.databind.ObjectMapper
- uid: com.fasterxml.jackson.databind.ObjectMapper.setVisibilityChecker(com.fasterxml.jackson.databind.introspect.VisibilityChecker<?>)
  id: setVisibilityChecker(com.fasterxml.jackson.databind.introspect.VisibilityChecker<?>)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ObjectMapper
  langs:
  - java
  name: setVisibilityChecker(VisibilityChecker<?> vc)
  nameWithType: ObjectMapper.setVisibilityChecker(VisibilityChecker<?> vc)
  fullName: com.fasterxml.jackson.databind.ObjectMapper.setVisibilityChecker(VisibilityChecker<?> vc)
  overload: com.fasterxml.jackson.databind.ObjectMapper.setVisibilityChecker*
  type: Method
  package: com.fasterxml.jackson.databind
  syntax:
    content: public void setVisibilityChecker(VisibilityChecker<?> vc)
    parameters:
    - id: vc
      type: com.fasterxml.jackson.databind.introspect.VisibilityChecker<?>
- uid: com.fasterxml.jackson.databind.ObjectMapper.tokenStreamFactory()
  id: tokenStreamFactory()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ObjectMapper
  langs:
  - java
  name: tokenStreamFactory()
  nameWithType: ObjectMapper.tokenStreamFactory()
  fullName: com.fasterxml.jackson.databind.ObjectMapper.tokenStreamFactory()
  overload: com.fasterxml.jackson.databind.ObjectMapper.tokenStreamFactory*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: >-
    Method that can be used to get hold of <xref uid="com.fasterxml.jackson.core.JsonFactory" data-throw-if-not-resolved="false">JsonFactory</xref> that this mapper uses if it needs to construct <xref uid="com.fasterxml.jackson.core.JsonParser" data-throw-if-not-resolved="false">JsonParser</xref>s and/or <xref uid="com.fasterxml.jackson.core.JsonGenerator" data-throw-if-not-resolved="false">JsonGenerator</xref>s.


    WARNING: note that all <xref uid="com.fasterxml.jackson.databind.ObjectReader" data-throw-if-not-resolved="false">ObjectReader</xref> and <xref uid="com.fasterxml.jackson.databind.ObjectWriter" data-throw-if-not-resolved="false">ObjectWriter</xref> instances created by this mapper usually share the same configured <xref uid="com.fasterxml.jackson.core.JsonFactory" data-throw-if-not-resolved="false">JsonFactory</xref>, so changes to its configuration will "leak". To avoid such observed changes you should always use "with()" and "without()" method of <xref uid="com.fasterxml.jackson.databind.ObjectReader" data-throw-if-not-resolved="false">ObjectReader</xref> and <xref uid="com.fasterxml.jackson.databind.ObjectWriter" data-throw-if-not-resolved="false">ObjectWriter</xref> for changing <xref uid="com.fasterxml.jackson.core.JsonParser.Feature" data-throw-if-not-resolved="false">com.fasterxml.jackson.core.JsonParser.Feature</xref> and <xref uid="com.fasterxml.jackson.core.JsonGenerator.Feature" data-throw-if-not-resolved="false">com.fasterxml.jackson.core.JsonGenerator.Feature</xref> settings to use on per-call basis.
  syntax:
    content: public JsonFactory tokenStreamFactory()
    return:
      type: com.fasterxml.jackson.core.JsonFactory
      description: >-
        <xref uid="com.fasterxml.jackson.core.JsonFactory" data-throw-if-not-resolved="false">JsonFactory</xref> that this mapper uses when it needs to
           construct Json parser and generators
- uid: com.fasterxml.jackson.databind.ObjectMapper.treeAsTokens(com.fasterxml.jackson.core.TreeNode)
  id: treeAsTokens(com.fasterxml.jackson.core.TreeNode)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ObjectMapper
  langs:
  - java
  name: treeAsTokens(TreeNode n)
  nameWithType: ObjectMapper.treeAsTokens(TreeNode n)
  fullName: com.fasterxml.jackson.databind.ObjectMapper.treeAsTokens(TreeNode n)
  overload: com.fasterxml.jackson.databind.ObjectMapper.treeAsTokens*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: Method for constructing a <xref uid="com.fasterxml.jackson.core.JsonParser" data-throw-if-not-resolved="false">JsonParser</xref> out of JSON tree representation.
  syntax:
    content: public JsonParser treeAsTokens(TreeNode n)
    parameters:
    - id: n
      type: com.fasterxml.jackson.core.TreeNode
      description: Root node of the tree that resulting parser will read from
    return:
      type: com.fasterxml.jackson.core.JsonParser
- uid: com.fasterxml.jackson.databind.ObjectMapper.version()
  id: version()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ObjectMapper
  langs:
  - java
  name: version()
  nameWithType: ObjectMapper.version()
  fullName: com.fasterxml.jackson.databind.ObjectMapper.version()
  overload: com.fasterxml.jackson.databind.ObjectMapper.version*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: Method that will return version information stored in and read from jar that contains this class.
  syntax:
    content: public Version version()
    return:
      type: com.fasterxml.jackson.core.Version
- uid: com.fasterxml.jackson.databind.ObjectMapper.writeTree(com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.core.TreeNode)
  id: writeTree(com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.core.TreeNode)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ObjectMapper
  langs:
  - java
  name: writeTree(JsonGenerator g, TreeNode rootNode)
  nameWithType: ObjectMapper.writeTree(JsonGenerator g, TreeNode rootNode)
  fullName: com.fasterxml.jackson.databind.ObjectMapper.writeTree(JsonGenerator g, TreeNode rootNode)
  overload: com.fasterxml.jackson.databind.ObjectMapper.writeTree*
  type: Method
  package: com.fasterxml.jackson.databind
  syntax:
    content: public void writeTree(JsonGenerator g, TreeNode rootNode)
    parameters:
    - id: g
      type: com.fasterxml.jackson.core.JsonGenerator
    - id: rootNode
      type: com.fasterxml.jackson.core.TreeNode
  exceptions:
  - type: java.io.IOException
  - type: com.fasterxml.jackson.core.JsonProcessingException
- uid: com.fasterxml.jackson.databind.ObjectMapper.writeTree(com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.JsonNode)
  id: writeTree(com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.JsonNode)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ObjectMapper
  langs:
  - java
  name: writeTree(JsonGenerator g, JsonNode rootNode)
  nameWithType: ObjectMapper.writeTree(JsonGenerator g, JsonNode rootNode)
  fullName: com.fasterxml.jackson.databind.ObjectMapper.writeTree(JsonGenerator g, JsonNode rootNode)
  overload: com.fasterxml.jackson.databind.ObjectMapper.writeTree*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: Method to serialize given JSON Tree, using generator provided.
  syntax:
    content: public void writeTree(JsonGenerator g, JsonNode rootNode)
    parameters:
    - id: g
      type: com.fasterxml.jackson.core.JsonGenerator
    - id: rootNode
      type: com.fasterxml.jackson.databind.JsonNode
  exceptions:
  - type: java.io.IOException
  - type: com.fasterxml.jackson.core.JsonProcessingException
- uid: com.fasterxml.jackson.databind.ObjectMapper.writeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)
  id: writeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ObjectMapper
  langs:
  - java
  name: writeValue(JsonGenerator g, Object value)
  nameWithType: ObjectMapper.writeValue(JsonGenerator g, Object value)
  fullName: com.fasterxml.jackson.databind.ObjectMapper.writeValue(JsonGenerator g, Object value)
  overload: com.fasterxml.jackson.databind.ObjectMapper.writeValue*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: Method that can be used to serialize any Java value as JSON output, using provided <xref uid="com.fasterxml.jackson.core.JsonGenerator" data-throw-if-not-resolved="false">JsonGenerator</xref>.
  syntax:
    content: public void writeValue(JsonGenerator g, Object value)
    parameters:
    - id: g
      type: com.fasterxml.jackson.core.JsonGenerator
    - id: value
      type: java.lang.Object
  exceptions:
  - type: java.io.IOException
  - type: com.fasterxml.jackson.core.JsonGenerationException
  - type: com.fasterxml.jackson.databind.JsonMappingException
- uid: com.fasterxml.jackson.databind.ObjectMapper.writeValue(java.io.DataOutput,java.lang.Object)
  id: writeValue(java.io.DataOutput,java.lang.Object)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ObjectMapper
  langs:
  - java
  name: writeValue(DataOutput out, Object value)
  nameWithType: ObjectMapper.writeValue(DataOutput out, Object value)
  fullName: com.fasterxml.jackson.databind.ObjectMapper.writeValue(DataOutput out, Object value)
  overload: com.fasterxml.jackson.databind.ObjectMapper.writeValue*
  type: Method
  package: com.fasterxml.jackson.databind
  syntax:
    content: public void writeValue(DataOutput out, Object value)
    parameters:
    - id: out
      type: java.io.DataOutput
    - id: value
      type: java.lang.Object
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.databind.ObjectMapper.writeValue(java.io.File,java.lang.Object)
  id: writeValue(java.io.File,java.lang.Object)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ObjectMapper
  langs:
  - java
  name: writeValue(File resultFile, Object value)
  nameWithType: ObjectMapper.writeValue(File resultFile, Object value)
  fullName: com.fasterxml.jackson.databind.ObjectMapper.writeValue(File resultFile, Object value)
  overload: com.fasterxml.jackson.databind.ObjectMapper.writeValue*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: Method that can be used to serialize any Java value as JSON output, written to File provided.
  syntax:
    content: public void writeValue(File resultFile, Object value)
    parameters:
    - id: resultFile
      type: java.io.File
    - id: value
      type: java.lang.Object
  exceptions:
  - type: java.io.IOException
  - type: com.fasterxml.jackson.core.JsonGenerationException
  - type: com.fasterxml.jackson.databind.JsonMappingException
- uid: com.fasterxml.jackson.databind.ObjectMapper.writeValue(java.io.OutputStream,java.lang.Object)
  id: writeValue(java.io.OutputStream,java.lang.Object)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ObjectMapper
  langs:
  - java
  name: writeValue(OutputStream out, Object value)
  nameWithType: ObjectMapper.writeValue(OutputStream out, Object value)
  fullName: com.fasterxml.jackson.databind.ObjectMapper.writeValue(OutputStream out, Object value)
  overload: com.fasterxml.jackson.databind.ObjectMapper.writeValue*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: >-
    Method that can be used to serialize any Java value as JSON output, using output stream provided (using encoding <xref uid="com.fasterxml.jackson.core.JsonEncoding.UTF8" data-throw-if-not-resolved="false">JsonEncoding#UTF8</xref>).


    Note: method does not close the underlying stream explicitly here; however, <xref uid="com.fasterxml.jackson.core.JsonFactory" data-throw-if-not-resolved="false">JsonFactory</xref> this mapper uses may choose to close the stream depending on its settings (by default, it will try to close it when <xref uid="com.fasterxml.jackson.core.JsonGenerator" data-throw-if-not-resolved="false">JsonGenerator</xref> we construct is closed).
  syntax:
    content: public void writeValue(OutputStream out, Object value)
    parameters:
    - id: out
      type: java.io.OutputStream
    - id: value
      type: java.lang.Object
  exceptions:
  - type: java.io.IOException
  - type: com.fasterxml.jackson.core.JsonGenerationException
  - type: com.fasterxml.jackson.databind.JsonMappingException
- uid: com.fasterxml.jackson.databind.ObjectMapper.writeValue(java.io.Writer,java.lang.Object)
  id: writeValue(java.io.Writer,java.lang.Object)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ObjectMapper
  langs:
  - java
  name: writeValue(Writer w, Object value)
  nameWithType: ObjectMapper.writeValue(Writer w, Object value)
  fullName: com.fasterxml.jackson.databind.ObjectMapper.writeValue(Writer w, Object value)
  overload: com.fasterxml.jackson.databind.ObjectMapper.writeValue*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: >-
    Method that can be used to serialize any Java value as JSON output, using Writer provided.


    Note: method does not close the underlying stream explicitly here; however, <xref uid="com.fasterxml.jackson.core.JsonFactory" data-throw-if-not-resolved="false">JsonFactory</xref> this mapper uses may choose to close the stream depending on its settings (by default, it will try to close it when <xref uid="com.fasterxml.jackson.core.JsonGenerator" data-throw-if-not-resolved="false">JsonGenerator</xref> we construct is closed).
  syntax:
    content: public void writeValue(Writer w, Object value)
    parameters:
    - id: w
      type: java.io.Writer
    - id: value
      type: java.lang.Object
  exceptions:
  - type: java.io.IOException
  - type: com.fasterxml.jackson.core.JsonGenerationException
  - type: com.fasterxml.jackson.databind.JsonMappingException
- uid: com.fasterxml.jackson.databind.ObjectMapper.writeValueAsBytes(java.lang.Object)
  id: writeValueAsBytes(java.lang.Object)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ObjectMapper
  langs:
  - java
  name: writeValueAsBytes(Object value)
  nameWithType: ObjectMapper.writeValueAsBytes(Object value)
  fullName: com.fasterxml.jackson.databind.ObjectMapper.writeValueAsBytes(Object value)
  overload: com.fasterxml.jackson.databind.ObjectMapper.writeValueAsBytes*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: >-
    Method that can be used to serialize any Java value as a byte array. Functionally equivalent to calling <xref uid="com.fasterxml.jackson.databind.ObjectMapper.writeValue(java.io.Writer,java.lang.Object)" data-throw-if-not-resolved="false">#writeValue(Writer,Object)</xref> with <xref uid="" data-throw-if-not-resolved="false">java.io.ByteArrayOutputStream</xref> and getting bytes, but more efficient. Encoding used will be UTF-8.


    Note: prior to version 2.1, throws clause included <xref uid="java.io.IOException" data-throw-if-not-resolved="false">IOException</xref>; 2.1 removed it.
  syntax:
    content: public byte[] writeValueAsBytes(Object value)
    parameters:
    - id: value
      type: java.lang.Object
    return:
      type: byte[]
  exceptions:
  - type: com.fasterxml.jackson.core.JsonProcessingException
- uid: com.fasterxml.jackson.databind.ObjectMapper.writeValueAsString(java.lang.Object)
  id: writeValueAsString(java.lang.Object)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ObjectMapper
  langs:
  - java
  name: writeValueAsString(Object value)
  nameWithType: ObjectMapper.writeValueAsString(Object value)
  fullName: com.fasterxml.jackson.databind.ObjectMapper.writeValueAsString(Object value)
  overload: com.fasterxml.jackson.databind.ObjectMapper.writeValueAsString*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: >-
    Method that can be used to serialize any Java value as a String. Functionally equivalent to calling <xref uid="com.fasterxml.jackson.databind.ObjectMapper.writeValue(java.io.Writer,java.lang.Object)" data-throw-if-not-resolved="false">#writeValue(Writer,Object)</xref> with <xref uid="" data-throw-if-not-resolved="false">java.io.StringWriter</xref> and constructing String, but more efficient.


    Note: prior to version 2.1, throws clause included <xref uid="java.io.IOException" data-throw-if-not-resolved="false">IOException</xref>; 2.1 removed it.
  syntax:
    content: public String writeValueAsString(Object value)
    parameters:
    - id: value
      type: java.lang.Object
    return:
      type: java.lang.String
  exceptions:
  - type: com.fasterxml.jackson.core.JsonProcessingException
- uid: com.fasterxml.jackson.databind.ObjectMapper.writer()
  id: writer()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ObjectMapper
  langs:
  - java
  name: writer()
  nameWithType: ObjectMapper.writer()
  fullName: com.fasterxml.jackson.databind.ObjectMapper.writer()
  overload: com.fasterxml.jackson.databind.ObjectMapper.writer*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: Convenience method for constructing <xref uid="com.fasterxml.jackson.databind.ObjectWriter" data-throw-if-not-resolved="false">ObjectWriter</xref> with default settings.
  syntax:
    content: public ObjectWriter writer()
    return:
      type: com.fasterxml.jackson.databind.ObjectWriter
- uid: com.fasterxml.jackson.databind.ObjectMapper.writer(com.fasterxml.jackson.core.Base64Variant)
  id: writer(com.fasterxml.jackson.core.Base64Variant)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ObjectMapper
  langs:
  - java
  name: writer(Base64Variant defaultBase64)
  nameWithType: ObjectMapper.writer(Base64Variant defaultBase64)
  fullName: com.fasterxml.jackson.databind.ObjectMapper.writer(Base64Variant defaultBase64)
  overload: com.fasterxml.jackson.databind.ObjectMapper.writer*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: Factory method for constructing <xref uid="com.fasterxml.jackson.databind.ObjectWriter" data-throw-if-not-resolved="false">ObjectWriter</xref> that will use specified Base64 encoding variant for Base64-encoded binary data.
  syntax:
    content: public ObjectWriter writer(Base64Variant defaultBase64)
    parameters:
    - id: defaultBase64
      type: com.fasterxml.jackson.core.Base64Variant
    return:
      type: com.fasterxml.jackson.databind.ObjectWriter
- uid: com.fasterxml.jackson.databind.ObjectMapper.writer(com.fasterxml.jackson.core.FormatSchema)
  id: writer(com.fasterxml.jackson.core.FormatSchema)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ObjectMapper
  langs:
  - java
  name: writer(FormatSchema schema)
  nameWithType: ObjectMapper.writer(FormatSchema schema)
  fullName: com.fasterxml.jackson.databind.ObjectMapper.writer(FormatSchema schema)
  overload: com.fasterxml.jackson.databind.ObjectMapper.writer*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: Factory method for constructing <xref uid="com.fasterxml.jackson.databind.ObjectWriter" data-throw-if-not-resolved="false">ObjectWriter</xref> that will pass specific schema object to <xref uid="com.fasterxml.jackson.core.JsonGenerator" data-throw-if-not-resolved="false">JsonGenerator</xref> used for writing content.
  syntax:
    content: public ObjectWriter writer(FormatSchema schema)
    parameters:
    - id: schema
      type: com.fasterxml.jackson.core.FormatSchema
      description: Schema to pass to generator
    return:
      type: com.fasterxml.jackson.databind.ObjectWriter
- uid: com.fasterxml.jackson.databind.ObjectMapper.writer(com.fasterxml.jackson.core.PrettyPrinter)
  id: writer(com.fasterxml.jackson.core.PrettyPrinter)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ObjectMapper
  langs:
  - java
  name: writer(PrettyPrinter pp)
  nameWithType: ObjectMapper.writer(PrettyPrinter pp)
  fullName: com.fasterxml.jackson.databind.ObjectMapper.writer(PrettyPrinter pp)
  overload: com.fasterxml.jackson.databind.ObjectMapper.writer*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: Factory method for constructing <xref uid="com.fasterxml.jackson.databind.ObjectWriter" data-throw-if-not-resolved="false">ObjectWriter</xref> that will serialize objects using specified pretty printer for indentation (or if null, no pretty printer)
  syntax:
    content: public ObjectWriter writer(PrettyPrinter pp)
    parameters:
    - id: pp
      type: com.fasterxml.jackson.core.PrettyPrinter
    return:
      type: com.fasterxml.jackson.databind.ObjectWriter
- uid: com.fasterxml.jackson.databind.ObjectMapper.writer(com.fasterxml.jackson.core.io.CharacterEscapes)
  id: writer(com.fasterxml.jackson.core.io.CharacterEscapes)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ObjectMapper
  langs:
  - java
  name: writer(CharacterEscapes escapes)
  nameWithType: ObjectMapper.writer(CharacterEscapes escapes)
  fullName: com.fasterxml.jackson.databind.ObjectMapper.writer(CharacterEscapes escapes)
  overload: com.fasterxml.jackson.databind.ObjectMapper.writer*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: Factory method for constructing <xref uid="com.fasterxml.jackson.databind.ObjectReader" data-throw-if-not-resolved="false">ObjectReader</xref> that will use specified character escaping details for output.
  syntax:
    content: public ObjectWriter writer(CharacterEscapes escapes)
    parameters:
    - id: escapes
      type: com.fasterxml.jackson.core.io.CharacterEscapes
    return:
      type: com.fasterxml.jackson.databind.ObjectWriter
- uid: com.fasterxml.jackson.databind.ObjectMapper.writer(com.fasterxml.jackson.databind.SerializationFeature)
  id: writer(com.fasterxml.jackson.databind.SerializationFeature)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ObjectMapper
  langs:
  - java
  name: writer(SerializationFeature feature)
  nameWithType: ObjectMapper.writer(SerializationFeature feature)
  fullName: com.fasterxml.jackson.databind.ObjectMapper.writer(SerializationFeature feature)
  overload: com.fasterxml.jackson.databind.ObjectMapper.writer*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: Factory method for constructing <xref uid="com.fasterxml.jackson.databind.ObjectWriter" data-throw-if-not-resolved="false">ObjectWriter</xref> with specified feature enabled (compared to settings that this mapper instance has).
  syntax:
    content: public ObjectWriter writer(SerializationFeature feature)
    parameters:
    - id: feature
      type: com.fasterxml.jackson.databind.SerializationFeature
    return:
      type: com.fasterxml.jackson.databind.ObjectWriter
- uid: com.fasterxml.jackson.databind.ObjectMapper.writer(com.fasterxml.jackson.databind.SerializationFeature,com.fasterxml.jackson.databind.SerializationFeature...)
  id: writer(com.fasterxml.jackson.databind.SerializationFeature,com.fasterxml.jackson.databind.SerializationFeature...)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ObjectMapper
  langs:
  - java
  name: writer(SerializationFeature first, SerializationFeature[] other)
  nameWithType: ObjectMapper.writer(SerializationFeature first, SerializationFeature[] other)
  fullName: com.fasterxml.jackson.databind.ObjectMapper.writer(SerializationFeature first, SerializationFeature[] other)
  overload: com.fasterxml.jackson.databind.ObjectMapper.writer*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: Factory method for constructing <xref uid="com.fasterxml.jackson.databind.ObjectWriter" data-throw-if-not-resolved="false">ObjectWriter</xref> with specified features enabled (compared to settings that this mapper instance has).
  syntax:
    content: public ObjectWriter writer(SerializationFeature first, SerializationFeature[] other)
    parameters:
    - id: first
      type: com.fasterxml.jackson.databind.SerializationFeature
    - id: other
      type: com.fasterxml.jackson.databind.SerializationFeature[]
    return:
      type: com.fasterxml.jackson.databind.ObjectWriter
- uid: com.fasterxml.jackson.databind.ObjectMapper.writer(com.fasterxml.jackson.databind.cfg.ContextAttributes)
  id: writer(com.fasterxml.jackson.databind.cfg.ContextAttributes)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ObjectMapper
  langs:
  - java
  name: writer(ContextAttributes attrs)
  nameWithType: ObjectMapper.writer(ContextAttributes attrs)
  fullName: com.fasterxml.jackson.databind.ObjectMapper.writer(ContextAttributes attrs)
  overload: com.fasterxml.jackson.databind.ObjectMapper.writer*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: Factory method for constructing <xref uid="com.fasterxml.jackson.databind.ObjectWriter" data-throw-if-not-resolved="false">ObjectWriter</xref> that will use specified default attributes.
  syntax:
    content: public ObjectWriter writer(ContextAttributes attrs)
    parameters:
    - id: attrs
      type: com.fasterxml.jackson.databind.cfg.ContextAttributes
    return:
      type: com.fasterxml.jackson.databind.ObjectWriter
- uid: com.fasterxml.jackson.databind.ObjectMapper.writer(com.fasterxml.jackson.databind.ser.FilterProvider)
  id: writer(com.fasterxml.jackson.databind.ser.FilterProvider)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ObjectMapper
  langs:
  - java
  name: writer(FilterProvider filterProvider)
  nameWithType: ObjectMapper.writer(FilterProvider filterProvider)
  fullName: com.fasterxml.jackson.databind.ObjectMapper.writer(FilterProvider filterProvider)
  overload: com.fasterxml.jackson.databind.ObjectMapper.writer*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: Factory method for constructing <xref uid="com.fasterxml.jackson.databind.ObjectWriter" data-throw-if-not-resolved="false">ObjectWriter</xref> that will serialize objects using specified filter provider.
  syntax:
    content: public ObjectWriter writer(FilterProvider filterProvider)
    parameters:
    - id: filterProvider
      type: com.fasterxml.jackson.databind.ser.FilterProvider
    return:
      type: com.fasterxml.jackson.databind.ObjectWriter
- uid: com.fasterxml.jackson.databind.ObjectMapper.writer(java.text.DateFormat)
  id: writer(java.text.DateFormat)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ObjectMapper
  langs:
  - java
  name: writer(DateFormat df)
  nameWithType: ObjectMapper.writer(DateFormat df)
  fullName: com.fasterxml.jackson.databind.ObjectMapper.writer(DateFormat df)
  overload: com.fasterxml.jackson.databind.ObjectMapper.writer*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: Factory method for constructing <xref uid="com.fasterxml.jackson.databind.ObjectWriter" data-throw-if-not-resolved="false">ObjectWriter</xref> that will serialize objects using specified <xref uid="java.text.DateFormat" data-throw-if-not-resolved="false">DateFormat</xref>; or, if null passed, using timestamp (64-bit number.
  syntax:
    content: public ObjectWriter writer(DateFormat df)
    parameters:
    - id: df
      type: java.text.DateFormat
    return:
      type: com.fasterxml.jackson.databind.ObjectWriter
- uid: com.fasterxml.jackson.databind.ObjectMapper.writerFor(com.fasterxml.jackson.core.type.TypeReference<?>)
  id: writerFor(com.fasterxml.jackson.core.type.TypeReference<?>)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ObjectMapper
  langs:
  - java
  name: writerFor(TypeReference<?> rootType)
  nameWithType: ObjectMapper.writerFor(TypeReference<?> rootType)
  fullName: com.fasterxml.jackson.databind.ObjectMapper.writerFor(TypeReference<?> rootType)
  overload: com.fasterxml.jackson.databind.ObjectMapper.writerFor*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: >-
    Factory method for constructing <xref uid="com.fasterxml.jackson.databind.ObjectWriter" data-throw-if-not-resolved="false">ObjectWriter</xref> that will serialize objects using specified root type, instead of actual runtime type of value. Type must be a super-type of runtime type.


    Main reason for using this method is performance, as writer is able to pre-fetch serializer to use before write, and if writer is used more than once this avoids addition per-value serializer lookups.
  syntax:
    content: public ObjectWriter writerFor(TypeReference<?> rootType)
    parameters:
    - id: rootType
      type: com.fasterxml.jackson.core.type.TypeReference<?>
    return:
      type: com.fasterxml.jackson.databind.ObjectWriter
- uid: com.fasterxml.jackson.databind.ObjectMapper.writerFor(com.fasterxml.jackson.databind.JavaType)
  id: writerFor(com.fasterxml.jackson.databind.JavaType)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ObjectMapper
  langs:
  - java
  name: writerFor(JavaType rootType)
  nameWithType: ObjectMapper.writerFor(JavaType rootType)
  fullName: com.fasterxml.jackson.databind.ObjectMapper.writerFor(JavaType rootType)
  overload: com.fasterxml.jackson.databind.ObjectMapper.writerFor*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: >-
    Factory method for constructing <xref uid="com.fasterxml.jackson.databind.ObjectWriter" data-throw-if-not-resolved="false">ObjectWriter</xref> that will serialize objects using specified root type, instead of actual runtime type of value. Type must be a super-type of runtime type.


    Main reason for using this method is performance, as writer is able to pre-fetch serializer to use before write, and if writer is used more than once this avoids addition per-value serializer lookups.
  syntax:
    content: public ObjectWriter writerFor(JavaType rootType)
    parameters:
    - id: rootType
      type: com.fasterxml.jackson.databind.JavaType
    return:
      type: com.fasterxml.jackson.databind.ObjectWriter
- uid: com.fasterxml.jackson.databind.ObjectMapper.writerFor(java.lang.Class<?>)
  id: writerFor(java.lang.Class<?>)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ObjectMapper
  langs:
  - java
  name: writerFor(Class<?> rootType)
  nameWithType: ObjectMapper.writerFor(Class<?> rootType)
  fullName: com.fasterxml.jackson.databind.ObjectMapper.writerFor(Class<?> rootType)
  overload: com.fasterxml.jackson.databind.ObjectMapper.writerFor*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: >-
    Factory method for constructing <xref uid="com.fasterxml.jackson.databind.ObjectWriter" data-throw-if-not-resolved="false">ObjectWriter</xref> that will serialize objects using specified root type, instead of actual runtime type of value. Type must be a super-type of runtime type.


    Main reason for using this method is performance, as writer is able to pre-fetch serializer to use before write, and if writer is used more than once this avoids addition per-value serializer lookups.
  syntax:
    content: public ObjectWriter writerFor(Class<?> rootType)
    parameters:
    - id: rootType
      type: java.lang.Class<?>
    return:
      type: com.fasterxml.jackson.databind.ObjectWriter
- uid: com.fasterxml.jackson.databind.ObjectMapper.writerWithDefaultPrettyPrinter()
  id: writerWithDefaultPrettyPrinter()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ObjectMapper
  langs:
  - java
  name: writerWithDefaultPrettyPrinter()
  nameWithType: ObjectMapper.writerWithDefaultPrettyPrinter()
  fullName: com.fasterxml.jackson.databind.ObjectMapper.writerWithDefaultPrettyPrinter()
  overload: com.fasterxml.jackson.databind.ObjectMapper.writerWithDefaultPrettyPrinter*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: Factory method for constructing <xref uid="com.fasterxml.jackson.databind.ObjectWriter" data-throw-if-not-resolved="false">ObjectWriter</xref> that will serialize objects using the default pretty printer for indentation
  syntax:
    content: public ObjectWriter writerWithDefaultPrettyPrinter()
    return:
      type: com.fasterxml.jackson.databind.ObjectWriter
- uid: com.fasterxml.jackson.databind.ObjectMapper.writerWithType(com.fasterxml.jackson.core.type.TypeReference<?>)
  id: writerWithType(com.fasterxml.jackson.core.type.TypeReference<?>)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ObjectMapper
  langs:
  - java
  name: writerWithType(TypeReference<?> rootType)
  nameWithType: ObjectMapper.writerWithType(TypeReference<?> rootType)
  fullName: com.fasterxml.jackson.databind.ObjectMapper.writerWithType(TypeReference<?> rootType)
  overload: com.fasterxml.jackson.databind.ObjectMapper.writerWithType*
  type: Method
  package: com.fasterxml.jackson.databind
  syntax:
    content: public ObjectWriter writerWithType(TypeReference<?> rootType)
    parameters:
    - id: rootType
      type: com.fasterxml.jackson.core.type.TypeReference<?>
    return:
      type: com.fasterxml.jackson.databind.ObjectWriter
- uid: com.fasterxml.jackson.databind.ObjectMapper.writerWithType(com.fasterxml.jackson.databind.JavaType)
  id: writerWithType(com.fasterxml.jackson.databind.JavaType)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ObjectMapper
  langs:
  - java
  name: writerWithType(JavaType rootType)
  nameWithType: ObjectMapper.writerWithType(JavaType rootType)
  fullName: com.fasterxml.jackson.databind.ObjectMapper.writerWithType(JavaType rootType)
  overload: com.fasterxml.jackson.databind.ObjectMapper.writerWithType*
  type: Method
  package: com.fasterxml.jackson.databind
  syntax:
    content: public ObjectWriter writerWithType(JavaType rootType)
    parameters:
    - id: rootType
      type: com.fasterxml.jackson.databind.JavaType
    return:
      type: com.fasterxml.jackson.databind.ObjectWriter
- uid: com.fasterxml.jackson.databind.ObjectMapper.writerWithType(java.lang.Class<?>)
  id: writerWithType(java.lang.Class<?>)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ObjectMapper
  langs:
  - java
  name: writerWithType(Class<?> rootType)
  nameWithType: ObjectMapper.writerWithType(Class<?> rootType)
  fullName: com.fasterxml.jackson.databind.ObjectMapper.writerWithType(Class<?> rootType)
  overload: com.fasterxml.jackson.databind.ObjectMapper.writerWithType*
  type: Method
  package: com.fasterxml.jackson.databind
  syntax:
    content: public ObjectWriter writerWithType(Class<?> rootType)
    parameters:
    - id: rootType
      type: java.lang.Class<?>
    return:
      type: com.fasterxml.jackson.databind.ObjectWriter
- uid: com.fasterxml.jackson.databind.ObjectMapper.writerWithView(java.lang.Class<?>)
  id: writerWithView(java.lang.Class<?>)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ObjectMapper
  langs:
  - java
  name: writerWithView(Class<?> serializationView)
  nameWithType: ObjectMapper.writerWithView(Class<?> serializationView)
  fullName: com.fasterxml.jackson.databind.ObjectMapper.writerWithView(Class<?> serializationView)
  overload: com.fasterxml.jackson.databind.ObjectMapper.writerWithView*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: Factory method for constructing <xref uid="com.fasterxml.jackson.databind.ObjectWriter" data-throw-if-not-resolved="false">ObjectWriter</xref> that will serialize objects using specified JSON View (filter).
  syntax:
    content: public ObjectWriter writerWithView(Class<?> serializationView)
    parameters:
    - id: serializationView
      type: java.lang.Class<?>
    return:
      type: com.fasterxml.jackson.databind.ObjectWriter
references:
- uid: com.fasterxml.jackson.databind.ObjectMapper.ObjectMapper*
  name: ObjectMapper
  nameWithType: ObjectMapper.ObjectMapper
  fullName: com.fasterxml.jackson.databind.ObjectMapper.ObjectMapper
  package: com.fasterxml.jackson.databind
- uid: com.fasterxml.jackson.core.JsonFactory
  name: JsonFactory
  nameWithType: JsonFactory
  fullName: com.fasterxml.jackson.core.JsonFactory
- uid: com.fasterxml.jackson.databind.ser.DefaultSerializerProvider
  name: DefaultSerializerProvider
  nameWithType: DefaultSerializerProvider
  fullName: com.fasterxml.jackson.databind.ser.DefaultSerializerProvider
- uid: com.fasterxml.jackson.databind.deser.DefaultDeserializationContext
  name: DefaultDeserializationContext
  nameWithType: DefaultDeserializationContext
  fullName: com.fasterxml.jackson.databind.deser.DefaultDeserializationContext
- uid: com.fasterxml.jackson.databind.introspect.ClassIntrospector
  name: ClassIntrospector
  nameWithType: ClassIntrospector
  fullName: com.fasterxml.jackson.databind.introspect.ClassIntrospector
- uid: com.fasterxml.jackson.databind.ObjectMapper.defaultClassIntrospector*
  name: defaultClassIntrospector
  nameWithType: ObjectMapper.defaultClassIntrospector
  fullName: com.fasterxml.jackson.databind.ObjectMapper.defaultClassIntrospector
  package: com.fasterxml.jackson.databind
- uid: com.fasterxml.jackson.databind.ObjectMapper.copy*
  name: copy
  nameWithType: ObjectMapper.copy
  fullName: com.fasterxml.jackson.databind.ObjectMapper.copy
  package: com.fasterxml.jackson.databind
- uid: java.lang.Class<?>
  spec.java:
  - uid: java.lang.Class
    name: Class
    fullName: java.lang.Class
  - name: <
    fullName: <
  - uid: '?'
    name: '?'
    fullName: '?'
  - name: '>'
    fullName: '>'
- uid: com.fasterxml.jackson.databind.ObjectMapper._checkInvalidCopy*
  name: _checkInvalidCopy
  nameWithType: ObjectMapper._checkInvalidCopy
  fullName: com.fasterxml.jackson.databind.ObjectMapper._checkInvalidCopy
  package: com.fasterxml.jackson.databind
- uid: com.fasterxml.jackson.databind.DeserializationConfig
  name: DeserializationConfig
  nameWithType: DeserializationConfig
  fullName: com.fasterxml.jackson.databind.DeserializationConfig
- uid: com.fasterxml.jackson.databind.ObjectReader
  name: ObjectReader
  nameWithType: ObjectReader
  fullName: com.fasterxml.jackson.databind.ObjectReader
- uid: com.fasterxml.jackson.databind.ObjectMapper._newReader*
  name: _newReader
  nameWithType: ObjectMapper._newReader
  fullName: com.fasterxml.jackson.databind.ObjectMapper._newReader
  package: com.fasterxml.jackson.databind
- uid: com.fasterxml.jackson.databind.JavaType
  name: JavaType
  nameWithType: JavaType
  fullName: com.fasterxml.jackson.databind.JavaType
- uid: java.lang.Object
  spec.java:
  - uid: java.lang.Object
    name: Object
    fullName: java.lang.Object
- uid: com.fasterxml.jackson.core.FormatSchema
  name: FormatSchema
  nameWithType: FormatSchema
  fullName: com.fasterxml.jackson.core.FormatSchema
- uid: com.fasterxml.jackson.databind.InjectableValues
  name: InjectableValues
  nameWithType: InjectableValues
  fullName: com.fasterxml.jackson.databind.InjectableValues
- uid: com.fasterxml.jackson.databind.SerializationConfig
  name: SerializationConfig
  nameWithType: SerializationConfig
  fullName: com.fasterxml.jackson.databind.SerializationConfig
- uid: com.fasterxml.jackson.databind.ObjectWriter
  name: ObjectWriter
  nameWithType: ObjectWriter
  fullName: com.fasterxml.jackson.databind.ObjectWriter
- uid: com.fasterxml.jackson.databind.ObjectMapper._newWriter*
  name: _newWriter
  nameWithType: ObjectMapper._newWriter
  fullName: com.fasterxml.jackson.databind.ObjectMapper._newWriter
  package: com.fasterxml.jackson.databind
- uid: com.fasterxml.jackson.core.PrettyPrinter
  name: PrettyPrinter
  nameWithType: PrettyPrinter
  fullName: com.fasterxml.jackson.core.PrettyPrinter
- uid: com.fasterxml.jackson.core.Version
  name: Version
  nameWithType: Version
  fullName: com.fasterxml.jackson.core.Version
- uid: com.fasterxml.jackson.databind.ObjectMapper.version*
  name: version
  nameWithType: ObjectMapper.version
  fullName: com.fasterxml.jackson.databind.ObjectMapper.version
  package: com.fasterxml.jackson.databind
- uid: com.fasterxml.jackson.databind.Module
  name: Module
  nameWithType: Module
  fullName: com.fasterxml.jackson.databind.Module
- uid: com.fasterxml.jackson.databind.ObjectMapper.registerModule*
  name: registerModule
  nameWithType: ObjectMapper.registerModule
  fullName: com.fasterxml.jackson.databind.ObjectMapper.registerModule
  package: com.fasterxml.jackson.databind
- uid: com.fasterxml.jackson.databind.Module[]
  spec.java:
  - uid: com.fasterxml.jackson.databind.Module
    name: Module
    fullName: com.fasterxml.jackson.databind.Module
  - name: '[]'
    fullName: '[]'
- uid: com.fasterxml.jackson.databind.ObjectMapper.registerModules*
  name: registerModules
  nameWithType: ObjectMapper.registerModules
  fullName: com.fasterxml.jackson.databind.ObjectMapper.registerModules
  package: com.fasterxml.jackson.databind
- uid: java.lang.Iterable<? extends com.fasterxml.jackson.databind.Module>
  spec.java:
  - uid: java.lang.Iterable
    name: Iterable
    fullName: java.lang.Iterable
  - name: <
    fullName: <
  - uid: '? extends com.fasterxml.jackson.databind.Module'
    name: Module
    fullName: '? extends com.fasterxml.jackson.databind.Module'
  - name: '>'
    fullName: '>'
- uid: java.util.Set<java.lang.Object>
  spec.java:
  - uid: java.util.Set
    name: Set
    fullName: java.util.Set
  - name: <
    fullName: <
  - uid: java.lang.Object
    name: Object
    fullName: java.lang.Object
  - name: '>'
    fullName: '>'
- uid: com.fasterxml.jackson.databind.ObjectMapper.getRegisteredModuleIds*
  name: getRegisteredModuleIds
  nameWithType: ObjectMapper.getRegisteredModuleIds
  fullName: com.fasterxml.jackson.databind.ObjectMapper.getRegisteredModuleIds
  package: com.fasterxml.jackson.databind
- uid: java.util.List<com.fasterxml.jackson.databind.Module>
  spec.java:
  - uid: java.util.List
    name: List
    fullName: java.util.List
  - name: <
    fullName: <
  - uid: com.fasterxml.jackson.databind.Module
    name: Module
    fullName: com.fasterxml.jackson.databind.Module
  - name: '>'
    fullName: '>'
- uid: com.fasterxml.jackson.databind.ObjectMapper.findModules*
  name: findModules
  nameWithType: ObjectMapper.findModules
  fullName: com.fasterxml.jackson.databind.ObjectMapper.findModules
  package: com.fasterxml.jackson.databind
- uid: java.lang.ClassLoader
  spec.java:
  - uid: java.lang.ClassLoader
    name: ClassLoader
    fullName: java.lang.ClassLoader
- uid: com.fasterxml.jackson.databind.ObjectMapper.findAndRegisterModules*
  name: findAndRegisterModules
  nameWithType: ObjectMapper.findAndRegisterModules
  fullName: com.fasterxml.jackson.databind.ObjectMapper.findAndRegisterModules
  package: com.fasterxml.jackson.databind
- uid: java.io.IOException
  spec.java:
  - uid: java.io.IOException
    name: IOException
    fullName: java.io.IOException
- uid: java.io.OutputStream
  spec.java:
  - uid: java.io.OutputStream
    name: OutputStream
    fullName: java.io.OutputStream
- uid: com.fasterxml.jackson.core.JsonGenerator
  name: JsonGenerator
  nameWithType: JsonGenerator
  fullName: com.fasterxml.jackson.core.JsonGenerator
- uid: com.fasterxml.jackson.databind.ObjectMapper.createGenerator*
  name: createGenerator
  nameWithType: ObjectMapper.createGenerator
  fullName: com.fasterxml.jackson.databind.ObjectMapper.createGenerator
  package: com.fasterxml.jackson.databind
- uid: com.fasterxml.jackson.core.JsonEncoding
  name: JsonEncoding
  nameWithType: JsonEncoding
  fullName: com.fasterxml.jackson.core.JsonEncoding
- uid: java.io.Writer
  spec.java:
  - uid: java.io.Writer
    name: Writer
    fullName: java.io.Writer
- uid: java.io.File
  spec.java:
  - uid: java.io.File
    name: File
    fullName: java.io.File
- uid: java.io.DataOutput
  spec.java:
  - uid: java.io.DataOutput
    name: DataOutput
    fullName: java.io.DataOutput
- uid: com.fasterxml.jackson.core.JsonParser
  name: JsonParser
  nameWithType: JsonParser
  fullName: com.fasterxml.jackson.core.JsonParser
- uid: com.fasterxml.jackson.databind.ObjectMapper.createParser*
  name: createParser
  nameWithType: ObjectMapper.createParser
  fullName: com.fasterxml.jackson.databind.ObjectMapper.createParser
  package: com.fasterxml.jackson.databind
- uid: java.net.URL
  spec.java:
  - uid: java.net.URL
    name: URL
    fullName: java.net.URL
- uid: java.io.InputStream
  spec.java:
  - uid: java.io.InputStream
    name: InputStream
    fullName: java.io.InputStream
- uid: java.io.Reader
  spec.java:
  - uid: java.io.Reader
    name: Reader
    fullName: java.io.Reader
- uid: byte[]
  spec.java:
  - uid: byte
    name: byte
    fullName: byte
  - name: '[]'
    fullName: '[]'
- uid: int
  spec.java:
  - uid: int
    name: int
    fullName: int
- uid: java.lang.String
  spec.java:
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
- uid: char[]
  spec.java:
  - uid: char
    name: char
    fullName: char
  - name: '[]'
    fullName: '[]'
- uid: java.io.DataInput
  spec.java:
  - uid: java.io.DataInput
    name: DataInput
    fullName: java.io.DataInput
- uid: com.fasterxml.jackson.databind.ObjectMapper.createNonBlockingByteArrayParser*
  name: createNonBlockingByteArrayParser
  nameWithType: ObjectMapper.createNonBlockingByteArrayParser
  fullName: com.fasterxml.jackson.databind.ObjectMapper.createNonBlockingByteArrayParser
  package: com.fasterxml.jackson.databind
- uid: com.fasterxml.jackson.databind.ObjectMapper.getSerializationConfig*
  name: getSerializationConfig
  nameWithType: ObjectMapper.getSerializationConfig
  fullName: com.fasterxml.jackson.databind.ObjectMapper.getSerializationConfig
  package: com.fasterxml.jackson.databind
- uid: com.fasterxml.jackson.databind.ObjectMapper.getDeserializationConfig*
  name: getDeserializationConfig
  nameWithType: ObjectMapper.getDeserializationConfig
  fullName: com.fasterxml.jackson.databind.ObjectMapper.getDeserializationConfig
  package: com.fasterxml.jackson.databind
- uid: com.fasterxml.jackson.databind.DeserializationContext
  name: DeserializationContext
  nameWithType: DeserializationContext
  fullName: com.fasterxml.jackson.databind.DeserializationContext
- uid: com.fasterxml.jackson.databind.ObjectMapper.getDeserializationContext*
  name: getDeserializationContext
  nameWithType: ObjectMapper.getDeserializationContext
  fullName: com.fasterxml.jackson.databind.ObjectMapper.getDeserializationContext
  package: com.fasterxml.jackson.databind
- uid: com.fasterxml.jackson.databind.ser.SerializerFactory
  name: SerializerFactory
  nameWithType: SerializerFactory
  fullName: com.fasterxml.jackson.databind.ser.SerializerFactory
- uid: com.fasterxml.jackson.databind.ObjectMapper.setSerializerFactory*
  name: setSerializerFactory
  nameWithType: ObjectMapper.setSerializerFactory
  fullName: com.fasterxml.jackson.databind.ObjectMapper.setSerializerFactory
  package: com.fasterxml.jackson.databind
- uid: com.fasterxml.jackson.databind.ObjectMapper.getSerializerFactory*
  name: getSerializerFactory
  nameWithType: ObjectMapper.getSerializerFactory
  fullName: com.fasterxml.jackson.databind.ObjectMapper.getSerializerFactory
  package: com.fasterxml.jackson.databind
- uid: com.fasterxml.jackson.databind.ObjectMapper.setSerializerProvider*
  name: setSerializerProvider
  nameWithType: ObjectMapper.setSerializerProvider
  fullName: com.fasterxml.jackson.databind.ObjectMapper.setSerializerProvider
  package: com.fasterxml.jackson.databind
- uid: com.fasterxml.jackson.databind.SerializerProvider
  name: SerializerProvider
  nameWithType: SerializerProvider
  fullName: com.fasterxml.jackson.databind.SerializerProvider
- uid: com.fasterxml.jackson.databind.ObjectMapper.getSerializerProvider*
  name: getSerializerProvider
  nameWithType: ObjectMapper.getSerializerProvider
  fullName: com.fasterxml.jackson.databind.ObjectMapper.getSerializerProvider
  package: com.fasterxml.jackson.databind
- uid: com.fasterxml.jackson.databind.ObjectMapper.getSerializerProviderInstance*
  name: getSerializerProviderInstance
  nameWithType: ObjectMapper.getSerializerProviderInstance
  fullName: com.fasterxml.jackson.databind.ObjectMapper.getSerializerProviderInstance
  package: com.fasterxml.jackson.databind
- uid: java.util.Map<java.lang.Class<?>,java.lang.Class<?>>
  spec.java:
  - uid: java.util.Map
    name: Map
    fullName: java.util.Map
  - name: <
    fullName: <
  - uid: java.lang.Class
    name: Class
    fullName: java.lang.Class
  - name: <
    fullName: <
  - uid: '?'
    name: '?'
    fullName: '?'
  - name: '>'
    fullName: '>'
  - name: ','
    fullName: ','
  - uid: java.lang.Class
    name: Class
    fullName: java.lang.Class
  - name: <
    fullName: <
  - uid: '?'
    name: '?'
    fullName: '?'
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
- uid: com.fasterxml.jackson.databind.ObjectMapper.setMixIns*
  name: setMixIns
  nameWithType: ObjectMapper.setMixIns
  fullName: com.fasterxml.jackson.databind.ObjectMapper.setMixIns
  package: com.fasterxml.jackson.databind
- uid: com.fasterxml.jackson.databind.ObjectMapper.addMixIn*
  name: addMixIn
  nameWithType: ObjectMapper.addMixIn
  fullName: com.fasterxml.jackson.databind.ObjectMapper.addMixIn
  package: com.fasterxml.jackson.databind
- uid: com.fasterxml.jackson.databind.introspect.ClassIntrospector.MixInResolver
  name: ClassIntrospector.MixInResolver
  nameWithType: ClassIntrospector.MixInResolver
  fullName: com.fasterxml.jackson.databind.introspect.ClassIntrospector.MixInResolver
- uid: com.fasterxml.jackson.databind.ObjectMapper.setMixInResolver*
  name: setMixInResolver
  nameWithType: ObjectMapper.setMixInResolver
  fullName: com.fasterxml.jackson.databind.ObjectMapper.setMixInResolver
  package: com.fasterxml.jackson.databind
- uid: com.fasterxml.jackson.databind.ObjectMapper.findMixInClassFor*
  name: findMixInClassFor
  nameWithType: ObjectMapper.findMixInClassFor
  fullName: com.fasterxml.jackson.databind.ObjectMapper.findMixInClassFor
  package: com.fasterxml.jackson.databind
- uid: com.fasterxml.jackson.databind.ObjectMapper.mixInCount*
  name: mixInCount
  nameWithType: ObjectMapper.mixInCount
  fullName: com.fasterxml.jackson.databind.ObjectMapper.mixInCount
  package: com.fasterxml.jackson.databind
- uid: com.fasterxml.jackson.databind.ObjectMapper.setMixInAnnotations*
  name: setMixInAnnotations
  nameWithType: ObjectMapper.setMixInAnnotations
  fullName: com.fasterxml.jackson.databind.ObjectMapper.setMixInAnnotations
  package: com.fasterxml.jackson.databind
- uid: com.fasterxml.jackson.databind.ObjectMapper.addMixInAnnotations*
  name: addMixInAnnotations
  nameWithType: ObjectMapper.addMixInAnnotations
  fullName: com.fasterxml.jackson.databind.ObjectMapper.addMixInAnnotations
  package: com.fasterxml.jackson.databind
- uid: com.fasterxml.jackson.databind.introspect.VisibilityChecker<?>
  spec.java:
  - uid: com.fasterxml.jackson.databind.introspect.VisibilityChecker
    name: VisibilityChecker
    fullName: com.fasterxml.jackson.databind.introspect.VisibilityChecker
  - name: <
    fullName: <
  - uid: '?'
    name: '?'
    fullName: '?'
  - name: '>'
    fullName: '>'
- uid: com.fasterxml.jackson.databind.ObjectMapper.getVisibilityChecker*
  name: getVisibilityChecker
  nameWithType: ObjectMapper.getVisibilityChecker
  fullName: com.fasterxml.jackson.databind.ObjectMapper.getVisibilityChecker
  package: com.fasterxml.jackson.databind
- uid: com.fasterxml.jackson.databind.ObjectMapper.setVisibility*
  name: setVisibility
  nameWithType: ObjectMapper.setVisibility
  fullName: com.fasterxml.jackson.databind.ObjectMapper.setVisibility
  package: com.fasterxml.jackson.databind
- uid: com.fasterxml.jackson.annotation.PropertyAccessor
  name: PropertyAccessor
  nameWithType: PropertyAccessor
  fullName: com.fasterxml.jackson.annotation.PropertyAccessor
- uid: com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility
  name: JsonAutoDetect.Visibility
  nameWithType: JsonAutoDetect.Visibility
  fullName: com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility
- uid: com.fasterxml.jackson.databind.jsontype.SubtypeResolver
  name: SubtypeResolver
  nameWithType: SubtypeResolver
  fullName: com.fasterxml.jackson.databind.jsontype.SubtypeResolver
- uid: com.fasterxml.jackson.databind.ObjectMapper.getSubtypeResolver*
  name: getSubtypeResolver
  nameWithType: ObjectMapper.getSubtypeResolver
  fullName: com.fasterxml.jackson.databind.ObjectMapper.getSubtypeResolver
  package: com.fasterxml.jackson.databind
- uid: com.fasterxml.jackson.databind.ObjectMapper.setSubtypeResolver*
  name: setSubtypeResolver
  nameWithType: ObjectMapper.setSubtypeResolver
  fullName: com.fasterxml.jackson.databind.ObjectMapper.setSubtypeResolver
  package: com.fasterxml.jackson.databind
- uid: com.fasterxml.jackson.databind.AnnotationIntrospector
  name: AnnotationIntrospector
  nameWithType: AnnotationIntrospector
  fullName: com.fasterxml.jackson.databind.AnnotationIntrospector
- uid: com.fasterxml.jackson.databind.ObjectMapper.setAnnotationIntrospector*
  name: setAnnotationIntrospector
  nameWithType: ObjectMapper.setAnnotationIntrospector
  fullName: com.fasterxml.jackson.databind.ObjectMapper.setAnnotationIntrospector
  package: com.fasterxml.jackson.databind
- uid: com.fasterxml.jackson.databind.ObjectMapper.setAnnotationIntrospectors*
  name: setAnnotationIntrospectors
  nameWithType: ObjectMapper.setAnnotationIntrospectors
  fullName: com.fasterxml.jackson.databind.ObjectMapper.setAnnotationIntrospectors
  package: com.fasterxml.jackson.databind
- uid: com.fasterxml.jackson.databind.PropertyNamingStrategy
  name: PropertyNamingStrategy
  nameWithType: PropertyNamingStrategy
  fullName: com.fasterxml.jackson.databind.PropertyNamingStrategy
- uid: com.fasterxml.jackson.databind.ObjectMapper.setPropertyNamingStrategy*
  name: setPropertyNamingStrategy
  nameWithType: ObjectMapper.setPropertyNamingStrategy
  fullName: com.fasterxml.jackson.databind.ObjectMapper.setPropertyNamingStrategy
  package: com.fasterxml.jackson.databind
- uid: com.fasterxml.jackson.databind.ObjectMapper.getPropertyNamingStrategy*
  name: getPropertyNamingStrategy
  nameWithType: ObjectMapper.getPropertyNamingStrategy
  fullName: com.fasterxml.jackson.databind.ObjectMapper.getPropertyNamingStrategy
  package: com.fasterxml.jackson.databind
- uid: com.fasterxml.jackson.databind.ObjectMapper.setDefaultPrettyPrinter*
  name: setDefaultPrettyPrinter
  nameWithType: ObjectMapper.setDefaultPrettyPrinter
  fullName: com.fasterxml.jackson.databind.ObjectMapper.setDefaultPrettyPrinter
  package: com.fasterxml.jackson.databind
- uid: com.fasterxml.jackson.databind.ObjectMapper.setVisibilityChecker*
  name: setVisibilityChecker
  nameWithType: ObjectMapper.setVisibilityChecker
  fullName: com.fasterxml.jackson.databind.ObjectMapper.setVisibilityChecker
  package: com.fasterxml.jackson.databind
- uid: com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator
  name: PolymorphicTypeValidator
  nameWithType: PolymorphicTypeValidator
  fullName: com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator
- uid: com.fasterxml.jackson.databind.ObjectMapper.setPolymorphicTypeValidator*
  name: setPolymorphicTypeValidator
  nameWithType: ObjectMapper.setPolymorphicTypeValidator
  fullName: com.fasterxml.jackson.databind.ObjectMapper.setPolymorphicTypeValidator
  package: com.fasterxml.jackson.databind
- uid: com.fasterxml.jackson.databind.ObjectMapper.getPolymorphicTypeValidator*
  name: getPolymorphicTypeValidator
  nameWithType: ObjectMapper.getPolymorphicTypeValidator
  fullName: com.fasterxml.jackson.databind.ObjectMapper.getPolymorphicTypeValidator
  package: com.fasterxml.jackson.databind
- uid: com.fasterxml.jackson.annotation.JsonInclude.Include
  name: JsonInclude.Include
  nameWithType: JsonInclude.Include
  fullName: com.fasterxml.jackson.annotation.JsonInclude.Include
- uid: com.fasterxml.jackson.databind.ObjectMapper.setSerializationInclusion*
  name: setSerializationInclusion
  nameWithType: ObjectMapper.setSerializationInclusion
  fullName: com.fasterxml.jackson.databind.ObjectMapper.setSerializationInclusion
  package: com.fasterxml.jackson.databind
- uid: com.fasterxml.jackson.annotation.JsonInclude.Value
  name: JsonInclude.Value
  nameWithType: JsonInclude.Value
  fullName: com.fasterxml.jackson.annotation.JsonInclude.Value
- uid: com.fasterxml.jackson.databind.ObjectMapper.setPropertyInclusion*
  name: setPropertyInclusion
  nameWithType: ObjectMapper.setPropertyInclusion
  fullName: com.fasterxml.jackson.databind.ObjectMapper.setPropertyInclusion
  package: com.fasterxml.jackson.databind
- uid: com.fasterxml.jackson.databind.ObjectMapper.setDefaultPropertyInclusion*
  name: setDefaultPropertyInclusion
  nameWithType: ObjectMapper.setDefaultPropertyInclusion
  fullName: com.fasterxml.jackson.databind.ObjectMapper.setDefaultPropertyInclusion
  package: com.fasterxml.jackson.databind
- uid: com.fasterxml.jackson.annotation.JsonSetter.Value
  name: JsonSetter.Value
  nameWithType: JsonSetter.Value
  fullName: com.fasterxml.jackson.annotation.JsonSetter.Value
- uid: com.fasterxml.jackson.databind.ObjectMapper.setDefaultSetterInfo*
  name: setDefaultSetterInfo
  nameWithType: ObjectMapper.setDefaultSetterInfo
  fullName: com.fasterxml.jackson.databind.ObjectMapper.setDefaultSetterInfo
  package: com.fasterxml.jackson.databind
- uid: com.fasterxml.jackson.annotation.JsonAutoDetect.Value
  name: JsonAutoDetect.Value
  nameWithType: JsonAutoDetect.Value
  fullName: com.fasterxml.jackson.annotation.JsonAutoDetect.Value
- uid: com.fasterxml.jackson.databind.ObjectMapper.setDefaultVisibility*
  name: setDefaultVisibility
  nameWithType: ObjectMapper.setDefaultVisibility
  fullName: com.fasterxml.jackson.databind.ObjectMapper.setDefaultVisibility
  package: com.fasterxml.jackson.databind
- uid: java.lang.Boolean
  spec.java:
  - uid: java.lang.Boolean
    name: Boolean
    fullName: java.lang.Boolean
- uid: com.fasterxml.jackson.databind.ObjectMapper.setDefaultMergeable*
  name: setDefaultMergeable
  nameWithType: ObjectMapper.setDefaultMergeable
  fullName: com.fasterxml.jackson.databind.ObjectMapper.setDefaultMergeable
  package: com.fasterxml.jackson.databind
- uid: com.fasterxml.jackson.databind.ObjectMapper.setDefaultLeniency*
  name: setDefaultLeniency
  nameWithType: ObjectMapper.setDefaultLeniency
  fullName: com.fasterxml.jackson.databind.ObjectMapper.setDefaultLeniency
  package: com.fasterxml.jackson.databind
- uid: java.lang.Class<?>[]
  spec.java:
  - uid: java.lang.Class
    name: Class
    fullName: java.lang.Class
  - name: <
    fullName: <
  - uid: '?'
    name: '?'
    fullName: '?'
  - name: '>'
    fullName: '>'
  - name: '[]'
    fullName: '[]'
- uid: com.fasterxml.jackson.databind.ObjectMapper.registerSubtypes*
  name: registerSubtypes
  nameWithType: ObjectMapper.registerSubtypes
  fullName: com.fasterxml.jackson.databind.ObjectMapper.registerSubtypes
  package: com.fasterxml.jackson.databind
- uid: com.fasterxml.jackson.databind.jsontype.NamedType[]
  spec.java:
  - uid: com.fasterxml.jackson.databind.jsontype.NamedType
    name: NamedType
    fullName: com.fasterxml.jackson.databind.jsontype.NamedType
  - name: '[]'
    fullName: '[]'
- uid: java.util.Collection<java.lang.Class<?>>
  spec.java:
  - uid: java.util.Collection
    name: Collection
    fullName: java.util.Collection
  - name: <
    fullName: <
  - uid: java.lang.Class
    name: Class
    fullName: java.lang.Class
  - name: <
    fullName: <
  - uid: '?'
    name: '?'
    fullName: '?'
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
- uid: com.fasterxml.jackson.databind.ObjectMapper.activateDefaultTyping*
  name: activateDefaultTyping
  nameWithType: ObjectMapper.activateDefaultTyping
  fullName: com.fasterxml.jackson.databind.ObjectMapper.activateDefaultTyping
  package: com.fasterxml.jackson.databind
- uid: com.fasterxml.jackson.databind.ObjectMapper.DefaultTyping
  name: ObjectMapper.DefaultTyping
  nameWithType: ObjectMapper.DefaultTyping
  fullName: com.fasterxml.jackson.databind.ObjectMapper.DefaultTyping
- uid: com.fasterxml.jackson.annotation.JsonTypeInfo.As
  name: JsonTypeInfo.As
  nameWithType: JsonTypeInfo.As
  fullName: com.fasterxml.jackson.annotation.JsonTypeInfo.As
- uid: com.fasterxml.jackson.databind.ObjectMapper.activateDefaultTypingAsProperty*
  name: activateDefaultTypingAsProperty
  nameWithType: ObjectMapper.activateDefaultTypingAsProperty
  fullName: com.fasterxml.jackson.databind.ObjectMapper.activateDefaultTypingAsProperty
  package: com.fasterxml.jackson.databind
- uid: com.fasterxml.jackson.databind.ObjectMapper.deactivateDefaultTyping*
  name: deactivateDefaultTyping
  nameWithType: ObjectMapper.deactivateDefaultTyping
  fullName: com.fasterxml.jackson.databind.ObjectMapper.deactivateDefaultTyping
  package: com.fasterxml.jackson.databind
- uid: com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder<?>
  spec.java:
  - uid: com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder
    name: TypeResolverBuilder
    fullName: com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder
  - name: <
    fullName: <
  - uid: '?'
    name: '?'
    fullName: '?'
  - name: '>'
    fullName: '>'
- uid: com.fasterxml.jackson.databind.ObjectMapper.setDefaultTyping*
  name: setDefaultTyping
  nameWithType: ObjectMapper.setDefaultTyping
  fullName: com.fasterxml.jackson.databind.ObjectMapper.setDefaultTyping
  package: com.fasterxml.jackson.databind
- uid: com.fasterxml.jackson.databind.ObjectMapper.enableDefaultTyping*
  name: enableDefaultTyping
  nameWithType: ObjectMapper.enableDefaultTyping
  fullName: com.fasterxml.jackson.databind.ObjectMapper.enableDefaultTyping
  package: com.fasterxml.jackson.databind
- uid: com.fasterxml.jackson.databind.ObjectMapper.enableDefaultTypingAsProperty*
  name: enableDefaultTypingAsProperty
  nameWithType: ObjectMapper.enableDefaultTypingAsProperty
  fullName: com.fasterxml.jackson.databind.ObjectMapper.enableDefaultTypingAsProperty
  package: com.fasterxml.jackson.databind
- uid: com.fasterxml.jackson.databind.ObjectMapper.disableDefaultTyping*
  name: disableDefaultTyping
  nameWithType: ObjectMapper.disableDefaultTyping
  fullName: com.fasterxml.jackson.databind.ObjectMapper.disableDefaultTyping
  package: com.fasterxml.jackson.databind
- uid: com.fasterxml.jackson.databind.cfg.MutableConfigOverride
  name: MutableConfigOverride
  nameWithType: MutableConfigOverride
  fullName: com.fasterxml.jackson.databind.cfg.MutableConfigOverride
- uid: com.fasterxml.jackson.databind.ObjectMapper.configOverride*
  name: configOverride
  nameWithType: ObjectMapper.configOverride
  fullName: com.fasterxml.jackson.databind.ObjectMapper.configOverride
  package: com.fasterxml.jackson.databind
- uid: com.fasterxml.jackson.databind.type.TypeFactory
  name: TypeFactory
  nameWithType: TypeFactory
  fullName: com.fasterxml.jackson.databind.type.TypeFactory
- uid: com.fasterxml.jackson.databind.ObjectMapper.getTypeFactory*
  name: getTypeFactory
  nameWithType: ObjectMapper.getTypeFactory
  fullName: com.fasterxml.jackson.databind.ObjectMapper.getTypeFactory
  package: com.fasterxml.jackson.databind
- uid: com.fasterxml.jackson.databind.ObjectMapper.setTypeFactory*
  name: setTypeFactory
  nameWithType: ObjectMapper.setTypeFactory
  fullName: com.fasterxml.jackson.databind.ObjectMapper.setTypeFactory
  package: com.fasterxml.jackson.databind
- uid: java.lang.reflect.Type
  spec.java:
  - uid: java.lang.reflect.Type
    name: Type
    fullName: java.lang.reflect.Type
- uid: com.fasterxml.jackson.databind.ObjectMapper.constructType*
  name: constructType
  nameWithType: ObjectMapper.constructType
  fullName: com.fasterxml.jackson.databind.ObjectMapper.constructType
  package: com.fasterxml.jackson.databind
- uid: com.fasterxml.jackson.databind.node.JsonNodeFactory
  name: JsonNodeFactory
  nameWithType: JsonNodeFactory
  fullName: com.fasterxml.jackson.databind.node.JsonNodeFactory
- uid: com.fasterxml.jackson.databind.ObjectMapper.getNodeFactory*
  name: getNodeFactory
  nameWithType: ObjectMapper.getNodeFactory
  fullName: com.fasterxml.jackson.databind.ObjectMapper.getNodeFactory
  package: com.fasterxml.jackson.databind
- uid: com.fasterxml.jackson.databind.ObjectMapper.setNodeFactory*
  name: setNodeFactory
  nameWithType: ObjectMapper.setNodeFactory
  fullName: com.fasterxml.jackson.databind.ObjectMapper.setNodeFactory
  package: com.fasterxml.jackson.databind
- uid: com.fasterxml.jackson.databind.deser.DeserializationProblemHandler
  name: DeserializationProblemHandler
  nameWithType: DeserializationProblemHandler
  fullName: com.fasterxml.jackson.databind.deser.DeserializationProblemHandler
- uid: com.fasterxml.jackson.databind.ObjectMapper.addHandler*
  name: addHandler
  nameWithType: ObjectMapper.addHandler
  fullName: com.fasterxml.jackson.databind.ObjectMapper.addHandler
  package: com.fasterxml.jackson.databind
- uid: com.fasterxml.jackson.databind.ObjectMapper.clearProblemHandlers*
  name: clearProblemHandlers
  nameWithType: ObjectMapper.clearProblemHandlers
  fullName: com.fasterxml.jackson.databind.ObjectMapper.clearProblemHandlers
  package: com.fasterxml.jackson.databind
- uid: com.fasterxml.jackson.databind.ObjectMapper.setConfig*
  name: setConfig
  nameWithType: ObjectMapper.setConfig
  fullName: com.fasterxml.jackson.databind.ObjectMapper.setConfig
  package: com.fasterxml.jackson.databind
- uid: com.fasterxml.jackson.databind.ser.FilterProvider
  name: FilterProvider
  nameWithType: FilterProvider
  fullName: com.fasterxml.jackson.databind.ser.FilterProvider
- uid: com.fasterxml.jackson.databind.ObjectMapper.setFilters*
  name: setFilters
  nameWithType: ObjectMapper.setFilters
  fullName: com.fasterxml.jackson.databind.ObjectMapper.setFilters
  package: com.fasterxml.jackson.databind
- uid: com.fasterxml.jackson.databind.ObjectMapper.setFilterProvider*
  name: setFilterProvider
  nameWithType: ObjectMapper.setFilterProvider
  fullName: com.fasterxml.jackson.databind.ObjectMapper.setFilterProvider
  package: com.fasterxml.jackson.databind
- uid: com.fasterxml.jackson.core.Base64Variant
  name: Base64Variant
  nameWithType: Base64Variant
  fullName: com.fasterxml.jackson.core.Base64Variant
- uid: com.fasterxml.jackson.databind.ObjectMapper.setBase64Variant*
  name: setBase64Variant
  nameWithType: ObjectMapper.setBase64Variant
  fullName: com.fasterxml.jackson.databind.ObjectMapper.setBase64Variant
  package: com.fasterxml.jackson.databind
- uid: com.fasterxml.jackson.databind.ObjectMapper.tokenStreamFactory*
  name: tokenStreamFactory
  nameWithType: ObjectMapper.tokenStreamFactory
  fullName: com.fasterxml.jackson.databind.ObjectMapper.tokenStreamFactory
  package: com.fasterxml.jackson.databind
- uid: com.fasterxml.jackson.databind.ObjectMapper.getFactory*
  name: getFactory
  nameWithType: ObjectMapper.getFactory
  fullName: com.fasterxml.jackson.databind.ObjectMapper.getFactory
  package: com.fasterxml.jackson.databind
- uid: com.fasterxml.jackson.databind.ObjectMapper.getJsonFactory*
  name: getJsonFactory
  nameWithType: ObjectMapper.getJsonFactory
  fullName: com.fasterxml.jackson.databind.ObjectMapper.getJsonFactory
  package: com.fasterxml.jackson.databind
- uid: java.text.DateFormat
  spec.java:
  - uid: java.text.DateFormat
    name: DateFormat
    fullName: java.text.DateFormat
- uid: com.fasterxml.jackson.databind.ObjectMapper.setDateFormat*
  name: setDateFormat
  nameWithType: ObjectMapper.setDateFormat
  fullName: com.fasterxml.jackson.databind.ObjectMapper.setDateFormat
  package: com.fasterxml.jackson.databind
- uid: com.fasterxml.jackson.databind.ObjectMapper.getDateFormat*
  name: getDateFormat
  nameWithType: ObjectMapper.getDateFormat
  fullName: com.fasterxml.jackson.databind.ObjectMapper.getDateFormat
  package: com.fasterxml.jackson.databind
- uid: com.fasterxml.jackson.databind.cfg.HandlerInstantiator
  name: HandlerInstantiator
  nameWithType: HandlerInstantiator
  fullName: com.fasterxml.jackson.databind.cfg.HandlerInstantiator
- uid: com.fasterxml.jackson.databind.ObjectMapper.setHandlerInstantiator*
  name: setHandlerInstantiator
  nameWithType: ObjectMapper.setHandlerInstantiator
  fullName: com.fasterxml.jackson.databind.ObjectMapper.setHandlerInstantiator
  package: com.fasterxml.jackson.databind
- uid: com.fasterxml.jackson.databind.ObjectMapper.setInjectableValues*
  name: setInjectableValues
  nameWithType: ObjectMapper.setInjectableValues
  fullName: com.fasterxml.jackson.databind.ObjectMapper.setInjectableValues
  package: com.fasterxml.jackson.databind
- uid: com.fasterxml.jackson.databind.ObjectMapper.getInjectableValues*
  name: getInjectableValues
  nameWithType: ObjectMapper.getInjectableValues
  fullName: com.fasterxml.jackson.databind.ObjectMapper.getInjectableValues
  package: com.fasterxml.jackson.databind
- uid: java.util.Locale
  spec.java:
  - uid: java.util.Locale
    name: Locale
    fullName: java.util.Locale
- uid: com.fasterxml.jackson.databind.ObjectMapper.setLocale*
  name: setLocale
  nameWithType: ObjectMapper.setLocale
  fullName: com.fasterxml.jackson.databind.ObjectMapper.setLocale
  package: com.fasterxml.jackson.databind
- uid: java.util.TimeZone
  spec.java:
  - uid: java.util.TimeZone
    name: TimeZone
    fullName: java.util.TimeZone
- uid: com.fasterxml.jackson.databind.ObjectMapper.setTimeZone*
  name: setTimeZone
  nameWithType: ObjectMapper.setTimeZone
  fullName: com.fasterxml.jackson.databind.ObjectMapper.setTimeZone
  package: com.fasterxml.jackson.databind
- uid: com.fasterxml.jackson.databind.MapperFeature
  name: MapperFeature
  nameWithType: MapperFeature
  fullName: com.fasterxml.jackson.databind.MapperFeature
- uid: boolean
  spec.java:
  - uid: boolean
    name: boolean
    fullName: boolean
- uid: com.fasterxml.jackson.databind.ObjectMapper.isEnabled*
  name: isEnabled
  nameWithType: ObjectMapper.isEnabled
  fullName: com.fasterxml.jackson.databind.ObjectMapper.isEnabled
  package: com.fasterxml.jackson.databind
- uid: com.fasterxml.jackson.databind.ObjectMapper.configure*
  name: configure
  nameWithType: ObjectMapper.configure
  fullName: com.fasterxml.jackson.databind.ObjectMapper.configure
  package: com.fasterxml.jackson.databind
- uid: com.fasterxml.jackson.databind.MapperFeature[]
  spec.java:
  - uid: com.fasterxml.jackson.databind.MapperFeature
    name: MapperFeature
    fullName: com.fasterxml.jackson.databind.MapperFeature
  - name: '[]'
    fullName: '[]'
- uid: com.fasterxml.jackson.databind.ObjectMapper.enable*
  name: enable
  nameWithType: ObjectMapper.enable
  fullName: com.fasterxml.jackson.databind.ObjectMapper.enable
  package: com.fasterxml.jackson.databind
- uid: com.fasterxml.jackson.databind.ObjectMapper.disable*
  name: disable
  nameWithType: ObjectMapper.disable
  fullName: com.fasterxml.jackson.databind.ObjectMapper.disable
  package: com.fasterxml.jackson.databind
- uid: com.fasterxml.jackson.databind.SerializationFeature
  name: SerializationFeature
  nameWithType: SerializationFeature
  fullName: com.fasterxml.jackson.databind.SerializationFeature
- uid: com.fasterxml.jackson.databind.SerializationFeature[]
  spec.java:
  - uid: com.fasterxml.jackson.databind.SerializationFeature
    name: SerializationFeature
    fullName: com.fasterxml.jackson.databind.SerializationFeature
  - name: '[]'
    fullName: '[]'
- uid: com.fasterxml.jackson.databind.DeserializationFeature
  name: DeserializationFeature
  nameWithType: DeserializationFeature
  fullName: com.fasterxml.jackson.databind.DeserializationFeature
- uid: com.fasterxml.jackson.databind.DeserializationFeature[]
  spec.java:
  - uid: com.fasterxml.jackson.databind.DeserializationFeature
    name: DeserializationFeature
    fullName: com.fasterxml.jackson.databind.DeserializationFeature
  - name: '[]'
    fullName: '[]'
- uid: com.fasterxml.jackson.core.JsonParser.Feature
  name: JsonParser.Feature
  nameWithType: JsonParser.Feature
  fullName: com.fasterxml.jackson.core.JsonParser.Feature
- uid: com.fasterxml.jackson.core.JsonParser.Feature[]
  spec.java:
  - uid: com.fasterxml.jackson.core.JsonParser.Feature
    name: Feature
    fullName: com.fasterxml.jackson.core.JsonParser.Feature
  - name: '[]'
    fullName: '[]'
- uid: com.fasterxml.jackson.core.JsonGenerator.Feature
  name: JsonGenerator.Feature
  nameWithType: JsonGenerator.Feature
  fullName: com.fasterxml.jackson.core.JsonGenerator.Feature
- uid: com.fasterxml.jackson.core.JsonGenerator.Feature[]
  spec.java:
  - uid: com.fasterxml.jackson.core.JsonGenerator.Feature
    name: Feature
    fullName: com.fasterxml.jackson.core.JsonGenerator.Feature
  - name: '[]'
    fullName: '[]'
- uid: com.fasterxml.jackson.core.JsonFactory.Feature
  name: JsonFactory.Feature
  nameWithType: JsonFactory.Feature
  fullName: com.fasterxml.jackson.core.JsonFactory.Feature
- uid: com.fasterxml.jackson.core.StreamReadFeature
  name: StreamReadFeature
  nameWithType: StreamReadFeature
  fullName: com.fasterxml.jackson.core.StreamReadFeature
- uid: com.fasterxml.jackson.core.StreamWriteFeature
  name: StreamWriteFeature
  nameWithType: StreamWriteFeature
  fullName: com.fasterxml.jackson.core.StreamWriteFeature
- uid: com.fasterxml.jackson.core.JsonParseException
  name: JsonParseException
  nameWithType: JsonParseException
  fullName: com.fasterxml.jackson.core.JsonParseException
- uid: com.fasterxml.jackson.databind.JsonMappingException
  name: JsonMappingException
  nameWithType: JsonMappingException
  fullName: com.fasterxml.jackson.databind.JsonMappingException
- uid: java.lang.Class<T>
  spec.java:
  - uid: java.lang.Class
    name: Class
    fullName: java.lang.Class
  - name: <
    fullName: <
  - uid: T
    name: T
    fullName: T
  - name: '>'
    fullName: '>'
- uid: T
  spec.java:
  - uid: T
    name: T
    fullName: T
- uid: com.fasterxml.jackson.databind.ObjectMapper.readValue*
  name: <T>readValue
  nameWithType: ObjectMapper.<T>readValue
  fullName: com.fasterxml.jackson.databind.ObjectMapper.<T>readValue
  package: com.fasterxml.jackson.databind
- uid: com.fasterxml.jackson.core.type.TypeReference<T>
  spec.java:
  - uid: com.fasterxml.jackson.core.type.TypeReference
    name: TypeReference
    fullName: com.fasterxml.jackson.core.type.TypeReference
  - name: <
    fullName: <
  - uid: T
    name: T
    fullName: T
  - name: '>'
    fullName: '>'
- uid: com.fasterxml.jackson.core.type.ResolvedType
  name: ResolvedType
  nameWithType: ResolvedType
  fullName: com.fasterxml.jackson.core.type.ResolvedType
- uid: com.fasterxml.jackson.core.JsonProcessingException
  name: JsonProcessingException
  nameWithType: JsonProcessingException
  fullName: com.fasterxml.jackson.core.JsonProcessingException
- uid: com.fasterxml.jackson.databind.ObjectMapper.readTree*
  name: <T>readTree
  nameWithType: ObjectMapper.<T>readTree
  fullName: com.fasterxml.jackson.databind.ObjectMapper.<T>readTree
  package: com.fasterxml.jackson.databind
- uid: com.fasterxml.jackson.databind.MappingIterator<T>
  spec.java:
  - uid: com.fasterxml.jackson.databind.MappingIterator
    name: MappingIterator
    fullName: com.fasterxml.jackson.databind.MappingIterator
  - name: <
    fullName: <
  - uid: T
    name: T
    fullName: T
  - name: '>'
    fullName: '>'
- uid: com.fasterxml.jackson.databind.ObjectMapper.readValues*
  name: <T>readValues
  nameWithType: ObjectMapper.<T>readValues
  fullName: com.fasterxml.jackson.databind.ObjectMapper.<T>readValues
  package: com.fasterxml.jackson.databind
- uid: com.fasterxml.jackson.databind.JsonNode
  name: JsonNode
  nameWithType: JsonNode
  fullName: com.fasterxml.jackson.databind.JsonNode
- uid: com.fasterxml.jackson.core.JsonGenerationException
  name: JsonGenerationException
  nameWithType: JsonGenerationException
  fullName: com.fasterxml.jackson.core.JsonGenerationException
- uid: com.fasterxml.jackson.databind.ObjectMapper.writeValue*
  name: writeValue
  nameWithType: ObjectMapper.writeValue
  fullName: com.fasterxml.jackson.databind.ObjectMapper.writeValue
  package: com.fasterxml.jackson.databind
- uid: com.fasterxml.jackson.core.TreeNode
  name: TreeNode
  nameWithType: TreeNode
  fullName: com.fasterxml.jackson.core.TreeNode
- uid: com.fasterxml.jackson.databind.ObjectMapper.writeTree*
  name: writeTree
  nameWithType: ObjectMapper.writeTree
  fullName: com.fasterxml.jackson.databind.ObjectMapper.writeTree
  package: com.fasterxml.jackson.databind
- uid: com.fasterxml.jackson.databind.node.ObjectNode
  name: ObjectNode
  nameWithType: ObjectNode
  fullName: com.fasterxml.jackson.databind.node.ObjectNode
- uid: com.fasterxml.jackson.databind.ObjectMapper.createObjectNode*
  name: createObjectNode
  nameWithType: ObjectMapper.createObjectNode
  fullName: com.fasterxml.jackson.databind.ObjectMapper.createObjectNode
  package: com.fasterxml.jackson.databind
- uid: com.fasterxml.jackson.databind.node.ArrayNode
  name: ArrayNode
  nameWithType: ArrayNode
  fullName: com.fasterxml.jackson.databind.node.ArrayNode
- uid: com.fasterxml.jackson.databind.ObjectMapper.createArrayNode*
  name: createArrayNode
  nameWithType: ObjectMapper.createArrayNode
  fullName: com.fasterxml.jackson.databind.ObjectMapper.createArrayNode
  package: com.fasterxml.jackson.databind
- uid: com.fasterxml.jackson.databind.ObjectMapper.missingNode*
  name: missingNode
  nameWithType: ObjectMapper.missingNode
  fullName: com.fasterxml.jackson.databind.ObjectMapper.missingNode
  package: com.fasterxml.jackson.databind
- uid: com.fasterxml.jackson.databind.ObjectMapper.nullNode*
  name: nullNode
  nameWithType: ObjectMapper.nullNode
  fullName: com.fasterxml.jackson.databind.ObjectMapper.nullNode
  package: com.fasterxml.jackson.databind
- uid: com.fasterxml.jackson.databind.ObjectMapper.treeAsTokens*
  name: treeAsTokens
  nameWithType: ObjectMapper.treeAsTokens
  fullName: com.fasterxml.jackson.databind.ObjectMapper.treeAsTokens
  package: com.fasterxml.jackson.databind
- uid: com.fasterxml.jackson.databind.ObjectMapper.treeToValue*
  name: <T>treeToValue
  nameWithType: ObjectMapper.<T>treeToValue
  fullName: com.fasterxml.jackson.databind.ObjectMapper.<T>treeToValue
  package: com.fasterxml.jackson.databind
- uid: java.lang.IllegalArgumentException
  spec.java:
  - uid: java.lang.IllegalArgumentException
    name: IllegalArgumentException
    fullName: java.lang.IllegalArgumentException
- uid: com.fasterxml.jackson.databind.ObjectMapper.valueToTree*
  name: <T>valueToTree
  nameWithType: ObjectMapper.<T>valueToTree
  fullName: com.fasterxml.jackson.databind.ObjectMapper.<T>valueToTree
  package: com.fasterxml.jackson.databind
- uid: com.fasterxml.jackson.databind.ObjectMapper.canSerialize*
  name: canSerialize
  nameWithType: ObjectMapper.canSerialize
  fullName: com.fasterxml.jackson.databind.ObjectMapper.canSerialize
  package: com.fasterxml.jackson.databind
- uid: java.util.concurrent.atomic.AtomicReference<java.lang.Throwable>
  spec.java:
  - uid: java.util.concurrent.atomic.AtomicReference
    name: AtomicReference
    fullName: java.util.concurrent.atomic.AtomicReference
  - name: <
    fullName: <
  - uid: java.lang.Throwable
    name: Throwable
    fullName: java.lang.Throwable
  - name: '>'
    fullName: '>'
- uid: com.fasterxml.jackson.databind.ObjectMapper.canDeserialize*
  name: canDeserialize
  nameWithType: ObjectMapper.canDeserialize
  fullName: com.fasterxml.jackson.databind.ObjectMapper.canDeserialize
  package: com.fasterxml.jackson.databind
- uid: com.fasterxml.jackson.databind.ObjectMapper.writeValueAsString*
  name: writeValueAsString
  nameWithType: ObjectMapper.writeValueAsString
  fullName: com.fasterxml.jackson.databind.ObjectMapper.writeValueAsString
  package: com.fasterxml.jackson.databind
- uid: com.fasterxml.jackson.databind.ObjectMapper.writeValueAsBytes*
  name: writeValueAsBytes
  nameWithType: ObjectMapper.writeValueAsBytes
  fullName: com.fasterxml.jackson.databind.ObjectMapper.writeValueAsBytes
  package: com.fasterxml.jackson.databind
- uid: com.fasterxml.jackson.databind.ObjectMapper.writer*
  name: writer
  nameWithType: ObjectMapper.writer
  fullName: com.fasterxml.jackson.databind.ObjectMapper.writer
  package: com.fasterxml.jackson.databind
- uid: com.fasterxml.jackson.databind.ObjectMapper.writerWithView*
  name: writerWithView
  nameWithType: ObjectMapper.writerWithView
  fullName: com.fasterxml.jackson.databind.ObjectMapper.writerWithView
  package: com.fasterxml.jackson.databind
- uid: com.fasterxml.jackson.databind.ObjectMapper.writerFor*
  name: writerFor
  nameWithType: ObjectMapper.writerFor
  fullName: com.fasterxml.jackson.databind.ObjectMapper.writerFor
  package: com.fasterxml.jackson.databind
- uid: com.fasterxml.jackson.core.type.TypeReference<?>
  spec.java:
  - uid: com.fasterxml.jackson.core.type.TypeReference
    name: TypeReference
    fullName: com.fasterxml.jackson.core.type.TypeReference
  - name: <
    fullName: <
  - uid: '?'
    name: '?'
    fullName: '?'
  - name: '>'
    fullName: '>'
- uid: com.fasterxml.jackson.databind.ObjectMapper.writerWithDefaultPrettyPrinter*
  name: writerWithDefaultPrettyPrinter
  nameWithType: ObjectMapper.writerWithDefaultPrettyPrinter
  fullName: com.fasterxml.jackson.databind.ObjectMapper.writerWithDefaultPrettyPrinter
  package: com.fasterxml.jackson.databind
- uid: com.fasterxml.jackson.core.io.CharacterEscapes
  name: CharacterEscapes
  nameWithType: CharacterEscapes
  fullName: com.fasterxml.jackson.core.io.CharacterEscapes
- uid: com.fasterxml.jackson.databind.cfg.ContextAttributes
  name: ContextAttributes
  nameWithType: ContextAttributes
  fullName: com.fasterxml.jackson.databind.cfg.ContextAttributes
- uid: com.fasterxml.jackson.databind.ObjectMapper.writerWithType*
  name: writerWithType
  nameWithType: ObjectMapper.writerWithType
  fullName: com.fasterxml.jackson.databind.ObjectMapper.writerWithType
  package: com.fasterxml.jackson.databind
- uid: com.fasterxml.jackson.databind.ObjectMapper.reader*
  name: reader
  nameWithType: ObjectMapper.reader
  fullName: com.fasterxml.jackson.databind.ObjectMapper.reader
  package: com.fasterxml.jackson.databind
- uid: com.fasterxml.jackson.databind.ObjectMapper.readerForUpdating*
  name: readerForUpdating
  nameWithType: ObjectMapper.readerForUpdating
  fullName: com.fasterxml.jackson.databind.ObjectMapper.readerForUpdating
  package: com.fasterxml.jackson.databind
- uid: com.fasterxml.jackson.databind.ObjectMapper.readerFor*
  name: readerFor
  nameWithType: ObjectMapper.readerFor
  fullName: com.fasterxml.jackson.databind.ObjectMapper.readerFor
  package: com.fasterxml.jackson.databind
- uid: com.fasterxml.jackson.databind.ObjectMapper.readerForArrayOf*
  name: readerForArrayOf
  nameWithType: ObjectMapper.readerForArrayOf
  fullName: com.fasterxml.jackson.databind.ObjectMapper.readerForArrayOf
  package: com.fasterxml.jackson.databind
- uid: com.fasterxml.jackson.databind.ObjectMapper.readerForListOf*
  name: readerForListOf
  nameWithType: ObjectMapper.readerForListOf
  fullName: com.fasterxml.jackson.databind.ObjectMapper.readerForListOf
  package: com.fasterxml.jackson.databind
- uid: com.fasterxml.jackson.databind.ObjectMapper.readerForMapOf*
  name: readerForMapOf
  nameWithType: ObjectMapper.readerForMapOf
  fullName: com.fasterxml.jackson.databind.ObjectMapper.readerForMapOf
  package: com.fasterxml.jackson.databind
- uid: com.fasterxml.jackson.databind.ObjectMapper.readerWithView*
  name: readerWithView
  nameWithType: ObjectMapper.readerWithView
  fullName: com.fasterxml.jackson.databind.ObjectMapper.readerWithView
  package: com.fasterxml.jackson.databind
- uid: com.fasterxml.jackson.databind.ObjectMapper.convertValue*
  name: <T>convertValue
  nameWithType: ObjectMapper.<T>convertValue
  fullName: com.fasterxml.jackson.databind.ObjectMapper.<T>convertValue
  package: com.fasterxml.jackson.databind
- uid: com.fasterxml.jackson.databind.ObjectMapper._convert*
  name: _convert
  nameWithType: ObjectMapper._convert
  fullName: com.fasterxml.jackson.databind.ObjectMapper._convert
  package: com.fasterxml.jackson.databind
- uid: com.fasterxml.jackson.databind.ObjectMapper.updateValue*
  name: <T>updateValue
  nameWithType: ObjectMapper.<T>updateValue
  fullName: com.fasterxml.jackson.databind.ObjectMapper.<T>updateValue
  package: com.fasterxml.jackson.databind
- uid: com.fasterxml.jackson.databind.jsonschema.JsonSchema
  name: JsonSchema
  nameWithType: JsonSchema
  fullName: com.fasterxml.jackson.databind.jsonschema.JsonSchema
- uid: com.fasterxml.jackson.databind.ObjectMapper.generateJsonSchema*
  name: generateJsonSchema
  nameWithType: ObjectMapper.generateJsonSchema
  fullName: com.fasterxml.jackson.databind.ObjectMapper.generateJsonSchema
  package: com.fasterxml.jackson.databind
- uid: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper
  name: jsonFormatVisitors.JsonFormatVisitorWrapper
  nameWithType: jsonFormatVisitors.JsonFormatVisitorWrapper
  fullName: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper
- uid: com.fasterxml.jackson.databind.ObjectMapper.acceptJsonFormatVisitor*
  name: acceptJsonFormatVisitor
  nameWithType: ObjectMapper.acceptJsonFormatVisitor
  fullName: com.fasterxml.jackson.databind.ObjectMapper.acceptJsonFormatVisitor
  package: com.fasterxml.jackson.databind
- uid: com.fasterxml.jackson.databind.ObjectMapper._constructDefaultTypeResolverBuilder*
  name: _constructDefaultTypeResolverBuilder
  nameWithType: ObjectMapper._constructDefaultTypeResolverBuilder
  fullName: com.fasterxml.jackson.databind.ObjectMapper._constructDefaultTypeResolverBuilder
  package: com.fasterxml.jackson.databind
- uid: com.fasterxml.jackson.databind.ObjectMapper._serializerProvider*
  name: _serializerProvider
  nameWithType: ObjectMapper._serializerProvider
  fullName: com.fasterxml.jackson.databind.ObjectMapper._serializerProvider
  package: com.fasterxml.jackson.databind
- uid: com.fasterxml.jackson.databind.ObjectMapper._writeValueAndClose*
  name: _writeValueAndClose
  nameWithType: ObjectMapper._writeValueAndClose
  fullName: com.fasterxml.jackson.databind.ObjectMapper._writeValueAndClose
  package: com.fasterxml.jackson.databind
- uid: com.fasterxml.jackson.databind.ObjectMapper._configAndWriteValue*
  name: _configAndWriteValue
  nameWithType: ObjectMapper._configAndWriteValue
  fullName: com.fasterxml.jackson.databind.ObjectMapper._configAndWriteValue
  package: com.fasterxml.jackson.databind
- uid: com.fasterxml.jackson.databind.ObjectMapper._readValue*
  name: _readValue
  nameWithType: ObjectMapper._readValue
  fullName: com.fasterxml.jackson.databind.ObjectMapper._readValue
  package: com.fasterxml.jackson.databind
- uid: com.fasterxml.jackson.databind.ObjectMapper._readMapAndClose*
  name: _readMapAndClose
  nameWithType: ObjectMapper._readMapAndClose
  fullName: com.fasterxml.jackson.databind.ObjectMapper._readMapAndClose
  package: com.fasterxml.jackson.databind
- uid: com.fasterxml.jackson.databind.ObjectMapper._readTreeAndClose*
  name: _readTreeAndClose
  nameWithType: ObjectMapper._readTreeAndClose
  fullName: com.fasterxml.jackson.databind.ObjectMapper._readTreeAndClose
  package: com.fasterxml.jackson.databind
- uid: com.fasterxml.jackson.databind.JsonDeserializer<java.lang.Object>
  spec.java:
  - uid: com.fasterxml.jackson.databind.JsonDeserializer
    name: JsonDeserializer
    fullName: com.fasterxml.jackson.databind.JsonDeserializer
  - name: <
    fullName: <
  - uid: java.lang.Object
    name: Object
    fullName: java.lang.Object
  - name: '>'
    fullName: '>'
- uid: com.fasterxml.jackson.databind.ObjectMapper._unwrapAndDeserialize*
  name: _unwrapAndDeserialize
  nameWithType: ObjectMapper._unwrapAndDeserialize
  fullName: com.fasterxml.jackson.databind.ObjectMapper._unwrapAndDeserialize
  package: com.fasterxml.jackson.databind
- uid: com.fasterxml.jackson.databind.ObjectMapper.createDeserializationContext*
  name: createDeserializationContext
  nameWithType: ObjectMapper.createDeserializationContext
  fullName: com.fasterxml.jackson.databind.ObjectMapper.createDeserializationContext
  package: com.fasterxml.jackson.databind
- uid: com.fasterxml.jackson.core.JsonToken
  name: JsonToken
  nameWithType: JsonToken
  fullName: com.fasterxml.jackson.core.JsonToken
- uid: com.fasterxml.jackson.databind.ObjectMapper._initForReading*
  name: _initForReading
  nameWithType: ObjectMapper._initForReading
  fullName: com.fasterxml.jackson.databind.ObjectMapper._initForReading
  package: com.fasterxml.jackson.databind
- uid: com.fasterxml.jackson.databind.ObjectMapper._verifyNoTrailingTokens*
  name: _verifyNoTrailingTokens
  nameWithType: ObjectMapper._verifyNoTrailingTokens
  fullName: com.fasterxml.jackson.databind.ObjectMapper._verifyNoTrailingTokens
  package: com.fasterxml.jackson.databind
- uid: com.fasterxml.jackson.databind.ObjectMapper._findRootDeserializer*
  name: _findRootDeserializer
  nameWithType: ObjectMapper._findRootDeserializer
  fullName: com.fasterxml.jackson.databind.ObjectMapper._findRootDeserializer
  package: com.fasterxml.jackson.databind
- uid: com.fasterxml.jackson.databind.ObjectMapper._verifySchemaType*
  name: _verifySchemaType
  nameWithType: ObjectMapper._verifySchemaType
  fullName: com.fasterxml.jackson.databind.ObjectMapper._verifySchemaType
  package: com.fasterxml.jackson.databind
- uid: com.fasterxml.jackson.databind.ObjectMapper._assertNotNull*
  name: _assertNotNull
  nameWithType: ObjectMapper._assertNotNull
  fullName: com.fasterxml.jackson.databind.ObjectMapper._assertNotNull
  package: com.fasterxml.jackson.databind
- uid: com.fasterxml.jackson.databind.cfg.BaseSettings
  name: BaseSettings
  nameWithType: BaseSettings
  fullName: com.fasterxml.jackson.databind.cfg.BaseSettings
- uid: com.fasterxml.jackson.databind.cfg.ConfigOverrides
  name: ConfigOverrides
  nameWithType: ConfigOverrides
  fullName: com.fasterxml.jackson.databind.cfg.ConfigOverrides
- uid: com.fasterxml.jackson.databind.introspect.SimpleMixInResolver
  name: SimpleMixInResolver
  nameWithType: SimpleMixInResolver
  fullName: com.fasterxml.jackson.databind.introspect.SimpleMixInResolver
- uid: java.util.concurrent.ConcurrentHashMap<com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.JsonDeserializer<java.lang.Object>>
  spec.java:
  - uid: java.util.concurrent.ConcurrentHashMap
    name: ConcurrentHashMap
    fullName: java.util.concurrent.ConcurrentHashMap
  - name: <
    fullName: <
  - uid: com.fasterxml.jackson.databind.JavaType
    name: JavaType
    fullName: com.fasterxml.jackson.databind.JavaType
  - name: ','
    fullName: ','
  - uid: com.fasterxml.jackson.databind.JsonDeserializer
    name: JsonDeserializer
    fullName: com.fasterxml.jackson.databind.JsonDeserializer
  - name: <
    fullName: <
  - uid: java.lang.Object
    name: Object
    fullName: java.lang.Object
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
- uid: com.fasterxml.jackson.core.ObjectCodec
  name: ObjectCodec
  nameWithType: ObjectCodec
  fullName: com.fasterxml.jackson.core.ObjectCodec
- uid: com.fasterxml.jackson.core.Versioned
  name: Versioned
  nameWithType: Versioned
  fullName: com.fasterxml.jackson.core.Versioned
- uid: java.io.Serializable
  name: Serializable
  nameWithType: Serializable
  fullName: java.io.Serializable
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: java.lang.Object.finalize()
  name: Object.finalize()
  nameWithType: Object.finalize()
  fullName: java.lang.Object.finalize()
- uid: com.fasterxml.jackson.core.ObjectCodec.getJsonFactory()
  name: ObjectCodec.getJsonFactory()
  nameWithType: ObjectCodec.getJsonFactory()
  fullName: com.fasterxml.jackson.core.ObjectCodec.getJsonFactory()
- uid: com.fasterxml.jackson.core.ObjectCodec.getFactory()
  name: ObjectCodec.getFactory()
  nameWithType: ObjectCodec.getFactory()
  fullName: com.fasterxml.jackson.core.ObjectCodec.getFactory()
- uid: java.lang.Object.clone()
  name: Object.clone()
  nameWithType: Object.clone()
  fullName: java.lang.Object.clone()
- uid: com.fasterxml.jackson.core.ObjectCodec.<T>readValue(com.fasterxml.jackson.core.JsonParser,java.lang.Class<T>)
  name: ObjectCodec.<T>readValue(JsonParser,Class<T>)
  nameWithType: ObjectCodec.<T>readValue(JsonParser,Class<T>)
  fullName: com.fasterxml.jackson.core.ObjectCodec.<T>readValue(com.fasterxml.jackson.core.JsonParser,java.lang.Class<T>)
- uid: com.fasterxml.jackson.core.ObjectCodec.treeAsTokens(com.fasterxml.jackson.core.TreeNode)
  name: ObjectCodec.treeAsTokens(TreeNode)
  nameWithType: ObjectCodec.treeAsTokens(TreeNode)
  fullName: com.fasterxml.jackson.core.ObjectCodec.treeAsTokens(com.fasterxml.jackson.core.TreeNode)
- uid: com.fasterxml.jackson.core.ObjectCodec.version()
  name: ObjectCodec.version()
  nameWithType: ObjectCodec.version()
  fullName: com.fasterxml.jackson.core.ObjectCodec.version()
- uid: com.fasterxml.jackson.core.ObjectCodec.<T>readValue(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.core.type.TypeReference<T>)
  name: ObjectCodec.<T>readValue(JsonParser,TypeReference<T>)
  nameWithType: ObjectCodec.<T>readValue(JsonParser,TypeReference<T>)
  fullName: com.fasterxml.jackson.core.ObjectCodec.<T>readValue(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.core.type.TypeReference<T>)
- uid: com.fasterxml.jackson.core.TreeCodec.nullNode()
  name: TreeCodec.nullNode()
  nameWithType: TreeCodec.nullNode()
  fullName: com.fasterxml.jackson.core.TreeCodec.nullNode()
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: java.lang.Object.hashCode()
  name: Object.hashCode()
  nameWithType: Object.hashCode()
  fullName: java.lang.Object.hashCode()
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: com.fasterxml.jackson.core.ObjectCodec.createObjectNode()
  name: ObjectCodec.createObjectNode()
  nameWithType: ObjectCodec.createObjectNode()
  fullName: com.fasterxml.jackson.core.ObjectCodec.createObjectNode()
- uid: com.fasterxml.jackson.core.ObjectCodec.createArrayNode()
  name: ObjectCodec.createArrayNode()
  nameWithType: ObjectCodec.createArrayNode()
  fullName: com.fasterxml.jackson.core.ObjectCodec.createArrayNode()
- uid: com.fasterxml.jackson.core.TreeCodec.missingNode()
  name: TreeCodec.missingNode()
  nameWithType: TreeCodec.missingNode()
  fullName: com.fasterxml.jackson.core.TreeCodec.missingNode()
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: com.fasterxml.jackson.core.ObjectCodec.<T>readTree(com.fasterxml.jackson.core.JsonParser)
  name: ObjectCodec.<T>readTree(JsonParser)
  nameWithType: ObjectCodec.<T>readTree(JsonParser)
  fullName: com.fasterxml.jackson.core.ObjectCodec.<T>readTree(com.fasterxml.jackson.core.JsonParser)
- uid: com.fasterxml.jackson.core.ObjectCodec.<T>treeToValue(com.fasterxml.jackson.core.TreeNode,java.lang.Class<T>)
  name: ObjectCodec.<T>treeToValue(TreeNode,Class<T>)
  nameWithType: ObjectCodec.<T>treeToValue(TreeNode,Class<T>)
  fullName: com.fasterxml.jackson.core.ObjectCodec.<T>treeToValue(com.fasterxml.jackson.core.TreeNode,java.lang.Class<T>)
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: java.lang.Object.equals(java.lang.Object)
  name: Object.equals(Object)
  nameWithType: Object.equals(Object)
  fullName: java.lang.Object.equals(java.lang.Object)
- uid: com.fasterxml.jackson.core.ObjectCodec.writeTree(com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.core.TreeNode)
  name: ObjectCodec.writeTree(JsonGenerator,TreeNode)
  nameWithType: ObjectCodec.writeTree(JsonGenerator,TreeNode)
  fullName: com.fasterxml.jackson.core.ObjectCodec.writeTree(com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.core.TreeNode)
- uid: com.fasterxml.jackson.core.ObjectCodec.writeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)
  name: ObjectCodec.writeValue(JsonGenerator,Object)
  nameWithType: ObjectCodec.writeValue(JsonGenerator,Object)
  fullName: com.fasterxml.jackson.core.ObjectCodec.writeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)
- uid: java.lang.Object.toString()
  name: Object.toString()
  nameWithType: Object.toString()
  fullName: java.lang.Object.toString()
- uid: com.fasterxml.jackson.core.ObjectCodec.<T>readValue(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.core.type.ResolvedType)
  name: ObjectCodec.<T>readValue(JsonParser,ResolvedType)
  nameWithType: ObjectCodec.<T>readValue(JsonParser,ResolvedType)
  fullName: com.fasterxml.jackson.core.ObjectCodec.<T>readValue(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.core.type.ResolvedType)
- uid: com.fasterxml.jackson.core.ObjectCodec.<T>readValues(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.core.type.TypeReference<T>)
  name: ObjectCodec.<T>readValues(JsonParser,TypeReference<T>)
  nameWithType: ObjectCodec.<T>readValues(JsonParser,TypeReference<T>)
  fullName: com.fasterxml.jackson.core.ObjectCodec.<T>readValues(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.core.type.TypeReference<T>)
- uid: com.fasterxml.jackson.core.ObjectCodec.<T>readValues(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.core.type.ResolvedType)
  name: ObjectCodec.<T>readValues(JsonParser,ResolvedType)
  nameWithType: ObjectCodec.<T>readValues(JsonParser,ResolvedType)
  fullName: com.fasterxml.jackson.core.ObjectCodec.<T>readValues(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.core.type.ResolvedType)
- uid: com.fasterxml.jackson.core.ObjectCodec.<T>readValues(com.fasterxml.jackson.core.JsonParser,java.lang.Class<T>)
  name: ObjectCodec.<T>readValues(JsonParser,Class<T>)
  nameWithType: ObjectCodec.<T>readValues(JsonParser,Class<T>)
  fullName: com.fasterxml.jackson.core.ObjectCodec.<T>readValues(com.fasterxml.jackson.core.JsonParser,java.lang.Class<T>)
- uid: com.fasterxml.jackson.databind.ObjectMapper.DefaultTypeResolverBuilder
  name: ObjectMapper.DefaultTypeResolverBuilder
  nameWithType: ObjectMapper.DefaultTypeResolverBuilder
  fullName: com.fasterxml.jackson.databind.ObjectMapper.DefaultTypeResolverBuilder
- uid: java.lang.Class
  name: Class
  nameWithType: Class
  fullName: java.lang.Class
- uid: '?'
  name: '?'
  nameWithType: '?'
  fullName: '?'
- uid: '? extends com.fasterxml.jackson.databind.Module'
  name: '? extends Module'
  nameWithType: '? extends Module'
  fullName: '? extends com.fasterxml.jackson.databind.Module'
- uid: java.lang.Iterable
  name: Iterable
  nameWithType: Iterable
  fullName: java.lang.Iterable
- uid: java.util.Set
  name: Set
  nameWithType: Set
  fullName: java.util.Set
- uid: java.util.List
  name: List
  nameWithType: List
  fullName: java.util.List
- uid: java.util.Map
  name: Map
  nameWithType: Map
  fullName: java.util.Map
- uid: ?>,java.lang.Class
  name: ?>,Class
  nameWithType: ?>,Class
  fullName: ?>,java.lang.Class
- uid: com.fasterxml.jackson.databind.introspect.VisibilityChecker
  name: VisibilityChecker
  nameWithType: VisibilityChecker
  fullName: com.fasterxml.jackson.databind.introspect.VisibilityChecker
- uid: ?>[]
  name: ?>[]
  nameWithType: ?>[]
  fullName: ?>[]
- uid: java.util.Collection
  name: Collection
  nameWithType: Collection
  fullName: java.util.Collection
- uid: com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder
  name: TypeResolverBuilder
  nameWithType: TypeResolverBuilder
  fullName: com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder
- uid: com.fasterxml.jackson.core.type.TypeReference
  name: TypeReference
  nameWithType: TypeReference
  fullName: com.fasterxml.jackson.core.type.TypeReference
- uid: com.fasterxml.jackson.databind.MappingIterator
  name: MappingIterator
  nameWithType: MappingIterator
  fullName: com.fasterxml.jackson.databind.MappingIterator
- uid: java.lang.Throwable
  name: Throwable
  nameWithType: Throwable
  fullName: java.lang.Throwable
- uid: java.util.concurrent.atomic.AtomicReference
  name: AtomicReference
  nameWithType: AtomicReference
  fullName: java.util.concurrent.atomic.AtomicReference
- uid: com.fasterxml.jackson.databind.JsonDeserializer
  name: JsonDeserializer
  nameWithType: JsonDeserializer
  fullName: com.fasterxml.jackson.databind.JsonDeserializer
- uid: java.util.concurrent.ConcurrentHashMap
  name: ConcurrentHashMap
  nameWithType: ConcurrentHashMap
  fullName: java.util.concurrent.ConcurrentHashMap
- uid: com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.JsonDeserializer
  name: JavaType,JsonDeserializer
  nameWithType: JavaType,JsonDeserializer
  fullName: com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.JsonDeserializer
- uid: T>readValue(com.fasterxml.jackson.core.JsonParser,java.lang.Class
  name: T>readValue(JsonParser,Class
  nameWithType: T>readValue(JsonParser,Class
  fullName: T>readValue(com.fasterxml.jackson.core.JsonParser,java.lang.Class
- uid: com.fasterxml.jackson.core.ObjectCodec.
  name: ObjectCodec.
  nameWithType: ObjectCodec.
  fullName: com.fasterxml.jackson.core.ObjectCodec.
- uid: T>)
  name: T>)
  nameWithType: T>)
  fullName: T>)
- uid: T>readValue(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.core.type.TypeReference
  name: T>readValue(JsonParser,TypeReference
  nameWithType: T>readValue(JsonParser,TypeReference
  fullName: T>readValue(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.core.type.TypeReference
- uid: T>readTree(com.fasterxml.jackson.core.JsonParser)
  name: T>readTree(JsonParser)
  nameWithType: T>readTree(JsonParser)
  fullName: T>readTree(com.fasterxml.jackson.core.JsonParser)
- uid: T>treeToValue(com.fasterxml.jackson.core.TreeNode,java.lang.Class
  name: T>treeToValue(TreeNode,Class
  nameWithType: T>treeToValue(TreeNode,Class
  fullName: T>treeToValue(com.fasterxml.jackson.core.TreeNode,java.lang.Class
- uid: T>readValue(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.core.type.ResolvedType)
  name: T>readValue(JsonParser,ResolvedType)
  nameWithType: T>readValue(JsonParser,ResolvedType)
  fullName: T>readValue(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.core.type.ResolvedType)
- uid: T>readValues(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.core.type.TypeReference
  name: T>readValues(JsonParser,TypeReference
  nameWithType: T>readValues(JsonParser,TypeReference
  fullName: T>readValues(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.core.type.TypeReference
- uid: T>readValues(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.core.type.ResolvedType)
  name: T>readValues(JsonParser,ResolvedType)
  nameWithType: T>readValues(JsonParser,ResolvedType)
  fullName: T>readValues(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.core.type.ResolvedType)
- uid: T>readValues(com.fasterxml.jackson.core.JsonParser,java.lang.Class
  name: T>readValues(JsonParser,Class
  nameWithType: T>readValues(JsonParser,Class
  fullName: T>readValues(com.fasterxml.jackson.core.JsonParser,java.lang.Class
