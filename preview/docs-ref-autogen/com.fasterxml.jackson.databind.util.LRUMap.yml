### YamlMime:ManagedReference
items:
- uid: com.fasterxml.jackson.databind.util.LRUMap
  id: LRUMap
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.util
  children:
  - com.fasterxml.jackson.databind.util.LRUMap.LRUMap(int,int)
  - com.fasterxml.jackson.databind.util.LRUMap._jdkSerializeMaxEntries
  - com.fasterxml.jackson.databind.util.LRUMap._map
  - com.fasterxml.jackson.databind.util.LRUMap._maxEntries
  - com.fasterxml.jackson.databind.util.LRUMap.clear()
  - com.fasterxml.jackson.databind.util.LRUMap.get(java.lang.Object)
  - com.fasterxml.jackson.databind.util.LRUMap.put(K,V)
  - com.fasterxml.jackson.databind.util.LRUMap.putIfAbsent(K,V)
  - com.fasterxml.jackson.databind.util.LRUMap.readResolve()
  - com.fasterxml.jackson.databind.util.LRUMap.size()
  langs:
  - java
  name: LRUMap<K,V>
  nameWithType: LRUMap<K,V>
  fullName: com.fasterxml.jackson.databind.util.LRUMap<K,V>
  type: Class
  package: com.fasterxml.jackson.databind.util
  summary: >-
    Helper for simple bounded maps used for reusing lookup values.


    Note that serialization behavior is such that contents are NOT serialized, on assumption that all use cases are for caching where persistence does not make sense. The only thing serialized is the cache size of Map.


    NOTE: since version 2.4.2, this is **NOT** an LRU-based at all; reason being that it is not possible to use JDK components that do LRU \_AND\_ perform well wrt synchronization on multi-core systems. So we choose efficient synchronization over potentially more efficient handling of entries.


    And yes, there are efficient LRU implementations such as [concurrentlinkedhashmap][]; but at this point we really try to keep external deps to minimum. But perhaps a shaded variant may be used one day.



    [concurrentlinkedhashmap]: https://code.google.com/p/concurrentlinkedhashmap/
  syntax:
    content: public class LRUMap<K,V> implements Serializable
    typeParameters:
    - id: K
    - id: V
  inheritance:
  - java.lang.Object
  implements:
  - java.io.Serializable
  inheritedMembers:
  - java.lang.Object.clone()
  - java.lang.Object.equals(java.lang.Object)
  - java.lang.Object.finalize()
  - java.lang.Object.getClass()
  - java.lang.Object.hashCode()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.toString()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
- uid: com.fasterxml.jackson.databind.util.LRUMap.LRUMap(int,int)
  id: LRUMap(int,int)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.util.LRUMap
  langs:
  - java
  name: LRUMap(int initialEntries, int maxEntries)
  nameWithType: LRUMap<K,V>.LRUMap(int initialEntries, int maxEntries)
  fullName: com.fasterxml.jackson.databind.util.LRUMap<K,V>.LRUMap(int initialEntries, int maxEntries)
  overload: com.fasterxml.jackson.databind.util.LRUMap.LRUMap*
  type: Constructor
  package: com.fasterxml.jackson.databind.util
  syntax:
    content: public LRUMap(int initialEntries, int maxEntries)
    parameters:
    - id: initialEntries
      type: int
    - id: maxEntries
      type: int
- uid: com.fasterxml.jackson.databind.util.LRUMap._jdkSerializeMaxEntries
  id: _jdkSerializeMaxEntries
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.util.LRUMap
  langs:
  - java
  name: _jdkSerializeMaxEntries
  nameWithType: LRUMap<K,V>._jdkSerializeMaxEntries
  fullName: com.fasterxml.jackson.databind.util.LRUMap<K,V>._jdkSerializeMaxEntries
  type: Field
  package: com.fasterxml.jackson.databind.util
  summary: Ugly hack, to work through the requirement that \_value is indeed final, and that JDK serialization won't call ctor(s) if Serializable is implemented.
  syntax:
    content: protected transient int _jdkSerializeMaxEntries
    return:
      type: int
- uid: com.fasterxml.jackson.databind.util.LRUMap._map
  id: _map
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.util.LRUMap
  langs:
  - java
  name: _map
  nameWithType: LRUMap<K,V>._map
  fullName: com.fasterxml.jackson.databind.util.LRUMap<K,V>._map
  type: Field
  package: com.fasterxml.jackson.databind.util
  syntax:
    content: protected final transient ConcurrentHashMap<K,V> _map
    return:
      type: java.util.concurrent.ConcurrentHashMap<K,V>
- uid: com.fasterxml.jackson.databind.util.LRUMap._maxEntries
  id: _maxEntries
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.util.LRUMap
  langs:
  - java
  name: _maxEntries
  nameWithType: LRUMap<K,V>._maxEntries
  fullName: com.fasterxml.jackson.databind.util.LRUMap<K,V>._maxEntries
  type: Field
  package: com.fasterxml.jackson.databind.util
  syntax:
    content: protected final transient int _maxEntries
    return:
      type: int
- uid: com.fasterxml.jackson.databind.util.LRUMap.clear()
  id: clear()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.util.LRUMap
  langs:
  - java
  name: clear()
  nameWithType: LRUMap<K,V>.clear()
  fullName: com.fasterxml.jackson.databind.util.LRUMap<K,V>.clear()
  overload: com.fasterxml.jackson.databind.util.LRUMap.clear*
  type: Method
  package: com.fasterxml.jackson.databind.util
  syntax:
    content: public void clear()
- uid: com.fasterxml.jackson.databind.util.LRUMap.get(java.lang.Object)
  id: get(java.lang.Object)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.util.LRUMap
  langs:
  - java
  name: get(Object key)
  nameWithType: LRUMap<K,V>.get(Object key)
  fullName: com.fasterxml.jackson.databind.util.LRUMap<K,V>.get(Object key)
  overload: com.fasterxml.jackson.databind.util.LRUMap.get*
  type: Method
  package: com.fasterxml.jackson.databind.util
  syntax:
    content: public V get(Object key)
    parameters:
    - id: key
      type: java.lang.Object
    return:
      type: V
- uid: com.fasterxml.jackson.databind.util.LRUMap.put(K,V)
  id: put(K,V)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.util.LRUMap
  langs:
  - java
  name: put(K key, V value)
  nameWithType: LRUMap<K,V>.put(K key, V value)
  fullName: com.fasterxml.jackson.databind.util.LRUMap<K,V>.put(K key, V value)
  overload: com.fasterxml.jackson.databind.util.LRUMap.put*
  type: Method
  package: com.fasterxml.jackson.databind.util
  syntax:
    content: public V put(K key, V value)
    parameters:
    - id: key
      type: K
    - id: value
      type: V
    return:
      type: V
- uid: com.fasterxml.jackson.databind.util.LRUMap.putIfAbsent(K,V)
  id: putIfAbsent(K,V)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.util.LRUMap
  langs:
  - java
  name: putIfAbsent(K key, V value)
  nameWithType: LRUMap<K,V>.putIfAbsent(K key, V value)
  fullName: com.fasterxml.jackson.databind.util.LRUMap<K,V>.putIfAbsent(K key, V value)
  overload: com.fasterxml.jackson.databind.util.LRUMap.putIfAbsent*
  type: Method
  package: com.fasterxml.jackson.databind.util
  syntax:
    content: public V putIfAbsent(K key, V value)
    parameters:
    - id: key
      type: K
    - id: value
      type: V
    return:
      type: V
- uid: com.fasterxml.jackson.databind.util.LRUMap.readResolve()
  id: readResolve()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.util.LRUMap
  langs:
  - java
  name: readResolve()
  nameWithType: LRUMap<K,V>.readResolve()
  fullName: com.fasterxml.jackson.databind.util.LRUMap<K,V>.readResolve()
  overload: com.fasterxml.jackson.databind.util.LRUMap.readResolve*
  type: Method
  package: com.fasterxml.jackson.databind.util
  syntax:
    content: protected Object readResolve()
    return:
      type: java.lang.Object
- uid: com.fasterxml.jackson.databind.util.LRUMap.size()
  id: size()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.util.LRUMap
  langs:
  - java
  name: size()
  nameWithType: LRUMap<K,V>.size()
  fullName: com.fasterxml.jackson.databind.util.LRUMap<K,V>.size()
  overload: com.fasterxml.jackson.databind.util.LRUMap.size*
  type: Method
  package: com.fasterxml.jackson.databind.util
  syntax:
    content: public int size()
    return:
      type: int
references:
- uid: int
  spec.java:
  - uid: int
    name: int
    fullName: int
- uid: com.fasterxml.jackson.databind.util.LRUMap.LRUMap*
  name: LRUMap
  nameWithType: LRUMap<K,V>.LRUMap
  fullName: com.fasterxml.jackson.databind.util.LRUMap<K,V>.LRUMap
  package: com.fasterxml.jackson.databind.util
- uid: K
  spec.java:
  - uid: K
    name: K
    fullName: K
- uid: V
  spec.java:
  - uid: V
    name: V
    fullName: V
- uid: com.fasterxml.jackson.databind.util.LRUMap.put*
  name: put
  nameWithType: LRUMap<K,V>.put
  fullName: com.fasterxml.jackson.databind.util.LRUMap<K,V>.put
  package: com.fasterxml.jackson.databind.util
- uid: com.fasterxml.jackson.databind.util.LRUMap.putIfAbsent*
  name: putIfAbsent
  nameWithType: LRUMap<K,V>.putIfAbsent
  fullName: com.fasterxml.jackson.databind.util.LRUMap<K,V>.putIfAbsent
  package: com.fasterxml.jackson.databind.util
- uid: java.lang.Object
  spec.java:
  - uid: java.lang.Object
    name: Object
    fullName: java.lang.Object
- uid: com.fasterxml.jackson.databind.util.LRUMap.get*
  name: get
  nameWithType: LRUMap<K,V>.get
  fullName: com.fasterxml.jackson.databind.util.LRUMap<K,V>.get
  package: com.fasterxml.jackson.databind.util
- uid: com.fasterxml.jackson.databind.util.LRUMap.clear*
  name: clear
  nameWithType: LRUMap<K,V>.clear
  fullName: com.fasterxml.jackson.databind.util.LRUMap<K,V>.clear
  package: com.fasterxml.jackson.databind.util
- uid: com.fasterxml.jackson.databind.util.LRUMap.size*
  name: size
  nameWithType: LRUMap<K,V>.size
  fullName: com.fasterxml.jackson.databind.util.LRUMap<K,V>.size
  package: com.fasterxml.jackson.databind.util
- uid: com.fasterxml.jackson.databind.util.LRUMap.readResolve*
  name: readResolve
  nameWithType: LRUMap<K,V>.readResolve
  fullName: com.fasterxml.jackson.databind.util.LRUMap<K,V>.readResolve
  package: com.fasterxml.jackson.databind.util
- uid: java.util.concurrent.ConcurrentHashMap<K,V>
  spec.java:
  - uid: java.util.concurrent.ConcurrentHashMap
    name: ConcurrentHashMap
    fullName: java.util.concurrent.ConcurrentHashMap
  - name: <
    fullName: <
  - uid: K
    name: K
    fullName: K
  - name: ','
    fullName: ','
  - uid: V
    name: V
    fullName: V
  - name: '>'
    fullName: '>'
- uid: java.io.Serializable
  name: Serializable
  nameWithType: Serializable
  fullName: java.io.Serializable
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: java.lang.Object.finalize()
  name: Object.finalize()
  nameWithType: Object.finalize()
  fullName: java.lang.Object.finalize()
- uid: java.lang.Object.clone()
  name: Object.clone()
  nameWithType: Object.clone()
  fullName: java.lang.Object.clone()
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: java.lang.Object.equals(java.lang.Object)
  name: Object.equals(Object)
  nameWithType: Object.equals(Object)
  fullName: java.lang.Object.equals(java.lang.Object)
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.lang.Object.hashCode()
  name: Object.hashCode()
  nameWithType: Object.hashCode()
  fullName: java.lang.Object.hashCode()
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: java.lang.Object.toString()
  name: Object.toString()
  nameWithType: Object.toString()
  fullName: java.lang.Object.toString()
- uid: K,V
  name: K,V
  nameWithType: K,V
  fullName: K,V
- uid: java.util.concurrent.ConcurrentHashMap
  name: ConcurrentHashMap
  nameWithType: ConcurrentHashMap
  fullName: java.util.concurrent.ConcurrentHashMap
