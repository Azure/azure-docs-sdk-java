### YamlMime:JavaType
uid: "com.azure.cosmos.implementation.directconnectivity.rntbd.RntbdRequestRecord"
fullName: "com.azure.cosmos.implementation.directconnectivity.rntbd.RntbdRequestRecord"
name: "RntbdRequestRecord"
nameWithType: "RntbdRequestRecord"
inheritances:
- "<xref href=\"java.lang.Object\" data-throw-if-not-resolved=\"False\" />"
- "<xref href=\"java.util.concurrent.CompletableFuture\" data-throw-if-not-resolved=\"False\" />"
inheritedMembers:
- "java.lang.Object.clone()"
- "java.lang.Object.equals(java.lang.Object)"
- "java.lang.Object.finalize()"
- "java.lang.Object.getClass()"
- "java.lang.Object.hashCode()"
- "java.lang.Object.notify()"
- "java.lang.Object.notifyAll()"
- "java.lang.Object.wait()"
- "java.lang.Object.wait(long)"
- "java.lang.Object.wait(long,int)"
- "java.util.concurrent.CompletableFuture.<U,V>thenCombine(java.util.concurrent.CompletionStage<? extends U>,java.util.function.BiFunction<? super T,? super U,? extends V>)"
- "java.util.concurrent.CompletableFuture.<U,V>thenCombineAsync(java.util.concurrent.CompletionStage<? extends U>,java.util.function.BiFunction<? super T,? super U,? extends V>)"
- "java.util.concurrent.CompletableFuture.<U,V>thenCombineAsync(java.util.concurrent.CompletionStage<? extends U>,java.util.function.BiFunction<? super T,? super U,? extends V>,java.util.concurrent.Executor)"
- "java.util.concurrent.CompletableFuture.<U>applyToEither(java.util.concurrent.CompletionStage<? extends T>,java.util.function.Function<? super T,U>)"
- "java.util.concurrent.CompletableFuture.<U>applyToEitherAsync(java.util.concurrent.CompletionStage<? extends T>,java.util.function.Function<? super T,U>)"
- "java.util.concurrent.CompletableFuture.<U>applyToEitherAsync(java.util.concurrent.CompletionStage<? extends T>,java.util.function.Function<? super T,U>,java.util.concurrent.Executor)"
- "java.util.concurrent.CompletableFuture.<U>completedFuture(U)"
- "java.util.concurrent.CompletableFuture.<U>completedStage(U)"
- "java.util.concurrent.CompletableFuture.<U>failedFuture(java.lang.Throwable)"
- "java.util.concurrent.CompletableFuture.<U>failedStage(java.lang.Throwable)"
- "java.util.concurrent.CompletableFuture.<U>handle(java.util.function.BiFunction<? super T,java.lang.Throwable,? extends U>)"
- "java.util.concurrent.CompletableFuture.<U>handleAsync(java.util.function.BiFunction<? super T,java.lang.Throwable,? extends U>)"
- "java.util.concurrent.CompletableFuture.<U>handleAsync(java.util.function.BiFunction<? super T,java.lang.Throwable,? extends U>,java.util.concurrent.Executor)"
- "java.util.concurrent.CompletableFuture.<U>newIncompleteFuture()"
- "java.util.concurrent.CompletableFuture.<U>supplyAsync(java.util.function.Supplier<U>)"
- "java.util.concurrent.CompletableFuture.<U>supplyAsync(java.util.function.Supplier<U>,java.util.concurrent.Executor)"
- "java.util.concurrent.CompletableFuture.<U>thenAcceptBoth(java.util.concurrent.CompletionStage<? extends U>,java.util.function.BiConsumer<? super T,? super U>)"
- "java.util.concurrent.CompletableFuture.<U>thenAcceptBothAsync(java.util.concurrent.CompletionStage<? extends U>,java.util.function.BiConsumer<? super T,? super U>)"
- "java.util.concurrent.CompletableFuture.<U>thenAcceptBothAsync(java.util.concurrent.CompletionStage<? extends U>,java.util.function.BiConsumer<? super T,? super U>,java.util.concurrent.Executor)"
- "java.util.concurrent.CompletableFuture.<U>thenApply(java.util.function.Function<? super T,? extends U>)"
- "java.util.concurrent.CompletableFuture.<U>thenApplyAsync(java.util.function.Function<? super T,? extends U>)"
- "java.util.concurrent.CompletableFuture.<U>thenApplyAsync(java.util.function.Function<? super T,? extends U>,java.util.concurrent.Executor)"
- "java.util.concurrent.CompletableFuture.<U>thenCompose(java.util.function.Function<? super T,? extends java.util.concurrent.CompletionStage<U>>)"
- "java.util.concurrent.CompletableFuture.<U>thenComposeAsync(java.util.function.Function<? super T,? extends java.util.concurrent.CompletionStage<U>>)"
- "java.util.concurrent.CompletableFuture.<U>thenComposeAsync(java.util.function.Function<? super T,? extends java.util.concurrent.CompletionStage<U>>,java.util.concurrent.Executor)"
- "java.util.concurrent.CompletableFuture.acceptEither(java.util.concurrent.CompletionStage<? extends T>,java.util.function.Consumer<? super T>)"
- "java.util.concurrent.CompletableFuture.acceptEitherAsync(java.util.concurrent.CompletionStage<? extends T>,java.util.function.Consumer<? super T>)"
- "java.util.concurrent.CompletableFuture.acceptEitherAsync(java.util.concurrent.CompletionStage<? extends T>,java.util.function.Consumer<? super T>,java.util.concurrent.Executor)"
- "java.util.concurrent.CompletableFuture.allOf(java.util.concurrent.CompletableFuture<?>...)"
- "java.util.concurrent.CompletableFuture.anyOf(java.util.concurrent.CompletableFuture<?>...)"
- "java.util.concurrent.CompletableFuture.cancel(boolean)"
- "java.util.concurrent.CompletableFuture.complete(T)"
- "java.util.concurrent.CompletableFuture.completeAsync(java.util.function.Supplier<? extends T>)"
- "java.util.concurrent.CompletableFuture.completeAsync(java.util.function.Supplier<? extends T>,java.util.concurrent.Executor)"
- "java.util.concurrent.CompletableFuture.completeExceptionally(java.lang.Throwable)"
- "java.util.concurrent.CompletableFuture.completeOnTimeout(T,long,java.util.concurrent.TimeUnit)"
- "java.util.concurrent.CompletableFuture.copy()"
- "java.util.concurrent.CompletableFuture.defaultExecutor()"
- "java.util.concurrent.CompletableFuture.delayedExecutor(long,java.util.concurrent.TimeUnit)"
- "java.util.concurrent.CompletableFuture.delayedExecutor(long,java.util.concurrent.TimeUnit,java.util.concurrent.Executor)"
- "java.util.concurrent.CompletableFuture.exceptionally(java.util.function.Function<java.lang.Throwable,? extends T>)"
- "java.util.concurrent.CompletableFuture.get()"
- "java.util.concurrent.CompletableFuture.get(long,java.util.concurrent.TimeUnit)"
- "java.util.concurrent.CompletableFuture.getNow(T)"
- "java.util.concurrent.CompletableFuture.getNumberOfDependents()"
- "java.util.concurrent.CompletableFuture.isCancelled()"
- "java.util.concurrent.CompletableFuture.isCompletedExceptionally()"
- "java.util.concurrent.CompletableFuture.isDone()"
- "java.util.concurrent.CompletableFuture.join()"
- "java.util.concurrent.CompletableFuture.minimalCompletionStage()"
- "java.util.concurrent.CompletableFuture.obtrudeException(java.lang.Throwable)"
- "java.util.concurrent.CompletableFuture.obtrudeValue(T)"
- "java.util.concurrent.CompletableFuture.orTimeout(long,java.util.concurrent.TimeUnit)"
- "java.util.concurrent.CompletableFuture.runAfterBoth(java.util.concurrent.CompletionStage<?>,java.lang.Runnable)"
- "java.util.concurrent.CompletableFuture.runAfterBothAsync(java.util.concurrent.CompletionStage<?>,java.lang.Runnable)"
- "java.util.concurrent.CompletableFuture.runAfterBothAsync(java.util.concurrent.CompletionStage<?>,java.lang.Runnable,java.util.concurrent.Executor)"
- "java.util.concurrent.CompletableFuture.runAfterEither(java.util.concurrent.CompletionStage<?>,java.lang.Runnable)"
- "java.util.concurrent.CompletableFuture.runAfterEitherAsync(java.util.concurrent.CompletionStage<?>,java.lang.Runnable)"
- "java.util.concurrent.CompletableFuture.runAfterEitherAsync(java.util.concurrent.CompletionStage<?>,java.lang.Runnable,java.util.concurrent.Executor)"
- "java.util.concurrent.CompletableFuture.runAsync(java.lang.Runnable)"
- "java.util.concurrent.CompletableFuture.runAsync(java.lang.Runnable,java.util.concurrent.Executor)"
- "java.util.concurrent.CompletableFuture.thenAccept(java.util.function.Consumer<? super T>)"
- "java.util.concurrent.CompletableFuture.thenAcceptAsync(java.util.function.Consumer<? super T>)"
- "java.util.concurrent.CompletableFuture.thenAcceptAsync(java.util.function.Consumer<? super T>,java.util.concurrent.Executor)"
- "java.util.concurrent.CompletableFuture.thenRun(java.lang.Runnable)"
- "java.util.concurrent.CompletableFuture.thenRunAsync(java.lang.Runnable)"
- "java.util.concurrent.CompletableFuture.thenRunAsync(java.lang.Runnable,java.util.concurrent.Executor)"
- "java.util.concurrent.CompletableFuture.toCompletableFuture()"
- "java.util.concurrent.CompletableFuture.toString()"
- "java.util.concurrent.CompletableFuture.whenComplete(java.util.function.BiConsumer<? super T,? super java.lang.Throwable>)"
- "java.util.concurrent.CompletableFuture.whenCompleteAsync(java.util.function.BiConsumer<? super T,? super java.lang.Throwable>)"
- "java.util.concurrent.CompletableFuture.whenCompleteAsync(java.util.function.BiConsumer<? super T,? super java.lang.Throwable>,java.util.concurrent.Executor)"
syntax: "public final class RntbdRequestRecord extends CompletableFuture<StoreResponse>"
constructors:
- "com.azure.cosmos.implementation.directconnectivity.rntbd.RntbdRequestRecord.RntbdRequestRecord(com.azure.cosmos.implementation.directconnectivity.rntbd.RntbdRequestArgs,com.azure.cosmos.implementation.directconnectivity.rntbd.RntbdRequestTimer)"
methods:
- "com.azure.cosmos.implementation.directconnectivity.rntbd.RntbdRequestRecord.activityId()"
- "com.azure.cosmos.implementation.directconnectivity.rntbd.RntbdRequestRecord.args()"
- "com.azure.cosmos.implementation.directconnectivity.rntbd.RntbdRequestRecord.expire()"
- "com.azure.cosmos.implementation.directconnectivity.rntbd.RntbdRequestRecord.lifetime()"
- "com.azure.cosmos.implementation.directconnectivity.rntbd.RntbdRequestRecord.newTimeout(io.netty.util.TimerTask)"
- "com.azure.cosmos.implementation.directconnectivity.rntbd.RntbdRequestRecord.requestLength()"
- "com.azure.cosmos.implementation.directconnectivity.rntbd.RntbdRequestRecord.responseLength()"
- "com.azure.cosmos.implementation.directconnectivity.rntbd.RntbdRequestRecord.stage()"
- "com.azure.cosmos.implementation.directconnectivity.rntbd.RntbdRequestRecord.stage(com.azure.cosmos.implementation.directconnectivity.rntbd.RntbdRequestRecord.Stage)"
- "com.azure.cosmos.implementation.directconnectivity.rntbd.RntbdRequestRecord.stop(io.micrometer.core.instrument.Timer,io.micrometer.core.instrument.Timer)"
- "com.azure.cosmos.implementation.directconnectivity.rntbd.RntbdRequestRecord.takeTimelineSnapshot()"
- "com.azure.cosmos.implementation.directconnectivity.rntbd.RntbdRequestRecord.timeCompleted()"
- "com.azure.cosmos.implementation.directconnectivity.rntbd.RntbdRequestRecord.timeCreated()"
- "com.azure.cosmos.implementation.directconnectivity.rntbd.RntbdRequestRecord.timePipelined()"
- "com.azure.cosmos.implementation.directconnectivity.rntbd.RntbdRequestRecord.timeQueued()"
- "com.azure.cosmos.implementation.directconnectivity.rntbd.RntbdRequestRecord.timeReceived()"
- "com.azure.cosmos.implementation.directconnectivity.rntbd.RntbdRequestRecord.timeSent()"
- "com.azure.cosmos.implementation.directconnectivity.rntbd.RntbdRequestRecord.toString()"
- "com.azure.cosmos.implementation.directconnectivity.rntbd.RntbdRequestRecord.transportRequestId()"
type: "class"
metadata: {}
package: "com.azure.cosmos.implementation.directconnectivity.rntbd"
artifact: com.azure:azure-cosmos:4.4.0-beta.1
