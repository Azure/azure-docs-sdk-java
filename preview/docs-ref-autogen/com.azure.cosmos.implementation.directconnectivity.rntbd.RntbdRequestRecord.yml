### YamlMime:ManagedReference
items:
- uid: com.azure.cosmos.implementation.directconnectivity.rntbd.RntbdRequestRecord
  id: RntbdRequestRecord
  artifact: com.azure:azure-cosmos:4.0.1-beta.1
  parent: com.azure.cosmos.implementation.directconnectivity.rntbd
  children:
  - com.azure.cosmos.implementation.directconnectivity.rntbd.RntbdRequestRecord.RntbdRequestRecord(com.azure.cosmos.implementation.directconnectivity.rntbd.RntbdRequestArgs,com.azure.cosmos.implementation.directconnectivity.rntbd.RntbdRequestTimer)
  - com.azure.cosmos.implementation.directconnectivity.rntbd.RntbdRequestRecord.Stage
  - com.azure.cosmos.implementation.directconnectivity.rntbd.RntbdRequestRecord.activityId()
  - com.azure.cosmos.implementation.directconnectivity.rntbd.RntbdRequestRecord.args()
  - com.azure.cosmos.implementation.directconnectivity.rntbd.RntbdRequestRecord.expire()
  - com.azure.cosmos.implementation.directconnectivity.rntbd.RntbdRequestRecord.lifetime()
  - com.azure.cosmos.implementation.directconnectivity.rntbd.RntbdRequestRecord.newTimeout(io.netty.util.TimerTask)
  - com.azure.cosmos.implementation.directconnectivity.rntbd.RntbdRequestRecord.requestLength()
  - com.azure.cosmos.implementation.directconnectivity.rntbd.RntbdRequestRecord.responseLength()
  - com.azure.cosmos.implementation.directconnectivity.rntbd.RntbdRequestRecord.stage()
  - com.azure.cosmos.implementation.directconnectivity.rntbd.RntbdRequestRecord.stage(com.azure.cosmos.implementation.directconnectivity.rntbd.RntbdRequestRecord.Stage)
  - com.azure.cosmos.implementation.directconnectivity.rntbd.RntbdRequestRecord.stop(io.micrometer.core.instrument.Timer,io.micrometer.core.instrument.Timer)
  - com.azure.cosmos.implementation.directconnectivity.rntbd.RntbdRequestRecord.takeTimelineSnapshot()
  - com.azure.cosmos.implementation.directconnectivity.rntbd.RntbdRequestRecord.timeCompleted()
  - com.azure.cosmos.implementation.directconnectivity.rntbd.RntbdRequestRecord.timeCreated()
  - com.azure.cosmos.implementation.directconnectivity.rntbd.RntbdRequestRecord.timePipelined()
  - com.azure.cosmos.implementation.directconnectivity.rntbd.RntbdRequestRecord.timeQueued()
  - com.azure.cosmos.implementation.directconnectivity.rntbd.RntbdRequestRecord.timeReceived()
  - com.azure.cosmos.implementation.directconnectivity.rntbd.RntbdRequestRecord.timeSent()
  - com.azure.cosmos.implementation.directconnectivity.rntbd.RntbdRequestRecord.toString()
  - com.azure.cosmos.implementation.directconnectivity.rntbd.RntbdRequestRecord.transportRequestId()
  langs:
  - java
  name: RntbdRequestRecord
  nameWithType: RntbdRequestRecord
  fullName: com.azure.cosmos.implementation.directconnectivity.rntbd.RntbdRequestRecord
  type: Class
  package: com.azure.cosmos.implementation.directconnectivity.rntbd
  syntax:
    content: public final class RntbdRequestRecord extends CompletableFuture<StoreResponse>
  inheritance:
  - java.lang.Object
  - java.util.concurrent.CompletableFuture
  inheritedMembers:
  - java.lang.Object.clone()
  - java.lang.Object.equals(java.lang.Object)
  - java.lang.Object.finalize()
  - java.lang.Object.getClass()
  - java.lang.Object.hashCode()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
  - java.util.concurrent.CompletableFuture.<U,V>thenCombine(java.util.concurrent.CompletionStage<? extends U>,java.util.function.BiFunction<? super T,? super U,? extends V>)
  - java.util.concurrent.CompletableFuture.<U,V>thenCombineAsync(java.util.concurrent.CompletionStage<? extends U>,java.util.function.BiFunction<? super T,? super U,? extends V>)
  - java.util.concurrent.CompletableFuture.<U,V>thenCombineAsync(java.util.concurrent.CompletionStage<? extends U>,java.util.function.BiFunction<? super T,? super U,? extends V>,java.util.concurrent.Executor)
  - java.util.concurrent.CompletableFuture.<U>applyToEither(java.util.concurrent.CompletionStage<? extends T>,java.util.function.Function<? super T,U>)
  - java.util.concurrent.CompletableFuture.<U>applyToEitherAsync(java.util.concurrent.CompletionStage<? extends T>,java.util.function.Function<? super T,U>)
  - java.util.concurrent.CompletableFuture.<U>applyToEitherAsync(java.util.concurrent.CompletionStage<? extends T>,java.util.function.Function<? super T,U>,java.util.concurrent.Executor)
  - java.util.concurrent.CompletableFuture.<U>completedFuture(U)
  - java.util.concurrent.CompletableFuture.<U>completedStage(U)
  - java.util.concurrent.CompletableFuture.<U>failedFuture(java.lang.Throwable)
  - java.util.concurrent.CompletableFuture.<U>failedStage(java.lang.Throwable)
  - java.util.concurrent.CompletableFuture.<U>handle(java.util.function.BiFunction<? super T,java.lang.Throwable,? extends U>)
  - java.util.concurrent.CompletableFuture.<U>handleAsync(java.util.function.BiFunction<? super T,java.lang.Throwable,? extends U>)
  - java.util.concurrent.CompletableFuture.<U>handleAsync(java.util.function.BiFunction<? super T,java.lang.Throwable,? extends U>,java.util.concurrent.Executor)
  - java.util.concurrent.CompletableFuture.<U>newIncompleteFuture()
  - java.util.concurrent.CompletableFuture.<U>supplyAsync(java.util.function.Supplier<U>)
  - java.util.concurrent.CompletableFuture.<U>supplyAsync(java.util.function.Supplier<U>,java.util.concurrent.Executor)
  - java.util.concurrent.CompletableFuture.<U>thenAcceptBoth(java.util.concurrent.CompletionStage<? extends U>,java.util.function.BiConsumer<? super T,? super U>)
  - java.util.concurrent.CompletableFuture.<U>thenAcceptBothAsync(java.util.concurrent.CompletionStage<? extends U>,java.util.function.BiConsumer<? super T,? super U>)
  - java.util.concurrent.CompletableFuture.<U>thenAcceptBothAsync(java.util.concurrent.CompletionStage<? extends U>,java.util.function.BiConsumer<? super T,? super U>,java.util.concurrent.Executor)
  - java.util.concurrent.CompletableFuture.<U>thenApply(java.util.function.Function<? super T,? extends U>)
  - java.util.concurrent.CompletableFuture.<U>thenApplyAsync(java.util.function.Function<? super T,? extends U>)
  - java.util.concurrent.CompletableFuture.<U>thenApplyAsync(java.util.function.Function<? super T,? extends U>,java.util.concurrent.Executor)
  - java.util.concurrent.CompletableFuture.<U>thenCompose(java.util.function.Function<? super T,? extends java.util.concurrent.CompletionStage<U>>)
  - java.util.concurrent.CompletableFuture.<U>thenComposeAsync(java.util.function.Function<? super T,? extends java.util.concurrent.CompletionStage<U>>)
  - java.util.concurrent.CompletableFuture.<U>thenComposeAsync(java.util.function.Function<? super T,? extends java.util.concurrent.CompletionStage<U>>,java.util.concurrent.Executor)
  - java.util.concurrent.CompletableFuture.acceptEither(java.util.concurrent.CompletionStage<? extends T>,java.util.function.Consumer<? super T>)
  - java.util.concurrent.CompletableFuture.acceptEitherAsync(java.util.concurrent.CompletionStage<? extends T>,java.util.function.Consumer<? super T>)
  - java.util.concurrent.CompletableFuture.acceptEitherAsync(java.util.concurrent.CompletionStage<? extends T>,java.util.function.Consumer<? super T>,java.util.concurrent.Executor)
  - java.util.concurrent.CompletableFuture.allOf(java.util.concurrent.CompletableFuture<?>...)
  - java.util.concurrent.CompletableFuture.anyOf(java.util.concurrent.CompletableFuture<?>...)
  - java.util.concurrent.CompletableFuture.cancel(boolean)
  - java.util.concurrent.CompletableFuture.complete(T)
  - java.util.concurrent.CompletableFuture.completeAsync(java.util.function.Supplier<? extends T>)
  - java.util.concurrent.CompletableFuture.completeAsync(java.util.function.Supplier<? extends T>,java.util.concurrent.Executor)
  - java.util.concurrent.CompletableFuture.completeExceptionally(java.lang.Throwable)
  - java.util.concurrent.CompletableFuture.completeOnTimeout(T,long,java.util.concurrent.TimeUnit)
  - java.util.concurrent.CompletableFuture.copy()
  - java.util.concurrent.CompletableFuture.defaultExecutor()
  - java.util.concurrent.CompletableFuture.delayedExecutor(long,java.util.concurrent.TimeUnit)
  - java.util.concurrent.CompletableFuture.delayedExecutor(long,java.util.concurrent.TimeUnit,java.util.concurrent.Executor)
  - java.util.concurrent.CompletableFuture.exceptionally(java.util.function.Function<java.lang.Throwable,? extends T>)
  - java.util.concurrent.CompletableFuture.get()
  - java.util.concurrent.CompletableFuture.get(long,java.util.concurrent.TimeUnit)
  - java.util.concurrent.CompletableFuture.getNow(T)
  - java.util.concurrent.CompletableFuture.getNumberOfDependents()
  - java.util.concurrent.CompletableFuture.isCancelled()
  - java.util.concurrent.CompletableFuture.isCompletedExceptionally()
  - java.util.concurrent.CompletableFuture.isDone()
  - java.util.concurrent.CompletableFuture.join()
  - java.util.concurrent.CompletableFuture.minimalCompletionStage()
  - java.util.concurrent.CompletableFuture.obtrudeException(java.lang.Throwable)
  - java.util.concurrent.CompletableFuture.obtrudeValue(T)
  - java.util.concurrent.CompletableFuture.orTimeout(long,java.util.concurrent.TimeUnit)
  - java.util.concurrent.CompletableFuture.runAfterBoth(java.util.concurrent.CompletionStage<?>,java.lang.Runnable)
  - java.util.concurrent.CompletableFuture.runAfterBothAsync(java.util.concurrent.CompletionStage<?>,java.lang.Runnable)
  - java.util.concurrent.CompletableFuture.runAfterBothAsync(java.util.concurrent.CompletionStage<?>,java.lang.Runnable,java.util.concurrent.Executor)
  - java.util.concurrent.CompletableFuture.runAfterEither(java.util.concurrent.CompletionStage<?>,java.lang.Runnable)
  - java.util.concurrent.CompletableFuture.runAfterEitherAsync(java.util.concurrent.CompletionStage<?>,java.lang.Runnable)
  - java.util.concurrent.CompletableFuture.runAfterEitherAsync(java.util.concurrent.CompletionStage<?>,java.lang.Runnable,java.util.concurrent.Executor)
  - java.util.concurrent.CompletableFuture.runAsync(java.lang.Runnable)
  - java.util.concurrent.CompletableFuture.runAsync(java.lang.Runnable,java.util.concurrent.Executor)
  - java.util.concurrent.CompletableFuture.thenAccept(java.util.function.Consumer<? super T>)
  - java.util.concurrent.CompletableFuture.thenAcceptAsync(java.util.function.Consumer<? super T>)
  - java.util.concurrent.CompletableFuture.thenAcceptAsync(java.util.function.Consumer<? super T>,java.util.concurrent.Executor)
  - java.util.concurrent.CompletableFuture.thenRun(java.lang.Runnable)
  - java.util.concurrent.CompletableFuture.thenRunAsync(java.lang.Runnable)
  - java.util.concurrent.CompletableFuture.thenRunAsync(java.lang.Runnable,java.util.concurrent.Executor)
  - java.util.concurrent.CompletableFuture.toCompletableFuture()
  - java.util.concurrent.CompletableFuture.toString()
  - java.util.concurrent.CompletableFuture.whenComplete(java.util.function.BiConsumer<? super T,? super java.lang.Throwable>)
  - java.util.concurrent.CompletableFuture.whenCompleteAsync(java.util.function.BiConsumer<? super T,? super java.lang.Throwable>)
  - java.util.concurrent.CompletableFuture.whenCompleteAsync(java.util.function.BiConsumer<? super T,? super java.lang.Throwable>,java.util.concurrent.Executor)
- uid: com.azure.cosmos.implementation.directconnectivity.rntbd.RntbdRequestRecord.RntbdRequestRecord(com.azure.cosmos.implementation.directconnectivity.rntbd.RntbdRequestArgs,com.azure.cosmos.implementation.directconnectivity.rntbd.RntbdRequestTimer)
  id: RntbdRequestRecord(com.azure.cosmos.implementation.directconnectivity.rntbd.RntbdRequestArgs,com.azure.cosmos.implementation.directconnectivity.rntbd.RntbdRequestTimer)
  artifact: com.azure:azure-cosmos:4.0.1-beta.1
  parent: com.azure.cosmos.implementation.directconnectivity.rntbd.RntbdRequestRecord
  langs:
  - java
  name: RntbdRequestRecord(RntbdRequestArgs args, RntbdRequestTimer timer)
  nameWithType: RntbdRequestRecord.RntbdRequestRecord(RntbdRequestArgs args, RntbdRequestTimer timer)
  fullName: com.azure.cosmos.implementation.directconnectivity.rntbd.RntbdRequestRecord.RntbdRequestRecord(RntbdRequestArgs args, RntbdRequestTimer timer)
  overload: com.azure.cosmos.implementation.directconnectivity.rntbd.RntbdRequestRecord.RntbdRequestRecord*
  type: Constructor
  package: com.azure.cosmos.implementation.directconnectivity.rntbd
  syntax:
    content: public RntbdRequestRecord(RntbdRequestArgs args, RntbdRequestTimer timer)
    parameters:
    - id: args
      type: com.azure.cosmos.implementation.directconnectivity.rntbd.RntbdRequestArgs
    - id: timer
      type: com.azure.cosmos.implementation.directconnectivity.rntbd.RntbdRequestTimer
- uid: com.azure.cosmos.implementation.directconnectivity.rntbd.RntbdRequestRecord.activityId()
  id: activityId()
  artifact: com.azure:azure-cosmos:4.0.1-beta.1
  parent: com.azure.cosmos.implementation.directconnectivity.rntbd.RntbdRequestRecord
  langs:
  - java
  name: activityId()
  nameWithType: RntbdRequestRecord.activityId()
  fullName: com.azure.cosmos.implementation.directconnectivity.rntbd.RntbdRequestRecord.activityId()
  overload: com.azure.cosmos.implementation.directconnectivity.rntbd.RntbdRequestRecord.activityId*
  type: Method
  package: com.azure.cosmos.implementation.directconnectivity.rntbd
  syntax:
    content: public UUID activityId()
    return:
      type: java.util.UUID
- uid: com.azure.cosmos.implementation.directconnectivity.rntbd.RntbdRequestRecord.args()
  id: args()
  artifact: com.azure:azure-cosmos:4.0.1-beta.1
  parent: com.azure.cosmos.implementation.directconnectivity.rntbd.RntbdRequestRecord
  langs:
  - java
  name: args()
  nameWithType: RntbdRequestRecord.args()
  fullName: com.azure.cosmos.implementation.directconnectivity.rntbd.RntbdRequestRecord.args()
  overload: com.azure.cosmos.implementation.directconnectivity.rntbd.RntbdRequestRecord.args*
  type: Method
  package: com.azure.cosmos.implementation.directconnectivity.rntbd
  syntax:
    content: public RntbdRequestArgs args()
    return:
      type: com.azure.cosmos.implementation.directconnectivity.rntbd.RntbdRequestArgs
- uid: com.azure.cosmos.implementation.directconnectivity.rntbd.RntbdRequestRecord.expire()
  id: expire()
  artifact: com.azure:azure-cosmos:4.0.1-beta.1
  parent: com.azure.cosmos.implementation.directconnectivity.rntbd.RntbdRequestRecord
  langs:
  - java
  name: expire()
  nameWithType: RntbdRequestRecord.expire()
  fullName: com.azure.cosmos.implementation.directconnectivity.rntbd.RntbdRequestRecord.expire()
  overload: com.azure.cosmos.implementation.directconnectivity.rntbd.RntbdRequestRecord.expire*
  type: Method
  package: com.azure.cosmos.implementation.directconnectivity.rntbd
  syntax:
    content: public boolean expire()
    return:
      type: boolean
- uid: com.azure.cosmos.implementation.directconnectivity.rntbd.RntbdRequestRecord.lifetime()
  id: lifetime()
  artifact: com.azure:azure-cosmos:4.0.1-beta.1
  parent: com.azure.cosmos.implementation.directconnectivity.rntbd.RntbdRequestRecord
  langs:
  - java
  name: lifetime()
  nameWithType: RntbdRequestRecord.lifetime()
  fullName: com.azure.cosmos.implementation.directconnectivity.rntbd.RntbdRequestRecord.lifetime()
  overload: com.azure.cosmos.implementation.directconnectivity.rntbd.RntbdRequestRecord.lifetime*
  type: Method
  package: com.azure.cosmos.implementation.directconnectivity.rntbd
  syntax:
    content: public Duration lifetime()
    return:
      type: java.time.Duration
- uid: com.azure.cosmos.implementation.directconnectivity.rntbd.RntbdRequestRecord.newTimeout(io.netty.util.TimerTask)
  id: newTimeout(io.netty.util.TimerTask)
  artifact: com.azure:azure-cosmos:4.0.1-beta.1
  parent: com.azure.cosmos.implementation.directconnectivity.rntbd.RntbdRequestRecord
  langs:
  - java
  name: newTimeout(TimerTask task)
  nameWithType: RntbdRequestRecord.newTimeout(TimerTask task)
  fullName: com.azure.cosmos.implementation.directconnectivity.rntbd.RntbdRequestRecord.newTimeout(TimerTask task)
  overload: com.azure.cosmos.implementation.directconnectivity.rntbd.RntbdRequestRecord.newTimeout*
  type: Method
  package: com.azure.cosmos.implementation.directconnectivity.rntbd
  syntax:
    content: public Timeout newTimeout(TimerTask task)
    parameters:
    - id: task
      type: io.netty.util.TimerTask
    return:
      type: io.netty.util.Timeout
- uid: com.azure.cosmos.implementation.directconnectivity.rntbd.RntbdRequestRecord.requestLength()
  id: requestLength()
  artifact: com.azure:azure-cosmos:4.0.1-beta.1
  parent: com.azure.cosmos.implementation.directconnectivity.rntbd.RntbdRequestRecord
  langs:
  - java
  name: requestLength()
  nameWithType: RntbdRequestRecord.requestLength()
  fullName: com.azure.cosmos.implementation.directconnectivity.rntbd.RntbdRequestRecord.requestLength()
  overload: com.azure.cosmos.implementation.directconnectivity.rntbd.RntbdRequestRecord.requestLength*
  type: Method
  package: com.azure.cosmos.implementation.directconnectivity.rntbd
  syntax:
    content: public int requestLength()
    return:
      type: int
- uid: com.azure.cosmos.implementation.directconnectivity.rntbd.RntbdRequestRecord.responseLength()
  id: responseLength()
  artifact: com.azure:azure-cosmos:4.0.1-beta.1
  parent: com.azure.cosmos.implementation.directconnectivity.rntbd.RntbdRequestRecord
  langs:
  - java
  name: responseLength()
  nameWithType: RntbdRequestRecord.responseLength()
  fullName: com.azure.cosmos.implementation.directconnectivity.rntbd.RntbdRequestRecord.responseLength()
  overload: com.azure.cosmos.implementation.directconnectivity.rntbd.RntbdRequestRecord.responseLength*
  type: Method
  package: com.azure.cosmos.implementation.directconnectivity.rntbd
  syntax:
    content: public int responseLength()
    return:
      type: int
- uid: com.azure.cosmos.implementation.directconnectivity.rntbd.RntbdRequestRecord.stage()
  id: stage()
  artifact: com.azure:azure-cosmos:4.0.1-beta.1
  parent: com.azure.cosmos.implementation.directconnectivity.rntbd.RntbdRequestRecord
  langs:
  - java
  name: stage()
  nameWithType: RntbdRequestRecord.stage()
  fullName: com.azure.cosmos.implementation.directconnectivity.rntbd.RntbdRequestRecord.stage()
  overload: com.azure.cosmos.implementation.directconnectivity.rntbd.RntbdRequestRecord.stage*
  type: Method
  package: com.azure.cosmos.implementation.directconnectivity.rntbd
  syntax:
    content: public RntbdRequestRecord.Stage stage()
    return:
      type: com.azure.cosmos.implementation.directconnectivity.rntbd.RntbdRequestRecord.Stage
- uid: com.azure.cosmos.implementation.directconnectivity.rntbd.RntbdRequestRecord.stage(com.azure.cosmos.implementation.directconnectivity.rntbd.RntbdRequestRecord.Stage)
  id: stage(com.azure.cosmos.implementation.directconnectivity.rntbd.RntbdRequestRecord.Stage)
  artifact: com.azure:azure-cosmos:4.0.1-beta.1
  parent: com.azure.cosmos.implementation.directconnectivity.rntbd.RntbdRequestRecord
  langs:
  - java
  name: stage(RntbdRequestRecord.Stage value)
  nameWithType: RntbdRequestRecord.stage(RntbdRequestRecord.Stage value)
  fullName: com.azure.cosmos.implementation.directconnectivity.rntbd.RntbdRequestRecord.stage(RntbdRequestRecord.Stage value)
  overload: com.azure.cosmos.implementation.directconnectivity.rntbd.RntbdRequestRecord.stage*
  type: Method
  package: com.azure.cosmos.implementation.directconnectivity.rntbd
  syntax:
    content: public RntbdRequestRecord stage(RntbdRequestRecord.Stage value)
    parameters:
    - id: value
      type: com.azure.cosmos.implementation.directconnectivity.rntbd.RntbdRequestRecord.Stage
    return:
      type: com.azure.cosmos.implementation.directconnectivity.rntbd.RntbdRequestRecord
- uid: com.azure.cosmos.implementation.directconnectivity.rntbd.RntbdRequestRecord.stop(io.micrometer.core.instrument.Timer,io.micrometer.core.instrument.Timer)
  id: stop(io.micrometer.core.instrument.Timer,io.micrometer.core.instrument.Timer)
  artifact: com.azure:azure-cosmos:4.0.1-beta.1
  parent: com.azure.cosmos.implementation.directconnectivity.rntbd.RntbdRequestRecord
  langs:
  - java
  name: stop(Timer requests, Timer responses)
  nameWithType: RntbdRequestRecord.stop(Timer requests, Timer responses)
  fullName: com.azure.cosmos.implementation.directconnectivity.rntbd.RntbdRequestRecord.stop(Timer requests, Timer responses)
  overload: com.azure.cosmos.implementation.directconnectivity.rntbd.RntbdRequestRecord.stop*
  type: Method
  package: com.azure.cosmos.implementation.directconnectivity.rntbd
  syntax:
    content: public long stop(Timer requests, Timer responses)
    parameters:
    - id: requests
      type: io.micrometer.core.instrument.Timer
    - id: responses
      type: io.micrometer.core.instrument.Timer
    return:
      type: long
- uid: com.azure.cosmos.implementation.directconnectivity.rntbd.RntbdRequestRecord.takeTimelineSnapshot()
  id: takeTimelineSnapshot()
  artifact: com.azure:azure-cosmos:4.0.1-beta.1
  parent: com.azure.cosmos.implementation.directconnectivity.rntbd.RntbdRequestRecord
  langs:
  - java
  name: takeTimelineSnapshot()
  nameWithType: RntbdRequestRecord.takeTimelineSnapshot()
  fullName: com.azure.cosmos.implementation.directconnectivity.rntbd.RntbdRequestRecord.takeTimelineSnapshot()
  overload: com.azure.cosmos.implementation.directconnectivity.rntbd.RntbdRequestRecord.takeTimelineSnapshot*
  type: Method
  package: com.azure.cosmos.implementation.directconnectivity.rntbd
  syntax:
    content: public RequestTimeline takeTimelineSnapshot()
    return:
      type: com.azure.cosmos.implementation.RequestTimeline
- uid: com.azure.cosmos.implementation.directconnectivity.rntbd.RntbdRequestRecord.timeCompleted()
  id: timeCompleted()
  artifact: com.azure:azure-cosmos:4.0.1-beta.1
  parent: com.azure.cosmos.implementation.directconnectivity.rntbd.RntbdRequestRecord
  langs:
  - java
  name: timeCompleted()
  nameWithType: RntbdRequestRecord.timeCompleted()
  fullName: com.azure.cosmos.implementation.directconnectivity.rntbd.RntbdRequestRecord.timeCompleted()
  overload: com.azure.cosmos.implementation.directconnectivity.rntbd.RntbdRequestRecord.timeCompleted*
  type: Method
  package: com.azure.cosmos.implementation.directconnectivity.rntbd
  syntax:
    content: public OffsetDateTime timeCompleted()
    return:
      type: java.time.OffsetDateTime
- uid: com.azure.cosmos.implementation.directconnectivity.rntbd.RntbdRequestRecord.timeCreated()
  id: timeCreated()
  artifact: com.azure:azure-cosmos:4.0.1-beta.1
  parent: com.azure.cosmos.implementation.directconnectivity.rntbd.RntbdRequestRecord
  langs:
  - java
  name: timeCreated()
  nameWithType: RntbdRequestRecord.timeCreated()
  fullName: com.azure.cosmos.implementation.directconnectivity.rntbd.RntbdRequestRecord.timeCreated()
  overload: com.azure.cosmos.implementation.directconnectivity.rntbd.RntbdRequestRecord.timeCreated*
  type: Method
  package: com.azure.cosmos.implementation.directconnectivity.rntbd
  syntax:
    content: public OffsetDateTime timeCreated()
    return:
      type: java.time.OffsetDateTime
- uid: com.azure.cosmos.implementation.directconnectivity.rntbd.RntbdRequestRecord.timePipelined()
  id: timePipelined()
  artifact: com.azure:azure-cosmos:4.0.1-beta.1
  parent: com.azure.cosmos.implementation.directconnectivity.rntbd.RntbdRequestRecord
  langs:
  - java
  name: timePipelined()
  nameWithType: RntbdRequestRecord.timePipelined()
  fullName: com.azure.cosmos.implementation.directconnectivity.rntbd.RntbdRequestRecord.timePipelined()
  overload: com.azure.cosmos.implementation.directconnectivity.rntbd.RntbdRequestRecord.timePipelined*
  type: Method
  package: com.azure.cosmos.implementation.directconnectivity.rntbd
  syntax:
    content: public OffsetDateTime timePipelined()
    return:
      type: java.time.OffsetDateTime
- uid: com.azure.cosmos.implementation.directconnectivity.rntbd.RntbdRequestRecord.timeQueued()
  id: timeQueued()
  artifact: com.azure:azure-cosmos:4.0.1-beta.1
  parent: com.azure.cosmos.implementation.directconnectivity.rntbd.RntbdRequestRecord
  langs:
  - java
  name: timeQueued()
  nameWithType: RntbdRequestRecord.timeQueued()
  fullName: com.azure.cosmos.implementation.directconnectivity.rntbd.RntbdRequestRecord.timeQueued()
  overload: com.azure.cosmos.implementation.directconnectivity.rntbd.RntbdRequestRecord.timeQueued*
  type: Method
  package: com.azure.cosmos.implementation.directconnectivity.rntbd
  syntax:
    content: public OffsetDateTime timeQueued()
    return:
      type: java.time.OffsetDateTime
- uid: com.azure.cosmos.implementation.directconnectivity.rntbd.RntbdRequestRecord.timeReceived()
  id: timeReceived()
  artifact: com.azure:azure-cosmos:4.0.1-beta.1
  parent: com.azure.cosmos.implementation.directconnectivity.rntbd.RntbdRequestRecord
  langs:
  - java
  name: timeReceived()
  nameWithType: RntbdRequestRecord.timeReceived()
  fullName: com.azure.cosmos.implementation.directconnectivity.rntbd.RntbdRequestRecord.timeReceived()
  overload: com.azure.cosmos.implementation.directconnectivity.rntbd.RntbdRequestRecord.timeReceived*
  type: Method
  package: com.azure.cosmos.implementation.directconnectivity.rntbd
  syntax:
    content: public OffsetDateTime timeReceived()
    return:
      type: java.time.OffsetDateTime
- uid: com.azure.cosmos.implementation.directconnectivity.rntbd.RntbdRequestRecord.timeSent()
  id: timeSent()
  artifact: com.azure:azure-cosmos:4.0.1-beta.1
  parent: com.azure.cosmos.implementation.directconnectivity.rntbd.RntbdRequestRecord
  langs:
  - java
  name: timeSent()
  nameWithType: RntbdRequestRecord.timeSent()
  fullName: com.azure.cosmos.implementation.directconnectivity.rntbd.RntbdRequestRecord.timeSent()
  overload: com.azure.cosmos.implementation.directconnectivity.rntbd.RntbdRequestRecord.timeSent*
  type: Method
  package: com.azure.cosmos.implementation.directconnectivity.rntbd
  syntax:
    content: public OffsetDateTime timeSent()
    return:
      type: java.time.OffsetDateTime
- uid: com.azure.cosmos.implementation.directconnectivity.rntbd.RntbdRequestRecord.toString()
  id: toString()
  artifact: com.azure:azure-cosmos:4.0.1-beta.1
  parent: com.azure.cosmos.implementation.directconnectivity.rntbd.RntbdRequestRecord
  langs:
  - java
  name: toString()
  nameWithType: RntbdRequestRecord.toString()
  fullName: com.azure.cosmos.implementation.directconnectivity.rntbd.RntbdRequestRecord.toString()
  overload: com.azure.cosmos.implementation.directconnectivity.rntbd.RntbdRequestRecord.toString*
  type: Method
  package: com.azure.cosmos.implementation.directconnectivity.rntbd
  syntax:
    content: public String toString()
    return:
      type: java.lang.String
- uid: com.azure.cosmos.implementation.directconnectivity.rntbd.RntbdRequestRecord.transportRequestId()
  id: transportRequestId()
  artifact: com.azure:azure-cosmos:4.0.1-beta.1
  parent: com.azure.cosmos.implementation.directconnectivity.rntbd.RntbdRequestRecord
  langs:
  - java
  name: transportRequestId()
  nameWithType: RntbdRequestRecord.transportRequestId()
  fullName: com.azure.cosmos.implementation.directconnectivity.rntbd.RntbdRequestRecord.transportRequestId()
  overload: com.azure.cosmos.implementation.directconnectivity.rntbd.RntbdRequestRecord.transportRequestId*
  type: Method
  package: com.azure.cosmos.implementation.directconnectivity.rntbd
  syntax:
    content: public long transportRequestId()
    return:
      type: long
references:
- uid: com.azure.cosmos.implementation.directconnectivity.rntbd.RntbdRequestArgs
  name: RntbdRequestArgs
  nameWithType: RntbdRequestArgs
  fullName: com.azure.cosmos.implementation.directconnectivity.rntbd.RntbdRequestArgs
- uid: com.azure.cosmos.implementation.directconnectivity.rntbd.RntbdRequestTimer
  name: RntbdRequestTimer
  nameWithType: RntbdRequestTimer
  fullName: com.azure.cosmos.implementation.directconnectivity.rntbd.RntbdRequestTimer
- uid: com.azure.cosmos.implementation.directconnectivity.rntbd.RntbdRequestRecord.RntbdRequestRecord*
  name: RntbdRequestRecord
  nameWithType: RntbdRequestRecord.RntbdRequestRecord
  fullName: com.azure.cosmos.implementation.directconnectivity.rntbd.RntbdRequestRecord.RntbdRequestRecord
  package: com.azure.cosmos.implementation.directconnectivity.rntbd
- uid: java.util.UUID
  spec.java:
  - uid: java.util.UUID
    name: UUID
    fullName: java.util.UUID
- uid: com.azure.cosmos.implementation.directconnectivity.rntbd.RntbdRequestRecord.activityId*
  name: activityId
  nameWithType: RntbdRequestRecord.activityId
  fullName: com.azure.cosmos.implementation.directconnectivity.rntbd.RntbdRequestRecord.activityId
  package: com.azure.cosmos.implementation.directconnectivity.rntbd
- uid: com.azure.cosmos.implementation.directconnectivity.rntbd.RntbdRequestRecord.args*
  name: args
  nameWithType: RntbdRequestRecord.args
  fullName: com.azure.cosmos.implementation.directconnectivity.rntbd.RntbdRequestRecord.args
  package: com.azure.cosmos.implementation.directconnectivity.rntbd
- uid: java.time.Duration
  spec.java:
  - uid: java.time.Duration
    name: Duration
    fullName: java.time.Duration
- uid: com.azure.cosmos.implementation.directconnectivity.rntbd.RntbdRequestRecord.lifetime*
  name: lifetime
  nameWithType: RntbdRequestRecord.lifetime
  fullName: com.azure.cosmos.implementation.directconnectivity.rntbd.RntbdRequestRecord.lifetime
  package: com.azure.cosmos.implementation.directconnectivity.rntbd
- uid: int
  spec.java:
  - uid: int
    name: int
    fullName: int
- uid: com.azure.cosmos.implementation.directconnectivity.rntbd.RntbdRequestRecord.requestLength*
  name: requestLength
  nameWithType: RntbdRequestRecord.requestLength
  fullName: com.azure.cosmos.implementation.directconnectivity.rntbd.RntbdRequestRecord.requestLength
  package: com.azure.cosmos.implementation.directconnectivity.rntbd
- uid: com.azure.cosmos.implementation.directconnectivity.rntbd.RntbdRequestRecord.responseLength*
  name: responseLength
  nameWithType: RntbdRequestRecord.responseLength
  fullName: com.azure.cosmos.implementation.directconnectivity.rntbd.RntbdRequestRecord.responseLength
  package: com.azure.cosmos.implementation.directconnectivity.rntbd
- uid: com.azure.cosmos.implementation.directconnectivity.rntbd.RntbdRequestRecord.Stage
  name: RntbdRequestRecord.Stage
  nameWithType: RntbdRequestRecord.Stage
  fullName: com.azure.cosmos.implementation.directconnectivity.rntbd.RntbdRequestRecord.Stage
- uid: com.azure.cosmos.implementation.directconnectivity.rntbd.RntbdRequestRecord.stage*
  name: stage
  nameWithType: RntbdRequestRecord.stage
  fullName: com.azure.cosmos.implementation.directconnectivity.rntbd.RntbdRequestRecord.stage
  package: com.azure.cosmos.implementation.directconnectivity.rntbd
- uid: java.time.OffsetDateTime
  spec.java:
  - uid: java.time.OffsetDateTime
    name: OffsetDateTime
    fullName: java.time.OffsetDateTime
- uid: com.azure.cosmos.implementation.directconnectivity.rntbd.RntbdRequestRecord.timeCompleted*
  name: timeCompleted
  nameWithType: RntbdRequestRecord.timeCompleted
  fullName: com.azure.cosmos.implementation.directconnectivity.rntbd.RntbdRequestRecord.timeCompleted
  package: com.azure.cosmos.implementation.directconnectivity.rntbd
- uid: com.azure.cosmos.implementation.directconnectivity.rntbd.RntbdRequestRecord.timeCreated*
  name: timeCreated
  nameWithType: RntbdRequestRecord.timeCreated
  fullName: com.azure.cosmos.implementation.directconnectivity.rntbd.RntbdRequestRecord.timeCreated
  package: com.azure.cosmos.implementation.directconnectivity.rntbd
- uid: com.azure.cosmos.implementation.directconnectivity.rntbd.RntbdRequestRecord.timePipelined*
  name: timePipelined
  nameWithType: RntbdRequestRecord.timePipelined
  fullName: com.azure.cosmos.implementation.directconnectivity.rntbd.RntbdRequestRecord.timePipelined
  package: com.azure.cosmos.implementation.directconnectivity.rntbd
- uid: com.azure.cosmos.implementation.directconnectivity.rntbd.RntbdRequestRecord.timeQueued*
  name: timeQueued
  nameWithType: RntbdRequestRecord.timeQueued
  fullName: com.azure.cosmos.implementation.directconnectivity.rntbd.RntbdRequestRecord.timeQueued
  package: com.azure.cosmos.implementation.directconnectivity.rntbd
- uid: com.azure.cosmos.implementation.directconnectivity.rntbd.RntbdRequestRecord.timeReceived*
  name: timeReceived
  nameWithType: RntbdRequestRecord.timeReceived
  fullName: com.azure.cosmos.implementation.directconnectivity.rntbd.RntbdRequestRecord.timeReceived
  package: com.azure.cosmos.implementation.directconnectivity.rntbd
- uid: com.azure.cosmos.implementation.directconnectivity.rntbd.RntbdRequestRecord.timeSent*
  name: timeSent
  nameWithType: RntbdRequestRecord.timeSent
  fullName: com.azure.cosmos.implementation.directconnectivity.rntbd.RntbdRequestRecord.timeSent
  package: com.azure.cosmos.implementation.directconnectivity.rntbd
- uid: long
  spec.java:
  - uid: long
    name: long
    fullName: long
- uid: com.azure.cosmos.implementation.directconnectivity.rntbd.RntbdRequestRecord.transportRequestId*
  name: transportRequestId
  nameWithType: RntbdRequestRecord.transportRequestId
  fullName: com.azure.cosmos.implementation.directconnectivity.rntbd.RntbdRequestRecord.transportRequestId
  package: com.azure.cosmos.implementation.directconnectivity.rntbd
- uid: boolean
  spec.java:
  - uid: boolean
    name: boolean
    fullName: boolean
- uid: com.azure.cosmos.implementation.directconnectivity.rntbd.RntbdRequestRecord.expire*
  name: expire
  nameWithType: RntbdRequestRecord.expire
  fullName: com.azure.cosmos.implementation.directconnectivity.rntbd.RntbdRequestRecord.expire
  package: com.azure.cosmos.implementation.directconnectivity.rntbd
- uid: io.netty.util.TimerTask
  spec.java:
  - uid: io.netty.util.TimerTask
    name: TimerTask
    fullName: io.netty.util.TimerTask
- uid: io.netty.util.Timeout
  spec.java:
  - uid: io.netty.util.Timeout
    name: Timeout
    fullName: io.netty.util.Timeout
- uid: com.azure.cosmos.implementation.directconnectivity.rntbd.RntbdRequestRecord.newTimeout*
  name: newTimeout
  nameWithType: RntbdRequestRecord.newTimeout
  fullName: com.azure.cosmos.implementation.directconnectivity.rntbd.RntbdRequestRecord.newTimeout
  package: com.azure.cosmos.implementation.directconnectivity.rntbd
- uid: com.azure.cosmos.implementation.RequestTimeline
  name: RequestTimeline
  nameWithType: RequestTimeline
  fullName: com.azure.cosmos.implementation.RequestTimeline
- uid: com.azure.cosmos.implementation.directconnectivity.rntbd.RntbdRequestRecord.takeTimelineSnapshot*
  name: takeTimelineSnapshot
  nameWithType: RntbdRequestRecord.takeTimelineSnapshot
  fullName: com.azure.cosmos.implementation.directconnectivity.rntbd.RntbdRequestRecord.takeTimelineSnapshot
  package: com.azure.cosmos.implementation.directconnectivity.rntbd
- uid: io.micrometer.core.instrument.Timer
  spec.java:
  - uid: io.micrometer.core.instrument.Timer
    name: Timer
    fullName: io.micrometer.core.instrument.Timer
- uid: com.azure.cosmos.implementation.directconnectivity.rntbd.RntbdRequestRecord.stop*
  name: stop
  nameWithType: RntbdRequestRecord.stop
  fullName: com.azure.cosmos.implementation.directconnectivity.rntbd.RntbdRequestRecord.stop
  package: com.azure.cosmos.implementation.directconnectivity.rntbd
- uid: java.lang.String
  spec.java:
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
- uid: com.azure.cosmos.implementation.directconnectivity.rntbd.RntbdRequestRecord.toString*
  name: toString
  nameWithType: RntbdRequestRecord.toString
  fullName: com.azure.cosmos.implementation.directconnectivity.rntbd.RntbdRequestRecord.toString
  package: com.azure.cosmos.implementation.directconnectivity.rntbd
- uid: java.util.concurrent.CompletableFuture<com.azure.cosmos.implementation.directconnectivity.StoreResponse>
  name: CompletableFuture<StoreResponse>
  nameWithType: CompletableFuture<StoreResponse>
  fullName: java.util.concurrent.CompletableFuture<com.azure.cosmos.implementation.directconnectivity.StoreResponse>
- uid: java.util.concurrent.CompletableFuture.get(long,java.util.concurrent.TimeUnit)
  name: CompletableFuture.get(long,TimeUnit)
  nameWithType: CompletableFuture.get(long,TimeUnit)
  fullName: java.util.concurrent.CompletableFuture.get(long,java.util.concurrent.TimeUnit)
- uid: java.util.concurrent.CompletableFuture.get()
  name: CompletableFuture.get()
  nameWithType: CompletableFuture.get()
  fullName: java.util.concurrent.CompletableFuture.get()
- uid: java.util.concurrent.CompletableFuture.<U>thenComposeAsync(java.util.function.Function<? super T,? extends java.util.concurrent.CompletionStage<U>>)
  name: CompletableFuture.<U>thenComposeAsync(Function<? super T,? extends CompletionStage<U>>)
  nameWithType: CompletableFuture.<U>thenComposeAsync(Function<? super T,? extends CompletionStage<U>>)
  fullName: java.util.concurrent.CompletableFuture.<U>thenComposeAsync(java.util.function.Function<? super T,? extends java.util.concurrent.CompletionStage<U>>)
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: java.lang.Object.finalize()
  name: Object.finalize()
  nameWithType: Object.finalize()
  fullName: java.lang.Object.finalize()
- uid: java.lang.Object.clone()
  name: Object.clone()
  nameWithType: Object.clone()
  fullName: java.lang.Object.clone()
- uid: java.util.concurrent.CompletableFuture.acceptEither(java.util.concurrent.CompletionStage<? extends T>,java.util.function.Consumer<? super T>)
  name: CompletableFuture.acceptEither(CompletionStage<? extends T>,Consumer<? super T>)
  nameWithType: CompletableFuture.acceptEither(CompletionStage<? extends T>,Consumer<? super T>)
  fullName: java.util.concurrent.CompletableFuture.acceptEither(java.util.concurrent.CompletionStage<? extends T>,java.util.function.Consumer<? super T>)
- uid: java.util.concurrent.CompletableFuture.cancel(boolean)
  name: CompletableFuture.cancel(boolean)
  nameWithType: CompletableFuture.cancel(boolean)
  fullName: java.util.concurrent.CompletableFuture.cancel(boolean)
- uid: java.util.concurrent.CompletableFuture.obtrudeValue(T)
  name: CompletableFuture.obtrudeValue(T)
  nameWithType: CompletableFuture.obtrudeValue(T)
  fullName: java.util.concurrent.CompletableFuture.obtrudeValue(T)
- uid: java.util.concurrent.CompletableFuture.delayedExecutor(long,java.util.concurrent.TimeUnit,java.util.concurrent.Executor)
  name: CompletableFuture.delayedExecutor(long,TimeUnit,Executor)
  nameWithType: CompletableFuture.delayedExecutor(long,TimeUnit,Executor)
  fullName: java.util.concurrent.CompletableFuture.delayedExecutor(long,java.util.concurrent.TimeUnit,java.util.concurrent.Executor)
- uid: java.util.concurrent.CompletableFuture.toCompletableFuture()
  name: CompletableFuture.toCompletableFuture()
  nameWithType: CompletableFuture.toCompletableFuture()
  fullName: java.util.concurrent.CompletableFuture.toCompletableFuture()
- uid: java.util.concurrent.CompletableFuture.<U,V>thenCombine(java.util.concurrent.CompletionStage<? extends U>,java.util.function.BiFunction<? super T,? super U,? extends V>)
  name: CompletableFuture.<U,V>thenCombine(CompletionStage<? extends U>,BiFunction<? super T,? super U,? extends V>)
  nameWithType: CompletableFuture.<U,V>thenCombine(CompletionStage<? extends U>,BiFunction<? super T,? super U,? extends V>)
  fullName: java.util.concurrent.CompletableFuture.<U,V>thenCombine(java.util.concurrent.CompletionStage<? extends U>,java.util.function.BiFunction<? super T,? super U,? extends V>)
- uid: java.util.concurrent.CompletableFuture.completeExceptionally(java.lang.Throwable)
  name: CompletableFuture.completeExceptionally(Throwable)
  nameWithType: CompletableFuture.completeExceptionally(Throwable)
  fullName: java.util.concurrent.CompletableFuture.completeExceptionally(java.lang.Throwable)
- uid: java.util.concurrent.CompletableFuture.getNumberOfDependents()
  name: CompletableFuture.getNumberOfDependents()
  nameWithType: CompletableFuture.getNumberOfDependents()
  fullName: java.util.concurrent.CompletableFuture.getNumberOfDependents()
- uid: java.util.concurrent.CompletableFuture.<U>handle(java.util.function.BiFunction<? super T,java.lang.Throwable,? extends U>)
  name: CompletableFuture.<U>handle(BiFunction<? super T,Throwable,? extends U>)
  nameWithType: CompletableFuture.<U>handle(BiFunction<? super T,Throwable,? extends U>)
  fullName: java.util.concurrent.CompletableFuture.<U>handle(java.util.function.BiFunction<? super T,java.lang.Throwable,? extends U>)
- uid: java.util.concurrent.CompletableFuture.thenAccept(java.util.function.Consumer<? super T>)
  name: CompletableFuture.thenAccept(Consumer<? super T>)
  nameWithType: CompletableFuture.thenAccept(Consumer<? super T>)
  fullName: java.util.concurrent.CompletableFuture.thenAccept(java.util.function.Consumer<? super T>)
- uid: java.util.concurrent.CompletableFuture.minimalCompletionStage()
  name: CompletableFuture.minimalCompletionStage()
  nameWithType: CompletableFuture.minimalCompletionStage()
  fullName: java.util.concurrent.CompletableFuture.minimalCompletionStage()
- uid: java.util.concurrent.CompletableFuture.copy()
  name: CompletableFuture.copy()
  nameWithType: CompletableFuture.copy()
  fullName: java.util.concurrent.CompletableFuture.copy()
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.util.concurrent.CompletableFuture.completeOnTimeout(T,long,java.util.concurrent.TimeUnit)
  name: CompletableFuture.completeOnTimeout(T,long,TimeUnit)
  nameWithType: CompletableFuture.completeOnTimeout(T,long,TimeUnit)
  fullName: java.util.concurrent.CompletableFuture.completeOnTimeout(T,long,java.util.concurrent.TimeUnit)
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: java.util.concurrent.CompletableFuture.<U>thenComposeAsync(java.util.function.Function<? super T,? extends java.util.concurrent.CompletionStage<U>>,java.util.concurrent.Executor)
  name: CompletableFuture.<U>thenComposeAsync(Function<? super T,? extends CompletionStage<U>>,Executor)
  nameWithType: CompletableFuture.<U>thenComposeAsync(Function<? super T,? extends CompletionStage<U>>,Executor)
  fullName: java.util.concurrent.CompletableFuture.<U>thenComposeAsync(java.util.function.Function<? super T,? extends java.util.concurrent.CompletionStage<U>>,java.util.concurrent.Executor)
- uid: java.util.concurrent.CompletableFuture.anyOf(java.util.concurrent.CompletableFuture<?>...)
  name: CompletableFuture.anyOf(CompletableFuture<?>...)
  nameWithType: CompletableFuture.anyOf(CompletableFuture<?>...)
  fullName: java.util.concurrent.CompletableFuture.anyOf(java.util.concurrent.CompletableFuture<?>...)
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: java.util.concurrent.CompletableFuture.thenAcceptAsync(java.util.function.Consumer<? super T>,java.util.concurrent.Executor)
  name: CompletableFuture.thenAcceptAsync(Consumer<? super T>,Executor)
  nameWithType: CompletableFuture.thenAcceptAsync(Consumer<? super T>,Executor)
  fullName: java.util.concurrent.CompletableFuture.thenAcceptAsync(java.util.function.Consumer<? super T>,java.util.concurrent.Executor)
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: java.util.concurrent.CompletableFuture.<U>thenApplyAsync(java.util.function.Function<? super T,? extends U>)
  name: CompletableFuture.<U>thenApplyAsync(Function<? super T,? extends U>)
  nameWithType: CompletableFuture.<U>thenApplyAsync(Function<? super T,? extends U>)
  fullName: java.util.concurrent.CompletableFuture.<U>thenApplyAsync(java.util.function.Function<? super T,? extends U>)
- uid: java.lang.Object.equals(java.lang.Object)
  name: Object.equals(Object)
  nameWithType: Object.equals(Object)
  fullName: java.lang.Object.equals(java.lang.Object)
- uid: java.util.concurrent.CompletableFuture.runAfterBothAsync(java.util.concurrent.CompletionStage<?>,java.lang.Runnable,java.util.concurrent.Executor)
  name: CompletableFuture.runAfterBothAsync(CompletionStage<?>,Runnable,Executor)
  nameWithType: CompletableFuture.runAfterBothAsync(CompletionStage<?>,Runnable,Executor)
  fullName: java.util.concurrent.CompletableFuture.runAfterBothAsync(java.util.concurrent.CompletionStage<?>,java.lang.Runnable,java.util.concurrent.Executor)
- uid: java.util.concurrent.CompletableFuture.<U>handleAsync(java.util.function.BiFunction<? super T,java.lang.Throwable,? extends U>)
  name: CompletableFuture.<U>handleAsync(BiFunction<? super T,Throwable,? extends U>)
  nameWithType: CompletableFuture.<U>handleAsync(BiFunction<? super T,Throwable,? extends U>)
  fullName: java.util.concurrent.CompletableFuture.<U>handleAsync(java.util.function.BiFunction<? super T,java.lang.Throwable,? extends U>)
- uid: java.util.concurrent.CompletableFuture.<U>supplyAsync(java.util.function.Supplier<U>)
  name: CompletableFuture.<U>supplyAsync(Supplier<U>)
  nameWithType: CompletableFuture.<U>supplyAsync(Supplier<U>)
  fullName: java.util.concurrent.CompletableFuture.<U>supplyAsync(java.util.function.Supplier<U>)
- uid: java.util.concurrent.CompletableFuture.<U>failedStage(java.lang.Throwable)
  name: CompletableFuture.<U>failedStage(Throwable)
  nameWithType: CompletableFuture.<U>failedStage(Throwable)
  fullName: java.util.concurrent.CompletableFuture.<U>failedStage(java.lang.Throwable)
- uid: java.util.concurrent.CompletableFuture.runAsync(java.lang.Runnable,java.util.concurrent.Executor)
  name: CompletableFuture.runAsync(Runnable,Executor)
  nameWithType: CompletableFuture.runAsync(Runnable,Executor)
  fullName: java.util.concurrent.CompletableFuture.runAsync(java.lang.Runnable,java.util.concurrent.Executor)
- uid: java.util.concurrent.CompletableFuture.<U>completedFuture(U)
  name: CompletableFuture.<U>completedFuture(U)
  nameWithType: CompletableFuture.<U>completedFuture(U)
  fullName: java.util.concurrent.CompletableFuture.<U>completedFuture(U)
- uid: java.util.concurrent.CompletableFuture.<U>applyToEitherAsync(java.util.concurrent.CompletionStage<? extends T>,java.util.function.Function<? super T,U>)
  name: CompletableFuture.<U>applyToEitherAsync(CompletionStage<? extends T>,Function<? super T,U>)
  nameWithType: CompletableFuture.<U>applyToEitherAsync(CompletionStage<? extends T>,Function<? super T,U>)
  fullName: java.util.concurrent.CompletableFuture.<U>applyToEitherAsync(java.util.concurrent.CompletionStage<? extends T>,java.util.function.Function<? super T,U>)
- uid: java.util.concurrent.CompletableFuture.allOf(java.util.concurrent.CompletableFuture<?>...)
  name: CompletableFuture.allOf(CompletableFuture<?>...)
  nameWithType: CompletableFuture.allOf(CompletableFuture<?>...)
  fullName: java.util.concurrent.CompletableFuture.allOf(java.util.concurrent.CompletableFuture<?>...)
- uid: java.util.concurrent.CompletableFuture.orTimeout(long,java.util.concurrent.TimeUnit)
  name: CompletableFuture.orTimeout(long,TimeUnit)
  nameWithType: CompletableFuture.orTimeout(long,TimeUnit)
  fullName: java.util.concurrent.CompletableFuture.orTimeout(long,java.util.concurrent.TimeUnit)
- uid: java.util.concurrent.CompletableFuture.acceptEitherAsync(java.util.concurrent.CompletionStage<? extends T>,java.util.function.Consumer<? super T>,java.util.concurrent.Executor)
  name: CompletableFuture.acceptEitherAsync(CompletionStage<? extends T>,Consumer<? super T>,Executor)
  nameWithType: CompletableFuture.acceptEitherAsync(CompletionStage<? extends T>,Consumer<? super T>,Executor)
  fullName: java.util.concurrent.CompletableFuture.acceptEitherAsync(java.util.concurrent.CompletionStage<? extends T>,java.util.function.Consumer<? super T>,java.util.concurrent.Executor)
- uid: java.util.concurrent.CompletableFuture.join()
  name: CompletableFuture.join()
  nameWithType: CompletableFuture.join()
  fullName: java.util.concurrent.CompletableFuture.join()
- uid: java.util.concurrent.CompletableFuture.runAsync(java.lang.Runnable)
  name: CompletableFuture.runAsync(Runnable)
  nameWithType: CompletableFuture.runAsync(Runnable)
  fullName: java.util.concurrent.CompletableFuture.runAsync(java.lang.Runnable)
- uid: java.util.concurrent.CompletableFuture.completeAsync(java.util.function.Supplier<? extends T>)
  name: CompletableFuture.completeAsync(Supplier<? extends T>)
  nameWithType: CompletableFuture.completeAsync(Supplier<? extends T>)
  fullName: java.util.concurrent.CompletableFuture.completeAsync(java.util.function.Supplier<? extends T>)
- uid: java.util.concurrent.CompletableFuture.<U>thenAcceptBothAsync(java.util.concurrent.CompletionStage<? extends U>,java.util.function.BiConsumer<? super T,? super U>,java.util.concurrent.Executor)
  name: CompletableFuture.<U>thenAcceptBothAsync(CompletionStage<? extends U>,BiConsumer<? super T,? super U>,Executor)
  nameWithType: CompletableFuture.<U>thenAcceptBothAsync(CompletionStage<? extends U>,BiConsumer<? super T,? super U>,Executor)
  fullName: java.util.concurrent.CompletableFuture.<U>thenAcceptBothAsync(java.util.concurrent.CompletionStage<? extends U>,java.util.function.BiConsumer<? super T,? super U>,java.util.concurrent.Executor)
- uid: java.util.concurrent.CompletableFuture.runAfterEitherAsync(java.util.concurrent.CompletionStage<?>,java.lang.Runnable)
  name: CompletableFuture.runAfterEitherAsync(CompletionStage<?>,Runnable)
  nameWithType: CompletableFuture.runAfterEitherAsync(CompletionStage<?>,Runnable)
  fullName: java.util.concurrent.CompletableFuture.runAfterEitherAsync(java.util.concurrent.CompletionStage<?>,java.lang.Runnable)
- uid: java.util.concurrent.CompletableFuture.defaultExecutor()
  name: CompletableFuture.defaultExecutor()
  nameWithType: CompletableFuture.defaultExecutor()
  fullName: java.util.concurrent.CompletableFuture.defaultExecutor()
- uid: java.util.concurrent.CompletableFuture.isDone()
  name: CompletableFuture.isDone()
  nameWithType: CompletableFuture.isDone()
  fullName: java.util.concurrent.CompletableFuture.isDone()
- uid: java.util.concurrent.CompletableFuture.runAfterEither(java.util.concurrent.CompletionStage<?>,java.lang.Runnable)
  name: CompletableFuture.runAfterEither(CompletionStage<?>,Runnable)
  nameWithType: CompletableFuture.runAfterEither(CompletionStage<?>,Runnable)
  fullName: java.util.concurrent.CompletableFuture.runAfterEither(java.util.concurrent.CompletionStage<?>,java.lang.Runnable)
- uid: java.util.concurrent.CompletableFuture.<U,V>thenCombineAsync(java.util.concurrent.CompletionStage<? extends U>,java.util.function.BiFunction<? super T,? super U,? extends V>)
  name: CompletableFuture.<U,V>thenCombineAsync(CompletionStage<? extends U>,BiFunction<? super T,? super U,? extends V>)
  nameWithType: CompletableFuture.<U,V>thenCombineAsync(CompletionStage<? extends U>,BiFunction<? super T,? super U,? extends V>)
  fullName: java.util.concurrent.CompletableFuture.<U,V>thenCombineAsync(java.util.concurrent.CompletionStage<? extends U>,java.util.function.BiFunction<? super T,? super U,? extends V>)
- uid: java.util.concurrent.CompletableFuture.thenRunAsync(java.lang.Runnable,java.util.concurrent.Executor)
  name: CompletableFuture.thenRunAsync(Runnable,Executor)
  nameWithType: CompletableFuture.thenRunAsync(Runnable,Executor)
  fullName: java.util.concurrent.CompletableFuture.thenRunAsync(java.lang.Runnable,java.util.concurrent.Executor)
- uid: java.util.concurrent.CompletableFuture.obtrudeException(java.lang.Throwable)
  name: CompletableFuture.obtrudeException(Throwable)
  nameWithType: CompletableFuture.obtrudeException(Throwable)
  fullName: java.util.concurrent.CompletableFuture.obtrudeException(java.lang.Throwable)
- uid: java.util.concurrent.CompletableFuture.thenAcceptAsync(java.util.function.Consumer<? super T>)
  name: CompletableFuture.thenAcceptAsync(Consumer<? super T>)
  nameWithType: CompletableFuture.thenAcceptAsync(Consumer<? super T>)
  fullName: java.util.concurrent.CompletableFuture.thenAcceptAsync(java.util.function.Consumer<? super T>)
- uid: java.util.concurrent.CompletableFuture.thenRunAsync(java.lang.Runnable)
  name: CompletableFuture.thenRunAsync(Runnable)
  nameWithType: CompletableFuture.thenRunAsync(Runnable)
  fullName: java.util.concurrent.CompletableFuture.thenRunAsync(java.lang.Runnable)
- uid: java.util.concurrent.CompletableFuture.whenComplete(java.util.function.BiConsumer<? super T,? super java.lang.Throwable>)
  name: CompletableFuture.whenComplete(BiConsumer<? super T,? super Throwable>)
  nameWithType: CompletableFuture.whenComplete(BiConsumer<? super T,? super Throwable>)
  fullName: java.util.concurrent.CompletableFuture.whenComplete(java.util.function.BiConsumer<? super T,? super java.lang.Throwable>)
- uid: java.util.concurrent.CompletableFuture.whenCompleteAsync(java.util.function.BiConsumer<? super T,? super java.lang.Throwable>)
  name: CompletableFuture.whenCompleteAsync(BiConsumer<? super T,? super Throwable>)
  nameWithType: CompletableFuture.whenCompleteAsync(BiConsumer<? super T,? super Throwable>)
  fullName: java.util.concurrent.CompletableFuture.whenCompleteAsync(java.util.function.BiConsumer<? super T,? super java.lang.Throwable>)
- uid: java.util.concurrent.CompletableFuture.completeAsync(java.util.function.Supplier<? extends T>,java.util.concurrent.Executor)
  name: CompletableFuture.completeAsync(Supplier<? extends T>,Executor)
  nameWithType: CompletableFuture.completeAsync(Supplier<? extends T>,Executor)
  fullName: java.util.concurrent.CompletableFuture.completeAsync(java.util.function.Supplier<? extends T>,java.util.concurrent.Executor)
- uid: java.util.concurrent.CompletableFuture.<U>thenCompose(java.util.function.Function<? super T,? extends java.util.concurrent.CompletionStage<U>>)
  name: CompletableFuture.<U>thenCompose(Function<? super T,? extends CompletionStage<U>>)
  nameWithType: CompletableFuture.<U>thenCompose(Function<? super T,? extends CompletionStage<U>>)
  fullName: java.util.concurrent.CompletableFuture.<U>thenCompose(java.util.function.Function<? super T,? extends java.util.concurrent.CompletionStage<U>>)
- uid: java.util.concurrent.CompletableFuture.<U>thenAcceptBothAsync(java.util.concurrent.CompletionStage<? extends U>,java.util.function.BiConsumer<? super T,? super U>)
  name: CompletableFuture.<U>thenAcceptBothAsync(CompletionStage<? extends U>,BiConsumer<? super T,? super U>)
  nameWithType: CompletableFuture.<U>thenAcceptBothAsync(CompletionStage<? extends U>,BiConsumer<? super T,? super U>)
  fullName: java.util.concurrent.CompletableFuture.<U>thenAcceptBothAsync(java.util.concurrent.CompletionStage<? extends U>,java.util.function.BiConsumer<? super T,? super U>)
- uid: java.util.concurrent.CompletableFuture.acceptEitherAsync(java.util.concurrent.CompletionStage<? extends T>,java.util.function.Consumer<? super T>)
  name: CompletableFuture.acceptEitherAsync(CompletionStage<? extends T>,Consumer<? super T>)
  nameWithType: CompletableFuture.acceptEitherAsync(CompletionStage<? extends T>,Consumer<? super T>)
  fullName: java.util.concurrent.CompletableFuture.acceptEitherAsync(java.util.concurrent.CompletionStage<? extends T>,java.util.function.Consumer<? super T>)
- uid: java.util.concurrent.CompletableFuture.runAfterBothAsync(java.util.concurrent.CompletionStage<?>,java.lang.Runnable)
  name: CompletableFuture.runAfterBothAsync(CompletionStage<?>,Runnable)
  nameWithType: CompletableFuture.runAfterBothAsync(CompletionStage<?>,Runnable)
  fullName: java.util.concurrent.CompletableFuture.runAfterBothAsync(java.util.concurrent.CompletionStage<?>,java.lang.Runnable)
- uid: java.util.concurrent.CompletableFuture.isCancelled()
  name: CompletableFuture.isCancelled()
  nameWithType: CompletableFuture.isCancelled()
  fullName: java.util.concurrent.CompletableFuture.isCancelled()
- uid: java.util.concurrent.CompletableFuture.whenCompleteAsync(java.util.function.BiConsumer<? super T,? super java.lang.Throwable>,java.util.concurrent.Executor)
  name: CompletableFuture.whenCompleteAsync(BiConsumer<? super T,? super Throwable>,Executor)
  nameWithType: CompletableFuture.whenCompleteAsync(BiConsumer<? super T,? super Throwable>,Executor)
  fullName: java.util.concurrent.CompletableFuture.whenCompleteAsync(java.util.function.BiConsumer<? super T,? super java.lang.Throwable>,java.util.concurrent.Executor)
- uid: java.util.concurrent.CompletableFuture.isCompletedExceptionally()
  name: CompletableFuture.isCompletedExceptionally()
  nameWithType: CompletableFuture.isCompletedExceptionally()
  fullName: java.util.concurrent.CompletableFuture.isCompletedExceptionally()
- uid: java.util.concurrent.CompletableFuture.runAfterBoth(java.util.concurrent.CompletionStage<?>,java.lang.Runnable)
  name: CompletableFuture.runAfterBoth(CompletionStage<?>,Runnable)
  nameWithType: CompletableFuture.runAfterBoth(CompletionStage<?>,Runnable)
  fullName: java.util.concurrent.CompletableFuture.runAfterBoth(java.util.concurrent.CompletionStage<?>,java.lang.Runnable)
- uid: java.util.concurrent.CompletableFuture.<U>completedStage(U)
  name: CompletableFuture.<U>completedStage(U)
  nameWithType: CompletableFuture.<U>completedStage(U)
  fullName: java.util.concurrent.CompletableFuture.<U>completedStage(U)
- uid: java.lang.Object.hashCode()
  name: Object.hashCode()
  nameWithType: Object.hashCode()
  fullName: java.lang.Object.hashCode()
- uid: java.util.concurrent.CompletableFuture.<U>applyToEither(java.util.concurrent.CompletionStage<? extends T>,java.util.function.Function<? super T,U>)
  name: CompletableFuture.<U>applyToEither(CompletionStage<? extends T>,Function<? super T,U>)
  nameWithType: CompletableFuture.<U>applyToEither(CompletionStage<? extends T>,Function<? super T,U>)
  fullName: java.util.concurrent.CompletableFuture.<U>applyToEither(java.util.concurrent.CompletionStage<? extends T>,java.util.function.Function<? super T,U>)
- uid: java.util.concurrent.CompletableFuture.getNow(T)
  name: CompletableFuture.getNow(T)
  nameWithType: CompletableFuture.getNow(T)
  fullName: java.util.concurrent.CompletableFuture.getNow(T)
- uid: java.util.concurrent.CompletableFuture.<U>supplyAsync(java.util.function.Supplier<U>,java.util.concurrent.Executor)
  name: CompletableFuture.<U>supplyAsync(Supplier<U>,Executor)
  nameWithType: CompletableFuture.<U>supplyAsync(Supplier<U>,Executor)
  fullName: java.util.concurrent.CompletableFuture.<U>supplyAsync(java.util.function.Supplier<U>,java.util.concurrent.Executor)
- uid: java.util.concurrent.CompletableFuture.<U>failedFuture(java.lang.Throwable)
  name: CompletableFuture.<U>failedFuture(Throwable)
  nameWithType: CompletableFuture.<U>failedFuture(Throwable)
  fullName: java.util.concurrent.CompletableFuture.<U>failedFuture(java.lang.Throwable)
- uid: java.util.concurrent.CompletableFuture.<U>newIncompleteFuture()
  name: CompletableFuture.<U>newIncompleteFuture()
  nameWithType: CompletableFuture.<U>newIncompleteFuture()
  fullName: java.util.concurrent.CompletableFuture.<U>newIncompleteFuture()
- uid: java.util.concurrent.CompletableFuture.toString()
  name: CompletableFuture.toString()
  nameWithType: CompletableFuture.toString()
  fullName: java.util.concurrent.CompletableFuture.toString()
- uid: java.util.concurrent.CompletableFuture.<U>thenApplyAsync(java.util.function.Function<? super T,? extends U>,java.util.concurrent.Executor)
  name: CompletableFuture.<U>thenApplyAsync(Function<? super T,? extends U>,Executor)
  nameWithType: CompletableFuture.<U>thenApplyAsync(Function<? super T,? extends U>,Executor)
  fullName: java.util.concurrent.CompletableFuture.<U>thenApplyAsync(java.util.function.Function<? super T,? extends U>,java.util.concurrent.Executor)
- uid: java.util.concurrent.CompletableFuture.exceptionally(java.util.function.Function<java.lang.Throwable,? extends T>)
  name: CompletableFuture.exceptionally(Function<Throwable,? extends T>)
  nameWithType: CompletableFuture.exceptionally(Function<Throwable,? extends T>)
  fullName: java.util.concurrent.CompletableFuture.exceptionally(java.util.function.Function<java.lang.Throwable,? extends T>)
- uid: java.util.concurrent.CompletableFuture.<U>thenAcceptBoth(java.util.concurrent.CompletionStage<? extends U>,java.util.function.BiConsumer<? super T,? super U>)
  name: CompletableFuture.<U>thenAcceptBoth(CompletionStage<? extends U>,BiConsumer<? super T,? super U>)
  nameWithType: CompletableFuture.<U>thenAcceptBoth(CompletionStage<? extends U>,BiConsumer<? super T,? super U>)
  fullName: java.util.concurrent.CompletableFuture.<U>thenAcceptBoth(java.util.concurrent.CompletionStage<? extends U>,java.util.function.BiConsumer<? super T,? super U>)
- uid: java.util.concurrent.CompletableFuture.runAfterEitherAsync(java.util.concurrent.CompletionStage<?>,java.lang.Runnable,java.util.concurrent.Executor)
  name: CompletableFuture.runAfterEitherAsync(CompletionStage<?>,Runnable,Executor)
  nameWithType: CompletableFuture.runAfterEitherAsync(CompletionStage<?>,Runnable,Executor)
  fullName: java.util.concurrent.CompletableFuture.runAfterEitherAsync(java.util.concurrent.CompletionStage<?>,java.lang.Runnable,java.util.concurrent.Executor)
- uid: java.util.concurrent.CompletableFuture.complete(T)
  name: CompletableFuture.complete(T)
  nameWithType: CompletableFuture.complete(T)
  fullName: java.util.concurrent.CompletableFuture.complete(T)
- uid: java.util.concurrent.CompletableFuture.thenRun(java.lang.Runnable)
  name: CompletableFuture.thenRun(Runnable)
  nameWithType: CompletableFuture.thenRun(Runnable)
  fullName: java.util.concurrent.CompletableFuture.thenRun(java.lang.Runnable)
- uid: java.util.concurrent.CompletableFuture.<U>handleAsync(java.util.function.BiFunction<? super T,java.lang.Throwable,? extends U>,java.util.concurrent.Executor)
  name: CompletableFuture.<U>handleAsync(BiFunction<? super T,Throwable,? extends U>,Executor)
  nameWithType: CompletableFuture.<U>handleAsync(BiFunction<? super T,Throwable,? extends U>,Executor)
  fullName: java.util.concurrent.CompletableFuture.<U>handleAsync(java.util.function.BiFunction<? super T,java.lang.Throwable,? extends U>,java.util.concurrent.Executor)
- uid: java.util.concurrent.CompletableFuture.delayedExecutor(long,java.util.concurrent.TimeUnit)
  name: CompletableFuture.delayedExecutor(long,TimeUnit)
  nameWithType: CompletableFuture.delayedExecutor(long,TimeUnit)
  fullName: java.util.concurrent.CompletableFuture.delayedExecutor(long,java.util.concurrent.TimeUnit)
- uid: java.util.concurrent.CompletableFuture.<U>applyToEitherAsync(java.util.concurrent.CompletionStage<? extends T>,java.util.function.Function<? super T,U>,java.util.concurrent.Executor)
  name: CompletableFuture.<U>applyToEitherAsync(CompletionStage<? extends T>,Function<? super T,U>,Executor)
  nameWithType: CompletableFuture.<U>applyToEitherAsync(CompletionStage<? extends T>,Function<? super T,U>,Executor)
  fullName: java.util.concurrent.CompletableFuture.<U>applyToEitherAsync(java.util.concurrent.CompletionStage<? extends T>,java.util.function.Function<? super T,U>,java.util.concurrent.Executor)
- uid: java.util.concurrent.CompletableFuture.<U>thenApply(java.util.function.Function<? super T,? extends U>)
  name: CompletableFuture.<U>thenApply(Function<? super T,? extends U>)
  nameWithType: CompletableFuture.<U>thenApply(Function<? super T,? extends U>)
  fullName: java.util.concurrent.CompletableFuture.<U>thenApply(java.util.function.Function<? super T,? extends U>)
- uid: java.util.concurrent.CompletableFuture.<U,V>thenCombineAsync(java.util.concurrent.CompletionStage<? extends U>,java.util.function.BiFunction<? super T,? super U,? extends V>,java.util.concurrent.Executor)
  name: CompletableFuture.<U,V>thenCombineAsync(CompletionStage<? extends U>,BiFunction<? super T,? super U,? extends V>,Executor)
  nameWithType: CompletableFuture.<U,V>thenCombineAsync(CompletionStage<? extends U>,BiFunction<? super T,? super U,? extends V>,Executor)
  fullName: java.util.concurrent.CompletableFuture.<U,V>thenCombineAsync(java.util.concurrent.CompletionStage<? extends U>,java.util.function.BiFunction<? super T,? super U,? extends V>,java.util.concurrent.Executor)
- uid: java.util.concurrent.CompletableFuture
  name: CompletableFuture
  nameWithType: CompletableFuture
  fullName: java.util.concurrent.CompletableFuture
- uid: com.azure.cosmos.implementation.directconnectivity.StoreResponse
  name: StoreResponse
  nameWithType: StoreResponse
  fullName: com.azure.cosmos.implementation.directconnectivity.StoreResponse
- uid: U>>)
  name: U>>)
  nameWithType: U>>)
  fullName: U>>)
- uid: '? super T,? extends java.util.concurrent.CompletionStage'
  name: '? super T,? extends CompletionStage'
  nameWithType: '? super T,? extends CompletionStage'
  fullName: '? super T,? extends java.util.concurrent.CompletionStage'
- uid: U>thenComposeAsync(java.util.function.Function
  name: U>thenComposeAsync(Function
  nameWithType: U>thenComposeAsync(Function
  fullName: U>thenComposeAsync(java.util.function.Function
- uid: java.util.concurrent.CompletableFuture.
  name: CompletableFuture.
  nameWithType: CompletableFuture.
  fullName: java.util.concurrent.CompletableFuture.
- uid: '? extends T>,java.util.function.Consumer'
  name: '? extends T>,Consumer'
  nameWithType: '? extends T>,Consumer'
  fullName: '? extends T>,java.util.function.Consumer'
- uid: java.util.concurrent.CompletableFuture.acceptEither(java.util.concurrent.CompletionStage
  name: CompletableFuture.acceptEither(CompletionStage
  nameWithType: CompletableFuture.acceptEither(CompletionStage
  fullName: java.util.concurrent.CompletableFuture.acceptEither(java.util.concurrent.CompletionStage
- uid: '? super T>)'
  name: '? super T>)'
  nameWithType: '? super T>)'
  fullName: '? super T>)'
- uid: '? super T,? super U,? extends V>)'
  name: '? super T,? super U,? extends V>)'
  nameWithType: '? super T,? super U,? extends V>)'
  fullName: '? super T,? super U,? extends V>)'
- uid: '? extends U>,java.util.function.BiFunction'
  name: '? extends U>,BiFunction'
  nameWithType: '? extends U>,BiFunction'
  fullName: '? extends U>,java.util.function.BiFunction'
- uid: U,V>thenCombine(java.util.concurrent.CompletionStage
  name: U,V>thenCombine(CompletionStage
  nameWithType: U,V>thenCombine(CompletionStage
  fullName: U,V>thenCombine(java.util.concurrent.CompletionStage
- uid: U>handle(java.util.function.BiFunction
  name: U>handle(BiFunction
  nameWithType: U>handle(BiFunction
  fullName: U>handle(java.util.function.BiFunction
- uid: '? super T,java.lang.Throwable,? extends U>)'
  name: '? super T,Throwable,? extends U>)'
  nameWithType: '? super T,Throwable,? extends U>)'
  fullName: '? super T,java.lang.Throwable,? extends U>)'
- uid: java.util.concurrent.CompletableFuture.thenAccept(java.util.function.Consumer
  name: CompletableFuture.thenAccept(Consumer
  nameWithType: CompletableFuture.thenAccept(Consumer
  fullName: java.util.concurrent.CompletableFuture.thenAccept(java.util.function.Consumer
- uid: U>>,java.util.concurrent.Executor)
  name: U>>,Executor)
  nameWithType: U>>,Executor)
  fullName: U>>,java.util.concurrent.Executor)
- uid: java.util.concurrent.CompletableFuture.anyOf(java.util.concurrent.CompletableFuture
  name: CompletableFuture.anyOf(CompletableFuture
  nameWithType: CompletableFuture.anyOf(CompletableFuture
  fullName: java.util.concurrent.CompletableFuture.anyOf(java.util.concurrent.CompletableFuture
- uid: ?>...)
  name: ?>...)
  nameWithType: ?>...)
  fullName: ?>...)
- uid: java.util.concurrent.CompletableFuture.thenAcceptAsync(java.util.function.Consumer
  name: CompletableFuture.thenAcceptAsync(Consumer
  nameWithType: CompletableFuture.thenAcceptAsync(Consumer
  fullName: java.util.concurrent.CompletableFuture.thenAcceptAsync(java.util.function.Consumer
- uid: '? super T>,java.util.concurrent.Executor)'
  name: '? super T>,Executor)'
  nameWithType: '? super T>,Executor)'
  fullName: '? super T>,java.util.concurrent.Executor)'
- uid: '? super T,? extends U>)'
  name: '? super T,? extends U>)'
  nameWithType: '? super T,? extends U>)'
  fullName: '? super T,? extends U>)'
- uid: U>thenApplyAsync(java.util.function.Function
  name: U>thenApplyAsync(Function
  nameWithType: U>thenApplyAsync(Function
  fullName: U>thenApplyAsync(java.util.function.Function
- uid: java.util.concurrent.CompletableFuture.runAfterBothAsync(java.util.concurrent.CompletionStage
  name: CompletableFuture.runAfterBothAsync(CompletionStage
  nameWithType: CompletableFuture.runAfterBothAsync(CompletionStage
  fullName: java.util.concurrent.CompletableFuture.runAfterBothAsync(java.util.concurrent.CompletionStage
- uid: ?>,java.lang.Runnable,java.util.concurrent.Executor)
  name: ?>,Runnable,Executor)
  nameWithType: ?>,Runnable,Executor)
  fullName: ?>,java.lang.Runnable,java.util.concurrent.Executor)
- uid: U>handleAsync(java.util.function.BiFunction
  name: U>handleAsync(BiFunction
  nameWithType: U>handleAsync(BiFunction
  fullName: U>handleAsync(java.util.function.BiFunction
- uid: U>)
  name: U>)
  nameWithType: U>)
  fullName: U>)
- uid: U>supplyAsync(java.util.function.Supplier
  name: U>supplyAsync(Supplier
  nameWithType: U>supplyAsync(Supplier
  fullName: U>supplyAsync(java.util.function.Supplier
- uid: U>failedStage(java.lang.Throwable)
  name: U>failedStage(Throwable)
  nameWithType: U>failedStage(Throwable)
  fullName: U>failedStage(java.lang.Throwable)
- uid: U>completedFuture(U)
  name: U>completedFuture(U)
  nameWithType: U>completedFuture(U)
  fullName: U>completedFuture(U)
- uid: '? extends T>,java.util.function.Function'
  name: '? extends T>,Function'
  nameWithType: '? extends T>,Function'
  fullName: '? extends T>,java.util.function.Function'
- uid: U>applyToEitherAsync(java.util.concurrent.CompletionStage
  name: U>applyToEitherAsync(CompletionStage
  nameWithType: U>applyToEitherAsync(CompletionStage
  fullName: U>applyToEitherAsync(java.util.concurrent.CompletionStage
- uid: '? super T,U>)'
  name: '? super T,U>)'
  nameWithType: '? super T,U>)'
  fullName: '? super T,U>)'
- uid: java.util.concurrent.CompletableFuture.allOf(java.util.concurrent.CompletableFuture
  name: CompletableFuture.allOf(CompletableFuture
  nameWithType: CompletableFuture.allOf(CompletableFuture
  fullName: java.util.concurrent.CompletableFuture.allOf(java.util.concurrent.CompletableFuture
- uid: java.util.concurrent.CompletableFuture.acceptEitherAsync(java.util.concurrent.CompletionStage
  name: CompletableFuture.acceptEitherAsync(CompletionStage
  nameWithType: CompletableFuture.acceptEitherAsync(CompletionStage
  fullName: java.util.concurrent.CompletableFuture.acceptEitherAsync(java.util.concurrent.CompletionStage
- uid: java.util.concurrent.CompletableFuture.completeAsync(java.util.function.Supplier
  name: CompletableFuture.completeAsync(Supplier
  nameWithType: CompletableFuture.completeAsync(Supplier
  fullName: java.util.concurrent.CompletableFuture.completeAsync(java.util.function.Supplier
- uid: '? extends T>)'
  name: '? extends T>)'
  nameWithType: '? extends T>)'
  fullName: '? extends T>)'
- uid: '? super T,? super U>,java.util.concurrent.Executor)'
  name: '? super T,? super U>,Executor)'
  nameWithType: '? super T,? super U>,Executor)'
  fullName: '? super T,? super U>,java.util.concurrent.Executor)'
- uid: U>thenAcceptBothAsync(java.util.concurrent.CompletionStage
  name: U>thenAcceptBothAsync(CompletionStage
  nameWithType: U>thenAcceptBothAsync(CompletionStage
  fullName: U>thenAcceptBothAsync(java.util.concurrent.CompletionStage
- uid: '? extends U>,java.util.function.BiConsumer'
  name: '? extends U>,BiConsumer'
  nameWithType: '? extends U>,BiConsumer'
  fullName: '? extends U>,java.util.function.BiConsumer'
- uid: java.util.concurrent.CompletableFuture.runAfterEitherAsync(java.util.concurrent.CompletionStage
  name: CompletableFuture.runAfterEitherAsync(CompletionStage
  nameWithType: CompletableFuture.runAfterEitherAsync(CompletionStage
  fullName: java.util.concurrent.CompletableFuture.runAfterEitherAsync(java.util.concurrent.CompletionStage
- uid: ?>,java.lang.Runnable)
  name: ?>,Runnable)
  nameWithType: ?>,Runnable)
  fullName: ?>,java.lang.Runnable)
- uid: java.util.concurrent.CompletableFuture.runAfterEither(java.util.concurrent.CompletionStage
  name: CompletableFuture.runAfterEither(CompletionStage
  nameWithType: CompletableFuture.runAfterEither(CompletionStage
  fullName: java.util.concurrent.CompletableFuture.runAfterEither(java.util.concurrent.CompletionStage
- uid: U,V>thenCombineAsync(java.util.concurrent.CompletionStage
  name: U,V>thenCombineAsync(CompletionStage
  nameWithType: U,V>thenCombineAsync(CompletionStage
  fullName: U,V>thenCombineAsync(java.util.concurrent.CompletionStage
- uid: java.util.concurrent.CompletableFuture.whenComplete(java.util.function.BiConsumer
  name: CompletableFuture.whenComplete(BiConsumer
  nameWithType: CompletableFuture.whenComplete(BiConsumer
  fullName: java.util.concurrent.CompletableFuture.whenComplete(java.util.function.BiConsumer
- uid: '? super T,? super java.lang.Throwable>)'
  name: '? super T,? super Throwable>)'
  nameWithType: '? super T,? super Throwable>)'
  fullName: '? super T,? super java.lang.Throwable>)'
- uid: java.util.concurrent.CompletableFuture.whenCompleteAsync(java.util.function.BiConsumer
  name: CompletableFuture.whenCompleteAsync(BiConsumer
  nameWithType: CompletableFuture.whenCompleteAsync(BiConsumer
  fullName: java.util.concurrent.CompletableFuture.whenCompleteAsync(java.util.function.BiConsumer
- uid: '? extends T>,java.util.concurrent.Executor)'
  name: '? extends T>,Executor)'
  nameWithType: '? extends T>,Executor)'
  fullName: '? extends T>,java.util.concurrent.Executor)'
- uid: U>thenCompose(java.util.function.Function
  name: U>thenCompose(Function
  nameWithType: U>thenCompose(Function
  fullName: U>thenCompose(java.util.function.Function
- uid: '? super T,? super U>)'
  name: '? super T,? super U>)'
  nameWithType: '? super T,? super U>)'
  fullName: '? super T,? super U>)'
- uid: '? super T,? super java.lang.Throwable>,java.util.concurrent.Executor)'
  name: '? super T,? super Throwable>,Executor)'
  nameWithType: '? super T,? super Throwable>,Executor)'
  fullName: '? super T,? super java.lang.Throwable>,java.util.concurrent.Executor)'
- uid: java.util.concurrent.CompletableFuture.runAfterBoth(java.util.concurrent.CompletionStage
  name: CompletableFuture.runAfterBoth(CompletionStage
  nameWithType: CompletableFuture.runAfterBoth(CompletionStage
  fullName: java.util.concurrent.CompletableFuture.runAfterBoth(java.util.concurrent.CompletionStage
- uid: U>completedStage(U)
  name: U>completedStage(U)
  nameWithType: U>completedStage(U)
  fullName: U>completedStage(U)
- uid: U>applyToEither(java.util.concurrent.CompletionStage
  name: U>applyToEither(CompletionStage
  nameWithType: U>applyToEither(CompletionStage
  fullName: U>applyToEither(java.util.concurrent.CompletionStage
- uid: U>,java.util.concurrent.Executor)
  name: U>,Executor)
  nameWithType: U>,Executor)
  fullName: U>,java.util.concurrent.Executor)
- uid: U>failedFuture(java.lang.Throwable)
  name: U>failedFuture(Throwable)
  nameWithType: U>failedFuture(Throwable)
  fullName: U>failedFuture(java.lang.Throwable)
- uid: U>newIncompleteFuture()
  name: U>newIncompleteFuture()
  nameWithType: U>newIncompleteFuture()
  fullName: U>newIncompleteFuture()
- uid: '? super T,? extends U>,java.util.concurrent.Executor)'
  name: '? super T,? extends U>,Executor)'
  nameWithType: '? super T,? extends U>,Executor)'
  fullName: '? super T,? extends U>,java.util.concurrent.Executor)'
- uid: java.lang.Throwable,? extends T>)
  name: Throwable,? extends T>)
  nameWithType: Throwable,? extends T>)
  fullName: java.lang.Throwable,? extends T>)
- uid: java.util.concurrent.CompletableFuture.exceptionally(java.util.function.Function
  name: CompletableFuture.exceptionally(Function
  nameWithType: CompletableFuture.exceptionally(Function
  fullName: java.util.concurrent.CompletableFuture.exceptionally(java.util.function.Function
- uid: U>thenAcceptBoth(java.util.concurrent.CompletionStage
  name: U>thenAcceptBoth(CompletionStage
  nameWithType: U>thenAcceptBoth(CompletionStage
  fullName: U>thenAcceptBoth(java.util.concurrent.CompletionStage
- uid: '? super T,java.lang.Throwable,? extends U>,java.util.concurrent.Executor)'
  name: '? super T,Throwable,? extends U>,Executor)'
  nameWithType: '? super T,Throwable,? extends U>,Executor)'
  fullName: '? super T,java.lang.Throwable,? extends U>,java.util.concurrent.Executor)'
- uid: '? super T,U>,java.util.concurrent.Executor)'
  name: '? super T,U>,Executor)'
  nameWithType: '? super T,U>,Executor)'
  fullName: '? super T,U>,java.util.concurrent.Executor)'
- uid: U>thenApply(java.util.function.Function
  name: U>thenApply(Function
  nameWithType: U>thenApply(Function
  fullName: U>thenApply(java.util.function.Function
- uid: '? super T,? super U,? extends V>,java.util.concurrent.Executor)'
  name: '? super T,? super U,? extends V>,Executor)'
  nameWithType: '? super T,? super U,? extends V>,Executor)'
  fullName: '? super T,? super U,? extends V>,java.util.concurrent.Executor)'
