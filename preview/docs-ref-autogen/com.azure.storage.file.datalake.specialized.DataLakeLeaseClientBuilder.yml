### YamlMime:ManagedReference
items:
- uid: com.azure.storage.file.datalake.specialized.DataLakeLeaseClientBuilder
  id: DataLakeLeaseClientBuilder
  artifact: com.azure:azure-storage-file-datalake:12.2.0-beta.1
  parent: com.azure.storage.file.datalake.specialized
  children:
  - com.azure.storage.file.datalake.specialized.DataLakeLeaseClientBuilder.DataLakeLeaseClientBuilder()
  - com.azure.storage.file.datalake.specialized.DataLakeLeaseClientBuilder.buildAsyncClient()
  - com.azure.storage.file.datalake.specialized.DataLakeLeaseClientBuilder.buildClient()
  - com.azure.storage.file.datalake.specialized.DataLakeLeaseClientBuilder.directoryAsyncClient(com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient)
  - com.azure.storage.file.datalake.specialized.DataLakeLeaseClientBuilder.directoryClient(com.azure.storage.file.datalake.DataLakeDirectoryClient)
  - com.azure.storage.file.datalake.specialized.DataLakeLeaseClientBuilder.fileAsyncClient(com.azure.storage.file.datalake.DataLakeFileAsyncClient)
  - com.azure.storage.file.datalake.specialized.DataLakeLeaseClientBuilder.fileClient(com.azure.storage.file.datalake.DataLakeFileClient)
  - com.azure.storage.file.datalake.specialized.DataLakeLeaseClientBuilder.fileSystemAsyncClient(com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient)
  - com.azure.storage.file.datalake.specialized.DataLakeLeaseClientBuilder.fileSystemClient(com.azure.storage.file.datalake.DataLakeFileSystemClient)
  - com.azure.storage.file.datalake.specialized.DataLakeLeaseClientBuilder.leaseId(java.lang.String)
  langs:
  - java
  name: DataLakeLeaseClientBuilder
  nameWithType: DataLakeLeaseClientBuilder
  fullName: com.azure.storage.file.datalake.specialized.DataLakeLeaseClientBuilder
  type: Class
  package: com.azure.storage.file.datalake.specialized
  summary: >-
    This class provides a fluent builder API to help aid the configuration and instantiation of Storage Lease clients. Lease clients are able to interact with both file system and path clients and act as a supplement client. A new instance of <xref uid="com.azure.storage.file.datalake.specialized.DataLakeLeaseClient" data-throw-if-not-resolved="false">DataLakeLeaseClient</xref> and <xref uid="com.azure.storage.file.datalake.specialized.DataLakeLeaseAsyncClient" data-throw-if-not-resolved="false">DataLakeLeaseAsyncClient</xref> are constructed every time <xref uid="com.azure.storage.file.datalake.specialized.DataLakeLeaseClientBuilder.buildClient()" data-throw-if-not-resolved="false">buildClient</xref> and <xref uid="com.azure.storage.file.datalake.specialized.DataLakeLeaseClientBuilder.buildAsyncClient()" data-throw-if-not-resolved="false">buildAsyncClient</xref> are called respectively.


    When a client is instantiated and a <xref uid="com.azure.storage.file.datalake.specialized.DataLakeLeaseClientBuilder.leaseId(java.lang.String)" data-throw-if-not-resolved="false">leaseId</xref> hasn't been set a <xref uid="" data-throw-if-not-resolved="false">UUID</xref> will be used as the lease identifier.


    **Instantiating LeaseClients**


    ```java

    DataLakeLeaseClient dataLakeLeaseClient = new DataLakeLeaseClientBuilder()
         .fileClient(fileClient)
         .leaseId(leaseId)
         .buildClient();
    ```


    ```java

    DataLakeLeaseClient dataLakeLeaseClient = new DataLakeLeaseClientBuilder()
         .directoryClient(directoryClient)
         .leaseId(leaseId)
         .buildClient();
    ```


    ```java

    DataLakeLeaseClient dataLakeLeaseClient = new DataLakeLeaseClientBuilder()
         .fileSystemClient(dataLakeFileSystemClient)
         .leaseId(leaseId)
         .buildClient();
    ```


    **Instantiating LeaseAsyncClients**


    ```java

    DataLakeLeaseAsyncClient dataLakeLeaseAsyncClient = new DataLakeLeaseClientBuilder()
         .fileAsyncClient(fileAsyncClient)
         .leaseId(leaseId)
         .buildAsyncClient();
    ```


    ```java

    DataLakeLeaseAsyncClient dataLakeLeaseAsyncClient = new DataLakeLeaseClientBuilder()
         .directoryAsyncClient(directoryAsyncClient)
         .leaseId(leaseId)
         .buildAsyncClient();
    ```


    ```java

    DataLakeLeaseAsyncClient dataLakeLeaseAsyncClient = new DataLakeLeaseClientBuilder()
         .fileSystemAsyncClient(dataLakeFileSystemAsyncClient)
         .leaseId(leaseId)
         .buildAsyncClient();
    ```
  syntax:
    content: public final class DataLakeLeaseClientBuilder
  inheritance:
  - java.lang.Object
  inheritedMembers:
  - java.lang.Object.clone()
  - java.lang.Object.equals(java.lang.Object)
  - java.lang.Object.finalize()
  - java.lang.Object.getClass()
  - java.lang.Object.hashCode()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.toString()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
- uid: com.azure.storage.file.datalake.specialized.DataLakeLeaseClientBuilder.DataLakeLeaseClientBuilder()
  id: DataLakeLeaseClientBuilder()
  artifact: com.azure:azure-storage-file-datalake:12.2.0-beta.1
  parent: com.azure.storage.file.datalake.specialized.DataLakeLeaseClientBuilder
  langs:
  - java
  name: DataLakeLeaseClientBuilder()
  nameWithType: DataLakeLeaseClientBuilder.DataLakeLeaseClientBuilder()
  fullName: com.azure.storage.file.datalake.specialized.DataLakeLeaseClientBuilder.DataLakeLeaseClientBuilder()
  overload: com.azure.storage.file.datalake.specialized.DataLakeLeaseClientBuilder.DataLakeLeaseClientBuilder*
  type: Constructor
  package: com.azure.storage.file.datalake.specialized
  summary: Creates a new instance of <xref uid="com.azure.storage.file.datalake.specialized.DataLakeLeaseClientBuilder" data-throw-if-not-resolved="false">DataLakeLeaseClientBuilder</xref>.
  syntax:
    content: public DataLakeLeaseClientBuilder()
- uid: com.azure.storage.file.datalake.specialized.DataLakeLeaseClientBuilder.buildAsyncClient()
  id: buildAsyncClient()
  artifact: com.azure:azure-storage-file-datalake:12.2.0-beta.1
  parent: com.azure.storage.file.datalake.specialized.DataLakeLeaseClientBuilder
  langs:
  - java
  name: buildAsyncClient()
  nameWithType: DataLakeLeaseClientBuilder.buildAsyncClient()
  fullName: com.azure.storage.file.datalake.specialized.DataLakeLeaseClientBuilder.buildAsyncClient()
  overload: com.azure.storage.file.datalake.specialized.DataLakeLeaseClientBuilder.buildAsyncClient*
  type: Method
  package: com.azure.storage.file.datalake.specialized
  summary: Creates a <xref uid="com.azure.storage.file.datalake.specialized.DataLakeLeaseAsyncClient" data-throw-if-not-resolved="false">DataLakeLeaseAsyncClient</xref> based on the configurations set in the builder.
  syntax:
    content: public DataLakeLeaseAsyncClient buildAsyncClient()
    return:
      type: com.azure.storage.file.datalake.specialized.DataLakeLeaseAsyncClient
      description: a <xref uid="com.azure.storage.file.datalake.specialized.DataLakeLeaseAsyncClient" data-throw-if-not-resolved="false">DataLakeLeaseAsyncClient</xref> based on the configurations in this builder.
- uid: com.azure.storage.file.datalake.specialized.DataLakeLeaseClientBuilder.buildClient()
  id: buildClient()
  artifact: com.azure:azure-storage-file-datalake:12.2.0-beta.1
  parent: com.azure.storage.file.datalake.specialized.DataLakeLeaseClientBuilder
  langs:
  - java
  name: buildClient()
  nameWithType: DataLakeLeaseClientBuilder.buildClient()
  fullName: com.azure.storage.file.datalake.specialized.DataLakeLeaseClientBuilder.buildClient()
  overload: com.azure.storage.file.datalake.specialized.DataLakeLeaseClientBuilder.buildClient*
  type: Method
  package: com.azure.storage.file.datalake.specialized
  summary: Creates a <xref uid="com.azure.storage.file.datalake.specialized.DataLakeLeaseClient" data-throw-if-not-resolved="false">DataLakeLeaseClient</xref> based on the configurations set in the builder.
  syntax:
    content: public DataLakeLeaseClient buildClient()
    return:
      type: com.azure.storage.file.datalake.specialized.DataLakeLeaseClient
      description: a <xref uid="com.azure.storage.file.datalake.specialized.DataLakeLeaseClient" data-throw-if-not-resolved="false">DataLakeLeaseClient</xref> based on the configurations in this builder.
- uid: com.azure.storage.file.datalake.specialized.DataLakeLeaseClientBuilder.directoryAsyncClient(com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient)
  id: directoryAsyncClient(com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient)
  artifact: com.azure:azure-storage-file-datalake:12.2.0-beta.1
  parent: com.azure.storage.file.datalake.specialized.DataLakeLeaseClientBuilder
  langs:
  - java
  name: directoryAsyncClient(DataLakeDirectoryAsyncClient dataLakeDirectoryAsyncClient)
  nameWithType: DataLakeLeaseClientBuilder.directoryAsyncClient(DataLakeDirectoryAsyncClient dataLakeDirectoryAsyncClient)
  fullName: com.azure.storage.file.datalake.specialized.DataLakeLeaseClientBuilder.directoryAsyncClient(DataLakeDirectoryAsyncClient dataLakeDirectoryAsyncClient)
  overload: com.azure.storage.file.datalake.specialized.DataLakeLeaseClientBuilder.directoryAsyncClient*
  type: Method
  package: com.azure.storage.file.datalake.specialized
  summary: Configures the builder based on the passed <xref uid="com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient" data-throw-if-not-resolved="false">DataLakeDirectoryAsyncClient</xref>. This will set the <xref uid="" data-throw-if-not-resolved="false">HttpPipeline</xref> and <xref uid="" data-throw-if-not-resolved="false">URL</xref> that are used to interact with the service.
  syntax:
    content: public DataLakeLeaseClientBuilder directoryAsyncClient(DataLakeDirectoryAsyncClient dataLakeDirectoryAsyncClient)
    parameters:
    - id: dataLakeDirectoryAsyncClient
      type: com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient
      description: DataLakeDirectoryAsyncClient used to configure the builder.
    return:
      type: com.azure.storage.file.datalake.specialized.DataLakeLeaseClientBuilder
      description: the updated DataLakeLeaseClientBuilder object
- uid: com.azure.storage.file.datalake.specialized.DataLakeLeaseClientBuilder.directoryClient(com.azure.storage.file.datalake.DataLakeDirectoryClient)
  id: directoryClient(com.azure.storage.file.datalake.DataLakeDirectoryClient)
  artifact: com.azure:azure-storage-file-datalake:12.2.0-beta.1
  parent: com.azure.storage.file.datalake.specialized.DataLakeLeaseClientBuilder
  langs:
  - java
  name: directoryClient(DataLakeDirectoryClient dataLakeDirectoryClient)
  nameWithType: DataLakeLeaseClientBuilder.directoryClient(DataLakeDirectoryClient dataLakeDirectoryClient)
  fullName: com.azure.storage.file.datalake.specialized.DataLakeLeaseClientBuilder.directoryClient(DataLakeDirectoryClient dataLakeDirectoryClient)
  overload: com.azure.storage.file.datalake.specialized.DataLakeLeaseClientBuilder.directoryClient*
  type: Method
  package: com.azure.storage.file.datalake.specialized
  summary: Configures the builder based on the passed <xref uid="com.azure.storage.file.datalake.DataLakeDirectoryClient" data-throw-if-not-resolved="false">DataLakeDirectoryClient</xref>. This will set the <xref uid="" data-throw-if-not-resolved="false">HttpPipeline</xref> and <xref uid="" data-throw-if-not-resolved="false">URL</xref> that are used to interact with the service.
  syntax:
    content: public DataLakeLeaseClientBuilder directoryClient(DataLakeDirectoryClient dataLakeDirectoryClient)
    parameters:
    - id: dataLakeDirectoryClient
      type: com.azure.storage.file.datalake.DataLakeDirectoryClient
      description: DataLakeDirectoryClient used to configure the builder.
    return:
      type: com.azure.storage.file.datalake.specialized.DataLakeLeaseClientBuilder
      description: the updated DataLakeLeaseClientBuilder object
- uid: com.azure.storage.file.datalake.specialized.DataLakeLeaseClientBuilder.fileAsyncClient(com.azure.storage.file.datalake.DataLakeFileAsyncClient)
  id: fileAsyncClient(com.azure.storage.file.datalake.DataLakeFileAsyncClient)
  artifact: com.azure:azure-storage-file-datalake:12.2.0-beta.1
  parent: com.azure.storage.file.datalake.specialized.DataLakeLeaseClientBuilder
  langs:
  - java
  name: fileAsyncClient(DataLakeFileAsyncClient dataLakeFileAsyncClient)
  nameWithType: DataLakeLeaseClientBuilder.fileAsyncClient(DataLakeFileAsyncClient dataLakeFileAsyncClient)
  fullName: com.azure.storage.file.datalake.specialized.DataLakeLeaseClientBuilder.fileAsyncClient(DataLakeFileAsyncClient dataLakeFileAsyncClient)
  overload: com.azure.storage.file.datalake.specialized.DataLakeLeaseClientBuilder.fileAsyncClient*
  type: Method
  package: com.azure.storage.file.datalake.specialized
  summary: Configures the builder based on the passed <xref uid="com.azure.storage.file.datalake.DataLakeFileAsyncClient" data-throw-if-not-resolved="false">DataLakeFileAsyncClient</xref>. This will set the <xref uid="" data-throw-if-not-resolved="false">HttpPipeline</xref> and <xref uid="" data-throw-if-not-resolved="false">URL</xref> that are used to interact with the service.
  syntax:
    content: public DataLakeLeaseClientBuilder fileAsyncClient(DataLakeFileAsyncClient dataLakeFileAsyncClient)
    parameters:
    - id: dataLakeFileAsyncClient
      type: com.azure.storage.file.datalake.DataLakeFileAsyncClient
      description: DataLakeFileAsyncClient used to configure the builder.
    return:
      type: com.azure.storage.file.datalake.specialized.DataLakeLeaseClientBuilder
      description: the updated DataLakeLeaseClientBuilder object
- uid: com.azure.storage.file.datalake.specialized.DataLakeLeaseClientBuilder.fileClient(com.azure.storage.file.datalake.DataLakeFileClient)
  id: fileClient(com.azure.storage.file.datalake.DataLakeFileClient)
  artifact: com.azure:azure-storage-file-datalake:12.2.0-beta.1
  parent: com.azure.storage.file.datalake.specialized.DataLakeLeaseClientBuilder
  langs:
  - java
  name: fileClient(DataLakeFileClient dataLakeFileClient)
  nameWithType: DataLakeLeaseClientBuilder.fileClient(DataLakeFileClient dataLakeFileClient)
  fullName: com.azure.storage.file.datalake.specialized.DataLakeLeaseClientBuilder.fileClient(DataLakeFileClient dataLakeFileClient)
  overload: com.azure.storage.file.datalake.specialized.DataLakeLeaseClientBuilder.fileClient*
  type: Method
  package: com.azure.storage.file.datalake.specialized
  summary: Configures the builder based on the passed <xref uid="com.azure.storage.file.datalake.DataLakeFileClient" data-throw-if-not-resolved="false">DataLakeFileClient</xref>. This will set the <xref uid="" data-throw-if-not-resolved="false">HttpPipeline</xref> and <xref uid="" data-throw-if-not-resolved="false">URL</xref> that are used to interact with the service.
  syntax:
    content: public DataLakeLeaseClientBuilder fileClient(DataLakeFileClient dataLakeFileClient)
    parameters:
    - id: dataLakeFileClient
      type: com.azure.storage.file.datalake.DataLakeFileClient
      description: DataLakeFileClient used to configure the builder.
    return:
      type: com.azure.storage.file.datalake.specialized.DataLakeLeaseClientBuilder
      description: the updated DataLakeLeaseClientBuilder object
- uid: com.azure.storage.file.datalake.specialized.DataLakeLeaseClientBuilder.fileSystemAsyncClient(com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient)
  id: fileSystemAsyncClient(com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient)
  artifact: com.azure:azure-storage-file-datalake:12.2.0-beta.1
  parent: com.azure.storage.file.datalake.specialized.DataLakeLeaseClientBuilder
  langs:
  - java
  name: fileSystemAsyncClient(DataLakeFileSystemAsyncClient dataLakeFileSystemAsyncClient)
  nameWithType: DataLakeLeaseClientBuilder.fileSystemAsyncClient(DataLakeFileSystemAsyncClient dataLakeFileSystemAsyncClient)
  fullName: com.azure.storage.file.datalake.specialized.DataLakeLeaseClientBuilder.fileSystemAsyncClient(DataLakeFileSystemAsyncClient dataLakeFileSystemAsyncClient)
  overload: com.azure.storage.file.datalake.specialized.DataLakeLeaseClientBuilder.fileSystemAsyncClient*
  type: Method
  package: com.azure.storage.file.datalake.specialized
  summary: Configures the builder based on the passed <xref uid="com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient" data-throw-if-not-resolved="false">DataLakeFileSystemAsyncClient</xref>. This will set the <xref uid="" data-throw-if-not-resolved="false">HttpPipeline</xref> and <xref uid="" data-throw-if-not-resolved="false">URL</xref> that are used to interact with the service.
  syntax:
    content: public DataLakeLeaseClientBuilder fileSystemAsyncClient(DataLakeFileSystemAsyncClient dataLakeFileSystemAsyncClient)
    parameters:
    - id: dataLakeFileSystemAsyncClient
      type: com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient
      description: DataLakeFileSystemAsyncClient used to configure the builder.
    return:
      type: com.azure.storage.file.datalake.specialized.DataLakeLeaseClientBuilder
      description: the updated DataLakeLeaseClientBuilder object
- uid: com.azure.storage.file.datalake.specialized.DataLakeLeaseClientBuilder.fileSystemClient(com.azure.storage.file.datalake.DataLakeFileSystemClient)
  id: fileSystemClient(com.azure.storage.file.datalake.DataLakeFileSystemClient)
  artifact: com.azure:azure-storage-file-datalake:12.2.0-beta.1
  parent: com.azure.storage.file.datalake.specialized.DataLakeLeaseClientBuilder
  langs:
  - java
  name: fileSystemClient(DataLakeFileSystemClient dataLakeFileSystemClient)
  nameWithType: DataLakeLeaseClientBuilder.fileSystemClient(DataLakeFileSystemClient dataLakeFileSystemClient)
  fullName: com.azure.storage.file.datalake.specialized.DataLakeLeaseClientBuilder.fileSystemClient(DataLakeFileSystemClient dataLakeFileSystemClient)
  overload: com.azure.storage.file.datalake.specialized.DataLakeLeaseClientBuilder.fileSystemClient*
  type: Method
  package: com.azure.storage.file.datalake.specialized
  summary: Configures the builder based on the passed <xref uid="com.azure.storage.file.datalake.DataLakeFileSystemClient" data-throw-if-not-resolved="false">DataLakeFileSystemClient</xref>. This will set the <xref uid="" data-throw-if-not-resolved="false">HttpPipeline</xref> and <xref uid="" data-throw-if-not-resolved="false">URL</xref> that are used to interact with the service.
  syntax:
    content: public DataLakeLeaseClientBuilder fileSystemClient(DataLakeFileSystemClient dataLakeFileSystemClient)
    parameters:
    - id: dataLakeFileSystemClient
      type: com.azure.storage.file.datalake.DataLakeFileSystemClient
      description: DataLakeFileSystemClient used to configure the builder.
    return:
      type: com.azure.storage.file.datalake.specialized.DataLakeLeaseClientBuilder
      description: the updated DataLakeLeaseClientBuilder object
- uid: com.azure.storage.file.datalake.specialized.DataLakeLeaseClientBuilder.leaseId(java.lang.String)
  id: leaseId(java.lang.String)
  artifact: com.azure:azure-storage-file-datalake:12.2.0-beta.1
  parent: com.azure.storage.file.datalake.specialized.DataLakeLeaseClientBuilder
  langs:
  - java
  name: leaseId(String leaseId)
  nameWithType: DataLakeLeaseClientBuilder.leaseId(String leaseId)
  fullName: com.azure.storage.file.datalake.specialized.DataLakeLeaseClientBuilder.leaseId(String leaseId)
  overload: com.azure.storage.file.datalake.specialized.DataLakeLeaseClientBuilder.leaseId*
  type: Method
  package: com.azure.storage.file.datalake.specialized
  summary: >-
    Sets the identifier for the lease.


    If a lease ID isn't set then a <xref uid="" data-throw-if-not-resolved="false">UUID</xref> will be used.
  syntax:
    content: public DataLakeLeaseClientBuilder leaseId(String leaseId)
    parameters:
    - id: leaseId
      type: java.lang.String
      description: Identifier for the lease.
    return:
      type: com.azure.storage.file.datalake.specialized.DataLakeLeaseClientBuilder
      description: the updated DataLakeLeaseClientBuilder object
references:
- uid: com.azure.storage.file.datalake.specialized.DataLakeLeaseClientBuilder.DataLakeLeaseClientBuilder*
  name: DataLakeLeaseClientBuilder
  nameWithType: DataLakeLeaseClientBuilder.DataLakeLeaseClientBuilder
  fullName: com.azure.storage.file.datalake.specialized.DataLakeLeaseClientBuilder.DataLakeLeaseClientBuilder
  package: com.azure.storage.file.datalake.specialized
- uid: com.azure.storage.file.datalake.specialized.DataLakeLeaseClient
  name: DataLakeLeaseClient
  nameWithType: DataLakeLeaseClient
  fullName: com.azure.storage.file.datalake.specialized.DataLakeLeaseClient
- uid: com.azure.storage.file.datalake.specialized.DataLakeLeaseClientBuilder.buildClient*
  name: buildClient
  nameWithType: DataLakeLeaseClientBuilder.buildClient
  fullName: com.azure.storage.file.datalake.specialized.DataLakeLeaseClientBuilder.buildClient
  package: com.azure.storage.file.datalake.specialized
- uid: com.azure.storage.file.datalake.specialized.DataLakeLeaseAsyncClient
  name: DataLakeLeaseAsyncClient
  nameWithType: DataLakeLeaseAsyncClient
  fullName: com.azure.storage.file.datalake.specialized.DataLakeLeaseAsyncClient
- uid: com.azure.storage.file.datalake.specialized.DataLakeLeaseClientBuilder.buildAsyncClient*
  name: buildAsyncClient
  nameWithType: DataLakeLeaseClientBuilder.buildAsyncClient
  fullName: com.azure.storage.file.datalake.specialized.DataLakeLeaseClientBuilder.buildAsyncClient
  package: com.azure.storage.file.datalake.specialized
- uid: com.azure.storage.file.datalake.DataLakeFileClient
  name: DataLakeFileClient
  nameWithType: DataLakeFileClient
  fullName: com.azure.storage.file.datalake.DataLakeFileClient
- uid: com.azure.storage.file.datalake.specialized.DataLakeLeaseClientBuilder.fileClient*
  name: fileClient
  nameWithType: DataLakeLeaseClientBuilder.fileClient
  fullName: com.azure.storage.file.datalake.specialized.DataLakeLeaseClientBuilder.fileClient
  package: com.azure.storage.file.datalake.specialized
- uid: com.azure.storage.file.datalake.DataLakeFileAsyncClient
  name: DataLakeFileAsyncClient
  nameWithType: DataLakeFileAsyncClient
  fullName: com.azure.storage.file.datalake.DataLakeFileAsyncClient
- uid: com.azure.storage.file.datalake.specialized.DataLakeLeaseClientBuilder.fileAsyncClient*
  name: fileAsyncClient
  nameWithType: DataLakeLeaseClientBuilder.fileAsyncClient
  fullName: com.azure.storage.file.datalake.specialized.DataLakeLeaseClientBuilder.fileAsyncClient
  package: com.azure.storage.file.datalake.specialized
- uid: com.azure.storage.file.datalake.DataLakeDirectoryClient
  name: DataLakeDirectoryClient
  nameWithType: DataLakeDirectoryClient
  fullName: com.azure.storage.file.datalake.DataLakeDirectoryClient
- uid: com.azure.storage.file.datalake.specialized.DataLakeLeaseClientBuilder.directoryClient*
  name: directoryClient
  nameWithType: DataLakeLeaseClientBuilder.directoryClient
  fullName: com.azure.storage.file.datalake.specialized.DataLakeLeaseClientBuilder.directoryClient
  package: com.azure.storage.file.datalake.specialized
- uid: com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient
  name: DataLakeDirectoryAsyncClient
  nameWithType: DataLakeDirectoryAsyncClient
  fullName: com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient
- uid: com.azure.storage.file.datalake.specialized.DataLakeLeaseClientBuilder.directoryAsyncClient*
  name: directoryAsyncClient
  nameWithType: DataLakeLeaseClientBuilder.directoryAsyncClient
  fullName: com.azure.storage.file.datalake.specialized.DataLakeLeaseClientBuilder.directoryAsyncClient
  package: com.azure.storage.file.datalake.specialized
- uid: com.azure.storage.file.datalake.DataLakeFileSystemClient
  name: DataLakeFileSystemClient
  nameWithType: DataLakeFileSystemClient
  fullName: com.azure.storage.file.datalake.DataLakeFileSystemClient
- uid: com.azure.storage.file.datalake.specialized.DataLakeLeaseClientBuilder.fileSystemClient*
  name: fileSystemClient
  nameWithType: DataLakeLeaseClientBuilder.fileSystemClient
  fullName: com.azure.storage.file.datalake.specialized.DataLakeLeaseClientBuilder.fileSystemClient
  package: com.azure.storage.file.datalake.specialized
- uid: com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient
  name: DataLakeFileSystemAsyncClient
  nameWithType: DataLakeFileSystemAsyncClient
  fullName: com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient
- uid: com.azure.storage.file.datalake.specialized.DataLakeLeaseClientBuilder.fileSystemAsyncClient*
  name: fileSystemAsyncClient
  nameWithType: DataLakeLeaseClientBuilder.fileSystemAsyncClient
  fullName: com.azure.storage.file.datalake.specialized.DataLakeLeaseClientBuilder.fileSystemAsyncClient
  package: com.azure.storage.file.datalake.specialized
- uid: java.lang.String
  spec.java:
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
- uid: com.azure.storage.file.datalake.specialized.DataLakeLeaseClientBuilder.leaseId*
  name: leaseId
  nameWithType: DataLakeLeaseClientBuilder.leaseId
  fullName: com.azure.storage.file.datalake.specialized.DataLakeLeaseClientBuilder.leaseId
  package: com.azure.storage.file.datalake.specialized
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: java.lang.Object.finalize()
  name: Object.finalize()
  nameWithType: Object.finalize()
  fullName: java.lang.Object.finalize()
- uid: java.lang.Object.clone()
  name: Object.clone()
  nameWithType: Object.clone()
  fullName: java.lang.Object.clone()
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: java.lang.Object.equals(java.lang.Object)
  name: Object.equals(Object)
  nameWithType: Object.equals(Object)
  fullName: java.lang.Object.equals(java.lang.Object)
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.lang.Object.hashCode()
  name: Object.hashCode()
  nameWithType: Object.hashCode()
  fullName: java.lang.Object.hashCode()
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: java.lang.Object.toString()
  name: Object.toString()
  nameWithType: Object.toString()
  fullName: java.lang.Object.toString()
