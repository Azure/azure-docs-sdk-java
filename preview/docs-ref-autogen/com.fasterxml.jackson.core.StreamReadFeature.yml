### YamlMime:JavaEnum
uid: "com.fasterxml.jackson.core.StreamReadFeature"
fullName: "com.fasterxml.jackson.core.StreamReadFeature"
name: "StreamReadFeature"
nameWithType: "StreamReadFeature"
summary: "Token reader (parser) features not-specific to any particular format backend. Eventual replacement for non-JSON-specific <xref uid=\"com.fasterxml.jackson.core.JsonParser.Feature\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.fasterxml.jackson.core.JsonParser.Feature\"></xref>s."
inheritances:
- "<xref href=\"java.lang.Object\" data-throw-if-not-resolved=\"False\" />"
- "<xref href=\"java.lang.Enum\" data-throw-if-not-resolved=\"False\" />"
inheritedMembers:
- "java.lang.Enum.<T>valueOf(java.lang.Class<T>,java.lang.String)"
- "java.lang.Enum.clone()"
- "java.lang.Enum.compareTo(E)"
- "java.lang.Enum.equals(java.lang.Object)"
- "java.lang.Enum.finalize()"
- "java.lang.Enum.getDeclaringClass()"
- "java.lang.Enum.hashCode()"
- "java.lang.Enum.name()"
- "java.lang.Enum.ordinal()"
- "java.lang.Enum.toString()"
- "java.lang.Object.getClass()"
- "java.lang.Object.notify()"
- "java.lang.Object.notifyAll()"
- "java.lang.Object.wait()"
- "java.lang.Object.wait(long)"
- "java.lang.Object.wait(long,int)"
syntax: "public enum StreamReadFeature extends Enum<StreamReadFeature>"
fields:
- uid: "com.fasterxml.jackson.core.StreamReadFeature.AUTO_CLOSE_SOURCE"
  fullName: "com.fasterxml.jackson.core.StreamReadFeature.AUTO_CLOSE_SOURCE"
  name: "AUTO_CLOSE_SOURCE"
  nameWithType: "StreamReadFeature.AUTO_CLOSE_SOURCE"
  summary: "Feature that determines whether parser will automatically close underlying input source that is NOT owned by the parser. If disabled, calling application has to separately close the underlying <xref uid=\"java.io.InputStream\" data-throw-if-not-resolved=\"false\" data-raw-source=\"InputStream\"></xref> and <xref uid=\"java.io.Reader\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Reader\"></xref> instances used to create the parser. If enabled, parser will handle closing, as long as parser itself gets closed: this happens when end-of-input is encountered, or parser is closed by a call to <xref uid=\"com.fasterxml.jackson.core.JsonParser.close*\" data-throw-if-not-resolved=\"false\" data-raw-source=\"JsonParser#close\"></xref>.\n\nFeature is enabled by default."
- uid: "com.fasterxml.jackson.core.StreamReadFeature.IGNORE_UNDEFINED"
  fullName: "com.fasterxml.jackson.core.StreamReadFeature.IGNORE_UNDEFINED"
  name: "IGNORE_UNDEFINED"
  nameWithType: "StreamReadFeature.IGNORE_UNDEFINED"
  summary: "Feature that determines what to do if the underlying data format requires knowledge of all properties to decode (usually via a Schema), and if no definition is found for a property that input content contains. Typically most textual data formats do NOT require schema information (although some do, such as CSV), whereas many binary data formats do require definitions (such as Avro, protobuf), although not all (Smile, CBOR, BSON and MessagePack do not). Further note that some formats that do require schema information will not be able to ignore undefined properties: for example, Avro is fully positional and there is no possibility of undefined data. This leaves formats like Protobuf that have identifiers that may or may not map; and as such Protobuf format does make use of this feature.\n\nNote that support for this feature is implemented by individual data format module, if (and only if) it makes sense for the format in question. For JSON, for example, this feature has no effect as properties need not be pre-defined.\n\nFeature is disabled by default, meaning that if the underlying data format requires knowledge of all properties to output, attempts to read an unknown property will result in a <xref uid=\"com.fasterxml.jackson.core.JsonProcessingException\" data-throw-if-not-resolved=\"false\" data-raw-source=\"JsonProcessingException\"></xref>"
- uid: "com.fasterxml.jackson.core.StreamReadFeature.INCLUDE_SOURCE_IN_LOCATION"
  fullName: "com.fasterxml.jackson.core.StreamReadFeature.INCLUDE_SOURCE_IN_LOCATION"
  name: "INCLUDE_SOURCE_IN_LOCATION"
  nameWithType: "StreamReadFeature.INCLUDE_SOURCE_IN_LOCATION"
  summary: "Feature that determines whether <xref uid=\"com.fasterxml.jackson.core.JsonLocation\" data-throw-if-not-resolved=\"false\" data-raw-source=\"JsonLocation\"></xref> instances should be constructed with reference to source or not. If source reference is included, its type and contents are included when \\`toString()\\` method is called (most notably when printing out parse exception with that location information). If feature is disabled, no source reference is passed and source is only indicated as \"UNKNOWN\".\n\nMost common reason for disabling this feature is to avoid leaking internal information; this may be done for security reasons. Note that even if source reference is included, only parts of contents are usually printed, and not the whole contents. Further, many source reference types can not necessarily access contents (like streams), so only type is indicated, not contents.\n\nFeature is enabled by default, meaning that \"source reference\" information is passed and some or all of the source content may be included in <xref uid=\"com.fasterxml.jackson.core.JsonLocation\" data-throw-if-not-resolved=\"false\" data-raw-source=\"JsonLocation\"></xref> information constructed either when requested explicitly, or when needed for an exception."
- uid: "com.fasterxml.jackson.core.StreamReadFeature.STRICT_DUPLICATE_DETECTION"
  fullName: "com.fasterxml.jackson.core.StreamReadFeature.STRICT_DUPLICATE_DETECTION"
  name: "STRICT_DUPLICATE_DETECTION"
  nameWithType: "StreamReadFeature.STRICT_DUPLICATE_DETECTION"
  summary: "Feature that determines whether <xref uid=\"com.fasterxml.jackson.core.JsonParser\" data-throw-if-not-resolved=\"false\" data-raw-source=\"JsonParser\"></xref> will explicitly check that no duplicate JSON Object field names are encountered. If enabled, parser will check all names within context and report duplicates by throwing a <xref uid=\"com.fasterxml.jackson.core.JsonParseException\" data-throw-if-not-resolved=\"false\" data-raw-source=\"JsonParseException\"></xref>; if disabled, parser will not do such checking. Assumption in latter case is that caller takes care of handling duplicates at a higher level: data-binding, for example, has features to specify detection to be done there.\n\nNote that enabling this feature will incur performance overhead due to having to store and check additional information: this typically adds 20-30% to execution time for basic parsing."
methods:
- uid: "com.fasterxml.jackson.core.StreamReadFeature.collectDefaults()"
  fullName: "com.fasterxml.jackson.core.StreamReadFeature.collectDefaults()"
  name: "collectDefaults()"
  nameWithType: "StreamReadFeature.collectDefaults()"
  summary: "Method that calculates bit set (flags) of all features that are enabled by default."
  syntax: "public static int collectDefaults()"
  returns:
    type: "<xref href=\"int?alt=int&text=int\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.fasterxml.jackson.core.StreamReadFeature.enabledByDefault()"
  fullName: "com.fasterxml.jackson.core.StreamReadFeature.enabledByDefault()"
  name: "enabledByDefault()"
  nameWithType: "StreamReadFeature.enabledByDefault()"
  syntax: "public boolean enabledByDefault()"
  returns:
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.fasterxml.jackson.core.StreamReadFeature.enabledIn(int)"
  fullName: "com.fasterxml.jackson.core.StreamReadFeature.enabledIn(int flags)"
  name: "enabledIn(int flags)"
  nameWithType: "StreamReadFeature.enabledIn(int flags)"
  parameters:
  - name: "flags"
    type: "<xref href=\"int?alt=int&text=int\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public boolean enabledIn(int flags)"
  returns:
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.fasterxml.jackson.core.StreamReadFeature.getMask()"
  fullName: "com.fasterxml.jackson.core.StreamReadFeature.getMask()"
  name: "getMask()"
  nameWithType: "StreamReadFeature.getMask()"
  syntax: "public int getMask()"
  returns:
    type: "<xref href=\"int?alt=int&text=int\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.fasterxml.jackson.core.StreamReadFeature.mappedFeature()"
  fullName: "com.fasterxml.jackson.core.StreamReadFeature.mappedFeature()"
  name: "mappedFeature()"
  nameWithType: "StreamReadFeature.mappedFeature()"
  syntax: "public JsonParser.Feature mappedFeature()"
  returns:
    type: "<xref href=\"com.fasterxml.jackson.core.JsonParser.Feature?alt=com.fasterxml.jackson.core.JsonParser.Feature&text=Feature\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.fasterxml.jackson.core.StreamReadFeature.valueOf(java.lang.String)"
  fullName: "com.fasterxml.jackson.core.StreamReadFeature.valueOf(String name)"
  name: "valueOf(String name)"
  nameWithType: "StreamReadFeature.valueOf(String name)"
  parameters:
  - name: "name"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public static StreamReadFeature valueOf(String name)"
  returns:
    type: "<xref href=\"com.fasterxml.jackson.core.StreamReadFeature?alt=com.fasterxml.jackson.core.StreamReadFeature&text=StreamReadFeature\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.fasterxml.jackson.core.StreamReadFeature.values()"
  fullName: "com.fasterxml.jackson.core.StreamReadFeature.values()"
  name: "values()"
  nameWithType: "StreamReadFeature.values()"
  syntax: "public static StreamReadFeature[] values()"
  returns:
    type: "<xref href=\"com.fasterxml.jackson.core.StreamReadFeature?alt=com.fasterxml.jackson.core.StreamReadFeature&text=StreamReadFeature\" data-throw-if-not-resolved=\"False\" />[]"
metadata: {}
package: "com.fasterxml.jackson.core"
artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
