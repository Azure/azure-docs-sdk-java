### YamlMime:ManagedReference
items:
- uid: com.fasterxml.jackson.core.StreamReadFeature
  id: StreamReadFeature
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core
  children:
  - com.fasterxml.jackson.core.StreamReadFeature.AUTO_CLOSE_SOURCE
  - com.fasterxml.jackson.core.StreamReadFeature.IGNORE_UNDEFINED
  - com.fasterxml.jackson.core.StreamReadFeature.INCLUDE_SOURCE_IN_LOCATION
  - com.fasterxml.jackson.core.StreamReadFeature.STRICT_DUPLICATE_DETECTION
  - com.fasterxml.jackson.core.StreamReadFeature.collectDefaults()
  - com.fasterxml.jackson.core.StreamReadFeature.enabledByDefault()
  - com.fasterxml.jackson.core.StreamReadFeature.enabledIn(int)
  - com.fasterxml.jackson.core.StreamReadFeature.getMask()
  - com.fasterxml.jackson.core.StreamReadFeature.mappedFeature()
  - com.fasterxml.jackson.core.StreamReadFeature.valueOf(java.lang.String)
  - com.fasterxml.jackson.core.StreamReadFeature.values()
  langs:
  - java
  name: StreamReadFeature
  nameWithType: StreamReadFeature
  fullName: com.fasterxml.jackson.core.StreamReadFeature
  type: Enum
  package: com.fasterxml.jackson.core
  summary: Token reader (parser) features not-specific to any particular format backend. Eventual replacement for non-JSON-specific <xref uid="com.fasterxml.jackson.core.JsonParser.Feature" data-throw-if-not-resolved="false">com.fasterxml.jackson.core.JsonParser.Feature</xref>s.
  syntax:
    content: public enum StreamReadFeature extends Enum<StreamReadFeature>
  inheritance:
  - java.lang.Object
  - java.lang.Enum
  inheritedMembers:
  - java.lang.Enum.<T>valueOf(java.lang.Class<T>,java.lang.String)
  - java.lang.Enum.clone()
  - java.lang.Enum.compareTo(E)
  - java.lang.Enum.equals(java.lang.Object)
  - java.lang.Enum.finalize()
  - java.lang.Enum.getDeclaringClass()
  - java.lang.Enum.hashCode()
  - java.lang.Enum.name()
  - java.lang.Enum.ordinal()
  - java.lang.Enum.toString()
  - java.lang.Object.getClass()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
- uid: com.fasterxml.jackson.core.StreamReadFeature.AUTO_CLOSE_SOURCE
  id: AUTO_CLOSE_SOURCE
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.StreamReadFeature
  langs:
  - java
  name: AUTO_CLOSE_SOURCE
  nameWithType: StreamReadFeature.AUTO_CLOSE_SOURCE
  fullName: com.fasterxml.jackson.core.StreamReadFeature.AUTO_CLOSE_SOURCE
  type: Field
  package: com.fasterxml.jackson.core
  summary: >-
    Feature that determines whether parser will automatically close underlying input source that is NOT owned by the parser. If disabled, calling application has to separately close the underlying <xref uid="java.io.InputStream" data-throw-if-not-resolved="false">InputStream</xref> and <xref uid="java.io.Reader" data-throw-if-not-resolved="false">Reader</xref> instances used to create the parser. If enabled, parser will handle closing, as long as parser itself gets closed: this happens when end-of-input is encountered, or parser is closed by a call to <xref uid="com.fasterxml.jackson.core.JsonParser.close*" data-throw-if-not-resolved="false">JsonParser#close</xref>.


    Feature is enabled by default.
  syntax:
    content: public static final StreamReadFeature AUTO_CLOSE_SOURCE
    return:
      type: com.fasterxml.jackson.core.StreamReadFeature
- uid: com.fasterxml.jackson.core.StreamReadFeature.IGNORE_UNDEFINED
  id: IGNORE_UNDEFINED
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.StreamReadFeature
  langs:
  - java
  name: IGNORE_UNDEFINED
  nameWithType: StreamReadFeature.IGNORE_UNDEFINED
  fullName: com.fasterxml.jackson.core.StreamReadFeature.IGNORE_UNDEFINED
  type: Field
  package: com.fasterxml.jackson.core
  summary: >-
    Feature that determines what to do if the underlying data format requires knowledge of all properties to decode (usually via a Schema), and if no definition is found for a property that input content contains. Typically most textual data formats do NOT require schema information (although some do, such as CSV), whereas many binary data formats do require definitions (such as Avro, protobuf), although not all (Smile, CBOR, BSON and MessagePack do not). Further note that some formats that do require schema information will not be able to ignore undefined properties: for example, Avro is fully positional and there is no possibility of undefined data. This leaves formats like Protobuf that have identifiers that may or may not map; and as such Protobuf format does make use of this feature.


    Note that support for this feature is implemented by individual data format module, if (and only if) it makes sense for the format in question. For JSON, for example, this feature has no effect as properties need not be pre-defined.


    Feature is disabled by default, meaning that if the underlying data format requires knowledge of all properties to output, attempts to read an unknown property will result in a <xref uid="com.fasterxml.jackson.core.JsonProcessingException" data-throw-if-not-resolved="false">JsonProcessingException</xref>
  syntax:
    content: public static final StreamReadFeature IGNORE_UNDEFINED
    return:
      type: com.fasterxml.jackson.core.StreamReadFeature
- uid: com.fasterxml.jackson.core.StreamReadFeature.INCLUDE_SOURCE_IN_LOCATION
  id: INCLUDE_SOURCE_IN_LOCATION
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.StreamReadFeature
  langs:
  - java
  name: INCLUDE_SOURCE_IN_LOCATION
  nameWithType: StreamReadFeature.INCLUDE_SOURCE_IN_LOCATION
  fullName: com.fasterxml.jackson.core.StreamReadFeature.INCLUDE_SOURCE_IN_LOCATION
  type: Field
  package: com.fasterxml.jackson.core
  summary: >-
    Feature that determines whether <xref uid="com.fasterxml.jackson.core.JsonLocation" data-throw-if-not-resolved="false">JsonLocation</xref> instances should be constructed with reference to source or not. If source reference is included, its type and contents are included when \`toString()\` method is called (most notably when printing out parse exception with that location information). If feature is disabled, no source reference is passed and source is only indicated as "UNKNOWN".


    Most common reason for disabling this feature is to avoid leaking internal information; this may be done for security reasons. Note that even if source reference is included, only parts of contents are usually printed, and not the whole contents. Further, many source reference types can not necessarily access contents (like streams), so only type is indicated, not contents.


    Feature is enabled by default, meaning that "source reference" information is passed and some or all of the source content may be included in <xref uid="com.fasterxml.jackson.core.JsonLocation" data-throw-if-not-resolved="false">JsonLocation</xref> information constructed either when requested explicitly, or when needed for an exception.
  syntax:
    content: public static final StreamReadFeature INCLUDE_SOURCE_IN_LOCATION
    return:
      type: com.fasterxml.jackson.core.StreamReadFeature
- uid: com.fasterxml.jackson.core.StreamReadFeature.STRICT_DUPLICATE_DETECTION
  id: STRICT_DUPLICATE_DETECTION
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.StreamReadFeature
  langs:
  - java
  name: STRICT_DUPLICATE_DETECTION
  nameWithType: StreamReadFeature.STRICT_DUPLICATE_DETECTION
  fullName: com.fasterxml.jackson.core.StreamReadFeature.STRICT_DUPLICATE_DETECTION
  type: Field
  package: com.fasterxml.jackson.core
  summary: >-
    Feature that determines whether <xref uid="com.fasterxml.jackson.core.JsonParser" data-throw-if-not-resolved="false">JsonParser</xref> will explicitly check that no duplicate JSON Object field names are encountered. If enabled, parser will check all names within context and report duplicates by throwing a <xref uid="com.fasterxml.jackson.core.JsonParseException" data-throw-if-not-resolved="false">JsonParseException</xref>; if disabled, parser will not do such checking. Assumption in latter case is that caller takes care of handling duplicates at a higher level: data-binding, for example, has features to specify detection to be done there.


    Note that enabling this feature will incur performance overhead due to having to store and check additional information: this typically adds 20-30% to execution time for basic parsing.
  syntax:
    content: public static final StreamReadFeature STRICT_DUPLICATE_DETECTION
    return:
      type: com.fasterxml.jackson.core.StreamReadFeature
- uid: com.fasterxml.jackson.core.StreamReadFeature.StreamReadFeature(com.fasterxml.jackson.core.JsonParser.Feature)
  id: StreamReadFeature(com.fasterxml.jackson.core.JsonParser.Feature)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.StreamReadFeature
  langs:
  - java
  name: StreamReadFeature(JsonParser.Feature mapTo)
  nameWithType: StreamReadFeature.StreamReadFeature(JsonParser.Feature mapTo)
  fullName: com.fasterxml.jackson.core.StreamReadFeature.StreamReadFeature(JsonParser.Feature mapTo)
  overload: com.fasterxml.jackson.core.StreamReadFeature.StreamReadFeature*
  type: Constructor
  package: com.fasterxml.jackson.core
  syntax:
    content: private StreamReadFeature(JsonParser.Feature mapTo)
    parameters:
    - id: mapTo
      type: com.fasterxml.jackson.core.JsonParser.Feature
- uid: com.fasterxml.jackson.core.StreamReadFeature.collectDefaults()
  id: collectDefaults()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.StreamReadFeature
  langs:
  - java
  name: collectDefaults()
  nameWithType: StreamReadFeature.collectDefaults()
  fullName: com.fasterxml.jackson.core.StreamReadFeature.collectDefaults()
  overload: com.fasterxml.jackson.core.StreamReadFeature.collectDefaults*
  type: Method
  package: com.fasterxml.jackson.core
  summary: Method that calculates bit set (flags) of all features that are enabled by default.
  syntax:
    content: public static int collectDefaults()
    return:
      type: int
- uid: com.fasterxml.jackson.core.StreamReadFeature.enabledByDefault()
  id: enabledByDefault()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.StreamReadFeature
  langs:
  - java
  name: enabledByDefault()
  nameWithType: StreamReadFeature.enabledByDefault()
  fullName: com.fasterxml.jackson.core.StreamReadFeature.enabledByDefault()
  overload: com.fasterxml.jackson.core.StreamReadFeature.enabledByDefault*
  type: Method
  package: com.fasterxml.jackson.core
  syntax:
    content: public boolean enabledByDefault()
    return:
      type: boolean
- uid: com.fasterxml.jackson.core.StreamReadFeature.enabledIn(int)
  id: enabledIn(int)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.StreamReadFeature
  langs:
  - java
  name: enabledIn(int flags)
  nameWithType: StreamReadFeature.enabledIn(int flags)
  fullName: com.fasterxml.jackson.core.StreamReadFeature.enabledIn(int flags)
  overload: com.fasterxml.jackson.core.StreamReadFeature.enabledIn*
  type: Method
  package: com.fasterxml.jackson.core
  syntax:
    content: public boolean enabledIn(int flags)
    parameters:
    - id: flags
      type: int
    return:
      type: boolean
- uid: com.fasterxml.jackson.core.StreamReadFeature.getMask()
  id: getMask()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.StreamReadFeature
  langs:
  - java
  name: getMask()
  nameWithType: StreamReadFeature.getMask()
  fullName: com.fasterxml.jackson.core.StreamReadFeature.getMask()
  overload: com.fasterxml.jackson.core.StreamReadFeature.getMask*
  type: Method
  package: com.fasterxml.jackson.core
  syntax:
    content: public int getMask()
    return:
      type: int
- uid: com.fasterxml.jackson.core.StreamReadFeature.mappedFeature()
  id: mappedFeature()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.StreamReadFeature
  langs:
  - java
  name: mappedFeature()
  nameWithType: StreamReadFeature.mappedFeature()
  fullName: com.fasterxml.jackson.core.StreamReadFeature.mappedFeature()
  overload: com.fasterxml.jackson.core.StreamReadFeature.mappedFeature*
  type: Method
  package: com.fasterxml.jackson.core
  syntax:
    content: public JsonParser.Feature mappedFeature()
    return:
      type: com.fasterxml.jackson.core.JsonParser.Feature
- uid: com.fasterxml.jackson.core.StreamReadFeature.valueOf(java.lang.String)
  id: valueOf(java.lang.String)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.StreamReadFeature
  langs:
  - java
  name: valueOf(String name)
  nameWithType: StreamReadFeature.valueOf(String name)
  fullName: com.fasterxml.jackson.core.StreamReadFeature.valueOf(String name)
  overload: com.fasterxml.jackson.core.StreamReadFeature.valueOf*
  type: Method
  package: com.fasterxml.jackson.core
  syntax:
    content: public static StreamReadFeature valueOf(String name)
    parameters:
    - id: name
      type: java.lang.String
    return:
      type: com.fasterxml.jackson.core.StreamReadFeature
- uid: com.fasterxml.jackson.core.StreamReadFeature.values()
  id: values()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.StreamReadFeature
  langs:
  - java
  name: values()
  nameWithType: StreamReadFeature.values()
  fullName: com.fasterxml.jackson.core.StreamReadFeature.values()
  overload: com.fasterxml.jackson.core.StreamReadFeature.values*
  type: Method
  package: com.fasterxml.jackson.core
  syntax:
    content: public static StreamReadFeature[] values()
    return:
      type: com.fasterxml.jackson.core.StreamReadFeature[]
references:
- uid: com.fasterxml.jackson.core.JsonParser.Feature
  name: JsonParser.Feature
  nameWithType: JsonParser.Feature
  fullName: com.fasterxml.jackson.core.JsonParser.Feature
- uid: com.fasterxml.jackson.core.StreamReadFeature.StreamReadFeature*
  name: StreamReadFeature
  nameWithType: StreamReadFeature.StreamReadFeature
  fullName: com.fasterxml.jackson.core.StreamReadFeature.StreamReadFeature
  package: com.fasterxml.jackson.core
- uid: com.fasterxml.jackson.core.StreamReadFeature[]
  spec.java:
  - uid: com.fasterxml.jackson.core.StreamReadFeature
    name: StreamReadFeature
    fullName: com.fasterxml.jackson.core.StreamReadFeature
  - name: '[]'
    fullName: '[]'
- uid: com.fasterxml.jackson.core.StreamReadFeature.values*
  name: values
  nameWithType: StreamReadFeature.values
  fullName: com.fasterxml.jackson.core.StreamReadFeature.values
  package: com.fasterxml.jackson.core
- uid: java.lang.String
  spec.java:
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
- uid: com.fasterxml.jackson.core.StreamReadFeature.valueOf*
  name: valueOf
  nameWithType: StreamReadFeature.valueOf
  fullName: com.fasterxml.jackson.core.StreamReadFeature.valueOf
  package: com.fasterxml.jackson.core
- uid: int
  spec.java:
  - uid: int
    name: int
    fullName: int
- uid: com.fasterxml.jackson.core.StreamReadFeature.collectDefaults*
  name: collectDefaults
  nameWithType: StreamReadFeature.collectDefaults
  fullName: com.fasterxml.jackson.core.StreamReadFeature.collectDefaults
  package: com.fasterxml.jackson.core
- uid: boolean
  spec.java:
  - uid: boolean
    name: boolean
    fullName: boolean
- uid: com.fasterxml.jackson.core.StreamReadFeature.enabledByDefault*
  name: enabledByDefault
  nameWithType: StreamReadFeature.enabledByDefault
  fullName: com.fasterxml.jackson.core.StreamReadFeature.enabledByDefault
  package: com.fasterxml.jackson.core
- uid: com.fasterxml.jackson.core.StreamReadFeature.enabledIn*
  name: enabledIn
  nameWithType: StreamReadFeature.enabledIn
  fullName: com.fasterxml.jackson.core.StreamReadFeature.enabledIn
  package: com.fasterxml.jackson.core
- uid: com.fasterxml.jackson.core.StreamReadFeature.getMask*
  name: getMask
  nameWithType: StreamReadFeature.getMask
  fullName: com.fasterxml.jackson.core.StreamReadFeature.getMask
  package: com.fasterxml.jackson.core
- uid: com.fasterxml.jackson.core.StreamReadFeature.mappedFeature*
  name: mappedFeature
  nameWithType: StreamReadFeature.mappedFeature
  fullName: com.fasterxml.jackson.core.StreamReadFeature.mappedFeature
  package: com.fasterxml.jackson.core
- uid: java.lang.Enum<com.fasterxml.jackson.core.StreamReadFeature>
  name: Enum<StreamReadFeature>
  nameWithType: Enum<StreamReadFeature>
  fullName: java.lang.Enum<com.fasterxml.jackson.core.StreamReadFeature>
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: java.lang.Enum.toString()
  name: Enum.toString()
  nameWithType: Enum.toString()
  fullName: java.lang.Enum.toString()
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: java.lang.Enum.clone()
  name: Enum.clone()
  nameWithType: Enum.clone()
  fullName: java.lang.Enum.clone()
- uid: java.lang.Enum.finalize()
  name: Enum.finalize()
  nameWithType: Enum.finalize()
  fullName: java.lang.Enum.finalize()
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: java.lang.Enum.compareTo(E)
  name: Enum.compareTo(E)
  nameWithType: Enum.compareTo(E)
  fullName: java.lang.Enum.compareTo(E)
- uid: java.lang.Enum.name()
  name: Enum.name()
  nameWithType: Enum.name()
  fullName: java.lang.Enum.name()
- uid: java.lang.Enum.<T>valueOf(java.lang.Class<T>,java.lang.String)
  name: Enum.<T>valueOf(Class<T>,String)
  nameWithType: Enum.<T>valueOf(Class<T>,String)
  fullName: java.lang.Enum.<T>valueOf(java.lang.Class<T>,java.lang.String)
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: java.lang.Enum.getDeclaringClass()
  name: Enum.getDeclaringClass()
  nameWithType: Enum.getDeclaringClass()
  fullName: java.lang.Enum.getDeclaringClass()
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.lang.Enum.ordinal()
  name: Enum.ordinal()
  nameWithType: Enum.ordinal()
  fullName: java.lang.Enum.ordinal()
- uid: java.lang.Enum.hashCode()
  name: Enum.hashCode()
  nameWithType: Enum.hashCode()
  fullName: java.lang.Enum.hashCode()
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: java.lang.Enum.equals(java.lang.Object)
  name: Enum.equals(Object)
  nameWithType: Enum.equals(Object)
  fullName: java.lang.Enum.equals(java.lang.Object)
- uid: java.lang.Enum
  name: Enum
  nameWithType: Enum
  fullName: java.lang.Enum
- uid: java.lang.Enum.
  name: Enum.
  nameWithType: Enum.
  fullName: java.lang.Enum.
- uid: T>,java.lang.String)
  name: T>,String)
  nameWithType: T>,String)
  fullName: T>,java.lang.String)
- uid: T>valueOf(java.lang.Class
  name: T>valueOf(Class
  nameWithType: T>valueOf(Class
  fullName: T>valueOf(java.lang.Class
