### YamlMime:JavaMember
uid: "com.fasterxml.jackson.databind.node.TreeTraversingParser.getBigIntegerValue*"
fullName: "com.fasterxml.jackson.databind.node.TreeTraversingParser.getBigIntegerValue"
name: "getBigIntegerValue"
nameWithType: "TreeTraversingParser.getBigIntegerValue"
members:
- uid: "com.fasterxml.jackson.databind.node.TreeTraversingParser.getBigIntegerValue()"
  fullName: "com.fasterxml.jackson.databind.node.TreeTraversingParser.getBigIntegerValue()"
  name: "getBigIntegerValue()"
  nameWithType: "TreeTraversingParser.getBigIntegerValue()"
  summary: "Numeric accessor that can be called when the current token is of type <xref uid=\"com.fasterxml.jackson.core.JsonToken.VALUE_NUMBER_INT\" data-throw-if-not-resolved=\"false\" data-raw-source=\"JsonToken#VALUE_NUMBER_INT\"></xref> and it can not be used as a Java long primitive type due to its magnitude. It can also be called for <xref uid=\"com.fasterxml.jackson.core.JsonToken.VALUE_NUMBER_FLOAT\" data-throw-if-not-resolved=\"false\" data-raw-source=\"JsonToken#VALUE_NUMBER_FLOAT\"></xref>; if so, it is equivalent to calling <xref uid=\"com.fasterxml.jackson.databind.node.TreeTraversingParser.getDecimalValue*\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#getDecimalValue\"></xref> and then constructing a <xref uid=\"java.math.BigInteger\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BigInteger\"></xref> from that value."
  overridden: "com.fasterxml.jackson.core.JsonParser.getBigIntegerValue()"
  syntax: "public BigInteger getBigIntegerValue()"
  exceptions:
  - type: "<xref href=\"java.io.IOException?alt=java.io.IOException&text=IOException\" data-throw-if-not-resolved=\"False\" />"
  returns:
    type: "<xref href=\"java.math.BigInteger?alt=java.math.BigInteger&text=BigInteger\" data-throw-if-not-resolved=\"False\" />"
type: "method"
metadata: {}
package: "com.fasterxml.jackson.databind.node"
artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
