### YamlMime:ManagedReference
items:
- uid: com.azure.cosmos.implementation.guava25.base.Functions
  id: Functions
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.base
  children:
  - com.azure.cosmos.implementation.guava25.base.Functions.<A,B,C>compose(com.azure.cosmos.implementation.guava25.base.Function<B,C>,com.azure.cosmos.implementation.guava25.base.Function<A,? extends B>)
  - com.azure.cosmos.implementation.guava25.base.Functions.<E>constant(E)
  - com.azure.cosmos.implementation.guava25.base.Functions.<E>identity()
  - com.azure.cosmos.implementation.guava25.base.Functions.<K,V>forMap(java.util.Map<K,? extends V>,V)
  - com.azure.cosmos.implementation.guava25.base.Functions.<K,V>forMap(java.util.Map<K,V>)
  - com.azure.cosmos.implementation.guava25.base.Functions.<T>forPredicate(com.azure.cosmos.implementation.guava25.base.Predicate<T>)
  - com.azure.cosmos.implementation.guava25.base.Functions.<T>forSupplier(com.azure.cosmos.implementation.guava25.base.Supplier<T>)
  - com.azure.cosmos.implementation.guava25.base.Functions.toStringFunction()
  langs:
  - java
  name: Functions
  nameWithType: Functions
  fullName: com.azure.cosmos.implementation.guava25.base.Functions
  type: Class
  package: com.azure.cosmos.implementation.guava25.base
  summary: >-
    Static utility methods pertaining to `com.google.common.base.Function` instances; see that class for information about migrating to `java.util.function`.


    All methods return serializable functions as long as they're given serializable parameters.


    See the Guava User Guide article on [the use of `Function`][the use of _Function].



    [the use of _Function]: https://github.com/google/guava/wiki/FunctionalExplained
  syntax:
    content: public final class Functions
  inheritance:
  - java.lang.Object
  inheritedMembers:
  - java.lang.Object.clone()
  - java.lang.Object.equals(java.lang.Object)
  - java.lang.Object.finalize()
  - java.lang.Object.getClass()
  - java.lang.Object.hashCode()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.toString()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
- uid: com.azure.cosmos.implementation.guava25.base.Functions.<A,B,C>compose(com.azure.cosmos.implementation.guava25.base.Function<B,C>,com.azure.cosmos.implementation.guava25.base.Function<A,? extends B>)
  id: <A,B,C>compose(com.azure.cosmos.implementation.guava25.base.Function<B,C>,com.azure.cosmos.implementation.guava25.base.Function<A,? extends B>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.base.Functions
  langs:
  - java
  name: <A,B,C>compose(Function<B,C> g, Function<A,? extends B> f)
  nameWithType: Functions.<A,B,C>compose(Function<B,C> g, Function<A,? extends B> f)
  fullName: com.azure.cosmos.implementation.guava25.base.Functions.<A,B,C>compose(Function<B,C> g, Function<A,? extends B> f)
  overload: com.azure.cosmos.implementation.guava25.base.Functions.compose*
  type: Method
  package: com.azure.cosmos.implementation.guava25.base
  summary: >-
    Returns the composition of two functions. For `f: A->B` and `g: B->C`, composition is defined as the function h such that `h(a) == g(f(a))` for each `a`.


    **Java 8 users:** use `g.compose(f)` or (probably clearer) `f.andThen(g)` instead.
  syntax:
    content: public static Function<A,C> <A,B,C>compose(Function<B,C> g, Function<A,? extends B> f)
    parameters:
    - id: g
      type: com.azure.cosmos.implementation.guava25.base.Function<B,C>
      description: the second function to apply
    - id: f
      type: com.azure.cosmos.implementation.guava25.base.Function<A,? extends B>
      description: the first function to apply
    return:
      type: com.azure.cosmos.implementation.guava25.base.Function<A,C>
      description: the composition of <code>f</code> and <code>g</code>
- uid: com.azure.cosmos.implementation.guava25.base.Functions.<E>constant(E)
  id: <E>constant(E)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.base.Functions
  langs:
  - java
  name: <E>constant(E value)
  nameWithType: Functions.<E>constant(E value)
  fullName: com.azure.cosmos.implementation.guava25.base.Functions.<E>constant(E value)
  overload: com.azure.cosmos.implementation.guava25.base.Functions.constant*
  type: Method
  package: com.azure.cosmos.implementation.guava25.base
  summary: >-
    Returns a function that ignores its input and always returns `value`.


    **Java 8 users:** use the lambda expression `o -> value` instead.
  syntax:
    content: public static Function<Object,E> <E>constant(E value)
    parameters:
    - id: value
      type: E
      description: the constant value for the function to return
    return:
      type: com.azure.cosmos.implementation.guava25.base.Function<java.lang.Object,E>
      description: a function that always returns <code>value</code>
- uid: com.azure.cosmos.implementation.guava25.base.Functions.<E>identity()
  id: <E>identity()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.base.Functions
  langs:
  - java
  name: <E>identity()
  nameWithType: Functions.<E>identity()
  fullName: com.azure.cosmos.implementation.guava25.base.Functions.<E>identity()
  overload: com.azure.cosmos.implementation.guava25.base.Functions.identity*
  type: Method
  package: com.azure.cosmos.implementation.guava25.base
  summary: Returns the identity function.
  syntax:
    content: public static Function<E,E> <E>identity()
    return:
      type: com.azure.cosmos.implementation.guava25.base.Function<E,E>
- uid: com.azure.cosmos.implementation.guava25.base.Functions.<K,V>forMap(java.util.Map<K,? extends V>,V)
  id: <K,V>forMap(java.util.Map<K,? extends V>,V)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.base.Functions
  langs:
  - java
  name: <K,V>forMap(Map<K,? extends V> map, V defaultValue)
  nameWithType: Functions.<K,V>forMap(Map<K,? extends V> map, V defaultValue)
  fullName: com.azure.cosmos.implementation.guava25.base.Functions.<K,V>forMap(Map<K,? extends V> map, V defaultValue)
  overload: com.azure.cosmos.implementation.guava25.base.Functions.forMap*
  type: Method
  package: com.azure.cosmos.implementation.guava25.base
  summary: >-
    Returns a function which performs a map lookup with a default value. The function created by this method returns `defaultValue` for all inputs that do not belong to the map's key set. See also <xref uid="com.azure.cosmos.implementation.guava25.base.Functions.&lt;K,V&gt;forMap(java.util.Map&lt;K,V&gt;)" data-throw-if-not-resolved="false">#forMap(Map)</xref>, which throws an exception in this case.


    **Java 8 users:** you can just write the lambda expression `k -> map.getWithDefault(k, defaultValue)` instead.
  syntax:
    content: public static Function<K,V> <K,V>forMap(Map<K,? extends V> map, V defaultValue)
    parameters:
    - id: map
      type: java.util.Map<K,? extends V>
      description: source map that determines the function behavior
    - id: defaultValue
      type: V
      description: the value to return for inputs that aren't map keys
    return:
      type: com.azure.cosmos.implementation.guava25.base.Function<K,V>
      description: >-
        function that returns <code>map.get(a)</code> when <code>a</code> is a key, or <code>
             defaultValue</code> otherwise
- uid: com.azure.cosmos.implementation.guava25.base.Functions.<K,V>forMap(java.util.Map<K,V>)
  id: <K,V>forMap(java.util.Map<K,V>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.base.Functions
  langs:
  - java
  name: <K,V>forMap(Map<K,V> map)
  nameWithType: Functions.<K,V>forMap(Map<K,V> map)
  fullName: com.azure.cosmos.implementation.guava25.base.Functions.<K,V>forMap(Map<K,V> map)
  overload: com.azure.cosmos.implementation.guava25.base.Functions.forMap*
  type: Method
  package: com.azure.cosmos.implementation.guava25.base
  summary: >-
    Returns a function which performs a map lookup. The returned function throws an <xref uid="" data-throw-if-not-resolved="false">IllegalArgumentException</xref> if given a key that does not exist in the map. See also <xref uid="com.azure.cosmos.implementation.guava25.base.Functions.forMap*" data-throw-if-not-resolved="false">#forMap(Map, Object)</xref>, which returns a default value in this case.


    Note: if `map` is a <xref uid="com.azure.cosmos.implementation.guava25.collect.BiMap" data-throw-if-not-resolved="false">BiMap</xref> (or can be one), you can use <xref uid="com.azure.cosmos.implementation.guava25.collect.Maps.asConverter" data-throw-if-not-resolved="false">Maps.asConverter</xref> instead to get a function that also supports reverse conversion.


    **Java 8 users:** if you are okay with `null` being returned for an unrecognized key (instead of an exception being thrown), you can use the method reference `map::get` instead.
  syntax:
    content: public static Function<K,V> <K,V>forMap(Map<K,V> map)
    parameters:
    - id: map
      type: java.util.Map<K,V>
    return:
      type: com.azure.cosmos.implementation.guava25.base.Function<K,V>
- uid: com.azure.cosmos.implementation.guava25.base.Functions.<T>forPredicate(com.azure.cosmos.implementation.guava25.base.Predicate<T>)
  id: <T>forPredicate(com.azure.cosmos.implementation.guava25.base.Predicate<T>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.base.Functions
  langs:
  - java
  name: <T>forPredicate(Predicate<T> predicate)
  nameWithType: Functions.<T>forPredicate(Predicate<T> predicate)
  fullName: com.azure.cosmos.implementation.guava25.base.Functions.<T>forPredicate(Predicate<T> predicate)
  overload: com.azure.cosmos.implementation.guava25.base.Functions.forPredicate*
  type: Method
  package: com.azure.cosmos.implementation.guava25.base
  summary: >-
    Creates a function that returns the same boolean output as the given predicate for all inputs.


    The returned function is *consistent with equals* (as documented at <xref uid="com.azure.cosmos.implementation.guava25.base.Function.apply" data-throw-if-not-resolved="false">Function#apply</xref>) if and only if `predicate` is itself consistent with equals.


    **Java 8 users:** use the method reference `predicate::test` instead.
  syntax:
    content: public static Function<T,Boolean> <T>forPredicate(Predicate<T> predicate)
    parameters:
    - id: predicate
      type: com.azure.cosmos.implementation.guava25.base.Predicate<T>
    return:
      type: com.azure.cosmos.implementation.guava25.base.Function<T,java.lang.Boolean>
- uid: com.azure.cosmos.implementation.guava25.base.Functions.<T>forSupplier(com.azure.cosmos.implementation.guava25.base.Supplier<T>)
  id: <T>forSupplier(com.azure.cosmos.implementation.guava25.base.Supplier<T>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.base.Functions
  langs:
  - java
  name: <T>forSupplier(Supplier<T> supplier)
  nameWithType: Functions.<T>forSupplier(Supplier<T> supplier)
  fullName: com.azure.cosmos.implementation.guava25.base.Functions.<T>forSupplier(Supplier<T> supplier)
  overload: com.azure.cosmos.implementation.guava25.base.Functions.forSupplier*
  type: Method
  package: com.azure.cosmos.implementation.guava25.base
  summary: >-
    Returns a function that ignores its input and returns the result of `supplier.get()`.


    **Java 8 users:** use the lambda expression `o -> supplier.get()` instead.
  syntax:
    content: public static Function<Object,T> <T>forSupplier(Supplier<T> supplier)
    parameters:
    - id: supplier
      type: com.azure.cosmos.implementation.guava25.base.Supplier<T>
    return:
      type: com.azure.cosmos.implementation.guava25.base.Function<java.lang.Object,T>
- uid: com.azure.cosmos.implementation.guava25.base.Functions.Functions()
  id: Functions()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.base.Functions
  langs:
  - java
  name: Functions()
  nameWithType: Functions.Functions()
  fullName: com.azure.cosmos.implementation.guava25.base.Functions.Functions()
  overload: com.azure.cosmos.implementation.guava25.base.Functions.Functions*
  type: Constructor
  package: com.azure.cosmos.implementation.guava25.base
  syntax:
    content: private Functions()
- uid: com.azure.cosmos.implementation.guava25.base.Functions.toStringFunction()
  id: toStringFunction()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.base.Functions
  langs:
  - java
  name: toStringFunction()
  nameWithType: Functions.toStringFunction()
  fullName: com.azure.cosmos.implementation.guava25.base.Functions.toStringFunction()
  overload: com.azure.cosmos.implementation.guava25.base.Functions.toStringFunction*
  type: Method
  package: com.azure.cosmos.implementation.guava25.base
  summary: >-
    A function equivalent to the method reference `Object::toString`, for users not yet using Java 8. The function simply invokes `toString` on its argument and returns the result. It throws a <xref uid="" data-throw-if-not-resolved="false">NullPointerException</xref> on null input.


    **Warning:** The returned function may not be *consistent with equals* (as documented at <xref uid="com.azure.cosmos.implementation.guava25.base.Function.apply" data-throw-if-not-resolved="false">Function#apply</xref>). For example, this function yields different results for the two equal instances `ImmutableSet.of(1, 2)` and `ImmutableSet.of(2, 1)`.


    **Warning:** as with all function types in this package, avoid depending on the specific `equals`, `hashCode` or `toString` behavior of the returned function. A future migration to `java.util.function` will not preserve this behavior.


    **For Java 8 users:** use the method reference `Object::toString` instead. In the future, when this class requires Java 8, this method will be deprecated. See <xref uid="com.azure.cosmos.implementation.guava25.base.Function" data-throw-if-not-resolved="false">Function</xref> for more important information about the Java 8 transition.
  syntax:
    content: public static Function<Object,String> toStringFunction()
    return:
      type: com.azure.cosmos.implementation.guava25.base.Function<java.lang.Object,java.lang.String>
references:
- uid: com.azure.cosmos.implementation.guava25.base.Functions.Functions*
  name: Functions
  nameWithType: Functions.Functions
  fullName: com.azure.cosmos.implementation.guava25.base.Functions.Functions
  package: com.azure.cosmos.implementation.guava25.base
- uid: com.azure.cosmos.implementation.guava25.base.Function<java.lang.Object,java.lang.String>
  spec.java:
  - uid: com.azure.cosmos.implementation.guava25.base.Function
    name: Function
    fullName: com.azure.cosmos.implementation.guava25.base.Function
  - name: <
    fullName: <
  - uid: java.lang.Object
    name: Object
    fullName: java.lang.Object
  - name: ','
    fullName: ','
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.base.Functions.toStringFunction*
  name: toStringFunction
  nameWithType: Functions.toStringFunction
  fullName: com.azure.cosmos.implementation.guava25.base.Functions.toStringFunction
  package: com.azure.cosmos.implementation.guava25.base
- uid: com.azure.cosmos.implementation.guava25.base.Function<E,E>
  spec.java:
  - uid: com.azure.cosmos.implementation.guava25.base.Function
    name: Function
    fullName: com.azure.cosmos.implementation.guava25.base.Function
  - name: <
    fullName: <
  - uid: E
    name: E
    fullName: E
  - name: ','
    fullName: ','
  - uid: E
    name: E
    fullName: E
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.base.Functions.identity*
  name: <E>identity
  nameWithType: Functions.<E>identity
  fullName: com.azure.cosmos.implementation.guava25.base.Functions.<E>identity
  package: com.azure.cosmos.implementation.guava25.base
- uid: java.util.Map<K,V>
  spec.java:
  - uid: java.util.Map
    name: Map
    fullName: java.util.Map
  - name: <
    fullName: <
  - uid: K
    name: K
    fullName: K
  - name: ','
    fullName: ','
  - uid: V
    name: V
    fullName: V
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.base.Function<K,V>
  spec.java:
  - uid: com.azure.cosmos.implementation.guava25.base.Function
    name: Function
    fullName: com.azure.cosmos.implementation.guava25.base.Function
  - name: <
    fullName: <
  - uid: K
    name: K
    fullName: K
  - name: ','
    fullName: ','
  - uid: V
    name: V
    fullName: V
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.base.Functions.forMap*
  name: <K,V>forMap
  nameWithType: Functions.<K,V>forMap
  fullName: com.azure.cosmos.implementation.guava25.base.Functions.<K,V>forMap
  package: com.azure.cosmos.implementation.guava25.base
- uid: java.util.Map<K,? extends V>
  spec.java:
  - uid: java.util.Map
    name: Map
    fullName: java.util.Map
  - name: <
    fullName: <
  - uid: K
    name: K
    fullName: K
  - name: ','
    fullName: ','
  - uid: '? extends V'
    name: '? extends V'
    fullName: '? extends V'
  - name: '>'
    fullName: '>'
- uid: V
  spec.java:
  - uid: V
    name: V
    fullName: V
- uid: com.azure.cosmos.implementation.guava25.base.Function<B,C>
  spec.java:
  - uid: com.azure.cosmos.implementation.guava25.base.Function
    name: Function
    fullName: com.azure.cosmos.implementation.guava25.base.Function
  - name: <
    fullName: <
  - uid: B
    name: B
    fullName: B
  - name: ','
    fullName: ','
  - uid: C
    name: C
    fullName: C
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.base.Function<A,? extends B>
  spec.java:
  - uid: com.azure.cosmos.implementation.guava25.base.Function
    name: Function
    fullName: com.azure.cosmos.implementation.guava25.base.Function
  - name: <
    fullName: <
  - uid: A
    name: A
    fullName: A
  - name: ','
    fullName: ','
  - uid: '? extends B'
    name: '? extends B'
    fullName: '? extends B'
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.base.Function<A,C>
  spec.java:
  - uid: com.azure.cosmos.implementation.guava25.base.Function
    name: Function
    fullName: com.azure.cosmos.implementation.guava25.base.Function
  - name: <
    fullName: <
  - uid: A
    name: A
    fullName: A
  - name: ','
    fullName: ','
  - uid: C
    name: C
    fullName: C
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.base.Functions.compose*
  name: <A,B,C>compose
  nameWithType: Functions.<A,B,C>compose
  fullName: com.azure.cosmos.implementation.guava25.base.Functions.<A,B,C>compose
  package: com.azure.cosmos.implementation.guava25.base
- uid: com.azure.cosmos.implementation.guava25.base.Predicate<T>
  spec.java:
  - uid: com.azure.cosmos.implementation.guava25.base.Predicate
    name: Predicate
    fullName: com.azure.cosmos.implementation.guava25.base.Predicate
  - name: <
    fullName: <
  - uid: T
    name: T
    fullName: T
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.base.Function<T,java.lang.Boolean>
  spec.java:
  - uid: com.azure.cosmos.implementation.guava25.base.Function
    name: Function
    fullName: com.azure.cosmos.implementation.guava25.base.Function
  - name: <
    fullName: <
  - uid: T
    name: T
    fullName: T
  - name: ','
    fullName: ','
  - uid: java.lang.Boolean
    name: Boolean
    fullName: java.lang.Boolean
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.base.Functions.forPredicate*
  name: <T>forPredicate
  nameWithType: Functions.<T>forPredicate
  fullName: com.azure.cosmos.implementation.guava25.base.Functions.<T>forPredicate
  package: com.azure.cosmos.implementation.guava25.base
- uid: E
  spec.java:
  - uid: E
    name: E
    fullName: E
- uid: com.azure.cosmos.implementation.guava25.base.Function<java.lang.Object,E>
  spec.java:
  - uid: com.azure.cosmos.implementation.guava25.base.Function
    name: Function
    fullName: com.azure.cosmos.implementation.guava25.base.Function
  - name: <
    fullName: <
  - uid: java.lang.Object
    name: Object
    fullName: java.lang.Object
  - name: ','
    fullName: ','
  - uid: E
    name: E
    fullName: E
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.base.Functions.constant*
  name: <E>constant
  nameWithType: Functions.<E>constant
  fullName: com.azure.cosmos.implementation.guava25.base.Functions.<E>constant
  package: com.azure.cosmos.implementation.guava25.base
- uid: com.azure.cosmos.implementation.guava25.base.Supplier<T>
  spec.java:
  - uid: com.azure.cosmos.implementation.guava25.base.Supplier
    name: Supplier
    fullName: com.azure.cosmos.implementation.guava25.base.Supplier
  - name: <
    fullName: <
  - uid: T
    name: T
    fullName: T
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.base.Function<java.lang.Object,T>
  spec.java:
  - uid: com.azure.cosmos.implementation.guava25.base.Function
    name: Function
    fullName: com.azure.cosmos.implementation.guava25.base.Function
  - name: <
    fullName: <
  - uid: java.lang.Object
    name: Object
    fullName: java.lang.Object
  - name: ','
    fullName: ','
  - uid: T
    name: T
    fullName: T
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.base.Functions.forSupplier*
  name: <T>forSupplier
  nameWithType: Functions.<T>forSupplier
  fullName: com.azure.cosmos.implementation.guava25.base.Functions.<T>forSupplier
  package: com.azure.cosmos.implementation.guava25.base
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: java.lang.Object.finalize()
  name: Object.finalize()
  nameWithType: Object.finalize()
  fullName: java.lang.Object.finalize()
- uid: java.lang.Object.clone()
  name: Object.clone()
  nameWithType: Object.clone()
  fullName: java.lang.Object.clone()
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: java.lang.Object.equals(java.lang.Object)
  name: Object.equals(Object)
  nameWithType: Object.equals(Object)
  fullName: java.lang.Object.equals(java.lang.Object)
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.lang.Object.hashCode()
  name: Object.hashCode()
  nameWithType: Object.hashCode()
  fullName: java.lang.Object.hashCode()
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: java.lang.Object.toString()
  name: Object.toString()
  nameWithType: Object.toString()
  fullName: java.lang.Object.toString()
- uid: java.lang.Object,java.lang.String
  name: Object,String
  nameWithType: Object,String
  fullName: java.lang.Object,java.lang.String
- uid: com.azure.cosmos.implementation.guava25.base.Function
  name: Function
  nameWithType: Function
  fullName: com.azure.cosmos.implementation.guava25.base.Function
- uid: E,E
  name: E,E
  nameWithType: E,E
  fullName: E,E
- uid: K,V
  name: K,V
  nameWithType: K,V
  fullName: K,V
- uid: java.util.Map
  name: Map
  nameWithType: Map
  fullName: java.util.Map
- uid: K,? extends V
  name: K,? extends V
  nameWithType: K,? extends V
  fullName: K,? extends V
- uid: B,C
  name: B,C
  nameWithType: B,C
  fullName: B,C
- uid: A,? extends B
  name: A,? extends B
  nameWithType: A,? extends B
  fullName: A,? extends B
- uid: A,C
  name: A,C
  nameWithType: A,C
  fullName: A,C
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: com.azure.cosmos.implementation.guava25.base.Predicate
  name: Predicate
  nameWithType: Predicate
  fullName: com.azure.cosmos.implementation.guava25.base.Predicate
- uid: T,java.lang.Boolean
  name: T,Boolean
  nameWithType: T,Boolean
  fullName: T,java.lang.Boolean
- uid: java.lang.Object,E
  name: Object,E
  nameWithType: Object,E
  fullName: java.lang.Object,E
- uid: com.azure.cosmos.implementation.guava25.base.Supplier
  name: Supplier
  nameWithType: Supplier
  fullName: com.azure.cosmos.implementation.guava25.base.Supplier
- uid: java.lang.Object,T
  name: Object,T
  nameWithType: Object,T
  fullName: java.lang.Object,T
