### YamlMime:JavaType
uid: "com.azure.analytics.synapse.spark.SparkClientBuilder"
fullName: "com.azure.analytics.synapse.spark.SparkClientBuilder"
name: "SparkClientBuilder"
nameWithType: "SparkClientBuilder"
summary: "A builder for creating a new instance of the Spark<wbr>Client type."
inheritances:
- "<xref href=\"java.lang.Object?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
inheritedMembers:
- "java.lang.Object.clone()"
- "java.lang.Object.equals(java.lang.Object)"
- "java.lang.Object.finalize()"
- "java.lang.Object.getClass()"
- "java.lang.Object.hashCode()"
- "java.lang.Object.notify()"
- "java.lang.Object.notifyAll()"
- "java.lang.Object.toString()"
- "java.lang.Object.wait()"
- "java.lang.Object.wait(long)"
- "java.lang.Object.wait(long,int)"
syntax: "public final class SparkClientBuilder"
constructors:
- uid: "com.azure.analytics.synapse.spark.SparkClientBuilder.SparkClientBuilder()"
  fullName: "com.azure.analytics.synapse.spark.SparkClientBuilder.SparkClientBuilder()"
  name: "SparkClientBuilder()"
  nameWithType: "SparkClientBuilder.SparkClientBuilder()"
  summary: "Create an instance of the Spark<wbr>Client<wbr>Builder."
  syntax: "public SparkClientBuilder()"
  desc: "Create an instance of the SparkClientBuilder."
methods:
- uid: "com.azure.analytics.synapse.spark.SparkClientBuilder.addPolicy(com.azure.core.http.policy.HttpPipelinePolicy)"
  fullName: "com.azure.analytics.synapse.spark.SparkClientBuilder.addPolicy(HttpPipelinePolicy customPolicy)"
  name: "addPolicy(HttpPipelinePolicy customPolicy)"
  nameWithType: "SparkClientBuilder.addPolicy(HttpPipelinePolicy customPolicy)"
  summary: "Adds a custom Http pipeline policy."
  parameters:
  - description: "The custom Http pipeline policy to add."
    name: "customPolicy"
    type: "<xref href=\"com.azure.core.http.policy.HttpPipelinePolicy?alt=com.azure.core.http.policy.HttpPipelinePolicy&text=HttpPipelinePolicy\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public SparkClientBuilder addPolicy(HttpPipelinePolicy customPolicy)"
  desc: "Adds a custom Http pipeline policy."
  returns:
    description: "the SparkClientBuilder."
    type: "<xref href=\"com.azure.analytics.synapse.spark.SparkClientBuilder?alt=com.azure.analytics.synapse.spark.SparkClientBuilder&text=SparkClientBuilder\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.analytics.synapse.spark.SparkClientBuilder.buildSparkBatchAsyncClient()"
  fullName: "com.azure.analytics.synapse.spark.SparkClientBuilder.buildSparkBatchAsyncClient()"
  name: "buildSparkBatchAsyncClient()"
  nameWithType: "SparkClientBuilder.buildSparkBatchAsyncClient()"
  summary: "Builds an instance of Spark<wbr>Batch<wbr>Async<wbr>Client async client."
  syntax: "public SparkBatchAsyncClient buildSparkBatchAsyncClient()"
  desc: "Builds an instance of SparkBatchAsyncClient async client."
  returns:
    description: "an instance of SparkBatchAsyncClient."
    type: "<xref href=\"com.azure.analytics.synapse.spark.SparkBatchAsyncClient?alt=com.azure.analytics.synapse.spark.SparkBatchAsyncClient&text=SparkBatchAsyncClient\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.analytics.synapse.spark.SparkClientBuilder.buildSparkBatchClient()"
  fullName: "com.azure.analytics.synapse.spark.SparkClientBuilder.buildSparkBatchClient()"
  name: "buildSparkBatchClient()"
  nameWithType: "SparkClientBuilder.buildSparkBatchClient()"
  summary: "Builds an instance of Spark<wbr>Batch<wbr>Client sync client."
  syntax: "public SparkBatchClient buildSparkBatchClient()"
  desc: "Builds an instance of SparkBatchClient sync client."
  returns:
    description: "an instance of SparkBatchClient."
    type: "<xref href=\"com.azure.analytics.synapse.spark.SparkBatchClient?alt=com.azure.analytics.synapse.spark.SparkBatchClient&text=SparkBatchClient\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.analytics.synapse.spark.SparkClientBuilder.buildSparkSessionAsyncClient()"
  fullName: "com.azure.analytics.synapse.spark.SparkClientBuilder.buildSparkSessionAsyncClient()"
  name: "buildSparkSessionAsyncClient()"
  nameWithType: "SparkClientBuilder.buildSparkSessionAsyncClient()"
  summary: "Builds an instance of Spark<wbr>Session<wbr>Async<wbr>Client async client."
  syntax: "public SparkSessionAsyncClient buildSparkSessionAsyncClient()"
  desc: "Builds an instance of SparkSessionAsyncClient async client."
  returns:
    description: "an instance of SparkSessionAsyncClient."
    type: "<xref href=\"com.azure.analytics.synapse.spark.SparkSessionAsyncClient?alt=com.azure.analytics.synapse.spark.SparkSessionAsyncClient&text=SparkSessionAsyncClient\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.analytics.synapse.spark.SparkClientBuilder.buildSparkSessionClient()"
  fullName: "com.azure.analytics.synapse.spark.SparkClientBuilder.buildSparkSessionClient()"
  name: "buildSparkSessionClient()"
  nameWithType: "SparkClientBuilder.buildSparkSessionClient()"
  summary: "Builds an instance of Spark<wbr>Session<wbr>Client sync client."
  syntax: "public SparkSessionClient buildSparkSessionClient()"
  desc: "Builds an instance of SparkSessionClient sync client."
  returns:
    description: "an instance of SparkSessionClient."
    type: "<xref href=\"com.azure.analytics.synapse.spark.SparkSessionClient?alt=com.azure.analytics.synapse.spark.SparkSessionClient&text=SparkSessionClient\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.analytics.synapse.spark.SparkClientBuilder.clientOptions(com.azure.core.util.ClientOptions)"
  fullName: "com.azure.analytics.synapse.spark.SparkClientBuilder.clientOptions(ClientOptions clientOptions)"
  name: "clientOptions(ClientOptions clientOptions)"
  nameWithType: "SparkClientBuilder.clientOptions(ClientOptions clientOptions)"
  summary: "Sets The client options such as application ID and custom headers to set on a request."
  parameters:
  - description: "the clientOptions value."
    name: "clientOptions"
    type: "<xref href=\"com.azure.core.util.ClientOptions?alt=com.azure.core.util.ClientOptions&text=ClientOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public SparkClientBuilder clientOptions(ClientOptions clientOptions)"
  desc: "Sets The client options such as application ID and custom headers to set on a request."
  returns:
    description: "the SparkClientBuilder."
    type: "<xref href=\"com.azure.analytics.synapse.spark.SparkClientBuilder?alt=com.azure.analytics.synapse.spark.SparkClientBuilder&text=SparkClientBuilder\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.analytics.synapse.spark.SparkClientBuilder.configuration(com.azure.core.util.Configuration)"
  fullName: "com.azure.analytics.synapse.spark.SparkClientBuilder.configuration(Configuration configuration)"
  name: "configuration(Configuration configuration)"
  nameWithType: "SparkClientBuilder.configuration(Configuration configuration)"
  summary: "Sets The configuration store that is used during construction of the service client."
  parameters:
  - description: "the configuration value."
    name: "configuration"
    type: "<xref href=\"com.azure.core.util.Configuration?alt=com.azure.core.util.Configuration&text=Configuration\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public SparkClientBuilder configuration(Configuration configuration)"
  desc: "Sets The configuration store that is used during construction of the service client."
  returns:
    description: "the SparkClientBuilder."
    type: "<xref href=\"com.azure.analytics.synapse.spark.SparkClientBuilder?alt=com.azure.analytics.synapse.spark.SparkClientBuilder&text=SparkClientBuilder\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.analytics.synapse.spark.SparkClientBuilder.credential(com.azure.core.credential.TokenCredential)"
  fullName: "com.azure.analytics.synapse.spark.SparkClientBuilder.credential(TokenCredential tokenCredential)"
  name: "credential(TokenCredential tokenCredential)"
  nameWithType: "SparkClientBuilder.credential(TokenCredential tokenCredential)"
  summary: "Sets The Token<wbr>Credential used for authentication."
  parameters:
  - description: "the tokenCredential value."
    name: "tokenCredential"
    type: "<xref href=\"com.azure.core.credential.TokenCredential?alt=com.azure.core.credential.TokenCredential&text=TokenCredential\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public SparkClientBuilder credential(TokenCredential tokenCredential)"
  desc: "Sets The TokenCredential used for authentication."
  returns:
    description: "the SparkClientBuilder."
    type: "<xref href=\"com.azure.analytics.synapse.spark.SparkClientBuilder?alt=com.azure.analytics.synapse.spark.SparkClientBuilder&text=SparkClientBuilder\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.analytics.synapse.spark.SparkClientBuilder.endpoint(java.lang.String)"
  fullName: "com.azure.analytics.synapse.spark.SparkClientBuilder.endpoint(String endpoint)"
  name: "endpoint(String endpoint)"
  nameWithType: "SparkClientBuilder.endpoint(String endpoint)"
  summary: "Sets The workspace development endpoint, for example https://myworkspace.<wbr>dev.<wbr>azuresynapse.<wbr>net."
  parameters:
  - description: "the endpoint value."
    name: "endpoint"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public SparkClientBuilder endpoint(String endpoint)"
  desc: "Sets The workspace development endpoint, for example https://myworkspace.dev.azuresynapse.net."
  returns:
    description: "the SparkClientBuilder."
    type: "<xref href=\"com.azure.analytics.synapse.spark.SparkClientBuilder?alt=com.azure.analytics.synapse.spark.SparkClientBuilder&text=SparkClientBuilder\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.analytics.synapse.spark.SparkClientBuilder.httpClient(com.azure.core.http.HttpClient)"
  fullName: "com.azure.analytics.synapse.spark.SparkClientBuilder.httpClient(HttpClient httpClient)"
  name: "httpClient(HttpClient httpClient)"
  nameWithType: "SparkClientBuilder.httpClient(HttpClient httpClient)"
  summary: "Sets The HTTP client used to send the request."
  parameters:
  - description: "the httpClient value."
    name: "httpClient"
    type: "<xref href=\"com.azure.core.http.HttpClient?alt=com.azure.core.http.HttpClient&text=HttpClient\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public SparkClientBuilder httpClient(HttpClient httpClient)"
  desc: "Sets The HTTP client used to send the request."
  returns:
    description: "the SparkClientBuilder."
    type: "<xref href=\"com.azure.analytics.synapse.spark.SparkClientBuilder?alt=com.azure.analytics.synapse.spark.SparkClientBuilder&text=SparkClientBuilder\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.analytics.synapse.spark.SparkClientBuilder.httpLogOptions(com.azure.core.http.policy.HttpLogOptions)"
  fullName: "com.azure.analytics.synapse.spark.SparkClientBuilder.httpLogOptions(HttpLogOptions httpLogOptions)"
  name: "httpLogOptions(HttpLogOptions httpLogOptions)"
  nameWithType: "SparkClientBuilder.httpLogOptions(HttpLogOptions httpLogOptions)"
  summary: "Sets The logging configuration for HTTP requests and responses."
  parameters:
  - description: "the httpLogOptions value."
    name: "httpLogOptions"
    type: "<xref href=\"com.azure.core.http.policy.HttpLogOptions?alt=com.azure.core.http.policy.HttpLogOptions&text=HttpLogOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public SparkClientBuilder httpLogOptions(HttpLogOptions httpLogOptions)"
  desc: "Sets The logging configuration for HTTP requests and responses."
  returns:
    description: "the SparkClientBuilder."
    type: "<xref href=\"com.azure.analytics.synapse.spark.SparkClientBuilder?alt=com.azure.analytics.synapse.spark.SparkClientBuilder&text=SparkClientBuilder\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.analytics.synapse.spark.SparkClientBuilder.livyApiVersion(java.lang.String)"
  fullName: "com.azure.analytics.synapse.spark.SparkClientBuilder.livyApiVersion(String livyApiVersion)"
  name: "livyApiVersion(String livyApiVersion)"
  nameWithType: "SparkClientBuilder.livyApiVersion(String livyApiVersion)"
  summary: "Sets Valid api-version for the request."
  parameters:
  - description: "the livyApiVersion value."
    name: "livyApiVersion"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public SparkClientBuilder livyApiVersion(String livyApiVersion)"
  desc: "Sets Valid api-version for the request."
  returns:
    description: "the SparkClientBuilder."
    type: "<xref href=\"com.azure.analytics.synapse.spark.SparkClientBuilder?alt=com.azure.analytics.synapse.spark.SparkClientBuilder&text=SparkClientBuilder\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.analytics.synapse.spark.SparkClientBuilder.pipeline(com.azure.core.http.HttpPipeline)"
  fullName: "com.azure.analytics.synapse.spark.SparkClientBuilder.pipeline(HttpPipeline pipeline)"
  name: "pipeline(HttpPipeline pipeline)"
  nameWithType: "SparkClientBuilder.pipeline(HttpPipeline pipeline)"
  summary: "Sets The HTTP pipeline to send requests through."
  parameters:
  - description: "the pipeline value."
    name: "pipeline"
    type: "<xref href=\"com.azure.core.http.HttpPipeline?alt=com.azure.core.http.HttpPipeline&text=HttpPipeline\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public SparkClientBuilder pipeline(HttpPipeline pipeline)"
  desc: "Sets The HTTP pipeline to send requests through."
  returns:
    description: "the SparkClientBuilder."
    type: "<xref href=\"com.azure.analytics.synapse.spark.SparkClientBuilder?alt=com.azure.analytics.synapse.spark.SparkClientBuilder&text=SparkClientBuilder\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.analytics.synapse.spark.SparkClientBuilder.retryPolicy(com.azure.core.http.policy.RetryPolicy)"
  fullName: "com.azure.analytics.synapse.spark.SparkClientBuilder.retryPolicy(RetryPolicy retryPolicy)"
  name: "retryPolicy(RetryPolicy retryPolicy)"
  nameWithType: "SparkClientBuilder.retryPolicy(RetryPolicy retryPolicy)"
  summary: "Sets The retry policy that will attempt to retry failed requests, if applicable."
  parameters:
  - description: "the retryPolicy value."
    name: "retryPolicy"
    type: "<xref href=\"com.azure.core.http.policy.RetryPolicy?alt=com.azure.core.http.policy.RetryPolicy&text=RetryPolicy\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public SparkClientBuilder retryPolicy(RetryPolicy retryPolicy)"
  desc: "Sets The retry policy that will attempt to retry failed requests, if applicable."
  returns:
    description: "the SparkClientBuilder."
    type: "<xref href=\"com.azure.analytics.synapse.spark.SparkClientBuilder?alt=com.azure.analytics.synapse.spark.SparkClientBuilder&text=SparkClientBuilder\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.analytics.synapse.spark.SparkClientBuilder.serializerAdapter(com.azure.core.util.serializer.SerializerAdapter)"
  fullName: "com.azure.analytics.synapse.spark.SparkClientBuilder.serializerAdapter(SerializerAdapter serializerAdapter)"
  name: "serializerAdapter(SerializerAdapter serializerAdapter)"
  nameWithType: "SparkClientBuilder.serializerAdapter(SerializerAdapter serializerAdapter)"
  summary: "Sets The serializer to serialize an object into a string."
  parameters:
  - description: "the serializerAdapter value."
    name: "serializerAdapter"
    type: "<xref href=\"com.azure.core.util.serializer.SerializerAdapter?alt=com.azure.core.util.serializer.SerializerAdapter&text=SerializerAdapter\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public SparkClientBuilder serializerAdapter(SerializerAdapter serializerAdapter)"
  desc: "Sets The serializer to serialize an object into a string."
  returns:
    description: "the SparkClientBuilder."
    type: "<xref href=\"com.azure.analytics.synapse.spark.SparkClientBuilder?alt=com.azure.analytics.synapse.spark.SparkClientBuilder&text=SparkClientBuilder\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.analytics.synapse.spark.SparkClientBuilder.sparkPoolName(java.lang.String)"
  fullName: "com.azure.analytics.synapse.spark.SparkClientBuilder.sparkPoolName(String sparkPoolName)"
  name: "sparkPoolName(String sparkPoolName)"
  nameWithType: "SparkClientBuilder.sparkPoolName(String sparkPoolName)"
  summary: "Sets Name of the spark pool."
  parameters:
  - description: "the sparkPoolName value."
    name: "sparkPoolName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public SparkClientBuilder sparkPoolName(String sparkPoolName)"
  desc: "Sets Name of the spark pool."
  returns:
    description: "the SparkClientBuilder."
    type: "<xref href=\"com.azure.analytics.synapse.spark.SparkClientBuilder?alt=com.azure.analytics.synapse.spark.SparkClientBuilder&text=SparkClientBuilder\" data-throw-if-not-resolved=\"False\" />"
type: "class"
desc: "A builder for creating a new instance of the SparkClient type."
metadata: {}
package: "com.azure.analytics.synapse.spark"
artifact: com.azure:azure-analytics-synapse-spark:1.0.0-beta.5
