### YamlMime:ManagedReference
items:
- uid: org.slf4j.ILoggerFactory
  id: ILoggerFactory
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.slf4j
  children:
  - org.slf4j.ILoggerFactory.getLogger(java.lang.String)
  langs:
  - java
  name: ILoggerFactory
  nameWithType: ILoggerFactory
  fullName: org.slf4j.ILoggerFactory
  type: Interface
  package: org.slf4j
  summary: >-
    `ILoggerFactory` instances manufacture <xref uid="org.slf4j.Logger" data-throw-if-not-resolved="false">Logger</xref> instances by name.


    Most users retrieve <xref uid="org.slf4j.Logger" data-throw-if-not-resolved="false">Logger</xref> instances through the static <xref uid="org.slf4j.LoggerFactory.getLogger(java.lang.String)" data-throw-if-not-resolved="false">LoggerFactory#getLogger(String)</xref> method. An instance of of this interface is bound internally with <xref uid="org.slf4j.LoggerFactory" data-throw-if-not-resolved="false">LoggerFactory</xref> class at compile time.
  syntax:
    content: public interface ILoggerFactory
- uid: org.slf4j.ILoggerFactory.getLogger(java.lang.String)
  id: getLogger(java.lang.String)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.slf4j.ILoggerFactory
  langs:
  - java
  name: getLogger(String name)
  nameWithType: ILoggerFactory.getLogger(String name)
  fullName: org.slf4j.ILoggerFactory.getLogger(String name)
  overload: org.slf4j.ILoggerFactory.getLogger*
  type: Method
  package: org.slf4j
  summary: >-
    Return an appropriate <xref uid="org.slf4j.Logger" data-throw-if-not-resolved="false">Logger</xref> instance as specified by the `name` parameter.


    If the name parameter is equal to <xref uid="org.slf4j.Logger.ROOT_LOGGER_NAME" data-throw-if-not-resolved="false">Logger#ROOT_LOGGER_NAME</xref>, that is the string value "ROOT" (case insensitive), then the root logger of the underlying logging system is returned.


    Null-valued name arguments are considered invalid.


    Certain extremely simple logging systems, e.g. NOP, may always return the same logger instance regardless of the requested name.
  syntax:
    content: public abstract Logger getLogger(String name)
    parameters:
    - id: name
      type: java.lang.String
      description: the name of the Logger to return
    return:
      type: org.slf4j.Logger
      description: a Logger instance
references:
- uid: java.lang.String
  spec.java:
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
- uid: org.slf4j.Logger
  name: Logger
  nameWithType: Logger
  fullName: org.slf4j.Logger
- uid: org.slf4j.ILoggerFactory.getLogger*
  name: getLogger
  nameWithType: ILoggerFactory.getLogger
  fullName: org.slf4j.ILoggerFactory.getLogger
  package: org.slf4j
