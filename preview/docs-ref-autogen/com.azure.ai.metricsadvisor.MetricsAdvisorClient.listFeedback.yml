### YamlMime:JavaMember
uid: "com.azure.ai.metricsadvisor.MetricsAdvisorClient.listFeedback*"
fullName: "com.azure.ai.metricsadvisor.MetricsAdvisorClient.listFeedback"
name: "listFeedback"
nameWithType: "MetricsAdvisorClient.listFeedback"
members:
- uid: "com.azure.ai.metricsadvisor.MetricsAdvisorClient.listFeedback(java.lang.String)"
  fullName: "com.azure.ai.metricsadvisor.MetricsAdvisorClient.listFeedback(String metricId)"
  name: "listFeedback(String metricId)"
  nameWithType: "MetricsAdvisorClient.listFeedback(String metricId)"
  summary: "List information of all metric feedbacks on the metrics advisor account.\n\n**Code sample**\n\n```java\nfinal String metricId = \"d3gh4i4-b804-4ab9-a70f-0da0c89cft3l\";\n metricsAdvisorClient.listFeedback(metricId)\n     .forEach(metricFeedback -> {\n         System.out.printf(\"Data Feed Metric feedback Id: %s%n\", metricFeedback.getId());\n         System.out.printf(\"Data Feed Metric feedback associated dimension filter: %s%n\",\n             metricFeedback.getDimensionFilter().asMap());\n \n         if (PERIOD.equals(metricFeedback.getFeedbackType())) {\n             MetricPeriodFeedback periodFeedback\n                 = (MetricPeriodFeedback) metricFeedback;\n             System.out.printf(\"Data Feed Metric feedback type: %s%n\",\n                 periodFeedback.getPeriodType().toString());\n             System.out.printf(\"Data Feed Metric feedback period value: %f%n\",\n                 periodFeedback.getPeriodValue());\n         } else if (ANOMALY.equals(metricFeedback.getFeedbackType())) {\n             MetricAnomalyFeedback metricAnomalyFeedback\n                 = (MetricAnomalyFeedback) metricFeedback;\n             System.out.printf(\"Data Feed Metric feedback anomaly value: %s%n\",\n                 metricAnomalyFeedback.getAnomalyValue().toString());\n             System.out.printf(\"Data Feed Metric feedback associated detection configuration: %s%n\",\n                 metricAnomalyFeedback.getDetectionConfigurationId());\n         } else if (COMMENT.equals(metricFeedback.getFeedbackType())) {\n             MetricCommentFeedback metricCommentFeedback\n                 = (MetricCommentFeedback) metricFeedback;\n             System.out.printf(\"Data Feed Metric feedback comment value: %s%n\",\n                 metricCommentFeedback.getComment());\n         }\n     });\n```"
  parameters:
  - description: "the unique metric Id."
    name: "metricId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PagedIterable<MetricFeedback> listFeedback(String metricId)"
  returns:
    description: "A <xref uid=\"com.azure.core.http.rest.PagedIterable\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedIterable\"></xref> containing information of all the <xref uid=\"com.azure.ai.metricsadvisor.models.MetricFeedback\" data-throw-if-not-resolved=\"false\" data-raw-source=\"metric feedbacks\"></xref>\n in the account."
    type: "<xref href=\"com.azure.core.http.rest.PagedIterable?alt=com.azure.core.http.rest.PagedIterable&text=PagedIterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.ai.metricsadvisor.models.MetricFeedback?alt=com.azure.ai.metricsadvisor.models.MetricFeedback&text=MetricFeedback\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.ai.metricsadvisor.MetricsAdvisorClient.listFeedback(java.lang.String,com.azure.ai.metricsadvisor.models.ListMetricFeedbackOptions,com.azure.core.util.Context)"
  fullName: "com.azure.ai.metricsadvisor.MetricsAdvisorClient.listFeedback(String metricId, ListMetricFeedbackOptions options, Context context)"
  name: "listFeedback(String metricId, ListMetricFeedbackOptions options, Context context)"
  nameWithType: "MetricsAdvisorClient.listFeedback(String metricId, ListMetricFeedbackOptions options, Context context)"
  summary: "List information of all metric feedbacks on the metrics advisor account.\n\n**Code sample**\n\n```java\nfinal String metricId = \"d3gh4i4-b804-4ab9-a70f-0da0c89cft3l\";\n final OffsetDateTime startTime = OffsetDateTime.parse(\"2020-01-01T00:00:00Z\");\n final OffsetDateTime endTime = OffsetDateTime.parse(\"2020-09-09T00:00:00Z\");\n \n metricsAdvisorClient.listFeedback(metricId,\n     new ListMetricFeedbackOptions()\n         .setFilter(new ListMetricFeedbackFilter()\n             .setStartTime(startTime)\n             .setTimeMode(FeedbackQueryTimeMode.FEEDBACK_CREATED_TIME)\n             .setEndTime(endTime)), Context.NONE)\n     .forEach(metricFeedback -> {\n         System.out.printf(\"Data Feed Metric feedback Id: %s%n\", metricFeedback.getId());\n         System.out.printf(\"Data Feed Metric feedback associated dimension filter: %s%n\",\n             metricFeedback.getDimensionFilter().asMap());\n         System.out.printf(\"Data Feed Metric feedback created time %s%n\", metricFeedback.getCreatedTime());\n \n         if (PERIOD.equals(metricFeedback.getFeedbackType())) {\n             MetricPeriodFeedback periodFeedback\n                 = (MetricPeriodFeedback) metricFeedback;\n             System.out.printf(\"Data Feed Metric feedback type: %s%n\",\n                 periodFeedback.getPeriodType().toString());\n             System.out.printf(\"Data Feed Metric feedback period value: %f%n\",\n                 periodFeedback.getPeriodValue());\n         } else if (ANOMALY.equals(metricFeedback.getFeedbackType())) {\n             MetricAnomalyFeedback metricAnomalyFeedback\n                 = (MetricAnomalyFeedback) metricFeedback;\n             System.out.printf(\"Data Feed Metric feedback anomaly value: %s%n\",\n                 metricAnomalyFeedback.getAnomalyValue().toString());\n             System.out.printf(\"Data Feed Metric feedback associated detection configuration: %s%n\",\n                 metricAnomalyFeedback.getDetectionConfigurationId());\n         } else if (COMMENT.equals(metricFeedback.getFeedbackType())) {\n             MetricCommentFeedback metricCommentFeedback\n                 = (MetricCommentFeedback) metricFeedback;\n             System.out.printf(\"Data Feed Metric feedback comment value: %s%n\",\n                 metricCommentFeedback.getComment());\n         }\n     });\n```"
  parameters:
  - description: "the unique metric Id."
    name: "metricId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The configurable <xref uid=\"com.azure.ai.metricsadvisor.models.ListMetricFeedbackOptions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"options\"></xref> to pass for filtering the output\n result."
    name: "options"
    type: "<xref href=\"com.azure.ai.metricsadvisor.models.ListMetricFeedbackOptions?alt=com.azure.ai.metricsadvisor.models.ListMetricFeedbackOptions&text=ListMetricFeedbackOptions\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional context that is passed through the HTTP pipeline during the service call."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PagedIterable<MetricFeedback> listFeedback(String metricId, ListMetricFeedbackOptions options, Context context)"
  returns:
    description: "A <xref uid=\"com.azure.core.http.rest.PagedIterable\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedIterable\"></xref> containing information of all the <xref uid=\"com.azure.ai.metricsadvisor.models.MetricFeedback\" data-throw-if-not-resolved=\"false\" data-raw-source=\"metric feedbacks\"></xref>\n in the account."
    type: "<xref href=\"com.azure.core.http.rest.PagedIterable?alt=com.azure.core.http.rest.PagedIterable&text=PagedIterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.ai.metricsadvisor.models.MetricFeedback?alt=com.azure.ai.metricsadvisor.models.MetricFeedback&text=MetricFeedback\" data-throw-if-not-resolved=\"False\" />&gt;"
type: "method"
metadata: {}
package: "com.azure.ai.metricsadvisor"
artifact: com.azure:azure-ai-metricsadvisor:1.0.0-beta.2
