### YamlMime:JavaType
uid: "com.azure.cosmos.encryption.CosmosEncryptionAsyncContainer"
fullName: "com.azure.cosmos.encryption.CosmosEncryptionAsyncContainer"
name: "CosmosEncryptionAsyncContainer"
nameWithType: "CosmosEncryptionAsyncContainer"
summary: "Cosmos<wbr>Async<wbr>Container with encryption capabilities."
inheritances:
- "<xref href=\"java.lang.Object?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
inheritedMembers:
- "java.lang.Object.clone()"
- "java.lang.Object.equals(java.lang.Object)"
- "java.lang.Object.finalize()"
- "java.lang.Object.getClass()"
- "java.lang.Object.hashCode()"
- "java.lang.Object.notify()"
- "java.lang.Object.notifyAll()"
- "java.lang.Object.toString()"
- "java.lang.Object.wait()"
- "java.lang.Object.wait(long)"
- "java.lang.Object.wait(long,int)"
syntax: "public final class CosmosEncryptionAsyncContainer"
methods:
- uid: "com.azure.cosmos.encryption.CosmosEncryptionAsyncContainer.<T>createItem(T)"
  fullName: "com.azure.cosmos.encryption.CosmosEncryptionAsyncContainer.<T>createItem(T item)"
  name: "<T>createItem(T item)"
  nameWithType: "CosmosEncryptionAsyncContainer.<T>createItem(T item)"
  summary: "Creates an item."
  parameters:
  - description: "the Cosmos item represented as a POJO or Cosmos item object."
    name: "item"
    type: "<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<CosmosItemResponse<T>> <T>createItem(T item)"
  desc: "Creates an item.\n\nAfter subscription the operation will be performed. The <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> upon successful completion will contain a single resource response with the created Cosmos item. In case of failure the <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> will error."
  returns:
    description: "an <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> containing the single resource response with the\n created Cosmos item or an error."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.cosmos.models.CosmosItemResponse?alt=com.azure.cosmos.models.CosmosItemResponse&text=CosmosItemResponse\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.cosmos.encryption.CosmosEncryptionAsyncContainer.<T>createItem(T,com.azure.cosmos.models.CosmosItemRequestOptions)"
  fullName: "com.azure.cosmos.encryption.CosmosEncryptionAsyncContainer.<T>createItem(T item, CosmosItemRequestOptions requestOptions)"
  name: "<T>createItem(T item, CosmosItemRequestOptions requestOptions)"
  nameWithType: "CosmosEncryptionAsyncContainer.<T>createItem(T item, CosmosItemRequestOptions requestOptions)"
  summary: "Creates a Cosmos item."
  parameters:
  - description: "the item."
    name: "item"
    type: "<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />"
  - description: "the item request options."
    name: "requestOptions"
    type: "<xref href=\"com.azure.cosmos.models.CosmosItemRequestOptions?alt=com.azure.cosmos.models.CosmosItemRequestOptions&text=CosmosItemRequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<CosmosItemResponse<T>> <T>createItem(T item, CosmosItemRequestOptions requestOptions)"
  desc: "Creates a Cosmos item."
  returns:
    description: "an <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> containing the single resource response with the created Cosmos item or an error."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.cosmos.models.CosmosItemResponse?alt=com.azure.cosmos.models.CosmosItemResponse&text=CosmosItemResponse\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.cosmos.encryption.CosmosEncryptionAsyncContainer.<T>createItem(T,com.azure.cosmos.models.PartitionKey,com.azure.cosmos.models.CosmosItemRequestOptions)"
  fullName: "com.azure.cosmos.encryption.CosmosEncryptionAsyncContainer.<T>createItem(T item, PartitionKey partitionKey, CosmosItemRequestOptions requestOptions)"
  name: "<T>createItem(T item, PartitionKey partitionKey, CosmosItemRequestOptions requestOptions)"
  nameWithType: "CosmosEncryptionAsyncContainer.<T>createItem(T item, PartitionKey partitionKey, CosmosItemRequestOptions requestOptions)"
  summary: "Creates an item."
  parameters:
  - description: "the Cosmos item represented as a POJO or Cosmos item object."
    name: "item"
    type: "<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />"
  - description: "the partition key."
    name: "partitionKey"
    type: "<xref href=\"com.azure.cosmos.models.PartitionKey?alt=com.azure.cosmos.models.PartitionKey&text=PartitionKey\" data-throw-if-not-resolved=\"False\" />"
  - description: "the request options."
    name: "requestOptions"
    type: "<xref href=\"com.azure.cosmos.models.CosmosItemRequestOptions?alt=com.azure.cosmos.models.CosmosItemRequestOptions&text=CosmosItemRequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<CosmosItemResponse<T>> <T>createItem(T item, PartitionKey partitionKey, CosmosItemRequestOptions requestOptions)"
  desc: "Creates an item.\n\nAfter subscription the operation will be performed. The <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> upon successful completion will contain a single resource response with the created Cosmos item. In case of failure the <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> will error."
  returns:
    description: "an <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> containing the single resource response with the created Cosmos item or an error."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.cosmos.models.CosmosItemResponse?alt=com.azure.cosmos.models.CosmosItemResponse&text=CosmosItemResponse\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.cosmos.encryption.CosmosEncryptionAsyncContainer.<T>deleteItem(T,com.azure.cosmos.models.CosmosItemRequestOptions)"
  fullName: "com.azure.cosmos.encryption.CosmosEncryptionAsyncContainer.<T>deleteItem(T item, CosmosItemRequestOptions requestOptions)"
  name: "<T>deleteItem(T item, CosmosItemRequestOptions requestOptions)"
  nameWithType: "CosmosEncryptionAsyncContainer.<T>deleteItem(T item, CosmosItemRequestOptions requestOptions)"
  summary: "Deletes the item."
  parameters:
  - description: "item to be deleted."
    name: "item"
    type: "<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />"
  - description: "the request options."
    name: "requestOptions"
    type: "<xref href=\"com.azure.cosmos.models.CosmosItemRequestOptions?alt=com.azure.cosmos.models.CosmosItemRequestOptions&text=CosmosItemRequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<CosmosItemResponse<Object>> <T>deleteItem(T item, CosmosItemRequestOptions requestOptions)"
  desc: "Deletes the item.\n\nAfter subscription the operation will be performed. The <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> upon successful completion will contain a single Cosmos item response for the deleted item."
  returns:
    description: "an <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> containing the Cosmos item resource response."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.cosmos.models.CosmosItemResponse?alt=com.azure.cosmos.models.CosmosItemResponse&text=CosmosItemResponse\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Object?alt=java.lang.Object&text=Object\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.cosmos.encryption.CosmosEncryptionAsyncContainer.<T>patchItem(java.lang.String,com.azure.cosmos.models.PartitionKey,com.azure.cosmos.models.CosmosPatchOperations,com.azure.cosmos.models.CosmosPatchItemRequestOptions,java.lang.Class<T>)"
  fullName: "com.azure.cosmos.encryption.CosmosEncryptionAsyncContainer.<T>patchItem(String itemId, PartitionKey partitionKey, CosmosPatchOperations cosmosPatchOperations, CosmosPatchItemRequestOptions options, Class<T> itemType)"
  name: "<T>patchItem(String itemId, PartitionKey partitionKey, CosmosPatchOperations cosmosPatchOperations, CosmosPatchItemRequestOptions options, Class<T> itemType)"
  nameWithType: "CosmosEncryptionAsyncContainer.<T>patchItem(String itemId, PartitionKey partitionKey, CosmosPatchOperations cosmosPatchOperations, CosmosPatchItemRequestOptions options, Class<T> itemType)"
  summary: "Run patch operations on an Item."
  parameters:
  - description: "the item id."
    name: "itemId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "the partition key."
    name: "partitionKey"
    type: "<xref href=\"com.azure.cosmos.models.PartitionKey?alt=com.azure.cosmos.models.PartitionKey&text=PartitionKey\" data-throw-if-not-resolved=\"False\" />"
  - description: "Represents a container having list of operations to be sequentially applied to the referred Cosmos item."
    name: "cosmosPatchOperations"
    type: "<xref href=\"com.azure.cosmos.models.CosmosPatchOperations?alt=com.azure.cosmos.models.CosmosPatchOperations&text=CosmosPatchOperations\" data-throw-if-not-resolved=\"False\" />"
  - description: "the request options."
    name: "options"
    type: "<xref href=\"com.azure.cosmos.models.CosmosPatchItemRequestOptions?alt=com.azure.cosmos.models.CosmosPatchItemRequestOptions&text=CosmosPatchItemRequestOptions\" data-throw-if-not-resolved=\"False\" />"
  - description: "the item type."
    name: "itemType"
    type: "<xref href=\"java.lang.Class?alt=java.lang.Class&text=Class\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public Mono<CosmosItemResponse<T>> <T>patchItem(String itemId, PartitionKey partitionKey, CosmosPatchOperations cosmosPatchOperations, CosmosPatchItemRequestOptions options, Class<T> itemType)"
  desc: "Run patch operations on an Item.\n\nAfter subscription the operation will be performed. The <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> upon successful completion will contain a single Cosmos item response with the patched item."
  returns:
    description: "an <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> containing the Cosmos item resource response with the patched item or an error."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.cosmos.models.CosmosItemResponse?alt=com.azure.cosmos.models.CosmosItemResponse&text=CosmosItemResponse\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.cosmos.encryption.CosmosEncryptionAsyncContainer.<T>queryItems(com.azure.cosmos.models.SqlQuerySpec,com.azure.cosmos.models.CosmosQueryRequestOptions,java.lang.Class<T>)"
  fullName: "com.azure.cosmos.encryption.CosmosEncryptionAsyncContainer.<T>queryItems(SqlQuerySpec query, CosmosQueryRequestOptions requestOptions, Class<T> classType)"
  name: "<T>queryItems(SqlQuerySpec query, CosmosQueryRequestOptions requestOptions, Class<T> classType)"
  nameWithType: "CosmosEncryptionAsyncContainer.<T>queryItems(SqlQuerySpec query, CosmosQueryRequestOptions requestOptions, Class<T> classType)"
  summary: "Query for items in the current container using a <xref uid=\"com.azure.cosmos.models.SqlQuerySpec\" data-throw-if-not-resolved=\"false\" data-raw-source=\"SqlQuerySpec\"></xref> and <xref uid=\"com.azure.cosmos.models.CosmosQueryRequestOptions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CosmosQueryRequestOptions\"></xref>."
  parameters:
  - description: "the SQL query specification."
    name: "query"
    type: "<xref href=\"com.azure.cosmos.models.SqlQuerySpec?alt=com.azure.cosmos.models.SqlQuerySpec&text=SqlQuerySpec\" data-throw-if-not-resolved=\"False\" />"
  - description: "the query request options."
    name: "requestOptions"
    type: "<xref href=\"com.azure.cosmos.models.CosmosQueryRequestOptions?alt=com.azure.cosmos.models.CosmosQueryRequestOptions&text=CosmosQueryRequestOptions\" data-throw-if-not-resolved=\"False\" />"
  - description: "the class type."
    name: "classType"
    type: "<xref href=\"java.lang.Class?alt=java.lang.Class&text=Class\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public CosmosPagedFlux<T> <T>queryItems(SqlQuerySpec query, CosmosQueryRequestOptions requestOptions, Class<T> classType)"
  desc: "Query for items in the current container using a <xref uid=\"com.azure.cosmos.models.SqlQuerySpec\" data-throw-if-not-resolved=\"false\" data-raw-source=\"SqlQuerySpec\"></xref> and <xref uid=\"com.azure.cosmos.models.CosmosQueryRequestOptions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CosmosQueryRequestOptions\"></xref>.\n\nAfter subscription the operation will be performed. The <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Flux\"></xref> will contain one or several feed response of the obtained items. In case of failure the <xref uid=\"com.azure.cosmos.util.CosmosPagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CosmosPagedFlux\"></xref> will error."
  returns:
    description: "a <xref uid=\"com.azure.cosmos.util.CosmosPagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CosmosPagedFlux\"></xref> containing one or several feed response pages of the obtained items or an\n error."
    type: "<xref href=\"com.azure.cosmos.util.CosmosPagedFlux?alt=com.azure.cosmos.util.CosmosPagedFlux&text=CosmosPagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.cosmos.encryption.CosmosEncryptionAsyncContainer.<T>queryItems(com.azure.cosmos.models.SqlQuerySpec,java.lang.Class<T>)"
  fullName: "com.azure.cosmos.encryption.CosmosEncryptionAsyncContainer.<T>queryItems(SqlQuerySpec querySpec, Class<T> classType)"
  name: "<T>queryItems(SqlQuerySpec querySpec, Class<T> classType)"
  nameWithType: "CosmosEncryptionAsyncContainer.<T>queryItems(SqlQuerySpec querySpec, Class<T> classType)"
  summary: "Query for items in the current container using a <xref uid=\"com.azure.cosmos.models.SqlQuerySpec\" data-throw-if-not-resolved=\"false\" data-raw-source=\"SqlQuerySpec\"></xref>."
  parameters:
  - description: "the SQL query specification."
    name: "querySpec"
    type: "<xref href=\"com.azure.cosmos.models.SqlQuerySpec?alt=com.azure.cosmos.models.SqlQuerySpec&text=SqlQuerySpec\" data-throw-if-not-resolved=\"False\" />"
  - description: "the class type."
    name: "classType"
    type: "<xref href=\"java.lang.Class?alt=java.lang.Class&text=Class\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public CosmosPagedFlux<T> <T>queryItems(SqlQuerySpec querySpec, Class<T> classType)"
  desc: "Query for items in the current container using a <xref uid=\"com.azure.cosmos.models.SqlQuerySpec\" data-throw-if-not-resolved=\"false\" data-raw-source=\"SqlQuerySpec\"></xref>.\n\nAfter subscription the operation will be performed. The <xref uid=\"com.azure.cosmos.util.CosmosPagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CosmosPagedFlux\"></xref> will contain one or several feed response of the obtained items. In case of failure the <xref uid=\"com.azure.cosmos.util.CosmosPagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CosmosPagedFlux\"></xref> will error."
  returns:
    description: "a <xref uid=\"com.azure.cosmos.util.CosmosPagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CosmosPagedFlux\"></xref> containing one or several feed response pages of the obtained items or an\n error."
    type: "<xref href=\"com.azure.cosmos.util.CosmosPagedFlux?alt=com.azure.cosmos.util.CosmosPagedFlux&text=CosmosPagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.cosmos.encryption.CosmosEncryptionAsyncContainer.<T>queryItems(java.lang.String,com.azure.cosmos.models.CosmosQueryRequestOptions,java.lang.Class<T>)"
  fullName: "com.azure.cosmos.encryption.CosmosEncryptionAsyncContainer.<T>queryItems(String query, CosmosQueryRequestOptions requestOptions, Class<T> classType)"
  name: "<T>queryItems(String query, CosmosQueryRequestOptions requestOptions, Class<T> classType)"
  nameWithType: "CosmosEncryptionAsyncContainer.<T>queryItems(String query, CosmosQueryRequestOptions requestOptions, Class<T> classType)"
  summary: "Query for items in the current container using a string."
  parameters:
  - description: "the query."
    name: "query"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "the query request options."
    name: "requestOptions"
    type: "<xref href=\"com.azure.cosmos.models.CosmosQueryRequestOptions?alt=com.azure.cosmos.models.CosmosQueryRequestOptions&text=CosmosQueryRequestOptions\" data-throw-if-not-resolved=\"False\" />"
  - description: "the class type."
    name: "classType"
    type: "<xref href=\"java.lang.Class?alt=java.lang.Class&text=Class\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public CosmosPagedFlux<T> <T>queryItems(String query, CosmosQueryRequestOptions requestOptions, Class<T> classType)"
  desc: "Query for items in the current container using a string.\n\nAfter subscription the operation will be performed. The <xref uid=\"com.azure.cosmos.util.CosmosPagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CosmosPagedFlux\"></xref> will contain one or several feed response of the obtained items. In case of failure the <xref uid=\"com.azure.cosmos.util.CosmosPagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CosmosPagedFlux\"></xref> will error."
  returns:
    description: "a <xref uid=\"com.azure.cosmos.util.CosmosPagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CosmosPagedFlux\"></xref> containing one or several feed response pages of the obtained items or an\n error."
    type: "<xref href=\"com.azure.cosmos.util.CosmosPagedFlux?alt=com.azure.cosmos.util.CosmosPagedFlux&text=CosmosPagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.cosmos.encryption.CosmosEncryptionAsyncContainer.<T>queryItems(java.lang.String,java.lang.Class<T>)"
  fullName: "com.azure.cosmos.encryption.CosmosEncryptionAsyncContainer.<T>queryItems(String query, Class<T> classType)"
  name: "<T>queryItems(String query, Class<T> classType)"
  nameWithType: "CosmosEncryptionAsyncContainer.<T>queryItems(String query, Class<T> classType)"
  summary: "Query for items in the current container."
  parameters:
  - description: "the query."
    name: "query"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "the class type."
    name: "classType"
    type: "<xref href=\"java.lang.Class?alt=java.lang.Class&text=Class\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public CosmosPagedFlux<T> <T>queryItems(String query, Class<T> classType)"
  desc: "Query for items in the current container.\n\nAfter subscription the operation will be performed. The <xref uid=\"com.azure.cosmos.util.CosmosPagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CosmosPagedFlux\"></xref> will contain one or several feed response of the obtained items. In case of failure the <xref uid=\"com.azure.cosmos.util.CosmosPagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CosmosPagedFlux\"></xref> will error."
  returns:
    description: "a <xref uid=\"com.azure.cosmos.util.CosmosPagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CosmosPagedFlux\"></xref> containing one or several feed response pages of the obtained items or an\n error."
    type: "<xref href=\"com.azure.cosmos.util.CosmosPagedFlux?alt=com.azure.cosmos.util.CosmosPagedFlux&text=CosmosPagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.cosmos.encryption.CosmosEncryptionAsyncContainer.<T>queryItemsOnEncryptedProperties(com.azure.cosmos.encryption.models.SqlQuerySpecWithEncryption,com.azure.cosmos.models.CosmosQueryRequestOptions,java.lang.Class<T>)"
  fullName: "com.azure.cosmos.encryption.CosmosEncryptionAsyncContainer.<T>queryItemsOnEncryptedProperties(SqlQuerySpecWithEncryption sqlQuerySpecWithEncryption, CosmosQueryRequestOptions options, Class<T> classType)"
  name: "<T>queryItemsOnEncryptedProperties(SqlQuerySpecWithEncryption sqlQuerySpecWithEncryption, CosmosQueryRequestOptions options, Class<T> classType)"
  nameWithType: "CosmosEncryptionAsyncContainer.<T>queryItemsOnEncryptedProperties(SqlQuerySpecWithEncryption sqlQuerySpecWithEncryption, CosmosQueryRequestOptions options, Class<T> classType)"
  summary: "Query for items in the current container using a <xref uid=\"com.azure.cosmos.encryption.models.SqlQuerySpecWithEncryption\" data-throw-if-not-resolved=\"false\" data-raw-source=\"SqlQuerySpecWithEncryption\"></xref>."
  parameters:
  - description: "the sqlQuerySpecWithEncryption."
    name: "sqlQuerySpecWithEncryption"
    type: "<xref href=\"com.azure.cosmos.encryption.models.SqlQuerySpecWithEncryption?alt=com.azure.cosmos.encryption.models.SqlQuerySpecWithEncryption&text=SqlQuerySpecWithEncryption\" data-throw-if-not-resolved=\"False\" />"
  - description: "the query request options."
    name: "options"
    type: "<xref href=\"com.azure.cosmos.models.CosmosQueryRequestOptions?alt=com.azure.cosmos.models.CosmosQueryRequestOptions&text=CosmosQueryRequestOptions\" data-throw-if-not-resolved=\"False\" />"
  - description: "the class type."
    name: "classType"
    type: "<xref href=\"java.lang.Class?alt=java.lang.Class&text=Class\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public CosmosPagedFlux<T> <T>queryItemsOnEncryptedProperties(SqlQuerySpecWithEncryption sqlQuerySpecWithEncryption, CosmosQueryRequestOptions options, Class<T> classType)"
  desc: "Query for items in the current container using a <xref uid=\"com.azure.cosmos.encryption.models.SqlQuerySpecWithEncryption\" data-throw-if-not-resolved=\"false\" data-raw-source=\"SqlQuerySpecWithEncryption\"></xref>.\n\nAfter subscription the operation will be performed. The <xref uid=\"com.azure.cosmos.util.CosmosPagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CosmosPagedFlux\"></xref> will contain one or several feed response of the obtained items. In case of failure the <xref uid=\"com.azure.cosmos.util.CosmosPagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CosmosPagedFlux\"></xref> will error."
  returns:
    description: "a <xref uid=\"com.azure.cosmos.util.CosmosPagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CosmosPagedFlux\"></xref> containing one or several feed response pages of the obtained items or an\n error."
    type: "<xref href=\"com.azure.cosmos.util.CosmosPagedFlux?alt=com.azure.cosmos.util.CosmosPagedFlux&text=CosmosPagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.cosmos.encryption.CosmosEncryptionAsyncContainer.<T>readItem(java.lang.String,com.azure.cosmos.models.PartitionKey,com.azure.cosmos.models.CosmosItemRequestOptions,java.lang.Class<T>)"
  fullName: "com.azure.cosmos.encryption.CosmosEncryptionAsyncContainer.<T>readItem(String id, PartitionKey partitionKey, CosmosItemRequestOptions requestOptions, Class<T> classType)"
  name: "<T>readItem(String id, PartitionKey partitionKey, CosmosItemRequestOptions requestOptions, Class<T> classType)"
  nameWithType: "CosmosEncryptionAsyncContainer.<T>readItem(String id, PartitionKey partitionKey, CosmosItemRequestOptions requestOptions, Class<T> classType)"
  summary: "Reads an item using a configured <xref uid=\"com.azure.cosmos.models.CosmosItemRequestOptions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CosmosItemRequestOptions\"></xref>."
  parameters:
  - description: "the item id."
    name: "id"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "the partition key."
    name: "partitionKey"
    type: "<xref href=\"com.azure.cosmos.models.PartitionKey?alt=com.azure.cosmos.models.PartitionKey&text=PartitionKey\" data-throw-if-not-resolved=\"False\" />"
  - description: "the request <xref uid=\"com.azure.cosmos.models.CosmosItemRequestOptions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CosmosItemRequestOptions\"></xref>."
    name: "requestOptions"
    type: "<xref href=\"com.azure.cosmos.models.CosmosItemRequestOptions?alt=com.azure.cosmos.models.CosmosItemRequestOptions&text=CosmosItemRequestOptions\" data-throw-if-not-resolved=\"False\" />"
  - description: "the item type."
    name: "classType"
    type: "<xref href=\"java.lang.Class?alt=java.lang.Class&text=Class\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public Mono<CosmosItemResponse<T>> <T>readItem(String id, PartitionKey partitionKey, CosmosItemRequestOptions requestOptions, Class<T> classType)"
  desc: "Reads an item using a configured <xref uid=\"com.azure.cosmos.models.CosmosItemRequestOptions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CosmosItemRequestOptions\"></xref>.\n\nAfter subscription the operation will be performed. The <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> upon successful completion will contain a Cosmos item response with the read item."
  returns:
    description: "an <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> containing the Cosmos item response with the read item or an error."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.cosmos.models.CosmosItemResponse?alt=com.azure.cosmos.models.CosmosItemResponse&text=CosmosItemResponse\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.cosmos.encryption.CosmosEncryptionAsyncContainer.<T>readItem(java.lang.String,com.azure.cosmos.models.PartitionKey,java.lang.Class<T>)"
  fullName: "com.azure.cosmos.encryption.CosmosEncryptionAsyncContainer.<T>readItem(String id, PartitionKey partitionKey, Class<T> classType)"
  name: "<T>readItem(String id, PartitionKey partitionKey, Class<T> classType)"
  nameWithType: "CosmosEncryptionAsyncContainer.<T>readItem(String id, PartitionKey partitionKey, Class<T> classType)"
  summary: "Reads an item."
  parameters:
  - description: "the item id."
    name: "id"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "the partition key."
    name: "partitionKey"
    type: "<xref href=\"com.azure.cosmos.models.PartitionKey?alt=com.azure.cosmos.models.PartitionKey&text=PartitionKey\" data-throw-if-not-resolved=\"False\" />"
  - description: "the item type."
    name: "classType"
    type: "<xref href=\"java.lang.Class?alt=java.lang.Class&text=Class\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public Mono<CosmosItemResponse<T>> <T>readItem(String id, PartitionKey partitionKey, Class<T> classType)"
  desc: "Reads an item.\n\nAfter subscription the operation will be performed. The <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> upon successful completion will contain an item response with the read item."
  returns:
    description: "an <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> containing the Cosmos item response with the read item or an error."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.cosmos.models.CosmosItemResponse?alt=com.azure.cosmos.models.CosmosItemResponse&text=CosmosItemResponse\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.cosmos.encryption.CosmosEncryptionAsyncContainer.<T>replaceItem(T,java.lang.String,com.azure.cosmos.models.PartitionKey)"
  fullName: "com.azure.cosmos.encryption.CosmosEncryptionAsyncContainer.<T>replaceItem(T item, String itemId, PartitionKey partitionKey)"
  name: "<T>replaceItem(T item, String itemId, PartitionKey partitionKey)"
  nameWithType: "CosmosEncryptionAsyncContainer.<T>replaceItem(T item, String itemId, PartitionKey partitionKey)"
  summary: "Replaces an item with the passed in item and encrypts the requested fields."
  parameters:
  - description: "the item to replace (containing the item id)."
    name: "item"
    type: "<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />"
  - description: "the item id."
    name: "itemId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "the partition key."
    name: "partitionKey"
    type: "<xref href=\"com.azure.cosmos.models.PartitionKey?alt=com.azure.cosmos.models.PartitionKey&text=PartitionKey\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<CosmosItemResponse<T>> <T>replaceItem(T item, String itemId, PartitionKey partitionKey)"
  desc: "Replaces an item with the passed in item and encrypts the requested fields.\n\nAfter subscription the operation will be performed. The <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> upon successful completion will contain a single Cosmos item response with the replaced item."
  returns:
    description: "an <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> containing the Cosmos item resource response with the replaced item or an error."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.cosmos.models.CosmosItemResponse?alt=com.azure.cosmos.models.CosmosItemResponse&text=CosmosItemResponse\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.cosmos.encryption.CosmosEncryptionAsyncContainer.<T>replaceItem(T,java.lang.String,com.azure.cosmos.models.PartitionKey,com.azure.cosmos.models.CosmosItemRequestOptions)"
  fullName: "com.azure.cosmos.encryption.CosmosEncryptionAsyncContainer.<T>replaceItem(T item, String itemId, PartitionKey partitionKey, CosmosItemRequestOptions requestOptions)"
  name: "<T>replaceItem(T item, String itemId, PartitionKey partitionKey, CosmosItemRequestOptions requestOptions)"
  nameWithType: "CosmosEncryptionAsyncContainer.<T>replaceItem(T item, String itemId, PartitionKey partitionKey, CosmosItemRequestOptions requestOptions)"
  summary: "Replaces an item with the passed in item and encrypts the requested fields."
  parameters:
  - description: "the item to replace (containing the item id)."
    name: "item"
    type: "<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />"
  - description: "the item id."
    name: "itemId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "the partition key."
    name: "partitionKey"
    type: "<xref href=\"com.azure.cosmos.models.PartitionKey?alt=com.azure.cosmos.models.PartitionKey&text=PartitionKey\" data-throw-if-not-resolved=\"False\" />"
  - description: "the request comosItemRequestOptions."
    name: "requestOptions"
    type: "<xref href=\"com.azure.cosmos.models.CosmosItemRequestOptions?alt=com.azure.cosmos.models.CosmosItemRequestOptions&text=CosmosItemRequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<CosmosItemResponse<T>> <T>replaceItem(T item, String itemId, PartitionKey partitionKey, CosmosItemRequestOptions requestOptions)"
  desc: "Replaces an item with the passed in item and encrypts the requested fields.\n\nAfter subscription the operation will be performed. The <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> upon successful completion will contain a single Cosmos item response with the replaced item."
  returns:
    description: "an <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> containing the Cosmos item resource response with the replaced item or an error."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.cosmos.models.CosmosItemResponse?alt=com.azure.cosmos.models.CosmosItemResponse&text=CosmosItemResponse\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.cosmos.encryption.CosmosEncryptionAsyncContainer.<T>upsertItem(T)"
  fullName: "com.azure.cosmos.encryption.CosmosEncryptionAsyncContainer.<T>upsertItem(T item)"
  name: "<T>upsertItem(T item)"
  nameWithType: "CosmosEncryptionAsyncContainer.<T>upsertItem(T item)"
  summary: "Upserts an item."
  parameters:
  - description: "the item represented as a POJO or Item object to upsert."
    name: "item"
    type: "<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<CosmosItemResponse<T>> <T>upsertItem(T item)"
  desc: "Upserts an item.\n\nAfter subscription the operation will be performed. The <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> upon successful completion will contain a single resource response with the upserted item. In case of failure the <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> will error."
  returns:
    description: "an <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> containing the single resource response with the upserted item or an error."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.cosmos.models.CosmosItemResponse?alt=com.azure.cosmos.models.CosmosItemResponse&text=CosmosItemResponse\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.cosmos.encryption.CosmosEncryptionAsyncContainer.<T>upsertItem(T,com.azure.cosmos.models.CosmosItemRequestOptions)"
  fullName: "com.azure.cosmos.encryption.CosmosEncryptionAsyncContainer.<T>upsertItem(T item, CosmosItemRequestOptions requestOptions)"
  name: "<T>upsertItem(T item, CosmosItemRequestOptions requestOptions)"
  nameWithType: "CosmosEncryptionAsyncContainer.<T>upsertItem(T item, CosmosItemRequestOptions requestOptions)"
  summary: "Upserts an item."
  parameters:
  - description: "the item represented as a POJO or Item object to upsert."
    name: "item"
    type: "<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />"
  - description: "the request options."
    name: "requestOptions"
    type: "<xref href=\"com.azure.cosmos.models.CosmosItemRequestOptions?alt=com.azure.cosmos.models.CosmosItemRequestOptions&text=CosmosItemRequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<CosmosItemResponse<T>> <T>upsertItem(T item, CosmosItemRequestOptions requestOptions)"
  desc: "Upserts an item.\n\nAfter subscription the operation will be performed. The <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> upon successful completion will contain a single resource response with the upserted item. In case of failure the <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> will error."
  returns:
    description: "an <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> containing the single resource response with the upserted item or an error."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.cosmos.models.CosmosItemResponse?alt=com.azure.cosmos.models.CosmosItemResponse&text=CosmosItemResponse\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.cosmos.encryption.CosmosEncryptionAsyncContainer.<T>upsertItem(T,com.azure.cosmos.models.PartitionKey,com.azure.cosmos.models.CosmosItemRequestOptions)"
  fullName: "com.azure.cosmos.encryption.CosmosEncryptionAsyncContainer.<T>upsertItem(T item, PartitionKey partitionKey, CosmosItemRequestOptions requestOptions)"
  name: "<T>upsertItem(T item, PartitionKey partitionKey, CosmosItemRequestOptions requestOptions)"
  nameWithType: "CosmosEncryptionAsyncContainer.<T>upsertItem(T item, PartitionKey partitionKey, CosmosItemRequestOptions requestOptions)"
  summary: "Upserts an item."
  parameters:
  - description: "the item represented as a POJO or Item object to upsert."
    name: "item"
    type: "<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />"
  - description: "the partition key."
    name: "partitionKey"
    type: "<xref href=\"com.azure.cosmos.models.PartitionKey?alt=com.azure.cosmos.models.PartitionKey&text=PartitionKey\" data-throw-if-not-resolved=\"False\" />"
  - description: "the request options."
    name: "requestOptions"
    type: "<xref href=\"com.azure.cosmos.models.CosmosItemRequestOptions?alt=com.azure.cosmos.models.CosmosItemRequestOptions&text=CosmosItemRequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<CosmosItemResponse<T>> <T>upsertItem(T item, PartitionKey partitionKey, CosmosItemRequestOptions requestOptions)"
  desc: "Upserts an item.\n\nAfter subscription the operation will be performed. The <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> upon successful completion will contain a single resource response with the upserted item. In case of failure the <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> will error."
  returns:
    description: "an <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> containing the single resource response with the upserted item or an error."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.cosmos.models.CosmosItemResponse?alt=com.azure.cosmos.models.CosmosItemResponse&text=CosmosItemResponse\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.cosmos.encryption.CosmosEncryptionAsyncContainer.<TContext>executeBulkOperations(reactor.core.publisher.Flux<com.azure.cosmos.models.CosmosItemOperation>)"
  fullName: "com.azure.cosmos.encryption.CosmosEncryptionAsyncContainer.<TContext>executeBulkOperations(Flux<CosmosItemOperation> operations)"
  name: "<TContext>executeBulkOperations(Flux<CosmosItemOperation> operations)"
  nameWithType: "CosmosEncryptionAsyncContainer.<TContext>executeBulkOperations(Flux<CosmosItemOperation> operations)"
  summary: "Executes flux of operations in Bulk."
  parameters:
  - description: "Flux of operation which will be executed by this container."
    name: "operations"
    type: "<xref href=\"reactor.core.publisher.Flux?alt=reactor.core.publisher.Flux&text=Flux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.cosmos.models.CosmosItemOperation?alt=com.azure.cosmos.models.CosmosItemOperation&text=CosmosItemOperation\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public Flux<CosmosBulkOperationResponse<TContext>> <TContext>executeBulkOperations(Flux<CosmosItemOperation> operations)"
  desc: "Executes flux of operations in Bulk."
  returns:
    description: "A Flux of <xref uid=\"com.azure.cosmos.models.CosmosBulkOperationResponse\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CosmosBulkOperationResponse\"></xref> which contains operation and it's response or exception.\n <p>\n     To create a operation which can be executed here, use <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.azure.cosmos.models.CosmosBulkOperations\"></xref>. For eg.\n     for a upsert operation use <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.azure.cosmos.models.CosmosBulkOperations#getUpsertItemOperation(Object, PartitionKey)\"></xref>\n </p>\n <p>\n     We can get the corresponding operation using <xref uid=\"com.azure.cosmos.models.CosmosBulkOperationResponse.getOperation*\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CosmosBulkOperationResponse#getOperation()\"></xref> and\n     it's response using <xref uid=\"com.azure.cosmos.models.CosmosBulkOperationResponse.getResponse*\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CosmosBulkOperationResponse#getResponse()\"></xref>. If the operation was executed\n     successfully, the value returned by <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.azure.cosmos.models.CosmosBulkItemResponse#isSuccessStatusCode()\"></xref> will be true. To get\n     actual status use <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.azure.cosmos.models.CosmosBulkItemResponse#getStatusCode()\"></xref>.\n </p>\n To check if the operation had any exception, use <xref uid=\"com.azure.cosmos.models.CosmosBulkOperationResponse.getException*\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CosmosBulkOperationResponse#getException()\"></xref> to\n get the exception."
    type: "<xref href=\"reactor.core.publisher.Flux?alt=reactor.core.publisher.Flux&text=Flux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.cosmos.models.CosmosBulkOperationResponse?alt=com.azure.cosmos.models.CosmosBulkOperationResponse&text=CosmosBulkOperationResponse\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"TContext?alt=TContext&text=TContext\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.cosmos.encryption.CosmosEncryptionAsyncContainer.<TContext>executeBulkOperations(reactor.core.publisher.Flux<com.azure.cosmos.models.CosmosItemOperation>,com.azure.cosmos.models.CosmosBulkExecutionOptions)"
  fullName: "com.azure.cosmos.encryption.CosmosEncryptionAsyncContainer.<TContext>executeBulkOperations(Flux<CosmosItemOperation> operations, CosmosBulkExecutionOptions bulkOptions)"
  name: "<TContext>executeBulkOperations(Flux<CosmosItemOperation> operations, CosmosBulkExecutionOptions bulkOptions)"
  nameWithType: "CosmosEncryptionAsyncContainer.<TContext>executeBulkOperations(Flux<CosmosItemOperation> operations, CosmosBulkExecutionOptions bulkOptions)"
  summary: "Executes flux of operations in Bulk."
  parameters:
  - description: "Flux of operation which will be executed by this container."
    name: "operations"
    type: "<xref href=\"reactor.core.publisher.Flux?alt=reactor.core.publisher.Flux&text=Flux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.cosmos.models.CosmosItemOperation?alt=com.azure.cosmos.models.CosmosItemOperation&text=CosmosItemOperation\" data-throw-if-not-resolved=\"False\" />&gt;"
  - description: "Options that apply for this Bulk request which specifies options regarding execution like\n                    concurrency, batching size, interval and context."
    name: "bulkOptions"
    type: "<xref href=\"com.azure.cosmos.models.CosmosBulkExecutionOptions?alt=com.azure.cosmos.models.CosmosBulkExecutionOptions&text=CosmosBulkExecutionOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Flux<CosmosBulkOperationResponse<TContext>> <TContext>executeBulkOperations(Flux<CosmosItemOperation> operations, CosmosBulkExecutionOptions bulkOptions)"
  desc: "Executes flux of operations in Bulk."
  returns:
    description: "A Flux of <xref uid=\"com.azure.cosmos.models.CosmosBulkOperationResponse\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CosmosBulkOperationResponse\"></xref> which contains operation and it's response or exception.\n <p>\n     To create a operation which can be executed here, use <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.azure.cosmos.models.CosmosBulkOperations\"></xref>. For eg.\n     for a upsert operation use <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.azure.cosmos.models.CosmosBulkOperations#getUpsertItemOperation(Object, PartitionKey)\"></xref>\n </p>\n <p>\n     We can get the corresponding operation using <xref uid=\"com.azure.cosmos.models.CosmosBulkOperationResponse.getOperation*\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CosmosBulkOperationResponse#getOperation()\"></xref> and\n     it's response using <xref uid=\"com.azure.cosmos.models.CosmosBulkOperationResponse.getResponse*\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CosmosBulkOperationResponse#getResponse()\"></xref>. If the operation was executed\n     successfully, the value returned by <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.azure.cosmos.models.CosmosBulkItemResponse#isSuccessStatusCode()\"></xref> will be true. To get\n     actual status use <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.azure.cosmos.models.CosmosBulkItemResponse#getStatusCode()\"></xref>.\n </p>\n To check if the operation had any exception, use <xref uid=\"com.azure.cosmos.models.CosmosBulkOperationResponse.getException*\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CosmosBulkOperationResponse#getException()\"></xref> to\n get the exception."
    type: "<xref href=\"reactor.core.publisher.Flux?alt=reactor.core.publisher.Flux&text=Flux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.cosmos.models.CosmosBulkOperationResponse?alt=com.azure.cosmos.models.CosmosBulkOperationResponse&text=CosmosBulkOperationResponse\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"TContext?alt=TContext&text=TContext\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.cosmos.encryption.CosmosEncryptionAsyncContainer.deleteItem(java.lang.String,com.azure.cosmos.models.PartitionKey)"
  fullName: "com.azure.cosmos.encryption.CosmosEncryptionAsyncContainer.deleteItem(String itemId, PartitionKey partitionKey)"
  name: "deleteItem(String itemId, PartitionKey partitionKey)"
  nameWithType: "CosmosEncryptionAsyncContainer.deleteItem(String itemId, PartitionKey partitionKey)"
  summary: "Deletes an item."
  parameters:
  - description: "the item id."
    name: "itemId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "the partition key."
    name: "partitionKey"
    type: "<xref href=\"com.azure.cosmos.models.PartitionKey?alt=com.azure.cosmos.models.PartitionKey&text=PartitionKey\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<CosmosItemResponse<Object>> deleteItem(String itemId, PartitionKey partitionKey)"
  desc: "Deletes an item.\n\nAfter subscription the operation will be performed. The <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> upon successful completion will contain a single Cosmos item response for the deleted item."
  returns:
    description: "an <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> containing the Cosmos item resource response."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.cosmos.models.CosmosItemResponse?alt=com.azure.cosmos.models.CosmosItemResponse&text=CosmosItemResponse\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Object?alt=java.lang.Object&text=Object\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.cosmos.encryption.CosmosEncryptionAsyncContainer.deleteItem(java.lang.String,com.azure.cosmos.models.PartitionKey,com.azure.cosmos.models.CosmosItemRequestOptions)"
  fullName: "com.azure.cosmos.encryption.CosmosEncryptionAsyncContainer.deleteItem(String itemId, PartitionKey partitionKey, CosmosItemRequestOptions requestOptions)"
  name: "deleteItem(String itemId, PartitionKey partitionKey, CosmosItemRequestOptions requestOptions)"
  nameWithType: "CosmosEncryptionAsyncContainer.deleteItem(String itemId, PartitionKey partitionKey, CosmosItemRequestOptions requestOptions)"
  summary: "Deletes the item."
  parameters:
  - description: "id of the item."
    name: "itemId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "partitionKey of the item."
    name: "partitionKey"
    type: "<xref href=\"com.azure.cosmos.models.PartitionKey?alt=com.azure.cosmos.models.PartitionKey&text=PartitionKey\" data-throw-if-not-resolved=\"False\" />"
  - description: "the request options."
    name: "requestOptions"
    type: "<xref href=\"com.azure.cosmos.models.CosmosItemRequestOptions?alt=com.azure.cosmos.models.CosmosItemRequestOptions&text=CosmosItemRequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<CosmosItemResponse<Object>> deleteItem(String itemId, PartitionKey partitionKey, CosmosItemRequestOptions requestOptions)"
  desc: "Deletes the item.\n\nAfter subscription the operation will be performed. The <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> upon successful completion will contain a single Cosmos item response for the deleted item."
  returns:
    description: "an <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> containing the Cosmos item resource response."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.cosmos.models.CosmosItemResponse?alt=com.azure.cosmos.models.CosmosItemResponse&text=CosmosItemResponse\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Object?alt=java.lang.Object&text=Object\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.cosmos.encryption.CosmosEncryptionAsyncContainer.executeCosmosBatch(com.azure.cosmos.models.CosmosBatch)"
  fullName: "com.azure.cosmos.encryption.CosmosEncryptionAsyncContainer.executeCosmosBatch(CosmosBatch cosmosBatch)"
  name: "executeCosmosBatch(CosmosBatch cosmosBatch)"
  nameWithType: "CosmosEncryptionAsyncContainer.executeCosmosBatch(CosmosBatch cosmosBatch)"
  summary: "Executes the encrypted transactional batch."
  parameters:
  - description: "Batch having list of operation and partition key which will be executed by this container."
    name: "cosmosBatch"
    type: "<xref href=\"com.azure.cosmos.models.CosmosBatch?alt=com.azure.cosmos.models.CosmosBatch&text=CosmosBatch\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<CosmosBatchResponse> executeCosmosBatch(CosmosBatch cosmosBatch)"
  desc: "Executes the encrypted transactional batch."
  returns:
    description: "A Mono response which contains details of execution of the transactional batch.\n <p>\n If the transactional batch executes successfully, the value returned by <xref uid=\"com.azure.cosmos.models.CosmosBatchResponse.getStatusCode\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CosmosBatchResponse#getStatusCode\"></xref> on the response returned will be set to 200}.\n <p>\n If an operation within the transactional batch fails during execution, no changes from the batch will be\n committed and the status of the failing operation is made available by <xref uid=\"com.azure.cosmos.models.CosmosBatchResponse.getStatusCode\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CosmosBatchResponse#getStatusCode\"></xref> or by the exception. To obtain information about the operations\n that failed in case of some user error like conflict, not found etc, the response can be enumerated.\n This returns <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CosmosBatchOperationResult\"></xref> instances corresponding to each operation in the\n transactional batch in the order they were added to the transactional batch.\n For a result corresponding to an operation within the transactional batch, use\n <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CosmosBatchOperationResult#getStatusCode\"></xref>\n to access the status of the operation. If the operation was not executed or it was aborted due to the failure of\n another operation within the transactional batch, the value of this field will be 424;\n for the operation that caused the batch to abort, the value of this field\n will indicate the cause of failure.\n <p>\n If there are issues such as request timeouts, Gone, session not available, network failure\n or if the service somehow returns 5xx then the Mono will return error instead of CosmosBatchResponse.\n <p>\n Use <xref uid=\"com.azure.cosmos.models.CosmosBatchResponse.isSuccessStatusCode\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CosmosBatchResponse#isSuccessStatusCode\"></xref> on the response returned to ensure that the\n transactional batch succeeded."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.cosmos.models.CosmosBatchResponse?alt=com.azure.cosmos.models.CosmosBatchResponse&text=CosmosBatchResponse\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.cosmos.encryption.CosmosEncryptionAsyncContainer.executeCosmosBatch(com.azure.cosmos.models.CosmosBatch,com.azure.cosmos.models.CosmosBatchRequestOptions)"
  fullName: "com.azure.cosmos.encryption.CosmosEncryptionAsyncContainer.executeCosmosBatch(CosmosBatch cosmosBatch, CosmosBatchRequestOptions requestOptions)"
  name: "executeCosmosBatch(CosmosBatch cosmosBatch, CosmosBatchRequestOptions requestOptions)"
  nameWithType: "CosmosEncryptionAsyncContainer.executeCosmosBatch(CosmosBatch cosmosBatch, CosmosBatchRequestOptions requestOptions)"
  summary: "Executes the encrypted transactional batch."
  parameters:
  - description: "Batch having list of operation and partition key which will be executed by this container."
    name: "cosmosBatch"
    type: "<xref href=\"com.azure.cosmos.models.CosmosBatch?alt=com.azure.cosmos.models.CosmosBatch&text=CosmosBatch\" data-throw-if-not-resolved=\"False\" />"
  - description: "Options that apply specifically to batch request."
    name: "requestOptions"
    type: "<xref href=\"com.azure.cosmos.models.CosmosBatchRequestOptions?alt=com.azure.cosmos.models.CosmosBatchRequestOptions&text=CosmosBatchRequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<CosmosBatchResponse> executeCosmosBatch(CosmosBatch cosmosBatch, CosmosBatchRequestOptions requestOptions)"
  desc: "Executes the encrypted transactional batch."
  returns:
    description: "A Mono response which contains details of execution of the transactional batch.\n <p>\n If the transactional batch executes successfully, the value returned by <xref uid=\"com.azure.cosmos.models.CosmosBatchResponse.getStatusCode\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CosmosBatchResponse#getStatusCode\"></xref> on the response returned will be set to 200}.\n <p>\n If an operation within the transactional batch fails during execution, no changes from the batch will be\n committed and the status of the failing operation is made available by <xref uid=\"com.azure.cosmos.models.CosmosBatchResponse.getStatusCode\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CosmosBatchResponse#getStatusCode\"></xref> or by the exception. To obtain information about the operations\n that failed in case of some user error like conflict, not found etc, the response can be enumerated.\n This returns <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CosmosBatchOperationResult\"></xref> instances corresponding to each operation in the\n transactional batch in the order they were added to the transactional batch.\n For a result corresponding to an operation within the transactional batch, use\n <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CosmosBatchOperationResult#getStatusCode\"></xref>\n to access the status of the operation. If the operation was not executed or it was aborted due to the failure of\n another operation within the transactional batch, the value of this field will be 424;\n for the operation that caused the batch to abort, the value of this field\n will indicate the cause of failure.\n <p>\n If there are issues such as request timeouts, Gone, session not available, network failure\n or if the service somehow returns 5xx then the Mono will return error instead of CosmosBatchResponse.\n <p>\n Use <xref uid=\"com.azure.cosmos.models.CosmosBatchResponse.isSuccessStatusCode\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CosmosBatchResponse#isSuccessStatusCode\"></xref> on the response returned to ensure that the\n transactional batch succeeded."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.cosmos.models.CosmosBatchResponse?alt=com.azure.cosmos.models.CosmosBatchResponse&text=CosmosBatchResponse\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.cosmos.encryption.CosmosEncryptionAsyncContainer.getCosmosAsyncContainer()"
  fullName: "com.azure.cosmos.encryption.CosmosEncryptionAsyncContainer.getCosmosAsyncContainer()"
  name: "getCosmosAsyncContainer()"
  nameWithType: "CosmosEncryptionAsyncContainer.getCosmosAsyncContainer()"
  summary: "Gets the Cosmos<wbr>Async<wbr>Container"
  syntax: "public CosmosAsyncContainer getCosmosAsyncContainer()"
  desc: "Gets the CosmosAsyncContainer"
  returns:
    description: "cosmos container"
    type: "<xref href=\"com.azure.cosmos.CosmosAsyncContainer?alt=com.azure.cosmos.CosmosAsyncContainer&text=CosmosAsyncContainer\" data-throw-if-not-resolved=\"False\" />"
type: "class"
desc: "CosmosAsyncContainer with encryption capabilities."
metadata: {}
package: "com.azure.cosmos.encryption"
artifact: com.azure:azure-cosmos-encryption:1.0.0-beta.10
