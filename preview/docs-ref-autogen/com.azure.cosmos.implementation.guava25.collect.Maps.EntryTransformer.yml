### YamlMime:ManagedReference
items:
- uid: com.azure.cosmos.implementation.guava25.collect.Maps.EntryTransformer
  id: EntryTransformer
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect
  children:
  - com.azure.cosmos.implementation.guava25.collect.Maps.EntryTransformer.transformEntry(K,V1)
  langs:
  - java
  name: Maps.EntryTransformer<K,V1,V2>
  nameWithType: Maps.EntryTransformer<K,V1,V2>
  fullName: com.azure.cosmos.implementation.guava25.collect.Maps.EntryTransformer<K,V1,V2>
  type: Interface
  package: com.azure.cosmos.implementation.guava25.collect
  summary: A transformation of the value of a key-value pair, using both key and value as inputs. To apply the transformation to a map, use <xref uid="com.azure.cosmos.implementation.guava25.collect.Maps.transformEntries*" data-throw-if-not-resolved="false">Maps#transformEntries(Map, EntryTransformer)</xref>.
  syntax:
    content: public static interface Maps.EntryTransformer<K,V1,V2>
    typeParameters:
    - id: K
    - id: V1
    - id: V2
- uid: com.azure.cosmos.implementation.guava25.collect.Maps.EntryTransformer.transformEntry(K,V1)
  id: transformEntry(K,V1)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.Maps.EntryTransformer
  langs:
  - java
  name: transformEntry(K key, V1 value)
  nameWithType: Maps.EntryTransformer<K,V1,V2>.transformEntry(K key, V1 value)
  fullName: com.azure.cosmos.implementation.guava25.collect.Maps.EntryTransformer<K,V1,V2>.transformEntry(K key, V1 value)
  overload: com.azure.cosmos.implementation.guava25.collect.Maps.EntryTransformer.transformEntry*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Determines an output value based on a key-value pair. This method is *generally expected*, but not absolutely required, to have the following properties:

     *  Its execution does not cause any observable side effects.
     *  The computation is *consistent with equals*; that is, <xref uid="com.azure.cosmos.implementation.guava25.base.Objects.equal*" data-throw-if-not-resolved="false">Objects.equal</xref>`(k1, k2) &&` <xref uid="com.azure.cosmos.implementation.guava25.base.Objects.equal*" data-throw-if-not-resolved="false">Objects#equal</xref>`(v1, v2)` implies that `Objects.equal(transformer.transform(k1, v1), transformer.transform(k2, v2))`.
  syntax:
    content: public abstract V2 transformEntry(K key, V1 value)
    parameters:
    - id: key
      type: K
    - id: value
      type: V1
    return:
      type: V2
references:
- uid: K
  spec.java:
  - uid: K
    name: K
    fullName: K
- uid: V1
  spec.java:
  - uid: V1
    name: V1
    fullName: V1
- uid: V2
  spec.java:
  - uid: V2
    name: V2
    fullName: V2
- uid: com.azure.cosmos.implementation.guava25.collect.Maps.EntryTransformer.transformEntry*
  name: transformEntry
  nameWithType: Maps.EntryTransformer<K,V1,V2>.transformEntry
  fullName: com.azure.cosmos.implementation.guava25.collect.Maps.EntryTransformer<K,V1,V2>.transformEntry
  package: com.azure.cosmos.implementation.guava25.collect
