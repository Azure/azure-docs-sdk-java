### YamlMime:ManagedReference
items:
- uid: "com.azure.cosmos.implementation.caches.AsyncLazy"
  id: "AsyncLazy"
  parent: "com.azure.cosmos.implementation.caches"
  children:
  - "com.azure.cosmos.implementation.caches.AsyncLazy.AsyncLazy(TValue)"
  - "com.azure.cosmos.implementation.caches.AsyncLazy.AsyncLazy(java.util.concurrent.Callable<reactor.core.publisher.Mono<TValue>>)"
  - "com.azure.cosmos.implementation.caches.AsyncLazy.isFaulted()"
  - "com.azure.cosmos.implementation.caches.AsyncLazy.isSucceeded()"
  - "com.azure.cosmos.implementation.caches.AsyncLazy.single()"
  langs:
  - "java"
  name: "AsyncLazy<TValue>"
  nameWithType: "AsyncLazy<TValue>"
  fullName: "com.azure.cosmos.implementation.caches.AsyncLazy<TValue>"
  type: "Class"
  package: "com.azure.cosmos.implementation.caches"
  syntax:
    content: " class AsyncLazy<TValue>"
    typeParameters:
    - id: "TValue"
  inheritance:
  - "java.lang.Object"
  inheritedMembers:
  - "java.lang.Object.clone()"
  - "java.lang.Object.equals(java.lang.Object)"
  - "java.lang.Object.finalize()"
  - "java.lang.Object.getClass()"
  - "java.lang.Object.hashCode()"
  - "java.lang.Object.notify()"
  - "java.lang.Object.notifyAll()"
  - "java.lang.Object.toString()"
  - "java.lang.Object.wait()"
  - "java.lang.Object.wait(long)"
  - "java.lang.Object.wait(long,int)"
- uid: "com.azure.cosmos.implementation.caches.AsyncLazy.AsyncLazy(TValue)"
  id: "AsyncLazy(TValue)"
  parent: "com.azure.cosmos.implementation.caches.AsyncLazy"
  langs:
  - "java"
  name: "AsyncLazy(TValue value)"
  nameWithType: "AsyncLazy<TValue>.AsyncLazy(TValue value)"
  fullName: "com.azure.cosmos.implementation.caches.AsyncLazy<TValue>.AsyncLazy(TValue value)"
  overload: "com.azure.cosmos.implementation.caches.AsyncLazy.AsyncLazy*"
  type: "Constructor"
  package: "com.azure.cosmos.implementation.caches"
  syntax:
    content: "public AsyncLazy(TValue value)"
    parameters:
    - id: "value"
      type: "TValue"
- uid: "com.azure.cosmos.implementation.caches.AsyncLazy.AsyncLazy(java.util.concurrent.Callable<reactor.core.publisher.Mono<TValue>>)"
  id: "AsyncLazy(java.util.concurrent.Callable<reactor.core.publisher.Mono<TValue>>)"
  parent: "com.azure.cosmos.implementation.caches.AsyncLazy"
  langs:
  - "java"
  name: "AsyncLazy(Callable<Mono<TValue>> func)"
  nameWithType: "AsyncLazy<TValue>.AsyncLazy(Callable<Mono<TValue>> func)"
  fullName: "com.azure.cosmos.implementation.caches.AsyncLazy<TValue>.AsyncLazy(Callable<Mono<TValue>> func)"
  overload: "com.azure.cosmos.implementation.caches.AsyncLazy.AsyncLazy*"
  type: "Constructor"
  package: "com.azure.cosmos.implementation.caches"
  syntax:
    content: "public AsyncLazy(Callable<Mono<TValue>> func)"
    parameters:
    - id: "func"
      type: "java.util.concurrent.Callable<reactor.core.publisher.Mono<TValue>>"
- uid: "com.azure.cosmos.implementation.caches.AsyncLazy.AsyncLazy(reactor.core.publisher.Mono<TValue>)"
  id: "AsyncLazy(reactor.core.publisher.Mono<TValue>)"
  parent: "com.azure.cosmos.implementation.caches.AsyncLazy"
  langs:
  - "java"
  name: "AsyncLazy(Mono<TValue> single)"
  nameWithType: "AsyncLazy<TValue>.AsyncLazy(Mono<TValue> single)"
  fullName: "com.azure.cosmos.implementation.caches.AsyncLazy<TValue>.AsyncLazy(Mono<TValue> single)"
  overload: "com.azure.cosmos.implementation.caches.AsyncLazy.AsyncLazy*"
  type: "Constructor"
  package: "com.azure.cosmos.implementation.caches"
  syntax:
    content: "private AsyncLazy(Mono<TValue> single)"
    parameters:
    - id: "single"
      type: "reactor.core.publisher.Mono<TValue>"
- uid: "com.azure.cosmos.implementation.caches.AsyncLazy.isFaulted()"
  id: "isFaulted()"
  parent: "com.azure.cosmos.implementation.caches.AsyncLazy"
  langs:
  - "java"
  name: "isFaulted()"
  nameWithType: "AsyncLazy<TValue>.isFaulted()"
  fullName: "com.azure.cosmos.implementation.caches.AsyncLazy<TValue>.isFaulted()"
  overload: "com.azure.cosmos.implementation.caches.AsyncLazy.isFaulted*"
  type: "Method"
  package: "com.azure.cosmos.implementation.caches"
  syntax:
    content: "public boolean isFaulted()"
    return:
      type: "boolean"
- uid: "com.azure.cosmos.implementation.caches.AsyncLazy.isSucceeded()"
  id: "isSucceeded()"
  parent: "com.azure.cosmos.implementation.caches.AsyncLazy"
  langs:
  - "java"
  name: "isSucceeded()"
  nameWithType: "AsyncLazy<TValue>.isSucceeded()"
  fullName: "com.azure.cosmos.implementation.caches.AsyncLazy<TValue>.isSucceeded()"
  overload: "com.azure.cosmos.implementation.caches.AsyncLazy.isSucceeded*"
  type: "Method"
  package: "com.azure.cosmos.implementation.caches"
  syntax:
    content: "public boolean isSucceeded()"
    return:
      type: "boolean"
- uid: "com.azure.cosmos.implementation.caches.AsyncLazy.single()"
  id: "single()"
  parent: "com.azure.cosmos.implementation.caches.AsyncLazy"
  langs:
  - "java"
  name: "single()"
  nameWithType: "AsyncLazy<TValue>.single()"
  fullName: "com.azure.cosmos.implementation.caches.AsyncLazy<TValue>.single()"
  overload: "com.azure.cosmos.implementation.caches.AsyncLazy.single*"
  type: "Method"
  package: "com.azure.cosmos.implementation.caches"
  syntax:
    content: "public Mono<TValue> single()"
    return:
      type: "reactor.core.publisher.Mono<TValue>"
references:
- uid: "java.util.concurrent.Callable<reactor.core.publisher.Mono<TValue>>"
  spec.java:
  - uid: "java.util.concurrent.Callable"
    name: "Callable"
    fullName: "java.util.concurrent.Callable"
  - name: "<"
    fullName: "<"
  - uid: "reactor.core.publisher.Mono"
    name: "Mono"
    fullName: "reactor.core.publisher.Mono"
  - name: "<"
    fullName: "<"
  - uid: "TValue"
    name: "TValue"
    fullName: "TValue"
  - name: ">"
    fullName: ">"
  - name: ">"
    fullName: ">"
- uid: "com.azure.cosmos.implementation.caches.AsyncLazy.AsyncLazy*"
  name: "AsyncLazy"
  nameWithType: "AsyncLazy<TValue>.AsyncLazy"
  fullName: "com.azure.cosmos.implementation.caches.AsyncLazy<TValue>.AsyncLazy"
  package: "com.azure.cosmos.implementation.caches"
- uid: "TValue"
  spec.java:
  - uid: "TValue"
    name: "TValue"
    fullName: "TValue"
- uid: "reactor.core.publisher.Mono<TValue>"
  spec.java:
  - uid: "reactor.core.publisher.Mono"
    name: "Mono"
    fullName: "reactor.core.publisher.Mono"
  - name: "<"
    fullName: "<"
  - uid: "TValue"
    name: "TValue"
    fullName: "TValue"
  - name: ">"
    fullName: ">"
- uid: "com.azure.cosmos.implementation.caches.AsyncLazy.single*"
  name: "single"
  nameWithType: "AsyncLazy<TValue>.single"
  fullName: "com.azure.cosmos.implementation.caches.AsyncLazy<TValue>.single"
  package: "com.azure.cosmos.implementation.caches"
- uid: "boolean"
  spec.java:
  - uid: "boolean"
    name: "boolean"
    fullName: "boolean"
- uid: "com.azure.cosmos.implementation.caches.AsyncLazy.isSucceeded*"
  name: "isSucceeded"
  nameWithType: "AsyncLazy<TValue>.isSucceeded"
  fullName: "com.azure.cosmos.implementation.caches.AsyncLazy<TValue>.isSucceeded"
  package: "com.azure.cosmos.implementation.caches"
- uid: "com.azure.cosmos.implementation.caches.AsyncLazy.isFaulted*"
  name: "isFaulted"
  nameWithType: "AsyncLazy<TValue>.isFaulted"
  fullName: "com.azure.cosmos.implementation.caches.AsyncLazy<TValue>.isFaulted"
  package: "com.azure.cosmos.implementation.caches"
- uid: "java.lang.Object.notify()"
  name: "Object.notify()"
  nameWithType: "Object.notify()"
  fullName: "java.lang.Object.notify()"
- uid: "java.lang.Object.wait()"
  name: "Object.wait()"
  nameWithType: "Object.wait()"
  fullName: "java.lang.Object.wait()"
- uid: "java.lang.Object.finalize()"
  name: "Object.finalize()"
  nameWithType: "Object.finalize()"
  fullName: "java.lang.Object.finalize()"
- uid: "java.lang.Object.clone()"
  name: "Object.clone()"
  nameWithType: "Object.clone()"
  fullName: "java.lang.Object.clone()"
- uid: "java.lang.Object.notifyAll()"
  name: "Object.notifyAll()"
  nameWithType: "Object.notifyAll()"
  fullName: "java.lang.Object.notifyAll()"
- uid: "java.lang.Object.equals(java.lang.Object)"
  name: "Object.equals(Object)"
  nameWithType: "Object.equals(Object)"
  fullName: "java.lang.Object.equals(java.lang.Object)"
- uid: "java.lang.Object.getClass()"
  name: "Object.getClass()"
  nameWithType: "Object.getClass()"
  fullName: "java.lang.Object.getClass()"
- uid: "java.lang.Object.wait(long)"
  name: "Object.wait(long)"
  nameWithType: "Object.wait(long)"
  fullName: "java.lang.Object.wait(long)"
- uid: "java.lang.Object.hashCode()"
  name: "Object.hashCode()"
  nameWithType: "Object.hashCode()"
  fullName: "java.lang.Object.hashCode()"
- uid: "java.lang.Object.wait(long,int)"
  name: "Object.wait(long,int)"
  nameWithType: "Object.wait(long,int)"
  fullName: "java.lang.Object.wait(long,int)"
- uid: "java.lang.Object.toString()"
  name: "Object.toString()"
  nameWithType: "Object.toString()"
  fullName: "java.lang.Object.toString()"
- uid: "java.util.concurrent.Callable"
  name: "Callable"
  nameWithType: "Callable"
  fullName: "java.util.concurrent.Callable"
- uid: "reactor.core.publisher.Mono"
  name: "Mono"
  nameWithType: "Mono"
  fullName: "reactor.core.publisher.Mono"
