### YamlMime:JavaType
uid: "org.apache.hc.client5.http.auth.AuthScheme"
fullName: "org.apache.hc.client5.http.auth.AuthScheme"
name: "AuthScheme"
nameWithType: "AuthScheme"
summary: "This interface represents an abstract challenge-response oriented authentication scheme.\n\nAuthentication schemes can be either request or connection based. The former are expected to provide an authorization response with each request message while the latter is executed only once and applies to the underlying connection for its entire life span. Care must be taken when re-using connections authorized through a connection based authentication scheme and they may carry a particular security context and be authorized for a particular user identity. It is important that such schemes always provide the user identity they represent through the <xref uid=\"org.apache.hc.client5.http.auth.AuthScheme.getPrincipal()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#getPrincipal()\"></xref> method.\n\nAuthentication scheme are expected to transition through a series of standard phases or states.\n\nAuthentication scheme starts off its life cycle with no context and no specific state.\n\nThe <xref uid=\"org.apache.hc.client5.http.auth.AuthScheme.processChallenge(org.apache.hc.client5.http.auth.AuthChallenge,org.apache.hc.core5.http.protocol.HttpContext)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#processChallenge(AuthChallenge, HttpContext)\"></xref> method is called to process an authentication challenge received either from the target server or a proxy. The authentication scheme transitions to CHALLENGED state and is expected to validate the token passed to it as a parameter and initialize its internal state based on challenge details. Standard authentication schemes are expected to provide a realm attribute in the challenge. <xref uid=\"org.apache.hc.client5.http.auth.AuthScheme.getRealm()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#getRealm()\"></xref> can be called to obtain an identifier of the realm that requires authorization.\n\nOnce the challenge has been fully processed the <xref uid=\"#isResponseReady(HttpHost,\n CredentialsProvider, HttpContext)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#isResponseReady(HttpHost,\n CredentialsProvider, HttpContext)\"></xref> method to determine whether the scheme is capable of generating a authorization response based on its current state and it holds user credentials required to do so. If this method returns `false` the authentication is considered to be in FAILED state and no authorization response. Otherwise the scheme is considered to be in RESPONSE\\_READY state.\n\nOnce the scheme is ready to respond to the challenge the <xref uid=\"#generateAuthResponse(\n HttpHost, HttpRequest, HttpContext)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#generateAuthResponse(\n HttpHost, HttpRequest, HttpContext)\"></xref> method to generate a response token, which will be sent to the opposite endpoint in the subsequent request message.\n\nCertain non-standard schemes may involve multiple challenge / response exchanges to fully establish a shared context and complete the authentication process. Authentication schemes are required to return `true` <xref uid=\"org.apache.hc.client5.http.auth.AuthScheme.isChallengeComplete()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#isChallengeComplete()\"></xref> once the handshake is considered complete.\n\nThe authentication scheme is considered successfully completed and in SUCCESS state if the opposite endpoint accepts the request message containing the authorization response and responds with a message indicating no authentication failure . If the opposite endpoint sends status code 401 or 407 in response to a request message containing the terminal authorization response, the scheme is considered unsuccessful and in FAILED state."
syntax: "public interface AuthScheme"
methods:
- "org.apache.hc.client5.http.auth.AuthScheme.generateAuthResponse(org.apache.hc.core5.http.HttpHost,org.apache.hc.core5.http.HttpRequest,org.apache.hc.core5.http.protocol.HttpContext)"
- "org.apache.hc.client5.http.auth.AuthScheme.getName()"
- "org.apache.hc.client5.http.auth.AuthScheme.getPrincipal()"
- "org.apache.hc.client5.http.auth.AuthScheme.getRealm()"
- "org.apache.hc.client5.http.auth.AuthScheme.isChallengeComplete()"
- "org.apache.hc.client5.http.auth.AuthScheme.isConnectionBased()"
- "org.apache.hc.client5.http.auth.AuthScheme.isResponseReady(org.apache.hc.core5.http.HttpHost,org.apache.hc.client5.http.auth.CredentialsProvider,org.apache.hc.core5.http.protocol.HttpContext)"
- "org.apache.hc.client5.http.auth.AuthScheme.processChallenge(org.apache.hc.client5.http.auth.AuthChallenge,org.apache.hc.core5.http.protocol.HttpContext)"
type: "interface"
metadata: {}
package: "org.apache.hc.client5.http.auth"
artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
