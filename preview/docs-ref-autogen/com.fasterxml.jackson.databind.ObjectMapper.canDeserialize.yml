### YamlMime:JavaMember
uid: "com.fasterxml.jackson.databind.ObjectMapper.canDeserialize*"
fullName: "com.fasterxml.jackson.databind.ObjectMapper.canDeserialize"
name: "canDeserialize"
nameWithType: "ObjectMapper.canDeserialize"
members:
- uid: "com.fasterxml.jackson.databind.ObjectMapper.canDeserialize(com.fasterxml.jackson.databind.JavaType)"
  fullName: "com.fasterxml.jackson.databind.ObjectMapper.canDeserialize(JavaType type)"
  name: "canDeserialize(JavaType type)"
  nameWithType: "ObjectMapper.canDeserialize(JavaType type)"
  summary: "Method that can be called to check whether mapper thinks it could deserialize an Object of given type. Check is done by checking whether a registered deserializer can be found or built for the type; if not (either by no mapping being found, or through an `Exception` being thrown, false is returned.\n\n**NOTE**: in case an exception is thrown during course of trying co construct matching deserializer, it will be effectively swallowed. If you want access to that exception, call <xref uid=\"com.fasterxml.jackson.databind.ObjectMapper.canDeserialize(com.fasterxml.jackson.databind.JavaType,java.util.concurrent.atomic.AtomicReference&lt;java.lang.Throwable&gt;)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#canDeserialize(JavaType, AtomicReference)\"></xref> instead."
  parameters:
  - name: "type"
    type: "<xref href=\"com.fasterxml.jackson.databind.JavaType?alt=com.fasterxml.jackson.databind.JavaType&text=JavaType\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public boolean canDeserialize(JavaType type)"
  returns:
    description: "True if mapper can find a serializer for instances of\n  given class (potentially serializable), false otherwise (not\n  serializable)"
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.fasterxml.jackson.databind.ObjectMapper.canDeserialize(com.fasterxml.jackson.databind.JavaType,java.util.concurrent.atomic.AtomicReference<java.lang.Throwable>)"
  fullName: "com.fasterxml.jackson.databind.ObjectMapper.canDeserialize(JavaType type, AtomicReference<Throwable> cause)"
  name: "canDeserialize(JavaType type, AtomicReference<Throwable> cause)"
  nameWithType: "ObjectMapper.canDeserialize(JavaType type, AtomicReference<Throwable> cause)"
  summary: "Method similar to <xref uid=\"com.fasterxml.jackson.databind.ObjectMapper.canDeserialize(com.fasterxml.jackson.databind.JavaType)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#canDeserialize(JavaType)\"></xref> but that can return actual <xref uid=\"java.lang.Throwable\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Throwable\"></xref> that was thrown when trying to construct serializer: this may be useful in figuring out what the actual problem is."
  parameters:
  - name: "type"
    type: "<xref href=\"com.fasterxml.jackson.databind.JavaType?alt=com.fasterxml.jackson.databind.JavaType&text=JavaType\" data-throw-if-not-resolved=\"False\" />"
  - name: "cause"
    type: "<xref href=\"java.util.concurrent.atomic.AtomicReference?alt=java.util.concurrent.atomic.AtomicReference&text=AtomicReference\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Throwable?alt=java.lang.Throwable&text=Throwable\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public boolean canDeserialize(JavaType type, AtomicReference<Throwable> cause)"
  returns:
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
type: "method"
metadata: {}
package: "com.fasterxml.jackson.databind"
artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
