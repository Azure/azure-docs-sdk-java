### YamlMime:ManagedReference
items:
- uid: org.apache.commons.codec.language.bm.PhoneticEngine
  id: PhoneticEngine
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.apache.commons.codec.language.bm
  children:
  - org.apache.commons.codec.language.bm.PhoneticEngine.PhoneticEngine(org.apache.commons.codec.language.bm.NameType,org.apache.commons.codec.language.bm.RuleType,boolean)
  - org.apache.commons.codec.language.bm.PhoneticEngine.PhoneticEngine(org.apache.commons.codec.language.bm.NameType,org.apache.commons.codec.language.bm.RuleType,boolean,int)
  - org.apache.commons.codec.language.bm.PhoneticEngine.encode(java.lang.String)
  - org.apache.commons.codec.language.bm.PhoneticEngine.encode(java.lang.String,org.apache.commons.codec.language.bm.Languages.LanguageSet)
  - org.apache.commons.codec.language.bm.PhoneticEngine.getLang()
  - org.apache.commons.codec.language.bm.PhoneticEngine.getMaxPhonemes()
  - org.apache.commons.codec.language.bm.PhoneticEngine.getNameType()
  - org.apache.commons.codec.language.bm.PhoneticEngine.getRuleType()
  - org.apache.commons.codec.language.bm.PhoneticEngine.isConcat()
  langs:
  - java
  name: PhoneticEngine
  nameWithType: PhoneticEngine
  fullName: org.apache.commons.codec.language.bm.PhoneticEngine
  type: Class
  package: org.apache.commons.codec.language.bm
  summary: >-
    Converts words into potential phonetic representations.


    This is a two-stage process. Firstly, the word is converted into a phonetic representation that takes into account the likely source language. Next, this phonetic representation is converted into a pan-European 'average' representation, allowing comparison between different versions of essentially the same word from different languages.


    This class is intentionally immutable and thread-safe. If you wish to alter the settings for a PhoneticEngine, you must make a new one with the updated settings.


    Ported from phoneticengine.php
  syntax:
    content: public class PhoneticEngine
  inheritance:
  - java.lang.Object
  inheritedMembers:
  - java.lang.Object.clone()
  - java.lang.Object.equals(java.lang.Object)
  - java.lang.Object.finalize()
  - java.lang.Object.getClass()
  - java.lang.Object.hashCode()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.toString()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
- uid: org.apache.commons.codec.language.bm.PhoneticEngine.PhoneticEngine(org.apache.commons.codec.language.bm.NameType,org.apache.commons.codec.language.bm.RuleType,boolean)
  id: PhoneticEngine(org.apache.commons.codec.language.bm.NameType,org.apache.commons.codec.language.bm.RuleType,boolean)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.apache.commons.codec.language.bm.PhoneticEngine
  langs:
  - java
  name: PhoneticEngine(NameType nameType, RuleType ruleType, boolean concat)
  nameWithType: PhoneticEngine.PhoneticEngine(NameType nameType, RuleType ruleType, boolean concat)
  fullName: org.apache.commons.codec.language.bm.PhoneticEngine.PhoneticEngine(NameType nameType, RuleType ruleType, boolean concat)
  overload: org.apache.commons.codec.language.bm.PhoneticEngine.PhoneticEngine*
  type: Constructor
  package: org.apache.commons.codec.language.bm
  summary: Generates a new, fully-configured phonetic engine.
  syntax:
    content: public PhoneticEngine(NameType nameType, RuleType ruleType, boolean concat)
    parameters:
    - id: nameType
      type: org.apache.commons.codec.language.bm.NameType
      description: the type of names it will use
    - id: ruleType
      type: org.apache.commons.codec.language.bm.RuleType
      description: the type of rules it will apply
    - id: concat
      type: boolean
      description: if it will concatenate multiple encodings
- uid: org.apache.commons.codec.language.bm.PhoneticEngine.PhoneticEngine(org.apache.commons.codec.language.bm.NameType,org.apache.commons.codec.language.bm.RuleType,boolean,int)
  id: PhoneticEngine(org.apache.commons.codec.language.bm.NameType,org.apache.commons.codec.language.bm.RuleType,boolean,int)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.apache.commons.codec.language.bm.PhoneticEngine
  langs:
  - java
  name: PhoneticEngine(NameType nameType, RuleType ruleType, boolean concat, int maxPhonemes)
  nameWithType: PhoneticEngine.PhoneticEngine(NameType nameType, RuleType ruleType, boolean concat, int maxPhonemes)
  fullName: org.apache.commons.codec.language.bm.PhoneticEngine.PhoneticEngine(NameType nameType, RuleType ruleType, boolean concat, int maxPhonemes)
  overload: org.apache.commons.codec.language.bm.PhoneticEngine.PhoneticEngine*
  type: Constructor
  package: org.apache.commons.codec.language.bm
  summary: Generates a new, fully-configured phonetic engine.
  syntax:
    content: public PhoneticEngine(NameType nameType, RuleType ruleType, boolean concat, int maxPhonemes)
    parameters:
    - id: nameType
      type: org.apache.commons.codec.language.bm.NameType
      description: the type of names it will use
    - id: ruleType
      type: org.apache.commons.codec.language.bm.RuleType
      description: the type of rules it will apply
    - id: concat
      type: boolean
      description: if it will concatenate multiple encodings
    - id: maxPhonemes
      type: int
      description: the maximum number of phonemes that will be handled
- uid: org.apache.commons.codec.language.bm.PhoneticEngine.encode(java.lang.String)
  id: encode(java.lang.String)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.apache.commons.codec.language.bm.PhoneticEngine
  langs:
  - java
  name: encode(String input)
  nameWithType: PhoneticEngine.encode(String input)
  fullName: org.apache.commons.codec.language.bm.PhoneticEngine.encode(String input)
  overload: org.apache.commons.codec.language.bm.PhoneticEngine.encode*
  type: Method
  package: org.apache.commons.codec.language.bm
  summary: Encodes a string to its phonetic representation.
  syntax:
    content: public String encode(String input)
    parameters:
    - id: input
      type: java.lang.String
      description: the String to encode
    return:
      type: java.lang.String
      description: the encoding of the input
- uid: org.apache.commons.codec.language.bm.PhoneticEngine.encode(java.lang.String,org.apache.commons.codec.language.bm.Languages.LanguageSet)
  id: encode(java.lang.String,org.apache.commons.codec.language.bm.Languages.LanguageSet)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.apache.commons.codec.language.bm.PhoneticEngine
  langs:
  - java
  name: encode(String input, Languages.LanguageSet languageSet)
  nameWithType: PhoneticEngine.encode(String input, Languages.LanguageSet languageSet)
  fullName: org.apache.commons.codec.language.bm.PhoneticEngine.encode(String input, Languages.LanguageSet languageSet)
  overload: org.apache.commons.codec.language.bm.PhoneticEngine.encode*
  type: Method
  package: org.apache.commons.codec.language.bm
  summary: Encodes an input string into an output phonetic representation, given a set of possible origin languages.
  syntax:
    content: public String encode(String input, Languages.LanguageSet languageSet)
    parameters:
    - id: input
      type: java.lang.String
      description: String to phoneticise; a String with dashes or spaces separating each word
    - id: languageSet
      type: org.apache.commons.codec.language.bm.Languages.LanguageSet
      description: set of possible origin languages
    return:
      type: java.lang.String
      description: >-
        a phonetic representation of the input; a String containing '-'-separated phonetic representations of the
                 input
- uid: org.apache.commons.codec.language.bm.PhoneticEngine.getLang()
  id: getLang()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.apache.commons.codec.language.bm.PhoneticEngine
  langs:
  - java
  name: getLang()
  nameWithType: PhoneticEngine.getLang()
  fullName: org.apache.commons.codec.language.bm.PhoneticEngine.getLang()
  overload: org.apache.commons.codec.language.bm.PhoneticEngine.getLang*
  type: Method
  package: org.apache.commons.codec.language.bm
  summary: Gets the Lang language guessing rules being used.
  syntax:
    content: public Lang getLang()
    return:
      type: org.apache.commons.codec.language.bm.Lang
      description: the Lang in use
- uid: org.apache.commons.codec.language.bm.PhoneticEngine.getMaxPhonemes()
  id: getMaxPhonemes()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.apache.commons.codec.language.bm.PhoneticEngine
  langs:
  - java
  name: getMaxPhonemes()
  nameWithType: PhoneticEngine.getMaxPhonemes()
  fullName: org.apache.commons.codec.language.bm.PhoneticEngine.getMaxPhonemes()
  overload: org.apache.commons.codec.language.bm.PhoneticEngine.getMaxPhonemes*
  type: Method
  package: org.apache.commons.codec.language.bm
  summary: Gets the maximum number of phonemes the engine will calculate for a given input.
  syntax:
    content: public int getMaxPhonemes()
    return:
      type: int
      description: the maximum number of phonemes
- uid: org.apache.commons.codec.language.bm.PhoneticEngine.getNameType()
  id: getNameType()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.apache.commons.codec.language.bm.PhoneticEngine
  langs:
  - java
  name: getNameType()
  nameWithType: PhoneticEngine.getNameType()
  fullName: org.apache.commons.codec.language.bm.PhoneticEngine.getNameType()
  overload: org.apache.commons.codec.language.bm.PhoneticEngine.getNameType*
  type: Method
  package: org.apache.commons.codec.language.bm
  summary: Gets the NameType being used.
  syntax:
    content: public NameType getNameType()
    return:
      type: org.apache.commons.codec.language.bm.NameType
      description: the NameType in use
- uid: org.apache.commons.codec.language.bm.PhoneticEngine.getRuleType()
  id: getRuleType()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.apache.commons.codec.language.bm.PhoneticEngine
  langs:
  - java
  name: getRuleType()
  nameWithType: PhoneticEngine.getRuleType()
  fullName: org.apache.commons.codec.language.bm.PhoneticEngine.getRuleType()
  overload: org.apache.commons.codec.language.bm.PhoneticEngine.getRuleType*
  type: Method
  package: org.apache.commons.codec.language.bm
  summary: Gets the RuleType being used.
  syntax:
    content: public RuleType getRuleType()
    return:
      type: org.apache.commons.codec.language.bm.RuleType
      description: the RuleType in use
- uid: org.apache.commons.codec.language.bm.PhoneticEngine.isConcat()
  id: isConcat()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.apache.commons.codec.language.bm.PhoneticEngine
  langs:
  - java
  name: isConcat()
  nameWithType: PhoneticEngine.isConcat()
  fullName: org.apache.commons.codec.language.bm.PhoneticEngine.isConcat()
  overload: org.apache.commons.codec.language.bm.PhoneticEngine.isConcat*
  type: Method
  package: org.apache.commons.codec.language.bm
  summary: Gets if multiple phonetic encodings are concatenated or if just the first one is kept.
  syntax:
    content: public boolean isConcat()
    return:
      type: boolean
      description: true if multiple phonetic encodings are returned, false if just the first is
references:
- uid: org.apache.commons.codec.language.bm.NameType
  name: NameType
  nameWithType: NameType
  fullName: org.apache.commons.codec.language.bm.NameType
- uid: org.apache.commons.codec.language.bm.RuleType
  name: RuleType
  nameWithType: RuleType
  fullName: org.apache.commons.codec.language.bm.RuleType
- uid: boolean
  spec.java:
  - uid: boolean
    name: boolean
    fullName: boolean
- uid: org.apache.commons.codec.language.bm.PhoneticEngine.PhoneticEngine*
  name: PhoneticEngine
  nameWithType: PhoneticEngine.PhoneticEngine
  fullName: org.apache.commons.codec.language.bm.PhoneticEngine.PhoneticEngine
  package: org.apache.commons.codec.language.bm
- uid: int
  spec.java:
  - uid: int
    name: int
    fullName: int
- uid: java.lang.String
  spec.java:
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
- uid: org.apache.commons.codec.language.bm.PhoneticEngine.encode*
  name: encode
  nameWithType: PhoneticEngine.encode
  fullName: org.apache.commons.codec.language.bm.PhoneticEngine.encode
  package: org.apache.commons.codec.language.bm
- uid: org.apache.commons.codec.language.bm.Languages.LanguageSet
  name: Languages.LanguageSet
  nameWithType: Languages.LanguageSet
  fullName: org.apache.commons.codec.language.bm.Languages.LanguageSet
- uid: org.apache.commons.codec.language.bm.Lang
  name: Lang
  nameWithType: Lang
  fullName: org.apache.commons.codec.language.bm.Lang
- uid: org.apache.commons.codec.language.bm.PhoneticEngine.getLang*
  name: getLang
  nameWithType: PhoneticEngine.getLang
  fullName: org.apache.commons.codec.language.bm.PhoneticEngine.getLang
  package: org.apache.commons.codec.language.bm
- uid: org.apache.commons.codec.language.bm.PhoneticEngine.getNameType*
  name: getNameType
  nameWithType: PhoneticEngine.getNameType
  fullName: org.apache.commons.codec.language.bm.PhoneticEngine.getNameType
  package: org.apache.commons.codec.language.bm
- uid: org.apache.commons.codec.language.bm.PhoneticEngine.getRuleType*
  name: getRuleType
  nameWithType: PhoneticEngine.getRuleType
  fullName: org.apache.commons.codec.language.bm.PhoneticEngine.getRuleType
  package: org.apache.commons.codec.language.bm
- uid: org.apache.commons.codec.language.bm.PhoneticEngine.isConcat*
  name: isConcat
  nameWithType: PhoneticEngine.isConcat
  fullName: org.apache.commons.codec.language.bm.PhoneticEngine.isConcat
  package: org.apache.commons.codec.language.bm
- uid: org.apache.commons.codec.language.bm.PhoneticEngine.getMaxPhonemes*
  name: getMaxPhonemes
  nameWithType: PhoneticEngine.getMaxPhonemes
  fullName: org.apache.commons.codec.language.bm.PhoneticEngine.getMaxPhonemes
  package: org.apache.commons.codec.language.bm
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: java.lang.Object.finalize()
  name: Object.finalize()
  nameWithType: Object.finalize()
  fullName: java.lang.Object.finalize()
- uid: java.lang.Object.clone()
  name: Object.clone()
  nameWithType: Object.clone()
  fullName: java.lang.Object.clone()
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: java.lang.Object.equals(java.lang.Object)
  name: Object.equals(Object)
  nameWithType: Object.equals(Object)
  fullName: java.lang.Object.equals(java.lang.Object)
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.lang.Object.hashCode()
  name: Object.hashCode()
  nameWithType: Object.hashCode()
  fullName: java.lang.Object.hashCode()
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: java.lang.Object.toString()
  name: Object.toString()
  nameWithType: Object.toString()
  fullName: java.lang.Object.toString()
