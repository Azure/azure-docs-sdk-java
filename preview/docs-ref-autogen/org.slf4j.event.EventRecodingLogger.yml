### YamlMime:ManagedReference
items:
- uid: org.slf4j.event.EventRecodingLogger
  id: EventRecodingLogger
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.slf4j.event
  children:
  - org.slf4j.event.EventRecodingLogger.EventRecodingLogger(org.slf4j.helpers.SubstituteLogger,java.util.Queue<org.slf4j.event.SubstituteLoggingEvent>)
  - org.slf4j.event.EventRecodingLogger.debug(java.lang.String)
  - org.slf4j.event.EventRecodingLogger.debug(java.lang.String,java.lang.Object)
  - org.slf4j.event.EventRecodingLogger.debug(java.lang.String,java.lang.Object,java.lang.Object)
  - org.slf4j.event.EventRecodingLogger.debug(java.lang.String,java.lang.Object...)
  - org.slf4j.event.EventRecodingLogger.debug(java.lang.String,java.lang.Throwable)
  - org.slf4j.event.EventRecodingLogger.debug(org.slf4j.Marker,java.lang.String)
  - org.slf4j.event.EventRecodingLogger.debug(org.slf4j.Marker,java.lang.String,java.lang.Object)
  - org.slf4j.event.EventRecodingLogger.debug(org.slf4j.Marker,java.lang.String,java.lang.Object,java.lang.Object)
  - org.slf4j.event.EventRecodingLogger.debug(org.slf4j.Marker,java.lang.String,java.lang.Object...)
  - org.slf4j.event.EventRecodingLogger.debug(org.slf4j.Marker,java.lang.String,java.lang.Throwable)
  - org.slf4j.event.EventRecodingLogger.error(java.lang.String)
  - org.slf4j.event.EventRecodingLogger.error(java.lang.String,java.lang.Object)
  - org.slf4j.event.EventRecodingLogger.error(java.lang.String,java.lang.Object,java.lang.Object)
  - org.slf4j.event.EventRecodingLogger.error(java.lang.String,java.lang.Object...)
  - org.slf4j.event.EventRecodingLogger.error(java.lang.String,java.lang.Throwable)
  - org.slf4j.event.EventRecodingLogger.error(org.slf4j.Marker,java.lang.String)
  - org.slf4j.event.EventRecodingLogger.error(org.slf4j.Marker,java.lang.String,java.lang.Object)
  - org.slf4j.event.EventRecodingLogger.error(org.slf4j.Marker,java.lang.String,java.lang.Object,java.lang.Object)
  - org.slf4j.event.EventRecodingLogger.error(org.slf4j.Marker,java.lang.String,java.lang.Object...)
  - org.slf4j.event.EventRecodingLogger.error(org.slf4j.Marker,java.lang.String,java.lang.Throwable)
  - org.slf4j.event.EventRecodingLogger.getName()
  - org.slf4j.event.EventRecodingLogger.info(java.lang.String)
  - org.slf4j.event.EventRecodingLogger.info(java.lang.String,java.lang.Object)
  - org.slf4j.event.EventRecodingLogger.info(java.lang.String,java.lang.Object,java.lang.Object)
  - org.slf4j.event.EventRecodingLogger.info(java.lang.String,java.lang.Object...)
  - org.slf4j.event.EventRecodingLogger.info(java.lang.String,java.lang.Throwable)
  - org.slf4j.event.EventRecodingLogger.info(org.slf4j.Marker,java.lang.String)
  - org.slf4j.event.EventRecodingLogger.info(org.slf4j.Marker,java.lang.String,java.lang.Object)
  - org.slf4j.event.EventRecodingLogger.info(org.slf4j.Marker,java.lang.String,java.lang.Object,java.lang.Object)
  - org.slf4j.event.EventRecodingLogger.info(org.slf4j.Marker,java.lang.String,java.lang.Object...)
  - org.slf4j.event.EventRecodingLogger.info(org.slf4j.Marker,java.lang.String,java.lang.Throwable)
  - org.slf4j.event.EventRecodingLogger.isDebugEnabled()
  - org.slf4j.event.EventRecodingLogger.isDebugEnabled(org.slf4j.Marker)
  - org.slf4j.event.EventRecodingLogger.isErrorEnabled()
  - org.slf4j.event.EventRecodingLogger.isErrorEnabled(org.slf4j.Marker)
  - org.slf4j.event.EventRecodingLogger.isInfoEnabled()
  - org.slf4j.event.EventRecodingLogger.isInfoEnabled(org.slf4j.Marker)
  - org.slf4j.event.EventRecodingLogger.isTraceEnabled()
  - org.slf4j.event.EventRecodingLogger.isTraceEnabled(org.slf4j.Marker)
  - org.slf4j.event.EventRecodingLogger.isWarnEnabled()
  - org.slf4j.event.EventRecodingLogger.isWarnEnabled(org.slf4j.Marker)
  - org.slf4j.event.EventRecodingLogger.trace(java.lang.String)
  - org.slf4j.event.EventRecodingLogger.trace(java.lang.String,java.lang.Object)
  - org.slf4j.event.EventRecodingLogger.trace(java.lang.String,java.lang.Object,java.lang.Object)
  - org.slf4j.event.EventRecodingLogger.trace(java.lang.String,java.lang.Object...)
  - org.slf4j.event.EventRecodingLogger.trace(java.lang.String,java.lang.Throwable)
  - org.slf4j.event.EventRecodingLogger.trace(org.slf4j.Marker,java.lang.String)
  - org.slf4j.event.EventRecodingLogger.trace(org.slf4j.Marker,java.lang.String,java.lang.Object)
  - org.slf4j.event.EventRecodingLogger.trace(org.slf4j.Marker,java.lang.String,java.lang.Object,java.lang.Object)
  - org.slf4j.event.EventRecodingLogger.trace(org.slf4j.Marker,java.lang.String,java.lang.Object...)
  - org.slf4j.event.EventRecodingLogger.trace(org.slf4j.Marker,java.lang.String,java.lang.Throwable)
  - org.slf4j.event.EventRecodingLogger.warn(java.lang.String)
  - org.slf4j.event.EventRecodingLogger.warn(java.lang.String,java.lang.Object)
  - org.slf4j.event.EventRecodingLogger.warn(java.lang.String,java.lang.Object,java.lang.Object)
  - org.slf4j.event.EventRecodingLogger.warn(java.lang.String,java.lang.Object...)
  - org.slf4j.event.EventRecodingLogger.warn(java.lang.String,java.lang.Throwable)
  - org.slf4j.event.EventRecodingLogger.warn(org.slf4j.Marker,java.lang.String)
  - org.slf4j.event.EventRecodingLogger.warn(org.slf4j.Marker,java.lang.String,java.lang.Object)
  - org.slf4j.event.EventRecodingLogger.warn(org.slf4j.Marker,java.lang.String,java.lang.Object,java.lang.Object)
  - org.slf4j.event.EventRecodingLogger.warn(org.slf4j.Marker,java.lang.String,java.lang.Object...)
  - org.slf4j.event.EventRecodingLogger.warn(org.slf4j.Marker,java.lang.String,java.lang.Throwable)
  langs:
  - java
  name: EventRecodingLogger
  nameWithType: EventRecodingLogger
  fullName: org.slf4j.event.EventRecodingLogger
  type: Class
  package: org.slf4j.event
  syntax:
    content: public class EventRecodingLogger implements Logger
  inheritance:
  - java.lang.Object
  implements:
  - org.slf4j.Logger
  inheritedMembers:
  - java.lang.Object.clone()
  - java.lang.Object.equals(java.lang.Object)
  - java.lang.Object.finalize()
  - java.lang.Object.getClass()
  - java.lang.Object.hashCode()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.toString()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
- uid: org.slf4j.event.EventRecodingLogger.EventRecodingLogger(org.slf4j.helpers.SubstituteLogger,java.util.Queue<org.slf4j.event.SubstituteLoggingEvent>)
  id: EventRecodingLogger(org.slf4j.helpers.SubstituteLogger,java.util.Queue<org.slf4j.event.SubstituteLoggingEvent>)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.slf4j.event.EventRecodingLogger
  langs:
  - java
  name: EventRecodingLogger(SubstituteLogger logger, Queue<SubstituteLoggingEvent> eventQueue)
  nameWithType: EventRecodingLogger.EventRecodingLogger(SubstituteLogger logger, Queue<SubstituteLoggingEvent> eventQueue)
  fullName: org.slf4j.event.EventRecodingLogger.EventRecodingLogger(SubstituteLogger logger, Queue<SubstituteLoggingEvent> eventQueue)
  overload: org.slf4j.event.EventRecodingLogger.EventRecodingLogger*
  type: Constructor
  package: org.slf4j.event
  syntax:
    content: public EventRecodingLogger(SubstituteLogger logger, Queue<SubstituteLoggingEvent> eventQueue)
    parameters:
    - id: logger
      type: org.slf4j.helpers.SubstituteLogger
    - id: eventQueue
      type: java.util.Queue<org.slf4j.event.SubstituteLoggingEvent>
- uid: org.slf4j.event.EventRecodingLogger.debug(java.lang.String)
  id: debug(java.lang.String)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.slf4j.event.EventRecodingLogger
  langs:
  - java
  name: debug(String msg)
  nameWithType: EventRecodingLogger.debug(String msg)
  fullName: org.slf4j.event.EventRecodingLogger.debug(String msg)
  overload: org.slf4j.event.EventRecodingLogger.debug*
  type: Method
  package: org.slf4j.event
  summary: Log a message at the DEBUG level.
  syntax:
    content: public void debug(String msg)
    parameters:
    - id: msg
      type: java.lang.String
- uid: org.slf4j.event.EventRecodingLogger.debug(java.lang.String,java.lang.Object)
  id: debug(java.lang.String,java.lang.Object)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.slf4j.event.EventRecodingLogger
  langs:
  - java
  name: debug(String format, Object arg)
  nameWithType: EventRecodingLogger.debug(String format, Object arg)
  fullName: org.slf4j.event.EventRecodingLogger.debug(String format, Object arg)
  overload: org.slf4j.event.EventRecodingLogger.debug*
  type: Method
  package: org.slf4j.event
  summary: >-
    Log a message at the DEBUG level according to the specified format and argument.


    This form avoids superfluous object creation when the logger is disabled for the DEBUG level.
  syntax:
    content: public void debug(String format, Object arg)
    parameters:
    - id: format
      type: java.lang.String
    - id: arg
      type: java.lang.Object
- uid: org.slf4j.event.EventRecodingLogger.debug(java.lang.String,java.lang.Object,java.lang.Object)
  id: debug(java.lang.String,java.lang.Object,java.lang.Object)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.slf4j.event.EventRecodingLogger
  langs:
  - java
  name: debug(String format, Object arg1, Object arg2)
  nameWithType: EventRecodingLogger.debug(String format, Object arg1, Object arg2)
  fullName: org.slf4j.event.EventRecodingLogger.debug(String format, Object arg1, Object arg2)
  overload: org.slf4j.event.EventRecodingLogger.debug*
  type: Method
  package: org.slf4j.event
  summary: >-
    Log a message at the DEBUG level according to the specified format and arguments.


    This form avoids superfluous object creation when the logger is disabled for the DEBUG level.
  syntax:
    content: public void debug(String format, Object arg1, Object arg2)
    parameters:
    - id: format
      type: java.lang.String
    - id: arg1
      type: java.lang.Object
    - id: arg2
      type: java.lang.Object
- uid: org.slf4j.event.EventRecodingLogger.debug(java.lang.String,java.lang.Object...)
  id: debug(java.lang.String,java.lang.Object...)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.slf4j.event.EventRecodingLogger
  langs:
  - java
  name: debug(String format, Object[] arguments)
  nameWithType: EventRecodingLogger.debug(String format, Object[] arguments)
  fullName: org.slf4j.event.EventRecodingLogger.debug(String format, Object[] arguments)
  overload: org.slf4j.event.EventRecodingLogger.debug*
  type: Method
  package: org.slf4j.event
  summary: >-
    Log a message at the DEBUG level according to the specified format and arguments.


    This form avoids superfluous string concatenation when the logger is disabled for the DEBUG level. However, this variant incurs the hidden (and relatively small) cost of creating an `Object[]` before invoking the method, even if this logger is disabled for DEBUG. The variants taking <xref uid="org.slf4j.event.EventRecodingLogger.debug(java.lang.String,java.lang.Object)" data-throw-if-not-resolved="false">one</xref> and <xref uid="org.slf4j.event.EventRecodingLogger.debug(java.lang.String,java.lang.Object,java.lang.Object)" data-throw-if-not-resolved="false">two</xref> arguments exist solely in order to avoid this hidden cost.
  syntax:
    content: public void debug(String format, Object[] arguments)
    parameters:
    - id: format
      type: java.lang.String
    - id: arguments
      type: java.lang.Object[]
- uid: org.slf4j.event.EventRecodingLogger.debug(java.lang.String,java.lang.Throwable)
  id: debug(java.lang.String,java.lang.Throwable)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.slf4j.event.EventRecodingLogger
  langs:
  - java
  name: debug(String msg, Throwable t)
  nameWithType: EventRecodingLogger.debug(String msg, Throwable t)
  fullName: org.slf4j.event.EventRecodingLogger.debug(String msg, Throwable t)
  overload: org.slf4j.event.EventRecodingLogger.debug*
  type: Method
  package: org.slf4j.event
  summary: Log an exception (throwable) at the DEBUG level with an accompanying message.
  syntax:
    content: public void debug(String msg, Throwable t)
    parameters:
    - id: msg
      type: java.lang.String
    - id: t
      type: java.lang.Throwable
- uid: org.slf4j.event.EventRecodingLogger.debug(org.slf4j.Marker,java.lang.String)
  id: debug(org.slf4j.Marker,java.lang.String)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.slf4j.event.EventRecodingLogger
  langs:
  - java
  name: debug(Marker marker, String msg)
  nameWithType: EventRecodingLogger.debug(Marker marker, String msg)
  fullName: org.slf4j.event.EventRecodingLogger.debug(Marker marker, String msg)
  overload: org.slf4j.event.EventRecodingLogger.debug*
  type: Method
  package: org.slf4j.event
  summary: Log a message with the specific Marker at the DEBUG level.
  syntax:
    content: public void debug(Marker marker, String msg)
    parameters:
    - id: marker
      type: org.slf4j.Marker
    - id: msg
      type: java.lang.String
- uid: org.slf4j.event.EventRecodingLogger.debug(org.slf4j.Marker,java.lang.String,java.lang.Object)
  id: debug(org.slf4j.Marker,java.lang.String,java.lang.Object)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.slf4j.event.EventRecodingLogger
  langs:
  - java
  name: debug(Marker marker, String format, Object arg)
  nameWithType: EventRecodingLogger.debug(Marker marker, String format, Object arg)
  fullName: org.slf4j.event.EventRecodingLogger.debug(Marker marker, String format, Object arg)
  overload: org.slf4j.event.EventRecodingLogger.debug*
  type: Method
  package: org.slf4j.event
  summary: This method is similar to <xref uid="org.slf4j.event.EventRecodingLogger.debug(java.lang.String,java.lang.Object)" data-throw-if-not-resolved="false">#debug(String, Object)</xref> method except that the marker data is also taken into consideration.
  syntax:
    content: public void debug(Marker marker, String format, Object arg)
    parameters:
    - id: marker
      type: org.slf4j.Marker
    - id: format
      type: java.lang.String
    - id: arg
      type: java.lang.Object
- uid: org.slf4j.event.EventRecodingLogger.debug(org.slf4j.Marker,java.lang.String,java.lang.Object,java.lang.Object)
  id: debug(org.slf4j.Marker,java.lang.String,java.lang.Object,java.lang.Object)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.slf4j.event.EventRecodingLogger
  langs:
  - java
  name: debug(Marker marker, String format, Object arg1, Object arg2)
  nameWithType: EventRecodingLogger.debug(Marker marker, String format, Object arg1, Object arg2)
  fullName: org.slf4j.event.EventRecodingLogger.debug(Marker marker, String format, Object arg1, Object arg2)
  overload: org.slf4j.event.EventRecodingLogger.debug*
  type: Method
  package: org.slf4j.event
  summary: This method is similar to <xref uid="org.slf4j.event.EventRecodingLogger.debug(java.lang.String,java.lang.Object,java.lang.Object)" data-throw-if-not-resolved="false">#debug(String, Object, Object)</xref> method except that the marker data is also taken into consideration.
  syntax:
    content: public void debug(Marker marker, String format, Object arg1, Object arg2)
    parameters:
    - id: marker
      type: org.slf4j.Marker
    - id: format
      type: java.lang.String
    - id: arg1
      type: java.lang.Object
    - id: arg2
      type: java.lang.Object
- uid: org.slf4j.event.EventRecodingLogger.debug(org.slf4j.Marker,java.lang.String,java.lang.Object...)
  id: debug(org.slf4j.Marker,java.lang.String,java.lang.Object...)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.slf4j.event.EventRecodingLogger
  langs:
  - java
  name: debug(Marker marker, String format, Object[] arguments)
  nameWithType: EventRecodingLogger.debug(Marker marker, String format, Object[] arguments)
  fullName: org.slf4j.event.EventRecodingLogger.debug(Marker marker, String format, Object[] arguments)
  overload: org.slf4j.event.EventRecodingLogger.debug*
  type: Method
  package: org.slf4j.event
  summary: This method is similar to <xref uid="org.slf4j.event.EventRecodingLogger.debug*" data-throw-if-not-resolved="false">#debug(String, Object...)</xref> method except that the marker data is also taken into consideration.
  syntax:
    content: public void debug(Marker marker, String format, Object[] arguments)
    parameters:
    - id: marker
      type: org.slf4j.Marker
    - id: format
      type: java.lang.String
    - id: arguments
      type: java.lang.Object[]
- uid: org.slf4j.event.EventRecodingLogger.debug(org.slf4j.Marker,java.lang.String,java.lang.Throwable)
  id: debug(org.slf4j.Marker,java.lang.String,java.lang.Throwable)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.slf4j.event.EventRecodingLogger
  langs:
  - java
  name: debug(Marker marker, String msg, Throwable t)
  nameWithType: EventRecodingLogger.debug(Marker marker, String msg, Throwable t)
  fullName: org.slf4j.event.EventRecodingLogger.debug(Marker marker, String msg, Throwable t)
  overload: org.slf4j.event.EventRecodingLogger.debug*
  type: Method
  package: org.slf4j.event
  summary: This method is similar to <xref uid="org.slf4j.event.EventRecodingLogger.debug(java.lang.String,java.lang.Throwable)" data-throw-if-not-resolved="false">#debug(String, Throwable)</xref> method except that the marker data is also taken into consideration.
  syntax:
    content: public void debug(Marker marker, String msg, Throwable t)
    parameters:
    - id: marker
      type: org.slf4j.Marker
    - id: msg
      type: java.lang.String
    - id: t
      type: java.lang.Throwable
- uid: org.slf4j.event.EventRecodingLogger.error(java.lang.String)
  id: error(java.lang.String)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.slf4j.event.EventRecodingLogger
  langs:
  - java
  name: error(String msg)
  nameWithType: EventRecodingLogger.error(String msg)
  fullName: org.slf4j.event.EventRecodingLogger.error(String msg)
  overload: org.slf4j.event.EventRecodingLogger.error*
  type: Method
  package: org.slf4j.event
  summary: Log a message at the ERROR level.
  syntax:
    content: public void error(String msg)
    parameters:
    - id: msg
      type: java.lang.String
- uid: org.slf4j.event.EventRecodingLogger.error(java.lang.String,java.lang.Object)
  id: error(java.lang.String,java.lang.Object)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.slf4j.event.EventRecodingLogger
  langs:
  - java
  name: error(String format, Object arg)
  nameWithType: EventRecodingLogger.error(String format, Object arg)
  fullName: org.slf4j.event.EventRecodingLogger.error(String format, Object arg)
  overload: org.slf4j.event.EventRecodingLogger.error*
  type: Method
  package: org.slf4j.event
  summary: >-
    Log a message at the ERROR level according to the specified format and argument.


    This form avoids superfluous object creation when the logger is disabled for the ERROR level.
  syntax:
    content: public void error(String format, Object arg)
    parameters:
    - id: format
      type: java.lang.String
    - id: arg
      type: java.lang.Object
- uid: org.slf4j.event.EventRecodingLogger.error(java.lang.String,java.lang.Object,java.lang.Object)
  id: error(java.lang.String,java.lang.Object,java.lang.Object)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.slf4j.event.EventRecodingLogger
  langs:
  - java
  name: error(String format, Object arg1, Object arg2)
  nameWithType: EventRecodingLogger.error(String format, Object arg1, Object arg2)
  fullName: org.slf4j.event.EventRecodingLogger.error(String format, Object arg1, Object arg2)
  overload: org.slf4j.event.EventRecodingLogger.error*
  type: Method
  package: org.slf4j.event
  summary: >-
    Log a message at the ERROR level according to the specified format and arguments.


    This form avoids superfluous object creation when the logger is disabled for the ERROR level.
  syntax:
    content: public void error(String format, Object arg1, Object arg2)
    parameters:
    - id: format
      type: java.lang.String
    - id: arg1
      type: java.lang.Object
    - id: arg2
      type: java.lang.Object
- uid: org.slf4j.event.EventRecodingLogger.error(java.lang.String,java.lang.Object...)
  id: error(java.lang.String,java.lang.Object...)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.slf4j.event.EventRecodingLogger
  langs:
  - java
  name: error(String format, Object[] arguments)
  nameWithType: EventRecodingLogger.error(String format, Object[] arguments)
  fullName: org.slf4j.event.EventRecodingLogger.error(String format, Object[] arguments)
  overload: org.slf4j.event.EventRecodingLogger.error*
  type: Method
  package: org.slf4j.event
  summary: >-
    Log a message at the ERROR level according to the specified format and arguments.


    This form avoids superfluous string concatenation when the logger is disabled for the ERROR level. However, this variant incurs the hidden (and relatively small) cost of creating an `Object[]` before invoking the method, even if this logger is disabled for ERROR. The variants taking <xref uid="org.slf4j.event.EventRecodingLogger.error(java.lang.String,java.lang.Object)" data-throw-if-not-resolved="false">one</xref> and <xref uid="org.slf4j.event.EventRecodingLogger.error(java.lang.String,java.lang.Object,java.lang.Object)" data-throw-if-not-resolved="false">two</xref> arguments exist solely in order to avoid this hidden cost.
  syntax:
    content: public void error(String format, Object[] arguments)
    parameters:
    - id: format
      type: java.lang.String
    - id: arguments
      type: java.lang.Object[]
- uid: org.slf4j.event.EventRecodingLogger.error(java.lang.String,java.lang.Throwable)
  id: error(java.lang.String,java.lang.Throwable)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.slf4j.event.EventRecodingLogger
  langs:
  - java
  name: error(String msg, Throwable t)
  nameWithType: EventRecodingLogger.error(String msg, Throwable t)
  fullName: org.slf4j.event.EventRecodingLogger.error(String msg, Throwable t)
  overload: org.slf4j.event.EventRecodingLogger.error*
  type: Method
  package: org.slf4j.event
  summary: Log an exception (throwable) at the ERROR level with an accompanying message.
  syntax:
    content: public void error(String msg, Throwable t)
    parameters:
    - id: msg
      type: java.lang.String
    - id: t
      type: java.lang.Throwable
- uid: org.slf4j.event.EventRecodingLogger.error(org.slf4j.Marker,java.lang.String)
  id: error(org.slf4j.Marker,java.lang.String)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.slf4j.event.EventRecodingLogger
  langs:
  - java
  name: error(Marker marker, String msg)
  nameWithType: EventRecodingLogger.error(Marker marker, String msg)
  fullName: org.slf4j.event.EventRecodingLogger.error(Marker marker, String msg)
  overload: org.slf4j.event.EventRecodingLogger.error*
  type: Method
  package: org.slf4j.event
  summary: Log a message with the specific Marker at the ERROR level.
  syntax:
    content: public void error(Marker marker, String msg)
    parameters:
    - id: marker
      type: org.slf4j.Marker
    - id: msg
      type: java.lang.String
- uid: org.slf4j.event.EventRecodingLogger.error(org.slf4j.Marker,java.lang.String,java.lang.Object)
  id: error(org.slf4j.Marker,java.lang.String,java.lang.Object)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.slf4j.event.EventRecodingLogger
  langs:
  - java
  name: error(Marker marker, String format, Object arg)
  nameWithType: EventRecodingLogger.error(Marker marker, String format, Object arg)
  fullName: org.slf4j.event.EventRecodingLogger.error(Marker marker, String format, Object arg)
  overload: org.slf4j.event.EventRecodingLogger.error*
  type: Method
  package: org.slf4j.event
  summary: This method is similar to <xref uid="org.slf4j.event.EventRecodingLogger.error(java.lang.String,java.lang.Object)" data-throw-if-not-resolved="false">#error(String, Object)</xref> method except that the marker data is also taken into consideration.
  syntax:
    content: public void error(Marker marker, String format, Object arg)
    parameters:
    - id: marker
      type: org.slf4j.Marker
    - id: format
      type: java.lang.String
    - id: arg
      type: java.lang.Object
- uid: org.slf4j.event.EventRecodingLogger.error(org.slf4j.Marker,java.lang.String,java.lang.Object,java.lang.Object)
  id: error(org.slf4j.Marker,java.lang.String,java.lang.Object,java.lang.Object)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.slf4j.event.EventRecodingLogger
  langs:
  - java
  name: error(Marker marker, String format, Object arg1, Object arg2)
  nameWithType: EventRecodingLogger.error(Marker marker, String format, Object arg1, Object arg2)
  fullName: org.slf4j.event.EventRecodingLogger.error(Marker marker, String format, Object arg1, Object arg2)
  overload: org.slf4j.event.EventRecodingLogger.error*
  type: Method
  package: org.slf4j.event
  summary: This method is similar to <xref uid="org.slf4j.event.EventRecodingLogger.error(java.lang.String,java.lang.Object,java.lang.Object)" data-throw-if-not-resolved="false">#error(String, Object, Object)</xref> method except that the marker data is also taken into consideration.
  syntax:
    content: public void error(Marker marker, String format, Object arg1, Object arg2)
    parameters:
    - id: marker
      type: org.slf4j.Marker
    - id: format
      type: java.lang.String
    - id: arg1
      type: java.lang.Object
    - id: arg2
      type: java.lang.Object
- uid: org.slf4j.event.EventRecodingLogger.error(org.slf4j.Marker,java.lang.String,java.lang.Object...)
  id: error(org.slf4j.Marker,java.lang.String,java.lang.Object...)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.slf4j.event.EventRecodingLogger
  langs:
  - java
  name: error(Marker marker, String format, Object[] arguments)
  nameWithType: EventRecodingLogger.error(Marker marker, String format, Object[] arguments)
  fullName: org.slf4j.event.EventRecodingLogger.error(Marker marker, String format, Object[] arguments)
  overload: org.slf4j.event.EventRecodingLogger.error*
  type: Method
  package: org.slf4j.event
  summary: This method is similar to <xref uid="org.slf4j.event.EventRecodingLogger.error*" data-throw-if-not-resolved="false">#error(String, Object...)</xref> method except that the marker data is also taken into consideration.
  syntax:
    content: public void error(Marker marker, String format, Object[] arguments)
    parameters:
    - id: marker
      type: org.slf4j.Marker
    - id: format
      type: java.lang.String
    - id: arguments
      type: java.lang.Object[]
- uid: org.slf4j.event.EventRecodingLogger.error(org.slf4j.Marker,java.lang.String,java.lang.Throwable)
  id: error(org.slf4j.Marker,java.lang.String,java.lang.Throwable)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.slf4j.event.EventRecodingLogger
  langs:
  - java
  name: error(Marker marker, String msg, Throwable t)
  nameWithType: EventRecodingLogger.error(Marker marker, String msg, Throwable t)
  fullName: org.slf4j.event.EventRecodingLogger.error(Marker marker, String msg, Throwable t)
  overload: org.slf4j.event.EventRecodingLogger.error*
  type: Method
  package: org.slf4j.event
  summary: This method is similar to <xref uid="org.slf4j.event.EventRecodingLogger.error(java.lang.String,java.lang.Throwable)" data-throw-if-not-resolved="false">#error(String, Throwable)</xref> method except that the marker data is also taken into consideration.
  syntax:
    content: public void error(Marker marker, String msg, Throwable t)
    parameters:
    - id: marker
      type: org.slf4j.Marker
    - id: msg
      type: java.lang.String
    - id: t
      type: java.lang.Throwable
- uid: org.slf4j.event.EventRecodingLogger.getName()
  id: getName()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.slf4j.event.EventRecodingLogger
  langs:
  - java
  name: getName()
  nameWithType: EventRecodingLogger.getName()
  fullName: org.slf4j.event.EventRecodingLogger.getName()
  overload: org.slf4j.event.EventRecodingLogger.getName*
  type: Method
  package: org.slf4j.event
  summary: Return the name of this `Logger` instance.
  syntax:
    content: public String getName()
    return:
      type: java.lang.String
- uid: org.slf4j.event.EventRecodingLogger.info(java.lang.String)
  id: info(java.lang.String)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.slf4j.event.EventRecodingLogger
  langs:
  - java
  name: info(String msg)
  nameWithType: EventRecodingLogger.info(String msg)
  fullName: org.slf4j.event.EventRecodingLogger.info(String msg)
  overload: org.slf4j.event.EventRecodingLogger.info*
  type: Method
  package: org.slf4j.event
  summary: Log a message at the INFO level.
  syntax:
    content: public void info(String msg)
    parameters:
    - id: msg
      type: java.lang.String
- uid: org.slf4j.event.EventRecodingLogger.info(java.lang.String,java.lang.Object)
  id: info(java.lang.String,java.lang.Object)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.slf4j.event.EventRecodingLogger
  langs:
  - java
  name: info(String format, Object arg)
  nameWithType: EventRecodingLogger.info(String format, Object arg)
  fullName: org.slf4j.event.EventRecodingLogger.info(String format, Object arg)
  overload: org.slf4j.event.EventRecodingLogger.info*
  type: Method
  package: org.slf4j.event
  summary: >-
    Log a message at the INFO level according to the specified format and argument.


    This form avoids superfluous object creation when the logger is disabled for the INFO level.
  syntax:
    content: public void info(String format, Object arg)
    parameters:
    - id: format
      type: java.lang.String
    - id: arg
      type: java.lang.Object
- uid: org.slf4j.event.EventRecodingLogger.info(java.lang.String,java.lang.Object,java.lang.Object)
  id: info(java.lang.String,java.lang.Object,java.lang.Object)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.slf4j.event.EventRecodingLogger
  langs:
  - java
  name: info(String format, Object arg1, Object arg2)
  nameWithType: EventRecodingLogger.info(String format, Object arg1, Object arg2)
  fullName: org.slf4j.event.EventRecodingLogger.info(String format, Object arg1, Object arg2)
  overload: org.slf4j.event.EventRecodingLogger.info*
  type: Method
  package: org.slf4j.event
  summary: >-
    Log a message at the INFO level according to the specified format and arguments.


    This form avoids superfluous object creation when the logger is disabled for the INFO level.
  syntax:
    content: public void info(String format, Object arg1, Object arg2)
    parameters:
    - id: format
      type: java.lang.String
    - id: arg1
      type: java.lang.Object
    - id: arg2
      type: java.lang.Object
- uid: org.slf4j.event.EventRecodingLogger.info(java.lang.String,java.lang.Object...)
  id: info(java.lang.String,java.lang.Object...)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.slf4j.event.EventRecodingLogger
  langs:
  - java
  name: info(String format, Object[] arguments)
  nameWithType: EventRecodingLogger.info(String format, Object[] arguments)
  fullName: org.slf4j.event.EventRecodingLogger.info(String format, Object[] arguments)
  overload: org.slf4j.event.EventRecodingLogger.info*
  type: Method
  package: org.slf4j.event
  summary: >-
    Log a message at the INFO level according to the specified format and arguments.


    This form avoids superfluous string concatenation when the logger is disabled for the INFO level. However, this variant incurs the hidden (and relatively small) cost of creating an `Object[]` before invoking the method, even if this logger is disabled for INFO. The variants taking <xref uid="org.slf4j.event.EventRecodingLogger.info(java.lang.String,java.lang.Object)" data-throw-if-not-resolved="false">one</xref> and <xref uid="org.slf4j.event.EventRecodingLogger.info(java.lang.String,java.lang.Object,java.lang.Object)" data-throw-if-not-resolved="false">two</xref> arguments exist solely in order to avoid this hidden cost.
  syntax:
    content: public void info(String format, Object[] arguments)
    parameters:
    - id: format
      type: java.lang.String
    - id: arguments
      type: java.lang.Object[]
- uid: org.slf4j.event.EventRecodingLogger.info(java.lang.String,java.lang.Throwable)
  id: info(java.lang.String,java.lang.Throwable)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.slf4j.event.EventRecodingLogger
  langs:
  - java
  name: info(String msg, Throwable t)
  nameWithType: EventRecodingLogger.info(String msg, Throwable t)
  fullName: org.slf4j.event.EventRecodingLogger.info(String msg, Throwable t)
  overload: org.slf4j.event.EventRecodingLogger.info*
  type: Method
  package: org.slf4j.event
  summary: Log an exception (throwable) at the INFO level with an accompanying message.
  syntax:
    content: public void info(String msg, Throwable t)
    parameters:
    - id: msg
      type: java.lang.String
    - id: t
      type: java.lang.Throwable
- uid: org.slf4j.event.EventRecodingLogger.info(org.slf4j.Marker,java.lang.String)
  id: info(org.slf4j.Marker,java.lang.String)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.slf4j.event.EventRecodingLogger
  langs:
  - java
  name: info(Marker marker, String msg)
  nameWithType: EventRecodingLogger.info(Marker marker, String msg)
  fullName: org.slf4j.event.EventRecodingLogger.info(Marker marker, String msg)
  overload: org.slf4j.event.EventRecodingLogger.info*
  type: Method
  package: org.slf4j.event
  summary: Log a message with the specific Marker at the INFO level.
  syntax:
    content: public void info(Marker marker, String msg)
    parameters:
    - id: marker
      type: org.slf4j.Marker
    - id: msg
      type: java.lang.String
- uid: org.slf4j.event.EventRecodingLogger.info(org.slf4j.Marker,java.lang.String,java.lang.Object)
  id: info(org.slf4j.Marker,java.lang.String,java.lang.Object)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.slf4j.event.EventRecodingLogger
  langs:
  - java
  name: info(Marker marker, String format, Object arg)
  nameWithType: EventRecodingLogger.info(Marker marker, String format, Object arg)
  fullName: org.slf4j.event.EventRecodingLogger.info(Marker marker, String format, Object arg)
  overload: org.slf4j.event.EventRecodingLogger.info*
  type: Method
  package: org.slf4j.event
  summary: This method is similar to <xref uid="org.slf4j.event.EventRecodingLogger.info(java.lang.String,java.lang.Object)" data-throw-if-not-resolved="false">#info(String, Object)</xref> method except that the marker data is also taken into consideration.
  syntax:
    content: public void info(Marker marker, String format, Object arg)
    parameters:
    - id: marker
      type: org.slf4j.Marker
    - id: format
      type: java.lang.String
    - id: arg
      type: java.lang.Object
- uid: org.slf4j.event.EventRecodingLogger.info(org.slf4j.Marker,java.lang.String,java.lang.Object,java.lang.Object)
  id: info(org.slf4j.Marker,java.lang.String,java.lang.Object,java.lang.Object)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.slf4j.event.EventRecodingLogger
  langs:
  - java
  name: info(Marker marker, String format, Object arg1, Object arg2)
  nameWithType: EventRecodingLogger.info(Marker marker, String format, Object arg1, Object arg2)
  fullName: org.slf4j.event.EventRecodingLogger.info(Marker marker, String format, Object arg1, Object arg2)
  overload: org.slf4j.event.EventRecodingLogger.info*
  type: Method
  package: org.slf4j.event
  summary: This method is similar to <xref uid="org.slf4j.event.EventRecodingLogger.info(java.lang.String,java.lang.Object,java.lang.Object)" data-throw-if-not-resolved="false">#info(String, Object, Object)</xref> method except that the marker data is also taken into consideration.
  syntax:
    content: public void info(Marker marker, String format, Object arg1, Object arg2)
    parameters:
    - id: marker
      type: org.slf4j.Marker
    - id: format
      type: java.lang.String
    - id: arg1
      type: java.lang.Object
    - id: arg2
      type: java.lang.Object
- uid: org.slf4j.event.EventRecodingLogger.info(org.slf4j.Marker,java.lang.String,java.lang.Object...)
  id: info(org.slf4j.Marker,java.lang.String,java.lang.Object...)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.slf4j.event.EventRecodingLogger
  langs:
  - java
  name: info(Marker marker, String format, Object[] arguments)
  nameWithType: EventRecodingLogger.info(Marker marker, String format, Object[] arguments)
  fullName: org.slf4j.event.EventRecodingLogger.info(Marker marker, String format, Object[] arguments)
  overload: org.slf4j.event.EventRecodingLogger.info*
  type: Method
  package: org.slf4j.event
  summary: This method is similar to <xref uid="org.slf4j.event.EventRecodingLogger.info*" data-throw-if-not-resolved="false">#info(String, Object...)</xref> method except that the marker data is also taken into consideration.
  syntax:
    content: public void info(Marker marker, String format, Object[] arguments)
    parameters:
    - id: marker
      type: org.slf4j.Marker
    - id: format
      type: java.lang.String
    - id: arguments
      type: java.lang.Object[]
- uid: org.slf4j.event.EventRecodingLogger.info(org.slf4j.Marker,java.lang.String,java.lang.Throwable)
  id: info(org.slf4j.Marker,java.lang.String,java.lang.Throwable)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.slf4j.event.EventRecodingLogger
  langs:
  - java
  name: info(Marker marker, String msg, Throwable t)
  nameWithType: EventRecodingLogger.info(Marker marker, String msg, Throwable t)
  fullName: org.slf4j.event.EventRecodingLogger.info(Marker marker, String msg, Throwable t)
  overload: org.slf4j.event.EventRecodingLogger.info*
  type: Method
  package: org.slf4j.event
  summary: This method is similar to <xref uid="org.slf4j.event.EventRecodingLogger.info(java.lang.String,java.lang.Throwable)" data-throw-if-not-resolved="false">#info(String, Throwable)</xref> method except that the marker data is also taken into consideration.
  syntax:
    content: public void info(Marker marker, String msg, Throwable t)
    parameters:
    - id: marker
      type: org.slf4j.Marker
    - id: msg
      type: java.lang.String
    - id: t
      type: java.lang.Throwable
- uid: org.slf4j.event.EventRecodingLogger.isDebugEnabled()
  id: isDebugEnabled()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.slf4j.event.EventRecodingLogger
  langs:
  - java
  name: isDebugEnabled()
  nameWithType: EventRecodingLogger.isDebugEnabled()
  fullName: org.slf4j.event.EventRecodingLogger.isDebugEnabled()
  overload: org.slf4j.event.EventRecodingLogger.isDebugEnabled*
  type: Method
  package: org.slf4j.event
  summary: Is the logger instance enabled for the DEBUG level?
  syntax:
    content: public boolean isDebugEnabled()
    return:
      type: boolean
- uid: org.slf4j.event.EventRecodingLogger.isDebugEnabled(org.slf4j.Marker)
  id: isDebugEnabled(org.slf4j.Marker)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.slf4j.event.EventRecodingLogger
  langs:
  - java
  name: isDebugEnabled(Marker marker)
  nameWithType: EventRecodingLogger.isDebugEnabled(Marker marker)
  fullName: org.slf4j.event.EventRecodingLogger.isDebugEnabled(Marker marker)
  overload: org.slf4j.event.EventRecodingLogger.isDebugEnabled*
  type: Method
  package: org.slf4j.event
  summary: Similar to <xref uid="org.slf4j.event.EventRecodingLogger.isDebugEnabled()" data-throw-if-not-resolved="false">#isDebugEnabled()</xref> method except that the marker data is also taken into account.
  syntax:
    content: public boolean isDebugEnabled(Marker marker)
    parameters:
    - id: marker
      type: org.slf4j.Marker
    return:
      type: boolean
- uid: org.slf4j.event.EventRecodingLogger.isErrorEnabled()
  id: isErrorEnabled()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.slf4j.event.EventRecodingLogger
  langs:
  - java
  name: isErrorEnabled()
  nameWithType: EventRecodingLogger.isErrorEnabled()
  fullName: org.slf4j.event.EventRecodingLogger.isErrorEnabled()
  overload: org.slf4j.event.EventRecodingLogger.isErrorEnabled*
  type: Method
  package: org.slf4j.event
  summary: Is the logger instance enabled for the ERROR level?
  syntax:
    content: public boolean isErrorEnabled()
    return:
      type: boolean
- uid: org.slf4j.event.EventRecodingLogger.isErrorEnabled(org.slf4j.Marker)
  id: isErrorEnabled(org.slf4j.Marker)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.slf4j.event.EventRecodingLogger
  langs:
  - java
  name: isErrorEnabled(Marker marker)
  nameWithType: EventRecodingLogger.isErrorEnabled(Marker marker)
  fullName: org.slf4j.event.EventRecodingLogger.isErrorEnabled(Marker marker)
  overload: org.slf4j.event.EventRecodingLogger.isErrorEnabled*
  type: Method
  package: org.slf4j.event
  summary: Similar to <xref uid="org.slf4j.event.EventRecodingLogger.isErrorEnabled()" data-throw-if-not-resolved="false">#isErrorEnabled()</xref> method except that the marker data is also taken into consideration.
  syntax:
    content: public boolean isErrorEnabled(Marker marker)
    parameters:
    - id: marker
      type: org.slf4j.Marker
    return:
      type: boolean
- uid: org.slf4j.event.EventRecodingLogger.isInfoEnabled()
  id: isInfoEnabled()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.slf4j.event.EventRecodingLogger
  langs:
  - java
  name: isInfoEnabled()
  nameWithType: EventRecodingLogger.isInfoEnabled()
  fullName: org.slf4j.event.EventRecodingLogger.isInfoEnabled()
  overload: org.slf4j.event.EventRecodingLogger.isInfoEnabled*
  type: Method
  package: org.slf4j.event
  summary: Is the logger instance enabled for the INFO level?
  syntax:
    content: public boolean isInfoEnabled()
    return:
      type: boolean
- uid: org.slf4j.event.EventRecodingLogger.isInfoEnabled(org.slf4j.Marker)
  id: isInfoEnabled(org.slf4j.Marker)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.slf4j.event.EventRecodingLogger
  langs:
  - java
  name: isInfoEnabled(Marker marker)
  nameWithType: EventRecodingLogger.isInfoEnabled(Marker marker)
  fullName: org.slf4j.event.EventRecodingLogger.isInfoEnabled(Marker marker)
  overload: org.slf4j.event.EventRecodingLogger.isInfoEnabled*
  type: Method
  package: org.slf4j.event
  summary: Similar to <xref uid="org.slf4j.event.EventRecodingLogger.isInfoEnabled()" data-throw-if-not-resolved="false">#isInfoEnabled()</xref> method except that the marker data is also taken into consideration.
  syntax:
    content: public boolean isInfoEnabled(Marker marker)
    parameters:
    - id: marker
      type: org.slf4j.Marker
    return:
      type: boolean
- uid: org.slf4j.event.EventRecodingLogger.isTraceEnabled()
  id: isTraceEnabled()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.slf4j.event.EventRecodingLogger
  langs:
  - java
  name: isTraceEnabled()
  nameWithType: EventRecodingLogger.isTraceEnabled()
  fullName: org.slf4j.event.EventRecodingLogger.isTraceEnabled()
  overload: org.slf4j.event.EventRecodingLogger.isTraceEnabled*
  type: Method
  package: org.slf4j.event
  summary: Is the logger instance enabled for the TRACE level?
  syntax:
    content: public boolean isTraceEnabled()
    return:
      type: boolean
- uid: org.slf4j.event.EventRecodingLogger.isTraceEnabled(org.slf4j.Marker)
  id: isTraceEnabled(org.slf4j.Marker)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.slf4j.event.EventRecodingLogger
  langs:
  - java
  name: isTraceEnabled(Marker marker)
  nameWithType: EventRecodingLogger.isTraceEnabled(Marker marker)
  fullName: org.slf4j.event.EventRecodingLogger.isTraceEnabled(Marker marker)
  overload: org.slf4j.event.EventRecodingLogger.isTraceEnabled*
  type: Method
  package: org.slf4j.event
  summary: Similar to <xref uid="org.slf4j.event.EventRecodingLogger.isTraceEnabled()" data-throw-if-not-resolved="false">#isTraceEnabled()</xref> method except that the marker data is also taken into account.
  syntax:
    content: public boolean isTraceEnabled(Marker marker)
    parameters:
    - id: marker
      type: org.slf4j.Marker
    return:
      type: boolean
- uid: org.slf4j.event.EventRecodingLogger.isWarnEnabled()
  id: isWarnEnabled()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.slf4j.event.EventRecodingLogger
  langs:
  - java
  name: isWarnEnabled()
  nameWithType: EventRecodingLogger.isWarnEnabled()
  fullName: org.slf4j.event.EventRecodingLogger.isWarnEnabled()
  overload: org.slf4j.event.EventRecodingLogger.isWarnEnabled*
  type: Method
  package: org.slf4j.event
  summary: Is the logger instance enabled for the WARN level?
  syntax:
    content: public boolean isWarnEnabled()
    return:
      type: boolean
- uid: org.slf4j.event.EventRecodingLogger.isWarnEnabled(org.slf4j.Marker)
  id: isWarnEnabled(org.slf4j.Marker)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.slf4j.event.EventRecodingLogger
  langs:
  - java
  name: isWarnEnabled(Marker marker)
  nameWithType: EventRecodingLogger.isWarnEnabled(Marker marker)
  fullName: org.slf4j.event.EventRecodingLogger.isWarnEnabled(Marker marker)
  overload: org.slf4j.event.EventRecodingLogger.isWarnEnabled*
  type: Method
  package: org.slf4j.event
  summary: Similar to <xref uid="org.slf4j.event.EventRecodingLogger.isWarnEnabled()" data-throw-if-not-resolved="false">#isWarnEnabled()</xref> method except that the marker data is also taken into consideration.
  syntax:
    content: public boolean isWarnEnabled(Marker marker)
    parameters:
    - id: marker
      type: org.slf4j.Marker
    return:
      type: boolean
- uid: org.slf4j.event.EventRecodingLogger.trace(java.lang.String)
  id: trace(java.lang.String)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.slf4j.event.EventRecodingLogger
  langs:
  - java
  name: trace(String msg)
  nameWithType: EventRecodingLogger.trace(String msg)
  fullName: org.slf4j.event.EventRecodingLogger.trace(String msg)
  overload: org.slf4j.event.EventRecodingLogger.trace*
  type: Method
  package: org.slf4j.event
  summary: Log a message at the TRACE level.
  syntax:
    content: public void trace(String msg)
    parameters:
    - id: msg
      type: java.lang.String
- uid: org.slf4j.event.EventRecodingLogger.trace(java.lang.String,java.lang.Object)
  id: trace(java.lang.String,java.lang.Object)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.slf4j.event.EventRecodingLogger
  langs:
  - java
  name: trace(String format, Object arg)
  nameWithType: EventRecodingLogger.trace(String format, Object arg)
  fullName: org.slf4j.event.EventRecodingLogger.trace(String format, Object arg)
  overload: org.slf4j.event.EventRecodingLogger.trace*
  type: Method
  package: org.slf4j.event
  summary: >-
    Log a message at the TRACE level according to the specified format and argument.


    This form avoids superfluous object creation when the logger is disabled for the TRACE level.
  syntax:
    content: public void trace(String format, Object arg)
    parameters:
    - id: format
      type: java.lang.String
    - id: arg
      type: java.lang.Object
- uid: org.slf4j.event.EventRecodingLogger.trace(java.lang.String,java.lang.Object,java.lang.Object)
  id: trace(java.lang.String,java.lang.Object,java.lang.Object)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.slf4j.event.EventRecodingLogger
  langs:
  - java
  name: trace(String format, Object arg1, Object arg2)
  nameWithType: EventRecodingLogger.trace(String format, Object arg1, Object arg2)
  fullName: org.slf4j.event.EventRecodingLogger.trace(String format, Object arg1, Object arg2)
  overload: org.slf4j.event.EventRecodingLogger.trace*
  type: Method
  package: org.slf4j.event
  summary: >-
    Log a message at the TRACE level according to the specified format and arguments.


    This form avoids superfluous object creation when the logger is disabled for the TRACE level.
  syntax:
    content: public void trace(String format, Object arg1, Object arg2)
    parameters:
    - id: format
      type: java.lang.String
    - id: arg1
      type: java.lang.Object
    - id: arg2
      type: java.lang.Object
- uid: org.slf4j.event.EventRecodingLogger.trace(java.lang.String,java.lang.Object...)
  id: trace(java.lang.String,java.lang.Object...)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.slf4j.event.EventRecodingLogger
  langs:
  - java
  name: trace(String format, Object[] arguments)
  nameWithType: EventRecodingLogger.trace(String format, Object[] arguments)
  fullName: org.slf4j.event.EventRecodingLogger.trace(String format, Object[] arguments)
  overload: org.slf4j.event.EventRecodingLogger.trace*
  type: Method
  package: org.slf4j.event
  summary: >-
    Log a message at the TRACE level according to the specified format and arguments.


    This form avoids superfluous string concatenation when the logger is disabled for the TRACE level. However, this variant incurs the hidden (and relatively small) cost of creating an `Object[]` before invoking the method, even if this logger is disabled for TRACE. The variants taking <xref uid="org.slf4j.event.EventRecodingLogger.trace(java.lang.String,java.lang.Object)" data-throw-if-not-resolved="false">one</xref> and <xref uid="org.slf4j.event.EventRecodingLogger.trace(java.lang.String,java.lang.Object,java.lang.Object)" data-throw-if-not-resolved="false">two</xref> arguments exist solely in order to avoid this hidden cost.
  syntax:
    content: public void trace(String format, Object[] arguments)
    parameters:
    - id: format
      type: java.lang.String
    - id: arguments
      type: java.lang.Object[]
- uid: org.slf4j.event.EventRecodingLogger.trace(java.lang.String,java.lang.Throwable)
  id: trace(java.lang.String,java.lang.Throwable)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.slf4j.event.EventRecodingLogger
  langs:
  - java
  name: trace(String msg, Throwable t)
  nameWithType: EventRecodingLogger.trace(String msg, Throwable t)
  fullName: org.slf4j.event.EventRecodingLogger.trace(String msg, Throwable t)
  overload: org.slf4j.event.EventRecodingLogger.trace*
  type: Method
  package: org.slf4j.event
  summary: Log an exception (throwable) at the TRACE level with an accompanying message.
  syntax:
    content: public void trace(String msg, Throwable t)
    parameters:
    - id: msg
      type: java.lang.String
    - id: t
      type: java.lang.Throwable
- uid: org.slf4j.event.EventRecodingLogger.trace(org.slf4j.Marker,java.lang.String)
  id: trace(org.slf4j.Marker,java.lang.String)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.slf4j.event.EventRecodingLogger
  langs:
  - java
  name: trace(Marker marker, String msg)
  nameWithType: EventRecodingLogger.trace(Marker marker, String msg)
  fullName: org.slf4j.event.EventRecodingLogger.trace(Marker marker, String msg)
  overload: org.slf4j.event.EventRecodingLogger.trace*
  type: Method
  package: org.slf4j.event
  summary: Log a message with the specific Marker at the TRACE level.
  syntax:
    content: public void trace(Marker marker, String msg)
    parameters:
    - id: marker
      type: org.slf4j.Marker
    - id: msg
      type: java.lang.String
- uid: org.slf4j.event.EventRecodingLogger.trace(org.slf4j.Marker,java.lang.String,java.lang.Object)
  id: trace(org.slf4j.Marker,java.lang.String,java.lang.Object)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.slf4j.event.EventRecodingLogger
  langs:
  - java
  name: trace(Marker marker, String format, Object arg)
  nameWithType: EventRecodingLogger.trace(Marker marker, String format, Object arg)
  fullName: org.slf4j.event.EventRecodingLogger.trace(Marker marker, String format, Object arg)
  overload: org.slf4j.event.EventRecodingLogger.trace*
  type: Method
  package: org.slf4j.event
  summary: This method is similar to <xref uid="org.slf4j.event.EventRecodingLogger.trace(java.lang.String,java.lang.Object)" data-throw-if-not-resolved="false">#trace(String, Object)</xref> method except that the marker data is also taken into consideration.
  syntax:
    content: public void trace(Marker marker, String format, Object arg)
    parameters:
    - id: marker
      type: org.slf4j.Marker
    - id: format
      type: java.lang.String
    - id: arg
      type: java.lang.Object
- uid: org.slf4j.event.EventRecodingLogger.trace(org.slf4j.Marker,java.lang.String,java.lang.Object,java.lang.Object)
  id: trace(org.slf4j.Marker,java.lang.String,java.lang.Object,java.lang.Object)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.slf4j.event.EventRecodingLogger
  langs:
  - java
  name: trace(Marker marker, String format, Object arg1, Object arg2)
  nameWithType: EventRecodingLogger.trace(Marker marker, String format, Object arg1, Object arg2)
  fullName: org.slf4j.event.EventRecodingLogger.trace(Marker marker, String format, Object arg1, Object arg2)
  overload: org.slf4j.event.EventRecodingLogger.trace*
  type: Method
  package: org.slf4j.event
  summary: This method is similar to <xref uid="org.slf4j.event.EventRecodingLogger.trace(java.lang.String,java.lang.Object,java.lang.Object)" data-throw-if-not-resolved="false">#trace(String, Object, Object)</xref> method except that the marker data is also taken into consideration.
  syntax:
    content: public void trace(Marker marker, String format, Object arg1, Object arg2)
    parameters:
    - id: marker
      type: org.slf4j.Marker
    - id: format
      type: java.lang.String
    - id: arg1
      type: java.lang.Object
    - id: arg2
      type: java.lang.Object
- uid: org.slf4j.event.EventRecodingLogger.trace(org.slf4j.Marker,java.lang.String,java.lang.Object...)
  id: trace(org.slf4j.Marker,java.lang.String,java.lang.Object...)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.slf4j.event.EventRecodingLogger
  langs:
  - java
  name: trace(Marker marker, String format, Object[] argArray)
  nameWithType: EventRecodingLogger.trace(Marker marker, String format, Object[] argArray)
  fullName: org.slf4j.event.EventRecodingLogger.trace(Marker marker, String format, Object[] argArray)
  overload: org.slf4j.event.EventRecodingLogger.trace*
  type: Method
  package: org.slf4j.event
  summary: This method is similar to <xref uid="org.slf4j.event.EventRecodingLogger.trace*" data-throw-if-not-resolved="false">#trace(String, Object...)</xref> method except that the marker data is also taken into consideration.
  syntax:
    content: public void trace(Marker marker, String format, Object[] argArray)
    parameters:
    - id: marker
      type: org.slf4j.Marker
    - id: format
      type: java.lang.String
    - id: argArray
      type: java.lang.Object[]
- uid: org.slf4j.event.EventRecodingLogger.trace(org.slf4j.Marker,java.lang.String,java.lang.Throwable)
  id: trace(org.slf4j.Marker,java.lang.String,java.lang.Throwable)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.slf4j.event.EventRecodingLogger
  langs:
  - java
  name: trace(Marker marker, String msg, Throwable t)
  nameWithType: EventRecodingLogger.trace(Marker marker, String msg, Throwable t)
  fullName: org.slf4j.event.EventRecodingLogger.trace(Marker marker, String msg, Throwable t)
  overload: org.slf4j.event.EventRecodingLogger.trace*
  type: Method
  package: org.slf4j.event
  summary: This method is similar to <xref uid="org.slf4j.event.EventRecodingLogger.trace(java.lang.String,java.lang.Throwable)" data-throw-if-not-resolved="false">#trace(String, Throwable)</xref> method except that the marker data is also taken into consideration.
  syntax:
    content: public void trace(Marker marker, String msg, Throwable t)
    parameters:
    - id: marker
      type: org.slf4j.Marker
    - id: msg
      type: java.lang.String
    - id: t
      type: java.lang.Throwable
- uid: org.slf4j.event.EventRecodingLogger.warn(java.lang.String)
  id: warn(java.lang.String)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.slf4j.event.EventRecodingLogger
  langs:
  - java
  name: warn(String msg)
  nameWithType: EventRecodingLogger.warn(String msg)
  fullName: org.slf4j.event.EventRecodingLogger.warn(String msg)
  overload: org.slf4j.event.EventRecodingLogger.warn*
  type: Method
  package: org.slf4j.event
  summary: Log a message at the WARN level.
  syntax:
    content: public void warn(String msg)
    parameters:
    - id: msg
      type: java.lang.String
- uid: org.slf4j.event.EventRecodingLogger.warn(java.lang.String,java.lang.Object)
  id: warn(java.lang.String,java.lang.Object)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.slf4j.event.EventRecodingLogger
  langs:
  - java
  name: warn(String format, Object arg)
  nameWithType: EventRecodingLogger.warn(String format, Object arg)
  fullName: org.slf4j.event.EventRecodingLogger.warn(String format, Object arg)
  overload: org.slf4j.event.EventRecodingLogger.warn*
  type: Method
  package: org.slf4j.event
  summary: >-
    Log a message at the WARN level according to the specified format and argument.


    This form avoids superfluous object creation when the logger is disabled for the WARN level.
  syntax:
    content: public void warn(String format, Object arg)
    parameters:
    - id: format
      type: java.lang.String
    - id: arg
      type: java.lang.Object
- uid: org.slf4j.event.EventRecodingLogger.warn(java.lang.String,java.lang.Object,java.lang.Object)
  id: warn(java.lang.String,java.lang.Object,java.lang.Object)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.slf4j.event.EventRecodingLogger
  langs:
  - java
  name: warn(String format, Object arg1, Object arg2)
  nameWithType: EventRecodingLogger.warn(String format, Object arg1, Object arg2)
  fullName: org.slf4j.event.EventRecodingLogger.warn(String format, Object arg1, Object arg2)
  overload: org.slf4j.event.EventRecodingLogger.warn*
  type: Method
  package: org.slf4j.event
  summary: >-
    Log a message at the WARN level according to the specified format and arguments.


    This form avoids superfluous object creation when the logger is disabled for the WARN level.
  syntax:
    content: public void warn(String format, Object arg1, Object arg2)
    parameters:
    - id: format
      type: java.lang.String
    - id: arg1
      type: java.lang.Object
    - id: arg2
      type: java.lang.Object
- uid: org.slf4j.event.EventRecodingLogger.warn(java.lang.String,java.lang.Object...)
  id: warn(java.lang.String,java.lang.Object...)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.slf4j.event.EventRecodingLogger
  langs:
  - java
  name: warn(String format, Object[] arguments)
  nameWithType: EventRecodingLogger.warn(String format, Object[] arguments)
  fullName: org.slf4j.event.EventRecodingLogger.warn(String format, Object[] arguments)
  overload: org.slf4j.event.EventRecodingLogger.warn*
  type: Method
  package: org.slf4j.event
  summary: >-
    Log a message at the WARN level according to the specified format and arguments.


    This form avoids superfluous string concatenation when the logger is disabled for the WARN level. However, this variant incurs the hidden (and relatively small) cost of creating an `Object[]` before invoking the method, even if this logger is disabled for WARN. The variants taking <xref uid="org.slf4j.event.EventRecodingLogger.warn(java.lang.String,java.lang.Object)" data-throw-if-not-resolved="false">one</xref> and <xref uid="org.slf4j.event.EventRecodingLogger.warn(java.lang.String,java.lang.Object,java.lang.Object)" data-throw-if-not-resolved="false">two</xref> arguments exist solely in order to avoid this hidden cost.
  syntax:
    content: public void warn(String format, Object[] arguments)
    parameters:
    - id: format
      type: java.lang.String
    - id: arguments
      type: java.lang.Object[]
- uid: org.slf4j.event.EventRecodingLogger.warn(java.lang.String,java.lang.Throwable)
  id: warn(java.lang.String,java.lang.Throwable)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.slf4j.event.EventRecodingLogger
  langs:
  - java
  name: warn(String msg, Throwable t)
  nameWithType: EventRecodingLogger.warn(String msg, Throwable t)
  fullName: org.slf4j.event.EventRecodingLogger.warn(String msg, Throwable t)
  overload: org.slf4j.event.EventRecodingLogger.warn*
  type: Method
  package: org.slf4j.event
  summary: Log an exception (throwable) at the WARN level with an accompanying message.
  syntax:
    content: public void warn(String msg, Throwable t)
    parameters:
    - id: msg
      type: java.lang.String
    - id: t
      type: java.lang.Throwable
- uid: org.slf4j.event.EventRecodingLogger.warn(org.slf4j.Marker,java.lang.String)
  id: warn(org.slf4j.Marker,java.lang.String)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.slf4j.event.EventRecodingLogger
  langs:
  - java
  name: warn(Marker marker, String msg)
  nameWithType: EventRecodingLogger.warn(Marker marker, String msg)
  fullName: org.slf4j.event.EventRecodingLogger.warn(Marker marker, String msg)
  overload: org.slf4j.event.EventRecodingLogger.warn*
  type: Method
  package: org.slf4j.event
  summary: Log a message with the specific Marker at the WARN level.
  syntax:
    content: public void warn(Marker marker, String msg)
    parameters:
    - id: marker
      type: org.slf4j.Marker
    - id: msg
      type: java.lang.String
- uid: org.slf4j.event.EventRecodingLogger.warn(org.slf4j.Marker,java.lang.String,java.lang.Object)
  id: warn(org.slf4j.Marker,java.lang.String,java.lang.Object)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.slf4j.event.EventRecodingLogger
  langs:
  - java
  name: warn(Marker marker, String format, Object arg)
  nameWithType: EventRecodingLogger.warn(Marker marker, String format, Object arg)
  fullName: org.slf4j.event.EventRecodingLogger.warn(Marker marker, String format, Object arg)
  overload: org.slf4j.event.EventRecodingLogger.warn*
  type: Method
  package: org.slf4j.event
  summary: This method is similar to <xref uid="org.slf4j.event.EventRecodingLogger.warn(java.lang.String,java.lang.Object)" data-throw-if-not-resolved="false">#warn(String, Object)</xref> method except that the marker data is also taken into consideration.
  syntax:
    content: public void warn(Marker marker, String format, Object arg)
    parameters:
    - id: marker
      type: org.slf4j.Marker
    - id: format
      type: java.lang.String
    - id: arg
      type: java.lang.Object
- uid: org.slf4j.event.EventRecodingLogger.warn(org.slf4j.Marker,java.lang.String,java.lang.Object,java.lang.Object)
  id: warn(org.slf4j.Marker,java.lang.String,java.lang.Object,java.lang.Object)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.slf4j.event.EventRecodingLogger
  langs:
  - java
  name: warn(Marker marker, String format, Object arg1, Object arg2)
  nameWithType: EventRecodingLogger.warn(Marker marker, String format, Object arg1, Object arg2)
  fullName: org.slf4j.event.EventRecodingLogger.warn(Marker marker, String format, Object arg1, Object arg2)
  overload: org.slf4j.event.EventRecodingLogger.warn*
  type: Method
  package: org.slf4j.event
  summary: This method is similar to <xref uid="org.slf4j.event.EventRecodingLogger.warn(java.lang.String,java.lang.Object,java.lang.Object)" data-throw-if-not-resolved="false">#warn(String, Object, Object)</xref> method except that the marker data is also taken into consideration.
  syntax:
    content: public void warn(Marker marker, String format, Object arg1, Object arg2)
    parameters:
    - id: marker
      type: org.slf4j.Marker
    - id: format
      type: java.lang.String
    - id: arg1
      type: java.lang.Object
    - id: arg2
      type: java.lang.Object
- uid: org.slf4j.event.EventRecodingLogger.warn(org.slf4j.Marker,java.lang.String,java.lang.Object...)
  id: warn(org.slf4j.Marker,java.lang.String,java.lang.Object...)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.slf4j.event.EventRecodingLogger
  langs:
  - java
  name: warn(Marker marker, String format, Object[] arguments)
  nameWithType: EventRecodingLogger.warn(Marker marker, String format, Object[] arguments)
  fullName: org.slf4j.event.EventRecodingLogger.warn(Marker marker, String format, Object[] arguments)
  overload: org.slf4j.event.EventRecodingLogger.warn*
  type: Method
  package: org.slf4j.event
  summary: This method is similar to <xref uid="org.slf4j.event.EventRecodingLogger.warn*" data-throw-if-not-resolved="false">#warn(String, Object...)</xref> method except that the marker data is also taken into consideration.
  syntax:
    content: public void warn(Marker marker, String format, Object[] arguments)
    parameters:
    - id: marker
      type: org.slf4j.Marker
    - id: format
      type: java.lang.String
    - id: arguments
      type: java.lang.Object[]
- uid: org.slf4j.event.EventRecodingLogger.warn(org.slf4j.Marker,java.lang.String,java.lang.Throwable)
  id: warn(org.slf4j.Marker,java.lang.String,java.lang.Throwable)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.slf4j.event.EventRecodingLogger
  langs:
  - java
  name: warn(Marker marker, String msg, Throwable t)
  nameWithType: EventRecodingLogger.warn(Marker marker, String msg, Throwable t)
  fullName: org.slf4j.event.EventRecodingLogger.warn(Marker marker, String msg, Throwable t)
  overload: org.slf4j.event.EventRecodingLogger.warn*
  type: Method
  package: org.slf4j.event
  summary: This method is similar to <xref uid="org.slf4j.event.EventRecodingLogger.warn(java.lang.String,java.lang.Throwable)" data-throw-if-not-resolved="false">#warn(String, Throwable)</xref> method except that the marker data is also taken into consideration.
  syntax:
    content: public void warn(Marker marker, String msg, Throwable t)
    parameters:
    - id: marker
      type: org.slf4j.Marker
    - id: msg
      type: java.lang.String
    - id: t
      type: java.lang.Throwable
references:
- uid: org.slf4j.helpers.SubstituteLogger
  name: SubstituteLogger
  nameWithType: SubstituteLogger
  fullName: org.slf4j.helpers.SubstituteLogger
- uid: java.util.Queue<org.slf4j.event.SubstituteLoggingEvent>
  spec.java:
  - uid: java.util.Queue
    name: Queue
    fullName: java.util.Queue
  - name: <
    fullName: <
  - uid: org.slf4j.event.SubstituteLoggingEvent
    name: SubstituteLoggingEvent
    fullName: org.slf4j.event.SubstituteLoggingEvent
  - name: '>'
    fullName: '>'
- uid: org.slf4j.event.EventRecodingLogger.EventRecodingLogger*
  name: EventRecodingLogger
  nameWithType: EventRecodingLogger.EventRecodingLogger
  fullName: org.slf4j.event.EventRecodingLogger.EventRecodingLogger
  package: org.slf4j.event
- uid: java.lang.String
  spec.java:
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
- uid: org.slf4j.event.EventRecodingLogger.getName*
  name: getName
  nameWithType: EventRecodingLogger.getName
  fullName: org.slf4j.event.EventRecodingLogger.getName
  package: org.slf4j.event
- uid: boolean
  spec.java:
  - uid: boolean
    name: boolean
    fullName: boolean
- uid: org.slf4j.event.EventRecodingLogger.isTraceEnabled*
  name: isTraceEnabled
  nameWithType: EventRecodingLogger.isTraceEnabled
  fullName: org.slf4j.event.EventRecodingLogger.isTraceEnabled
  package: org.slf4j.event
- uid: org.slf4j.event.EventRecodingLogger.trace*
  name: trace
  nameWithType: EventRecodingLogger.trace
  fullName: org.slf4j.event.EventRecodingLogger.trace
  package: org.slf4j.event
- uid: java.lang.Object
  spec.java:
  - uid: java.lang.Object
    name: Object
    fullName: java.lang.Object
- uid: java.lang.Object[]
  spec.java:
  - uid: java.lang.Object
    name: Object
    fullName: java.lang.Object
  - name: '[]'
    fullName: '[]'
- uid: java.lang.Throwable
  spec.java:
  - uid: java.lang.Throwable
    name: Throwable
    fullName: java.lang.Throwable
- uid: org.slf4j.Marker
  name: Marker
  nameWithType: Marker
  fullName: org.slf4j.Marker
- uid: org.slf4j.event.EventRecodingLogger.isDebugEnabled*
  name: isDebugEnabled
  nameWithType: EventRecodingLogger.isDebugEnabled
  fullName: org.slf4j.event.EventRecodingLogger.isDebugEnabled
  package: org.slf4j.event
- uid: org.slf4j.event.EventRecodingLogger.debug*
  name: debug
  nameWithType: EventRecodingLogger.debug
  fullName: org.slf4j.event.EventRecodingLogger.debug
  package: org.slf4j.event
- uid: org.slf4j.event.EventRecodingLogger.isInfoEnabled*
  name: isInfoEnabled
  nameWithType: EventRecodingLogger.isInfoEnabled
  fullName: org.slf4j.event.EventRecodingLogger.isInfoEnabled
  package: org.slf4j.event
- uid: org.slf4j.event.EventRecodingLogger.info*
  name: info
  nameWithType: EventRecodingLogger.info
  fullName: org.slf4j.event.EventRecodingLogger.info
  package: org.slf4j.event
- uid: org.slf4j.event.EventRecodingLogger.isWarnEnabled*
  name: isWarnEnabled
  nameWithType: EventRecodingLogger.isWarnEnabled
  fullName: org.slf4j.event.EventRecodingLogger.isWarnEnabled
  package: org.slf4j.event
- uid: org.slf4j.event.EventRecodingLogger.warn*
  name: warn
  nameWithType: EventRecodingLogger.warn
  fullName: org.slf4j.event.EventRecodingLogger.warn
  package: org.slf4j.event
- uid: org.slf4j.event.EventRecodingLogger.isErrorEnabled*
  name: isErrorEnabled
  nameWithType: EventRecodingLogger.isErrorEnabled
  fullName: org.slf4j.event.EventRecodingLogger.isErrorEnabled
  package: org.slf4j.event
- uid: org.slf4j.event.EventRecodingLogger.error*
  name: error
  nameWithType: EventRecodingLogger.error
  fullName: org.slf4j.event.EventRecodingLogger.error
  package: org.slf4j.event
- uid: org.slf4j.Logger
  name: Logger
  nameWithType: Logger
  fullName: org.slf4j.Logger
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: java.lang.Object.finalize()
  name: Object.finalize()
  nameWithType: Object.finalize()
  fullName: java.lang.Object.finalize()
- uid: java.lang.Object.clone()
  name: Object.clone()
  nameWithType: Object.clone()
  fullName: java.lang.Object.clone()
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: java.lang.Object.equals(java.lang.Object)
  name: Object.equals(Object)
  nameWithType: Object.equals(Object)
  fullName: java.lang.Object.equals(java.lang.Object)
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.lang.Object.hashCode()
  name: Object.hashCode()
  nameWithType: Object.hashCode()
  fullName: java.lang.Object.hashCode()
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: java.lang.Object.toString()
  name: Object.toString()
  nameWithType: Object.toString()
  fullName: java.lang.Object.toString()
- uid: org.slf4j.event.SubstituteLoggingEvent
  name: SubstituteLoggingEvent
  nameWithType: SubstituteLoggingEvent
  fullName: org.slf4j.event.SubstituteLoggingEvent
- uid: java.util.Queue
  name: Queue
  nameWithType: Queue
  fullName: java.util.Queue
