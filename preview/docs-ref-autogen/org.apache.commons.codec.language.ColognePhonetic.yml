### YamlMime:ManagedReference
items:
- uid: org.apache.commons.codec.language.ColognePhonetic
  id: ColognePhonetic
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.apache.commons.codec.language
  children:
  - org.apache.commons.codec.language.ColognePhonetic.ColognePhonetic()
  - org.apache.commons.codec.language.ColognePhonetic.colognePhonetic(java.lang.String)
  - org.apache.commons.codec.language.ColognePhonetic.encode(java.lang.Object)
  - org.apache.commons.codec.language.ColognePhonetic.encode(java.lang.String)
  - org.apache.commons.codec.language.ColognePhonetic.isEncodeEqual(java.lang.String,java.lang.String)
  langs:
  - java
  name: ColognePhonetic
  nameWithType: ColognePhonetic
  fullName: org.apache.commons.codec.language.ColognePhonetic
  type: Class
  package: org.apache.commons.codec.language
  summary: "Encodes a string into a Cologne Phonetic value.\n\nImplements the [K�lner Phonetik][K_lner Phonetik] (Cologne Phonetic) algorithm issued by Hans Joachim Postel in 1969.\n\nThe *K�lner Phonetik* is a phonetic algorithm which is optimized for the German language. It is related to the well-known soundex algorithm.\n\n## Algorithm ##\n\n *  ### Step 1: ###\n    \n    After preprocessing (conversion to upper case, transcription of [germanic umlauts][], removal of non alphabetical characters) the letters of the supplied text are replaced by their phonetic code according to the following table.\n    \n        | ------------------------------------------------ | ----------------------------------------- | ---- |\n        | Letter                                           | Context                                   | Code |\n        | A, E, I, J, O, U, Y                              |                                           | 0    |\n        | H                                                |                                           | -    |\n        | B                                                |                                           | 1    |\n        | P                                                | not before H                              |\n        | D, T                                             | not before C, S, Z                        | 2    |\n        | F, V, W                                          |                                           | 3    |\n        | P                                                | before H                                  |\n        | G, K, Q                                          |                                           | 4    |\n        | C                                                | at onset before A, H, K, L, O, Q, R, U, X |\n        | before A, H, K, O, Q, U, X except after S, Z     |\n        | X                                                | not after C, K, Q                         | 48   |\n        | L                                                |                                           | 5    |\n        | M, N                                             |                                           | 6    |\n        | R                                                |                                           | 7    |\n        | S, Z                                             |                                           | 8    |\n        | C                                                | after S, Z                                |\n        | at onset except before A, H, K, L, O, Q, R, U, X |\n        | not before A, H, K, O, Q, U, X                   |\n        | D, T                                             | before C, S, Z                            |\n        | X                                                | after C, K, Q                             |\n    \n    #### Example: ####\n    \n    `\"M`�`ller-L`�`denscheidt\" => \"MULLERLUDENSCHEIDT\" => \"6005507500206880022\"`\n *  ### Step 2: ###\n    \n    Collapse of all multiple consecutive code digits.\n    \n    #### Example: ####\n    \n    `\"6005507500206880022\" => \"6050750206802\"`\n *  ### Step 3: ###\n    \n    Removal of all codes \"0\" except at the beginning. This means that two or more identical consecutive digits can occur if they occur after removing the \"0\" digits.\n    \n    #### Example: ####\n    \n    `\"6050750206802\" => \"65752682\"`\n\nThis class is thread-safe.\n\n\n[K_lner Phonetik]: http://de.wikipedia.org/wiki/K%C3%B6lner_Phonetik\n[germanic umlauts]: http://en.wikipedia.org/wiki/Germanic_umlaut"
  syntax:
    content: public class ColognePhonetic implements StringEncoder
  inheritance:
  - java.lang.Object
  implements:
  - org.apache.commons.codec.StringEncoder
  inheritedMembers:
  - java.lang.Object.clone()
  - java.lang.Object.equals(java.lang.Object)
  - java.lang.Object.finalize()
  - java.lang.Object.getClass()
  - java.lang.Object.hashCode()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.toString()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
- uid: org.apache.commons.codec.language.ColognePhonetic.ColognePhonetic()
  id: ColognePhonetic()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.apache.commons.codec.language.ColognePhonetic
  langs:
  - java
  name: ColognePhonetic()
  nameWithType: ColognePhonetic.ColognePhonetic()
  fullName: org.apache.commons.codec.language.ColognePhonetic.ColognePhonetic()
  overload: org.apache.commons.codec.language.ColognePhonetic.ColognePhonetic*
  type: Constructor
  package: org.apache.commons.codec.language
  syntax:
    content: public ColognePhonetic()
- uid: org.apache.commons.codec.language.ColognePhonetic.colognePhonetic(java.lang.String)
  id: colognePhonetic(java.lang.String)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.apache.commons.codec.language.ColognePhonetic
  langs:
  - java
  name: colognePhonetic(String text)
  nameWithType: ColognePhonetic.colognePhonetic(String text)
  fullName: org.apache.commons.codec.language.ColognePhonetic.colognePhonetic(String text)
  overload: org.apache.commons.codec.language.ColognePhonetic.colognePhonetic*
  type: Method
  package: org.apache.commons.codec.language
  summary: >-
    Implements the *K�lner Phonetik* algorithm.


    In contrast to the initial description of the algorithm, this implementation does the encoding in one pass.
  syntax:
    content: public String colognePhonetic(String text)
    parameters:
    - id: text
      type: java.lang.String
      description: The source text to encode
    return:
      type: java.lang.String
      description: the corresponding encoding according to the <i>K&ouml;lner Phonetik</i> algorithm
- uid: org.apache.commons.codec.language.ColognePhonetic.encode(java.lang.Object)
  id: encode(java.lang.Object)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.apache.commons.codec.language.ColognePhonetic
  langs:
  - java
  name: encode(Object object)
  nameWithType: ColognePhonetic.encode(Object object)
  fullName: org.apache.commons.codec.language.ColognePhonetic.encode(Object object)
  overload: org.apache.commons.codec.language.ColognePhonetic.encode*
  type: Method
  package: org.apache.commons.codec.language
  summary: Encodes an "Object" and returns the encoded content as an Object. The Objects here may just be `byte[]` or `String`s depending on the implementation used.
  syntax:
    content: public Object encode(Object object)
    parameters:
    - id: object
      type: java.lang.Object
    return:
      type: java.lang.Object
  exceptions:
  - type: org.apache.commons.codec.EncoderException
- uid: org.apache.commons.codec.language.ColognePhonetic.encode(java.lang.String)
  id: encode(java.lang.String)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.apache.commons.codec.language.ColognePhonetic
  langs:
  - java
  name: encode(String text)
  nameWithType: ColognePhonetic.encode(String text)
  fullName: org.apache.commons.codec.language.ColognePhonetic.encode(String text)
  overload: org.apache.commons.codec.language.ColognePhonetic.encode*
  type: Method
  package: org.apache.commons.codec.language
  summary: Encodes a String and returns a String.
  syntax:
    content: public String encode(String text)
    parameters:
    - id: text
      type: java.lang.String
    return:
      type: java.lang.String
- uid: org.apache.commons.codec.language.ColognePhonetic.isEncodeEqual(java.lang.String,java.lang.String)
  id: isEncodeEqual(java.lang.String,java.lang.String)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.apache.commons.codec.language.ColognePhonetic
  langs:
  - java
  name: isEncodeEqual(String text1, String text2)
  nameWithType: ColognePhonetic.isEncodeEqual(String text1, String text2)
  fullName: org.apache.commons.codec.language.ColognePhonetic.isEncodeEqual(String text1, String text2)
  overload: org.apache.commons.codec.language.ColognePhonetic.isEncodeEqual*
  type: Method
  package: org.apache.commons.codec.language
  syntax:
    content: public boolean isEncodeEqual(String text1, String text2)
    parameters:
    - id: text1
      type: java.lang.String
    - id: text2
      type: java.lang.String
    return:
      type: boolean
references:
- uid: org.apache.commons.codec.language.ColognePhonetic.ColognePhonetic*
  name: ColognePhonetic
  nameWithType: ColognePhonetic.ColognePhonetic
  fullName: org.apache.commons.codec.language.ColognePhonetic.ColognePhonetic
  package: org.apache.commons.codec.language
- uid: java.lang.String
  spec.java:
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
- uid: org.apache.commons.codec.language.ColognePhonetic.colognePhonetic*
  name: colognePhonetic
  nameWithType: ColognePhonetic.colognePhonetic
  fullName: org.apache.commons.codec.language.ColognePhonetic.colognePhonetic
  package: org.apache.commons.codec.language
- uid: org.apache.commons.codec.EncoderException
  name: EncoderException
  nameWithType: EncoderException
  fullName: org.apache.commons.codec.EncoderException
- uid: java.lang.Object
  spec.java:
  - uid: java.lang.Object
    name: Object
    fullName: java.lang.Object
- uid: org.apache.commons.codec.language.ColognePhonetic.encode*
  name: encode
  nameWithType: ColognePhonetic.encode
  fullName: org.apache.commons.codec.language.ColognePhonetic.encode
  package: org.apache.commons.codec.language
- uid: boolean
  spec.java:
  - uid: boolean
    name: boolean
    fullName: boolean
- uid: org.apache.commons.codec.language.ColognePhonetic.isEncodeEqual*
  name: isEncodeEqual
  nameWithType: ColognePhonetic.isEncodeEqual
  fullName: org.apache.commons.codec.language.ColognePhonetic.isEncodeEqual
  package: org.apache.commons.codec.language
- uid: org.apache.commons.codec.StringEncoder
  name: StringEncoder
  nameWithType: StringEncoder
  fullName: org.apache.commons.codec.StringEncoder
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: java.lang.Object.finalize()
  name: Object.finalize()
  nameWithType: Object.finalize()
  fullName: java.lang.Object.finalize()
- uid: java.lang.Object.clone()
  name: Object.clone()
  nameWithType: Object.clone()
  fullName: java.lang.Object.clone()
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: java.lang.Object.equals(java.lang.Object)
  name: Object.equals(Object)
  nameWithType: Object.equals(Object)
  fullName: java.lang.Object.equals(java.lang.Object)
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.lang.Object.hashCode()
  name: Object.hashCode()
  nameWithType: Object.hashCode()
  fullName: java.lang.Object.hashCode()
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: java.lang.Object.toString()
  name: Object.toString()
  nameWithType: Object.toString()
  fullName: java.lang.Object.toString()
