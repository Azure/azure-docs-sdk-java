### YamlMime:JavaType
uid: "org.apache.commons.codec.language.ColognePhonetic"
fullName: "org.apache.commons.codec.language.ColognePhonetic"
name: "ColognePhonetic"
nameWithType: "ColognePhonetic"
summary: "Encodes a string into a Cologne Phonetic value.\n\nImplements the [Kölner Phonetik][K_lner Phonetik] (Cologne Phonetic) algorithm issued by Hans Joachim Postel in 1969.\n\nThe *Kölner Phonetik* is a phonetic algorithm which is optimized for the German language. It is related to the well-known soundex algorithm.\n\n## Algorithm ##\n\n *  ### Step 1: ###\n    \n    After preprocessing (conversion to upper case, transcription of [germanic umlauts][], removal of non alphabetical characters) the letters of the supplied text are replaced by their phonetic code according to the following table.\n    \n        | ------------------------------------------------ | ----------------------------------------- | ---- |\n        | Letter                                           | Context                                   | Code |\n        | A, E, I, J, O, U, Y                              |                                           | 0    |\n        | H                                                |                                           | -    |\n        | B                                                |                                           | 1    |\n        | P                                                | not before H                              |\n        | D, T                                             | not before C, S, Z                        | 2    |\n        | F, V, W                                          |                                           | 3    |\n        | P                                                | before H                                  |\n        | G, K, Q                                          |                                           | 4    |\n        | C                                                | at onset before A, H, K, L, O, Q, R, U, X |\n        | before A, H, K, O, Q, U, X except after S, Z     |\n        | X                                                | not after C, K, Q                         | 48   |\n        | L                                                |                                           | 5    |\n        | M, N                                             |                                           | 6    |\n        | R                                                |                                           | 7    |\n        | S, Z                                             |                                           | 8    |\n        | C                                                | after S, Z                                |\n        | at onset except before A, H, K, L, O, Q, R, U, X |\n        | not before A, H, K, O, Q, U, X                   |\n        | D, T                                             | before C, S, Z                            |\n        | X                                                | after C, K, Q                             |\n    \n    #### Example: ####\n    \n    `\"M`ü`ller-L`ü`denscheidt\" => \"MULLERLUDENSCHEIDT\" => \"6005507500206880022\"`\n *  ### Step 2: ###\n    \n    Collapse of all multiple consecutive code digits.\n    \n    #### Example: ####\n    \n    `\"6005507500206880022\" => \"6050750206802\"`\n *  ### Step 3: ###\n    \n    Removal of all codes \"0\" except at the beginning. This means that two or more identical consecutive digits can occur if they occur after removing the \"0\" digits.\n    \n    #### Example: ####\n    \n    `\"6050750206802\" => \"65752682\"`\n\nThis class is thread-safe.\n\n\n[K_lner Phonetik]: http://de.wikipedia.org/wiki/K%C3%B6lner_Phonetik\n[germanic umlauts]: http://en.wikipedia.org/wiki/Germanic_umlaut"
inheritances:
- "<xref href=\"java.lang.Object\" data-throw-if-not-resolved=\"False\" />"
inheritedMembers:
- "java.lang.Object.clone()"
- "java.lang.Object.equals(java.lang.Object)"
- "java.lang.Object.finalize()"
- "java.lang.Object.getClass()"
- "java.lang.Object.hashCode()"
- "java.lang.Object.notify()"
- "java.lang.Object.notifyAll()"
- "java.lang.Object.toString()"
- "java.lang.Object.wait()"
- "java.lang.Object.wait(long)"
- "java.lang.Object.wait(long,int)"
syntax: "public class ColognePhonetic implements StringEncoder"
constructors:
- "org.apache.commons.codec.language.ColognePhonetic.ColognePhonetic()"
methods:
- "org.apache.commons.codec.language.ColognePhonetic.colognePhonetic(java.lang.String)"
- "org.apache.commons.codec.language.ColognePhonetic.encode(java.lang.Object)"
- "org.apache.commons.codec.language.ColognePhonetic.encode(java.lang.String)"
- "org.apache.commons.codec.language.ColognePhonetic.isEncodeEqual(java.lang.String,java.lang.String)"
type: "class"
implements:
- "<xref href=\"org.apache.commons.codec.StringEncoder?alt=org.apache.commons.codec.StringEncoder&text=StringEncoder\" data-throw-if-not-resolved=\"False\" />"
metadata: {}
package: "org.apache.commons.codec.language"
artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
