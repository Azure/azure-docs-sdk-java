### YamlMime:ManagedReference
items:
- uid: com.azure.cosmos.implementation.guava25.base.Enums
  id: Enums
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.base
  children:
  - com.azure.cosmos.implementation.guava25.base.Enums.<T>getIfPresent(java.lang.Class<T>,java.lang.String)
  - com.azure.cosmos.implementation.guava25.base.Enums.<T>stringConverter(java.lang.Class<T>)
  - com.azure.cosmos.implementation.guava25.base.Enums.getField(java.lang.Enum<?>)
  langs:
  - java
  name: Enums
  nameWithType: Enums
  fullName: com.azure.cosmos.implementation.guava25.base.Enums
  type: Class
  package: com.azure.cosmos.implementation.guava25.base
  summary: Utility methods for working with <xref uid="java.lang.Enum" data-throw-if-not-resolved="false">Enum</xref> instances.
  syntax:
    content: public final class Enums
  inheritance:
  - java.lang.Object
  inheritedMembers:
  - java.lang.Object.clone()
  - java.lang.Object.equals(java.lang.Object)
  - java.lang.Object.finalize()
  - java.lang.Object.getClass()
  - java.lang.Object.hashCode()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.toString()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
- uid: com.azure.cosmos.implementation.guava25.base.Enums.<T>getIfPresent(java.lang.Class<T>,java.lang.String)
  id: <T>getIfPresent(java.lang.Class<T>,java.lang.String)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.base.Enums
  langs:
  - java
  name: <T>getIfPresent(Class<T> enumClass, String value)
  nameWithType: Enums.<T>getIfPresent(Class<T> enumClass, String value)
  fullName: com.azure.cosmos.implementation.guava25.base.Enums.<T>getIfPresent(Class<T> enumClass, String value)
  overload: com.azure.cosmos.implementation.guava25.base.Enums.getIfPresent*
  type: Method
  package: com.azure.cosmos.implementation.guava25.base
  summary: Returns an optional enum constant for the given type, using <xref uid="java.lang.Enum.valueOf" data-throw-if-not-resolved="false">Enum#valueOf</xref>. If the constant does not exist, <xref uid="com.azure.cosmos.implementation.guava25.base.Optional.absent" data-throw-if-not-resolved="false">Optional#absent</xref> is returned. A common use case is for parsing user input or falling back to a default enum constant. For example, `Enums.getIfPresent(Country.class, countryInput).or(Country.DEFAULT);`
  syntax:
    content: public static Optional<T> <T>getIfPresent(Class<T> enumClass, String value)
    parameters:
    - id: enumClass
      type: java.lang.Class<T>
    - id: value
      type: java.lang.String
    return:
      type: com.azure.cosmos.implementation.guava25.base.Optional<T>
- uid: com.azure.cosmos.implementation.guava25.base.Enums.<T>stringConverter(java.lang.Class<T>)
  id: <T>stringConverter(java.lang.Class<T>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.base.Enums
  langs:
  - java
  name: <T>stringConverter(Class<T> enumClass)
  nameWithType: Enums.<T>stringConverter(Class<T> enumClass)
  fullName: com.azure.cosmos.implementation.guava25.base.Enums.<T>stringConverter(Class<T> enumClass)
  overload: com.azure.cosmos.implementation.guava25.base.Enums.stringConverter*
  type: Method
  package: com.azure.cosmos.implementation.guava25.base
  summary: Returns a converter that converts between strings and `enum` values of type `enumClass` using <xref uid="java.lang.Enum.valueOf*" data-throw-if-not-resolved="false">Enum#valueOf(Class, String)</xref> and <xref uid="java.lang.Enum.name()" data-throw-if-not-resolved="false">Enum#name()</xref>. The converter will throw an `IllegalArgumentException` if the argument is not the name of any enum constant in the specified enum.
  syntax:
    content: public static Converter<String,T> <T>stringConverter(Class<T> enumClass)
    parameters:
    - id: enumClass
      type: java.lang.Class<T>
    return:
      type: com.azure.cosmos.implementation.guava25.base.Converter<java.lang.String,T>
- uid: com.azure.cosmos.implementation.guava25.base.Enums.Enums()
  id: Enums()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.base.Enums
  langs:
  - java
  name: Enums()
  nameWithType: Enums.Enums()
  fullName: com.azure.cosmos.implementation.guava25.base.Enums.Enums()
  overload: com.azure.cosmos.implementation.guava25.base.Enums.Enums*
  type: Constructor
  package: com.azure.cosmos.implementation.guava25.base
  syntax:
    content: private Enums()
- uid: com.azure.cosmos.implementation.guava25.base.Enums.getField(java.lang.Enum<?>)
  id: getField(java.lang.Enum<?>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.base.Enums
  langs:
  - java
  name: getField(Enum<?> enumValue)
  nameWithType: Enums.getField(Enum<?> enumValue)
  fullName: com.azure.cosmos.implementation.guava25.base.Enums.getField(Enum<?> enumValue)
  overload: com.azure.cosmos.implementation.guava25.base.Enums.getField*
  type: Method
  package: com.azure.cosmos.implementation.guava25.base
  summary: Returns the <xref uid="java.lang.reflect.Field" data-throw-if-not-resolved="false">Field</xref> in which `enumValue` is defined. For example, to get the `Description` annotation on the `GOLF` constant of enum `Sport`, use `Enums.getField(Sport.GOLF).getAnnotation(Description.class)`.
  syntax:
    content: public static Field getField(Enum<?> enumValue)
    parameters:
    - id: enumValue
      type: java.lang.Enum<?>
    return:
      type: java.lang.reflect.Field
references:
- uid: com.azure.cosmos.implementation.guava25.base.Enums.Enums*
  name: Enums
  nameWithType: Enums.Enums
  fullName: com.azure.cosmos.implementation.guava25.base.Enums.Enums
  package: com.azure.cosmos.implementation.guava25.base
- uid: java.lang.Enum<?>
  spec.java:
  - uid: java.lang.Enum
    name: Enum
    fullName: java.lang.Enum
  - name: <
    fullName: <
  - uid: '?'
    name: '?'
    fullName: '?'
  - name: '>'
    fullName: '>'
- uid: java.lang.reflect.Field
  spec.java:
  - uid: java.lang.reflect.Field
    name: Field
    fullName: java.lang.reflect.Field
- uid: com.azure.cosmos.implementation.guava25.base.Enums.getField*
  name: getField
  nameWithType: Enums.getField
  fullName: com.azure.cosmos.implementation.guava25.base.Enums.getField
  package: com.azure.cosmos.implementation.guava25.base
- uid: java.lang.Class<T>
  spec.java:
  - uid: java.lang.Class
    name: Class
    fullName: java.lang.Class
  - name: <
    fullName: <
  - uid: T
    name: T
    fullName: T
  - name: '>'
    fullName: '>'
- uid: java.lang.String
  spec.java:
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
- uid: com.azure.cosmos.implementation.guava25.base.Optional<T>
  spec.java:
  - uid: com.azure.cosmos.implementation.guava25.base.Optional
    name: Optional
    fullName: com.azure.cosmos.implementation.guava25.base.Optional
  - name: <
    fullName: <
  - uid: T
    name: T
    fullName: T
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.base.Enums.getIfPresent*
  name: <T>getIfPresent
  nameWithType: Enums.<T>getIfPresent
  fullName: com.azure.cosmos.implementation.guava25.base.Enums.<T>getIfPresent
  package: com.azure.cosmos.implementation.guava25.base
- uid: com.azure.cosmos.implementation.guava25.base.Converter<java.lang.String,T>
  spec.java:
  - uid: com.azure.cosmos.implementation.guava25.base.Converter
    name: Converter
    fullName: com.azure.cosmos.implementation.guava25.base.Converter
  - name: <
    fullName: <
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
  - name: ','
    fullName: ','
  - uid: T
    name: T
    fullName: T
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.base.Enums.stringConverter*
  name: <T>stringConverter
  nameWithType: Enums.<T>stringConverter
  fullName: com.azure.cosmos.implementation.guava25.base.Enums.<T>stringConverter
  package: com.azure.cosmos.implementation.guava25.base
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: java.lang.Object.finalize()
  name: Object.finalize()
  nameWithType: Object.finalize()
  fullName: java.lang.Object.finalize()
- uid: java.lang.Object.clone()
  name: Object.clone()
  nameWithType: Object.clone()
  fullName: java.lang.Object.clone()
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: java.lang.Object.equals(java.lang.Object)
  name: Object.equals(Object)
  nameWithType: Object.equals(Object)
  fullName: java.lang.Object.equals(java.lang.Object)
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.lang.Object.hashCode()
  name: Object.hashCode()
  nameWithType: Object.hashCode()
  fullName: java.lang.Object.hashCode()
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: java.lang.Object.toString()
  name: Object.toString()
  nameWithType: Object.toString()
  fullName: java.lang.Object.toString()
- uid: java.lang.Enum
  name: Enum
  nameWithType: Enum
  fullName: java.lang.Enum
- uid: '?'
  name: '?'
  nameWithType: '?'
  fullName: '?'
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: java.lang.Class
  name: Class
  nameWithType: Class
  fullName: java.lang.Class
- uid: com.azure.cosmos.implementation.guava25.base.Optional
  name: Optional
  nameWithType: Optional
  fullName: com.azure.cosmos.implementation.guava25.base.Optional
- uid: java.lang.String,T
  name: String,T
  nameWithType: String,T
  fullName: java.lang.String,T
- uid: com.azure.cosmos.implementation.guava25.base.Converter
  name: Converter
  nameWithType: Converter
  fullName: com.azure.cosmos.implementation.guava25.base.Converter
