### YamlMime:JavaType
uid: "com.azure.core.experimental.http.DynamicRequest"
fullName: "com.azure.core.experimental.http.DynamicRequest"
name: "DynamicRequest"
nameWithType: "DynamicRequest"
summary: "This class facilitates constructing and sending a HTTP request. <xref uid=\"com.azure.core.experimental.http.DynamicRequest\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DynamicRequest\"></xref> can be used to configure the endpoint to which the request is sent, the request headers, path params, query params and the request body.\n\nAn instance of <xref uid=\"com.azure.core.experimental.http.DynamicRequest\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DynamicRequest\"></xref> can be created by either directly calling the constructor with an <xref uid=\"com.azure.core.util.serializer.ObjectSerializer\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ObjectSerializer\"></xref> and <xref uid=\"com.azure.core.http.HttpPipeline\" data-throw-if-not-resolved=\"false\" data-raw-source=\"HttpPipeline\"></xref> or obtained from a service client that preconfigures known components of the request like URL, path params etc.\n\nTo demonstrate how this class can be used to construct a request, let's use a Pet Store service as an example. The list of APIs available on this service are [documented in the swagger definition.][]\n\n**Creating an instance of DynamicRequest using the constructor**\n\n```java\nObjectSerializer serializer = JsonSerializerProviders.createInstance(true);\n HttpPipeline pipeline = new HttpPipelineBuilder().build();\n DynamicRequest dynamicRequest = new DynamicRequest(serializer, pipeline);\n```\n\nAn Azure service client may provide methods that are specific to the service which returns an instance <xref uid=\"com.azure.core.experimental.http.DynamicRequest\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DynamicRequest\"></xref> that comes preconfigured with some request components like the endpoint, required path params, headers etc.\n\n**Configuring the request with a path param and making a HTTP GET request**\n\nContinuing with the pet store example, getting information about a pet requires making a [HTTP GET call to the pet service][] and setting the pet id in path param as shown in the sample below.\n\n```java\nDynamicResponse response = dynamicRequest\n     .setUrl(\"https://petstore.example.com/pet/{petId}\") // may already be set if request is created from a client\n     .setPathParam(\"petId\", \"2343245\")\n     .send(); // makes the service call\n```\n\n**Configuring the request with JSON body and making a HTTP POST request**\n\nTo [add a new pet to the pet store][], a HTTP POST call should be made to the service with the details of the pet that is to be added. The details of the pet are included as the request body in JSON format. The JSON structure for the request is defined as follows:\n\n```java\n{\n   \"id\": 0,\n   \"category\": {\n     \"id\": 0,\n     \"name\": \"string\"\n   },\n   \"name\": \"doggie\",\n   \"photoUrls\": [\n     \"string\"\n   ],\n   \"tags\": [\n     {\n       \"id\": 0,\n       \"name\": \"string\"\n     }\n   ],\n   \"status\": \"available\"\n }\n```\n\nTo create a concrete request, Json builder provided in javax package is used here for demonstration. However, any other Json building library can be used to achieve similar results.\n\n```java\nJsonArray photoUrls = Json.createArrayBuilder()\n     .add(\"https://imgur.com/pet1\")\n     .add(\"https://imgur.com/pet2\")\n     .build();\n \n JsonArray tags = Json.createArrayBuilder()\n     .add(Json.createObjectBuilder()\n         .add(\"id\", 0)\n         .add(\"name\", \"Labrador\")\n         .build())\n     .add(Json.createObjectBuilder()\n         .add(\"id\", 1)\n         .add(\"name\", \"2021\")\n         .build())\n     .build();\n \n JsonObject requestBody = Json.createObjectBuilder()\n     .add(\"id\", 0)\n     .add(\"name\", \"foo\")\n     .add(\"status\", \"available\")\n     .add(\"category\", Json.createObjectBuilder().add(\"id\", 0).add(\"name\", \"dog\"))\n     .add(\"photoUrls\", photoUrls)\n     .add(\"tags\", tags)\n     .build();\n \n String requestBodyStr = requestBody.toString();\n```\n\nNow, this string representation of the JSON request can be set as body of DynamicRequest\n\n```java\nDynamicResponse response = dynamicRequest\n     .setUrl(\"https://petstore.example.com/pet\") // may already be set if request is created from a client\n     .addHeader(\"Content-Type\", \"application/json\")\n     .setBody(requestBodyStr)\n     .send(); // makes the service call\n```\n\n\n[documented in the swagger definition.]: https://petstore.swagger.io/#/pet\n[HTTP GET call to the pet service]: https://petstore.swagger.io/#/pet/getPetById\n[add a new pet to the pet store]: https://petstore.swagger.io/#/pet/addPet"
inheritances:
- "<xref href=\"java.lang.Object\" data-throw-if-not-resolved=\"False\" />"
inheritedMembers:
- "java.lang.Object.clone()"
- "java.lang.Object.equals(java.lang.Object)"
- "java.lang.Object.finalize()"
- "java.lang.Object.getClass()"
- "java.lang.Object.hashCode()"
- "java.lang.Object.notify()"
- "java.lang.Object.notifyAll()"
- "java.lang.Object.toString()"
- "java.lang.Object.wait()"
- "java.lang.Object.wait(long)"
- "java.lang.Object.wait(long,int)"
syntax: "public final class DynamicRequest"
constructors:
- "com.azure.core.experimental.http.DynamicRequest.DynamicRequest(com.azure.core.util.serializer.ObjectSerializer,com.azure.core.http.HttpPipeline)"
methods:
- "com.azure.core.experimental.http.DynamicRequest.addHeader(com.azure.core.http.HttpHeader)"
- "com.azure.core.experimental.http.DynamicRequest.addHeader(java.lang.String,java.lang.String)"
- "com.azure.core.experimental.http.DynamicRequest.addQueryParam(java.lang.String,java.lang.String)"
- "com.azure.core.experimental.http.DynamicRequest.getHttpPipeline()"
- "com.azure.core.experimental.http.DynamicRequest.getObjectSerializer()"
- "com.azure.core.experimental.http.DynamicRequest.send()"
- "com.azure.core.experimental.http.DynamicRequest.send(com.azure.core.util.Context)"
- "com.azure.core.experimental.http.DynamicRequest.sendAsync()"
- "com.azure.core.experimental.http.DynamicRequest.setBody(java.lang.Object)"
- "com.azure.core.experimental.http.DynamicRequest.setBody(java.lang.String)"
- "com.azure.core.experimental.http.DynamicRequest.setHeaders(com.azure.core.http.HttpHeaders)"
- "com.azure.core.experimental.http.DynamicRequest.setHttpMethod(com.azure.core.http.HttpMethod)"
- "com.azure.core.experimental.http.DynamicRequest.setPathParam(java.lang.String,java.lang.String)"
- "com.azure.core.experimental.http.DynamicRequest.setUrl(java.lang.String)"
type: "class"
metadata: {}
package: "com.azure.core.experimental.http"
artifact: com.azure:azure-core-experimental:1.0.0-beta.12
