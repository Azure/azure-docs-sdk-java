### YamlMime:JavaType
uid: "com.azure.maps.traffic.TrafficAsyncClient"
fullName: "com.azure.maps.traffic.TrafficAsyncClient"
name: "TrafficAsyncClient"
nameWithType: "TrafficAsyncClient"
summary: "Initializes a new instance of the asynchronous Traffic<wbr>Client type."
inheritances:
- "<xref href=\"java.lang.Object?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
inheritedClassMethods:
- classRef: "java.lang.<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html\">Object</a>"
  methodsRef:
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#clone--\">clone</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#equals-java.lang.Object-\">equals</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#finalize--\">finalize</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#getClass--\">getClass</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#hashCode--\">hashCode</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#notify--\">notify</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#notifyAll--\">notifyAll</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#toString--\">toString</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#wait--\">wait</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#wait-long-\">wait</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#wait-long-int-\">wait</a>"
syntax: "public final class **TrafficAsyncClient**"
methods:
- uid: "com.azure.maps.traffic.TrafficAsyncClient.getTrafficFlowSegment(com.azure.maps.traffic.models.TrafficFlowSegmentOptions)"
  fullName: "com.azure.maps.traffic.TrafficAsyncClient.getTrafficFlowSegment(TrafficFlowSegmentOptions options)"
  name: "getTrafficFlowSegment(TrafficFlowSegmentOptions options)"
  nameWithType: "TrafficAsyncClient.getTrafficFlowSegment(TrafficFlowSegmentOptions options)"
  summary: "\\_\\_Traffic Flow Segment\\_\\_"
  parameters:
  - description: "<xref uid=\"com.azure.maps.traffic.models.TrafficFlowSegmentOptions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"TrafficFlowSegmentOptions\"></xref> the options to be used in this search."
    name: "options"
    type: "<xref href=\"com.azure.maps.traffic.models.TrafficFlowSegmentOptions?alt=com.azure.maps.traffic.models.TrafficFlowSegmentOptions&text=TrafficFlowSegmentOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<TrafficFlowSegmentData> getTrafficFlowSegment(TrafficFlowSegmentOptions options)"
  desc: "\\_\\_Traffic Flow Segment\\_\\_\n\n```java\nSystem.out.println(\"Get Traffic Flow Segment:\");\n\n // options\n asyncClient.getTrafficFlowSegment(\n     new TrafficFlowSegmentOptions()\n         .setTrafficFlowSegmentStyle(TrafficFlowSegmentStyle.ABSOLUTE).setZoom(10)\n         .setCoordinates(new GeoPosition(4.84239, 52.41072)));\n\n // complete\n asyncClient.getTrafficFlowSegment(\n     new TrafficFlowSegmentOptions()\n         .setTrafficFlowSegmentStyle(TrafficFlowSegmentStyle.ABSOLUTE).setZoom(10)\n         .setCoordinates(new GeoPosition(4.84239, 52.41072)).setOpenLr(false)\n         .setThickness(2).setUnit(SpeedUnit.MPH));\n```\n\n\\*\\*Applies to\\*\\*: S0 and S1 pricing tiers.\n\nThis service provides information about the speeds and travel times of the road fragment closest to the given coordinates. It is designed to work alongside the Flow layer of the Render Service to support clickable flow data visualizations. With this API, the client side can connect any place in the map with flow data on the closest road and present it to the user."
  returns:
    description: "this object is returned from a successful Traffic Flow Segment call."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.maps.traffic.models.TrafficFlowSegmentData?alt=com.azure.maps.traffic.models.TrafficFlowSegmentData&text=TrafficFlowSegmentData\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.maps.traffic.TrafficAsyncClient.getTrafficFlowSegmentWithResponse(com.azure.maps.traffic.models.TrafficFlowSegmentOptions)"
  fullName: "com.azure.maps.traffic.TrafficAsyncClient.getTrafficFlowSegmentWithResponse(TrafficFlowSegmentOptions options)"
  name: "getTrafficFlowSegmentWithResponse(TrafficFlowSegmentOptions options)"
  nameWithType: "TrafficAsyncClient.getTrafficFlowSegmentWithResponse(TrafficFlowSegmentOptions options)"
  summary: "\\_\\_Traffic Flow Segment\\_\\_"
  parameters:
  - description: "<xref uid=\"com.azure.maps.traffic.models.TrafficFlowSegmentOptions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"TrafficFlowSegmentOptions\"></xref> the options to be used in this search."
    name: "options"
    type: "<xref href=\"com.azure.maps.traffic.models.TrafficFlowSegmentOptions?alt=com.azure.maps.traffic.models.TrafficFlowSegmentOptions&text=TrafficFlowSegmentOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<TrafficFlowSegmentData>> getTrafficFlowSegmentWithResponse(TrafficFlowSegmentOptions options)"
  desc: "\\_\\_Traffic Flow Segment\\_\\_\n\n```java\nSystem.out.println(\"Get Traffic Flow Segment:\");\n\n // options\n asyncClient.getTrafficFlowSegment(\n     new TrafficFlowSegmentOptions()\n         .setTrafficFlowSegmentStyle(TrafficFlowSegmentStyle.ABSOLUTE).setZoom(10)\n         .setCoordinates(new GeoPosition(4.84239, 52.41072)));\n\n // complete\n asyncClient.getTrafficFlowSegment(\n     new TrafficFlowSegmentOptions()\n         .setTrafficFlowSegmentStyle(TrafficFlowSegmentStyle.ABSOLUTE).setZoom(10)\n         .setCoordinates(new GeoPosition(4.84239, 52.41072)).setOpenLr(false)\n         .setThickness(2).setUnit(SpeedUnit.MPH));\n```\n\n\\*\\*Applies to\\*\\*: S0 and S1 pricing tiers.\n\nThis service provides information about the speeds and travel times of the road fragment closest to the given coordinates. It is designed to work alongside the Flow layer of the Render Service to support clickable flow data visualizations. With this API, the client side can connect any place in the map with flow data on the closest road and present it to the user."
  returns:
    description: "this object is returned from a successful Traffic Flow Segment call."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.maps.traffic.models.TrafficFlowSegmentData?alt=com.azure.maps.traffic.models.TrafficFlowSegmentData&text=TrafficFlowSegmentData\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.maps.traffic.TrafficAsyncClient.getTrafficFlowTile(com.azure.maps.traffic.models.TrafficFlowTileOptions)"
  fullName: "com.azure.maps.traffic.TrafficAsyncClient.getTrafficFlowTile(TrafficFlowTileOptions options)"
  name: "getTrafficFlowTile(TrafficFlowTileOptions options)"
  nameWithType: "TrafficAsyncClient.getTrafficFlowTile(TrafficFlowTileOptions options)"
  summary: "\\_\\_Traffic Flow Tile\\_\\_"
  parameters:
  - description: "<xref uid=\"com.azure.maps.traffic.models.TrafficFlowTileOptions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"TrafficFlowTileOptions\"></xref> the options to be used in this search."
    name: "options"
    type: "<xref href=\"com.azure.maps.traffic.models.TrafficFlowTileOptions?alt=com.azure.maps.traffic.models.TrafficFlowTileOptions&text=TrafficFlowTileOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<BinaryData> getTrafficFlowTile(TrafficFlowTileOptions options)"
  desc: "\\_\\_Traffic Flow Tile\\_\\_\n\n```java\nSystem.out.println(\"Get Traffic Flow Tile:\");\n\n // options\n asyncClient.getTrafficFlowTile(\n     new TrafficFlowTileOptions()\n         .setTrafficFlowTileStyle(TrafficFlowTileStyle.RELATIVE_DELAY).setFormat(TileFormat.PNG).setZoom(10));\n\n // complete\n asyncClient.getTrafficFlowTile(\n     new TrafficFlowTileOptions()\n         .setTrafficFlowTileStyle(TrafficFlowTileStyle.RELATIVE_DELAY).setFormat(TileFormat.PNG).setZoom(10)\n         .setTileIndex(new TileIndex().setX(2044).setY(1360)).setThickness(10));\n```\n\n\\*\\*Applies to\\*\\*: S0 and S1 pricing tiers.\n\nThe Azure Flow Tile API serves 256 x 256 pixel tiles showing traffic flow. All tiles use the same grid system. Because the traffic tiles use transparent images, they can be layered on top of map tiles to create a compound display. The Flow tiles use colors to indicate either the speed of traffic on different road segments, or the difference between that speed and the free-flow speed on the road segment in question."
  returns:
    description: "the response."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.maps.traffic.TrafficAsyncClient.getTrafficFlowTileWithResponse(com.azure.maps.traffic.models.TrafficFlowTileOptions)"
  fullName: "com.azure.maps.traffic.TrafficAsyncClient.getTrafficFlowTileWithResponse(TrafficFlowTileOptions options)"
  name: "getTrafficFlowTileWithResponse(TrafficFlowTileOptions options)"
  nameWithType: "TrafficAsyncClient.getTrafficFlowTileWithResponse(TrafficFlowTileOptions options)"
  summary: "\\_\\_Traffic Flow Tile\\_\\_"
  parameters:
  - description: "<xref uid=\"com.azure.maps.traffic.models.TrafficFlowTileOptions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"TrafficFlowTileOptions\"></xref> the options to be used in this search."
    name: "options"
    type: "<xref href=\"com.azure.maps.traffic.models.TrafficFlowTileOptions?alt=com.azure.maps.traffic.models.TrafficFlowTileOptions&text=TrafficFlowTileOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<BinaryData>> getTrafficFlowTileWithResponse(TrafficFlowTileOptions options)"
  desc: "\\_\\_Traffic Flow Tile\\_\\_\n\n```java\nSystem.out.println(\"Get Traffic Flow Tile:\");\n\n // options\n asyncClient.getTrafficFlowTile(\n     new TrafficFlowTileOptions()\n         .setTrafficFlowTileStyle(TrafficFlowTileStyle.RELATIVE_DELAY).setFormat(TileFormat.PNG).setZoom(10));\n\n // complete\n asyncClient.getTrafficFlowTile(\n     new TrafficFlowTileOptions()\n         .setTrafficFlowTileStyle(TrafficFlowTileStyle.RELATIVE_DELAY).setFormat(TileFormat.PNG).setZoom(10)\n         .setTileIndex(new TileIndex().setX(2044).setY(1360)).setThickness(10));\n```\n\n\\*\\*Applies to\\*\\*: S0 and S1 pricing tiers.\n\nThe Azure Flow Tile API serves 256 x 256 pixel tiles showing traffic flow. All tiles use the same grid system. Because the traffic tiles use transparent images, they can be layered on top of map tiles to create a compound display. The Flow tiles use colors to indicate either the speed of traffic on different road segments, or the difference between that speed and the free-flow speed on the road segment in question."
  returns:
    description: "the response."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.maps.traffic.TrafficAsyncClient.getTrafficIncidentDetail(com.azure.maps.traffic.models.TrafficIncidentDetailOptions)"
  fullName: "com.azure.maps.traffic.TrafficAsyncClient.getTrafficIncidentDetail(TrafficIncidentDetailOptions options)"
  name: "getTrafficIncidentDetail(TrafficIncidentDetailOptions options)"
  nameWithType: "TrafficAsyncClient.getTrafficIncidentDetail(TrafficIncidentDetailOptions options)"
  summary: "\\_\\_Traffic Incident Detail\\_\\_"
  parameters:
  - description: "<xref uid=\"com.azure.maps.traffic.models.TrafficIncidentDetailOptions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"TrafficIncidentDetailOptions\"></xref> the options to be used in this search."
    name: "options"
    type: "<xref href=\"com.azure.maps.traffic.models.TrafficIncidentDetailOptions?alt=com.azure.maps.traffic.models.TrafficIncidentDetailOptions&text=TrafficIncidentDetailOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<TrafficIncidentDetail> getTrafficIncidentDetail(TrafficIncidentDetailOptions options)"
  desc: "\\_\\_Traffic Incident Detail\\_\\_\n\n```java\nSystem.out.println(\"Get Traffic Incident Detail:\");\n\n // options\n client.getTrafficIncidentDetail(\n     new TrafficIncidentDetailOptions()\n         .setBoundingBox(new GeoBoundingBox(45, 45, 45, 45)).setBoundingZoom(11)\n         .setIncidentDetailStyle(IncidentDetailStyle.S3).setBoundingZoom(11)\n         .setTrafficmodelId(\"1335294634919\"));\n\n // complete\n client.getTrafficIncidentDetail(\n     new TrafficIncidentDetailOptions()\n         .setBoundingBox(new GeoBoundingBox(45, 45, 45, 45)).setBoundingZoom(11)\n         .setIncidentDetailStyle(IncidentDetailStyle.S3).setBoundingZoom(11)\n         .setTrafficmodelId(\"1335294634919\").setLanguage(\"en\")\n         .setProjectionStandard(ProjectionStandard.EPSG900913).setIncidentGeometryType(IncidentGeometryType.ORIGINAL)\n         .setExpandCluster(false).setOriginalPosition(false));\n```\n\n\\*\\*Applies to\\*\\*: S0 and S1 pricing tiers.\n\nThis API provides information on traffic incidents inside a given bounding box, based on the current Traffic Model ID. The Traffic Model ID is available to grant synchronization of data between calls and API's. The Traffic Model ID is a key value for determining the currency of traffic incidents. It is updated every minute, and is valid for two minutes before it times out. It is used in rendering \\[incident tiles\\](https://docs.microsoft.com/rest/api/maps/traffic/gettrafficincidenttile). It can be obtained from the \\[Viewport API\\](https://docs.microsoft.com/rest/api/maps/traffic/gettrafficincidentviewport)."
  returns:
    description: "this object is returned from a successful Traffic incident Detail call."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.maps.traffic.models.TrafficIncidentDetail?alt=com.azure.maps.traffic.models.TrafficIncidentDetail&text=TrafficIncidentDetail\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.maps.traffic.TrafficAsyncClient.getTrafficIncidentDetailWithResponse(com.azure.maps.traffic.models.TrafficIncidentDetailOptions)"
  fullName: "com.azure.maps.traffic.TrafficAsyncClient.getTrafficIncidentDetailWithResponse(TrafficIncidentDetailOptions options)"
  name: "getTrafficIncidentDetailWithResponse(TrafficIncidentDetailOptions options)"
  nameWithType: "TrafficAsyncClient.getTrafficIncidentDetailWithResponse(TrafficIncidentDetailOptions options)"
  summary: "\\_\\_Traffic Incident Detail\\_\\_"
  parameters:
  - description: "<xref uid=\"com.azure.maps.traffic.models.TrafficIncidentDetailOptions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"TrafficIncidentDetailOptions\"></xref> the options to be used in this search."
    name: "options"
    type: "<xref href=\"com.azure.maps.traffic.models.TrafficIncidentDetailOptions?alt=com.azure.maps.traffic.models.TrafficIncidentDetailOptions&text=TrafficIncidentDetailOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<TrafficIncidentDetail>> getTrafficIncidentDetailWithResponse(TrafficIncidentDetailOptions options)"
  desc: "\\_\\_Traffic Incident Detail\\_\\_\n\n```java\nSystem.out.println(\"Get Traffic Incident Detail:\");\n\n // options\n client.getTrafficIncidentDetail(\n     new TrafficIncidentDetailOptions()\n         .setBoundingBox(new GeoBoundingBox(45, 45, 45, 45)).setBoundingZoom(11)\n         .setIncidentDetailStyle(IncidentDetailStyle.S3).setBoundingZoom(11)\n         .setTrafficmodelId(\"1335294634919\"));\n\n // complete\n client.getTrafficIncidentDetail(\n     new TrafficIncidentDetailOptions()\n         .setBoundingBox(new GeoBoundingBox(45, 45, 45, 45)).setBoundingZoom(11)\n         .setIncidentDetailStyle(IncidentDetailStyle.S3).setBoundingZoom(11)\n         .setTrafficmodelId(\"1335294634919\").setLanguage(\"en\")\n         .setProjectionStandard(ProjectionStandard.EPSG900913).setIncidentGeometryType(IncidentGeometryType.ORIGINAL)\n         .setExpandCluster(false).setOriginalPosition(false));\n```\n\n\\*\\*Applies to\\*\\*: S0 and S1 pricing tiers.\n\nThis API provides information on traffic incidents inside a given bounding box, based on the current Traffic Model ID. The Traffic Model ID is available to grant synchronization of data between calls and API's. The Traffic Model ID is a key value for determining the currency of traffic incidents. It is updated every minute, and is valid for two minutes before it times out. It is used in rendering \\[incident tiles\\](https://docs.microsoft.com/rest/api/maps/traffic/gettrafficincidenttile). It can be obtained from the \\[Viewport API\\](https://docs.microsoft.com/rest/api/maps/traffic/gettrafficincidentviewport)."
  returns:
    description: "this object is returned from a successful Traffic incident Detail call."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.maps.traffic.models.TrafficIncidentDetail?alt=com.azure.maps.traffic.models.TrafficIncidentDetail&text=TrafficIncidentDetail\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.maps.traffic.TrafficAsyncClient.getTrafficIncidentTile(com.azure.maps.traffic.models.TrafficIncidentTileOptions)"
  fullName: "com.azure.maps.traffic.TrafficAsyncClient.getTrafficIncidentTile(TrafficIncidentTileOptions options)"
  name: "getTrafficIncidentTile(TrafficIncidentTileOptions options)"
  nameWithType: "TrafficAsyncClient.getTrafficIncidentTile(TrafficIncidentTileOptions options)"
  summary: "\\_\\_Traffic Incident Tile\\_\\_"
  parameters:
  - description: "<xref uid=\"com.azure.maps.traffic.models.TrafficIncidentTileOptions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"TrafficIncidentTileOptions\"></xref> the options to be used in this search."
    name: "options"
    type: "<xref href=\"com.azure.maps.traffic.models.TrafficIncidentTileOptions?alt=com.azure.maps.traffic.models.TrafficIncidentTileOptions&text=TrafficIncidentTileOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<BinaryData> getTrafficIncidentTile(TrafficIncidentTileOptions options)"
  desc: "\\_\\_Traffic Incident Tile\\_\\_\n\n```java\nSystem.out.println(\"Get Traffic Incident Tile:\");\n\n // options\n client.getTrafficIncidentTile(\n     new TrafficIncidentTileOptions()\n         .setFormat(TileFormat.PNG).setTrafficIncidentTileStyle(TrafficIncidentTileStyle.S3)\n         .setZoom(10));\n\n // complete\n client.getTrafficIncidentTile(\n     new TrafficIncidentTileOptions()\n         .setFormat(TileFormat.PNG).setTrafficIncidentTileStyle(TrafficIncidentTileStyle.S3)\n         .setZoom(10).setTileIndex(new TileIndex().setX(175).setY(408)));\n```\n\n\\*\\*Applies to\\*\\*: S0 and S1 pricing tiers.\n\nThis service serves 256 x 256 pixel tiles showing traffic incidents. All tiles use the same grid system. Because the traffic tiles use transparent images, they can be layered on top of map tiles to create a compound display. Traffic tiles render graphics to indicate traffic on the roads in the specified area."
  returns:
    description: "the response."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.maps.traffic.TrafficAsyncClient.getTrafficIncidentTileWithResponse(com.azure.maps.traffic.models.TrafficIncidentTileOptions)"
  fullName: "com.azure.maps.traffic.TrafficAsyncClient.getTrafficIncidentTileWithResponse(TrafficIncidentTileOptions options)"
  name: "getTrafficIncidentTileWithResponse(TrafficIncidentTileOptions options)"
  nameWithType: "TrafficAsyncClient.getTrafficIncidentTileWithResponse(TrafficIncidentTileOptions options)"
  summary: "\\_\\_Traffic Incident Tile\\_\\_"
  parameters:
  - description: "<xref uid=\"com.azure.maps.traffic.models.TrafficIncidentTileOptions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"TrafficIncidentTileOptions\"></xref> the options to be used in this search."
    name: "options"
    type: "<xref href=\"com.azure.maps.traffic.models.TrafficIncidentTileOptions?alt=com.azure.maps.traffic.models.TrafficIncidentTileOptions&text=TrafficIncidentTileOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<BinaryData>> getTrafficIncidentTileWithResponse(TrafficIncidentTileOptions options)"
  desc: "\\_\\_Traffic Incident Tile\\_\\_\n\n```java\nSystem.out.println(\"Get Traffic Incident Tile:\");\n\n // options\n client.getTrafficIncidentTile(\n     new TrafficIncidentTileOptions()\n         .setFormat(TileFormat.PNG).setTrafficIncidentTileStyle(TrafficIncidentTileStyle.S3)\n         .setZoom(10));\n\n // complete\n client.getTrafficIncidentTile(\n     new TrafficIncidentTileOptions()\n         .setFormat(TileFormat.PNG).setTrafficIncidentTileStyle(TrafficIncidentTileStyle.S3)\n         .setZoom(10).setTileIndex(new TileIndex().setX(175).setY(408)));\n```\n\n\\*\\*Applies to\\*\\*: S0 and S1 pricing tiers.\n\nThis service serves 256 x 256 pixel tiles showing traffic incidents. All tiles use the same grid system. Because the traffic tiles use transparent images, they can be layered on top of map tiles to create a compound display. Traffic tiles render graphics to indicate traffic on the roads in the specified area."
  returns:
    description: "the response."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.maps.traffic.TrafficAsyncClient.getTrafficIncidentViewport(com.azure.maps.traffic.models.TrafficIncidentViewportOptions)"
  fullName: "com.azure.maps.traffic.TrafficAsyncClient.getTrafficIncidentViewport(TrafficIncidentViewportOptions options)"
  name: "getTrafficIncidentViewport(TrafficIncidentViewportOptions options)"
  nameWithType: "TrafficAsyncClient.getTrafficIncidentViewport(TrafficIncidentViewportOptions options)"
  summary: "\\_\\_Traffic Incident Viewport\\_\\_"
  parameters:
  - description: "<xref uid=\"com.azure.maps.traffic.models.TrafficIncidentViewportOptions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"TrafficIncidentViewportOptions\"></xref> the options to be used in this search."
    name: "options"
    type: "<xref href=\"com.azure.maps.traffic.models.TrafficIncidentViewportOptions?alt=com.azure.maps.traffic.models.TrafficIncidentViewportOptions&text=TrafficIncidentViewportOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<TrafficIncidentViewport> getTrafficIncidentViewport(TrafficIncidentViewportOptions options)"
  desc: "\\_\\_Traffic Incident Viewport\\_\\_\n\n```java\nSystem.out.println(\"Get Traffic Incident Tile:\");\n\n // options\n client.getTrafficIncidentViewport(\n     new TrafficIncidentViewportOptions()\n         .setBoundingBox(new GeoBoundingBox(45, 45, 45, 45))\n         .setBoundingZoom(2).setOverview(new GeoBoundingBox(45, 45, 45, 45))\n         .setOverviewZoom(2));\n\n // complete\n client.getTrafficIncidentViewport(\n     new TrafficIncidentViewportOptions()\n         .setBoundingBox(new GeoBoundingBox(45, 45, 45, 45))\n         .setBoundingZoom(2).setOverview(new GeoBoundingBox(45, 45, 45, 45))\n         .setOverviewZoom(2).setCopyright(true));\n```\n\n\\*\\*Applies to\\*\\*: S0 and S1 pricing tiers.\n\nThis API returns legal and technical information for the viewport described in the request. It should be called by client applications whenever the viewport changes (for instance, through zooming, panning, going to a location, or displaying a route). The request should contain the bounding box and zoom level of the viewport whose information is needed. The return will contain map version information, as well as the current Traffic Model ID and copyright IDs. The Traffic Model ID returned by the Viewport Description is used by other APIs to retrieve last traffic information for further processing."
  returns:
    description: "this object is returned from a successful Traffic Incident Viewport call."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.maps.traffic.models.TrafficIncidentViewport?alt=com.azure.maps.traffic.models.TrafficIncidentViewport&text=TrafficIncidentViewport\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.maps.traffic.TrafficAsyncClient.getTrafficIncidentViewportWithResponse(com.azure.maps.traffic.models.TrafficIncidentViewportOptions)"
  fullName: "com.azure.maps.traffic.TrafficAsyncClient.getTrafficIncidentViewportWithResponse(TrafficIncidentViewportOptions options)"
  name: "getTrafficIncidentViewportWithResponse(TrafficIncidentViewportOptions options)"
  nameWithType: "TrafficAsyncClient.getTrafficIncidentViewportWithResponse(TrafficIncidentViewportOptions options)"
  summary: "\\_\\_Traffic Incident Viewport\\_\\_"
  parameters:
  - description: "<xref uid=\"com.azure.maps.traffic.models.TrafficIncidentViewportOptions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"TrafficIncidentViewportOptions\"></xref> the options to be used in this search."
    name: "options"
    type: "<xref href=\"com.azure.maps.traffic.models.TrafficIncidentViewportOptions?alt=com.azure.maps.traffic.models.TrafficIncidentViewportOptions&text=TrafficIncidentViewportOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<TrafficIncidentViewport>> getTrafficIncidentViewportWithResponse(TrafficIncidentViewportOptions options)"
  desc: "\\_\\_Traffic Incident Viewport\\_\\_\n\n```java\nSystem.out.println(\"Get Traffic Incident Tile:\");\n\n // options\n client.getTrafficIncidentViewport(\n     new TrafficIncidentViewportOptions()\n         .setBoundingBox(new GeoBoundingBox(45, 45, 45, 45))\n         .setBoundingZoom(2).setOverview(new GeoBoundingBox(45, 45, 45, 45))\n         .setOverviewZoom(2));\n\n // complete\n client.getTrafficIncidentViewport(\n     new TrafficIncidentViewportOptions()\n         .setBoundingBox(new GeoBoundingBox(45, 45, 45, 45))\n         .setBoundingZoom(2).setOverview(new GeoBoundingBox(45, 45, 45, 45))\n         .setOverviewZoom(2).setCopyright(true));\n```\n\n\\*\\*Applies to\\*\\*: S0 and S1 pricing tiers.\n\nThis API returns legal and technical information for the viewport described in the request. It should be called by client applications whenever the viewport changes (for instance, through zooming, panning, going to a location, or displaying a route). The request should contain the bounding box and zoom level of the viewport whose information is needed. The return will contain map version information, as well as the current Traffic Model ID and copyright IDs. The Traffic Model ID returned by the Viewport Description is used by other APIs to retrieve last traffic information for further processing."
  returns:
    description: "this object is returned from a successful Traffic Incident Viewport call."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.maps.traffic.models.TrafficIncidentViewport?alt=com.azure.maps.traffic.models.TrafficIncidentViewport&text=TrafficIncidentViewport\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
type: "class"
desc: "Initializes a new instance of the asynchronous TrafficClient type. Creating an async client using a <xref uid=\"com.azure.core.credential.AzureKeyCredential\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.azure.core.credential.AzureKeyCredential\"></xref>:\n\n```java\n// Authenticates using subscription key\n AzureKeyCredential keyCredential = new AzureKeyCredential(System.getenv(\"SUBSCRIPTION_KEY\"));\n\n // Creates a builder\n TrafficClientBuilder builder = new TrafficClientBuilder();\n builder.credential(keyCredential);\n builder.httpLogOptions(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BODY_AND_HEADERS));\n\n // Builds the client\n TrafficAsyncClient client = builder.buildAsyncClient();\n```\n\n```java\n// Authenticates using Azure AD building a default credential\n // This will look for AZURE_CLIENT_ID, AZURE_TENANT_ID, and AZURE_CLIENT_SECRET env variables\n DefaultAzureCredential tokenCredential = new DefaultAzureCredentialBuilder().build();\n\n // Creates a builder\n TrafficClientBuilder builder = new TrafficClientBuilder();\n builder.credential(tokenCredential);\n builder.trafficClientId(System.getenv(\"MAPS_CLIENT_ID\"));\n builder.httpLogOptions(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BODY_AND_HEADERS));\n\n // Builds a client\n TrafficAsyncClient client = builder.buildAsyncClient();\n```"
metadata: {}
package: "com.azure.maps.traffic"
artifact: com.azure:azure-maps-traffic:1.0.0-beta.1
