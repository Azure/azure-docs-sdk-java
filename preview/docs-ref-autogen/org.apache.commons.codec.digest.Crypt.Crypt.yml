### YamlMime:JavaMember
uid: "org.apache.commons.codec.digest.Crypt.crypt*"
fullName: "org.apache.commons.codec.digest.Crypt.crypt"
name: "crypt"
nameWithType: "Crypt.crypt"
members:
- uid: "org.apache.commons.codec.digest.Crypt.crypt(byte[])"
  fullName: "org.apache.commons.codec.digest.Crypt.crypt(byte[] keyBytes)"
  name: "crypt(byte[] keyBytes)"
  nameWithType: "Crypt.crypt(byte[] keyBytes)"
  summary: "Encrypts a password in a crypt(3) compatible way.\n\nA random salt and the default algorithm (currently SHA-512) are used. See <xref uid=\"org.apache.commons.codec.digest.Crypt.crypt(java.lang.String,java.lang.String)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#crypt(String, String)\"></xref> for details.\n\nA salt is generated for you using <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ThreadLocalRandom\"></xref>; for more secure salts consider using <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"SecureRandom\"></xref> to generate your own salts and calling <xref uid=\"org.apache.commons.codec.digest.Crypt.crypt(byte[],java.lang.String)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#crypt(byte[], String)\"></xref>."
  parameters:
  - description: "plaintext password"
    name: "keyBytes"
    type: "<xref href=\"byte?alt=byte&text=byte\" data-throw-if-not-resolved=\"False\" />[]"
  syntax: "public static String crypt(byte[] keyBytes)"
  returns:
    description: "hash value"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "org.apache.commons.codec.digest.Crypt.crypt(byte[],java.lang.String)"
  fullName: "org.apache.commons.codec.digest.Crypt.crypt(byte[] keyBytes, String salt)"
  name: "crypt(byte[] keyBytes, String salt)"
  nameWithType: "Crypt.crypt(byte[] keyBytes, String salt)"
  summary: "Encrypts a password in a crypt(3) compatible way.\n\nIf no salt is provided, a random salt and the default algorithm (currently SHA-512) will be used. See <xref uid=\"org.apache.commons.codec.digest.Crypt.crypt(java.lang.String,java.lang.String)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#crypt(String, String)\"></xref> for details."
  parameters:
  - description: "plaintext password"
    name: "keyBytes"
    type: "<xref href=\"byte?alt=byte&text=byte\" data-throw-if-not-resolved=\"False\" />[]"
  - description: "real salt value without prefix or \"rounds=\". The salt may be null,\n            in which case a salt is generated for you using <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ThreadLocalRandom\"></xref>;\n            for more secure salts consider using <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"SecureRandom\"></xref> to\n            generate your own salts."
    name: "salt"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public static String crypt(byte[] keyBytes, String salt)"
  returns:
    description: "hash value"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "org.apache.commons.codec.digest.Crypt.crypt(java.lang.String)"
  fullName: "org.apache.commons.codec.digest.Crypt.crypt(String key)"
  name: "crypt(String key)"
  nameWithType: "Crypt.crypt(String key)"
  summary: "Calculates the digest using the strongest crypt(3) algorithm.\n\nA random salt and the default algorithm (currently SHA-512) are used.\n\nA salt is generated for you using <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ThreadLocalRandom\"></xref>; for more secure salts consider using <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"SecureRandom\"></xref> to generate your own salts and calling <xref uid=\"org.apache.commons.codec.digest.Crypt.crypt(java.lang.String,java.lang.String)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#crypt(String, String)\"></xref>."
  parameters:
  - description: "plaintext password"
    name: "key"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public static String crypt(String key)"
  returns:
    description: "hash value"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "org.apache.commons.codec.digest.Crypt.crypt(java.lang.String,java.lang.String)"
  fullName: "org.apache.commons.codec.digest.Crypt.crypt(String key, String salt)"
  name: "crypt(String key, String salt)"
  nameWithType: "Crypt.crypt(String key, String salt)"
  summary: "Encrypts a password in a crypt(3) compatible way.\n\nThe exact algorithm depends on the format of the salt string:\n\n *  SHA-512 salts start with `$6$` and are up to 16 chars long.\n *  SHA-256 salts start with `$5$` and are up to 16 chars long\n *  MD5 salts start with `$1$` and are up to 8 chars long\n *  DES, the traditional UnixCrypt algorithm is used with only 2 chars\n *  Only the first 8 chars of the passwords are used in the DES algorithm!\n\nThe magic strings `\"$apr1$\"` and `\"$2a$\"` are not recognized by this method as its output should be identical with that of the libc implementation.\n\nThe rest of the salt string is drawn from the set `[a-zA-Z0-9./]` and is cut at the maximum length of if a `\"$\"` sign is encountered. It is therefore valid to enter a complete hash value as salt to e.g. verify a password with:\n\n```java\nstoredPwd.equals(crypt(enteredPwd, storedPwd))\n```\n\nThe resulting string starts with the marker string (`$n$`), where n is the same as the input salt. The salt is then appended, followed by a `\"$\"` sign. This is followed by the actual hash value. For DES the string only contains the salt and actual hash. The total length is dependent on the algorithm used:\n\n *  SHA-512: 106 chars\n *  SHA-256: 63 chars\n *  MD5: 34 chars\n *  DES: 13 chars\n\nExample:\n\n```java\ncrypt(\"secret\", \"$1$xxxx\") => \"$1$xxxx$aMkevjfEIpa35Bh3G4bAc.\"\n      crypt(\"secret\", \"xx\") => \"xxWAum7tHdIUw\"\n```\n\nThis method comes in a variation that accepts a byte\\[\\] array to support input strings that are not encoded in UTF-8 but e.g. in ISO-8859-1 where equal characters result in different byte values."
  parameters:
  - description: "plaintext password as entered by the used"
    name: "key"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "real salt value without prefix or \"rounds=\". The salt may be null, in which case a\n            salt is generated for you using <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ThreadLocalRandom\"></xref>; for more secure salts\n            consider using <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"SecureRandom\"></xref> to generate your own salts."
    name: "salt"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public static String crypt(String key, String salt)"
  returns:
    description: "hash value, i.e. encrypted password including the salt string"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
type: "method"
metadata: {}
package: "org.apache.commons.codec.digest"
artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
