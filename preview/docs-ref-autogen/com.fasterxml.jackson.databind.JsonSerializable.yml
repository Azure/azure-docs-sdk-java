### YamlMime:JavaType
uid: "com.fasterxml.jackson.databind.JsonSerializable"
fullName: "com.fasterxml.jackson.databind.JsonSerializable"
name: "JsonSerializable"
nameWithType: "JsonSerializable"
summary: "Interface that can be implemented by objects that know how to serialize themselves to JSON, using <xref uid=\"com.fasterxml.jackson.core.JsonGenerator\" data-throw-if-not-resolved=\"false\" data-raw-source=\"JsonGenerator\"></xref> (and <xref uid=\"com.fasterxml.jackson.databind.SerializerProvider\" data-throw-if-not-resolved=\"false\" data-raw-source=\"SerializerProvider\"></xref> if necessary).\n\nNote that implementing this interface binds implementing object closely to Jackson API, and that it is often not necessary to do so -- if class is a bean, it can be serialized without implementing this interface.\n\nNote that while it is possible to just directly implement <xref uid=\"com.fasterxml.jackson.databind.JsonSerializable\" data-throw-if-not-resolved=\"false\" data-raw-source=\"JsonSerializable\"></xref>, actual implementations are strongly recommended to instead extend <xref uid=\"com.fasterxml.jackson.databind.JsonSerializable.Base\" data-throw-if-not-resolved=\"false\" data-raw-source=\"JsonSerializable.Base\"></xref>."
syntax: "public interface JsonSerializable"
methods:
- "com.fasterxml.jackson.databind.JsonSerializable.serialize(com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)"
- "com.fasterxml.jackson.databind.JsonSerializable.serializeWithType(com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.jsontype.TypeSerializer)"
type: "interface"
metadata: {}
package: "com.fasterxml.jackson.databind"
artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
