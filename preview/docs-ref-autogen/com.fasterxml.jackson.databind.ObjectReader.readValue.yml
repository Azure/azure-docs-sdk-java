### YamlMime:JavaMember
uid: "com.fasterxml.jackson.databind.ObjectReader.readValue*"
fullName: "com.fasterxml.jackson.databind.ObjectReader.<T>readValue"
name: "<T>readValue"
nameWithType: "ObjectReader.<T>readValue"
members:
- uid: "com.fasterxml.jackson.databind.ObjectReader.<T>readValue(byte[])"
  fullName: "com.fasterxml.jackson.databind.ObjectReader.<T>readValue(byte[] content)"
  name: "<T>readValue(byte[] content)"
  nameWithType: "ObjectReader.<T>readValue(byte[] content)"
  summary: "Method that binds content read from given byte array, using configuration of this reader. Value return is either newly constructed, or root value that was specified with <xref uid=\"com.fasterxml.jackson.databind.ObjectReader.withValueToUpdate(java.lang.Object)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#withValueToUpdate(Object)\"></xref>."
  parameters:
  - description: "Byte array that contains encoded content to read"
    name: "content"
    type: "<xref href=\"byte?alt=byte&text=byte\" data-throw-if-not-resolved=\"False\" />[]"
  syntax: "public T <T>readValue(byte[] content)"
  exceptions:
  - type: "<xref href=\"java.io.IOException?alt=java.io.IOException&text=IOException\" data-throw-if-not-resolved=\"False\" />"
  returns:
    type: "<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.fasterxml.jackson.databind.ObjectReader.<T>readValue(byte[],int,int)"
  fullName: "com.fasterxml.jackson.databind.ObjectReader.<T>readValue(byte[] buffer, int offset, int length)"
  name: "<T>readValue(byte[] buffer, int offset, int length)"
  nameWithType: "ObjectReader.<T>readValue(byte[] buffer, int offset, int length)"
  summary: "Method that binds content read from given byte array, using configuration of this reader. Value return is either newly constructed, or root value that was specified with <xref uid=\"com.fasterxml.jackson.databind.ObjectReader.withValueToUpdate(java.lang.Object)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#withValueToUpdate(Object)\"></xref>."
  parameters:
  - description: "Byte array that contains encoded content to read"
    name: "buffer"
    type: "<xref href=\"byte?alt=byte&text=byte\" data-throw-if-not-resolved=\"False\" />[]"
  - description: "Offset of the first content byte in <code>buffer</code>"
    name: "offset"
    type: "<xref href=\"int?alt=int&text=int\" data-throw-if-not-resolved=\"False\" />"
  - description: "Length of content in <code>buffer</code>, in bytes"
    name: "length"
    type: "<xref href=\"int?alt=int&text=int\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public T <T>readValue(byte[] buffer, int offset, int length)"
  exceptions:
  - type: "<xref href=\"java.io.IOException?alt=java.io.IOException&text=IOException\" data-throw-if-not-resolved=\"False\" />"
  returns:
    type: "<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.fasterxml.jackson.databind.ObjectReader.<T>readValue(byte[],int,int,java.lang.Class<T>)"
  fullName: "com.fasterxml.jackson.databind.ObjectReader.<T>readValue(byte[] buffer, int offset, int length, Class<T> valueType)"
  name: "<T>readValue(byte[] buffer, int offset, int length, Class<T> valueType)"
  nameWithType: "ObjectReader.<T>readValue(byte[] buffer, int offset, int length, Class<T> valueType)"
  summary: "Same as <xref uid=\"com.fasterxml.jackson.databind.ObjectReader.&lt;T&gt;readValue(byte[],int,int)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#readValue(byte[],int,int)\"></xref> except that target value type overridden as `valueType`"
  parameters:
  - description: "Byte array that contains encoded content to read"
    name: "buffer"
    type: "<xref href=\"byte?alt=byte&text=byte\" data-throw-if-not-resolved=\"False\" />[]"
  - description: "Offset of the first content byte in <code>buffer</code>"
    name: "offset"
    type: "<xref href=\"int?alt=int&text=int\" data-throw-if-not-resolved=\"False\" />"
  - description: "Length of content in <code>buffer</code>, in bytes"
    name: "length"
    type: "<xref href=\"int?alt=int&text=int\" data-throw-if-not-resolved=\"False\" />"
  - description: "Target type to bind content to"
    name: "valueType"
    type: "<xref href=\"java.lang.Class?alt=java.lang.Class&text=Class\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public T <T>readValue(byte[] buffer, int offset, int length, Class<T> valueType)"
  exceptions:
  - type: "<xref href=\"java.io.IOException?alt=java.io.IOException&text=IOException\" data-throw-if-not-resolved=\"False\" />"
  returns:
    type: "<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.fasterxml.jackson.databind.ObjectReader.<T>readValue(byte[],java.lang.Class<T>)"
  fullName: "com.fasterxml.jackson.databind.ObjectReader.<T>readValue(byte[] content, Class<T> valueType)"
  name: "<T>readValue(byte[] content, Class<T> valueType)"
  nameWithType: "ObjectReader.<T>readValue(byte[] content, Class<T> valueType)"
  summary: "Same as <xref uid=\"com.fasterxml.jackson.databind.ObjectReader.&lt;T&gt;readValue(byte[])\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#readValue(byte[])\"></xref> except that target value type overridden as `valueType`"
  parameters:
  - description: "Byte array that contains encoded content to read"
    name: "content"
    type: "<xref href=\"byte?alt=byte&text=byte\" data-throw-if-not-resolved=\"False\" />[]"
  - description: "Target type to bind content to"
    name: "valueType"
    type: "<xref href=\"java.lang.Class?alt=java.lang.Class&text=Class\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public T <T>readValue(byte[] content, Class<T> valueType)"
  exceptions:
  - type: "<xref href=\"java.io.IOException?alt=java.io.IOException&text=IOException\" data-throw-if-not-resolved=\"False\" />"
  returns:
    type: "<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.fasterxml.jackson.databind.ObjectReader.<T>readValue(com.fasterxml.jackson.core.JsonParser)"
  fullName: "com.fasterxml.jackson.databind.ObjectReader.<T>readValue(JsonParser p)"
  name: "<T>readValue(JsonParser p)"
  nameWithType: "ObjectReader.<T>readValue(JsonParser p)"
  summary: "Method that binds content read using given parser, using configuration of this reader, including expected result type. Value return is either newly constructed, or root value that was specified with <xref uid=\"com.fasterxml.jackson.databind.ObjectReader.withValueToUpdate(java.lang.Object)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#withValueToUpdate(Object)\"></xref>.\n\nNOTE: this method never tries to auto-detect format, since actual (data-format specific) parser is given."
  parameters:
  - name: "p"
    type: "<xref href=\"com.fasterxml.jackson.core.JsonParser?alt=com.fasterxml.jackson.core.JsonParser&text=JsonParser\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public T <T>readValue(JsonParser p)"
  exceptions:
  - type: "<xref href=\"java.io.IOException?alt=java.io.IOException&text=IOException\" data-throw-if-not-resolved=\"False\" />"
  returns:
    type: "<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.fasterxml.jackson.databind.ObjectReader.<T>readValue(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.core.type.ResolvedType)"
  fullName: "com.fasterxml.jackson.databind.ObjectReader.<T>readValue(JsonParser p, ResolvedType valueType)"
  name: "<T>readValue(JsonParser p, ResolvedType valueType)"
  nameWithType: "ObjectReader.<T>readValue(JsonParser p, ResolvedType valueType)"
  summary: "Convenience method that binds content read using given parser, using configuration of this reader, except that expected value type is specified with the call (instead of currently configured root type). Value return is either newly constructed, or root value that was specified with <xref uid=\"com.fasterxml.jackson.databind.ObjectReader.withValueToUpdate(java.lang.Object)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#withValueToUpdate(Object)\"></xref>.\n\nNOTE: this method never tries to auto-detect format, since actual (data-format specific) parser is given."
  overridden: "com.fasterxml.jackson.core.ObjectCodec.<T>readValue(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.core.type.ResolvedType)"
  parameters:
  - name: "p"
    type: "<xref href=\"com.fasterxml.jackson.core.JsonParser?alt=com.fasterxml.jackson.core.JsonParser&text=JsonParser\" data-throw-if-not-resolved=\"False\" />"
  - name: "valueType"
    type: "<xref href=\"com.fasterxml.jackson.core.type.ResolvedType?alt=com.fasterxml.jackson.core.type.ResolvedType&text=ResolvedType\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public T <T>readValue(JsonParser p, ResolvedType valueType)"
  exceptions:
  - type: "<xref href=\"java.io.IOException?alt=java.io.IOException&text=IOException\" data-throw-if-not-resolved=\"False\" />"
  returns:
    type: "<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.fasterxml.jackson.databind.ObjectReader.<T>readValue(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.core.type.TypeReference<T>)"
  fullName: "com.fasterxml.jackson.databind.ObjectReader.<T>readValue(JsonParser p, TypeReference<T> valueTypeRef)"
  name: "<T>readValue(JsonParser p, TypeReference<T> valueTypeRef)"
  nameWithType: "ObjectReader.<T>readValue(JsonParser p, TypeReference<T> valueTypeRef)"
  summary: "Convenience method that binds content read using given parser, using configuration of this reader, except that expected value type is specified with the call (instead of currently configured root type). Value return is either newly constructed, or root value that was specified with <xref uid=\"com.fasterxml.jackson.databind.ObjectReader.withValueToUpdate(java.lang.Object)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#withValueToUpdate(Object)\"></xref>.\n\nNOTE: this method never tries to auto-detect format, since actual (data-format specific) parser is given."
  overridden: "com.fasterxml.jackson.core.ObjectCodec.<T>readValue(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.core.type.TypeReference<T>)"
  parameters:
  - name: "p"
    type: "<xref href=\"com.fasterxml.jackson.core.JsonParser?alt=com.fasterxml.jackson.core.JsonParser&text=JsonParser\" data-throw-if-not-resolved=\"False\" />"
  - name: "valueTypeRef"
    type: "<xref href=\"com.fasterxml.jackson.core.type.TypeReference?alt=com.fasterxml.jackson.core.type.TypeReference&text=TypeReference\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public T <T>readValue(JsonParser p, TypeReference<T> valueTypeRef)"
  exceptions:
  - type: "<xref href=\"java.io.IOException?alt=java.io.IOException&text=IOException\" data-throw-if-not-resolved=\"False\" />"
  returns:
    type: "<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.fasterxml.jackson.databind.ObjectReader.<T>readValue(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.JavaType)"
  fullName: "com.fasterxml.jackson.databind.ObjectReader.<T>readValue(JsonParser p, JavaType valueType)"
  name: "<T>readValue(JsonParser p, JavaType valueType)"
  nameWithType: "ObjectReader.<T>readValue(JsonParser p, JavaType valueType)"
  summary: "Type-safe overloaded method, basically alias for <xref uid=\"com.fasterxml.jackson.databind.ObjectReader.&lt;T&gt;readValue(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.core.type.ResolvedType)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#readValue(JsonParser, ResolvedType)\"></xref>.\n\nNOTE: this method never tries to auto-detect format, since actual (data-format specific) parser is given."
  parameters:
  - name: "p"
    type: "<xref href=\"com.fasterxml.jackson.core.JsonParser?alt=com.fasterxml.jackson.core.JsonParser&text=JsonParser\" data-throw-if-not-resolved=\"False\" />"
  - name: "valueType"
    type: "<xref href=\"com.fasterxml.jackson.databind.JavaType?alt=com.fasterxml.jackson.databind.JavaType&text=JavaType\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public T <T>readValue(JsonParser p, JavaType valueType)"
  exceptions:
  - type: "<xref href=\"java.io.IOException?alt=java.io.IOException&text=IOException\" data-throw-if-not-resolved=\"False\" />"
  returns:
    type: "<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.fasterxml.jackson.databind.ObjectReader.<T>readValue(com.fasterxml.jackson.core.JsonParser,java.lang.Class<T>)"
  fullName: "com.fasterxml.jackson.databind.ObjectReader.<T>readValue(JsonParser p, Class<T> valueType)"
  name: "<T>readValue(JsonParser p, Class<T> valueType)"
  nameWithType: "ObjectReader.<T>readValue(JsonParser p, Class<T> valueType)"
  summary: "Convenience method that binds content read using given parser, using configuration of this reader, except that expected value type is specified with the call (instead of currently configured root type). Value return is either newly constructed, or root value that was specified with <xref uid=\"com.fasterxml.jackson.databind.ObjectReader.withValueToUpdate(java.lang.Object)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#withValueToUpdate(Object)\"></xref>.\n\nNOTE: this method never tries to auto-detect format, since actual (data-format specific) parser is given."
  overridden: "com.fasterxml.jackson.core.ObjectCodec.<T>readValue(com.fasterxml.jackson.core.JsonParser,java.lang.Class<T>)"
  parameters:
  - name: "p"
    type: "<xref href=\"com.fasterxml.jackson.core.JsonParser?alt=com.fasterxml.jackson.core.JsonParser&text=JsonParser\" data-throw-if-not-resolved=\"False\" />"
  - name: "valueType"
    type: "<xref href=\"java.lang.Class?alt=java.lang.Class&text=Class\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public T <T>readValue(JsonParser p, Class<T> valueType)"
  exceptions:
  - type: "<xref href=\"java.io.IOException?alt=java.io.IOException&text=IOException\" data-throw-if-not-resolved=\"False\" />"
  returns:
    type: "<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.fasterxml.jackson.databind.ObjectReader.<T>readValue(com.fasterxml.jackson.databind.JsonNode)"
  fullName: "com.fasterxml.jackson.databind.ObjectReader.<T>readValue(JsonNode content)"
  name: "<T>readValue(JsonNode content)"
  nameWithType: "ObjectReader.<T>readValue(JsonNode content)"
  summary: "Convenience method for converting results from given JSON tree into given value type. Basically short-cut for:\n\n```java\nobjectReader.readValue(src.traverse())\n```"
  parameters:
  - description: "Tree that contains content to convert"
    name: "content"
    type: "<xref href=\"com.fasterxml.jackson.databind.JsonNode?alt=com.fasterxml.jackson.databind.JsonNode&text=JsonNode\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public T <T>readValue(JsonNode content)"
  exceptions:
  - type: "<xref href=\"java.io.IOException?alt=java.io.IOException&text=IOException\" data-throw-if-not-resolved=\"False\" />"
  returns:
    type: "<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.fasterxml.jackson.databind.ObjectReader.<T>readValue(com.fasterxml.jackson.databind.JsonNode,java.lang.Class<T>)"
  fullName: "com.fasterxml.jackson.databind.ObjectReader.<T>readValue(JsonNode content, Class<T> valueType)"
  name: "<T>readValue(JsonNode content, Class<T> valueType)"
  nameWithType: "ObjectReader.<T>readValue(JsonNode content, Class<T> valueType)"
  summary: "Same as <xref uid=\"com.fasterxml.jackson.databind.ObjectReader.&lt;T&gt;readValue(com.fasterxml.jackson.databind.JsonNode)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#readValue(JsonNode)\"></xref> except that target value type overridden as `valueType`"
  parameters:
  - description: "Tree that contains content to convert"
    name: "content"
    type: "<xref href=\"com.fasterxml.jackson.databind.JsonNode?alt=com.fasterxml.jackson.databind.JsonNode&text=JsonNode\" data-throw-if-not-resolved=\"False\" />"
  - description: "Target type to convert content to"
    name: "valueType"
    type: "<xref href=\"java.lang.Class?alt=java.lang.Class&text=Class\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public T <T>readValue(JsonNode content, Class<T> valueType)"
  exceptions:
  - type: "<xref href=\"java.io.IOException?alt=java.io.IOException&text=IOException\" data-throw-if-not-resolved=\"False\" />"
  returns:
    type: "<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.fasterxml.jackson.databind.ObjectReader.<T>readValue(java.io.DataInput)"
  fullName: "com.fasterxml.jackson.databind.ObjectReader.<T>readValue(DataInput src)"
  name: "<T>readValue(DataInput src)"
  nameWithType: "ObjectReader.<T>readValue(DataInput src)"
  parameters:
  - name: "src"
    type: "<xref href=\"java.io.DataInput?alt=java.io.DataInput&text=DataInput\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public T <T>readValue(DataInput src)"
  exceptions:
  - type: "<xref href=\"java.io.IOException?alt=java.io.IOException&text=IOException\" data-throw-if-not-resolved=\"False\" />"
  returns:
    type: "<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.fasterxml.jackson.databind.ObjectReader.<T>readValue(java.io.DataInput,java.lang.Class<T>)"
  fullName: "com.fasterxml.jackson.databind.ObjectReader.<T>readValue(DataInput content, Class<T> valueType)"
  name: "<T>readValue(DataInput content, Class<T> valueType)"
  nameWithType: "ObjectReader.<T>readValue(DataInput content, Class<T> valueType)"
  summary: "Same as <xref uid=\"com.fasterxml.jackson.databind.ObjectReader.&lt;T&gt;readValue(java.io.DataInput)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#readValue(DataInput)\"></xref> except that target value type overridden as `valueType`"
  parameters:
  - description: "DataInput that contains content to read"
    name: "content"
    type: "<xref href=\"java.io.DataInput?alt=java.io.DataInput&text=DataInput\" data-throw-if-not-resolved=\"False\" />"
  - description: "Target type to bind content to"
    name: "valueType"
    type: "<xref href=\"java.lang.Class?alt=java.lang.Class&text=Class\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public T <T>readValue(DataInput content, Class<T> valueType)"
  exceptions:
  - type: "<xref href=\"java.io.IOException?alt=java.io.IOException&text=IOException\" data-throw-if-not-resolved=\"False\" />"
  returns:
    type: "<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.fasterxml.jackson.databind.ObjectReader.<T>readValue(java.io.File)"
  fullName: "com.fasterxml.jackson.databind.ObjectReader.<T>readValue(File src)"
  name: "<T>readValue(File src)"
  nameWithType: "ObjectReader.<T>readValue(File src)"
  summary: "Method that binds content read from given <xref uid=\"java.io.File\" data-throw-if-not-resolved=\"false\" data-raw-source=\"File\"></xref> using configuration of this reader. Value return is either newly constructed, or root value that was specified with <xref uid=\"com.fasterxml.jackson.databind.ObjectReader.withValueToUpdate(java.lang.Object)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#withValueToUpdate(Object)\"></xref>."
  parameters:
  - description: "File that contains content to read"
    name: "src"
    type: "<xref href=\"java.io.File?alt=java.io.File&text=File\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public T <T>readValue(File src)"
  exceptions:
  - type: "<xref href=\"java.io.IOException?alt=java.io.IOException&text=IOException\" data-throw-if-not-resolved=\"False\" />"
  returns:
    type: "<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.fasterxml.jackson.databind.ObjectReader.<T>readValue(java.io.File,java.lang.Class<T>)"
  fullName: "com.fasterxml.jackson.databind.ObjectReader.<T>readValue(File src, Class<T> valueType)"
  name: "<T>readValue(File src, Class<T> valueType)"
  nameWithType: "ObjectReader.<T>readValue(File src, Class<T> valueType)"
  summary: "Same as <xref uid=\"com.fasterxml.jackson.databind.ObjectReader.&lt;T&gt;readValue(java.io.File)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#readValue(File)\"></xref> except that target value type overridden as `valueType`"
  parameters:
  - description: "File that contains content to read"
    name: "src"
    type: "<xref href=\"java.io.File?alt=java.io.File&text=File\" data-throw-if-not-resolved=\"False\" />"
  - description: "Target type to bind content to"
    name: "valueType"
    type: "<xref href=\"java.lang.Class?alt=java.lang.Class&text=Class\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public T <T>readValue(File src, Class<T> valueType)"
  exceptions:
  - type: "<xref href=\"java.io.IOException?alt=java.io.IOException&text=IOException\" data-throw-if-not-resolved=\"False\" />"
  returns:
    type: "<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.fasterxml.jackson.databind.ObjectReader.<T>readValue(java.io.InputStream)"
  fullName: "com.fasterxml.jackson.databind.ObjectReader.<T>readValue(InputStream src)"
  name: "<T>readValue(InputStream src)"
  nameWithType: "ObjectReader.<T>readValue(InputStream src)"
  summary: "Method that binds content read from given input source, using configuration of this reader. Value return is either newly constructed, or root value that was specified with <xref uid=\"com.fasterxml.jackson.databind.ObjectReader.withValueToUpdate(java.lang.Object)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#withValueToUpdate(Object)\"></xref>."
  parameters:
  - description: "Source to read content from"
    name: "src"
    type: "<xref href=\"java.io.InputStream?alt=java.io.InputStream&text=InputStream\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public T <T>readValue(InputStream src)"
  exceptions:
  - type: "<xref href=\"java.io.IOException?alt=java.io.IOException&text=IOException\" data-throw-if-not-resolved=\"False\" />"
  returns:
    type: "<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.fasterxml.jackson.databind.ObjectReader.<T>readValue(java.io.InputStream,java.lang.Class<T>)"
  fullName: "com.fasterxml.jackson.databind.ObjectReader.<T>readValue(InputStream src, Class<T> valueType)"
  name: "<T>readValue(InputStream src, Class<T> valueType)"
  nameWithType: "ObjectReader.<T>readValue(InputStream src, Class<T> valueType)"
  summary: "Same as <xref uid=\"com.fasterxml.jackson.databind.ObjectReader.&lt;T&gt;readValue(java.io.InputStream)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#readValue(InputStream)\"></xref> except that target value type overridden as `valueType`"
  parameters:
  - description: "Source to read content from"
    name: "src"
    type: "<xref href=\"java.io.InputStream?alt=java.io.InputStream&text=InputStream\" data-throw-if-not-resolved=\"False\" />"
  - description: "Target type to bind content to"
    name: "valueType"
    type: "<xref href=\"java.lang.Class?alt=java.lang.Class&text=Class\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public T <T>readValue(InputStream src, Class<T> valueType)"
  exceptions:
  - type: "<xref href=\"java.io.IOException?alt=java.io.IOException&text=IOException\" data-throw-if-not-resolved=\"False\" />"
  returns:
    type: "<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.fasterxml.jackson.databind.ObjectReader.<T>readValue(java.io.Reader)"
  fullName: "com.fasterxml.jackson.databind.ObjectReader.<T>readValue(Reader src)"
  name: "<T>readValue(Reader src)"
  nameWithType: "ObjectReader.<T>readValue(Reader src)"
  summary: "Method that binds content read from given input source, using configuration of this reader. Value return is either newly constructed, or root value that was specified with <xref uid=\"com.fasterxml.jackson.databind.ObjectReader.withValueToUpdate(java.lang.Object)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#withValueToUpdate(Object)\"></xref>."
  parameters:
  - description: "Source to read content from"
    name: "src"
    type: "<xref href=\"java.io.Reader?alt=java.io.Reader&text=Reader\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public T <T>readValue(Reader src)"
  exceptions:
  - type: "<xref href=\"java.io.IOException?alt=java.io.IOException&text=IOException\" data-throw-if-not-resolved=\"False\" />"
  returns:
    type: "<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.fasterxml.jackson.databind.ObjectReader.<T>readValue(java.io.Reader,java.lang.Class<T>)"
  fullName: "com.fasterxml.jackson.databind.ObjectReader.<T>readValue(Reader src, Class<T> valueType)"
  name: "<T>readValue(Reader src, Class<T> valueType)"
  nameWithType: "ObjectReader.<T>readValue(Reader src, Class<T> valueType)"
  summary: "Same as <xref uid=\"com.fasterxml.jackson.databind.ObjectReader.&lt;T&gt;readValue(java.io.Reader)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#readValue(Reader)\"></xref> except that target value type overridden as `valueType`"
  parameters:
  - description: "Source to read content from"
    name: "src"
    type: "<xref href=\"java.io.Reader?alt=java.io.Reader&text=Reader\" data-throw-if-not-resolved=\"False\" />"
  - description: "Target type to bind content to"
    name: "valueType"
    type: "<xref href=\"java.lang.Class?alt=java.lang.Class&text=Class\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public T <T>readValue(Reader src, Class<T> valueType)"
  exceptions:
  - type: "<xref href=\"java.io.IOException?alt=java.io.IOException&text=IOException\" data-throw-if-not-resolved=\"False\" />"
  returns:
    type: "<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.fasterxml.jackson.databind.ObjectReader.<T>readValue(java.lang.String)"
  fullName: "com.fasterxml.jackson.databind.ObjectReader.<T>readValue(String src)"
  name: "<T>readValue(String src)"
  nameWithType: "ObjectReader.<T>readValue(String src)"
  summary: "Method that binds content read from given JSON string, using configuration of this reader. Value return is either newly constructed, or root value that was specified with <xref uid=\"com.fasterxml.jackson.databind.ObjectReader.withValueToUpdate(java.lang.Object)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#withValueToUpdate(Object)\"></xref>."
  parameters:
  - description: "String that contains content to read"
    name: "src"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public T <T>readValue(String src)"
  exceptions:
  - type: "<xref href=\"com.fasterxml.jackson.core.JsonProcessingException?alt=com.fasterxml.jackson.core.JsonProcessingException&text=JsonProcessingException\" data-throw-if-not-resolved=\"False\" />"
  - type: "<xref href=\"com.fasterxml.jackson.databind.JsonMappingException?alt=com.fasterxml.jackson.databind.JsonMappingException&text=JsonMappingException\" data-throw-if-not-resolved=\"False\" />"
  returns:
    type: "<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.fasterxml.jackson.databind.ObjectReader.<T>readValue(java.lang.String,java.lang.Class<T>)"
  fullName: "com.fasterxml.jackson.databind.ObjectReader.<T>readValue(String src, Class<T> valueType)"
  name: "<T>readValue(String src, Class<T> valueType)"
  nameWithType: "ObjectReader.<T>readValue(String src, Class<T> valueType)"
  summary: "Same as <xref uid=\"com.fasterxml.jackson.databind.ObjectReader.&lt;T&gt;readValue(java.lang.String)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#readValue(String)\"></xref> except that target value type overridden as `valueType`"
  parameters:
  - description: "String that contains content to read"
    name: "src"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Target type to bind content to"
    name: "valueType"
    type: "<xref href=\"java.lang.Class?alt=java.lang.Class&text=Class\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public T <T>readValue(String src, Class<T> valueType)"
  exceptions:
  - type: "<xref href=\"java.io.IOException?alt=java.io.IOException&text=IOException\" data-throw-if-not-resolved=\"False\" />"
  returns:
    type: "<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.fasterxml.jackson.databind.ObjectReader.<T>readValue(java.net.URL)"
  fullName: "com.fasterxml.jackson.databind.ObjectReader.<T>readValue(URL src)"
  name: "<T>readValue(URL src)"
  nameWithType: "ObjectReader.<T>readValue(URL src)"
  summary: "Method that binds content read from given input source, using configuration of this reader. Value return is either newly constructed, or root value that was specified with <xref uid=\"com.fasterxml.jackson.databind.ObjectReader.withValueToUpdate(java.lang.Object)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#withValueToUpdate(Object)\"></xref>.\n\nNOTE: handling of <xref uid=\"java.net.URL\" data-throw-if-not-resolved=\"false\" data-raw-source=\"java.net.URL\"></xref> is delegated to <xref uid=\"com.fasterxml.jackson.core.JsonFactory.createParser(java.net.URL)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"JsonFactory#createParser(java.net.URL)\"></xref> and usually simply calls <xref uid=\"java.net.URL.openStream*\" data-throw-if-not-resolved=\"false\" data-raw-source=\"java.net.URL#openStream()\"></xref>, meaning no special handling is done. If different HTTP connection options are needed you will need to create <xref uid=\"java.io.InputStream\" data-throw-if-not-resolved=\"false\" data-raw-source=\"java.io.InputStream\"></xref> separately."
  parameters:
  - name: "src"
    type: "<xref href=\"java.net.URL?alt=java.net.URL&text=URL\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public T <T>readValue(URL src)"
  exceptions:
  - type: "<xref href=\"java.io.IOException?alt=java.io.IOException&text=IOException\" data-throw-if-not-resolved=\"False\" />"
  returns:
    type: "<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.fasterxml.jackson.databind.ObjectReader.<T>readValue(java.net.URL,java.lang.Class<T>)"
  fullName: "com.fasterxml.jackson.databind.ObjectReader.<T>readValue(URL src, Class<T> valueType)"
  name: "<T>readValue(URL src, Class<T> valueType)"
  nameWithType: "ObjectReader.<T>readValue(URL src, Class<T> valueType)"
  summary: "Same as <xref uid=\"com.fasterxml.jackson.databind.ObjectReader.&lt;T&gt;readValue(java.net.URL)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#readValue(URL)\"></xref> except that target value type overridden as `valueType`"
  parameters:
  - description: "URL pointing to resource that contains content to read"
    name: "src"
    type: "<xref href=\"java.net.URL?alt=java.net.URL&text=URL\" data-throw-if-not-resolved=\"False\" />"
  - description: "Target type to bind content to"
    name: "valueType"
    type: "<xref href=\"java.lang.Class?alt=java.lang.Class&text=Class\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public T <T>readValue(URL src, Class<T> valueType)"
  exceptions:
  - type: "<xref href=\"java.io.IOException?alt=java.io.IOException&text=IOException\" data-throw-if-not-resolved=\"False\" />"
  returns:
    type: "<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />"
type: "method"
metadata: {}
package: "com.fasterxml.jackson.databind"
artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
