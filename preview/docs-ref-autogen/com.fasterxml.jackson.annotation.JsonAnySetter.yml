### YamlMime:ManagedReference
items:
- uid: com.fasterxml.jackson.annotation.JsonAnySetter
  id: JsonAnySetter
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.annotation
  children:
  - com.fasterxml.jackson.annotation.JsonAnySetter.enabled()
  langs:
  - java
  name: JsonAnySetter
  nameWithType: JsonAnySetter
  fullName: com.fasterxml.jackson.annotation.JsonAnySetter
  type: Interface
  package: com.fasterxml.jackson.annotation
  summary: >-
    Marker annotation that can be used to define a logical "any setter" mutator -- either using non-static two-argument method (first argument name of property, second value to set) or a field (of type <xref uid="java.util.Map" data-throw-if-not-resolved="false">java.util.Map</xref> or POJO) - to be used as a "fallback" handler for all otherwise unrecognized properties found from JSON content. It is similar to `javax.xml.bind.annotation.XmlAnyElement` in behavior; and can only be used to denote a single property per type.


    If used, all otherwise unmapped key-value pairs from JSON Object values are added using mutator.


    NOTE: ability to annotated fields was added in version 2.8; earlier only methods could be annotated.
  syntax:
    content: public interface JsonAnySetter implements Annotation
  implements:
  - java.lang.annotation.Annotation
- uid: com.fasterxml.jackson.annotation.JsonAnySetter.enabled()
  id: enabled()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.annotation.JsonAnySetter
  langs:
  - java
  name: enabled()
  nameWithType: JsonAnySetter.enabled()
  fullName: com.fasterxml.jackson.annotation.JsonAnySetter.enabled()
  overload: com.fasterxml.jackson.annotation.JsonAnySetter.enabled*
  type: Method
  package: com.fasterxml.jackson.annotation
  summary: Optional argument that defines whether this annotation is active or not. The only use for value 'false' if for overriding purposes. Overriding may be necessary when used with "mix-in annotations" (aka "annotation overrides"). For most cases, however, default value of "true" is just fine and should be omitted.
  syntax:
    content: public abstract boolean enabled()
    return:
      type: boolean
      description: >-
        True if annotation is enabled (normal case); false if it is to
           be ignored (only useful for mix-in annotations to "mask" annotation)
references:
- uid: boolean
  spec.java:
  - uid: boolean
    name: boolean
    fullName: boolean
- uid: com.fasterxml.jackson.annotation.JsonAnySetter.enabled*
  name: enabled
  nameWithType: JsonAnySetter.enabled
  fullName: com.fasterxml.jackson.annotation.JsonAnySetter.enabled
  package: com.fasterxml.jackson.annotation
- uid: java.lang.annotation.Annotation
  name: Annotation
  nameWithType: Annotation
  fullName: java.lang.annotation.Annotation
