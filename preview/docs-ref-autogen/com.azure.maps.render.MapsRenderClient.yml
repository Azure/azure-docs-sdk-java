### YamlMime:JavaType
uid: "com.azure.maps.render.MapsRenderClient"
fullName: "com.azure.maps.render.MapsRenderClient"
name: "MapsRenderClient"
nameWithType: "MapsRenderClient"
summary: "Initializes a new instance of the synchronous Render<wbr>Client type."
inheritances:
- "<xref href=\"java.lang.Object?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
inheritedClassMethods:
- classRef: "java.lang.<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html\">Object</a>"
  methodsRef:
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#clone--\">clone</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#equals-java.lang.Object-\">equals</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#finalize--\">finalize</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#getClass--\">getClass</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#hashCode--\">hashCode</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#notify--\">notify</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#notifyAll--\">notifyAll</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#toString--\">toString</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#wait--\">wait</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#wait-long-\">wait</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#wait-long-int-\">wait</a>"
syntax: "public final class **MapsRenderClient**"
methods:
- uid: "com.azure.maps.render.MapsRenderClient.downloadMapStateTile(java.io.OutputStream,java.lang.String,com.azure.maps.render.models.TileIndex)"
  fullName: "com.azure.maps.render.MapsRenderClient.downloadMapStateTile(OutputStream stream, String statesetId, TileIndex tileIndex)"
  name: "downloadMapStateTile(OutputStream stream, String statesetId, TileIndex tileIndex)"
  nameWithType: "MapsRenderClient.downloadMapStateTile(OutputStream stream, String statesetId, TileIndex tileIndex)"
  summary: "Download Map State Tile Fetches state tiles in vector format typically to be integrated into indoor maps module of map control or SDK."
  parameters:
  - description: "The output stream to which the tile is written to."
    name: "stream"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/io/OutputStream.html\">OutputStream</a>"
  - description: "The stateset id."
    name: "statesetId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "Parameter group."
    name: "tileIndex"
    type: "<xref href=\"com.azure.maps.render.models.TileIndex?alt=com.azure.maps.render.models.TileIndex&text=TileIndex\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public void downloadMapStateTile(OutputStream stream, String statesetId, TileIndex tileIndex)"
  desc: "Download Map State Tile Fetches state tiles in vector format typically to be integrated into indoor maps module of map control or SDK. The map control will call this API after user turns on dynamic styling (see \\[Zoom Levels and Tile Grid\\](https://docs.microsoft.com/azure/location-based-services/zoom-levels-and-tile-grid))."
- uid: "com.azure.maps.render.MapsRenderClient.downloadMapStateTileWithResponse(java.io.OutputStream,java.lang.String,com.azure.maps.render.models.TileIndex,com.azure.core.util.Context)"
  fullName: "com.azure.maps.render.MapsRenderClient.downloadMapStateTileWithResponse(OutputStream stream, String statesetId, TileIndex tileIndex, Context context)"
  name: "downloadMapStateTileWithResponse(OutputStream stream, String statesetId, TileIndex tileIndex, Context context)"
  nameWithType: "MapsRenderClient.downloadMapStateTileWithResponse(OutputStream stream, String statesetId, TileIndex tileIndex, Context context)"
  summary: "Download Map State Tile"
  parameters:
  - description: "The output stream to which the tile is written to."
    name: "stream"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/io/OutputStream.html\">OutputStream</a>"
  - description: "The stateset id"
    name: "statesetId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "Parameter group"
    name: "tileIndex"
    type: "<xref href=\"com.azure.maps.render.models.TileIndex?alt=com.azure.maps.render.models.TileIndex&text=TileIndex\" data-throw-if-not-resolved=\"False\" />"
  - description: "the context associated with this operation"
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<Void> downloadMapStateTileWithResponse(OutputStream stream, String statesetId, TileIndex tileIndex, Context context)"
  desc: "Download Map State Tile"
  returns:
    description: "the map tile"
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Void.html\">Void</a>&gt;"
- uid: "com.azure.maps.render.MapsRenderClient.getCopyrightCaption()"
  fullName: "com.azure.maps.render.MapsRenderClient.getCopyrightCaption()"
  name: "getCopyrightCaption()"
  nameWithType: "MapsRenderClient.getCopyrightCaption()"
  summary: "Get Copyright Caption Copyrights API is designed to serve copyright information for Render Tile service."
  syntax: "public CopyrightCaption getCopyrightCaption()"
  desc: "Get Copyright Caption Copyrights API is designed to serve copyright information for Render Tile service. In addition to basic copyright for the whole map, API is serving specific groups of copyrights for some countries. As an alternative to copyrights for map request, one can receive captions for displaying the map provider information on the map.\n\n```java\nSystem.out.println(\"Get Copyright Caption\");\n client.getCopyrightCaption();\n```"
  returns:
    description: "this object is returned from a successful copyright call."
    type: "<xref href=\"com.azure.maps.render.models.CopyrightCaption?alt=com.azure.maps.render.models.CopyrightCaption&text=CopyrightCaption\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.maps.render.MapsRenderClient.getCopyrightCaptionWithResponse(com.azure.core.util.Context)"
  fullName: "com.azure.maps.render.MapsRenderClient.getCopyrightCaptionWithResponse(Context context)"
  name: "getCopyrightCaptionWithResponse(Context context)"
  nameWithType: "MapsRenderClient.getCopyrightCaptionWithResponse(Context context)"
  summary: "Get Copyright Caption Copyrights API is designed to serve copyright information for Render Tile service."
  parameters:
  - description: "the context associated with this operation"
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<CopyrightCaption> getCopyrightCaptionWithResponse(Context context)"
  desc: "Get Copyright Caption Copyrights API is designed to serve copyright information for Render Tile service. In addition to basic copyright for the whole map, API is serving specific groups of copyrights for some countries. As an alternative to copyrights for map request, one can receive captions for displaying the map provider information on the map.\n\n```java\nSystem.out.println(\"Get Copyright Caption\");\n client.getCopyrightCaption();\n```"
  returns:
    description: "this object is returned from a successful copyright call."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.maps.render.models.CopyrightCaption?alt=com.azure.maps.render.models.CopyrightCaption&text=CopyrightCaption\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.maps.render.MapsRenderClient.getCopyrightForTile(com.azure.maps.render.models.TileIndex,boolean)"
  fullName: "com.azure.maps.render.MapsRenderClient.getCopyrightForTile(TileIndex tileIndex, boolean includeText)"
  name: "getCopyrightForTile(TileIndex tileIndex, boolean includeText)"
  nameWithType: "MapsRenderClient.getCopyrightForTile(TileIndex tileIndex, boolean includeText)"
  summary: "Get Copyright For Tile \\*\\*Applies to\\*\\*: S0 and S1 pricing tiers."
  parameters:
  - description: "Parameter group."
    name: "tileIndex"
    type: "<xref href=\"com.azure.maps.render.models.TileIndex?alt=com.azure.maps.render.models.TileIndex&text=TileIndex\" data-throw-if-not-resolved=\"False\" />"
  - description: "Yes/no value to exclude textual data from response. Only images and country names will be in\n     response."
    name: "includeText"
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Copyright getCopyrightForTile(TileIndex tileIndex, boolean includeText)"
  desc: "Get Copyright For Tile \\*\\*Applies to\\*\\*: S0 and S1 pricing tiers. Copyrights API is designed to serve copyright information for Render Tile service. In addition to basic copyright for the whole map, API is serving specific groups of copyrights for some countries. Returns the copyright information for a given tile. To obtain the copyright information for a particular tile, the request should specify the tile's zoom level and x and y coordinates (see: Zoom Levels and Tile Grid).\n\n```java\nclient.getCopyrightForTile(new TileIndex().setX(9).setY(22).setZ(6), true);\n```"
  returns:
    description: "this object is returned from a successful copyright request."
    type: "<xref href=\"com.azure.maps.render.models.Copyright?alt=com.azure.maps.render.models.Copyright&text=Copyright\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.maps.render.MapsRenderClient.getCopyrightForTileWithResponse(com.azure.maps.render.models.TileIndex,boolean,com.azure.core.util.Context)"
  fullName: "com.azure.maps.render.MapsRenderClient.getCopyrightForTileWithResponse(TileIndex tileIndex, boolean includeText, Context context)"
  name: "getCopyrightForTileWithResponse(TileIndex tileIndex, boolean includeText, Context context)"
  nameWithType: "MapsRenderClient.getCopyrightForTileWithResponse(TileIndex tileIndex, boolean includeText, Context context)"
  summary: "Get Copyright For Tile Copyrights With Response API is designed to serve copyright information for Render Tile service with response."
  parameters:
  - description: "Parameter group"
    name: "tileIndex"
    type: "<xref href=\"com.azure.maps.render.models.TileIndex?alt=com.azure.maps.render.models.TileIndex&text=TileIndex\" data-throw-if-not-resolved=\"False\" />"
  - description: "Yes/no value to exclude textual data from response. Only images and country names will be in\n     response."
    name: "includeText"
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
  - description: "the context associated with this operation."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<Copyright> getCopyrightForTileWithResponse(TileIndex tileIndex, boolean includeText, Context context)"
  desc: "Get Copyright For Tile Copyrights With Response API is designed to serve copyright information for Render Tile service with response. In addition to basic copyright for the whole map, API is serving specific groups of copyrights for some countries. Returns the copyright information for a given tile. To obtain the copyright information for a particular tile, the request should specify the tile's zoom level and x and y coordinates (see: Zoom Levels and Tile Grid)\n\n```java\nclient.getCopyrightForTile(new TileIndex().setX(9).setY(22).setZ(6), true);\n```"
  returns:
    description: "the copyright for the tile."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.maps.render.models.Copyright?alt=com.azure.maps.render.models.Copyright&text=Copyright\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.maps.render.MapsRenderClient.getCopyrightForWorld(boolean)"
  fullName: "com.azure.maps.render.MapsRenderClient.getCopyrightForWorld(boolean includeText)"
  name: "getCopyrightForWorld(boolean includeText)"
  nameWithType: "MapsRenderClient.getCopyrightForWorld(boolean includeText)"
  summary: "Get Copyright For World \\*\\*Applies to\\*\\*: S0 and S1 pricing tiers."
  parameters:
  - description: "Yes/no value to exclude textual data from response. Only images and country names will be in\n     response."
    name: "includeText"
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Copyright getCopyrightForWorld(boolean includeText)"
  desc: "Get Copyright For World \\*\\*Applies to\\*\\*: S0 and S1 pricing tiers. Copyrights API is designed to serve copyright information for Render Tile service. In addition to basic copyright for the whole map, API is serving specific groups of copyrights for some countries. Returns the copyright information for the world. To obtain the default copyright information for the whole world, do not specify a tile or bounding box.\n\n```java\nclient.getCopyrightForWorld(true);\n```"
  returns:
    description: "this object is returned from a successful copyright request."
    type: "<xref href=\"com.azure.maps.render.models.Copyright?alt=com.azure.maps.render.models.Copyright&text=Copyright\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.maps.render.MapsRenderClient.getCopyrightForWorldWithResponse(boolean,com.azure.core.util.Context)"
  fullName: "com.azure.maps.render.MapsRenderClient.getCopyrightForWorldWithResponse(boolean includeText, Context context)"
  name: "getCopyrightForWorldWithResponse(boolean includeText, Context context)"
  nameWithType: "MapsRenderClient.getCopyrightForWorldWithResponse(boolean includeText, Context context)"
  summary: "Get Copyright For World Copyrights with response API is designed to serve copyright information with response for Render Tile service."
  parameters:
  - description: "Yes/no value to exclude textual data from response. Only images and country names will be in\n     response."
    name: "includeText"
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
  - description: "the context associated with this operation."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<Copyright> getCopyrightForWorldWithResponse(boolean includeText, Context context)"
  desc: "Get Copyright For World Copyrights with response API is designed to serve copyright information with response for Render Tile service. In addition to basic copyright for the whole map, API is serving specific groups of copyrights for some countries. Returns the copyright information for the world. To obtain the default copyright information for the whole world, do not specify a tile or bounding box.\n\n```java\nclient.getCopyrightForWorld(true);\n```"
  returns:
    description: "the copyright response."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.maps.render.models.Copyright?alt=com.azure.maps.render.models.Copyright&text=Copyright\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.maps.render.MapsRenderClient.getCopyrightFromBoundingBox(com.azure.core.models.GeoBoundingBox,boolean)"
  fullName: "com.azure.maps.render.MapsRenderClient.getCopyrightFromBoundingBox(GeoBoundingBox boundingBox, boolean includeText)"
  name: "getCopyrightFromBoundingBox(GeoBoundingBox boundingBox, boolean includeText)"
  nameWithType: "MapsRenderClient.getCopyrightFromBoundingBox(GeoBoundingBox boundingBox, boolean includeText)"
  summary: "Get Copyright From Bounding Box \\*\\*Applies to\\*\\*: S0 and S1 pricing tiers."
  parameters:
  - description: "the <code>GeoBoundingBox</code> for which copyright information is needed."
    name: "boundingBox"
    type: "<xref href=\"com.azure.core.models.GeoBoundingBox?alt=com.azure.core.models.GeoBoundingBox&text=GeoBoundingBox\" data-throw-if-not-resolved=\"False\" />"
  - description: "Yes/no value to exclude textual data from response. Only images and country names will be in\n     response."
    name: "includeText"
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Copyright getCopyrightFromBoundingBox(GeoBoundingBox boundingBox, boolean includeText)"
  desc: "Get Copyright From Bounding Box \\*\\*Applies to\\*\\*: S0 and S1 pricing tiers. Returns copyright information for a given bounding box. Bounding-box requests should specify the minimum and maximum longitude and latitude (EPSG-3857) coordinates.\n\n```java\nGeoBoundingBox boundingBox = new GeoBoundingBox(52.41064, 4.84228, 52.41072, 4.84239);\n client.getCopyrightFromBoundingBox(boundingBox, true);\n```"
  returns:
    description: "this object is returned from a successful copyright request."
    type: "<xref href=\"com.azure.maps.render.models.Copyright?alt=com.azure.maps.render.models.Copyright&text=Copyright\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.maps.render.MapsRenderClient.getCopyrightFromBoundingBoxWithResponse(com.azure.core.models.GeoBoundingBox,boolean,com.azure.core.util.Context)"
  fullName: "com.azure.maps.render.MapsRenderClient.getCopyrightFromBoundingBoxWithResponse(GeoBoundingBox boundingBox, boolean includeText, Context context)"
  name: "getCopyrightFromBoundingBoxWithResponse(GeoBoundingBox boundingBox, boolean includeText, Context context)"
  nameWithType: "MapsRenderClient.getCopyrightFromBoundingBoxWithResponse(GeoBoundingBox boundingBox, boolean includeText, Context context)"
  summary: "Get Copyright From Bounding Box Returns copyright information for a given bounding box with response."
  parameters:
  - description: "the <code>GeoBoundingBox</code> for which copyright information is needed."
    name: "boundingBox"
    type: "<xref href=\"com.azure.core.models.GeoBoundingBox?alt=com.azure.core.models.GeoBoundingBox&text=GeoBoundingBox\" data-throw-if-not-resolved=\"False\" />"
  - description: "Yes/no value to exclude textual data from response. Only images and country names will be in\n     response."
    name: "includeText"
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
  - description: "the context associated with this operation."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<Copyright> getCopyrightFromBoundingBoxWithResponse(GeoBoundingBox boundingBox, boolean includeText, Context context)"
  desc: "Get Copyright From Bounding Box Returns copyright information for a given bounding box with response. Bounding-box requests should specify the minimum and maximum longitude and latitude (EPSG-3857) coordinates.\n\n```java\nGeoBoundingBox boundingBox = new GeoBoundingBox(52.41064, 4.84228, 52.41072, 4.84239);\n client.getCopyrightFromBoundingBox(boundingBox, true);\n```"
  returns:
    description: "the copyright information."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.maps.render.models.Copyright?alt=com.azure.maps.render.models.Copyright&text=Copyright\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.maps.render.MapsRenderClient.getMapAttribution(com.azure.maps.render.models.TilesetId,int,com.azure.core.models.GeoBoundingBox)"
  fullName: "com.azure.maps.render.MapsRenderClient.getMapAttribution(TilesetId tilesetId, int zoom, GeoBoundingBox bounds)"
  name: "getMapAttribution(TilesetId tilesetId, int zoom, GeoBoundingBox bounds)"
  nameWithType: "MapsRenderClient.getMapAttribution(TilesetId tilesetId, int zoom, GeoBoundingBox bounds)"
  summary: "Get Map Attribution"
  parameters:
  - description: "the tileset id."
    name: "tilesetId"
    type: "<xref href=\"com.azure.maps.render.models.TilesetId?alt=com.azure.maps.render.models.TilesetId&text=TilesetId\" data-throw-if-not-resolved=\"False\" />"
  - description: "Zoom level for the desired map attribution."
    name: "zoom"
    type: "<xref href=\"int?alt=int&text=int\" data-throw-if-not-resolved=\"False\" />"
  - description: "the <code>GeoBoundingBox</code> surrounding the area for which attribution is needed."
    name: "bounds"
    type: "<xref href=\"com.azure.core.models.GeoBoundingBox?alt=com.azure.core.models.GeoBoundingBox&text=GeoBoundingBox\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public MapAttribution getMapAttribution(TilesetId tilesetId, int zoom, GeoBoundingBox bounds)"
  desc: "Get Map Attribution\n\n```java\nSystem.out.println(\"Get Map Attribution\");\n GeoBoundingBox bounds = new GeoBoundingBox(-122.414162, 47.57949, -122.247157, 47.668372);\n new TilesetId();\n client.getMapAttribution(TilesetId.MICROSOFT_BASE, 6, bounds);\n```"
  returns:
    description: "copyright attribution for the requested section of a tileset."
    type: "<xref href=\"com.azure.maps.render.models.MapAttribution?alt=com.azure.maps.render.models.MapAttribution&text=MapAttribution\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.maps.render.MapsRenderClient.getMapAttributionWithResponse(com.azure.maps.render.models.TilesetId,int,com.azure.core.models.GeoBoundingBox,com.azure.core.util.Context)"
  fullName: "com.azure.maps.render.MapsRenderClient.getMapAttributionWithResponse(TilesetId tilesetId, int zoom, GeoBoundingBox bounds, Context context)"
  name: "getMapAttributionWithResponse(TilesetId tilesetId, int zoom, GeoBoundingBox bounds, Context context)"
  nameWithType: "MapsRenderClient.getMapAttributionWithResponse(TilesetId tilesetId, int zoom, GeoBoundingBox bounds, Context context)"
  summary: "Get Map Attribution The Get Map Attribution With Response API allows users to request map copyright attribution information for a section of a tileset with response"
  parameters:
  - description: "the tileset id."
    name: "tilesetId"
    type: "<xref href=\"com.azure.maps.render.models.TilesetId?alt=com.azure.maps.render.models.TilesetId&text=TilesetId\" data-throw-if-not-resolved=\"False\" />"
  - description: "Zoom level for the desired map attribution."
    name: "zoom"
    type: "<xref href=\"int?alt=int&text=int\" data-throw-if-not-resolved=\"False\" />"
  - description: "the <code>GeoBoundingBox</code> surrounding the area for which attribution is needed."
    name: "bounds"
    type: "<xref href=\"com.azure.core.models.GeoBoundingBox?alt=com.azure.core.models.GeoBoundingBox&text=GeoBoundingBox\" data-throw-if-not-resolved=\"False\" />"
  - description: "the context associated with this operation."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<MapAttribution> getMapAttributionWithResponse(TilesetId tilesetId, int zoom, GeoBoundingBox bounds, Context context)"
  desc: "Get Map Attribution The Get Map Attribution With Response API allows users to request map copyright attribution information for a section of a tileset with response\n\n```java\nSystem.out.println(\"Get Map Attribution\");\n GeoBoundingBox bounds = new GeoBoundingBox(-122.414162, 47.57949, -122.247157, 47.668372);\n new TilesetId();\n client.getMapAttribution(TilesetId.MICROSOFT_BASE, 6, bounds);\n```"
  returns:
    description: "copyright attribution for the requested section of a tileset."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.maps.render.models.MapAttribution?alt=com.azure.maps.render.models.MapAttribution&text=MapAttribution\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.maps.render.MapsRenderClient.getMapStaticImage(com.azure.maps.render.models.MapStaticImageOptions)"
  fullName: "com.azure.maps.render.MapsRenderClient.getMapStaticImage(MapStaticImageOptions options)"
  name: "getMapStaticImage(MapStaticImageOptions options)"
  nameWithType: "MapsRenderClient.getMapStaticImage(MapStaticImageOptions options)"
  summary: "Get Map Static Image The static image service renders a user-defined, rectangular image containing a map section using a zoom level from 0 to 20."
  parameters:
  - description: "the <code>MapStaticImageOptions</code> used in the call."
    name: "options"
    type: "<xref href=\"com.azure.maps.render.models.MapStaticImageOptions?alt=com.azure.maps.render.models.MapStaticImageOptions&text=MapStaticImageOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public BinaryData getMapStaticImage(MapStaticImageOptions options)"
  desc: "Get Map Static Image The static image service renders a user-defined, rectangular image containing a map section using a zoom level from 0 to 20. The static image service renders a user-defined, rectangular image containing a map section using a zoom level from 0 to 20. The supported resolution range for the map image is from 1x1 to 8192x8192. If you are deciding when to use the static image service over the map tile service, you may want to consider how you would like to interact with the rendered map. If the map contents will be relatively unchanging, a static map is a good choice. If you want to support a lot of zooming, panning and changing of the map content, the map tile service would be a better choice.\n\n```java\nSystem.out.println(\"Get Map Static Image\");\n GeoBoundingBox bbox = new GeoBoundingBox(1.355233, 42.982261, 24.980233, 56.526017);\n new StaticMapLayer();\n new RasterTileFormat();\n MapStaticImageOptions mapStaticImageOptions = new MapStaticImageOptions().setStaticMapLayer(StaticMapLayer.BASIC)\n     .setMapImageStyle(MapImageStyle.MAIN).setZoom(2)\n     .setBoundingBox(bbox).setRasterTileFormat(RasterTileFormat.PNG);\n client.getMapStaticImage(mapStaticImageOptions).toStream();\n```"
  returns:
    description: "BinaryData"
    type: "<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.maps.render.MapsRenderClient.getMapStaticImageWithResponse(com.azure.maps.render.models.MapStaticImageOptions,com.azure.core.util.Context)"
  fullName: "com.azure.maps.render.MapsRenderClient.getMapStaticImageWithResponse(MapStaticImageOptions options, Context context)"
  name: "getMapStaticImageWithResponse(MapStaticImageOptions options, Context context)"
  nameWithType: "MapsRenderClient.getMapStaticImageWithResponse(MapStaticImageOptions options, Context context)"
  summary: "Get Map Static Image The static image service renders a user-defined, rectangular image containing a map section using a zoom level from 0 to 20."
  parameters:
  - description: "the <code>MapStaticImageOptions</code> used in the call."
    name: "options"
    type: "<xref href=\"com.azure.maps.render.models.MapStaticImageOptions?alt=com.azure.maps.render.models.MapStaticImageOptions&text=MapStaticImageOptions\" data-throw-if-not-resolved=\"False\" />"
  - description: "the context associated with this operation."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<BinaryData> getMapStaticImageWithResponse(MapStaticImageOptions options, Context context)"
  desc: "Get Map Static Image The static image service renders a user-defined, rectangular image containing a map section using a zoom level from 0 to 20. The static image service renders a user-defined, rectangular image containing a map section using a zoom level from 0 to 20. The supported resolution range for the map image is from 1x1 to 8192x8192. If you are deciding when to use the static image service over the map tile service, you may want to consider how you would like to interact with the rendered map. If the map contents will be relatively unchanging, a static map is a good choice. If you want to support a lot of zooming, panning and changing of the map content, the map tile service would be a better choice.\n\n```java\nSystem.out.println(\"Get Map Static Image\");\n GeoBoundingBox bbox = new GeoBoundingBox(1.355233, 42.982261, 24.980233, 56.526017);\n new StaticMapLayer();\n new RasterTileFormat();\n MapStaticImageOptions mapStaticImageOptions = new MapStaticImageOptions().setStaticMapLayer(StaticMapLayer.BASIC)\n     .setMapImageStyle(MapImageStyle.MAIN).setZoom(2)\n     .setBoundingBox(bbox).setRasterTileFormat(RasterTileFormat.PNG);\n client.getMapStaticImage(mapStaticImageOptions).toStream();\n```"
  returns:
    description: "the response."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.maps.render.MapsRenderClient.getMapTile(com.azure.maps.render.models.MapTileOptions)"
  fullName: "com.azure.maps.render.MapsRenderClient.getMapTile(MapTileOptions options)"
  name: "getMapTile(MapTileOptions options)"
  nameWithType: "MapsRenderClient.getMapTile(MapTileOptions options)"
  summary: "Get Map Tile"
  parameters:
  - description: "the <code>MapTileOptions</code> to control the API behavior."
    name: "options"
    type: "<xref href=\"com.azure.maps.render.models.MapTileOptions?alt=com.azure.maps.render.models.MapTileOptions&text=MapTileOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public BinaryData getMapTile(MapTileOptions options)"
  desc: "Get Map Tile\n\n```java\nSystem.out.println(\"Get Map Tile\");\n MapTileOptions mapTileOptions = new MapTileOptions();\n mapTileOptions.setTilesetId(TilesetId.MICROSOFT_BASE_ROAD);\n mapTileOptions.setTileIndex(new TileIndex().setX(10).setY(22).setZ(6));\n client.getMapTile(mapTileOptions);\n```\n\nThe Get Map Tiles API allows users to request map tiles in vector or raster formats typically to be integrated into a map control or SDK."
  returns:
    description: "BinaryData"
    type: "<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.maps.render.MapsRenderClient.getMapTileWithResponse(com.azure.maps.render.models.MapTileOptions,com.azure.core.util.Context)"
  fullName: "com.azure.maps.render.MapsRenderClient.getMapTileWithResponse(MapTileOptions options, Context context)"
  name: "getMapTileWithResponse(MapTileOptions options, Context context)"
  nameWithType: "MapsRenderClient.getMapTileWithResponse(MapTileOptions options, Context context)"
  summary: "Get Map Tile"
  parameters:
  - description: "the <code>MapTileOptions</code> to control the API behavior."
    name: "options"
    type: "<xref href=\"com.azure.maps.render.models.MapTileOptions?alt=com.azure.maps.render.models.MapTileOptions&text=MapTileOptions\" data-throw-if-not-resolved=\"False\" />"
  - description: "the context associated with this operation."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<BinaryData> getMapTileWithResponse(MapTileOptions options, Context context)"
  desc: "Get Map Tile\n\n```java\nSystem.out.println(\"Get Map Tile\");\n MapTileOptions mapTileOptions = new MapTileOptions();\n mapTileOptions.setTilesetId(TilesetId.MICROSOFT_BASE_ROAD);\n mapTileOptions.setTileIndex(new TileIndex().setX(10).setY(22).setZ(6));\n client.getMapTile(mapTileOptions);\n```\n\nThe Get Map Tiles API allows users to request map tiles in vector or raster formats typically to be integrated into a map control or SDK."
  returns:
    description: "the response."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.maps.render.MapsRenderClient.getMapTileset(com.azure.maps.render.models.TilesetId)"
  fullName: "com.azure.maps.render.MapsRenderClient.getMapTileset(TilesetId tilesetId)"
  name: "getMapTileset(TilesetId tilesetId)"
  nameWithType: "MapsRenderClient.getMapTileset(TilesetId tilesetId)"
  summary: "Get Map Tileset"
  parameters:
  - description: "the tileset id."
    name: "tilesetId"
    type: "<xref href=\"com.azure.maps.render.models.TilesetId?alt=com.azure.maps.render.models.TilesetId&text=TilesetId\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public MapTileset getMapTileset(TilesetId tilesetId)"
  desc: "Get Map Tileset\n\n```java\nSystem.out.println(\"Get Map Tileset\");\n new TilesetId();\n client.getMapTileset(TilesetId.MICROSOFT_BASE);\n```\n\nThe Get Map Tileset API allows users to request metadata for a tileset."
  returns:
    description: "metadata for a tileset in the TileJSON format."
    type: "<xref href=\"com.azure.maps.render.models.MapTileset?alt=com.azure.maps.render.models.MapTileset&text=MapTileset\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.maps.render.MapsRenderClient.getMapTilesetWithResponse(com.azure.maps.render.models.TilesetId,com.azure.core.util.Context)"
  fullName: "com.azure.maps.render.MapsRenderClient.getMapTilesetWithResponse(TilesetId tilesetId, Context context)"
  name: "getMapTilesetWithResponse(TilesetId tilesetId, Context context)"
  nameWithType: "MapsRenderClient.getMapTilesetWithResponse(TilesetId tilesetId, Context context)"
  summary: "Get Map Tileset The Get Map Tileset API allows users to request metadata for a tileset."
  parameters:
  - description: "the tileset id."
    name: "tilesetId"
    type: "<xref href=\"com.azure.maps.render.models.TilesetId?alt=com.azure.maps.render.models.TilesetId&text=TilesetId\" data-throw-if-not-resolved=\"False\" />"
  - description: "the context associated with this operation."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<MapTileset> getMapTilesetWithResponse(TilesetId tilesetId, Context context)"
  desc: "Get Map Tileset The Get Map Tileset API allows users to request metadata for a tileset.\n\n```java\nSystem.out.println(\"Get Map Tileset\");\n new TilesetId();\n client.getMapTileset(TilesetId.MICROSOFT_BASE);\n```"
  returns:
    description: "metadata for a tileset in the TileJSON format."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.maps.render.models.MapTileset?alt=com.azure.maps.render.models.MapTileset&text=MapTileset\" data-throw-if-not-resolved=\"False\" />&gt;"
type: "class"
desc: "Initializes a new instance of the synchronous RenderClient type. <xref uid=\"com.azure.maps.render.MapsRenderClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"MapsRenderClient\"></xref> instances are created via the <xref uid=\"com.azure.maps.render.MapsRenderClientBuilder\" data-throw-if-not-resolved=\"false\" data-raw-source=\"MapsRenderClientBuilder\"></xref>, as shown below. Creating a sync client using a <xref uid=\"com.azure.core.credential.AzureKeyCredential\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.azure.core.credential.AzureKeyCredential\"></xref>:\n\n```java\n// Authenticates using subscription key\n AzureKeyCredential keyCredential = new AzureKeyCredential(System.getenv(\"SUBSCRIPTION_KEY\"));\n\n // Creates a builder\n MapsRenderClientBuilder builder = new MapsRenderClientBuilder();\n builder.credential(keyCredential);\n builder.httpLogOptions(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BODY_AND_HEADERS));\n\n // Builds the client\n MapsRenderClient client = builder.buildClient();\n```"
metadata: {}
package: "com.azure.maps.render"
artifact: com.azure:azure-maps-render:1.0.0-beta.1
