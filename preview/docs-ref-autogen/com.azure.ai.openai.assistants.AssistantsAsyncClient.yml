### YamlMime:JavaType
uid: "com.azure.ai.openai.assistants.AssistantsAsyncClient"
fullName: "com.azure.ai.openai.assistants.AssistantsAsyncClient"
name: "AssistantsAsyncClient"
nameWithType: "AssistantsAsyncClient"
summary: "Initializes a new instance of the asynchronous Assistants<wbr>Client type."
inheritances:
- "<xref href=\"java.lang.Object?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
inheritedClassMethods:
- classRef: "java.lang.<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html\">Object</a>"
  methodsRef:
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#clone--\">clone</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#equals-java.lang.Object-\">equals</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#finalize--\">finalize</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#getClass--\">getClass</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#hashCode--\">hashCode</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#notify--\">notify</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#notifyAll--\">notifyAll</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#toString--\">toString</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#wait--\">wait</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#wait-long-\">wait</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#wait-long-int-\">wait</a>"
syntax: "public final class **AssistantsAsyncClient**"
methods:
- uid: "com.azure.ai.openai.assistants.AssistantsAsyncClient.cancelRun(java.lang.String,java.lang.String)"
  fullName: "com.azure.ai.openai.assistants.AssistantsAsyncClient.cancelRun(String threadId, String runId)"
  name: "cancelRun(String threadId, String runId)"
  nameWithType: "AssistantsAsyncClient.cancelRun(String threadId, String runId)"
  summary: "Cancels a run of an in progress thread."
  parameters:
  - description: "The ID of the thread being run."
    name: "threadId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The ID of the run to cancel."
    name: "runId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public Mono<ThreadRun> cancelRun(String threadId, String runId)"
  desc: "Cancels a run of an in progress thread."
  returns:
    description: "data representing a single evaluation run of an assistant thread on successful completion of\n <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.ai.openai.assistants.models.ThreadRun?alt=com.azure.ai.openai.assistants.models.ThreadRun&text=ThreadRun\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.ai.openai.assistants.AssistantsAsyncClient.cancelRunWithResponse(java.lang.String,java.lang.String,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.ai.openai.assistants.AssistantsAsyncClient.cancelRunWithResponse(String threadId, String runId, RequestOptions requestOptions)"
  name: "cancelRunWithResponse(String threadId, String runId, RequestOptions requestOptions)"
  nameWithType: "AssistantsAsyncClient.cancelRunWithResponse(String threadId, String runId, RequestOptions requestOptions)"
  summary: "Cancels a run of an in progress thread."
  parameters:
  - description: "The ID of the thread being run."
    name: "threadId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The ID of the run to cancel."
    name: "runId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<BinaryData>> cancelRunWithResponse(String threadId, String runId, RequestOptions requestOptions)"
  desc: "Cancels a run of an in progress thread.\n\n**Response Body Schema**\n\n```java\n{\n     id: String (Required)\n     object: String (Required)\n     thread_id: String (Required)\n     assistant_id: String (Required)\n     status: String(queued/in_progress/requires_action/cancelling/cancelled/failed/completed/expired) (Required)\n     required_action (Optional): {\n     }\n     last_error (Required): {\n         code: String (Required)\n         message: String (Required)\n     }\n     model: String (Required)\n     instructions: String (Required)\n     tools (Required): [\n          (Required){\n         }\n     ]\n     file_ids (Required): [\n         String (Required)\n     ]\n     created_at: long (Required)\n     expires_at: OffsetDateTime (Required)\n     started_at: OffsetDateTime (Required)\n     completed_at: OffsetDateTime (Required)\n     cancelled_at: OffsetDateTime (Required)\n     failed_at: OffsetDateTime (Required)\n     metadata (Required): {\n         String: String (Required)\n     }\n }\n```"
  returns:
    description: "data representing a single evaluation run of an assistant thread along with <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> on\n successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.ai.openai.assistants.AssistantsAsyncClient.cancelVectorStoreFileBatch(java.lang.String,java.lang.String)"
  fullName: "com.azure.ai.openai.assistants.AssistantsAsyncClient.cancelVectorStoreFileBatch(String vectorStoreId, String batchId)"
  name: "cancelVectorStoreFileBatch(String vectorStoreId, String batchId)"
  nameWithType: "AssistantsAsyncClient.cancelVectorStoreFileBatch(String vectorStoreId, String batchId)"
  summary: "Cancel a vector store file batch."
  parameters:
  - description: "The ID of the vector store that the file batch belongs to."
    name: "vectorStoreId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The ID of the file batch to cancel."
    name: "batchId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public Mono<VectorStoreFileBatch> cancelVectorStoreFileBatch(String vectorStoreId, String batchId)"
  desc: "Cancel a vector store file batch. This attempts to cancel the processing of files in this batch as soon as possible."
  returns:
    description: "a batch of files attached to a vector store on successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.ai.openai.assistants.models.VectorStoreFileBatch?alt=com.azure.ai.openai.assistants.models.VectorStoreFileBatch&text=VectorStoreFileBatch\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.ai.openai.assistants.AssistantsAsyncClient.cancelVectorStoreFileBatchWithResponse(java.lang.String,java.lang.String,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.ai.openai.assistants.AssistantsAsyncClient.cancelVectorStoreFileBatchWithResponse(String vectorStoreId, String batchId, RequestOptions requestOptions)"
  name: "cancelVectorStoreFileBatchWithResponse(String vectorStoreId, String batchId, RequestOptions requestOptions)"
  nameWithType: "AssistantsAsyncClient.cancelVectorStoreFileBatchWithResponse(String vectorStoreId, String batchId, RequestOptions requestOptions)"
  summary: "Cancel a vector store file batch."
  parameters:
  - description: "The ID of the vector store that the file batch belongs to."
    name: "vectorStoreId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The ID of the file batch to cancel."
    name: "batchId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<BinaryData>> cancelVectorStoreFileBatchWithResponse(String vectorStoreId, String batchId, RequestOptions requestOptions)"
  desc: "Cancel a vector store file batch. This attempts to cancel the processing of files in this batch as soon as possible.\n\n**Response Body Schema**\n\n```java\n{\n     id: String (Required)\n     object: String (Required)\n     created_at: long (Required)\n     vector_store_id: String (Required)\n     status: String(in_progress/completed/cancelled/failed) (Required)\n     file_counts (Required): {\n         in_progress: int (Required)\n         completed: int (Required)\n         failed: int (Required)\n         cancelled: int (Required)\n         total: int (Required)\n     }\n }\n```"
  returns:
    description: "a batch of files attached to a vector store along with <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> on successful completion of\n <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.ai.openai.assistants.AssistantsAsyncClient.createAssistant(com.azure.ai.openai.assistants.models.AssistantCreationOptions)"
  fullName: "com.azure.ai.openai.assistants.AssistantsAsyncClient.createAssistant(AssistantCreationOptions assistantCreationOptions)"
  name: "createAssistant(AssistantCreationOptions assistantCreationOptions)"
  nameWithType: "AssistantsAsyncClient.createAssistant(AssistantCreationOptions assistantCreationOptions)"
  summary: "Creates a new assistant."
  parameters:
  - description: "The request details to use when creating a new assistant."
    name: "assistantCreationOptions"
    type: "<xref href=\"com.azure.ai.openai.assistants.models.AssistantCreationOptions?alt=com.azure.ai.openai.assistants.models.AssistantCreationOptions&text=AssistantCreationOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Assistant> createAssistant(AssistantCreationOptions assistantCreationOptions)"
  desc: "Creates a new assistant."
  returns:
    description: "represents an assistant that can call the model and use tools on successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.ai.openai.assistants.models.Assistant?alt=com.azure.ai.openai.assistants.models.Assistant&text=Assistant\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.ai.openai.assistants.AssistantsAsyncClient.createAssistantWithResponse(com.azure.core.util.BinaryData,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.ai.openai.assistants.AssistantsAsyncClient.createAssistantWithResponse(BinaryData assistantCreationOptions, RequestOptions requestOptions)"
  name: "createAssistantWithResponse(BinaryData assistantCreationOptions, RequestOptions requestOptions)"
  nameWithType: "AssistantsAsyncClient.createAssistantWithResponse(BinaryData assistantCreationOptions, RequestOptions requestOptions)"
  summary: "Creates a new assistant."
  parameters:
  - description: "The request details to use when creating a new assistant."
    name: "assistantCreationOptions"
    type: "<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<BinaryData>> createAssistantWithResponse(BinaryData assistantCreationOptions, RequestOptions requestOptions)"
  desc: "Creates a new assistant.\n\n**Request Body Schema**\n\n```java\n{\n     model: String (Required)\n     name: String (Optional)\n     description: String (Optional)\n     instructions: String (Optional)\n     tools (Optional): [\n          (Optional){\n         }\n     ]\n     file_ids (Optional): [\n         String (Optional)\n     ]\n     metadata (Optional): {\n         String: String (Required)\n     }\n }\n```\n\n**Response Body Schema**\n\n```java\n{\n     id: String (Required)\n     object: String (Required)\n     created_at: long (Required)\n     name: String (Required)\n     description: String (Required)\n     model: String (Required)\n     instructions: String (Required)\n     tools (Required): [\n          (Required){\n         }\n     ]\n     file_ids (Required): [\n         String (Required)\n     ]\n     metadata (Required): {\n         String: String (Required)\n     }\n }\n```"
  returns:
    description: "represents an assistant that can call the model and use tools along with <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> on successful\n completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.ai.openai.assistants.AssistantsAsyncClient.createMessage(java.lang.String,com.azure.ai.openai.assistants.models.ThreadMessageOptions)"
  fullName: "com.azure.ai.openai.assistants.AssistantsAsyncClient.createMessage(String threadId, ThreadMessageOptions threadMessageOptions)"
  name: "createMessage(String threadId, ThreadMessageOptions threadMessageOptions)"
  nameWithType: "AssistantsAsyncClient.createMessage(String threadId, ThreadMessageOptions threadMessageOptions)"
  summary: "Creates a new message on a specified thread."
  parameters:
  - description: "The ID of the thread to create the new message on."
    name: "threadId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "A single message within an assistant thread, as provided during that thread's\n creation for its initial state."
    name: "threadMessageOptions"
    type: "<xref href=\"com.azure.ai.openai.assistants.models.ThreadMessageOptions?alt=com.azure.ai.openai.assistants.models.ThreadMessageOptions&text=ThreadMessageOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<ThreadMessage> createMessage(String threadId, ThreadMessageOptions threadMessageOptions)"
  desc: "Creates a new message on a specified thread."
  returns:
    description: "a single, existing message within an assistant thread on successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.ai.openai.assistants.models.ThreadMessage?alt=com.azure.ai.openai.assistants.models.ThreadMessage&text=ThreadMessage\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.ai.openai.assistants.AssistantsAsyncClient.createMessageWithResponse(java.lang.String,com.azure.core.util.BinaryData,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.ai.openai.assistants.AssistantsAsyncClient.createMessageWithResponse(String threadId, BinaryData request, RequestOptions requestOptions)"
  name: "createMessageWithResponse(String threadId, BinaryData request, RequestOptions requestOptions)"
  nameWithType: "AssistantsAsyncClient.createMessageWithResponse(String threadId, BinaryData request, RequestOptions requestOptions)"
  summary: "Creates a new message on a specified thread."
  parameters:
  - description: "The ID of the thread to create the new message on."
    name: "threadId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The request parameter."
    name: "request"
    type: "<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<BinaryData>> createMessageWithResponse(String threadId, BinaryData request, RequestOptions requestOptions)"
  desc: "Creates a new message on a specified thread.\n\n**Request Body Schema**\n\n```java\n{\n     role: String(user/assistant) (Required)\n     content: String (Required)\n     file_ids (Optional): [\n         String (Optional)\n     ]\n     metadata (Optional): {\n         String: String (Required)\n     }\n }\n```\n\n**Response Body Schema**\n\n```java\n{\n     id: String (Required)\n     object: String (Required)\n     created_at: long (Required)\n     thread_id: String (Required)\n     role: String(user/assistant) (Required)\n     content (Required): [\n          (Required){\n         }\n     ]\n     assistant_id: String (Optional)\n     run_id: String (Optional)\n     file_ids (Required): [\n         String (Required)\n     ]\n     metadata (Required): {\n         String: String (Required)\n     }\n }\n```"
  returns:
    description: "a single, existing message within an assistant thread along with <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> on successful\n completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.ai.openai.assistants.AssistantsAsyncClient.createRun(com.azure.ai.openai.assistants.models.AssistantThread,com.azure.ai.openai.assistants.models.Assistant)"
  fullName: "com.azure.ai.openai.assistants.AssistantsAsyncClient.createRun(AssistantThread thread, Assistant assistant)"
  name: "createRun(AssistantThread thread, Assistant assistant)"
  nameWithType: "AssistantsAsyncClient.createRun(AssistantThread thread, Assistant assistant)"
  summary: "Creates a new run for an assistant thread."
  parameters:
  - description: "The thread to run."
    name: "thread"
    type: "<xref href=\"com.azure.ai.openai.assistants.models.AssistantThread?alt=com.azure.ai.openai.assistants.models.AssistantThread&text=AssistantThread\" data-throw-if-not-resolved=\"False\" />"
  - description: "The assistant that will run the thread."
    name: "assistant"
    type: "<xref href=\"com.azure.ai.openai.assistants.models.Assistant?alt=com.azure.ai.openai.assistants.models.Assistant&text=Assistant\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<ThreadRun> createRun(AssistantThread thread, Assistant assistant)"
  desc: "Creates a new run for an assistant thread."
  returns:
    description: "data representing a single evaluation run of an assistant thread on successful completion of\n <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.ai.openai.assistants.models.ThreadRun?alt=com.azure.ai.openai.assistants.models.ThreadRun&text=ThreadRun\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.ai.openai.assistants.AssistantsAsyncClient.createRun(java.lang.String,com.azure.ai.openai.assistants.models.CreateRunOptions)"
  fullName: "com.azure.ai.openai.assistants.AssistantsAsyncClient.createRun(String threadId, CreateRunOptions createRunOptions)"
  name: "createRun(String threadId, CreateRunOptions createRunOptions)"
  nameWithType: "AssistantsAsyncClient.createRun(String threadId, CreateRunOptions createRunOptions)"
  summary: "Creates a new run for an assistant thread."
  parameters:
  - description: "The ID of the thread to run."
    name: "threadId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The details used when creating a new run of an assistant thread."
    name: "createRunOptions"
    type: "<xref href=\"com.azure.ai.openai.assistants.models.CreateRunOptions?alt=com.azure.ai.openai.assistants.models.CreateRunOptions&text=CreateRunOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<ThreadRun> createRun(String threadId, CreateRunOptions createRunOptions)"
  desc: "Creates a new run for an assistant thread."
  returns:
    description: "data representing a single evaluation run of an assistant thread on successful completion of\n <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.ai.openai.assistants.models.ThreadRun?alt=com.azure.ai.openai.assistants.models.ThreadRun&text=ThreadRun\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.ai.openai.assistants.AssistantsAsyncClient.createRun(java.lang.String,com.azure.ai.openai.assistants.models.CreateRunOptions,java.util.List<com.azure.ai.openai.assistants.models.RunIncludes>)"
  fullName: "com.azure.ai.openai.assistants.AssistantsAsyncClient.createRun(String threadId, CreateRunOptions createRunOptions, List<RunIncludes> runInclude)"
  name: "createRun(String threadId, CreateRunOptions createRunOptions, List<RunIncludes> runInclude)"
  nameWithType: "AssistantsAsyncClient.createRun(String threadId, CreateRunOptions createRunOptions, List<RunIncludes> runInclude)"
  summary: "Creates a new run for an assistant thread with additional included fields."
  parameters:
  - description: "The ID of the thread to run."
    name: "threadId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The details used when creating a new run of an assistant thread."
    name: "createRunOptions"
    type: "<xref href=\"com.azure.ai.openai.assistants.models.CreateRunOptions?alt=com.azure.ai.openai.assistants.models.CreateRunOptions&text=CreateRunOptions\" data-throw-if-not-resolved=\"False\" />"
  - description: "A list of additional fields to include in the response."
    name: "runInclude"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/List.html\">List</a>&lt;<xref href=\"com.azure.ai.openai.assistants.models.RunIncludes?alt=com.azure.ai.openai.assistants.models.RunIncludes&text=RunIncludes\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public Mono<ThreadRun> createRun(String threadId, CreateRunOptions createRunOptions, List<RunIncludes> runInclude)"
  desc: "Creates a new run for an assistant thread with additional included fields."
  returns:
    description: "data representing a single evaluation run of an assistant thread on successful completion of\n <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.ai.openai.assistants.models.ThreadRun?alt=com.azure.ai.openai.assistants.models.ThreadRun&text=ThreadRun\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.ai.openai.assistants.AssistantsAsyncClient.createRunStream(java.lang.String,com.azure.ai.openai.assistants.models.CreateRunOptions)"
  fullName: "com.azure.ai.openai.assistants.AssistantsAsyncClient.createRunStream(String threadId, CreateRunOptions createRunOptions)"
  name: "createRunStream(String threadId, CreateRunOptions createRunOptions)"
  nameWithType: "AssistantsAsyncClient.createRunStream(String threadId, CreateRunOptions createRunOptions)"
  summary: "Creates a new run for an assistant thread returning a stream of updates."
  parameters:
  - description: "The ID of the thread to run."
    name: "threadId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The details for the run to create."
    name: "createRunOptions"
    type: "<xref href=\"com.azure.ai.openai.assistants.models.CreateRunOptions?alt=com.azure.ai.openai.assistants.models.CreateRunOptions&text=CreateRunOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Flux<StreamUpdate> createRunStream(String threadId, CreateRunOptions createRunOptions)"
  desc: "Creates a new run for an assistant thread returning a stream of updates."
  returns:
    description: "data representing a single evaluation run of an assistant thread on successful completion of\n <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Flux\"></xref>."
    type: "<xref href=\"reactor.core.publisher.Flux?alt=reactor.core.publisher.Flux&text=Flux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.ai.openai.assistants.models.StreamUpdate?alt=com.azure.ai.openai.assistants.models.StreamUpdate&text=StreamUpdate\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.ai.openai.assistants.AssistantsAsyncClient.createRunStream(java.lang.String,com.azure.ai.openai.assistants.models.CreateRunOptions,java.util.List<com.azure.ai.openai.assistants.models.RunIncludes>)"
  fullName: "com.azure.ai.openai.assistants.AssistantsAsyncClient.createRunStream(String threadId, CreateRunOptions createRunOptions, List<RunIncludes> runInclude)"
  name: "createRunStream(String threadId, CreateRunOptions createRunOptions, List<RunIncludes> runInclude)"
  nameWithType: "AssistantsAsyncClient.createRunStream(String threadId, CreateRunOptions createRunOptions, List<RunIncludes> runInclude)"
  summary: "Creates a new run for an assistant thread returning a stream of updates with additional included fields."
  parameters:
  - description: "The ID of the thread to run."
    name: "threadId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The details for the run to create."
    name: "createRunOptions"
    type: "<xref href=\"com.azure.ai.openai.assistants.models.CreateRunOptions?alt=com.azure.ai.openai.assistants.models.CreateRunOptions&text=CreateRunOptions\" data-throw-if-not-resolved=\"False\" />"
  - description: "A list of additional fields to include in the response."
    name: "runInclude"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/List.html\">List</a>&lt;<xref href=\"com.azure.ai.openai.assistants.models.RunIncludes?alt=com.azure.ai.openai.assistants.models.RunIncludes&text=RunIncludes\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public Flux<StreamUpdate> createRunStream(String threadId, CreateRunOptions createRunOptions, List<RunIncludes> runInclude)"
  desc: "Creates a new run for an assistant thread returning a stream of updates with additional included fields."
  returns:
    description: "a stream of updates from the assistant thread run on successful completion of <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Flux\"></xref>."
    type: "<xref href=\"reactor.core.publisher.Flux?alt=reactor.core.publisher.Flux&text=Flux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.ai.openai.assistants.models.StreamUpdate?alt=com.azure.ai.openai.assistants.models.StreamUpdate&text=StreamUpdate\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.ai.openai.assistants.AssistantsAsyncClient.createRunStream(java.lang.String,java.lang.String)"
  fullName: "com.azure.ai.openai.assistants.AssistantsAsyncClient.createRunStream(String threadId, String assistantId)"
  name: "createRunStream(String threadId, String assistantId)"
  nameWithType: "AssistantsAsyncClient.createRunStream(String threadId, String assistantId)"
  summary: "Creates a new run for an assistant thread returning a stream of updates."
  parameters:
  - description: "The ID of the thread to run"
    name: "threadId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The ID of the assistant that will run the thread."
    name: "assistantId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public Flux<StreamUpdate> createRunStream(String threadId, String assistantId)"
  desc: "Creates a new run for an assistant thread returning a stream of updates."
  returns:
    description: "data representing a single evaluation run of an assistant thread on successful completion of\n <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<xref href=\"reactor.core.publisher.Flux?alt=reactor.core.publisher.Flux&text=Flux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.ai.openai.assistants.models.StreamUpdate?alt=com.azure.ai.openai.assistants.models.StreamUpdate&text=StreamUpdate\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.ai.openai.assistants.AssistantsAsyncClient.createRunWithResponse(java.lang.String,com.azure.core.util.BinaryData,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.ai.openai.assistants.AssistantsAsyncClient.createRunWithResponse(String threadId, BinaryData createRunOptions, RequestOptions requestOptions)"
  name: "createRunWithResponse(String threadId, BinaryData createRunOptions, RequestOptions requestOptions)"
  nameWithType: "AssistantsAsyncClient.createRunWithResponse(String threadId, BinaryData createRunOptions, RequestOptions requestOptions)"
  summary: "Creates a new run for an assistant thread."
  parameters:
  - description: "The ID of the thread to run."
    name: "threadId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The details for the run to create."
    name: "createRunOptions"
    type: "<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<BinaryData>> createRunWithResponse(String threadId, BinaryData createRunOptions, RequestOptions requestOptions)"
  desc: "Creates a new run for an assistant thread.\n\n**Request Body Schema**\n\n```java\n{\n     assistant_id: String (Required)\n     model: String (Optional)\n     instructions: String (Optional)\n     additional_instructions: String (Optional)\n     tools (Optional): [\n          (Optional){\n         }\n     ]\n     metadata (Optional): {\n         String: String (Required)\n     }\n }\n```\n\n**Response Body Schema**\n\n```java\n{\n     id: String (Required)\n     object: String (Required)\n     thread_id: String (Required)\n     assistant_id: String (Required)\n     status: String(queued/in_progress/requires_action/cancelling/cancelled/failed/completed/expired) (Required)\n     required_action (Optional): {\n     }\n     last_error (Required): {\n         code: String (Required)\n         message: String (Required)\n     }\n     model: String (Required)\n     instructions: String (Required)\n     tools (Required): [\n          (Required){\n         }\n     ]\n     file_ids (Required): [\n         String (Required)\n     ]\n     created_at: long (Required)\n     expires_at: OffsetDateTime (Required)\n     started_at: OffsetDateTime (Required)\n     completed_at: OffsetDateTime (Required)\n     cancelled_at: OffsetDateTime (Required)\n     failed_at: OffsetDateTime (Required)\n     metadata (Required): {\n         String: String (Required)\n     }\n }\n```"
  returns:
    description: "data representing a single evaluation run of an assistant thread along with <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> on\n successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.ai.openai.assistants.AssistantsAsyncClient.createThread(com.azure.ai.openai.assistants.models.AssistantThreadCreationOptions)"
  fullName: "com.azure.ai.openai.assistants.AssistantsAsyncClient.createThread(AssistantThreadCreationOptions assistantThreadCreationOptions)"
  name: "createThread(AssistantThreadCreationOptions assistantThreadCreationOptions)"
  nameWithType: "AssistantsAsyncClient.createThread(AssistantThreadCreationOptions assistantThreadCreationOptions)"
  summary: "Creates a new thread."
  parameters:
  - description: "The details used to create a new assistant thread."
    name: "assistantThreadCreationOptions"
    type: "<xref href=\"com.azure.ai.openai.assistants.models.AssistantThreadCreationOptions?alt=com.azure.ai.openai.assistants.models.AssistantThreadCreationOptions&text=AssistantThreadCreationOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<AssistantThread> createThread(AssistantThreadCreationOptions assistantThreadCreationOptions)"
  desc: "Creates a new thread. Threads contain messages and can be run by assistants."
  returns:
    description: "information about a single thread associated with an assistant on successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.ai.openai.assistants.models.AssistantThread?alt=com.azure.ai.openai.assistants.models.AssistantThread&text=AssistantThread\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.ai.openai.assistants.AssistantsAsyncClient.createThreadAndRun(com.azure.ai.openai.assistants.models.CreateAndRunThreadOptions)"
  fullName: "com.azure.ai.openai.assistants.AssistantsAsyncClient.createThreadAndRun(CreateAndRunThreadOptions createAndRunThreadOptions)"
  name: "createThreadAndRun(CreateAndRunThreadOptions createAndRunThreadOptions)"
  nameWithType: "AssistantsAsyncClient.createThreadAndRun(CreateAndRunThreadOptions createAndRunThreadOptions)"
  summary: "Creates a new assistant thread and immediately starts a run using that new thread."
  parameters:
  - description: "The details used when creating and immediately running a new assistant thread."
    name: "createAndRunThreadOptions"
    type: "<xref href=\"com.azure.ai.openai.assistants.models.CreateAndRunThreadOptions?alt=com.azure.ai.openai.assistants.models.CreateAndRunThreadOptions&text=CreateAndRunThreadOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<ThreadRun> createThreadAndRun(CreateAndRunThreadOptions createAndRunThreadOptions)"
  desc: "Creates a new assistant thread and immediately starts a run using that new thread."
  returns:
    description: "data representing a single evaluation run of an assistant thread on successful completion of\n <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.ai.openai.assistants.models.ThreadRun?alt=com.azure.ai.openai.assistants.models.ThreadRun&text=ThreadRun\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.ai.openai.assistants.AssistantsAsyncClient.createThreadAndRunStream(com.azure.ai.openai.assistants.models.CreateAndRunThreadOptions)"
  fullName: "com.azure.ai.openai.assistants.AssistantsAsyncClient.createThreadAndRunStream(CreateAndRunThreadOptions createAndRunThreadOptions)"
  name: "createThreadAndRunStream(CreateAndRunThreadOptions createAndRunThreadOptions)"
  nameWithType: "AssistantsAsyncClient.createThreadAndRunStream(CreateAndRunThreadOptions createAndRunThreadOptions)"
  summary: "Creates a new assistant thread and immediately starts a run using that new thread."
  parameters:
  - description: "The details used when creating and immediately running a new assistant thread."
    name: "createAndRunThreadOptions"
    type: "<xref href=\"com.azure.ai.openai.assistants.models.CreateAndRunThreadOptions?alt=com.azure.ai.openai.assistants.models.CreateAndRunThreadOptions&text=CreateAndRunThreadOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Flux<StreamUpdate> createThreadAndRunStream(CreateAndRunThreadOptions createAndRunThreadOptions)"
  desc: "Creates a new assistant thread and immediately starts a run using that new thread. Updates are returned as a stream."
  returns:
    description: "data representing a single evaluation run of an assistant thread on successful completion of\n <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Flux\"></xref>."
    type: "<xref href=\"reactor.core.publisher.Flux?alt=reactor.core.publisher.Flux&text=Flux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.ai.openai.assistants.models.StreamUpdate?alt=com.azure.ai.openai.assistants.models.StreamUpdate&text=StreamUpdate\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.ai.openai.assistants.AssistantsAsyncClient.createThreadAndRunWithResponse(com.azure.core.util.BinaryData,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.ai.openai.assistants.AssistantsAsyncClient.createThreadAndRunWithResponse(BinaryData createAndRunThreadOptions, RequestOptions requestOptions)"
  name: "createThreadAndRunWithResponse(BinaryData createAndRunThreadOptions, RequestOptions requestOptions)"
  nameWithType: "AssistantsAsyncClient.createThreadAndRunWithResponse(BinaryData createAndRunThreadOptions, RequestOptions requestOptions)"
  summary: "Creates a new assistant thread and immediately starts a run using that new thread."
  parameters:
  - description: "The details used when creating and immediately running a new assistant thread."
    name: "createAndRunThreadOptions"
    type: "<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<BinaryData>> createThreadAndRunWithResponse(BinaryData createAndRunThreadOptions, RequestOptions requestOptions)"
  desc: "Creates a new assistant thread and immediately starts a run using that new thread.\n\n**Request Body Schema**\n\n```java\n{\n     assistant_id: String (Required)\n     thread (Optional): {\n         messages (Optional): [\n              (Optional){\n                 role: String(user/assistant) (Required)\n                 content: String (Required)\n                 file_ids (Optional): [\n                     String (Optional)\n                 ]\n                 metadata (Optional): {\n                     String: String (Required)\n                 }\n             }\n         ]\n         metadata (Optional): {\n             String: String (Required)\n         }\n     }\n     model: String (Optional)\n     instructions: String (Optional)\n     tools (Optional): [\n          (Optional){\n         }\n     ]\n     metadata (Optional): {\n         String: String (Required)\n     }\n }\n```\n\n**Response Body Schema**\n\n```java\n{\n     id: String (Required)\n     object: String (Required)\n     thread_id: String (Required)\n     assistant_id: String (Required)\n     status: String(queued/in_progress/requires_action/cancelling/cancelled/failed/completed/expired) (Required)\n     required_action (Optional): {\n     }\n     last_error (Required): {\n         code: String (Required)\n         message: String (Required)\n     }\n     model: String (Required)\n     instructions: String (Required)\n     tools (Required): [\n          (Required){\n         }\n     ]\n     file_ids (Required): [\n         String (Required)\n     ]\n     created_at: long (Required)\n     expires_at: OffsetDateTime (Required)\n     started_at: OffsetDateTime (Required)\n     completed_at: OffsetDateTime (Required)\n     cancelled_at: OffsetDateTime (Required)\n     failed_at: OffsetDateTime (Required)\n     metadata (Required): {\n         String: String (Required)\n     }\n }\n```"
  returns:
    description: "data representing a single evaluation run of an assistant thread along with <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> on\n successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.ai.openai.assistants.AssistantsAsyncClient.createThreadWithResponse(com.azure.core.util.BinaryData,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.ai.openai.assistants.AssistantsAsyncClient.createThreadWithResponse(BinaryData assistantThreadCreationOptions, RequestOptions requestOptions)"
  name: "createThreadWithResponse(BinaryData assistantThreadCreationOptions, RequestOptions requestOptions)"
  nameWithType: "AssistantsAsyncClient.createThreadWithResponse(BinaryData assistantThreadCreationOptions, RequestOptions requestOptions)"
  summary: "Creates a new thread."
  parameters:
  - description: "The details used to create a new assistant thread."
    name: "assistantThreadCreationOptions"
    type: "<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<BinaryData>> createThreadWithResponse(BinaryData assistantThreadCreationOptions, RequestOptions requestOptions)"
  desc: "Creates a new thread. Threads contain messages and can be run by assistants.\n\n**Request Body Schema**\n\n```java\n{\n     messages (Optional): [\n          (Optional){\n             role: String(user/assistant) (Required)\n             content: String (Required)\n             file_ids (Optional): [\n                 String (Optional)\n             ]\n             metadata (Optional): {\n                 String: String (Required)\n             }\n         }\n     ]\n     metadata (Optional): {\n         String: String (Required)\n     }\n }\n```\n\n**Response Body Schema**\n\n```java\n{\n     id: String (Required)\n     object: String (Required)\n     created_at: long (Required)\n     metadata (Required): {\n         String: String (Required)\n     }\n }\n```"
  returns:
    description: "information about a single thread associated with an assistant along with <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> on successful\n completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.ai.openai.assistants.AssistantsAsyncClient.createVectorStore(com.azure.ai.openai.assistants.models.VectorStoreOptions)"
  fullName: "com.azure.ai.openai.assistants.AssistantsAsyncClient.createVectorStore(VectorStoreOptions vectorStoreOptions)"
  name: "createVectorStore(VectorStoreOptions vectorStoreOptions)"
  nameWithType: "AssistantsAsyncClient.createVectorStore(VectorStoreOptions vectorStoreOptions)"
  summary: "Creates a vector store."
  parameters:
  - description: "Request object for creating a vector store."
    name: "vectorStoreOptions"
    type: "<xref href=\"com.azure.ai.openai.assistants.models.VectorStoreOptions?alt=com.azure.ai.openai.assistants.models.VectorStoreOptions&text=VectorStoreOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<VectorStore> createVectorStore(VectorStoreOptions vectorStoreOptions)"
  desc: "Creates a vector store."
  returns:
    description: "a vector store is a collection of processed files can be used by the `file_search` tool on successful\n completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.ai.openai.assistants.models.VectorStore?alt=com.azure.ai.openai.assistants.models.VectorStore&text=VectorStore\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.ai.openai.assistants.AssistantsAsyncClient.createVectorStoreFile(java.lang.String,java.lang.String)"
  fullName: "com.azure.ai.openai.assistants.AssistantsAsyncClient.createVectorStoreFile(String vectorStoreId, String fileId)"
  name: "createVectorStoreFile(String vectorStoreId, String fileId)"
  nameWithType: "AssistantsAsyncClient.createVectorStoreFile(String vectorStoreId, String fileId)"
  summary: "Create a vector store file by attaching a file to a vector store."
  parameters:
  - description: "The ID of the vector store for which to create a File."
    name: "vectorStoreId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "A File ID that the vector store should use. Useful for tools like `file_search` that can access\n files."
    name: "fileId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public Mono<VectorStoreFile> createVectorStoreFile(String vectorStoreId, String fileId)"
  desc: "Create a vector store file by attaching a file to a vector store."
  returns:
    description: "description of a file attached to a vector store on successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.ai.openai.assistants.models.VectorStoreFile?alt=com.azure.ai.openai.assistants.models.VectorStoreFile&text=VectorStoreFile\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.ai.openai.assistants.AssistantsAsyncClient.createVectorStoreFile(java.lang.String,java.lang.String,com.azure.ai.openai.assistants.models.VectorStoreChunkingStrategyRequest)"
  fullName: "com.azure.ai.openai.assistants.AssistantsAsyncClient.createVectorStoreFile(String vectorStoreId, String fileId, VectorStoreChunkingStrategyRequest chunkingStrategy)"
  name: "createVectorStoreFile(String vectorStoreId, String fileId, VectorStoreChunkingStrategyRequest chunkingStrategy)"
  nameWithType: "AssistantsAsyncClient.createVectorStoreFile(String vectorStoreId, String fileId, VectorStoreChunkingStrategyRequest chunkingStrategy)"
  summary: "Create a vector store file by attaching a file to a vector store."
  parameters:
  - description: "The ID of the vector store for which to create a File."
    name: "vectorStoreId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "A File ID that the vector store should use. Useful for tools like `file_search` that can access\n files."
    name: "fileId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The chunking strategy used to chunk the file(s). If not set, will use the auto strategy."
    name: "chunkingStrategy"
    type: "<xref href=\"com.azure.ai.openai.assistants.models.VectorStoreChunkingStrategyRequest?alt=com.azure.ai.openai.assistants.models.VectorStoreChunkingStrategyRequest&text=VectorStoreChunkingStrategyRequest\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<VectorStoreFile> createVectorStoreFile(String vectorStoreId, String fileId, VectorStoreChunkingStrategyRequest chunkingStrategy)"
  desc: "Create a vector store file by attaching a file to a vector store."
  returns:
    description: "description of a file attached to a vector store on successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.ai.openai.assistants.models.VectorStoreFile?alt=com.azure.ai.openai.assistants.models.VectorStoreFile&text=VectorStoreFile\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.ai.openai.assistants.AssistantsAsyncClient.createVectorStoreFileBatch(java.lang.String,java.util.List<java.lang.String>)"
  fullName: "com.azure.ai.openai.assistants.AssistantsAsyncClient.createVectorStoreFileBatch(String vectorStoreId, List<String> fileIds)"
  name: "createVectorStoreFileBatch(String vectorStoreId, List<String> fileIds)"
  nameWithType: "AssistantsAsyncClient.createVectorStoreFileBatch(String vectorStoreId, List<String> fileIds)"
  summary: "Create a vector store file batch."
  parameters:
  - description: "The ID of the vector store for which to create a File Batch."
    name: "vectorStoreId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "A list of File IDs that the vector store should use. Useful for tools like `file_search` that can\n access files."
    name: "fileIds"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/List.html\">List</a>&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>&gt;"
  syntax: "public Mono<VectorStoreFileBatch> createVectorStoreFileBatch(String vectorStoreId, List<String> fileIds)"
  desc: "Create a vector store file batch."
  returns:
    description: "a batch of files attached to a vector store on successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.ai.openai.assistants.models.VectorStoreFileBatch?alt=com.azure.ai.openai.assistants.models.VectorStoreFileBatch&text=VectorStoreFileBatch\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.ai.openai.assistants.AssistantsAsyncClient.createVectorStoreFileBatch(java.lang.String,java.util.List<java.lang.String>,com.azure.ai.openai.assistants.models.VectorStoreChunkingStrategyRequest)"
  fullName: "com.azure.ai.openai.assistants.AssistantsAsyncClient.createVectorStoreFileBatch(String vectorStoreId, List<String> fileIds, VectorStoreChunkingStrategyRequest chunkingStrategy)"
  name: "createVectorStoreFileBatch(String vectorStoreId, List<String> fileIds, VectorStoreChunkingStrategyRequest chunkingStrategy)"
  nameWithType: "AssistantsAsyncClient.createVectorStoreFileBatch(String vectorStoreId, List<String> fileIds, VectorStoreChunkingStrategyRequest chunkingStrategy)"
  summary: "Create a vector store file batch."
  parameters:
  - description: "The ID of the vector store for which to create a File Batch."
    name: "vectorStoreId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "A list of File IDs that the vector store should use. Useful for tools like `file_search` that can\n access files."
    name: "fileIds"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/List.html\">List</a>&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>&gt;"
  - description: "The chunking strategy used to chunk the file(s). If not set, will use the auto strategy."
    name: "chunkingStrategy"
    type: "<xref href=\"com.azure.ai.openai.assistants.models.VectorStoreChunkingStrategyRequest?alt=com.azure.ai.openai.assistants.models.VectorStoreChunkingStrategyRequest&text=VectorStoreChunkingStrategyRequest\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<VectorStoreFileBatch> createVectorStoreFileBatch(String vectorStoreId, List<String> fileIds, VectorStoreChunkingStrategyRequest chunkingStrategy)"
  desc: "Create a vector store file batch."
  returns:
    description: "a batch of files attached to a vector store on successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.ai.openai.assistants.models.VectorStoreFileBatch?alt=com.azure.ai.openai.assistants.models.VectorStoreFileBatch&text=VectorStoreFileBatch\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.ai.openai.assistants.AssistantsAsyncClient.createVectorStoreFileBatchWithResponse(java.lang.String,com.azure.core.util.BinaryData,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.ai.openai.assistants.AssistantsAsyncClient.createVectorStoreFileBatchWithResponse(String vectorStoreId, BinaryData request, RequestOptions requestOptions)"
  name: "createVectorStoreFileBatchWithResponse(String vectorStoreId, BinaryData request, RequestOptions requestOptions)"
  nameWithType: "AssistantsAsyncClient.createVectorStoreFileBatchWithResponse(String vectorStoreId, BinaryData request, RequestOptions requestOptions)"
  summary: "Create a vector store file batch."
  parameters:
  - description: "The ID of the vector store for which to create a File Batch."
    name: "vectorStoreId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The request parameter."
    name: "request"
    type: "<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<BinaryData>> createVectorStoreFileBatchWithResponse(String vectorStoreId, BinaryData request, RequestOptions requestOptions)"
  desc: "Create a vector store file batch.\n\n**Request Body Schema**\n\n```java\n{\n     file_ids (Required): [\n         String (Required)\n     ]\n }\n```\n\n**Response Body Schema**\n\n```java\n{\n     id: String (Required)\n     object: String (Required)\n     created_at: long (Required)\n     vector_store_id: String (Required)\n     status: String(in_progress/completed/cancelled/failed) (Required)\n     file_counts (Required): {\n         in_progress: int (Required)\n         completed: int (Required)\n         failed: int (Required)\n         cancelled: int (Required)\n         total: int (Required)\n     }\n }\n```"
  returns:
    description: "a batch of files attached to a vector store along with <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> on successful completion of\n <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.ai.openai.assistants.AssistantsAsyncClient.createVectorStoreFileWithResponse(java.lang.String,com.azure.core.util.BinaryData,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.ai.openai.assistants.AssistantsAsyncClient.createVectorStoreFileWithResponse(String vectorStoreId, BinaryData request, RequestOptions requestOptions)"
  name: "createVectorStoreFileWithResponse(String vectorStoreId, BinaryData request, RequestOptions requestOptions)"
  nameWithType: "AssistantsAsyncClient.createVectorStoreFileWithResponse(String vectorStoreId, BinaryData request, RequestOptions requestOptions)"
  summary: "Create a vector store file by attaching a file to a vector store."
  parameters:
  - description: "The ID of the vector store for which to create a File."
    name: "vectorStoreId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The request parameter."
    name: "request"
    type: "<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<BinaryData>> createVectorStoreFileWithResponse(String vectorStoreId, BinaryData request, RequestOptions requestOptions)"
  desc: "Create a vector store file by attaching a file to a vector store.\n\n**Request Body Schema**\n\n```java\n{\n     file_id: String (Required)\n }\n```\n\n**Response Body Schema**\n\n```java\n{\n     id: String (Required)\n     object: String (Required)\n     usage_bytes: int (Required)\n     created_at: long (Required)\n     vector_store_id: String (Required)\n     status: String(in_progress/completed/failed/cancelled) (Required)\n     last_error (Required): {\n         code: String(internal_error/file_not_found/parsing_error/unhandled_mime_type) (Required)\n         message: String (Required)\n     }\n }\n```"
  returns:
    description: "description of a file attached to a vector store along with <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> on successful completion of\n <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.ai.openai.assistants.AssistantsAsyncClient.createVectorStoreWithResponse(com.azure.core.util.BinaryData,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.ai.openai.assistants.AssistantsAsyncClient.createVectorStoreWithResponse(BinaryData vectorStoreOptions, RequestOptions requestOptions)"
  name: "createVectorStoreWithResponse(BinaryData vectorStoreOptions, RequestOptions requestOptions)"
  nameWithType: "AssistantsAsyncClient.createVectorStoreWithResponse(BinaryData vectorStoreOptions, RequestOptions requestOptions)"
  summary: "Creates a vector store."
  parameters:
  - description: "Request object for creating a vector store."
    name: "vectorStoreOptions"
    type: "<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<BinaryData>> createVectorStoreWithResponse(BinaryData vectorStoreOptions, RequestOptions requestOptions)"
  desc: "Creates a vector store.\n\n**Request Body Schema**\n\n```java\n{\n     file_ids (Optional): [\n         String (Optional)\n     ]\n     name: String (Optional)\n     expires_after (Optional): {\n         anchor: String(last_active_at) (Required)\n         days: int (Required)\n     }\n     metadata (Optional): {\n         String: String (Required)\n     }\n }\n```\n\n**Response Body Schema**\n\n```java\n{\n     id: String (Required)\n     object: String (Required)\n     created_at: long (Required)\n     name: String (Required)\n     usage_bytes: int (Required)\n     file_counts (Required): {\n         in_progress: int (Required)\n         completed: int (Required)\n         failed: int (Required)\n         cancelled: int (Required)\n         total: int (Required)\n     }\n     status: String(expired/in_progress/completed) (Required)\n     expires_after (Optional): {\n         anchor: String(last_active_at) (Required)\n         days: int (Required)\n     }\n     expires_at: Long (Optional)\n     last_active_at: Long (Required)\n     metadata (Required): {\n         String: String (Required)\n     }\n }\n```"
  returns:
    description: "a vector store is a collection of processed files can be used by the `file_search` tool along with\n <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> on successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.ai.openai.assistants.AssistantsAsyncClient.deleteAssistant(java.lang.String)"
  fullName: "com.azure.ai.openai.assistants.AssistantsAsyncClient.deleteAssistant(String assistantId)"
  name: "deleteAssistant(String assistantId)"
  nameWithType: "AssistantsAsyncClient.deleteAssistant(String assistantId)"
  summary: "Deletes an assistant."
  parameters:
  - description: "The ID of the assistant to delete."
    name: "assistantId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public Mono<AssistantDeletionStatus> deleteAssistant(String assistantId)"
  desc: "Deletes an assistant."
  returns:
    description: "the status of an assistant deletion operation on successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.ai.openai.assistants.models.AssistantDeletionStatus?alt=com.azure.ai.openai.assistants.models.AssistantDeletionStatus&text=AssistantDeletionStatus\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.ai.openai.assistants.AssistantsAsyncClient.deleteAssistantWithResponse(java.lang.String,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.ai.openai.assistants.AssistantsAsyncClient.deleteAssistantWithResponse(String assistantId, RequestOptions requestOptions)"
  name: "deleteAssistantWithResponse(String assistantId, RequestOptions requestOptions)"
  nameWithType: "AssistantsAsyncClient.deleteAssistantWithResponse(String assistantId, RequestOptions requestOptions)"
  summary: "Deletes an assistant."
  parameters:
  - description: "The ID of the assistant to delete."
    name: "assistantId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<BinaryData>> deleteAssistantWithResponse(String assistantId, RequestOptions requestOptions)"
  desc: "Deletes an assistant.\n\n**Response Body Schema**\n\n```java\n{\n     id: String (Required)\n     deleted: boolean (Required)\n     object: String (Required)\n }\n```"
  returns:
    description: "the status of an assistant deletion operation along with <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> on successful completion of\n <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.ai.openai.assistants.AssistantsAsyncClient.deleteFile(java.lang.String)"
  fullName: "com.azure.ai.openai.assistants.AssistantsAsyncClient.deleteFile(String fileId)"
  name: "deleteFile(String fileId)"
  nameWithType: "AssistantsAsyncClient.deleteFile(String fileId)"
  summary: "Delete a previously uploaded file."
  parameters:
  - description: "The ID of the file to delete."
    name: "fileId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public Mono<FileDeletionStatus> deleteFile(String fileId)"
  desc: "Delete a previously uploaded file."
  returns:
    description: "a status response from a file deletion operation on successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.ai.openai.assistants.models.FileDeletionStatus?alt=com.azure.ai.openai.assistants.models.FileDeletionStatus&text=FileDeletionStatus\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.ai.openai.assistants.AssistantsAsyncClient.deleteFileWithResponse(java.lang.String,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.ai.openai.assistants.AssistantsAsyncClient.deleteFileWithResponse(String fileId, RequestOptions requestOptions)"
  name: "deleteFileWithResponse(String fileId, RequestOptions requestOptions)"
  nameWithType: "AssistantsAsyncClient.deleteFileWithResponse(String fileId, RequestOptions requestOptions)"
  summary: "Delete a previously uploaded file."
  parameters:
  - description: "The ID of the file to delete."
    name: "fileId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<BinaryData>> deleteFileWithResponse(String fileId, RequestOptions requestOptions)"
  desc: "Delete a previously uploaded file.\n\n**Response Body Schema**\n\n```java\n{\n     id: String (Required)\n     deleted: boolean (Required)\n     object: String (Required)\n }\n```"
  returns:
    description: "a status response from a file deletion operation along with <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> on successful completion of\n <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.ai.openai.assistants.AssistantsAsyncClient.deleteThread(java.lang.String)"
  fullName: "com.azure.ai.openai.assistants.AssistantsAsyncClient.deleteThread(String threadId)"
  name: "deleteThread(String threadId)"
  nameWithType: "AssistantsAsyncClient.deleteThread(String threadId)"
  summary: "Deletes an existing thread."
  parameters:
  - description: "The ID of the thread to delete."
    name: "threadId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public Mono<ThreadDeletionStatus> deleteThread(String threadId)"
  desc: "Deletes an existing thread."
  returns:
    description: "the status of a thread deletion operation on successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.ai.openai.assistants.models.ThreadDeletionStatus?alt=com.azure.ai.openai.assistants.models.ThreadDeletionStatus&text=ThreadDeletionStatus\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.ai.openai.assistants.AssistantsAsyncClient.deleteThreadWithResponse(java.lang.String,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.ai.openai.assistants.AssistantsAsyncClient.deleteThreadWithResponse(String threadId, RequestOptions requestOptions)"
  name: "deleteThreadWithResponse(String threadId, RequestOptions requestOptions)"
  nameWithType: "AssistantsAsyncClient.deleteThreadWithResponse(String threadId, RequestOptions requestOptions)"
  summary: "Deletes an existing thread."
  parameters:
  - description: "The ID of the thread to delete."
    name: "threadId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<BinaryData>> deleteThreadWithResponse(String threadId, RequestOptions requestOptions)"
  desc: "Deletes an existing thread.\n\n**Response Body Schema**\n\n```java\n{\n     id: String (Required)\n     deleted: boolean (Required)\n     object: String (Required)\n }\n```"
  returns:
    description: "the status of a thread deletion operation along with <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> on successful completion of\n <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.ai.openai.assistants.AssistantsAsyncClient.deleteVectorStore(java.lang.String)"
  fullName: "com.azure.ai.openai.assistants.AssistantsAsyncClient.deleteVectorStore(String vectorStoreId)"
  name: "deleteVectorStore(String vectorStoreId)"
  nameWithType: "AssistantsAsyncClient.deleteVectorStore(String vectorStoreId)"
  summary: "Deletes the vector store object matching the specified ID."
  parameters:
  - description: "The ID of the vector store to delete."
    name: "vectorStoreId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public Mono<VectorStoreDeletionStatus> deleteVectorStore(String vectorStoreId)"
  desc: "Deletes the vector store object matching the specified ID."
  returns:
    description: "response object for deleting a vector store on successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.ai.openai.assistants.models.VectorStoreDeletionStatus?alt=com.azure.ai.openai.assistants.models.VectorStoreDeletionStatus&text=VectorStoreDeletionStatus\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.ai.openai.assistants.AssistantsAsyncClient.deleteVectorStoreFile(java.lang.String,java.lang.String)"
  fullName: "com.azure.ai.openai.assistants.AssistantsAsyncClient.deleteVectorStoreFile(String vectorStoreId, String fileId)"
  name: "deleteVectorStoreFile(String vectorStoreId, String fileId)"
  nameWithType: "AssistantsAsyncClient.deleteVectorStoreFile(String vectorStoreId, String fileId)"
  summary: "Delete a vector store file."
  parameters:
  - description: "The ID of the vector store that the file belongs to."
    name: "vectorStoreId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The ID of the file to delete its relationship to the vector store."
    name: "fileId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public Mono<VectorStoreFileDeletionStatus> deleteVectorStoreFile(String vectorStoreId, String fileId)"
  desc: "Delete a vector store file. This will remove the file from the vector store but the file itself will not be deleted. To delete the file, use the delete file endpoint."
  returns:
    description: "response object for deleting a vector store file relationship on successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.ai.openai.assistants.models.VectorStoreFileDeletionStatus?alt=com.azure.ai.openai.assistants.models.VectorStoreFileDeletionStatus&text=VectorStoreFileDeletionStatus\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.ai.openai.assistants.AssistantsAsyncClient.deleteVectorStoreFileWithResponse(java.lang.String,java.lang.String,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.ai.openai.assistants.AssistantsAsyncClient.deleteVectorStoreFileWithResponse(String vectorStoreId, String fileId, RequestOptions requestOptions)"
  name: "deleteVectorStoreFileWithResponse(String vectorStoreId, String fileId, RequestOptions requestOptions)"
  nameWithType: "AssistantsAsyncClient.deleteVectorStoreFileWithResponse(String vectorStoreId, String fileId, RequestOptions requestOptions)"
  summary: "Delete a vector store file."
  parameters:
  - description: "The ID of the vector store that the file belongs to."
    name: "vectorStoreId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The ID of the file to delete its relationship to the vector store."
    name: "fileId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<BinaryData>> deleteVectorStoreFileWithResponse(String vectorStoreId, String fileId, RequestOptions requestOptions)"
  desc: "Delete a vector store file. This will remove the file from the vector store but the file itself will not be deleted. To delete the file, use the delete file endpoint.\n\n**Response Body Schema**\n\n```java\n{\n     id: String (Required)\n     deleted: boolean (Required)\n     object: String (Required)\n }\n```"
  returns:
    description: "response object for deleting a vector store file relationship along with <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> on successful\n completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.ai.openai.assistants.AssistantsAsyncClient.deleteVectorStoreWithResponse(java.lang.String,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.ai.openai.assistants.AssistantsAsyncClient.deleteVectorStoreWithResponse(String vectorStoreId, RequestOptions requestOptions)"
  name: "deleteVectorStoreWithResponse(String vectorStoreId, RequestOptions requestOptions)"
  nameWithType: "AssistantsAsyncClient.deleteVectorStoreWithResponse(String vectorStoreId, RequestOptions requestOptions)"
  summary: "Deletes the vector store object matching the specified ID."
  parameters:
  - description: "The ID of the vector store to delete."
    name: "vectorStoreId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<BinaryData>> deleteVectorStoreWithResponse(String vectorStoreId, RequestOptions requestOptions)"
  desc: "Deletes the vector store object matching the specified ID.\n\n**Response Body Schema**\n\n```java\n{\n     id: String (Required)\n     deleted: boolean (Required)\n     object: String (Required)\n }\n```"
  returns:
    description: "response object for deleting a vector store along with <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> on successful completion of\n <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.ai.openai.assistants.AssistantsAsyncClient.getAssistant(java.lang.String)"
  fullName: "com.azure.ai.openai.assistants.AssistantsAsyncClient.getAssistant(String assistantId)"
  name: "getAssistant(String assistantId)"
  nameWithType: "AssistantsAsyncClient.getAssistant(String assistantId)"
  summary: "Retrieves an existing assistant."
  parameters:
  - description: "The ID of the assistant to retrieve."
    name: "assistantId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public Mono<Assistant> getAssistant(String assistantId)"
  desc: "Retrieves an existing assistant."
  returns:
    description: "represents an assistant that can call the model and use tools on successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.ai.openai.assistants.models.Assistant?alt=com.azure.ai.openai.assistants.models.Assistant&text=Assistant\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.ai.openai.assistants.AssistantsAsyncClient.getAssistantWithResponse(java.lang.String,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.ai.openai.assistants.AssistantsAsyncClient.getAssistantWithResponse(String assistantId, RequestOptions requestOptions)"
  name: "getAssistantWithResponse(String assistantId, RequestOptions requestOptions)"
  nameWithType: "AssistantsAsyncClient.getAssistantWithResponse(String assistantId, RequestOptions requestOptions)"
  summary: "Retrieves an existing assistant."
  parameters:
  - description: "The ID of the assistant to retrieve."
    name: "assistantId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<BinaryData>> getAssistantWithResponse(String assistantId, RequestOptions requestOptions)"
  desc: "Retrieves an existing assistant.\n\n**Response Body Schema**\n\n```java\n{\n     id: String (Required)\n     object: String (Required)\n     created_at: long (Required)\n     name: String (Required)\n     description: String (Required)\n     model: String (Required)\n     instructions: String (Required)\n     tools (Required): [\n          (Required){\n         }\n     ]\n     file_ids (Required): [\n         String (Required)\n     ]\n     metadata (Required): {\n         String: String (Required)\n     }\n }\n```"
  returns:
    description: "represents an assistant that can call the model and use tools along with <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> on successful\n completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.ai.openai.assistants.AssistantsAsyncClient.getFile(java.lang.String)"
  fullName: "com.azure.ai.openai.assistants.AssistantsAsyncClient.getFile(String fileId)"
  name: "getFile(String fileId)"
  nameWithType: "AssistantsAsyncClient.getFile(String fileId)"
  summary: "Returns information about a specific file."
  parameters:
  - description: "The ID of the file to retrieve."
    name: "fileId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public Mono<OpenAIFile> getFile(String fileId)"
  desc: "Returns information about a specific file. Does not retrieve file content."
  returns:
    description: "represents an assistant that can call the model and use tools on successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.ai.openai.assistants.models.OpenAIFile?alt=com.azure.ai.openai.assistants.models.OpenAIFile&text=OpenAIFile\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.ai.openai.assistants.AssistantsAsyncClient.getFileContent(java.lang.String)"
  fullName: "com.azure.ai.openai.assistants.AssistantsAsyncClient.getFileContent(String fileId)"
  name: "getFileContent(String fileId)"
  nameWithType: "AssistantsAsyncClient.getFileContent(String fileId)"
  summary: "Returns information about a specific file."
  parameters:
  - description: "The ID of the file to retrieve."
    name: "fileId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public Mono<byte[]> getFileContent(String fileId)"
  desc: "Returns information about a specific file. Does not retrieve file content."
  returns:
    description: "represent a byte array on successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"byte?alt=byte&text=byte\" data-throw-if-not-resolved=\"False\" />[]&gt;"
- uid: "com.azure.ai.openai.assistants.AssistantsAsyncClient.getFileContentWithResponse(java.lang.String,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.ai.openai.assistants.AssistantsAsyncClient.getFileContentWithResponse(String fileId, RequestOptions requestOptions)"
  name: "getFileContentWithResponse(String fileId, RequestOptions requestOptions)"
  nameWithType: "AssistantsAsyncClient.getFileContentWithResponse(String fileId, RequestOptions requestOptions)"
  summary: "Returns information about a specific file."
  parameters:
  - description: "The ID of the file to retrieve."
    name: "fileId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<BinaryData>> getFileContentWithResponse(String fileId, RequestOptions requestOptions)"
  desc: "Returns information about a specific file. Does not retrieve file content.\n\n**Response Body Schema**\n\n```java\nbyte[]\n```"
  returns:
    description: "represent a byte array along with <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> on successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.ai.openai.assistants.AssistantsAsyncClient.getFileWithResponse(java.lang.String,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.ai.openai.assistants.AssistantsAsyncClient.getFileWithResponse(String fileId, RequestOptions requestOptions)"
  name: "getFileWithResponse(String fileId, RequestOptions requestOptions)"
  nameWithType: "AssistantsAsyncClient.getFileWithResponse(String fileId, RequestOptions requestOptions)"
  summary: "Returns information about a specific file."
  parameters:
  - description: "The ID of the file to retrieve."
    name: "fileId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<BinaryData>> getFileWithResponse(String fileId, RequestOptions requestOptions)"
  desc: "Returns information about a specific file. Does not retrieve file content.\n\n**Response Body Schema**\n\n```java\n{\n     object: String (Required)\n     id: String (Required)\n     bytes: int (Required)\n     filename: String (Required)\n     created_at: long (Required)\n     purpose: String(fine-tune/fine-tune-results/assistants/assistants_output) (Required)\n }\n```"
  returns:
    description: "represents an assistant that can call the model and use tools along with <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> on successful\n completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.ai.openai.assistants.AssistantsAsyncClient.getMessage(java.lang.String,java.lang.String)"
  fullName: "com.azure.ai.openai.assistants.AssistantsAsyncClient.getMessage(String threadId, String messageId)"
  name: "getMessage(String threadId, String messageId)"
  nameWithType: "AssistantsAsyncClient.getMessage(String threadId, String messageId)"
  summary: "Gets an existing message from an existing thread."
  parameters:
  - description: "The ID of the thread to retrieve the specified message from."
    name: "threadId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The ID of the message to retrieve from the specified thread."
    name: "messageId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public Mono<ThreadMessage> getMessage(String threadId, String messageId)"
  desc: "Gets an existing message from an existing thread."
  returns:
    description: "an existing message from an existing thread on successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.ai.openai.assistants.models.ThreadMessage?alt=com.azure.ai.openai.assistants.models.ThreadMessage&text=ThreadMessage\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.ai.openai.assistants.AssistantsAsyncClient.getMessageWithResponse(java.lang.String,java.lang.String,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.ai.openai.assistants.AssistantsAsyncClient.getMessageWithResponse(String threadId, String messageId, RequestOptions requestOptions)"
  name: "getMessageWithResponse(String threadId, String messageId, RequestOptions requestOptions)"
  nameWithType: "AssistantsAsyncClient.getMessageWithResponse(String threadId, String messageId, RequestOptions requestOptions)"
  summary: "Gets an existing message from an existing thread."
  parameters:
  - description: "The ID of the thread to retrieve the specified message from."
    name: "threadId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The ID of the message to retrieve from the specified thread."
    name: "messageId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<BinaryData>> getMessageWithResponse(String threadId, String messageId, RequestOptions requestOptions)"
  desc: "Gets an existing message from an existing thread.\n\n**Response Body Schema**\n\n```java\n{\n     id: String (Required)\n     object: String (Required)\n     created_at: long (Required)\n     thread_id: String (Required)\n     role: String(user/assistant) (Required)\n     content (Required): [\n          (Required){\n         }\n     ]\n     assistant_id: String (Optional)\n     run_id: String (Optional)\n     file_ids (Required): [\n         String (Required)\n     ]\n     metadata (Required): {\n         String: String (Required)\n     }\n }\n```"
  returns:
    description: "an existing message from an existing thread along with <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> on successful completion of\n <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.ai.openai.assistants.AssistantsAsyncClient.getRun(java.lang.String,java.lang.String)"
  fullName: "com.azure.ai.openai.assistants.AssistantsAsyncClient.getRun(String threadId, String runId)"
  name: "getRun(String threadId, String runId)"
  nameWithType: "AssistantsAsyncClient.getRun(String threadId, String runId)"
  summary: "Gets an existing run from an existing thread."
  parameters:
  - description: "The ID of the thread to retrieve run information from."
    name: "threadId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The ID of the thread to retrieve information about."
    name: "runId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public Mono<ThreadRun> getRun(String threadId, String runId)"
  desc: "Gets an existing run from an existing thread."
  returns:
    description: "an existing run from an existing thread on successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.ai.openai.assistants.models.ThreadRun?alt=com.azure.ai.openai.assistants.models.ThreadRun&text=ThreadRun\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.ai.openai.assistants.AssistantsAsyncClient.getRunStep(java.lang.String,java.lang.String,java.lang.String)"
  fullName: "com.azure.ai.openai.assistants.AssistantsAsyncClient.getRunStep(String threadId, String runId, String stepId)"
  name: "getRunStep(String threadId, String runId, String stepId)"
  nameWithType: "AssistantsAsyncClient.getRunStep(String threadId, String runId, String stepId)"
  summary: "Gets a single run step from a thread run."
  parameters:
  - description: "The ID of the thread that was run."
    name: "threadId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The ID of the specific run to retrieve the step from."
    name: "runId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The ID of the step to retrieve information about."
    name: "stepId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public Mono<RunStep> getRunStep(String threadId, String runId, String stepId)"
  desc: "Gets a single run step from a thread run."
  returns:
    description: "a single run step from a thread run on successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.ai.openai.assistants.models.RunStep?alt=com.azure.ai.openai.assistants.models.RunStep&text=RunStep\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.ai.openai.assistants.AssistantsAsyncClient.getRunStep(java.lang.String,java.lang.String,java.lang.String,java.util.List<com.azure.ai.openai.assistants.models.RunIncludes>)"
  fullName: "com.azure.ai.openai.assistants.AssistantsAsyncClient.getRunStep(String threadId, String runId, String stepId, List<RunIncludes> runInclude)"
  name: "getRunStep(String threadId, String runId, String stepId, List<RunIncludes> runInclude)"
  nameWithType: "AssistantsAsyncClient.getRunStep(String threadId, String runId, String stepId, List<RunIncludes> runInclude)"
  summary: "Gets a single run step from a thread run."
  parameters:
  - description: "The ID of the thread that was run."
    name: "threadId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The ID of the specific run to retrieve the step from."
    name: "runId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The ID of the step to retrieve information about."
    name: "stepId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "A list of additional fields to include in the response."
    name: "runInclude"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/List.html\">List</a>&lt;<xref href=\"com.azure.ai.openai.assistants.models.RunIncludes?alt=com.azure.ai.openai.assistants.models.RunIncludes&text=RunIncludes\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public Mono<RunStep> getRunStep(String threadId, String runId, String stepId, List<RunIncludes> runInclude)"
  desc: "Gets a single run step from a thread run."
  returns:
    description: "a single run step from a thread run on successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.ai.openai.assistants.models.RunStep?alt=com.azure.ai.openai.assistants.models.RunStep&text=RunStep\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.ai.openai.assistants.AssistantsAsyncClient.getRunStepWithResponse(java.lang.String,java.lang.String,java.lang.String,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.ai.openai.assistants.AssistantsAsyncClient.getRunStepWithResponse(String threadId, String runId, String stepId, RequestOptions requestOptions)"
  name: "getRunStepWithResponse(String threadId, String runId, String stepId, RequestOptions requestOptions)"
  nameWithType: "AssistantsAsyncClient.getRunStepWithResponse(String threadId, String runId, String stepId, RequestOptions requestOptions)"
  summary: "Gets a single run step from a thread run."
  parameters:
  - description: "The ID of the thread that was run."
    name: "threadId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The ID of the specific run to retrieve the step from."
    name: "runId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The ID of the step to retrieve information about."
    name: "stepId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<BinaryData>> getRunStepWithResponse(String threadId, String runId, String stepId, RequestOptions requestOptions)"
  desc: "Gets a single run step from a thread run.\n\n**Response Body Schema**\n\n```java\n{\n     id: String (Required)\n     object: String (Required)\n     type: String(message_creation/tool_calls) (Required)\n     assistant_id: String (Required)\n     thread_id: String (Required)\n     run_id: String (Required)\n     status: String(in_progress/cancelled/failed/completed/expired) (Required)\n     step_details (Required): {\n     }\n     last_error (Required): {\n         code: String(server_error/rate_limit_exceeded) (Required)\n         message: String (Required)\n     }\n     created_at: long (Required)\n     expired_at: OffsetDateTime (Required)\n     completed_at: OffsetDateTime (Required)\n     cancelled_at: OffsetDateTime (Required)\n     failed_at: OffsetDateTime (Required)\n     metadata (Required): {\n         String: String (Required)\n     }\n }\n```"
  returns:
    description: "a single run step from a thread run along with <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> on successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.ai.openai.assistants.AssistantsAsyncClient.getRunWithResponse(java.lang.String,java.lang.String,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.ai.openai.assistants.AssistantsAsyncClient.getRunWithResponse(String threadId, String runId, RequestOptions requestOptions)"
  name: "getRunWithResponse(String threadId, String runId, RequestOptions requestOptions)"
  nameWithType: "AssistantsAsyncClient.getRunWithResponse(String threadId, String runId, RequestOptions requestOptions)"
  summary: "Gets an existing run from an existing thread."
  parameters:
  - description: "The ID of the thread to retrieve run information from."
    name: "threadId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The ID of the thread to retrieve information about."
    name: "runId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<BinaryData>> getRunWithResponse(String threadId, String runId, RequestOptions requestOptions)"
  desc: "Gets an existing run from an existing thread.\n\n**Response Body Schema**\n\n```java\n{\n     id: String (Required)\n     object: String (Required)\n     thread_id: String (Required)\n     assistant_id: String (Required)\n     status: String(queued/in_progress/requires_action/cancelling/cancelled/failed/completed/expired) (Required)\n     required_action (Optional): {\n     }\n     last_error (Required): {\n         code: String (Required)\n         message: String (Required)\n     }\n     model: String (Required)\n     instructions: String (Required)\n     tools (Required): [\n          (Required){\n         }\n     ]\n     file_ids (Required): [\n         String (Required)\n     ]\n     created_at: long (Required)\n     expires_at: OffsetDateTime (Required)\n     started_at: OffsetDateTime (Required)\n     completed_at: OffsetDateTime (Required)\n     cancelled_at: OffsetDateTime (Required)\n     failed_at: OffsetDateTime (Required)\n     metadata (Required): {\n         String: String (Required)\n     }\n }\n```"
  returns:
    description: "an existing run from an existing thread along with <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> on successful completion of\n <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.ai.openai.assistants.AssistantsAsyncClient.getThread(java.lang.String)"
  fullName: "com.azure.ai.openai.assistants.AssistantsAsyncClient.getThread(String threadId)"
  name: "getThread(String threadId)"
  nameWithType: "AssistantsAsyncClient.getThread(String threadId)"
  summary: "Gets information about an existing thread."
  parameters:
  - description: "The ID of the thread to retrieve information about."
    name: "threadId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public Mono<AssistantThread> getThread(String threadId)"
  desc: "Gets information about an existing thread."
  returns:
    description: "information about an existing thread on successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.ai.openai.assistants.models.AssistantThread?alt=com.azure.ai.openai.assistants.models.AssistantThread&text=AssistantThread\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.ai.openai.assistants.AssistantsAsyncClient.getThreadWithResponse(java.lang.String,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.ai.openai.assistants.AssistantsAsyncClient.getThreadWithResponse(String threadId, RequestOptions requestOptions)"
  name: "getThreadWithResponse(String threadId, RequestOptions requestOptions)"
  nameWithType: "AssistantsAsyncClient.getThreadWithResponse(String threadId, RequestOptions requestOptions)"
  summary: "Gets information about an existing thread."
  parameters:
  - description: "The ID of the thread to retrieve information about."
    name: "threadId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<BinaryData>> getThreadWithResponse(String threadId, RequestOptions requestOptions)"
  desc: "Gets information about an existing thread.\n\n**Response Body Schema**\n\n```java\n{\n     id: String (Required)\n     object: String (Required)\n     created_at: long (Required)\n     metadata (Required): {\n         String: String (Required)\n     }\n }\n```"
  returns:
    description: "information about an existing thread along with <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> on successful completion of\n <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.ai.openai.assistants.AssistantsAsyncClient.getVectorStore(java.lang.String)"
  fullName: "com.azure.ai.openai.assistants.AssistantsAsyncClient.getVectorStore(String vectorStoreId)"
  name: "getVectorStore(String vectorStoreId)"
  nameWithType: "AssistantsAsyncClient.getVectorStore(String vectorStoreId)"
  summary: "Returns the vector store object matching the specified ID."
  parameters:
  - description: "The ID of the vector store to retrieve."
    name: "vectorStoreId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public Mono<VectorStore> getVectorStore(String vectorStoreId)"
  desc: "Returns the vector store object matching the specified ID."
  returns:
    description: "a vector store is a collection of processed files can be used by the `file_search` tool on successful\n completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.ai.openai.assistants.models.VectorStore?alt=com.azure.ai.openai.assistants.models.VectorStore&text=VectorStore\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.ai.openai.assistants.AssistantsAsyncClient.getVectorStoreFile(java.lang.String,java.lang.String)"
  fullName: "com.azure.ai.openai.assistants.AssistantsAsyncClient.getVectorStoreFile(String vectorStoreId, String fileId)"
  name: "getVectorStoreFile(String vectorStoreId, String fileId)"
  nameWithType: "AssistantsAsyncClient.getVectorStoreFile(String vectorStoreId, String fileId)"
  summary: "Retrieves a vector store file."
  parameters:
  - description: "The ID of the vector store that the file belongs to."
    name: "vectorStoreId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The ID of the file being retrieved."
    name: "fileId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public Mono<VectorStoreFile> getVectorStoreFile(String vectorStoreId, String fileId)"
  desc: "Retrieves a vector store file."
  returns:
    description: "description of a file attached to a vector store on successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.ai.openai.assistants.models.VectorStoreFile?alt=com.azure.ai.openai.assistants.models.VectorStoreFile&text=VectorStoreFile\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.ai.openai.assistants.AssistantsAsyncClient.getVectorStoreFileBatch(java.lang.String,java.lang.String)"
  fullName: "com.azure.ai.openai.assistants.AssistantsAsyncClient.getVectorStoreFileBatch(String vectorStoreId, String batchId)"
  name: "getVectorStoreFileBatch(String vectorStoreId, String batchId)"
  nameWithType: "AssistantsAsyncClient.getVectorStoreFileBatch(String vectorStoreId, String batchId)"
  summary: "Retrieve a vector store file batch."
  parameters:
  - description: "The ID of the vector store that the file batch belongs to."
    name: "vectorStoreId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The ID of the file batch being retrieved."
    name: "batchId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public Mono<VectorStoreFileBatch> getVectorStoreFileBatch(String vectorStoreId, String batchId)"
  desc: "Retrieve a vector store file batch."
  returns:
    description: "a batch of files attached to a vector store on successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.ai.openai.assistants.models.VectorStoreFileBatch?alt=com.azure.ai.openai.assistants.models.VectorStoreFileBatch&text=VectorStoreFileBatch\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.ai.openai.assistants.AssistantsAsyncClient.getVectorStoreFileBatchWithResponse(java.lang.String,java.lang.String,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.ai.openai.assistants.AssistantsAsyncClient.getVectorStoreFileBatchWithResponse(String vectorStoreId, String batchId, RequestOptions requestOptions)"
  name: "getVectorStoreFileBatchWithResponse(String vectorStoreId, String batchId, RequestOptions requestOptions)"
  nameWithType: "AssistantsAsyncClient.getVectorStoreFileBatchWithResponse(String vectorStoreId, String batchId, RequestOptions requestOptions)"
  summary: "Retrieve a vector store file batch."
  parameters:
  - description: "The ID of the vector store that the file batch belongs to."
    name: "vectorStoreId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The ID of the file batch being retrieved."
    name: "batchId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<BinaryData>> getVectorStoreFileBatchWithResponse(String vectorStoreId, String batchId, RequestOptions requestOptions)"
  desc: "Retrieve a vector store file batch.\n\n**Response Body Schema**\n\n```java\n{\n     id: String (Required)\n     object: String (Required)\n     created_at: long (Required)\n     vector_store_id: String (Required)\n     status: String(in_progress/completed/cancelled/failed) (Required)\n     file_counts (Required): {\n         in_progress: int (Required)\n         completed: int (Required)\n         failed: int (Required)\n         cancelled: int (Required)\n         total: int (Required)\n     }\n }\n```"
  returns:
    description: "a batch of files attached to a vector store along with <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> on successful completion of\n <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.ai.openai.assistants.AssistantsAsyncClient.getVectorStoreFileWithResponse(java.lang.String,java.lang.String,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.ai.openai.assistants.AssistantsAsyncClient.getVectorStoreFileWithResponse(String vectorStoreId, String fileId, RequestOptions requestOptions)"
  name: "getVectorStoreFileWithResponse(String vectorStoreId, String fileId, RequestOptions requestOptions)"
  nameWithType: "AssistantsAsyncClient.getVectorStoreFileWithResponse(String vectorStoreId, String fileId, RequestOptions requestOptions)"
  summary: "Retrieves a vector store file."
  parameters:
  - description: "The ID of the vector store that the file belongs to."
    name: "vectorStoreId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The ID of the file being retrieved."
    name: "fileId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<BinaryData>> getVectorStoreFileWithResponse(String vectorStoreId, String fileId, RequestOptions requestOptions)"
  desc: "Retrieves a vector store file.\n\n**Response Body Schema**\n\n```java\n{\n     id: String (Required)\n     object: String (Required)\n     usage_bytes: int (Required)\n     created_at: long (Required)\n     vector_store_id: String (Required)\n     status: String(in_progress/completed/failed/cancelled) (Required)\n     last_error (Required): {\n         code: String(internal_error/file_not_found/parsing_error/unhandled_mime_type) (Required)\n         message: String (Required)\n     }\n }\n```"
  returns:
    description: "description of a file attached to a vector store along with <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> on successful completion of\n <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.ai.openai.assistants.AssistantsAsyncClient.getVectorStoreWithResponse(java.lang.String,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.ai.openai.assistants.AssistantsAsyncClient.getVectorStoreWithResponse(String vectorStoreId, RequestOptions requestOptions)"
  name: "getVectorStoreWithResponse(String vectorStoreId, RequestOptions requestOptions)"
  nameWithType: "AssistantsAsyncClient.getVectorStoreWithResponse(String vectorStoreId, RequestOptions requestOptions)"
  summary: "Returns the vector store object matching the specified ID."
  parameters:
  - description: "The ID of the vector store to retrieve."
    name: "vectorStoreId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<BinaryData>> getVectorStoreWithResponse(String vectorStoreId, RequestOptions requestOptions)"
  desc: "Returns the vector store object matching the specified ID.\n\n**Response Body Schema**\n\n```java\n{\n     id: String (Required)\n     object: String (Required)\n     created_at: long (Required)\n     name: String (Required)\n     usage_bytes: int (Required)\n     file_counts (Required): {\n         in_progress: int (Required)\n         completed: int (Required)\n         failed: int (Required)\n         cancelled: int (Required)\n         total: int (Required)\n     }\n     status: String(expired/in_progress/completed) (Required)\n     expires_after (Optional): {\n         anchor: String(last_active_at) (Required)\n         days: int (Required)\n     }\n     expires_at: Long (Optional)\n     last_active_at: Long (Required)\n     metadata (Required): {\n         String: String (Required)\n     }\n }\n```"
  returns:
    description: "a vector store is a collection of processed files can be used by the `file_search` tool along with\n <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> on successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.ai.openai.assistants.AssistantsAsyncClient.listAssistants()"
  fullName: "com.azure.ai.openai.assistants.AssistantsAsyncClient.listAssistants()"
  name: "listAssistants()"
  nameWithType: "AssistantsAsyncClient.listAssistants()"
  summary: "Gets a list of assistants that were previously created."
  syntax: "public Mono<PageableList<Assistant>> listAssistants()"
  desc: "Gets a list of assistants that were previously created."
  returns:
    description: "a list of assistants that were previously created on successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.ai.openai.assistants.models.PageableList?alt=com.azure.ai.openai.assistants.models.PageableList&text=PageableList\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.ai.openai.assistants.models.Assistant?alt=com.azure.ai.openai.assistants.models.Assistant&text=Assistant\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.ai.openai.assistants.AssistantsAsyncClient.listAssistants(java.lang.Integer,com.azure.ai.openai.assistants.models.ListSortOrder,java.lang.String,java.lang.String)"
  fullName: "com.azure.ai.openai.assistants.AssistantsAsyncClient.listAssistants(Integer limit, ListSortOrder order, String after, String before)"
  name: "listAssistants(Integer limit, ListSortOrder order, String after, String before)"
  nameWithType: "AssistantsAsyncClient.listAssistants(Integer limit, ListSortOrder order, String after, String before)"
  summary: "Gets a list of assistants that were previously created."
  parameters:
  - description: "A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default\n is 20."
    name: "limit"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Integer.html\">Integer</a>"
  - description: "Sort order by the created_at timestamp of the objects. asc for ascending order and desc for\n descending order."
    name: "order"
    type: "<xref href=\"com.azure.ai.openai.assistants.models.ListSortOrder?alt=com.azure.ai.openai.assistants.models.ListSortOrder&text=ListSortOrder\" data-throw-if-not-resolved=\"False\" />"
  - description: "A cursor for use in pagination. after is an object ID that defines your place in the list. For\n instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can\n include after=obj_foo in order to fetch the next page of the list."
    name: "after"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "A cursor for use in pagination. before is an object ID that defines your place in the list. For\n instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can\n include before=obj_foo in order to fetch the previous page of the list."
    name: "before"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public Mono<PageableList<Assistant>> listAssistants(Integer limit, ListSortOrder order, String after, String before)"
  desc: "Gets a list of assistants that were previously created."
  returns:
    description: "a list of assistants that were previously created on successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.ai.openai.assistants.models.PageableList?alt=com.azure.ai.openai.assistants.models.PageableList&text=PageableList\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.ai.openai.assistants.models.Assistant?alt=com.azure.ai.openai.assistants.models.Assistant&text=Assistant\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.ai.openai.assistants.AssistantsAsyncClient.listAssistantsWithResponse(com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.ai.openai.assistants.AssistantsAsyncClient.listAssistantsWithResponse(RequestOptions requestOptions)"
  name: "listAssistantsWithResponse(RequestOptions requestOptions)"
  nameWithType: "AssistantsAsyncClient.listAssistantsWithResponse(RequestOptions requestOptions)"
  summary: "Gets a list of assistants that were previously created."
  parameters:
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<BinaryData>> listAssistantsWithResponse(RequestOptions requestOptions)"
  desc: "Gets a list of assistants that were previously created.\n\n**Query Parameters**\n\n    | ------ | ------- | -------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n    | Name   | Type    | Required | Description                                                                                                                                                                                                                                                                           |\n    | limit  | Integer | No       | A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.                                                                                                                                                                            |\n    | order  | String  | No       | Sort order by the created\\_at timestamp of the objects. asc for ascending order and desc for descending order. Allowed values: \"asc\", \"desc\".                                                                                                                                         |\n    | after  | String  | No       | A cursor for use in pagination. after is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj\\_foo, your subsequent call can include after=obj\\_foo in order to fetch the next page of the list.       |\n    | before | String  | No       | A cursor for use in pagination. before is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj\\_foo, your subsequent call can include before=obj\\_foo in order to fetch the previous page of the list. |\n\nYou can add these to a request with <xref uid=\"com.azure.core.http.rest.RequestOptions.addQueryParam\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RequestOptions#addQueryParam\"></xref>\n\n**Response Body Schema**\n\n```java\n{\n     object: String (Required)\n     data (Required): [\n          (Required){\n             id: String (Required)\n             object: String (Required)\n             created_at: long (Required)\n             name: String (Required)\n             description: String (Required)\n             model: String (Required)\n             instructions: String (Required)\n             tools (Required): [\n                  (Required){\n                 }\n             ]\n             file_ids (Required): [\n                 String (Required)\n             ]\n             metadata (Required): {\n                 String: String (Required)\n             }\n         }\n     ]\n     first_id: String (Required)\n     last_id: String (Required)\n     has_more: boolean (Required)\n }\n```"
  returns:
    description: "a list of assistants that were previously created along with <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> on successful completion of\n <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.ai.openai.assistants.AssistantsAsyncClient.listFiles()"
  fullName: "com.azure.ai.openai.assistants.AssistantsAsyncClient.listFiles()"
  name: "listFiles()"
  nameWithType: "AssistantsAsyncClient.listFiles()"
  summary: "Gets a list of previously uploaded files."
  syntax: "public Mono<List<OpenAIFile>> listFiles()"
  desc: "Gets a list of previously uploaded files."
  returns:
    description: "a list of previously uploaded files on successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/List.html\">List</a>&lt;<xref href=\"com.azure.ai.openai.assistants.models.OpenAIFile?alt=com.azure.ai.openai.assistants.models.OpenAIFile&text=OpenAIFile\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.ai.openai.assistants.AssistantsAsyncClient.listFiles(com.azure.ai.openai.assistants.models.FilePurpose)"
  fullName: "com.azure.ai.openai.assistants.AssistantsAsyncClient.listFiles(FilePurpose purpose)"
  name: "listFiles(FilePurpose purpose)"
  nameWithType: "AssistantsAsyncClient.listFiles(FilePurpose purpose)"
  summary: "Gets a list of previously uploaded files."
  parameters:
  - description: "A value that, when provided, limits list results to files matching the corresponding purpose."
    name: "purpose"
    type: "<xref href=\"com.azure.ai.openai.assistants.models.FilePurpose?alt=com.azure.ai.openai.assistants.models.FilePurpose&text=FilePurpose\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<List<OpenAIFile>> listFiles(FilePurpose purpose)"
  desc: "Gets a list of previously uploaded files."
  returns:
    description: "a list of previously uploaded files on successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/List.html\">List</a>&lt;<xref href=\"com.azure.ai.openai.assistants.models.OpenAIFile?alt=com.azure.ai.openai.assistants.models.OpenAIFile&text=OpenAIFile\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.ai.openai.assistants.AssistantsAsyncClient.listFilesWithResponse(com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.ai.openai.assistants.AssistantsAsyncClient.listFilesWithResponse(RequestOptions requestOptions)"
  name: "listFilesWithResponse(RequestOptions requestOptions)"
  nameWithType: "AssistantsAsyncClient.listFilesWithResponse(RequestOptions requestOptions)"
  summary: "Gets a list of previously uploaded files."
  parameters:
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<BinaryData>> listFilesWithResponse(RequestOptions requestOptions)"
  desc: "Gets a list of previously uploaded files.\n\n**Query Parameters**\n\n    | ------- | ------ | -------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n    | Name    | Type   | Required | Description                                                                                                                                                                         |\n    | purpose | String | No       | A value that, when provided, limits list results to files matching the corresponding purpose. Allowed values: \"fine-tune\", \"fine-tune-results\", \"assistants\", \"assistants\\_output\". |\n\nYou can add these to a request with <xref uid=\"com.azure.core.http.rest.RequestOptions.addQueryParam\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RequestOptions#addQueryParam\"></xref>\n\n**Response Body Schema**\n\n```java\n{\n     object: String (Required)\n     data (Required): [\n          (Required){\n             object: String (Required)\n             id: String (Required)\n             bytes: int (Required)\n             filename: String (Required)\n             created_at: long (Required)\n             purpose: String(fine-tune/fine-tune-results/assistants/assistants_output) (Required)\n         }\n     ]\n }\n```"
  returns:
    description: "a list of previously uploaded files along with <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> on successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.ai.openai.assistants.AssistantsAsyncClient.listMessages(java.lang.String)"
  fullName: "com.azure.ai.openai.assistants.AssistantsAsyncClient.listMessages(String threadId)"
  name: "listMessages(String threadId)"
  nameWithType: "AssistantsAsyncClient.listMessages(String threadId)"
  summary: "Gets a list of messages that exist on a thread."
  parameters:
  - description: "The ID of the thread to list messages from."
    name: "threadId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public Mono<PageableList<ThreadMessage>> listMessages(String threadId)"
  desc: "Gets a list of messages that exist on a thread."
  returns:
    description: "a list of messages that exist on a thread on successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.ai.openai.assistants.models.PageableList?alt=com.azure.ai.openai.assistants.models.PageableList&text=PageableList\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.ai.openai.assistants.models.ThreadMessage?alt=com.azure.ai.openai.assistants.models.ThreadMessage&text=ThreadMessage\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.ai.openai.assistants.AssistantsAsyncClient.listMessages(java.lang.String,java.lang.Integer,com.azure.ai.openai.assistants.models.ListSortOrder,java.lang.String,java.lang.String)"
  fullName: "com.azure.ai.openai.assistants.AssistantsAsyncClient.listMessages(String threadId, Integer limit, ListSortOrder order, String after, String before)"
  name: "listMessages(String threadId, Integer limit, ListSortOrder order, String after, String before)"
  nameWithType: "AssistantsAsyncClient.listMessages(String threadId, Integer limit, ListSortOrder order, String after, String before)"
  summary: "Gets a list of messages that exist on a thread."
  parameters:
  - description: "The ID of the thread to list messages from."
    name: "threadId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default\n is 20."
    name: "limit"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Integer.html\">Integer</a>"
  - description: "Sort order by the created_at timestamp of the objects. asc for ascending order and desc for\n descending order."
    name: "order"
    type: "<xref href=\"com.azure.ai.openai.assistants.models.ListSortOrder?alt=com.azure.ai.openai.assistants.models.ListSortOrder&text=ListSortOrder\" data-throw-if-not-resolved=\"False\" />"
  - description: "A cursor for use in pagination. after is an object ID that defines your place in the list. For\n instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can\n include after=obj_foo in order to fetch the next page of the list."
    name: "after"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "A cursor for use in pagination. before is an object ID that defines your place in the list. For\n instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can\n include before=obj_foo in order to fetch the previous page of the list."
    name: "before"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public Mono<PageableList<ThreadMessage>> listMessages(String threadId, Integer limit, ListSortOrder order, String after, String before)"
  desc: "Gets a list of messages that exist on a thread."
  returns:
    description: "a list of messages that exist on a thread on successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.ai.openai.assistants.models.PageableList?alt=com.azure.ai.openai.assistants.models.PageableList&text=PageableList\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.ai.openai.assistants.models.ThreadMessage?alt=com.azure.ai.openai.assistants.models.ThreadMessage&text=ThreadMessage\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.ai.openai.assistants.AssistantsAsyncClient.listMessagesWithResponse(java.lang.String,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.ai.openai.assistants.AssistantsAsyncClient.listMessagesWithResponse(String threadId, RequestOptions requestOptions)"
  name: "listMessagesWithResponse(String threadId, RequestOptions requestOptions)"
  nameWithType: "AssistantsAsyncClient.listMessagesWithResponse(String threadId, RequestOptions requestOptions)"
  summary: "Gets a list of messages that exist on a thread."
  parameters:
  - description: "The ID of the thread to list messages from."
    name: "threadId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<BinaryData>> listMessagesWithResponse(String threadId, RequestOptions requestOptions)"
  desc: "Gets a list of messages that exist on a thread.\n\n**Query Parameters**\n\n    | ------ | ------- | -------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n    | Name   | Type    | Required | Description                                                                                                                                                                                                                                                                           |\n    | limit  | Integer | No       | A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.                                                                                                                                                                            |\n    | order  | String  | No       | Sort order by the created\\_at timestamp of the objects. asc for ascending order and desc for descending order. Allowed values: \"asc\", \"desc\".                                                                                                                                         |\n    | after  | String  | No       | A cursor for use in pagination. after is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj\\_foo, your subsequent call can include after=obj\\_foo in order to fetch the next page of the list.       |\n    | before | String  | No       | A cursor for use in pagination. before is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj\\_foo, your subsequent call can include before=obj\\_foo in order to fetch the previous page of the list. |\n\nYou can add these to a request with <xref uid=\"com.azure.core.http.rest.RequestOptions.addQueryParam\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RequestOptions#addQueryParam\"></xref>\n\n**Response Body Schema**\n\n```java\n{\n     object: String (Required)\n     data (Required): [\n          (Required){\n             id: String (Required)\n             object: String (Required)\n             created_at: long (Required)\n             thread_id: String (Required)\n             role: String(user/assistant) (Required)\n             content (Required): [\n                  (Required){\n                 }\n             ]\n             assistant_id: String (Optional)\n             run_id: String (Optional)\n             file_ids (Required): [\n                 String (Required)\n             ]\n             metadata (Required): {\n                 String: String (Required)\n             }\n         }\n     ]\n     first_id: String (Required)\n     last_id: String (Required)\n     has_more: boolean (Required)\n }\n```"
  returns:
    description: "a list of messages that exist on a thread along with <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> on successful completion of\n <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.ai.openai.assistants.AssistantsAsyncClient.listRuns(java.lang.String)"
  fullName: "com.azure.ai.openai.assistants.AssistantsAsyncClient.listRuns(String threadId)"
  name: "listRuns(String threadId)"
  nameWithType: "AssistantsAsyncClient.listRuns(String threadId)"
  summary: "Gets a list of runs for a specified thread."
  parameters:
  - description: "The ID of the thread to list runs from."
    name: "threadId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public Mono<PageableList<ThreadRun>> listRuns(String threadId)"
  desc: "Gets a list of runs for a specified thread."
  returns:
    description: "a list of runs for a specified thread on successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.ai.openai.assistants.models.PageableList?alt=com.azure.ai.openai.assistants.models.PageableList&text=PageableList\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.ai.openai.assistants.models.ThreadRun?alt=com.azure.ai.openai.assistants.models.ThreadRun&text=ThreadRun\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.ai.openai.assistants.AssistantsAsyncClient.listRuns(java.lang.String,java.lang.Integer,com.azure.ai.openai.assistants.models.ListSortOrder,java.lang.String,java.lang.String)"
  fullName: "com.azure.ai.openai.assistants.AssistantsAsyncClient.listRuns(String threadId, Integer limit, ListSortOrder order, String after, String before)"
  name: "listRuns(String threadId, Integer limit, ListSortOrder order, String after, String before)"
  nameWithType: "AssistantsAsyncClient.listRuns(String threadId, Integer limit, ListSortOrder order, String after, String before)"
  summary: "Gets a list of runs for a specified thread."
  parameters:
  - description: "The ID of the thread to list runs from."
    name: "threadId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default\n is 20."
    name: "limit"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Integer.html\">Integer</a>"
  - description: "Sort order by the created_at timestamp of the objects. asc for ascending order and desc for\n descending order."
    name: "order"
    type: "<xref href=\"com.azure.ai.openai.assistants.models.ListSortOrder?alt=com.azure.ai.openai.assistants.models.ListSortOrder&text=ListSortOrder\" data-throw-if-not-resolved=\"False\" />"
  - description: "A cursor for use in pagination. after is an object ID that defines your place in the list. For\n instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can\n include after=obj_foo in order to fetch the next page of the list."
    name: "after"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "A cursor for use in pagination. before is an object ID that defines your place in the list. For\n instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can\n include before=obj_foo in order to fetch the previous page of the list."
    name: "before"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public Mono<PageableList<ThreadRun>> listRuns(String threadId, Integer limit, ListSortOrder order, String after, String before)"
  desc: "Gets a list of runs for a specified thread."
  returns:
    description: "a list of runs for a specified thread on successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.ai.openai.assistants.models.PageableList?alt=com.azure.ai.openai.assistants.models.PageableList&text=PageableList\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.ai.openai.assistants.models.ThreadRun?alt=com.azure.ai.openai.assistants.models.ThreadRun&text=ThreadRun\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.ai.openai.assistants.AssistantsAsyncClient.listRunSteps(java.lang.String,java.lang.String)"
  fullName: "com.azure.ai.openai.assistants.AssistantsAsyncClient.listRunSteps(String threadId, String runId)"
  name: "listRunSteps(String threadId, String runId)"
  nameWithType: "AssistantsAsyncClient.listRunSteps(String threadId, String runId)"
  summary: "Gets a list of run steps from a thread run."
  parameters:
  - description: "The ID of the thread that was run."
    name: "threadId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The ID of the run to list steps from."
    name: "runId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public Mono<PageableList<RunStep>> listRunSteps(String threadId, String runId)"
  desc: "Gets a list of run steps from a thread run."
  returns:
    description: "a list of run steps from a thread run on successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.ai.openai.assistants.models.PageableList?alt=com.azure.ai.openai.assistants.models.PageableList&text=PageableList\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.ai.openai.assistants.models.RunStep?alt=com.azure.ai.openai.assistants.models.RunStep&text=RunStep\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.ai.openai.assistants.AssistantsAsyncClient.listRunSteps(java.lang.String,java.lang.String,java.lang.Integer,com.azure.ai.openai.assistants.models.ListSortOrder,java.lang.String,java.lang.String)"
  fullName: "com.azure.ai.openai.assistants.AssistantsAsyncClient.listRunSteps(String threadId, String runId, Integer limit, ListSortOrder order, String after, String before)"
  name: "listRunSteps(String threadId, String runId, Integer limit, ListSortOrder order, String after, String before)"
  nameWithType: "AssistantsAsyncClient.listRunSteps(String threadId, String runId, Integer limit, ListSortOrder order, String after, String before)"
  summary: "Gets a list of run steps from a thread run."
  parameters:
  - description: "The ID of the thread that was run."
    name: "threadId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The ID of the run to list steps from."
    name: "runId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default\n is 20."
    name: "limit"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Integer.html\">Integer</a>"
  - description: "Sort order by the created_at timestamp of the objects. asc for ascending order and desc for\n descending order."
    name: "order"
    type: "<xref href=\"com.azure.ai.openai.assistants.models.ListSortOrder?alt=com.azure.ai.openai.assistants.models.ListSortOrder&text=ListSortOrder\" data-throw-if-not-resolved=\"False\" />"
  - description: "A cursor for use in pagination. after is an object ID that defines your place in the list. For\n instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can\n include after=obj_foo in order to fetch the next page of the list."
    name: "after"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "A cursor for use in pagination. before is an object ID that defines your place in the list. For\n instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can\n include before=obj_foo in order to fetch the previous page of the list."
    name: "before"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public Mono<PageableList<RunStep>> listRunSteps(String threadId, String runId, Integer limit, ListSortOrder order, String after, String before)"
  desc: "Gets a list of run steps from a thread run."
  returns:
    description: "a list of run steps from a thread run on successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.ai.openai.assistants.models.PageableList?alt=com.azure.ai.openai.assistants.models.PageableList&text=PageableList\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.ai.openai.assistants.models.RunStep?alt=com.azure.ai.openai.assistants.models.RunStep&text=RunStep\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.ai.openai.assistants.AssistantsAsyncClient.listRunSteps(java.lang.String,java.lang.String,java.util.List<com.azure.ai.openai.assistants.models.RunIncludes>)"
  fullName: "com.azure.ai.openai.assistants.AssistantsAsyncClient.listRunSteps(String threadId, String runId, List<RunIncludes> runInclude)"
  name: "listRunSteps(String threadId, String runId, List<RunIncludes> runInclude)"
  nameWithType: "AssistantsAsyncClient.listRunSteps(String threadId, String runId, List<RunIncludes> runInclude)"
  summary: "Gets a list of run steps from a thread run with additional included fields."
  parameters:
  - description: "The ID of the thread that was run."
    name: "threadId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The ID of the run to list steps from."
    name: "runId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "A list of additional fields to include in the response."
    name: "runInclude"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/List.html\">List</a>&lt;<xref href=\"com.azure.ai.openai.assistants.models.RunIncludes?alt=com.azure.ai.openai.assistants.models.RunIncludes&text=RunIncludes\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public Mono<PageableList<RunStep>> listRunSteps(String threadId, String runId, List<RunIncludes> runInclude)"
  desc: "Gets a list of run steps from a thread run with additional included fields."
  returns:
    description: "a list of run steps from a thread run on successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.ai.openai.assistants.models.PageableList?alt=com.azure.ai.openai.assistants.models.PageableList&text=PageableList\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.ai.openai.assistants.models.RunStep?alt=com.azure.ai.openai.assistants.models.RunStep&text=RunStep\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.ai.openai.assistants.AssistantsAsyncClient.listRunStepsWithResponse(java.lang.String,java.lang.String,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.ai.openai.assistants.AssistantsAsyncClient.listRunStepsWithResponse(String threadId, String runId, RequestOptions requestOptions)"
  name: "listRunStepsWithResponse(String threadId, String runId, RequestOptions requestOptions)"
  nameWithType: "AssistantsAsyncClient.listRunStepsWithResponse(String threadId, String runId, RequestOptions requestOptions)"
  summary: "Gets a list of run steps from a thread run."
  parameters:
  - description: "The ID of the thread that was run."
    name: "threadId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The ID of the run to list steps from."
    name: "runId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<BinaryData>> listRunStepsWithResponse(String threadId, String runId, RequestOptions requestOptions)"
  desc: "Gets a list of run steps from a thread run.\n\n**Query Parameters**\n\n    | ------ | ------- | -------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n    | Name   | Type    | Required | Description                                                                                                                                                                                                                                                                           |\n    | limit  | Integer | No       | A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.                                                                                                                                                                            |\n    | order  | String  | No       | Sort order by the created\\_at timestamp of the objects. asc for ascending order and desc for descending order. Allowed values: \"asc\", \"desc\".                                                                                                                                         |\n    | after  | String  | No       | A cursor for use in pagination. after is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj\\_foo, your subsequent call can include after=obj\\_foo in order to fetch the next page of the list.       |\n    | before | String  | No       | A cursor for use in pagination. before is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj\\_foo, your subsequent call can include before=obj\\_foo in order to fetch the previous page of the list. |\n\nYou can add these to a request with <xref uid=\"com.azure.core.http.rest.RequestOptions.addQueryParam\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RequestOptions#addQueryParam\"></xref>\n\n**Response Body Schema**\n\n```java\n{\n     object: String (Required)\n     data (Required): [\n          (Required){\n             id: String (Required)\n             object: String (Required)\n             type: String(message_creation/tool_calls) (Required)\n             assistant_id: String (Required)\n             thread_id: String (Required)\n             run_id: String (Required)\n             status: String(in_progress/cancelled/failed/completed/expired) (Required)\n             step_details (Required): {\n             }\n             last_error (Required): {\n                 code: String(server_error/rate_limit_exceeded) (Required)\n                 message: String (Required)\n             }\n             created_at: long (Required)\n             expired_at: OffsetDateTime (Required)\n             completed_at: OffsetDateTime (Required)\n             cancelled_at: OffsetDateTime (Required)\n             failed_at: OffsetDateTime (Required)\n             metadata (Required): {\n                 String: String (Required)\n             }\n         }\n     ]\n     first_id: String (Required)\n     last_id: String (Required)\n     has_more: boolean (Required)\n }\n```"
  returns:
    description: "a list of run steps from a thread run along with <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> on successful completion of\n <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.ai.openai.assistants.AssistantsAsyncClient.listRunsWithResponse(java.lang.String,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.ai.openai.assistants.AssistantsAsyncClient.listRunsWithResponse(String threadId, RequestOptions requestOptions)"
  name: "listRunsWithResponse(String threadId, RequestOptions requestOptions)"
  nameWithType: "AssistantsAsyncClient.listRunsWithResponse(String threadId, RequestOptions requestOptions)"
  summary: "Gets a list of runs for a specified thread."
  parameters:
  - description: "The ID of the thread to list runs from."
    name: "threadId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<BinaryData>> listRunsWithResponse(String threadId, RequestOptions requestOptions)"
  desc: "Gets a list of runs for a specified thread.\n\n**Query Parameters**\n\n    | ------ | ------- | -------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n    | Name   | Type    | Required | Description                                                                                                                                                                                                                                                                           |\n    | limit  | Integer | No       | A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.                                                                                                                                                                            |\n    | order  | String  | No       | Sort order by the created\\_at timestamp of the objects. asc for ascending order and desc for descending order. Allowed values: \"asc\", \"desc\".                                                                                                                                         |\n    | after  | String  | No       | A cursor for use in pagination. after is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj\\_foo, your subsequent call can include after=obj\\_foo in order to fetch the next page of the list.       |\n    | before | String  | No       | A cursor for use in pagination. before is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj\\_foo, your subsequent call can include before=obj\\_foo in order to fetch the previous page of the list. |\n\nYou can add these to a request with <xref uid=\"com.azure.core.http.rest.RequestOptions.addQueryParam\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RequestOptions#addQueryParam\"></xref>\n\n**Response Body Schema**\n\n```java\n{\n     object: String (Required)\n     data (Required): [\n          (Required){\n             id: String (Required)\n             object: String (Required)\n             thread_id: String (Required)\n             assistant_id: String (Required)\n             status: String(queued/in_progress/requires_action/cancelling/cancelled/failed/completed/expired) (Required)\n             required_action (Optional): {\n             }\n             last_error (Required): {\n                 code: String (Required)\n                 message: String (Required)\n             }\n             model: String (Required)\n             instructions: String (Required)\n             tools (Required): [\n                  (Required){\n                 }\n             ]\n             file_ids (Required): [\n                 String (Required)\n             ]\n             created_at: long (Required)\n             expires_at: OffsetDateTime (Required)\n             started_at: OffsetDateTime (Required)\n             completed_at: OffsetDateTime (Required)\n             cancelled_at: OffsetDateTime (Required)\n             failed_at: OffsetDateTime (Required)\n             metadata (Required): {\n                 String: String (Required)\n             }\n         }\n     ]\n     first_id: String (Required)\n     last_id: String (Required)\n     has_more: boolean (Required)\n }\n```"
  returns:
    description: "a list of runs for a specified thread along with <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> on successful completion of\n <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.ai.openai.assistants.AssistantsAsyncClient.listVectorStoreFileBatchFiles(java.lang.String,java.lang.String)"
  fullName: "com.azure.ai.openai.assistants.AssistantsAsyncClient.listVectorStoreFileBatchFiles(String vectorStoreId, String batchId)"
  name: "listVectorStoreFileBatchFiles(String vectorStoreId, String batchId)"
  nameWithType: "AssistantsAsyncClient.listVectorStoreFileBatchFiles(String vectorStoreId, String batchId)"
  summary: "Returns a list of vector store files in a batch."
  parameters:
  - description: "The ID of the vector store that the file batch belongs to."
    name: "vectorStoreId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The ID of the file batch that the files belong to."
    name: "batchId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public Mono<PageableList<VectorStoreFile>> listVectorStoreFileBatchFiles(String vectorStoreId, String batchId)"
  desc: "Returns a list of vector store files in a batch."
  returns:
    description: "the response data for a requested list of items on successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.ai.openai.assistants.models.PageableList?alt=com.azure.ai.openai.assistants.models.PageableList&text=PageableList\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.ai.openai.assistants.models.VectorStoreFile?alt=com.azure.ai.openai.assistants.models.VectorStoreFile&text=VectorStoreFile\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.ai.openai.assistants.AssistantsAsyncClient.listVectorStoreFileBatchFiles(java.lang.String,java.lang.String,com.azure.ai.openai.assistants.models.VectorStoreFileStatusFilter,java.lang.Integer,com.azure.ai.openai.assistants.models.ListSortOrder,java.lang.String,java.lang.String)"
  fullName: "com.azure.ai.openai.assistants.AssistantsAsyncClient.listVectorStoreFileBatchFiles(String vectorStoreId, String batchId, VectorStoreFileStatusFilter filter, Integer limit, ListSortOrder order, String after, String before)"
  name: "listVectorStoreFileBatchFiles(String vectorStoreId, String batchId, VectorStoreFileStatusFilter filter, Integer limit, ListSortOrder order, String after, String before)"
  nameWithType: "AssistantsAsyncClient.listVectorStoreFileBatchFiles(String vectorStoreId, String batchId, VectorStoreFileStatusFilter filter, Integer limit, ListSortOrder order, String after, String before)"
  summary: "Returns a list of vector store files in a batch."
  parameters:
  - description: "The ID of the vector store that the file batch belongs to."
    name: "vectorStoreId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The ID of the file batch that the files belong to."
    name: "batchId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "Filter by file status. One of `in_progress`, `completed`, `failed`, `cancelled`."
    name: "filter"
    type: "<xref href=\"com.azure.ai.openai.assistants.models.VectorStoreFileStatusFilter?alt=com.azure.ai.openai.assistants.models.VectorStoreFileStatusFilter&text=VectorStoreFileStatusFilter\" data-throw-if-not-resolved=\"False\" />"
  - description: "A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default\n is 20."
    name: "limit"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Integer.html\">Integer</a>"
  - description: "Sort order by the created_at timestamp of the objects. asc for ascending order and desc for\n descending order."
    name: "order"
    type: "<xref href=\"com.azure.ai.openai.assistants.models.ListSortOrder?alt=com.azure.ai.openai.assistants.models.ListSortOrder&text=ListSortOrder\" data-throw-if-not-resolved=\"False\" />"
  - description: "A cursor for use in pagination. after is an object ID that defines your place in the list. For\n instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can\n include after=obj_foo in order to fetch the next page of the list."
    name: "after"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "A cursor for use in pagination. before is an object ID that defines your place in the list. For\n instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can\n include before=obj_foo in order to fetch the previous page of the list."
    name: "before"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public Mono<PageableList<VectorStoreFile>> listVectorStoreFileBatchFiles(String vectorStoreId, String batchId, VectorStoreFileStatusFilter filter, Integer limit, ListSortOrder order, String after, String before)"
  desc: "Returns a list of vector store files in a batch."
  returns:
    description: "the response data for a requested list of items on successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.ai.openai.assistants.models.PageableList?alt=com.azure.ai.openai.assistants.models.PageableList&text=PageableList\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.ai.openai.assistants.models.VectorStoreFile?alt=com.azure.ai.openai.assistants.models.VectorStoreFile&text=VectorStoreFile\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.ai.openai.assistants.AssistantsAsyncClient.listVectorStoreFileBatchFilesWithResponse(java.lang.String,java.lang.String,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.ai.openai.assistants.AssistantsAsyncClient.listVectorStoreFileBatchFilesWithResponse(String vectorStoreId, String batchId, RequestOptions requestOptions)"
  name: "listVectorStoreFileBatchFilesWithResponse(String vectorStoreId, String batchId, RequestOptions requestOptions)"
  nameWithType: "AssistantsAsyncClient.listVectorStoreFileBatchFilesWithResponse(String vectorStoreId, String batchId, RequestOptions requestOptions)"
  summary: "Returns a list of vector store files in a batch."
  parameters:
  - description: "The ID of the vector store that the file batch belongs to."
    name: "vectorStoreId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The ID of the file batch that the files belong to."
    name: "batchId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<BinaryData>> listVectorStoreFileBatchFilesWithResponse(String vectorStoreId, String batchId, RequestOptions requestOptions)"
  desc: "Returns a list of vector store files in a batch.\n\n**Query Parameters**\n\n    | ------ | ------- | -------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n    | Name   | Type    | Required | Description                                                                                                                                                                                                                                                                           |\n    | filter | String  | No       | Filter by file status. Allowed values: \"in\\_progress\", \"completed\", \"failed\", \"cancelled\".                                                                                                                                                                                            |\n    | limit  | Integer | No       | A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.                                                                                                                                                                            |\n    | order  | String  | No       | Sort order by the created\\_at timestamp of the objects. asc for ascending order and desc for descending order. Allowed values: \"asc\", \"desc\".                                                                                                                                         |\n    | after  | String  | No       | A cursor for use in pagination. after is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj\\_foo, your subsequent call can include after=obj\\_foo in order to fetch the next page of the list.       |\n    | before | String  | No       | A cursor for use in pagination. before is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj\\_foo, your subsequent call can include before=obj\\_foo in order to fetch the previous page of the list. |\n\nYou can add these to a request with <xref uid=\"com.azure.core.http.rest.RequestOptions.addQueryParam\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RequestOptions#addQueryParam\"></xref>\n\n**Response Body Schema**\n\n```java\n{\n     object: String (Required)\n     data (Required): [\n          (Required){\n             id: String (Required)\n             object: String (Required)\n             usage_bytes: int (Required)\n             created_at: long (Required)\n             vector_store_id: String (Required)\n             status: String(in_progress/completed/failed/cancelled) (Required)\n             last_error (Required): {\n                 code: String(internal_error/file_not_found/parsing_error/unhandled_mime_type) (Required)\n                 message: String (Required)\n             }\n         }\n     ]\n     first_id: String (Required)\n     last_id: String (Required)\n     has_more: boolean (Required)\n }\n```"
  returns:
    description: "the response data for a requested list of items along with <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> on successful completion of\n <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.ai.openai.assistants.AssistantsAsyncClient.listVectorStoreFiles(java.lang.String)"
  fullName: "com.azure.ai.openai.assistants.AssistantsAsyncClient.listVectorStoreFiles(String vectorStoreId)"
  name: "listVectorStoreFiles(String vectorStoreId)"
  nameWithType: "AssistantsAsyncClient.listVectorStoreFiles(String vectorStoreId)"
  summary: "Returns a list of vector store files."
  parameters:
  - description: "The ID of the vector store that the files belong to."
    name: "vectorStoreId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public Mono<PageableList<VectorStoreFile>> listVectorStoreFiles(String vectorStoreId)"
  desc: "Returns a list of vector store files."
  returns:
    description: "the response data for a requested list of items on successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.ai.openai.assistants.models.PageableList?alt=com.azure.ai.openai.assistants.models.PageableList&text=PageableList\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.ai.openai.assistants.models.VectorStoreFile?alt=com.azure.ai.openai.assistants.models.VectorStoreFile&text=VectorStoreFile\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.ai.openai.assistants.AssistantsAsyncClient.listVectorStoreFiles(java.lang.String,com.azure.ai.openai.assistants.models.VectorStoreFileStatusFilter,java.lang.Integer,com.azure.ai.openai.assistants.models.ListSortOrder,java.lang.String,java.lang.String)"
  fullName: "com.azure.ai.openai.assistants.AssistantsAsyncClient.listVectorStoreFiles(String vectorStoreId, VectorStoreFileStatusFilter filter, Integer limit, ListSortOrder order, String after, String before)"
  name: "listVectorStoreFiles(String vectorStoreId, VectorStoreFileStatusFilter filter, Integer limit, ListSortOrder order, String after, String before)"
  nameWithType: "AssistantsAsyncClient.listVectorStoreFiles(String vectorStoreId, VectorStoreFileStatusFilter filter, Integer limit, ListSortOrder order, String after, String before)"
  summary: "Returns a list of vector store files."
  parameters:
  - description: "The ID of the vector store that the files belong to."
    name: "vectorStoreId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "Filter by file status. One of `in_progress`, `completed`, `failed`, `cancelled`."
    name: "filter"
    type: "<xref href=\"com.azure.ai.openai.assistants.models.VectorStoreFileStatusFilter?alt=com.azure.ai.openai.assistants.models.VectorStoreFileStatusFilter&text=VectorStoreFileStatusFilter\" data-throw-if-not-resolved=\"False\" />"
  - description: "A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default\n is 20."
    name: "limit"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Integer.html\">Integer</a>"
  - description: "Sort order by the created_at timestamp of the objects. asc for ascending order and desc for\n descending order."
    name: "order"
    type: "<xref href=\"com.azure.ai.openai.assistants.models.ListSortOrder?alt=com.azure.ai.openai.assistants.models.ListSortOrder&text=ListSortOrder\" data-throw-if-not-resolved=\"False\" />"
  - description: "A cursor for use in pagination. after is an object ID that defines your place in the list. For\n instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can\n include after=obj_foo in order to fetch the next page of the list."
    name: "after"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "A cursor for use in pagination. before is an object ID that defines your place in the list. For\n instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can\n include before=obj_foo in order to fetch the previous page of the list."
    name: "before"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public Mono<PageableList<VectorStoreFile>> listVectorStoreFiles(String vectorStoreId, VectorStoreFileStatusFilter filter, Integer limit, ListSortOrder order, String after, String before)"
  desc: "Returns a list of vector store files."
  returns:
    description: "the response data for a requested list of items on successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.ai.openai.assistants.models.PageableList?alt=com.azure.ai.openai.assistants.models.PageableList&text=PageableList\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.ai.openai.assistants.models.VectorStoreFile?alt=com.azure.ai.openai.assistants.models.VectorStoreFile&text=VectorStoreFile\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.ai.openai.assistants.AssistantsAsyncClient.listVectorStoreFilesWithResponse(java.lang.String,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.ai.openai.assistants.AssistantsAsyncClient.listVectorStoreFilesWithResponse(String vectorStoreId, RequestOptions requestOptions)"
  name: "listVectorStoreFilesWithResponse(String vectorStoreId, RequestOptions requestOptions)"
  nameWithType: "AssistantsAsyncClient.listVectorStoreFilesWithResponse(String vectorStoreId, RequestOptions requestOptions)"
  summary: "Returns a list of vector store files."
  parameters:
  - description: "The ID of the vector store that the files belong to."
    name: "vectorStoreId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<BinaryData>> listVectorStoreFilesWithResponse(String vectorStoreId, RequestOptions requestOptions)"
  desc: "Returns a list of vector store files.\n\n**Query Parameters**\n\n    | ------ | ------- | -------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n    | Name   | Type    | Required | Description                                                                                                                                                                                                                                                                           |\n    | filter | String  | No       | Filter by file status. Allowed values: \"in\\_progress\", \"completed\", \"failed\", \"cancelled\".                                                                                                                                                                                            |\n    | limit  | Integer | No       | A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.                                                                                                                                                                            |\n    | order  | String  | No       | Sort order by the created\\_at timestamp of the objects. asc for ascending order and desc for descending order. Allowed values: \"asc\", \"desc\".                                                                                                                                         |\n    | after  | String  | No       | A cursor for use in pagination. after is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj\\_foo, your subsequent call can include after=obj\\_foo in order to fetch the next page of the list.       |\n    | before | String  | No       | A cursor for use in pagination. before is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj\\_foo, your subsequent call can include before=obj\\_foo in order to fetch the previous page of the list. |\n\nYou can add these to a request with <xref uid=\"com.azure.core.http.rest.RequestOptions.addQueryParam\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RequestOptions#addQueryParam\"></xref>\n\n**Response Body Schema**\n\n```java\n{\n     object: String (Required)\n     data (Required): [\n          (Required){\n             id: String (Required)\n             object: String (Required)\n             usage_bytes: int (Required)\n             created_at: long (Required)\n             vector_store_id: String (Required)\n             status: String(in_progress/completed/failed/cancelled) (Required)\n             last_error (Required): {\n                 code: String(internal_error/file_not_found/parsing_error/unhandled_mime_type) (Required)\n                 message: String (Required)\n             }\n         }\n     ]\n     first_id: String (Required)\n     last_id: String (Required)\n     has_more: boolean (Required)\n }\n```"
  returns:
    description: "the response data for a requested list of items along with <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> on successful completion of\n <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.ai.openai.assistants.AssistantsAsyncClient.listVectorStores()"
  fullName: "com.azure.ai.openai.assistants.AssistantsAsyncClient.listVectorStores()"
  name: "listVectorStores()"
  nameWithType: "AssistantsAsyncClient.listVectorStores()"
  summary: "Returns a list of vector stores."
  syntax: "public Mono<PageableList<VectorStore>> listVectorStores()"
  desc: "Returns a list of vector stores."
  returns:
    description: "the response data for a requested list of items on successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.ai.openai.assistants.models.PageableList?alt=com.azure.ai.openai.assistants.models.PageableList&text=PageableList\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.ai.openai.assistants.models.VectorStore?alt=com.azure.ai.openai.assistants.models.VectorStore&text=VectorStore\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.ai.openai.assistants.AssistantsAsyncClient.listVectorStores(java.lang.Integer,com.azure.ai.openai.assistants.models.ListSortOrder,java.lang.String,java.lang.String)"
  fullName: "com.azure.ai.openai.assistants.AssistantsAsyncClient.listVectorStores(Integer limit, ListSortOrder order, String after, String before)"
  name: "listVectorStores(Integer limit, ListSortOrder order, String after, String before)"
  nameWithType: "AssistantsAsyncClient.listVectorStores(Integer limit, ListSortOrder order, String after, String before)"
  summary: "Returns a list of vector stores."
  parameters:
  - description: "A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default\n is 20."
    name: "limit"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Integer.html\">Integer</a>"
  - description: "Sort order by the created_at timestamp of the objects. asc for ascending order and desc for\n descending order."
    name: "order"
    type: "<xref href=\"com.azure.ai.openai.assistants.models.ListSortOrder?alt=com.azure.ai.openai.assistants.models.ListSortOrder&text=ListSortOrder\" data-throw-if-not-resolved=\"False\" />"
  - description: "A cursor for use in pagination. after is an object ID that defines your place in the list. For\n instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can\n include after=obj_foo in order to fetch the next page of the list."
    name: "after"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "A cursor for use in pagination. before is an object ID that defines your place in the list. For\n instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can\n include before=obj_foo in order to fetch the previous page of the list."
    name: "before"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public Mono<PageableList<VectorStore>> listVectorStores(Integer limit, ListSortOrder order, String after, String before)"
  desc: "Returns a list of vector stores."
  returns:
    description: "the response data for a requested list of items on successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.ai.openai.assistants.models.PageableList?alt=com.azure.ai.openai.assistants.models.PageableList&text=PageableList\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.ai.openai.assistants.models.VectorStore?alt=com.azure.ai.openai.assistants.models.VectorStore&text=VectorStore\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.ai.openai.assistants.AssistantsAsyncClient.listVectorStoresWithResponse(com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.ai.openai.assistants.AssistantsAsyncClient.listVectorStoresWithResponse(RequestOptions requestOptions)"
  name: "listVectorStoresWithResponse(RequestOptions requestOptions)"
  nameWithType: "AssistantsAsyncClient.listVectorStoresWithResponse(RequestOptions requestOptions)"
  summary: "Returns a list of vector stores."
  parameters:
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<BinaryData>> listVectorStoresWithResponse(RequestOptions requestOptions)"
  desc: "Returns a list of vector stores.\n\n**Query Parameters**\n\n    | ------ | ------- | -------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n    | Name   | Type    | Required | Description                                                                                                                                                                                                                                                                           |\n    | limit  | Integer | No       | A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.                                                                                                                                                                            |\n    | order  | String  | No       | Sort order by the created\\_at timestamp of the objects. asc for ascending order and desc for descending order. Allowed values: \"asc\", \"desc\".                                                                                                                                         |\n    | after  | String  | No       | A cursor for use in pagination. after is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj\\_foo, your subsequent call can include after=obj\\_foo in order to fetch the next page of the list.       |\n    | before | String  | No       | A cursor for use in pagination. before is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj\\_foo, your subsequent call can include before=obj\\_foo in order to fetch the previous page of the list. |\n\nYou can add these to a request with <xref uid=\"com.azure.core.http.rest.RequestOptions.addQueryParam\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RequestOptions#addQueryParam\"></xref>\n\n**Response Body Schema**\n\n```java\n{\n     object: String (Required)\n     data (Required): [\n          (Required){\n             id: String (Required)\n             object: String (Required)\n             created_at: long (Required)\n             name: String (Required)\n             usage_bytes: int (Required)\n             file_counts (Required): {\n                 in_progress: int (Required)\n                 completed: int (Required)\n                 failed: int (Required)\n                 cancelled: int (Required)\n                 total: int (Required)\n             }\n             status: String(expired/in_progress/completed) (Required)\n             expires_after (Optional): {\n                 anchor: String(last_active_at) (Required)\n                 days: int (Required)\n             }\n             expires_at: Long (Optional)\n             last_active_at: Long (Required)\n             metadata (Required): {\n                 String: String (Required)\n             }\n         }\n     ]\n     first_id: String (Required)\n     last_id: String (Required)\n     has_more: boolean (Required)\n }\n```"
  returns:
    description: "the response data for a requested list of items along with <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> on successful completion of\n <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.ai.openai.assistants.AssistantsAsyncClient.modifyVectorStore(java.lang.String,com.azure.ai.openai.assistants.models.VectorStoreUpdateOptions)"
  fullName: "com.azure.ai.openai.assistants.AssistantsAsyncClient.modifyVectorStore(String vectorStoreId, VectorStoreUpdateOptions vectorStoreUpdateOptions)"
  name: "modifyVectorStore(String vectorStoreId, VectorStoreUpdateOptions vectorStoreUpdateOptions)"
  nameWithType: "AssistantsAsyncClient.modifyVectorStore(String vectorStoreId, VectorStoreUpdateOptions vectorStoreUpdateOptions)"
  summary: "The ID of the vector store to modify."
  parameters:
  - description: "The ID of the vector store to modify."
    name: "vectorStoreId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "Request object for updating a vector store."
    name: "vectorStoreUpdateOptions"
    type: "<xref href=\"com.azure.ai.openai.assistants.models.VectorStoreUpdateOptions?alt=com.azure.ai.openai.assistants.models.VectorStoreUpdateOptions&text=VectorStoreUpdateOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<VectorStore> modifyVectorStore(String vectorStoreId, VectorStoreUpdateOptions vectorStoreUpdateOptions)"
  desc: "The ID of the vector store to modify."
  returns:
    description: "a vector store is a collection of processed files can be used by the `file_search` tool on successful\n completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.ai.openai.assistants.models.VectorStore?alt=com.azure.ai.openai.assistants.models.VectorStore&text=VectorStore\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.ai.openai.assistants.AssistantsAsyncClient.modifyVectorStoreWithResponse(java.lang.String,com.azure.core.util.BinaryData,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.ai.openai.assistants.AssistantsAsyncClient.modifyVectorStoreWithResponse(String vectorStoreId, BinaryData vectorStoreUpdateOptions, RequestOptions requestOptions)"
  name: "modifyVectorStoreWithResponse(String vectorStoreId, BinaryData vectorStoreUpdateOptions, RequestOptions requestOptions)"
  nameWithType: "AssistantsAsyncClient.modifyVectorStoreWithResponse(String vectorStoreId, BinaryData vectorStoreUpdateOptions, RequestOptions requestOptions)"
  summary: "The ID of the vector store to modify."
  parameters:
  - description: "The ID of the vector store to modify."
    name: "vectorStoreId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "Request object for updating a vector store."
    name: "vectorStoreUpdateOptions"
    type: "<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<BinaryData>> modifyVectorStoreWithResponse(String vectorStoreId, BinaryData vectorStoreUpdateOptions, RequestOptions requestOptions)"
  desc: "The ID of the vector store to modify.\n\n**Request Body Schema**\n\n```java\n{\n     name: String (Optional)\n     expires_after (Optional): {\n         anchor: String(last_active_at) (Required)\n         days: int (Required)\n     }\n     metadata (Optional): {\n         String: String (Required)\n     }\n }\n```\n\n**Response Body Schema**\n\n```java\n{\n     id: String (Required)\n     object: String (Required)\n     created_at: long (Required)\n     name: String (Required)\n     usage_bytes: int (Required)\n     file_counts (Required): {\n         in_progress: int (Required)\n         completed: int (Required)\n         failed: int (Required)\n         cancelled: int (Required)\n         total: int (Required)\n     }\n     status: String(expired/in_progress/completed) (Required)\n     expires_after (Optional): {\n         anchor: String(last_active_at) (Required)\n         days: int (Required)\n     }\n     expires_at: Long (Optional)\n     last_active_at: Long (Required)\n     metadata (Required): {\n         String: String (Required)\n     }\n }\n```"
  returns:
    description: "a vector store is a collection of processed files can be used by the `file_search` tool along with\n <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> on successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.ai.openai.assistants.AssistantsAsyncClient.submitToolOutputsToRun(java.lang.String,java.lang.String,java.util.List<com.azure.ai.openai.assistants.models.ToolOutput>)"
  fullName: "com.azure.ai.openai.assistants.AssistantsAsyncClient.submitToolOutputsToRun(String threadId, String runId, List<ToolOutput> toolOutputs)"
  name: "submitToolOutputsToRun(String threadId, String runId, List<ToolOutput> toolOutputs)"
  nameWithType: "AssistantsAsyncClient.submitToolOutputsToRun(String threadId, String runId, List<ToolOutput> toolOutputs)"
  summary: "Submits outputs from tools as requested by tool calls in a run."
  parameters:
  - description: "The ID of the thread that was run."
    name: "threadId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The ID of the run that requires tool outputs."
    name: "runId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "A list of tools for which the outputs are being submitted."
    name: "toolOutputs"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/List.html\">List</a>&lt;<xref href=\"com.azure.ai.openai.assistants.models.ToolOutput?alt=com.azure.ai.openai.assistants.models.ToolOutput&text=ToolOutput\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public Mono<ThreadRun> submitToolOutputsToRun(String threadId, String runId, List<ToolOutput> toolOutputs)"
  desc: "Submits outputs from tools as requested by tool calls in a run. Runs that need submitted tool outputs will have a status of 'requires\\_action' with a required\\_action.type of 'submit\\_tool\\_outputs'."
  returns:
    description: "data representing a single evaluation run of an assistant thread on successful completion of\n <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.ai.openai.assistants.models.ThreadRun?alt=com.azure.ai.openai.assistants.models.ThreadRun&text=ThreadRun\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.ai.openai.assistants.AssistantsAsyncClient.submitToolOutputsToRunStream(java.lang.String,java.lang.String,java.util.List<com.azure.ai.openai.assistants.models.ToolOutput>)"
  fullName: "com.azure.ai.openai.assistants.AssistantsAsyncClient.submitToolOutputsToRunStream(String threadId, String runId, List<ToolOutput> toolOutputs)"
  name: "submitToolOutputsToRunStream(String threadId, String runId, List<ToolOutput> toolOutputs)"
  nameWithType: "AssistantsAsyncClient.submitToolOutputsToRunStream(String threadId, String runId, List<ToolOutput> toolOutputs)"
  summary: "Submits outputs from tools as requested by tool calls in a run."
  parameters:
  - description: "The ID of the thread that was run."
    name: "threadId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The ID of the run that requires tool outputs."
    name: "runId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The list of tool outputs requested by tool calls from the specified run."
    name: "toolOutputs"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/List.html\">List</a>&lt;<xref href=\"com.azure.ai.openai.assistants.models.ToolOutput?alt=com.azure.ai.openai.assistants.models.ToolOutput&text=ToolOutput\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public Flux<StreamUpdate> submitToolOutputsToRunStream(String threadId, String runId, List<ToolOutput> toolOutputs)"
  desc: "Submits outputs from tools as requested by tool calls in a run. Runs that need submitted tool outputs will have a status of 'requires\\_action' with a required\\_action.type of 'submit\\_tool\\_outputs'."
  returns:
    description: "data representing a single evaluation run of an assistant thread on successful completion of\n <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<xref href=\"reactor.core.publisher.Flux?alt=reactor.core.publisher.Flux&text=Flux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.ai.openai.assistants.models.StreamUpdate?alt=com.azure.ai.openai.assistants.models.StreamUpdate&text=StreamUpdate\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.ai.openai.assistants.AssistantsAsyncClient.submitToolOutputsToRunWithResponse(java.lang.String,java.lang.String,com.azure.core.util.BinaryData,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.ai.openai.assistants.AssistantsAsyncClient.submitToolOutputsToRunWithResponse(String threadId, String runId, BinaryData request, RequestOptions requestOptions)"
  name: "submitToolOutputsToRunWithResponse(String threadId, String runId, BinaryData request, RequestOptions requestOptions)"
  nameWithType: "AssistantsAsyncClient.submitToolOutputsToRunWithResponse(String threadId, String runId, BinaryData request, RequestOptions requestOptions)"
  summary: "Submits outputs from tools as requested by tool calls in a run."
  parameters:
  - description: "The ID of the thread that was run."
    name: "threadId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The ID of the run that requires tool outputs."
    name: "runId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The request parameter."
    name: "request"
    type: "<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<BinaryData>> submitToolOutputsToRunWithResponse(String threadId, String runId, BinaryData request, RequestOptions requestOptions)"
  desc: "Submits outputs from tools as requested by tool calls in a run. Runs that need submitted tool outputs will have a status of 'requires\\_action' with a required\\_action.type of 'submit\\_tool\\_outputs'.\n\n**Request Body Schema**\n\n```java\n{\n     tool_outputs (Required): [\n          (Required){\n             tool_call_id: String (Optional)\n             output: String (Optional)\n         }\n     ]\n }\n```\n\n**Response Body Schema**\n\n```java\n{\n     id: String (Required)\n     object: String (Required)\n     thread_id: String (Required)\n     assistant_id: String (Required)\n     status: String(queued/in_progress/requires_action/cancelling/cancelled/failed/completed/expired) (Required)\n     required_action (Optional): {\n     }\n     last_error (Required): {\n         code: String (Required)\n         message: String (Required)\n     }\n     model: String (Required)\n     instructions: String (Required)\n     tools (Required): [\n          (Required){\n         }\n     ]\n     file_ids (Required): [\n         String (Required)\n     ]\n     created_at: long (Required)\n     expires_at: OffsetDateTime (Required)\n     started_at: OffsetDateTime (Required)\n     completed_at: OffsetDateTime (Required)\n     cancelled_at: OffsetDateTime (Required)\n     failed_at: OffsetDateTime (Required)\n     metadata (Required): {\n         String: String (Required)\n     }\n }\n```"
  returns:
    description: "data representing a single evaluation run of an assistant thread along with <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> on\n successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.ai.openai.assistants.AssistantsAsyncClient.updateAssistant(java.lang.String,com.azure.ai.openai.assistants.models.UpdateAssistantOptions)"
  fullName: "com.azure.ai.openai.assistants.AssistantsAsyncClient.updateAssistant(String assistantId, UpdateAssistantOptions updateAssistantOptions)"
  name: "updateAssistant(String assistantId, UpdateAssistantOptions updateAssistantOptions)"
  nameWithType: "AssistantsAsyncClient.updateAssistant(String assistantId, UpdateAssistantOptions updateAssistantOptions)"
  summary: "Modifies an existing assistant."
  parameters:
  - description: "The ID of the assistant to modify."
    name: "assistantId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The request details to use when modifying an existing assistant."
    name: "updateAssistantOptions"
    type: "<xref href=\"com.azure.ai.openai.assistants.models.UpdateAssistantOptions?alt=com.azure.ai.openai.assistants.models.UpdateAssistantOptions&text=UpdateAssistantOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Assistant> updateAssistant(String assistantId, UpdateAssistantOptions updateAssistantOptions)"
  desc: "Modifies an existing assistant."
  returns:
    description: "represents an assistant that can call the model and use tools on successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.ai.openai.assistants.models.Assistant?alt=com.azure.ai.openai.assistants.models.Assistant&text=Assistant\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.ai.openai.assistants.AssistantsAsyncClient.updateAssistantWithResponse(java.lang.String,com.azure.core.util.BinaryData,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.ai.openai.assistants.AssistantsAsyncClient.updateAssistantWithResponse(String assistantId, BinaryData updateAssistantOptions, RequestOptions requestOptions)"
  name: "updateAssistantWithResponse(String assistantId, BinaryData updateAssistantOptions, RequestOptions requestOptions)"
  nameWithType: "AssistantsAsyncClient.updateAssistantWithResponse(String assistantId, BinaryData updateAssistantOptions, RequestOptions requestOptions)"
  summary: "Modifies an existing assistant."
  parameters:
  - description: "The ID of the assistant to modify."
    name: "assistantId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The request details to use when modifying an existing assistant."
    name: "updateAssistantOptions"
    type: "<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<BinaryData>> updateAssistantWithResponse(String assistantId, BinaryData updateAssistantOptions, RequestOptions requestOptions)"
  desc: "Modifies an existing assistant.\n\n**Request Body Schema**\n\n```java\n{\n     model: String (Optional)\n     name: String (Optional)\n     description: String (Optional)\n     instructions: String (Optional)\n     tools (Optional): [\n          (Optional){\n         }\n     ]\n     file_ids (Optional): [\n         String (Optional)\n     ]\n     metadata (Optional): {\n         String: String (Required)\n     }\n }\n```\n\n**Response Body Schema**\n\n```java\n{\n     id: String (Required)\n     object: String (Required)\n     created_at: long (Required)\n     name: String (Required)\n     description: String (Required)\n     model: String (Required)\n     instructions: String (Required)\n     tools (Required): [\n          (Required){\n         }\n     ]\n     file_ids (Required): [\n         String (Required)\n     ]\n     metadata (Required): {\n         String: String (Required)\n     }\n }\n```"
  returns:
    description: "represents an assistant that can call the model and use tools along with <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> on successful\n completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.ai.openai.assistants.AssistantsAsyncClient.updateMessage(java.lang.String,java.lang.String)"
  fullName: "com.azure.ai.openai.assistants.AssistantsAsyncClient.updateMessage(String threadId, String messageId)"
  name: "updateMessage(String threadId, String messageId)"
  nameWithType: "AssistantsAsyncClient.updateMessage(String threadId, String messageId)"
  summary: "Modifies an existing message on an existing thread."
  parameters:
  - description: "The ID of the thread containing the specified message to modify."
    name: "threadId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The ID of the message to modify on the specified thread."
    name: "messageId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public Mono<ThreadMessage> updateMessage(String threadId, String messageId)"
  desc: "Modifies an existing message on an existing thread."
  returns:
    description: "a single, existing message within an assistant thread on successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.ai.openai.assistants.models.ThreadMessage?alt=com.azure.ai.openai.assistants.models.ThreadMessage&text=ThreadMessage\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.ai.openai.assistants.AssistantsAsyncClient.updateMessage(java.lang.String,java.lang.String,java.util.Map<java.lang.String,java.lang.String>)"
  fullName: "com.azure.ai.openai.assistants.AssistantsAsyncClient.updateMessage(String threadId, String messageId, Map<String,String> metadata)"
  name: "updateMessage(String threadId, String messageId, Map<String,String> metadata)"
  nameWithType: "AssistantsAsyncClient.updateMessage(String threadId, String messageId, Map<String,String> metadata)"
  summary: "Modifies an existing message on an existing thread."
  parameters:
  - description: "The ID of the thread containing the specified message to modify."
    name: "threadId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The ID of the message to modify on the specified thread."
    name: "messageId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "A set of up to 16 key/value pairs that can be attached to an object, used for storing additional\n information about that object in a structured format. Keys may be up to 64 characters in length and values may be\n up to 512 characters in length."
    name: "metadata"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/Map.html\">Map</a>&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>,<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>&gt;"
  syntax: "public Mono<ThreadMessage> updateMessage(String threadId, String messageId, Map<String,String> metadata)"
  desc: "Modifies an existing message on an existing thread."
  returns:
    description: "a single, existing message within an assistant thread on successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.ai.openai.assistants.models.ThreadMessage?alt=com.azure.ai.openai.assistants.models.ThreadMessage&text=ThreadMessage\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.ai.openai.assistants.AssistantsAsyncClient.updateMessageWithResponse(java.lang.String,java.lang.String,com.azure.core.util.BinaryData,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.ai.openai.assistants.AssistantsAsyncClient.updateMessageWithResponse(String threadId, String messageId, BinaryData request, RequestOptions requestOptions)"
  name: "updateMessageWithResponse(String threadId, String messageId, BinaryData request, RequestOptions requestOptions)"
  nameWithType: "AssistantsAsyncClient.updateMessageWithResponse(String threadId, String messageId, BinaryData request, RequestOptions requestOptions)"
  summary: "Modifies an existing message on an existing thread."
  parameters:
  - description: "The ID of the thread containing the specified message to modify."
    name: "threadId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The ID of the message to modify on the specified thread."
    name: "messageId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The request parameter."
    name: "request"
    type: "<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<BinaryData>> updateMessageWithResponse(String threadId, String messageId, BinaryData request, RequestOptions requestOptions)"
  desc: "Modifies an existing message on an existing thread.\n\n**Request Body Schema**\n\n```java\n{\n     metadata (Optional): {\n         String: String (Required)\n     }\n }\n```\n\n**Response Body Schema**\n\n```java\n{\n     id: String (Required)\n     object: String (Required)\n     created_at: long (Required)\n     thread_id: String (Required)\n     role: String(user/assistant) (Required)\n     content (Required): [\n          (Required){\n         }\n     ]\n     assistant_id: String (Optional)\n     run_id: String (Optional)\n     file_ids (Required): [\n         String (Required)\n     ]\n     metadata (Required): {\n         String: String (Required)\n     }\n }\n```"
  returns:
    description: "a single, existing message within an assistant thread along with <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> on successful\n completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.ai.openai.assistants.AssistantsAsyncClient.updateRun(java.lang.String,java.lang.String)"
  fullName: "com.azure.ai.openai.assistants.AssistantsAsyncClient.updateRun(String threadId, String runId)"
  name: "updateRun(String threadId, String runId)"
  nameWithType: "AssistantsAsyncClient.updateRun(String threadId, String runId)"
  summary: "Modifies an existing thread run."
  parameters:
  - description: "The ID of the thread associated with the specified run."
    name: "threadId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The ID of the run to modify."
    name: "runId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public Mono<ThreadRun> updateRun(String threadId, String runId)"
  desc: "Modifies an existing thread run."
  returns:
    description: "data representing a single evaluation run of an assistant thread on successful completion of\n <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.ai.openai.assistants.models.ThreadRun?alt=com.azure.ai.openai.assistants.models.ThreadRun&text=ThreadRun\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.ai.openai.assistants.AssistantsAsyncClient.updateRun(java.lang.String,java.lang.String,java.util.Map<java.lang.String,java.lang.String>)"
  fullName: "com.azure.ai.openai.assistants.AssistantsAsyncClient.updateRun(String threadId, String runId, Map<String,String> metadata)"
  name: "updateRun(String threadId, String runId, Map<String,String> metadata)"
  nameWithType: "AssistantsAsyncClient.updateRun(String threadId, String runId, Map<String,String> metadata)"
  summary: "Modifies an existing thread run."
  parameters:
  - description: "The ID of the thread associated with the specified run."
    name: "threadId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The ID of the run to modify."
    name: "runId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "A set of up to 16 key/value pairs that can be attached to an object, used for storing additional\n information about that object in a structured format. Keys may be up to 64 characters in length and values may be\n up to 512 characters in length."
    name: "metadata"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/Map.html\">Map</a>&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>,<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>&gt;"
  syntax: "public Mono<ThreadRun> updateRun(String threadId, String runId, Map<String,String> metadata)"
  desc: "Modifies an existing thread run."
  returns:
    description: "data representing a single evaluation run of an assistant thread on successful completion of\n <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.ai.openai.assistants.models.ThreadRun?alt=com.azure.ai.openai.assistants.models.ThreadRun&text=ThreadRun\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.ai.openai.assistants.AssistantsAsyncClient.updateRunWithResponse(java.lang.String,java.lang.String,com.azure.core.util.BinaryData,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.ai.openai.assistants.AssistantsAsyncClient.updateRunWithResponse(String threadId, String runId, BinaryData request, RequestOptions requestOptions)"
  name: "updateRunWithResponse(String threadId, String runId, BinaryData request, RequestOptions requestOptions)"
  nameWithType: "AssistantsAsyncClient.updateRunWithResponse(String threadId, String runId, BinaryData request, RequestOptions requestOptions)"
  summary: "Modifies an existing thread run."
  parameters:
  - description: "The ID of the thread associated with the specified run."
    name: "threadId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The ID of the run to modify."
    name: "runId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The request parameter."
    name: "request"
    type: "<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<BinaryData>> updateRunWithResponse(String threadId, String runId, BinaryData request, RequestOptions requestOptions)"
  desc: "Modifies an existing thread run.\n\n**Request Body Schema**\n\n```java\n{\n     metadata (Optional): {\n         String: String (Required)\n     }\n }\n```\n\n**Response Body Schema**\n\n```java\n{\n     id: String (Required)\n     object: String (Required)\n     thread_id: String (Required)\n     assistant_id: String (Required)\n     status: String(queued/in_progress/requires_action/cancelling/cancelled/failed/completed/expired) (Required)\n     required_action (Optional): {\n     }\n     last_error (Required): {\n         code: String (Required)\n         message: String (Required)\n     }\n     model: String (Required)\n     instructions: String (Required)\n     tools (Required): [\n          (Required){\n         }\n     ]\n     file_ids (Required): [\n         String (Required)\n     ]\n     created_at: long (Required)\n     expires_at: OffsetDateTime (Required)\n     started_at: OffsetDateTime (Required)\n     completed_at: OffsetDateTime (Required)\n     cancelled_at: OffsetDateTime (Required)\n     failed_at: OffsetDateTime (Required)\n     metadata (Required): {\n         String: String (Required)\n     }\n }\n```"
  returns:
    description: "data representing a single evaluation run of an assistant thread along with <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> on\n successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.ai.openai.assistants.AssistantsAsyncClient.updateThread(java.lang.String,com.azure.ai.openai.assistants.models.UpdateAssistantThreadOptions)"
  fullName: "com.azure.ai.openai.assistants.AssistantsAsyncClient.updateThread(String threadId, UpdateAssistantThreadOptions updateAssistantThreadOptions)"
  name: "updateThread(String threadId, UpdateAssistantThreadOptions updateAssistantThreadOptions)"
  nameWithType: "AssistantsAsyncClient.updateThread(String threadId, UpdateAssistantThreadOptions updateAssistantThreadOptions)"
  summary: "Modifies an existing thread."
  parameters:
  - description: "The ID of the thread to modify."
    name: "threadId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The details used to update an existing assistant thread."
    name: "updateAssistantThreadOptions"
    type: "<xref href=\"com.azure.ai.openai.assistants.models.UpdateAssistantThreadOptions?alt=com.azure.ai.openai.assistants.models.UpdateAssistantThreadOptions&text=UpdateAssistantThreadOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<AssistantThread> updateThread(String threadId, UpdateAssistantThreadOptions updateAssistantThreadOptions)"
  desc: "Modifies an existing thread."
  returns:
    description: "information about a single thread associated with an assistant on successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.ai.openai.assistants.models.AssistantThread?alt=com.azure.ai.openai.assistants.models.AssistantThread&text=AssistantThread\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.ai.openai.assistants.AssistantsAsyncClient.updateThreadWithResponse(java.lang.String,com.azure.core.util.BinaryData,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.ai.openai.assistants.AssistantsAsyncClient.updateThreadWithResponse(String threadId, BinaryData request, RequestOptions requestOptions)"
  name: "updateThreadWithResponse(String threadId, BinaryData request, RequestOptions requestOptions)"
  nameWithType: "AssistantsAsyncClient.updateThreadWithResponse(String threadId, BinaryData request, RequestOptions requestOptions)"
  summary: "Modifies an existing thread."
  parameters:
  - description: "The ID of the thread to modify."
    name: "threadId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The request parameter."
    name: "request"
    type: "<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<BinaryData>> updateThreadWithResponse(String threadId, BinaryData request, RequestOptions requestOptions)"
  desc: "Modifies an existing thread.\n\n**Request Body Schema**\n\n```java\n{\n     metadata (Optional): {\n         String: String (Required)\n     }\n }\n```\n\n**Response Body Schema**\n\n```java\n{\n     id: String (Required)\n     object: String (Required)\n     created_at: long (Required)\n     metadata (Required): {\n         String: String (Required)\n     }\n }\n```"
  returns:
    description: "information about a single thread associated with an assistant along with <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> on successful\n completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.ai.openai.assistants.AssistantsAsyncClient.uploadFile(com.azure.ai.openai.assistants.models.FileDetails,com.azure.ai.openai.assistants.models.FilePurpose)"
  fullName: "com.azure.ai.openai.assistants.AssistantsAsyncClient.uploadFile(FileDetails file, FilePurpose purpose)"
  name: "uploadFile(FileDetails file, FilePurpose purpose)"
  nameWithType: "AssistantsAsyncClient.uploadFile(FileDetails file, FilePurpose purpose)"
  summary: "Uploads a file for use by other operations."
  parameters:
  - description: "The file data (not filename) to upload."
    name: "file"
    type: "<xref href=\"com.azure.ai.openai.assistants.models.FileDetails?alt=com.azure.ai.openai.assistants.models.FileDetails&text=FileDetails\" data-throw-if-not-resolved=\"False\" />"
  - description: "The intended purpose of the file."
    name: "purpose"
    type: "<xref href=\"com.azure.ai.openai.assistants.models.FilePurpose?alt=com.azure.ai.openai.assistants.models.FilePurpose&text=FilePurpose\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<OpenAIFile> uploadFile(FileDetails file, FilePurpose purpose)"
  desc: "Uploads a file for use by other operations."
  returns:
    description: "represents an assistant that can call the model and use tools on successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.ai.openai.assistants.models.OpenAIFile?alt=com.azure.ai.openai.assistants.models.OpenAIFile&text=OpenAIFile\" data-throw-if-not-resolved=\"False\" />&gt;"
type: "class"
desc: "Initializes a new instance of the asynchronous AssistantsClient type."
metadata: {}
package: "com.azure.ai.openai.assistants"
artifact: com.azure:azure-ai-openai-assistants:1.0.0-beta.5
