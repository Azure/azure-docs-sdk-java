### YamlMime:ManagedReference
items:
- uid: com.azure.cosmos.implementation.guava25.base.Function
  id: Function
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.base
  children:
  - com.azure.cosmos.implementation.guava25.base.Function.apply(F)
  - com.azure.cosmos.implementation.guava25.base.Function.equals(java.lang.Object)
  langs:
  - java
  name: Function<F,T>
  nameWithType: Function<F,T>
  fullName: com.azure.cosmos.implementation.guava25.base.Function<F,T>
  type: Interface
  package: com.azure.cosmos.implementation.guava25.base
  summary: >-
    Legacy version of <xref uid="java.util.function.Function" data-throw-if-not-resolved="false">java.util.function.Function</xref>.


    The <xref uid="com.azure.cosmos.implementation.guava25.base.Functions" data-throw-if-not-resolved="false">Functions</xref> class provides common functions and related utilities.


    As this interface extends `java.util.function.Function`, an instance of this type can be used as a `java.util.function.Function` directly. To use a `java.util.function.Function` in a context where a `com.google.common.base.Function` is needed, use `function::apply`.


    This interface is now a legacy type. Use `java.util.function.Function` (or the appropriate primitive specialization such as `ToIntFunction`) instead whenever possible. Otherwise, at least reduce *explicit* dependencies on this type by using lambda expressions or method references instead of classes, leaving your code easier to migrate in the future.


    See the Guava User Guide article on [the use of `Function`][the use of _Function].



    [the use of _Function]: https://github.com/google/guava/wiki/FunctionalExplained
  syntax:
    content: public interface Function<F,T> extends Function<F,T>
    typeParameters:
    - id: F
    - id: T
  implements:
  - java.util.function.Function<F,T>
- uid: com.azure.cosmos.implementation.guava25.base.Function.apply(F)
  id: apply(F)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.base.Function
  langs:
  - java
  name: apply(F input)
  nameWithType: Function<F,T>.apply(F input)
  fullName: com.azure.cosmos.implementation.guava25.base.Function<F,T>.apply(F input)
  overload: com.azure.cosmos.implementation.guava25.base.Function.apply*
  type: Method
  package: com.azure.cosmos.implementation.guava25.base
  syntax:
    content: public abstract T apply(F input)
    parameters:
    - id: input
      type: F
    return:
      type: T
- uid: com.azure.cosmos.implementation.guava25.base.Function.equals(java.lang.Object)
  id: equals(java.lang.Object)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.base.Function
  langs:
  - java
  name: equals(Object object)
  nameWithType: Function<F,T>.equals(Object object)
  fullName: com.azure.cosmos.implementation.guava25.base.Function<F,T>.equals(Object object)
  overload: com.azure.cosmos.implementation.guava25.base.Function.equals*
  type: Method
  package: com.azure.cosmos.implementation.guava25.base
  summary: >-
    *May* return `true` if `object` is a `Function` that behaves identically to this function.


    **Warning: do not depend** on the behavior of this method.


    Historically, `Function` instances in this library have implemented this method to recognize certain cases where distinct `Function` instances would in fact behave identically. However, as code migrates to `java.util.function`, that behavior will disappear. It is best not to depend on it.
  syntax:
    content: public abstract boolean equals(Object object)
    parameters:
    - id: object
      type: java.lang.Object
    return:
      type: boolean
references:
- uid: F
  spec.java:
  - uid: F
    name: F
    fullName: F
- uid: T
  spec.java:
  - uid: T
    name: T
    fullName: T
- uid: com.azure.cosmos.implementation.guava25.base.Function.apply*
  name: apply
  nameWithType: Function<F,T>.apply
  fullName: com.azure.cosmos.implementation.guava25.base.Function<F,T>.apply
  package: com.azure.cosmos.implementation.guava25.base
- uid: java.lang.Object
  spec.java:
  - uid: java.lang.Object
    name: Object
    fullName: java.lang.Object
- uid: boolean
  spec.java:
  - uid: boolean
    name: boolean
    fullName: boolean
- uid: com.azure.cosmos.implementation.guava25.base.Function.equals*
  name: equals
  nameWithType: Function<F,T>.equals
  fullName: com.azure.cosmos.implementation.guava25.base.Function<F,T>.equals
  package: com.azure.cosmos.implementation.guava25.base
- uid: java.util.function.Function<F,T>
  name: Function<F,T>
  nameWithType: Function<F,T>
  fullName: java.util.function.Function<F,T>
- uid: java.util.function.Function
  name: Function
  nameWithType: Function
  fullName: java.util.function.Function
- uid: F,T
  name: F,T
  nameWithType: F,T
  fullName: F,T
