### YamlMime:JavaMember
uid: "com.fasterxml.jackson.databind.ser.std.ToStringSerializer.ToStringSerializer*"
fullName: "com.fasterxml.jackson.databind.ser.std.ToStringSerializer.ToStringSerializer"
name: "ToStringSerializer"
nameWithType: "ToStringSerializer.ToStringSerializer"
members:
- uid: "com.fasterxml.jackson.databind.ser.std.ToStringSerializer.ToStringSerializer()"
  fullName: "com.fasterxml.jackson.databind.ser.std.ToStringSerializer.ToStringSerializer()"
  name: "ToStringSerializer()"
  nameWithType: "ToStringSerializer.ToStringSerializer()"
  summary: "Note: usually you should NOT create new instances, but instead use <xref uid=\"com.fasterxml.jackson.databind.ser.std.ToStringSerializer.instance\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#instance\"></xref> which is stateless and fully thread-safe. However, there are cases where constructor is needed; for example, when using explicit serializer annotations like <xref uid=\"com.fasterxml.jackson.databind.annotation.JsonSerialize.using\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.fasterxml.jackson.databind.annotation.JsonSerialize#using\"></xref>."
  syntax: "public ToStringSerializer()"
- uid: "com.fasterxml.jackson.databind.ser.std.ToStringSerializer.ToStringSerializer(java.lang.Class<?>)"
  fullName: "com.fasterxml.jackson.databind.ser.std.ToStringSerializer.ToStringSerializer(Class<?> handledType)"
  name: "ToStringSerializer(Class<?> handledType)"
  nameWithType: "ToStringSerializer.ToStringSerializer(Class<?> handledType)"
  summary: "Sometimes it may actually make sense to retain actual handled type."
  parameters:
  - name: "handledType"
    type: "<xref href=\"java.lang.Class?alt=java.lang.Class&text=Class\" data-throw-if-not-resolved=\"False\" />&lt;?&gt;"
  syntax: "public ToStringSerializer(Class<?> handledType)"
type: "constructor"
metadata: {}
package: "com.fasterxml.jackson.databind.ser.std"
artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
