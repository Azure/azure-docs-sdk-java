### YamlMime:ManagedReference
items:
- uid: com.fasterxml.jackson.core.io.InputDecorator
  id: InputDecorator
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.io
  children:
  - com.fasterxml.jackson.core.io.InputDecorator.InputDecorator()
  - com.fasterxml.jackson.core.io.InputDecorator.decorate(com.fasterxml.jackson.core.io.IOContext,byte[],int,int)
  - com.fasterxml.jackson.core.io.InputDecorator.decorate(com.fasterxml.jackson.core.io.IOContext,java.io.DataInput)
  - com.fasterxml.jackson.core.io.InputDecorator.decorate(com.fasterxml.jackson.core.io.IOContext,java.io.InputStream)
  - com.fasterxml.jackson.core.io.InputDecorator.decorate(com.fasterxml.jackson.core.io.IOContext,java.io.Reader)
  langs:
  - java
  name: InputDecorator
  nameWithType: InputDecorator
  fullName: com.fasterxml.jackson.core.io.InputDecorator
  type: Class
  package: com.fasterxml.jackson.core.io
  summary: Handler class that can be used to decorate input sources. Typical use is to use a filter abstraction (filtered stream, reader) around original input source, and apply additional processing during read operations.
  syntax:
    content: public abstract class InputDecorator implements Serializable
  inheritance:
  - java.lang.Object
  implements:
  - java.io.Serializable
  inheritedMembers:
  - java.lang.Object.clone()
  - java.lang.Object.equals(java.lang.Object)
  - java.lang.Object.finalize()
  - java.lang.Object.getClass()
  - java.lang.Object.hashCode()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.toString()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
- uid: com.fasterxml.jackson.core.io.InputDecorator.InputDecorator()
  id: InputDecorator()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.io.InputDecorator
  langs:
  - java
  name: InputDecorator()
  nameWithType: InputDecorator.InputDecorator()
  fullName: com.fasterxml.jackson.core.io.InputDecorator.InputDecorator()
  overload: com.fasterxml.jackson.core.io.InputDecorator.InputDecorator*
  type: Constructor
  package: com.fasterxml.jackson.core.io
  syntax:
    content: public InputDecorator()
- uid: com.fasterxml.jackson.core.io.InputDecorator.decorate(com.fasterxml.jackson.core.io.IOContext,byte[],int,int)
  id: decorate(com.fasterxml.jackson.core.io.IOContext,byte[],int,int)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.io.InputDecorator
  langs:
  - java
  name: decorate(IOContext ctxt, byte[] src, int offset, int length)
  nameWithType: InputDecorator.decorate(IOContext ctxt, byte[] src, int offset, int length)
  fullName: com.fasterxml.jackson.core.io.InputDecorator.decorate(IOContext ctxt, byte[] src, int offset, int length)
  overload: com.fasterxml.jackson.core.io.InputDecorator.decorate*
  type: Method
  package: com.fasterxml.jackson.core.io
  summary: Method called by <xref uid="com.fasterxml.jackson.core.JsonFactory" data-throw-if-not-resolved="false">com.fasterxml.jackson.core.JsonFactory</xref> instance when creating parser on given "raw" byte source. Method can either construct a <xref uid="java.io.InputStream" data-throw-if-not-resolved="false">InputStream</xref> for reading; or return null to indicate that no wrapping should occur.
  syntax:
    content: public abstract InputStream decorate(IOContext ctxt, byte[] src, int offset, int length)
    parameters:
    - id: ctxt
      type: com.fasterxml.jackson.core.io.IOContext
      description: >-
        IO context in use (provides access to declared encoding)
           NOTE: at this point context may not have all information initialized;
           specifically auto-detected encoding is only available once parsing starts,
           which may occur only after this method is called.
    - id: src
      type: byte[]
      description: Input buffer that contains contents to parse
    - id: offset
      type: int
      description: Offset of the first available byte in the input buffer
    - id: length
      type: int
      description: Number of bytes available in the input buffer
    return:
      type: java.io.InputStream
      description: >-
        Either <xref uid="java.io.InputStream" data-throw-if-not-resolved="false">InputStream</xref> to use as input source; or null to indicate
           that contents are to be processed as-is by caller
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.io.InputDecorator.decorate(com.fasterxml.jackson.core.io.IOContext,java.io.DataInput)
  id: decorate(com.fasterxml.jackson.core.io.IOContext,java.io.DataInput)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.io.InputDecorator
  langs:
  - java
  name: decorate(IOContext ctxt, DataInput input)
  nameWithType: InputDecorator.decorate(IOContext ctxt, DataInput input)
  fullName: com.fasterxml.jackson.core.io.InputDecorator.decorate(IOContext ctxt, DataInput input)
  overload: com.fasterxml.jackson.core.io.InputDecorator.decorate*
  type: Method
  package: com.fasterxml.jackson.core.io
  summary: >-
    Method called by <xref uid="com.fasterxml.jackson.core.JsonFactory" data-throw-if-not-resolved="false">com.fasterxml.jackson.core.JsonFactory</xref> instance when creating parser given an <xref uid="java.io.DataInput" data-throw-if-not-resolved="false">DataInput</xref>, when this decorator has been registered.


    Default implementation simply throws <xref uid="" data-throw-if-not-resolved="false">UnsupportedOperationException</xref>
  syntax:
    content: public DataInput decorate(IOContext ctxt, DataInput input)
    parameters:
    - id: ctxt
      type: com.fasterxml.jackson.core.io.IOContext
      description: >-
        IO context in use (provides access to declared encoding).
           NOTE: at this point context may not have all information initialized;
           specifically auto-detected encoding is only available once parsing starts,
           which may occur only after this method is called.
    - id: input
      type: java.io.DataInput
      description: Original input source
    return:
      type: java.io.DataInput
      description: >-
        InputStream to use; either 'input' as is, or decorator
           version that typically delogates to 'input'
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.io.InputDecorator.decorate(com.fasterxml.jackson.core.io.IOContext,java.io.InputStream)
  id: decorate(com.fasterxml.jackson.core.io.IOContext,java.io.InputStream)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.io.InputDecorator
  langs:
  - java
  name: decorate(IOContext ctxt, InputStream in)
  nameWithType: InputDecorator.decorate(IOContext ctxt, InputStream in)
  fullName: com.fasterxml.jackson.core.io.InputDecorator.decorate(IOContext ctxt, InputStream in)
  overload: com.fasterxml.jackson.core.io.InputDecorator.decorate*
  type: Method
  package: com.fasterxml.jackson.core.io
  summary: Method called by <xref uid="com.fasterxml.jackson.core.JsonFactory" data-throw-if-not-resolved="false">com.fasterxml.jackson.core.JsonFactory</xref> instance when creating parser given an <xref uid="java.io.InputStream" data-throw-if-not-resolved="false">InputStream</xref>, when this decorator has been registered.
  syntax:
    content: public abstract InputStream decorate(IOContext ctxt, InputStream in)
    parameters:
    - id: ctxt
      type: com.fasterxml.jackson.core.io.IOContext
      description: >-
        IO context in use (provides access to declared encoding).
           NOTE: at this point context may not have all information initialized;
           specifically auto-detected encoding is only available once parsing starts,
           which may occur only after this method is called.
    - id: in
      type: java.io.InputStream
      description: Original input source
    return:
      type: java.io.InputStream
      description: >-
        InputStream to use; either 'in' as is, or decorator
           version that typically delogates to 'in'
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.io.InputDecorator.decorate(com.fasterxml.jackson.core.io.IOContext,java.io.Reader)
  id: decorate(com.fasterxml.jackson.core.io.IOContext,java.io.Reader)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.io.InputDecorator
  langs:
  - java
  name: decorate(IOContext ctxt, Reader r)
  nameWithType: InputDecorator.decorate(IOContext ctxt, Reader r)
  fullName: com.fasterxml.jackson.core.io.InputDecorator.decorate(IOContext ctxt, Reader r)
  overload: com.fasterxml.jackson.core.io.InputDecorator.decorate*
  type: Method
  package: com.fasterxml.jackson.core.io
  summary: Method called by <xref uid="com.fasterxml.jackson.core.JsonFactory" data-throw-if-not-resolved="false">com.fasterxml.jackson.core.JsonFactory</xref> instance when creating parser given an <xref uid="java.io.Reader" data-throw-if-not-resolved="false">Reader</xref>, when this decorator has been registered.
  syntax:
    content: public abstract Reader decorate(IOContext ctxt, Reader r)
    parameters:
    - id: ctxt
      type: com.fasterxml.jackson.core.io.IOContext
      description: >-
        IO context in use (provides access to declared encoding)
           NOTE: at this point context may not have all information initialized;
           specifically auto-detected encoding is only available once parsing starts,
           which may occur only after this method is called.
    - id: r
      type: java.io.Reader
      description: Original reader
    return:
      type: java.io.Reader
      description: >-
        Reader to use; either passed in argument, or something that
           calls it (for example, a <xref uid="" data-throw-if-not-resolved="false">FilterReader</xref>)
  exceptions:
  - type: java.io.IOException
references:
- uid: com.fasterxml.jackson.core.io.InputDecorator.InputDecorator*
  name: InputDecorator
  nameWithType: InputDecorator.InputDecorator
  fullName: com.fasterxml.jackson.core.io.InputDecorator.InputDecorator
  package: com.fasterxml.jackson.core.io
- uid: java.io.IOException
  spec.java:
  - uid: java.io.IOException
    name: IOException
    fullName: java.io.IOException
- uid: com.fasterxml.jackson.core.io.IOContext
  name: IOContext
  nameWithType: IOContext
  fullName: com.fasterxml.jackson.core.io.IOContext
- uid: java.io.InputStream
  spec.java:
  - uid: java.io.InputStream
    name: InputStream
    fullName: java.io.InputStream
- uid: com.fasterxml.jackson.core.io.InputDecorator.decorate*
  name: decorate
  nameWithType: InputDecorator.decorate
  fullName: com.fasterxml.jackson.core.io.InputDecorator.decorate
  package: com.fasterxml.jackson.core.io
- uid: byte[]
  spec.java:
  - uid: byte
    name: byte
    fullName: byte
  - name: '[]'
    fullName: '[]'
- uid: int
  spec.java:
  - uid: int
    name: int
    fullName: int
- uid: java.io.DataInput
  spec.java:
  - uid: java.io.DataInput
    name: DataInput
    fullName: java.io.DataInput
- uid: java.io.Reader
  spec.java:
  - uid: java.io.Reader
    name: Reader
    fullName: java.io.Reader
- uid: java.io.Serializable
  name: Serializable
  nameWithType: Serializable
  fullName: java.io.Serializable
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: java.lang.Object.finalize()
  name: Object.finalize()
  nameWithType: Object.finalize()
  fullName: java.lang.Object.finalize()
- uid: java.lang.Object.clone()
  name: Object.clone()
  nameWithType: Object.clone()
  fullName: java.lang.Object.clone()
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: java.lang.Object.equals(java.lang.Object)
  name: Object.equals(Object)
  nameWithType: Object.equals(Object)
  fullName: java.lang.Object.equals(java.lang.Object)
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.lang.Object.hashCode()
  name: Object.hashCode()
  nameWithType: Object.hashCode()
  fullName: java.lang.Object.hashCode()
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: java.lang.Object.toString()
  name: Object.toString()
  nameWithType: Object.toString()
  fullName: java.lang.Object.toString()
