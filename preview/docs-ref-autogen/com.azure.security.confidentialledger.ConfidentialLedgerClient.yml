### YamlMime:JavaType
uid: "com.azure.security.confidentialledger.ConfidentialLedgerClient"
fullName: "com.azure.security.confidentialledger.ConfidentialLedgerClient"
name: "ConfidentialLedgerClient"
nameWithType: "ConfidentialLedgerClient"
summary: "Initializes a new instance of the synchronous Confidential<wbr>Ledger<wbr>Client type."
inheritances:
- "<xref href=\"java.lang.Object?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
inheritedClassMethods:
- classRef: "java.lang.<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html\">Object</a>"
  methodsRef:
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#clone--\">clone</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#equals-java.lang.Object-\">equals</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#finalize--\">finalize</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#getClass--\">getClass</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#hashCode--\">hashCode</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#notify--\">notify</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#notifyAll--\">notifyAll</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#toString--\">toString</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#wait--\">wait</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#wait-long-\">wait</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#wait-long-int-\">wait</a>"
syntax: "public final class **ConfidentialLedgerClient**"
methods:
- uid: "com.azure.security.confidentialledger.ConfidentialLedgerClient.createLedgerEntryWithResponse(com.azure.core.util.BinaryData,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.security.confidentialledger.ConfidentialLedgerClient.createLedgerEntryWithResponse(BinaryData entry, RequestOptions requestOptions)"
  name: "createLedgerEntryWithResponse(BinaryData entry, RequestOptions requestOptions)"
  nameWithType: "ConfidentialLedgerClient.createLedgerEntryWithResponse(BinaryData entry, RequestOptions requestOptions)"
  summary: "Writes a ledger entry."
  parameters:
  - description: "Ledger entry."
    name: "entry"
    type: "<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<BinaryData> createLedgerEntryWithResponse(BinaryData entry, RequestOptions requestOptions)"
  desc: "Writes a ledger entry. A collection id may optionally be specified.\n\n**Query Parameters**\n\n    | ------------ | ------ | -------- | --------------------- |\n    | Name         | Type   | Required | Description           |\n    | collectionId | String | No       | The collection id.    |\n    | tags         | String | No       | Comma separated tags. |\n\nYou can add these to a request with <xref uid=\"com.azure.core.http.rest.RequestOptions.addQueryParam\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RequestOptions#addQueryParam\"></xref>\n\n**Request Body Schema**\n\n```java\n{\n     contents: String (Required)\n     collectionId: String (Optional)\n     transactionId: String (Optional)\n     preHooks (Optional): [\n          (Optional){\n             functionId: String (Required)\n             properties (Optional): {\n                 arguments (Optional): [\n                     String (Optional)\n                 ]\n                 exportedFunctionName: String (Optional)\n                 runtimeOptions (Optional): {\n                     log_exception_details: Boolean (Optional)\n                     max_cached_interpreters: Long (Optional)\n                     max_execution_time_ms: Long (Optional)\n                     max_heap_bytes: Long (Optional)\n                     max_stack_bytes: Long (Optional)\n                     return_exception_details: Boolean (Optional)\n                 }\n             }\n         }\n     ]\n     postHooks (Optional): [\n         (recursive schema, see above)\n     ]\n }\n```\n\n**Response Body Schema**\n\n```java\n{\n     collectionId: String (Required)\n }\n```"
  returns:
    description: "returned as a result of a write to the Confidential Ledger, the transaction id in the response indicates\n when the write will become durable along with <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.security.confidentialledger.ConfidentialLedgerClient.createOrUpdateLedgerUserWithResponse(java.lang.String,com.azure.core.util.BinaryData,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.security.confidentialledger.ConfidentialLedgerClient.createOrUpdateLedgerUserWithResponse(String userId, BinaryData userMultipleRoles, RequestOptions requestOptions)"
  name: "createOrUpdateLedgerUserWithResponse(String userId, BinaryData userMultipleRoles, RequestOptions requestOptions)"
  nameWithType: "ConfidentialLedgerClient.createOrUpdateLedgerUserWithResponse(String userId, BinaryData userMultipleRoles, RequestOptions requestOptions)"
  summary: "Adds a user or updates a user's fields."
  parameters:
  - description: "The user id, either an AAD object ID or certificate fingerprint."
    name: "userId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "Details about a Confidential Ledger user with multiple roles."
    name: "userMultipleRoles"
    type: "<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<BinaryData> createOrUpdateLedgerUserWithResponse(String userId, BinaryData userMultipleRoles, RequestOptions requestOptions)"
  desc: "Adds a user or updates a user's fields. A JSON merge patch is applied for existing users.\n\n**Request Body Schema**\n\n```java\n{\n     assignedRoles (Required): [\n         String(Administrator/Contributor/Reader) (Required)\n     ]\n     userId: String (Optional)\n }\n```\n\n**Response Body Schema**\n\n```java\n{\n     assignedRoles (Required): [\n         String(Administrator/Contributor/Reader) (Required)\n     ]\n     userId: String (Optional)\n }\n```"
  returns:
    description: "details about a Confidential Ledger user along with <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.security.confidentialledger.ConfidentialLedgerClient.createOrUpdateUserWithResponse(java.lang.String,com.azure.core.util.BinaryData,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.security.confidentialledger.ConfidentialLedgerClient.createOrUpdateUserWithResponse(String userId, BinaryData userDetails, RequestOptions requestOptions)"
  name: "createOrUpdateUserWithResponse(String userId, BinaryData userDetails, RequestOptions requestOptions)"
  nameWithType: "ConfidentialLedgerClient.createOrUpdateUserWithResponse(String userId, BinaryData userDetails, RequestOptions requestOptions)"
  summary: "Adds a user or updates a user's fields."
  parameters:
  - description: "The user id, either an AAD object ID or certificate fingerprint."
    name: "userId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "Details about a Confidential Ledger user."
    name: "userDetails"
    type: "<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<BinaryData> createOrUpdateUserWithResponse(String userId, BinaryData userDetails, RequestOptions requestOptions)"
  desc: "Adds a user or updates a user's fields. A JSON merge patch is applied for existing users.\n\n**Request Body Schema**\n\n```java\n{\n     assignedRole: String(Administrator/Contributor/Reader) (Required)\n     userId: String (Optional)\n }\n```\n\n**Response Body Schema**\n\n```java\n{\n     assignedRole: String(Administrator/Contributor/Reader) (Required)\n     userId: String (Optional)\n }\n```"
  returns:
    description: "details about a Confidential Ledger user along with <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.security.confidentialledger.ConfidentialLedgerClient.createUserDefinedEndpointWithResponse(com.azure.core.util.BinaryData,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.security.confidentialledger.ConfidentialLedgerClient.createUserDefinedEndpointWithResponse(BinaryData bundle, RequestOptions requestOptions)"
  name: "createUserDefinedEndpointWithResponse(BinaryData bundle, RequestOptions requestOptions)"
  nameWithType: "ConfidentialLedgerClient.createUserDefinedEndpointWithResponse(BinaryData bundle, RequestOptions requestOptions)"
  summary: "Creates a user defined endpoint."
  parameters:
  - description: "bundle parameter description."
    name: "bundle"
    type: "<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<Void> createUserDefinedEndpointWithResponse(BinaryData bundle, RequestOptions requestOptions)"
  desc: "Creates a user defined endpoint. Creates the user defined endpoint in the ACL instance.\n\n**Request Body Schema**\n\n```java\n{\n     metadata (Required): {\n         endpoints (Required): {\n             String (Required): {\n                 get (Optional): {\n                     authn_policies (Required): [\n                         Object (Required)\n                     ]\n                     forwarding_required: String(sometimes/always/never) (Required)\n                     interpreter_reuse (Optional): {\n                         key: String (Required)\n                     }\n                     js_function: String (Optional)\n                     js_module: String (Optional)\n                     mode: String(readwrite/readonly/historical) (Optional)\n                     openapi: Object (Optional)\n                     openapi_hidden: Boolean (Optional)\n                     redirection_strategy: String(none/to_primary/to_backup) (Optional)\n                 }\n                 put (Optional): (recursive schema, see put above)\n                 patch (Optional): (recursive schema, see patch above)\n                 delete (Optional): (recursive schema, see delete above)\n             }\n         }\n     }\n     modules: Object (Required)\n }\n```"
  returns:
    description: "the <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Void.html\">Void</a>&gt;"
- uid: "com.azure.security.confidentialledger.ConfidentialLedgerClient.createUserDefinedFunctionWithResponse(java.lang.String,com.azure.core.util.BinaryData,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.security.confidentialledger.ConfidentialLedgerClient.createUserDefinedFunctionWithResponse(String functionId, BinaryData userDefinedFunction, RequestOptions requestOptions)"
  name: "createUserDefinedFunctionWithResponse(String functionId, BinaryData userDefinedFunction, RequestOptions requestOptions)"
  nameWithType: "ConfidentialLedgerClient.createUserDefinedFunctionWithResponse(String functionId, BinaryData userDefinedFunction, RequestOptions requestOptions)"
  summary: "Creates a user defined function."
  parameters:
  - description: "Identifies a user defined function."
    name: "functionId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "Specify a user defined function of a Confidential Ledger."
    name: "userDefinedFunction"
    type: "<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<BinaryData> createUserDefinedFunctionWithResponse(String functionId, BinaryData userDefinedFunction, RequestOptions requestOptions)"
  desc: "Creates a user defined function. Creates the user defined function in the Confidential Ledger.\n\n**Request Body Schema**\n\n```java\n{\n     code: String (Required)\n     id: String (Optional)\n }\n```\n\n**Response Body Schema**\n\n```java\n{\n     code: String (Required)\n     id: String (Optional)\n }\n```"
  returns:
    description: "a user defined function in the ledger along with <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.security.confidentialledger.ConfidentialLedgerClient.createUserDefinedRoleWithResponse(com.azure.core.util.BinaryData,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.security.confidentialledger.ConfidentialLedgerClient.createUserDefinedRoleWithResponse(BinaryData roles, RequestOptions requestOptions)"
  name: "createUserDefinedRoleWithResponse(BinaryData roles, RequestOptions requestOptions)"
  nameWithType: "ConfidentialLedgerClient.createUserDefinedRoleWithResponse(BinaryData roles, RequestOptions requestOptions)"
  summary: "Creates new roles and their actions User defined roles allow users to define and manage app specific AuthZ policy."
  parameters:
  - description: "user defined role."
    name: "roles"
    type: "<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<Void> createUserDefinedRoleWithResponse(BinaryData roles, RequestOptions requestOptions)"
  desc: "Creates new roles and their actions User defined roles allow users to define and manage app specific AuthZ policy.\n\n**Request Body Schema**\n\n```java\n[\n      (Required){\n         roleName: String (Optional)\n         roleActions (Optional): [\n             String (Optional)\n         ]\n     }\n ]\n```"
  returns:
    description: "the <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Void.html\">Void</a>&gt;"
- uid: "com.azure.security.confidentialledger.ConfidentialLedgerClient.deleteLedgerUserWithResponse(java.lang.String,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.security.confidentialledger.ConfidentialLedgerClient.deleteLedgerUserWithResponse(String userId, RequestOptions requestOptions)"
  name: "deleteLedgerUserWithResponse(String userId, RequestOptions requestOptions)"
  nameWithType: "ConfidentialLedgerClient.deleteLedgerUserWithResponse(String userId, RequestOptions requestOptions)"
  summary: "Deletes a user with multiple roles from the Confidential Ledger."
  parameters:
  - description: "The user id, either an AAD object ID or certificate fingerprint."
    name: "userId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<Void> deleteLedgerUserWithResponse(String userId, RequestOptions requestOptions)"
  desc: "Deletes a user with multiple roles from the Confidential Ledger."
  returns:
    description: "the <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Void.html\">Void</a>&gt;"
- uid: "com.azure.security.confidentialledger.ConfidentialLedgerClient.deleteUserDefinedFunctionWithResponse(java.lang.String,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.security.confidentialledger.ConfidentialLedgerClient.deleteUserDefinedFunctionWithResponse(String functionId, RequestOptions requestOptions)"
  name: "deleteUserDefinedFunctionWithResponse(String functionId, RequestOptions requestOptions)"
  nameWithType: "ConfidentialLedgerClient.deleteUserDefinedFunctionWithResponse(String functionId, RequestOptions requestOptions)"
  summary: "Deletes a user defined function from the Confidential Ledger."
  parameters:
  - description: "Identifies a user defined function."
    name: "functionId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<Void> deleteUserDefinedFunctionWithResponse(String functionId, RequestOptions requestOptions)"
  desc: "Deletes a user defined function from the Confidential Ledger."
  returns:
    description: "the <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Void.html\">Void</a>&gt;"
- uid: "com.azure.security.confidentialledger.ConfidentialLedgerClient.deleteUserDefinedRoleWithResponse(java.lang.String,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.security.confidentialledger.ConfidentialLedgerClient.deleteUserDefinedRoleWithResponse(String roleName, RequestOptions requestOptions)"
  name: "deleteUserDefinedRoleWithResponse(String roleName, RequestOptions requestOptions)"
  nameWithType: "ConfidentialLedgerClient.deleteUserDefinedRoleWithResponse(String roleName, RequestOptions requestOptions)"
  summary: "Deletes user defined roles A user defined role allows the users to create and manage their own role actions using the API."
  parameters:
  - description: "user defined role name."
    name: "roleName"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<Void> deleteUserDefinedRoleWithResponse(String roleName, RequestOptions requestOptions)"
  desc: "Deletes user defined roles A user defined role allows the users to create and manage their own role actions using the API."
  returns:
    description: "the <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Void.html\">Void</a>&gt;"
- uid: "com.azure.security.confidentialledger.ConfidentialLedgerClient.deleteUserWithResponse(java.lang.String,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.security.confidentialledger.ConfidentialLedgerClient.deleteUserWithResponse(String userId, RequestOptions requestOptions)"
  name: "deleteUserWithResponse(String userId, RequestOptions requestOptions)"
  nameWithType: "ConfidentialLedgerClient.deleteUserWithResponse(String userId, RequestOptions requestOptions)"
  summary: "Deletes a user from the Confidential Ledger."
  parameters:
  - description: "The user id, either an AAD object ID or certificate fingerprint."
    name: "userId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<Void> deleteUserWithResponse(String userId, RequestOptions requestOptions)"
  desc: "Deletes a user from the Confidential Ledger."
  returns:
    description: "the <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Void.html\">Void</a>&gt;"
- uid: "com.azure.security.confidentialledger.ConfidentialLedgerClient.executeUserDefinedFunctionWithResponse(java.lang.String,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.security.confidentialledger.ConfidentialLedgerClient.executeUserDefinedFunctionWithResponse(String functionId, RequestOptions requestOptions)"
  name: "executeUserDefinedFunctionWithResponse(String functionId, RequestOptions requestOptions)"
  nameWithType: "ConfidentialLedgerClient.executeUserDefinedFunctionWithResponse(String functionId, RequestOptions requestOptions)"
  summary: "Executes a user defined function."
  parameters:
  - description: "Identifies a user defined function."
    name: "functionId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<BinaryData> executeUserDefinedFunctionWithResponse(String functionId, RequestOptions requestOptions)"
  desc: "Executes a user defined function. Executes the user defined function in the Confidential Ledger.\n\n**Header Parameters**\n\n    | ------------ | ------ | -------- | ----------------------------------------------------- |\n    | Name         | Type   | Required | Description                                           |\n    | Content-Type | String | No       | The content type. Allowed values: \"application/json\". |\n\nYou can add these to a request with <xref uid=\"com.azure.core.http.rest.RequestOptions.addHeader\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RequestOptions#addHeader\"></xref>\n\n**Request Body Schema**\n\n```java\n{\n     arguments (Optional): [\n         String (Optional)\n     ]\n     exportedFunctionName: String (Optional)\n     runtimeOptions (Optional): {\n         log_exception_details: Boolean (Optional)\n         max_cached_interpreters: Long (Optional)\n         max_execution_time_ms: Long (Optional)\n         max_heap_bytes: Long (Optional)\n         max_stack_bytes: Long (Optional)\n         return_exception_details: Boolean (Optional)\n     }\n }\n```\n\n**Response Body Schema**\n\n```java\n{\n     error (Optional): {\n         message: String (Optional)\n     }\n     result (Optional): {\n         returnValue: String (Optional)\n     }\n     status: String(Succeeded/Failed) (Required)\n }\n```"
  returns:
    description: "the result of a user defined function execution along with <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.security.confidentialledger.ConfidentialLedgerClient.getConstitutionWithResponse(com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.security.confidentialledger.ConfidentialLedgerClient.getConstitutionWithResponse(RequestOptions requestOptions)"
  name: "getConstitutionWithResponse(RequestOptions requestOptions)"
  nameWithType: "ConfidentialLedgerClient.getConstitutionWithResponse(RequestOptions requestOptions)"
  summary: "Gets the constitution used for governance."
  parameters:
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<BinaryData> getConstitutionWithResponse(RequestOptions requestOptions)"
  desc: "Gets the constitution used for governance. The constitution is a script that assesses and applies proposals from consortium members.\n\n**Response Body Schema**\n\n```java\n{\n     digest: String (Required)\n     script: String (Required)\n }\n```"
  returns:
    description: "the governance script for the application along with <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.security.confidentialledger.ConfidentialLedgerClient.getCurrentLedgerEntryWithResponse(com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.security.confidentialledger.ConfidentialLedgerClient.getCurrentLedgerEntryWithResponse(RequestOptions requestOptions)"
  name: "getCurrentLedgerEntryWithResponse(RequestOptions requestOptions)"
  nameWithType: "ConfidentialLedgerClient.getCurrentLedgerEntryWithResponse(RequestOptions requestOptions)"
  summary: "Gets the current value available in the ledger."
  parameters:
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<BinaryData> getCurrentLedgerEntryWithResponse(RequestOptions requestOptions)"
  desc: "Gets the current value available in the ledger. A collection id may optionally be specified.\n\n**Query Parameters**\n\n    | ------------ | ------ | -------- | ------------------ |\n    | Name         | Type   | Required | Description        |\n    | collectionId | String | No       | The collection id. |\n\nYou can add these to a request with <xref uid=\"com.azure.core.http.rest.RequestOptions.addQueryParam\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RequestOptions#addQueryParam\"></xref>\n\n**Response Body Schema**\n\n```java\n{\n     contents: String (Required)\n     collectionId: String (Optional)\n     transactionId: String (Optional)\n     preHooks (Optional): [\n          (Optional){\n             functionId: String (Required)\n             properties (Optional): {\n                 arguments (Optional): [\n                     String (Optional)\n                 ]\n                 exportedFunctionName: String (Optional)\n                 runtimeOptions (Optional): {\n                     log_exception_details: Boolean (Optional)\n                     max_cached_interpreters: Long (Optional)\n                     max_execution_time_ms: Long (Optional)\n                     max_heap_bytes: Long (Optional)\n                     max_stack_bytes: Long (Optional)\n                     return_exception_details: Boolean (Optional)\n                 }\n             }\n         }\n     ]\n     postHooks (Optional): [\n         (recursive schema, see above)\n     ]\n }\n```"
  returns:
    description: "an entry in the ledger along with <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.security.confidentialledger.ConfidentialLedgerClient.getEnclaveQuotesWithResponse(com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.security.confidentialledger.ConfidentialLedgerClient.getEnclaveQuotesWithResponse(RequestOptions requestOptions)"
  name: "getEnclaveQuotesWithResponse(RequestOptions requestOptions)"
  nameWithType: "ConfidentialLedgerClient.getEnclaveQuotesWithResponse(RequestOptions requestOptions)"
  summary: "Gets quotes for all nodes of the Confidential Ledger."
  parameters:
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<BinaryData> getEnclaveQuotesWithResponse(RequestOptions requestOptions)"
  desc: "Gets quotes for all nodes of the Confidential Ledger. A quote is an SGX enclave measurement that can be used to verify the validity of a node and its enclave.\n\n**Response Body Schema**\n\n```java\n{\n     currentNodeId: String (Required)\n     enclaveQuotes (Required): {\n         String (Required): {\n             nodeId: String (Required)\n             mrenclave: String (Optional)\n             quoteVersion: String (Required)\n             raw: String (Required)\n         }\n     }\n }\n```"
  returns:
    description: "information about the enclaves running the Confidential Ledger along with <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.security.confidentialledger.ConfidentialLedgerClient.getLedgerEntryWithResponse(java.lang.String,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.security.confidentialledger.ConfidentialLedgerClient.getLedgerEntryWithResponse(String transactionId, RequestOptions requestOptions)"
  name: "getLedgerEntryWithResponse(String transactionId, RequestOptions requestOptions)"
  nameWithType: "ConfidentialLedgerClient.getLedgerEntryWithResponse(String transactionId, RequestOptions requestOptions)"
  summary: "Gets the ledger entry at the specified transaction id."
  parameters:
  - description: "Identifies a write transaction."
    name: "transactionId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<BinaryData> getLedgerEntryWithResponse(String transactionId, RequestOptions requestOptions)"
  desc: "Gets the ledger entry at the specified transaction id. A collection id may optionally be specified to indicate the collection from which to fetch the value. To return older ledger entries, the relevant sections of the ledger must be read from disk and validated. To prevent blocking within the enclave, the response will indicate whether the entry is ready and part of the response, or if the loading is still ongoing.\n\n**Query Parameters**\n\n    | ------------ | ------ | -------- | ------------------ |\n    | Name         | Type   | Required | Description        |\n    | collectionId | String | No       | The collection id. |\n\nYou can add these to a request with <xref uid=\"com.azure.core.http.rest.RequestOptions.addQueryParam\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RequestOptions#addQueryParam\"></xref>\n\n**Response Body Schema**\n\n```java\n{\n     state: String(Loading/Ready) (Required)\n     entry (Optional): {\n         contents: String (Required)\n         collectionId: String (Optional)\n         transactionId: String (Optional)\n         preHooks (Optional): [\n              (Optional){\n                 functionId: String (Required)\n                 properties (Optional): {\n                     arguments (Optional): [\n                         String (Optional)\n                     ]\n                     exportedFunctionName: String (Optional)\n                     runtimeOptions (Optional): {\n                         log_exception_details: Boolean (Optional)\n                         max_cached_interpreters: Long (Optional)\n                         max_execution_time_ms: Long (Optional)\n                         max_heap_bytes: Long (Optional)\n                         max_stack_bytes: Long (Optional)\n                         return_exception_details: Boolean (Optional)\n                     }\n                 }\n             }\n         ]\n         postHooks (Optional): [\n             (recursive schema, see above)\n         ]\n     }\n }\n```"
  returns:
    description: "the result of querying for a ledger entry from an older transaction id along with <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.security.confidentialledger.ConfidentialLedgerClient.getLedgerUserWithResponse(java.lang.String,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.security.confidentialledger.ConfidentialLedgerClient.getLedgerUserWithResponse(String userId, RequestOptions requestOptions)"
  name: "getLedgerUserWithResponse(String userId, RequestOptions requestOptions)"
  nameWithType: "ConfidentialLedgerClient.getLedgerUserWithResponse(String userId, RequestOptions requestOptions)"
  summary: "Gets a user with multiple roles."
  parameters:
  - description: "The user id, either an AAD object ID or certificate fingerprint."
    name: "userId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<BinaryData> getLedgerUserWithResponse(String userId, RequestOptions requestOptions)"
  desc: "Gets a user with multiple roles.\n\n**Response Body Schema**\n\n```java\n{\n     assignedRoles (Required): [\n         String(Administrator/Contributor/Reader) (Required)\n     ]\n     userId: String (Optional)\n }\n```"
  returns:
    description: "a user with multiple roles along with <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.security.confidentialledger.ConfidentialLedgerClient.getReceiptWithResponse(java.lang.String,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.security.confidentialledger.ConfidentialLedgerClient.getReceiptWithResponse(String transactionId, RequestOptions requestOptions)"
  name: "getReceiptWithResponse(String transactionId, RequestOptions requestOptions)"
  nameWithType: "ConfidentialLedgerClient.getReceiptWithResponse(String transactionId, RequestOptions requestOptions)"
  summary: "Gets a receipt certifying ledger contents at a particular transaction id."
  parameters:
  - description: "Identifies a write transaction."
    name: "transactionId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<BinaryData> getReceiptWithResponse(String transactionId, RequestOptions requestOptions)"
  desc: "Gets a receipt certifying ledger contents at a particular transaction id.\n\n**Response Body Schema**\n\n```java\n{\n     applicationClaims (Optional): [\n          (Optional){\n             digest (Optional): {\n                 value: String (Optional)\n                 protocol: String(LedgerEntryV1) (Required)\n             }\n             kind: String(LedgerEntry/ClaimDigest) (Required)\n             ledgerEntry (Optional): {\n                 collectionId: String (Optional)\n                 contents: String (Optional)\n                 secretKey: String (Optional)\n                 protocol: String(LedgerEntryV1) (Required)\n             }\n         }\n     ]\n     receipt (Optional): {\n         cert: String (Optional)\n         leaf: String (Optional)\n         leafComponents (Optional): {\n             claimsDigest: String (Optional)\n             commitEvidence: String (Optional)\n             writeSetDigest: String (Optional)\n         }\n         nodeId: String (Required)\n         proof (Required): [\n              (Required){\n                 left: String (Optional)\n                 right: String (Optional)\n             }\n         ]\n         root: String (Optional)\n         serviceEndorsements (Optional): [\n             String (Optional)\n         ]\n         signature: String (Required)\n     }\n     state: String(Loading/Ready) (Required)\n     transactionId: String (Required)\n }\n```"
  returns:
    description: "a receipt certifying ledger contents at a particular transaction id along with <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.security.confidentialledger.ConfidentialLedgerClient.getRuntimeOptionsWithResponse(com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.security.confidentialledger.ConfidentialLedgerClient.getRuntimeOptionsWithResponse(RequestOptions requestOptions)"
  name: "getRuntimeOptionsWithResponse(RequestOptions requestOptions)"
  nameWithType: "ConfidentialLedgerClient.getRuntimeOptionsWithResponse(RequestOptions requestOptions)"
  summary: "Runtime options for user defined endpoints."
  parameters:
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<BinaryData> getRuntimeOptionsWithResponse(RequestOptions requestOptions)"
  desc: "Runtime options for user defined endpoints. It returns the runtime options.\n\n**Response Body Schema**\n\n```java\n{\n     log_exception_details: Boolean (Optional)\n     max_cached_interpreters: Long (Optional)\n     max_execution_time_ms: Long (Optional)\n     max_heap_bytes: Long (Optional)\n     max_stack_bytes: Long (Optional)\n     return_exception_details: Boolean (Optional)\n }\n```"
  returns:
    description: "jS runtime options for user defined endpoints and functions along with <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.security.confidentialledger.ConfidentialLedgerClient.getTransactionStatusWithResponse(java.lang.String,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.security.confidentialledger.ConfidentialLedgerClient.getTransactionStatusWithResponse(String transactionId, RequestOptions requestOptions)"
  name: "getTransactionStatusWithResponse(String transactionId, RequestOptions requestOptions)"
  nameWithType: "ConfidentialLedgerClient.getTransactionStatusWithResponse(String transactionId, RequestOptions requestOptions)"
  summary: "Gets the status of an entry identified by a transaction id."
  parameters:
  - description: "Identifies a write transaction."
    name: "transactionId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<BinaryData> getTransactionStatusWithResponse(String transactionId, RequestOptions requestOptions)"
  desc: "Gets the status of an entry identified by a transaction id.\n\n**Response Body Schema**\n\n```java\n{\n     state: String(Committed/Pending) (Required)\n     transactionId: String (Required)\n }\n```"
  returns:
    description: "the status of an entry identified by a transaction id along with <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.security.confidentialledger.ConfidentialLedgerClient.getUserDefinedEndpointsModuleWithResponse(java.lang.String,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.security.confidentialledger.ConfidentialLedgerClient.getUserDefinedEndpointsModuleWithResponse(String moduleName, RequestOptions requestOptions)"
  name: "getUserDefinedEndpointsModuleWithResponse(String moduleName, RequestOptions requestOptions)"
  nameWithType: "ConfidentialLedgerClient.getUserDefinedEndpointsModuleWithResponse(String moduleName, RequestOptions requestOptions)"
  summary: "Module for user defined endpoints."
  parameters:
  - description: "module name of the user defined endpoint."
    name: "moduleName"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<BinaryData> getUserDefinedEndpointsModuleWithResponse(String moduleName, RequestOptions requestOptions)"
  desc: "Module for user defined endpoints. It gets the module for the user defined endpoint.\n\n**Response Body Schema**\n\n```java\n{\n     module: String (Required)\n     name: String (Required)\n }\n```"
  returns:
    description: "the response body along with <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.security.confidentialledger.ConfidentialLedgerClient.getUserDefinedEndpointWithResponse(com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.security.confidentialledger.ConfidentialLedgerClient.getUserDefinedEndpointWithResponse(RequestOptions requestOptions)"
  name: "getUserDefinedEndpointWithResponse(RequestOptions requestOptions)"
  nameWithType: "ConfidentialLedgerClient.getUserDefinedEndpointWithResponse(RequestOptions requestOptions)"
  summary: "Gets a user defined endpoint."
  parameters:
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<BinaryData> getUserDefinedEndpointWithResponse(RequestOptions requestOptions)"
  desc: "Gets a user defined endpoint. Returns the user defined endpoint in the ACL instance.\n\n**Response Body Schema**\n\n```java\n{\n     metadata (Required): {\n         endpoints (Required): {\n             String (Required): {\n                 get (Optional): {\n                     authn_policies (Required): [\n                         Object (Required)\n                     ]\n                     forwarding_required: String(sometimes/always/never) (Required)\n                     interpreter_reuse (Optional): {\n                         key: String (Required)\n                     }\n                     js_function: String (Optional)\n                     js_module: String (Optional)\n                     mode: String(readwrite/readonly/historical) (Optional)\n                     openapi: Object (Optional)\n                     openapi_hidden: Boolean (Optional)\n                     redirection_strategy: String(none/to_primary/to_backup) (Optional)\n                 }\n                 put (Optional): (recursive schema, see put above)\n                 patch (Optional): (recursive schema, see patch above)\n                 delete (Optional): (recursive schema, see delete above)\n             }\n         }\n     }\n     modules: Object (Required)\n }\n```"
  returns:
    description: "bundle for the user defined endpoints along with <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.security.confidentialledger.ConfidentialLedgerClient.getUserDefinedFunctionWithResponse(java.lang.String,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.security.confidentialledger.ConfidentialLedgerClient.getUserDefinedFunctionWithResponse(String functionId, RequestOptions requestOptions)"
  name: "getUserDefinedFunctionWithResponse(String functionId, RequestOptions requestOptions)"
  nameWithType: "ConfidentialLedgerClient.getUserDefinedFunctionWithResponse(String functionId, RequestOptions requestOptions)"
  summary: "Gets a user defined function."
  parameters:
  - description: "Identifies a user defined function."
    name: "functionId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<BinaryData> getUserDefinedFunctionWithResponse(String functionId, RequestOptions requestOptions)"
  desc: "Gets a user defined function. Returns the user defined function in the Confidential Ledger.\n\n**Response Body Schema**\n\n```java\n{\n     code: String (Required)\n     id: String (Optional)\n }\n```"
  returns:
    description: "a user defined function in the ledger along with <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.security.confidentialledger.ConfidentialLedgerClient.getUserDefinedRoleWithResponse(java.lang.String,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.security.confidentialledger.ConfidentialLedgerClient.getUserDefinedRoleWithResponse(String roleName, RequestOptions requestOptions)"
  name: "getUserDefinedRoleWithResponse(String roleName, RequestOptions requestOptions)"
  nameWithType: "ConfidentialLedgerClient.getUserDefinedRoleWithResponse(String roleName, RequestOptions requestOptions)"
  summary: "Gets role actions for user defined roles user defined roles allow users to define and manage app specific AuthZ policy."
  parameters:
  - description: "user defined role name."
    name: "roleName"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<BinaryData> getUserDefinedRoleWithResponse(String roleName, RequestOptions requestOptions)"
  desc: "Gets role actions for user defined roles user defined roles allow users to define and manage app specific AuthZ policy.\n\n**Response Body Schema**\n\n```java\n[\n      (Required){\n         roleName: String (Optional)\n         roleActions (Optional): [\n             String (Optional)\n         ]\n     }\n ]\n```"
  returns:
    description: "definition for roles along with <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.security.confidentialledger.ConfidentialLedgerClient.getUserWithResponse(java.lang.String,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.security.confidentialledger.ConfidentialLedgerClient.getUserWithResponse(String userId, RequestOptions requestOptions)"
  name: "getUserWithResponse(String userId, RequestOptions requestOptions)"
  nameWithType: "ConfidentialLedgerClient.getUserWithResponse(String userId, RequestOptions requestOptions)"
  summary: "Gets a user."
  parameters:
  - description: "The user id, either an AAD object ID or certificate fingerprint."
    name: "userId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<BinaryData> getUserWithResponse(String userId, RequestOptions requestOptions)"
  desc: "Gets a user.\n\n**Response Body Schema**\n\n```java\n{\n     assignedRole: String(Administrator/Contributor/Reader) (Required)\n     userId: String (Optional)\n }\n```"
  returns:
    description: "a user along with <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.security.confidentialledger.ConfidentialLedgerClient.listCollections(com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.security.confidentialledger.ConfidentialLedgerClient.listCollections(RequestOptions requestOptions)"
  name: "listCollections(RequestOptions requestOptions)"
  nameWithType: "ConfidentialLedgerClient.listCollections(RequestOptions requestOptions)"
  summary: "Retrieves a list of collection ids present in the Confidential Ledger Collection ids are user-created collections of ledger entries."
  parameters:
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PagedIterable<BinaryData> listCollections(RequestOptions requestOptions)"
  desc: "Retrieves a list of collection ids present in the Confidential Ledger Collection ids are user-created collections of ledger entries.\n\n**Response Body Schema**\n\n```java\n{\n     collectionId: String (Required)\n }\n```"
  returns:
    description: "paginated collections returned in response to a query as paginated response with <xref uid=\"com.azure.core.http.rest.PagedIterable\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedIterable\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.PagedIterable?alt=com.azure.core.http.rest.PagedIterable&text=PagedIterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.security.confidentialledger.ConfidentialLedgerClient.listConsortiumMembers(com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.security.confidentialledger.ConfidentialLedgerClient.listConsortiumMembers(RequestOptions requestOptions)"
  name: "listConsortiumMembers(RequestOptions requestOptions)"
  nameWithType: "ConfidentialLedgerClient.listConsortiumMembers(RequestOptions requestOptions)"
  summary: "Lists the consortium members."
  parameters:
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PagedIterable<BinaryData> listConsortiumMembers(RequestOptions requestOptions)"
  desc: "Lists the consortium members. Consortium members can manage the Confidential Ledger.\n\n**Response Body Schema**\n\n```java\n{\n     certificate: String (Required)\n     id: String (Required)\n }\n```"
  returns:
    description: "list of members in the consortium as paginated response with <xref uid=\"com.azure.core.http.rest.PagedIterable\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedIterable\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.PagedIterable?alt=com.azure.core.http.rest.PagedIterable&text=PagedIterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.security.confidentialledger.ConfidentialLedgerClient.listLedgerEntries(com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.security.confidentialledger.ConfidentialLedgerClient.listLedgerEntries(RequestOptions requestOptions)"
  name: "listLedgerEntries(RequestOptions requestOptions)"
  nameWithType: "ConfidentialLedgerClient.listLedgerEntries(RequestOptions requestOptions)"
  summary: "Gets ledger entries from a collection corresponding to a range."
  parameters:
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PagedIterable<BinaryData> listLedgerEntries(RequestOptions requestOptions)"
  desc: "Gets ledger entries from a collection corresponding to a range. A collection id may optionally be specified. Only entries in the specified (or default) collection will be returned.\n\n**Query Parameters**\n\n    | ----------------- | ------ | -------- | -------------------------------------------- |\n    | Name              | Type   | Required | Description                                  |\n    | collectionId      | String | No       | The collection id.                           |\n    | fromTransactionId | String | No       | Specify the first transaction ID in a range. |\n    | toTransactionId   | String | No       | Specify the last transaction ID in a range.  |\n    | tag               | String | No       | Single tag.                                  |\n\nYou can add these to a request with <xref uid=\"com.azure.core.http.rest.RequestOptions.addQueryParam\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RequestOptions#addQueryParam\"></xref>\n\n**Response Body Schema**\n\n```java\n{\n     contents: String (Required)\n     collectionId: String (Optional)\n     transactionId: String (Optional)\n     preHooks (Optional): [\n          (Optional){\n             functionId: String (Required)\n             properties (Optional): {\n                 arguments (Optional): [\n                     String (Optional)\n                 ]\n                 exportedFunctionName: String (Optional)\n                 runtimeOptions (Optional): {\n                     log_exception_details: Boolean (Optional)\n                     max_cached_interpreters: Long (Optional)\n                     max_execution_time_ms: Long (Optional)\n                     max_heap_bytes: Long (Optional)\n                     max_stack_bytes: Long (Optional)\n                     return_exception_details: Boolean (Optional)\n                 }\n             }\n         }\n     ]\n     postHooks (Optional): [\n         (recursive schema, see above)\n     ]\n }\n```"
  returns:
    description: "paginated ledger entries returned in response to a query as paginated response with\n <xref uid=\"com.azure.core.http.rest.PagedIterable\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedIterable\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.PagedIterable?alt=com.azure.core.http.rest.PagedIterable&text=PagedIterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.security.confidentialledger.ConfidentialLedgerClient.listLedgerUsers(com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.security.confidentialledger.ConfidentialLedgerClient.listLedgerUsers(RequestOptions requestOptions)"
  name: "listLedgerUsers(RequestOptions requestOptions)"
  nameWithType: "ConfidentialLedgerClient.listLedgerUsers(RequestOptions requestOptions)"
  summary: "Gets details on a list of users."
  parameters:
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PagedIterable<BinaryData> listLedgerUsers(RequestOptions requestOptions)"
  desc: "Gets details on a list of users. All users' object IDs and multiple roles will be returned.\n\n**Response Body Schema**\n\n```java\n{\n     assignedRoles (Required): [\n         String(Administrator/Contributor/Reader) (Required)\n     ]\n     userId: String (Optional)\n }\n```"
  returns:
    description: "paginated users returned in response to a query as paginated response with <xref uid=\"com.azure.core.http.rest.PagedIterable\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedIterable\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.PagedIterable?alt=com.azure.core.http.rest.PagedIterable&text=PagedIterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.security.confidentialledger.ConfidentialLedgerClient.listUserDefinedFunctions(com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.security.confidentialledger.ConfidentialLedgerClient.listUserDefinedFunctions(RequestOptions requestOptions)"
  name: "listUserDefinedFunctions(RequestOptions requestOptions)"
  nameWithType: "ConfidentialLedgerClient.listUserDefinedFunctions(RequestOptions requestOptions)"
  summary: "Retrieves a list of user defined functions present in the Confidential Ledger User defined functions stored in the Confidential Ledger."
  parameters:
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PagedIterable<BinaryData> listUserDefinedFunctions(RequestOptions requestOptions)"
  desc: "Retrieves a list of user defined functions present in the Confidential Ledger User defined functions stored in the Confidential Ledger.\n\n**Response Body Schema**\n\n```java\n{\n     code: String (Required)\n     id: String (Optional)\n }\n```"
  returns:
    description: "paginated user defined functions returned in response to a query as paginated response with\n <xref uid=\"com.azure.core.http.rest.PagedIterable\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedIterable\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.PagedIterable?alt=com.azure.core.http.rest.PagedIterable&text=PagedIterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.security.confidentialledger.ConfidentialLedgerClient.listUsers(com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.security.confidentialledger.ConfidentialLedgerClient.listUsers(RequestOptions requestOptions)"
  name: "listUsers(RequestOptions requestOptions)"
  nameWithType: "ConfidentialLedgerClient.listUsers(RequestOptions requestOptions)"
  summary: "Gets details on a list of users."
  parameters:
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PagedIterable<BinaryData> listUsers(RequestOptions requestOptions)"
  desc: "Gets details on a list of users. All users' object IDs and single role per user will be returned.\n\n**Response Body Schema**\n\n```java\n{\n     assignedRole: String(Administrator/Contributor/Reader) (Required)\n     userId: String (Optional)\n }\n```"
  returns:
    description: "paginated users returned in response to a query as paginated response with <xref uid=\"com.azure.core.http.rest.PagedIterable\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedIterable\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.PagedIterable?alt=com.azure.core.http.rest.PagedIterable&text=PagedIterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.security.confidentialledger.ConfidentialLedgerClient.updateRuntimeOptionsWithResponse(com.azure.core.util.BinaryData,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.security.confidentialledger.ConfidentialLedgerClient.updateRuntimeOptionsWithResponse(BinaryData jSRuntimeOptions, RequestOptions requestOptions)"
  name: "updateRuntimeOptionsWithResponse(BinaryData jSRuntimeOptions, RequestOptions requestOptions)"
  nameWithType: "ConfidentialLedgerClient.updateRuntimeOptionsWithResponse(BinaryData jSRuntimeOptions, RequestOptions requestOptions)"
  summary: "Runtime options for user defined endpoints."
  parameters:
  - description: "JS runtime options."
    name: "jSRuntimeOptions"
    type: "<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<BinaryData> updateRuntimeOptionsWithResponse(BinaryData jSRuntimeOptions, RequestOptions requestOptions)"
  desc: "Runtime options for user defined endpoints. Updates the runtime options.\n\n**Request Body Schema**\n\n```java\n{\n     log_exception_details: Boolean (Optional)\n     max_cached_interpreters: Long (Optional)\n     max_execution_time_ms: Long (Optional)\n     max_heap_bytes: Long (Optional)\n     max_stack_bytes: Long (Optional)\n     return_exception_details: Boolean (Optional)\n }\n```\n\n**Response Body Schema**\n\n```java\n{\n     log_exception_details: Boolean (Optional)\n     max_cached_interpreters: Long (Optional)\n     max_execution_time_ms: Long (Optional)\n     max_heap_bytes: Long (Optional)\n     max_stack_bytes: Long (Optional)\n     return_exception_details: Boolean (Optional)\n }\n```"
  returns:
    description: "jS runtime options for user defined endpoints and functions along with <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.security.confidentialledger.ConfidentialLedgerClient.updateUserDefinedRoleWithResponse(com.azure.core.util.BinaryData,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.security.confidentialledger.ConfidentialLedgerClient.updateUserDefinedRoleWithResponse(BinaryData roles, RequestOptions requestOptions)"
  name: "updateUserDefinedRoleWithResponse(BinaryData roles, RequestOptions requestOptions)"
  nameWithType: "ConfidentialLedgerClient.updateUserDefinedRoleWithResponse(BinaryData roles, RequestOptions requestOptions)"
  summary: "Patch replaces the allowed action on existing roles,if the desire is to remove an existing action, the role must be deleted and recreated."
  parameters:
  - description: "user defined role."
    name: "roles"
    type: "<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<Void> updateUserDefinedRoleWithResponse(BinaryData roles, RequestOptions requestOptions)"
  desc: "Patch replaces the allowed action on existing roles,if the desire is to remove an existing action, the role must be deleted and recreated. User defined roles allow users to define and manage app specific AuthZ policy.\n\n**Request Body Schema**\n\n```java\n[\n      (Required){\n         roleName: String (Optional)\n         roleActions (Optional): [\n             String (Optional)\n         ]\n     }\n ]\n```"
  returns:
    description: "the <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Void.html\">Void</a>&gt;"
type: "class"
desc: "Initializes a new instance of the synchronous ConfidentialLedgerClient type."
metadata: {}
package: "com.azure.security.confidentialledger"
artifact: com.azure:azure-security-confidentialledger:1.1.0-beta.1
