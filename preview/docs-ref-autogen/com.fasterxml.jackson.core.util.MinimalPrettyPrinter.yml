### YamlMime:JavaType
uid: "com.fasterxml.jackson.core.util.MinimalPrettyPrinter"
fullName: "com.fasterxml.jackson.core.util.MinimalPrettyPrinter"
name: "MinimalPrettyPrinter"
nameWithType: "MinimalPrettyPrinter"
summary: "<xref uid=\"com.fasterxml.jackson.core.PrettyPrinter\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PrettyPrinter\"></xref> implementation that adds no indentation, just implements everything necessary for value output to work as expected, and provide simpler extension points to allow for creating simple custom implementations that add specific decoration or overrides. Since behavior then is very similar to using no pretty printer at all, usually sub-classes are used.\n\nBeyond purely minimal implementation, there is limited amount of configurability which may be useful for actual use: for example, it is possible to redefine separator used between root-level values (default is single space; can be changed to line-feed).\n\nNote: does NOT implement <xref uid=\"com.fasterxml.jackson.core.util.Instantiatable\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Instantiatable\"></xref> since this is a stateless implementation; that is, a single instance can be shared between threads."
inheritances:
- "<xref href=\"java.lang.Object\" data-throw-if-not-resolved=\"False\" />"
inheritedMembers:
- "java.lang.Object.clone()"
- "java.lang.Object.equals(java.lang.Object)"
- "java.lang.Object.finalize()"
- "java.lang.Object.getClass()"
- "java.lang.Object.hashCode()"
- "java.lang.Object.notify()"
- "java.lang.Object.notifyAll()"
- "java.lang.Object.toString()"
- "java.lang.Object.wait()"
- "java.lang.Object.wait(long)"
- "java.lang.Object.wait(long,int)"
syntax: "public class MinimalPrettyPrinter implements PrettyPrinter, Serializable"
constructors:
- "com.fasterxml.jackson.core.util.MinimalPrettyPrinter.MinimalPrettyPrinter()"
- "com.fasterxml.jackson.core.util.MinimalPrettyPrinter.MinimalPrettyPrinter(java.lang.String)"
fields:
- "com.fasterxml.jackson.core.util.MinimalPrettyPrinter._rootValueSeparator"
- "com.fasterxml.jackson.core.util.MinimalPrettyPrinter._separators"
methods:
- "com.fasterxml.jackson.core.util.MinimalPrettyPrinter.beforeArrayValues(com.fasterxml.jackson.core.JsonGenerator)"
- "com.fasterxml.jackson.core.util.MinimalPrettyPrinter.beforeObjectEntries(com.fasterxml.jackson.core.JsonGenerator)"
- "com.fasterxml.jackson.core.util.MinimalPrettyPrinter.setRootValueSeparator(java.lang.String)"
- "com.fasterxml.jackson.core.util.MinimalPrettyPrinter.setSeparators(com.fasterxml.jackson.core.util.Separators)"
- "com.fasterxml.jackson.core.util.MinimalPrettyPrinter.writeArrayValueSeparator(com.fasterxml.jackson.core.JsonGenerator)"
- "com.fasterxml.jackson.core.util.MinimalPrettyPrinter.writeEndArray(com.fasterxml.jackson.core.JsonGenerator,int)"
- "com.fasterxml.jackson.core.util.MinimalPrettyPrinter.writeEndObject(com.fasterxml.jackson.core.JsonGenerator,int)"
- "com.fasterxml.jackson.core.util.MinimalPrettyPrinter.writeObjectEntrySeparator(com.fasterxml.jackson.core.JsonGenerator)"
- "com.fasterxml.jackson.core.util.MinimalPrettyPrinter.writeObjectFieldValueSeparator(com.fasterxml.jackson.core.JsonGenerator)"
- "com.fasterxml.jackson.core.util.MinimalPrettyPrinter.writeRootValueSeparator(com.fasterxml.jackson.core.JsonGenerator)"
- "com.fasterxml.jackson.core.util.MinimalPrettyPrinter.writeStartArray(com.fasterxml.jackson.core.JsonGenerator)"
- "com.fasterxml.jackson.core.util.MinimalPrettyPrinter.writeStartObject(com.fasterxml.jackson.core.JsonGenerator)"
type: "class"
implements:
- "<xref href=\"com.fasterxml.jackson.core.PrettyPrinter?alt=com.fasterxml.jackson.core.PrettyPrinter&text=PrettyPrinter\" data-throw-if-not-resolved=\"False\" />"
- "<xref href=\"java.io.Serializable?alt=java.io.Serializable&text=Serializable\" data-throw-if-not-resolved=\"False\" />"
metadata: {}
package: "com.fasterxml.jackson.core.util"
artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
