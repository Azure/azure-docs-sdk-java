### YamlMime:JavaMember
uid: "com.azure.storage.file.datalake.DataLakeServiceClient.createFileSystem*"
fullName: "com.azure.storage.file.datalake.DataLakeServiceClient.createFileSystem"
name: "createFileSystem"
nameWithType: "DataLakeServiceClient.createFileSystem"
members:
- uid: "com.azure.storage.file.datalake.DataLakeServiceClient.createFileSystem(java.lang.String)"
  fullName: "com.azure.storage.file.datalake.DataLakeServiceClient.createFileSystem(String fileSystemName)"
  name: "createFileSystem(String fileSystemName)"
  nameWithType: "DataLakeServiceClient.createFileSystem(String fileSystemName)"
  summary: "Creates a new file system within a storage account. If a file system with the same name already exists, the operation fails. For more information, see the [Azure Docs][].\n\n**Code Samples**\n\n```java\nDataLakeFileSystemClient dataLakeFileSystemClient = client.createFileSystem(\"fileSystemName\");\n```\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/create-container"
  parameters:
  - description: "Name of the file system to create"
    name: "fileSystemName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public DataLakeFileSystemClient createFileSystem(String fileSystemName)"
  returns:
    description: "The <xref uid=\"com.azure.storage.file.datalake.DataLakeFileSystemClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DataLakeFileSystemClient\"></xref> used to interact with the file system created."
    type: "<xref href=\"com.azure.storage.file.datalake.DataLakeFileSystemClient?alt=com.azure.storage.file.datalake.DataLakeFileSystemClient&text=DataLakeFileSystemClient\" data-throw-if-not-resolved=\"False\" />"
type: "method"
metadata: {}
package: "com.azure.storage.file.datalake"
artifact: com.azure:azure-storage-file-datalake:12.3.0-beta.1
