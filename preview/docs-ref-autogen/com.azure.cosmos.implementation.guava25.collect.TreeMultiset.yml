### YamlMime:ManagedReference
items:
- uid: com.azure.cosmos.implementation.guava25.collect.TreeMultiset
  id: TreeMultiset
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect
  children:
  - com.azure.cosmos.implementation.guava25.collect.TreeMultiset.<E>create()
  - com.azure.cosmos.implementation.guava25.collect.TreeMultiset.<E>create(java.lang.Iterable<? extends E>)
  - com.azure.cosmos.implementation.guava25.collect.TreeMultiset.<E>create(java.util.Comparator<? super E>)
  - com.azure.cosmos.implementation.guava25.collect.TreeMultiset.add(E,int)
  - com.azure.cosmos.implementation.guava25.collect.TreeMultiset.clear()
  - com.azure.cosmos.implementation.guava25.collect.TreeMultiset.count(java.lang.Object)
  - com.azure.cosmos.implementation.guava25.collect.TreeMultiset.forEachEntry(java.util.function.ObjIntConsumer<? super E>)
  - com.azure.cosmos.implementation.guava25.collect.TreeMultiset.headMultiset(E,com.azure.cosmos.implementation.guava25.collect.BoundType)
  - com.azure.cosmos.implementation.guava25.collect.TreeMultiset.iterator()
  - com.azure.cosmos.implementation.guava25.collect.TreeMultiset.remove(java.lang.Object,int)
  - com.azure.cosmos.implementation.guava25.collect.TreeMultiset.setCount(E,int)
  - com.azure.cosmos.implementation.guava25.collect.TreeMultiset.setCount(E,int,int)
  - com.azure.cosmos.implementation.guava25.collect.TreeMultiset.size()
  - com.azure.cosmos.implementation.guava25.collect.TreeMultiset.tailMultiset(E,com.azure.cosmos.implementation.guava25.collect.BoundType)
  langs:
  - java
  name: TreeMultiset<E>
  nameWithType: TreeMultiset<E>
  fullName: com.azure.cosmos.implementation.guava25.collect.TreeMultiset<E>
  type: Class
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    A multiset which maintains the ordering of its elements, according to either their natural order or an explicit <xref uid="java.util.Comparator" data-throw-if-not-resolved="false">Comparator</xref>. In all cases, this implementation uses <xref uid="java.lang.Comparable.compareTo" data-throw-if-not-resolved="false">Comparable#compareTo</xref> or <xref uid="java.util.Comparator.compare" data-throw-if-not-resolved="false">Comparator#compare</xref> instead of <xref uid="java.lang.Object.equals" data-throw-if-not-resolved="false">Object#equals</xref> to determine equivalence of instances.


    **Warning:** The comparison must be *consistent with equals* as explained by the <xref uid="java.lang.Comparable" data-throw-if-not-resolved="false">Comparable</xref> class specification. Otherwise, the resulting multiset will violate the <xref uid="java.util.Collection" data-throw-if-not-resolved="false">java.util.Collection</xref> contract, which is specified in terms of <xref uid="java.lang.Object.equals" data-throw-if-not-resolved="false">Object#equals</xref>.


    See the Guava User Guide article on [ `Multiset`][_Multiset].



    [_Multiset]: https://github.com/google/guava/wiki/NewCollectionTypesExplained#multiset
  syntax:
    content: public final class TreeMultiset<E> extends AbstractSortedMultiset<E> implements Serializable
    typeParameters:
    - id: E
  inheritance:
  - java.lang.Object
  - java.util.AbstractCollection
  - com.azure.cosmos.implementation.guava25.collect.AbstractMultiset
  - com.azure.cosmos.implementation.guava25.collect.AbstractSortedMultiset
  implements:
  - java.io.Serializable
  inheritedMembers:
  - com.azure.cosmos.implementation.guava25.collect.AbstractMultiset.add(E)
  - com.azure.cosmos.implementation.guava25.collect.AbstractMultiset.add(E,int)
  - com.azure.cosmos.implementation.guava25.collect.AbstractMultiset.addAll(java.util.Collection<? extends E>)
  - com.azure.cosmos.implementation.guava25.collect.AbstractMultiset.clear()
  - com.azure.cosmos.implementation.guava25.collect.AbstractMultiset.contains(java.lang.Object)
  - com.azure.cosmos.implementation.guava25.collect.AbstractMultiset.entrySet()
  - com.azure.cosmos.implementation.guava25.collect.AbstractMultiset.equals(java.lang.Object)
  - com.azure.cosmos.implementation.guava25.collect.AbstractMultiset.hashCode()
  - com.azure.cosmos.implementation.guava25.collect.AbstractMultiset.isEmpty()
  - com.azure.cosmos.implementation.guava25.collect.AbstractMultiset.remove(java.lang.Object)
  - com.azure.cosmos.implementation.guava25.collect.AbstractMultiset.remove(java.lang.Object,int)
  - com.azure.cosmos.implementation.guava25.collect.AbstractMultiset.removeAll(java.util.Collection<?>)
  - com.azure.cosmos.implementation.guava25.collect.AbstractMultiset.retainAll(java.util.Collection<?>)
  - com.azure.cosmos.implementation.guava25.collect.AbstractMultiset.setCount(E,int)
  - com.azure.cosmos.implementation.guava25.collect.AbstractMultiset.setCount(E,int,int)
  - com.azure.cosmos.implementation.guava25.collect.AbstractMultiset.toString()
  - com.azure.cosmos.implementation.guava25.collect.AbstractSortedMultiset.comparator()
  - com.azure.cosmos.implementation.guava25.collect.AbstractSortedMultiset.descendingMultiset()
  - com.azure.cosmos.implementation.guava25.collect.AbstractSortedMultiset.elementSet()
  - com.azure.cosmos.implementation.guava25.collect.AbstractSortedMultiset.firstEntry()
  - com.azure.cosmos.implementation.guava25.collect.AbstractSortedMultiset.lastEntry()
  - com.azure.cosmos.implementation.guava25.collect.AbstractSortedMultiset.pollFirstEntry()
  - com.azure.cosmos.implementation.guava25.collect.AbstractSortedMultiset.pollLastEntry()
  - com.azure.cosmos.implementation.guava25.collect.AbstractSortedMultiset.subMultiset(E,com.azure.cosmos.implementation.guava25.collect.BoundType,E,com.azure.cosmos.implementation.guava25.collect.BoundType)
  - java.lang.Object.clone()
  - java.lang.Object.finalize()
  - java.lang.Object.getClass()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
  - java.util.AbstractCollection.<T>toArray(T[])
  - java.util.AbstractCollection.containsAll(java.util.Collection<?>)
  - java.util.AbstractCollection.iterator()
  - java.util.AbstractCollection.size()
  - java.util.AbstractCollection.toArray()
- uid: com.azure.cosmos.implementation.guava25.collect.TreeMultiset.<E>create()
  id: <E>create()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.TreeMultiset
  langs:
  - java
  name: <E>create()
  nameWithType: TreeMultiset<E>.<E>create()
  fullName: com.azure.cosmos.implementation.guava25.collect.TreeMultiset<E>.<E>create()
  overload: com.azure.cosmos.implementation.guava25.collect.TreeMultiset.create*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Creates a new, empty multiset, sorted according to the elements' natural order. All elements inserted into the multiset must implement the `Comparable` interface. Furthermore, all such elements must be *mutually comparable*: `e1.compareTo(e2)` must not throw a `ClassCastException` for any elements `e1` and `e2` in the multiset. If the user attempts to add an element to the multiset that violates this constraint (for example, the user attempts to add a string element to a set whose elements are integers), the `add(Object)` call will throw a `ClassCastException`.


    The type specification is ``, instead of the more specific `>`, to support classes defined without generics.
  syntax:
    content: public static TreeMultiset<E> <E>create()
    return:
      type: com.azure.cosmos.implementation.guava25.collect.TreeMultiset<E>
- uid: com.azure.cosmos.implementation.guava25.collect.TreeMultiset.<E>create(java.lang.Iterable<? extends E>)
  id: <E>create(java.lang.Iterable<? extends E>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.TreeMultiset
  langs:
  - java
  name: <E>create(Iterable<? extends E> elements)
  nameWithType: TreeMultiset<E>.<E>create(Iterable<? extends E> elements)
  fullName: com.azure.cosmos.implementation.guava25.collect.TreeMultiset<E>.<E>create(Iterable<? extends E> elements)
  overload: com.azure.cosmos.implementation.guava25.collect.TreeMultiset.create*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Creates an empty multiset containing the given initial elements, sorted according to the elements' natural order.


    This implementation is highly efficient when `elements` is itself a <xref uid="com.azure.cosmos.implementation.guava25.collect.Multiset" data-throw-if-not-resolved="false">Multiset</xref>.


    The type specification is ``, instead of the more specific `>`, to support classes defined without generics.
  syntax:
    content: public static TreeMultiset<E> <E>create(Iterable<? extends E> elements)
    parameters:
    - id: elements
      type: java.lang.Iterable<? extends E>
    return:
      type: com.azure.cosmos.implementation.guava25.collect.TreeMultiset<E>
- uid: com.azure.cosmos.implementation.guava25.collect.TreeMultiset.<E>create(java.util.Comparator<? super E>)
  id: <E>create(java.util.Comparator<? super E>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.TreeMultiset
  langs:
  - java
  name: <E>create(Comparator<? super E> comparator)
  nameWithType: TreeMultiset<E>.<E>create(Comparator<? super E> comparator)
  fullName: com.azure.cosmos.implementation.guava25.collect.TreeMultiset<E>.<E>create(Comparator<? super E> comparator)
  overload: com.azure.cosmos.implementation.guava25.collect.TreeMultiset.create*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: 'Creates a new, empty multiset, sorted according to the specified comparator. All elements inserted into the multiset must be *mutually comparable* by the specified comparator: `comparator.compare(e1, e2)` must not throw a `ClassCastException` for any elements `e1` and `e2` in the multiset. If the user attempts to add an element to the multiset that violates this constraint, the `add(Object)` call will throw a `ClassCastException`.'
  syntax:
    content: public static TreeMultiset<E> <E>create(Comparator<? super E> comparator)
    parameters:
    - id: comparator
      type: java.util.Comparator<? super E>
      description: >-
        the comparator that will be used to sort this multiset. A null value
             indicates that the elements' <i>natural ordering</i> should be used.
    return:
      type: com.azure.cosmos.implementation.guava25.collect.TreeMultiset<E>
- uid: com.azure.cosmos.implementation.guava25.collect.TreeMultiset.TreeMultiset(com.azure.cosmos.implementation.guava25.collect.TreeMultiset.Reference<com.azure.cosmos.implementation.guava25.collect.TreeMultiset.AvlNode<E>>,com.azure.cosmos.implementation.guava25.collect.GeneralRange<E>,com.azure.cosmos.implementation.guava25.collect.TreeMultiset.AvlNode<E>)
  id: TreeMultiset(com.azure.cosmos.implementation.guava25.collect.TreeMultiset.Reference<com.azure.cosmos.implementation.guava25.collect.TreeMultiset.AvlNode<E>>,com.azure.cosmos.implementation.guava25.collect.GeneralRange<E>,com.azure.cosmos.implementation.guava25.collect.TreeMultiset.AvlNode<E>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.TreeMultiset
  langs:
  - java
  name: TreeMultiset(TreeMultiset.Reference<TreeMultiset.AvlNode<E>> rootReference, GeneralRange<E> range, TreeMultiset.AvlNode<E> endLink)
  nameWithType: TreeMultiset<E>.TreeMultiset(TreeMultiset.Reference<TreeMultiset.AvlNode<E>> rootReference, GeneralRange<E> range, TreeMultiset.AvlNode<E> endLink)
  fullName: com.azure.cosmos.implementation.guava25.collect.TreeMultiset<E>.TreeMultiset(TreeMultiset.Reference<TreeMultiset.AvlNode<E>> rootReference, GeneralRange<E> range, TreeMultiset.AvlNode<E> endLink)
  overload: com.azure.cosmos.implementation.guava25.collect.TreeMultiset.TreeMultiset*
  type: Constructor
  package: com.azure.cosmos.implementation.guava25.collect
  syntax:
    content: " TreeMultiset(TreeMultiset.Reference<TreeMultiset.AvlNode<E>> rootReference, GeneralRange<E> range, TreeMultiset.AvlNode<E> endLink)"
    parameters:
    - id: rootReference
      type: com.azure.cosmos.implementation.guava25.collect.TreeMultiset.Reference<com.azure.cosmos.implementation.guava25.collect.TreeMultiset.AvlNode<E>>
    - id: range
      type: com.azure.cosmos.implementation.guava25.collect.GeneralRange<E>
    - id: endLink
      type: com.azure.cosmos.implementation.guava25.collect.TreeMultiset.AvlNode<E>
- uid: com.azure.cosmos.implementation.guava25.collect.TreeMultiset.TreeMultiset(java.util.Comparator<? super E>)
  id: TreeMultiset(java.util.Comparator<? super E>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.TreeMultiset
  langs:
  - java
  name: TreeMultiset(Comparator<? super E> comparator)
  nameWithType: TreeMultiset<E>.TreeMultiset(Comparator<? super E> comparator)
  fullName: com.azure.cosmos.implementation.guava25.collect.TreeMultiset<E>.TreeMultiset(Comparator<? super E> comparator)
  overload: com.azure.cosmos.implementation.guava25.collect.TreeMultiset.TreeMultiset*
  type: Constructor
  package: com.azure.cosmos.implementation.guava25.collect
  syntax:
    content: " TreeMultiset(Comparator<? super E> comparator)"
    parameters:
    - id: comparator
      type: java.util.Comparator<? super E>
- uid: com.azure.cosmos.implementation.guava25.collect.TreeMultiset.add(E,int)
  id: add(E,int)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.TreeMultiset
  langs:
  - java
  name: add(E element, int occurrences)
  nameWithType: TreeMultiset<E>.add(E element, int occurrences)
  fullName: com.azure.cosmos.implementation.guava25.collect.TreeMultiset<E>.add(E element, int occurrences)
  overload: com.azure.cosmos.implementation.guava25.collect.TreeMultiset.add*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Adds a number of occurrences of an element to this multiset. Note that if `occurrences == 1`, this method has the identical effect to <xref uid="com.azure.cosmos.implementation.guava25.collect.TreeMultiset.add*" data-throw-if-not-resolved="false">#add(Object)</xref>. This method is functionally equivalent (except in the case of overflow) to the call `addAll(Collections.nCopies(element, occurrences))`, which would presumably perform much more poorly.
  syntax:
    content: public int add(E element, int occurrences)
    parameters:
    - id: element
      type: E
    - id: occurrences
      type: int
    return:
      type: int
- uid: com.azure.cosmos.implementation.guava25.collect.TreeMultiset.clear()
  id: clear()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.TreeMultiset
  langs:
  - java
  name: clear()
  nameWithType: TreeMultiset<E>.clear()
  fullName: com.azure.cosmos.implementation.guava25.collect.TreeMultiset<E>.clear()
  overload: com.azure.cosmos.implementation.guava25.collect.TreeMultiset.clear*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  syntax:
    content: public void clear()
- uid: com.azure.cosmos.implementation.guava25.collect.TreeMultiset.count(java.lang.Object)
  id: count(java.lang.Object)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.TreeMultiset
  langs:
  - java
  name: count(Object element)
  nameWithType: TreeMultiset<E>.count(Object element)
  fullName: com.azure.cosmos.implementation.guava25.collect.TreeMultiset<E>.count(Object element)
  overload: com.azure.cosmos.implementation.guava25.collect.TreeMultiset.count*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  syntax:
    content: public int count(Object element)
    parameters:
    - id: element
      type: java.lang.Object
    return:
      type: int
- uid: com.azure.cosmos.implementation.guava25.collect.TreeMultiset.forEachEntry(java.util.function.ObjIntConsumer<? super E>)
  id: forEachEntry(java.util.function.ObjIntConsumer<? super E>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.TreeMultiset
  langs:
  - java
  name: forEachEntry(ObjIntConsumer<? super E> action)
  nameWithType: TreeMultiset<E>.forEachEntry(ObjIntConsumer<? super E> action)
  fullName: com.azure.cosmos.implementation.guava25.collect.TreeMultiset<E>.forEachEntry(ObjIntConsumer<? super E> action)
  overload: com.azure.cosmos.implementation.guava25.collect.TreeMultiset.forEachEntry*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  syntax:
    content: public void forEachEntry(ObjIntConsumer<? super E> action)
    parameters:
    - id: action
      type: java.util.function.ObjIntConsumer<? super E>
- uid: com.azure.cosmos.implementation.guava25.collect.TreeMultiset.headMultiset(E,com.azure.cosmos.implementation.guava25.collect.BoundType)
  id: headMultiset(E,com.azure.cosmos.implementation.guava25.collect.BoundType)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.TreeMultiset
  langs:
  - java
  name: headMultiset(E upperBound, BoundType boundType)
  nameWithType: TreeMultiset<E>.headMultiset(E upperBound, BoundType boundType)
  fullName: com.azure.cosmos.implementation.guava25.collect.TreeMultiset<E>.headMultiset(E upperBound, BoundType boundType)
  overload: com.azure.cosmos.implementation.guava25.collect.TreeMultiset.headMultiset*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  syntax:
    content: public SortedMultiset<E> headMultiset(E upperBound, BoundType boundType)
    parameters:
    - id: upperBound
      type: E
    - id: boundType
      type: com.azure.cosmos.implementation.guava25.collect.BoundType
    return:
      type: com.azure.cosmos.implementation.guava25.collect.SortedMultiset<E>
- uid: com.azure.cosmos.implementation.guava25.collect.TreeMultiset.iterator()
  id: iterator()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.TreeMultiset
  langs:
  - java
  name: iterator()
  nameWithType: TreeMultiset<E>.iterator()
  fullName: com.azure.cosmos.implementation.guava25.collect.TreeMultiset<E>.iterator()
  overload: com.azure.cosmos.implementation.guava25.collect.TreeMultiset.iterator*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  syntax:
    content: public Iterator<E> iterator()
    return:
      type: java.util.Iterator<E>
- uid: com.azure.cosmos.implementation.guava25.collect.TreeMultiset.remove(java.lang.Object,int)
  id: remove(java.lang.Object,int)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.TreeMultiset
  langs:
  - java
  name: remove(Object element, int occurrences)
  nameWithType: TreeMultiset<E>.remove(Object element, int occurrences)
  fullName: com.azure.cosmos.implementation.guava25.collect.TreeMultiset<E>.remove(Object element, int occurrences)
  overload: com.azure.cosmos.implementation.guava25.collect.TreeMultiset.remove*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Removes a number of occurrences of the specified element from this multiset. If the multiset contains fewer than this number of occurrences to begin with, all occurrences will be removed. Note that if `occurrences == 1`, this is functionally equivalent to the call `remove(element)`.
  syntax:
    content: public int remove(Object element, int occurrences)
    parameters:
    - id: element
      type: java.lang.Object
    - id: occurrences
      type: int
    return:
      type: int
- uid: com.azure.cosmos.implementation.guava25.collect.TreeMultiset.setCount(E,int)
  id: setCount(E,int)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.TreeMultiset
  langs:
  - java
  name: setCount(E element, int count)
  nameWithType: TreeMultiset<E>.setCount(E element, int count)
  fullName: com.azure.cosmos.implementation.guava25.collect.TreeMultiset<E>.setCount(E element, int count)
  overload: com.azure.cosmos.implementation.guava25.collect.TreeMultiset.setCount*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Adds or removes the necessary occurrences of an element such that the element attains the desired count.
  syntax:
    content: public int setCount(E element, int count)
    parameters:
    - id: element
      type: E
    - id: count
      type: int
    return:
      type: int
- uid: com.azure.cosmos.implementation.guava25.collect.TreeMultiset.setCount(E,int,int)
  id: setCount(E,int,int)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.TreeMultiset
  langs:
  - java
  name: setCount(E element, int oldCount, int newCount)
  nameWithType: TreeMultiset<E>.setCount(E element, int oldCount, int newCount)
  fullName: com.azure.cosmos.implementation.guava25.collect.TreeMultiset<E>.setCount(E element, int oldCount, int newCount)
  overload: com.azure.cosmos.implementation.guava25.collect.TreeMultiset.setCount*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Conditionally sets the count of an element to a new value, as described in <xref uid="com.azure.cosmos.implementation.guava25.collect.TreeMultiset.setCount*" data-throw-if-not-resolved="false">#setCount(Object, int)</xref>, provided that the element has the expected current count. If the current count is not `oldCount`, no change is made.
  syntax:
    content: public boolean setCount(E element, int oldCount, int newCount)
    parameters:
    - id: element
      type: E
    - id: oldCount
      type: int
    - id: newCount
      type: int
    return:
      type: boolean
- uid: com.azure.cosmos.implementation.guava25.collect.TreeMultiset.size()
  id: size()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.TreeMultiset
  langs:
  - java
  name: size()
  nameWithType: TreeMultiset<E>.size()
  fullName: com.azure.cosmos.implementation.guava25.collect.TreeMultiset<E>.size()
  overload: com.azure.cosmos.implementation.guava25.collect.TreeMultiset.size*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  syntax:
    content: public int size()
    return:
      type: int
- uid: com.azure.cosmos.implementation.guava25.collect.TreeMultiset.tailMultiset(E,com.azure.cosmos.implementation.guava25.collect.BoundType)
  id: tailMultiset(E,com.azure.cosmos.implementation.guava25.collect.BoundType)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.TreeMultiset
  langs:
  - java
  name: tailMultiset(E lowerBound, BoundType boundType)
  nameWithType: TreeMultiset<E>.tailMultiset(E lowerBound, BoundType boundType)
  fullName: com.azure.cosmos.implementation.guava25.collect.TreeMultiset<E>.tailMultiset(E lowerBound, BoundType boundType)
  overload: com.azure.cosmos.implementation.guava25.collect.TreeMultiset.tailMultiset*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  syntax:
    content: public SortedMultiset<E> tailMultiset(E lowerBound, BoundType boundType)
    parameters:
    - id: lowerBound
      type: E
    - id: boundType
      type: com.azure.cosmos.implementation.guava25.collect.BoundType
    return:
      type: com.azure.cosmos.implementation.guava25.collect.SortedMultiset<E>
references:
- uid: com.azure.cosmos.implementation.guava25.collect.TreeMultiset.Reference<com.azure.cosmos.implementation.guava25.collect.TreeMultiset.AvlNode<E>>
  spec.java:
  - uid: com.azure.cosmos.implementation.guava25.collect.TreeMultiset.Reference
    name: Reference
    fullName: com.azure.cosmos.implementation.guava25.collect.TreeMultiset.Reference
  - name: <
    fullName: <
  - uid: com.azure.cosmos.implementation.guava25.collect.TreeMultiset.AvlNode
    name: AvlNode
    fullName: com.azure.cosmos.implementation.guava25.collect.TreeMultiset.AvlNode
  - name: <
    fullName: <
  - uid: E
    name: E
    fullName: E
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.GeneralRange<E>
  spec.java:
  - uid: com.azure.cosmos.implementation.guava25.collect.GeneralRange
    name: GeneralRange
    fullName: com.azure.cosmos.implementation.guava25.collect.GeneralRange
  - name: <
    fullName: <
  - uid: E
    name: E
    fullName: E
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.TreeMultiset.AvlNode<E>
  spec.java:
  - uid: com.azure.cosmos.implementation.guava25.collect.TreeMultiset.AvlNode
    name: AvlNode
    fullName: com.azure.cosmos.implementation.guava25.collect.TreeMultiset.AvlNode
  - name: <
    fullName: <
  - uid: E
    name: E
    fullName: E
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.TreeMultiset.TreeMultiset*
  name: TreeMultiset
  nameWithType: TreeMultiset<E>.TreeMultiset
  fullName: com.azure.cosmos.implementation.guava25.collect.TreeMultiset<E>.TreeMultiset
  package: com.azure.cosmos.implementation.guava25.collect
- uid: java.util.Comparator<? super E>
  spec.java:
  - uid: java.util.Comparator
    name: Comparator
    fullName: java.util.Comparator
  - name: <
    fullName: <
  - uid: '? super E'
    name: '? super E'
    fullName: '? super E'
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.TreeMultiset<E>
  spec.java:
  - uid: com.azure.cosmos.implementation.guava25.collect.TreeMultiset
    name: TreeMultiset
    fullName: com.azure.cosmos.implementation.guava25.collect.TreeMultiset
  - name: <
    fullName: <
  - uid: E
    name: E
    fullName: E
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.TreeMultiset.create*
  name: <E>create
  nameWithType: TreeMultiset<E>.<E>create
  fullName: com.azure.cosmos.implementation.guava25.collect.TreeMultiset<E>.<E>create
  package: com.azure.cosmos.implementation.guava25.collect
- uid: java.lang.Iterable<? extends E>
  spec.java:
  - uid: java.lang.Iterable
    name: Iterable
    fullName: java.lang.Iterable
  - name: <
    fullName: <
  - uid: '? extends E'
    name: '? extends E'
    fullName: '? extends E'
  - name: '>'
    fullName: '>'
- uid: int
  spec.java:
  - uid: int
    name: int
    fullName: int
- uid: com.azure.cosmos.implementation.guava25.collect.TreeMultiset.size*
  name: size
  nameWithType: TreeMultiset<E>.size
  fullName: com.azure.cosmos.implementation.guava25.collect.TreeMultiset<E>.size
  package: com.azure.cosmos.implementation.guava25.collect
- uid: java.lang.Object
  spec.java:
  - uid: java.lang.Object
    name: Object
    fullName: java.lang.Object
- uid: com.azure.cosmos.implementation.guava25.collect.TreeMultiset.count*
  name: count
  nameWithType: TreeMultiset<E>.count
  fullName: com.azure.cosmos.implementation.guava25.collect.TreeMultiset<E>.count
  package: com.azure.cosmos.implementation.guava25.collect
- uid: E
  spec.java:
  - uid: E
    name: E
    fullName: E
- uid: com.azure.cosmos.implementation.guava25.collect.TreeMultiset.add*
  name: add
  nameWithType: TreeMultiset<E>.add
  fullName: com.azure.cosmos.implementation.guava25.collect.TreeMultiset<E>.add
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.TreeMultiset.remove*
  name: remove
  nameWithType: TreeMultiset<E>.remove
  fullName: com.azure.cosmos.implementation.guava25.collect.TreeMultiset<E>.remove
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.TreeMultiset.setCount*
  name: setCount
  nameWithType: TreeMultiset<E>.setCount
  fullName: com.azure.cosmos.implementation.guava25.collect.TreeMultiset<E>.setCount
  package: com.azure.cosmos.implementation.guava25.collect
- uid: boolean
  spec.java:
  - uid: boolean
    name: boolean
    fullName: boolean
- uid: com.azure.cosmos.implementation.guava25.collect.TreeMultiset.clear*
  name: clear
  nameWithType: TreeMultiset<E>.clear
  fullName: com.azure.cosmos.implementation.guava25.collect.TreeMultiset<E>.clear
  package: com.azure.cosmos.implementation.guava25.collect
- uid: java.util.function.ObjIntConsumer<? super E>
  spec.java:
  - uid: java.util.function.ObjIntConsumer
    name: ObjIntConsumer
    fullName: java.util.function.ObjIntConsumer
  - name: <
    fullName: <
  - uid: '? super E'
    name: '? super E'
    fullName: '? super E'
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.TreeMultiset.forEachEntry*
  name: forEachEntry
  nameWithType: TreeMultiset<E>.forEachEntry
  fullName: com.azure.cosmos.implementation.guava25.collect.TreeMultiset<E>.forEachEntry
  package: com.azure.cosmos.implementation.guava25.collect
- uid: java.util.Iterator<E>
  spec.java:
  - uid: java.util.Iterator
    name: Iterator
    fullName: java.util.Iterator
  - name: <
    fullName: <
  - uid: E
    name: E
    fullName: E
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.TreeMultiset.iterator*
  name: iterator
  nameWithType: TreeMultiset<E>.iterator
  fullName: com.azure.cosmos.implementation.guava25.collect.TreeMultiset<E>.iterator
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.BoundType
  name: BoundType
  nameWithType: BoundType
  fullName: com.azure.cosmos.implementation.guava25.collect.BoundType
- uid: com.azure.cosmos.implementation.guava25.collect.SortedMultiset<E>
  spec.java:
  - uid: com.azure.cosmos.implementation.guava25.collect.SortedMultiset
    name: SortedMultiset
    fullName: com.azure.cosmos.implementation.guava25.collect.SortedMultiset
  - name: <
    fullName: <
  - uid: E
    name: E
    fullName: E
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.TreeMultiset.headMultiset*
  name: headMultiset
  nameWithType: TreeMultiset<E>.headMultiset
  fullName: com.azure.cosmos.implementation.guava25.collect.TreeMultiset<E>.headMultiset
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.TreeMultiset.tailMultiset*
  name: tailMultiset
  nameWithType: TreeMultiset<E>.tailMultiset
  fullName: com.azure.cosmos.implementation.guava25.collect.TreeMultiset<E>.tailMultiset
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.AbstractSortedMultiset<E>
  name: AbstractSortedMultiset<E>
  nameWithType: AbstractSortedMultiset<E>
  fullName: com.azure.cosmos.implementation.guava25.collect.AbstractSortedMultiset<E>
- uid: java.io.Serializable
  name: Serializable
  nameWithType: Serializable
  fullName: java.io.Serializable
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: java.lang.Object.finalize()
  name: Object.finalize()
  nameWithType: Object.finalize()
  fullName: java.lang.Object.finalize()
- uid: java.lang.Object.clone()
  name: Object.clone()
  nameWithType: Object.clone()
  fullName: java.lang.Object.clone()
- uid: com.azure.cosmos.implementation.guava25.collect.AbstractMultiset.contains(java.lang.Object)
  name: AbstractMultiset.contains(Object)
  nameWithType: AbstractMultiset.contains(Object)
  fullName: com.azure.cosmos.implementation.guava25.collect.AbstractMultiset.contains(java.lang.Object)
- uid: com.azure.cosmos.implementation.guava25.collect.AbstractMultiset.retainAll(java.util.Collection<?>)
  name: AbstractMultiset.retainAll(Collection<?>)
  nameWithType: AbstractMultiset.retainAll(Collection<?>)
  fullName: com.azure.cosmos.implementation.guava25.collect.AbstractMultiset.retainAll(java.util.Collection<?>)
- uid: java.util.AbstractCollection.size()
  name: AbstractCollection.size()
  nameWithType: AbstractCollection.size()
  fullName: java.util.AbstractCollection.size()
- uid: com.azure.cosmos.implementation.guava25.collect.AbstractMultiset.setCount(E,int,int)
  name: AbstractMultiset.setCount(E,int,int)
  nameWithType: AbstractMultiset.setCount(E,int,int)
  fullName: com.azure.cosmos.implementation.guava25.collect.AbstractMultiset.setCount(E,int,int)
- uid: com.azure.cosmos.implementation.guava25.collect.AbstractMultiset.clear()
  name: AbstractMultiset.clear()
  nameWithType: AbstractMultiset.clear()
  fullName: com.azure.cosmos.implementation.guava25.collect.AbstractMultiset.clear()
- uid: com.azure.cosmos.implementation.guava25.collect.AbstractSortedMultiset.elementSet()
  name: AbstractSortedMultiset.elementSet()
  nameWithType: AbstractSortedMultiset.elementSet()
  fullName: com.azure.cosmos.implementation.guava25.collect.AbstractSortedMultiset.elementSet()
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: com.azure.cosmos.implementation.guava25.collect.AbstractSortedMultiset.comparator()
  name: AbstractSortedMultiset.comparator()
  nameWithType: AbstractSortedMultiset.comparator()
  fullName: com.azure.cosmos.implementation.guava25.collect.AbstractSortedMultiset.comparator()
- uid: com.azure.cosmos.implementation.guava25.collect.AbstractSortedMultiset.subMultiset(E,com.azure.cosmos.implementation.guava25.collect.BoundType,E,com.azure.cosmos.implementation.guava25.collect.BoundType)
  name: AbstractSortedMultiset.subMultiset(E,BoundType,E,BoundType)
  nameWithType: AbstractSortedMultiset.subMultiset(E,BoundType,E,BoundType)
  fullName: com.azure.cosmos.implementation.guava25.collect.AbstractSortedMultiset.subMultiset(E,com.azure.cosmos.implementation.guava25.collect.BoundType,E,com.azure.cosmos.implementation.guava25.collect.BoundType)
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: java.util.AbstractCollection.<T>toArray(T[])
  name: AbstractCollection.<T>toArray(T[])
  nameWithType: AbstractCollection.<T>toArray(T[])
  fullName: java.util.AbstractCollection.<T>toArray(T[])
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: java.util.AbstractCollection.toArray()
  name: AbstractCollection.toArray()
  nameWithType: AbstractCollection.toArray()
  fullName: java.util.AbstractCollection.toArray()
- uid: java.util.AbstractCollection.iterator()
  name: AbstractCollection.iterator()
  nameWithType: AbstractCollection.iterator()
  fullName: java.util.AbstractCollection.iterator()
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: com.azure.cosmos.implementation.guava25.collect.AbstractSortedMultiset.descendingMultiset()
  name: AbstractSortedMultiset.descendingMultiset()
  nameWithType: AbstractSortedMultiset.descendingMultiset()
  fullName: com.azure.cosmos.implementation.guava25.collect.AbstractSortedMultiset.descendingMultiset()
- uid: com.azure.cosmos.implementation.guava25.collect.AbstractSortedMultiset.firstEntry()
  name: AbstractSortedMultiset.firstEntry()
  nameWithType: AbstractSortedMultiset.firstEntry()
  fullName: com.azure.cosmos.implementation.guava25.collect.AbstractSortedMultiset.firstEntry()
- uid: com.azure.cosmos.implementation.guava25.collect.AbstractMultiset.removeAll(java.util.Collection<?>)
  name: AbstractMultiset.removeAll(Collection<?>)
  nameWithType: AbstractMultiset.removeAll(Collection<?>)
  fullName: com.azure.cosmos.implementation.guava25.collect.AbstractMultiset.removeAll(java.util.Collection<?>)
- uid: com.azure.cosmos.implementation.guava25.collect.AbstractMultiset.remove(java.lang.Object,int)
  name: AbstractMultiset.remove(Object,int)
  nameWithType: AbstractMultiset.remove(Object,int)
  fullName: com.azure.cosmos.implementation.guava25.collect.AbstractMultiset.remove(java.lang.Object,int)
- uid: com.azure.cosmos.implementation.guava25.collect.AbstractMultiset.toString()
  name: AbstractMultiset.toString()
  nameWithType: AbstractMultiset.toString()
  fullName: com.azure.cosmos.implementation.guava25.collect.AbstractMultiset.toString()
- uid: com.azure.cosmos.implementation.guava25.collect.AbstractMultiset.isEmpty()
  name: AbstractMultiset.isEmpty()
  nameWithType: AbstractMultiset.isEmpty()
  fullName: com.azure.cosmos.implementation.guava25.collect.AbstractMultiset.isEmpty()
- uid: com.azure.cosmos.implementation.guava25.collect.AbstractMultiset.entrySet()
  name: AbstractMultiset.entrySet()
  nameWithType: AbstractMultiset.entrySet()
  fullName: com.azure.cosmos.implementation.guava25.collect.AbstractMultiset.entrySet()
- uid: com.azure.cosmos.implementation.guava25.collect.AbstractSortedMultiset.pollLastEntry()
  name: AbstractSortedMultiset.pollLastEntry()
  nameWithType: AbstractSortedMultiset.pollLastEntry()
  fullName: com.azure.cosmos.implementation.guava25.collect.AbstractSortedMultiset.pollLastEntry()
- uid: com.azure.cosmos.implementation.guava25.collect.AbstractSortedMultiset.lastEntry()
  name: AbstractSortedMultiset.lastEntry()
  nameWithType: AbstractSortedMultiset.lastEntry()
  fullName: com.azure.cosmos.implementation.guava25.collect.AbstractSortedMultiset.lastEntry()
- uid: com.azure.cosmos.implementation.guava25.collect.AbstractMultiset.hashCode()
  name: AbstractMultiset.hashCode()
  nameWithType: AbstractMultiset.hashCode()
  fullName: com.azure.cosmos.implementation.guava25.collect.AbstractMultiset.hashCode()
- uid: java.util.AbstractCollection.containsAll(java.util.Collection<?>)
  name: AbstractCollection.containsAll(Collection<?>)
  nameWithType: AbstractCollection.containsAll(Collection<?>)
  fullName: java.util.AbstractCollection.containsAll(java.util.Collection<?>)
- uid: com.azure.cosmos.implementation.guava25.collect.AbstractMultiset.add(E,int)
  name: AbstractMultiset.add(E,int)
  nameWithType: AbstractMultiset.add(E,int)
  fullName: com.azure.cosmos.implementation.guava25.collect.AbstractMultiset.add(E,int)
- uid: com.azure.cosmos.implementation.guava25.collect.AbstractMultiset.remove(java.lang.Object)
  name: AbstractMultiset.remove(Object)
  nameWithType: AbstractMultiset.remove(Object)
  fullName: com.azure.cosmos.implementation.guava25.collect.AbstractMultiset.remove(java.lang.Object)
- uid: com.azure.cosmos.implementation.guava25.collect.AbstractMultiset.addAll(java.util.Collection<? extends E>)
  name: AbstractMultiset.addAll(Collection<? extends E>)
  nameWithType: AbstractMultiset.addAll(Collection<? extends E>)
  fullName: com.azure.cosmos.implementation.guava25.collect.AbstractMultiset.addAll(java.util.Collection<? extends E>)
- uid: com.azure.cosmos.implementation.guava25.collect.AbstractMultiset.add(E)
  name: AbstractMultiset.add(E)
  nameWithType: AbstractMultiset.add(E)
  fullName: com.azure.cosmos.implementation.guava25.collect.AbstractMultiset.add(E)
- uid: com.azure.cosmos.implementation.guava25.collect.AbstractMultiset.setCount(E,int)
  name: AbstractMultiset.setCount(E,int)
  nameWithType: AbstractMultiset.setCount(E,int)
  fullName: com.azure.cosmos.implementation.guava25.collect.AbstractMultiset.setCount(E,int)
- uid: com.azure.cosmos.implementation.guava25.collect.AbstractSortedMultiset.pollFirstEntry()
  name: AbstractSortedMultiset.pollFirstEntry()
  nameWithType: AbstractSortedMultiset.pollFirstEntry()
  fullName: com.azure.cosmos.implementation.guava25.collect.AbstractSortedMultiset.pollFirstEntry()
- uid: com.azure.cosmos.implementation.guava25.collect.AbstractMultiset.equals(java.lang.Object)
  name: AbstractMultiset.equals(Object)
  nameWithType: AbstractMultiset.equals(Object)
  fullName: com.azure.cosmos.implementation.guava25.collect.AbstractMultiset.equals(java.lang.Object)
- uid: com.azure.cosmos.implementation.guava25.collect.TreeMultiset.Reference
  name: TreeMultiset.Reference
  nameWithType: TreeMultiset.Reference
  fullName: com.azure.cosmos.implementation.guava25.collect.TreeMultiset.Reference
- uid: com.azure.cosmos.implementation.guava25.collect.TreeMultiset.AvlNode
  name: TreeMultiset.AvlNode
  nameWithType: TreeMultiset.AvlNode
  fullName: com.azure.cosmos.implementation.guava25.collect.TreeMultiset.AvlNode
- uid: com.azure.cosmos.implementation.guava25.collect.GeneralRange
  name: GeneralRange
  nameWithType: GeneralRange
  fullName: com.azure.cosmos.implementation.guava25.collect.GeneralRange
- uid: '? super E'
  name: '? super E'
  nameWithType: '? super E'
  fullName: '? super E'
- uid: java.util.Comparator
  name: Comparator
  nameWithType: Comparator
  fullName: java.util.Comparator
- uid: '? extends E'
  name: '? extends E'
  nameWithType: '? extends E'
  fullName: '? extends E'
- uid: java.lang.Iterable
  name: Iterable
  nameWithType: Iterable
  fullName: java.lang.Iterable
- uid: java.util.function.ObjIntConsumer
  name: ObjIntConsumer
  nameWithType: ObjIntConsumer
  fullName: java.util.function.ObjIntConsumer
- uid: java.util.Iterator
  name: Iterator
  nameWithType: Iterator
  fullName: java.util.Iterator
- uid: com.azure.cosmos.implementation.guava25.collect.SortedMultiset
  name: SortedMultiset
  nameWithType: SortedMultiset
  fullName: com.azure.cosmos.implementation.guava25.collect.SortedMultiset
- uid: com.azure.cosmos.implementation.guava25.collect.AbstractSortedMultiset
  name: AbstractSortedMultiset
  nameWithType: AbstractSortedMultiset
  fullName: com.azure.cosmos.implementation.guava25.collect.AbstractSortedMultiset
- uid: com.azure.cosmos.implementation.guava25.collect.AbstractMultiset.retainAll(java.util.Collection
  name: AbstractMultiset.retainAll(Collection
  nameWithType: AbstractMultiset.retainAll(Collection
  fullName: com.azure.cosmos.implementation.guava25.collect.AbstractMultiset.retainAll(java.util.Collection
- uid: ?>)
  name: ?>)
  nameWithType: ?>)
  fullName: ?>)
- uid: T>toArray(T[])
  name: T>toArray(T[])
  nameWithType: T>toArray(T[])
  fullName: T>toArray(T[])
- uid: java.util.AbstractCollection.
  name: AbstractCollection.
  nameWithType: AbstractCollection.
  fullName: java.util.AbstractCollection.
- uid: com.azure.cosmos.implementation.guava25.collect.AbstractMultiset.removeAll(java.util.Collection
  name: AbstractMultiset.removeAll(Collection
  nameWithType: AbstractMultiset.removeAll(Collection
  fullName: com.azure.cosmos.implementation.guava25.collect.AbstractMultiset.removeAll(java.util.Collection
- uid: java.util.AbstractCollection.containsAll(java.util.Collection
  name: AbstractCollection.containsAll(Collection
  nameWithType: AbstractCollection.containsAll(Collection
  fullName: java.util.AbstractCollection.containsAll(java.util.Collection
- uid: '? extends E>)'
  name: '? extends E>)'
  nameWithType: '? extends E>)'
  fullName: '? extends E>)'
- uid: com.azure.cosmos.implementation.guava25.collect.AbstractMultiset.addAll(java.util.Collection
  name: AbstractMultiset.addAll(Collection
  nameWithType: AbstractMultiset.addAll(Collection
  fullName: com.azure.cosmos.implementation.guava25.collect.AbstractMultiset.addAll(java.util.Collection
