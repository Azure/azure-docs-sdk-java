### YamlMime:ManagedReference
items:
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableRangeSet
  id: ImmutableRangeSet
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect
  children:
  - com.azure.cosmos.implementation.guava25.collect.ImmutableRangeSet.<C>builder()
  - com.azure.cosmos.implementation.guava25.collect.ImmutableRangeSet.<C>copyOf(com.azure.cosmos.implementation.guava25.collect.RangeSet<C>)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableRangeSet.<C>copyOf(java.lang.Iterable<com.azure.cosmos.implementation.guava25.collect.Range<C>>)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableRangeSet.<C>of()
  - com.azure.cosmos.implementation.guava25.collect.ImmutableRangeSet.<C>of(com.azure.cosmos.implementation.guava25.collect.Range<C>)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableRangeSet.<C>unionOf(java.lang.Iterable<com.azure.cosmos.implementation.guava25.collect.Range<C>>)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableRangeSet.<E>toImmutableRangeSet()
  - com.azure.cosmos.implementation.guava25.collect.ImmutableRangeSet.Builder
  - com.azure.cosmos.implementation.guava25.collect.ImmutableRangeSet.add(com.azure.cosmos.implementation.guava25.collect.Range<C>)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableRangeSet.addAll(com.azure.cosmos.implementation.guava25.collect.RangeSet<C>)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableRangeSet.addAll(java.lang.Iterable<com.azure.cosmos.implementation.guava25.collect.Range<C>>)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableRangeSet.asDescendingSetOfRanges()
  - com.azure.cosmos.implementation.guava25.collect.ImmutableRangeSet.asRanges()
  - com.azure.cosmos.implementation.guava25.collect.ImmutableRangeSet.asSet(com.azure.cosmos.implementation.guava25.collect.DiscreteDomain<C>)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableRangeSet.complement()
  - com.azure.cosmos.implementation.guava25.collect.ImmutableRangeSet.difference(com.azure.cosmos.implementation.guava25.collect.RangeSet<C>)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableRangeSet.encloses(com.azure.cosmos.implementation.guava25.collect.Range<C>)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableRangeSet.intersection(com.azure.cosmos.implementation.guava25.collect.RangeSet<C>)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableRangeSet.intersects(com.azure.cosmos.implementation.guava25.collect.Range<C>)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableRangeSet.isEmpty()
  - com.azure.cosmos.implementation.guava25.collect.ImmutableRangeSet.rangeContaining(C)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableRangeSet.remove(com.azure.cosmos.implementation.guava25.collect.Range<C>)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableRangeSet.removeAll(com.azure.cosmos.implementation.guava25.collect.RangeSet<C>)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableRangeSet.removeAll(java.lang.Iterable<com.azure.cosmos.implementation.guava25.collect.Range<C>>)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableRangeSet.span()
  - com.azure.cosmos.implementation.guava25.collect.ImmutableRangeSet.subRangeSet(com.azure.cosmos.implementation.guava25.collect.Range<C>)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableRangeSet.union(com.azure.cosmos.implementation.guava25.collect.RangeSet<C>)
  langs:
  - java
  name: ImmutableRangeSet<C>
  nameWithType: ImmutableRangeSet<C>
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableRangeSet<C>
  type: Class
  package: com.azure.cosmos.implementation.guava25.collect
  summary: A <xref uid="com.azure.cosmos.implementation.guava25.collect.RangeSet" data-throw-if-not-resolved="false">RangeSet</xref> whose contents will never change, with many other important properties detailed at <xref uid="com.azure.cosmos.implementation.guava25.collect.ImmutableCollection" data-throw-if-not-resolved="false">ImmutableCollection</xref>.
  syntax:
    content: public final class ImmutableRangeSet<C> extends AbstractRangeSet<C> implements Serializable
    typeParameters:
    - id: C
  inheritance:
  - java.lang.Object
  - com.azure.cosmos.implementation.guava25.collect.AbstractRangeSet
  implements:
  - java.io.Serializable
  inheritedMembers:
  - com.azure.cosmos.implementation.guava25.collect.AbstractRangeSet.add(com.azure.cosmos.implementation.guava25.collect.Range<C>)
  - com.azure.cosmos.implementation.guava25.collect.AbstractRangeSet.addAll(com.azure.cosmos.implementation.guava25.collect.RangeSet<C>)
  - com.azure.cosmos.implementation.guava25.collect.AbstractRangeSet.clear()
  - com.azure.cosmos.implementation.guava25.collect.AbstractRangeSet.contains(C)
  - com.azure.cosmos.implementation.guava25.collect.AbstractRangeSet.encloses(com.azure.cosmos.implementation.guava25.collect.Range<C>)
  - com.azure.cosmos.implementation.guava25.collect.AbstractRangeSet.enclosesAll(com.azure.cosmos.implementation.guava25.collect.RangeSet<C>)
  - com.azure.cosmos.implementation.guava25.collect.AbstractRangeSet.equals(java.lang.Object)
  - com.azure.cosmos.implementation.guava25.collect.AbstractRangeSet.hashCode()
  - com.azure.cosmos.implementation.guava25.collect.AbstractRangeSet.intersects(com.azure.cosmos.implementation.guava25.collect.Range<C>)
  - com.azure.cosmos.implementation.guava25.collect.AbstractRangeSet.isEmpty()
  - com.azure.cosmos.implementation.guava25.collect.AbstractRangeSet.rangeContaining(C)
  - com.azure.cosmos.implementation.guava25.collect.AbstractRangeSet.remove(com.azure.cosmos.implementation.guava25.collect.Range<C>)
  - com.azure.cosmos.implementation.guava25.collect.AbstractRangeSet.removeAll(com.azure.cosmos.implementation.guava25.collect.RangeSet<C>)
  - com.azure.cosmos.implementation.guava25.collect.AbstractRangeSet.toString()
  - java.lang.Object.clone()
  - java.lang.Object.finalize()
  - java.lang.Object.getClass()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableRangeSet.<C>builder()
  id: <C>builder()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableRangeSet
  langs:
  - java
  name: <C>builder()
  nameWithType: ImmutableRangeSet<C>.<C>builder()
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableRangeSet<C>.<C>builder()
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableRangeSet.builder*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Returns a new builder for an immutable range set.
  syntax:
    content: public static ImmutableRangeSet.Builder<C> <C>builder()
    return:
      type: com.azure.cosmos.implementation.guava25.collect.ImmutableRangeSet.Builder<C>
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableRangeSet.<C>copyOf(com.azure.cosmos.implementation.guava25.collect.RangeSet<C>)
  id: <C>copyOf(com.azure.cosmos.implementation.guava25.collect.RangeSet<C>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableRangeSet
  langs:
  - java
  name: <C>copyOf(RangeSet<C> rangeSet)
  nameWithType: ImmutableRangeSet<C>.<C>copyOf(RangeSet<C> rangeSet)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableRangeSet<C>.<C>copyOf(RangeSet<C> rangeSet)
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableRangeSet.copyOf*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Returns an immutable copy of the specified `RangeSet`.
  syntax:
    content: public static ImmutableRangeSet<C> <C>copyOf(RangeSet<C> rangeSet)
    parameters:
    - id: rangeSet
      type: com.azure.cosmos.implementation.guava25.collect.RangeSet<C>
    return:
      type: com.azure.cosmos.implementation.guava25.collect.ImmutableRangeSet<C>
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableRangeSet.<C>copyOf(java.lang.Iterable<com.azure.cosmos.implementation.guava25.collect.Range<C>>)
  id: <C>copyOf(java.lang.Iterable<com.azure.cosmos.implementation.guava25.collect.Range<C>>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableRangeSet
  langs:
  - java
  name: <C>copyOf(Iterable<Range<C>> ranges)
  nameWithType: ImmutableRangeSet<C>.<C>copyOf(Iterable<Range<C>> ranges)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableRangeSet<C>.<C>copyOf(Iterable<Range<C>> ranges)
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableRangeSet.copyOf*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Returns an `ImmutableRangeSet` containing each of the specified disjoint ranges. Overlapping ranges and empty ranges are forbidden, though adjacent ranges are permitted and will be merged.
  syntax:
    content: public static ImmutableRangeSet<C> <C>copyOf(Iterable<Range<C>> ranges)
    parameters:
    - id: ranges
      type: java.lang.Iterable<com.azure.cosmos.implementation.guava25.collect.Range<C>>
    return:
      type: com.azure.cosmos.implementation.guava25.collect.ImmutableRangeSet<C>
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableRangeSet.<C>of()
  id: <C>of()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableRangeSet
  langs:
  - java
  name: <C>of()
  nameWithType: ImmutableRangeSet<C>.<C>of()
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableRangeSet<C>.<C>of()
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableRangeSet.of*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Returns an empty immutable range set.
  syntax:
    content: public static ImmutableRangeSet<C> <C>of()
    return:
      type: com.azure.cosmos.implementation.guava25.collect.ImmutableRangeSet<C>
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableRangeSet.<C>of(com.azure.cosmos.implementation.guava25.collect.Range<C>)
  id: <C>of(com.azure.cosmos.implementation.guava25.collect.Range<C>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableRangeSet
  langs:
  - java
  name: <C>of(Range<C> range)
  nameWithType: ImmutableRangeSet<C>.<C>of(Range<C> range)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableRangeSet<C>.<C>of(Range<C> range)
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableRangeSet.of*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Returns an immutable range set containing the specified single range. If <xref uid="com.azure.cosmos.implementation.routing.Range.isEmpty()" data-throw-if-not-resolved="false">range.isEmpty()</xref>, this is equivalent to <xref uid="com.azure.cosmos.implementation.guava25.collect.ImmutableRangeSet.&lt;C&gt;of()" data-throw-if-not-resolved="false">ImmutableRangeSet#of()</xref>.
  syntax:
    content: public static ImmutableRangeSet<C> <C>of(Range<C> range)
    parameters:
    - id: range
      type: com.azure.cosmos.implementation.guava25.collect.Range<C>
    return:
      type: com.azure.cosmos.implementation.guava25.collect.ImmutableRangeSet<C>
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableRangeSet.<C>unionOf(java.lang.Iterable<com.azure.cosmos.implementation.guava25.collect.Range<C>>)
  id: <C>unionOf(java.lang.Iterable<com.azure.cosmos.implementation.guava25.collect.Range<C>>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableRangeSet
  langs:
  - java
  name: <C>unionOf(Iterable<Range<C>> ranges)
  nameWithType: ImmutableRangeSet<C>.<C>unionOf(Iterable<Range<C>> ranges)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableRangeSet<C>.<C>unionOf(Iterable<Range<C>> ranges)
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableRangeSet.unionOf*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Returns an `ImmutableRangeSet` representing the union of the specified ranges.


    This is the smallest `RangeSet` which encloses each of the specified ranges. Duplicate or connected ranges are permitted, and will be coalesced in the result.
  syntax:
    content: public static ImmutableRangeSet<C> <C>unionOf(Iterable<Range<C>> ranges)
    parameters:
    - id: ranges
      type: java.lang.Iterable<com.azure.cosmos.implementation.guava25.collect.Range<C>>
    return:
      type: com.azure.cosmos.implementation.guava25.collect.ImmutableRangeSet<C>
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableRangeSet.<E>toImmutableRangeSet()
  id: <E>toImmutableRangeSet()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableRangeSet
  langs:
  - java
  name: <E>toImmutableRangeSet()
  nameWithType: ImmutableRangeSet<C>.<E>toImmutableRangeSet()
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableRangeSet<C>.<E>toImmutableRangeSet()
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableRangeSet.toImmutableRangeSet*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Returns a `Collector` that accumulates the input elements into a new `ImmutableRangeSet`. As in <xref uid="com.azure.cosmos.implementation.guava25.collect.ImmutableRangeSet.Builder" data-throw-if-not-resolved="false">Builder</xref>, overlapping ranges are not permitted and adjacent ranges will be merged.
  syntax:
    content: public static Collector<Range<E>,?,ImmutableRangeSet<E>> <E>toImmutableRangeSet()
    return:
      type: java.util.stream.Collector<com.azure.cosmos.implementation.guava25.collect.Range<E>,?,com.azure.cosmos.implementation.guava25.collect.ImmutableRangeSet<E>>
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableRangeSet.ImmutableRangeSet(com.azure.cosmos.implementation.guava25.collect.ImmutableList<com.azure.cosmos.implementation.guava25.collect.Range<C>>)
  id: ImmutableRangeSet(com.azure.cosmos.implementation.guava25.collect.ImmutableList<com.azure.cosmos.implementation.guava25.collect.Range<C>>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableRangeSet
  langs:
  - java
  name: ImmutableRangeSet(ImmutableList<Range<C>> ranges)
  nameWithType: ImmutableRangeSet<C>.ImmutableRangeSet(ImmutableList<Range<C>> ranges)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableRangeSet<C>.ImmutableRangeSet(ImmutableList<Range<C>> ranges)
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableRangeSet.ImmutableRangeSet*
  type: Constructor
  package: com.azure.cosmos.implementation.guava25.collect
  syntax:
    content: " ImmutableRangeSet(ImmutableList<Range<C>> ranges)"
    parameters:
    - id: ranges
      type: com.azure.cosmos.implementation.guava25.collect.ImmutableList<com.azure.cosmos.implementation.guava25.collect.Range<C>>
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableRangeSet.ImmutableRangeSet(com.azure.cosmos.implementation.guava25.collect.ImmutableList<com.azure.cosmos.implementation.guava25.collect.Range<C>>,com.azure.cosmos.implementation.guava25.collect.ImmutableRangeSet<C>)
  id: ImmutableRangeSet(com.azure.cosmos.implementation.guava25.collect.ImmutableList<com.azure.cosmos.implementation.guava25.collect.Range<C>>,com.azure.cosmos.implementation.guava25.collect.ImmutableRangeSet<C>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableRangeSet
  langs:
  - java
  name: ImmutableRangeSet(ImmutableList<Range<C>> ranges, ImmutableRangeSet<C> complement)
  nameWithType: ImmutableRangeSet<C>.ImmutableRangeSet(ImmutableList<Range<C>> ranges, ImmutableRangeSet<C> complement)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableRangeSet<C>.ImmutableRangeSet(ImmutableList<Range<C>> ranges, ImmutableRangeSet<C> complement)
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableRangeSet.ImmutableRangeSet*
  type: Constructor
  package: com.azure.cosmos.implementation.guava25.collect
  syntax:
    content: private ImmutableRangeSet(ImmutableList<Range<C>> ranges, ImmutableRangeSet<C> complement)
    parameters:
    - id: ranges
      type: com.azure.cosmos.implementation.guava25.collect.ImmutableList<com.azure.cosmos.implementation.guava25.collect.Range<C>>
    - id: complement
      type: com.azure.cosmos.implementation.guava25.collect.ImmutableRangeSet<C>
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableRangeSet.add(com.azure.cosmos.implementation.guava25.collect.Range<C>)
  id: add(com.azure.cosmos.implementation.guava25.collect.Range<C>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableRangeSet
  langs:
  - java
  name: add(Range<C> range)
  nameWithType: ImmutableRangeSet<C>.add(Range<C> range)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableRangeSet<C>.add(Range<C> range)
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableRangeSet.add*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Guaranteed to throw an exception and leave the `RangeSet` unmodified.
  syntax:
    content: public void add(Range<C> range)
    parameters:
    - id: range
      type: com.azure.cosmos.implementation.guava25.collect.Range<C>
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableRangeSet.addAll(com.azure.cosmos.implementation.guava25.collect.RangeSet<C>)
  id: addAll(com.azure.cosmos.implementation.guava25.collect.RangeSet<C>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableRangeSet
  langs:
  - java
  name: addAll(RangeSet<C> other)
  nameWithType: ImmutableRangeSet<C>.addAll(RangeSet<C> other)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableRangeSet<C>.addAll(RangeSet<C> other)
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableRangeSet.addAll*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Guaranteed to throw an exception and leave the `RangeSet` unmodified.
  syntax:
    content: public void addAll(RangeSet<C> other)
    parameters:
    - id: other
      type: com.azure.cosmos.implementation.guava25.collect.RangeSet<C>
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableRangeSet.addAll(java.lang.Iterable<com.azure.cosmos.implementation.guava25.collect.Range<C>>)
  id: addAll(java.lang.Iterable<com.azure.cosmos.implementation.guava25.collect.Range<C>>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableRangeSet
  langs:
  - java
  name: addAll(Iterable<Range<C>> other)
  nameWithType: ImmutableRangeSet<C>.addAll(Iterable<Range<C>> other)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableRangeSet<C>.addAll(Iterable<Range<C>> other)
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableRangeSet.addAll*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Guaranteed to throw an exception and leave the `RangeSet` unmodified.
  syntax:
    content: public void addAll(Iterable<Range<C>> other)
    parameters:
    - id: other
      type: java.lang.Iterable<com.azure.cosmos.implementation.guava25.collect.Range<C>>
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableRangeSet.asDescendingSetOfRanges()
  id: asDescendingSetOfRanges()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableRangeSet
  langs:
  - java
  name: asDescendingSetOfRanges()
  nameWithType: ImmutableRangeSet<C>.asDescendingSetOfRanges()
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableRangeSet<C>.asDescendingSetOfRanges()
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableRangeSet.asDescendingSetOfRanges*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  syntax:
    content: public ImmutableSet<Range<C>> asDescendingSetOfRanges()
    return:
      type: com.azure.cosmos.implementation.guava25.collect.ImmutableSet<com.azure.cosmos.implementation.guava25.collect.Range<C>>
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableRangeSet.asRanges()
  id: asRanges()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableRangeSet
  langs:
  - java
  name: asRanges()
  nameWithType: ImmutableRangeSet<C>.asRanges()
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableRangeSet<C>.asRanges()
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableRangeSet.asRanges*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  syntax:
    content: public ImmutableSet<Range<C>> asRanges()
    return:
      type: com.azure.cosmos.implementation.guava25.collect.ImmutableSet<com.azure.cosmos.implementation.guava25.collect.Range<C>>
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableRangeSet.asSet(com.azure.cosmos.implementation.guava25.collect.DiscreteDomain<C>)
  id: asSet(com.azure.cosmos.implementation.guava25.collect.DiscreteDomain<C>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableRangeSet
  langs:
  - java
  name: asSet(DiscreteDomain<C> domain)
  nameWithType: ImmutableRangeSet<C>.asSet(DiscreteDomain<C> domain)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableRangeSet<C>.asSet(DiscreteDomain<C> domain)
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableRangeSet.asSet*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Returns an <xref uid="com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet" data-throw-if-not-resolved="false">ImmutableSortedSet</xref> containing the same values in the given domain <xref uid="com.azure.cosmos.implementation.guava25.collect.RangeSet.contains" data-throw-if-not-resolved="false">contained</xref> by this range set.


    **Note:** `a.asSet(d).equals(b.asSet(d))` does not imply `a.equals(b)`! For example, `a` and `b` could be `[2..4]` and `(1..5)`, or the empty ranges `[3..3)` and `[4..4)`.


    **Warning:** Be extremely careful what you do with the `asSet` view of a large range set (such as `ImmutableRangeSet.of(Range.greaterThan(0))`). Certain operations on such a set can be performed efficiently, but others (such as <xref uid="java.util.Set.hashCode" data-throw-if-not-resolved="false">Set#hashCode</xref> or <xref uid="" data-throw-if-not-resolved="false">Collections#frequency</xref>) can cause major performance problems.


    The returned set's <xref uid="java.lang.Object.toString" data-throw-if-not-resolved="false">Object#toString</xref> method returns a short-hand form of the set's contents, such as `"[1..100]`"\}.
  syntax:
    content: public ImmutableSortedSet<C> asSet(DiscreteDomain<C> domain)
    parameters:
    - id: domain
      type: com.azure.cosmos.implementation.guava25.collect.DiscreteDomain<C>
    return:
      type: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet<C>
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableRangeSet.complement()
  id: complement()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableRangeSet
  langs:
  - java
  name: complement()
  nameWithType: ImmutableRangeSet<C>.complement()
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableRangeSet<C>.complement()
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableRangeSet.complement*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  syntax:
    content: public ImmutableRangeSet<C> complement()
    return:
      type: com.azure.cosmos.implementation.guava25.collect.ImmutableRangeSet<C>
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableRangeSet.difference(com.azure.cosmos.implementation.guava25.collect.RangeSet<C>)
  id: difference(com.azure.cosmos.implementation.guava25.collect.RangeSet<C>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableRangeSet
  langs:
  - java
  name: difference(RangeSet<C> other)
  nameWithType: ImmutableRangeSet<C>.difference(RangeSet<C> other)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableRangeSet<C>.difference(RangeSet<C> other)
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableRangeSet.difference*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Returns a new range set consisting of the difference of this range set and `other`.


    This is essentially the same as `TreeRangeSet.create(this).removeAll(other)` except it returns an `ImmutableRangeSet`.
  syntax:
    content: public ImmutableRangeSet<C> difference(RangeSet<C> other)
    parameters:
    - id: other
      type: com.azure.cosmos.implementation.guava25.collect.RangeSet<C>
    return:
      type: com.azure.cosmos.implementation.guava25.collect.ImmutableRangeSet<C>
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableRangeSet.encloses(com.azure.cosmos.implementation.guava25.collect.Range<C>)
  id: encloses(com.azure.cosmos.implementation.guava25.collect.Range<C>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableRangeSet
  langs:
  - java
  name: encloses(Range<C> otherRange)
  nameWithType: ImmutableRangeSet<C>.encloses(Range<C> otherRange)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableRangeSet<C>.encloses(Range<C> otherRange)
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableRangeSet.encloses*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Returns `true` if there exists a member range in this range set which <xref uid="com.azure.cosmos.implementation.guava25.collect.Range.encloses" data-throw-if-not-resolved="false">encloses</xref> the specified range.
  syntax:
    content: public boolean encloses(Range<C> otherRange)
    parameters:
    - id: otherRange
      type: com.azure.cosmos.implementation.guava25.collect.Range<C>
    return:
      type: boolean
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableRangeSet.intersection(com.azure.cosmos.implementation.guava25.collect.RangeSet<C>)
  id: intersection(com.azure.cosmos.implementation.guava25.collect.RangeSet<C>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableRangeSet
  langs:
  - java
  name: intersection(RangeSet<C> other)
  nameWithType: ImmutableRangeSet<C>.intersection(RangeSet<C> other)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableRangeSet<C>.intersection(RangeSet<C> other)
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableRangeSet.intersection*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Returns a new range set consisting of the intersection of this range set and `other`.


    This is essentially the same as `TreeRangeSet.create(this).removeAll(other.complement())` except it returns an `ImmutableRangeSet`.
  syntax:
    content: public ImmutableRangeSet<C> intersection(RangeSet<C> other)
    parameters:
    - id: other
      type: com.azure.cosmos.implementation.guava25.collect.RangeSet<C>
    return:
      type: com.azure.cosmos.implementation.guava25.collect.ImmutableRangeSet<C>
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableRangeSet.intersects(com.azure.cosmos.implementation.guava25.collect.Range<C>)
  id: intersects(com.azure.cosmos.implementation.guava25.collect.Range<C>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableRangeSet
  langs:
  - java
  name: intersects(Range<C> otherRange)
  nameWithType: ImmutableRangeSet<C>.intersects(Range<C> otherRange)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableRangeSet<C>.intersects(Range<C> otherRange)
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableRangeSet.intersects*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Returns `true` if there exists a non-empty range enclosed by both a member range in this range set and the specified range. This is equivalent to calling `subRangeSet(otherRange)` and testing whether the resulting range set is non-empty.
  syntax:
    content: public boolean intersects(Range<C> otherRange)
    parameters:
    - id: otherRange
      type: com.azure.cosmos.implementation.guava25.collect.Range<C>
    return:
      type: boolean
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableRangeSet.isEmpty()
  id: isEmpty()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableRangeSet
  langs:
  - java
  name: isEmpty()
  nameWithType: ImmutableRangeSet<C>.isEmpty()
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableRangeSet<C>.isEmpty()
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableRangeSet.isEmpty*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Returns `true` if this range set contains no ranges.
  syntax:
    content: public boolean isEmpty()
    return:
      type: boolean
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableRangeSet.rangeContaining(C)
  id: rangeContaining(C)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableRangeSet
  langs:
  - java
  name: rangeContaining(C value)
  nameWithType: ImmutableRangeSet<C>.rangeContaining(C value)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableRangeSet<C>.rangeContaining(C value)
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableRangeSet.rangeContaining*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Returns the unique range from this range set that <xref uid="com.azure.cosmos.implementation.guava25.collect.Range.contains" data-throw-if-not-resolved="false">contains</xref> `value`, or `null` if this range set does not contain `value`.
  syntax:
    content: public Range<C> rangeContaining(C value)
    parameters:
    - id: value
      type: C
    return:
      type: com.azure.cosmos.implementation.guava25.collect.Range<C>
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableRangeSet.remove(com.azure.cosmos.implementation.guava25.collect.Range<C>)
  id: remove(com.azure.cosmos.implementation.guava25.collect.Range<C>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableRangeSet
  langs:
  - java
  name: remove(Range<C> range)
  nameWithType: ImmutableRangeSet<C>.remove(Range<C> range)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableRangeSet<C>.remove(Range<C> range)
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableRangeSet.remove*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Guaranteed to throw an exception and leave the `RangeSet` unmodified.
  syntax:
    content: public void remove(Range<C> range)
    parameters:
    - id: range
      type: com.azure.cosmos.implementation.guava25.collect.Range<C>
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableRangeSet.removeAll(com.azure.cosmos.implementation.guava25.collect.RangeSet<C>)
  id: removeAll(com.azure.cosmos.implementation.guava25.collect.RangeSet<C>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableRangeSet
  langs:
  - java
  name: removeAll(RangeSet<C> other)
  nameWithType: ImmutableRangeSet<C>.removeAll(RangeSet<C> other)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableRangeSet<C>.removeAll(RangeSet<C> other)
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableRangeSet.removeAll*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Guaranteed to throw an exception and leave the `RangeSet` unmodified.
  syntax:
    content: public void removeAll(RangeSet<C> other)
    parameters:
    - id: other
      type: com.azure.cosmos.implementation.guava25.collect.RangeSet<C>
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableRangeSet.removeAll(java.lang.Iterable<com.azure.cosmos.implementation.guava25.collect.Range<C>>)
  id: removeAll(java.lang.Iterable<com.azure.cosmos.implementation.guava25.collect.Range<C>>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableRangeSet
  langs:
  - java
  name: removeAll(Iterable<Range<C>> other)
  nameWithType: ImmutableRangeSet<C>.removeAll(Iterable<Range<C>> other)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableRangeSet<C>.removeAll(Iterable<Range<C>> other)
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableRangeSet.removeAll*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Guaranteed to throw an exception and leave the `RangeSet` unmodified.
  syntax:
    content: public void removeAll(Iterable<Range<C>> other)
    parameters:
    - id: other
      type: java.lang.Iterable<com.azure.cosmos.implementation.guava25.collect.Range<C>>
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableRangeSet.span()
  id: span()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableRangeSet
  langs:
  - java
  name: span()
  nameWithType: ImmutableRangeSet<C>.span()
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableRangeSet<C>.span()
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableRangeSet.span*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  syntax:
    content: public Range<C> span()
    return:
      type: com.azure.cosmos.implementation.guava25.collect.Range<C>
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableRangeSet.subRangeSet(com.azure.cosmos.implementation.guava25.collect.Range<C>)
  id: subRangeSet(com.azure.cosmos.implementation.guava25.collect.Range<C>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableRangeSet
  langs:
  - java
  name: subRangeSet(Range<C> range)
  nameWithType: ImmutableRangeSet<C>.subRangeSet(Range<C> range)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableRangeSet<C>.subRangeSet(Range<C> range)
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableRangeSet.subRangeSet*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Returns a view of the intersection of this range set with the given range.
  syntax:
    content: public ImmutableRangeSet<C> subRangeSet(Range<C> range)
    parameters:
    - id: range
      type: com.azure.cosmos.implementation.guava25.collect.Range<C>
    return:
      type: com.azure.cosmos.implementation.guava25.collect.ImmutableRangeSet<C>
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableRangeSet.union(com.azure.cosmos.implementation.guava25.collect.RangeSet<C>)
  id: union(com.azure.cosmos.implementation.guava25.collect.RangeSet<C>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableRangeSet
  langs:
  - java
  name: union(RangeSet<C> other)
  nameWithType: ImmutableRangeSet<C>.union(RangeSet<C> other)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableRangeSet<C>.union(RangeSet<C> other)
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableRangeSet.union*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Returns a new range set consisting of the union of this range set and `other`.


    This is essentially the same as `TreeRangeSet.create(this).addAll(other)` except it returns an `ImmutableRangeSet`.
  syntax:
    content: public ImmutableRangeSet<C> union(RangeSet<C> other)
    parameters:
    - id: other
      type: com.azure.cosmos.implementation.guava25.collect.RangeSet<C>
    return:
      type: com.azure.cosmos.implementation.guava25.collect.ImmutableRangeSet<C>
references:
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableList<com.azure.cosmos.implementation.guava25.collect.Range<C>>
  spec.java:
  - uid: com.azure.cosmos.implementation.guava25.collect.ImmutableList
    name: ImmutableList
    fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableList
  - name: <
    fullName: <
  - uid: com.azure.cosmos.implementation.guava25.collect.Range
    name: Range
    fullName: com.azure.cosmos.implementation.guava25.collect.Range
  - name: <
    fullName: <
  - uid: C
    name: C
    fullName: C
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableRangeSet.ImmutableRangeSet*
  name: ImmutableRangeSet
  nameWithType: ImmutableRangeSet<C>.ImmutableRangeSet
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableRangeSet<C>.ImmutableRangeSet
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableRangeSet<C>
  spec.java:
  - uid: com.azure.cosmos.implementation.guava25.collect.ImmutableRangeSet
    name: ImmutableRangeSet
    fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableRangeSet
  - name: <
    fullName: <
  - uid: C
    name: C
    fullName: C
  - name: '>'
    fullName: '>'
- uid: java.util.stream.Collector<com.azure.cosmos.implementation.guava25.collect.Range<E>,?,com.azure.cosmos.implementation.guava25.collect.ImmutableRangeSet<E>>
  spec.java:
  - uid: java.util.stream.Collector
    name: Collector
    fullName: java.util.stream.Collector
  - name: <
    fullName: <
  - uid: com.azure.cosmos.implementation.guava25.collect.Range
    name: Range
    fullName: com.azure.cosmos.implementation.guava25.collect.Range
  - name: <
    fullName: <
  - uid: E
    name: E
    fullName: E
  - name: '>'
    fullName: '>'
  - name: ','
    fullName: ','
  - uid: '?'
    name: '?'
    fullName: '?'
  - name: ','
    fullName: ','
  - uid: com.azure.cosmos.implementation.guava25.collect.ImmutableRangeSet
    name: ImmutableRangeSet
    fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableRangeSet
  - name: <
    fullName: <
  - uid: E
    name: E
    fullName: E
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableRangeSet.toImmutableRangeSet*
  name: <E>toImmutableRangeSet
  nameWithType: ImmutableRangeSet<C>.<E>toImmutableRangeSet
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableRangeSet<C>.<E>toImmutableRangeSet
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableRangeSet.of*
  name: <C>of
  nameWithType: ImmutableRangeSet<C>.<C>of
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableRangeSet<C>.<C>of
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.Range<C>
  spec.java:
  - uid: com.azure.cosmos.implementation.guava25.collect.Range
    name: Range
    fullName: com.azure.cosmos.implementation.guava25.collect.Range
  - name: <
    fullName: <
  - uid: C
    name: C
    fullName: C
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.RangeSet<C>
  spec.java:
  - uid: com.azure.cosmos.implementation.guava25.collect.RangeSet
    name: RangeSet
    fullName: com.azure.cosmos.implementation.guava25.collect.RangeSet
  - name: <
    fullName: <
  - uid: C
    name: C
    fullName: C
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableRangeSet.copyOf*
  name: <C>copyOf
  nameWithType: ImmutableRangeSet<C>.<C>copyOf
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableRangeSet<C>.<C>copyOf
  package: com.azure.cosmos.implementation.guava25.collect
- uid: java.lang.Iterable<com.azure.cosmos.implementation.guava25.collect.Range<C>>
  spec.java:
  - uid: java.lang.Iterable
    name: Iterable
    fullName: java.lang.Iterable
  - name: <
    fullName: <
  - uid: com.azure.cosmos.implementation.guava25.collect.Range
    name: Range
    fullName: com.azure.cosmos.implementation.guava25.collect.Range
  - name: <
    fullName: <
  - uid: C
    name: C
    fullName: C
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableRangeSet.unionOf*
  name: <C>unionOf
  nameWithType: ImmutableRangeSet<C>.<C>unionOf
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableRangeSet<C>.<C>unionOf
  package: com.azure.cosmos.implementation.guava25.collect
- uid: boolean
  spec.java:
  - uid: boolean
    name: boolean
    fullName: boolean
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableRangeSet.intersects*
  name: intersects
  nameWithType: ImmutableRangeSet<C>.intersects
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableRangeSet<C>.intersects
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableRangeSet.encloses*
  name: encloses
  nameWithType: ImmutableRangeSet<C>.encloses
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableRangeSet<C>.encloses
  package: com.azure.cosmos.implementation.guava25.collect
- uid: C
  spec.java:
  - uid: C
    name: C
    fullName: C
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableRangeSet.rangeContaining*
  name: rangeContaining
  nameWithType: ImmutableRangeSet<C>.rangeContaining
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableRangeSet<C>.rangeContaining
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableRangeSet.span*
  name: span
  nameWithType: ImmutableRangeSet<C>.span
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableRangeSet<C>.span
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableRangeSet.isEmpty*
  name: isEmpty
  nameWithType: ImmutableRangeSet<C>.isEmpty
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableRangeSet<C>.isEmpty
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableRangeSet.add*
  name: add
  nameWithType: ImmutableRangeSet<C>.add
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableRangeSet<C>.add
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableRangeSet.addAll*
  name: addAll
  nameWithType: ImmutableRangeSet<C>.addAll
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableRangeSet<C>.addAll
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableRangeSet.remove*
  name: remove
  nameWithType: ImmutableRangeSet<C>.remove
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableRangeSet<C>.remove
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableRangeSet.removeAll*
  name: removeAll
  nameWithType: ImmutableRangeSet<C>.removeAll
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableRangeSet<C>.removeAll
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSet<com.azure.cosmos.implementation.guava25.collect.Range<C>>
  spec.java:
  - uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSet
    name: ImmutableSet
    fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSet
  - name: <
    fullName: <
  - uid: com.azure.cosmos.implementation.guava25.collect.Range
    name: Range
    fullName: com.azure.cosmos.implementation.guava25.collect.Range
  - name: <
    fullName: <
  - uid: C
    name: C
    fullName: C
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableRangeSet.asRanges*
  name: asRanges
  nameWithType: ImmutableRangeSet<C>.asRanges
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableRangeSet<C>.asRanges
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableRangeSet.asDescendingSetOfRanges*
  name: asDescendingSetOfRanges
  nameWithType: ImmutableRangeSet<C>.asDescendingSetOfRanges
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableRangeSet<C>.asDescendingSetOfRanges
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableRangeSet.complement*
  name: complement
  nameWithType: ImmutableRangeSet<C>.complement
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableRangeSet<C>.complement
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableRangeSet.union*
  name: union
  nameWithType: ImmutableRangeSet<C>.union
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableRangeSet<C>.union
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableRangeSet.intersection*
  name: intersection
  nameWithType: ImmutableRangeSet<C>.intersection
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableRangeSet<C>.intersection
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableRangeSet.difference*
  name: difference
  nameWithType: ImmutableRangeSet<C>.difference
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableRangeSet<C>.difference
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableRangeSet.subRangeSet*
  name: subRangeSet
  nameWithType: ImmutableRangeSet<C>.subRangeSet
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableRangeSet<C>.subRangeSet
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.DiscreteDomain<C>
  spec.java:
  - uid: com.azure.cosmos.implementation.guava25.collect.DiscreteDomain
    name: DiscreteDomain
    fullName: com.azure.cosmos.implementation.guava25.collect.DiscreteDomain
  - name: <
    fullName: <
  - uid: C
    name: C
    fullName: C
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet<C>
  spec.java:
  - uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet
    name: ImmutableSortedSet
    fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet
  - name: <
    fullName: <
  - uid: C
    name: C
    fullName: C
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableRangeSet.asSet*
  name: asSet
  nameWithType: ImmutableRangeSet<C>.asSet
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableRangeSet<C>.asSet
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableRangeSet.Builder<C>
  spec.java:
  - uid: com.azure.cosmos.implementation.guava25.collect.ImmutableRangeSet.Builder
    name: Builder
    fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableRangeSet.Builder
  - name: <
    fullName: <
  - uid: C
    name: C
    fullName: C
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableRangeSet.builder*
  name: <C>builder
  nameWithType: ImmutableRangeSet<C>.<C>builder
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableRangeSet<C>.<C>builder
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.AbstractRangeSet<C>
  name: AbstractRangeSet<C>
  nameWithType: AbstractRangeSet<C>
  fullName: com.azure.cosmos.implementation.guava25.collect.AbstractRangeSet<C>
- uid: java.io.Serializable
  name: Serializable
  nameWithType: Serializable
  fullName: java.io.Serializable
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: com.azure.cosmos.implementation.guava25.collect.AbstractRangeSet.hashCode()
  name: AbstractRangeSet.hashCode()
  nameWithType: AbstractRangeSet.hashCode()
  fullName: com.azure.cosmos.implementation.guava25.collect.AbstractRangeSet.hashCode()
- uid: java.lang.Object.finalize()
  name: Object.finalize()
  nameWithType: Object.finalize()
  fullName: java.lang.Object.finalize()
- uid: com.azure.cosmos.implementation.guava25.collect.AbstractRangeSet.enclosesAll(com.azure.cosmos.implementation.guava25.collect.RangeSet<C>)
  name: AbstractRangeSet.enclosesAll(RangeSet<C>)
  nameWithType: AbstractRangeSet.enclosesAll(RangeSet<C>)
  fullName: com.azure.cosmos.implementation.guava25.collect.AbstractRangeSet.enclosesAll(com.azure.cosmos.implementation.guava25.collect.RangeSet<C>)
- uid: com.azure.cosmos.implementation.guava25.collect.AbstractRangeSet.intersects(com.azure.cosmos.implementation.guava25.collect.Range<C>)
  name: AbstractRangeSet.intersects(Range<C>)
  nameWithType: AbstractRangeSet.intersects(Range<C>)
  fullName: com.azure.cosmos.implementation.guava25.collect.AbstractRangeSet.intersects(com.azure.cosmos.implementation.guava25.collect.Range<C>)
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: java.lang.Object.clone()
  name: Object.clone()
  nameWithType: Object.clone()
  fullName: java.lang.Object.clone()
- uid: com.azure.cosmos.implementation.guava25.collect.AbstractRangeSet.addAll(com.azure.cosmos.implementation.guava25.collect.RangeSet<C>)
  name: AbstractRangeSet.addAll(RangeSet<C>)
  nameWithType: AbstractRangeSet.addAll(RangeSet<C>)
  fullName: com.azure.cosmos.implementation.guava25.collect.AbstractRangeSet.addAll(com.azure.cosmos.implementation.guava25.collect.RangeSet<C>)
- uid: com.azure.cosmos.implementation.guava25.collect.AbstractRangeSet.isEmpty()
  name: AbstractRangeSet.isEmpty()
  nameWithType: AbstractRangeSet.isEmpty()
  fullName: com.azure.cosmos.implementation.guava25.collect.AbstractRangeSet.isEmpty()
- uid: com.azure.cosmos.implementation.guava25.collect.AbstractRangeSet.add(com.azure.cosmos.implementation.guava25.collect.Range<C>)
  name: AbstractRangeSet.add(Range<C>)
  nameWithType: AbstractRangeSet.add(Range<C>)
  fullName: com.azure.cosmos.implementation.guava25.collect.AbstractRangeSet.add(com.azure.cosmos.implementation.guava25.collect.Range<C>)
- uid: com.azure.cosmos.implementation.guava25.collect.AbstractRangeSet.remove(com.azure.cosmos.implementation.guava25.collect.Range<C>)
  name: AbstractRangeSet.remove(Range<C>)
  nameWithType: AbstractRangeSet.remove(Range<C>)
  fullName: com.azure.cosmos.implementation.guava25.collect.AbstractRangeSet.remove(com.azure.cosmos.implementation.guava25.collect.Range<C>)
- uid: com.azure.cosmos.implementation.guava25.collect.AbstractRangeSet.encloses(com.azure.cosmos.implementation.guava25.collect.Range<C>)
  name: AbstractRangeSet.encloses(Range<C>)
  nameWithType: AbstractRangeSet.encloses(Range<C>)
  fullName: com.azure.cosmos.implementation.guava25.collect.AbstractRangeSet.encloses(com.azure.cosmos.implementation.guava25.collect.Range<C>)
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: com.azure.cosmos.implementation.guava25.collect.AbstractRangeSet.contains(C)
  name: AbstractRangeSet.contains(C)
  nameWithType: AbstractRangeSet.contains(C)
  fullName: com.azure.cosmos.implementation.guava25.collect.AbstractRangeSet.contains(C)
- uid: com.azure.cosmos.implementation.guava25.collect.AbstractRangeSet.toString()
  name: AbstractRangeSet.toString()
  nameWithType: AbstractRangeSet.toString()
  fullName: com.azure.cosmos.implementation.guava25.collect.AbstractRangeSet.toString()
- uid: com.azure.cosmos.implementation.guava25.collect.AbstractRangeSet.rangeContaining(C)
  name: AbstractRangeSet.rangeContaining(C)
  nameWithType: AbstractRangeSet.rangeContaining(C)
  fullName: com.azure.cosmos.implementation.guava25.collect.AbstractRangeSet.rangeContaining(C)
- uid: com.azure.cosmos.implementation.guava25.collect.AbstractRangeSet.removeAll(com.azure.cosmos.implementation.guava25.collect.RangeSet<C>)
  name: AbstractRangeSet.removeAll(RangeSet<C>)
  nameWithType: AbstractRangeSet.removeAll(RangeSet<C>)
  fullName: com.azure.cosmos.implementation.guava25.collect.AbstractRangeSet.removeAll(com.azure.cosmos.implementation.guava25.collect.RangeSet<C>)
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: com.azure.cosmos.implementation.guava25.collect.AbstractRangeSet.equals(java.lang.Object)
  name: AbstractRangeSet.equals(Object)
  nameWithType: AbstractRangeSet.equals(Object)
  fullName: com.azure.cosmos.implementation.guava25.collect.AbstractRangeSet.equals(java.lang.Object)
- uid: com.azure.cosmos.implementation.guava25.collect.AbstractRangeSet.clear()
  name: AbstractRangeSet.clear()
  nameWithType: AbstractRangeSet.clear()
  fullName: com.azure.cosmos.implementation.guava25.collect.AbstractRangeSet.clear()
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableRangeSet.Builder
  name: ImmutableRangeSet.Builder<C>
  nameWithType: ImmutableRangeSet.Builder<C>
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableRangeSet.Builder<C>
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableList
  name: ImmutableList
  nameWithType: ImmutableList
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableList
- uid: com.azure.cosmos.implementation.guava25.collect.Range
  name: Range
  nameWithType: Range
  fullName: com.azure.cosmos.implementation.guava25.collect.Range
- uid: E
  name: E
  nameWithType: E
  fullName: E
- uid: java.util.stream.Collector
  name: Collector
  nameWithType: Collector
  fullName: java.util.stream.Collector
- uid: E>,?,com.azure.cosmos.implementation.guava25.collect.ImmutableRangeSet
  name: E>,?,ImmutableRangeSet
  nameWithType: E>,?,ImmutableRangeSet
  fullName: E>,?,com.azure.cosmos.implementation.guava25.collect.ImmutableRangeSet
- uid: com.azure.cosmos.implementation.guava25.collect.RangeSet
  name: RangeSet
  nameWithType: RangeSet
  fullName: com.azure.cosmos.implementation.guava25.collect.RangeSet
- uid: java.lang.Iterable
  name: Iterable
  nameWithType: Iterable
  fullName: java.lang.Iterable
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSet
  name: ImmutableSet
  nameWithType: ImmutableSet
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSet
- uid: com.azure.cosmos.implementation.guava25.collect.DiscreteDomain
  name: DiscreteDomain
  nameWithType: DiscreteDomain
  fullName: com.azure.cosmos.implementation.guava25.collect.DiscreteDomain
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet
  name: ImmutableSortedSet
  nameWithType: ImmutableSortedSet
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet
- uid: com.azure.cosmos.implementation.guava25.collect.AbstractRangeSet
  name: AbstractRangeSet
  nameWithType: AbstractRangeSet
  fullName: com.azure.cosmos.implementation.guava25.collect.AbstractRangeSet
- uid: com.azure.cosmos.implementation.guava25.collect.AbstractRangeSet.enclosesAll(com.azure.cosmos.implementation.guava25.collect.RangeSet
  name: AbstractRangeSet.enclosesAll(RangeSet
  nameWithType: AbstractRangeSet.enclosesAll(RangeSet
  fullName: com.azure.cosmos.implementation.guava25.collect.AbstractRangeSet.enclosesAll(com.azure.cosmos.implementation.guava25.collect.RangeSet
- uid: C>)
  name: C>)
  nameWithType: C>)
  fullName: C>)
- uid: com.azure.cosmos.implementation.guava25.collect.AbstractRangeSet.intersects(com.azure.cosmos.implementation.guava25.collect.Range
  name: AbstractRangeSet.intersects(Range
  nameWithType: AbstractRangeSet.intersects(Range
  fullName: com.azure.cosmos.implementation.guava25.collect.AbstractRangeSet.intersects(com.azure.cosmos.implementation.guava25.collect.Range
- uid: com.azure.cosmos.implementation.guava25.collect.AbstractRangeSet.addAll(com.azure.cosmos.implementation.guava25.collect.RangeSet
  name: AbstractRangeSet.addAll(RangeSet
  nameWithType: AbstractRangeSet.addAll(RangeSet
  fullName: com.azure.cosmos.implementation.guava25.collect.AbstractRangeSet.addAll(com.azure.cosmos.implementation.guava25.collect.RangeSet
- uid: com.azure.cosmos.implementation.guava25.collect.AbstractRangeSet.add(com.azure.cosmos.implementation.guava25.collect.Range
  name: AbstractRangeSet.add(Range
  nameWithType: AbstractRangeSet.add(Range
  fullName: com.azure.cosmos.implementation.guava25.collect.AbstractRangeSet.add(com.azure.cosmos.implementation.guava25.collect.Range
- uid: com.azure.cosmos.implementation.guava25.collect.AbstractRangeSet.remove(com.azure.cosmos.implementation.guava25.collect.Range
  name: AbstractRangeSet.remove(Range
  nameWithType: AbstractRangeSet.remove(Range
  fullName: com.azure.cosmos.implementation.guava25.collect.AbstractRangeSet.remove(com.azure.cosmos.implementation.guava25.collect.Range
- uid: com.azure.cosmos.implementation.guava25.collect.AbstractRangeSet.encloses(com.azure.cosmos.implementation.guava25.collect.Range
  name: AbstractRangeSet.encloses(Range
  nameWithType: AbstractRangeSet.encloses(Range
  fullName: com.azure.cosmos.implementation.guava25.collect.AbstractRangeSet.encloses(com.azure.cosmos.implementation.guava25.collect.Range
- uid: com.azure.cosmos.implementation.guava25.collect.AbstractRangeSet.removeAll(com.azure.cosmos.implementation.guava25.collect.RangeSet
  name: AbstractRangeSet.removeAll(RangeSet
  nameWithType: AbstractRangeSet.removeAll(RangeSet
  fullName: com.azure.cosmos.implementation.guava25.collect.AbstractRangeSet.removeAll(com.azure.cosmos.implementation.guava25.collect.RangeSet
