### YamlMime:JavaMember
uid: "com.azure.cosmos.implementation.guava25.collect.Iterables.find*"
fullName: "com.azure.cosmos.implementation.guava25.collect.Iterables.<T>find"
name: "<T>find"
nameWithType: "Iterables.<T>find"
members:
- uid: "com.azure.cosmos.implementation.guava25.collect.Iterables.<T>find(java.lang.Iterable<? extends T>,com.azure.cosmos.implementation.guava25.base.Predicate<? super T>,T)"
  fullName: "com.azure.cosmos.implementation.guava25.collect.Iterables.<T>find(Iterable<? extends T> iterable, Predicate<? super T> predicate, T defaultValue)"
  name: "<T>find(Iterable<? extends T> iterable, Predicate<? super T> predicate, T defaultValue)"
  nameWithType: "Iterables.<T>find(Iterable<? extends T> iterable, Predicate<? super T> predicate, T defaultValue)"
  summary: "Returns the first element in `iterable` that satisfies the given predicate, or `defaultValue` if none found. Note that this can usually be handled more naturally using `tryFind(iterable, predicate).or(defaultValue)`.\n\n**`Stream` equivalent:** `stream.filter(predicate).findFirst().orElse(defaultValue)`"
  parameters:
  - name: "iterable"
    type: "<xref href=\"java.lang.Iterable?alt=java.lang.Iterable&text=Iterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"? extends T?alt=? extends T&text=? extends T\" data-throw-if-not-resolved=\"False\" />&gt;"
  - name: "predicate"
    type: "<xref href=\"com.azure.cosmos.implementation.guava25.base.Predicate?alt=com.azure.cosmos.implementation.guava25.base.Predicate&text=Predicate\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"? super T?alt=? super T&text=? super T\" data-throw-if-not-resolved=\"False\" />&gt;"
  - name: "defaultValue"
    type: "<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public static T <T>find(Iterable<? extends T> iterable, Predicate<? super T> predicate, T defaultValue)"
  returns:
    type: "<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.cosmos.implementation.guava25.collect.Iterables.<T>find(java.lang.Iterable<T>,com.azure.cosmos.implementation.guava25.base.Predicate<? super T>)"
  fullName: "com.azure.cosmos.implementation.guava25.collect.Iterables.<T>find(Iterable<T> iterable, Predicate<? super T> predicate)"
  name: "<T>find(Iterable<T> iterable, Predicate<? super T> predicate)"
  nameWithType: "Iterables.<T>find(Iterable<T> iterable, Predicate<? super T> predicate)"
  summary: "Returns the first element in `iterable` that satisfies the given predicate; use this method only when such an element is known to exist. If it is possible that *no* element will match, use <xref uid=\"com.azure.cosmos.implementation.guava25.collect.Iterables.tryFind\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#tryFind\"></xref> or <xref uid=\"com.azure.cosmos.implementation.guava25.collect.Iterables.find*\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#find(Iterable, Predicate, Object)\"></xref> instead.\n\n**`Stream` equivalent:** `stream.filter(predicate).findFirst().get()`"
  parameters:
  - name: "iterable"
    type: "<xref href=\"java.lang.Iterable?alt=java.lang.Iterable&text=Iterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
  - name: "predicate"
    type: "<xref href=\"com.azure.cosmos.implementation.guava25.base.Predicate?alt=com.azure.cosmos.implementation.guava25.base.Predicate&text=Predicate\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"? super T?alt=? super T&text=? super T\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public static T <T>find(Iterable<T> iterable, Predicate<? super T> predicate)"
  returns:
    type: "<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />"
type: "method"
metadata: {}
package: "com.azure.cosmos.implementation.guava25.collect"
artifact: com.azure:azure-cosmos:4.4.0-beta.1
