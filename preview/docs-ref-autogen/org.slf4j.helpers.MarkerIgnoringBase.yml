### YamlMime:ManagedReference
items:
- uid: org.slf4j.helpers.MarkerIgnoringBase
  id: MarkerIgnoringBase
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.slf4j.helpers
  children:
  - org.slf4j.helpers.MarkerIgnoringBase.MarkerIgnoringBase()
  - org.slf4j.helpers.MarkerIgnoringBase.debug(org.slf4j.Marker,java.lang.String)
  - org.slf4j.helpers.MarkerIgnoringBase.debug(org.slf4j.Marker,java.lang.String,java.lang.Object)
  - org.slf4j.helpers.MarkerIgnoringBase.debug(org.slf4j.Marker,java.lang.String,java.lang.Object,java.lang.Object)
  - org.slf4j.helpers.MarkerIgnoringBase.debug(org.slf4j.Marker,java.lang.String,java.lang.Object...)
  - org.slf4j.helpers.MarkerIgnoringBase.debug(org.slf4j.Marker,java.lang.String,java.lang.Throwable)
  - org.slf4j.helpers.MarkerIgnoringBase.error(org.slf4j.Marker,java.lang.String)
  - org.slf4j.helpers.MarkerIgnoringBase.error(org.slf4j.Marker,java.lang.String,java.lang.Object)
  - org.slf4j.helpers.MarkerIgnoringBase.error(org.slf4j.Marker,java.lang.String,java.lang.Object,java.lang.Object)
  - org.slf4j.helpers.MarkerIgnoringBase.error(org.slf4j.Marker,java.lang.String,java.lang.Object...)
  - org.slf4j.helpers.MarkerIgnoringBase.error(org.slf4j.Marker,java.lang.String,java.lang.Throwable)
  - org.slf4j.helpers.MarkerIgnoringBase.info(org.slf4j.Marker,java.lang.String)
  - org.slf4j.helpers.MarkerIgnoringBase.info(org.slf4j.Marker,java.lang.String,java.lang.Object)
  - org.slf4j.helpers.MarkerIgnoringBase.info(org.slf4j.Marker,java.lang.String,java.lang.Object,java.lang.Object)
  - org.slf4j.helpers.MarkerIgnoringBase.info(org.slf4j.Marker,java.lang.String,java.lang.Object...)
  - org.slf4j.helpers.MarkerIgnoringBase.info(org.slf4j.Marker,java.lang.String,java.lang.Throwable)
  - org.slf4j.helpers.MarkerIgnoringBase.isDebugEnabled(org.slf4j.Marker)
  - org.slf4j.helpers.MarkerIgnoringBase.isErrorEnabled(org.slf4j.Marker)
  - org.slf4j.helpers.MarkerIgnoringBase.isInfoEnabled(org.slf4j.Marker)
  - org.slf4j.helpers.MarkerIgnoringBase.isTraceEnabled(org.slf4j.Marker)
  - org.slf4j.helpers.MarkerIgnoringBase.isWarnEnabled(org.slf4j.Marker)
  - org.slf4j.helpers.MarkerIgnoringBase.toString()
  - org.slf4j.helpers.MarkerIgnoringBase.trace(org.slf4j.Marker,java.lang.String)
  - org.slf4j.helpers.MarkerIgnoringBase.trace(org.slf4j.Marker,java.lang.String,java.lang.Object)
  - org.slf4j.helpers.MarkerIgnoringBase.trace(org.slf4j.Marker,java.lang.String,java.lang.Object,java.lang.Object)
  - org.slf4j.helpers.MarkerIgnoringBase.trace(org.slf4j.Marker,java.lang.String,java.lang.Object...)
  - org.slf4j.helpers.MarkerIgnoringBase.trace(org.slf4j.Marker,java.lang.String,java.lang.Throwable)
  - org.slf4j.helpers.MarkerIgnoringBase.warn(org.slf4j.Marker,java.lang.String)
  - org.slf4j.helpers.MarkerIgnoringBase.warn(org.slf4j.Marker,java.lang.String,java.lang.Object)
  - org.slf4j.helpers.MarkerIgnoringBase.warn(org.slf4j.Marker,java.lang.String,java.lang.Object,java.lang.Object)
  - org.slf4j.helpers.MarkerIgnoringBase.warn(org.slf4j.Marker,java.lang.String,java.lang.Object...)
  - org.slf4j.helpers.MarkerIgnoringBase.warn(org.slf4j.Marker,java.lang.String,java.lang.Throwable)
  langs:
  - java
  name: MarkerIgnoringBase
  nameWithType: MarkerIgnoringBase
  fullName: org.slf4j.helpers.MarkerIgnoringBase
  type: Class
  package: org.slf4j.helpers
  summary: This class serves as base for adapters or native implementations of logging systems lacking Marker support. In this implementation, methods taking marker data simply invoke the corresponding method without the Marker argument, discarding any marker data passed as argument.
  syntax:
    content: public abstract class MarkerIgnoringBase extends NamedLoggerBase implements Logger
  inheritance:
  - java.lang.Object
  - org.slf4j.helpers.NamedLoggerBase
  implements:
  - org.slf4j.Logger
  inheritedMembers:
  - java.lang.Object.clone()
  - java.lang.Object.equals(java.lang.Object)
  - java.lang.Object.finalize()
  - java.lang.Object.getClass()
  - java.lang.Object.hashCode()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.toString()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
  - org.slf4j.helpers.NamedLoggerBase.getName()
  - org.slf4j.helpers.NamedLoggerBase.readResolve()
- uid: org.slf4j.helpers.MarkerIgnoringBase.MarkerIgnoringBase()
  id: MarkerIgnoringBase()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.slf4j.helpers.MarkerIgnoringBase
  langs:
  - java
  name: MarkerIgnoringBase()
  nameWithType: MarkerIgnoringBase.MarkerIgnoringBase()
  fullName: org.slf4j.helpers.MarkerIgnoringBase.MarkerIgnoringBase()
  overload: org.slf4j.helpers.MarkerIgnoringBase.MarkerIgnoringBase*
  type: Constructor
  package: org.slf4j.helpers
  syntax:
    content: public MarkerIgnoringBase()
- uid: org.slf4j.helpers.MarkerIgnoringBase.debug(org.slf4j.Marker,java.lang.String)
  id: debug(org.slf4j.Marker,java.lang.String)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.slf4j.helpers.MarkerIgnoringBase
  langs:
  - java
  name: debug(Marker marker, String msg)
  nameWithType: MarkerIgnoringBase.debug(Marker marker, String msg)
  fullName: org.slf4j.helpers.MarkerIgnoringBase.debug(Marker marker, String msg)
  overload: org.slf4j.helpers.MarkerIgnoringBase.debug*
  type: Method
  package: org.slf4j.helpers
  summary: Log a message with the specific Marker at the DEBUG level.
  syntax:
    content: public void debug(Marker marker, String msg)
    parameters:
    - id: marker
      type: org.slf4j.Marker
    - id: msg
      type: java.lang.String
- uid: org.slf4j.helpers.MarkerIgnoringBase.debug(org.slf4j.Marker,java.lang.String,java.lang.Object)
  id: debug(org.slf4j.Marker,java.lang.String,java.lang.Object)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.slf4j.helpers.MarkerIgnoringBase
  langs:
  - java
  name: debug(Marker marker, String format, Object arg)
  nameWithType: MarkerIgnoringBase.debug(Marker marker, String format, Object arg)
  fullName: org.slf4j.helpers.MarkerIgnoringBase.debug(Marker marker, String format, Object arg)
  overload: org.slf4j.helpers.MarkerIgnoringBase.debug*
  type: Method
  package: org.slf4j.helpers
  summary: This method is similar to <xref uid="org.slf4j.helpers.MarkerIgnoringBase.debug*" data-throw-if-not-resolved="false">#debug(String, Object)</xref> method except that the marker data is also taken into consideration.
  syntax:
    content: public void debug(Marker marker, String format, Object arg)
    parameters:
    - id: marker
      type: org.slf4j.Marker
    - id: format
      type: java.lang.String
    - id: arg
      type: java.lang.Object
- uid: org.slf4j.helpers.MarkerIgnoringBase.debug(org.slf4j.Marker,java.lang.String,java.lang.Object,java.lang.Object)
  id: debug(org.slf4j.Marker,java.lang.String,java.lang.Object,java.lang.Object)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.slf4j.helpers.MarkerIgnoringBase
  langs:
  - java
  name: debug(Marker marker, String format, Object arg1, Object arg2)
  nameWithType: MarkerIgnoringBase.debug(Marker marker, String format, Object arg1, Object arg2)
  fullName: org.slf4j.helpers.MarkerIgnoringBase.debug(Marker marker, String format, Object arg1, Object arg2)
  overload: org.slf4j.helpers.MarkerIgnoringBase.debug*
  type: Method
  package: org.slf4j.helpers
  summary: This method is similar to <xref uid="org.slf4j.helpers.MarkerIgnoringBase.debug*" data-throw-if-not-resolved="false">#debug(String, Object, Object)</xref> method except that the marker data is also taken into consideration.
  syntax:
    content: public void debug(Marker marker, String format, Object arg1, Object arg2)
    parameters:
    - id: marker
      type: org.slf4j.Marker
    - id: format
      type: java.lang.String
    - id: arg1
      type: java.lang.Object
    - id: arg2
      type: java.lang.Object
- uid: org.slf4j.helpers.MarkerIgnoringBase.debug(org.slf4j.Marker,java.lang.String,java.lang.Object...)
  id: debug(org.slf4j.Marker,java.lang.String,java.lang.Object...)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.slf4j.helpers.MarkerIgnoringBase
  langs:
  - java
  name: debug(Marker marker, String format, Object[] arguments)
  nameWithType: MarkerIgnoringBase.debug(Marker marker, String format, Object[] arguments)
  fullName: org.slf4j.helpers.MarkerIgnoringBase.debug(Marker marker, String format, Object[] arguments)
  overload: org.slf4j.helpers.MarkerIgnoringBase.debug*
  type: Method
  package: org.slf4j.helpers
  summary: This method is similar to <xref uid="org.slf4j.helpers.MarkerIgnoringBase.debug*" data-throw-if-not-resolved="false">#debug(String, Object...)</xref> method except that the marker data is also taken into consideration.
  syntax:
    content: public void debug(Marker marker, String format, Object[] arguments)
    parameters:
    - id: marker
      type: org.slf4j.Marker
    - id: format
      type: java.lang.String
    - id: arguments
      type: java.lang.Object[]
- uid: org.slf4j.helpers.MarkerIgnoringBase.debug(org.slf4j.Marker,java.lang.String,java.lang.Throwable)
  id: debug(org.slf4j.Marker,java.lang.String,java.lang.Throwable)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.slf4j.helpers.MarkerIgnoringBase
  langs:
  - java
  name: debug(Marker marker, String msg, Throwable t)
  nameWithType: MarkerIgnoringBase.debug(Marker marker, String msg, Throwable t)
  fullName: org.slf4j.helpers.MarkerIgnoringBase.debug(Marker marker, String msg, Throwable t)
  overload: org.slf4j.helpers.MarkerIgnoringBase.debug*
  type: Method
  package: org.slf4j.helpers
  summary: This method is similar to <xref uid="org.slf4j.helpers.MarkerIgnoringBase.debug*" data-throw-if-not-resolved="false">#debug(String, Throwable)</xref> method except that the marker data is also taken into consideration.
  syntax:
    content: public void debug(Marker marker, String msg, Throwable t)
    parameters:
    - id: marker
      type: org.slf4j.Marker
    - id: msg
      type: java.lang.String
    - id: t
      type: java.lang.Throwable
- uid: org.slf4j.helpers.MarkerIgnoringBase.error(org.slf4j.Marker,java.lang.String)
  id: error(org.slf4j.Marker,java.lang.String)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.slf4j.helpers.MarkerIgnoringBase
  langs:
  - java
  name: error(Marker marker, String msg)
  nameWithType: MarkerIgnoringBase.error(Marker marker, String msg)
  fullName: org.slf4j.helpers.MarkerIgnoringBase.error(Marker marker, String msg)
  overload: org.slf4j.helpers.MarkerIgnoringBase.error*
  type: Method
  package: org.slf4j.helpers
  summary: Log a message with the specific Marker at the ERROR level.
  syntax:
    content: public void error(Marker marker, String msg)
    parameters:
    - id: marker
      type: org.slf4j.Marker
    - id: msg
      type: java.lang.String
- uid: org.slf4j.helpers.MarkerIgnoringBase.error(org.slf4j.Marker,java.lang.String,java.lang.Object)
  id: error(org.slf4j.Marker,java.lang.String,java.lang.Object)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.slf4j.helpers.MarkerIgnoringBase
  langs:
  - java
  name: error(Marker marker, String format, Object arg)
  nameWithType: MarkerIgnoringBase.error(Marker marker, String format, Object arg)
  fullName: org.slf4j.helpers.MarkerIgnoringBase.error(Marker marker, String format, Object arg)
  overload: org.slf4j.helpers.MarkerIgnoringBase.error*
  type: Method
  package: org.slf4j.helpers
  summary: This method is similar to <xref uid="org.slf4j.helpers.MarkerIgnoringBase.error*" data-throw-if-not-resolved="false">#error(String, Object)</xref> method except that the marker data is also taken into consideration.
  syntax:
    content: public void error(Marker marker, String format, Object arg)
    parameters:
    - id: marker
      type: org.slf4j.Marker
    - id: format
      type: java.lang.String
    - id: arg
      type: java.lang.Object
- uid: org.slf4j.helpers.MarkerIgnoringBase.error(org.slf4j.Marker,java.lang.String,java.lang.Object,java.lang.Object)
  id: error(org.slf4j.Marker,java.lang.String,java.lang.Object,java.lang.Object)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.slf4j.helpers.MarkerIgnoringBase
  langs:
  - java
  name: error(Marker marker, String format, Object arg1, Object arg2)
  nameWithType: MarkerIgnoringBase.error(Marker marker, String format, Object arg1, Object arg2)
  fullName: org.slf4j.helpers.MarkerIgnoringBase.error(Marker marker, String format, Object arg1, Object arg2)
  overload: org.slf4j.helpers.MarkerIgnoringBase.error*
  type: Method
  package: org.slf4j.helpers
  summary: This method is similar to <xref uid="org.slf4j.helpers.MarkerIgnoringBase.error*" data-throw-if-not-resolved="false">#error(String, Object, Object)</xref> method except that the marker data is also taken into consideration.
  syntax:
    content: public void error(Marker marker, String format, Object arg1, Object arg2)
    parameters:
    - id: marker
      type: org.slf4j.Marker
    - id: format
      type: java.lang.String
    - id: arg1
      type: java.lang.Object
    - id: arg2
      type: java.lang.Object
- uid: org.slf4j.helpers.MarkerIgnoringBase.error(org.slf4j.Marker,java.lang.String,java.lang.Object...)
  id: error(org.slf4j.Marker,java.lang.String,java.lang.Object...)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.slf4j.helpers.MarkerIgnoringBase
  langs:
  - java
  name: error(Marker marker, String format, Object[] arguments)
  nameWithType: MarkerIgnoringBase.error(Marker marker, String format, Object[] arguments)
  fullName: org.slf4j.helpers.MarkerIgnoringBase.error(Marker marker, String format, Object[] arguments)
  overload: org.slf4j.helpers.MarkerIgnoringBase.error*
  type: Method
  package: org.slf4j.helpers
  summary: This method is similar to <xref uid="org.slf4j.helpers.MarkerIgnoringBase.error*" data-throw-if-not-resolved="false">#error(String, Object...)</xref> method except that the marker data is also taken into consideration.
  syntax:
    content: public void error(Marker marker, String format, Object[] arguments)
    parameters:
    - id: marker
      type: org.slf4j.Marker
    - id: format
      type: java.lang.String
    - id: arguments
      type: java.lang.Object[]
- uid: org.slf4j.helpers.MarkerIgnoringBase.error(org.slf4j.Marker,java.lang.String,java.lang.Throwable)
  id: error(org.slf4j.Marker,java.lang.String,java.lang.Throwable)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.slf4j.helpers.MarkerIgnoringBase
  langs:
  - java
  name: error(Marker marker, String msg, Throwable t)
  nameWithType: MarkerIgnoringBase.error(Marker marker, String msg, Throwable t)
  fullName: org.slf4j.helpers.MarkerIgnoringBase.error(Marker marker, String msg, Throwable t)
  overload: org.slf4j.helpers.MarkerIgnoringBase.error*
  type: Method
  package: org.slf4j.helpers
  summary: This method is similar to <xref uid="org.slf4j.helpers.MarkerIgnoringBase.error*" data-throw-if-not-resolved="false">#error(String, Throwable)</xref> method except that the marker data is also taken into consideration.
  syntax:
    content: public void error(Marker marker, String msg, Throwable t)
    parameters:
    - id: marker
      type: org.slf4j.Marker
    - id: msg
      type: java.lang.String
    - id: t
      type: java.lang.Throwable
- uid: org.slf4j.helpers.MarkerIgnoringBase.info(org.slf4j.Marker,java.lang.String)
  id: info(org.slf4j.Marker,java.lang.String)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.slf4j.helpers.MarkerIgnoringBase
  langs:
  - java
  name: info(Marker marker, String msg)
  nameWithType: MarkerIgnoringBase.info(Marker marker, String msg)
  fullName: org.slf4j.helpers.MarkerIgnoringBase.info(Marker marker, String msg)
  overload: org.slf4j.helpers.MarkerIgnoringBase.info*
  type: Method
  package: org.slf4j.helpers
  summary: Log a message with the specific Marker at the INFO level.
  syntax:
    content: public void info(Marker marker, String msg)
    parameters:
    - id: marker
      type: org.slf4j.Marker
    - id: msg
      type: java.lang.String
- uid: org.slf4j.helpers.MarkerIgnoringBase.info(org.slf4j.Marker,java.lang.String,java.lang.Object)
  id: info(org.slf4j.Marker,java.lang.String,java.lang.Object)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.slf4j.helpers.MarkerIgnoringBase
  langs:
  - java
  name: info(Marker marker, String format, Object arg)
  nameWithType: MarkerIgnoringBase.info(Marker marker, String format, Object arg)
  fullName: org.slf4j.helpers.MarkerIgnoringBase.info(Marker marker, String format, Object arg)
  overload: org.slf4j.helpers.MarkerIgnoringBase.info*
  type: Method
  package: org.slf4j.helpers
  summary: This method is similar to <xref uid="org.slf4j.helpers.MarkerIgnoringBase.info*" data-throw-if-not-resolved="false">#info(String, Object)</xref> method except that the marker data is also taken into consideration.
  syntax:
    content: public void info(Marker marker, String format, Object arg)
    parameters:
    - id: marker
      type: org.slf4j.Marker
    - id: format
      type: java.lang.String
    - id: arg
      type: java.lang.Object
- uid: org.slf4j.helpers.MarkerIgnoringBase.info(org.slf4j.Marker,java.lang.String,java.lang.Object,java.lang.Object)
  id: info(org.slf4j.Marker,java.lang.String,java.lang.Object,java.lang.Object)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.slf4j.helpers.MarkerIgnoringBase
  langs:
  - java
  name: info(Marker marker, String format, Object arg1, Object arg2)
  nameWithType: MarkerIgnoringBase.info(Marker marker, String format, Object arg1, Object arg2)
  fullName: org.slf4j.helpers.MarkerIgnoringBase.info(Marker marker, String format, Object arg1, Object arg2)
  overload: org.slf4j.helpers.MarkerIgnoringBase.info*
  type: Method
  package: org.slf4j.helpers
  summary: This method is similar to <xref uid="org.slf4j.helpers.MarkerIgnoringBase.info*" data-throw-if-not-resolved="false">#info(String, Object, Object)</xref> method except that the marker data is also taken into consideration.
  syntax:
    content: public void info(Marker marker, String format, Object arg1, Object arg2)
    parameters:
    - id: marker
      type: org.slf4j.Marker
    - id: format
      type: java.lang.String
    - id: arg1
      type: java.lang.Object
    - id: arg2
      type: java.lang.Object
- uid: org.slf4j.helpers.MarkerIgnoringBase.info(org.slf4j.Marker,java.lang.String,java.lang.Object...)
  id: info(org.slf4j.Marker,java.lang.String,java.lang.Object...)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.slf4j.helpers.MarkerIgnoringBase
  langs:
  - java
  name: info(Marker marker, String format, Object[] arguments)
  nameWithType: MarkerIgnoringBase.info(Marker marker, String format, Object[] arguments)
  fullName: org.slf4j.helpers.MarkerIgnoringBase.info(Marker marker, String format, Object[] arguments)
  overload: org.slf4j.helpers.MarkerIgnoringBase.info*
  type: Method
  package: org.slf4j.helpers
  summary: This method is similar to <xref uid="org.slf4j.helpers.MarkerIgnoringBase.info*" data-throw-if-not-resolved="false">#info(String, Object...)</xref> method except that the marker data is also taken into consideration.
  syntax:
    content: public void info(Marker marker, String format, Object[] arguments)
    parameters:
    - id: marker
      type: org.slf4j.Marker
    - id: format
      type: java.lang.String
    - id: arguments
      type: java.lang.Object[]
- uid: org.slf4j.helpers.MarkerIgnoringBase.info(org.slf4j.Marker,java.lang.String,java.lang.Throwable)
  id: info(org.slf4j.Marker,java.lang.String,java.lang.Throwable)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.slf4j.helpers.MarkerIgnoringBase
  langs:
  - java
  name: info(Marker marker, String msg, Throwable t)
  nameWithType: MarkerIgnoringBase.info(Marker marker, String msg, Throwable t)
  fullName: org.slf4j.helpers.MarkerIgnoringBase.info(Marker marker, String msg, Throwable t)
  overload: org.slf4j.helpers.MarkerIgnoringBase.info*
  type: Method
  package: org.slf4j.helpers
  summary: This method is similar to <xref uid="org.slf4j.helpers.MarkerIgnoringBase.info*" data-throw-if-not-resolved="false">#info(String, Throwable)</xref> method except that the marker data is also taken into consideration.
  syntax:
    content: public void info(Marker marker, String msg, Throwable t)
    parameters:
    - id: marker
      type: org.slf4j.Marker
    - id: msg
      type: java.lang.String
    - id: t
      type: java.lang.Throwable
- uid: org.slf4j.helpers.MarkerIgnoringBase.isDebugEnabled(org.slf4j.Marker)
  id: isDebugEnabled(org.slf4j.Marker)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.slf4j.helpers.MarkerIgnoringBase
  langs:
  - java
  name: isDebugEnabled(Marker marker)
  nameWithType: MarkerIgnoringBase.isDebugEnabled(Marker marker)
  fullName: org.slf4j.helpers.MarkerIgnoringBase.isDebugEnabled(Marker marker)
  overload: org.slf4j.helpers.MarkerIgnoringBase.isDebugEnabled*
  type: Method
  package: org.slf4j.helpers
  summary: Similar to <xref uid="org.slf4j.helpers.MarkerIgnoringBase.isDebugEnabled*" data-throw-if-not-resolved="false">#isDebugEnabled()</xref> method except that the marker data is also taken into account.
  syntax:
    content: public boolean isDebugEnabled(Marker marker)
    parameters:
    - id: marker
      type: org.slf4j.Marker
    return:
      type: boolean
- uid: org.slf4j.helpers.MarkerIgnoringBase.isErrorEnabled(org.slf4j.Marker)
  id: isErrorEnabled(org.slf4j.Marker)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.slf4j.helpers.MarkerIgnoringBase
  langs:
  - java
  name: isErrorEnabled(Marker marker)
  nameWithType: MarkerIgnoringBase.isErrorEnabled(Marker marker)
  fullName: org.slf4j.helpers.MarkerIgnoringBase.isErrorEnabled(Marker marker)
  overload: org.slf4j.helpers.MarkerIgnoringBase.isErrorEnabled*
  type: Method
  package: org.slf4j.helpers
  summary: Similar to <xref uid="org.slf4j.helpers.MarkerIgnoringBase.isErrorEnabled*" data-throw-if-not-resolved="false">#isErrorEnabled()</xref> method except that the marker data is also taken into consideration.
  syntax:
    content: public boolean isErrorEnabled(Marker marker)
    parameters:
    - id: marker
      type: org.slf4j.Marker
    return:
      type: boolean
- uid: org.slf4j.helpers.MarkerIgnoringBase.isInfoEnabled(org.slf4j.Marker)
  id: isInfoEnabled(org.slf4j.Marker)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.slf4j.helpers.MarkerIgnoringBase
  langs:
  - java
  name: isInfoEnabled(Marker marker)
  nameWithType: MarkerIgnoringBase.isInfoEnabled(Marker marker)
  fullName: org.slf4j.helpers.MarkerIgnoringBase.isInfoEnabled(Marker marker)
  overload: org.slf4j.helpers.MarkerIgnoringBase.isInfoEnabled*
  type: Method
  package: org.slf4j.helpers
  summary: Similar to <xref uid="org.slf4j.helpers.MarkerIgnoringBase.isInfoEnabled*" data-throw-if-not-resolved="false">#isInfoEnabled()</xref> method except that the marker data is also taken into consideration.
  syntax:
    content: public boolean isInfoEnabled(Marker marker)
    parameters:
    - id: marker
      type: org.slf4j.Marker
    return:
      type: boolean
- uid: org.slf4j.helpers.MarkerIgnoringBase.isTraceEnabled(org.slf4j.Marker)
  id: isTraceEnabled(org.slf4j.Marker)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.slf4j.helpers.MarkerIgnoringBase
  langs:
  - java
  name: isTraceEnabled(Marker marker)
  nameWithType: MarkerIgnoringBase.isTraceEnabled(Marker marker)
  fullName: org.slf4j.helpers.MarkerIgnoringBase.isTraceEnabled(Marker marker)
  overload: org.slf4j.helpers.MarkerIgnoringBase.isTraceEnabled*
  type: Method
  package: org.slf4j.helpers
  summary: Similar to <xref uid="org.slf4j.helpers.MarkerIgnoringBase.isTraceEnabled*" data-throw-if-not-resolved="false">#isTraceEnabled()</xref> method except that the marker data is also taken into account.
  syntax:
    content: public boolean isTraceEnabled(Marker marker)
    parameters:
    - id: marker
      type: org.slf4j.Marker
    return:
      type: boolean
- uid: org.slf4j.helpers.MarkerIgnoringBase.isWarnEnabled(org.slf4j.Marker)
  id: isWarnEnabled(org.slf4j.Marker)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.slf4j.helpers.MarkerIgnoringBase
  langs:
  - java
  name: isWarnEnabled(Marker marker)
  nameWithType: MarkerIgnoringBase.isWarnEnabled(Marker marker)
  fullName: org.slf4j.helpers.MarkerIgnoringBase.isWarnEnabled(Marker marker)
  overload: org.slf4j.helpers.MarkerIgnoringBase.isWarnEnabled*
  type: Method
  package: org.slf4j.helpers
  summary: Similar to <xref uid="org.slf4j.helpers.MarkerIgnoringBase.isWarnEnabled*" data-throw-if-not-resolved="false">#isWarnEnabled()</xref> method except that the marker data is also taken into consideration.
  syntax:
    content: public boolean isWarnEnabled(Marker marker)
    parameters:
    - id: marker
      type: org.slf4j.Marker
    return:
      type: boolean
- uid: org.slf4j.helpers.MarkerIgnoringBase.toString()
  id: toString()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.slf4j.helpers.MarkerIgnoringBase
  langs:
  - java
  name: toString()
  nameWithType: MarkerIgnoringBase.toString()
  fullName: org.slf4j.helpers.MarkerIgnoringBase.toString()
  overload: org.slf4j.helpers.MarkerIgnoringBase.toString*
  type: Method
  package: org.slf4j.helpers
  syntax:
    content: public String toString()
    return:
      type: java.lang.String
- uid: org.slf4j.helpers.MarkerIgnoringBase.trace(org.slf4j.Marker,java.lang.String)
  id: trace(org.slf4j.Marker,java.lang.String)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.slf4j.helpers.MarkerIgnoringBase
  langs:
  - java
  name: trace(Marker marker, String msg)
  nameWithType: MarkerIgnoringBase.trace(Marker marker, String msg)
  fullName: org.slf4j.helpers.MarkerIgnoringBase.trace(Marker marker, String msg)
  overload: org.slf4j.helpers.MarkerIgnoringBase.trace*
  type: Method
  package: org.slf4j.helpers
  summary: Log a message with the specific Marker at the TRACE level.
  syntax:
    content: public void trace(Marker marker, String msg)
    parameters:
    - id: marker
      type: org.slf4j.Marker
    - id: msg
      type: java.lang.String
- uid: org.slf4j.helpers.MarkerIgnoringBase.trace(org.slf4j.Marker,java.lang.String,java.lang.Object)
  id: trace(org.slf4j.Marker,java.lang.String,java.lang.Object)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.slf4j.helpers.MarkerIgnoringBase
  langs:
  - java
  name: trace(Marker marker, String format, Object arg)
  nameWithType: MarkerIgnoringBase.trace(Marker marker, String format, Object arg)
  fullName: org.slf4j.helpers.MarkerIgnoringBase.trace(Marker marker, String format, Object arg)
  overload: org.slf4j.helpers.MarkerIgnoringBase.trace*
  type: Method
  package: org.slf4j.helpers
  summary: This method is similar to <xref uid="org.slf4j.helpers.MarkerIgnoringBase.trace*" data-throw-if-not-resolved="false">#trace(String, Object)</xref> method except that the marker data is also taken into consideration.
  syntax:
    content: public void trace(Marker marker, String format, Object arg)
    parameters:
    - id: marker
      type: org.slf4j.Marker
    - id: format
      type: java.lang.String
    - id: arg
      type: java.lang.Object
- uid: org.slf4j.helpers.MarkerIgnoringBase.trace(org.slf4j.Marker,java.lang.String,java.lang.Object,java.lang.Object)
  id: trace(org.slf4j.Marker,java.lang.String,java.lang.Object,java.lang.Object)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.slf4j.helpers.MarkerIgnoringBase
  langs:
  - java
  name: trace(Marker marker, String format, Object arg1, Object arg2)
  nameWithType: MarkerIgnoringBase.trace(Marker marker, String format, Object arg1, Object arg2)
  fullName: org.slf4j.helpers.MarkerIgnoringBase.trace(Marker marker, String format, Object arg1, Object arg2)
  overload: org.slf4j.helpers.MarkerIgnoringBase.trace*
  type: Method
  package: org.slf4j.helpers
  summary: This method is similar to <xref uid="org.slf4j.helpers.MarkerIgnoringBase.trace*" data-throw-if-not-resolved="false">#trace(String, Object, Object)</xref> method except that the marker data is also taken into consideration.
  syntax:
    content: public void trace(Marker marker, String format, Object arg1, Object arg2)
    parameters:
    - id: marker
      type: org.slf4j.Marker
    - id: format
      type: java.lang.String
    - id: arg1
      type: java.lang.Object
    - id: arg2
      type: java.lang.Object
- uid: org.slf4j.helpers.MarkerIgnoringBase.trace(org.slf4j.Marker,java.lang.String,java.lang.Object...)
  id: trace(org.slf4j.Marker,java.lang.String,java.lang.Object...)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.slf4j.helpers.MarkerIgnoringBase
  langs:
  - java
  name: trace(Marker marker, String format, Object[] arguments)
  nameWithType: MarkerIgnoringBase.trace(Marker marker, String format, Object[] arguments)
  fullName: org.slf4j.helpers.MarkerIgnoringBase.trace(Marker marker, String format, Object[] arguments)
  overload: org.slf4j.helpers.MarkerIgnoringBase.trace*
  type: Method
  package: org.slf4j.helpers
  summary: This method is similar to <xref uid="org.slf4j.helpers.MarkerIgnoringBase.trace*" data-throw-if-not-resolved="false">#trace(String, Object...)</xref> method except that the marker data is also taken into consideration.
  syntax:
    content: public void trace(Marker marker, String format, Object[] arguments)
    parameters:
    - id: marker
      type: org.slf4j.Marker
    - id: format
      type: java.lang.String
    - id: arguments
      type: java.lang.Object[]
- uid: org.slf4j.helpers.MarkerIgnoringBase.trace(org.slf4j.Marker,java.lang.String,java.lang.Throwable)
  id: trace(org.slf4j.Marker,java.lang.String,java.lang.Throwable)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.slf4j.helpers.MarkerIgnoringBase
  langs:
  - java
  name: trace(Marker marker, String msg, Throwable t)
  nameWithType: MarkerIgnoringBase.trace(Marker marker, String msg, Throwable t)
  fullName: org.slf4j.helpers.MarkerIgnoringBase.trace(Marker marker, String msg, Throwable t)
  overload: org.slf4j.helpers.MarkerIgnoringBase.trace*
  type: Method
  package: org.slf4j.helpers
  summary: This method is similar to <xref uid="org.slf4j.helpers.MarkerIgnoringBase.trace*" data-throw-if-not-resolved="false">#trace(String, Throwable)</xref> method except that the marker data is also taken into consideration.
  syntax:
    content: public void trace(Marker marker, String msg, Throwable t)
    parameters:
    - id: marker
      type: org.slf4j.Marker
    - id: msg
      type: java.lang.String
    - id: t
      type: java.lang.Throwable
- uid: org.slf4j.helpers.MarkerIgnoringBase.warn(org.slf4j.Marker,java.lang.String)
  id: warn(org.slf4j.Marker,java.lang.String)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.slf4j.helpers.MarkerIgnoringBase
  langs:
  - java
  name: warn(Marker marker, String msg)
  nameWithType: MarkerIgnoringBase.warn(Marker marker, String msg)
  fullName: org.slf4j.helpers.MarkerIgnoringBase.warn(Marker marker, String msg)
  overload: org.slf4j.helpers.MarkerIgnoringBase.warn*
  type: Method
  package: org.slf4j.helpers
  summary: Log a message with the specific Marker at the WARN level.
  syntax:
    content: public void warn(Marker marker, String msg)
    parameters:
    - id: marker
      type: org.slf4j.Marker
    - id: msg
      type: java.lang.String
- uid: org.slf4j.helpers.MarkerIgnoringBase.warn(org.slf4j.Marker,java.lang.String,java.lang.Object)
  id: warn(org.slf4j.Marker,java.lang.String,java.lang.Object)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.slf4j.helpers.MarkerIgnoringBase
  langs:
  - java
  name: warn(Marker marker, String format, Object arg)
  nameWithType: MarkerIgnoringBase.warn(Marker marker, String format, Object arg)
  fullName: org.slf4j.helpers.MarkerIgnoringBase.warn(Marker marker, String format, Object arg)
  overload: org.slf4j.helpers.MarkerIgnoringBase.warn*
  type: Method
  package: org.slf4j.helpers
  summary: This method is similar to <xref uid="org.slf4j.helpers.MarkerIgnoringBase.warn*" data-throw-if-not-resolved="false">#warn(String, Object)</xref> method except that the marker data is also taken into consideration.
  syntax:
    content: public void warn(Marker marker, String format, Object arg)
    parameters:
    - id: marker
      type: org.slf4j.Marker
    - id: format
      type: java.lang.String
    - id: arg
      type: java.lang.Object
- uid: org.slf4j.helpers.MarkerIgnoringBase.warn(org.slf4j.Marker,java.lang.String,java.lang.Object,java.lang.Object)
  id: warn(org.slf4j.Marker,java.lang.String,java.lang.Object,java.lang.Object)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.slf4j.helpers.MarkerIgnoringBase
  langs:
  - java
  name: warn(Marker marker, String format, Object arg1, Object arg2)
  nameWithType: MarkerIgnoringBase.warn(Marker marker, String format, Object arg1, Object arg2)
  fullName: org.slf4j.helpers.MarkerIgnoringBase.warn(Marker marker, String format, Object arg1, Object arg2)
  overload: org.slf4j.helpers.MarkerIgnoringBase.warn*
  type: Method
  package: org.slf4j.helpers
  summary: This method is similar to <xref uid="org.slf4j.helpers.MarkerIgnoringBase.warn*" data-throw-if-not-resolved="false">#warn(String, Object, Object)</xref> method except that the marker data is also taken into consideration.
  syntax:
    content: public void warn(Marker marker, String format, Object arg1, Object arg2)
    parameters:
    - id: marker
      type: org.slf4j.Marker
    - id: format
      type: java.lang.String
    - id: arg1
      type: java.lang.Object
    - id: arg2
      type: java.lang.Object
- uid: org.slf4j.helpers.MarkerIgnoringBase.warn(org.slf4j.Marker,java.lang.String,java.lang.Object...)
  id: warn(org.slf4j.Marker,java.lang.String,java.lang.Object...)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.slf4j.helpers.MarkerIgnoringBase
  langs:
  - java
  name: warn(Marker marker, String format, Object[] arguments)
  nameWithType: MarkerIgnoringBase.warn(Marker marker, String format, Object[] arguments)
  fullName: org.slf4j.helpers.MarkerIgnoringBase.warn(Marker marker, String format, Object[] arguments)
  overload: org.slf4j.helpers.MarkerIgnoringBase.warn*
  type: Method
  package: org.slf4j.helpers
  summary: This method is similar to <xref uid="org.slf4j.helpers.MarkerIgnoringBase.warn*" data-throw-if-not-resolved="false">#warn(String, Object...)</xref> method except that the marker data is also taken into consideration.
  syntax:
    content: public void warn(Marker marker, String format, Object[] arguments)
    parameters:
    - id: marker
      type: org.slf4j.Marker
    - id: format
      type: java.lang.String
    - id: arguments
      type: java.lang.Object[]
- uid: org.slf4j.helpers.MarkerIgnoringBase.warn(org.slf4j.Marker,java.lang.String,java.lang.Throwable)
  id: warn(org.slf4j.Marker,java.lang.String,java.lang.Throwable)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.slf4j.helpers.MarkerIgnoringBase
  langs:
  - java
  name: warn(Marker marker, String msg, Throwable t)
  nameWithType: MarkerIgnoringBase.warn(Marker marker, String msg, Throwable t)
  fullName: org.slf4j.helpers.MarkerIgnoringBase.warn(Marker marker, String msg, Throwable t)
  overload: org.slf4j.helpers.MarkerIgnoringBase.warn*
  type: Method
  package: org.slf4j.helpers
  summary: This method is similar to <xref uid="org.slf4j.helpers.MarkerIgnoringBase.warn*" data-throw-if-not-resolved="false">#warn(String, Throwable)</xref> method except that the marker data is also taken into consideration.
  syntax:
    content: public void warn(Marker marker, String msg, Throwable t)
    parameters:
    - id: marker
      type: org.slf4j.Marker
    - id: msg
      type: java.lang.String
    - id: t
      type: java.lang.Throwable
references:
- uid: org.slf4j.helpers.MarkerIgnoringBase.MarkerIgnoringBase*
  name: MarkerIgnoringBase
  nameWithType: MarkerIgnoringBase.MarkerIgnoringBase
  fullName: org.slf4j.helpers.MarkerIgnoringBase.MarkerIgnoringBase
  package: org.slf4j.helpers
- uid: org.slf4j.Marker
  name: Marker
  nameWithType: Marker
  fullName: org.slf4j.Marker
- uid: boolean
  spec.java:
  - uid: boolean
    name: boolean
    fullName: boolean
- uid: org.slf4j.helpers.MarkerIgnoringBase.isTraceEnabled*
  name: isTraceEnabled
  nameWithType: MarkerIgnoringBase.isTraceEnabled
  fullName: org.slf4j.helpers.MarkerIgnoringBase.isTraceEnabled
  package: org.slf4j.helpers
- uid: java.lang.String
  spec.java:
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
- uid: org.slf4j.helpers.MarkerIgnoringBase.trace*
  name: trace
  nameWithType: MarkerIgnoringBase.trace
  fullName: org.slf4j.helpers.MarkerIgnoringBase.trace
  package: org.slf4j.helpers
- uid: java.lang.Object
  spec.java:
  - uid: java.lang.Object
    name: Object
    fullName: java.lang.Object
- uid: java.lang.Object[]
  spec.java:
  - uid: java.lang.Object
    name: Object
    fullName: java.lang.Object
  - name: '[]'
    fullName: '[]'
- uid: java.lang.Throwable
  spec.java:
  - uid: java.lang.Throwable
    name: Throwable
    fullName: java.lang.Throwable
- uid: org.slf4j.helpers.MarkerIgnoringBase.isDebugEnabled*
  name: isDebugEnabled
  nameWithType: MarkerIgnoringBase.isDebugEnabled
  fullName: org.slf4j.helpers.MarkerIgnoringBase.isDebugEnabled
  package: org.slf4j.helpers
- uid: org.slf4j.helpers.MarkerIgnoringBase.debug*
  name: debug
  nameWithType: MarkerIgnoringBase.debug
  fullName: org.slf4j.helpers.MarkerIgnoringBase.debug
  package: org.slf4j.helpers
- uid: org.slf4j.helpers.MarkerIgnoringBase.isInfoEnabled*
  name: isInfoEnabled
  nameWithType: MarkerIgnoringBase.isInfoEnabled
  fullName: org.slf4j.helpers.MarkerIgnoringBase.isInfoEnabled
  package: org.slf4j.helpers
- uid: org.slf4j.helpers.MarkerIgnoringBase.info*
  name: info
  nameWithType: MarkerIgnoringBase.info
  fullName: org.slf4j.helpers.MarkerIgnoringBase.info
  package: org.slf4j.helpers
- uid: org.slf4j.helpers.MarkerIgnoringBase.isWarnEnabled*
  name: isWarnEnabled
  nameWithType: MarkerIgnoringBase.isWarnEnabled
  fullName: org.slf4j.helpers.MarkerIgnoringBase.isWarnEnabled
  package: org.slf4j.helpers
- uid: org.slf4j.helpers.MarkerIgnoringBase.warn*
  name: warn
  nameWithType: MarkerIgnoringBase.warn
  fullName: org.slf4j.helpers.MarkerIgnoringBase.warn
  package: org.slf4j.helpers
- uid: org.slf4j.helpers.MarkerIgnoringBase.isErrorEnabled*
  name: isErrorEnabled
  nameWithType: MarkerIgnoringBase.isErrorEnabled
  fullName: org.slf4j.helpers.MarkerIgnoringBase.isErrorEnabled
  package: org.slf4j.helpers
- uid: org.slf4j.helpers.MarkerIgnoringBase.error*
  name: error
  nameWithType: MarkerIgnoringBase.error
  fullName: org.slf4j.helpers.MarkerIgnoringBase.error
  package: org.slf4j.helpers
- uid: org.slf4j.helpers.MarkerIgnoringBase.toString*
  name: toString
  nameWithType: MarkerIgnoringBase.toString
  fullName: org.slf4j.helpers.MarkerIgnoringBase.toString
  package: org.slf4j.helpers
- uid: org.slf4j.helpers.NamedLoggerBase
  name: NamedLoggerBase
  nameWithType: NamedLoggerBase
  fullName: org.slf4j.helpers.NamedLoggerBase
- uid: org.slf4j.Logger
  name: Logger
  nameWithType: Logger
  fullName: org.slf4j.Logger
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: java.lang.Object.finalize()
  name: Object.finalize()
  nameWithType: Object.finalize()
  fullName: java.lang.Object.finalize()
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: java.lang.Object.clone()
  name: Object.clone()
  nameWithType: Object.clone()
  fullName: java.lang.Object.clone()
- uid: java.lang.Object.equals(java.lang.Object)
  name: Object.equals(Object)
  nameWithType: Object.equals(Object)
  fullName: java.lang.Object.equals(java.lang.Object)
- uid: java.lang.Object.toString()
  name: Object.toString()
  nameWithType: Object.toString()
  fullName: java.lang.Object.toString()
- uid: org.slf4j.helpers.NamedLoggerBase.readResolve()
  name: NamedLoggerBase.readResolve()
  nameWithType: NamedLoggerBase.readResolve()
  fullName: org.slf4j.helpers.NamedLoggerBase.readResolve()
- uid: org.slf4j.helpers.NamedLoggerBase.getName()
  name: NamedLoggerBase.getName()
  nameWithType: NamedLoggerBase.getName()
  fullName: org.slf4j.helpers.NamedLoggerBase.getName()
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.lang.Object.hashCode()
  name: Object.hashCode()
  nameWithType: Object.hashCode()
  fullName: java.lang.Object.hashCode()
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
