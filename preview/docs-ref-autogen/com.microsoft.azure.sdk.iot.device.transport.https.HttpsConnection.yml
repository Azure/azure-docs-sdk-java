### YamlMime:JavaType
uid: "com.microsoft.azure.sdk.iot.device.transport.https.HttpsConnection"
fullName: "com.microsoft.azure.sdk.iot.device.transport.https.HttpsConnection"
name: "HttpsConnection"
nameWithType: "HttpsConnection"
summary: "A wrapper for the Java SE class <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"HttpsURLConnection\"></xref>. Used to avoid compatibility issues when testing with the mocking framework JMockit, as well as to avoid some undocumented side effects when using HttpsURLConnection.\n\nThe underlying <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"HttpsURLConnection\"></xref> is transparently managed by Java. To reuse connections, for each time <xref uid=\"com.microsoft.azure.sdk.iot.device.transport.https.HttpsConnection.connect()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#connect()\"></xref> is called, the input streams (input stream or error stream, if input stream is not accessible) must be completely read. Otherwise, the data remains in the stream and the connection will not be reusable."
inheritances:
- "<xref href=\"java.lang.Object\" data-throw-if-not-resolved=\"False\" />"
inheritedMembers:
- "java.lang.Object.clone()"
- "java.lang.Object.equals(java.lang.Object)"
- "java.lang.Object.finalize()"
- "java.lang.Object.getClass()"
- "java.lang.Object.hashCode()"
- "java.lang.Object.notify()"
- "java.lang.Object.notifyAll()"
- "java.lang.Object.toString()"
- "java.lang.Object.wait()"
- "java.lang.Object.wait(long)"
- "java.lang.Object.wait(long,int)"
syntax: "public class HttpsConnection"
constructors:
- "com.microsoft.azure.sdk.iot.device.transport.https.HttpsConnection.HttpsConnection()"
- "com.microsoft.azure.sdk.iot.device.transport.https.HttpsConnection.HttpsConnection(java.net.URL,com.microsoft.azure.sdk.iot.device.transport.https.HttpsMethod)"
- "com.microsoft.azure.sdk.iot.device.transport.https.HttpsConnection.HttpsConnection(java.net.URL,com.microsoft.azure.sdk.iot.device.transport.https.HttpsMethod,com.microsoft.azure.sdk.iot.device.ProxySettings)"
- "com.microsoft.azure.sdk.iot.device.transport.https.HttpsConnection.HttpsConnection(java.net.URL,com.microsoft.azure.sdk.iot.device.transport.https.HttpsMethod,com.microsoft.azure.sdk.iot.device.ProxySettings,boolean)"
methods:
- "com.microsoft.azure.sdk.iot.device.transport.https.HttpsConnection.connect()"
- "com.microsoft.azure.sdk.iot.device.transport.https.HttpsConnection.getResponseHeaders()"
- "com.microsoft.azure.sdk.iot.device.transport.https.HttpsConnection.getResponseStatus()"
- "com.microsoft.azure.sdk.iot.device.transport.https.HttpsConnection.readError()"
- "com.microsoft.azure.sdk.iot.device.transport.https.HttpsConnection.readInput()"
- "com.microsoft.azure.sdk.iot.device.transport.https.HttpsConnection.setConnectTimeout(int)"
- "com.microsoft.azure.sdk.iot.device.transport.https.HttpsConnection.setReadTimeout(int)"
- "com.microsoft.azure.sdk.iot.device.transport.https.HttpsConnection.setRequestHeader(java.lang.String,java.lang.String)"
- "com.microsoft.azure.sdk.iot.device.transport.https.HttpsConnection.setRequestMethod(com.microsoft.azure.sdk.iot.device.transport.https.HttpsMethod)"
- "com.microsoft.azure.sdk.iot.device.transport.https.HttpsConnection.writeOutput(byte[])"
type: "class"
metadata: {}
package: "com.microsoft.azure.sdk.iot.device.transport.https"
artifact: com.microsoft.azure.sdk.iot:iot-device-client-preview:1.2.0
