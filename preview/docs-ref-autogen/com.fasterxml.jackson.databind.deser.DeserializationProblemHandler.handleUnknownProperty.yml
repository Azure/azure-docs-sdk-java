### YamlMime:JavaMember
uid: "com.fasterxml.jackson.databind.deser.DeserializationProblemHandler.handleUnknownProperty*"
fullName: "com.fasterxml.jackson.databind.deser.DeserializationProblemHandler.handleUnknownProperty"
name: "handleUnknownProperty"
nameWithType: "DeserializationProblemHandler.handleUnknownProperty"
members:
- uid: "com.fasterxml.jackson.databind.deser.DeserializationProblemHandler.handleUnknownProperty(com.fasterxml.jackson.databind.DeserializationContext,com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.JsonDeserializer<?>,java.lang.Object,java.lang.String)"
  fullName: "com.fasterxml.jackson.databind.deser.DeserializationProblemHandler.handleUnknownProperty(DeserializationContext ctxt, JsonParser p, JsonDeserializer<?> deserializer, Object beanOrClass, String propertyName)"
  name: "handleUnknownProperty(DeserializationContext ctxt, JsonParser p, JsonDeserializer<?> deserializer, Object beanOrClass, String propertyName)"
  nameWithType: "DeserializationProblemHandler.handleUnknownProperty(DeserializationContext ctxt, JsonParser p, JsonDeserializer<?> deserializer, Object beanOrClass, String propertyName)"
  summary: "Method called when a JSON Object property with an unrecognized name is encountered. Content (supposedly) matching the property are accessible via parser that can be obtained from passed deserialization context. Handler can also choose to skip the content; if so, it MUST return true to indicate it did handle property successfully. Skipping is usually done like so:\n\n```java\nparser.skipChildren();\n```\n\nNote: <xref uid=\"com.fasterxml.jackson.databind.DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.fasterxml.jackson.databind.DeserializationFeature#FAIL_ON_UNKNOWN_PROPERTIES\"></xref>) takes effect only **after** handler is called, and only if handler did **not** handle the problem."
  parameters:
  - name: "ctxt"
    type: "<xref href=\"com.fasterxml.jackson.databind.DeserializationContext?alt=com.fasterxml.jackson.databind.DeserializationContext&text=DeserializationContext\" data-throw-if-not-resolved=\"False\" />"
  - description: "Parser to use for handling problematic content"
    name: "p"
    type: "<xref href=\"com.fasterxml.jackson.core.JsonParser?alt=com.fasterxml.jackson.core.JsonParser&text=JsonParser\" data-throw-if-not-resolved=\"False\" />"
  - name: "deserializer"
    type: "<xref href=\"com.fasterxml.jackson.databind.JsonDeserializer?alt=com.fasterxml.jackson.databind.JsonDeserializer&text=JsonDeserializer\" data-throw-if-not-resolved=\"False\" />&lt;?&gt;"
  - description: "Either bean instance being deserialized (if one\n   has been instantiated so far); or Class that indicates type that\n   will be instantiated (if no instantiation done yet: for example\n   when bean uses non-default constructors)"
    name: "beanOrClass"
    type: "<xref href=\"java.lang.Object?alt=java.lang.Object&text=Object\" data-throw-if-not-resolved=\"False\" />"
  - name: "propertyName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public boolean handleUnknownProperty(DeserializationContext ctxt, JsonParser p, JsonDeserializer<?> deserializer, Object beanOrClass, String propertyName)"
  exceptions:
  - type: "<xref href=\"java.io.IOException?alt=java.io.IOException&text=IOException\" data-throw-if-not-resolved=\"False\" />"
  returns:
    description: "True if the problem is resolved (and content available used or skipped);\n  false if the handler did not anything and the problem is unresolved. Note that in\n  latter case caller will either throw an exception or explicitly skip the content,\n  depending on configuration."
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
type: "method"
metadata: {}
package: "com.fasterxml.jackson.databind.deser"
artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
