### YamlMime:JavaType
uid: "com.azure.cosmos.implementation.guava25.collect.LinkedHashMultimap"
fullName: "com.azure.cosmos.implementation.guava25.collect.LinkedHashMultimap<K,V>"
name: "LinkedHashMultimap<K,V>"
nameWithType: "LinkedHashMultimap<K,V>"
summary: "Implementation of `Multimap` that does not allow duplicate key-value entries and that returns collections whose iterators follow the ordering in which the data was added to the multimap.\n\nThe collections returned by `keySet`, `keys`, and `asMap` iterate through the keys in the order they were first added to the multimap. Similarly, `get`, `removeAll`, and `replaceValues` return collections that iterate through the values in the order they were added. The collections generated by `entries` and `values` iterate across the key-value mappings in the order they were added to the multimap.\n\nThe iteration ordering of the collections generated by `keySet`, `keys`, and `asMap` has a few subtleties. As long as the set of keys remains unchanged, adding or removing mappings does not affect the key iteration order. However, if you remove all values associated with a key and then add the key back to the multimap, that key will come last in the key iteration order.\n\nThe multimap does not store duplicate key-value pairs. Adding a new key-value pair equal to an existing key-value pair has no effect.\n\nKeys and values may be null. All optional multimap methods are supported, and all returned views are modifiable.\n\nThis class is not threadsafe when any concurrent operations update the multimap. Concurrent read operations will work correctly. To allow concurrent update operations, wrap your multimap with a call to <xref uid=\"com.azure.cosmos.implementation.guava25.collect.Multimaps.synchronizedSetMultimap\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Multimaps#synchronizedSetMultimap\"></xref>.\n\nSee the Guava User Guide article on [ `Multimap`][_Multimap].\n\n\n[_Multimap]: https://github.com/google/guava/wiki/NewCollectionTypesExplained#multimap"
inheritances:
- "<xref href=\"java.lang.Object\" data-throw-if-not-resolved=\"False\" />"
- "<xref href=\"com.azure.cosmos.implementation.guava25.collect.AbstractMultimap\" data-throw-if-not-resolved=\"False\" />"
- "<xref href=\"com.azure.cosmos.implementation.guava25.collect.AbstractMapBasedMultimap\" data-throw-if-not-resolved=\"False\" />"
- "<xref href=\"com.azure.cosmos.implementation.guava25.collect.AbstractSetMultimap\" data-throw-if-not-resolved=\"False\" />"
- "<xref href=\"com.azure.cosmos.implementation.guava25.collect.LinkedHashMultimapGwtSerializationDependencies\" data-throw-if-not-resolved=\"False\" />"
inheritedMembers:
- "com.azure.cosmos.implementation.guava25.collect.AbstractMapBasedMultimap.clear()"
- "com.azure.cosmos.implementation.guava25.collect.AbstractMapBasedMultimap.containsKey(java.lang.Object)"
- "com.azure.cosmos.implementation.guava25.collect.AbstractMapBasedMultimap.forEach(java.util.function.BiConsumer<? super K,? super V>)"
- "com.azure.cosmos.implementation.guava25.collect.AbstractMapBasedMultimap.size()"
- "com.azure.cosmos.implementation.guava25.collect.AbstractMapBasedMultimap.values()"
- "com.azure.cosmos.implementation.guava25.collect.AbstractMultimap.containsEntry(java.lang.Object,java.lang.Object)"
- "com.azure.cosmos.implementation.guava25.collect.AbstractMultimap.containsValue(java.lang.Object)"
- "com.azure.cosmos.implementation.guava25.collect.AbstractMultimap.hashCode()"
- "com.azure.cosmos.implementation.guava25.collect.AbstractMultimap.isEmpty()"
- "com.azure.cosmos.implementation.guava25.collect.AbstractMultimap.keySet()"
- "com.azure.cosmos.implementation.guava25.collect.AbstractMultimap.keys()"
- "com.azure.cosmos.implementation.guava25.collect.AbstractMultimap.putAll(K,java.lang.Iterable<? extends V>)"
- "com.azure.cosmos.implementation.guava25.collect.AbstractMultimap.putAll(com.azure.cosmos.implementation.guava25.collect.Multimap<? extends K,? extends V>)"
- "com.azure.cosmos.implementation.guava25.collect.AbstractMultimap.remove(java.lang.Object,java.lang.Object)"
- "com.azure.cosmos.implementation.guava25.collect.AbstractMultimap.toString()"
- "com.azure.cosmos.implementation.guava25.collect.AbstractSetMultimap.asMap()"
- "com.azure.cosmos.implementation.guava25.collect.AbstractSetMultimap.entries()"
- "com.azure.cosmos.implementation.guava25.collect.AbstractSetMultimap.equals(java.lang.Object)"
- "com.azure.cosmos.implementation.guava25.collect.AbstractSetMultimap.get(K)"
- "com.azure.cosmos.implementation.guava25.collect.AbstractSetMultimap.put(K,V)"
- "com.azure.cosmos.implementation.guava25.collect.AbstractSetMultimap.removeAll(java.lang.Object)"
- "com.azure.cosmos.implementation.guava25.collect.AbstractSetMultimap.replaceValues(K,java.lang.Iterable<? extends V>)"
- "java.lang.Object.clone()"
- "java.lang.Object.finalize()"
- "java.lang.Object.getClass()"
- "java.lang.Object.notify()"
- "java.lang.Object.notifyAll()"
- "java.lang.Object.wait()"
- "java.lang.Object.wait(long)"
- "java.lang.Object.wait(long,int)"
syntax: "public final class LinkedHashMultimap<K,V> extends LinkedHashMultimapGwtSerializationDependencies<K,V>"
methods:
- "com.azure.cosmos.implementation.guava25.collect.LinkedHashMultimap.<K,V>create()"
- "com.azure.cosmos.implementation.guava25.collect.LinkedHashMultimap.<K,V>create(com.azure.cosmos.implementation.guava25.collect.Multimap<? extends K,? extends V>)"
- "com.azure.cosmos.implementation.guava25.collect.LinkedHashMultimap.<K,V>create(int,int)"
- "com.azure.cosmos.implementation.guava25.collect.LinkedHashMultimap.clear()"
- "com.azure.cosmos.implementation.guava25.collect.LinkedHashMultimap.entries()"
- "com.azure.cosmos.implementation.guava25.collect.LinkedHashMultimap.keySet()"
- "com.azure.cosmos.implementation.guava25.collect.LinkedHashMultimap.replaceValues(K,java.lang.Iterable<? extends V>)"
- "com.azure.cosmos.implementation.guava25.collect.LinkedHashMultimap.values()"
type: "class"
typeParameters:
- name: "K"
- name: "V"
metadata: {}
package: "com.azure.cosmos.implementation.guava25.collect"
artifact: com.azure:azure-cosmos:4.4.0-beta.1
