### YamlMime:ManagedReference
items:
- uid: com.azure.cosmos.implementation.guava25.collect.LinkedHashMultimap
  id: LinkedHashMultimap
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect
  children:
  - com.azure.cosmos.implementation.guava25.collect.LinkedHashMultimap.<K,V>create()
  - com.azure.cosmos.implementation.guava25.collect.LinkedHashMultimap.<K,V>create(com.azure.cosmos.implementation.guava25.collect.Multimap<? extends K,? extends V>)
  - com.azure.cosmos.implementation.guava25.collect.LinkedHashMultimap.<K,V>create(int,int)
  - com.azure.cosmos.implementation.guava25.collect.LinkedHashMultimap.clear()
  - com.azure.cosmos.implementation.guava25.collect.LinkedHashMultimap.entries()
  - com.azure.cosmos.implementation.guava25.collect.LinkedHashMultimap.keySet()
  - com.azure.cosmos.implementation.guava25.collect.LinkedHashMultimap.replaceValues(K,java.lang.Iterable<? extends V>)
  - com.azure.cosmos.implementation.guava25.collect.LinkedHashMultimap.values()
  langs:
  - java
  name: LinkedHashMultimap<K,V>
  nameWithType: LinkedHashMultimap<K,V>
  fullName: com.azure.cosmos.implementation.guava25.collect.LinkedHashMultimap<K,V>
  type: Class
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Implementation of `Multimap` that does not allow duplicate key-value entries and that returns collections whose iterators follow the ordering in which the data was added to the multimap.


    The collections returned by `keySet`, `keys`, and `asMap` iterate through the keys in the order they were first added to the multimap. Similarly, `get`, `removeAll`, and `replaceValues` return collections that iterate through the values in the order they were added. The collections generated by `entries` and `values` iterate across the key-value mappings in the order they were added to the multimap.


    The iteration ordering of the collections generated by `keySet`, `keys`, and `asMap` has a few subtleties. As long as the set of keys remains unchanged, adding or removing mappings does not affect the key iteration order. However, if you remove all values associated with a key and then add the key back to the multimap, that key will come last in the key iteration order.


    The multimap does not store duplicate key-value pairs. Adding a new key-value pair equal to an existing key-value pair has no effect.


    Keys and values may be null. All optional multimap methods are supported, and all returned views are modifiable.


    This class is not threadsafe when any concurrent operations update the multimap. Concurrent read operations will work correctly. To allow concurrent update operations, wrap your multimap with a call to <xref uid="com.azure.cosmos.implementation.guava25.collect.Multimaps.synchronizedSetMultimap" data-throw-if-not-resolved="false">Multimaps#synchronizedSetMultimap</xref>.


    See the Guava User Guide article on [ `Multimap`][_Multimap].



    [_Multimap]: https://github.com/google/guava/wiki/NewCollectionTypesExplained#multimap
  syntax:
    content: public final class LinkedHashMultimap<K,V> extends LinkedHashMultimapGwtSerializationDependencies<K,V>
    typeParameters:
    - id: K
    - id: V
  inheritance:
  - java.lang.Object
  - com.azure.cosmos.implementation.guava25.collect.AbstractMultimap
  - com.azure.cosmos.implementation.guava25.collect.AbstractMapBasedMultimap
  - com.azure.cosmos.implementation.guava25.collect.AbstractSetMultimap
  - com.azure.cosmos.implementation.guava25.collect.LinkedHashMultimapGwtSerializationDependencies
  inheritedMembers:
  - com.azure.cosmos.implementation.guava25.collect.AbstractMapBasedMultimap.clear()
  - com.azure.cosmos.implementation.guava25.collect.AbstractMapBasedMultimap.containsKey(java.lang.Object)
  - com.azure.cosmos.implementation.guava25.collect.AbstractMapBasedMultimap.forEach(java.util.function.BiConsumer<? super K,? super V>)
  - com.azure.cosmos.implementation.guava25.collect.AbstractMapBasedMultimap.size()
  - com.azure.cosmos.implementation.guava25.collect.AbstractMapBasedMultimap.values()
  - com.azure.cosmos.implementation.guava25.collect.AbstractMultimap.containsEntry(java.lang.Object,java.lang.Object)
  - com.azure.cosmos.implementation.guava25.collect.AbstractMultimap.containsValue(java.lang.Object)
  - com.azure.cosmos.implementation.guava25.collect.AbstractMultimap.hashCode()
  - com.azure.cosmos.implementation.guava25.collect.AbstractMultimap.isEmpty()
  - com.azure.cosmos.implementation.guava25.collect.AbstractMultimap.keySet()
  - com.azure.cosmos.implementation.guava25.collect.AbstractMultimap.keys()
  - com.azure.cosmos.implementation.guava25.collect.AbstractMultimap.putAll(K,java.lang.Iterable<? extends V>)
  - com.azure.cosmos.implementation.guava25.collect.AbstractMultimap.putAll(com.azure.cosmos.implementation.guava25.collect.Multimap<? extends K,? extends V>)
  - com.azure.cosmos.implementation.guava25.collect.AbstractMultimap.remove(java.lang.Object,java.lang.Object)
  - com.azure.cosmos.implementation.guava25.collect.AbstractMultimap.toString()
  - com.azure.cosmos.implementation.guava25.collect.AbstractSetMultimap.asMap()
  - com.azure.cosmos.implementation.guava25.collect.AbstractSetMultimap.entries()
  - com.azure.cosmos.implementation.guava25.collect.AbstractSetMultimap.equals(java.lang.Object)
  - com.azure.cosmos.implementation.guava25.collect.AbstractSetMultimap.get(K)
  - com.azure.cosmos.implementation.guava25.collect.AbstractSetMultimap.put(K,V)
  - com.azure.cosmos.implementation.guava25.collect.AbstractSetMultimap.removeAll(java.lang.Object)
  - com.azure.cosmos.implementation.guava25.collect.AbstractSetMultimap.replaceValues(K,java.lang.Iterable<? extends V>)
  - java.lang.Object.clone()
  - java.lang.Object.finalize()
  - java.lang.Object.getClass()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
- uid: com.azure.cosmos.implementation.guava25.collect.LinkedHashMultimap.<K,V>create()
  id: <K,V>create()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.LinkedHashMultimap
  langs:
  - java
  name: <K,V>create()
  nameWithType: LinkedHashMultimap<K,V>.<K,V>create()
  fullName: com.azure.cosmos.implementation.guava25.collect.LinkedHashMultimap<K,V>.<K,V>create()
  overload: com.azure.cosmos.implementation.guava25.collect.LinkedHashMultimap.create*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Creates a new, empty `LinkedHashMultimap` with the default initial capacities.
  syntax:
    content: public static LinkedHashMultimap<K,V> <K,V>create()
    return:
      type: com.azure.cosmos.implementation.guava25.collect.LinkedHashMultimap<K,V>
- uid: com.azure.cosmos.implementation.guava25.collect.LinkedHashMultimap.<K,V>create(com.azure.cosmos.implementation.guava25.collect.Multimap<? extends K,? extends V>)
  id: <K,V>create(com.azure.cosmos.implementation.guava25.collect.Multimap<? extends K,? extends V>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.LinkedHashMultimap
  langs:
  - java
  name: <K,V>create(Multimap<? extends K,? extends V> multimap)
  nameWithType: LinkedHashMultimap<K,V>.<K,V>create(Multimap<? extends K,? extends V> multimap)
  fullName: com.azure.cosmos.implementation.guava25.collect.LinkedHashMultimap<K,V>.<K,V>create(Multimap<? extends K,? extends V> multimap)
  overload: com.azure.cosmos.implementation.guava25.collect.LinkedHashMultimap.create*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Constructs a `LinkedHashMultimap` with the same mappings as the specified multimap. If a key-value mapping appears multiple times in the input multimap, it only appears once in the constructed multimap. The new multimap has the same <xref uid="com.azure.cosmos.implementation.guava25.collect.Multimap.entries()" data-throw-if-not-resolved="false">Multimap#entries()</xref> iteration order as the input multimap, except for excluding duplicate mappings.
  syntax:
    content: public static LinkedHashMultimap<K,V> <K,V>create(Multimap<? extends K,? extends V> multimap)
    parameters:
    - id: multimap
      type: com.azure.cosmos.implementation.guava25.collect.Multimap<? extends K,? extends V>
      description: the multimap whose contents are copied to this multimap
    return:
      type: com.azure.cosmos.implementation.guava25.collect.LinkedHashMultimap<K,V>
- uid: com.azure.cosmos.implementation.guava25.collect.LinkedHashMultimap.<K,V>create(int,int)
  id: <K,V>create(int,int)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.LinkedHashMultimap
  langs:
  - java
  name: <K,V>create(int expectedKeys, int expectedValuesPerKey)
  nameWithType: LinkedHashMultimap<K,V>.<K,V>create(int expectedKeys, int expectedValuesPerKey)
  fullName: com.azure.cosmos.implementation.guava25.collect.LinkedHashMultimap<K,V>.<K,V>create(int expectedKeys, int expectedValuesPerKey)
  overload: com.azure.cosmos.implementation.guava25.collect.LinkedHashMultimap.create*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Constructs an empty `LinkedHashMultimap` with enough capacity to hold the specified numbers of keys and values without rehashing.
  syntax:
    content: public static LinkedHashMultimap<K,V> <K,V>create(int expectedKeys, int expectedValuesPerKey)
    parameters:
    - id: expectedKeys
      type: int
      description: the expected number of distinct keys
    - id: expectedValuesPerKey
      type: int
      description: the expected average number of values per key
    return:
      type: com.azure.cosmos.implementation.guava25.collect.LinkedHashMultimap<K,V>
- uid: com.azure.cosmos.implementation.guava25.collect.LinkedHashMultimap.LinkedHashMultimap(int,int)
  id: LinkedHashMultimap(int,int)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.LinkedHashMultimap
  langs:
  - java
  name: LinkedHashMultimap(int keyCapacity, int valueSetCapacity)
  nameWithType: LinkedHashMultimap<K,V>.LinkedHashMultimap(int keyCapacity, int valueSetCapacity)
  fullName: com.azure.cosmos.implementation.guava25.collect.LinkedHashMultimap<K,V>.LinkedHashMultimap(int keyCapacity, int valueSetCapacity)
  overload: com.azure.cosmos.implementation.guava25.collect.LinkedHashMultimap.LinkedHashMultimap*
  type: Constructor
  package: com.azure.cosmos.implementation.guava25.collect
  syntax:
    content: private LinkedHashMultimap(int keyCapacity, int valueSetCapacity)
    parameters:
    - id: keyCapacity
      type: int
    - id: valueSetCapacity
      type: int
- uid: com.azure.cosmos.implementation.guava25.collect.LinkedHashMultimap.clear()
  id: clear()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.LinkedHashMultimap
  langs:
  - java
  name: clear()
  nameWithType: LinkedHashMultimap<K,V>.clear()
  fullName: com.azure.cosmos.implementation.guava25.collect.LinkedHashMultimap<K,V>.clear()
  overload: com.azure.cosmos.implementation.guava25.collect.LinkedHashMultimap.clear*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  syntax:
    content: public void clear()
- uid: com.azure.cosmos.implementation.guava25.collect.LinkedHashMultimap.entries()
  id: entries()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.LinkedHashMultimap
  langs:
  - java
  name: entries()
  nameWithType: LinkedHashMultimap<K,V>.entries()
  fullName: com.azure.cosmos.implementation.guava25.collect.LinkedHashMultimap<K,V>.entries()
  overload: com.azure.cosmos.implementation.guava25.collect.LinkedHashMultimap.entries*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Returns a set of all key-value pairs. Changes to the returned set will update the underlying multimap, and vice versa. The entries set does not support the `add` or `addAll` operations.


    The iterator generated by the returned set traverses the entries in the order they were added to the multimap.


    Each entry is an immutable snapshot of a key-value mapping in the multimap, taken at the time the entry is returned by a method call to the collection or its iterator.
  syntax:
    content: public Set<Map.Entry<K,V>> entries()
    return:
      type: java.util.Set<java.util.Map.Entry<K,V>>
- uid: com.azure.cosmos.implementation.guava25.collect.LinkedHashMultimap.keySet()
  id: keySet()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.LinkedHashMultimap
  langs:
  - java
  name: keySet()
  nameWithType: LinkedHashMultimap<K,V>.keySet()
  fullName: com.azure.cosmos.implementation.guava25.collect.LinkedHashMultimap<K,V>.keySet()
  overload: com.azure.cosmos.implementation.guava25.collect.LinkedHashMultimap.keySet*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Returns a view collection of all *distinct* keys contained in this multimap. Note that the key set contains a key if and only if this multimap maps that key to at least one value.


    The iterator generated by the returned set traverses the keys in the order they were first added to the multimap.


    Changes to the returned set will update the underlying multimap, and vice versa. However, *adding* to the returned set is not possible.
  syntax:
    content: public Set<K> keySet()
    return:
      type: java.util.Set<K>
- uid: com.azure.cosmos.implementation.guava25.collect.LinkedHashMultimap.replaceValues(K,java.lang.Iterable<? extends V>)
  id: replaceValues(K,java.lang.Iterable<? extends V>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.LinkedHashMultimap
  langs:
  - java
  name: replaceValues(K key, Iterable<? extends V> values)
  nameWithType: LinkedHashMultimap<K,V>.replaceValues(K key, Iterable<? extends V> values)
  fullName: com.azure.cosmos.implementation.guava25.collect.LinkedHashMultimap<K,V>.replaceValues(K key, Iterable<? extends V> values)
  overload: com.azure.cosmos.implementation.guava25.collect.LinkedHashMultimap.replaceValues*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Stores a collection of values with the same key, replacing any existing values for that key.


    If `values` is empty, this is equivalent to <xref uid="com.azure.cosmos.implementation.guava25.collect.LinkedHashMultimap.removeAll*" data-throw-if-not-resolved="false">removeAll(key)</xref>.


    The returned collection is immutable.


    Because a `SetMultimap` has unique values for a given key, this method returns a <xref uid="java.util.Set" data-throw-if-not-resolved="false">Set</xref>, instead of the <xref uid="java.util.Collection" data-throw-if-not-resolved="false">Collection</xref> specified in the <xref uid="com.azure.cosmos.implementation.guava25.collect.Multimap" data-throw-if-not-resolved="false">Multimap</xref> interface.


    Any duplicates in `values` will be stored in the multimap once.


    If `values` is not empty and the multimap already contains a mapping for `key`, the `keySet()` ordering is unchanged. However, the provided values always come last in the <xref uid="com.azure.cosmos.implementation.guava25.collect.LinkedHashMultimap.entries()" data-throw-if-not-resolved="false">#entries()</xref> and <xref uid="com.azure.cosmos.implementation.guava25.collect.LinkedHashMultimap.values()" data-throw-if-not-resolved="false">#values()</xref> iteration orderings.
  syntax:
    content: public Set<V> replaceValues(K key, Iterable<? extends V> values)
    parameters:
    - id: key
      type: K
    - id: values
      type: java.lang.Iterable<? extends V>
    return:
      type: java.util.Set<V>
- uid: com.azure.cosmos.implementation.guava25.collect.LinkedHashMultimap.values()
  id: values()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.LinkedHashMultimap
  langs:
  - java
  name: values()
  nameWithType: LinkedHashMultimap<K,V>.values()
  fullName: com.azure.cosmos.implementation.guava25.collect.LinkedHashMultimap<K,V>.values()
  overload: com.azure.cosmos.implementation.guava25.collect.LinkedHashMultimap.values*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Returns a collection of all values in the multimap. Changes to the returned collection will update the underlying multimap, and vice versa.


    The iterator generated by the returned collection traverses the values in the order they were added to the multimap.
  syntax:
    content: public Collection<V> values()
    return:
      type: java.util.Collection<V>
references:
- uid: int
  spec.java:
  - uid: int
    name: int
    fullName: int
- uid: com.azure.cosmos.implementation.guava25.collect.LinkedHashMultimap.LinkedHashMultimap*
  name: LinkedHashMultimap
  nameWithType: LinkedHashMultimap<K,V>.LinkedHashMultimap
  fullName: com.azure.cosmos.implementation.guava25.collect.LinkedHashMultimap<K,V>.LinkedHashMultimap
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.LinkedHashMultimap<K,V>
  spec.java:
  - uid: com.azure.cosmos.implementation.guava25.collect.LinkedHashMultimap
    name: LinkedHashMultimap
    fullName: com.azure.cosmos.implementation.guava25.collect.LinkedHashMultimap
  - name: <
    fullName: <
  - uid: K
    name: K
    fullName: K
  - name: ','
    fullName: ','
  - uid: V
    name: V
    fullName: V
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.LinkedHashMultimap.create*
  name: <K,V>create
  nameWithType: LinkedHashMultimap<K,V>.<K,V>create
  fullName: com.azure.cosmos.implementation.guava25.collect.LinkedHashMultimap<K,V>.<K,V>create
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.Multimap<? extends K,? extends V>
  spec.java:
  - uid: com.azure.cosmos.implementation.guava25.collect.Multimap
    name: Multimap
    fullName: com.azure.cosmos.implementation.guava25.collect.Multimap
  - name: <
    fullName: <
  - uid: '? extends K'
    name: '? extends K'
    fullName: '? extends K'
  - name: ','
    fullName: ','
  - uid: '? extends V'
    name: '? extends V'
    fullName: '? extends V'
  - name: '>'
    fullName: '>'
- uid: K
  spec.java:
  - uid: K
    name: K
    fullName: K
- uid: java.lang.Iterable<? extends V>
  spec.java:
  - uid: java.lang.Iterable
    name: Iterable
    fullName: java.lang.Iterable
  - name: <
    fullName: <
  - uid: '? extends V'
    name: '? extends V'
    fullName: '? extends V'
  - name: '>'
    fullName: '>'
- uid: java.util.Set<V>
  spec.java:
  - uid: java.util.Set
    name: Set
    fullName: java.util.Set
  - name: <
    fullName: <
  - uid: V
    name: V
    fullName: V
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.LinkedHashMultimap.replaceValues*
  name: replaceValues
  nameWithType: LinkedHashMultimap<K,V>.replaceValues
  fullName: com.azure.cosmos.implementation.guava25.collect.LinkedHashMultimap<K,V>.replaceValues
  package: com.azure.cosmos.implementation.guava25.collect
- uid: java.util.Set<java.util.Map.Entry<K,V>>
  spec.java:
  - uid: java.util.Set
    name: Set
    fullName: java.util.Set
  - name: <
    fullName: <
  - uid: java.util.Map.Entry
    name: Entry
    fullName: java.util.Map.Entry
  - name: <
    fullName: <
  - uid: K
    name: K
    fullName: K
  - name: ','
    fullName: ','
  - uid: V
    name: V
    fullName: V
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.LinkedHashMultimap.entries*
  name: entries
  nameWithType: LinkedHashMultimap<K,V>.entries
  fullName: com.azure.cosmos.implementation.guava25.collect.LinkedHashMultimap<K,V>.entries
  package: com.azure.cosmos.implementation.guava25.collect
- uid: java.util.Set<K>
  spec.java:
  - uid: java.util.Set
    name: Set
    fullName: java.util.Set
  - name: <
    fullName: <
  - uid: K
    name: K
    fullName: K
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.LinkedHashMultimap.keySet*
  name: keySet
  nameWithType: LinkedHashMultimap<K,V>.keySet
  fullName: com.azure.cosmos.implementation.guava25.collect.LinkedHashMultimap<K,V>.keySet
  package: com.azure.cosmos.implementation.guava25.collect
- uid: java.util.Collection<V>
  spec.java:
  - uid: java.util.Collection
    name: Collection
    fullName: java.util.Collection
  - name: <
    fullName: <
  - uid: V
    name: V
    fullName: V
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.LinkedHashMultimap.values*
  name: values
  nameWithType: LinkedHashMultimap<K,V>.values
  fullName: com.azure.cosmos.implementation.guava25.collect.LinkedHashMultimap<K,V>.values
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.LinkedHashMultimap.clear*
  name: clear
  nameWithType: LinkedHashMultimap<K,V>.clear
  fullName: com.azure.cosmos.implementation.guava25.collect.LinkedHashMultimap<K,V>.clear
  package: com.azure.cosmos.implementation.guava25.collect
- uid: V
  name: V
  nameWithType: V
  fullName: V
- uid: com.azure.cosmos.implementation.guava25.collect.LinkedHashMultimapGwtSerializationDependencies<K,V>
  name: LinkedHashMultimapGwtSerializationDependencies<K,V>
  nameWithType: LinkedHashMultimapGwtSerializationDependencies<K,V>
  fullName: com.azure.cosmos.implementation.guava25.collect.LinkedHashMultimapGwtSerializationDependencies<K,V>
- uid: com.azure.cosmos.implementation.guava25.collect.AbstractMapBasedMultimap.forEach(java.util.function.BiConsumer<? super K,? super V>)
  name: AbstractMapBasedMultimap.forEach(BiConsumer<? super K,? super V>)
  nameWithType: AbstractMapBasedMultimap.forEach(BiConsumer<? super K,? super V>)
  fullName: com.azure.cosmos.implementation.guava25.collect.AbstractMapBasedMultimap.forEach(java.util.function.BiConsumer<? super K,? super V>)
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: com.azure.cosmos.implementation.guava25.collect.AbstractMultimap.isEmpty()
  name: AbstractMultimap.isEmpty()
  nameWithType: AbstractMultimap.isEmpty()
  fullName: com.azure.cosmos.implementation.guava25.collect.AbstractMultimap.isEmpty()
- uid: java.lang.Object.finalize()
  name: Object.finalize()
  nameWithType: Object.finalize()
  fullName: java.lang.Object.finalize()
- uid: com.azure.cosmos.implementation.guava25.collect.AbstractSetMultimap.asMap()
  name: AbstractSetMultimap.asMap()
  nameWithType: AbstractSetMultimap.asMap()
  fullName: com.azure.cosmos.implementation.guava25.collect.AbstractSetMultimap.asMap()
- uid: com.azure.cosmos.implementation.guava25.collect.AbstractSetMultimap.get(K)
  name: AbstractSetMultimap.get(K)
  nameWithType: AbstractSetMultimap.get(K)
  fullName: com.azure.cosmos.implementation.guava25.collect.AbstractSetMultimap.get(K)
- uid: java.lang.Object.clone()
  name: Object.clone()
  nameWithType: Object.clone()
  fullName: java.lang.Object.clone()
- uid: com.azure.cosmos.implementation.guava25.collect.AbstractMultimap.containsValue(java.lang.Object)
  name: AbstractMultimap.containsValue(Object)
  nameWithType: AbstractMultimap.containsValue(Object)
  fullName: com.azure.cosmos.implementation.guava25.collect.AbstractMultimap.containsValue(java.lang.Object)
- uid: com.azure.cosmos.implementation.guava25.collect.AbstractSetMultimap.removeAll(java.lang.Object)
  name: AbstractSetMultimap.removeAll(Object)
  nameWithType: AbstractSetMultimap.removeAll(Object)
  fullName: com.azure.cosmos.implementation.guava25.collect.AbstractSetMultimap.removeAll(java.lang.Object)
- uid: com.azure.cosmos.implementation.guava25.collect.AbstractMapBasedMultimap.clear()
  name: AbstractMapBasedMultimap.clear()
  nameWithType: AbstractMapBasedMultimap.clear()
  fullName: com.azure.cosmos.implementation.guava25.collect.AbstractMapBasedMultimap.clear()
- uid: com.azure.cosmos.implementation.guava25.collect.AbstractMultimap.toString()
  name: AbstractMultimap.toString()
  nameWithType: AbstractMultimap.toString()
  fullName: com.azure.cosmos.implementation.guava25.collect.AbstractMultimap.toString()
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: com.azure.cosmos.implementation.guava25.collect.AbstractMultimap.putAll(K,java.lang.Iterable<? extends V>)
  name: AbstractMultimap.putAll(K,Iterable<? extends V>)
  nameWithType: AbstractMultimap.putAll(K,Iterable<? extends V>)
  fullName: com.azure.cosmos.implementation.guava25.collect.AbstractMultimap.putAll(K,java.lang.Iterable<? extends V>)
- uid: com.azure.cosmos.implementation.guava25.collect.AbstractMultimap.remove(java.lang.Object,java.lang.Object)
  name: AbstractMultimap.remove(Object,Object)
  nameWithType: AbstractMultimap.remove(Object,Object)
  fullName: com.azure.cosmos.implementation.guava25.collect.AbstractMultimap.remove(java.lang.Object,java.lang.Object)
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: com.azure.cosmos.implementation.guava25.collect.AbstractSetMultimap.put(K,V)
  name: AbstractSetMultimap.put(K,V)
  nameWithType: AbstractSetMultimap.put(K,V)
  fullName: com.azure.cosmos.implementation.guava25.collect.AbstractSetMultimap.put(K,V)
- uid: com.azure.cosmos.implementation.guava25.collect.AbstractMultimap.keySet()
  name: AbstractMultimap.keySet()
  nameWithType: AbstractMultimap.keySet()
  fullName: com.azure.cosmos.implementation.guava25.collect.AbstractMultimap.keySet()
- uid: com.azure.cosmos.implementation.guava25.collect.AbstractMapBasedMultimap.size()
  name: AbstractMapBasedMultimap.size()
  nameWithType: AbstractMapBasedMultimap.size()
  fullName: com.azure.cosmos.implementation.guava25.collect.AbstractMapBasedMultimap.size()
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: com.azure.cosmos.implementation.guava25.collect.AbstractMultimap.keys()
  name: AbstractMultimap.keys()
  nameWithType: AbstractMultimap.keys()
  fullName: com.azure.cosmos.implementation.guava25.collect.AbstractMultimap.keys()
- uid: com.azure.cosmos.implementation.guava25.collect.AbstractMultimap.hashCode()
  name: AbstractMultimap.hashCode()
  nameWithType: AbstractMultimap.hashCode()
  fullName: com.azure.cosmos.implementation.guava25.collect.AbstractMultimap.hashCode()
- uid: com.azure.cosmos.implementation.guava25.collect.AbstractMapBasedMultimap.values()
  name: AbstractMapBasedMultimap.values()
  nameWithType: AbstractMapBasedMultimap.values()
  fullName: com.azure.cosmos.implementation.guava25.collect.AbstractMapBasedMultimap.values()
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: com.azure.cosmos.implementation.guava25.collect.AbstractSetMultimap.equals(java.lang.Object)
  name: AbstractSetMultimap.equals(Object)
  nameWithType: AbstractSetMultimap.equals(Object)
  fullName: com.azure.cosmos.implementation.guava25.collect.AbstractSetMultimap.equals(java.lang.Object)
- uid: com.azure.cosmos.implementation.guava25.collect.AbstractMapBasedMultimap.containsKey(java.lang.Object)
  name: AbstractMapBasedMultimap.containsKey(Object)
  nameWithType: AbstractMapBasedMultimap.containsKey(Object)
  fullName: com.azure.cosmos.implementation.guava25.collect.AbstractMapBasedMultimap.containsKey(java.lang.Object)
- uid: com.azure.cosmos.implementation.guava25.collect.AbstractMultimap.putAll(com.azure.cosmos.implementation.guava25.collect.Multimap<? extends K,? extends V>)
  name: AbstractMultimap.putAll(Multimap<? extends K,? extends V>)
  nameWithType: AbstractMultimap.putAll(Multimap<? extends K,? extends V>)
  fullName: com.azure.cosmos.implementation.guava25.collect.AbstractMultimap.putAll(com.azure.cosmos.implementation.guava25.collect.Multimap<? extends K,? extends V>)
- uid: com.azure.cosmos.implementation.guava25.collect.AbstractMultimap.containsEntry(java.lang.Object,java.lang.Object)
  name: AbstractMultimap.containsEntry(Object,Object)
  nameWithType: AbstractMultimap.containsEntry(Object,Object)
  fullName: com.azure.cosmos.implementation.guava25.collect.AbstractMultimap.containsEntry(java.lang.Object,java.lang.Object)
- uid: com.azure.cosmos.implementation.guava25.collect.AbstractSetMultimap.entries()
  name: AbstractSetMultimap.entries()
  nameWithType: AbstractSetMultimap.entries()
  fullName: com.azure.cosmos.implementation.guava25.collect.AbstractSetMultimap.entries()
- uid: com.azure.cosmos.implementation.guava25.collect.AbstractSetMultimap.replaceValues(K,java.lang.Iterable<? extends V>)
  name: AbstractSetMultimap.replaceValues(K,Iterable<? extends V>)
  nameWithType: AbstractSetMultimap.replaceValues(K,Iterable<? extends V>)
  fullName: com.azure.cosmos.implementation.guava25.collect.AbstractSetMultimap.replaceValues(K,java.lang.Iterable<? extends V>)
- uid: K,V
  name: K,V
  nameWithType: K,V
  fullName: K,V
- uid: '? extends K,? extends V'
  name: '? extends K,? extends V'
  nameWithType: '? extends K,? extends V'
  fullName: '? extends K,? extends V'
- uid: com.azure.cosmos.implementation.guava25.collect.Multimap
  name: Multimap
  nameWithType: Multimap
  fullName: com.azure.cosmos.implementation.guava25.collect.Multimap
- uid: '? extends V'
  name: '? extends V'
  nameWithType: '? extends V'
  fullName: '? extends V'
- uid: java.lang.Iterable
  name: Iterable
  nameWithType: Iterable
  fullName: java.lang.Iterable
- uid: java.util.Set
  name: Set
  nameWithType: Set
  fullName: java.util.Set
- uid: java.util.Map.Entry
  name: Map.Entry
  nameWithType: Map.Entry
  fullName: java.util.Map.Entry
- uid: java.util.Collection
  name: Collection
  nameWithType: Collection
  fullName: java.util.Collection
- uid: com.azure.cosmos.implementation.guava25.collect.LinkedHashMultimapGwtSerializationDependencies
  name: LinkedHashMultimapGwtSerializationDependencies
  nameWithType: LinkedHashMultimapGwtSerializationDependencies
  fullName: com.azure.cosmos.implementation.guava25.collect.LinkedHashMultimapGwtSerializationDependencies
- uid: '? super K,? super V>)'
  name: '? super K,? super V>)'
  nameWithType: '? super K,? super V>)'
  fullName: '? super K,? super V>)'
- uid: com.azure.cosmos.implementation.guava25.collect.AbstractMapBasedMultimap.forEach(java.util.function.BiConsumer
  name: AbstractMapBasedMultimap.forEach(BiConsumer
  nameWithType: AbstractMapBasedMultimap.forEach(BiConsumer
  fullName: com.azure.cosmos.implementation.guava25.collect.AbstractMapBasedMultimap.forEach(java.util.function.BiConsumer
- uid: '? extends V>)'
  name: '? extends V>)'
  nameWithType: '? extends V>)'
  fullName: '? extends V>)'
- uid: com.azure.cosmos.implementation.guava25.collect.AbstractMultimap.putAll(K,java.lang.Iterable
  name: AbstractMultimap.putAll(K,Iterable
  nameWithType: AbstractMultimap.putAll(K,Iterable
  fullName: com.azure.cosmos.implementation.guava25.collect.AbstractMultimap.putAll(K,java.lang.Iterable
- uid: com.azure.cosmos.implementation.guava25.collect.AbstractMultimap.putAll(com.azure.cosmos.implementation.guava25.collect.Multimap
  name: AbstractMultimap.putAll(Multimap
  nameWithType: AbstractMultimap.putAll(Multimap
  fullName: com.azure.cosmos.implementation.guava25.collect.AbstractMultimap.putAll(com.azure.cosmos.implementation.guava25.collect.Multimap
- uid: '? extends K,? extends V>)'
  name: '? extends K,? extends V>)'
  nameWithType: '? extends K,? extends V>)'
  fullName: '? extends K,? extends V>)'
- uid: com.azure.cosmos.implementation.guava25.collect.AbstractSetMultimap.replaceValues(K,java.lang.Iterable
  name: AbstractSetMultimap.replaceValues(K,Iterable
  nameWithType: AbstractSetMultimap.replaceValues(K,Iterable
  fullName: com.azure.cosmos.implementation.guava25.collect.AbstractSetMultimap.replaceValues(K,java.lang.Iterable
