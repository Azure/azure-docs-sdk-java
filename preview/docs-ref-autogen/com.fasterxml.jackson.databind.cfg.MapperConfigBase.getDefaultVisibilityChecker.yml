### YamlMime:JavaMember
uid: "com.fasterxml.jackson.databind.cfg.MapperConfigBase.getDefaultVisibilityChecker*"
fullName: "com.fasterxml.jackson.databind.cfg.MapperConfigBase<CFG,T>.getDefaultVisibilityChecker"
name: "getDefaultVisibilityChecker"
nameWithType: "MapperConfigBase<CFG,T>.getDefaultVisibilityChecker"
members:
- uid: "com.fasterxml.jackson.databind.cfg.MapperConfigBase.getDefaultVisibilityChecker()"
  fullName: "com.fasterxml.jackson.databind.cfg.MapperConfigBase<CFG,T>.getDefaultVisibilityChecker()"
  name: "getDefaultVisibilityChecker()"
  nameWithType: "MapperConfigBase<CFG,T>.getDefaultVisibilityChecker()"
  summary: "Accessor for object used for determining whether specific property elements (method, constructors, fields) can be auto-detected based on their visibility (access modifiers). Can be changed to allow different minimum visibility levels for auto-detection. Note that this is the global handler; individual types (classes) can further override active checker used (using <xref uid=\"com.fasterxml.jackson.annotation.JsonAutoDetect\" data-throw-if-not-resolved=\"false\" data-raw-source=\"JsonAutoDetect\"></xref> annotation)"
  overridden: "com.fasterxml.jackson.databind.cfg.MapperConfig.getDefaultVisibilityChecker()"
  syntax: "public final VisibilityChecker<?> getDefaultVisibilityChecker()"
  returns:
    type: "<xref href=\"com.fasterxml.jackson.databind.introspect.VisibilityChecker?alt=com.fasterxml.jackson.databind.introspect.VisibilityChecker&text=VisibilityChecker\" data-throw-if-not-resolved=\"False\" />&lt;?&gt;"
- uid: "com.fasterxml.jackson.databind.cfg.MapperConfigBase.getDefaultVisibilityChecker(java.lang.Class<?>,com.fasterxml.jackson.databind.introspect.AnnotatedClass)"
  fullName: "com.fasterxml.jackson.databind.cfg.MapperConfigBase<CFG,T>.getDefaultVisibilityChecker(Class<?> baseType, AnnotatedClass actualClass)"
  name: "getDefaultVisibilityChecker(Class<?> baseType, AnnotatedClass actualClass)"
  nameWithType: "MapperConfigBase<CFG,T>.getDefaultVisibilityChecker(Class<?> baseType, AnnotatedClass actualClass)"
  summary: "Accessor for object used for determining whether specific property elements (method, constructors, fields) can be auto-detected based on their visibility (access modifiers). This is based on global defaults (as would be returned by <xref uid=\"com.fasterxml.jackson.databind.cfg.MapperConfigBase.getDefaultVisibilityChecker()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#getDefaultVisibilityChecker()\"></xref>, but then modified by possible class annotation (see <xref uid=\"com.fasterxml.jackson.annotation.JsonAutoDetect\" data-throw-if-not-resolved=\"false\" data-raw-source=\"JsonAutoDetect\"></xref>) and/or per-type config override (see <xref uid=\"com.fasterxml.jackson.databind.cfg.ConfigOverride.getVisibility()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ConfigOverride#getVisibility()\"></xref>)."
  overridden: "com.fasterxml.jackson.databind.cfg.MapperConfig.getDefaultVisibilityChecker(java.lang.Class<?>,com.fasterxml.jackson.databind.introspect.AnnotatedClass)"
  parameters:
  - name: "baseType"
    type: "<xref href=\"java.lang.Class?alt=java.lang.Class&text=Class\" data-throw-if-not-resolved=\"False\" />&lt;?&gt;"
  - name: "actualClass"
    type: "<xref href=\"com.fasterxml.jackson.databind.introspect.AnnotatedClass?alt=com.fasterxml.jackson.databind.introspect.AnnotatedClass&text=AnnotatedClass\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public final VisibilityChecker<?> getDefaultVisibilityChecker(Class<?> baseType, AnnotatedClass actualClass)"
  returns:
    type: "<xref href=\"com.fasterxml.jackson.databind.introspect.VisibilityChecker?alt=com.fasterxml.jackson.databind.introspect.VisibilityChecker&text=VisibilityChecker\" data-throw-if-not-resolved=\"False\" />&lt;?&gt;"
type: "method"
metadata: {}
package: "com.fasterxml.jackson.databind.cfg"
artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
