### YamlMime:ManagedReference
items:
- uid: com.fasterxml.jackson.core.util.JsonGeneratorDelegate
  id: JsonGeneratorDelegate
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.util
  children:
  - com.fasterxml.jackson.core.util.JsonGeneratorDelegate.JsonGeneratorDelegate(com.fasterxml.jackson.core.JsonGenerator)
  - com.fasterxml.jackson.core.util.JsonGeneratorDelegate.JsonGeneratorDelegate(com.fasterxml.jackson.core.JsonGenerator,boolean)
  - com.fasterxml.jackson.core.util.JsonGeneratorDelegate.canOmitFields()
  - com.fasterxml.jackson.core.util.JsonGeneratorDelegate.canUseSchema(com.fasterxml.jackson.core.FormatSchema)
  - com.fasterxml.jackson.core.util.JsonGeneratorDelegate.canWriteBinaryNatively()
  - com.fasterxml.jackson.core.util.JsonGeneratorDelegate.canWriteFormattedNumbers()
  - com.fasterxml.jackson.core.util.JsonGeneratorDelegate.canWriteObjectId()
  - com.fasterxml.jackson.core.util.JsonGeneratorDelegate.canWriteTypeId()
  - com.fasterxml.jackson.core.util.JsonGeneratorDelegate.close()
  - com.fasterxml.jackson.core.util.JsonGeneratorDelegate.copyCurrentEvent(com.fasterxml.jackson.core.JsonParser)
  - com.fasterxml.jackson.core.util.JsonGeneratorDelegate.copyCurrentStructure(com.fasterxml.jackson.core.JsonParser)
  - com.fasterxml.jackson.core.util.JsonGeneratorDelegate.delegate
  - com.fasterxml.jackson.core.util.JsonGeneratorDelegate.delegate()
  - com.fasterxml.jackson.core.util.JsonGeneratorDelegate.delegateCopyMethods
  - com.fasterxml.jackson.core.util.JsonGeneratorDelegate.disable(com.fasterxml.jackson.core.JsonGenerator.Feature)
  - com.fasterxml.jackson.core.util.JsonGeneratorDelegate.enable(com.fasterxml.jackson.core.JsonGenerator.Feature)
  - com.fasterxml.jackson.core.util.JsonGeneratorDelegate.flush()
  - com.fasterxml.jackson.core.util.JsonGeneratorDelegate.getCharacterEscapes()
  - com.fasterxml.jackson.core.util.JsonGeneratorDelegate.getCodec()
  - com.fasterxml.jackson.core.util.JsonGeneratorDelegate.getCurrentValue()
  - com.fasterxml.jackson.core.util.JsonGeneratorDelegate.getDelegate()
  - com.fasterxml.jackson.core.util.JsonGeneratorDelegate.getFeatureMask()
  - com.fasterxml.jackson.core.util.JsonGeneratorDelegate.getHighestEscapedChar()
  - com.fasterxml.jackson.core.util.JsonGeneratorDelegate.getOutputBuffered()
  - com.fasterxml.jackson.core.util.JsonGeneratorDelegate.getOutputContext()
  - com.fasterxml.jackson.core.util.JsonGeneratorDelegate.getOutputTarget()
  - com.fasterxml.jackson.core.util.JsonGeneratorDelegate.getPrettyPrinter()
  - com.fasterxml.jackson.core.util.JsonGeneratorDelegate.getSchema()
  - com.fasterxml.jackson.core.util.JsonGeneratorDelegate.isClosed()
  - com.fasterxml.jackson.core.util.JsonGeneratorDelegate.isEnabled(com.fasterxml.jackson.core.JsonGenerator.Feature)
  - com.fasterxml.jackson.core.util.JsonGeneratorDelegate.overrideFormatFeatures(int,int)
  - com.fasterxml.jackson.core.util.JsonGeneratorDelegate.overrideStdFeatures(int,int)
  - com.fasterxml.jackson.core.util.JsonGeneratorDelegate.setCharacterEscapes(com.fasterxml.jackson.core.io.CharacterEscapes)
  - com.fasterxml.jackson.core.util.JsonGeneratorDelegate.setCodec(com.fasterxml.jackson.core.ObjectCodec)
  - com.fasterxml.jackson.core.util.JsonGeneratorDelegate.setCurrentValue(java.lang.Object)
  - com.fasterxml.jackson.core.util.JsonGeneratorDelegate.setFeatureMask(int)
  - com.fasterxml.jackson.core.util.JsonGeneratorDelegate.setHighestNonEscapedChar(int)
  - com.fasterxml.jackson.core.util.JsonGeneratorDelegate.setPrettyPrinter(com.fasterxml.jackson.core.PrettyPrinter)
  - com.fasterxml.jackson.core.util.JsonGeneratorDelegate.setRootValueSeparator(com.fasterxml.jackson.core.SerializableString)
  - com.fasterxml.jackson.core.util.JsonGeneratorDelegate.setSchema(com.fasterxml.jackson.core.FormatSchema)
  - com.fasterxml.jackson.core.util.JsonGeneratorDelegate.useDefaultPrettyPrinter()
  - com.fasterxml.jackson.core.util.JsonGeneratorDelegate.version()
  - com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeArray(double[],int,int)
  - com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeArray(int[],int,int)
  - com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeArray(java.lang.String[],int,int)
  - com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeArray(long[],int,int)
  - com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeBinary(com.fasterxml.jackson.core.Base64Variant,byte[],int,int)
  - com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeBinary(com.fasterxml.jackson.core.Base64Variant,java.io.InputStream,int)
  - com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeBoolean(boolean)
  - com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeEmbeddedObject(java.lang.Object)
  - com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeEndArray()
  - com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeEndObject()
  - com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeFieldId(long)
  - com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeFieldName(com.fasterxml.jackson.core.SerializableString)
  - com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeFieldName(java.lang.String)
  - com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeNull()
  - com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeNumber(char[],int,int)
  - com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeNumber(double)
  - com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeNumber(float)
  - com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeNumber(int)
  - com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeNumber(java.lang.String)
  - com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeNumber(java.math.BigDecimal)
  - com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeNumber(java.math.BigInteger)
  - com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeNumber(long)
  - com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeNumber(short)
  - com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeObject(java.lang.Object)
  - com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeObjectId(java.lang.Object)
  - com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeObjectRef(java.lang.Object)
  - com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeOmittedField(java.lang.String)
  - com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeRaw(char)
  - com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeRaw(char[],int,int)
  - com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeRaw(com.fasterxml.jackson.core.SerializableString)
  - com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeRaw(java.lang.String)
  - com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeRaw(java.lang.String,int,int)
  - com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeRawUTF8String(byte[],int,int)
  - com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeRawValue(char[],int,int)
  - com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeRawValue(java.lang.String)
  - com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeRawValue(java.lang.String,int,int)
  - com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeStartArray()
  - com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeStartArray(int)
  - com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeStartArray(java.lang.Object)
  - com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeStartArray(java.lang.Object,int)
  - com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeStartObject()
  - com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeStartObject(java.lang.Object)
  - com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeStartObject(java.lang.Object,int)
  - com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeString(char[],int,int)
  - com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeString(com.fasterxml.jackson.core.SerializableString)
  - com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeString(java.io.Reader,int)
  - com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeString(java.lang.String)
  - com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeTree(com.fasterxml.jackson.core.TreeNode)
  - com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeTypeId(java.lang.Object)
  - com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeUTF8String(byte[],int,int)
  langs:
  - java
  name: JsonGeneratorDelegate
  nameWithType: JsonGeneratorDelegate
  fullName: com.fasterxml.jackson.core.util.JsonGeneratorDelegate
  type: Class
  package: com.fasterxml.jackson.core.util
  syntax:
    content: public class JsonGeneratorDelegate extends JsonGenerator
  inheritance:
  - java.lang.Object
  - com.fasterxml.jackson.core.JsonGenerator
  inheritedMembers:
  - com.fasterxml.jackson.core.JsonGenerator._copyCurrentContents(com.fasterxml.jackson.core.JsonParser)
  - com.fasterxml.jackson.core.JsonGenerator._reportError(java.lang.String)
  - com.fasterxml.jackson.core.JsonGenerator._reportUnsupportedOperation()
  - com.fasterxml.jackson.core.JsonGenerator._throwInternal()
  - com.fasterxml.jackson.core.JsonGenerator._verifyOffsets(int,int,int)
  - com.fasterxml.jackson.core.JsonGenerator._writeSimpleObject(java.lang.Object)
  - com.fasterxml.jackson.core.JsonGenerator.canOmitFields()
  - com.fasterxml.jackson.core.JsonGenerator.canUseSchema(com.fasterxml.jackson.core.FormatSchema)
  - com.fasterxml.jackson.core.JsonGenerator.canWriteBinaryNatively()
  - com.fasterxml.jackson.core.JsonGenerator.canWriteFormattedNumbers()
  - com.fasterxml.jackson.core.JsonGenerator.canWriteObjectId()
  - com.fasterxml.jackson.core.JsonGenerator.canWriteTypeId()
  - com.fasterxml.jackson.core.JsonGenerator.close()
  - com.fasterxml.jackson.core.JsonGenerator.configure(com.fasterxml.jackson.core.JsonGenerator.Feature,boolean)
  - com.fasterxml.jackson.core.JsonGenerator.copyCurrentEvent(com.fasterxml.jackson.core.JsonParser)
  - com.fasterxml.jackson.core.JsonGenerator.copyCurrentStructure(com.fasterxml.jackson.core.JsonParser)
  - com.fasterxml.jackson.core.JsonGenerator.disable(com.fasterxml.jackson.core.JsonGenerator.Feature)
  - com.fasterxml.jackson.core.JsonGenerator.enable(com.fasterxml.jackson.core.JsonGenerator.Feature)
  - com.fasterxml.jackson.core.JsonGenerator.flush()
  - com.fasterxml.jackson.core.JsonGenerator.getCharacterEscapes()
  - com.fasterxml.jackson.core.JsonGenerator.getCodec()
  - com.fasterxml.jackson.core.JsonGenerator.getCurrentValue()
  - com.fasterxml.jackson.core.JsonGenerator.getFeatureMask()
  - com.fasterxml.jackson.core.JsonGenerator.getFormatFeatures()
  - com.fasterxml.jackson.core.JsonGenerator.getHighestEscapedChar()
  - com.fasterxml.jackson.core.JsonGenerator.getOutputBuffered()
  - com.fasterxml.jackson.core.JsonGenerator.getOutputContext()
  - com.fasterxml.jackson.core.JsonGenerator.getOutputTarget()
  - com.fasterxml.jackson.core.JsonGenerator.getPrettyPrinter()
  - com.fasterxml.jackson.core.JsonGenerator.getSchema()
  - com.fasterxml.jackson.core.JsonGenerator.isClosed()
  - com.fasterxml.jackson.core.JsonGenerator.isEnabled(com.fasterxml.jackson.core.JsonGenerator.Feature)
  - com.fasterxml.jackson.core.JsonGenerator.isEnabled(com.fasterxml.jackson.core.StreamWriteFeature)
  - com.fasterxml.jackson.core.JsonGenerator.overrideFormatFeatures(int,int)
  - com.fasterxml.jackson.core.JsonGenerator.overrideStdFeatures(int,int)
  - com.fasterxml.jackson.core.JsonGenerator.setCharacterEscapes(com.fasterxml.jackson.core.io.CharacterEscapes)
  - com.fasterxml.jackson.core.JsonGenerator.setCodec(com.fasterxml.jackson.core.ObjectCodec)
  - com.fasterxml.jackson.core.JsonGenerator.setCurrentValue(java.lang.Object)
  - com.fasterxml.jackson.core.JsonGenerator.setFeatureMask(int)
  - com.fasterxml.jackson.core.JsonGenerator.setHighestNonEscapedChar(int)
  - com.fasterxml.jackson.core.JsonGenerator.setPrettyPrinter(com.fasterxml.jackson.core.PrettyPrinter)
  - com.fasterxml.jackson.core.JsonGenerator.setRootValueSeparator(com.fasterxml.jackson.core.SerializableString)
  - com.fasterxml.jackson.core.JsonGenerator.setSchema(com.fasterxml.jackson.core.FormatSchema)
  - com.fasterxml.jackson.core.JsonGenerator.useDefaultPrettyPrinter()
  - com.fasterxml.jackson.core.JsonGenerator.version()
  - com.fasterxml.jackson.core.JsonGenerator.writeArray(double[],int,int)
  - com.fasterxml.jackson.core.JsonGenerator.writeArray(int[],int,int)
  - com.fasterxml.jackson.core.JsonGenerator.writeArray(java.lang.String[],int,int)
  - com.fasterxml.jackson.core.JsonGenerator.writeArray(long[],int,int)
  - com.fasterxml.jackson.core.JsonGenerator.writeArrayFieldStart(java.lang.String)
  - com.fasterxml.jackson.core.JsonGenerator.writeBinary(byte[])
  - com.fasterxml.jackson.core.JsonGenerator.writeBinary(byte[],int,int)
  - com.fasterxml.jackson.core.JsonGenerator.writeBinary(com.fasterxml.jackson.core.Base64Variant,byte[],int,int)
  - com.fasterxml.jackson.core.JsonGenerator.writeBinary(com.fasterxml.jackson.core.Base64Variant,java.io.InputStream,int)
  - com.fasterxml.jackson.core.JsonGenerator.writeBinary(java.io.InputStream,int)
  - com.fasterxml.jackson.core.JsonGenerator.writeBinaryField(java.lang.String,byte[])
  - com.fasterxml.jackson.core.JsonGenerator.writeBoolean(boolean)
  - com.fasterxml.jackson.core.JsonGenerator.writeBooleanField(java.lang.String,boolean)
  - com.fasterxml.jackson.core.JsonGenerator.writeEmbeddedObject(java.lang.Object)
  - com.fasterxml.jackson.core.JsonGenerator.writeEndArray()
  - com.fasterxml.jackson.core.JsonGenerator.writeEndObject()
  - com.fasterxml.jackson.core.JsonGenerator.writeFieldId(long)
  - com.fasterxml.jackson.core.JsonGenerator.writeFieldName(com.fasterxml.jackson.core.SerializableString)
  - com.fasterxml.jackson.core.JsonGenerator.writeFieldName(java.lang.String)
  - com.fasterxml.jackson.core.JsonGenerator.writeNull()
  - com.fasterxml.jackson.core.JsonGenerator.writeNullField(java.lang.String)
  - com.fasterxml.jackson.core.JsonGenerator.writeNumber(char[],int,int)
  - com.fasterxml.jackson.core.JsonGenerator.writeNumber(double)
  - com.fasterxml.jackson.core.JsonGenerator.writeNumber(float)
  - com.fasterxml.jackson.core.JsonGenerator.writeNumber(int)
  - com.fasterxml.jackson.core.JsonGenerator.writeNumber(java.lang.String)
  - com.fasterxml.jackson.core.JsonGenerator.writeNumber(java.math.BigDecimal)
  - com.fasterxml.jackson.core.JsonGenerator.writeNumber(java.math.BigInteger)
  - com.fasterxml.jackson.core.JsonGenerator.writeNumber(long)
  - com.fasterxml.jackson.core.JsonGenerator.writeNumber(short)
  - com.fasterxml.jackson.core.JsonGenerator.writeNumberField(java.lang.String,double)
  - com.fasterxml.jackson.core.JsonGenerator.writeNumberField(java.lang.String,float)
  - com.fasterxml.jackson.core.JsonGenerator.writeNumberField(java.lang.String,int)
  - com.fasterxml.jackson.core.JsonGenerator.writeNumberField(java.lang.String,java.math.BigDecimal)
  - com.fasterxml.jackson.core.JsonGenerator.writeNumberField(java.lang.String,java.math.BigInteger)
  - com.fasterxml.jackson.core.JsonGenerator.writeNumberField(java.lang.String,long)
  - com.fasterxml.jackson.core.JsonGenerator.writeNumberField(java.lang.String,short)
  - com.fasterxml.jackson.core.JsonGenerator.writeObject(java.lang.Object)
  - com.fasterxml.jackson.core.JsonGenerator.writeObjectField(java.lang.String,java.lang.Object)
  - com.fasterxml.jackson.core.JsonGenerator.writeObjectFieldStart(java.lang.String)
  - com.fasterxml.jackson.core.JsonGenerator.writeObjectId(java.lang.Object)
  - com.fasterxml.jackson.core.JsonGenerator.writeObjectRef(java.lang.Object)
  - com.fasterxml.jackson.core.JsonGenerator.writeOmittedField(java.lang.String)
  - com.fasterxml.jackson.core.JsonGenerator.writeRaw(char)
  - com.fasterxml.jackson.core.JsonGenerator.writeRaw(char[],int,int)
  - com.fasterxml.jackson.core.JsonGenerator.writeRaw(com.fasterxml.jackson.core.SerializableString)
  - com.fasterxml.jackson.core.JsonGenerator.writeRaw(java.lang.String)
  - com.fasterxml.jackson.core.JsonGenerator.writeRaw(java.lang.String,int,int)
  - com.fasterxml.jackson.core.JsonGenerator.writeRawUTF8String(byte[],int,int)
  - com.fasterxml.jackson.core.JsonGenerator.writeRawValue(char[],int,int)
  - com.fasterxml.jackson.core.JsonGenerator.writeRawValue(com.fasterxml.jackson.core.SerializableString)
  - com.fasterxml.jackson.core.JsonGenerator.writeRawValue(java.lang.String)
  - com.fasterxml.jackson.core.JsonGenerator.writeRawValue(java.lang.String,int,int)
  - com.fasterxml.jackson.core.JsonGenerator.writeStartArray()
  - com.fasterxml.jackson.core.JsonGenerator.writeStartArray(int)
  - com.fasterxml.jackson.core.JsonGenerator.writeStartArray(java.lang.Object)
  - com.fasterxml.jackson.core.JsonGenerator.writeStartArray(java.lang.Object,int)
  - com.fasterxml.jackson.core.JsonGenerator.writeStartObject()
  - com.fasterxml.jackson.core.JsonGenerator.writeStartObject(java.lang.Object)
  - com.fasterxml.jackson.core.JsonGenerator.writeStartObject(java.lang.Object,int)
  - com.fasterxml.jackson.core.JsonGenerator.writeString(char[],int,int)
  - com.fasterxml.jackson.core.JsonGenerator.writeString(com.fasterxml.jackson.core.SerializableString)
  - com.fasterxml.jackson.core.JsonGenerator.writeString(java.io.Reader,int)
  - com.fasterxml.jackson.core.JsonGenerator.writeString(java.lang.String)
  - com.fasterxml.jackson.core.JsonGenerator.writeStringField(java.lang.String,java.lang.String)
  - com.fasterxml.jackson.core.JsonGenerator.writeTree(com.fasterxml.jackson.core.TreeNode)
  - com.fasterxml.jackson.core.JsonGenerator.writeTypeId(java.lang.Object)
  - com.fasterxml.jackson.core.JsonGenerator.writeTypePrefix(com.fasterxml.jackson.core.type.WritableTypeId)
  - com.fasterxml.jackson.core.JsonGenerator.writeTypeSuffix(com.fasterxml.jackson.core.type.WritableTypeId)
  - com.fasterxml.jackson.core.JsonGenerator.writeUTF8String(byte[],int,int)
  - java.lang.Object.clone()
  - java.lang.Object.equals(java.lang.Object)
  - java.lang.Object.finalize()
  - java.lang.Object.getClass()
  - java.lang.Object.hashCode()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.toString()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
- uid: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.JsonGeneratorDelegate(com.fasterxml.jackson.core.JsonGenerator)
  id: JsonGeneratorDelegate(com.fasterxml.jackson.core.JsonGenerator)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.util.JsonGeneratorDelegate
  langs:
  - java
  name: JsonGeneratorDelegate(JsonGenerator d)
  nameWithType: JsonGeneratorDelegate.JsonGeneratorDelegate(JsonGenerator d)
  fullName: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.JsonGeneratorDelegate(JsonGenerator d)
  overload: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.JsonGeneratorDelegate*
  type: Constructor
  package: com.fasterxml.jackson.core.util
  syntax:
    content: public JsonGeneratorDelegate(JsonGenerator d)
    parameters:
    - id: d
      type: com.fasterxml.jackson.core.JsonGenerator
- uid: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.JsonGeneratorDelegate(com.fasterxml.jackson.core.JsonGenerator,boolean)
  id: JsonGeneratorDelegate(com.fasterxml.jackson.core.JsonGenerator,boolean)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.util.JsonGeneratorDelegate
  langs:
  - java
  name: JsonGeneratorDelegate(JsonGenerator d, boolean delegateCopyMethods)
  nameWithType: JsonGeneratorDelegate.JsonGeneratorDelegate(JsonGenerator d, boolean delegateCopyMethods)
  fullName: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.JsonGeneratorDelegate(JsonGenerator d, boolean delegateCopyMethods)
  overload: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.JsonGeneratorDelegate*
  type: Constructor
  package: com.fasterxml.jackson.core.util
  syntax:
    content: public JsonGeneratorDelegate(JsonGenerator d, boolean delegateCopyMethods)
    parameters:
    - id: d
      type: com.fasterxml.jackson.core.JsonGenerator
    - id: delegateCopyMethods
      type: boolean
      description: >-
        Flag assigned to <code>delagateCopyMethod</code>
           and which defines whether copy methods are handled locally (false), or
           delegated to configured
- uid: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.canOmitFields()
  id: canOmitFields()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.util.JsonGeneratorDelegate
  langs:
  - java
  name: canOmitFields()
  nameWithType: JsonGeneratorDelegate.canOmitFields()
  fullName: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.canOmitFields()
  overload: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.canOmitFields*
  type: Method
  package: com.fasterxml.jackson.core.util
  summary: Introspection method to call to check whether it is ok to omit writing of Object fields or not. Most formats do allow omission, but certain positional formats (such as CSV) require output of placeholders, even if no real values are to be emitted.
  syntax:
    content: public boolean canOmitFields()
    return:
      type: boolean
- uid: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.canUseSchema(com.fasterxml.jackson.core.FormatSchema)
  id: canUseSchema(com.fasterxml.jackson.core.FormatSchema)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.util.JsonGeneratorDelegate
  langs:
  - java
  name: canUseSchema(FormatSchema schema)
  nameWithType: JsonGeneratorDelegate.canUseSchema(FormatSchema schema)
  fullName: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.canUseSchema(FormatSchema schema)
  overload: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.canUseSchema*
  type: Method
  package: com.fasterxml.jackson.core.util
  summary: Method that can be used to verify that given schema can be used with this generator (using <xref uid="com.fasterxml.jackson.core.util.JsonGeneratorDelegate.setSchema*" data-throw-if-not-resolved="false">#setSchema</xref>).
  syntax:
    content: public boolean canUseSchema(FormatSchema schema)
    parameters:
    - id: schema
      type: com.fasterxml.jackson.core.FormatSchema
    return:
      type: boolean
- uid: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.canWriteBinaryNatively()
  id: canWriteBinaryNatively()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.util.JsonGeneratorDelegate
  langs:
  - java
  name: canWriteBinaryNatively()
  nameWithType: JsonGeneratorDelegate.canWriteBinaryNatively()
  fullName: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.canWriteBinaryNatively()
  overload: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.canWriteBinaryNatively*
  type: Method
  package: com.fasterxml.jackson.core.util
  summary: >-
    Introspection method that may be called to see if the underlying data format supports "native" binary data; that is, an efficient output of binary content without encoding.


    Default implementation returns false; overridden by data formats that do support native binary content.
  syntax:
    content: public boolean canWriteBinaryNatively()
    return:
      type: boolean
- uid: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.canWriteFormattedNumbers()
  id: canWriteFormattedNumbers()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.util.JsonGeneratorDelegate
  langs:
  - java
  name: canWriteFormattedNumbers()
  nameWithType: JsonGeneratorDelegate.canWriteFormattedNumbers()
  fullName: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.canWriteFormattedNumbers()
  overload: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.canWriteFormattedNumbers*
  type: Method
  package: com.fasterxml.jackson.core.util
  summary: Introspection method to call to check whether it is possible to write numbers using <xref uid="com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeNumber(java.lang.String)" data-throw-if-not-resolved="false">#writeNumber(java.lang.String)</xref> using possible custom format, or not. Typically textual formats allow this (and JSON specifically does), whereas binary formats do not allow this (except by writing them as Strings). Usual reason for calling this method is to check whether custom formatting of numbers may be applied by higher-level code (databinding) or not.
  syntax:
    content: public boolean canWriteFormattedNumbers()
    return:
      type: boolean
- uid: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.canWriteObjectId()
  id: canWriteObjectId()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.util.JsonGeneratorDelegate
  langs:
  - java
  name: canWriteObjectId()
  nameWithType: JsonGeneratorDelegate.canWriteObjectId()
  fullName: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.canWriteObjectId()
  overload: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.canWriteObjectId*
  type: Method
  package: com.fasterxml.jackson.core.util
  summary: >-
    Introspection method that may be called to see if the underlying data format supports some kind of Object Ids natively (many do not; for example, JSON doesn't). This method **must** be called prior to calling <xref uid="com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeObjectId*" data-throw-if-not-resolved="false">#writeObjectId</xref> or <xref uid="com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeObjectRef*" data-throw-if-not-resolved="false">#writeObjectRef</xref>.


    Default implementation returns false; overridden by data formats that do support native Object Ids. Caller is expected to either use a non-native notation (explicit property or such), or fail, in case it can not use native object ids.
  syntax:
    content: public boolean canWriteObjectId()
    return:
      type: boolean
- uid: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.canWriteTypeId()
  id: canWriteTypeId()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.util.JsonGeneratorDelegate
  langs:
  - java
  name: canWriteTypeId()
  nameWithType: JsonGeneratorDelegate.canWriteTypeId()
  fullName: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.canWriteTypeId()
  overload: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.canWriteTypeId*
  type: Method
  package: com.fasterxml.jackson.core.util
  summary: >-
    Introspection method that may be called to see if the underlying data format supports some kind of Type Ids natively (many do not; for example, JSON doesn't). This method **must** be called prior to calling <xref uid="com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeTypeId*" data-throw-if-not-resolved="false">#writeTypeId</xref>.


    Default implementation returns false; overridden by data formats that do support native Type Ids. Caller is expected to either use a non-native notation (explicit property or such), or fail, in case it can not use native type ids.
  syntax:
    content: public boolean canWriteTypeId()
    return:
      type: boolean
- uid: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.close()
  id: close()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.util.JsonGeneratorDelegate
  langs:
  - java
  name: close()
  nameWithType: JsonGeneratorDelegate.close()
  fullName: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.close()
  overload: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.close*
  type: Method
  package: com.fasterxml.jackson.core.util
  summary: >-
    Method called to close this generator, so that no more content can be written.


    Whether the underlying target (stream, writer) gets closed depends on whether this generator either manages the target (i.e. is the only one with access to the target -- case if caller passes a reference to the resource such as File, but not stream); or has feature <xref uid="" data-throw-if-not-resolved="false">Feature#AUTO_CLOSE_TARGET</xref> enabled. If either of above is true, the target is also closed. Otherwise (not managing, feature not enabled), target is not closed.
  syntax:
    content: public void close()
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.copyCurrentEvent(com.fasterxml.jackson.core.JsonParser)
  id: copyCurrentEvent(com.fasterxml.jackson.core.JsonParser)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.util.JsonGeneratorDelegate
  langs:
  - java
  name: copyCurrentEvent(JsonParser p)
  nameWithType: JsonGeneratorDelegate.copyCurrentEvent(JsonParser p)
  fullName: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.copyCurrentEvent(JsonParser p)
  overload: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.copyCurrentEvent*
  type: Method
  package: com.fasterxml.jackson.core.util
  summary: >-
    Method for copying contents of the current event that the given parser instance points to. Note that the method **will not** copy any other events, such as events contained within JSON Array or Object structures.


    Calling this method will not advance the given parser, although it may cause parser to internally process more data (if it lazy loads contents of value events, for example)
  syntax:
    content: public void copyCurrentEvent(JsonParser p)
    parameters:
    - id: p
      type: com.fasterxml.jackson.core.JsonParser
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.copyCurrentStructure(com.fasterxml.jackson.core.JsonParser)
  id: copyCurrentStructure(com.fasterxml.jackson.core.JsonParser)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.util.JsonGeneratorDelegate
  langs:
  - java
  name: copyCurrentStructure(JsonParser p)
  nameWithType: JsonGeneratorDelegate.copyCurrentStructure(JsonParser p)
  fullName: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.copyCurrentStructure(JsonParser p)
  overload: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.copyCurrentStructure*
  type: Method
  package: com.fasterxml.jackson.core.util
  summary: >-
    Method for copying contents of the current event **and following events that it encloses** the given parser instance points to.


    So what constitutes enclosing? Here is the list of events that have associated enclosed events that will get copied:

     *  <xref uid="com.fasterxml.jackson.core.JsonToken.START_OBJECT" data-throw-if-not-resolved="false">JsonToken#START_OBJECT</xref>: all events up to and including matching (closing) <xref uid="com.fasterxml.jackson.core.JsonToken.END_OBJECT" data-throw-if-not-resolved="false">JsonToken#END_OBJECT</xref> will be copied
     *  <xref uid="com.fasterxml.jackson.core.JsonToken.START_ARRAY" data-throw-if-not-resolved="false">JsonToken#START_ARRAY</xref> all events up to and including matching (closing) <xref uid="com.fasterxml.jackson.core.JsonToken.END_ARRAY" data-throw-if-not-resolved="false">JsonToken#END_ARRAY</xref> will be copied
     *  <xref uid="com.fasterxml.jackson.core.JsonToken.FIELD_NAME" data-throw-if-not-resolved="false">JsonToken#FIELD_NAME</xref> the logical value (which can consist of a single scalar value; or a sequence of related events for structured types (JSON Arrays, Objects)) will be copied along with the name itself. So essentially the whole **field entry** (name and value) will be copied.

    After calling this method, parser will point to the **last event** that was copied. This will either be the event parser already pointed to (if there were no enclosed events), or the last enclosed event copied.
  syntax:
    content: public void copyCurrentStructure(JsonParser p)
    parameters:
    - id: p
      type: com.fasterxml.jackson.core.JsonParser
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.delegate
  id: delegate
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.util.JsonGeneratorDelegate
  langs:
  - java
  name: delegate
  nameWithType: JsonGeneratorDelegate.delegate
  fullName: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.delegate
  type: Field
  package: com.fasterxml.jackson.core.util
  summary: Delegate object that method calls are delegated to.
  syntax:
    content: protected JsonGenerator delegate
    return:
      type: com.fasterxml.jackson.core.JsonGenerator
- uid: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.delegate()
  id: delegate()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.util.JsonGeneratorDelegate
  langs:
  - java
  name: delegate()
  nameWithType: JsonGeneratorDelegate.delegate()
  fullName: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.delegate()
  overload: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.delegate*
  type: Method
  package: com.fasterxml.jackson.core.util
  syntax:
    content: public JsonGenerator delegate()
    return:
      type: com.fasterxml.jackson.core.JsonGenerator
- uid: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.delegateCopyMethods
  id: delegateCopyMethods
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.util.JsonGeneratorDelegate
  langs:
  - java
  name: delegateCopyMethods
  nameWithType: JsonGeneratorDelegate.delegateCopyMethods
  fullName: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.delegateCopyMethods
  type: Field
  package: com.fasterxml.jackson.core.util
  summary: Whether copy methods (<xref uid="com.fasterxml.jackson.core.util.JsonGeneratorDelegate.copyCurrentEvent*" data-throw-if-not-resolved="false">#copyCurrentEvent</xref>, <xref uid="com.fasterxml.jackson.core.util.JsonGeneratorDelegate.copyCurrentStructure*" data-throw-if-not-resolved="false">#copyCurrentStructure</xref>, <xref uid="com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeTree*" data-throw-if-not-resolved="false">#writeTree</xref> and <xref uid="com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeObject*" data-throw-if-not-resolved="false">#writeObject</xref>) are to be called (true), or handled by this object (false).
  syntax:
    content: protected boolean delegateCopyMethods
    return:
      type: boolean
- uid: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.disable(com.fasterxml.jackson.core.JsonGenerator.Feature)
  id: disable(com.fasterxml.jackson.core.JsonGenerator.Feature)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.util.JsonGeneratorDelegate
  langs:
  - java
  name: disable(JsonGenerator.Feature f)
  nameWithType: JsonGeneratorDelegate.disable(JsonGenerator.Feature f)
  fullName: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.disable(JsonGenerator.Feature f)
  overload: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.disable*
  type: Method
  package: com.fasterxml.jackson.core.util
  summary: Method for disabling specified features (check <xref uid="" data-throw-if-not-resolved="false">Feature</xref> for list of features)
  syntax:
    content: public JsonGenerator disable(JsonGenerator.Feature f)
    parameters:
    - id: f
      type: com.fasterxml.jackson.core.JsonGenerator.Feature
    return:
      type: com.fasterxml.jackson.core.JsonGenerator
- uid: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.enable(com.fasterxml.jackson.core.JsonGenerator.Feature)
  id: enable(com.fasterxml.jackson.core.JsonGenerator.Feature)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.util.JsonGeneratorDelegate
  langs:
  - java
  name: enable(JsonGenerator.Feature f)
  nameWithType: JsonGeneratorDelegate.enable(JsonGenerator.Feature f)
  fullName: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.enable(JsonGenerator.Feature f)
  overload: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.enable*
  type: Method
  package: com.fasterxml.jackson.core.util
  summary: 'Method for enabling specified parser features: check <xref uid="" data-throw-if-not-resolved="false">Feature</xref> for list of available features.'
  syntax:
    content: public JsonGenerator enable(JsonGenerator.Feature f)
    parameters:
    - id: f
      type: com.fasterxml.jackson.core.JsonGenerator.Feature
    return:
      type: com.fasterxml.jackson.core.JsonGenerator
- uid: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.flush()
  id: flush()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.util.JsonGeneratorDelegate
  langs:
  - java
  name: flush()
  nameWithType: JsonGeneratorDelegate.flush()
  fullName: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.flush()
  overload: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.flush*
  type: Method
  package: com.fasterxml.jackson.core.util
  summary: Method called to flush any buffered content to the underlying target (output stream, writer), and to flush the target itself as well.
  syntax:
    content: public void flush()
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.getCharacterEscapes()
  id: getCharacterEscapes()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.util.JsonGeneratorDelegate
  langs:
  - java
  name: getCharacterEscapes()
  nameWithType: JsonGeneratorDelegate.getCharacterEscapes()
  fullName: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.getCharacterEscapes()
  overload: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.getCharacterEscapes*
  type: Method
  package: com.fasterxml.jackson.core.util
  summary: Method for accessing custom escapes factory uses for <xref uid="com.fasterxml.jackson.core.JsonGenerator" data-throw-if-not-resolved="false">JsonGenerator</xref>s it creates.
  syntax:
    content: public CharacterEscapes getCharacterEscapes()
    return:
      type: com.fasterxml.jackson.core.io.CharacterEscapes
- uid: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.getCodec()
  id: getCodec()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.util.JsonGeneratorDelegate
  langs:
  - java
  name: getCodec()
  nameWithType: JsonGeneratorDelegate.getCodec()
  fullName: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.getCodec()
  overload: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.getCodec*
  type: Method
  package: com.fasterxml.jackson.core.util
  summary: Method for accessing the object used for writing Java object as JSON content (using method <xref uid="com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeObject*" data-throw-if-not-resolved="false">#writeObject</xref>).
  syntax:
    content: public ObjectCodec getCodec()
    return:
      type: com.fasterxml.jackson.core.ObjectCodec
- uid: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.getCurrentValue()
  id: getCurrentValue()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.util.JsonGeneratorDelegate
  langs:
  - java
  name: getCurrentValue()
  nameWithType: JsonGeneratorDelegate.getCurrentValue()
  fullName: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.getCurrentValue()
  overload: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.getCurrentValue*
  type: Method
  package: com.fasterxml.jackson.core.util
  summary: >-
    Helper method, usually equivalent to: `getOutputContext().getCurrentValue();`


    Note that "current value" is NOT populated (or used) by Streaming parser; it is only used by higher-level data-binding functionality. The reason it is included here is that it can be stored and accessed hierarchically, and gets passed through data-binding.
  syntax:
    content: public Object getCurrentValue()
    return:
      type: java.lang.Object
- uid: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.getDelegate()
  id: getDelegate()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.util.JsonGeneratorDelegate
  langs:
  - java
  name: getDelegate()
  nameWithType: JsonGeneratorDelegate.getDelegate()
  fullName: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.getDelegate()
  overload: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.getDelegate*
  type: Method
  package: com.fasterxml.jackson.core.util
  syntax:
    content: public JsonGenerator getDelegate()
    return:
      type: com.fasterxml.jackson.core.JsonGenerator
- uid: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.getFeatureMask()
  id: getFeatureMask()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.util.JsonGeneratorDelegate
  langs:
  - java
  name: getFeatureMask()
  nameWithType: JsonGeneratorDelegate.getFeatureMask()
  fullName: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.getFeatureMask()
  overload: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.getFeatureMask*
  type: Method
  package: com.fasterxml.jackson.core.util
  summary: Bulk access method for getting state of all standard (non-dataformat-specific) <xref uid="com.fasterxml.jackson.core.JsonGenerator.Feature" data-throw-if-not-resolved="false">JsonGenerator.Feature</xref>s.
  syntax:
    content: public int getFeatureMask()
    return:
      type: int
- uid: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.getHighestEscapedChar()
  id: getHighestEscapedChar()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.util.JsonGeneratorDelegate
  langs:
  - java
  name: getHighestEscapedChar()
  nameWithType: JsonGeneratorDelegate.getHighestEscapedChar()
  fullName: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.getHighestEscapedChar()
  overload: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.getHighestEscapedChar*
  type: Method
  package: com.fasterxml.jackson.core.util
  summary: 'Accessor method for testing what is the highest unescaped character configured for this generator. This may be either positive value (when escaping configuration has been set and is in effect), or 0 to indicate that no additional escaping is in effect. Some generators may not support additional escaping: for example, generators for binary formats that do not use escaping should simply return 0.'
  syntax:
    content: public int getHighestEscapedChar()
    return:
      type: int
- uid: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.getOutputBuffered()
  id: getOutputBuffered()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.util.JsonGeneratorDelegate
  langs:
  - java
  name: getOutputBuffered()
  nameWithType: JsonGeneratorDelegate.getOutputBuffered()
  fullName: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.getOutputBuffered()
  overload: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.getOutputBuffered*
  type: Method
  package: com.fasterxml.jackson.core.util
  summary: >-
    Method for verifying amount of content that is buffered by generator but not yet flushed to the underlying target (stream, writer), in units (byte, char) that the generator implementation uses for buffering; or -1 if this information is not available. Unit used is often the same as the unit of underlying target (that is, \`byte\` for <xref uid="java.io.OutputStream" data-throw-if-not-resolved="false">java.io.OutputStream</xref>, \`char\` for <xref uid="java.io.Writer" data-throw-if-not-resolved="false">java.io.Writer</xref>), but may differ if buffering is done before encoding. Default JSON-backed implementations do use matching units.


    Note: non-JSON implementations will be retrofitted for 2.6 and beyond; please report if you see -1 (missing override)
  syntax:
    content: public int getOutputBuffered()
    return:
      type: int
- uid: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.getOutputContext()
  id: getOutputContext()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.util.JsonGeneratorDelegate
  langs:
  - java
  name: getOutputContext()
  nameWithType: JsonGeneratorDelegate.getOutputContext()
  fullName: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.getOutputContext()
  overload: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.getOutputContext*
  type: Method
  package: com.fasterxml.jackson.core.util
  syntax:
    content: public JsonStreamContext getOutputContext()
    return:
      type: com.fasterxml.jackson.core.JsonStreamContext
- uid: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.getOutputTarget()
  id: getOutputTarget()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.util.JsonGeneratorDelegate
  langs:
  - java
  name: getOutputTarget()
  nameWithType: JsonGeneratorDelegate.getOutputTarget()
  fullName: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.getOutputTarget()
  overload: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.getOutputTarget*
  type: Method
  package: com.fasterxml.jackson.core.util
  summary: >-
    Method that can be used to get access to object that is used as target for generated output; this is usually either <xref uid="java.io.OutputStream" data-throw-if-not-resolved="false">OutputStream</xref> or <xref uid="" data-throw-if-not-resolved="false">Writer</xref>, depending on what generator was constructed with. Note that returned value may be null in some cases; including case where implementation does not want to exposed raw source to caller. In cases where output has been decorated, object returned here is the decorated version; this allows some level of interaction between users of generator and decorator object.


    In general use of this accessor should be considered as "last effort", i.e. only used if no other mechanism is applicable.
  syntax:
    content: public Object getOutputTarget()
    return:
      type: java.lang.Object
- uid: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.getPrettyPrinter()
  id: getPrettyPrinter()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.util.JsonGeneratorDelegate
  langs:
  - java
  name: getPrettyPrinter()
  nameWithType: JsonGeneratorDelegate.getPrettyPrinter()
  fullName: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.getPrettyPrinter()
  overload: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.getPrettyPrinter*
  type: Method
  package: com.fasterxml.jackson.core.util
  summary: Accessor for checking whether this generator has a configured <xref uid="com.fasterxml.jackson.core.PrettyPrinter" data-throw-if-not-resolved="false">PrettyPrinter</xref>; returns it if so, null if none configured.
  syntax:
    content: public PrettyPrinter getPrettyPrinter()
    return:
      type: com.fasterxml.jackson.core.PrettyPrinter
- uid: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.getSchema()
  id: getSchema()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.util.JsonGeneratorDelegate
  langs:
  - java
  name: getSchema()
  nameWithType: JsonGeneratorDelegate.getSchema()
  fullName: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.getSchema()
  overload: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.getSchema*
  type: Method
  package: com.fasterxml.jackson.core.util
  summary: Method for accessing Schema that this parser uses, if any. Default implementation returns null.
  syntax:
    content: public FormatSchema getSchema()
    return:
      type: com.fasterxml.jackson.core.FormatSchema
- uid: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.isClosed()
  id: isClosed()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.util.JsonGeneratorDelegate
  langs:
  - java
  name: isClosed()
  nameWithType: JsonGeneratorDelegate.isClosed()
  fullName: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.isClosed()
  overload: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.isClosed*
  type: Method
  package: com.fasterxml.jackson.core.util
  summary: Method that can be called to determine whether this generator is closed or not. If it is closed, no more output can be done.
  syntax:
    content: public boolean isClosed()
    return:
      type: boolean
- uid: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.isEnabled(com.fasterxml.jackson.core.JsonGenerator.Feature)
  id: isEnabled(com.fasterxml.jackson.core.JsonGenerator.Feature)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.util.JsonGeneratorDelegate
  langs:
  - java
  name: isEnabled(JsonGenerator.Feature f)
  nameWithType: JsonGeneratorDelegate.isEnabled(JsonGenerator.Feature f)
  fullName: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.isEnabled(JsonGenerator.Feature f)
  overload: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.isEnabled*
  type: Method
  package: com.fasterxml.jackson.core.util
  summary: Method for checking whether given feature is enabled. Check <xref uid="" data-throw-if-not-resolved="false">Feature</xref> for list of available features.
  syntax:
    content: public boolean isEnabled(JsonGenerator.Feature f)
    parameters:
    - id: f
      type: com.fasterxml.jackson.core.JsonGenerator.Feature
    return:
      type: boolean
- uid: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.overrideFormatFeatures(int,int)
  id: overrideFormatFeatures(int,int)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.util.JsonGeneratorDelegate
  langs:
  - java
  name: overrideFormatFeatures(int values, int mask)
  nameWithType: JsonGeneratorDelegate.overrideFormatFeatures(int values, int mask)
  fullName: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.overrideFormatFeatures(int values, int mask)
  overload: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.overrideFormatFeatures*
  type: Method
  package: com.fasterxml.jackson.core.util
  summary: >-
    Bulk set method for (re)setting states of <xref uid="com.fasterxml.jackson.core.FormatFeature" data-throw-if-not-resolved="false">FormatFeature</xref>s, by specifying values (set / clear) along with a mask, to determine which features to change, if any.


    Default implementation will simply throw an exception to indicate that the generator implementation does not support any <xref uid="com.fasterxml.jackson.core.FormatFeature" data-throw-if-not-resolved="false">FormatFeature</xref>s.
  syntax:
    content: public JsonGenerator overrideFormatFeatures(int values, int mask)
    parameters:
    - id: values
      type: int
    - id: mask
      type: int
    return:
      type: com.fasterxml.jackson.core.JsonGenerator
- uid: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.overrideStdFeatures(int,int)
  id: overrideStdFeatures(int,int)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.util.JsonGeneratorDelegate
  langs:
  - java
  name: overrideStdFeatures(int values, int mask)
  nameWithType: JsonGeneratorDelegate.overrideStdFeatures(int values, int mask)
  fullName: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.overrideStdFeatures(int values, int mask)
  overload: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.overrideStdFeatures*
  type: Method
  package: com.fasterxml.jackson.core.util
  summary: Bulk set method for (re)setting states of features specified by `mask`. Functionally equivalent to `int oldState = getFeatureMask(); int newState = (oldState & ~mask) | (values & mask); setFeatureMask(newState);` but preferred as this lets caller more efficiently specify actual changes made.
  syntax:
    content: public JsonGenerator overrideStdFeatures(int values, int mask)
    parameters:
    - id: values
      type: int
    - id: mask
      type: int
    return:
      type: com.fasterxml.jackson.core.JsonGenerator
- uid: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.setCharacterEscapes(com.fasterxml.jackson.core.io.CharacterEscapes)
  id: setCharacterEscapes(com.fasterxml.jackson.core.io.CharacterEscapes)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.util.JsonGeneratorDelegate
  langs:
  - java
  name: setCharacterEscapes(CharacterEscapes esc)
  nameWithType: JsonGeneratorDelegate.setCharacterEscapes(CharacterEscapes esc)
  fullName: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.setCharacterEscapes(CharacterEscapes esc)
  overload: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.setCharacterEscapes*
  type: Method
  package: com.fasterxml.jackson.core.util
  summary: >-
    Method for defining custom escapes factory uses for <xref uid="com.fasterxml.jackson.core.JsonGenerator" data-throw-if-not-resolved="false">JsonGenerator</xref>s it creates.


    Default implementation does nothing and simply returns this instance.
  syntax:
    content: public JsonGenerator setCharacterEscapes(CharacterEscapes esc)
    parameters:
    - id: esc
      type: com.fasterxml.jackson.core.io.CharacterEscapes
    return:
      type: com.fasterxml.jackson.core.JsonGenerator
- uid: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.setCodec(com.fasterxml.jackson.core.ObjectCodec)
  id: setCodec(com.fasterxml.jackson.core.ObjectCodec)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.util.JsonGeneratorDelegate
  langs:
  - java
  name: setCodec(ObjectCodec oc)
  nameWithType: JsonGeneratorDelegate.setCodec(ObjectCodec oc)
  fullName: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.setCodec(ObjectCodec oc)
  overload: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.setCodec*
  type: Method
  package: com.fasterxml.jackson.core.util
  summary: Method that can be called to set or reset the object to use for writing Java objects as JsonContent (using method <xref uid="com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeObject*" data-throw-if-not-resolved="false">#writeObject</xref>).
  syntax:
    content: public JsonGenerator setCodec(ObjectCodec oc)
    parameters:
    - id: oc
      type: com.fasterxml.jackson.core.ObjectCodec
    return:
      type: com.fasterxml.jackson.core.JsonGenerator
- uid: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.setCurrentValue(java.lang.Object)
  id: setCurrentValue(java.lang.Object)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.util.JsonGeneratorDelegate
  langs:
  - java
  name: setCurrentValue(Object v)
  nameWithType: JsonGeneratorDelegate.setCurrentValue(Object v)
  fullName: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.setCurrentValue(Object v)
  overload: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.setCurrentValue*
  type: Method
  package: com.fasterxml.jackson.core.util
  summary: 'Helper method, usually equivalent to: `getOutputContext().setCurrentValue(v);`'
  syntax:
    content: public void setCurrentValue(Object v)
    parameters:
    - id: v
      type: java.lang.Object
- uid: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.setFeatureMask(int)
  id: setFeatureMask(int)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.util.JsonGeneratorDelegate
  langs:
  - java
  name: setFeatureMask(int mask)
  nameWithType: JsonGeneratorDelegate.setFeatureMask(int mask)
  fullName: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.setFeatureMask(int mask)
  overload: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.setFeatureMask*
  type: Method
  package: com.fasterxml.jackson.core.util
  summary: Bulk set method for (re)setting states of all standard <xref uid="" data-throw-if-not-resolved="false">Feature</xref>s
  syntax:
    content: public JsonGenerator setFeatureMask(int mask)
    parameters:
    - id: mask
      type: int
    return:
      type: com.fasterxml.jackson.core.JsonGenerator
- uid: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.setHighestNonEscapedChar(int)
  id: setHighestNonEscapedChar(int)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.util.JsonGeneratorDelegate
  langs:
  - java
  name: setHighestNonEscapedChar(int charCode)
  nameWithType: JsonGeneratorDelegate.setHighestNonEscapedChar(int charCode)
  fullName: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.setHighestNonEscapedChar(int charCode)
  overload: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.setHighestNonEscapedChar*
  type: Method
  package: com.fasterxml.jackson.core.util
  summary: >-
    Method that can be called to request that generator escapes all character codes above specified code point (if positive value); or, to not escape any characters except for ones that must be escaped for the data format (if -1). To force escaping of all non-ASCII characters, for example, this method would be called with value of 127.


    Note that generators are NOT required to support setting of value higher than 127, because there are other ways to affect quoting (or lack thereof) of character codes between 0 and 127. Not all generators support concept of escaping, either; if so, calling this method will have no effect.


    Default implementation does nothing; sub-classes need to redefine it according to rules of supported data format.
  syntax:
    content: public JsonGenerator setHighestNonEscapedChar(int charCode)
    parameters:
    - id: charCode
      type: int
    return:
      type: com.fasterxml.jackson.core.JsonGenerator
- uid: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.setPrettyPrinter(com.fasterxml.jackson.core.PrettyPrinter)
  id: setPrettyPrinter(com.fasterxml.jackson.core.PrettyPrinter)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.util.JsonGeneratorDelegate
  langs:
  - java
  name: setPrettyPrinter(PrettyPrinter pp)
  nameWithType: JsonGeneratorDelegate.setPrettyPrinter(PrettyPrinter pp)
  fullName: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.setPrettyPrinter(PrettyPrinter pp)
  overload: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.setPrettyPrinter*
  type: Method
  package: com.fasterxml.jackson.core.util
  summary: >-
    Method for setting a custom pretty printer, which is usually used to add indentation for improved human readability. By default, generator does not do pretty printing.


    To use the default pretty printer that comes with core Jackson distribution, call <xref uid="com.fasterxml.jackson.core.util.JsonGeneratorDelegate.useDefaultPrettyPrinter*" data-throw-if-not-resolved="false">#useDefaultPrettyPrinter</xref> instead.
  syntax:
    content: public JsonGenerator setPrettyPrinter(PrettyPrinter pp)
    parameters:
    - id: pp
      type: com.fasterxml.jackson.core.PrettyPrinter
    return:
      type: com.fasterxml.jackson.core.JsonGenerator
- uid: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.setRootValueSeparator(com.fasterxml.jackson.core.SerializableString)
  id: setRootValueSeparator(com.fasterxml.jackson.core.SerializableString)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.util.JsonGeneratorDelegate
  langs:
  - java
  name: setRootValueSeparator(SerializableString sep)
  nameWithType: JsonGeneratorDelegate.setRootValueSeparator(SerializableString sep)
  fullName: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.setRootValueSeparator(SerializableString sep)
  overload: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.setRootValueSeparator*
  type: Method
  package: com.fasterxml.jackson.core.util
  summary: >-
    Method that allows overriding String used for separating root-level JSON values (default is single space character)


    Default implementation throws <xref uid="java.lang.UnsupportedOperationException" data-throw-if-not-resolved="false">UnsupportedOperationException</xref>.
  syntax:
    content: public JsonGenerator setRootValueSeparator(SerializableString sep)
    parameters:
    - id: sep
      type: com.fasterxml.jackson.core.SerializableString
    return:
      type: com.fasterxml.jackson.core.JsonGenerator
- uid: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.setSchema(com.fasterxml.jackson.core.FormatSchema)
  id: setSchema(com.fasterxml.jackson.core.FormatSchema)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.util.JsonGeneratorDelegate
  langs:
  - java
  name: setSchema(FormatSchema schema)
  nameWithType: JsonGeneratorDelegate.setSchema(FormatSchema schema)
  fullName: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.setSchema(FormatSchema schema)
  overload: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.setSchema*
  type: Method
  package: com.fasterxml.jackson.core.util
  summary: >-
    Method to call to make this generator use specified schema. Method must be called before generating any content, right after instance has been created. Note that not all generators support schemas; and those that do usually only accept specific types of schemas: ones defined for data format this generator produces.


    If generator does not support specified schema, <xref uid="java.lang.UnsupportedOperationException" data-throw-if-not-resolved="false">UnsupportedOperationException</xref> is thrown.
  syntax:
    content: public void setSchema(FormatSchema schema)
    parameters:
    - id: schema
      type: com.fasterxml.jackson.core.FormatSchema
- uid: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.useDefaultPrettyPrinter()
  id: useDefaultPrettyPrinter()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.util.JsonGeneratorDelegate
  langs:
  - java
  name: useDefaultPrettyPrinter()
  nameWithType: JsonGeneratorDelegate.useDefaultPrettyPrinter()
  fullName: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.useDefaultPrettyPrinter()
  overload: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.useDefaultPrettyPrinter*
  type: Method
  package: com.fasterxml.jackson.core.util
  summary: Convenience method for enabling pretty-printing using the default pretty printer (<xref uid="com.fasterxml.jackson.core.util.DefaultPrettyPrinter" data-throw-if-not-resolved="false">com.fasterxml.jackson.core.util.DefaultPrettyPrinter</xref>).
  syntax:
    content: public JsonGenerator useDefaultPrettyPrinter()
    return:
      type: com.fasterxml.jackson.core.JsonGenerator
- uid: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.version()
  id: version()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.util.JsonGeneratorDelegate
  langs:
  - java
  name: version()
  nameWithType: JsonGeneratorDelegate.version()
  fullName: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.version()
  overload: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.version*
  type: Method
  package: com.fasterxml.jackson.core.util
  summary: Accessor for finding out version of the bundle that provided this generator instance.
  syntax:
    content: public Version version()
    return:
      type: com.fasterxml.jackson.core.Version
- uid: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeArray(double[],int,int)
  id: writeArray(double[],int,int)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.util.JsonGeneratorDelegate
  langs:
  - java
  name: writeArray(double[] array, int offset, int length)
  nameWithType: JsonGeneratorDelegate.writeArray(double[] array, int offset, int length)
  fullName: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeArray(double[] array, int offset, int length)
  overload: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeArray*
  type: Method
  package: com.fasterxml.jackson.core.util
  summary: Value write method that can be called to write a single array (sequence of <xref uid="com.fasterxml.jackson.core.JsonToken.START_ARRAY" data-throw-if-not-resolved="false">JsonToken#START_ARRAY</xref>, zero or more <xref uid="com.fasterxml.jackson.core.JsonToken.VALUE_NUMBER_FLOAT" data-throw-if-not-resolved="false">JsonToken#VALUE_NUMBER_FLOAT</xref>, <xref uid="com.fasterxml.jackson.core.JsonToken.END_ARRAY" data-throw-if-not-resolved="false">JsonToken#END_ARRAY</xref>)
  syntax:
    content: public void writeArray(double[] array, int offset, int length)
    parameters:
    - id: array
      type: double[]
    - id: offset
      type: int
    - id: length
      type: int
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeArray(int[],int,int)
  id: writeArray(int[],int,int)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.util.JsonGeneratorDelegate
  langs:
  - java
  name: writeArray(int[] array, int offset, int length)
  nameWithType: JsonGeneratorDelegate.writeArray(int[] array, int offset, int length)
  fullName: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeArray(int[] array, int offset, int length)
  overload: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeArray*
  type: Method
  package: com.fasterxml.jackson.core.util
  summary: Value write method that can be called to write a single array (sequence of <xref uid="com.fasterxml.jackson.core.JsonToken.START_ARRAY" data-throw-if-not-resolved="false">JsonToken#START_ARRAY</xref>, zero or more <xref uid="com.fasterxml.jackson.core.JsonToken.VALUE_NUMBER_INT" data-throw-if-not-resolved="false">JsonToken#VALUE_NUMBER_INT</xref>, <xref uid="com.fasterxml.jackson.core.JsonToken.END_ARRAY" data-throw-if-not-resolved="false">JsonToken#END_ARRAY</xref>)
  syntax:
    content: public void writeArray(int[] array, int offset, int length)
    parameters:
    - id: array
      type: int[]
    - id: offset
      type: int
    - id: length
      type: int
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeArray(java.lang.String[],int,int)
  id: writeArray(java.lang.String[],int,int)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.util.JsonGeneratorDelegate
  langs:
  - java
  name: writeArray(String[] array, int offset, int length)
  nameWithType: JsonGeneratorDelegate.writeArray(String[] array, int offset, int length)
  fullName: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeArray(String[] array, int offset, int length)
  overload: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeArray*
  type: Method
  package: com.fasterxml.jackson.core.util
  summary: Value write method that can be called to write a single array (sequence of <xref uid="com.fasterxml.jackson.core.JsonToken.START_ARRAY" data-throw-if-not-resolved="false">JsonToken#START_ARRAY</xref>, zero or more <xref uid="com.fasterxml.jackson.core.JsonToken.VALUE_STRING" data-throw-if-not-resolved="false">JsonToken#VALUE_STRING</xref>, <xref uid="com.fasterxml.jackson.core.JsonToken.END_ARRAY" data-throw-if-not-resolved="false">JsonToken#END_ARRAY</xref>)
  syntax:
    content: public void writeArray(String[] array, int offset, int length)
    parameters:
    - id: array
      type: java.lang.String[]
    - id: offset
      type: int
    - id: length
      type: int
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeArray(long[],int,int)
  id: writeArray(long[],int,int)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.util.JsonGeneratorDelegate
  langs:
  - java
  name: writeArray(long[] array, int offset, int length)
  nameWithType: JsonGeneratorDelegate.writeArray(long[] array, int offset, int length)
  fullName: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeArray(long[] array, int offset, int length)
  overload: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeArray*
  type: Method
  package: com.fasterxml.jackson.core.util
  summary: Value write method that can be called to write a single array (sequence of <xref uid="com.fasterxml.jackson.core.JsonToken.START_ARRAY" data-throw-if-not-resolved="false">JsonToken#START_ARRAY</xref>, zero or more <xref uid="com.fasterxml.jackson.core.JsonToken.VALUE_NUMBER_INT" data-throw-if-not-resolved="false">JsonToken#VALUE_NUMBER_INT</xref>, <xref uid="com.fasterxml.jackson.core.JsonToken.END_ARRAY" data-throw-if-not-resolved="false">JsonToken#END_ARRAY</xref>)
  syntax:
    content: public void writeArray(long[] array, int offset, int length)
    parameters:
    - id: array
      type: long[]
    - id: offset
      type: int
    - id: length
      type: int
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeBinary(com.fasterxml.jackson.core.Base64Variant,byte[],int,int)
  id: writeBinary(com.fasterxml.jackson.core.Base64Variant,byte[],int,int)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.util.JsonGeneratorDelegate
  langs:
  - java
  name: writeBinary(Base64Variant b64variant, byte[] data, int offset, int len)
  nameWithType: JsonGeneratorDelegate.writeBinary(Base64Variant b64variant, byte[] data, int offset, int len)
  fullName: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeBinary(Base64Variant b64variant, byte[] data, int offset, int len)
  overload: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeBinary*
  type: Method
  package: com.fasterxml.jackson.core.util
  summary: >-
    Method that will output given chunk of binary data as base64 encoded, as a complete String value (surrounded by double quotes). This method defaults


    Note: because JSON Strings can not contain unescaped linefeeds, if linefeeds are included (as per last argument), they must be escaped. This adds overhead for decoding without improving readability. Alternatively if linefeeds are not included, resulting String value may violate the requirement of base64 RFC which mandates line-length of 76 characters and use of linefeeds. However, all <xref uid="com.fasterxml.jackson.core.JsonParser" data-throw-if-not-resolved="false">JsonParser</xref> implementations are required to accept such "long line base64"; as do typical production-level base64 decoders.
  syntax:
    content: public void writeBinary(Base64Variant b64variant, byte[] data, int offset, int len)
    parameters:
    - id: b64variant
      type: com.fasterxml.jackson.core.Base64Variant
    - id: data
      type: byte[]
    - id: offset
      type: int
    - id: len
      type: int
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeBinary(com.fasterxml.jackson.core.Base64Variant,java.io.InputStream,int)
  id: writeBinary(com.fasterxml.jackson.core.Base64Variant,java.io.InputStream,int)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.util.JsonGeneratorDelegate
  langs:
  - java
  name: writeBinary(Base64Variant b64variant, InputStream data, int dataLength)
  nameWithType: JsonGeneratorDelegate.writeBinary(Base64Variant b64variant, InputStream data, int dataLength)
  fullName: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeBinary(Base64Variant b64variant, InputStream data, int dataLength)
  overload: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeBinary*
  type: Method
  package: com.fasterxml.jackson.core.util
  summary: Method similar to <xref uid="com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeBinary(com.fasterxml.jackson.core.Base64Variant,byte[],int,int)" data-throw-if-not-resolved="false">#writeBinary(Base64Variant,byte[],int,int)</xref>, but where input is provided through a stream, allowing for incremental writes without holding the whole input in memory.
  syntax:
    content: public int writeBinary(Base64Variant b64variant, InputStream data, int dataLength)
    parameters:
    - id: b64variant
      type: com.fasterxml.jackson.core.Base64Variant
    - id: data
      type: java.io.InputStream
    - id: dataLength
      type: int
    return:
      type: int
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeBoolean(boolean)
  id: writeBoolean(boolean)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.util.JsonGeneratorDelegate
  langs:
  - java
  name: writeBoolean(boolean state)
  nameWithType: JsonGeneratorDelegate.writeBoolean(boolean state)
  fullName: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeBoolean(boolean state)
  overload: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeBoolean*
  type: Method
  package: com.fasterxml.jackson.core.util
  summary: Method for outputting literal JSON boolean value (one of Strings 'true' and 'false'). Can be called in any context where a value is expected (Array value, Object field value, root-level value). Additional white space may be added around the value if pretty-printing is enabled.
  syntax:
    content: public void writeBoolean(boolean state)
    parameters:
    - id: state
      type: boolean
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeEmbeddedObject(java.lang.Object)
  id: writeEmbeddedObject(java.lang.Object)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.util.JsonGeneratorDelegate
  langs:
  - java
  name: writeEmbeddedObject(Object object)
  nameWithType: JsonGeneratorDelegate.writeEmbeddedObject(Object object)
  fullName: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeEmbeddedObject(Object object)
  overload: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeEmbeddedObject*
  type: Method
  package: com.fasterxml.jackson.core.util
  summary: Method that can be called on backends that support passing opaque datatypes of non-JSON formats
  syntax:
    content: public void writeEmbeddedObject(Object object)
    parameters:
    - id: object
      type: java.lang.Object
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeEndArray()
  id: writeEndArray()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.util.JsonGeneratorDelegate
  langs:
  - java
  name: writeEndArray()
  nameWithType: JsonGeneratorDelegate.writeEndArray()
  fullName: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeEndArray()
  overload: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeEndArray*
  type: Method
  package: com.fasterxml.jackson.core.util
  summary: >-
    Method for writing closing marker of a JSON Array value (character '\]'; plus possible white space decoration if pretty-printing is enabled).


    Marker can be written if the innermost structured type is Array.
  syntax:
    content: public void writeEndArray()
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeEndObject()
  id: writeEndObject()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.util.JsonGeneratorDelegate
  langs:
  - java
  name: writeEndObject()
  nameWithType: JsonGeneratorDelegate.writeEndObject()
  fullName: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeEndObject()
  overload: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeEndObject*
  type: Method
  package: com.fasterxml.jackson.core.util
  summary: >-
    Method for writing closing marker of an Object value (character '\}'; plus possible white space decoration if pretty-printing is enabled).


    Marker can be written if the innermost structured type is Object, and the last written event was either a complete value, or START-OBJECT marker (see JSON specification for more details).
  syntax:
    content: public void writeEndObject()
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeFieldId(long)
  id: writeFieldId(long)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.util.JsonGeneratorDelegate
  langs:
  - java
  name: writeFieldId(long id)
  nameWithType: JsonGeneratorDelegate.writeFieldId(long id)
  fullName: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeFieldId(long id)
  overload: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeFieldId*
  type: Method
  package: com.fasterxml.jackson.core.util
  summary: Alternative to <xref uid="com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeFieldName(java.lang.String)" data-throw-if-not-resolved="false">#writeFieldName(String)</xref> that may be used in cases where property key is of numeric type; either where underlying format supports such notion (some binary formats do, unlike JSON), or for convenient conversion into String presentation. Default implementation will simply convert id into `String` and call <xref uid="com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeFieldName(java.lang.String)" data-throw-if-not-resolved="false">#writeFieldName(String)</xref>.
  syntax:
    content: public void writeFieldId(long id)
    parameters:
    - id: id
      type: long
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeFieldName(com.fasterxml.jackson.core.SerializableString)
  id: writeFieldName(com.fasterxml.jackson.core.SerializableString)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.util.JsonGeneratorDelegate
  langs:
  - java
  name: writeFieldName(SerializableString name)
  nameWithType: JsonGeneratorDelegate.writeFieldName(SerializableString name)
  fullName: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeFieldName(SerializableString name)
  overload: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeFieldName*
  type: Method
  package: com.fasterxml.jackson.core.util
  summary: >-
    Method similar to <xref uid="com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeFieldName(java.lang.String)" data-throw-if-not-resolved="false">#writeFieldName(String)</xref>, main difference being that it may perform better as some of processing (such as quoting of certain characters, or encoding into external encoding if supported by generator) can be done just once and reused for later calls.


    Default implementation simple uses unprocessed name container in serialized String; implementations are strongly encouraged to make use of more efficient methods argument object has.
  syntax:
    content: public void writeFieldName(SerializableString name)
    parameters:
    - id: name
      type: com.fasterxml.jackson.core.SerializableString
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeFieldName(java.lang.String)
  id: writeFieldName(java.lang.String)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.util.JsonGeneratorDelegate
  langs:
  - java
  name: writeFieldName(String name)
  nameWithType: JsonGeneratorDelegate.writeFieldName(String name)
  fullName: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeFieldName(String name)
  overload: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeFieldName*
  type: Method
  package: com.fasterxml.jackson.core.util
  summary: >-
    Method for writing a field name (JSON String surrounded by double quotes: syntactically identical to a JSON String value), possibly decorated by white space if pretty-printing is enabled.


    Field names can only be written in Object context (check out JSON specification for details), when field name is expected (field names alternate with values).
  syntax:
    content: public void writeFieldName(String name)
    parameters:
    - id: name
      type: java.lang.String
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeNull()
  id: writeNull()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.util.JsonGeneratorDelegate
  langs:
  - java
  name: writeNull()
  nameWithType: JsonGeneratorDelegate.writeNull()
  fullName: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeNull()
  overload: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeNull*
  type: Method
  package: com.fasterxml.jackson.core.util
  summary: Method for outputting literal JSON null value. Can be called in any context where a value is expected (Array value, Object field value, root-level value). Additional white space may be added around the value if pretty-printing is enabled.
  syntax:
    content: public void writeNull()
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeNumber(char[],int,int)
  id: writeNumber(char[],int,int)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.util.JsonGeneratorDelegate
  langs:
  - java
  name: writeNumber(char[] encodedValueBuffer, int offset, int length)
  nameWithType: JsonGeneratorDelegate.writeNumber(char[] encodedValueBuffer, int offset, int length)
  fullName: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeNumber(char[] encodedValueBuffer, int offset, int length)
  overload: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeNumber*
  type: Method
  package: com.fasterxml.jackson.core.util
  summary: Overloaded version of <xref uid="com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeNumber(java.lang.String)" data-throw-if-not-resolved="false">#writeNumber(String)</xref> with same semantics but possibly more efficient operation.
  syntax:
    content: public void writeNumber(char[] encodedValueBuffer, int offset, int length)
    parameters:
    - id: encodedValueBuffer
      type: char[]
    - id: offset
      type: int
    - id: length
      type: int
  exceptions:
  - type: java.io.IOException
  - type: java.lang.UnsupportedOperationException
- uid: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeNumber(double)
  id: writeNumber(double)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.util.JsonGeneratorDelegate
  langs:
  - java
  name: writeNumber(double v)
  nameWithType: JsonGeneratorDelegate.writeNumber(double v)
  fullName: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeNumber(double v)
  overload: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeNumber*
  type: Method
  package: com.fasterxml.jackson.core.util
  summary: Method for outputting indicate JSON numeric value. Can be called in any context where a value is expected (Array value, Object field value, root-level value). Additional white space may be added around the value if pretty-printing is enabled.
  syntax:
    content: public void writeNumber(double v)
    parameters:
    - id: v
      type: double
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeNumber(float)
  id: writeNumber(float)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.util.JsonGeneratorDelegate
  langs:
  - java
  name: writeNumber(float v)
  nameWithType: JsonGeneratorDelegate.writeNumber(float v)
  fullName: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeNumber(float v)
  overload: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeNumber*
  type: Method
  package: com.fasterxml.jackson.core.util
  summary: Method for outputting indicate JSON numeric value. Can be called in any context where a value is expected (Array value, Object field value, root-level value). Additional white space may be added around the value if pretty-printing is enabled.
  syntax:
    content: public void writeNumber(float v)
    parameters:
    - id: v
      type: float
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeNumber(int)
  id: writeNumber(int)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.util.JsonGeneratorDelegate
  langs:
  - java
  name: writeNumber(int v)
  nameWithType: JsonGeneratorDelegate.writeNumber(int v)
  fullName: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeNumber(int v)
  overload: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeNumber*
  type: Method
  package: com.fasterxml.jackson.core.util
  summary: Method for outputting given value as JSON number. Can be called in any context where a value is expected (Array value, Object field value, root-level value). Additional white space may be added around the value if pretty-printing is enabled.
  syntax:
    content: public void writeNumber(int v)
    parameters:
    - id: v
      type: int
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeNumber(java.lang.String)
  id: writeNumber(java.lang.String)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.util.JsonGeneratorDelegate
  langs:
  - java
  name: writeNumber(String encodedValue)
  nameWithType: JsonGeneratorDelegate.writeNumber(String encodedValue)
  fullName: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeNumber(String encodedValue)
  overload: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeNumber*
  type: Method
  package: com.fasterxml.jackson.core.util
  summary: >-
    Write method that can be used for custom numeric types that can not be (easily?) converted to "standard" Java number types. Because numbers are not surrounded by double quotes, regular <xref uid="com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeString*" data-throw-if-not-resolved="false">#writeString</xref> method can not be used; nor <xref uid="com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeRaw*" data-throw-if-not-resolved="false">#writeRaw</xref> because that does not properly handle value separators needed in Array or Object contexts.


    Note: because of lack of type safety, some generator implementations may not be able to implement this method. For example, if a binary JSON format is used, it may require type information for encoding; similarly for generator-wrappers around Java objects or JSON nodes. If implementation does not implement this method, it needs to throw <xref uid="java.lang.UnsupportedOperationException" data-throw-if-not-resolved="false">UnsupportedOperationException</xref>.
  syntax:
    content: public void writeNumber(String encodedValue)
    parameters:
    - id: encodedValue
      type: java.lang.String
  exceptions:
  - type: java.io.IOException
  - type: java.lang.UnsupportedOperationException
- uid: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeNumber(java.math.BigDecimal)
  id: writeNumber(java.math.BigDecimal)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.util.JsonGeneratorDelegate
  langs:
  - java
  name: writeNumber(BigDecimal v)
  nameWithType: JsonGeneratorDelegate.writeNumber(BigDecimal v)
  fullName: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeNumber(BigDecimal v)
  overload: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeNumber*
  type: Method
  package: com.fasterxml.jackson.core.util
  summary: Method for outputting indicate JSON numeric value. Can be called in any context where a value is expected (Array value, Object field value, root-level value). Additional white space may be added around the value if pretty-printing is enabled.
  syntax:
    content: public void writeNumber(BigDecimal v)
    parameters:
    - id: v
      type: java.math.BigDecimal
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeNumber(java.math.BigInteger)
  id: writeNumber(java.math.BigInteger)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.util.JsonGeneratorDelegate
  langs:
  - java
  name: writeNumber(BigInteger v)
  nameWithType: JsonGeneratorDelegate.writeNumber(BigInteger v)
  fullName: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeNumber(BigInteger v)
  overload: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeNumber*
  type: Method
  package: com.fasterxml.jackson.core.util
  summary: Method for outputting given value as JSON number. Can be called in any context where a value is expected (Array value, Object field value, root-level value). Additional white space may be added around the value if pretty-printing is enabled.
  syntax:
    content: public void writeNumber(BigInteger v)
    parameters:
    - id: v
      type: java.math.BigInteger
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeNumber(long)
  id: writeNumber(long)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.util.JsonGeneratorDelegate
  langs:
  - java
  name: writeNumber(long v)
  nameWithType: JsonGeneratorDelegate.writeNumber(long v)
  fullName: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeNumber(long v)
  overload: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeNumber*
  type: Method
  package: com.fasterxml.jackson.core.util
  summary: Method for outputting given value as JSON number. Can be called in any context where a value is expected (Array value, Object field value, root-level value). Additional white space may be added around the value if pretty-printing is enabled.
  syntax:
    content: public void writeNumber(long v)
    parameters:
    - id: v
      type: long
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeNumber(short)
  id: writeNumber(short)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.util.JsonGeneratorDelegate
  langs:
  - java
  name: writeNumber(short v)
  nameWithType: JsonGeneratorDelegate.writeNumber(short v)
  fullName: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeNumber(short v)
  overload: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeNumber*
  type: Method
  package: com.fasterxml.jackson.core.util
  summary: Method for outputting given value as JSON number. Can be called in any context where a value is expected (Array value, Object field value, root-level value). Additional white space may be added around the value if pretty-printing is enabled.
  syntax:
    content: public void writeNumber(short v)
    parameters:
    - id: v
      type: short
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeObject(java.lang.Object)
  id: writeObject(java.lang.Object)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.util.JsonGeneratorDelegate
  langs:
  - java
  name: writeObject(Object pojo)
  nameWithType: JsonGeneratorDelegate.writeObject(Object pojo)
  fullName: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeObject(Object pojo)
  overload: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeObject*
  type: Method
  package: com.fasterxml.jackson.core.util
  summary: 'Method for writing given Java object (POJO) as Json. Exactly how the object gets written depends on object in question (ad on codec, its configuration); for most beans it will result in JSON Object, but for others JSON Array, or String or numeric value (and for nulls, JSON null literal. **NOTE**: generator must have its **object codec** set to non-null value; for generators created by a mapping factory this is the case, for others not.'
  syntax:
    content: public void writeObject(Object pojo)
    parameters:
    - id: pojo
      type: java.lang.Object
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeObjectId(java.lang.Object)
  id: writeObjectId(java.lang.Object)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.util.JsonGeneratorDelegate
  langs:
  - java
  name: writeObjectId(Object id)
  nameWithType: JsonGeneratorDelegate.writeObjectId(Object id)
  fullName: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeObjectId(Object id)
  overload: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeObjectId*
  type: Method
  package: com.fasterxml.jackson.core.util
  summary: Method that can be called to output so-called native Object Id. Note that it may only be called after ensuring this is legal (with <xref uid="com.fasterxml.jackson.core.util.JsonGeneratorDelegate.canWriteObjectId()" data-throw-if-not-resolved="false">#canWriteObjectId()</xref>), as not all data formats have native type id support; and some may only allow them in certain positions or locations. If output is not allowed by the data format in this position, a <xref uid="com.fasterxml.jackson.core.JsonGenerationException" data-throw-if-not-resolved="false">JsonGenerationException</xref> will be thrown.
  syntax:
    content: public void writeObjectId(Object id)
    parameters:
    - id: id
      type: java.lang.Object
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeObjectRef(java.lang.Object)
  id: writeObjectRef(java.lang.Object)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.util.JsonGeneratorDelegate
  langs:
  - java
  name: writeObjectRef(Object id)
  nameWithType: JsonGeneratorDelegate.writeObjectRef(Object id)
  fullName: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeObjectRef(Object id)
  overload: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeObjectRef*
  type: Method
  package: com.fasterxml.jackson.core.util
  summary: Method that can be called to output references to native Object Ids. Note that it may only be called after ensuring this is legal (with <xref uid="com.fasterxml.jackson.core.util.JsonGeneratorDelegate.canWriteObjectId()" data-throw-if-not-resolved="false">#canWriteObjectId()</xref>), as not all data formats have native type id support; and some may only allow them in certain positions or locations. If output is not allowed by the data format in this position, a <xref uid="com.fasterxml.jackson.core.JsonGenerationException" data-throw-if-not-resolved="false">JsonGenerationException</xref> will be thrown.
  syntax:
    content: public void writeObjectRef(Object id)
    parameters:
    - id: id
      type: java.lang.Object
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeOmittedField(java.lang.String)
  id: writeOmittedField(java.lang.String)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.util.JsonGeneratorDelegate
  langs:
  - java
  name: writeOmittedField(String fieldName)
  nameWithType: JsonGeneratorDelegate.writeOmittedField(String fieldName)
  fullName: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeOmittedField(String fieldName)
  overload: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeOmittedField*
  type: Method
  package: com.fasterxml.jackson.core.util
  summary: >-
    Method called to indicate that a property in this position was skipped. It is usually only called for generators that return `false` from <xref uid="com.fasterxml.jackson.core.util.JsonGeneratorDelegate.canOmitFields()" data-throw-if-not-resolved="false">#canOmitFields()</xref>.


    Default implementation does nothing.
  syntax:
    content: public void writeOmittedField(String fieldName)
    parameters:
    - id: fieldName
      type: java.lang.String
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeRaw(char)
  id: writeRaw(char)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.util.JsonGeneratorDelegate
  langs:
  - java
  name: writeRaw(char c)
  nameWithType: JsonGeneratorDelegate.writeRaw(char c)
  fullName: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeRaw(char c)
  overload: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeRaw*
  type: Method
  package: com.fasterxml.jackson.core.util
  summary: >-
    Method that will force generator to copy input text verbatim with **no** modifications (including that no escaping is done and no separators are added even if context \[array, object\] would otherwise require such). If such separators are desired, use <xref uid="com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeRawValue(java.lang.String)" data-throw-if-not-resolved="false">#writeRawValue(String)</xref> instead.


    Note that not all generator implementations necessarily support such by-pass methods: those that do not will throw <xref uid="java.lang.UnsupportedOperationException" data-throw-if-not-resolved="false">UnsupportedOperationException</xref>.
  syntax:
    content: public void writeRaw(char c)
    parameters:
    - id: c
      type: char
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeRaw(char[],int,int)
  id: writeRaw(char[],int,int)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.util.JsonGeneratorDelegate
  langs:
  - java
  name: writeRaw(char[] text, int offset, int len)
  nameWithType: JsonGeneratorDelegate.writeRaw(char[] text, int offset, int len)
  fullName: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeRaw(char[] text, int offset, int len)
  overload: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeRaw*
  type: Method
  package: com.fasterxml.jackson.core.util
  summary: >-
    Method that will force generator to copy input text verbatim with **no** modifications (including that no escaping is done and no separators are added even if context \[array, object\] would otherwise require such). If such separators are desired, use <xref uid="com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeRawValue(java.lang.String)" data-throw-if-not-resolved="false">#writeRawValue(String)</xref> instead.


    Note that not all generator implementations necessarily support such by-pass methods: those that do not will throw <xref uid="java.lang.UnsupportedOperationException" data-throw-if-not-resolved="false">UnsupportedOperationException</xref>.
  syntax:
    content: public void writeRaw(char[] text, int offset, int len)
    parameters:
    - id: text
      type: char[]
    - id: offset
      type: int
    - id: len
      type: int
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeRaw(com.fasterxml.jackson.core.SerializableString)
  id: writeRaw(com.fasterxml.jackson.core.SerializableString)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.util.JsonGeneratorDelegate
  langs:
  - java
  name: writeRaw(SerializableString raw)
  nameWithType: JsonGeneratorDelegate.writeRaw(SerializableString raw)
  fullName: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeRaw(SerializableString raw)
  overload: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeRaw*
  type: Method
  package: com.fasterxml.jackson.core.util
  summary: >-
    Method that will force generator to copy input text verbatim with **no** modifications (including that no escaping is done and no separators are added even if context \[array, object\] would otherwise require such). If such separators are desired, use <xref uid="com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeRawValue(java.lang.String)" data-throw-if-not-resolved="false">#writeRawValue(String)</xref> instead.


    Note that not all generator implementations necessarily support such by-pass methods: those that do not will throw <xref uid="java.lang.UnsupportedOperationException" data-throw-if-not-resolved="false">UnsupportedOperationException</xref>.


    The default implementation delegates to <xref uid="com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeRaw(java.lang.String)" data-throw-if-not-resolved="false">#writeRaw(String)</xref>; other backends that support raw inclusion of text are encouraged to implement it in more efficient manner (especially if they use UTF-8 encoding).
  syntax:
    content: public void writeRaw(SerializableString raw)
    parameters:
    - id: raw
      type: com.fasterxml.jackson.core.SerializableString
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeRaw(java.lang.String)
  id: writeRaw(java.lang.String)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.util.JsonGeneratorDelegate
  langs:
  - java
  name: writeRaw(String text)
  nameWithType: JsonGeneratorDelegate.writeRaw(String text)
  fullName: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeRaw(String text)
  overload: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeRaw*
  type: Method
  package: com.fasterxml.jackson.core.util
  summary: >-
    Method that will force generator to copy input text verbatim with **no** modifications (including that no escaping is done and no separators are added even if context \[array, object\] would otherwise require such). If such separators are desired, use <xref uid="com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeRawValue(java.lang.String)" data-throw-if-not-resolved="false">#writeRawValue(String)</xref> instead.


    Note that not all generator implementations necessarily support such by-pass methods: those that do not will throw <xref uid="java.lang.UnsupportedOperationException" data-throw-if-not-resolved="false">UnsupportedOperationException</xref>.
  syntax:
    content: public void writeRaw(String text)
    parameters:
    - id: text
      type: java.lang.String
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeRaw(java.lang.String,int,int)
  id: writeRaw(java.lang.String,int,int)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.util.JsonGeneratorDelegate
  langs:
  - java
  name: writeRaw(String text, int offset, int len)
  nameWithType: JsonGeneratorDelegate.writeRaw(String text, int offset, int len)
  fullName: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeRaw(String text, int offset, int len)
  overload: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeRaw*
  type: Method
  package: com.fasterxml.jackson.core.util
  summary: >-
    Method that will force generator to copy input text verbatim with **no** modifications (including that no escaping is done and no separators are added even if context \[array, object\] would otherwise require such). If such separators are desired, use <xref uid="com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeRawValue(java.lang.String)" data-throw-if-not-resolved="false">#writeRawValue(String)</xref> instead.


    Note that not all generator implementations necessarily support such by-pass methods: those that do not will throw <xref uid="java.lang.UnsupportedOperationException" data-throw-if-not-resolved="false">UnsupportedOperationException</xref>.
  syntax:
    content: public void writeRaw(String text, int offset, int len)
    parameters:
    - id: text
      type: java.lang.String
    - id: offset
      type: int
    - id: len
      type: int
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeRawUTF8String(byte[],int,int)
  id: writeRawUTF8String(byte[],int,int)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.util.JsonGeneratorDelegate
  langs:
  - java
  name: writeRawUTF8String(byte[] text, int offset, int length)
  nameWithType: JsonGeneratorDelegate.writeRawUTF8String(byte[] text, int offset, int length)
  fullName: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeRawUTF8String(byte[] text, int offset, int length)
  overload: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeRawUTF8String*
  type: Method
  package: com.fasterxml.jackson.core.util
  summary: >-
    Method similar to <xref uid="com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeString(java.lang.String)" data-throw-if-not-resolved="false">#writeString(String)</xref> but that takes as its input a UTF-8 encoded String that is to be output as-is, without additional escaping (type of which depends on data format; backslashes for JSON). However, quoting that data format requires (like double-quotes for JSON) will be added around the value if and as necessary.


    Note that some backends may choose not to support this method: for example, if underlying destination is a <xref uid="java.io.Writer" data-throw-if-not-resolved="false">java.io.Writer</xref> using this method would require UTF-8 decoding. If so, implementation may instead choose to throw a <xref uid="java.lang.UnsupportedOperationException" data-throw-if-not-resolved="false">UnsupportedOperationException</xref> due to ineffectiveness of having to decode input.
  syntax:
    content: public void writeRawUTF8String(byte[] text, int offset, int length)
    parameters:
    - id: text
      type: byte[]
    - id: offset
      type: int
    - id: length
      type: int
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeRawValue(char[],int,int)
  id: writeRawValue(char[],int,int)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.util.JsonGeneratorDelegate
  langs:
  - java
  name: writeRawValue(char[] text, int offset, int len)
  nameWithType: JsonGeneratorDelegate.writeRawValue(char[] text, int offset, int len)
  fullName: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeRawValue(char[] text, int offset, int len)
  overload: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeRawValue*
  type: Method
  package: com.fasterxml.jackson.core.util
  syntax:
    content: public void writeRawValue(char[] text, int offset, int len)
    parameters:
    - id: text
      type: char[]
    - id: offset
      type: int
    - id: len
      type: int
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeRawValue(java.lang.String)
  id: writeRawValue(java.lang.String)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.util.JsonGeneratorDelegate
  langs:
  - java
  name: writeRawValue(String text)
  nameWithType: JsonGeneratorDelegate.writeRawValue(String text)
  fullName: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeRawValue(String text)
  overload: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeRawValue*
  type: Method
  package: com.fasterxml.jackson.core.util
  summary: Method that will force generator to copy input text verbatim without any modifications, but assuming it must constitute a single legal JSON value (number, string, boolean, null, Array or List). Assuming this, proper separators are added if and as needed (comma or colon), and generator state updated to reflect this.
  syntax:
    content: public void writeRawValue(String text)
    parameters:
    - id: text
      type: java.lang.String
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeRawValue(java.lang.String,int,int)
  id: writeRawValue(java.lang.String,int,int)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.util.JsonGeneratorDelegate
  langs:
  - java
  name: writeRawValue(String text, int offset, int len)
  nameWithType: JsonGeneratorDelegate.writeRawValue(String text, int offset, int len)
  fullName: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeRawValue(String text, int offset, int len)
  overload: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeRawValue*
  type: Method
  package: com.fasterxml.jackson.core.util
  syntax:
    content: public void writeRawValue(String text, int offset, int len)
    parameters:
    - id: text
      type: java.lang.String
    - id: offset
      type: int
    - id: len
      type: int
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeStartArray()
  id: writeStartArray()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.util.JsonGeneratorDelegate
  langs:
  - java
  name: writeStartArray()
  nameWithType: JsonGeneratorDelegate.writeStartArray()
  fullName: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeStartArray()
  overload: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeStartArray*
  type: Method
  package: com.fasterxml.jackson.core.util
  summary: >-
    Method for writing starting marker of a Array value (for JSON this is character '\['; plus possible white space decoration if pretty-printing is enabled).


    Array values can be written in any context where values are allowed: meaning everywhere except for when a field name is expected.
  syntax:
    content: public void writeStartArray()
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeStartArray(int)
  id: writeStartArray(int)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.util.JsonGeneratorDelegate
  langs:
  - java
  name: writeStartArray(int size)
  nameWithType: JsonGeneratorDelegate.writeStartArray(int size)
  fullName: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeStartArray(int size)
  overload: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeStartArray*
  type: Method
  package: com.fasterxml.jackson.core.util
  summary: >-
    Method for writing start marker of an Array value, similar to <xref uid="com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeStartArray()" data-throw-if-not-resolved="false">#writeStartArray()</xref>, but also specifying how many elements will be written for the array before calling <xref uid="com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeEndArray()" data-throw-if-not-resolved="false">#writeEndArray()</xref>.


    Default implementation simply calls <xref uid="com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeStartArray()" data-throw-if-not-resolved="false">#writeStartArray()</xref>.
  syntax:
    content: public void writeStartArray(int size)
    parameters:
    - id: size
      type: int
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeStartArray(java.lang.Object)
  id: writeStartArray(java.lang.Object)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.util.JsonGeneratorDelegate
  langs:
  - java
  name: writeStartArray(Object forValue)
  nameWithType: JsonGeneratorDelegate.writeStartArray(Object forValue)
  fullName: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeStartArray(Object forValue)
  overload: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeStartArray*
  type: Method
  package: com.fasterxml.jackson.core.util
  syntax:
    content: public void writeStartArray(Object forValue)
    parameters:
    - id: forValue
      type: java.lang.Object
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeStartArray(java.lang.Object,int)
  id: writeStartArray(java.lang.Object,int)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.util.JsonGeneratorDelegate
  langs:
  - java
  name: writeStartArray(Object forValue, int size)
  nameWithType: JsonGeneratorDelegate.writeStartArray(Object forValue, int size)
  fullName: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeStartArray(Object forValue, int size)
  overload: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeStartArray*
  type: Method
  package: com.fasterxml.jackson.core.util
  syntax:
    content: public void writeStartArray(Object forValue, int size)
    parameters:
    - id: forValue
      type: java.lang.Object
    - id: size
      type: int
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeStartObject()
  id: writeStartObject()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.util.JsonGeneratorDelegate
  langs:
  - java
  name: writeStartObject()
  nameWithType: JsonGeneratorDelegate.writeStartObject()
  fullName: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeStartObject()
  overload: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeStartObject*
  type: Method
  package: com.fasterxml.jackson.core.util
  summary: >-
    Method for writing starting marker of an Object value (character '\{'; plus possible white space decoration if pretty-printing is enabled).


    Object values can be written in any context where values are allowed: meaning everywhere except for when a field name is expected.
  syntax:
    content: public void writeStartObject()
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeStartObject(java.lang.Object)
  id: writeStartObject(java.lang.Object)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.util.JsonGeneratorDelegate
  langs:
  - java
  name: writeStartObject(Object forValue)
  nameWithType: JsonGeneratorDelegate.writeStartObject(Object forValue)
  fullName: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeStartObject(Object forValue)
  overload: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeStartObject*
  type: Method
  package: com.fasterxml.jackson.core.util
  summary: >-
    Method for writing starting marker of an Object value to represent the given Java Object value. Argument is offered as metadata, but more importantly it should be assigned as the "current value" for the Object content that gets constructed and initialized.


    Object values can be written in any context where values are allowed: meaning everywhere except for when a field name is expected.
  syntax:
    content: public void writeStartObject(Object forValue)
    parameters:
    - id: forValue
      type: java.lang.Object
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeStartObject(java.lang.Object,int)
  id: writeStartObject(java.lang.Object,int)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.util.JsonGeneratorDelegate
  langs:
  - java
  name: writeStartObject(Object forValue, int size)
  nameWithType: JsonGeneratorDelegate.writeStartObject(Object forValue, int size)
  fullName: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeStartObject(Object forValue, int size)
  overload: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeStartObject*
  type: Method
  package: com.fasterxml.jackson.core.util
  summary: >-
    Method for writing starting marker of an Object value to represent the given Java Object value. Argument is offered as metadata, but more importantly it should be assigned as the "current value" for the Object content that gets constructed and initialized. In addition, caller knows number of key/value pairs ("properties") that will get written for the Object value: this is relevant for some format backends (but not, as an example, for JSON).


    Object values can be written in any context where values are allowed: meaning everywhere except for when a field name is expected.
  syntax:
    content: public void writeStartObject(Object forValue, int size)
    parameters:
    - id: forValue
      type: java.lang.Object
    - id: size
      type: int
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeString(char[],int,int)
  id: writeString(char[],int,int)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.util.JsonGeneratorDelegate
  langs:
  - java
  name: writeString(char[] text, int offset, int len)
  nameWithType: JsonGeneratorDelegate.writeString(char[] text, int offset, int len)
  fullName: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeString(char[] text, int offset, int len)
  overload: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeString*
  type: Method
  package: com.fasterxml.jackson.core.util
  summary: Method for outputting a String value. Depending on context this means either array element, (object) field value or a stand alone String; but in all cases, String will be surrounded in double quotes, and contents will be properly escaped as required by JSON specification.
  syntax:
    content: public void writeString(char[] text, int offset, int len)
    parameters:
    - id: text
      type: char[]
    - id: offset
      type: int
    - id: len
      type: int
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeString(com.fasterxml.jackson.core.SerializableString)
  id: writeString(com.fasterxml.jackson.core.SerializableString)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.util.JsonGeneratorDelegate
  langs:
  - java
  name: writeString(SerializableString text)
  nameWithType: JsonGeneratorDelegate.writeString(SerializableString text)
  fullName: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeString(SerializableString text)
  overload: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeString*
  type: Method
  package: com.fasterxml.jackson.core.util
  summary: >-
    Method similar to <xref uid="com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeString(java.lang.String)" data-throw-if-not-resolved="false">#writeString(String)</xref>, but that takes <xref uid="com.fasterxml.jackson.core.SerializableString" data-throw-if-not-resolved="false">SerializableString</xref> which can make this potentially more efficient to call as generator may be able to reuse quoted and/or encoded representation.


    Default implementation just calls <xref uid="com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeString(java.lang.String)" data-throw-if-not-resolved="false">#writeString(String)</xref>; sub-classes should override it with more efficient implementation if possible.
  syntax:
    content: public void writeString(SerializableString text)
    parameters:
    - id: text
      type: com.fasterxml.jackson.core.SerializableString
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeString(java.io.Reader,int)
  id: writeString(java.io.Reader,int)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.util.JsonGeneratorDelegate
  langs:
  - java
  name: writeString(Reader reader, int len)
  nameWithType: JsonGeneratorDelegate.writeString(Reader reader, int len)
  fullName: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeString(Reader reader, int len)
  overload: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeString*
  type: Method
  package: com.fasterxml.jackson.core.util
  summary: Method for outputting a String value. Depending on context this means either array element, (object) field value or a stand alone String; but in all cases, String will be surrounded in double quotes, and contents will be properly escaped as required by JSON specification. If the reader is null, then write a null. If len is < 0, then write all contents of the reader. Otherwise, write only len characters.
  syntax:
    content: public void writeString(Reader reader, int len)
    parameters:
    - id: reader
      type: java.io.Reader
    - id: len
      type: int
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeString(java.lang.String)
  id: writeString(java.lang.String)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.util.JsonGeneratorDelegate
  langs:
  - java
  name: writeString(String text)
  nameWithType: JsonGeneratorDelegate.writeString(String text)
  fullName: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeString(String text)
  overload: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeString*
  type: Method
  package: com.fasterxml.jackson.core.util
  summary: Method for outputting a String value. Depending on context this means either array element, (object) field value or a stand alone String; but in all cases, String will be surrounded in double quotes, and contents will be properly escaped as required by JSON specification.
  syntax:
    content: public void writeString(String text)
    parameters:
    - id: text
      type: java.lang.String
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeTree(com.fasterxml.jackson.core.TreeNode)
  id: writeTree(com.fasterxml.jackson.core.TreeNode)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.util.JsonGeneratorDelegate
  langs:
  - java
  name: writeTree(TreeNode tree)
  nameWithType: JsonGeneratorDelegate.writeTree(TreeNode tree)
  fullName: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeTree(TreeNode tree)
  overload: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeTree*
  type: Method
  package: com.fasterxml.jackson.core.util
  summary: Method for writing given JSON tree (expressed as a tree where given JsonNode is the root) using this generator. This will generally just call <xref uid="com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeObject*" data-throw-if-not-resolved="false">#writeObject</xref> with given node, but is added for convenience and to make code more explicit in cases where it deals specifically with trees.
  syntax:
    content: public void writeTree(TreeNode tree)
    parameters:
    - id: tree
      type: com.fasterxml.jackson.core.TreeNode
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeTypeId(java.lang.Object)
  id: writeTypeId(java.lang.Object)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.util.JsonGeneratorDelegate
  langs:
  - java
  name: writeTypeId(Object id)
  nameWithType: JsonGeneratorDelegate.writeTypeId(Object id)
  fullName: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeTypeId(Object id)
  overload: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeTypeId*
  type: Method
  package: com.fasterxml.jackson.core.util
  summary: Method that can be called to output so-called native Type Id. Note that it may only be called after ensuring this is legal (with <xref uid="com.fasterxml.jackson.core.util.JsonGeneratorDelegate.canWriteTypeId()" data-throw-if-not-resolved="false">#canWriteTypeId()</xref>), as not all data formats have native type id support; and some may only allow them in certain positions or locations. If output is not allowed by the data format in this position, a <xref uid="com.fasterxml.jackson.core.JsonGenerationException" data-throw-if-not-resolved="false">JsonGenerationException</xref> will be thrown.
  syntax:
    content: public void writeTypeId(Object id)
    parameters:
    - id: id
      type: java.lang.Object
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeUTF8String(byte[],int,int)
  id: writeUTF8String(byte[],int,int)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.util.JsonGeneratorDelegate
  langs:
  - java
  name: writeUTF8String(byte[] text, int offset, int length)
  nameWithType: JsonGeneratorDelegate.writeUTF8String(byte[] text, int offset, int length)
  fullName: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeUTF8String(byte[] text, int offset, int length)
  overload: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeUTF8String*
  type: Method
  package: com.fasterxml.jackson.core.util
  summary: >-
    Method similar to <xref uid="com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeString(java.lang.String)" data-throw-if-not-resolved="false">#writeString(String)</xref> but that takes as its input a UTF-8 encoded String which has **not** been escaped using whatever escaping scheme data format requires (for JSON that is backslash-escaping for control characters and double-quotes; for other formats something else). This means that textual JSON backends need to check if value needs JSON escaping, but otherwise can just be copied as is to output. Also, quoting that data format requires (like double-quotes for JSON) will be added around the value if and as necessary.


    Note that some backends may choose not to support this method: for example, if underlying destination is a <xref uid="java.io.Writer" data-throw-if-not-resolved="false">java.io.Writer</xref> using this method would require UTF-8 decoding. In this case generator implementation may instead choose to throw a <xref uid="java.lang.UnsupportedOperationException" data-throw-if-not-resolved="false">UnsupportedOperationException</xref> due to ineffectiveness of having to decode input.
  syntax:
    content: public void writeUTF8String(byte[] text, int offset, int length)
    parameters:
    - id: text
      type: byte[]
    - id: offset
      type: int
    - id: length
      type: int
  exceptions:
  - type: java.io.IOException
references:
- uid: com.fasterxml.jackson.core.JsonGenerator
  name: JsonGenerator
  nameWithType: JsonGenerator
  fullName: com.fasterxml.jackson.core.JsonGenerator
- uid: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.JsonGeneratorDelegate*
  name: JsonGeneratorDelegate
  nameWithType: JsonGeneratorDelegate.JsonGeneratorDelegate
  fullName: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.JsonGeneratorDelegate
  package: com.fasterxml.jackson.core.util
- uid: boolean
  spec.java:
  - uid: boolean
    name: boolean
    fullName: boolean
- uid: java.lang.Object
  spec.java:
  - uid: java.lang.Object
    name: Object
    fullName: java.lang.Object
- uid: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.getCurrentValue*
  name: getCurrentValue
  nameWithType: JsonGeneratorDelegate.getCurrentValue
  fullName: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.getCurrentValue
  package: com.fasterxml.jackson.core.util
- uid: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.setCurrentValue*
  name: setCurrentValue
  nameWithType: JsonGeneratorDelegate.setCurrentValue
  fullName: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.setCurrentValue
  package: com.fasterxml.jackson.core.util
- uid: com.fasterxml.jackson.core.ObjectCodec
  name: ObjectCodec
  nameWithType: ObjectCodec
  fullName: com.fasterxml.jackson.core.ObjectCodec
- uid: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.getCodec*
  name: getCodec
  nameWithType: JsonGeneratorDelegate.getCodec
  fullName: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.getCodec
  package: com.fasterxml.jackson.core.util
- uid: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.setCodec*
  name: setCodec
  nameWithType: JsonGeneratorDelegate.setCodec
  fullName: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.setCodec
  package: com.fasterxml.jackson.core.util
- uid: com.fasterxml.jackson.core.FormatSchema
  name: FormatSchema
  nameWithType: FormatSchema
  fullName: com.fasterxml.jackson.core.FormatSchema
- uid: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.setSchema*
  name: setSchema
  nameWithType: JsonGeneratorDelegate.setSchema
  fullName: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.setSchema
  package: com.fasterxml.jackson.core.util
- uid: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.getSchema*
  name: getSchema
  nameWithType: JsonGeneratorDelegate.getSchema
  fullName: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.getSchema
  package: com.fasterxml.jackson.core.util
- uid: com.fasterxml.jackson.core.Version
  name: Version
  nameWithType: Version
  fullName: com.fasterxml.jackson.core.Version
- uid: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.version*
  name: version
  nameWithType: JsonGeneratorDelegate.version
  fullName: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.version
  package: com.fasterxml.jackson.core.util
- uid: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.getOutputTarget*
  name: getOutputTarget
  nameWithType: JsonGeneratorDelegate.getOutputTarget
  fullName: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.getOutputTarget
  package: com.fasterxml.jackson.core.util
- uid: int
  spec.java:
  - uid: int
    name: int
    fullName: int
- uid: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.getOutputBuffered*
  name: getOutputBuffered
  nameWithType: JsonGeneratorDelegate.getOutputBuffered
  fullName: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.getOutputBuffered
  package: com.fasterxml.jackson.core.util
- uid: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.canUseSchema*
  name: canUseSchema
  nameWithType: JsonGeneratorDelegate.canUseSchema
  fullName: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.canUseSchema
  package: com.fasterxml.jackson.core.util
- uid: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.canWriteTypeId*
  name: canWriteTypeId
  nameWithType: JsonGeneratorDelegate.canWriteTypeId
  fullName: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.canWriteTypeId
  package: com.fasterxml.jackson.core.util
- uid: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.canWriteObjectId*
  name: canWriteObjectId
  nameWithType: JsonGeneratorDelegate.canWriteObjectId
  fullName: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.canWriteObjectId
  package: com.fasterxml.jackson.core.util
- uid: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.canWriteBinaryNatively*
  name: canWriteBinaryNatively
  nameWithType: JsonGeneratorDelegate.canWriteBinaryNatively
  fullName: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.canWriteBinaryNatively
  package: com.fasterxml.jackson.core.util
- uid: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.canOmitFields*
  name: canOmitFields
  nameWithType: JsonGeneratorDelegate.canOmitFields
  fullName: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.canOmitFields
  package: com.fasterxml.jackson.core.util
- uid: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.canWriteFormattedNumbers*
  name: canWriteFormattedNumbers
  nameWithType: JsonGeneratorDelegate.canWriteFormattedNumbers
  fullName: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.canWriteFormattedNumbers
  package: com.fasterxml.jackson.core.util
- uid: com.fasterxml.jackson.core.JsonGenerator.Feature
  name: JsonGenerator.Feature
  nameWithType: JsonGenerator.Feature
  fullName: com.fasterxml.jackson.core.JsonGenerator.Feature
- uid: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.enable*
  name: enable
  nameWithType: JsonGeneratorDelegate.enable
  fullName: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.enable
  package: com.fasterxml.jackson.core.util
- uid: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.disable*
  name: disable
  nameWithType: JsonGeneratorDelegate.disable
  fullName: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.disable
  package: com.fasterxml.jackson.core.util
- uid: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.isEnabled*
  name: isEnabled
  nameWithType: JsonGeneratorDelegate.isEnabled
  fullName: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.isEnabled
  package: com.fasterxml.jackson.core.util
- uid: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.getFeatureMask*
  name: getFeatureMask
  nameWithType: JsonGeneratorDelegate.getFeatureMask
  fullName: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.getFeatureMask
  package: com.fasterxml.jackson.core.util
- uid: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.setFeatureMask*
  name: setFeatureMask
  nameWithType: JsonGeneratorDelegate.setFeatureMask
  fullName: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.setFeatureMask
  package: com.fasterxml.jackson.core.util
- uid: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.overrideStdFeatures*
  name: overrideStdFeatures
  nameWithType: JsonGeneratorDelegate.overrideStdFeatures
  fullName: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.overrideStdFeatures
  package: com.fasterxml.jackson.core.util
- uid: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.overrideFormatFeatures*
  name: overrideFormatFeatures
  nameWithType: JsonGeneratorDelegate.overrideFormatFeatures
  fullName: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.overrideFormatFeatures
  package: com.fasterxml.jackson.core.util
- uid: com.fasterxml.jackson.core.PrettyPrinter
  name: PrettyPrinter
  nameWithType: PrettyPrinter
  fullName: com.fasterxml.jackson.core.PrettyPrinter
- uid: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.setPrettyPrinter*
  name: setPrettyPrinter
  nameWithType: JsonGeneratorDelegate.setPrettyPrinter
  fullName: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.setPrettyPrinter
  package: com.fasterxml.jackson.core.util
- uid: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.getPrettyPrinter*
  name: getPrettyPrinter
  nameWithType: JsonGeneratorDelegate.getPrettyPrinter
  fullName: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.getPrettyPrinter
  package: com.fasterxml.jackson.core.util
- uid: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.useDefaultPrettyPrinter*
  name: useDefaultPrettyPrinter
  nameWithType: JsonGeneratorDelegate.useDefaultPrettyPrinter
  fullName: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.useDefaultPrettyPrinter
  package: com.fasterxml.jackson.core.util
- uid: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.setHighestNonEscapedChar*
  name: setHighestNonEscapedChar
  nameWithType: JsonGeneratorDelegate.setHighestNonEscapedChar
  fullName: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.setHighestNonEscapedChar
  package: com.fasterxml.jackson.core.util
- uid: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.getHighestEscapedChar*
  name: getHighestEscapedChar
  nameWithType: JsonGeneratorDelegate.getHighestEscapedChar
  fullName: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.getHighestEscapedChar
  package: com.fasterxml.jackson.core.util
- uid: com.fasterxml.jackson.core.io.CharacterEscapes
  name: CharacterEscapes
  nameWithType: CharacterEscapes
  fullName: com.fasterxml.jackson.core.io.CharacterEscapes
- uid: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.getCharacterEscapes*
  name: getCharacterEscapes
  nameWithType: JsonGeneratorDelegate.getCharacterEscapes
  fullName: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.getCharacterEscapes
  package: com.fasterxml.jackson.core.util
- uid: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.setCharacterEscapes*
  name: setCharacterEscapes
  nameWithType: JsonGeneratorDelegate.setCharacterEscapes
  fullName: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.setCharacterEscapes
  package: com.fasterxml.jackson.core.util
- uid: com.fasterxml.jackson.core.SerializableString
  name: SerializableString
  nameWithType: SerializableString
  fullName: com.fasterxml.jackson.core.SerializableString
- uid: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.setRootValueSeparator*
  name: setRootValueSeparator
  nameWithType: JsonGeneratorDelegate.setRootValueSeparator
  fullName: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.setRootValueSeparator
  package: com.fasterxml.jackson.core.util
- uid: java.io.IOException
  spec.java:
  - uid: java.io.IOException
    name: IOException
    fullName: java.io.IOException
- uid: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeStartArray*
  name: writeStartArray
  nameWithType: JsonGeneratorDelegate.writeStartArray
  fullName: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeStartArray
  package: com.fasterxml.jackson.core.util
- uid: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeEndArray*
  name: writeEndArray
  nameWithType: JsonGeneratorDelegate.writeEndArray
  fullName: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeEndArray
  package: com.fasterxml.jackson.core.util
- uid: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeStartObject*
  name: writeStartObject
  nameWithType: JsonGeneratorDelegate.writeStartObject
  fullName: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeStartObject
  package: com.fasterxml.jackson.core.util
- uid: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeEndObject*
  name: writeEndObject
  nameWithType: JsonGeneratorDelegate.writeEndObject
  fullName: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeEndObject
  package: com.fasterxml.jackson.core.util
- uid: java.lang.String
  spec.java:
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
- uid: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeFieldName*
  name: writeFieldName
  nameWithType: JsonGeneratorDelegate.writeFieldName
  fullName: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeFieldName
  package: com.fasterxml.jackson.core.util
- uid: long
  spec.java:
  - uid: long
    name: long
    fullName: long
- uid: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeFieldId*
  name: writeFieldId
  nameWithType: JsonGeneratorDelegate.writeFieldId
  fullName: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeFieldId
  package: com.fasterxml.jackson.core.util
- uid: int[]
  spec.java:
  - uid: int
    name: int
    fullName: int
  - name: '[]'
    fullName: '[]'
- uid: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeArray*
  name: writeArray
  nameWithType: JsonGeneratorDelegate.writeArray
  fullName: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeArray
  package: com.fasterxml.jackson.core.util
- uid: long[]
  spec.java:
  - uid: long
    name: long
    fullName: long
  - name: '[]'
    fullName: '[]'
- uid: double[]
  spec.java:
  - uid: double
    name: double
    fullName: double
  - name: '[]'
    fullName: '[]'
- uid: java.lang.String[]
  spec.java:
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
  - name: '[]'
    fullName: '[]'
- uid: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeString*
  name: writeString
  nameWithType: JsonGeneratorDelegate.writeString
  fullName: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeString
  package: com.fasterxml.jackson.core.util
- uid: java.io.Reader
  spec.java:
  - uid: java.io.Reader
    name: Reader
    fullName: java.io.Reader
- uid: char[]
  spec.java:
  - uid: char
    name: char
    fullName: char
  - name: '[]'
    fullName: '[]'
- uid: byte[]
  spec.java:
  - uid: byte
    name: byte
    fullName: byte
  - name: '[]'
    fullName: '[]'
- uid: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeRawUTF8String*
  name: writeRawUTF8String
  nameWithType: JsonGeneratorDelegate.writeRawUTF8String
  fullName: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeRawUTF8String
  package: com.fasterxml.jackson.core.util
- uid: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeUTF8String*
  name: writeUTF8String
  nameWithType: JsonGeneratorDelegate.writeUTF8String
  fullName: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeUTF8String
  package: com.fasterxml.jackson.core.util
- uid: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeRaw*
  name: writeRaw
  nameWithType: JsonGeneratorDelegate.writeRaw
  fullName: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeRaw
  package: com.fasterxml.jackson.core.util
- uid: char
  spec.java:
  - uid: char
    name: char
    fullName: char
- uid: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeRawValue*
  name: writeRawValue
  nameWithType: JsonGeneratorDelegate.writeRawValue
  fullName: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeRawValue
  package: com.fasterxml.jackson.core.util
- uid: com.fasterxml.jackson.core.Base64Variant
  name: Base64Variant
  nameWithType: Base64Variant
  fullName: com.fasterxml.jackson.core.Base64Variant
- uid: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeBinary*
  name: writeBinary
  nameWithType: JsonGeneratorDelegate.writeBinary
  fullName: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeBinary
  package: com.fasterxml.jackson.core.util
- uid: java.io.InputStream
  spec.java:
  - uid: java.io.InputStream
    name: InputStream
    fullName: java.io.InputStream
- uid: short
  spec.java:
  - uid: short
    name: short
    fullName: short
- uid: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeNumber*
  name: writeNumber
  nameWithType: JsonGeneratorDelegate.writeNumber
  fullName: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeNumber
  package: com.fasterxml.jackson.core.util
- uid: java.math.BigInteger
  spec.java:
  - uid: java.math.BigInteger
    name: BigInteger
    fullName: java.math.BigInteger
- uid: double
  spec.java:
  - uid: double
    name: double
    fullName: double
- uid: float
  spec.java:
  - uid: float
    name: float
    fullName: float
- uid: java.math.BigDecimal
  spec.java:
  - uid: java.math.BigDecimal
    name: BigDecimal
    fullName: java.math.BigDecimal
- uid: java.lang.UnsupportedOperationException
  spec.java:
  - uid: java.lang.UnsupportedOperationException
    name: UnsupportedOperationException
    fullName: java.lang.UnsupportedOperationException
- uid: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeBoolean*
  name: writeBoolean
  nameWithType: JsonGeneratorDelegate.writeBoolean
  fullName: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeBoolean
  package: com.fasterxml.jackson.core.util
- uid: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeNull*
  name: writeNull
  nameWithType: JsonGeneratorDelegate.writeNull
  fullName: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeNull
  package: com.fasterxml.jackson.core.util
- uid: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeOmittedField*
  name: writeOmittedField
  nameWithType: JsonGeneratorDelegate.writeOmittedField
  fullName: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeOmittedField
  package: com.fasterxml.jackson.core.util
- uid: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeObjectId*
  name: writeObjectId
  nameWithType: JsonGeneratorDelegate.writeObjectId
  fullName: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeObjectId
  package: com.fasterxml.jackson.core.util
- uid: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeObjectRef*
  name: writeObjectRef
  nameWithType: JsonGeneratorDelegate.writeObjectRef
  fullName: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeObjectRef
  package: com.fasterxml.jackson.core.util
- uid: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeTypeId*
  name: writeTypeId
  nameWithType: JsonGeneratorDelegate.writeTypeId
  fullName: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeTypeId
  package: com.fasterxml.jackson.core.util
- uid: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeEmbeddedObject*
  name: writeEmbeddedObject
  nameWithType: JsonGeneratorDelegate.writeEmbeddedObject
  fullName: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeEmbeddedObject
  package: com.fasterxml.jackson.core.util
- uid: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeObject*
  name: writeObject
  nameWithType: JsonGeneratorDelegate.writeObject
  fullName: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeObject
  package: com.fasterxml.jackson.core.util
- uid: com.fasterxml.jackson.core.TreeNode
  name: TreeNode
  nameWithType: TreeNode
  fullName: com.fasterxml.jackson.core.TreeNode
- uid: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeTree*
  name: writeTree
  nameWithType: JsonGeneratorDelegate.writeTree
  fullName: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeTree
  package: com.fasterxml.jackson.core.util
- uid: com.fasterxml.jackson.core.JsonParser
  name: JsonParser
  nameWithType: JsonParser
  fullName: com.fasterxml.jackson.core.JsonParser
- uid: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.copyCurrentEvent*
  name: copyCurrentEvent
  nameWithType: JsonGeneratorDelegate.copyCurrentEvent
  fullName: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.copyCurrentEvent
  package: com.fasterxml.jackson.core.util
- uid: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.copyCurrentStructure*
  name: copyCurrentStructure
  nameWithType: JsonGeneratorDelegate.copyCurrentStructure
  fullName: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.copyCurrentStructure
  package: com.fasterxml.jackson.core.util
- uid: com.fasterxml.jackson.core.JsonStreamContext
  name: JsonStreamContext
  nameWithType: JsonStreamContext
  fullName: com.fasterxml.jackson.core.JsonStreamContext
- uid: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.getOutputContext*
  name: getOutputContext
  nameWithType: JsonGeneratorDelegate.getOutputContext
  fullName: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.getOutputContext
  package: com.fasterxml.jackson.core.util
- uid: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.flush*
  name: flush
  nameWithType: JsonGeneratorDelegate.flush
  fullName: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.flush
  package: com.fasterxml.jackson.core.util
- uid: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.close*
  name: close
  nameWithType: JsonGeneratorDelegate.close
  fullName: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.close
  package: com.fasterxml.jackson.core.util
- uid: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.isClosed*
  name: isClosed
  nameWithType: JsonGeneratorDelegate.isClosed
  fullName: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.isClosed
  package: com.fasterxml.jackson.core.util
- uid: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.getDelegate*
  name: getDelegate
  nameWithType: JsonGeneratorDelegate.getDelegate
  fullName: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.getDelegate
  package: com.fasterxml.jackson.core.util
- uid: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.delegate*
  name: delegate
  nameWithType: JsonGeneratorDelegate.delegate
  fullName: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.delegate
  package: com.fasterxml.jackson.core.util
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: java.lang.Object.finalize()
  name: Object.finalize()
  nameWithType: Object.finalize()
  fullName: java.lang.Object.finalize()
- uid: com.fasterxml.jackson.core.JsonGenerator.writeObjectField(java.lang.String,java.lang.Object)
  name: JsonGenerator.writeObjectField(String,Object)
  nameWithType: JsonGenerator.writeObjectField(String,Object)
  fullName: com.fasterxml.jackson.core.JsonGenerator.writeObjectField(java.lang.String,java.lang.Object)
- uid: com.fasterxml.jackson.core.JsonGenerator.getFeatureMask()
  name: JsonGenerator.getFeatureMask()
  nameWithType: JsonGenerator.getFeatureMask()
  fullName: com.fasterxml.jackson.core.JsonGenerator.getFeatureMask()
- uid: com.fasterxml.jackson.core.JsonGenerator.writeArray(double[],int,int)
  name: JsonGenerator.writeArray(double[],int,int)
  nameWithType: JsonGenerator.writeArray(double[],int,int)
  fullName: com.fasterxml.jackson.core.JsonGenerator.writeArray(double[],int,int)
- uid: com.fasterxml.jackson.core.JsonGenerator.writeBinary(byte[])
  name: JsonGenerator.writeBinary(byte[])
  nameWithType: JsonGenerator.writeBinary(byte[])
  fullName: com.fasterxml.jackson.core.JsonGenerator.writeBinary(byte[])
- uid: com.fasterxml.jackson.core.JsonGenerator.copyCurrentEvent(com.fasterxml.jackson.core.JsonParser)
  name: JsonGenerator.copyCurrentEvent(JsonParser)
  nameWithType: JsonGenerator.copyCurrentEvent(JsonParser)
  fullName: com.fasterxml.jackson.core.JsonGenerator.copyCurrentEvent(com.fasterxml.jackson.core.JsonParser)
- uid: com.fasterxml.jackson.core.JsonGenerator.setFeatureMask(int)
  name: JsonGenerator.setFeatureMask(int)
  nameWithType: JsonGenerator.setFeatureMask(int)
  fullName: com.fasterxml.jackson.core.JsonGenerator.setFeatureMask(int)
- uid: com.fasterxml.jackson.core.JsonGenerator.writeStartObject()
  name: JsonGenerator.writeStartObject()
  nameWithType: JsonGenerator.writeStartObject()
  fullName: com.fasterxml.jackson.core.JsonGenerator.writeStartObject()
- uid: com.fasterxml.jackson.core.JsonGenerator.writeArrayFieldStart(java.lang.String)
  name: JsonGenerator.writeArrayFieldStart(String)
  nameWithType: JsonGenerator.writeArrayFieldStart(String)
  fullName: com.fasterxml.jackson.core.JsonGenerator.writeArrayFieldStart(java.lang.String)
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: com.fasterxml.jackson.core.JsonGenerator.writeNumber(double)
  name: JsonGenerator.writeNumber(double)
  nameWithType: JsonGenerator.writeNumber(double)
  fullName: com.fasterxml.jackson.core.JsonGenerator.writeNumber(double)
- uid: com.fasterxml.jackson.core.JsonGenerator.isEnabled(com.fasterxml.jackson.core.StreamWriteFeature)
  name: JsonGenerator.isEnabled(StreamWriteFeature)
  nameWithType: JsonGenerator.isEnabled(StreamWriteFeature)
  fullName: com.fasterxml.jackson.core.JsonGenerator.isEnabled(com.fasterxml.jackson.core.StreamWriteFeature)
- uid: com.fasterxml.jackson.core.JsonGenerator.writeEndObject()
  name: JsonGenerator.writeEndObject()
  nameWithType: JsonGenerator.writeEndObject()
  fullName: com.fasterxml.jackson.core.JsonGenerator.writeEndObject()
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: com.fasterxml.jackson.core.JsonGenerator.getSchema()
  name: JsonGenerator.getSchema()
  nameWithType: JsonGenerator.getSchema()
  fullName: com.fasterxml.jackson.core.JsonGenerator.getSchema()
- uid: com.fasterxml.jackson.core.JsonGenerator.writeNull()
  name: JsonGenerator.writeNull()
  nameWithType: JsonGenerator.writeNull()
  fullName: com.fasterxml.jackson.core.JsonGenerator.writeNull()
- uid: com.fasterxml.jackson.core.JsonGenerator.writeRawValue(java.lang.String,int,int)
  name: JsonGenerator.writeRawValue(String,int,int)
  nameWithType: JsonGenerator.writeRawValue(String,int,int)
  fullName: com.fasterxml.jackson.core.JsonGenerator.writeRawValue(java.lang.String,int,int)
- uid: com.fasterxml.jackson.core.JsonGenerator.writeStartObject(java.lang.Object,int)
  name: JsonGenerator.writeStartObject(Object,int)
  nameWithType: JsonGenerator.writeStartObject(Object,int)
  fullName: com.fasterxml.jackson.core.JsonGenerator.writeStartObject(java.lang.Object,int)
- uid: com.fasterxml.jackson.core.JsonGenerator.getPrettyPrinter()
  name: JsonGenerator.getPrettyPrinter()
  nameWithType: JsonGenerator.getPrettyPrinter()
  fullName: com.fasterxml.jackson.core.JsonGenerator.getPrettyPrinter()
- uid: com.fasterxml.jackson.core.JsonGenerator._reportUnsupportedOperation()
  name: JsonGenerator._reportUnsupportedOperation()
  nameWithType: JsonGenerator._reportUnsupportedOperation()
  fullName: com.fasterxml.jackson.core.JsonGenerator._reportUnsupportedOperation()
- uid: com.fasterxml.jackson.core.JsonGenerator.writeStartArray(int)
  name: JsonGenerator.writeStartArray(int)
  nameWithType: JsonGenerator.writeStartArray(int)
  fullName: com.fasterxml.jackson.core.JsonGenerator.writeStartArray(int)
- uid: com.fasterxml.jackson.core.JsonGenerator.isEnabled(com.fasterxml.jackson.core.JsonGenerator.Feature)
  name: JsonGenerator.isEnabled(JsonGenerator.Feature)
  nameWithType: JsonGenerator.isEnabled(JsonGenerator.Feature)
  fullName: com.fasterxml.jackson.core.JsonGenerator.isEnabled(com.fasterxml.jackson.core.JsonGenerator.Feature)
- uid: com.fasterxml.jackson.core.JsonGenerator.writeRawValue(java.lang.String)
  name: JsonGenerator.writeRawValue(String)
  nameWithType: JsonGenerator.writeRawValue(String)
  fullName: com.fasterxml.jackson.core.JsonGenerator.writeRawValue(java.lang.String)
- uid: com.fasterxml.jackson.core.JsonGenerator.canWriteTypeId()
  name: JsonGenerator.canWriteTypeId()
  nameWithType: JsonGenerator.canWriteTypeId()
  fullName: com.fasterxml.jackson.core.JsonGenerator.canWriteTypeId()
- uid: com.fasterxml.jackson.core.JsonGenerator.writeNumber(java.math.BigDecimal)
  name: JsonGenerator.writeNumber(BigDecimal)
  nameWithType: JsonGenerator.writeNumber(BigDecimal)
  fullName: com.fasterxml.jackson.core.JsonGenerator.writeNumber(java.math.BigDecimal)
- uid: com.fasterxml.jackson.core.JsonGenerator.copyCurrentStructure(com.fasterxml.jackson.core.JsonParser)
  name: JsonGenerator.copyCurrentStructure(JsonParser)
  nameWithType: JsonGenerator.copyCurrentStructure(JsonParser)
  fullName: com.fasterxml.jackson.core.JsonGenerator.copyCurrentStructure(com.fasterxml.jackson.core.JsonParser)
- uid: com.fasterxml.jackson.core.JsonGenerator.writeStartObject(java.lang.Object)
  name: JsonGenerator.writeStartObject(Object)
  nameWithType: JsonGenerator.writeStartObject(Object)
  fullName: com.fasterxml.jackson.core.JsonGenerator.writeStartObject(java.lang.Object)
- uid: com.fasterxml.jackson.core.JsonGenerator.canWriteObjectId()
  name: JsonGenerator.canWriteObjectId()
  nameWithType: JsonGenerator.canWriteObjectId()
  fullName: com.fasterxml.jackson.core.JsonGenerator.canWriteObjectId()
- uid: com.fasterxml.jackson.core.JsonGenerator.getOutputBuffered()
  name: JsonGenerator.getOutputBuffered()
  nameWithType: JsonGenerator.getOutputBuffered()
  fullName: com.fasterxml.jackson.core.JsonGenerator.getOutputBuffered()
- uid: com.fasterxml.jackson.core.JsonGenerator.writeObjectRef(java.lang.Object)
  name: JsonGenerator.writeObjectRef(Object)
  nameWithType: JsonGenerator.writeObjectRef(Object)
  fullName: com.fasterxml.jackson.core.JsonGenerator.writeObjectRef(java.lang.Object)
- uid: com.fasterxml.jackson.core.JsonGenerator.setRootValueSeparator(com.fasterxml.jackson.core.SerializableString)
  name: JsonGenerator.setRootValueSeparator(SerializableString)
  nameWithType: JsonGenerator.setRootValueSeparator(SerializableString)
  fullName: com.fasterxml.jackson.core.JsonGenerator.setRootValueSeparator(com.fasterxml.jackson.core.SerializableString)
- uid: com.fasterxml.jackson.core.JsonGenerator.writeObjectId(java.lang.Object)
  name: JsonGenerator.writeObjectId(Object)
  nameWithType: JsonGenerator.writeObjectId(Object)
  fullName: com.fasterxml.jackson.core.JsonGenerator.writeObjectId(java.lang.Object)
- uid: com.fasterxml.jackson.core.JsonGenerator.getCodec()
  name: JsonGenerator.getCodec()
  nameWithType: JsonGenerator.getCodec()
  fullName: com.fasterxml.jackson.core.JsonGenerator.getCodec()
- uid: com.fasterxml.jackson.core.JsonGenerator.writeArray(int[],int,int)
  name: JsonGenerator.writeArray(int[],int,int)
  nameWithType: JsonGenerator.writeArray(int[],int,int)
  fullName: com.fasterxml.jackson.core.JsonGenerator.writeArray(int[],int,int)
- uid: com.fasterxml.jackson.core.JsonGenerator.configure(com.fasterxml.jackson.core.JsonGenerator.Feature,boolean)
  name: JsonGenerator.configure(JsonGenerator.Feature,boolean)
  nameWithType: JsonGenerator.configure(JsonGenerator.Feature,boolean)
  fullName: com.fasterxml.jackson.core.JsonGenerator.configure(com.fasterxml.jackson.core.JsonGenerator.Feature,boolean)
- uid: com.fasterxml.jackson.core.JsonGenerator.writeEndArray()
  name: JsonGenerator.writeEndArray()
  nameWithType: JsonGenerator.writeEndArray()
  fullName: com.fasterxml.jackson.core.JsonGenerator.writeEndArray()
- uid: com.fasterxml.jackson.core.JsonGenerator.writeUTF8String(byte[],int,int)
  name: JsonGenerator.writeUTF8String(byte[],int,int)
  nameWithType: JsonGenerator.writeUTF8String(byte[],int,int)
  fullName: com.fasterxml.jackson.core.JsonGenerator.writeUTF8String(byte[],int,int)
- uid: com.fasterxml.jackson.core.JsonGenerator.writeBoolean(boolean)
  name: JsonGenerator.writeBoolean(boolean)
  nameWithType: JsonGenerator.writeBoolean(boolean)
  fullName: com.fasterxml.jackson.core.JsonGenerator.writeBoolean(boolean)
- uid: com.fasterxml.jackson.core.JsonGenerator.writeRaw(com.fasterxml.jackson.core.SerializableString)
  name: JsonGenerator.writeRaw(SerializableString)
  nameWithType: JsonGenerator.writeRaw(SerializableString)
  fullName: com.fasterxml.jackson.core.JsonGenerator.writeRaw(com.fasterxml.jackson.core.SerializableString)
- uid: com.fasterxml.jackson.core.JsonGenerator.getCurrentValue()
  name: JsonGenerator.getCurrentValue()
  nameWithType: JsonGenerator.getCurrentValue()
  fullName: com.fasterxml.jackson.core.JsonGenerator.getCurrentValue()
- uid: com.fasterxml.jackson.core.JsonGenerator.disable(com.fasterxml.jackson.core.JsonGenerator.Feature)
  name: JsonGenerator.disable(JsonGenerator.Feature)
  nameWithType: JsonGenerator.disable(JsonGenerator.Feature)
  fullName: com.fasterxml.jackson.core.JsonGenerator.disable(com.fasterxml.jackson.core.JsonGenerator.Feature)
- uid: com.fasterxml.jackson.core.JsonGenerator.setCodec(com.fasterxml.jackson.core.ObjectCodec)
  name: JsonGenerator.setCodec(ObjectCodec)
  nameWithType: JsonGenerator.setCodec(ObjectCodec)
  fullName: com.fasterxml.jackson.core.JsonGenerator.setCodec(com.fasterxml.jackson.core.ObjectCodec)
- uid: com.fasterxml.jackson.core.JsonGenerator.close()
  name: JsonGenerator.close()
  nameWithType: JsonGenerator.close()
  fullName: com.fasterxml.jackson.core.JsonGenerator.close()
- uid: com.fasterxml.jackson.core.JsonGenerator.flush()
  name: JsonGenerator.flush()
  nameWithType: JsonGenerator.flush()
  fullName: com.fasterxml.jackson.core.JsonGenerator.flush()
- uid: com.fasterxml.jackson.core.JsonGenerator.writeTypeId(java.lang.Object)
  name: JsonGenerator.writeTypeId(Object)
  nameWithType: JsonGenerator.writeTypeId(Object)
  fullName: com.fasterxml.jackson.core.JsonGenerator.writeTypeId(java.lang.Object)
- uid: com.fasterxml.jackson.core.JsonGenerator.getHighestEscapedChar()
  name: JsonGenerator.getHighestEscapedChar()
  nameWithType: JsonGenerator.getHighestEscapedChar()
  fullName: com.fasterxml.jackson.core.JsonGenerator.getHighestEscapedChar()
- uid: com.fasterxml.jackson.core.JsonGenerator.writeRawValue(char[],int,int)
  name: JsonGenerator.writeRawValue(char[],int,int)
  nameWithType: JsonGenerator.writeRawValue(char[],int,int)
  fullName: com.fasterxml.jackson.core.JsonGenerator.writeRawValue(char[],int,int)
- uid: com.fasterxml.jackson.core.JsonGenerator.writeBinary(byte[],int,int)
  name: JsonGenerator.writeBinary(byte[],int,int)
  nameWithType: JsonGenerator.writeBinary(byte[],int,int)
  fullName: com.fasterxml.jackson.core.JsonGenerator.writeBinary(byte[],int,int)
- uid: com.fasterxml.jackson.core.JsonGenerator.writeObjectFieldStart(java.lang.String)
  name: JsonGenerator.writeObjectFieldStart(String)
  nameWithType: JsonGenerator.writeObjectFieldStart(String)
  fullName: com.fasterxml.jackson.core.JsonGenerator.writeObjectFieldStart(java.lang.String)
- uid: com.fasterxml.jackson.core.JsonGenerator._throwInternal()
  name: JsonGenerator._throwInternal()
  nameWithType: JsonGenerator._throwInternal()
  fullName: com.fasterxml.jackson.core.JsonGenerator._throwInternal()
- uid: com.fasterxml.jackson.core.JsonGenerator.writeRaw(char[],int,int)
  name: JsonGenerator.writeRaw(char[],int,int)
  nameWithType: JsonGenerator.writeRaw(char[],int,int)
  fullName: com.fasterxml.jackson.core.JsonGenerator.writeRaw(char[],int,int)
- uid: com.fasterxml.jackson.core.JsonGenerator.getCharacterEscapes()
  name: JsonGenerator.getCharacterEscapes()
  nameWithType: JsonGenerator.getCharacterEscapes()
  fullName: com.fasterxml.jackson.core.JsonGenerator.getCharacterEscapes()
- uid: com.fasterxml.jackson.core.JsonGenerator.writeStartArray()
  name: JsonGenerator.writeStartArray()
  nameWithType: JsonGenerator.writeStartArray()
  fullName: com.fasterxml.jackson.core.JsonGenerator.writeStartArray()
- uid: com.fasterxml.jackson.core.JsonGenerator.getOutputTarget()
  name: JsonGenerator.getOutputTarget()
  nameWithType: JsonGenerator.getOutputTarget()
  fullName: com.fasterxml.jackson.core.JsonGenerator.getOutputTarget()
- uid: com.fasterxml.jackson.core.JsonGenerator.writeFieldName(com.fasterxml.jackson.core.SerializableString)
  name: JsonGenerator.writeFieldName(SerializableString)
  nameWithType: JsonGenerator.writeFieldName(SerializableString)
  fullName: com.fasterxml.jackson.core.JsonGenerator.writeFieldName(com.fasterxml.jackson.core.SerializableString)
- uid: java.lang.Object.clone()
  name: Object.clone()
  nameWithType: Object.clone()
  fullName: java.lang.Object.clone()
- uid: com.fasterxml.jackson.core.JsonGenerator.writeBinaryField(java.lang.String,byte[])
  name: JsonGenerator.writeBinaryField(String,byte[])
  nameWithType: JsonGenerator.writeBinaryField(String,byte[])
  fullName: com.fasterxml.jackson.core.JsonGenerator.writeBinaryField(java.lang.String,byte[])
- uid: com.fasterxml.jackson.core.JsonGenerator.writeStartArray(java.lang.Object,int)
  name: JsonGenerator.writeStartArray(Object,int)
  nameWithType: JsonGenerator.writeStartArray(Object,int)
  fullName: com.fasterxml.jackson.core.JsonGenerator.writeStartArray(java.lang.Object,int)
- uid: com.fasterxml.jackson.core.JsonGenerator.setCurrentValue(java.lang.Object)
  name: JsonGenerator.setCurrentValue(Object)
  nameWithType: JsonGenerator.setCurrentValue(Object)
  fullName: com.fasterxml.jackson.core.JsonGenerator.setCurrentValue(java.lang.Object)
- uid: com.fasterxml.jackson.core.JsonGenerator.writeNumber(java.lang.String)
  name: JsonGenerator.writeNumber(String)
  nameWithType: JsonGenerator.writeNumber(String)
  fullName: com.fasterxml.jackson.core.JsonGenerator.writeNumber(java.lang.String)
- uid: com.fasterxml.jackson.core.JsonGenerator.writeNumber(char[],int,int)
  name: JsonGenerator.writeNumber(char[],int,int)
  nameWithType: JsonGenerator.writeNumber(char[],int,int)
  fullName: com.fasterxml.jackson.core.JsonGenerator.writeNumber(char[],int,int)
- uid: com.fasterxml.jackson.core.JsonGenerator.writeRaw(char)
  name: JsonGenerator.writeRaw(char)
  nameWithType: JsonGenerator.writeRaw(char)
  fullName: com.fasterxml.jackson.core.JsonGenerator.writeRaw(char)
- uid: com.fasterxml.jackson.core.JsonGenerator.enable(com.fasterxml.jackson.core.JsonGenerator.Feature)
  name: JsonGenerator.enable(JsonGenerator.Feature)
  nameWithType: JsonGenerator.enable(JsonGenerator.Feature)
  fullName: com.fasterxml.jackson.core.JsonGenerator.enable(com.fasterxml.jackson.core.JsonGenerator.Feature)
- uid: com.fasterxml.jackson.core.JsonGenerator.writeNumber(long)
  name: JsonGenerator.writeNumber(long)
  nameWithType: JsonGenerator.writeNumber(long)
  fullName: com.fasterxml.jackson.core.JsonGenerator.writeNumber(long)
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: com.fasterxml.jackson.core.JsonGenerator.writeNumber(float)
  name: JsonGenerator.writeNumber(float)
  nameWithType: JsonGenerator.writeNumber(float)
  fullName: com.fasterxml.jackson.core.JsonGenerator.writeNumber(float)
- uid: com.fasterxml.jackson.core.JsonGenerator.setCharacterEscapes(com.fasterxml.jackson.core.io.CharacterEscapes)
  name: JsonGenerator.setCharacterEscapes(CharacterEscapes)
  nameWithType: JsonGenerator.setCharacterEscapes(CharacterEscapes)
  fullName: com.fasterxml.jackson.core.JsonGenerator.setCharacterEscapes(com.fasterxml.jackson.core.io.CharacterEscapes)
- uid: com.fasterxml.jackson.core.JsonGenerator.overrideStdFeatures(int,int)
  name: JsonGenerator.overrideStdFeatures(int,int)
  nameWithType: JsonGenerator.overrideStdFeatures(int,int)
  fullName: com.fasterxml.jackson.core.JsonGenerator.overrideStdFeatures(int,int)
- uid: com.fasterxml.jackson.core.JsonGenerator.writeNumber(java.math.BigInteger)
  name: JsonGenerator.writeNumber(BigInteger)
  nameWithType: JsonGenerator.writeNumber(BigInteger)
  fullName: com.fasterxml.jackson.core.JsonGenerator.writeNumber(java.math.BigInteger)
- uid: com.fasterxml.jackson.core.JsonGenerator.writeRaw(java.lang.String)
  name: JsonGenerator.writeRaw(String)
  nameWithType: JsonGenerator.writeRaw(String)
  fullName: com.fasterxml.jackson.core.JsonGenerator.writeRaw(java.lang.String)
- uid: com.fasterxml.jackson.core.JsonGenerator.writeRawUTF8String(byte[],int,int)
  name: JsonGenerator.writeRawUTF8String(byte[],int,int)
  nameWithType: JsonGenerator.writeRawUTF8String(byte[],int,int)
  fullName: com.fasterxml.jackson.core.JsonGenerator.writeRawUTF8String(byte[],int,int)
- uid: com.fasterxml.jackson.core.JsonGenerator.canWriteFormattedNumbers()
  name: JsonGenerator.canWriteFormattedNumbers()
  nameWithType: JsonGenerator.canWriteFormattedNumbers()
  fullName: com.fasterxml.jackson.core.JsonGenerator.canWriteFormattedNumbers()
- uid: com.fasterxml.jackson.core.JsonGenerator.writeBinary(com.fasterxml.jackson.core.Base64Variant,java.io.InputStream,int)
  name: JsonGenerator.writeBinary(Base64Variant,InputStream,int)
  nameWithType: JsonGenerator.writeBinary(Base64Variant,InputStream,int)
  fullName: com.fasterxml.jackson.core.JsonGenerator.writeBinary(com.fasterxml.jackson.core.Base64Variant,java.io.InputStream,int)
- uid: java.lang.Object.equals(java.lang.Object)
  name: Object.equals(Object)
  nameWithType: Object.equals(Object)
  fullName: java.lang.Object.equals(java.lang.Object)
- uid: java.lang.Object.toString()
  name: Object.toString()
  nameWithType: Object.toString()
  fullName: java.lang.Object.toString()
- uid: com.fasterxml.jackson.core.JsonGenerator.writeArray(long[],int,int)
  name: JsonGenerator.writeArray(long[],int,int)
  nameWithType: JsonGenerator.writeArray(long[],int,int)
  fullName: com.fasterxml.jackson.core.JsonGenerator.writeArray(long[],int,int)
- uid: com.fasterxml.jackson.core.JsonGenerator._reportError(java.lang.String)
  name: JsonGenerator._reportError(String)
  nameWithType: JsonGenerator._reportError(String)
  fullName: com.fasterxml.jackson.core.JsonGenerator._reportError(java.lang.String)
- uid: com.fasterxml.jackson.core.JsonGenerator.writeStringField(java.lang.String,java.lang.String)
  name: JsonGenerator.writeStringField(String,String)
  nameWithType: JsonGenerator.writeStringField(String,String)
  fullName: com.fasterxml.jackson.core.JsonGenerator.writeStringField(java.lang.String,java.lang.String)
- uid: com.fasterxml.jackson.core.JsonGenerator.writeTypePrefix(com.fasterxml.jackson.core.type.WritableTypeId)
  name: JsonGenerator.writeTypePrefix(WritableTypeId)
  nameWithType: JsonGenerator.writeTypePrefix(WritableTypeId)
  fullName: com.fasterxml.jackson.core.JsonGenerator.writeTypePrefix(com.fasterxml.jackson.core.type.WritableTypeId)
- uid: com.fasterxml.jackson.core.JsonGenerator.writeNumber(short)
  name: JsonGenerator.writeNumber(short)
  nameWithType: JsonGenerator.writeNumber(short)
  fullName: com.fasterxml.jackson.core.JsonGenerator.writeNumber(short)
- uid: com.fasterxml.jackson.core.JsonGenerator.writeTypeSuffix(com.fasterxml.jackson.core.type.WritableTypeId)
  name: JsonGenerator.writeTypeSuffix(WritableTypeId)
  nameWithType: JsonGenerator.writeTypeSuffix(WritableTypeId)
  fullName: com.fasterxml.jackson.core.JsonGenerator.writeTypeSuffix(com.fasterxml.jackson.core.type.WritableTypeId)
- uid: com.fasterxml.jackson.core.JsonGenerator.writeString(java.lang.String)
  name: JsonGenerator.writeString(String)
  nameWithType: JsonGenerator.writeString(String)
  fullName: com.fasterxml.jackson.core.JsonGenerator.writeString(java.lang.String)
- uid: com.fasterxml.jackson.core.JsonGenerator.canUseSchema(com.fasterxml.jackson.core.FormatSchema)
  name: JsonGenerator.canUseSchema(FormatSchema)
  nameWithType: JsonGenerator.canUseSchema(FormatSchema)
  fullName: com.fasterxml.jackson.core.JsonGenerator.canUseSchema(com.fasterxml.jackson.core.FormatSchema)
- uid: com.fasterxml.jackson.core.JsonGenerator.writeBooleanField(java.lang.String,boolean)
  name: JsonGenerator.writeBooleanField(String,boolean)
  nameWithType: JsonGenerator.writeBooleanField(String,boolean)
  fullName: com.fasterxml.jackson.core.JsonGenerator.writeBooleanField(java.lang.String,boolean)
- uid: com.fasterxml.jackson.core.JsonGenerator.setSchema(com.fasterxml.jackson.core.FormatSchema)
  name: JsonGenerator.setSchema(FormatSchema)
  nameWithType: JsonGenerator.setSchema(FormatSchema)
  fullName: com.fasterxml.jackson.core.JsonGenerator.setSchema(com.fasterxml.jackson.core.FormatSchema)
- uid: com.fasterxml.jackson.core.JsonGenerator.writeArray(java.lang.String[],int,int)
  name: JsonGenerator.writeArray(String[],int,int)
  nameWithType: JsonGenerator.writeArray(String[],int,int)
  fullName: com.fasterxml.jackson.core.JsonGenerator.writeArray(java.lang.String[],int,int)
- uid: com.fasterxml.jackson.core.JsonGenerator.version()
  name: JsonGenerator.version()
  nameWithType: JsonGenerator.version()
  fullName: com.fasterxml.jackson.core.JsonGenerator.version()
- uid: com.fasterxml.jackson.core.JsonGenerator.useDefaultPrettyPrinter()
  name: JsonGenerator.useDefaultPrettyPrinter()
  nameWithType: JsonGenerator.useDefaultPrettyPrinter()
  fullName: com.fasterxml.jackson.core.JsonGenerator.useDefaultPrettyPrinter()
- uid: com.fasterxml.jackson.core.JsonGenerator.writeNumberField(java.lang.String,long)
  name: JsonGenerator.writeNumberField(String,long)
  nameWithType: JsonGenerator.writeNumberField(String,long)
  fullName: com.fasterxml.jackson.core.JsonGenerator.writeNumberField(java.lang.String,long)
- uid: com.fasterxml.jackson.core.JsonGenerator.writeNullField(java.lang.String)
  name: JsonGenerator.writeNullField(String)
  nameWithType: JsonGenerator.writeNullField(String)
  fullName: com.fasterxml.jackson.core.JsonGenerator.writeNullField(java.lang.String)
- uid: com.fasterxml.jackson.core.JsonGenerator.setHighestNonEscapedChar(int)
  name: JsonGenerator.setHighestNonEscapedChar(int)
  nameWithType: JsonGenerator.setHighestNonEscapedChar(int)
  fullName: com.fasterxml.jackson.core.JsonGenerator.setHighestNonEscapedChar(int)
- uid: com.fasterxml.jackson.core.JsonGenerator.writeStartArray(java.lang.Object)
  name: JsonGenerator.writeStartArray(Object)
  nameWithType: JsonGenerator.writeStartArray(Object)
  fullName: com.fasterxml.jackson.core.JsonGenerator.writeStartArray(java.lang.Object)
- uid: com.fasterxml.jackson.core.JsonGenerator.isClosed()
  name: JsonGenerator.isClosed()
  nameWithType: JsonGenerator.isClosed()
  fullName: com.fasterxml.jackson.core.JsonGenerator.isClosed()
- uid: com.fasterxml.jackson.core.JsonGenerator.writeObject(java.lang.Object)
  name: JsonGenerator.writeObject(Object)
  nameWithType: JsonGenerator.writeObject(Object)
  fullName: com.fasterxml.jackson.core.JsonGenerator.writeObject(java.lang.Object)
- uid: com.fasterxml.jackson.core.JsonGenerator.writeRaw(java.lang.String,int,int)
  name: JsonGenerator.writeRaw(String,int,int)
  nameWithType: JsonGenerator.writeRaw(String,int,int)
  fullName: com.fasterxml.jackson.core.JsonGenerator.writeRaw(java.lang.String,int,int)
- uid: com.fasterxml.jackson.core.JsonGenerator._verifyOffsets(int,int,int)
  name: JsonGenerator._verifyOffsets(int,int,int)
  nameWithType: JsonGenerator._verifyOffsets(int,int,int)
  fullName: com.fasterxml.jackson.core.JsonGenerator._verifyOffsets(int,int,int)
- uid: com.fasterxml.jackson.core.JsonGenerator.writeEmbeddedObject(java.lang.Object)
  name: JsonGenerator.writeEmbeddedObject(Object)
  nameWithType: JsonGenerator.writeEmbeddedObject(Object)
  fullName: com.fasterxml.jackson.core.JsonGenerator.writeEmbeddedObject(java.lang.Object)
- uid: com.fasterxml.jackson.core.JsonGenerator.writeNumberField(java.lang.String,float)
  name: JsonGenerator.writeNumberField(String,float)
  nameWithType: JsonGenerator.writeNumberField(String,float)
  fullName: com.fasterxml.jackson.core.JsonGenerator.writeNumberField(java.lang.String,float)
- uid: com.fasterxml.jackson.core.JsonGenerator.writeString(java.io.Reader,int)
  name: JsonGenerator.writeString(Reader,int)
  nameWithType: JsonGenerator.writeString(Reader,int)
  fullName: com.fasterxml.jackson.core.JsonGenerator.writeString(java.io.Reader,int)
- uid: java.lang.Object.hashCode()
  name: Object.hashCode()
  nameWithType: Object.hashCode()
  fullName: java.lang.Object.hashCode()
- uid: com.fasterxml.jackson.core.JsonGenerator.canOmitFields()
  name: JsonGenerator.canOmitFields()
  nameWithType: JsonGenerator.canOmitFields()
  fullName: com.fasterxml.jackson.core.JsonGenerator.canOmitFields()
- uid: com.fasterxml.jackson.core.JsonGenerator.writeBinary(com.fasterxml.jackson.core.Base64Variant,byte[],int,int)
  name: JsonGenerator.writeBinary(Base64Variant,byte[],int,int)
  nameWithType: JsonGenerator.writeBinary(Base64Variant,byte[],int,int)
  fullName: com.fasterxml.jackson.core.JsonGenerator.writeBinary(com.fasterxml.jackson.core.Base64Variant,byte[],int,int)
- uid: com.fasterxml.jackson.core.JsonGenerator.writeString(com.fasterxml.jackson.core.SerializableString)
  name: JsonGenerator.writeString(SerializableString)
  nameWithType: JsonGenerator.writeString(SerializableString)
  fullName: com.fasterxml.jackson.core.JsonGenerator.writeString(com.fasterxml.jackson.core.SerializableString)
- uid: com.fasterxml.jackson.core.JsonGenerator.canWriteBinaryNatively()
  name: JsonGenerator.canWriteBinaryNatively()
  nameWithType: JsonGenerator.canWriteBinaryNatively()
  fullName: com.fasterxml.jackson.core.JsonGenerator.canWriteBinaryNatively()
- uid: com.fasterxml.jackson.core.JsonGenerator.getFormatFeatures()
  name: JsonGenerator.getFormatFeatures()
  nameWithType: JsonGenerator.getFormatFeatures()
  fullName: com.fasterxml.jackson.core.JsonGenerator.getFormatFeatures()
- uid: com.fasterxml.jackson.core.JsonGenerator.overrideFormatFeatures(int,int)
  name: JsonGenerator.overrideFormatFeatures(int,int)
  nameWithType: JsonGenerator.overrideFormatFeatures(int,int)
  fullName: com.fasterxml.jackson.core.JsonGenerator.overrideFormatFeatures(int,int)
- uid: com.fasterxml.jackson.core.JsonGenerator.setPrettyPrinter(com.fasterxml.jackson.core.PrettyPrinter)
  name: JsonGenerator.setPrettyPrinter(PrettyPrinter)
  nameWithType: JsonGenerator.setPrettyPrinter(PrettyPrinter)
  fullName: com.fasterxml.jackson.core.JsonGenerator.setPrettyPrinter(com.fasterxml.jackson.core.PrettyPrinter)
- uid: com.fasterxml.jackson.core.JsonGenerator._writeSimpleObject(java.lang.Object)
  name: JsonGenerator._writeSimpleObject(Object)
  nameWithType: JsonGenerator._writeSimpleObject(Object)
  fullName: com.fasterxml.jackson.core.JsonGenerator._writeSimpleObject(java.lang.Object)
- uid: com.fasterxml.jackson.core.JsonGenerator.getOutputContext()
  name: JsonGenerator.getOutputContext()
  nameWithType: JsonGenerator.getOutputContext()
  fullName: com.fasterxml.jackson.core.JsonGenerator.getOutputContext()
- uid: com.fasterxml.jackson.core.JsonGenerator.writeNumberField(java.lang.String,int)
  name: JsonGenerator.writeNumberField(String,int)
  nameWithType: JsonGenerator.writeNumberField(String,int)
  fullName: com.fasterxml.jackson.core.JsonGenerator.writeNumberField(java.lang.String,int)
- uid: com.fasterxml.jackson.core.JsonGenerator.writeNumber(int)
  name: JsonGenerator.writeNumber(int)
  nameWithType: JsonGenerator.writeNumber(int)
  fullName: com.fasterxml.jackson.core.JsonGenerator.writeNumber(int)
- uid: com.fasterxml.jackson.core.JsonGenerator._copyCurrentContents(com.fasterxml.jackson.core.JsonParser)
  name: JsonGenerator._copyCurrentContents(JsonParser)
  nameWithType: JsonGenerator._copyCurrentContents(JsonParser)
  fullName: com.fasterxml.jackson.core.JsonGenerator._copyCurrentContents(com.fasterxml.jackson.core.JsonParser)
- uid: com.fasterxml.jackson.core.JsonGenerator.writeOmittedField(java.lang.String)
  name: JsonGenerator.writeOmittedField(String)
  nameWithType: JsonGenerator.writeOmittedField(String)
  fullName: com.fasterxml.jackson.core.JsonGenerator.writeOmittedField(java.lang.String)
- uid: com.fasterxml.jackson.core.JsonGenerator.writeFieldId(long)
  name: JsonGenerator.writeFieldId(long)
  nameWithType: JsonGenerator.writeFieldId(long)
  fullName: com.fasterxml.jackson.core.JsonGenerator.writeFieldId(long)
- uid: com.fasterxml.jackson.core.JsonGenerator.writeBinary(java.io.InputStream,int)
  name: JsonGenerator.writeBinary(InputStream,int)
  nameWithType: JsonGenerator.writeBinary(InputStream,int)
  fullName: com.fasterxml.jackson.core.JsonGenerator.writeBinary(java.io.InputStream,int)
- uid: com.fasterxml.jackson.core.JsonGenerator.writeNumberField(java.lang.String,java.math.BigInteger)
  name: JsonGenerator.writeNumberField(String,BigInteger)
  nameWithType: JsonGenerator.writeNumberField(String,BigInteger)
  fullName: com.fasterxml.jackson.core.JsonGenerator.writeNumberField(java.lang.String,java.math.BigInteger)
- uid: com.fasterxml.jackson.core.JsonGenerator.writeNumberField(java.lang.String,java.math.BigDecimal)
  name: JsonGenerator.writeNumberField(String,BigDecimal)
  nameWithType: JsonGenerator.writeNumberField(String,BigDecimal)
  fullName: com.fasterxml.jackson.core.JsonGenerator.writeNumberField(java.lang.String,java.math.BigDecimal)
- uid: com.fasterxml.jackson.core.JsonGenerator.writeNumberField(java.lang.String,double)
  name: JsonGenerator.writeNumberField(String,double)
  nameWithType: JsonGenerator.writeNumberField(String,double)
  fullName: com.fasterxml.jackson.core.JsonGenerator.writeNumberField(java.lang.String,double)
- uid: com.fasterxml.jackson.core.JsonGenerator.writeNumberField(java.lang.String,short)
  name: JsonGenerator.writeNumberField(String,short)
  nameWithType: JsonGenerator.writeNumberField(String,short)
  fullName: com.fasterxml.jackson.core.JsonGenerator.writeNumberField(java.lang.String,short)
- uid: com.fasterxml.jackson.core.JsonGenerator.writeFieldName(java.lang.String)
  name: JsonGenerator.writeFieldName(String)
  nameWithType: JsonGenerator.writeFieldName(String)
  fullName: com.fasterxml.jackson.core.JsonGenerator.writeFieldName(java.lang.String)
- uid: com.fasterxml.jackson.core.JsonGenerator.writeRawValue(com.fasterxml.jackson.core.SerializableString)
  name: JsonGenerator.writeRawValue(SerializableString)
  nameWithType: JsonGenerator.writeRawValue(SerializableString)
  fullName: com.fasterxml.jackson.core.JsonGenerator.writeRawValue(com.fasterxml.jackson.core.SerializableString)
- uid: com.fasterxml.jackson.core.JsonGenerator.writeString(char[],int,int)
  name: JsonGenerator.writeString(char[],int,int)
  nameWithType: JsonGenerator.writeString(char[],int,int)
  fullName: com.fasterxml.jackson.core.JsonGenerator.writeString(char[],int,int)
- uid: com.fasterxml.jackson.core.JsonGenerator.writeTree(com.fasterxml.jackson.core.TreeNode)
  name: JsonGenerator.writeTree(TreeNode)
  nameWithType: JsonGenerator.writeTree(TreeNode)
  fullName: com.fasterxml.jackson.core.JsonGenerator.writeTree(com.fasterxml.jackson.core.TreeNode)
