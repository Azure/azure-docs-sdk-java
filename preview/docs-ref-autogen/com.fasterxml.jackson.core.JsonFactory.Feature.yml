### YamlMime:JavaEnum
uid: "com.fasterxml.jackson.core.JsonFactory.Feature"
fullName: "com.fasterxml.jackson.core.JsonFactory.Feature"
name: "JsonFactory.Feature"
nameWithType: "JsonFactory.Feature"
summary: "Enumeration that defines all on/off features that can only be changed for <xref uid=\"com.fasterxml.jackson.core.JsonFactory\" data-throw-if-not-resolved=\"false\" data-raw-source=\"JsonFactory\"></xref>."
inheritances:
- "<xref href=\"java.lang.Object\" data-throw-if-not-resolved=\"False\" />"
- "<xref href=\"java.lang.Enum\" data-throw-if-not-resolved=\"False\" />"
inheritedMembers:
- "java.lang.Enum.<T>valueOf(java.lang.Class<T>,java.lang.String)"
- "java.lang.Enum.clone()"
- "java.lang.Enum.compareTo(E)"
- "java.lang.Enum.equals(java.lang.Object)"
- "java.lang.Enum.finalize()"
- "java.lang.Enum.getDeclaringClass()"
- "java.lang.Enum.hashCode()"
- "java.lang.Enum.name()"
- "java.lang.Enum.ordinal()"
- "java.lang.Enum.toString()"
- "java.lang.Object.getClass()"
- "java.lang.Object.notify()"
- "java.lang.Object.notifyAll()"
- "java.lang.Object.wait()"
- "java.lang.Object.wait(long)"
- "java.lang.Object.wait(long,int)"
syntax: "public enum JsonFactory.Feature extends Enum<JsonFactory.Feature>"
fields:
- uid: "com.fasterxml.jackson.core.JsonFactory.Feature.CANONICALIZE_FIELD_NAMES"
  fullName: "com.fasterxml.jackson.core.JsonFactory.Feature.CANONICALIZE_FIELD_NAMES"
  name: "CANONICALIZE_FIELD_NAMES"
  nameWithType: "JsonFactory.Feature.CANONICALIZE_FIELD_NAMES"
  summary: "Feature that determines whether JSON object field names are to be canonicalized (details of how canonicalization is done then further specified by <xref uid=\"com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#INTERN_FIELD_NAMES\"></xref>).\n\nThis setting is enabled by default."
- uid: "com.fasterxml.jackson.core.JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW"
  fullName: "com.fasterxml.jackson.core.JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW"
  name: "FAIL_ON_SYMBOL_HASH_OVERFLOW"
  nameWithType: "JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW"
  summary: "Feature that determines what happens if we encounter a case in symbol handling where number of hash collisions exceeds a safety threshold -- which almost certainly means a denial-of-service attack via generated duplicate hash codes. If feature is enabled, an <xref uid=\"java.lang.IllegalStateException\" data-throw-if-not-resolved=\"false\" data-raw-source=\"IllegalStateException\"></xref> is thrown to indicate the suspected denial-of-service attack; if disabled, processing continues but canonicalization (and thereby `intern()`ing) is disabled) as protective measure.\n\nThis setting is enabled by default."
- uid: "com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES"
  fullName: "com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES"
  name: "INTERN_FIELD_NAMES"
  nameWithType: "JsonFactory.Feature.INTERN_FIELD_NAMES"
  summary: "Feature that determines whether JSON object field names are to be canonicalized using <xref uid=\"java.lang.String.intern\" data-throw-if-not-resolved=\"false\" data-raw-source=\"String#intern\"></xref> or not: if enabled, all field names will be intern()ed (and caller can count on this being true for all such names); if disabled, no intern()ing is done. There may still be basic canonicalization (that is, same String will be used to represent all identical object property names for a single document).\n\nNote: this setting only has effect if <xref uid=\"com.fasterxml.jackson.core.JsonFactory.Feature.CANONICALIZE_FIELD_NAMES\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#CANONICALIZE_FIELD_NAMES\"></xref> is true -- otherwise no canonicalization of any sort is done.\n\nThis setting is enabled by default."
- uid: "com.fasterxml.jackson.core.JsonFactory.Feature.USE_THREAD_LOCAL_FOR_BUFFER_RECYCLING"
  fullName: "com.fasterxml.jackson.core.JsonFactory.Feature.USE_THREAD_LOCAL_FOR_BUFFER_RECYCLING"
  name: "USE_THREAD_LOCAL_FOR_BUFFER_RECYCLING"
  nameWithType: "JsonFactory.Feature.USE_THREAD_LOCAL_FOR_BUFFER_RECYCLING"
  summary: "Feature that determines whether we will use <xref uid=\"com.fasterxml.jackson.core.util.BufferRecycler\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BufferRecycler\"></xref> with <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ThreadLocal\"></xref> and <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"SoftReference\"></xref>, for efficient reuse of underlying input/output buffers. This usually makes sense on normal J2SE/J2EE server-side processing; but may not make sense on platforms where <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"SoftReference\"></xref> handling is broken (like Android), or if there are retention issues due to <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ThreadLocal\"></xref> (see [Issue \\#189][Issue _189] for a possible case)\n\nThis setting is enabled by default.\n\n\n[Issue _189]: https://github.com/FasterXML/jackson-core/issues/189"
methods:
- uid: "com.fasterxml.jackson.core.JsonFactory.Feature.collectDefaults()"
  fullName: "com.fasterxml.jackson.core.JsonFactory.Feature.collectDefaults()"
  name: "collectDefaults()"
  nameWithType: "JsonFactory.Feature.collectDefaults()"
  summary: "Method that calculates bit set (flags) of all features that are enabled by default."
  syntax: "public static int collectDefaults()"
  returns:
    type: "<xref href=\"int?alt=int&text=int\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.fasterxml.jackson.core.JsonFactory.Feature.enabledByDefault()"
  fullName: "com.fasterxml.jackson.core.JsonFactory.Feature.enabledByDefault()"
  name: "enabledByDefault()"
  nameWithType: "JsonFactory.Feature.enabledByDefault()"
  syntax: "public boolean enabledByDefault()"
  returns:
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.fasterxml.jackson.core.JsonFactory.Feature.enabledIn(int)"
  fullName: "com.fasterxml.jackson.core.JsonFactory.Feature.enabledIn(int flags)"
  name: "enabledIn(int flags)"
  nameWithType: "JsonFactory.Feature.enabledIn(int flags)"
  parameters:
  - name: "flags"
    type: "<xref href=\"int?alt=int&text=int\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public boolean enabledIn(int flags)"
  returns:
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.fasterxml.jackson.core.JsonFactory.Feature.getMask()"
  fullName: "com.fasterxml.jackson.core.JsonFactory.Feature.getMask()"
  name: "getMask()"
  nameWithType: "JsonFactory.Feature.getMask()"
  syntax: "public int getMask()"
  returns:
    type: "<xref href=\"int?alt=int&text=int\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.fasterxml.jackson.core.JsonFactory.Feature.valueOf(java.lang.String)"
  fullName: "com.fasterxml.jackson.core.JsonFactory.Feature.valueOf(String name)"
  name: "valueOf(String name)"
  nameWithType: "JsonFactory.Feature.valueOf(String name)"
  parameters:
  - name: "name"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public static JsonFactory.Feature valueOf(String name)"
  returns:
    type: "<xref href=\"com.fasterxml.jackson.core.JsonFactory.Feature?alt=com.fasterxml.jackson.core.JsonFactory.Feature&text=Feature\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.fasterxml.jackson.core.JsonFactory.Feature.values()"
  fullName: "com.fasterxml.jackson.core.JsonFactory.Feature.values()"
  name: "values()"
  nameWithType: "JsonFactory.Feature.values()"
  syntax: "public static JsonFactory.Feature[] values()"
  returns:
    type: "<xref href=\"com.fasterxml.jackson.core.JsonFactory.Feature?alt=com.fasterxml.jackson.core.JsonFactory.Feature&text=Feature\" data-throw-if-not-resolved=\"False\" />[]"
metadata: {}
package: "com.fasterxml.jackson.core"
artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
