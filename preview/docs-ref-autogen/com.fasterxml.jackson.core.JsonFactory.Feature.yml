### YamlMime:ManagedReference
items:
- uid: com.fasterxml.jackson.core.JsonFactory.Feature
  id: Feature
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core
  children:
  - com.fasterxml.jackson.core.JsonFactory.Feature.CANONICALIZE_FIELD_NAMES
  - com.fasterxml.jackson.core.JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW
  - com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES
  - com.fasterxml.jackson.core.JsonFactory.Feature.USE_THREAD_LOCAL_FOR_BUFFER_RECYCLING
  - com.fasterxml.jackson.core.JsonFactory.Feature.collectDefaults()
  - com.fasterxml.jackson.core.JsonFactory.Feature.enabledByDefault()
  - com.fasterxml.jackson.core.JsonFactory.Feature.enabledIn(int)
  - com.fasterxml.jackson.core.JsonFactory.Feature.getMask()
  - com.fasterxml.jackson.core.JsonFactory.Feature.valueOf(java.lang.String)
  - com.fasterxml.jackson.core.JsonFactory.Feature.values()
  langs:
  - java
  name: JsonFactory.Feature
  nameWithType: JsonFactory.Feature
  fullName: com.fasterxml.jackson.core.JsonFactory.Feature
  type: Enum
  package: com.fasterxml.jackson.core
  summary: Enumeration that defines all on/off features that can only be changed for <xref uid="com.fasterxml.jackson.core.JsonFactory" data-throw-if-not-resolved="false">JsonFactory</xref>.
  syntax:
    content: public enum JsonFactory.Feature extends Enum<JsonFactory.Feature>
  inheritance:
  - java.lang.Object
  - java.lang.Enum
  inheritedMembers:
  - java.lang.Enum.<T>valueOf(java.lang.Class<T>,java.lang.String)
  - java.lang.Enum.clone()
  - java.lang.Enum.compareTo(E)
  - java.lang.Enum.equals(java.lang.Object)
  - java.lang.Enum.finalize()
  - java.lang.Enum.getDeclaringClass()
  - java.lang.Enum.hashCode()
  - java.lang.Enum.name()
  - java.lang.Enum.ordinal()
  - java.lang.Enum.toString()
  - java.lang.Object.getClass()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
- uid: com.fasterxml.jackson.core.JsonFactory.Feature.CANONICALIZE_FIELD_NAMES
  id: CANONICALIZE_FIELD_NAMES
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.JsonFactory.Feature
  langs:
  - java
  name: CANONICALIZE_FIELD_NAMES
  nameWithType: JsonFactory.Feature.CANONICALIZE_FIELD_NAMES
  fullName: com.fasterxml.jackson.core.JsonFactory.Feature.CANONICALIZE_FIELD_NAMES
  type: Field
  package: com.fasterxml.jackson.core
  summary: >-
    Feature that determines whether JSON object field names are to be canonicalized (details of how canonicalization is done then further specified by <xref uid="com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES" data-throw-if-not-resolved="false">#INTERN_FIELD_NAMES</xref>).


    This setting is enabled by default.
  syntax:
    content: public static final JsonFactory.Feature CANONICALIZE_FIELD_NAMES
    return:
      type: com.fasterxml.jackson.core.JsonFactory.Feature
- uid: com.fasterxml.jackson.core.JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW
  id: FAIL_ON_SYMBOL_HASH_OVERFLOW
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.JsonFactory.Feature
  langs:
  - java
  name: FAIL_ON_SYMBOL_HASH_OVERFLOW
  nameWithType: JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW
  fullName: com.fasterxml.jackson.core.JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW
  type: Field
  package: com.fasterxml.jackson.core
  summary: >-
    Feature that determines what happens if we encounter a case in symbol handling where number of hash collisions exceeds a safety threshold -- which almost certainly means a denial-of-service attack via generated duplicate hash codes. If feature is enabled, an <xref uid="java.lang.IllegalStateException" data-throw-if-not-resolved="false">IllegalStateException</xref> is thrown to indicate the suspected denial-of-service attack; if disabled, processing continues but canonicalization (and thereby `intern()`ing) is disabled) as protective measure.


    This setting is enabled by default.
  syntax:
    content: public static final JsonFactory.Feature FAIL_ON_SYMBOL_HASH_OVERFLOW
    return:
      type: com.fasterxml.jackson.core.JsonFactory.Feature
- uid: com.fasterxml.jackson.core.JsonFactory.Feature.Feature(boolean)
  id: Feature(boolean)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.JsonFactory.Feature
  langs:
  - java
  name: Feature(boolean defaultState)
  nameWithType: JsonFactory.Feature.Feature(boolean defaultState)
  fullName: com.fasterxml.jackson.core.JsonFactory.Feature.Feature(boolean defaultState)
  overload: com.fasterxml.jackson.core.JsonFactory.Feature.Feature*
  type: Constructor
  package: com.fasterxml.jackson.core
  syntax:
    content: private Feature(boolean defaultState)
    parameters:
    - id: defaultState
      type: boolean
- uid: com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES
  id: INTERN_FIELD_NAMES
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.JsonFactory.Feature
  langs:
  - java
  name: INTERN_FIELD_NAMES
  nameWithType: JsonFactory.Feature.INTERN_FIELD_NAMES
  fullName: com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES
  type: Field
  package: com.fasterxml.jackson.core
  summary: >-
    Feature that determines whether JSON object field names are to be canonicalized using <xref uid="java.lang.String.intern" data-throw-if-not-resolved="false">String#intern</xref> or not: if enabled, all field names will be intern()ed (and caller can count on this being true for all such names); if disabled, no intern()ing is done. There may still be basic canonicalization (that is, same String will be used to represent all identical object property names for a single document).


    Note: this setting only has effect if <xref uid="com.fasterxml.jackson.core.JsonFactory.Feature.CANONICALIZE_FIELD_NAMES" data-throw-if-not-resolved="false">#CANONICALIZE_FIELD_NAMES</xref> is true -- otherwise no canonicalization of any sort is done.


    This setting is enabled by default.
  syntax:
    content: public static final JsonFactory.Feature INTERN_FIELD_NAMES
    return:
      type: com.fasterxml.jackson.core.JsonFactory.Feature
- uid: com.fasterxml.jackson.core.JsonFactory.Feature.USE_THREAD_LOCAL_FOR_BUFFER_RECYCLING
  id: USE_THREAD_LOCAL_FOR_BUFFER_RECYCLING
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.JsonFactory.Feature
  langs:
  - java
  name: USE_THREAD_LOCAL_FOR_BUFFER_RECYCLING
  nameWithType: JsonFactory.Feature.USE_THREAD_LOCAL_FOR_BUFFER_RECYCLING
  fullName: com.fasterxml.jackson.core.JsonFactory.Feature.USE_THREAD_LOCAL_FOR_BUFFER_RECYCLING
  type: Field
  package: com.fasterxml.jackson.core
  summary: >-
    Feature that determines whether we will use <xref uid="com.fasterxml.jackson.core.util.BufferRecycler" data-throw-if-not-resolved="false">BufferRecycler</xref> with <xref uid="java.lang.ThreadLocal" data-throw-if-not-resolved="false">ThreadLocal</xref> and <xref uid="java.lang.ref.SoftReference" data-throw-if-not-resolved="false">SoftReference</xref>, for efficient reuse of underlying input/output buffers. This usually makes sense on normal J2SE/J2EE server-side processing; but may not make sense on platforms where <xref uid="java.lang.ref.SoftReference" data-throw-if-not-resolved="false">SoftReference</xref> handling is broken (like Android), or if there are retention issues due to <xref uid="java.lang.ThreadLocal" data-throw-if-not-resolved="false">ThreadLocal</xref> (see [Issue \#189][Issue _189] for a possible case)


    This setting is enabled by default.



    [Issue _189]: https://github.com/FasterXML/jackson-core/issues/189
  syntax:
    content: public static final JsonFactory.Feature USE_THREAD_LOCAL_FOR_BUFFER_RECYCLING
    return:
      type: com.fasterxml.jackson.core.JsonFactory.Feature
- uid: com.fasterxml.jackson.core.JsonFactory.Feature.collectDefaults()
  id: collectDefaults()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.JsonFactory.Feature
  langs:
  - java
  name: collectDefaults()
  nameWithType: JsonFactory.Feature.collectDefaults()
  fullName: com.fasterxml.jackson.core.JsonFactory.Feature.collectDefaults()
  overload: com.fasterxml.jackson.core.JsonFactory.Feature.collectDefaults*
  type: Method
  package: com.fasterxml.jackson.core
  summary: Method that calculates bit set (flags) of all features that are enabled by default.
  syntax:
    content: public static int collectDefaults()
    return:
      type: int
- uid: com.fasterxml.jackson.core.JsonFactory.Feature.enabledByDefault()
  id: enabledByDefault()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.JsonFactory.Feature
  langs:
  - java
  name: enabledByDefault()
  nameWithType: JsonFactory.Feature.enabledByDefault()
  fullName: com.fasterxml.jackson.core.JsonFactory.Feature.enabledByDefault()
  overload: com.fasterxml.jackson.core.JsonFactory.Feature.enabledByDefault*
  type: Method
  package: com.fasterxml.jackson.core
  syntax:
    content: public boolean enabledByDefault()
    return:
      type: boolean
- uid: com.fasterxml.jackson.core.JsonFactory.Feature.enabledIn(int)
  id: enabledIn(int)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.JsonFactory.Feature
  langs:
  - java
  name: enabledIn(int flags)
  nameWithType: JsonFactory.Feature.enabledIn(int flags)
  fullName: com.fasterxml.jackson.core.JsonFactory.Feature.enabledIn(int flags)
  overload: com.fasterxml.jackson.core.JsonFactory.Feature.enabledIn*
  type: Method
  package: com.fasterxml.jackson.core
  syntax:
    content: public boolean enabledIn(int flags)
    parameters:
    - id: flags
      type: int
    return:
      type: boolean
- uid: com.fasterxml.jackson.core.JsonFactory.Feature.getMask()
  id: getMask()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.JsonFactory.Feature
  langs:
  - java
  name: getMask()
  nameWithType: JsonFactory.Feature.getMask()
  fullName: com.fasterxml.jackson.core.JsonFactory.Feature.getMask()
  overload: com.fasterxml.jackson.core.JsonFactory.Feature.getMask*
  type: Method
  package: com.fasterxml.jackson.core
  syntax:
    content: public int getMask()
    return:
      type: int
- uid: com.fasterxml.jackson.core.JsonFactory.Feature.valueOf(java.lang.String)
  id: valueOf(java.lang.String)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.JsonFactory.Feature
  langs:
  - java
  name: valueOf(String name)
  nameWithType: JsonFactory.Feature.valueOf(String name)
  fullName: com.fasterxml.jackson.core.JsonFactory.Feature.valueOf(String name)
  overload: com.fasterxml.jackson.core.JsonFactory.Feature.valueOf*
  type: Method
  package: com.fasterxml.jackson.core
  syntax:
    content: public static JsonFactory.Feature valueOf(String name)
    parameters:
    - id: name
      type: java.lang.String
    return:
      type: com.fasterxml.jackson.core.JsonFactory.Feature
- uid: com.fasterxml.jackson.core.JsonFactory.Feature.values()
  id: values()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.JsonFactory.Feature
  langs:
  - java
  name: values()
  nameWithType: JsonFactory.Feature.values()
  fullName: com.fasterxml.jackson.core.JsonFactory.Feature.values()
  overload: com.fasterxml.jackson.core.JsonFactory.Feature.values*
  type: Method
  package: com.fasterxml.jackson.core
  syntax:
    content: public static JsonFactory.Feature[] values()
    return:
      type: com.fasterxml.jackson.core.JsonFactory.Feature[]
references:
- uid: boolean
  spec.java:
  - uid: boolean
    name: boolean
    fullName: boolean
- uid: com.fasterxml.jackson.core.JsonFactory.Feature.Feature*
  name: Feature
  nameWithType: JsonFactory.Feature.Feature
  fullName: com.fasterxml.jackson.core.JsonFactory.Feature.Feature
  package: com.fasterxml.jackson.core
- uid: com.fasterxml.jackson.core.JsonFactory.Feature[]
  spec.java:
  - uid: com.fasterxml.jackson.core.JsonFactory.Feature
    name: Feature
    fullName: com.fasterxml.jackson.core.JsonFactory.Feature
  - name: '[]'
    fullName: '[]'
- uid: com.fasterxml.jackson.core.JsonFactory.Feature.values*
  name: values
  nameWithType: JsonFactory.Feature.values
  fullName: com.fasterxml.jackson.core.JsonFactory.Feature.values
  package: com.fasterxml.jackson.core
- uid: java.lang.String
  spec.java:
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
- uid: com.fasterxml.jackson.core.JsonFactory.Feature.valueOf*
  name: valueOf
  nameWithType: JsonFactory.Feature.valueOf
  fullName: com.fasterxml.jackson.core.JsonFactory.Feature.valueOf
  package: com.fasterxml.jackson.core
- uid: int
  spec.java:
  - uid: int
    name: int
    fullName: int
- uid: com.fasterxml.jackson.core.JsonFactory.Feature.collectDefaults*
  name: collectDefaults
  nameWithType: JsonFactory.Feature.collectDefaults
  fullName: com.fasterxml.jackson.core.JsonFactory.Feature.collectDefaults
  package: com.fasterxml.jackson.core
- uid: com.fasterxml.jackson.core.JsonFactory.Feature.enabledByDefault*
  name: enabledByDefault
  nameWithType: JsonFactory.Feature.enabledByDefault
  fullName: com.fasterxml.jackson.core.JsonFactory.Feature.enabledByDefault
  package: com.fasterxml.jackson.core
- uid: com.fasterxml.jackson.core.JsonFactory.Feature.enabledIn*
  name: enabledIn
  nameWithType: JsonFactory.Feature.enabledIn
  fullName: com.fasterxml.jackson.core.JsonFactory.Feature.enabledIn
  package: com.fasterxml.jackson.core
- uid: com.fasterxml.jackson.core.JsonFactory.Feature.getMask*
  name: getMask
  nameWithType: JsonFactory.Feature.getMask
  fullName: com.fasterxml.jackson.core.JsonFactory.Feature.getMask
  package: com.fasterxml.jackson.core
- uid: java.lang.Enum<com.fasterxml.jackson.core.JsonFactory.Feature>
  name: Enum<JsonFactory.Feature>
  nameWithType: Enum<JsonFactory.Feature>
  fullName: java.lang.Enum<com.fasterxml.jackson.core.JsonFactory.Feature>
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: java.lang.Enum.toString()
  name: Enum.toString()
  nameWithType: Enum.toString()
  fullName: java.lang.Enum.toString()
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: java.lang.Enum.clone()
  name: Enum.clone()
  nameWithType: Enum.clone()
  fullName: java.lang.Enum.clone()
- uid: java.lang.Enum.finalize()
  name: Enum.finalize()
  nameWithType: Enum.finalize()
  fullName: java.lang.Enum.finalize()
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: java.lang.Enum.compareTo(E)
  name: Enum.compareTo(E)
  nameWithType: Enum.compareTo(E)
  fullName: java.lang.Enum.compareTo(E)
- uid: java.lang.Enum.name()
  name: Enum.name()
  nameWithType: Enum.name()
  fullName: java.lang.Enum.name()
- uid: java.lang.Enum.<T>valueOf(java.lang.Class<T>,java.lang.String)
  name: Enum.<T>valueOf(Class<T>,String)
  nameWithType: Enum.<T>valueOf(Class<T>,String)
  fullName: java.lang.Enum.<T>valueOf(java.lang.Class<T>,java.lang.String)
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: java.lang.Enum.getDeclaringClass()
  name: Enum.getDeclaringClass()
  nameWithType: Enum.getDeclaringClass()
  fullName: java.lang.Enum.getDeclaringClass()
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.lang.Enum.ordinal()
  name: Enum.ordinal()
  nameWithType: Enum.ordinal()
  fullName: java.lang.Enum.ordinal()
- uid: java.lang.Enum.hashCode()
  name: Enum.hashCode()
  nameWithType: Enum.hashCode()
  fullName: java.lang.Enum.hashCode()
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: java.lang.Enum.equals(java.lang.Object)
  name: Enum.equals(Object)
  nameWithType: Enum.equals(Object)
  fullName: java.lang.Enum.equals(java.lang.Object)
- uid: java.lang.Enum
  name: Enum
  nameWithType: Enum
  fullName: java.lang.Enum
- uid: java.lang.Enum.
  name: Enum.
  nameWithType: Enum.
  fullName: java.lang.Enum.
- uid: T>,java.lang.String)
  name: T>,String)
  nameWithType: T>,String)
  fullName: T>,java.lang.String)
- uid: T>valueOf(java.lang.Class
  name: T>valueOf(Class
  nameWithType: T>valueOf(Class
  fullName: T>valueOf(java.lang.Class
