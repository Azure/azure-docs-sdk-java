### YamlMime:JavaMember
uid: "com.azure.cosmos.implementation.guava25.base.Splitter.split*"
fullName: "com.azure.cosmos.implementation.guava25.base.Splitter.split"
name: "split"
nameWithType: "Splitter.split"
members:
- uid: "com.azure.cosmos.implementation.guava25.base.Splitter.split(java.lang.CharSequence)"
  fullName: "com.azure.cosmos.implementation.guava25.base.Splitter.split(CharSequence sequence)"
  name: "split(CharSequence sequence)"
  nameWithType: "Splitter.split(CharSequence sequence)"
  summary: "Splits `sequence` into string components and makes them available through an <xref uid=\"java.util.Iterator\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Iterator\"></xref>, which may be lazily evaluated. If you want an eagerly computed <xref uid=\"java.util.List\" data-throw-if-not-resolved=\"false\" data-raw-source=\"List\"></xref>, use <xref uid=\"com.azure.cosmos.implementation.guava25.base.Splitter.splitToList(java.lang.CharSequence)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#splitToList(CharSequence)\"></xref>."
  parameters:
  - description: "the sequence of characters to split"
    name: "sequence"
    type: "<xref href=\"java.lang.CharSequence?alt=java.lang.CharSequence&text=CharSequence\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Iterable<String> split(CharSequence sequence)"
  returns:
    description: "an iteration over the segments split from the parameter"
    type: "<xref href=\"java.lang.Iterable?alt=java.lang.Iterable&text=Iterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />&gt;"
type: "method"
metadata: {}
package: "com.azure.cosmos.implementation.guava25.base"
artifact: com.azure:azure-cosmos:4.4.0-beta.1
