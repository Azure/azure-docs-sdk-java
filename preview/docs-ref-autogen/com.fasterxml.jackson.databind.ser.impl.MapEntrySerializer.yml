### YamlMime:ManagedReference
items:
- uid: com.fasterxml.jackson.databind.ser.impl.MapEntrySerializer
  id: MapEntrySerializer
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.impl
  children:
  - com.fasterxml.jackson.databind.ser.impl.MapEntrySerializer.MARKER_FOR_EMPTY
  - com.fasterxml.jackson.databind.ser.impl.MapEntrySerializer.MapEntrySerializer(com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.JavaType,boolean,com.fasterxml.jackson.databind.jsontype.TypeSerializer,com.fasterxml.jackson.databind.BeanProperty)
  - com.fasterxml.jackson.databind.ser.impl.MapEntrySerializer.MapEntrySerializer(com.fasterxml.jackson.databind.ser.impl.MapEntrySerializer,com.fasterxml.jackson.databind.BeanProperty,com.fasterxml.jackson.databind.jsontype.TypeSerializer,com.fasterxml.jackson.databind.JsonSerializer<?>,com.fasterxml.jackson.databind.JsonSerializer<?>)
  - com.fasterxml.jackson.databind.ser.impl.MapEntrySerializer.MapEntrySerializer(com.fasterxml.jackson.databind.ser.impl.MapEntrySerializer,com.fasterxml.jackson.databind.BeanProperty,com.fasterxml.jackson.databind.jsontype.TypeSerializer,com.fasterxml.jackson.databind.JsonSerializer<?>,com.fasterxml.jackson.databind.JsonSerializer<?>,java.lang.Object,boolean)
  - com.fasterxml.jackson.databind.ser.impl.MapEntrySerializer._dynamicValueSerializers
  - com.fasterxml.jackson.databind.ser.impl.MapEntrySerializer._entryType
  - com.fasterxml.jackson.databind.ser.impl.MapEntrySerializer._findAndAddDynamic(com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.SerializerProvider)
  - com.fasterxml.jackson.databind.ser.impl.MapEntrySerializer._findAndAddDynamic(com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap,java.lang.Class<?>,com.fasterxml.jackson.databind.SerializerProvider)
  - com.fasterxml.jackson.databind.ser.impl.MapEntrySerializer._keySerializer
  - com.fasterxml.jackson.databind.ser.impl.MapEntrySerializer._keyType
  - com.fasterxml.jackson.databind.ser.impl.MapEntrySerializer._property
  - com.fasterxml.jackson.databind.ser.impl.MapEntrySerializer._suppressNulls
  - com.fasterxml.jackson.databind.ser.impl.MapEntrySerializer._suppressableValue
  - com.fasterxml.jackson.databind.ser.impl.MapEntrySerializer._valueSerializer
  - com.fasterxml.jackson.databind.ser.impl.MapEntrySerializer._valueType
  - com.fasterxml.jackson.databind.ser.impl.MapEntrySerializer._valueTypeIsStatic
  - com.fasterxml.jackson.databind.ser.impl.MapEntrySerializer._valueTypeSerializer
  - com.fasterxml.jackson.databind.ser.impl.MapEntrySerializer._withValueTypeSerializer(com.fasterxml.jackson.databind.jsontype.TypeSerializer)
  - com.fasterxml.jackson.databind.ser.impl.MapEntrySerializer.createContextual(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.BeanProperty)
  - com.fasterxml.jackson.databind.ser.impl.MapEntrySerializer.getContentSerializer()
  - com.fasterxml.jackson.databind.ser.impl.MapEntrySerializer.getContentType()
  - com.fasterxml.jackson.databind.ser.impl.MapEntrySerializer.hasSingleElement(java.util.Map.Entry<?,?>)
  - com.fasterxml.jackson.databind.ser.impl.MapEntrySerializer.isEmpty(com.fasterxml.jackson.databind.SerializerProvider,java.util.Map.Entry<?,?>)
  - com.fasterxml.jackson.databind.ser.impl.MapEntrySerializer.serialize(java.util.Map.Entry<?,?>,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)
  - com.fasterxml.jackson.databind.ser.impl.MapEntrySerializer.serializeDynamic(java.util.Map.Entry<?,?>,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)
  - com.fasterxml.jackson.databind.ser.impl.MapEntrySerializer.serializeWithType(java.util.Map.Entry<?,?>,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.jsontype.TypeSerializer)
  - com.fasterxml.jackson.databind.ser.impl.MapEntrySerializer.withContentInclusion(java.lang.Object,boolean)
  - com.fasterxml.jackson.databind.ser.impl.MapEntrySerializer.withResolved(com.fasterxml.jackson.databind.BeanProperty,com.fasterxml.jackson.databind.JsonSerializer<?>,com.fasterxml.jackson.databind.JsonSerializer<?>,java.lang.Object,boolean)
  langs:
  - java
  name: MapEntrySerializer
  nameWithType: MapEntrySerializer
  fullName: com.fasterxml.jackson.databind.ser.impl.MapEntrySerializer
  type: Class
  package: com.fasterxml.jackson.databind.ser.impl
  syntax:
    content: public class MapEntrySerializer extends ContainerSerializer<Map.Entry<?,?>> implements ContextualSerializer
  inheritance:
  - java.lang.Object
  - com.fasterxml.jackson.databind.JsonSerializer
  - com.fasterxml.jackson.databind.ser.std.StdSerializer
  - com.fasterxml.jackson.databind.ser.ContainerSerializer
  implements:
  - com.fasterxml.jackson.databind.ser.ContextualSerializer
  inheritedMembers:
  - com.fasterxml.jackson.databind.JsonSerializer.getDelegatee()
  - com.fasterxml.jackson.databind.JsonSerializer.isEmpty(T)
  - com.fasterxml.jackson.databind.JsonSerializer.isEmpty(com.fasterxml.jackson.databind.SerializerProvider,T)
  - com.fasterxml.jackson.databind.JsonSerializer.isUnwrappingSerializer()
  - com.fasterxml.jackson.databind.JsonSerializer.properties()
  - com.fasterxml.jackson.databind.JsonSerializer.replaceDelegatee(com.fasterxml.jackson.databind.JsonSerializer<?>)
  - com.fasterxml.jackson.databind.JsonSerializer.serializeWithType(T,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.jsontype.TypeSerializer)
  - com.fasterxml.jackson.databind.JsonSerializer.unwrappingSerializer(com.fasterxml.jackson.databind.util.NameTransformer)
  - com.fasterxml.jackson.databind.JsonSerializer.usesObjectId()
  - com.fasterxml.jackson.databind.JsonSerializer.withFilterId(java.lang.Object)
  - com.fasterxml.jackson.databind.ser.ContainerSerializer._withValueTypeSerializer(com.fasterxml.jackson.databind.jsontype.TypeSerializer)
  - com.fasterxml.jackson.databind.ser.ContainerSerializer.getContentSerializer()
  - com.fasterxml.jackson.databind.ser.ContainerSerializer.getContentType()
  - com.fasterxml.jackson.databind.ser.ContainerSerializer.hasContentTypeAnnotation(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.BeanProperty)
  - com.fasterxml.jackson.databind.ser.ContainerSerializer.hasSingleElement(T)
  - com.fasterxml.jackson.databind.ser.ContainerSerializer.withValueTypeSerializer(com.fasterxml.jackson.databind.jsontype.TypeSerializer)
  - com.fasterxml.jackson.databind.ser.std.StdSerializer._neitherNull(java.lang.Object,java.lang.Object)
  - com.fasterxml.jackson.databind.ser.std.StdSerializer._nonEmpty(java.util.Collection<?>)
  - com.fasterxml.jackson.databind.ser.std.StdSerializer.acceptJsonFormatVisitor(com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper,com.fasterxml.jackson.databind.JavaType)
  - com.fasterxml.jackson.databind.ser.std.StdSerializer.createSchemaNode(java.lang.String)
  - com.fasterxml.jackson.databind.ser.std.StdSerializer.createSchemaNode(java.lang.String,boolean)
  - com.fasterxml.jackson.databind.ser.std.StdSerializer.findAnnotatedContentSerializer(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.BeanProperty)
  - com.fasterxml.jackson.databind.ser.std.StdSerializer.findContextualConvertingSerializer(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.BeanProperty,com.fasterxml.jackson.databind.JsonSerializer<?>)
  - com.fasterxml.jackson.databind.ser.std.StdSerializer.findConvertingContentSerializer(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.BeanProperty,com.fasterxml.jackson.databind.JsonSerializer<?>)
  - com.fasterxml.jackson.databind.ser.std.StdSerializer.findFormatFeature(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.BeanProperty,java.lang.Class<?>,com.fasterxml.jackson.annotation.JsonFormat.Feature)
  - com.fasterxml.jackson.databind.ser.std.StdSerializer.findFormatOverrides(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.BeanProperty,java.lang.Class<?>)
  - com.fasterxml.jackson.databind.ser.std.StdSerializer.findIncludeOverrides(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.BeanProperty,java.lang.Class<?>)
  - com.fasterxml.jackson.databind.ser.std.StdSerializer.findPropertyFilter(com.fasterxml.jackson.databind.SerializerProvider,java.lang.Object,java.lang.Object)
  - com.fasterxml.jackson.databind.ser.std.StdSerializer.getSchema(com.fasterxml.jackson.databind.SerializerProvider,java.lang.reflect.Type)
  - com.fasterxml.jackson.databind.ser.std.StdSerializer.getSchema(com.fasterxml.jackson.databind.SerializerProvider,java.lang.reflect.Type,boolean)
  - com.fasterxml.jackson.databind.ser.std.StdSerializer.handledType()
  - com.fasterxml.jackson.databind.ser.std.StdSerializer.isDefaultSerializer(com.fasterxml.jackson.databind.JsonSerializer<?>)
  - com.fasterxml.jackson.databind.ser.std.StdSerializer.serialize(T,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)
  - com.fasterxml.jackson.databind.ser.std.StdSerializer.visitArrayFormat(com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.JsonSerializer<?>,com.fasterxml.jackson.databind.JavaType)
  - com.fasterxml.jackson.databind.ser.std.StdSerializer.visitArrayFormat(com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatTypes)
  - com.fasterxml.jackson.databind.ser.std.StdSerializer.visitFloatFormat(com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.core.JsonParser.NumberType)
  - com.fasterxml.jackson.databind.ser.std.StdSerializer.visitIntFormat(com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.core.JsonParser.NumberType)
  - com.fasterxml.jackson.databind.ser.std.StdSerializer.visitIntFormat(com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.core.JsonParser.NumberType,com.fasterxml.jackson.databind.jsonFormatVisitors.JsonValueFormat)
  - com.fasterxml.jackson.databind.ser.std.StdSerializer.visitStringFormat(com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper,com.fasterxml.jackson.databind.JavaType)
  - com.fasterxml.jackson.databind.ser.std.StdSerializer.visitStringFormat(com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.jsonFormatVisitors.JsonValueFormat)
  - com.fasterxml.jackson.databind.ser.std.StdSerializer.wrapAndThrow(com.fasterxml.jackson.databind.SerializerProvider,java.lang.Throwable,java.lang.Object,int)
  - com.fasterxml.jackson.databind.ser.std.StdSerializer.wrapAndThrow(com.fasterxml.jackson.databind.SerializerProvider,java.lang.Throwable,java.lang.Object,java.lang.String)
  - java.lang.Object.clone()
  - java.lang.Object.equals(java.lang.Object)
  - java.lang.Object.finalize()
  - java.lang.Object.getClass()
  - java.lang.Object.hashCode()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.toString()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
- uid: com.fasterxml.jackson.databind.ser.impl.MapEntrySerializer.MARKER_FOR_EMPTY
  id: MARKER_FOR_EMPTY
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.impl.MapEntrySerializer
  langs:
  - java
  name: MARKER_FOR_EMPTY
  nameWithType: MapEntrySerializer.MARKER_FOR_EMPTY
  fullName: com.fasterxml.jackson.databind.ser.impl.MapEntrySerializer.MARKER_FOR_EMPTY
  type: Field
  package: com.fasterxml.jackson.databind.ser.impl
  syntax:
    content: public static final Object MARKER_FOR_EMPTY
    return:
      type: java.lang.Object
- uid: com.fasterxml.jackson.databind.ser.impl.MapEntrySerializer.MapEntrySerializer(com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.JavaType,boolean,com.fasterxml.jackson.databind.jsontype.TypeSerializer,com.fasterxml.jackson.databind.BeanProperty)
  id: MapEntrySerializer(com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.JavaType,boolean,com.fasterxml.jackson.databind.jsontype.TypeSerializer,com.fasterxml.jackson.databind.BeanProperty)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.impl.MapEntrySerializer
  langs:
  - java
  name: MapEntrySerializer(JavaType type, JavaType keyType, JavaType valueType, boolean staticTyping, TypeSerializer vts, BeanProperty property)
  nameWithType: MapEntrySerializer.MapEntrySerializer(JavaType type, JavaType keyType, JavaType valueType, boolean staticTyping, TypeSerializer vts, BeanProperty property)
  fullName: com.fasterxml.jackson.databind.ser.impl.MapEntrySerializer.MapEntrySerializer(JavaType type, JavaType keyType, JavaType valueType, boolean staticTyping, TypeSerializer vts, BeanProperty property)
  overload: com.fasterxml.jackson.databind.ser.impl.MapEntrySerializer.MapEntrySerializer*
  type: Constructor
  package: com.fasterxml.jackson.databind.ser.impl
  syntax:
    content: public MapEntrySerializer(JavaType type, JavaType keyType, JavaType valueType, boolean staticTyping, TypeSerializer vts, BeanProperty property)
    parameters:
    - id: type
      type: com.fasterxml.jackson.databind.JavaType
    - id: keyType
      type: com.fasterxml.jackson.databind.JavaType
    - id: valueType
      type: com.fasterxml.jackson.databind.JavaType
    - id: staticTyping
      type: boolean
    - id: vts
      type: com.fasterxml.jackson.databind.jsontype.TypeSerializer
    - id: property
      type: com.fasterxml.jackson.databind.BeanProperty
- uid: com.fasterxml.jackson.databind.ser.impl.MapEntrySerializer.MapEntrySerializer(com.fasterxml.jackson.databind.ser.impl.MapEntrySerializer,com.fasterxml.jackson.databind.BeanProperty,com.fasterxml.jackson.databind.jsontype.TypeSerializer,com.fasterxml.jackson.databind.JsonSerializer<?>,com.fasterxml.jackson.databind.JsonSerializer<?>)
  id: MapEntrySerializer(com.fasterxml.jackson.databind.ser.impl.MapEntrySerializer,com.fasterxml.jackson.databind.BeanProperty,com.fasterxml.jackson.databind.jsontype.TypeSerializer,com.fasterxml.jackson.databind.JsonSerializer<?>,com.fasterxml.jackson.databind.JsonSerializer<?>)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.impl.MapEntrySerializer
  langs:
  - java
  name: MapEntrySerializer(MapEntrySerializer src, BeanProperty property, TypeSerializer vts, JsonSerializer<?> keySer, JsonSerializer<?> valueSer)
  nameWithType: MapEntrySerializer.MapEntrySerializer(MapEntrySerializer src, BeanProperty property, TypeSerializer vts, JsonSerializer<?> keySer, JsonSerializer<?> valueSer)
  fullName: com.fasterxml.jackson.databind.ser.impl.MapEntrySerializer.MapEntrySerializer(MapEntrySerializer src, BeanProperty property, TypeSerializer vts, JsonSerializer<?> keySer, JsonSerializer<?> valueSer)
  overload: com.fasterxml.jackson.databind.ser.impl.MapEntrySerializer.MapEntrySerializer*
  type: Constructor
  package: com.fasterxml.jackson.databind.ser.impl
  syntax:
    content: protected MapEntrySerializer(MapEntrySerializer src, BeanProperty property, TypeSerializer vts, JsonSerializer<?> keySer, JsonSerializer<?> valueSer)
    parameters:
    - id: src
      type: com.fasterxml.jackson.databind.ser.impl.MapEntrySerializer
    - id: property
      type: com.fasterxml.jackson.databind.BeanProperty
    - id: vts
      type: com.fasterxml.jackson.databind.jsontype.TypeSerializer
    - id: keySer
      type: com.fasterxml.jackson.databind.JsonSerializer<?>
    - id: valueSer
      type: com.fasterxml.jackson.databind.JsonSerializer<?>
- uid: com.fasterxml.jackson.databind.ser.impl.MapEntrySerializer.MapEntrySerializer(com.fasterxml.jackson.databind.ser.impl.MapEntrySerializer,com.fasterxml.jackson.databind.BeanProperty,com.fasterxml.jackson.databind.jsontype.TypeSerializer,com.fasterxml.jackson.databind.JsonSerializer<?>,com.fasterxml.jackson.databind.JsonSerializer<?>,java.lang.Object,boolean)
  id: MapEntrySerializer(com.fasterxml.jackson.databind.ser.impl.MapEntrySerializer,com.fasterxml.jackson.databind.BeanProperty,com.fasterxml.jackson.databind.jsontype.TypeSerializer,com.fasterxml.jackson.databind.JsonSerializer<?>,com.fasterxml.jackson.databind.JsonSerializer<?>,java.lang.Object,boolean)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.impl.MapEntrySerializer
  langs:
  - java
  name: MapEntrySerializer(MapEntrySerializer src, BeanProperty property, TypeSerializer vts, JsonSerializer<?> keySer, JsonSerializer<?> valueSer, Object suppressableValue, boolean suppressNulls)
  nameWithType: MapEntrySerializer.MapEntrySerializer(MapEntrySerializer src, BeanProperty property, TypeSerializer vts, JsonSerializer<?> keySer, JsonSerializer<?> valueSer, Object suppressableValue, boolean suppressNulls)
  fullName: com.fasterxml.jackson.databind.ser.impl.MapEntrySerializer.MapEntrySerializer(MapEntrySerializer src, BeanProperty property, TypeSerializer vts, JsonSerializer<?> keySer, JsonSerializer<?> valueSer, Object suppressableValue, boolean suppressNulls)
  overload: com.fasterxml.jackson.databind.ser.impl.MapEntrySerializer.MapEntrySerializer*
  type: Constructor
  package: com.fasterxml.jackson.databind.ser.impl
  syntax:
    content: protected MapEntrySerializer(MapEntrySerializer src, BeanProperty property, TypeSerializer vts, JsonSerializer<?> keySer, JsonSerializer<?> valueSer, Object suppressableValue, boolean suppressNulls)
    parameters:
    - id: src
      type: com.fasterxml.jackson.databind.ser.impl.MapEntrySerializer
    - id: property
      type: com.fasterxml.jackson.databind.BeanProperty
    - id: vts
      type: com.fasterxml.jackson.databind.jsontype.TypeSerializer
    - id: keySer
      type: com.fasterxml.jackson.databind.JsonSerializer<?>
    - id: valueSer
      type: com.fasterxml.jackson.databind.JsonSerializer<?>
    - id: suppressableValue
      type: java.lang.Object
    - id: suppressNulls
      type: boolean
- uid: com.fasterxml.jackson.databind.ser.impl.MapEntrySerializer._dynamicValueSerializers
  id: _dynamicValueSerializers
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.impl.MapEntrySerializer
  langs:
  - java
  name: _dynamicValueSerializers
  nameWithType: MapEntrySerializer._dynamicValueSerializers
  fullName: com.fasterxml.jackson.databind.ser.impl.MapEntrySerializer._dynamicValueSerializers
  type: Field
  package: com.fasterxml.jackson.databind.ser.impl
  summary: If value type cannot be statically determined, mapping from runtime value types to serializers are stored in this object.
  syntax:
    content: protected PropertySerializerMap _dynamicValueSerializers
    return:
      type: com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap
- uid: com.fasterxml.jackson.databind.ser.impl.MapEntrySerializer._entryType
  id: _entryType
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.impl.MapEntrySerializer
  langs:
  - java
  name: _entryType
  nameWithType: MapEntrySerializer._entryType
  fullName: com.fasterxml.jackson.databind.ser.impl.MapEntrySerializer._entryType
  type: Field
  package: com.fasterxml.jackson.databind.ser.impl
  syntax:
    content: protected final JavaType _entryType
    return:
      type: com.fasterxml.jackson.databind.JavaType
- uid: com.fasterxml.jackson.databind.ser.impl.MapEntrySerializer._findAndAddDynamic(com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.SerializerProvider)
  id: _findAndAddDynamic(com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.SerializerProvider)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.impl.MapEntrySerializer
  langs:
  - java
  name: _findAndAddDynamic(PropertySerializerMap map, JavaType type, SerializerProvider provider)
  nameWithType: MapEntrySerializer._findAndAddDynamic(PropertySerializerMap map, JavaType type, SerializerProvider provider)
  fullName: com.fasterxml.jackson.databind.ser.impl.MapEntrySerializer._findAndAddDynamic(PropertySerializerMap map, JavaType type, SerializerProvider provider)
  overload: com.fasterxml.jackson.databind.ser.impl.MapEntrySerializer._findAndAddDynamic*
  type: Method
  package: com.fasterxml.jackson.databind.ser.impl
  syntax:
    content: protected final JsonSerializer<Object> _findAndAddDynamic(PropertySerializerMap map, JavaType type, SerializerProvider provider)
    parameters:
    - id: map
      type: com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap
    - id: type
      type: com.fasterxml.jackson.databind.JavaType
    - id: provider
      type: com.fasterxml.jackson.databind.SerializerProvider
    return:
      type: com.fasterxml.jackson.databind.JsonSerializer<java.lang.Object>
  exceptions:
  - type: com.fasterxml.jackson.databind.JsonMappingException
- uid: com.fasterxml.jackson.databind.ser.impl.MapEntrySerializer._findAndAddDynamic(com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap,java.lang.Class<?>,com.fasterxml.jackson.databind.SerializerProvider)
  id: _findAndAddDynamic(com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap,java.lang.Class<?>,com.fasterxml.jackson.databind.SerializerProvider)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.impl.MapEntrySerializer
  langs:
  - java
  name: _findAndAddDynamic(PropertySerializerMap map, Class<?> type, SerializerProvider provider)
  nameWithType: MapEntrySerializer._findAndAddDynamic(PropertySerializerMap map, Class<?> type, SerializerProvider provider)
  fullName: com.fasterxml.jackson.databind.ser.impl.MapEntrySerializer._findAndAddDynamic(PropertySerializerMap map, Class<?> type, SerializerProvider provider)
  overload: com.fasterxml.jackson.databind.ser.impl.MapEntrySerializer._findAndAddDynamic*
  type: Method
  package: com.fasterxml.jackson.databind.ser.impl
  syntax:
    content: protected final JsonSerializer<Object> _findAndAddDynamic(PropertySerializerMap map, Class<?> type, SerializerProvider provider)
    parameters:
    - id: map
      type: com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap
    - id: type
      type: java.lang.Class<?>
    - id: provider
      type: com.fasterxml.jackson.databind.SerializerProvider
    return:
      type: com.fasterxml.jackson.databind.JsonSerializer<java.lang.Object>
  exceptions:
  - type: com.fasterxml.jackson.databind.JsonMappingException
- uid: com.fasterxml.jackson.databind.ser.impl.MapEntrySerializer._keySerializer
  id: _keySerializer
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.impl.MapEntrySerializer
  langs:
  - java
  name: _keySerializer
  nameWithType: MapEntrySerializer._keySerializer
  fullName: com.fasterxml.jackson.databind.ser.impl.MapEntrySerializer._keySerializer
  type: Field
  package: com.fasterxml.jackson.databind.ser.impl
  summary: Key serializer to use, if it can be statically determined
  syntax:
    content: protected JsonSerializer<Object> _keySerializer
    return:
      type: com.fasterxml.jackson.databind.JsonSerializer<java.lang.Object>
- uid: com.fasterxml.jackson.databind.ser.impl.MapEntrySerializer._keyType
  id: _keyType
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.impl.MapEntrySerializer
  langs:
  - java
  name: _keyType
  nameWithType: MapEntrySerializer._keyType
  fullName: com.fasterxml.jackson.databind.ser.impl.MapEntrySerializer._keyType
  type: Field
  package: com.fasterxml.jackson.databind.ser.impl
  syntax:
    content: protected final JavaType _keyType
    return:
      type: com.fasterxml.jackson.databind.JavaType
- uid: com.fasterxml.jackson.databind.ser.impl.MapEntrySerializer._property
  id: _property
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.impl.MapEntrySerializer
  langs:
  - java
  name: _property
  nameWithType: MapEntrySerializer._property
  fullName: com.fasterxml.jackson.databind.ser.impl.MapEntrySerializer._property
  type: Field
  package: com.fasterxml.jackson.databind.ser.impl
  summary: Map-valued property being serialized with this instance
  syntax:
    content: protected final BeanProperty _property
    return:
      type: com.fasterxml.jackson.databind.BeanProperty
- uid: com.fasterxml.jackson.databind.ser.impl.MapEntrySerializer._suppressNulls
  id: _suppressNulls
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.impl.MapEntrySerializer
  langs:
  - java
  name: _suppressNulls
  nameWithType: MapEntrySerializer._suppressNulls
  fullName: com.fasterxml.jackson.databind.ser.impl.MapEntrySerializer._suppressNulls
  type: Field
  package: com.fasterxml.jackson.databind.ser.impl
  summary: Flag that indicates what to do with \`null\` values, distinct from handling of <xref uid="com.fasterxml.jackson.databind.ser.impl.MapEntrySerializer._suppressableValue" data-throw-if-not-resolved="false">#_suppressableValue</xref>
  syntax:
    content: protected final boolean _suppressNulls
    return:
      type: boolean
- uid: com.fasterxml.jackson.databind.ser.impl.MapEntrySerializer._suppressableValue
  id: _suppressableValue
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.impl.MapEntrySerializer
  langs:
  - java
  name: _suppressableValue
  nameWithType: MapEntrySerializer._suppressableValue
  fullName: com.fasterxml.jackson.databind.ser.impl.MapEntrySerializer._suppressableValue
  type: Field
  package: com.fasterxml.jackson.databind.ser.impl
  summary: Value that indicates suppression mechanism to use for **values contained**; either "filter" (of which `equals()` is called), or marker value of <xref uid="com.fasterxml.jackson.databind.ser.impl.MapEntrySerializer.MARKER_FOR_EMPTY" data-throw-if-not-resolved="false">#MARKER_FOR_EMPTY</xref>, or null to indicate no filtering for non-null values. Note that inclusion value for Map instance itself is handled by caller (POJO property that refers to the Map value).
  syntax:
    content: protected final Object _suppressableValue
    return:
      type: java.lang.Object
- uid: com.fasterxml.jackson.databind.ser.impl.MapEntrySerializer._valueSerializer
  id: _valueSerializer
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.impl.MapEntrySerializer
  langs:
  - java
  name: _valueSerializer
  nameWithType: MapEntrySerializer._valueSerializer
  fullName: com.fasterxml.jackson.databind.ser.impl.MapEntrySerializer._valueSerializer
  type: Field
  package: com.fasterxml.jackson.databind.ser.impl
  summary: Value serializer to use, if it can be statically determined
  syntax:
    content: protected JsonSerializer<Object> _valueSerializer
    return:
      type: com.fasterxml.jackson.databind.JsonSerializer<java.lang.Object>
- uid: com.fasterxml.jackson.databind.ser.impl.MapEntrySerializer._valueType
  id: _valueType
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.impl.MapEntrySerializer
  langs:
  - java
  name: _valueType
  nameWithType: MapEntrySerializer._valueType
  fullName: com.fasterxml.jackson.databind.ser.impl.MapEntrySerializer._valueType
  type: Field
  package: com.fasterxml.jackson.databind.ser.impl
  syntax:
    content: protected final JavaType _valueType
    return:
      type: com.fasterxml.jackson.databind.JavaType
- uid: com.fasterxml.jackson.databind.ser.impl.MapEntrySerializer._valueTypeIsStatic
  id: _valueTypeIsStatic
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.impl.MapEntrySerializer
  langs:
  - java
  name: _valueTypeIsStatic
  nameWithType: MapEntrySerializer._valueTypeIsStatic
  fullName: com.fasterxml.jackson.databind.ser.impl.MapEntrySerializer._valueTypeIsStatic
  type: Field
  package: com.fasterxml.jackson.databind.ser.impl
  summary: Whether static types should be used for serialization of values or not (if not, dynamic runtime type is used)
  syntax:
    content: protected final boolean _valueTypeIsStatic
    return:
      type: boolean
- uid: com.fasterxml.jackson.databind.ser.impl.MapEntrySerializer._valueTypeSerializer
  id: _valueTypeSerializer
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.impl.MapEntrySerializer
  langs:
  - java
  name: _valueTypeSerializer
  nameWithType: MapEntrySerializer._valueTypeSerializer
  fullName: com.fasterxml.jackson.databind.ser.impl.MapEntrySerializer._valueTypeSerializer
  type: Field
  package: com.fasterxml.jackson.databind.ser.impl
  summary: Type identifier serializer used for values, if any.
  syntax:
    content: protected final TypeSerializer _valueTypeSerializer
    return:
      type: com.fasterxml.jackson.databind.jsontype.TypeSerializer
- uid: com.fasterxml.jackson.databind.ser.impl.MapEntrySerializer._withValueTypeSerializer(com.fasterxml.jackson.databind.jsontype.TypeSerializer)
  id: _withValueTypeSerializer(com.fasterxml.jackson.databind.jsontype.TypeSerializer)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.impl.MapEntrySerializer
  langs:
  - java
  name: _withValueTypeSerializer(TypeSerializer vts)
  nameWithType: MapEntrySerializer._withValueTypeSerializer(TypeSerializer vts)
  fullName: com.fasterxml.jackson.databind.ser.impl.MapEntrySerializer._withValueTypeSerializer(TypeSerializer vts)
  overload: com.fasterxml.jackson.databind.ser.impl.MapEntrySerializer._withValueTypeSerializer*
  type: Method
  package: com.fasterxml.jackson.databind.ser.impl
  summary: Method that needs to be implemented to allow construction of a new serializer object with given <xref uid="com.fasterxml.jackson.databind.jsontype.TypeSerializer" data-throw-if-not-resolved="false">TypeSerializer</xref>, used when addition type information is to be embedded.
  syntax:
    content: public ContainerSerializer<?> _withValueTypeSerializer(TypeSerializer vts)
    parameters:
    - id: vts
      type: com.fasterxml.jackson.databind.jsontype.TypeSerializer
    return:
      type: com.fasterxml.jackson.databind.ser.ContainerSerializer<?>
- uid: com.fasterxml.jackson.databind.ser.impl.MapEntrySerializer.createContextual(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.BeanProperty)
  id: createContextual(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.BeanProperty)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.impl.MapEntrySerializer
  langs:
  - java
  name: createContextual(SerializerProvider provider, BeanProperty property)
  nameWithType: MapEntrySerializer.createContextual(SerializerProvider provider, BeanProperty property)
  fullName: com.fasterxml.jackson.databind.ser.impl.MapEntrySerializer.createContextual(SerializerProvider provider, BeanProperty property)
  overload: com.fasterxml.jackson.databind.ser.impl.MapEntrySerializer.createContextual*
  type: Method
  package: com.fasterxml.jackson.databind.ser.impl
  summary: Method called to see if a different (or differently configured) serializer is needed to serialize values of specified property. Note that instance that this method is called on is typically shared one and as a result method should **NOT** modify this instance but rather construct and return a new instance. This instance should only be returned as-is, in case it is already suitable for use.
  syntax:
    content: public JsonSerializer<?> createContextual(SerializerProvider provider, BeanProperty property)
    parameters:
    - id: provider
      type: com.fasterxml.jackson.databind.SerializerProvider
    - id: property
      type: com.fasterxml.jackson.databind.BeanProperty
    return:
      type: com.fasterxml.jackson.databind.JsonSerializer<?>
  exceptions:
  - type: com.fasterxml.jackson.databind.JsonMappingException
- uid: com.fasterxml.jackson.databind.ser.impl.MapEntrySerializer.getContentSerializer()
  id: getContentSerializer()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.impl.MapEntrySerializer
  langs:
  - java
  name: getContentSerializer()
  nameWithType: MapEntrySerializer.getContentSerializer()
  fullName: com.fasterxml.jackson.databind.ser.impl.MapEntrySerializer.getContentSerializer()
  overload: com.fasterxml.jackson.databind.ser.impl.MapEntrySerializer.getContentSerializer*
  type: Method
  package: com.fasterxml.jackson.databind.ser.impl
  summary: Accessor for serializer used for serializing contents (List and array elements, Map values etc) of the container for which this serializer is used, if it is known statically. Note that for dynamic types this may return null; if so, caller has to instead use <xref uid="com.fasterxml.jackson.databind.ser.impl.MapEntrySerializer.getContentType()" data-throw-if-not-resolved="false">#getContentType()</xref> and <xref uid="com.fasterxml.jackson.databind.SerializerProvider.findContentValueSerializer" data-throw-if-not-resolved="false">com.fasterxml.jackson.databind.SerializerProvider#findContentValueSerializer</xref>.
  syntax:
    content: public JsonSerializer<?> getContentSerializer()
    return:
      type: com.fasterxml.jackson.databind.JsonSerializer<?>
- uid: com.fasterxml.jackson.databind.ser.impl.MapEntrySerializer.getContentType()
  id: getContentType()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.impl.MapEntrySerializer
  langs:
  - java
  name: getContentType()
  nameWithType: MapEntrySerializer.getContentType()
  fullName: com.fasterxml.jackson.databind.ser.impl.MapEntrySerializer.getContentType()
  overload: com.fasterxml.jackson.databind.ser.impl.MapEntrySerializer.getContentType*
  type: Method
  package: com.fasterxml.jackson.databind.ser.impl
  summary: Accessor for finding declared (static) element type for type this serializer is used for.
  syntax:
    content: public JavaType getContentType()
    return:
      type: com.fasterxml.jackson.databind.JavaType
- uid: com.fasterxml.jackson.databind.ser.impl.MapEntrySerializer.hasSingleElement(java.util.Map.Entry<?,?>)
  id: hasSingleElement(java.util.Map.Entry<?,?>)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.impl.MapEntrySerializer
  langs:
  - java
  name: hasSingleElement(Map.Entry<?,?> value)
  nameWithType: MapEntrySerializer.hasSingleElement(Map.Entry<?,?> value)
  fullName: com.fasterxml.jackson.databind.ser.impl.MapEntrySerializer.hasSingleElement(Map.Entry<?,?> value)
  overload: com.fasterxml.jackson.databind.ser.impl.MapEntrySerializer.hasSingleElement*
  type: Method
  package: com.fasterxml.jackson.databind.ser.impl
  summary: >-
    Method called to determine if the given value (of type handled by this serializer) contains exactly one element.


    Note: although it might seem sensible to instead define something like "getElementCount()" method, this would not work well for containers that do not keep track of size (like linked lists may not).


    Note, too, that as of now (2.9) this method is only called by serializer itself; and specifically is not used for non-array/collection types like `Map` or `Map.Entry` instances.
  syntax:
    content: public boolean hasSingleElement(Map.Entry<?,?> value)
    parameters:
    - id: value
      type: java.util.Map.Entry<?,?>
    return:
      type: boolean
- uid: com.fasterxml.jackson.databind.ser.impl.MapEntrySerializer.isEmpty(com.fasterxml.jackson.databind.SerializerProvider,java.util.Map.Entry<?,?>)
  id: isEmpty(com.fasterxml.jackson.databind.SerializerProvider,java.util.Map.Entry<?,?>)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.impl.MapEntrySerializer
  langs:
  - java
  name: isEmpty(SerializerProvider prov, Map.Entry<?,?> entry)
  nameWithType: MapEntrySerializer.isEmpty(SerializerProvider prov, Map.Entry<?,?> entry)
  fullName: com.fasterxml.jackson.databind.ser.impl.MapEntrySerializer.isEmpty(SerializerProvider prov, Map.Entry<?,?> entry)
  overload: com.fasterxml.jackson.databind.ser.impl.MapEntrySerializer.isEmpty*
  type: Method
  package: com.fasterxml.jackson.databind.ser.impl
  summary: >-
    Method called to check whether given serializable value is considered "empty" value (for purposes of suppressing serialization of empty values).


    Default implementation will consider only null values to be empty.


    NOTE: replaces <xref uid="com.fasterxml.jackson.databind.ser.impl.MapEntrySerializer.isEmpty*" data-throw-if-not-resolved="false">#isEmpty(Object)</xref>, which was deprecated in 2.5
  syntax:
    content: public boolean isEmpty(SerializerProvider prov, Map.Entry<?,?> entry)
    parameters:
    - id: prov
      type: com.fasterxml.jackson.databind.SerializerProvider
    - id: entry
      type: java.util.Map.Entry<?,?>
    return:
      type: boolean
- uid: com.fasterxml.jackson.databind.ser.impl.MapEntrySerializer.serialize(java.util.Map.Entry<?,?>,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)
  id: serialize(java.util.Map.Entry<?,?>,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.impl.MapEntrySerializer
  langs:
  - java
  name: serialize(Map.Entry<?,?> value, JsonGenerator gen, SerializerProvider provider)
  nameWithType: MapEntrySerializer.serialize(Map.Entry<?,?> value, JsonGenerator gen, SerializerProvider provider)
  fullName: com.fasterxml.jackson.databind.ser.impl.MapEntrySerializer.serialize(Map.Entry<?,?> value, JsonGenerator gen, SerializerProvider provider)
  overload: com.fasterxml.jackson.databind.ser.impl.MapEntrySerializer.serialize*
  type: Method
  package: com.fasterxml.jackson.databind.ser.impl
  summary: Method that can be called to ask implementation to serialize values of type this serializer handles.
  syntax:
    content: public void serialize(Map.Entry<?,?> value, JsonGenerator gen, SerializerProvider provider)
    parameters:
    - id: value
      type: java.util.Map.Entry<?,?>
    - id: gen
      type: com.fasterxml.jackson.core.JsonGenerator
    - id: provider
      type: com.fasterxml.jackson.databind.SerializerProvider
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.databind.ser.impl.MapEntrySerializer.serializeDynamic(java.util.Map.Entry<?,?>,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)
  id: serializeDynamic(java.util.Map.Entry<?,?>,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.impl.MapEntrySerializer
  langs:
  - java
  name: serializeDynamic(Map.Entry<?,?> value, JsonGenerator gen, SerializerProvider provider)
  nameWithType: MapEntrySerializer.serializeDynamic(Map.Entry<?,?> value, JsonGenerator gen, SerializerProvider provider)
  fullName: com.fasterxml.jackson.databind.ser.impl.MapEntrySerializer.serializeDynamic(Map.Entry<?,?> value, JsonGenerator gen, SerializerProvider provider)
  overload: com.fasterxml.jackson.databind.ser.impl.MapEntrySerializer.serializeDynamic*
  type: Method
  package: com.fasterxml.jackson.databind.ser.impl
  syntax:
    content: protected void serializeDynamic(Map.Entry<?,?> value, JsonGenerator gen, SerializerProvider provider)
    parameters:
    - id: value
      type: java.util.Map.Entry<?,?>
    - id: gen
      type: com.fasterxml.jackson.core.JsonGenerator
    - id: provider
      type: com.fasterxml.jackson.databind.SerializerProvider
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.databind.ser.impl.MapEntrySerializer.serializeWithType(java.util.Map.Entry<?,?>,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.jsontype.TypeSerializer)
  id: serializeWithType(java.util.Map.Entry<?,?>,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.jsontype.TypeSerializer)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.impl.MapEntrySerializer
  langs:
  - java
  name: serializeWithType(Map.Entry<?,?> value, JsonGenerator g, SerializerProvider provider, TypeSerializer typeSer)
  nameWithType: MapEntrySerializer.serializeWithType(Map.Entry<?,?> value, JsonGenerator g, SerializerProvider provider, TypeSerializer typeSer)
  fullName: com.fasterxml.jackson.databind.ser.impl.MapEntrySerializer.serializeWithType(Map.Entry<?,?> value, JsonGenerator g, SerializerProvider provider, TypeSerializer typeSer)
  overload: com.fasterxml.jackson.databind.ser.impl.MapEntrySerializer.serializeWithType*
  type: Method
  package: com.fasterxml.jackson.databind.ser.impl
  summary: >-
    Method that can be called to ask implementation to serialize values of type this serializer handles, using specified type serializer for embedding necessary type information.


    Default implementation will throw <xref uid="" data-throw-if-not-resolved="false">UnsupportedOperationException</xref> to indicate that proper type handling needs to be implemented.


    For simple datatypes written as a single scalar value (JSON String, Number, Boolean), implementation would look like:


    ```java

    // note: method to call depends on whether this type is serialized as JSON scalar, object or Array!
      typeSer.writeTypePrefixForScalar(value, gen);
      serialize(value, gen, provider);
      typeSer.writeTypeSuffixForScalar(value, gen);
    ```


    and implementations for type serialized as JSON Arrays or Objects would differ slightly, as `START-ARRAY`/`END-ARRAY` and `START-OBJECT`/`END-OBJECT` pairs need to be properly handled with respect to serializing of contents.
  syntax:
    content: public void serializeWithType(Map.Entry<?,?> value, JsonGenerator g, SerializerProvider provider, TypeSerializer typeSer)
    parameters:
    - id: value
      type: java.util.Map.Entry<?,?>
    - id: g
      type: com.fasterxml.jackson.core.JsonGenerator
    - id: provider
      type: com.fasterxml.jackson.databind.SerializerProvider
    - id: typeSer
      type: com.fasterxml.jackson.databind.jsontype.TypeSerializer
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.databind.ser.impl.MapEntrySerializer.withContentInclusion(java.lang.Object,boolean)
  id: withContentInclusion(java.lang.Object,boolean)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.impl.MapEntrySerializer
  langs:
  - java
  name: withContentInclusion(Object suppressableValue, boolean suppressNulls)
  nameWithType: MapEntrySerializer.withContentInclusion(Object suppressableValue, boolean suppressNulls)
  fullName: com.fasterxml.jackson.databind.ser.impl.MapEntrySerializer.withContentInclusion(Object suppressableValue, boolean suppressNulls)
  overload: com.fasterxml.jackson.databind.ser.impl.MapEntrySerializer.withContentInclusion*
  type: Method
  package: com.fasterxml.jackson.databind.ser.impl
  syntax:
    content: public MapEntrySerializer withContentInclusion(Object suppressableValue, boolean suppressNulls)
    parameters:
    - id: suppressableValue
      type: java.lang.Object
    - id: suppressNulls
      type: boolean
    return:
      type: com.fasterxml.jackson.databind.ser.impl.MapEntrySerializer
- uid: com.fasterxml.jackson.databind.ser.impl.MapEntrySerializer.withResolved(com.fasterxml.jackson.databind.BeanProperty,com.fasterxml.jackson.databind.JsonSerializer<?>,com.fasterxml.jackson.databind.JsonSerializer<?>,java.lang.Object,boolean)
  id: withResolved(com.fasterxml.jackson.databind.BeanProperty,com.fasterxml.jackson.databind.JsonSerializer<?>,com.fasterxml.jackson.databind.JsonSerializer<?>,java.lang.Object,boolean)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.impl.MapEntrySerializer
  langs:
  - java
  name: withResolved(BeanProperty property, JsonSerializer<?> keySerializer, JsonSerializer<?> valueSerializer, Object suppressableValue, boolean suppressNulls)
  nameWithType: MapEntrySerializer.withResolved(BeanProperty property, JsonSerializer<?> keySerializer, JsonSerializer<?> valueSerializer, Object suppressableValue, boolean suppressNulls)
  fullName: com.fasterxml.jackson.databind.ser.impl.MapEntrySerializer.withResolved(BeanProperty property, JsonSerializer<?> keySerializer, JsonSerializer<?> valueSerializer, Object suppressableValue, boolean suppressNulls)
  overload: com.fasterxml.jackson.databind.ser.impl.MapEntrySerializer.withResolved*
  type: Method
  package: com.fasterxml.jackson.databind.ser.impl
  syntax:
    content: public MapEntrySerializer withResolved(BeanProperty property, JsonSerializer<?> keySerializer, JsonSerializer<?> valueSerializer, Object suppressableValue, boolean suppressNulls)
    parameters:
    - id: property
      type: com.fasterxml.jackson.databind.BeanProperty
    - id: keySerializer
      type: com.fasterxml.jackson.databind.JsonSerializer<?>
    - id: valueSerializer
      type: com.fasterxml.jackson.databind.JsonSerializer<?>
    - id: suppressableValue
      type: java.lang.Object
    - id: suppressNulls
      type: boolean
    return:
      type: com.fasterxml.jackson.databind.ser.impl.MapEntrySerializer
references:
- uid: com.fasterxml.jackson.databind.JavaType
  name: JavaType
  nameWithType: JavaType
  fullName: com.fasterxml.jackson.databind.JavaType
- uid: boolean
  spec.java:
  - uid: boolean
    name: boolean
    fullName: boolean
- uid: com.fasterxml.jackson.databind.jsontype.TypeSerializer
  name: TypeSerializer
  nameWithType: TypeSerializer
  fullName: com.fasterxml.jackson.databind.jsontype.TypeSerializer
- uid: com.fasterxml.jackson.databind.BeanProperty
  name: BeanProperty
  nameWithType: BeanProperty
  fullName: com.fasterxml.jackson.databind.BeanProperty
- uid: com.fasterxml.jackson.databind.ser.impl.MapEntrySerializer.MapEntrySerializer*
  name: MapEntrySerializer
  nameWithType: MapEntrySerializer.MapEntrySerializer
  fullName: com.fasterxml.jackson.databind.ser.impl.MapEntrySerializer.MapEntrySerializer
  package: com.fasterxml.jackson.databind.ser.impl
- uid: com.fasterxml.jackson.databind.JsonSerializer<?>
  spec.java:
  - uid: com.fasterxml.jackson.databind.JsonSerializer
    name: JsonSerializer
    fullName: com.fasterxml.jackson.databind.JsonSerializer
  - name: <
    fullName: <
  - uid: '?'
    name: '?'
    fullName: '?'
  - name: '>'
    fullName: '>'
- uid: java.lang.Object
  spec.java:
  - uid: java.lang.Object
    name: Object
    fullName: java.lang.Object
- uid: com.fasterxml.jackson.databind.ser.ContainerSerializer<?>
  spec.java:
  - uid: com.fasterxml.jackson.databind.ser.ContainerSerializer
    name: ContainerSerializer
    fullName: com.fasterxml.jackson.databind.ser.ContainerSerializer
  - name: <
    fullName: <
  - uid: '?'
    name: '?'
    fullName: '?'
  - name: '>'
    fullName: '>'
- uid: com.fasterxml.jackson.databind.ser.impl.MapEntrySerializer._withValueTypeSerializer*
  name: _withValueTypeSerializer
  nameWithType: MapEntrySerializer._withValueTypeSerializer
  fullName: com.fasterxml.jackson.databind.ser.impl.MapEntrySerializer._withValueTypeSerializer
  package: com.fasterxml.jackson.databind.ser.impl
- uid: com.fasterxml.jackson.databind.ser.impl.MapEntrySerializer.withResolved*
  name: withResolved
  nameWithType: MapEntrySerializer.withResolved
  fullName: com.fasterxml.jackson.databind.ser.impl.MapEntrySerializer.withResolved
  package: com.fasterxml.jackson.databind.ser.impl
- uid: com.fasterxml.jackson.databind.ser.impl.MapEntrySerializer.withContentInclusion*
  name: withContentInclusion
  nameWithType: MapEntrySerializer.withContentInclusion
  fullName: com.fasterxml.jackson.databind.ser.impl.MapEntrySerializer.withContentInclusion
  package: com.fasterxml.jackson.databind.ser.impl
- uid: com.fasterxml.jackson.databind.JsonMappingException
  name: JsonMappingException
  nameWithType: JsonMappingException
  fullName: com.fasterxml.jackson.databind.JsonMappingException
- uid: com.fasterxml.jackson.databind.SerializerProvider
  name: SerializerProvider
  nameWithType: SerializerProvider
  fullName: com.fasterxml.jackson.databind.SerializerProvider
- uid: com.fasterxml.jackson.databind.ser.impl.MapEntrySerializer.createContextual*
  name: createContextual
  nameWithType: MapEntrySerializer.createContextual
  fullName: com.fasterxml.jackson.databind.ser.impl.MapEntrySerializer.createContextual
  package: com.fasterxml.jackson.databind.ser.impl
- uid: com.fasterxml.jackson.databind.ser.impl.MapEntrySerializer.getContentType*
  name: getContentType
  nameWithType: MapEntrySerializer.getContentType
  fullName: com.fasterxml.jackson.databind.ser.impl.MapEntrySerializer.getContentType
  package: com.fasterxml.jackson.databind.ser.impl
- uid: com.fasterxml.jackson.databind.ser.impl.MapEntrySerializer.getContentSerializer*
  name: getContentSerializer
  nameWithType: MapEntrySerializer.getContentSerializer
  fullName: com.fasterxml.jackson.databind.ser.impl.MapEntrySerializer.getContentSerializer
  package: com.fasterxml.jackson.databind.ser.impl
- uid: java.util.Map.Entry<?,?>
  spec.java:
  - uid: java.util.Map.Entry
    name: Entry
    fullName: java.util.Map.Entry
  - name: <
    fullName: <
  - uid: '?'
    name: '?'
    fullName: '?'
  - name: ','
    fullName: ','
  - uid: '?'
    name: '?'
    fullName: '?'
  - name: '>'
    fullName: '>'
- uid: com.fasterxml.jackson.databind.ser.impl.MapEntrySerializer.hasSingleElement*
  name: hasSingleElement
  nameWithType: MapEntrySerializer.hasSingleElement
  fullName: com.fasterxml.jackson.databind.ser.impl.MapEntrySerializer.hasSingleElement
  package: com.fasterxml.jackson.databind.ser.impl
- uid: com.fasterxml.jackson.databind.ser.impl.MapEntrySerializer.isEmpty*
  name: isEmpty
  nameWithType: MapEntrySerializer.isEmpty
  fullName: com.fasterxml.jackson.databind.ser.impl.MapEntrySerializer.isEmpty
  package: com.fasterxml.jackson.databind.ser.impl
- uid: java.io.IOException
  spec.java:
  - uid: java.io.IOException
    name: IOException
    fullName: java.io.IOException
- uid: com.fasterxml.jackson.core.JsonGenerator
  name: JsonGenerator
  nameWithType: JsonGenerator
  fullName: com.fasterxml.jackson.core.JsonGenerator
- uid: com.fasterxml.jackson.databind.ser.impl.MapEntrySerializer.serialize*
  name: serialize
  nameWithType: MapEntrySerializer.serialize
  fullName: com.fasterxml.jackson.databind.ser.impl.MapEntrySerializer.serialize
  package: com.fasterxml.jackson.databind.ser.impl
- uid: com.fasterxml.jackson.databind.ser.impl.MapEntrySerializer.serializeWithType*
  name: serializeWithType
  nameWithType: MapEntrySerializer.serializeWithType
  fullName: com.fasterxml.jackson.databind.ser.impl.MapEntrySerializer.serializeWithType
  package: com.fasterxml.jackson.databind.ser.impl
- uid: com.fasterxml.jackson.databind.ser.impl.MapEntrySerializer.serializeDynamic*
  name: serializeDynamic
  nameWithType: MapEntrySerializer.serializeDynamic
  fullName: com.fasterxml.jackson.databind.ser.impl.MapEntrySerializer.serializeDynamic
  package: com.fasterxml.jackson.databind.ser.impl
- uid: com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap
  name: PropertySerializerMap
  nameWithType: PropertySerializerMap
  fullName: com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap
- uid: java.lang.Class<?>
  spec.java:
  - uid: java.lang.Class
    name: Class
    fullName: java.lang.Class
  - name: <
    fullName: <
  - uid: '?'
    name: '?'
    fullName: '?'
  - name: '>'
    fullName: '>'
- uid: com.fasterxml.jackson.databind.JsonSerializer<java.lang.Object>
  spec.java:
  - uid: com.fasterxml.jackson.databind.JsonSerializer
    name: JsonSerializer
    fullName: com.fasterxml.jackson.databind.JsonSerializer
  - name: <
    fullName: <
  - uid: java.lang.Object
    name: Object
    fullName: java.lang.Object
  - name: '>'
    fullName: '>'
- uid: com.fasterxml.jackson.databind.ser.impl.MapEntrySerializer._findAndAddDynamic*
  name: _findAndAddDynamic
  nameWithType: MapEntrySerializer._findAndAddDynamic
  fullName: com.fasterxml.jackson.databind.ser.impl.MapEntrySerializer._findAndAddDynamic
  package: com.fasterxml.jackson.databind.ser.impl
- uid: com.fasterxml.jackson.databind.ser.ContainerSerializer<java.util.Map.Entry<?,?>>
  name: ContainerSerializer<Map.Entry<?,?>>
  nameWithType: ContainerSerializer<Map.Entry<?,?>>
  fullName: com.fasterxml.jackson.databind.ser.ContainerSerializer<java.util.Map.Entry<?,?>>
- uid: com.fasterxml.jackson.databind.ser.ContextualSerializer
  name: ContextualSerializer
  nameWithType: ContextualSerializer
  fullName: com.fasterxml.jackson.databind.ser.ContextualSerializer
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: com.fasterxml.jackson.databind.ser.std.StdSerializer.findFormatFeature(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.BeanProperty,java.lang.Class<?>,com.fasterxml.jackson.annotation.JsonFormat.Feature)
  name: StdSerializer.findFormatFeature(SerializerProvider,BeanProperty,Class<?>,JsonFormat.Feature)
  nameWithType: StdSerializer.findFormatFeature(SerializerProvider,BeanProperty,Class<?>,JsonFormat.Feature)
  fullName: com.fasterxml.jackson.databind.ser.std.StdSerializer.findFormatFeature(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.BeanProperty,java.lang.Class<?>,com.fasterxml.jackson.annotation.JsonFormat.Feature)
- uid: com.fasterxml.jackson.databind.JsonSerializer.isEmpty(com.fasterxml.jackson.databind.SerializerProvider,T)
  name: JsonSerializer.isEmpty(SerializerProvider,T)
  nameWithType: JsonSerializer.isEmpty(SerializerProvider,T)
  fullName: com.fasterxml.jackson.databind.JsonSerializer.isEmpty(com.fasterxml.jackson.databind.SerializerProvider,T)
- uid: java.lang.Object.finalize()
  name: Object.finalize()
  nameWithType: Object.finalize()
  fullName: java.lang.Object.finalize()
- uid: com.fasterxml.jackson.databind.ser.std.StdSerializer.findIncludeOverrides(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.BeanProperty,java.lang.Class<?>)
  name: StdSerializer.findIncludeOverrides(SerializerProvider,BeanProperty,Class<?>)
  nameWithType: StdSerializer.findIncludeOverrides(SerializerProvider,BeanProperty,Class<?>)
  fullName: com.fasterxml.jackson.databind.ser.std.StdSerializer.findIncludeOverrides(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.BeanProperty,java.lang.Class<?>)
- uid: java.lang.Object.clone()
  name: Object.clone()
  nameWithType: Object.clone()
  fullName: java.lang.Object.clone()
- uid: com.fasterxml.jackson.databind.ser.std.StdSerializer.visitIntFormat(com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.core.JsonParser.NumberType)
  name: StdSerializer.visitIntFormat(jsonFormatVisitors.JsonFormatVisitorWrapper,JavaType,JsonParser.NumberType)
  nameWithType: StdSerializer.visitIntFormat(jsonFormatVisitors.JsonFormatVisitorWrapper,JavaType,JsonParser.NumberType)
  fullName: com.fasterxml.jackson.databind.ser.std.StdSerializer.visitIntFormat(com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.core.JsonParser.NumberType)
- uid: com.fasterxml.jackson.databind.ser.std.StdSerializer.findConvertingContentSerializer(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.BeanProperty,com.fasterxml.jackson.databind.JsonSerializer<?>)
  name: StdSerializer.findConvertingContentSerializer(SerializerProvider,BeanProperty,JsonSerializer<?>)
  nameWithType: StdSerializer.findConvertingContentSerializer(SerializerProvider,BeanProperty,JsonSerializer<?>)
  fullName: com.fasterxml.jackson.databind.ser.std.StdSerializer.findConvertingContentSerializer(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.BeanProperty,com.fasterxml.jackson.databind.JsonSerializer<?>)
- uid: com.fasterxml.jackson.databind.ser.std.StdSerializer.visitFloatFormat(com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.core.JsonParser.NumberType)
  name: StdSerializer.visitFloatFormat(jsonFormatVisitors.JsonFormatVisitorWrapper,JavaType,JsonParser.NumberType)
  nameWithType: StdSerializer.visitFloatFormat(jsonFormatVisitors.JsonFormatVisitorWrapper,JavaType,JsonParser.NumberType)
  fullName: com.fasterxml.jackson.databind.ser.std.StdSerializer.visitFloatFormat(com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.core.JsonParser.NumberType)
- uid: com.fasterxml.jackson.databind.ser.std.StdSerializer.visitStringFormat(com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper,com.fasterxml.jackson.databind.JavaType)
  name: StdSerializer.visitStringFormat(jsonFormatVisitors.JsonFormatVisitorWrapper,JavaType)
  nameWithType: StdSerializer.visitStringFormat(jsonFormatVisitors.JsonFormatVisitorWrapper,JavaType)
  fullName: com.fasterxml.jackson.databind.ser.std.StdSerializer.visitStringFormat(com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper,com.fasterxml.jackson.databind.JavaType)
- uid: com.fasterxml.jackson.databind.ser.std.StdSerializer.wrapAndThrow(com.fasterxml.jackson.databind.SerializerProvider,java.lang.Throwable,java.lang.Object,int)
  name: StdSerializer.wrapAndThrow(SerializerProvider,Throwable,Object,int)
  nameWithType: StdSerializer.wrapAndThrow(SerializerProvider,Throwable,Object,int)
  fullName: com.fasterxml.jackson.databind.ser.std.StdSerializer.wrapAndThrow(com.fasterxml.jackson.databind.SerializerProvider,java.lang.Throwable,java.lang.Object,int)
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: com.fasterxml.jackson.databind.ser.std.StdSerializer.visitStringFormat(com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.jsonFormatVisitors.JsonValueFormat)
  name: StdSerializer.visitStringFormat(jsonFormatVisitors.JsonFormatVisitorWrapper,JavaType,jsonFormatVisitors.JsonValueFormat)
  nameWithType: StdSerializer.visitStringFormat(jsonFormatVisitors.JsonFormatVisitorWrapper,JavaType,jsonFormatVisitors.JsonValueFormat)
  fullName: com.fasterxml.jackson.databind.ser.std.StdSerializer.visitStringFormat(com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.jsonFormatVisitors.JsonValueFormat)
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: com.fasterxml.jackson.databind.ser.std.StdSerializer.getSchema(com.fasterxml.jackson.databind.SerializerProvider,java.lang.reflect.Type,boolean)
  name: StdSerializer.getSchema(SerializerProvider,Type,boolean)
  nameWithType: StdSerializer.getSchema(SerializerProvider,Type,boolean)
  fullName: com.fasterxml.jackson.databind.ser.std.StdSerializer.getSchema(com.fasterxml.jackson.databind.SerializerProvider,java.lang.reflect.Type,boolean)
- uid: com.fasterxml.jackson.databind.JsonSerializer.isUnwrappingSerializer()
  name: JsonSerializer.isUnwrappingSerializer()
  nameWithType: JsonSerializer.isUnwrappingSerializer()
  fullName: com.fasterxml.jackson.databind.JsonSerializer.isUnwrappingSerializer()
- uid: com.fasterxml.jackson.databind.ser.std.StdSerializer._nonEmpty(java.util.Collection<?>)
  name: StdSerializer._nonEmpty(Collection<?>)
  nameWithType: StdSerializer._nonEmpty(Collection<?>)
  fullName: com.fasterxml.jackson.databind.ser.std.StdSerializer._nonEmpty(java.util.Collection<?>)
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: java.lang.Object.equals(java.lang.Object)
  name: Object.equals(Object)
  nameWithType: Object.equals(Object)
  fullName: java.lang.Object.equals(java.lang.Object)
- uid: com.fasterxml.jackson.databind.ser.std.StdSerializer.handledType()
  name: StdSerializer.handledType()
  nameWithType: StdSerializer.handledType()
  fullName: com.fasterxml.jackson.databind.ser.std.StdSerializer.handledType()
- uid: com.fasterxml.jackson.databind.ser.std.StdSerializer.createSchemaNode(java.lang.String,boolean)
  name: StdSerializer.createSchemaNode(String,boolean)
  nameWithType: StdSerializer.createSchemaNode(String,boolean)
  fullName: com.fasterxml.jackson.databind.ser.std.StdSerializer.createSchemaNode(java.lang.String,boolean)
- uid: com.fasterxml.jackson.databind.ser.ContainerSerializer.hasSingleElement(T)
  name: ContainerSerializer.hasSingleElement(T)
  nameWithType: ContainerSerializer.hasSingleElement(T)
  fullName: com.fasterxml.jackson.databind.ser.ContainerSerializer.hasSingleElement(T)
- uid: java.lang.Object.toString()
  name: Object.toString()
  nameWithType: Object.toString()
  fullName: java.lang.Object.toString()
- uid: com.fasterxml.jackson.databind.ser.std.StdSerializer.getSchema(com.fasterxml.jackson.databind.SerializerProvider,java.lang.reflect.Type)
  name: StdSerializer.getSchema(SerializerProvider,Type)
  nameWithType: StdSerializer.getSchema(SerializerProvider,Type)
  fullName: com.fasterxml.jackson.databind.ser.std.StdSerializer.getSchema(com.fasterxml.jackson.databind.SerializerProvider,java.lang.reflect.Type)
- uid: com.fasterxml.jackson.databind.JsonSerializer.withFilterId(java.lang.Object)
  name: JsonSerializer.withFilterId(Object)
  nameWithType: JsonSerializer.withFilterId(Object)
  fullName: com.fasterxml.jackson.databind.JsonSerializer.withFilterId(java.lang.Object)
- uid: com.fasterxml.jackson.databind.ser.std.StdSerializer.findAnnotatedContentSerializer(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.BeanProperty)
  name: StdSerializer.findAnnotatedContentSerializer(SerializerProvider,BeanProperty)
  nameWithType: StdSerializer.findAnnotatedContentSerializer(SerializerProvider,BeanProperty)
  fullName: com.fasterxml.jackson.databind.ser.std.StdSerializer.findAnnotatedContentSerializer(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.BeanProperty)
- uid: com.fasterxml.jackson.databind.ser.std.StdSerializer.findFormatOverrides(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.BeanProperty,java.lang.Class<?>)
  name: StdSerializer.findFormatOverrides(SerializerProvider,BeanProperty,Class<?>)
  nameWithType: StdSerializer.findFormatOverrides(SerializerProvider,BeanProperty,Class<?>)
  fullName: com.fasterxml.jackson.databind.ser.std.StdSerializer.findFormatOverrides(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.BeanProperty,java.lang.Class<?>)
- uid: com.fasterxml.jackson.databind.JsonSerializer.replaceDelegatee(com.fasterxml.jackson.databind.JsonSerializer<?>)
  name: JsonSerializer.replaceDelegatee(JsonSerializer<?>)
  nameWithType: JsonSerializer.replaceDelegatee(JsonSerializer<?>)
  fullName: com.fasterxml.jackson.databind.JsonSerializer.replaceDelegatee(com.fasterxml.jackson.databind.JsonSerializer<?>)
- uid: com.fasterxml.jackson.databind.ser.ContainerSerializer.getContentType()
  name: ContainerSerializer.getContentType()
  nameWithType: ContainerSerializer.getContentType()
  fullName: com.fasterxml.jackson.databind.ser.ContainerSerializer.getContentType()
- uid: com.fasterxml.jackson.databind.ser.std.StdSerializer.findContextualConvertingSerializer(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.BeanProperty,com.fasterxml.jackson.databind.JsonSerializer<?>)
  name: StdSerializer.findContextualConvertingSerializer(SerializerProvider,BeanProperty,JsonSerializer<?>)
  nameWithType: StdSerializer.findContextualConvertingSerializer(SerializerProvider,BeanProperty,JsonSerializer<?>)
  fullName: com.fasterxml.jackson.databind.ser.std.StdSerializer.findContextualConvertingSerializer(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.BeanProperty,com.fasterxml.jackson.databind.JsonSerializer<?>)
- uid: com.fasterxml.jackson.databind.ser.std.StdSerializer.wrapAndThrow(com.fasterxml.jackson.databind.SerializerProvider,java.lang.Throwable,java.lang.Object,java.lang.String)
  name: StdSerializer.wrapAndThrow(SerializerProvider,Throwable,Object,String)
  nameWithType: StdSerializer.wrapAndThrow(SerializerProvider,Throwable,Object,String)
  fullName: com.fasterxml.jackson.databind.ser.std.StdSerializer.wrapAndThrow(com.fasterxml.jackson.databind.SerializerProvider,java.lang.Throwable,java.lang.Object,java.lang.String)
- uid: com.fasterxml.jackson.databind.JsonSerializer.properties()
  name: JsonSerializer.properties()
  nameWithType: JsonSerializer.properties()
  fullName: com.fasterxml.jackson.databind.JsonSerializer.properties()
- uid: com.fasterxml.jackson.databind.JsonSerializer.serializeWithType(T,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.jsontype.TypeSerializer)
  name: JsonSerializer.serializeWithType(T,JsonGenerator,SerializerProvider,TypeSerializer)
  nameWithType: JsonSerializer.serializeWithType(T,JsonGenerator,SerializerProvider,TypeSerializer)
  fullName: com.fasterxml.jackson.databind.JsonSerializer.serializeWithType(T,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.jsontype.TypeSerializer)
- uid: com.fasterxml.jackson.databind.ser.std.StdSerializer.findPropertyFilter(com.fasterxml.jackson.databind.SerializerProvider,java.lang.Object,java.lang.Object)
  name: StdSerializer.findPropertyFilter(SerializerProvider,Object,Object)
  nameWithType: StdSerializer.findPropertyFilter(SerializerProvider,Object,Object)
  fullName: com.fasterxml.jackson.databind.ser.std.StdSerializer.findPropertyFilter(com.fasterxml.jackson.databind.SerializerProvider,java.lang.Object,java.lang.Object)
- uid: com.fasterxml.jackson.databind.ser.std.StdSerializer.serialize(T,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)
  name: StdSerializer.serialize(T,JsonGenerator,SerializerProvider)
  nameWithType: StdSerializer.serialize(T,JsonGenerator,SerializerProvider)
  fullName: com.fasterxml.jackson.databind.ser.std.StdSerializer.serialize(T,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)
- uid: com.fasterxml.jackson.databind.ser.ContainerSerializer.hasContentTypeAnnotation(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.BeanProperty)
  name: ContainerSerializer.hasContentTypeAnnotation(SerializerProvider,BeanProperty)
  nameWithType: ContainerSerializer.hasContentTypeAnnotation(SerializerProvider,BeanProperty)
  fullName: com.fasterxml.jackson.databind.ser.ContainerSerializer.hasContentTypeAnnotation(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.BeanProperty)
- uid: com.fasterxml.jackson.databind.JsonSerializer.getDelegatee()
  name: JsonSerializer.getDelegatee()
  nameWithType: JsonSerializer.getDelegatee()
  fullName: com.fasterxml.jackson.databind.JsonSerializer.getDelegatee()
- uid: com.fasterxml.jackson.databind.ser.std.StdSerializer.acceptJsonFormatVisitor(com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper,com.fasterxml.jackson.databind.JavaType)
  name: StdSerializer.acceptJsonFormatVisitor(jsonFormatVisitors.JsonFormatVisitorWrapper,JavaType)
  nameWithType: StdSerializer.acceptJsonFormatVisitor(jsonFormatVisitors.JsonFormatVisitorWrapper,JavaType)
  fullName: com.fasterxml.jackson.databind.ser.std.StdSerializer.acceptJsonFormatVisitor(com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper,com.fasterxml.jackson.databind.JavaType)
- uid: com.fasterxml.jackson.databind.JsonSerializer.unwrappingSerializer(com.fasterxml.jackson.databind.util.NameTransformer)
  name: JsonSerializer.unwrappingSerializer(NameTransformer)
  nameWithType: JsonSerializer.unwrappingSerializer(NameTransformer)
  fullName: com.fasterxml.jackson.databind.JsonSerializer.unwrappingSerializer(com.fasterxml.jackson.databind.util.NameTransformer)
- uid: java.lang.Object.hashCode()
  name: Object.hashCode()
  nameWithType: Object.hashCode()
  fullName: java.lang.Object.hashCode()
- uid: com.fasterxml.jackson.databind.ser.std.StdSerializer.visitArrayFormat(com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatTypes)
  name: StdSerializer.visitArrayFormat(jsonFormatVisitors.JsonFormatVisitorWrapper,JavaType,jsonFormatVisitors.JsonFormatTypes)
  nameWithType: StdSerializer.visitArrayFormat(jsonFormatVisitors.JsonFormatVisitorWrapper,JavaType,jsonFormatVisitors.JsonFormatTypes)
  fullName: com.fasterxml.jackson.databind.ser.std.StdSerializer.visitArrayFormat(com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatTypes)
- uid: com.fasterxml.jackson.databind.ser.std.StdSerializer.visitIntFormat(com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.core.JsonParser.NumberType,com.fasterxml.jackson.databind.jsonFormatVisitors.JsonValueFormat)
  name: StdSerializer.visitIntFormat(jsonFormatVisitors.JsonFormatVisitorWrapper,JavaType,JsonParser.NumberType,jsonFormatVisitors.JsonValueFormat)
  nameWithType: StdSerializer.visitIntFormat(jsonFormatVisitors.JsonFormatVisitorWrapper,JavaType,JsonParser.NumberType,jsonFormatVisitors.JsonValueFormat)
  fullName: com.fasterxml.jackson.databind.ser.std.StdSerializer.visitIntFormat(com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.core.JsonParser.NumberType,com.fasterxml.jackson.databind.jsonFormatVisitors.JsonValueFormat)
- uid: com.fasterxml.jackson.databind.ser.std.StdSerializer.isDefaultSerializer(com.fasterxml.jackson.databind.JsonSerializer<?>)
  name: StdSerializer.isDefaultSerializer(JsonSerializer<?>)
  nameWithType: StdSerializer.isDefaultSerializer(JsonSerializer<?>)
  fullName: com.fasterxml.jackson.databind.ser.std.StdSerializer.isDefaultSerializer(com.fasterxml.jackson.databind.JsonSerializer<?>)
- uid: com.fasterxml.jackson.databind.ser.ContainerSerializer._withValueTypeSerializer(com.fasterxml.jackson.databind.jsontype.TypeSerializer)
  name: ContainerSerializer._withValueTypeSerializer(TypeSerializer)
  nameWithType: ContainerSerializer._withValueTypeSerializer(TypeSerializer)
  fullName: com.fasterxml.jackson.databind.ser.ContainerSerializer._withValueTypeSerializer(com.fasterxml.jackson.databind.jsontype.TypeSerializer)
- uid: com.fasterxml.jackson.databind.ser.ContainerSerializer.withValueTypeSerializer(com.fasterxml.jackson.databind.jsontype.TypeSerializer)
  name: ContainerSerializer.withValueTypeSerializer(TypeSerializer)
  nameWithType: ContainerSerializer.withValueTypeSerializer(TypeSerializer)
  fullName: com.fasterxml.jackson.databind.ser.ContainerSerializer.withValueTypeSerializer(com.fasterxml.jackson.databind.jsontype.TypeSerializer)
- uid: com.fasterxml.jackson.databind.ser.std.StdSerializer.createSchemaNode(java.lang.String)
  name: StdSerializer.createSchemaNode(String)
  nameWithType: StdSerializer.createSchemaNode(String)
  fullName: com.fasterxml.jackson.databind.ser.std.StdSerializer.createSchemaNode(java.lang.String)
- uid: com.fasterxml.jackson.databind.ser.std.StdSerializer.visitArrayFormat(com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.JsonSerializer<?>,com.fasterxml.jackson.databind.JavaType)
  name: StdSerializer.visitArrayFormat(jsonFormatVisitors.JsonFormatVisitorWrapper,JavaType,JsonSerializer<?>,JavaType)
  nameWithType: StdSerializer.visitArrayFormat(jsonFormatVisitors.JsonFormatVisitorWrapper,JavaType,JsonSerializer<?>,JavaType)
  fullName: com.fasterxml.jackson.databind.ser.std.StdSerializer.visitArrayFormat(com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.JsonSerializer<?>,com.fasterxml.jackson.databind.JavaType)
- uid: com.fasterxml.jackson.databind.JsonSerializer.isEmpty(T)
  name: JsonSerializer.isEmpty(T)
  nameWithType: JsonSerializer.isEmpty(T)
  fullName: com.fasterxml.jackson.databind.JsonSerializer.isEmpty(T)
- uid: com.fasterxml.jackson.databind.JsonSerializer.usesObjectId()
  name: JsonSerializer.usesObjectId()
  nameWithType: JsonSerializer.usesObjectId()
  fullName: com.fasterxml.jackson.databind.JsonSerializer.usesObjectId()
- uid: com.fasterxml.jackson.databind.ser.ContainerSerializer.getContentSerializer()
  name: ContainerSerializer.getContentSerializer()
  nameWithType: ContainerSerializer.getContentSerializer()
  fullName: com.fasterxml.jackson.databind.ser.ContainerSerializer.getContentSerializer()
- uid: com.fasterxml.jackson.databind.ser.std.StdSerializer._neitherNull(java.lang.Object,java.lang.Object)
  name: StdSerializer._neitherNull(Object,Object)
  nameWithType: StdSerializer._neitherNull(Object,Object)
  fullName: com.fasterxml.jackson.databind.ser.std.StdSerializer._neitherNull(java.lang.Object,java.lang.Object)
- uid: com.fasterxml.jackson.databind.JsonSerializer
  name: JsonSerializer
  nameWithType: JsonSerializer
  fullName: com.fasterxml.jackson.databind.JsonSerializer
- uid: '?'
  name: '?'
  nameWithType: '?'
  fullName: '?'
- uid: com.fasterxml.jackson.databind.ser.ContainerSerializer
  name: ContainerSerializer
  nameWithType: ContainerSerializer
  fullName: com.fasterxml.jackson.databind.ser.ContainerSerializer
- uid: ?,?
  name: ?,?
  nameWithType: ?,?
  fullName: ?,?
- uid: java.util.Map.Entry
  name: Map.Entry
  nameWithType: Map.Entry
  fullName: java.util.Map.Entry
- uid: java.lang.Class
  name: Class
  nameWithType: Class
  fullName: java.lang.Class
- uid: ?>,com.fasterxml.jackson.annotation.JsonFormat.Feature)
  name: ?>,JsonFormat.Feature)
  nameWithType: ?>,JsonFormat.Feature)
  fullName: ?>,com.fasterxml.jackson.annotation.JsonFormat.Feature)
- uid: com.fasterxml.jackson.databind.ser.std.StdSerializer.findFormatFeature(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.BeanProperty,java.lang.Class
  name: StdSerializer.findFormatFeature(SerializerProvider,BeanProperty,Class
  nameWithType: StdSerializer.findFormatFeature(SerializerProvider,BeanProperty,Class
  fullName: com.fasterxml.jackson.databind.ser.std.StdSerializer.findFormatFeature(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.BeanProperty,java.lang.Class
- uid: ?>)
  name: ?>)
  nameWithType: ?>)
  fullName: ?>)
- uid: com.fasterxml.jackson.databind.ser.std.StdSerializer.findIncludeOverrides(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.BeanProperty,java.lang.Class
  name: StdSerializer.findIncludeOverrides(SerializerProvider,BeanProperty,Class
  nameWithType: StdSerializer.findIncludeOverrides(SerializerProvider,BeanProperty,Class
  fullName: com.fasterxml.jackson.databind.ser.std.StdSerializer.findIncludeOverrides(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.BeanProperty,java.lang.Class
- uid: com.fasterxml.jackson.databind.ser.std.StdSerializer.findConvertingContentSerializer(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.BeanProperty,com.fasterxml.jackson.databind.JsonSerializer
  name: StdSerializer.findConvertingContentSerializer(SerializerProvider,BeanProperty,JsonSerializer
  nameWithType: StdSerializer.findConvertingContentSerializer(SerializerProvider,BeanProperty,JsonSerializer
  fullName: com.fasterxml.jackson.databind.ser.std.StdSerializer.findConvertingContentSerializer(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.BeanProperty,com.fasterxml.jackson.databind.JsonSerializer
- uid: com.fasterxml.jackson.databind.ser.std.StdSerializer._nonEmpty(java.util.Collection
  name: StdSerializer._nonEmpty(Collection
  nameWithType: StdSerializer._nonEmpty(Collection
  fullName: com.fasterxml.jackson.databind.ser.std.StdSerializer._nonEmpty(java.util.Collection
- uid: com.fasterxml.jackson.databind.ser.std.StdSerializer.findFormatOverrides(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.BeanProperty,java.lang.Class
  name: StdSerializer.findFormatOverrides(SerializerProvider,BeanProperty,Class
  nameWithType: StdSerializer.findFormatOverrides(SerializerProvider,BeanProperty,Class
  fullName: com.fasterxml.jackson.databind.ser.std.StdSerializer.findFormatOverrides(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.BeanProperty,java.lang.Class
- uid: com.fasterxml.jackson.databind.JsonSerializer.replaceDelegatee(com.fasterxml.jackson.databind.JsonSerializer
  name: JsonSerializer.replaceDelegatee(JsonSerializer
  nameWithType: JsonSerializer.replaceDelegatee(JsonSerializer
  fullName: com.fasterxml.jackson.databind.JsonSerializer.replaceDelegatee(com.fasterxml.jackson.databind.JsonSerializer
- uid: com.fasterxml.jackson.databind.ser.std.StdSerializer.findContextualConvertingSerializer(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.BeanProperty,com.fasterxml.jackson.databind.JsonSerializer
  name: StdSerializer.findContextualConvertingSerializer(SerializerProvider,BeanProperty,JsonSerializer
  nameWithType: StdSerializer.findContextualConvertingSerializer(SerializerProvider,BeanProperty,JsonSerializer
  fullName: com.fasterxml.jackson.databind.ser.std.StdSerializer.findContextualConvertingSerializer(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.BeanProperty,com.fasterxml.jackson.databind.JsonSerializer
- uid: com.fasterxml.jackson.databind.ser.std.StdSerializer.isDefaultSerializer(com.fasterxml.jackson.databind.JsonSerializer
  name: StdSerializer.isDefaultSerializer(JsonSerializer
  nameWithType: StdSerializer.isDefaultSerializer(JsonSerializer
  fullName: com.fasterxml.jackson.databind.ser.std.StdSerializer.isDefaultSerializer(com.fasterxml.jackson.databind.JsonSerializer
- uid: com.fasterxml.jackson.databind.ser.std.StdSerializer.visitArrayFormat(com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.JsonSerializer
  name: StdSerializer.visitArrayFormat(jsonFormatVisitors.JsonFormatVisitorWrapper,JavaType,JsonSerializer
  nameWithType: StdSerializer.visitArrayFormat(jsonFormatVisitors.JsonFormatVisitorWrapper,JavaType,JsonSerializer
  fullName: com.fasterxml.jackson.databind.ser.std.StdSerializer.visitArrayFormat(com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.JsonSerializer
- uid: ?>,com.fasterxml.jackson.databind.JavaType)
  name: ?>,JavaType)
  nameWithType: ?>,JavaType)
  fullName: ?>,com.fasterxml.jackson.databind.JavaType)
