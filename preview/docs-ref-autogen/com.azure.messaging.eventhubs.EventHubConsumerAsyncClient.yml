### YamlMime:JavaType
uid: "com.azure.messaging.eventhubs.EventHubConsumerAsyncClient"
fullName: "com.azure.messaging.eventhubs.EventHubConsumerAsyncClient"
name: "EventHubConsumerAsyncClient"
nameWithType: "EventHubConsumerAsyncClient"
summary: "An **asynchronous** consumer responsible for reading <xref uid=\"com.azure.messaging.eventhubs.EventData\" data-throw-if-not-resolved=\"false\" data-raw-source=\"EventData\"></xref> from either a specific Event Hub partition or all partitions in the context of a specific consumer group.\n\n**Creating an <xref uid=\"com.azure.messaging.eventhubs.EventHubConsumerAsyncClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"EventHubConsumerAsyncClient\"></xref>**\n\n```java\n// The required parameters are `consumerGroup` and a way to authenticate with Event Hubs using credentials.\n EventHubConsumerAsyncClient consumer = new EventHubClientBuilder()\n     .connectionString(\"Endpoint={fully-qualified-namespace};SharedAccessKeyName={policy-name};\"\n         + \"SharedAccessKey={key};EntityPath={eh-name}\")\n     .consumerGroup(\"consumer-group-name\")\n     .buildAsyncConsumerClient();\n```\n\n**Consuming events a single partition from Event Hub**\n\n```java\n// Obtain partitionId from EventHubConsumerAsyncClient.getPartitionIds()\n String partitionId = \"0\";\n EventPosition startingPosition = EventPosition.latest();\n \n // Keep a reference to `subscription`. When the program is finished receiving events, call\n // subscription.dispose(). This will stop fetching events from the Event Hub.\n Disposable subscription = consumer.receiveFromPartition(partitionId, startingPosition)\n     .subscribe(partitionEvent -> {\n         PartitionContext partitionContext = partitionEvent.getPartitionContext();\n         EventData event = partitionEvent.getData();\n \n         System.out.printf(\"Received event from partition '%s'%n\", partitionContext.getPartitionId());\n         System.out.printf(\"Contents of event as string: '%s'%n\", event.getBodyAsString());\n     }, error -> System.err.print(error.toString()));\n```\n\n**Viewing latest partition information**\n\nLatest partition information as events are received can by setting <xref uid=\"com.azure.messaging.eventhubs.models.ReceiveOptions.setTrackLastEnqueuedEventProperties(boolean)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"setTrackLastEnqueuedEventProperties\"></xref> to `true`. As events come in, explore the <xref uid=\"com.azure.messaging.eventhubs.models.PartitionEvent\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PartitionEvent\"></xref> object.\n\n```java\n// Set `setTrackLastEnqueuedEventProperties` to true to get the last enqueued information from the partition for\n // each event that is received.\n ReceiveOptions receiveOptions = new ReceiveOptions()\n     .setTrackLastEnqueuedEventProperties(true);\n \n // Receives events from partition \"0\" as they come in.\n consumer.receiveFromPartition(\"0\", EventPosition.earliest(), receiveOptions)\n     .subscribe(partitionEvent -> {\n         LastEnqueuedEventProperties properties = partitionEvent.getLastEnqueuedEventProperties();\n         System.out.printf(\"Information received at %s. Last enqueued sequence number: %s%n\",\n             properties.getRetrievalTime(),\n             properties.getSequenceNumber());\n     });\n```\n\n**Rate limiting consumption of events from Event Hub**\n\nFor event consumers that need to limit the number of events they receive at a given time, they can use <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BaseSubscriber#request(long)\"></xref>.\n\n```java\nconsumer.receiveFromPartition(partitionId, EventPosition.latest()).subscribe(new BaseSubscriber<PartitionEvent>() {\n     private static final int NUMBER_OF_EVENTS = 5;\n     private final AtomicInteger currentNumberOfEvents = new AtomicInteger();\n \n     {@literal @}Override\n     protected void hookOnSubscribe(Subscription subscription) {\n         // Tell the Publisher we only want 5 events at a time.\n         request(NUMBER_OF_EVENTS);\n     }\n \n     {@literal @}Override\n     protected void hookOnNext(PartitionEvent value) {\n         // Process the EventData\n \n         // If the number of events we have currently received is a multiple of 5, that means we have reached the\n         // last event the Publisher will provide to us. Invoking request(long) here, tells the Publisher that\n         // the subscriber is ready to get more events from upstream.\n         if (currentNumberOfEvents.incrementAndGet() % 5 == 0) {\n             request(NUMBER_OF_EVENTS);\n         }\n     }\n });\n```\n\n**Receiving from all partitions**\n\n```java\n// Receives events from all partitions from the beginning of each partition.\n consumer.receive(true).subscribe(partitionEvent -> {\n     PartitionContext context = partitionEvent.getPartitionContext();\n     EventData event = partitionEvent.getData();\n     System.out.printf(\"Event %s is from partition %s%n.\", event.getSequenceNumber(), context.getPartitionId());\n });\n```"
inheritances:
- "<xref href=\"java.lang.Object\" data-throw-if-not-resolved=\"False\" />"
inheritedMembers:
- "java.lang.Object.clone()"
- "java.lang.Object.equals(java.lang.Object)"
- "java.lang.Object.finalize()"
- "java.lang.Object.getClass()"
- "java.lang.Object.hashCode()"
- "java.lang.Object.notify()"
- "java.lang.Object.notifyAll()"
- "java.lang.Object.toString()"
- "java.lang.Object.wait()"
- "java.lang.Object.wait(long)"
- "java.lang.Object.wait(long,int)"
syntax: "public class EventHubConsumerAsyncClient implements Closeable"
methods:
- "com.azure.messaging.eventhubs.EventHubConsumerAsyncClient.close()"
- "com.azure.messaging.eventhubs.EventHubConsumerAsyncClient.getConsumerGroup()"
- "com.azure.messaging.eventhubs.EventHubConsumerAsyncClient.getEventHubName()"
- "com.azure.messaging.eventhubs.EventHubConsumerAsyncClient.getEventHubProperties()"
- "com.azure.messaging.eventhubs.EventHubConsumerAsyncClient.getFullyQualifiedNamespace()"
- "com.azure.messaging.eventhubs.EventHubConsumerAsyncClient.getPartitionIds()"
- "com.azure.messaging.eventhubs.EventHubConsumerAsyncClient.getPartitionProperties(java.lang.String)"
- "com.azure.messaging.eventhubs.EventHubConsumerAsyncClient.receive()"
- "com.azure.messaging.eventhubs.EventHubConsumerAsyncClient.receive(boolean)"
- "com.azure.messaging.eventhubs.EventHubConsumerAsyncClient.receive(boolean,com.azure.messaging.eventhubs.models.ReceiveOptions)"
- "com.azure.messaging.eventhubs.EventHubConsumerAsyncClient.receiveFromPartition(java.lang.String,com.azure.messaging.eventhubs.models.EventPosition)"
- "com.azure.messaging.eventhubs.EventHubConsumerAsyncClient.receiveFromPartition(java.lang.String,com.azure.messaging.eventhubs.models.EventPosition,com.azure.messaging.eventhubs.models.ReceiveOptions)"
type: "class"
implements:
- "<xref href=\"java.io.Closeable?alt=java.io.Closeable&text=Closeable\" data-throw-if-not-resolved=\"False\" />"
metadata: {}
package: "com.azure.messaging.eventhubs"
artifact: com.azure:azure-messaging-eventhubs:5.4.0-beta.1
