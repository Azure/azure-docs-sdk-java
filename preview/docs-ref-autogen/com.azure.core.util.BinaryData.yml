### YamlMime:JavaType
uid: "com.azure.core.util.BinaryData"
fullName: "com.azure.core.util.BinaryData"
name: "BinaryData"
nameWithType: "BinaryData"
summary: "Binary<wbr>Data is a convenient data interchange class for use throughout the Azure SDK for Java."
inheritances:
- "<xref href=\"java.lang.Object?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
inheritedMembers:
- "java.lang.Object.clone()"
- "java.lang.Object.equals(java.lang.Object)"
- "java.lang.Object.finalize()"
- "java.lang.Object.getClass()"
- "java.lang.Object.hashCode()"
- "java.lang.Object.notify()"
- "java.lang.Object.notifyAll()"
- "java.lang.Object.toString()"
- "java.lang.Object.wait()"
- "java.lang.Object.wait(long)"
- "java.lang.Object.wait(long,int)"
syntax: "public final class BinaryData"
methods:
- uid: "com.azure.core.util.BinaryData.<T>toObject(com.azure.core.util.serializer.TypeReference<T>)"
  fullName: "com.azure.core.util.BinaryData.<T>toObject(TypeReference<T> typeReference)"
  name: "<T>toObject(TypeReference<T> typeReference)"
  nameWithType: "BinaryData.<T>toObject(TypeReference<T> typeReference)"
  summary: "Returns an <xref uid=\"java.lang.Object\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Object\"></xref> representation of this <xref uid=\"com.azure.core.util.BinaryData\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BinaryData\"></xref> by deserializing its data using the default <xref uid=\"com.azure.core.util.serializer.JsonSerializer\" data-throw-if-not-resolved=\"false\" data-raw-source=\"JsonSerializer\"></xref>."
  parameters:
  - description: "The <xref uid=\"com.azure.core.util.serializer.TypeReference\" data-throw-if-not-resolved=\"false\" data-raw-source=\"TypeReference\"></xref> representing the Object's type."
    name: "typeReference"
    type: "<xref href=\"com.azure.core.util.serializer.TypeReference?alt=com.azure.core.util.serializer.TypeReference&text=TypeReference\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public T <T>toObject(TypeReference<T> typeReference)"
  desc: "Returns an <xref uid=\"java.lang.Object\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Object\"></xref> representation of this <xref uid=\"com.azure.core.util.BinaryData\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BinaryData\"></xref> by deserializing its data using the default <xref uid=\"com.azure.core.util.serializer.JsonSerializer\" data-throw-if-not-resolved=\"false\" data-raw-source=\"JsonSerializer\"></xref>. Each time this method is called, the content is deserialized and a new instance of type `T` is returned. So, calling this method repeatedly to convert the underlying data source into the same type is not recommended.\n\nThe type, represented by <xref uid=\"com.azure.core.util.serializer.TypeReference\" data-throw-if-not-resolved=\"false\" data-raw-source=\"TypeReference\"></xref>, can either be a generic or non-generic type. If the type is generic create a sub-type of <xref uid=\"com.azure.core.util.serializer.TypeReference\" data-throw-if-not-resolved=\"false\" data-raw-source=\"TypeReference\"></xref>, if the type is non-generic use <xref uid=\"com.azure.core.util.serializer.TypeReference.<T>createInstance(java.lang.Class<T>)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"TypeReference#createInstance(Class)\"></xref>.\n\n**Note:** This method first looks for a <xref uid=\"com.azure.core.util.serializer.JsonSerializerProvider\" data-throw-if-not-resolved=\"false\" data-raw-source=\"JsonSerializerProvider\"></xref> implementation on the classpath. If no implementation is found, a default Jackson-based implementation will be used to deserialize the object.\n\n**Get a non-generic Object from the BinaryData**\n\n```java\nclass Person {\n     @JsonProperty\n     private String name;\n\n     @JsonSetter\n     public Person setName(String name) {\n         this.name = name;\n         return this;\n     }\n\n     @JsonGetter\n     public String getName() {\n         return name;\n     }\n }\n final Person data = new Person().setName(\"John\");\n\n // Ensure your classpath have the Serializer to serialize the object which implement implement\n // com.azure.core.util.serializer.JsonSerializer interface.\n // Or use Azure provided libraries for this.\n // https://mvnrepository.com/artifact/com.azure/azure-core-serializer-json-jackson or\n // https://mvnrepository.com/artifact/com.azure/azure-core-serializer-json-gson\n\n BinaryData binaryData = BinaryData.fromObject(data);\n\n Person person = binaryData.toObject(TypeReference.createInstance(Person.class));\n System.out.println(person.getName());\n```\n\n**Get a generic Object from the BinaryData**\n\n```java\nfinal Person person1 = new Person().setName(\"John\");\n final Person person2 = new Person().setName(\"Jack\");\n\n List<Person> personList = new ArrayList<>();\n personList.add(person1);\n personList.add(person2);\n\n // Ensure your classpath have the Serializer to serialize the object which implement implement\n // com.azure.core.util.serializer.JsonSerializer interface.\n // Or use Azure provided libraries for this.\n // https://mvnrepository.com/artifact/com.azure/azure-core-serializer-json-jackson or\n // https://mvnrepository.com/artifact/com.azure/azure-core-serializer-json-gson\n\n\n BinaryData binaryData = BinaryData.fromObject(personList);\n\n List<Person> persons = binaryData.toObject(new TypeReference<List<Person>>() { });\n persons.forEach(person -> System.out.println(person.getName()));\n```"
  returns:
    description: "An <xref uid=\"java.lang.Object\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Object\"></xref> representing the JSON deserialized <xref uid=\"com.azure.core.util.BinaryData\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BinaryData\"></xref>."
    type: "<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.core.util.BinaryData.<T>toObject(com.azure.core.util.serializer.TypeReference<T>,com.azure.core.util.serializer.ObjectSerializer)"
  fullName: "com.azure.core.util.BinaryData.<T>toObject(TypeReference<T> typeReference, ObjectSerializer serializer)"
  name: "<T>toObject(TypeReference<T> typeReference, ObjectSerializer serializer)"
  nameWithType: "BinaryData.<T>toObject(TypeReference<T> typeReference, ObjectSerializer serializer)"
  summary: "Returns an <xref uid=\"java.lang.Object\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Object\"></xref> representation of this <xref uid=\"com.azure.core.util.BinaryData\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BinaryData\"></xref> by deserializing its data using the passed <xref uid=\"com.azure.core.util.serializer.ObjectSerializer\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ObjectSerializer\"></xref>."
  parameters:
  - description: "The <xref uid=\"com.azure.core.util.serializer.TypeReference\" data-throw-if-not-resolved=\"false\" data-raw-source=\"TypeReference\"></xref> representing the Object's type."
    name: "typeReference"
    type: "<xref href=\"com.azure.core.util.serializer.TypeReference?alt=com.azure.core.util.serializer.TypeReference&text=TypeReference\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
  - description: "The <xref uid=\"com.azure.core.util.serializer.ObjectSerializer\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ObjectSerializer\"></xref> used to deserialize object."
    name: "serializer"
    type: "<xref href=\"com.azure.core.util.serializer.ObjectSerializer?alt=com.azure.core.util.serializer.ObjectSerializer&text=ObjectSerializer\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public T <T>toObject(TypeReference<T> typeReference, ObjectSerializer serializer)"
  desc: "Returns an <xref uid=\"java.lang.Object\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Object\"></xref> representation of this <xref uid=\"com.azure.core.util.BinaryData\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BinaryData\"></xref> by deserializing its data using the passed <xref uid=\"com.azure.core.util.serializer.ObjectSerializer\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ObjectSerializer\"></xref>. Each time this method is called, the content is deserialized and a new instance of type `T` is returned. So, calling this method repeatedly to convert the underlying data source into the same type is not recommended.\n\nThe type, represented by <xref uid=\"com.azure.core.util.serializer.TypeReference\" data-throw-if-not-resolved=\"false\" data-raw-source=\"TypeReference\"></xref>, can either be a generic or non-generic type. If the type is generic create a sub-type of <xref uid=\"com.azure.core.util.serializer.TypeReference\" data-throw-if-not-resolved=\"false\" data-raw-source=\"TypeReference\"></xref>, if the type is non-generic use <xref uid=\"com.azure.core.util.serializer.TypeReference.<T>createInstance(java.lang.Class<T>)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"TypeReference#createInstance(Class)\"></xref>.\n\nThe passed <xref uid=\"com.azure.core.util.serializer.ObjectSerializer\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ObjectSerializer\"></xref> can either be one of the implementations offered by the Azure SDKs or your own implementation.\n\n**Azure SDK implementations**\n\n *  [Jackson JSON serializer][]\n *  [GSON JSON serializer][]\n\n**Get a non-generic Object from the BinaryData**\n\n```java\nclass Person {\n     @JsonProperty\n     private String name;\n\n     @JsonSetter\n     public Person setName(String name) {\n         this.name = name;\n         return this;\n     }\n\n     @JsonGetter\n     public String getName() {\n         return name;\n     }\n }\n final Person data = new Person().setName(\"John\");\n\n // Provide your custom serializer or use Azure provided serializers.\n // https://mvnrepository.com/artifact/com.azure/azure-core-serializer-json-jackson or\n // https://mvnrepository.com/artifact/com.azure/azure-core-serializer-json-gson\n\n final ObjectSerializer serializer =\n     new MyJsonSerializer(); // Replace this with your Serializer\n BinaryData binaryData = BinaryData.fromObject(data, serializer);\n\n Person person = binaryData.toObject(TypeReference.createInstance(Person.class), serializer);\n System.out.println(\"Name : \" + person.getName());\n```\n\n**Get a generic Object from the BinaryData**\n\n```java\nfinal Person person1 = new Person().setName(\"John\");\n final Person person2 = new Person().setName(\"Jack\");\n\n List<Person> personList = new ArrayList<>();\n personList.add(person1);\n personList.add(person2);\n\n final ObjectSerializer serializer =\n     new MyJsonSerializer(); // Replace this with your Serializer\n BinaryData binaryData = BinaryData.fromObject(personList, serializer);\n\n // Retains the type of the list when deserializing\n List<Person> persons = binaryData.toObject(new TypeReference<List<Person>>() { }, serializer);\n persons.forEach(person -> System.out.println(\"Name : \" + person.getName()));\n```\n\n\n[Jackson JSON serializer]: https://mvnrepository.com/artifact/com.azure/azure-core-serializer-json-jackson\n[GSON JSON serializer]: https://mvnrepository.com/artifact/com.azure/azure-core-serializer-json-gson"
  returns:
    description: "An <xref uid=\"java.lang.Object\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Object\"></xref> representing the deserialized <xref uid=\"com.azure.core.util.BinaryData\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BinaryData\"></xref>."
    type: "<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.core.util.BinaryData.<T>toObject(java.lang.Class<T>)"
  fullName: "com.azure.core.util.BinaryData.<T>toObject(Class<T> clazz)"
  name: "<T>toObject(Class<T> clazz)"
  nameWithType: "BinaryData.<T>toObject(Class<T> clazz)"
  summary: "Returns an <xref uid=\"java.lang.Object\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Object\"></xref> representation of this <xref uid=\"com.azure.core.util.BinaryData\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BinaryData\"></xref> by deserializing its data using the default <xref uid=\"com.azure.core.util.serializer.JsonSerializer\" data-throw-if-not-resolved=\"false\" data-raw-source=\"JsonSerializer\"></xref>."
  parameters:
  - description: "The <xref uid=\"java.lang.Class\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Class\"></xref> representing the Object's type."
    name: "clazz"
    type: "<xref href=\"java.lang.Class?alt=java.lang.Class&text=Class\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public T <T>toObject(Class<T> clazz)"
  desc: "Returns an <xref uid=\"java.lang.Object\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Object\"></xref> representation of this <xref uid=\"com.azure.core.util.BinaryData\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BinaryData\"></xref> by deserializing its data using the default <xref uid=\"com.azure.core.util.serializer.JsonSerializer\" data-throw-if-not-resolved=\"false\" data-raw-source=\"JsonSerializer\"></xref>. Each time this method is called, the content is deserialized and a new instance of type `T` is returned. So, calling this method repeatedly to convert the underlying data source into the same type is not recommended.\n\nThe type, represented by <xref uid=\"java.lang.Class\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Class\"></xref>, should be a non-generic class, for generic classes use <xref uid=\"com.azure.core.util.BinaryData.<T>toObject(com.azure.core.util.serializer.TypeReference<T>)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#toObject(TypeReference)\"></xref>.\n\n**Note:** This method first looks for a <xref uid=\"com.azure.core.util.serializer.JsonSerializerProvider\" data-throw-if-not-resolved=\"false\" data-raw-source=\"JsonSerializerProvider\"></xref> implementation on the classpath. If no implementation is found, a default Jackson-based implementation will be used to deserialize the object.\n\n**Get a non-generic Object from the BinaryData**\n\n```java\nclass Person {\n     @JsonProperty\n     private String name;\n\n     @JsonSetter\n     public Person setName(String name) {\n         this.name = name;\n         return this;\n     }\n\n     @JsonGetter\n     public String getName() {\n         return name;\n     }\n }\n final Person data = new Person().setName(\"John\");\n\n // Ensure your classpath have the Serializer to serialize the object which implement implement\n // com.azure.core.util.serializer.JsonSerializer interface.\n // Or use Azure provided libraries for this.\n // https://mvnrepository.com/artifact/com.azure/azure-core-serializer-json-jackson or\n // https://mvnrepository.com/artifact/com.azure/azure-core-serializer-json-gson\n\n BinaryData binaryData = BinaryData.fromObject(data);\n\n Person person = binaryData.toObject(Person.class);\n System.out.println(person.getName());\n```"
  returns:
    description: "An <xref uid=\"java.lang.Object\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Object\"></xref> representing the JSON deserialized <xref uid=\"com.azure.core.util.BinaryData\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BinaryData\"></xref>."
    type: "<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.core.util.BinaryData.<T>toObject(java.lang.Class<T>,com.azure.core.util.serializer.ObjectSerializer)"
  fullName: "com.azure.core.util.BinaryData.<T>toObject(Class<T> clazz, ObjectSerializer serializer)"
  name: "<T>toObject(Class<T> clazz, ObjectSerializer serializer)"
  nameWithType: "BinaryData.<T>toObject(Class<T> clazz, ObjectSerializer serializer)"
  summary: "Returns an <xref uid=\"java.lang.Object\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Object\"></xref> representation of this <xref uid=\"com.azure.core.util.BinaryData\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BinaryData\"></xref> by deserializing its data using the passed <xref uid=\"com.azure.core.util.serializer.ObjectSerializer\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ObjectSerializer\"></xref>."
  parameters:
  - description: "The <xref uid=\"java.lang.Class\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Class\"></xref> representing the Object's type."
    name: "clazz"
    type: "<xref href=\"java.lang.Class?alt=java.lang.Class&text=Class\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
  - description: "The <xref uid=\"com.azure.core.util.serializer.ObjectSerializer\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ObjectSerializer\"></xref> used to deserialize object."
    name: "serializer"
    type: "<xref href=\"com.azure.core.util.serializer.ObjectSerializer?alt=com.azure.core.util.serializer.ObjectSerializer&text=ObjectSerializer\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public T <T>toObject(Class<T> clazz, ObjectSerializer serializer)"
  desc: "Returns an <xref uid=\"java.lang.Object\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Object\"></xref> representation of this <xref uid=\"com.azure.core.util.BinaryData\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BinaryData\"></xref> by deserializing its data using the passed <xref uid=\"com.azure.core.util.serializer.ObjectSerializer\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ObjectSerializer\"></xref>. Each time this method is called, the content is deserialized and a new instance of type `T` is returned. So, calling this method repeatedly to convert the underlying data source into the same type is not recommended.\n\nThe type, represented by <xref uid=\"java.lang.Class\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Class\"></xref>, should be a non-generic class, for generic classes use <xref uid=\"com.azure.core.util.BinaryData.<T>toObject(com.azure.core.util.serializer.TypeReference<T>,com.azure.core.util.serializer.ObjectSerializer)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#toObject(TypeReference, ObjectSerializer)\"></xref>.\n\nThe passed <xref uid=\"com.azure.core.util.serializer.ObjectSerializer\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ObjectSerializer\"></xref> can either be one of the implementations offered by the Azure SDKs or your own implementation.\n\n**Azure SDK implementations**\n\n *  [Jackson JSON serializer][]\n *  [GSON JSON serializer][]\n\n**Get a non-generic Object from the BinaryData**\n\n```java\nclass Person {\n     @JsonProperty\n     private String name;\n\n     @JsonSetter\n     public Person setName(String name) {\n         this.name = name;\n         return this;\n     }\n\n     @JsonGetter\n     public String getName() {\n         return name;\n     }\n }\n final Person data = new Person().setName(\"John\");\n\n // Provide your custom serializer or use Azure provided serializers.\n // https://mvnrepository.com/artifact/com.azure/azure-core-serializer-json-jackson or\n // https://mvnrepository.com/artifact/com.azure/azure-core-serializer-json-gson\n\n final ObjectSerializer serializer =\n     new MyJsonSerializer(); // Replace this with your Serializer\n BinaryData binaryData = BinaryData.fromObject(data, serializer);\n\n Person person = binaryData.toObject(Person.class, serializer);\n System.out.println(\"Name : \" + person.getName());\n```\n\n\n[Jackson JSON serializer]: https://mvnrepository.com/artifact/com.azure/azure-core-serializer-json-jackson\n[GSON JSON serializer]: https://mvnrepository.com/artifact/com.azure/azure-core-serializer-json-gson"
  returns:
    description: "An <xref uid=\"java.lang.Object\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Object\"></xref> representing the deserialized <xref uid=\"com.azure.core.util.BinaryData\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BinaryData\"></xref>."
    type: "<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.core.util.BinaryData.<T>toObjectAsync(com.azure.core.util.serializer.TypeReference<T>)"
  fullName: "com.azure.core.util.BinaryData.<T>toObjectAsync(TypeReference<T> typeReference)"
  name: "<T>toObjectAsync(TypeReference<T> typeReference)"
  nameWithType: "BinaryData.<T>toObjectAsync(TypeReference<T> typeReference)"
  summary: "Returns an <xref uid=\"java.lang.Object\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Object\"></xref> representation of this <xref uid=\"com.azure.core.util.BinaryData\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BinaryData\"></xref> by deserializing its data using the default <xref uid=\"com.azure.core.util.serializer.JsonSerializer\" data-throw-if-not-resolved=\"false\" data-raw-source=\"JsonSerializer\"></xref>."
  parameters:
  - description: "The <xref uid=\"com.azure.core.util.serializer.TypeReference\" data-throw-if-not-resolved=\"false\" data-raw-source=\"TypeReference\"></xref> representing the Object's type."
    name: "typeReference"
    type: "<xref href=\"com.azure.core.util.serializer.TypeReference?alt=com.azure.core.util.serializer.TypeReference&text=TypeReference\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public Mono<T> <T>toObjectAsync(TypeReference<T> typeReference)"
  desc: "Returns an <xref uid=\"java.lang.Object\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Object\"></xref> representation of this <xref uid=\"com.azure.core.util.BinaryData\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BinaryData\"></xref> by deserializing its data using the default <xref uid=\"com.azure.core.util.serializer.JsonSerializer\" data-throw-if-not-resolved=\"false\" data-raw-source=\"JsonSerializer\"></xref>. Each time this method is called, the content is deserialized and a new instance of type `T` is returned. So, calling this method repeatedly to convert the underlying data source into the same type is not recommended.\n\nThe type, represented by <xref uid=\"com.azure.core.util.serializer.TypeReference\" data-throw-if-not-resolved=\"false\" data-raw-source=\"TypeReference\"></xref>, can either be a generic or non-generic type. If the type is generic create a sub-type of <xref uid=\"com.azure.core.util.serializer.TypeReference\" data-throw-if-not-resolved=\"false\" data-raw-source=\"TypeReference\"></xref>, if the type is non-generic use <xref uid=\"com.azure.core.util.serializer.TypeReference.<T>createInstance(java.lang.Class<T>)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"TypeReference#createInstance(Class)\"></xref>.\n\n**Note:** This method first looks for a <xref uid=\"com.azure.core.util.serializer.JsonSerializerProvider\" data-throw-if-not-resolved=\"false\" data-raw-source=\"JsonSerializerProvider\"></xref> implementation on the classpath. If no implementation is found, a default Jackson-based implementation will be used to deserialize the object.\n\n**Get a non-generic Object from the BinaryData**\n\n```java\nclass Person {\n     @JsonProperty\n     private String name;\n\n     @JsonSetter\n     public Person setName(String name) {\n         this.name = name;\n         return this;\n     }\n\n     @JsonGetter\n     public String getName() {\n         return name;\n     }\n }\n final Person data = new Person().setName(\"John\");\n\n // Ensure your classpath have the Serializer to serialize the object which implement implement\n // com.azure.core.util.serializer.JsonSerializer interface.\n // Or use Azure provided libraries for this.\n // https://mvnrepository.com/artifact/com.azure/azure-core-serializer-json-jackson or\n // https://mvnrepository.com/artifact/com.azure/azure-core-serializer-json-gson\n\n BinaryData binaryData = BinaryData.fromObject(data);\n\n Disposable subscriber = binaryData.toObjectAsync(TypeReference.createInstance(Person.class))\n     .subscribe(person -> System.out.println(person.getName()));\n\n // So that your program wait for above subscribe to complete.\n TimeUnit.SECONDS.sleep(5);\n subscriber.dispose();\n```\n\n**Get a generic Object from the BinaryData**\n\n```java\nfinal Person person1 = new Person().setName(\"John\");\n final Person person2 = new Person().setName(\"Jack\");\n\n List<Person> personList = new ArrayList<>();\n personList.add(person1);\n personList.add(person2);\n\n BinaryData binaryData = BinaryData.fromObject(personList);\n\n Disposable subscriber = binaryData.toObjectAsync(new TypeReference<List<Person>>() { })\n     .subscribe(persons -> persons.forEach(person -> System.out.println(person.getName())));\n\n // So that your program wait for above subscribe to complete.\n TimeUnit.SECONDS.sleep(5);\n subscriber.dispose();\n```"
  returns:
    description: "A <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> of <xref uid=\"java.lang.Object\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Object\"></xref> representing the JSON deserialized <xref uid=\"com.azure.core.util.BinaryData\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BinaryData\"></xref>."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.core.util.BinaryData.<T>toObjectAsync(com.azure.core.util.serializer.TypeReference<T>,com.azure.core.util.serializer.ObjectSerializer)"
  fullName: "com.azure.core.util.BinaryData.<T>toObjectAsync(TypeReference<T> typeReference, ObjectSerializer serializer)"
  name: "<T>toObjectAsync(TypeReference<T> typeReference, ObjectSerializer serializer)"
  nameWithType: "BinaryData.<T>toObjectAsync(TypeReference<T> typeReference, ObjectSerializer serializer)"
  summary: "Returns an <xref uid=\"java.lang.Object\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Object\"></xref> representation of this <xref uid=\"com.azure.core.util.BinaryData\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BinaryData\"></xref> by deserializing its data using the passed <xref uid=\"com.azure.core.util.serializer.ObjectSerializer\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ObjectSerializer\"></xref>."
  parameters:
  - description: "The <xref uid=\"com.azure.core.util.serializer.TypeReference\" data-throw-if-not-resolved=\"false\" data-raw-source=\"TypeReference\"></xref> representing the Object's type."
    name: "typeReference"
    type: "<xref href=\"com.azure.core.util.serializer.TypeReference?alt=com.azure.core.util.serializer.TypeReference&text=TypeReference\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
  - description: "The <xref uid=\"com.azure.core.util.serializer.ObjectSerializer\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ObjectSerializer\"></xref> used to deserialize object."
    name: "serializer"
    type: "<xref href=\"com.azure.core.util.serializer.ObjectSerializer?alt=com.azure.core.util.serializer.ObjectSerializer&text=ObjectSerializer\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<T> <T>toObjectAsync(TypeReference<T> typeReference, ObjectSerializer serializer)"
  desc: "Returns an <xref uid=\"java.lang.Object\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Object\"></xref> representation of this <xref uid=\"com.azure.core.util.BinaryData\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BinaryData\"></xref> by deserializing its data using the passed <xref uid=\"com.azure.core.util.serializer.ObjectSerializer\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ObjectSerializer\"></xref>. Each time this method is called, the content is deserialized and a new instance of type `T` is returned. So, calling this method repeatedly to convert the underlying data source into the same type is not recommended.\n\nThe type, represented by <xref uid=\"com.azure.core.util.serializer.TypeReference\" data-throw-if-not-resolved=\"false\" data-raw-source=\"TypeReference\"></xref>, can either be a generic or non-generic type. If the type is generic create a sub-type of <xref uid=\"com.azure.core.util.serializer.TypeReference\" data-throw-if-not-resolved=\"false\" data-raw-source=\"TypeReference\"></xref>, if the type is non-generic use <xref uid=\"com.azure.core.util.serializer.TypeReference.<T>createInstance(java.lang.Class<T>)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"TypeReference#createInstance(Class)\"></xref>.\n\nThe passed <xref uid=\"com.azure.core.util.serializer.ObjectSerializer\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ObjectSerializer\"></xref> can either be one of the implementations offered by the Azure SDKs or your own implementation.\n\n**Azure SDK implementations**\n\n *  [Jackson JSON serializer][]\n *  [GSON JSON serializer][]\n\n**Get a non-generic Object from the BinaryData**\n\n```java\nclass Person {\n     @JsonProperty\n     private String name;\n\n     @JsonSetter\n     public Person setName(String name) {\n         this.name = name;\n         return this;\n     }\n\n     @JsonGetter\n     public String getName() {\n         return name;\n     }\n }\n final Person data = new Person().setName(\"John\");\n\n // Provide your custom serializer or use Azure provided serializers.\n // https://mvnrepository.com/artifact/com.azure/azure-core-serializer-json-jackson or\n // https://mvnrepository.com/artifact/com.azure/azure-core-serializer-json-gson\n\n final ObjectSerializer serializer =\n     new MyJsonSerializer(); // Replace this with your Serializer\n BinaryData binaryData = BinaryData.fromObject(data, serializer);\n\n Disposable subscriber = binaryData\n     .toObjectAsync(TypeReference.createInstance(Person.class), serializer)\n     .subscribe(person -> System.out.println(person.getName()));\n\n // So that your program wait for above subscribe to complete.\n TimeUnit.SECONDS.sleep(5);\n subscriber.dispose();\n```\n\n**Get a generic Object from the BinaryData**\n\n```java\nfinal Person person1 = new Person().setName(\"John\");\n final Person person2 = new Person().setName(\"Jack\");\n\n List<Person> personList = new ArrayList<>();\n personList.add(person1);\n personList.add(person2);\n\n final ObjectSerializer serializer =\n     new MyJsonSerializer(); // Replace this with your Serializer\n BinaryData binaryData = BinaryData.fromObject(personList, serializer);\n\n Disposable subscriber = binaryData\n     .toObjectAsync(new TypeReference<List<Person>>() { }, serializer) // retains the generic type information\n     .subscribe(persons -> persons.forEach(person -> System.out.println(person.getName())));\n\n // So that your program wait for above subscribe to complete.\n TimeUnit.SECONDS.sleep(5);\n subscriber.dispose();\n```\n\n\n[Jackson JSON serializer]: https://mvnrepository.com/artifact/com.azure/azure-core-serializer-json-jackson\n[GSON JSON serializer]: https://mvnrepository.com/artifact/com.azure/azure-core-serializer-json-gson"
  returns:
    description: "A <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> of <xref uid=\"java.lang.Object\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Object\"></xref> representing the deserialized <xref uid=\"com.azure.core.util.BinaryData\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BinaryData\"></xref>."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.core.util.BinaryData.<T>toObjectAsync(java.lang.Class<T>)"
  fullName: "com.azure.core.util.BinaryData.<T>toObjectAsync(Class<T> clazz)"
  name: "<T>toObjectAsync(Class<T> clazz)"
  nameWithType: "BinaryData.<T>toObjectAsync(Class<T> clazz)"
  summary: "Returns an <xref uid=\"java.lang.Object\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Object\"></xref> representation of this <xref uid=\"com.azure.core.util.BinaryData\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BinaryData\"></xref> by deserializing its data using the default <xref uid=\"com.azure.core.util.serializer.JsonSerializer\" data-throw-if-not-resolved=\"false\" data-raw-source=\"JsonSerializer\"></xref>."
  parameters:
  - description: "The <xref uid=\"java.lang.Class\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Class\"></xref> representing the Object's type."
    name: "clazz"
    type: "<xref href=\"java.lang.Class?alt=java.lang.Class&text=Class\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public Mono<T> <T>toObjectAsync(Class<T> clazz)"
  desc: "Returns an <xref uid=\"java.lang.Object\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Object\"></xref> representation of this <xref uid=\"com.azure.core.util.BinaryData\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BinaryData\"></xref> by deserializing its data using the default <xref uid=\"com.azure.core.util.serializer.JsonSerializer\" data-throw-if-not-resolved=\"false\" data-raw-source=\"JsonSerializer\"></xref>. Each time this method is called, the content is deserialized and a new instance of type `T` is returned. So, calling this method repeatedly to convert the underlying data source into the same type is not recommended.\n\nThe type, represented by <xref uid=\"java.lang.Class\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Class\"></xref>, should be a non-generic class, for generic classes use <xref uid=\"com.azure.core.util.BinaryData.<T>toObject(com.azure.core.util.serializer.TypeReference<T>)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#toObject(TypeReference)\"></xref>.\n\n**Note:** This method first looks for a <xref uid=\"com.azure.core.util.serializer.JsonSerializerProvider\" data-throw-if-not-resolved=\"false\" data-raw-source=\"JsonSerializerProvider\"></xref> implementation on the classpath. If no implementation is found, a default Jackson-based implementation will be used to deserialize the object.\n\n**Get a non-generic Object from the BinaryData**\n\n```java\nclass Person {\n     @JsonProperty\n     private String name;\n\n     @JsonSetter\n     public Person setName(String name) {\n         this.name = name;\n         return this;\n     }\n\n     @JsonGetter\n     public String getName() {\n         return name;\n     }\n }\n final Person data = new Person().setName(\"John\");\n\n // Ensure your classpath have the Serializer to serialize the object which implement implement\n // com.azure.core.util.serializer.JsonSerializer interface.\n // Or use Azure provided libraries for this.\n // https://mvnrepository.com/artifact/com.azure/azure-core-serializer-json-jackson or\n // https://mvnrepository.com/artifact/com.azure/azure-core-serializer-json-gson\n\n BinaryData binaryData = BinaryData.fromObject(data);\n\n Disposable subscriber = binaryData.toObjectAsync(Person.class)\n     .subscribe(person -> System.out.println(person.getName()));\n\n // So that your program wait for above subscribe to complete.\n TimeUnit.SECONDS.sleep(5);\n subscriber.dispose();\n```"
  returns:
    description: "A <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> of <xref uid=\"java.lang.Object\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Object\"></xref> representing the JSON deserialized <xref uid=\"com.azure.core.util.BinaryData\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BinaryData\"></xref>."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.core.util.BinaryData.<T>toObjectAsync(java.lang.Class<T>,com.azure.core.util.serializer.ObjectSerializer)"
  fullName: "com.azure.core.util.BinaryData.<T>toObjectAsync(Class<T> clazz, ObjectSerializer serializer)"
  name: "<T>toObjectAsync(Class<T> clazz, ObjectSerializer serializer)"
  nameWithType: "BinaryData.<T>toObjectAsync(Class<T> clazz, ObjectSerializer serializer)"
  summary: "Returns an <xref uid=\"java.lang.Object\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Object\"></xref> representation of this <xref uid=\"com.azure.core.util.BinaryData\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BinaryData\"></xref> by deserializing its data using the passed <xref uid=\"com.azure.core.util.serializer.ObjectSerializer\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ObjectSerializer\"></xref>."
  parameters:
  - description: "The <xref uid=\"java.lang.Class\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Class\"></xref> representing the Object's type."
    name: "clazz"
    type: "<xref href=\"java.lang.Class?alt=java.lang.Class&text=Class\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
  - description: "The <xref uid=\"com.azure.core.util.serializer.ObjectSerializer\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ObjectSerializer\"></xref> used to deserialize object."
    name: "serializer"
    type: "<xref href=\"com.azure.core.util.serializer.ObjectSerializer?alt=com.azure.core.util.serializer.ObjectSerializer&text=ObjectSerializer\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<T> <T>toObjectAsync(Class<T> clazz, ObjectSerializer serializer)"
  desc: "Returns an <xref uid=\"java.lang.Object\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Object\"></xref> representation of this <xref uid=\"com.azure.core.util.BinaryData\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BinaryData\"></xref> by deserializing its data using the passed <xref uid=\"com.azure.core.util.serializer.ObjectSerializer\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ObjectSerializer\"></xref>. Each time this method is called, the content is deserialized and a new instance of type `T` is returned. So, calling this method repeatedly to convert the underlying data source into the same type is not recommended.\n\nThe type, represented by <xref uid=\"java.lang.Class\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Class\"></xref>, should be a non-generic class, for generic classes use <xref uid=\"com.azure.core.util.BinaryData.<T>toObject(com.azure.core.util.serializer.TypeReference<T>,com.azure.core.util.serializer.ObjectSerializer)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#toObject(TypeReference, ObjectSerializer)\"></xref>.\n\nThe passed <xref uid=\"com.azure.core.util.serializer.ObjectSerializer\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ObjectSerializer\"></xref> can either be one of the implementations offered by the Azure SDKs or your own implementation.\n\n**Azure SDK implementations**\n\n *  [Jackson JSON serializer][]\n *  [GSON JSON serializer][]\n\n**Get a non-generic Object from the BinaryData**\n\n```java\nclass Person {\n     @JsonProperty\n     private String name;\n\n     @JsonSetter\n     public Person setName(String name) {\n         this.name = name;\n         return this;\n     }\n\n     @JsonGetter\n     public String getName() {\n         return name;\n     }\n }\n final Person data = new Person().setName(\"John\");\n\n // Provide your custom serializer or use Azure provided serializers.\n // https://mvnrepository.com/artifact/com.azure/azure-core-serializer-json-jackson or\n // https://mvnrepository.com/artifact/com.azure/azure-core-serializer-json-gson\n\n final ObjectSerializer serializer =\n     new MyJsonSerializer(); // Replace this with your Serializer\n BinaryData binaryData = BinaryData.fromObject(data, serializer);\n\n Disposable subscriber = binaryData.toObjectAsync(Person.class, serializer)\n     .subscribe(person -> System.out.println(person.getName()));\n\n // So that your program wait for above subscribe to complete.\n TimeUnit.SECONDS.sleep(5);\n subscriber.dispose();\n```\n\n\n[Jackson JSON serializer]: https://mvnrepository.com/artifact/com.azure/azure-core-serializer-json-jackson\n[GSON JSON serializer]: https://mvnrepository.com/artifact/com.azure/azure-core-serializer-json-gson"
  returns:
    description: "A <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> of <xref uid=\"java.lang.Object\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Object\"></xref> representing the deserialized <xref uid=\"com.azure.core.util.BinaryData\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BinaryData\"></xref>."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.core.util.BinaryData.fromBytes(byte[])"
  fullName: "com.azure.core.util.BinaryData.fromBytes(byte[] data)"
  name: "fromBytes(byte[] data)"
  nameWithType: "BinaryData.fromBytes(byte[] data)"
  summary: "Creates an instance of <xref uid=\"com.azure.core.util.BinaryData\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BinaryData\"></xref> from the given byte array."
  modifiers:
  - "static"
  parameters:
  - description: "The byte array that <xref uid=\"com.azure.core.util.BinaryData\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BinaryData\"></xref> will represent."
    name: "data"
    type: "<xref href=\"byte?alt=byte&text=byte\" data-throw-if-not-resolved=\"False\" />[]"
  syntax: "public static BinaryData fromBytes(byte[] data)"
  desc: "Creates an instance of <xref uid=\"com.azure.core.util.BinaryData\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BinaryData\"></xref> from the given byte array.\n\nIf the byte array is null or zero length an empty <xref uid=\"com.azure.core.util.BinaryData\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BinaryData\"></xref> will be returned. Note that the input byte array is used as a reference by this instance of <xref uid=\"com.azure.core.util.BinaryData\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BinaryData\"></xref> and any changes to the byte array outside of this instance will result in the contents of this BinaryData instance being updated as well. To safely update the byte array without impacting the BinaryData instance, perform an array copy first.\n\n**Create an instance from a byte array**\n\n```java\nfinal byte[] data = \"Some Data\".getBytes(StandardCharsets.UTF_8);\n BinaryData binaryData = BinaryData.fromBytes(data);\n System.out.println(new String(binaryData.toBytes(), StandardCharsets.UTF_8));\n```"
  returns:
    description: "A <xref uid=\"com.azure.core.util.BinaryData\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BinaryData\"></xref> representing the byte array."
    type: "<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.core.util.BinaryData.fromFile(java.nio.file.Path)"
  fullName: "com.azure.core.util.BinaryData.fromFile(Path file)"
  name: "fromFile(Path file)"
  nameWithType: "BinaryData.fromFile(Path file)"
  summary: "Creates a <xref uid=\"com.azure.core.util.BinaryData\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BinaryData\"></xref> that uses the content of the file at <xref uid=\"java.nio.file.Path\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Path\"></xref> as its data."
  modifiers:
  - "static"
  parameters:
  - description: "The <xref uid=\"java.nio.file.Path\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Path\"></xref> that will be the <xref uid=\"com.azure.core.util.BinaryData\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BinaryData\"></xref> data."
    name: "file"
    type: "<xref href=\"java.nio.file.Path?alt=java.nio.file.Path&text=Path\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public static BinaryData fromFile(Path file)"
  desc: "Creates a <xref uid=\"com.azure.core.util.BinaryData\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BinaryData\"></xref> that uses the content of the file at <xref uid=\"java.nio.file.Path\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Path\"></xref> as its data. This method checks for the existence of the file at the time of creating an instance of <xref uid=\"com.azure.core.util.BinaryData\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BinaryData\"></xref>. The file, however, is not read until there is an attempt to read the contents of the returned BinaryData instance.\n\n**Create an instance from a file**\n\n```java\nBinaryData binaryData = BinaryData.fromFile(new File(\"path/to/file\").toPath());\n System.out.println(new String(binaryData.toBytes(), StandardCharsets.UTF_8));\n```"
  returns:
    description: "A new <xref uid=\"com.azure.core.util.BinaryData\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BinaryData\"></xref>."
    type: "<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.core.util.BinaryData.fromFile(java.nio.file.Path,int)"
  fullName: "com.azure.core.util.BinaryData.fromFile(Path file, int chunkSize)"
  name: "fromFile(Path file, int chunkSize)"
  nameWithType: "BinaryData.fromFile(Path file, int chunkSize)"
  summary: "Creates a <xref uid=\"com.azure.core.util.BinaryData\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BinaryData\"></xref> that uses the content of the file at <xref uid=\"java.nio.file.Path\" data-throw-if-not-resolved=\"false\" data-raw-source=\"file\"></xref> as its data."
  modifiers:
  - "static"
  parameters:
  - description: "The <xref uid=\"java.nio.file.Path\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Path\"></xref> that will be the <xref uid=\"com.azure.core.util.BinaryData\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BinaryData\"></xref> data."
    name: "file"
    type: "<xref href=\"java.nio.file.Path?alt=java.nio.file.Path&text=Path\" data-throw-if-not-resolved=\"False\" />"
  - description: "The requested size for each read of the path."
    name: "chunkSize"
    type: "<xref href=\"int?alt=int&text=int\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public static BinaryData fromFile(Path file, int chunkSize)"
  desc: "Creates a <xref uid=\"com.azure.core.util.BinaryData\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BinaryData\"></xref> that uses the content of the file at <xref uid=\"java.nio.file.Path\" data-throw-if-not-resolved=\"false\" data-raw-source=\"file\"></xref> as its data. This method checks for the existence of the file at the time of creating an instance of <xref uid=\"com.azure.core.util.BinaryData\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BinaryData\"></xref>. The file, however, is not read until there is an attempt to read the contents of the returned BinaryData instance.\n\n**Create an instance from a file**\n\n```java\nBinaryData binaryData = BinaryData.fromFile(new File(\"path/to/file\").toPath(), 8092);\n System.out.println(new String(binaryData.toBytes(), StandardCharsets.UTF_8));\n```"
  returns:
    description: "A new <xref uid=\"com.azure.core.util.BinaryData\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BinaryData\"></xref>."
    type: "<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.core.util.BinaryData.fromFlux(reactor.core.publisher.Flux<java.nio.ByteBuffer>)"
  fullName: "com.azure.core.util.BinaryData.fromFlux(Flux<ByteBuffer> data)"
  name: "fromFlux(Flux<ByteBuffer> data)"
  nameWithType: "BinaryData.fromFlux(Flux<ByteBuffer> data)"
  summary: "Creates an instance of <xref uid=\"com.azure.core.util.BinaryData\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BinaryData\"></xref> from the given <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Flux\"></xref> of <xref uid=\"java.nio.ByteBuffer\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ByteBuffer\"></xref>."
  modifiers:
  - "static"
  parameters:
  - description: "The <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Flux\"></xref> of <xref uid=\"java.nio.ByteBuffer\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ByteBuffer\"></xref> that <xref uid=\"com.azure.core.util.BinaryData\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BinaryData\"></xref> will represent."
    name: "data"
    type: "<xref href=\"reactor.core.publisher.Flux?alt=reactor.core.publisher.Flux&text=Flux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.nio.ByteBuffer?alt=java.nio.ByteBuffer&text=ByteBuffer\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public static Mono<BinaryData> fromFlux(Flux<ByteBuffer> data)"
  desc: "Creates an instance of <xref uid=\"com.azure.core.util.BinaryData\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BinaryData\"></xref> from the given <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Flux\"></xref> of <xref uid=\"java.nio.ByteBuffer\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ByteBuffer\"></xref>.\n\n**Create an instance from a Flux of ByteBuffer**\n\n```java\nfinal byte[] data = \"Some Data\".getBytes(StandardCharsets.UTF_8);\n final Flux<ByteBuffer> dataFlux = Flux.just(ByteBuffer.wrap(data));\n\n Mono<BinaryData> binaryDataMono = BinaryData.fromFlux(dataFlux);\n\n Disposable subscriber = binaryDataMono\n     .map(binaryData -> {\n         System.out.println(binaryData.toString());\n         return true;\n     })\n     .subscribe();\n\n // So that your program wait for above subscribe to complete.\n TimeUnit.SECONDS.sleep(5);\n subscriber.dispose();\n```"
  returns:
    description: "A <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> of <xref uid=\"com.azure.core.util.BinaryData\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BinaryData\"></xref> representing the <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Flux\"></xref> of <xref uid=\"java.nio.ByteBuffer\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ByteBuffer\"></xref>."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.core.util.BinaryData.fromFlux(reactor.core.publisher.Flux<java.nio.ByteBuffer>,java.lang.Long)"
  fullName: "com.azure.core.util.BinaryData.fromFlux(Flux<ByteBuffer> data, Long length)"
  name: "fromFlux(Flux<ByteBuffer> data, Long length)"
  nameWithType: "BinaryData.fromFlux(Flux<ByteBuffer> data, Long length)"
  summary: "Creates an instance of <xref uid=\"com.azure.core.util.BinaryData\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BinaryData\"></xref> from the given <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Flux\"></xref> of <xref uid=\"java.nio.ByteBuffer\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ByteBuffer\"></xref>."
  modifiers:
  - "static"
  parameters:
  - description: "The <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Flux\"></xref> of <xref uid=\"java.nio.ByteBuffer\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ByteBuffer\"></xref> that <xref uid=\"com.azure.core.util.BinaryData\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BinaryData\"></xref> will represent."
    name: "data"
    type: "<xref href=\"reactor.core.publisher.Flux?alt=reactor.core.publisher.Flux&text=Flux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.nio.ByteBuffer?alt=java.nio.ByteBuffer&text=ByteBuffer\" data-throw-if-not-resolved=\"False\" />&gt;"
  - description: "The length of <code>data</code> in bytes."
    name: "length"
    type: "<xref href=\"java.lang.Long?alt=java.lang.Long&text=Long\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public static Mono<BinaryData> fromFlux(Flux<ByteBuffer> data, Long length)"
  desc: "Creates an instance of <xref uid=\"com.azure.core.util.BinaryData\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BinaryData\"></xref> from the given <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Flux\"></xref> of <xref uid=\"java.nio.ByteBuffer\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ByteBuffer\"></xref>.\n\n**Create an instance from a Flux of ByteBuffer**\n\n```java\nfinal byte[] data = \"Some Data\".getBytes(StandardCharsets.UTF_8);\n final Flux<ByteBuffer> dataFlux = Flux.just(ByteBuffer.wrap(data));\n\n Mono<BinaryData> binaryDataMono = BinaryData.fromFlux(dataFlux);\n\n Disposable subscriber = binaryDataMono\n     .map(binaryData -> {\n         System.out.println(binaryData.toString());\n         return true;\n     })\n     .subscribe();\n\n // So that your program wait for above subscribe to complete.\n TimeUnit.SECONDS.sleep(5);\n subscriber.dispose();\n```"
  returns:
    description: "A <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> of <xref uid=\"com.azure.core.util.BinaryData\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BinaryData\"></xref> representing the <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Flux\"></xref> of <xref uid=\"java.nio.ByteBuffer\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ByteBuffer\"></xref>."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.core.util.BinaryData.fromObject(java.lang.Object)"
  fullName: "com.azure.core.util.BinaryData.fromObject(Object data)"
  name: "fromObject(Object data)"
  nameWithType: "BinaryData.fromObject(Object data)"
  summary: "Creates an instance of <xref uid=\"com.azure.core.util.BinaryData\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BinaryData\"></xref> by serializing the <xref uid=\"java.lang.Object\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Object\"></xref> using the default <xref uid=\"com.azure.core.util.serializer.JsonSerializer\" data-throw-if-not-resolved=\"false\" data-raw-source=\"JsonSerializer\"></xref>."
  modifiers:
  - "static"
  parameters:
  - description: "The object that will be JSON serialized that <xref uid=\"com.azure.core.util.BinaryData\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BinaryData\"></xref> will represent."
    name: "data"
    type: "<xref href=\"java.lang.Object?alt=java.lang.Object&text=Object\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public static BinaryData fromObject(Object data)"
  desc: "Creates an instance of <xref uid=\"com.azure.core.util.BinaryData\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BinaryData\"></xref> by serializing the <xref uid=\"java.lang.Object\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Object\"></xref> using the default <xref uid=\"com.azure.core.util.serializer.JsonSerializer\" data-throw-if-not-resolved=\"false\" data-raw-source=\"JsonSerializer\"></xref>.\n\n**Note:** This method first looks for a <xref uid=\"com.azure.core.util.serializer.JsonSerializerProvider\" data-throw-if-not-resolved=\"false\" data-raw-source=\"JsonSerializerProvider\"></xref> implementation on the classpath. If no implementation is found, a default Jackson-based implementation will be used to serialize the object.\n\n**Creating an instance from an Object**\n\n```java\nclass Person {\n     @JsonProperty\n     private String name;\n\n     @JsonSetter\n     public Person setName(String name) {\n         this.name = name;\n         return this;\n     }\n\n     @JsonGetter\n     public String getName() {\n         return name;\n     }\n }\n final Person data = new Person().setName(\"John\");\n\n // Provide your custom serializer or use Azure provided serializers.\n // https://mvnrepository.com/artifact/com.azure/azure-core-serializer-json-jackson or\n // https://mvnrepository.com/artifact/com.azure/azure-core-serializer-json-gson\n BinaryData binaryData = BinaryData.fromObject(data);\n\n System.out.println(binaryData.toString());\n```"
  returns:
    description: "A <xref uid=\"com.azure.core.util.BinaryData\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BinaryData\"></xref> representing the JSON serialized object."
    type: "<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.core.util.BinaryData.fromObject(java.lang.Object,com.azure.core.util.serializer.ObjectSerializer)"
  fullName: "com.azure.core.util.BinaryData.fromObject(Object data, ObjectSerializer serializer)"
  name: "fromObject(Object data, ObjectSerializer serializer)"
  nameWithType: "BinaryData.fromObject(Object data, ObjectSerializer serializer)"
  summary: "Creates an instance of <xref uid=\"com.azure.core.util.BinaryData\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BinaryData\"></xref> by serializing the <xref uid=\"java.lang.Object\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Object\"></xref> using the passed <xref uid=\"com.azure.core.util.serializer.ObjectSerializer\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ObjectSerializer\"></xref>."
  modifiers:
  - "static"
  parameters:
  - description: "The object that will be serialized that <xref uid=\"com.azure.core.util.BinaryData\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BinaryData\"></xref> will represent. The <code>serializer</code>\n determines how <code>null</code> data is serialized."
    name: "data"
    type: "<xref href=\"java.lang.Object?alt=java.lang.Object&text=Object\" data-throw-if-not-resolved=\"False\" />"
  - description: "The <xref uid=\"com.azure.core.util.serializer.ObjectSerializer\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ObjectSerializer\"></xref> used to serialize object."
    name: "serializer"
    type: "<xref href=\"com.azure.core.util.serializer.ObjectSerializer?alt=com.azure.core.util.serializer.ObjectSerializer&text=ObjectSerializer\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public static BinaryData fromObject(Object data, ObjectSerializer serializer)"
  desc: "Creates an instance of <xref uid=\"com.azure.core.util.BinaryData\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BinaryData\"></xref> by serializing the <xref uid=\"java.lang.Object\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Object\"></xref> using the passed <xref uid=\"com.azure.core.util.serializer.ObjectSerializer\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ObjectSerializer\"></xref>.\n\nThe passed <xref uid=\"com.azure.core.util.serializer.ObjectSerializer\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ObjectSerializer\"></xref> can either be one of the implementations offered by the Azure SDKs or your own implementation.\n\n**Azure SDK implementations**\n\n *  [Jackson JSON serializer][]\n *  [GSON JSON serializer][]\n\n**Create an instance from an Object**\n\n```java\nclass Person {\n     @JsonProperty\n     private String name;\n\n     @JsonSetter\n     public Person setName(String name) {\n         this.name = name;\n         return this;\n     }\n\n     @JsonGetter\n     public String getName() {\n         return name;\n     }\n }\n final Person data = new Person().setName(\"John\");\n\n // Provide your custom serializer or use Azure provided serializers.\n // https://mvnrepository.com/artifact/com.azure/azure-core-serializer-json-jackson or\n // https://mvnrepository.com/artifact/com.azure/azure-core-serializer-json-gson\n final ObjectSerializer serializer =\n     new MyJsonSerializer(); // Replace this with your Serializer\n BinaryData binaryData = BinaryData.fromObject(data, serializer);\n\n System.out.println(binaryData.toString());\n```\n\n\n[Jackson JSON serializer]: https://mvnrepository.com/artifact/com.azure/azure-core-serializer-json-jackson\n[GSON JSON serializer]: https://mvnrepository.com/artifact/com.azure/azure-core-serializer-json-gson"
  returns:
    description: "A <xref uid=\"com.azure.core.util.BinaryData\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BinaryData\"></xref> representing the serialized object."
    type: "<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.core.util.BinaryData.fromObjectAsync(java.lang.Object)"
  fullName: "com.azure.core.util.BinaryData.fromObjectAsync(Object data)"
  name: "fromObjectAsync(Object data)"
  nameWithType: "BinaryData.fromObjectAsync(Object data)"
  summary: "Creates an instance of <xref uid=\"com.azure.core.util.BinaryData\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BinaryData\"></xref> by serializing the <xref uid=\"java.lang.Object\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Object\"></xref> using the default <xref uid=\"com.azure.core.util.serializer.JsonSerializer\" data-throw-if-not-resolved=\"false\" data-raw-source=\"JsonSerializer\"></xref>."
  modifiers:
  - "static"
  parameters:
  - description: "The object that will be JSON serialized that <xref uid=\"com.azure.core.util.BinaryData\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BinaryData\"></xref> will represent."
    name: "data"
    type: "<xref href=\"java.lang.Object?alt=java.lang.Object&text=Object\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public static Mono<BinaryData> fromObjectAsync(Object data)"
  desc: "Creates an instance of <xref uid=\"com.azure.core.util.BinaryData\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BinaryData\"></xref> by serializing the <xref uid=\"java.lang.Object\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Object\"></xref> using the default <xref uid=\"com.azure.core.util.serializer.JsonSerializer\" data-throw-if-not-resolved=\"false\" data-raw-source=\"JsonSerializer\"></xref>.\n\n**Note:** This method first looks for a <xref uid=\"com.azure.core.util.serializer.JsonSerializerProvider\" data-throw-if-not-resolved=\"false\" data-raw-source=\"JsonSerializerProvider\"></xref> implementation on the classpath. If no implementation is found, a default Jackson-based implementation will be used to serialize the object.\n\n**Creating an instance from an Object**\n\n```java\nclass Person {\n     @JsonProperty\n     private String name;\n\n     @JsonSetter\n     public Person setName(String name) {\n         this.name = name;\n         return this;\n     }\n\n     @JsonGetter\n     public String getName() {\n         return name;\n     }\n }\n final Person data = new Person().setName(\"John\");\n\n // Provide your custom serializer or use Azure provided serializers.\n // https://mvnrepository.com/artifact/com.azure/azure-core-serializer-json-jackson or\n // https://mvnrepository.com/artifact/com.azure/azure-core-serializer-json-gson\n Disposable subscriber = BinaryData.fromObjectAsync(data)\n     .subscribe(binaryData -> System.out.println(binaryData.toString()));\n\n // So that your program wait for above subscribe to complete.\n TimeUnit.SECONDS.sleep(5);\n subscriber.dispose();\n```"
  returns:
    description: "A <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> of <xref uid=\"com.azure.core.util.BinaryData\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BinaryData\"></xref> representing the JSON serialized object."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.core.util.BinaryData.fromObjectAsync(java.lang.Object,com.azure.core.util.serializer.ObjectSerializer)"
  fullName: "com.azure.core.util.BinaryData.fromObjectAsync(Object data, ObjectSerializer serializer)"
  name: "fromObjectAsync(Object data, ObjectSerializer serializer)"
  nameWithType: "BinaryData.fromObjectAsync(Object data, ObjectSerializer serializer)"
  summary: "Creates an instance of <xref uid=\"com.azure.core.util.BinaryData\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BinaryData\"></xref> by serializing the <xref uid=\"java.lang.Object\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Object\"></xref> using the passed <xref uid=\"com.azure.core.util.serializer.ObjectSerializer\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ObjectSerializer\"></xref>."
  modifiers:
  - "static"
  parameters:
  - description: "The object that will be serialized that <xref uid=\"com.azure.core.util.BinaryData\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BinaryData\"></xref> will represent. The <code>serializer</code>\n determines how <code>null</code> data is serialized."
    name: "data"
    type: "<xref href=\"java.lang.Object?alt=java.lang.Object&text=Object\" data-throw-if-not-resolved=\"False\" />"
  - description: "The <xref uid=\"com.azure.core.util.serializer.ObjectSerializer\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ObjectSerializer\"></xref> used to serialize object."
    name: "serializer"
    type: "<xref href=\"com.azure.core.util.serializer.ObjectSerializer?alt=com.azure.core.util.serializer.ObjectSerializer&text=ObjectSerializer\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public static Mono<BinaryData> fromObjectAsync(Object data, ObjectSerializer serializer)"
  desc: "Creates an instance of <xref uid=\"com.azure.core.util.BinaryData\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BinaryData\"></xref> by serializing the <xref uid=\"java.lang.Object\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Object\"></xref> using the passed <xref uid=\"com.azure.core.util.serializer.ObjectSerializer\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ObjectSerializer\"></xref>.\n\nThe passed <xref uid=\"com.azure.core.util.serializer.ObjectSerializer\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ObjectSerializer\"></xref> can either be one of the implementations offered by the Azure SDKs or your own implementation.\n\n**Azure SDK implementations**\n\n *  [Jackson JSON serializer][]\n *  [GSON JSON serializer][]\n\n**Create an instance from an Object**\n\n```java\nclass Person {\n     @JsonProperty\n     private String name;\n\n     @JsonSetter\n     public Person setName(String name) {\n         this.name = name;\n         return this;\n     }\n\n     @JsonGetter\n     public String getName() {\n         return name;\n     }\n }\n final Person data = new Person().setName(\"John\");\n\n // Provide your custom serializer or use Azure provided serializers.\n // https://mvnrepository.com/artifact/com.azure/azure-core-serializer-json-jackson or\n // https://mvnrepository.com/artifact/com.azure/azure-core-serializer-json-gson\n final ObjectSerializer serializer =\n     new MyJsonSerializer(); // Replace this with your Serializer\n Disposable subscriber = BinaryData.fromObjectAsync(data, serializer)\n     .subscribe(binaryData -> System.out.println(binaryData.toString()));\n\n // So that your program wait for above subscribe to complete.\n TimeUnit.SECONDS.sleep(5);\n subscriber.dispose();\n```\n\n\n[Jackson JSON serializer]: https://mvnrepository.com/artifact/com.azure/azure-core-serializer-json-jackson\n[GSON JSON serializer]: https://mvnrepository.com/artifact/com.azure/azure-core-serializer-json-gson"
  returns:
    description: "A <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> of <xref uid=\"com.azure.core.util.BinaryData\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BinaryData\"></xref> representing the serialized object."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.core.util.BinaryData.fromStream(java.io.InputStream)"
  fullName: "com.azure.core.util.BinaryData.fromStream(InputStream inputStream)"
  name: "fromStream(InputStream inputStream)"
  nameWithType: "BinaryData.fromStream(InputStream inputStream)"
  summary: "Creates an instance of <xref uid=\"com.azure.core.util.BinaryData\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BinaryData\"></xref> from the given <xref uid=\"java.io.InputStream\" data-throw-if-not-resolved=\"false\" data-raw-source=\"InputStream\"></xref>."
  modifiers:
  - "static"
  parameters:
  - description: "The <xref uid=\"java.io.InputStream\" data-throw-if-not-resolved=\"false\" data-raw-source=\"InputStream\"></xref> that <xref uid=\"com.azure.core.util.BinaryData\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BinaryData\"></xref> will represent."
    name: "inputStream"
    type: "<xref href=\"java.io.InputStream?alt=java.io.InputStream&text=InputStream\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public static BinaryData fromStream(InputStream inputStream)"
  desc: "Creates an instance of <xref uid=\"com.azure.core.util.BinaryData\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BinaryData\"></xref> from the given <xref uid=\"java.io.InputStream\" data-throw-if-not-resolved=\"false\" data-raw-source=\"InputStream\"></xref>. Depending on the type of inputStream, the BinaryData instance created may or may not allow reading the content more than once. The stream content is not cached if the stream is not read into a format that requires the content to be fully read into memory.\n\n**NOTE:** The <xref uid=\"java.io.InputStream\" data-throw-if-not-resolved=\"false\" data-raw-source=\"InputStream\"></xref> is not closed by this function.\n\n**Create an instance from an InputStream**\n\n```java\nfinal ByteArrayInputStream inputStream = new ByteArrayInputStream(\"Some Data\".getBytes(StandardCharsets.UTF_8));\n BinaryData binaryData = BinaryData.fromStream(inputStream);\n System.out.println(binaryData.toString());\n```"
  returns:
    description: "A <xref uid=\"com.azure.core.util.BinaryData\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BinaryData\"></xref> representing the <xref uid=\"java.io.InputStream\" data-throw-if-not-resolved=\"false\" data-raw-source=\"InputStream\"></xref>."
    type: "<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.core.util.BinaryData.fromStreamAsync(java.io.InputStream)"
  fullName: "com.azure.core.util.BinaryData.fromStreamAsync(InputStream inputStream)"
  name: "fromStreamAsync(InputStream inputStream)"
  nameWithType: "BinaryData.fromStreamAsync(InputStream inputStream)"
  summary: "Creates an instance of <xref uid=\"com.azure.core.util.BinaryData\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BinaryData\"></xref> from the given <xref uid=\"java.io.InputStream\" data-throw-if-not-resolved=\"false\" data-raw-source=\"InputStream\"></xref>."
  modifiers:
  - "static"
  parameters:
  - description: "The <xref uid=\"java.io.InputStream\" data-throw-if-not-resolved=\"false\" data-raw-source=\"InputStream\"></xref> that <xref uid=\"com.azure.core.util.BinaryData\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BinaryData\"></xref> will represent."
    name: "inputStream"
    type: "<xref href=\"java.io.InputStream?alt=java.io.InputStream&text=InputStream\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public static Mono<BinaryData> fromStreamAsync(InputStream inputStream)"
  desc: "Creates an instance of <xref uid=\"com.azure.core.util.BinaryData\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BinaryData\"></xref> from the given <xref uid=\"java.io.InputStream\" data-throw-if-not-resolved=\"false\" data-raw-source=\"InputStream\"></xref>. **NOTE:** The <xref uid=\"java.io.InputStream\" data-throw-if-not-resolved=\"false\" data-raw-source=\"InputStream\"></xref> is not closed by this function.\n\n**Create an instance from an InputStream**\n\n```java\nfinal ByteArrayInputStream inputStream = new ByteArrayInputStream(\"Some Data\".getBytes(StandardCharsets.UTF_8));\n\n Mono<BinaryData> binaryDataMono = BinaryData.fromStreamAsync(inputStream);\n\n Disposable subscriber = binaryDataMono\n     .map(binaryData -> {\n         System.out.println(binaryData.toString());\n         return true;\n     })\n     .subscribe();\n\n // So that your program wait for above subscribe to complete.\n TimeUnit.SECONDS.sleep(5);\n subscriber.dispose();\n```"
  returns:
    description: "A <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> of <xref uid=\"com.azure.core.util.BinaryData\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BinaryData\"></xref> representing the <xref uid=\"java.io.InputStream\" data-throw-if-not-resolved=\"false\" data-raw-source=\"InputStream\"></xref>."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.core.util.BinaryData.fromString(java.lang.String)"
  fullName: "com.azure.core.util.BinaryData.fromString(String data)"
  name: "fromString(String data)"
  nameWithType: "BinaryData.fromString(String data)"
  summary: "Creates an instance of <xref uid=\"com.azure.core.util.BinaryData\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BinaryData\"></xref> from the given <xref uid=\"java.lang.String\" data-throw-if-not-resolved=\"false\" data-raw-source=\"String\"></xref>."
  modifiers:
  - "static"
  parameters:
  - description: "The <xref uid=\"java.lang.String\" data-throw-if-not-resolved=\"false\" data-raw-source=\"String\"></xref> that <xref uid=\"com.azure.core.util.BinaryData\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BinaryData\"></xref> will represent."
    name: "data"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public static BinaryData fromString(String data)"
  desc: "Creates an instance of <xref uid=\"com.azure.core.util.BinaryData\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BinaryData\"></xref> from the given <xref uid=\"java.lang.String\" data-throw-if-not-resolved=\"false\" data-raw-source=\"String\"></xref>.\n\nThe <xref uid=\"java.lang.String\" data-throw-if-not-resolved=\"false\" data-raw-source=\"String\"></xref> is converted into bytes using <xref uid=\"java.lang.String.getBytes*\" data-throw-if-not-resolved=\"false\" data-raw-source=\"String#getBytes(Charset)\"></xref> passing <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"StandardCharsets#UTF_8\"></xref>.\n\n**Create an instance from a String**\n\n```java\nfinal String data = \"Some Data\";\n // Following will use default character set as StandardCharsets.UTF_8\n BinaryData binaryData = BinaryData.fromString(data);\n System.out.println(binaryData.toString());\n```"
  returns:
    description: "A <xref uid=\"com.azure.core.util.BinaryData\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BinaryData\"></xref> representing the <xref uid=\"java.lang.String\" data-throw-if-not-resolved=\"false\" data-raw-source=\"String\"></xref>."
    type: "<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.core.util.BinaryData.getLength()"
  fullName: "com.azure.core.util.BinaryData.getLength()"
  name: "getLength()"
  nameWithType: "BinaryData.getLength()"
  summary: "Returns the length of the content, if it is known."
  syntax: "public Long getLength()"
  desc: "Returns the length of the content, if it is known. The length can be `null` if the source did not specify the length or the length cannot be determined without reading the whole content."
  returns:
    description: "the length of the content, if it is known."
    type: "<xref href=\"java.lang.Long?alt=java.lang.Long&text=Long\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.core.util.BinaryData.toByteBuffer()"
  fullName: "com.azure.core.util.BinaryData.toByteBuffer()"
  name: "toByteBuffer()"
  nameWithType: "BinaryData.toByteBuffer()"
  summary: "Returns a read-only <xref uid=\"java.nio.ByteBuffer\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ByteBuffer\"></xref> representation of this <xref uid=\"com.azure.core.util.BinaryData\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BinaryData\"></xref>."
  syntax: "public ByteBuffer toByteBuffer()"
  desc: "Returns a read-only <xref uid=\"java.nio.ByteBuffer\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ByteBuffer\"></xref> representation of this <xref uid=\"com.azure.core.util.BinaryData\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BinaryData\"></xref>.\n\nAttempting to mutate the returned <xref uid=\"java.nio.ByteBuffer\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ByteBuffer\"></xref> will throw a <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ReadOnlyBufferException\"></xref>.\n\n**Get a read-only ByteBuffer from the BinaryData**\n\n```java\nfinal byte[] data = \"Some Data\".getBytes(StandardCharsets.UTF_8);\n BinaryData binaryData = BinaryData.fromBytes(data);\n final byte[] bytes = new byte[data.length];\n binaryData.toByteBuffer().get(bytes, 0, data.length);\n System.out.println(new String(bytes));\n```"
  returns:
    description: "A read-only <xref uid=\"java.nio.ByteBuffer\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ByteBuffer\"></xref> representing the <xref uid=\"com.azure.core.util.BinaryData\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BinaryData\"></xref>."
    type: "<xref href=\"java.nio.ByteBuffer?alt=java.nio.ByteBuffer&text=ByteBuffer\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.core.util.BinaryData.toBytes()"
  fullName: "com.azure.core.util.BinaryData.toBytes()"
  name: "toBytes()"
  nameWithType: "BinaryData.toBytes()"
  summary: "Returns a byte array representation of this <xref uid=\"com.azure.core.util.BinaryData\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BinaryData\"></xref>."
  syntax: "public byte[] toBytes()"
  desc: "Returns a byte array representation of this <xref uid=\"com.azure.core.util.BinaryData\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BinaryData\"></xref>. This method returns a reference to the underlying byte array. Modifying the contents of the returned byte array will also change the content of this BinaryData instance. If the content source of this BinaryData instance is a file, an Inputstream or a `Flux` the source is not modified. To safely update the byte array, it is recommended to make a copy of the contents first."
  returns:
    description: "A byte array representing this <xref uid=\"com.azure.core.util.BinaryData\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BinaryData\"></xref>."
    type: "<xref href=\"byte?alt=byte&text=byte\" data-throw-if-not-resolved=\"False\" />[]"
- uid: "com.azure.core.util.BinaryData.toFluxByteBuffer()"
  fullName: "com.azure.core.util.BinaryData.toFluxByteBuffer()"
  name: "toFluxByteBuffer()"
  nameWithType: "BinaryData.toFluxByteBuffer()"
  summary: "Returns the content of this <xref uid=\"com.azure.core.util.BinaryData\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BinaryData\"></xref> instance as a flux of <xref uid=\"java.nio.ByteBuffer\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ByteBuffers\"></xref>."
  syntax: "public Flux<ByteBuffer> toFluxByteBuffer()"
  desc: "Returns the content of this <xref uid=\"com.azure.core.util.BinaryData\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BinaryData\"></xref> instance as a flux of <xref uid=\"java.nio.ByteBuffer\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ByteBuffers\"></xref>. The content is not read from the underlying data source until the <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Flux\"></xref> is subscribed to."
  returns:
    description: "the content of this <xref uid=\"com.azure.core.util.BinaryData\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BinaryData\"></xref> instance as a flux of <xref uid=\"java.nio.ByteBuffer\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ByteBuffers\"></xref>."
    type: "<xref href=\"reactor.core.publisher.Flux?alt=reactor.core.publisher.Flux&text=Flux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.nio.ByteBuffer?alt=java.nio.ByteBuffer&text=ByteBuffer\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.core.util.BinaryData.toStream()"
  fullName: "com.azure.core.util.BinaryData.toStream()"
  name: "toStream()"
  nameWithType: "BinaryData.toStream()"
  summary: "Returns an <xref uid=\"java.io.InputStream\" data-throw-if-not-resolved=\"false\" data-raw-source=\"InputStream\"></xref> representation of this <xref uid=\"com.azure.core.util.BinaryData\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BinaryData\"></xref>."
  syntax: "public InputStream toStream()"
  desc: "Returns an <xref uid=\"java.io.InputStream\" data-throw-if-not-resolved=\"false\" data-raw-source=\"InputStream\"></xref> representation of this <xref uid=\"com.azure.core.util.BinaryData\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BinaryData\"></xref>.\n\n**Get an InputStream from the BinaryData**\n\n```java\nfinal byte[] data = \"Some Data\".getBytes(StandardCharsets.UTF_8);\n BinaryData binaryData = BinaryData.fromStream(new ByteArrayInputStream(data));\n final byte[] bytes = new byte[data.length];\n binaryData.toStream().read(bytes, 0, data.length);\n System.out.println(new String(bytes));\n```"
  returns:
    description: "An <xref uid=\"java.io.InputStream\" data-throw-if-not-resolved=\"false\" data-raw-source=\"InputStream\"></xref> representing the <xref uid=\"com.azure.core.util.BinaryData\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BinaryData\"></xref>."
    type: "<xref href=\"java.io.InputStream?alt=java.io.InputStream&text=InputStream\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.core.util.BinaryData.toString()"
  fullName: "com.azure.core.util.BinaryData.toString()"
  name: "toString()"
  nameWithType: "BinaryData.toString()"
  summary: "Returns a <xref uid=\"java.lang.String\" data-throw-if-not-resolved=\"false\" data-raw-source=\"String\"></xref> representation of this <xref uid=\"com.azure.core.util.BinaryData\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BinaryData\"></xref> by converting its data using the UTF-8 character set."
  overridden: "java.lang.Object.toString()"
  syntax: "public String toString()"
  desc: "Returns a <xref uid=\"java.lang.String\" data-throw-if-not-resolved=\"false\" data-raw-source=\"String\"></xref> representation of this <xref uid=\"com.azure.core.util.BinaryData\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BinaryData\"></xref> by converting its data using the UTF-8 character set. A new instance of String is created each time this method is called."
  returns:
    description: "A <xref uid=\"java.lang.String\" data-throw-if-not-resolved=\"false\" data-raw-source=\"String\"></xref> representing this <xref uid=\"com.azure.core.util.BinaryData\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BinaryData\"></xref>."
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
type: "class"
desc: "BinaryData is a convenient data interchange class for use throughout the Azure SDK for Java. Put simply, BinaryData enables developers to bring data in from external sources, and read it back from Azure services, in formats that appeal to them. This leaves BinaryData, and the Azure SDK for Java, the task of converting this data into appropriate formats to be transferred to and from these external services. This enables developers to focus on their business logic, and enables the Azure SDK for Java to optimize operations for best performance.\n\nBinaryData in its simplest form can be thought of as a container for content. Often this content is already in-memory as a String, byte array, or an Object that can be serialized into a String or byte\\[\\]. When the BinaryData is about to be sent to an Azure Service, this in-memory content is copied into the network request and sent to the service.\n\nIn more performance critical scenarios, where copying data into memory results in increased memory pressure, it is possible to create a BinaryData instance from a stream of data. From this, BinaryData can be connected directly to the outgoing network connection so that the stream is read directly to the network, without needing to first be read into memory on the system. Similarly, it is possible to read a stream of data from a BinaryData returned from an Azure Service without it first being read into memory. In many situations, these streaming operations can drastically reduce the memory pressure in applications, and so it is encouraged that all developers very carefully consider their ability to use the most appropriate API in BinaryData whenever they encounter an client library that makes use of BinaryData.\n\nRefer to the documentation of each method in the BinaryData class to better understand its performance characteristics, and refer to the samples below to understand the common usage scenarios of this class.\n\n<xref uid=\"com.azure.core.util.BinaryData\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BinaryData\"></xref> can be created from an <xref uid=\"java.io.InputStream\" data-throw-if-not-resolved=\"false\" data-raw-source=\"InputStream\"></xref>, a <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Flux\"></xref> of <xref uid=\"java.nio.ByteBuffer\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ByteBuffer\"></xref>, a <xref uid=\"java.lang.String\" data-throw-if-not-resolved=\"false\" data-raw-source=\"String\"></xref>, an <xref uid=\"java.lang.Object\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Object\"></xref>, a <xref uid=\"java.nio.file.Path\" data-throw-if-not-resolved=\"false\" data-raw-source=\"file\"></xref>, or a byte array.\n\n**A note on data mutability**\n\n<xref uid=\"com.azure.core.util.BinaryData\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BinaryData\"></xref> does not copy data on construction. BinaryData keeps a reference to the source content and is accessed when a read request is made. So, any modifications to the underlying source before the content is read can result in undefined behavior.\n\nTo create an instance of <xref uid=\"com.azure.core.util.BinaryData\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BinaryData\"></xref>, use the various static factory methods available. They all start with `'from'` prefix, for example <xref uid=\"com.azure.core.util.BinaryData.fromBytes(byte[])\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BinaryData#fromBytes(byte[])\"></xref>.\n\n**Create an instance from a byte array**\n\n```java\nfinal byte[] data = \"Some Data\".getBytes(StandardCharsets.UTF_8);\n BinaryData binaryData = BinaryData.fromBytes(data);\n System.out.println(new String(binaryData.toBytes(), StandardCharsets.UTF_8));\n```\n\n**Create an instance from a String**\n\n```java\nfinal String data = \"Some Data\";\n // Following will use default character set as StandardCharsets.UTF_8\n BinaryData binaryData = BinaryData.fromString(data);\n System.out.println(binaryData.toString());\n```\n\n**Create an instance from an InputStream**\n\n```java\nfinal ByteArrayInputStream inputStream = new ByteArrayInputStream(\"Some Data\".getBytes(StandardCharsets.UTF_8));\n BinaryData binaryData = BinaryData.fromStream(inputStream);\n System.out.println(binaryData.toString());\n```\n\n**Create an instance from an Object**\n\n```java\nclass Person {\n     @JsonProperty\n     private String name;\n\n     @JsonSetter\n     public Person setName(String name) {\n         this.name = name;\n         return this;\n     }\n\n     @JsonGetter\n     public String getName() {\n         return name;\n     }\n }\n final Person data = new Person().setName(\"John\");\n\n // Provide your custom serializer or use Azure provided serializers.\n // https://mvnrepository.com/artifact/com.azure/azure-core-serializer-json-jackson or\n // https://mvnrepository.com/artifact/com.azure/azure-core-serializer-json-gson\n BinaryData binaryData = BinaryData.fromObject(data);\n\n System.out.println(binaryData.toString());\n```\n\n**Create an instance from `Flux`**\n\n```java\nfinal byte[] data = \"Some Data\".getBytes(StandardCharsets.UTF_8);\n final Flux<ByteBuffer> dataFlux = Flux.just(ByteBuffer.wrap(data));\n\n Mono<BinaryData> binaryDataMono = BinaryData.fromFlux(dataFlux);\n\n Disposable subscriber = binaryDataMono\n     .map(binaryData -> {\n         System.out.println(binaryData.toString());\n         return true;\n     })\n     .subscribe();\n\n // So that your program wait for above subscribe to complete.\n TimeUnit.SECONDS.sleep(5);\n subscriber.dispose();\n```\n\n**Create an instance from a file**\n\n```java\nBinaryData binaryData = BinaryData.fromFile(new File(\"path/to/file\").toPath());\n System.out.println(new String(binaryData.toBytes(), StandardCharsets.UTF_8));\n```"
metadata: {}
package: "com.azure.core.util"
artifact: com.azure:azure-core:1.22.0-beta.1
