### YamlMime:JavaType
uid: "com.azure.cosmos.implementation.guava25.base.Stopwatch"
fullName: "com.azure.cosmos.implementation.guava25.base.Stopwatch"
name: "Stopwatch"
nameWithType: "Stopwatch"
summary: "An object that measures elapsed time in nanoseconds. It is useful to measure elapsed time using this class instead of direct calls to <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"System#nanoTime\"></xref> for a few reasons:\n\n *  An alternate time source can be substituted, for testing or performance reasons.\n *  As documented by `nanoTime`, the value returned has no absolute meaning, and can only be interpreted as relative to another timestamp returned by `nanoTime` at a different time. `Stopwatch` is a more effective abstraction because it exposes only these relative values, not the absolute ones.\n\nBasic usage:\n\n```java\nStopwatch stopwatch = Stopwatch.createStarted();\n doSomething();\n stopwatch.stop(); // optional\n\n Duration duration = stopwatch.elapsed();\n\n log.info(\"time: \" + stopwatch); // formatted string like \"12.3 ms\"\n```\n\nStopwatch methods are not idempotent; it is an error to start or stop a stopwatch that is already in the desired state.\n\nWhen testing code that uses this class, use <xref uid=\"com.azure.cosmos.implementation.guava25.base.Stopwatch.createUnstarted(com.azure.cosmos.implementation.guava25.base.Ticker)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#createUnstarted(Ticker)\"></xref> or <xref uid=\"com.azure.cosmos.implementation.guava25.base.Stopwatch.createStarted(com.azure.cosmos.implementation.guava25.base.Ticker)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#createStarted(Ticker)\"></xref> to supply a fake or mock ticker. This allows you to simulate any valid behavior of the stopwatch.\n\n**Note:** This class is not thread-safe.\n\n**Warning for Android users:** a stopwatch with default behavior may not continue to keep time while the device is asleep. Instead, create one like this:\n\n```java\nStopwatch.createStarted(\n      new Ticker() {\n        public long read() {\n          return android.os.SystemClock.elapsedRealtimeNanos();\n        }\n      });\n```"
inheritances:
- "<xref href=\"java.lang.Object\" data-throw-if-not-resolved=\"False\" />"
inheritedMembers:
- "java.lang.Object.clone()"
- "java.lang.Object.equals(java.lang.Object)"
- "java.lang.Object.finalize()"
- "java.lang.Object.getClass()"
- "java.lang.Object.hashCode()"
- "java.lang.Object.notify()"
- "java.lang.Object.notifyAll()"
- "java.lang.Object.toString()"
- "java.lang.Object.wait()"
- "java.lang.Object.wait(long)"
- "java.lang.Object.wait(long,int)"
syntax: "public final class Stopwatch"
methods:
- "com.azure.cosmos.implementation.guava25.base.Stopwatch.createStarted()"
- "com.azure.cosmos.implementation.guava25.base.Stopwatch.createStarted(com.azure.cosmos.implementation.guava25.base.Ticker)"
- "com.azure.cosmos.implementation.guava25.base.Stopwatch.createUnstarted()"
- "com.azure.cosmos.implementation.guava25.base.Stopwatch.createUnstarted(com.azure.cosmos.implementation.guava25.base.Ticker)"
- "com.azure.cosmos.implementation.guava25.base.Stopwatch.elapsed()"
- "com.azure.cosmos.implementation.guava25.base.Stopwatch.elapsed(java.util.concurrent.TimeUnit)"
- "com.azure.cosmos.implementation.guava25.base.Stopwatch.isRunning()"
- "com.azure.cosmos.implementation.guava25.base.Stopwatch.reset()"
- "com.azure.cosmos.implementation.guava25.base.Stopwatch.start()"
- "com.azure.cosmos.implementation.guava25.base.Stopwatch.stop()"
- "com.azure.cosmos.implementation.guava25.base.Stopwatch.toString()"
type: "class"
metadata: {}
package: "com.azure.cosmos.implementation.guava25.base"
artifact: com.azure:azure-cosmos:4.4.0-beta.1
