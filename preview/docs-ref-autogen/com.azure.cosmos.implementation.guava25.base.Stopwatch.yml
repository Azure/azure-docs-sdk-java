### YamlMime:ManagedReference
items:
- uid: com.azure.cosmos.implementation.guava25.base.Stopwatch
  id: Stopwatch
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.base
  children:
  - com.azure.cosmos.implementation.guava25.base.Stopwatch.createStarted()
  - com.azure.cosmos.implementation.guava25.base.Stopwatch.createStarted(com.azure.cosmos.implementation.guava25.base.Ticker)
  - com.azure.cosmos.implementation.guava25.base.Stopwatch.createUnstarted()
  - com.azure.cosmos.implementation.guava25.base.Stopwatch.createUnstarted(com.azure.cosmos.implementation.guava25.base.Ticker)
  - com.azure.cosmos.implementation.guava25.base.Stopwatch.elapsed()
  - com.azure.cosmos.implementation.guava25.base.Stopwatch.elapsed(java.util.concurrent.TimeUnit)
  - com.azure.cosmos.implementation.guava25.base.Stopwatch.isRunning()
  - com.azure.cosmos.implementation.guava25.base.Stopwatch.reset()
  - com.azure.cosmos.implementation.guava25.base.Stopwatch.start()
  - com.azure.cosmos.implementation.guava25.base.Stopwatch.stop()
  - com.azure.cosmos.implementation.guava25.base.Stopwatch.toString()
  langs:
  - java
  name: Stopwatch
  nameWithType: Stopwatch
  fullName: com.azure.cosmos.implementation.guava25.base.Stopwatch
  type: Class
  package: com.azure.cosmos.implementation.guava25.base
  summary: >-
    An object that measures elapsed time in nanoseconds. It is useful to measure elapsed time using this class instead of direct calls to <xref uid="" data-throw-if-not-resolved="false">System#nanoTime</xref> for a few reasons:

     *  An alternate time source can be substituted, for testing or performance reasons.
     *  As documented by `nanoTime`, the value returned has no absolute meaning, and can only be interpreted as relative to another timestamp returned by `nanoTime` at a different time. `Stopwatch` is a more effective abstraction because it exposes only these relative values, not the absolute ones.

    Basic usage:


    ```java

    Stopwatch stopwatch = Stopwatch.createStarted();
     doSomething();
     stopwatch.stop(); // optional

     Duration duration = stopwatch.elapsed();

     log.info("time: " + stopwatch); // formatted string like "12.3 ms"
    ```


    Stopwatch methods are not idempotent; it is an error to start or stop a stopwatch that is already in the desired state.


    When testing code that uses this class, use <xref uid="com.azure.cosmos.implementation.guava25.base.Stopwatch.createUnstarted(com.azure.cosmos.implementation.guava25.base.Ticker)" data-throw-if-not-resolved="false">#createUnstarted(Ticker)</xref> or <xref uid="com.azure.cosmos.implementation.guava25.base.Stopwatch.createStarted(com.azure.cosmos.implementation.guava25.base.Ticker)" data-throw-if-not-resolved="false">#createStarted(Ticker)</xref> to supply a fake or mock ticker. This allows you to simulate any valid behavior of the stopwatch.


    **Note:** This class is not thread-safe.


    **Warning for Android users:** a stopwatch with default behavior may not continue to keep time while the device is asleep. Instead, create one like this:


    ```java

    Stopwatch.createStarted(
          new Ticker() {
            public long read() {
              return android.os.SystemClock.elapsedRealtimeNanos();
            }
          });
    ```
  syntax:
    content: public final class Stopwatch
  inheritance:
  - java.lang.Object
  inheritedMembers:
  - java.lang.Object.clone()
  - java.lang.Object.equals(java.lang.Object)
  - java.lang.Object.finalize()
  - java.lang.Object.getClass()
  - java.lang.Object.hashCode()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.toString()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
- uid: com.azure.cosmos.implementation.guava25.base.Stopwatch.Stopwatch()
  id: Stopwatch()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.base.Stopwatch
  langs:
  - java
  name: Stopwatch()
  nameWithType: Stopwatch.Stopwatch()
  fullName: com.azure.cosmos.implementation.guava25.base.Stopwatch.Stopwatch()
  overload: com.azure.cosmos.implementation.guava25.base.Stopwatch.Stopwatch*
  type: Constructor
  package: com.azure.cosmos.implementation.guava25.base
  syntax:
    content: " Stopwatch()"
- uid: com.azure.cosmos.implementation.guava25.base.Stopwatch.Stopwatch(com.azure.cosmos.implementation.guava25.base.Ticker)
  id: Stopwatch(com.azure.cosmos.implementation.guava25.base.Ticker)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.base.Stopwatch
  langs:
  - java
  name: Stopwatch(Ticker ticker)
  nameWithType: Stopwatch.Stopwatch(Ticker ticker)
  fullName: com.azure.cosmos.implementation.guava25.base.Stopwatch.Stopwatch(Ticker ticker)
  overload: com.azure.cosmos.implementation.guava25.base.Stopwatch.Stopwatch*
  type: Constructor
  package: com.azure.cosmos.implementation.guava25.base
  syntax:
    content: " Stopwatch(Ticker ticker)"
    parameters:
    - id: ticker
      type: com.azure.cosmos.implementation.guava25.base.Ticker
- uid: com.azure.cosmos.implementation.guava25.base.Stopwatch.createStarted()
  id: createStarted()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.base.Stopwatch
  langs:
  - java
  name: createStarted()
  nameWithType: Stopwatch.createStarted()
  fullName: com.azure.cosmos.implementation.guava25.base.Stopwatch.createStarted()
  overload: com.azure.cosmos.implementation.guava25.base.Stopwatch.createStarted*
  type: Method
  package: com.azure.cosmos.implementation.guava25.base
  summary: Creates (and starts) a new stopwatch using <xref uid="" data-throw-if-not-resolved="false">System#nanoTime</xref> as its time source.
  syntax:
    content: public static Stopwatch createStarted()
    return:
      type: com.azure.cosmos.implementation.guava25.base.Stopwatch
- uid: com.azure.cosmos.implementation.guava25.base.Stopwatch.createStarted(com.azure.cosmos.implementation.guava25.base.Ticker)
  id: createStarted(com.azure.cosmos.implementation.guava25.base.Ticker)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.base.Stopwatch
  langs:
  - java
  name: createStarted(Ticker ticker)
  nameWithType: Stopwatch.createStarted(Ticker ticker)
  fullName: com.azure.cosmos.implementation.guava25.base.Stopwatch.createStarted(Ticker ticker)
  overload: com.azure.cosmos.implementation.guava25.base.Stopwatch.createStarted*
  type: Method
  package: com.azure.cosmos.implementation.guava25.base
  summary: Creates (and starts) a new stopwatch, using the specified time source.
  syntax:
    content: public static Stopwatch createStarted(Ticker ticker)
    parameters:
    - id: ticker
      type: com.azure.cosmos.implementation.guava25.base.Ticker
    return:
      type: com.azure.cosmos.implementation.guava25.base.Stopwatch
- uid: com.azure.cosmos.implementation.guava25.base.Stopwatch.createUnstarted()
  id: createUnstarted()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.base.Stopwatch
  langs:
  - java
  name: createUnstarted()
  nameWithType: Stopwatch.createUnstarted()
  fullName: com.azure.cosmos.implementation.guava25.base.Stopwatch.createUnstarted()
  overload: com.azure.cosmos.implementation.guava25.base.Stopwatch.createUnstarted*
  type: Method
  package: com.azure.cosmos.implementation.guava25.base
  summary: Creates (but does not start) a new stopwatch using <xref uid="" data-throw-if-not-resolved="false">System#nanoTime</xref> as its time source.
  syntax:
    content: public static Stopwatch createUnstarted()
    return:
      type: com.azure.cosmos.implementation.guava25.base.Stopwatch
- uid: com.azure.cosmos.implementation.guava25.base.Stopwatch.createUnstarted(com.azure.cosmos.implementation.guava25.base.Ticker)
  id: createUnstarted(com.azure.cosmos.implementation.guava25.base.Ticker)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.base.Stopwatch
  langs:
  - java
  name: createUnstarted(Ticker ticker)
  nameWithType: Stopwatch.createUnstarted(Ticker ticker)
  fullName: com.azure.cosmos.implementation.guava25.base.Stopwatch.createUnstarted(Ticker ticker)
  overload: com.azure.cosmos.implementation.guava25.base.Stopwatch.createUnstarted*
  type: Method
  package: com.azure.cosmos.implementation.guava25.base
  summary: Creates (but does not start) a new stopwatch, using the specified time source.
  syntax:
    content: public static Stopwatch createUnstarted(Ticker ticker)
    parameters:
    - id: ticker
      type: com.azure.cosmos.implementation.guava25.base.Ticker
    return:
      type: com.azure.cosmos.implementation.guava25.base.Stopwatch
- uid: com.azure.cosmos.implementation.guava25.base.Stopwatch.elapsed()
  id: elapsed()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.base.Stopwatch
  langs:
  - java
  name: elapsed()
  nameWithType: Stopwatch.elapsed()
  fullName: com.azure.cosmos.implementation.guava25.base.Stopwatch.elapsed()
  overload: com.azure.cosmos.implementation.guava25.base.Stopwatch.elapsed*
  type: Method
  package: com.azure.cosmos.implementation.guava25.base
  summary: Returns the current elapsed time shown on this stopwatch as a <xref uid="java.time.Duration" data-throw-if-not-resolved="false">Duration</xref>. Unlike <xref uid="com.azure.cosmos.implementation.guava25.base.Stopwatch.elapsed(java.util.concurrent.TimeUnit)" data-throw-if-not-resolved="false">#elapsed(TimeUnit)</xref>, this method does not lose any precision due to rounding.
  syntax:
    content: public Duration elapsed()
    return:
      type: java.time.Duration
- uid: com.azure.cosmos.implementation.guava25.base.Stopwatch.elapsed(java.util.concurrent.TimeUnit)
  id: elapsed(java.util.concurrent.TimeUnit)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.base.Stopwatch
  langs:
  - java
  name: elapsed(TimeUnit desiredUnit)
  nameWithType: Stopwatch.elapsed(TimeUnit desiredUnit)
  fullName: com.azure.cosmos.implementation.guava25.base.Stopwatch.elapsed(TimeUnit desiredUnit)
  overload: com.azure.cosmos.implementation.guava25.base.Stopwatch.elapsed*
  type: Method
  package: com.azure.cosmos.implementation.guava25.base
  summary: >-
    Returns the current elapsed time shown on this stopwatch, expressed in the desired time unit, with any fraction rounded down.


    **Note:** the overhead of measurement can be more than a microsecond, so it is generally not useful to specify <xref uid="java.util.concurrent.TimeUnit.NANOSECONDS" data-throw-if-not-resolved="false">TimeUnit#NANOSECONDS</xref> precision here.


    It is generally not a good idea to use an ambiguous, unitless `long` to represent elapsed time. Therefore, we recommend using <xref uid="com.azure.cosmos.implementation.guava25.base.Stopwatch.elapsed()" data-throw-if-not-resolved="false">#elapsed()</xref> instead, which returns a strongly-typed <xref uid="java.time.Duration" data-throw-if-not-resolved="false">Duration</xref> instance.
  syntax:
    content: public long elapsed(TimeUnit desiredUnit)
    parameters:
    - id: desiredUnit
      type: java.util.concurrent.TimeUnit
    return:
      type: long
- uid: com.azure.cosmos.implementation.guava25.base.Stopwatch.isRunning()
  id: isRunning()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.base.Stopwatch
  langs:
  - java
  name: isRunning()
  nameWithType: Stopwatch.isRunning()
  fullName: com.azure.cosmos.implementation.guava25.base.Stopwatch.isRunning()
  overload: com.azure.cosmos.implementation.guava25.base.Stopwatch.isRunning*
  type: Method
  package: com.azure.cosmos.implementation.guava25.base
  summary: Returns `true` if <xref uid="com.azure.cosmos.implementation.guava25.base.Stopwatch.start()" data-throw-if-not-resolved="false">#start()</xref> has been called on this stopwatch, and <xref uid="com.azure.cosmos.implementation.guava25.base.Stopwatch.stop()" data-throw-if-not-resolved="false">#stop()</xref> has not been called since the last call to `start()`.
  syntax:
    content: public boolean isRunning()
    return:
      type: boolean
- uid: com.azure.cosmos.implementation.guava25.base.Stopwatch.reset()
  id: reset()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.base.Stopwatch
  langs:
  - java
  name: reset()
  nameWithType: Stopwatch.reset()
  fullName: com.azure.cosmos.implementation.guava25.base.Stopwatch.reset()
  overload: com.azure.cosmos.implementation.guava25.base.Stopwatch.reset*
  type: Method
  package: com.azure.cosmos.implementation.guava25.base
  summary: Sets the elapsed time for this stopwatch to zero, and places it in a stopped state.
  syntax:
    content: public Stopwatch reset()
    return:
      type: com.azure.cosmos.implementation.guava25.base.Stopwatch
      description: this <code>Stopwatch</code> instance
- uid: com.azure.cosmos.implementation.guava25.base.Stopwatch.start()
  id: start()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.base.Stopwatch
  langs:
  - java
  name: start()
  nameWithType: Stopwatch.start()
  fullName: com.azure.cosmos.implementation.guava25.base.Stopwatch.start()
  overload: com.azure.cosmos.implementation.guava25.base.Stopwatch.start*
  type: Method
  package: com.azure.cosmos.implementation.guava25.base
  summary: Starts the stopwatch.
  syntax:
    content: public Stopwatch start()
    return:
      type: com.azure.cosmos.implementation.guava25.base.Stopwatch
      description: this <code>Stopwatch</code> instance
- uid: com.azure.cosmos.implementation.guava25.base.Stopwatch.stop()
  id: stop()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.base.Stopwatch
  langs:
  - java
  name: stop()
  nameWithType: Stopwatch.stop()
  fullName: com.azure.cosmos.implementation.guava25.base.Stopwatch.stop()
  overload: com.azure.cosmos.implementation.guava25.base.Stopwatch.stop*
  type: Method
  package: com.azure.cosmos.implementation.guava25.base
  summary: Stops the stopwatch. Future reads will return the fixed duration that had elapsed up to this point.
  syntax:
    content: public Stopwatch stop()
    return:
      type: com.azure.cosmos.implementation.guava25.base.Stopwatch
      description: this <code>Stopwatch</code> instance
- uid: com.azure.cosmos.implementation.guava25.base.Stopwatch.toString()
  id: toString()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.base.Stopwatch
  langs:
  - java
  name: toString()
  nameWithType: Stopwatch.toString()
  fullName: com.azure.cosmos.implementation.guava25.base.Stopwatch.toString()
  overload: com.azure.cosmos.implementation.guava25.base.Stopwatch.toString*
  type: Method
  package: com.azure.cosmos.implementation.guava25.base
  summary: Returns a string representation of the current elapsed time.
  syntax:
    content: public String toString()
    return:
      type: java.lang.String
references:
- uid: com.azure.cosmos.implementation.guava25.base.Stopwatch.Stopwatch*
  name: Stopwatch
  nameWithType: Stopwatch.Stopwatch
  fullName: com.azure.cosmos.implementation.guava25.base.Stopwatch.Stopwatch
  package: com.azure.cosmos.implementation.guava25.base
- uid: com.azure.cosmos.implementation.guava25.base.Ticker
  name: Ticker
  nameWithType: Ticker
  fullName: com.azure.cosmos.implementation.guava25.base.Ticker
- uid: com.azure.cosmos.implementation.guava25.base.Stopwatch.createUnstarted*
  name: createUnstarted
  nameWithType: Stopwatch.createUnstarted
  fullName: com.azure.cosmos.implementation.guava25.base.Stopwatch.createUnstarted
  package: com.azure.cosmos.implementation.guava25.base
- uid: com.azure.cosmos.implementation.guava25.base.Stopwatch.createStarted*
  name: createStarted
  nameWithType: Stopwatch.createStarted
  fullName: com.azure.cosmos.implementation.guava25.base.Stopwatch.createStarted
  package: com.azure.cosmos.implementation.guava25.base
- uid: boolean
  spec.java:
  - uid: boolean
    name: boolean
    fullName: boolean
- uid: com.azure.cosmos.implementation.guava25.base.Stopwatch.isRunning*
  name: isRunning
  nameWithType: Stopwatch.isRunning
  fullName: com.azure.cosmos.implementation.guava25.base.Stopwatch.isRunning
  package: com.azure.cosmos.implementation.guava25.base
- uid: com.azure.cosmos.implementation.guava25.base.Stopwatch.start*
  name: start
  nameWithType: Stopwatch.start
  fullName: com.azure.cosmos.implementation.guava25.base.Stopwatch.start
  package: com.azure.cosmos.implementation.guava25.base
- uid: com.azure.cosmos.implementation.guava25.base.Stopwatch.stop*
  name: stop
  nameWithType: Stopwatch.stop
  fullName: com.azure.cosmos.implementation.guava25.base.Stopwatch.stop
  package: com.azure.cosmos.implementation.guava25.base
- uid: com.azure.cosmos.implementation.guava25.base.Stopwatch.reset*
  name: reset
  nameWithType: Stopwatch.reset
  fullName: com.azure.cosmos.implementation.guava25.base.Stopwatch.reset
  package: com.azure.cosmos.implementation.guava25.base
- uid: java.util.concurrent.TimeUnit
  spec.java:
  - uid: java.util.concurrent.TimeUnit
    name: TimeUnit
    fullName: java.util.concurrent.TimeUnit
- uid: long
  spec.java:
  - uid: long
    name: long
    fullName: long
- uid: com.azure.cosmos.implementation.guava25.base.Stopwatch.elapsed*
  name: elapsed
  nameWithType: Stopwatch.elapsed
  fullName: com.azure.cosmos.implementation.guava25.base.Stopwatch.elapsed
  package: com.azure.cosmos.implementation.guava25.base
- uid: java.time.Duration
  spec.java:
  - uid: java.time.Duration
    name: Duration
    fullName: java.time.Duration
- uid: java.lang.String
  spec.java:
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
- uid: com.azure.cosmos.implementation.guava25.base.Stopwatch.toString*
  name: toString
  nameWithType: Stopwatch.toString
  fullName: com.azure.cosmos.implementation.guava25.base.Stopwatch.toString
  package: com.azure.cosmos.implementation.guava25.base
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: java.lang.Object.finalize()
  name: Object.finalize()
  nameWithType: Object.finalize()
  fullName: java.lang.Object.finalize()
- uid: java.lang.Object.clone()
  name: Object.clone()
  nameWithType: Object.clone()
  fullName: java.lang.Object.clone()
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: java.lang.Object.equals(java.lang.Object)
  name: Object.equals(Object)
  nameWithType: Object.equals(Object)
  fullName: java.lang.Object.equals(java.lang.Object)
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.lang.Object.hashCode()
  name: Object.hashCode()
  nameWithType: Object.hashCode()
  fullName: java.lang.Object.hashCode()
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: java.lang.Object.toString()
  name: Object.toString()
  nameWithType: Object.toString()
  fullName: java.lang.Object.toString()
