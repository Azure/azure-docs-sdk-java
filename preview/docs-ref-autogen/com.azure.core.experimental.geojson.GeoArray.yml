### YamlMime:ManagedReference
items:
- uid: com.azure.core.experimental.geojson.GeoArray
  id: GeoArray
  artifact: com.azure:azure-core-experimental:1.0.0-beta.8
  parent: com.azure.core.experimental.geojson
  children:
  - com.azure.core.experimental.geojson.GeoArray.add(T)
  - com.azure.core.experimental.geojson.GeoArray.add(int,T)
  - com.azure.core.experimental.geojson.GeoArray.addAll(int,java.util.Collection<? extends T>)
  - com.azure.core.experimental.geojson.GeoArray.addAll(java.util.Collection<? extends T>)
  - com.azure.core.experimental.geojson.GeoArray.clear()
  - com.azure.core.experimental.geojson.GeoArray.equals(java.lang.Object)
  - com.azure.core.experimental.geojson.GeoArray.get(int)
  - com.azure.core.experimental.geojson.GeoArray.hashCode()
  - com.azure.core.experimental.geojson.GeoArray.iterator()
  - com.azure.core.experimental.geojson.GeoArray.listIterator(int)
  - com.azure.core.experimental.geojson.GeoArray.remove(int)
  - com.azure.core.experimental.geojson.GeoArray.remove(java.lang.Object)
  - com.azure.core.experimental.geojson.GeoArray.removeAll(java.util.Collection<?>)
  - com.azure.core.experimental.geojson.GeoArray.removeIf(java.util.function.Predicate<? super T>)
  - com.azure.core.experimental.geojson.GeoArray.replaceAll(java.util.function.UnaryOperator<T>)
  - com.azure.core.experimental.geojson.GeoArray.retainAll(java.util.Collection<?>)
  - com.azure.core.experimental.geojson.GeoArray.set(int,T)
  - com.azure.core.experimental.geojson.GeoArray.size()
  - com.azure.core.experimental.geojson.GeoArray.sort(java.util.Comparator<? super T>)
  - com.azure.core.experimental.geojson.GeoArray.subList(int,int)
  langs:
  - java
  name: GeoArray<T>
  nameWithType: GeoArray<T>
  fullName: com.azure.core.experimental.geojson.GeoArray<T>
  type: Class
  package: com.azure.core.experimental.geojson
  summary: A read-only list of geometry coordinates.
  syntax:
    content: public class GeoArray<T> extends AbstractList<T>
    typeParameters:
    - id: T
  inheritance:
  - java.lang.Object
  - java.util.AbstractCollection
  - java.util.AbstractList
  inheritedMembers:
  - java.lang.Object.clone()
  - java.lang.Object.finalize()
  - java.lang.Object.getClass()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
  - java.util.AbstractCollection.<T>toArray(T[])
  - java.util.AbstractCollection.addAll(java.util.Collection<? extends E>)
  - java.util.AbstractCollection.contains(java.lang.Object)
  - java.util.AbstractCollection.containsAll(java.util.Collection<?>)
  - java.util.AbstractCollection.isEmpty()
  - java.util.AbstractCollection.remove(java.lang.Object)
  - java.util.AbstractCollection.removeAll(java.util.Collection<?>)
  - java.util.AbstractCollection.retainAll(java.util.Collection<?>)
  - java.util.AbstractCollection.size()
  - java.util.AbstractCollection.toArray()
  - java.util.AbstractCollection.toString()
  - java.util.AbstractList.add(E)
  - java.util.AbstractList.add(int,E)
  - java.util.AbstractList.addAll(int,java.util.Collection<? extends E>)
  - java.util.AbstractList.clear()
  - java.util.AbstractList.equals(java.lang.Object)
  - java.util.AbstractList.get(int)
  - java.util.AbstractList.hashCode()
  - java.util.AbstractList.indexOf(java.lang.Object)
  - java.util.AbstractList.iterator()
  - java.util.AbstractList.lastIndexOf(java.lang.Object)
  - java.util.AbstractList.listIterator()
  - java.util.AbstractList.listIterator(int)
  - java.util.AbstractList.remove(int)
  - java.util.AbstractList.removeRange(int,int)
  - java.util.AbstractList.set(int,E)
  - java.util.AbstractList.subList(int,int)
- uid: com.azure.core.experimental.geojson.GeoArray.GeoArray(java.lang.Object)
  id: GeoArray(java.lang.Object)
  artifact: com.azure:azure-core-experimental:1.0.0-beta.8
  parent: com.azure.core.experimental.geojson.GeoArray
  langs:
  - java
  name: GeoArray(Object container)
  nameWithType: GeoArray<T>.GeoArray(Object container)
  fullName: com.azure.core.experimental.geojson.GeoArray<T>.GeoArray(Object container)
  overload: com.azure.core.experimental.geojson.GeoArray.GeoArray*
  type: Constructor
  package: com.azure.core.experimental.geojson
  syntax:
    content: " GeoArray(Object container)"
    parameters:
    - id: container
      type: java.lang.Object
- uid: com.azure.core.experimental.geojson.GeoArray.add(T)
  id: add(T)
  artifact: com.azure:azure-core-experimental:1.0.0-beta.8
  parent: com.azure.core.experimental.geojson.GeoArray
  langs:
  - java
  name: add(T t)
  nameWithType: GeoArray<T>.add(T t)
  fullName: com.azure.core.experimental.geojson.GeoArray<T>.add(T t)
  overload: com.azure.core.experimental.geojson.GeoArray.add*
  type: Method
  package: com.azure.core.experimental.geojson
  summary: Throws <xref uid="" data-throw-if-not-resolved="false">UnsupportedOperationException</xref> as GeoArray doesn't support mutation.
  syntax:
    content: public boolean add(T t)
    parameters:
    - id: t
      type: T
      description: The element that would be added.
    return:
      type: boolean
      description: Throws an exception.
- uid: com.azure.core.experimental.geojson.GeoArray.add(int,T)
  id: add(int,T)
  artifact: com.azure:azure-core-experimental:1.0.0-beta.8
  parent: com.azure.core.experimental.geojson.GeoArray
  langs:
  - java
  name: add(int index, T element)
  nameWithType: GeoArray<T>.add(int index, T element)
  fullName: com.azure.core.experimental.geojson.GeoArray<T>.add(int index, T element)
  overload: com.azure.core.experimental.geojson.GeoArray.add*
  type: Method
  package: com.azure.core.experimental.geojson
  summary: Throws <xref uid="" data-throw-if-not-resolved="false">UnsupportedOperationException</xref> as GeoArray doesn't support mutation.
  syntax:
    content: public void add(int index, T element)
    parameters:
    - id: index
      type: int
      description: The index where the element would be added.
    - id: element
      type: T
      description: The element that would be added.
- uid: com.azure.core.experimental.geojson.GeoArray.addAll(int,java.util.Collection<? extends T>)
  id: addAll(int,java.util.Collection<? extends T>)
  artifact: com.azure:azure-core-experimental:1.0.0-beta.8
  parent: com.azure.core.experimental.geojson.GeoArray
  langs:
  - java
  name: addAll(int index, Collection<? extends T> c)
  nameWithType: GeoArray<T>.addAll(int index, Collection<? extends T> c)
  fullName: com.azure.core.experimental.geojson.GeoArray<T>.addAll(int index, Collection<? extends T> c)
  overload: com.azure.core.experimental.geojson.GeoArray.addAll*
  type: Method
  package: com.azure.core.experimental.geojson
  summary: Throws <xref uid="" data-throw-if-not-resolved="false">UnsupportedOperationException</xref> as GeoArray doesn't support mutation.
  syntax:
    content: public boolean addAll(int index, Collection<? extends T> c)
    parameters:
    - id: index
      type: int
      description: The index where the element would be added.
    - id: c
      type: java.util.Collection<? extends T>
      description: The collection of elements that would be added.
    return:
      type: boolean
      description: Throws an exception.
- uid: com.azure.core.experimental.geojson.GeoArray.addAll(java.util.Collection<? extends T>)
  id: addAll(java.util.Collection<? extends T>)
  artifact: com.azure:azure-core-experimental:1.0.0-beta.8
  parent: com.azure.core.experimental.geojson.GeoArray
  langs:
  - java
  name: addAll(Collection<? extends T> c)
  nameWithType: GeoArray<T>.addAll(Collection<? extends T> c)
  fullName: com.azure.core.experimental.geojson.GeoArray<T>.addAll(Collection<? extends T> c)
  overload: com.azure.core.experimental.geojson.GeoArray.addAll*
  type: Method
  package: com.azure.core.experimental.geojson
  summary: Throws <xref uid="" data-throw-if-not-resolved="false">UnsupportedOperationException</xref> as GeoArray doesn't support mutation.
  syntax:
    content: public boolean addAll(Collection<? extends T> c)
    parameters:
    - id: c
      type: java.util.Collection<? extends T>
      description: The collection of elements that would be added.
    return:
      type: boolean
      description: Throws an exception.
- uid: com.azure.core.experimental.geojson.GeoArray.clear()
  id: clear()
  artifact: com.azure:azure-core-experimental:1.0.0-beta.8
  parent: com.azure.core.experimental.geojson.GeoArray
  langs:
  - java
  name: clear()
  nameWithType: GeoArray<T>.clear()
  fullName: com.azure.core.experimental.geojson.GeoArray<T>.clear()
  overload: com.azure.core.experimental.geojson.GeoArray.clear*
  type: Method
  package: com.azure.core.experimental.geojson
  summary: Throws <xref uid="" data-throw-if-not-resolved="false">UnsupportedOperationException</xref> as GeoArray doesn't support mutation.
  syntax:
    content: public void clear()
- uid: com.azure.core.experimental.geojson.GeoArray.equals(java.lang.Object)
  id: equals(java.lang.Object)
  artifact: com.azure:azure-core-experimental:1.0.0-beta.8
  parent: com.azure.core.experimental.geojson.GeoArray
  langs:
  - java
  name: equals(Object o)
  nameWithType: GeoArray<T>.equals(Object o)
  fullName: com.azure.core.experimental.geojson.GeoArray<T>.equals(Object o)
  overload: com.azure.core.experimental.geojson.GeoArray.equals*
  type: Method
  package: com.azure.core.experimental.geojson
  syntax:
    content: public boolean equals(Object o)
    parameters:
    - id: o
      type: java.lang.Object
    return:
      type: boolean
- uid: com.azure.core.experimental.geojson.GeoArray.get(int)
  id: get(int)
  artifact: com.azure:azure-core-experimental:1.0.0-beta.8
  parent: com.azure.core.experimental.geojson.GeoArray
  langs:
  - java
  name: get(int index)
  nameWithType: GeoArray<T>.get(int index)
  fullName: com.azure.core.experimental.geojson.GeoArray<T>.get(int index)
  overload: com.azure.core.experimental.geojson.GeoArray.get*
  type: Method
  package: com.azure.core.experimental.geojson
  syntax:
    content: public T get(int index)
    parameters:
    - id: index
      type: int
    return:
      type: T
- uid: com.azure.core.experimental.geojson.GeoArray.hashCode()
  id: hashCode()
  artifact: com.azure:azure-core-experimental:1.0.0-beta.8
  parent: com.azure.core.experimental.geojson.GeoArray
  langs:
  - java
  name: hashCode()
  nameWithType: GeoArray<T>.hashCode()
  fullName: com.azure.core.experimental.geojson.GeoArray<T>.hashCode()
  overload: com.azure.core.experimental.geojson.GeoArray.hashCode*
  type: Method
  package: com.azure.core.experimental.geojson
  syntax:
    content: public int hashCode()
    return:
      type: int
- uid: com.azure.core.experimental.geojson.GeoArray.iterator()
  id: iterator()
  artifact: com.azure:azure-core-experimental:1.0.0-beta.8
  parent: com.azure.core.experimental.geojson.GeoArray
  langs:
  - java
  name: iterator()
  nameWithType: GeoArray<T>.iterator()
  fullName: com.azure.core.experimental.geojson.GeoArray<T>.iterator()
  overload: com.azure.core.experimental.geojson.GeoArray.iterator*
  type: Method
  package: com.azure.core.experimental.geojson
  syntax:
    content: public Iterator<T> iterator()
    return:
      type: java.util.Iterator<T>
- uid: com.azure.core.experimental.geojson.GeoArray.listIterator(int)
  id: listIterator(int)
  artifact: com.azure:azure-core-experimental:1.0.0-beta.8
  parent: com.azure.core.experimental.geojson.GeoArray
  langs:
  - java
  name: listIterator(int index)
  nameWithType: GeoArray<T>.listIterator(int index)
  fullName: com.azure.core.experimental.geojson.GeoArray<T>.listIterator(int index)
  overload: com.azure.core.experimental.geojson.GeoArray.listIterator*
  type: Method
  package: com.azure.core.experimental.geojson
  syntax:
    content: public ListIterator<T> listIterator(int index)
    parameters:
    - id: index
      type: int
    return:
      type: java.util.ListIterator<T>
- uid: com.azure.core.experimental.geojson.GeoArray.remove(int)
  id: remove(int)
  artifact: com.azure:azure-core-experimental:1.0.0-beta.8
  parent: com.azure.core.experimental.geojson.GeoArray
  langs:
  - java
  name: remove(int index)
  nameWithType: GeoArray<T>.remove(int index)
  fullName: com.azure.core.experimental.geojson.GeoArray<T>.remove(int index)
  overload: com.azure.core.experimental.geojson.GeoArray.remove*
  type: Method
  package: com.azure.core.experimental.geojson
  summary: Throws <xref uid="" data-throw-if-not-resolved="false">UnsupportedOperationException</xref> as GeoArray doesn't support mutation.
  syntax:
    content: public T remove(int index)
    parameters:
    - id: index
      type: int
      description: The index where the element would be removed.
    return:
      type: T
      description: Throws an exception.
- uid: com.azure.core.experimental.geojson.GeoArray.remove(java.lang.Object)
  id: remove(java.lang.Object)
  artifact: com.azure:azure-core-experimental:1.0.0-beta.8
  parent: com.azure.core.experimental.geojson.GeoArray
  langs:
  - java
  name: remove(Object o)
  nameWithType: GeoArray<T>.remove(Object o)
  fullName: com.azure.core.experimental.geojson.GeoArray<T>.remove(Object o)
  overload: com.azure.core.experimental.geojson.GeoArray.remove*
  type: Method
  package: com.azure.core.experimental.geojson
  summary: Throws <xref uid="" data-throw-if-not-resolved="false">UnsupportedOperationException</xref> as GeoArray doesn't support mutation.
  syntax:
    content: public boolean remove(Object o)
    parameters:
    - id: o
      type: java.lang.Object
      description: The object that would be removed.
    return:
      type: boolean
      description: Throws an exception.
- uid: com.azure.core.experimental.geojson.GeoArray.removeAll(java.util.Collection<?>)
  id: removeAll(java.util.Collection<?>)
  artifact: com.azure:azure-core-experimental:1.0.0-beta.8
  parent: com.azure.core.experimental.geojson.GeoArray
  langs:
  - java
  name: removeAll(Collection<?> c)
  nameWithType: GeoArray<T>.removeAll(Collection<?> c)
  fullName: com.azure.core.experimental.geojson.GeoArray<T>.removeAll(Collection<?> c)
  overload: com.azure.core.experimental.geojson.GeoArray.removeAll*
  type: Method
  package: com.azure.core.experimental.geojson
  summary: Throws <xref uid="" data-throw-if-not-resolved="false">UnsupportedOperationException</xref> as GeoArray doesn't support mutation.
  syntax:
    content: public boolean removeAll(Collection<?> c)
    parameters:
    - id: c
      type: java.util.Collection<?>
      description: The collection of elements that would be removed.
    return:
      type: boolean
      description: Throws an exception.
- uid: com.azure.core.experimental.geojson.GeoArray.removeIf(java.util.function.Predicate<? super T>)
  id: removeIf(java.util.function.Predicate<? super T>)
  artifact: com.azure:azure-core-experimental:1.0.0-beta.8
  parent: com.azure.core.experimental.geojson.GeoArray
  langs:
  - java
  name: removeIf(Predicate<? super T> filter)
  nameWithType: GeoArray<T>.removeIf(Predicate<? super T> filter)
  fullName: com.azure.core.experimental.geojson.GeoArray<T>.removeIf(Predicate<? super T> filter)
  overload: com.azure.core.experimental.geojson.GeoArray.removeIf*
  type: Method
  package: com.azure.core.experimental.geojson
  summary: Throws <xref uid="" data-throw-if-not-resolved="false">UnsupportedOperationException</xref> as GeoArray doesn't support mutation.
  syntax:
    content: public boolean removeIf(Predicate<? super T> filter)
    parameters:
    - id: filter
      type: java.util.function.Predicate<? super T>
      description: The predicate that determines which elements would be removed.
    return:
      type: boolean
      description: Throws an exception.
- uid: com.azure.core.experimental.geojson.GeoArray.replaceAll(java.util.function.UnaryOperator<T>)
  id: replaceAll(java.util.function.UnaryOperator<T>)
  artifact: com.azure:azure-core-experimental:1.0.0-beta.8
  parent: com.azure.core.experimental.geojson.GeoArray
  langs:
  - java
  name: replaceAll(UnaryOperator<T> operator)
  nameWithType: GeoArray<T>.replaceAll(UnaryOperator<T> operator)
  fullName: com.azure.core.experimental.geojson.GeoArray<T>.replaceAll(UnaryOperator<T> operator)
  overload: com.azure.core.experimental.geojson.GeoArray.replaceAll*
  type: Method
  package: com.azure.core.experimental.geojson
  summary: Throws <xref uid="" data-throw-if-not-resolved="false">UnsupportedOperationException</xref> as GeoArray doesn't support mutation.
  syntax:
    content: public void replaceAll(UnaryOperator<T> operator)
    parameters:
    - id: operator
      type: java.util.function.UnaryOperator<T>
      description: The operator that determines which elements would be replaced.
- uid: com.azure.core.experimental.geojson.GeoArray.retainAll(java.util.Collection<?>)
  id: retainAll(java.util.Collection<?>)
  artifact: com.azure:azure-core-experimental:1.0.0-beta.8
  parent: com.azure.core.experimental.geojson.GeoArray
  langs:
  - java
  name: retainAll(Collection<?> c)
  nameWithType: GeoArray<T>.retainAll(Collection<?> c)
  fullName: com.azure.core.experimental.geojson.GeoArray<T>.retainAll(Collection<?> c)
  overload: com.azure.core.experimental.geojson.GeoArray.retainAll*
  type: Method
  package: com.azure.core.experimental.geojson
  summary: Throws <xref uid="" data-throw-if-not-resolved="false">UnsupportedOperationException</xref> as GeoArray doesn't support mutation.
  syntax:
    content: public boolean retainAll(Collection<?> c)
    parameters:
    - id: c
      type: java.util.Collection<?>
      description: The collection of elements that would be retained.
    return:
      type: boolean
      description: Throws an exception.
- uid: com.azure.core.experimental.geojson.GeoArray.set(int,T)
  id: set(int,T)
  artifact: com.azure:azure-core-experimental:1.0.0-beta.8
  parent: com.azure.core.experimental.geojson.GeoArray
  langs:
  - java
  name: set(int index, T element)
  nameWithType: GeoArray<T>.set(int index, T element)
  fullName: com.azure.core.experimental.geojson.GeoArray<T>.set(int index, T element)
  overload: com.azure.core.experimental.geojson.GeoArray.set*
  type: Method
  package: com.azure.core.experimental.geojson
  summary: Throws <xref uid="" data-throw-if-not-resolved="false">UnsupportedOperationException</xref> as GeoArray doesn't support mutation.
  syntax:
    content: public T set(int index, T element)
    parameters:
    - id: index
      type: int
      description: The index where the element would be added.
    - id: element
      type: T
      description: The element that would be added.
    return:
      type: T
      description: Throws an exception.
- uid: com.azure.core.experimental.geojson.GeoArray.size()
  id: size()
  artifact: com.azure:azure-core-experimental:1.0.0-beta.8
  parent: com.azure.core.experimental.geojson.GeoArray
  langs:
  - java
  name: size()
  nameWithType: GeoArray<T>.size()
  fullName: com.azure.core.experimental.geojson.GeoArray<T>.size()
  overload: com.azure.core.experimental.geojson.GeoArray.size*
  type: Method
  package: com.azure.core.experimental.geojson
  syntax:
    content: public int size()
    return:
      type: int
- uid: com.azure.core.experimental.geojson.GeoArray.sort(java.util.Comparator<? super T>)
  id: sort(java.util.Comparator<? super T>)
  artifact: com.azure:azure-core-experimental:1.0.0-beta.8
  parent: com.azure.core.experimental.geojson.GeoArray
  langs:
  - java
  name: sort(Comparator<? super T> c)
  nameWithType: GeoArray<T>.sort(Comparator<? super T> c)
  fullName: com.azure.core.experimental.geojson.GeoArray<T>.sort(Comparator<? super T> c)
  overload: com.azure.core.experimental.geojson.GeoArray.sort*
  type: Method
  package: com.azure.core.experimental.geojson
  summary: Throws <xref uid="" data-throw-if-not-resolved="false">UnsupportedOperationException</xref> as GeoArray doesn't support mutation.
  syntax:
    content: public void sort(Comparator<? super T> c)
    parameters:
    - id: c
      type: java.util.Comparator<? super T>
      description: The comparator that determines sort order.
- uid: com.azure.core.experimental.geojson.GeoArray.subList(int,int)
  id: subList(int,int)
  artifact: com.azure:azure-core-experimental:1.0.0-beta.8
  parent: com.azure.core.experimental.geojson.GeoArray
  langs:
  - java
  name: subList(int fromIndex, int toIndex)
  nameWithType: GeoArray<T>.subList(int fromIndex, int toIndex)
  fullName: com.azure.core.experimental.geojson.GeoArray<T>.subList(int fromIndex, int toIndex)
  overload: com.azure.core.experimental.geojson.GeoArray.subList*
  type: Method
  package: com.azure.core.experimental.geojson
  summary: Throws <xref uid="" data-throw-if-not-resolved="false">UnsupportedOperationException</xref> as GeoArray doesn't support mutation.
  syntax:
    content: public List<T> subList(int fromIndex, int toIndex)
    parameters:
    - id: fromIndex
      type: int
      description: The index where the sub list would begin.
    - id: toIndex
      type: int
      description: The index where the sub list would end.
    return:
      type: java.util.List<T>
      description: Throws an exception.
references:
- uid: java.lang.Object
  spec.java:
  - uid: java.lang.Object
    name: Object
    fullName: java.lang.Object
- uid: com.azure.core.experimental.geojson.GeoArray.GeoArray*
  name: GeoArray
  nameWithType: GeoArray<T>.GeoArray
  fullName: com.azure.core.experimental.geojson.GeoArray<T>.GeoArray
  package: com.azure.core.experimental.geojson
- uid: int
  spec.java:
  - uid: int
    name: int
    fullName: int
- uid: T
  spec.java:
  - uid: T
    name: T
    fullName: T
- uid: com.azure.core.experimental.geojson.GeoArray.get*
  name: get
  nameWithType: GeoArray<T>.get
  fullName: com.azure.core.experimental.geojson.GeoArray<T>.get
  package: com.azure.core.experimental.geojson
- uid: com.azure.core.experimental.geojson.GeoArray.size*
  name: size
  nameWithType: GeoArray<T>.size
  fullName: com.azure.core.experimental.geojson.GeoArray<T>.size
  package: com.azure.core.experimental.geojson
- uid: java.util.Iterator<T>
  spec.java:
  - uid: java.util.Iterator
    name: Iterator
    fullName: java.util.Iterator
  - name: <
    fullName: <
  - uid: T
    name: T
    fullName: T
  - name: '>'
    fullName: '>'
- uid: com.azure.core.experimental.geojson.GeoArray.iterator*
  name: iterator
  nameWithType: GeoArray<T>.iterator
  fullName: com.azure.core.experimental.geojson.GeoArray<T>.iterator
  package: com.azure.core.experimental.geojson
- uid: java.util.ListIterator<T>
  spec.java:
  - uid: java.util.ListIterator
    name: ListIterator
    fullName: java.util.ListIterator
  - name: <
    fullName: <
  - uid: T
    name: T
    fullName: T
  - name: '>'
    fullName: '>'
- uid: com.azure.core.experimental.geojson.GeoArray.listIterator*
  name: listIterator
  nameWithType: GeoArray<T>.listIterator
  fullName: com.azure.core.experimental.geojson.GeoArray<T>.listIterator
  package: com.azure.core.experimental.geojson
- uid: boolean
  spec.java:
  - uid: boolean
    name: boolean
    fullName: boolean
- uid: com.azure.core.experimental.geojson.GeoArray.add*
  name: add
  nameWithType: GeoArray<T>.add
  fullName: com.azure.core.experimental.geojson.GeoArray<T>.add
  package: com.azure.core.experimental.geojson
- uid: com.azure.core.experimental.geojson.GeoArray.set*
  name: set
  nameWithType: GeoArray<T>.set
  fullName: com.azure.core.experimental.geojson.GeoArray<T>.set
  package: com.azure.core.experimental.geojson
- uid: com.azure.core.experimental.geojson.GeoArray.remove*
  name: remove
  nameWithType: GeoArray<T>.remove
  fullName: com.azure.core.experimental.geojson.GeoArray<T>.remove
  package: com.azure.core.experimental.geojson
- uid: com.azure.core.experimental.geojson.GeoArray.clear*
  name: clear
  nameWithType: GeoArray<T>.clear
  fullName: com.azure.core.experimental.geojson.GeoArray<T>.clear
  package: com.azure.core.experimental.geojson
- uid: java.util.Collection<? extends T>
  spec.java:
  - uid: java.util.Collection
    name: Collection
    fullName: java.util.Collection
  - name: <
    fullName: <
  - uid: '? extends T'
    name: '? extends T'
    fullName: '? extends T'
  - name: '>'
    fullName: '>'
- uid: com.azure.core.experimental.geojson.GeoArray.addAll*
  name: addAll
  nameWithType: GeoArray<T>.addAll
  fullName: com.azure.core.experimental.geojson.GeoArray<T>.addAll
  package: com.azure.core.experimental.geojson
- uid: java.util.Collection<?>
  spec.java:
  - uid: java.util.Collection
    name: Collection
    fullName: java.util.Collection
  - name: <
    fullName: <
  - uid: '?'
    name: '?'
    fullName: '?'
  - name: '>'
    fullName: '>'
- uid: com.azure.core.experimental.geojson.GeoArray.removeAll*
  name: removeAll
  nameWithType: GeoArray<T>.removeAll
  fullName: com.azure.core.experimental.geojson.GeoArray<T>.removeAll
  package: com.azure.core.experimental.geojson
- uid: com.azure.core.experimental.geojson.GeoArray.retainAll*
  name: retainAll
  nameWithType: GeoArray<T>.retainAll
  fullName: com.azure.core.experimental.geojson.GeoArray<T>.retainAll
  package: com.azure.core.experimental.geojson
- uid: java.util.function.UnaryOperator<T>
  spec.java:
  - uid: java.util.function.UnaryOperator
    name: UnaryOperator
    fullName: java.util.function.UnaryOperator
  - name: <
    fullName: <
  - uid: T
    name: T
    fullName: T
  - name: '>'
    fullName: '>'
- uid: com.azure.core.experimental.geojson.GeoArray.replaceAll*
  name: replaceAll
  nameWithType: GeoArray<T>.replaceAll
  fullName: com.azure.core.experimental.geojson.GeoArray<T>.replaceAll
  package: com.azure.core.experimental.geojson
- uid: java.util.Comparator<? super T>
  spec.java:
  - uid: java.util.Comparator
    name: Comparator
    fullName: java.util.Comparator
  - name: <
    fullName: <
  - uid: '? super T'
    name: '? super T'
    fullName: '? super T'
  - name: '>'
    fullName: '>'
- uid: com.azure.core.experimental.geojson.GeoArray.sort*
  name: sort
  nameWithType: GeoArray<T>.sort
  fullName: com.azure.core.experimental.geojson.GeoArray<T>.sort
  package: com.azure.core.experimental.geojson
- uid: java.util.function.Predicate<? super T>
  spec.java:
  - uid: java.util.function.Predicate
    name: Predicate
    fullName: java.util.function.Predicate
  - name: <
    fullName: <
  - uid: '? super T'
    name: '? super T'
    fullName: '? super T'
  - name: '>'
    fullName: '>'
- uid: com.azure.core.experimental.geojson.GeoArray.removeIf*
  name: removeIf
  nameWithType: GeoArray<T>.removeIf
  fullName: com.azure.core.experimental.geojson.GeoArray<T>.removeIf
  package: com.azure.core.experimental.geojson
- uid: java.util.List<T>
  spec.java:
  - uid: java.util.List
    name: List
    fullName: java.util.List
  - name: <
    fullName: <
  - uid: T
    name: T
    fullName: T
  - name: '>'
    fullName: '>'
- uid: com.azure.core.experimental.geojson.GeoArray.subList*
  name: subList
  nameWithType: GeoArray<T>.subList
  fullName: com.azure.core.experimental.geojson.GeoArray<T>.subList
  package: com.azure.core.experimental.geojson
- uid: com.azure.core.experimental.geojson.GeoArray.equals*
  name: equals
  nameWithType: GeoArray<T>.equals
  fullName: com.azure.core.experimental.geojson.GeoArray<T>.equals
  package: com.azure.core.experimental.geojson
- uid: com.azure.core.experimental.geojson.GeoArray.hashCode*
  name: hashCode
  nameWithType: GeoArray<T>.hashCode
  fullName: com.azure.core.experimental.geojson.GeoArray<T>.hashCode
  package: com.azure.core.experimental.geojson
- uid: java.util.AbstractList<T>
  name: AbstractList<T>
  nameWithType: AbstractList<T>
  fullName: java.util.AbstractList<T>
- uid: java.util.AbstractCollection.contains(java.lang.Object)
  name: AbstractCollection.contains(Object)
  nameWithType: AbstractCollection.contains(Object)
  fullName: java.util.AbstractCollection.contains(java.lang.Object)
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: java.util.AbstractList.equals(java.lang.Object)
  name: AbstractList.equals(Object)
  nameWithType: AbstractList.equals(Object)
  fullName: java.util.AbstractList.equals(java.lang.Object)
- uid: java.lang.Object.finalize()
  name: Object.finalize()
  nameWithType: Object.finalize()
  fullName: java.lang.Object.finalize()
- uid: java.util.AbstractList.get(int)
  name: AbstractList.get(int)
  nameWithType: AbstractList.get(int)
  fullName: java.util.AbstractList.get(int)
- uid: java.lang.Object.clone()
  name: Object.clone()
  nameWithType: Object.clone()
  fullName: java.lang.Object.clone()
- uid: java.util.AbstractList.lastIndexOf(java.lang.Object)
  name: AbstractList.lastIndexOf(Object)
  nameWithType: AbstractList.lastIndexOf(Object)
  fullName: java.util.AbstractList.lastIndexOf(java.lang.Object)
- uid: java.util.AbstractList.clear()
  name: AbstractList.clear()
  nameWithType: AbstractList.clear()
  fullName: java.util.AbstractList.clear()
- uid: java.util.AbstractList.hashCode()
  name: AbstractList.hashCode()
  nameWithType: AbstractList.hashCode()
  fullName: java.util.AbstractList.hashCode()
- uid: java.util.AbstractCollection.size()
  name: AbstractCollection.size()
  nameWithType: AbstractCollection.size()
  fullName: java.util.AbstractCollection.size()
- uid: java.util.AbstractList.iterator()
  name: AbstractList.iterator()
  nameWithType: AbstractList.iterator()
  fullName: java.util.AbstractList.iterator()
- uid: java.util.AbstractList.add(int,E)
  name: AbstractList.add(int,E)
  nameWithType: AbstractList.add(int,E)
  fullName: java.util.AbstractList.add(int,E)
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: java.util.AbstractCollection.removeAll(java.util.Collection<?>)
  name: AbstractCollection.removeAll(Collection<?>)
  nameWithType: AbstractCollection.removeAll(Collection<?>)
  fullName: java.util.AbstractCollection.removeAll(java.util.Collection<?>)
- uid: java.util.AbstractList.remove(int)
  name: AbstractList.remove(int)
  nameWithType: AbstractList.remove(int)
  fullName: java.util.AbstractList.remove(int)
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: java.util.AbstractCollection.<T>toArray(T[])
  name: AbstractCollection.<T>toArray(T[])
  nameWithType: AbstractCollection.<T>toArray(T[])
  fullName: java.util.AbstractCollection.<T>toArray(T[])
- uid: java.util.AbstractCollection.remove(java.lang.Object)
  name: AbstractCollection.remove(Object)
  nameWithType: AbstractCollection.remove(Object)
  fullName: java.util.AbstractCollection.remove(java.lang.Object)
- uid: java.util.AbstractList.listIterator()
  name: AbstractList.listIterator()
  nameWithType: AbstractList.listIterator()
  fullName: java.util.AbstractList.listIterator()
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: java.util.AbstractCollection.toArray()
  name: AbstractCollection.toArray()
  nameWithType: AbstractCollection.toArray()
  fullName: java.util.AbstractCollection.toArray()
- uid: java.util.AbstractList.subList(int,int)
  name: AbstractList.subList(int,int)
  nameWithType: AbstractList.subList(int,int)
  fullName: java.util.AbstractList.subList(int,int)
- uid: java.util.AbstractList.add(E)
  name: AbstractList.add(E)
  nameWithType: AbstractList.add(E)
  fullName: java.util.AbstractList.add(E)
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: java.util.AbstractList.removeRange(int,int)
  name: AbstractList.removeRange(int,int)
  nameWithType: AbstractList.removeRange(int,int)
  fullName: java.util.AbstractList.removeRange(int,int)
- uid: java.util.AbstractCollection.containsAll(java.util.Collection<?>)
  name: AbstractCollection.containsAll(Collection<?>)
  nameWithType: AbstractCollection.containsAll(Collection<?>)
  fullName: java.util.AbstractCollection.containsAll(java.util.Collection<?>)
- uid: java.util.AbstractList.indexOf(java.lang.Object)
  name: AbstractList.indexOf(Object)
  nameWithType: AbstractList.indexOf(Object)
  fullName: java.util.AbstractList.indexOf(java.lang.Object)
- uid: java.util.AbstractCollection.isEmpty()
  name: AbstractCollection.isEmpty()
  nameWithType: AbstractCollection.isEmpty()
  fullName: java.util.AbstractCollection.isEmpty()
- uid: java.util.AbstractList.set(int,E)
  name: AbstractList.set(int,E)
  nameWithType: AbstractList.set(int,E)
  fullName: java.util.AbstractList.set(int,E)
- uid: java.util.AbstractCollection.toString()
  name: AbstractCollection.toString()
  nameWithType: AbstractCollection.toString()
  fullName: java.util.AbstractCollection.toString()
- uid: java.util.AbstractList.addAll(int,java.util.Collection<? extends E>)
  name: AbstractList.addAll(int,Collection<? extends E>)
  nameWithType: AbstractList.addAll(int,Collection<? extends E>)
  fullName: java.util.AbstractList.addAll(int,java.util.Collection<? extends E>)
- uid: java.util.AbstractList.listIterator(int)
  name: AbstractList.listIterator(int)
  nameWithType: AbstractList.listIterator(int)
  fullName: java.util.AbstractList.listIterator(int)
- uid: java.util.AbstractCollection.retainAll(java.util.Collection<?>)
  name: AbstractCollection.retainAll(Collection<?>)
  nameWithType: AbstractCollection.retainAll(Collection<?>)
  fullName: java.util.AbstractCollection.retainAll(java.util.Collection<?>)
- uid: java.util.AbstractCollection.addAll(java.util.Collection<? extends E>)
  name: AbstractCollection.addAll(Collection<? extends E>)
  nameWithType: AbstractCollection.addAll(Collection<? extends E>)
  fullName: java.util.AbstractCollection.addAll(java.util.Collection<? extends E>)
- uid: java.util.Iterator
  name: Iterator
  nameWithType: Iterator
  fullName: java.util.Iterator
- uid: java.util.ListIterator
  name: ListIterator
  nameWithType: ListIterator
  fullName: java.util.ListIterator
- uid: '? extends T'
  name: '? extends T'
  nameWithType: '? extends T'
  fullName: '? extends T'
- uid: java.util.Collection
  name: Collection
  nameWithType: Collection
  fullName: java.util.Collection
- uid: '?'
  name: '?'
  nameWithType: '?'
  fullName: '?'
- uid: java.util.function.UnaryOperator
  name: UnaryOperator
  nameWithType: UnaryOperator
  fullName: java.util.function.UnaryOperator
- uid: '? super T'
  name: '? super T'
  nameWithType: '? super T'
  fullName: '? super T'
- uid: java.util.Comparator
  name: Comparator
  nameWithType: Comparator
  fullName: java.util.Comparator
- uid: java.util.function.Predicate
  name: Predicate
  nameWithType: Predicate
  fullName: java.util.function.Predicate
- uid: java.util.List
  name: List
  nameWithType: List
  fullName: java.util.List
- uid: java.util.AbstractList
  name: AbstractList
  nameWithType: AbstractList
  fullName: java.util.AbstractList
- uid: java.util.AbstractCollection.removeAll(java.util.Collection
  name: AbstractCollection.removeAll(Collection
  nameWithType: AbstractCollection.removeAll(Collection
  fullName: java.util.AbstractCollection.removeAll(java.util.Collection
- uid: ?>)
  name: ?>)
  nameWithType: ?>)
  fullName: ?>)
- uid: T>toArray(T[])
  name: T>toArray(T[])
  nameWithType: T>toArray(T[])
  fullName: T>toArray(T[])
- uid: java.util.AbstractCollection.
  name: AbstractCollection.
  nameWithType: AbstractCollection.
  fullName: java.util.AbstractCollection.
- uid: java.util.AbstractCollection.containsAll(java.util.Collection
  name: AbstractCollection.containsAll(Collection
  nameWithType: AbstractCollection.containsAll(Collection
  fullName: java.util.AbstractCollection.containsAll(java.util.Collection
- uid: '? extends E>)'
  name: '? extends E>)'
  nameWithType: '? extends E>)'
  fullName: '? extends E>)'
- uid: java.util.AbstractList.addAll(int,java.util.Collection
  name: AbstractList.addAll(int,Collection
  nameWithType: AbstractList.addAll(int,Collection
  fullName: java.util.AbstractList.addAll(int,java.util.Collection
- uid: java.util.AbstractCollection.retainAll(java.util.Collection
  name: AbstractCollection.retainAll(Collection
  nameWithType: AbstractCollection.retainAll(Collection
  fullName: java.util.AbstractCollection.retainAll(java.util.Collection
- uid: java.util.AbstractCollection.addAll(java.util.Collection
  name: AbstractCollection.addAll(Collection
  nameWithType: AbstractCollection.addAll(Collection
  fullName: java.util.AbstractCollection.addAll(java.util.Collection
