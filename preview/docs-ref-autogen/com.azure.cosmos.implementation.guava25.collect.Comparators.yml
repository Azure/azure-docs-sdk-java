### YamlMime:ManagedReference
items:
- uid: com.azure.cosmos.implementation.guava25.collect.Comparators
  id: Comparators
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect
  children:
  - com.azure.cosmos.implementation.guava25.collect.Comparators.<T,S>lexicographical(java.util.Comparator<T>)
  - com.azure.cosmos.implementation.guava25.collect.Comparators.<T>emptiesFirst(java.util.Comparator<? super T>)
  - com.azure.cosmos.implementation.guava25.collect.Comparators.<T>emptiesLast(java.util.Comparator<? super T>)
  - com.azure.cosmos.implementation.guava25.collect.Comparators.<T>greatest(int,java.util.Comparator<? super T>)
  - com.azure.cosmos.implementation.guava25.collect.Comparators.<T>isInOrder(java.lang.Iterable<? extends T>,java.util.Comparator<T>)
  - com.azure.cosmos.implementation.guava25.collect.Comparators.<T>isInStrictOrder(java.lang.Iterable<? extends T>,java.util.Comparator<T>)
  - com.azure.cosmos.implementation.guava25.collect.Comparators.<T>least(int,java.util.Comparator<? super T>)
  langs:
  - java
  name: Comparators
  nameWithType: Comparators
  fullName: com.azure.cosmos.implementation.guava25.collect.Comparators
  type: Class
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Provides static methods for working with <xref uid="java.util.Comparator" data-throw-if-not-resolved="false">Comparator</xref> instances. For many other helpful comparator utilities, see either `Comparator` itself (for Java 8 or later), or `com.google.common.collect.Ordering` (otherwise).


    ### Relationship to `Ordering` ###


    In light of the significant enhancements to `Comparator` in Java 8, the overwhelming majority of usages of `Ordering` can be written using only built-in JDK APIs. This class is intended to "fill the gap" and provide those features of `Ordering` not already provided by the JDK.
  syntax:
    content: public final class Comparators
  inheritance:
  - java.lang.Object
  inheritedMembers:
  - java.lang.Object.clone()
  - java.lang.Object.equals(java.lang.Object)
  - java.lang.Object.finalize()
  - java.lang.Object.getClass()
  - java.lang.Object.hashCode()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.toString()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
- uid: com.azure.cosmos.implementation.guava25.collect.Comparators.<T,S>lexicographical(java.util.Comparator<T>)
  id: <T,S>lexicographical(java.util.Comparator<T>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.Comparators
  langs:
  - java
  name: <T,S>lexicographical(Comparator<T> comparator)
  nameWithType: Comparators.<T,S>lexicographical(Comparator<T> comparator)
  fullName: com.azure.cosmos.implementation.guava25.collect.Comparators.<T,S>lexicographical(Comparator<T> comparator)
  overload: com.azure.cosmos.implementation.guava25.collect.Comparators.lexicographical*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Returns a new comparator which sorts iterables by comparing corresponding elements pairwise until a nonzero result is found; imposes "dictionary order." If the end of one iterable is reached, but not the other, the shorter iterable is considered to be less than the longer one. For example, a lexicographical natural ordering over integers considers `[] < [1] < [1, 1] < [1, 2] < [2]`.


    Note that `Collections.reverseOrder(lexicographical(comparator))` is not equivalent to `lexicographical(Collections.reverseOrder(comparator))` (consider how each would order `[1]` and `[1, 1]`).
  syntax:
    content: public static Comparator<Iterable<S>> <T,S>lexicographical(Comparator<T> comparator)
    parameters:
    - id: comparator
      type: java.util.Comparator<T>
    return:
      type: java.util.Comparator<java.lang.Iterable<S>>
- uid: com.azure.cosmos.implementation.guava25.collect.Comparators.<T>emptiesFirst(java.util.Comparator<? super T>)
  id: <T>emptiesFirst(java.util.Comparator<? super T>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.Comparators
  langs:
  - java
  name: <T>emptiesFirst(Comparator<? super T> valueComparator)
  nameWithType: Comparators.<T>emptiesFirst(Comparator<? super T> valueComparator)
  fullName: com.azure.cosmos.implementation.guava25.collect.Comparators.<T>emptiesFirst(Comparator<? super T> valueComparator)
  overload: com.azure.cosmos.implementation.guava25.collect.Comparators.emptiesFirst*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Returns a comparator of <xref uid="java.util.Optional" data-throw-if-not-resolved="false">Optional</xref> values which treats <xref uid="java.util.Optional.empty" data-throw-if-not-resolved="false">Optional#empty</xref> as less than all other values, and orders the rest using `valueComparator` on the contained value.
  syntax:
    content: public static Comparator<Optional<T>> <T>emptiesFirst(Comparator<? super T> valueComparator)
    parameters:
    - id: valueComparator
      type: java.util.Comparator<? super T>
    return:
      type: java.util.Comparator<java.util.Optional<T>>
- uid: com.azure.cosmos.implementation.guava25.collect.Comparators.<T>emptiesLast(java.util.Comparator<? super T>)
  id: <T>emptiesLast(java.util.Comparator<? super T>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.Comparators
  langs:
  - java
  name: <T>emptiesLast(Comparator<? super T> valueComparator)
  nameWithType: Comparators.<T>emptiesLast(Comparator<? super T> valueComparator)
  fullName: com.azure.cosmos.implementation.guava25.collect.Comparators.<T>emptiesLast(Comparator<? super T> valueComparator)
  overload: com.azure.cosmos.implementation.guava25.collect.Comparators.emptiesLast*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Returns a comparator of <xref uid="java.util.Optional" data-throw-if-not-resolved="false">Optional</xref> values which treats <xref uid="java.util.Optional.empty" data-throw-if-not-resolved="false">Optional#empty</xref> as greater than all other values, and orders the rest using `valueComparator` on the contained value.
  syntax:
    content: public static Comparator<Optional<T>> <T>emptiesLast(Comparator<? super T> valueComparator)
    parameters:
    - id: valueComparator
      type: java.util.Comparator<? super T>
    return:
      type: java.util.Comparator<java.util.Optional<T>>
- uid: com.azure.cosmos.implementation.guava25.collect.Comparators.<T>greatest(int,java.util.Comparator<? super T>)
  id: <T>greatest(int,java.util.Comparator<? super T>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.Comparators
  langs:
  - java
  name: <T>greatest(int k, Comparator<? super T> comparator)
  nameWithType: Comparators.<T>greatest(int k, Comparator<? super T> comparator)
  fullName: com.azure.cosmos.implementation.guava25.collect.Comparators.<T>greatest(int k, Comparator<? super T> comparator)
  overload: com.azure.cosmos.implementation.guava25.collect.Comparators.greatest*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Returns a `Collector` that returns the `k` greatest (relative to the specified `Comparator`) input elements, in descending order, as an unmodifiable `List`. Ties are broken arbitrarily.


    For example:


    ```java

    Stream.of("foo", "quux", "banana", "elephant")
         .collect(greatest(2, comparingInt(String::length)))
     // returns {"elephant", "banana"}
    ```


    This `Collector` uses O(k) memory and takes expected time O(n) (worst-case O(n log k)), as opposed to e.g. `Stream.sorted(comparator.reversed()).limit(k)`, which currently takes O(n log n) time and O(n) space.
  syntax:
    content: public static Collector<T,?,List<T>> <T>greatest(int k, Comparator<? super T> comparator)
    parameters:
    - id: k
      type: int
    - id: comparator
      type: java.util.Comparator<? super T>
    return:
      type: java.util.stream.Collector<T,?,java.util.List<T>>
- uid: com.azure.cosmos.implementation.guava25.collect.Comparators.<T>isInOrder(java.lang.Iterable<? extends T>,java.util.Comparator<T>)
  id: <T>isInOrder(java.lang.Iterable<? extends T>,java.util.Comparator<T>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.Comparators
  langs:
  - java
  name: <T>isInOrder(Iterable<? extends T> iterable, Comparator<T> comparator)
  nameWithType: Comparators.<T>isInOrder(Iterable<? extends T> iterable, Comparator<T> comparator)
  fullName: com.azure.cosmos.implementation.guava25.collect.Comparators.<T>isInOrder(Iterable<? extends T> iterable, Comparator<T> comparator)
  overload: com.azure.cosmos.implementation.guava25.collect.Comparators.isInOrder*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Returns `true` if each element in `iterable` after the first is greater than or equal to the element that preceded it, according to the specified comparator. Note that this is always true when the iterable has fewer than two elements.
  syntax:
    content: public static boolean <T>isInOrder(Iterable<? extends T> iterable, Comparator<T> comparator)
    parameters:
    - id: iterable
      type: java.lang.Iterable<? extends T>
    - id: comparator
      type: java.util.Comparator<T>
    return:
      type: boolean
- uid: com.azure.cosmos.implementation.guava25.collect.Comparators.<T>isInStrictOrder(java.lang.Iterable<? extends T>,java.util.Comparator<T>)
  id: <T>isInStrictOrder(java.lang.Iterable<? extends T>,java.util.Comparator<T>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.Comparators
  langs:
  - java
  name: <T>isInStrictOrder(Iterable<? extends T> iterable, Comparator<T> comparator)
  nameWithType: Comparators.<T>isInStrictOrder(Iterable<? extends T> iterable, Comparator<T> comparator)
  fullName: com.azure.cosmos.implementation.guava25.collect.Comparators.<T>isInStrictOrder(Iterable<? extends T> iterable, Comparator<T> comparator)
  overload: com.azure.cosmos.implementation.guava25.collect.Comparators.isInStrictOrder*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Returns `true` if each element in `iterable` after the first is *strictly* greater than the element that preceded it, according to the specified comparator. Note that this is always true when the iterable has fewer than two elements.
  syntax:
    content: public static boolean <T>isInStrictOrder(Iterable<? extends T> iterable, Comparator<T> comparator)
    parameters:
    - id: iterable
      type: java.lang.Iterable<? extends T>
    - id: comparator
      type: java.util.Comparator<T>
    return:
      type: boolean
- uid: com.azure.cosmos.implementation.guava25.collect.Comparators.<T>least(int,java.util.Comparator<? super T>)
  id: <T>least(int,java.util.Comparator<? super T>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.Comparators
  langs:
  - java
  name: <T>least(int k, Comparator<? super T> comparator)
  nameWithType: Comparators.<T>least(int k, Comparator<? super T> comparator)
  fullName: com.azure.cosmos.implementation.guava25.collect.Comparators.<T>least(int k, Comparator<? super T> comparator)
  overload: com.azure.cosmos.implementation.guava25.collect.Comparators.least*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Returns a `Collector` that returns the `k` smallest (relative to the specified `Comparator`) input elements, in ascending order, as an unmodifiable `List`. Ties are broken arbitrarily.


    For example:


    ```java

    Stream.of("foo", "quux", "banana", "elephant")
         .collect(least(2, comparingInt(String::length)))
     // returns {"foo", "quux"}
    ```


    This `Collector` uses O(k) memory and takes expected time O(n) (worst-case O(n log k)), as opposed to e.g. `Stream.sorted(comparator).limit(k)`, which currently takes O(n log n) time and O(n) space.
  syntax:
    content: public static Collector<T,?,List<T>> <T>least(int k, Comparator<? super T> comparator)
    parameters:
    - id: k
      type: int
    - id: comparator
      type: java.util.Comparator<? super T>
    return:
      type: java.util.stream.Collector<T,?,java.util.List<T>>
- uid: com.azure.cosmos.implementation.guava25.collect.Comparators.Comparators()
  id: Comparators()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.Comparators
  langs:
  - java
  name: Comparators()
  nameWithType: Comparators.Comparators()
  fullName: com.azure.cosmos.implementation.guava25.collect.Comparators.Comparators()
  overload: com.azure.cosmos.implementation.guava25.collect.Comparators.Comparators*
  type: Constructor
  package: com.azure.cosmos.implementation.guava25.collect
  syntax:
    content: private Comparators()
references:
- uid: com.azure.cosmos.implementation.guava25.collect.Comparators.Comparators*
  name: Comparators
  nameWithType: Comparators.Comparators
  fullName: com.azure.cosmos.implementation.guava25.collect.Comparators.Comparators
  package: com.azure.cosmos.implementation.guava25.collect
- uid: java.util.Comparator<T>
  spec.java:
  - uid: java.util.Comparator
    name: Comparator
    fullName: java.util.Comparator
  - name: <
    fullName: <
  - uid: T
    name: T
    fullName: T
  - name: '>'
    fullName: '>'
- uid: java.util.Comparator<java.lang.Iterable<S>>
  spec.java:
  - uid: java.util.Comparator
    name: Comparator
    fullName: java.util.Comparator
  - name: <
    fullName: <
  - uid: java.lang.Iterable
    name: Iterable
    fullName: java.lang.Iterable
  - name: <
    fullName: <
  - uid: S
    name: S
    fullName: S
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.Comparators.lexicographical*
  name: <T,S>lexicographical
  nameWithType: Comparators.<T,S>lexicographical
  fullName: com.azure.cosmos.implementation.guava25.collect.Comparators.<T,S>lexicographical
  package: com.azure.cosmos.implementation.guava25.collect
- uid: java.lang.Iterable<? extends T>
  spec.java:
  - uid: java.lang.Iterable
    name: Iterable
    fullName: java.lang.Iterable
  - name: <
    fullName: <
  - uid: '? extends T'
    name: '? extends T'
    fullName: '? extends T'
  - name: '>'
    fullName: '>'
- uid: boolean
  spec.java:
  - uid: boolean
    name: boolean
    fullName: boolean
- uid: com.azure.cosmos.implementation.guava25.collect.Comparators.isInOrder*
  name: <T>isInOrder
  nameWithType: Comparators.<T>isInOrder
  fullName: com.azure.cosmos.implementation.guava25.collect.Comparators.<T>isInOrder
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.Comparators.isInStrictOrder*
  name: <T>isInStrictOrder
  nameWithType: Comparators.<T>isInStrictOrder
  fullName: com.azure.cosmos.implementation.guava25.collect.Comparators.<T>isInStrictOrder
  package: com.azure.cosmos.implementation.guava25.collect
- uid: int
  spec.java:
  - uid: int
    name: int
    fullName: int
- uid: java.util.Comparator<? super T>
  spec.java:
  - uid: java.util.Comparator
    name: Comparator
    fullName: java.util.Comparator
  - name: <
    fullName: <
  - uid: '? super T'
    name: '? super T'
    fullName: '? super T'
  - name: '>'
    fullName: '>'
- uid: java.util.stream.Collector<T,?,java.util.List<T>>
  spec.java:
  - uid: java.util.stream.Collector
    name: Collector
    fullName: java.util.stream.Collector
  - name: <
    fullName: <
  - uid: T
    name: T
    fullName: T
  - name: ','
    fullName: ','
  - uid: '?'
    name: '?'
    fullName: '?'
  - name: ','
    fullName: ','
  - uid: java.util.List
    name: List
    fullName: java.util.List
  - name: <
    fullName: <
  - uid: T
    name: T
    fullName: T
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.Comparators.least*
  name: <T>least
  nameWithType: Comparators.<T>least
  fullName: com.azure.cosmos.implementation.guava25.collect.Comparators.<T>least
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.Comparators.greatest*
  name: <T>greatest
  nameWithType: Comparators.<T>greatest
  fullName: com.azure.cosmos.implementation.guava25.collect.Comparators.<T>greatest
  package: com.azure.cosmos.implementation.guava25.collect
- uid: java.util.Comparator<java.util.Optional<T>>
  spec.java:
  - uid: java.util.Comparator
    name: Comparator
    fullName: java.util.Comparator
  - name: <
    fullName: <
  - uid: java.util.Optional
    name: Optional
    fullName: java.util.Optional
  - name: <
    fullName: <
  - uid: T
    name: T
    fullName: T
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.Comparators.emptiesFirst*
  name: <T>emptiesFirst
  nameWithType: Comparators.<T>emptiesFirst
  fullName: com.azure.cosmos.implementation.guava25.collect.Comparators.<T>emptiesFirst
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.Comparators.emptiesLast*
  name: <T>emptiesLast
  nameWithType: Comparators.<T>emptiesLast
  fullName: com.azure.cosmos.implementation.guava25.collect.Comparators.<T>emptiesLast
  package: com.azure.cosmos.implementation.guava25.collect
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: java.lang.Object.finalize()
  name: Object.finalize()
  nameWithType: Object.finalize()
  fullName: java.lang.Object.finalize()
- uid: java.lang.Object.clone()
  name: Object.clone()
  nameWithType: Object.clone()
  fullName: java.lang.Object.clone()
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: java.lang.Object.equals(java.lang.Object)
  name: Object.equals(Object)
  nameWithType: Object.equals(Object)
  fullName: java.lang.Object.equals(java.lang.Object)
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.lang.Object.hashCode()
  name: Object.hashCode()
  nameWithType: Object.hashCode()
  fullName: java.lang.Object.hashCode()
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: java.lang.Object.toString()
  name: Object.toString()
  nameWithType: Object.toString()
  fullName: java.lang.Object.toString()
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: java.util.Comparator
  name: Comparator
  nameWithType: Comparator
  fullName: java.util.Comparator
- uid: S
  name: S
  nameWithType: S
  fullName: S
- uid: java.lang.Iterable
  name: Iterable
  nameWithType: Iterable
  fullName: java.lang.Iterable
- uid: '? extends T'
  name: '? extends T'
  nameWithType: '? extends T'
  fullName: '? extends T'
- uid: '? super T'
  name: '? super T'
  nameWithType: '? super T'
  fullName: '? super T'
- uid: java.util.stream.Collector
  name: Collector
  nameWithType: Collector
  fullName: java.util.stream.Collector
- uid: T,?,java.util.List
  name: T,?,List
  nameWithType: T,?,List
  fullName: T,?,java.util.List
- uid: java.util.Optional
  name: Optional
  nameWithType: Optional
  fullName: java.util.Optional
