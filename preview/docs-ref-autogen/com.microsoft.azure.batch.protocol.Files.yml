### YamlMime:ManagedReference
items:
- uid: com.microsoft.azure.batch.protocol.Files
  id: Files
  artifact: com.microsoft.azure:azure-batch:8.0.0
  parent: com.microsoft.azure.batch.protocol
  children:
  - com.microsoft.azure.batch.protocol.Files.deleteFromComputeNode(java.lang.String,java.lang.String,java.lang.String)
  - com.microsoft.azure.batch.protocol.Files.deleteFromComputeNode(java.lang.String,java.lang.String,java.lang.String,java.lang.Boolean,com.microsoft.azure.batch.protocol.models.FileDeleteFromComputeNodeOptions)
  - com.microsoft.azure.batch.protocol.Files.deleteFromComputeNodeAsync(java.lang.String,java.lang.String,java.lang.String)
  - com.microsoft.azure.batch.protocol.Files.deleteFromComputeNodeAsync(java.lang.String,java.lang.String,java.lang.String,com.microsoft.rest.ServiceCallback<java.lang.Void>)
  - com.microsoft.azure.batch.protocol.Files.deleteFromComputeNodeAsync(java.lang.String,java.lang.String,java.lang.String,java.lang.Boolean,com.microsoft.azure.batch.protocol.models.FileDeleteFromComputeNodeOptions)
  - com.microsoft.azure.batch.protocol.Files.deleteFromComputeNodeAsync(java.lang.String,java.lang.String,java.lang.String,java.lang.Boolean,com.microsoft.azure.batch.protocol.models.FileDeleteFromComputeNodeOptions,com.microsoft.rest.ServiceCallback<java.lang.Void>)
  - com.microsoft.azure.batch.protocol.Files.deleteFromComputeNodeWithServiceResponseAsync(java.lang.String,java.lang.String,java.lang.String)
  - com.microsoft.azure.batch.protocol.Files.deleteFromComputeNodeWithServiceResponseAsync(java.lang.String,java.lang.String,java.lang.String,java.lang.Boolean,com.microsoft.azure.batch.protocol.models.FileDeleteFromComputeNodeOptions)
  - com.microsoft.azure.batch.protocol.Files.deleteFromTask(java.lang.String,java.lang.String,java.lang.String)
  - com.microsoft.azure.batch.protocol.Files.deleteFromTask(java.lang.String,java.lang.String,java.lang.String,java.lang.Boolean,com.microsoft.azure.batch.protocol.models.FileDeleteFromTaskOptions)
  - com.microsoft.azure.batch.protocol.Files.deleteFromTaskAsync(java.lang.String,java.lang.String,java.lang.String)
  - com.microsoft.azure.batch.protocol.Files.deleteFromTaskAsync(java.lang.String,java.lang.String,java.lang.String,com.microsoft.rest.ServiceCallback<java.lang.Void>)
  - com.microsoft.azure.batch.protocol.Files.deleteFromTaskAsync(java.lang.String,java.lang.String,java.lang.String,java.lang.Boolean,com.microsoft.azure.batch.protocol.models.FileDeleteFromTaskOptions)
  - com.microsoft.azure.batch.protocol.Files.deleteFromTaskAsync(java.lang.String,java.lang.String,java.lang.String,java.lang.Boolean,com.microsoft.azure.batch.protocol.models.FileDeleteFromTaskOptions,com.microsoft.rest.ServiceCallback<java.lang.Void>)
  - com.microsoft.azure.batch.protocol.Files.deleteFromTaskWithServiceResponseAsync(java.lang.String,java.lang.String,java.lang.String)
  - com.microsoft.azure.batch.protocol.Files.deleteFromTaskWithServiceResponseAsync(java.lang.String,java.lang.String,java.lang.String,java.lang.Boolean,com.microsoft.azure.batch.protocol.models.FileDeleteFromTaskOptions)
  - com.microsoft.azure.batch.protocol.Files.getFromComputeNode(java.lang.String,java.lang.String,java.lang.String)
  - com.microsoft.azure.batch.protocol.Files.getFromComputeNode(java.lang.String,java.lang.String,java.lang.String,com.microsoft.azure.batch.protocol.models.FileGetFromComputeNodeOptions)
  - com.microsoft.azure.batch.protocol.Files.getFromComputeNode(java.lang.String,java.lang.String,java.lang.String,com.microsoft.azure.batch.protocol.models.FileGetFromComputeNodeOptions,java.io.OutputStream)
  - com.microsoft.azure.batch.protocol.Files.getFromComputeNode(java.lang.String,java.lang.String,java.lang.String,java.io.OutputStream)
  - com.microsoft.azure.batch.protocol.Files.getFromComputeNodeAsync(java.lang.String,java.lang.String,java.lang.String)
  - com.microsoft.azure.batch.protocol.Files.getFromComputeNodeAsync(java.lang.String,java.lang.String,java.lang.String,com.microsoft.azure.batch.protocol.models.FileGetFromComputeNodeOptions)
  - com.microsoft.azure.batch.protocol.Files.getFromComputeNodeAsync(java.lang.String,java.lang.String,java.lang.String,com.microsoft.azure.batch.protocol.models.FileGetFromComputeNodeOptions,com.microsoft.rest.ServiceCallback<java.io.InputStream>)
  - com.microsoft.azure.batch.protocol.Files.getFromComputeNodeAsync(java.lang.String,java.lang.String,java.lang.String,com.microsoft.rest.ServiceCallback<java.io.InputStream>)
  - com.microsoft.azure.batch.protocol.Files.getFromComputeNodeWithServiceResponseAsync(java.lang.String,java.lang.String,java.lang.String)
  - com.microsoft.azure.batch.protocol.Files.getFromComputeNodeWithServiceResponseAsync(java.lang.String,java.lang.String,java.lang.String,com.microsoft.azure.batch.protocol.models.FileGetFromComputeNodeOptions)
  - com.microsoft.azure.batch.protocol.Files.getFromTask(java.lang.String,java.lang.String,java.lang.String)
  - com.microsoft.azure.batch.protocol.Files.getFromTask(java.lang.String,java.lang.String,java.lang.String,com.microsoft.azure.batch.protocol.models.FileGetFromTaskOptions)
  - com.microsoft.azure.batch.protocol.Files.getFromTask(java.lang.String,java.lang.String,java.lang.String,com.microsoft.azure.batch.protocol.models.FileGetFromTaskOptions,java.io.OutputStream)
  - com.microsoft.azure.batch.protocol.Files.getFromTask(java.lang.String,java.lang.String,java.lang.String,java.io.OutputStream)
  - com.microsoft.azure.batch.protocol.Files.getFromTaskAsync(java.lang.String,java.lang.String,java.lang.String)
  - com.microsoft.azure.batch.protocol.Files.getFromTaskAsync(java.lang.String,java.lang.String,java.lang.String,com.microsoft.azure.batch.protocol.models.FileGetFromTaskOptions)
  - com.microsoft.azure.batch.protocol.Files.getFromTaskAsync(java.lang.String,java.lang.String,java.lang.String,com.microsoft.azure.batch.protocol.models.FileGetFromTaskOptions,com.microsoft.rest.ServiceCallback<java.io.InputStream>)
  - com.microsoft.azure.batch.protocol.Files.getFromTaskAsync(java.lang.String,java.lang.String,java.lang.String,com.microsoft.rest.ServiceCallback<java.io.InputStream>)
  - com.microsoft.azure.batch.protocol.Files.getFromTaskWithServiceResponseAsync(java.lang.String,java.lang.String,java.lang.String)
  - com.microsoft.azure.batch.protocol.Files.getFromTaskWithServiceResponseAsync(java.lang.String,java.lang.String,java.lang.String,com.microsoft.azure.batch.protocol.models.FileGetFromTaskOptions)
  - com.microsoft.azure.batch.protocol.Files.getPropertiesFromComputeNode(java.lang.String,java.lang.String,java.lang.String)
  - com.microsoft.azure.batch.protocol.Files.getPropertiesFromComputeNode(java.lang.String,java.lang.String,java.lang.String,com.microsoft.azure.batch.protocol.models.FileGetPropertiesFromComputeNodeOptions)
  - com.microsoft.azure.batch.protocol.Files.getPropertiesFromComputeNodeAsync(java.lang.String,java.lang.String,java.lang.String)
  - com.microsoft.azure.batch.protocol.Files.getPropertiesFromComputeNodeAsync(java.lang.String,java.lang.String,java.lang.String,com.microsoft.azure.batch.protocol.models.FileGetPropertiesFromComputeNodeOptions)
  - com.microsoft.azure.batch.protocol.Files.getPropertiesFromComputeNodeAsync(java.lang.String,java.lang.String,java.lang.String,com.microsoft.azure.batch.protocol.models.FileGetPropertiesFromComputeNodeOptions,com.microsoft.rest.ServiceCallback<java.lang.Void>)
  - com.microsoft.azure.batch.protocol.Files.getPropertiesFromComputeNodeAsync(java.lang.String,java.lang.String,java.lang.String,com.microsoft.rest.ServiceCallback<java.lang.Void>)
  - com.microsoft.azure.batch.protocol.Files.getPropertiesFromComputeNodeWithServiceResponseAsync(java.lang.String,java.lang.String,java.lang.String)
  - com.microsoft.azure.batch.protocol.Files.getPropertiesFromComputeNodeWithServiceResponseAsync(java.lang.String,java.lang.String,java.lang.String,com.microsoft.azure.batch.protocol.models.FileGetPropertiesFromComputeNodeOptions)
  - com.microsoft.azure.batch.protocol.Files.getPropertiesFromTask(java.lang.String,java.lang.String,java.lang.String)
  - com.microsoft.azure.batch.protocol.Files.getPropertiesFromTask(java.lang.String,java.lang.String,java.lang.String,com.microsoft.azure.batch.protocol.models.FileGetPropertiesFromTaskOptions)
  - com.microsoft.azure.batch.protocol.Files.getPropertiesFromTaskAsync(java.lang.String,java.lang.String,java.lang.String)
  - com.microsoft.azure.batch.protocol.Files.getPropertiesFromTaskAsync(java.lang.String,java.lang.String,java.lang.String,com.microsoft.azure.batch.protocol.models.FileGetPropertiesFromTaskOptions)
  - com.microsoft.azure.batch.protocol.Files.getPropertiesFromTaskAsync(java.lang.String,java.lang.String,java.lang.String,com.microsoft.azure.batch.protocol.models.FileGetPropertiesFromTaskOptions,com.microsoft.rest.ServiceCallback<java.lang.Void>)
  - com.microsoft.azure.batch.protocol.Files.getPropertiesFromTaskAsync(java.lang.String,java.lang.String,java.lang.String,com.microsoft.rest.ServiceCallback<java.lang.Void>)
  - com.microsoft.azure.batch.protocol.Files.getPropertiesFromTaskWithServiceResponseAsync(java.lang.String,java.lang.String,java.lang.String)
  - com.microsoft.azure.batch.protocol.Files.getPropertiesFromTaskWithServiceResponseAsync(java.lang.String,java.lang.String,java.lang.String,com.microsoft.azure.batch.protocol.models.FileGetPropertiesFromTaskOptions)
  - com.microsoft.azure.batch.protocol.Files.listFromComputeNode(java.lang.String,java.lang.String)
  - com.microsoft.azure.batch.protocol.Files.listFromComputeNode(java.lang.String,java.lang.String,java.lang.Boolean,com.microsoft.azure.batch.protocol.models.FileListFromComputeNodeOptions)
  - com.microsoft.azure.batch.protocol.Files.listFromComputeNodeAsync(java.lang.String,java.lang.String)
  - com.microsoft.azure.batch.protocol.Files.listFromComputeNodeAsync(java.lang.String,java.lang.String,com.microsoft.azure.ListOperationCallback<com.microsoft.azure.batch.protocol.models.NodeFile>)
  - com.microsoft.azure.batch.protocol.Files.listFromComputeNodeAsync(java.lang.String,java.lang.String,java.lang.Boolean,com.microsoft.azure.batch.protocol.models.FileListFromComputeNodeOptions)
  - com.microsoft.azure.batch.protocol.Files.listFromComputeNodeAsync(java.lang.String,java.lang.String,java.lang.Boolean,com.microsoft.azure.batch.protocol.models.FileListFromComputeNodeOptions,com.microsoft.azure.ListOperationCallback<com.microsoft.azure.batch.protocol.models.NodeFile>)
  - com.microsoft.azure.batch.protocol.Files.listFromComputeNodeNext(java.lang.String)
  - com.microsoft.azure.batch.protocol.Files.listFromComputeNodeNext(java.lang.String,com.microsoft.azure.batch.protocol.models.FileListFromComputeNodeNextOptions)
  - com.microsoft.azure.batch.protocol.Files.listFromComputeNodeNextAsync(java.lang.String)
  - com.microsoft.azure.batch.protocol.Files.listFromComputeNodeNextAsync(java.lang.String,com.microsoft.azure.batch.protocol.models.FileListFromComputeNodeNextOptions)
  - com.microsoft.azure.batch.protocol.Files.listFromComputeNodeNextAsync(java.lang.String,com.microsoft.azure.batch.protocol.models.FileListFromComputeNodeNextOptions,com.microsoft.rest.ServiceFuture<java.util.List<com.microsoft.azure.batch.protocol.models.NodeFile>>,com.microsoft.azure.ListOperationCallback<com.microsoft.azure.batch.protocol.models.NodeFile>)
  - com.microsoft.azure.batch.protocol.Files.listFromComputeNodeNextAsync(java.lang.String,com.microsoft.rest.ServiceFuture<java.util.List<com.microsoft.azure.batch.protocol.models.NodeFile>>,com.microsoft.azure.ListOperationCallback<com.microsoft.azure.batch.protocol.models.NodeFile>)
  - com.microsoft.azure.batch.protocol.Files.listFromComputeNodeNextWithServiceResponseAsync(java.lang.String)
  - com.microsoft.azure.batch.protocol.Files.listFromComputeNodeNextWithServiceResponseAsync(java.lang.String,com.microsoft.azure.batch.protocol.models.FileListFromComputeNodeNextOptions)
  - com.microsoft.azure.batch.protocol.Files.listFromComputeNodeWithServiceResponseAsync(java.lang.String,java.lang.String)
  - com.microsoft.azure.batch.protocol.Files.listFromComputeNodeWithServiceResponseAsync(java.lang.String,java.lang.String,java.lang.Boolean,com.microsoft.azure.batch.protocol.models.FileListFromComputeNodeOptions)
  - com.microsoft.azure.batch.protocol.Files.listFromTask(java.lang.String,java.lang.String)
  - com.microsoft.azure.batch.protocol.Files.listFromTask(java.lang.String,java.lang.String,java.lang.Boolean,com.microsoft.azure.batch.protocol.models.FileListFromTaskOptions)
  - com.microsoft.azure.batch.protocol.Files.listFromTaskAsync(java.lang.String,java.lang.String)
  - com.microsoft.azure.batch.protocol.Files.listFromTaskAsync(java.lang.String,java.lang.String,com.microsoft.azure.ListOperationCallback<com.microsoft.azure.batch.protocol.models.NodeFile>)
  - com.microsoft.azure.batch.protocol.Files.listFromTaskAsync(java.lang.String,java.lang.String,java.lang.Boolean,com.microsoft.azure.batch.protocol.models.FileListFromTaskOptions)
  - com.microsoft.azure.batch.protocol.Files.listFromTaskAsync(java.lang.String,java.lang.String,java.lang.Boolean,com.microsoft.azure.batch.protocol.models.FileListFromTaskOptions,com.microsoft.azure.ListOperationCallback<com.microsoft.azure.batch.protocol.models.NodeFile>)
  - com.microsoft.azure.batch.protocol.Files.listFromTaskNext(java.lang.String)
  - com.microsoft.azure.batch.protocol.Files.listFromTaskNext(java.lang.String,com.microsoft.azure.batch.protocol.models.FileListFromTaskNextOptions)
  - com.microsoft.azure.batch.protocol.Files.listFromTaskNextAsync(java.lang.String)
  - com.microsoft.azure.batch.protocol.Files.listFromTaskNextAsync(java.lang.String,com.microsoft.azure.batch.protocol.models.FileListFromTaskNextOptions)
  - com.microsoft.azure.batch.protocol.Files.listFromTaskNextAsync(java.lang.String,com.microsoft.azure.batch.protocol.models.FileListFromTaskNextOptions,com.microsoft.rest.ServiceFuture<java.util.List<com.microsoft.azure.batch.protocol.models.NodeFile>>,com.microsoft.azure.ListOperationCallback<com.microsoft.azure.batch.protocol.models.NodeFile>)
  - com.microsoft.azure.batch.protocol.Files.listFromTaskNextAsync(java.lang.String,com.microsoft.rest.ServiceFuture<java.util.List<com.microsoft.azure.batch.protocol.models.NodeFile>>,com.microsoft.azure.ListOperationCallback<com.microsoft.azure.batch.protocol.models.NodeFile>)
  - com.microsoft.azure.batch.protocol.Files.listFromTaskNextWithServiceResponseAsync(java.lang.String)
  - com.microsoft.azure.batch.protocol.Files.listFromTaskNextWithServiceResponseAsync(java.lang.String,com.microsoft.azure.batch.protocol.models.FileListFromTaskNextOptions)
  - com.microsoft.azure.batch.protocol.Files.listFromTaskWithServiceResponseAsync(java.lang.String,java.lang.String)
  - com.microsoft.azure.batch.protocol.Files.listFromTaskWithServiceResponseAsync(java.lang.String,java.lang.String,java.lang.Boolean,com.microsoft.azure.batch.protocol.models.FileListFromTaskOptions)
  langs:
  - java
  name: Files
  nameWithType: Files
  fullName: com.microsoft.azure.batch.protocol.Files
  type: Interface
  package: com.microsoft.azure.batch.protocol
  summary: An instance of this class provides access to all the operations defined in Files.
  syntax:
    content: public interface Files
- uid: com.microsoft.azure.batch.protocol.Files.deleteFromComputeNode(java.lang.String,java.lang.String,java.lang.String)
  id: deleteFromComputeNode(java.lang.String,java.lang.String,java.lang.String)
  artifact: com.microsoft.azure:azure-batch:8.0.0
  parent: com.microsoft.azure.batch.protocol.Files
  langs:
  - java
  name: deleteFromComputeNode(String poolId, String nodeId, String filePath)
  nameWithType: Files.deleteFromComputeNode(String poolId, String nodeId, String filePath)
  fullName: com.microsoft.azure.batch.protocol.Files.deleteFromComputeNode(String poolId, String nodeId, String filePath)
  overload: com.microsoft.azure.batch.protocol.Files.deleteFromComputeNode*
  type: Method
  package: com.microsoft.azure.batch.protocol
  summary: Deletes the specified file from the Compute Node.
  syntax:
    content: public abstract void deleteFromComputeNode(String poolId, String nodeId, String filePath)
    parameters:
    - id: poolId
      type: java.lang.String
      description: The ID of the Pool that contains the Compute Node.
    - id: nodeId
      type: java.lang.String
      description: The ID of the Compute Node from which you want to delete the file.
    - id: filePath
      type: java.lang.String
      description: The path to the file or directory that you want to delete.
- uid: com.microsoft.azure.batch.protocol.Files.deleteFromComputeNode(java.lang.String,java.lang.String,java.lang.String,java.lang.Boolean,com.microsoft.azure.batch.protocol.models.FileDeleteFromComputeNodeOptions)
  id: deleteFromComputeNode(java.lang.String,java.lang.String,java.lang.String,java.lang.Boolean,com.microsoft.azure.batch.protocol.models.FileDeleteFromComputeNodeOptions)
  artifact: com.microsoft.azure:azure-batch:8.0.0
  parent: com.microsoft.azure.batch.protocol.Files
  langs:
  - java
  name: deleteFromComputeNode(String poolId, String nodeId, String filePath, Boolean recursive, FileDeleteFromComputeNodeOptions fileDeleteFromComputeNodeOptions)
  nameWithType: Files.deleteFromComputeNode(String poolId, String nodeId, String filePath, Boolean recursive, FileDeleteFromComputeNodeOptions fileDeleteFromComputeNodeOptions)
  fullName: com.microsoft.azure.batch.protocol.Files.deleteFromComputeNode(String poolId, String nodeId, String filePath, Boolean recursive, FileDeleteFromComputeNodeOptions fileDeleteFromComputeNodeOptions)
  overload: com.microsoft.azure.batch.protocol.Files.deleteFromComputeNode*
  type: Method
  package: com.microsoft.azure.batch.protocol
  summary: Deletes the specified file from the Compute Node.
  syntax:
    content: public abstract void deleteFromComputeNode(String poolId, String nodeId, String filePath, Boolean recursive, FileDeleteFromComputeNodeOptions fileDeleteFromComputeNodeOptions)
    parameters:
    - id: poolId
      type: java.lang.String
      description: The ID of the Pool that contains the Compute Node.
    - id: nodeId
      type: java.lang.String
      description: The ID of the Compute Node from which you want to delete the file.
    - id: filePath
      type: java.lang.String
      description: The path to the file or directory that you want to delete.
    - id: recursive
      type: java.lang.Boolean
      description: Whether to delete children of a directory. If the filePath parameter represents a directory instead of a file, you can set recursive to true to delete the directory and all of the files and subdirectories in it. If recursive is false then the directory must be empty or deletion will fail.
    - id: fileDeleteFromComputeNodeOptions
      type: com.microsoft.azure.batch.protocol.models.FileDeleteFromComputeNodeOptions
      description: Additional parameters for the operation
- uid: com.microsoft.azure.batch.protocol.Files.deleteFromComputeNodeAsync(java.lang.String,java.lang.String,java.lang.String)
  id: deleteFromComputeNodeAsync(java.lang.String,java.lang.String,java.lang.String)
  artifact: com.microsoft.azure:azure-batch:8.0.0
  parent: com.microsoft.azure.batch.protocol.Files
  langs:
  - java
  name: deleteFromComputeNodeAsync(String poolId, String nodeId, String filePath)
  nameWithType: Files.deleteFromComputeNodeAsync(String poolId, String nodeId, String filePath)
  fullName: com.microsoft.azure.batch.protocol.Files.deleteFromComputeNodeAsync(String poolId, String nodeId, String filePath)
  overload: com.microsoft.azure.batch.protocol.Files.deleteFromComputeNodeAsync*
  type: Method
  package: com.microsoft.azure.batch.protocol
  summary: Deletes the specified file from the Compute Node.
  syntax:
    content: public abstract Observable<Void> deleteFromComputeNodeAsync(String poolId, String nodeId, String filePath)
    parameters:
    - id: poolId
      type: java.lang.String
      description: The ID of the Pool that contains the Compute Node.
    - id: nodeId
      type: java.lang.String
      description: The ID of the Compute Node from which you want to delete the file.
    - id: filePath
      type: java.lang.String
      description: The path to the file or directory that you want to delete.
    return:
      type: rx.Observable<java.lang.Void>
      description: the <xref uid="com.microsoft.rest.ServiceResponseWithHeaders" data-throw-if-not-resolved="false">ServiceResponseWithHeaders</xref> object if successful.
- uid: com.microsoft.azure.batch.protocol.Files.deleteFromComputeNodeAsync(java.lang.String,java.lang.String,java.lang.String,com.microsoft.rest.ServiceCallback<java.lang.Void>)
  id: deleteFromComputeNodeAsync(java.lang.String,java.lang.String,java.lang.String,com.microsoft.rest.ServiceCallback<java.lang.Void>)
  artifact: com.microsoft.azure:azure-batch:8.0.0
  parent: com.microsoft.azure.batch.protocol.Files
  langs:
  - java
  name: deleteFromComputeNodeAsync(String poolId, String nodeId, String filePath, ServiceCallback<Void> serviceCallback)
  nameWithType: Files.deleteFromComputeNodeAsync(String poolId, String nodeId, String filePath, ServiceCallback<Void> serviceCallback)
  fullName: com.microsoft.azure.batch.protocol.Files.deleteFromComputeNodeAsync(String poolId, String nodeId, String filePath, ServiceCallback<Void> serviceCallback)
  overload: com.microsoft.azure.batch.protocol.Files.deleteFromComputeNodeAsync*
  type: Method
  package: com.microsoft.azure.batch.protocol
  summary: Deletes the specified file from the Compute Node.
  syntax:
    content: public abstract ServiceFuture<Void> deleteFromComputeNodeAsync(String poolId, String nodeId, String filePath, ServiceCallback<Void> serviceCallback)
    parameters:
    - id: poolId
      type: java.lang.String
      description: The ID of the Pool that contains the Compute Node.
    - id: nodeId
      type: java.lang.String
      description: The ID of the Compute Node from which you want to delete the file.
    - id: filePath
      type: java.lang.String
      description: The path to the file or directory that you want to delete.
    - id: serviceCallback
      type: com.microsoft.rest.ServiceCallback<java.lang.Void>
      description: the async ServiceCallback to handle successful and failed responses.
    return:
      type: com.microsoft.rest.ServiceFuture<java.lang.Void>
      description: the <xref uid="com.microsoft.rest.ServiceFuture" data-throw-if-not-resolved="false">ServiceFuture</xref> object
- uid: com.microsoft.azure.batch.protocol.Files.deleteFromComputeNodeAsync(java.lang.String,java.lang.String,java.lang.String,java.lang.Boolean,com.microsoft.azure.batch.protocol.models.FileDeleteFromComputeNodeOptions)
  id: deleteFromComputeNodeAsync(java.lang.String,java.lang.String,java.lang.String,java.lang.Boolean,com.microsoft.azure.batch.protocol.models.FileDeleteFromComputeNodeOptions)
  artifact: com.microsoft.azure:azure-batch:8.0.0
  parent: com.microsoft.azure.batch.protocol.Files
  langs:
  - java
  name: deleteFromComputeNodeAsync(String poolId, String nodeId, String filePath, Boolean recursive, FileDeleteFromComputeNodeOptions fileDeleteFromComputeNodeOptions)
  nameWithType: Files.deleteFromComputeNodeAsync(String poolId, String nodeId, String filePath, Boolean recursive, FileDeleteFromComputeNodeOptions fileDeleteFromComputeNodeOptions)
  fullName: com.microsoft.azure.batch.protocol.Files.deleteFromComputeNodeAsync(String poolId, String nodeId, String filePath, Boolean recursive, FileDeleteFromComputeNodeOptions fileDeleteFromComputeNodeOptions)
  overload: com.microsoft.azure.batch.protocol.Files.deleteFromComputeNodeAsync*
  type: Method
  package: com.microsoft.azure.batch.protocol
  summary: Deletes the specified file from the Compute Node.
  syntax:
    content: public abstract Observable<Void> deleteFromComputeNodeAsync(String poolId, String nodeId, String filePath, Boolean recursive, FileDeleteFromComputeNodeOptions fileDeleteFromComputeNodeOptions)
    parameters:
    - id: poolId
      type: java.lang.String
      description: The ID of the Pool that contains the Compute Node.
    - id: nodeId
      type: java.lang.String
      description: The ID of the Compute Node from which you want to delete the file.
    - id: filePath
      type: java.lang.String
      description: The path to the file or directory that you want to delete.
    - id: recursive
      type: java.lang.Boolean
      description: Whether to delete children of a directory. If the filePath parameter represents a directory instead of a file, you can set recursive to true to delete the directory and all of the files and subdirectories in it. If recursive is false then the directory must be empty or deletion will fail.
    - id: fileDeleteFromComputeNodeOptions
      type: com.microsoft.azure.batch.protocol.models.FileDeleteFromComputeNodeOptions
      description: Additional parameters for the operation
    return:
      type: rx.Observable<java.lang.Void>
      description: the <xref uid="com.microsoft.rest.ServiceResponseWithHeaders" data-throw-if-not-resolved="false">ServiceResponseWithHeaders</xref> object if successful.
- uid: com.microsoft.azure.batch.protocol.Files.deleteFromComputeNodeAsync(java.lang.String,java.lang.String,java.lang.String,java.lang.Boolean,com.microsoft.azure.batch.protocol.models.FileDeleteFromComputeNodeOptions,com.microsoft.rest.ServiceCallback<java.lang.Void>)
  id: deleteFromComputeNodeAsync(java.lang.String,java.lang.String,java.lang.String,java.lang.Boolean,com.microsoft.azure.batch.protocol.models.FileDeleteFromComputeNodeOptions,com.microsoft.rest.ServiceCallback<java.lang.Void>)
  artifact: com.microsoft.azure:azure-batch:8.0.0
  parent: com.microsoft.azure.batch.protocol.Files
  langs:
  - java
  name: deleteFromComputeNodeAsync(String poolId, String nodeId, String filePath, Boolean recursive, FileDeleteFromComputeNodeOptions fileDeleteFromComputeNodeOptions, ServiceCallback<Void> serviceCallback)
  nameWithType: Files.deleteFromComputeNodeAsync(String poolId, String nodeId, String filePath, Boolean recursive, FileDeleteFromComputeNodeOptions fileDeleteFromComputeNodeOptions, ServiceCallback<Void> serviceCallback)
  fullName: com.microsoft.azure.batch.protocol.Files.deleteFromComputeNodeAsync(String poolId, String nodeId, String filePath, Boolean recursive, FileDeleteFromComputeNodeOptions fileDeleteFromComputeNodeOptions, ServiceCallback<Void> serviceCallback)
  overload: com.microsoft.azure.batch.protocol.Files.deleteFromComputeNodeAsync*
  type: Method
  package: com.microsoft.azure.batch.protocol
  summary: Deletes the specified file from the Compute Node.
  syntax:
    content: public abstract ServiceFuture<Void> deleteFromComputeNodeAsync(String poolId, String nodeId, String filePath, Boolean recursive, FileDeleteFromComputeNodeOptions fileDeleteFromComputeNodeOptions, ServiceCallback<Void> serviceCallback)
    parameters:
    - id: poolId
      type: java.lang.String
      description: The ID of the Pool that contains the Compute Node.
    - id: nodeId
      type: java.lang.String
      description: The ID of the Compute Node from which you want to delete the file.
    - id: filePath
      type: java.lang.String
      description: The path to the file or directory that you want to delete.
    - id: recursive
      type: java.lang.Boolean
      description: Whether to delete children of a directory. If the filePath parameter represents a directory instead of a file, you can set recursive to true to delete the directory and all of the files and subdirectories in it. If recursive is false then the directory must be empty or deletion will fail.
    - id: fileDeleteFromComputeNodeOptions
      type: com.microsoft.azure.batch.protocol.models.FileDeleteFromComputeNodeOptions
      description: Additional parameters for the operation
    - id: serviceCallback
      type: com.microsoft.rest.ServiceCallback<java.lang.Void>
      description: the async ServiceCallback to handle successful and failed responses.
    return:
      type: com.microsoft.rest.ServiceFuture<java.lang.Void>
      description: the <xref uid="com.microsoft.rest.ServiceFuture" data-throw-if-not-resolved="false">ServiceFuture</xref> object
- uid: com.microsoft.azure.batch.protocol.Files.deleteFromComputeNodeWithServiceResponseAsync(java.lang.String,java.lang.String,java.lang.String)
  id: deleteFromComputeNodeWithServiceResponseAsync(java.lang.String,java.lang.String,java.lang.String)
  artifact: com.microsoft.azure:azure-batch:8.0.0
  parent: com.microsoft.azure.batch.protocol.Files
  langs:
  - java
  name: deleteFromComputeNodeWithServiceResponseAsync(String poolId, String nodeId, String filePath)
  nameWithType: Files.deleteFromComputeNodeWithServiceResponseAsync(String poolId, String nodeId, String filePath)
  fullName: com.microsoft.azure.batch.protocol.Files.deleteFromComputeNodeWithServiceResponseAsync(String poolId, String nodeId, String filePath)
  overload: com.microsoft.azure.batch.protocol.Files.deleteFromComputeNodeWithServiceResponseAsync*
  type: Method
  package: com.microsoft.azure.batch.protocol
  summary: Deletes the specified file from the Compute Node.
  syntax:
    content: public abstract Observable<ServiceResponseWithHeaders<Void,FileDeleteFromComputeNodeHeaders>> deleteFromComputeNodeWithServiceResponseAsync(String poolId, String nodeId, String filePath)
    parameters:
    - id: poolId
      type: java.lang.String
      description: The ID of the Pool that contains the Compute Node.
    - id: nodeId
      type: java.lang.String
      description: The ID of the Compute Node from which you want to delete the file.
    - id: filePath
      type: java.lang.String
      description: The path to the file or directory that you want to delete.
    return:
      type: rx.Observable<com.microsoft.rest.ServiceResponseWithHeaders<java.lang.Void,com.microsoft.azure.batch.protocol.models.FileDeleteFromComputeNodeHeaders>>
      description: the <xref uid="com.microsoft.rest.ServiceResponseWithHeaders" data-throw-if-not-resolved="false">ServiceResponseWithHeaders</xref> object if successful.
- uid: com.microsoft.azure.batch.protocol.Files.deleteFromComputeNodeWithServiceResponseAsync(java.lang.String,java.lang.String,java.lang.String,java.lang.Boolean,com.microsoft.azure.batch.protocol.models.FileDeleteFromComputeNodeOptions)
  id: deleteFromComputeNodeWithServiceResponseAsync(java.lang.String,java.lang.String,java.lang.String,java.lang.Boolean,com.microsoft.azure.batch.protocol.models.FileDeleteFromComputeNodeOptions)
  artifact: com.microsoft.azure:azure-batch:8.0.0
  parent: com.microsoft.azure.batch.protocol.Files
  langs:
  - java
  name: deleteFromComputeNodeWithServiceResponseAsync(String poolId, String nodeId, String filePath, Boolean recursive, FileDeleteFromComputeNodeOptions fileDeleteFromComputeNodeOptions)
  nameWithType: Files.deleteFromComputeNodeWithServiceResponseAsync(String poolId, String nodeId, String filePath, Boolean recursive, FileDeleteFromComputeNodeOptions fileDeleteFromComputeNodeOptions)
  fullName: com.microsoft.azure.batch.protocol.Files.deleteFromComputeNodeWithServiceResponseAsync(String poolId, String nodeId, String filePath, Boolean recursive, FileDeleteFromComputeNodeOptions fileDeleteFromComputeNodeOptions)
  overload: com.microsoft.azure.batch.protocol.Files.deleteFromComputeNodeWithServiceResponseAsync*
  type: Method
  package: com.microsoft.azure.batch.protocol
  summary: Deletes the specified file from the Compute Node.
  syntax:
    content: public abstract Observable<ServiceResponseWithHeaders<Void,FileDeleteFromComputeNodeHeaders>> deleteFromComputeNodeWithServiceResponseAsync(String poolId, String nodeId, String filePath, Boolean recursive, FileDeleteFromComputeNodeOptions fileDeleteFromComputeNodeOptions)
    parameters:
    - id: poolId
      type: java.lang.String
      description: The ID of the Pool that contains the Compute Node.
    - id: nodeId
      type: java.lang.String
      description: The ID of the Compute Node from which you want to delete the file.
    - id: filePath
      type: java.lang.String
      description: The path to the file or directory that you want to delete.
    - id: recursive
      type: java.lang.Boolean
      description: Whether to delete children of a directory. If the filePath parameter represents a directory instead of a file, you can set recursive to true to delete the directory and all of the files and subdirectories in it. If recursive is false then the directory must be empty or deletion will fail.
    - id: fileDeleteFromComputeNodeOptions
      type: com.microsoft.azure.batch.protocol.models.FileDeleteFromComputeNodeOptions
      description: Additional parameters for the operation
    return:
      type: rx.Observable<com.microsoft.rest.ServiceResponseWithHeaders<java.lang.Void,com.microsoft.azure.batch.protocol.models.FileDeleteFromComputeNodeHeaders>>
      description: the <xref uid="com.microsoft.rest.ServiceResponseWithHeaders" data-throw-if-not-resolved="false">ServiceResponseWithHeaders</xref> object if successful.
- uid: com.microsoft.azure.batch.protocol.Files.deleteFromTask(java.lang.String,java.lang.String,java.lang.String)
  id: deleteFromTask(java.lang.String,java.lang.String,java.lang.String)
  artifact: com.microsoft.azure:azure-batch:8.0.0
  parent: com.microsoft.azure.batch.protocol.Files
  langs:
  - java
  name: deleteFromTask(String jobId, String taskId, String filePath)
  nameWithType: Files.deleteFromTask(String jobId, String taskId, String filePath)
  fullName: com.microsoft.azure.batch.protocol.Files.deleteFromTask(String jobId, String taskId, String filePath)
  overload: com.microsoft.azure.batch.protocol.Files.deleteFromTask*
  type: Method
  package: com.microsoft.azure.batch.protocol
  summary: Deletes the specified Task file from the Compute Node where the Task ran.
  syntax:
    content: public abstract void deleteFromTask(String jobId, String taskId, String filePath)
    parameters:
    - id: jobId
      type: java.lang.String
      description: The ID of the Job that contains the Task.
    - id: taskId
      type: java.lang.String
      description: The ID of the Task whose file you want to delete.
    - id: filePath
      type: java.lang.String
      description: The path to the Task file or directory that you want to delete.
- uid: com.microsoft.azure.batch.protocol.Files.deleteFromTask(java.lang.String,java.lang.String,java.lang.String,java.lang.Boolean,com.microsoft.azure.batch.protocol.models.FileDeleteFromTaskOptions)
  id: deleteFromTask(java.lang.String,java.lang.String,java.lang.String,java.lang.Boolean,com.microsoft.azure.batch.protocol.models.FileDeleteFromTaskOptions)
  artifact: com.microsoft.azure:azure-batch:8.0.0
  parent: com.microsoft.azure.batch.protocol.Files
  langs:
  - java
  name: deleteFromTask(String jobId, String taskId, String filePath, Boolean recursive, FileDeleteFromTaskOptions fileDeleteFromTaskOptions)
  nameWithType: Files.deleteFromTask(String jobId, String taskId, String filePath, Boolean recursive, FileDeleteFromTaskOptions fileDeleteFromTaskOptions)
  fullName: com.microsoft.azure.batch.protocol.Files.deleteFromTask(String jobId, String taskId, String filePath, Boolean recursive, FileDeleteFromTaskOptions fileDeleteFromTaskOptions)
  overload: com.microsoft.azure.batch.protocol.Files.deleteFromTask*
  type: Method
  package: com.microsoft.azure.batch.protocol
  summary: Deletes the specified Task file from the Compute Node where the Task ran.
  syntax:
    content: public abstract void deleteFromTask(String jobId, String taskId, String filePath, Boolean recursive, FileDeleteFromTaskOptions fileDeleteFromTaskOptions)
    parameters:
    - id: jobId
      type: java.lang.String
      description: The ID of the Job that contains the Task.
    - id: taskId
      type: java.lang.String
      description: The ID of the Task whose file you want to delete.
    - id: filePath
      type: java.lang.String
      description: The path to the Task file or directory that you want to delete.
    - id: recursive
      type: java.lang.Boolean
      description: Whether to delete children of a directory. If the filePath parameter represents a directory instead of a file, you can set recursive to true to delete the directory and all of the files and subdirectories in it. If recursive is false then the directory must be empty or deletion will fail.
    - id: fileDeleteFromTaskOptions
      type: com.microsoft.azure.batch.protocol.models.FileDeleteFromTaskOptions
      description: Additional parameters for the operation
- uid: com.microsoft.azure.batch.protocol.Files.deleteFromTaskAsync(java.lang.String,java.lang.String,java.lang.String)
  id: deleteFromTaskAsync(java.lang.String,java.lang.String,java.lang.String)
  artifact: com.microsoft.azure:azure-batch:8.0.0
  parent: com.microsoft.azure.batch.protocol.Files
  langs:
  - java
  name: deleteFromTaskAsync(String jobId, String taskId, String filePath)
  nameWithType: Files.deleteFromTaskAsync(String jobId, String taskId, String filePath)
  fullName: com.microsoft.azure.batch.protocol.Files.deleteFromTaskAsync(String jobId, String taskId, String filePath)
  overload: com.microsoft.azure.batch.protocol.Files.deleteFromTaskAsync*
  type: Method
  package: com.microsoft.azure.batch.protocol
  summary: Deletes the specified Task file from the Compute Node where the Task ran.
  syntax:
    content: public abstract Observable<Void> deleteFromTaskAsync(String jobId, String taskId, String filePath)
    parameters:
    - id: jobId
      type: java.lang.String
      description: The ID of the Job that contains the Task.
    - id: taskId
      type: java.lang.String
      description: The ID of the Task whose file you want to delete.
    - id: filePath
      type: java.lang.String
      description: The path to the Task file or directory that you want to delete.
    return:
      type: rx.Observable<java.lang.Void>
      description: the <xref uid="com.microsoft.rest.ServiceResponseWithHeaders" data-throw-if-not-resolved="false">ServiceResponseWithHeaders</xref> object if successful.
- uid: com.microsoft.azure.batch.protocol.Files.deleteFromTaskAsync(java.lang.String,java.lang.String,java.lang.String,com.microsoft.rest.ServiceCallback<java.lang.Void>)
  id: deleteFromTaskAsync(java.lang.String,java.lang.String,java.lang.String,com.microsoft.rest.ServiceCallback<java.lang.Void>)
  artifact: com.microsoft.azure:azure-batch:8.0.0
  parent: com.microsoft.azure.batch.protocol.Files
  langs:
  - java
  name: deleteFromTaskAsync(String jobId, String taskId, String filePath, ServiceCallback<Void> serviceCallback)
  nameWithType: Files.deleteFromTaskAsync(String jobId, String taskId, String filePath, ServiceCallback<Void> serviceCallback)
  fullName: com.microsoft.azure.batch.protocol.Files.deleteFromTaskAsync(String jobId, String taskId, String filePath, ServiceCallback<Void> serviceCallback)
  overload: com.microsoft.azure.batch.protocol.Files.deleteFromTaskAsync*
  type: Method
  package: com.microsoft.azure.batch.protocol
  summary: Deletes the specified Task file from the Compute Node where the Task ran.
  syntax:
    content: public abstract ServiceFuture<Void> deleteFromTaskAsync(String jobId, String taskId, String filePath, ServiceCallback<Void> serviceCallback)
    parameters:
    - id: jobId
      type: java.lang.String
      description: The ID of the Job that contains the Task.
    - id: taskId
      type: java.lang.String
      description: The ID of the Task whose file you want to delete.
    - id: filePath
      type: java.lang.String
      description: The path to the Task file or directory that you want to delete.
    - id: serviceCallback
      type: com.microsoft.rest.ServiceCallback<java.lang.Void>
      description: the async ServiceCallback to handle successful and failed responses.
    return:
      type: com.microsoft.rest.ServiceFuture<java.lang.Void>
      description: the <xref uid="com.microsoft.rest.ServiceFuture" data-throw-if-not-resolved="false">ServiceFuture</xref> object
- uid: com.microsoft.azure.batch.protocol.Files.deleteFromTaskAsync(java.lang.String,java.lang.String,java.lang.String,java.lang.Boolean,com.microsoft.azure.batch.protocol.models.FileDeleteFromTaskOptions)
  id: deleteFromTaskAsync(java.lang.String,java.lang.String,java.lang.String,java.lang.Boolean,com.microsoft.azure.batch.protocol.models.FileDeleteFromTaskOptions)
  artifact: com.microsoft.azure:azure-batch:8.0.0
  parent: com.microsoft.azure.batch.protocol.Files
  langs:
  - java
  name: deleteFromTaskAsync(String jobId, String taskId, String filePath, Boolean recursive, FileDeleteFromTaskOptions fileDeleteFromTaskOptions)
  nameWithType: Files.deleteFromTaskAsync(String jobId, String taskId, String filePath, Boolean recursive, FileDeleteFromTaskOptions fileDeleteFromTaskOptions)
  fullName: com.microsoft.azure.batch.protocol.Files.deleteFromTaskAsync(String jobId, String taskId, String filePath, Boolean recursive, FileDeleteFromTaskOptions fileDeleteFromTaskOptions)
  overload: com.microsoft.azure.batch.protocol.Files.deleteFromTaskAsync*
  type: Method
  package: com.microsoft.azure.batch.protocol
  summary: Deletes the specified Task file from the Compute Node where the Task ran.
  syntax:
    content: public abstract Observable<Void> deleteFromTaskAsync(String jobId, String taskId, String filePath, Boolean recursive, FileDeleteFromTaskOptions fileDeleteFromTaskOptions)
    parameters:
    - id: jobId
      type: java.lang.String
      description: The ID of the Job that contains the Task.
    - id: taskId
      type: java.lang.String
      description: The ID of the Task whose file you want to delete.
    - id: filePath
      type: java.lang.String
      description: The path to the Task file or directory that you want to delete.
    - id: recursive
      type: java.lang.Boolean
      description: Whether to delete children of a directory. If the filePath parameter represents a directory instead of a file, you can set recursive to true to delete the directory and all of the files and subdirectories in it. If recursive is false then the directory must be empty or deletion will fail.
    - id: fileDeleteFromTaskOptions
      type: com.microsoft.azure.batch.protocol.models.FileDeleteFromTaskOptions
      description: Additional parameters for the operation
    return:
      type: rx.Observable<java.lang.Void>
      description: the <xref uid="com.microsoft.rest.ServiceResponseWithHeaders" data-throw-if-not-resolved="false">ServiceResponseWithHeaders</xref> object if successful.
- uid: com.microsoft.azure.batch.protocol.Files.deleteFromTaskAsync(java.lang.String,java.lang.String,java.lang.String,java.lang.Boolean,com.microsoft.azure.batch.protocol.models.FileDeleteFromTaskOptions,com.microsoft.rest.ServiceCallback<java.lang.Void>)
  id: deleteFromTaskAsync(java.lang.String,java.lang.String,java.lang.String,java.lang.Boolean,com.microsoft.azure.batch.protocol.models.FileDeleteFromTaskOptions,com.microsoft.rest.ServiceCallback<java.lang.Void>)
  artifact: com.microsoft.azure:azure-batch:8.0.0
  parent: com.microsoft.azure.batch.protocol.Files
  langs:
  - java
  name: deleteFromTaskAsync(String jobId, String taskId, String filePath, Boolean recursive, FileDeleteFromTaskOptions fileDeleteFromTaskOptions, ServiceCallback<Void> serviceCallback)
  nameWithType: Files.deleteFromTaskAsync(String jobId, String taskId, String filePath, Boolean recursive, FileDeleteFromTaskOptions fileDeleteFromTaskOptions, ServiceCallback<Void> serviceCallback)
  fullName: com.microsoft.azure.batch.protocol.Files.deleteFromTaskAsync(String jobId, String taskId, String filePath, Boolean recursive, FileDeleteFromTaskOptions fileDeleteFromTaskOptions, ServiceCallback<Void> serviceCallback)
  overload: com.microsoft.azure.batch.protocol.Files.deleteFromTaskAsync*
  type: Method
  package: com.microsoft.azure.batch.protocol
  summary: Deletes the specified Task file from the Compute Node where the Task ran.
  syntax:
    content: public abstract ServiceFuture<Void> deleteFromTaskAsync(String jobId, String taskId, String filePath, Boolean recursive, FileDeleteFromTaskOptions fileDeleteFromTaskOptions, ServiceCallback<Void> serviceCallback)
    parameters:
    - id: jobId
      type: java.lang.String
      description: The ID of the Job that contains the Task.
    - id: taskId
      type: java.lang.String
      description: The ID of the Task whose file you want to delete.
    - id: filePath
      type: java.lang.String
      description: The path to the Task file or directory that you want to delete.
    - id: recursive
      type: java.lang.Boolean
      description: Whether to delete children of a directory. If the filePath parameter represents a directory instead of a file, you can set recursive to true to delete the directory and all of the files and subdirectories in it. If recursive is false then the directory must be empty or deletion will fail.
    - id: fileDeleteFromTaskOptions
      type: com.microsoft.azure.batch.protocol.models.FileDeleteFromTaskOptions
      description: Additional parameters for the operation
    - id: serviceCallback
      type: com.microsoft.rest.ServiceCallback<java.lang.Void>
      description: the async ServiceCallback to handle successful and failed responses.
    return:
      type: com.microsoft.rest.ServiceFuture<java.lang.Void>
      description: the <xref uid="com.microsoft.rest.ServiceFuture" data-throw-if-not-resolved="false">ServiceFuture</xref> object
- uid: com.microsoft.azure.batch.protocol.Files.deleteFromTaskWithServiceResponseAsync(java.lang.String,java.lang.String,java.lang.String)
  id: deleteFromTaskWithServiceResponseAsync(java.lang.String,java.lang.String,java.lang.String)
  artifact: com.microsoft.azure:azure-batch:8.0.0
  parent: com.microsoft.azure.batch.protocol.Files
  langs:
  - java
  name: deleteFromTaskWithServiceResponseAsync(String jobId, String taskId, String filePath)
  nameWithType: Files.deleteFromTaskWithServiceResponseAsync(String jobId, String taskId, String filePath)
  fullName: com.microsoft.azure.batch.protocol.Files.deleteFromTaskWithServiceResponseAsync(String jobId, String taskId, String filePath)
  overload: com.microsoft.azure.batch.protocol.Files.deleteFromTaskWithServiceResponseAsync*
  type: Method
  package: com.microsoft.azure.batch.protocol
  summary: Deletes the specified Task file from the Compute Node where the Task ran.
  syntax:
    content: public abstract Observable<ServiceResponseWithHeaders<Void,FileDeleteFromTaskHeaders>> deleteFromTaskWithServiceResponseAsync(String jobId, String taskId, String filePath)
    parameters:
    - id: jobId
      type: java.lang.String
      description: The ID of the Job that contains the Task.
    - id: taskId
      type: java.lang.String
      description: The ID of the Task whose file you want to delete.
    - id: filePath
      type: java.lang.String
      description: The path to the Task file or directory that you want to delete.
    return:
      type: rx.Observable<com.microsoft.rest.ServiceResponseWithHeaders<java.lang.Void,com.microsoft.azure.batch.protocol.models.FileDeleteFromTaskHeaders>>
      description: the <xref uid="com.microsoft.rest.ServiceResponseWithHeaders" data-throw-if-not-resolved="false">ServiceResponseWithHeaders</xref> object if successful.
- uid: com.microsoft.azure.batch.protocol.Files.deleteFromTaskWithServiceResponseAsync(java.lang.String,java.lang.String,java.lang.String,java.lang.Boolean,com.microsoft.azure.batch.protocol.models.FileDeleteFromTaskOptions)
  id: deleteFromTaskWithServiceResponseAsync(java.lang.String,java.lang.String,java.lang.String,java.lang.Boolean,com.microsoft.azure.batch.protocol.models.FileDeleteFromTaskOptions)
  artifact: com.microsoft.azure:azure-batch:8.0.0
  parent: com.microsoft.azure.batch.protocol.Files
  langs:
  - java
  name: deleteFromTaskWithServiceResponseAsync(String jobId, String taskId, String filePath, Boolean recursive, FileDeleteFromTaskOptions fileDeleteFromTaskOptions)
  nameWithType: Files.deleteFromTaskWithServiceResponseAsync(String jobId, String taskId, String filePath, Boolean recursive, FileDeleteFromTaskOptions fileDeleteFromTaskOptions)
  fullName: com.microsoft.azure.batch.protocol.Files.deleteFromTaskWithServiceResponseAsync(String jobId, String taskId, String filePath, Boolean recursive, FileDeleteFromTaskOptions fileDeleteFromTaskOptions)
  overload: com.microsoft.azure.batch.protocol.Files.deleteFromTaskWithServiceResponseAsync*
  type: Method
  package: com.microsoft.azure.batch.protocol
  summary: Deletes the specified Task file from the Compute Node where the Task ran.
  syntax:
    content: public abstract Observable<ServiceResponseWithHeaders<Void,FileDeleteFromTaskHeaders>> deleteFromTaskWithServiceResponseAsync(String jobId, String taskId, String filePath, Boolean recursive, FileDeleteFromTaskOptions fileDeleteFromTaskOptions)
    parameters:
    - id: jobId
      type: java.lang.String
      description: The ID of the Job that contains the Task.
    - id: taskId
      type: java.lang.String
      description: The ID of the Task whose file you want to delete.
    - id: filePath
      type: java.lang.String
      description: The path to the Task file or directory that you want to delete.
    - id: recursive
      type: java.lang.Boolean
      description: Whether to delete children of a directory. If the filePath parameter represents a directory instead of a file, you can set recursive to true to delete the directory and all of the files and subdirectories in it. If recursive is false then the directory must be empty or deletion will fail.
    - id: fileDeleteFromTaskOptions
      type: com.microsoft.azure.batch.protocol.models.FileDeleteFromTaskOptions
      description: Additional parameters for the operation
    return:
      type: rx.Observable<com.microsoft.rest.ServiceResponseWithHeaders<java.lang.Void,com.microsoft.azure.batch.protocol.models.FileDeleteFromTaskHeaders>>
      description: the <xref uid="com.microsoft.rest.ServiceResponseWithHeaders" data-throw-if-not-resolved="false">ServiceResponseWithHeaders</xref> object if successful.
- uid: com.microsoft.azure.batch.protocol.Files.getFromComputeNode(java.lang.String,java.lang.String,java.lang.String)
  id: getFromComputeNode(java.lang.String,java.lang.String,java.lang.String)
  artifact: com.microsoft.azure:azure-batch:8.0.0
  parent: com.microsoft.azure.batch.protocol.Files
  langs:
  - java
  name: getFromComputeNode(String poolId, String nodeId, String filePath)
  nameWithType: Files.getFromComputeNode(String poolId, String nodeId, String filePath)
  fullName: com.microsoft.azure.batch.protocol.Files.getFromComputeNode(String poolId, String nodeId, String filePath)
  overload: com.microsoft.azure.batch.protocol.Files.getFromComputeNode*
  type: Method
  package: com.microsoft.azure.batch.protocol
  summary: Returns the content of the specified Compute Node file.
  syntax:
    content: public abstract InputStream getFromComputeNode(String poolId, String nodeId, String filePath)
    parameters:
    - id: poolId
      type: java.lang.String
      description: The ID of the Pool that contains the Compute Node.
    - id: nodeId
      type: java.lang.String
      description: The ID of the Compute Node that contains the file.
    - id: filePath
      type: java.lang.String
      description: The path to the Compute Node file that you want to get the content of.
    return:
      type: java.io.InputStream
      description: the InputStream object if successful.
- uid: com.microsoft.azure.batch.protocol.Files.getFromComputeNode(java.lang.String,java.lang.String,java.lang.String,com.microsoft.azure.batch.protocol.models.FileGetFromComputeNodeOptions)
  id: getFromComputeNode(java.lang.String,java.lang.String,java.lang.String,com.microsoft.azure.batch.protocol.models.FileGetFromComputeNodeOptions)
  artifact: com.microsoft.azure:azure-batch:8.0.0
  parent: com.microsoft.azure.batch.protocol.Files
  langs:
  - java
  name: getFromComputeNode(String poolId, String nodeId, String filePath, FileGetFromComputeNodeOptions fileGetFromComputeNodeOptions)
  nameWithType: Files.getFromComputeNode(String poolId, String nodeId, String filePath, FileGetFromComputeNodeOptions fileGetFromComputeNodeOptions)
  fullName: com.microsoft.azure.batch.protocol.Files.getFromComputeNode(String poolId, String nodeId, String filePath, FileGetFromComputeNodeOptions fileGetFromComputeNodeOptions)
  overload: com.microsoft.azure.batch.protocol.Files.getFromComputeNode*
  type: Method
  package: com.microsoft.azure.batch.protocol
  summary: Returns the content of the specified Compute Node file.
  syntax:
    content: public abstract InputStream getFromComputeNode(String poolId, String nodeId, String filePath, FileGetFromComputeNodeOptions fileGetFromComputeNodeOptions)
    parameters:
    - id: poolId
      type: java.lang.String
      description: The ID of the Pool that contains the Compute Node.
    - id: nodeId
      type: java.lang.String
      description: The ID of the Compute Node that contains the file.
    - id: filePath
      type: java.lang.String
      description: The path to the Compute Node file that you want to get the content of.
    - id: fileGetFromComputeNodeOptions
      type: com.microsoft.azure.batch.protocol.models.FileGetFromComputeNodeOptions
      description: Additional parameters for the operation
    return:
      type: java.io.InputStream
      description: the InputStream object if successful.
- uid: com.microsoft.azure.batch.protocol.Files.getFromComputeNode(java.lang.String,java.lang.String,java.lang.String,com.microsoft.azure.batch.protocol.models.FileGetFromComputeNodeOptions,java.io.OutputStream)
  id: getFromComputeNode(java.lang.String,java.lang.String,java.lang.String,com.microsoft.azure.batch.protocol.models.FileGetFromComputeNodeOptions,java.io.OutputStream)
  artifact: com.microsoft.azure:azure-batch:8.0.0
  parent: com.microsoft.azure.batch.protocol.Files
  langs:
  - java
  name: getFromComputeNode(String poolId, String nodeId, String filePath, FileGetFromComputeNodeOptions fileGetFromComputeNodeOptions, OutputStream outputStream)
  nameWithType: Files.getFromComputeNode(String poolId, String nodeId, String filePath, FileGetFromComputeNodeOptions fileGetFromComputeNodeOptions, OutputStream outputStream)
  fullName: com.microsoft.azure.batch.protocol.Files.getFromComputeNode(String poolId, String nodeId, String filePath, FileGetFromComputeNodeOptions fileGetFromComputeNodeOptions, OutputStream outputStream)
  overload: com.microsoft.azure.batch.protocol.Files.getFromComputeNode*
  type: Method
  package: com.microsoft.azure.batch.protocol
  summary: Returns the content of the specified compute node file.
  syntax:
    content: public abstract void getFromComputeNode(String poolId, String nodeId, String filePath, FileGetFromComputeNodeOptions fileGetFromComputeNodeOptions, OutputStream outputStream)
    parameters:
    - id: poolId
      type: java.lang.String
      description: The ID of the pool that contains the compute node.
    - id: nodeId
      type: java.lang.String
      description: The ID of the compute node that contains the file.
    - id: filePath
      type: java.lang.String
      description: >-
        The path to the compute node file that you want to get the content
                    of.
    - id: fileGetFromComputeNodeOptions
      type: com.microsoft.azure.batch.protocol.models.FileGetFromComputeNodeOptions
      description: Additional parameters for the operation
    - id: outputStream
      type: java.io.OutputStream
      description: >-
        The OutputStream object which data will be written to if
                    successful.
- uid: com.microsoft.azure.batch.protocol.Files.getFromComputeNode(java.lang.String,java.lang.String,java.lang.String,java.io.OutputStream)
  id: getFromComputeNode(java.lang.String,java.lang.String,java.lang.String,java.io.OutputStream)
  artifact: com.microsoft.azure:azure-batch:8.0.0
  parent: com.microsoft.azure.batch.protocol.Files
  langs:
  - java
  name: getFromComputeNode(String poolId, String nodeId, String filePath, OutputStream outputStream)
  nameWithType: Files.getFromComputeNode(String poolId, String nodeId, String filePath, OutputStream outputStream)
  fullName: com.microsoft.azure.batch.protocol.Files.getFromComputeNode(String poolId, String nodeId, String filePath, OutputStream outputStream)
  overload: com.microsoft.azure.batch.protocol.Files.getFromComputeNode*
  type: Method
  package: com.microsoft.azure.batch.protocol
  summary: Returns the content of the specified task file.
  syntax:
    content: public abstract void getFromComputeNode(String poolId, String nodeId, String filePath, OutputStream outputStream)
    parameters:
    - id: poolId
      type: java.lang.String
      description: The ID of the pool that contains the compute node.
    - id: nodeId
      type: java.lang.String
      description: The ID of the compute node that contains the file.
    - id: filePath
      type: java.lang.String
      description: >-
        The path to the compute node file that you want to get the content
                    of.
    - id: outputStream
      type: java.io.OutputStream
      description: >-
        The OutputStream object which data will be written to if
                    successful.
- uid: com.microsoft.azure.batch.protocol.Files.getFromComputeNodeAsync(java.lang.String,java.lang.String,java.lang.String)
  id: getFromComputeNodeAsync(java.lang.String,java.lang.String,java.lang.String)
  artifact: com.microsoft.azure:azure-batch:8.0.0
  parent: com.microsoft.azure.batch.protocol.Files
  langs:
  - java
  name: getFromComputeNodeAsync(String poolId, String nodeId, String filePath)
  nameWithType: Files.getFromComputeNodeAsync(String poolId, String nodeId, String filePath)
  fullName: com.microsoft.azure.batch.protocol.Files.getFromComputeNodeAsync(String poolId, String nodeId, String filePath)
  overload: com.microsoft.azure.batch.protocol.Files.getFromComputeNodeAsync*
  type: Method
  package: com.microsoft.azure.batch.protocol
  summary: Returns the content of the specified Compute Node file.
  syntax:
    content: public abstract Observable<InputStream> getFromComputeNodeAsync(String poolId, String nodeId, String filePath)
    parameters:
    - id: poolId
      type: java.lang.String
      description: The ID of the Pool that contains the Compute Node.
    - id: nodeId
      type: java.lang.String
      description: The ID of the Compute Node that contains the file.
    - id: filePath
      type: java.lang.String
      description: The path to the Compute Node file that you want to get the content of.
    return:
      type: rx.Observable<java.io.InputStream>
      description: the observable to the InputStream object
- uid: com.microsoft.azure.batch.protocol.Files.getFromComputeNodeAsync(java.lang.String,java.lang.String,java.lang.String,com.microsoft.azure.batch.protocol.models.FileGetFromComputeNodeOptions)
  id: getFromComputeNodeAsync(java.lang.String,java.lang.String,java.lang.String,com.microsoft.azure.batch.protocol.models.FileGetFromComputeNodeOptions)
  artifact: com.microsoft.azure:azure-batch:8.0.0
  parent: com.microsoft.azure.batch.protocol.Files
  langs:
  - java
  name: getFromComputeNodeAsync(String poolId, String nodeId, String filePath, FileGetFromComputeNodeOptions fileGetFromComputeNodeOptions)
  nameWithType: Files.getFromComputeNodeAsync(String poolId, String nodeId, String filePath, FileGetFromComputeNodeOptions fileGetFromComputeNodeOptions)
  fullName: com.microsoft.azure.batch.protocol.Files.getFromComputeNodeAsync(String poolId, String nodeId, String filePath, FileGetFromComputeNodeOptions fileGetFromComputeNodeOptions)
  overload: com.microsoft.azure.batch.protocol.Files.getFromComputeNodeAsync*
  type: Method
  package: com.microsoft.azure.batch.protocol
  summary: Returns the content of the specified Compute Node file.
  syntax:
    content: public abstract Observable<InputStream> getFromComputeNodeAsync(String poolId, String nodeId, String filePath, FileGetFromComputeNodeOptions fileGetFromComputeNodeOptions)
    parameters:
    - id: poolId
      type: java.lang.String
      description: The ID of the Pool that contains the Compute Node.
    - id: nodeId
      type: java.lang.String
      description: The ID of the Compute Node that contains the file.
    - id: filePath
      type: java.lang.String
      description: The path to the Compute Node file that you want to get the content of.
    - id: fileGetFromComputeNodeOptions
      type: com.microsoft.azure.batch.protocol.models.FileGetFromComputeNodeOptions
      description: Additional parameters for the operation
    return:
      type: rx.Observable<java.io.InputStream>
      description: the observable to the InputStream object
- uid: com.microsoft.azure.batch.protocol.Files.getFromComputeNodeAsync(java.lang.String,java.lang.String,java.lang.String,com.microsoft.azure.batch.protocol.models.FileGetFromComputeNodeOptions,com.microsoft.rest.ServiceCallback<java.io.InputStream>)
  id: getFromComputeNodeAsync(java.lang.String,java.lang.String,java.lang.String,com.microsoft.azure.batch.protocol.models.FileGetFromComputeNodeOptions,com.microsoft.rest.ServiceCallback<java.io.InputStream>)
  artifact: com.microsoft.azure:azure-batch:8.0.0
  parent: com.microsoft.azure.batch.protocol.Files
  langs:
  - java
  name: getFromComputeNodeAsync(String poolId, String nodeId, String filePath, FileGetFromComputeNodeOptions fileGetFromComputeNodeOptions, ServiceCallback<InputStream> serviceCallback)
  nameWithType: Files.getFromComputeNodeAsync(String poolId, String nodeId, String filePath, FileGetFromComputeNodeOptions fileGetFromComputeNodeOptions, ServiceCallback<InputStream> serviceCallback)
  fullName: com.microsoft.azure.batch.protocol.Files.getFromComputeNodeAsync(String poolId, String nodeId, String filePath, FileGetFromComputeNodeOptions fileGetFromComputeNodeOptions, ServiceCallback<InputStream> serviceCallback)
  overload: com.microsoft.azure.batch.protocol.Files.getFromComputeNodeAsync*
  type: Method
  package: com.microsoft.azure.batch.protocol
  summary: Returns the content of the specified Compute Node file.
  syntax:
    content: public abstract ServiceFuture<InputStream> getFromComputeNodeAsync(String poolId, String nodeId, String filePath, FileGetFromComputeNodeOptions fileGetFromComputeNodeOptions, ServiceCallback<InputStream> serviceCallback)
    parameters:
    - id: poolId
      type: java.lang.String
      description: The ID of the Pool that contains the Compute Node.
    - id: nodeId
      type: java.lang.String
      description: The ID of the Compute Node that contains the file.
    - id: filePath
      type: java.lang.String
      description: The path to the Compute Node file that you want to get the content of.
    - id: fileGetFromComputeNodeOptions
      type: com.microsoft.azure.batch.protocol.models.FileGetFromComputeNodeOptions
      description: Additional parameters for the operation
    - id: serviceCallback
      type: com.microsoft.rest.ServiceCallback<java.io.InputStream>
      description: the async ServiceCallback to handle successful and failed responses.
    return:
      type: com.microsoft.rest.ServiceFuture<java.io.InputStream>
      description: the <xref uid="com.microsoft.rest.ServiceFuture" data-throw-if-not-resolved="false">ServiceFuture</xref> object
- uid: com.microsoft.azure.batch.protocol.Files.getFromComputeNodeAsync(java.lang.String,java.lang.String,java.lang.String,com.microsoft.rest.ServiceCallback<java.io.InputStream>)
  id: getFromComputeNodeAsync(java.lang.String,java.lang.String,java.lang.String,com.microsoft.rest.ServiceCallback<java.io.InputStream>)
  artifact: com.microsoft.azure:azure-batch:8.0.0
  parent: com.microsoft.azure.batch.protocol.Files
  langs:
  - java
  name: getFromComputeNodeAsync(String poolId, String nodeId, String filePath, ServiceCallback<InputStream> serviceCallback)
  nameWithType: Files.getFromComputeNodeAsync(String poolId, String nodeId, String filePath, ServiceCallback<InputStream> serviceCallback)
  fullName: com.microsoft.azure.batch.protocol.Files.getFromComputeNodeAsync(String poolId, String nodeId, String filePath, ServiceCallback<InputStream> serviceCallback)
  overload: com.microsoft.azure.batch.protocol.Files.getFromComputeNodeAsync*
  type: Method
  package: com.microsoft.azure.batch.protocol
  summary: Returns the content of the specified Compute Node file.
  syntax:
    content: public abstract ServiceFuture<InputStream> getFromComputeNodeAsync(String poolId, String nodeId, String filePath, ServiceCallback<InputStream> serviceCallback)
    parameters:
    - id: poolId
      type: java.lang.String
      description: The ID of the Pool that contains the Compute Node.
    - id: nodeId
      type: java.lang.String
      description: The ID of the Compute Node that contains the file.
    - id: filePath
      type: java.lang.String
      description: The path to the Compute Node file that you want to get the content of.
    - id: serviceCallback
      type: com.microsoft.rest.ServiceCallback<java.io.InputStream>
      description: the async ServiceCallback to handle successful and failed responses.
    return:
      type: com.microsoft.rest.ServiceFuture<java.io.InputStream>
      description: the <xref uid="com.microsoft.rest.ServiceFuture" data-throw-if-not-resolved="false">ServiceFuture</xref> object
- uid: com.microsoft.azure.batch.protocol.Files.getFromComputeNodeWithServiceResponseAsync(java.lang.String,java.lang.String,java.lang.String)
  id: getFromComputeNodeWithServiceResponseAsync(java.lang.String,java.lang.String,java.lang.String)
  artifact: com.microsoft.azure:azure-batch:8.0.0
  parent: com.microsoft.azure.batch.protocol.Files
  langs:
  - java
  name: getFromComputeNodeWithServiceResponseAsync(String poolId, String nodeId, String filePath)
  nameWithType: Files.getFromComputeNodeWithServiceResponseAsync(String poolId, String nodeId, String filePath)
  fullName: com.microsoft.azure.batch.protocol.Files.getFromComputeNodeWithServiceResponseAsync(String poolId, String nodeId, String filePath)
  overload: com.microsoft.azure.batch.protocol.Files.getFromComputeNodeWithServiceResponseAsync*
  type: Method
  package: com.microsoft.azure.batch.protocol
  summary: Returns the content of the specified Compute Node file.
  syntax:
    content: public abstract Observable<ServiceResponseWithHeaders<InputStream,FileGetFromComputeNodeHeaders>> getFromComputeNodeWithServiceResponseAsync(String poolId, String nodeId, String filePath)
    parameters:
    - id: poolId
      type: java.lang.String
      description: The ID of the Pool that contains the Compute Node.
    - id: nodeId
      type: java.lang.String
      description: The ID of the Compute Node that contains the file.
    - id: filePath
      type: java.lang.String
      description: The path to the Compute Node file that you want to get the content of.
    return:
      type: rx.Observable<com.microsoft.rest.ServiceResponseWithHeaders<java.io.InputStream,com.microsoft.azure.batch.protocol.models.FileGetFromComputeNodeHeaders>>
      description: the observable to the InputStream object
- uid: com.microsoft.azure.batch.protocol.Files.getFromComputeNodeWithServiceResponseAsync(java.lang.String,java.lang.String,java.lang.String,com.microsoft.azure.batch.protocol.models.FileGetFromComputeNodeOptions)
  id: getFromComputeNodeWithServiceResponseAsync(java.lang.String,java.lang.String,java.lang.String,com.microsoft.azure.batch.protocol.models.FileGetFromComputeNodeOptions)
  artifact: com.microsoft.azure:azure-batch:8.0.0
  parent: com.microsoft.azure.batch.protocol.Files
  langs:
  - java
  name: getFromComputeNodeWithServiceResponseAsync(String poolId, String nodeId, String filePath, FileGetFromComputeNodeOptions fileGetFromComputeNodeOptions)
  nameWithType: Files.getFromComputeNodeWithServiceResponseAsync(String poolId, String nodeId, String filePath, FileGetFromComputeNodeOptions fileGetFromComputeNodeOptions)
  fullName: com.microsoft.azure.batch.protocol.Files.getFromComputeNodeWithServiceResponseAsync(String poolId, String nodeId, String filePath, FileGetFromComputeNodeOptions fileGetFromComputeNodeOptions)
  overload: com.microsoft.azure.batch.protocol.Files.getFromComputeNodeWithServiceResponseAsync*
  type: Method
  package: com.microsoft.azure.batch.protocol
  summary: Returns the content of the specified Compute Node file.
  syntax:
    content: public abstract Observable<ServiceResponseWithHeaders<InputStream,FileGetFromComputeNodeHeaders>> getFromComputeNodeWithServiceResponseAsync(String poolId, String nodeId, String filePath, FileGetFromComputeNodeOptions fileGetFromComputeNodeOptions)
    parameters:
    - id: poolId
      type: java.lang.String
      description: The ID of the Pool that contains the Compute Node.
    - id: nodeId
      type: java.lang.String
      description: The ID of the Compute Node that contains the file.
    - id: filePath
      type: java.lang.String
      description: The path to the Compute Node file that you want to get the content of.
    - id: fileGetFromComputeNodeOptions
      type: com.microsoft.azure.batch.protocol.models.FileGetFromComputeNodeOptions
      description: Additional parameters for the operation
    return:
      type: rx.Observable<com.microsoft.rest.ServiceResponseWithHeaders<java.io.InputStream,com.microsoft.azure.batch.protocol.models.FileGetFromComputeNodeHeaders>>
      description: the observable to the InputStream object
- uid: com.microsoft.azure.batch.protocol.Files.getFromTask(java.lang.String,java.lang.String,java.lang.String)
  id: getFromTask(java.lang.String,java.lang.String,java.lang.String)
  artifact: com.microsoft.azure:azure-batch:8.0.0
  parent: com.microsoft.azure.batch.protocol.Files
  langs:
  - java
  name: getFromTask(String jobId, String taskId, String filePath)
  nameWithType: Files.getFromTask(String jobId, String taskId, String filePath)
  fullName: com.microsoft.azure.batch.protocol.Files.getFromTask(String jobId, String taskId, String filePath)
  overload: com.microsoft.azure.batch.protocol.Files.getFromTask*
  type: Method
  package: com.microsoft.azure.batch.protocol
  summary: Returns the content of the specified Task file.
  syntax:
    content: public abstract InputStream getFromTask(String jobId, String taskId, String filePath)
    parameters:
    - id: jobId
      type: java.lang.String
      description: The ID of the Job that contains the Task.
    - id: taskId
      type: java.lang.String
      description: The ID of the Task whose file you want to retrieve.
    - id: filePath
      type: java.lang.String
      description: The path to the Task file that you want to get the content of.
    return:
      type: java.io.InputStream
      description: the InputStream object if successful.
- uid: com.microsoft.azure.batch.protocol.Files.getFromTask(java.lang.String,java.lang.String,java.lang.String,com.microsoft.azure.batch.protocol.models.FileGetFromTaskOptions)
  id: getFromTask(java.lang.String,java.lang.String,java.lang.String,com.microsoft.azure.batch.protocol.models.FileGetFromTaskOptions)
  artifact: com.microsoft.azure:azure-batch:8.0.0
  parent: com.microsoft.azure.batch.protocol.Files
  langs:
  - java
  name: getFromTask(String jobId, String taskId, String filePath, FileGetFromTaskOptions fileGetFromTaskOptions)
  nameWithType: Files.getFromTask(String jobId, String taskId, String filePath, FileGetFromTaskOptions fileGetFromTaskOptions)
  fullName: com.microsoft.azure.batch.protocol.Files.getFromTask(String jobId, String taskId, String filePath, FileGetFromTaskOptions fileGetFromTaskOptions)
  overload: com.microsoft.azure.batch.protocol.Files.getFromTask*
  type: Method
  package: com.microsoft.azure.batch.protocol
  summary: Returns the content of the specified Task file.
  syntax:
    content: public abstract InputStream getFromTask(String jobId, String taskId, String filePath, FileGetFromTaskOptions fileGetFromTaskOptions)
    parameters:
    - id: jobId
      type: java.lang.String
      description: The ID of the Job that contains the Task.
    - id: taskId
      type: java.lang.String
      description: The ID of the Task whose file you want to retrieve.
    - id: filePath
      type: java.lang.String
      description: The path to the Task file that you want to get the content of.
    - id: fileGetFromTaskOptions
      type: com.microsoft.azure.batch.protocol.models.FileGetFromTaskOptions
      description: Additional parameters for the operation
    return:
      type: java.io.InputStream
      description: the InputStream object if successful.
- uid: com.microsoft.azure.batch.protocol.Files.getFromTask(java.lang.String,java.lang.String,java.lang.String,com.microsoft.azure.batch.protocol.models.FileGetFromTaskOptions,java.io.OutputStream)
  id: getFromTask(java.lang.String,java.lang.String,java.lang.String,com.microsoft.azure.batch.protocol.models.FileGetFromTaskOptions,java.io.OutputStream)
  artifact: com.microsoft.azure:azure-batch:8.0.0
  parent: com.microsoft.azure.batch.protocol.Files
  langs:
  - java
  name: getFromTask(String jobId, String taskId, String filePath, FileGetFromTaskOptions fileGetFromTaskOptions, OutputStream outputStream)
  nameWithType: Files.getFromTask(String jobId, String taskId, String filePath, FileGetFromTaskOptions fileGetFromTaskOptions, OutputStream outputStream)
  fullName: com.microsoft.azure.batch.protocol.Files.getFromTask(String jobId, String taskId, String filePath, FileGetFromTaskOptions fileGetFromTaskOptions, OutputStream outputStream)
  overload: com.microsoft.azure.batch.protocol.Files.getFromTask*
  type: Method
  package: com.microsoft.azure.batch.protocol
  summary: Returns the content of the specified task file.
  syntax:
    content: public abstract void getFromTask(String jobId, String taskId, String filePath, FileGetFromTaskOptions fileGetFromTaskOptions, OutputStream outputStream)
    parameters:
    - id: jobId
      type: java.lang.String
      description: The ID of the job that contains the task.
    - id: taskId
      type: java.lang.String
      description: The ID of the task whose file you want to retrieve.
    - id: filePath
      type: java.lang.String
      description: The path to the task file that you want to get the content of.
    - id: fileGetFromTaskOptions
      type: com.microsoft.azure.batch.protocol.models.FileGetFromTaskOptions
      description: Additional parameters for the operation
    - id: outputStream
      type: java.io.OutputStream
      description: >-
        The OutputStream object which data will be written to if
                    successful.
- uid: com.microsoft.azure.batch.protocol.Files.getFromTask(java.lang.String,java.lang.String,java.lang.String,java.io.OutputStream)
  id: getFromTask(java.lang.String,java.lang.String,java.lang.String,java.io.OutputStream)
  artifact: com.microsoft.azure:azure-batch:8.0.0
  parent: com.microsoft.azure.batch.protocol.Files
  langs:
  - java
  name: getFromTask(String jobId, String taskId, String filePath, OutputStream outputStream)
  nameWithType: Files.getFromTask(String jobId, String taskId, String filePath, OutputStream outputStream)
  fullName: com.microsoft.azure.batch.protocol.Files.getFromTask(String jobId, String taskId, String filePath, OutputStream outputStream)
  overload: com.microsoft.azure.batch.protocol.Files.getFromTask*
  type: Method
  package: com.microsoft.azure.batch.protocol
  summary: Returns the content of the specified task file.
  syntax:
    content: public abstract void getFromTask(String jobId, String taskId, String filePath, OutputStream outputStream)
    parameters:
    - id: jobId
      type: java.lang.String
      description: The ID of the job that contains the task.
    - id: taskId
      type: java.lang.String
      description: The ID of the task whose file you want to retrieve.
    - id: filePath
      type: java.lang.String
      description: The path to the task file that you want to get the content of.
    - id: outputStream
      type: java.io.OutputStream
      description: >-
        The OutputStream object which data will be written to if
                    successful.
- uid: com.microsoft.azure.batch.protocol.Files.getFromTaskAsync(java.lang.String,java.lang.String,java.lang.String)
  id: getFromTaskAsync(java.lang.String,java.lang.String,java.lang.String)
  artifact: com.microsoft.azure:azure-batch:8.0.0
  parent: com.microsoft.azure.batch.protocol.Files
  langs:
  - java
  name: getFromTaskAsync(String jobId, String taskId, String filePath)
  nameWithType: Files.getFromTaskAsync(String jobId, String taskId, String filePath)
  fullName: com.microsoft.azure.batch.protocol.Files.getFromTaskAsync(String jobId, String taskId, String filePath)
  overload: com.microsoft.azure.batch.protocol.Files.getFromTaskAsync*
  type: Method
  package: com.microsoft.azure.batch.protocol
  summary: Returns the content of the specified Task file.
  syntax:
    content: public abstract Observable<InputStream> getFromTaskAsync(String jobId, String taskId, String filePath)
    parameters:
    - id: jobId
      type: java.lang.String
      description: The ID of the Job that contains the Task.
    - id: taskId
      type: java.lang.String
      description: The ID of the Task whose file you want to retrieve.
    - id: filePath
      type: java.lang.String
      description: The path to the Task file that you want to get the content of.
    return:
      type: rx.Observable<java.io.InputStream>
      description: the observable to the InputStream object
- uid: com.microsoft.azure.batch.protocol.Files.getFromTaskAsync(java.lang.String,java.lang.String,java.lang.String,com.microsoft.azure.batch.protocol.models.FileGetFromTaskOptions)
  id: getFromTaskAsync(java.lang.String,java.lang.String,java.lang.String,com.microsoft.azure.batch.protocol.models.FileGetFromTaskOptions)
  artifact: com.microsoft.azure:azure-batch:8.0.0
  parent: com.microsoft.azure.batch.protocol.Files
  langs:
  - java
  name: getFromTaskAsync(String jobId, String taskId, String filePath, FileGetFromTaskOptions fileGetFromTaskOptions)
  nameWithType: Files.getFromTaskAsync(String jobId, String taskId, String filePath, FileGetFromTaskOptions fileGetFromTaskOptions)
  fullName: com.microsoft.azure.batch.protocol.Files.getFromTaskAsync(String jobId, String taskId, String filePath, FileGetFromTaskOptions fileGetFromTaskOptions)
  overload: com.microsoft.azure.batch.protocol.Files.getFromTaskAsync*
  type: Method
  package: com.microsoft.azure.batch.protocol
  summary: Returns the content of the specified Task file.
  syntax:
    content: public abstract Observable<InputStream> getFromTaskAsync(String jobId, String taskId, String filePath, FileGetFromTaskOptions fileGetFromTaskOptions)
    parameters:
    - id: jobId
      type: java.lang.String
      description: The ID of the Job that contains the Task.
    - id: taskId
      type: java.lang.String
      description: The ID of the Task whose file you want to retrieve.
    - id: filePath
      type: java.lang.String
      description: The path to the Task file that you want to get the content of.
    - id: fileGetFromTaskOptions
      type: com.microsoft.azure.batch.protocol.models.FileGetFromTaskOptions
      description: Additional parameters for the operation
    return:
      type: rx.Observable<java.io.InputStream>
      description: the observable to the InputStream object
- uid: com.microsoft.azure.batch.protocol.Files.getFromTaskAsync(java.lang.String,java.lang.String,java.lang.String,com.microsoft.azure.batch.protocol.models.FileGetFromTaskOptions,com.microsoft.rest.ServiceCallback<java.io.InputStream>)
  id: getFromTaskAsync(java.lang.String,java.lang.String,java.lang.String,com.microsoft.azure.batch.protocol.models.FileGetFromTaskOptions,com.microsoft.rest.ServiceCallback<java.io.InputStream>)
  artifact: com.microsoft.azure:azure-batch:8.0.0
  parent: com.microsoft.azure.batch.protocol.Files
  langs:
  - java
  name: getFromTaskAsync(String jobId, String taskId, String filePath, FileGetFromTaskOptions fileGetFromTaskOptions, ServiceCallback<InputStream> serviceCallback)
  nameWithType: Files.getFromTaskAsync(String jobId, String taskId, String filePath, FileGetFromTaskOptions fileGetFromTaskOptions, ServiceCallback<InputStream> serviceCallback)
  fullName: com.microsoft.azure.batch.protocol.Files.getFromTaskAsync(String jobId, String taskId, String filePath, FileGetFromTaskOptions fileGetFromTaskOptions, ServiceCallback<InputStream> serviceCallback)
  overload: com.microsoft.azure.batch.protocol.Files.getFromTaskAsync*
  type: Method
  package: com.microsoft.azure.batch.protocol
  summary: Returns the content of the specified Task file.
  syntax:
    content: public abstract ServiceFuture<InputStream> getFromTaskAsync(String jobId, String taskId, String filePath, FileGetFromTaskOptions fileGetFromTaskOptions, ServiceCallback<InputStream> serviceCallback)
    parameters:
    - id: jobId
      type: java.lang.String
      description: The ID of the Job that contains the Task.
    - id: taskId
      type: java.lang.String
      description: The ID of the Task whose file you want to retrieve.
    - id: filePath
      type: java.lang.String
      description: The path to the Task file that you want to get the content of.
    - id: fileGetFromTaskOptions
      type: com.microsoft.azure.batch.protocol.models.FileGetFromTaskOptions
      description: Additional parameters for the operation
    - id: serviceCallback
      type: com.microsoft.rest.ServiceCallback<java.io.InputStream>
      description: the async ServiceCallback to handle successful and failed responses.
    return:
      type: com.microsoft.rest.ServiceFuture<java.io.InputStream>
      description: the <xref uid="com.microsoft.rest.ServiceFuture" data-throw-if-not-resolved="false">ServiceFuture</xref> object
- uid: com.microsoft.azure.batch.protocol.Files.getFromTaskAsync(java.lang.String,java.lang.String,java.lang.String,com.microsoft.rest.ServiceCallback<java.io.InputStream>)
  id: getFromTaskAsync(java.lang.String,java.lang.String,java.lang.String,com.microsoft.rest.ServiceCallback<java.io.InputStream>)
  artifact: com.microsoft.azure:azure-batch:8.0.0
  parent: com.microsoft.azure.batch.protocol.Files
  langs:
  - java
  name: getFromTaskAsync(String jobId, String taskId, String filePath, ServiceCallback<InputStream> serviceCallback)
  nameWithType: Files.getFromTaskAsync(String jobId, String taskId, String filePath, ServiceCallback<InputStream> serviceCallback)
  fullName: com.microsoft.azure.batch.protocol.Files.getFromTaskAsync(String jobId, String taskId, String filePath, ServiceCallback<InputStream> serviceCallback)
  overload: com.microsoft.azure.batch.protocol.Files.getFromTaskAsync*
  type: Method
  package: com.microsoft.azure.batch.protocol
  summary: Returns the content of the specified Task file.
  syntax:
    content: public abstract ServiceFuture<InputStream> getFromTaskAsync(String jobId, String taskId, String filePath, ServiceCallback<InputStream> serviceCallback)
    parameters:
    - id: jobId
      type: java.lang.String
      description: The ID of the Job that contains the Task.
    - id: taskId
      type: java.lang.String
      description: The ID of the Task whose file you want to retrieve.
    - id: filePath
      type: java.lang.String
      description: The path to the Task file that you want to get the content of.
    - id: serviceCallback
      type: com.microsoft.rest.ServiceCallback<java.io.InputStream>
      description: the async ServiceCallback to handle successful and failed responses.
    return:
      type: com.microsoft.rest.ServiceFuture<java.io.InputStream>
      description: the <xref uid="com.microsoft.rest.ServiceFuture" data-throw-if-not-resolved="false">ServiceFuture</xref> object
- uid: com.microsoft.azure.batch.protocol.Files.getFromTaskWithServiceResponseAsync(java.lang.String,java.lang.String,java.lang.String)
  id: getFromTaskWithServiceResponseAsync(java.lang.String,java.lang.String,java.lang.String)
  artifact: com.microsoft.azure:azure-batch:8.0.0
  parent: com.microsoft.azure.batch.protocol.Files
  langs:
  - java
  name: getFromTaskWithServiceResponseAsync(String jobId, String taskId, String filePath)
  nameWithType: Files.getFromTaskWithServiceResponseAsync(String jobId, String taskId, String filePath)
  fullName: com.microsoft.azure.batch.protocol.Files.getFromTaskWithServiceResponseAsync(String jobId, String taskId, String filePath)
  overload: com.microsoft.azure.batch.protocol.Files.getFromTaskWithServiceResponseAsync*
  type: Method
  package: com.microsoft.azure.batch.protocol
  summary: Returns the content of the specified Task file.
  syntax:
    content: public abstract Observable<ServiceResponseWithHeaders<InputStream,FileGetFromTaskHeaders>> getFromTaskWithServiceResponseAsync(String jobId, String taskId, String filePath)
    parameters:
    - id: jobId
      type: java.lang.String
      description: The ID of the Job that contains the Task.
    - id: taskId
      type: java.lang.String
      description: The ID of the Task whose file you want to retrieve.
    - id: filePath
      type: java.lang.String
      description: The path to the Task file that you want to get the content of.
    return:
      type: rx.Observable<com.microsoft.rest.ServiceResponseWithHeaders<java.io.InputStream,com.microsoft.azure.batch.protocol.models.FileGetFromTaskHeaders>>
      description: the observable to the InputStream object
- uid: com.microsoft.azure.batch.protocol.Files.getFromTaskWithServiceResponseAsync(java.lang.String,java.lang.String,java.lang.String,com.microsoft.azure.batch.protocol.models.FileGetFromTaskOptions)
  id: getFromTaskWithServiceResponseAsync(java.lang.String,java.lang.String,java.lang.String,com.microsoft.azure.batch.protocol.models.FileGetFromTaskOptions)
  artifact: com.microsoft.azure:azure-batch:8.0.0
  parent: com.microsoft.azure.batch.protocol.Files
  langs:
  - java
  name: getFromTaskWithServiceResponseAsync(String jobId, String taskId, String filePath, FileGetFromTaskOptions fileGetFromTaskOptions)
  nameWithType: Files.getFromTaskWithServiceResponseAsync(String jobId, String taskId, String filePath, FileGetFromTaskOptions fileGetFromTaskOptions)
  fullName: com.microsoft.azure.batch.protocol.Files.getFromTaskWithServiceResponseAsync(String jobId, String taskId, String filePath, FileGetFromTaskOptions fileGetFromTaskOptions)
  overload: com.microsoft.azure.batch.protocol.Files.getFromTaskWithServiceResponseAsync*
  type: Method
  package: com.microsoft.azure.batch.protocol
  summary: Returns the content of the specified Task file.
  syntax:
    content: public abstract Observable<ServiceResponseWithHeaders<InputStream,FileGetFromTaskHeaders>> getFromTaskWithServiceResponseAsync(String jobId, String taskId, String filePath, FileGetFromTaskOptions fileGetFromTaskOptions)
    parameters:
    - id: jobId
      type: java.lang.String
      description: The ID of the Job that contains the Task.
    - id: taskId
      type: java.lang.String
      description: The ID of the Task whose file you want to retrieve.
    - id: filePath
      type: java.lang.String
      description: The path to the Task file that you want to get the content of.
    - id: fileGetFromTaskOptions
      type: com.microsoft.azure.batch.protocol.models.FileGetFromTaskOptions
      description: Additional parameters for the operation
    return:
      type: rx.Observable<com.microsoft.rest.ServiceResponseWithHeaders<java.io.InputStream,com.microsoft.azure.batch.protocol.models.FileGetFromTaskHeaders>>
      description: the observable to the InputStream object
- uid: com.microsoft.azure.batch.protocol.Files.getPropertiesFromComputeNode(java.lang.String,java.lang.String,java.lang.String)
  id: getPropertiesFromComputeNode(java.lang.String,java.lang.String,java.lang.String)
  artifact: com.microsoft.azure:azure-batch:8.0.0
  parent: com.microsoft.azure.batch.protocol.Files
  langs:
  - java
  name: getPropertiesFromComputeNode(String poolId, String nodeId, String filePath)
  nameWithType: Files.getPropertiesFromComputeNode(String poolId, String nodeId, String filePath)
  fullName: com.microsoft.azure.batch.protocol.Files.getPropertiesFromComputeNode(String poolId, String nodeId, String filePath)
  overload: com.microsoft.azure.batch.protocol.Files.getPropertiesFromComputeNode*
  type: Method
  package: com.microsoft.azure.batch.protocol
  summary: Gets the properties of the specified Compute Node file.
  syntax:
    content: public abstract void getPropertiesFromComputeNode(String poolId, String nodeId, String filePath)
    parameters:
    - id: poolId
      type: java.lang.String
      description: The ID of the Pool that contains the Compute Node.
    - id: nodeId
      type: java.lang.String
      description: The ID of the Compute Node that contains the file.
    - id: filePath
      type: java.lang.String
      description: The path to the Compute Node file that you want to get the properties of.
- uid: com.microsoft.azure.batch.protocol.Files.getPropertiesFromComputeNode(java.lang.String,java.lang.String,java.lang.String,com.microsoft.azure.batch.protocol.models.FileGetPropertiesFromComputeNodeOptions)
  id: getPropertiesFromComputeNode(java.lang.String,java.lang.String,java.lang.String,com.microsoft.azure.batch.protocol.models.FileGetPropertiesFromComputeNodeOptions)
  artifact: com.microsoft.azure:azure-batch:8.0.0
  parent: com.microsoft.azure.batch.protocol.Files
  langs:
  - java
  name: getPropertiesFromComputeNode(String poolId, String nodeId, String filePath, FileGetPropertiesFromComputeNodeOptions fileGetPropertiesFromComputeNodeOptions)
  nameWithType: Files.getPropertiesFromComputeNode(String poolId, String nodeId, String filePath, FileGetPropertiesFromComputeNodeOptions fileGetPropertiesFromComputeNodeOptions)
  fullName: com.microsoft.azure.batch.protocol.Files.getPropertiesFromComputeNode(String poolId, String nodeId, String filePath, FileGetPropertiesFromComputeNodeOptions fileGetPropertiesFromComputeNodeOptions)
  overload: com.microsoft.azure.batch.protocol.Files.getPropertiesFromComputeNode*
  type: Method
  package: com.microsoft.azure.batch.protocol
  summary: Gets the properties of the specified Compute Node file.
  syntax:
    content: public abstract void getPropertiesFromComputeNode(String poolId, String nodeId, String filePath, FileGetPropertiesFromComputeNodeOptions fileGetPropertiesFromComputeNodeOptions)
    parameters:
    - id: poolId
      type: java.lang.String
      description: The ID of the Pool that contains the Compute Node.
    - id: nodeId
      type: java.lang.String
      description: The ID of the Compute Node that contains the file.
    - id: filePath
      type: java.lang.String
      description: The path to the Compute Node file that you want to get the properties of.
    - id: fileGetPropertiesFromComputeNodeOptions
      type: com.microsoft.azure.batch.protocol.models.FileGetPropertiesFromComputeNodeOptions
      description: Additional parameters for the operation
- uid: com.microsoft.azure.batch.protocol.Files.getPropertiesFromComputeNodeAsync(java.lang.String,java.lang.String,java.lang.String)
  id: getPropertiesFromComputeNodeAsync(java.lang.String,java.lang.String,java.lang.String)
  artifact: com.microsoft.azure:azure-batch:8.0.0
  parent: com.microsoft.azure.batch.protocol.Files
  langs:
  - java
  name: getPropertiesFromComputeNodeAsync(String poolId, String nodeId, String filePath)
  nameWithType: Files.getPropertiesFromComputeNodeAsync(String poolId, String nodeId, String filePath)
  fullName: com.microsoft.azure.batch.protocol.Files.getPropertiesFromComputeNodeAsync(String poolId, String nodeId, String filePath)
  overload: com.microsoft.azure.batch.protocol.Files.getPropertiesFromComputeNodeAsync*
  type: Method
  package: com.microsoft.azure.batch.protocol
  summary: Gets the properties of the specified Compute Node file.
  syntax:
    content: public abstract Observable<Void> getPropertiesFromComputeNodeAsync(String poolId, String nodeId, String filePath)
    parameters:
    - id: poolId
      type: java.lang.String
      description: The ID of the Pool that contains the Compute Node.
    - id: nodeId
      type: java.lang.String
      description: The ID of the Compute Node that contains the file.
    - id: filePath
      type: java.lang.String
      description: The path to the Compute Node file that you want to get the properties of.
    return:
      type: rx.Observable<java.lang.Void>
      description: the <xref uid="com.microsoft.rest.ServiceResponseWithHeaders" data-throw-if-not-resolved="false">ServiceResponseWithHeaders</xref> object if successful.
- uid: com.microsoft.azure.batch.protocol.Files.getPropertiesFromComputeNodeAsync(java.lang.String,java.lang.String,java.lang.String,com.microsoft.azure.batch.protocol.models.FileGetPropertiesFromComputeNodeOptions)
  id: getPropertiesFromComputeNodeAsync(java.lang.String,java.lang.String,java.lang.String,com.microsoft.azure.batch.protocol.models.FileGetPropertiesFromComputeNodeOptions)
  artifact: com.microsoft.azure:azure-batch:8.0.0
  parent: com.microsoft.azure.batch.protocol.Files
  langs:
  - java
  name: getPropertiesFromComputeNodeAsync(String poolId, String nodeId, String filePath, FileGetPropertiesFromComputeNodeOptions fileGetPropertiesFromComputeNodeOptions)
  nameWithType: Files.getPropertiesFromComputeNodeAsync(String poolId, String nodeId, String filePath, FileGetPropertiesFromComputeNodeOptions fileGetPropertiesFromComputeNodeOptions)
  fullName: com.microsoft.azure.batch.protocol.Files.getPropertiesFromComputeNodeAsync(String poolId, String nodeId, String filePath, FileGetPropertiesFromComputeNodeOptions fileGetPropertiesFromComputeNodeOptions)
  overload: com.microsoft.azure.batch.protocol.Files.getPropertiesFromComputeNodeAsync*
  type: Method
  package: com.microsoft.azure.batch.protocol
  summary: Gets the properties of the specified Compute Node file.
  syntax:
    content: public abstract Observable<Void> getPropertiesFromComputeNodeAsync(String poolId, String nodeId, String filePath, FileGetPropertiesFromComputeNodeOptions fileGetPropertiesFromComputeNodeOptions)
    parameters:
    - id: poolId
      type: java.lang.String
      description: The ID of the Pool that contains the Compute Node.
    - id: nodeId
      type: java.lang.String
      description: The ID of the Compute Node that contains the file.
    - id: filePath
      type: java.lang.String
      description: The path to the Compute Node file that you want to get the properties of.
    - id: fileGetPropertiesFromComputeNodeOptions
      type: com.microsoft.azure.batch.protocol.models.FileGetPropertiesFromComputeNodeOptions
      description: Additional parameters for the operation
    return:
      type: rx.Observable<java.lang.Void>
      description: the <xref uid="com.microsoft.rest.ServiceResponseWithHeaders" data-throw-if-not-resolved="false">ServiceResponseWithHeaders</xref> object if successful.
- uid: com.microsoft.azure.batch.protocol.Files.getPropertiesFromComputeNodeAsync(java.lang.String,java.lang.String,java.lang.String,com.microsoft.azure.batch.protocol.models.FileGetPropertiesFromComputeNodeOptions,com.microsoft.rest.ServiceCallback<java.lang.Void>)
  id: getPropertiesFromComputeNodeAsync(java.lang.String,java.lang.String,java.lang.String,com.microsoft.azure.batch.protocol.models.FileGetPropertiesFromComputeNodeOptions,com.microsoft.rest.ServiceCallback<java.lang.Void>)
  artifact: com.microsoft.azure:azure-batch:8.0.0
  parent: com.microsoft.azure.batch.protocol.Files
  langs:
  - java
  name: getPropertiesFromComputeNodeAsync(String poolId, String nodeId, String filePath, FileGetPropertiesFromComputeNodeOptions fileGetPropertiesFromComputeNodeOptions, ServiceCallback<Void> serviceCallback)
  nameWithType: Files.getPropertiesFromComputeNodeAsync(String poolId, String nodeId, String filePath, FileGetPropertiesFromComputeNodeOptions fileGetPropertiesFromComputeNodeOptions, ServiceCallback<Void> serviceCallback)
  fullName: com.microsoft.azure.batch.protocol.Files.getPropertiesFromComputeNodeAsync(String poolId, String nodeId, String filePath, FileGetPropertiesFromComputeNodeOptions fileGetPropertiesFromComputeNodeOptions, ServiceCallback<Void> serviceCallback)
  overload: com.microsoft.azure.batch.protocol.Files.getPropertiesFromComputeNodeAsync*
  type: Method
  package: com.microsoft.azure.batch.protocol
  summary: Gets the properties of the specified Compute Node file.
  syntax:
    content: public abstract ServiceFuture<Void> getPropertiesFromComputeNodeAsync(String poolId, String nodeId, String filePath, FileGetPropertiesFromComputeNodeOptions fileGetPropertiesFromComputeNodeOptions, ServiceCallback<Void> serviceCallback)
    parameters:
    - id: poolId
      type: java.lang.String
      description: The ID of the Pool that contains the Compute Node.
    - id: nodeId
      type: java.lang.String
      description: The ID of the Compute Node that contains the file.
    - id: filePath
      type: java.lang.String
      description: The path to the Compute Node file that you want to get the properties of.
    - id: fileGetPropertiesFromComputeNodeOptions
      type: com.microsoft.azure.batch.protocol.models.FileGetPropertiesFromComputeNodeOptions
      description: Additional parameters for the operation
    - id: serviceCallback
      type: com.microsoft.rest.ServiceCallback<java.lang.Void>
      description: the async ServiceCallback to handle successful and failed responses.
    return:
      type: com.microsoft.rest.ServiceFuture<java.lang.Void>
      description: the <xref uid="com.microsoft.rest.ServiceFuture" data-throw-if-not-resolved="false">ServiceFuture</xref> object
- uid: com.microsoft.azure.batch.protocol.Files.getPropertiesFromComputeNodeAsync(java.lang.String,java.lang.String,java.lang.String,com.microsoft.rest.ServiceCallback<java.lang.Void>)
  id: getPropertiesFromComputeNodeAsync(java.lang.String,java.lang.String,java.lang.String,com.microsoft.rest.ServiceCallback<java.lang.Void>)
  artifact: com.microsoft.azure:azure-batch:8.0.0
  parent: com.microsoft.azure.batch.protocol.Files
  langs:
  - java
  name: getPropertiesFromComputeNodeAsync(String poolId, String nodeId, String filePath, ServiceCallback<Void> serviceCallback)
  nameWithType: Files.getPropertiesFromComputeNodeAsync(String poolId, String nodeId, String filePath, ServiceCallback<Void> serviceCallback)
  fullName: com.microsoft.azure.batch.protocol.Files.getPropertiesFromComputeNodeAsync(String poolId, String nodeId, String filePath, ServiceCallback<Void> serviceCallback)
  overload: com.microsoft.azure.batch.protocol.Files.getPropertiesFromComputeNodeAsync*
  type: Method
  package: com.microsoft.azure.batch.protocol
  summary: Gets the properties of the specified Compute Node file.
  syntax:
    content: public abstract ServiceFuture<Void> getPropertiesFromComputeNodeAsync(String poolId, String nodeId, String filePath, ServiceCallback<Void> serviceCallback)
    parameters:
    - id: poolId
      type: java.lang.String
      description: The ID of the Pool that contains the Compute Node.
    - id: nodeId
      type: java.lang.String
      description: The ID of the Compute Node that contains the file.
    - id: filePath
      type: java.lang.String
      description: The path to the Compute Node file that you want to get the properties of.
    - id: serviceCallback
      type: com.microsoft.rest.ServiceCallback<java.lang.Void>
      description: the async ServiceCallback to handle successful and failed responses.
    return:
      type: com.microsoft.rest.ServiceFuture<java.lang.Void>
      description: the <xref uid="com.microsoft.rest.ServiceFuture" data-throw-if-not-resolved="false">ServiceFuture</xref> object
- uid: com.microsoft.azure.batch.protocol.Files.getPropertiesFromComputeNodeWithServiceResponseAsync(java.lang.String,java.lang.String,java.lang.String)
  id: getPropertiesFromComputeNodeWithServiceResponseAsync(java.lang.String,java.lang.String,java.lang.String)
  artifact: com.microsoft.azure:azure-batch:8.0.0
  parent: com.microsoft.azure.batch.protocol.Files
  langs:
  - java
  name: getPropertiesFromComputeNodeWithServiceResponseAsync(String poolId, String nodeId, String filePath)
  nameWithType: Files.getPropertiesFromComputeNodeWithServiceResponseAsync(String poolId, String nodeId, String filePath)
  fullName: com.microsoft.azure.batch.protocol.Files.getPropertiesFromComputeNodeWithServiceResponseAsync(String poolId, String nodeId, String filePath)
  overload: com.microsoft.azure.batch.protocol.Files.getPropertiesFromComputeNodeWithServiceResponseAsync*
  type: Method
  package: com.microsoft.azure.batch.protocol
  summary: Gets the properties of the specified Compute Node file.
  syntax:
    content: public abstract Observable<ServiceResponseWithHeaders<Void,FileGetPropertiesFromComputeNodeHeaders>> getPropertiesFromComputeNodeWithServiceResponseAsync(String poolId, String nodeId, String filePath)
    parameters:
    - id: poolId
      type: java.lang.String
      description: The ID of the Pool that contains the Compute Node.
    - id: nodeId
      type: java.lang.String
      description: The ID of the Compute Node that contains the file.
    - id: filePath
      type: java.lang.String
      description: The path to the Compute Node file that you want to get the properties of.
    return:
      type: rx.Observable<com.microsoft.rest.ServiceResponseWithHeaders<java.lang.Void,com.microsoft.azure.batch.protocol.models.FileGetPropertiesFromComputeNodeHeaders>>
      description: the <xref uid="com.microsoft.rest.ServiceResponseWithHeaders" data-throw-if-not-resolved="false">ServiceResponseWithHeaders</xref> object if successful.
- uid: com.microsoft.azure.batch.protocol.Files.getPropertiesFromComputeNodeWithServiceResponseAsync(java.lang.String,java.lang.String,java.lang.String,com.microsoft.azure.batch.protocol.models.FileGetPropertiesFromComputeNodeOptions)
  id: getPropertiesFromComputeNodeWithServiceResponseAsync(java.lang.String,java.lang.String,java.lang.String,com.microsoft.azure.batch.protocol.models.FileGetPropertiesFromComputeNodeOptions)
  artifact: com.microsoft.azure:azure-batch:8.0.0
  parent: com.microsoft.azure.batch.protocol.Files
  langs:
  - java
  name: getPropertiesFromComputeNodeWithServiceResponseAsync(String poolId, String nodeId, String filePath, FileGetPropertiesFromComputeNodeOptions fileGetPropertiesFromComputeNodeOptions)
  nameWithType: Files.getPropertiesFromComputeNodeWithServiceResponseAsync(String poolId, String nodeId, String filePath, FileGetPropertiesFromComputeNodeOptions fileGetPropertiesFromComputeNodeOptions)
  fullName: com.microsoft.azure.batch.protocol.Files.getPropertiesFromComputeNodeWithServiceResponseAsync(String poolId, String nodeId, String filePath, FileGetPropertiesFromComputeNodeOptions fileGetPropertiesFromComputeNodeOptions)
  overload: com.microsoft.azure.batch.protocol.Files.getPropertiesFromComputeNodeWithServiceResponseAsync*
  type: Method
  package: com.microsoft.azure.batch.protocol
  summary: Gets the properties of the specified Compute Node file.
  syntax:
    content: public abstract Observable<ServiceResponseWithHeaders<Void,FileGetPropertiesFromComputeNodeHeaders>> getPropertiesFromComputeNodeWithServiceResponseAsync(String poolId, String nodeId, String filePath, FileGetPropertiesFromComputeNodeOptions fileGetPropertiesFromComputeNodeOptions)
    parameters:
    - id: poolId
      type: java.lang.String
      description: The ID of the Pool that contains the Compute Node.
    - id: nodeId
      type: java.lang.String
      description: The ID of the Compute Node that contains the file.
    - id: filePath
      type: java.lang.String
      description: The path to the Compute Node file that you want to get the properties of.
    - id: fileGetPropertiesFromComputeNodeOptions
      type: com.microsoft.azure.batch.protocol.models.FileGetPropertiesFromComputeNodeOptions
      description: Additional parameters for the operation
    return:
      type: rx.Observable<com.microsoft.rest.ServiceResponseWithHeaders<java.lang.Void,com.microsoft.azure.batch.protocol.models.FileGetPropertiesFromComputeNodeHeaders>>
      description: the <xref uid="com.microsoft.rest.ServiceResponseWithHeaders" data-throw-if-not-resolved="false">ServiceResponseWithHeaders</xref> object if successful.
- uid: com.microsoft.azure.batch.protocol.Files.getPropertiesFromTask(java.lang.String,java.lang.String,java.lang.String)
  id: getPropertiesFromTask(java.lang.String,java.lang.String,java.lang.String)
  artifact: com.microsoft.azure:azure-batch:8.0.0
  parent: com.microsoft.azure.batch.protocol.Files
  langs:
  - java
  name: getPropertiesFromTask(String jobId, String taskId, String filePath)
  nameWithType: Files.getPropertiesFromTask(String jobId, String taskId, String filePath)
  fullName: com.microsoft.azure.batch.protocol.Files.getPropertiesFromTask(String jobId, String taskId, String filePath)
  overload: com.microsoft.azure.batch.protocol.Files.getPropertiesFromTask*
  type: Method
  package: com.microsoft.azure.batch.protocol
  summary: Gets the properties of the specified Task file.
  syntax:
    content: public abstract void getPropertiesFromTask(String jobId, String taskId, String filePath)
    parameters:
    - id: jobId
      type: java.lang.String
      description: The ID of the Job that contains the Task.
    - id: taskId
      type: java.lang.String
      description: The ID of the Task whose file you want to get the properties of.
    - id: filePath
      type: java.lang.String
      description: The path to the Task file that you want to get the properties of.
- uid: com.microsoft.azure.batch.protocol.Files.getPropertiesFromTask(java.lang.String,java.lang.String,java.lang.String,com.microsoft.azure.batch.protocol.models.FileGetPropertiesFromTaskOptions)
  id: getPropertiesFromTask(java.lang.String,java.lang.String,java.lang.String,com.microsoft.azure.batch.protocol.models.FileGetPropertiesFromTaskOptions)
  artifact: com.microsoft.azure:azure-batch:8.0.0
  parent: com.microsoft.azure.batch.protocol.Files
  langs:
  - java
  name: getPropertiesFromTask(String jobId, String taskId, String filePath, FileGetPropertiesFromTaskOptions fileGetPropertiesFromTaskOptions)
  nameWithType: Files.getPropertiesFromTask(String jobId, String taskId, String filePath, FileGetPropertiesFromTaskOptions fileGetPropertiesFromTaskOptions)
  fullName: com.microsoft.azure.batch.protocol.Files.getPropertiesFromTask(String jobId, String taskId, String filePath, FileGetPropertiesFromTaskOptions fileGetPropertiesFromTaskOptions)
  overload: com.microsoft.azure.batch.protocol.Files.getPropertiesFromTask*
  type: Method
  package: com.microsoft.azure.batch.protocol
  summary: Gets the properties of the specified Task file.
  syntax:
    content: public abstract void getPropertiesFromTask(String jobId, String taskId, String filePath, FileGetPropertiesFromTaskOptions fileGetPropertiesFromTaskOptions)
    parameters:
    - id: jobId
      type: java.lang.String
      description: The ID of the Job that contains the Task.
    - id: taskId
      type: java.lang.String
      description: The ID of the Task whose file you want to get the properties of.
    - id: filePath
      type: java.lang.String
      description: The path to the Task file that you want to get the properties of.
    - id: fileGetPropertiesFromTaskOptions
      type: com.microsoft.azure.batch.protocol.models.FileGetPropertiesFromTaskOptions
      description: Additional parameters for the operation
- uid: com.microsoft.azure.batch.protocol.Files.getPropertiesFromTaskAsync(java.lang.String,java.lang.String,java.lang.String)
  id: getPropertiesFromTaskAsync(java.lang.String,java.lang.String,java.lang.String)
  artifact: com.microsoft.azure:azure-batch:8.0.0
  parent: com.microsoft.azure.batch.protocol.Files
  langs:
  - java
  name: getPropertiesFromTaskAsync(String jobId, String taskId, String filePath)
  nameWithType: Files.getPropertiesFromTaskAsync(String jobId, String taskId, String filePath)
  fullName: com.microsoft.azure.batch.protocol.Files.getPropertiesFromTaskAsync(String jobId, String taskId, String filePath)
  overload: com.microsoft.azure.batch.protocol.Files.getPropertiesFromTaskAsync*
  type: Method
  package: com.microsoft.azure.batch.protocol
  summary: Gets the properties of the specified Task file.
  syntax:
    content: public abstract Observable<Void> getPropertiesFromTaskAsync(String jobId, String taskId, String filePath)
    parameters:
    - id: jobId
      type: java.lang.String
      description: The ID of the Job that contains the Task.
    - id: taskId
      type: java.lang.String
      description: The ID of the Task whose file you want to get the properties of.
    - id: filePath
      type: java.lang.String
      description: The path to the Task file that you want to get the properties of.
    return:
      type: rx.Observable<java.lang.Void>
      description: the <xref uid="com.microsoft.rest.ServiceResponseWithHeaders" data-throw-if-not-resolved="false">ServiceResponseWithHeaders</xref> object if successful.
- uid: com.microsoft.azure.batch.protocol.Files.getPropertiesFromTaskAsync(java.lang.String,java.lang.String,java.lang.String,com.microsoft.azure.batch.protocol.models.FileGetPropertiesFromTaskOptions)
  id: getPropertiesFromTaskAsync(java.lang.String,java.lang.String,java.lang.String,com.microsoft.azure.batch.protocol.models.FileGetPropertiesFromTaskOptions)
  artifact: com.microsoft.azure:azure-batch:8.0.0
  parent: com.microsoft.azure.batch.protocol.Files
  langs:
  - java
  name: getPropertiesFromTaskAsync(String jobId, String taskId, String filePath, FileGetPropertiesFromTaskOptions fileGetPropertiesFromTaskOptions)
  nameWithType: Files.getPropertiesFromTaskAsync(String jobId, String taskId, String filePath, FileGetPropertiesFromTaskOptions fileGetPropertiesFromTaskOptions)
  fullName: com.microsoft.azure.batch.protocol.Files.getPropertiesFromTaskAsync(String jobId, String taskId, String filePath, FileGetPropertiesFromTaskOptions fileGetPropertiesFromTaskOptions)
  overload: com.microsoft.azure.batch.protocol.Files.getPropertiesFromTaskAsync*
  type: Method
  package: com.microsoft.azure.batch.protocol
  summary: Gets the properties of the specified Task file.
  syntax:
    content: public abstract Observable<Void> getPropertiesFromTaskAsync(String jobId, String taskId, String filePath, FileGetPropertiesFromTaskOptions fileGetPropertiesFromTaskOptions)
    parameters:
    - id: jobId
      type: java.lang.String
      description: The ID of the Job that contains the Task.
    - id: taskId
      type: java.lang.String
      description: The ID of the Task whose file you want to get the properties of.
    - id: filePath
      type: java.lang.String
      description: The path to the Task file that you want to get the properties of.
    - id: fileGetPropertiesFromTaskOptions
      type: com.microsoft.azure.batch.protocol.models.FileGetPropertiesFromTaskOptions
      description: Additional parameters for the operation
    return:
      type: rx.Observable<java.lang.Void>
      description: the <xref uid="com.microsoft.rest.ServiceResponseWithHeaders" data-throw-if-not-resolved="false">ServiceResponseWithHeaders</xref> object if successful.
- uid: com.microsoft.azure.batch.protocol.Files.getPropertiesFromTaskAsync(java.lang.String,java.lang.String,java.lang.String,com.microsoft.azure.batch.protocol.models.FileGetPropertiesFromTaskOptions,com.microsoft.rest.ServiceCallback<java.lang.Void>)
  id: getPropertiesFromTaskAsync(java.lang.String,java.lang.String,java.lang.String,com.microsoft.azure.batch.protocol.models.FileGetPropertiesFromTaskOptions,com.microsoft.rest.ServiceCallback<java.lang.Void>)
  artifact: com.microsoft.azure:azure-batch:8.0.0
  parent: com.microsoft.azure.batch.protocol.Files
  langs:
  - java
  name: getPropertiesFromTaskAsync(String jobId, String taskId, String filePath, FileGetPropertiesFromTaskOptions fileGetPropertiesFromTaskOptions, ServiceCallback<Void> serviceCallback)
  nameWithType: Files.getPropertiesFromTaskAsync(String jobId, String taskId, String filePath, FileGetPropertiesFromTaskOptions fileGetPropertiesFromTaskOptions, ServiceCallback<Void> serviceCallback)
  fullName: com.microsoft.azure.batch.protocol.Files.getPropertiesFromTaskAsync(String jobId, String taskId, String filePath, FileGetPropertiesFromTaskOptions fileGetPropertiesFromTaskOptions, ServiceCallback<Void> serviceCallback)
  overload: com.microsoft.azure.batch.protocol.Files.getPropertiesFromTaskAsync*
  type: Method
  package: com.microsoft.azure.batch.protocol
  summary: Gets the properties of the specified Task file.
  syntax:
    content: public abstract ServiceFuture<Void> getPropertiesFromTaskAsync(String jobId, String taskId, String filePath, FileGetPropertiesFromTaskOptions fileGetPropertiesFromTaskOptions, ServiceCallback<Void> serviceCallback)
    parameters:
    - id: jobId
      type: java.lang.String
      description: The ID of the Job that contains the Task.
    - id: taskId
      type: java.lang.String
      description: The ID of the Task whose file you want to get the properties of.
    - id: filePath
      type: java.lang.String
      description: The path to the Task file that you want to get the properties of.
    - id: fileGetPropertiesFromTaskOptions
      type: com.microsoft.azure.batch.protocol.models.FileGetPropertiesFromTaskOptions
      description: Additional parameters for the operation
    - id: serviceCallback
      type: com.microsoft.rest.ServiceCallback<java.lang.Void>
      description: the async ServiceCallback to handle successful and failed responses.
    return:
      type: com.microsoft.rest.ServiceFuture<java.lang.Void>
      description: the <xref uid="com.microsoft.rest.ServiceFuture" data-throw-if-not-resolved="false">ServiceFuture</xref> object
- uid: com.microsoft.azure.batch.protocol.Files.getPropertiesFromTaskAsync(java.lang.String,java.lang.String,java.lang.String,com.microsoft.rest.ServiceCallback<java.lang.Void>)
  id: getPropertiesFromTaskAsync(java.lang.String,java.lang.String,java.lang.String,com.microsoft.rest.ServiceCallback<java.lang.Void>)
  artifact: com.microsoft.azure:azure-batch:8.0.0
  parent: com.microsoft.azure.batch.protocol.Files
  langs:
  - java
  name: getPropertiesFromTaskAsync(String jobId, String taskId, String filePath, ServiceCallback<Void> serviceCallback)
  nameWithType: Files.getPropertiesFromTaskAsync(String jobId, String taskId, String filePath, ServiceCallback<Void> serviceCallback)
  fullName: com.microsoft.azure.batch.protocol.Files.getPropertiesFromTaskAsync(String jobId, String taskId, String filePath, ServiceCallback<Void> serviceCallback)
  overload: com.microsoft.azure.batch.protocol.Files.getPropertiesFromTaskAsync*
  type: Method
  package: com.microsoft.azure.batch.protocol
  summary: Gets the properties of the specified Task file.
  syntax:
    content: public abstract ServiceFuture<Void> getPropertiesFromTaskAsync(String jobId, String taskId, String filePath, ServiceCallback<Void> serviceCallback)
    parameters:
    - id: jobId
      type: java.lang.String
      description: The ID of the Job that contains the Task.
    - id: taskId
      type: java.lang.String
      description: The ID of the Task whose file you want to get the properties of.
    - id: filePath
      type: java.lang.String
      description: The path to the Task file that you want to get the properties of.
    - id: serviceCallback
      type: com.microsoft.rest.ServiceCallback<java.lang.Void>
      description: the async ServiceCallback to handle successful and failed responses.
    return:
      type: com.microsoft.rest.ServiceFuture<java.lang.Void>
      description: the <xref uid="com.microsoft.rest.ServiceFuture" data-throw-if-not-resolved="false">ServiceFuture</xref> object
- uid: com.microsoft.azure.batch.protocol.Files.getPropertiesFromTaskWithServiceResponseAsync(java.lang.String,java.lang.String,java.lang.String)
  id: getPropertiesFromTaskWithServiceResponseAsync(java.lang.String,java.lang.String,java.lang.String)
  artifact: com.microsoft.azure:azure-batch:8.0.0
  parent: com.microsoft.azure.batch.protocol.Files
  langs:
  - java
  name: getPropertiesFromTaskWithServiceResponseAsync(String jobId, String taskId, String filePath)
  nameWithType: Files.getPropertiesFromTaskWithServiceResponseAsync(String jobId, String taskId, String filePath)
  fullName: com.microsoft.azure.batch.protocol.Files.getPropertiesFromTaskWithServiceResponseAsync(String jobId, String taskId, String filePath)
  overload: com.microsoft.azure.batch.protocol.Files.getPropertiesFromTaskWithServiceResponseAsync*
  type: Method
  package: com.microsoft.azure.batch.protocol
  summary: Gets the properties of the specified Task file.
  syntax:
    content: public abstract Observable<ServiceResponseWithHeaders<Void,FileGetPropertiesFromTaskHeaders>> getPropertiesFromTaskWithServiceResponseAsync(String jobId, String taskId, String filePath)
    parameters:
    - id: jobId
      type: java.lang.String
      description: The ID of the Job that contains the Task.
    - id: taskId
      type: java.lang.String
      description: The ID of the Task whose file you want to get the properties of.
    - id: filePath
      type: java.lang.String
      description: The path to the Task file that you want to get the properties of.
    return:
      type: rx.Observable<com.microsoft.rest.ServiceResponseWithHeaders<java.lang.Void,com.microsoft.azure.batch.protocol.models.FileGetPropertiesFromTaskHeaders>>
      description: the <xref uid="com.microsoft.rest.ServiceResponseWithHeaders" data-throw-if-not-resolved="false">ServiceResponseWithHeaders</xref> object if successful.
- uid: com.microsoft.azure.batch.protocol.Files.getPropertiesFromTaskWithServiceResponseAsync(java.lang.String,java.lang.String,java.lang.String,com.microsoft.azure.batch.protocol.models.FileGetPropertiesFromTaskOptions)
  id: getPropertiesFromTaskWithServiceResponseAsync(java.lang.String,java.lang.String,java.lang.String,com.microsoft.azure.batch.protocol.models.FileGetPropertiesFromTaskOptions)
  artifact: com.microsoft.azure:azure-batch:8.0.0
  parent: com.microsoft.azure.batch.protocol.Files
  langs:
  - java
  name: getPropertiesFromTaskWithServiceResponseAsync(String jobId, String taskId, String filePath, FileGetPropertiesFromTaskOptions fileGetPropertiesFromTaskOptions)
  nameWithType: Files.getPropertiesFromTaskWithServiceResponseAsync(String jobId, String taskId, String filePath, FileGetPropertiesFromTaskOptions fileGetPropertiesFromTaskOptions)
  fullName: com.microsoft.azure.batch.protocol.Files.getPropertiesFromTaskWithServiceResponseAsync(String jobId, String taskId, String filePath, FileGetPropertiesFromTaskOptions fileGetPropertiesFromTaskOptions)
  overload: com.microsoft.azure.batch.protocol.Files.getPropertiesFromTaskWithServiceResponseAsync*
  type: Method
  package: com.microsoft.azure.batch.protocol
  summary: Gets the properties of the specified Task file.
  syntax:
    content: public abstract Observable<ServiceResponseWithHeaders<Void,FileGetPropertiesFromTaskHeaders>> getPropertiesFromTaskWithServiceResponseAsync(String jobId, String taskId, String filePath, FileGetPropertiesFromTaskOptions fileGetPropertiesFromTaskOptions)
    parameters:
    - id: jobId
      type: java.lang.String
      description: The ID of the Job that contains the Task.
    - id: taskId
      type: java.lang.String
      description: The ID of the Task whose file you want to get the properties of.
    - id: filePath
      type: java.lang.String
      description: The path to the Task file that you want to get the properties of.
    - id: fileGetPropertiesFromTaskOptions
      type: com.microsoft.azure.batch.protocol.models.FileGetPropertiesFromTaskOptions
      description: Additional parameters for the operation
    return:
      type: rx.Observable<com.microsoft.rest.ServiceResponseWithHeaders<java.lang.Void,com.microsoft.azure.batch.protocol.models.FileGetPropertiesFromTaskHeaders>>
      description: the <xref uid="com.microsoft.rest.ServiceResponseWithHeaders" data-throw-if-not-resolved="false">ServiceResponseWithHeaders</xref> object if successful.
- uid: com.microsoft.azure.batch.protocol.Files.listFromComputeNode(java.lang.String,java.lang.String)
  id: listFromComputeNode(java.lang.String,java.lang.String)
  artifact: com.microsoft.azure:azure-batch:8.0.0
  parent: com.microsoft.azure.batch.protocol.Files
  langs:
  - java
  name: listFromComputeNode(String poolId, String nodeId)
  nameWithType: Files.listFromComputeNode(String poolId, String nodeId)
  fullName: com.microsoft.azure.batch.protocol.Files.listFromComputeNode(String poolId, String nodeId)
  overload: com.microsoft.azure.batch.protocol.Files.listFromComputeNode*
  type: Method
  package: com.microsoft.azure.batch.protocol
  summary: Lists all of the files in Task directories on the specified Compute Node.
  syntax:
    content: public abstract PagedList<NodeFile> listFromComputeNode(String poolId, String nodeId)
    parameters:
    - id: poolId
      type: java.lang.String
      description: The ID of the Pool that contains the Compute Node.
    - id: nodeId
      type: java.lang.String
      description: The ID of the Compute Node whose files you want to list.
    return:
      type: com.microsoft.azure.PagedList<com.microsoft.azure.batch.protocol.models.NodeFile>
      description: the PagedList&lt;NodeFile&gt; object if successful.
- uid: com.microsoft.azure.batch.protocol.Files.listFromComputeNode(java.lang.String,java.lang.String,java.lang.Boolean,com.microsoft.azure.batch.protocol.models.FileListFromComputeNodeOptions)
  id: listFromComputeNode(java.lang.String,java.lang.String,java.lang.Boolean,com.microsoft.azure.batch.protocol.models.FileListFromComputeNodeOptions)
  artifact: com.microsoft.azure:azure-batch:8.0.0
  parent: com.microsoft.azure.batch.protocol.Files
  langs:
  - java
  name: listFromComputeNode(String poolId, String nodeId, Boolean recursive, FileListFromComputeNodeOptions fileListFromComputeNodeOptions)
  nameWithType: Files.listFromComputeNode(String poolId, String nodeId, Boolean recursive, FileListFromComputeNodeOptions fileListFromComputeNodeOptions)
  fullName: com.microsoft.azure.batch.protocol.Files.listFromComputeNode(String poolId, String nodeId, Boolean recursive, FileListFromComputeNodeOptions fileListFromComputeNodeOptions)
  overload: com.microsoft.azure.batch.protocol.Files.listFromComputeNode*
  type: Method
  package: com.microsoft.azure.batch.protocol
  summary: Lists all of the files in Task directories on the specified Compute Node.
  syntax:
    content: public abstract PagedList<NodeFile> listFromComputeNode(String poolId, String nodeId, Boolean recursive, FileListFromComputeNodeOptions fileListFromComputeNodeOptions)
    parameters:
    - id: poolId
      type: java.lang.String
      description: The ID of the Pool that contains the Compute Node.
    - id: nodeId
      type: java.lang.String
      description: The ID of the Compute Node whose files you want to list.
    - id: recursive
      type: java.lang.Boolean
      description: Whether to list children of a directory.
    - id: fileListFromComputeNodeOptions
      type: com.microsoft.azure.batch.protocol.models.FileListFromComputeNodeOptions
      description: Additional parameters for the operation
    return:
      type: com.microsoft.azure.PagedList<com.microsoft.azure.batch.protocol.models.NodeFile>
      description: the PagedList&lt;NodeFile&gt; object if successful.
- uid: com.microsoft.azure.batch.protocol.Files.listFromComputeNodeAsync(java.lang.String,java.lang.String)
  id: listFromComputeNodeAsync(java.lang.String,java.lang.String)
  artifact: com.microsoft.azure:azure-batch:8.0.0
  parent: com.microsoft.azure.batch.protocol.Files
  langs:
  - java
  name: listFromComputeNodeAsync(String poolId, String nodeId)
  nameWithType: Files.listFromComputeNodeAsync(String poolId, String nodeId)
  fullName: com.microsoft.azure.batch.protocol.Files.listFromComputeNodeAsync(String poolId, String nodeId)
  overload: com.microsoft.azure.batch.protocol.Files.listFromComputeNodeAsync*
  type: Method
  package: com.microsoft.azure.batch.protocol
  summary: Lists all of the files in Task directories on the specified Compute Node.
  syntax:
    content: public abstract Observable<Page<NodeFile>> listFromComputeNodeAsync(String poolId, String nodeId)
    parameters:
    - id: poolId
      type: java.lang.String
      description: The ID of the Pool that contains the Compute Node.
    - id: nodeId
      type: java.lang.String
      description: The ID of the Compute Node whose files you want to list.
    return:
      type: rx.Observable<com.microsoft.azure.Page<com.microsoft.azure.batch.protocol.models.NodeFile>>
      description: the observable to the PagedList&lt;NodeFile&gt; object
- uid: com.microsoft.azure.batch.protocol.Files.listFromComputeNodeAsync(java.lang.String,java.lang.String,com.microsoft.azure.ListOperationCallback<com.microsoft.azure.batch.protocol.models.NodeFile>)
  id: listFromComputeNodeAsync(java.lang.String,java.lang.String,com.microsoft.azure.ListOperationCallback<com.microsoft.azure.batch.protocol.models.NodeFile>)
  artifact: com.microsoft.azure:azure-batch:8.0.0
  parent: com.microsoft.azure.batch.protocol.Files
  langs:
  - java
  name: listFromComputeNodeAsync(String poolId, String nodeId, ListOperationCallback<NodeFile> serviceCallback)
  nameWithType: Files.listFromComputeNodeAsync(String poolId, String nodeId, ListOperationCallback<NodeFile> serviceCallback)
  fullName: com.microsoft.azure.batch.protocol.Files.listFromComputeNodeAsync(String poolId, String nodeId, ListOperationCallback<NodeFile> serviceCallback)
  overload: com.microsoft.azure.batch.protocol.Files.listFromComputeNodeAsync*
  type: Method
  package: com.microsoft.azure.batch.protocol
  summary: Lists all of the files in Task directories on the specified Compute Node.
  syntax:
    content: public abstract ServiceFuture<List<NodeFile>> listFromComputeNodeAsync(String poolId, String nodeId, ListOperationCallback<NodeFile> serviceCallback)
    parameters:
    - id: poolId
      type: java.lang.String
      description: The ID of the Pool that contains the Compute Node.
    - id: nodeId
      type: java.lang.String
      description: The ID of the Compute Node whose files you want to list.
    - id: serviceCallback
      type: com.microsoft.azure.ListOperationCallback<com.microsoft.azure.batch.protocol.models.NodeFile>
      description: the async ServiceCallback to handle successful and failed responses.
    return:
      type: com.microsoft.rest.ServiceFuture<java.util.List<com.microsoft.azure.batch.protocol.models.NodeFile>>
      description: the <xref uid="com.microsoft.rest.ServiceFuture" data-throw-if-not-resolved="false">ServiceFuture</xref> object
- uid: com.microsoft.azure.batch.protocol.Files.listFromComputeNodeAsync(java.lang.String,java.lang.String,java.lang.Boolean,com.microsoft.azure.batch.protocol.models.FileListFromComputeNodeOptions)
  id: listFromComputeNodeAsync(java.lang.String,java.lang.String,java.lang.Boolean,com.microsoft.azure.batch.protocol.models.FileListFromComputeNodeOptions)
  artifact: com.microsoft.azure:azure-batch:8.0.0
  parent: com.microsoft.azure.batch.protocol.Files
  langs:
  - java
  name: listFromComputeNodeAsync(String poolId, String nodeId, Boolean recursive, FileListFromComputeNodeOptions fileListFromComputeNodeOptions)
  nameWithType: Files.listFromComputeNodeAsync(String poolId, String nodeId, Boolean recursive, FileListFromComputeNodeOptions fileListFromComputeNodeOptions)
  fullName: com.microsoft.azure.batch.protocol.Files.listFromComputeNodeAsync(String poolId, String nodeId, Boolean recursive, FileListFromComputeNodeOptions fileListFromComputeNodeOptions)
  overload: com.microsoft.azure.batch.protocol.Files.listFromComputeNodeAsync*
  type: Method
  package: com.microsoft.azure.batch.protocol
  summary: Lists all of the files in Task directories on the specified Compute Node.
  syntax:
    content: public abstract Observable<Page<NodeFile>> listFromComputeNodeAsync(String poolId, String nodeId, Boolean recursive, FileListFromComputeNodeOptions fileListFromComputeNodeOptions)
    parameters:
    - id: poolId
      type: java.lang.String
      description: The ID of the Pool that contains the Compute Node.
    - id: nodeId
      type: java.lang.String
      description: The ID of the Compute Node whose files you want to list.
    - id: recursive
      type: java.lang.Boolean
      description: Whether to list children of a directory.
    - id: fileListFromComputeNodeOptions
      type: com.microsoft.azure.batch.protocol.models.FileListFromComputeNodeOptions
      description: Additional parameters for the operation
    return:
      type: rx.Observable<com.microsoft.azure.Page<com.microsoft.azure.batch.protocol.models.NodeFile>>
      description: the observable to the PagedList&lt;NodeFile&gt; object
- uid: com.microsoft.azure.batch.protocol.Files.listFromComputeNodeAsync(java.lang.String,java.lang.String,java.lang.Boolean,com.microsoft.azure.batch.protocol.models.FileListFromComputeNodeOptions,com.microsoft.azure.ListOperationCallback<com.microsoft.azure.batch.protocol.models.NodeFile>)
  id: listFromComputeNodeAsync(java.lang.String,java.lang.String,java.lang.Boolean,com.microsoft.azure.batch.protocol.models.FileListFromComputeNodeOptions,com.microsoft.azure.ListOperationCallback<com.microsoft.azure.batch.protocol.models.NodeFile>)
  artifact: com.microsoft.azure:azure-batch:8.0.0
  parent: com.microsoft.azure.batch.protocol.Files
  langs:
  - java
  name: listFromComputeNodeAsync(String poolId, String nodeId, Boolean recursive, FileListFromComputeNodeOptions fileListFromComputeNodeOptions, ListOperationCallback<NodeFile> serviceCallback)
  nameWithType: Files.listFromComputeNodeAsync(String poolId, String nodeId, Boolean recursive, FileListFromComputeNodeOptions fileListFromComputeNodeOptions, ListOperationCallback<NodeFile> serviceCallback)
  fullName: com.microsoft.azure.batch.protocol.Files.listFromComputeNodeAsync(String poolId, String nodeId, Boolean recursive, FileListFromComputeNodeOptions fileListFromComputeNodeOptions, ListOperationCallback<NodeFile> serviceCallback)
  overload: com.microsoft.azure.batch.protocol.Files.listFromComputeNodeAsync*
  type: Method
  package: com.microsoft.azure.batch.protocol
  summary: Lists all of the files in Task directories on the specified Compute Node.
  syntax:
    content: public abstract ServiceFuture<List<NodeFile>> listFromComputeNodeAsync(String poolId, String nodeId, Boolean recursive, FileListFromComputeNodeOptions fileListFromComputeNodeOptions, ListOperationCallback<NodeFile> serviceCallback)
    parameters:
    - id: poolId
      type: java.lang.String
      description: The ID of the Pool that contains the Compute Node.
    - id: nodeId
      type: java.lang.String
      description: The ID of the Compute Node whose files you want to list.
    - id: recursive
      type: java.lang.Boolean
      description: Whether to list children of a directory.
    - id: fileListFromComputeNodeOptions
      type: com.microsoft.azure.batch.protocol.models.FileListFromComputeNodeOptions
      description: Additional parameters for the operation
    - id: serviceCallback
      type: com.microsoft.azure.ListOperationCallback<com.microsoft.azure.batch.protocol.models.NodeFile>
      description: the async ServiceCallback to handle successful and failed responses.
    return:
      type: com.microsoft.rest.ServiceFuture<java.util.List<com.microsoft.azure.batch.protocol.models.NodeFile>>
      description: the <xref uid="com.microsoft.rest.ServiceFuture" data-throw-if-not-resolved="false">ServiceFuture</xref> object
- uid: com.microsoft.azure.batch.protocol.Files.listFromComputeNodeNext(java.lang.String)
  id: listFromComputeNodeNext(java.lang.String)
  artifact: com.microsoft.azure:azure-batch:8.0.0
  parent: com.microsoft.azure.batch.protocol.Files
  langs:
  - java
  name: listFromComputeNodeNext(String nextPageLink)
  nameWithType: Files.listFromComputeNodeNext(String nextPageLink)
  fullName: com.microsoft.azure.batch.protocol.Files.listFromComputeNodeNext(String nextPageLink)
  overload: com.microsoft.azure.batch.protocol.Files.listFromComputeNodeNext*
  type: Method
  package: com.microsoft.azure.batch.protocol
  summary: Lists all of the files in Task directories on the specified Compute Node.
  syntax:
    content: public abstract PagedList<NodeFile> listFromComputeNodeNext(String nextPageLink)
    parameters:
    - id: nextPageLink
      type: java.lang.String
      description: The NextLink from the previous successful call to List operation.
    return:
      type: com.microsoft.azure.PagedList<com.microsoft.azure.batch.protocol.models.NodeFile>
      description: the PagedList&lt;NodeFile&gt; object if successful.
- uid: com.microsoft.azure.batch.protocol.Files.listFromComputeNodeNext(java.lang.String,com.microsoft.azure.batch.protocol.models.FileListFromComputeNodeNextOptions)
  id: listFromComputeNodeNext(java.lang.String,com.microsoft.azure.batch.protocol.models.FileListFromComputeNodeNextOptions)
  artifact: com.microsoft.azure:azure-batch:8.0.0
  parent: com.microsoft.azure.batch.protocol.Files
  langs:
  - java
  name: listFromComputeNodeNext(String nextPageLink, FileListFromComputeNodeNextOptions fileListFromComputeNodeNextOptions)
  nameWithType: Files.listFromComputeNodeNext(String nextPageLink, FileListFromComputeNodeNextOptions fileListFromComputeNodeNextOptions)
  fullName: com.microsoft.azure.batch.protocol.Files.listFromComputeNodeNext(String nextPageLink, FileListFromComputeNodeNextOptions fileListFromComputeNodeNextOptions)
  overload: com.microsoft.azure.batch.protocol.Files.listFromComputeNodeNext*
  type: Method
  package: com.microsoft.azure.batch.protocol
  summary: Lists all of the files in Task directories on the specified Compute Node.
  syntax:
    content: public abstract PagedList<NodeFile> listFromComputeNodeNext(String nextPageLink, FileListFromComputeNodeNextOptions fileListFromComputeNodeNextOptions)
    parameters:
    - id: nextPageLink
      type: java.lang.String
      description: The NextLink from the previous successful call to List operation.
    - id: fileListFromComputeNodeNextOptions
      type: com.microsoft.azure.batch.protocol.models.FileListFromComputeNodeNextOptions
      description: Additional parameters for the operation
    return:
      type: com.microsoft.azure.PagedList<com.microsoft.azure.batch.protocol.models.NodeFile>
      description: the PagedList&lt;NodeFile&gt; object if successful.
- uid: com.microsoft.azure.batch.protocol.Files.listFromComputeNodeNextAsync(java.lang.String)
  id: listFromComputeNodeNextAsync(java.lang.String)
  artifact: com.microsoft.azure:azure-batch:8.0.0
  parent: com.microsoft.azure.batch.protocol.Files
  langs:
  - java
  name: listFromComputeNodeNextAsync(String nextPageLink)
  nameWithType: Files.listFromComputeNodeNextAsync(String nextPageLink)
  fullName: com.microsoft.azure.batch.protocol.Files.listFromComputeNodeNextAsync(String nextPageLink)
  overload: com.microsoft.azure.batch.protocol.Files.listFromComputeNodeNextAsync*
  type: Method
  package: com.microsoft.azure.batch.protocol
  summary: Lists all of the files in Task directories on the specified Compute Node.
  syntax:
    content: public abstract Observable<Page<NodeFile>> listFromComputeNodeNextAsync(String nextPageLink)
    parameters:
    - id: nextPageLink
      type: java.lang.String
      description: The NextLink from the previous successful call to List operation.
    return:
      type: rx.Observable<com.microsoft.azure.Page<com.microsoft.azure.batch.protocol.models.NodeFile>>
      description: the observable to the PagedList&lt;NodeFile&gt; object
- uid: com.microsoft.azure.batch.protocol.Files.listFromComputeNodeNextAsync(java.lang.String,com.microsoft.azure.batch.protocol.models.FileListFromComputeNodeNextOptions)
  id: listFromComputeNodeNextAsync(java.lang.String,com.microsoft.azure.batch.protocol.models.FileListFromComputeNodeNextOptions)
  artifact: com.microsoft.azure:azure-batch:8.0.0
  parent: com.microsoft.azure.batch.protocol.Files
  langs:
  - java
  name: listFromComputeNodeNextAsync(String nextPageLink, FileListFromComputeNodeNextOptions fileListFromComputeNodeNextOptions)
  nameWithType: Files.listFromComputeNodeNextAsync(String nextPageLink, FileListFromComputeNodeNextOptions fileListFromComputeNodeNextOptions)
  fullName: com.microsoft.azure.batch.protocol.Files.listFromComputeNodeNextAsync(String nextPageLink, FileListFromComputeNodeNextOptions fileListFromComputeNodeNextOptions)
  overload: com.microsoft.azure.batch.protocol.Files.listFromComputeNodeNextAsync*
  type: Method
  package: com.microsoft.azure.batch.protocol
  summary: Lists all of the files in Task directories on the specified Compute Node.
  syntax:
    content: public abstract Observable<Page<NodeFile>> listFromComputeNodeNextAsync(String nextPageLink, FileListFromComputeNodeNextOptions fileListFromComputeNodeNextOptions)
    parameters:
    - id: nextPageLink
      type: java.lang.String
      description: The NextLink from the previous successful call to List operation.
    - id: fileListFromComputeNodeNextOptions
      type: com.microsoft.azure.batch.protocol.models.FileListFromComputeNodeNextOptions
      description: Additional parameters for the operation
    return:
      type: rx.Observable<com.microsoft.azure.Page<com.microsoft.azure.batch.protocol.models.NodeFile>>
      description: the observable to the PagedList&lt;NodeFile&gt; object
- uid: com.microsoft.azure.batch.protocol.Files.listFromComputeNodeNextAsync(java.lang.String,com.microsoft.azure.batch.protocol.models.FileListFromComputeNodeNextOptions,com.microsoft.rest.ServiceFuture<java.util.List<com.microsoft.azure.batch.protocol.models.NodeFile>>,com.microsoft.azure.ListOperationCallback<com.microsoft.azure.batch.protocol.models.NodeFile>)
  id: listFromComputeNodeNextAsync(java.lang.String,com.microsoft.azure.batch.protocol.models.FileListFromComputeNodeNextOptions,com.microsoft.rest.ServiceFuture<java.util.List<com.microsoft.azure.batch.protocol.models.NodeFile>>,com.microsoft.azure.ListOperationCallback<com.microsoft.azure.batch.protocol.models.NodeFile>)
  artifact: com.microsoft.azure:azure-batch:8.0.0
  parent: com.microsoft.azure.batch.protocol.Files
  langs:
  - java
  name: listFromComputeNodeNextAsync(String nextPageLink, FileListFromComputeNodeNextOptions fileListFromComputeNodeNextOptions, ServiceFuture<List<NodeFile>> serviceFuture, ListOperationCallback<NodeFile> serviceCallback)
  nameWithType: Files.listFromComputeNodeNextAsync(String nextPageLink, FileListFromComputeNodeNextOptions fileListFromComputeNodeNextOptions, ServiceFuture<List<NodeFile>> serviceFuture, ListOperationCallback<NodeFile> serviceCallback)
  fullName: com.microsoft.azure.batch.protocol.Files.listFromComputeNodeNextAsync(String nextPageLink, FileListFromComputeNodeNextOptions fileListFromComputeNodeNextOptions, ServiceFuture<List<NodeFile>> serviceFuture, ListOperationCallback<NodeFile> serviceCallback)
  overload: com.microsoft.azure.batch.protocol.Files.listFromComputeNodeNextAsync*
  type: Method
  package: com.microsoft.azure.batch.protocol
  summary: Lists all of the files in Task directories on the specified Compute Node.
  syntax:
    content: public abstract ServiceFuture<List<NodeFile>> listFromComputeNodeNextAsync(String nextPageLink, FileListFromComputeNodeNextOptions fileListFromComputeNodeNextOptions, ServiceFuture<List<NodeFile>> serviceFuture, ListOperationCallback<NodeFile> serviceCallback)
    parameters:
    - id: nextPageLink
      type: java.lang.String
      description: The NextLink from the previous successful call to List operation.
    - id: fileListFromComputeNodeNextOptions
      type: com.microsoft.azure.batch.protocol.models.FileListFromComputeNodeNextOptions
      description: Additional parameters for the operation
    - id: serviceFuture
      type: com.microsoft.rest.ServiceFuture<java.util.List<com.microsoft.azure.batch.protocol.models.NodeFile>>
      description: the ServiceFuture object tracking the Retrofit calls
    - id: serviceCallback
      type: com.microsoft.azure.ListOperationCallback<com.microsoft.azure.batch.protocol.models.NodeFile>
      description: the async ServiceCallback to handle successful and failed responses.
    return:
      type: com.microsoft.rest.ServiceFuture<java.util.List<com.microsoft.azure.batch.protocol.models.NodeFile>>
      description: the <xref uid="com.microsoft.rest.ServiceFuture" data-throw-if-not-resolved="false">ServiceFuture</xref> object
- uid: com.microsoft.azure.batch.protocol.Files.listFromComputeNodeNextAsync(java.lang.String,com.microsoft.rest.ServiceFuture<java.util.List<com.microsoft.azure.batch.protocol.models.NodeFile>>,com.microsoft.azure.ListOperationCallback<com.microsoft.azure.batch.protocol.models.NodeFile>)
  id: listFromComputeNodeNextAsync(java.lang.String,com.microsoft.rest.ServiceFuture<java.util.List<com.microsoft.azure.batch.protocol.models.NodeFile>>,com.microsoft.azure.ListOperationCallback<com.microsoft.azure.batch.protocol.models.NodeFile>)
  artifact: com.microsoft.azure:azure-batch:8.0.0
  parent: com.microsoft.azure.batch.protocol.Files
  langs:
  - java
  name: listFromComputeNodeNextAsync(String nextPageLink, ServiceFuture<List<NodeFile>> serviceFuture, ListOperationCallback<NodeFile> serviceCallback)
  nameWithType: Files.listFromComputeNodeNextAsync(String nextPageLink, ServiceFuture<List<NodeFile>> serviceFuture, ListOperationCallback<NodeFile> serviceCallback)
  fullName: com.microsoft.azure.batch.protocol.Files.listFromComputeNodeNextAsync(String nextPageLink, ServiceFuture<List<NodeFile>> serviceFuture, ListOperationCallback<NodeFile> serviceCallback)
  overload: com.microsoft.azure.batch.protocol.Files.listFromComputeNodeNextAsync*
  type: Method
  package: com.microsoft.azure.batch.protocol
  summary: Lists all of the files in Task directories on the specified Compute Node.
  syntax:
    content: public abstract ServiceFuture<List<NodeFile>> listFromComputeNodeNextAsync(String nextPageLink, ServiceFuture<List<NodeFile>> serviceFuture, ListOperationCallback<NodeFile> serviceCallback)
    parameters:
    - id: nextPageLink
      type: java.lang.String
      description: The NextLink from the previous successful call to List operation.
    - id: serviceFuture
      type: com.microsoft.rest.ServiceFuture<java.util.List<com.microsoft.azure.batch.protocol.models.NodeFile>>
      description: the ServiceFuture object tracking the Retrofit calls
    - id: serviceCallback
      type: com.microsoft.azure.ListOperationCallback<com.microsoft.azure.batch.protocol.models.NodeFile>
      description: the async ServiceCallback to handle successful and failed responses.
    return:
      type: com.microsoft.rest.ServiceFuture<java.util.List<com.microsoft.azure.batch.protocol.models.NodeFile>>
      description: the <xref uid="com.microsoft.rest.ServiceFuture" data-throw-if-not-resolved="false">ServiceFuture</xref> object
- uid: com.microsoft.azure.batch.protocol.Files.listFromComputeNodeNextWithServiceResponseAsync(java.lang.String)
  id: listFromComputeNodeNextWithServiceResponseAsync(java.lang.String)
  artifact: com.microsoft.azure:azure-batch:8.0.0
  parent: com.microsoft.azure.batch.protocol.Files
  langs:
  - java
  name: listFromComputeNodeNextWithServiceResponseAsync(String nextPageLink)
  nameWithType: Files.listFromComputeNodeNextWithServiceResponseAsync(String nextPageLink)
  fullName: com.microsoft.azure.batch.protocol.Files.listFromComputeNodeNextWithServiceResponseAsync(String nextPageLink)
  overload: com.microsoft.azure.batch.protocol.Files.listFromComputeNodeNextWithServiceResponseAsync*
  type: Method
  package: com.microsoft.azure.batch.protocol
  summary: Lists all of the files in Task directories on the specified Compute Node.
  syntax:
    content: public abstract Observable<ServiceResponseWithHeaders<Page<NodeFile>,FileListFromComputeNodeHeaders>> listFromComputeNodeNextWithServiceResponseAsync(String nextPageLink)
    parameters:
    - id: nextPageLink
      type: java.lang.String
      description: The NextLink from the previous successful call to List operation.
    return:
      type: rx.Observable<com.microsoft.rest.ServiceResponseWithHeaders<com.microsoft.azure.Page<com.microsoft.azure.batch.protocol.models.NodeFile>,com.microsoft.azure.batch.protocol.models.FileListFromComputeNodeHeaders>>
      description: the observable to the PagedList&lt;NodeFile&gt; object
- uid: com.microsoft.azure.batch.protocol.Files.listFromComputeNodeNextWithServiceResponseAsync(java.lang.String,com.microsoft.azure.batch.protocol.models.FileListFromComputeNodeNextOptions)
  id: listFromComputeNodeNextWithServiceResponseAsync(java.lang.String,com.microsoft.azure.batch.protocol.models.FileListFromComputeNodeNextOptions)
  artifact: com.microsoft.azure:azure-batch:8.0.0
  parent: com.microsoft.azure.batch.protocol.Files
  langs:
  - java
  name: listFromComputeNodeNextWithServiceResponseAsync(String nextPageLink, FileListFromComputeNodeNextOptions fileListFromComputeNodeNextOptions)
  nameWithType: Files.listFromComputeNodeNextWithServiceResponseAsync(String nextPageLink, FileListFromComputeNodeNextOptions fileListFromComputeNodeNextOptions)
  fullName: com.microsoft.azure.batch.protocol.Files.listFromComputeNodeNextWithServiceResponseAsync(String nextPageLink, FileListFromComputeNodeNextOptions fileListFromComputeNodeNextOptions)
  overload: com.microsoft.azure.batch.protocol.Files.listFromComputeNodeNextWithServiceResponseAsync*
  type: Method
  package: com.microsoft.azure.batch.protocol
  summary: Lists all of the files in Task directories on the specified Compute Node.
  syntax:
    content: public abstract Observable<ServiceResponseWithHeaders<Page<NodeFile>,FileListFromComputeNodeHeaders>> listFromComputeNodeNextWithServiceResponseAsync(String nextPageLink, FileListFromComputeNodeNextOptions fileListFromComputeNodeNextOptions)
    parameters:
    - id: nextPageLink
      type: java.lang.String
      description: The NextLink from the previous successful call to List operation.
    - id: fileListFromComputeNodeNextOptions
      type: com.microsoft.azure.batch.protocol.models.FileListFromComputeNodeNextOptions
      description: Additional parameters for the operation
    return:
      type: rx.Observable<com.microsoft.rest.ServiceResponseWithHeaders<com.microsoft.azure.Page<com.microsoft.azure.batch.protocol.models.NodeFile>,com.microsoft.azure.batch.protocol.models.FileListFromComputeNodeHeaders>>
      description: the observable to the PagedList&lt;NodeFile&gt; object
- uid: com.microsoft.azure.batch.protocol.Files.listFromComputeNodeWithServiceResponseAsync(java.lang.String,java.lang.String)
  id: listFromComputeNodeWithServiceResponseAsync(java.lang.String,java.lang.String)
  artifact: com.microsoft.azure:azure-batch:8.0.0
  parent: com.microsoft.azure.batch.protocol.Files
  langs:
  - java
  name: listFromComputeNodeWithServiceResponseAsync(String poolId, String nodeId)
  nameWithType: Files.listFromComputeNodeWithServiceResponseAsync(String poolId, String nodeId)
  fullName: com.microsoft.azure.batch.protocol.Files.listFromComputeNodeWithServiceResponseAsync(String poolId, String nodeId)
  overload: com.microsoft.azure.batch.protocol.Files.listFromComputeNodeWithServiceResponseAsync*
  type: Method
  package: com.microsoft.azure.batch.protocol
  summary: Lists all of the files in Task directories on the specified Compute Node.
  syntax:
    content: public abstract Observable<ServiceResponseWithHeaders<Page<NodeFile>,FileListFromComputeNodeHeaders>> listFromComputeNodeWithServiceResponseAsync(String poolId, String nodeId)
    parameters:
    - id: poolId
      type: java.lang.String
      description: The ID of the Pool that contains the Compute Node.
    - id: nodeId
      type: java.lang.String
      description: The ID of the Compute Node whose files you want to list.
    return:
      type: rx.Observable<com.microsoft.rest.ServiceResponseWithHeaders<com.microsoft.azure.Page<com.microsoft.azure.batch.protocol.models.NodeFile>,com.microsoft.azure.batch.protocol.models.FileListFromComputeNodeHeaders>>
      description: the observable to the PagedList&lt;NodeFile&gt; object
- uid: com.microsoft.azure.batch.protocol.Files.listFromComputeNodeWithServiceResponseAsync(java.lang.String,java.lang.String,java.lang.Boolean,com.microsoft.azure.batch.protocol.models.FileListFromComputeNodeOptions)
  id: listFromComputeNodeWithServiceResponseAsync(java.lang.String,java.lang.String,java.lang.Boolean,com.microsoft.azure.batch.protocol.models.FileListFromComputeNodeOptions)
  artifact: com.microsoft.azure:azure-batch:8.0.0
  parent: com.microsoft.azure.batch.protocol.Files
  langs:
  - java
  name: listFromComputeNodeWithServiceResponseAsync(String poolId, String nodeId, Boolean recursive, FileListFromComputeNodeOptions fileListFromComputeNodeOptions)
  nameWithType: Files.listFromComputeNodeWithServiceResponseAsync(String poolId, String nodeId, Boolean recursive, FileListFromComputeNodeOptions fileListFromComputeNodeOptions)
  fullName: com.microsoft.azure.batch.protocol.Files.listFromComputeNodeWithServiceResponseAsync(String poolId, String nodeId, Boolean recursive, FileListFromComputeNodeOptions fileListFromComputeNodeOptions)
  overload: com.microsoft.azure.batch.protocol.Files.listFromComputeNodeWithServiceResponseAsync*
  type: Method
  package: com.microsoft.azure.batch.protocol
  summary: Lists all of the files in Task directories on the specified Compute Node.
  syntax:
    content: public abstract Observable<ServiceResponseWithHeaders<Page<NodeFile>,FileListFromComputeNodeHeaders>> listFromComputeNodeWithServiceResponseAsync(String poolId, String nodeId, Boolean recursive, FileListFromComputeNodeOptions fileListFromComputeNodeOptions)
    parameters:
    - id: poolId
      type: java.lang.String
      description: The ID of the Pool that contains the Compute Node.
    - id: nodeId
      type: java.lang.String
      description: The ID of the Compute Node whose files you want to list.
    - id: recursive
      type: java.lang.Boolean
      description: Whether to list children of a directory.
    - id: fileListFromComputeNodeOptions
      type: com.microsoft.azure.batch.protocol.models.FileListFromComputeNodeOptions
      description: Additional parameters for the operation
    return:
      type: rx.Observable<com.microsoft.rest.ServiceResponseWithHeaders<com.microsoft.azure.Page<com.microsoft.azure.batch.protocol.models.NodeFile>,com.microsoft.azure.batch.protocol.models.FileListFromComputeNodeHeaders>>
      description: the observable to the PagedList&lt;NodeFile&gt; object
- uid: com.microsoft.azure.batch.protocol.Files.listFromTask(java.lang.String,java.lang.String)
  id: listFromTask(java.lang.String,java.lang.String)
  artifact: com.microsoft.azure:azure-batch:8.0.0
  parent: com.microsoft.azure.batch.protocol.Files
  langs:
  - java
  name: listFromTask(String jobId, String taskId)
  nameWithType: Files.listFromTask(String jobId, String taskId)
  fullName: com.microsoft.azure.batch.protocol.Files.listFromTask(String jobId, String taskId)
  overload: com.microsoft.azure.batch.protocol.Files.listFromTask*
  type: Method
  package: com.microsoft.azure.batch.protocol
  summary: Lists the files in a Task's directory on its Compute Node.
  syntax:
    content: public abstract PagedList<NodeFile> listFromTask(String jobId, String taskId)
    parameters:
    - id: jobId
      type: java.lang.String
      description: The ID of the Job that contains the Task.
    - id: taskId
      type: java.lang.String
      description: The ID of the Task whose files you want to list.
    return:
      type: com.microsoft.azure.PagedList<com.microsoft.azure.batch.protocol.models.NodeFile>
      description: the PagedList&lt;NodeFile&gt; object if successful.
- uid: com.microsoft.azure.batch.protocol.Files.listFromTask(java.lang.String,java.lang.String,java.lang.Boolean,com.microsoft.azure.batch.protocol.models.FileListFromTaskOptions)
  id: listFromTask(java.lang.String,java.lang.String,java.lang.Boolean,com.microsoft.azure.batch.protocol.models.FileListFromTaskOptions)
  artifact: com.microsoft.azure:azure-batch:8.0.0
  parent: com.microsoft.azure.batch.protocol.Files
  langs:
  - java
  name: listFromTask(String jobId, String taskId, Boolean recursive, FileListFromTaskOptions fileListFromTaskOptions)
  nameWithType: Files.listFromTask(String jobId, String taskId, Boolean recursive, FileListFromTaskOptions fileListFromTaskOptions)
  fullName: com.microsoft.azure.batch.protocol.Files.listFromTask(String jobId, String taskId, Boolean recursive, FileListFromTaskOptions fileListFromTaskOptions)
  overload: com.microsoft.azure.batch.protocol.Files.listFromTask*
  type: Method
  package: com.microsoft.azure.batch.protocol
  summary: Lists the files in a Task's directory on its Compute Node.
  syntax:
    content: public abstract PagedList<NodeFile> listFromTask(String jobId, String taskId, Boolean recursive, FileListFromTaskOptions fileListFromTaskOptions)
    parameters:
    - id: jobId
      type: java.lang.String
      description: The ID of the Job that contains the Task.
    - id: taskId
      type: java.lang.String
      description: The ID of the Task whose files you want to list.
    - id: recursive
      type: java.lang.Boolean
      description: Whether to list children of the Task directory. This parameter can be used in combination with the filter parameter to list specific type of files.
    - id: fileListFromTaskOptions
      type: com.microsoft.azure.batch.protocol.models.FileListFromTaskOptions
      description: Additional parameters for the operation
    return:
      type: com.microsoft.azure.PagedList<com.microsoft.azure.batch.protocol.models.NodeFile>
      description: the PagedList&lt;NodeFile&gt; object if successful.
- uid: com.microsoft.azure.batch.protocol.Files.listFromTaskAsync(java.lang.String,java.lang.String)
  id: listFromTaskAsync(java.lang.String,java.lang.String)
  artifact: com.microsoft.azure:azure-batch:8.0.0
  parent: com.microsoft.azure.batch.protocol.Files
  langs:
  - java
  name: listFromTaskAsync(String jobId, String taskId)
  nameWithType: Files.listFromTaskAsync(String jobId, String taskId)
  fullName: com.microsoft.azure.batch.protocol.Files.listFromTaskAsync(String jobId, String taskId)
  overload: com.microsoft.azure.batch.protocol.Files.listFromTaskAsync*
  type: Method
  package: com.microsoft.azure.batch.protocol
  summary: Lists the files in a Task's directory on its Compute Node.
  syntax:
    content: public abstract Observable<Page<NodeFile>> listFromTaskAsync(String jobId, String taskId)
    parameters:
    - id: jobId
      type: java.lang.String
      description: The ID of the Job that contains the Task.
    - id: taskId
      type: java.lang.String
      description: The ID of the Task whose files you want to list.
    return:
      type: rx.Observable<com.microsoft.azure.Page<com.microsoft.azure.batch.protocol.models.NodeFile>>
      description: the observable to the PagedList&lt;NodeFile&gt; object
- uid: com.microsoft.azure.batch.protocol.Files.listFromTaskAsync(java.lang.String,java.lang.String,com.microsoft.azure.ListOperationCallback<com.microsoft.azure.batch.protocol.models.NodeFile>)
  id: listFromTaskAsync(java.lang.String,java.lang.String,com.microsoft.azure.ListOperationCallback<com.microsoft.azure.batch.protocol.models.NodeFile>)
  artifact: com.microsoft.azure:azure-batch:8.0.0
  parent: com.microsoft.azure.batch.protocol.Files
  langs:
  - java
  name: listFromTaskAsync(String jobId, String taskId, ListOperationCallback<NodeFile> serviceCallback)
  nameWithType: Files.listFromTaskAsync(String jobId, String taskId, ListOperationCallback<NodeFile> serviceCallback)
  fullName: com.microsoft.azure.batch.protocol.Files.listFromTaskAsync(String jobId, String taskId, ListOperationCallback<NodeFile> serviceCallback)
  overload: com.microsoft.azure.batch.protocol.Files.listFromTaskAsync*
  type: Method
  package: com.microsoft.azure.batch.protocol
  summary: Lists the files in a Task's directory on its Compute Node.
  syntax:
    content: public abstract ServiceFuture<List<NodeFile>> listFromTaskAsync(String jobId, String taskId, ListOperationCallback<NodeFile> serviceCallback)
    parameters:
    - id: jobId
      type: java.lang.String
      description: The ID of the Job that contains the Task.
    - id: taskId
      type: java.lang.String
      description: The ID of the Task whose files you want to list.
    - id: serviceCallback
      type: com.microsoft.azure.ListOperationCallback<com.microsoft.azure.batch.protocol.models.NodeFile>
      description: the async ServiceCallback to handle successful and failed responses.
    return:
      type: com.microsoft.rest.ServiceFuture<java.util.List<com.microsoft.azure.batch.protocol.models.NodeFile>>
      description: the <xref uid="com.microsoft.rest.ServiceFuture" data-throw-if-not-resolved="false">ServiceFuture</xref> object
- uid: com.microsoft.azure.batch.protocol.Files.listFromTaskAsync(java.lang.String,java.lang.String,java.lang.Boolean,com.microsoft.azure.batch.protocol.models.FileListFromTaskOptions)
  id: listFromTaskAsync(java.lang.String,java.lang.String,java.lang.Boolean,com.microsoft.azure.batch.protocol.models.FileListFromTaskOptions)
  artifact: com.microsoft.azure:azure-batch:8.0.0
  parent: com.microsoft.azure.batch.protocol.Files
  langs:
  - java
  name: listFromTaskAsync(String jobId, String taskId, Boolean recursive, FileListFromTaskOptions fileListFromTaskOptions)
  nameWithType: Files.listFromTaskAsync(String jobId, String taskId, Boolean recursive, FileListFromTaskOptions fileListFromTaskOptions)
  fullName: com.microsoft.azure.batch.protocol.Files.listFromTaskAsync(String jobId, String taskId, Boolean recursive, FileListFromTaskOptions fileListFromTaskOptions)
  overload: com.microsoft.azure.batch.protocol.Files.listFromTaskAsync*
  type: Method
  package: com.microsoft.azure.batch.protocol
  summary: Lists the files in a Task's directory on its Compute Node.
  syntax:
    content: public abstract Observable<Page<NodeFile>> listFromTaskAsync(String jobId, String taskId, Boolean recursive, FileListFromTaskOptions fileListFromTaskOptions)
    parameters:
    - id: jobId
      type: java.lang.String
      description: The ID of the Job that contains the Task.
    - id: taskId
      type: java.lang.String
      description: The ID of the Task whose files you want to list.
    - id: recursive
      type: java.lang.Boolean
      description: Whether to list children of the Task directory. This parameter can be used in combination with the filter parameter to list specific type of files.
    - id: fileListFromTaskOptions
      type: com.microsoft.azure.batch.protocol.models.FileListFromTaskOptions
      description: Additional parameters for the operation
    return:
      type: rx.Observable<com.microsoft.azure.Page<com.microsoft.azure.batch.protocol.models.NodeFile>>
      description: the observable to the PagedList&lt;NodeFile&gt; object
- uid: com.microsoft.azure.batch.protocol.Files.listFromTaskAsync(java.lang.String,java.lang.String,java.lang.Boolean,com.microsoft.azure.batch.protocol.models.FileListFromTaskOptions,com.microsoft.azure.ListOperationCallback<com.microsoft.azure.batch.protocol.models.NodeFile>)
  id: listFromTaskAsync(java.lang.String,java.lang.String,java.lang.Boolean,com.microsoft.azure.batch.protocol.models.FileListFromTaskOptions,com.microsoft.azure.ListOperationCallback<com.microsoft.azure.batch.protocol.models.NodeFile>)
  artifact: com.microsoft.azure:azure-batch:8.0.0
  parent: com.microsoft.azure.batch.protocol.Files
  langs:
  - java
  name: listFromTaskAsync(String jobId, String taskId, Boolean recursive, FileListFromTaskOptions fileListFromTaskOptions, ListOperationCallback<NodeFile> serviceCallback)
  nameWithType: Files.listFromTaskAsync(String jobId, String taskId, Boolean recursive, FileListFromTaskOptions fileListFromTaskOptions, ListOperationCallback<NodeFile> serviceCallback)
  fullName: com.microsoft.azure.batch.protocol.Files.listFromTaskAsync(String jobId, String taskId, Boolean recursive, FileListFromTaskOptions fileListFromTaskOptions, ListOperationCallback<NodeFile> serviceCallback)
  overload: com.microsoft.azure.batch.protocol.Files.listFromTaskAsync*
  type: Method
  package: com.microsoft.azure.batch.protocol
  summary: Lists the files in a Task's directory on its Compute Node.
  syntax:
    content: public abstract ServiceFuture<List<NodeFile>> listFromTaskAsync(String jobId, String taskId, Boolean recursive, FileListFromTaskOptions fileListFromTaskOptions, ListOperationCallback<NodeFile> serviceCallback)
    parameters:
    - id: jobId
      type: java.lang.String
      description: The ID of the Job that contains the Task.
    - id: taskId
      type: java.lang.String
      description: The ID of the Task whose files you want to list.
    - id: recursive
      type: java.lang.Boolean
      description: Whether to list children of the Task directory. This parameter can be used in combination with the filter parameter to list specific type of files.
    - id: fileListFromTaskOptions
      type: com.microsoft.azure.batch.protocol.models.FileListFromTaskOptions
      description: Additional parameters for the operation
    - id: serviceCallback
      type: com.microsoft.azure.ListOperationCallback<com.microsoft.azure.batch.protocol.models.NodeFile>
      description: the async ServiceCallback to handle successful and failed responses.
    return:
      type: com.microsoft.rest.ServiceFuture<java.util.List<com.microsoft.azure.batch.protocol.models.NodeFile>>
      description: the <xref uid="com.microsoft.rest.ServiceFuture" data-throw-if-not-resolved="false">ServiceFuture</xref> object
- uid: com.microsoft.azure.batch.protocol.Files.listFromTaskNext(java.lang.String)
  id: listFromTaskNext(java.lang.String)
  artifact: com.microsoft.azure:azure-batch:8.0.0
  parent: com.microsoft.azure.batch.protocol.Files
  langs:
  - java
  name: listFromTaskNext(String nextPageLink)
  nameWithType: Files.listFromTaskNext(String nextPageLink)
  fullName: com.microsoft.azure.batch.protocol.Files.listFromTaskNext(String nextPageLink)
  overload: com.microsoft.azure.batch.protocol.Files.listFromTaskNext*
  type: Method
  package: com.microsoft.azure.batch.protocol
  summary: Lists the files in a Task's directory on its Compute Node.
  syntax:
    content: public abstract PagedList<NodeFile> listFromTaskNext(String nextPageLink)
    parameters:
    - id: nextPageLink
      type: java.lang.String
      description: The NextLink from the previous successful call to List operation.
    return:
      type: com.microsoft.azure.PagedList<com.microsoft.azure.batch.protocol.models.NodeFile>
      description: the PagedList&lt;NodeFile&gt; object if successful.
- uid: com.microsoft.azure.batch.protocol.Files.listFromTaskNext(java.lang.String,com.microsoft.azure.batch.protocol.models.FileListFromTaskNextOptions)
  id: listFromTaskNext(java.lang.String,com.microsoft.azure.batch.protocol.models.FileListFromTaskNextOptions)
  artifact: com.microsoft.azure:azure-batch:8.0.0
  parent: com.microsoft.azure.batch.protocol.Files
  langs:
  - java
  name: listFromTaskNext(String nextPageLink, FileListFromTaskNextOptions fileListFromTaskNextOptions)
  nameWithType: Files.listFromTaskNext(String nextPageLink, FileListFromTaskNextOptions fileListFromTaskNextOptions)
  fullName: com.microsoft.azure.batch.protocol.Files.listFromTaskNext(String nextPageLink, FileListFromTaskNextOptions fileListFromTaskNextOptions)
  overload: com.microsoft.azure.batch.protocol.Files.listFromTaskNext*
  type: Method
  package: com.microsoft.azure.batch.protocol
  summary: Lists the files in a Task's directory on its Compute Node.
  syntax:
    content: public abstract PagedList<NodeFile> listFromTaskNext(String nextPageLink, FileListFromTaskNextOptions fileListFromTaskNextOptions)
    parameters:
    - id: nextPageLink
      type: java.lang.String
      description: The NextLink from the previous successful call to List operation.
    - id: fileListFromTaskNextOptions
      type: com.microsoft.azure.batch.protocol.models.FileListFromTaskNextOptions
      description: Additional parameters for the operation
    return:
      type: com.microsoft.azure.PagedList<com.microsoft.azure.batch.protocol.models.NodeFile>
      description: the PagedList&lt;NodeFile&gt; object if successful.
- uid: com.microsoft.azure.batch.protocol.Files.listFromTaskNextAsync(java.lang.String)
  id: listFromTaskNextAsync(java.lang.String)
  artifact: com.microsoft.azure:azure-batch:8.0.0
  parent: com.microsoft.azure.batch.protocol.Files
  langs:
  - java
  name: listFromTaskNextAsync(String nextPageLink)
  nameWithType: Files.listFromTaskNextAsync(String nextPageLink)
  fullName: com.microsoft.azure.batch.protocol.Files.listFromTaskNextAsync(String nextPageLink)
  overload: com.microsoft.azure.batch.protocol.Files.listFromTaskNextAsync*
  type: Method
  package: com.microsoft.azure.batch.protocol
  summary: Lists the files in a Task's directory on its Compute Node.
  syntax:
    content: public abstract Observable<Page<NodeFile>> listFromTaskNextAsync(String nextPageLink)
    parameters:
    - id: nextPageLink
      type: java.lang.String
      description: The NextLink from the previous successful call to List operation.
    return:
      type: rx.Observable<com.microsoft.azure.Page<com.microsoft.azure.batch.protocol.models.NodeFile>>
      description: the observable to the PagedList&lt;NodeFile&gt; object
- uid: com.microsoft.azure.batch.protocol.Files.listFromTaskNextAsync(java.lang.String,com.microsoft.azure.batch.protocol.models.FileListFromTaskNextOptions)
  id: listFromTaskNextAsync(java.lang.String,com.microsoft.azure.batch.protocol.models.FileListFromTaskNextOptions)
  artifact: com.microsoft.azure:azure-batch:8.0.0
  parent: com.microsoft.azure.batch.protocol.Files
  langs:
  - java
  name: listFromTaskNextAsync(String nextPageLink, FileListFromTaskNextOptions fileListFromTaskNextOptions)
  nameWithType: Files.listFromTaskNextAsync(String nextPageLink, FileListFromTaskNextOptions fileListFromTaskNextOptions)
  fullName: com.microsoft.azure.batch.protocol.Files.listFromTaskNextAsync(String nextPageLink, FileListFromTaskNextOptions fileListFromTaskNextOptions)
  overload: com.microsoft.azure.batch.protocol.Files.listFromTaskNextAsync*
  type: Method
  package: com.microsoft.azure.batch.protocol
  summary: Lists the files in a Task's directory on its Compute Node.
  syntax:
    content: public abstract Observable<Page<NodeFile>> listFromTaskNextAsync(String nextPageLink, FileListFromTaskNextOptions fileListFromTaskNextOptions)
    parameters:
    - id: nextPageLink
      type: java.lang.String
      description: The NextLink from the previous successful call to List operation.
    - id: fileListFromTaskNextOptions
      type: com.microsoft.azure.batch.protocol.models.FileListFromTaskNextOptions
      description: Additional parameters for the operation
    return:
      type: rx.Observable<com.microsoft.azure.Page<com.microsoft.azure.batch.protocol.models.NodeFile>>
      description: the observable to the PagedList&lt;NodeFile&gt; object
- uid: com.microsoft.azure.batch.protocol.Files.listFromTaskNextAsync(java.lang.String,com.microsoft.azure.batch.protocol.models.FileListFromTaskNextOptions,com.microsoft.rest.ServiceFuture<java.util.List<com.microsoft.azure.batch.protocol.models.NodeFile>>,com.microsoft.azure.ListOperationCallback<com.microsoft.azure.batch.protocol.models.NodeFile>)
  id: listFromTaskNextAsync(java.lang.String,com.microsoft.azure.batch.protocol.models.FileListFromTaskNextOptions,com.microsoft.rest.ServiceFuture<java.util.List<com.microsoft.azure.batch.protocol.models.NodeFile>>,com.microsoft.azure.ListOperationCallback<com.microsoft.azure.batch.protocol.models.NodeFile>)
  artifact: com.microsoft.azure:azure-batch:8.0.0
  parent: com.microsoft.azure.batch.protocol.Files
  langs:
  - java
  name: listFromTaskNextAsync(String nextPageLink, FileListFromTaskNextOptions fileListFromTaskNextOptions, ServiceFuture<List<NodeFile>> serviceFuture, ListOperationCallback<NodeFile> serviceCallback)
  nameWithType: Files.listFromTaskNextAsync(String nextPageLink, FileListFromTaskNextOptions fileListFromTaskNextOptions, ServiceFuture<List<NodeFile>> serviceFuture, ListOperationCallback<NodeFile> serviceCallback)
  fullName: com.microsoft.azure.batch.protocol.Files.listFromTaskNextAsync(String nextPageLink, FileListFromTaskNextOptions fileListFromTaskNextOptions, ServiceFuture<List<NodeFile>> serviceFuture, ListOperationCallback<NodeFile> serviceCallback)
  overload: com.microsoft.azure.batch.protocol.Files.listFromTaskNextAsync*
  type: Method
  package: com.microsoft.azure.batch.protocol
  summary: Lists the files in a Task's directory on its Compute Node.
  syntax:
    content: public abstract ServiceFuture<List<NodeFile>> listFromTaskNextAsync(String nextPageLink, FileListFromTaskNextOptions fileListFromTaskNextOptions, ServiceFuture<List<NodeFile>> serviceFuture, ListOperationCallback<NodeFile> serviceCallback)
    parameters:
    - id: nextPageLink
      type: java.lang.String
      description: The NextLink from the previous successful call to List operation.
    - id: fileListFromTaskNextOptions
      type: com.microsoft.azure.batch.protocol.models.FileListFromTaskNextOptions
      description: Additional parameters for the operation
    - id: serviceFuture
      type: com.microsoft.rest.ServiceFuture<java.util.List<com.microsoft.azure.batch.protocol.models.NodeFile>>
      description: the ServiceFuture object tracking the Retrofit calls
    - id: serviceCallback
      type: com.microsoft.azure.ListOperationCallback<com.microsoft.azure.batch.protocol.models.NodeFile>
      description: the async ServiceCallback to handle successful and failed responses.
    return:
      type: com.microsoft.rest.ServiceFuture<java.util.List<com.microsoft.azure.batch.protocol.models.NodeFile>>
      description: the <xref uid="com.microsoft.rest.ServiceFuture" data-throw-if-not-resolved="false">ServiceFuture</xref> object
- uid: com.microsoft.azure.batch.protocol.Files.listFromTaskNextAsync(java.lang.String,com.microsoft.rest.ServiceFuture<java.util.List<com.microsoft.azure.batch.protocol.models.NodeFile>>,com.microsoft.azure.ListOperationCallback<com.microsoft.azure.batch.protocol.models.NodeFile>)
  id: listFromTaskNextAsync(java.lang.String,com.microsoft.rest.ServiceFuture<java.util.List<com.microsoft.azure.batch.protocol.models.NodeFile>>,com.microsoft.azure.ListOperationCallback<com.microsoft.azure.batch.protocol.models.NodeFile>)
  artifact: com.microsoft.azure:azure-batch:8.0.0
  parent: com.microsoft.azure.batch.protocol.Files
  langs:
  - java
  name: listFromTaskNextAsync(String nextPageLink, ServiceFuture<List<NodeFile>> serviceFuture, ListOperationCallback<NodeFile> serviceCallback)
  nameWithType: Files.listFromTaskNextAsync(String nextPageLink, ServiceFuture<List<NodeFile>> serviceFuture, ListOperationCallback<NodeFile> serviceCallback)
  fullName: com.microsoft.azure.batch.protocol.Files.listFromTaskNextAsync(String nextPageLink, ServiceFuture<List<NodeFile>> serviceFuture, ListOperationCallback<NodeFile> serviceCallback)
  overload: com.microsoft.azure.batch.protocol.Files.listFromTaskNextAsync*
  type: Method
  package: com.microsoft.azure.batch.protocol
  summary: Lists the files in a Task's directory on its Compute Node.
  syntax:
    content: public abstract ServiceFuture<List<NodeFile>> listFromTaskNextAsync(String nextPageLink, ServiceFuture<List<NodeFile>> serviceFuture, ListOperationCallback<NodeFile> serviceCallback)
    parameters:
    - id: nextPageLink
      type: java.lang.String
      description: The NextLink from the previous successful call to List operation.
    - id: serviceFuture
      type: com.microsoft.rest.ServiceFuture<java.util.List<com.microsoft.azure.batch.protocol.models.NodeFile>>
      description: the ServiceFuture object tracking the Retrofit calls
    - id: serviceCallback
      type: com.microsoft.azure.ListOperationCallback<com.microsoft.azure.batch.protocol.models.NodeFile>
      description: the async ServiceCallback to handle successful and failed responses.
    return:
      type: com.microsoft.rest.ServiceFuture<java.util.List<com.microsoft.azure.batch.protocol.models.NodeFile>>
      description: the <xref uid="com.microsoft.rest.ServiceFuture" data-throw-if-not-resolved="false">ServiceFuture</xref> object
- uid: com.microsoft.azure.batch.protocol.Files.listFromTaskNextWithServiceResponseAsync(java.lang.String)
  id: listFromTaskNextWithServiceResponseAsync(java.lang.String)
  artifact: com.microsoft.azure:azure-batch:8.0.0
  parent: com.microsoft.azure.batch.protocol.Files
  langs:
  - java
  name: listFromTaskNextWithServiceResponseAsync(String nextPageLink)
  nameWithType: Files.listFromTaskNextWithServiceResponseAsync(String nextPageLink)
  fullName: com.microsoft.azure.batch.protocol.Files.listFromTaskNextWithServiceResponseAsync(String nextPageLink)
  overload: com.microsoft.azure.batch.protocol.Files.listFromTaskNextWithServiceResponseAsync*
  type: Method
  package: com.microsoft.azure.batch.protocol
  summary: Lists the files in a Task's directory on its Compute Node.
  syntax:
    content: public abstract Observable<ServiceResponseWithHeaders<Page<NodeFile>,FileListFromTaskHeaders>> listFromTaskNextWithServiceResponseAsync(String nextPageLink)
    parameters:
    - id: nextPageLink
      type: java.lang.String
      description: The NextLink from the previous successful call to List operation.
    return:
      type: rx.Observable<com.microsoft.rest.ServiceResponseWithHeaders<com.microsoft.azure.Page<com.microsoft.azure.batch.protocol.models.NodeFile>,com.microsoft.azure.batch.protocol.models.FileListFromTaskHeaders>>
      description: the observable to the PagedList&lt;NodeFile&gt; object
- uid: com.microsoft.azure.batch.protocol.Files.listFromTaskNextWithServiceResponseAsync(java.lang.String,com.microsoft.azure.batch.protocol.models.FileListFromTaskNextOptions)
  id: listFromTaskNextWithServiceResponseAsync(java.lang.String,com.microsoft.azure.batch.protocol.models.FileListFromTaskNextOptions)
  artifact: com.microsoft.azure:azure-batch:8.0.0
  parent: com.microsoft.azure.batch.protocol.Files
  langs:
  - java
  name: listFromTaskNextWithServiceResponseAsync(String nextPageLink, FileListFromTaskNextOptions fileListFromTaskNextOptions)
  nameWithType: Files.listFromTaskNextWithServiceResponseAsync(String nextPageLink, FileListFromTaskNextOptions fileListFromTaskNextOptions)
  fullName: com.microsoft.azure.batch.protocol.Files.listFromTaskNextWithServiceResponseAsync(String nextPageLink, FileListFromTaskNextOptions fileListFromTaskNextOptions)
  overload: com.microsoft.azure.batch.protocol.Files.listFromTaskNextWithServiceResponseAsync*
  type: Method
  package: com.microsoft.azure.batch.protocol
  summary: Lists the files in a Task's directory on its Compute Node.
  syntax:
    content: public abstract Observable<ServiceResponseWithHeaders<Page<NodeFile>,FileListFromTaskHeaders>> listFromTaskNextWithServiceResponseAsync(String nextPageLink, FileListFromTaskNextOptions fileListFromTaskNextOptions)
    parameters:
    - id: nextPageLink
      type: java.lang.String
      description: The NextLink from the previous successful call to List operation.
    - id: fileListFromTaskNextOptions
      type: com.microsoft.azure.batch.protocol.models.FileListFromTaskNextOptions
      description: Additional parameters for the operation
    return:
      type: rx.Observable<com.microsoft.rest.ServiceResponseWithHeaders<com.microsoft.azure.Page<com.microsoft.azure.batch.protocol.models.NodeFile>,com.microsoft.azure.batch.protocol.models.FileListFromTaskHeaders>>
      description: the observable to the PagedList&lt;NodeFile&gt; object
- uid: com.microsoft.azure.batch.protocol.Files.listFromTaskWithServiceResponseAsync(java.lang.String,java.lang.String)
  id: listFromTaskWithServiceResponseAsync(java.lang.String,java.lang.String)
  artifact: com.microsoft.azure:azure-batch:8.0.0
  parent: com.microsoft.azure.batch.protocol.Files
  langs:
  - java
  name: listFromTaskWithServiceResponseAsync(String jobId, String taskId)
  nameWithType: Files.listFromTaskWithServiceResponseAsync(String jobId, String taskId)
  fullName: com.microsoft.azure.batch.protocol.Files.listFromTaskWithServiceResponseAsync(String jobId, String taskId)
  overload: com.microsoft.azure.batch.protocol.Files.listFromTaskWithServiceResponseAsync*
  type: Method
  package: com.microsoft.azure.batch.protocol
  summary: Lists the files in a Task's directory on its Compute Node.
  syntax:
    content: public abstract Observable<ServiceResponseWithHeaders<Page<NodeFile>,FileListFromTaskHeaders>> listFromTaskWithServiceResponseAsync(String jobId, String taskId)
    parameters:
    - id: jobId
      type: java.lang.String
      description: The ID of the Job that contains the Task.
    - id: taskId
      type: java.lang.String
      description: The ID of the Task whose files you want to list.
    return:
      type: rx.Observable<com.microsoft.rest.ServiceResponseWithHeaders<com.microsoft.azure.Page<com.microsoft.azure.batch.protocol.models.NodeFile>,com.microsoft.azure.batch.protocol.models.FileListFromTaskHeaders>>
      description: the observable to the PagedList&lt;NodeFile&gt; object
- uid: com.microsoft.azure.batch.protocol.Files.listFromTaskWithServiceResponseAsync(java.lang.String,java.lang.String,java.lang.Boolean,com.microsoft.azure.batch.protocol.models.FileListFromTaskOptions)
  id: listFromTaskWithServiceResponseAsync(java.lang.String,java.lang.String,java.lang.Boolean,com.microsoft.azure.batch.protocol.models.FileListFromTaskOptions)
  artifact: com.microsoft.azure:azure-batch:8.0.0
  parent: com.microsoft.azure.batch.protocol.Files
  langs:
  - java
  name: listFromTaskWithServiceResponseAsync(String jobId, String taskId, Boolean recursive, FileListFromTaskOptions fileListFromTaskOptions)
  nameWithType: Files.listFromTaskWithServiceResponseAsync(String jobId, String taskId, Boolean recursive, FileListFromTaskOptions fileListFromTaskOptions)
  fullName: com.microsoft.azure.batch.protocol.Files.listFromTaskWithServiceResponseAsync(String jobId, String taskId, Boolean recursive, FileListFromTaskOptions fileListFromTaskOptions)
  overload: com.microsoft.azure.batch.protocol.Files.listFromTaskWithServiceResponseAsync*
  type: Method
  package: com.microsoft.azure.batch.protocol
  summary: Lists the files in a Task's directory on its Compute Node.
  syntax:
    content: public abstract Observable<ServiceResponseWithHeaders<Page<NodeFile>,FileListFromTaskHeaders>> listFromTaskWithServiceResponseAsync(String jobId, String taskId, Boolean recursive, FileListFromTaskOptions fileListFromTaskOptions)
    parameters:
    - id: jobId
      type: java.lang.String
      description: The ID of the Job that contains the Task.
    - id: taskId
      type: java.lang.String
      description: The ID of the Task whose files you want to list.
    - id: recursive
      type: java.lang.Boolean
      description: Whether to list children of the Task directory. This parameter can be used in combination with the filter parameter to list specific type of files.
    - id: fileListFromTaskOptions
      type: com.microsoft.azure.batch.protocol.models.FileListFromTaskOptions
      description: Additional parameters for the operation
    return:
      type: rx.Observable<com.microsoft.rest.ServiceResponseWithHeaders<com.microsoft.azure.Page<com.microsoft.azure.batch.protocol.models.NodeFile>,com.microsoft.azure.batch.protocol.models.FileListFromTaskHeaders>>
      description: the observable to the PagedList&lt;NodeFile&gt; object
references:
- uid: java.lang.String
  spec.java:
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
- uid: java.io.OutputStream
  spec.java:
  - uid: java.io.OutputStream
    name: OutputStream
    fullName: java.io.OutputStream
- uid: com.microsoft.azure.batch.protocol.Files.getFromTask*
  name: getFromTask
  nameWithType: Files.getFromTask
  fullName: com.microsoft.azure.batch.protocol.Files.getFromTask
  package: com.microsoft.azure.batch.protocol
- uid: com.microsoft.azure.batch.protocol.models.FileGetFromTaskOptions
  name: FileGetFromTaskOptions
  nameWithType: FileGetFromTaskOptions
  fullName: com.microsoft.azure.batch.protocol.models.FileGetFromTaskOptions
- uid: com.microsoft.azure.batch.protocol.Files.getFromComputeNode*
  name: getFromComputeNode
  nameWithType: Files.getFromComputeNode
  fullName: com.microsoft.azure.batch.protocol.Files.getFromComputeNode
  package: com.microsoft.azure.batch.protocol
- uid: com.microsoft.azure.batch.protocol.models.FileGetFromComputeNodeOptions
  name: FileGetFromComputeNodeOptions
  nameWithType: FileGetFromComputeNodeOptions
  fullName: com.microsoft.azure.batch.protocol.models.FileGetFromComputeNodeOptions
- uid: com.microsoft.azure.batch.protocol.Files.deleteFromTask*
  name: deleteFromTask
  nameWithType: Files.deleteFromTask
  fullName: com.microsoft.azure.batch.protocol.Files.deleteFromTask
  package: com.microsoft.azure.batch.protocol
- uid: com.microsoft.rest.ServiceCallback<java.lang.Void>
  spec.java:
  - uid: com.microsoft.rest.ServiceCallback
    name: ServiceCallback
    fullName: com.microsoft.rest.ServiceCallback
  - name: <
    fullName: <
  - uid: java.lang.Void
    name: Void
    fullName: java.lang.Void
  - name: '>'
    fullName: '>'
- uid: com.microsoft.rest.ServiceFuture<java.lang.Void>
  spec.java:
  - uid: com.microsoft.rest.ServiceFuture
    name: ServiceFuture
    fullName: com.microsoft.rest.ServiceFuture
  - name: <
    fullName: <
  - uid: java.lang.Void
    name: Void
    fullName: java.lang.Void
  - name: '>'
    fullName: '>'
- uid: com.microsoft.azure.batch.protocol.Files.deleteFromTaskAsync*
  name: deleteFromTaskAsync
  nameWithType: Files.deleteFromTaskAsync
  fullName: com.microsoft.azure.batch.protocol.Files.deleteFromTaskAsync
  package: com.microsoft.azure.batch.protocol
- uid: rx.Observable<java.lang.Void>
  spec.java:
  - uid: rx.Observable
    name: Observable
    fullName: rx.Observable
  - name: <
    fullName: <
  - uid: java.lang.Void
    name: Void
    fullName: java.lang.Void
  - name: '>'
    fullName: '>'
- uid: rx.Observable<com.microsoft.rest.ServiceResponseWithHeaders<java.lang.Void,com.microsoft.azure.batch.protocol.models.FileDeleteFromTaskHeaders>>
  spec.java:
  - uid: rx.Observable
    name: Observable
    fullName: rx.Observable
  - name: <
    fullName: <
  - uid: com.microsoft.rest.ServiceResponseWithHeaders
    name: ServiceResponseWithHeaders
    fullName: com.microsoft.rest.ServiceResponseWithHeaders
  - name: <
    fullName: <
  - uid: java.lang.Void
    name: Void
    fullName: java.lang.Void
  - name: ','
    fullName: ','
  - uid: com.microsoft.azure.batch.protocol.models.FileDeleteFromTaskHeaders
    name: FileDeleteFromTaskHeaders
    fullName: com.microsoft.azure.batch.protocol.models.FileDeleteFromTaskHeaders
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
- uid: com.microsoft.azure.batch.protocol.Files.deleteFromTaskWithServiceResponseAsync*
  name: deleteFromTaskWithServiceResponseAsync
  nameWithType: Files.deleteFromTaskWithServiceResponseAsync
  fullName: com.microsoft.azure.batch.protocol.Files.deleteFromTaskWithServiceResponseAsync
  package: com.microsoft.azure.batch.protocol
- uid: java.lang.Boolean
  spec.java:
  - uid: java.lang.Boolean
    name: Boolean
    fullName: java.lang.Boolean
- uid: com.microsoft.azure.batch.protocol.models.FileDeleteFromTaskOptions
  name: FileDeleteFromTaskOptions
  nameWithType: FileDeleteFromTaskOptions
  fullName: com.microsoft.azure.batch.protocol.models.FileDeleteFromTaskOptions
- uid: java.io.InputStream
  spec.java:
  - uid: java.io.InputStream
    name: InputStream
    fullName: java.io.InputStream
- uid: com.microsoft.rest.ServiceCallback<java.io.InputStream>
  spec.java:
  - uid: com.microsoft.rest.ServiceCallback
    name: ServiceCallback
    fullName: com.microsoft.rest.ServiceCallback
  - name: <
    fullName: <
  - uid: java.io.InputStream
    name: InputStream
    fullName: java.io.InputStream
  - name: '>'
    fullName: '>'
- uid: com.microsoft.rest.ServiceFuture<java.io.InputStream>
  spec.java:
  - uid: com.microsoft.rest.ServiceFuture
    name: ServiceFuture
    fullName: com.microsoft.rest.ServiceFuture
  - name: <
    fullName: <
  - uid: java.io.InputStream
    name: InputStream
    fullName: java.io.InputStream
  - name: '>'
    fullName: '>'
- uid: com.microsoft.azure.batch.protocol.Files.getFromTaskAsync*
  name: getFromTaskAsync
  nameWithType: Files.getFromTaskAsync
  fullName: com.microsoft.azure.batch.protocol.Files.getFromTaskAsync
  package: com.microsoft.azure.batch.protocol
- uid: rx.Observable<java.io.InputStream>
  spec.java:
  - uid: rx.Observable
    name: Observable
    fullName: rx.Observable
  - name: <
    fullName: <
  - uid: java.io.InputStream
    name: InputStream
    fullName: java.io.InputStream
  - name: '>'
    fullName: '>'
- uid: rx.Observable<com.microsoft.rest.ServiceResponseWithHeaders<java.io.InputStream,com.microsoft.azure.batch.protocol.models.FileGetFromTaskHeaders>>
  spec.java:
  - uid: rx.Observable
    name: Observable
    fullName: rx.Observable
  - name: <
    fullName: <
  - uid: com.microsoft.rest.ServiceResponseWithHeaders
    name: ServiceResponseWithHeaders
    fullName: com.microsoft.rest.ServiceResponseWithHeaders
  - name: <
    fullName: <
  - uid: java.io.InputStream
    name: InputStream
    fullName: java.io.InputStream
  - name: ','
    fullName: ','
  - uid: com.microsoft.azure.batch.protocol.models.FileGetFromTaskHeaders
    name: FileGetFromTaskHeaders
    fullName: com.microsoft.azure.batch.protocol.models.FileGetFromTaskHeaders
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
- uid: com.microsoft.azure.batch.protocol.Files.getFromTaskWithServiceResponseAsync*
  name: getFromTaskWithServiceResponseAsync
  nameWithType: Files.getFromTaskWithServiceResponseAsync
  fullName: com.microsoft.azure.batch.protocol.Files.getFromTaskWithServiceResponseAsync
  package: com.microsoft.azure.batch.protocol
- uid: com.microsoft.azure.batch.protocol.Files.getPropertiesFromTask*
  name: getPropertiesFromTask
  nameWithType: Files.getPropertiesFromTask
  fullName: com.microsoft.azure.batch.protocol.Files.getPropertiesFromTask
  package: com.microsoft.azure.batch.protocol
- uid: com.microsoft.azure.batch.protocol.Files.getPropertiesFromTaskAsync*
  name: getPropertiesFromTaskAsync
  nameWithType: Files.getPropertiesFromTaskAsync
  fullName: com.microsoft.azure.batch.protocol.Files.getPropertiesFromTaskAsync
  package: com.microsoft.azure.batch.protocol
- uid: rx.Observable<com.microsoft.rest.ServiceResponseWithHeaders<java.lang.Void,com.microsoft.azure.batch.protocol.models.FileGetPropertiesFromTaskHeaders>>
  spec.java:
  - uid: rx.Observable
    name: Observable
    fullName: rx.Observable
  - name: <
    fullName: <
  - uid: com.microsoft.rest.ServiceResponseWithHeaders
    name: ServiceResponseWithHeaders
    fullName: com.microsoft.rest.ServiceResponseWithHeaders
  - name: <
    fullName: <
  - uid: java.lang.Void
    name: Void
    fullName: java.lang.Void
  - name: ','
    fullName: ','
  - uid: com.microsoft.azure.batch.protocol.models.FileGetPropertiesFromTaskHeaders
    name: FileGetPropertiesFromTaskHeaders
    fullName: com.microsoft.azure.batch.protocol.models.FileGetPropertiesFromTaskHeaders
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
- uid: com.microsoft.azure.batch.protocol.Files.getPropertiesFromTaskWithServiceResponseAsync*
  name: getPropertiesFromTaskWithServiceResponseAsync
  nameWithType: Files.getPropertiesFromTaskWithServiceResponseAsync
  fullName: com.microsoft.azure.batch.protocol.Files.getPropertiesFromTaskWithServiceResponseAsync
  package: com.microsoft.azure.batch.protocol
- uid: com.microsoft.azure.batch.protocol.models.FileGetPropertiesFromTaskOptions
  name: FileGetPropertiesFromTaskOptions
  nameWithType: FileGetPropertiesFromTaskOptions
  fullName: com.microsoft.azure.batch.protocol.models.FileGetPropertiesFromTaskOptions
- uid: com.microsoft.azure.batch.protocol.Files.deleteFromComputeNode*
  name: deleteFromComputeNode
  nameWithType: Files.deleteFromComputeNode
  fullName: com.microsoft.azure.batch.protocol.Files.deleteFromComputeNode
  package: com.microsoft.azure.batch.protocol
- uid: com.microsoft.azure.batch.protocol.Files.deleteFromComputeNodeAsync*
  name: deleteFromComputeNodeAsync
  nameWithType: Files.deleteFromComputeNodeAsync
  fullName: com.microsoft.azure.batch.protocol.Files.deleteFromComputeNodeAsync
  package: com.microsoft.azure.batch.protocol
- uid: rx.Observable<com.microsoft.rest.ServiceResponseWithHeaders<java.lang.Void,com.microsoft.azure.batch.protocol.models.FileDeleteFromComputeNodeHeaders>>
  spec.java:
  - uid: rx.Observable
    name: Observable
    fullName: rx.Observable
  - name: <
    fullName: <
  - uid: com.microsoft.rest.ServiceResponseWithHeaders
    name: ServiceResponseWithHeaders
    fullName: com.microsoft.rest.ServiceResponseWithHeaders
  - name: <
    fullName: <
  - uid: java.lang.Void
    name: Void
    fullName: java.lang.Void
  - name: ','
    fullName: ','
  - uid: com.microsoft.azure.batch.protocol.models.FileDeleteFromComputeNodeHeaders
    name: FileDeleteFromComputeNodeHeaders
    fullName: com.microsoft.azure.batch.protocol.models.FileDeleteFromComputeNodeHeaders
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
- uid: com.microsoft.azure.batch.protocol.Files.deleteFromComputeNodeWithServiceResponseAsync*
  name: deleteFromComputeNodeWithServiceResponseAsync
  nameWithType: Files.deleteFromComputeNodeWithServiceResponseAsync
  fullName: com.microsoft.azure.batch.protocol.Files.deleteFromComputeNodeWithServiceResponseAsync
  package: com.microsoft.azure.batch.protocol
- uid: com.microsoft.azure.batch.protocol.models.FileDeleteFromComputeNodeOptions
  name: FileDeleteFromComputeNodeOptions
  nameWithType: FileDeleteFromComputeNodeOptions
  fullName: com.microsoft.azure.batch.protocol.models.FileDeleteFromComputeNodeOptions
- uid: com.microsoft.azure.batch.protocol.Files.getFromComputeNodeAsync*
  name: getFromComputeNodeAsync
  nameWithType: Files.getFromComputeNodeAsync
  fullName: com.microsoft.azure.batch.protocol.Files.getFromComputeNodeAsync
  package: com.microsoft.azure.batch.protocol
- uid: rx.Observable<com.microsoft.rest.ServiceResponseWithHeaders<java.io.InputStream,com.microsoft.azure.batch.protocol.models.FileGetFromComputeNodeHeaders>>
  spec.java:
  - uid: rx.Observable
    name: Observable
    fullName: rx.Observable
  - name: <
    fullName: <
  - uid: com.microsoft.rest.ServiceResponseWithHeaders
    name: ServiceResponseWithHeaders
    fullName: com.microsoft.rest.ServiceResponseWithHeaders
  - name: <
    fullName: <
  - uid: java.io.InputStream
    name: InputStream
    fullName: java.io.InputStream
  - name: ','
    fullName: ','
  - uid: com.microsoft.azure.batch.protocol.models.FileGetFromComputeNodeHeaders
    name: FileGetFromComputeNodeHeaders
    fullName: com.microsoft.azure.batch.protocol.models.FileGetFromComputeNodeHeaders
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
- uid: com.microsoft.azure.batch.protocol.Files.getFromComputeNodeWithServiceResponseAsync*
  name: getFromComputeNodeWithServiceResponseAsync
  nameWithType: Files.getFromComputeNodeWithServiceResponseAsync
  fullName: com.microsoft.azure.batch.protocol.Files.getFromComputeNodeWithServiceResponseAsync
  package: com.microsoft.azure.batch.protocol
- uid: com.microsoft.azure.batch.protocol.Files.getPropertiesFromComputeNode*
  name: getPropertiesFromComputeNode
  nameWithType: Files.getPropertiesFromComputeNode
  fullName: com.microsoft.azure.batch.protocol.Files.getPropertiesFromComputeNode
  package: com.microsoft.azure.batch.protocol
- uid: com.microsoft.azure.batch.protocol.Files.getPropertiesFromComputeNodeAsync*
  name: getPropertiesFromComputeNodeAsync
  nameWithType: Files.getPropertiesFromComputeNodeAsync
  fullName: com.microsoft.azure.batch.protocol.Files.getPropertiesFromComputeNodeAsync
  package: com.microsoft.azure.batch.protocol
- uid: rx.Observable<com.microsoft.rest.ServiceResponseWithHeaders<java.lang.Void,com.microsoft.azure.batch.protocol.models.FileGetPropertiesFromComputeNodeHeaders>>
  spec.java:
  - uid: rx.Observable
    name: Observable
    fullName: rx.Observable
  - name: <
    fullName: <
  - uid: com.microsoft.rest.ServiceResponseWithHeaders
    name: ServiceResponseWithHeaders
    fullName: com.microsoft.rest.ServiceResponseWithHeaders
  - name: <
    fullName: <
  - uid: java.lang.Void
    name: Void
    fullName: java.lang.Void
  - name: ','
    fullName: ','
  - uid: com.microsoft.azure.batch.protocol.models.FileGetPropertiesFromComputeNodeHeaders
    name: FileGetPropertiesFromComputeNodeHeaders
    fullName: com.microsoft.azure.batch.protocol.models.FileGetPropertiesFromComputeNodeHeaders
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
- uid: com.microsoft.azure.batch.protocol.Files.getPropertiesFromComputeNodeWithServiceResponseAsync*
  name: getPropertiesFromComputeNodeWithServiceResponseAsync
  nameWithType: Files.getPropertiesFromComputeNodeWithServiceResponseAsync
  fullName: com.microsoft.azure.batch.protocol.Files.getPropertiesFromComputeNodeWithServiceResponseAsync
  package: com.microsoft.azure.batch.protocol
- uid: com.microsoft.azure.batch.protocol.models.FileGetPropertiesFromComputeNodeOptions
  name: FileGetPropertiesFromComputeNodeOptions
  nameWithType: FileGetPropertiesFromComputeNodeOptions
  fullName: com.microsoft.azure.batch.protocol.models.FileGetPropertiesFromComputeNodeOptions
- uid: com.microsoft.azure.PagedList<com.microsoft.azure.batch.protocol.models.NodeFile>
  spec.java:
  - uid: com.microsoft.azure.PagedList
    name: PagedList
    fullName: com.microsoft.azure.PagedList
  - name: <
    fullName: <
  - uid: com.microsoft.azure.batch.protocol.models.NodeFile
    name: NodeFile
    fullName: com.microsoft.azure.batch.protocol.models.NodeFile
  - name: '>'
    fullName: '>'
- uid: com.microsoft.azure.batch.protocol.Files.listFromTask*
  name: listFromTask
  nameWithType: Files.listFromTask
  fullName: com.microsoft.azure.batch.protocol.Files.listFromTask
  package: com.microsoft.azure.batch.protocol
- uid: com.microsoft.azure.ListOperationCallback<com.microsoft.azure.batch.protocol.models.NodeFile>
  spec.java:
  - uid: com.microsoft.azure.ListOperationCallback
    name: ListOperationCallback
    fullName: com.microsoft.azure.ListOperationCallback
  - name: <
    fullName: <
  - uid: com.microsoft.azure.batch.protocol.models.NodeFile
    name: NodeFile
    fullName: com.microsoft.azure.batch.protocol.models.NodeFile
  - name: '>'
    fullName: '>'
- uid: com.microsoft.rest.ServiceFuture<java.util.List<com.microsoft.azure.batch.protocol.models.NodeFile>>
  spec.java:
  - uid: com.microsoft.rest.ServiceFuture
    name: ServiceFuture
    fullName: com.microsoft.rest.ServiceFuture
  - name: <
    fullName: <
  - uid: java.util.List
    name: List
    fullName: java.util.List
  - name: <
    fullName: <
  - uid: com.microsoft.azure.batch.protocol.models.NodeFile
    name: NodeFile
    fullName: com.microsoft.azure.batch.protocol.models.NodeFile
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
- uid: com.microsoft.azure.batch.protocol.Files.listFromTaskAsync*
  name: listFromTaskAsync
  nameWithType: Files.listFromTaskAsync
  fullName: com.microsoft.azure.batch.protocol.Files.listFromTaskAsync
  package: com.microsoft.azure.batch.protocol
- uid: rx.Observable<com.microsoft.azure.Page<com.microsoft.azure.batch.protocol.models.NodeFile>>
  spec.java:
  - uid: rx.Observable
    name: Observable
    fullName: rx.Observable
  - name: <
    fullName: <
  - uid: com.microsoft.azure.Page
    name: Page
    fullName: com.microsoft.azure.Page
  - name: <
    fullName: <
  - uid: com.microsoft.azure.batch.protocol.models.NodeFile
    name: NodeFile
    fullName: com.microsoft.azure.batch.protocol.models.NodeFile
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
- uid: rx.Observable<com.microsoft.rest.ServiceResponseWithHeaders<com.microsoft.azure.Page<com.microsoft.azure.batch.protocol.models.NodeFile>,com.microsoft.azure.batch.protocol.models.FileListFromTaskHeaders>>
  spec.java:
  - uid: rx.Observable
    name: Observable
    fullName: rx.Observable
  - name: <
    fullName: <
  - uid: com.microsoft.rest.ServiceResponseWithHeaders
    name: ServiceResponseWithHeaders
    fullName: com.microsoft.rest.ServiceResponseWithHeaders
  - name: <
    fullName: <
  - uid: com.microsoft.azure.Page
    name: Page
    fullName: com.microsoft.azure.Page
  - name: <
    fullName: <
  - uid: com.microsoft.azure.batch.protocol.models.NodeFile
    name: NodeFile
    fullName: com.microsoft.azure.batch.protocol.models.NodeFile
  - name: '>'
    fullName: '>'
  - name: ','
    fullName: ','
  - uid: com.microsoft.azure.batch.protocol.models.FileListFromTaskHeaders
    name: FileListFromTaskHeaders
    fullName: com.microsoft.azure.batch.protocol.models.FileListFromTaskHeaders
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
- uid: com.microsoft.azure.batch.protocol.Files.listFromTaskWithServiceResponseAsync*
  name: listFromTaskWithServiceResponseAsync
  nameWithType: Files.listFromTaskWithServiceResponseAsync
  fullName: com.microsoft.azure.batch.protocol.Files.listFromTaskWithServiceResponseAsync
  package: com.microsoft.azure.batch.protocol
- uid: com.microsoft.azure.batch.protocol.models.FileListFromTaskOptions
  name: FileListFromTaskOptions
  nameWithType: FileListFromTaskOptions
  fullName: com.microsoft.azure.batch.protocol.models.FileListFromTaskOptions
- uid: com.microsoft.azure.batch.protocol.Files.listFromComputeNode*
  name: listFromComputeNode
  nameWithType: Files.listFromComputeNode
  fullName: com.microsoft.azure.batch.protocol.Files.listFromComputeNode
  package: com.microsoft.azure.batch.protocol
- uid: com.microsoft.azure.batch.protocol.Files.listFromComputeNodeAsync*
  name: listFromComputeNodeAsync
  nameWithType: Files.listFromComputeNodeAsync
  fullName: com.microsoft.azure.batch.protocol.Files.listFromComputeNodeAsync
  package: com.microsoft.azure.batch.protocol
- uid: rx.Observable<com.microsoft.rest.ServiceResponseWithHeaders<com.microsoft.azure.Page<com.microsoft.azure.batch.protocol.models.NodeFile>,com.microsoft.azure.batch.protocol.models.FileListFromComputeNodeHeaders>>
  spec.java:
  - uid: rx.Observable
    name: Observable
    fullName: rx.Observable
  - name: <
    fullName: <
  - uid: com.microsoft.rest.ServiceResponseWithHeaders
    name: ServiceResponseWithHeaders
    fullName: com.microsoft.rest.ServiceResponseWithHeaders
  - name: <
    fullName: <
  - uid: com.microsoft.azure.Page
    name: Page
    fullName: com.microsoft.azure.Page
  - name: <
    fullName: <
  - uid: com.microsoft.azure.batch.protocol.models.NodeFile
    name: NodeFile
    fullName: com.microsoft.azure.batch.protocol.models.NodeFile
  - name: '>'
    fullName: '>'
  - name: ','
    fullName: ','
  - uid: com.microsoft.azure.batch.protocol.models.FileListFromComputeNodeHeaders
    name: FileListFromComputeNodeHeaders
    fullName: com.microsoft.azure.batch.protocol.models.FileListFromComputeNodeHeaders
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
- uid: com.microsoft.azure.batch.protocol.Files.listFromComputeNodeWithServiceResponseAsync*
  name: listFromComputeNodeWithServiceResponseAsync
  nameWithType: Files.listFromComputeNodeWithServiceResponseAsync
  fullName: com.microsoft.azure.batch.protocol.Files.listFromComputeNodeWithServiceResponseAsync
  package: com.microsoft.azure.batch.protocol
- uid: com.microsoft.azure.batch.protocol.models.FileListFromComputeNodeOptions
  name: FileListFromComputeNodeOptions
  nameWithType: FileListFromComputeNodeOptions
  fullName: com.microsoft.azure.batch.protocol.models.FileListFromComputeNodeOptions
- uid: com.microsoft.azure.batch.protocol.Files.listFromTaskNext*
  name: listFromTaskNext
  nameWithType: Files.listFromTaskNext
  fullName: com.microsoft.azure.batch.protocol.Files.listFromTaskNext
  package: com.microsoft.azure.batch.protocol
- uid: com.microsoft.azure.batch.protocol.Files.listFromTaskNextAsync*
  name: listFromTaskNextAsync
  nameWithType: Files.listFromTaskNextAsync
  fullName: com.microsoft.azure.batch.protocol.Files.listFromTaskNextAsync
  package: com.microsoft.azure.batch.protocol
- uid: com.microsoft.azure.batch.protocol.Files.listFromTaskNextWithServiceResponseAsync*
  name: listFromTaskNextWithServiceResponseAsync
  nameWithType: Files.listFromTaskNextWithServiceResponseAsync
  fullName: com.microsoft.azure.batch.protocol.Files.listFromTaskNextWithServiceResponseAsync
  package: com.microsoft.azure.batch.protocol
- uid: com.microsoft.azure.batch.protocol.models.FileListFromTaskNextOptions
  name: FileListFromTaskNextOptions
  nameWithType: FileListFromTaskNextOptions
  fullName: com.microsoft.azure.batch.protocol.models.FileListFromTaskNextOptions
- uid: com.microsoft.azure.batch.protocol.Files.listFromComputeNodeNext*
  name: listFromComputeNodeNext
  nameWithType: Files.listFromComputeNodeNext
  fullName: com.microsoft.azure.batch.protocol.Files.listFromComputeNodeNext
  package: com.microsoft.azure.batch.protocol
- uid: com.microsoft.azure.batch.protocol.Files.listFromComputeNodeNextAsync*
  name: listFromComputeNodeNextAsync
  nameWithType: Files.listFromComputeNodeNextAsync
  fullName: com.microsoft.azure.batch.protocol.Files.listFromComputeNodeNextAsync
  package: com.microsoft.azure.batch.protocol
- uid: com.microsoft.azure.batch.protocol.Files.listFromComputeNodeNextWithServiceResponseAsync*
  name: listFromComputeNodeNextWithServiceResponseAsync
  nameWithType: Files.listFromComputeNodeNextWithServiceResponseAsync
  fullName: com.microsoft.azure.batch.protocol.Files.listFromComputeNodeNextWithServiceResponseAsync
  package: com.microsoft.azure.batch.protocol
- uid: com.microsoft.azure.batch.protocol.models.FileListFromComputeNodeNextOptions
  name: FileListFromComputeNodeNextOptions
  nameWithType: FileListFromComputeNodeNextOptions
  fullName: com.microsoft.azure.batch.protocol.models.FileListFromComputeNodeNextOptions
- uid: java.lang.Void
  name: Void
  nameWithType: Void
  fullName: java.lang.Void
- uid: com.microsoft.rest.ServiceCallback
  name: ServiceCallback
  nameWithType: ServiceCallback
  fullName: com.microsoft.rest.ServiceCallback
- uid: com.microsoft.rest.ServiceFuture
  name: ServiceFuture
  nameWithType: ServiceFuture
  fullName: com.microsoft.rest.ServiceFuture
- uid: rx.Observable
  name: Observable
  nameWithType: Observable
  fullName: rx.Observable
- uid: com.microsoft.rest.ServiceResponseWithHeaders
  name: ServiceResponseWithHeaders
  nameWithType: ServiceResponseWithHeaders
  fullName: com.microsoft.rest.ServiceResponseWithHeaders
- uid: java.lang.Void,com.microsoft.azure.batch.protocol.models.FileDeleteFromTaskHeaders
  name: Void,FileDeleteFromTaskHeaders
  nameWithType: Void,FileDeleteFromTaskHeaders
  fullName: java.lang.Void,com.microsoft.azure.batch.protocol.models.FileDeleteFromTaskHeaders
- uid: java.io.InputStream,com.microsoft.azure.batch.protocol.models.FileGetFromTaskHeaders
  name: InputStream,FileGetFromTaskHeaders
  nameWithType: InputStream,FileGetFromTaskHeaders
  fullName: java.io.InputStream,com.microsoft.azure.batch.protocol.models.FileGetFromTaskHeaders
- uid: java.lang.Void,com.microsoft.azure.batch.protocol.models.FileGetPropertiesFromTaskHeaders
  name: Void,FileGetPropertiesFromTaskHeaders
  nameWithType: Void,FileGetPropertiesFromTaskHeaders
  fullName: java.lang.Void,com.microsoft.azure.batch.protocol.models.FileGetPropertiesFromTaskHeaders
- uid: java.lang.Void,com.microsoft.azure.batch.protocol.models.FileDeleteFromComputeNodeHeaders
  name: Void,FileDeleteFromComputeNodeHeaders
  nameWithType: Void,FileDeleteFromComputeNodeHeaders
  fullName: java.lang.Void,com.microsoft.azure.batch.protocol.models.FileDeleteFromComputeNodeHeaders
- uid: java.io.InputStream,com.microsoft.azure.batch.protocol.models.FileGetFromComputeNodeHeaders
  name: InputStream,FileGetFromComputeNodeHeaders
  nameWithType: InputStream,FileGetFromComputeNodeHeaders
  fullName: java.io.InputStream,com.microsoft.azure.batch.protocol.models.FileGetFromComputeNodeHeaders
- uid: java.lang.Void,com.microsoft.azure.batch.protocol.models.FileGetPropertiesFromComputeNodeHeaders
  name: Void,FileGetPropertiesFromComputeNodeHeaders
  nameWithType: Void,FileGetPropertiesFromComputeNodeHeaders
  fullName: java.lang.Void,com.microsoft.azure.batch.protocol.models.FileGetPropertiesFromComputeNodeHeaders
- uid: com.microsoft.azure.PagedList
  name: PagedList
  nameWithType: PagedList
  fullName: com.microsoft.azure.PagedList
- uid: com.microsoft.azure.batch.protocol.models.NodeFile
  name: NodeFile
  nameWithType: NodeFile
  fullName: com.microsoft.azure.batch.protocol.models.NodeFile
- uid: com.microsoft.azure.ListOperationCallback
  name: ListOperationCallback
  nameWithType: ListOperationCallback
  fullName: com.microsoft.azure.ListOperationCallback
- uid: java.util.List
  name: List
  nameWithType: List
  fullName: java.util.List
- uid: com.microsoft.azure.Page
  name: Page
  nameWithType: Page
  fullName: com.microsoft.azure.Page
- uid: com.microsoft.azure.batch.protocol.models.NodeFile>,com.microsoft.azure.batch.protocol.models.FileListFromTaskHeaders
  name: NodeFile>,FileListFromTaskHeaders
  nameWithType: NodeFile>,FileListFromTaskHeaders
  fullName: com.microsoft.azure.batch.protocol.models.NodeFile>,com.microsoft.azure.batch.protocol.models.FileListFromTaskHeaders
- uid: com.microsoft.azure.batch.protocol.models.NodeFile>,com.microsoft.azure.batch.protocol.models.FileListFromComputeNodeHeaders
  name: NodeFile>,FileListFromComputeNodeHeaders
  nameWithType: NodeFile>,FileListFromComputeNodeHeaders
  fullName: com.microsoft.azure.batch.protocol.models.NodeFile>,com.microsoft.azure.batch.protocol.models.FileListFromComputeNodeHeaders
