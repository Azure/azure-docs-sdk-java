### YamlMime:JavaType
uid: "com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwinDevice"
fullName: "com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwinDevice"
name: "DeviceTwinDevice"
nameWithType: "DeviceTwinDevice"
summary: "The DeviceTwinDevice class represent the twin on iotHub. implementing constructors and serialization functionality. If object is a representation of the module twin if and only if the moduleId is set."
inheritances:
- "<xref href=\"java.lang.Object?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
inheritedMembers:
- "java.lang.Object.clone()"
- "java.lang.Object.equals(java.lang.Object)"
- "java.lang.Object.finalize()"
- "java.lang.Object.getClass()"
- "java.lang.Object.hashCode()"
- "java.lang.Object.notify()"
- "java.lang.Object.notifyAll()"
- "java.lang.Object.toString()"
- "java.lang.Object.wait()"
- "java.lang.Object.wait(long)"
- "java.lang.Object.wait(long,int)"
syntax: "public class DeviceTwinDevice"
constructors:
- uid: "com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwinDevice.DeviceTwinDevice()"
  fullName: "com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwinDevice.DeviceTwinDevice()"
  name: "DeviceTwinDevice()"
  nameWithType: "DeviceTwinDevice.DeviceTwinDevice()"
  summary: "Constructor to create instance for a device"
  syntax: "public DeviceTwinDevice()"
- uid: "com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwinDevice.DeviceTwinDevice(java.lang.String)"
  fullName: "com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwinDevice.DeviceTwinDevice(String deviceId)"
  name: "DeviceTwinDevice(String deviceId)"
  nameWithType: "DeviceTwinDevice.DeviceTwinDevice(String deviceId)"
  summary: "Constructor to create instance for a device."
  parameters:
  - description: "Device ID for this device"
    name: "deviceId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public DeviceTwinDevice(String deviceId)"
  exceptions:
  - description: "This exception is thrown if the device id is null or empty"
    type: "<xref href=\"java.lang.IllegalArgumentException?alt=java.lang.IllegalArgumentException&text=IllegalArgumentException\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwinDevice.DeviceTwinDevice(java.lang.String,java.lang.String)"
  fullName: "com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwinDevice.DeviceTwinDevice(String deviceId, String moduleId)"
  name: "DeviceTwinDevice(String deviceId, String moduleId)"
  nameWithType: "DeviceTwinDevice.DeviceTwinDevice(String deviceId, String moduleId)"
  summary: "Constructor to create instance for a module."
  parameters:
  - description: "Device ID for the device which this module belongs to"
    name: "deviceId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Module ID for this module"
    name: "moduleId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public DeviceTwinDevice(String deviceId, String moduleId)"
  exceptions:
  - description: "This exception is thrown if the device id is null or empty"
    type: "<xref href=\"java.lang.IllegalArgumentException?alt=java.lang.IllegalArgumentException&text=IllegalArgumentException\" data-throw-if-not-resolved=\"False\" />"
methods:
- uid: "com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwinDevice.clearDesiredProperties()"
  fullName: "com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwinDevice.clearDesiredProperties()"
  name: "clearDesiredProperties()"
  nameWithType: "DeviceTwinDevice.clearDesiredProperties()"
  summary: "Clear desired properties set so far"
  syntax: "public void clearDesiredProperties()"
- uid: "com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwinDevice.clearTags()"
  fullName: "com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwinDevice.clearTags()"
  name: "clearTags()"
  nameWithType: "DeviceTwinDevice.clearTags()"
  summary: "Clear tags set so far"
  syntax: "public void clearTags()"
- uid: "com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwinDevice.clearTwin()"
  fullName: "com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwinDevice.clearTwin()"
  name: "clearTwin()"
  nameWithType: "DeviceTwinDevice.clearTwin()"
  summary: "Clear tags and desired properties set so far"
  syntax: "public void clearTwin()"
- uid: "com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwinDevice.desiredPropertiesToString()"
  fullName: "com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwinDevice.desiredPropertiesToString()"
  name: "desiredPropertiesToString()"
  nameWithType: "DeviceTwinDevice.desiredPropertiesToString()"
  summary: "String representation for this device containing desired properties"
  syntax: "public String desiredPropertiesToString()"
  returns:
    description: "String representation for this device desired properties"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwinDevice.getCapabilities()"
  fullName: "com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwinDevice.getCapabilities()"
  name: "getCapabilities()"
  nameWithType: "DeviceTwinDevice.getCapabilities()"
  summary: "Getter for capabilities"
  syntax: "public DeviceCapabilities getCapabilities()"
  returns:
    description: "the value of the capabilities. It can be <code>null</code>."
    type: "<xref href=\"com.microsoft.azure.sdk.iot.deps.twin.DeviceCapabilities?alt=com.microsoft.azure.sdk.iot.deps.twin.DeviceCapabilities&text=DeviceCapabilities\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwinDevice.getConfigurations()"
  fullName: "com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwinDevice.getConfigurations()"
  name: "getConfigurations()"
  nameWithType: "DeviceTwinDevice.getConfigurations()"
  summary: "Getter for the configuration properties"
  syntax: "public Map<String,ConfigurationInfo> getConfigurations()"
  returns:
    description: "the configuration properties. It can be <code>null</code>."
    type: "<xref href=\"java.util.Map?alt=java.util.Map&text=Map\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />,<xref href=\"com.microsoft.azure.sdk.iot.deps.twin.ConfigurationInfo?alt=com.microsoft.azure.sdk.iot.deps.twin.ConfigurationInfo&text=ConfigurationInfo\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwinDevice.getConnectionState()"
  fullName: "com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwinDevice.getConnectionState()"
  name: "getConnectionState()"
  nameWithType: "DeviceTwinDevice.getConnectionState()"
  syntax: "public String getConnectionState()"
  returns:
    description: "get the connection state as last reported by the service"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwinDevice.getDesiredMap()"
  fullName: "com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwinDevice.getDesiredMap()"
  name: "getDesiredMap()"
  nameWithType: "DeviceTwinDevice.getDesiredMap()"
  summary: "Getter for the desired properties"
  modifiers:
  - "protected"
  syntax: "protected TwinCollection getDesiredMap()"
  returns:
    description: "A map of validated key and value pairs for desired properties"
    type: "<xref href=\"com.microsoft.azure.sdk.iot.deps.twin.TwinCollection?alt=com.microsoft.azure.sdk.iot.deps.twin.TwinCollection&text=TwinCollection\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwinDevice.getDesiredProperties()"
  fullName: "com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwinDevice.getDesiredProperties()"
  name: "getDesiredProperties()"
  nameWithType: "DeviceTwinDevice.getDesiredProperties()"
  summary: "Getter to get Desired Properties set"
  syntax: "public Set<Pair> getDesiredProperties()"
  returns:
    description: "A set of desired property pairs."
    type: "<xref href=\"java.util.Set?alt=java.util.Set&text=Set\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.sdk.iot.service.devicetwin.Pair?alt=com.microsoft.azure.sdk.iot.service.devicetwin.Pair&text=Pair\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwinDevice.getDesiredPropertiesVersion()"
  fullName: "com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwinDevice.getDesiredPropertiesVersion()"
  name: "getDesiredPropertiesVersion()"
  nameWithType: "DeviceTwinDevice.getDesiredPropertiesVersion()"
  summary: "Getter for the desired properties version."
  syntax: "public Integer getDesiredPropertiesVersion()"
  returns:
    description: "The <code>Integer</code> with the Desired properties Collection version."
    type: "<xref href=\"java.lang.Integer?alt=java.lang.Integer&text=Integer\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwinDevice.getDeviceId()"
  fullName: "com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwinDevice.getDeviceId()"
  name: "getDeviceId()"
  nameWithType: "DeviceTwinDevice.getDeviceId()"
  summary: "Getter to get device ID"
  syntax: "public String getDeviceId()"
  returns:
    description: "device id for this device"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwinDevice.getETag()"
  fullName: "com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwinDevice.getETag()"
  name: "getETag()"
  nameWithType: "DeviceTwinDevice.getETag()"
  summary: "Getter for the eTag"
  syntax: "public String getETag()"
  returns:
    description: "the stored eTag. It will be <code>null</code> if not set."
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwinDevice.getModelId()"
  fullName: "com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwinDevice.getModelId()"
  name: "getModelId()"
  nameWithType: "DeviceTwinDevice.getModelId()"
  syntax: "public String getModelId()"
  returns:
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwinDevice.getModuleId()"
  fullName: "com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwinDevice.getModuleId()"
  name: "getModuleId()"
  nameWithType: "DeviceTwinDevice.getModuleId()"
  summary: "Getter to get module ID"
  syntax: "public String getModuleId()"
  returns:
    description: "device id for this device"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwinDevice.getReportedMap()"
  fullName: "com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwinDevice.getReportedMap()"
  name: "getReportedMap()"
  nameWithType: "DeviceTwinDevice.getReportedMap()"
  summary: "Getter for the reported properties"
  modifiers:
  - "protected"
  syntax: "protected TwinCollection getReportedMap()"
  returns:
    description: "A map of validated key and value pairs for reported properties"
    type: "<xref href=\"com.microsoft.azure.sdk.iot.deps.twin.TwinCollection?alt=com.microsoft.azure.sdk.iot.deps.twin.TwinCollection&text=TwinCollection\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwinDevice.getReportedProperties()"
  fullName: "com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwinDevice.getReportedProperties()"
  name: "getReportedProperties()"
  nameWithType: "DeviceTwinDevice.getReportedProperties()"
  summary: "Getter to get Reported Properties Set"
  syntax: "public Set<Pair> getReportedProperties()"
  returns:
    description: "A set of reported property pairs."
    type: "<xref href=\"java.util.Set?alt=java.util.Set&text=Set\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.sdk.iot.service.devicetwin.Pair?alt=com.microsoft.azure.sdk.iot.service.devicetwin.Pair&text=Pair\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwinDevice.getReportedPropertiesVersion()"
  fullName: "com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwinDevice.getReportedPropertiesVersion()"
  name: "getReportedPropertiesVersion()"
  nameWithType: "DeviceTwinDevice.getReportedPropertiesVersion()"
  summary: "Getter for the reported properties version."
  syntax: "public Integer getReportedPropertiesVersion()"
  returns:
    description: "The <code>Integer</code> with the Desired properties Collection version."
    type: "<xref href=\"java.lang.Integer?alt=java.lang.Integer&text=Integer\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwinDevice.getTags()"
  fullName: "com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwinDevice.getTags()"
  name: "getTags()"
  nameWithType: "DeviceTwinDevice.getTags()"
  summary: "Getter to get Tags Set"
  syntax: "public Set<Pair> getTags()"
  returns:
    description: "A set of tag key value pairs."
    type: "<xref href=\"java.util.Set?alt=java.util.Set&text=Set\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.sdk.iot.service.devicetwin.Pair?alt=com.microsoft.azure.sdk.iot.service.devicetwin.Pair&text=Pair\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwinDevice.getTagsMap()"
  fullName: "com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwinDevice.getTagsMap()"
  name: "getTagsMap()"
  nameWithType: "DeviceTwinDevice.getTagsMap()"
  summary: "Getter for the tags"
  modifiers:
  - "protected"
  syntax: "protected TwinCollection getTagsMap()"
  returns:
    description: "A map of validated key and value pairs for tag"
    type: "<xref href=\"com.microsoft.azure.sdk.iot.deps.twin.TwinCollection?alt=com.microsoft.azure.sdk.iot.deps.twin.TwinCollection&text=TwinCollection\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwinDevice.getTagsVersion()"
  fullName: "com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwinDevice.getTagsVersion()"
  name: "getTagsVersion()"
  nameWithType: "DeviceTwinDevice.getTagsVersion()"
  summary: "Getter for the tag version."
  syntax: "public Integer getTagsVersion()"
  returns:
    description: "The <code>Integer</code> with the Tags Collection version."
    type: "<xref href=\"java.lang.Integer?alt=java.lang.Integer&text=Integer\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwinDevice.getVersion()"
  fullName: "com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwinDevice.getVersion()"
  name: "getVersion()"
  nameWithType: "DeviceTwinDevice.getVersion()"
  summary: "Getter for the Twin version"
  syntax: "public Integer getVersion()"
  returns:
    description: "the stored version. It can be <code>null</code>."
    type: "<xref href=\"java.lang.Integer?alt=java.lang.Integer&text=Integer\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwinDevice.reportedPropertiesToString()"
  fullName: "com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwinDevice.reportedPropertiesToString()"
  name: "reportedPropertiesToString()"
  nameWithType: "DeviceTwinDevice.reportedPropertiesToString()"
  summary: "String representation for this device containing reported properties"
  syntax: "public String reportedPropertiesToString()"
  returns:
    description: "String representation for this device reported properties"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwinDevice.setCapabilities(com.microsoft.azure.sdk.iot.deps.twin.DeviceCapabilities)"
  fullName: "com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwinDevice.setCapabilities(DeviceCapabilities capabilities)"
  name: "setCapabilities(DeviceCapabilities capabilities)"
  nameWithType: "DeviceTwinDevice.setCapabilities(DeviceCapabilities capabilities)"
  summary: "Setter for capabilities"
  modifiers:
  - "protected"
  parameters:
  - description: "is the value of the capabilities"
    name: "capabilities"
    type: "<xref href=\"com.microsoft.azure.sdk.iot.deps.twin.DeviceCapabilities?alt=com.microsoft.azure.sdk.iot.deps.twin.DeviceCapabilities&text=DeviceCapabilities\" data-throw-if-not-resolved=\"False\" />"
  syntax: "protected void setCapabilities(DeviceCapabilities capabilities)"
- uid: "com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwinDevice.setConfigurations(java.util.Map<java.lang.String,com.microsoft.azure.sdk.iot.deps.twin.ConfigurationInfo>)"
  fullName: "com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwinDevice.setConfigurations(Map<String,ConfigurationInfo> configurations)"
  name: "setConfigurations(Map<String,ConfigurationInfo> configurations)"
  nameWithType: "DeviceTwinDevice.setConfigurations(Map<String,ConfigurationInfo> configurations)"
  summary: "Setter for the configuration properties"
  modifiers:
  - "protected"
  parameters:
  - description: "is the configuration properties."
    name: "configurations"
    type: "<xref href=\"java.util.Map?alt=java.util.Map&text=Map\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />,<xref href=\"com.microsoft.azure.sdk.iot.deps.twin.ConfigurationInfo?alt=com.microsoft.azure.sdk.iot.deps.twin.ConfigurationInfo&text=ConfigurationInfo\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "protected void setConfigurations(Map<String,ConfigurationInfo> configurations)"
- uid: "com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwinDevice.setConnectionState(java.lang.String)"
  fullName: "com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwinDevice.setConnectionState(String connectionState)"
  name: "setConnectionState(String connectionState)"
  nameWithType: "DeviceTwinDevice.setConnectionState(String connectionState)"
  summary: "Set the connection state of the device"
  modifiers:
  - "protected"
  parameters:
  - description: "the state to set"
    name: "connectionState"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "protected void setConnectionState(String connectionState)"
- uid: "com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwinDevice.setDesiredProperties(com.microsoft.azure.sdk.iot.deps.twin.TwinCollection)"
  fullName: "com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwinDevice.setDesiredProperties(TwinCollection desiredProperties)"
  name: "setDesiredProperties(TwinCollection desiredProperties)"
  nameWithType: "DeviceTwinDevice.setDesiredProperties(TwinCollection desiredProperties)"
  summary: "Setter for the desired properties"
  modifiers:
  - "protected"
  parameters:
  - description: "A map of validated key and value pairs for desired properties"
    name: "desiredProperties"
    type: "<xref href=\"com.microsoft.azure.sdk.iot.deps.twin.TwinCollection?alt=com.microsoft.azure.sdk.iot.deps.twin.TwinCollection&text=TwinCollection\" data-throw-if-not-resolved=\"False\" />"
  syntax: "protected void setDesiredProperties(TwinCollection desiredProperties)"
- uid: "com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwinDevice.setDesiredProperties(java.util.Set<com.microsoft.azure.sdk.iot.service.devicetwin.Pair>)"
  fullName: "com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwinDevice.setDesiredProperties(Set<Pair> desiredProperties)"
  name: "setDesiredProperties(Set<Pair> desiredProperties)"
  nameWithType: "DeviceTwinDevice.setDesiredProperties(Set<Pair> desiredProperties)"
  summary: "Setter for the desired properties"
  parameters:
  - description: "A set of key-value pairs for desired properties"
    name: "desiredProperties"
    type: "<xref href=\"java.util.Set?alt=java.util.Set&text=Set\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.sdk.iot.service.devicetwin.Pair?alt=com.microsoft.azure.sdk.iot.service.devicetwin.Pair&text=Pair\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public void setDesiredProperties(Set<Pair> desiredProperties)"
  exceptions:
  - description: "This exception is thrown if the set is null"
    type: "<xref href=\"java.lang.IllegalArgumentException?alt=java.lang.IllegalArgumentException&text=IllegalArgumentException\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwinDevice.setETag(java.lang.String)"
  fullName: "com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwinDevice.setETag(String eTag)"
  name: "setETag(String eTag)"
  nameWithType: "DeviceTwinDevice.setETag(String eTag)"
  summary: "Setter for ETag"
  parameters:
  - description: "is the value of the etag"
    name: "eTag"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public void setETag(String eTag)"
  exceptions:
  - description: "if the provided etag is null or empty"
    type: "<xref href=\"java.lang.IllegalArgumentException?alt=java.lang.IllegalArgumentException&text=IllegalArgumentException\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwinDevice.setModelId(java.lang.String)"
  fullName: "com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwinDevice.setModelId(String modelId)"
  name: "setModelId(String modelId)"
  nameWithType: "DeviceTwinDevice.setModelId(String modelId)"
  parameters:
  - name: "modelId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public void setModelId(String modelId)"
- uid: "com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwinDevice.setReportedProperties(com.microsoft.azure.sdk.iot.deps.twin.TwinCollection)"
  fullName: "com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwinDevice.setReportedProperties(TwinCollection reportedProperties)"
  name: "setReportedProperties(TwinCollection reportedProperties)"
  nameWithType: "DeviceTwinDevice.setReportedProperties(TwinCollection reportedProperties)"
  summary: "Setter for the reported properties"
  modifiers:
  - "protected"
  parameters:
  - description: "A map of validated key and value pairs for reported properties"
    name: "reportedProperties"
    type: "<xref href=\"com.microsoft.azure.sdk.iot.deps.twin.TwinCollection?alt=com.microsoft.azure.sdk.iot.deps.twin.TwinCollection&text=TwinCollection\" data-throw-if-not-resolved=\"False\" />"
  syntax: "protected void setReportedProperties(TwinCollection reportedProperties)"
- uid: "com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwinDevice.setTags(com.microsoft.azure.sdk.iot.deps.twin.TwinCollection)"
  fullName: "com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwinDevice.setTags(TwinCollection tag)"
  name: "setTags(TwinCollection tag)"
  nameWithType: "DeviceTwinDevice.setTags(TwinCollection tag)"
  summary: "Setter for the tags"
  modifiers:
  - "protected"
  parameters:
  - description: "A map of validated key and value pairs for tag"
    name: "tag"
    type: "<xref href=\"com.microsoft.azure.sdk.iot.deps.twin.TwinCollection?alt=com.microsoft.azure.sdk.iot.deps.twin.TwinCollection&text=TwinCollection\" data-throw-if-not-resolved=\"False\" />"
  syntax: "protected void setTags(TwinCollection tag)"
- uid: "com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwinDevice.setTags(java.util.Set<com.microsoft.azure.sdk.iot.service.devicetwin.Pair>)"
  fullName: "com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwinDevice.setTags(Set<Pair> tags)"
  name: "setTags(Set<Pair> tags)"
  nameWithType: "DeviceTwinDevice.setTags(Set<Pair> tags)"
  summary: "Setter for the tags"
  parameters:
  - description: "A set of tag key-value pairs"
    name: "tags"
    type: "<xref href=\"java.util.Set?alt=java.util.Set&text=Set\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.sdk.iot.service.devicetwin.Pair?alt=com.microsoft.azure.sdk.iot.service.devicetwin.Pair&text=Pair\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public void setTags(Set<Pair> tags)"
  exceptions:
  - description: "This exception is thrown if the set tags is null"
    type: "<xref href=\"java.lang.IllegalArgumentException?alt=java.lang.IllegalArgumentException&text=IllegalArgumentException\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwinDevice.tagsToString()"
  fullName: "com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwinDevice.tagsToString()"
  name: "tagsToString()"
  nameWithType: "DeviceTwinDevice.tagsToString()"
  summary: "String representation for this device containing tags"
  syntax: "public String tagsToString()"
  returns:
    description: "String representation for this device tags"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwinDevice.toString()"
  fullName: "com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwinDevice.toString()"
  name: "toString()"
  nameWithType: "DeviceTwinDevice.toString()"
  summary: "String representation for this device containing device id, tags, desired and reported properties"
  overridden: "java.lang.Object.toString()"
  syntax: "public String toString()"
  returns:
    description: "String representation for this device"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
type: "class"
metadata: {}
package: "com.microsoft.azure.sdk.iot.service.devicetwin"
artifact: com.microsoft.azure.sdk.iot:iot-service-client-preview:1.2.0
