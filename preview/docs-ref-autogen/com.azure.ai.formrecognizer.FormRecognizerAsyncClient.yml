### YamlMime:ManagedReference
items:
- uid: com.azure.ai.formrecognizer.FormRecognizerAsyncClient
  id: FormRecognizerAsyncClient
  artifact: com.azure:azure-ai-formrecognizer:1.0.0-beta.2
  parent: com.azure.ai.formrecognizer
  children:
  - com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeContent(reactor.core.publisher.Flux<java.nio.ByteBuffer>,long,com.azure.ai.formrecognizer.models.FormContentType)
  - com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeContent(reactor.core.publisher.Flux<java.nio.ByteBuffer>,long,com.azure.ai.formrecognizer.models.FormContentType,java.time.Duration)
  - com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeContentFromUrl(java.lang.String)
  - com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeContentFromUrl(java.lang.String,java.time.Duration)
  - com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeCustomForms(reactor.core.publisher.Flux<java.nio.ByteBuffer>,java.lang.String,long,com.azure.ai.formrecognizer.models.FormContentType)
  - com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeCustomForms(reactor.core.publisher.Flux<java.nio.ByteBuffer>,java.lang.String,long,com.azure.ai.formrecognizer.models.FormContentType,boolean,java.time.Duration)
  - com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeCustomFormsFromUrl(java.lang.String,java.lang.String)
  - com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeCustomFormsFromUrl(java.lang.String,java.lang.String,boolean,java.time.Duration)
  - com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeReceipts(reactor.core.publisher.Flux<java.nio.ByteBuffer>,long,com.azure.ai.formrecognizer.models.FormContentType)
  - com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeReceipts(reactor.core.publisher.Flux<java.nio.ByteBuffer>,long,com.azure.ai.formrecognizer.models.FormContentType,boolean,java.time.Duration)
  - com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeReceiptsFromUrl(java.lang.String)
  - com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeReceiptsFromUrl(java.lang.String,boolean,java.time.Duration)
  - com.azure.ai.formrecognizer.FormRecognizerAsyncClient.getFormTrainingAsyncClient()
  - com.azure.ai.formrecognizer.FormRecognizerAsyncClient.getServiceVersion()
  langs:
  - java
  name: FormRecognizerAsyncClient
  nameWithType: FormRecognizerAsyncClient
  fullName: com.azure.ai.formrecognizer.FormRecognizerAsyncClient
  type: Class
  package: com.azure.ai.formrecognizer
  summary: >-
    This class provides an asynchronous client that contains all the operations that apply to Azure Form Recognizer. Operations allowed by the client are recognizing receipt data from documents, extracting layout information and analyzing custom forms for predefined data.


    **Instantiating an asynchronous Form Recognizer Client**


    ```java

    FormRecognizerAsyncClient formRecognizerAsyncClient = new FormRecognizerClientBuilder()
         .credential(new AzureKeyCredential("{key}"))
         .endpoint("{endpoint}")
         .buildAsyncClient();
    ```
  syntax:
    content: public final class FormRecognizerAsyncClient
  inheritance:
  - java.lang.Object
  inheritedMembers:
  - java.lang.Object.clone()
  - java.lang.Object.equals(java.lang.Object)
  - java.lang.Object.finalize()
  - java.lang.Object.getClass()
  - java.lang.Object.hashCode()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.toString()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
- uid: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.FormRecognizerAsyncClient(com.azure.ai.formrecognizer.implementation.FormRecognizerClientImpl,com.azure.ai.formrecognizer.FormRecognizerServiceVersion)
  id: FormRecognizerAsyncClient(com.azure.ai.formrecognizer.implementation.FormRecognizerClientImpl,com.azure.ai.formrecognizer.FormRecognizerServiceVersion)
  artifact: com.azure:azure-ai-formrecognizer:1.0.0-beta.2
  parent: com.azure.ai.formrecognizer.FormRecognizerAsyncClient
  langs:
  - java
  name: FormRecognizerAsyncClient(FormRecognizerClientImpl service, FormRecognizerServiceVersion serviceVersion)
  nameWithType: FormRecognizerAsyncClient.FormRecognizerAsyncClient(FormRecognizerClientImpl service, FormRecognizerServiceVersion serviceVersion)
  fullName: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.FormRecognizerAsyncClient(FormRecognizerClientImpl service, FormRecognizerServiceVersion serviceVersion)
  overload: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.FormRecognizerAsyncClient*
  type: Constructor
  package: com.azure.ai.formrecognizer
  summary: Create a <xref uid="com.azure.ai.formrecognizer.FormRecognizerAsyncClient" data-throw-if-not-resolved="false">FormRecognizerAsyncClient</xref> that sends requests to the Form Recognizer services's endpoint. Each service call goes through the <xref uid="com.azure.ai.formrecognizer.FormRecognizerClientBuilder.pipeline(com.azure.core.http.HttpPipeline)" data-throw-if-not-resolved="false">FormRecognizerClientBuilder#pipeline(HttpPipeline)</xref> http pipeline\}.
  syntax:
    content: " FormRecognizerAsyncClient(FormRecognizerClientImpl service, FormRecognizerServiceVersion serviceVersion)"
    parameters:
    - id: service
      type: com.azure.ai.formrecognizer.implementation.FormRecognizerClientImpl
      description: The proxy service used to perform REST calls.
    - id: serviceVersion
      type: com.azure.ai.formrecognizer.FormRecognizerServiceVersion
      description: The versions of Azure Form Recognizer supported by this client library.
- uid: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeContent(reactor.core.publisher.Flux<java.nio.ByteBuffer>,long,com.azure.ai.formrecognizer.models.FormContentType)
  id: beginRecognizeContent(reactor.core.publisher.Flux<java.nio.ByteBuffer>,long,com.azure.ai.formrecognizer.models.FormContentType)
  artifact: com.azure:azure-ai-formrecognizer:1.0.0-beta.2
  parent: com.azure.ai.formrecognizer.FormRecognizerAsyncClient
  langs:
  - java
  name: beginRecognizeContent(Flux<ByteBuffer> data, long length, FormContentType formContentType)
  nameWithType: FormRecognizerAsyncClient.beginRecognizeContent(Flux<ByteBuffer> data, long length, FormContentType formContentType)
  fullName: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeContent(Flux<ByteBuffer> data, long length, FormContentType formContentType)
  overload: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeContent*
  type: Method
  package: com.azure.ai.formrecognizer
  summary: "Recognizes and extracts layout data using optical character recognition (OCR) and a prebuilt receipt trained model.\n\nThe service does not support cancellation of the long running operation and returns with an error message indicating absence of cancellation support.\n\nNote that the `data` passed must be replayable if retries are enabled (the default). In other words, the `Flux` must produce the same data each time it is subscribed to.\n\n**Code sample**\n\n```java\nFile sourceFile = new File(\"{file_source_url}\");\n Flux<ByteBuffer> buffer = toFluxByteBuffer(\n     new ByteArrayInputStream(Files.readAllBytes(sourceFile.toPath())));\n \n formRecognizerAsyncClient.beginRecognizeContent(buffer, sourceFile.length(), FormContentType.APPLICATION_PDF)\n     .subscribe(recognizePollingOperation ->\n         recognizePollingOperation.getFinalResult().subscribe(layoutPageResults ->\n             layoutPageResults.forEach(recognizedForm -> {\n                 System.out.printf(\"Page Angle: %s%n\", recognizedForm.getTextAngle());\n                 System.out.printf(\"Page Dimension unit: %s%n\", recognizedForm.getUnit());\n                 // Table information\n                 System.out.println(\"Recognized Tables: \");\n                 recognizedForm.getTables().forEach(formTable ->\n                     formTable.getCells().forEach(recognizedTableCell ->\n                         System.out.printf(\"%s \", recognizedTableCell.getText())));\n             })\n     ));\n```"
  syntax:
    content: public PollerFlux<OperationResult,IterableStream<FormPage>> beginRecognizeContent(Flux<ByteBuffer> data, long length, FormContentType formContentType)
    parameters:
    - id: data
      type: reactor.core.publisher.Flux<java.nio.ByteBuffer>
      description: The data of the document to be extract receipt information from.
    - id: length
      type: long
      description: The exact length of the data. Size of the file must be less than 50 MB.
    - id: formContentType
      type: com.azure.ai.formrecognizer.models.FormContentType
      description: Supported Media types including .pdf, .jpg, .png or .tiff type file stream.
    return:
      type: com.azure.core.util.polling.PollerFlux<com.azure.ai.formrecognizer.models.OperationResult,com.azure.core.util.IterableStream<com.azure.ai.formrecognizer.models.FormPage>>
      description: >-
        A <xref uid="com.azure.core.util.polling.PollerFlux" data-throw-if-not-resolved="false">PollerFlux</xref> that polls the extract receipt operation until it has completed, has failed, or has
         been cancelled.
- uid: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeContent(reactor.core.publisher.Flux<java.nio.ByteBuffer>,long,com.azure.ai.formrecognizer.models.FormContentType,java.time.Duration)
  id: beginRecognizeContent(reactor.core.publisher.Flux<java.nio.ByteBuffer>,long,com.azure.ai.formrecognizer.models.FormContentType,java.time.Duration)
  artifact: com.azure:azure-ai-formrecognizer:1.0.0-beta.2
  parent: com.azure.ai.formrecognizer.FormRecognizerAsyncClient
  langs:
  - java
  name: beginRecognizeContent(Flux<ByteBuffer> data, long length, FormContentType formContentType, Duration pollInterval)
  nameWithType: FormRecognizerAsyncClient.beginRecognizeContent(Flux<ByteBuffer> data, long length, FormContentType formContentType, Duration pollInterval)
  fullName: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeContent(Flux<ByteBuffer> data, long length, FormContentType formContentType, Duration pollInterval)
  overload: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeContent*
  type: Method
  package: com.azure.ai.formrecognizer
  summary: "Recognizes and extracts layout data using optical character recognition (OCR) and a prebuilt receipt trained model.\n\nThe service does not support cancellation of the long running operation and returns with an error message indicating absence of cancellation support.\n\nNote that the `data` passed must be replayable if retries are enabled (the default). In other words, the `Flux` must produce the same data each time it is subscribed to.\n\n**Code sample**\n\n```java\nFile sourceFile = new File(\"{file_source_url}\");\n Flux<ByteBuffer> buffer = toFluxByteBuffer(\n     new ByteArrayInputStream(Files.readAllBytes(sourceFile.toPath())));\n \n formRecognizerAsyncClient.beginRecognizeContent(buffer, sourceFile.length(), FormContentType.APPLICATION_PDF,\n         Duration.ofSeconds(5)).subscribe(recognizePollingOperation ->\n         recognizePollingOperation.getFinalResult().subscribe(layoutPageResults ->\n             layoutPageResults.forEach(recognizedForm -> {\n                 System.out.printf(\"Page Angle: %s%n\", recognizedForm.getTextAngle());\n                 System.out.printf(\"Page Dimension unit: %s%n\", recognizedForm.getUnit());\n                 // Table information\n                 System.out.println(\"Recognized Tables: \");\n                 recognizedForm.getTables().forEach(formTable ->\n                     formTable.getCells().forEach(recognizedTableCell ->\n                         System.out.printf(\"%s \", recognizedTableCell.getText())));\n             })\n         ));\n```"
  syntax:
    content: public PollerFlux<OperationResult,IterableStream<FormPage>> beginRecognizeContent(Flux<ByteBuffer> data, long length, FormContentType formContentType, Duration pollInterval)
    parameters:
    - id: data
      type: reactor.core.publisher.Flux<java.nio.ByteBuffer>
      description: The data of the document to be extract receipt information from.
    - id: length
      type: long
      description: The exact length of the data. Size of the file must be less than 50 MB.
    - id: formContentType
      type: com.azure.ai.formrecognizer.models.FormContentType
      description: Supported Media types including .pdf, .jpg, .png or .tiff type file stream.
    - id: pollInterval
      type: java.time.Duration
      description: >-
        Duration between each poll for the operation status. If none is specified, a default of
         5 seconds is used.
    return:
      type: com.azure.core.util.polling.PollerFlux<com.azure.ai.formrecognizer.models.OperationResult,com.azure.core.util.IterableStream<com.azure.ai.formrecognizer.models.FormPage>>
      description: >-
        A <xref uid="com.azure.core.util.polling.PollerFlux" data-throw-if-not-resolved="false">PollerFlux</xref> that polls the extract receipt operation until it has completed, has failed, or has
         been cancelled.
- uid: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeContentFromUrl(java.lang.String)
  id: beginRecognizeContentFromUrl(java.lang.String)
  artifact: com.azure:azure-ai-formrecognizer:1.0.0-beta.2
  parent: com.azure.ai.formrecognizer.FormRecognizerAsyncClient
  langs:
  - java
  name: beginRecognizeContentFromUrl(String fileSourceUrl)
  nameWithType: FormRecognizerAsyncClient.beginRecognizeContentFromUrl(String fileSourceUrl)
  fullName: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeContentFromUrl(String fileSourceUrl)
  overload: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeContentFromUrl*
  type: Method
  package: com.azure.ai.formrecognizer
  summary: >-
    Recognizes and extracts layout data from documents using optical character recognition (OCR) and a custom trained model.


    The service does not support cancellation of the long running operation and returns with an error message indicating absence of cancellation support.


    **Code sample**


    ```java

    String sourceFilePath = "{file_source_url}";
     formRecognizerAsyncClient.beginRecognizeContentFromUrl(sourceFilePath).subscribe(
         recognizePollingOperation ->
             recognizePollingOperation.getFinalResult().subscribe(layoutPageResults ->
                 layoutPageResults.forEach(recognizedForm -> {
                     System.out.printf("Page Angle: %s%n", recognizedForm.getTextAngle());
                     System.out.printf("Page Dimension unit: %s%n", recognizedForm.getUnit());
                     // Table information
                     System.out.println("Recognized Tables: ");
                     recognizedForm.getTables().forEach(formTable ->
                         formTable.getCells().forEach(recognizedTableCell ->
                             System.out.printf("%s ", recognizedTableCell.getText())));
                 })
             ));
    ```
  syntax:
    content: public PollerFlux<OperationResult,IterableStream<FormPage>> beginRecognizeContentFromUrl(String fileSourceUrl)
    parameters:
    - id: fileSourceUrl
      type: java.lang.String
      description: The source URL to the input document. Size of the file must be less than 50 MB.
    return:
      type: com.azure.core.util.polling.PollerFlux<com.azure.ai.formrecognizer.models.OperationResult,com.azure.core.util.IterableStream<com.azure.ai.formrecognizer.models.FormPage>>
      description: >-
        A <xref uid="com.azure.core.util.polling.PollerFlux" data-throw-if-not-resolved="false">PollerFlux</xref> that polls the extract custom form operation until it has completed, has failed,
         or has been cancelled.
- uid: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeContentFromUrl(java.lang.String,java.time.Duration)
  id: beginRecognizeContentFromUrl(java.lang.String,java.time.Duration)
  artifact: com.azure:azure-ai-formrecognizer:1.0.0-beta.2
  parent: com.azure.ai.formrecognizer.FormRecognizerAsyncClient
  langs:
  - java
  name: beginRecognizeContentFromUrl(String sourceUrl, Duration pollInterval)
  nameWithType: FormRecognizerAsyncClient.beginRecognizeContentFromUrl(String sourceUrl, Duration pollInterval)
  fullName: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeContentFromUrl(String sourceUrl, Duration pollInterval)
  overload: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeContentFromUrl*
  type: Method
  package: com.azure.ai.formrecognizer
  summary: >-
    Recognizes and extracts layout data using optical character recognition (OCR) and a prebuilt receipt trained model.


    The service does not support cancellation of the long running operation and returns with an error message indicating absence of cancellation support.


    **Code sample**


    ```java

    String sourceFilePath = "{file_source_url}";
     formRecognizerAsyncClient.beginRecognizeContentFromUrl(sourceFilePath, Duration.ofSeconds(5)).subscribe(
         recognizePollingOperation ->
             recognizePollingOperation.getFinalResult().subscribe(layoutPageResults ->
                 layoutPageResults.forEach(recognizedForm -> {
                     System.out.printf("Page Angle: %s%n", recognizedForm.getTextAngle());
                     System.out.printf("Page Dimension unit: %s%n", recognizedForm.getUnit());
                     // Table information
                     System.out.println("Recognized Tables: ");
                     recognizedForm.getTables().forEach(formTable ->
                         formTable.getCells().forEach(recognizedTableCell ->
                             System.out.printf("%s ", recognizedTableCell.getText())));
                 })
             ));
    ```
  syntax:
    content: public PollerFlux<OperationResult,IterableStream<FormPage>> beginRecognizeContentFromUrl(String sourceUrl, Duration pollInterval)
    parameters:
    - id: sourceUrl
      type: java.lang.String
      description: The source URL to the input document. Size of the file must be less than 50 MB.
    - id: pollInterval
      type: java.time.Duration
      description: >-
        Duration between each poll for the operation status. If none is specified, a default of
         5 seconds is used.
    return:
      type: com.azure.core.util.polling.PollerFlux<com.azure.ai.formrecognizer.models.OperationResult,com.azure.core.util.IterableStream<com.azure.ai.formrecognizer.models.FormPage>>
      description: >-
        A <xref uid="com.azure.core.util.polling.PollerFlux" data-throw-if-not-resolved="false">PollerFlux</xref> that polls the extract receipt operation until it has completed, has failed, or has
         been cancelled.
- uid: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeCustomForms(reactor.core.publisher.Flux<java.nio.ByteBuffer>,java.lang.String,long,com.azure.ai.formrecognizer.models.FormContentType)
  id: beginRecognizeCustomForms(reactor.core.publisher.Flux<java.nio.ByteBuffer>,java.lang.String,long,com.azure.ai.formrecognizer.models.FormContentType)
  artifact: com.azure:azure-ai-formrecognizer:1.0.0-beta.2
  parent: com.azure.ai.formrecognizer.FormRecognizerAsyncClient
  langs:
  - java
  name: beginRecognizeCustomForms(Flux<ByteBuffer> data, String modelId, long length, FormContentType formContentType)
  nameWithType: FormRecognizerAsyncClient.beginRecognizeCustomForms(Flux<ByteBuffer> data, String modelId, long length, FormContentType formContentType)
  fullName: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeCustomForms(Flux<ByteBuffer> data, String modelId, long length, FormContentType formContentType)
  overload: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeCustomForms*
  type: Method
  package: com.azure.ai.formrecognizer
  summary: "Recognizes and extracts form data from documents using optical character recognition (OCR) and a custom trained model.\n\nThe service does not support cancellation of the long running operation and returns with an error message indicating absence of cancellation support.\n\nNote that the `data` passed must be replayable if retries are enabled (the default). In other words, the `Flux` must produce the same data each time it is subscribed to.\n\n**Code sample**\n\n```java\nFile sourceFile = new File(\"{file_source_url}\");\n String modelId = \"{model_id}\";\n Flux<ByteBuffer> buffer = toFluxByteBuffer(\n     new ByteArrayInputStream(Files.readAllBytes(sourceFile.toPath())));\n \n formRecognizerAsyncClient.beginRecognizeCustomForms(buffer, modelId, sourceFile.length(),\n     FormContentType.IMAGE_JPEG).subscribe(recognizePollingOperation ->\n         // if training polling operation completed, retrieve the final result.\n         recognizePollingOperation.getFinalResult().subscribe(recognizedForms ->\n             recognizedForms.forEach(recognizedForm -> {\n                 recognizedForm.getFields().forEach((fieldText, fieldValue) -> {\n                     System.out.printf(\"Page number: %s%n\", fieldValue.getPageNumber());\n                     System.out.printf(\"Field text: %s%n\", fieldText);\n                     System.out.printf(\"Field value: %s%n\", fieldValue.getFieldValue());\n                     System.out.printf(\"Confidence score: %.2f%n\", fieldValue.getConfidence());\n                 });\n             })\n         )\n );\n```"
  syntax:
    content: public PollerFlux<OperationResult,IterableStream<RecognizedForm>> beginRecognizeCustomForms(Flux<ByteBuffer> data, String modelId, long length, FormContentType formContentType)
    parameters:
    - id: data
      type: reactor.core.publisher.Flux<java.nio.ByteBuffer>
      description: The data of the document to be extract receipt information from.
    - id: modelId
      type: java.lang.String
      description: The UUID string format custom trained model Id to be used.
    - id: length
      type: long
      description: The exact length of the data. Size of the file must be less than 50 MB.
    - id: formContentType
      type: com.azure.ai.formrecognizer.models.FormContentType
      description: Supported Media types including .pdf, .jpg, .png or .tiff type file stream.
    return:
      type: com.azure.core.util.polling.PollerFlux<com.azure.ai.formrecognizer.models.OperationResult,com.azure.core.util.IterableStream<com.azure.ai.formrecognizer.models.RecognizedForm>>
      description: >-
        A <xref uid="com.azure.core.util.polling.PollerFlux" data-throw-if-not-resolved="false">PollerFlux</xref> that polls the extract receipt operation until it has completed, has failed, or has
         been cancelled.
- uid: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeCustomForms(reactor.core.publisher.Flux<java.nio.ByteBuffer>,java.lang.String,long,com.azure.ai.formrecognizer.models.FormContentType,boolean,java.time.Duration)
  id: beginRecognizeCustomForms(reactor.core.publisher.Flux<java.nio.ByteBuffer>,java.lang.String,long,com.azure.ai.formrecognizer.models.FormContentType,boolean,java.time.Duration)
  artifact: com.azure:azure-ai-formrecognizer:1.0.0-beta.2
  parent: com.azure.ai.formrecognizer.FormRecognizerAsyncClient
  langs:
  - java
  name: beginRecognizeCustomForms(Flux<ByteBuffer> data, String modelId, long length, FormContentType formContentType, boolean includeTextDetails, Duration pollInterval)
  nameWithType: FormRecognizerAsyncClient.beginRecognizeCustomForms(Flux<ByteBuffer> data, String modelId, long length, FormContentType formContentType, boolean includeTextDetails, Duration pollInterval)
  fullName: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeCustomForms(Flux<ByteBuffer> data, String modelId, long length, FormContentType formContentType, boolean includeTextDetails, Duration pollInterval)
  overload: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeCustomForms*
  type: Method
  package: com.azure.ai.formrecognizer
  summary: "Recognizes and extracts form data from documents using optical character recognition (OCR) and a custom trained model.\n\nThe service does not support cancellation of the long running operation and returns with an error message indicating absence of cancellation support.\n\nNote that the `data` passed must be replayable if retries are enabled (the default). In other words, the `Flux` must produce the same data each time it is subscribed to.\n\n**Code sample**\n\n```java\nFile sourceFile = new File(\"{file_source_url}\");\n String modelId = \"{model_id}\";\n boolean includeTextDetails = true;\n Flux<ByteBuffer> buffer = toFluxByteBuffer(\n     new ByteArrayInputStream(Files.readAllBytes(sourceFile.toPath())));\n \n formRecognizerAsyncClient.beginRecognizeCustomForms(buffer, modelId, sourceFile.length(),\n     FormContentType.IMAGE_JPEG, includeTextDetails, Duration.ofSeconds(5))\n     .subscribe(recognizePollingOperation ->\n         // if training polling operation completed, retrieve the final result.\n         recognizePollingOperation.getFinalResult().subscribe(recognizedForms ->\n             recognizedForms.forEach(recognizedForm -> {\n                 recognizedForm.getFields().forEach((fieldText, fieldValue) -> {\n                     System.out.printf(\"Page number: %s%n\", fieldValue.getPageNumber());\n                     System.out.printf(\"Field text: %s%n\", fieldText);\n                     System.out.printf(\"Field value: %s%n\", fieldValue.getFieldValue());\n                     System.out.printf(\"Confidence score: %.2f%n\", fieldValue.getConfidence());\n                 });\n             })\n         )\n     );\n```"
  syntax:
    content: public PollerFlux<OperationResult,IterableStream<RecognizedForm>> beginRecognizeCustomForms(Flux<ByteBuffer> data, String modelId, long length, FormContentType formContentType, boolean includeTextDetails, Duration pollInterval)
    parameters:
    - id: data
      type: reactor.core.publisher.Flux<java.nio.ByteBuffer>
      description: The data of the document to be extract receipt information from.
    - id: modelId
      type: java.lang.String
      description: The UUID string format custom trained model Id to be used.
    - id: length
      type: long
      description: The exact length of the data. Size of the file must be less than 50 MB.
    - id: formContentType
      type: com.azure.ai.formrecognizer.models.FormContentType
      description: Supported Media types including .pdf, .jpg, .png or .tiff type file stream.
    - id: includeTextDetails
      type: boolean
      description: Include text lines and element references in the result.
    - id: pollInterval
      type: java.time.Duration
      description: >-
        Duration between each poll for the operation status. If none is specified, a default of
         5 seconds is used.
    return:
      type: com.azure.core.util.polling.PollerFlux<com.azure.ai.formrecognizer.models.OperationResult,com.azure.core.util.IterableStream<com.azure.ai.formrecognizer.models.RecognizedForm>>
      description: >-
        A <xref uid="com.azure.core.util.polling.PollerFlux" data-throw-if-not-resolved="false">PollerFlux</xref> that polls the extract receipt operation until it has completed, has failed, or has
         been cancelled.
- uid: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeCustomFormsFromUrl(java.lang.String,java.lang.String)
  id: beginRecognizeCustomFormsFromUrl(java.lang.String,java.lang.String)
  artifact: com.azure:azure-ai-formrecognizer:1.0.0-beta.2
  parent: com.azure.ai.formrecognizer.FormRecognizerAsyncClient
  langs:
  - java
  name: beginRecognizeCustomFormsFromUrl(String fileSourceUrl, String modelId)
  nameWithType: FormRecognizerAsyncClient.beginRecognizeCustomFormsFromUrl(String fileSourceUrl, String modelId)
  fullName: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeCustomFormsFromUrl(String fileSourceUrl, String modelId)
  overload: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeCustomFormsFromUrl*
  type: Method
  package: com.azure.ai.formrecognizer
  summary: "Recognizes and extracts form data from documents using optical character recognition (OCR) and a custom trained model.\n\nThe service does not support cancellation of the long running operation and returns with an error message indicating absence of cancellation support.\n\n**Code sample**\n\n```java\nString analyzeFilePath = \"{file_source_url}\";\n String modelId = \"{model_id}\";\n \n formRecognizerAsyncClient.beginRecognizeCustomFormsFromUrl(analyzeFilePath, modelId).subscribe(\n     recognizePollingOperation ->\n         // if training polling operation completed, retrieve the final result.\n         recognizePollingOperation.getFinalResult().subscribe(recognizedForms ->\n             recognizedForms.forEach(recognizedForm -> {\n                 recognizedForm.getFields().forEach((fieldText, fieldValue) -> {\n                     System.out.printf(\"Page number: %s%n\", fieldValue.getPageNumber());\n                     System.out.printf(\"Field text: %s%n\", fieldText);\n                     System.out.printf(\"Field value: %s%n\", fieldValue.getFieldValue());\n                     System.out.printf(\"Confidence score: %.2f%n\", fieldValue.getConfidence());\n                 });\n             })\n         )\n );\n```"
  syntax:
    content: public PollerFlux<OperationResult,IterableStream<RecognizedForm>> beginRecognizeCustomFormsFromUrl(String fileSourceUrl, String modelId)
    parameters:
    - id: fileSourceUrl
      type: java.lang.String
      description: The source URL to the input document. Size of the file must be less than 50 MB.
    - id: modelId
      type: java.lang.String
      description: The UUID string format custom trained model Id to be used.
    return:
      type: com.azure.core.util.polling.PollerFlux<com.azure.ai.formrecognizer.models.OperationResult,com.azure.core.util.IterableStream<com.azure.ai.formrecognizer.models.RecognizedForm>>
      description: >-
        A <xref uid="com.azure.core.util.polling.PollerFlux" data-throw-if-not-resolved="false">PollerFlux</xref> that polls the extract custom form operation until it has completed, has failed,
         or has been cancelled.
- uid: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeCustomFormsFromUrl(java.lang.String,java.lang.String,boolean,java.time.Duration)
  id: beginRecognizeCustomFormsFromUrl(java.lang.String,java.lang.String,boolean,java.time.Duration)
  artifact: com.azure:azure-ai-formrecognizer:1.0.0-beta.2
  parent: com.azure.ai.formrecognizer.FormRecognizerAsyncClient
  langs:
  - java
  name: beginRecognizeCustomFormsFromUrl(String fileSourceUrl, String modelId, boolean includeTextDetails, Duration pollInterval)
  nameWithType: FormRecognizerAsyncClient.beginRecognizeCustomFormsFromUrl(String fileSourceUrl, String modelId, boolean includeTextDetails, Duration pollInterval)
  fullName: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeCustomFormsFromUrl(String fileSourceUrl, String modelId, boolean includeTextDetails, Duration pollInterval)
  overload: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeCustomFormsFromUrl*
  type: Method
  package: com.azure.ai.formrecognizer
  summary: >-
    Recognizes and extracts form data from documents using optical character recognition (OCR) and a custom trained model.


    The service does not support cancellation of the long running operation and returns with an error message indicating absence of cancellation support.


    **Code sample**


    ```java

    String analyzeFilePath = "{file_source_url}";
     String modelId = "{model_id}";
     boolean includeTextDetails = true;
     formRecognizerAsyncClient.beginRecognizeCustomFormsFromUrl(analyzeFilePath, modelId, includeTextDetails,
         Duration.ofSeconds(5)).subscribe(recognizePollingOperation ->
             // if training polling operation completed, retrieve the final result.
             recognizePollingOperation.getFinalResult().subscribe(recognizedForms ->
                 recognizedForms.forEach(recognizedForm -> {
                     recognizedForm.getFields().forEach((fieldText, fieldValue) -> {
                         System.out.printf("Page number: %s%n", fieldValue.getPageNumber());
                         System.out.printf("Field text: %s%n", fieldText);
                         System.out.printf("Field value: %s%n", fieldValue.getFieldValue());
                         System.out.printf("Confidence score: %.2f%n", fieldValue.getConfidence());
                     });
                 })
             )
     );
    ```
  syntax:
    content: public PollerFlux<OperationResult,IterableStream<RecognizedForm>> beginRecognizeCustomFormsFromUrl(String fileSourceUrl, String modelId, boolean includeTextDetails, Duration pollInterval)
    parameters:
    - id: fileSourceUrl
      type: java.lang.String
      description: The source URL to the input document. Size of the file must be less than 50 MB.
    - id: modelId
      type: java.lang.String
      description: The UUID string format custom trained model Id to be used.
    - id: includeTextDetails
      type: boolean
      description: Include text lines and element references in the result.
    - id: pollInterval
      type: java.time.Duration
      description: >-
        Duration between each poll for the operation status. If none is specified, a default of
         5 seconds is used.
    return:
      type: com.azure.core.util.polling.PollerFlux<com.azure.ai.formrecognizer.models.OperationResult,com.azure.core.util.IterableStream<com.azure.ai.formrecognizer.models.RecognizedForm>>
      description: >-
        A <xref uid="com.azure.core.util.polling.PollerFlux" data-throw-if-not-resolved="false">PollerFlux</xref> that polls the extract custom form operation until it has completed, has failed,
         or has been cancelled.
- uid: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeReceipts(reactor.core.publisher.Flux<java.nio.ByteBuffer>,long,com.azure.ai.formrecognizer.models.FormContentType)
  id: beginRecognizeReceipts(reactor.core.publisher.Flux<java.nio.ByteBuffer>,long,com.azure.ai.formrecognizer.models.FormContentType)
  artifact: com.azure:azure-ai-formrecognizer:1.0.0-beta.2
  parent: com.azure.ai.formrecognizer.FormRecognizerAsyncClient
  langs:
  - java
  name: beginRecognizeReceipts(Flux<ByteBuffer> data, long length, FormContentType formContentType)
  nameWithType: FormRecognizerAsyncClient.beginRecognizeReceipts(Flux<ByteBuffer> data, long length, FormContentType formContentType)
  fullName: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeReceipts(Flux<ByteBuffer> data, long length, FormContentType formContentType)
  overload: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeReceipts*
  type: Method
  package: com.azure.ai.formrecognizer
  summary: >-
    Recognizes and extracts receipt data using optical character recognition (OCR) and a prebuilt receipt trained model.


    The service does not support cancellation of the long running operation and returns with an error message indicating absence of cancellation support.


    Note that the `data` passed must be replayable if retries are enabled (the default). In other words, the `Flux` must produce the same data each time it is subscribed to.


    **Code sample**


    ```java

    File sourceFile = new File("{file_source_url}");
     Flux<ByteBuffer> buffer = toFluxByteBuffer(
         new ByteArrayInputStream(Files.readAllBytes(sourceFile.toPath())));
     formRecognizerAsyncClient.beginRecognizeReceipts(buffer, sourceFile.length(), FormContentType.IMAGE_JPEG)
         .subscribe(recognizePollingOperation -> {
             // if training polling operation completed, retrieve the final result.
             recognizePollingOperation.getFinalResult().subscribe(recognizedReceipts ->
                 recognizedReceipts.forEach(recognizedReceipt -> {
                     USReceipt usReceipt = ReceiptExtensions.asUSReceipt(recognizedReceipt);
                     System.out.printf("Page Number: %s%n", usReceipt.getMerchantName().getPageNumber());
                     System.out.printf("Merchant Name: %s, confidence: %.2f%n",
                         usReceipt.getMerchantName().getFieldValue(),
                         usReceipt.getMerchantName().getConfidence());
                     System.out.printf("Merchant Address: %s, confidence: %.2f%n",
                         usReceipt.getMerchantAddress().getFieldValue(),
                         usReceipt.getMerchantAddress().getConfidence());
                     System.out.printf("Merchant Phone Number %s, confidence: %.2f%n",
                         usReceipt.getMerchantPhoneNumber().getFieldValue(),
                         usReceipt.getMerchantPhoneNumber().getConfidence());
                     System.out.printf("Total: %.2f, confidence: %.2f%n",
                         usReceipt.getTotal().getFieldValue(),
                         usReceipt.getTotal().getConfidence());
                 }));
         });
    ```
  syntax:
    content: public PollerFlux<OperationResult,IterableStream<RecognizedReceipt>> beginRecognizeReceipts(Flux<ByteBuffer> data, long length, FormContentType formContentType)
    parameters:
    - id: data
      type: reactor.core.publisher.Flux<java.nio.ByteBuffer>
      description: The data of the document to be extract receipt information from.
    - id: length
      type: long
      description: The exact length of the data. Size of the file must be less than 50 MB.
    - id: formContentType
      type: com.azure.ai.formrecognizer.models.FormContentType
      description: Supported Media types including .pdf, .jpg, .png or .tiff type file stream.
    return:
      type: com.azure.core.util.polling.PollerFlux<com.azure.ai.formrecognizer.models.OperationResult,com.azure.core.util.IterableStream<com.azure.ai.formrecognizer.models.RecognizedReceipt>>
      description: >-
        A <xref uid="com.azure.core.util.polling.PollerFlux" data-throw-if-not-resolved="false">PollerFlux</xref> that polls the extract receipt operation until it has completed, has failed, or has
         been cancelled.
- uid: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeReceipts(reactor.core.publisher.Flux<java.nio.ByteBuffer>,long,com.azure.ai.formrecognizer.models.FormContentType,boolean,java.time.Duration)
  id: beginRecognizeReceipts(reactor.core.publisher.Flux<java.nio.ByteBuffer>,long,com.azure.ai.formrecognizer.models.FormContentType,boolean,java.time.Duration)
  artifact: com.azure:azure-ai-formrecognizer:1.0.0-beta.2
  parent: com.azure.ai.formrecognizer.FormRecognizerAsyncClient
  langs:
  - java
  name: beginRecognizeReceipts(Flux<ByteBuffer> data, long length, FormContentType formContentType, boolean includeTextDetails, Duration pollInterval)
  nameWithType: FormRecognizerAsyncClient.beginRecognizeReceipts(Flux<ByteBuffer> data, long length, FormContentType formContentType, boolean includeTextDetails, Duration pollInterval)
  fullName: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeReceipts(Flux<ByteBuffer> data, long length, FormContentType formContentType, boolean includeTextDetails, Duration pollInterval)
  overload: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeReceipts*
  type: Method
  package: com.azure.ai.formrecognizer
  summary: >-
    Recognizes and extracts receipt data from documents using optical character recognition (OCR) and a prebuilt receipt trained model.


    The service does not support cancellation of the long running operation and returns with an error message indicating absence of cancellation support.


    Note that the `data` passed must be replayable if retries are enabled (the default). In other words, the `Flux` must produce the same data each time it is subscribed to.


    **Code sample**


    ```java

    File sourceFile = new File("{file_source_url}");
     boolean includeTextDetails = true;
     Flux<ByteBuffer> buffer = toFluxByteBuffer(
         new ByteArrayInputStream(Files.readAllBytes(sourceFile.toPath())));
     formRecognizerAsyncClient.beginRecognizeReceipts(buffer, sourceFile.length(), FormContentType.IMAGE_JPEG,
         includeTextDetails, Duration.ofSeconds(5)).subscribe(recognizePollingOperation -> {
             // if training polling operation completed, retrieve the final result.
             recognizePollingOperation.getFinalResult().subscribe(recognizedReceipts ->
                 recognizedReceipts.forEach(recognizedReceipt -> {
                     USReceipt usReceipt = ReceiptExtensions.asUSReceipt(recognizedReceipt);
                     System.out.printf("Page Number: %s%n", usReceipt.getMerchantName().getPageNumber());
                     System.out.printf("Merchant Name: %s, confidence: %.2f%n",
                         usReceipt.getMerchantName().getFieldValue(),
                         usReceipt.getMerchantName().getConfidence());
                     System.out.printf("Merchant Address: %s, confidence: %.2f%n",
                         usReceipt.getMerchantAddress().getFieldValue(),
                         usReceipt.getMerchantAddress().getConfidence());
                     System.out.printf("Merchant Phone Number %s, confidence: %.2f%n",
                         usReceipt.getMerchantPhoneNumber().getFieldValue(),
                         usReceipt.getMerchantPhoneNumber().getConfidence());
                     System.out.printf("Total: %.2f, confidence: %.2f%n",
                         usReceipt.getTotal().getFieldValue(),
                         usReceipt.getTotal().getConfidence());
                 }));
         });
    ```
  syntax:
    content: public PollerFlux<OperationResult,IterableStream<RecognizedReceipt>> beginRecognizeReceipts(Flux<ByteBuffer> data, long length, FormContentType formContentType, boolean includeTextDetails, Duration pollInterval)
    parameters:
    - id: data
      type: reactor.core.publisher.Flux<java.nio.ByteBuffer>
      description: The data of the document to be extract receipt information from.
    - id: length
      type: long
      description: The exact length of the data. Size of the file must be less than 50 MB.
    - id: formContentType
      type: com.azure.ai.formrecognizer.models.FormContentType
      description: Supported Media types including .pdf, .jpg, .png or .tiff type file stream.
    - id: includeTextDetails
      type: boolean
      description: Include text lines and element references in the result.
    - id: pollInterval
      type: java.time.Duration
      description: >-
        Duration between each poll for the operation status. If none is specified, a default of
         5 seconds is used.
    return:
      type: com.azure.core.util.polling.PollerFlux<com.azure.ai.formrecognizer.models.OperationResult,com.azure.core.util.IterableStream<com.azure.ai.formrecognizer.models.RecognizedReceipt>>
      description: >-
        A <xref uid="com.azure.core.util.polling.PollerFlux" data-throw-if-not-resolved="false">PollerFlux</xref> that polls the extract receipt operation until it has completed, has failed, or has
         been cancelled.
- uid: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeReceiptsFromUrl(java.lang.String)
  id: beginRecognizeReceiptsFromUrl(java.lang.String)
  artifact: com.azure:azure-ai-formrecognizer:1.0.0-beta.2
  parent: com.azure.ai.formrecognizer.FormRecognizerAsyncClient
  langs:
  - java
  name: beginRecognizeReceiptsFromUrl(String sourceUrl)
  nameWithType: FormRecognizerAsyncClient.beginRecognizeReceiptsFromUrl(String sourceUrl)
  fullName: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeReceiptsFromUrl(String sourceUrl)
  overload: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeReceiptsFromUrl*
  type: Method
  package: com.azure.ai.formrecognizer
  summary: >-
    Recognizes and extracts receipt data using optical character recognition (OCR) and a prebuilt receipt trained model.


    The service does not support cancellation of the long running operation and returns with an error message indicating absence of cancellation support.


    **Code sample**


    ```java

    String receiptUrl = "{file_source_url}";
     formRecognizerAsyncClient.beginRecognizeReceiptsFromUrl(receiptUrl).subscribe(recognizePollingOperation -> {
         // if training polling operation completed, retrieve the final result.
         recognizePollingOperation.getFinalResult().subscribe(recognizedReceipts ->
             recognizedReceipts.forEach(recognizedReceipt -> {
                 USReceipt usReceipt = ReceiptExtensions.asUSReceipt(recognizedReceipt);
                 System.out.printf("Page Number: %s%n", usReceipt.getMerchantName().getPageNumber());
                 System.out.printf("Merchant Name: %s, confidence: %.2f%n",
                     usReceipt.getMerchantName().getFieldValue(),
                     usReceipt.getMerchantName().getConfidence());
                 System.out.printf("Merchant Address: %s, confidence: %.2f%n",
                     usReceipt.getMerchantAddress().getFieldValue(),
                     usReceipt.getMerchantAddress().getConfidence());
                 System.out.printf("Merchant Phone Number %s, confidence: %.2f%n",
                     usReceipt.getMerchantPhoneNumber().getFieldValue(),
                     usReceipt.getMerchantPhoneNumber().getConfidence());
                 System.out.printf("Total: %.2f, confidence: %.2f%n",
                     usReceipt.getTotal().getFieldValue(),
                     usReceipt.getTotal().getConfidence());
             }));
     });
    ```
  syntax:
    content: public PollerFlux<OperationResult,IterableStream<RecognizedReceipt>> beginRecognizeReceiptsFromUrl(String sourceUrl)
    parameters:
    - id: sourceUrl
      type: java.lang.String
      description: The source URL to the input document. Size of the file must be less than 50 MB.
    return:
      type: com.azure.core.util.polling.PollerFlux<com.azure.ai.formrecognizer.models.OperationResult,com.azure.core.util.IterableStream<com.azure.ai.formrecognizer.models.RecognizedReceipt>>
      description: >-
        A <xref uid="com.azure.core.util.polling.PollerFlux" data-throw-if-not-resolved="false">PollerFlux</xref> that polls the extract receipt operation until it has completed, has failed, or has
         been cancelled.
- uid: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeReceiptsFromUrl(java.lang.String,boolean,java.time.Duration)
  id: beginRecognizeReceiptsFromUrl(java.lang.String,boolean,java.time.Duration)
  artifact: com.azure:azure-ai-formrecognizer:1.0.0-beta.2
  parent: com.azure.ai.formrecognizer.FormRecognizerAsyncClient
  langs:
  - java
  name: beginRecognizeReceiptsFromUrl(String sourceUrl, boolean includeTextDetails, Duration pollInterval)
  nameWithType: FormRecognizerAsyncClient.beginRecognizeReceiptsFromUrl(String sourceUrl, boolean includeTextDetails, Duration pollInterval)
  fullName: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeReceiptsFromUrl(String sourceUrl, boolean includeTextDetails, Duration pollInterval)
  overload: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeReceiptsFromUrl*
  type: Method
  package: com.azure.ai.formrecognizer
  summary: >-
    Recognizes and extracts receipt data using optical character recognition (OCR) and a prebuilt receipt trained model.


    The service does not support cancellation of the long running operation and returns with an error message indicating absence of cancellation support.


    **Code sample**


    ```java

    String receiptUrl = "{file_source_url}";
     boolean includeTextDetails = true;
     formRecognizerAsyncClient.beginRecognizeReceiptsFromUrl(receiptUrl, includeTextDetails, Duration.ofSeconds(5))
         .subscribe(recognizePollingOperation -> {
             // if training polling operation completed, retrieve the final result.
             recognizePollingOperation.getFinalResult().subscribe(recognizedReceipts ->
                 recognizedReceipts.forEach(recognizedReceipt -> {
                     USReceipt usReceipt = ReceiptExtensions.asUSReceipt(recognizedReceipt);
                     System.out.printf("Page Number: %s%n", usReceipt.getMerchantName().getPageNumber());
                     System.out.printf("Merchant Name: %s, confidence: %.2f%n",
                         usReceipt.getMerchantName().getFieldValue(),
                         usReceipt.getMerchantName().getConfidence());
                     System.out.printf("Merchant Address: %s, confidence: %.2f%n",
                         usReceipt.getMerchantAddress().getFieldValue(),
                         usReceipt.getMerchantAddress().getConfidence());
                     System.out.printf("Merchant Phone Number %s, confidence: %.2f%n",
                         usReceipt.getMerchantPhoneNumber().getFieldValue(),
                         usReceipt.getMerchantPhoneNumber().getConfidence());
                     System.out.printf("Total: %.2f, confidence: %.2f%n",
                         usReceipt.getTotal().getFieldValue(),
                         usReceipt.getTotal().getConfidence());
                 }));
         });
    ```
  syntax:
    content: public PollerFlux<OperationResult,IterableStream<RecognizedReceipt>> beginRecognizeReceiptsFromUrl(String sourceUrl, boolean includeTextDetails, Duration pollInterval)
    parameters:
    - id: sourceUrl
      type: java.lang.String
      description: The source URL to the input document. Size of the file must be less than 50 MB.
    - id: includeTextDetails
      type: boolean
      description: Include text lines and element references in the result.
    - id: pollInterval
      type: java.time.Duration
      description: >-
        Duration between each poll for the operation status. If none is specified, a default of
         5 seconds is used.
    return:
      type: com.azure.core.util.polling.PollerFlux<com.azure.ai.formrecognizer.models.OperationResult,com.azure.core.util.IterableStream<com.azure.ai.formrecognizer.models.RecognizedReceipt>>
      description: >-
        A <xref uid="com.azure.core.util.polling.PollerFlux" data-throw-if-not-resolved="false">PollerFlux</xref> that polls the extract receipt operation until it has completed, has failed, or has
         been cancelled.
- uid: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.getFormTrainingAsyncClient()
  id: getFormTrainingAsyncClient()
  artifact: com.azure:azure-ai-formrecognizer:1.0.0-beta.2
  parent: com.azure.ai.formrecognizer.FormRecognizerAsyncClient
  langs:
  - java
  name: getFormTrainingAsyncClient()
  nameWithType: FormRecognizerAsyncClient.getFormTrainingAsyncClient()
  fullName: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.getFormTrainingAsyncClient()
  overload: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.getFormTrainingAsyncClient*
  type: Method
  package: com.azure.ai.formrecognizer
  summary: Creates a new <xref uid="com.azure.ai.formrecognizer.FormTrainingAsyncClient" data-throw-if-not-resolved="false">FormTrainingAsyncClient</xref> object. The new `FormTrainingAsyncClient` uses the same request policy pipeline as the `FormRecognizerAsyncClient`.
  syntax:
    content: public FormTrainingAsyncClient getFormTrainingAsyncClient()
    return:
      type: com.azure.ai.formrecognizer.FormTrainingAsyncClient
      description: A new <xref uid="com.azure.ai.formrecognizer.FormTrainingAsyncClient" data-throw-if-not-resolved="false">FormTrainingAsyncClient</xref> object.
- uid: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.getServiceVersion()
  id: getServiceVersion()
  artifact: com.azure:azure-ai-formrecognizer:1.0.0-beta.2
  parent: com.azure.ai.formrecognizer.FormRecognizerAsyncClient
  langs:
  - java
  name: getServiceVersion()
  nameWithType: FormRecognizerAsyncClient.getServiceVersion()
  fullName: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.getServiceVersion()
  overload: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.getServiceVersion*
  type: Method
  package: com.azure.ai.formrecognizer
  summary: Gets the service version the client is using.
  syntax:
    content: public FormRecognizerServiceVersion getServiceVersion()
    return:
      type: com.azure.ai.formrecognizer.FormRecognizerServiceVersion
      description: the service version the client is using.
references:
- uid: com.azure.ai.formrecognizer.implementation.FormRecognizerClientImpl
  name: FormRecognizerClientImpl
  nameWithType: FormRecognizerClientImpl
  fullName: com.azure.ai.formrecognizer.implementation.FormRecognizerClientImpl
- uid: com.azure.ai.formrecognizer.FormRecognizerServiceVersion
  name: FormRecognizerServiceVersion
  nameWithType: FormRecognizerServiceVersion
  fullName: com.azure.ai.formrecognizer.FormRecognizerServiceVersion
- uid: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.FormRecognizerAsyncClient*
  name: FormRecognizerAsyncClient
  nameWithType: FormRecognizerAsyncClient.FormRecognizerAsyncClient
  fullName: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.FormRecognizerAsyncClient
  package: com.azure.ai.formrecognizer
- uid: com.azure.ai.formrecognizer.FormTrainingAsyncClient
  name: FormTrainingAsyncClient
  nameWithType: FormTrainingAsyncClient
  fullName: com.azure.ai.formrecognizer.FormTrainingAsyncClient
- uid: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.getFormTrainingAsyncClient*
  name: getFormTrainingAsyncClient
  nameWithType: FormRecognizerAsyncClient.getFormTrainingAsyncClient
  fullName: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.getFormTrainingAsyncClient
  package: com.azure.ai.formrecognizer
- uid: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.getServiceVersion*
  name: getServiceVersion
  nameWithType: FormRecognizerAsyncClient.getServiceVersion
  fullName: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.getServiceVersion
  package: com.azure.ai.formrecognizer
- uid: java.lang.String
  spec.java:
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
- uid: com.azure.core.util.polling.PollerFlux<com.azure.ai.formrecognizer.models.OperationResult,com.azure.core.util.IterableStream<com.azure.ai.formrecognizer.models.RecognizedForm>>
  spec.java:
  - uid: com.azure.core.util.polling.PollerFlux
    name: PollerFlux
    fullName: com.azure.core.util.polling.PollerFlux
  - name: <
    fullName: <
  - uid: com.azure.ai.formrecognizer.models.OperationResult
    name: OperationResult
    fullName: com.azure.ai.formrecognizer.models.OperationResult
  - name: ','
    fullName: ','
  - uid: com.azure.core.util.IterableStream
    name: IterableStream
    fullName: com.azure.core.util.IterableStream
  - name: <
    fullName: <
  - uid: com.azure.ai.formrecognizer.models.RecognizedForm
    name: RecognizedForm
    fullName: com.azure.ai.formrecognizer.models.RecognizedForm
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
- uid: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeCustomFormsFromUrl*
  name: beginRecognizeCustomFormsFromUrl
  nameWithType: FormRecognizerAsyncClient.beginRecognizeCustomFormsFromUrl
  fullName: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeCustomFormsFromUrl
  package: com.azure.ai.formrecognizer
- uid: boolean
  spec.java:
  - uid: boolean
    name: boolean
    fullName: boolean
- uid: java.time.Duration
  spec.java:
  - uid: java.time.Duration
    name: Duration
    fullName: java.time.Duration
- uid: reactor.core.publisher.Flux<java.nio.ByteBuffer>
  spec.java:
  - uid: reactor.core.publisher.Flux
    name: Flux
    fullName: reactor.core.publisher.Flux
  - name: <
    fullName: <
  - uid: java.nio.ByteBuffer
    name: ByteBuffer
    fullName: java.nio.ByteBuffer
  - name: '>'
    fullName: '>'
- uid: long
  spec.java:
  - uid: long
    name: long
    fullName: long
- uid: com.azure.ai.formrecognizer.models.FormContentType
  name: FormContentType
  nameWithType: FormContentType
  fullName: com.azure.ai.formrecognizer.models.FormContentType
- uid: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeCustomForms*
  name: beginRecognizeCustomForms
  nameWithType: FormRecognizerAsyncClient.beginRecognizeCustomForms
  fullName: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeCustomForms
  package: com.azure.ai.formrecognizer
- uid: com.azure.core.util.polling.PollerFlux<com.azure.ai.formrecognizer.models.OperationResult,com.azure.core.util.IterableStream<com.azure.ai.formrecognizer.models.FormPage>>
  spec.java:
  - uid: com.azure.core.util.polling.PollerFlux
    name: PollerFlux
    fullName: com.azure.core.util.polling.PollerFlux
  - name: <
    fullName: <
  - uid: com.azure.ai.formrecognizer.models.OperationResult
    name: OperationResult
    fullName: com.azure.ai.formrecognizer.models.OperationResult
  - name: ','
    fullName: ','
  - uid: com.azure.core.util.IterableStream
    name: IterableStream
    fullName: com.azure.core.util.IterableStream
  - name: <
    fullName: <
  - uid: com.azure.ai.formrecognizer.models.FormPage
    name: FormPage
    fullName: com.azure.ai.formrecognizer.models.FormPage
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
- uid: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeContentFromUrl*
  name: beginRecognizeContentFromUrl
  nameWithType: FormRecognizerAsyncClient.beginRecognizeContentFromUrl
  fullName: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeContentFromUrl
  package: com.azure.ai.formrecognizer
- uid: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeContent*
  name: beginRecognizeContent
  nameWithType: FormRecognizerAsyncClient.beginRecognizeContent
  fullName: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeContent
  package: com.azure.ai.formrecognizer
- uid: com.azure.core.util.polling.PollerFlux<com.azure.ai.formrecognizer.models.OperationResult,com.azure.core.util.IterableStream<com.azure.ai.formrecognizer.models.RecognizedReceipt>>
  spec.java:
  - uid: com.azure.core.util.polling.PollerFlux
    name: PollerFlux
    fullName: com.azure.core.util.polling.PollerFlux
  - name: <
    fullName: <
  - uid: com.azure.ai.formrecognizer.models.OperationResult
    name: OperationResult
    fullName: com.azure.ai.formrecognizer.models.OperationResult
  - name: ','
    fullName: ','
  - uid: com.azure.core.util.IterableStream
    name: IterableStream
    fullName: com.azure.core.util.IterableStream
  - name: <
    fullName: <
  - uid: com.azure.ai.formrecognizer.models.RecognizedReceipt
    name: RecognizedReceipt
    fullName: com.azure.ai.formrecognizer.models.RecognizedReceipt
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
- uid: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeReceiptsFromUrl*
  name: beginRecognizeReceiptsFromUrl
  nameWithType: FormRecognizerAsyncClient.beginRecognizeReceiptsFromUrl
  fullName: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeReceiptsFromUrl
  package: com.azure.ai.formrecognizer
- uid: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeReceipts*
  name: beginRecognizeReceipts
  nameWithType: FormRecognizerAsyncClient.beginRecognizeReceipts
  fullName: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeReceipts
  package: com.azure.ai.formrecognizer
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: java.lang.Object.finalize()
  name: Object.finalize()
  nameWithType: Object.finalize()
  fullName: java.lang.Object.finalize()
- uid: java.lang.Object.clone()
  name: Object.clone()
  nameWithType: Object.clone()
  fullName: java.lang.Object.clone()
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: java.lang.Object.equals(java.lang.Object)
  name: Object.equals(Object)
  nameWithType: Object.equals(Object)
  fullName: java.lang.Object.equals(java.lang.Object)
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.lang.Object.hashCode()
  name: Object.hashCode()
  nameWithType: Object.hashCode()
  fullName: java.lang.Object.hashCode()
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: java.lang.Object.toString()
  name: Object.toString()
  nameWithType: Object.toString()
  fullName: java.lang.Object.toString()
- uid: com.azure.ai.formrecognizer.models.RecognizedForm
  name: RecognizedForm
  nameWithType: RecognizedForm
  fullName: com.azure.ai.formrecognizer.models.RecognizedForm
- uid: com.azure.ai.formrecognizer.models.OperationResult,com.azure.core.util.IterableStream
  name: OperationResult,IterableStream
  nameWithType: OperationResult,IterableStream
  fullName: com.azure.ai.formrecognizer.models.OperationResult,com.azure.core.util.IterableStream
- uid: com.azure.core.util.polling.PollerFlux
  name: PollerFlux
  nameWithType: PollerFlux
  fullName: com.azure.core.util.polling.PollerFlux
- uid: reactor.core.publisher.Flux
  name: Flux
  nameWithType: Flux
  fullName: reactor.core.publisher.Flux
- uid: java.nio.ByteBuffer
  name: ByteBuffer
  nameWithType: ByteBuffer
  fullName: java.nio.ByteBuffer
- uid: com.azure.ai.formrecognizer.models.FormPage
  name: FormPage
  nameWithType: FormPage
  fullName: com.azure.ai.formrecognizer.models.FormPage
- uid: com.azure.ai.formrecognizer.models.RecognizedReceipt
  name: RecognizedReceipt
  nameWithType: RecognizedReceipt
  fullName: com.azure.ai.formrecognizer.models.RecognizedReceipt
