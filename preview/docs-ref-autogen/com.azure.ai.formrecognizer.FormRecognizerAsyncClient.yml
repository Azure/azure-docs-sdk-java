### YamlMime:ManagedReference
items:
- uid: com.azure.ai.formrecognizer.FormRecognizerAsyncClient
  id: FormRecognizerAsyncClient
  artifact: com.azure:azure-ai-formrecognizer:1.0.0-beta.4
  parent: com.azure.ai.formrecognizer
  children:
  - com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeContent(reactor.core.publisher.Flux<java.nio.ByteBuffer>,long)
  - com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeContent(reactor.core.publisher.Flux<java.nio.ByteBuffer>,long,com.azure.ai.formrecognizer.models.RecognizeOptions)
  - com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeContentFromUrl(java.lang.String)
  - com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeContentFromUrl(java.lang.String,com.azure.ai.formrecognizer.models.RecognizeOptions)
  - com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeCustomForms(reactor.core.publisher.Flux<java.nio.ByteBuffer>,long,java.lang.String)
  - com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeCustomForms(reactor.core.publisher.Flux<java.nio.ByteBuffer>,long,java.lang.String,com.azure.ai.formrecognizer.models.RecognizeOptions)
  - com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeCustomFormsFromUrl(java.lang.String,java.lang.String)
  - com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeCustomFormsFromUrl(java.lang.String,java.lang.String,com.azure.ai.formrecognizer.models.RecognizeOptions)
  - com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeReceipts(reactor.core.publisher.Flux<java.nio.ByteBuffer>,long)
  - com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeReceipts(reactor.core.publisher.Flux<java.nio.ByteBuffer>,long,com.azure.ai.formrecognizer.models.RecognizeOptions)
  - com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeReceiptsFromUrl(java.lang.String)
  - com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeReceiptsFromUrl(java.lang.String,com.azure.ai.formrecognizer.models.RecognizeOptions)
  langs:
  - java
  name: FormRecognizerAsyncClient
  nameWithType: FormRecognizerAsyncClient
  fullName: com.azure.ai.formrecognizer.FormRecognizerAsyncClient
  type: Class
  package: com.azure.ai.formrecognizer
  summary: >-
    This class provides an asynchronous client that contains all the operations that apply to Azure Form Recognizer. Operations allowed by the client are recognizing receipt data from documents, extracting layout information and analyzing custom forms for predefined data.


    **Instantiating an asynchronous Form Recognizer Client**


    ```java

    FormRecognizerAsyncClient formRecognizerAsyncClient = new FormRecognizerClientBuilder()
         .credential(new AzureKeyCredential("{key}"))
         .endpoint("{endpoint}")
         .buildAsyncClient();
    ```
  syntax:
    content: public final class FormRecognizerAsyncClient
  inheritance:
  - java.lang.Object
  inheritedMembers:
  - java.lang.Object.clone()
  - java.lang.Object.equals(java.lang.Object)
  - java.lang.Object.finalize()
  - java.lang.Object.getClass()
  - java.lang.Object.hashCode()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.toString()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
- uid: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.FormRecognizerAsyncClient(com.azure.ai.formrecognizer.implementation.FormRecognizerClientImpl,com.azure.ai.formrecognizer.FormRecognizerServiceVersion)
  id: FormRecognizerAsyncClient(com.azure.ai.formrecognizer.implementation.FormRecognizerClientImpl,com.azure.ai.formrecognizer.FormRecognizerServiceVersion)
  artifact: com.azure:azure-ai-formrecognizer:1.0.0-beta.4
  parent: com.azure.ai.formrecognizer.FormRecognizerAsyncClient
  langs:
  - java
  name: FormRecognizerAsyncClient(FormRecognizerClientImpl service, FormRecognizerServiceVersion serviceVersion)
  nameWithType: FormRecognizerAsyncClient.FormRecognizerAsyncClient(FormRecognizerClientImpl service, FormRecognizerServiceVersion serviceVersion)
  fullName: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.FormRecognizerAsyncClient(FormRecognizerClientImpl service, FormRecognizerServiceVersion serviceVersion)
  overload: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.FormRecognizerAsyncClient*
  type: Constructor
  package: com.azure.ai.formrecognizer
  summary: Create a <xref uid="com.azure.ai.formrecognizer.FormRecognizerAsyncClient" data-throw-if-not-resolved="false">FormRecognizerAsyncClient</xref> that sends requests to the Form Recognizer services's endpoint. Each service call goes through the <xref uid="com.azure.ai.formrecognizer.FormRecognizerClientBuilder.pipeline(com.azure.core.http.HttpPipeline)" data-throw-if-not-resolved="false">FormRecognizerClientBuilder#pipeline(HttpPipeline)</xref> http pipeline\}.
  syntax:
    content: " FormRecognizerAsyncClient(FormRecognizerClientImpl service, FormRecognizerServiceVersion serviceVersion)"
    parameters:
    - id: service
      type: com.azure.ai.formrecognizer.implementation.FormRecognizerClientImpl
      description: The proxy service used to perform REST calls.
    - id: serviceVersion
      type: com.azure.ai.formrecognizer.FormRecognizerServiceVersion
      description: The versions of Azure Form Recognizer supported by this client library.
- uid: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeContent(reactor.core.publisher.Flux<java.nio.ByteBuffer>,long)
  id: beginRecognizeContent(reactor.core.publisher.Flux<java.nio.ByteBuffer>,long)
  artifact: com.azure:azure-ai-formrecognizer:1.0.0-beta.4
  parent: com.azure.ai.formrecognizer.FormRecognizerAsyncClient
  langs:
  - java
  name: beginRecognizeContent(Flux<ByteBuffer> form, long length)
  nameWithType: FormRecognizerAsyncClient.beginRecognizeContent(Flux<ByteBuffer> form, long length)
  fullName: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeContent(Flux<ByteBuffer> form, long length)
  overload: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeContent*
  type: Method
  package: com.azure.ai.formrecognizer
  summary: "Recognizes content/layout data using optical character recognition (OCR).\n\nThe service does not support cancellation of the long running operation and returns with an error message indicating absence of cancellation support.\n\nNote that the `data` passed must be replayable if retries are enabled (the default). In other words, the `Flux` must produce the same data each time it is subscribed to.\n\n**Code sample**\n\n```java\nFile form = new File(\"{local/file_path/fileName.jpg}\");\n // Utility method to convert input stream to Byte buffer\n Flux<ByteBuffer> buffer = toFluxByteBuffer(new ByteArrayInputStream(Files.readAllBytes(form.toPath())));\n \n formRecognizerAsyncClient.beginRecognizeContent(buffer, form.length())\n     .flatMap(recognizePollingOperation ->\n         // if training polling operation completed, retrieve the final result.\n         recognizePollingOperation.getFinalResult())\n     .subscribe(contentPageResult ->\n         contentPageResult.forEach(formPage -> {\n             System.out.printf(\"Page Angle: %s%n\", formPage.getTextAngle());\n             System.out.printf(\"Page Dimension unit: %s%n\", formPage.getUnit());\n             // Table information\n             System.out.println(\"Recognized Tables: \");\n             formPage.getTables().forEach(formTable ->\n                 formTable.getCells().forEach(recognizedTableCell ->\n                     System.out.printf(\"%s \", recognizedTableCell.getText())));\n         }));\n```"
  syntax:
    content: public PollerFlux<OperationResult,List<FormPage>> beginRecognizeContent(Flux<ByteBuffer> form, long length)
    parameters:
    - id: form
      type: reactor.core.publisher.Flux<java.nio.ByteBuffer>
      description: The data of the form to recognize content information from.
    - id: length
      type: long
      description: The exact length of the data.
    return:
      type: com.azure.core.util.polling.PollerFlux<com.azure.ai.formrecognizer.models.OperationResult,java.util.List<com.azure.ai.formrecognizer.models.FormPage>>
      description: >-
        A <xref uid="com.azure.core.util.polling.PollerFlux" data-throw-if-not-resolved="false">PollerFlux</xref> polls the recognize content operation until it has completed, has failed, or has
         been cancelled. The completed operation returns a List of <xref uid="com.azure.ai.formrecognizer.models.FormPage" data-throw-if-not-resolved="false">FormPage</xref>.
- uid: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeContent(reactor.core.publisher.Flux<java.nio.ByteBuffer>,long,com.azure.ai.formrecognizer.models.RecognizeOptions)
  id: beginRecognizeContent(reactor.core.publisher.Flux<java.nio.ByteBuffer>,long,com.azure.ai.formrecognizer.models.RecognizeOptions)
  artifact: com.azure:azure-ai-formrecognizer:1.0.0-beta.4
  parent: com.azure.ai.formrecognizer.FormRecognizerAsyncClient
  langs:
  - java
  name: beginRecognizeContent(Flux<ByteBuffer> form, long length, RecognizeOptions recognizeOptions)
  nameWithType: FormRecognizerAsyncClient.beginRecognizeContent(Flux<ByteBuffer> form, long length, RecognizeOptions recognizeOptions)
  fullName: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeContent(Flux<ByteBuffer> form, long length, RecognizeOptions recognizeOptions)
  overload: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeContent*
  type: Method
  package: com.azure.ai.formrecognizer
  summary: >-
    Recognizes content/layout data using optical character recognition (OCR).


    The service does not support cancellation of the long running operation and returns with an error message indicating absence of cancellation support.


    Note that the `data` passed must be replayable if retries are enabled (the default). In other words, the `Flux` must produce the same data each time it is subscribed to.


    **Code sample**


    ```java

    File form = new File("{local/file_path/fileName.jpg}");
     // Utility method to convert input stream to Byte buffer
     Flux<ByteBuffer> buffer = toFluxByteBuffer(new ByteArrayInputStream(Files.readAllBytes(form.toPath())));
     formRecognizerAsyncClient.beginRecognizeContent(buffer, form.length(),
         new RecognizeOptions()
             .setContentType(FormContentType.APPLICATION_PDF)
             .setPollInterval(Duration.ofSeconds(5)))
         .flatMap(recognizePollingOperation ->
             // if training polling operation completed, retrieve the final result.
             recognizePollingOperation.getFinalResult())
         .subscribe(contentPageResult ->
             contentPageResult.forEach(formPage -> {
                 System.out.printf("Page Angle: %s%n", formPage.getTextAngle());
                 System.out.printf("Page Dimension unit: %s%n", formPage.getUnit());
                 // Table information
                 System.out.println("Recognized Tables: ");
                 formPage.getTables().forEach(formTable -> formTable.getCells().forEach(recognizedTableCell ->
                     System.out.printf("%s ", recognizedTableCell.getText())));
             }));
    ```
  syntax:
    content: public PollerFlux<OperationResult,List<FormPage>> beginRecognizeContent(Flux<ByteBuffer> form, long length, RecognizeOptions recognizeOptions)
    parameters:
    - id: form
      type: reactor.core.publisher.Flux<java.nio.ByteBuffer>
      description: The data of the form to recognize content information from.
    - id: length
      type: long
      description: The exact length of the data.
    - id: recognizeOptions
      type: com.azure.ai.formrecognizer.models.RecognizeOptions
      description: >-
        The additional configurable <xref uid="com.azure.ai.formrecognizer.models.RecognizeOptions" data-throw-if-not-resolved="false">options</xref> that may be passed when
         recognizing content/layout on a form.
    return:
      type: com.azure.core.util.polling.PollerFlux<com.azure.ai.formrecognizer.models.OperationResult,java.util.List<com.azure.ai.formrecognizer.models.FormPage>>
      description: >-
        A <xref uid="com.azure.core.util.polling.PollerFlux" data-throw-if-not-resolved="false">PollerFlux</xref> polls the recognize content operation until it has completed, has failed, or has
         been cancelled. The completed operation returns a List of <xref uid="com.azure.ai.formrecognizer.models.FormPage" data-throw-if-not-resolved="false">FormPage</xref>.
- uid: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeContentFromUrl(java.lang.String)
  id: beginRecognizeContentFromUrl(java.lang.String)
  artifact: com.azure:azure-ai-formrecognizer:1.0.0-beta.4
  parent: com.azure.ai.formrecognizer.FormRecognizerAsyncClient
  langs:
  - java
  name: beginRecognizeContentFromUrl(String formUrl)
  nameWithType: FormRecognizerAsyncClient.beginRecognizeContentFromUrl(String formUrl)
  fullName: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeContentFromUrl(String formUrl)
  overload: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeContentFromUrl*
  type: Method
  package: com.azure.ai.formrecognizer
  summary: >-
    Recognizes content/layout data from documents using optical character recognition (OCR).


    The service does not support cancellation of the long running operation and returns with an error message indicating absence of cancellation support.


    **Code sample**


    ```java

    String formUrl = "{formUrl}";
     formRecognizerAsyncClient.beginRecognizeContentFromUrl(formUrl).flatMap(
         recognizePollingOperation ->
             recognizePollingOperation.getFinalResult()).subscribe(layoutPageResults ->
                 layoutPageResults.forEach(recognizedForm -> {
                     System.out.printf("Page Angle: %s%n", recognizedForm.getTextAngle());
                     System.out.printf("Page Dimension unit: %s%n", recognizedForm.getUnit());
                     // Table information
                     System.out.println("Recognized Tables: ");
                     recognizedForm.getTables().forEach(formTable ->
                         formTable.getCells().forEach(recognizedTableCell ->
                             System.out.printf("%s ", recognizedTableCell.getText())));
                 }));
    ```
  syntax:
    content: public PollerFlux<OperationResult,List<FormPage>> beginRecognizeContentFromUrl(String formUrl)
    parameters:
    - id: formUrl
      type: java.lang.String
      description: The URL of the form to analyze.
    return:
      type: com.azure.core.util.polling.PollerFlux<com.azure.ai.formrecognizer.models.OperationResult,java.util.List<com.azure.ai.formrecognizer.models.FormPage>>
      description: >-
        A <xref uid="com.azure.core.util.polling.PollerFlux" data-throw-if-not-resolved="false">PollerFlux</xref> that polls the recognize content operation until it has completed, has failed, or
         has been cancelled. The completed operation returns a List of <xref uid="com.azure.ai.formrecognizer.models.FormPage" data-throw-if-not-resolved="false">FormPage</xref>.
- uid: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeContentFromUrl(java.lang.String,com.azure.ai.formrecognizer.models.RecognizeOptions)
  id: beginRecognizeContentFromUrl(java.lang.String,com.azure.ai.formrecognizer.models.RecognizeOptions)
  artifact: com.azure:azure-ai-formrecognizer:1.0.0-beta.4
  parent: com.azure.ai.formrecognizer.FormRecognizerAsyncClient
  langs:
  - java
  name: beginRecognizeContentFromUrl(String formUrl, RecognizeOptions recognizeOptions)
  nameWithType: FormRecognizerAsyncClient.beginRecognizeContentFromUrl(String formUrl, RecognizeOptions recognizeOptions)
  fullName: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeContentFromUrl(String formUrl, RecognizeOptions recognizeOptions)
  overload: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeContentFromUrl*
  type: Method
  package: com.azure.ai.formrecognizer
  summary: >-
    Recognizes layout data from documents using optical character recognition (OCR) and a custom trained model.


    The service does not support cancellation of the long running operation and returns with an error message indicating absence of cancellation support.


    **Code sample**


    ```java

    String formUrl = "{formUrl}";
     formRecognizerAsyncClient.beginRecognizeContentFromUrl(formUrl,
         new RecognizeOptions().setPollInterval(Duration.ofSeconds(5)))
         .flatMap(recognizePollingOperation ->
             // if training polling operation completed, retrieve the final result.
             recognizePollingOperation.getFinalResult())
         .subscribe(contentPageResult ->
             contentPageResult.forEach(recognizedForm -> {
                 System.out.printf("Page Angle: %s%n", recognizedForm.getTextAngle());
                 System.out.printf("Page Dimension unit: %s%n", recognizedForm.getUnit());
                 // Table information
                 System.out.println("Recognized Tables: ");
                 recognizedForm.getTables().forEach(formTable ->
                     formTable.getCells().forEach(recognizedTableCell ->
                         System.out.printf("%s ", recognizedTableCell.getText())));
             }));
    ```
  syntax:
    content: public PollerFlux<OperationResult,List<FormPage>> beginRecognizeContentFromUrl(String formUrl, RecognizeOptions recognizeOptions)
    parameters:
    - id: formUrl
      type: java.lang.String
      description: The source URL to the input form.
    - id: recognizeOptions
      type: com.azure.ai.formrecognizer.models.RecognizeOptions
      description: >-
        The additional configurable <xref uid="com.azure.ai.formrecognizer.models.RecognizeOptions" data-throw-if-not-resolved="false">options</xref> that may be passed when
         recognizing content/layout on a form.
    return:
      type: com.azure.core.util.polling.PollerFlux<com.azure.ai.formrecognizer.models.OperationResult,java.util.List<com.azure.ai.formrecognizer.models.FormPage>>
      description: >-
        A <xref uid="com.azure.core.util.polling.PollerFlux" data-throw-if-not-resolved="false">PollerFlux</xref> that polls the recognized content/layout operation until it has completed,
         has failed, or has been cancelled. The completed operation returns a List of <xref uid="com.azure.ai.formrecognizer.models.FormPage" data-throw-if-not-resolved="false">FormPage</xref>.
- uid: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeCustomForms(reactor.core.publisher.Flux<java.nio.ByteBuffer>,long,java.lang.String)
  id: beginRecognizeCustomForms(reactor.core.publisher.Flux<java.nio.ByteBuffer>,long,java.lang.String)
  artifact: com.azure:azure-ai-formrecognizer:1.0.0-beta.4
  parent: com.azure.ai.formrecognizer.FormRecognizerAsyncClient
  langs:
  - java
  name: beginRecognizeCustomForms(Flux<ByteBuffer> form, long length, String modelId)
  nameWithType: FormRecognizerAsyncClient.beginRecognizeCustomForms(Flux<ByteBuffer> form, long length, String modelId)
  fullName: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeCustomForms(Flux<ByteBuffer> form, long length, String modelId)
  overload: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeCustomForms*
  type: Method
  package: com.azure.ai.formrecognizer
  summary: "Recognizes form data from documents using optical character recognition (OCR) and a custom trained model with or without labels.\n\nThe service does not support cancellation of the long running operation and returns with an error message indicating absence of cancellation support.\n\nNote that the `data` passed must be replayable if retries are enabled (the default). In other words, the `Flux` must produce the same data each time it is subscribed to.\n\n**Code sample**\n\n```java\nFile form = new File(\"{local/file_path/fileName.jpg}\");\n String modelId = \"{custom_trained_model_id}\";\n // Utility method to convert input stream to Byte buffer\n Flux<ByteBuffer> buffer = toFluxByteBuffer(new ByteArrayInputStream(Files.readAllBytes(form.toPath())));\n \n formRecognizerAsyncClient.beginRecognizeCustomForms(buffer, form.length(), modelId)\n     .flatMap(recognizePollingOperation ->\n         // if training polling operation completed, retrieve the final result.\n         recognizePollingOperation.getFinalResult()).subscribe(recognizedForms ->\n             recognizedForms.forEach(recognizedForm -> {\n                 recognizedForm.getFields().forEach((fieldText, fieldValue) -> {\n                     System.out.printf(\"Field text: %s%n\", fieldText);\n                     System.out.printf(\"Field value: %s%n\", fieldValue.getValue());\n                     System.out.printf(\"Confidence score: %.2f%n\", fieldValue.getConfidence());\n                 });\n             }));\n```"
  syntax:
    content: public PollerFlux<OperationResult,List<RecognizedForm>> beginRecognizeCustomForms(Flux<ByteBuffer> form, long length, String modelId)
    parameters:
    - id: form
      type: reactor.core.publisher.Flux<java.nio.ByteBuffer>
      description: The data of the form to recognize form information from.
    - id: length
      type: long
      description: The exact length of the data.
    - id: modelId
      type: java.lang.String
      description: The UUID string format custom trained model Id to be used.
    return:
      type: com.azure.core.util.polling.PollerFlux<com.azure.ai.formrecognizer.models.OperationResult,java.util.List<com.azure.ai.formrecognizer.models.RecognizedForm>>
      description: >-
        A <xref uid="com.azure.core.util.polling.PollerFlux" data-throw-if-not-resolved="false">PollerFlux</xref> that polls the recognize custom form operation until it has completed, has failed,
         or has been cancelled. The completed operation returns a List of <xref uid="com.azure.ai.formrecognizer.models.RecognizedForm" data-throw-if-not-resolved="false">RecognizedForm</xref>.
- uid: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeCustomForms(reactor.core.publisher.Flux<java.nio.ByteBuffer>,long,java.lang.String,com.azure.ai.formrecognizer.models.RecognizeOptions)
  id: beginRecognizeCustomForms(reactor.core.publisher.Flux<java.nio.ByteBuffer>,long,java.lang.String,com.azure.ai.formrecognizer.models.RecognizeOptions)
  artifact: com.azure:azure-ai-formrecognizer:1.0.0-beta.4
  parent: com.azure.ai.formrecognizer.FormRecognizerAsyncClient
  langs:
  - java
  name: beginRecognizeCustomForms(Flux<ByteBuffer> form, long length, String modelId, RecognizeOptions recognizeOptions)
  nameWithType: FormRecognizerAsyncClient.beginRecognizeCustomForms(Flux<ByteBuffer> form, long length, String modelId, RecognizeOptions recognizeOptions)
  fullName: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeCustomForms(Flux<ByteBuffer> form, long length, String modelId, RecognizeOptions recognizeOptions)
  overload: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeCustomForms*
  type: Method
  package: com.azure.ai.formrecognizer
  summary: "Recognizes form data from documents using optical character recognition (OCR) and a custom trained model with or without labels.\n\nThe service does not support cancellation of the long running operation and returns with an error message indicating absence of cancellation support.\n\nNote that the `data` passed must be replayable if retries are enabled (the default). In other words, the `Flux` must produce the same data each time it is subscribed to.\n\n**Code sample**\n\n```java\nFile form = new File(\"{local/file_path/fileName.jpg}\");\n String modelId = \"{custom_trained_model_id}\";\n boolean includeFieldElements = true;\n // Utility method to convert input stream to Byte buffer\n Flux<ByteBuffer> buffer = toFluxByteBuffer(new ByteArrayInputStream(Files.readAllBytes(form.toPath())));\n \n formRecognizerAsyncClient.beginRecognizeCustomForms(buffer, form.length(), modelId,\n     new RecognizeOptions()\n         .setContentType(FormContentType.IMAGE_JPEG)\n         .setIncludeFieldElements(includeFieldElements)\n         .setPollInterval(Duration.ofSeconds(5)))\n     .flatMap(recognizePollingOperation ->\n         // if training polling operation completed, retrieve the final result.\n         recognizePollingOperation.getFinalResult()).subscribe(recognizedForms ->\n             recognizedForms.forEach(recognizedForm -> {\n                 recognizedForm.getFields().forEach((fieldText, fieldValue) -> {\n                     System.out.printf(\"Field text: %s%n\", fieldText);\n                     System.out.printf(\"Field value: %s%n\", fieldValue.getValue());\n                     System.out.printf(\"Confidence score: %.2f%n\", fieldValue.getConfidence());\n                 });\n             }));\n```"
  syntax:
    content: public PollerFlux<OperationResult,List<RecognizedForm>> beginRecognizeCustomForms(Flux<ByteBuffer> form, long length, String modelId, RecognizeOptions recognizeOptions)
    parameters:
    - id: form
      type: reactor.core.publisher.Flux<java.nio.ByteBuffer>
      description: The data of the form to recognize form information from.
    - id: length
      type: long
      description: The exact length of the data.
    - id: modelId
      type: java.lang.String
      description: The UUID string format custom trained model Id to be used.
    - id: recognizeOptions
      type: com.azure.ai.formrecognizer.models.RecognizeOptions
      description: >-
        The additional configurable <xref uid="com.azure.ai.formrecognizer.models.RecognizeOptions" data-throw-if-not-resolved="false">options</xref> that may be passed when
         recognizing custom form.
    return:
      type: com.azure.core.util.polling.PollerFlux<com.azure.ai.formrecognizer.models.OperationResult,java.util.List<com.azure.ai.formrecognizer.models.RecognizedForm>>
      description: >-
        A <xref uid="com.azure.core.util.polling.PollerFlux" data-throw-if-not-resolved="false">PollerFlux</xref> that polls the recognize custom form operation until it has completed, has failed,
         or has been cancelled. The completed operation returns a List of <xref uid="com.azure.ai.formrecognizer.models.RecognizedForm" data-throw-if-not-resolved="false">RecognizedForm</xref>.
- uid: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeCustomFormsFromUrl(java.lang.String,java.lang.String)
  id: beginRecognizeCustomFormsFromUrl(java.lang.String,java.lang.String)
  artifact: com.azure:azure-ai-formrecognizer:1.0.0-beta.4
  parent: com.azure.ai.formrecognizer.FormRecognizerAsyncClient
  langs:
  - java
  name: beginRecognizeCustomFormsFromUrl(String formUrl, String modelId)
  nameWithType: FormRecognizerAsyncClient.beginRecognizeCustomFormsFromUrl(String formUrl, String modelId)
  fullName: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeCustomFormsFromUrl(String formUrl, String modelId)
  overload: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeCustomFormsFromUrl*
  type: Method
  package: com.azure.ai.formrecognizer
  summary: "Recognizes form data from documents using optical character recognition (OCR) and a custom trained model with or without labels.\n\nThe service does not support cancellation of the long running operation and returns with an error message indicating absence of cancellation support.\n\n**Code sample**\n\n```java\nString formUrl = \"{form_url}\";\n String modelId = \"{custom_trained_model_id}\";\n \n formRecognizerAsyncClient.beginRecognizeCustomFormsFromUrl(formUrl, modelId).flatMap(\n     recognizePollingOperation ->\n         // if training polling operation completed, retrieve the final result.\n         recognizePollingOperation.getFinalResult()).subscribe(recognizedForms ->\n             recognizedForms.forEach(recognizedForm -> {\n                 recognizedForm.getFields().forEach((fieldText, fieldValue) -> {\n                     System.out.printf(\"Field text: %s%n\", fieldText);\n                     System.out.printf(\"Field value: %s%n\", fieldValue.getValue());\n                     System.out.printf(\"Confidence score: %.2f%n\", fieldValue.getConfidence());\n                 });\n             }));\n```"
  syntax:
    content: public PollerFlux<OperationResult,List<RecognizedForm>> beginRecognizeCustomFormsFromUrl(String formUrl, String modelId)
    parameters:
    - id: formUrl
      type: java.lang.String
      description: The URL of the form to analyze.
    - id: modelId
      type: java.lang.String
      description: The UUID string format custom trained model Id to be used.
    return:
      type: com.azure.core.util.polling.PollerFlux<com.azure.ai.formrecognizer.models.OperationResult,java.util.List<com.azure.ai.formrecognizer.models.RecognizedForm>>
      description: >-
        A <xref uid="com.azure.core.util.polling.PollerFlux" data-throw-if-not-resolved="false">PollerFlux</xref> that polls the recognize custom form operation until it has completed, has failed,
         or has been cancelled. The completed operation returns a List of <xref uid="com.azure.ai.formrecognizer.models.RecognizedForm" data-throw-if-not-resolved="false">RecognizedForm</xref>.
- uid: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeCustomFormsFromUrl(java.lang.String,java.lang.String,com.azure.ai.formrecognizer.models.RecognizeOptions)
  id: beginRecognizeCustomFormsFromUrl(java.lang.String,java.lang.String,com.azure.ai.formrecognizer.models.RecognizeOptions)
  artifact: com.azure:azure-ai-formrecognizer:1.0.0-beta.4
  parent: com.azure.ai.formrecognizer.FormRecognizerAsyncClient
  langs:
  - java
  name: beginRecognizeCustomFormsFromUrl(String formUrl, String modelId, RecognizeOptions recognizeOptions)
  nameWithType: FormRecognizerAsyncClient.beginRecognizeCustomFormsFromUrl(String formUrl, String modelId, RecognizeOptions recognizeOptions)
  fullName: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeCustomFormsFromUrl(String formUrl, String modelId, RecognizeOptions recognizeOptions)
  overload: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeCustomFormsFromUrl*
  type: Method
  package: com.azure.ai.formrecognizer
  summary: "Recognizes form data from documents using optical character recognition (OCR) and a custom trained model.\n\nThe service does not support cancellation of the long running operation and returns with an error message indicating absence of cancellation support.\n\n**Code sample**\n\n```java\nString formUrl = \"{formUrl}\";\n String modelId = \"{model_id}\";\n boolean includeTextContent = true;\n \n formRecognizerAsyncClient.beginRecognizeCustomFormsFromUrl(formUrl, modelId,\n     new RecognizeOptions()\n         .setIncludeFieldElements(includeTextContent)\n         .setPollInterval(Duration.ofSeconds(10)))\n     .flatMap(recognizePollingOperation ->\n         // if training polling operation completed, retrieve the final result.\n         recognizePollingOperation.getFinalResult()).subscribe(recognizedForms ->\n             recognizedForms.forEach(recognizedForm -> {\n                 recognizedForm.getFields().forEach((fieldText, fieldValue) -> {\n                     System.out.printf(\"Field text: %s%n\", fieldText);\n                     System.out.printf(\"Field value: %s%n\", fieldValue.getValue());\n                     System.out.printf(\"Confidence score: %.2f%n\", fieldValue.getConfidence());\n                 });\n             }));\n```"
  syntax:
    content: public PollerFlux<OperationResult,List<RecognizedForm>> beginRecognizeCustomFormsFromUrl(String formUrl, String modelId, RecognizeOptions recognizeOptions)
    parameters:
    - id: formUrl
      type: java.lang.String
      description: The source URL to the input form.
    - id: modelId
      type: java.lang.String
      description: The UUID string format custom trained model Id to be used.
    - id: recognizeOptions
      type: com.azure.ai.formrecognizer.models.RecognizeOptions
      description: >-
        The additional configurable <xref uid="com.azure.ai.formrecognizer.models.RecognizeOptions" data-throw-if-not-resolved="false">options</xref> that may be passed when
         recognizing custom form.
    return:
      type: com.azure.core.util.polling.PollerFlux<com.azure.ai.formrecognizer.models.OperationResult,java.util.List<com.azure.ai.formrecognizer.models.RecognizedForm>>
      description: >-
        A <xref uid="com.azure.core.util.polling.PollerFlux" data-throw-if-not-resolved="false">PollerFlux</xref> that polls the recognize custom form operation until it has completed, has failed,
         or has been cancelled. The completed operation returns a List of <xref uid="com.azure.ai.formrecognizer.models.RecognizedForm" data-throw-if-not-resolved="false">RecognizedForm</xref>.
- uid: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeReceipts(reactor.core.publisher.Flux<java.nio.ByteBuffer>,long)
  id: beginRecognizeReceipts(reactor.core.publisher.Flux<java.nio.ByteBuffer>,long)
  artifact: com.azure:azure-ai-formrecognizer:1.0.0-beta.4
  parent: com.azure.ai.formrecognizer.FormRecognizerAsyncClient
  langs:
  - java
  name: beginRecognizeReceipts(Flux<ByteBuffer> receipt, long length)
  nameWithType: FormRecognizerAsyncClient.beginRecognizeReceipts(Flux<ByteBuffer> receipt, long length)
  fullName: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeReceipts(Flux<ByteBuffer> receipt, long length)
  overload: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeReceipts*
  type: Method
  package: com.azure.ai.formrecognizer
  summary: "Recognizes receipt data using optical character recognition (OCR) and a prebuilt receipt trained model.\n\nThe service does not support cancellation of the long running operation and returns with an error message indicating absence of cancellation support.\n\nSee [here][] for fields found on a receipt. Note that the `receipt` passed must be replayable if retries are enabled (the default). In other words, the `Flux` must produce the same data each time it is subscribed to.\n\n**Code sample**\n\n```java\nFile receipt = new File(\"{file_source_url}\");\n Flux<ByteBuffer> buffer = toFluxByteBuffer(new ByteArrayInputStream(Files.readAllBytes(receipt.toPath())));\n formRecognizerAsyncClient.beginRecognizeReceipts(buffer, receipt.length())\n     .subscribe(recognizePollingOperation ->\n         // if training polling operation completed, retrieve the final result.\n         recognizePollingOperation.getFinalResult().subscribe(recognizedReceipts -> {\n             for (int i = 0; i < recognizedReceipts.size(); i++) {\n                 RecognizedForm recognizedForm = recognizedReceipts.get(i);\n                 Map<String, FormField<?>> recognizedFields = recognizedForm.getFields();\n                 System.out.printf(\"----------- Recognized Receipt page %d -----------%n\", i);\n                 FormField<?> merchantNameField = recognizedFields.get(\"MerchantName\");\n                 if (merchantNameField != null) {\n                     if (FieldValueType.STRING.equals(merchantNameField.getValueType())) {\n                         String merchantName = FieldValueType.STRING.cast(merchantNameField);\n                         System.out.printf(\"Merchant Name: %s, confidence: %.2f%n\",\n                             merchantName, merchantNameField.getConfidence());\n                     }\n                 }\n \n                 FormField<?> merchantPhoneNumberField = recognizedFields.get(\"MerchantPhoneNumber\");\n                 if (merchantPhoneNumberField != null) {\n                     if (FieldValueType.PHONE_NUMBER.equals(merchantNameField.getValueType())) {\n                         String merchantAddress = FieldValueType.PHONE_NUMBER.cast(merchantPhoneNumberField);\n                         System.out.printf(\"Merchant Phone number: %s, confidence: %.2f%n\",\n                             merchantAddress, merchantPhoneNumberField.getConfidence());\n                     }\n                 }\n \n                 FormField<?> transactionDateField = recognizedFields.get(\"TransactionDate\");\n                 if (transactionDateField != null) {\n                     if (FieldValueType.DATE.equals(transactionDateField.getValueType())) {\n                         LocalDate transactionDate = FieldValueType.DATE.cast(transactionDateField);\n                         System.out.printf(\"Transaction Date: %s, confidence: %.2f%n\",\n                             transactionDate, transactionDateField.getConfidence());\n                     }\n                 }\n \n                 FormField<?> receiptItemsField = recognizedFields.get(\"Items\");\n                 if (receiptItemsField != null) {\n                     System.out.printf(\"Receipt Items: %n\");\n                     if (FieldValueType.LIST.equals(receiptItemsField.getValueType())) {\n                         List<FormField<?>> receiptItems = FieldValueType.LIST.cast(receiptItemsField);\n                         receiptItems.forEach(receiptItem -> {\n                             if (FieldValueType.MAP.equals(receiptItem.getValueType())) {\n \n                                 Map<String, FormField<?>> formFieldMap = FieldValueType.MAP.cast(receiptItem);\n                                 formFieldMap.forEach((key, formField) -> {\n                                     if (\"Quantity\".equals(key)) {\n                                         if (FieldValueType.DOUBLE.equals(formField.getValueType())) {\n                                             Float quantity = FieldValueType.DOUBLE.cast(formField);\n                                             System.out.printf(\"Quantity: %f, confidence: %.2f%n\",\n                                                 quantity, formField.getConfidence());\n                                         }\n                                     }\n                                 });\n                             }\n                         });\n                     }\n                 }\n             }\n         }));\n```\n\n\n[here]: https://aka.ms/azsdk/python/formrecognizer/receiptfields"
  syntax:
    content: public PollerFlux<OperationResult,List<RecognizedForm>> beginRecognizeReceipts(Flux<ByteBuffer> receipt, long length)
    parameters:
    - id: receipt
      type: reactor.core.publisher.Flux<java.nio.ByteBuffer>
      description: The data of the document to recognize receipt information from.
    - id: length
      type: long
      description: The exact length of the data.
    return:
      type: com.azure.core.util.polling.PollerFlux<com.azure.ai.formrecognizer.models.OperationResult,java.util.List<com.azure.ai.formrecognizer.models.RecognizedForm>>
      description: >-
        A <xref uid="com.azure.core.util.polling.PollerFlux" data-throw-if-not-resolved="false">PollerFlux</xref> that polls the recognize receipt operation until it has completed, has failed,
         or has been cancelled. The completed operation returns a List of <xref uid="com.azure.ai.formrecognizer.models.RecognizedForm" data-throw-if-not-resolved="false">RecognizedForm</xref>.
- uid: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeReceipts(reactor.core.publisher.Flux<java.nio.ByteBuffer>,long,com.azure.ai.formrecognizer.models.RecognizeOptions)
  id: beginRecognizeReceipts(reactor.core.publisher.Flux<java.nio.ByteBuffer>,long,com.azure.ai.formrecognizer.models.RecognizeOptions)
  artifact: com.azure:azure-ai-formrecognizer:1.0.0-beta.4
  parent: com.azure.ai.formrecognizer.FormRecognizerAsyncClient
  langs:
  - java
  name: beginRecognizeReceipts(Flux<ByteBuffer> receipt, long length, RecognizeOptions recognizeOptions)
  nameWithType: FormRecognizerAsyncClient.beginRecognizeReceipts(Flux<ByteBuffer> receipt, long length, RecognizeOptions recognizeOptions)
  fullName: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeReceipts(Flux<ByteBuffer> receipt, long length, RecognizeOptions recognizeOptions)
  overload: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeReceipts*
  type: Method
  package: com.azure.ai.formrecognizer
  summary: "Recognizes receipt data from documents using optical character recognition (OCR) and a prebuilt receipt trained model.\n\nThe service does not support cancellation of the long running operation and returns with an error message indicating absence of cancellation support.\n\nSee [here][] for fields found on a receipt. Note that the `data` passed must be replayable if retries are enabled (the default). In other words, the `Flux` must produce the same data each time it is subscribed to.\n\n**Code sample**\n\n```java\nFile receipt = new File(\"{local/file_path/fileName.jpg}\");\n boolean includeFieldElements = true;\n // Utility method to convert input stream to Byte buffer\n Flux<ByteBuffer> buffer = toFluxByteBuffer(new ByteArrayInputStream(Files.readAllBytes(receipt.toPath())));\n formRecognizerAsyncClient.beginRecognizeReceipts(buffer, receipt.length(),\n     new RecognizeOptions()\n         .setContentType(FormContentType.IMAGE_JPEG)\n         .setIncludeFieldElements(includeFieldElements)\n         .setPollInterval(Duration.ofSeconds(5)))\n     .subscribe(recognizePollingOperation ->\n         // if training polling operation completed, retrieve the final result.\n         recognizePollingOperation.getFinalResult().subscribe(recognizedReceipts -> {\n             for (int i = 0; i < recognizedReceipts.size(); i++) {\n                 RecognizedForm recognizedForm = recognizedReceipts.get(i);\n                 Map<String, FormField<?>> recognizedFields = recognizedForm.getFields();\n                 System.out.printf(\"----------- Recognized Receipt page %d -----------%n\", i);\n                 FormField<?> merchantNameField = recognizedFields.get(\"MerchantName\");\n                 if (merchantNameField != null) {\n                     if (FieldValueType.STRING.equals(merchantNameField.getValueType())) {\n                         String merchantName = FieldValueType.STRING.cast(merchantNameField);\n                         System.out.printf(\"Merchant Name: %s, confidence: %.2f%n\",\n                             merchantName, merchantNameField.getConfidence());\n                     }\n                 }\n \n                 FormField<?> merchantPhoneNumberField = recognizedFields.get(\"MerchantPhoneNumber\");\n                 if (merchantPhoneNumberField != null) {\n                     if (FieldValueType.PHONE_NUMBER.equals(merchantNameField.getValueType())) {\n                         String merchantAddress = FieldValueType.PHONE_NUMBER.cast(merchantPhoneNumberField);\n                         System.out.printf(\"Merchant Phone number: %s, confidence: %.2f%n\",\n                             merchantAddress, merchantPhoneNumberField.getConfidence());\n                     }\n                 }\n \n                 FormField<?> transactionDateField = recognizedFields.get(\"TransactionDate\");\n                 if (transactionDateField != null) {\n                     if (FieldValueType.DATE.equals(transactionDateField.getValueType())) {\n                         LocalDate transactionDate = FieldValueType.DATE.cast(transactionDateField);\n                         System.out.printf(\"Transaction Date: %s, confidence: %.2f%n\",\n                             transactionDate, transactionDateField.getConfidence());\n                     }\n                 }\n \n                 FormField<?> receiptItemsField = recognizedFields.get(\"Items\");\n                 if (receiptItemsField != null) {\n                     System.out.printf(\"Receipt Items: %n\");\n                     if (FieldValueType.LIST.equals(receiptItemsField.getValueType())) {\n                         List<FormField<?>> receiptItems = FieldValueType.LIST.cast(receiptItemsField);\n                         receiptItems.forEach(receiptItem -> {\n                             if (FieldValueType.MAP.equals(receiptItem.getValueType())) {\n \n                                 Map<String, FormField<?>> formFieldMap = FieldValueType.MAP.cast(receiptItem);\n                                 formFieldMap.forEach((key, formField) -> {\n                                     if (\"Quantity\".equals(key)) {\n                                         if (FieldValueType.DOUBLE.equals(formField.getValueType())) {\n                                             Float quantity = FieldValueType.DOUBLE.cast(formField);\n                                             System.out.printf(\"Quantity: %f, confidence: %.2f%n\",\n                                                 quantity, formField.getConfidence());\n                                         }\n                                     }\n                                 });\n                             }\n                         });\n                     }\n                 }\n             }\n         }));\n```\n\n\n[here]: https://aka.ms/azsdk/python/formrecognizer/receiptfields"
  syntax:
    content: public PollerFlux<OperationResult,List<RecognizedForm>> beginRecognizeReceipts(Flux<ByteBuffer> receipt, long length, RecognizeOptions recognizeOptions)
    parameters:
    - id: receipt
      type: reactor.core.publisher.Flux<java.nio.ByteBuffer>
      description: The data of the document to recognize receipt information from.
    - id: length
      type: long
      description: The exact length of the data.
    - id: recognizeOptions
      type: com.azure.ai.formrecognizer.models.RecognizeOptions
      description: >-
        The additional configurable <xref uid="com.azure.ai.formrecognizer.models.RecognizeOptions" data-throw-if-not-resolved="false">options</xref> that may be passed when
         analyzing a receipt.
    return:
      type: com.azure.core.util.polling.PollerFlux<com.azure.ai.formrecognizer.models.OperationResult,java.util.List<com.azure.ai.formrecognizer.models.RecognizedForm>>
      description: >-
        A <xref uid="com.azure.core.util.polling.PollerFlux" data-throw-if-not-resolved="false">PollerFlux</xref> that polls the recognize receipt operation until it has completed, has failed,
         or has been cancelled. The completed operation returns a List of <xref uid="com.azure.ai.formrecognizer.models.RecognizedForm" data-throw-if-not-resolved="false">RecognizedForm</xref>.
- uid: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeReceiptsFromUrl(java.lang.String)
  id: beginRecognizeReceiptsFromUrl(java.lang.String)
  artifact: com.azure:azure-ai-formrecognizer:1.0.0-beta.4
  parent: com.azure.ai.formrecognizer.FormRecognizerAsyncClient
  langs:
  - java
  name: beginRecognizeReceiptsFromUrl(String receiptUrl)
  nameWithType: FormRecognizerAsyncClient.beginRecognizeReceiptsFromUrl(String receiptUrl)
  fullName: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeReceiptsFromUrl(String receiptUrl)
  overload: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeReceiptsFromUrl*
  type: Method
  package: com.azure.ai.formrecognizer
  summary: "Recognizes receipt data using optical character recognition (OCR) and a prebuilt receipt trained model.\n\nThe service does not support cancellation of the long running operation and returns with an error message indicating absence of cancellation support.\n\nSee [here][] for fields found on a receipt.\n\n**Code sample**\n\n```java\nString receiptUrl = \"{receiptUrl}\";\n formRecognizerAsyncClient.beginRecognizeReceiptsFromUrl(receiptUrl)\n     .flatMap(recognizePollingOperation ->\n         // if training polling operation completed, retrieve the final result.\n         recognizePollingOperation.getFinalResult())\n     .subscribe(recognizedReceipts -> {\n         for (int i = 0; i < recognizedReceipts.size(); i++) {\n             RecognizedForm recognizedForm = recognizedReceipts.get(i);\n             Map<String, FormField<?>> recognizedFields = recognizedForm.getFields();\n             System.out.printf(\"----------- Recognized Receipt page %d -----------%n\", i);\n             FormField<?> merchantNameField = recognizedFields.get(\"MerchantName\");\n             if (merchantNameField != null) {\n                 if (FieldValueType.STRING.equals(merchantNameField.getValueType())) {\n                     String merchantName = FieldValueType.STRING.cast(merchantNameField);\n                     System.out.printf(\"Merchant Name: %s, confidence: %.2f%n\",\n                         merchantName, merchantNameField.getConfidence());\n                 }\n             }\n \n             FormField<?> merchantPhoneNumberField = recognizedFields.get(\"MerchantPhoneNumber\");\n             if (merchantPhoneNumberField != null) {\n                 if (FieldValueType.PHONE_NUMBER.equals(merchantNameField.getValueType())) {\n                     String merchantAddress = FieldValueType.PHONE_NUMBER.cast(merchantPhoneNumberField);\n                     System.out.printf(\"Merchant Phone number: %s, confidence: %.2f%n\",\n                         merchantAddress, merchantPhoneNumberField.getConfidence());\n                 }\n             }\n \n             FormField<?> transactionDateField = recognizedFields.get(\"TransactionDate\");\n             if (transactionDateField != null) {\n                 if (FieldValueType.DATE.equals(transactionDateField.getValueType())) {\n                     LocalDate transactionDate = FieldValueType.DATE.cast(transactionDateField);\n                     System.out.printf(\"Transaction Date: %s, confidence: %.2f%n\",\n                         transactionDate, transactionDateField.getConfidence());\n                 }\n             }\n \n             FormField<?> receiptItemsField = recognizedFields.get(\"Items\");\n             if (receiptItemsField != null) {\n                 System.out.printf(\"Receipt Items: %n\");\n                 if (FieldValueType.LIST.equals(receiptItemsField.getValueType())) {\n                     List<FormField<?>> receiptItems = FieldValueType.LIST.cast(receiptItemsField);\n                     receiptItems.forEach(receiptItem -> {\n                         if (FieldValueType.MAP.equals(receiptItem.getValueType())) {\n \n                             Map<String, FormField<?>> formFieldMap = FieldValueType.MAP.cast(receiptItem);\n                             formFieldMap.forEach((key, formField) -> {\n                                 if (\"Quantity\".equals(key)) {\n                                     if (FieldValueType.DOUBLE.equals(formField.getValueType())) {\n                                         Float quantity = FieldValueType.DOUBLE.cast(formField);\n                                         System.out.printf(\"Quantity: %f, confidence: %.2f%n\",\n                                             quantity, formField.getConfidence());\n                                     }\n                                 }\n                             });\n                         }\n                     });\n                 }\n             }\n         }\n     });\n```\n\n\n[here]: https://aka.ms/azsdk/python/formrecognizer/receiptfields"
  syntax:
    content: public PollerFlux<OperationResult,List<RecognizedForm>> beginRecognizeReceiptsFromUrl(String receiptUrl)
    parameters:
    - id: receiptUrl
      type: java.lang.String
      description: The URL of the receipt to analyze.
    return:
      type: com.azure.core.util.polling.PollerFlux<com.azure.ai.formrecognizer.models.OperationResult,java.util.List<com.azure.ai.formrecognizer.models.RecognizedForm>>
      description: >-
        A <xref uid="com.azure.core.util.polling.PollerFlux" data-throw-if-not-resolved="false">PollerFlux</xref> that polls the recognize receipt operation until it has completed, has failed,
         or has been cancelled. The completed operation returns a List of <xref uid="com.azure.ai.formrecognizer.models.RecognizedForm" data-throw-if-not-resolved="false">RecognizedForm</xref>.
- uid: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeReceiptsFromUrl(java.lang.String,com.azure.ai.formrecognizer.models.RecognizeOptions)
  id: beginRecognizeReceiptsFromUrl(java.lang.String,com.azure.ai.formrecognizer.models.RecognizeOptions)
  artifact: com.azure:azure-ai-formrecognizer:1.0.0-beta.4
  parent: com.azure.ai.formrecognizer.FormRecognizerAsyncClient
  langs:
  - java
  name: beginRecognizeReceiptsFromUrl(String receiptUrl, RecognizeOptions recognizeOptions)
  nameWithType: FormRecognizerAsyncClient.beginRecognizeReceiptsFromUrl(String receiptUrl, RecognizeOptions recognizeOptions)
  fullName: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeReceiptsFromUrl(String receiptUrl, RecognizeOptions recognizeOptions)
  overload: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeReceiptsFromUrl*
  type: Method
  package: com.azure.ai.formrecognizer
  summary: "Recognizes receipt data using optical character recognition (OCR) and a prebuilt receipt trained model.\n\nThe service does not support cancellation of the long running operation and returns with an error message indicating absence of cancellation support.\n\n**Code sample**\n\n```java\nString receiptUrl = \"{receiptUrl}\";\n boolean includeTextContent = true;\n formRecognizerAsyncClient.beginRecognizeReceiptsFromUrl(receiptUrl,\n     new RecognizeOptions()\n         .setIncludeFieldElements(includeTextContent)\n         .setPollInterval(Duration.ofSeconds(5)))\n     .flatMap(recognizePollingOperation ->\n         // if training polling operation completed, retrieve the final result.\n         recognizePollingOperation.getFinalResult())\n     .subscribe(recognizedReceipts -> {\n         for (int i = 0; i < recognizedReceipts.size(); i++) {\n             RecognizedForm recognizedReceipt = recognizedReceipts.get(i);\n             Map<String, FormField<?>> recognizedFields = recognizedReceipt.getFields();\n             System.out.printf(\"----------- Recognized Receipt page %d -----------%n\", i);\n             FormField<?> merchantNameField = recognizedFields.get(\"MerchantName\");\n             if (merchantNameField != null) {\n                 if (FieldValueType.STRING.equals(merchantNameField.getValueType())) {\n                     String merchantName = FieldValueType.STRING.cast(merchantNameField);\n                     System.out.printf(\"Merchant Name: %s, confidence: %.2f%n\",\n                         merchantName, merchantNameField.getConfidence());\n                 }\n             }\n \n             FormField<?> merchantPhoneNumberField = recognizedFields.get(\"MerchantPhoneNumber\");\n             if (merchantPhoneNumberField != null) {\n                 if (FieldValueType.PHONE_NUMBER.equals(merchantNameField.getValueType())) {\n                     String merchantAddress = FieldValueType.PHONE_NUMBER.cast(merchantPhoneNumberField);\n                     System.out.printf(\"Merchant Phone number: %s, confidence: %.2f%n\",\n                         merchantAddress, merchantPhoneNumberField.getConfidence());\n                 }\n             }\n \n             FormField<?> transactionDateField = recognizedFields.get(\"TransactionDate\");\n             if (transactionDateField != null) {\n                 if (FieldValueType.DATE.equals(transactionDateField.getValueType())) {\n                     LocalDate transactionDate = FieldValueType.DATE.cast(transactionDateField);\n                     System.out.printf(\"Transaction Date: %s, confidence: %.2f%n\",\n                         transactionDate, transactionDateField.getConfidence());\n                 }\n             }\n \n             FormField<?> receiptItemsField = recognizedFields.get(\"Items\");\n             if (receiptItemsField != null) {\n                 System.out.printf(\"Receipt Items: %n\");\n                 if (FieldValueType.LIST.equals(receiptItemsField.getValueType())) {\n                     List<FormField<?>> receiptItems = FieldValueType.LIST.cast(receiptItemsField);\n                     receiptItems.forEach(receiptItem -> {\n                         if (FieldValueType.MAP.equals(receiptItem.getValueType())) {\n \n                             Map<String, FormField<?>> formFieldMap = FieldValueType.MAP.cast(receiptItem);\n                             formFieldMap.forEach((key, formField) -> {\n                                 if (\"Quantity\".equals(key)) {\n                                     if (FieldValueType.DOUBLE.equals(formField.getValueType())) {\n                                         Float quantity = FieldValueType.DOUBLE.cast(formField);\n                                         System.out.printf(\"Quantity: %f, confidence: %.2f%n\",\n                                             quantity, formField.getConfidence());\n                                     }\n                                 }\n                             });\n                         }\n                     });\n                 }\n             }\n         }\n     });\n```"
  syntax:
    content: public PollerFlux<OperationResult,List<RecognizedForm>> beginRecognizeReceiptsFromUrl(String receiptUrl, RecognizeOptions recognizeOptions)
    parameters:
    - id: receiptUrl
      type: java.lang.String
      description: The source URL to the input receipt.
    - id: recognizeOptions
      type: com.azure.ai.formrecognizer.models.RecognizeOptions
      description: >-
        The additional configurable <xref uid="com.azure.ai.formrecognizer.models.RecognizeOptions" data-throw-if-not-resolved="false">options</xref> that may be passed when
         analyzing a receipt.
    return:
      type: com.azure.core.util.polling.PollerFlux<com.azure.ai.formrecognizer.models.OperationResult,java.util.List<com.azure.ai.formrecognizer.models.RecognizedForm>>
      description: >-
        A <xref uid="com.azure.core.util.polling.PollerFlux" data-throw-if-not-resolved="false">PollerFlux</xref> that polls the recognize receipt operation until it has completed, has failed,
         or has been cancelled. The completed operation returns a List of <xref uid="com.azure.ai.formrecognizer.models.RecognizedForm" data-throw-if-not-resolved="false">RecognizedForm</xref>.
references:
- uid: com.azure.ai.formrecognizer.implementation.FormRecognizerClientImpl
  name: FormRecognizerClientImpl
  nameWithType: FormRecognizerClientImpl
  fullName: com.azure.ai.formrecognizer.implementation.FormRecognizerClientImpl
- uid: com.azure.ai.formrecognizer.FormRecognizerServiceVersion
  name: FormRecognizerServiceVersion
  nameWithType: FormRecognizerServiceVersion
  fullName: com.azure.ai.formrecognizer.FormRecognizerServiceVersion
- uid: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.FormRecognizerAsyncClient*
  name: FormRecognizerAsyncClient
  nameWithType: FormRecognizerAsyncClient.FormRecognizerAsyncClient
  fullName: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.FormRecognizerAsyncClient
  package: com.azure.ai.formrecognizer
- uid: java.lang.String
  spec.java:
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
- uid: com.azure.core.util.polling.PollerFlux<com.azure.ai.formrecognizer.models.OperationResult,java.util.List<com.azure.ai.formrecognizer.models.RecognizedForm>>
  spec.java:
  - uid: com.azure.core.util.polling.PollerFlux
    name: PollerFlux
    fullName: com.azure.core.util.polling.PollerFlux
  - name: <
    fullName: <
  - uid: com.azure.ai.formrecognizer.models.OperationResult
    name: OperationResult
    fullName: com.azure.ai.formrecognizer.models.OperationResult
  - name: ','
    fullName: ','
  - uid: java.util.List
    name: List
    fullName: java.util.List
  - name: <
    fullName: <
  - uid: com.azure.ai.formrecognizer.models.RecognizedForm
    name: RecognizedForm
    fullName: com.azure.ai.formrecognizer.models.RecognizedForm
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
- uid: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeCustomFormsFromUrl*
  name: beginRecognizeCustomFormsFromUrl
  nameWithType: FormRecognizerAsyncClient.beginRecognizeCustomFormsFromUrl
  fullName: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeCustomFormsFromUrl
  package: com.azure.ai.formrecognizer
- uid: com.azure.ai.formrecognizer.models.RecognizeOptions
  name: RecognizeOptions
  nameWithType: RecognizeOptions
  fullName: com.azure.ai.formrecognizer.models.RecognizeOptions
- uid: reactor.core.publisher.Flux<java.nio.ByteBuffer>
  spec.java:
  - uid: reactor.core.publisher.Flux
    name: Flux
    fullName: reactor.core.publisher.Flux
  - name: <
    fullName: <
  - uid: java.nio.ByteBuffer
    name: ByteBuffer
    fullName: java.nio.ByteBuffer
  - name: '>'
    fullName: '>'
- uid: long
  spec.java:
  - uid: long
    name: long
    fullName: long
- uid: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeCustomForms*
  name: beginRecognizeCustomForms
  nameWithType: FormRecognizerAsyncClient.beginRecognizeCustomForms
  fullName: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeCustomForms
  package: com.azure.ai.formrecognizer
- uid: com.azure.core.util.polling.PollerFlux<com.azure.ai.formrecognizer.models.OperationResult,java.util.List<com.azure.ai.formrecognizer.models.FormPage>>
  spec.java:
  - uid: com.azure.core.util.polling.PollerFlux
    name: PollerFlux
    fullName: com.azure.core.util.polling.PollerFlux
  - name: <
    fullName: <
  - uid: com.azure.ai.formrecognizer.models.OperationResult
    name: OperationResult
    fullName: com.azure.ai.formrecognizer.models.OperationResult
  - name: ','
    fullName: ','
  - uid: java.util.List
    name: List
    fullName: java.util.List
  - name: <
    fullName: <
  - uid: com.azure.ai.formrecognizer.models.FormPage
    name: FormPage
    fullName: com.azure.ai.formrecognizer.models.FormPage
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
- uid: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeContentFromUrl*
  name: beginRecognizeContentFromUrl
  nameWithType: FormRecognizerAsyncClient.beginRecognizeContentFromUrl
  fullName: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeContentFromUrl
  package: com.azure.ai.formrecognizer
- uid: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeContent*
  name: beginRecognizeContent
  nameWithType: FormRecognizerAsyncClient.beginRecognizeContent
  fullName: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeContent
  package: com.azure.ai.formrecognizer
- uid: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeReceiptsFromUrl*
  name: beginRecognizeReceiptsFromUrl
  nameWithType: FormRecognizerAsyncClient.beginRecognizeReceiptsFromUrl
  fullName: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeReceiptsFromUrl
  package: com.azure.ai.formrecognizer
- uid: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeReceipts*
  name: beginRecognizeReceipts
  nameWithType: FormRecognizerAsyncClient.beginRecognizeReceipts
  fullName: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeReceipts
  package: com.azure.ai.formrecognizer
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: java.lang.Object.finalize()
  name: Object.finalize()
  nameWithType: Object.finalize()
  fullName: java.lang.Object.finalize()
- uid: java.lang.Object.clone()
  name: Object.clone()
  nameWithType: Object.clone()
  fullName: java.lang.Object.clone()
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: java.lang.Object.equals(java.lang.Object)
  name: Object.equals(Object)
  nameWithType: Object.equals(Object)
  fullName: java.lang.Object.equals(java.lang.Object)
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.lang.Object.hashCode()
  name: Object.hashCode()
  nameWithType: Object.hashCode()
  fullName: java.lang.Object.hashCode()
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: java.lang.Object.toString()
  name: Object.toString()
  nameWithType: Object.toString()
  fullName: java.lang.Object.toString()
- uid: com.azure.ai.formrecognizer.models.RecognizedForm
  name: RecognizedForm
  nameWithType: RecognizedForm
  fullName: com.azure.ai.formrecognizer.models.RecognizedForm
- uid: com.azure.ai.formrecognizer.models.OperationResult,java.util.List
  name: OperationResult,List
  nameWithType: OperationResult,List
  fullName: com.azure.ai.formrecognizer.models.OperationResult,java.util.List
- uid: com.azure.core.util.polling.PollerFlux
  name: PollerFlux
  nameWithType: PollerFlux
  fullName: com.azure.core.util.polling.PollerFlux
- uid: reactor.core.publisher.Flux
  name: Flux
  nameWithType: Flux
  fullName: reactor.core.publisher.Flux
- uid: java.nio.ByteBuffer
  name: ByteBuffer
  nameWithType: ByteBuffer
  fullName: java.nio.ByteBuffer
- uid: com.azure.ai.formrecognizer.models.FormPage
  name: FormPage
  nameWithType: FormPage
  fullName: com.azure.ai.formrecognizer.models.FormPage
