### YamlMime:JavaType
uid: "com.azure.core.util.tracing.Tracer"
fullName: "com.azure.core.util.tracing.Tracer"
name: "Tracer"
nameWithType: "Tracer"
summary: "Contract that all tracers must implement to be pluggable into the SDK."
syntax: "public interface Tracer"
fields:
- uid: "com.azure.core.util.tracing.Tracer.AZ_TRACING_NAMESPACE_KEY"
  fullName: "com.azure.core.util.tracing.Tracer.AZ_TRACING_NAMESPACE_KEY"
  name: "AZ_TRACING_NAMESPACE_KEY"
  nameWithType: "Tracer.AZ_TRACING_NAMESPACE_KEY"
  summary: "Key for <xref uid=\"com.azure.core.util.Context\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Context\"></xref> which indicates that the context contains the Azure resource provider namespace."
  modifiers:
  - "static"
  - "final"
  field:
    value: "az.namespace"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public static final String AZ_TRACING_NAMESPACE_KEY"
  desc: "Key for <xref uid=\"com.azure.core.util.Context\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Context\"></xref> which indicates that the context contains the Azure resource provider namespace."
- uid: "com.azure.core.util.tracing.Tracer.DIAGNOSTIC_ID_KEY"
  fullName: "com.azure.core.util.tracing.Tracer.DIAGNOSTIC_ID_KEY"
  name: "DIAGNOSTIC_ID_KEY"
  nameWithType: "Tracer.DIAGNOSTIC_ID_KEY"
  summary: "Key for <xref uid=\"com.azure.core.util.Context\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Context\"></xref> which indicates that the context contains a \"Diagnostic Id\" for the service call."
  modifiers:
  - "static"
  - "final"
  field:
    value: "Diagnostic-Id"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public static final String DIAGNOSTIC_ID_KEY"
  desc: "Key for <xref uid=\"com.azure.core.util.Context\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Context\"></xref> which indicates that the context contains a \"Diagnostic Id\" for the service call."
- uid: "com.azure.core.util.tracing.Tracer.DISABLE_TRACING_KEY"
  fullName: "com.azure.core.util.tracing.Tracer.DISABLE_TRACING_KEY"
  name: "DISABLE_TRACING_KEY"
  nameWithType: "Tracer.DISABLE_TRACING_KEY"
  summary: "Key for <xref uid=\"com.azure.core.util.Context\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Context\"></xref> which disables tracing for the request associated with the current context."
  modifiers:
  - "static"
  - "final"
  field:
    value: "disable-tracing"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public static final String DISABLE_TRACING_KEY"
  desc: "Key for <xref uid=\"com.azure.core.util.Context\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Context\"></xref> which disables tracing for the request associated with the current context."
- uid: "com.azure.core.util.tracing.Tracer.ENTITY_PATH_KEY"
  fullName: "com.azure.core.util.tracing.Tracer.ENTITY_PATH_KEY"
  name: "ENTITY_PATH_KEY"
  nameWithType: "Tracer.ENTITY_PATH_KEY"
  summary: "Key for <xref uid=\"com.azure.core.util.Context\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Context\"></xref> which indicates that the context contains an entity path."
  modifiers:
  - "static"
  - "final"
  field:
    value: "entity-path"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public static final String ENTITY_PATH_KEY"
  desc: "Key for <xref uid=\"com.azure.core.util.Context\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Context\"></xref> which indicates that the context contains an entity path."
- uid: "com.azure.core.util.tracing.Tracer.HOST_NAME_KEY"
  fullName: "com.azure.core.util.tracing.Tracer.HOST_NAME_KEY"
  name: "HOST_NAME_KEY"
  nameWithType: "Tracer.HOST_NAME_KEY"
  summary: "Key for <xref uid=\"com.azure.core.util.Context\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Context\"></xref> which indicates that the context contains the hostname."
  modifiers:
  - "static"
  - "final"
  field:
    value: "hostname"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public static final String HOST_NAME_KEY"
  desc: "Key for <xref uid=\"com.azure.core.util.Context\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Context\"></xref> which indicates that the context contains the hostname."
- uid: "com.azure.core.util.tracing.Tracer.MESSAGE_ENQUEUED_TIME"
  fullName: "com.azure.core.util.tracing.Tracer.MESSAGE_ENQUEUED_TIME"
  name: "MESSAGE_ENQUEUED_TIME"
  nameWithType: "Tracer.MESSAGE_ENQUEUED_TIME"
  summary: "Key for <xref uid=\"com.azure.core.util.Context\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Context\"></xref> which indicates the time of the last enqueued message in the partition's stream."
  modifiers:
  - "static"
  - "final"
  field:
    value: "x-opt-enqueued-time"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public static final String MESSAGE_ENQUEUED_TIME"
  desc: "Key for <xref uid=\"com.azure.core.util.Context\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Context\"></xref> which indicates the time of the last enqueued message in the partition's stream."
- uid: "com.azure.core.util.tracing.Tracer.PARENT_SPAN_KEY"
  fullName: "com.azure.core.util.tracing.Tracer.PARENT_SPAN_KEY"
  name: "PARENT_SPAN_KEY"
  nameWithType: "Tracer.PARENT_SPAN_KEY"
  summary: "Key for <xref uid=\"com.azure.core.util.Context\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Context\"></xref> which indicates that the context contains parent span data."
  modifiers:
  - "static"
  - "final"
  field:
    value: "parent-span"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public static final String PARENT_SPAN_KEY"
  desc: "Key for <xref uid=\"com.azure.core.util.Context\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Context\"></xref> which indicates that the context contains parent span data. This span will be used as the parent span for all spans the SDK creates.\n\nIf no span data is listed when the span is created it will default to using this span key as the parent span."
- uid: "com.azure.core.util.tracing.Tracer.SCOPE_KEY"
  fullName: "com.azure.core.util.tracing.Tracer.SCOPE_KEY"
  name: "SCOPE_KEY"
  nameWithType: "Tracer.SCOPE_KEY"
  summary: "Key for <xref uid=\"com.azure.core.util.Context\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Context\"></xref> the scope of code where the given Span is in the current Context."
  modifiers:
  - "static"
  - "final"
  field:
    value: "scope"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public static final String SCOPE_KEY"
  desc: "Key for <xref uid=\"com.azure.core.util.Context\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Context\"></xref> the scope of code where the given Span is in the current Context."
- uid: "com.azure.core.util.tracing.Tracer.SPAN_BUILDER_KEY"
  fullName: "com.azure.core.util.tracing.Tracer.SPAN_BUILDER_KEY"
  name: "SPAN_BUILDER_KEY"
  nameWithType: "Tracer.SPAN_BUILDER_KEY"
  summary: "Key for <xref uid=\"com.azure.core.util.Context\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Context\"></xref> which indicates the shared span builder that is in the current Context."
  modifiers:
  - "static"
  - "final"
  field:
    value: "builder"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public static final String SPAN_BUILDER_KEY"
  desc: "Key for <xref uid=\"com.azure.core.util.Context\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Context\"></xref> which indicates the shared span builder that is in the current Context."
- uid: "com.azure.core.util.tracing.Tracer.SPAN_CONTEXT_KEY"
  fullName: "com.azure.core.util.tracing.Tracer.SPAN_CONTEXT_KEY"
  name: "SPAN_CONTEXT_KEY"
  nameWithType: "Tracer.SPAN_CONTEXT_KEY"
  summary: "Key for <xref uid=\"com.azure.core.util.Context\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Context\"></xref> which indicates that the context contains a message span context."
  modifiers:
  - "static"
  - "final"
  field:
    value: "span-context"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public static final String SPAN_CONTEXT_KEY"
  desc: "Key for <xref uid=\"com.azure.core.util.Context\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Context\"></xref> which indicates that the context contains a message span context."
- uid: "com.azure.core.util.tracing.Tracer.USER_SPAN_NAME_KEY"
  fullName: "com.azure.core.util.tracing.Tracer.USER_SPAN_NAME_KEY"
  name: "USER_SPAN_NAME_KEY"
  nameWithType: "Tracer.USER_SPAN_NAME_KEY"
  summary: "Key for <xref uid=\"com.azure.core.util.Context\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Context\"></xref> which indicates that the context contains the name for the user spans that are created."
  modifiers:
  - "static"
  - "final"
  field:
    value: "user-span-name"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public static final String USER_SPAN_NAME_KEY"
  desc: "Key for <xref uid=\"com.azure.core.util.Context\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Context\"></xref> which indicates that the context contains the name for the user spans that are created.\n\nIf no span name is listed when the span is created it will default to using the calling method's name."
methods:
- uid: "com.azure.core.util.tracing.Tracer.addEvent(java.lang.String,java.util.Map<java.lang.String,java.lang.Object>,java.time.OffsetDateTime)"
  fullName: "com.azure.core.util.tracing.Tracer.addEvent(String name, Map<String,Object> attributes, OffsetDateTime timestamp)"
  name: "addEvent(String name, Map<String,Object> attributes, OffsetDateTime timestamp)"
  nameWithType: "Tracer.addEvent(String name, Map<String,Object> attributes, OffsetDateTime timestamp)"
  summary: "Adds an event to the current span with the provided `timestamp` and `attributes`."
  deprecatedTag: "Use <xref uid=\"com.azure.core.util.tracing.Tracer.addEvent(java.lang.String,java.util.Map<java.lang.String,java.lang.Object>,java.time.OffsetDateTime,com.azure.core.util.Context)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#addEvent(String, Map, OffsetDateTime, Context)\"></xref>"
  modifiers:
  - "default"
  parameters:
  - description: "the name of the event."
    name: "name"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "the additional attributes to be set for the event."
    name: "attributes"
    type: "<xref href=\"java.util.Map?alt=java.util.Map&text=Map\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />,<xref href=\"java.lang.Object?alt=java.lang.Object&text=Object\" data-throw-if-not-resolved=\"False\" />&gt;"
  - description: "The instant, in UTC, at which the event will be associated to the span."
    name: "timestamp"
    type: "<xref href=\"java.time.OffsetDateTime?alt=java.time.OffsetDateTime&text=OffsetDateTime\" data-throw-if-not-resolved=\"False\" />"
  syntax: "@Deprecated\npublic default void addEvent(String name, Map<String,Object> attributes, OffsetDateTime timestamp)"
  desc: "Adds an event to the current span with the provided `timestamp` and `attributes`.\n\nThis API does not provide any normalization if provided timestamps are out of range of the current span timeline\n\nSupported attribute values include String, double, boolean, long, String \\[\\], double \\[\\], long \\[\\]. Any other Object value type and null values will be silently ignored."
  hasDeprecatedTag: true
- uid: "com.azure.core.util.tracing.Tracer.addEvent(java.lang.String,java.util.Map<java.lang.String,java.lang.Object>,java.time.OffsetDateTime,com.azure.core.util.Context)"
  fullName: "com.azure.core.util.tracing.Tracer.addEvent(String name, Map<String,Object> attributes, OffsetDateTime timestamp, Context context)"
  name: "addEvent(String name, Map<String,Object> attributes, OffsetDateTime timestamp, Context context)"
  nameWithType: "Tracer.addEvent(String name, Map<String,Object> attributes, OffsetDateTime timestamp, Context context)"
  summary: "Adds an event to the span present in the `Context` with the provided `timestamp` and `attributes`."
  modifiers:
  - "default"
  parameters:
  - description: "the name of the event."
    name: "name"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "the additional attributes to be set for the event."
    name: "attributes"
    type: "<xref href=\"java.util.Map?alt=java.util.Map&text=Map\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />,<xref href=\"java.lang.Object?alt=java.lang.Object&text=Object\" data-throw-if-not-resolved=\"False\" />&gt;"
  - description: "The instant, in UTC, at which the event will be associated to the span."
    name: "timestamp"
    type: "<xref href=\"java.time.OffsetDateTime?alt=java.time.OffsetDateTime&text=OffsetDateTime\" data-throw-if-not-resolved=\"False\" />"
  - description: "the call metadata containing information of the span to which the event should be associated with."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public default void addEvent(String name, Map<String,Object> attributes, OffsetDateTime timestamp, Context context)"
  desc: "Adds an event to the span present in the `Context` with the provided `timestamp` and `attributes`.\n\nThis API does not provide any normalization if provided timestamps are out of range of the current span timeline\n\nSupported attribute values include String, double, boolean, long, String \\[\\], double \\[\\], long \\[\\]. Any other Object value type and null values will be silently ignored."
- uid: "com.azure.core.util.tracing.Tracer.addLink(com.azure.core.util.Context)"
  fullName: "com.azure.core.util.tracing.Tracer.addLink(Context context)"
  name: "addLink(Context context)"
  nameWithType: "Tracer.addLink(Context context)"
  summary: "Provides a way to link multiple tracing spans."
  modifiers:
  - "abstract"
  parameters:
  - description: "Additional metadata that is passed through the call stack."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract void addLink(Context context)"
  desc: "Provides a way to link multiple tracing spans. Used in batching operations to relate multiple requests under a single batch.\n\n**Code samples**\n\nLink multiple spans using their span context information\n\n```java\n// use the parent context containing the current tracing span to start a child span\n Context parentContext = new Context(PARENT_SPAN_KEY, \"<user-current-span>\");\n // use the returned span context information of the current tracing span to link\n Context spanContext = tracer.start(\"test.method\", parentContext, ProcessKind.MESSAGE);\n\n // Adds a link between multiple span's using the span context information of the Span\n // For each event processed, add a link with the created spanContext\n tracer.addLink(spanContext);\n```"
- uid: "com.azure.core.util.tracing.Tracer.end(int,java.lang.Throwable,com.azure.core.util.Context)"
  fullName: "com.azure.core.util.tracing.Tracer.end(int responseCode, Throwable error, Context context)"
  name: "end(int responseCode, Throwable error, Context context)"
  nameWithType: "Tracer.end(int responseCode, Throwable error, Context context)"
  summary: "Completes the current tracing span."
  modifiers:
  - "abstract"
  parameters:
  - description: "Response status code if the span is in an HTTP call context."
    name: "responseCode"
    type: "<xref href=\"int?alt=int&text=int\" data-throw-if-not-resolved=\"False\" />"
  - description: "<xref uid=\"java.lang.Throwable\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Throwable\"></xref> that happened during the span or <code>null</code> if no exception occurred."
    name: "error"
    type: "<xref href=\"java.lang.Throwable?alt=java.lang.Throwable&text=Throwable\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional metadata that is passed through the call stack."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract void end(int responseCode, Throwable error, Context context)"
  desc: "Completes the current tracing span.\n\n**Code samples**\n\nCompletes the tracing span present in the context, with the corresponding OpenTelemetry status for the given response status code\n\n```java\n// context containing the current tracing span to end\n String openTelemetrySpanKey = \"openTelemetry-span\";\n Context traceContext = new Context(PARENT_SPAN_KEY, \"<user-current-span>\");\n\n // completes the tracing span with the passed response status code\n tracer.end(200, null, traceContext);\n```"
- uid: "com.azure.core.util.tracing.Tracer.end(java.lang.String,java.lang.Throwable,com.azure.core.util.Context)"
  fullName: "com.azure.core.util.tracing.Tracer.end(String statusMessage, Throwable error, Context context)"
  name: "end(String statusMessage, Throwable error, Context context)"
  nameWithType: "Tracer.end(String statusMessage, Throwable error, Context context)"
  summary: "Completes the current tracing span for AMQP calls."
  modifiers:
  - "abstract"
  parameters:
  - description: "The error or success message that occurred during the call, or <code>null</code> if no error\n occurred."
    name: "statusMessage"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "<xref uid=\"java.lang.Throwable\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Throwable\"></xref> that happened during the span or <code>null</code> if no exception occurred."
    name: "error"
    type: "<xref href=\"java.lang.Throwable?alt=java.lang.Throwable&text=Throwable\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional metadata that is passed through the call stack."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract void end(String statusMessage, Throwable error, Context context)"
  desc: "Completes the current tracing span for AMQP calls.\n\n**Code samples**\n\nCompletes the tracing span with the corresponding OpenTelemetry status for the given status message\n\n```java\n// context containing the current tracing span to end\n // completes the tracing span with the passed status message\n tracer.end(\"success\", null, traceContext);\n```"
- uid: "com.azure.core.util.tracing.Tracer.extractContext(java.lang.String,com.azure.core.util.Context)"
  fullName: "com.azure.core.util.tracing.Tracer.extractContext(String diagnosticId, Context context)"
  name: "extractContext(String diagnosticId, Context context)"
  nameWithType: "Tracer.extractContext(String diagnosticId, Context context)"
  summary: "Extracts the span's context as <xref uid=\"com.azure.core.util.Context\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Context\"></xref> from upstream."
  modifiers:
  - "abstract"
  parameters:
  - description: "Unique identifier for the trace information of the span."
    name: "diagnosticId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional metadata that is passed through the call stack."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract Context extractContext(String diagnosticId, Context context)"
  desc: "Extracts the span's context as <xref uid=\"com.azure.core.util.Context\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Context\"></xref> from upstream.\n\n**Code samples**\n\nExtracts the corresponding span context information from a valid diagnostic id\n\n```java\n// Extracts the span context information from the passed diagnostic Id that can be used for linking spans.\n String spanImplContext = \"span-context\";\n Context spanContext = tracer.extractContext(\"valid-diagnostic-id\", Context.NONE);\n System.out.printf(\"Span context of the current tracing span: %s%n\", spanContext.getData(spanImplContext).get());\n```"
  returns:
    description: "The updated <xref uid=\"com.azure.core.util.Context\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Context\"></xref> object containing the span context."
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.core.util.tracing.Tracer.getSharedSpanBuilder(java.lang.String,com.azure.core.util.Context)"
  fullName: "com.azure.core.util.tracing.Tracer.getSharedSpanBuilder(String spanName, Context context)"
  name: "getSharedSpanBuilder(String spanName, Context context)"
  nameWithType: "Tracer.getSharedSpanBuilder(String spanName, Context context)"
  summary: "Returns a span builder with the provided name in <xref uid=\"com.azure.core.util.Context\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Context\"></xref>."
  modifiers:
  - "default"
  parameters:
  - description: "Name to give the span for the created builder."
    name: "spanName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional metadata that is passed through the call stack."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public default Context getSharedSpanBuilder(String spanName, Context context)"
  desc: "Returns a span builder with the provided name in <xref uid=\"com.azure.core.util.Context\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Context\"></xref>.\n\n**Code samples**\n\nReturns a builder with the provided span name.\n\n```java\n// Returns a span builder with the provided name\n String methodName = \"message-span\";\n Context spanContext = tracer.getSharedSpanBuilder(methodName, Context.NONE);\n System.out.printf(\"Span context of the current tracing span: %s%n\", spanContext.getData(SPAN_BUILDER_KEY).get());\n```"
  returns:
    description: "The updated <xref uid=\"com.azure.core.util.Context\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Context\"></xref> object containing the span builder."
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.core.util.tracing.Tracer.makeSpanCurrent(com.azure.core.util.Context)"
  fullName: "com.azure.core.util.tracing.Tracer.makeSpanCurrent(Context context)"
  name: "makeSpanCurrent(Context context)"
  nameWithType: "Tracer.makeSpanCurrent(Context context)"
  summary: "Makes span current."
  modifiers:
  - "default"
  parameters:
  - description: "Context with span.\n\n <p><strong>Code samples</strong></p>\n\n <p>Starts a tracing span, makes it current and ends it</p>\n <!-- src_embed com.azure.core.util.tracing.makeSpanCurrent#context -->\n <pre>\n &#47;&#47; Starts a span, makes it current and then stops it.\n Context traceContext = tracer.start&#40;&quot;EventHub.process&quot;, Context.NONE&#41;;\n\n &#47;&#47; Make sure to always use try-with-resource statement with makeSpanCurrent\n try &#40;AutoCloseable ignored = tracer.makeSpanCurrent&#40;traceContext&#41;&#41; &#123;\n     System.out.println&#40;&quot;doing some work...&quot;&#41;;\n &#125; catch &#40;Throwable throwable&#41; &#123;\n     tracer.end&#40;&quot;Failure&quot;, throwable, traceContext&#41;;\n &#125; finally &#123;\n     tracer.end&#40;&quot;OK&quot;, null, traceContext&#41;;\n &#125;\n\n </pre>\n <!-- end com.azure.core.util.tracing.makeSpanCurrent#context -->"
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public default AutoCloseable makeSpanCurrent(Context context)"
  desc: "Makes span current. Implementations may put it on ThreadLocal. Make sure to always use try-with-resource statement with makeSpanCurrent"
  returns:
    description: "Closeable that should be closed in the same thread with try-with-resource statement."
    type: "<xref href=\"java.lang.AutoCloseable?alt=java.lang.AutoCloseable&text=AutoCloseable\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.core.util.tracing.Tracer.setAttribute(java.lang.String,java.lang.String,com.azure.core.util.Context)"
  fullName: "com.azure.core.util.tracing.Tracer.setAttribute(String key, String value, Context context)"
  name: "setAttribute(String key, String value, Context context)"
  nameWithType: "Tracer.setAttribute(String key, String value, Context context)"
  summary: "Adds metadata to the current span."
  modifiers:
  - "abstract"
  parameters:
  - description: "Name of the metadata."
    name: "key"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Value of the metadata."
    name: "value"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional metadata that is passed through the call stack."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract void setAttribute(String key, String value, Context context)"
  desc: "Adds metadata to the current span. If no span information is found in the context, then no metadata is added."
- uid: "com.azure.core.util.tracing.Tracer.setSpanName(java.lang.String,com.azure.core.util.Context)"
  fullName: "com.azure.core.util.tracing.Tracer.setSpanName(String spanName, Context context)"
  name: "setSpanName(String spanName, Context context)"
  nameWithType: "Tracer.setSpanName(String spanName, Context context)"
  summary: "Sets the name for spans that are created."
  modifiers:
  - "abstract"
  parameters:
  - description: "Name to give the next span."
    name: "spanName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional metadata that is passed through the call stack."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract Context setSpanName(String spanName, Context context)"
  desc: "Sets the name for spans that are created.\n\n**Code samples**\n\nRetrieve the span name of the returned span\n\n```java\n// Sets the span name of the returned span on the context object, with key PARENT_SPAN_KEY\n String openTelemetrySpanKey = \"openTelemetry-span\";\n Context context = tracer.setSpanName(\"test-span-method\", Context.NONE);\n System.out.printf(\"Span name: %s%n\", context.getData(PARENT_SPAN_KEY).get().toString());\n```"
  returns:
    description: "The updated <xref uid=\"com.azure.core.util.Context\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Context\"></xref> object containing the name of the returned span."
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.core.util.tracing.Tracer.start(java.lang.String,com.azure.core.util.Context)"
  fullName: "com.azure.core.util.tracing.Tracer.start(String methodName, Context context)"
  name: "start(String methodName, Context context)"
  nameWithType: "Tracer.start(String methodName, Context context)"
  summary: "Creates a new tracing span."
  modifiers:
  - "abstract"
  parameters:
  - description: "Name of the method triggering the span creation."
    name: "methodName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional metadata that is passed through the call stack."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract Context start(String methodName, Context context)"
  desc: "Creates a new tracing span.\n\nThe `context` will be checked for information about a parent span. If a parent span is found, the new span will be added as a child. Otherwise, the parent span will be created and added to the `context` and any downstream `start()` calls will use the created span as the parent.\n\n**Code samples**\n\nStarts a tracing span with provided method name and explicit parent span\n\n```java\n// pass the current tracing span context to the calling method\n Context traceContext = new Context(PARENT_SPAN_KEY, \"<user-current-span>\");\n // start a new tracing span with the given method name and explicit parent span\n Context updatedContext = tracer.start(\"azure.keyvault.secrets/setsecret\", traceContext);\n System.out.printf(\"Span returned in the context object: %s%n\",\n     updatedContext.getData(PARENT_SPAN_KEY).get());\n```"
  returns:
    description: "The updated <xref uid=\"com.azure.core.util.Context\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Context\"></xref> object containing the returned span."
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.core.util.tracing.Tracer.start(java.lang.String,com.azure.core.util.Context,com.azure.core.util.tracing.ProcessKind)"
  fullName: "com.azure.core.util.tracing.Tracer.start(String methodName, Context context, ProcessKind processKind)"
  name: "start(String methodName, Context context, ProcessKind processKind)"
  nameWithType: "Tracer.start(String methodName, Context context, ProcessKind processKind)"
  summary: "Creates a new tracing span for AMQP calls."
  modifiers:
  - "abstract"
  parameters:
  - description: "Name of the method triggering the span creation."
    name: "methodName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional metadata that is passed through the call stack."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  - description: "AMQP operation kind."
    name: "processKind"
    type: "<xref href=\"com.azure.core.util.tracing.ProcessKind?alt=com.azure.core.util.tracing.ProcessKind&text=ProcessKind\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract Context start(String methodName, Context context, ProcessKind processKind)"
  desc: "Creates a new tracing span for AMQP calls.\n\nThe `context` will be checked for information about a parent span. If a parent span is found, the new span will be added as a child. Otherwise, the parent span will be created and added to the `context` and any downstream `start()` calls will use the created span as the parent.\n\nSets additional request attributes on the created span when `processKind` is <xref uid=\"com.azure.core.util.tracing.ProcessKind.SEND\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ProcessKind.SEND\"></xref>.\n\nReturns the diagnostic Id and span context of the returned span when `processKind` is <xref uid=\"com.azure.core.util.tracing.ProcessKind.MESSAGE\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ProcessKind.MESSAGE\"></xref>.\n\nCreates a new tracing span with remote parent and returns that scope when the given when `processKind` is <xref uid=\"com.azure.core.util.tracing.ProcessKind.PROCESS\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ProcessKind.PROCESS\"></xref>.\n\n**Code samples**\n\nStarts a tracing span with provided method name and AMQP operation SEND\n\n```java\n// pass the current tracing span and request metadata to the calling method\n Context sendContext = new Context(PARENT_SPAN_KEY, \"<user-current-span>\")\n     .addData(ENTITY_PATH_KEY, \"entity-path\").addData(HOST_NAME_KEY, \"hostname\");\n\n // start a new tracing span with explicit parent, sets the request attributes on the span and sets the span\n // kind to client when process kind SEND\n Context updatedSendContext = tracer.start(\"azure.eventhubs.send\", sendContext, ProcessKind.SEND);\n System.out.printf(\"Span returned in the context object: %s%n\",\n     updatedSendContext.getData(PARENT_SPAN_KEY).get());\n```\n\nStarts a tracing span with provided method name and AMQP operation MESSAGE\n\n```java\nString diagnosticIdKey = \"Diagnostic-Id\";\n // start a new tracing span with explicit parent, sets the diagnostic Id (traceparent headers) on the current\n // context when process kind MESSAGE\n Context updatedReceiveContext = tracer.start(\"azure.eventhubs.receive\", traceContext,\n     ProcessKind.MESSAGE);\n System.out.printf(\"Diagnostic Id: %s%n\", updatedReceiveContext.getData(diagnosticIdKey).get().toString());\n```\n\nStarts a tracing span with provided method name and AMQP operation PROCESS\n\n```java\nString spanImplContext = \"span-context\";\n // start a new tracing span with remote parent and uses the span in the current context to return a scope\n // when process kind PROCESS\n Context processContext = new Context(PARENT_SPAN_KEY, \"<user-current-span>\")\n     .addData(spanImplContext, \"<user-current-span-context>\");\n Context updatedProcessContext = tracer.start(\"azure.eventhubs.process\", processContext,\n     ProcessKind.PROCESS);\n System.out.printf(\"Scope: %s%n\", updatedProcessContext.getData(\"scope\").get());\n```"
  returns:
    description: "The updated <xref uid=\"com.azure.core.util.Context\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Context\"></xref> object containing the returned span."
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.core.util.tracing.Tracer.start(java.lang.String,com.azure.core.util.tracing.StartSpanOptions,com.azure.core.util.Context)"
  fullName: "com.azure.core.util.tracing.Tracer.start(String methodName, StartSpanOptions options, Context context)"
  name: "start(String methodName, StartSpanOptions options, Context context)"
  nameWithType: "Tracer.start(String methodName, StartSpanOptions options, Context context)"
  summary: "Creates a new tracing span."
  modifiers:
  - "default"
  parameters:
  - description: "Name of the method triggering the span creation."
    name: "methodName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "span creation options."
    name: "options"
    type: "<xref href=\"com.azure.core.util.tracing.StartSpanOptions?alt=com.azure.core.util.tracing.StartSpanOptions&text=StartSpanOptions\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional metadata that is passed through the call stack."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public default Context start(String methodName, StartSpanOptions options, Context context)"
  desc: "Creates a new tracing span.\n\nThe `context` will be checked for information about a parent span. If a parent span is found, the new span will be added as a child. Otherwise, the parent span will be created and added to the `context` and any downstream `start()` calls will use the created span as the parent.\n\n**Code samples**\n\nStarts a tracing span with provided method name and explicit parent span\n\n```java\n// start a new CLIENT tracing span with the given start options and explicit parent span\n StartSpanOptions options = new StartSpanOptions(SpanKind.CLIENT)\n     .setAttribute(\"key\", \"value\");\n Context updatedClientSpanContext = tracer.start(\"azure.keyvault.secrets/setsecret\", options, traceContext);\n System.out.printf(\"Span returned in the context object: %s%n\",\n     updatedClientSpanContext.getData(PARENT_SPAN_KEY).get());\n```"
  returns:
    description: "The updated <xref uid=\"com.azure.core.util.Context\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Context\"></xref> object containing the returned span."
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
type: "interface"
desc: "Contract that all tracers must implement to be pluggable into the SDK."
metadata: {}
package: "com.azure.core.util.tracing"
artifact: com.azure:azure-core:1.22.0-beta.1
