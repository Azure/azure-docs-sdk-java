### YamlMime:JavaType
uid: "com.azure.storage.queue.QueueClientBuilder"
fullName: "com.azure.storage.queue.QueueClientBuilder"
name: "QueueClientBuilder"
nameWithType: "QueueClientBuilder"
summary: "This class provides a fluent builder API to help aid the configuration and instantiation of the <xref uid=\"com.azure.storage.queue.QueueClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"QueueClients\"></xref> and <xref uid=\"com.azure.storage.queue.QueueAsyncClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"QueueAsyncClients\"></xref>, calling <xref uid=\"com.azure.storage.queue.QueueClientBuilder.buildClient()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"buildClient\"></xref> constructs an instance of Queue<wbr>Client and calling <xref uid=\"com.azure.storage.queue.QueueClientBuilder.buildAsyncClient()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"buildAsyncClient\"></xref> constructs an instance of Queue<wbr>Async<wbr>Client."
inheritances:
- "<xref href=\"java.lang.Object?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
inheritedMembers:
- "java.lang.Object.clone()"
- "java.lang.Object.equals(java.lang.Object)"
- "java.lang.Object.finalize()"
- "java.lang.Object.getClass()"
- "java.lang.Object.hashCode()"
- "java.lang.Object.notify()"
- "java.lang.Object.notifyAll()"
- "java.lang.Object.toString()"
- "java.lang.Object.wait()"
- "java.lang.Object.wait(long)"
- "java.lang.Object.wait(long,int)"
syntax: "public final class QueueClientBuilder implements TokenCredentialTrait<QueueClientBuilder>, ConnectionStringTrait<QueueClientBuilder>, AzureNamedKeyCredentialTrait<QueueClientBuilder>, AzureSasCredentialTrait<QueueClientBuilder>, HttpTrait<QueueClientBuilder>, ConfigurationTrait<QueueClientBuilder>, EndpointTrait<QueueClientBuilder>"
constructors:
- uid: "com.azure.storage.queue.QueueClientBuilder.QueueClientBuilder()"
  fullName: "com.azure.storage.queue.QueueClientBuilder.QueueClientBuilder()"
  name: "QueueClientBuilder()"
  nameWithType: "QueueClientBuilder.QueueClientBuilder()"
  summary: "Creates a builder instance that is able to configure and construct <xref uid=\"com.azure.storage.queue.QueueClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"QueueClients\"></xref> and <xref uid=\"com.azure.storage.queue.QueueAsyncClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"QueueAsyncClients\"></xref>."
  syntax: "public QueueClientBuilder()"
  desc: "Creates a builder instance that is able to configure and construct <xref uid=\"com.azure.storage.queue.QueueClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"QueueClients\"></xref> and <xref uid=\"com.azure.storage.queue.QueueAsyncClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"QueueAsyncClients\"></xref>."
methods:
- uid: "com.azure.storage.queue.QueueClientBuilder.addPolicy(com.azure.core.http.policy.HttpPipelinePolicy)"
  fullName: "com.azure.storage.queue.QueueClientBuilder.addPolicy(HttpPipelinePolicy pipelinePolicy)"
  name: "addPolicy(HttpPipelinePolicy pipelinePolicy)"
  nameWithType: "QueueClientBuilder.addPolicy(HttpPipelinePolicy pipelinePolicy)"
  summary: "Adds a <xref uid=\"com.azure.core.http.policy.HttpPipelinePolicy\" data-throw-if-not-resolved=\"false\" data-raw-source=\"pipeline policy\"></xref> to apply on each request sent."
  parameters:
  - description: "A <xref uid=\"com.azure.core.http.policy.HttpPipelinePolicy\" data-throw-if-not-resolved=\"false\" data-raw-source=\"pipeline policy\"></xref>."
    name: "pipelinePolicy"
    type: "<xref href=\"com.azure.core.http.policy.HttpPipelinePolicy?alt=com.azure.core.http.policy.HttpPipelinePolicy&text=HttpPipelinePolicy\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public QueueClientBuilder addPolicy(HttpPipelinePolicy pipelinePolicy)"
  desc: "Adds a <xref uid=\"com.azure.core.http.policy.HttpPipelinePolicy\" data-throw-if-not-resolved=\"false\" data-raw-source=\"pipeline policy\"></xref> to apply on each request sent.\n\n**Note:** It is important to understand the precedence order of the HttpTrait APIs. In particular, if a <xref uid=\"com.azure.core.http.HttpPipeline\" data-throw-if-not-resolved=\"false\" data-raw-source=\"HttpPipeline\"></xref> is specified, this takes precedence over all other APIs in the trait, and they will be ignored. If no <xref uid=\"com.azure.core.http.HttpPipeline\" data-throw-if-not-resolved=\"false\" data-raw-source=\"HttpPipeline\"></xref> is specified, a HTTP pipeline will be constructed internally based on the settings provided to this trait. Additionally, there may be other APIs in types that implement this trait that are also ignored if an <xref uid=\"com.azure.core.http.HttpPipeline\" data-throw-if-not-resolved=\"false\" data-raw-source=\"HttpPipeline\"></xref> is specified, so please be sure to refer to the documentation of types that implement this trait to understand the full set of implications."
  returns:
    description: "the updated QueueClientBuilder object"
    type: "<xref href=\"com.azure.storage.queue.QueueClientBuilder?alt=com.azure.storage.queue.QueueClientBuilder&text=QueueClientBuilder\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.queue.QueueClientBuilder.buildAsyncClient()"
  fullName: "com.azure.storage.queue.QueueClientBuilder.buildAsyncClient()"
  name: "buildAsyncClient()"
  nameWithType: "QueueClientBuilder.buildAsyncClient()"
  summary: "Creates a <xref uid=\"com.azure.storage.queue.QueueAsyncClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"QueueAsyncClient\"></xref> based on options set in the builder."
  syntax: "public QueueAsyncClient buildAsyncClient()"
  desc: "Creates a <xref uid=\"com.azure.storage.queue.QueueAsyncClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"QueueAsyncClient\"></xref> based on options set in the builder. Every time `buildAsyncClient()` is called a new instance of <xref uid=\"com.azure.storage.queue.QueueAsyncClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"QueueAsyncClient\"></xref> is created.\n\nIf <xref uid=\"com.azure.storage.queue.QueueClientBuilder.pipeline(com.azure.core.http.HttpPipeline)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"pipeline\"></xref> is set, then the `pipeline`, <xref uid=\"com.azure.storage.queue.QueueClientBuilder.endpoint(java.lang.String)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"endpoint\"></xref>, and <xref uid=\"com.azure.storage.queue.QueueClientBuilder.queueName(java.lang.String)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"queueName\"></xref> are used to create the <xref uid=\"com.azure.storage.queue.QueueAsyncClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"client\"></xref>. All other builder settings are ignored."
  returns:
    description: "A QueueAsyncClient with the options set from the builder."
    type: "<xref href=\"com.azure.storage.queue.QueueAsyncClient?alt=com.azure.storage.queue.QueueAsyncClient&text=QueueAsyncClient\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.queue.QueueClientBuilder.buildClient()"
  fullName: "com.azure.storage.queue.QueueClientBuilder.buildClient()"
  name: "buildClient()"
  nameWithType: "QueueClientBuilder.buildClient()"
  summary: "Creates a <xref uid=\"com.azure.storage.queue.QueueClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"QueueClient\"></xref> based on options set in the builder."
  syntax: "public QueueClient buildClient()"
  desc: "Creates a <xref uid=\"com.azure.storage.queue.QueueClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"QueueClient\"></xref> based on options set in the builder. Every time `buildClient()` is called a new instance of <xref uid=\"com.azure.storage.queue.QueueClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"QueueClient\"></xref> is created.\n\nIf <xref uid=\"com.azure.storage.queue.QueueClientBuilder.pipeline(com.azure.core.http.HttpPipeline)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"pipeline\"></xref> is set, then the `pipeline`, <xref uid=\"com.azure.storage.queue.QueueClientBuilder.endpoint(java.lang.String)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"endpoint\"></xref>, and <xref uid=\"com.azure.storage.queue.QueueClientBuilder.queueName(java.lang.String)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"queueName\"></xref> are used to create the <xref uid=\"com.azure.storage.queue.QueueAsyncClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"client\"></xref>. All other builder settings are ignored."
  returns:
    description: "A QueueClient with the options set from the builder."
    type: "<xref href=\"com.azure.storage.queue.QueueClient?alt=com.azure.storage.queue.QueueClient&text=QueueClient\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.queue.QueueClientBuilder.clientOptions(com.azure.core.util.ClientOptions)"
  fullName: "com.azure.storage.queue.QueueClientBuilder.clientOptions(ClientOptions clientOptions)"
  name: "clientOptions(ClientOptions clientOptions)"
  nameWithType: "QueueClientBuilder.clientOptions(ClientOptions clientOptions)"
  summary: "Allows for setting common properties such as application ID, headers, proxy configuration, etc."
  parameters:
  - description: "A configured instance of <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"HttpClientOptions\"></xref>."
    name: "clientOptions"
    type: "<xref href=\"com.azure.core.util.ClientOptions?alt=com.azure.core.util.ClientOptions&text=ClientOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public QueueClientBuilder clientOptions(ClientOptions clientOptions)"
  desc: "Allows for setting common properties such as application ID, headers, proxy configuration, etc. Note that it is recommended that this method be called with an instance of the <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"HttpClientOptions\"></xref> class (a subclass of the <xref uid=\"com.azure.core.util.ClientOptions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ClientOptions\"></xref> base class). The HttpClientOptions subclass provides more configuration options suitable for HTTP clients, which is applicable for any class that implements this HttpTrait interface.\n\n**Note:** It is important to understand the precedence order of the HttpTrait APIs. In particular, if a <xref uid=\"com.azure.core.http.HttpPipeline\" data-throw-if-not-resolved=\"false\" data-raw-source=\"HttpPipeline\"></xref> is specified, this takes precedence over all other APIs in the trait, and they will be ignored. If no <xref uid=\"com.azure.core.http.HttpPipeline\" data-throw-if-not-resolved=\"false\" data-raw-source=\"HttpPipeline\"></xref> is specified, a HTTP pipeline will be constructed internally based on the settings provided to this trait. Additionally, there may be other APIs in types that implement this trait that are also ignored if an <xref uid=\"com.azure.core.http.HttpPipeline\" data-throw-if-not-resolved=\"false\" data-raw-source=\"HttpPipeline\"></xref> is specified, so please be sure to refer to the documentation of types that implement this trait to understand the full set of implications."
  returns:
    description: "the updated QueueClientBuilder object"
    type: "<xref href=\"com.azure.storage.queue.QueueClientBuilder?alt=com.azure.storage.queue.QueueClientBuilder&text=QueueClientBuilder\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.queue.QueueClientBuilder.configuration(com.azure.core.util.Configuration)"
  fullName: "com.azure.storage.queue.QueueClientBuilder.configuration(Configuration configuration)"
  name: "configuration(Configuration configuration)"
  nameWithType: "QueueClientBuilder.configuration(Configuration configuration)"
  summary: "Sets the configuration object used to retrieve environment configuration values during building of the client."
  parameters:
  - description: "Configuration store used to retrieve environment configurations."
    name: "configuration"
    type: "<xref href=\"com.azure.core.util.Configuration?alt=com.azure.core.util.Configuration&text=Configuration\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public QueueClientBuilder configuration(Configuration configuration)"
  desc: "Sets the configuration object used to retrieve environment configuration values during building of the client."
  returns:
    description: "the updated QueueClientBuilder object"
    type: "<xref href=\"com.azure.storage.queue.QueueClientBuilder?alt=com.azure.storage.queue.QueueClientBuilder&text=QueueClientBuilder\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.queue.QueueClientBuilder.connectionString(java.lang.String)"
  fullName: "com.azure.storage.queue.QueueClientBuilder.connectionString(String connectionString)"
  name: "connectionString(String connectionString)"
  nameWithType: "QueueClientBuilder.connectionString(String connectionString)"
  summary: "Sets the connection string to connect to the service."
  parameters:
  - description: "Connection string of the storage account."
    name: "connectionString"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public QueueClientBuilder connectionString(String connectionString)"
  desc: "Sets the connection string to connect to the service."
  returns:
    description: "the updated QueueClientBuilder"
    type: "<xref href=\"com.azure.storage.queue.QueueClientBuilder?alt=com.azure.storage.queue.QueueClientBuilder&text=QueueClientBuilder\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.queue.QueueClientBuilder.credential(com.azure.core.credential.AzureNamedKeyCredential)"
  fullName: "com.azure.storage.queue.QueueClientBuilder.credential(AzureNamedKeyCredential credential)"
  name: "credential(AzureNamedKeyCredential credential)"
  nameWithType: "QueueClientBuilder.credential(AzureNamedKeyCredential credential)"
  summary: "Sets the <xref uid=\"com.azure.core.credential.AzureNamedKeyCredential\" data-throw-if-not-resolved=\"false\" data-raw-source=\"AzureNamedKeyCredential\"></xref> used to authorize requests sent to the service."
  parameters:
  - description: "<xref uid=\"com.azure.core.credential.AzureNamedKeyCredential\" data-throw-if-not-resolved=\"false\" data-raw-source=\"AzureNamedKeyCredential\"></xref>."
    name: "credential"
    type: "<xref href=\"com.azure.core.credential.AzureNamedKeyCredential?alt=com.azure.core.credential.AzureNamedKeyCredential&text=AzureNamedKeyCredential\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public QueueClientBuilder credential(AzureNamedKeyCredential credential)"
  desc: "Sets the <xref uid=\"com.azure.core.credential.AzureNamedKeyCredential\" data-throw-if-not-resolved=\"false\" data-raw-source=\"AzureNamedKeyCredential\"></xref> used to authorize requests sent to the service."
  returns:
    description: "the updated QueueClientBuilder"
    type: "<xref href=\"com.azure.storage.queue.QueueClientBuilder?alt=com.azure.storage.queue.QueueClientBuilder&text=QueueClientBuilder\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.queue.QueueClientBuilder.credential(com.azure.core.credential.AzureSasCredential)"
  fullName: "com.azure.storage.queue.QueueClientBuilder.credential(AzureSasCredential credential)"
  name: "credential(AzureSasCredential credential)"
  nameWithType: "QueueClientBuilder.credential(AzureSasCredential credential)"
  summary: "Sets the <xref uid=\"com.azure.core.credential.AzureSasCredential\" data-throw-if-not-resolved=\"false\" data-raw-source=\"AzureSasCredential\"></xref> used to authorize requests sent to the service."
  parameters:
  - description: "<xref uid=\"com.azure.core.credential.AzureSasCredential\" data-throw-if-not-resolved=\"false\" data-raw-source=\"AzureSasCredential\"></xref> used to authorize requests sent to the service."
    name: "credential"
    type: "<xref href=\"com.azure.core.credential.AzureSasCredential?alt=com.azure.core.credential.AzureSasCredential&text=AzureSasCredential\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public QueueClientBuilder credential(AzureSasCredential credential)"
  desc: "Sets the <xref uid=\"com.azure.core.credential.AzureSasCredential\" data-throw-if-not-resolved=\"false\" data-raw-source=\"AzureSasCredential\"></xref> used to authorize requests sent to the service."
  returns:
    description: "the updated QueueClientBuilder"
    type: "<xref href=\"com.azure.storage.queue.QueueClientBuilder?alt=com.azure.storage.queue.QueueClientBuilder&text=QueueClientBuilder\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.queue.QueueClientBuilder.credential(com.azure.core.credential.TokenCredential)"
  fullName: "com.azure.storage.queue.QueueClientBuilder.credential(TokenCredential credential)"
  name: "credential(TokenCredential credential)"
  nameWithType: "QueueClientBuilder.credential(TokenCredential credential)"
  summary: "Sets the <xref uid=\"com.azure.core.credential.TokenCredential\" data-throw-if-not-resolved=\"false\" data-raw-source=\"TokenCredential\"></xref> used to authorize requests sent to the service."
  parameters:
  - description: "<xref uid=\"com.azure.core.credential.TokenCredential\" data-throw-if-not-resolved=\"false\" data-raw-source=\"TokenCredential\"></xref> used to authorize requests sent to the service."
    name: "credential"
    type: "<xref href=\"com.azure.core.credential.TokenCredential?alt=com.azure.core.credential.TokenCredential&text=TokenCredential\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public QueueClientBuilder credential(TokenCredential credential)"
  desc: "Sets the <xref uid=\"com.azure.core.credential.TokenCredential\" data-throw-if-not-resolved=\"false\" data-raw-source=\"TokenCredential\"></xref> used to authorize requests sent to the service. Refer to the Azure SDK for Java [identity and authentication][] documentation for more details on proper usage of the <xref uid=\"com.azure.core.credential.TokenCredential\" data-throw-if-not-resolved=\"false\" data-raw-source=\"TokenCredential\"></xref> type.\n\n\n[identity and authentication]: https://aka.ms/azsdk/java/docs/identity"
  returns:
    description: "the updated QueueClientBuilder"
    type: "<xref href=\"com.azure.storage.queue.QueueClientBuilder?alt=com.azure.storage.queue.QueueClientBuilder&text=QueueClientBuilder\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.queue.QueueClientBuilder.credential(com.azure.storage.common.StorageSharedKeyCredential)"
  fullName: "com.azure.storage.queue.QueueClientBuilder.credential(StorageSharedKeyCredential credential)"
  name: "credential(StorageSharedKeyCredential credential)"
  nameWithType: "QueueClientBuilder.credential(StorageSharedKeyCredential credential)"
  summary: "Sets the <xref uid=\"com.azure.storage.common.StorageSharedKeyCredential\" data-throw-if-not-resolved=\"false\" data-raw-source=\"StorageSharedKeyCredential\"></xref> used to authorize requests sent to the service."
  parameters:
  - description: "<xref uid=\"com.azure.storage.common.StorageSharedKeyCredential\" data-throw-if-not-resolved=\"false\" data-raw-source=\"StorageSharedKeyCredential\"></xref>."
    name: "credential"
    type: "<xref href=\"com.azure.storage.common.StorageSharedKeyCredential?alt=com.azure.storage.common.StorageSharedKeyCredential&text=StorageSharedKeyCredential\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public QueueClientBuilder credential(StorageSharedKeyCredential credential)"
  desc: "Sets the <xref uid=\"com.azure.storage.common.StorageSharedKeyCredential\" data-throw-if-not-resolved=\"false\" data-raw-source=\"StorageSharedKeyCredential\"></xref> used to authorize requests sent to the service."
  returns:
    description: "the updated QueueClientBuilder"
    type: "<xref href=\"com.azure.storage.queue.QueueClientBuilder?alt=com.azure.storage.queue.QueueClientBuilder&text=QueueClientBuilder\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.queue.QueueClientBuilder.endpoint(java.lang.String)"
  fullName: "com.azure.storage.queue.QueueClientBuilder.endpoint(String endpoint)"
  name: "endpoint(String endpoint)"
  nameWithType: "QueueClientBuilder.endpoint(String endpoint)"
  summary: "Sets the endpoint for the Azure Storage Queue instance that the client will interact with."
  parameters:
  - description: "The URL of the Azure Storage Queue instance to send service requests to and receive responses\n from."
    name: "endpoint"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public QueueClientBuilder endpoint(String endpoint)"
  desc: "Sets the endpoint for the Azure Storage Queue instance that the client will interact with.\n\nThe first path segment, if the endpoint contains path segments, will be assumed to be the name of the queue that the client will interact with.\n\nQuery parameters of the endpoint will be parsed in an attempt to generate a <xref uid=\"com.azure.storage.queue.QueueClientBuilder.sasToken(java.lang.String)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"SAS token\"></xref> to authenticate requests sent to the service."
  returns:
    description: "the updated QueueClientBuilder object"
    type: "<xref href=\"com.azure.storage.queue.QueueClientBuilder?alt=com.azure.storage.queue.QueueClientBuilder&text=QueueClientBuilder\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.queue.QueueClientBuilder.getDefaultHttpLogOptions()"
  fullName: "com.azure.storage.queue.QueueClientBuilder.getDefaultHttpLogOptions()"
  name: "getDefaultHttpLogOptions()"
  nameWithType: "QueueClientBuilder.getDefaultHttpLogOptions()"
  summary: "Gets the default Storage allowlist log headers and query parameters."
  modifiers:
  - "static"
  syntax: "public static HttpLogOptions getDefaultHttpLogOptions()"
  desc: "Gets the default Storage allowlist log headers and query parameters."
  returns:
    description: "the default http log options."
    type: "<xref href=\"com.azure.core.http.policy.HttpLogOptions?alt=com.azure.core.http.policy.HttpLogOptions&text=HttpLogOptions\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.queue.QueueClientBuilder.httpClient(com.azure.core.http.HttpClient)"
  fullName: "com.azure.storage.queue.QueueClientBuilder.httpClient(HttpClient httpClient)"
  name: "httpClient(HttpClient httpClient)"
  nameWithType: "QueueClientBuilder.httpClient(HttpClient httpClient)"
  summary: "Sets the <xref uid=\"com.azure.core.http.HttpClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"HttpClient\"></xref> to use for sending and receiving requests to and from the service."
  parameters:
  - description: "The <xref uid=\"com.azure.core.http.HttpClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"HttpClient\"></xref> to use for requests."
    name: "httpClient"
    type: "<xref href=\"com.azure.core.http.HttpClient?alt=com.azure.core.http.HttpClient&text=HttpClient\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public QueueClientBuilder httpClient(HttpClient httpClient)"
  desc: "Sets the <xref uid=\"com.azure.core.http.HttpClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"HttpClient\"></xref> to use for sending and receiving requests to and from the service.\n\n**Note:** It is important to understand the precedence order of the HttpTrait APIs. In particular, if a <xref uid=\"com.azure.core.http.HttpPipeline\" data-throw-if-not-resolved=\"false\" data-raw-source=\"HttpPipeline\"></xref> is specified, this takes precedence over all other APIs in the trait, and they will be ignored. If no <xref uid=\"com.azure.core.http.HttpPipeline\" data-throw-if-not-resolved=\"false\" data-raw-source=\"HttpPipeline\"></xref> is specified, a HTTP pipeline will be constructed internally based on the settings provided to this trait. Additionally, there may be other APIs in types that implement this trait that are also ignored if an <xref uid=\"com.azure.core.http.HttpPipeline\" data-throw-if-not-resolved=\"false\" data-raw-source=\"HttpPipeline\"></xref> is specified, so please be sure to refer to the documentation of types that implement this trait to understand the full set of implications."
  returns:
    description: "the updated QueueClientBuilder object"
    type: "<xref href=\"com.azure.storage.queue.QueueClientBuilder?alt=com.azure.storage.queue.QueueClientBuilder&text=QueueClientBuilder\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.queue.QueueClientBuilder.httpLogOptions(com.azure.core.http.policy.HttpLogOptions)"
  fullName: "com.azure.storage.queue.QueueClientBuilder.httpLogOptions(HttpLogOptions logOptions)"
  name: "httpLogOptions(HttpLogOptions logOptions)"
  nameWithType: "QueueClientBuilder.httpLogOptions(HttpLogOptions logOptions)"
  summary: "Sets the <xref uid=\"com.azure.core.http.policy.HttpLogOptions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"logging configuration\"></xref> to use when sending and receiving requests to and from the service."
  parameters:
  - description: "The <xref uid=\"com.azure.core.http.policy.HttpLogOptions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"logging configuration\"></xref> to use when sending and receiving requests to\n and from the service."
    name: "logOptions"
    type: "<xref href=\"com.azure.core.http.policy.HttpLogOptions?alt=com.azure.core.http.policy.HttpLogOptions&text=HttpLogOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public QueueClientBuilder httpLogOptions(HttpLogOptions logOptions)"
  desc: "Sets the <xref uid=\"com.azure.core.http.policy.HttpLogOptions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"logging configuration\"></xref> to use when sending and receiving requests to and from the service. If a `logLevel` is not provided, default value of <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"HttpLogDetailLevel#NONE\"></xref> is set.\n\n**Note:** It is important to understand the precedence order of the HttpTrait APIs. In particular, if a <xref uid=\"com.azure.core.http.HttpPipeline\" data-throw-if-not-resolved=\"false\" data-raw-source=\"HttpPipeline\"></xref> is specified, this takes precedence over all other APIs in the trait, and they will be ignored. If no <xref uid=\"com.azure.core.http.HttpPipeline\" data-throw-if-not-resolved=\"false\" data-raw-source=\"HttpPipeline\"></xref> is specified, a HTTP pipeline will be constructed internally based on the settings provided to this trait. Additionally, there may be other APIs in types that implement this trait that are also ignored if an <xref uid=\"com.azure.core.http.HttpPipeline\" data-throw-if-not-resolved=\"false\" data-raw-source=\"HttpPipeline\"></xref> is specified, so please be sure to refer to the documentation of types that implement this trait to understand the full set of implications."
  returns:
    description: "the updated QueueClientBuilder object"
    type: "<xref href=\"com.azure.storage.queue.QueueClientBuilder?alt=com.azure.storage.queue.QueueClientBuilder&text=QueueClientBuilder\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.queue.QueueClientBuilder.messageEncoding(com.azure.storage.queue.QueueMessageEncoding)"
  fullName: "com.azure.storage.queue.QueueClientBuilder.messageEncoding(QueueMessageEncoding messageEncoding)"
  name: "messageEncoding(QueueMessageEncoding messageEncoding)"
  nameWithType: "QueueClientBuilder.messageEncoding(QueueMessageEncoding messageEncoding)"
  summary: "Sets the queue message encoding."
  parameters:
  - description: "<xref uid=\"com.azure.storage.queue.QueueMessageEncoding\" data-throw-if-not-resolved=\"false\" data-raw-source=\"QueueMessageEncoding\"></xref>."
    name: "messageEncoding"
    type: "<xref href=\"com.azure.storage.queue.QueueMessageEncoding?alt=com.azure.storage.queue.QueueMessageEncoding&text=QueueMessageEncoding\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public QueueClientBuilder messageEncoding(QueueMessageEncoding messageEncoding)"
  desc: "Sets the queue message encoding."
  returns:
    description: "the updated QueueClientBuilder object"
    type: "<xref href=\"com.azure.storage.queue.QueueClientBuilder?alt=com.azure.storage.queue.QueueClientBuilder&text=QueueClientBuilder\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.queue.QueueClientBuilder.pipeline(com.azure.core.http.HttpPipeline)"
  fullName: "com.azure.storage.queue.QueueClientBuilder.pipeline(HttpPipeline httpPipeline)"
  name: "pipeline(HttpPipeline httpPipeline)"
  nameWithType: "QueueClientBuilder.pipeline(HttpPipeline httpPipeline)"
  summary: "Sets the <xref uid=\"com.azure.core.http.HttpPipeline\" data-throw-if-not-resolved=\"false\" data-raw-source=\"HttpPipeline\"></xref> to use for the service client."
  parameters:
  - description: "<xref uid=\"com.azure.core.http.HttpPipeline\" data-throw-if-not-resolved=\"false\" data-raw-source=\"HttpPipeline\"></xref> to use for sending service requests and receiving responses."
    name: "httpPipeline"
    type: "<xref href=\"com.azure.core.http.HttpPipeline?alt=com.azure.core.http.HttpPipeline&text=HttpPipeline\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public QueueClientBuilder pipeline(HttpPipeline httpPipeline)"
  desc: "Sets the <xref uid=\"com.azure.core.http.HttpPipeline\" data-throw-if-not-resolved=\"false\" data-raw-source=\"HttpPipeline\"></xref> to use for the service client.\n\n**Note:** It is important to understand the precedence order of the HttpTrait APIs. In particular, if a <xref uid=\"com.azure.core.http.HttpPipeline\" data-throw-if-not-resolved=\"false\" data-raw-source=\"HttpPipeline\"></xref> is specified, this takes precedence over all other APIs in the trait, and they will be ignored. If no <xref uid=\"com.azure.core.http.HttpPipeline\" data-throw-if-not-resolved=\"false\" data-raw-source=\"HttpPipeline\"></xref> is specified, a HTTP pipeline will be constructed internally based on the settings provided to this trait. Additionally, there may be other APIs in types that implement this trait that are also ignored if an <xref uid=\"com.azure.core.http.HttpPipeline\" data-throw-if-not-resolved=\"false\" data-raw-source=\"HttpPipeline\"></xref> is specified, so please be sure to refer to the documentation of types that implement this trait to understand the full set of implications.\n\nThe <xref uid=\"com.azure.storage.queue.QueueClientBuilder.endpoint(java.lang.String)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"endpoint\"></xref> is not ignored when `pipeline` is set."
  returns:
    description: "the updated QueueClientBuilder object"
    type: "<xref href=\"com.azure.storage.queue.QueueClientBuilder?alt=com.azure.storage.queue.QueueClientBuilder&text=QueueClientBuilder\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.queue.QueueClientBuilder.processMessageDecodingError(java.util.function.Consumer<com.azure.storage.queue.models.QueueMessageDecodingError>)"
  fullName: "com.azure.storage.queue.QueueClientBuilder.processMessageDecodingError(Consumer<QueueMessageDecodingError> processMessageDecodingErrorHandler)"
  name: "processMessageDecodingError(Consumer<QueueMessageDecodingError> processMessageDecodingErrorHandler)"
  nameWithType: "QueueClientBuilder.processMessageDecodingError(Consumer<QueueMessageDecodingError> processMessageDecodingErrorHandler)"
  summary: "Sets the handler that performs the tasks needed when a message is received or peaked from the queue but cannot be decoded."
  parameters:
  - description: "the handler."
    name: "processMessageDecodingErrorHandler"
    type: "<xref href=\"java.util.function.Consumer?alt=java.util.function.Consumer&text=Consumer\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.queue.models.QueueMessageDecodingError?alt=com.azure.storage.queue.models.QueueMessageDecodingError&text=QueueMessageDecodingError\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public QueueClientBuilder processMessageDecodingError(Consumer<QueueMessageDecodingError> processMessageDecodingErrorHandler)"
  desc: "Sets the handler that performs the tasks needed when a message is received or peaked from the queue but cannot be decoded.\n\nSuch message can be received or peaked when queue is expecting certain <xref uid=\"com.azure.storage.queue.QueueMessageEncoding\" data-throw-if-not-resolved=\"false\" data-raw-source=\"QueueMessageEncoding\"></xref> but there's another producer that is not encoding messages in expected way. I.e. the queue contains messages with different encoding.\n\n<xref uid=\"com.azure.storage.queue.models.QueueMessageDecodingError\" data-throw-if-not-resolved=\"false\" data-raw-source=\"QueueMessageDecodingError\"></xref> contains <xref uid=\"com.azure.storage.queue.QueueAsyncClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"QueueAsyncClient\"></xref> for the queue that has received the message as well as <xref uid=\"com.azure.storage.queue.models.QueueMessageDecodingError.getQueueMessageItem()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"QueueMessageDecodingError#getQueueMessageItem()\"></xref> or <xref uid=\"com.azure.storage.queue.models.QueueMessageDecodingError.getPeekedMessageItem()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"QueueMessageDecodingError#getPeekedMessageItem()\"></xref> with raw body, i.e. no decoding will be attempted so that body can be inspected as has been received from the queue.\n\nThe handler won't attempt to remove the message from the queue. Therefore, such handling should be included into handler itself.\n\n**Code Samples**\n\n```java\nString connectionString = \"DefaultEndpointsProtocol=https;AccountName={name};\"\n     + \"AccountKey={key};EndpointSuffix={core.windows.net}\";\n\n Consumer<QueueMessageDecodingError> processMessageDecodingErrorHandler =\n     (queueMessageDecodingFailure) -> {\n         QueueMessageItem queueMessageItem = queueMessageDecodingFailure.getQueueMessageItem();\n         PeekedMessageItem peekedMessageItem = queueMessageDecodingFailure.getPeekedMessageItem();\n         if (queueMessageItem != null) {\n             System.out.printf(\"Received badly encoded message, messageId=%s, messageBody=%s\",\n                 queueMessageItem.getMessageId(),\n                 queueMessageItem.getBody().toString());\n             queueMessageDecodingFailure\n                 .getQueueClient()\n                 .deleteMessage(queueMessageItem.getMessageId(), queueMessageItem.getPopReceipt());\n         } else if (peekedMessageItem != null) {\n             System.out.printf(\"Peeked badly encoded message, messageId=%s, messageBody=%s\",\n                 peekedMessageItem.getMessageId(),\n                 peekedMessageItem.getBody().toString());\n         }\n     };\n\n QueueClient client = new QueueClientBuilder()\n     .connectionString(connectionString)\n     .processMessageDecodingError(processMessageDecodingErrorHandler)\n     .buildClient();\n```"
  returns:
    description: "the updated QueueClientBuilder object"
    type: "<xref href=\"com.azure.storage.queue.QueueClientBuilder?alt=com.azure.storage.queue.QueueClientBuilder&text=QueueClientBuilder\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.queue.QueueClientBuilder.processMessageDecodingErrorAsync(java.util.function.Function<com.azure.storage.queue.models.QueueMessageDecodingError,reactor.core.publisher.Mono<java.lang.Void>>)"
  fullName: "com.azure.storage.queue.QueueClientBuilder.processMessageDecodingErrorAsync(Function<QueueMessageDecodingError,Mono<Void>> processMessageDecodingErrorAsyncHandler)"
  name: "processMessageDecodingErrorAsync(Function<QueueMessageDecodingError,Mono<Void>> processMessageDecodingErrorAsyncHandler)"
  nameWithType: "QueueClientBuilder.processMessageDecodingErrorAsync(Function<QueueMessageDecodingError,Mono<Void>> processMessageDecodingErrorAsyncHandler)"
  summary: "Sets the asynchronous handler that performs the tasks needed when a message is received or peaked from the queue but cannot be decoded."
  parameters:
  - description: "the handler."
    name: "processMessageDecodingErrorAsyncHandler"
    type: "<xref href=\"java.util.function.Function?alt=java.util.function.Function&text=Function\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.queue.models.QueueMessageDecodingError?alt=com.azure.storage.queue.models.QueueMessageDecodingError&text=QueueMessageDecodingError\" data-throw-if-not-resolved=\"False\" />,<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
  syntax: "public QueueClientBuilder processMessageDecodingErrorAsync(Function<QueueMessageDecodingError,Mono<Void>> processMessageDecodingErrorAsyncHandler)"
  desc: "Sets the asynchronous handler that performs the tasks needed when a message is received or peaked from the queue but cannot be decoded.\n\nSuch message can be received or peaked when queue is expecting certain <xref uid=\"com.azure.storage.queue.QueueMessageEncoding\" data-throw-if-not-resolved=\"false\" data-raw-source=\"QueueMessageEncoding\"></xref> but there's another producer that is not encoding messages in expected way. I.e. the queue contains messages with different encoding.\n\n<xref uid=\"com.azure.storage.queue.models.QueueMessageDecodingError\" data-throw-if-not-resolved=\"false\" data-raw-source=\"QueueMessageDecodingError\"></xref> contains <xref uid=\"com.azure.storage.queue.QueueAsyncClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"QueueAsyncClient\"></xref> for the queue that has received the message as well as <xref uid=\"com.azure.storage.queue.models.QueueMessageDecodingError.getQueueMessageItem()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"QueueMessageDecodingError#getQueueMessageItem()\"></xref> or <xref uid=\"com.azure.storage.queue.models.QueueMessageDecodingError.getPeekedMessageItem()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"QueueMessageDecodingError#getPeekedMessageItem()\"></xref> with raw body, i.e. no decoding will be attempted so that body can be inspected as has been received from the queue.\n\nThe handler won't attempt to remove the message from the queue. Therefore, such handling should be included into handler itself.\n\n**Code Samples**\n\n```java\nString connectionString = \"DefaultEndpointsProtocol=https;AccountName={name};\"\n     + \"AccountKey={key};EndpointSuffix={core.windows.net}\";\n\n Function<QueueMessageDecodingError, Mono<Void>> processMessageDecodingErrorHandler =\n     (queueMessageDecodingFailure) -> {\n         QueueMessageItem queueMessageItem = queueMessageDecodingFailure.getQueueMessageItem();\n         PeekedMessageItem peekedMessageItem = queueMessageDecodingFailure.getPeekedMessageItem();\n         if (queueMessageItem != null) {\n             System.out.printf(\"Received badly encoded message, messageId=%s, messageBody=%s\",\n                 queueMessageItem.getMessageId(),\n                 queueMessageItem.getBody().toString());\n             return queueMessageDecodingFailure\n                 .getQueueAsyncClient()\n                 .deleteMessage(queueMessageItem.getMessageId(), queueMessageItem.getPopReceipt());\n         } else if (peekedMessageItem != null) {\n             System.out.printf(\"Peeked badly encoded message, messageId=%s, messageBody=%s\",\n                 peekedMessageItem.getMessageId(),\n                 peekedMessageItem.getBody().toString());\n             return Mono.empty();\n         } else {\n             return Mono.empty();\n         }\n     };\n\n QueueClient client = new QueueClientBuilder()\n     .connectionString(connectionString)\n     .processMessageDecodingErrorAsync(processMessageDecodingErrorHandler)\n     .buildClient();\n```"
  returns:
    description: "the updated QueueClientBuilder object"
    type: "<xref href=\"com.azure.storage.queue.QueueClientBuilder?alt=com.azure.storage.queue.QueueClientBuilder&text=QueueClientBuilder\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.queue.QueueClientBuilder.queueName(java.lang.String)"
  fullName: "com.azure.storage.queue.QueueClientBuilder.queueName(String queueName)"
  name: "queueName(String queueName)"
  nameWithType: "QueueClientBuilder.queueName(String queueName)"
  summary: "Sets the name of the queue that the client will interact with."
  parameters:
  - description: "Name of the queue"
    name: "queueName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public QueueClientBuilder queueName(String queueName)"
  desc: "Sets the name of the queue that the client will interact with."
  returns:
    description: "the updated QueueClientBuilder object"
    type: "<xref href=\"com.azure.storage.queue.QueueClientBuilder?alt=com.azure.storage.queue.QueueClientBuilder&text=QueueClientBuilder\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.queue.QueueClientBuilder.retryOptions(com.azure.core.http.policy.RetryOptions)"
  fullName: "com.azure.storage.queue.QueueClientBuilder.retryOptions(RetryOptions retryOptions)"
  name: "retryOptions(RetryOptions retryOptions)"
  nameWithType: "QueueClientBuilder.retryOptions(RetryOptions retryOptions)"
  summary: "Sets the <xref uid=\"com.azure.core.http.policy.RetryOptions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RetryOptions\"></xref> for all the requests made through the client."
  parameters:
  - description: "The <xref uid=\"com.azure.core.http.policy.RetryOptions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RetryOptions\"></xref> to use for all the requests made through the client."
    name: "retryOptions"
    type: "<xref href=\"com.azure.core.http.policy.RetryOptions?alt=com.azure.core.http.policy.RetryOptions&text=RetryOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public QueueClientBuilder retryOptions(RetryOptions retryOptions)"
  desc: "Sets the <xref uid=\"com.azure.core.http.policy.RetryOptions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RetryOptions\"></xref> for all the requests made through the client.\n\n**Note:** It is important to understand the precedence order of the HttpTrait APIs. In particular, if a <xref uid=\"com.azure.core.http.HttpPipeline\" data-throw-if-not-resolved=\"false\" data-raw-source=\"HttpPipeline\"></xref> is specified, this takes precedence over all other APIs in the trait, and they will be ignored. If no <xref uid=\"com.azure.core.http.HttpPipeline\" data-throw-if-not-resolved=\"false\" data-raw-source=\"HttpPipeline\"></xref> is specified, a HTTP pipeline will be constructed internally based on the settings provided to this trait. Additionally, there may be other APIs in types that implement this trait that are also ignored if an <xref uid=\"com.azure.core.http.HttpPipeline\" data-throw-if-not-resolved=\"false\" data-raw-source=\"HttpPipeline\"></xref> is specified, so please be sure to refer to the documentation of types that implement this trait to understand the full set of implications.\n\nSetting this is mutually exclusive with using <xref uid=\"com.azure.storage.queue.QueueClientBuilder.retryOptions(com.azure.storage.common.policy.RequestRetryOptions)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#retryOptions(RequestRetryOptions)\"></xref>. Consider using <xref uid=\"com.azure.storage.queue.QueueClientBuilder.retryOptions(com.azure.storage.common.policy.RequestRetryOptions)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#retryOptions(RequestRetryOptions)\"></xref> to also set storage specific options."
  returns:
    description: "the updated QueueClientBuilder object"
    type: "<xref href=\"com.azure.storage.queue.QueueClientBuilder?alt=com.azure.storage.queue.QueueClientBuilder&text=QueueClientBuilder\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.queue.QueueClientBuilder.retryOptions(com.azure.storage.common.policy.RequestRetryOptions)"
  fullName: "com.azure.storage.queue.QueueClientBuilder.retryOptions(RequestRetryOptions retryOptions)"
  name: "retryOptions(RequestRetryOptions retryOptions)"
  nameWithType: "QueueClientBuilder.retryOptions(RequestRetryOptions retryOptions)"
  summary: "Sets the request retry options for all the requests made through the client."
  parameters:
  - description: "<xref uid=\"com.azure.storage.common.policy.RequestRetryOptions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RequestRetryOptions\"></xref>."
    name: "retryOptions"
    type: "<xref href=\"com.azure.storage.common.policy.RequestRetryOptions?alt=com.azure.storage.common.policy.RequestRetryOptions&text=RequestRetryOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public QueueClientBuilder retryOptions(RequestRetryOptions retryOptions)"
  desc: "Sets the request retry options for all the requests made through the client. Setting this is mutually exclusive with using <xref uid=\"com.azure.storage.queue.QueueClientBuilder.retryOptions(com.azure.core.http.policy.RetryOptions)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#retryOptions(RetryOptions)\"></xref>."
  returns:
    description: "the updated QueueClientBuilder object."
    type: "<xref href=\"com.azure.storage.queue.QueueClientBuilder?alt=com.azure.storage.queue.QueueClientBuilder&text=QueueClientBuilder\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.queue.QueueClientBuilder.sasToken(java.lang.String)"
  fullName: "com.azure.storage.queue.QueueClientBuilder.sasToken(String sasToken)"
  name: "sasToken(String sasToken)"
  nameWithType: "QueueClientBuilder.sasToken(String sasToken)"
  summary: "Sets the SAS token used to authorize requests sent to the service."
  parameters:
  - description: "The SAS token to use for authenticating requests. This string should only be the query parameters\n (with or without a leading '?') and not a full url."
    name: "sasToken"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public QueueClientBuilder sasToken(String sasToken)"
  desc: "Sets the SAS token used to authorize requests sent to the service."
  returns:
    description: "the updated QueueClientBuilder"
    type: "<xref href=\"com.azure.storage.queue.QueueClientBuilder?alt=com.azure.storage.queue.QueueClientBuilder&text=QueueClientBuilder\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.queue.QueueClientBuilder.serviceVersion(com.azure.storage.queue.QueueServiceVersion)"
  fullName: "com.azure.storage.queue.QueueClientBuilder.serviceVersion(QueueServiceVersion version)"
  name: "serviceVersion(QueueServiceVersion version)"
  nameWithType: "QueueClientBuilder.serviceVersion(QueueServiceVersion version)"
  summary: "Sets the <xref uid=\"com.azure.storage.queue.QueueServiceVersion\" data-throw-if-not-resolved=\"false\" data-raw-source=\"QueueServiceVersion\"></xref> that is used when making API requests."
  parameters:
  - description: "<xref uid=\"com.azure.storage.queue.QueueServiceVersion\" data-throw-if-not-resolved=\"false\" data-raw-source=\"QueueServiceVersion\"></xref> of the service to be used when making requests."
    name: "version"
    type: "<xref href=\"com.azure.storage.queue.QueueServiceVersion?alt=com.azure.storage.queue.QueueServiceVersion&text=QueueServiceVersion\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public QueueClientBuilder serviceVersion(QueueServiceVersion version)"
  desc: "Sets the <xref uid=\"com.azure.storage.queue.QueueServiceVersion\" data-throw-if-not-resolved=\"false\" data-raw-source=\"QueueServiceVersion\"></xref> that is used when making API requests.\n\nIf a service version is not provided, the service version that will be used will be the latest known service version based on the version of the client library being used. If no service version is specified, updating to a newer version of the client library will have the result of potentially moving to a newer service version.\n\nTargeting a specific service version may also mean that the service will return an error for newer APIs."
  returns:
    description: "the updated QueueClientBuilder object"
    type: "<xref href=\"com.azure.storage.queue.QueueClientBuilder?alt=com.azure.storage.queue.QueueClientBuilder&text=QueueClientBuilder\" data-throw-if-not-resolved=\"False\" />"
type: "class"
desc: "This class provides a fluent builder API to help aid the configuration and instantiation of the <xref uid=\"com.azure.storage.queue.QueueClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"QueueClients\"></xref> and <xref uid=\"com.azure.storage.queue.QueueAsyncClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"QueueAsyncClients\"></xref>, calling <xref uid=\"com.azure.storage.queue.QueueClientBuilder.buildClient()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"buildClient\"></xref> constructs an instance of QueueClient and calling <xref uid=\"com.azure.storage.queue.QueueClientBuilder.buildAsyncClient()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"buildAsyncClient\"></xref> constructs an instance of QueueAsyncClient.\n\nThe client needs the endpoint of the Azure Storage Queue service, name of the queue, and authorization credentials. <xref uid=\"com.azure.storage.queue.QueueClientBuilder.endpoint(java.lang.String)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"endpoint\"></xref> gives the builder the endpoint and may give the builder the <xref uid=\"com.azure.storage.queue.QueueClientBuilder.queueName(java.lang.String)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"queueName\"></xref> and a <xref uid=\"com.azure.storage.queue.QueueClientBuilder.sasToken(java.lang.String)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"SAS token\"></xref> that authorizes the client.\n\n**Instantiating a synchronous Queue Client with SAS token**\n\n```java\nQueueClient client = new QueueClientBuilder()\n     .endpoint(\"https://${accountName}.queue.core.windows.net?${SASToken}\")\n     .buildClient();\n```\n\n**Instantiating an Asynchronous Queue Client with SAS token**\n\n```java\nQueueAsyncClient queueAsyncClient = new QueueClientBuilder()\n     .endpoint(\"https://{accountName}.queue.core.windows.net?{SASToken}\")\n     .buildAsyncClient();\n```\n\nIf the `endpoint` doesn't contain the queue name or `SAS token` they may be set using <xref uid=\"com.azure.storage.queue.QueueClientBuilder.queueName(java.lang.String)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"queueName\"></xref> and <xref uid=\"com.azure.storage.queue.QueueClientBuilder.sasToken(java.lang.String)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"SAS token\"></xref>.\n\n**Instantiating a synchronous Queue Client with credential**\n\n```java\nQueueClient client = new QueueClientBuilder()\n     .endpoint(\"https://${accountName}.queue.core.windows.net\")\n     .queueName(\"myqueue\")\n     .sasToken(\"{SASTokenQueryParams}\")\n     .buildClient();\n```\n\n**Instantiating an Asynchronous Queue Client with credential**\n\n```java\nQueueAsyncClient queueAsyncClient = new QueueClientBuilder()\n     .endpoint(\"https://{accountName}.queue.core.windows.net\")\n     .queueName(\"myqueue\")\n     .sasToken(\"{SASTokenQueryParams}\")\n     .buildAsyncClient();\n```\n\nAnother way to authenticate the client is using a <xref uid=\"com.azure.storage.common.StorageSharedKeyCredential\" data-throw-if-not-resolved=\"false\" data-raw-source=\"StorageSharedKeyCredential\"></xref>. To create a StorageSharedKeyCredential a connection string from the Storage Queue service must be used. Set the StorageSharedKeyCredential with <xref uid=\"com.azure.storage.queue.QueueClientBuilder.connectionString(java.lang.String)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"connectionString\"></xref>. If the builder has both a SAS token and StorageSharedKeyCredential the StorageSharedKeyCredential will be preferred when authorizing requests sent to the service.\n\n**Instantiating a synchronous Queue Client with connection string.**\n\n```java\nString connectionString = \"DefaultEndpointsProtocol=https;AccountName={name};\"\n     + \"AccountKey={key};EndpointSuffix={core.windows.net}\";\n QueueClient client = new QueueClientBuilder()\n     .connectionString(connectionString)\n     .buildClient();\n```\n\n**Instantiating an Asynchronous Queue Client with connection string.**\n\n```java\nString connectionString = \"DefaultEndpointsProtocol=https;AccountName={name};\"\n     + \"AccountKey={key};EndpointSuffix={core.windows.net}\";\n QueueAsyncClient queueAsyncClient = new QueueClientBuilder()\n     .connectionString(connectionString)\n     .buildAsyncClient();\n```"
implements:
- "<xref href=\"com.azure.core.client.traits.AzureNamedKeyCredentialTrait?alt=com.azure.core.client.traits.AzureNamedKeyCredentialTrait&text=AzureNamedKeyCredentialTrait\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.queue.QueueClientBuilder?alt=com.azure.storage.queue.QueueClientBuilder&text=QueueClientBuilder\" data-throw-if-not-resolved=\"False\" />&gt;"
- "<xref href=\"com.azure.core.client.traits.AzureSasCredentialTrait?alt=com.azure.core.client.traits.AzureSasCredentialTrait&text=AzureSasCredentialTrait\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.queue.QueueClientBuilder?alt=com.azure.storage.queue.QueueClientBuilder&text=QueueClientBuilder\" data-throw-if-not-resolved=\"False\" />&gt;"
- "<xref href=\"com.azure.core.client.traits.ConfigurationTrait?alt=com.azure.core.client.traits.ConfigurationTrait&text=ConfigurationTrait\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.queue.QueueClientBuilder?alt=com.azure.storage.queue.QueueClientBuilder&text=QueueClientBuilder\" data-throw-if-not-resolved=\"False\" />&gt;"
- "<xref href=\"com.azure.core.client.traits.ConnectionStringTrait?alt=com.azure.core.client.traits.ConnectionStringTrait&text=ConnectionStringTrait\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.queue.QueueClientBuilder?alt=com.azure.storage.queue.QueueClientBuilder&text=QueueClientBuilder\" data-throw-if-not-resolved=\"False\" />&gt;"
- "<xref href=\"com.azure.core.client.traits.EndpointTrait?alt=com.azure.core.client.traits.EndpointTrait&text=EndpointTrait\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.queue.QueueClientBuilder?alt=com.azure.storage.queue.QueueClientBuilder&text=QueueClientBuilder\" data-throw-if-not-resolved=\"False\" />&gt;"
- "<xref href=\"com.azure.core.client.traits.HttpTrait?alt=com.azure.core.client.traits.HttpTrait&text=HttpTrait\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.queue.QueueClientBuilder?alt=com.azure.storage.queue.QueueClientBuilder&text=QueueClientBuilder\" data-throw-if-not-resolved=\"False\" />&gt;"
- "<xref href=\"com.azure.core.client.traits.TokenCredentialTrait?alt=com.azure.core.client.traits.TokenCredentialTrait&text=TokenCredentialTrait\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.queue.QueueClientBuilder?alt=com.azure.storage.queue.QueueClientBuilder&text=QueueClientBuilder\" data-throw-if-not-resolved=\"False\" />&gt;"
metadata: {}
package: "com.azure.storage.queue"
artifact: com.azure:azure-storage-queue:12.14.0-beta.1
