### YamlMime:JavaPackage
uid: "com.fasterxml.jackson.databind"
fullName: "com.fasterxml.jackson.databind"
name: "com.fasterxml.jackson.databind"
summary: "Basic data binding (mapping) functionality that\nallows for reading JSON content into Java Objects (POJOs)\nand JSON Trees (<xref uid=\"com.fasterxml.jackson.databind.JsonNode\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.fasterxml.jackson.databind.JsonNode\"></xref>), as well as\nwriting Java Objects and trees as JSON.\nReading and writing (as well as related additional functionality) is accessed through\n<xref uid=\"com.fasterxml.jackson.databind.ObjectMapper\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.fasterxml.jackson.databind.ObjectMapper\"></xref>,\n<xref uid=\"com.fasterxml.jackson.databind.ObjectReader\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.fasterxml.jackson.databind.ObjectReader\"></xref> and\n<xref uid=\"com.fasterxml.jackson.databind.ObjectWriter\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.fasterxml.jackson.databind.ObjectWriter\"></xref>\n classes.\n In addition to reading and writing JSON content, it is also possible to use the\n general databinding functionality for many other data formats, using\n Jackson extension modules that provide such support: if so, you typically\n simply construct an <xref uid=\"com.fasterxml.jackson.databind.ObjectMapper\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.fasterxml.jackson.databind.ObjectMapper\"></xref> with\n different underlying streaming parser, generator implementation.\n<p>\nThe main starting point for operations is <xref uid=\"com.fasterxml.jackson.databind.ObjectMapper\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.fasterxml.jackson.databind.ObjectMapper\"></xref>,\nwhich can be used either directly (via multiple overloaded\n<code>readValue</code>,\n<code>readTree</code>,\n<code>writeValue</code> and\n<code>writeTree</code> methods, or it can be used as a configurable factory for constructing\nfully immutable, thread-safe and reusable <xref uid=\"com.fasterxml.jackson.databind.ObjectReader\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.fasterxml.jackson.databind.ObjectReader\"></xref>\nand <xref uid=\"com.fasterxml.jackson.databind.ObjectWriter\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.fasterxml.jackson.databind.ObjectWriter\"></xref> objects.\n<p>\nIn addition to simple reading and writing of JSON as POJOs or JSON trees (represented as\n<xref uid=\"com.fasterxml.jackson.databind.JsonNode\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.fasterxml.jackson.databind.JsonNode\"></xref>, and configurability needed to change aspects\nof reading/writing, mapper contains additional functionality such as:\n<ul>\n <li>Value conversions using <xref uid=\"com.fasterxml.jackson.databind.ObjectMapper#convertValue(Object, Class)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.fasterxml.jackson.databind.ObjectMapper#convertValue(Object, Class)\"></xref>,\n  <xref uid=\"com.fasterxml.jackson.databind.ObjectMapper#valueToTree(Object)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.fasterxml.jackson.databind.ObjectMapper#valueToTree(Object)\"></xref> and\n  <xref uid=\"com.fasterxml.jackson.databind.ObjectMapper#treeToValue(com.fasterxml.jackson.core.TreeNode, Class)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.fasterxml.jackson.databind.ObjectMapper#treeToValue(com.fasterxml.jackson.core.TreeNode, Class)\"></xref> methods.\n  </li>\n <li>Type introspection needed for things like generation of Schemas (like JSON Schema, Avro Schema, or protoc\n   definitions), using <xref uid=\"com.fasterxml.jackson.databind.ObjectMapper#acceptJsonFormatVisitor(Class, com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.fasterxml.jackson.databind.ObjectMapper#acceptJsonFormatVisitor(Class, com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper)\"></xref>\n   (note: actual handles are usually provided by various Jackson modules: mapper simply initiates calling of\n   callbacks, based on serializers registered)\n  </li>\n</ul>\n<p>\nSimplest usage is of form:\n<pre>\n  final ObjectMapper mapper = new ObjectMapper(); // can use static singleton, inject: just make sure to reuse!\n  MyValue value = new MyValue();\n  // ... and configure\n  File newState = new File(\"my-stuff.json\");\n  mapper.writeValue(newState, value); // writes JSON serialization of MyValue instance\n  // or, read\n  MyValue older = mapper.readValue(new File(\"my-older-stuff.json\"), MyValue.class);\n\n  // Or if you prefer JSON Tree representation:\n  JsonNode root = mapper.readTree(newState);\n  // and find values by, for example, using a <xref uid=\"com.fasterxml.jackson.core.JsonPointer\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.fasterxml.jackson.core.JsonPointer\"></xref> expression:\n  int age = root.at(\"/personal/age\").getValueAsInt(); \n</pre>\n<p>\nFor more usage, refer to\n<xref uid=\"com.fasterxml.jackson.databind.ObjectMapper\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.fasterxml.jackson.databind.ObjectMapper\"></xref>,\n<xref uid=\"com.fasterxml.jackson.databind.ObjectReader\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.fasterxml.jackson.databind.ObjectReader\"></xref> and\n<xref uid=\"com.fasterxml.jackson.databind.ObjectWriter\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.fasterxml.jackson.databind.ObjectWriter\"></xref>\nJavadocs."
classes:
- "com.fasterxml.jackson.databind.AbstractTypeResolver"
- "com.fasterxml.jackson.databind.AnnotationIntrospector"
- "com.fasterxml.jackson.databind.AnnotationIntrospector.ReferenceProperty"
- "com.fasterxml.jackson.databind.BeanDescription"
- "com.fasterxml.jackson.databind.BeanProperty.Bogus"
- "com.fasterxml.jackson.databind.BeanProperty.Std"
- "com.fasterxml.jackson.databind.DatabindContext"
- "com.fasterxml.jackson.databind.DeserializationConfig"
- "com.fasterxml.jackson.databind.DeserializationContext"
- "com.fasterxml.jackson.databind.InjectableValues"
- "com.fasterxml.jackson.databind.InjectableValues.Std"
- "com.fasterxml.jackson.databind.JavaType"
- "com.fasterxml.jackson.databind.JsonDeserializer"
- "com.fasterxml.jackson.databind.JsonDeserializer.None"
- "com.fasterxml.jackson.databind.JsonMappingException"
- "com.fasterxml.jackson.databind.JsonMappingException.Reference"
- "com.fasterxml.jackson.databind.JsonNode"
- "com.fasterxml.jackson.databind.JsonSerializable.Base"
- "com.fasterxml.jackson.databind.JsonSerializer"
- "com.fasterxml.jackson.databind.JsonSerializer.None"
- "com.fasterxml.jackson.databind.KeyDeserializer"
- "com.fasterxml.jackson.databind.KeyDeserializer.None"
- "com.fasterxml.jackson.databind.MappingIterator"
- "com.fasterxml.jackson.databind.MappingJsonFactory"
- "com.fasterxml.jackson.databind.Module"
- "com.fasterxml.jackson.databind.ObjectMapper"
- "com.fasterxml.jackson.databind.ObjectMapper.DefaultTypeResolverBuilder"
- "com.fasterxml.jackson.databind.ObjectReader"
- "com.fasterxml.jackson.databind.ObjectWriter"
- "com.fasterxml.jackson.databind.ObjectWriter.GeneratorSettings"
- "com.fasterxml.jackson.databind.ObjectWriter.Prefetch"
- "com.fasterxml.jackson.databind.PropertyMetadata"
- "com.fasterxml.jackson.databind.PropertyMetadata.MergeInfo"
- "com.fasterxml.jackson.databind.PropertyName"
- "com.fasterxml.jackson.databind.PropertyNamingStrategy"
- "com.fasterxml.jackson.databind.PropertyNamingStrategy.KebabCaseStrategy"
- "com.fasterxml.jackson.databind.PropertyNamingStrategy.LowerCaseStrategy"
- "com.fasterxml.jackson.databind.PropertyNamingStrategy.LowerCaseWithUnderscoresStrategy"
- "com.fasterxml.jackson.databind.PropertyNamingStrategy.LowerDotCaseStrategy"
- "com.fasterxml.jackson.databind.PropertyNamingStrategy.PascalCaseStrategy"
- "com.fasterxml.jackson.databind.PropertyNamingStrategy.PropertyNamingStrategyBase"
- "com.fasterxml.jackson.databind.PropertyNamingStrategy.SnakeCaseStrategy"
- "com.fasterxml.jackson.databind.PropertyNamingStrategy.UpperCamelCaseStrategy"
- "com.fasterxml.jackson.databind.RuntimeJsonMappingException"
- "com.fasterxml.jackson.databind.SequenceWriter"
- "com.fasterxml.jackson.databind.SerializationConfig"
- "com.fasterxml.jackson.databind.SerializerProvider"
enums:
- "com.fasterxml.jackson.databind.AnnotationIntrospector.ReferenceProperty.Type"
- "com.fasterxml.jackson.databind.DeserializationFeature"
- "com.fasterxml.jackson.databind.MapperFeature"
- "com.fasterxml.jackson.databind.ObjectMapper.DefaultTyping"
- "com.fasterxml.jackson.databind.SerializationFeature"
interfaces:
- "com.fasterxml.jackson.databind.BeanProperty"
- "com.fasterxml.jackson.databind.JsonSerializable"
- "com.fasterxml.jackson.databind.Module.SetupContext"
metadata: {}
package: "com.fasterxml.jackson.databind"
artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
