### YamlMime:JavaMember
uid: "com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.createFile*"
fullName: "com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.createFile"
name: "createFile"
nameWithType: "DataLakeFileSystemAsyncClient.createFile"
members:
- uid: "com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.createFile(java.lang.String)"
  fullName: "com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.createFile(String fileName)"
  name: "createFile(String fileName)"
  nameWithType: "DataLakeFileSystemAsyncClient.createFile(String fileName)"
  summary: "Creates a new file within a file system. By default this method will not overwrite an existing file. For more information, see the [Azure Docs][].\n\n**Code Samples**\n\n```java\nMono<DataLakeFileAsyncClient> fileClient = client.createFile(fileName);\n```\n\n\n[Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/datalakestoragegen2/path/create"
  parameters:
  - description: "Name of the file to create. If the path name contains special characters, pass in the url encoded\n version of the path name."
    name: "fileName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<DataLakeFileAsyncClient> createFile(String fileName)"
  returns:
    description: "A <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> containing a <xref uid=\"com.azure.storage.file.datalake.DataLakeFileAsyncClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DataLakeFileAsyncClient\"></xref> used to interact with the file created."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.file.datalake.DataLakeFileAsyncClient?alt=com.azure.storage.file.datalake.DataLakeFileAsyncClient&text=DataLakeFileAsyncClient\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.createFile(java.lang.String,boolean)"
  fullName: "com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.createFile(String fileName, boolean overwrite)"
  name: "createFile(String fileName, boolean overwrite)"
  nameWithType: "DataLakeFileSystemAsyncClient.createFile(String fileName, boolean overwrite)"
  summary: "Creates a new file within a file system. For more information, see the [Azure Docs][].\n\n**Code Samples**\n\n```java\nboolean overwrite = false; /* Default value. */\n Mono<DataLakeFileAsyncClient> fClient = client.createFile(fileName, overwrite);\n```\n\n\n[Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/datalakestoragegen2/path/create"
  parameters:
  - description: "Name of the file to create. If the path name contains special characters, pass in the url encoded\n version of the path name."
    name: "fileName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Whether or not to overwrite, should a file exist."
    name: "overwrite"
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<DataLakeFileAsyncClient> createFile(String fileName, boolean overwrite)"
  returns:
    description: "A <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> containing a <xref uid=\"com.azure.storage.file.datalake.DataLakeFileAsyncClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DataLakeFileAsyncClient\"></xref> used to interact with the file created."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.file.datalake.DataLakeFileAsyncClient?alt=com.azure.storage.file.datalake.DataLakeFileAsyncClient&text=DataLakeFileAsyncClient\" data-throw-if-not-resolved=\"False\" />&gt;"
type: "method"
metadata: {}
package: "com.azure.storage.file.datalake"
artifact: com.azure:azure-storage-file-datalake:12.3.0-beta.1
