### YamlMime:ManagedReference
items:
- uid: com.azure.messaging.servicebus.models.SubQueue
  id: SubQueue
  artifact: com.azure:azure-messaging-servicebus:7.0.0-beta.7
  parent: com.azure.messaging.servicebus.models
  children:
  - com.azure.messaging.servicebus.models.SubQueue.DEAD_LETTER_QUEUE
  - com.azure.messaging.servicebus.models.SubQueue.NONE
  - com.azure.messaging.servicebus.models.SubQueue.TRANSFER_DEAD_LETTER_QUEUE
  - com.azure.messaging.servicebus.models.SubQueue.valueOf(java.lang.String)
  - com.azure.messaging.servicebus.models.SubQueue.values()
  langs:
  - java
  name: SubQueue
  nameWithType: SubQueue
  fullName: com.azure.messaging.servicebus.models.SubQueue
  type: Enum
  package: com.azure.messaging.servicebus.models
  summary: Azure Service Bus queues and topic subscriptions provide a secondary subqueue, called a dead-letter queue (DLQ). The dead-letter queue doesn't need to be explicitly created and can't be deleted or otherwise managed independent of the main entity.
  syntax:
    content: public enum SubQueue extends Enum<SubQueue>
  inheritance:
  - java.lang.Object
  - java.lang.Enum
  inheritedMembers:
  - java.lang.Enum.<T>valueOf(java.lang.Class<T>,java.lang.String)
  - java.lang.Enum.clone()
  - java.lang.Enum.compareTo(E)
  - java.lang.Enum.equals(java.lang.Object)
  - java.lang.Enum.finalize()
  - java.lang.Enum.getDeclaringClass()
  - java.lang.Enum.hashCode()
  - java.lang.Enum.name()
  - java.lang.Enum.ordinal()
  - java.lang.Enum.toString()
  - java.lang.Object.getClass()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
- uid: com.azure.messaging.servicebus.models.SubQueue.DEAD_LETTER_QUEUE
  id: DEAD_LETTER_QUEUE
  artifact: com.azure:azure-messaging-servicebus:7.0.0-beta.7
  parent: com.azure.messaging.servicebus.models.SubQueue
  langs:
  - java
  name: DEAD_LETTER_QUEUE
  nameWithType: SubQueue.DEAD_LETTER_QUEUE
  fullName: com.azure.messaging.servicebus.models.SubQueue.DEAD_LETTER_QUEUE
  type: Field
  package: com.azure.messaging.servicebus.models
  summary: >-
    This value to indicate dead-letter queue.


    This is builder for creating <xref uid="com.azure.messaging.servicebus.ServiceBusReceiverClient" data-throw-if-not-resolved="false">ServiceBusReceiverClient</xref> and <xref uid="com.azure.messaging.servicebus.ServiceBusReceiverAsyncClient" data-throw-if-not-resolved="false">ServiceBusReceiverAsyncClient</xref> to consume dead-letter messages from Service Bus entity.
  syntax:
    content: public static final SubQueue DEAD_LETTER_QUEUE
    return:
      type: com.azure.messaging.servicebus.models.SubQueue
- uid: com.azure.messaging.servicebus.models.SubQueue.NONE
  id: NONE
  artifact: com.azure:azure-messaging-servicebus:7.0.0-beta.7
  parent: com.azure.messaging.servicebus.models.SubQueue
  langs:
  - java
  name: NONE
  nameWithType: SubQueue.NONE
  fullName: com.azure.messaging.servicebus.models.SubQueue.NONE
  type: Field
  package: com.azure.messaging.servicebus.models
  summary: Connect to the default entity (directly to the queue or subscription)
  syntax:
    content: public static final SubQueue NONE
    return:
      type: com.azure.messaging.servicebus.models.SubQueue
- uid: com.azure.messaging.servicebus.models.SubQueue.SubQueue()
  id: SubQueue()
  artifact: com.azure:azure-messaging-servicebus:7.0.0-beta.7
  parent: com.azure.messaging.servicebus.models.SubQueue
  langs:
  - java
  name: SubQueue()
  nameWithType: SubQueue.SubQueue()
  fullName: com.azure.messaging.servicebus.models.SubQueue.SubQueue()
  overload: com.azure.messaging.servicebus.models.SubQueue.SubQueue*
  type: Constructor
  package: com.azure.messaging.servicebus.models
  syntax:
    content: private SubQueue()
- uid: com.azure.messaging.servicebus.models.SubQueue.TRANSFER_DEAD_LETTER_QUEUE
  id: TRANSFER_DEAD_LETTER_QUEUE
  artifact: com.azure:azure-messaging-servicebus:7.0.0-beta.7
  parent: com.azure.messaging.servicebus.models.SubQueue
  langs:
  - java
  name: TRANSFER_DEAD_LETTER_QUEUE
  nameWithType: SubQueue.TRANSFER_DEAD_LETTER_QUEUE
  fullName: com.azure.messaging.servicebus.models.SubQueue.TRANSFER_DEAD_LETTER_QUEUE
  type: Field
  package: com.azure.messaging.servicebus.models
  summary: >-
    This value to indicate transfer dead-letter queue.


    This is builder for creating <xref uid="com.azure.messaging.servicebus.ServiceBusReceiverClient" data-throw-if-not-resolved="false">ServiceBusReceiverClient</xref> and <xref uid="com.azure.messaging.servicebus.ServiceBusReceiverAsyncClient" data-throw-if-not-resolved="false">ServiceBusReceiverAsyncClient</xref> to consume transfer dead-letter messages from Service Bus entity.
  syntax:
    content: public static final SubQueue TRANSFER_DEAD_LETTER_QUEUE
    return:
      type: com.azure.messaging.servicebus.models.SubQueue
- uid: com.azure.messaging.servicebus.models.SubQueue.valueOf(java.lang.String)
  id: valueOf(java.lang.String)
  artifact: com.azure:azure-messaging-servicebus:7.0.0-beta.7
  parent: com.azure.messaging.servicebus.models.SubQueue
  langs:
  - java
  name: valueOf(String name)
  nameWithType: SubQueue.valueOf(String name)
  fullName: com.azure.messaging.servicebus.models.SubQueue.valueOf(String name)
  overload: com.azure.messaging.servicebus.models.SubQueue.valueOf*
  type: Method
  package: com.azure.messaging.servicebus.models
  syntax:
    content: public static SubQueue valueOf(String name)
    parameters:
    - id: name
      type: java.lang.String
    return:
      type: com.azure.messaging.servicebus.models.SubQueue
- uid: com.azure.messaging.servicebus.models.SubQueue.values()
  id: values()
  artifact: com.azure:azure-messaging-servicebus:7.0.0-beta.7
  parent: com.azure.messaging.servicebus.models.SubQueue
  langs:
  - java
  name: values()
  nameWithType: SubQueue.values()
  fullName: com.azure.messaging.servicebus.models.SubQueue.values()
  overload: com.azure.messaging.servicebus.models.SubQueue.values*
  type: Method
  package: com.azure.messaging.servicebus.models
  syntax:
    content: public static SubQueue[] values()
    return:
      type: com.azure.messaging.servicebus.models.SubQueue[]
references:
- uid: com.azure.messaging.servicebus.models.SubQueue.SubQueue*
  name: SubQueue
  nameWithType: SubQueue.SubQueue
  fullName: com.azure.messaging.servicebus.models.SubQueue.SubQueue
  package: com.azure.messaging.servicebus.models
- uid: com.azure.messaging.servicebus.models.SubQueue[]
  spec.java:
  - uid: com.azure.messaging.servicebus.models.SubQueue
    name: SubQueue
    fullName: com.azure.messaging.servicebus.models.SubQueue
  - name: '[]'
    fullName: '[]'
- uid: com.azure.messaging.servicebus.models.SubQueue.values*
  name: values
  nameWithType: SubQueue.values
  fullName: com.azure.messaging.servicebus.models.SubQueue.values
  package: com.azure.messaging.servicebus.models
- uid: java.lang.String
  spec.java:
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
- uid: com.azure.messaging.servicebus.models.SubQueue.valueOf*
  name: valueOf
  nameWithType: SubQueue.valueOf
  fullName: com.azure.messaging.servicebus.models.SubQueue.valueOf
  package: com.azure.messaging.servicebus.models
- uid: java.lang.Enum<com.azure.messaging.servicebus.models.SubQueue>
  name: Enum<SubQueue>
  nameWithType: Enum<SubQueue>
  fullName: java.lang.Enum<com.azure.messaging.servicebus.models.SubQueue>
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: java.lang.Enum.toString()
  name: Enum.toString()
  nameWithType: Enum.toString()
  fullName: java.lang.Enum.toString()
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: java.lang.Enum.clone()
  name: Enum.clone()
  nameWithType: Enum.clone()
  fullName: java.lang.Enum.clone()
- uid: java.lang.Enum.finalize()
  name: Enum.finalize()
  nameWithType: Enum.finalize()
  fullName: java.lang.Enum.finalize()
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: java.lang.Enum.compareTo(E)
  name: Enum.compareTo(E)
  nameWithType: Enum.compareTo(E)
  fullName: java.lang.Enum.compareTo(E)
- uid: java.lang.Enum.name()
  name: Enum.name()
  nameWithType: Enum.name()
  fullName: java.lang.Enum.name()
- uid: java.lang.Enum.<T>valueOf(java.lang.Class<T>,java.lang.String)
  name: Enum.<T>valueOf(Class<T>,String)
  nameWithType: Enum.<T>valueOf(Class<T>,String)
  fullName: java.lang.Enum.<T>valueOf(java.lang.Class<T>,java.lang.String)
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: java.lang.Enum.getDeclaringClass()
  name: Enum.getDeclaringClass()
  nameWithType: Enum.getDeclaringClass()
  fullName: java.lang.Enum.getDeclaringClass()
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.lang.Enum.ordinal()
  name: Enum.ordinal()
  nameWithType: Enum.ordinal()
  fullName: java.lang.Enum.ordinal()
- uid: java.lang.Enum.hashCode()
  name: Enum.hashCode()
  nameWithType: Enum.hashCode()
  fullName: java.lang.Enum.hashCode()
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: java.lang.Enum.equals(java.lang.Object)
  name: Enum.equals(Object)
  nameWithType: Enum.equals(Object)
  fullName: java.lang.Enum.equals(java.lang.Object)
- uid: java.lang.Enum
  name: Enum
  nameWithType: Enum
  fullName: java.lang.Enum
- uid: java.lang.Enum.
  name: Enum.
  nameWithType: Enum.
  fullName: java.lang.Enum.
- uid: T>,java.lang.String)
  name: T>,String)
  nameWithType: T>,String)
  fullName: T>,java.lang.String)
- uid: T>valueOf(java.lang.Class
  name: T>valueOf(Class
  nameWithType: T>valueOf(Class
  fullName: T>valueOf(java.lang.Class
