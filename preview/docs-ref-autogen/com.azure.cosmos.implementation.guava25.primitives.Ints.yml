### YamlMime:ManagedReference
items:
- uid: com.azure.cosmos.implementation.guava25.primitives.Ints
  id: Ints
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.primitives
  children:
  - com.azure.cosmos.implementation.guava25.primitives.Ints.BYTES
  - com.azure.cosmos.implementation.guava25.primitives.Ints.MAX_POWER_OF_TWO
  - com.azure.cosmos.implementation.guava25.primitives.Ints.asList(int...)
  - com.azure.cosmos.implementation.guava25.primitives.Ints.checkedCast(long)
  - com.azure.cosmos.implementation.guava25.primitives.Ints.compare(int,int)
  - com.azure.cosmos.implementation.guava25.primitives.Ints.concat(int[]...)
  - com.azure.cosmos.implementation.guava25.primitives.Ints.constrainToRange(int,int,int)
  - com.azure.cosmos.implementation.guava25.primitives.Ints.contains(int[],int)
  - com.azure.cosmos.implementation.guava25.primitives.Ints.ensureCapacity(int[],int,int)
  - com.azure.cosmos.implementation.guava25.primitives.Ints.fromByteArray(byte[])
  - com.azure.cosmos.implementation.guava25.primitives.Ints.fromBytes(byte,byte,byte,byte)
  - com.azure.cosmos.implementation.guava25.primitives.Ints.hashCode(int)
  - com.azure.cosmos.implementation.guava25.primitives.Ints.indexOf(int[],int)
  - com.azure.cosmos.implementation.guava25.primitives.Ints.indexOf(int[],int[])
  - com.azure.cosmos.implementation.guava25.primitives.Ints.join(java.lang.String,int...)
  - com.azure.cosmos.implementation.guava25.primitives.Ints.lastIndexOf(int[],int)
  - com.azure.cosmos.implementation.guava25.primitives.Ints.lexicographicalComparator()
  - com.azure.cosmos.implementation.guava25.primitives.Ints.max(int...)
  - com.azure.cosmos.implementation.guava25.primitives.Ints.min(int...)
  - com.azure.cosmos.implementation.guava25.primitives.Ints.reverse(int[])
  - com.azure.cosmos.implementation.guava25.primitives.Ints.reverse(int[],int,int)
  - com.azure.cosmos.implementation.guava25.primitives.Ints.saturatedCast(long)
  - com.azure.cosmos.implementation.guava25.primitives.Ints.sortDescending(int[])
  - com.azure.cosmos.implementation.guava25.primitives.Ints.sortDescending(int[],int,int)
  - com.azure.cosmos.implementation.guava25.primitives.Ints.stringConverter()
  - com.azure.cosmos.implementation.guava25.primitives.Ints.toArray(java.util.Collection<? extends java.lang.Number>)
  - com.azure.cosmos.implementation.guava25.primitives.Ints.toByteArray(int)
  - com.azure.cosmos.implementation.guava25.primitives.Ints.tryParse(java.lang.String)
  - com.azure.cosmos.implementation.guava25.primitives.Ints.tryParse(java.lang.String,int)
  langs:
  - java
  name: Ints
  nameWithType: Ints
  fullName: com.azure.cosmos.implementation.guava25.primitives.Ints
  type: Class
  package: com.azure.cosmos.implementation.guava25.primitives
  summary: >-
    Static utility methods pertaining to `int` primitives, that are not already found in either <xref uid="java.lang.Integer" data-throw-if-not-resolved="false">Integer</xref> or <xref uid="" data-throw-if-not-resolved="false">Arrays</xref>.


    See the Guava User Guide article on [primitive utilities][].



    [primitive utilities]: https://github.com/google/guava/wiki/PrimitivesExplained
  syntax:
    content: public final class Ints
  inheritance:
  - java.lang.Object
  inheritedMembers:
  - java.lang.Object.clone()
  - java.lang.Object.equals(java.lang.Object)
  - java.lang.Object.finalize()
  - java.lang.Object.getClass()
  - java.lang.Object.hashCode()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.toString()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
- uid: com.azure.cosmos.implementation.guava25.primitives.Ints.BYTES
  id: BYTES
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.primitives.Ints
  langs:
  - java
  name: BYTES
  nameWithType: Ints.BYTES
  fullName: com.azure.cosmos.implementation.guava25.primitives.Ints.BYTES
  type: Field
  package: com.azure.cosmos.implementation.guava25.primitives
  summary: >-
    The number of bytes required to represent a primitive `int` value.


    **Java 8 users:** use <xref uid="java.lang.Integer.BYTES" data-throw-if-not-resolved="false">Integer#BYTES</xref> instead.
  syntax:
    content: public static final int BYTES
    return:
      type: int
- uid: com.azure.cosmos.implementation.guava25.primitives.Ints.Ints()
  id: Ints()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.primitives.Ints
  langs:
  - java
  name: Ints()
  nameWithType: Ints.Ints()
  fullName: com.azure.cosmos.implementation.guava25.primitives.Ints.Ints()
  overload: com.azure.cosmos.implementation.guava25.primitives.Ints.Ints*
  type: Constructor
  package: com.azure.cosmos.implementation.guava25.primitives
  syntax:
    content: private Ints()
- uid: com.azure.cosmos.implementation.guava25.primitives.Ints.MAX_POWER_OF_TWO
  id: MAX_POWER_OF_TWO
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.primitives.Ints
  langs:
  - java
  name: MAX_POWER_OF_TWO
  nameWithType: Ints.MAX_POWER_OF_TWO
  fullName: com.azure.cosmos.implementation.guava25.primitives.Ints.MAX_POWER_OF_TWO
  type: Field
  package: com.azure.cosmos.implementation.guava25.primitives
  summary: The largest power of two that can be represented as an `int`.
  syntax:
    content: public static final int MAX_POWER_OF_TWO
    return:
      type: int
- uid: com.azure.cosmos.implementation.guava25.primitives.Ints.asList(int...)
  id: asList(int...)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.primitives.Ints
  langs:
  - java
  name: asList(int[] backingArray)
  nameWithType: Ints.asList(int[] backingArray)
  fullName: com.azure.cosmos.implementation.guava25.primitives.Ints.asList(int[] backingArray)
  overload: com.azure.cosmos.implementation.guava25.primitives.Ints.asList*
  type: Method
  package: com.azure.cosmos.implementation.guava25.primitives
  summary: >-
    Returns a fixed-size list backed by the specified array, similar to <xref uid="" data-throw-if-not-resolved="false">Arrays#asList(Object[])</xref>. The list supports <xref uid="java.util.List.set*" data-throw-if-not-resolved="false">List#set(int, Object)</xref>, but any attempt to set a value to `null` will result in a <xref uid="" data-throw-if-not-resolved="false">NullPointerException</xref>.


    The returned list maintains the values, but not the identities, of `Integer` objects written to or read from it. For example, whether `list.get(0) == list.get(0)` is true for the returned list is unspecified.


    **Note:** when possible, you should represent your data as an <xref uid="" data-throw-if-not-resolved="false">ImmutableIntArray</xref> instead, which has an <xref uid="" data-throw-if-not-resolved="false">asList</xref> view.
  syntax:
    content: public static List<Integer> asList(int[] backingArray)
    parameters:
    - id: backingArray
      type: int[]
      description: the array to back the list
    return:
      type: java.util.List<java.lang.Integer>
      description: a list view of the array
- uid: com.azure.cosmos.implementation.guava25.primitives.Ints.checkedCast(long)
  id: checkedCast(long)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.primitives.Ints
  langs:
  - java
  name: checkedCast(long value)
  nameWithType: Ints.checkedCast(long value)
  fullName: com.azure.cosmos.implementation.guava25.primitives.Ints.checkedCast(long value)
  overload: com.azure.cosmos.implementation.guava25.primitives.Ints.checkedCast*
  type: Method
  package: com.azure.cosmos.implementation.guava25.primitives
  summary: Returns the `int` value that is equal to `value`, if possible.
  syntax:
    content: public static int checkedCast(long value)
    parameters:
    - id: value
      type: long
      description: any value in the range of the <code>int</code> type
    return:
      type: int
      description: the <code>int</code> value that equals <code>value</code>
- uid: com.azure.cosmos.implementation.guava25.primitives.Ints.compare(int,int)
  id: compare(int,int)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.primitives.Ints
  langs:
  - java
  name: compare(int a, int b)
  nameWithType: Ints.compare(int a, int b)
  fullName: com.azure.cosmos.implementation.guava25.primitives.Ints.compare(int a, int b)
  overload: com.azure.cosmos.implementation.guava25.primitives.Ints.compare*
  type: Method
  package: com.azure.cosmos.implementation.guava25.primitives
  summary: >-
    Compares the two specified `int` values. The sign of the value returned is the same as that of `((Integer) a).compareTo(b)`.


    **Note for Java 7 and later:** this method should be treated as deprecated; use the equivalent <xref uid="java.lang.Integer.compare" data-throw-if-not-resolved="false">Integer#compare</xref> method instead.
  syntax:
    content: public static int compare(int a, int b)
    parameters:
    - id: a
      type: int
      description: the first <code>int</code> to compare
    - id: b
      type: int
      description: the second <code>int</code> to compare
    return:
      type: int
      description: >-
        a negative value if <code>a</code> is less than <code>b</code>; a positive value if <code>a</code> is
             greater than <code>b</code>; or zero if they are equal
- uid: com.azure.cosmos.implementation.guava25.primitives.Ints.concat(int[]...)
  id: concat(int[]...)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.primitives.Ints
  langs:
  - java
  name: concat(int[][] arrays)
  nameWithType: Ints.concat(int[][] arrays)
  fullName: com.azure.cosmos.implementation.guava25.primitives.Ints.concat(int[][] arrays)
  overload: com.azure.cosmos.implementation.guava25.primitives.Ints.concat*
  type: Method
  package: com.azure.cosmos.implementation.guava25.primitives
  summary: Returns the values from each provided array combined into a single array. For example, `concat(new int[] {a, b}, new int[] {}, new int[] {c}` returns the array `{a, b, c}`.
  syntax:
    content: public static int[] concat(int[][] arrays)
    parameters:
    - id: arrays
      type: int[][]
      description: zero or more <code>int</code> arrays
    return:
      type: int[]
      description: a single array containing all the values from the source arrays, in order
- uid: com.azure.cosmos.implementation.guava25.primitives.Ints.constrainToRange(int,int,int)
  id: constrainToRange(int,int,int)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.primitives.Ints
  langs:
  - java
  name: constrainToRange(int value, int min, int max)
  nameWithType: Ints.constrainToRange(int value, int min, int max)
  fullName: com.azure.cosmos.implementation.guava25.primitives.Ints.constrainToRange(int value, int min, int max)
  overload: com.azure.cosmos.implementation.guava25.primitives.Ints.constrainToRange*
  type: Method
  package: com.azure.cosmos.implementation.guava25.primitives
  summary: >-
    Returns the value nearest to `value` which is within the closed range `[min..max]`.


    If `value` is within the range `[min..max]`, `value` is returned unchanged. If `value` is less than `min`, `min` is returned, and if `value` is greater than `max`, `max` is returned.
  syntax:
    content: public static int constrainToRange(int value, int min, int max)
    parameters:
    - id: value
      type: int
      description: the <code>int</code> value to constrain
    - id: min
      type: int
      description: the lower bound (inclusive) of the range to constrain <code>value</code> to
    - id: max
      type: int
      description: the upper bound (inclusive) of the range to constrain <code>value</code> to
    return:
      type: int
- uid: com.azure.cosmos.implementation.guava25.primitives.Ints.contains(int[],int)
  id: contains(int[],int)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.primitives.Ints
  langs:
  - java
  name: contains(int[] array, int target)
  nameWithType: Ints.contains(int[] array, int target)
  fullName: com.azure.cosmos.implementation.guava25.primitives.Ints.contains(int[] array, int target)
  overload: com.azure.cosmos.implementation.guava25.primitives.Ints.contains*
  type: Method
  package: com.azure.cosmos.implementation.guava25.primitives
  summary: Returns `true` if `target` is present as an element anywhere in `array`.
  syntax:
    content: public static boolean contains(int[] array, int target)
    parameters:
    - id: array
      type: int[]
      description: an array of <code>int</code> values, possibly empty
    - id: target
      type: int
      description: a primitive <code>int</code> value
    return:
      type: boolean
      description: <code>true</code> if <code>array[i] == target</code> for some value of <code>i</code>
- uid: com.azure.cosmos.implementation.guava25.primitives.Ints.ensureCapacity(int[],int,int)
  id: ensureCapacity(int[],int,int)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.primitives.Ints
  langs:
  - java
  name: ensureCapacity(int[] array, int minLength, int padding)
  nameWithType: Ints.ensureCapacity(int[] array, int minLength, int padding)
  fullName: com.azure.cosmos.implementation.guava25.primitives.Ints.ensureCapacity(int[] array, int minLength, int padding)
  overload: com.azure.cosmos.implementation.guava25.primitives.Ints.ensureCapacity*
  type: Method
  package: com.azure.cosmos.implementation.guava25.primitives
  summary: Returns an array containing the same values as `array`, but guaranteed to be of a specified minimum length. If `array` already has a length of at least `minLength`, it is returned directly. Otherwise, a new array of size `minLength + padding` is returned, containing the values of `array`, and zeroes in the remaining places.
  syntax:
    content: public static int[] ensureCapacity(int[] array, int minLength, int padding)
    parameters:
    - id: array
      type: int[]
      description: the source array
    - id: minLength
      type: int
      description: the minimum length the returned array must guarantee
    - id: padding
      type: int
      description: an extra amount to "grow" the array by if growth is necessary
    return:
      type: int[]
      description: >-
        an array containing the values of <code>array</code>, with guaranteed minimum length <code>
             minLength</code>
- uid: com.azure.cosmos.implementation.guava25.primitives.Ints.fromByteArray(byte[])
  id: fromByteArray(byte[])
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.primitives.Ints
  langs:
  - java
  name: fromByteArray(byte[] bytes)
  nameWithType: Ints.fromByteArray(byte[] bytes)
  fullName: com.azure.cosmos.implementation.guava25.primitives.Ints.fromByteArray(byte[] bytes)
  overload: com.azure.cosmos.implementation.guava25.primitives.Ints.fromByteArray*
  type: Method
  package: com.azure.cosmos.implementation.guava25.primitives
  summary: >-
    Returns the `int` value whose big-endian representation is stored in the first 4 bytes of `bytes`; equivalent to `ByteBuffer.wrap(bytes).getInt()`. For example, the input byte array `{0x12, 0x13, 0x14, 0x15, 0x33}` would yield the `int` value `0x12131415`.


    Arguably, it's preferable to use <xref uid="java.nio.ByteBuffer" data-throw-if-not-resolved="false">java.nio.ByteBuffer</xref>; that library exposes much more flexibility at little cost in readability.
  syntax:
    content: public static int fromByteArray(byte[] bytes)
    parameters:
    - id: bytes
      type: byte[]
    return:
      type: int
- uid: com.azure.cosmos.implementation.guava25.primitives.Ints.fromBytes(byte,byte,byte,byte)
  id: fromBytes(byte,byte,byte,byte)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.primitives.Ints
  langs:
  - java
  name: fromBytes(byte b1, byte b2, byte b3, byte b4)
  nameWithType: Ints.fromBytes(byte b1, byte b2, byte b3, byte b4)
  fullName: com.azure.cosmos.implementation.guava25.primitives.Ints.fromBytes(byte b1, byte b2, byte b3, byte b4)
  overload: com.azure.cosmos.implementation.guava25.primitives.Ints.fromBytes*
  type: Method
  package: com.azure.cosmos.implementation.guava25.primitives
  summary: Returns the `int` value whose byte representation is the given 4 bytes, in big-endian order; equivalent to `Ints.fromByteArray(new byte[] {b1, b2, b3, b4})`.
  syntax:
    content: public static int fromBytes(byte b1, byte b2, byte b3, byte b4)
    parameters:
    - id: b1
      type: byte
    - id: b2
      type: byte
    - id: b3
      type: byte
    - id: b4
      type: byte
    return:
      type: int
- uid: com.azure.cosmos.implementation.guava25.primitives.Ints.hashCode(int)
  id: hashCode(int)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.primitives.Ints
  langs:
  - java
  name: hashCode(int value)
  nameWithType: Ints.hashCode(int value)
  fullName: com.azure.cosmos.implementation.guava25.primitives.Ints.hashCode(int value)
  overload: com.azure.cosmos.implementation.guava25.primitives.Ints.hashCode*
  type: Method
  package: com.azure.cosmos.implementation.guava25.primitives
  summary: >-
    Returns a hash code for `value`; equal to the result of invoking `((Integer) value).hashCode()`.


    **Java 8 users:** use <xref uid="java.lang.Integer.hashCode*" data-throw-if-not-resolved="false">Integer#hashCode(int)</xref> instead.
  syntax:
    content: public static int hashCode(int value)
    parameters:
    - id: value
      type: int
      description: a primitive <code>int</code> value
    return:
      type: int
      description: a hash code for the value
- uid: com.azure.cosmos.implementation.guava25.primitives.Ints.indexOf(int[],int)
  id: indexOf(int[],int)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.primitives.Ints
  langs:
  - java
  name: indexOf(int[] array, int target)
  nameWithType: Ints.indexOf(int[] array, int target)
  fullName: com.azure.cosmos.implementation.guava25.primitives.Ints.indexOf(int[] array, int target)
  overload: com.azure.cosmos.implementation.guava25.primitives.Ints.indexOf*
  type: Method
  package: com.azure.cosmos.implementation.guava25.primitives
  summary: Returns the index of the first appearance of the value `target` in `array`.
  syntax:
    content: public static int indexOf(int[] array, int target)
    parameters:
    - id: array
      type: int[]
      description: an array of <code>int</code> values, possibly empty
    - id: target
      type: int
      description: a primitive <code>int</code> value
    return:
      type: int
      description: >-
        the least index <code>i</code> for which <code>array[i] == target</code>, or <code>-1</code> if no
             such index exists.
- uid: com.azure.cosmos.implementation.guava25.primitives.Ints.indexOf(int[],int[])
  id: indexOf(int[],int[])
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.primitives.Ints
  langs:
  - java
  name: indexOf(int[] array, int[] target)
  nameWithType: Ints.indexOf(int[] array, int[] target)
  fullName: com.azure.cosmos.implementation.guava25.primitives.Ints.indexOf(int[] array, int[] target)
  overload: com.azure.cosmos.implementation.guava25.primitives.Ints.indexOf*
  type: Method
  package: com.azure.cosmos.implementation.guava25.primitives
  summary: >-
    Returns the start position of the first occurrence of the specified `target` within `array`, or `-1` if there is no such occurrence.


    More formally, returns the lowest index `i` such that `Arrays.copyOfRange(array, i, i + target.length)` contains exactly the same elements as `target`.
  syntax:
    content: public static int indexOf(int[] array, int[] target)
    parameters:
    - id: array
      type: int[]
      description: the array to search for the sequence <code>target</code>
    - id: target
      type: int[]
      description: the array to search for as a sub-sequence of <code>array</code>
    return:
      type: int
- uid: com.azure.cosmos.implementation.guava25.primitives.Ints.join(java.lang.String,int...)
  id: join(java.lang.String,int...)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.primitives.Ints
  langs:
  - java
  name: join(String separator, int[] array)
  nameWithType: Ints.join(String separator, int[] array)
  fullName: com.azure.cosmos.implementation.guava25.primitives.Ints.join(String separator, int[] array)
  overload: com.azure.cosmos.implementation.guava25.primitives.Ints.join*
  type: Method
  package: com.azure.cosmos.implementation.guava25.primitives
  summary: Returns a string containing the supplied `int` values separated by `separator`. For example, `join("-", 1, 2, 3)` returns the string `"1-2-3"`.
  syntax:
    content: public static String join(String separator, int[] array)
    parameters:
    - id: separator
      type: java.lang.String
      description: >-
        the text that should appear between consecutive values in the resulting string
             (but not at the start or end)
    - id: array
      type: int[]
      description: an array of <code>int</code> values, possibly empty
    return:
      type: java.lang.String
- uid: com.azure.cosmos.implementation.guava25.primitives.Ints.lastIndexOf(int[],int)
  id: lastIndexOf(int[],int)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.primitives.Ints
  langs:
  - java
  name: lastIndexOf(int[] array, int target)
  nameWithType: Ints.lastIndexOf(int[] array, int target)
  fullName: com.azure.cosmos.implementation.guava25.primitives.Ints.lastIndexOf(int[] array, int target)
  overload: com.azure.cosmos.implementation.guava25.primitives.Ints.lastIndexOf*
  type: Method
  package: com.azure.cosmos.implementation.guava25.primitives
  summary: Returns the index of the last appearance of the value `target` in `array`.
  syntax:
    content: public static int lastIndexOf(int[] array, int target)
    parameters:
    - id: array
      type: int[]
      description: an array of <code>int</code> values, possibly empty
    - id: target
      type: int
      description: a primitive <code>int</code> value
    return:
      type: int
      description: >-
        the greatest index <code>i</code> for which <code>array[i] == target</code>, or <code>-1</code> if no
             such index exists.
- uid: com.azure.cosmos.implementation.guava25.primitives.Ints.lexicographicalComparator()
  id: lexicographicalComparator()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.primitives.Ints
  langs:
  - java
  name: lexicographicalComparator()
  nameWithType: Ints.lexicographicalComparator()
  fullName: com.azure.cosmos.implementation.guava25.primitives.Ints.lexicographicalComparator()
  overload: com.azure.cosmos.implementation.guava25.primitives.Ints.lexicographicalComparator*
  type: Method
  package: com.azure.cosmos.implementation.guava25.primitives
  summary: >-
    Returns a comparator that compares two `int` arrays [lexicographically][]. That is, it compares, using <xref uid="com.azure.cosmos.implementation.guava25.primitives.Ints.compare(int,int)" data-throw-if-not-resolved="false">#compare(int, int)</xref>), the first pair of values that follow any common prefix, or when one array is a prefix of the other, treats the shorter array as the lesser. For example, `[] < [1] < [1, 2] < [2]`.


    The returned comparator is inconsistent with <xref uid="java.lang.Object.equals(java.lang.Object)" data-throw-if-not-resolved="false">Object#equals(Object)</xref> (since arrays support only identity equality), but it is consistent with <xref uid="" data-throw-if-not-resolved="false">Arrays#equals(int[], int[])</xref>.



    [lexicographically]: http://en.wikipedia.org/wiki/Lexicographical_order
  syntax:
    content: public static Comparator<int[]> lexicographicalComparator()
    return:
      type: java.util.Comparator<int[]>
- uid: com.azure.cosmos.implementation.guava25.primitives.Ints.max(int...)
  id: max(int...)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.primitives.Ints
  langs:
  - java
  name: max(int[] array)
  nameWithType: Ints.max(int[] array)
  fullName: com.azure.cosmos.implementation.guava25.primitives.Ints.max(int[] array)
  overload: com.azure.cosmos.implementation.guava25.primitives.Ints.max*
  type: Method
  package: com.azure.cosmos.implementation.guava25.primitives
  summary: Returns the greatest value present in `array`.
  syntax:
    content: public static int max(int[] array)
    parameters:
    - id: array
      type: int[]
      description: a <i>nonempty</i> array of <code>int</code> values
    return:
      type: int
      description: >-
        the value present in <code>array</code> that is greater than or equal to every other value
             in the array
- uid: com.azure.cosmos.implementation.guava25.primitives.Ints.min(int...)
  id: min(int...)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.primitives.Ints
  langs:
  - java
  name: min(int[] array)
  nameWithType: Ints.min(int[] array)
  fullName: com.azure.cosmos.implementation.guava25.primitives.Ints.min(int[] array)
  overload: com.azure.cosmos.implementation.guava25.primitives.Ints.min*
  type: Method
  package: com.azure.cosmos.implementation.guava25.primitives
  summary: Returns the least value present in `array`.
  syntax:
    content: public static int min(int[] array)
    parameters:
    - id: array
      type: int[]
      description: a <i>nonempty</i> array of <code>int</code> values
    return:
      type: int
      description: >-
        the value present in <code>array</code> that is less than or equal to every other value in
             the array
- uid: com.azure.cosmos.implementation.guava25.primitives.Ints.reverse(int[])
  id: reverse(int[])
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.primitives.Ints
  langs:
  - java
  name: reverse(int[] array)
  nameWithType: Ints.reverse(int[] array)
  fullName: com.azure.cosmos.implementation.guava25.primitives.Ints.reverse(int[] array)
  overload: com.azure.cosmos.implementation.guava25.primitives.Ints.reverse*
  type: Method
  package: com.azure.cosmos.implementation.guava25.primitives
  summary: Reverses the elements of `array`. This is equivalent to `Collections.reverse(Ints.asList(array))`, but is likely to be more efficient.
  syntax:
    content: public static void reverse(int[] array)
    parameters:
    - id: array
      type: int[]
- uid: com.azure.cosmos.implementation.guava25.primitives.Ints.reverse(int[],int,int)
  id: reverse(int[],int,int)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.primitives.Ints
  langs:
  - java
  name: reverse(int[] array, int fromIndex, int toIndex)
  nameWithType: Ints.reverse(int[] array, int fromIndex, int toIndex)
  fullName: com.azure.cosmos.implementation.guava25.primitives.Ints.reverse(int[] array, int fromIndex, int toIndex)
  overload: com.azure.cosmos.implementation.guava25.primitives.Ints.reverse*
  type: Method
  package: com.azure.cosmos.implementation.guava25.primitives
  summary: Reverses the elements of `array` between `fromIndex` inclusive and `toIndex` exclusive. This is equivalent to `Collections.reverse(Ints.asList(array).subList(fromIndex, toIndex))`, but is likely to be more efficient.
  syntax:
    content: public static void reverse(int[] array, int fromIndex, int toIndex)
    parameters:
    - id: array
      type: int[]
    - id: fromIndex
      type: int
    - id: toIndex
      type: int
- uid: com.azure.cosmos.implementation.guava25.primitives.Ints.saturatedCast(long)
  id: saturatedCast(long)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.primitives.Ints
  langs:
  - java
  name: saturatedCast(long value)
  nameWithType: Ints.saturatedCast(long value)
  fullName: com.azure.cosmos.implementation.guava25.primitives.Ints.saturatedCast(long value)
  overload: com.azure.cosmos.implementation.guava25.primitives.Ints.saturatedCast*
  type: Method
  package: com.azure.cosmos.implementation.guava25.primitives
  summary: Returns the `int` nearest in value to `value`.
  syntax:
    content: public static int saturatedCast(long value)
    parameters:
    - id: value
      type: long
      description: any <code>long</code> value
    return:
      type: int
      description: >-
        the same value cast to <code>int</code> if it is in the range of the <code>int</code> type,
             <xref uid="java.lang.Integer.MAX_VALUE" data-throw-if-not-resolved="false">Integer#MAX_VALUE</xref> if it is too large, or <xref uid="java.lang.Integer.MIN_VALUE" data-throw-if-not-resolved="false">Integer#MIN_VALUE</xref> if it is too
             small
- uid: com.azure.cosmos.implementation.guava25.primitives.Ints.sortDescending(int[])
  id: sortDescending(int[])
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.primitives.Ints
  langs:
  - java
  name: sortDescending(int[] array)
  nameWithType: Ints.sortDescending(int[] array)
  fullName: com.azure.cosmos.implementation.guava25.primitives.Ints.sortDescending(int[] array)
  overload: com.azure.cosmos.implementation.guava25.primitives.Ints.sortDescending*
  type: Method
  package: com.azure.cosmos.implementation.guava25.primitives
  summary: Sorts the elements of `array` in descending order.
  syntax:
    content: public static void sortDescending(int[] array)
    parameters:
    - id: array
      type: int[]
- uid: com.azure.cosmos.implementation.guava25.primitives.Ints.sortDescending(int[],int,int)
  id: sortDescending(int[],int,int)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.primitives.Ints
  langs:
  - java
  name: sortDescending(int[] array, int fromIndex, int toIndex)
  nameWithType: Ints.sortDescending(int[] array, int fromIndex, int toIndex)
  fullName: com.azure.cosmos.implementation.guava25.primitives.Ints.sortDescending(int[] array, int fromIndex, int toIndex)
  overload: com.azure.cosmos.implementation.guava25.primitives.Ints.sortDescending*
  type: Method
  package: com.azure.cosmos.implementation.guava25.primitives
  summary: Sorts the elements of `array` between `fromIndex` inclusive and `toIndex` exclusive in descending order.
  syntax:
    content: public static void sortDescending(int[] array, int fromIndex, int toIndex)
    parameters:
    - id: array
      type: int[]
    - id: fromIndex
      type: int
    - id: toIndex
      type: int
- uid: com.azure.cosmos.implementation.guava25.primitives.Ints.stringConverter()
  id: stringConverter()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.primitives.Ints
  langs:
  - java
  name: stringConverter()
  nameWithType: Ints.stringConverter()
  fullName: com.azure.cosmos.implementation.guava25.primitives.Ints.stringConverter()
  overload: com.azure.cosmos.implementation.guava25.primitives.Ints.stringConverter*
  type: Method
  package: com.azure.cosmos.implementation.guava25.primitives
  summary: >-
    Returns a serializable converter object that converts between strings and integers using <xref uid="java.lang.Integer.decode" data-throw-if-not-resolved="false">Integer#decode</xref> and <xref uid="java.lang.Integer.toString*" data-throw-if-not-resolved="false">Integer#toString()</xref>. The returned converter throws <xref uid="" data-throw-if-not-resolved="false">NumberFormatException</xref> if the input string is invalid.


    **Warning:** please see <xref uid="java.lang.Integer.decode" data-throw-if-not-resolved="false">Integer#decode</xref> to understand exactly how strings are parsed. For example, the string `"0123"` is treated as *octal* and converted to the value `83`.
  syntax:
    content: public static Converter<String,Integer> stringConverter()
    return:
      type: com.azure.cosmos.implementation.guava25.base.Converter<java.lang.String,java.lang.Integer>
- uid: com.azure.cosmos.implementation.guava25.primitives.Ints.toArray(java.util.Collection<? extends java.lang.Number>)
  id: toArray(java.util.Collection<? extends java.lang.Number>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.primitives.Ints
  langs:
  - java
  name: toArray(Collection<? extends Number> collection)
  nameWithType: Ints.toArray(Collection<? extends Number> collection)
  fullName: com.azure.cosmos.implementation.guava25.primitives.Ints.toArray(Collection<? extends Number> collection)
  overload: com.azure.cosmos.implementation.guava25.primitives.Ints.toArray*
  type: Method
  package: com.azure.cosmos.implementation.guava25.primitives
  summary: >-
    Returns an array containing each value of `collection`, converted to a `int` value in the manner of <xref uid="? extends java.lang.Number.intValue" data-throw-if-not-resolved="false">Number#intValue</xref>.


    Elements are copied from the argument collection as if by `collection.toArray()`. Calling this method is as thread-safe as calling that method.
  syntax:
    content: public static int[] toArray(Collection<? extends Number> collection)
    parameters:
    - id: collection
      type: java.util.Collection<? extends java.lang.Number>
      description: a collection of <code>Number</code> instances
    return:
      type: int[]
      description: >-
        an array containing the same values as <code>collection</code>, in the same order, converted
             to primitives
- uid: com.azure.cosmos.implementation.guava25.primitives.Ints.toByteArray(int)
  id: toByteArray(int)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.primitives.Ints
  langs:
  - java
  name: toByteArray(int value)
  nameWithType: Ints.toByteArray(int value)
  fullName: com.azure.cosmos.implementation.guava25.primitives.Ints.toByteArray(int value)
  overload: com.azure.cosmos.implementation.guava25.primitives.Ints.toByteArray*
  type: Method
  package: com.azure.cosmos.implementation.guava25.primitives
  summary: >-
    Returns a big-endian representation of `value` in a 4-element byte array; equivalent to `ByteBuffer.allocate(4).putInt(value).array()`. For example, the input value `0x12131415` would yield the byte array `{0x12, 0x13, 0x14, 0x15}`.


    If you need to convert and concatenate several values (possibly even of different types), use a shared <xref uid="java.nio.ByteBuffer" data-throw-if-not-resolved="false">java.nio.ByteBuffer</xref> instance, or use <xref uid="" data-throw-if-not-resolved="false">com.azure.cosmos.io.ByteStreams#newDataOutput()</xref> to get a growable buffer.
  syntax:
    content: public static byte[] toByteArray(int value)
    parameters:
    - id: value
      type: int
    return:
      type: byte[]
- uid: com.azure.cosmos.implementation.guava25.primitives.Ints.tryParse(java.lang.String)
  id: tryParse(java.lang.String)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.primitives.Ints
  langs:
  - java
  name: tryParse(String string)
  nameWithType: Ints.tryParse(String string)
  fullName: com.azure.cosmos.implementation.guava25.primitives.Ints.tryParse(String string)
  overload: com.azure.cosmos.implementation.guava25.primitives.Ints.tryParse*
  type: Method
  package: com.azure.cosmos.implementation.guava25.primitives
  summary: >-
    Parses the specified string as a signed decimal integer value. The ASCII character `'-'` (`'\u002D'`) is recognized as the minus sign.


    Unlike <xref uid="java.lang.Integer.parseInt*" data-throw-if-not-resolved="false">Integer#parseInt(String)</xref>, this method returns `null` instead of throwing an exception if parsing fails. Additionally, this method only accepts ASCII digits, and returns `null` if non-ASCII digits are present in the string.


    Note that strings prefixed with ASCII `'+'` are rejected, even under JDK 7, despite the change to <xref uid="java.lang.Integer.parseInt*" data-throw-if-not-resolved="false">Integer#parseInt(String)</xref> for that version.
  syntax:
    content: public static Integer tryParse(String string)
    parameters:
    - id: string
      type: java.lang.String
      description: the string representation of an integer value
    return:
      type: java.lang.Integer
      description: >-
        the integer value represented by <code>string</code>, or <code>null</code> if <code>string</code> has
             a length of zero or cannot be parsed as an integer value
- uid: com.azure.cosmos.implementation.guava25.primitives.Ints.tryParse(java.lang.String,int)
  id: tryParse(java.lang.String,int)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.primitives.Ints
  langs:
  - java
  name: tryParse(String string, int radix)
  nameWithType: Ints.tryParse(String string, int radix)
  fullName: com.azure.cosmos.implementation.guava25.primitives.Ints.tryParse(String string, int radix)
  overload: com.azure.cosmos.implementation.guava25.primitives.Ints.tryParse*
  type: Method
  package: com.azure.cosmos.implementation.guava25.primitives
  summary: >-
    Parses the specified string as a signed integer value using the specified radix. The ASCII character `'-'` (`'\u002D'`) is recognized as the minus sign.


    Unlike <xref uid="java.lang.Integer.parseInt*" data-throw-if-not-resolved="false">Integer#parseInt(String, int)</xref>, this method returns `null` instead of throwing an exception if parsing fails. Additionally, this method only accepts ASCII digits, and returns `null` if non-ASCII digits are present in the string.


    Note that strings prefixed with ASCII `'+'` are rejected, even under JDK 7, despite the change to <xref uid="java.lang.Integer.parseInt*" data-throw-if-not-resolved="false">Integer#parseInt(String, int)</xref> for that version.
  syntax:
    content: public static Integer tryParse(String string, int radix)
    parameters:
    - id: string
      type: java.lang.String
      description: the string representation of an integer value
    - id: radix
      type: int
      description: the radix to use when parsing
    return:
      type: java.lang.Integer
      description: >-
        the integer value represented by <code>string</code> using <code>radix</code>, or <code>null</code> if
             <code>string</code> has a length of zero or cannot be parsed as an integer value
references:
- uid: com.azure.cosmos.implementation.guava25.primitives.Ints.Ints*
  name: Ints
  nameWithType: Ints.Ints
  fullName: com.azure.cosmos.implementation.guava25.primitives.Ints.Ints
  package: com.azure.cosmos.implementation.guava25.primitives
- uid: int
  spec.java:
  - uid: int
    name: int
    fullName: int
- uid: com.azure.cosmos.implementation.guava25.primitives.Ints.hashCode*
  name: hashCode
  nameWithType: Ints.hashCode
  fullName: com.azure.cosmos.implementation.guava25.primitives.Ints.hashCode
  package: com.azure.cosmos.implementation.guava25.primitives
- uid: long
  spec.java:
  - uid: long
    name: long
    fullName: long
- uid: com.azure.cosmos.implementation.guava25.primitives.Ints.checkedCast*
  name: checkedCast
  nameWithType: Ints.checkedCast
  fullName: com.azure.cosmos.implementation.guava25.primitives.Ints.checkedCast
  package: com.azure.cosmos.implementation.guava25.primitives
- uid: com.azure.cosmos.implementation.guava25.primitives.Ints.saturatedCast*
  name: saturatedCast
  nameWithType: Ints.saturatedCast
  fullName: com.azure.cosmos.implementation.guava25.primitives.Ints.saturatedCast
  package: com.azure.cosmos.implementation.guava25.primitives
- uid: com.azure.cosmos.implementation.guava25.primitives.Ints.compare*
  name: compare
  nameWithType: Ints.compare
  fullName: com.azure.cosmos.implementation.guava25.primitives.Ints.compare
  package: com.azure.cosmos.implementation.guava25.primitives
- uid: int[]
  spec.java:
  - uid: int
    name: int
    fullName: int
  - name: '[]'
    fullName: '[]'
- uid: boolean
  spec.java:
  - uid: boolean
    name: boolean
    fullName: boolean
- uid: com.azure.cosmos.implementation.guava25.primitives.Ints.contains*
  name: contains
  nameWithType: Ints.contains
  fullName: com.azure.cosmos.implementation.guava25.primitives.Ints.contains
  package: com.azure.cosmos.implementation.guava25.primitives
- uid: com.azure.cosmos.implementation.guava25.primitives.Ints.indexOf*
  name: indexOf
  nameWithType: Ints.indexOf
  fullName: com.azure.cosmos.implementation.guava25.primitives.Ints.indexOf
  package: com.azure.cosmos.implementation.guava25.primitives
- uid: com.azure.cosmos.implementation.guava25.primitives.Ints.lastIndexOf*
  name: lastIndexOf
  nameWithType: Ints.lastIndexOf
  fullName: com.azure.cosmos.implementation.guava25.primitives.Ints.lastIndexOf
  package: com.azure.cosmos.implementation.guava25.primitives
- uid: com.azure.cosmos.implementation.guava25.primitives.Ints.min*
  name: min
  nameWithType: Ints.min
  fullName: com.azure.cosmos.implementation.guava25.primitives.Ints.min
  package: com.azure.cosmos.implementation.guava25.primitives
- uid: com.azure.cosmos.implementation.guava25.primitives.Ints.max*
  name: max
  nameWithType: Ints.max
  fullName: com.azure.cosmos.implementation.guava25.primitives.Ints.max
  package: com.azure.cosmos.implementation.guava25.primitives
- uid: com.azure.cosmos.implementation.guava25.primitives.Ints.constrainToRange*
  name: constrainToRange
  nameWithType: Ints.constrainToRange
  fullName: com.azure.cosmos.implementation.guava25.primitives.Ints.constrainToRange
  package: com.azure.cosmos.implementation.guava25.primitives
- uid: int[][]
  spec.java:
  - uid: int
    name: int
    fullName: int
  - name: '[]'
    fullName: '[]'
  - name: '[]'
    fullName: '[]'
- uid: com.azure.cosmos.implementation.guava25.primitives.Ints.concat*
  name: concat
  nameWithType: Ints.concat
  fullName: com.azure.cosmos.implementation.guava25.primitives.Ints.concat
  package: com.azure.cosmos.implementation.guava25.primitives
- uid: byte[]
  spec.java:
  - uid: byte
    name: byte
    fullName: byte
  - name: '[]'
    fullName: '[]'
- uid: com.azure.cosmos.implementation.guava25.primitives.Ints.toByteArray*
  name: toByteArray
  nameWithType: Ints.toByteArray
  fullName: com.azure.cosmos.implementation.guava25.primitives.Ints.toByteArray
  package: com.azure.cosmos.implementation.guava25.primitives
- uid: com.azure.cosmos.implementation.guava25.primitives.Ints.fromByteArray*
  name: fromByteArray
  nameWithType: Ints.fromByteArray
  fullName: com.azure.cosmos.implementation.guava25.primitives.Ints.fromByteArray
  package: com.azure.cosmos.implementation.guava25.primitives
- uid: byte
  spec.java:
  - uid: byte
    name: byte
    fullName: byte
- uid: com.azure.cosmos.implementation.guava25.primitives.Ints.fromBytes*
  name: fromBytes
  nameWithType: Ints.fromBytes
  fullName: com.azure.cosmos.implementation.guava25.primitives.Ints.fromBytes
  package: com.azure.cosmos.implementation.guava25.primitives
- uid: com.azure.cosmos.implementation.guava25.base.Converter<java.lang.String,java.lang.Integer>
  spec.java:
  - uid: com.azure.cosmos.implementation.guava25.base.Converter
    name: Converter
    fullName: com.azure.cosmos.implementation.guava25.base.Converter
  - name: <
    fullName: <
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
  - name: ','
    fullName: ','
  - uid: java.lang.Integer
    name: Integer
    fullName: java.lang.Integer
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.primitives.Ints.stringConverter*
  name: stringConverter
  nameWithType: Ints.stringConverter
  fullName: com.azure.cosmos.implementation.guava25.primitives.Ints.stringConverter
  package: com.azure.cosmos.implementation.guava25.primitives
- uid: com.azure.cosmos.implementation.guava25.primitives.Ints.ensureCapacity*
  name: ensureCapacity
  nameWithType: Ints.ensureCapacity
  fullName: com.azure.cosmos.implementation.guava25.primitives.Ints.ensureCapacity
  package: com.azure.cosmos.implementation.guava25.primitives
- uid: java.lang.String
  spec.java:
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
- uid: com.azure.cosmos.implementation.guava25.primitives.Ints.join*
  name: join
  nameWithType: Ints.join
  fullName: com.azure.cosmos.implementation.guava25.primitives.Ints.join
  package: com.azure.cosmos.implementation.guava25.primitives
- uid: java.util.Comparator<int[]>
  spec.java:
  - uid: java.util.Comparator
    name: Comparator
    fullName: java.util.Comparator
  - name: <
    fullName: <
  - uid: int
    name: int
    fullName: int
  - name: '[]'
    fullName: '[]'
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.primitives.Ints.lexicographicalComparator*
  name: lexicographicalComparator
  nameWithType: Ints.lexicographicalComparator
  fullName: com.azure.cosmos.implementation.guava25.primitives.Ints.lexicographicalComparator
  package: com.azure.cosmos.implementation.guava25.primitives
- uid: com.azure.cosmos.implementation.guava25.primitives.Ints.sortDescending*
  name: sortDescending
  nameWithType: Ints.sortDescending
  fullName: com.azure.cosmos.implementation.guava25.primitives.Ints.sortDescending
  package: com.azure.cosmos.implementation.guava25.primitives
- uid: com.azure.cosmos.implementation.guava25.primitives.Ints.reverse*
  name: reverse
  nameWithType: Ints.reverse
  fullName: com.azure.cosmos.implementation.guava25.primitives.Ints.reverse
  package: com.azure.cosmos.implementation.guava25.primitives
- uid: java.util.Collection<? extends java.lang.Number>
  spec.java:
  - uid: java.util.Collection
    name: Collection
    fullName: java.util.Collection
  - name: <
    fullName: <
  - uid: '? extends java.lang.Number'
    name: Number
    fullName: '? extends java.lang.Number'
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.primitives.Ints.toArray*
  name: toArray
  nameWithType: Ints.toArray
  fullName: com.azure.cosmos.implementation.guava25.primitives.Ints.toArray
  package: com.azure.cosmos.implementation.guava25.primitives
- uid: java.util.List<java.lang.Integer>
  spec.java:
  - uid: java.util.List
    name: List
    fullName: java.util.List
  - name: <
    fullName: <
  - uid: java.lang.Integer
    name: Integer
    fullName: java.lang.Integer
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.primitives.Ints.asList*
  name: asList
  nameWithType: Ints.asList
  fullName: com.azure.cosmos.implementation.guava25.primitives.Ints.asList
  package: com.azure.cosmos.implementation.guava25.primitives
- uid: java.lang.Integer
  spec.java:
  - uid: java.lang.Integer
    name: Integer
    fullName: java.lang.Integer
- uid: com.azure.cosmos.implementation.guava25.primitives.Ints.tryParse*
  name: tryParse
  nameWithType: Ints.tryParse
  fullName: com.azure.cosmos.implementation.guava25.primitives.Ints.tryParse
  package: com.azure.cosmos.implementation.guava25.primitives
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: java.lang.Object.finalize()
  name: Object.finalize()
  nameWithType: Object.finalize()
  fullName: java.lang.Object.finalize()
- uid: java.lang.Object.clone()
  name: Object.clone()
  nameWithType: Object.clone()
  fullName: java.lang.Object.clone()
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: java.lang.Object.equals(java.lang.Object)
  name: Object.equals(Object)
  nameWithType: Object.equals(Object)
  fullName: java.lang.Object.equals(java.lang.Object)
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.lang.Object.hashCode()
  name: Object.hashCode()
  nameWithType: Object.hashCode()
  fullName: java.lang.Object.hashCode()
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: java.lang.Object.toString()
  name: Object.toString()
  nameWithType: Object.toString()
  fullName: java.lang.Object.toString()
- uid: com.azure.cosmos.implementation.guava25.base.Converter
  name: Converter
  nameWithType: Converter
  fullName: com.azure.cosmos.implementation.guava25.base.Converter
- uid: java.lang.String,java.lang.Integer
  name: String,Integer
  nameWithType: String,Integer
  fullName: java.lang.String,java.lang.Integer
- uid: java.util.Comparator
  name: Comparator
  nameWithType: Comparator
  fullName: java.util.Comparator
- uid: java.util.Collection
  name: Collection
  nameWithType: Collection
  fullName: java.util.Collection
- uid: '? extends java.lang.Number'
  name: '? extends Number'
  nameWithType: '? extends Number'
  fullName: '? extends java.lang.Number'
- uid: java.util.List
  name: List
  nameWithType: List
  fullName: java.util.List
