### YamlMime:ManagedReference
items:
- uid: com.azure.cosmos.implementation.guava25.base.Suppliers
  id: Suppliers
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.base
  children:
  - com.azure.cosmos.implementation.guava25.base.Suppliers.<F,T>compose(com.azure.cosmos.implementation.guava25.base.Function<? super F,T>,com.azure.cosmos.implementation.guava25.base.Supplier<F>)
  - com.azure.cosmos.implementation.guava25.base.Suppliers.<T>memoize(com.azure.cosmos.implementation.guava25.base.Supplier<T>)
  - com.azure.cosmos.implementation.guava25.base.Suppliers.<T>memoizeWithExpiration(com.azure.cosmos.implementation.guava25.base.Supplier<T>,long,java.util.concurrent.TimeUnit)
  - com.azure.cosmos.implementation.guava25.base.Suppliers.<T>ofInstance(T)
  - com.azure.cosmos.implementation.guava25.base.Suppliers.<T>supplierFunction()
  - com.azure.cosmos.implementation.guava25.base.Suppliers.<T>synchronizedSupplier(com.azure.cosmos.implementation.guava25.base.Supplier<T>)
  langs:
  - java
  name: Suppliers
  nameWithType: Suppliers
  fullName: com.azure.cosmos.implementation.guava25.base.Suppliers
  type: Class
  package: com.azure.cosmos.implementation.guava25.base
  summary: >-
    Useful suppliers.


    All methods return serializable suppliers as long as they're given serializable parameters.
  syntax:
    content: public final class Suppliers
  inheritance:
  - java.lang.Object
  inheritedMembers:
  - java.lang.Object.clone()
  - java.lang.Object.equals(java.lang.Object)
  - java.lang.Object.finalize()
  - java.lang.Object.getClass()
  - java.lang.Object.hashCode()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.toString()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
- uid: com.azure.cosmos.implementation.guava25.base.Suppliers.<F,T>compose(com.azure.cosmos.implementation.guava25.base.Function<? super F,T>,com.azure.cosmos.implementation.guava25.base.Supplier<F>)
  id: <F,T>compose(com.azure.cosmos.implementation.guava25.base.Function<? super F,T>,com.azure.cosmos.implementation.guava25.base.Supplier<F>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.base.Suppliers
  langs:
  - java
  name: <F,T>compose(Function<? super F,T> function, Supplier<F> supplier)
  nameWithType: Suppliers.<F,T>compose(Function<? super F,T> function, Supplier<F> supplier)
  fullName: com.azure.cosmos.implementation.guava25.base.Suppliers.<F,T>compose(Function<? super F,T> function, Supplier<F> supplier)
  overload: com.azure.cosmos.implementation.guava25.base.Suppliers.compose*
  type: Method
  package: com.azure.cosmos.implementation.guava25.base
  summary: Returns a new supplier which is the composition of the provided function and supplier. In other words, the new supplier's value will be computed by retrieving the value from `supplier`, and then applying `function` to that value. Note that the resulting supplier will not call `supplier` or invoke `function` until it is called.
  syntax:
    content: public static Supplier<T> <F,T>compose(Function<? super F,T> function, Supplier<F> supplier)
    parameters:
    - id: function
      type: com.azure.cosmos.implementation.guava25.base.Function<? super F,T>
    - id: supplier
      type: com.azure.cosmos.implementation.guava25.base.Supplier<F>
    return:
      type: com.azure.cosmos.implementation.guava25.base.Supplier<T>
- uid: com.azure.cosmos.implementation.guava25.base.Suppliers.<T>memoize(com.azure.cosmos.implementation.guava25.base.Supplier<T>)
  id: <T>memoize(com.azure.cosmos.implementation.guava25.base.Supplier<T>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.base.Suppliers
  langs:
  - java
  name: <T>memoize(Supplier<T> delegate)
  nameWithType: Suppliers.<T>memoize(Supplier<T> delegate)
  fullName: com.azure.cosmos.implementation.guava25.base.Suppliers.<T>memoize(Supplier<T> delegate)
  overload: com.azure.cosmos.implementation.guava25.base.Suppliers.memoize*
  type: Method
  package: com.azure.cosmos.implementation.guava25.base
  summary: >-
    Returns a supplier which caches the instance retrieved during the first call to `get()` and returns that value on subsequent calls to `get()`. See: [memoization][]


    The returned supplier is thread-safe. The delegate's `get()` method will be invoked at most once unless the underlying `get()` throws an exception. The supplier's serialized form does not contain the cached value, which will be recalculated when `get()` is called on the reserialized instance.


    When the underlying delegate throws an exception then this memoizing supplier will keep delegating calls until it returns valid data.


    If `delegate` is an instance created by an earlier call to `memoize`, it is returned directly.



    [memoization]: http://en.wikipedia.org/wiki/Memoization
  syntax:
    content: public static Supplier<T> <T>memoize(Supplier<T> delegate)
    parameters:
    - id: delegate
      type: com.azure.cosmos.implementation.guava25.base.Supplier<T>
    return:
      type: com.azure.cosmos.implementation.guava25.base.Supplier<T>
- uid: com.azure.cosmos.implementation.guava25.base.Suppliers.<T>memoizeWithExpiration(com.azure.cosmos.implementation.guava25.base.Supplier<T>,long,java.util.concurrent.TimeUnit)
  id: <T>memoizeWithExpiration(com.azure.cosmos.implementation.guava25.base.Supplier<T>,long,java.util.concurrent.TimeUnit)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.base.Suppliers
  langs:
  - java
  name: <T>memoizeWithExpiration(Supplier<T> delegate, long duration, TimeUnit unit)
  nameWithType: Suppliers.<T>memoizeWithExpiration(Supplier<T> delegate, long duration, TimeUnit unit)
  fullName: com.azure.cosmos.implementation.guava25.base.Suppliers.<T>memoizeWithExpiration(Supplier<T> delegate, long duration, TimeUnit unit)
  overload: com.azure.cosmos.implementation.guava25.base.Suppliers.memoizeWithExpiration*
  type: Method
  package: com.azure.cosmos.implementation.guava25.base
  summary: >-
    Returns a supplier that caches the instance supplied by the delegate and removes the cached value after the specified time has passed. Subsequent calls to `get()` return the cached value if the expiration time has not passed. After the expiration time, a new value is retrieved, cached, and returned. See: [memoization][]


    The returned supplier is thread-safe. The supplier's serialized form does not contain the cached value, which will be recalculated when `get()` is called on the reserialized instance. The actual memoization does not happen when the underlying delegate throws an exception.


    When the underlying delegate throws an exception then this memoizing supplier will keep delegating calls until it returns valid data.



    [memoization]: http://en.wikipedia.org/wiki/Memoization
  syntax:
    content: public static Supplier<T> <T>memoizeWithExpiration(Supplier<T> delegate, long duration, TimeUnit unit)
    parameters:
    - id: delegate
      type: com.azure.cosmos.implementation.guava25.base.Supplier<T>
    - id: duration
      type: long
      description: >-
        the length of time after a value is created that it should stop being returned
             by subsequent <code>get()</code> calls
    - id: unit
      type: java.util.concurrent.TimeUnit
      description: the unit that <code>duration</code> is expressed in
    return:
      type: com.azure.cosmos.implementation.guava25.base.Supplier<T>
- uid: com.azure.cosmos.implementation.guava25.base.Suppliers.<T>ofInstance(T)
  id: <T>ofInstance(T)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.base.Suppliers
  langs:
  - java
  name: <T>ofInstance(T instance)
  nameWithType: Suppliers.<T>ofInstance(T instance)
  fullName: com.azure.cosmos.implementation.guava25.base.Suppliers.<T>ofInstance(T instance)
  overload: com.azure.cosmos.implementation.guava25.base.Suppliers.ofInstance*
  type: Method
  package: com.azure.cosmos.implementation.guava25.base
  summary: Returns a supplier that always supplies `instance`.
  syntax:
    content: public static Supplier<T> <T>ofInstance(T instance)
    parameters:
    - id: instance
      type: T
    return:
      type: com.azure.cosmos.implementation.guava25.base.Supplier<T>
- uid: com.azure.cosmos.implementation.guava25.base.Suppliers.<T>supplierFunction()
  id: <T>supplierFunction()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.base.Suppliers
  langs:
  - java
  name: <T>supplierFunction()
  nameWithType: Suppliers.<T>supplierFunction()
  fullName: com.azure.cosmos.implementation.guava25.base.Suppliers.<T>supplierFunction()
  overload: com.azure.cosmos.implementation.guava25.base.Suppliers.supplierFunction*
  type: Method
  package: com.azure.cosmos.implementation.guava25.base
  summary: >-
    Returns a function that accepts a supplier and returns the result of invoking <xref uid="com.azure.cosmos.implementation.guava25.base.Supplier.get" data-throw-if-not-resolved="false">Supplier#get</xref> on that supplier.


    **Java 8 users:** use the method reference `Supplier::get` instead.
  syntax:
    content: public static Function<Supplier<T>,T> <T>supplierFunction()
    return:
      type: com.azure.cosmos.implementation.guava25.base.Function<com.azure.cosmos.implementation.guava25.base.Supplier<T>,T>
- uid: com.azure.cosmos.implementation.guava25.base.Suppliers.<T>synchronizedSupplier(com.azure.cosmos.implementation.guava25.base.Supplier<T>)
  id: <T>synchronizedSupplier(com.azure.cosmos.implementation.guava25.base.Supplier<T>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.base.Suppliers
  langs:
  - java
  name: <T>synchronizedSupplier(Supplier<T> delegate)
  nameWithType: Suppliers.<T>synchronizedSupplier(Supplier<T> delegate)
  fullName: com.azure.cosmos.implementation.guava25.base.Suppliers.<T>synchronizedSupplier(Supplier<T> delegate)
  overload: com.azure.cosmos.implementation.guava25.base.Suppliers.synchronizedSupplier*
  type: Method
  package: com.azure.cosmos.implementation.guava25.base
  summary: Returns a supplier whose `get()` method synchronizes on `delegate` before calling it, making it thread-safe.
  syntax:
    content: public static Supplier<T> <T>synchronizedSupplier(Supplier<T> delegate)
    parameters:
    - id: delegate
      type: com.azure.cosmos.implementation.guava25.base.Supplier<T>
    return:
      type: com.azure.cosmos.implementation.guava25.base.Supplier<T>
- uid: com.azure.cosmos.implementation.guava25.base.Suppliers.Suppliers()
  id: Suppliers()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.base.Suppliers
  langs:
  - java
  name: Suppliers()
  nameWithType: Suppliers.Suppliers()
  fullName: com.azure.cosmos.implementation.guava25.base.Suppliers.Suppliers()
  overload: com.azure.cosmos.implementation.guava25.base.Suppliers.Suppliers*
  type: Constructor
  package: com.azure.cosmos.implementation.guava25.base
  syntax:
    content: private Suppliers()
references:
- uid: com.azure.cosmos.implementation.guava25.base.Suppliers.Suppliers*
  name: Suppliers
  nameWithType: Suppliers.Suppliers
  fullName: com.azure.cosmos.implementation.guava25.base.Suppliers.Suppliers
  package: com.azure.cosmos.implementation.guava25.base
- uid: com.azure.cosmos.implementation.guava25.base.Function<? super F,T>
  spec.java:
  - uid: com.azure.cosmos.implementation.guava25.base.Function
    name: Function
    fullName: com.azure.cosmos.implementation.guava25.base.Function
  - name: <
    fullName: <
  - uid: '? super F'
    name: '? super F'
    fullName: '? super F'
  - name: ','
    fullName: ','
  - uid: T
    name: T
    fullName: T
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.base.Supplier<F>
  spec.java:
  - uid: com.azure.cosmos.implementation.guava25.base.Supplier
    name: Supplier
    fullName: com.azure.cosmos.implementation.guava25.base.Supplier
  - name: <
    fullName: <
  - uid: F
    name: F
    fullName: F
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.base.Supplier<T>
  spec.java:
  - uid: com.azure.cosmos.implementation.guava25.base.Supplier
    name: Supplier
    fullName: com.azure.cosmos.implementation.guava25.base.Supplier
  - name: <
    fullName: <
  - uid: T
    name: T
    fullName: T
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.base.Suppliers.compose*
  name: <F,T>compose
  nameWithType: Suppliers.<F,T>compose
  fullName: com.azure.cosmos.implementation.guava25.base.Suppliers.<F,T>compose
  package: com.azure.cosmos.implementation.guava25.base
- uid: com.azure.cosmos.implementation.guava25.base.Suppliers.memoize*
  name: <T>memoize
  nameWithType: Suppliers.<T>memoize
  fullName: com.azure.cosmos.implementation.guava25.base.Suppliers.<T>memoize
  package: com.azure.cosmos.implementation.guava25.base
- uid: long
  spec.java:
  - uid: long
    name: long
    fullName: long
- uid: java.util.concurrent.TimeUnit
  spec.java:
  - uid: java.util.concurrent.TimeUnit
    name: TimeUnit
    fullName: java.util.concurrent.TimeUnit
- uid: com.azure.cosmos.implementation.guava25.base.Suppliers.memoizeWithExpiration*
  name: <T>memoizeWithExpiration
  nameWithType: Suppliers.<T>memoizeWithExpiration
  fullName: com.azure.cosmos.implementation.guava25.base.Suppliers.<T>memoizeWithExpiration
  package: com.azure.cosmos.implementation.guava25.base
- uid: T
  spec.java:
  - uid: T
    name: T
    fullName: T
- uid: com.azure.cosmos.implementation.guava25.base.Suppliers.ofInstance*
  name: <T>ofInstance
  nameWithType: Suppliers.<T>ofInstance
  fullName: com.azure.cosmos.implementation.guava25.base.Suppliers.<T>ofInstance
  package: com.azure.cosmos.implementation.guava25.base
- uid: com.azure.cosmos.implementation.guava25.base.Suppliers.synchronizedSupplier*
  name: <T>synchronizedSupplier
  nameWithType: Suppliers.<T>synchronizedSupplier
  fullName: com.azure.cosmos.implementation.guava25.base.Suppliers.<T>synchronizedSupplier
  package: com.azure.cosmos.implementation.guava25.base
- uid: com.azure.cosmos.implementation.guava25.base.Function<com.azure.cosmos.implementation.guava25.base.Supplier<T>,T>
  spec.java:
  - uid: com.azure.cosmos.implementation.guava25.base.Function
    name: Function
    fullName: com.azure.cosmos.implementation.guava25.base.Function
  - name: <
    fullName: <
  - uid: com.azure.cosmos.implementation.guava25.base.Supplier
    name: Supplier
    fullName: com.azure.cosmos.implementation.guava25.base.Supplier
  - name: <
    fullName: <
  - uid: T
    name: T
    fullName: T
  - name: '>'
    fullName: '>'
  - name: ','
    fullName: ','
  - uid: T
    name: T
    fullName: T
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.base.Suppliers.supplierFunction*
  name: <T>supplierFunction
  nameWithType: Suppliers.<T>supplierFunction
  fullName: com.azure.cosmos.implementation.guava25.base.Suppliers.<T>supplierFunction
  package: com.azure.cosmos.implementation.guava25.base
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: java.lang.Object.finalize()
  name: Object.finalize()
  nameWithType: Object.finalize()
  fullName: java.lang.Object.finalize()
- uid: java.lang.Object.clone()
  name: Object.clone()
  nameWithType: Object.clone()
  fullName: java.lang.Object.clone()
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: java.lang.Object.equals(java.lang.Object)
  name: Object.equals(Object)
  nameWithType: Object.equals(Object)
  fullName: java.lang.Object.equals(java.lang.Object)
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.lang.Object.hashCode()
  name: Object.hashCode()
  nameWithType: Object.hashCode()
  fullName: java.lang.Object.hashCode()
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: java.lang.Object.toString()
  name: Object.toString()
  nameWithType: Object.toString()
  fullName: java.lang.Object.toString()
- uid: com.azure.cosmos.implementation.guava25.base.Function
  name: Function
  nameWithType: Function
  fullName: com.azure.cosmos.implementation.guava25.base.Function
- uid: '? super F,T'
  name: '? super F,T'
  nameWithType: '? super F,T'
  fullName: '? super F,T'
- uid: com.azure.cosmos.implementation.guava25.base.Supplier
  name: Supplier
  nameWithType: Supplier
  fullName: com.azure.cosmos.implementation.guava25.base.Supplier
- uid: F
  name: F
  nameWithType: F
  fullName: F
- uid: T>,T
  name: T>,T
  nameWithType: T>,T
  fullName: T>,T
