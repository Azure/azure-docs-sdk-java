### YamlMime:JavaType
uid: "com.azure.resourcemanager.videoanalyzer.models.VideoFlags"
fullName: "com.azure.resourcemanager.videoanalyzer.models.VideoFlags"
name: "VideoFlags"
nameWithType: "VideoFlags"
summary: "Video flags contain information about the available video actions and its dynamic properties based on the current video state."
inheritances:
- "<xref href=\"java.lang.Object?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
inheritedMembers:
- "java.lang.Object.clone()"
- "java.lang.Object.equals(java.lang.Object)"
- "java.lang.Object.finalize()"
- "java.lang.Object.getClass()"
- "java.lang.Object.hashCode()"
- "java.lang.Object.notify()"
- "java.lang.Object.notifyAll()"
- "java.lang.Object.toString()"
- "java.lang.Object.wait()"
- "java.lang.Object.wait(long)"
- "java.lang.Object.wait(long,int)"
syntax: "public final class VideoFlags"
constructors:
- uid: "com.azure.resourcemanager.videoanalyzer.models.VideoFlags.VideoFlags()"
  fullName: "com.azure.resourcemanager.videoanalyzer.models.VideoFlags.VideoFlags()"
  name: "VideoFlags()"
  nameWithType: "VideoFlags.VideoFlags()"
  syntax: "public VideoFlags()"
methods:
- uid: "com.azure.resourcemanager.videoanalyzer.models.VideoFlags.canStream()"
  fullName: "com.azure.resourcemanager.videoanalyzer.models.VideoFlags.canStream()"
  name: "canStream()"
  nameWithType: "VideoFlags.canStream()"
  summary: "Get the can<wbr>Stream property: Value indicating whether or not the video can be streamed."
  syntax: "public boolean canStream()"
  desc: "Get the canStream property: Value indicating whether or not the video can be streamed. Only \"archive\" type videos can be streamed."
  returns:
    description: "the canStream value."
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.resourcemanager.videoanalyzer.models.VideoFlags.hasData()"
  fullName: "com.azure.resourcemanager.videoanalyzer.models.VideoFlags.hasData()"
  name: "hasData()"
  nameWithType: "VideoFlags.hasData()"
  summary: "Get the has<wbr>Data property: Value indicating whether or not there has ever been data recorded or uploaded into the video."
  syntax: "public boolean hasData()"
  desc: "Get the hasData property: Value indicating whether or not there has ever been data recorded or uploaded into the video. Newly created videos have this value set to false."
  returns:
    description: "the hasData value."
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.resourcemanager.videoanalyzer.models.VideoFlags.isInUse()"
  fullName: "com.azure.resourcemanager.videoanalyzer.models.VideoFlags.isInUse()"
  name: "isInUse()"
  nameWithType: "VideoFlags.isInUse()"
  summary: "Get the is<wbr>InUse property: Value indicating whether or not the video is currently being referenced be an active pipeline."
  syntax: "public boolean isInUse()"
  desc: "Get the isInUse property: Value indicating whether or not the video is currently being referenced be an active pipeline. The fact that is being referenced, doesn't necessarily indicate that data is being received. For example, video recording may be gated on events or camera may not be accessible at the time."
  returns:
    description: "the isInUse value."
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.resourcemanager.videoanalyzer.models.VideoFlags.validate()"
  fullName: "com.azure.resourcemanager.videoanalyzer.models.VideoFlags.validate()"
  name: "validate()"
  nameWithType: "VideoFlags.validate()"
  summary: "Validates the instance."
  syntax: "public void validate()"
  desc: "Validates the instance."
- uid: "com.azure.resourcemanager.videoanalyzer.models.VideoFlags.withCanStream(boolean)"
  fullName: "com.azure.resourcemanager.videoanalyzer.models.VideoFlags.withCanStream(boolean canStream)"
  name: "withCanStream(boolean canStream)"
  nameWithType: "VideoFlags.withCanStream(boolean canStream)"
  summary: "Set the can<wbr>Stream property: Value indicating whether or not the video can be streamed."
  parameters:
  - description: "the canStream value to set."
    name: "canStream"
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public VideoFlags withCanStream(boolean canStream)"
  desc: "Set the canStream property: Value indicating whether or not the video can be streamed. Only \"archive\" type videos can be streamed."
  returns:
    description: "the VideoFlags object itself."
    type: "<xref href=\"com.azure.resourcemanager.videoanalyzer.models.VideoFlags?alt=com.azure.resourcemanager.videoanalyzer.models.VideoFlags&text=VideoFlags\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.resourcemanager.videoanalyzer.models.VideoFlags.withHasData(boolean)"
  fullName: "com.azure.resourcemanager.videoanalyzer.models.VideoFlags.withHasData(boolean hasData)"
  name: "withHasData(boolean hasData)"
  nameWithType: "VideoFlags.withHasData(boolean hasData)"
  summary: "Set the has<wbr>Data property: Value indicating whether or not there has ever been data recorded or uploaded into the video."
  parameters:
  - description: "the hasData value to set."
    name: "hasData"
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public VideoFlags withHasData(boolean hasData)"
  desc: "Set the hasData property: Value indicating whether or not there has ever been data recorded or uploaded into the video. Newly created videos have this value set to false."
  returns:
    description: "the VideoFlags object itself."
    type: "<xref href=\"com.azure.resourcemanager.videoanalyzer.models.VideoFlags?alt=com.azure.resourcemanager.videoanalyzer.models.VideoFlags&text=VideoFlags\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.resourcemanager.videoanalyzer.models.VideoFlags.withIsInUse(boolean)"
  fullName: "com.azure.resourcemanager.videoanalyzer.models.VideoFlags.withIsInUse(boolean isInUse)"
  name: "withIsInUse(boolean isInUse)"
  nameWithType: "VideoFlags.withIsInUse(boolean isInUse)"
  summary: "Set the is<wbr>InUse property: Value indicating whether or not the video is currently being referenced be an active pipeline."
  parameters:
  - description: "the isInUse value to set."
    name: "isInUse"
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public VideoFlags withIsInUse(boolean isInUse)"
  desc: "Set the isInUse property: Value indicating whether or not the video is currently being referenced be an active pipeline. The fact that is being referenced, doesn't necessarily indicate that data is being received. For example, video recording may be gated on events or camera may not be accessible at the time."
  returns:
    description: "the VideoFlags object itself."
    type: "<xref href=\"com.azure.resourcemanager.videoanalyzer.models.VideoFlags?alt=com.azure.resourcemanager.videoanalyzer.models.VideoFlags&text=VideoFlags\" data-throw-if-not-resolved=\"False\" />"
type: "class"
desc: "Video flags contain information about the available video actions and its dynamic properties based on the current video state."
metadata: {}
package: "com.azure.resourcemanager.videoanalyzer.models"
artifact: com.azure.resourcemanager:azure-resourcemanager-videoanalyzer:1.0.0-beta.5
