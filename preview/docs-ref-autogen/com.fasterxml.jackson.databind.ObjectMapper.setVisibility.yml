### YamlMime:JavaMember
uid: "com.fasterxml.jackson.databind.ObjectMapper.setVisibility*"
fullName: "com.fasterxml.jackson.databind.ObjectMapper.setVisibility"
name: "setVisibility"
nameWithType: "ObjectMapper.setVisibility"
members:
- uid: "com.fasterxml.jackson.databind.ObjectMapper.setVisibility(com.fasterxml.jackson.annotation.PropertyAccessor,com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility)"
  fullName: "com.fasterxml.jackson.databind.ObjectMapper.setVisibility(PropertyAccessor forMethod, JsonAutoDetect.Visibility visibility)"
  name: "setVisibility(PropertyAccessor forMethod, JsonAutoDetect.Visibility visibility)"
  nameWithType: "ObjectMapper.setVisibility(PropertyAccessor forMethod, JsonAutoDetect.Visibility visibility)"
  summary: "Convenience method that allows changing configuration for underlying <xref uid=\"com.fasterxml.jackson.databind.introspect.VisibilityChecker\" data-throw-if-not-resolved=\"false\" data-raw-source=\"VisibilityChecker\"></xref>s, to change details of what kinds of properties are auto-detected. Basically short cut for doing:\n\n```java\nmapper.setVisibilityChecker(\n     mapper.getVisibilityChecker().withVisibility(forMethod, visibility)\n  );\n```\n\none common use case would be to do:\n\n```java\nmapper.setVisibility(JsonMethod.FIELD, Visibility.ANY);\n```\n\nwhich would make all member fields serializable without further annotations, instead of just public fields (default setting)."
  parameters:
  - description: "Type of property descriptor affected (field, getter/isGetter,\n     setter, creator)"
    name: "forMethod"
    type: "<xref href=\"com.fasterxml.jackson.annotation.PropertyAccessor?alt=com.fasterxml.jackson.annotation.PropertyAccessor&text=PropertyAccessor\" data-throw-if-not-resolved=\"False\" />"
  - description: "Minimum visibility to require for the property descriptors of type"
    name: "visibility"
    type: "<xref href=\"com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility?alt=com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility&text=Visibility\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public ObjectMapper setVisibility(PropertyAccessor forMethod, JsonAutoDetect.Visibility visibility)"
  returns:
    description: "Modified mapper instance (that is, \"this\"), to allow chaining\n    of configuration calls"
    type: "<xref href=\"com.fasterxml.jackson.databind.ObjectMapper?alt=com.fasterxml.jackson.databind.ObjectMapper&text=ObjectMapper\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.fasterxml.jackson.databind.ObjectMapper.setVisibility(com.fasterxml.jackson.databind.introspect.VisibilityChecker<?>)"
  fullName: "com.fasterxml.jackson.databind.ObjectMapper.setVisibility(VisibilityChecker<?> vc)"
  name: "setVisibility(VisibilityChecker<?> vc)"
  nameWithType: "ObjectMapper.setVisibility(VisibilityChecker<?> vc)"
  summary: "Method for setting currently configured default <xref uid=\"com.fasterxml.jackson.databind.introspect.VisibilityChecker\" data-throw-if-not-resolved=\"false\" data-raw-source=\"VisibilityChecker\"></xref>, object used for determining whether given property element (method, field, constructor) can be auto-detected or not. This default checker is used as the base visibility: per-class overrides (both via annotations and per-type config overrides) can further change these settings."
  parameters:
  - name: "vc"
    type: "<xref href=\"com.fasterxml.jackson.databind.introspect.VisibilityChecker?alt=com.fasterxml.jackson.databind.introspect.VisibilityChecker&text=VisibilityChecker\" data-throw-if-not-resolved=\"False\" />&lt;?&gt;"
  syntax: "public ObjectMapper setVisibility(VisibilityChecker<?> vc)"
  returns:
    type: "<xref href=\"com.fasterxml.jackson.databind.ObjectMapper?alt=com.fasterxml.jackson.databind.ObjectMapper&text=ObjectMapper\" data-throw-if-not-resolved=\"False\" />"
type: "method"
metadata: {}
package: "com.fasterxml.jackson.databind"
artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
