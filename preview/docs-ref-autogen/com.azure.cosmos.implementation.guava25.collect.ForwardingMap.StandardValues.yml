### YamlMime:ManagedReference
items:
- uid: com.azure.cosmos.implementation.guava25.collect.ForwardingMap.StandardValues
  id: StandardValues
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect
  children:
  - com.azure.cosmos.implementation.guava25.collect.ForwardingMap.StandardValues.StandardValues()
  langs:
  - java
  name: ForwardingMap<K,V>.StandardValues
  nameWithType: ForwardingMap<K,V>.StandardValues
  fullName: com.azure.cosmos.implementation.guava25.collect.ForwardingMap<K,V>.StandardValues
  type: Class
  package: com.azure.cosmos.implementation.guava25.collect
  summary: 'A sensible implementation of <xref uid="java.util.Map.values" data-throw-if-not-resolved="false">Map#values</xref> in terms of the following methods: <xref uid="com.azure.cosmos.implementation.guava25.collect.ForwardingMap.clear" data-throw-if-not-resolved="false">ForwardingMap#clear</xref>, <xref uid="com.azure.cosmos.implementation.guava25.collect.ForwardingMap.containsValue" data-throw-if-not-resolved="false">ForwardingMap#containsValue</xref>, <xref uid="com.azure.cosmos.implementation.guava25.collect.ForwardingMap.isEmpty" data-throw-if-not-resolved="false">ForwardingMap#isEmpty</xref>, <xref uid="com.azure.cosmos.implementation.guava25.collect.ForwardingMap.size" data-throw-if-not-resolved="false">ForwardingMap#size</xref>, and the <xref uid="java.util.Set.iterator" data-throw-if-not-resolved="false">Set#iterator</xref> method of <xref uid="com.azure.cosmos.implementation.guava25.collect.ForwardingMap.entrySet" data-throw-if-not-resolved="false">ForwardingMap#entrySet</xref>. In many cases, you may wish to override <xref uid="com.azure.cosmos.implementation.guava25.collect.ForwardingMap.values" data-throw-if-not-resolved="false">ForwardingMap#values</xref> to forward to this implementation or a subclass thereof.'
  syntax:
    content: protected class ForwardingMap<K,V>.StandardValues extends Maps.Values<K,V>
  inheritance:
  - java.lang.Object
  - java.util.AbstractCollection
  - com.azure.cosmos.implementation.guava25.collect.Maps.Values
  inheritedMembers:
  - com.azure.cosmos.implementation.guava25.collect.Maps.Values.clear()
  - com.azure.cosmos.implementation.guava25.collect.Maps.Values.contains(java.lang.Object)
  - com.azure.cosmos.implementation.guava25.collect.Maps.Values.forEach(java.util.function.Consumer<? super V>)
  - com.azure.cosmos.implementation.guava25.collect.Maps.Values.isEmpty()
  - com.azure.cosmos.implementation.guava25.collect.Maps.Values.iterator()
  - com.azure.cosmos.implementation.guava25.collect.Maps.Values.remove(java.lang.Object)
  - com.azure.cosmos.implementation.guava25.collect.Maps.Values.removeAll(java.util.Collection<?>)
  - com.azure.cosmos.implementation.guava25.collect.Maps.Values.retainAll(java.util.Collection<?>)
  - com.azure.cosmos.implementation.guava25.collect.Maps.Values.size()
  - java.lang.Object.clone()
  - java.lang.Object.equals(java.lang.Object)
  - java.lang.Object.finalize()
  - java.lang.Object.getClass()
  - java.lang.Object.hashCode()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
  - java.util.AbstractCollection.<T>toArray(T[])
  - java.util.AbstractCollection.add(E)
  - java.util.AbstractCollection.addAll(java.util.Collection<? extends E>)
  - java.util.AbstractCollection.containsAll(java.util.Collection<?>)
  - java.util.AbstractCollection.toArray()
  - java.util.AbstractCollection.toString()
- uid: com.azure.cosmos.implementation.guava25.collect.ForwardingMap.StandardValues.StandardValues()
  id: StandardValues()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ForwardingMap.StandardValues
  langs:
  - java
  name: StandardValues()
  nameWithType: ForwardingMap<K,V>.StandardValues.StandardValues()
  fullName: com.azure.cosmos.implementation.guava25.collect.ForwardingMap<K,V>.StandardValues.StandardValues()
  overload: com.azure.cosmos.implementation.guava25.collect.ForwardingMap.StandardValues.StandardValues*
  type: Constructor
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Constructor for use by subclasses.
  syntax:
    content: public StandardValues()
references:
- uid: com.azure.cosmos.implementation.guava25.collect.ForwardingMap.StandardValues.StandardValues*
  name: StandardValues
  nameWithType: ForwardingMap<K,V>.StandardValues.StandardValues
  fullName: com.azure.cosmos.implementation.guava25.collect.ForwardingMap<K,V>.StandardValues.StandardValues
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.Maps.Values<K,V>
  name: Maps.Values<K,V>
  nameWithType: Maps.Values<K,V>
  fullName: com.azure.cosmos.implementation.guava25.collect.Maps.Values<K,V>
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: java.lang.Object.finalize()
  name: Object.finalize()
  nameWithType: Object.finalize()
  fullName: java.lang.Object.finalize()
- uid: java.lang.Object.clone()
  name: Object.clone()
  nameWithType: Object.clone()
  fullName: java.lang.Object.clone()
- uid: com.azure.cosmos.implementation.guava25.collect.Maps.Values.remove(java.lang.Object)
  name: Maps.Values.remove(Object)
  nameWithType: Maps.Values.remove(Object)
  fullName: com.azure.cosmos.implementation.guava25.collect.Maps.Values.remove(java.lang.Object)
- uid: com.azure.cosmos.implementation.guava25.collect.Maps.Values.removeAll(java.util.Collection<?>)
  name: Maps.Values.removeAll(Collection<?>)
  nameWithType: Maps.Values.removeAll(Collection<?>)
  fullName: com.azure.cosmos.implementation.guava25.collect.Maps.Values.removeAll(java.util.Collection<?>)
- uid: com.azure.cosmos.implementation.guava25.collect.Maps.Values.forEach(java.util.function.Consumer<? super V>)
  name: Maps.Values.forEach(Consumer<? super V>)
  nameWithType: Maps.Values.forEach(Consumer<? super V>)
  fullName: com.azure.cosmos.implementation.guava25.collect.Maps.Values.forEach(java.util.function.Consumer<? super V>)
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: java.lang.Object.hashCode()
  name: Object.hashCode()
  nameWithType: Object.hashCode()
  fullName: java.lang.Object.hashCode()
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: java.util.AbstractCollection.<T>toArray(T[])
  name: AbstractCollection.<T>toArray(T[])
  nameWithType: AbstractCollection.<T>toArray(T[])
  fullName: java.util.AbstractCollection.<T>toArray(T[])
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: com.azure.cosmos.implementation.guava25.collect.Maps.Values.iterator()
  name: Maps.Values.iterator()
  nameWithType: Maps.Values.iterator()
  fullName: com.azure.cosmos.implementation.guava25.collect.Maps.Values.iterator()
- uid: java.util.AbstractCollection.toArray()
  name: AbstractCollection.toArray()
  nameWithType: AbstractCollection.toArray()
  fullName: java.util.AbstractCollection.toArray()
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: com.azure.cosmos.implementation.guava25.collect.Maps.Values.contains(java.lang.Object)
  name: Maps.Values.contains(Object)
  nameWithType: Maps.Values.contains(Object)
  fullName: com.azure.cosmos.implementation.guava25.collect.Maps.Values.contains(java.lang.Object)
- uid: java.lang.Object.equals(java.lang.Object)
  name: Object.equals(Object)
  nameWithType: Object.equals(Object)
  fullName: java.lang.Object.equals(java.lang.Object)
- uid: com.azure.cosmos.implementation.guava25.collect.Maps.Values.retainAll(java.util.Collection<?>)
  name: Maps.Values.retainAll(Collection<?>)
  nameWithType: Maps.Values.retainAll(Collection<?>)
  fullName: com.azure.cosmos.implementation.guava25.collect.Maps.Values.retainAll(java.util.Collection<?>)
- uid: com.azure.cosmos.implementation.guava25.collect.Maps.Values.clear()
  name: Maps.Values.clear()
  nameWithType: Maps.Values.clear()
  fullName: com.azure.cosmos.implementation.guava25.collect.Maps.Values.clear()
- uid: com.azure.cosmos.implementation.guava25.collect.Maps.Values.isEmpty()
  name: Maps.Values.isEmpty()
  nameWithType: Maps.Values.isEmpty()
  fullName: com.azure.cosmos.implementation.guava25.collect.Maps.Values.isEmpty()
- uid: java.util.AbstractCollection.add(E)
  name: AbstractCollection.add(E)
  nameWithType: AbstractCollection.add(E)
  fullName: java.util.AbstractCollection.add(E)
- uid: java.util.AbstractCollection.containsAll(java.util.Collection<?>)
  name: AbstractCollection.containsAll(Collection<?>)
  nameWithType: AbstractCollection.containsAll(Collection<?>)
  fullName: java.util.AbstractCollection.containsAll(java.util.Collection<?>)
- uid: java.util.AbstractCollection.toString()
  name: AbstractCollection.toString()
  nameWithType: AbstractCollection.toString()
  fullName: java.util.AbstractCollection.toString()
- uid: com.azure.cosmos.implementation.guava25.collect.Maps.Values.size()
  name: Maps.Values.size()
  nameWithType: Maps.Values.size()
  fullName: com.azure.cosmos.implementation.guava25.collect.Maps.Values.size()
- uid: java.util.AbstractCollection.addAll(java.util.Collection<? extends E>)
  name: AbstractCollection.addAll(Collection<? extends E>)
  nameWithType: AbstractCollection.addAll(Collection<? extends E>)
  fullName: java.util.AbstractCollection.addAll(java.util.Collection<? extends E>)
- uid: com.azure.cosmos.implementation.guava25.collect.Maps.Values
  name: Maps.Values
  nameWithType: Maps.Values
  fullName: com.azure.cosmos.implementation.guava25.collect.Maps.Values
- uid: K,V
  name: K,V
  nameWithType: K,V
  fullName: K,V
- uid: com.azure.cosmos.implementation.guava25.collect.Maps.Values.removeAll(java.util.Collection
  name: Maps.Values.removeAll(Collection
  nameWithType: Maps.Values.removeAll(Collection
  fullName: com.azure.cosmos.implementation.guava25.collect.Maps.Values.removeAll(java.util.Collection
- uid: ?>)
  name: ?>)
  nameWithType: ?>)
  fullName: ?>)
- uid: com.azure.cosmos.implementation.guava25.collect.Maps.Values.forEach(java.util.function.Consumer
  name: Maps.Values.forEach(Consumer
  nameWithType: Maps.Values.forEach(Consumer
  fullName: com.azure.cosmos.implementation.guava25.collect.Maps.Values.forEach(java.util.function.Consumer
- uid: '? super V>)'
  name: '? super V>)'
  nameWithType: '? super V>)'
  fullName: '? super V>)'
- uid: T>toArray(T[])
  name: T>toArray(T[])
  nameWithType: T>toArray(T[])
  fullName: T>toArray(T[])
- uid: java.util.AbstractCollection.
  name: AbstractCollection.
  nameWithType: AbstractCollection.
  fullName: java.util.AbstractCollection.
- uid: com.azure.cosmos.implementation.guava25.collect.Maps.Values.retainAll(java.util.Collection
  name: Maps.Values.retainAll(Collection
  nameWithType: Maps.Values.retainAll(Collection
  fullName: com.azure.cosmos.implementation.guava25.collect.Maps.Values.retainAll(java.util.Collection
- uid: java.util.AbstractCollection.containsAll(java.util.Collection
  name: AbstractCollection.containsAll(Collection
  nameWithType: AbstractCollection.containsAll(Collection
  fullName: java.util.AbstractCollection.containsAll(java.util.Collection
- uid: '? extends E>)'
  name: '? extends E>)'
  nameWithType: '? extends E>)'
  fullName: '? extends E>)'
- uid: java.util.AbstractCollection.addAll(java.util.Collection
  name: AbstractCollection.addAll(Collection
  nameWithType: AbstractCollection.addAll(Collection
  fullName: java.util.AbstractCollection.addAll(java.util.Collection
