### YamlMime:JavaMember
uid: "com.fasterxml.jackson.databind.DeserializationContext.getContextualType*"
fullName: "com.fasterxml.jackson.databind.DeserializationContext.getContextualType"
name: "getContextualType"
nameWithType: "DeserializationContext.getContextualType"
members:
- uid: "com.fasterxml.jackson.databind.DeserializationContext.getContextualType()"
  fullName: "com.fasterxml.jackson.databind.DeserializationContext.getContextualType()"
  name: "getContextualType()"
  nameWithType: "DeserializationContext.getContextualType()"
  summary: "Accessor to <xref uid=\"com.fasterxml.jackson.databind.JavaType\" data-throw-if-not-resolved=\"false\" data-raw-source=\"JavaType\"></xref> of currently contextualized <xref uid=\"com.fasterxml.jackson.databind.deser.ContextualDeserializer\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ContextualDeserializer\"></xref>, if any. This is sometimes useful for generic <xref uid=\"com.fasterxml.jackson.databind.JsonDeserializer\" data-throw-if-not-resolved=\"false\" data-raw-source=\"JsonDeserializer\"></xref>s that do not get passed (or do not retain) type information when being constructed: happens for example for deserializers constructed from annotations."
  syntax: "public JavaType getContextualType()"
  returns:
    description: "Type of <xref uid=\"com.fasterxml.jackson.databind.deser.ContextualDeserializer\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ContextualDeserializer\"></xref> being contextualized,\n   if process is on-going; null if not."
    type: "<xref href=\"com.fasterxml.jackson.databind.JavaType?alt=com.fasterxml.jackson.databind.JavaType&text=JavaType\" data-throw-if-not-resolved=\"False\" />"
type: "method"
metadata: {}
package: "com.fasterxml.jackson.databind"
artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
