### YamlMime:JavaMember
uid: "com.azure.security.keyvault.secrets.SecretAsyncClient.listPropertiesOfSecretVersions*"
fullName: "com.azure.security.keyvault.secrets.SecretAsyncClient.listPropertiesOfSecretVersions"
name: "listPropertiesOfSecretVersions"
nameWithType: "SecretAsyncClient.listPropertiesOfSecretVersions"
members:
- uid: "com.azure.security.keyvault.secrets.SecretAsyncClient.listPropertiesOfSecretVersions(java.lang.String)"
  fullName: "com.azure.security.keyvault.secrets.SecretAsyncClient.listPropertiesOfSecretVersions(String name)"
  name: "listPropertiesOfSecretVersions(String name)"
  nameWithType: "SecretAsyncClient.listPropertiesOfSecretVersions(String name)"
  summary: "Lists all versions of the specified secret. Each <xref uid=\"com.azure.security.keyvault.secrets.models.SecretProperties\" data-throw-if-not-resolved=\"false\" data-raw-source=\"secret\"></xref> returned only has its identifier and attributes populated. The secret values and secret versions are not listed in the response. This operation requires the `secrets/list` permission.\n\n**Code sample**\n\nThe sample below fetches the all the versions of the given secret. For each version retrieved, makes a call to <xref uid=\"com.azure.security.keyvault.secrets.SecretAsyncClient.getSecret(java.lang.String,java.lang.String)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"getSecret(String, String)\"></xref> to get the version's value, and then prints it out.\n\n```java\nsecretAsyncClient.listPropertiesOfSecretVersions(\"secretName\")\n     .flatMap(secretProperties -> {\n         System.out.println(\"Get secret value for version: \" + secretProperties.getVersion());\n         return secretAsyncClient.getSecret(secretProperties.getName(), secretProperties.getVersion());\n     })\n     .subscribe(secret -> System.out.printf(\"Received secret with name %s and type %s%n\",\n         secret.getName(), secret.getValue()));\n```"
  parameters:
  - description: "The name of the secret."
    name: "name"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PagedFlux<SecretProperties> listPropertiesOfSecretVersions(String name)"
  returns:
    description: "A <xref uid=\"com.azure.core.http.rest.PagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedFlux\"></xref> containing <xref uid=\"com.azure.security.keyvault.secrets.models.SecretProperties\" data-throw-if-not-resolved=\"false\" data-raw-source=\"properties\"></xref> of all the versions of the specified\n     secret in the vault. Flux is empty if secret with <code>name</code> does not exist in key vault"
    type: "<xref href=\"com.azure.core.http.rest.PagedFlux?alt=com.azure.core.http.rest.PagedFlux&text=PagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.security.keyvault.secrets.models.SecretProperties?alt=com.azure.security.keyvault.secrets.models.SecretProperties&text=SecretProperties\" data-throw-if-not-resolved=\"False\" />&gt;"
type: "method"
metadata: {}
package: "com.azure.security.keyvault.secrets"
artifact: com.azure:azure-security-keyvault-secrets:4.3.0-beta.2
