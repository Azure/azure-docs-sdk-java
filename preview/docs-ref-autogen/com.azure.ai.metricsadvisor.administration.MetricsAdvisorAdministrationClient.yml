### YamlMime:ManagedReference
items:
- uid: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient
  id: MetricsAdvisorAdministrationClient
  artifact: com.azure:azure-ai-metricsadvisor:1.0.0-beta.2
  parent: com.azure.ai.metricsadvisor.administration
  children:
  - com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.createAnomalyAlertConfig(com.azure.ai.metricsadvisor.models.AnomalyAlertConfiguration)
  - com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.createAnomalyAlertConfigWithResponse(com.azure.ai.metricsadvisor.models.AnomalyAlertConfiguration,com.azure.core.util.Context)
  - com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.createDataFeed(com.azure.ai.metricsadvisor.models.DataFeed)
  - com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.createDataFeedWithResponse(com.azure.ai.metricsadvisor.models.DataFeed,com.azure.core.util.Context)
  - com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.createHook(com.azure.ai.metricsadvisor.models.NotificationHook)
  - com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.createHookWithResponse(com.azure.ai.metricsadvisor.models.NotificationHook,com.azure.core.util.Context)
  - com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.createMetricAnomalyDetectionConfig(java.lang.String,com.azure.ai.metricsadvisor.models.AnomalyDetectionConfiguration)
  - com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.createMetricAnomalyDetectionConfigWithResponse(java.lang.String,com.azure.ai.metricsadvisor.models.AnomalyDetectionConfiguration,com.azure.core.util.Context)
  - com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.deleteAnomalyAlertConfig(java.lang.String)
  - com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.deleteAnomalyAlertConfigWithResponse(java.lang.String,com.azure.core.util.Context)
  - com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.deleteDataFeed(java.lang.String)
  - com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.deleteDataFeedWithResponse(java.lang.String,com.azure.core.util.Context)
  - com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.deleteHook(java.lang.String)
  - com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.deleteHookWithResponse(java.lang.String,com.azure.core.util.Context)
  - com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.deleteMetricAnomalyDetectionConfig(java.lang.String)
  - com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.deleteMetricAnomalyDetectionConfigWithResponse(java.lang.String,com.azure.core.util.Context)
  - com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.getAnomalyAlertConfig(java.lang.String)
  - com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.getAnomalyAlertConfigWithResponse(java.lang.String,com.azure.core.util.Context)
  - com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.getDataFeed(java.lang.String)
  - com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.getDataFeedIngestionProgress(java.lang.String)
  - com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.getDataFeedIngestionProgressWithResponse(java.lang.String,com.azure.core.util.Context)
  - com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.getDataFeedWithResponse(java.lang.String,com.azure.core.util.Context)
  - com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.getHook(java.lang.String)
  - com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.getHookWithResponse(java.lang.String,com.azure.core.util.Context)
  - com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.getMetricAnomalyDetectionConfig(java.lang.String)
  - com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.getMetricAnomalyDetectionConfigWithResponse(java.lang.String,com.azure.core.util.Context)
  - com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.listAnomalyAlertConfigs(java.lang.String)
  - com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.listAnomalyAlertConfigs(java.lang.String,com.azure.core.util.Context)
  - com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.listDataFeedIngestionStatus(java.lang.String,com.azure.ai.metricsadvisor.models.ListDataFeedIngestionOptions)
  - com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.listDataFeedIngestionStatus(java.lang.String,com.azure.ai.metricsadvisor.models.ListDataFeedIngestionOptions,com.azure.core.util.Context)
  - com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.listDataFeeds()
  - com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.listDataFeeds(com.azure.ai.metricsadvisor.models.ListDataFeedOptions,com.azure.core.util.Context)
  - com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.listHooks()
  - com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.listHooks(com.azure.ai.metricsadvisor.models.ListHookOptions,com.azure.core.util.Context)
  - com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.listMetricAnomalyDetectionConfigs(java.lang.String)
  - com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.listMetricAnomalyDetectionConfigs(java.lang.String,com.azure.core.util.Context)
  - com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.refreshDataFeedIngestion(java.lang.String,java.time.OffsetDateTime,java.time.OffsetDateTime)
  - com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.refreshDataFeedIngestionWithResponse(java.lang.String,java.time.OffsetDateTime,java.time.OffsetDateTime,com.azure.core.util.Context)
  - com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.updateAnomalyAlertConfig(com.azure.ai.metricsadvisor.models.AnomalyAlertConfiguration)
  - com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.updateAnomalyAlertConfigWithResponse(com.azure.ai.metricsadvisor.models.AnomalyAlertConfiguration,com.azure.core.util.Context)
  - com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.updateDataFeed(com.azure.ai.metricsadvisor.models.DataFeed)
  - com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.updateDataFeedWithResponse(com.azure.ai.metricsadvisor.models.DataFeed,com.azure.core.util.Context)
  - com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.updateHook(com.azure.ai.metricsadvisor.models.NotificationHook)
  - com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.updateHookWithResponse(com.azure.ai.metricsadvisor.models.NotificationHook,com.azure.core.util.Context)
  - com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.updateMetricAnomalyDetectionConfig(com.azure.ai.metricsadvisor.models.AnomalyDetectionConfiguration)
  - com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.updateMetricAnomalyDetectionConfigWithResponse(com.azure.ai.metricsadvisor.models.AnomalyDetectionConfiguration,com.azure.core.util.Context)
  langs:
  - java
  name: MetricsAdvisorAdministrationClient
  nameWithType: MetricsAdvisorAdministrationClient
  fullName: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient
  type: Class
  package: com.azure.ai.metricsadvisor.administration
  summary: >-
    This class provides an asynchronous client that contains all the operations that apply to Azure Metrics Advisor.


    **Instantiating a synchronous Metrics Advisor Administration Client**


    ```java

    MetricsAdvisorAdministrationClient metricsAdvisorAdminClient =
         new MetricsAdvisorAdministrationClientBuilder()
             .credential(new MetricsAdvisorKeyCredential("{subscription_key}", "{api_key}"))
             .endpoint("{endpoint}")
             .buildClient();
    ```
  syntax:
    content: public final class MetricsAdvisorAdministrationClient
  inheritance:
  - java.lang.Object
  inheritedMembers:
  - java.lang.Object.clone()
  - java.lang.Object.equals(java.lang.Object)
  - java.lang.Object.finalize()
  - java.lang.Object.getClass()
  - java.lang.Object.hashCode()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.toString()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
- uid: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.MetricsAdvisorAdministrationClient(com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient)
  id: MetricsAdvisorAdministrationClient(com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient)
  artifact: com.azure:azure-ai-metricsadvisor:1.0.0-beta.2
  parent: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient
  langs:
  - java
  name: MetricsAdvisorAdministrationClient(MetricsAdvisorAdministrationAsyncClient client)
  nameWithType: MetricsAdvisorAdministrationClient.MetricsAdvisorAdministrationClient(MetricsAdvisorAdministrationAsyncClient client)
  fullName: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.MetricsAdvisorAdministrationClient(MetricsAdvisorAdministrationAsyncClient client)
  overload: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.MetricsAdvisorAdministrationClient*
  type: Constructor
  package: com.azure.ai.metricsadvisor.administration
  summary: Create a <xref uid="com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient" data-throw-if-not-resolved="false">client</xref> that sends requests to the Metrics Advisor service's endpoint. Each service call goes through the <xref uid="com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClientBuilder.pipeline*" data-throw-if-not-resolved="false">http pipeline</xref>.
  syntax:
    content: " MetricsAdvisorAdministrationClient(MetricsAdvisorAdministrationAsyncClient client)"
    parameters:
    - id: client
      type: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient
      description: The <xref uid="com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient" data-throw-if-not-resolved="false">MetricsAdvisorAdministrationAsyncClient</xref> that the client routes its request through.
- uid: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.createAnomalyAlertConfig(com.azure.ai.metricsadvisor.models.AnomalyAlertConfiguration)
  id: createAnomalyAlertConfig(com.azure.ai.metricsadvisor.models.AnomalyAlertConfiguration)
  artifact: com.azure:azure-ai-metricsadvisor:1.0.0-beta.2
  parent: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient
  langs:
  - java
  name: createAnomalyAlertConfig(AnomalyAlertConfiguration alertConfiguration)
  nameWithType: MetricsAdvisorAdministrationClient.createAnomalyAlertConfig(AnomalyAlertConfiguration alertConfiguration)
  fullName: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.createAnomalyAlertConfig(AnomalyAlertConfiguration alertConfiguration)
  overload: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.createAnomalyAlertConfig*
  type: Method
  package: com.azure.ai.metricsadvisor.administration
  summary: "Create a configuration to trigger alert when anomalies are detected.\n\n**Code sample**\n\n```java\nString detectionConfigurationId1 = \"9ol48er30-6e6e-4391-b78f-b00dfee1e6f5\";\n String detectionConfigurationId2 = \"3e58er30-6e6e-4391-b78f-b00dfee1e6f5\";\n String hookId1 = \"5f48er30-6e6e-4391-b78f-b00dfee1e6f5\";\n String hookId2 = \"8i48er30-6e6e-4391-b78f-b00dfee1e6f5\";\n \n final AnomalyAlertConfiguration anomalyAlertConfiguration\n     = metricsAdvisorAdminClient.createAnomalyAlertConfig(\n     new AnomalyAlertConfiguration(\"My AnomalyAlert config name\")\n         .setDescription(\"alert config description\")\n         .setMetricAlertConfigurations(Arrays.asList(\n             new MetricAnomalyAlertConfiguration(detectionConfigurationId1,\n                 MetricAnomalyAlertScope.forWholeSeries()),\n             new MetricAnomalyAlertConfiguration(detectionConfigurationId2,\n                 MetricAnomalyAlertScope.forWholeSeries())\n                 .setAlertConditions(new MetricAnomalyAlertConditions()\n                     .setSeverityRangeCondition(new SeverityCondition()\n                         .setMaxAlertSeverity(AnomalySeverity.HIGH)))))\n         .setCrossMetricsOperator(MetricAnomalyAlertConfigurationsOperator.AND)\n         .setIdOfHooksToAlert(Arrays.asList(hookId1, hookId2)));\n \n System.out.printf(\"DataPoint Anomaly alert configuration Id: %s%n\",\n     anomalyAlertConfiguration.getId());\n System.out.printf(\"DataPoint Anomaly alert configuration description: %s%n\",\n     anomalyAlertConfiguration.getDescription());\n System.out.printf(\"DataPoint Anomaly alert configuration hook ids: %s%n\",\n     anomalyAlertConfiguration.getIdOfHooksToAlert());\n System.out.printf(\"DataPoint Anomaly alert configuration cross metrics operator: %s%n\",\n     anomalyAlertConfiguration.getCrossMetricsOperator().toString());\n```"
  syntax:
    content: public AnomalyAlertConfiguration createAnomalyAlertConfig(AnomalyAlertConfiguration alertConfiguration)
    parameters:
    - id: alertConfiguration
      type: com.azure.ai.metricsadvisor.models.AnomalyAlertConfiguration
      description: The anomaly alerting configuration.
    return:
      type: com.azure.ai.metricsadvisor.models.AnomalyAlertConfiguration
      description: The <xref uid="com.azure.ai.metricsadvisor.models.AnomalyAlertConfiguration" data-throw-if-not-resolved="false">AnomalyAlertConfiguration</xref> that was created.
- uid: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.createAnomalyAlertConfigWithResponse(com.azure.ai.metricsadvisor.models.AnomalyAlertConfiguration,com.azure.core.util.Context)
  id: createAnomalyAlertConfigWithResponse(com.azure.ai.metricsadvisor.models.AnomalyAlertConfiguration,com.azure.core.util.Context)
  artifact: com.azure:azure-ai-metricsadvisor:1.0.0-beta.2
  parent: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient
  langs:
  - java
  name: createAnomalyAlertConfigWithResponse(AnomalyAlertConfiguration alertConfiguration, Context context)
  nameWithType: MetricsAdvisorAdministrationClient.createAnomalyAlertConfigWithResponse(AnomalyAlertConfiguration alertConfiguration, Context context)
  fullName: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.createAnomalyAlertConfigWithResponse(AnomalyAlertConfiguration alertConfiguration, Context context)
  overload: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.createAnomalyAlertConfigWithResponse*
  type: Method
  package: com.azure.ai.metricsadvisor.administration
  summary: "Create a configuration to trigger alert when anomalies are detected.\n\n**Code sample**\n\n```java\nString detectionConfigurationId1 = \"9ol48er30-6e6e-4391-b78f-b00dfee1e6f5\";\n String detectionConfigurationId2 = \"3e58er30-6e6e-4391-b78f-b00dfee1e6f5\";\n String hookId1 = \"5f48er30-6e6e-4391-b78f-b00dfee1e6f5\";\n String hookId2 = \"8i48er30-6e6e-4391-b78f-b00dfee1e6f5\";\n \n final Response<AnomalyAlertConfiguration> alertConfigurationResponse\n     = metricsAdvisorAdminClient.createAnomalyAlertConfigWithResponse(\n     new AnomalyAlertConfiguration(\"My AnomalyAlert config name\")\n         .setDescription(\"alert config description\")\n         .setMetricAlertConfigurations(Arrays.asList(\n             new MetricAnomalyAlertConfiguration(detectionConfigurationId1,\n                 MetricAnomalyAlertScope.forWholeSeries()),\n             new MetricAnomalyAlertConfiguration(detectionConfigurationId2,\n                 MetricAnomalyAlertScope.forWholeSeries())\n                 .setAlertConditions(new MetricAnomalyAlertConditions()\n                     .setSeverityRangeCondition(new SeverityCondition()\n                         .setMaxAlertSeverity(AnomalySeverity.HIGH)))))\n         .setCrossMetricsOperator(MetricAnomalyAlertConfigurationsOperator.AND)\n         .setIdOfHooksToAlert(Arrays.asList(hookId1, hookId2)), Context.NONE);\n \n System.out.printf(\"DataPoint Anomaly alert creation operation status: %s%n\",\n     alertConfigurationResponse.getStatusCode());\n final AnomalyAlertConfiguration anomalyAlertConfiguration = alertConfigurationResponse.getValue();\n System.out.printf(\"DataPoint Anomaly alert configuration Id: %s%n\", anomalyAlertConfiguration.getId());\n System.out.printf(\"DataPoint Anomaly alert configuration description: %s%n\",\n     anomalyAlertConfiguration.getDescription());\n System.out.printf(\"DataPoint Anomaly alert configuration hook ids: %s%n\",\n     anomalyAlertConfiguration.getIdOfHooksToAlert());\n System.out.printf(\"DataPoint Anomaly alert configuration cross metrics operator: %s%n\",\n     anomalyAlertConfiguration.getCrossMetricsOperator().toString());\n```"
  syntax:
    content: public Response<AnomalyAlertConfiguration> createAnomalyAlertConfigWithResponse(AnomalyAlertConfiguration alertConfiguration, Context context)
    parameters:
    - id: alertConfiguration
      type: com.azure.ai.metricsadvisor.models.AnomalyAlertConfiguration
      description: The anomaly alerting configuration.
    - id: context
      type: com.azure.core.util.Context
      description: Additional context that is passed through the Http pipeline during the service call.
    return:
      type: com.azure.core.http.rest.Response<com.azure.ai.metricsadvisor.models.AnomalyAlertConfiguration>
      description: A <xref uid="com.azure.core.http.rest.Response" data-throw-if-not-resolved="false">Response</xref> containing the created <xref uid="com.azure.ai.metricsadvisor.models.AnomalyAlertConfiguration" data-throw-if-not-resolved="false">AnomalyAlertConfiguration</xref>.
- uid: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.createDataFeed(com.azure.ai.metricsadvisor.models.DataFeed)
  id: createDataFeed(com.azure.ai.metricsadvisor.models.DataFeed)
  artifact: com.azure:azure-ai-metricsadvisor:1.0.0-beta.2
  parent: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient
  langs:
  - java
  name: createDataFeed(DataFeed dataFeed)
  nameWithType: MetricsAdvisorAdministrationClient.createDataFeed(DataFeed dataFeed)
  fullName: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.createDataFeed(DataFeed dataFeed)
  overload: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.createDataFeed*
  type: Method
  package: com.azure.ai.metricsadvisor.administration
  summary: "Create a new data feed.\n\n**Code sample**\n\n```java\nDataFeed dataFeed = new DataFeed()\n     .setName(\"dataFeedName\")\n     .setSource(new MySqlDataFeedSource(\"conn-string\", \"query\"))\n     .setGranularity(new DataFeedGranularity().setGranularityType(DataFeedGranularityType.DAILY))\n     .setSchema(new DataFeedSchema(\n         Arrays.asList(\n             new DataFeedMetric().setName(\"cost\"),\n             new DataFeedMetric().setName(\"revenue\")\n         )).setDimensions(\n         Arrays.asList(\n             new DataFeedDimension().setName(\"city\"),\n             new DataFeedDimension().setName(\"category\")\n         ))\n     )\n     .setIngestionSettings(new DataFeedIngestionSettings(OffsetDateTime.parse(\"2020-01-01T00:00:00Z\")))\n     .setOptions(new DataFeedOptions()\n         .setDescription(\"data feed description\")\n         .setRollupSettings(new DataFeedRollupSettings()\n             .setRollupType(DataFeedRollupType.AUTO_ROLLUP)));\n \n DataFeed createdDataFeed = metricsAdvisorAdminClient.createDataFeed(dataFeed);\n \n System.out.printf(\"Data feed Id: %s%n\", createdDataFeed.getId());\n System.out.printf(\"Data feed description: %s%n\", createdDataFeed.getOptions().getDescription());\n System.out.printf(\"Data feed source type: %s%n\", createdDataFeed.getSourceType());\n System.out.printf(\"Data feed creator: %s%n\", createdDataFeed.getCreator());\n```"
  syntax:
    content: public DataFeed createDataFeed(DataFeed dataFeed)
    parameters:
    - id: dataFeed
      type: com.azure.ai.metricsadvisor.models.DataFeed
      description: The data feed to be created.
    return:
      type: com.azure.ai.metricsadvisor.models.DataFeed
      description: The created data feed.
- uid: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.createDataFeedWithResponse(com.azure.ai.metricsadvisor.models.DataFeed,com.azure.core.util.Context)
  id: createDataFeedWithResponse(com.azure.ai.metricsadvisor.models.DataFeed,com.azure.core.util.Context)
  artifact: com.azure:azure-ai-metricsadvisor:1.0.0-beta.2
  parent: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient
  langs:
  - java
  name: createDataFeedWithResponse(DataFeed dataFeed, Context context)
  nameWithType: MetricsAdvisorAdministrationClient.createDataFeedWithResponse(DataFeed dataFeed, Context context)
  fullName: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.createDataFeedWithResponse(DataFeed dataFeed, Context context)
  overload: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.createDataFeedWithResponse*
  type: Method
  package: com.azure.ai.metricsadvisor.administration
  summary: "Create a new data feed with REST response.\n\n**Code sample**\n\n```java\nDataFeed dataFeed = new DataFeed()\n     .setName(\"dataFeedName\")\n     .setSource(new MySqlDataFeedSource(\"conn-string\", \"query\"))\n     .setGranularity(new DataFeedGranularity().setGranularityType(DataFeedGranularityType.DAILY))\n     .setSchema(new DataFeedSchema(\n         Arrays.asList(\n             new DataFeedMetric().setName(\"cost\"),\n             new DataFeedMetric().setName(\"revenue\")\n         )).setDimensions(\n         Arrays.asList(\n             new DataFeedDimension().setName(\"city\"),\n             new DataFeedDimension().setName(\"category\")\n         ))\n     )\n     .setIngestionSettings(new DataFeedIngestionSettings(OffsetDateTime.parse(\"2020-01-01T00:00:00Z\")))\n     .setOptions(new DataFeedOptions()\n         .setDescription(\"data feed description\")\n         .setRollupSettings(new DataFeedRollupSettings()\n             .setRollupType(DataFeedRollupType.AUTO_ROLLUP)));\n \n final Response<DataFeed> createdDataFeedResponse =\n     metricsAdvisorAdminClient.createDataFeedWithResponse(dataFeed, Context.NONE);\n \n System.out.printf(\"Data feed create operation status: %s%n\", createdDataFeedResponse.getStatusCode());\n DataFeed createdDataFeed = createdDataFeedResponse.getValue();\n System.out.printf(\"Data feed Id: %s%n\", createdDataFeed.getId());\n System.out.printf(\"Data feed description: %s%n\", createdDataFeed.getOptions().getDescription());\n System.out.printf(\"Data feed source type: %s%n\", createdDataFeed.getSourceType());\n System.out.printf(\"Data feed creator: %s%n\", createdDataFeed.getCreator());\n```"
  syntax:
    content: public Response<DataFeed> createDataFeedWithResponse(DataFeed dataFeed, Context context)
    parameters:
    - id: dataFeed
      type: com.azure.ai.metricsadvisor.models.DataFeed
      description: The data feed to be created.
    - id: context
      type: com.azure.core.util.Context
      description: Additional context that is passed through the HTTP pipeline during the service call.
    return:
      type: com.azure.core.http.rest.Response<com.azure.ai.metricsadvisor.models.DataFeed>
      description: A <xref uid="com.azure.core.http.rest.Response" data-throw-if-not-resolved="false">Response</xref> containing the created data feed.
- uid: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.createHook(com.azure.ai.metricsadvisor.models.NotificationHook)
  id: createHook(com.azure.ai.metricsadvisor.models.NotificationHook)
  artifact: com.azure:azure-ai-metricsadvisor:1.0.0-beta.2
  parent: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient
  langs:
  - java
  name: createHook(NotificationHook notificationHook)
  nameWithType: MetricsAdvisorAdministrationClient.createHook(NotificationHook notificationHook)
  fullName: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.createHook(NotificationHook notificationHook)
  overload: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.createHook*
  type: Method
  package: com.azure.ai.metricsadvisor.administration
  summary: "Creates a notificationHook that receives anomaly incident alerts.\n\n**Code sample**\n\n```java\nNotificationHook emailNotificationHook = new EmailNotificationHook(\"email notificationHook\")\n     .setDescription(\"my email notificationHook\")\n     .addEmailToAlert(\"alertme{@literal @}alertme.com\")\n     .setExternalLink(\"https://adwiki.azurewebsites.net/articles/howto/alerts/create-hooks.html\");\n \n NotificationHook notificationHook = metricsAdvisorAdminClient.createHook(emailNotificationHook);\n EmailNotificationHook createdEmailHook = (EmailNotificationHook) notificationHook;\n System.out.printf(\"NotificationHook Id: %s%n\", createdEmailHook.getId());\n System.out.printf(\"NotificationHook Name: %s%n\", createdEmailHook.getName());\n System.out.printf(\"NotificationHook Description: %s%n\", createdEmailHook.getDescription());\n System.out.printf(\"NotificationHook External Link: %s%n\", createdEmailHook.getExternalLink());\n System.out.printf(\"NotificationHook Emails: %s%n\", String.join(\",\",\n     createdEmailHook.getEmailsToAlert()));\n```"
  syntax:
    content: public NotificationHook createHook(NotificationHook notificationHook)
    parameters:
    - id: notificationHook
      type: com.azure.ai.metricsadvisor.models.NotificationHook
      description: The notificationHook.
    return:
      type: com.azure.ai.metricsadvisor.models.NotificationHook
      description: The created <xref uid="com.azure.ai.metricsadvisor.models.NotificationHook" data-throw-if-not-resolved="false">NotificationHook</xref>.
- uid: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.createHookWithResponse(com.azure.ai.metricsadvisor.models.NotificationHook,com.azure.core.util.Context)
  id: createHookWithResponse(com.azure.ai.metricsadvisor.models.NotificationHook,com.azure.core.util.Context)
  artifact: com.azure:azure-ai-metricsadvisor:1.0.0-beta.2
  parent: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient
  langs:
  - java
  name: createHookWithResponse(NotificationHook notificationHook, Context context)
  nameWithType: MetricsAdvisorAdministrationClient.createHookWithResponse(NotificationHook notificationHook, Context context)
  fullName: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.createHookWithResponse(NotificationHook notificationHook, Context context)
  overload: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.createHookWithResponse*
  type: Method
  package: com.azure.ai.metricsadvisor.administration
  summary: "Creates a notificationHook that receives anomaly incident alerts.\n\n**Code sample**\n\n```java\nNotificationHook emailNotificationHook = new EmailNotificationHook(\"email hook\")\n     .setDescription(\"my email hook\")\n     .addEmailToAlert(\"alertme{@literal @}alertme.com\")\n     .setExternalLink(\"https://adwiki.azurewebsites.net/articles/howto/alerts/create-hooks.html\");\n \n Response<NotificationHook> response\n     = metricsAdvisorAdminClient.createHookWithResponse(emailNotificationHook, Context.NONE);\n System.out.printf(\"Response statusCode: %d%n\", response.getStatusCode());\n EmailNotificationHook createdEmailHook = (EmailNotificationHook) response.getValue();\n System.out.printf(\"NotificationHook Id: %s%n\", createdEmailHook.getId());\n System.out.printf(\"NotificationHook Name: %s%n\", createdEmailHook.getName());\n System.out.printf(\"NotificationHook Description: %s%n\", createdEmailHook.getDescription());\n System.out.printf(\"NotificationHook External Link: %s%n\", createdEmailHook.getExternalLink());\n System.out.printf(\"NotificationHook Emails: %s%n\", String.join(\",\",\n     createdEmailHook.getEmailsToAlert()));\n```"
  syntax:
    content: public Response<NotificationHook> createHookWithResponse(NotificationHook notificationHook, Context context)
    parameters:
    - id: notificationHook
      type: com.azure.ai.metricsadvisor.models.NotificationHook
      description: The notificationHook.
    - id: context
      type: com.azure.core.util.Context
      description: Additional context that is passed through the Http pipeline during the service call.
    return:
      type: com.azure.core.http.rest.Response<com.azure.ai.metricsadvisor.models.NotificationHook>
      description: A <xref uid="com.azure.core.http.rest.Response" data-throw-if-not-resolved="false">Response</xref> containing the created <xref uid="com.azure.ai.metricsadvisor.models.NotificationHook" data-throw-if-not-resolved="false">NotificationHook</xref>.
- uid: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.createMetricAnomalyDetectionConfig(java.lang.String,com.azure.ai.metricsadvisor.models.AnomalyDetectionConfiguration)
  id: createMetricAnomalyDetectionConfig(java.lang.String,com.azure.ai.metricsadvisor.models.AnomalyDetectionConfiguration)
  artifact: com.azure:azure-ai-metricsadvisor:1.0.0-beta.2
  parent: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient
  langs:
  - java
  name: createMetricAnomalyDetectionConfig(String metricId, AnomalyDetectionConfiguration detectionConfiguration)
  nameWithType: MetricsAdvisorAdministrationClient.createMetricAnomalyDetectionConfig(String metricId, AnomalyDetectionConfiguration detectionConfiguration)
  fullName: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.createMetricAnomalyDetectionConfig(String metricId, AnomalyDetectionConfiguration detectionConfiguration)
  overload: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.createMetricAnomalyDetectionConfig*
  type: Method
  package: com.azure.ai.metricsadvisor.administration
  summary: "Create a configuration to detect anomalies in the time series of a metric.\n\n**Code sample**\n\n```java\nfinal MetricWholeSeriesDetectionCondition wholeSeriesCondition = new MetricWholeSeriesDetectionCondition()\n     .setCrossConditionOperator(DetectionConditionsOperator.OR)\n     .setSmartDetectionCondition(new SmartDetectionCondition()\n         .setSensitivity(50)\n         .setAnomalyDetectorDirection(AnomalyDetectorDirection.BOTH)\n         .setSuppressCondition(new SuppressCondition().setMinNumber(50).setMinRatio(50)))\n     .setHardThresholdCondition(new HardThresholdCondition()\n         .setLowerBound(0.0)\n         .setUpperBound(100.0)\n         .setAnomalyDetectorDirection(AnomalyDetectorDirection.BOTH)\n         .setSuppressCondition(new SuppressCondition().setMinNumber(5).setMinRatio(5)))\n     .setChangeThresholdCondition(new ChangeThresholdCondition()\n         .setChangePercentage(50)\n         .setShiftPoint(30)\n         .setWithinRange(true)\n         .setAnomalyDetectorDirection(AnomalyDetectorDirection.BOTH)\n         .setSuppressCondition(new SuppressCondition().setMinNumber(2).setMinRatio(2)));\n \n final String detectionConfigName = \"my_detection_config\";\n final String detectionConfigDescription = \"anomaly detection config for metric\";\n final AnomalyDetectionConfiguration detectionConfig\n     = new AnomalyDetectionConfiguration(detectionConfigName)\n     .setDescription(detectionConfigDescription)\n     .setWholeSeriesDetectionCondition(wholeSeriesCondition);\n \n final String metricId = \"0b836da8-10e6-46cd-8f4f-28262e113a62\";\n AnomalyDetectionConfiguration createdDetectionConfig = metricsAdvisorAdminClient\n     .createMetricAnomalyDetectionConfig(metricId, detectionConfig);\n System.out.printf(\"Detection config Id: %s%n\", createdDetectionConfig.getId());\n System.out.printf(\"Name: %s%n\", createdDetectionConfig.getName());\n System.out.printf(\"Description: %s%n\", createdDetectionConfig.getDescription());\n System.out.printf(\"MetricId: %s%n\", createdDetectionConfig.getMetricId());\n```"
  syntax:
    content: public AnomalyDetectionConfiguration createMetricAnomalyDetectionConfig(String metricId, AnomalyDetectionConfiguration detectionConfiguration)
    parameters:
    - id: metricId
      type: java.lang.String
      description: The metric id to associate the configuration with.
    - id: detectionConfiguration
      type: com.azure.ai.metricsadvisor.models.AnomalyDetectionConfiguration
      description: The anomaly detection configuration.
    return:
      type: com.azure.ai.metricsadvisor.models.AnomalyDetectionConfiguration
      description: The created <xref uid="com.azure.ai.metricsadvisor.models.AnomalyDetectionConfiguration" data-throw-if-not-resolved="false">AnomalyDetectionConfiguration</xref>.
- uid: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.createMetricAnomalyDetectionConfigWithResponse(java.lang.String,com.azure.ai.metricsadvisor.models.AnomalyDetectionConfiguration,com.azure.core.util.Context)
  id: createMetricAnomalyDetectionConfigWithResponse(java.lang.String,com.azure.ai.metricsadvisor.models.AnomalyDetectionConfiguration,com.azure.core.util.Context)
  artifact: com.azure:azure-ai-metricsadvisor:1.0.0-beta.2
  parent: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient
  langs:
  - java
  name: createMetricAnomalyDetectionConfigWithResponse(String metricId, AnomalyDetectionConfiguration detectionConfiguration, Context context)
  nameWithType: MetricsAdvisorAdministrationClient.createMetricAnomalyDetectionConfigWithResponse(String metricId, AnomalyDetectionConfiguration detectionConfiguration, Context context)
  fullName: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.createMetricAnomalyDetectionConfigWithResponse(String metricId, AnomalyDetectionConfiguration detectionConfiguration, Context context)
  overload: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.createMetricAnomalyDetectionConfigWithResponse*
  type: Method
  package: com.azure.ai.metricsadvisor.administration
  summary: "Create a configuration to detect anomalies in the time series of a metric.\n\n**Code sample**\n\n```java\nfinal MetricWholeSeriesDetectionCondition wholeSeriesCondition = new MetricWholeSeriesDetectionCondition()\n     .setCrossConditionOperator(DetectionConditionsOperator.OR)\n     .setSmartDetectionCondition(new SmartDetectionCondition()\n         .setSensitivity(50)\n         .setAnomalyDetectorDirection(AnomalyDetectorDirection.BOTH)\n         .setSuppressCondition(new SuppressCondition().setMinNumber(50).setMinRatio(50)))\n     .setHardThresholdCondition(new HardThresholdCondition()\n         .setLowerBound(0.0)\n         .setUpperBound(100.0)\n         .setAnomalyDetectorDirection(AnomalyDetectorDirection.BOTH)\n         .setSuppressCondition(new SuppressCondition().setMinNumber(5).setMinRatio(5)))\n     .setChangeThresholdCondition(new ChangeThresholdCondition()\n         .setChangePercentage(50)\n         .setShiftPoint(30)\n         .setWithinRange(true)\n         .setAnomalyDetectorDirection(AnomalyDetectorDirection.BOTH)\n         .setSuppressCondition(new SuppressCondition().setMinNumber(2).setMinRatio(2)));\n \n final String detectionConfigName = \"my_detection_config\";\n final String detectionConfigDescription = \"anomaly detection config for metric\";\n final AnomalyDetectionConfiguration detectionConfig\n     = new AnomalyDetectionConfiguration(detectionConfigName)\n     .setDescription(detectionConfigDescription)\n     .setWholeSeriesDetectionCondition(wholeSeriesCondition);\n \n final String metricId = \"0b836da8-10e6-46cd-8f4f-28262e113a62\";\n Response<AnomalyDetectionConfiguration> response = metricsAdvisorAdminClient\n     .createMetricAnomalyDetectionConfigWithResponse(metricId, detectionConfig, Context.NONE);\n System.out.printf(\"Response statusCode: %d%n\", response.getStatusCode());\n AnomalyDetectionConfiguration createdDetectionConfig = response.getValue();\n System.out.printf(\"Detection config Id: %s%n\", createdDetectionConfig.getId());\n System.out.printf(\"Name: %s%n\", createdDetectionConfig.getName());\n System.out.printf(\"Description: %s%n\", createdDetectionConfig.getDescription());\n System.out.printf(\"MetricId: %s%n\", createdDetectionConfig.getMetricId());\n```"
  syntax:
    content: public Response<AnomalyDetectionConfiguration> createMetricAnomalyDetectionConfigWithResponse(String metricId, AnomalyDetectionConfiguration detectionConfiguration, Context context)
    parameters:
    - id: metricId
      type: java.lang.String
      description: The metric id to associate the configuration with.
    - id: detectionConfiguration
      type: com.azure.ai.metricsadvisor.models.AnomalyDetectionConfiguration
      description: The anomaly detection configuration.
    - id: context
      type: com.azure.core.util.Context
      description: Additional context that is passed through the Http pipeline during the service call.
    return:
      type: com.azure.core.http.rest.Response<com.azure.ai.metricsadvisor.models.AnomalyDetectionConfiguration>
      description: A <xref uid="com.azure.core.http.rest.Response" data-throw-if-not-resolved="false">Response</xref> containing the created <xref uid="com.azure.ai.metricsadvisor.models.AnomalyDetectionConfiguration" data-throw-if-not-resolved="false">AnomalyDetectionConfiguration</xref>.
- uid: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.deleteAnomalyAlertConfig(java.lang.String)
  id: deleteAnomalyAlertConfig(java.lang.String)
  artifact: com.azure:azure-ai-metricsadvisor:1.0.0-beta.2
  parent: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient
  langs:
  - java
  name: deleteAnomalyAlertConfig(String alertConfigurationId)
  nameWithType: MetricsAdvisorAdministrationClient.deleteAnomalyAlertConfig(String alertConfigurationId)
  fullName: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.deleteAnomalyAlertConfig(String alertConfigurationId)
  overload: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.deleteAnomalyAlertConfig*
  type: Method
  package: com.azure.ai.metricsadvisor.administration
  summary: >-
    Deletes the anomaly alert configuration identified by `alertConfigurationId`.


    **Code sample**


    ```java

    String alertConfigId = "1p0f8er30-6e6e-4391-b78f-bpfdfee1e6f5";
     metricsAdvisorAdminClient.deleteAnomalyAlertConfig(alertConfigId);
    ```
  syntax:
    content: public void deleteAnomalyAlertConfig(String alertConfigurationId)
    parameters:
    - id: alertConfigurationId
      type: java.lang.String
      description: The anomaly alert configuration id.
- uid: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.deleteAnomalyAlertConfigWithResponse(java.lang.String,com.azure.core.util.Context)
  id: deleteAnomalyAlertConfigWithResponse(java.lang.String,com.azure.core.util.Context)
  artifact: com.azure:azure-ai-metricsadvisor:1.0.0-beta.2
  parent: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient
  langs:
  - java
  name: deleteAnomalyAlertConfigWithResponse(String alertConfigurationId, Context context)
  nameWithType: MetricsAdvisorAdministrationClient.deleteAnomalyAlertConfigWithResponse(String alertConfigurationId, Context context)
  fullName: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.deleteAnomalyAlertConfigWithResponse(String alertConfigurationId, Context context)
  overload: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.deleteAnomalyAlertConfigWithResponse*
  type: Method
  package: com.azure.ai.metricsadvisor.administration
  summary: "Deletes the anomaly alert configuration identified by `alertConfigurationId`.\n\n**Code sample**\n\n```java\nString alertConfigId = \"1p0f8er30-6e6e-4391-b78f-bpfdfee1e6f5\";\n final Response<Void> response =\n     metricsAdvisorAdminClient.deleteAnomalyAlertConfigWithResponse(alertConfigId, Context.NONE);\n \n System.out.printf(\"DataPoint Anomaly alert config delete operation status : %s%n\", response.getStatusCode());\n```"
  syntax:
    content: public Response<Void> deleteAnomalyAlertConfigWithResponse(String alertConfigurationId, Context context)
    parameters:
    - id: alertConfigurationId
      type: java.lang.String
      description: The anomaly alert configuration id.
    - id: context
      type: com.azure.core.util.Context
      description: Additional context that is passed through the Http pipeline during the service call.
    return:
      type: com.azure.core.http.rest.Response<java.lang.Void>
      description: A response containing status code and headers returned after the operation.
- uid: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.deleteDataFeed(java.lang.String)
  id: deleteDataFeed(java.lang.String)
  artifact: com.azure:azure-ai-metricsadvisor:1.0.0-beta.2
  parent: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient
  langs:
  - java
  name: deleteDataFeed(String dataFeedId)
  nameWithType: MetricsAdvisorAdministrationClient.deleteDataFeed(String dataFeedId)
  fullName: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.deleteDataFeed(String dataFeedId)
  overload: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.deleteDataFeed*
  type: Method
  package: com.azure.ai.metricsadvisor.administration
  summary: >-
    Delete a data feed.


    **Code sample**


    ```java

    final String dataFeedId = "r47053f1-9080-09lo-bacf-8dccf2e86f";
     metricsAdvisorAdminClient.deleteDataFeed(dataFeedId);
    ```
  syntax:
    content: public void deleteDataFeed(String dataFeedId)
    parameters:
    - id: dataFeedId
      type: java.lang.String
      description: The data feed unique id.
- uid: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.deleteDataFeedWithResponse(java.lang.String,com.azure.core.util.Context)
  id: deleteDataFeedWithResponse(java.lang.String,com.azure.core.util.Context)
  artifact: com.azure:azure-ai-metricsadvisor:1.0.0-beta.2
  parent: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient
  langs:
  - java
  name: deleteDataFeedWithResponse(String dataFeedId, Context context)
  nameWithType: MetricsAdvisorAdministrationClient.deleteDataFeedWithResponse(String dataFeedId, Context context)
  fullName: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.deleteDataFeedWithResponse(String dataFeedId, Context context)
  overload: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.deleteDataFeedWithResponse*
  type: Method
  package: com.azure.ai.metricsadvisor.administration
  summary: >-
    Delete a data feed with REST response.


    **Code sample**


    ```java

    final String dataFeedId = "r47053f1-9080-09lo-bacf-8dccf2e86f";
     final Response<Void> response = metricsAdvisorAdminClient
         .deleteDataFeedWithResponse(dataFeedId, Context.NONE);
     System.out.printf("Data feed delete operation status : %s%n", response.getStatusCode());
    ```
  syntax:
    content: public Response<Void> deleteDataFeedWithResponse(String dataFeedId, Context context)
    parameters:
    - id: dataFeedId
      type: java.lang.String
      description: The data feed unique id.
    - id: context
      type: com.azure.core.util.Context
      description: Additional context that is passed through the HTTP pipeline during the service call.
    return:
      type: com.azure.core.http.rest.Response<java.lang.Void>
      description: a REST Response.
- uid: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.deleteHook(java.lang.String)
  id: deleteHook(java.lang.String)
  artifact: com.azure:azure-ai-metricsadvisor:1.0.0-beta.2
  parent: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient
  langs:
  - java
  name: deleteHook(String hookId)
  nameWithType: MetricsAdvisorAdministrationClient.deleteHook(String hookId)
  fullName: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.deleteHook(String hookId)
  overload: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.deleteHook*
  type: Method
  package: com.azure.ai.metricsadvisor.administration
  summary: >-
    Delete a hook.


    **Code sample**


    ```java

    final String emailHookId = "f00853f1-6627-447f-bacf-8dccf2e86fed";
     metricsAdvisorAdminClient.deleteHook(emailHookId);
    ```
  syntax:
    content: public void deleteHook(String hookId)
    parameters:
    - id: hookId
      type: java.lang.String
      description: The hook unique id.
- uid: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.deleteHookWithResponse(java.lang.String,com.azure.core.util.Context)
  id: deleteHookWithResponse(java.lang.String,com.azure.core.util.Context)
  artifact: com.azure:azure-ai-metricsadvisor:1.0.0-beta.2
  parent: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient
  langs:
  - java
  name: deleteHookWithResponse(String hookId, Context context)
  nameWithType: MetricsAdvisorAdministrationClient.deleteHookWithResponse(String hookId, Context context)
  fullName: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.deleteHookWithResponse(String hookId, Context context)
  overload: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.deleteHookWithResponse*
  type: Method
  package: com.azure.ai.metricsadvisor.administration
  summary: >-
    Delete a hook.


    **Code sample**


    ```java

    final String emailHookId = "f00853f1-6627-447f-bacf-8dccf2e86fed";
     Response<Void> response
         = metricsAdvisorAdminClient.deleteHookWithResponse(emailHookId, Context.NONE);
     System.out.printf("Response status code: %d%n", response.getStatusCode());
    ```
  syntax:
    content: public Response<Void> deleteHookWithResponse(String hookId, Context context)
    parameters:
    - id: hookId
      type: java.lang.String
      description: The hook unique id.
    - id: context
      type: com.azure.core.util.Context
      description: Additional context that is passed through the Http pipeline during the service call.
    return:
      type: com.azure.core.http.rest.Response<java.lang.Void>
      description: A <xref uid="com.azure.core.http.rest.Response" data-throw-if-not-resolved="false">Response</xref>.
- uid: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.deleteMetricAnomalyDetectionConfig(java.lang.String)
  id: deleteMetricAnomalyDetectionConfig(java.lang.String)
  artifact: com.azure:azure-ai-metricsadvisor:1.0.0-beta.2
  parent: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient
  langs:
  - java
  name: deleteMetricAnomalyDetectionConfig(String detectionConfigurationId)
  nameWithType: MetricsAdvisorAdministrationClient.deleteMetricAnomalyDetectionConfig(String detectionConfigurationId)
  fullName: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.deleteMetricAnomalyDetectionConfig(String detectionConfigurationId)
  overload: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.deleteMetricAnomalyDetectionConfig*
  type: Method
  package: com.azure.ai.metricsadvisor.administration
  summary: >-
    Delete a metric anomaly detection configuration.


    **Code sample**


    ```java

    final String detectionConfigId = "7b8069a1-1564-46da-9f50-b5d0dd9129ab";
     metricsAdvisorAdminClient
         .deleteMetricAnomalyDetectionConfig(detectionConfigId);
    ```
  syntax:
    content: public void deleteMetricAnomalyDetectionConfig(String detectionConfigurationId)
    parameters:
    - id: detectionConfigurationId
      type: java.lang.String
      description: The metric anomaly detection configuration unique id.
- uid: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.deleteMetricAnomalyDetectionConfigWithResponse(java.lang.String,com.azure.core.util.Context)
  id: deleteMetricAnomalyDetectionConfigWithResponse(java.lang.String,com.azure.core.util.Context)
  artifact: com.azure:azure-ai-metricsadvisor:1.0.0-beta.2
  parent: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient
  langs:
  - java
  name: deleteMetricAnomalyDetectionConfigWithResponse(String detectionConfigurationId, Context context)
  nameWithType: MetricsAdvisorAdministrationClient.deleteMetricAnomalyDetectionConfigWithResponse(String detectionConfigurationId, Context context)
  fullName: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.deleteMetricAnomalyDetectionConfigWithResponse(String detectionConfigurationId, Context context)
  overload: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.deleteMetricAnomalyDetectionConfigWithResponse*
  type: Method
  package: com.azure.ai.metricsadvisor.administration
  summary: >-
    Delete a metric anomaly detection configuration.


    **Code sample**


    ```java

    final String detectionConfigId = "7b8069a1-1564-46da-9f50-b5d0dd9129ab";
     Response<Void> response = metricsAdvisorAdminClient
         .deleteMetricAnomalyDetectionConfigWithResponse(detectionConfigId, Context.NONE);
     System.out.printf("Response Status Code: %s%n", response.getStatusCode());
    ```
  syntax:
    content: public Response<Void> deleteMetricAnomalyDetectionConfigWithResponse(String detectionConfigurationId, Context context)
    parameters:
    - id: detectionConfigurationId
      type: java.lang.String
      description: The metric anomaly detection configuration unique id.
    - id: context
      type: com.azure.core.util.Context
      description: Additional context that is passed through the Http pipeline during the service call.
    return:
      type: com.azure.core.http.rest.Response<java.lang.Void>
      description: A <xref uid="com.azure.core.http.rest.Response" data-throw-if-not-resolved="false">Response</xref> of containing result of delete operation.
- uid: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.getAnomalyAlertConfig(java.lang.String)
  id: getAnomalyAlertConfig(java.lang.String)
  artifact: com.azure:azure-ai-metricsadvisor:1.0.0-beta.2
  parent: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient
  langs:
  - java
  name: getAnomalyAlertConfig(String alertConfigurationId)
  nameWithType: MetricsAdvisorAdministrationClient.getAnomalyAlertConfig(String alertConfigurationId)
  fullName: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.getAnomalyAlertConfig(String alertConfigurationId)
  overload: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.getAnomalyAlertConfig*
  type: Method
  package: com.azure.ai.metricsadvisor.administration
  summary: "Get the anomaly alert configuration identified by `alertConfigurationId`.\n\n**Code sample**\n\n```java\nString alertConfigId = \"1p0f8er30-6e6e-4391-b78f-bpfdfee1e6f5\";\n \n AnomalyAlertConfiguration anomalyAlertConfiguration\n     = metricsAdvisorAdminClient.getAnomalyAlertConfig(alertConfigId);\n System.out.printf(\"DataPoint Anomaly alert configuration Id: %s%n\",\n     anomalyAlertConfiguration.getId());\n System.out.printf(\"DataPoint Anomaly alert configuration description: %s%n\",\n     anomalyAlertConfiguration.getDescription());\n System.out.printf(\"DataPoint Anomaly alert configuration hook ids: %s%n\",\n     anomalyAlertConfiguration.getIdOfHooksToAlert());\n System.out.printf(\"DataPoint Anomaly alert configuration cross metrics operator: %s%n\",\n     anomalyAlertConfiguration.getCrossMetricsOperator().toString());\n```"
  syntax:
    content: public AnomalyAlertConfiguration getAnomalyAlertConfig(String alertConfigurationId)
    parameters:
    - id: alertConfigurationId
      type: java.lang.String
      description: The anomaly alert configuration id.
    return:
      type: com.azure.ai.metricsadvisor.models.AnomalyAlertConfiguration
      description: The <xref uid="com.azure.ai.metricsadvisor.models.AnomalyAlertConfiguration" data-throw-if-not-resolved="false">AnomalyAlertConfiguration</xref> identified by the given id.
- uid: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.getAnomalyAlertConfigWithResponse(java.lang.String,com.azure.core.util.Context)
  id: getAnomalyAlertConfigWithResponse(java.lang.String,com.azure.core.util.Context)
  artifact: com.azure:azure-ai-metricsadvisor:1.0.0-beta.2
  parent: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient
  langs:
  - java
  name: getAnomalyAlertConfigWithResponse(String alertConfigurationId, Context context)
  nameWithType: MetricsAdvisorAdministrationClient.getAnomalyAlertConfigWithResponse(String alertConfigurationId, Context context)
  fullName: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.getAnomalyAlertConfigWithResponse(String alertConfigurationId, Context context)
  overload: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.getAnomalyAlertConfigWithResponse*
  type: Method
  package: com.azure.ai.metricsadvisor.administration
  summary: "Get the anomaly alert configuration identified by `alertConfigurationId`.\n\n**Code sample**\n\n```java\nString alertConfigId = \"1p0f8er30-6e6e-4391-b78f-bpfdfee1e6f5\";\n \n Response<AnomalyAlertConfiguration> alertConfigurationResponse\n     = metricsAdvisorAdminClient.getAnomalyAlertConfigWithResponse(alertConfigId, Context.NONE);\n \n System.out.printf(\"DataPoint Anomaly alert creation operation status: %s%n\",\n     alertConfigurationResponse.getStatusCode());\n final AnomalyAlertConfiguration anomalyAlertConfiguration = alertConfigurationResponse.getValue();\n System.out.printf(\"DataPoint Anomaly alert configuration Id: %s%n\", anomalyAlertConfiguration.getId());\n System.out.printf(\"DataPoint Anomaly alert configuration description: %s%n\",\n     anomalyAlertConfiguration.getDescription());\n System.out.printf(\"DataPoint Anomaly alert configuration hook ids: %s%n\",\n     anomalyAlertConfiguration.getIdOfHooksToAlert());\n System.out.printf(\"DataPoint Anomaly alert configuration cross metrics operator: %s%n\",\n     anomalyAlertConfiguration.getCrossMetricsOperator().toString());\n```"
  syntax:
    content: public Response<AnomalyAlertConfiguration> getAnomalyAlertConfigWithResponse(String alertConfigurationId, Context context)
    parameters:
    - id: alertConfigurationId
      type: java.lang.String
      description: The anomaly alert configuration id.
    - id: context
      type: com.azure.core.util.Context
      description: Additional context that is passed through the Http pipeline during the service call.
    return:
      type: com.azure.core.http.rest.Response<com.azure.ai.metricsadvisor.models.AnomalyAlertConfiguration>
      description: A <xref uid="com.azure.core.http.rest.Response" data-throw-if-not-resolved="false">response</xref> containing the <xref uid="com.azure.ai.metricsadvisor.models.AnomalyAlertConfiguration" data-throw-if-not-resolved="false">AnomalyAlertConfiguration</xref> identified by the given id.
- uid: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.getDataFeed(java.lang.String)
  id: getDataFeed(java.lang.String)
  artifact: com.azure:azure-ai-metricsadvisor:1.0.0-beta.2
  parent: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient
  langs:
  - java
  name: getDataFeed(String dataFeedId)
  nameWithType: MetricsAdvisorAdministrationClient.getDataFeed(String dataFeedId)
  fullName: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.getDataFeed(String dataFeedId)
  overload: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.getDataFeed*
  type: Method
  package: com.azure.ai.metricsadvisor.administration
  summary: >-
    Get a data feed by its id.


    **Code sample**


    ```java

    final String dataFeedId = "r47053f1-9080-09lo-bacf-8dccf2e86f";
     DataFeed dataFeed = metricsAdvisorAdminClient.getDataFeed(dataFeedId);
     System.out.printf("Data feed Id: %s%n", dataFeed.getId());
     System.out.printf("Data feed description: %s%n", dataFeed.getOptions().getDescription());
     System.out.printf("Data feed source type: %s%n", dataFeed.getSourceType());
     System.out.printf("Data feed creator: %s%n", dataFeed.getCreator());
    ```
  syntax:
    content: public DataFeed getDataFeed(String dataFeedId)
    parameters:
    - id: dataFeedId
      type: java.lang.String
      description: The data feed unique id.
    return:
      type: com.azure.ai.metricsadvisor.models.DataFeed
      description: The data feed for the provided id.
- uid: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.getDataFeedIngestionProgress(java.lang.String)
  id: getDataFeedIngestionProgress(java.lang.String)
  artifact: com.azure:azure-ai-metricsadvisor:1.0.0-beta.2
  parent: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient
  langs:
  - java
  name: getDataFeedIngestionProgress(String dataFeedId)
  nameWithType: MetricsAdvisorAdministrationClient.getDataFeedIngestionProgress(String dataFeedId)
  fullName: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.getDataFeedIngestionProgress(String dataFeedId)
  overload: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.getDataFeedIngestionProgress*
  type: Method
  package: com.azure.ai.metricsadvisor.administration
  summary: >-
    Retrieve the ingestion progress of a data feed.


    **Code sample**


    ```java

    final String dataFeedId = "4957a2f7-a0f4-4fc0-b8d7-d866c1df0f4c";
     DataFeedIngestionProgress ingestionProgress
         = metricsAdvisorAdminClient.getDataFeedIngestionProgress(dataFeedId);
     System.out.printf("Latest active timestamp: %s%n", ingestionProgress.getLatestActiveTimestamp());
     System.out.printf("Latest successful timestamp: %s%n", ingestionProgress.getLatestSuccessTimestamp());
    ```
  syntax:
    content: public DataFeedIngestionProgress getDataFeedIngestionProgress(String dataFeedId)
    parameters:
    - id: dataFeedId
      type: java.lang.String
      description: The data feed id.
    return:
      type: com.azure.ai.metricsadvisor.models.DataFeedIngestionProgress
      description: The <xref uid="com.azure.ai.metricsadvisor.models.DataFeedIngestionProgress" data-throw-if-not-resolved="false">DataFeedIngestionProgress</xref> of the data feed.
- uid: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.getDataFeedIngestionProgressWithResponse(java.lang.String,com.azure.core.util.Context)
  id: getDataFeedIngestionProgressWithResponse(java.lang.String,com.azure.core.util.Context)
  artifact: com.azure:azure-ai-metricsadvisor:1.0.0-beta.2
  parent: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient
  langs:
  - java
  name: getDataFeedIngestionProgressWithResponse(String dataFeedId, Context context)
  nameWithType: MetricsAdvisorAdministrationClient.getDataFeedIngestionProgressWithResponse(String dataFeedId, Context context)
  fullName: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.getDataFeedIngestionProgressWithResponse(String dataFeedId, Context context)
  overload: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.getDataFeedIngestionProgressWithResponse*
  type: Method
  package: com.azure.ai.metricsadvisor.administration
  summary: >-
    Retrieve the ingestion progress of a data feed.


    **Code sample**


    ```java

    final String dataFeedId = "4957a2f7-a0f4-4fc0-b8d7-d866c1df0f4c";
     Response<DataFeedIngestionProgress> response
         = metricsAdvisorAdminClient.getDataFeedIngestionProgressWithResponse(dataFeedId, Context.NONE);
     System.out.printf("Response statusCode: %d%n", response.getStatusCode());
     DataFeedIngestionProgress ingestionProgress = response.getValue();
     System.out.printf("Latest active timestamp: %s%n", ingestionProgress.getLatestActiveTimestamp());
     System.out.printf("Latest successful timestamp: %s%n", ingestionProgress.getLatestSuccessTimestamp());
    ```
  syntax:
    content: public Response<DataFeedIngestionProgress> getDataFeedIngestionProgressWithResponse(String dataFeedId, Context context)
    parameters:
    - id: dataFeedId
      type: java.lang.String
      description: The data feed id.
    - id: context
      type: com.azure.core.util.Context
      description: Additional context that is passed through the Http pipeline during the service call.
    return:
      type: com.azure.core.http.rest.Response<com.azure.ai.metricsadvisor.models.DataFeedIngestionProgress>
      description: A <xref uid="com.azure.core.http.rest.Response" data-throw-if-not-resolved="false">Response</xref> containing <xref uid="com.azure.ai.metricsadvisor.models.DataFeedIngestionProgress" data-throw-if-not-resolved="false">DataFeedIngestionProgress</xref> of the data feed.
- uid: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.getDataFeedWithResponse(java.lang.String,com.azure.core.util.Context)
  id: getDataFeedWithResponse(java.lang.String,com.azure.core.util.Context)
  artifact: com.azure:azure-ai-metricsadvisor:1.0.0-beta.2
  parent: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient
  langs:
  - java
  name: getDataFeedWithResponse(String dataFeedId, Context context)
  nameWithType: MetricsAdvisorAdministrationClient.getDataFeedWithResponse(String dataFeedId, Context context)
  fullName: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.getDataFeedWithResponse(String dataFeedId, Context context)
  overload: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.getDataFeedWithResponse*
  type: Method
  package: com.azure.ai.metricsadvisor.administration
  summary: "Get a data feed by its id with REST response.\n\n**Code sample**\n\n```java\nfinal String dataFeedId = \"r47053f1-9080-09lo-bacf-8dccf2e86f\";\n final Response<DataFeed> dataFeedResponse =\n     metricsAdvisorAdminClient.getDataFeedWithResponse(dataFeedId, Context.NONE);\n \n System.out.printf(\"Data feed get operation status: %s%n\", dataFeedResponse.getStatusCode());\n DataFeed dataFeed = dataFeedResponse.getValue();\n System.out.printf(\"Data feed Id: %s%n\", dataFeed.getId());\n System.out.printf(\"Data feed description: %s%n\", dataFeed.getOptions().getDescription());\n System.out.printf(\"Data feed source type: %s%n\", dataFeed.getSourceType());\n System.out.printf(\"Data feed creator: %s%n\", dataFeed.getCreator());\n```"
  syntax:
    content: public Response<DataFeed> getDataFeedWithResponse(String dataFeedId, Context context)
    parameters:
    - id: dataFeedId
      type: java.lang.String
      description: The data feed unique id.
    - id: context
      type: com.azure.core.util.Context
      description: Additional context that is passed through the HTTP pipeline during the service call.
    return:
      type: com.azure.core.http.rest.Response<com.azure.ai.metricsadvisor.models.DataFeed>
      description: The data feed for the provided id.
- uid: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.getHook(java.lang.String)
  id: getHook(java.lang.String)
  artifact: com.azure:azure-ai-metricsadvisor:1.0.0-beta.2
  parent: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient
  langs:
  - java
  name: getHook(String hookId)
  nameWithType: MetricsAdvisorAdministrationClient.getHook(String hookId)
  fullName: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.getHook(String hookId)
  overload: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.getHook*
  type: Method
  package: com.azure.ai.metricsadvisor.administration
  summary: >-
    Get a hook by its id.


    **Code sample**


    ```java

    final String hookId = "f00853f1-6627-447f-bacf-8dccf2e86fed";
     NotificationHook notificationHook = metricsAdvisorAdminClient.getHook(hookId);
     if (notificationHook instanceof EmailNotificationHook) {
         EmailNotificationHook emailHook = (EmailNotificationHook) notificationHook;
         System.out.printf("NotificationHook Id: %s%n", emailHook.getId());
         System.out.printf("NotificationHook Name: %s%n", emailHook.getName());
         System.out.printf("NotificationHook Description: %s%n", emailHook.getDescription());
         System.out.printf("NotificationHook External Link: %s%n", emailHook.getExternalLink());
         System.out.printf("NotificationHook Emails: %s%n", String.join(",", emailHook.getEmailsToAlert()));
     } else if (notificationHook instanceof WebNotificationHook) {
         WebNotificationHook webHook = (WebNotificationHook) notificationHook;
         System.out.printf("NotificationHook Id: %s%n", webHook.getId());
         System.out.printf("NotificationHook Name: %s%n", webHook.getName());
         System.out.printf("NotificationHook Description: %s%n", webHook.getDescription());
         System.out.printf("NotificationHook External Link: %s%n", webHook.getExternalLink());
         System.out.printf("NotificationHook Endpoint: %s%n", webHook.getEndpoint());
         System.out.printf("NotificationHook Headers: %s%n", webHook.getHttpHeaders());
     }
    ```
  syntax:
    content: public NotificationHook getHook(String hookId)
    parameters:
    - id: hookId
      type: java.lang.String
      description: The hook unique id.
    return:
      type: com.azure.ai.metricsadvisor.models.NotificationHook
      description: The <xref uid="com.azure.ai.metricsadvisor.models.NotificationHook" data-throw-if-not-resolved="false">NotificationHook</xref> for the provided id.
- uid: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.getHookWithResponse(java.lang.String,com.azure.core.util.Context)
  id: getHookWithResponse(java.lang.String,com.azure.core.util.Context)
  artifact: com.azure:azure-ai-metricsadvisor:1.0.0-beta.2
  parent: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient
  langs:
  - java
  name: getHookWithResponse(String hookId, Context context)
  nameWithType: MetricsAdvisorAdministrationClient.getHookWithResponse(String hookId, Context context)
  fullName: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.getHookWithResponse(String hookId, Context context)
  overload: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.getHookWithResponse*
  type: Method
  package: com.azure.ai.metricsadvisor.administration
  summary: >-
    Get a hook by its id.


    **Code sample**


    ```java

    final String hookId = "f00853f1-6627-447f-bacf-8dccf2e86fed";
     Response<NotificationHook> response = metricsAdvisorAdminClient.getHookWithResponse(hookId, Context.NONE);
     System.out.printf("Response statusCode: %d%n", response.getStatusCode());
     NotificationHook notificationHook = response.getValue();
     if (notificationHook instanceof EmailNotificationHook) {
         EmailNotificationHook emailHook = (EmailNotificationHook) notificationHook;
         System.out.printf("NotificationHook Id: %s%n", emailHook.getId());
         System.out.printf("NotificationHook Name: %s%n", emailHook.getName());
         System.out.printf("NotificationHook Description: %s%n", emailHook.getDescription());
         System.out.printf("NotificationHook External Link: %s%n", emailHook.getExternalLink());
         System.out.printf("NotificationHook Emails: %s%n", String.join(",", emailHook.getEmailsToAlert()));
     } else if (notificationHook instanceof WebNotificationHook) {
         WebNotificationHook webHook = (WebNotificationHook) notificationHook;
         System.out.printf("NotificationHook Id: %s%n", webHook.getId());
         System.out.printf("NotificationHook Name: %s%n", webHook.getName());
         System.out.printf("NotificationHook Description: %s%n", webHook.getDescription());
         System.out.printf("NotificationHook External Link: %s%n", webHook.getExternalLink());
         System.out.printf("NotificationHook Endpoint: %s%n", webHook.getEndpoint());
         System.out.printf("NotificationHook Headers: %s%n", webHook.getHttpHeaders());
     }
    ```
  syntax:
    content: public Response<NotificationHook> getHookWithResponse(String hookId, Context context)
    parameters:
    - id: hookId
      type: java.lang.String
      description: The hook unique id.
    - id: context
      type: com.azure.core.util.Context
      description: Additional context that is passed through the Http pipeline during the service call.
    return:
      type: com.azure.core.http.rest.Response<com.azure.ai.metricsadvisor.models.NotificationHook>
      description: A <xref uid="com.azure.core.http.rest.Response" data-throw-if-not-resolved="false">Response</xref> containing the <xref uid="com.azure.ai.metricsadvisor.models.NotificationHook" data-throw-if-not-resolved="false">NotificationHook</xref> for the provided id.
- uid: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.getMetricAnomalyDetectionConfig(java.lang.String)
  id: getMetricAnomalyDetectionConfig(java.lang.String)
  artifact: com.azure:azure-ai-metricsadvisor:1.0.0-beta.2
  parent: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient
  langs:
  - java
  name: getMetricAnomalyDetectionConfig(String detectionConfigurationId)
  nameWithType: MetricsAdvisorAdministrationClient.getMetricAnomalyDetectionConfig(String detectionConfigurationId)
  fullName: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.getMetricAnomalyDetectionConfig(String detectionConfigurationId)
  overload: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.getMetricAnomalyDetectionConfig*
  type: Method
  package: com.azure.ai.metricsadvisor.administration
  summary: "Get the anomaly detection configuration by its id.\n\n**Code sample**\n\n```java\nfinal String detectionConfigId = \"7b8069a1-1564-46da-9f50-b5d0dd9129ab\";\n AnomalyDetectionConfiguration detectionConfig = metricsAdvisorAdminClient\n     .getMetricAnomalyDetectionConfig(detectionConfigId);\n System.out.printf(\"Detection config Id: %s%n\", detectionConfig.getId());\n System.out.printf(\"Name: %s%n\", detectionConfig.getName());\n System.out.printf(\"Description: %s%n\", detectionConfig.getDescription());\n System.out.printf(\"MetricId: %s%n\", detectionConfig.getMetricId());\n \n System.out.printf(\"Detection conditions specified for configuration...%n\");\n \n System.out.printf(\"Whole Series Detection Conditions:%n\");\n MetricWholeSeriesDetectionCondition wholeSeriesDetectionCondition\n     = detectionConfig.getWholeSeriesDetectionCondition();\n \n System.out.printf(\"- Use %s operator for multiple detection conditions:%n\",\n     wholeSeriesDetectionCondition.getCrossConditionsOperator());\n \n System.out.printf(\"- Smart Detection Condition:%n\");\n System.out.printf(\" - Sensitivity: %s%n\",\n     wholeSeriesDetectionCondition.getSmartDetectionCondition()\n         .getSensitivity());\n System.out.printf(\" - Detection direction: %s%n\",\n     wholeSeriesDetectionCondition.getSmartDetectionCondition()\n         .getAnomalyDetectorDirection());\n System.out.printf(\" - Suppress conditions: minimum number: %s; minimum ratio: %s%n\",\n     wholeSeriesDetectionCondition.getSmartDetectionCondition()\n         .getSuppressCondition().getMinNumber(),\n     wholeSeriesDetectionCondition.getSmartDetectionCondition()\n         .getSuppressCondition().getMinRatio());\n \n System.out.printf(\"- Hard Threshold Condition:%n\");\n System.out.printf(\" - Lower bound: %s%n\",\n     wholeSeriesDetectionCondition.getHardThresholdCondition()\n         .getLowerBound());\n System.out.printf(\" - Upper bound: %s%n\",\n     wholeSeriesDetectionCondition.getHardThresholdCondition()\n         .getUpperBound());\n System.out.printf(\" - Suppress conditions: minimum number: %s; minimum ratio: %s%n\",\n     wholeSeriesDetectionCondition.getHardThresholdCondition()\n         .getSuppressCondition().getMinNumber(),\n     wholeSeriesDetectionCondition.getHardThresholdCondition()\n         .getSuppressCondition().getMinRatio());\n \n System.out.printf(\"- Change Threshold Condition:%n\");\n System.out.printf(\" - Change percentage: %s%n\",\n     wholeSeriesDetectionCondition.getChangeThresholdCondition()\n         .getChangePercentage());\n System.out.printf(\" - Shift point: %s%n\",\n     wholeSeriesDetectionCondition.getChangeThresholdCondition()\n         .getShiftPoint());\n System.out.printf(\" - Detect anomaly if within range: %s%n\",\n     wholeSeriesDetectionCondition.getChangeThresholdCondition()\n         .isWithinRange());\n System.out.printf(\" - Suppress conditions: minimum number: %s; minimum ratio: %s%n\",\n     wholeSeriesDetectionCondition.getChangeThresholdCondition()\n         .getSuppressCondition().getMinNumber(),\n     wholeSeriesDetectionCondition.getChangeThresholdCondition()\n         .getSuppressCondition().getMinRatio());\n \n List<MetricSingleSeriesDetectionCondition> seriesDetectionConditions\n     = detectionConfig.getSeriesDetectionConditions();\n System.out.printf(\"Series Detection Conditions:%n\");\n for (MetricSingleSeriesDetectionCondition seriesDetectionCondition : seriesDetectionConditions) {\n     DimensionKey seriesKey = seriesDetectionCondition.getSeriesKey();\n     final String seriesKeyStr\n         = Arrays.toString(seriesKey.asMap().entrySet().toArray());\n     System.out.printf(\"- Series Key:%s%n\", seriesKeyStr);\n     System.out.printf(\" - Use %s operator for multiple detection conditions:%n\",\n         seriesDetectionCondition.getCrossConditionsOperator());\n \n     System.out.printf(\" - Smart Detection Condition:%n\");\n     System.out.printf(\"  - Sensitivity: %s%n\",\n         seriesDetectionCondition.getSmartDetectionCondition()\n             .getSensitivity());\n     System.out.printf(\"  - Detection direction: %s%n\",\n         seriesDetectionCondition.getSmartDetectionCondition()\n             .getAnomalyDetectorDirection());\n     System.out.printf(\"  - Suppress conditions: minimum number: %s; minimum ratio: %s%n\",\n         seriesDetectionCondition.getSmartDetectionCondition()\n             .getSuppressCondition().getMinNumber(),\n         seriesDetectionCondition.getSmartDetectionCondition()\n             .getSuppressCondition().getMinRatio());\n \n     System.out.printf(\" - Hard Threshold Condition:%n\");\n     System.out.printf(\"  -  Lower bound: %s%n\",\n         seriesDetectionCondition.getHardThresholdCondition()\n             .getLowerBound());\n     System.out.printf(\"  -  Upper bound: %s%n\",\n         seriesDetectionCondition.getHardThresholdCondition()\n             .getUpperBound());\n     System.out.printf(\"  -  Suppress conditions: minimum number: %s; minimum ratio: %s%n\",\n         seriesDetectionCondition.getHardThresholdCondition()\n             .getSuppressCondition().getMinNumber(),\n         seriesDetectionCondition.getHardThresholdCondition()\n             .getSuppressCondition().getMinRatio());\n \n     System.out.printf(\" - Change Threshold Condition:%n\");\n     System.out.printf(\"  -  Change percentage: %s%n\",\n         seriesDetectionCondition.getChangeThresholdCondition()\n             .getChangePercentage());\n     System.out.printf(\"  -  Shift point: %s%n\",\n         seriesDetectionCondition.getChangeThresholdCondition()\n             .getShiftPoint());\n     System.out.printf(\"  -  Detect anomaly if within range: %s%n\",\n         seriesDetectionCondition.getChangeThresholdCondition()\n             .isWithinRange());\n     System.out.printf(\"  -  Suppress conditions: minimum number: %s; minimum ratio: %s%n\",\n         seriesDetectionCondition.getChangeThresholdCondition()\n             .getSuppressCondition().getMinNumber(),\n         seriesDetectionCondition.getChangeThresholdCondition()\n             .getSuppressCondition().getMinRatio());\n }\n \n List<MetricSeriesGroupDetectionCondition> seriesGroupDetectionConditions\n     = detectionConfig.getSeriesGroupDetectionConditions();\n System.out.printf(\"Series Group Detection Conditions:%n\");\n for (MetricSeriesGroupDetectionCondition seriesGroupDetectionCondition\n     : seriesGroupDetectionConditions) {\n     DimensionKey seriesGroupKey = seriesGroupDetectionCondition.getSeriesGroupKey();\n     final String seriesGroupKeyStr\n         = Arrays.toString(seriesGroupKey.asMap().entrySet().toArray());\n     System.out.printf(\"- Series Group Key:%s%n\", seriesGroupKeyStr);\n     System.out.printf(\" - Use %s operator for multiple detection conditions:%n\",\n         seriesGroupDetectionCondition.getCrossConditionsOperator());\n \n     System.out.printf(\" - Smart Detection Condition:%n\");\n     System.out.printf(\"  - Sensitivity: %s%n\",\n         seriesGroupDetectionCondition.getSmartDetectionCondition()\n             .getSensitivity());\n     System.out.printf(\"  - Detection direction: %s%n\",\n         seriesGroupDetectionCondition.getSmartDetectionCondition()\n             .getAnomalyDetectorDirection());\n     System.out.printf(\"  - Suppress conditions: minimum number: %s; minimum ratio: %s%n\",\n         seriesGroupDetectionCondition.getSmartDetectionCondition()\n             .getSuppressCondition().getMinNumber(),\n         seriesGroupDetectionCondition.getSmartDetectionCondition()\n             .getSuppressCondition().getMinRatio());\n \n     System.out.printf(\" - Hard Threshold Condition:%n\");\n     System.out.printf(\"  -  Lower bound: %s%n\",\n         seriesGroupDetectionCondition.getHardThresholdCondition()\n             .getLowerBound());\n     System.out.printf(\"  -  Upper bound: %s%n\",\n         seriesGroupDetectionCondition.getHardThresholdCondition()\n             .getUpperBound());\n     System.out.printf(\"  -  Suppress conditions: minimum number: %s; minimum ratio: %s%n\",\n         seriesGroupDetectionCondition.getHardThresholdCondition()\n             .getSuppressCondition().getMinNumber(),\n         seriesGroupDetectionCondition.getHardThresholdCondition()\n             .getSuppressCondition().getMinRatio());\n \n     System.out.printf(\" - Change Threshold Condition:%n\");\n     System.out.printf(\"  -  Change percentage: %s%n\",\n         seriesGroupDetectionCondition.getChangeThresholdCondition()\n             .getChangePercentage());\n     System.out.printf(\"  -  Shift point: %s%n\",\n         seriesGroupDetectionCondition.getChangeThresholdCondition()\n             .getShiftPoint());\n     System.out.printf(\"  -  Detect anomaly if within range: %s%n\",\n         seriesGroupDetectionCondition.getChangeThresholdCondition()\n             .isWithinRange());\n     System.out.printf(\"  -  Suppress conditions: minimum number: %s; minimum ratio: %s%n\",\n         seriesGroupDetectionCondition.getChangeThresholdCondition()\n             .getSuppressCondition().getMinNumber(),\n         seriesGroupDetectionCondition.getChangeThresholdCondition()\n             .getSuppressCondition().getMinRatio());\n }\n```"
  syntax:
    content: public AnomalyDetectionConfiguration getMetricAnomalyDetectionConfig(String detectionConfigurationId)
    parameters:
    - id: detectionConfigurationId
      type: java.lang.String
      description: The anomaly detection configuration id.
    return:
      type: com.azure.ai.metricsadvisor.models.AnomalyDetectionConfiguration
      description: The <xref uid="com.azure.ai.metricsadvisor.models.AnomalyDetectionConfiguration" data-throw-if-not-resolved="false">AnomalyDetectionConfiguration</xref> identified by the given id.
- uid: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.getMetricAnomalyDetectionConfigWithResponse(java.lang.String,com.azure.core.util.Context)
  id: getMetricAnomalyDetectionConfigWithResponse(java.lang.String,com.azure.core.util.Context)
  artifact: com.azure:azure-ai-metricsadvisor:1.0.0-beta.2
  parent: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient
  langs:
  - java
  name: getMetricAnomalyDetectionConfigWithResponse(String detectionConfigurationId, Context context)
  nameWithType: MetricsAdvisorAdministrationClient.getMetricAnomalyDetectionConfigWithResponse(String detectionConfigurationId, Context context)
  fullName: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.getMetricAnomalyDetectionConfigWithResponse(String detectionConfigurationId, Context context)
  overload: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.getMetricAnomalyDetectionConfigWithResponse*
  type: Method
  package: com.azure.ai.metricsadvisor.administration
  summary: "Get the anomaly detection configuration by its id.\n\n**Code sample**\n\n```java\nfinal String detectionConfigId = \"7b8069a1-1564-46da-9f50-b5d0dd9129ab\";\n Response<AnomalyDetectionConfiguration> response = metricsAdvisorAdminClient\n     .getMetricAnomalyDetectionConfigWithResponse(detectionConfigId, Context.NONE);\n System.out.printf(\"Response statusCode: %d%n\", response.getStatusCode());\n AnomalyDetectionConfiguration detectionConfig = response.getValue();\n System.out.printf(\"Detection config Id: %s%n\", detectionConfig.getId());\n System.out.printf(\"Name: %s%n\", detectionConfig.getName());\n System.out.printf(\"Description: %s%n\", detectionConfig.getDescription());\n System.out.printf(\"MetricId: %s%n\", detectionConfig.getMetricId());\n \n System.out.printf(\"Detection conditions specified for configuration...%n\");\n \n System.out.printf(\"Whole Series Detection Conditions:%n\");\n MetricWholeSeriesDetectionCondition wholeSeriesDetectionCondition\n     = detectionConfig.getWholeSeriesDetectionCondition();\n \n System.out.printf(\"- Use %s operator for multiple detection conditions:%n\",\n     wholeSeriesDetectionCondition.getCrossConditionsOperator());\n \n System.out.printf(\"- Smart Detection Condition:%n\");\n System.out.printf(\" - Sensitivity: %s%n\",\n     wholeSeriesDetectionCondition.getSmartDetectionCondition()\n         .getSensitivity());\n System.out.printf(\" - Detection direction: %s%n\",\n     wholeSeriesDetectionCondition.getSmartDetectionCondition()\n         .getAnomalyDetectorDirection());\n System.out.printf(\" - Suppress conditions: minimum number: %s; minimum ratio: %s%n\",\n     wholeSeriesDetectionCondition.getSmartDetectionCondition()\n         .getSuppressCondition().getMinNumber(),\n     wholeSeriesDetectionCondition.getSmartDetectionCondition()\n         .getSuppressCondition().getMinRatio());\n \n System.out.printf(\"- Hard Threshold Condition:%n\");\n System.out.printf(\" - Lower bound: %s%n\",\n     wholeSeriesDetectionCondition.getHardThresholdCondition()\n         .getLowerBound());\n System.out.printf(\" - Upper bound: %s%n\",\n     wholeSeriesDetectionCondition.getHardThresholdCondition()\n         .getUpperBound());\n System.out.printf(\" - Suppress conditions: minimum number: %s; minimum ratio: %s%n\",\n     wholeSeriesDetectionCondition.getHardThresholdCondition()\n         .getSuppressCondition().getMinNumber(),\n     wholeSeriesDetectionCondition.getHardThresholdCondition()\n         .getSuppressCondition().getMinRatio());\n \n System.out.printf(\"- Change Threshold Condition:%n\");\n System.out.printf(\" - Change percentage: %s%n\",\n     wholeSeriesDetectionCondition.getChangeThresholdCondition()\n         .getChangePercentage());\n System.out.printf(\" - Shift point: %s%n\",\n     wholeSeriesDetectionCondition.getChangeThresholdCondition()\n         .getShiftPoint());\n System.out.printf(\" - Detect anomaly if within range: %s%n\",\n     wholeSeriesDetectionCondition.getChangeThresholdCondition()\n         .isWithinRange());\n System.out.printf(\" - Suppress conditions: minimum number: %s; minimum ratio: %s%n\",\n     wholeSeriesDetectionCondition.getChangeThresholdCondition()\n         .getSuppressCondition().getMinNumber(),\n     wholeSeriesDetectionCondition.getChangeThresholdCondition()\n         .getSuppressCondition().getMinRatio());\n \n List<MetricSingleSeriesDetectionCondition> seriesDetectionConditions\n     = detectionConfig.getSeriesDetectionConditions();\n System.out.printf(\"Series Detection Conditions:%n\");\n for (MetricSingleSeriesDetectionCondition seriesDetectionCondition : seriesDetectionConditions) {\n     DimensionKey seriesKey = seriesDetectionCondition.getSeriesKey();\n     final String seriesKeyStr\n         = Arrays.toString(seriesKey.asMap().entrySet().toArray());\n     System.out.printf(\"- Series Key:%s%n\", seriesKeyStr);\n     System.out.printf(\" - Use %s operator for multiple detection conditions:%n\",\n         seriesDetectionCondition.getCrossConditionsOperator());\n \n     System.out.printf(\" - Smart Detection Condition:%n\");\n     System.out.printf(\"  - Sensitivity: %s%n\",\n         seriesDetectionCondition.getSmartDetectionCondition()\n             .getSensitivity());\n     System.out.printf(\"  - Detection direction: %s%n\",\n         seriesDetectionCondition.getSmartDetectionCondition()\n             .getAnomalyDetectorDirection());\n     System.out.printf(\"  - Suppress conditions: minimum number: %s; minimum ratio: %s%n\",\n         seriesDetectionCondition.getSmartDetectionCondition()\n             .getSuppressCondition().getMinNumber(),\n         seriesDetectionCondition.getSmartDetectionCondition()\n             .getSuppressCondition().getMinRatio());\n \n     System.out.printf(\" - Hard Threshold Condition:%n\");\n     System.out.printf(\"  -  Lower bound: %s%n\",\n         seriesDetectionCondition.getHardThresholdCondition()\n             .getLowerBound());\n     System.out.printf(\"  -  Upper bound: %s%n\",\n         seriesDetectionCondition.getHardThresholdCondition()\n             .getUpperBound());\n     System.out.printf(\"  -  Suppress conditions: minimum number: %s; minimum ratio: %s%n\",\n         seriesDetectionCondition.getHardThresholdCondition()\n             .getSuppressCondition().getMinNumber(),\n         seriesDetectionCondition.getHardThresholdCondition()\n             .getSuppressCondition().getMinRatio());\n \n     System.out.printf(\" - Change Threshold Condition:%n\");\n     System.out.printf(\"  -  Change percentage: %s%n\",\n         seriesDetectionCondition.getChangeThresholdCondition()\n             .getChangePercentage());\n     System.out.printf(\"  -  Shift point: %s%n\",\n         seriesDetectionCondition.getChangeThresholdCondition()\n             .getShiftPoint());\n     System.out.printf(\"  -  Detect anomaly if within range: %s%n\",\n         seriesDetectionCondition.getChangeThresholdCondition()\n             .isWithinRange());\n     System.out.printf(\"  -  Suppress conditions: minimum number: %s; minimum ratio: %s%n\",\n         seriesDetectionCondition.getChangeThresholdCondition()\n             .getSuppressCondition().getMinNumber(),\n         seriesDetectionCondition.getChangeThresholdCondition()\n             .getSuppressCondition().getMinRatio());\n }\n \n List<MetricSeriesGroupDetectionCondition> seriesGroupDetectionConditions\n     = detectionConfig.getSeriesGroupDetectionConditions();\n System.out.printf(\"Series Group Detection Conditions:%n\");\n for (MetricSeriesGroupDetectionCondition seriesGroupDetectionCondition\n     : seriesGroupDetectionConditions) {\n     DimensionKey seriesGroupKey = seriesGroupDetectionCondition.getSeriesGroupKey();\n     final String seriesGroupKeyStr\n         = Arrays.toString(seriesGroupKey.asMap().entrySet().toArray());\n     System.out.printf(\"- Series Group Key:%s%n\", seriesGroupKeyStr);\n     System.out.printf(\" - Use %s operator for multiple detection conditions:%n\",\n         seriesGroupDetectionCondition.getCrossConditionsOperator());\n \n     System.out.printf(\" - Smart Detection Condition:%n\");\n     System.out.printf(\"  - Sensitivity: %s%n\",\n         seriesGroupDetectionCondition.getSmartDetectionCondition()\n             .getSensitivity());\n     System.out.printf(\"  - Detection direction: %s%n\",\n         seriesGroupDetectionCondition.getSmartDetectionCondition()\n             .getAnomalyDetectorDirection());\n     System.out.printf(\"  - Suppress conditions: minimum number: %s; minimum ratio: %s%n\",\n         seriesGroupDetectionCondition.getSmartDetectionCondition()\n             .getSuppressCondition().getMinNumber(),\n         seriesGroupDetectionCondition.getSmartDetectionCondition()\n             .getSuppressCondition().getMinRatio());\n \n     System.out.printf(\" - Hard Threshold Condition:%n\");\n     System.out.printf(\"  -  Lower bound: %s%n\",\n         seriesGroupDetectionCondition.getHardThresholdCondition()\n             .getLowerBound());\n     System.out.printf(\"  -  Upper bound: %s%n\",\n         seriesGroupDetectionCondition.getHardThresholdCondition()\n             .getUpperBound());\n     System.out.printf(\"  -  Suppress conditions: minimum number: %s; minimum ratio: %s%n\",\n         seriesGroupDetectionCondition.getHardThresholdCondition()\n             .getSuppressCondition().getMinNumber(),\n         seriesGroupDetectionCondition.getHardThresholdCondition()\n             .getSuppressCondition().getMinRatio());\n \n     System.out.printf(\" - Change Threshold Condition:%n\");\n     System.out.printf(\"  -  Change percentage: %s%n\",\n         seriesGroupDetectionCondition.getChangeThresholdCondition()\n             .getChangePercentage());\n     System.out.printf(\"  -  Shift point: %s%n\",\n         seriesGroupDetectionCondition.getChangeThresholdCondition()\n             .getShiftPoint());\n     System.out.printf(\"  -  Detect anomaly if within range: %s%n\",\n         seriesGroupDetectionCondition.getChangeThresholdCondition()\n             .isWithinRange());\n     System.out.printf(\"  -  Suppress conditions: minimum number: %s; minimum ratio: %s%n\",\n         seriesGroupDetectionCondition.getChangeThresholdCondition()\n             .getSuppressCondition().getMinNumber(),\n         seriesGroupDetectionCondition.getChangeThresholdCondition()\n             .getSuppressCondition().getMinRatio());\n }\n```"
  syntax:
    content: public Response<AnomalyDetectionConfiguration> getMetricAnomalyDetectionConfigWithResponse(String detectionConfigurationId, Context context)
    parameters:
    - id: detectionConfigurationId
      type: java.lang.String
      description: The anomaly detection configuration id.
    - id: context
      type: com.azure.core.util.Context
      description: Additional context that is passed through the Http pipeline during the service call.
    return:
      type: com.azure.core.http.rest.Response<com.azure.ai.metricsadvisor.models.AnomalyDetectionConfiguration>
      description: A <xref uid="com.azure.core.http.rest.Response" data-throw-if-not-resolved="false">Response</xref> containing the <xref uid="com.azure.ai.metricsadvisor.models.AnomalyDetectionConfiguration" data-throw-if-not-resolved="false">AnomalyDetectionConfiguration</xref> for the provided id.
- uid: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.listAnomalyAlertConfigs(java.lang.String)
  id: listAnomalyAlertConfigs(java.lang.String)
  artifact: com.azure:azure-ai-metricsadvisor:1.0.0-beta.2
  parent: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient
  langs:
  - java
  name: listAnomalyAlertConfigs(String detectionConfigurationId)
  nameWithType: MetricsAdvisorAdministrationClient.listAnomalyAlertConfigs(String detectionConfigurationId)
  fullName: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.listAnomalyAlertConfigs(String detectionConfigurationId)
  overload: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.listAnomalyAlertConfigs*
  type: Method
  package: com.azure.ai.metricsadvisor.administration
  summary: >-
    Fetch the anomaly alert configurations associated with a detection configuration.


    **Code sample**


    ```java

    String detectionConfigId = "3rt98er30-6e6e-4391-b78f-bpfdfee1e6f5";
     metricsAdvisorAdminClient.listAnomalyAlertConfigs(detectionConfigId)
         .forEach(anomalyAlertConfiguration -> {
             System.out.printf("DataPoint Anomaly alert configuration Id: %s%n", anomalyAlertConfiguration.getId());
             System.out.printf("DataPoint Anomaly alert configuration description: %s%n",
                 anomalyAlertConfiguration.getDescription());
             System.out.printf("DataPoint Anomaly alert configuration hook ids: %s%n",
                 anomalyAlertConfiguration.getIdOfHooksToAlert());
             System.out.printf("DataPoint Anomaly alert configuration cross metrics operator: %s%n",
                 anomalyAlertConfiguration.getCrossMetricsOperator().toString());
         });
    ```
  syntax:
    content: public PagedIterable<AnomalyAlertConfiguration> listAnomalyAlertConfigs(String detectionConfigurationId)
    parameters:
    - id: detectionConfigurationId
      type: java.lang.String
      description: The id of the detection configuration.
    return:
      type: com.azure.core.http.rest.PagedIterable<com.azure.ai.metricsadvisor.models.AnomalyAlertConfiguration>
      description: >-
        A <xref uid="com.azure.core.http.rest.PagedIterable" data-throw-if-not-resolved="false">PagedIterable</xref> containing information of all the
         <xref uid="com.azure.ai.metricsadvisor.models.AnomalyAlertConfiguration" data-throw-if-not-resolved="false">anomaly alert configurations</xref> for the specified detection configuration.
- uid: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.listAnomalyAlertConfigs(java.lang.String,com.azure.core.util.Context)
  id: listAnomalyAlertConfigs(java.lang.String,com.azure.core.util.Context)
  artifact: com.azure:azure-ai-metricsadvisor:1.0.0-beta.2
  parent: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient
  langs:
  - java
  name: listAnomalyAlertConfigs(String detectionConfigurationId, Context context)
  nameWithType: MetricsAdvisorAdministrationClient.listAnomalyAlertConfigs(String detectionConfigurationId, Context context)
  fullName: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.listAnomalyAlertConfigs(String detectionConfigurationId, Context context)
  overload: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.listAnomalyAlertConfigs*
  type: Method
  package: com.azure.ai.metricsadvisor.administration
  summary: >-
    Fetch the anomaly alert configurations associated with a detection configuration.


    **Code sample**


    ```java

    String detectionConfigId = "3rt98er30-6e6e-4391-b78f-bpfdfee1e6f5";
     metricsAdvisorAdminClient.listAnomalyAlertConfigs(detectionConfigId, Context.NONE)
         .forEach(anomalyAlertConfiguration -> {
             System.out.printf("DataPoint Anomaly alert configuration Id: %s%n", anomalyAlertConfiguration.getId());
             System.out.printf("DataPoint Anomaly alert configuration description: %s%n",
                 anomalyAlertConfiguration.getDescription());
             System.out.printf("DataPoint Anomaly alert configuration hook ids: %s%n",
                 anomalyAlertConfiguration.getIdOfHooksToAlert());
             System.out.printf("DataPoint Anomaly alert configuration cross metrics operator: %s%n",
                 anomalyAlertConfiguration.getCrossMetricsOperator().toString());
         });
    ```
  syntax:
    content: public PagedIterable<AnomalyAlertConfiguration> listAnomalyAlertConfigs(String detectionConfigurationId, Context context)
    parameters:
    - id: detectionConfigurationId
      type: java.lang.String
      description: The id of the detection configuration.
    - id: context
      type: com.azure.core.util.Context
      description: Additional context that is passed through the Http pipeline during the service call.
    return:
      type: com.azure.core.http.rest.PagedIterable<com.azure.ai.metricsadvisor.models.AnomalyAlertConfiguration>
      description: >-
        A <xref uid="com.azure.core.http.rest.PagedIterable" data-throw-if-not-resolved="false">PagedIterable</xref> containing information of all the
         <xref uid="com.azure.ai.metricsadvisor.models.AnomalyAlertConfiguration" data-throw-if-not-resolved="false">anomaly alert configurations</xref> for the specified detection configuration.
- uid: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.listDataFeedIngestionStatus(java.lang.String,com.azure.ai.metricsadvisor.models.ListDataFeedIngestionOptions)
  id: listDataFeedIngestionStatus(java.lang.String,com.azure.ai.metricsadvisor.models.ListDataFeedIngestionOptions)
  artifact: com.azure:azure-ai-metricsadvisor:1.0.0-beta.2
  parent: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient
  langs:
  - java
  name: listDataFeedIngestionStatus(String dataFeedId, ListDataFeedIngestionOptions options)
  nameWithType: MetricsAdvisorAdministrationClient.listDataFeedIngestionStatus(String dataFeedId, ListDataFeedIngestionOptions options)
  fullName: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.listDataFeedIngestionStatus(String dataFeedId, ListDataFeedIngestionOptions options)
  overload: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.listDataFeedIngestionStatus*
  type: Method
  package: com.azure.ai.metricsadvisor.administration
  summary: "Fetch the ingestion status of a data feed.\n\n**Code sample**\n\n```java\nfinal String dataFeedId = \"4957a2f7-a0f4-4fc0-b8d7-d866c1df0f4c\";\n final OffsetDateTime startTime = OffsetDateTime.parse(\"2020-01-01T00:00:00Z\");\n final OffsetDateTime endTime = OffsetDateTime.parse(\"2020-09-09T00:00:00Z\");\n final ListDataFeedIngestionOptions options = new ListDataFeedIngestionOptions(startTime, endTime);\n PagedIterable<DataFeedIngestionStatus> ingestionStatuses\n     = metricsAdvisorAdminClient.listDataFeedIngestionStatus(dataFeedId, options);\n \n for (DataFeedIngestionStatus ingestionStatus : ingestionStatuses) {\n     System.out.printf(\"Timestamp: %s%n\", ingestionStatus.getTimestamp());\n     System.out.printf(\"Status: %s%n\", ingestionStatus.getStatus());\n     System.out.printf(\"Message: %s%n\", ingestionStatus.getMessage());\n }\n```"
  syntax:
    content: public PagedIterable<DataFeedIngestionStatus> listDataFeedIngestionStatus(String dataFeedId, ListDataFeedIngestionOptions options)
    parameters:
    - id: dataFeedId
      type: java.lang.String
      description: The data feed id.
    - id: options
      type: com.azure.ai.metricsadvisor.models.ListDataFeedIngestionOptions
      description: The additional parameters.
    return:
      type: com.azure.core.http.rest.PagedIterable<com.azure.ai.metricsadvisor.models.DataFeedIngestionStatus>
      description: The ingestion statuses.
- uid: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.listDataFeedIngestionStatus(java.lang.String,com.azure.ai.metricsadvisor.models.ListDataFeedIngestionOptions,com.azure.core.util.Context)
  id: listDataFeedIngestionStatus(java.lang.String,com.azure.ai.metricsadvisor.models.ListDataFeedIngestionOptions,com.azure.core.util.Context)
  artifact: com.azure:azure-ai-metricsadvisor:1.0.0-beta.2
  parent: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient
  langs:
  - java
  name: listDataFeedIngestionStatus(String dataFeedId, ListDataFeedIngestionOptions options, Context context)
  nameWithType: MetricsAdvisorAdministrationClient.listDataFeedIngestionStatus(String dataFeedId, ListDataFeedIngestionOptions options, Context context)
  fullName: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.listDataFeedIngestionStatus(String dataFeedId, ListDataFeedIngestionOptions options, Context context)
  overload: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.listDataFeedIngestionStatus*
  type: Method
  package: com.azure.ai.metricsadvisor.administration
  summary: >-
    Fetch the ingestion status of a data feed.


    **Code sample**


    ```java

    final String dataFeedId = "4957a2f7-a0f4-4fc0-b8d7-d866c1df0f4c";
     final OffsetDateTime startTime = OffsetDateTime.parse("2020-01-01T00:00:00Z");
     final OffsetDateTime endTime = OffsetDateTime.parse("2020-09-09T00:00:00Z");
     final ListDataFeedIngestionOptions options = new ListDataFeedIngestionOptions(startTime, endTime);
     PagedIterable<DataFeedIngestionStatus> ingestionStatuses
         = metricsAdvisorAdminClient.listDataFeedIngestionStatus(dataFeedId, options, Context.NONE);
     Stream<PagedResponse<DataFeedIngestionStatus>> ingestionStatusPageStream = ingestionStatuses.streamByPage();
     int[] pageCount = new int[1];
     ingestionStatusPageStream.forEach(ingestionStatusPage -> {
         System.out.printf("Page: %d%n", pageCount[0]++);
         for (DataFeedIngestionStatus ingestionStatus : ingestionStatusPage.getElements()) {
             System.out.printf("Timestamp: %s%n", ingestionStatus.getTimestamp());
             System.out.printf("Status: %s%n", ingestionStatus.getStatus());
             System.out.printf("Message: %s%n", ingestionStatus.getMessage());
         }
     });
    ```
  syntax:
    content: public PagedIterable<DataFeedIngestionStatus> listDataFeedIngestionStatus(String dataFeedId, ListDataFeedIngestionOptions options, Context context)
    parameters:
    - id: dataFeedId
      type: java.lang.String
      description: The data feed id.
    - id: options
      type: com.azure.ai.metricsadvisor.models.ListDataFeedIngestionOptions
      description: The additional parameters.
    - id: context
      type: com.azure.core.util.Context
      description: Additional context that is passed through the Http pipeline during the service call.
    return:
      type: com.azure.core.http.rest.PagedIterable<com.azure.ai.metricsadvisor.models.DataFeedIngestionStatus>
      description: The ingestion statuses.
- uid: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.listDataFeeds()
  id: listDataFeeds()
  artifact: com.azure:azure-ai-metricsadvisor:1.0.0-beta.2
  parent: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient
  langs:
  - java
  name: listDataFeeds()
  nameWithType: MetricsAdvisorAdministrationClient.listDataFeeds()
  fullName: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.listDataFeeds()
  overload: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.listDataFeeds*
  type: Method
  package: com.azure.ai.metricsadvisor.administration
  summary: >-
    List information of all data feeds on the metrics advisor account.


    **Code sample**


    ```java

    metricsAdvisorAdminClient.listDataFeeds()
         .forEach(dataFeed -> {
             System.out.printf("Data feed Id: %s%n", dataFeed.getId());
             System.out.printf("Data feed description: %s%n", dataFeed.getOptions().getDescription());
             System.out.printf("Data feed source type: %s%n", dataFeed.getSourceType());
             System.out.printf("Data feed creator: %s%n", dataFeed.getCreator());
         });
    ```
  syntax:
    content: public PagedIterable<DataFeed> listDataFeeds()
    return:
      type: com.azure.core.http.rest.PagedIterable<com.azure.ai.metricsadvisor.models.DataFeed>
      description: A <xref uid="com.azure.core.http.rest.PagedIterable" data-throw-if-not-resolved="false">PagedIterable</xref> containing information of all the <xref uid="com.azure.ai.metricsadvisor.models.DataFeed" data-throw-if-not-resolved="false">data feeds</xref> in the account.
- uid: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.listDataFeeds(com.azure.ai.metricsadvisor.models.ListDataFeedOptions,com.azure.core.util.Context)
  id: listDataFeeds(com.azure.ai.metricsadvisor.models.ListDataFeedOptions,com.azure.core.util.Context)
  artifact: com.azure:azure-ai-metricsadvisor:1.0.0-beta.2
  parent: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient
  langs:
  - java
  name: listDataFeeds(ListDataFeedOptions options, Context context)
  nameWithType: MetricsAdvisorAdministrationClient.listDataFeeds(ListDataFeedOptions options, Context context)
  fullName: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.listDataFeeds(ListDataFeedOptions options, Context context)
  overload: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.listDataFeeds*
  type: Method
  package: com.azure.ai.metricsadvisor.administration
  summary: >-
    List information of all data feeds on the metrics advisor account with REST response.


    **Code sample**


    ```java

    metricsAdvisorAdminClient.listDataFeeds(
         new ListDataFeedOptions()
             .setListDataFeedFilter(
                 new ListDataFeedFilter()
                     .setDataFeedStatus(DataFeedStatus.ACTIVE)
                     .setDataFeedGranularityType(DataFeedGranularityType.DAILY))
             .setTop(3), Context.NONE)
         .forEach(dataFeed -> {
             System.out.printf("Data feed Id: %s%n", dataFeed.getId());
             System.out.printf("Data feed description: %s%n", dataFeed.getOptions().getDescription());
             System.out.printf("Data feed source type: %s%n", dataFeed.getSourceType());
             System.out.printf("Data feed creator: %s%n", dataFeed.getCreator());
             System.out.printf("Data feed status: %s%n", dataFeed.getStatus());
             System.out.printf("Data feed granularity type: %s%n", dataFeed.getGranularity().getGranularityType());
         });
    ```
  syntax:
    content: public PagedIterable<DataFeed> listDataFeeds(ListDataFeedOptions options, Context context)
    parameters:
    - id: options
      type: com.azure.ai.metricsadvisor.models.ListDataFeedOptions
      description: The configurable <xref uid="com.azure.ai.metricsadvisor.models.ListDataFeedOptions" data-throw-if-not-resolved="false">options</xref> to pass for filtering the output result.
    - id: context
      type: com.azure.core.util.Context
      description: Additional context that is passed through the Http pipeline during the service call.
    return:
      type: com.azure.core.http.rest.PagedIterable<com.azure.ai.metricsadvisor.models.DataFeed>
      description: A <xref uid="com.azure.core.http.rest.PagedIterable" data-throw-if-not-resolved="false">PagedIterable</xref> containing information of all the <xref uid="com.azure.ai.metricsadvisor.models.DataFeed" data-throw-if-not-resolved="false">data feeds</xref> in the account.
- uid: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.listHooks()
  id: listHooks()
  artifact: com.azure:azure-ai-metricsadvisor:1.0.0-beta.2
  parent: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient
  langs:
  - java
  name: listHooks()
  nameWithType: MetricsAdvisorAdministrationClient.listHooks()
  fullName: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.listHooks()
  overload: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.listHooks*
  type: Method
  package: com.azure.ai.metricsadvisor.administration
  summary: >-
    List information of hooks on the metrics advisor account.


    **Code sample**


    ```java

    PagedIterable<NotificationHook> hooks = metricsAdvisorAdminClient.listHooks();
     for (NotificationHook notificationHook : hooks) {
         if (notificationHook instanceof EmailNotificationHook) {
             EmailNotificationHook emailHook = (EmailNotificationHook) notificationHook;
             System.out.printf("Email Hook Id: %s%n", emailHook.getId());
             System.out.printf("Email Hook Name: %s%n", emailHook.getName());
             System.out.printf("Email Hook Description: %s%n", emailHook.getDescription());
             System.out.printf("Email Hook External Link: %s%n", emailHook.getExternalLink());
             System.out.printf("Email Hook Emails: %s%n", String.join(",", emailHook.getEmailsToAlert()));
         } else if (notificationHook instanceof WebNotificationHook) {
             WebNotificationHook webHook = (WebNotificationHook) notificationHook;
             System.out.printf("Web Hook Id: %s%n", webHook.getId());
             System.out.printf("Web Hook Name: %s%n", webHook.getName());
             System.out.printf("Web Hook Description: %s%n", webHook.getDescription());
             System.out.printf("Web Hook External Link: %s%n", webHook.getExternalLink());
             System.out.printf("Web Hook Endpoint: %s%n", webHook.getEndpoint());
             System.out.printf("Web Hook Headers: %s%n", webHook.getHttpHeaders());
         }
     }
    ```
  syntax:
    content: public PagedIterable<NotificationHook> listHooks()
    return:
      type: com.azure.core.http.rest.PagedIterable<com.azure.ai.metricsadvisor.models.NotificationHook>
      description: A <xref uid="com.azure.core.http.rest.PagedIterable" data-throw-if-not-resolved="false">PagedIterable</xref> containing information of all the <xref uid="com.azure.ai.metricsadvisor.models.NotificationHook" data-throw-if-not-resolved="false">NotificationHook</xref> in the account.
- uid: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.listHooks(com.azure.ai.metricsadvisor.models.ListHookOptions,com.azure.core.util.Context)
  id: listHooks(com.azure.ai.metricsadvisor.models.ListHookOptions,com.azure.core.util.Context)
  artifact: com.azure:azure-ai-metricsadvisor:1.0.0-beta.2
  parent: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient
  langs:
  - java
  name: listHooks(ListHookOptions options, Context context)
  nameWithType: MetricsAdvisorAdministrationClient.listHooks(ListHookOptions options, Context context)
  fullName: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.listHooks(ListHookOptions options, Context context)
  overload: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.listHooks*
  type: Method
  package: com.azure.ai.metricsadvisor.administration
  summary: >-
    List information of hooks.


    **Code sample**


    ```java

    ListHookOptions options = new ListHookOptions()
         .setSkip(100)
         .setTop(20);
     PagedIterable<NotificationHook> hooks = metricsAdvisorAdminClient.listHooks(options, Context.NONE);
     Stream<PagedResponse<NotificationHook>> hooksPageStream = hooks.streamByPage();
     int[] pageCount = new int[1];
     hooksPageStream.forEach(hookPage -> {
         System.out.printf("Page: %d%n", pageCount[0]++);
         for (NotificationHook notificationHook : hookPage.getElements()) {
             if (notificationHook instanceof EmailNotificationHook) {
                 EmailNotificationHook emailHook = (EmailNotificationHook) notificationHook;
                 System.out.printf("Email Hook Id: %s%n", emailHook.getId());
                 System.out.printf("Email Hook Name: %s%n", emailHook.getName());
                 System.out.printf("Email Hook Description: %s%n", emailHook.getDescription());
                 System.out.printf("Email Hook External Link: %s%n", emailHook.getExternalLink());
                 System.out.printf("Email Hook Emails: %s%n", String.join(",",
                     emailHook.getEmailsToAlert()));
                 System.out.printf("Email Hook Admins: %s%n", String.join(",", emailHook.getAdminEmails()));
             } else if (notificationHook instanceof WebNotificationHook) {
                 WebNotificationHook webHook = (WebNotificationHook) notificationHook;
                 System.out.printf("Web Hook Id: %s%n", webHook.getId());
                 System.out.printf("Web Hook Name: %s%n", webHook.getName());
                 System.out.printf("Web Hook Description: %s%n", webHook.getDescription());
                 System.out.printf("Web Hook External Link: %s%n", webHook.getExternalLink());
                 System.out.printf("Web Hook Endpoint: %s%n", webHook.getEndpoint());
                 System.out.printf("Web Hook Headers: %s%n", webHook.getHttpHeaders());
                 System.out.printf("Web Hook Admins: %s%n", String.join(",", webHook.getAdminEmails()));
             }
         }
     });
    ```
  syntax:
    content: public PagedIterable<NotificationHook> listHooks(ListHookOptions options, Context context)
    parameters:
    - id: options
      type: com.azure.ai.metricsadvisor.models.ListHookOptions
      description: The additional parameters.
    - id: context
      type: com.azure.core.util.Context
      description: Additional context that is passed through the Http pipeline during the service call.
    return:
      type: com.azure.core.http.rest.PagedIterable<com.azure.ai.metricsadvisor.models.NotificationHook>
      description: A <xref uid="com.azure.core.http.rest.PagedIterable" data-throw-if-not-resolved="false">PagedIterable</xref> containing information of the <xref uid="com.azure.ai.metricsadvisor.models.NotificationHook" data-throw-if-not-resolved="false">NotificationHook</xref> resources.
- uid: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.listMetricAnomalyDetectionConfigs(java.lang.String)
  id: listMetricAnomalyDetectionConfigs(java.lang.String)
  artifact: com.azure:azure-ai-metricsadvisor:1.0.0-beta.2
  parent: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient
  langs:
  - java
  name: listMetricAnomalyDetectionConfigs(String metricId)
  nameWithType: MetricsAdvisorAdministrationClient.listMetricAnomalyDetectionConfigs(String metricId)
  fullName: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.listMetricAnomalyDetectionConfigs(String metricId)
  overload: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.listMetricAnomalyDetectionConfigs*
  type: Method
  package: com.azure.ai.metricsadvisor.administration
  summary: "Given a metric id, retrieve all anomaly detection configurations applied to it.\n\n**Code sample**\n\n```java\nfinal String metricId = \"0b836da8-10e6-46cd-8f4f-28262e113a62\";\n PagedIterable<AnomalyDetectionConfiguration> configsIterable\n     = metricsAdvisorAdminClient.listMetricAnomalyDetectionConfigs(metricId);\n \n for (AnomalyDetectionConfiguration detectionConfig : configsIterable) {\n     System.out.printf(\"Detection config Id: %s%n\", detectionConfig.getId());\n     System.out.printf(\"Name: %s%n\", detectionConfig.getName());\n     System.out.printf(\"Description: %s%n\", detectionConfig.getDescription());\n     System.out.printf(\"MetricId: %s%n\", detectionConfig.getMetricId());\n }\n```"
  syntax:
    content: public PagedIterable<AnomalyDetectionConfiguration> listMetricAnomalyDetectionConfigs(String metricId)
    parameters:
    - id: metricId
      type: java.lang.String
      description: The metric id.
    return:
      type: com.azure.core.http.rest.PagedIterable<com.azure.ai.metricsadvisor.models.AnomalyDetectionConfiguration>
      description: The anomaly detection configurations.
- uid: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.listMetricAnomalyDetectionConfigs(java.lang.String,com.azure.core.util.Context)
  id: listMetricAnomalyDetectionConfigs(java.lang.String,com.azure.core.util.Context)
  artifact: com.azure:azure-ai-metricsadvisor:1.0.0-beta.2
  parent: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient
  langs:
  - java
  name: listMetricAnomalyDetectionConfigs(String metricId, Context context)
  nameWithType: MetricsAdvisorAdministrationClient.listMetricAnomalyDetectionConfigs(String metricId, Context context)
  fullName: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.listMetricAnomalyDetectionConfigs(String metricId, Context context)
  overload: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.listMetricAnomalyDetectionConfigs*
  type: Method
  package: com.azure.ai.metricsadvisor.administration
  summary: "Given a metric id, retrieve all anomaly detection configurations applied to it.\n\n**Code sample**\n\n```java\nfinal String metricId = \"0b836da8-10e6-46cd-8f4f-28262e113a62\";\n PagedIterable<AnomalyDetectionConfiguration> configsIterable\n     = metricsAdvisorAdminClient.listMetricAnomalyDetectionConfigs(metricId, Context.NONE);\n \n Stream<PagedResponse<AnomalyDetectionConfiguration>> configByPageStream\n     = configsIterable.streamByPage();\n \n configByPageStream.forEach(configPage -> {\n     IterableStream<AnomalyDetectionConfiguration> pageElements = configPage.getElements();\n     for (AnomalyDetectionConfiguration detectionConfig : pageElements) {\n         System.out.printf(\"Detection config Id: %s%n\", detectionConfig.getId());\n         System.out.printf(\"Name: %s%n\", detectionConfig.getName());\n         System.out.printf(\"Description: %s%n\", detectionConfig.getDescription());\n         System.out.printf(\"MetricId: %s%n\", detectionConfig.getMetricId());\n     }\n });\n```"
  syntax:
    content: public PagedIterable<AnomalyDetectionConfiguration> listMetricAnomalyDetectionConfigs(String metricId, Context context)
    parameters:
    - id: metricId
      type: java.lang.String
      description: The metric id.
    - id: context
      type: com.azure.core.util.Context
      description: Additional context that is passed through the Http pipeline during the service call.
    return:
      type: com.azure.core.http.rest.PagedIterable<com.azure.ai.metricsadvisor.models.AnomalyDetectionConfiguration>
      description: The anomaly detection configurations.
- uid: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.refreshDataFeedIngestion(java.lang.String,java.time.OffsetDateTime,java.time.OffsetDateTime)
  id: refreshDataFeedIngestion(java.lang.String,java.time.OffsetDateTime,java.time.OffsetDateTime)
  artifact: com.azure:azure-ai-metricsadvisor:1.0.0-beta.2
  parent: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient
  langs:
  - java
  name: refreshDataFeedIngestion(String dataFeedId, OffsetDateTime startTime, OffsetDateTime endTime)
  nameWithType: MetricsAdvisorAdministrationClient.refreshDataFeedIngestion(String dataFeedId, OffsetDateTime startTime, OffsetDateTime endTime)
  fullName: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.refreshDataFeedIngestion(String dataFeedId, OffsetDateTime startTime, OffsetDateTime endTime)
  overload: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.refreshDataFeedIngestion*
  type: Method
  package: com.azure.ai.metricsadvisor.administration
  summary: >-
    Refresh data ingestion for a period.


    The data in the data source for the given period will be reingested and any ingested data for the same period will be overwritten.


    **Code sample**


    ```java

    final String dataFeedId = "4957a2f7-a0f4-4fc0-b8d7-d866c1df0f4c";
     final OffsetDateTime startTime = OffsetDateTime.parse("2020-01-01T00:00:00Z");
     final OffsetDateTime endTime = OffsetDateTime.parse("2020-03-03T00:00:00Z");
     metricsAdvisorAdminClient.refreshDataFeedIngestion(dataFeedId,
         startTime,
         endTime);
    ```
  syntax:
    content: public void refreshDataFeedIngestion(String dataFeedId, OffsetDateTime startTime, OffsetDateTime endTime)
    parameters:
    - id: dataFeedId
      type: java.lang.String
      description: The data feed id.
    - id: startTime
      type: java.time.OffsetDateTime
      description: The start point of the period.
    - id: endTime
      type: java.time.OffsetDateTime
      description: The end point of of the period.
- uid: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.refreshDataFeedIngestionWithResponse(java.lang.String,java.time.OffsetDateTime,java.time.OffsetDateTime,com.azure.core.util.Context)
  id: refreshDataFeedIngestionWithResponse(java.lang.String,java.time.OffsetDateTime,java.time.OffsetDateTime,com.azure.core.util.Context)
  artifact: com.azure:azure-ai-metricsadvisor:1.0.0-beta.2
  parent: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient
  langs:
  - java
  name: refreshDataFeedIngestionWithResponse(String dataFeedId, OffsetDateTime startTime, OffsetDateTime endTime, Context context)
  nameWithType: MetricsAdvisorAdministrationClient.refreshDataFeedIngestionWithResponse(String dataFeedId, OffsetDateTime startTime, OffsetDateTime endTime, Context context)
  fullName: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.refreshDataFeedIngestionWithResponse(String dataFeedId, OffsetDateTime startTime, OffsetDateTime endTime, Context context)
  overload: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.refreshDataFeedIngestionWithResponse*
  type: Method
  package: com.azure.ai.metricsadvisor.administration
  summary: >-
    Refresh data ingestion for a period.


    The data in the data source for the given period will be reingested and any ingested data for the same period will be overwritten.


    **Code sample**


    ```java

    final String dataFeedId = "4957a2f7-a0f4-4fc0-b8d7-d866c1df0f4c";
     final OffsetDateTime startTime = OffsetDateTime.parse("2020-01-01T00:00:00Z");
     final OffsetDateTime endTime = OffsetDateTime.parse("2020-03-03T00:00:00Z");
     Response<Void> response = metricsAdvisorAdminClient.refreshDataFeedIngestionWithResponse(dataFeedId,
         startTime,
         endTime,
         Context.NONE);
     System.out.printf("Response statusCode: %d%n", response.getStatusCode());
    ```
  syntax:
    content: public Response<Void> refreshDataFeedIngestionWithResponse(String dataFeedId, OffsetDateTime startTime, OffsetDateTime endTime, Context context)
    parameters:
    - id: dataFeedId
      type: java.lang.String
      description: The data feed id.
    - id: startTime
      type: java.time.OffsetDateTime
      description: The start point of the period.
    - id: endTime
      type: java.time.OffsetDateTime
      description: The end point of of the period.
    - id: context
      type: com.azure.core.util.Context
      description: Additional context that is passed through the Http pipeline during the service call.
    return:
      type: com.azure.core.http.rest.Response<java.lang.Void>
      description: The response.
- uid: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.updateAnomalyAlertConfig(com.azure.ai.metricsadvisor.models.AnomalyAlertConfiguration)
  id: updateAnomalyAlertConfig(com.azure.ai.metricsadvisor.models.AnomalyAlertConfiguration)
  artifact: com.azure:azure-ai-metricsadvisor:1.0.0-beta.2
  parent: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient
  langs:
  - java
  name: updateAnomalyAlertConfig(AnomalyAlertConfiguration alertConfiguration)
  nameWithType: MetricsAdvisorAdministrationClient.updateAnomalyAlertConfig(AnomalyAlertConfiguration alertConfiguration)
  fullName: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.updateAnomalyAlertConfig(AnomalyAlertConfiguration alertConfiguration)
  overload: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.updateAnomalyAlertConfig*
  type: Method
  package: com.azure.ai.metricsadvisor.administration
  summary: "Update anomaly alert configuration.\n\n**Code sample**\n\n```java\nString alertConfigId = \"1p0f8er30-6e6e-4391-b78f-bpfdfee1e6f5\";\n String additionalHookId = \"2gh8er30-6e6e-4391-b78f-bpfdfee1e6f5\";\n \n AnomalyAlertConfiguration existingAnomalyConfig\n     = metricsAdvisorAdminClient.getAnomalyAlertConfig(alertConfigId);\n final AnomalyAlertConfiguration updatAnomalyAlertConfiguration\n     = metricsAdvisorAdminClient.updateAnomalyAlertConfig(\n     existingAnomalyConfig\n         .addIdOfHookToAlert(additionalHookId)\n         .setDescription(\"updated to add more hook ids\")\n );\n \n System.out.printf(\"Updated anomaly alert configuration Id: %s%n\", updatAnomalyAlertConfiguration.getId());\n System.out.printf(\"Updated anomaly alert configuration description: %s%n\",\n     updatAnomalyAlertConfiguration.getDescription());\n System.out.printf(\"Updated anomaly alert configuration hook ids: %s%n\",\n     updatAnomalyAlertConfiguration.getIdOfHooksToAlert());\n```"
  syntax:
    content: public AnomalyAlertConfiguration updateAnomalyAlertConfig(AnomalyAlertConfiguration alertConfiguration)
    parameters:
    - id: alertConfiguration
      type: com.azure.ai.metricsadvisor.models.AnomalyAlertConfiguration
      description: The anomaly alert configuration to update.
    return:
      type: com.azure.ai.metricsadvisor.models.AnomalyAlertConfiguration
      description: The <xref uid="com.azure.ai.metricsadvisor.models.AnomalyAlertConfiguration" data-throw-if-not-resolved="false">AnomalyAlertConfiguration</xref> that was updated.
- uid: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.updateAnomalyAlertConfigWithResponse(com.azure.ai.metricsadvisor.models.AnomalyAlertConfiguration,com.azure.core.util.Context)
  id: updateAnomalyAlertConfigWithResponse(com.azure.ai.metricsadvisor.models.AnomalyAlertConfiguration,com.azure.core.util.Context)
  artifact: com.azure:azure-ai-metricsadvisor:1.0.0-beta.2
  parent: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient
  langs:
  - java
  name: updateAnomalyAlertConfigWithResponse(AnomalyAlertConfiguration alertConfiguration, Context context)
  nameWithType: MetricsAdvisorAdministrationClient.updateAnomalyAlertConfigWithResponse(AnomalyAlertConfiguration alertConfiguration, Context context)
  fullName: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.updateAnomalyAlertConfigWithResponse(AnomalyAlertConfiguration alertConfiguration, Context context)
  overload: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.updateAnomalyAlertConfigWithResponse*
  type: Method
  package: com.azure.ai.metricsadvisor.administration
  summary: "Update anomaly alert configuration.\n\n**Code sample**\n\n```java\nString alertConfigId = \"1p0f8er30-6e6e-4391-b78f-bpfdfee1e6f5\";\n String additionalHookId = \"2gh8er30-6e6e-4391-b78f-bpfdfee1e6f5\";\n \n AnomalyAlertConfiguration existingAnomalyConfig\n     = metricsAdvisorAdminClient.getAnomalyAlertConfig(alertConfigId);\n final Response<AnomalyAlertConfiguration> alertConfigurationResponse\n     = metricsAdvisorAdminClient.updateAnomalyAlertConfigWithResponse(\n     existingAnomalyConfig\n         .addIdOfHookToAlert(additionalHookId)\n         .setDescription(\"updated to add more hook ids\"), Context.NONE);\n \n System.out.printf(\"Update anomaly alert operation status: %s%n\", alertConfigurationResponse.getStatusCode());\n final AnomalyAlertConfiguration updatAnomalyAlertConfiguration = alertConfigurationResponse.getValue();\n System.out.printf(\"Updated anomaly alert configuration Id: %s%n\", updatAnomalyAlertConfiguration.getId());\n System.out.printf(\"Updated anomaly alert configuration description: %s%n\",\n     updatAnomalyAlertConfiguration.getDescription());\n System.out.printf(\"Updated anomaly alert configuration hook ids: %sf%n\",\n     updatAnomalyAlertConfiguration.getIdOfHooksToAlert());\n```"
  syntax:
    content: public Response<AnomalyAlertConfiguration> updateAnomalyAlertConfigWithResponse(AnomalyAlertConfiguration alertConfiguration, Context context)
    parameters:
    - id: alertConfiguration
      type: com.azure.ai.metricsadvisor.models.AnomalyAlertConfiguration
      description: The anomaly alert configuration to update.
    - id: context
      type: com.azure.core.util.Context
      description: Additional context that is passed through the Http pipeline during the service call.
    return:
      type: com.azure.core.http.rest.Response<com.azure.ai.metricsadvisor.models.AnomalyAlertConfiguration>
      description: A <xref uid="com.azure.core.http.rest.Response" data-throw-if-not-resolved="false">Response</xref> containing the <xref uid="com.azure.ai.metricsadvisor.models.AnomalyAlertConfiguration" data-throw-if-not-resolved="false">AnomalyAlertConfiguration</xref> that was updated.
- uid: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.updateDataFeed(com.azure.ai.metricsadvisor.models.DataFeed)
  id: updateDataFeed(com.azure.ai.metricsadvisor.models.DataFeed)
  artifact: com.azure:azure-ai-metricsadvisor:1.0.0-beta.2
  parent: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient
  langs:
  - java
  name: updateDataFeed(DataFeed dataFeed)
  nameWithType: MetricsAdvisorAdministrationClient.updateDataFeed(DataFeed dataFeed)
  fullName: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.updateDataFeed(DataFeed dataFeed)
  overload: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.updateDataFeed*
  type: Method
  package: com.azure.ai.metricsadvisor.administration
  summary: "Update a data feed.\n\n**Code sample**\n\n```java\nDataFeed existingDataFeed = new DataFeed();\n final DataFeed updatedDataFeed = metricsAdvisorAdminClient.updateDataFeed(\n     existingDataFeed.setOptions(new DataFeedOptions().setDescription(\"set updated description\")));\n \n System.out.printf(\"Data feed Id: %s%n\", updatedDataFeed.getId());\n System.out.printf(\"Data feed updated description: %s%n\", updatedDataFeed.getOptions().getDescription());\n```"
  syntax:
    content: public DataFeed updateDataFeed(DataFeed dataFeed)
    parameters:
    - id: dataFeed
      type: com.azure.ai.metricsadvisor.models.DataFeed
      description: the data feed that needs to be updated.
    return:
      type: com.azure.ai.metricsadvisor.models.DataFeed
      description: the updated data feed.
- uid: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.updateDataFeedWithResponse(com.azure.ai.metricsadvisor.models.DataFeed,com.azure.core.util.Context)
  id: updateDataFeedWithResponse(com.azure.ai.metricsadvisor.models.DataFeed,com.azure.core.util.Context)
  artifact: com.azure:azure-ai-metricsadvisor:1.0.0-beta.2
  parent: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient
  langs:
  - java
  name: updateDataFeedWithResponse(DataFeed dataFeed, Context context)
  nameWithType: MetricsAdvisorAdministrationClient.updateDataFeedWithResponse(DataFeed dataFeed, Context context)
  fullName: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.updateDataFeedWithResponse(DataFeed dataFeed, Context context)
  overload: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.updateDataFeedWithResponse*
  type: Method
  package: com.azure.ai.metricsadvisor.administration
  summary: "Update a data feed with REST response.\n\n**Code sample**\n\n```java\nDataFeed existingDataFeed = new DataFeed();\n final Response<DataFeed> updateDataFeedWithResponse =\n     metricsAdvisorAdminClient.updateDataFeedWithResponse(\n         existingDataFeed.setOptions(new DataFeedOptions().setDescription(\"set updated description\")),\n         Context.NONE);\n \n System.out.printf(\"Data feed update operation status: %s%n\", updateDataFeedWithResponse.getStatusCode());\n DataFeed dataFeed = updateDataFeedWithResponse.getValue();\n System.out.printf(\"Data feed Id: %s%n\", dataFeed.getId());\n System.out.printf(\"Data feed updated description: %s%n\", dataFeed.getOptions().getDescription());\n```"
  syntax:
    content: public Response<DataFeed> updateDataFeedWithResponse(DataFeed dataFeed, Context context)
    parameters:
    - id: dataFeed
      type: com.azure.ai.metricsadvisor.models.DataFeed
      description: the data feed that needs to be updated.
    - id: context
      type: com.azure.core.util.Context
      description: Additional context that is passed through the HTTP pipeline during the service call.
    return:
      type: com.azure.core.http.rest.Response<com.azure.ai.metricsadvisor.models.DataFeed>
      description: the updated data feed.
- uid: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.updateHook(com.azure.ai.metricsadvisor.models.NotificationHook)
  id: updateHook(com.azure.ai.metricsadvisor.models.NotificationHook)
  artifact: com.azure:azure-ai-metricsadvisor:1.0.0-beta.2
  parent: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient
  langs:
  - java
  name: updateHook(NotificationHook notificationHook)
  nameWithType: MetricsAdvisorAdministrationClient.updateHook(NotificationHook notificationHook)
  fullName: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.updateHook(NotificationHook notificationHook)
  overload: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.updateHook*
  type: Method
  package: com.azure.ai.metricsadvisor.administration
  summary: >-
    Update an existing notificationHook.


    **Code sample**


    ```java

    final String emailHookId = "f00853f1-6627-447f-bacf-8dccf2e86fed";
     NotificationHook notificationHook = metricsAdvisorAdminClient.getHook(emailHookId);
     EmailNotificationHook emailHook = (EmailNotificationHook) notificationHook;
     emailHook
         .removeEmailToAlert("alertme{@literal @}alertme.com")
         .addEmailToAlert("alertme2{@literal @}alertme.com")
         .addEmailToAlert("alertme3{@literal @}alertme.com");
     NotificationHook updatedNotificationHook = metricsAdvisorAdminClient.updateHook(emailHook);
     EmailNotificationHook updatedEmailHook = (EmailNotificationHook) updatedNotificationHook;
     System.out.printf("NotificationHook Id: %s%n", updatedEmailHook.getId());
     System.out.printf("NotificationHook Name: %s%n", updatedEmailHook.getName());
     System.out.printf("NotificationHook Description: %s%n", updatedEmailHook.getDescription());
     System.out.printf("NotificationHook External Link: %s%n", updatedEmailHook.getExternalLink());
     System.out.printf("NotificationHook Emails: %s%n", String.join(",",
         updatedEmailHook.getEmailsToAlert()));
    ```
  syntax:
    content: public NotificationHook updateHook(NotificationHook notificationHook)
    parameters:
    - id: notificationHook
      type: com.azure.ai.metricsadvisor.models.NotificationHook
      description: The notificationHook to update.
    return:
      type: com.azure.ai.metricsadvisor.models.NotificationHook
      description: The updated <xref uid="com.azure.ai.metricsadvisor.models.NotificationHook" data-throw-if-not-resolved="false">NotificationHook</xref>.
- uid: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.updateHookWithResponse(com.azure.ai.metricsadvisor.models.NotificationHook,com.azure.core.util.Context)
  id: updateHookWithResponse(com.azure.ai.metricsadvisor.models.NotificationHook,com.azure.core.util.Context)
  artifact: com.azure:azure-ai-metricsadvisor:1.0.0-beta.2
  parent: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient
  langs:
  - java
  name: updateHookWithResponse(NotificationHook notificationHook, Context context)
  nameWithType: MetricsAdvisorAdministrationClient.updateHookWithResponse(NotificationHook notificationHook, Context context)
  fullName: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.updateHookWithResponse(NotificationHook notificationHook, Context context)
  overload: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.updateHookWithResponse*
  type: Method
  package: com.azure.ai.metricsadvisor.administration
  summary: >-
    Update an existing notificationHook.


    **Code sample**


    ```java

    final String emailHookId = "f00853f1-6627-447f-bacf-8dccf2e86fed";
     Response<NotificationHook> response
         = metricsAdvisorAdminClient.getHookWithResponse(emailHookId, Context.NONE);
     EmailNotificationHook emailHook = (EmailNotificationHook) response.getValue();
     emailHook
         .removeEmailToAlert("alertme{@literal @}alertme.com")
         .addEmailToAlert("alertme2{@literal @}alertme.com")
         .addEmailToAlert("alertme3{@literal @}alertme.com");
     Response<NotificationHook> updateResponse
         = metricsAdvisorAdminClient.updateHookWithResponse(emailHook, Context.NONE);
     EmailNotificationHook updatedEmailHook = (EmailNotificationHook) updateResponse.getValue();
     System.out.printf("Email Hook Id: %s%n", updatedEmailHook.getId());
     System.out.printf("Email Hook Name: %s%n", updatedEmailHook.getName());
     System.out.printf("Email Hook Description: %s%n", updatedEmailHook.getDescription());
     System.out.printf("Email Hook External Link: %s%n", updatedEmailHook.getExternalLink());
     System.out.printf("Email Hook Emails: %s%n", String.join(",",
         updatedEmailHook.getEmailsToAlert()));
    ```
  syntax:
    content: public Response<NotificationHook> updateHookWithResponse(NotificationHook notificationHook, Context context)
    parameters:
    - id: notificationHook
      type: com.azure.ai.metricsadvisor.models.NotificationHook
      description: The notificationHook to update.
    - id: context
      type: com.azure.core.util.Context
      description: Additional context that is passed through the Http pipeline during the service call.
    return:
      type: com.azure.core.http.rest.Response<com.azure.ai.metricsadvisor.models.NotificationHook>
      description: A <xref uid="com.azure.core.http.rest.Response" data-throw-if-not-resolved="false">Response</xref> containing the updated <xref uid="com.azure.ai.metricsadvisor.models.NotificationHook" data-throw-if-not-resolved="false">NotificationHook</xref>.
- uid: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.updateMetricAnomalyDetectionConfig(com.azure.ai.metricsadvisor.models.AnomalyDetectionConfiguration)
  id: updateMetricAnomalyDetectionConfig(com.azure.ai.metricsadvisor.models.AnomalyDetectionConfiguration)
  artifact: com.azure:azure-ai-metricsadvisor:1.0.0-beta.2
  parent: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient
  langs:
  - java
  name: updateMetricAnomalyDetectionConfig(AnomalyDetectionConfiguration detectionConfiguration)
  nameWithType: MetricsAdvisorAdministrationClient.updateMetricAnomalyDetectionConfig(AnomalyDetectionConfiguration detectionConfiguration)
  fullName: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.updateMetricAnomalyDetectionConfig(AnomalyDetectionConfiguration detectionConfiguration)
  overload: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.updateMetricAnomalyDetectionConfig*
  type: Method
  package: com.azure.ai.metricsadvisor.administration
  summary: "Update a configuration to detect anomalies in the time series of a metric.\n\n**Code sample**\n\n```java\nfinal String detectionConfigId = \"7b8069a1-1564-46da-9f50-b5d0dd9129ab\";\n AnomalyDetectionConfiguration detectionConfig = metricsAdvisorAdminClient\n     .getMetricAnomalyDetectionConfig(detectionConfigId);\n \n detectionConfig.setName(\"updated config name\");\n detectionConfig.setDescription(\"updated with more detection conditions\");\n DimensionKey seriesGroupKey = new DimensionKey()\n     .put(\"city\", \"Seoul\");\n detectionConfig.addSeriesGroupDetectionCondition(\n     new MetricSeriesGroupDetectionCondition(seriesGroupKey)\n         .setSmartDetectionCondition(new SmartDetectionCondition()\n             .setSensitivity(10.0)\n             .setAnomalyDetectorDirection(AnomalyDetectorDirection.UP)\n             .setSuppressCondition(new SuppressCondition().setMinNumber(2).setMinRatio(2))));\n \n AnomalyDetectionConfiguration updatedDetectionConfig = metricsAdvisorAdminClient\n     .updateMetricAnomalyDetectionConfig(detectionConfig);\n \n System.out.printf(\"Detection config Id: %s%n\", updatedDetectionConfig.getId());\n System.out.printf(\"Name: %s%n\", updatedDetectionConfig.getName());\n System.out.printf(\"Description: %s%n\", updatedDetectionConfig.getDescription());\n System.out.printf(\"MetricId: %s%n\", updatedDetectionConfig.getMetricId());\n```"
  syntax:
    content: public AnomalyDetectionConfiguration updateMetricAnomalyDetectionConfig(AnomalyDetectionConfiguration detectionConfiguration)
    parameters:
    - id: detectionConfiguration
      type: com.azure.ai.metricsadvisor.models.AnomalyDetectionConfiguration
      description: The anomaly detection configuration.
    return:
      type: com.azure.ai.metricsadvisor.models.AnomalyDetectionConfiguration
      description: The updated <xref uid="com.azure.ai.metricsadvisor.models.AnomalyDetectionConfiguration" data-throw-if-not-resolved="false">AnomalyDetectionConfiguration</xref>.
- uid: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.updateMetricAnomalyDetectionConfigWithResponse(com.azure.ai.metricsadvisor.models.AnomalyDetectionConfiguration,com.azure.core.util.Context)
  id: updateMetricAnomalyDetectionConfigWithResponse(com.azure.ai.metricsadvisor.models.AnomalyDetectionConfiguration,com.azure.core.util.Context)
  artifact: com.azure:azure-ai-metricsadvisor:1.0.0-beta.2
  parent: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient
  langs:
  - java
  name: updateMetricAnomalyDetectionConfigWithResponse(AnomalyDetectionConfiguration detectionConfiguration, Context context)
  nameWithType: MetricsAdvisorAdministrationClient.updateMetricAnomalyDetectionConfigWithResponse(AnomalyDetectionConfiguration detectionConfiguration, Context context)
  fullName: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.updateMetricAnomalyDetectionConfigWithResponse(AnomalyDetectionConfiguration detectionConfiguration, Context context)
  overload: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.updateMetricAnomalyDetectionConfigWithResponse*
  type: Method
  package: com.azure.ai.metricsadvisor.administration
  summary: "Update a configuration to detect anomalies in the time series of a metric.\n\n**Code sample**\n\n```java\nfinal String detectionConfigId = \"7b8069a1-1564-46da-9f50-b5d0dd9129ab\";\n Response<AnomalyDetectionConfiguration> getResponse = metricsAdvisorAdminClient\n     .getMetricAnomalyDetectionConfigWithResponse(detectionConfigId, Context.NONE);\n AnomalyDetectionConfiguration detectionConfig = getResponse.getValue();\n detectionConfig.setName(\"updated config name\");\n detectionConfig.setDescription(\"updated with more detection conditions\");\n DimensionKey seriesGroupKey = new DimensionKey()\n     .put(\"city\", \"Seoul\");\n detectionConfig.addSeriesGroupDetectionCondition(\n     new MetricSeriesGroupDetectionCondition(seriesGroupKey)\n         .setSmartDetectionCondition(new SmartDetectionCondition()\n             .setSensitivity(10.0)\n             .setAnomalyDetectorDirection(AnomalyDetectorDirection.UP)\n             .setSuppressCondition(new SuppressCondition().setMinNumber(2).setMinRatio(2))));\n \n Response<AnomalyDetectionConfiguration> updateResponse = metricsAdvisorAdminClient\n     .updateMetricAnomalyDetectionConfigWithResponse(detectionConfig, Context.NONE);\n \n System.out.printf(\"Response StatusCode: %s%n\", updateResponse.getStatusCode());\n AnomalyDetectionConfiguration updatedDetectionConfig = updateResponse.getValue();\n System.out.printf(\"Detection config Id: %s%n\", updatedDetectionConfig.getId());\n System.out.printf(\"Name: %s%n\", updatedDetectionConfig.getName());\n System.out.printf(\"Description: %s%n\", updatedDetectionConfig.getDescription());\n System.out.printf(\"MetricId: %s%n\", updatedDetectionConfig.getMetricId());\n```"
  syntax:
    content: public Response<AnomalyDetectionConfiguration> updateMetricAnomalyDetectionConfigWithResponse(AnomalyDetectionConfiguration detectionConfiguration, Context context)
    parameters:
    - id: detectionConfiguration
      type: com.azure.ai.metricsadvisor.models.AnomalyDetectionConfiguration
      description: The anomaly detection configuration.
    - id: context
      type: com.azure.core.util.Context
      description: Additional context that is passed through the Http pipeline during the service call.
    return:
      type: com.azure.core.http.rest.Response<com.azure.ai.metricsadvisor.models.AnomalyDetectionConfiguration>
      description: A <xref uid="com.azure.core.http.rest.Response" data-throw-if-not-resolved="false">Response</xref> containing the updated <xref uid="com.azure.ai.metricsadvisor.models.AnomalyDetectionConfiguration" data-throw-if-not-resolved="false">AnomalyDetectionConfiguration</xref>.
references:
- uid: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient
  name: MetricsAdvisorAdministrationAsyncClient
  nameWithType: MetricsAdvisorAdministrationAsyncClient
  fullName: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient
- uid: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.MetricsAdvisorAdministrationClient*
  name: MetricsAdvisorAdministrationClient
  nameWithType: MetricsAdvisorAdministrationClient.MetricsAdvisorAdministrationClient
  fullName: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.MetricsAdvisorAdministrationClient
  package: com.azure.ai.metricsadvisor.administration
- uid: com.azure.ai.metricsadvisor.models.DataFeed
  name: DataFeed
  nameWithType: DataFeed
  fullName: com.azure.ai.metricsadvisor.models.DataFeed
- uid: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.createDataFeed*
  name: createDataFeed
  nameWithType: MetricsAdvisorAdministrationClient.createDataFeed
  fullName: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.createDataFeed
  package: com.azure.ai.metricsadvisor.administration
- uid: com.azure.core.util.Context
  spec.java:
  - uid: com.azure.core.util.Context
    name: Context
    fullName: com.azure.core.util.Context
- uid: com.azure.core.http.rest.Response<com.azure.ai.metricsadvisor.models.DataFeed>
  spec.java:
  - uid: com.azure.core.http.rest.Response
    name: Response
    fullName: com.azure.core.http.rest.Response
  - name: <
    fullName: <
  - uid: com.azure.ai.metricsadvisor.models.DataFeed
    name: DataFeed
    fullName: com.azure.ai.metricsadvisor.models.DataFeed
  - name: '>'
    fullName: '>'
- uid: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.createDataFeedWithResponse*
  name: createDataFeedWithResponse
  nameWithType: MetricsAdvisorAdministrationClient.createDataFeedWithResponse
  fullName: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.createDataFeedWithResponse
  package: com.azure.ai.metricsadvisor.administration
- uid: java.lang.String
  spec.java:
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
- uid: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.getDataFeed*
  name: getDataFeed
  nameWithType: MetricsAdvisorAdministrationClient.getDataFeed
  fullName: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.getDataFeed
  package: com.azure.ai.metricsadvisor.administration
- uid: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.getDataFeedWithResponse*
  name: getDataFeedWithResponse
  nameWithType: MetricsAdvisorAdministrationClient.getDataFeedWithResponse
  fullName: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.getDataFeedWithResponse
  package: com.azure.ai.metricsadvisor.administration
- uid: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.updateDataFeed*
  name: updateDataFeed
  nameWithType: MetricsAdvisorAdministrationClient.updateDataFeed
  fullName: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.updateDataFeed
  package: com.azure.ai.metricsadvisor.administration
- uid: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.updateDataFeedWithResponse*
  name: updateDataFeedWithResponse
  nameWithType: MetricsAdvisorAdministrationClient.updateDataFeedWithResponse
  fullName: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.updateDataFeedWithResponse
  package: com.azure.ai.metricsadvisor.administration
- uid: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.deleteDataFeed*
  name: deleteDataFeed
  nameWithType: MetricsAdvisorAdministrationClient.deleteDataFeed
  fullName: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.deleteDataFeed
  package: com.azure.ai.metricsadvisor.administration
- uid: com.azure.core.http.rest.Response<java.lang.Void>
  spec.java:
  - uid: com.azure.core.http.rest.Response
    name: Response
    fullName: com.azure.core.http.rest.Response
  - name: <
    fullName: <
  - uid: java.lang.Void
    name: Void
    fullName: java.lang.Void
  - name: '>'
    fullName: '>'
- uid: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.deleteDataFeedWithResponse*
  name: deleteDataFeedWithResponse
  nameWithType: MetricsAdvisorAdministrationClient.deleteDataFeedWithResponse
  fullName: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.deleteDataFeedWithResponse
  package: com.azure.ai.metricsadvisor.administration
- uid: com.azure.core.http.rest.PagedIterable<com.azure.ai.metricsadvisor.models.DataFeed>
  spec.java:
  - uid: com.azure.core.http.rest.PagedIterable
    name: PagedIterable
    fullName: com.azure.core.http.rest.PagedIterable
  - name: <
    fullName: <
  - uid: com.azure.ai.metricsadvisor.models.DataFeed
    name: DataFeed
    fullName: com.azure.ai.metricsadvisor.models.DataFeed
  - name: '>'
    fullName: '>'
- uid: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.listDataFeeds*
  name: listDataFeeds
  nameWithType: MetricsAdvisorAdministrationClient.listDataFeeds
  fullName: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.listDataFeeds
  package: com.azure.ai.metricsadvisor.administration
- uid: com.azure.ai.metricsadvisor.models.ListDataFeedOptions
  name: ListDataFeedOptions
  nameWithType: ListDataFeedOptions
  fullName: com.azure.ai.metricsadvisor.models.ListDataFeedOptions
- uid: com.azure.ai.metricsadvisor.models.ListDataFeedIngestionOptions
  name: ListDataFeedIngestionOptions
  nameWithType: ListDataFeedIngestionOptions
  fullName: com.azure.ai.metricsadvisor.models.ListDataFeedIngestionOptions
- uid: com.azure.core.http.rest.PagedIterable<com.azure.ai.metricsadvisor.models.DataFeedIngestionStatus>
  spec.java:
  - uid: com.azure.core.http.rest.PagedIterable
    name: PagedIterable
    fullName: com.azure.core.http.rest.PagedIterable
  - name: <
    fullName: <
  - uid: com.azure.ai.metricsadvisor.models.DataFeedIngestionStatus
    name: DataFeedIngestionStatus
    fullName: com.azure.ai.metricsadvisor.models.DataFeedIngestionStatus
  - name: '>'
    fullName: '>'
- uid: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.listDataFeedIngestionStatus*
  name: listDataFeedIngestionStatus
  nameWithType: MetricsAdvisorAdministrationClient.listDataFeedIngestionStatus
  fullName: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.listDataFeedIngestionStatus
  package: com.azure.ai.metricsadvisor.administration
- uid: java.time.OffsetDateTime
  spec.java:
  - uid: java.time.OffsetDateTime
    name: OffsetDateTime
    fullName: java.time.OffsetDateTime
- uid: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.refreshDataFeedIngestion*
  name: refreshDataFeedIngestion
  nameWithType: MetricsAdvisorAdministrationClient.refreshDataFeedIngestion
  fullName: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.refreshDataFeedIngestion
  package: com.azure.ai.metricsadvisor.administration
- uid: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.refreshDataFeedIngestionWithResponse*
  name: refreshDataFeedIngestionWithResponse
  nameWithType: MetricsAdvisorAdministrationClient.refreshDataFeedIngestionWithResponse
  fullName: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.refreshDataFeedIngestionWithResponse
  package: com.azure.ai.metricsadvisor.administration
- uid: com.azure.ai.metricsadvisor.models.DataFeedIngestionProgress
  name: DataFeedIngestionProgress
  nameWithType: DataFeedIngestionProgress
  fullName: com.azure.ai.metricsadvisor.models.DataFeedIngestionProgress
- uid: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.getDataFeedIngestionProgress*
  name: getDataFeedIngestionProgress
  nameWithType: MetricsAdvisorAdministrationClient.getDataFeedIngestionProgress
  fullName: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.getDataFeedIngestionProgress
  package: com.azure.ai.metricsadvisor.administration
- uid: com.azure.core.http.rest.Response<com.azure.ai.metricsadvisor.models.DataFeedIngestionProgress>
  spec.java:
  - uid: com.azure.core.http.rest.Response
    name: Response
    fullName: com.azure.core.http.rest.Response
  - name: <
    fullName: <
  - uid: com.azure.ai.metricsadvisor.models.DataFeedIngestionProgress
    name: DataFeedIngestionProgress
    fullName: com.azure.ai.metricsadvisor.models.DataFeedIngestionProgress
  - name: '>'
    fullName: '>'
- uid: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.getDataFeedIngestionProgressWithResponse*
  name: getDataFeedIngestionProgressWithResponse
  nameWithType: MetricsAdvisorAdministrationClient.getDataFeedIngestionProgressWithResponse
  fullName: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.getDataFeedIngestionProgressWithResponse
  package: com.azure.ai.metricsadvisor.administration
- uid: com.azure.ai.metricsadvisor.models.AnomalyDetectionConfiguration
  name: AnomalyDetectionConfiguration
  nameWithType: AnomalyDetectionConfiguration
  fullName: com.azure.ai.metricsadvisor.models.AnomalyDetectionConfiguration
- uid: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.createMetricAnomalyDetectionConfig*
  name: createMetricAnomalyDetectionConfig
  nameWithType: MetricsAdvisorAdministrationClient.createMetricAnomalyDetectionConfig
  fullName: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.createMetricAnomalyDetectionConfig
  package: com.azure.ai.metricsadvisor.administration
- uid: com.azure.core.http.rest.Response<com.azure.ai.metricsadvisor.models.AnomalyDetectionConfiguration>
  spec.java:
  - uid: com.azure.core.http.rest.Response
    name: Response
    fullName: com.azure.core.http.rest.Response
  - name: <
    fullName: <
  - uid: com.azure.ai.metricsadvisor.models.AnomalyDetectionConfiguration
    name: AnomalyDetectionConfiguration
    fullName: com.azure.ai.metricsadvisor.models.AnomalyDetectionConfiguration
  - name: '>'
    fullName: '>'
- uid: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.createMetricAnomalyDetectionConfigWithResponse*
  name: createMetricAnomalyDetectionConfigWithResponse
  nameWithType: MetricsAdvisorAdministrationClient.createMetricAnomalyDetectionConfigWithResponse
  fullName: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.createMetricAnomalyDetectionConfigWithResponse
  package: com.azure.ai.metricsadvisor.administration
- uid: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.getMetricAnomalyDetectionConfig*
  name: getMetricAnomalyDetectionConfig
  nameWithType: MetricsAdvisorAdministrationClient.getMetricAnomalyDetectionConfig
  fullName: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.getMetricAnomalyDetectionConfig
  package: com.azure.ai.metricsadvisor.administration
- uid: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.getMetricAnomalyDetectionConfigWithResponse*
  name: getMetricAnomalyDetectionConfigWithResponse
  nameWithType: MetricsAdvisorAdministrationClient.getMetricAnomalyDetectionConfigWithResponse
  fullName: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.getMetricAnomalyDetectionConfigWithResponse
  package: com.azure.ai.metricsadvisor.administration
- uid: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.updateMetricAnomalyDetectionConfig*
  name: updateMetricAnomalyDetectionConfig
  nameWithType: MetricsAdvisorAdministrationClient.updateMetricAnomalyDetectionConfig
  fullName: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.updateMetricAnomalyDetectionConfig
  package: com.azure.ai.metricsadvisor.administration
- uid: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.updateMetricAnomalyDetectionConfigWithResponse*
  name: updateMetricAnomalyDetectionConfigWithResponse
  nameWithType: MetricsAdvisorAdministrationClient.updateMetricAnomalyDetectionConfigWithResponse
  fullName: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.updateMetricAnomalyDetectionConfigWithResponse
  package: com.azure.ai.metricsadvisor.administration
- uid: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.deleteMetricAnomalyDetectionConfig*
  name: deleteMetricAnomalyDetectionConfig
  nameWithType: MetricsAdvisorAdministrationClient.deleteMetricAnomalyDetectionConfig
  fullName: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.deleteMetricAnomalyDetectionConfig
  package: com.azure.ai.metricsadvisor.administration
- uid: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.deleteMetricAnomalyDetectionConfigWithResponse*
  name: deleteMetricAnomalyDetectionConfigWithResponse
  nameWithType: MetricsAdvisorAdministrationClient.deleteMetricAnomalyDetectionConfigWithResponse
  fullName: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.deleteMetricAnomalyDetectionConfigWithResponse
  package: com.azure.ai.metricsadvisor.administration
- uid: com.azure.core.http.rest.PagedIterable<com.azure.ai.metricsadvisor.models.AnomalyDetectionConfiguration>
  spec.java:
  - uid: com.azure.core.http.rest.PagedIterable
    name: PagedIterable
    fullName: com.azure.core.http.rest.PagedIterable
  - name: <
    fullName: <
  - uid: com.azure.ai.metricsadvisor.models.AnomalyDetectionConfiguration
    name: AnomalyDetectionConfiguration
    fullName: com.azure.ai.metricsadvisor.models.AnomalyDetectionConfiguration
  - name: '>'
    fullName: '>'
- uid: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.listMetricAnomalyDetectionConfigs*
  name: listMetricAnomalyDetectionConfigs
  nameWithType: MetricsAdvisorAdministrationClient.listMetricAnomalyDetectionConfigs
  fullName: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.listMetricAnomalyDetectionConfigs
  package: com.azure.ai.metricsadvisor.administration
- uid: com.azure.ai.metricsadvisor.models.NotificationHook
  name: NotificationHook
  nameWithType: NotificationHook
  fullName: com.azure.ai.metricsadvisor.models.NotificationHook
- uid: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.createHook*
  name: createHook
  nameWithType: MetricsAdvisorAdministrationClient.createHook
  fullName: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.createHook
  package: com.azure.ai.metricsadvisor.administration
- uid: com.azure.core.http.rest.Response<com.azure.ai.metricsadvisor.models.NotificationHook>
  spec.java:
  - uid: com.azure.core.http.rest.Response
    name: Response
    fullName: com.azure.core.http.rest.Response
  - name: <
    fullName: <
  - uid: com.azure.ai.metricsadvisor.models.NotificationHook
    name: NotificationHook
    fullName: com.azure.ai.metricsadvisor.models.NotificationHook
  - name: '>'
    fullName: '>'
- uid: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.createHookWithResponse*
  name: createHookWithResponse
  nameWithType: MetricsAdvisorAdministrationClient.createHookWithResponse
  fullName: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.createHookWithResponse
  package: com.azure.ai.metricsadvisor.administration
- uid: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.getHook*
  name: getHook
  nameWithType: MetricsAdvisorAdministrationClient.getHook
  fullName: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.getHook
  package: com.azure.ai.metricsadvisor.administration
- uid: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.getHookWithResponse*
  name: getHookWithResponse
  nameWithType: MetricsAdvisorAdministrationClient.getHookWithResponse
  fullName: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.getHookWithResponse
  package: com.azure.ai.metricsadvisor.administration
- uid: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.updateHook*
  name: updateHook
  nameWithType: MetricsAdvisorAdministrationClient.updateHook
  fullName: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.updateHook
  package: com.azure.ai.metricsadvisor.administration
- uid: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.updateHookWithResponse*
  name: updateHookWithResponse
  nameWithType: MetricsAdvisorAdministrationClient.updateHookWithResponse
  fullName: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.updateHookWithResponse
  package: com.azure.ai.metricsadvisor.administration
- uid: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.deleteHook*
  name: deleteHook
  nameWithType: MetricsAdvisorAdministrationClient.deleteHook
  fullName: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.deleteHook
  package: com.azure.ai.metricsadvisor.administration
- uid: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.deleteHookWithResponse*
  name: deleteHookWithResponse
  nameWithType: MetricsAdvisorAdministrationClient.deleteHookWithResponse
  fullName: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.deleteHookWithResponse
  package: com.azure.ai.metricsadvisor.administration
- uid: com.azure.core.http.rest.PagedIterable<com.azure.ai.metricsadvisor.models.NotificationHook>
  spec.java:
  - uid: com.azure.core.http.rest.PagedIterable
    name: PagedIterable
    fullName: com.azure.core.http.rest.PagedIterable
  - name: <
    fullName: <
  - uid: com.azure.ai.metricsadvisor.models.NotificationHook
    name: NotificationHook
    fullName: com.azure.ai.metricsadvisor.models.NotificationHook
  - name: '>'
    fullName: '>'
- uid: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.listHooks*
  name: listHooks
  nameWithType: MetricsAdvisorAdministrationClient.listHooks
  fullName: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.listHooks
  package: com.azure.ai.metricsadvisor.administration
- uid: com.azure.ai.metricsadvisor.models.ListHookOptions
  name: ListHookOptions
  nameWithType: ListHookOptions
  fullName: com.azure.ai.metricsadvisor.models.ListHookOptions
- uid: com.azure.ai.metricsadvisor.models.AnomalyAlertConfiguration
  name: AnomalyAlertConfiguration
  nameWithType: AnomalyAlertConfiguration
  fullName: com.azure.ai.metricsadvisor.models.AnomalyAlertConfiguration
- uid: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.createAnomalyAlertConfig*
  name: createAnomalyAlertConfig
  nameWithType: MetricsAdvisorAdministrationClient.createAnomalyAlertConfig
  fullName: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.createAnomalyAlertConfig
  package: com.azure.ai.metricsadvisor.administration
- uid: com.azure.core.http.rest.Response<com.azure.ai.metricsadvisor.models.AnomalyAlertConfiguration>
  spec.java:
  - uid: com.azure.core.http.rest.Response
    name: Response
    fullName: com.azure.core.http.rest.Response
  - name: <
    fullName: <
  - uid: com.azure.ai.metricsadvisor.models.AnomalyAlertConfiguration
    name: AnomalyAlertConfiguration
    fullName: com.azure.ai.metricsadvisor.models.AnomalyAlertConfiguration
  - name: '>'
    fullName: '>'
- uid: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.createAnomalyAlertConfigWithResponse*
  name: createAnomalyAlertConfigWithResponse
  nameWithType: MetricsAdvisorAdministrationClient.createAnomalyAlertConfigWithResponse
  fullName: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.createAnomalyAlertConfigWithResponse
  package: com.azure.ai.metricsadvisor.administration
- uid: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.getAnomalyAlertConfig*
  name: getAnomalyAlertConfig
  nameWithType: MetricsAdvisorAdministrationClient.getAnomalyAlertConfig
  fullName: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.getAnomalyAlertConfig
  package: com.azure.ai.metricsadvisor.administration
- uid: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.getAnomalyAlertConfigWithResponse*
  name: getAnomalyAlertConfigWithResponse
  nameWithType: MetricsAdvisorAdministrationClient.getAnomalyAlertConfigWithResponse
  fullName: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.getAnomalyAlertConfigWithResponse
  package: com.azure.ai.metricsadvisor.administration
- uid: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.updateAnomalyAlertConfig*
  name: updateAnomalyAlertConfig
  nameWithType: MetricsAdvisorAdministrationClient.updateAnomalyAlertConfig
  fullName: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.updateAnomalyAlertConfig
  package: com.azure.ai.metricsadvisor.administration
- uid: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.updateAnomalyAlertConfigWithResponse*
  name: updateAnomalyAlertConfigWithResponse
  nameWithType: MetricsAdvisorAdministrationClient.updateAnomalyAlertConfigWithResponse
  fullName: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.updateAnomalyAlertConfigWithResponse
  package: com.azure.ai.metricsadvisor.administration
- uid: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.deleteAnomalyAlertConfig*
  name: deleteAnomalyAlertConfig
  nameWithType: MetricsAdvisorAdministrationClient.deleteAnomalyAlertConfig
  fullName: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.deleteAnomalyAlertConfig
  package: com.azure.ai.metricsadvisor.administration
- uid: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.deleteAnomalyAlertConfigWithResponse*
  name: deleteAnomalyAlertConfigWithResponse
  nameWithType: MetricsAdvisorAdministrationClient.deleteAnomalyAlertConfigWithResponse
  fullName: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.deleteAnomalyAlertConfigWithResponse
  package: com.azure.ai.metricsadvisor.administration
- uid: com.azure.core.http.rest.PagedIterable<com.azure.ai.metricsadvisor.models.AnomalyAlertConfiguration>
  spec.java:
  - uid: com.azure.core.http.rest.PagedIterable
    name: PagedIterable
    fullName: com.azure.core.http.rest.PagedIterable
  - name: <
    fullName: <
  - uid: com.azure.ai.metricsadvisor.models.AnomalyAlertConfiguration
    name: AnomalyAlertConfiguration
    fullName: com.azure.ai.metricsadvisor.models.AnomalyAlertConfiguration
  - name: '>'
    fullName: '>'
- uid: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.listAnomalyAlertConfigs*
  name: listAnomalyAlertConfigs
  nameWithType: MetricsAdvisorAdministrationClient.listAnomalyAlertConfigs
  fullName: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.listAnomalyAlertConfigs
  package: com.azure.ai.metricsadvisor.administration
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: java.lang.Object.finalize()
  name: Object.finalize()
  nameWithType: Object.finalize()
  fullName: java.lang.Object.finalize()
- uid: java.lang.Object.clone()
  name: Object.clone()
  nameWithType: Object.clone()
  fullName: java.lang.Object.clone()
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: java.lang.Object.equals(java.lang.Object)
  name: Object.equals(Object)
  nameWithType: Object.equals(Object)
  fullName: java.lang.Object.equals(java.lang.Object)
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.lang.Object.hashCode()
  name: Object.hashCode()
  nameWithType: Object.hashCode()
  fullName: java.lang.Object.hashCode()
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: java.lang.Object.toString()
  name: Object.toString()
  nameWithType: Object.toString()
  fullName: java.lang.Object.toString()
- uid: com.azure.core.http.rest.Response
  name: Response
  nameWithType: Response
  fullName: com.azure.core.http.rest.Response
- uid: java.lang.Void
  name: Void
  nameWithType: Void
  fullName: java.lang.Void
- uid: com.azure.core.http.rest.PagedIterable
  name: PagedIterable
  nameWithType: PagedIterable
  fullName: com.azure.core.http.rest.PagedIterable
- uid: com.azure.ai.metricsadvisor.models.DataFeedIngestionStatus
  name: DataFeedIngestionStatus
  nameWithType: DataFeedIngestionStatus
  fullName: com.azure.ai.metricsadvisor.models.DataFeedIngestionStatus
