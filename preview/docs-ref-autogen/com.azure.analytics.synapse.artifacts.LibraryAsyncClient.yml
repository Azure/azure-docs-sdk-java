### YamlMime:JavaType
uid: "com.azure.analytics.synapse.artifacts.LibraryAsyncClient"
fullName: "com.azure.analytics.synapse.artifacts.LibraryAsyncClient"
name: "LibraryAsyncClient"
nameWithType: "LibraryAsyncClient"
summary: "Initializes a new instance of the asynchronous Artifacts<wbr>Client type."
inheritances:
- "<xref href=\"java.lang.Object?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
inheritedMembers:
- "java.lang.Object.clone()"
- "java.lang.Object.equals(java.lang.Object)"
- "java.lang.Object.finalize()"
- "java.lang.Object.getClass()"
- "java.lang.Object.hashCode()"
- "java.lang.Object.notify()"
- "java.lang.Object.notifyAll()"
- "java.lang.Object.toString()"
- "java.lang.Object.wait()"
- "java.lang.Object.wait(long)"
- "java.lang.Object.wait(long,int)"
syntax: "public final class LibraryAsyncClient"
methods:
- uid: "com.azure.analytics.synapse.artifacts.LibraryAsyncClient.append(java.lang.String,reactor.core.publisher.Flux<java.nio.ByteBuffer>,long)"
  fullName: "com.azure.analytics.synapse.artifacts.LibraryAsyncClient.append(String libraryName, Flux<ByteBuffer> content, long contentLength)"
  name: "append(String libraryName, Flux<ByteBuffer> content, long contentLength)"
  nameWithType: "LibraryAsyncClient.append(String libraryName, Flux<ByteBuffer> content, long contentLength)"
  summary: "Append the content to the library resource created using the create operation."
  parameters:
  - description: "file name to upload. Minimum length of the filename should be 1 excluding the extension\n     length."
    name: "libraryName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Library file chunk."
    name: "content"
    type: "<xref href=\"reactor.core.publisher.Flux?alt=reactor.core.publisher.Flux&text=Flux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.nio.ByteBuffer?alt=java.nio.ByteBuffer&text=ByteBuffer\" data-throw-if-not-resolved=\"False\" />&gt;"
  - description: "The contentLength parameter."
    name: "contentLength"
    type: "<xref href=\"long?alt=long&text=long\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Void> append(String libraryName, Flux<ByteBuffer> content, long contentLength)"
  desc: "Append the content to the library resource created using the create operation. The maximum content size is 4MiB. Content larger than 4MiB must be appended in 4MiB chunks."
  returns:
    description: "A <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> that completes when a successful response is received."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.analytics.synapse.artifacts.LibraryAsyncClient.append(java.lang.String,reactor.core.publisher.Flux<java.nio.ByteBuffer>,long,java.lang.Long)"
  fullName: "com.azure.analytics.synapse.artifacts.LibraryAsyncClient.append(String libraryName, Flux<ByteBuffer> content, long contentLength, Long blobConditionAppendPosition)"
  name: "append(String libraryName, Flux<ByteBuffer> content, long contentLength, Long blobConditionAppendPosition)"
  nameWithType: "LibraryAsyncClient.append(String libraryName, Flux<ByteBuffer> content, long contentLength, Long blobConditionAppendPosition)"
  summary: "Append the content to the library resource created using the create operation."
  parameters:
  - description: "file name to upload. Minimum length of the filename should be 1 excluding the extension\n     length."
    name: "libraryName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Library file chunk."
    name: "content"
    type: "<xref href=\"reactor.core.publisher.Flux?alt=reactor.core.publisher.Flux&text=Flux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.nio.ByteBuffer?alt=java.nio.ByteBuffer&text=ByteBuffer\" data-throw-if-not-resolved=\"False\" />&gt;"
  - description: "The contentLength parameter."
    name: "contentLength"
    type: "<xref href=\"long?alt=long&text=long\" data-throw-if-not-resolved=\"False\" />"
  - description: "Set this header to a byte offset at which the block is expected to be\n     appended. The request succeeds only if the current offset matches this value. Otherwise, the request fails\n     with the AppendPositionConditionNotMet error (HTTP status code 412 \\u2013 Precondition Failed)."
    name: "blobConditionAppendPosition"
    type: "<xref href=\"java.lang.Long?alt=java.lang.Long&text=Long\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Void> append(String libraryName, Flux<ByteBuffer> content, long contentLength, Long blobConditionAppendPosition)"
  desc: "Append the content to the library resource created using the create operation. The maximum content size is 4MiB. Content larger than 4MiB must be appended in 4MiB chunks."
  returns:
    description: "A <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> that completes when a successful response is received."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.analytics.synapse.artifacts.LibraryAsyncClient.appendWithResponse(java.lang.String,reactor.core.publisher.Flux<java.nio.ByteBuffer>,long,java.lang.Long)"
  fullName: "com.azure.analytics.synapse.artifacts.LibraryAsyncClient.appendWithResponse(String libraryName, Flux<ByteBuffer> content, long contentLength, Long blobConditionAppendPosition)"
  name: "appendWithResponse(String libraryName, Flux<ByteBuffer> content, long contentLength, Long blobConditionAppendPosition)"
  nameWithType: "LibraryAsyncClient.appendWithResponse(String libraryName, Flux<ByteBuffer> content, long contentLength, Long blobConditionAppendPosition)"
  summary: "Append the content to the library resource created using the create operation."
  parameters:
  - description: "file name to upload. Minimum length of the filename should be 1 excluding the extension\n     length."
    name: "libraryName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Library file chunk."
    name: "content"
    type: "<xref href=\"reactor.core.publisher.Flux?alt=reactor.core.publisher.Flux&text=Flux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.nio.ByteBuffer?alt=java.nio.ByteBuffer&text=ByteBuffer\" data-throw-if-not-resolved=\"False\" />&gt;"
  - description: "The contentLength parameter."
    name: "contentLength"
    type: "<xref href=\"long?alt=long&text=long\" data-throw-if-not-resolved=\"False\" />"
  - description: "Set this header to a byte offset at which the block is expected to be\n     appended. The request succeeds only if the current offset matches this value. Otherwise, the request fails\n     with the AppendPositionConditionNotMet error (HTTP status code 412 \\u2013 Precondition Failed)."
    name: "blobConditionAppendPosition"
    type: "<xref href=\"java.lang.Long?alt=java.lang.Long&text=Long\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<Void>> appendWithResponse(String libraryName, Flux<ByteBuffer> content, long contentLength, Long blobConditionAppendPosition)"
  desc: "Append the content to the library resource created using the create operation. The maximum content size is 4MiB. Content larger than 4MiB must be appended in 4MiB chunks."
  returns:
    description: "the <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> on successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.analytics.synapse.artifacts.LibraryAsyncClient.create(java.lang.String)"
  fullName: "com.azure.analytics.synapse.artifacts.LibraryAsyncClient.create(String libraryName)"
  name: "create(String libraryName)"
  nameWithType: "LibraryAsyncClient.create(String libraryName)"
  summary: "Creates a library with the library name."
  parameters:
  - description: "file name to upload. Minimum length of the filename should be 1 excluding the extension\n     length."
    name: "libraryName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<LibraryResourceInfo> create(String libraryName)"
  desc: "Creates a library with the library name."
  returns:
    description: "the response body on successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.analytics.synapse.artifacts.models.LibraryResourceInfo?alt=com.azure.analytics.synapse.artifacts.models.LibraryResourceInfo&text=LibraryResourceInfo\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.analytics.synapse.artifacts.LibraryAsyncClient.createWithResponse(java.lang.String)"
  fullName: "com.azure.analytics.synapse.artifacts.LibraryAsyncClient.createWithResponse(String libraryName)"
  name: "createWithResponse(String libraryName)"
  nameWithType: "LibraryAsyncClient.createWithResponse(String libraryName)"
  summary: "Creates a library with the library name."
  parameters:
  - description: "file name to upload. Minimum length of the filename should be 1 excluding the extension\n     length."
    name: "libraryName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<LibraryResourceInfo>> createWithResponse(String libraryName)"
  desc: "Creates a library with the library name."
  returns:
    description: "the response body along with <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> on successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.analytics.synapse.artifacts.models.LibraryResourceInfo?alt=com.azure.analytics.synapse.artifacts.models.LibraryResourceInfo&text=LibraryResourceInfo\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.analytics.synapse.artifacts.LibraryAsyncClient.delete(java.lang.String)"
  fullName: "com.azure.analytics.synapse.artifacts.LibraryAsyncClient.delete(String libraryName)"
  name: "delete(String libraryName)"
  nameWithType: "LibraryAsyncClient.delete(String libraryName)"
  summary: "Delete Library."
  parameters:
  - description: "file name to upload. Minimum length of the filename should be 1 excluding the extension\n     length."
    name: "libraryName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<LibraryResourceInfo> delete(String libraryName)"
  desc: "Delete Library."
  returns:
    description: "the response body on successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.analytics.synapse.artifacts.models.LibraryResourceInfo?alt=com.azure.analytics.synapse.artifacts.models.LibraryResourceInfo&text=LibraryResourceInfo\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.analytics.synapse.artifacts.LibraryAsyncClient.deleteWithResponse(java.lang.String)"
  fullName: "com.azure.analytics.synapse.artifacts.LibraryAsyncClient.deleteWithResponse(String libraryName)"
  name: "deleteWithResponse(String libraryName)"
  nameWithType: "LibraryAsyncClient.deleteWithResponse(String libraryName)"
  summary: "Delete Library."
  parameters:
  - description: "file name to upload. Minimum length of the filename should be 1 excluding the extension\n     length."
    name: "libraryName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<LibraryResourceInfo>> deleteWithResponse(String libraryName)"
  desc: "Delete Library."
  returns:
    description: "the response body along with <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> on successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.analytics.synapse.artifacts.models.LibraryResourceInfo?alt=com.azure.analytics.synapse.artifacts.models.LibraryResourceInfo&text=LibraryResourceInfo\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.analytics.synapse.artifacts.LibraryAsyncClient.flush(java.lang.String)"
  fullName: "com.azure.analytics.synapse.artifacts.LibraryAsyncClient.flush(String libraryName)"
  name: "flush(String libraryName)"
  nameWithType: "LibraryAsyncClient.flush(String libraryName)"
  summary: "Flush Library."
  parameters:
  - description: "file name to upload. Minimum length of the filename should be 1 excluding the extension\n     length."
    name: "libraryName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<LibraryResourceInfo> flush(String libraryName)"
  desc: "Flush Library."
  returns:
    description: "the response body on successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.analytics.synapse.artifacts.models.LibraryResourceInfo?alt=com.azure.analytics.synapse.artifacts.models.LibraryResourceInfo&text=LibraryResourceInfo\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.analytics.synapse.artifacts.LibraryAsyncClient.flushWithResponse(java.lang.String)"
  fullName: "com.azure.analytics.synapse.artifacts.LibraryAsyncClient.flushWithResponse(String libraryName)"
  name: "flushWithResponse(String libraryName)"
  nameWithType: "LibraryAsyncClient.flushWithResponse(String libraryName)"
  summary: "Flush Library."
  parameters:
  - description: "file name to upload. Minimum length of the filename should be 1 excluding the extension\n     length."
    name: "libraryName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<LibraryResourceInfo>> flushWithResponse(String libraryName)"
  desc: "Flush Library."
  returns:
    description: "the response body along with <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> on successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.analytics.synapse.artifacts.models.LibraryResourceInfo?alt=com.azure.analytics.synapse.artifacts.models.LibraryResourceInfo&text=LibraryResourceInfo\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.analytics.synapse.artifacts.LibraryAsyncClient.get(java.lang.String)"
  fullName: "com.azure.analytics.synapse.artifacts.LibraryAsyncClient.get(String libraryName)"
  name: "get(String libraryName)"
  nameWithType: "LibraryAsyncClient.get(String libraryName)"
  summary: "Get Library."
  parameters:
  - description: "file name to upload. Minimum length of the filename should be 1 excluding the extension\n     length."
    name: "libraryName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<LibraryResource> get(String libraryName)"
  desc: "Get Library."
  returns:
    description: "library on successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.analytics.synapse.artifacts.models.LibraryResource?alt=com.azure.analytics.synapse.artifacts.models.LibraryResource&text=LibraryResource\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.analytics.synapse.artifacts.LibraryAsyncClient.getOperationResult(java.lang.String)"
  fullName: "com.azure.analytics.synapse.artifacts.LibraryAsyncClient.getOperationResult(String operationId)"
  name: "getOperationResult(String operationId)"
  nameWithType: "LibraryAsyncClient.getOperationResult(String operationId)"
  summary: "Get Operation result for Library."
  parameters:
  - description: "operation id for which status is requested."
    name: "operationId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<LibraryResource> getOperationResult(String operationId)"
  desc: "Get Operation result for Library."
  returns:
    description: "operation result for Library on successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.analytics.synapse.artifacts.models.LibraryResource?alt=com.azure.analytics.synapse.artifacts.models.LibraryResource&text=LibraryResource\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.analytics.synapse.artifacts.LibraryAsyncClient.getOperationResultWithResponse(java.lang.String)"
  fullName: "com.azure.analytics.synapse.artifacts.LibraryAsyncClient.getOperationResultWithResponse(String operationId)"
  name: "getOperationResultWithResponse(String operationId)"
  nameWithType: "LibraryAsyncClient.getOperationResultWithResponse(String operationId)"
  summary: "Get Operation result for Library."
  parameters:
  - description: "operation id for which status is requested."
    name: "operationId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<LibraryResource>> getOperationResultWithResponse(String operationId)"
  desc: "Get Operation result for Library."
  returns:
    description: "operation result for Library along with <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> on successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.analytics.synapse.artifacts.models.LibraryResource?alt=com.azure.analytics.synapse.artifacts.models.LibraryResource&text=LibraryResource\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.analytics.synapse.artifacts.LibraryAsyncClient.getWithResponse(java.lang.String)"
  fullName: "com.azure.analytics.synapse.artifacts.LibraryAsyncClient.getWithResponse(String libraryName)"
  name: "getWithResponse(String libraryName)"
  nameWithType: "LibraryAsyncClient.getWithResponse(String libraryName)"
  summary: "Get Library."
  parameters:
  - description: "file name to upload. Minimum length of the filename should be 1 excluding the extension\n     length."
    name: "libraryName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<LibraryResource>> getWithResponse(String libraryName)"
  desc: "Get Library."
  returns:
    description: "library along with <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> on successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.analytics.synapse.artifacts.models.LibraryResource?alt=com.azure.analytics.synapse.artifacts.models.LibraryResource&text=LibraryResource\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.analytics.synapse.artifacts.LibraryAsyncClient.list()"
  fullName: "com.azure.analytics.synapse.artifacts.LibraryAsyncClient.list()"
  name: "list()"
  nameWithType: "LibraryAsyncClient.list()"
  summary: "Lists Library."
  syntax: "public PagedFlux<LibraryResource> list()"
  desc: "Lists Library."
  returns:
    description: "a list of Library resources as paginated response with <xref uid=\"com.azure.core.http.rest.PagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedFlux\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.PagedFlux?alt=com.azure.core.http.rest.PagedFlux&text=PagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.analytics.synapse.artifacts.models.LibraryResource?alt=com.azure.analytics.synapse.artifacts.models.LibraryResource&text=LibraryResource\" data-throw-if-not-resolved=\"False\" />&gt;"
type: "class"
desc: "Initializes a new instance of the asynchronous ArtifactsClient type."
metadata: {}
package: "com.azure.analytics.synapse.artifacts"
artifact: com.azure:azure-analytics-synapse-artifacts:1.0.0-beta.10
