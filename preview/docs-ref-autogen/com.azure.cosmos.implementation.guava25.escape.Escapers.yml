### YamlMime:ManagedReference
items:
- uid: com.azure.cosmos.implementation.guava25.escape.Escapers
  id: Escapers
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.escape
  children:
  - com.azure.cosmos.implementation.guava25.escape.Escapers.Builder
  - com.azure.cosmos.implementation.guava25.escape.Escapers.builder()
  - com.azure.cosmos.implementation.guava25.escape.Escapers.computeReplacement(com.azure.cosmos.implementation.guava25.escape.CharEscaper,char)
  - com.azure.cosmos.implementation.guava25.escape.Escapers.computeReplacement(com.azure.cosmos.implementation.guava25.escape.UnicodeEscaper,int)
  - com.azure.cosmos.implementation.guava25.escape.Escapers.nullEscaper()
  langs:
  - java
  name: Escapers
  nameWithType: Escapers
  fullName: com.azure.cosmos.implementation.guava25.escape.Escapers
  type: Class
  package: com.azure.cosmos.implementation.guava25.escape
  summary: Static utility methods pertaining to <xref uid="com.azure.cosmos.implementation.guava25.escape.Escaper" data-throw-if-not-resolved="false">Escaper</xref> instances.
  syntax:
    content: public final class Escapers
  inheritance:
  - java.lang.Object
  inheritedMembers:
  - java.lang.Object.clone()
  - java.lang.Object.equals(java.lang.Object)
  - java.lang.Object.finalize()
  - java.lang.Object.getClass()
  - java.lang.Object.hashCode()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.toString()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
- uid: com.azure.cosmos.implementation.guava25.escape.Escapers.Escapers()
  id: Escapers()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.escape.Escapers
  langs:
  - java
  name: Escapers()
  nameWithType: Escapers.Escapers()
  fullName: com.azure.cosmos.implementation.guava25.escape.Escapers.Escapers()
  overload: com.azure.cosmos.implementation.guava25.escape.Escapers.Escapers*
  type: Constructor
  package: com.azure.cosmos.implementation.guava25.escape
  syntax:
    content: private Escapers()
- uid: com.azure.cosmos.implementation.guava25.escape.Escapers.builder()
  id: builder()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.escape.Escapers
  langs:
  - java
  name: builder()
  nameWithType: Escapers.builder()
  fullName: com.azure.cosmos.implementation.guava25.escape.Escapers.builder()
  overload: com.azure.cosmos.implementation.guava25.escape.Escapers.builder*
  type: Method
  package: com.azure.cosmos.implementation.guava25.escape
  summary: >-
    Returns a builder for creating simple, fast escapers. A builder instance can be reused and each escaper that is created will be a snapshot of the current builder state. Builders are not thread safe.


    The initial state of the builder is such that:

     *  There are no replacement mappings
     *  `safeMin == Character.MIN_VALUE`
     *  `safeMax == Character.MAX_VALUE`
     *  `unsafeReplacement == null`

    For performance reasons escapers created by this builder are not Unicode aware and will not validate the well-formedness of their input.
  syntax:
    content: public static Escapers.Builder builder()
    return:
      type: com.azure.cosmos.implementation.guava25.escape.Escapers.Builder
- uid: com.azure.cosmos.implementation.guava25.escape.Escapers.computeReplacement(com.azure.cosmos.implementation.guava25.escape.CharEscaper,char)
  id: computeReplacement(com.azure.cosmos.implementation.guava25.escape.CharEscaper,char)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.escape.Escapers
  langs:
  - java
  name: computeReplacement(CharEscaper escaper, char c)
  nameWithType: Escapers.computeReplacement(CharEscaper escaper, char c)
  fullName: com.azure.cosmos.implementation.guava25.escape.Escapers.computeReplacement(CharEscaper escaper, char c)
  overload: com.azure.cosmos.implementation.guava25.escape.Escapers.computeReplacement*
  type: Method
  package: com.azure.cosmos.implementation.guava25.escape
  summary: Returns a string that would replace the given character in the specified escaper, or `null` if no replacement should be made. This method is intended for use in tests through the `EscaperAsserts` class; production users of <xref uid="com.azure.cosmos.implementation.guava25.escape.CharEscaper" data-throw-if-not-resolved="false">CharEscaper</xref> should limit themselves to its public interface.
  syntax:
    content: public static String computeReplacement(CharEscaper escaper, char c)
    parameters:
    - id: escaper
      type: com.azure.cosmos.implementation.guava25.escape.CharEscaper
    - id: c
      type: char
      description: the character to escape if necessary
    return:
      type: java.lang.String
      description: the replacement string, or <code>null</code> if no escaping was needed
- uid: com.azure.cosmos.implementation.guava25.escape.Escapers.computeReplacement(com.azure.cosmos.implementation.guava25.escape.UnicodeEscaper,int)
  id: computeReplacement(com.azure.cosmos.implementation.guava25.escape.UnicodeEscaper,int)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.escape.Escapers
  langs:
  - java
  name: computeReplacement(UnicodeEscaper escaper, int cp)
  nameWithType: Escapers.computeReplacement(UnicodeEscaper escaper, int cp)
  fullName: com.azure.cosmos.implementation.guava25.escape.Escapers.computeReplacement(UnicodeEscaper escaper, int cp)
  overload: com.azure.cosmos.implementation.guava25.escape.Escapers.computeReplacement*
  type: Method
  package: com.azure.cosmos.implementation.guava25.escape
  summary: Returns a string that would replace the given character in the specified escaper, or `null` if no replacement should be made. This method is intended for use in tests through the `EscaperAsserts` class; production users of <xref uid="com.azure.cosmos.implementation.guava25.escape.UnicodeEscaper" data-throw-if-not-resolved="false">UnicodeEscaper</xref> should limit themselves to its public interface.
  syntax:
    content: public static String computeReplacement(UnicodeEscaper escaper, int cp)
    parameters:
    - id: escaper
      type: com.azure.cosmos.implementation.guava25.escape.UnicodeEscaper
    - id: cp
      type: int
      description: the Unicode code point to escape if necessary
    return:
      type: java.lang.String
      description: the replacement string, or <code>null</code> if no escaping was needed
- uid: com.azure.cosmos.implementation.guava25.escape.Escapers.nullEscaper()
  id: nullEscaper()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.escape.Escapers
  langs:
  - java
  name: nullEscaper()
  nameWithType: Escapers.nullEscaper()
  fullName: com.azure.cosmos.implementation.guava25.escape.Escapers.nullEscaper()
  overload: com.azure.cosmos.implementation.guava25.escape.Escapers.nullEscaper*
  type: Method
  package: com.azure.cosmos.implementation.guava25.escape
  summary: Returns an <xref uid="com.azure.cosmos.implementation.guava25.escape.Escaper" data-throw-if-not-resolved="false">Escaper</xref> that does no escaping, passing all character data through unchanged.
  syntax:
    content: public static Escaper nullEscaper()
    return:
      type: com.azure.cosmos.implementation.guava25.escape.Escaper
references:
- uid: com.azure.cosmos.implementation.guava25.escape.Escapers.Escapers*
  name: Escapers
  nameWithType: Escapers.Escapers
  fullName: com.azure.cosmos.implementation.guava25.escape.Escapers.Escapers
  package: com.azure.cosmos.implementation.guava25.escape
- uid: com.azure.cosmos.implementation.guava25.escape.Escaper
  name: Escaper
  nameWithType: Escaper
  fullName: com.azure.cosmos.implementation.guava25.escape.Escaper
- uid: com.azure.cosmos.implementation.guava25.escape.Escapers.nullEscaper*
  name: nullEscaper
  nameWithType: Escapers.nullEscaper
  fullName: com.azure.cosmos.implementation.guava25.escape.Escapers.nullEscaper
  package: com.azure.cosmos.implementation.guava25.escape
- uid: com.azure.cosmos.implementation.guava25.escape.Escapers.Builder
  name: Escapers.Builder
  nameWithType: Escapers.Builder
  fullName: com.azure.cosmos.implementation.guava25.escape.Escapers.Builder
- uid: com.azure.cosmos.implementation.guava25.escape.Escapers.builder*
  name: builder
  nameWithType: Escapers.builder
  fullName: com.azure.cosmos.implementation.guava25.escape.Escapers.builder
  package: com.azure.cosmos.implementation.guava25.escape
- uid: com.azure.cosmos.implementation.guava25.escape.CharEscaper
  name: CharEscaper
  nameWithType: CharEscaper
  fullName: com.azure.cosmos.implementation.guava25.escape.CharEscaper
- uid: char
  spec.java:
  - uid: char
    name: char
    fullName: char
- uid: java.lang.String
  spec.java:
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
- uid: com.azure.cosmos.implementation.guava25.escape.Escapers.computeReplacement*
  name: computeReplacement
  nameWithType: Escapers.computeReplacement
  fullName: com.azure.cosmos.implementation.guava25.escape.Escapers.computeReplacement
  package: com.azure.cosmos.implementation.guava25.escape
- uid: com.azure.cosmos.implementation.guava25.escape.UnicodeEscaper
  name: UnicodeEscaper
  nameWithType: UnicodeEscaper
  fullName: com.azure.cosmos.implementation.guava25.escape.UnicodeEscaper
- uid: int
  spec.java:
  - uid: int
    name: int
    fullName: int
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: java.lang.Object.finalize()
  name: Object.finalize()
  nameWithType: Object.finalize()
  fullName: java.lang.Object.finalize()
- uid: java.lang.Object.clone()
  name: Object.clone()
  nameWithType: Object.clone()
  fullName: java.lang.Object.clone()
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: java.lang.Object.equals(java.lang.Object)
  name: Object.equals(Object)
  nameWithType: Object.equals(Object)
  fullName: java.lang.Object.equals(java.lang.Object)
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.lang.Object.hashCode()
  name: Object.hashCode()
  nameWithType: Object.hashCode()
  fullName: java.lang.Object.hashCode()
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: java.lang.Object.toString()
  name: Object.toString()
  nameWithType: Object.toString()
  fullName: java.lang.Object.toString()
