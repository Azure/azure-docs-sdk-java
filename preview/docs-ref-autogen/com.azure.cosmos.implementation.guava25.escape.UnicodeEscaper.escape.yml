### YamlMime:JavaMember
uid: "com.azure.cosmos.implementation.guava25.escape.UnicodeEscaper.escape*"
fullName: "com.azure.cosmos.implementation.guava25.escape.UnicodeEscaper.escape"
name: "escape"
nameWithType: "UnicodeEscaper.escape"
members:
- uid: "com.azure.cosmos.implementation.guava25.escape.UnicodeEscaper.escape(int)"
  fullName: "com.azure.cosmos.implementation.guava25.escape.UnicodeEscaper.escape(int cp)"
  name: "escape(int cp)"
  nameWithType: "UnicodeEscaper.escape(int cp)"
  summary: "Returns the escaped form of the given Unicode code point, or `null` if this code point does not need to be escaped. When called as part of an escaping operation, the given code point is guaranteed to be in the range `0 <= cp <= Character#MAX_CODE_POINT`.\n\nIf an empty array is returned, this effectively strips the input character from the resulting text.\n\nIf the character does not need to be escaped, this method should return `null`, rather than an array containing the character representation of the code point. This enables the escaping algorithm to perform more efficiently.\n\nIf the implementation of this method cannot correctly handle a particular code point then it should either throw an appropriate runtime exception or return a suitable replacement character. It must never silently discard invalid input as this may constitute a security risk."
  parameters:
  - description: "the Unicode code point to escape if necessary"
    name: "cp"
    type: "<xref href=\"int?alt=int&text=int\" data-throw-if-not-resolved=\"False\" />"
  syntax: "protected abstract char[] escape(int cp)"
  returns:
    description: "the replacement characters, or <code>null</code> if no escaping was needed"
    type: "<xref href=\"char?alt=char&text=char\" data-throw-if-not-resolved=\"False\" />[]"
- uid: "com.azure.cosmos.implementation.guava25.escape.UnicodeEscaper.escape(java.lang.String)"
  fullName: "com.azure.cosmos.implementation.guava25.escape.UnicodeEscaper.escape(String string)"
  name: "escape(String string)"
  nameWithType: "UnicodeEscaper.escape(String string)"
  summary: "Returns the escaped form of a given literal string.\n\nIf you are escaping input in arbitrary successive chunks, then it is not generally safe to use this method. If an input string ends with an unmatched high surrogate character, then this method will throw <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"IllegalArgumentException\"></xref>. You should ensure your input is valid [UTF-16][] before calling this method.\n\n**Note:** When implementing an escaper it is a good idea to override this method for efficiency by inlining the implementation of <xref uid=\"com.azure.cosmos.implementation.guava25.escape.UnicodeEscaper.nextEscapeIndex(java.lang.CharSequence,int,int)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#nextEscapeIndex(CharSequence, int, int)\"></xref> directly. Doing this for <xref uid=\"com.azure.cosmos.implementation.guava25.net.PercentEscaper\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.azure.cosmos.implementation.guava25.net.PercentEscaper\"></xref> more than doubled the performance for unescaped strings (as measured by <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CharEscapersBenchmark\"></xref>).\n\n\n[UTF-16]: http://en.wikipedia.org/wiki/UTF-16"
  overridden: "com.azure.cosmos.implementation.guava25.escape.Escaper.escape(java.lang.String)"
  parameters:
  - description: "the literal string to be escaped"
    name: "string"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public String escape(String string)"
  returns:
    description: "the escaped form of <code>string</code>"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
type: "method"
metadata: {}
package: "com.azure.cosmos.implementation.guava25.escape"
artifact: com.azure:azure-cosmos:4.4.0-beta.1
