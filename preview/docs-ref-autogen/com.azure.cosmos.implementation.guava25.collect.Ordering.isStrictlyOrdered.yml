### YamlMime:JavaMember
uid: "com.azure.cosmos.implementation.guava25.collect.Ordering.isStrictlyOrdered*"
fullName: "com.azure.cosmos.implementation.guava25.collect.Ordering<T>.isStrictlyOrdered"
name: "isStrictlyOrdered"
nameWithType: "Ordering<T>.isStrictlyOrdered"
members:
- uid: "com.azure.cosmos.implementation.guava25.collect.Ordering.isStrictlyOrdered(java.lang.Iterable<? extends T>)"
  fullName: "com.azure.cosmos.implementation.guava25.collect.Ordering<T>.isStrictlyOrdered(Iterable<? extends T> iterable)"
  name: "isStrictlyOrdered(Iterable<? extends T> iterable)"
  nameWithType: "Ordering<T>.isStrictlyOrdered(Iterable<? extends T> iterable)"
  summary: "Returns `true` if each element in `iterable` after the first is *strictly* greater than the element that preceded it, according to this ordering. Note that this is always true when the iterable has fewer than two elements.\n\n**Java 8 users:** Use the equivalent <xref uid=\"Comparators#isInStrictOrder(Iterable,\n Comparator)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Comparators#isInStrictOrder(Iterable,\n Comparator)\"></xref> instead, since the rest of `Ordering` is mostly obsolete (as explained in the class documentation)."
  parameters:
  - name: "iterable"
    type: "<xref href=\"java.lang.Iterable?alt=java.lang.Iterable&text=Iterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"? extends T?alt=? extends T&text=? extends T\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public boolean isStrictlyOrdered(Iterable<? extends T> iterable)"
  returns:
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
type: "method"
metadata: {}
package: "com.azure.cosmos.implementation.guava25.collect"
artifact: com.azure:azure-cosmos:4.4.0-beta.1
