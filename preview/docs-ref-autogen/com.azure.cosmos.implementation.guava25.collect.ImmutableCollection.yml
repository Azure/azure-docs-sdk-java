### YamlMime:ManagedReference
items:
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection
  id: ImmutableCollection
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect
  children:
  - com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.<T>toArray(T[])
  - com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.Builder
  - com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.add(E)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.addAll(java.util.Collection<? extends E>)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.asList()
  - com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.clear()
  - com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.contains(java.lang.Object)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.iterator()
  - com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.remove(java.lang.Object)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.removeAll(java.util.Collection<?>)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.removeIf(java.util.function.Predicate<? super E>)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.retainAll(java.util.Collection<?>)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.spliterator()
  - com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.toArray()
  langs:
  - java
  name: ImmutableCollection<E>
  nameWithType: ImmutableCollection<E>
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection<E>
  type: Class
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    A <xref uid="java.util.Collection" data-throw-if-not-resolved="false">Collection</xref> whose contents will never change, and which offers a few additional guarantees detailed below.


    **Warning:** avoid *direct* usage of <xref uid="com.azure.cosmos.implementation.guava25.collect.ImmutableCollection" data-throw-if-not-resolved="false">ImmutableCollection</xref> as a type (just as with <xref uid="java.util.Collection" data-throw-if-not-resolved="false">Collection</xref> itself). Prefer subtypes such as <xref uid="com.azure.cosmos.implementation.guava25.collect.ImmutableSet" data-throw-if-not-resolved="false">ImmutableSet</xref> or <xref uid="com.azure.cosmos.implementation.guava25.collect.ImmutableList" data-throw-if-not-resolved="false">ImmutableList</xref>, which have well-defined <xref uid="com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.equals" data-throw-if-not-resolved="false">#equals</xref> semantics, thus avoiding a common source of bugs and confusion.


    ### About *all* `Immutable-` collections ###


    The remainder of this documentation applies to every public `Immutable-` type in this package, whether it is a subtype of `ImmutableCollection` or not.


    #### Guarantees ####


    Each makes the following guarantees:

     *  **Shallow immutability.** Elements can never be added, removed or replaced in this collection. This is a stronger guarantee than that of <xref uid="" data-throw-if-not-resolved="false">Collections#unmodifiableCollection</xref>, whose contents change whenever the wrapped collection is modified.
     *  **Null-hostility.** This collection will never contain a null element.
     *  **Deterministic iteration.** The iteration order is always well-defined, depending on how the collection was created. Typically this is insertion order unless an explicit ordering is otherwise specified (e.g. <xref uid="com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.naturalOrder" data-throw-if-not-resolved="false">ImmutableSortedSet#naturalOrder</xref>). See the appropriate factory method for details. View collections such as <xref uid="com.azure.cosmos.implementation.guava25.collect.ImmutableMultiset.elementSet" data-throw-if-not-resolved="false">ImmutableMultiset#elementSet</xref> iterate in the same order as the parent, except as noted.
     *  **Thread safety.** It is safe to access this collection concurrently from multiple threads.
     *  **Integrity.** This type cannot be subclassed outside this package (which would allow these guarantees to be violated).

    #### "Interfaces", not implementations ####


    These are classes instead of interfaces to prevent external subtyping, but should be thought of as interfaces in every important sense. Each public class such as <xref uid="com.azure.cosmos.implementation.guava25.collect.ImmutableSet" data-throw-if-not-resolved="false">ImmutableSet</xref> is a *type* offering meaningful behavioral guarantees. This is substantially different from the case of (say) <xref uid="java.util.HashSet" data-throw-if-not-resolved="false">HashSet</xref>, which is an *implementation*, with semantics that were largely defined by its supertype.


    For field types and method return types, you should generally use the immutable type (such as <xref uid="com.azure.cosmos.implementation.guava25.collect.ImmutableList" data-throw-if-not-resolved="false">ImmutableList</xref>) instead of the general collection interface type (such as <xref uid="java.util.List" data-throw-if-not-resolved="false">List</xref>). This communicates to your callers all of the semantic guarantees listed above, which is almost always very useful information.


    On the other hand, a *parameter* type of <xref uid="com.azure.cosmos.implementation.guava25.collect.ImmutableList" data-throw-if-not-resolved="false">ImmutableList</xref> is generally a nuisance to callers. Instead, accept <xref uid="java.lang.Iterable" data-throw-if-not-resolved="false">Iterable</xref> and have your method or constructor body pass it to the appropriate `copyOf` method itself.


    Expressing the immutability guarantee directly in the type that user code references is a powerful advantage. Although Java 9 offers certain immutable collection factory methods, like [`Set.of`][Set.of], we recommend continuing to use these immutable collection classes for this reason.


    #### Creation ####


    Except for logically "abstract" types like `ImmutableCollection` itself, each `Immutable` type provides the static operations you need to obtain instances of that type. These usually include:

     *  Static methods named `of`, accepting an explicit list of elements or entries.
     *  Static methods named `copyOf` (or `copyOfSorted`), accepting an existing collection whose contents should be copied.
     *  A static nested `Builder` class which can be used to populate a new immutable instance.

    #### Warnings ####

     *  **Warning:** as with any collection, it is almost always a bad idea to modify an element (in a way that affects its <xref uid="java.lang.Object.equals" data-throw-if-not-resolved="false">Object#equals</xref> behavior) while it is contained in a collection. Undefined behavior and bugs will result. It's generally best to avoid using mutable objects as elements at all, as many users may expect your "immutable" object to be *deeply* immutable.

    #### Performance notes ####

     *  Implementations can be generally assumed to prioritize memory efficiency, then speed of access, and lastly speed of creation.
     *  The `copyOf` methods will sometimes recognize that the actual copy operation is unnecessary; for example, `copyOf(copyOf(anArrayList))` should copy the data only once. This reduces the expense of habitually making defensive copies at API boundaries. However, the precise conditions for skipping the copy operation are undefined.
     *  **Warning:** a view collection such as <xref uid="com.azure.cosmos.implementation.guava25.collect.ImmutableMap.keySet" data-throw-if-not-resolved="false">ImmutableMap#keySet</xref> or <xref uid="com.azure.cosmos.implementation.guava25.collect.ImmutableList.subList" data-throw-if-not-resolved="false">ImmutableList#subList</xref> may retain a reference to the entire data set, preventing it from being garbage collected. If some of the data is no longer reachable through other means, this constitutes a memory leak. Pass the view collection to the appropriate `copyOf` method to obtain a correctly-sized copy.
     *  The performance of using the associated `Builder` class can be assumed to be no worse, and possibly better, than creating a mutable collection and copying it.
     *  Implementations generally do not cache hash codes. If your element or key type has a slow `hashCode` implementation, it should cache it itself.

    #### Example usage ####


    ```java

    class Foo {
       private static final ImmutableSet RESERVED_CODES =
           ImmutableSet.of("AZ", "CQ", "ZX");

       private final ImmutableSet codes;

       public Foo(Iterable codes) {
         this.codes = ImmutableSet.copyOf(codes);
         checkArgument(Collections.disjoint(this.codes, RESERVED_CODES));
       }
     }
    ```


    ### See also ###


    See the Guava User Guide article on [ immutable collections][immutable collections].



    [Set.of]: https://docs.oracle.com/javase/9/docs/api/java/util/Set.html#immutable

    [immutable collections]: https://github.com/google/guava/wiki/ImmutableCollectionsExplained
  syntax:
    content: public abstract class ImmutableCollection<E> extends AbstractCollection<E> implements Serializable
    typeParameters:
    - id: E
  inheritance:
  - java.lang.Object
  - java.util.AbstractCollection
  implements:
  - java.io.Serializable
  inheritedMembers:
  - java.lang.Object.clone()
  - java.lang.Object.equals(java.lang.Object)
  - java.lang.Object.finalize()
  - java.lang.Object.getClass()
  - java.lang.Object.hashCode()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
  - java.util.AbstractCollection.<T>toArray(T[])
  - java.util.AbstractCollection.add(E)
  - java.util.AbstractCollection.addAll(java.util.Collection<? extends E>)
  - java.util.AbstractCollection.clear()
  - java.util.AbstractCollection.contains(java.lang.Object)
  - java.util.AbstractCollection.containsAll(java.util.Collection<?>)
  - java.util.AbstractCollection.isEmpty()
  - java.util.AbstractCollection.iterator()
  - java.util.AbstractCollection.remove(java.lang.Object)
  - java.util.AbstractCollection.removeAll(java.util.Collection<?>)
  - java.util.AbstractCollection.retainAll(java.util.Collection<?>)
  - java.util.AbstractCollection.size()
  - java.util.AbstractCollection.toArray()
  - java.util.AbstractCollection.toString()
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.<T>toArray(T[])
  id: <T>toArray(T[])
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection
  langs:
  - java
  name: <T>toArray(T[] other)
  nameWithType: ImmutableCollection<E>.<T>toArray(T[] other)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection<E>.<T>toArray(T[] other)
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.toArray*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  syntax:
    content: public final T[] <T>toArray(T[] other)
    parameters:
    - id: other
      type: T[]
    return:
      type: T[]
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.ImmutableCollection()
  id: ImmutableCollection()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection
  langs:
  - java
  name: ImmutableCollection()
  nameWithType: ImmutableCollection<E>.ImmutableCollection()
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection<E>.ImmutableCollection()
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.ImmutableCollection*
  type: Constructor
  package: com.azure.cosmos.implementation.guava25.collect
  syntax:
    content: " ImmutableCollection()"
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.add(E)
  id: add(E)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection
  langs:
  - java
  name: add(E e)
  nameWithType: ImmutableCollection<E>.add(E e)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection<E>.add(E e)
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.add*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Guaranteed to throw an exception and leave the collection unmodified.
  syntax:
    content: public final boolean add(E e)
    parameters:
    - id: e
      type: E
    return:
      type: boolean
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.addAll(java.util.Collection<? extends E>)
  id: addAll(java.util.Collection<? extends E>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection
  langs:
  - java
  name: addAll(Collection<? extends E> newElements)
  nameWithType: ImmutableCollection<E>.addAll(Collection<? extends E> newElements)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection<E>.addAll(Collection<? extends E> newElements)
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.addAll*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Guaranteed to throw an exception and leave the collection unmodified.
  syntax:
    content: public final boolean addAll(Collection<? extends E> newElements)
    parameters:
    - id: newElements
      type: java.util.Collection<? extends E>
    return:
      type: boolean
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.asList()
  id: asList()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection
  langs:
  - java
  name: asList()
  nameWithType: ImmutableCollection<E>.asList()
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection<E>.asList()
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.asList*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Returns an `ImmutableList` containing the same elements, in the same order, as this collection.


    **Performance note:** in most cases this method can return quickly without actually copying anything. The exact circumstances under which the copy is performed are undefined and subject to change.
  syntax:
    content: public ImmutableList<E> asList()
    return:
      type: com.azure.cosmos.implementation.guava25.collect.ImmutableList<E>
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.clear()
  id: clear()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection
  langs:
  - java
  name: clear()
  nameWithType: ImmutableCollection<E>.clear()
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection<E>.clear()
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.clear*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Guaranteed to throw an exception and leave the collection unmodified.
  syntax:
    content: public final void clear()
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.contains(java.lang.Object)
  id: contains(java.lang.Object)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection
  langs:
  - java
  name: contains(Object object)
  nameWithType: ImmutableCollection<E>.contains(Object object)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection<E>.contains(Object object)
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.contains*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  syntax:
    content: public abstract boolean contains(Object object)
    parameters:
    - id: object
      type: java.lang.Object
    return:
      type: boolean
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.iterator()
  id: iterator()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection
  langs:
  - java
  name: iterator()
  nameWithType: ImmutableCollection<E>.iterator()
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection<E>.iterator()
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.iterator*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Returns an unmodifiable iterator across the elements in this collection.
  syntax:
    content: public abstract UnmodifiableIterator<E> iterator()
    return:
      type: com.azure.cosmos.implementation.guava25.collect.UnmodifiableIterator<E>
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.remove(java.lang.Object)
  id: remove(java.lang.Object)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection
  langs:
  - java
  name: remove(Object object)
  nameWithType: ImmutableCollection<E>.remove(Object object)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection<E>.remove(Object object)
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.remove*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Guaranteed to throw an exception and leave the collection unmodified.
  syntax:
    content: public final boolean remove(Object object)
    parameters:
    - id: object
      type: java.lang.Object
    return:
      type: boolean
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.removeAll(java.util.Collection<?>)
  id: removeAll(java.util.Collection<?>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection
  langs:
  - java
  name: removeAll(Collection<?> oldElements)
  nameWithType: ImmutableCollection<E>.removeAll(Collection<?> oldElements)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection<E>.removeAll(Collection<?> oldElements)
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.removeAll*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Guaranteed to throw an exception and leave the collection unmodified.
  syntax:
    content: public final boolean removeAll(Collection<?> oldElements)
    parameters:
    - id: oldElements
      type: java.util.Collection<?>
    return:
      type: boolean
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.removeIf(java.util.function.Predicate<? super E>)
  id: removeIf(java.util.function.Predicate<? super E>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection
  langs:
  - java
  name: removeIf(Predicate<? super E> filter)
  nameWithType: ImmutableCollection<E>.removeIf(Predicate<? super E> filter)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection<E>.removeIf(Predicate<? super E> filter)
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.removeIf*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Guaranteed to throw an exception and leave the collection unmodified.
  syntax:
    content: public final boolean removeIf(Predicate<? super E> filter)
    parameters:
    - id: filter
      type: java.util.function.Predicate<? super E>
    return:
      type: boolean
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.retainAll(java.util.Collection<?>)
  id: retainAll(java.util.Collection<?>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection
  langs:
  - java
  name: retainAll(Collection<?> elementsToKeep)
  nameWithType: ImmutableCollection<E>.retainAll(Collection<?> elementsToKeep)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection<E>.retainAll(Collection<?> elementsToKeep)
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.retainAll*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Guaranteed to throw an exception and leave the collection unmodified.
  syntax:
    content: public final boolean retainAll(Collection<?> elementsToKeep)
    parameters:
    - id: elementsToKeep
      type: java.util.Collection<?>
    return:
      type: boolean
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.spliterator()
  id: spliterator()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection
  langs:
  - java
  name: spliterator()
  nameWithType: ImmutableCollection<E>.spliterator()
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection<E>.spliterator()
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.spliterator*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  syntax:
    content: public Spliterator<E> spliterator()
    return:
      type: java.util.Spliterator<E>
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.toArray()
  id: toArray()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection
  langs:
  - java
  name: toArray()
  nameWithType: ImmutableCollection<E>.toArray()
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection<E>.toArray()
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.toArray*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  syntax:
    content: public final Object[] toArray()
    return:
      type: java.lang.Object[]
references:
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.ImmutableCollection*
  name: ImmutableCollection
  nameWithType: ImmutableCollection<E>.ImmutableCollection
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection<E>.ImmutableCollection
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.UnmodifiableIterator<E>
  spec.java:
  - uid: com.azure.cosmos.implementation.guava25.collect.UnmodifiableIterator
    name: UnmodifiableIterator
    fullName: com.azure.cosmos.implementation.guava25.collect.UnmodifiableIterator
  - name: <
    fullName: <
  - uid: E
    name: E
    fullName: E
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.iterator*
  name: iterator
  nameWithType: ImmutableCollection<E>.iterator
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection<E>.iterator
  package: com.azure.cosmos.implementation.guava25.collect
- uid: java.util.Spliterator<E>
  spec.java:
  - uid: java.util.Spliterator
    name: Spliterator
    fullName: java.util.Spliterator
  - name: <
    fullName: <
  - uid: E
    name: E
    fullName: E
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.spliterator*
  name: spliterator
  nameWithType: ImmutableCollection<E>.spliterator
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection<E>.spliterator
  package: com.azure.cosmos.implementation.guava25.collect
- uid: java.lang.Object[]
  spec.java:
  - uid: java.lang.Object
    name: Object
    fullName: java.lang.Object
  - name: '[]'
    fullName: '[]'
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.toArray*
  name: toArray
  nameWithType: ImmutableCollection<E>.toArray
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection<E>.toArray
  package: com.azure.cosmos.implementation.guava25.collect
- uid: T[]
  spec.java:
  - uid: T
    name: T
    fullName: T
  - name: '[]'
    fullName: '[]'
- uid: java.lang.Object
  spec.java:
  - uid: java.lang.Object
    name: Object
    fullName: java.lang.Object
- uid: boolean
  spec.java:
  - uid: boolean
    name: boolean
    fullName: boolean
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.contains*
  name: contains
  nameWithType: ImmutableCollection<E>.contains
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection<E>.contains
  package: com.azure.cosmos.implementation.guava25.collect
- uid: E
  spec.java:
  - uid: E
    name: E
    fullName: E
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.add*
  name: add
  nameWithType: ImmutableCollection<E>.add
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection<E>.add
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.remove*
  name: remove
  nameWithType: ImmutableCollection<E>.remove
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection<E>.remove
  package: com.azure.cosmos.implementation.guava25.collect
- uid: java.util.Collection<? extends E>
  spec.java:
  - uid: java.util.Collection
    name: Collection
    fullName: java.util.Collection
  - name: <
    fullName: <
  - uid: '? extends E'
    name: '? extends E'
    fullName: '? extends E'
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.addAll*
  name: addAll
  nameWithType: ImmutableCollection<E>.addAll
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection<E>.addAll
  package: com.azure.cosmos.implementation.guava25.collect
- uid: java.util.Collection<?>
  spec.java:
  - uid: java.util.Collection
    name: Collection
    fullName: java.util.Collection
  - name: <
    fullName: <
  - uid: '?'
    name: '?'
    fullName: '?'
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.removeAll*
  name: removeAll
  nameWithType: ImmutableCollection<E>.removeAll
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection<E>.removeAll
  package: com.azure.cosmos.implementation.guava25.collect
- uid: java.util.function.Predicate<? super E>
  spec.java:
  - uid: java.util.function.Predicate
    name: Predicate
    fullName: java.util.function.Predicate
  - name: <
    fullName: <
  - uid: '? super E'
    name: '? super E'
    fullName: '? super E'
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.removeIf*
  name: removeIf
  nameWithType: ImmutableCollection<E>.removeIf
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection<E>.removeIf
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.retainAll*
  name: retainAll
  nameWithType: ImmutableCollection<E>.retainAll
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection<E>.retainAll
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.clear*
  name: clear
  nameWithType: ImmutableCollection<E>.clear
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection<E>.clear
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableList<E>
  spec.java:
  - uid: com.azure.cosmos.implementation.guava25.collect.ImmutableList
    name: ImmutableList
    fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableList
  - name: <
    fullName: <
  - uid: E
    name: E
    fullName: E
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.asList*
  name: asList
  nameWithType: ImmutableCollection<E>.asList
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection<E>.asList
  package: com.azure.cosmos.implementation.guava25.collect
- uid: java.util.AbstractCollection<E>
  name: AbstractCollection<E>
  nameWithType: AbstractCollection<E>
  fullName: java.util.AbstractCollection<E>
- uid: java.io.Serializable
  name: Serializable
  nameWithType: Serializable
  fullName: java.io.Serializable
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: java.util.AbstractCollection.contains(java.lang.Object)
  name: AbstractCollection.contains(Object)
  nameWithType: AbstractCollection.contains(Object)
  fullName: java.util.AbstractCollection.contains(java.lang.Object)
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: java.util.AbstractCollection.toArray()
  name: AbstractCollection.toArray()
  nameWithType: AbstractCollection.toArray()
  fullName: java.util.AbstractCollection.toArray()
- uid: java.lang.Object.finalize()
  name: Object.finalize()
  nameWithType: Object.finalize()
  fullName: java.lang.Object.finalize()
- uid: java.util.AbstractCollection.iterator()
  name: AbstractCollection.iterator()
  nameWithType: AbstractCollection.iterator()
  fullName: java.util.AbstractCollection.iterator()
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: java.lang.Object.clone()
  name: Object.clone()
  nameWithType: Object.clone()
  fullName: java.lang.Object.clone()
- uid: java.lang.Object.equals(java.lang.Object)
  name: Object.equals(Object)
  nameWithType: Object.equals(Object)
  fullName: java.lang.Object.equals(java.lang.Object)
- uid: java.util.AbstractCollection.add(E)
  name: AbstractCollection.add(E)
  nameWithType: AbstractCollection.add(E)
  fullName: java.util.AbstractCollection.add(E)
- uid: java.util.AbstractCollection.size()
  name: AbstractCollection.size()
  nameWithType: AbstractCollection.size()
  fullName: java.util.AbstractCollection.size()
- uid: java.util.AbstractCollection.containsAll(java.util.Collection<?>)
  name: AbstractCollection.containsAll(Collection<?>)
  nameWithType: AbstractCollection.containsAll(Collection<?>)
  fullName: java.util.AbstractCollection.containsAll(java.util.Collection<?>)
- uid: java.util.AbstractCollection.isEmpty()
  name: AbstractCollection.isEmpty()
  nameWithType: AbstractCollection.isEmpty()
  fullName: java.util.AbstractCollection.isEmpty()
- uid: java.util.AbstractCollection.toString()
  name: AbstractCollection.toString()
  nameWithType: AbstractCollection.toString()
  fullName: java.util.AbstractCollection.toString()
- uid: java.util.AbstractCollection.clear()
  name: AbstractCollection.clear()
  nameWithType: AbstractCollection.clear()
  fullName: java.util.AbstractCollection.clear()
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.util.AbstractCollection.removeAll(java.util.Collection<?>)
  name: AbstractCollection.removeAll(Collection<?>)
  nameWithType: AbstractCollection.removeAll(Collection<?>)
  fullName: java.util.AbstractCollection.removeAll(java.util.Collection<?>)
- uid: java.util.AbstractCollection.retainAll(java.util.Collection<?>)
  name: AbstractCollection.retainAll(Collection<?>)
  nameWithType: AbstractCollection.retainAll(Collection<?>)
  fullName: java.util.AbstractCollection.retainAll(java.util.Collection<?>)
- uid: java.lang.Object.hashCode()
  name: Object.hashCode()
  nameWithType: Object.hashCode()
  fullName: java.lang.Object.hashCode()
- uid: java.util.AbstractCollection.addAll(java.util.Collection<? extends E>)
  name: AbstractCollection.addAll(Collection<? extends E>)
  nameWithType: AbstractCollection.addAll(Collection<? extends E>)
  fullName: java.util.AbstractCollection.addAll(java.util.Collection<? extends E>)
- uid: java.util.AbstractCollection.<T>toArray(T[])
  name: AbstractCollection.<T>toArray(T[])
  nameWithType: AbstractCollection.<T>toArray(T[])
  fullName: java.util.AbstractCollection.<T>toArray(T[])
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: java.util.AbstractCollection.remove(java.lang.Object)
  name: AbstractCollection.remove(Object)
  nameWithType: AbstractCollection.remove(Object)
  fullName: java.util.AbstractCollection.remove(java.lang.Object)
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.Builder
  name: ImmutableCollection.Builder<E>
  nameWithType: ImmutableCollection.Builder<E>
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.Builder<E>
- uid: com.azure.cosmos.implementation.guava25.collect.UnmodifiableIterator
  name: UnmodifiableIterator
  nameWithType: UnmodifiableIterator
  fullName: com.azure.cosmos.implementation.guava25.collect.UnmodifiableIterator
- uid: java.util.Spliterator
  name: Spliterator
  nameWithType: Spliterator
  fullName: java.util.Spliterator
- uid: '? extends E'
  name: '? extends E'
  nameWithType: '? extends E'
  fullName: '? extends E'
- uid: java.util.Collection
  name: Collection
  nameWithType: Collection
  fullName: java.util.Collection
- uid: '?'
  name: '?'
  nameWithType: '?'
  fullName: '?'
- uid: '? super E'
  name: '? super E'
  nameWithType: '? super E'
  fullName: '? super E'
- uid: java.util.function.Predicate
  name: Predicate
  nameWithType: Predicate
  fullName: java.util.function.Predicate
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableList
  name: ImmutableList
  nameWithType: ImmutableList
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableList
- uid: java.util.AbstractCollection
  name: AbstractCollection
  nameWithType: AbstractCollection
  fullName: java.util.AbstractCollection
- uid: ?>)
  name: ?>)
  nameWithType: ?>)
  fullName: ?>)
- uid: java.util.AbstractCollection.containsAll(java.util.Collection
  name: AbstractCollection.containsAll(Collection
  nameWithType: AbstractCollection.containsAll(Collection
  fullName: java.util.AbstractCollection.containsAll(java.util.Collection
- uid: java.util.AbstractCollection.removeAll(java.util.Collection
  name: AbstractCollection.removeAll(Collection
  nameWithType: AbstractCollection.removeAll(Collection
  fullName: java.util.AbstractCollection.removeAll(java.util.Collection
- uid: java.util.AbstractCollection.retainAll(java.util.Collection
  name: AbstractCollection.retainAll(Collection
  nameWithType: AbstractCollection.retainAll(Collection
  fullName: java.util.AbstractCollection.retainAll(java.util.Collection
- uid: '? extends E>)'
  name: '? extends E>)'
  nameWithType: '? extends E>)'
  fullName: '? extends E>)'
- uid: java.util.AbstractCollection.addAll(java.util.Collection
  name: AbstractCollection.addAll(Collection
  nameWithType: AbstractCollection.addAll(Collection
  fullName: java.util.AbstractCollection.addAll(java.util.Collection
- uid: T>toArray(T[])
  name: T>toArray(T[])
  nameWithType: T>toArray(T[])
  fullName: T>toArray(T[])
- uid: java.util.AbstractCollection.
  name: AbstractCollection.
  nameWithType: AbstractCollection.
  fullName: java.util.AbstractCollection.
