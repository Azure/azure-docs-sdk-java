### YamlMime:ManagedReference
items:
- uid: com.azure.cosmos.implementation.guava25.base.Predicate
  id: Predicate
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.base
  children:
  - com.azure.cosmos.implementation.guava25.base.Predicate.apply(T)
  - com.azure.cosmos.implementation.guava25.base.Predicate.equals(java.lang.Object)
  - com.azure.cosmos.implementation.guava25.base.Predicate.test(T)
  langs:
  - java
  name: Predicate<T>
  nameWithType: Predicate<T>
  fullName: com.azure.cosmos.implementation.guava25.base.Predicate<T>
  type: Interface
  package: com.azure.cosmos.implementation.guava25.base
  summary: >-
    Legacy version of <xref uid="java.util.function.Predicate" data-throw-if-not-resolved="false">java.util.function.Predicate</xref>. Determines a true or false value for a given input.


    As this interface extends `java.util.function.Predicate`, an instance of this type may be used as a `Predicate` directly. To use a `java.util.function.Predicate` where a `com.google.common.base.Predicate` is expected, use the method reference `predicate::test`.


    This interface is now a legacy type. Use `java.util.function.Predicate` (or the appropriate primitive specialization such as `IntPredicate`) instead whenever possible. Otherwise, at least reduce *explicit* dependencies on this type by using lambda expressions or method references instead of classes, leaving your code easier to migrate in the future.


    The <xref uid="com.azure.cosmos.implementation.guava25.base.Predicates" data-throw-if-not-resolved="false">Predicates</xref> class provides common predicates and related utilities.


    See the Guava User Guide article on [the use of `Predicate`][the use of _Predicate].



    [the use of _Predicate]: https://github.com/google/guava/wiki/FunctionalExplained
  syntax:
    content: public interface Predicate<T> extends Predicate<T>
    typeParameters:
    - id: T
  implements:
  - java.util.function.Predicate<T>
- uid: com.azure.cosmos.implementation.guava25.base.Predicate.apply(T)
  id: apply(T)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.base.Predicate
  langs:
  - java
  name: apply(T input)
  nameWithType: Predicate<T>.apply(T input)
  fullName: com.azure.cosmos.implementation.guava25.base.Predicate<T>.apply(T input)
  overload: com.azure.cosmos.implementation.guava25.base.Predicate.apply*
  type: Method
  package: com.azure.cosmos.implementation.guava25.base
  summary: >-
    Returns the result of applying this predicate to `input` (Java 8 users, see notes in the class documentation above). This method is *generally expected*, but not absolutely required, to have the following properties:

     *  Its execution does not cause any observable side effects.
     *  The computation is *consistent with equals*; that is, <xref uid="com.azure.cosmos.implementation.guava25.base.Objects.equal*" data-throw-if-not-resolved="false">Objects.equal</xref>`(a, b)` implies that `predicate.apply(a) == predicate.apply(b))`.
  syntax:
    content: public abstract boolean apply(T input)
    parameters:
    - id: input
      type: T
    return:
      type: boolean
- uid: com.azure.cosmos.implementation.guava25.base.Predicate.equals(java.lang.Object)
  id: equals(java.lang.Object)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.base.Predicate
  langs:
  - java
  name: equals(Object object)
  nameWithType: Predicate<T>.equals(Object object)
  fullName: com.azure.cosmos.implementation.guava25.base.Predicate<T>.equals(Object object)
  overload: com.azure.cosmos.implementation.guava25.base.Predicate.equals*
  type: Method
  package: com.azure.cosmos.implementation.guava25.base
  summary: >-
    Indicates whether another object is equal to this predicate.


    Most implementations will have no reason to override the behavior of <xref uid="java.lang.Object.equals" data-throw-if-not-resolved="false">Object#equals</xref>. However, an implementation may also choose to return `true` whenever `object` is a <xref uid="java.util.function.Predicate" data-throw-if-not-resolved="false">Predicate</xref> that it considers *interchangeable* with this one. "Interchangeable" *typically* means that `this.apply(t) == that.apply(t)` for all `t` of type `T`). Note that a `false` result from this method does not imply that the predicates are known *not* to be interchangeable.
  syntax:
    content: public abstract boolean equals(Object object)
    parameters:
    - id: object
      type: java.lang.Object
    return:
      type: boolean
- uid: com.azure.cosmos.implementation.guava25.base.Predicate.test(T)
  id: test(T)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.base.Predicate
  langs:
  - java
  name: test(T input)
  nameWithType: Predicate<T>.test(T input)
  fullName: com.azure.cosmos.implementation.guava25.base.Predicate<T>.test(T input)
  overload: com.azure.cosmos.implementation.guava25.base.Predicate.test*
  type: Method
  package: com.azure.cosmos.implementation.guava25.base
  syntax:
    content: public default boolean test(T input)
    parameters:
    - id: input
      type: T
    return:
      type: boolean
references:
- uid: T
  spec.java:
  - uid: T
    name: T
    fullName: T
- uid: boolean
  spec.java:
  - uid: boolean
    name: boolean
    fullName: boolean
- uid: com.azure.cosmos.implementation.guava25.base.Predicate.apply*
  name: apply
  nameWithType: Predicate<T>.apply
  fullName: com.azure.cosmos.implementation.guava25.base.Predicate<T>.apply
  package: com.azure.cosmos.implementation.guava25.base
- uid: java.lang.Object
  spec.java:
  - uid: java.lang.Object
    name: Object
    fullName: java.lang.Object
- uid: com.azure.cosmos.implementation.guava25.base.Predicate.equals*
  name: equals
  nameWithType: Predicate<T>.equals
  fullName: com.azure.cosmos.implementation.guava25.base.Predicate<T>.equals
  package: com.azure.cosmos.implementation.guava25.base
- uid: com.azure.cosmos.implementation.guava25.base.Predicate.test*
  name: test
  nameWithType: Predicate<T>.test
  fullName: com.azure.cosmos.implementation.guava25.base.Predicate<T>.test
  package: com.azure.cosmos.implementation.guava25.base
- uid: java.util.function.Predicate<T>
  name: Predicate<T>
  nameWithType: Predicate<T>
  fullName: java.util.function.Predicate<T>
- uid: java.util.function.Predicate
  name: Predicate
  nameWithType: Predicate
  fullName: java.util.function.Predicate
