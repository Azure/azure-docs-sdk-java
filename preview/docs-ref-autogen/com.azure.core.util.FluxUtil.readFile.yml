### YamlMime:JavaMember
uid: "com.azure.core.util.FluxUtil.readFile*"
fullName: "com.azure.core.util.FluxUtil.readFile"
name: "readFile"
nameWithType: "FluxUtil.readFile"
members:
- uid: "com.azure.core.util.FluxUtil.readFile(java.nio.channels.AsynchronousFileChannel)"
  fullName: "com.azure.core.util.FluxUtil.readFile(AsynchronousFileChannel fileChannel)"
  name: "readFile(AsynchronousFileChannel fileChannel)"
  nameWithType: "FluxUtil.readFile(AsynchronousFileChannel fileChannel)"
  summary: "Creates a <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Flux\"></xref> from an <xref uid=\"java.nio.channels.AsynchronousFileChannel\" data-throw-if-not-resolved=\"false\" data-raw-source=\"AsynchronousFileChannel\"></xref> which reads the entire file."
  parameters:
  - description: "The file channel."
    name: "fileChannel"
    type: "<xref href=\"java.nio.channels.AsynchronousFileChannel?alt=java.nio.channels.AsynchronousFileChannel&text=AsynchronousFileChannel\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public static Flux<ByteBuffer> readFile(AsynchronousFileChannel fileChannel)"
  returns:
    description: "The AsyncInputStream."
    type: "<xref href=\"reactor.core.publisher.Flux?alt=reactor.core.publisher.Flux&text=Flux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.nio.ByteBuffer?alt=java.nio.ByteBuffer&text=ByteBuffer\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.core.util.FluxUtil.readFile(java.nio.channels.AsynchronousFileChannel,int,long,long)"
  fullName: "com.azure.core.util.FluxUtil.readFile(AsynchronousFileChannel fileChannel, int chunkSize, long offset, long length)"
  name: "readFile(AsynchronousFileChannel fileChannel, int chunkSize, long offset, long length)"
  nameWithType: "FluxUtil.readFile(AsynchronousFileChannel fileChannel, int chunkSize, long offset, long length)"
  summary: "Creates a <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Flux\"></xref> from an <xref uid=\"java.nio.channels.AsynchronousFileChannel\" data-throw-if-not-resolved=\"false\" data-raw-source=\"AsynchronousFileChannel\"></xref> which reads part of a file into chunks of the given size."
  parameters:
  - description: "The file channel."
    name: "fileChannel"
    type: "<xref href=\"java.nio.channels.AsynchronousFileChannel?alt=java.nio.channels.AsynchronousFileChannel&text=AsynchronousFileChannel\" data-throw-if-not-resolved=\"False\" />"
  - description: "the size of file chunks to read."
    name: "chunkSize"
    type: "<xref href=\"int?alt=int&text=int\" data-throw-if-not-resolved=\"False\" />"
  - description: "The offset in the file to begin reading."
    name: "offset"
    type: "<xref href=\"long?alt=long&text=long\" data-throw-if-not-resolved=\"False\" />"
  - description: "The number of bytes to read from the file."
    name: "length"
    type: "<xref href=\"long?alt=long&text=long\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public static Flux<ByteBuffer> readFile(AsynchronousFileChannel fileChannel, int chunkSize, long offset, long length)"
  returns:
    description: "the Flux."
    type: "<xref href=\"reactor.core.publisher.Flux?alt=reactor.core.publisher.Flux&text=Flux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.nio.ByteBuffer?alt=java.nio.ByteBuffer&text=ByteBuffer\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.core.util.FluxUtil.readFile(java.nio.channels.AsynchronousFileChannel,long,long)"
  fullName: "com.azure.core.util.FluxUtil.readFile(AsynchronousFileChannel fileChannel, long offset, long length)"
  name: "readFile(AsynchronousFileChannel fileChannel, long offset, long length)"
  nameWithType: "FluxUtil.readFile(AsynchronousFileChannel fileChannel, long offset, long length)"
  summary: "Creates a <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Flux\"></xref> from an <xref uid=\"java.nio.channels.AsynchronousFileChannel\" data-throw-if-not-resolved=\"false\" data-raw-source=\"AsynchronousFileChannel\"></xref> which reads part of a file."
  parameters:
  - description: "The file channel."
    name: "fileChannel"
    type: "<xref href=\"java.nio.channels.AsynchronousFileChannel?alt=java.nio.channels.AsynchronousFileChannel&text=AsynchronousFileChannel\" data-throw-if-not-resolved=\"False\" />"
  - description: "The offset in the file to begin reading."
    name: "offset"
    type: "<xref href=\"long?alt=long&text=long\" data-throw-if-not-resolved=\"False\" />"
  - description: "The number of bytes to read from the file."
    name: "length"
    type: "<xref href=\"long?alt=long&text=long\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public static Flux<ByteBuffer> readFile(AsynchronousFileChannel fileChannel, long offset, long length)"
  returns:
    description: "the Flux."
    type: "<xref href=\"reactor.core.publisher.Flux?alt=reactor.core.publisher.Flux&text=Flux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.nio.ByteBuffer?alt=java.nio.ByteBuffer&text=ByteBuffer\" data-throw-if-not-resolved=\"False\" />&gt;"
type: "method"
metadata: {}
package: "com.azure.core.util"
artifact: com.azure:azure-core:1.3.0-beta.1
