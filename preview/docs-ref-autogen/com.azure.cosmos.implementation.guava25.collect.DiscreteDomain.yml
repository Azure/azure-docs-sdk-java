### YamlMime:ManagedReference
items:
- uid: com.azure.cosmos.implementation.guava25.collect.DiscreteDomain
  id: DiscreteDomain
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect
  children:
  - com.azure.cosmos.implementation.guava25.collect.DiscreteDomain.DiscreteDomain()
  - com.azure.cosmos.implementation.guava25.collect.DiscreteDomain.bigIntegers()
  - com.azure.cosmos.implementation.guava25.collect.DiscreteDomain.distance(C,C)
  - com.azure.cosmos.implementation.guava25.collect.DiscreteDomain.integers()
  - com.azure.cosmos.implementation.guava25.collect.DiscreteDomain.longs()
  - com.azure.cosmos.implementation.guava25.collect.DiscreteDomain.maxValue()
  - com.azure.cosmos.implementation.guava25.collect.DiscreteDomain.minValue()
  - com.azure.cosmos.implementation.guava25.collect.DiscreteDomain.next(C)
  - com.azure.cosmos.implementation.guava25.collect.DiscreteDomain.previous(C)
  langs:
  - java
  name: DiscreteDomain<C>
  nameWithType: DiscreteDomain<C>
  fullName: com.azure.cosmos.implementation.guava25.collect.DiscreteDomain<C>
  type: Class
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    A descriptor for a *discrete* `Comparable` domain such as all <xref uid="java.lang.Integer" data-throw-if-not-resolved="false">Integer</xref> instances. A discrete domain is one that supports the three basic operations: <xref uid="com.azure.cosmos.implementation.guava25.collect.DiscreteDomain.next" data-throw-if-not-resolved="false">#next</xref>, <xref uid="com.azure.cosmos.implementation.guava25.collect.DiscreteDomain.previous" data-throw-if-not-resolved="false">#previous</xref> and <xref uid="com.azure.cosmos.implementation.guava25.collect.DiscreteDomain.distance" data-throw-if-not-resolved="false">#distance</xref>, according to their specifications. The methods <xref uid="com.azure.cosmos.implementation.guava25.collect.DiscreteDomain.minValue" data-throw-if-not-resolved="false">#minValue</xref> and <xref uid="com.azure.cosmos.implementation.guava25.collect.DiscreteDomain.maxValue" data-throw-if-not-resolved="false">#maxValue</xref> should also be overridden for bounded types.


    A discrete domain always represents the *entire* set of values of its type; it cannot represent partial domains such as "prime integers" or "strings of length 5."


    See the Guava User Guide section on [ `DiscreteDomain`][_DiscreteDomain].



    [_DiscreteDomain]: https://github.com/google/guava/wiki/RangesExplained#discrete-domains
  syntax:
    content: public abstract class DiscreteDomain<C>
    typeParameters:
    - id: C
  inheritance:
  - java.lang.Object
  inheritedMembers:
  - java.lang.Object.clone()
  - java.lang.Object.equals(java.lang.Object)
  - java.lang.Object.finalize()
  - java.lang.Object.getClass()
  - java.lang.Object.hashCode()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.toString()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
- uid: com.azure.cosmos.implementation.guava25.collect.DiscreteDomain.DiscreteDomain()
  id: DiscreteDomain()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.DiscreteDomain
  langs:
  - java
  name: DiscreteDomain()
  nameWithType: DiscreteDomain<C>.DiscreteDomain()
  fullName: com.azure.cosmos.implementation.guava25.collect.DiscreteDomain<C>.DiscreteDomain()
  overload: com.azure.cosmos.implementation.guava25.collect.DiscreteDomain.DiscreteDomain*
  type: Constructor
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Constructor for use by subclasses.
  syntax:
    content: protected DiscreteDomain()
- uid: com.azure.cosmos.implementation.guava25.collect.DiscreteDomain.DiscreteDomain(boolean)
  id: DiscreteDomain(boolean)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.DiscreteDomain
  langs:
  - java
  name: DiscreteDomain(boolean supportsFastOffset)
  nameWithType: DiscreteDomain<C>.DiscreteDomain(boolean supportsFastOffset)
  fullName: com.azure.cosmos.implementation.guava25.collect.DiscreteDomain<C>.DiscreteDomain(boolean supportsFastOffset)
  overload: com.azure.cosmos.implementation.guava25.collect.DiscreteDomain.DiscreteDomain*
  type: Constructor
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Private constructor for built-in DiscreteDomains supporting fast offset.
  syntax:
    content: private DiscreteDomain(boolean supportsFastOffset)
    parameters:
    - id: supportsFastOffset
      type: boolean
- uid: com.azure.cosmos.implementation.guava25.collect.DiscreteDomain.bigIntegers()
  id: bigIntegers()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.DiscreteDomain
  langs:
  - java
  name: bigIntegers()
  nameWithType: DiscreteDomain<C>.bigIntegers()
  fullName: com.azure.cosmos.implementation.guava25.collect.DiscreteDomain<C>.bigIntegers()
  overload: com.azure.cosmos.implementation.guava25.collect.DiscreteDomain.bigIntegers*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Returns the discrete domain for values of type `BigInteger`.
  syntax:
    content: public static DiscreteDomain<BigInteger> bigIntegers()
    return:
      type: com.azure.cosmos.implementation.guava25.collect.DiscreteDomain<java.math.BigInteger>
- uid: com.azure.cosmos.implementation.guava25.collect.DiscreteDomain.distance(C,C)
  id: distance(C,C)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.DiscreteDomain
  langs:
  - java
  name: distance(C start, C end)
  nameWithType: DiscreteDomain<C>.distance(C start, C end)
  fullName: com.azure.cosmos.implementation.guava25.collect.DiscreteDomain<C>.distance(C start, C end)
  overload: com.azure.cosmos.implementation.guava25.collect.DiscreteDomain.distance*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Returns a signed value indicating how many nested invocations of <xref uid="com.azure.cosmos.implementation.guava25.collect.DiscreteDomain.next" data-throw-if-not-resolved="false">#next</xref> (if positive) or <xref uid="com.azure.cosmos.implementation.guava25.collect.DiscreteDomain.previous" data-throw-if-not-resolved="false">#previous</xref> (if negative) are needed to reach `end` starting from `start`. For example, if `end = next(next(next(start)))`, then `distance(start, end) == 3` and `distance(end, start) == -3`. As well, `distance(a, a)` is always zero.


    Note that this function is necessarily well-defined for any discrete type.
  syntax:
    content: public abstract long distance(C start, C end)
    parameters:
    - id: start
      type: C
    - id: end
      type: C
    return:
      type: long
      description: >-
        the distance as described above, or <xref uid="java.lang.Long.MIN_VALUE" data-throw-if-not-resolved="false">Long#MIN_VALUE</xref> or <xref uid="java.lang.Long.MAX_VALUE" data-throw-if-not-resolved="false">Long#MAX_VALUE</xref> if
             the distance is too small or too large, respectively.
- uid: com.azure.cosmos.implementation.guava25.collect.DiscreteDomain.integers()
  id: integers()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.DiscreteDomain
  langs:
  - java
  name: integers()
  nameWithType: DiscreteDomain<C>.integers()
  fullName: com.azure.cosmos.implementation.guava25.collect.DiscreteDomain<C>.integers()
  overload: com.azure.cosmos.implementation.guava25.collect.DiscreteDomain.integers*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Returns the discrete domain for values of type `Integer`.
  syntax:
    content: public static DiscreteDomain<Integer> integers()
    return:
      type: com.azure.cosmos.implementation.guava25.collect.DiscreteDomain<java.lang.Integer>
- uid: com.azure.cosmos.implementation.guava25.collect.DiscreteDomain.longs()
  id: longs()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.DiscreteDomain
  langs:
  - java
  name: longs()
  nameWithType: DiscreteDomain<C>.longs()
  fullName: com.azure.cosmos.implementation.guava25.collect.DiscreteDomain<C>.longs()
  overload: com.azure.cosmos.implementation.guava25.collect.DiscreteDomain.longs*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Returns the discrete domain for values of type `Long`.
  syntax:
    content: public static DiscreteDomain<Long> longs()
    return:
      type: com.azure.cosmos.implementation.guava25.collect.DiscreteDomain<java.lang.Long>
- uid: com.azure.cosmos.implementation.guava25.collect.DiscreteDomain.maxValue()
  id: maxValue()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.DiscreteDomain
  langs:
  - java
  name: maxValue()
  nameWithType: DiscreteDomain<C>.maxValue()
  fullName: com.azure.cosmos.implementation.guava25.collect.DiscreteDomain<C>.maxValue()
  overload: com.azure.cosmos.implementation.guava25.collect.DiscreteDomain.maxValue*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Returns the maximum value of type `C`, if it has one. The maximum value is the unique value for which <xref uid="java.lang.Comparable.compareTo*" data-throw-if-not-resolved="false">Comparable#compareTo(Object)</xref> never returns a negative value for any input of type `C`.


    The default implementation throws `NoSuchElementException`.
  syntax:
    content: public C maxValue()
    return:
      type: C
      description: the maximum value of type <code>C</code>; never null
- uid: com.azure.cosmos.implementation.guava25.collect.DiscreteDomain.minValue()
  id: minValue()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.DiscreteDomain
  langs:
  - java
  name: minValue()
  nameWithType: DiscreteDomain<C>.minValue()
  fullName: com.azure.cosmos.implementation.guava25.collect.DiscreteDomain<C>.minValue()
  overload: com.azure.cosmos.implementation.guava25.collect.DiscreteDomain.minValue*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Returns the minimum value of type `C`, if it has one. The minimum value is the unique value for which <xref uid="java.lang.Comparable.compareTo*" data-throw-if-not-resolved="false">Comparable#compareTo(Object)</xref> never returns a positive value for any input of type `C`.


    The default implementation throws `NoSuchElementException`.
  syntax:
    content: public C minValue()
    return:
      type: C
      description: the minimum value of type <code>C</code>; never null
- uid: com.azure.cosmos.implementation.guava25.collect.DiscreteDomain.next(C)
  id: next(C)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.DiscreteDomain
  langs:
  - java
  name: next(C value)
  nameWithType: DiscreteDomain<C>.next(C value)
  fullName: com.azure.cosmos.implementation.guava25.collect.DiscreteDomain<C>.next(C value)
  overload: com.azure.cosmos.implementation.guava25.collect.DiscreteDomain.next*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Returns the unique least value of type `C` that is greater than `value`, or `null` if none exists. Inverse operation to <xref uid="com.azure.cosmos.implementation.guava25.collect.DiscreteDomain.previous" data-throw-if-not-resolved="false">#previous</xref>.
  syntax:
    content: public abstract C next(C value)
    parameters:
    - id: value
      type: C
      description: any value of type <code>C</code>
    return:
      type: C
      description: >-
        the least value greater than <code>value</code>, or <code>null</code> if <code>value</code> is <code>
             maxValue()</code>
- uid: com.azure.cosmos.implementation.guava25.collect.DiscreteDomain.previous(C)
  id: previous(C)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.DiscreteDomain
  langs:
  - java
  name: previous(C value)
  nameWithType: DiscreteDomain<C>.previous(C value)
  fullName: com.azure.cosmos.implementation.guava25.collect.DiscreteDomain<C>.previous(C value)
  overload: com.azure.cosmos.implementation.guava25.collect.DiscreteDomain.previous*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Returns the unique greatest value of type `C` that is less than `value`, or `null` if none exists. Inverse operation to <xref uid="com.azure.cosmos.implementation.guava25.collect.DiscreteDomain.next" data-throw-if-not-resolved="false">#next</xref>.
  syntax:
    content: public abstract C previous(C value)
    parameters:
    - id: value
      type: C
      description: any value of type <code>C</code>
    return:
      type: C
      description: >-
        the greatest value less than <code>value</code>, or <code>null</code> if <code>value</code> is <code>
             minValue()</code>
references:
- uid: com.azure.cosmos.implementation.guava25.collect.DiscreteDomain.DiscreteDomain*
  name: DiscreteDomain
  nameWithType: DiscreteDomain<C>.DiscreteDomain
  fullName: com.azure.cosmos.implementation.guava25.collect.DiscreteDomain<C>.DiscreteDomain
  package: com.azure.cosmos.implementation.guava25.collect
- uid: boolean
  spec.java:
  - uid: boolean
    name: boolean
    fullName: boolean
- uid: com.azure.cosmos.implementation.guava25.collect.DiscreteDomain<java.lang.Integer>
  spec.java:
  - uid: com.azure.cosmos.implementation.guava25.collect.DiscreteDomain
    name: DiscreteDomain
    fullName: com.azure.cosmos.implementation.guava25.collect.DiscreteDomain
  - name: <
    fullName: <
  - uid: java.lang.Integer
    name: Integer
    fullName: java.lang.Integer
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.DiscreteDomain.integers*
  name: integers
  nameWithType: DiscreteDomain<C>.integers
  fullName: com.azure.cosmos.implementation.guava25.collect.DiscreteDomain<C>.integers
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.DiscreteDomain<java.lang.Long>
  spec.java:
  - uid: com.azure.cosmos.implementation.guava25.collect.DiscreteDomain
    name: DiscreteDomain
    fullName: com.azure.cosmos.implementation.guava25.collect.DiscreteDomain
  - name: <
    fullName: <
  - uid: java.lang.Long
    name: Long
    fullName: java.lang.Long
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.DiscreteDomain.longs*
  name: longs
  nameWithType: DiscreteDomain<C>.longs
  fullName: com.azure.cosmos.implementation.guava25.collect.DiscreteDomain<C>.longs
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.DiscreteDomain<java.math.BigInteger>
  spec.java:
  - uid: com.azure.cosmos.implementation.guava25.collect.DiscreteDomain
    name: DiscreteDomain
    fullName: com.azure.cosmos.implementation.guava25.collect.DiscreteDomain
  - name: <
    fullName: <
  - uid: java.math.BigInteger
    name: BigInteger
    fullName: java.math.BigInteger
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.DiscreteDomain.bigIntegers*
  name: bigIntegers
  nameWithType: DiscreteDomain<C>.bigIntegers
  fullName: com.azure.cosmos.implementation.guava25.collect.DiscreteDomain<C>.bigIntegers
  package: com.azure.cosmos.implementation.guava25.collect
- uid: C
  spec.java:
  - uid: C
    name: C
    fullName: C
- uid: com.azure.cosmos.implementation.guava25.collect.DiscreteDomain.next*
  name: next
  nameWithType: DiscreteDomain<C>.next
  fullName: com.azure.cosmos.implementation.guava25.collect.DiscreteDomain<C>.next
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.DiscreteDomain.previous*
  name: previous
  nameWithType: DiscreteDomain<C>.previous
  fullName: com.azure.cosmos.implementation.guava25.collect.DiscreteDomain<C>.previous
  package: com.azure.cosmos.implementation.guava25.collect
- uid: long
  spec.java:
  - uid: long
    name: long
    fullName: long
- uid: com.azure.cosmos.implementation.guava25.collect.DiscreteDomain.distance*
  name: distance
  nameWithType: DiscreteDomain<C>.distance
  fullName: com.azure.cosmos.implementation.guava25.collect.DiscreteDomain<C>.distance
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.DiscreteDomain.minValue*
  name: minValue
  nameWithType: DiscreteDomain<C>.minValue
  fullName: com.azure.cosmos.implementation.guava25.collect.DiscreteDomain<C>.minValue
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.DiscreteDomain.maxValue*
  name: maxValue
  nameWithType: DiscreteDomain<C>.maxValue
  fullName: com.azure.cosmos.implementation.guava25.collect.DiscreteDomain<C>.maxValue
  package: com.azure.cosmos.implementation.guava25.collect
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: java.lang.Object.finalize()
  name: Object.finalize()
  nameWithType: Object.finalize()
  fullName: java.lang.Object.finalize()
- uid: java.lang.Object.clone()
  name: Object.clone()
  nameWithType: Object.clone()
  fullName: java.lang.Object.clone()
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: java.lang.Object.equals(java.lang.Object)
  name: Object.equals(Object)
  nameWithType: Object.equals(Object)
  fullName: java.lang.Object.equals(java.lang.Object)
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.lang.Object.hashCode()
  name: Object.hashCode()
  nameWithType: Object.hashCode()
  fullName: java.lang.Object.hashCode()
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: java.lang.Object.toString()
  name: Object.toString()
  nameWithType: Object.toString()
  fullName: java.lang.Object.toString()
- uid: java.lang.Integer
  name: Integer
  nameWithType: Integer
  fullName: java.lang.Integer
- uid: java.lang.Long
  name: Long
  nameWithType: Long
  fullName: java.lang.Long
- uid: java.math.BigInteger
  name: BigInteger
  nameWithType: BigInteger
  fullName: java.math.BigInteger
