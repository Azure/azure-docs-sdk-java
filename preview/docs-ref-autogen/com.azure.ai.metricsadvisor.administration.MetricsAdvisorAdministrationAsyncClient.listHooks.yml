### YamlMime:JavaMember
uid: "com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.listHooks*"
fullName: "com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.listHooks"
name: "listHooks"
nameWithType: "MetricsAdvisorAdministrationAsyncClient.listHooks"
members:
- uid: "com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.listHooks()"
  fullName: "com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.listHooks()"
  name: "listHooks()"
  nameWithType: "MetricsAdvisorAdministrationAsyncClient.listHooks()"
  summary: "List information of hooks on the metrics advisor account.\n\n**Code sample**\n\n```java\nmetricAdvisorAdministrationAsyncClient.listHooks()\n     .subscribe(hook -> {\n         if (hook instanceof EmailHook) {\n             EmailHook emailHook = (EmailHook) hook;\n             System.out.printf(\"Hook Id: %s%n\", emailHook.getId());\n             System.out.printf(\"Hook Name: %s%n\", emailHook.getName());\n             System.out.printf(\"Hook Description: %s%n\", emailHook.getDescription());\n             System.out.printf(\"Hook External Link: %s%n\", emailHook.getExternalLink());\n             System.out.printf(\"Hook Emails: %s%n\", String.join(\",\", emailHook.getEmailsToAlert()));\n         } else if (hook instanceof WebHook) {\n             WebHook webHook = (WebHook) hook;\n             System.out.printf(\"Hook Id: %s%n\", webHook.getId());\n             System.out.printf(\"Hook Name: %s%n\", webHook.getName());\n             System.out.printf(\"Hook Description: %s%n\", webHook.getDescription());\n             System.out.printf(\"Hook External Link: %s%n\", webHook.getExternalLink());\n             System.out.printf(\"Hook Endpoint: %s%n\", webHook.getEndpoint());\n             System.out.printf(\"Hook Headers: %s%n\", webHook.getHttpHeaders());\n         }\n     });\n```"
  syntax: "public PagedFlux<Hook> listHooks()"
  returns:
    description: "A <xref uid=\"com.azure.core.http.rest.PagedFlux\" data-throw-if-not-resolved=\"false\">PagedFlux</xref> containing information of all the <xref uid=\"com.azure.ai.metricsadvisor.models.Hook\" data-throw-if-not-resolved=\"false\">Hook</xref> in the account."
    type: "<xref href=\"com.azure.core.http.rest.PagedFlux?alt=com.azure.core.http.rest.PagedFlux&text=PagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.ai.metricsadvisor.models.Hook?alt=com.azure.ai.metricsadvisor.models.Hook&text=Hook\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.listHooks(com.azure.ai.metricsadvisor.models.ListHookOptions)"
  fullName: "com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.listHooks(ListHookOptions options)"
  name: "listHooks(ListHookOptions options)"
  nameWithType: "MetricsAdvisorAdministrationAsyncClient.listHooks(ListHookOptions options)"
  summary: "List information of hooks.\n\n**Code sample**\n\n```java\nListHookOptions options = new ListHookOptions()\n     .setSkip(100)\n     .setTop(20);\n int[] pageCount = new int[1];\n metricAdvisorAdministrationAsyncClient.listHooks(options).byPage()\n     .subscribe(hookPage -> {\n         System.out.printf(\"Page: %d%n\", pageCount[0]++);\n         for (Hook hook : hookPage.getElements()) {\n             if (hook instanceof EmailHook) {\n                 EmailHook emailHook = (EmailHook) hook;\n                 System.out.printf(\"Hook Id: %s%n\", emailHook.getId());\n                 System.out.printf(\"Hook Name: %s%n\", emailHook.getName());\n                 System.out.printf(\"Hook Description: %s%n\", emailHook.getDescription());\n                 System.out.printf(\"Hook External Link: %s%n\", emailHook.getExternalLink());\n                 System.out.printf(\"Hook Emails: %s%n\", String.join(\",\", emailHook.getEmailsToAlert()));\n                 System.out.printf(\"Hook Admins: %s%n\", String.join(\",\", emailHook.getAdmins()));\n             } else if (hook instanceof WebHook) {\n                 WebHook webHook = (WebHook) hook;\n                 System.out.printf(\"Hook Id: %s%n\", webHook.getId());\n                 System.out.printf(\"Hook Name: %s%n\", webHook.getName());\n                 System.out.printf(\"Hook Description: %s%n\", webHook.getDescription());\n                 System.out.printf(\"Hook External Link: %s%n\", webHook.getExternalLink());\n                 System.out.printf(\"Hook Endpoint: %s%n\", webHook.getEndpoint());\n                 System.out.printf(\"Hook Headers: %s%n\", webHook.getHttpHeaders());\n                 System.out.printf(\"Hook Admins: %s%n\", String.join(\",\", webHook.getAdmins()));\n             }\n         }\n     });\n```"
  parameters:
  - description: "The additional parameters"
    name: "options"
    type: "<xref href=\"com.azure.ai.metricsadvisor.models.ListHookOptions?alt=com.azure.ai.metricsadvisor.models.ListHookOptions&text=ListHookOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PagedFlux<Hook> listHooks(ListHookOptions options)"
  returns:
    description: "A <xref uid=\"com.azure.core.http.rest.PagedFlux\" data-throw-if-not-resolved=\"false\">PagedFlux</xref> containing information of the <xref uid=\"com.azure.ai.metricsadvisor.models.Hook\" data-throw-if-not-resolved=\"false\">Hook</xref> resources."
    type: "<xref href=\"com.azure.core.http.rest.PagedFlux?alt=com.azure.core.http.rest.PagedFlux&text=PagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.ai.metricsadvisor.models.Hook?alt=com.azure.ai.metricsadvisor.models.Hook&text=Hook\" data-throw-if-not-resolved=\"False\" />&gt;"
type: "method"
metadata: {}
package: "com.azure.ai.metricsadvisor.administration"
artifact: com.azure:azure-ai-metricsadvisor:1.0.0-beta.1
