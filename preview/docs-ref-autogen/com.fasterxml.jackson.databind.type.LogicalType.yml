### YamlMime:JavaEnum
uid: "com.fasterxml.jackson.databind.type.LogicalType"
fullName: "com.fasterxml.jackson.databind.type.LogicalType"
name: "LogicalType"
nameWithType: "LogicalType"
summary: "Set of logical types (or type categories, classes of classes), used for defining applicability of configuration like coercion configuration. Used instead to allow easier targeting of types than having to enumerate physical types (<xref uid=\"java.lang.Class\" data-throw-if-not-resolved=\"false\" data-raw-source=\"java.lang.Class\"></xref> or <xref uid=\"com.fasterxml.jackson.databind.JavaType\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.fasterxml.jackson.databind.JavaType\"></xref>)."
inheritances:
- "<xref href=\"java.lang.Object\" data-throw-if-not-resolved=\"False\" />"
- "<xref href=\"java.lang.Enum\" data-throw-if-not-resolved=\"False\" />"
inheritedMembers:
- "java.lang.Enum.<T>valueOf(java.lang.Class<T>,java.lang.String)"
- "java.lang.Enum.clone()"
- "java.lang.Enum.compareTo(E)"
- "java.lang.Enum.equals(java.lang.Object)"
- "java.lang.Enum.finalize()"
- "java.lang.Enum.getDeclaringClass()"
- "java.lang.Enum.hashCode()"
- "java.lang.Enum.name()"
- "java.lang.Enum.ordinal()"
- "java.lang.Enum.toString()"
- "java.lang.Object.getClass()"
- "java.lang.Object.notify()"
- "java.lang.Object.notifyAll()"
- "java.lang.Object.wait()"
- "java.lang.Object.wait(long)"
- "java.lang.Object.wait(long,int)"
syntax: "public enum LogicalType extends Enum<LogicalType>"
fields:
- uid: "com.fasterxml.jackson.databind.type.LogicalType.Array"
  fullName: "com.fasterxml.jackson.databind.type.LogicalType.Array"
  name: "Array"
  nameWithType: "LogicalType.Array"
  summary: "Array types of other values.\n\nNote: excludes binary type `byte[]`."
- uid: "com.fasterxml.jackson.databind.type.LogicalType.Binary"
  fullName: "com.fasterxml.jackson.databind.type.LogicalType.Binary"
  name: "Binary"
  nameWithType: "LogicalType.Binary"
  summary: "Binary data such as `byte[]` and <xref uid=\"java.nio.ByteBuffer\" data-throw-if-not-resolved=\"false\" data-raw-source=\"java.nio.ByteBuffer\"></xref>."
- uid: "com.fasterxml.jackson.databind.type.LogicalType.Boolean"
  fullName: "com.fasterxml.jackson.databind.type.LogicalType.Boolean"
  name: "Boolean"
  nameWithType: "LogicalType.Boolean"
  summary: "<xref uid=\"java.lang.Boolean\" data-throw-if-not-resolved=\"false\" data-raw-source=\"java.lang.Boolean\"></xref>, `boolean`, <xref uid=\"java.util.concurrent.atomic.AtomicBoolean\" data-throw-if-not-resolved=\"false\" data-raw-source=\"java.util.concurrent.atomic.AtomicBoolean\"></xref>."
- uid: "com.fasterxml.jackson.databind.type.LogicalType.Collection"
  fullName: "com.fasterxml.jackson.databind.type.LogicalType.Collection"
  name: "Collection"
  nameWithType: "LogicalType.Collection"
  summary: "<xref uid=\"java.util.Collection\" data-throw-if-not-resolved=\"false\" data-raw-source=\"java.util.Collection\"></xref> values (and \"Collection-like\" for JVM languages and datatype libraries with semantically similar types)"
- uid: "com.fasterxml.jackson.databind.type.LogicalType.DateTime"
  fullName: "com.fasterxml.jackson.databind.type.LogicalType.DateTime"
  name: "DateTime"
  nameWithType: "LogicalType.DateTime"
  summary: "Date/time datatypes such as <xref uid=\"java.util.Date\" data-throw-if-not-resolved=\"false\" data-raw-source=\"java.util.Date\"></xref>, <xref uid=\"java.util.Calendar\" data-throw-if-not-resolved=\"false\" data-raw-source=\"java.util.Calendar\"></xref>."
- uid: "com.fasterxml.jackson.databind.type.LogicalType.Enum"
  fullName: "com.fasterxml.jackson.databind.type.LogicalType.Enum"
  name: "Enum"
  nameWithType: "LogicalType.Enum"
  summary: "Various <xref uid=\"java.lang.Enum\" data-throw-if-not-resolved=\"false\" data-raw-source=\"java.lang.Enum\"></xref> types."
- uid: "com.fasterxml.jackson.databind.type.LogicalType.Float"
  fullName: "com.fasterxml.jackson.databind.type.LogicalType.Float"
  name: "Float"
  nameWithType: "LogicalType.Float"
  summary: "Basic floating-point numbers types like `short`, `int`, `long` and matching wrapper types, <xref uid=\"java.math.BigInteger\" data-throw-if-not-resolved=\"false\" data-raw-source=\"java.math.BigInteger\"></xref>."
- uid: "com.fasterxml.jackson.databind.type.LogicalType.Integer"
  fullName: "com.fasterxml.jackson.databind.type.LogicalType.Integer"
  name: "Integer"
  nameWithType: "LogicalType.Integer"
  summary: "Basic integral numbers types like `short`, `int`, `long` and matching wrapper types, <xref uid=\"java.math.BigInteger\" data-throw-if-not-resolved=\"false\" data-raw-source=\"java.math.BigInteger\"></xref>."
- uid: "com.fasterxml.jackson.databind.type.LogicalType.Map"
  fullName: "com.fasterxml.jackson.databind.type.LogicalType.Map"
  name: "Map"
  nameWithType: "LogicalType.Map"
  summary: "<xref uid=\"java.util.Map\" data-throw-if-not-resolved=\"false\" data-raw-source=\"java.util.Map\"></xref> values (and \"Map-like\" for JVM languages and datatype libraries with semantically similar types)"
- uid: "com.fasterxml.jackson.databind.type.LogicalType.OtherScalar"
  fullName: "com.fasterxml.jackson.databind.type.LogicalType.OtherScalar"
  name: "OtherScalar"
  nameWithType: "LogicalType.OtherScalar"
  summary: "Scalar types other than ones listed above: includes types like <xref uid=\"java.net.URL\" data-throw-if-not-resolved=\"false\" data-raw-source=\"java.net.URL\"></xref> and <xref uid=\"java.util.UUID\" data-throw-if-not-resolved=\"false\" data-raw-source=\"java.util.UUID\"></xref>."
- uid: "com.fasterxml.jackson.databind.type.LogicalType.POJO"
  fullName: "com.fasterxml.jackson.databind.type.LogicalType.POJO"
  name: "POJO"
  nameWithType: "LogicalType.POJO"
  summary: "Types that are handled by default \"set of key/value pairs\" serialization, also known as \"Beans\".\n\nIn addition to user-defined types, also includes JDK types like:\n\n *  <xref uid=\"java.lang.Throwable\" data-throw-if-not-resolved=\"false\" data-raw-source=\"java.lang.Throwable\"></xref>"
- uid: "com.fasterxml.jackson.databind.type.LogicalType.Textual"
  fullName: "com.fasterxml.jackson.databind.type.LogicalType.Textual"
  name: "Textual"
  nameWithType: "LogicalType.Textual"
  summary: "Purely textual types, <xref uid=\"java.lang.String\" data-throw-if-not-resolved=\"false\" data-raw-source=\"java.lang.String\"></xref> and similar (but not types that are generally expressed as Strings in input)."
- uid: "com.fasterxml.jackson.databind.type.LogicalType.Untyped"
  fullName: "com.fasterxml.jackson.databind.type.LogicalType.Untyped"
  name: "Untyped"
  nameWithType: "LogicalType.Untyped"
  summary: "\"Non-type\", Type used to contained untyped, free-form content: maybe a \"Tree\" (sometimes called \"AST\"), or buffer of some kind, or even just nominal type of <xref uid=\"java.lang.Object\" data-throw-if-not-resolved=\"false\" data-raw-source=\"java.lang.Object\"></xref>"
methods:
- uid: "com.fasterxml.jackson.databind.type.LogicalType.fromClass(java.lang.Class<?>,com.fasterxml.jackson.databind.type.LogicalType)"
  fullName: "com.fasterxml.jackson.databind.type.LogicalType.fromClass(Class<?> raw, LogicalType defaultIfNotRecognized)"
  name: "fromClass(Class<?> raw, LogicalType defaultIfNotRecognized)"
  nameWithType: "LogicalType.fromClass(Class<?> raw, LogicalType defaultIfNotRecognized)"
  summary: "Helper method to use for figuring out logical type from physical type, in cases where caller wants a guess. Note that introspection is not exhaustive and mostly covers basic <xref uid=\"java.util.Collection\" data-throw-if-not-resolved=\"false\" data-raw-source=\"java.util.Collection\"></xref>, <xref uid=\"java.util.Map\" data-throw-if-not-resolved=\"false\" data-raw-source=\"java.util.Map\"></xref> and <xref uid=\"java.lang.Enum\" data-throw-if-not-resolved=\"false\" data-raw-source=\"java.lang.Enum\"></xref> cases; but not more specific types (for example datatype-provided extension types)."
  parameters:
  - description: "Type-erased class to classify"
    name: "raw"
    type: "<xref href=\"java.lang.Class?alt=java.lang.Class&text=Class\" data-throw-if-not-resolved=\"False\" />&lt;?&gt;"
  - description: "if no type recognized, value to return\n    (for example, <code>null</code>)"
    name: "defaultIfNotRecognized"
    type: "<xref href=\"com.fasterxml.jackson.databind.type.LogicalType?alt=com.fasterxml.jackson.databind.type.LogicalType&text=LogicalType\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public static LogicalType fromClass(Class<?> raw, LogicalType defaultIfNotRecognized)"
  returns:
    type: "<xref href=\"com.fasterxml.jackson.databind.type.LogicalType?alt=com.fasterxml.jackson.databind.type.LogicalType&text=LogicalType\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.fasterxml.jackson.databind.type.LogicalType.valueOf(java.lang.String)"
  fullName: "com.fasterxml.jackson.databind.type.LogicalType.valueOf(String name)"
  name: "valueOf(String name)"
  nameWithType: "LogicalType.valueOf(String name)"
  parameters:
  - name: "name"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public static LogicalType valueOf(String name)"
  returns:
    type: "<xref href=\"com.fasterxml.jackson.databind.type.LogicalType?alt=com.fasterxml.jackson.databind.type.LogicalType&text=LogicalType\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.fasterxml.jackson.databind.type.LogicalType.values()"
  fullName: "com.fasterxml.jackson.databind.type.LogicalType.values()"
  name: "values()"
  nameWithType: "LogicalType.values()"
  syntax: "public static LogicalType[] values()"
  returns:
    type: "<xref href=\"com.fasterxml.jackson.databind.type.LogicalType?alt=com.fasterxml.jackson.databind.type.LogicalType&text=LogicalType\" data-throw-if-not-resolved=\"False\" />[]"
metadata: {}
package: "com.fasterxml.jackson.databind.type"
artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.5
