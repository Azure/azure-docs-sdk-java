### YamlMime:JavaType
uid: "com.azure.cosmos.implementation.guava25.escape.Escaper"
fullName: "com.azure.cosmos.implementation.guava25.escape.Escaper"
name: "Escaper"
nameWithType: "Escaper"
summary: "An object that converts literal text into a format safe for inclusion in a particular context (such as an XML document). Typically (but not always), the inverse process of \"unescaping\" the text is performed automatically by the relevant parser.\n\nFor example, an XML escaper would convert the literal string `\"Foo\"` into `\"Foo<Bar>\"` to prevent `\"\"` from being confused with an XML tag. When the resulting XML document is parsed, the parser API will return this text as the original literal string `\"Foo\"`.\n\nAn `Escaper` instance is required to be stateless, and safe when used concurrently by multiple threads.\n\nBecause, in general, escaping operates on the code points of a string and not on its individual `char` values, it is not safe to assume that `escape(s)` is equivalent to `escape(s.substring(0, n)) + escape(s.substring(n))` for arbitrary `n`. This is because of the possibility of splitting a surrogate pair. The only case in which it is safe to escape strings and concatenate the results is if you can rule out this possibility, either by splitting an existing long string into short strings adaptively around <xref uid=\"java.lang.Character.isHighSurrogate\" data-throw-if-not-resolved=\"false\" data-raw-source=\"surrogate\"></xref> <xref uid=\"java.lang.Character.isLowSurrogate\" data-throw-if-not-resolved=\"false\" data-raw-source=\"pairs\"></xref>, or by starting with short strings already known to be free of unpaired surrogates.\n\nThe two primary implementations of this interface are <xref uid=\"com.azure.cosmos.implementation.guava25.escape.CharEscaper\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CharEscaper\"></xref> and <xref uid=\"com.azure.cosmos.implementation.guava25.escape.UnicodeEscaper\" data-throw-if-not-resolved=\"false\" data-raw-source=\"UnicodeEscaper\"></xref>. They are heavily optimized for performance and greatly simplify the task of implementing new escapers. It is strongly recommended that when implementing a new escaper you extend one of these classes. If you find that you are unable to achieve the desired behavior using either of these classes, please contact the Java libraries team for advice.\n\nPopular escapers are defined as constants in classes like <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.azure.cosmos.html.HtmlEscapers\"></xref> and <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.azure.cosmos.xml.XmlEscapers\"></xref>. To create your own escapers, use <xref uid=\"com.azure.cosmos.implementation.guava25.escape.CharEscaperBuilder\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CharEscaperBuilder\"></xref>, or extend `CharEscaper` or `UnicodeEscaper`."
inheritances:
- "<xref href=\"java.lang.Object\" data-throw-if-not-resolved=\"False\" />"
inheritedMembers:
- "java.lang.Object.clone()"
- "java.lang.Object.equals(java.lang.Object)"
- "java.lang.Object.finalize()"
- "java.lang.Object.getClass()"
- "java.lang.Object.hashCode()"
- "java.lang.Object.notify()"
- "java.lang.Object.notifyAll()"
- "java.lang.Object.toString()"
- "java.lang.Object.wait()"
- "java.lang.Object.wait(long)"
- "java.lang.Object.wait(long,int)"
syntax: "public abstract class Escaper"
constructors:
- "com.azure.cosmos.implementation.guava25.escape.Escaper.Escaper()"
methods:
- "com.azure.cosmos.implementation.guava25.escape.Escaper.asFunction()"
- "com.azure.cosmos.implementation.guava25.escape.Escaper.escape(java.lang.String)"
type: "class"
metadata: {}
package: "com.azure.cosmos.implementation.guava25.escape"
artifact: com.azure:azure-cosmos:4.4.0-beta.1
