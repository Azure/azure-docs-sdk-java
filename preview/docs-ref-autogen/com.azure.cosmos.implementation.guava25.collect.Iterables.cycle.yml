### YamlMime:JavaMember
uid: "com.azure.cosmos.implementation.guava25.collect.Iterables.cycle*"
fullName: "com.azure.cosmos.implementation.guava25.collect.Iterables.<T>cycle"
name: "<T>cycle"
nameWithType: "Iterables.<T>cycle"
members:
- uid: "com.azure.cosmos.implementation.guava25.collect.Iterables.<T>cycle(T...)"
  fullName: "com.azure.cosmos.implementation.guava25.collect.Iterables.<T>cycle(T[] elements)"
  name: "<T>cycle(T[] elements)"
  nameWithType: "Iterables.<T>cycle(T[] elements)"
  summary: "Returns an iterable whose iterators cycle indefinitely over the provided elements.\n\nAfter `remove` is invoked on a generated iterator, the removed element will no longer appear in either that iterator or any other iterator created from the same source iterable. That is, this method behaves exactly as `Iterables.cycle(Lists.newArrayList(elements))`. The iterator's `hasNext` method returns `true` until all of the original elements have been removed.\n\n**Warning:** Typical uses of the resulting iterator may produce an infinite loop. You should use an explicit `break` or be certain that you will eventually remove all the elements.\n\nTo cycle over the elements `n` times, use the following: `Iterables.concat(Collections.nCopies(n, Arrays.asList(elements)))`\n\n**Java 8 users:** If passing a single element `e`, the `Stream` equivalent of this method is `Stream.generate(() -> e)`. Otherwise, put the elements in a collection and use `Stream.generate(() -> collection).flatMap(Collection::stream)`."
  parameters:
  - name: "elements"
    type: "<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />[]"
  syntax: "public static Iterable<T> <T>cycle(T[] elements)"
  returns:
    type: "<xref href=\"java.lang.Iterable?alt=java.lang.Iterable&text=Iterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.cosmos.implementation.guava25.collect.Iterables.<T>cycle(java.lang.Iterable<T>)"
  fullName: "com.azure.cosmos.implementation.guava25.collect.Iterables.<T>cycle(Iterable<T> iterable)"
  name: "<T>cycle(Iterable<T> iterable)"
  nameWithType: "Iterables.<T>cycle(Iterable<T> iterable)"
  summary: "Returns an iterable whose iterators cycle indefinitely over the elements of `iterable`.\n\nThat iterator supports `remove()` if `iterable.iterator()` does. After `remove()` is called, subsequent cycles omit the removed element, which is no longer in `iterable`. The iterator's `hasNext()` method returns `true` until `iterable` is empty.\n\n**Warning:** Typical uses of the resulting iterator may produce an infinite loop. You should use an explicit `break` or be certain that you will eventually remove all the elements.\n\nTo cycle over the iterable `n` times, use the following: `Iterables.concat(Collections.nCopies(n, iterable))`\n\n**Java 8 users:** The `Stream` equivalent of this method is `Stream.generate(() -> iterable).flatMap(Streams::stream)`."
  parameters:
  - name: "iterable"
    type: "<xref href=\"java.lang.Iterable?alt=java.lang.Iterable&text=Iterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public static Iterable<T> <T>cycle(Iterable<T> iterable)"
  returns:
    type: "<xref href=\"java.lang.Iterable?alt=java.lang.Iterable&text=Iterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
type: "method"
metadata: {}
package: "com.azure.cosmos.implementation.guava25.collect"
artifact: com.azure:azure-cosmos:4.4.0-beta.1
