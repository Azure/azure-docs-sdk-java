### YamlMime:JavaType
uid: "com.azure.messaging.eventgrid.EventGridAsyncClient"
fullName: "com.azure.messaging.eventgrid.EventGridAsyncClient"
name: "EventGridAsyncClient"
nameWithType: "EventGridAsyncClient"
summary: "Initializes a new instance of the asynchronous Event<wbr>Grid<wbr>Client type."
inheritances:
- "<xref href=\"java.lang.Object?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
inheritedClassMethods:
- classRef: "java.lang.<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html\">Object</a>"
  methodsRef:
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#clone--\">clone</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#equals-java.lang.Object-\">equals</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#finalize--\">finalize</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#getClass--\">getClass</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#hashCode--\">hashCode</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#notify--\">notify</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#notifyAll--\">notifyAll</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#toString--\">toString</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#wait--\">wait</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#wait-long-\">wait</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#wait-long-int-\">wait</a>"
syntax: "public final class **EventGridAsyncClient**"
methods:
- uid: "com.azure.messaging.eventgrid.EventGridAsyncClient.acknowledgeCloudEvents(java.lang.String,java.lang.String,com.azure.messaging.eventgrid.models.AcknowledgeOptions)"
  fullName: "com.azure.messaging.eventgrid.EventGridAsyncClient.acknowledgeCloudEvents(String topicName, String eventSubscriptionName, AcknowledgeOptions lockTokens)"
  name: "acknowledgeCloudEvents(String topicName, String eventSubscriptionName, AcknowledgeOptions lockTokens)"
  nameWithType: "EventGridAsyncClient.acknowledgeCloudEvents(String topicName, String eventSubscriptionName, AcknowledgeOptions lockTokens)"
  summary: "Acknowledge batch of Cloud Events."
  parameters:
  - description: "Topic Name."
    name: "topicName"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "Event Subscription Name."
    name: "eventSubscriptionName"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "AcknowledgeOptions."
    name: "lockTokens"
    type: "<xref href=\"com.azure.messaging.eventgrid.models.AcknowledgeOptions?alt=com.azure.messaging.eventgrid.models.AcknowledgeOptions&text=AcknowledgeOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<AcknowledgeResult> acknowledgeCloudEvents(String topicName, String eventSubscriptionName, AcknowledgeOptions lockTokens)"
  desc: "Acknowledge batch of Cloud Events. The server responds with an HTTP 200 status code if at least one event is successfully acknowledged. The response body will include the set of successfully acknowledged lockTokens, along with other failed lockTokens with their corresponding error information. Successfully acknowledged events will no longer be available to any consumer."
  returns:
    description: "the result of the Acknowledge operation on successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.messaging.eventgrid.models.AcknowledgeResult?alt=com.azure.messaging.eventgrid.models.AcknowledgeResult&text=AcknowledgeResult\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.messaging.eventgrid.EventGridAsyncClient.acknowledgeCloudEventsWithResponse(java.lang.String,java.lang.String,com.azure.core.util.BinaryData,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.messaging.eventgrid.EventGridAsyncClient.acknowledgeCloudEventsWithResponse(String topicName, String eventSubscriptionName, BinaryData lockTokens, RequestOptions requestOptions)"
  name: "acknowledgeCloudEventsWithResponse(String topicName, String eventSubscriptionName, BinaryData lockTokens, RequestOptions requestOptions)"
  nameWithType: "EventGridAsyncClient.acknowledgeCloudEventsWithResponse(String topicName, String eventSubscriptionName, BinaryData lockTokens, RequestOptions requestOptions)"
  summary: "Acknowledge batch of Cloud Events."
  parameters:
  - description: "Topic Name."
    name: "topicName"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "Event Subscription Name."
    name: "eventSubscriptionName"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "AcknowledgeOptions."
    name: "lockTokens"
    type: "<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<BinaryData>> acknowledgeCloudEventsWithResponse(String topicName, String eventSubscriptionName, BinaryData lockTokens, RequestOptions requestOptions)"
  desc: "Acknowledge batch of Cloud Events. The server responds with an HTTP 200 status code if at least one event is successfully acknowledged. The response body will include the set of successfully acknowledged lockTokens, along with other failed lockTokens with their corresponding error information. Successfully acknowledged events will no longer be available to any consumer.\n\n**Request Body Schema**\n\n```java\n{\n     lockTokens (Required): [\n         String (Required)\n     ]\n }\n```\n\n**Response Body Schema**\n\n```java\n{\n     failedLockTokens (Required): [\n          (Required){\n             lockToken: String (Required)\n             errorCode: String (Required)\n             errorDescription: String (Required)\n         }\n     ]\n     succeededLockTokens (Required): [\n         String (Required)\n     ]\n }\n```"
  returns:
    description: "the result of the Acknowledge operation along with <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> on successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.messaging.eventgrid.EventGridAsyncClient.publishCloudEvent(java.lang.String,com.azure.core.models.CloudEvent)"
  fullName: "com.azure.messaging.eventgrid.EventGridAsyncClient.publishCloudEvent(String topicName, CloudEvent event)"
  name: "publishCloudEvent(String topicName, CloudEvent event)"
  nameWithType: "EventGridAsyncClient.publishCloudEvent(String topicName, CloudEvent event)"
  summary: "Publish Single Cloud Event to namespace topic."
  parameters:
  - description: "Topic Name."
    name: "topicName"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "Single Cloud Event being published."
    name: "event"
    type: "<xref href=\"com.azure.core.models.CloudEvent?alt=com.azure.core.models.CloudEvent&text=CloudEvent\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<PublishResult> publishCloudEvent(String topicName, CloudEvent event)"
  desc: "Publish Single Cloud Event to namespace topic. In case of success, the server responds with an HTTP 200 status code with an empty JSON object in response. Otherwise, the server can return various error codes. For example, 401: which indicates authorization failure, 403: which indicates quota exceeded or message is too large, 410: which indicates that specific topic is not found, 400: for bad request, and 500: for internal server error."
  returns:
    description: "the result of the Publish operation on successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.messaging.eventgrid.models.PublishResult?alt=com.azure.messaging.eventgrid.models.PublishResult&text=PublishResult\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.messaging.eventgrid.EventGridAsyncClient.publishCloudEventWithResponse(java.lang.String,com.azure.core.util.BinaryData,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.messaging.eventgrid.EventGridAsyncClient.publishCloudEventWithResponse(String topicName, BinaryData event, RequestOptions requestOptions)"
  name: "publishCloudEventWithResponse(String topicName, BinaryData event, RequestOptions requestOptions)"
  nameWithType: "EventGridAsyncClient.publishCloudEventWithResponse(String topicName, BinaryData event, RequestOptions requestOptions)"
  summary: "Publish Single Cloud Event to namespace topic."
  parameters:
  - description: "Topic Name."
    name: "topicName"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "Single Cloud Event being published."
    name: "event"
    type: "<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<BinaryData>> publishCloudEventWithResponse(String topicName, BinaryData event, RequestOptions requestOptions)"
  desc: "Publish Single Cloud Event to namespace topic. In case of success, the server responds with an HTTP 200 status code with an empty JSON object in response. Otherwise, the server can return various error codes. For example, 401: which indicates authorization failure, 403: which indicates quota exceeded or message is too large, 410: which indicates that specific topic is not found, 400: for bad request, and 500: for internal server error.\n\n**Request Body Schema**\n\n```java\n{\n     id: String (Required)\n     source: String (Required)\n     data: Object (Optional)\n     data_base64: byte[] (Optional)\n     type: String (Required)\n     time: OffsetDateTime (Optional)\n     specversion: String (Required)\n     dataschema: String (Optional)\n     datacontenttype: String (Optional)\n     subject: String (Optional)\n      (Optional): {\n         String: Object (Optional)\n     }\n }\n```\n\n**Response Body Schema**\n\n```java\n{\n     result: String (Required)\n }\n```"
  returns:
    description: "the result of the Publish operation along with <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> on successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.messaging.eventgrid.EventGridAsyncClient.publishCloudEvents(java.lang.String,java.util.List<com.azure.core.models.CloudEvent>)"
  fullName: "com.azure.messaging.eventgrid.EventGridAsyncClient.publishCloudEvents(String topicName, List<CloudEvent> events)"
  name: "publishCloudEvents(String topicName, List<CloudEvent> events)"
  nameWithType: "EventGridAsyncClient.publishCloudEvents(String topicName, List<CloudEvent> events)"
  summary: "Publish Batch Cloud Event to namespace topic."
  parameters:
  - description: "Topic Name."
    name: "topicName"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "Array of Cloud Events being published."
    name: "events"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/List.html\">List</a>&lt;<xref href=\"com.azure.core.models.CloudEvent?alt=com.azure.core.models.CloudEvent&text=CloudEvent\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public Mono<PublishResult> publishCloudEvents(String topicName, List<CloudEvent> events)"
  desc: "Publish Batch Cloud Event to namespace topic. In case of success, the server responds with an HTTP 200 status code with an empty JSON object in response. Otherwise, the server can return various error codes. For example, 401: which indicates authorization failure, 403: which indicates quota exceeded or message is too large, 410: which indicates that specific topic is not found, 400: for bad request, and 500: for internal server error."
  returns:
    description: "the result of the Publish operation on successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.messaging.eventgrid.models.PublishResult?alt=com.azure.messaging.eventgrid.models.PublishResult&text=PublishResult\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.messaging.eventgrid.EventGridAsyncClient.publishCloudEventsWithResponse(java.lang.String,com.azure.core.util.BinaryData,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.messaging.eventgrid.EventGridAsyncClient.publishCloudEventsWithResponse(String topicName, BinaryData events, RequestOptions requestOptions)"
  name: "publishCloudEventsWithResponse(String topicName, BinaryData events, RequestOptions requestOptions)"
  nameWithType: "EventGridAsyncClient.publishCloudEventsWithResponse(String topicName, BinaryData events, RequestOptions requestOptions)"
  summary: "Publish Batch Cloud Event to namespace topic."
  parameters:
  - description: "Topic Name."
    name: "topicName"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "Array of Cloud Events being published."
    name: "events"
    type: "<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<BinaryData>> publishCloudEventsWithResponse(String topicName, BinaryData events, RequestOptions requestOptions)"
  desc: "Publish Batch Cloud Event to namespace topic. In case of success, the server responds with an HTTP 200 status code with an empty JSON object in response. Otherwise, the server can return various error codes. For example, 401: which indicates authorization failure, 403: which indicates quota exceeded or message is too large, 410: which indicates that specific topic is not found, 400: for bad request, and 500: for internal server error.\n\n**Request Body Schema**\n\n```java\n[\n      (Required){\n         id: String (Required)\n         source: String (Required)\n         data: Object (Optional)\n         data_base64: byte[] (Optional)\n         type: String (Required)\n         time: OffsetDateTime (Optional)\n         specversion: String (Required)\n         dataschema: String (Optional)\n         datacontenttype: String (Optional)\n         subject: String (Optional)\n          (Optional): {\n             String: Object (Optional)\n         }\n     }\n ]\n```\n\n**Response Body Schema**\n\n```java\n{\n     result: String (Required)\n }\n```"
  returns:
    description: "the result of the Publish operation along with <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> on successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.messaging.eventgrid.EventGridAsyncClient.receiveCloudEvents(java.lang.String,java.lang.String)"
  fullName: "com.azure.messaging.eventgrid.EventGridAsyncClient.receiveCloudEvents(String topicName, String eventSubscriptionName)"
  name: "receiveCloudEvents(String topicName, String eventSubscriptionName)"
  nameWithType: "EventGridAsyncClient.receiveCloudEvents(String topicName, String eventSubscriptionName)"
  summary: "Receive Batch of Cloud Events from the Event Subscription."
  parameters:
  - description: "Topic Name."
    name: "topicName"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "Event Subscription Name."
    name: "eventSubscriptionName"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public Mono<ReceiveResult> receiveCloudEvents(String topicName, String eventSubscriptionName)"
  desc: "Receive Batch of Cloud Events from the Event Subscription."
  returns:
    description: "details of the Receive operation response on successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.messaging.eventgrid.models.ReceiveResult?alt=com.azure.messaging.eventgrid.models.ReceiveResult&text=ReceiveResult\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.messaging.eventgrid.EventGridAsyncClient.receiveCloudEvents(java.lang.String,java.lang.String,java.lang.Integer,java.time.Duration)"
  fullName: "com.azure.messaging.eventgrid.EventGridAsyncClient.receiveCloudEvents(String topicName, String eventSubscriptionName, Integer maxEvents, Duration maxWaitTime)"
  name: "receiveCloudEvents(String topicName, String eventSubscriptionName, Integer maxEvents, Duration maxWaitTime)"
  nameWithType: "EventGridAsyncClient.receiveCloudEvents(String topicName, String eventSubscriptionName, Integer maxEvents, Duration maxWaitTime)"
  summary: "Receive Batch of Cloud Events from the Event Subscription."
  parameters:
  - description: "Topic Name."
    name: "topicName"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "Event Subscription Name."
    name: "eventSubscriptionName"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "Max Events count to be received. Minimum value is 1, while maximum value is 100 events. If not\n     specified, the default value is 1."
    name: "maxEvents"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Integer.html\">Integer</a>"
  - description: "Max wait time value for receive operation in Seconds. It is the time in seconds that the\n     server approximately waits for the availability of an event and responds to the request. If an event is\n     available, the broker responds immediately to the client. Minimum value is 10 seconds, while maximum value is\n     120 seconds. If not specified, the default value is 60 seconds."
    name: "maxWaitTime"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/time/Duration.html\">Duration</a>"
  syntax: "public Mono<ReceiveResult> receiveCloudEvents(String topicName, String eventSubscriptionName, Integer maxEvents, Duration maxWaitTime)"
  desc: "Receive Batch of Cloud Events from the Event Subscription."
  returns:
    description: "details of the Receive operation response on successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.messaging.eventgrid.models.ReceiveResult?alt=com.azure.messaging.eventgrid.models.ReceiveResult&text=ReceiveResult\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.messaging.eventgrid.EventGridAsyncClient.receiveCloudEventsWithResponse(java.lang.String,java.lang.String,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.messaging.eventgrid.EventGridAsyncClient.receiveCloudEventsWithResponse(String topicName, String eventSubscriptionName, RequestOptions requestOptions)"
  name: "receiveCloudEventsWithResponse(String topicName, String eventSubscriptionName, RequestOptions requestOptions)"
  nameWithType: "EventGridAsyncClient.receiveCloudEventsWithResponse(String topicName, String eventSubscriptionName, RequestOptions requestOptions)"
  summary: "Receive Batch of Cloud Events from the Event Subscription."
  parameters:
  - description: "Topic Name."
    name: "topicName"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "Event Subscription Name."
    name: "eventSubscriptionName"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<BinaryData>> receiveCloudEventsWithResponse(String topicName, String eventSubscriptionName, RequestOptions requestOptions)"
  desc: "Receive Batch of Cloud Events from the Event Subscription.\n\n**Query Parameters**\n\n    | ----------- | -------- | -------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |\n    | Name        | Type     | Required | Description                                                                                                                                                                                                                                                                                                                                                                    |\n    | maxEvents   | Integer  | No       | Max Events count to be received. Minimum value is 1, while maximum value is 100 events. If not specified, the default value is 1.                                                                                                                                                                                                                                              |\n    | maxWaitTime | Duration | No       | Max wait time value for receive operation in Seconds. It is the time in seconds that the server approximately waits for the availability of an event and responds to the request. If an event is available, the broker responds immediately to the client. Minimum value is 10 seconds, while maximum value is 120 seconds. If not specified, the default value is 60 seconds. |\n\nYou can add these to a request with <xref uid=\"com.azure.core.http.rest.RequestOptions.addQueryParam\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RequestOptions#addQueryParam\"></xref>\n\n**Response Body Schema**\n\n```java\n{\n     value (Required): [\n          (Required){\n             brokerProperties (Required): {\n                 lockToken: String (Required)\n                 deliveryCount: int (Required)\n             }\n             event (Required): {\n                 id: String (Required)\n                 source: String (Required)\n                 data: Object (Optional)\n                 data_base64: byte[] (Optional)\n                 type: String (Required)\n                 time: OffsetDateTime (Optional)\n                 specversion: String (Required)\n                 dataschema: String (Optional)\n                 datacontenttype: String (Optional)\n                 subject: String (Optional)\n                  (Optional): {\n                     String: Object (Optional)\n                 }\n             }\n         }\n     ]\n }\n```"
  returns:
    description: "details of the Receive operation response along with <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> on successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.messaging.eventgrid.EventGridAsyncClient.rejectCloudEvents(java.lang.String,java.lang.String,com.azure.messaging.eventgrid.models.RejectOptions)"
  fullName: "com.azure.messaging.eventgrid.EventGridAsyncClient.rejectCloudEvents(String topicName, String eventSubscriptionName, RejectOptions lockTokens)"
  name: "rejectCloudEvents(String topicName, String eventSubscriptionName, RejectOptions lockTokens)"
  nameWithType: "EventGridAsyncClient.rejectCloudEvents(String topicName, String eventSubscriptionName, RejectOptions lockTokens)"
  summary: "Reject batch of Cloud Events."
  parameters:
  - description: "Topic Name."
    name: "topicName"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "Event Subscription Name."
    name: "eventSubscriptionName"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "RejectOptions."
    name: "lockTokens"
    type: "<xref href=\"com.azure.messaging.eventgrid.models.RejectOptions?alt=com.azure.messaging.eventgrid.models.RejectOptions&text=RejectOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<RejectResult> rejectCloudEvents(String topicName, String eventSubscriptionName, RejectOptions lockTokens)"
  desc: "Reject batch of Cloud Events."
  returns:
    description: "the result of the Reject operation on successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.messaging.eventgrid.models.RejectResult?alt=com.azure.messaging.eventgrid.models.RejectResult&text=RejectResult\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.messaging.eventgrid.EventGridAsyncClient.rejectCloudEventsWithResponse(java.lang.String,java.lang.String,com.azure.core.util.BinaryData,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.messaging.eventgrid.EventGridAsyncClient.rejectCloudEventsWithResponse(String topicName, String eventSubscriptionName, BinaryData lockTokens, RequestOptions requestOptions)"
  name: "rejectCloudEventsWithResponse(String topicName, String eventSubscriptionName, BinaryData lockTokens, RequestOptions requestOptions)"
  nameWithType: "EventGridAsyncClient.rejectCloudEventsWithResponse(String topicName, String eventSubscriptionName, BinaryData lockTokens, RequestOptions requestOptions)"
  summary: "Reject batch of Cloud Events."
  parameters:
  - description: "Topic Name."
    name: "topicName"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "Event Subscription Name."
    name: "eventSubscriptionName"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "RejectOptions."
    name: "lockTokens"
    type: "<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<BinaryData>> rejectCloudEventsWithResponse(String topicName, String eventSubscriptionName, BinaryData lockTokens, RequestOptions requestOptions)"
  desc: "Reject batch of Cloud Events.\n\n**Request Body Schema**\n\n```java\n{\n     lockTokens (Required): [\n         String (Required)\n     ]\n }\n```\n\n**Response Body Schema**\n\n```java\n{\n     failedLockTokens (Required): [\n          (Required){\n             lockToken: String (Required)\n             errorCode: String (Required)\n             errorDescription: String (Required)\n         }\n     ]\n     succeededLockTokens (Required): [\n         String (Required)\n     ]\n }\n```"
  returns:
    description: "the result of the Reject operation along with <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> on successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.messaging.eventgrid.EventGridAsyncClient.releaseCloudEvents(java.lang.String,java.lang.String,com.azure.messaging.eventgrid.models.ReleaseOptions)"
  fullName: "com.azure.messaging.eventgrid.EventGridAsyncClient.releaseCloudEvents(String topicName, String eventSubscriptionName, ReleaseOptions lockTokens)"
  name: "releaseCloudEvents(String topicName, String eventSubscriptionName, ReleaseOptions lockTokens)"
  nameWithType: "EventGridAsyncClient.releaseCloudEvents(String topicName, String eventSubscriptionName, ReleaseOptions lockTokens)"
  summary: "Release batch of Cloud Events."
  parameters:
  - description: "Topic Name."
    name: "topicName"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "Event Subscription Name."
    name: "eventSubscriptionName"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "ReleaseOptions."
    name: "lockTokens"
    type: "<xref href=\"com.azure.messaging.eventgrid.models.ReleaseOptions?alt=com.azure.messaging.eventgrid.models.ReleaseOptions&text=ReleaseOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<ReleaseResult> releaseCloudEvents(String topicName, String eventSubscriptionName, ReleaseOptions lockTokens)"
  desc: "Release batch of Cloud Events. The server responds with an HTTP 200 status code if at least one event is successfully released. The response body will include the set of successfully released lockTokens, along with other failed lockTokens with their corresponding error information."
  returns:
    description: "the result of the Release operation on successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.messaging.eventgrid.models.ReleaseResult?alt=com.azure.messaging.eventgrid.models.ReleaseResult&text=ReleaseResult\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.messaging.eventgrid.EventGridAsyncClient.releaseCloudEventsWithResponse(java.lang.String,java.lang.String,com.azure.core.util.BinaryData,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.messaging.eventgrid.EventGridAsyncClient.releaseCloudEventsWithResponse(String topicName, String eventSubscriptionName, BinaryData lockTokens, RequestOptions requestOptions)"
  name: "releaseCloudEventsWithResponse(String topicName, String eventSubscriptionName, BinaryData lockTokens, RequestOptions requestOptions)"
  nameWithType: "EventGridAsyncClient.releaseCloudEventsWithResponse(String topicName, String eventSubscriptionName, BinaryData lockTokens, RequestOptions requestOptions)"
  summary: "Release batch of Cloud Events."
  parameters:
  - description: "Topic Name."
    name: "topicName"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "Event Subscription Name."
    name: "eventSubscriptionName"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "ReleaseOptions."
    name: "lockTokens"
    type: "<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<BinaryData>> releaseCloudEventsWithResponse(String topicName, String eventSubscriptionName, BinaryData lockTokens, RequestOptions requestOptions)"
  desc: "Release batch of Cloud Events. The server responds with an HTTP 200 status code if at least one event is successfully released. The response body will include the set of successfully released lockTokens, along with other failed lockTokens with their corresponding error information.\n\n**Request Body Schema**\n\n```java\n{\n     lockTokens (Required): [\n         String (Required)\n     ]\n }\n```\n\n**Response Body Schema**\n\n```java\n{\n     failedLockTokens (Required): [\n          (Required){\n             lockToken: String (Required)\n             errorCode: String (Required)\n             errorDescription: String (Required)\n         }\n     ]\n     succeededLockTokens (Required): [\n         String (Required)\n     ]\n }\n```"
  returns:
    description: "the result of the Release operation along with <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> on successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
type: "class"
desc: "Initializes a new instance of the asynchronous EventGridClient type."
metadata: {}
package: "com.azure.messaging.eventgrid"
artifact: com.azure:azure-messaging-eventgrid:4.17.0-beta.1
