### YamlMime:ManagedReference
items:
- uid: com.azure.cosmos.implementation.guava25.collect.Sets.SetView
  id: SetView
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect
  children:
  - com.azure.cosmos.implementation.guava25.collect.Sets.SetView.<S>copyInto(S)
  - com.azure.cosmos.implementation.guava25.collect.Sets.SetView.add(E)
  - com.azure.cosmos.implementation.guava25.collect.Sets.SetView.addAll(java.util.Collection<? extends E>)
  - com.azure.cosmos.implementation.guava25.collect.Sets.SetView.clear()
  - com.azure.cosmos.implementation.guava25.collect.Sets.SetView.immutableCopy()
  - com.azure.cosmos.implementation.guava25.collect.Sets.SetView.iterator()
  - com.azure.cosmos.implementation.guava25.collect.Sets.SetView.remove(java.lang.Object)
  - com.azure.cosmos.implementation.guava25.collect.Sets.SetView.removeAll(java.util.Collection<?>)
  - com.azure.cosmos.implementation.guava25.collect.Sets.SetView.removeIf(java.util.function.Predicate<? super E>)
  - com.azure.cosmos.implementation.guava25.collect.Sets.SetView.retainAll(java.util.Collection<?>)
  langs:
  - java
  name: Sets.SetView<E>
  nameWithType: Sets.SetView<E>
  fullName: com.azure.cosmos.implementation.guava25.collect.Sets.SetView<E>
  type: Class
  package: com.azure.cosmos.implementation.guava25.collect
  summary: An unmodifiable view of a set which may be backed by other sets; this view will change as the backing sets do. Contains methods to copy the data into a new set which will then remain stable. There is usually no reason to retain a reference of type `SetView`; typically, you either use it as a plain <xref uid="java.util.Set" data-throw-if-not-resolved="false">Set</xref>, or immediately invoke <xref uid="" data-throw-if-not-resolved="false">#immutableCopy</xref> or <xref uid="" data-throw-if-not-resolved="false">#copyInto</xref> and forget the `SetView` itself.
  syntax:
    content: public abstract static class Sets.SetView<E> extends AbstractSet<E>
    typeParameters:
    - id: E
  inheritance:
  - java.lang.Object
  - java.util.AbstractCollection
  - java.util.AbstractSet
  inheritedMembers:
  - java.lang.Object.clone()
  - java.lang.Object.finalize()
  - java.lang.Object.getClass()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
  - java.util.AbstractCollection.<T>toArray(T[])
  - java.util.AbstractCollection.add(E)
  - java.util.AbstractCollection.addAll(java.util.Collection<? extends E>)
  - java.util.AbstractCollection.clear()
  - java.util.AbstractCollection.contains(java.lang.Object)
  - java.util.AbstractCollection.containsAll(java.util.Collection<?>)
  - java.util.AbstractCollection.isEmpty()
  - java.util.AbstractCollection.iterator()
  - java.util.AbstractCollection.remove(java.lang.Object)
  - java.util.AbstractCollection.retainAll(java.util.Collection<?>)
  - java.util.AbstractCollection.size()
  - java.util.AbstractCollection.toArray()
  - java.util.AbstractCollection.toString()
  - java.util.AbstractSet.equals(java.lang.Object)
  - java.util.AbstractSet.hashCode()
  - java.util.AbstractSet.removeAll(java.util.Collection<?>)
- uid: com.azure.cosmos.implementation.guava25.collect.Sets.SetView.<S>copyInto(S)
  id: <S>copyInto(S)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.Sets.SetView
  langs:
  - java
  name: <S>copyInto(S set)
  nameWithType: Sets.SetView<E>.<S>copyInto(S set)
  fullName: com.azure.cosmos.implementation.guava25.collect.Sets.SetView<E>.<S>copyInto(S set)
  overload: com.azure.cosmos.implementation.guava25.collect.Sets.SetView.copyInto*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Copies the current contents of this set view into an existing set. This method has equivalent behavior to `set.addAll(this)`, assuming that all the sets involved are based on the same notion of equivalence.
  syntax:
    content: public S <S>copyInto(S set)
    parameters:
    - id: set
      type: S
    return:
      type: S
      description: a reference to <code>set</code>, for convenience
- uid: com.azure.cosmos.implementation.guava25.collect.Sets.SetView.SetView()
  id: SetView()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.Sets.SetView
  langs:
  - java
  name: SetView()
  nameWithType: Sets.SetView<E>.SetView()
  fullName: com.azure.cosmos.implementation.guava25.collect.Sets.SetView<E>.SetView()
  overload: com.azure.cosmos.implementation.guava25.collect.Sets.SetView.SetView*
  type: Constructor
  package: com.azure.cosmos.implementation.guava25.collect
  syntax:
    content: private SetView()
- uid: com.azure.cosmos.implementation.guava25.collect.Sets.SetView.add(E)
  id: add(E)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.Sets.SetView
  langs:
  - java
  name: add(E e)
  nameWithType: Sets.SetView<E>.add(E e)
  fullName: com.azure.cosmos.implementation.guava25.collect.Sets.SetView<E>.add(E e)
  overload: com.azure.cosmos.implementation.guava25.collect.Sets.SetView.add*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Guaranteed to throw an exception and leave the collection unmodified.
  syntax:
    content: public final boolean add(E e)
    parameters:
    - id: e
      type: E
    return:
      type: boolean
- uid: com.azure.cosmos.implementation.guava25.collect.Sets.SetView.addAll(java.util.Collection<? extends E>)
  id: addAll(java.util.Collection<? extends E>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.Sets.SetView
  langs:
  - java
  name: addAll(Collection<? extends E> newElements)
  nameWithType: Sets.SetView<E>.addAll(Collection<? extends E> newElements)
  fullName: com.azure.cosmos.implementation.guava25.collect.Sets.SetView<E>.addAll(Collection<? extends E> newElements)
  overload: com.azure.cosmos.implementation.guava25.collect.Sets.SetView.addAll*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Guaranteed to throw an exception and leave the collection unmodified.
  syntax:
    content: public final boolean addAll(Collection<? extends E> newElements)
    parameters:
    - id: newElements
      type: java.util.Collection<? extends E>
    return:
      type: boolean
- uid: com.azure.cosmos.implementation.guava25.collect.Sets.SetView.clear()
  id: clear()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.Sets.SetView
  langs:
  - java
  name: clear()
  nameWithType: Sets.SetView<E>.clear()
  fullName: com.azure.cosmos.implementation.guava25.collect.Sets.SetView<E>.clear()
  overload: com.azure.cosmos.implementation.guava25.collect.Sets.SetView.clear*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Guaranteed to throw an exception and leave the collection unmodified.
  syntax:
    content: public final void clear()
- uid: com.azure.cosmos.implementation.guava25.collect.Sets.SetView.immutableCopy()
  id: immutableCopy()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.Sets.SetView
  langs:
  - java
  name: immutableCopy()
  nameWithType: Sets.SetView<E>.immutableCopy()
  fullName: com.azure.cosmos.implementation.guava25.collect.Sets.SetView<E>.immutableCopy()
  overload: com.azure.cosmos.implementation.guava25.collect.Sets.SetView.immutableCopy*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Returns an immutable copy of the current contents of this set view. Does not support null elements.


    **Warning:** this may have unexpected results if a backing set of this view uses a nonstandard notion of equivalence, for example if it is a <xref uid="java.util.TreeSet" data-throw-if-not-resolved="false">TreeSet</xref> using a comparator that is inconsistent with <xref uid="java.lang.Object.equals(java.lang.Object)" data-throw-if-not-resolved="false">Object#equals(Object)</xref>.
  syntax:
    content: public ImmutableSet<E> immutableCopy()
    return:
      type: com.azure.cosmos.implementation.guava25.collect.ImmutableSet<E>
- uid: com.azure.cosmos.implementation.guava25.collect.Sets.SetView.iterator()
  id: iterator()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.Sets.SetView
  langs:
  - java
  name: iterator()
  nameWithType: Sets.SetView<E>.iterator()
  fullName: com.azure.cosmos.implementation.guava25.collect.Sets.SetView<E>.iterator()
  overload: com.azure.cosmos.implementation.guava25.collect.Sets.SetView.iterator*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Scope the return type to <xref uid="com.azure.cosmos.implementation.guava25.collect.UnmodifiableIterator" data-throw-if-not-resolved="false">UnmodifiableIterator</xref> to ensure this is an unmodifiable view.
  syntax:
    content: public abstract UnmodifiableIterator<E> iterator()
    return:
      type: com.azure.cosmos.implementation.guava25.collect.UnmodifiableIterator<E>
- uid: com.azure.cosmos.implementation.guava25.collect.Sets.SetView.remove(java.lang.Object)
  id: remove(java.lang.Object)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.Sets.SetView
  langs:
  - java
  name: remove(Object object)
  nameWithType: Sets.SetView<E>.remove(Object object)
  fullName: com.azure.cosmos.implementation.guava25.collect.Sets.SetView<E>.remove(Object object)
  overload: com.azure.cosmos.implementation.guava25.collect.Sets.SetView.remove*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Guaranteed to throw an exception and leave the collection unmodified.
  syntax:
    content: public final boolean remove(Object object)
    parameters:
    - id: object
      type: java.lang.Object
    return:
      type: boolean
- uid: com.azure.cosmos.implementation.guava25.collect.Sets.SetView.removeAll(java.util.Collection<?>)
  id: removeAll(java.util.Collection<?>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.Sets.SetView
  langs:
  - java
  name: removeAll(Collection<?> oldElements)
  nameWithType: Sets.SetView<E>.removeAll(Collection<?> oldElements)
  fullName: com.azure.cosmos.implementation.guava25.collect.Sets.SetView<E>.removeAll(Collection<?> oldElements)
  overload: com.azure.cosmos.implementation.guava25.collect.Sets.SetView.removeAll*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Guaranteed to throw an exception and leave the collection unmodified.
  syntax:
    content: public final boolean removeAll(Collection<?> oldElements)
    parameters:
    - id: oldElements
      type: java.util.Collection<?>
    return:
      type: boolean
- uid: com.azure.cosmos.implementation.guava25.collect.Sets.SetView.removeIf(java.util.function.Predicate<? super E>)
  id: removeIf(java.util.function.Predicate<? super E>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.Sets.SetView
  langs:
  - java
  name: removeIf(Predicate<? super E> filter)
  nameWithType: Sets.SetView<E>.removeIf(Predicate<? super E> filter)
  fullName: com.azure.cosmos.implementation.guava25.collect.Sets.SetView<E>.removeIf(Predicate<? super E> filter)
  overload: com.azure.cosmos.implementation.guava25.collect.Sets.SetView.removeIf*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Guaranteed to throw an exception and leave the collection unmodified.
  syntax:
    content: public final boolean removeIf(Predicate<? super E> filter)
    parameters:
    - id: filter
      type: java.util.function.Predicate<? super E>
    return:
      type: boolean
- uid: com.azure.cosmos.implementation.guava25.collect.Sets.SetView.retainAll(java.util.Collection<?>)
  id: retainAll(java.util.Collection<?>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.Sets.SetView
  langs:
  - java
  name: retainAll(Collection<?> elementsToKeep)
  nameWithType: Sets.SetView<E>.retainAll(Collection<?> elementsToKeep)
  fullName: com.azure.cosmos.implementation.guava25.collect.Sets.SetView<E>.retainAll(Collection<?> elementsToKeep)
  overload: com.azure.cosmos.implementation.guava25.collect.Sets.SetView.retainAll*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Guaranteed to throw an exception and leave the collection unmodified.
  syntax:
    content: public final boolean retainAll(Collection<?> elementsToKeep)
    parameters:
    - id: elementsToKeep
      type: java.util.Collection<?>
    return:
      type: boolean
references:
- uid: com.azure.cosmos.implementation.guava25.collect.Sets.SetView.SetView*
  name: SetView
  nameWithType: Sets.SetView<E>.SetView
  fullName: com.azure.cosmos.implementation.guava25.collect.Sets.SetView<E>.SetView
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSet<E>
  spec.java:
  - uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSet
    name: ImmutableSet
    fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSet
  - name: <
    fullName: <
  - uid: E
    name: E
    fullName: E
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.Sets.SetView.immutableCopy*
  name: immutableCopy
  nameWithType: Sets.SetView<E>.immutableCopy
  fullName: com.azure.cosmos.implementation.guava25.collect.Sets.SetView<E>.immutableCopy
  package: com.azure.cosmos.implementation.guava25.collect
- uid: S
  spec.java:
  - uid: S
    name: S
    fullName: S
- uid: com.azure.cosmos.implementation.guava25.collect.Sets.SetView.copyInto*
  name: <S>copyInto
  nameWithType: Sets.SetView<E>.<S>copyInto
  fullName: com.azure.cosmos.implementation.guava25.collect.Sets.SetView<E>.<S>copyInto
  package: com.azure.cosmos.implementation.guava25.collect
- uid: E
  spec.java:
  - uid: E
    name: E
    fullName: E
- uid: boolean
  spec.java:
  - uid: boolean
    name: boolean
    fullName: boolean
- uid: com.azure.cosmos.implementation.guava25.collect.Sets.SetView.add*
  name: add
  nameWithType: Sets.SetView<E>.add
  fullName: com.azure.cosmos.implementation.guava25.collect.Sets.SetView<E>.add
  package: com.azure.cosmos.implementation.guava25.collect
- uid: java.lang.Object
  spec.java:
  - uid: java.lang.Object
    name: Object
    fullName: java.lang.Object
- uid: com.azure.cosmos.implementation.guava25.collect.Sets.SetView.remove*
  name: remove
  nameWithType: Sets.SetView<E>.remove
  fullName: com.azure.cosmos.implementation.guava25.collect.Sets.SetView<E>.remove
  package: com.azure.cosmos.implementation.guava25.collect
- uid: java.util.Collection<? extends E>
  spec.java:
  - uid: java.util.Collection
    name: Collection
    fullName: java.util.Collection
  - name: <
    fullName: <
  - uid: '? extends E'
    name: '? extends E'
    fullName: '? extends E'
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.Sets.SetView.addAll*
  name: addAll
  nameWithType: Sets.SetView<E>.addAll
  fullName: com.azure.cosmos.implementation.guava25.collect.Sets.SetView<E>.addAll
  package: com.azure.cosmos.implementation.guava25.collect
- uid: java.util.Collection<?>
  spec.java:
  - uid: java.util.Collection
    name: Collection
    fullName: java.util.Collection
  - name: <
    fullName: <
  - uid: '?'
    name: '?'
    fullName: '?'
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.Sets.SetView.removeAll*
  name: removeAll
  nameWithType: Sets.SetView<E>.removeAll
  fullName: com.azure.cosmos.implementation.guava25.collect.Sets.SetView<E>.removeAll
  package: com.azure.cosmos.implementation.guava25.collect
- uid: java.util.function.Predicate<? super E>
  spec.java:
  - uid: java.util.function.Predicate
    name: Predicate
    fullName: java.util.function.Predicate
  - name: <
    fullName: <
  - uid: '? super E'
    name: '? super E'
    fullName: '? super E'
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.Sets.SetView.removeIf*
  name: removeIf
  nameWithType: Sets.SetView<E>.removeIf
  fullName: com.azure.cosmos.implementation.guava25.collect.Sets.SetView<E>.removeIf
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.Sets.SetView.retainAll*
  name: retainAll
  nameWithType: Sets.SetView<E>.retainAll
  fullName: com.azure.cosmos.implementation.guava25.collect.Sets.SetView<E>.retainAll
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.Sets.SetView.clear*
  name: clear
  nameWithType: Sets.SetView<E>.clear
  fullName: com.azure.cosmos.implementation.guava25.collect.Sets.SetView<E>.clear
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.UnmodifiableIterator<E>
  spec.java:
  - uid: com.azure.cosmos.implementation.guava25.collect.UnmodifiableIterator
    name: UnmodifiableIterator
    fullName: com.azure.cosmos.implementation.guava25.collect.UnmodifiableIterator
  - name: <
    fullName: <
  - uid: E
    name: E
    fullName: E
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.Sets.SetView.iterator*
  name: iterator
  nameWithType: Sets.SetView<E>.iterator
  fullName: com.azure.cosmos.implementation.guava25.collect.Sets.SetView<E>.iterator
  package: com.azure.cosmos.implementation.guava25.collect
- uid: java.util.AbstractSet<E>
  name: AbstractSet<E>
  nameWithType: AbstractSet<E>
  fullName: java.util.AbstractSet<E>
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: java.util.AbstractCollection.contains(java.lang.Object)
  name: AbstractCollection.contains(Object)
  nameWithType: AbstractCollection.contains(Object)
  fullName: java.util.AbstractCollection.contains(java.lang.Object)
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: java.util.AbstractCollection.toArray()
  name: AbstractCollection.toArray()
  nameWithType: AbstractCollection.toArray()
  fullName: java.util.AbstractCollection.toArray()
- uid: java.lang.Object.finalize()
  name: Object.finalize()
  nameWithType: Object.finalize()
  fullName: java.lang.Object.finalize()
- uid: java.util.AbstractCollection.iterator()
  name: AbstractCollection.iterator()
  nameWithType: AbstractCollection.iterator()
  fullName: java.util.AbstractCollection.iterator()
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: java.lang.Object.clone()
  name: Object.clone()
  nameWithType: Object.clone()
  fullName: java.lang.Object.clone()
- uid: java.util.AbstractSet.removeAll(java.util.Collection<?>)
  name: AbstractSet.removeAll(Collection<?>)
  nameWithType: AbstractSet.removeAll(Collection<?>)
  fullName: java.util.AbstractSet.removeAll(java.util.Collection<?>)
- uid: java.util.AbstractCollection.add(E)
  name: AbstractCollection.add(E)
  nameWithType: AbstractCollection.add(E)
  fullName: java.util.AbstractCollection.add(E)
- uid: java.util.AbstractCollection.size()
  name: AbstractCollection.size()
  nameWithType: AbstractCollection.size()
  fullName: java.util.AbstractCollection.size()
- uid: java.util.AbstractCollection.containsAll(java.util.Collection<?>)
  name: AbstractCollection.containsAll(Collection<?>)
  nameWithType: AbstractCollection.containsAll(Collection<?>)
  fullName: java.util.AbstractCollection.containsAll(java.util.Collection<?>)
- uid: java.util.AbstractCollection.isEmpty()
  name: AbstractCollection.isEmpty()
  nameWithType: AbstractCollection.isEmpty()
  fullName: java.util.AbstractCollection.isEmpty()
- uid: java.util.AbstractSet.hashCode()
  name: AbstractSet.hashCode()
  nameWithType: AbstractSet.hashCode()
  fullName: java.util.AbstractSet.hashCode()
- uid: java.util.AbstractCollection.toString()
  name: AbstractCollection.toString()
  nameWithType: AbstractCollection.toString()
  fullName: java.util.AbstractCollection.toString()
- uid: java.util.AbstractCollection.clear()
  name: AbstractCollection.clear()
  nameWithType: AbstractCollection.clear()
  fullName: java.util.AbstractCollection.clear()
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.util.AbstractCollection.retainAll(java.util.Collection<?>)
  name: AbstractCollection.retainAll(Collection<?>)
  nameWithType: AbstractCollection.retainAll(Collection<?>)
  fullName: java.util.AbstractCollection.retainAll(java.util.Collection<?>)
- uid: java.util.AbstractCollection.addAll(java.util.Collection<? extends E>)
  name: AbstractCollection.addAll(Collection<? extends E>)
  nameWithType: AbstractCollection.addAll(Collection<? extends E>)
  fullName: java.util.AbstractCollection.addAll(java.util.Collection<? extends E>)
- uid: java.util.AbstractCollection.<T>toArray(T[])
  name: AbstractCollection.<T>toArray(T[])
  nameWithType: AbstractCollection.<T>toArray(T[])
  fullName: java.util.AbstractCollection.<T>toArray(T[])
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: java.util.AbstractSet.equals(java.lang.Object)
  name: AbstractSet.equals(Object)
  nameWithType: AbstractSet.equals(Object)
  fullName: java.util.AbstractSet.equals(java.lang.Object)
- uid: java.util.AbstractCollection.remove(java.lang.Object)
  name: AbstractCollection.remove(Object)
  nameWithType: AbstractCollection.remove(Object)
  fullName: java.util.AbstractCollection.remove(java.lang.Object)
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSet
  name: ImmutableSet
  nameWithType: ImmutableSet
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSet
- uid: '? extends E'
  name: '? extends E'
  nameWithType: '? extends E'
  fullName: '? extends E'
- uid: java.util.Collection
  name: Collection
  nameWithType: Collection
  fullName: java.util.Collection
- uid: '?'
  name: '?'
  nameWithType: '?'
  fullName: '?'
- uid: '? super E'
  name: '? super E'
  nameWithType: '? super E'
  fullName: '? super E'
- uid: java.util.function.Predicate
  name: Predicate
  nameWithType: Predicate
  fullName: java.util.function.Predicate
- uid: com.azure.cosmos.implementation.guava25.collect.UnmodifiableIterator
  name: UnmodifiableIterator
  nameWithType: UnmodifiableIterator
  fullName: com.azure.cosmos.implementation.guava25.collect.UnmodifiableIterator
- uid: java.util.AbstractSet
  name: AbstractSet
  nameWithType: AbstractSet
  fullName: java.util.AbstractSet
- uid: java.util.AbstractSet.removeAll(java.util.Collection
  name: AbstractSet.removeAll(Collection
  nameWithType: AbstractSet.removeAll(Collection
  fullName: java.util.AbstractSet.removeAll(java.util.Collection
- uid: ?>)
  name: ?>)
  nameWithType: ?>)
  fullName: ?>)
- uid: java.util.AbstractCollection.containsAll(java.util.Collection
  name: AbstractCollection.containsAll(Collection
  nameWithType: AbstractCollection.containsAll(Collection
  fullName: java.util.AbstractCollection.containsAll(java.util.Collection
- uid: java.util.AbstractCollection.retainAll(java.util.Collection
  name: AbstractCollection.retainAll(Collection
  nameWithType: AbstractCollection.retainAll(Collection
  fullName: java.util.AbstractCollection.retainAll(java.util.Collection
- uid: '? extends E>)'
  name: '? extends E>)'
  nameWithType: '? extends E>)'
  fullName: '? extends E>)'
- uid: java.util.AbstractCollection.addAll(java.util.Collection
  name: AbstractCollection.addAll(Collection
  nameWithType: AbstractCollection.addAll(Collection
  fullName: java.util.AbstractCollection.addAll(java.util.Collection
- uid: T>toArray(T[])
  name: T>toArray(T[])
  nameWithType: T>toArray(T[])
  fullName: T>toArray(T[])
- uid: java.util.AbstractCollection.
  name: AbstractCollection.
  nameWithType: AbstractCollection.
  fullName: java.util.AbstractCollection.
