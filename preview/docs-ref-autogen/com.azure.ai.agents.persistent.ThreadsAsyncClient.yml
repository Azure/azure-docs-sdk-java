### YamlMime:JavaType
uid: "com.azure.ai.agents.persistent.ThreadsAsyncClient"
fullName: "com.azure.ai.agents.persistent.ThreadsAsyncClient"
name: "ThreadsAsyncClient"
nameWithType: "ThreadsAsyncClient"
summary: "Initializes a new instance of the asynchronous Persistent<wbr>Agents<wbr>Administration<wbr>Client type."
inheritances:
- "<xref href=\"java.lang.Object?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
inheritedClassMethods:
- classRef: "java.lang.<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html\">Object</a>"
  methodsRef:
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#clone--\">clone</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#equals-java.lang.Object-\">equals</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#finalize--\">finalize</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#getClass--\">getClass</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#hashCode--\">hashCode</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#notify--\">notify</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#notifyAll--\">notifyAll</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#toString--\">toString</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#wait--\">wait</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#wait-long-\">wait</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#wait-long-int-\">wait</a>"
syntax: "public final class **ThreadsAsyncClient**"
methods:
- uid: "com.azure.ai.agents.persistent.ThreadsAsyncClient.createThread()"
  fullName: "com.azure.ai.agents.persistent.ThreadsAsyncClient.createThread()"
  name: "createThread()"
  nameWithType: "ThreadsAsyncClient.createThread()"
  summary: "Creates a new thread."
  syntax: "public Mono<PersistentAgentThread> createThread()"
  desc: "Creates a new thread. Threads contain messages and can be run by agents."
  returns:
    description: "information about a single thread associated with an agent on successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.ai.agents.persistent.models.PersistentAgentThread?alt=com.azure.ai.agents.persistent.models.PersistentAgentThread&text=PersistentAgentThread\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.ai.agents.persistent.ThreadsAsyncClient.createThread(java.util.List<com.azure.ai.agents.persistent.models.ThreadMessageOptions>,com.azure.ai.agents.persistent.models.ToolResources,java.util.Map<java.lang.String,java.lang.String>)"
  fullName: "com.azure.ai.agents.persistent.ThreadsAsyncClient.createThread(List<ThreadMessageOptions> messages, ToolResources toolResources, Map<String,String> metadata)"
  name: "createThread(List<ThreadMessageOptions> messages, ToolResources toolResources, Map<String,String> metadata)"
  nameWithType: "ThreadsAsyncClient.createThread(List<ThreadMessageOptions> messages, ToolResources toolResources, Map<String,String> metadata)"
  summary: "Creates a new thread."
  parameters:
  - description: "The initial messages to associate with the new thread."
    name: "messages"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/List.html\">List</a>&lt;<xref href=\"com.azure.ai.agents.persistent.models.ThreadMessageOptions?alt=com.azure.ai.agents.persistent.models.ThreadMessageOptions&text=ThreadMessageOptions\" data-throw-if-not-resolved=\"False\" />&gt;"
  - description: "A set of resources that are made available to the agent's tools in this thread. The\n resources are specific to the\n type of tool. For example, the `code_interpreter` tool requires a list of file IDs, while the `file_search` tool\n requires\n a list of vector store IDs."
    name: "toolResources"
    type: "<xref href=\"com.azure.ai.agents.persistent.models.ToolResources?alt=com.azure.ai.agents.persistent.models.ToolResources&text=ToolResources\" data-throw-if-not-resolved=\"False\" />"
  - description: "A set of up to 16 key/value pairs that can be attached to an object, used for storing additional\n information about that object in a structured format. Keys may be up to 64 characters in length and values may be\n up to 512 characters in length."
    name: "metadata"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/Map.html\">Map</a>&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>,<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>&gt;"
  syntax: "public Mono<PersistentAgentThread> createThread(List<ThreadMessageOptions> messages, ToolResources toolResources, Map<String,String> metadata)"
  desc: "Creates a new thread. Threads contain messages and can be run by agents."
  returns:
    description: "information about a single thread associated with an agent on successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.ai.agents.persistent.models.PersistentAgentThread?alt=com.azure.ai.agents.persistent.models.PersistentAgentThread&text=PersistentAgentThread\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.ai.agents.persistent.ThreadsAsyncClient.createThreadWithResponse(com.azure.core.util.BinaryData,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.ai.agents.persistent.ThreadsAsyncClient.createThreadWithResponse(BinaryData createThreadRequest, RequestOptions requestOptions)"
  name: "createThreadWithResponse(BinaryData createThreadRequest, RequestOptions requestOptions)"
  nameWithType: "ThreadsAsyncClient.createThreadWithResponse(BinaryData createThreadRequest, RequestOptions requestOptions)"
  summary: "Creates a new thread."
  parameters:
  - description: "The createThreadRequest parameter."
    name: "createThreadRequest"
    type: "<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<BinaryData>> createThreadWithResponse(BinaryData createThreadRequest, RequestOptions requestOptions)"
  desc: "Creates a new thread. Threads contain messages and can be run by agents.\n\n**Request Body Schema**\n\n```java\n{\n     messages (Optional): [\n          (Optional){\n             role: String(user/assistant) (Required)\n             content: BinaryData (Required)\n             attachments (Optional): [\n                  (Optional){\n                     file_id: String (Optional)\n                     data_source (Optional): {\n                         uri: String (Required)\n                         type: String(uri_asset/id_asset) (Required)\n                     }\n                     tools (Required): [\n                         BinaryData (Required)\n                     ]\n                 }\n             ]\n             metadata (Optional): {\n                 String: String (Required)\n             }\n         }\n     ]\n     tool_resources (Optional): {\n         code_interpreter (Optional): {\n             file_ids (Optional): [\n                 String (Optional)\n             ]\n             data_sources (Optional): [\n                 (recursive schema, see above)\n             ]\n         }\n         file_search (Optional): {\n             vector_store_ids (Optional): [\n                 String (Optional)\n             ]\n             vector_stores (Optional): [\n                  (Optional){\n                     name: String (Required)\n                     configuration (Required): {\n                         data_sources (Required): [\n                             (recursive schema, see above)\n                         ]\n                     }\n                 }\n             ]\n         }\n         azure_ai_search (Optional): {\n             indexes (Optional): [\n                  (Optional){\n                     index_connection_id: String (Optional)\n                     index_name: String (Optional)\n                     query_type: String(simple/semantic/vector/vector_simple_hybrid/vector_semantic_hybrid) (Optional)\n                     top_k: Integer (Optional)\n                     filter: String (Optional)\n                     index_asset_id: String (Optional)\n                 }\n             ]\n         }\n     }\n     metadata (Optional): {\n         String: String (Required)\n     }\n }\n```\n\n**Response Body Schema**\n\n```java\n{\n     id: String (Required)\n     object: String (Required)\n     created_at: long (Required)\n     tool_resources (Required): {\n         code_interpreter (Optional): {\n             file_ids (Optional): [\n                 String (Optional)\n             ]\n             data_sources (Optional): [\n                  (Optional){\n                     uri: String (Required)\n                     type: String(uri_asset/id_asset) (Required)\n                 }\n             ]\n         }\n         file_search (Optional): {\n             vector_store_ids (Optional): [\n                 String (Optional)\n             ]\n             vector_stores (Optional): [\n                  (Optional){\n                     name: String (Required)\n                     configuration (Required): {\n                         data_sources (Required): [\n                             (recursive schema, see above)\n                         ]\n                     }\n                 }\n             ]\n         }\n         azure_ai_search (Optional): {\n             indexes (Optional): [\n                  (Optional){\n                     index_connection_id: String (Optional)\n                     index_name: String (Optional)\n                     query_type: String(simple/semantic/vector/vector_simple_hybrid/vector_semantic_hybrid) (Optional)\n                     top_k: Integer (Optional)\n                     filter: String (Optional)\n                     index_asset_id: String (Optional)\n                 }\n             ]\n         }\n     }\n     metadata (Required): {\n         String: String (Required)\n     }\n }\n```"
  returns:
    description: "information about a single thread associated with an agent along with <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> on successful\n completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.ai.agents.persistent.ThreadsAsyncClient.deleteThread(java.lang.String)"
  fullName: "com.azure.ai.agents.persistent.ThreadsAsyncClient.deleteThread(String threadId)"
  name: "deleteThread(String threadId)"
  nameWithType: "ThreadsAsyncClient.deleteThread(String threadId)"
  summary: "Deletes an existing thread."
  parameters:
  - description: "Identifier of the thread."
    name: "threadId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public Mono<ThreadDeletionStatus> deleteThread(String threadId)"
  desc: "Deletes an existing thread."
  returns:
    description: "the status of a thread deletion operation on successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.ai.agents.persistent.models.ThreadDeletionStatus?alt=com.azure.ai.agents.persistent.models.ThreadDeletionStatus&text=ThreadDeletionStatus\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.ai.agents.persistent.ThreadsAsyncClient.deleteThreadWithResponse(java.lang.String,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.ai.agents.persistent.ThreadsAsyncClient.deleteThreadWithResponse(String threadId, RequestOptions requestOptions)"
  name: "deleteThreadWithResponse(String threadId, RequestOptions requestOptions)"
  nameWithType: "ThreadsAsyncClient.deleteThreadWithResponse(String threadId, RequestOptions requestOptions)"
  summary: "Deletes an existing thread."
  parameters:
  - description: "Identifier of the thread."
    name: "threadId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<BinaryData>> deleteThreadWithResponse(String threadId, RequestOptions requestOptions)"
  desc: "Deletes an existing thread.\n\n**Response Body Schema**\n\n```java\n{\n     id: String (Required)\n     deleted: boolean (Required)\n     object: String (Required)\n }\n```"
  returns:
    description: "the status of a thread deletion operation along with <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> on successful completion of\n <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.ai.agents.persistent.ThreadsAsyncClient.getThread(java.lang.String)"
  fullName: "com.azure.ai.agents.persistent.ThreadsAsyncClient.getThread(String threadId)"
  name: "getThread(String threadId)"
  nameWithType: "ThreadsAsyncClient.getThread(String threadId)"
  summary: "Gets information about an existing thread."
  parameters:
  - description: "Identifier of the thread."
    name: "threadId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public Mono<PersistentAgentThread> getThread(String threadId)"
  desc: "Gets information about an existing thread."
  returns:
    description: "information about an existing thread on successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.ai.agents.persistent.models.PersistentAgentThread?alt=com.azure.ai.agents.persistent.models.PersistentAgentThread&text=PersistentAgentThread\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.ai.agents.persistent.ThreadsAsyncClient.getThreadWithResponse(java.lang.String,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.ai.agents.persistent.ThreadsAsyncClient.getThreadWithResponse(String threadId, RequestOptions requestOptions)"
  name: "getThreadWithResponse(String threadId, RequestOptions requestOptions)"
  nameWithType: "ThreadsAsyncClient.getThreadWithResponse(String threadId, RequestOptions requestOptions)"
  summary: "Gets information about an existing thread."
  parameters:
  - description: "Identifier of the thread."
    name: "threadId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<BinaryData>> getThreadWithResponse(String threadId, RequestOptions requestOptions)"
  desc: "Gets information about an existing thread.\n\n**Response Body Schema**\n\n```java\n{\n     id: String (Required)\n     object: String (Required)\n     created_at: long (Required)\n     tool_resources (Required): {\n         code_interpreter (Optional): {\n             file_ids (Optional): [\n                 String (Optional)\n             ]\n             data_sources (Optional): [\n                  (Optional){\n                     uri: String (Required)\n                     type: String(uri_asset/id_asset) (Required)\n                 }\n             ]\n         }\n         file_search (Optional): {\n             vector_store_ids (Optional): [\n                 String (Optional)\n             ]\n             vector_stores (Optional): [\n                  (Optional){\n                     name: String (Required)\n                     configuration (Required): {\n                         data_sources (Required): [\n                             (recursive schema, see above)\n                         ]\n                     }\n                 }\n             ]\n         }\n         azure_ai_search (Optional): {\n             indexes (Optional): [\n                  (Optional){\n                     index_connection_id: String (Optional)\n                     index_name: String (Optional)\n                     query_type: String(simple/semantic/vector/vector_simple_hybrid/vector_semantic_hybrid) (Optional)\n                     top_k: Integer (Optional)\n                     filter: String (Optional)\n                     index_asset_id: String (Optional)\n                 }\n             ]\n         }\n     }\n     metadata (Required): {\n         String: String (Required)\n     }\n }\n```"
  returns:
    description: "information about an existing thread along with <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> on successful completion of\n <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.ai.agents.persistent.ThreadsAsyncClient.listThreads()"
  fullName: "com.azure.ai.agents.persistent.ThreadsAsyncClient.listThreads()"
  name: "listThreads()"
  nameWithType: "ThreadsAsyncClient.listThreads()"
  summary: "Gets a list of threads that were previously created."
  syntax: "public PagedFlux<PersistentAgentThread> listThreads()"
  desc: "Gets a list of threads that were previously created."
  returns:
    description: "a list of threads that were previously created as paginated response with <xref uid=\"com.azure.core.http.rest.PagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedFlux\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.PagedFlux?alt=com.azure.core.http.rest.PagedFlux&text=PagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.ai.agents.persistent.models.PersistentAgentThread?alt=com.azure.ai.agents.persistent.models.PersistentAgentThread&text=PersistentAgentThread\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.ai.agents.persistent.ThreadsAsyncClient.listThreads(com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.ai.agents.persistent.ThreadsAsyncClient.listThreads(RequestOptions requestOptions)"
  name: "listThreads(RequestOptions requestOptions)"
  nameWithType: "ThreadsAsyncClient.listThreads(RequestOptions requestOptions)"
  summary: "Gets a list of threads that were previously created."
  parameters:
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PagedFlux<BinaryData> listThreads(RequestOptions requestOptions)"
  desc: "Gets a list of threads that were previously created.\n\n**Query Parameters**\n\n    | ------ | ------- | -------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n    | Name   | Type    | Required | Description                                                                                                                                                                                                                                                                           |\n    | limit  | Integer | No       | A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.                                                                                                                                                                            |\n    | order  | String  | No       | Sort order by the created\\_at timestamp of the objects. asc for ascending order and desc for descending order. Allowed values: \"asc\", \"desc\".                                                                                                                                         |\n    | after  | String  | No       | A cursor for use in pagination. after is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj\\_foo, your subsequent call can include after=obj\\_foo in order to fetch the next page of the list.       |\n    | before | String  | No       | A cursor for use in pagination. before is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj\\_foo, your subsequent call can include before=obj\\_foo in order to fetch the previous page of the list. |\n\nYou can add these to a request with <xref uid=\"com.azure.core.http.rest.RequestOptions.addQueryParam\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RequestOptions#addQueryParam\"></xref>\n\n**Response Body Schema**\n\n```java\n{\n     id: String (Required)\n     object: String (Required)\n     created_at: long (Required)\n     tool_resources (Required): {\n         code_interpreter (Optional): {\n             file_ids (Optional): [\n                 String (Optional)\n             ]\n             data_sources (Optional): [\n                  (Optional){\n                     uri: String (Required)\n                     type: String(uri_asset/id_asset) (Required)\n                 }\n             ]\n         }\n         file_search (Optional): {\n             vector_store_ids (Optional): [\n                 String (Optional)\n             ]\n             vector_stores (Optional): [\n                  (Optional){\n                     name: String (Required)\n                     configuration (Required): {\n                         data_sources (Required): [\n                             (recursive schema, see above)\n                         ]\n                     }\n                 }\n             ]\n         }\n         azure_ai_search (Optional): {\n             indexes (Optional): [\n                  (Optional){\n                     index_connection_id: String (Optional)\n                     index_name: String (Optional)\n                     query_type: String(simple/semantic/vector/vector_simple_hybrid/vector_semantic_hybrid) (Optional)\n                     top_k: Integer (Optional)\n                     filter: String (Optional)\n                     index_asset_id: String (Optional)\n                 }\n             ]\n         }\n     }\n     metadata (Required): {\n         String: String (Required)\n     }\n }\n```"
  returns:
    description: "a list of threads that were previously created as paginated response with <xref uid=\"com.azure.core.http.rest.PagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedFlux\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.PagedFlux?alt=com.azure.core.http.rest.PagedFlux&text=PagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.ai.agents.persistent.ThreadsAsyncClient.listThreads(java.lang.Integer,com.azure.ai.agents.persistent.models.ListSortOrder,java.lang.String,java.lang.String)"
  fullName: "com.azure.ai.agents.persistent.ThreadsAsyncClient.listThreads(Integer limit, ListSortOrder order, String after, String before)"
  name: "listThreads(Integer limit, ListSortOrder order, String after, String before)"
  nameWithType: "ThreadsAsyncClient.listThreads(Integer limit, ListSortOrder order, String after, String before)"
  summary: "Gets a list of threads that were previously created."
  parameters:
  - description: "A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default\n is 20."
    name: "limit"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Integer.html\">Integer</a>"
  - description: "Sort order by the created_at timestamp of the objects. asc for ascending order and desc for\n descending order."
    name: "order"
    type: "<xref href=\"com.azure.ai.agents.persistent.models.ListSortOrder?alt=com.azure.ai.agents.persistent.models.ListSortOrder&text=ListSortOrder\" data-throw-if-not-resolved=\"False\" />"
  - description: "A cursor for use in pagination. after is an object ID that defines your place in the list. For\n instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can\n include after=obj_foo in order to fetch the next page of the list."
    name: "after"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "A cursor for use in pagination. before is an object ID that defines your place in the list. For\n instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can\n include before=obj_foo in order to fetch the previous page of the list."
    name: "before"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public PagedFlux<PersistentAgentThread> listThreads(Integer limit, ListSortOrder order, String after, String before)"
  desc: "Gets a list of threads that were previously created."
  returns:
    description: "a list of threads that were previously created as paginated response with <xref uid=\"com.azure.core.http.rest.PagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedFlux\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.PagedFlux?alt=com.azure.core.http.rest.PagedFlux&text=PagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.ai.agents.persistent.models.PersistentAgentThread?alt=com.azure.ai.agents.persistent.models.PersistentAgentThread&text=PersistentAgentThread\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.ai.agents.persistent.ThreadsAsyncClient.updateThread(java.lang.String)"
  fullName: "com.azure.ai.agents.persistent.ThreadsAsyncClient.updateThread(String threadId)"
  name: "updateThread(String threadId)"
  nameWithType: "ThreadsAsyncClient.updateThread(String threadId)"
  summary: "Modifies an existing thread."
  parameters:
  - description: "The ID of the thread to modify."
    name: "threadId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public Mono<PersistentAgentThread> updateThread(String threadId)"
  desc: "Modifies an existing thread."
  returns:
    description: "information about a single thread associated with an agent on successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.ai.agents.persistent.models.PersistentAgentThread?alt=com.azure.ai.agents.persistent.models.PersistentAgentThread&text=PersistentAgentThread\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.ai.agents.persistent.ThreadsAsyncClient.updateThread(java.lang.String,com.azure.ai.agents.persistent.models.ToolResources,java.util.Map<java.lang.String,java.lang.String>)"
  fullName: "com.azure.ai.agents.persistent.ThreadsAsyncClient.updateThread(String threadId, ToolResources toolResources, Map<String,String> metadata)"
  name: "updateThread(String threadId, ToolResources toolResources, Map<String,String> metadata)"
  nameWithType: "ThreadsAsyncClient.updateThread(String threadId, ToolResources toolResources, Map<String,String> metadata)"
  summary: "Modifies an existing thread."
  parameters:
  - description: "The ID of the thread to modify."
    name: "threadId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "A set of resources that are made available to the agent's tools in this thread. The\n resources are specific to the\n type of tool. For example, the `code_interpreter` tool requires a list of file IDs, while the `file_search` tool\n requires\n a list of vector store IDs."
    name: "toolResources"
    type: "<xref href=\"com.azure.ai.agents.persistent.models.ToolResources?alt=com.azure.ai.agents.persistent.models.ToolResources&text=ToolResources\" data-throw-if-not-resolved=\"False\" />"
  - description: "A set of up to 16 key/value pairs that can be attached to an object, used for storing additional\n information about that object in a structured format. Keys may be up to 64 characters in length and values may be\n up to 512 characters in length."
    name: "metadata"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/Map.html\">Map</a>&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>,<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>&gt;"
  syntax: "public Mono<PersistentAgentThread> updateThread(String threadId, ToolResources toolResources, Map<String,String> metadata)"
  desc: "Modifies an existing thread."
  returns:
    description: "information about a single thread associated with an agent on successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.ai.agents.persistent.models.PersistentAgentThread?alt=com.azure.ai.agents.persistent.models.PersistentAgentThread&text=PersistentAgentThread\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.ai.agents.persistent.ThreadsAsyncClient.updateThreadWithResponse(java.lang.String,com.azure.core.util.BinaryData,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.ai.agents.persistent.ThreadsAsyncClient.updateThreadWithResponse(String threadId, BinaryData updateThreadRequest, RequestOptions requestOptions)"
  name: "updateThreadWithResponse(String threadId, BinaryData updateThreadRequest, RequestOptions requestOptions)"
  nameWithType: "ThreadsAsyncClient.updateThreadWithResponse(String threadId, BinaryData updateThreadRequest, RequestOptions requestOptions)"
  summary: "Modifies an existing thread."
  parameters:
  - description: "The ID of the thread to modify."
    name: "threadId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The updateThreadRequest parameter."
    name: "updateThreadRequest"
    type: "<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<BinaryData>> updateThreadWithResponse(String threadId, BinaryData updateThreadRequest, RequestOptions requestOptions)"
  desc: "Modifies an existing thread.\n\n**Request Body Schema**\n\n```java\n{\n     tool_resources (Optional): {\n         code_interpreter (Optional): {\n             file_ids (Optional): [\n                 String (Optional)\n             ]\n             data_sources (Optional): [\n                  (Optional){\n                     uri: String (Required)\n                     type: String(uri_asset/id_asset) (Required)\n                 }\n             ]\n         }\n         file_search (Optional): {\n             vector_store_ids (Optional): [\n                 String (Optional)\n             ]\n             vector_stores (Optional): [\n                  (Optional){\n                     name: String (Required)\n                     configuration (Required): {\n                         data_sources (Required): [\n                             (recursive schema, see above)\n                         ]\n                     }\n                 }\n             ]\n         }\n         azure_ai_search (Optional): {\n             indexes (Optional): [\n                  (Optional){\n                     index_connection_id: String (Optional)\n                     index_name: String (Optional)\n                     query_type: String(simple/semantic/vector/vector_simple_hybrid/vector_semantic_hybrid) (Optional)\n                     top_k: Integer (Optional)\n                     filter: String (Optional)\n                     index_asset_id: String (Optional)\n                 }\n             ]\n         }\n     }\n     metadata (Optional): {\n         String: String (Required)\n     }\n }\n```\n\n**Response Body Schema**\n\n```java\n{\n     id: String (Required)\n     object: String (Required)\n     created_at: long (Required)\n     tool_resources (Required): {\n         code_interpreter (Optional): {\n             file_ids (Optional): [\n                 String (Optional)\n             ]\n             data_sources (Optional): [\n                  (Optional){\n                     uri: String (Required)\n                     type: String(uri_asset/id_asset) (Required)\n                 }\n             ]\n         }\n         file_search (Optional): {\n             vector_store_ids (Optional): [\n                 String (Optional)\n             ]\n             vector_stores (Optional): [\n                  (Optional){\n                     name: String (Required)\n                     configuration (Required): {\n                         data_sources (Required): [\n                             (recursive schema, see above)\n                         ]\n                     }\n                 }\n             ]\n         }\n         azure_ai_search (Optional): {\n             indexes (Optional): [\n                  (Optional){\n                     index_connection_id: String (Optional)\n                     index_name: String (Optional)\n                     query_type: String(simple/semantic/vector/vector_simple_hybrid/vector_semantic_hybrid) (Optional)\n                     top_k: Integer (Optional)\n                     filter: String (Optional)\n                     index_asset_id: String (Optional)\n                 }\n             ]\n         }\n     }\n     metadata (Required): {\n         String: String (Required)\n     }\n }\n```"
  returns:
    description: "information about a single thread associated with an agent along with <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> on successful\n completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
type: "class"
desc: "Initializes a new instance of the asynchronous PersistentAgentsAdministrationClient type."
metadata: {}
package: "com.azure.ai.agents.persistent"
artifact: com.azure:azure-ai-agents-persistent:1.0.0-beta.1
