### YamlMime:JavaMember
uid: "com.fasterxml.jackson.databind.deser.std.StringCollectionDeserializer.isCachable*"
fullName: "com.fasterxml.jackson.databind.deser.std.StringCollectionDeserializer.isCachable"
name: "isCachable"
nameWithType: "StringCollectionDeserializer.isCachable"
members:
- uid: "com.fasterxml.jackson.databind.deser.std.StringCollectionDeserializer.isCachable()"
  fullName: "com.fasterxml.jackson.databind.deser.std.StringCollectionDeserializer.isCachable()"
  name: "isCachable()"
  nameWithType: "StringCollectionDeserializer.isCachable()"
  summary: "Method called to see if deserializer instance is cachable and usable for other properties of same type (type for which instance was created).\n\nNote that cached instances are still resolved on per-property basis, if instance implements <xref uid=\"com.fasterxml.jackson.databind.deser.ResolvableDeserializer\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.fasterxml.jackson.databind.deser.ResolvableDeserializer\"></xref>: cached instance is just as the base. This means that in most cases it is safe to cache instances; however, it only makes sense to cache instances if instantiation is expensive, or if instances are heavy-weight.\n\nDefault implementation returns false, to indicate that no caching is done."
  overridden: "com.fasterxml.jackson.databind.JsonDeserializer.isCachable()"
  syntax: "public boolean isCachable()"
  returns:
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
type: "method"
metadata: {}
package: "com.fasterxml.jackson.databind.deser.std"
artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
