### YamlMime:ManagedReference
items:
- uid: com.azure.cosmos.implementation.guava25.collect.Ordering
  id: Ordering
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect
  children:
  - com.azure.cosmos.implementation.guava25.collect.Ordering.<C>natural()
  - com.azure.cosmos.implementation.guava25.collect.Ordering.<E>greatestOf(java.lang.Iterable<E>,int)
  - com.azure.cosmos.implementation.guava25.collect.Ordering.<E>greatestOf(java.util.Iterator<E>,int)
  - com.azure.cosmos.implementation.guava25.collect.Ordering.<E>immutableSortedCopy(java.lang.Iterable<E>)
  - com.azure.cosmos.implementation.guava25.collect.Ordering.<E>leastOf(java.lang.Iterable<E>,int)
  - com.azure.cosmos.implementation.guava25.collect.Ordering.<E>leastOf(java.util.Iterator<E>,int)
  - com.azure.cosmos.implementation.guava25.collect.Ordering.<E>max(E,E)
  - com.azure.cosmos.implementation.guava25.collect.Ordering.<E>max(E,E,E,E...)
  - com.azure.cosmos.implementation.guava25.collect.Ordering.<E>max(java.lang.Iterable<E>)
  - com.azure.cosmos.implementation.guava25.collect.Ordering.<E>max(java.util.Iterator<E>)
  - com.azure.cosmos.implementation.guava25.collect.Ordering.<E>min(E,E)
  - com.azure.cosmos.implementation.guava25.collect.Ordering.<E>min(E,E,E,E...)
  - com.azure.cosmos.implementation.guava25.collect.Ordering.<E>min(java.lang.Iterable<E>)
  - com.azure.cosmos.implementation.guava25.collect.Ordering.<E>min(java.util.Iterator<E>)
  - com.azure.cosmos.implementation.guava25.collect.Ordering.<E>sortedCopy(java.lang.Iterable<E>)
  - com.azure.cosmos.implementation.guava25.collect.Ordering.<F>onResultOf(com.azure.cosmos.implementation.guava25.base.Function<F,? extends T>)
  - com.azure.cosmos.implementation.guava25.collect.Ordering.<S>lexicographical()
  - com.azure.cosmos.implementation.guava25.collect.Ordering.<S>nullsFirst()
  - com.azure.cosmos.implementation.guava25.collect.Ordering.<S>nullsLast()
  - com.azure.cosmos.implementation.guava25.collect.Ordering.<S>reverse()
  - com.azure.cosmos.implementation.guava25.collect.Ordering.<T>compound(java.lang.Iterable<? extends java.util.Comparator<? super T>>)
  - com.azure.cosmos.implementation.guava25.collect.Ordering.<T>explicit(T,T...)
  - com.azure.cosmos.implementation.guava25.collect.Ordering.<T>explicit(java.util.List<T>)
  - com.azure.cosmos.implementation.guava25.collect.Ordering.<T>from(com.azure.cosmos.implementation.guava25.collect.Ordering<T>)
  - com.azure.cosmos.implementation.guava25.collect.Ordering.<T>from(java.util.Comparator<T>)
  - com.azure.cosmos.implementation.guava25.collect.Ordering.<U>compound(java.util.Comparator<? super U>)
  - com.azure.cosmos.implementation.guava25.collect.Ordering.Ordering()
  - com.azure.cosmos.implementation.guava25.collect.Ordering.allEqual()
  - com.azure.cosmos.implementation.guava25.collect.Ordering.arbitrary()
  - com.azure.cosmos.implementation.guava25.collect.Ordering.binarySearch(java.util.List<? extends T>,T)
  - com.azure.cosmos.implementation.guava25.collect.Ordering.compare(T,T)
  - com.azure.cosmos.implementation.guava25.collect.Ordering.isOrdered(java.lang.Iterable<? extends T>)
  - com.azure.cosmos.implementation.guava25.collect.Ordering.isStrictlyOrdered(java.lang.Iterable<? extends T>)
  - com.azure.cosmos.implementation.guava25.collect.Ordering.usingToString()
  langs:
  - java
  name: Ordering<T>
  nameWithType: Ordering<T>
  fullName: com.azure.cosmos.implementation.guava25.collect.Ordering<T>
  type: Class
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    A comparator, with additional methods to support common operations. This is an "enriched" version of `Comparator` for pre-Java-8 users, in the same sense that <xref uid="com.azure.cosmos.implementation.guava25.collect.FluentIterable" data-throw-if-not-resolved="false">FluentIterable</xref> is an enriched <xref uid="java.lang.Iterable" data-throw-if-not-resolved="false">Iterable</xref> for pre-Java-8 users.


    ### Three types of methods ###


    Like other fluent types, there are three types of methods present: methods for *acquiring*, *chaining*, and *using*.


    #### Acquiring ####


    The common ways to get an instance of `Ordering` are:

     *  Subclass it and implement <xref uid="com.azure.cosmos.implementation.guava25.collect.Ordering.compare" data-throw-if-not-resolved="false">#compare</xref> instead of implementing <xref uid="? extends java.util.Comparator" data-throw-if-not-resolved="false">Comparator</xref> directly
     *  Pass a *pre-existing* <xref uid="? extends java.util.Comparator" data-throw-if-not-resolved="false">Comparator</xref> instance to <xref uid="com.azure.cosmos.implementation.guava25.collect.Ordering.&lt;T&gt;from(java.util.Comparator&lt;T&gt;)" data-throw-if-not-resolved="false">#from(Comparator)</xref>
     *  Use the natural ordering, <xref uid="com.azure.cosmos.implementation.guava25.collect.Ordering.natural" data-throw-if-not-resolved="false">Ordering#natural</xref>

    #### Chaining ####


    Then you can use the *chaining* methods to get an altered version of that `Ordering`, including:

     *  <xref uid="com.azure.cosmos.implementation.guava25.collect.Ordering.reverse" data-throw-if-not-resolved="false">#reverse</xref>
     *  <xref uid="com.azure.cosmos.implementation.guava25.collect.Ordering.&lt;U&gt;compound(java.util.Comparator&lt;? super U&gt;)" data-throw-if-not-resolved="false">#compound(Comparator)</xref>
     *  <xref uid="com.azure.cosmos.implementation.guava25.collect.Ordering.&lt;F&gt;onResultOf(com.azure.cosmos.implementation.guava25.base.Function&lt;F,? extends T&gt;)" data-throw-if-not-resolved="false">#onResultOf(Function)</xref>
     *  <xref uid="com.azure.cosmos.implementation.guava25.collect.Ordering.nullsFirst" data-throw-if-not-resolved="false">#nullsFirst</xref> / <xref uid="com.azure.cosmos.implementation.guava25.collect.Ordering.nullsLast" data-throw-if-not-resolved="false">#nullsLast</xref>

    #### Using ####


    Finally, use the resulting `Ordering` anywhere a <xref uid="? extends java.util.Comparator" data-throw-if-not-resolved="false">Comparator</xref> is required, or use any of its special operations, such as:

     *  <xref uid="com.azure.cosmos.implementation.guava25.collect.Ordering.immutableSortedCopy" data-throw-if-not-resolved="false">#immutableSortedCopy</xref>
     *  <xref uid="com.azure.cosmos.implementation.guava25.collect.Ordering.isOrdered" data-throw-if-not-resolved="false">#isOrdered</xref> / <xref uid="com.azure.cosmos.implementation.guava25.collect.Ordering.isStrictlyOrdered" data-throw-if-not-resolved="false">#isStrictlyOrdered</xref>
     *  <xref uid="com.azure.cosmos.implementation.guava25.collect.Ordering.min" data-throw-if-not-resolved="false">#min</xref> / <xref uid="com.azure.cosmos.implementation.guava25.collect.Ordering.max" data-throw-if-not-resolved="false">#max</xref>

    ### Understanding complex orderings ###


    Complex chained orderings like the following example can be challenging to understand.


    ```java

    Ordering ordering =
         Ordering.natural()
             .nullsFirst()
             .onResultOf(getBarFunction)
             .nullsLast();
    ```


    Note that each chaining method returns a new ordering instance which is backed by the previous instance, but has the chance to act on values *before* handing off to that backing instance. As a result, it usually helps to read chained ordering expressions *backwards*. For example, when `compare` is called on the above ordering:


    1.  First, if only one `Foo` is null, that null value is treated as *greater*

    2.  Next, non-null `Foo` values are passed to `getBarFunction` (we will be comparing `Bar` values from now on)

    3.  Next, if only one `Bar` is null, that null value is treated as *lesser*

    4.  Finally, natural ordering is used (i.e. the result of `Bar.compareTo(Bar)` is returned)


    Alas, <xref uid="com.azure.cosmos.implementation.guava25.collect.Ordering.reverse" data-throw-if-not-resolved="false">#reverse</xref> is a little different. As you read backwards through a chain and encounter a call to `reverse`, continue working backwards until a result is determined, and then reverse that result.


    ### Additional notes ###


    Except as noted, the orderings returned by the factory methods of this class are serializable if and only if the provided instances that back them are. For example, if `ordering` and `function` can themselves be serialized, then `ordering.onResultOf(function)` can as well.


    ### For Java 8 users ###


    If you are using Java 8, this class is now obsolete. Most of its functionality is now provided by <xref uid="java.util.stream.Stream" data-throw-if-not-resolved="false">Stream</xref> and by <xref uid="? extends java.util.Comparator" data-throw-if-not-resolved="false">Comparator</xref> itself, and the rest can now be found as static methods in our new <xref uid="com.azure.cosmos.implementation.guava25.collect.Comparators" data-throw-if-not-resolved="false">Comparators</xref> class. See each method below for further instructions. Whenever possible, you should change any references of type `Ordering` to be of type `Comparator` instead. However, at this time we have no plan to *deprecate* this class.


    Many replacements involve adopting `Stream`, and these changes can sometimes make your code verbose. Whenever following this advice, you should check whether `Stream` could be adopted more comprehensively in your code; the end result may be quite a bit simpler.


    ### See also ###


    See the Guava User Guide article on [`Ordering`][Ordering].



    [Ordering]: https://github.com/google/guava/wiki/OrderingExplained
  syntax:
    content: public abstract class Ordering<T> implements Comparator<T>
    typeParameters:
    - id: T
  inheritance:
  - java.lang.Object
  implements:
  - java.util.Comparator<T>
  inheritedMembers:
  - java.lang.Object.clone()
  - java.lang.Object.equals(java.lang.Object)
  - java.lang.Object.finalize()
  - java.lang.Object.getClass()
  - java.lang.Object.hashCode()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.toString()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
- uid: com.azure.cosmos.implementation.guava25.collect.Ordering.<C>natural()
  id: <C>natural()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.Ordering
  langs:
  - java
  name: <C>natural()
  nameWithType: Ordering<T>.<C>natural()
  fullName: com.azure.cosmos.implementation.guava25.collect.Ordering<T>.<C>natural()
  overload: com.azure.cosmos.implementation.guava25.collect.Ordering.natural*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Returns a serializable ordering that uses the natural order of the values. The ordering throws a <xref uid="" data-throw-if-not-resolved="false">NullPointerException</xref> when passed a null parameter.


    The type specification is ``, instead of the technically correct `>`, to support legacy types from before Java 5.


    **Java 8 users:** use <xref uid="? extends java.util.Comparator.naturalOrder" data-throw-if-not-resolved="false">Comparator#naturalOrder</xref> instead.
  syntax:
    content: public static Ordering<C> <C>natural()
    return:
      type: com.azure.cosmos.implementation.guava25.collect.Ordering<C>
- uid: com.azure.cosmos.implementation.guava25.collect.Ordering.<E>greatestOf(java.lang.Iterable<E>,int)
  id: <E>greatestOf(java.lang.Iterable<E>,int)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.Ordering
  langs:
  - java
  name: <E>greatestOf(Iterable<E> iterable, int k)
  nameWithType: Ordering<T>.<E>greatestOf(Iterable<E> iterable, int k)
  fullName: com.azure.cosmos.implementation.guava25.collect.Ordering<T>.<E>greatestOf(Iterable<E> iterable, int k)
  overload: com.azure.cosmos.implementation.guava25.collect.Ordering.greatestOf*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Returns the `k` greatest elements of the given iterable according to this ordering, in order from greatest to least. If there are fewer than `k` elements present, all will be included.


    The implementation does not necessarily use a *stable* sorting algorithm; when multiple elements are equivalent, it is undefined which will come first.


    **Java 8 users:** Use `Streams.stream(iterable).collect(Comparators.greatest(k, thisComparator))` instead.
  syntax:
    content: public List<E> <E>greatestOf(Iterable<E> iterable, int k)
    parameters:
    - id: iterable
      type: java.lang.Iterable<E>
    - id: k
      type: int
    return:
      type: java.util.List<E>
      description: >-
        an immutable <code>RandomAccess</code> list of the <code>k</code> greatest elements in
             <i>descending order</i>
- uid: com.azure.cosmos.implementation.guava25.collect.Ordering.<E>greatestOf(java.util.Iterator<E>,int)
  id: <E>greatestOf(java.util.Iterator<E>,int)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.Ordering
  langs:
  - java
  name: <E>greatestOf(Iterator<E> iterator, int k)
  nameWithType: Ordering<T>.<E>greatestOf(Iterator<E> iterator, int k)
  fullName: com.azure.cosmos.implementation.guava25.collect.Ordering<T>.<E>greatestOf(Iterator<E> iterator, int k)
  overload: com.azure.cosmos.implementation.guava25.collect.Ordering.greatestOf*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Returns the `k` greatest elements from the given iterator according to this ordering, in order from greatest to least. If there are fewer than `k` elements present, all will be included.


    The implementation does not necessarily use a *stable* sorting algorithm; when multiple elements are equivalent, it is undefined which will come first.


    **Java 8 users:** Continue to use this method for now. After the next release of Guava, use `Streams.stream(iterator).collect(Comparators.greatest(k, thisComparator))` instead.
  syntax:
    content: public List<E> <E>greatestOf(Iterator<E> iterator, int k)
    parameters:
    - id: iterator
      type: java.util.Iterator<E>
    - id: k
      type: int
    return:
      type: java.util.List<E>
      description: >-
        an immutable <code>RandomAccess</code> list of the <code>k</code> greatest elements in
             <i>descending order</i>
- uid: com.azure.cosmos.implementation.guava25.collect.Ordering.<E>immutableSortedCopy(java.lang.Iterable<E>)
  id: <E>immutableSortedCopy(java.lang.Iterable<E>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.Ordering
  langs:
  - java
  name: <E>immutableSortedCopy(Iterable<E> elements)
  nameWithType: Ordering<T>.<E>immutableSortedCopy(Iterable<E> elements)
  fullName: com.azure.cosmos.implementation.guava25.collect.Ordering<T>.<E>immutableSortedCopy(Iterable<E> elements)
  overload: com.azure.cosmos.implementation.guava25.collect.Ordering.immutableSortedCopy*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Returns an **immutable** list containing `elements` sorted by this ordering. The input is not modified.


    Unlike <xref uid="com.azure.cosmos.implementation.guava25.collect.Sets.&lt;E&gt;newTreeSet(java.lang.Iterable&lt;? extends E&gt;)" data-throw-if-not-resolved="false">Sets#newTreeSet(Iterable)</xref>, this method does not discard elements that are duplicates according to the comparator. The sort performed is *stable*, meaning that such elements will appear in the returned list in the same order they appeared in `elements`.


    **Performance note:** According to our benchmarking on Open JDK 7, this method is the most efficient way to make a sorted copy of a collection.
  syntax:
    content: public ImmutableList<E> <E>immutableSortedCopy(Iterable<E> elements)
    parameters:
    - id: elements
      type: java.lang.Iterable<E>
    return:
      type: com.azure.cosmos.implementation.guava25.collect.ImmutableList<E>
- uid: com.azure.cosmos.implementation.guava25.collect.Ordering.<E>leastOf(java.lang.Iterable<E>,int)
  id: <E>leastOf(java.lang.Iterable<E>,int)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.Ordering
  langs:
  - java
  name: <E>leastOf(Iterable<E> iterable, int k)
  nameWithType: Ordering<T>.<E>leastOf(Iterable<E> iterable, int k)
  fullName: com.azure.cosmos.implementation.guava25.collect.Ordering<T>.<E>leastOf(Iterable<E> iterable, int k)
  overload: com.azure.cosmos.implementation.guava25.collect.Ordering.leastOf*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Returns the `k` least elements of the given iterable according to this ordering, in order from least to greatest. If there are fewer than `k` elements present, all will be included.


    The implementation does not necessarily use a *stable* sorting algorithm; when multiple elements are equivalent, it is undefined which will come first.


    **Java 8 users:** Use `Streams.stream(iterable).collect(Comparators.least(k, thisComparator))` instead.
  syntax:
    content: public List<E> <E>leastOf(Iterable<E> iterable, int k)
    parameters:
    - id: iterable
      type: java.lang.Iterable<E>
    - id: k
      type: int
    return:
      type: java.util.List<E>
      description: >-
        an immutable <code>RandomAccess</code> list of the <code>k</code> least elements in ascending
             order
- uid: com.azure.cosmos.implementation.guava25.collect.Ordering.<E>leastOf(java.util.Iterator<E>,int)
  id: <E>leastOf(java.util.Iterator<E>,int)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.Ordering
  langs:
  - java
  name: <E>leastOf(Iterator<E> iterator, int k)
  nameWithType: Ordering<T>.<E>leastOf(Iterator<E> iterator, int k)
  fullName: com.azure.cosmos.implementation.guava25.collect.Ordering<T>.<E>leastOf(Iterator<E> iterator, int k)
  overload: com.azure.cosmos.implementation.guava25.collect.Ordering.leastOf*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Returns the `k` least elements from the given iterator according to this ordering, in order from least to greatest. If there are fewer than `k` elements present, all will be included.


    The implementation does not necessarily use a *stable* sorting algorithm; when multiple elements are equivalent, it is undefined which will come first.


    **Java 8 users:** Continue to use this method for now. After the next release of Guava, use `Streams.stream(iterator).collect(Comparators.least(k, thisComparator))` instead.
  syntax:
    content: public List<E> <E>leastOf(Iterator<E> iterator, int k)
    parameters:
    - id: iterator
      type: java.util.Iterator<E>
    - id: k
      type: int
    return:
      type: java.util.List<E>
      description: >-
        an immutable <code>RandomAccess</code> list of the <code>k</code> least elements in ascending
             order
- uid: com.azure.cosmos.implementation.guava25.collect.Ordering.<E>max(E,E)
  id: <E>max(E,E)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.Ordering
  langs:
  - java
  name: <E>max(E a, E b)
  nameWithType: Ordering<T>.<E>max(E a, E b)
  fullName: com.azure.cosmos.implementation.guava25.collect.Ordering<T>.<E>max(E a, E b)
  overload: com.azure.cosmos.implementation.guava25.collect.Ordering.max*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Returns the greater of the two values according to this ordering. If the values compare as 0, the first is returned.


    **Implementation note:** this method is invoked by the default implementations of the other `max` overloads, so overriding it will affect their behavior.


    **Java 8 users:** Use `Collections.max(Arrays.asList(a, b), thisComparator)` instead (but note that it does not guarantee which tied maximum element is returned).
  syntax:
    content: public E <E>max(E a, E b)
    parameters:
    - id: a
      type: E
      description: value to compare, returned if greater than or equal to b.
    - id: b
      type: E
      description: value to compare.
    return:
      type: E
- uid: com.azure.cosmos.implementation.guava25.collect.Ordering.<E>max(E,E,E,E...)
  id: <E>max(E,E,E,E...)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.Ordering
  langs:
  - java
  name: <E>max(E a, E b, E c, E[] rest)
  nameWithType: Ordering<T>.<E>max(E a, E b, E c, E[] rest)
  fullName: com.azure.cosmos.implementation.guava25.collect.Ordering<T>.<E>max(E a, E b, E c, E[] rest)
  overload: com.azure.cosmos.implementation.guava25.collect.Ordering.max*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Returns the greatest of the specified values according to this ordering. If there are multiple greatest values, the first of those is returned.


    **Java 8 users:** Use `Collections.max(Arrays.asList(a, b, c...), thisComparator)` instead (but note that it does not guarantee which tied maximum element is returned).
  syntax:
    content: public E <E>max(E a, E b, E c, E[] rest)
    parameters:
    - id: a
      type: E
      description: value to compare, returned if greater than or equal to the rest.
    - id: b
      type: E
      description: value to compare
    - id: c
      type: E
      description: value to compare
    - id: rest
      type: E[]
      description: values to compare
    return:
      type: E
- uid: com.azure.cosmos.implementation.guava25.collect.Ordering.<E>max(java.lang.Iterable<E>)
  id: <E>max(java.lang.Iterable<E>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.Ordering
  langs:
  - java
  name: <E>max(Iterable<E> iterable)
  nameWithType: Ordering<T>.<E>max(Iterable<E> iterable)
  fullName: com.azure.cosmos.implementation.guava25.collect.Ordering<T>.<E>max(Iterable<E> iterable)
  overload: com.azure.cosmos.implementation.guava25.collect.Ordering.max*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Returns the greatest of the specified values according to this ordering. If there are multiple greatest values, the first of those is returned.


    **Java 8 users:** If `iterable` is a <xref uid="java.util.Collection" data-throw-if-not-resolved="false">Collection</xref>, use `Collections.max(collection, thisComparator)` instead. Otherwise, continue to use this method for now. After the next release of Guava, use `Streams.stream(iterable).max(thisComparator).get()` instead. Note that these alternatives do not guarantee which tied maximum element is returned)
  syntax:
    content: public E <E>max(Iterable<E> iterable)
    parameters:
    - id: iterable
      type: java.lang.Iterable<E>
      description: the iterable whose maximum element is to be determined
    return:
      type: E
- uid: com.azure.cosmos.implementation.guava25.collect.Ordering.<E>max(java.util.Iterator<E>)
  id: <E>max(java.util.Iterator<E>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.Ordering
  langs:
  - java
  name: <E>max(Iterator<E> iterator)
  nameWithType: Ordering<T>.<E>max(Iterator<E> iterator)
  fullName: com.azure.cosmos.implementation.guava25.collect.Ordering<T>.<E>max(Iterator<E> iterator)
  overload: com.azure.cosmos.implementation.guava25.collect.Ordering.max*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Returns the greatest of the specified values according to this ordering. If there are multiple greatest values, the first of those is returned. The iterator will be left exhausted: its `hasNext()` method will return `false`.


    **Java 8 users:** Continue to use this method for now. After the next release of Guava, use `Streams.stream(iterator).max(thisComparator).get()` instead (but note that it does not guarantee which tied maximum element is returned).
  syntax:
    content: public E <E>max(Iterator<E> iterator)
    parameters:
    - id: iterator
      type: java.util.Iterator<E>
      description: the iterator whose maximum element is to be determined
    return:
      type: E
- uid: com.azure.cosmos.implementation.guava25.collect.Ordering.<E>min(E,E)
  id: <E>min(E,E)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.Ordering
  langs:
  - java
  name: <E>min(E a, E b)
  nameWithType: Ordering<T>.<E>min(E a, E b)
  fullName: com.azure.cosmos.implementation.guava25.collect.Ordering<T>.<E>min(E a, E b)
  overload: com.azure.cosmos.implementation.guava25.collect.Ordering.min*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Returns the lesser of the two values according to this ordering. If the values compare as 0, the first is returned.


    **Implementation note:** this method is invoked by the default implementations of the other `min` overloads, so overriding it will affect their behavior.


    **Java 8 users:** Use `Collections.min(Arrays.asList(a, b), thisComparator)` instead (but note that it does not guarantee which tied minimum element is returned).
  syntax:
    content: public E <E>min(E a, E b)
    parameters:
    - id: a
      type: E
      description: value to compare, returned if less than or equal to b.
    - id: b
      type: E
      description: value to compare.
    return:
      type: E
- uid: com.azure.cosmos.implementation.guava25.collect.Ordering.<E>min(E,E,E,E...)
  id: <E>min(E,E,E,E...)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.Ordering
  langs:
  - java
  name: <E>min(E a, E b, E c, E[] rest)
  nameWithType: Ordering<T>.<E>min(E a, E b, E c, E[] rest)
  fullName: com.azure.cosmos.implementation.guava25.collect.Ordering<T>.<E>min(E a, E b, E c, E[] rest)
  overload: com.azure.cosmos.implementation.guava25.collect.Ordering.min*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Returns the least of the specified values according to this ordering. If there are multiple least values, the first of those is returned.


    **Java 8 users:** Use `Collections.min(Arrays.asList(a, b, c...), thisComparator)` instead (but note that it does not guarantee which tied minimum element is returned).
  syntax:
    content: public E <E>min(E a, E b, E c, E[] rest)
    parameters:
    - id: a
      type: E
      description: value to compare, returned if less than or equal to the rest.
    - id: b
      type: E
      description: value to compare
    - id: c
      type: E
      description: value to compare
    - id: rest
      type: E[]
      description: values to compare
    return:
      type: E
- uid: com.azure.cosmos.implementation.guava25.collect.Ordering.<E>min(java.lang.Iterable<E>)
  id: <E>min(java.lang.Iterable<E>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.Ordering
  langs:
  - java
  name: <E>min(Iterable<E> iterable)
  nameWithType: Ordering<T>.<E>min(Iterable<E> iterable)
  fullName: com.azure.cosmos.implementation.guava25.collect.Ordering<T>.<E>min(Iterable<E> iterable)
  overload: com.azure.cosmos.implementation.guava25.collect.Ordering.min*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Returns the least of the specified values according to this ordering. If there are multiple least values, the first of those is returned.


    **Java 8 users:** If `iterable` is a <xref uid="java.util.Collection" data-throw-if-not-resolved="false">Collection</xref>, use `Collections.min(collection, thisComparator)` instead. Otherwise, continue to use this method for now. After the next release of Guava, use `Streams.stream(iterable).min(thisComparator).get()` instead. Note that these alternatives do not guarantee which tied minimum element is returned)
  syntax:
    content: public E <E>min(Iterable<E> iterable)
    parameters:
    - id: iterable
      type: java.lang.Iterable<E>
      description: the iterable whose minimum element is to be determined
    return:
      type: E
- uid: com.azure.cosmos.implementation.guava25.collect.Ordering.<E>min(java.util.Iterator<E>)
  id: <E>min(java.util.Iterator<E>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.Ordering
  langs:
  - java
  name: <E>min(Iterator<E> iterator)
  nameWithType: Ordering<T>.<E>min(Iterator<E> iterator)
  fullName: com.azure.cosmos.implementation.guava25.collect.Ordering<T>.<E>min(Iterator<E> iterator)
  overload: com.azure.cosmos.implementation.guava25.collect.Ordering.min*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Returns the least of the specified values according to this ordering. If there are multiple least values, the first of those is returned. The iterator will be left exhausted: its `hasNext()` method will return `false`.


    **Java 8 users:** Continue to use this method for now. After the next release of Guava, use `Streams.stream(iterator).min(thisComparator).get()` instead (but note that it does not guarantee which tied minimum element is returned).
  syntax:
    content: public E <E>min(Iterator<E> iterator)
    parameters:
    - id: iterator
      type: java.util.Iterator<E>
      description: the iterator whose minimum element is to be determined
    return:
      type: E
- uid: com.azure.cosmos.implementation.guava25.collect.Ordering.<E>sortedCopy(java.lang.Iterable<E>)
  id: <E>sortedCopy(java.lang.Iterable<E>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.Ordering
  langs:
  - java
  name: <E>sortedCopy(Iterable<E> elements)
  nameWithType: Ordering<T>.<E>sortedCopy(Iterable<E> elements)
  fullName: com.azure.cosmos.implementation.guava25.collect.Ordering<T>.<E>sortedCopy(Iterable<E> elements)
  overload: com.azure.cosmos.implementation.guava25.collect.Ordering.sortedCopy*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Returns a **mutable** list containing `elements` sorted by this ordering; use this only when the resulting list may need further modification, or may contain `null`. The input is not modified. The returned list is serializable and has random access.


    Unlike <xref uid="com.azure.cosmos.implementation.guava25.collect.Sets.&lt;E&gt;newTreeSet(java.lang.Iterable&lt;? extends E&gt;)" data-throw-if-not-resolved="false">Sets#newTreeSet(Iterable)</xref>, this method does not discard elements that are duplicates according to the comparator. The sort performed is *stable*, meaning that such elements will appear in the returned list in the same order they appeared in `elements`.


    **Performance note:** According to our benchmarking on Open JDK 7, <xref uid="com.azure.cosmos.implementation.guava25.collect.Ordering.immutableSortedCopy" data-throw-if-not-resolved="false">#immutableSortedCopy</xref> generally performs better (in both time and space) than this method, and this method in turn generally performs better than copying the list and calling <xref uid="" data-throw-if-not-resolved="false">Collections#sort(List)</xref>.
  syntax:
    content: public List<E> <E>sortedCopy(Iterable<E> elements)
    parameters:
    - id: elements
      type: java.lang.Iterable<E>
    return:
      type: java.util.List<E>
- uid: com.azure.cosmos.implementation.guava25.collect.Ordering.<F>onResultOf(com.azure.cosmos.implementation.guava25.base.Function<F,? extends T>)
  id: <F>onResultOf(com.azure.cosmos.implementation.guava25.base.Function<F,? extends T>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.Ordering
  langs:
  - java
  name: <F>onResultOf(Function<F,? extends T> function)
  nameWithType: Ordering<T>.<F>onResultOf(Function<F,? extends T> function)
  fullName: com.azure.cosmos.implementation.guava25.collect.Ordering<T>.<F>onResultOf(Function<F,? extends T> function)
  overload: com.azure.cosmos.implementation.guava25.collect.Ordering.onResultOf*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Returns a new ordering on `F` which orders elements by first applying a function to them, then comparing those results using `this`. For example, to compare objects by their string forms, in a case-insensitive manner, use:


    ```java

    Ordering.from(String.CASE_INSENSITIVE_ORDER)
         .onResultOf(Functions.toStringFunction())
    ```


    **Java 8 users:** Use `Comparator.comparing(function, thisComparator)` instead (you can omit the comparator if it is the natural order).
  syntax:
    content: public Ordering<F> <F>onResultOf(Function<F,? extends T> function)
    parameters:
    - id: function
      type: com.azure.cosmos.implementation.guava25.base.Function<F,? extends T>
    return:
      type: com.azure.cosmos.implementation.guava25.collect.Ordering<F>
- uid: com.azure.cosmos.implementation.guava25.collect.Ordering.<S>lexicographical()
  id: <S>lexicographical()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.Ordering
  langs:
  - java
  name: <S>lexicographical()
  nameWithType: Ordering<T>.<S>lexicographical()
  fullName: com.azure.cosmos.implementation.guava25.collect.Ordering<T>.<S>lexicographical()
  overload: com.azure.cosmos.implementation.guava25.collect.Ordering.lexicographical*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Returns a new ordering which sorts iterables by comparing corresponding elements pairwise until a nonzero result is found; imposes "dictionary order". If the end of one iterable is reached, but not the other, the shorter iterable is considered to be less than the longer one. For example, a lexicographical natural ordering over integers considers `[] < [1] < [1, 1] < [1, 2] < [2]`.


    Note that `ordering.lexicographical().reverse()` is not equivalent to `ordering.reverse().lexicographical()` (consider how each would order `[1]` and `[1, 1]`).


    **Java 8 users:** Use <xref uid="com.azure.cosmos.implementation.guava25.collect.Comparators.&lt;T,S&gt;lexicographical(java.util.Comparator&lt;T&gt;)" data-throw-if-not-resolved="false">Comparators#lexicographical(Comparator)</xref> instead.
  syntax:
    content: public Ordering<Iterable<S>> <S>lexicographical()
    return:
      type: com.azure.cosmos.implementation.guava25.collect.Ordering<java.lang.Iterable<S>>
- uid: com.azure.cosmos.implementation.guava25.collect.Ordering.<S>nullsFirst()
  id: <S>nullsFirst()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.Ordering
  langs:
  - java
  name: <S>nullsFirst()
  nameWithType: Ordering<T>.<S>nullsFirst()
  fullName: com.azure.cosmos.implementation.guava25.collect.Ordering<T>.<S>nullsFirst()
  overload: com.azure.cosmos.implementation.guava25.collect.Ordering.nullsFirst*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Returns an ordering that treats `null` as less than all other values and uses `this` to compare non-null values.


    **Java 8 users:** Use `Comparator.nullsFirst(thisComparator)` instead.
  syntax:
    content: public Ordering<S> <S>nullsFirst()
    return:
      type: com.azure.cosmos.implementation.guava25.collect.Ordering<S>
- uid: com.azure.cosmos.implementation.guava25.collect.Ordering.<S>nullsLast()
  id: <S>nullsLast()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.Ordering
  langs:
  - java
  name: <S>nullsLast()
  nameWithType: Ordering<T>.<S>nullsLast()
  fullName: com.azure.cosmos.implementation.guava25.collect.Ordering<T>.<S>nullsLast()
  overload: com.azure.cosmos.implementation.guava25.collect.Ordering.nullsLast*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Returns an ordering that treats `null` as greater than all other values and uses this ordering to compare non-null values.


    **Java 8 users:** Use `Comparator.nullsLast(thisComparator)` instead.
  syntax:
    content: public Ordering<S> <S>nullsLast()
    return:
      type: com.azure.cosmos.implementation.guava25.collect.Ordering<S>
- uid: com.azure.cosmos.implementation.guava25.collect.Ordering.<S>reverse()
  id: <S>reverse()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.Ordering
  langs:
  - java
  name: <S>reverse()
  nameWithType: Ordering<T>.<S>reverse()
  fullName: com.azure.cosmos.implementation.guava25.collect.Ordering<T>.<S>reverse()
  overload: com.azure.cosmos.implementation.guava25.collect.Ordering.reverse*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Returns the reverse of this ordering; the `Ordering` equivalent to <xref uid="" data-throw-if-not-resolved="false">Collections#reverseOrder(Comparator)</xref>.


    **Java 8 users:** Use `thisComparator.reversed()` instead.
  syntax:
    content: public Ordering<S> <S>reverse()
    return:
      type: com.azure.cosmos.implementation.guava25.collect.Ordering<S>
- uid: com.azure.cosmos.implementation.guava25.collect.Ordering.<T>compound(java.lang.Iterable<? extends java.util.Comparator<? super T>>)
  id: <T>compound(java.lang.Iterable<? extends java.util.Comparator<? super T>>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.Ordering
  langs:
  - java
  name: <T>compound(Iterable<? extends Comparator<? super T>> comparators)
  nameWithType: Ordering<T>.<T>compound(Iterable<? extends Comparator<? super T>> comparators)
  fullName: com.azure.cosmos.implementation.guava25.collect.Ordering<T>.<T>compound(Iterable<? extends Comparator<? super T>> comparators)
  overload: com.azure.cosmos.implementation.guava25.collect.Ordering.compound*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Returns an ordering which tries each given comparator in order until a non-zero result is found, returning that result, and returning zero only if all comparators return zero. The returned ordering is based on the state of the `comparators` iterable at the time it was provided to this method.


    The returned ordering is equivalent to that produced using `Ordering.from(comp1).compound(comp2).compound(comp3) . . .`.


    **Warning:** Supplying an argument with undefined iteration order, such as a <xref uid="java.util.HashSet" data-throw-if-not-resolved="false">HashSet</xref>, will produce non-deterministic results.


    **Java 8 users:** Use a chain of calls to <xref uid="? extends java.util.Comparator.thenComparing*" data-throw-if-not-resolved="false">Comparator#thenComparing(Comparator)</xref>, or `comparatorCollection.stream().reduce(Comparator::thenComparing).get()` (if the collection might be empty, also provide a default comparator as the `identity` parameter to `reduce`).
  syntax:
    content: public static Ordering<T> <T>compound(Iterable<? extends Comparator<? super T>> comparators)
    parameters:
    - id: comparators
      type: java.lang.Iterable<? extends java.util.Comparator<? super T>>
      description: the comparators to try in order
    return:
      type: com.azure.cosmos.implementation.guava25.collect.Ordering<T>
- uid: com.azure.cosmos.implementation.guava25.collect.Ordering.<T>explicit(T,T...)
  id: <T>explicit(T,T...)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.Ordering
  langs:
  - java
  name: <T>explicit(T leastValue, T[] remainingValuesInOrder)
  nameWithType: Ordering<T>.<T>explicit(T leastValue, T[] remainingValuesInOrder)
  fullName: com.azure.cosmos.implementation.guava25.collect.Ordering<T>.<T>explicit(T leastValue, T[] remainingValuesInOrder)
  overload: com.azure.cosmos.implementation.guava25.collect.Ordering.explicit*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Returns an ordering that compares objects according to the order in which they are given to this method. Only objects present in the argument list (according to <xref uid="java.lang.Object.equals" data-throw-if-not-resolved="false">Object#equals</xref>) may be compared. This comparator imposes a "partial ordering" over the type `T`. Null values in the argument list are not supported.


    The returned comparator throws a <xref uid="" data-throw-if-not-resolved="false">ClassCastException</xref> when it receives an input parameter that isn't among the provided values.


    The generated comparator is serializable if all the provided values are serializable.
  syntax:
    content: public static Ordering<T> <T>explicit(T leastValue, T[] remainingValuesInOrder)
    parameters:
    - id: leastValue
      type: T
      description: >-
        the value which the returned comparator should consider the "least" of all
             values
    - id: remainingValuesInOrder
      type: T[]
      description: >-
        the rest of the values that the returned comparator will be able
             to compare, in the order the comparator should follow
    return:
      type: com.azure.cosmos.implementation.guava25.collect.Ordering<T>
      description: the comparator described above
- uid: com.azure.cosmos.implementation.guava25.collect.Ordering.<T>explicit(java.util.List<T>)
  id: <T>explicit(java.util.List<T>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.Ordering
  langs:
  - java
  name: <T>explicit(List<T> valuesInOrder)
  nameWithType: Ordering<T>.<T>explicit(List<T> valuesInOrder)
  fullName: com.azure.cosmos.implementation.guava25.collect.Ordering<T>.<T>explicit(List<T> valuesInOrder)
  overload: com.azure.cosmos.implementation.guava25.collect.Ordering.explicit*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Returns an ordering that compares objects according to the order in which they appear in the given list. Only objects present in the list (according to <xref uid="java.lang.Object.equals" data-throw-if-not-resolved="false">Object#equals</xref>) may be compared. This comparator imposes a "partial ordering" over the type `T`. Subsequent changes to the `valuesInOrder` list will have no effect on the returned comparator. Null values in the list are not supported.


    The returned comparator throws a <xref uid="" data-throw-if-not-resolved="false">ClassCastException</xref> when it receives an input parameter that isn't among the provided values.


    The generated comparator is serializable if all the provided values are serializable.
  syntax:
    content: public static Ordering<T> <T>explicit(List<T> valuesInOrder)
    parameters:
    - id: valuesInOrder
      type: java.util.List<T>
      description: >-
        the values that the returned comparator will be able to compare, in the
             order the comparator should induce
    return:
      type: com.azure.cosmos.implementation.guava25.collect.Ordering<T>
      description: the comparator described above
- uid: com.azure.cosmos.implementation.guava25.collect.Ordering.<T>from(com.azure.cosmos.implementation.guava25.collect.Ordering<T>)
  id: <T>from(com.azure.cosmos.implementation.guava25.collect.Ordering<T>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.Ordering
  langs:
  - java
  name: <T>from(Ordering<T> ordering)
  nameWithType: Ordering<T>.<T>from(Ordering<T> ordering)
  fullName: com.azure.cosmos.implementation.guava25.collect.Ordering<T>.<T>from(Ordering<T> ordering)
  overload: com.azure.cosmos.implementation.guava25.collect.Ordering.from*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Simply returns its argument.
  syntax:
    content: public static Ordering<T> <T>from(Ordering<T> ordering)
    parameters:
    - id: ordering
      type: com.azure.cosmos.implementation.guava25.collect.Ordering<T>
    return:
      type: com.azure.cosmos.implementation.guava25.collect.Ordering<T>
- uid: com.azure.cosmos.implementation.guava25.collect.Ordering.<T>from(java.util.Comparator<T>)
  id: <T>from(java.util.Comparator<T>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.Ordering
  langs:
  - java
  name: <T>from(Comparator<T> comparator)
  nameWithType: Ordering<T>.<T>from(Comparator<T> comparator)
  fullName: com.azure.cosmos.implementation.guava25.collect.Ordering<T>.<T>from(Comparator<T> comparator)
  overload: com.azure.cosmos.implementation.guava25.collect.Ordering.from*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Returns an ordering based on an *existing* comparator instance. Note that it is unnecessary to create a *new* anonymous inner class implementing `Comparator` just to pass it in here. Instead, simply subclass `Ordering` and implement its `compare` method directly.


    **Java 8 users:** this class is now obsolete as explained in the class documentation, so there is no need to use this method.
  syntax:
    content: public static Ordering<T> <T>from(Comparator<T> comparator)
    parameters:
    - id: comparator
      type: java.util.Comparator<T>
      description: the comparator that defines the order
    return:
      type: com.azure.cosmos.implementation.guava25.collect.Ordering<T>
      description: >-
        comparator itself if it is already an <code>Ordering</code>; otherwise an ordering that
             wraps that comparator
- uid: com.azure.cosmos.implementation.guava25.collect.Ordering.<U>compound(java.util.Comparator<? super U>)
  id: <U>compound(java.util.Comparator<? super U>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.Ordering
  langs:
  - java
  name: <U>compound(Comparator<? super U> secondaryComparator)
  nameWithType: Ordering<T>.<U>compound(Comparator<? super U> secondaryComparator)
  fullName: com.azure.cosmos.implementation.guava25.collect.Ordering<T>.<U>compound(Comparator<? super U> secondaryComparator)
  overload: com.azure.cosmos.implementation.guava25.collect.Ordering.compound*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Returns an ordering which first uses the ordering `this`, but which in the event of a "tie", then delegates to `secondaryComparator`. For example, to sort a bug list first by status and second by priority, you might use `byStatus.compound(byPriority)`. For a compound ordering with three or more components, simply chain multiple calls to this method.


    An ordering produced by this method, or a chain of calls to this method, is equivalent to one created using <xref uid="com.azure.cosmos.implementation.guava25.collect.Ordering.compound*" data-throw-if-not-resolved="false">Ordering#compound(Iterable)</xref> on the same component comparators.


    **Java 8 users:** Use `thisComparator.thenComparing(secondaryComparator)` instead. Depending on what `secondaryComparator` is, one of the other overloads of `thenComparing` may be even more useful.
  syntax:
    content: public Ordering<U> <U>compound(Comparator<? super U> secondaryComparator)
    parameters:
    - id: secondaryComparator
      type: java.util.Comparator<? super U>
    return:
      type: com.azure.cosmos.implementation.guava25.collect.Ordering<U>
- uid: com.azure.cosmos.implementation.guava25.collect.Ordering.Ordering()
  id: Ordering()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.Ordering
  langs:
  - java
  name: Ordering()
  nameWithType: Ordering<T>.Ordering()
  fullName: com.azure.cosmos.implementation.guava25.collect.Ordering<T>.Ordering()
  overload: com.azure.cosmos.implementation.guava25.collect.Ordering.Ordering*
  type: Constructor
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Constructs a new instance of this class (only invokable by the subclass constructor, typically implicit).
  syntax:
    content: protected Ordering()
- uid: com.azure.cosmos.implementation.guava25.collect.Ordering.allEqual()
  id: allEqual()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.Ordering
  langs:
  - java
  name: allEqual()
  nameWithType: Ordering<T>.allEqual()
  fullName: com.azure.cosmos.implementation.guava25.collect.Ordering<T>.allEqual()
  overload: com.azure.cosmos.implementation.guava25.collect.Ordering.allEqual*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Returns an ordering which treats all values as equal, indicating "no ordering." Passing this ordering to any *stable* sort algorithm results in no change to the order of elements. Note especially that <xref uid="com.azure.cosmos.implementation.guava25.collect.Ordering.sortedCopy" data-throw-if-not-resolved="false">#sortedCopy</xref> and <xref uid="com.azure.cosmos.implementation.guava25.collect.Ordering.immutableSortedCopy" data-throw-if-not-resolved="false">#immutableSortedCopy</xref> are stable, and in the returned instance these are implemented by simply copying the source list.


    Example:


    ```java

    Ordering.allEqual().nullsLast().sortedCopy(
         asList(t, null, e, s, null, t, null))
    ```


    Assuming `t`, `e` and `s` are non-null, this returns `[t, e, s, t, null, null, null]` regardless of the true comparison order of those three values (which might not even implement <xref uid="java.lang.Comparable" data-throw-if-not-resolved="false">Comparable</xref> at all).


    **Warning:** by definition, this comparator is not *consistent with equals* (as defined <xref uid="? extends java.util.Comparator" data-throw-if-not-resolved="false">here</xref>). Avoid its use in APIs, such as <xref uid="java.util.TreeSet.TreeSet*" data-throw-if-not-resolved="false">TreeSet#TreeSet(Comparator)</xref>, where such consistency is expected.


    The returned comparator is serializable.


    **Java 8 users:** Use the lambda expression `(a, b) -> 0` instead (in certain cases you may need to cast that to `Comparator`).
  syntax:
    content: public static Ordering<Object> allEqual()
    return:
      type: com.azure.cosmos.implementation.guava25.collect.Ordering<java.lang.Object>
- uid: com.azure.cosmos.implementation.guava25.collect.Ordering.arbitrary()
  id: arbitrary()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.Ordering
  langs:
  - java
  name: arbitrary()
  nameWithType: Ordering<T>.arbitrary()
  fullName: com.azure.cosmos.implementation.guava25.collect.Ordering<T>.arbitrary()
  overload: com.azure.cosmos.implementation.guava25.collect.Ordering.arbitrary*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Returns an arbitrary ordering over all objects, for which `compare(a, b) == 0` implies `a == b` (identity equality). There is no meaning whatsoever to the order imposed, but it is constant for the life of the VM.


    Because the ordering is identity-based, it is not "consistent with <xref uid="java.lang.Object.equals(java.lang.Object)" data-throw-if-not-resolved="false">Object#equals(Object)</xref>" as defined by <xref uid="? extends java.util.Comparator" data-throw-if-not-resolved="false">Comparator</xref>. Use caution when building a <xref uid="java.util.SortedSet" data-throw-if-not-resolved="false">SortedSet</xref> or <xref uid="java.util.SortedMap" data-throw-if-not-resolved="false">SortedMap</xref> from it, as the resulting collection will not behave exactly according to spec.


    This ordering is not serializable, as its implementation relies on <xref uid="" data-throw-if-not-resolved="false">System#identityHashCode(Object)</xref>, so its behavior cannot be preserved across serialization.
  syntax:
    content: public static Ordering<Object> arbitrary()
    return:
      type: com.azure.cosmos.implementation.guava25.collect.Ordering<java.lang.Object>
- uid: com.azure.cosmos.implementation.guava25.collect.Ordering.binarySearch(java.util.List<? extends T>,T)
  id: binarySearch(java.util.List<? extends T>,T)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.Ordering
  langs:
  - java
  name: binarySearch(List<? extends T> sortedList, T key)
  nameWithType: Ordering<T>.binarySearch(List<? extends T> sortedList, T key)
  fullName: com.azure.cosmos.implementation.guava25.collect.Ordering<T>.binarySearch(List<? extends T> sortedList, T key)
  overload: com.azure.cosmos.implementation.guava25.collect.Ordering.binarySearch*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: <xref uid="" data-throw-if-not-resolved="false">Searches</xref> `sortedList` for `key` using the binary search algorithm. The list must be sorted using this ordering.
  syntax:
    content: public int binarySearch(List<? extends T> sortedList, T key)
    parameters:
    - id: sortedList
      type: java.util.List<? extends T>
      description: the list to be searched
    - id: key
      type: T
      description: the key to be searched for
    return:
      type: int
- uid: com.azure.cosmos.implementation.guava25.collect.Ordering.compare(T,T)
  id: compare(T,T)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.Ordering
  langs:
  - java
  name: compare(T left, T right)
  nameWithType: Ordering<T>.compare(T left, T right)
  fullName: com.azure.cosmos.implementation.guava25.collect.Ordering<T>.compare(T left, T right)
  overload: com.azure.cosmos.implementation.guava25.collect.Ordering.compare*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  syntax:
    content: public abstract int compare(T left, T right)
    parameters:
    - id: left
      type: T
    - id: right
      type: T
    return:
      type: int
- uid: com.azure.cosmos.implementation.guava25.collect.Ordering.isOrdered(java.lang.Iterable<? extends T>)
  id: isOrdered(java.lang.Iterable<? extends T>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.Ordering
  langs:
  - java
  name: isOrdered(Iterable<? extends T> iterable)
  nameWithType: Ordering<T>.isOrdered(Iterable<? extends T> iterable)
  fullName: com.azure.cosmos.implementation.guava25.collect.Ordering<T>.isOrdered(Iterable<? extends T> iterable)
  overload: com.azure.cosmos.implementation.guava25.collect.Ordering.isOrdered*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Returns `true` if each element in `iterable` after the first is greater than or equal to the element that preceded it, according to this ordering. Note that this is always true when the iterable has fewer than two elements.


    **Java 8 users:** Use the equivalent <xref uid="com.azure.cosmos.implementation.guava25.collect.Comparators.&lt;T&gt;isInOrder(java.lang.Iterable&lt;? extends T&gt;,java.util.Comparator&lt;T&gt;)" data-throw-if-not-resolved="false">Comparators#isInOrder(Iterable, Comparator)</xref> instead, since the rest of `Ordering` is mostly obsolete (as explained in the class documentation).
  syntax:
    content: public boolean isOrdered(Iterable<? extends T> iterable)
    parameters:
    - id: iterable
      type: java.lang.Iterable<? extends T>
    return:
      type: boolean
- uid: com.azure.cosmos.implementation.guava25.collect.Ordering.isStrictlyOrdered(java.lang.Iterable<? extends T>)
  id: isStrictlyOrdered(java.lang.Iterable<? extends T>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.Ordering
  langs:
  - java
  name: isStrictlyOrdered(Iterable<? extends T> iterable)
  nameWithType: Ordering<T>.isStrictlyOrdered(Iterable<? extends T> iterable)
  fullName: com.azure.cosmos.implementation.guava25.collect.Ordering<T>.isStrictlyOrdered(Iterable<? extends T> iterable)
  overload: com.azure.cosmos.implementation.guava25.collect.Ordering.isStrictlyOrdered*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Returns `true` if each element in `iterable` after the first is *strictly* greater than the element that preceded it, according to this ordering. Note that this is always true when the iterable has fewer than two elements.


    **Java 8 users:** Use the equivalent <xref uid="Comparators#isInStrictOrder(Iterable,
     Comparator)" data-throw-if-not-resolved="false">Comparators#isInStrictOrder(Iterable,
     Comparator)</xref> instead, since the rest of `Ordering` is mostly obsolete (as explained in the class documentation).
  syntax:
    content: public boolean isStrictlyOrdered(Iterable<? extends T> iterable)
    parameters:
    - id: iterable
      type: java.lang.Iterable<? extends T>
    return:
      type: boolean
- uid: com.azure.cosmos.implementation.guava25.collect.Ordering.usingToString()
  id: usingToString()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.Ordering
  langs:
  - java
  name: usingToString()
  nameWithType: Ordering<T>.usingToString()
  fullName: com.azure.cosmos.implementation.guava25.collect.Ordering<T>.usingToString()
  overload: com.azure.cosmos.implementation.guava25.collect.Ordering.usingToString*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Returns an ordering that compares objects by the natural ordering of their string representations as returned by `toString()`. It does not support null values.


    The comparator is serializable.


    **Java 8 users:** Use `Comparator.comparing(Object::toString)` instead.
  syntax:
    content: public static Ordering<Object> usingToString()
    return:
      type: com.azure.cosmos.implementation.guava25.collect.Ordering<java.lang.Object>
references:
- uid: com.azure.cosmos.implementation.guava25.collect.Ordering.Ordering*
  name: Ordering
  nameWithType: Ordering<T>.Ordering
  fullName: com.azure.cosmos.implementation.guava25.collect.Ordering<T>.Ordering
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.Ordering<C>
  spec.java:
  - uid: com.azure.cosmos.implementation.guava25.collect.Ordering
    name: Ordering
    fullName: com.azure.cosmos.implementation.guava25.collect.Ordering
  - name: <
    fullName: <
  - uid: C
    name: C
    fullName: C
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.Ordering.natural*
  name: <C>natural
  nameWithType: Ordering<T>.<C>natural
  fullName: com.azure.cosmos.implementation.guava25.collect.Ordering<T>.<C>natural
  package: com.azure.cosmos.implementation.guava25.collect
- uid: java.util.Comparator<T>
  spec.java:
  - uid: java.util.Comparator
    name: Comparator
    fullName: java.util.Comparator
  - name: <
    fullName: <
  - uid: T
    name: T
    fullName: T
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.Ordering<T>
  spec.java:
  - uid: com.azure.cosmos.implementation.guava25.collect.Ordering
    name: Ordering
    fullName: com.azure.cosmos.implementation.guava25.collect.Ordering
  - name: <
    fullName: <
  - uid: T
    name: T
    fullName: T
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.Ordering.from*
  name: <T>from
  nameWithType: Ordering<T>.<T>from
  fullName: com.azure.cosmos.implementation.guava25.collect.Ordering<T>.<T>from
  package: com.azure.cosmos.implementation.guava25.collect
- uid: java.util.List<T>
  spec.java:
  - uid: java.util.List
    name: List
    fullName: java.util.List
  - name: <
    fullName: <
  - uid: T
    name: T
    fullName: T
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.Ordering.explicit*
  name: <T>explicit
  nameWithType: Ordering<T>.<T>explicit
  fullName: com.azure.cosmos.implementation.guava25.collect.Ordering<T>.<T>explicit
  package: com.azure.cosmos.implementation.guava25.collect
- uid: T
  spec.java:
  - uid: T
    name: T
    fullName: T
- uid: T[]
  spec.java:
  - uid: T
    name: T
    fullName: T
  - name: '[]'
    fullName: '[]'
- uid: com.azure.cosmos.implementation.guava25.collect.Ordering<java.lang.Object>
  spec.java:
  - uid: com.azure.cosmos.implementation.guava25.collect.Ordering
    name: Ordering
    fullName: com.azure.cosmos.implementation.guava25.collect.Ordering
  - name: <
    fullName: <
  - uid: java.lang.Object
    name: Object
    fullName: java.lang.Object
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.Ordering.allEqual*
  name: allEqual
  nameWithType: Ordering<T>.allEqual
  fullName: com.azure.cosmos.implementation.guava25.collect.Ordering<T>.allEqual
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.Ordering.usingToString*
  name: usingToString
  nameWithType: Ordering<T>.usingToString
  fullName: com.azure.cosmos.implementation.guava25.collect.Ordering<T>.usingToString
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.Ordering.arbitrary*
  name: arbitrary
  nameWithType: Ordering<T>.arbitrary
  fullName: com.azure.cosmos.implementation.guava25.collect.Ordering<T>.arbitrary
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.Ordering<S>
  spec.java:
  - uid: com.azure.cosmos.implementation.guava25.collect.Ordering
    name: Ordering
    fullName: com.azure.cosmos.implementation.guava25.collect.Ordering
  - name: <
    fullName: <
  - uid: S
    name: S
    fullName: S
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.Ordering.reverse*
  name: <S>reverse
  nameWithType: Ordering<T>.<S>reverse
  fullName: com.azure.cosmos.implementation.guava25.collect.Ordering<T>.<S>reverse
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.Ordering.nullsFirst*
  name: <S>nullsFirst
  nameWithType: Ordering<T>.<S>nullsFirst
  fullName: com.azure.cosmos.implementation.guava25.collect.Ordering<T>.<S>nullsFirst
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.Ordering.nullsLast*
  name: <S>nullsLast
  nameWithType: Ordering<T>.<S>nullsLast
  fullName: com.azure.cosmos.implementation.guava25.collect.Ordering<T>.<S>nullsLast
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.base.Function<F,? extends T>
  spec.java:
  - uid: com.azure.cosmos.implementation.guava25.base.Function
    name: Function
    fullName: com.azure.cosmos.implementation.guava25.base.Function
  - name: <
    fullName: <
  - uid: F
    name: F
    fullName: F
  - name: ','
    fullName: ','
  - uid: '? extends T'
    name: '? extends T'
    fullName: '? extends T'
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.Ordering<F>
  spec.java:
  - uid: com.azure.cosmos.implementation.guava25.collect.Ordering
    name: Ordering
    fullName: com.azure.cosmos.implementation.guava25.collect.Ordering
  - name: <
    fullName: <
  - uid: F
    name: F
    fullName: F
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.Ordering.onResultOf*
  name: <F>onResultOf
  nameWithType: Ordering<T>.<F>onResultOf
  fullName: com.azure.cosmos.implementation.guava25.collect.Ordering<T>.<F>onResultOf
  package: com.azure.cosmos.implementation.guava25.collect
- uid: java.util.Comparator<? super U>
  spec.java:
  - uid: java.util.Comparator
    name: Comparator
    fullName: java.util.Comparator
  - name: <
    fullName: <
  - uid: '? super U'
    name: '? super U'
    fullName: '? super U'
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.Ordering<U>
  spec.java:
  - uid: com.azure.cosmos.implementation.guava25.collect.Ordering
    name: Ordering
    fullName: com.azure.cosmos.implementation.guava25.collect.Ordering
  - name: <
    fullName: <
  - uid: U
    name: U
    fullName: U
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.Ordering.compound*
  name: <U>compound
  nameWithType: Ordering<T>.<U>compound
  fullName: com.azure.cosmos.implementation.guava25.collect.Ordering<T>.<U>compound
  package: com.azure.cosmos.implementation.guava25.collect
- uid: java.lang.Iterable<? extends java.util.Comparator<? super T>>
  spec.java:
  - uid: java.lang.Iterable
    name: Iterable
    fullName: java.lang.Iterable
  - name: <
    fullName: <
  - uid: '? extends java.util.Comparator'
    name: Comparator
    fullName: '? extends java.util.Comparator'
  - name: <
    fullName: <
  - uid: '? super T'
    name: '? super T'
    fullName: '? super T'
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.Ordering<java.lang.Iterable<S>>
  spec.java:
  - uid: com.azure.cosmos.implementation.guava25.collect.Ordering
    name: Ordering
    fullName: com.azure.cosmos.implementation.guava25.collect.Ordering
  - name: <
    fullName: <
  - uid: java.lang.Iterable
    name: Iterable
    fullName: java.lang.Iterable
  - name: <
    fullName: <
  - uid: S
    name: S
    fullName: S
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.Ordering.lexicographical*
  name: <S>lexicographical
  nameWithType: Ordering<T>.<S>lexicographical
  fullName: com.azure.cosmos.implementation.guava25.collect.Ordering<T>.<S>lexicographical
  package: com.azure.cosmos.implementation.guava25.collect
- uid: int
  spec.java:
  - uid: int
    name: int
    fullName: int
- uid: com.azure.cosmos.implementation.guava25.collect.Ordering.compare*
  name: compare
  nameWithType: Ordering<T>.compare
  fullName: com.azure.cosmos.implementation.guava25.collect.Ordering<T>.compare
  package: com.azure.cosmos.implementation.guava25.collect
- uid: java.util.Iterator<E>
  spec.java:
  - uid: java.util.Iterator
    name: Iterator
    fullName: java.util.Iterator
  - name: <
    fullName: <
  - uid: E
    name: E
    fullName: E
  - name: '>'
    fullName: '>'
- uid: E
  spec.java:
  - uid: E
    name: E
    fullName: E
- uid: com.azure.cosmos.implementation.guava25.collect.Ordering.min*
  name: <E>min
  nameWithType: Ordering<T>.<E>min
  fullName: com.azure.cosmos.implementation.guava25.collect.Ordering<T>.<E>min
  package: com.azure.cosmos.implementation.guava25.collect
- uid: java.lang.Iterable<E>
  spec.java:
  - uid: java.lang.Iterable
    name: Iterable
    fullName: java.lang.Iterable
  - name: <
    fullName: <
  - uid: E
    name: E
    fullName: E
  - name: '>'
    fullName: '>'
- uid: E[]
  spec.java:
  - uid: E
    name: E
    fullName: E
  - name: '[]'
    fullName: '[]'
- uid: com.azure.cosmos.implementation.guava25.collect.Ordering.max*
  name: <E>max
  nameWithType: Ordering<T>.<E>max
  fullName: com.azure.cosmos.implementation.guava25.collect.Ordering<T>.<E>max
  package: com.azure.cosmos.implementation.guava25.collect
- uid: java.util.List<E>
  spec.java:
  - uid: java.util.List
    name: List
    fullName: java.util.List
  - name: <
    fullName: <
  - uid: E
    name: E
    fullName: E
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.Ordering.leastOf*
  name: <E>leastOf
  nameWithType: Ordering<T>.<E>leastOf
  fullName: com.azure.cosmos.implementation.guava25.collect.Ordering<T>.<E>leastOf
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.Ordering.greatestOf*
  name: <E>greatestOf
  nameWithType: Ordering<T>.<E>greatestOf
  fullName: com.azure.cosmos.implementation.guava25.collect.Ordering<T>.<E>greatestOf
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.Ordering.sortedCopy*
  name: <E>sortedCopy
  nameWithType: Ordering<T>.<E>sortedCopy
  fullName: com.azure.cosmos.implementation.guava25.collect.Ordering<T>.<E>sortedCopy
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableList<E>
  spec.java:
  - uid: com.azure.cosmos.implementation.guava25.collect.ImmutableList
    name: ImmutableList
    fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableList
  - name: <
    fullName: <
  - uid: E
    name: E
    fullName: E
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.Ordering.immutableSortedCopy*
  name: <E>immutableSortedCopy
  nameWithType: Ordering<T>.<E>immutableSortedCopy
  fullName: com.azure.cosmos.implementation.guava25.collect.Ordering<T>.<E>immutableSortedCopy
  package: com.azure.cosmos.implementation.guava25.collect
- uid: java.lang.Iterable<? extends T>
  spec.java:
  - uid: java.lang.Iterable
    name: Iterable
    fullName: java.lang.Iterable
  - name: <
    fullName: <
  - uid: '? extends T'
    name: '? extends T'
    fullName: '? extends T'
  - name: '>'
    fullName: '>'
- uid: boolean
  spec.java:
  - uid: boolean
    name: boolean
    fullName: boolean
- uid: com.azure.cosmos.implementation.guava25.collect.Ordering.isOrdered*
  name: isOrdered
  nameWithType: Ordering<T>.isOrdered
  fullName: com.azure.cosmos.implementation.guava25.collect.Ordering<T>.isOrdered
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.Ordering.isStrictlyOrdered*
  name: isStrictlyOrdered
  nameWithType: Ordering<T>.isStrictlyOrdered
  fullName: com.azure.cosmos.implementation.guava25.collect.Ordering<T>.isStrictlyOrdered
  package: com.azure.cosmos.implementation.guava25.collect
- uid: java.util.List<? extends T>
  spec.java:
  - uid: java.util.List
    name: List
    fullName: java.util.List
  - name: <
    fullName: <
  - uid: '? extends T'
    name: '? extends T'
    fullName: '? extends T'
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.Ordering.binarySearch*
  name: binarySearch
  nameWithType: Ordering<T>.binarySearch
  fullName: com.azure.cosmos.implementation.guava25.collect.Ordering<T>.binarySearch
  package: com.azure.cosmos.implementation.guava25.collect
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: java.lang.Object.finalize()
  name: Object.finalize()
  nameWithType: Object.finalize()
  fullName: java.lang.Object.finalize()
- uid: java.lang.Object.clone()
  name: Object.clone()
  nameWithType: Object.clone()
  fullName: java.lang.Object.clone()
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: java.lang.Object.equals(java.lang.Object)
  name: Object.equals(Object)
  nameWithType: Object.equals(Object)
  fullName: java.lang.Object.equals(java.lang.Object)
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.lang.Object.hashCode()
  name: Object.hashCode()
  nameWithType: Object.hashCode()
  fullName: java.lang.Object.hashCode()
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: java.lang.Object.toString()
  name: Object.toString()
  nameWithType: Object.toString()
  fullName: java.lang.Object.toString()
- uid: C
  name: C
  nameWithType: C
  fullName: C
- uid: java.util.Comparator
  name: Comparator
  nameWithType: Comparator
  fullName: java.util.Comparator
- uid: java.util.List
  name: List
  nameWithType: List
  fullName: java.util.List
- uid: java.lang.Object
  name: Object
  nameWithType: Object
  fullName: java.lang.Object
- uid: S
  name: S
  nameWithType: S
  fullName: S
- uid: com.azure.cosmos.implementation.guava25.base.Function
  name: Function
  nameWithType: Function
  fullName: com.azure.cosmos.implementation.guava25.base.Function
- uid: F,? extends T
  name: F,? extends T
  nameWithType: F,? extends T
  fullName: F,? extends T
- uid: F
  name: F
  nameWithType: F
  fullName: F
- uid: '? super U'
  name: '? super U'
  nameWithType: '? super U'
  fullName: '? super U'
- uid: U
  name: U
  nameWithType: U
  fullName: U
- uid: '? super T'
  name: '? super T'
  nameWithType: '? super T'
  fullName: '? super T'
- uid: '? extends java.util.Comparator'
  name: '? extends Comparator'
  nameWithType: '? extends Comparator'
  fullName: '? extends java.util.Comparator'
- uid: java.lang.Iterable
  name: Iterable
  nameWithType: Iterable
  fullName: java.lang.Iterable
- uid: java.util.Iterator
  name: Iterator
  nameWithType: Iterator
  fullName: java.util.Iterator
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableList
  name: ImmutableList
  nameWithType: ImmutableList
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableList
- uid: '? extends T'
  name: '? extends T'
  nameWithType: '? extends T'
  fullName: '? extends T'
