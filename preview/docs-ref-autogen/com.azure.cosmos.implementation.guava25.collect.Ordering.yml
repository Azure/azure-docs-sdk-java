### YamlMime:JavaType
uid: "com.azure.cosmos.implementation.guava25.collect.Ordering"
fullName: "com.azure.cosmos.implementation.guava25.collect.Ordering<T>"
name: "Ordering<T>"
nameWithType: "Ordering<T>"
summary: "A comparator, with additional methods to support common operations. This is an \"enriched\" version of `Comparator` for pre-Java-8 users, in the same sense that <xref uid=\"com.azure.cosmos.implementation.guava25.collect.FluentIterable\" data-throw-if-not-resolved=\"false\" data-raw-source=\"FluentIterable\"></xref> is an enriched <xref uid=\"java.lang.Iterable\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Iterable\"></xref> for pre-Java-8 users.\n\n### Three types of methods ###\n\nLike other fluent types, there are three types of methods present: methods for *acquiring*, *chaining*, and *using*.\n\n#### Acquiring ####\n\nThe common ways to get an instance of `Ordering` are:\n\n *  Subclass it and implement <xref uid=\"com.azure.cosmos.implementation.guava25.collect.Ordering.compare\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#compare\"></xref> instead of implementing <xref uid=\"? extends java.util.Comparator\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Comparator\"></xref> directly\n *  Pass a *pre-existing* <xref uid=\"? extends java.util.Comparator\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Comparator\"></xref> instance to <xref uid=\"com.azure.cosmos.implementation.guava25.collect.Ordering.&lt;T&gt;from(java.util.Comparator&lt;T&gt;)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#from(Comparator)\"></xref>\n *  Use the natural ordering, <xref uid=\"com.azure.cosmos.implementation.guava25.collect.Ordering.natural\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Ordering#natural\"></xref>\n\n#### Chaining ####\n\nThen you can use the *chaining* methods to get an altered version of that `Ordering`, including:\n\n *  <xref uid=\"com.azure.cosmos.implementation.guava25.collect.Ordering.reverse\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#reverse\"></xref>\n *  <xref uid=\"com.azure.cosmos.implementation.guava25.collect.Ordering.&lt;U&gt;compound(java.util.Comparator&lt;? super U&gt;)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#compound(Comparator)\"></xref>\n *  <xref uid=\"com.azure.cosmos.implementation.guava25.collect.Ordering.&lt;F&gt;onResultOf(com.azure.cosmos.implementation.guava25.base.Function&lt;F,? extends T&gt;)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#onResultOf(Function)\"></xref>\n *  <xref uid=\"com.azure.cosmos.implementation.guava25.collect.Ordering.nullsFirst\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#nullsFirst\"></xref> / <xref uid=\"com.azure.cosmos.implementation.guava25.collect.Ordering.nullsLast\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#nullsLast\"></xref>\n\n#### Using ####\n\nFinally, use the resulting `Ordering` anywhere a <xref uid=\"? extends java.util.Comparator\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Comparator\"></xref> is required, or use any of its special operations, such as:\n\n *  <xref uid=\"com.azure.cosmos.implementation.guava25.collect.Ordering.immutableSortedCopy\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#immutableSortedCopy\"></xref>\n *  <xref uid=\"com.azure.cosmos.implementation.guava25.collect.Ordering.isOrdered\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#isOrdered\"></xref> / <xref uid=\"com.azure.cosmos.implementation.guava25.collect.Ordering.isStrictlyOrdered\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#isStrictlyOrdered\"></xref>\n *  <xref uid=\"com.azure.cosmos.implementation.guava25.collect.Ordering.min\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#min\"></xref> / <xref uid=\"com.azure.cosmos.implementation.guava25.collect.Ordering.max\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#max\"></xref>\n\n### Understanding complex orderings ###\n\nComplex chained orderings like the following example can be challenging to understand.\n\n```java\nOrdering ordering =\n     Ordering.natural()\n         .nullsFirst()\n         .onResultOf(getBarFunction)\n         .nullsLast();\n```\n\nNote that each chaining method returns a new ordering instance which is backed by the previous instance, but has the chance to act on values *before* handing off to that backing instance. As a result, it usually helps to read chained ordering expressions *backwards*. For example, when `compare` is called on the above ordering:\n\n1.  First, if only one `Foo` is null, that null value is treated as *greater*\n2.  Next, non-null `Foo` values are passed to `getBarFunction` (we will be comparing `Bar` values from now on)\n3.  Next, if only one `Bar` is null, that null value is treated as *lesser*\n4.  Finally, natural ordering is used (i.e. the result of `Bar.compareTo(Bar)` is returned)\n\nAlas, <xref uid=\"com.azure.cosmos.implementation.guava25.collect.Ordering.reverse\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#reverse\"></xref> is a little different. As you read backwards through a chain and encounter a call to `reverse`, continue working backwards until a result is determined, and then reverse that result.\n\n### Additional notes ###\n\nExcept as noted, the orderings returned by the factory methods of this class are serializable if and only if the provided instances that back them are. For example, if `ordering` and `function` can themselves be serialized, then `ordering.onResultOf(function)` can as well.\n\n### For Java 8 users ###\n\nIf you are using Java 8, this class is now obsolete. Most of its functionality is now provided by <xref uid=\"java.util.stream.Stream\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Stream\"></xref> and by <xref uid=\"? extends java.util.Comparator\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Comparator\"></xref> itself, and the rest can now be found as static methods in our new <xref uid=\"com.azure.cosmos.implementation.guava25.collect.Comparators\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Comparators\"></xref> class. See each method below for further instructions. Whenever possible, you should change any references of type `Ordering` to be of type `Comparator` instead. However, at this time we have no plan to *deprecate* this class.\n\nMany replacements involve adopting `Stream`, and these changes can sometimes make your code verbose. Whenever following this advice, you should check whether `Stream` could be adopted more comprehensively in your code; the end result may be quite a bit simpler.\n\n### See also ###\n\nSee the Guava User Guide article on [`Ordering`][Ordering].\n\n\n[Ordering]: https://github.com/google/guava/wiki/OrderingExplained"
inheritances:
- "<xref href=\"java.lang.Object\" data-throw-if-not-resolved=\"False\" />"
inheritedMembers:
- "java.lang.Object.clone()"
- "java.lang.Object.equals(java.lang.Object)"
- "java.lang.Object.finalize()"
- "java.lang.Object.getClass()"
- "java.lang.Object.hashCode()"
- "java.lang.Object.notify()"
- "java.lang.Object.notifyAll()"
- "java.lang.Object.toString()"
- "java.lang.Object.wait()"
- "java.lang.Object.wait(long)"
- "java.lang.Object.wait(long,int)"
syntax: "public abstract class Ordering<T> implements Comparator<T>"
constructors:
- "com.azure.cosmos.implementation.guava25.collect.Ordering.Ordering()"
methods:
- "com.azure.cosmos.implementation.guava25.collect.Ordering.<C>natural()"
- "com.azure.cosmos.implementation.guava25.collect.Ordering.<E>greatestOf(java.lang.Iterable<E>,int)"
- "com.azure.cosmos.implementation.guava25.collect.Ordering.<E>greatestOf(java.util.Iterator<E>,int)"
- "com.azure.cosmos.implementation.guava25.collect.Ordering.<E>immutableSortedCopy(java.lang.Iterable<E>)"
- "com.azure.cosmos.implementation.guava25.collect.Ordering.<E>leastOf(java.lang.Iterable<E>,int)"
- "com.azure.cosmos.implementation.guava25.collect.Ordering.<E>leastOf(java.util.Iterator<E>,int)"
- "com.azure.cosmos.implementation.guava25.collect.Ordering.<E>max(E,E)"
- "com.azure.cosmos.implementation.guava25.collect.Ordering.<E>max(E,E,E,E...)"
- "com.azure.cosmos.implementation.guava25.collect.Ordering.<E>max(java.lang.Iterable<E>)"
- "com.azure.cosmos.implementation.guava25.collect.Ordering.<E>max(java.util.Iterator<E>)"
- "com.azure.cosmos.implementation.guava25.collect.Ordering.<E>min(E,E)"
- "com.azure.cosmos.implementation.guava25.collect.Ordering.<E>min(E,E,E,E...)"
- "com.azure.cosmos.implementation.guava25.collect.Ordering.<E>min(java.lang.Iterable<E>)"
- "com.azure.cosmos.implementation.guava25.collect.Ordering.<E>min(java.util.Iterator<E>)"
- "com.azure.cosmos.implementation.guava25.collect.Ordering.<E>sortedCopy(java.lang.Iterable<E>)"
- "com.azure.cosmos.implementation.guava25.collect.Ordering.<F>onResultOf(com.azure.cosmos.implementation.guava25.base.Function<F,? extends T>)"
- "com.azure.cosmos.implementation.guava25.collect.Ordering.<S>lexicographical()"
- "com.azure.cosmos.implementation.guava25.collect.Ordering.<S>nullsFirst()"
- "com.azure.cosmos.implementation.guava25.collect.Ordering.<S>nullsLast()"
- "com.azure.cosmos.implementation.guava25.collect.Ordering.<S>reverse()"
- "com.azure.cosmos.implementation.guava25.collect.Ordering.<T>compound(java.lang.Iterable<? extends java.util.Comparator<? super T>>)"
- "com.azure.cosmos.implementation.guava25.collect.Ordering.<T>explicit(T,T...)"
- "com.azure.cosmos.implementation.guava25.collect.Ordering.<T>explicit(java.util.List<T>)"
- "com.azure.cosmos.implementation.guava25.collect.Ordering.<T>from(com.azure.cosmos.implementation.guava25.collect.Ordering<T>)"
- "com.azure.cosmos.implementation.guava25.collect.Ordering.<T>from(java.util.Comparator<T>)"
- "com.azure.cosmos.implementation.guava25.collect.Ordering.<U>compound(java.util.Comparator<? super U>)"
- "com.azure.cosmos.implementation.guava25.collect.Ordering.allEqual()"
- "com.azure.cosmos.implementation.guava25.collect.Ordering.arbitrary()"
- "com.azure.cosmos.implementation.guava25.collect.Ordering.binarySearch(java.util.List<? extends T>,T)"
- "com.azure.cosmos.implementation.guava25.collect.Ordering.compare(T,T)"
- "com.azure.cosmos.implementation.guava25.collect.Ordering.isOrdered(java.lang.Iterable<? extends T>)"
- "com.azure.cosmos.implementation.guava25.collect.Ordering.isStrictlyOrdered(java.lang.Iterable<? extends T>)"
- "com.azure.cosmos.implementation.guava25.collect.Ordering.usingToString()"
type: "class"
typeParameters:
- name: "T"
implements:
- "<xref href=\"java.util.Comparator?alt=java.util.Comparator&text=Comparator\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
metadata: {}
package: "com.azure.cosmos.implementation.guava25.collect"
artifact: com.azure:azure-cosmos:4.4.0-beta.1
