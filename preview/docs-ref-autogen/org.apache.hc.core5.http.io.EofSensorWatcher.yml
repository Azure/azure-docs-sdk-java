### YamlMime:ManagedReference
items:
- uid: org.apache.hc.core5.http.io.EofSensorWatcher
  id: EofSensorWatcher
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.apache.hc.core5.http.io
  children:
  - org.apache.hc.core5.http.io.EofSensorWatcher.eofDetected(java.io.InputStream)
  - org.apache.hc.core5.http.io.EofSensorWatcher.streamAbort(java.io.InputStream)
  - org.apache.hc.core5.http.io.EofSensorWatcher.streamClosed(java.io.InputStream)
  langs:
  - java
  name: EofSensorWatcher
  nameWithType: EofSensorWatcher
  fullName: org.apache.hc.core5.http.io.EofSensorWatcher
  type: Interface
  package: org.apache.hc.core5.http.io
  summary: A watcher for <xref uid="org.apache.hc.core5.http.io.EofSensorInputStream" data-throw-if-not-resolved="false">EofSensorInputStream</xref>. Each stream will notify its watcher at most once.
  syntax:
    content: public interface EofSensorWatcher
- uid: org.apache.hc.core5.http.io.EofSensorWatcher.eofDetected(java.io.InputStream)
  id: eofDetected(java.io.InputStream)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.apache.hc.core5.http.io.EofSensorWatcher
  langs:
  - java
  name: eofDetected(InputStream wrapped)
  nameWithType: EofSensorWatcher.eofDetected(InputStream wrapped)
  fullName: org.apache.hc.core5.http.io.EofSensorWatcher.eofDetected(InputStream wrapped)
  overload: org.apache.hc.core5.http.io.EofSensorWatcher.eofDetected*
  type: Method
  package: org.apache.hc.core5.http.io
  summary: Indicates that EOF is detected.
  syntax:
    content: public abstract boolean eofDetected(InputStream wrapped)
    parameters:
    - id: wrapped
      type: java.io.InputStream
      description: the underlying stream which has reached EOF
    return:
      type: boolean
      description: >-
        <code>true</code> if <code>wrapped</code> should be closed,
                  <code>false</code> if it should be left alone
  exceptions:
  - type: java.io.IOException
    description: >-
      in case of an IO problem, for example if the watcher itself
               closes the underlying stream. The caller will leave the
               wrapped stream alone, as if <code>false</code> was returned.
- uid: org.apache.hc.core5.http.io.EofSensorWatcher.streamAbort(java.io.InputStream)
  id: streamAbort(java.io.InputStream)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.apache.hc.core5.http.io.EofSensorWatcher
  langs:
  - java
  name: streamAbort(InputStream wrapped)
  nameWithType: EofSensorWatcher.streamAbort(InputStream wrapped)
  fullName: org.apache.hc.core5.http.io.EofSensorWatcher.streamAbort(InputStream wrapped)
  overload: org.apache.hc.core5.http.io.EofSensorWatcher.streamAbort*
  type: Method
  package: org.apache.hc.core5.http.io
  summary: >-
    Indicates that the <xref uid="org.apache.hc.core5.http.io.EofSensorInputStream" data-throw-if-not-resolved="false">stream</xref> is aborted. This method will be called only if EOF was *not* detected before aborting. Otherwise, <xref uid="org.apache.hc.core5.http.io.EofSensorWatcher.eofDetected*" data-throw-if-not-resolved="false">eofDetected</xref> is called.


    This method will also be invoked when an input operation causes an IOException to be thrown to make sure the input stream gets shut down.
  syntax:
    content: public abstract boolean streamAbort(InputStream wrapped)
    parameters:
    - id: wrapped
      type: java.io.InputStream
      description: the underlying stream which has not reached EOF
    return:
      type: boolean
      description: >-
        <code>true</code> if <code>wrapped</code> should be closed,
                  <code>false</code> if it should be left alone
  exceptions:
  - type: java.io.IOException
    description: >-
      in case of an IO problem, for example if the watcher itself
               closes the underlying stream. The caller will leave the
               wrapped stream alone, as if <code>false</code> was returned.
- uid: org.apache.hc.core5.http.io.EofSensorWatcher.streamClosed(java.io.InputStream)
  id: streamClosed(java.io.InputStream)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.apache.hc.core5.http.io.EofSensorWatcher
  langs:
  - java
  name: streamClosed(InputStream wrapped)
  nameWithType: EofSensorWatcher.streamClosed(InputStream wrapped)
  fullName: org.apache.hc.core5.http.io.EofSensorWatcher.streamClosed(InputStream wrapped)
  overload: org.apache.hc.core5.http.io.EofSensorWatcher.streamClosed*
  type: Method
  package: org.apache.hc.core5.http.io
  summary: Indicates that the <xref uid="org.apache.hc.core5.http.io.EofSensorInputStream" data-throw-if-not-resolved="false">stream</xref> is closed. This method will be called only if EOF was *not* detected before closing. Otherwise, <xref uid="org.apache.hc.core5.http.io.EofSensorWatcher.eofDetected*" data-throw-if-not-resolved="false">eofDetected</xref> is called.
  syntax:
    content: public abstract boolean streamClosed(InputStream wrapped)
    parameters:
    - id: wrapped
      type: java.io.InputStream
      description: the underlying stream which has not reached EOF
    return:
      type: boolean
      description: >-
        <code>true</code> if <code>wrapped</code> should be closed,
                  <code>false</code> if it should be left alone
  exceptions:
  - type: java.io.IOException
    description: >-
      in case of an IO problem, for example if the watcher itself
               closes the underlying stream. The caller will leave the
               wrapped stream alone, as if <code>false</code> was returned.
references:
- uid: java.io.IOException
  spec.java:
  - uid: java.io.IOException
    name: IOException
    fullName: java.io.IOException
- uid: java.io.InputStream
  spec.java:
  - uid: java.io.InputStream
    name: InputStream
    fullName: java.io.InputStream
- uid: boolean
  spec.java:
  - uid: boolean
    name: boolean
    fullName: boolean
- uid: org.apache.hc.core5.http.io.EofSensorWatcher.eofDetected*
  name: eofDetected
  nameWithType: EofSensorWatcher.eofDetected
  fullName: org.apache.hc.core5.http.io.EofSensorWatcher.eofDetected
  package: org.apache.hc.core5.http.io
- uid: org.apache.hc.core5.http.io.EofSensorWatcher.streamClosed*
  name: streamClosed
  nameWithType: EofSensorWatcher.streamClosed
  fullName: org.apache.hc.core5.http.io.EofSensorWatcher.streamClosed
  package: org.apache.hc.core5.http.io
- uid: org.apache.hc.core5.http.io.EofSensorWatcher.streamAbort*
  name: streamAbort
  nameWithType: EofSensorWatcher.streamAbort
  fullName: org.apache.hc.core5.http.io.EofSensorWatcher.streamAbort
  package: org.apache.hc.core5.http.io
