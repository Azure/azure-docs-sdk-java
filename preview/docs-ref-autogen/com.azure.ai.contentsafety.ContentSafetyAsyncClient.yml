### YamlMime:JavaType
uid: "com.azure.ai.contentsafety.ContentSafetyAsyncClient"
fullName: "com.azure.ai.contentsafety.ContentSafetyAsyncClient"
name: "ContentSafetyAsyncClient"
nameWithType: "ContentSafetyAsyncClient"
summary: "Initializes a new instance of the asynchronous Content<wbr>Safety<wbr>Client type."
inheritances:
- "<xref href=\"java.lang.Object?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
inheritedClassMethods:
- classRef: "java.lang.<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html\">Object</a>"
  methodsRef:
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#clone--\">clone</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#equals-java.lang.Object-\">equals</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#finalize--\">finalize</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#getClass--\">getClass</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#hashCode--\">hashCode</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#notify--\">notify</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#notifyAll--\">notifyAll</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#toString--\">toString</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#wait--\">wait</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#wait-long-\">wait</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#wait-long-int-\">wait</a>"
syntax: "public final class **ContentSafetyAsyncClient**"
methods:
- uid: "com.azure.ai.contentsafety.ContentSafetyAsyncClient.addBlockItems(java.lang.String,com.azure.ai.contentsafety.models.AddBlockItemsOptions)"
  fullName: "com.azure.ai.contentsafety.ContentSafetyAsyncClient.addBlockItems(String blocklistName, AddBlockItemsOptions addBlockItemsOptions)"
  name: "addBlockItems(String blocklistName, AddBlockItemsOptions addBlockItemsOptions)"
  nameWithType: "ContentSafetyAsyncClient.addBlockItems(String blocklistName, AddBlockItemsOptions addBlockItemsOptions)"
  summary: "Add Block<wbr>Items To Text Blocklist"
  parameters:
  - description: "Text blocklist name."
    name: "blocklistName"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The request of adding blockItems to text blocklist."
    name: "addBlockItemsOptions"
    type: "<xref href=\"com.azure.ai.contentsafety.models.AddBlockItemsOptions?alt=com.azure.ai.contentsafety.models.AddBlockItemsOptions&text=AddBlockItemsOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<AddBlockItemsResult> addBlockItems(String blocklistName, AddBlockItemsOptions addBlockItemsOptions)"
  desc: "Add BlockItems To Text Blocklist\n\nAdd blockItems to a text blocklist. You can add at most 100 BlockItems in one request."
  returns:
    description: "the response of adding blockItems to text blocklist on successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.ai.contentsafety.models.AddBlockItemsResult?alt=com.azure.ai.contentsafety.models.AddBlockItemsResult&text=AddBlockItemsResult\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.ai.contentsafety.ContentSafetyAsyncClient.addBlockItemsWithResponse(java.lang.String,com.azure.core.util.BinaryData,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.ai.contentsafety.ContentSafetyAsyncClient.addBlockItemsWithResponse(String blocklistName, BinaryData addBlockItemsOptions, RequestOptions requestOptions)"
  name: "addBlockItemsWithResponse(String blocklistName, BinaryData addBlockItemsOptions, RequestOptions requestOptions)"
  nameWithType: "ContentSafetyAsyncClient.addBlockItemsWithResponse(String blocklistName, BinaryData addBlockItemsOptions, RequestOptions requestOptions)"
  summary: "Add Block<wbr>Items To Text Blocklist"
  parameters:
  - description: "Text blocklist name."
    name: "blocklistName"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The request of adding blockItems to text blocklist."
    name: "addBlockItemsOptions"
    type: "<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<BinaryData>> addBlockItemsWithResponse(String blocklistName, BinaryData addBlockItemsOptions, RequestOptions requestOptions)"
  desc: "Add BlockItems To Text Blocklist\n\nAdd blockItems to a text blocklist. You can add at most 100 BlockItems in one request.\n\n**Request Body Schema**\n\n```java\n{\n     blockItems (Required): [\n          (Required){\n             description: String (Optional)\n             text: String (Required)\n         }\n     ]\n }\n```\n\n**Response Body Schema**\n\n```java\n{\n     value (Optional): [\n          (Optional){\n             blockItemId: String (Required)\n             description: String (Optional)\n             text: String (Required)\n         }\n     ]\n }\n```"
  returns:
    description: "the response of adding blockItems to text blocklist along with <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> on successful completion\n     of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.ai.contentsafety.ContentSafetyAsyncClient.analyzeImage(com.azure.ai.contentsafety.models.AnalyzeImageOptions)"
  fullName: "com.azure.ai.contentsafety.ContentSafetyAsyncClient.analyzeImage(AnalyzeImageOptions body)"
  name: "analyzeImage(AnalyzeImageOptions body)"
  nameWithType: "ContentSafetyAsyncClient.analyzeImage(AnalyzeImageOptions body)"
  summary: "Analyze Image"
  parameters:
  - description: "The analysis request of the image."
    name: "body"
    type: "<xref href=\"com.azure.ai.contentsafety.models.AnalyzeImageOptions?alt=com.azure.ai.contentsafety.models.AnalyzeImageOptions&text=AnalyzeImageOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<AnalyzeImageResult> analyzeImage(AnalyzeImageOptions body)"
  desc: "Analyze Image\n\nA sync API for harmful content analysis for image. Currently, we support four categories: Hate, SelfHarm, Sexual, Violence."
  returns:
    description: "the analysis response of the image on successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.ai.contentsafety.models.AnalyzeImageResult?alt=com.azure.ai.contentsafety.models.AnalyzeImageResult&text=AnalyzeImageResult\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.ai.contentsafety.ContentSafetyAsyncClient.analyzeImageWithResponse(com.azure.core.util.BinaryData,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.ai.contentsafety.ContentSafetyAsyncClient.analyzeImageWithResponse(BinaryData body, RequestOptions requestOptions)"
  name: "analyzeImageWithResponse(BinaryData body, RequestOptions requestOptions)"
  nameWithType: "ContentSafetyAsyncClient.analyzeImageWithResponse(BinaryData body, RequestOptions requestOptions)"
  summary: "Analyze Image"
  parameters:
  - description: "The analysis request of the image."
    name: "body"
    type: "<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<BinaryData>> analyzeImageWithResponse(BinaryData body, RequestOptions requestOptions)"
  desc: "Analyze Image\n\nA sync API for harmful content analysis for image. Currently, we support four categories: Hate, SelfHarm, Sexual, Violence.\n\n**Request Body Schema**\n\n```java\n{\n     image (Required): {\n         content: byte[] (Optional)\n         blobUrl: String (Optional)\n     }\n     categories (Optional): [\n         String(Hate/SelfHarm/Sexual/Violence) (Optional)\n     ]\n }\n```\n\n**Response Body Schema**\n\n```java\n{\n     hateResult (Optional): {\n         category: String(Hate/SelfHarm/Sexual/Violence) (Required)\n         severity: int (Required)\n     }\n     selfHarmResult (Optional): (recursive schema, see selfHarmResult above)\n     sexualResult (Optional): (recursive schema, see sexualResult above)\n     violenceResult (Optional): (recursive schema, see violenceResult above)\n }\n```"
  returns:
    description: "the analysis response of the image along with <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> on successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.ai.contentsafety.ContentSafetyAsyncClient.analyzeText(com.azure.ai.contentsafety.models.AnalyzeTextOptions)"
  fullName: "com.azure.ai.contentsafety.ContentSafetyAsyncClient.analyzeText(AnalyzeTextOptions body)"
  name: "analyzeText(AnalyzeTextOptions body)"
  nameWithType: "ContentSafetyAsyncClient.analyzeText(AnalyzeTextOptions body)"
  summary: "Analyze Text"
  parameters:
  - description: "The request of text analysis."
    name: "body"
    type: "<xref href=\"com.azure.ai.contentsafety.models.AnalyzeTextOptions?alt=com.azure.ai.contentsafety.models.AnalyzeTextOptions&text=AnalyzeTextOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<AnalyzeTextResult> analyzeText(AnalyzeTextOptions body)"
  desc: "Analyze Text\n\nA sync API for harmful content analysis for text. Currently, we support four categories: Hate, SelfHarm, Sexual, Violence."
  returns:
    description: "the analysis response of the text on successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.ai.contentsafety.models.AnalyzeTextResult?alt=com.azure.ai.contentsafety.models.AnalyzeTextResult&text=AnalyzeTextResult\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.ai.contentsafety.ContentSafetyAsyncClient.analyzeTextWithResponse(com.azure.core.util.BinaryData,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.ai.contentsafety.ContentSafetyAsyncClient.analyzeTextWithResponse(BinaryData body, RequestOptions requestOptions)"
  name: "analyzeTextWithResponse(BinaryData body, RequestOptions requestOptions)"
  nameWithType: "ContentSafetyAsyncClient.analyzeTextWithResponse(BinaryData body, RequestOptions requestOptions)"
  summary: "Analyze Text"
  parameters:
  - description: "The request of text analysis."
    name: "body"
    type: "<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<BinaryData>> analyzeTextWithResponse(BinaryData body, RequestOptions requestOptions)"
  desc: "Analyze Text\n\nA sync API for harmful content analysis for text. Currently, we support four categories: Hate, SelfHarm, Sexual, Violence.\n\n**Request Body Schema**\n\n```java\n{\n     text: String (Required)\n     categories (Optional): [\n         String(Hate/SelfHarm/Sexual/Violence) (Optional)\n     ]\n     blocklistNames (Optional): [\n         String (Optional)\n     ]\n     breakByBlocklists: Boolean (Optional)\n }\n```\n\n**Response Body Schema**\n\n```java\n{\n     blocklistsMatchResults (Optional): [\n          (Optional){\n             blocklistName: String (Required)\n             blockItemId: String (Required)\n             blockItemText: String (Required)\n             offset: int (Required)\n             length: int (Required)\n         }\n     ]\n     hateResult (Optional): {\n         category: String(Hate/SelfHarm/Sexual/Violence) (Required)\n         severity: int (Required)\n     }\n     selfHarmResult (Optional): (recursive schema, see selfHarmResult above)\n     sexualResult (Optional): (recursive schema, see sexualResult above)\n     violenceResult (Optional): (recursive schema, see violenceResult above)\n }\n```"
  returns:
    description: "the analysis response of the text along with <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> on successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.ai.contentsafety.ContentSafetyAsyncClient.createOrUpdateTextBlocklistWithResponse(java.lang.String,com.azure.core.util.BinaryData,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.ai.contentsafety.ContentSafetyAsyncClient.createOrUpdateTextBlocklistWithResponse(String blocklistName, BinaryData resource, RequestOptions requestOptions)"
  name: "createOrUpdateTextBlocklistWithResponse(String blocklistName, BinaryData resource, RequestOptions requestOptions)"
  nameWithType: "ContentSafetyAsyncClient.createOrUpdateTextBlocklistWithResponse(String blocklistName, BinaryData resource, RequestOptions requestOptions)"
  summary: "Create Or Update Text Blocklist"
  parameters:
  - description: "Text blocklist name."
    name: "blocklistName"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The resource instance."
    name: "resource"
    type: "<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<BinaryData>> createOrUpdateTextBlocklistWithResponse(String blocklistName, BinaryData resource, RequestOptions requestOptions)"
  desc: "Create Or Update Text Blocklist\n\nUpdates a text blocklist, if blocklistName does not exist, create a new blocklist.\n\n**Request Body Schema**\n\n```java\n{\n     blocklistName: String (Required)\n     description: String (Optional)\n }\n```\n\n**Response Body Schema**\n\n```java\n{\n     blocklistName: String (Required)\n     description: String (Optional)\n }\n```"
  returns:
    description: "text Blocklist along with <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> on successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.ai.contentsafety.ContentSafetyAsyncClient.deleteTextBlocklist(java.lang.String)"
  fullName: "com.azure.ai.contentsafety.ContentSafetyAsyncClient.deleteTextBlocklist(String blocklistName)"
  name: "deleteTextBlocklist(String blocklistName)"
  nameWithType: "ContentSafetyAsyncClient.deleteTextBlocklist(String blocklistName)"
  summary: "Delete Text Blocklist By blocklist<wbr>Name"
  parameters:
  - description: "Text blocklist name."
    name: "blocklistName"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public Mono<Void> deleteTextBlocklist(String blocklistName)"
  desc: "Delete Text Blocklist By blocklistName\n\nDeletes a text blocklist."
  returns:
    description: "A <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> that completes when a successful response is received."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Void.html\">Void</a>&gt;"
- uid: "com.azure.ai.contentsafety.ContentSafetyAsyncClient.deleteTextBlocklistWithResponse(java.lang.String,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.ai.contentsafety.ContentSafetyAsyncClient.deleteTextBlocklistWithResponse(String blocklistName, RequestOptions requestOptions)"
  name: "deleteTextBlocklistWithResponse(String blocklistName, RequestOptions requestOptions)"
  nameWithType: "ContentSafetyAsyncClient.deleteTextBlocklistWithResponse(String blocklistName, RequestOptions requestOptions)"
  summary: "Delete Text Blocklist By blocklist<wbr>Name"
  parameters:
  - description: "Text blocklist name."
    name: "blocklistName"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<Void>> deleteTextBlocklistWithResponse(String blocklistName, RequestOptions requestOptions)"
  desc: "Delete Text Blocklist By blocklistName\n\nDeletes a text blocklist."
  returns:
    description: "the <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> on successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Void.html\">Void</a>&gt;&gt;"
- uid: "com.azure.ai.contentsafety.ContentSafetyAsyncClient.getTextBlocklist(java.lang.String)"
  fullName: "com.azure.ai.contentsafety.ContentSafetyAsyncClient.getTextBlocklist(String blocklistName)"
  name: "getTextBlocklist(String blocklistName)"
  nameWithType: "ContentSafetyAsyncClient.getTextBlocklist(String blocklistName)"
  summary: "Get Text Blocklist By blocklist<wbr>Name"
  parameters:
  - description: "Text blocklist name."
    name: "blocklistName"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public Mono<TextBlocklist> getTextBlocklist(String blocklistName)"
  desc: "Get Text Blocklist By blocklistName\n\nReturns text blocklist details."
  returns:
    description: "text Blocklist on successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.ai.contentsafety.models.TextBlocklist?alt=com.azure.ai.contentsafety.models.TextBlocklist&text=TextBlocklist\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.ai.contentsafety.ContentSafetyAsyncClient.getTextBlocklistItem(java.lang.String,java.lang.String)"
  fullName: "com.azure.ai.contentsafety.ContentSafetyAsyncClient.getTextBlocklistItem(String blocklistName, String blockItemId)"
  name: "getTextBlocklistItem(String blocklistName, String blockItemId)"
  nameWithType: "ContentSafetyAsyncClient.getTextBlocklistItem(String blocklistName, String blockItemId)"
  summary: "Get Block<wbr>Item By blocklist<wbr>Name And block<wbr>Item<wbr>Id"
  parameters:
  - description: "Text blocklist name."
    name: "blocklistName"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "Block Item Id. It will be uuid."
    name: "blockItemId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public Mono<TextBlockItem> getTextBlocklistItem(String blocklistName, String blockItemId)"
  desc: "Get BlockItem By blocklistName And blockItemId\n\nGet blockItem By blockItemId from a text blocklist."
  returns:
    description: "blockItem By blockItemId from a text blocklist on successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.ai.contentsafety.models.TextBlockItem?alt=com.azure.ai.contentsafety.models.TextBlockItem&text=TextBlockItem\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.ai.contentsafety.ContentSafetyAsyncClient.getTextBlocklistItemWithResponse(java.lang.String,java.lang.String,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.ai.contentsafety.ContentSafetyAsyncClient.getTextBlocklistItemWithResponse(String blocklistName, String blockItemId, RequestOptions requestOptions)"
  name: "getTextBlocklistItemWithResponse(String blocklistName, String blockItemId, RequestOptions requestOptions)"
  nameWithType: "ContentSafetyAsyncClient.getTextBlocklistItemWithResponse(String blocklistName, String blockItemId, RequestOptions requestOptions)"
  summary: "Get Block<wbr>Item By blocklist<wbr>Name And block<wbr>Item<wbr>Id"
  parameters:
  - description: "Text blocklist name."
    name: "blocklistName"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "Block Item Id. It will be uuid."
    name: "blockItemId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<BinaryData>> getTextBlocklistItemWithResponse(String blocklistName, String blockItemId, RequestOptions requestOptions)"
  desc: "Get BlockItem By blocklistName And blockItemId\n\nGet blockItem By blockItemId from a text blocklist.\n\n**Response Body Schema**\n\n```java\n{\n     blockItemId: String (Required)\n     description: String (Optional)\n     text: String (Required)\n }\n```"
  returns:
    description: "blockItem By blockItemId from a text blocklist along with <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> on successful completion of\n     <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.ai.contentsafety.ContentSafetyAsyncClient.getTextBlocklistWithResponse(java.lang.String,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.ai.contentsafety.ContentSafetyAsyncClient.getTextBlocklistWithResponse(String blocklistName, RequestOptions requestOptions)"
  name: "getTextBlocklistWithResponse(String blocklistName, RequestOptions requestOptions)"
  nameWithType: "ContentSafetyAsyncClient.getTextBlocklistWithResponse(String blocklistName, RequestOptions requestOptions)"
  summary: "Get Text Blocklist By blocklist<wbr>Name"
  parameters:
  - description: "Text blocklist name."
    name: "blocklistName"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<BinaryData>> getTextBlocklistWithResponse(String blocklistName, RequestOptions requestOptions)"
  desc: "Get Text Blocklist By blocklistName\n\nReturns text blocklist details.\n\n**Response Body Schema**\n\n```java\n{\n     blocklistName: String (Required)\n     description: String (Optional)\n }\n```"
  returns:
    description: "text Blocklist along with <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> on successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.ai.contentsafety.ContentSafetyAsyncClient.listTextBlocklistItems(java.lang.String)"
  fullName: "com.azure.ai.contentsafety.ContentSafetyAsyncClient.listTextBlocklistItems(String blocklistName)"
  name: "listTextBlocklistItems(String blocklistName)"
  nameWithType: "ContentSafetyAsyncClient.listTextBlocklistItems(String blocklistName)"
  summary: "Get All Block<wbr>Items By blocklist<wbr>Name"
  parameters:
  - description: "Text blocklist name."
    name: "blocklistName"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public PagedFlux<TextBlockItem> listTextBlocklistItems(String blocklistName)"
  desc: "Get All BlockItems By blocklistName\n\nGet all blockItems in a text blocklist."
  returns:
    description: "all blockItems in a text blocklist as paginated response with <xref uid=\"com.azure.core.http.rest.PagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedFlux\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.PagedFlux?alt=com.azure.core.http.rest.PagedFlux&text=PagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.ai.contentsafety.models.TextBlockItem?alt=com.azure.ai.contentsafety.models.TextBlockItem&text=TextBlockItem\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.ai.contentsafety.ContentSafetyAsyncClient.listTextBlocklistItems(java.lang.String,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.ai.contentsafety.ContentSafetyAsyncClient.listTextBlocklistItems(String blocklistName, RequestOptions requestOptions)"
  name: "listTextBlocklistItems(String blocklistName, RequestOptions requestOptions)"
  nameWithType: "ContentSafetyAsyncClient.listTextBlocklistItems(String blocklistName, RequestOptions requestOptions)"
  summary: "Get All Block<wbr>Items By blocklist<wbr>Name"
  parameters:
  - description: "Text blocklist name."
    name: "blocklistName"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PagedFlux<BinaryData> listTextBlocklistItems(String blocklistName, RequestOptions requestOptions)"
  desc: "Get All BlockItems By blocklistName\n\nGet all blockItems in a text blocklist.\n\n**Query Parameters**\n\n    | ----------- | ------- | -------- | -------------------------------------------- |\n    | Name        | Type    | Required | Description                                  |\n    | top         | Integer | No       | The number of result items to return.        |\n    | skip        | Integer | No       | The number of result items to skip.          |\n    | maxpagesize | Integer | No       | The maximum number of result items per page. |\n\nYou can add these to a request with <xref uid=\"com.azure.core.http.rest.RequestOptions.addQueryParam\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RequestOptions#addQueryParam\"></xref>\n\n**Response Body Schema**\n\n```java\n{\n     blockItemId: String (Required)\n     description: String (Optional)\n     text: String (Required)\n }\n```"
  returns:
    description: "all blockItems in a text blocklist as paginated response with <xref uid=\"com.azure.core.http.rest.PagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedFlux\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.PagedFlux?alt=com.azure.core.http.rest.PagedFlux&text=PagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.ai.contentsafety.ContentSafetyAsyncClient.listTextBlocklistItems(java.lang.String,java.lang.Integer,java.lang.Integer)"
  fullName: "com.azure.ai.contentsafety.ContentSafetyAsyncClient.listTextBlocklistItems(String blocklistName, Integer top, Integer skip)"
  name: "listTextBlocklistItems(String blocklistName, Integer top, Integer skip)"
  nameWithType: "ContentSafetyAsyncClient.listTextBlocklistItems(String blocklistName, Integer top, Integer skip)"
  summary: "Get All Block<wbr>Items By blocklist<wbr>Name"
  parameters:
  - description: "Text blocklist name."
    name: "blocklistName"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The number of result items to return."
    name: "top"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Integer.html\">Integer</a>"
  - description: "The number of result items to skip."
    name: "skip"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Integer.html\">Integer</a>"
  syntax: "public PagedFlux<TextBlockItem> listTextBlocklistItems(String blocklistName, Integer top, Integer skip)"
  desc: "Get All BlockItems By blocklistName\n\nGet all blockItems in a text blocklist."
  returns:
    description: "all blockItems in a text blocklist as paginated response with <xref uid=\"com.azure.core.http.rest.PagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedFlux\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.PagedFlux?alt=com.azure.core.http.rest.PagedFlux&text=PagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.ai.contentsafety.models.TextBlockItem?alt=com.azure.ai.contentsafety.models.TextBlockItem&text=TextBlockItem\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.ai.contentsafety.ContentSafetyAsyncClient.listTextBlocklists()"
  fullName: "com.azure.ai.contentsafety.ContentSafetyAsyncClient.listTextBlocklists()"
  name: "listTextBlocklists()"
  nameWithType: "ContentSafetyAsyncClient.listTextBlocklists()"
  summary: "Get All Text Blocklists"
  syntax: "public PagedFlux<TextBlocklist> listTextBlocklists()"
  desc: "Get All Text Blocklists\n\nGet all text blocklists details."
  returns:
    description: "all text blocklists details as paginated response with <xref uid=\"com.azure.core.http.rest.PagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedFlux\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.PagedFlux?alt=com.azure.core.http.rest.PagedFlux&text=PagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.ai.contentsafety.models.TextBlocklist?alt=com.azure.ai.contentsafety.models.TextBlocklist&text=TextBlocklist\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.ai.contentsafety.ContentSafetyAsyncClient.listTextBlocklists(com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.ai.contentsafety.ContentSafetyAsyncClient.listTextBlocklists(RequestOptions requestOptions)"
  name: "listTextBlocklists(RequestOptions requestOptions)"
  nameWithType: "ContentSafetyAsyncClient.listTextBlocklists(RequestOptions requestOptions)"
  summary: "Get All Text Blocklists"
  parameters:
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PagedFlux<BinaryData> listTextBlocklists(RequestOptions requestOptions)"
  desc: "Get All Text Blocklists\n\nGet all text blocklists details.\n\n**Response Body Schema**\n\n```java\n{\n     blocklistName: String (Required)\n     description: String (Optional)\n }\n```"
  returns:
    description: "all text blocklists details as paginated response with <xref uid=\"com.azure.core.http.rest.PagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedFlux\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.PagedFlux?alt=com.azure.core.http.rest.PagedFlux&text=PagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.ai.contentsafety.ContentSafetyAsyncClient.removeBlockItems(java.lang.String,com.azure.ai.contentsafety.models.RemoveBlockItemsOptions)"
  fullName: "com.azure.ai.contentsafety.ContentSafetyAsyncClient.removeBlockItems(String blocklistName, RemoveBlockItemsOptions removeBlockItemsOptions)"
  name: "removeBlockItems(String blocklistName, RemoveBlockItemsOptions removeBlockItemsOptions)"
  nameWithType: "ContentSafetyAsyncClient.removeBlockItems(String blocklistName, RemoveBlockItemsOptions removeBlockItemsOptions)"
  summary: "Remove Block<wbr>Items From Text Blocklist"
  parameters:
  - description: "Text blocklist name."
    name: "blocklistName"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The request of removing blockItems from text blocklist."
    name: "removeBlockItemsOptions"
    type: "<xref href=\"com.azure.ai.contentsafety.models.RemoveBlockItemsOptions?alt=com.azure.ai.contentsafety.models.RemoveBlockItemsOptions&text=RemoveBlockItemsOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Void> removeBlockItems(String blocklistName, RemoveBlockItemsOptions removeBlockItemsOptions)"
  desc: "Remove BlockItems From Text Blocklist\n\nRemove blockItems from a text blocklist. You can remove at most 100 BlockItems in one request."
  returns:
    description: "A <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> that completes when a successful response is received."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Void.html\">Void</a>&gt;"
- uid: "com.azure.ai.contentsafety.ContentSafetyAsyncClient.removeBlockItemsWithResponse(java.lang.String,com.azure.core.util.BinaryData,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.ai.contentsafety.ContentSafetyAsyncClient.removeBlockItemsWithResponse(String blocklistName, BinaryData removeBlockItemsOptions, RequestOptions requestOptions)"
  name: "removeBlockItemsWithResponse(String blocklistName, BinaryData removeBlockItemsOptions, RequestOptions requestOptions)"
  nameWithType: "ContentSafetyAsyncClient.removeBlockItemsWithResponse(String blocklistName, BinaryData removeBlockItemsOptions, RequestOptions requestOptions)"
  summary: "Remove Block<wbr>Items From Text Blocklist"
  parameters:
  - description: "Text blocklist name."
    name: "blocklistName"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The request of removing blockItems from text blocklist."
    name: "removeBlockItemsOptions"
    type: "<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<Void>> removeBlockItemsWithResponse(String blocklistName, BinaryData removeBlockItemsOptions, RequestOptions requestOptions)"
  desc: "Remove BlockItems From Text Blocklist\n\nRemove blockItems from a text blocklist. You can remove at most 100 BlockItems in one request.\n\n**Request Body Schema**\n\n```java\n{\n     blockItemIds (Required): [\n         String (Required)\n     ]\n }\n```"
  returns:
    description: "the <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> on successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Void.html\">Void</a>&gt;&gt;"
type: "class"
desc: "Initializes a new instance of the asynchronous ContentSafetyClient type."
metadata: {}
package: "com.azure.ai.contentsafety"
artifact: com.azure:azure-ai-contentsafety:1.0.0-beta.1
