### YamlMime:ManagedReference
items:
- uid: com.fasterxml.jackson.databind.annotation.JsonTypeResolver
  id: JsonTypeResolver
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.annotation
  children:
  - com.fasterxml.jackson.databind.annotation.JsonTypeResolver.value()
  langs:
  - java
  name: JsonTypeResolver
  nameWithType: JsonTypeResolver
  fullName: com.fasterxml.jackson.databind.annotation.JsonTypeResolver
  type: Interface
  package: com.fasterxml.jackson.databind.annotation
  summary: >-
    Annotation that can be used to explicitly define custom resolver used for handling serialization and deserialization of type information, needed for handling of polymorphic types (or sometimes just for linking abstract types to concrete types)


    NOTE: since 2.4, applicable to properties as well (should have been long time ago, but problem only found then)
  syntax:
    content: public interface JsonTypeResolver implements Annotation
  implements:
  - java.lang.annotation.Annotation
- uid: com.fasterxml.jackson.databind.annotation.JsonTypeResolver.value()
  id: value()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.annotation.JsonTypeResolver
  langs:
  - java
  name: value()
  nameWithType: JsonTypeResolver.value()
  fullName: com.fasterxml.jackson.databind.annotation.JsonTypeResolver.value()
  overload: com.fasterxml.jackson.databind.annotation.JsonTypeResolver.value*
  type: Method
  package: com.fasterxml.jackson.databind.annotation
  summary: Defines implementation class of <xref uid="? extends com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder" data-throw-if-not-resolved="false">TypeResolverBuilder</xref> which is used to construct actual <xref uid="com.fasterxml.jackson.databind.jsontype.TypeDeserializer" data-throw-if-not-resolved="false">com.fasterxml.jackson.databind.jsontype.TypeDeserializer</xref> and <xref uid="com.fasterxml.jackson.databind.jsontype.TypeDeserializer" data-throw-if-not-resolved="false">com.fasterxml.jackson.databind.jsontype.TypeDeserializer</xref> instances that handle reading and writing addition type information needed to support polymorphic deserialization.
  syntax:
    content: public abstract Class<? extends TypeResolverBuilder<?>> value()
    return:
      type: java.lang.Class<? extends com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder<?>>
references:
- uid: java.lang.Class<? extends com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder<?>>
  spec.java:
  - uid: java.lang.Class
    name: Class
    fullName: java.lang.Class
  - name: <
    fullName: <
  - uid: '? extends com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder'
    name: TypeResolverBuilder
    fullName: '? extends com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder'
  - name: <
    fullName: <
  - uid: '?'
    name: '?'
    fullName: '?'
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
- uid: com.fasterxml.jackson.databind.annotation.JsonTypeResolver.value*
  name: value
  nameWithType: JsonTypeResolver.value
  fullName: com.fasterxml.jackson.databind.annotation.JsonTypeResolver.value
  package: com.fasterxml.jackson.databind.annotation
- uid: java.lang.annotation.Annotation
  name: Annotation
  nameWithType: Annotation
  fullName: java.lang.annotation.Annotation
- uid: java.lang.Class
  name: Class
  nameWithType: Class
  fullName: java.lang.Class
- uid: '? extends com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder'
  name: '? extends TypeResolverBuilder'
  nameWithType: '? extends TypeResolverBuilder'
  fullName: '? extends com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder'
- uid: '?'
  name: '?'
  nameWithType: '?'
  fullName: '?'
