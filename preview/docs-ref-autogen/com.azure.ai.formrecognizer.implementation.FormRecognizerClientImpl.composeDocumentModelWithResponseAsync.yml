### YamlMime:JavaMember
uid: "com.azure.ai.formrecognizer.implementation.FormRecognizerClientImpl.composeDocumentModelWithResponseAsync*"
fullName: "com.azure.ai.formrecognizer.implementation.FormRecognizerClientImpl.composeDocumentModelWithResponseAsync"
name: "composeDocumentModelWithResponseAsync"
nameWithType: "FormRecognizerClientImpl.composeDocumentModelWithResponseAsync"
members:
- uid: "com.azure.ai.formrecognizer.implementation.FormRecognizerClientImpl.composeDocumentModelWithResponseAsync(com.azure.ai.formrecognizer.implementation.models.ComposeDocumentModelRequest)"
  fullName: "com.azure.ai.formrecognizer.implementation.FormRecognizerClientImpl.composeDocumentModelWithResponseAsync(ComposeDocumentModelRequest composeRequest)"
  name: "composeDocumentModelWithResponseAsync(ComposeDocumentModelRequest composeRequest)"
  nameWithType: "FormRecognizerClientImpl.composeDocumentModelWithResponseAsync(ComposeDocumentModelRequest composeRequest)"
  summary: "Creates a new model from document types of existing models."
  parameters:
  - description: "Compose request parameters."
    name: "composeRequest"
    type: "<xref href=\"com.azure.ai.formrecognizer.implementation.models.ComposeDocumentModelRequest?alt=com.azure.ai.formrecognizer.implementation.models.ComposeDocumentModelRequest&text=ComposeDocumentModelRequest\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<ComposeDocumentModelResponse> composeDocumentModelWithResponseAsync(ComposeDocumentModelRequest composeRequest)"
  returns:
    description: "the completion."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.ai.formrecognizer.implementation.models.ComposeDocumentModelResponse?alt=com.azure.ai.formrecognizer.implementation.models.ComposeDocumentModelResponse&text=ComposeDocumentModelResponse\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.ai.formrecognizer.implementation.FormRecognizerClientImpl.composeDocumentModelWithResponseAsync(com.azure.ai.formrecognizer.implementation.models.ComposeDocumentModelRequest,com.azure.core.util.Context)"
  fullName: "com.azure.ai.formrecognizer.implementation.FormRecognizerClientImpl.composeDocumentModelWithResponseAsync(ComposeDocumentModelRequest composeRequest, Context context)"
  name: "composeDocumentModelWithResponseAsync(ComposeDocumentModelRequest composeRequest, Context context)"
  nameWithType: "FormRecognizerClientImpl.composeDocumentModelWithResponseAsync(ComposeDocumentModelRequest composeRequest, Context context)"
  summary: "Creates a new model from document types of existing models."
  parameters:
  - description: "Compose request parameters."
    name: "composeRequest"
    type: "<xref href=\"com.azure.ai.formrecognizer.implementation.models.ComposeDocumentModelRequest?alt=com.azure.ai.formrecognizer.implementation.models.ComposeDocumentModelRequest&text=ComposeDocumentModelRequest\" data-throw-if-not-resolved=\"False\" />"
  - description: "The context to associate with this operation."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<ComposeDocumentModelResponse> composeDocumentModelWithResponseAsync(ComposeDocumentModelRequest composeRequest, Context context)"
  returns:
    description: "the completion."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.ai.formrecognizer.implementation.models.ComposeDocumentModelResponse?alt=com.azure.ai.formrecognizer.implementation.models.ComposeDocumentModelResponse&text=ComposeDocumentModelResponse\" data-throw-if-not-resolved=\"False\" />&gt;"
type: "method"
metadata: {}
package: "com.azure.ai.formrecognizer.implementation"
artifact: com.azure:azure-ai-formrecognizer:4.0.0-beta.3
