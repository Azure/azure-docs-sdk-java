### YamlMime:JavaType
uid: "com.azure.cosmos.implementation.guava25.collect.Range"
fullName: "com.azure.cosmos.implementation.guava25.collect.Range<C>"
name: "Range<C>"
nameWithType: "Range<C>"
summary: "A range (or \"interval\") defines the *boundaries* around a contiguous span of values of some `Comparable` type; for example, \"integers from 1 to 100 inclusive.\" Note that it is not possible to *iterate* over these contained values. To do so, pass this range instance and an appropriate <xref uid=\"com.azure.cosmos.implementation.guava25.collect.DiscreteDomain\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DiscreteDomain\"></xref> to <xref uid=\"com.azure.cosmos.implementation.guava25.collect.ContiguousSet.create\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ContiguousSet#create\"></xref>.\n\n### Types of ranges ###\n\nEach end of the range may be bounded or unbounded. If bounded, there is an associated *endpoint* value, and the range is considered to be either *open* (does not include the endpoint) or *closed* (includes the endpoint) on that side. With three possibilities on each side, this yields nine basic types of ranges, enumerated below. (Notation: a square bracket (`[ ]`) indicates that the range is closed on that side; a parenthesis (`( )`) means it is either open or unbounded. The construct `{x | statement}` is read \"the set of all *x* such that *statement*.\")\n\n>     | -------------------- | ------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------ |\n>     | Notation             | Definition          | Factory method                                                                                                                                         |\n>     | `(a..b)`             | `{x | a < x < b}`   | <xref uid=\"com.azure.cosmos.implementation.guava25.collect.Range.open\" data-throw-if-not-resolved=\"false\" data-raw-source=\"open\"></xref>               |\n>     | `[a..b]`             | `{x | a <= x <= b}` | <xref uid=\"com.azure.cosmos.implementation.guava25.collect.Range.closed\" data-throw-if-not-resolved=\"false\" data-raw-source=\"closed\"></xref>           |\n>     | `(a..b]`             | `{x | a < x <= b}`  | <xref uid=\"com.azure.cosmos.implementation.guava25.collect.Range.openClosed\" data-throw-if-not-resolved=\"false\" data-raw-source=\"openClosed\"></xref>   |\n>     | `[a..b)`             | `{x | a <= x < b}`  | <xref uid=\"com.azure.cosmos.implementation.guava25.collect.Range.closedOpen\" data-throw-if-not-resolved=\"false\" data-raw-source=\"closedOpen\"></xref>   |\n>     | `(a..+\\u221e)`       | `{x | x > a}`       | <xref uid=\"com.azure.cosmos.implementation.guava25.collect.Range.greaterThan\" data-throw-if-not-resolved=\"false\" data-raw-source=\"greaterThan\"></xref> |\n>     | `[a..+\\u221e)`       | `{x | x >= a}`      | <xref uid=\"com.azure.cosmos.implementation.guava25.collect.Range.atLeast\" data-throw-if-not-resolved=\"false\" data-raw-source=\"atLeast\"></xref>         |\n>     | `(-\\u221e..b)`       | `{x | x < b}`       | <xref uid=\"com.azure.cosmos.implementation.guava25.collect.Range.lessThan\" data-throw-if-not-resolved=\"false\" data-raw-source=\"lessThan\"></xref>       |\n>     | `(-\\u221e..b]`       | `{x | x <= b}`      | <xref uid=\"com.azure.cosmos.implementation.guava25.collect.Range.atMost\" data-throw-if-not-resolved=\"false\" data-raw-source=\"atMost\"></xref>           |\n>     | `(-\\u221e..+\\u221e)` | `{x}`               | <xref uid=\"com.azure.cosmos.implementation.guava25.collect.Range.all\" data-throw-if-not-resolved=\"false\" data-raw-source=\"all\"></xref>                 |\n\nWhen both endpoints exist, the upper endpoint may not be less than the lower. The endpoints may be equal only if at least one of the bounds is closed:\n\n *  `[a..a]` : a singleton range\n *  `[a..a); (a..a]` : <xref uid=\"com.azure.cosmos.implementation.guava25.collect.Range.isEmpty\" data-throw-if-not-resolved=\"false\" data-raw-source=\"empty\"></xref> ranges; also valid\n *  `(a..a)` : **invalid**; an exception will be thrown\n\n### Warnings ###\n\n *  Use immutable value types only, if at all possible. If you must use a mutable type, **do not** allow the endpoint instances to mutate after the range is created!\n *  Your value type's comparison method should be <xref uid=\"Comparable\" data-throw-if-not-resolved=\"false\" data-raw-source=\"consistent with\n           equals\"></xref> if at all possible. Otherwise, be aware that concepts used throughout this documentation such as \"equal\", \"same\", \"unique\" and so on actually refer to whether <xref uid=\"java.lang.Comparable.compareTo\" data-throw-if-not-resolved=\"false\" data-raw-source=\"compareTo\"></xref> returns zero, not whether <xref uid=\"java.lang.Object.equals\" data-throw-if-not-resolved=\"false\" data-raw-source=\"equals\"></xref> returns `true`.\n *  A class which implements `Comparable` is very broken, and will cause undefined horrible things to happen in `Range`. For now, the Range API does not prevent its use, because this would also rule out all ungenerified (pre-JDK1.5) data types. **This may change in the future.**\n\n### Other notes ###\n\n *  Instances of this type are obtained using the static factory methods in this class.\n *  Ranges are *convex*: whenever two values are contained, all values in between them must also be contained. More formally, for any `c1 <= c2 <= c3` of type `C`, `r.contains(c1) && r.contains(c3)` implies `r.contains(c2)`). This means that a `Range` can never be used to represent, say, \"all *prime* numbers from 1 to 100.\"\n *  When evaluated as a <xref uid=\"com.azure.cosmos.implementation.guava25.base.Predicate\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Predicate\"></xref>, a range yields the same result as invoking <xref uid=\"com.azure.cosmos.implementation.guava25.collect.Range.contains\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#contains\"></xref>.\n *  Terminology note: a range `a` is said to be the *maximal* range having property *P* if, for all ranges `b` also having property *P*, `a.encloses(b)`. Likewise, `a` is *minimal* when `b.encloses(a)` for all `b` having property *P*. See, for example, the definition of <xref uid=\"com.azure.cosmos.implementation.guava25.collect.Range.intersection\" data-throw-if-not-resolved=\"false\" data-raw-source=\"intersection\"></xref>.\n\n### Further reading ###\n\nSee the Guava User Guide article on [`Range`][Range].\n\n\n[Range]: https://github.com/google/guava/wiki/RangesExplained"
inheritances:
- "<xref href=\"java.lang.Object\" data-throw-if-not-resolved=\"False\" />"
- "<xref href=\"com.azure.cosmos.implementation.guava25.collect.RangeGwtSerializationDependencies\" data-throw-if-not-resolved=\"False\" />"
inheritedMembers:
- "java.lang.Object.clone()"
- "java.lang.Object.equals(java.lang.Object)"
- "java.lang.Object.finalize()"
- "java.lang.Object.getClass()"
- "java.lang.Object.hashCode()"
- "java.lang.Object.notify()"
- "java.lang.Object.notifyAll()"
- "java.lang.Object.toString()"
- "java.lang.Object.wait()"
- "java.lang.Object.wait(long)"
- "java.lang.Object.wait(long,int)"
syntax: "public final class Range<C> extends RangeGwtSerializationDependencies implements Predicate<C>, Serializable"
methods:
- "com.azure.cosmos.implementation.guava25.collect.Range.<C>all()"
- "com.azure.cosmos.implementation.guava25.collect.Range.<C>atLeast(C)"
- "com.azure.cosmos.implementation.guava25.collect.Range.<C>atMost(C)"
- "com.azure.cosmos.implementation.guava25.collect.Range.<C>closed(C,C)"
- "com.azure.cosmos.implementation.guava25.collect.Range.<C>closedOpen(C,C)"
- "com.azure.cosmos.implementation.guava25.collect.Range.<C>downTo(C,com.azure.cosmos.implementation.guava25.collect.BoundType)"
- "com.azure.cosmos.implementation.guava25.collect.Range.<C>encloseAll(java.lang.Iterable<C>)"
- "com.azure.cosmos.implementation.guava25.collect.Range.<C>greaterThan(C)"
- "com.azure.cosmos.implementation.guava25.collect.Range.<C>lessThan(C)"
- "com.azure.cosmos.implementation.guava25.collect.Range.<C>open(C,C)"
- "com.azure.cosmos.implementation.guava25.collect.Range.<C>openClosed(C,C)"
- "com.azure.cosmos.implementation.guava25.collect.Range.<C>range(C,com.azure.cosmos.implementation.guava25.collect.BoundType,C,com.azure.cosmos.implementation.guava25.collect.BoundType)"
- "com.azure.cosmos.implementation.guava25.collect.Range.<C>singleton(C)"
- "com.azure.cosmos.implementation.guava25.collect.Range.<C>upTo(C,com.azure.cosmos.implementation.guava25.collect.BoundType)"
- "com.azure.cosmos.implementation.guava25.collect.Range.apply(C)"
- "com.azure.cosmos.implementation.guava25.collect.Range.canonical(com.azure.cosmos.implementation.guava25.collect.DiscreteDomain<C>)"
- "com.azure.cosmos.implementation.guava25.collect.Range.contains(C)"
- "com.azure.cosmos.implementation.guava25.collect.Range.containsAll(java.lang.Iterable<? extends C>)"
- "com.azure.cosmos.implementation.guava25.collect.Range.encloses(com.azure.cosmos.implementation.guava25.collect.Range<C>)"
- "com.azure.cosmos.implementation.guava25.collect.Range.equals(java.lang.Object)"
- "com.azure.cosmos.implementation.guava25.collect.Range.hasLowerBound()"
- "com.azure.cosmos.implementation.guava25.collect.Range.hasUpperBound()"
- "com.azure.cosmos.implementation.guava25.collect.Range.hashCode()"
- "com.azure.cosmos.implementation.guava25.collect.Range.intersection(com.azure.cosmos.implementation.guava25.collect.Range<C>)"
- "com.azure.cosmos.implementation.guava25.collect.Range.isConnected(com.azure.cosmos.implementation.guava25.collect.Range<C>)"
- "com.azure.cosmos.implementation.guava25.collect.Range.isEmpty()"
- "com.azure.cosmos.implementation.guava25.collect.Range.lowerBoundType()"
- "com.azure.cosmos.implementation.guava25.collect.Range.lowerEndpoint()"
- "com.azure.cosmos.implementation.guava25.collect.Range.span(com.azure.cosmos.implementation.guava25.collect.Range<C>)"
- "com.azure.cosmos.implementation.guava25.collect.Range.toString()"
- "com.azure.cosmos.implementation.guava25.collect.Range.upperBoundType()"
- "com.azure.cosmos.implementation.guava25.collect.Range.upperEndpoint()"
type: "class"
typeParameters:
- name: "C"
implements:
- "<xref href=\"com.azure.cosmos.implementation.guava25.base.Predicate?alt=com.azure.cosmos.implementation.guava25.base.Predicate&text=Predicate\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"C?alt=C&text=C\" data-throw-if-not-resolved=\"False\" />&gt;"
- "<xref href=\"java.io.Serializable?alt=java.io.Serializable&text=Serializable\" data-throw-if-not-resolved=\"False\" />"
metadata: {}
package: "com.azure.cosmos.implementation.guava25.collect"
artifact: com.azure:azure-cosmos:4.4.0-beta.1
