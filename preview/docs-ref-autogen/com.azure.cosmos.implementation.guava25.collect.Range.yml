### YamlMime:ManagedReference
items:
- uid: com.azure.cosmos.implementation.guava25.collect.Range
  id: Range
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect
  children:
  - com.azure.cosmos.implementation.guava25.collect.Range.<C>all()
  - com.azure.cosmos.implementation.guava25.collect.Range.<C>atLeast(C)
  - com.azure.cosmos.implementation.guava25.collect.Range.<C>atMost(C)
  - com.azure.cosmos.implementation.guava25.collect.Range.<C>closed(C,C)
  - com.azure.cosmos.implementation.guava25.collect.Range.<C>closedOpen(C,C)
  - com.azure.cosmos.implementation.guava25.collect.Range.<C>downTo(C,com.azure.cosmos.implementation.guava25.collect.BoundType)
  - com.azure.cosmos.implementation.guava25.collect.Range.<C>encloseAll(java.lang.Iterable<C>)
  - com.azure.cosmos.implementation.guava25.collect.Range.<C>greaterThan(C)
  - com.azure.cosmos.implementation.guava25.collect.Range.<C>lessThan(C)
  - com.azure.cosmos.implementation.guava25.collect.Range.<C>open(C,C)
  - com.azure.cosmos.implementation.guava25.collect.Range.<C>openClosed(C,C)
  - com.azure.cosmos.implementation.guava25.collect.Range.<C>range(C,com.azure.cosmos.implementation.guava25.collect.BoundType,C,com.azure.cosmos.implementation.guava25.collect.BoundType)
  - com.azure.cosmos.implementation.guava25.collect.Range.<C>singleton(C)
  - com.azure.cosmos.implementation.guava25.collect.Range.<C>upTo(C,com.azure.cosmos.implementation.guava25.collect.BoundType)
  - com.azure.cosmos.implementation.guava25.collect.Range.apply(C)
  - com.azure.cosmos.implementation.guava25.collect.Range.canonical(com.azure.cosmos.implementation.guava25.collect.DiscreteDomain<C>)
  - com.azure.cosmos.implementation.guava25.collect.Range.contains(C)
  - com.azure.cosmos.implementation.guava25.collect.Range.containsAll(java.lang.Iterable<? extends C>)
  - com.azure.cosmos.implementation.guava25.collect.Range.encloses(com.azure.cosmos.implementation.guava25.collect.Range<C>)
  - com.azure.cosmos.implementation.guava25.collect.Range.equals(java.lang.Object)
  - com.azure.cosmos.implementation.guava25.collect.Range.hasLowerBound()
  - com.azure.cosmos.implementation.guava25.collect.Range.hasUpperBound()
  - com.azure.cosmos.implementation.guava25.collect.Range.hashCode()
  - com.azure.cosmos.implementation.guava25.collect.Range.intersection(com.azure.cosmos.implementation.guava25.collect.Range<C>)
  - com.azure.cosmos.implementation.guava25.collect.Range.isConnected(com.azure.cosmos.implementation.guava25.collect.Range<C>)
  - com.azure.cosmos.implementation.guava25.collect.Range.isEmpty()
  - com.azure.cosmos.implementation.guava25.collect.Range.lowerBoundType()
  - com.azure.cosmos.implementation.guava25.collect.Range.lowerEndpoint()
  - com.azure.cosmos.implementation.guava25.collect.Range.span(com.azure.cosmos.implementation.guava25.collect.Range<C>)
  - com.azure.cosmos.implementation.guava25.collect.Range.toString()
  - com.azure.cosmos.implementation.guava25.collect.Range.upperBoundType()
  - com.azure.cosmos.implementation.guava25.collect.Range.upperEndpoint()
  langs:
  - java
  name: Range<C>
  nameWithType: Range<C>
  fullName: com.azure.cosmos.implementation.guava25.collect.Range<C>
  type: Class
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    A range (or "interval") defines the *boundaries* around a contiguous span of values of some `Comparable` type; for example, "integers from 1 to 100 inclusive." Note that it is not possible to *iterate* over these contained values. To do so, pass this range instance and an appropriate <xref uid="com.azure.cosmos.implementation.guava25.collect.DiscreteDomain" data-throw-if-not-resolved="false">DiscreteDomain</xref> to <xref uid="com.azure.cosmos.implementation.guava25.collect.ContiguousSet.create" data-throw-if-not-resolved="false">ContiguousSet#create</xref>.


    ### Types of ranges ###


    Each end of the range may be bounded or unbounded. If bounded, there is an associated *endpoint* value, and the range is considered to be either *open* (does not include the endpoint) or *closed* (includes the endpoint) on that side. With three possibilities on each side, this yields nine basic types of ranges, enumerated below. (Notation: a square bracket (`[ ]`) indicates that the range is closed on that side; a parenthesis (`( )`) means it is either open or unbounded. The construct `{x | statement}` is read "the set of all *x* such that *statement*.")


    >     | -------------------- | ------------------- | ----------------------------------------------------------------------------------------------------------------------------------- |

    >     | Notation             | Definition          | Factory method                                                                                                                      |

    >     | `(a..b)`             | `{x | a < x < b}`   | <xref uid="com.azure.cosmos.implementation.guava25.collect.Range.open" data-throw-if-not-resolved="false">open</xref>               |

    >     | `[a..b]`             | `{x | a <= x <= b}` | <xref uid="com.azure.cosmos.implementation.guava25.collect.Range.closed" data-throw-if-not-resolved="false">closed</xref>           |

    >     | `(a..b]`             | `{x | a < x <= b}`  | <xref uid="com.azure.cosmos.implementation.guava25.collect.Range.openClosed" data-throw-if-not-resolved="false">openClosed</xref>   |

    >     | `[a..b)`             | `{x | a <= x < b}`  | <xref uid="com.azure.cosmos.implementation.guava25.collect.Range.closedOpen" data-throw-if-not-resolved="false">closedOpen</xref>   |

    >     | `(a..+\u221e)`       | `{x | x > a}`       | <xref uid="com.azure.cosmos.implementation.guava25.collect.Range.greaterThan" data-throw-if-not-resolved="false">greaterThan</xref> |

    >     | `[a..+\u221e)`       | `{x | x >= a}`      | <xref uid="com.azure.cosmos.implementation.guava25.collect.Range.atLeast" data-throw-if-not-resolved="false">atLeast</xref>         |

    >     | `(-\u221e..b)`       | `{x | x < b}`       | <xref uid="com.azure.cosmos.implementation.guava25.collect.Range.lessThan" data-throw-if-not-resolved="false">lessThan</xref>       |

    >     | `(-\u221e..b]`       | `{x | x <= b}`      | <xref uid="com.azure.cosmos.implementation.guava25.collect.Range.atMost" data-throw-if-not-resolved="false">atMost</xref>           |

    >     | `(-\u221e..+\u221e)` | `{x}`               | <xref uid="com.azure.cosmos.implementation.guava25.collect.Range.all" data-throw-if-not-resolved="false">all</xref>                 |


    When both endpoints exist, the upper endpoint may not be less than the lower. The endpoints may be equal only if at least one of the bounds is closed:

     *  `[a..a]` : a singleton range
     *  `[a..a); (a..a]` : <xref uid="com.azure.cosmos.implementation.guava25.collect.Range.isEmpty" data-throw-if-not-resolved="false">empty</xref> ranges; also valid
     *  `(a..a)` : **invalid**; an exception will be thrown

    ### Warnings ###

     *  Use immutable value types only, if at all possible. If you must use a mutable type, **do not** allow the endpoint instances to mutate after the range is created!
     *  Your value type's comparison method should be <xref uid="Comparable" data-throw-if-not-resolved="false">consistent with
               equals</xref> if at all possible. Otherwise, be aware that concepts used throughout this documentation such as "equal", "same", "unique" and so on actually refer to whether <xref uid="java.lang.Comparable.compareTo" data-throw-if-not-resolved="false">compareTo</xref> returns zero, not whether <xref uid="java.lang.Object.equals" data-throw-if-not-resolved="false">equals</xref> returns `true`.
     *  A class which implements `Comparable` is very broken, and will cause undefined horrible things to happen in `Range`. For now, the Range API does not prevent its use, because this would also rule out all ungenerified (pre-JDK1.5) data types. **This may change in the future.**

    ### Other notes ###

     *  Instances of this type are obtained using the static factory methods in this class.
     *  Ranges are *convex*: whenever two values are contained, all values in between them must also be contained. More formally, for any `c1 <= c2 <= c3` of type `C`, `r.contains(c1) && r.contains(c3)` implies `r.contains(c2)`). This means that a `Range` can never be used to represent, say, "all *prime* numbers from 1 to 100."
     *  When evaluated as a <xref uid="com.azure.cosmos.implementation.guava25.base.Predicate" data-throw-if-not-resolved="false">Predicate</xref>, a range yields the same result as invoking <xref uid="com.azure.cosmos.implementation.guava25.collect.Range.contains" data-throw-if-not-resolved="false">#contains</xref>.
     *  Terminology note: a range `a` is said to be the *maximal* range having property *P* if, for all ranges `b` also having property *P*, `a.encloses(b)`. Likewise, `a` is *minimal* when `b.encloses(a)` for all `b` having property *P*. See, for example, the definition of <xref uid="com.azure.cosmos.implementation.guava25.collect.Range.intersection" data-throw-if-not-resolved="false">intersection</xref>.

    ### Further reading ###


    See the Guava User Guide article on [`Range`][Range].



    [Range]: https://github.com/google/guava/wiki/RangesExplained
  syntax:
    content: public final class Range<C> extends RangeGwtSerializationDependencies implements Predicate<C>, Serializable
    typeParameters:
    - id: C
  inheritance:
  - java.lang.Object
  - com.azure.cosmos.implementation.guava25.collect.RangeGwtSerializationDependencies
  implements:
  - com.azure.cosmos.implementation.guava25.base.Predicate<C>
  - java.io.Serializable
  inheritedMembers:
  - java.lang.Object.clone()
  - java.lang.Object.equals(java.lang.Object)
  - java.lang.Object.finalize()
  - java.lang.Object.getClass()
  - java.lang.Object.hashCode()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.toString()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
- uid: com.azure.cosmos.implementation.guava25.collect.Range.<C>all()
  id: <C>all()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.Range
  langs:
  - java
  name: <C>all()
  nameWithType: Range<C>.<C>all()
  fullName: com.azure.cosmos.implementation.guava25.collect.Range<C>.<C>all()
  overload: com.azure.cosmos.implementation.guava25.collect.Range.all*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Returns a range that contains every value of type `C`.
  syntax:
    content: public static Range<C> <C>all()
    return:
      type: com.azure.cosmos.implementation.guava25.collect.Range<C>
- uid: com.azure.cosmos.implementation.guava25.collect.Range.<C>atLeast(C)
  id: <C>atLeast(C)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.Range
  langs:
  - java
  name: <C>atLeast(C endpoint)
  nameWithType: Range<C>.<C>atLeast(C endpoint)
  fullName: com.azure.cosmos.implementation.guava25.collect.Range<C>.<C>atLeast(C endpoint)
  overload: com.azure.cosmos.implementation.guava25.collect.Range.atLeast*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Returns a range that contains all values greater than or equal to `endpoint`.
  syntax:
    content: public static Range<C> <C>atLeast(C endpoint)
    parameters:
    - id: endpoint
      type: C
    return:
      type: com.azure.cosmos.implementation.guava25.collect.Range<C>
- uid: com.azure.cosmos.implementation.guava25.collect.Range.<C>atMost(C)
  id: <C>atMost(C)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.Range
  langs:
  - java
  name: <C>atMost(C endpoint)
  nameWithType: Range<C>.<C>atMost(C endpoint)
  fullName: com.azure.cosmos.implementation.guava25.collect.Range<C>.<C>atMost(C endpoint)
  overload: com.azure.cosmos.implementation.guava25.collect.Range.atMost*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Returns a range that contains all values less than or equal to `endpoint`.
  syntax:
    content: public static Range<C> <C>atMost(C endpoint)
    parameters:
    - id: endpoint
      type: C
    return:
      type: com.azure.cosmos.implementation.guava25.collect.Range<C>
- uid: com.azure.cosmos.implementation.guava25.collect.Range.<C>closed(C,C)
  id: <C>closed(C,C)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.Range
  langs:
  - java
  name: <C>closed(C lower, C upper)
  nameWithType: Range<C>.<C>closed(C lower, C upper)
  fullName: com.azure.cosmos.implementation.guava25.collect.Range<C>.<C>closed(C lower, C upper)
  overload: com.azure.cosmos.implementation.guava25.collect.Range.closed*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Returns a range that contains all values greater than or equal to `lower` and less than or equal to `upper`.
  syntax:
    content: public static Range<C> <C>closed(C lower, C upper)
    parameters:
    - id: lower
      type: C
    - id: upper
      type: C
    return:
      type: com.azure.cosmos.implementation.guava25.collect.Range<C>
- uid: com.azure.cosmos.implementation.guava25.collect.Range.<C>closedOpen(C,C)
  id: <C>closedOpen(C,C)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.Range
  langs:
  - java
  name: <C>closedOpen(C lower, C upper)
  nameWithType: Range<C>.<C>closedOpen(C lower, C upper)
  fullName: com.azure.cosmos.implementation.guava25.collect.Range<C>.<C>closedOpen(C lower, C upper)
  overload: com.azure.cosmos.implementation.guava25.collect.Range.closedOpen*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Returns a range that contains all values greater than or equal to `lower` and strictly less than `upper`.
  syntax:
    content: public static Range<C> <C>closedOpen(C lower, C upper)
    parameters:
    - id: lower
      type: C
    - id: upper
      type: C
    return:
      type: com.azure.cosmos.implementation.guava25.collect.Range<C>
- uid: com.azure.cosmos.implementation.guava25.collect.Range.<C>downTo(C,com.azure.cosmos.implementation.guava25.collect.BoundType)
  id: <C>downTo(C,com.azure.cosmos.implementation.guava25.collect.BoundType)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.Range
  langs:
  - java
  name: <C>downTo(C endpoint, BoundType boundType)
  nameWithType: Range<C>.<C>downTo(C endpoint, BoundType boundType)
  fullName: com.azure.cosmos.implementation.guava25.collect.Range<C>.<C>downTo(C endpoint, BoundType boundType)
  overload: com.azure.cosmos.implementation.guava25.collect.Range.downTo*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Returns a range from the given endpoint, which may be either inclusive (closed) or exclusive (open), with no upper bound.
  syntax:
    content: public static Range<C> <C>downTo(C endpoint, BoundType boundType)
    parameters:
    - id: endpoint
      type: C
    - id: boundType
      type: com.azure.cosmos.implementation.guava25.collect.BoundType
    return:
      type: com.azure.cosmos.implementation.guava25.collect.Range<C>
- uid: com.azure.cosmos.implementation.guava25.collect.Range.<C>encloseAll(java.lang.Iterable<C>)
  id: <C>encloseAll(java.lang.Iterable<C>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.Range
  langs:
  - java
  name: <C>encloseAll(Iterable<C> values)
  nameWithType: Range<C>.<C>encloseAll(Iterable<C> values)
  fullName: com.azure.cosmos.implementation.guava25.collect.Range<C>.<C>encloseAll(Iterable<C> values)
  overload: com.azure.cosmos.implementation.guava25.collect.Range.encloseAll*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Returns the minimal range that <xref uid="com.azure.cosmos.implementation.guava25.collect.Range.contains*" data-throw-if-not-resolved="false">contains</xref> all of the given values. The returned range is <xref uid="com.azure.cosmos.implementation.guava25.collect.BoundType.CLOSED" data-throw-if-not-resolved="false">closed</xref> on both ends.
  syntax:
    content: public static Range<C> <C>encloseAll(Iterable<C> values)
    parameters:
    - id: values
      type: java.lang.Iterable<C>
    return:
      type: com.azure.cosmos.implementation.guava25.collect.Range<C>
- uid: com.azure.cosmos.implementation.guava25.collect.Range.<C>greaterThan(C)
  id: <C>greaterThan(C)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.Range
  langs:
  - java
  name: <C>greaterThan(C endpoint)
  nameWithType: Range<C>.<C>greaterThan(C endpoint)
  fullName: com.azure.cosmos.implementation.guava25.collect.Range<C>.<C>greaterThan(C endpoint)
  overload: com.azure.cosmos.implementation.guava25.collect.Range.greaterThan*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Returns a range that contains all values strictly greater than `endpoint`.
  syntax:
    content: public static Range<C> <C>greaterThan(C endpoint)
    parameters:
    - id: endpoint
      type: C
    return:
      type: com.azure.cosmos.implementation.guava25.collect.Range<C>
- uid: com.azure.cosmos.implementation.guava25.collect.Range.<C>lessThan(C)
  id: <C>lessThan(C)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.Range
  langs:
  - java
  name: <C>lessThan(C endpoint)
  nameWithType: Range<C>.<C>lessThan(C endpoint)
  fullName: com.azure.cosmos.implementation.guava25.collect.Range<C>.<C>lessThan(C endpoint)
  overload: com.azure.cosmos.implementation.guava25.collect.Range.lessThan*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Returns a range that contains all values strictly less than `endpoint`.
  syntax:
    content: public static Range<C> <C>lessThan(C endpoint)
    parameters:
    - id: endpoint
      type: C
    return:
      type: com.azure.cosmos.implementation.guava25.collect.Range<C>
- uid: com.azure.cosmos.implementation.guava25.collect.Range.<C>open(C,C)
  id: <C>open(C,C)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.Range
  langs:
  - java
  name: <C>open(C lower, C upper)
  nameWithType: Range<C>.<C>open(C lower, C upper)
  fullName: com.azure.cosmos.implementation.guava25.collect.Range<C>.<C>open(C lower, C upper)
  overload: com.azure.cosmos.implementation.guava25.collect.Range.open*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Returns a range that contains all values strictly greater than `lower` and strictly less than `upper`.
  syntax:
    content: public static Range<C> <C>open(C lower, C upper)
    parameters:
    - id: lower
      type: C
    - id: upper
      type: C
    return:
      type: com.azure.cosmos.implementation.guava25.collect.Range<C>
- uid: com.azure.cosmos.implementation.guava25.collect.Range.<C>openClosed(C,C)
  id: <C>openClosed(C,C)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.Range
  langs:
  - java
  name: <C>openClosed(C lower, C upper)
  nameWithType: Range<C>.<C>openClosed(C lower, C upper)
  fullName: com.azure.cosmos.implementation.guava25.collect.Range<C>.<C>openClosed(C lower, C upper)
  overload: com.azure.cosmos.implementation.guava25.collect.Range.openClosed*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Returns a range that contains all values strictly greater than `lower` and less than or equal to `upper`.
  syntax:
    content: public static Range<C> <C>openClosed(C lower, C upper)
    parameters:
    - id: lower
      type: C
    - id: upper
      type: C
    return:
      type: com.azure.cosmos.implementation.guava25.collect.Range<C>
- uid: com.azure.cosmos.implementation.guava25.collect.Range.<C>range(C,com.azure.cosmos.implementation.guava25.collect.BoundType,C,com.azure.cosmos.implementation.guava25.collect.BoundType)
  id: <C>range(C,com.azure.cosmos.implementation.guava25.collect.BoundType,C,com.azure.cosmos.implementation.guava25.collect.BoundType)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.Range
  langs:
  - java
  name: <C>range(C lower, BoundType lowerType, C upper, BoundType upperType)
  nameWithType: Range<C>.<C>range(C lower, BoundType lowerType, C upper, BoundType upperType)
  fullName: com.azure.cosmos.implementation.guava25.collect.Range<C>.<C>range(C lower, BoundType lowerType, C upper, BoundType upperType)
  overload: com.azure.cosmos.implementation.guava25.collect.Range.range*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Returns a range that contains any value from `lower` to `upper`, where each endpoint may be either inclusive (closed) or exclusive (open).
  syntax:
    content: public static Range<C> <C>range(C lower, BoundType lowerType, C upper, BoundType upperType)
    parameters:
    - id: lower
      type: C
    - id: lowerType
      type: com.azure.cosmos.implementation.guava25.collect.BoundType
    - id: upper
      type: C
    - id: upperType
      type: com.azure.cosmos.implementation.guava25.collect.BoundType
    return:
      type: com.azure.cosmos.implementation.guava25.collect.Range<C>
- uid: com.azure.cosmos.implementation.guava25.collect.Range.<C>singleton(C)
  id: <C>singleton(C)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.Range
  langs:
  - java
  name: <C>singleton(C value)
  nameWithType: Range<C>.<C>singleton(C value)
  fullName: com.azure.cosmos.implementation.guava25.collect.Range<C>.<C>singleton(C value)
  overload: com.azure.cosmos.implementation.guava25.collect.Range.singleton*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Returns a range that <xref uid="com.azure.cosmos.implementation.guava25.collect.Range.contains*" data-throw-if-not-resolved="false">contains</xref> only the given value. The returned range is <xref uid="com.azure.cosmos.implementation.guava25.collect.BoundType.CLOSED" data-throw-if-not-resolved="false">closed</xref> on both ends.
  syntax:
    content: public static Range<C> <C>singleton(C value)
    parameters:
    - id: value
      type: C
    return:
      type: com.azure.cosmos.implementation.guava25.collect.Range<C>
- uid: com.azure.cosmos.implementation.guava25.collect.Range.<C>upTo(C,com.azure.cosmos.implementation.guava25.collect.BoundType)
  id: <C>upTo(C,com.azure.cosmos.implementation.guava25.collect.BoundType)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.Range
  langs:
  - java
  name: <C>upTo(C endpoint, BoundType boundType)
  nameWithType: Range<C>.<C>upTo(C endpoint, BoundType boundType)
  fullName: com.azure.cosmos.implementation.guava25.collect.Range<C>.<C>upTo(C endpoint, BoundType boundType)
  overload: com.azure.cosmos.implementation.guava25.collect.Range.upTo*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Returns a range with no lower bound up to the given endpoint, which may be either inclusive (closed) or exclusive (open).
  syntax:
    content: public static Range<C> <C>upTo(C endpoint, BoundType boundType)
    parameters:
    - id: endpoint
      type: C
    - id: boundType
      type: com.azure.cosmos.implementation.guava25.collect.BoundType
    return:
      type: com.azure.cosmos.implementation.guava25.collect.Range<C>
- uid: com.azure.cosmos.implementation.guava25.collect.Range.Range(com.azure.cosmos.implementation.guava25.collect.Cut<C>,com.azure.cosmos.implementation.guava25.collect.Cut<C>)
  id: Range(com.azure.cosmos.implementation.guava25.collect.Cut<C>,com.azure.cosmos.implementation.guava25.collect.Cut<C>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.Range
  langs:
  - java
  name: Range(Cut<C> lowerBound, Cut<C> upperBound)
  nameWithType: Range<C>.Range(Cut<C> lowerBound, Cut<C> upperBound)
  fullName: com.azure.cosmos.implementation.guava25.collect.Range<C>.Range(Cut<C> lowerBound, Cut<C> upperBound)
  overload: com.azure.cosmos.implementation.guava25.collect.Range.Range*
  type: Constructor
  package: com.azure.cosmos.implementation.guava25.collect
  syntax:
    content: private Range(Cut<C> lowerBound, Cut<C> upperBound)
    parameters:
    - id: lowerBound
      type: com.azure.cosmos.implementation.guava25.collect.Cut<C>
    - id: upperBound
      type: com.azure.cosmos.implementation.guava25.collect.Cut<C>
- uid: com.azure.cosmos.implementation.guava25.collect.Range.apply(C)
  id: apply(C)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.Range
  langs:
  - java
  name: apply(C input)
  nameWithType: Range<C>.apply(C input)
  fullName: com.azure.cosmos.implementation.guava25.collect.Range<C>.apply(C input)
  overload: com.azure.cosmos.implementation.guava25.collect.Range.apply*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  syntax:
    content: public boolean apply(C input)
    parameters:
    - id: input
      type: C
    return:
      type: boolean
- uid: com.azure.cosmos.implementation.guava25.collect.Range.canonical(com.azure.cosmos.implementation.guava25.collect.DiscreteDomain<C>)
  id: canonical(com.azure.cosmos.implementation.guava25.collect.DiscreteDomain<C>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.Range
  langs:
  - java
  name: canonical(DiscreteDomain<C> domain)
  nameWithType: Range<C>.canonical(DiscreteDomain<C> domain)
  fullName: com.azure.cosmos.implementation.guava25.collect.Range<C>.canonical(DiscreteDomain<C> domain)
  overload: com.azure.cosmos.implementation.guava25.collect.Range.canonical*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Returns the canonical form of this range in the given domain. The canonical form has the following properties:

     *  equivalence: `a.canonical().contains(v) == a.contains(v)` for all `v` (in other words, `ContiguousSet.create(a.canonical(domain), domain).equals( ContiguousSet.create(a, domain))`
     *  uniqueness: unless `a.isEmpty()`, `ContiguousSet.create(a, domain).equals(ContiguousSet.create(b, domain))` implies `a.canonical(domain).equals(b.canonical(domain))`
     *  idempotence: `a.canonical(domain).canonical(domain).equals(a.canonical(domain))`

    Furthermore, this method guarantees that the range returned will be one of the following canonical forms:

     *  \[start..end)
     *  \[start..+\\u221e)
     *  (-\\u221e..end) (only if type `C` is unbounded below)
     *  (-\\u221e..+\\u221e) (only if type `C` is unbounded below)
  syntax:
    content: public Range<C> canonical(DiscreteDomain<C> domain)
    parameters:
    - id: domain
      type: com.azure.cosmos.implementation.guava25.collect.DiscreteDomain<C>
    return:
      type: com.azure.cosmos.implementation.guava25.collect.Range<C>
- uid: com.azure.cosmos.implementation.guava25.collect.Range.contains(C)
  id: contains(C)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.Range
  langs:
  - java
  name: contains(C value)
  nameWithType: Range<C>.contains(C value)
  fullName: com.azure.cosmos.implementation.guava25.collect.Range<C>.contains(C value)
  overload: com.azure.cosmos.implementation.guava25.collect.Range.contains*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Returns `true` if `value` is within the bounds of this range. For example, on the range `[0..2)`, `contains(1)` returns `true`, while `contains(2)` returns `false`.
  syntax:
    content: public boolean contains(C value)
    parameters:
    - id: value
      type: C
    return:
      type: boolean
- uid: com.azure.cosmos.implementation.guava25.collect.Range.containsAll(java.lang.Iterable<? extends C>)
  id: containsAll(java.lang.Iterable<? extends C>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.Range
  langs:
  - java
  name: containsAll(Iterable<? extends C> values)
  nameWithType: Range<C>.containsAll(Iterable<? extends C> values)
  fullName: com.azure.cosmos.implementation.guava25.collect.Range<C>.containsAll(Iterable<? extends C> values)
  overload: com.azure.cosmos.implementation.guava25.collect.Range.containsAll*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Returns `true` if every element in `values` is <xref uid="com.azure.cosmos.implementation.guava25.collect.Range.contains" data-throw-if-not-resolved="false">contained</xref> in this range.
  syntax:
    content: public boolean containsAll(Iterable<? extends C> values)
    parameters:
    - id: values
      type: java.lang.Iterable<? extends C>
    return:
      type: boolean
- uid: com.azure.cosmos.implementation.guava25.collect.Range.encloses(com.azure.cosmos.implementation.guava25.collect.Range<C>)
  id: encloses(com.azure.cosmos.implementation.guava25.collect.Range<C>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.Range
  langs:
  - java
  name: encloses(Range<C> other)
  nameWithType: Range<C>.encloses(Range<C> other)
  fullName: com.azure.cosmos.implementation.guava25.collect.Range<C>.encloses(Range<C> other)
  overload: com.azure.cosmos.implementation.guava25.collect.Range.encloses*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Returns `true` if the bounds of `other` do not extend outside the bounds of this range. Examples:

     *  `[3..6]` encloses `[4..5]`
     *  `(3..6)` encloses `(3..6)`
     *  `[3..6]` encloses `[4..4)` (even though the latter is empty)
     *  `(3..6]` does not enclose `[3..6]`
     *  `[4..5]` does not enclose `(3..6)` (even though it contains every value contained by the latter range)
     *  `[3..6]` does not enclose `(1..1]` (even though it contains every value contained by the latter range)

    Note that if `a.encloses(b)`, then `b.contains(v)` implies `a.contains(v)`, but as the last two examples illustrate, the converse is not always true.


    Being reflexive, antisymmetric and transitive, the `encloses` relation defines a *partial order* over ranges. There exists a unique <xref uid="com.azure.cosmos.implementation.guava25.collect.Range.all" data-throw-if-not-resolved="false">maximal</xref> range according to this relation, and also numerous <xref uid="com.azure.cosmos.implementation.guava25.collect.Range.isEmpty" data-throw-if-not-resolved="false">minimal</xref> ranges. Enclosure also implies <xref uid="com.azure.cosmos.implementation.guava25.collect.Range.isConnected" data-throw-if-not-resolved="false">connectedness</xref>.
  syntax:
    content: public boolean encloses(Range<C> other)
    parameters:
    - id: other
      type: com.azure.cosmos.implementation.guava25.collect.Range<C>
    return:
      type: boolean
- uid: com.azure.cosmos.implementation.guava25.collect.Range.equals(java.lang.Object)
  id: equals(java.lang.Object)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.Range
  langs:
  - java
  name: equals(Object object)
  nameWithType: Range<C>.equals(Object object)
  fullName: com.azure.cosmos.implementation.guava25.collect.Range<C>.equals(Object object)
  overload: com.azure.cosmos.implementation.guava25.collect.Range.equals*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Returns `true` if `object` is a range having the same endpoints and bound types as this range. Note that discrete ranges such as `(1..4)` and `[2..3]` are **not** equal to one another, despite the fact that they each contain precisely the same set of values. Similarly, empty ranges are not equal unless they have exactly the same representation, so `[3..3)`, `(3..3]`, `(4..4]` are all unequal.
  syntax:
    content: public boolean equals(Object object)
    parameters:
    - id: object
      type: java.lang.Object
    return:
      type: boolean
- uid: com.azure.cosmos.implementation.guava25.collect.Range.hasLowerBound()
  id: hasLowerBound()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.Range
  langs:
  - java
  name: hasLowerBound()
  nameWithType: Range<C>.hasLowerBound()
  fullName: com.azure.cosmos.implementation.guava25.collect.Range<C>.hasLowerBound()
  overload: com.azure.cosmos.implementation.guava25.collect.Range.hasLowerBound*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Returns `true` if this range has a lower endpoint.
  syntax:
    content: public boolean hasLowerBound()
    return:
      type: boolean
- uid: com.azure.cosmos.implementation.guava25.collect.Range.hasUpperBound()
  id: hasUpperBound()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.Range
  langs:
  - java
  name: hasUpperBound()
  nameWithType: Range<C>.hasUpperBound()
  fullName: com.azure.cosmos.implementation.guava25.collect.Range<C>.hasUpperBound()
  overload: com.azure.cosmos.implementation.guava25.collect.Range.hasUpperBound*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Returns `true` if this range has an upper endpoint.
  syntax:
    content: public boolean hasUpperBound()
    return:
      type: boolean
- uid: com.azure.cosmos.implementation.guava25.collect.Range.hashCode()
  id: hashCode()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.Range
  langs:
  - java
  name: hashCode()
  nameWithType: Range<C>.hashCode()
  fullName: com.azure.cosmos.implementation.guava25.collect.Range<C>.hashCode()
  overload: com.azure.cosmos.implementation.guava25.collect.Range.hashCode*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Returns a hash code for this range.
  syntax:
    content: public int hashCode()
    return:
      type: int
- uid: com.azure.cosmos.implementation.guava25.collect.Range.intersection(com.azure.cosmos.implementation.guava25.collect.Range<C>)
  id: intersection(com.azure.cosmos.implementation.guava25.collect.Range<C>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.Range
  langs:
  - java
  name: intersection(Range<C> connectedRange)
  nameWithType: Range<C>.intersection(Range<C> connectedRange)
  fullName: com.azure.cosmos.implementation.guava25.collect.Range<C>.intersection(Range<C> connectedRange)
  overload: com.azure.cosmos.implementation.guava25.collect.Range.intersection*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Returns the maximal range <xref uid="com.azure.cosmos.implementation.guava25.collect.Range.encloses" data-throw-if-not-resolved="false">enclosed</xref> by both this range and `connectedRange`, if such a range exists.


    For example, the intersection of `[1..5]` and `(3..7)` is `(3..5]`. The resulting range may be empty; for example, `[1..5)` intersected with `[5..7)` yields the empty range `[5..5)`.


    The intersection exists if and only if the two ranges are <xref uid="com.azure.cosmos.implementation.guava25.collect.Range.isConnected" data-throw-if-not-resolved="false">connected</xref>.


    The intersection operation is commutative, associative and idempotent, and its identity element is <xref uid="com.azure.cosmos.implementation.guava25.collect.Range.all" data-throw-if-not-resolved="false">Range#all</xref>).
  syntax:
    content: public Range<C> intersection(Range<C> connectedRange)
    parameters:
    - id: connectedRange
      type: com.azure.cosmos.implementation.guava25.collect.Range<C>
    return:
      type: com.azure.cosmos.implementation.guava25.collect.Range<C>
- uid: com.azure.cosmos.implementation.guava25.collect.Range.isConnected(com.azure.cosmos.implementation.guava25.collect.Range<C>)
  id: isConnected(com.azure.cosmos.implementation.guava25.collect.Range<C>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.Range
  langs:
  - java
  name: isConnected(Range<C> other)
  nameWithType: Range<C>.isConnected(Range<C> other)
  fullName: com.azure.cosmos.implementation.guava25.collect.Range<C>.isConnected(Range<C> other)
  overload: com.azure.cosmos.implementation.guava25.collect.Range.isConnected*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Returns `true` if there exists a (possibly empty) range which is <xref uid="com.azure.cosmos.implementation.guava25.collect.Range.encloses" data-throw-if-not-resolved="false">enclosed</xref> by both this range and `other`.


    For example,

     *  `[2, 4)` and `[5, 7)` are not connected
     *  `[2, 4)` and `[3, 5)` are connected, because both enclose `[3, 4)`
     *  `[2, 4)` and `[4, 6)` are connected, because both enclose the empty range `[4, 4)`

    Note that this range and `other` have a well-defined <xref uid="com.azure.cosmos.implementation.guava25.collect.Range.span" data-throw-if-not-resolved="false">union</xref> and <xref uid="com.azure.cosmos.implementation.guava25.collect.Range.intersection" data-throw-if-not-resolved="false">intersection</xref> (as a single, possibly-empty range) if and only if this method returns `true`.


    The connectedness relation is both reflexive and symmetric, but does not form an <xref uid="com.azure.cosmos.implementation.guava25.base.Equivalence" data-throw-if-not-resolved="false">equivalence relation</xref> as it is not transitive.


    Note that certain discrete ranges are not considered connected, even though there are no elements "between them." For example, `[3, 5]` is not considered connected to `[6, 10]`. In these cases, it may be desirable for both input ranges to be preprocessed with <xref uid="com.azure.cosmos.implementation.guava25.collect.Range.canonical(com.azure.cosmos.implementation.guava25.collect.DiscreteDomain&lt;C&gt;)" data-throw-if-not-resolved="false">#canonical(DiscreteDomain)</xref> before testing for connectedness.
  syntax:
    content: public boolean isConnected(Range<C> other)
    parameters:
    - id: other
      type: com.azure.cosmos.implementation.guava25.collect.Range<C>
    return:
      type: boolean
- uid: com.azure.cosmos.implementation.guava25.collect.Range.isEmpty()
  id: isEmpty()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.Range
  langs:
  - java
  name: isEmpty()
  nameWithType: Range<C>.isEmpty()
  fullName: com.azure.cosmos.implementation.guava25.collect.Range<C>.isEmpty()
  overload: com.azure.cosmos.implementation.guava25.collect.Range.isEmpty*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Returns `true` if this range is of the form `[v..v)` or `(v..v]`. (This does not encompass ranges of the form `(v..v)`, because such ranges are *invalid* and can't be constructed at all.)


    Note that certain discrete ranges such as the integer range `(3..4)` are **not** considered empty, even though they contain no actual values. In these cases, it may be helpful to preprocess ranges with <xref uid="com.azure.cosmos.implementation.guava25.collect.Range.canonical(com.azure.cosmos.implementation.guava25.collect.DiscreteDomain&lt;C&gt;)" data-throw-if-not-resolved="false">#canonical(DiscreteDomain)</xref>.
  syntax:
    content: public boolean isEmpty()
    return:
      type: boolean
- uid: com.azure.cosmos.implementation.guava25.collect.Range.lowerBoundType()
  id: lowerBoundType()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.Range
  langs:
  - java
  name: lowerBoundType()
  nameWithType: Range<C>.lowerBoundType()
  fullName: com.azure.cosmos.implementation.guava25.collect.Range<C>.lowerBoundType()
  overload: com.azure.cosmos.implementation.guava25.collect.Range.lowerBoundType*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: "Returns the type of this range's lower bound: <xref uid=\"com.azure.cosmos.implementation.guava25.collect.BoundType.CLOSED\" data-throw-if-not-resolved=\"false\">BoundType#CLOSED</xref> if the range includes its lower endpoint, <xref uid=\"com.azure.cosmos.implementation.guava25.collect.BoundType.OPEN\" data-throw-if-not-resolved=\"false\">BoundType#OPEN</xref> if it does not."
  syntax:
    content: public BoundType lowerBoundType()
    return:
      type: com.azure.cosmos.implementation.guava25.collect.BoundType
- uid: com.azure.cosmos.implementation.guava25.collect.Range.lowerEndpoint()
  id: lowerEndpoint()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.Range
  langs:
  - java
  name: lowerEndpoint()
  nameWithType: Range<C>.lowerEndpoint()
  fullName: com.azure.cosmos.implementation.guava25.collect.Range<C>.lowerEndpoint()
  overload: com.azure.cosmos.implementation.guava25.collect.Range.lowerEndpoint*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Returns the lower endpoint of this range.
  syntax:
    content: public C lowerEndpoint()
    return:
      type: C
- uid: com.azure.cosmos.implementation.guava25.collect.Range.span(com.azure.cosmos.implementation.guava25.collect.Range<C>)
  id: span(com.azure.cosmos.implementation.guava25.collect.Range<C>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.Range
  langs:
  - java
  name: span(Range<C> other)
  nameWithType: Range<C>.span(Range<C> other)
  fullName: com.azure.cosmos.implementation.guava25.collect.Range<C>.span(Range<C> other)
  overload: com.azure.cosmos.implementation.guava25.collect.Range.span*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Returns the minimal range that <xref uid="com.azure.cosmos.implementation.guava25.collect.Range.encloses" data-throw-if-not-resolved="false">encloses</xref> both this range and `other`. For example, the span of `[1..3]` and `(5..7)` is `[1..7)`.


    *If* the input ranges are <xref uid="com.azure.cosmos.implementation.guava25.collect.Range.isConnected" data-throw-if-not-resolved="false">connected</xref>, the returned range can also be called their *union*. If they are not, note that the span might contain values that are not contained in either input range.


    Like <xref uid="com.azure.cosmos.implementation.guava25.collect.Range.intersection(com.azure.cosmos.implementation.guava25.collect.Range&lt;C&gt;)" data-throw-if-not-resolved="false">intersection</xref>, this operation is commutative, associative and idempotent. Unlike it, it is always well-defined for any two input ranges.
  syntax:
    content: public Range<C> span(Range<C> other)
    parameters:
    - id: other
      type: com.azure.cosmos.implementation.guava25.collect.Range<C>
    return:
      type: com.azure.cosmos.implementation.guava25.collect.Range<C>
- uid: com.azure.cosmos.implementation.guava25.collect.Range.toString()
  id: toString()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.Range
  langs:
  - java
  name: toString()
  nameWithType: Range<C>.toString()
  fullName: com.azure.cosmos.implementation.guava25.collect.Range<C>.toString()
  overload: com.azure.cosmos.implementation.guava25.collect.Range.toString*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Returns a string representation of this range, such as `"[3..5)"` (other examples are listed in the class documentation).
  syntax:
    content: public String toString()
    return:
      type: java.lang.String
- uid: com.azure.cosmos.implementation.guava25.collect.Range.upperBoundType()
  id: upperBoundType()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.Range
  langs:
  - java
  name: upperBoundType()
  nameWithType: Range<C>.upperBoundType()
  fullName: com.azure.cosmos.implementation.guava25.collect.Range<C>.upperBoundType()
  overload: com.azure.cosmos.implementation.guava25.collect.Range.upperBoundType*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: "Returns the type of this range's upper bound: <xref uid=\"com.azure.cosmos.implementation.guava25.collect.BoundType.CLOSED\" data-throw-if-not-resolved=\"false\">BoundType#CLOSED</xref> if the range includes its upper endpoint, <xref uid=\"com.azure.cosmos.implementation.guava25.collect.BoundType.OPEN\" data-throw-if-not-resolved=\"false\">BoundType#OPEN</xref> if it does not."
  syntax:
    content: public BoundType upperBoundType()
    return:
      type: com.azure.cosmos.implementation.guava25.collect.BoundType
- uid: com.azure.cosmos.implementation.guava25.collect.Range.upperEndpoint()
  id: upperEndpoint()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.Range
  langs:
  - java
  name: upperEndpoint()
  nameWithType: Range<C>.upperEndpoint()
  fullName: com.azure.cosmos.implementation.guava25.collect.Range<C>.upperEndpoint()
  overload: com.azure.cosmos.implementation.guava25.collect.Range.upperEndpoint*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Returns the upper endpoint of this range.
  syntax:
    content: public C upperEndpoint()
    return:
      type: C
references:
- uid: com.azure.cosmos.implementation.guava25.collect.Cut<C>
  spec.java:
  - uid: com.azure.cosmos.implementation.guava25.collect.Cut
    name: Cut
    fullName: com.azure.cosmos.implementation.guava25.collect.Cut
  - name: <
    fullName: <
  - uid: C
    name: C
    fullName: C
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.Range.Range*
  name: Range
  nameWithType: Range<C>.Range
  fullName: com.azure.cosmos.implementation.guava25.collect.Range<C>.Range
  package: com.azure.cosmos.implementation.guava25.collect
- uid: C
  spec.java:
  - uid: C
    name: C
    fullName: C
- uid: com.azure.cosmos.implementation.guava25.collect.Range<C>
  spec.java:
  - uid: com.azure.cosmos.implementation.guava25.collect.Range
    name: Range
    fullName: com.azure.cosmos.implementation.guava25.collect.Range
  - name: <
    fullName: <
  - uid: C
    name: C
    fullName: C
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.Range.open*
  name: <C>open
  nameWithType: Range<C>.<C>open
  fullName: com.azure.cosmos.implementation.guava25.collect.Range<C>.<C>open
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.Range.closed*
  name: <C>closed
  nameWithType: Range<C>.<C>closed
  fullName: com.azure.cosmos.implementation.guava25.collect.Range<C>.<C>closed
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.Range.closedOpen*
  name: <C>closedOpen
  nameWithType: Range<C>.<C>closedOpen
  fullName: com.azure.cosmos.implementation.guava25.collect.Range<C>.<C>closedOpen
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.Range.openClosed*
  name: <C>openClosed
  nameWithType: Range<C>.<C>openClosed
  fullName: com.azure.cosmos.implementation.guava25.collect.Range<C>.<C>openClosed
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.BoundType
  name: BoundType
  nameWithType: BoundType
  fullName: com.azure.cosmos.implementation.guava25.collect.BoundType
- uid: com.azure.cosmos.implementation.guava25.collect.Range.range*
  name: <C>range
  nameWithType: Range<C>.<C>range
  fullName: com.azure.cosmos.implementation.guava25.collect.Range<C>.<C>range
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.Range.lessThan*
  name: <C>lessThan
  nameWithType: Range<C>.<C>lessThan
  fullName: com.azure.cosmos.implementation.guava25.collect.Range<C>.<C>lessThan
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.Range.atMost*
  name: <C>atMost
  nameWithType: Range<C>.<C>atMost
  fullName: com.azure.cosmos.implementation.guava25.collect.Range<C>.<C>atMost
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.Range.upTo*
  name: <C>upTo
  nameWithType: Range<C>.<C>upTo
  fullName: com.azure.cosmos.implementation.guava25.collect.Range<C>.<C>upTo
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.Range.greaterThan*
  name: <C>greaterThan
  nameWithType: Range<C>.<C>greaterThan
  fullName: com.azure.cosmos.implementation.guava25.collect.Range<C>.<C>greaterThan
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.Range.atLeast*
  name: <C>atLeast
  nameWithType: Range<C>.<C>atLeast
  fullName: com.azure.cosmos.implementation.guava25.collect.Range<C>.<C>atLeast
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.Range.downTo*
  name: <C>downTo
  nameWithType: Range<C>.<C>downTo
  fullName: com.azure.cosmos.implementation.guava25.collect.Range<C>.<C>downTo
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.Range.all*
  name: <C>all
  nameWithType: Range<C>.<C>all
  fullName: com.azure.cosmos.implementation.guava25.collect.Range<C>.<C>all
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.Range.singleton*
  name: <C>singleton
  nameWithType: Range<C>.<C>singleton
  fullName: com.azure.cosmos.implementation.guava25.collect.Range<C>.<C>singleton
  package: com.azure.cosmos.implementation.guava25.collect
- uid: java.lang.Iterable<C>
  spec.java:
  - uid: java.lang.Iterable
    name: Iterable
    fullName: java.lang.Iterable
  - name: <
    fullName: <
  - uid: C
    name: C
    fullName: C
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.Range.encloseAll*
  name: <C>encloseAll
  nameWithType: Range<C>.<C>encloseAll
  fullName: com.azure.cosmos.implementation.guava25.collect.Range<C>.<C>encloseAll
  package: com.azure.cosmos.implementation.guava25.collect
- uid: boolean
  spec.java:
  - uid: boolean
    name: boolean
    fullName: boolean
- uid: com.azure.cosmos.implementation.guava25.collect.Range.hasLowerBound*
  name: hasLowerBound
  nameWithType: Range<C>.hasLowerBound
  fullName: com.azure.cosmos.implementation.guava25.collect.Range<C>.hasLowerBound
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.Range.lowerEndpoint*
  name: lowerEndpoint
  nameWithType: Range<C>.lowerEndpoint
  fullName: com.azure.cosmos.implementation.guava25.collect.Range<C>.lowerEndpoint
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.Range.lowerBoundType*
  name: lowerBoundType
  nameWithType: Range<C>.lowerBoundType
  fullName: com.azure.cosmos.implementation.guava25.collect.Range<C>.lowerBoundType
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.Range.hasUpperBound*
  name: hasUpperBound
  nameWithType: Range<C>.hasUpperBound
  fullName: com.azure.cosmos.implementation.guava25.collect.Range<C>.hasUpperBound
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.Range.upperEndpoint*
  name: upperEndpoint
  nameWithType: Range<C>.upperEndpoint
  fullName: com.azure.cosmos.implementation.guava25.collect.Range<C>.upperEndpoint
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.Range.upperBoundType*
  name: upperBoundType
  nameWithType: Range<C>.upperBoundType
  fullName: com.azure.cosmos.implementation.guava25.collect.Range<C>.upperBoundType
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.Range.isEmpty*
  name: isEmpty
  nameWithType: Range<C>.isEmpty
  fullName: com.azure.cosmos.implementation.guava25.collect.Range<C>.isEmpty
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.Range.contains*
  name: contains
  nameWithType: Range<C>.contains
  fullName: com.azure.cosmos.implementation.guava25.collect.Range<C>.contains
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.Range.apply*
  name: apply
  nameWithType: Range<C>.apply
  fullName: com.azure.cosmos.implementation.guava25.collect.Range<C>.apply
  package: com.azure.cosmos.implementation.guava25.collect
- uid: java.lang.Iterable<? extends C>
  spec.java:
  - uid: java.lang.Iterable
    name: Iterable
    fullName: java.lang.Iterable
  - name: <
    fullName: <
  - uid: '? extends C'
    name: '? extends C'
    fullName: '? extends C'
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.Range.containsAll*
  name: containsAll
  nameWithType: Range<C>.containsAll
  fullName: com.azure.cosmos.implementation.guava25.collect.Range<C>.containsAll
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.Range.encloses*
  name: encloses
  nameWithType: Range<C>.encloses
  fullName: com.azure.cosmos.implementation.guava25.collect.Range<C>.encloses
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.Range.isConnected*
  name: isConnected
  nameWithType: Range<C>.isConnected
  fullName: com.azure.cosmos.implementation.guava25.collect.Range<C>.isConnected
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.Range.intersection*
  name: intersection
  nameWithType: Range<C>.intersection
  fullName: com.azure.cosmos.implementation.guava25.collect.Range<C>.intersection
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.Range.span*
  name: span
  nameWithType: Range<C>.span
  fullName: com.azure.cosmos.implementation.guava25.collect.Range<C>.span
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.DiscreteDomain<C>
  spec.java:
  - uid: com.azure.cosmos.implementation.guava25.collect.DiscreteDomain
    name: DiscreteDomain
    fullName: com.azure.cosmos.implementation.guava25.collect.DiscreteDomain
  - name: <
    fullName: <
  - uid: C
    name: C
    fullName: C
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.Range.canonical*
  name: canonical
  nameWithType: Range<C>.canonical
  fullName: com.azure.cosmos.implementation.guava25.collect.Range<C>.canonical
  package: com.azure.cosmos.implementation.guava25.collect
- uid: java.lang.Object
  spec.java:
  - uid: java.lang.Object
    name: Object
    fullName: java.lang.Object
- uid: com.azure.cosmos.implementation.guava25.collect.Range.equals*
  name: equals
  nameWithType: Range<C>.equals
  fullName: com.azure.cosmos.implementation.guava25.collect.Range<C>.equals
  package: com.azure.cosmos.implementation.guava25.collect
- uid: int
  spec.java:
  - uid: int
    name: int
    fullName: int
- uid: com.azure.cosmos.implementation.guava25.collect.Range.hashCode*
  name: hashCode
  nameWithType: Range<C>.hashCode
  fullName: com.azure.cosmos.implementation.guava25.collect.Range<C>.hashCode
  package: com.azure.cosmos.implementation.guava25.collect
- uid: java.lang.String
  spec.java:
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
- uid: com.azure.cosmos.implementation.guava25.collect.Range.toString*
  name: toString
  nameWithType: Range<C>.toString
  fullName: com.azure.cosmos.implementation.guava25.collect.Range<C>.toString
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.RangeGwtSerializationDependencies
  name: RangeGwtSerializationDependencies
  nameWithType: RangeGwtSerializationDependencies
  fullName: com.azure.cosmos.implementation.guava25.collect.RangeGwtSerializationDependencies
- uid: com.azure.cosmos.implementation.guava25.base.Predicate<C>
  name: Predicate<C>
  nameWithType: Predicate<C>
  fullName: com.azure.cosmos.implementation.guava25.base.Predicate<C>
- uid: java.io.Serializable
  name: Serializable
  nameWithType: Serializable
  fullName: java.io.Serializable
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: java.lang.Object.finalize()
  name: Object.finalize()
  nameWithType: Object.finalize()
  fullName: java.lang.Object.finalize()
- uid: java.lang.Object.clone()
  name: Object.clone()
  nameWithType: Object.clone()
  fullName: java.lang.Object.clone()
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: java.lang.Object.equals(java.lang.Object)
  name: Object.equals(Object)
  nameWithType: Object.equals(Object)
  fullName: java.lang.Object.equals(java.lang.Object)
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.lang.Object.hashCode()
  name: Object.hashCode()
  nameWithType: Object.hashCode()
  fullName: java.lang.Object.hashCode()
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: java.lang.Object.toString()
  name: Object.toString()
  nameWithType: Object.toString()
  fullName: java.lang.Object.toString()
- uid: com.azure.cosmos.implementation.guava25.collect.Cut
  name: Cut
  nameWithType: Cut
  fullName: com.azure.cosmos.implementation.guava25.collect.Cut
- uid: java.lang.Iterable
  name: Iterable
  nameWithType: Iterable
  fullName: java.lang.Iterable
- uid: '? extends C'
  name: '? extends C'
  nameWithType: '? extends C'
  fullName: '? extends C'
- uid: com.azure.cosmos.implementation.guava25.collect.DiscreteDomain
  name: DiscreteDomain
  nameWithType: DiscreteDomain
  fullName: com.azure.cosmos.implementation.guava25.collect.DiscreteDomain
- uid: com.azure.cosmos.implementation.guava25.base.Predicate
  name: Predicate
  nameWithType: Predicate
  fullName: com.azure.cosmos.implementation.guava25.base.Predicate
