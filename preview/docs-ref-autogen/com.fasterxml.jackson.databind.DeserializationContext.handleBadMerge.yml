### YamlMime:JavaMember
uid: "com.fasterxml.jackson.databind.DeserializationContext.handleBadMerge*"
fullName: "com.fasterxml.jackson.databind.DeserializationContext.handleBadMerge"
name: "handleBadMerge"
nameWithType: "DeserializationContext.handleBadMerge"
members:
- uid: "com.fasterxml.jackson.databind.DeserializationContext.handleBadMerge(com.fasterxml.jackson.databind.JsonDeserializer<?>)"
  fullName: "com.fasterxml.jackson.databind.DeserializationContext.handleBadMerge(JsonDeserializer<?> deser)"
  name: "handleBadMerge(JsonDeserializer<?> deser)"
  nameWithType: "DeserializationContext.handleBadMerge(JsonDeserializer<?> deser)"
  summary: "Method that deserializer may call if it is called to do an update (\"merge\") but deserializer operates on a non-mergeable type. Although this should usually be caught earlier, sometimes it may only be caught during operation and if so this is the method to call. Note that if <xref uid=\"com.fasterxml.jackson.databind.MapperFeature.IGNORE_MERGE_FOR_UNMERGEABLE\" data-throw-if-not-resolved=\"false\" data-raw-source=\"MapperFeature#IGNORE_MERGE_FOR_UNMERGEABLE\"></xref> is enabled, this method will simply return null; otherwise <xref uid=\"com.fasterxml.jackson.databind.exc.InvalidDefinitionException\" data-throw-if-not-resolved=\"false\" data-raw-source=\"InvalidDefinitionException\"></xref> will be thrown."
  parameters:
  - name: "deser"
    type: "<xref href=\"com.fasterxml.jackson.databind.JsonDeserializer?alt=com.fasterxml.jackson.databind.JsonDeserializer&text=JsonDeserializer\" data-throw-if-not-resolved=\"False\" />&lt;?&gt;"
  syntax: "public void handleBadMerge(JsonDeserializer<?> deser)"
  exceptions:
  - type: "<xref href=\"com.fasterxml.jackson.databind.JsonMappingException?alt=com.fasterxml.jackson.databind.JsonMappingException&text=JsonMappingException\" data-throw-if-not-resolved=\"False\" />"
type: "method"
metadata: {}
package: "com.fasterxml.jackson.databind"
artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
