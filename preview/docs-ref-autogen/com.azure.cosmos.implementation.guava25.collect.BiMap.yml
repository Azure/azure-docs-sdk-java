### YamlMime:ManagedReference
items:
- uid: com.azure.cosmos.implementation.guava25.collect.BiMap
  id: BiMap
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect
  children:
  - com.azure.cosmos.implementation.guava25.collect.BiMap.forcePut(K,V)
  - com.azure.cosmos.implementation.guava25.collect.BiMap.inverse()
  - com.azure.cosmos.implementation.guava25.collect.BiMap.put(K,V)
  - com.azure.cosmos.implementation.guava25.collect.BiMap.putAll(java.util.Map<? extends K,? extends V>)
  - com.azure.cosmos.implementation.guava25.collect.BiMap.values()
  langs:
  - java
  name: BiMap<K,V>
  nameWithType: BiMap<K,V>
  fullName: com.azure.cosmos.implementation.guava25.collect.BiMap<K,V>
  type: Interface
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    A bimap (or "bidirectional map") is a map that preserves the uniqueness of its values as well as that of its keys. This constraint enables bimaps to support an "inverse view", which is another bimap containing the same entries as this bimap but with reversed keys and values.


    See the Guava User Guide article on [ `BiMap`][_BiMap].



    [_BiMap]: https://github.com/google/guava/wiki/NewCollectionTypesExplained#bimap
  syntax:
    content: public interface BiMap<K,V> extends Map<K,V>
    typeParameters:
    - id: K
    - id: V
  implements:
  - java.util.Map<K,V>
- uid: com.azure.cosmos.implementation.guava25.collect.BiMap.forcePut(K,V)
  id: forcePut(K,V)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.BiMap
  langs:
  - java
  name: forcePut(K key, V value)
  nameWithType: BiMap<K,V>.forcePut(K key, V value)
  fullName: com.azure.cosmos.implementation.guava25.collect.BiMap<K,V>.forcePut(K key, V value)
  overload: com.azure.cosmos.implementation.guava25.collect.BiMap.forcePut*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    An alternate form of `put` that silently removes any existing entry with the value `value` before proceeding with the <xref uid="com.azure.cosmos.implementation.guava25.collect.BiMap.put" data-throw-if-not-resolved="false">#put</xref> operation. If the bimap previously contained the provided key-value mapping, this method has no effect.


    Note that a successful call to this method could cause the size of the bimap to increase by one, stay the same, or even decrease by one.


    **Warning:** If an existing entry with this value is removed, the key for that entry is discarded and not returned.
  syntax:
    content: public abstract V forcePut(K key, V value)
    parameters:
    - id: key
      type: K
      description: the key with which the specified value is to be associated
    - id: value
      type: V
      description: the value to be associated with the specified key
    return:
      type: V
      description: >-
        the value which was previously associated with the key, which may be <code>null</code>, or
             <code>null</code> if there was no previous entry
- uid: com.azure.cosmos.implementation.guava25.collect.BiMap.inverse()
  id: inverse()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.BiMap
  langs:
  - java
  name: inverse()
  nameWithType: BiMap<K,V>.inverse()
  fullName: com.azure.cosmos.implementation.guava25.collect.BiMap<K,V>.inverse()
  overload: com.azure.cosmos.implementation.guava25.collect.BiMap.inverse*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Returns the inverse view of this bimap, which maps each of this bimap's values to its associated key. The two bimaps are backed by the same data; any changes to one will appear in the other.


    **Note:**There is no guaranteed correspondence between the iteration order of a bimap and that of its inverse.
  syntax:
    content: public abstract BiMap<V,K> inverse()
    return:
      type: com.azure.cosmos.implementation.guava25.collect.BiMap<V,K>
      description: the inverse view of this bimap
- uid: com.azure.cosmos.implementation.guava25.collect.BiMap.put(K,V)
  id: put(K,V)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.BiMap
  langs:
  - java
  name: put(K key, V value)
  nameWithType: BiMap<K,V>.put(K key, V value)
  fullName: com.azure.cosmos.implementation.guava25.collect.BiMap<K,V>.put(K key, V value)
  overload: com.azure.cosmos.implementation.guava25.collect.BiMap.put*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  syntax:
    content: public abstract V put(K key, V value)
    parameters:
    - id: key
      type: K
    - id: value
      type: V
    return:
      type: V
- uid: com.azure.cosmos.implementation.guava25.collect.BiMap.putAll(java.util.Map<? extends K,? extends V>)
  id: putAll(java.util.Map<? extends K,? extends V>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.BiMap
  langs:
  - java
  name: putAll(Map<? extends K,? extends V> map)
  nameWithType: BiMap<K,V>.putAll(Map<? extends K,? extends V> map)
  fullName: com.azure.cosmos.implementation.guava25.collect.BiMap<K,V>.putAll(Map<? extends K,? extends V> map)
  overload: com.azure.cosmos.implementation.guava25.collect.BiMap.putAll*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: '**Warning:** the results of calling this method may vary depending on the iteration order of `map`.'
  syntax:
    content: public abstract void putAll(Map<? extends K,? extends V> map)
    parameters:
    - id: map
      type: java.util.Map<? extends K,? extends V>
- uid: com.azure.cosmos.implementation.guava25.collect.BiMap.values()
  id: values()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.BiMap
  langs:
  - java
  name: values()
  nameWithType: BiMap<K,V>.values()
  fullName: com.azure.cosmos.implementation.guava25.collect.BiMap<K,V>.values()
  overload: com.azure.cosmos.implementation.guava25.collect.BiMap.values*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Because a bimap has unique values, this method returns a <xref uid="java.util.Set" data-throw-if-not-resolved="false">Set</xref>, instead of the <xref uid="java.util.Collection" data-throw-if-not-resolved="false">java.util.Collection</xref> specified in the <xref uid="java.util.Map" data-throw-if-not-resolved="false">Map</xref> interface.
  syntax:
    content: public abstract Set<V> values()
    return:
      type: java.util.Set<V>
references:
- uid: K
  spec.java:
  - uid: K
    name: K
    fullName: K
- uid: V
  spec.java:
  - uid: V
    name: V
    fullName: V
- uid: com.azure.cosmos.implementation.guava25.collect.BiMap.put*
  name: put
  nameWithType: BiMap<K,V>.put
  fullName: com.azure.cosmos.implementation.guava25.collect.BiMap<K,V>.put
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.BiMap.forcePut*
  name: forcePut
  nameWithType: BiMap<K,V>.forcePut
  fullName: com.azure.cosmos.implementation.guava25.collect.BiMap<K,V>.forcePut
  package: com.azure.cosmos.implementation.guava25.collect
- uid: java.util.Map<? extends K,? extends V>
  spec.java:
  - uid: java.util.Map
    name: Map
    fullName: java.util.Map
  - name: <
    fullName: <
  - uid: '? extends K'
    name: '? extends K'
    fullName: '? extends K'
  - name: ','
    fullName: ','
  - uid: '? extends V'
    name: '? extends V'
    fullName: '? extends V'
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.BiMap.putAll*
  name: putAll
  nameWithType: BiMap<K,V>.putAll
  fullName: com.azure.cosmos.implementation.guava25.collect.BiMap<K,V>.putAll
  package: com.azure.cosmos.implementation.guava25.collect
- uid: java.util.Set<V>
  spec.java:
  - uid: java.util.Set
    name: Set
    fullName: java.util.Set
  - name: <
    fullName: <
  - uid: V
    name: V
    fullName: V
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.BiMap.values*
  name: values
  nameWithType: BiMap<K,V>.values
  fullName: com.azure.cosmos.implementation.guava25.collect.BiMap<K,V>.values
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.BiMap<V,K>
  spec.java:
  - uid: com.azure.cosmos.implementation.guava25.collect.BiMap
    name: BiMap
    fullName: com.azure.cosmos.implementation.guava25.collect.BiMap
  - name: <
    fullName: <
  - uid: V
    name: V
    fullName: V
  - name: ','
    fullName: ','
  - uid: K
    name: K
    fullName: K
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.BiMap.inverse*
  name: inverse
  nameWithType: BiMap<K,V>.inverse
  fullName: com.azure.cosmos.implementation.guava25.collect.BiMap<K,V>.inverse
  package: com.azure.cosmos.implementation.guava25.collect
- uid: java.util.Map<K,V>
  name: Map<K,V>
  nameWithType: Map<K,V>
  fullName: java.util.Map<K,V>
- uid: java.util.Map
  name: Map
  nameWithType: Map
  fullName: java.util.Map
- uid: '? extends K,? extends V'
  name: '? extends K,? extends V'
  nameWithType: '? extends K,? extends V'
  fullName: '? extends K,? extends V'
- uid: java.util.Set
  name: Set
  nameWithType: Set
  fullName: java.util.Set
- uid: V,K
  name: V,K
  nameWithType: V,K
  fullName: V,K
- uid: K,V
  name: K,V
  nameWithType: K,V
  fullName: K,V
