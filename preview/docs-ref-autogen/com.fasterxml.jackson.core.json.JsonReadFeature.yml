### YamlMime:JavaEnum
uid: "com.fasterxml.jackson.core.json.JsonReadFeature"
fullName: "com.fasterxml.jackson.core.json.JsonReadFeature"
name: "JsonReadFeature"
nameWithType: "JsonReadFeature"
summary: "Token reader (parser) features specific to JSON backend. Eventual replacement for JSON-specific <xref uid=\"com.fasterxml.jackson.core.JsonParser.Feature\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.fasterxml.jackson.core.JsonParser.Feature\"></xref>s."
inheritances:
- "<xref href=\"java.lang.Object\" data-throw-if-not-resolved=\"False\" />"
- "<xref href=\"java.lang.Enum\" data-throw-if-not-resolved=\"False\" />"
inheritedMembers:
- "java.lang.Enum.<T>valueOf(java.lang.Class<T>,java.lang.String)"
- "java.lang.Enum.clone()"
- "java.lang.Enum.compareTo(E)"
- "java.lang.Enum.equals(java.lang.Object)"
- "java.lang.Enum.finalize()"
- "java.lang.Enum.getDeclaringClass()"
- "java.lang.Enum.hashCode()"
- "java.lang.Enum.name()"
- "java.lang.Enum.ordinal()"
- "java.lang.Enum.toString()"
- "java.lang.Object.getClass()"
- "java.lang.Object.notify()"
- "java.lang.Object.notifyAll()"
- "java.lang.Object.wait()"
- "java.lang.Object.wait(long)"
- "java.lang.Object.wait(long,int)"
syntax: "public enum JsonReadFeature extends Enum<JsonReadFeature> implements FormatFeature"
fields:
- uid: "com.fasterxml.jackson.core.json.JsonReadFeature.ALLOW_BACKSLASH_ESCAPING_ANY_CHARACTER"
  fullName: "com.fasterxml.jackson.core.json.JsonReadFeature.ALLOW_BACKSLASH_ESCAPING_ANY_CHARACTER"
  name: "ALLOW_BACKSLASH_ESCAPING_ANY_CHARACTER"
  nameWithType: "JsonReadFeature.ALLOW_BACKSLASH_ESCAPING_ANY_CHARACTER"
  summary: "Feature that can be enabled to accept quoting of all character using backslash quoting mechanism: if not enabled, only characters that are explicitly listed by JSON specification can be thus escaped (see JSON spec for small list of these characters)\n\nSince JSON specification requires quoting for all control characters, this is a non-standard feature, and as such disabled by default."
- uid: "com.fasterxml.jackson.core.json.JsonReadFeature.ALLOW_JAVA_COMMENTS"
  fullName: "com.fasterxml.jackson.core.json.JsonReadFeature.ALLOW_JAVA_COMMENTS"
  name: "ALLOW_JAVA_COMMENTS"
  nameWithType: "JsonReadFeature.ALLOW_JAVA_COMMENTS"
  summary: "Feature that determines whether parser will allow use of Java/C/C++ style comments (both '/'+'\\*' and '//' varieties) within parsed content or not.\n\nSince JSON specification does not mention comments as legal construct, this is a non-standard feature; however, in the wild this is extensively used. As such, feature is **disabled by default** for parsers and must be explicitly enabled."
- uid: "com.fasterxml.jackson.core.json.JsonReadFeature.ALLOW_LEADING_DECIMAL_POINT_FOR_NUMBERS"
  fullName: "com.fasterxml.jackson.core.json.JsonReadFeature.ALLOW_LEADING_DECIMAL_POINT_FOR_NUMBERS"
  name: "ALLOW_LEADING_DECIMAL_POINT_FOR_NUMBERS"
  nameWithType: "JsonReadFeature.ALLOW_LEADING_DECIMAL_POINT_FOR_NUMBERS"
  summary: "Feature that determines whether parser will allow JSON decimal numbers to start with a decimal point (like: .123). If enabled, no exception is thrown, and the number is parsed as though a leading 0 had been present.\n\nSince JSON specification does not allow leading decimal, this is a non-standard feature, and as such disabled by default."
- uid: "com.fasterxml.jackson.core.json.JsonReadFeature.ALLOW_LEADING_ZEROS_FOR_NUMBERS"
  fullName: "com.fasterxml.jackson.core.json.JsonReadFeature.ALLOW_LEADING_ZEROS_FOR_NUMBERS"
  name: "ALLOW_LEADING_ZEROS_FOR_NUMBERS"
  nameWithType: "JsonReadFeature.ALLOW_LEADING_ZEROS_FOR_NUMBERS"
  summary: "Feature that determines whether parser will allow JSON integral numbers to start with additional (ignorable) zeroes (like: 000001). If enabled, no exception is thrown, and extra nulls are silently ignored (and not included in textual representation exposed via <xref uid=\"com.fasterxml.jackson.core.JsonParser.getText*\" data-throw-if-not-resolved=\"false\" data-raw-source=\"JsonParser#getText\"></xref>).\n\nSince JSON specification does not allow leading zeroes, this is a non-standard feature, and as such disabled by default."
- uid: "com.fasterxml.jackson.core.json.JsonReadFeature.ALLOW_MISSING_VALUES"
  fullName: "com.fasterxml.jackson.core.json.JsonReadFeature.ALLOW_MISSING_VALUES"
  name: "ALLOW_MISSING_VALUES"
  nameWithType: "JsonReadFeature.ALLOW_MISSING_VALUES"
  summary: "Feature allows the support for \"missing\" values in a JSON array: missing value meaning sequence of two commas, without value in-between but only optional white space. Enabling this feature will expose \"missing\" values as <xref uid=\"com.fasterxml.jackson.core.JsonToken.VALUE_NULL\" data-throw-if-not-resolved=\"false\" data-raw-source=\"JsonToken#VALUE_NULL\"></xref> tokens, which typically become Java nulls in arrays and <xref uid=\"java.util.Collection\" data-throw-if-not-resolved=\"false\" data-raw-source=\"java.util.Collection\"></xref> in data-binding.\n\nFor example, enabling this feature will represent a JSON array `[\"value1\",,\"value3\",]` as `[\"value1\", null, \"value3\", null]`\n\nSince the JSON specification does not allow missing values this is a non-compliant JSON feature and is disabled by default."
- uid: "com.fasterxml.jackson.core.json.JsonReadFeature.ALLOW_NON_NUMERIC_NUMBERS"
  fullName: "com.fasterxml.jackson.core.json.JsonReadFeature.ALLOW_NON_NUMERIC_NUMBERS"
  name: "ALLOW_NON_NUMERIC_NUMBERS"
  nameWithType: "JsonReadFeature.ALLOW_NON_NUMERIC_NUMBERS"
  summary: "Feature that allows parser to recognize set of \"Not-a-Number\" (NaN) tokens as legal floating number values (similar to how many other data formats and programming language source code allows it). Specific subset contains values that [XML Schema][] (see section 3.2.4.1, Lexical Representation) allows (tokens are quoted contents, not including quotes):\n\n *  \"INF\" (for positive infinity), as well as alias of \"Infinity\"\n *  \"-INF\" (for negative infinity), alias \"-Infinity\"\n *  \"NaN\" (for other not-a-numbers, like result of division by zero)\n\nSince JSON specification does not allow use of such values, this is a non-standard feature, and as such disabled by default.\n\n\n[XML Schema]: http://www.w3.org/TR/xmlschema-2/"
- uid: "com.fasterxml.jackson.core.json.JsonReadFeature.ALLOW_SINGLE_QUOTES"
  fullName: "com.fasterxml.jackson.core.json.JsonReadFeature.ALLOW_SINGLE_QUOTES"
  name: "ALLOW_SINGLE_QUOTES"
  nameWithType: "JsonReadFeature.ALLOW_SINGLE_QUOTES"
  summary: "Feature that determines whether parser will allow use of single quotes (apostrophe, character '\\\\'') for quoting Strings (names and String values). If so, this is in addition to other acceptable markers.\n\nSince JSON specification requires use of double quotes for field names, this is a non-standard feature, and as such disabled by default."
- uid: "com.fasterxml.jackson.core.json.JsonReadFeature.ALLOW_TRAILING_COMMA"
  fullName: "com.fasterxml.jackson.core.json.JsonReadFeature.ALLOW_TRAILING_COMMA"
  name: "ALLOW_TRAILING_COMMA"
  nameWithType: "JsonReadFeature.ALLOW_TRAILING_COMMA"
  summary: "Feature that determines whether <xref uid=\"com.fasterxml.jackson.core.JsonParser\" data-throw-if-not-resolved=\"false\" data-raw-source=\"JsonParser\"></xref> will allow for a single trailing comma following the final value (in an Array) or member (in an Object). These commas will simply be ignored.\n\nFor example, when this feature is enabled, `[true,true,]` is equivalent to `[true, true]` and `{\"a\": true,}` is equivalent to `{\"a\": true}`.\n\nWhen combined with `ALLOW_MISSING_VALUES`, this feature takes priority, and the final trailing comma in an array declaration does not imply a missing (`null`) value. For example, when both `ALLOW_MISSING_VALUES` and `ALLOW_TRAILING_COMMA` are enabled, `[true,true,]` is equivalent to `[true, true]`, and `[true,true,,]` is equivalent to `[true, true, null]`.\n\nSince the JSON specification does not permit trailing commas, this is a non-standard feature, and as such disabled by default."
- uid: "com.fasterxml.jackson.core.json.JsonReadFeature.ALLOW_UNESCAPED_CONTROL_CHARS"
  fullName: "com.fasterxml.jackson.core.json.JsonReadFeature.ALLOW_UNESCAPED_CONTROL_CHARS"
  name: "ALLOW_UNESCAPED_CONTROL_CHARS"
  nameWithType: "JsonReadFeature.ALLOW_UNESCAPED_CONTROL_CHARS"
  summary: "Feature that determines whether parser will allow JSON Strings to contain unescaped control characters (ASCII characters with value less than 32, including tab and line feed characters) or not. If feature is set false, an exception is thrown if such a character is encountered.\n\nSince JSON specification requires quoting for all control characters, this is a non-standard feature, and as such disabled by default."
- uid: "com.fasterxml.jackson.core.json.JsonReadFeature.ALLOW_UNQUOTED_FIELD_NAMES"
  fullName: "com.fasterxml.jackson.core.json.JsonReadFeature.ALLOW_UNQUOTED_FIELD_NAMES"
  name: "ALLOW_UNQUOTED_FIELD_NAMES"
  nameWithType: "JsonReadFeature.ALLOW_UNQUOTED_FIELD_NAMES"
  summary: "Feature that determines whether parser will allow use of unquoted field names (which is allowed by Javascript, but not by JSON specification).\n\nSince JSON specification requires use of double quotes for field names, this is a non-standard feature, and as such disabled by default."
- uid: "com.fasterxml.jackson.core.json.JsonReadFeature.ALLOW_YAML_COMMENTS"
  fullName: "com.fasterxml.jackson.core.json.JsonReadFeature.ALLOW_YAML_COMMENTS"
  name: "ALLOW_YAML_COMMENTS"
  nameWithType: "JsonReadFeature.ALLOW_YAML_COMMENTS"
  summary: "Feature that determines whether parser will allow use of YAML comments, ones starting with '\\#' and continuing until the end of the line. This commenting style is common with scripting languages as well.\n\nSince JSON specification does not mention comments as legal construct, this is a non-standard feature. As such, feature is **disabled by default** for parsers and must be explicitly enabled."
methods:
- uid: "com.fasterxml.jackson.core.json.JsonReadFeature.collectDefaults()"
  fullName: "com.fasterxml.jackson.core.json.JsonReadFeature.collectDefaults()"
  name: "collectDefaults()"
  nameWithType: "JsonReadFeature.collectDefaults()"
  summary: "Method that calculates bit set (flags) of all features that are enabled by default."
  syntax: "public static int collectDefaults()"
  returns:
    type: "<xref href=\"int?alt=int&text=int\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.fasterxml.jackson.core.json.JsonReadFeature.enabledByDefault()"
  fullName: "com.fasterxml.jackson.core.json.JsonReadFeature.enabledByDefault()"
  name: "enabledByDefault()"
  nameWithType: "JsonReadFeature.enabledByDefault()"
  summary: "Accessor for checking whether this feature is enabled by default."
  syntax: "public boolean enabledByDefault()"
  returns:
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.fasterxml.jackson.core.json.JsonReadFeature.enabledIn(int)"
  fullName: "com.fasterxml.jackson.core.json.JsonReadFeature.enabledIn(int flags)"
  name: "enabledIn(int flags)"
  nameWithType: "JsonReadFeature.enabledIn(int flags)"
  summary: "Convenience method for checking whether feature is enabled in given bitmask"
  parameters:
  - name: "flags"
    type: "<xref href=\"int?alt=int&text=int\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public boolean enabledIn(int flags)"
  returns:
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.fasterxml.jackson.core.json.JsonReadFeature.getMask()"
  fullName: "com.fasterxml.jackson.core.json.JsonReadFeature.getMask()"
  name: "getMask()"
  nameWithType: "JsonReadFeature.getMask()"
  summary: "Returns bit mask for this feature instance; must be a single bit, that is of form `(1 << N)`"
  syntax: "public int getMask()"
  returns:
    type: "<xref href=\"int?alt=int&text=int\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.fasterxml.jackson.core.json.JsonReadFeature.mappedFeature()"
  fullName: "com.fasterxml.jackson.core.json.JsonReadFeature.mappedFeature()"
  name: "mappedFeature()"
  nameWithType: "JsonReadFeature.mappedFeature()"
  syntax: "public JsonParser.Feature mappedFeature()"
  returns:
    type: "<xref href=\"com.fasterxml.jackson.core.JsonParser.Feature?alt=com.fasterxml.jackson.core.JsonParser.Feature&text=Feature\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.fasterxml.jackson.core.json.JsonReadFeature.valueOf(java.lang.String)"
  fullName: "com.fasterxml.jackson.core.json.JsonReadFeature.valueOf(String name)"
  name: "valueOf(String name)"
  nameWithType: "JsonReadFeature.valueOf(String name)"
  parameters:
  - name: "name"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public static JsonReadFeature valueOf(String name)"
  returns:
    type: "<xref href=\"com.fasterxml.jackson.core.json.JsonReadFeature?alt=com.fasterxml.jackson.core.json.JsonReadFeature&text=JsonReadFeature\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.fasterxml.jackson.core.json.JsonReadFeature.values()"
  fullName: "com.fasterxml.jackson.core.json.JsonReadFeature.values()"
  name: "values()"
  nameWithType: "JsonReadFeature.values()"
  syntax: "public static JsonReadFeature[] values()"
  returns:
    type: "<xref href=\"com.fasterxml.jackson.core.json.JsonReadFeature?alt=com.fasterxml.jackson.core.json.JsonReadFeature&text=JsonReadFeature\" data-throw-if-not-resolved=\"False\" />[]"
implements:
- "<xref href=\"com.fasterxml.jackson.core.FormatFeature?alt=com.fasterxml.jackson.core.FormatFeature&text=FormatFeature\" data-throw-if-not-resolved=\"False\" />"
metadata: {}
package: "com.fasterxml.jackson.core.json"
artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
