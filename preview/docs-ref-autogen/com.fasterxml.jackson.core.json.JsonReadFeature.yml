### YamlMime:ManagedReference
items:
- uid: com.fasterxml.jackson.core.json.JsonReadFeature
  id: JsonReadFeature
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.json
  children:
  - com.fasterxml.jackson.core.json.JsonReadFeature.ALLOW_BACKSLASH_ESCAPING_ANY_CHARACTER
  - com.fasterxml.jackson.core.json.JsonReadFeature.ALLOW_JAVA_COMMENTS
  - com.fasterxml.jackson.core.json.JsonReadFeature.ALLOW_LEADING_DECIMAL_POINT_FOR_NUMBERS
  - com.fasterxml.jackson.core.json.JsonReadFeature.ALLOW_LEADING_ZEROS_FOR_NUMBERS
  - com.fasterxml.jackson.core.json.JsonReadFeature.ALLOW_MISSING_VALUES
  - com.fasterxml.jackson.core.json.JsonReadFeature.ALLOW_NON_NUMERIC_NUMBERS
  - com.fasterxml.jackson.core.json.JsonReadFeature.ALLOW_SINGLE_QUOTES
  - com.fasterxml.jackson.core.json.JsonReadFeature.ALLOW_TRAILING_COMMA
  - com.fasterxml.jackson.core.json.JsonReadFeature.ALLOW_UNESCAPED_CONTROL_CHARS
  - com.fasterxml.jackson.core.json.JsonReadFeature.ALLOW_UNQUOTED_FIELD_NAMES
  - com.fasterxml.jackson.core.json.JsonReadFeature.ALLOW_YAML_COMMENTS
  - com.fasterxml.jackson.core.json.JsonReadFeature.collectDefaults()
  - com.fasterxml.jackson.core.json.JsonReadFeature.enabledByDefault()
  - com.fasterxml.jackson.core.json.JsonReadFeature.enabledIn(int)
  - com.fasterxml.jackson.core.json.JsonReadFeature.getMask()
  - com.fasterxml.jackson.core.json.JsonReadFeature.mappedFeature()
  - com.fasterxml.jackson.core.json.JsonReadFeature.valueOf(java.lang.String)
  - com.fasterxml.jackson.core.json.JsonReadFeature.values()
  langs:
  - java
  name: JsonReadFeature
  nameWithType: JsonReadFeature
  fullName: com.fasterxml.jackson.core.json.JsonReadFeature
  type: Enum
  package: com.fasterxml.jackson.core.json
  summary: Token reader (parser) features specific to JSON backend. Eventual replacement for JSON-specific <xref uid="com.fasterxml.jackson.core.JsonParser.Feature" data-throw-if-not-resolved="false">com.fasterxml.jackson.core.JsonParser.Feature</xref>s.
  syntax:
    content: public enum JsonReadFeature extends Enum<JsonReadFeature> implements FormatFeature
  inheritance:
  - java.lang.Object
  - java.lang.Enum
  implements:
  - com.fasterxml.jackson.core.FormatFeature
  inheritedMembers:
  - java.lang.Enum.<T>valueOf(java.lang.Class<T>,java.lang.String)
  - java.lang.Enum.clone()
  - java.lang.Enum.compareTo(E)
  - java.lang.Enum.equals(java.lang.Object)
  - java.lang.Enum.finalize()
  - java.lang.Enum.getDeclaringClass()
  - java.lang.Enum.hashCode()
  - java.lang.Enum.name()
  - java.lang.Enum.ordinal()
  - java.lang.Enum.toString()
  - java.lang.Object.getClass()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
- uid: com.fasterxml.jackson.core.json.JsonReadFeature.ALLOW_BACKSLASH_ESCAPING_ANY_CHARACTER
  id: ALLOW_BACKSLASH_ESCAPING_ANY_CHARACTER
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.json.JsonReadFeature
  langs:
  - java
  name: ALLOW_BACKSLASH_ESCAPING_ANY_CHARACTER
  nameWithType: JsonReadFeature.ALLOW_BACKSLASH_ESCAPING_ANY_CHARACTER
  fullName: com.fasterxml.jackson.core.json.JsonReadFeature.ALLOW_BACKSLASH_ESCAPING_ANY_CHARACTER
  type: Field
  package: com.fasterxml.jackson.core.json
  summary: >-
    Feature that can be enabled to accept quoting of all character using backslash quoting mechanism: if not enabled, only characters that are explicitly listed by JSON specification can be thus escaped (see JSON spec for small list of these characters)


    Since JSON specification requires quoting for all control characters, this is a non-standard feature, and as such disabled by default.
  syntax:
    content: public static final JsonReadFeature ALLOW_BACKSLASH_ESCAPING_ANY_CHARACTER
    return:
      type: com.fasterxml.jackson.core.json.JsonReadFeature
- uid: com.fasterxml.jackson.core.json.JsonReadFeature.ALLOW_JAVA_COMMENTS
  id: ALLOW_JAVA_COMMENTS
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.json.JsonReadFeature
  langs:
  - java
  name: ALLOW_JAVA_COMMENTS
  nameWithType: JsonReadFeature.ALLOW_JAVA_COMMENTS
  fullName: com.fasterxml.jackson.core.json.JsonReadFeature.ALLOW_JAVA_COMMENTS
  type: Field
  package: com.fasterxml.jackson.core.json
  summary: >-
    Feature that determines whether parser will allow use of Java/C/C++ style comments (both '/'+'\*' and '//' varieties) within parsed content or not.


    Since JSON specification does not mention comments as legal construct, this is a non-standard feature; however, in the wild this is extensively used. As such, feature is **disabled by default** for parsers and must be explicitly enabled.
  syntax:
    content: public static final JsonReadFeature ALLOW_JAVA_COMMENTS
    return:
      type: com.fasterxml.jackson.core.json.JsonReadFeature
- uid: com.fasterxml.jackson.core.json.JsonReadFeature.ALLOW_LEADING_DECIMAL_POINT_FOR_NUMBERS
  id: ALLOW_LEADING_DECIMAL_POINT_FOR_NUMBERS
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.json.JsonReadFeature
  langs:
  - java
  name: ALLOW_LEADING_DECIMAL_POINT_FOR_NUMBERS
  nameWithType: JsonReadFeature.ALLOW_LEADING_DECIMAL_POINT_FOR_NUMBERS
  fullName: com.fasterxml.jackson.core.json.JsonReadFeature.ALLOW_LEADING_DECIMAL_POINT_FOR_NUMBERS
  type: Field
  package: com.fasterxml.jackson.core.json
  summary: >-
    Feature that determines whether parser will allow JSON decimal numbers to start with a decimal point (like: .123). If enabled, no exception is thrown, and the number is parsed as though a leading 0 had been present.


    Since JSON specification does not allow leading decimal, this is a non-standard feature, and as such disabled by default.
  syntax:
    content: public static final JsonReadFeature ALLOW_LEADING_DECIMAL_POINT_FOR_NUMBERS
    return:
      type: com.fasterxml.jackson.core.json.JsonReadFeature
- uid: com.fasterxml.jackson.core.json.JsonReadFeature.ALLOW_LEADING_ZEROS_FOR_NUMBERS
  id: ALLOW_LEADING_ZEROS_FOR_NUMBERS
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.json.JsonReadFeature
  langs:
  - java
  name: ALLOW_LEADING_ZEROS_FOR_NUMBERS
  nameWithType: JsonReadFeature.ALLOW_LEADING_ZEROS_FOR_NUMBERS
  fullName: com.fasterxml.jackson.core.json.JsonReadFeature.ALLOW_LEADING_ZEROS_FOR_NUMBERS
  type: Field
  package: com.fasterxml.jackson.core.json
  summary: >-
    Feature that determines whether parser will allow JSON integral numbers to start with additional (ignorable) zeroes (like: 000001). If enabled, no exception is thrown, and extra nulls are silently ignored (and not included in textual representation exposed via <xref uid="com.fasterxml.jackson.core.JsonParser.getText*" data-throw-if-not-resolved="false">JsonParser#getText</xref>).


    Since JSON specification does not allow leading zeroes, this is a non-standard feature, and as such disabled by default.
  syntax:
    content: public static final JsonReadFeature ALLOW_LEADING_ZEROS_FOR_NUMBERS
    return:
      type: com.fasterxml.jackson.core.json.JsonReadFeature
- uid: com.fasterxml.jackson.core.json.JsonReadFeature.ALLOW_MISSING_VALUES
  id: ALLOW_MISSING_VALUES
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.json.JsonReadFeature
  langs:
  - java
  name: ALLOW_MISSING_VALUES
  nameWithType: JsonReadFeature.ALLOW_MISSING_VALUES
  fullName: com.fasterxml.jackson.core.json.JsonReadFeature.ALLOW_MISSING_VALUES
  type: Field
  package: com.fasterxml.jackson.core.json
  summary: >-
    Feature allows the support for "missing" values in a JSON array: missing value meaning sequence of two commas, without value in-between but only optional white space. Enabling this feature will expose "missing" values as <xref uid="com.fasterxml.jackson.core.JsonToken.VALUE_NULL" data-throw-if-not-resolved="false">JsonToken#VALUE_NULL</xref> tokens, which typically become Java nulls in arrays and <xref uid="java.util.Collection" data-throw-if-not-resolved="false">java.util.Collection</xref> in data-binding.


    For example, enabling this feature will represent a JSON array `["value1",,"value3",]` as `["value1", null, "value3", null]`


    Since the JSON specification does not allow missing values this is a non-compliant JSON feature and is disabled by default.
  syntax:
    content: public static final JsonReadFeature ALLOW_MISSING_VALUES
    return:
      type: com.fasterxml.jackson.core.json.JsonReadFeature
- uid: com.fasterxml.jackson.core.json.JsonReadFeature.ALLOW_NON_NUMERIC_NUMBERS
  id: ALLOW_NON_NUMERIC_NUMBERS
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.json.JsonReadFeature
  langs:
  - java
  name: ALLOW_NON_NUMERIC_NUMBERS
  nameWithType: JsonReadFeature.ALLOW_NON_NUMERIC_NUMBERS
  fullName: com.fasterxml.jackson.core.json.JsonReadFeature.ALLOW_NON_NUMERIC_NUMBERS
  type: Field
  package: com.fasterxml.jackson.core.json
  summary: >-
    Feature that allows parser to recognize set of "Not-a-Number" (NaN) tokens as legal floating number values (similar to how many other data formats and programming language source code allows it). Specific subset contains values that [XML Schema][] (see section 3.2.4.1, Lexical Representation) allows (tokens are quoted contents, not including quotes):

     *  "INF" (for positive infinity), as well as alias of "Infinity"
     *  "-INF" (for negative infinity), alias "-Infinity"
     *  "NaN" (for other not-a-numbers, like result of division by zero)

    Since JSON specification does not allow use of such values, this is a non-standard feature, and as such disabled by default.



    [XML Schema]: http://www.w3.org/TR/xmlschema-2/
  syntax:
    content: public static final JsonReadFeature ALLOW_NON_NUMERIC_NUMBERS
    return:
      type: com.fasterxml.jackson.core.json.JsonReadFeature
- uid: com.fasterxml.jackson.core.json.JsonReadFeature.ALLOW_SINGLE_QUOTES
  id: ALLOW_SINGLE_QUOTES
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.json.JsonReadFeature
  langs:
  - java
  name: ALLOW_SINGLE_QUOTES
  nameWithType: JsonReadFeature.ALLOW_SINGLE_QUOTES
  fullName: com.fasterxml.jackson.core.json.JsonReadFeature.ALLOW_SINGLE_QUOTES
  type: Field
  package: com.fasterxml.jackson.core.json
  summary: >-
    Feature that determines whether parser will allow use of single quotes (apostrophe, character '\\'') for quoting Strings (names and String values). If so, this is in addition to other acceptable markers.


    Since JSON specification requires use of double quotes for field names, this is a non-standard feature, and as such disabled by default.
  syntax:
    content: public static final JsonReadFeature ALLOW_SINGLE_QUOTES
    return:
      type: com.fasterxml.jackson.core.json.JsonReadFeature
- uid: com.fasterxml.jackson.core.json.JsonReadFeature.ALLOW_TRAILING_COMMA
  id: ALLOW_TRAILING_COMMA
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.json.JsonReadFeature
  langs:
  - java
  name: ALLOW_TRAILING_COMMA
  nameWithType: JsonReadFeature.ALLOW_TRAILING_COMMA
  fullName: com.fasterxml.jackson.core.json.JsonReadFeature.ALLOW_TRAILING_COMMA
  type: Field
  package: com.fasterxml.jackson.core.json
  summary: >-
    Feature that determines whether <xref uid="com.fasterxml.jackson.core.JsonParser" data-throw-if-not-resolved="false">JsonParser</xref> will allow for a single trailing comma following the final value (in an Array) or member (in an Object). These commas will simply be ignored.


    For example, when this feature is enabled, `[true,true,]` is equivalent to `[true, true]` and `{"a": true,}` is equivalent to `{"a": true}`.


    When combined with `ALLOW_MISSING_VALUES`, this feature takes priority, and the final trailing comma in an array declaration does not imply a missing (`null`) value. For example, when both `ALLOW_MISSING_VALUES` and `ALLOW_TRAILING_COMMA` are enabled, `[true,true,]` is equivalent to `[true, true]`, and `[true,true,,]` is equivalent to `[true, true, null]`.


    Since the JSON specification does not permit trailing commas, this is a non-standard feature, and as such disabled by default.
  syntax:
    content: public static final JsonReadFeature ALLOW_TRAILING_COMMA
    return:
      type: com.fasterxml.jackson.core.json.JsonReadFeature
- uid: com.fasterxml.jackson.core.json.JsonReadFeature.ALLOW_UNESCAPED_CONTROL_CHARS
  id: ALLOW_UNESCAPED_CONTROL_CHARS
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.json.JsonReadFeature
  langs:
  - java
  name: ALLOW_UNESCAPED_CONTROL_CHARS
  nameWithType: JsonReadFeature.ALLOW_UNESCAPED_CONTROL_CHARS
  fullName: com.fasterxml.jackson.core.json.JsonReadFeature.ALLOW_UNESCAPED_CONTROL_CHARS
  type: Field
  package: com.fasterxml.jackson.core.json
  summary: >-
    Feature that determines whether parser will allow JSON Strings to contain unescaped control characters (ASCII characters with value less than 32, including tab and line feed characters) or not. If feature is set false, an exception is thrown if such a character is encountered.


    Since JSON specification requires quoting for all control characters, this is a non-standard feature, and as such disabled by default.
  syntax:
    content: public static final JsonReadFeature ALLOW_UNESCAPED_CONTROL_CHARS
    return:
      type: com.fasterxml.jackson.core.json.JsonReadFeature
- uid: com.fasterxml.jackson.core.json.JsonReadFeature.ALLOW_UNQUOTED_FIELD_NAMES
  id: ALLOW_UNQUOTED_FIELD_NAMES
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.json.JsonReadFeature
  langs:
  - java
  name: ALLOW_UNQUOTED_FIELD_NAMES
  nameWithType: JsonReadFeature.ALLOW_UNQUOTED_FIELD_NAMES
  fullName: com.fasterxml.jackson.core.json.JsonReadFeature.ALLOW_UNQUOTED_FIELD_NAMES
  type: Field
  package: com.fasterxml.jackson.core.json
  summary: >-
    Feature that determines whether parser will allow use of unquoted field names (which is allowed by Javascript, but not by JSON specification).


    Since JSON specification requires use of double quotes for field names, this is a non-standard feature, and as such disabled by default.
  syntax:
    content: public static final JsonReadFeature ALLOW_UNQUOTED_FIELD_NAMES
    return:
      type: com.fasterxml.jackson.core.json.JsonReadFeature
- uid: com.fasterxml.jackson.core.json.JsonReadFeature.ALLOW_YAML_COMMENTS
  id: ALLOW_YAML_COMMENTS
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.json.JsonReadFeature
  langs:
  - java
  name: ALLOW_YAML_COMMENTS
  nameWithType: JsonReadFeature.ALLOW_YAML_COMMENTS
  fullName: com.fasterxml.jackson.core.json.JsonReadFeature.ALLOW_YAML_COMMENTS
  type: Field
  package: com.fasterxml.jackson.core.json
  summary: >-
    Feature that determines whether parser will allow use of YAML comments, ones starting with '\#' and continuing until the end of the line. This commenting style is common with scripting languages as well.


    Since JSON specification does not mention comments as legal construct, this is a non-standard feature. As such, feature is **disabled by default** for parsers and must be explicitly enabled.
  syntax:
    content: public static final JsonReadFeature ALLOW_YAML_COMMENTS
    return:
      type: com.fasterxml.jackson.core.json.JsonReadFeature
- uid: com.fasterxml.jackson.core.json.JsonReadFeature.JsonReadFeature(boolean,com.fasterxml.jackson.core.JsonParser.Feature)
  id: JsonReadFeature(boolean,com.fasterxml.jackson.core.JsonParser.Feature)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.json.JsonReadFeature
  langs:
  - java
  name: JsonReadFeature(boolean defaultState, JsonParser.Feature mapTo)
  nameWithType: JsonReadFeature.JsonReadFeature(boolean defaultState, JsonParser.Feature mapTo)
  fullName: com.fasterxml.jackson.core.json.JsonReadFeature.JsonReadFeature(boolean defaultState, JsonParser.Feature mapTo)
  overload: com.fasterxml.jackson.core.json.JsonReadFeature.JsonReadFeature*
  type: Constructor
  package: com.fasterxml.jackson.core.json
  syntax:
    content: private JsonReadFeature(boolean defaultState, JsonParser.Feature mapTo)
    parameters:
    - id: defaultState
      type: boolean
    - id: mapTo
      type: com.fasterxml.jackson.core.JsonParser.Feature
- uid: com.fasterxml.jackson.core.json.JsonReadFeature.collectDefaults()
  id: collectDefaults()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.json.JsonReadFeature
  langs:
  - java
  name: collectDefaults()
  nameWithType: JsonReadFeature.collectDefaults()
  fullName: com.fasterxml.jackson.core.json.JsonReadFeature.collectDefaults()
  overload: com.fasterxml.jackson.core.json.JsonReadFeature.collectDefaults*
  type: Method
  package: com.fasterxml.jackson.core.json
  summary: Method that calculates bit set (flags) of all features that are enabled by default.
  syntax:
    content: public static int collectDefaults()
    return:
      type: int
- uid: com.fasterxml.jackson.core.json.JsonReadFeature.enabledByDefault()
  id: enabledByDefault()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.json.JsonReadFeature
  langs:
  - java
  name: enabledByDefault()
  nameWithType: JsonReadFeature.enabledByDefault()
  fullName: com.fasterxml.jackson.core.json.JsonReadFeature.enabledByDefault()
  overload: com.fasterxml.jackson.core.json.JsonReadFeature.enabledByDefault*
  type: Method
  package: com.fasterxml.jackson.core.json
  summary: Accessor for checking whether this feature is enabled by default.
  syntax:
    content: public boolean enabledByDefault()
    return:
      type: boolean
- uid: com.fasterxml.jackson.core.json.JsonReadFeature.enabledIn(int)
  id: enabledIn(int)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.json.JsonReadFeature
  langs:
  - java
  name: enabledIn(int flags)
  nameWithType: JsonReadFeature.enabledIn(int flags)
  fullName: com.fasterxml.jackson.core.json.JsonReadFeature.enabledIn(int flags)
  overload: com.fasterxml.jackson.core.json.JsonReadFeature.enabledIn*
  type: Method
  package: com.fasterxml.jackson.core.json
  summary: Convenience method for checking whether feature is enabled in given bitmask
  syntax:
    content: public boolean enabledIn(int flags)
    parameters:
    - id: flags
      type: int
    return:
      type: boolean
- uid: com.fasterxml.jackson.core.json.JsonReadFeature.getMask()
  id: getMask()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.json.JsonReadFeature
  langs:
  - java
  name: getMask()
  nameWithType: JsonReadFeature.getMask()
  fullName: com.fasterxml.jackson.core.json.JsonReadFeature.getMask()
  overload: com.fasterxml.jackson.core.json.JsonReadFeature.getMask*
  type: Method
  package: com.fasterxml.jackson.core.json
  summary: Returns bit mask for this feature instance; must be a single bit, that is of form `(1 << N)`
  syntax:
    content: public int getMask()
    return:
      type: int
- uid: com.fasterxml.jackson.core.json.JsonReadFeature.mappedFeature()
  id: mappedFeature()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.json.JsonReadFeature
  langs:
  - java
  name: mappedFeature()
  nameWithType: JsonReadFeature.mappedFeature()
  fullName: com.fasterxml.jackson.core.json.JsonReadFeature.mappedFeature()
  overload: com.fasterxml.jackson.core.json.JsonReadFeature.mappedFeature*
  type: Method
  package: com.fasterxml.jackson.core.json
  syntax:
    content: public JsonParser.Feature mappedFeature()
    return:
      type: com.fasterxml.jackson.core.JsonParser.Feature
- uid: com.fasterxml.jackson.core.json.JsonReadFeature.valueOf(java.lang.String)
  id: valueOf(java.lang.String)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.json.JsonReadFeature
  langs:
  - java
  name: valueOf(String name)
  nameWithType: JsonReadFeature.valueOf(String name)
  fullName: com.fasterxml.jackson.core.json.JsonReadFeature.valueOf(String name)
  overload: com.fasterxml.jackson.core.json.JsonReadFeature.valueOf*
  type: Method
  package: com.fasterxml.jackson.core.json
  syntax:
    content: public static JsonReadFeature valueOf(String name)
    parameters:
    - id: name
      type: java.lang.String
    return:
      type: com.fasterxml.jackson.core.json.JsonReadFeature
- uid: com.fasterxml.jackson.core.json.JsonReadFeature.values()
  id: values()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.json.JsonReadFeature
  langs:
  - java
  name: values()
  nameWithType: JsonReadFeature.values()
  fullName: com.fasterxml.jackson.core.json.JsonReadFeature.values()
  overload: com.fasterxml.jackson.core.json.JsonReadFeature.values*
  type: Method
  package: com.fasterxml.jackson.core.json
  syntax:
    content: public static JsonReadFeature[] values()
    return:
      type: com.fasterxml.jackson.core.json.JsonReadFeature[]
references:
- uid: boolean
  spec.java:
  - uid: boolean
    name: boolean
    fullName: boolean
- uid: com.fasterxml.jackson.core.JsonParser.Feature
  name: JsonParser.Feature
  nameWithType: JsonParser.Feature
  fullName: com.fasterxml.jackson.core.JsonParser.Feature
- uid: com.fasterxml.jackson.core.json.JsonReadFeature.JsonReadFeature*
  name: JsonReadFeature
  nameWithType: JsonReadFeature.JsonReadFeature
  fullName: com.fasterxml.jackson.core.json.JsonReadFeature.JsonReadFeature
  package: com.fasterxml.jackson.core.json
- uid: com.fasterxml.jackson.core.json.JsonReadFeature[]
  spec.java:
  - uid: com.fasterxml.jackson.core.json.JsonReadFeature
    name: JsonReadFeature
    fullName: com.fasterxml.jackson.core.json.JsonReadFeature
  - name: '[]'
    fullName: '[]'
- uid: com.fasterxml.jackson.core.json.JsonReadFeature.values*
  name: values
  nameWithType: JsonReadFeature.values
  fullName: com.fasterxml.jackson.core.json.JsonReadFeature.values
  package: com.fasterxml.jackson.core.json
- uid: java.lang.String
  spec.java:
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
- uid: com.fasterxml.jackson.core.json.JsonReadFeature.valueOf*
  name: valueOf
  nameWithType: JsonReadFeature.valueOf
  fullName: com.fasterxml.jackson.core.json.JsonReadFeature.valueOf
  package: com.fasterxml.jackson.core.json
- uid: int
  spec.java:
  - uid: int
    name: int
    fullName: int
- uid: com.fasterxml.jackson.core.json.JsonReadFeature.collectDefaults*
  name: collectDefaults
  nameWithType: JsonReadFeature.collectDefaults
  fullName: com.fasterxml.jackson.core.json.JsonReadFeature.collectDefaults
  package: com.fasterxml.jackson.core.json
- uid: com.fasterxml.jackson.core.json.JsonReadFeature.enabledByDefault*
  name: enabledByDefault
  nameWithType: JsonReadFeature.enabledByDefault
  fullName: com.fasterxml.jackson.core.json.JsonReadFeature.enabledByDefault
  package: com.fasterxml.jackson.core.json
- uid: com.fasterxml.jackson.core.json.JsonReadFeature.getMask*
  name: getMask
  nameWithType: JsonReadFeature.getMask
  fullName: com.fasterxml.jackson.core.json.JsonReadFeature.getMask
  package: com.fasterxml.jackson.core.json
- uid: com.fasterxml.jackson.core.json.JsonReadFeature.enabledIn*
  name: enabledIn
  nameWithType: JsonReadFeature.enabledIn
  fullName: com.fasterxml.jackson.core.json.JsonReadFeature.enabledIn
  package: com.fasterxml.jackson.core.json
- uid: com.fasterxml.jackson.core.json.JsonReadFeature.mappedFeature*
  name: mappedFeature
  nameWithType: JsonReadFeature.mappedFeature
  fullName: com.fasterxml.jackson.core.json.JsonReadFeature.mappedFeature
  package: com.fasterxml.jackson.core.json
- uid: java.lang.Enum<com.fasterxml.jackson.core.json.JsonReadFeature>
  name: Enum<JsonReadFeature>
  nameWithType: Enum<JsonReadFeature>
  fullName: java.lang.Enum<com.fasterxml.jackson.core.json.JsonReadFeature>
- uid: com.fasterxml.jackson.core.FormatFeature
  name: FormatFeature
  nameWithType: FormatFeature
  fullName: com.fasterxml.jackson.core.FormatFeature
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: java.lang.Enum.toString()
  name: Enum.toString()
  nameWithType: Enum.toString()
  fullName: java.lang.Enum.toString()
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: java.lang.Enum.clone()
  name: Enum.clone()
  nameWithType: Enum.clone()
  fullName: java.lang.Enum.clone()
- uid: java.lang.Enum.finalize()
  name: Enum.finalize()
  nameWithType: Enum.finalize()
  fullName: java.lang.Enum.finalize()
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: java.lang.Enum.compareTo(E)
  name: Enum.compareTo(E)
  nameWithType: Enum.compareTo(E)
  fullName: java.lang.Enum.compareTo(E)
- uid: java.lang.Enum.name()
  name: Enum.name()
  nameWithType: Enum.name()
  fullName: java.lang.Enum.name()
- uid: java.lang.Enum.<T>valueOf(java.lang.Class<T>,java.lang.String)
  name: Enum.<T>valueOf(Class<T>,String)
  nameWithType: Enum.<T>valueOf(Class<T>,String)
  fullName: java.lang.Enum.<T>valueOf(java.lang.Class<T>,java.lang.String)
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: java.lang.Enum.getDeclaringClass()
  name: Enum.getDeclaringClass()
  nameWithType: Enum.getDeclaringClass()
  fullName: java.lang.Enum.getDeclaringClass()
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.lang.Enum.ordinal()
  name: Enum.ordinal()
  nameWithType: Enum.ordinal()
  fullName: java.lang.Enum.ordinal()
- uid: java.lang.Enum.hashCode()
  name: Enum.hashCode()
  nameWithType: Enum.hashCode()
  fullName: java.lang.Enum.hashCode()
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: java.lang.Enum.equals(java.lang.Object)
  name: Enum.equals(Object)
  nameWithType: Enum.equals(Object)
  fullName: java.lang.Enum.equals(java.lang.Object)
- uid: java.lang.Enum
  name: Enum
  nameWithType: Enum
  fullName: java.lang.Enum
- uid: java.lang.Enum.
  name: Enum.
  nameWithType: Enum.
  fullName: java.lang.Enum.
- uid: T>,java.lang.String)
  name: T>,String)
  nameWithType: T>,String)
  fullName: T>,java.lang.String)
- uid: T>valueOf(java.lang.Class
  name: T>valueOf(Class
  nameWithType: T>valueOf(Class
  fullName: T>valueOf(java.lang.Class
