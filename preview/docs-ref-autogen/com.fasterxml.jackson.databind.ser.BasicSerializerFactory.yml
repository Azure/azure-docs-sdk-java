### YamlMime:ManagedReference
items:
- uid: com.fasterxml.jackson.databind.ser.BasicSerializerFactory
  id: BasicSerializerFactory
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser
  children:
  - com.fasterxml.jackson.databind.ser.BasicSerializerFactory.BasicSerializerFactory(com.fasterxml.jackson.databind.cfg.SerializerFactoryConfig)
  - com.fasterxml.jackson.databind.ser.BasicSerializerFactory._checkMapContentInclusion(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.BeanDescription,com.fasterxml.jackson.databind.ser.std.MapSerializer)
  - com.fasterxml.jackson.databind.ser.BasicSerializerFactory._concrete
  - com.fasterxml.jackson.databind.ser.BasicSerializerFactory._concreteLazy
  - com.fasterxml.jackson.databind.ser.BasicSerializerFactory._factoryConfig
  - com.fasterxml.jackson.databind.ser.BasicSerializerFactory._findContentSerializer(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.introspect.Annotated)
  - com.fasterxml.jackson.databind.ser.BasicSerializerFactory._findInclusionWithContent(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.BeanDescription,com.fasterxml.jackson.databind.JavaType,java.lang.Class<?>)
  - com.fasterxml.jackson.databind.ser.BasicSerializerFactory._findKeySerializer(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.introspect.Annotated)
  - com.fasterxml.jackson.databind.ser.BasicSerializerFactory.buildArraySerializer(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.type.ArrayType,com.fasterxml.jackson.databind.BeanDescription,boolean,com.fasterxml.jackson.databind.jsontype.TypeSerializer,com.fasterxml.jackson.databind.JsonSerializer<java.lang.Object>)
  - com.fasterxml.jackson.databind.ser.BasicSerializerFactory.buildAtomicReferenceSerializer(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.type.ReferenceType,com.fasterxml.jackson.databind.BeanDescription,boolean,com.fasterxml.jackson.databind.jsontype.TypeSerializer,com.fasterxml.jackson.databind.JsonSerializer<java.lang.Object>)
  - com.fasterxml.jackson.databind.ser.BasicSerializerFactory.buildCollectionSerializer(com.fasterxml.jackson.databind.JavaType,boolean,com.fasterxml.jackson.databind.jsontype.TypeSerializer,com.fasterxml.jackson.databind.JsonSerializer<java.lang.Object>)
  - com.fasterxml.jackson.databind.ser.BasicSerializerFactory.buildCollectionSerializer(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.type.CollectionType,com.fasterxml.jackson.databind.BeanDescription,boolean,com.fasterxml.jackson.databind.jsontype.TypeSerializer,com.fasterxml.jackson.databind.JsonSerializer<java.lang.Object>)
  - com.fasterxml.jackson.databind.ser.BasicSerializerFactory.buildContainerSerializer(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.BeanDescription,boolean)
  - com.fasterxml.jackson.databind.ser.BasicSerializerFactory.buildEnumSerializer(com.fasterxml.jackson.databind.SerializationConfig,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.BeanDescription)
  - com.fasterxml.jackson.databind.ser.BasicSerializerFactory.buildEnumSetSerializer(com.fasterxml.jackson.databind.JavaType)
  - com.fasterxml.jackson.databind.ser.BasicSerializerFactory.buildIndexedListSerializer(com.fasterxml.jackson.databind.JavaType,boolean,com.fasterxml.jackson.databind.jsontype.TypeSerializer,com.fasterxml.jackson.databind.JsonSerializer<java.lang.Object>)
  - com.fasterxml.jackson.databind.ser.BasicSerializerFactory.buildIterableSerializer(com.fasterxml.jackson.databind.SerializationConfig,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.BeanDescription,boolean,com.fasterxml.jackson.databind.JavaType)
  - com.fasterxml.jackson.databind.ser.BasicSerializerFactory.buildIteratorSerializer(com.fasterxml.jackson.databind.SerializationConfig,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.BeanDescription,boolean,com.fasterxml.jackson.databind.JavaType)
  - com.fasterxml.jackson.databind.ser.BasicSerializerFactory.buildMapEntrySerializer(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.BeanDescription,boolean,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.JavaType)
  - com.fasterxml.jackson.databind.ser.BasicSerializerFactory.buildMapSerializer(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.type.MapType,com.fasterxml.jackson.databind.BeanDescription,boolean,com.fasterxml.jackson.databind.JsonSerializer<java.lang.Object>,com.fasterxml.jackson.databind.jsontype.TypeSerializer,com.fasterxml.jackson.databind.JsonSerializer<java.lang.Object>)
  - com.fasterxml.jackson.databind.ser.BasicSerializerFactory.createKeySerializer(com.fasterxml.jackson.databind.SerializationConfig,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.JsonSerializer<java.lang.Object>)
  - com.fasterxml.jackson.databind.ser.BasicSerializerFactory.createKeySerializer(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.JsonSerializer<java.lang.Object>)
  - com.fasterxml.jackson.databind.ser.BasicSerializerFactory.createSerializer(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.JavaType)
  - com.fasterxml.jackson.databind.ser.BasicSerializerFactory.createTypeSerializer(com.fasterxml.jackson.databind.SerializationConfig,com.fasterxml.jackson.databind.JavaType)
  - com.fasterxml.jackson.databind.ser.BasicSerializerFactory.customSerializers()
  - com.fasterxml.jackson.databind.ser.BasicSerializerFactory.findConverter(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.introspect.Annotated)
  - com.fasterxml.jackson.databind.ser.BasicSerializerFactory.findConvertingSerializer(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.introspect.Annotated,com.fasterxml.jackson.databind.JsonSerializer<?>)
  - com.fasterxml.jackson.databind.ser.BasicSerializerFactory.findFilterId(com.fasterxml.jackson.databind.SerializationConfig,com.fasterxml.jackson.databind.BeanDescription)
  - com.fasterxml.jackson.databind.ser.BasicSerializerFactory.findOptionalStdSerializer(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.BeanDescription,boolean)
  - com.fasterxml.jackson.databind.ser.BasicSerializerFactory.findReferenceSerializer(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.type.ReferenceType,com.fasterxml.jackson.databind.BeanDescription,boolean)
  - com.fasterxml.jackson.databind.ser.BasicSerializerFactory.findSerializerByAddonType(com.fasterxml.jackson.databind.SerializationConfig,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.BeanDescription,boolean)
  - com.fasterxml.jackson.databind.ser.BasicSerializerFactory.findSerializerByAnnotations(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.BeanDescription)
  - com.fasterxml.jackson.databind.ser.BasicSerializerFactory.findSerializerByLookup(com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.SerializationConfig,com.fasterxml.jackson.databind.BeanDescription,boolean)
  - com.fasterxml.jackson.databind.ser.BasicSerializerFactory.findSerializerByPrimaryType(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.BeanDescription,boolean)
  - com.fasterxml.jackson.databind.ser.BasicSerializerFactory.findSerializerFromAnnotation(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.introspect.Annotated)
  - com.fasterxml.jackson.databind.ser.BasicSerializerFactory.getFactoryConfig()
  - com.fasterxml.jackson.databind.ser.BasicSerializerFactory.isIndexedList(java.lang.Class<?>)
  - com.fasterxml.jackson.databind.ser.BasicSerializerFactory.usesStaticTyping(com.fasterxml.jackson.databind.SerializationConfig,com.fasterxml.jackson.databind.BeanDescription,com.fasterxml.jackson.databind.jsontype.TypeSerializer)
  - com.fasterxml.jackson.databind.ser.BasicSerializerFactory.withAdditionalKeySerializers(com.fasterxml.jackson.databind.ser.Serializers)
  - com.fasterxml.jackson.databind.ser.BasicSerializerFactory.withAdditionalSerializers(com.fasterxml.jackson.databind.ser.Serializers)
  - com.fasterxml.jackson.databind.ser.BasicSerializerFactory.withConfig(com.fasterxml.jackson.databind.cfg.SerializerFactoryConfig)
  - com.fasterxml.jackson.databind.ser.BasicSerializerFactory.withSerializerModifier(com.fasterxml.jackson.databind.ser.BeanSerializerModifier)
  langs:
  - java
  name: BasicSerializerFactory
  nameWithType: BasicSerializerFactory
  fullName: com.fasterxml.jackson.databind.ser.BasicSerializerFactory
  type: Class
  package: com.fasterxml.jackson.databind.ser
  summary: >-
    Factory class that can provide serializers for standard JDK classes, as well as custom classes that extend standard classes or implement one of "well-known" interfaces (such as <xref uid="java.util.Collection" data-throw-if-not-resolved="false">java.util.Collection</xref>).


    Since all the serializers are eagerly instantiated, and there is no additional introspection or customizability of these types, this factory is essentially stateless.
  syntax:
    content: public abstract class BasicSerializerFactory extends SerializerFactory implements Serializable
  inheritance:
  - java.lang.Object
  - com.fasterxml.jackson.databind.ser.SerializerFactory
  implements:
  - java.io.Serializable
  inheritedMembers:
  - com.fasterxml.jackson.databind.ser.SerializerFactory.createKeySerializer(com.fasterxml.jackson.databind.SerializationConfig,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.JsonSerializer<java.lang.Object>)
  - com.fasterxml.jackson.databind.ser.SerializerFactory.createKeySerializer(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.JsonSerializer<java.lang.Object>)
  - com.fasterxml.jackson.databind.ser.SerializerFactory.createSerializer(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.JavaType)
  - com.fasterxml.jackson.databind.ser.SerializerFactory.createTypeSerializer(com.fasterxml.jackson.databind.SerializationConfig,com.fasterxml.jackson.databind.JavaType)
  - com.fasterxml.jackson.databind.ser.SerializerFactory.withAdditionalKeySerializers(com.fasterxml.jackson.databind.ser.Serializers)
  - com.fasterxml.jackson.databind.ser.SerializerFactory.withAdditionalSerializers(com.fasterxml.jackson.databind.ser.Serializers)
  - com.fasterxml.jackson.databind.ser.SerializerFactory.withSerializerModifier(com.fasterxml.jackson.databind.ser.BeanSerializerModifier)
  - java.lang.Object.clone()
  - java.lang.Object.equals(java.lang.Object)
  - java.lang.Object.finalize()
  - java.lang.Object.getClass()
  - java.lang.Object.hashCode()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.toString()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
- uid: com.fasterxml.jackson.databind.ser.BasicSerializerFactory.BasicSerializerFactory(com.fasterxml.jackson.databind.cfg.SerializerFactoryConfig)
  id: BasicSerializerFactory(com.fasterxml.jackson.databind.cfg.SerializerFactoryConfig)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.BasicSerializerFactory
  langs:
  - java
  name: BasicSerializerFactory(SerializerFactoryConfig config)
  nameWithType: BasicSerializerFactory.BasicSerializerFactory(SerializerFactoryConfig config)
  fullName: com.fasterxml.jackson.databind.ser.BasicSerializerFactory.BasicSerializerFactory(SerializerFactoryConfig config)
  overload: com.fasterxml.jackson.databind.ser.BasicSerializerFactory.BasicSerializerFactory*
  type: Constructor
  package: com.fasterxml.jackson.databind.ser
  summary: We will provide default constructor to allow sub-classing, but make it protected so that no non-singleton instances of the class will be instantiated.
  syntax:
    content: protected BasicSerializerFactory(SerializerFactoryConfig config)
    parameters:
    - id: config
      type: com.fasterxml.jackson.databind.cfg.SerializerFactoryConfig
- uid: com.fasterxml.jackson.databind.ser.BasicSerializerFactory._checkMapContentInclusion(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.BeanDescription,com.fasterxml.jackson.databind.ser.std.MapSerializer)
  id: _checkMapContentInclusion(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.BeanDescription,com.fasterxml.jackson.databind.ser.std.MapSerializer)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.BasicSerializerFactory
  langs:
  - java
  name: _checkMapContentInclusion(SerializerProvider prov, BeanDescription beanDesc, MapSerializer mapSer)
  nameWithType: BasicSerializerFactory._checkMapContentInclusion(SerializerProvider prov, BeanDescription beanDesc, MapSerializer mapSer)
  fullName: com.fasterxml.jackson.databind.ser.BasicSerializerFactory._checkMapContentInclusion(SerializerProvider prov, BeanDescription beanDesc, MapSerializer mapSer)
  overload: com.fasterxml.jackson.databind.ser.BasicSerializerFactory._checkMapContentInclusion*
  type: Method
  package: com.fasterxml.jackson.databind.ser
  summary: Helper method that does figures out content inclusion value to use, if any, and construct re-configured <xref uid="com.fasterxml.jackson.databind.ser.std.MapSerializer" data-throw-if-not-resolved="false">MapSerializer</xref> appropriately.
  syntax:
    content: protected MapSerializer _checkMapContentInclusion(SerializerProvider prov, BeanDescription beanDesc, MapSerializer mapSer)
    parameters:
    - id: prov
      type: com.fasterxml.jackson.databind.SerializerProvider
    - id: beanDesc
      type: com.fasterxml.jackson.databind.BeanDescription
    - id: mapSer
      type: com.fasterxml.jackson.databind.ser.std.MapSerializer
    return:
      type: com.fasterxml.jackson.databind.ser.std.MapSerializer
  exceptions:
  - type: com.fasterxml.jackson.databind.JsonMappingException
- uid: com.fasterxml.jackson.databind.ser.BasicSerializerFactory._concrete
  id: _concrete
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.BasicSerializerFactory
  langs:
  - java
  name: _concrete
  nameWithType: BasicSerializerFactory._concrete
  fullName: com.fasterxml.jackson.databind.ser.BasicSerializerFactory._concrete
  type: Field
  package: com.fasterxml.jackson.databind.ser
  summary: Since these are all JDK classes, we shouldn't have to worry about ClassLoader used to load them. Rather, we can just use the class name, and keep things simple and efficient.
  syntax:
    content: protected static final HashMap<String,JsonSerializer<?>> _concrete
    return:
      type: java.util.HashMap<java.lang.String,com.fasterxml.jackson.databind.JsonSerializer<?>>
- uid: com.fasterxml.jackson.databind.ser.BasicSerializerFactory._concreteLazy
  id: _concreteLazy
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.BasicSerializerFactory
  langs:
  - java
  name: _concreteLazy
  nameWithType: BasicSerializerFactory._concreteLazy
  fullName: com.fasterxml.jackson.databind.ser.BasicSerializerFactory._concreteLazy
  type: Field
  package: com.fasterxml.jackson.databind.ser
  summary: 'Actually it may not make much sense to eagerly instantiate all kinds of serializers: so this Map actually contains class references, not instances'
  syntax:
    content: protected static final HashMap<String,Class<? extends JsonSerializer<?>>> _concreteLazy
    return:
      type: java.util.HashMap<java.lang.String,java.lang.Class<? extends com.fasterxml.jackson.databind.JsonSerializer<?>>>
- uid: com.fasterxml.jackson.databind.ser.BasicSerializerFactory._factoryConfig
  id: _factoryConfig
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.BasicSerializerFactory
  langs:
  - java
  name: _factoryConfig
  nameWithType: BasicSerializerFactory._factoryConfig
  fullName: com.fasterxml.jackson.databind.ser.BasicSerializerFactory._factoryConfig
  type: Field
  package: com.fasterxml.jackson.databind.ser
  summary: Configuration settings for this factory; immutable instance (just like this factory), new version created via copy-constructor (fluent-style)
  syntax:
    content: protected final SerializerFactoryConfig _factoryConfig
    return:
      type: com.fasterxml.jackson.databind.cfg.SerializerFactoryConfig
- uid: com.fasterxml.jackson.databind.ser.BasicSerializerFactory._findContentSerializer(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.introspect.Annotated)
  id: _findContentSerializer(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.introspect.Annotated)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.BasicSerializerFactory
  langs:
  - java
  name: _findContentSerializer(SerializerProvider prov, Annotated a)
  nameWithType: BasicSerializerFactory._findContentSerializer(SerializerProvider prov, Annotated a)
  fullName: com.fasterxml.jackson.databind.ser.BasicSerializerFactory._findContentSerializer(SerializerProvider prov, Annotated a)
  overload: com.fasterxml.jackson.databind.ser.BasicSerializerFactory._findContentSerializer*
  type: Method
  package: com.fasterxml.jackson.databind.ser
  summary: Helper method called to try to find whether there is an annotation in the class that indicates content ("value") serializer to use. If so, will try to instantiate value serializer and return it; otherwise returns null.
  syntax:
    content: protected JsonSerializer<Object> _findContentSerializer(SerializerProvider prov, Annotated a)
    parameters:
    - id: prov
      type: com.fasterxml.jackson.databind.SerializerProvider
    - id: a
      type: com.fasterxml.jackson.databind.introspect.Annotated
    return:
      type: com.fasterxml.jackson.databind.JsonSerializer<java.lang.Object>
  exceptions:
  - type: com.fasterxml.jackson.databind.JsonMappingException
- uid: com.fasterxml.jackson.databind.ser.BasicSerializerFactory._findInclusionWithContent(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.BeanDescription,com.fasterxml.jackson.databind.JavaType,java.lang.Class<?>)
  id: _findInclusionWithContent(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.BeanDescription,com.fasterxml.jackson.databind.JavaType,java.lang.Class<?>)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.BasicSerializerFactory
  langs:
  - java
  name: _findInclusionWithContent(SerializerProvider prov, BeanDescription beanDesc, JavaType contentType, Class<?> configType)
  nameWithType: BasicSerializerFactory._findInclusionWithContent(SerializerProvider prov, BeanDescription beanDesc, JavaType contentType, Class<?> configType)
  fullName: com.fasterxml.jackson.databind.ser.BasicSerializerFactory._findInclusionWithContent(SerializerProvider prov, BeanDescription beanDesc, JavaType contentType, Class<?> configType)
  overload: com.fasterxml.jackson.databind.ser.BasicSerializerFactory._findInclusionWithContent*
  type: Method
  package: com.fasterxml.jackson.databind.ser
  summary: Helper method used for finding inclusion definitions for structured container types like `Map`s and referential types (like `AtomicReference`).
  syntax:
    content: protected JsonInclude.Value _findInclusionWithContent(SerializerProvider prov, BeanDescription beanDesc, JavaType contentType, Class<?> configType)
    parameters:
    - id: prov
      type: com.fasterxml.jackson.databind.SerializerProvider
    - id: beanDesc
      type: com.fasterxml.jackson.databind.BeanDescription
    - id: contentType
      type: com.fasterxml.jackson.databind.JavaType
      description: Declared full content type of container
    - id: configType
      type: java.lang.Class<?>
      description: Raw base type under which `configOverride`, if any, needs to be defined
    return:
      type: com.fasterxml.jackson.annotation.JsonInclude.Value
  exceptions:
  - type: com.fasterxml.jackson.databind.JsonMappingException
- uid: com.fasterxml.jackson.databind.ser.BasicSerializerFactory._findKeySerializer(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.introspect.Annotated)
  id: _findKeySerializer(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.introspect.Annotated)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.BasicSerializerFactory
  langs:
  - java
  name: _findKeySerializer(SerializerProvider prov, Annotated a)
  nameWithType: BasicSerializerFactory._findKeySerializer(SerializerProvider prov, Annotated a)
  fullName: com.fasterxml.jackson.databind.ser.BasicSerializerFactory._findKeySerializer(SerializerProvider prov, Annotated a)
  overload: com.fasterxml.jackson.databind.ser.BasicSerializerFactory._findKeySerializer*
  type: Method
  package: com.fasterxml.jackson.databind.ser
  summary: Helper method called to try to find whether there is an annotation in the class that indicates key serializer to use. If so, will try to instantiate key serializer and return it; otherwise returns null.
  syntax:
    content: protected JsonSerializer<Object> _findKeySerializer(SerializerProvider prov, Annotated a)
    parameters:
    - id: prov
      type: com.fasterxml.jackson.databind.SerializerProvider
    - id: a
      type: com.fasterxml.jackson.databind.introspect.Annotated
    return:
      type: com.fasterxml.jackson.databind.JsonSerializer<java.lang.Object>
  exceptions:
  - type: com.fasterxml.jackson.databind.JsonMappingException
- uid: com.fasterxml.jackson.databind.ser.BasicSerializerFactory.buildArraySerializer(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.type.ArrayType,com.fasterxml.jackson.databind.BeanDescription,boolean,com.fasterxml.jackson.databind.jsontype.TypeSerializer,com.fasterxml.jackson.databind.JsonSerializer<java.lang.Object>)
  id: buildArraySerializer(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.type.ArrayType,com.fasterxml.jackson.databind.BeanDescription,boolean,com.fasterxml.jackson.databind.jsontype.TypeSerializer,com.fasterxml.jackson.databind.JsonSerializer<java.lang.Object>)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.BasicSerializerFactory
  langs:
  - java
  name: buildArraySerializer(SerializerProvider prov, ArrayType type, BeanDescription beanDesc, boolean staticTyping, TypeSerializer elementTypeSerializer, JsonSerializer<Object> elementValueSerializer)
  nameWithType: BasicSerializerFactory.buildArraySerializer(SerializerProvider prov, ArrayType type, BeanDescription beanDesc, boolean staticTyping, TypeSerializer elementTypeSerializer, JsonSerializer<Object> elementValueSerializer)
  fullName: com.fasterxml.jackson.databind.ser.BasicSerializerFactory.buildArraySerializer(SerializerProvider prov, ArrayType type, BeanDescription beanDesc, boolean staticTyping, TypeSerializer elementTypeSerializer, JsonSerializer<Object> elementValueSerializer)
  overload: com.fasterxml.jackson.databind.ser.BasicSerializerFactory.buildArraySerializer*
  type: Method
  package: com.fasterxml.jackson.databind.ser
  summary: Helper method that handles configuration details when constructing serializers for `Object[]` (and subtypes, except for String).
  syntax:
    content: protected JsonSerializer<?> buildArraySerializer(SerializerProvider prov, ArrayType type, BeanDescription beanDesc, boolean staticTyping, TypeSerializer elementTypeSerializer, JsonSerializer<Object> elementValueSerializer)
    parameters:
    - id: prov
      type: com.fasterxml.jackson.databind.SerializerProvider
    - id: type
      type: com.fasterxml.jackson.databind.type.ArrayType
    - id: beanDesc
      type: com.fasterxml.jackson.databind.BeanDescription
    - id: staticTyping
      type: boolean
    - id: elementTypeSerializer
      type: com.fasterxml.jackson.databind.jsontype.TypeSerializer
    - id: elementValueSerializer
      type: com.fasterxml.jackson.databind.JsonSerializer<java.lang.Object>
    return:
      type: com.fasterxml.jackson.databind.JsonSerializer<?>
  exceptions:
  - type: com.fasterxml.jackson.databind.JsonMappingException
- uid: com.fasterxml.jackson.databind.ser.BasicSerializerFactory.buildAtomicReferenceSerializer(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.type.ReferenceType,com.fasterxml.jackson.databind.BeanDescription,boolean,com.fasterxml.jackson.databind.jsontype.TypeSerializer,com.fasterxml.jackson.databind.JsonSerializer<java.lang.Object>)
  id: buildAtomicReferenceSerializer(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.type.ReferenceType,com.fasterxml.jackson.databind.BeanDescription,boolean,com.fasterxml.jackson.databind.jsontype.TypeSerializer,com.fasterxml.jackson.databind.JsonSerializer<java.lang.Object>)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.BasicSerializerFactory
  langs:
  - java
  name: buildAtomicReferenceSerializer(SerializerProvider prov, ReferenceType refType, BeanDescription beanDesc, boolean staticTyping, TypeSerializer contentTypeSerializer, JsonSerializer<Object> contentSerializer)
  nameWithType: BasicSerializerFactory.buildAtomicReferenceSerializer(SerializerProvider prov, ReferenceType refType, BeanDescription beanDesc, boolean staticTyping, TypeSerializer contentTypeSerializer, JsonSerializer<Object> contentSerializer)
  fullName: com.fasterxml.jackson.databind.ser.BasicSerializerFactory.buildAtomicReferenceSerializer(SerializerProvider prov, ReferenceType refType, BeanDescription beanDesc, boolean staticTyping, TypeSerializer contentTypeSerializer, JsonSerializer<Object> contentSerializer)
  overload: com.fasterxml.jackson.databind.ser.BasicSerializerFactory.buildAtomicReferenceSerializer*
  type: Method
  package: com.fasterxml.jackson.databind.ser
  syntax:
    content: protected JsonSerializer<?> buildAtomicReferenceSerializer(SerializerProvider prov, ReferenceType refType, BeanDescription beanDesc, boolean staticTyping, TypeSerializer contentTypeSerializer, JsonSerializer<Object> contentSerializer)
    parameters:
    - id: prov
      type: com.fasterxml.jackson.databind.SerializerProvider
    - id: refType
      type: com.fasterxml.jackson.databind.type.ReferenceType
    - id: beanDesc
      type: com.fasterxml.jackson.databind.BeanDescription
    - id: staticTyping
      type: boolean
    - id: contentTypeSerializer
      type: com.fasterxml.jackson.databind.jsontype.TypeSerializer
    - id: contentSerializer
      type: com.fasterxml.jackson.databind.JsonSerializer<java.lang.Object>
    return:
      type: com.fasterxml.jackson.databind.JsonSerializer<?>
  exceptions:
  - type: com.fasterxml.jackson.databind.JsonMappingException
- uid: com.fasterxml.jackson.databind.ser.BasicSerializerFactory.buildCollectionSerializer(com.fasterxml.jackson.databind.JavaType,boolean,com.fasterxml.jackson.databind.jsontype.TypeSerializer,com.fasterxml.jackson.databind.JsonSerializer<java.lang.Object>)
  id: buildCollectionSerializer(com.fasterxml.jackson.databind.JavaType,boolean,com.fasterxml.jackson.databind.jsontype.TypeSerializer,com.fasterxml.jackson.databind.JsonSerializer<java.lang.Object>)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.BasicSerializerFactory
  langs:
  - java
  name: buildCollectionSerializer(JavaType elemType, boolean staticTyping, TypeSerializer vts, JsonSerializer<Object> valueSerializer)
  nameWithType: BasicSerializerFactory.buildCollectionSerializer(JavaType elemType, boolean staticTyping, TypeSerializer vts, JsonSerializer<Object> valueSerializer)
  fullName: com.fasterxml.jackson.databind.ser.BasicSerializerFactory.buildCollectionSerializer(JavaType elemType, boolean staticTyping, TypeSerializer vts, JsonSerializer<Object> valueSerializer)
  overload: com.fasterxml.jackson.databind.ser.BasicSerializerFactory.buildCollectionSerializer*
  type: Method
  package: com.fasterxml.jackson.databind.ser
  syntax:
    content: public ContainerSerializer<?> buildCollectionSerializer(JavaType elemType, boolean staticTyping, TypeSerializer vts, JsonSerializer<Object> valueSerializer)
    parameters:
    - id: elemType
      type: com.fasterxml.jackson.databind.JavaType
    - id: staticTyping
      type: boolean
    - id: vts
      type: com.fasterxml.jackson.databind.jsontype.TypeSerializer
    - id: valueSerializer
      type: com.fasterxml.jackson.databind.JsonSerializer<java.lang.Object>
    return:
      type: com.fasterxml.jackson.databind.ser.ContainerSerializer<?>
- uid: com.fasterxml.jackson.databind.ser.BasicSerializerFactory.buildCollectionSerializer(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.type.CollectionType,com.fasterxml.jackson.databind.BeanDescription,boolean,com.fasterxml.jackson.databind.jsontype.TypeSerializer,com.fasterxml.jackson.databind.JsonSerializer<java.lang.Object>)
  id: buildCollectionSerializer(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.type.CollectionType,com.fasterxml.jackson.databind.BeanDescription,boolean,com.fasterxml.jackson.databind.jsontype.TypeSerializer,com.fasterxml.jackson.databind.JsonSerializer<java.lang.Object>)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.BasicSerializerFactory
  langs:
  - java
  name: buildCollectionSerializer(SerializerProvider prov, CollectionType type, BeanDescription beanDesc, boolean staticTyping, TypeSerializer elementTypeSerializer, JsonSerializer<Object> elementValueSerializer)
  nameWithType: BasicSerializerFactory.buildCollectionSerializer(SerializerProvider prov, CollectionType type, BeanDescription beanDesc, boolean staticTyping, TypeSerializer elementTypeSerializer, JsonSerializer<Object> elementValueSerializer)
  fullName: com.fasterxml.jackson.databind.ser.BasicSerializerFactory.buildCollectionSerializer(SerializerProvider prov, CollectionType type, BeanDescription beanDesc, boolean staticTyping, TypeSerializer elementTypeSerializer, JsonSerializer<Object> elementValueSerializer)
  overload: com.fasterxml.jackson.databind.ser.BasicSerializerFactory.buildCollectionSerializer*
  type: Method
  package: com.fasterxml.jackson.databind.ser
  summary: Helper method that handles configuration details when constructing serializers for <xref uid="java.util.List" data-throw-if-not-resolved="false">java.util.List</xref> types that support efficient by-index access
  syntax:
    content: protected JsonSerializer<?> buildCollectionSerializer(SerializerProvider prov, CollectionType type, BeanDescription beanDesc, boolean staticTyping, TypeSerializer elementTypeSerializer, JsonSerializer<Object> elementValueSerializer)
    parameters:
    - id: prov
      type: com.fasterxml.jackson.databind.SerializerProvider
    - id: type
      type: com.fasterxml.jackson.databind.type.CollectionType
    - id: beanDesc
      type: com.fasterxml.jackson.databind.BeanDescription
    - id: staticTyping
      type: boolean
    - id: elementTypeSerializer
      type: com.fasterxml.jackson.databind.jsontype.TypeSerializer
    - id: elementValueSerializer
      type: com.fasterxml.jackson.databind.JsonSerializer<java.lang.Object>
    return:
      type: com.fasterxml.jackson.databind.JsonSerializer<?>
  exceptions:
  - type: com.fasterxml.jackson.databind.JsonMappingException
- uid: com.fasterxml.jackson.databind.ser.BasicSerializerFactory.buildContainerSerializer(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.BeanDescription,boolean)
  id: buildContainerSerializer(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.BeanDescription,boolean)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.BasicSerializerFactory
  langs:
  - java
  name: buildContainerSerializer(SerializerProvider prov, JavaType type, BeanDescription beanDesc, boolean staticTyping)
  nameWithType: BasicSerializerFactory.buildContainerSerializer(SerializerProvider prov, JavaType type, BeanDescription beanDesc, boolean staticTyping)
  fullName: com.fasterxml.jackson.databind.ser.BasicSerializerFactory.buildContainerSerializer(SerializerProvider prov, JavaType type, BeanDescription beanDesc, boolean staticTyping)
  overload: com.fasterxml.jackson.databind.ser.BasicSerializerFactory.buildContainerSerializer*
  type: Method
  package: com.fasterxml.jackson.databind.ser
  syntax:
    content: protected JsonSerializer<?> buildContainerSerializer(SerializerProvider prov, JavaType type, BeanDescription beanDesc, boolean staticTyping)
    parameters:
    - id: prov
      type: com.fasterxml.jackson.databind.SerializerProvider
    - id: type
      type: com.fasterxml.jackson.databind.JavaType
    - id: beanDesc
      type: com.fasterxml.jackson.databind.BeanDescription
    - id: staticTyping
      type: boolean
    return:
      type: com.fasterxml.jackson.databind.JsonSerializer<?>
  exceptions:
  - type: com.fasterxml.jackson.databind.JsonMappingException
- uid: com.fasterxml.jackson.databind.ser.BasicSerializerFactory.buildEnumSerializer(com.fasterxml.jackson.databind.SerializationConfig,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.BeanDescription)
  id: buildEnumSerializer(com.fasterxml.jackson.databind.SerializationConfig,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.BeanDescription)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.BasicSerializerFactory
  langs:
  - java
  name: buildEnumSerializer(SerializationConfig config, JavaType type, BeanDescription beanDesc)
  nameWithType: BasicSerializerFactory.buildEnumSerializer(SerializationConfig config, JavaType type, BeanDescription beanDesc)
  fullName: com.fasterxml.jackson.databind.ser.BasicSerializerFactory.buildEnumSerializer(SerializationConfig config, JavaType type, BeanDescription beanDesc)
  overload: com.fasterxml.jackson.databind.ser.BasicSerializerFactory.buildEnumSerializer*
  type: Method
  package: com.fasterxml.jackson.databind.ser
  syntax:
    content: protected JsonSerializer<?> buildEnumSerializer(SerializationConfig config, JavaType type, BeanDescription beanDesc)
    parameters:
    - id: config
      type: com.fasterxml.jackson.databind.SerializationConfig
    - id: type
      type: com.fasterxml.jackson.databind.JavaType
    - id: beanDesc
      type: com.fasterxml.jackson.databind.BeanDescription
    return:
      type: com.fasterxml.jackson.databind.JsonSerializer<?>
  exceptions:
  - type: com.fasterxml.jackson.databind.JsonMappingException
- uid: com.fasterxml.jackson.databind.ser.BasicSerializerFactory.buildEnumSetSerializer(com.fasterxml.jackson.databind.JavaType)
  id: buildEnumSetSerializer(com.fasterxml.jackson.databind.JavaType)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.BasicSerializerFactory
  langs:
  - java
  name: buildEnumSetSerializer(JavaType enumType)
  nameWithType: BasicSerializerFactory.buildEnumSetSerializer(JavaType enumType)
  fullName: com.fasterxml.jackson.databind.ser.BasicSerializerFactory.buildEnumSetSerializer(JavaType enumType)
  overload: com.fasterxml.jackson.databind.ser.BasicSerializerFactory.buildEnumSetSerializer*
  type: Method
  package: com.fasterxml.jackson.databind.ser
  syntax:
    content: public JsonSerializer<?> buildEnumSetSerializer(JavaType enumType)
    parameters:
    - id: enumType
      type: com.fasterxml.jackson.databind.JavaType
    return:
      type: com.fasterxml.jackson.databind.JsonSerializer<?>
- uid: com.fasterxml.jackson.databind.ser.BasicSerializerFactory.buildIndexedListSerializer(com.fasterxml.jackson.databind.JavaType,boolean,com.fasterxml.jackson.databind.jsontype.TypeSerializer,com.fasterxml.jackson.databind.JsonSerializer<java.lang.Object>)
  id: buildIndexedListSerializer(com.fasterxml.jackson.databind.JavaType,boolean,com.fasterxml.jackson.databind.jsontype.TypeSerializer,com.fasterxml.jackson.databind.JsonSerializer<java.lang.Object>)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.BasicSerializerFactory
  langs:
  - java
  name: buildIndexedListSerializer(JavaType elemType, boolean staticTyping, TypeSerializer vts, JsonSerializer<Object> valueSerializer)
  nameWithType: BasicSerializerFactory.buildIndexedListSerializer(JavaType elemType, boolean staticTyping, TypeSerializer vts, JsonSerializer<Object> valueSerializer)
  fullName: com.fasterxml.jackson.databind.ser.BasicSerializerFactory.buildIndexedListSerializer(JavaType elemType, boolean staticTyping, TypeSerializer vts, JsonSerializer<Object> valueSerializer)
  overload: com.fasterxml.jackson.databind.ser.BasicSerializerFactory.buildIndexedListSerializer*
  type: Method
  package: com.fasterxml.jackson.databind.ser
  syntax:
    content: public ContainerSerializer<?> buildIndexedListSerializer(JavaType elemType, boolean staticTyping, TypeSerializer vts, JsonSerializer<Object> valueSerializer)
    parameters:
    - id: elemType
      type: com.fasterxml.jackson.databind.JavaType
    - id: staticTyping
      type: boolean
    - id: vts
      type: com.fasterxml.jackson.databind.jsontype.TypeSerializer
    - id: valueSerializer
      type: com.fasterxml.jackson.databind.JsonSerializer<java.lang.Object>
    return:
      type: com.fasterxml.jackson.databind.ser.ContainerSerializer<?>
- uid: com.fasterxml.jackson.databind.ser.BasicSerializerFactory.buildIterableSerializer(com.fasterxml.jackson.databind.SerializationConfig,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.BeanDescription,boolean,com.fasterxml.jackson.databind.JavaType)
  id: buildIterableSerializer(com.fasterxml.jackson.databind.SerializationConfig,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.BeanDescription,boolean,com.fasterxml.jackson.databind.JavaType)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.BasicSerializerFactory
  langs:
  - java
  name: buildIterableSerializer(SerializationConfig config, JavaType type, BeanDescription beanDesc, boolean staticTyping, JavaType valueType)
  nameWithType: BasicSerializerFactory.buildIterableSerializer(SerializationConfig config, JavaType type, BeanDescription beanDesc, boolean staticTyping, JavaType valueType)
  fullName: com.fasterxml.jackson.databind.ser.BasicSerializerFactory.buildIterableSerializer(SerializationConfig config, JavaType type, BeanDescription beanDesc, boolean staticTyping, JavaType valueType)
  overload: com.fasterxml.jackson.databind.ser.BasicSerializerFactory.buildIterableSerializer*
  type: Method
  package: com.fasterxml.jackson.databind.ser
  syntax:
    content: protected JsonSerializer<?> buildIterableSerializer(SerializationConfig config, JavaType type, BeanDescription beanDesc, boolean staticTyping, JavaType valueType)
    parameters:
    - id: config
      type: com.fasterxml.jackson.databind.SerializationConfig
    - id: type
      type: com.fasterxml.jackson.databind.JavaType
    - id: beanDesc
      type: com.fasterxml.jackson.databind.BeanDescription
    - id: staticTyping
      type: boolean
    - id: valueType
      type: com.fasterxml.jackson.databind.JavaType
    return:
      type: com.fasterxml.jackson.databind.JsonSerializer<?>
  exceptions:
  - type: com.fasterxml.jackson.databind.JsonMappingException
- uid: com.fasterxml.jackson.databind.ser.BasicSerializerFactory.buildIteratorSerializer(com.fasterxml.jackson.databind.SerializationConfig,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.BeanDescription,boolean,com.fasterxml.jackson.databind.JavaType)
  id: buildIteratorSerializer(com.fasterxml.jackson.databind.SerializationConfig,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.BeanDescription,boolean,com.fasterxml.jackson.databind.JavaType)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.BasicSerializerFactory
  langs:
  - java
  name: buildIteratorSerializer(SerializationConfig config, JavaType type, BeanDescription beanDesc, boolean staticTyping, JavaType valueType)
  nameWithType: BasicSerializerFactory.buildIteratorSerializer(SerializationConfig config, JavaType type, BeanDescription beanDesc, boolean staticTyping, JavaType valueType)
  fullName: com.fasterxml.jackson.databind.ser.BasicSerializerFactory.buildIteratorSerializer(SerializationConfig config, JavaType type, BeanDescription beanDesc, boolean staticTyping, JavaType valueType)
  overload: com.fasterxml.jackson.databind.ser.BasicSerializerFactory.buildIteratorSerializer*
  type: Method
  package: com.fasterxml.jackson.databind.ser
  syntax:
    content: protected JsonSerializer<?> buildIteratorSerializer(SerializationConfig config, JavaType type, BeanDescription beanDesc, boolean staticTyping, JavaType valueType)
    parameters:
    - id: config
      type: com.fasterxml.jackson.databind.SerializationConfig
    - id: type
      type: com.fasterxml.jackson.databind.JavaType
    - id: beanDesc
      type: com.fasterxml.jackson.databind.BeanDescription
    - id: staticTyping
      type: boolean
    - id: valueType
      type: com.fasterxml.jackson.databind.JavaType
    return:
      type: com.fasterxml.jackson.databind.JsonSerializer<?>
  exceptions:
  - type: com.fasterxml.jackson.databind.JsonMappingException
- uid: com.fasterxml.jackson.databind.ser.BasicSerializerFactory.buildMapEntrySerializer(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.BeanDescription,boolean,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.JavaType)
  id: buildMapEntrySerializer(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.BeanDescription,boolean,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.JavaType)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.BasicSerializerFactory
  langs:
  - java
  name: buildMapEntrySerializer(SerializerProvider prov, JavaType type, BeanDescription beanDesc, boolean staticTyping, JavaType keyType, JavaType valueType)
  nameWithType: BasicSerializerFactory.buildMapEntrySerializer(SerializerProvider prov, JavaType type, BeanDescription beanDesc, boolean staticTyping, JavaType keyType, JavaType valueType)
  fullName: com.fasterxml.jackson.databind.ser.BasicSerializerFactory.buildMapEntrySerializer(SerializerProvider prov, JavaType type, BeanDescription beanDesc, boolean staticTyping, JavaType keyType, JavaType valueType)
  overload: com.fasterxml.jackson.databind.ser.BasicSerializerFactory.buildMapEntrySerializer*
  type: Method
  package: com.fasterxml.jackson.databind.ser
  syntax:
    content: protected JsonSerializer<?> buildMapEntrySerializer(SerializerProvider prov, JavaType type, BeanDescription beanDesc, boolean staticTyping, JavaType keyType, JavaType valueType)
    parameters:
    - id: prov
      type: com.fasterxml.jackson.databind.SerializerProvider
    - id: type
      type: com.fasterxml.jackson.databind.JavaType
    - id: beanDesc
      type: com.fasterxml.jackson.databind.BeanDescription
    - id: staticTyping
      type: boolean
    - id: keyType
      type: com.fasterxml.jackson.databind.JavaType
    - id: valueType
      type: com.fasterxml.jackson.databind.JavaType
    return:
      type: com.fasterxml.jackson.databind.JsonSerializer<?>
  exceptions:
  - type: com.fasterxml.jackson.databind.JsonMappingException
- uid: com.fasterxml.jackson.databind.ser.BasicSerializerFactory.buildMapSerializer(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.type.MapType,com.fasterxml.jackson.databind.BeanDescription,boolean,com.fasterxml.jackson.databind.JsonSerializer<java.lang.Object>,com.fasterxml.jackson.databind.jsontype.TypeSerializer,com.fasterxml.jackson.databind.JsonSerializer<java.lang.Object>)
  id: buildMapSerializer(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.type.MapType,com.fasterxml.jackson.databind.BeanDescription,boolean,com.fasterxml.jackson.databind.JsonSerializer<java.lang.Object>,com.fasterxml.jackson.databind.jsontype.TypeSerializer,com.fasterxml.jackson.databind.JsonSerializer<java.lang.Object>)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.BasicSerializerFactory
  langs:
  - java
  name: buildMapSerializer(SerializerProvider prov, MapType type, BeanDescription beanDesc, boolean staticTyping, JsonSerializer<Object> keySerializer, TypeSerializer elementTypeSerializer, JsonSerializer<Object> elementValueSerializer)
  nameWithType: BasicSerializerFactory.buildMapSerializer(SerializerProvider prov, MapType type, BeanDescription beanDesc, boolean staticTyping, JsonSerializer<Object> keySerializer, TypeSerializer elementTypeSerializer, JsonSerializer<Object> elementValueSerializer)
  fullName: com.fasterxml.jackson.databind.ser.BasicSerializerFactory.buildMapSerializer(SerializerProvider prov, MapType type, BeanDescription beanDesc, boolean staticTyping, JsonSerializer<Object> keySerializer, TypeSerializer elementTypeSerializer, JsonSerializer<Object> elementValueSerializer)
  overload: com.fasterxml.jackson.databind.ser.BasicSerializerFactory.buildMapSerializer*
  type: Method
  package: com.fasterxml.jackson.databind.ser
  summary: Helper method that handles configuration details when constructing serializers for <xref uid="java.util.Map" data-throw-if-not-resolved="false">java.util.Map</xref> types.
  syntax:
    content: protected JsonSerializer<?> buildMapSerializer(SerializerProvider prov, MapType type, BeanDescription beanDesc, boolean staticTyping, JsonSerializer<Object> keySerializer, TypeSerializer elementTypeSerializer, JsonSerializer<Object> elementValueSerializer)
    parameters:
    - id: prov
      type: com.fasterxml.jackson.databind.SerializerProvider
    - id: type
      type: com.fasterxml.jackson.databind.type.MapType
    - id: beanDesc
      type: com.fasterxml.jackson.databind.BeanDescription
    - id: staticTyping
      type: boolean
    - id: keySerializer
      type: com.fasterxml.jackson.databind.JsonSerializer<java.lang.Object>
    - id: elementTypeSerializer
      type: com.fasterxml.jackson.databind.jsontype.TypeSerializer
    - id: elementValueSerializer
      type: com.fasterxml.jackson.databind.JsonSerializer<java.lang.Object>
    return:
      type: com.fasterxml.jackson.databind.JsonSerializer<?>
  exceptions:
  - type: com.fasterxml.jackson.databind.JsonMappingException
- uid: com.fasterxml.jackson.databind.ser.BasicSerializerFactory.createKeySerializer(com.fasterxml.jackson.databind.SerializationConfig,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.JsonSerializer<java.lang.Object>)
  id: createKeySerializer(com.fasterxml.jackson.databind.SerializationConfig,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.JsonSerializer<java.lang.Object>)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.BasicSerializerFactory
  langs:
  - java
  name: createKeySerializer(SerializationConfig config, JavaType keyType, JsonSerializer<Object> defaultImpl)
  nameWithType: BasicSerializerFactory.createKeySerializer(SerializationConfig config, JavaType keyType, JsonSerializer<Object> defaultImpl)
  fullName: com.fasterxml.jackson.databind.ser.BasicSerializerFactory.createKeySerializer(SerializationConfig config, JavaType keyType, JsonSerializer<Object> defaultImpl)
  overload: com.fasterxml.jackson.databind.ser.BasicSerializerFactory.createKeySerializer*
  type: Method
  package: com.fasterxml.jackson.databind.ser
  syntax:
    content: public JsonSerializer<Object> createKeySerializer(SerializationConfig config, JavaType keyType, JsonSerializer<Object> defaultImpl)
    parameters:
    - id: config
      type: com.fasterxml.jackson.databind.SerializationConfig
    - id: keyType
      type: com.fasterxml.jackson.databind.JavaType
    - id: defaultImpl
      type: com.fasterxml.jackson.databind.JsonSerializer<java.lang.Object>
    return:
      type: com.fasterxml.jackson.databind.JsonSerializer<java.lang.Object>
- uid: com.fasterxml.jackson.databind.ser.BasicSerializerFactory.createKeySerializer(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.JsonSerializer<java.lang.Object>)
  id: createKeySerializer(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.JsonSerializer<java.lang.Object>)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.BasicSerializerFactory
  langs:
  - java
  name: createKeySerializer(SerializerProvider ctxt, JavaType keyType, JsonSerializer<Object> defaultImpl)
  nameWithType: BasicSerializerFactory.createKeySerializer(SerializerProvider ctxt, JavaType keyType, JsonSerializer<Object> defaultImpl)
  fullName: com.fasterxml.jackson.databind.ser.BasicSerializerFactory.createKeySerializer(SerializerProvider ctxt, JavaType keyType, JsonSerializer<Object> defaultImpl)
  overload: com.fasterxml.jackson.databind.ser.BasicSerializerFactory.createKeySerializer*
  type: Method
  package: com.fasterxml.jackson.databind.ser
  summary: Method called to create serializer to use for serializing JSON property names (which must be output as `JsonToken.FIELD_NAME`) for Map that has specified declared key type, and is for specified property (or, if property is null, as root value)
  syntax:
    content: public JsonSerializer<Object> createKeySerializer(SerializerProvider ctxt, JavaType keyType, JsonSerializer<Object> defaultImpl)
    parameters:
    - id: ctxt
      type: com.fasterxml.jackson.databind.SerializerProvider
    - id: keyType
      type: com.fasterxml.jackson.databind.JavaType
    - id: defaultImpl
      type: com.fasterxml.jackson.databind.JsonSerializer<java.lang.Object>
    return:
      type: com.fasterxml.jackson.databind.JsonSerializer<java.lang.Object>
  exceptions:
  - type: com.fasterxml.jackson.databind.JsonMappingException
- uid: com.fasterxml.jackson.databind.ser.BasicSerializerFactory.createSerializer(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.JavaType)
  id: createSerializer(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.JavaType)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.BasicSerializerFactory
  langs:
  - java
  name: createSerializer(SerializerProvider prov, JavaType type)
  nameWithType: BasicSerializerFactory.createSerializer(SerializerProvider prov, JavaType type)
  fullName: com.fasterxml.jackson.databind.ser.BasicSerializerFactory.createSerializer(SerializerProvider prov, JavaType type)
  overload: com.fasterxml.jackson.databind.ser.BasicSerializerFactory.createSerializer*
  type: Method
  package: com.fasterxml.jackson.databind.ser
  summary: Method called to create (or, for immutable serializers, reuse) a serializer for given type.
  syntax:
    content: public abstract JsonSerializer<Object> createSerializer(SerializerProvider prov, JavaType type)
    parameters:
    - id: prov
      type: com.fasterxml.jackson.databind.SerializerProvider
    - id: type
      type: com.fasterxml.jackson.databind.JavaType
    return:
      type: com.fasterxml.jackson.databind.JsonSerializer<java.lang.Object>
  exceptions:
  - type: com.fasterxml.jackson.databind.JsonMappingException
- uid: com.fasterxml.jackson.databind.ser.BasicSerializerFactory.createTypeSerializer(com.fasterxml.jackson.databind.SerializationConfig,com.fasterxml.jackson.databind.JavaType)
  id: createTypeSerializer(com.fasterxml.jackson.databind.SerializationConfig,com.fasterxml.jackson.databind.JavaType)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.BasicSerializerFactory
  langs:
  - java
  name: createTypeSerializer(SerializationConfig config, JavaType baseType)
  nameWithType: BasicSerializerFactory.createTypeSerializer(SerializationConfig config, JavaType baseType)
  fullName: com.fasterxml.jackson.databind.ser.BasicSerializerFactory.createTypeSerializer(SerializationConfig config, JavaType baseType)
  overload: com.fasterxml.jackson.databind.ser.BasicSerializerFactory.createTypeSerializer*
  type: Method
  package: com.fasterxml.jackson.databind.ser
  summary: Method called to construct a type serializer for values with given declared base type. This is called for values other than those of bean property types.
  syntax:
    content: public TypeSerializer createTypeSerializer(SerializationConfig config, JavaType baseType)
    parameters:
    - id: config
      type: com.fasterxml.jackson.databind.SerializationConfig
    - id: baseType
      type: com.fasterxml.jackson.databind.JavaType
    return:
      type: com.fasterxml.jackson.databind.jsontype.TypeSerializer
- uid: com.fasterxml.jackson.databind.ser.BasicSerializerFactory.customSerializers()
  id: customSerializers()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.BasicSerializerFactory
  langs:
  - java
  name: customSerializers()
  nameWithType: BasicSerializerFactory.customSerializers()
  fullName: com.fasterxml.jackson.databind.ser.BasicSerializerFactory.customSerializers()
  overload: com.fasterxml.jackson.databind.ser.BasicSerializerFactory.customSerializers*
  type: Method
  package: com.fasterxml.jackson.databind.ser
  syntax:
    content: protected abstract Iterable<Serializers> customSerializers()
    return:
      type: java.lang.Iterable<com.fasterxml.jackson.databind.ser.Serializers>
- uid: com.fasterxml.jackson.databind.ser.BasicSerializerFactory.findConverter(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.introspect.Annotated)
  id: findConverter(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.introspect.Annotated)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.BasicSerializerFactory
  langs:
  - java
  name: findConverter(SerializerProvider prov, Annotated a)
  nameWithType: BasicSerializerFactory.findConverter(SerializerProvider prov, Annotated a)
  fullName: com.fasterxml.jackson.databind.ser.BasicSerializerFactory.findConverter(SerializerProvider prov, Annotated a)
  overload: com.fasterxml.jackson.databind.ser.BasicSerializerFactory.findConverter*
  type: Method
  package: com.fasterxml.jackson.databind.ser
  syntax:
    content: protected Converter<Object,Object> findConverter(SerializerProvider prov, Annotated a)
    parameters:
    - id: prov
      type: com.fasterxml.jackson.databind.SerializerProvider
    - id: a
      type: com.fasterxml.jackson.databind.introspect.Annotated
    return:
      type: com.fasterxml.jackson.databind.util.Converter<java.lang.Object,java.lang.Object>
  exceptions:
  - type: com.fasterxml.jackson.databind.JsonMappingException
- uid: com.fasterxml.jackson.databind.ser.BasicSerializerFactory.findConvertingSerializer(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.introspect.Annotated,com.fasterxml.jackson.databind.JsonSerializer<?>)
  id: findConvertingSerializer(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.introspect.Annotated,com.fasterxml.jackson.databind.JsonSerializer<?>)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.BasicSerializerFactory
  langs:
  - java
  name: findConvertingSerializer(SerializerProvider prov, Annotated a, JsonSerializer<?> ser)
  nameWithType: BasicSerializerFactory.findConvertingSerializer(SerializerProvider prov, Annotated a, JsonSerializer<?> ser)
  fullName: com.fasterxml.jackson.databind.ser.BasicSerializerFactory.findConvertingSerializer(SerializerProvider prov, Annotated a, JsonSerializer<?> ser)
  overload: com.fasterxml.jackson.databind.ser.BasicSerializerFactory.findConvertingSerializer*
  type: Method
  package: com.fasterxml.jackson.databind.ser
  summary: Helper method that will check whether given annotated entity (usually class, but may also be a property accessor) indicates that a <xref uid="com.fasterxml.jackson.databind.util.Converter" data-throw-if-not-resolved="false">Converter</xref> is to be used; and if so, to construct and return suitable serializer for it. If not, will simply return given serializer as is.
  syntax:
    content: protected JsonSerializer<?> findConvertingSerializer(SerializerProvider prov, Annotated a, JsonSerializer<?> ser)
    parameters:
    - id: prov
      type: com.fasterxml.jackson.databind.SerializerProvider
    - id: a
      type: com.fasterxml.jackson.databind.introspect.Annotated
    - id: ser
      type: com.fasterxml.jackson.databind.JsonSerializer<?>
    return:
      type: com.fasterxml.jackson.databind.JsonSerializer<?>
  exceptions:
  - type: com.fasterxml.jackson.databind.JsonMappingException
- uid: com.fasterxml.jackson.databind.ser.BasicSerializerFactory.findFilterId(com.fasterxml.jackson.databind.SerializationConfig,com.fasterxml.jackson.databind.BeanDescription)
  id: findFilterId(com.fasterxml.jackson.databind.SerializationConfig,com.fasterxml.jackson.databind.BeanDescription)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.BasicSerializerFactory
  langs:
  - java
  name: findFilterId(SerializationConfig config, BeanDescription beanDesc)
  nameWithType: BasicSerializerFactory.findFilterId(SerializationConfig config, BeanDescription beanDesc)
  fullName: com.fasterxml.jackson.databind.ser.BasicSerializerFactory.findFilterId(SerializationConfig config, BeanDescription beanDesc)
  overload: com.fasterxml.jackson.databind.ser.BasicSerializerFactory.findFilterId*
  type: Method
  package: com.fasterxml.jackson.databind.ser
  summary: Method called to find filter that is configured to be used with bean serializer being built, if any.
  syntax:
    content: protected Object findFilterId(SerializationConfig config, BeanDescription beanDesc)
    parameters:
    - id: config
      type: com.fasterxml.jackson.databind.SerializationConfig
    - id: beanDesc
      type: com.fasterxml.jackson.databind.BeanDescription
    return:
      type: java.lang.Object
- uid: com.fasterxml.jackson.databind.ser.BasicSerializerFactory.findOptionalStdSerializer(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.BeanDescription,boolean)
  id: findOptionalStdSerializer(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.BeanDescription,boolean)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.BasicSerializerFactory
  langs:
  - java
  name: findOptionalStdSerializer(SerializerProvider prov, JavaType type, BeanDescription beanDesc, boolean staticTyping)
  nameWithType: BasicSerializerFactory.findOptionalStdSerializer(SerializerProvider prov, JavaType type, BeanDescription beanDesc, boolean staticTyping)
  fullName: com.fasterxml.jackson.databind.ser.BasicSerializerFactory.findOptionalStdSerializer(SerializerProvider prov, JavaType type, BeanDescription beanDesc, boolean staticTyping)
  overload: com.fasterxml.jackson.databind.ser.BasicSerializerFactory.findOptionalStdSerializer*
  type: Method
  package: com.fasterxml.jackson.databind.ser
  summary: Overridable method called after checking all other types.
  syntax:
    content: protected JsonSerializer<?> findOptionalStdSerializer(SerializerProvider prov, JavaType type, BeanDescription beanDesc, boolean staticTyping)
    parameters:
    - id: prov
      type: com.fasterxml.jackson.databind.SerializerProvider
    - id: type
      type: com.fasterxml.jackson.databind.JavaType
    - id: beanDesc
      type: com.fasterxml.jackson.databind.BeanDescription
    - id: staticTyping
      type: boolean
    return:
      type: com.fasterxml.jackson.databind.JsonSerializer<?>
  exceptions:
  - type: com.fasterxml.jackson.databind.JsonMappingException
- uid: com.fasterxml.jackson.databind.ser.BasicSerializerFactory.findReferenceSerializer(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.type.ReferenceType,com.fasterxml.jackson.databind.BeanDescription,boolean)
  id: findReferenceSerializer(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.type.ReferenceType,com.fasterxml.jackson.databind.BeanDescription,boolean)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.BasicSerializerFactory
  langs:
  - java
  name: findReferenceSerializer(SerializerProvider prov, ReferenceType refType, BeanDescription beanDesc, boolean staticTyping)
  nameWithType: BasicSerializerFactory.findReferenceSerializer(SerializerProvider prov, ReferenceType refType, BeanDescription beanDesc, boolean staticTyping)
  fullName: com.fasterxml.jackson.databind.ser.BasicSerializerFactory.findReferenceSerializer(SerializerProvider prov, ReferenceType refType, BeanDescription beanDesc, boolean staticTyping)
  overload: com.fasterxml.jackson.databind.ser.BasicSerializerFactory.findReferenceSerializer*
  type: Method
  package: com.fasterxml.jackson.databind.ser
  syntax:
    content: public JsonSerializer<?> findReferenceSerializer(SerializerProvider prov, ReferenceType refType, BeanDescription beanDesc, boolean staticTyping)
    parameters:
    - id: prov
      type: com.fasterxml.jackson.databind.SerializerProvider
    - id: refType
      type: com.fasterxml.jackson.databind.type.ReferenceType
    - id: beanDesc
      type: com.fasterxml.jackson.databind.BeanDescription
    - id: staticTyping
      type: boolean
    return:
      type: com.fasterxml.jackson.databind.JsonSerializer<?>
  exceptions:
  - type: com.fasterxml.jackson.databind.JsonMappingException
- uid: com.fasterxml.jackson.databind.ser.BasicSerializerFactory.findSerializerByAddonType(com.fasterxml.jackson.databind.SerializationConfig,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.BeanDescription,boolean)
  id: findSerializerByAddonType(com.fasterxml.jackson.databind.SerializationConfig,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.BeanDescription,boolean)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.BasicSerializerFactory
  langs:
  - java
  name: findSerializerByAddonType(SerializationConfig config, JavaType javaType, BeanDescription beanDesc, boolean staticTyping)
  nameWithType: BasicSerializerFactory.findSerializerByAddonType(SerializationConfig config, JavaType javaType, BeanDescription beanDesc, boolean staticTyping)
  fullName: com.fasterxml.jackson.databind.ser.BasicSerializerFactory.findSerializerByAddonType(SerializationConfig config, JavaType javaType, BeanDescription beanDesc, boolean staticTyping)
  overload: com.fasterxml.jackson.databind.ser.BasicSerializerFactory.findSerializerByAddonType*
  type: Method
  package: com.fasterxml.jackson.databind.ser
  summary: 'Reflection-based serialized find method, which checks if given class implements one of recognized "add-on" interfaces. Add-on here means a role that is usually or can be a secondary trait: for example, bean classes may implement <xref uid="java.lang.Iterable" data-throw-if-not-resolved="false">Iterable</xref>, but their main function is usually something else. The reason for'
  syntax:
    content: protected final JsonSerializer<?> findSerializerByAddonType(SerializationConfig config, JavaType javaType, BeanDescription beanDesc, boolean staticTyping)
    parameters:
    - id: config
      type: com.fasterxml.jackson.databind.SerializationConfig
    - id: javaType
      type: com.fasterxml.jackson.databind.JavaType
    - id: beanDesc
      type: com.fasterxml.jackson.databind.BeanDescription
    - id: staticTyping
      type: boolean
    return:
      type: com.fasterxml.jackson.databind.JsonSerializer<?>
  exceptions:
  - type: com.fasterxml.jackson.databind.JsonMappingException
- uid: com.fasterxml.jackson.databind.ser.BasicSerializerFactory.findSerializerByAnnotations(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.BeanDescription)
  id: findSerializerByAnnotations(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.BeanDescription)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.BasicSerializerFactory
  langs:
  - java
  name: findSerializerByAnnotations(SerializerProvider prov, JavaType type, BeanDescription beanDesc)
  nameWithType: BasicSerializerFactory.findSerializerByAnnotations(SerializerProvider prov, JavaType type, BeanDescription beanDesc)
  fullName: com.fasterxml.jackson.databind.ser.BasicSerializerFactory.findSerializerByAnnotations(SerializerProvider prov, JavaType type, BeanDescription beanDesc)
  overload: com.fasterxml.jackson.databind.ser.BasicSerializerFactory.findSerializerByAnnotations*
  type: Method
  package: com.fasterxml.jackson.databind.ser
  summary: >-
    Method called to see if one of primary per-class annotations (or related, like implementing of <xref uid="com.fasterxml.jackson.databind.JsonSerializable" data-throw-if-not-resolved="false">JsonSerializable</xref>) determines the serializer to use.


    Currently handles things like:

     *  If type implements <xref uid="com.fasterxml.jackson.databind.JsonSerializable" data-throw-if-not-resolved="false">JsonSerializable</xref>, use that
     *  If type has <xref uid="com.fasterxml.jackson.annotation.JsonValue" data-throw-if-not-resolved="false">com.fasterxml.jackson.annotation.JsonValue</xref> annotation (or equivalent), build serializer based on that property
  syntax:
    content: protected final JsonSerializer<?> findSerializerByAnnotations(SerializerProvider prov, JavaType type, BeanDescription beanDesc)
    parameters:
    - id: prov
      type: com.fasterxml.jackson.databind.SerializerProvider
    - id: type
      type: com.fasterxml.jackson.databind.JavaType
    - id: beanDesc
      type: com.fasterxml.jackson.databind.BeanDescription
    return:
      type: com.fasterxml.jackson.databind.JsonSerializer<?>
  exceptions:
  - type: com.fasterxml.jackson.databind.JsonMappingException
- uid: com.fasterxml.jackson.databind.ser.BasicSerializerFactory.findSerializerByLookup(com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.SerializationConfig,com.fasterxml.jackson.databind.BeanDescription,boolean)
  id: findSerializerByLookup(com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.SerializationConfig,com.fasterxml.jackson.databind.BeanDescription,boolean)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.BasicSerializerFactory
  langs:
  - java
  name: findSerializerByLookup(JavaType type, SerializationConfig config, BeanDescription beanDesc, boolean staticTyping)
  nameWithType: BasicSerializerFactory.findSerializerByLookup(JavaType type, SerializationConfig config, BeanDescription beanDesc, boolean staticTyping)
  fullName: com.fasterxml.jackson.databind.ser.BasicSerializerFactory.findSerializerByLookup(JavaType type, SerializationConfig config, BeanDescription beanDesc, boolean staticTyping)
  overload: com.fasterxml.jackson.databind.ser.BasicSerializerFactory.findSerializerByLookup*
  type: Method
  package: com.fasterxml.jackson.databind.ser
  summary: Method that will use fast lookup (and identity comparison) methods to see if we know serializer to use for given type.
  syntax:
    content: protected final JsonSerializer<?> findSerializerByLookup(JavaType type, SerializationConfig config, BeanDescription beanDesc, boolean staticTyping)
    parameters:
    - id: type
      type: com.fasterxml.jackson.databind.JavaType
    - id: config
      type: com.fasterxml.jackson.databind.SerializationConfig
    - id: beanDesc
      type: com.fasterxml.jackson.databind.BeanDescription
    - id: staticTyping
      type: boolean
    return:
      type: com.fasterxml.jackson.databind.JsonSerializer<?>
- uid: com.fasterxml.jackson.databind.ser.BasicSerializerFactory.findSerializerByPrimaryType(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.BeanDescription,boolean)
  id: findSerializerByPrimaryType(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.BeanDescription,boolean)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.BasicSerializerFactory
  langs:
  - java
  name: findSerializerByPrimaryType(SerializerProvider prov, JavaType type, BeanDescription beanDesc, boolean staticTyping)
  nameWithType: BasicSerializerFactory.findSerializerByPrimaryType(SerializerProvider prov, JavaType type, BeanDescription beanDesc, boolean staticTyping)
  fullName: com.fasterxml.jackson.databind.ser.BasicSerializerFactory.findSerializerByPrimaryType(SerializerProvider prov, JavaType type, BeanDescription beanDesc, boolean staticTyping)
  overload: com.fasterxml.jackson.databind.ser.BasicSerializerFactory.findSerializerByPrimaryType*
  type: Method
  package: com.fasterxml.jackson.databind.ser
  summary: Method for checking if we can determine serializer to use based on set of known primary types, checking for set of known base types (exact matches having been compared against with `findSerializerByLookup`). This does not include "secondary" interfaces, but mostly concrete or abstract base classes.
  syntax:
    content: protected final JsonSerializer<?> findSerializerByPrimaryType(SerializerProvider prov, JavaType type, BeanDescription beanDesc, boolean staticTyping)
    parameters:
    - id: prov
      type: com.fasterxml.jackson.databind.SerializerProvider
    - id: type
      type: com.fasterxml.jackson.databind.JavaType
    - id: beanDesc
      type: com.fasterxml.jackson.databind.BeanDescription
    - id: staticTyping
      type: boolean
    return:
      type: com.fasterxml.jackson.databind.JsonSerializer<?>
  exceptions:
  - type: com.fasterxml.jackson.databind.JsonMappingException
- uid: com.fasterxml.jackson.databind.ser.BasicSerializerFactory.findSerializerFromAnnotation(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.introspect.Annotated)
  id: findSerializerFromAnnotation(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.introspect.Annotated)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.BasicSerializerFactory
  langs:
  - java
  name: findSerializerFromAnnotation(SerializerProvider prov, Annotated a)
  nameWithType: BasicSerializerFactory.findSerializerFromAnnotation(SerializerProvider prov, Annotated a)
  fullName: com.fasterxml.jackson.databind.ser.BasicSerializerFactory.findSerializerFromAnnotation(SerializerProvider prov, Annotated a)
  overload: com.fasterxml.jackson.databind.ser.BasicSerializerFactory.findSerializerFromAnnotation*
  type: Method
  package: com.fasterxml.jackson.databind.ser
  summary: Helper method called to check if a class or method has an annotation (@link com.fasterxml.jackson.databind.annotation.JsonSerialize\#using) that tells the class to use for serialization. Returns null if no such annotation found.
  syntax:
    content: protected JsonSerializer<Object> findSerializerFromAnnotation(SerializerProvider prov, Annotated a)
    parameters:
    - id: prov
      type: com.fasterxml.jackson.databind.SerializerProvider
    - id: a
      type: com.fasterxml.jackson.databind.introspect.Annotated
    return:
      type: com.fasterxml.jackson.databind.JsonSerializer<java.lang.Object>
  exceptions:
  - type: com.fasterxml.jackson.databind.JsonMappingException
- uid: com.fasterxml.jackson.databind.ser.BasicSerializerFactory.getFactoryConfig()
  id: getFactoryConfig()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.BasicSerializerFactory
  langs:
  - java
  name: getFactoryConfig()
  nameWithType: BasicSerializerFactory.getFactoryConfig()
  fullName: com.fasterxml.jackson.databind.ser.BasicSerializerFactory.getFactoryConfig()
  overload: com.fasterxml.jackson.databind.ser.BasicSerializerFactory.getFactoryConfig*
  type: Method
  package: com.fasterxml.jackson.databind.ser
  summary: >-
    Method for getting current <xref uid="com.fasterxml.jackson.databind.cfg.SerializerFactoryConfig" data-throw-if-not-resolved="false">SerializerFactoryConfig</xref>.


    Note that since instances are immutable, you can NOT change settings by accessing an instance and calling methods: this will simply create new instance of config object.
  syntax:
    content: public SerializerFactoryConfig getFactoryConfig()
    return:
      type: com.fasterxml.jackson.databind.cfg.SerializerFactoryConfig
- uid: com.fasterxml.jackson.databind.ser.BasicSerializerFactory.isIndexedList(java.lang.Class<?>)
  id: isIndexedList(java.lang.Class<?>)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.BasicSerializerFactory
  langs:
  - java
  name: isIndexedList(Class<?> cls)
  nameWithType: BasicSerializerFactory.isIndexedList(Class<?> cls)
  fullName: com.fasterxml.jackson.databind.ser.BasicSerializerFactory.isIndexedList(Class<?> cls)
  overload: com.fasterxml.jackson.databind.ser.BasicSerializerFactory.isIndexedList*
  type: Method
  package: com.fasterxml.jackson.databind.ser
  syntax:
    content: protected boolean isIndexedList(Class<?> cls)
    parameters:
    - id: cls
      type: java.lang.Class<?>
    return:
      type: boolean
- uid: com.fasterxml.jackson.databind.ser.BasicSerializerFactory.usesStaticTyping(com.fasterxml.jackson.databind.SerializationConfig,com.fasterxml.jackson.databind.BeanDescription,com.fasterxml.jackson.databind.jsontype.TypeSerializer)
  id: usesStaticTyping(com.fasterxml.jackson.databind.SerializationConfig,com.fasterxml.jackson.databind.BeanDescription,com.fasterxml.jackson.databind.jsontype.TypeSerializer)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.BasicSerializerFactory
  langs:
  - java
  name: usesStaticTyping(SerializationConfig config, BeanDescription beanDesc, TypeSerializer typeSer)
  nameWithType: BasicSerializerFactory.usesStaticTyping(SerializationConfig config, BeanDescription beanDesc, TypeSerializer typeSer)
  fullName: com.fasterxml.jackson.databind.ser.BasicSerializerFactory.usesStaticTyping(SerializationConfig config, BeanDescription beanDesc, TypeSerializer typeSer)
  overload: com.fasterxml.jackson.databind.ser.BasicSerializerFactory.usesStaticTyping*
  type: Method
  package: com.fasterxml.jackson.databind.ser
  summary: Helper method to check whether global settings and/or class annotations for the bean class indicate that static typing (declared types) should be used for properties. (instead of dynamic runtime types).
  syntax:
    content: protected boolean usesStaticTyping(SerializationConfig config, BeanDescription beanDesc, TypeSerializer typeSer)
    parameters:
    - id: config
      type: com.fasterxml.jackson.databind.SerializationConfig
    - id: beanDesc
      type: com.fasterxml.jackson.databind.BeanDescription
    - id: typeSer
      type: com.fasterxml.jackson.databind.jsontype.TypeSerializer
    return:
      type: boolean
- uid: com.fasterxml.jackson.databind.ser.BasicSerializerFactory.withAdditionalKeySerializers(com.fasterxml.jackson.databind.ser.Serializers)
  id: withAdditionalKeySerializers(com.fasterxml.jackson.databind.ser.Serializers)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.BasicSerializerFactory
  langs:
  - java
  name: withAdditionalKeySerializers(Serializers additional)
  nameWithType: BasicSerializerFactory.withAdditionalKeySerializers(Serializers additional)
  fullName: com.fasterxml.jackson.databind.ser.BasicSerializerFactory.withAdditionalKeySerializers(Serializers additional)
  overload: com.fasterxml.jackson.databind.ser.BasicSerializerFactory.withAdditionalKeySerializers*
  type: Method
  package: com.fasterxml.jackson.databind.ser
  summary: Convenience method for creating a new factory instance with an additional key serializer provider.
  syntax:
    content: public final SerializerFactory withAdditionalKeySerializers(Serializers additional)
    parameters:
    - id: additional
      type: com.fasterxml.jackson.databind.ser.Serializers
    return:
      type: com.fasterxml.jackson.databind.ser.SerializerFactory
- uid: com.fasterxml.jackson.databind.ser.BasicSerializerFactory.withAdditionalSerializers(com.fasterxml.jackson.databind.ser.Serializers)
  id: withAdditionalSerializers(com.fasterxml.jackson.databind.ser.Serializers)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.BasicSerializerFactory
  langs:
  - java
  name: withAdditionalSerializers(Serializers additional)
  nameWithType: BasicSerializerFactory.withAdditionalSerializers(Serializers additional)
  fullName: com.fasterxml.jackson.databind.ser.BasicSerializerFactory.withAdditionalSerializers(Serializers additional)
  overload: com.fasterxml.jackson.databind.ser.BasicSerializerFactory.withAdditionalSerializers*
  type: Method
  package: com.fasterxml.jackson.databind.ser
  summary: Convenience method for creating a new factory instance with an additional serializer provider.
  syntax:
    content: public final SerializerFactory withAdditionalSerializers(Serializers additional)
    parameters:
    - id: additional
      type: com.fasterxml.jackson.databind.ser.Serializers
    return:
      type: com.fasterxml.jackson.databind.ser.SerializerFactory
- uid: com.fasterxml.jackson.databind.ser.BasicSerializerFactory.withConfig(com.fasterxml.jackson.databind.cfg.SerializerFactoryConfig)
  id: withConfig(com.fasterxml.jackson.databind.cfg.SerializerFactoryConfig)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.BasicSerializerFactory
  langs:
  - java
  name: withConfig(SerializerFactoryConfig config)
  nameWithType: BasicSerializerFactory.withConfig(SerializerFactoryConfig config)
  fullName: com.fasterxml.jackson.databind.ser.BasicSerializerFactory.withConfig(SerializerFactoryConfig config)
  overload: com.fasterxml.jackson.databind.ser.BasicSerializerFactory.withConfig*
  type: Method
  package: com.fasterxml.jackson.databind.ser
  summary: >-
    Method used for creating a new instance of this factory, but with different configuration. Reason for specifying factory method (instead of plain constructor) is to allow proper sub-classing of factories.


    Note that custom sub-classes generally **must override** implementation of this method, as it usually requires instantiating a new instance of factory type. Check out javadocs for <xref uid="com.fasterxml.jackson.databind.ser.BeanSerializerFactory" data-throw-if-not-resolved="false">com.fasterxml.jackson.databind.ser.BeanSerializerFactory</xref> for more details.
  syntax:
    content: public abstract SerializerFactory withConfig(SerializerFactoryConfig config)
    parameters:
    - id: config
      type: com.fasterxml.jackson.databind.cfg.SerializerFactoryConfig
    return:
      type: com.fasterxml.jackson.databind.ser.SerializerFactory
- uid: com.fasterxml.jackson.databind.ser.BasicSerializerFactory.withSerializerModifier(com.fasterxml.jackson.databind.ser.BeanSerializerModifier)
  id: withSerializerModifier(com.fasterxml.jackson.databind.ser.BeanSerializerModifier)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.BasicSerializerFactory
  langs:
  - java
  name: withSerializerModifier(BeanSerializerModifier modifier)
  nameWithType: BasicSerializerFactory.withSerializerModifier(BeanSerializerModifier modifier)
  fullName: com.fasterxml.jackson.databind.ser.BasicSerializerFactory.withSerializerModifier(BeanSerializerModifier modifier)
  overload: com.fasterxml.jackson.databind.ser.BasicSerializerFactory.withSerializerModifier*
  type: Method
  package: com.fasterxml.jackson.databind.ser
  summary: Convenience method for creating a new factory instance with additional bean serializer modifier.
  syntax:
    content: public final SerializerFactory withSerializerModifier(BeanSerializerModifier modifier)
    parameters:
    - id: modifier
      type: com.fasterxml.jackson.databind.ser.BeanSerializerModifier
    return:
      type: com.fasterxml.jackson.databind.ser.SerializerFactory
references:
- uid: com.fasterxml.jackson.databind.cfg.SerializerFactoryConfig
  name: SerializerFactoryConfig
  nameWithType: SerializerFactoryConfig
  fullName: com.fasterxml.jackson.databind.cfg.SerializerFactoryConfig
- uid: com.fasterxml.jackson.databind.ser.BasicSerializerFactory.BasicSerializerFactory*
  name: BasicSerializerFactory
  nameWithType: BasicSerializerFactory.BasicSerializerFactory
  fullName: com.fasterxml.jackson.databind.ser.BasicSerializerFactory.BasicSerializerFactory
  package: com.fasterxml.jackson.databind.ser
- uid: com.fasterxml.jackson.databind.ser.BasicSerializerFactory.getFactoryConfig*
  name: getFactoryConfig
  nameWithType: BasicSerializerFactory.getFactoryConfig
  fullName: com.fasterxml.jackson.databind.ser.BasicSerializerFactory.getFactoryConfig
  package: com.fasterxml.jackson.databind.ser
- uid: com.fasterxml.jackson.databind.ser.SerializerFactory
  name: SerializerFactory
  nameWithType: SerializerFactory
  fullName: com.fasterxml.jackson.databind.ser.SerializerFactory
- uid: com.fasterxml.jackson.databind.ser.BasicSerializerFactory.withConfig*
  name: withConfig
  nameWithType: BasicSerializerFactory.withConfig
  fullName: com.fasterxml.jackson.databind.ser.BasicSerializerFactory.withConfig
  package: com.fasterxml.jackson.databind.ser
- uid: com.fasterxml.jackson.databind.ser.Serializers
  name: Serializers
  nameWithType: Serializers
  fullName: com.fasterxml.jackson.databind.ser.Serializers
- uid: com.fasterxml.jackson.databind.ser.BasicSerializerFactory.withAdditionalSerializers*
  name: withAdditionalSerializers
  nameWithType: BasicSerializerFactory.withAdditionalSerializers
  fullName: com.fasterxml.jackson.databind.ser.BasicSerializerFactory.withAdditionalSerializers
  package: com.fasterxml.jackson.databind.ser
- uid: com.fasterxml.jackson.databind.ser.BasicSerializerFactory.withAdditionalKeySerializers*
  name: withAdditionalKeySerializers
  nameWithType: BasicSerializerFactory.withAdditionalKeySerializers
  fullName: com.fasterxml.jackson.databind.ser.BasicSerializerFactory.withAdditionalKeySerializers
  package: com.fasterxml.jackson.databind.ser
- uid: com.fasterxml.jackson.databind.ser.BeanSerializerModifier
  name: BeanSerializerModifier
  nameWithType: BeanSerializerModifier
  fullName: com.fasterxml.jackson.databind.ser.BeanSerializerModifier
- uid: com.fasterxml.jackson.databind.ser.BasicSerializerFactory.withSerializerModifier*
  name: withSerializerModifier
  nameWithType: BasicSerializerFactory.withSerializerModifier
  fullName: com.fasterxml.jackson.databind.ser.BasicSerializerFactory.withSerializerModifier
  package: com.fasterxml.jackson.databind.ser
- uid: com.fasterxml.jackson.databind.JsonMappingException
  name: JsonMappingException
  nameWithType: JsonMappingException
  fullName: com.fasterxml.jackson.databind.JsonMappingException
- uid: com.fasterxml.jackson.databind.SerializerProvider
  name: SerializerProvider
  nameWithType: SerializerProvider
  fullName: com.fasterxml.jackson.databind.SerializerProvider
- uid: com.fasterxml.jackson.databind.JavaType
  name: JavaType
  nameWithType: JavaType
  fullName: com.fasterxml.jackson.databind.JavaType
- uid: com.fasterxml.jackson.databind.JsonSerializer<java.lang.Object>
  spec.java:
  - uid: com.fasterxml.jackson.databind.JsonSerializer
    name: JsonSerializer
    fullName: com.fasterxml.jackson.databind.JsonSerializer
  - name: <
    fullName: <
  - uid: java.lang.Object
    name: Object
    fullName: java.lang.Object
  - name: '>'
    fullName: '>'
- uid: com.fasterxml.jackson.databind.ser.BasicSerializerFactory.createSerializer*
  name: createSerializer
  nameWithType: BasicSerializerFactory.createSerializer
  fullName: com.fasterxml.jackson.databind.ser.BasicSerializerFactory.createSerializer
  package: com.fasterxml.jackson.databind.ser
- uid: com.fasterxml.jackson.databind.ser.BasicSerializerFactory.createKeySerializer*
  name: createKeySerializer
  nameWithType: BasicSerializerFactory.createKeySerializer
  fullName: com.fasterxml.jackson.databind.ser.BasicSerializerFactory.createKeySerializer
  package: com.fasterxml.jackson.databind.ser
- uid: com.fasterxml.jackson.databind.SerializationConfig
  name: SerializationConfig
  nameWithType: SerializationConfig
  fullName: com.fasterxml.jackson.databind.SerializationConfig
- uid: com.fasterxml.jackson.databind.jsontype.TypeSerializer
  name: TypeSerializer
  nameWithType: TypeSerializer
  fullName: com.fasterxml.jackson.databind.jsontype.TypeSerializer
- uid: com.fasterxml.jackson.databind.ser.BasicSerializerFactory.createTypeSerializer*
  name: createTypeSerializer
  nameWithType: BasicSerializerFactory.createTypeSerializer
  fullName: com.fasterxml.jackson.databind.ser.BasicSerializerFactory.createTypeSerializer
  package: com.fasterxml.jackson.databind.ser
- uid: java.lang.Iterable<com.fasterxml.jackson.databind.ser.Serializers>
  spec.java:
  - uid: java.lang.Iterable
    name: Iterable
    fullName: java.lang.Iterable
  - name: <
    fullName: <
  - uid: com.fasterxml.jackson.databind.ser.Serializers
    name: Serializers
    fullName: com.fasterxml.jackson.databind.ser.Serializers
  - name: '>'
    fullName: '>'
- uid: com.fasterxml.jackson.databind.ser.BasicSerializerFactory.customSerializers*
  name: customSerializers
  nameWithType: BasicSerializerFactory.customSerializers
  fullName: com.fasterxml.jackson.databind.ser.BasicSerializerFactory.customSerializers
  package: com.fasterxml.jackson.databind.ser
- uid: com.fasterxml.jackson.databind.BeanDescription
  name: BeanDescription
  nameWithType: BeanDescription
  fullName: com.fasterxml.jackson.databind.BeanDescription
- uid: boolean
  spec.java:
  - uid: boolean
    name: boolean
    fullName: boolean
- uid: com.fasterxml.jackson.databind.JsonSerializer<?>
  spec.java:
  - uid: com.fasterxml.jackson.databind.JsonSerializer
    name: JsonSerializer
    fullName: com.fasterxml.jackson.databind.JsonSerializer
  - name: <
    fullName: <
  - uid: '?'
    name: '?'
    fullName: '?'
  - name: '>'
    fullName: '>'
- uid: com.fasterxml.jackson.databind.ser.BasicSerializerFactory.findSerializerByLookup*
  name: findSerializerByLookup
  nameWithType: BasicSerializerFactory.findSerializerByLookup
  fullName: com.fasterxml.jackson.databind.ser.BasicSerializerFactory.findSerializerByLookup
  package: com.fasterxml.jackson.databind.ser
- uid: com.fasterxml.jackson.databind.ser.BasicSerializerFactory.findSerializerByAnnotations*
  name: findSerializerByAnnotations
  nameWithType: BasicSerializerFactory.findSerializerByAnnotations
  fullName: com.fasterxml.jackson.databind.ser.BasicSerializerFactory.findSerializerByAnnotations
  package: com.fasterxml.jackson.databind.ser
- uid: com.fasterxml.jackson.databind.ser.BasicSerializerFactory.findSerializerByPrimaryType*
  name: findSerializerByPrimaryType
  nameWithType: BasicSerializerFactory.findSerializerByPrimaryType
  fullName: com.fasterxml.jackson.databind.ser.BasicSerializerFactory.findSerializerByPrimaryType
  package: com.fasterxml.jackson.databind.ser
- uid: com.fasterxml.jackson.databind.ser.BasicSerializerFactory.findOptionalStdSerializer*
  name: findOptionalStdSerializer
  nameWithType: BasicSerializerFactory.findOptionalStdSerializer
  fullName: com.fasterxml.jackson.databind.ser.BasicSerializerFactory.findOptionalStdSerializer
  package: com.fasterxml.jackson.databind.ser
- uid: com.fasterxml.jackson.databind.ser.BasicSerializerFactory.findSerializerByAddonType*
  name: findSerializerByAddonType
  nameWithType: BasicSerializerFactory.findSerializerByAddonType
  fullName: com.fasterxml.jackson.databind.ser.BasicSerializerFactory.findSerializerByAddonType
  package: com.fasterxml.jackson.databind.ser
- uid: com.fasterxml.jackson.databind.introspect.Annotated
  name: Annotated
  nameWithType: Annotated
  fullName: com.fasterxml.jackson.databind.introspect.Annotated
- uid: com.fasterxml.jackson.databind.ser.BasicSerializerFactory.findSerializerFromAnnotation*
  name: findSerializerFromAnnotation
  nameWithType: BasicSerializerFactory.findSerializerFromAnnotation
  fullName: com.fasterxml.jackson.databind.ser.BasicSerializerFactory.findSerializerFromAnnotation
  package: com.fasterxml.jackson.databind.ser
- uid: com.fasterxml.jackson.databind.ser.BasicSerializerFactory.findConvertingSerializer*
  name: findConvertingSerializer
  nameWithType: BasicSerializerFactory.findConvertingSerializer
  fullName: com.fasterxml.jackson.databind.ser.BasicSerializerFactory.findConvertingSerializer
  package: com.fasterxml.jackson.databind.ser
- uid: com.fasterxml.jackson.databind.util.Converter<java.lang.Object,java.lang.Object>
  spec.java:
  - uid: com.fasterxml.jackson.databind.util.Converter
    name: Converter
    fullName: com.fasterxml.jackson.databind.util.Converter
  - name: <
    fullName: <
  - uid: java.lang.Object
    name: Object
    fullName: java.lang.Object
  - name: ','
    fullName: ','
  - uid: java.lang.Object
    name: Object
    fullName: java.lang.Object
  - name: '>'
    fullName: '>'
- uid: com.fasterxml.jackson.databind.ser.BasicSerializerFactory.findConverter*
  name: findConverter
  nameWithType: BasicSerializerFactory.findConverter
  fullName: com.fasterxml.jackson.databind.ser.BasicSerializerFactory.findConverter
  package: com.fasterxml.jackson.databind.ser
- uid: com.fasterxml.jackson.databind.ser.BasicSerializerFactory.buildContainerSerializer*
  name: buildContainerSerializer
  nameWithType: BasicSerializerFactory.buildContainerSerializer
  fullName: com.fasterxml.jackson.databind.ser.BasicSerializerFactory.buildContainerSerializer
  package: com.fasterxml.jackson.databind.ser
- uid: com.fasterxml.jackson.databind.type.CollectionType
  name: CollectionType
  nameWithType: CollectionType
  fullName: com.fasterxml.jackson.databind.type.CollectionType
- uid: com.fasterxml.jackson.databind.ser.BasicSerializerFactory.buildCollectionSerializer*
  name: buildCollectionSerializer
  nameWithType: BasicSerializerFactory.buildCollectionSerializer
  fullName: com.fasterxml.jackson.databind.ser.BasicSerializerFactory.buildCollectionSerializer
  package: com.fasterxml.jackson.databind.ser
- uid: java.lang.Class<?>
  spec.java:
  - uid: java.lang.Class
    name: Class
    fullName: java.lang.Class
  - name: <
    fullName: <
  - uid: '?'
    name: '?'
    fullName: '?'
  - name: '>'
    fullName: '>'
- uid: com.fasterxml.jackson.databind.ser.BasicSerializerFactory.isIndexedList*
  name: isIndexedList
  nameWithType: BasicSerializerFactory.isIndexedList
  fullName: com.fasterxml.jackson.databind.ser.BasicSerializerFactory.isIndexedList
  package: com.fasterxml.jackson.databind.ser
- uid: com.fasterxml.jackson.databind.ser.ContainerSerializer<?>
  spec.java:
  - uid: com.fasterxml.jackson.databind.ser.ContainerSerializer
    name: ContainerSerializer
    fullName: com.fasterxml.jackson.databind.ser.ContainerSerializer
  - name: <
    fullName: <
  - uid: '?'
    name: '?'
    fullName: '?'
  - name: '>'
    fullName: '>'
- uid: com.fasterxml.jackson.databind.ser.BasicSerializerFactory.buildIndexedListSerializer*
  name: buildIndexedListSerializer
  nameWithType: BasicSerializerFactory.buildIndexedListSerializer
  fullName: com.fasterxml.jackson.databind.ser.BasicSerializerFactory.buildIndexedListSerializer
  package: com.fasterxml.jackson.databind.ser
- uid: com.fasterxml.jackson.databind.ser.BasicSerializerFactory.buildEnumSetSerializer*
  name: buildEnumSetSerializer
  nameWithType: BasicSerializerFactory.buildEnumSetSerializer
  fullName: com.fasterxml.jackson.databind.ser.BasicSerializerFactory.buildEnumSetSerializer
  package: com.fasterxml.jackson.databind.ser
- uid: com.fasterxml.jackson.databind.type.MapType
  name: MapType
  nameWithType: MapType
  fullName: com.fasterxml.jackson.databind.type.MapType
- uid: com.fasterxml.jackson.databind.ser.BasicSerializerFactory.buildMapSerializer*
  name: buildMapSerializer
  nameWithType: BasicSerializerFactory.buildMapSerializer
  fullName: com.fasterxml.jackson.databind.ser.BasicSerializerFactory.buildMapSerializer
  package: com.fasterxml.jackson.databind.ser
- uid: com.fasterxml.jackson.databind.ser.std.MapSerializer
  name: MapSerializer
  nameWithType: MapSerializer
  fullName: com.fasterxml.jackson.databind.ser.std.MapSerializer
- uid: com.fasterxml.jackson.databind.ser.BasicSerializerFactory._checkMapContentInclusion*
  name: _checkMapContentInclusion
  nameWithType: BasicSerializerFactory._checkMapContentInclusion
  fullName: com.fasterxml.jackson.databind.ser.BasicSerializerFactory._checkMapContentInclusion
  package: com.fasterxml.jackson.databind.ser
- uid: com.fasterxml.jackson.databind.ser.BasicSerializerFactory.buildMapEntrySerializer*
  name: buildMapEntrySerializer
  nameWithType: BasicSerializerFactory.buildMapEntrySerializer
  fullName: com.fasterxml.jackson.databind.ser.BasicSerializerFactory.buildMapEntrySerializer
  package: com.fasterxml.jackson.databind.ser
- uid: com.fasterxml.jackson.annotation.JsonInclude.Value
  name: JsonInclude.Value
  nameWithType: JsonInclude.Value
  fullName: com.fasterxml.jackson.annotation.JsonInclude.Value
- uid: com.fasterxml.jackson.databind.ser.BasicSerializerFactory._findInclusionWithContent*
  name: _findInclusionWithContent
  nameWithType: BasicSerializerFactory._findInclusionWithContent
  fullName: com.fasterxml.jackson.databind.ser.BasicSerializerFactory._findInclusionWithContent
  package: com.fasterxml.jackson.databind.ser
- uid: com.fasterxml.jackson.databind.type.ArrayType
  name: ArrayType
  nameWithType: ArrayType
  fullName: com.fasterxml.jackson.databind.type.ArrayType
- uid: com.fasterxml.jackson.databind.ser.BasicSerializerFactory.buildArraySerializer*
  name: buildArraySerializer
  nameWithType: BasicSerializerFactory.buildArraySerializer
  fullName: com.fasterxml.jackson.databind.ser.BasicSerializerFactory.buildArraySerializer
  package: com.fasterxml.jackson.databind.ser
- uid: com.fasterxml.jackson.databind.type.ReferenceType
  name: ReferenceType
  nameWithType: ReferenceType
  fullName: com.fasterxml.jackson.databind.type.ReferenceType
- uid: com.fasterxml.jackson.databind.ser.BasicSerializerFactory.findReferenceSerializer*
  name: findReferenceSerializer
  nameWithType: BasicSerializerFactory.findReferenceSerializer
  fullName: com.fasterxml.jackson.databind.ser.BasicSerializerFactory.findReferenceSerializer
  package: com.fasterxml.jackson.databind.ser
- uid: com.fasterxml.jackson.databind.ser.BasicSerializerFactory.buildAtomicReferenceSerializer*
  name: buildAtomicReferenceSerializer
  nameWithType: BasicSerializerFactory.buildAtomicReferenceSerializer
  fullName: com.fasterxml.jackson.databind.ser.BasicSerializerFactory.buildAtomicReferenceSerializer
  package: com.fasterxml.jackson.databind.ser
- uid: com.fasterxml.jackson.databind.ser.BasicSerializerFactory.buildIteratorSerializer*
  name: buildIteratorSerializer
  nameWithType: BasicSerializerFactory.buildIteratorSerializer
  fullName: com.fasterxml.jackson.databind.ser.BasicSerializerFactory.buildIteratorSerializer
  package: com.fasterxml.jackson.databind.ser
- uid: com.fasterxml.jackson.databind.ser.BasicSerializerFactory.buildIterableSerializer*
  name: buildIterableSerializer
  nameWithType: BasicSerializerFactory.buildIterableSerializer
  fullName: com.fasterxml.jackson.databind.ser.BasicSerializerFactory.buildIterableSerializer
  package: com.fasterxml.jackson.databind.ser
- uid: com.fasterxml.jackson.databind.ser.BasicSerializerFactory.buildEnumSerializer*
  name: buildEnumSerializer
  nameWithType: BasicSerializerFactory.buildEnumSerializer
  fullName: com.fasterxml.jackson.databind.ser.BasicSerializerFactory.buildEnumSerializer
  package: com.fasterxml.jackson.databind.ser
- uid: com.fasterxml.jackson.databind.ser.BasicSerializerFactory._findKeySerializer*
  name: _findKeySerializer
  nameWithType: BasicSerializerFactory._findKeySerializer
  fullName: com.fasterxml.jackson.databind.ser.BasicSerializerFactory._findKeySerializer
  package: com.fasterxml.jackson.databind.ser
- uid: com.fasterxml.jackson.databind.ser.BasicSerializerFactory._findContentSerializer*
  name: _findContentSerializer
  nameWithType: BasicSerializerFactory._findContentSerializer
  fullName: com.fasterxml.jackson.databind.ser.BasicSerializerFactory._findContentSerializer
  package: com.fasterxml.jackson.databind.ser
- uid: java.lang.Object
  spec.java:
  - uid: java.lang.Object
    name: Object
    fullName: java.lang.Object
- uid: com.fasterxml.jackson.databind.ser.BasicSerializerFactory.findFilterId*
  name: findFilterId
  nameWithType: BasicSerializerFactory.findFilterId
  fullName: com.fasterxml.jackson.databind.ser.BasicSerializerFactory.findFilterId
  package: com.fasterxml.jackson.databind.ser
- uid: com.fasterxml.jackson.databind.ser.BasicSerializerFactory.usesStaticTyping*
  name: usesStaticTyping
  nameWithType: BasicSerializerFactory.usesStaticTyping
  fullName: com.fasterxml.jackson.databind.ser.BasicSerializerFactory.usesStaticTyping
  package: com.fasterxml.jackson.databind.ser
- uid: java.util.HashMap<java.lang.String,com.fasterxml.jackson.databind.JsonSerializer<?>>
  spec.java:
  - uid: java.util.HashMap
    name: HashMap
    fullName: java.util.HashMap
  - name: <
    fullName: <
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
  - name: ','
    fullName: ','
  - uid: com.fasterxml.jackson.databind.JsonSerializer
    name: JsonSerializer
    fullName: com.fasterxml.jackson.databind.JsonSerializer
  - name: <
    fullName: <
  - uid: '?'
    name: '?'
    fullName: '?'
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
- uid: java.util.HashMap<java.lang.String,java.lang.Class<? extends com.fasterxml.jackson.databind.JsonSerializer<?>>>
  spec.java:
  - uid: java.util.HashMap
    name: HashMap
    fullName: java.util.HashMap
  - name: <
    fullName: <
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
  - name: ','
    fullName: ','
  - uid: java.lang.Class
    name: Class
    fullName: java.lang.Class
  - name: <
    fullName: <
  - uid: '? extends com.fasterxml.jackson.databind.JsonSerializer'
    name: JsonSerializer
    fullName: '? extends com.fasterxml.jackson.databind.JsonSerializer'
  - name: <
    fullName: <
  - uid: '?'
    name: '?'
    fullName: '?'
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
- uid: java.io.Serializable
  name: Serializable
  nameWithType: Serializable
  fullName: java.io.Serializable
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: java.lang.Object.finalize()
  name: Object.finalize()
  nameWithType: Object.finalize()
  fullName: java.lang.Object.finalize()
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: java.lang.Object.clone()
  name: Object.clone()
  nameWithType: Object.clone()
  fullName: java.lang.Object.clone()
- uid: com.fasterxml.jackson.databind.ser.SerializerFactory.withAdditionalSerializers(com.fasterxml.jackson.databind.ser.Serializers)
  name: SerializerFactory.withAdditionalSerializers(Serializers)
  nameWithType: SerializerFactory.withAdditionalSerializers(Serializers)
  fullName: com.fasterxml.jackson.databind.ser.SerializerFactory.withAdditionalSerializers(com.fasterxml.jackson.databind.ser.Serializers)
- uid: java.lang.Object.equals(java.lang.Object)
  name: Object.equals(Object)
  nameWithType: Object.equals(Object)
  fullName: java.lang.Object.equals(java.lang.Object)
- uid: com.fasterxml.jackson.databind.ser.SerializerFactory.withSerializerModifier(com.fasterxml.jackson.databind.ser.BeanSerializerModifier)
  name: SerializerFactory.withSerializerModifier(BeanSerializerModifier)
  nameWithType: SerializerFactory.withSerializerModifier(BeanSerializerModifier)
  fullName: com.fasterxml.jackson.databind.ser.SerializerFactory.withSerializerModifier(com.fasterxml.jackson.databind.ser.BeanSerializerModifier)
- uid: java.lang.Object.toString()
  name: Object.toString()
  nameWithType: Object.toString()
  fullName: java.lang.Object.toString()
- uid: com.fasterxml.jackson.databind.ser.SerializerFactory.withAdditionalKeySerializers(com.fasterxml.jackson.databind.ser.Serializers)
  name: SerializerFactory.withAdditionalKeySerializers(Serializers)
  nameWithType: SerializerFactory.withAdditionalKeySerializers(Serializers)
  fullName: com.fasterxml.jackson.databind.ser.SerializerFactory.withAdditionalKeySerializers(com.fasterxml.jackson.databind.ser.Serializers)
- uid: com.fasterxml.jackson.databind.ser.SerializerFactory.createTypeSerializer(com.fasterxml.jackson.databind.SerializationConfig,com.fasterxml.jackson.databind.JavaType)
  name: SerializerFactory.createTypeSerializer(SerializationConfig,JavaType)
  nameWithType: SerializerFactory.createTypeSerializer(SerializationConfig,JavaType)
  fullName: com.fasterxml.jackson.databind.ser.SerializerFactory.createTypeSerializer(com.fasterxml.jackson.databind.SerializationConfig,com.fasterxml.jackson.databind.JavaType)
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: com.fasterxml.jackson.databind.ser.SerializerFactory.createKeySerializer(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.JsonSerializer<java.lang.Object>)
  name: SerializerFactory.createKeySerializer(SerializerProvider,JavaType,JsonSerializer<Object>)
  nameWithType: SerializerFactory.createKeySerializer(SerializerProvider,JavaType,JsonSerializer<Object>)
  fullName: com.fasterxml.jackson.databind.ser.SerializerFactory.createKeySerializer(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.JsonSerializer<java.lang.Object>)
- uid: java.lang.Object.hashCode()
  name: Object.hashCode()
  nameWithType: Object.hashCode()
  fullName: java.lang.Object.hashCode()
- uid: com.fasterxml.jackson.databind.ser.SerializerFactory.createSerializer(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.JavaType)
  name: SerializerFactory.createSerializer(SerializerProvider,JavaType)
  nameWithType: SerializerFactory.createSerializer(SerializerProvider,JavaType)
  fullName: com.fasterxml.jackson.databind.ser.SerializerFactory.createSerializer(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.JavaType)
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: com.fasterxml.jackson.databind.ser.SerializerFactory.createKeySerializer(com.fasterxml.jackson.databind.SerializationConfig,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.JsonSerializer<java.lang.Object>)
  name: SerializerFactory.createKeySerializer(SerializationConfig,JavaType,JsonSerializer<Object>)
  nameWithType: SerializerFactory.createKeySerializer(SerializationConfig,JavaType,JsonSerializer<Object>)
  fullName: com.fasterxml.jackson.databind.ser.SerializerFactory.createKeySerializer(com.fasterxml.jackson.databind.SerializationConfig,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.JsonSerializer<java.lang.Object>)
- uid: com.fasterxml.jackson.databind.JsonSerializer
  name: JsonSerializer
  nameWithType: JsonSerializer
  fullName: com.fasterxml.jackson.databind.JsonSerializer
- uid: java.lang.Iterable
  name: Iterable
  nameWithType: Iterable
  fullName: java.lang.Iterable
- uid: '?'
  name: '?'
  nameWithType: '?'
  fullName: '?'
- uid: com.fasterxml.jackson.databind.util.Converter
  name: Converter
  nameWithType: Converter
  fullName: com.fasterxml.jackson.databind.util.Converter
- uid: java.lang.Object,java.lang.Object
  name: Object,Object
  nameWithType: Object,Object
  fullName: java.lang.Object,java.lang.Object
- uid: java.lang.Class
  name: Class
  nameWithType: Class
  fullName: java.lang.Class
- uid: com.fasterxml.jackson.databind.ser.ContainerSerializer
  name: ContainerSerializer
  nameWithType: ContainerSerializer
  fullName: com.fasterxml.jackson.databind.ser.ContainerSerializer
- uid: java.util.HashMap
  name: HashMap
  nameWithType: HashMap
  fullName: java.util.HashMap
- uid: java.lang.String,com.fasterxml.jackson.databind.JsonSerializer
  name: String,JsonSerializer
  nameWithType: String,JsonSerializer
  fullName: java.lang.String,com.fasterxml.jackson.databind.JsonSerializer
- uid: '? extends com.fasterxml.jackson.databind.JsonSerializer'
  name: '? extends JsonSerializer'
  nameWithType: '? extends JsonSerializer'
  fullName: '? extends com.fasterxml.jackson.databind.JsonSerializer'
- uid: java.lang.String,java.lang.Class
  name: String,Class
  nameWithType: String,Class
  fullName: java.lang.String,java.lang.Class
- uid: com.fasterxml.jackson.databind.ser.SerializerFactory.createKeySerializer(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.JsonSerializer
  name: SerializerFactory.createKeySerializer(SerializerProvider,JavaType,JsonSerializer
  nameWithType: SerializerFactory.createKeySerializer(SerializerProvider,JavaType,JsonSerializer
  fullName: com.fasterxml.jackson.databind.ser.SerializerFactory.createKeySerializer(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.JsonSerializer
- uid: java.lang.Object>)
  name: Object>)
  nameWithType: Object>)
  fullName: java.lang.Object>)
- uid: com.fasterxml.jackson.databind.ser.SerializerFactory.createKeySerializer(com.fasterxml.jackson.databind.SerializationConfig,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.JsonSerializer
  name: SerializerFactory.createKeySerializer(SerializationConfig,JavaType,JsonSerializer
  nameWithType: SerializerFactory.createKeySerializer(SerializationConfig,JavaType,JsonSerializer
  fullName: com.fasterxml.jackson.databind.ser.SerializerFactory.createKeySerializer(com.fasterxml.jackson.databind.SerializationConfig,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.JsonSerializer
