### YamlMime:JavaType
uid: "com.azure.storage.blob.BlobContainerAsyncClient"
fullName: "com.azure.storage.blob.BlobContainerAsyncClient"
name: "BlobContainerAsyncClient"
nameWithType: "BlobContainerAsyncClient"
summary: "Client to a container."
inheritances:
- "<xref href=\"java.lang.Object?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
inheritedMembers:
- "java.lang.Object.clone()"
- "java.lang.Object.equals(java.lang.Object)"
- "java.lang.Object.finalize()"
- "java.lang.Object.getClass()"
- "java.lang.Object.hashCode()"
- "java.lang.Object.notify()"
- "java.lang.Object.notifyAll()"
- "java.lang.Object.toString()"
- "java.lang.Object.wait()"
- "java.lang.Object.wait(long)"
- "java.lang.Object.wait(long,int)"
syntax: "public final class BlobContainerAsyncClient"
fields:
- uid: "com.azure.storage.blob.BlobContainerAsyncClient.LOG_CONTAINER_NAME"
  fullName: "com.azure.storage.blob.BlobContainerAsyncClient.LOG_CONTAINER_NAME"
  name: "LOG_CONTAINER_NAME"
  nameWithType: "BlobContainerAsyncClient.LOG_CONTAINER_NAME"
  summary: "Special container name for the logs container in the Storage account."
  modifiers:
  - "static"
  - "final"
  field:
    value: "$logs"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public static final String LOG_CONTAINER_NAME"
  desc: "Special container name for the logs container in the Storage account."
- uid: "com.azure.storage.blob.BlobContainerAsyncClient.ROOT_CONTAINER_NAME"
  fullName: "com.azure.storage.blob.BlobContainerAsyncClient.ROOT_CONTAINER_NAME"
  name: "ROOT_CONTAINER_NAME"
  nameWithType: "BlobContainerAsyncClient.ROOT_CONTAINER_NAME"
  summary: "Special container name for the root container in the Storage account."
  modifiers:
  - "static"
  - "final"
  field:
    value: "$root"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public static final String ROOT_CONTAINER_NAME"
  desc: "Special container name for the root container in the Storage account."
- uid: "com.azure.storage.blob.BlobContainerAsyncClient.STATIC_WEBSITE_CONTAINER_NAME"
  fullName: "com.azure.storage.blob.BlobContainerAsyncClient.STATIC_WEBSITE_CONTAINER_NAME"
  name: "STATIC_WEBSITE_CONTAINER_NAME"
  nameWithType: "BlobContainerAsyncClient.STATIC_WEBSITE_CONTAINER_NAME"
  summary: "Special container name for the static website container in the Storage account."
  modifiers:
  - "static"
  - "final"
  field:
    value: "$web"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public static final String STATIC_WEBSITE_CONTAINER_NAME"
  desc: "Special container name for the static website container in the Storage account."
methods:
- uid: "com.azure.storage.blob.BlobContainerAsyncClient.create()"
  fullName: "com.azure.storage.blob.BlobContainerAsyncClient.create()"
  name: "create()"
  nameWithType: "BlobContainerAsyncClient.create()"
  summary: "Creates a new container within a storage account."
  syntax: "public Mono<Void> create()"
  desc: "Creates a new container within a storage account. If a container with the same name already exists, the operation fails. For more information, see the [Azure Docs][].\n\n**Code Samples**\n\n```java\nclient.create().subscribe(\n     response -> System.out.printf(\"Create completed%n\"),\n     error -> System.out.printf(\"Error while creating container %s%n\", error));\n```\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/create-container"
  returns:
    description: "A reactive response signalling completion."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.blob.BlobContainerAsyncClient.createIfNotExists()"
  fullName: "com.azure.storage.blob.BlobContainerAsyncClient.createIfNotExists()"
  name: "createIfNotExists()"
  nameWithType: "BlobContainerAsyncClient.createIfNotExists()"
  summary: "Creates a new container within a storage account if it does not exist."
  syntax: "public Mono<Boolean> createIfNotExists()"
  desc: "Creates a new container within a storage account if it does not exist. For more information, see the [Azure Docs][].\n\n**Code Samples**\n\n```java\nclient.createIfNotExists().subscribe(created -> {\n     if (created) {\n         System.out.println(\"successfully created.\");\n     } else {\n         System.out.println(\"Already exists.\");\n     }\n });\n```\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/create-container"
  returns:
    description: "A reactive response signaling completion. <code>true</code> indicates a new container was created,\n <code>true</code> indicates a container already existed at this location."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Boolean?alt=java.lang.Boolean&text=Boolean\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.blob.BlobContainerAsyncClient.createIfNotExistsWithResponse(com.azure.storage.blob.options.BlobContainerCreateOptions)"
  fullName: "com.azure.storage.blob.BlobContainerAsyncClient.createIfNotExistsWithResponse(BlobContainerCreateOptions options)"
  name: "createIfNotExistsWithResponse(BlobContainerCreateOptions options)"
  nameWithType: "BlobContainerAsyncClient.createIfNotExistsWithResponse(BlobContainerCreateOptions options)"
  summary: "Creates a new container within a storage account if it does not exist."
  parameters:
  - description: "<xref uid=\"com.azure.storage.blob.options.BlobContainerCreateOptions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BlobContainerCreateOptions\"></xref>"
    name: "options"
    type: "<xref href=\"com.azure.storage.blob.options.BlobContainerCreateOptions?alt=com.azure.storage.blob.options.BlobContainerCreateOptions&text=BlobContainerCreateOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<Boolean>> createIfNotExistsWithResponse(BlobContainerCreateOptions options)"
  desc: "Creates a new container within a storage account if it does not exist. For more information, see the [Azure Docs][].\n\n**Code Samples**\n\n```java\nMap<String, String> metadata = Collections.singletonMap(\"metadata\", \"value\");\n BlobContainerCreateOptions options = new BlobContainerCreateOptions().setMetadata(metadata)\n     .setPublicAccessType(PublicAccessType.CONTAINER);\n\n client.createIfNotExistsWithResponse(options).subscribe(response -> {\n     if (response.getStatusCode() == 409) {\n         System.out.println(\"Already exists.\");\n     } else {\n         System.out.println(\"successfully created.\");\n     }\n });\n```\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/create-container"
  returns:
    description: "A reactive response signaling completion. If <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref>'s status code is 201, a new container was\n successfully created. If status code is 409, a container already existed at this location."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Boolean?alt=java.lang.Boolean&text=Boolean\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.storage.blob.BlobContainerAsyncClient.createWithResponse(java.util.Map<java.lang.String,java.lang.String>,com.azure.storage.blob.models.PublicAccessType)"
  fullName: "com.azure.storage.blob.BlobContainerAsyncClient.createWithResponse(Map<String,String> metadata, PublicAccessType accessType)"
  name: "createWithResponse(Map<String,String> metadata, PublicAccessType accessType)"
  nameWithType: "BlobContainerAsyncClient.createWithResponse(Map<String,String> metadata, PublicAccessType accessType)"
  summary: "Creates a new container within a storage account."
  parameters:
  - description: "Metadata to associate with the container. If there is leading or trailing whitespace in any\n metadata key or value, it must be removed or encoded."
    name: "metadata"
    type: "<xref href=\"java.util.Map?alt=java.util.Map&text=Map\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />,<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />&gt;"
  - description: "Specifies how the data in this container is available to the public. See the\n x-ms-blob-public-access header in the Azure Docs for more information. Pass null for no public access."
    name: "accessType"
    type: "<xref href=\"com.azure.storage.blob.models.PublicAccessType?alt=com.azure.storage.blob.models.PublicAccessType&text=PublicAccessType\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<Void>> createWithResponse(Map<String,String> metadata, PublicAccessType accessType)"
  desc: "Creates a new container within a storage account. If a container with the same name already exists, the operation fails. For more information, see the [Azure Docs][].\n\n**Code Samples**\n\n```java\nMap<String, String> metadata = Collections.singletonMap(\"metadata\", \"value\");\n client.createWithResponse(metadata, PublicAccessType.CONTAINER).subscribe(response ->\n     System.out.printf(\"Create completed with status %d%n\", response.getStatusCode()));\n```\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/create-container"
  returns:
    description: "A reactive response signalling completion."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.storage.blob.BlobContainerAsyncClient.delete()"
  fullName: "com.azure.storage.blob.BlobContainerAsyncClient.delete()"
  name: "delete()"
  nameWithType: "BlobContainerAsyncClient.delete()"
  summary: "Marks the specified container for deletion."
  syntax: "public Mono<Void> delete()"
  desc: "Marks the specified container for deletion. The container and any blobs contained within it are later deleted during garbage collection. For more information, see the [Azure Docs][].\n\n**Code Samples**\n\n```java\nclient.delete().subscribe(\n     response -> System.out.printf(\"Delete completed%n\"),\n     error -> System.out.printf(\"Delete failed: %s%n\", error));\n```\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/delete-container"
  returns:
    description: "A reactive response signalling completion."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.blob.BlobContainerAsyncClient.deleteIfExists()"
  fullName: "com.azure.storage.blob.BlobContainerAsyncClient.deleteIfExists()"
  name: "deleteIfExists()"
  nameWithType: "BlobContainerAsyncClient.deleteIfExists()"
  summary: "Marks the specified container for deletion if it exists."
  syntax: "public Mono<Boolean> deleteIfExists()"
  desc: "Marks the specified container for deletion if it exists. The container and any blobs contained within it are later deleted during garbage collection. For more information, see the [Azure Docs][].\n\n**Code Samples**\n\n```java\nclient.deleteIfExists().subscribe(deleted -> {\n     if (deleted) {\n         System.out.println(\"Successfully deleted.\");\n     } else {\n         System.out.println(\"Does not exist.\");\n     }\n });\n```\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/delete-container"
  returns:
    description: "A reactive response signaling completion. <code>true</code> indicates the container was deleted,\n <code>false</code> indicates the container does not exist."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Boolean?alt=java.lang.Boolean&text=Boolean\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.blob.BlobContainerAsyncClient.deleteIfExistsWithResponse(com.azure.storage.blob.models.BlobRequestConditions)"
  fullName: "com.azure.storage.blob.BlobContainerAsyncClient.deleteIfExistsWithResponse(BlobRequestConditions requestConditions)"
  name: "deleteIfExistsWithResponse(BlobRequestConditions requestConditions)"
  nameWithType: "BlobContainerAsyncClient.deleteIfExistsWithResponse(BlobRequestConditions requestConditions)"
  summary: "Marks the specified container for deletion if it exists."
  parameters:
  - description: "<xref uid=\"com.azure.storage.blob.models.BlobRequestConditions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BlobRequestConditions\"></xref>"
    name: "requestConditions"
    type: "<xref href=\"com.azure.storage.blob.models.BlobRequestConditions?alt=com.azure.storage.blob.models.BlobRequestConditions&text=BlobRequestConditions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<Boolean>> deleteIfExistsWithResponse(BlobRequestConditions requestConditions)"
  desc: "Marks the specified container for deletion if it exists. The container and any blobs contained within it are later deleted during garbage collection. For more information, see the [Azure Docs][].\n\n**Code Samples**\n\n```java\nBlobRequestConditions requestConditions = new BlobRequestConditions()\n     .setLeaseId(leaseId)\n     .setIfUnmodifiedSince(OffsetDateTime.now().minusDays(3));\n\n client.deleteIfExistsWithResponse(requestConditions).subscribe(response -> {\n     if (response.getStatusCode() == 404) {\n         System.out.println(\"Does not exist.\");\n     } else {\n         System.out.println(\"successfully deleted.\");\n     }\n });\n```\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/delete-container"
  returns:
    description: "A reactive response signaling completion. If <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref>'s status code is 202, the container was\n successfully deleted. If status code is 404, the container does not exist."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Boolean?alt=java.lang.Boolean&text=Boolean\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.storage.blob.BlobContainerAsyncClient.deleteWithResponse(com.azure.storage.blob.models.BlobRequestConditions)"
  fullName: "com.azure.storage.blob.BlobContainerAsyncClient.deleteWithResponse(BlobRequestConditions requestConditions)"
  name: "deleteWithResponse(BlobRequestConditions requestConditions)"
  nameWithType: "BlobContainerAsyncClient.deleteWithResponse(BlobRequestConditions requestConditions)"
  summary: "Marks the specified container for deletion."
  parameters:
  - description: "<xref uid=\"com.azure.storage.blob.models.BlobRequestConditions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BlobRequestConditions\"></xref>"
    name: "requestConditions"
    type: "<xref href=\"com.azure.storage.blob.models.BlobRequestConditions?alt=com.azure.storage.blob.models.BlobRequestConditions&text=BlobRequestConditions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<Void>> deleteWithResponse(BlobRequestConditions requestConditions)"
  desc: "Marks the specified container for deletion. The container and any blobs contained within it are later deleted during garbage collection. For more information, see the [Azure Docs][].\n\n**Code Samples**\n\n```java\nBlobRequestConditions requestConditions = new BlobRequestConditions()\n     .setLeaseId(leaseId)\n     .setIfUnmodifiedSince(OffsetDateTime.now().minusDays(3));\n\n client.deleteWithResponse(requestConditions).subscribe(response ->\n     System.out.printf(\"Delete completed with status %d%n\", response.getStatusCode()));\n```\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/delete-container"
  returns:
    description: "A reactive response signalling completion."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.storage.blob.BlobContainerAsyncClient.exists()"
  fullName: "com.azure.storage.blob.BlobContainerAsyncClient.exists()"
  name: "exists()"
  nameWithType: "BlobContainerAsyncClient.exists()"
  summary: "Gets if the container this client represents exists in the cloud."
  syntax: "public Mono<Boolean> exists()"
  desc: "Gets if the container this client represents exists in the cloud.\n\n**Code Samples**\n\n```java\nclient.exists().subscribe(response -> System.out.printf(\"Exists? %b%n\", response));\n```"
  returns:
    description: "true if the container exists, false if it doesn't"
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Boolean?alt=java.lang.Boolean&text=Boolean\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.blob.BlobContainerAsyncClient.existsWithResponse()"
  fullName: "com.azure.storage.blob.BlobContainerAsyncClient.existsWithResponse()"
  name: "existsWithResponse()"
  nameWithType: "BlobContainerAsyncClient.existsWithResponse()"
  summary: "Gets if the container this client represents exists in the cloud."
  syntax: "public Mono<Response<Boolean>> existsWithResponse()"
  desc: "Gets if the container this client represents exists in the cloud.\n\n**Code Samples**\n\n```java\nclient.existsWithResponse().subscribe(response -> System.out.printf(\"Exists? %b%n\", response.getValue()));\n```"
  returns:
    description: "true if the container exists, false if it doesn't"
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Boolean?alt=java.lang.Boolean&text=Boolean\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.storage.blob.BlobContainerAsyncClient.findBlobsByTags(com.azure.storage.blob.options.FindBlobsOptions)"
  fullName: "com.azure.storage.blob.BlobContainerAsyncClient.findBlobsByTags(FindBlobsOptions options)"
  name: "findBlobsByTags(FindBlobsOptions options)"
  nameWithType: "BlobContainerAsyncClient.findBlobsByTags(FindBlobsOptions options)"
  summary: "Returns a reactive Publisher emitting the blobs in this container whose tags match the query expression."
  parameters:
  - description: "<xref uid=\"com.azure.storage.blob.options.FindBlobsOptions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"FindBlobsOptions\"></xref>"
    name: "options"
    type: "<xref href=\"com.azure.storage.blob.options.FindBlobsOptions?alt=com.azure.storage.blob.options.FindBlobsOptions&text=FindBlobsOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PagedFlux<TaggedBlobItem> findBlobsByTags(FindBlobsOptions options)"
  desc: "Returns a reactive Publisher emitting the blobs in this container whose tags match the query expression. For more information, including information on the query syntax, see the [Azure Docs][].\n\n**Code Samples**\n\n```java\nclient.findBlobsByTags(new FindBlobsOptions(\"where=tag=value\").setMaxResultsPerPage(10))\n     .subscribe(blob -> System.out.printf(\"Name: %s%n\", blob.getName()));\n```\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/find-blobs-by-tags"
  returns:
    description: "A reactive response emitting the list of blobs."
    type: "<xref href=\"com.azure.core.http.rest.PagedFlux?alt=com.azure.core.http.rest.PagedFlux&text=PagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.blob.models.TaggedBlobItem?alt=com.azure.storage.blob.models.TaggedBlobItem&text=TaggedBlobItem\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.blob.BlobContainerAsyncClient.findBlobsByTags(java.lang.String)"
  fullName: "com.azure.storage.blob.BlobContainerAsyncClient.findBlobsByTags(String query)"
  name: "findBlobsByTags(String query)"
  nameWithType: "BlobContainerAsyncClient.findBlobsByTags(String query)"
  summary: "Returns a reactive Publisher emitting the blobs in this container whose tags match the query expression."
  parameters:
  - description: "Filters the results to return only blobs whose tags match the specified expression."
    name: "query"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PagedFlux<TaggedBlobItem> findBlobsByTags(String query)"
  desc: "Returns a reactive Publisher emitting the blobs in this container whose tags match the query expression. For more information, including information on the query syntax, see the [Azure Docs][].\n\n**Code Samples**\n\n```java\nclient.findBlobsByTags(\"where=tag=value\").subscribe(blob -> System.out.printf(\"Name: %s%n\", blob.getName()));\n```\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/find-blobs-by-tags"
  returns:
    description: "A reactive response emitting the list of blobs."
    type: "<xref href=\"com.azure.core.http.rest.PagedFlux?alt=com.azure.core.http.rest.PagedFlux&text=PagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.blob.models.TaggedBlobItem?alt=com.azure.storage.blob.models.TaggedBlobItem&text=TaggedBlobItem\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.blob.BlobContainerAsyncClient.generateSas(com.azure.storage.blob.sas.BlobServiceSasSignatureValues)"
  fullName: "com.azure.storage.blob.BlobContainerAsyncClient.generateSas(BlobServiceSasSignatureValues blobServiceSasSignatureValues)"
  name: "generateSas(BlobServiceSasSignatureValues blobServiceSasSignatureValues)"
  nameWithType: "BlobContainerAsyncClient.generateSas(BlobServiceSasSignatureValues blobServiceSasSignatureValues)"
  summary: "Generates a service SAS for the container using the specified <xref uid=\"com.azure.storage.blob.sas.BlobServiceSasSignatureValues\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BlobServiceSasSignatureValues\"></xref>"
  parameters:
  - description: "<xref uid=\"com.azure.storage.blob.sas.BlobServiceSasSignatureValues\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BlobServiceSasSignatureValues\"></xref>"
    name: "blobServiceSasSignatureValues"
    type: "<xref href=\"com.azure.storage.blob.sas.BlobServiceSasSignatureValues?alt=com.azure.storage.blob.sas.BlobServiceSasSignatureValues&text=BlobServiceSasSignatureValues\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public String generateSas(BlobServiceSasSignatureValues blobServiceSasSignatureValues)"
  desc: "Generates a service SAS for the container using the specified <xref uid=\"com.azure.storage.blob.sas.BlobServiceSasSignatureValues\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BlobServiceSasSignatureValues\"></xref>\n\nNote : The client must be authenticated via <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"StorageSharedKeyCredential\"></xref>\n\nSee <xref uid=\"com.azure.storage.blob.sas.BlobServiceSasSignatureValues\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BlobServiceSasSignatureValues\"></xref> for more information on how to construct a service SAS.\n\n**Code Samples**\n\n```java\nOffsetDateTime expiryTime = OffsetDateTime.now().plusDays(1);\n BlobContainerSasPermission permission = new BlobContainerSasPermission().setReadPermission(true);\n\n BlobServiceSasSignatureValues values = new BlobServiceSasSignatureValues(expiryTime, permission)\n     .setStartTime(OffsetDateTime.now());\n\n client.generateSas(values); // Client must be authenticated via StorageSharedKeyCredential\n```"
  returns:
    description: "A <code>String</code> representing the SAS query parameters."
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.blob.BlobContainerAsyncClient.generateSas(com.azure.storage.blob.sas.BlobServiceSasSignatureValues,com.azure.core.util.Context)"
  fullName: "com.azure.storage.blob.BlobContainerAsyncClient.generateSas(BlobServiceSasSignatureValues blobServiceSasSignatureValues, Context context)"
  name: "generateSas(BlobServiceSasSignatureValues blobServiceSasSignatureValues, Context context)"
  nameWithType: "BlobContainerAsyncClient.generateSas(BlobServiceSasSignatureValues blobServiceSasSignatureValues, Context context)"
  summary: "Generates a service SAS for the container using the specified <xref uid=\"com.azure.storage.blob.sas.BlobServiceSasSignatureValues\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BlobServiceSasSignatureValues\"></xref>"
  parameters:
  - description: "<xref uid=\"com.azure.storage.blob.sas.BlobServiceSasSignatureValues\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BlobServiceSasSignatureValues\"></xref>"
    name: "blobServiceSasSignatureValues"
    type: "<xref href=\"com.azure.storage.blob.sas.BlobServiceSasSignatureValues?alt=com.azure.storage.blob.sas.BlobServiceSasSignatureValues&text=BlobServiceSasSignatureValues\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional context that is passed through the code when generating a SAS."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public String generateSas(BlobServiceSasSignatureValues blobServiceSasSignatureValues, Context context)"
  desc: "Generates a service SAS for the container using the specified <xref uid=\"com.azure.storage.blob.sas.BlobServiceSasSignatureValues\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BlobServiceSasSignatureValues\"></xref>\n\nNote : The client must be authenticated via <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"StorageSharedKeyCredential\"></xref>\n\nSee <xref uid=\"com.azure.storage.blob.sas.BlobServiceSasSignatureValues\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BlobServiceSasSignatureValues\"></xref> for more information on how to construct a service SAS.\n\n**Code Samples**\n\n```java\nOffsetDateTime expiryTime = OffsetDateTime.now().plusDays(1);\n BlobContainerSasPermission permission = new BlobContainerSasPermission().setReadPermission(true);\n\n BlobServiceSasSignatureValues values = new BlobServiceSasSignatureValues(expiryTime, permission)\n     .setStartTime(OffsetDateTime.now());\n\n // Client must be authenticated via StorageSharedKeyCredential\n client.generateSas(values, new Context(\"key\", \"value\"));\n```"
  returns:
    description: "A <code>String</code> representing the SAS query parameters."
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.blob.BlobContainerAsyncClient.generateUserDelegationSas(com.azure.storage.blob.sas.BlobServiceSasSignatureValues,com.azure.storage.blob.models.UserDelegationKey)"
  fullName: "com.azure.storage.blob.BlobContainerAsyncClient.generateUserDelegationSas(BlobServiceSasSignatureValues blobServiceSasSignatureValues, UserDelegationKey userDelegationKey)"
  name: "generateUserDelegationSas(BlobServiceSasSignatureValues blobServiceSasSignatureValues, UserDelegationKey userDelegationKey)"
  nameWithType: "BlobContainerAsyncClient.generateUserDelegationSas(BlobServiceSasSignatureValues blobServiceSasSignatureValues, UserDelegationKey userDelegationKey)"
  summary: "Generates a user delegation SAS for the container using the specified <xref uid=\"com.azure.storage.blob.sas.BlobServiceSasSignatureValues\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BlobServiceSasSignatureValues\"></xref>."
  parameters:
  - description: "<xref uid=\"com.azure.storage.blob.sas.BlobServiceSasSignatureValues\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BlobServiceSasSignatureValues\"></xref>"
    name: "blobServiceSasSignatureValues"
    type: "<xref href=\"com.azure.storage.blob.sas.BlobServiceSasSignatureValues?alt=com.azure.storage.blob.sas.BlobServiceSasSignatureValues&text=BlobServiceSasSignatureValues\" data-throw-if-not-resolved=\"False\" />"
  - description: "A <xref uid=\"com.azure.storage.blob.models.UserDelegationKey\" data-throw-if-not-resolved=\"false\" data-raw-source=\"UserDelegationKey\"></xref> object used to sign the SAS values.\n See <xref uid=\"com.azure.storage.blob.BlobServiceAsyncClient.getUserDelegationKey(java.time.OffsetDateTime,java.time.OffsetDateTime)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BlobServiceAsyncClient#getUserDelegationKey(OffsetDateTime, OffsetDateTime)\"></xref> for more information on\n how to get a user delegation key."
    name: "userDelegationKey"
    type: "<xref href=\"com.azure.storage.blob.models.UserDelegationKey?alt=com.azure.storage.blob.models.UserDelegationKey&text=UserDelegationKey\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public String generateUserDelegationSas(BlobServiceSasSignatureValues blobServiceSasSignatureValues, UserDelegationKey userDelegationKey)"
  desc: "Generates a user delegation SAS for the container using the specified <xref uid=\"com.azure.storage.blob.sas.BlobServiceSasSignatureValues\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BlobServiceSasSignatureValues\"></xref>.\n\nSee <xref uid=\"com.azure.storage.blob.sas.BlobServiceSasSignatureValues\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BlobServiceSasSignatureValues\"></xref> for more information on how to construct a user delegation SAS.\n\n**Code Samples**\n\n```java\nOffsetDateTime myExpiryTime = OffsetDateTime.now().plusDays(1);\n BlobContainerSasPermission myPermission = new BlobContainerSasPermission().setReadPermission(true);\n\n BlobServiceSasSignatureValues myValues = new BlobServiceSasSignatureValues(expiryTime, permission)\n     .setStartTime(OffsetDateTime.now());\n\n client.generateUserDelegationSas(values, userDelegationKey);\n```"
  returns:
    description: "A <code>String</code> representing the SAS query parameters."
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.blob.BlobContainerAsyncClient.generateUserDelegationSas(com.azure.storage.blob.sas.BlobServiceSasSignatureValues,com.azure.storage.blob.models.UserDelegationKey,java.lang.String,com.azure.core.util.Context)"
  fullName: "com.azure.storage.blob.BlobContainerAsyncClient.generateUserDelegationSas(BlobServiceSasSignatureValues blobServiceSasSignatureValues, UserDelegationKey userDelegationKey, String accountName, Context context)"
  name: "generateUserDelegationSas(BlobServiceSasSignatureValues blobServiceSasSignatureValues, UserDelegationKey userDelegationKey, String accountName, Context context)"
  nameWithType: "BlobContainerAsyncClient.generateUserDelegationSas(BlobServiceSasSignatureValues blobServiceSasSignatureValues, UserDelegationKey userDelegationKey, String accountName, Context context)"
  summary: "Generates a user delegation SAS for the container using the specified <xref uid=\"com.azure.storage.blob.sas.BlobServiceSasSignatureValues\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BlobServiceSasSignatureValues\"></xref>."
  parameters:
  - description: "<xref uid=\"com.azure.storage.blob.sas.BlobServiceSasSignatureValues\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BlobServiceSasSignatureValues\"></xref>"
    name: "blobServiceSasSignatureValues"
    type: "<xref href=\"com.azure.storage.blob.sas.BlobServiceSasSignatureValues?alt=com.azure.storage.blob.sas.BlobServiceSasSignatureValues&text=BlobServiceSasSignatureValues\" data-throw-if-not-resolved=\"False\" />"
  - description: "A <xref uid=\"com.azure.storage.blob.models.UserDelegationKey\" data-throw-if-not-resolved=\"false\" data-raw-source=\"UserDelegationKey\"></xref> object used to sign the SAS values.\n See <xref uid=\"com.azure.storage.blob.BlobServiceAsyncClient.getUserDelegationKey(java.time.OffsetDateTime,java.time.OffsetDateTime)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BlobServiceAsyncClient#getUserDelegationKey(OffsetDateTime, OffsetDateTime)\"></xref> for more information on\n how to get a user delegation key."
    name: "userDelegationKey"
    type: "<xref href=\"com.azure.storage.blob.models.UserDelegationKey?alt=com.azure.storage.blob.models.UserDelegationKey&text=UserDelegationKey\" data-throw-if-not-resolved=\"False\" />"
  - description: "The account name."
    name: "accountName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional context that is passed through the code when generating a SAS."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public String generateUserDelegationSas(BlobServiceSasSignatureValues blobServiceSasSignatureValues, UserDelegationKey userDelegationKey, String accountName, Context context)"
  desc: "Generates a user delegation SAS for the container using the specified <xref uid=\"com.azure.storage.blob.sas.BlobServiceSasSignatureValues\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BlobServiceSasSignatureValues\"></xref>.\n\nSee <xref uid=\"com.azure.storage.blob.sas.BlobServiceSasSignatureValues\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BlobServiceSasSignatureValues\"></xref> for more information on how to construct a user delegation SAS.\n\n**Code Samples**\n\n```java\nOffsetDateTime myExpiryTime = OffsetDateTime.now().plusDays(1);\n BlobContainerSasPermission myPermission = new BlobContainerSasPermission().setReadPermission(true);\n\n BlobServiceSasSignatureValues myValues = new BlobServiceSasSignatureValues(expiryTime, permission)\n     .setStartTime(OffsetDateTime.now());\n\n client.generateUserDelegationSas(values, userDelegationKey, accountName, new Context(\"key\", \"value\"));\n```"
  returns:
    description: "A <code>String</code> representing the SAS query parameters."
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.blob.BlobContainerAsyncClient.getAccessPolicy()"
  fullName: "com.azure.storage.blob.BlobContainerAsyncClient.getAccessPolicy()"
  name: "getAccessPolicy()"
  nameWithType: "BlobContainerAsyncClient.getAccessPolicy()"
  summary: "Returns the container's permissions."
  syntax: "public Mono<BlobContainerAccessPolicies> getAccessPolicy()"
  desc: "Returns the container's permissions. The permissions indicate whether container's blobs may be accessed publicly. For more information, see the [Azure Docs][].\n\n**Code Samples**\n\n```java\nclient.getAccessPolicy().subscribe(response -> {\n     System.out.printf(\"Blob Access Type: %s%n\", response.getBlobAccessType());\n\n     for (BlobSignedIdentifier identifier : response.getIdentifiers()) {\n         System.out.printf(\"Identifier Name: %s, Permissions %s%n\",\n             identifier.getId(),\n             identifier.getAccessPolicy().getPermissions());\n     }\n });\n```\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/get-container-acl"
  returns:
    description: "A reactive response containing the container access policy."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.blob.models.BlobContainerAccessPolicies?alt=com.azure.storage.blob.models.BlobContainerAccessPolicies&text=BlobContainerAccessPolicies\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.blob.BlobContainerAsyncClient.getAccessPolicyWithResponse(java.lang.String)"
  fullName: "com.azure.storage.blob.BlobContainerAsyncClient.getAccessPolicyWithResponse(String leaseId)"
  name: "getAccessPolicyWithResponse(String leaseId)"
  nameWithType: "BlobContainerAsyncClient.getAccessPolicyWithResponse(String leaseId)"
  summary: "Returns the container's permissions."
  parameters:
  - description: "The lease ID the active lease on the container must match."
    name: "leaseId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<BlobContainerAccessPolicies>> getAccessPolicyWithResponse(String leaseId)"
  desc: "Returns the container's permissions. The permissions indicate whether container's blobs may be accessed publicly. For more information, see the [Azure Docs][].\n\n**Code Samples**\n\n```java\nclient.getAccessPolicyWithResponse(leaseId).subscribe(response -> {\n     System.out.printf(\"Blob Access Type: %s%n\", response.getValue().getBlobAccessType());\n\n     for (BlobSignedIdentifier identifier : response.getValue().getIdentifiers()) {\n         System.out.printf(\"Identifier Name: %s, Permissions %s%n\",\n             identifier.getId(),\n             identifier.getAccessPolicy().getPermissions());\n     }\n });\n```\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/get-container-acl"
  returns:
    description: "A reactive response containing the container access policy."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.blob.models.BlobContainerAccessPolicies?alt=com.azure.storage.blob.models.BlobContainerAccessPolicies&text=BlobContainerAccessPolicies\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.storage.blob.BlobContainerAsyncClient.getAccountInfo()"
  fullName: "com.azure.storage.blob.BlobContainerAsyncClient.getAccountInfo()"
  name: "getAccountInfo()"
  nameWithType: "BlobContainerAsyncClient.getAccountInfo()"
  summary: "Returns the sku name and account kind for the account."
  syntax: "public Mono<StorageAccountInfo> getAccountInfo()"
  desc: "Returns the sku name and account kind for the account. For more information, please see the [Azure Docs][].\n\n**Code Samples**\n\n```java\nclient.getAccountInfo().subscribe(response ->\n     System.out.printf(\"Account Kind: %s, SKU: %s%n\",\n         response.getAccountKind(),\n         response.getSkuName()));\n```\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/get-account-information"
  returns:
    description: "A reactive response containing the account info."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.blob.models.StorageAccountInfo?alt=com.azure.storage.blob.models.StorageAccountInfo&text=StorageAccountInfo\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.blob.BlobContainerAsyncClient.getAccountInfoWithResponse()"
  fullName: "com.azure.storage.blob.BlobContainerAsyncClient.getAccountInfoWithResponse()"
  name: "getAccountInfoWithResponse()"
  nameWithType: "BlobContainerAsyncClient.getAccountInfoWithResponse()"
  summary: "Returns the sku name and account kind for the account."
  syntax: "public Mono<Response<StorageAccountInfo>> getAccountInfoWithResponse()"
  desc: "Returns the sku name and account kind for the account. For more information, please see the [Azure Docs][].\n\n**Code Samples**\n\n```java\nclient.getAccountInfoWithResponse().subscribe(response ->\n     System.out.printf(\"Account Kind: %s, SKU: %s%n\",\n         response.getValue().getAccountKind(),\n         response.getValue().getSkuName()));\n```\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/get-account-information"
  returns:
    description: "A reactive response containing the account info."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.blob.models.StorageAccountInfo?alt=com.azure.storage.blob.models.StorageAccountInfo&text=StorageAccountInfo\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.storage.blob.BlobContainerAsyncClient.getAccountName()"
  fullName: "com.azure.storage.blob.BlobContainerAsyncClient.getAccountName()"
  name: "getAccountName()"
  nameWithType: "BlobContainerAsyncClient.getAccountName()"
  summary: "Get associated account name."
  syntax: "public String getAccountName()"
  desc: "Get associated account name."
  returns:
    description: "account name associated with this storage resource."
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.blob.BlobContainerAsyncClient.getAccountUrl()"
  fullName: "com.azure.storage.blob.BlobContainerAsyncClient.getAccountUrl()"
  name: "getAccountUrl()"
  nameWithType: "BlobContainerAsyncClient.getAccountUrl()"
  summary: "Get the url of the storage account."
  syntax: "public String getAccountUrl()"
  desc: "Get the url of the storage account."
  returns:
    description: "the URL of the storage account"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.blob.BlobContainerAsyncClient.getBlobAsyncClient(java.lang.String)"
  fullName: "com.azure.storage.blob.BlobContainerAsyncClient.getBlobAsyncClient(String blobName)"
  name: "getBlobAsyncClient(String blobName)"
  nameWithType: "BlobContainerAsyncClient.getBlobAsyncClient(String blobName)"
  summary: "Creates a new Blob<wbr>Async<wbr>Client object by concatenating blob<wbr>Name to the end of Container<wbr>Async<wbr>Client's URL."
  parameters:
  - description: "A <code>String</code> representing the name of the blob. If the blob name contains special characters,\n pass in the url encoded version of the blob name."
    name: "blobName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public BlobAsyncClient getBlobAsyncClient(String blobName)"
  desc: "Creates a new BlobAsyncClient object by concatenating blobName to the end of ContainerAsyncClient's URL. The new BlobAsyncClient uses the same request policy pipeline as the ContainerAsyncClient.\n\n**Code Samples**\n\n```java\nBlobAsyncClient blobAsyncClient = client.getBlobAsyncClient(blobName);\n```"
  returns:
    description: "A new <xref uid=\"com.azure.storage.blob.BlobAsyncClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BlobAsyncClient\"></xref> object which references the blob with the specified name in this container."
    type: "<xref href=\"com.azure.storage.blob.BlobAsyncClient?alt=com.azure.storage.blob.BlobAsyncClient&text=BlobAsyncClient\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.blob.BlobContainerAsyncClient.getBlobAsyncClient(java.lang.String,java.lang.String)"
  fullName: "com.azure.storage.blob.BlobContainerAsyncClient.getBlobAsyncClient(String blobName, String snapshot)"
  name: "getBlobAsyncClient(String blobName, String snapshot)"
  nameWithType: "BlobContainerAsyncClient.getBlobAsyncClient(String blobName, String snapshot)"
  summary: "Creates a new Blob<wbr>Async<wbr>Client object by concatenating blob<wbr>Name to the end of Container<wbr>Async<wbr>Client's URL."
  parameters:
  - description: "A <code>String</code> representing the name of the blob. If the blob name contains special characters,\n pass in the url encoded version of the blob name."
    name: "blobName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "the snapshot identifier for the blob."
    name: "snapshot"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public BlobAsyncClient getBlobAsyncClient(String blobName, String snapshot)"
  desc: "Creates a new BlobAsyncClient object by concatenating blobName to the end of ContainerAsyncClient's URL. The new BlobAsyncClient uses the same request policy pipeline as the ContainerAsyncClient.\n\n**Code Samples**\n\n```java\nBlobAsyncClient blobAsyncClient = client.getBlobAsyncClient(blobName, snapshot);\n```"
  returns:
    description: "A new <xref uid=\"com.azure.storage.blob.BlobAsyncClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BlobAsyncClient\"></xref> object which references the blob with the specified name in this container."
    type: "<xref href=\"com.azure.storage.blob.BlobAsyncClient?alt=com.azure.storage.blob.BlobAsyncClient&text=BlobAsyncClient\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.blob.BlobContainerAsyncClient.getBlobContainerName()"
  fullName: "com.azure.storage.blob.BlobContainerAsyncClient.getBlobContainerName()"
  name: "getBlobContainerName()"
  nameWithType: "BlobContainerAsyncClient.getBlobContainerName()"
  summary: "Get the container name."
  syntax: "public String getBlobContainerName()"
  desc: "Get the container name.\n\n**Code Samples**\n\n```java\nString containerName = client.getBlobContainerName();\n System.out.println(\"The name of the blob is \" + containerName);\n```"
  returns:
    description: "The name of container."
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.blob.BlobContainerAsyncClient.getBlobContainerUrl()"
  fullName: "com.azure.storage.blob.BlobContainerAsyncClient.getBlobContainerUrl()"
  name: "getBlobContainerUrl()"
  nameWithType: "BlobContainerAsyncClient.getBlobContainerUrl()"
  summary: "Gets the URL of the container represented by this client."
  syntax: "public String getBlobContainerUrl()"
  desc: "Gets the URL of the container represented by this client."
  returns:
    description: "the URL."
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.blob.BlobContainerAsyncClient.getBlobVersionAsyncClient(java.lang.String,java.lang.String)"
  fullName: "com.azure.storage.blob.BlobContainerAsyncClient.getBlobVersionAsyncClient(String blobName, String versionId)"
  name: "getBlobVersionAsyncClient(String blobName, String versionId)"
  nameWithType: "BlobContainerAsyncClient.getBlobVersionAsyncClient(String blobName, String versionId)"
  summary: "Creates a new Blob<wbr>Async<wbr>Client object by concatenating blob<wbr>Name to the end of Container<wbr>Async<wbr>Client's URL."
  parameters:
  - description: "A <code>String</code> representing the name of the blob. If the blob name contains special characters,\n pass in the url encoded version of the blob name."
    name: "blobName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "the version identifier for the blob, pass <code>null</code> to interact with the latest blob version."
    name: "versionId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public BlobAsyncClient getBlobVersionAsyncClient(String blobName, String versionId)"
  desc: "Creates a new BlobAsyncClient object by concatenating blobName to the end of ContainerAsyncClient's URL. The new BlobAsyncClient uses the same request policy pipeline as the ContainerAsyncClient."
  returns:
    description: "A new <xref uid=\"com.azure.storage.blob.BlobAsyncClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BlobAsyncClient\"></xref> object which references the blob with the specified name in this container."
    type: "<xref href=\"com.azure.storage.blob.BlobAsyncClient?alt=com.azure.storage.blob.BlobAsyncClient&text=BlobAsyncClient\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.blob.BlobContainerAsyncClient.getCustomerProvidedKey()"
  fullName: "com.azure.storage.blob.BlobContainerAsyncClient.getCustomerProvidedKey()"
  name: "getCustomerProvidedKey()"
  nameWithType: "BlobContainerAsyncClient.getCustomerProvidedKey()"
  summary: "Gets the <xref uid=\"com.azure.storage.blob.models.CpkInfo\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CpkInfo\"></xref> associated with this client that will be passed to <xref uid=\"com.azure.storage.blob.BlobAsyncClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BlobAsyncClients\"></xref> when <xref uid=\"com.azure.storage.blob.BlobContainerAsyncClient.getBlobAsyncClient(java.lang.String)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"getBlobAsyncClient\"></xref> is called."
  syntax: "public CpkInfo getCustomerProvidedKey()"
  desc: "Gets the <xref uid=\"com.azure.storage.blob.models.CpkInfo\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CpkInfo\"></xref> associated with this client that will be passed to <xref uid=\"com.azure.storage.blob.BlobAsyncClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BlobAsyncClients\"></xref> when <xref uid=\"com.azure.storage.blob.BlobContainerAsyncClient.getBlobAsyncClient(java.lang.String)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"getBlobAsyncClient\"></xref> is called."
  returns:
    description: "the customer provided key used for encryption."
    type: "<xref href=\"com.azure.storage.blob.models.CpkInfo?alt=com.azure.storage.blob.models.CpkInfo&text=CpkInfo\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.blob.BlobContainerAsyncClient.getEncryptionScope()"
  fullName: "com.azure.storage.blob.BlobContainerAsyncClient.getEncryptionScope()"
  name: "getEncryptionScope()"
  nameWithType: "BlobContainerAsyncClient.getEncryptionScope()"
  summary: "Gets the <xref uid=\"com.azure.storage.blob.implementation.models.EncryptionScope\" data-throw-if-not-resolved=\"false\" data-raw-source=\"EncryptionScope\"></xref> used to encrypt this blob's content on the server."
  syntax: "public String getEncryptionScope()"
  desc: "Gets the <xref uid=\"com.azure.storage.blob.implementation.models.EncryptionScope\" data-throw-if-not-resolved=\"false\" data-raw-source=\"EncryptionScope\"></xref> used to encrypt this blob's content on the server."
  returns:
    description: "the encryption scope used for encryption."
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.blob.BlobContainerAsyncClient.getHttpPipeline()"
  fullName: "com.azure.storage.blob.BlobContainerAsyncClient.getHttpPipeline()"
  name: "getHttpPipeline()"
  nameWithType: "BlobContainerAsyncClient.getHttpPipeline()"
  summary: "Gets the <xref uid=\"com.azure.core.http.HttpPipeline\" data-throw-if-not-resolved=\"false\" data-raw-source=\"HttpPipeline\"></xref> powering this client."
  syntax: "public HttpPipeline getHttpPipeline()"
  desc: "Gets the <xref uid=\"com.azure.core.http.HttpPipeline\" data-throw-if-not-resolved=\"false\" data-raw-source=\"HttpPipeline\"></xref> powering this client."
  returns:
    description: "The pipeline."
    type: "<xref href=\"com.azure.core.http.HttpPipeline?alt=com.azure.core.http.HttpPipeline&text=HttpPipeline\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.blob.BlobContainerAsyncClient.getProperties()"
  fullName: "com.azure.storage.blob.BlobContainerAsyncClient.getProperties()"
  name: "getProperties()"
  nameWithType: "BlobContainerAsyncClient.getProperties()"
  summary: "Returns the container's metadata and system properties."
  syntax: "public Mono<BlobContainerProperties> getProperties()"
  desc: "Returns the container's metadata and system properties. For more information, see the [Azure Docs][].\n\n**Code Samples**\n\n```java\nclient.getProperties().subscribe(response ->\n     System.out.printf(\"Public Access Type: %s, Legal Hold? %b, Immutable? %b%n\",\n         response.getBlobPublicAccess(),\n         response.hasLegalHold(),\n         response.hasImmutabilityPolicy()));\n```\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/get-container-metadata"
  returns:
    description: "A <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> containing a <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> whose <xref uid=\"com.azure.core.http.rest.Response.getValue*\" data-throw-if-not-resolved=\"false\" data-raw-source=\"value\"></xref> containing the\n container properties."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.blob.models.BlobContainerProperties?alt=com.azure.storage.blob.models.BlobContainerProperties&text=BlobContainerProperties\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.blob.BlobContainerAsyncClient.getPropertiesWithResponse(java.lang.String)"
  fullName: "com.azure.storage.blob.BlobContainerAsyncClient.getPropertiesWithResponse(String leaseId)"
  name: "getPropertiesWithResponse(String leaseId)"
  nameWithType: "BlobContainerAsyncClient.getPropertiesWithResponse(String leaseId)"
  summary: "Returns the container's metadata and system properties."
  parameters:
  - description: "The lease ID the active lease on the container must match."
    name: "leaseId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<BlobContainerProperties>> getPropertiesWithResponse(String leaseId)"
  desc: "Returns the container's metadata and system properties. For more information, see the [Azure Docs][].\n\n**Code Samples**\n\n```java\nclient.getPropertiesWithResponse(leaseId).subscribe(response ->\n     System.out.printf(\"Public Access Type: %s, Legal Hold? %b, Immutable? %b%n\",\n         response.getValue().getBlobPublicAccess(),\n         response.getValue().hasLegalHold(),\n         response.getValue().hasImmutabilityPolicy()));\n```\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/get-container-metadata"
  returns:
    description: "A reactive response containing the container properties."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.blob.models.BlobContainerProperties?alt=com.azure.storage.blob.models.BlobContainerProperties&text=BlobContainerProperties\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.storage.blob.BlobContainerAsyncClient.getServiceAsyncClient()"
  fullName: "com.azure.storage.blob.BlobContainerAsyncClient.getServiceAsyncClient()"
  name: "getServiceAsyncClient()"
  nameWithType: "BlobContainerAsyncClient.getServiceAsyncClient()"
  summary: "Get an async client pointing to the account."
  syntax: "public BlobServiceAsyncClient getServiceAsyncClient()"
  desc: "Get an async client pointing to the account."
  returns:
    description: "<xref uid=\"com.azure.storage.blob.BlobServiceAsyncClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BlobServiceAsyncClient\"></xref>"
    type: "<xref href=\"com.azure.storage.blob.BlobServiceAsyncClient?alt=com.azure.storage.blob.BlobServiceAsyncClient&text=BlobServiceAsyncClient\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.blob.BlobContainerAsyncClient.getServiceVersion()"
  fullName: "com.azure.storage.blob.BlobContainerAsyncClient.getServiceVersion()"
  name: "getServiceVersion()"
  nameWithType: "BlobContainerAsyncClient.getServiceVersion()"
  summary: "Gets the service version the client is using."
  syntax: "public BlobServiceVersion getServiceVersion()"
  desc: "Gets the service version the client is using."
  returns:
    description: "the service version the client is using."
    type: "<xref href=\"com.azure.storage.blob.BlobServiceVersion?alt=com.azure.storage.blob.BlobServiceVersion&text=BlobServiceVersion\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.blob.BlobContainerAsyncClient.listBlobs()"
  fullName: "com.azure.storage.blob.BlobContainerAsyncClient.listBlobs()"
  name: "listBlobs()"
  nameWithType: "BlobContainerAsyncClient.listBlobs()"
  summary: "Returns a reactive Publisher emitting all the blobs in this container lazily as needed."
  syntax: "public PagedFlux<BlobItem> listBlobs()"
  desc: "Returns a reactive Publisher emitting all the blobs in this container lazily as needed. The directories are flattened and only actual blobs and no directories are returned.\n\nBlob names are returned in lexicographic order. For more information, see the [Azure Docs][].\n\nE.g. listing a container containing a 'foo' folder, which contains blobs 'foo1' and 'foo2', and a blob on the root level 'bar', will return\n\n *  foo/foo1\n *  foo/foo2\n *  bar\n\n**Code Samples**\n\n```java\nclient.listBlobs().subscribe(blob ->\n     System.out.printf(\"Name: %s, Directory? %b%n\", blob.getName(), blob.isPrefix()));\n```\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/list-blobs"
  returns:
    description: "A reactive response emitting the flattened blobs."
    type: "<xref href=\"com.azure.core.http.rest.PagedFlux?alt=com.azure.core.http.rest.PagedFlux&text=PagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.blob.models.BlobItem?alt=com.azure.storage.blob.models.BlobItem&text=BlobItem\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.blob.BlobContainerAsyncClient.listBlobs(com.azure.storage.blob.models.ListBlobsOptions)"
  fullName: "com.azure.storage.blob.BlobContainerAsyncClient.listBlobs(ListBlobsOptions options)"
  name: "listBlobs(ListBlobsOptions options)"
  nameWithType: "BlobContainerAsyncClient.listBlobs(ListBlobsOptions options)"
  summary: "Returns a reactive Publisher emitting all the blobs in this container lazily as needed."
  parameters:
  - description: "<xref uid=\"com.azure.storage.blob.models.ListBlobsOptions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ListBlobsOptions\"></xref>"
    name: "options"
    type: "<xref href=\"com.azure.storage.blob.models.ListBlobsOptions?alt=com.azure.storage.blob.models.ListBlobsOptions&text=ListBlobsOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PagedFlux<BlobItem> listBlobs(ListBlobsOptions options)"
  desc: "Returns a reactive Publisher emitting all the blobs in this container lazily as needed. The directories are flattened and only actual blobs and no directories are returned.\n\nBlob names are returned in lexicographic order. For more information, see the [Azure Docs][].\n\nE.g. listing a container containing a 'foo' folder, which contains blobs 'foo1' and 'foo2', and a blob on the root level 'bar', will return\n\n *  foo/foo1\n *  foo/foo2\n *  bar\n\n```java\nListBlobsOptions options = new ListBlobsOptions()\n     .setPrefix(\"prefixToMatch\")\n     .setDetails(new BlobListDetails()\n         .setRetrieveDeletedBlobs(true)\n         .setRetrieveSnapshots(true));\n\n client.listBlobs(options).subscribe(blob ->\n     System.out.printf(\"Name: %s, Directory? %b, Deleted? %b, Snapshot ID: %s%n\",\n         blob.getName(),\n         blob.isPrefix(),\n         blob.isDeleted(),\n         blob.getSnapshot()));\n```\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/list-blobs"
  returns:
    description: "A reactive response emitting the listed blobs, flattened."
    type: "<xref href=\"com.azure.core.http.rest.PagedFlux?alt=com.azure.core.http.rest.PagedFlux&text=PagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.blob.models.BlobItem?alt=com.azure.storage.blob.models.BlobItem&text=BlobItem\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.blob.BlobContainerAsyncClient.listBlobs(com.azure.storage.blob.models.ListBlobsOptions,java.lang.String)"
  fullName: "com.azure.storage.blob.BlobContainerAsyncClient.listBlobs(ListBlobsOptions options, String continuationToken)"
  name: "listBlobs(ListBlobsOptions options, String continuationToken)"
  nameWithType: "BlobContainerAsyncClient.listBlobs(ListBlobsOptions options, String continuationToken)"
  summary: "Returns a reactive Publisher emitting all the blobs in this container lazily as needed."
  parameters:
  - description: "<xref uid=\"com.azure.storage.blob.models.ListBlobsOptions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ListBlobsOptions\"></xref>"
    name: "options"
    type: "<xref href=\"com.azure.storage.blob.models.ListBlobsOptions?alt=com.azure.storage.blob.models.ListBlobsOptions&text=ListBlobsOptions\" data-throw-if-not-resolved=\"False\" />"
  - description: "Identifies the portion of the list to be returned with the next list operation."
    name: "continuationToken"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PagedFlux<BlobItem> listBlobs(ListBlobsOptions options, String continuationToken)"
  desc: "Returns a reactive Publisher emitting all the blobs in this container lazily as needed. The directories are flattened and only actual blobs and no directories are returned.\n\nBlob names are returned in lexicographic order. For more information, see the [Azure Docs][].\n\nE.g. listing a container containing a 'foo' folder, which contains blobs 'foo1' and 'foo2', and a blob on the root level 'bar', will return\n\n *  foo/foo1\n *  foo/foo2\n *  bar\n\n```java\nListBlobsOptions options = new ListBlobsOptions()\n     .setPrefix(\"prefixToMatch\")\n     .setDetails(new BlobListDetails()\n         .setRetrieveDeletedBlobs(true)\n         .setRetrieveSnapshots(true));\n\n String continuationToken = \"continuationToken\";\n\n client.listBlobs(options, continuationToken).subscribe(blob ->\n     System.out.printf(\"Name: %s, Directory? %b, Deleted? %b, Snapshot ID: %s%n\",\n         blob.getName(),\n         blob.isPrefix(),\n         blob.isDeleted(),\n         blob.getSnapshot()));\n```\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/list-blobs"
  returns:
    description: "A reactive response emitting the listed blobs, flattened."
    type: "<xref href=\"com.azure.core.http.rest.PagedFlux?alt=com.azure.core.http.rest.PagedFlux&text=PagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.blob.models.BlobItem?alt=com.azure.storage.blob.models.BlobItem&text=BlobItem\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.blob.BlobContainerAsyncClient.listBlobsByHierarchy(java.lang.String)"
  fullName: "com.azure.storage.blob.BlobContainerAsyncClient.listBlobsByHierarchy(String directory)"
  name: "listBlobsByHierarchy(String directory)"
  nameWithType: "BlobContainerAsyncClient.listBlobsByHierarchy(String directory)"
  summary: "Returns a reactive Publisher emitting all the blobs and directories (prefixes) under the given directory (prefix)."
  parameters:
  - description: "The directory to list blobs underneath"
    name: "directory"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PagedFlux<BlobItem> listBlobsByHierarchy(String directory)"
  desc: "Returns a reactive Publisher emitting all the blobs and directories (prefixes) under the given directory (prefix). Directories will have <xref uid=\"com.azure.storage.blob.models.BlobItem.isPrefix()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BlobItem#isPrefix()\"></xref> set to true.\n\nBlob names are returned in lexicographic order. For more information, see the [Azure Docs][].\n\nE.g. listing a container containing a 'foo' folder, which contains blobs 'foo1' and 'foo2', and a blob on the root level 'bar', will return the following results when prefix=null:\n\n *  foo/ (isPrefix = true)\n *  bar (isPrefix = false)\n\nwill return the following results when prefix=\"foo/\":\n\n *  foo/foo1 (isPrefix = false)\n *  foo/foo2 (isPrefix = false)\n\n**Code Samples**\n\n```java\nclient.listBlobsByHierarchy(\"directoryName\").subscribe(blob ->\n     System.out.printf(\"Name: %s, Directory? %b%n\", blob.getName(), blob.isDeleted()));\n```\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/list-blobs"
  returns:
    description: "A reactive response emitting the prefixes and blobs."
    type: "<xref href=\"com.azure.core.http.rest.PagedFlux?alt=com.azure.core.http.rest.PagedFlux&text=PagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.blob.models.BlobItem?alt=com.azure.storage.blob.models.BlobItem&text=BlobItem\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.blob.BlobContainerAsyncClient.listBlobsByHierarchy(java.lang.String,com.azure.storage.blob.models.ListBlobsOptions)"
  fullName: "com.azure.storage.blob.BlobContainerAsyncClient.listBlobsByHierarchy(String delimiter, ListBlobsOptions options)"
  name: "listBlobsByHierarchy(String delimiter, ListBlobsOptions options)"
  nameWithType: "BlobContainerAsyncClient.listBlobsByHierarchy(String delimiter, ListBlobsOptions options)"
  summary: "Returns a reactive Publisher emitting all the blobs and prefixes (directories) under the given prefix (directory)."
  parameters:
  - description: "The delimiter for blob hierarchy, \"/\" for hierarchy based on directories"
    name: "delimiter"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "<xref uid=\"com.azure.storage.blob.models.ListBlobsOptions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ListBlobsOptions\"></xref>"
    name: "options"
    type: "<xref href=\"com.azure.storage.blob.models.ListBlobsOptions?alt=com.azure.storage.blob.models.ListBlobsOptions&text=ListBlobsOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PagedFlux<BlobItem> listBlobsByHierarchy(String delimiter, ListBlobsOptions options)"
  desc: "Returns a reactive Publisher emitting all the blobs and prefixes (directories) under the given prefix (directory). Directories will have <xref uid=\"com.azure.storage.blob.models.BlobItem.isPrefix()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BlobItem#isPrefix()\"></xref> set to true.\n\nBlob names are returned in lexicographic order. For more information, see the [Azure Docs][].\n\nE.g. listing a container containing a 'foo' folder, which contains blobs 'foo1' and 'foo2', and a blob on the root level 'bar', will return the following results when prefix=null:\n\n *  foo/ (isPrefix = true)\n *  bar (isPrefix = false)\n\nwill return the following results when prefix=\"foo/\":\n\n *  foo/foo1 (isPrefix = false)\n *  foo/foo2 (isPrefix = false)\n\n**Code Samples**\n\n```java\nListBlobsOptions options = new ListBlobsOptions()\n     .setPrefix(\"directoryName\")\n     .setDetails(new BlobListDetails()\n         .setRetrieveDeletedBlobs(true)\n         .setRetrieveSnapshots(true));\n\n client.listBlobsByHierarchy(\"/\", options).subscribe(blob ->\n     System.out.printf(\"Name: %s, Directory? %b, Deleted? %b, Snapshot ID: %s%n\",\n         blob.getName(),\n         blob.isPrefix(),\n         blob.isDeleted(),\n         blob.getSnapshot()));\n```\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/list-blobs"
  returns:
    description: "A reactive response emitting the prefixes and blobs."
    type: "<xref href=\"com.azure.core.http.rest.PagedFlux?alt=com.azure.core.http.rest.PagedFlux&text=PagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.blob.models.BlobItem?alt=com.azure.storage.blob.models.BlobItem&text=BlobItem\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.blob.BlobContainerAsyncClient.setAccessPolicy(com.azure.storage.blob.models.PublicAccessType,java.util.List<com.azure.storage.blob.models.BlobSignedIdentifier>)"
  fullName: "com.azure.storage.blob.BlobContainerAsyncClient.setAccessPolicy(PublicAccessType accessType, List<BlobSignedIdentifier> identifiers)"
  name: "setAccessPolicy(PublicAccessType accessType, List<BlobSignedIdentifier> identifiers)"
  nameWithType: "BlobContainerAsyncClient.setAccessPolicy(PublicAccessType accessType, List<BlobSignedIdentifier> identifiers)"
  summary: "Sets the container's permissions."
  parameters:
  - description: "Specifies how the data in this container is available to the public. See the\n x-ms-blob-public-access header in the Azure Docs for more information. Pass null for no public access."
    name: "accessType"
    type: "<xref href=\"com.azure.storage.blob.models.PublicAccessType?alt=com.azure.storage.blob.models.PublicAccessType&text=PublicAccessType\" data-throw-if-not-resolved=\"False\" />"
  - description: "A list of <xref uid=\"com.azure.storage.blob.models.BlobSignedIdentifier\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BlobSignedIdentifier\"></xref> objects that specify the permissions for the container.\n Please see\n <a href=\"https://docs.microsoft.com/rest/api/storageservices/establishing-a-stored-access-policy\">here</a>\n for more information. Passing null will clear all access policies."
    name: "identifiers"
    type: "<xref href=\"java.util.List?alt=java.util.List&text=List\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.blob.models.BlobSignedIdentifier?alt=com.azure.storage.blob.models.BlobSignedIdentifier&text=BlobSignedIdentifier\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public Mono<Void> setAccessPolicy(PublicAccessType accessType, List<BlobSignedIdentifier> identifiers)"
  desc: "Sets the container's permissions. The permissions indicate whether blobs in a container may be accessed publicly. Note that, for each signed identifier, we will truncate the start and expiry times to the nearest second to ensure the time formatting is compatible with the service. For more information, see the [Azure Docs][].\n\n**Code Samples**\n\n```java\nBlobSignedIdentifier identifier = new BlobSignedIdentifier()\n     .setId(\"name\")\n     .setAccessPolicy(new BlobAccessPolicy()\n         .setStartsOn(OffsetDateTime.now())\n         .setExpiresOn(OffsetDateTime.now().plusDays(7))\n         .setPermissions(\"permissionString\"));\n\n client.setAccessPolicy(PublicAccessType.CONTAINER, Collections.singletonList(identifier)).subscribe(\n     response -> System.out.printf(\"Set access policy completed%n\"),\n     error -> System.out.printf(\"Set access policy failed: %s%n\", error));\n```\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/set-container-acl"
  returns:
    description: "A reactive response signalling completion."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.blob.BlobContainerAsyncClient.setAccessPolicyWithResponse(com.azure.storage.blob.models.PublicAccessType,java.util.List<com.azure.storage.blob.models.BlobSignedIdentifier>,com.azure.storage.blob.models.BlobRequestConditions)"
  fullName: "com.azure.storage.blob.BlobContainerAsyncClient.setAccessPolicyWithResponse(PublicAccessType accessType, List<BlobSignedIdentifier> identifiers, BlobRequestConditions requestConditions)"
  name: "setAccessPolicyWithResponse(PublicAccessType accessType, List<BlobSignedIdentifier> identifiers, BlobRequestConditions requestConditions)"
  nameWithType: "BlobContainerAsyncClient.setAccessPolicyWithResponse(PublicAccessType accessType, List<BlobSignedIdentifier> identifiers, BlobRequestConditions requestConditions)"
  summary: "Sets the container's permissions."
  parameters:
  - description: "Specifies how the data in this container is available to the public. See the\n x-ms-blob-public-access header in the Azure Docs for more information. Pass null for no public access."
    name: "accessType"
    type: "<xref href=\"com.azure.storage.blob.models.PublicAccessType?alt=com.azure.storage.blob.models.PublicAccessType&text=PublicAccessType\" data-throw-if-not-resolved=\"False\" />"
  - description: "A list of <xref uid=\"com.azure.storage.blob.models.BlobSignedIdentifier\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BlobSignedIdentifier\"></xref> objects that specify the permissions for the container.\n Please see\n <a href=\"https://docs.microsoft.com/rest/api/storageservices/establishing-a-stored-access-policy\">here</a>\n for more information. Passing null will clear all access policies."
    name: "identifiers"
    type: "<xref href=\"java.util.List?alt=java.util.List&text=List\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.blob.models.BlobSignedIdentifier?alt=com.azure.storage.blob.models.BlobSignedIdentifier&text=BlobSignedIdentifier\" data-throw-if-not-resolved=\"False\" />&gt;"
  - description: "<xref uid=\"com.azure.storage.blob.models.BlobRequestConditions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BlobRequestConditions\"></xref>"
    name: "requestConditions"
    type: "<xref href=\"com.azure.storage.blob.models.BlobRequestConditions?alt=com.azure.storage.blob.models.BlobRequestConditions&text=BlobRequestConditions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<Void>> setAccessPolicyWithResponse(PublicAccessType accessType, List<BlobSignedIdentifier> identifiers, BlobRequestConditions requestConditions)"
  desc: "Sets the container's permissions. The permissions indicate whether blobs in a container may be accessed publicly. Note that, for each signed identifier, we will truncate the start and expiry times to the nearest second to ensure the time formatting is compatible with the service. For more information, see the [Azure Docs][].\n\n**Code Samples**\n\n```java\nBlobSignedIdentifier identifier = new BlobSignedIdentifier()\n     .setId(\"name\")\n     .setAccessPolicy(new BlobAccessPolicy()\n         .setStartsOn(OffsetDateTime.now())\n         .setExpiresOn(OffsetDateTime.now().plusDays(7))\n         .setPermissions(\"permissionString\"));\n\n BlobRequestConditions requestConditions = new BlobRequestConditions()\n     .setLeaseId(leaseId)\n     .setIfUnmodifiedSince(OffsetDateTime.now().minusDays(3));\n\n client.setAccessPolicyWithResponse(PublicAccessType.CONTAINER, Collections.singletonList(identifier), requestConditions)\n     .subscribe(response ->\n         System.out.printf(\"Set access policy completed with status %d%n\", response.getStatusCode()));\n```\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/set-container-acl"
  returns:
    description: "A reactive response signalling completion."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.storage.blob.BlobContainerAsyncClient.setMetadata(java.util.Map<java.lang.String,java.lang.String>)"
  fullName: "com.azure.storage.blob.BlobContainerAsyncClient.setMetadata(Map<String,String> metadata)"
  name: "setMetadata(Map<String,String> metadata)"
  nameWithType: "BlobContainerAsyncClient.setMetadata(Map<String,String> metadata)"
  summary: "Sets the container's metadata."
  parameters:
  - description: "Metadata to associate with the container. If there is leading or trailing whitespace in any\n metadata key or value, it must be removed or encoded."
    name: "metadata"
    type: "<xref href=\"java.util.Map?alt=java.util.Map&text=Map\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />,<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public Mono<Void> setMetadata(Map<String,String> metadata)"
  desc: "Sets the container's metadata. For more information, see the [Azure Docs][].\n\n**Code Samples**\n\n```java\nMap<String, String> metadata = Collections.singletonMap(\"metadata\", \"value\");\n client.setMetadata(metadata).subscribe(\n     response -> System.out.printf(\"Set metadata completed%n\"),\n     error -> System.out.printf(\"Set metadata failed: %s%n\", error));\n```\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/set-container-metadata"
  returns:
    description: "A <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> containing a <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> whose <xref uid=\"com.azure.core.http.rest.Response.getValue*\" data-throw-if-not-resolved=\"false\" data-raw-source=\"value\"></xref> contains signalling\n completion."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.blob.BlobContainerAsyncClient.setMetadataWithResponse(java.util.Map<java.lang.String,java.lang.String>,com.azure.storage.blob.models.BlobRequestConditions)"
  fullName: "com.azure.storage.blob.BlobContainerAsyncClient.setMetadataWithResponse(Map<String,String> metadata, BlobRequestConditions requestConditions)"
  name: "setMetadataWithResponse(Map<String,String> metadata, BlobRequestConditions requestConditions)"
  nameWithType: "BlobContainerAsyncClient.setMetadataWithResponse(Map<String,String> metadata, BlobRequestConditions requestConditions)"
  summary: "Sets the container's metadata."
  parameters:
  - description: "Metadata to associate with the container. If there is leading or trailing whitespace in any\n metadata key or value, it must be removed or encoded."
    name: "metadata"
    type: "<xref href=\"java.util.Map?alt=java.util.Map&text=Map\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />,<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />&gt;"
  - description: "<xref uid=\"com.azure.storage.blob.models.BlobRequestConditions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BlobRequestConditions\"></xref>"
    name: "requestConditions"
    type: "<xref href=\"com.azure.storage.blob.models.BlobRequestConditions?alt=com.azure.storage.blob.models.BlobRequestConditions&text=BlobRequestConditions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<Void>> setMetadataWithResponse(Map<String,String> metadata, BlobRequestConditions requestConditions)"
  desc: "Sets the container's metadata. For more information, see the [Azure Docs][].\n\n**Code Samples**\n\n```java\nMap<String, String> metadata = Collections.singletonMap(\"metadata\", \"value\");\n BlobRequestConditions requestConditions = new BlobRequestConditions()\n     .setLeaseId(leaseId)\n     .setIfUnmodifiedSince(OffsetDateTime.now().minusDays(3));\n\n client.setMetadataWithResponse(metadata, requestConditions).subscribe(response ->\n     System.out.printf(\"Set metadata completed with status %d%n\", response.getStatusCode()));\n```\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/set-container-metadata"
  returns:
    description: "A reactive response signalling completion."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
type: "class"
desc: "Client to a container. It may only be instantiated through a <xref uid=\"com.azure.storage.blob.BlobContainerClientBuilder\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BlobContainerClientBuilder\"></xref> or via the method <xref uid=\"com.azure.storage.blob.BlobServiceAsyncClient.getBlobContainerAsyncClient(java.lang.String)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BlobServiceAsyncClient#getBlobContainerAsyncClient(String)\"></xref>. This class does not hold any state about a particular blob but is instead a convenient way of sending off appropriate requests to the resource on the service. It may also be used to construct URLs to blobs.\n\nThis client contains operations on a container. Operations on a blob are available on <xref uid=\"com.azure.storage.blob.BlobAsyncClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BlobAsyncClient\"></xref> through <xref uid=\"com.azure.storage.blob.BlobContainerAsyncClient.getBlobAsyncClient(java.lang.String)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#getBlobAsyncClient(String)\"></xref>, and operations on the service are available on <xref uid=\"com.azure.storage.blob.BlobServiceAsyncClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BlobServiceAsyncClient\"></xref>.\n\nPlease refer to the [Azure Docs][] for more information on containers.\n\nNote this client is an async client that returns reactive responses from Spring Reactor Core project (https://projectreactor.io/). Calling the methods in this client will **NOT** start the actual network operation, until `.subscribe()` is called on the reactive response. You can simply convert one of these responses to a <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"java.util.concurrent.CompletableFuture\"></xref> object through <xref uid=\"reactor.core.publisher.Mono.toFuture*\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono#toFuture()\"></xref>.\n\n\n[Azure Docs]: https://docs.microsoft.com/azure/storage/blobs/storage-blobs-introduction"
metadata: {}
package: "com.azure.storage.blob"
artifact: com.azure:azure-storage-blob:12.18.0-beta.1
