### YamlMime:ManagedReference
items:
- uid: org.slf4j.helpers.MessageFormatter
  id: MessageFormatter
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.slf4j.helpers
  children:
  - org.slf4j.helpers.MessageFormatter.MessageFormatter()
  - org.slf4j.helpers.MessageFormatter.arrayFormat(java.lang.String,java.lang.Object[])
  - org.slf4j.helpers.MessageFormatter.arrayFormat(java.lang.String,java.lang.Object[],java.lang.Throwable)
  - org.slf4j.helpers.MessageFormatter.format(java.lang.String,java.lang.Object)
  - org.slf4j.helpers.MessageFormatter.format(java.lang.String,java.lang.Object,java.lang.Object)
  langs:
  - java
  name: MessageFormatter
  nameWithType: MessageFormatter
  fullName: org.slf4j.helpers.MessageFormatter
  type: Class
  package: org.slf4j.helpers
  summary: >-
    Formats messages according to very simple substitution rules. Substitutions can be made 1, 2 or more arguments.


    For example,


    ```java

    MessageFormatter.format("Hi {}.", "there")

    ```


    will return the string "Hi there.".


    The \{\} pair is called the *formatting anchor*. It serves to designate the location where arguments need to be substituted within the message pattern.


    In case your message contains the '\{' or the '\}' character, you do not have to do anything special unless the '\}' character immediately follows '\{'. For example,


    ```java

    MessageFormatter.format("Set {1,2,3} is not equal to {}.", "1,2");

    ```


    will return the string "Set \{1,2,3\} is not equal to 1,2.".


    If for whatever reason you need to place the string "\{\}" in the message without its *formatting anchor* meaning, then you need to escape the '\{' character with '\\', that is the backslash character. Only the '\{' character should be escaped. There is no need to escape the '\}' character. For example,


    ```java

    MessageFormatter.format("Set \\{} is not equal to {}.", "1,2");

    ```


    will return the string "Set \{\} is not equal to 1,2.".


    The escaping behavior just described can be overridden by escaping the escape character '\\'. Calling


    ```java

    MessageFormatter.format("File name is C:\\\\{}.", "file.zip");

    ```


    will return the string "File name is C:\\file.zip".


    The formatting conventions are different than those of <xref uid="" data-throw-if-not-resolved="false">MessageFormat</xref> which ships with the Java platform. This is justified by the fact that SLF4J's implementation is 10 times faster than that of <xref uid="" data-throw-if-not-resolved="false">MessageFormat</xref>. This local performance difference is both measurable and significant in the larger context of the complete logging processing chain.


    See also <xref uid="org.slf4j.helpers.MessageFormatter.format(java.lang.String,java.lang.Object)" data-throw-if-not-resolved="false">#format(String, Object)</xref>, <xref uid="org.slf4j.helpers.MessageFormatter.format(java.lang.String,java.lang.Object,java.lang.Object)" data-throw-if-not-resolved="false">#format(String, Object, Object)</xref> and <xref uid="org.slf4j.helpers.MessageFormatter.arrayFormat(java.lang.String,java.lang.Object[])" data-throw-if-not-resolved="false">#arrayFormat(String, Object[])</xref> methods for more details.
  syntax:
    content: public final class MessageFormatter
  inheritance:
  - java.lang.Object
  inheritedMembers:
  - java.lang.Object.clone()
  - java.lang.Object.equals(java.lang.Object)
  - java.lang.Object.finalize()
  - java.lang.Object.getClass()
  - java.lang.Object.hashCode()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.toString()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
- uid: org.slf4j.helpers.MessageFormatter.MessageFormatter()
  id: MessageFormatter()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.slf4j.helpers.MessageFormatter
  langs:
  - java
  name: MessageFormatter()
  nameWithType: MessageFormatter.MessageFormatter()
  fullName: org.slf4j.helpers.MessageFormatter.MessageFormatter()
  overload: org.slf4j.helpers.MessageFormatter.MessageFormatter*
  type: Constructor
  package: org.slf4j.helpers
  syntax:
    content: public MessageFormatter()
- uid: org.slf4j.helpers.MessageFormatter.arrayFormat(java.lang.String,java.lang.Object[])
  id: arrayFormat(java.lang.String,java.lang.Object[])
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.slf4j.helpers.MessageFormatter
  langs:
  - java
  name: arrayFormat(String messagePattern, Object[] argArray)
  nameWithType: MessageFormatter.arrayFormat(String messagePattern, Object[] argArray)
  fullName: org.slf4j.helpers.MessageFormatter.arrayFormat(String messagePattern, Object[] argArray)
  overload: org.slf4j.helpers.MessageFormatter.arrayFormat*
  type: Method
  package: org.slf4j.helpers
  syntax:
    content: public static final FormattingTuple arrayFormat(String messagePattern, Object[] argArray)
    parameters:
    - id: messagePattern
      type: java.lang.String
    - id: argArray
      type: java.lang.Object[]
    return:
      type: org.slf4j.helpers.FormattingTuple
- uid: org.slf4j.helpers.MessageFormatter.arrayFormat(java.lang.String,java.lang.Object[],java.lang.Throwable)
  id: arrayFormat(java.lang.String,java.lang.Object[],java.lang.Throwable)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.slf4j.helpers.MessageFormatter
  langs:
  - java
  name: arrayFormat(String messagePattern, Object[] argArray, Throwable throwable)
  nameWithType: MessageFormatter.arrayFormat(String messagePattern, Object[] argArray, Throwable throwable)
  fullName: org.slf4j.helpers.MessageFormatter.arrayFormat(String messagePattern, Object[] argArray, Throwable throwable)
  overload: org.slf4j.helpers.MessageFormatter.arrayFormat*
  type: Method
  package: org.slf4j.helpers
  syntax:
    content: public static final FormattingTuple arrayFormat(String messagePattern, Object[] argArray, Throwable throwable)
    parameters:
    - id: messagePattern
      type: java.lang.String
    - id: argArray
      type: java.lang.Object[]
    - id: throwable
      type: java.lang.Throwable
    return:
      type: org.slf4j.helpers.FormattingTuple
- uid: org.slf4j.helpers.MessageFormatter.format(java.lang.String,java.lang.Object)
  id: format(java.lang.String,java.lang.Object)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.slf4j.helpers.MessageFormatter
  langs:
  - java
  name: format(String messagePattern, Object arg)
  nameWithType: MessageFormatter.format(String messagePattern, Object arg)
  fullName: org.slf4j.helpers.MessageFormatter.format(String messagePattern, Object arg)
  overload: org.slf4j.helpers.MessageFormatter.format*
  type: Method
  package: org.slf4j.helpers
  summary: >-
    Performs single argument substitution for the 'messagePattern' passed as parameter.


    For example,


    ```java

    MessageFormatter.format("Hi {}.", "there");

    ```


    will return the string "Hi there.".
  syntax:
    content: public static final FormattingTuple format(String messagePattern, Object arg)
    parameters:
    - id: messagePattern
      type: java.lang.String
      description: The message pattern which will be parsed and formatted
    - id: arg
      type: java.lang.Object
      description: The argument to be substituted in place of the formatting anchor
    return:
      type: org.slf4j.helpers.FormattingTuple
      description: The formatted message
- uid: org.slf4j.helpers.MessageFormatter.format(java.lang.String,java.lang.Object,java.lang.Object)
  id: format(java.lang.String,java.lang.Object,java.lang.Object)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.slf4j.helpers.MessageFormatter
  langs:
  - java
  name: format(String messagePattern, Object arg1, Object arg2)
  nameWithType: MessageFormatter.format(String messagePattern, Object arg1, Object arg2)
  fullName: org.slf4j.helpers.MessageFormatter.format(String messagePattern, Object arg1, Object arg2)
  overload: org.slf4j.helpers.MessageFormatter.format*
  type: Method
  package: org.slf4j.helpers
  summary: >-
    Performs a two argument substitution for the 'messagePattern' passed as parameter.


    For example,


    ```java

    MessageFormatter.format("Hi {}. My name is {}.", "Alice", "Bob");

    ```


    will return the string "Hi Alice. My name is Bob.".
  syntax:
    content: public static final FormattingTuple format(String messagePattern, Object arg1, Object arg2)
    parameters:
    - id: messagePattern
      type: java.lang.String
      description: The message pattern which will be parsed and formatted
    - id: arg1
      type: java.lang.Object
      description: >-
        The argument to be substituted in place of the first formatting
                  anchor
    - id: arg2
      type: java.lang.Object
      description: >-
        The argument to be substituted in place of the second formatting
                  anchor
    return:
      type: org.slf4j.helpers.FormattingTuple
      description: The formatted message
references:
- uid: org.slf4j.helpers.MessageFormatter.MessageFormatter*
  name: MessageFormatter
  nameWithType: MessageFormatter.MessageFormatter
  fullName: org.slf4j.helpers.MessageFormatter.MessageFormatter
  package: org.slf4j.helpers
- uid: java.lang.String
  spec.java:
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
- uid: java.lang.Object
  spec.java:
  - uid: java.lang.Object
    name: Object
    fullName: java.lang.Object
- uid: org.slf4j.helpers.FormattingTuple
  name: FormattingTuple
  nameWithType: FormattingTuple
  fullName: org.slf4j.helpers.FormattingTuple
- uid: org.slf4j.helpers.MessageFormatter.format*
  name: format
  nameWithType: MessageFormatter.format
  fullName: org.slf4j.helpers.MessageFormatter.format
  package: org.slf4j.helpers
- uid: java.lang.Object[]
  spec.java:
  - uid: java.lang.Object
    name: Object
    fullName: java.lang.Object
  - name: '[]'
    fullName: '[]'
- uid: org.slf4j.helpers.MessageFormatter.arrayFormat*
  name: arrayFormat
  nameWithType: MessageFormatter.arrayFormat
  fullName: org.slf4j.helpers.MessageFormatter.arrayFormat
  package: org.slf4j.helpers
- uid: java.lang.Throwable
  spec.java:
  - uid: java.lang.Throwable
    name: Throwable
    fullName: java.lang.Throwable
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: java.lang.Object.finalize()
  name: Object.finalize()
  nameWithType: Object.finalize()
  fullName: java.lang.Object.finalize()
- uid: java.lang.Object.clone()
  name: Object.clone()
  nameWithType: Object.clone()
  fullName: java.lang.Object.clone()
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: java.lang.Object.equals(java.lang.Object)
  name: Object.equals(Object)
  nameWithType: Object.equals(Object)
  fullName: java.lang.Object.equals(java.lang.Object)
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.lang.Object.hashCode()
  name: Object.hashCode()
  nameWithType: Object.hashCode()
  fullName: java.lang.Object.hashCode()
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: java.lang.Object.toString()
  name: Object.toString()
  nameWithType: Object.toString()
  fullName: java.lang.Object.toString()
