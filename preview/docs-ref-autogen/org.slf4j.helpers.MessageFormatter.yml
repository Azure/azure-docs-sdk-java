### YamlMime:JavaType
uid: "org.slf4j.helpers.MessageFormatter"
fullName: "org.slf4j.helpers.MessageFormatter"
name: "MessageFormatter"
nameWithType: "MessageFormatter"
summary: "Formats messages according to very simple substitution rules. Substitutions can be made 1, 2 or more arguments.\n\nFor example,\n\n```java\nMessageFormatter.format(\"Hi {}.\", \"there\")\n```\n\nwill return the string \"Hi there.\".\n\nThe \\{\\} pair is called the *formatting anchor*. It serves to designate the location where arguments need to be substituted within the message pattern.\n\nIn case your message contains the '\\{' or the '\\}' character, you do not have to do anything special unless the '\\}' character immediately follows '\\{'. For example,\n\n```java\nMessageFormatter.format(\"Set {1,2,3} is not equal to {}.\", \"1,2\");\n```\n\nwill return the string \"Set \\{1,2,3\\} is not equal to 1,2.\".\n\nIf for whatever reason you need to place the string \"\\{\\}\" in the message without its *formatting anchor* meaning, then you need to escape the '\\{' character with '\\\\', that is the backslash character. Only the '\\{' character should be escaped. There is no need to escape the '\\}' character. For example,\n\n```java\nMessageFormatter.format(\"Set \\\\{} is not equal to {}.\", \"1,2\");\n```\n\nwill return the string \"Set \\{\\} is not equal to 1,2.\".\n\nThe escaping behavior just described can be overridden by escaping the escape character '\\\\'. Calling\n\n```java\nMessageFormatter.format(\"File name is C:\\\\\\\\{}.\", \"file.zip\");\n```\n\nwill return the string \"File name is C:\\\\file.zip\".\n\nThe formatting conventions are different than those of <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"MessageFormat\"></xref> which ships with the Java platform. This is justified by the fact that SLF4J's implementation is 10 times faster than that of <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"MessageFormat\"></xref>. This local performance difference is both measurable and significant in the larger context of the complete logging processing chain.\n\nSee also <xref uid=\"org.slf4j.helpers.MessageFormatter.format(java.lang.String,java.lang.Object)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#format(String, Object)\"></xref>, <xref uid=\"org.slf4j.helpers.MessageFormatter.format(java.lang.String,java.lang.Object,java.lang.Object)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#format(String, Object, Object)\"></xref> and <xref uid=\"org.slf4j.helpers.MessageFormatter.arrayFormat(java.lang.String,java.lang.Object[])\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#arrayFormat(String, Object[])\"></xref> methods for more details."
inheritances:
- "<xref href=\"java.lang.Object\" data-throw-if-not-resolved=\"False\" />"
inheritedMembers:
- "java.lang.Object.clone()"
- "java.lang.Object.equals(java.lang.Object)"
- "java.lang.Object.finalize()"
- "java.lang.Object.getClass()"
- "java.lang.Object.hashCode()"
- "java.lang.Object.notify()"
- "java.lang.Object.notifyAll()"
- "java.lang.Object.toString()"
- "java.lang.Object.wait()"
- "java.lang.Object.wait(long)"
- "java.lang.Object.wait(long,int)"
syntax: "public final class MessageFormatter"
constructors:
- "org.slf4j.helpers.MessageFormatter.MessageFormatter()"
methods:
- "org.slf4j.helpers.MessageFormatter.arrayFormat(java.lang.String,java.lang.Object[])"
- "org.slf4j.helpers.MessageFormatter.arrayFormat(java.lang.String,java.lang.Object[],java.lang.Throwable)"
- "org.slf4j.helpers.MessageFormatter.format(java.lang.String,java.lang.Object)"
- "org.slf4j.helpers.MessageFormatter.format(java.lang.String,java.lang.Object,java.lang.Object)"
type: "class"
metadata: {}
package: "org.slf4j.helpers"
artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
