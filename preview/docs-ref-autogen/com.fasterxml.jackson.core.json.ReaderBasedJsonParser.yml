### YamlMime:JavaType
uid: "com.fasterxml.jackson.core.json.ReaderBasedJsonParser"
fullName: "com.fasterxml.jackson.core.json.ReaderBasedJsonParser"
name: "ReaderBasedJsonParser"
nameWithType: "ReaderBasedJsonParser"
summary: "This is a concrete implementation of <xref uid=\"com.fasterxml.jackson.core.JsonParser\" data-throw-if-not-resolved=\"false\" data-raw-source=\"JsonParser\"></xref>, which is based on a <xref uid=\"java.io.Reader\" data-throw-if-not-resolved=\"false\" data-raw-source=\"java.io.Reader\"></xref> to handle low-level character conversion tasks."
inheritances:
- "<xref href=\"java.lang.Object\" data-throw-if-not-resolved=\"False\" />"
- "<xref href=\"com.fasterxml.jackson.core.JsonParser\" data-throw-if-not-resolved=\"False\" />"
- "<xref href=\"com.fasterxml.jackson.core.base.ParserMinimalBase\" data-throw-if-not-resolved=\"False\" />"
- "<xref href=\"com.fasterxml.jackson.core.base.ParserBase\" data-throw-if-not-resolved=\"False\" />"
inheritedMembers:
- "com.fasterxml.jackson.core.JsonParser.<T>readValueAs(com.fasterxml.jackson.core.type.TypeReference<?>)"
- "com.fasterxml.jackson.core.JsonParser.<T>readValueAs(java.lang.Class<T>)"
- "com.fasterxml.jackson.core.JsonParser.<T>readValueAsTree()"
- "com.fasterxml.jackson.core.JsonParser.<T>readValuesAs(com.fasterxml.jackson.core.type.TypeReference<T>)"
- "com.fasterxml.jackson.core.JsonParser.<T>readValuesAs(java.lang.Class<T>)"
- "com.fasterxml.jackson.core.JsonParser._codec()"
- "com.fasterxml.jackson.core.JsonParser._constructError(java.lang.String)"
- "com.fasterxml.jackson.core.JsonParser._reportUnsupportedOperation()"
- "com.fasterxml.jackson.core.JsonParser.canParseAsync()"
- "com.fasterxml.jackson.core.JsonParser.canReadObjectId()"
- "com.fasterxml.jackson.core.JsonParser.canReadTypeId()"
- "com.fasterxml.jackson.core.JsonParser.canUseSchema(com.fasterxml.jackson.core.FormatSchema)"
- "com.fasterxml.jackson.core.JsonParser.configure(com.fasterxml.jackson.core.JsonParser.Feature,boolean)"
- "com.fasterxml.jackson.core.JsonParser.currentName()"
- "com.fasterxml.jackson.core.JsonParser.finishToken()"
- "com.fasterxml.jackson.core.JsonParser.getBinaryValue()"
- "com.fasterxml.jackson.core.JsonParser.getBooleanValue()"
- "com.fasterxml.jackson.core.JsonParser.getByteValue()"
- "com.fasterxml.jackson.core.JsonParser.getCodec()"
- "com.fasterxml.jackson.core.JsonParser.getEmbeddedObject()"
- "com.fasterxml.jackson.core.JsonParser.getFeatureMask()"
- "com.fasterxml.jackson.core.JsonParser.getFormatFeatures()"
- "com.fasterxml.jackson.core.JsonParser.getInputSource()"
- "com.fasterxml.jackson.core.JsonParser.getNonBlockingInputFeeder()"
- "com.fasterxml.jackson.core.JsonParser.getObjectId()"
- "com.fasterxml.jackson.core.JsonParser.getSchema()"
- "com.fasterxml.jackson.core.JsonParser.getShortValue()"
- "com.fasterxml.jackson.core.JsonParser.getText(java.io.Writer)"
- "com.fasterxml.jackson.core.JsonParser.getTypeId()"
- "com.fasterxml.jackson.core.JsonParser.getValueAsBoolean()"
- "com.fasterxml.jackson.core.JsonParser.getValueAsDouble()"
- "com.fasterxml.jackson.core.JsonParser.isEnabled(com.fasterxml.jackson.core.JsonParser.Feature)"
- "com.fasterxml.jackson.core.JsonParser.isEnabled(com.fasterxml.jackson.core.StreamReadFeature)"
- "com.fasterxml.jackson.core.JsonParser.nextBooleanValue()"
- "com.fasterxml.jackson.core.JsonParser.nextFieldName()"
- "com.fasterxml.jackson.core.JsonParser.nextFieldName(com.fasterxml.jackson.core.SerializableString)"
- "com.fasterxml.jackson.core.JsonParser.nextIntValue(int)"
- "com.fasterxml.jackson.core.JsonParser.nextLongValue(long)"
- "com.fasterxml.jackson.core.JsonParser.nextTextValue()"
- "com.fasterxml.jackson.core.JsonParser.overrideFormatFeatures(int,int)"
- "com.fasterxml.jackson.core.JsonParser.readBinaryValue(com.fasterxml.jackson.core.Base64Variant,java.io.OutputStream)"
- "com.fasterxml.jackson.core.JsonParser.readBinaryValue(java.io.OutputStream)"
- "com.fasterxml.jackson.core.JsonParser.releaseBuffered(java.io.OutputStream)"
- "com.fasterxml.jackson.core.JsonParser.releaseBuffered(java.io.Writer)"
- "com.fasterxml.jackson.core.JsonParser.requiresCustomCodec()"
- "com.fasterxml.jackson.core.JsonParser.setCodec(com.fasterxml.jackson.core.ObjectCodec)"
- "com.fasterxml.jackson.core.JsonParser.setRequestPayloadOnError(byte[],java.lang.String)"
- "com.fasterxml.jackson.core.JsonParser.setRequestPayloadOnError(com.fasterxml.jackson.core.util.RequestPayload)"
- "com.fasterxml.jackson.core.JsonParser.setRequestPayloadOnError(java.lang.String)"
- "com.fasterxml.jackson.core.JsonParser.setSchema(com.fasterxml.jackson.core.FormatSchema)"
- "com.fasterxml.jackson.core.base.ParserBase._checkStdFeatureChanges(int,int)"
- "com.fasterxml.jackson.core.base.ParserBase._closeInput()"
- "com.fasterxml.jackson.core.base.ParserBase._decodeBase64Escape(com.fasterxml.jackson.core.Base64Variant,char,int)"
- "com.fasterxml.jackson.core.base.ParserBase._decodeBase64Escape(com.fasterxml.jackson.core.Base64Variant,int,int)"
- "com.fasterxml.jackson.core.base.ParserBase._decodeEscaped()"
- "com.fasterxml.jackson.core.base.ParserBase._eofAsNextChar()"
- "com.fasterxml.jackson.core.base.ParserBase._finishString()"
- "com.fasterxml.jackson.core.base.ParserBase._getByteArrayBuilder()"
- "com.fasterxml.jackson.core.base.ParserBase._getSourceReference()"
- "com.fasterxml.jackson.core.base.ParserBase._handleBase64MissingPadding(com.fasterxml.jackson.core.Base64Variant)"
- "com.fasterxml.jackson.core.base.ParserBase._handleEOF()"
- "com.fasterxml.jackson.core.base.ParserBase._handleUnrecognizedCharacterEscape(char)"
- "com.fasterxml.jackson.core.base.ParserBase._parseIntValue()"
- "com.fasterxml.jackson.core.base.ParserBase._parseNumericValue(int)"
- "com.fasterxml.jackson.core.base.ParserBase._releaseBuffers()"
- "com.fasterxml.jackson.core.base.ParserBase._reportMismatchedEndMarker(int,char)"
- "com.fasterxml.jackson.core.base.ParserBase._reportTooLongIntegral(int,java.lang.String)"
- "com.fasterxml.jackson.core.base.ParserBase._throwUnquotedSpace(int,java.lang.String)"
- "com.fasterxml.jackson.core.base.ParserBase._validJsonTokenList()"
- "com.fasterxml.jackson.core.base.ParserBase._validJsonValueList()"
- "com.fasterxml.jackson.core.base.ParserBase.close()"
- "com.fasterxml.jackson.core.base.ParserBase.convertNumberToBigDecimal()"
- "com.fasterxml.jackson.core.base.ParserBase.convertNumberToBigInteger()"
- "com.fasterxml.jackson.core.base.ParserBase.convertNumberToDouble()"
- "com.fasterxml.jackson.core.base.ParserBase.convertNumberToInt()"
- "com.fasterxml.jackson.core.base.ParserBase.convertNumberToLong()"
- "com.fasterxml.jackson.core.base.ParserBase.disable(com.fasterxml.jackson.core.JsonParser.Feature)"
- "com.fasterxml.jackson.core.base.ParserBase.enable(com.fasterxml.jackson.core.JsonParser.Feature)"
- "com.fasterxml.jackson.core.base.ParserBase.getBigIntegerValue()"
- "com.fasterxml.jackson.core.base.ParserBase.getBinaryValue(com.fasterxml.jackson.core.Base64Variant)"
- "com.fasterxml.jackson.core.base.ParserBase.getCurrentLocation()"
- "com.fasterxml.jackson.core.base.ParserBase.getCurrentName()"
- "com.fasterxml.jackson.core.base.ParserBase.getCurrentValue()"
- "com.fasterxml.jackson.core.base.ParserBase.getDecimalValue()"
- "com.fasterxml.jackson.core.base.ParserBase.getDoubleValue()"
- "com.fasterxml.jackson.core.base.ParserBase.getFloatValue()"
- "com.fasterxml.jackson.core.base.ParserBase.getIntValue()"
- "com.fasterxml.jackson.core.base.ParserBase.getLongValue()"
- "com.fasterxml.jackson.core.base.ParserBase.getNumberType()"
- "com.fasterxml.jackson.core.base.ParserBase.getNumberValue()"
- "com.fasterxml.jackson.core.base.ParserBase.getParsingContext()"
- "com.fasterxml.jackson.core.base.ParserBase.getTokenCharacterOffset()"
- "com.fasterxml.jackson.core.base.ParserBase.getTokenColumnNr()"
- "com.fasterxml.jackson.core.base.ParserBase.getTokenLineNr()"
- "com.fasterxml.jackson.core.base.ParserBase.getTokenLocation()"
- "com.fasterxml.jackson.core.base.ParserBase.growArrayBy(int[],int)"
- "com.fasterxml.jackson.core.base.ParserBase.hasTextCharacters()"
- "com.fasterxml.jackson.core.base.ParserBase.isClosed()"
- "com.fasterxml.jackson.core.base.ParserBase.isNaN()"
- "com.fasterxml.jackson.core.base.ParserBase.loadMore()"
- "com.fasterxml.jackson.core.base.ParserBase.loadMoreGuaranteed()"
- "com.fasterxml.jackson.core.base.ParserBase.overrideCurrentName(java.lang.String)"
- "com.fasterxml.jackson.core.base.ParserBase.overrideStdFeatures(int,int)"
- "com.fasterxml.jackson.core.base.ParserBase.reportInvalidBase64Char(com.fasterxml.jackson.core.Base64Variant,int,int)"
- "com.fasterxml.jackson.core.base.ParserBase.reportInvalidBase64Char(com.fasterxml.jackson.core.Base64Variant,int,int,java.lang.String)"
- "com.fasterxml.jackson.core.base.ParserBase.reset(boolean,int,int,int)"
- "com.fasterxml.jackson.core.base.ParserBase.resetAsNaN(java.lang.String,double)"
- "com.fasterxml.jackson.core.base.ParserBase.resetFloat(boolean,int,int,int)"
- "com.fasterxml.jackson.core.base.ParserBase.resetInt(boolean,int)"
- "com.fasterxml.jackson.core.base.ParserBase.setCurrentValue(java.lang.Object)"
- "com.fasterxml.jackson.core.base.ParserBase.setFeatureMask(int)"
- "com.fasterxml.jackson.core.base.ParserBase.version()"
- "com.fasterxml.jackson.core.base.ParserMinimalBase._ascii(byte[])"
- "com.fasterxml.jackson.core.base.ParserMinimalBase._asciiBytes(java.lang.String)"
- "com.fasterxml.jackson.core.base.ParserMinimalBase._constructError(java.lang.String,java.lang.Throwable)"
- "com.fasterxml.jackson.core.base.ParserMinimalBase._decodeBase64(java.lang.String,com.fasterxml.jackson.core.util.ByteArrayBuilder,com.fasterxml.jackson.core.Base64Variant)"
- "com.fasterxml.jackson.core.base.ParserMinimalBase._getCharDesc(int)"
- "com.fasterxml.jackson.core.base.ParserMinimalBase._hasTextualNull(java.lang.String)"
- "com.fasterxml.jackson.core.base.ParserMinimalBase._longIntegerDesc(java.lang.String)"
- "com.fasterxml.jackson.core.base.ParserMinimalBase._longNumberDesc(java.lang.String)"
- "com.fasterxml.jackson.core.base.ParserMinimalBase._reportError(java.lang.String)"
- "com.fasterxml.jackson.core.base.ParserMinimalBase._reportError(java.lang.String,java.lang.Object)"
- "com.fasterxml.jackson.core.base.ParserMinimalBase._reportError(java.lang.String,java.lang.Object,java.lang.Object)"
- "com.fasterxml.jackson.core.base.ParserMinimalBase._reportInputCoercion(java.lang.String,com.fasterxml.jackson.core.JsonToken,java.lang.Class<?>)"
- "com.fasterxml.jackson.core.base.ParserMinimalBase._reportInvalidEOF()"
- "com.fasterxml.jackson.core.base.ParserMinimalBase._reportInvalidEOF(java.lang.String)"
- "com.fasterxml.jackson.core.base.ParserMinimalBase._reportInvalidEOF(java.lang.String,com.fasterxml.jackson.core.JsonToken)"
- "com.fasterxml.jackson.core.base.ParserMinimalBase._reportInvalidEOFInValue()"
- "com.fasterxml.jackson.core.base.ParserMinimalBase._reportInvalidEOFInValue(com.fasterxml.jackson.core.JsonToken)"
- "com.fasterxml.jackson.core.base.ParserMinimalBase._reportMissingRootWS(int)"
- "com.fasterxml.jackson.core.base.ParserMinimalBase._reportUnexpectedChar(int,java.lang.String)"
- "com.fasterxml.jackson.core.base.ParserMinimalBase._throwInternal()"
- "com.fasterxml.jackson.core.base.ParserMinimalBase._throwInvalidSpace(int)"
- "com.fasterxml.jackson.core.base.ParserMinimalBase._wrapError(java.lang.String,java.lang.Throwable)"
- "com.fasterxml.jackson.core.base.ParserMinimalBase.clearCurrentToken()"
- "com.fasterxml.jackson.core.base.ParserMinimalBase.currentToken()"
- "com.fasterxml.jackson.core.base.ParserMinimalBase.currentTokenId()"
- "com.fasterxml.jackson.core.base.ParserMinimalBase.getCurrentToken()"
- "com.fasterxml.jackson.core.base.ParserMinimalBase.getCurrentTokenId()"
- "com.fasterxml.jackson.core.base.ParserMinimalBase.getLastClearedToken()"
- "com.fasterxml.jackson.core.base.ParserMinimalBase.getText()"
- "com.fasterxml.jackson.core.base.ParserMinimalBase.getTextCharacters()"
- "com.fasterxml.jackson.core.base.ParserMinimalBase.getTextLength()"
- "com.fasterxml.jackson.core.base.ParserMinimalBase.getTextOffset()"
- "com.fasterxml.jackson.core.base.ParserMinimalBase.getValueAsBoolean(boolean)"
- "com.fasterxml.jackson.core.base.ParserMinimalBase.getValueAsDouble(double)"
- "com.fasterxml.jackson.core.base.ParserMinimalBase.getValueAsInt()"
- "com.fasterxml.jackson.core.base.ParserMinimalBase.getValueAsInt(int)"
- "com.fasterxml.jackson.core.base.ParserMinimalBase.getValueAsLong()"
- "com.fasterxml.jackson.core.base.ParserMinimalBase.getValueAsLong(long)"
- "com.fasterxml.jackson.core.base.ParserMinimalBase.getValueAsString()"
- "com.fasterxml.jackson.core.base.ParserMinimalBase.getValueAsString(java.lang.String)"
- "com.fasterxml.jackson.core.base.ParserMinimalBase.hasCurrentToken()"
- "com.fasterxml.jackson.core.base.ParserMinimalBase.hasToken(com.fasterxml.jackson.core.JsonToken)"
- "com.fasterxml.jackson.core.base.ParserMinimalBase.hasTokenId(int)"
- "com.fasterxml.jackson.core.base.ParserMinimalBase.isExpectedStartArrayToken()"
- "com.fasterxml.jackson.core.base.ParserMinimalBase.isExpectedStartObjectToken()"
- "com.fasterxml.jackson.core.base.ParserMinimalBase.nextToken()"
- "com.fasterxml.jackson.core.base.ParserMinimalBase.nextValue()"
- "com.fasterxml.jackson.core.base.ParserMinimalBase.reportInvalidNumber(java.lang.String)"
- "com.fasterxml.jackson.core.base.ParserMinimalBase.reportOverflowInt()"
- "com.fasterxml.jackson.core.base.ParserMinimalBase.reportOverflowInt(java.lang.String)"
- "com.fasterxml.jackson.core.base.ParserMinimalBase.reportOverflowInt(java.lang.String,com.fasterxml.jackson.core.JsonToken)"
- "com.fasterxml.jackson.core.base.ParserMinimalBase.reportOverflowLong()"
- "com.fasterxml.jackson.core.base.ParserMinimalBase.reportOverflowLong(java.lang.String)"
- "com.fasterxml.jackson.core.base.ParserMinimalBase.reportOverflowLong(java.lang.String,com.fasterxml.jackson.core.JsonToken)"
- "com.fasterxml.jackson.core.base.ParserMinimalBase.reportUnexpectedNumberChar(int,java.lang.String)"
- "com.fasterxml.jackson.core.base.ParserMinimalBase.skipChildren()"
- "java.lang.Object.clone()"
- "java.lang.Object.equals(java.lang.Object)"
- "java.lang.Object.finalize()"
- "java.lang.Object.getClass()"
- "java.lang.Object.hashCode()"
- "java.lang.Object.notify()"
- "java.lang.Object.notifyAll()"
- "java.lang.Object.toString()"
- "java.lang.Object.wait()"
- "java.lang.Object.wait(long)"
- "java.lang.Object.wait(long,int)"
syntax: "public class ReaderBasedJsonParser extends ParserBase"
constructors:
- "com.fasterxml.jackson.core.json.ReaderBasedJsonParser.ReaderBasedJsonParser(com.fasterxml.jackson.core.io.IOContext,int,java.io.Reader,com.fasterxml.jackson.core.ObjectCodec,com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer)"
- "com.fasterxml.jackson.core.json.ReaderBasedJsonParser.ReaderBasedJsonParser(com.fasterxml.jackson.core.io.IOContext,int,java.io.Reader,com.fasterxml.jackson.core.ObjectCodec,com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer,char[],int,int,boolean)"
fields:
- "com.fasterxml.jackson.core.json.ReaderBasedJsonParser._bufferRecyclable"
- "com.fasterxml.jackson.core.json.ReaderBasedJsonParser._hashSeed"
- "com.fasterxml.jackson.core.json.ReaderBasedJsonParser._icLatin1"
- "com.fasterxml.jackson.core.json.ReaderBasedJsonParser._inputBuffer"
- "com.fasterxml.jackson.core.json.ReaderBasedJsonParser._nameStartCol"
- "com.fasterxml.jackson.core.json.ReaderBasedJsonParser._nameStartOffset"
- "com.fasterxml.jackson.core.json.ReaderBasedJsonParser._nameStartRow"
- "com.fasterxml.jackson.core.json.ReaderBasedJsonParser._objectCodec"
- "com.fasterxml.jackson.core.json.ReaderBasedJsonParser._reader"
- "com.fasterxml.jackson.core.json.ReaderBasedJsonParser._symbols"
- "com.fasterxml.jackson.core.json.ReaderBasedJsonParser._tokenIncomplete"
methods:
- "com.fasterxml.jackson.core.json.ReaderBasedJsonParser._closeInput()"
- "com.fasterxml.jackson.core.json.ReaderBasedJsonParser._decodeBase64(com.fasterxml.jackson.core.Base64Variant)"
- "com.fasterxml.jackson.core.json.ReaderBasedJsonParser._decodeEscaped()"
- "com.fasterxml.jackson.core.json.ReaderBasedJsonParser._finishString()"
- "com.fasterxml.jackson.core.json.ReaderBasedJsonParser._finishString2()"
- "com.fasterxml.jackson.core.json.ReaderBasedJsonParser._getText2(com.fasterxml.jackson.core.JsonToken)"
- "com.fasterxml.jackson.core.json.ReaderBasedJsonParser._handleApos()"
- "com.fasterxml.jackson.core.json.ReaderBasedJsonParser._handleInvalidNumberStart(int,boolean)"
- "com.fasterxml.jackson.core.json.ReaderBasedJsonParser._handleOddName(int)"
- "com.fasterxml.jackson.core.json.ReaderBasedJsonParser._handleOddValue(int)"
- "com.fasterxml.jackson.core.json.ReaderBasedJsonParser._isNextTokenNameMaybe(int,java.lang.String)"
- "com.fasterxml.jackson.core.json.ReaderBasedJsonParser._loadMore()"
- "com.fasterxml.jackson.core.json.ReaderBasedJsonParser._loadMoreGuaranteed()"
- "com.fasterxml.jackson.core.json.ReaderBasedJsonParser._matchToken(java.lang.String,int)"
- "com.fasterxml.jackson.core.json.ReaderBasedJsonParser._parseAposName()"
- "com.fasterxml.jackson.core.json.ReaderBasedJsonParser._parseFloatThatStartsWithPeriod()"
- "com.fasterxml.jackson.core.json.ReaderBasedJsonParser._parseName()"
- "com.fasterxml.jackson.core.json.ReaderBasedJsonParser._parseNegNumber()"
- "com.fasterxml.jackson.core.json.ReaderBasedJsonParser._parsePosNumber(int)"
- "com.fasterxml.jackson.core.json.ReaderBasedJsonParser._readBinary(com.fasterxml.jackson.core.Base64Variant,java.io.OutputStream,byte[])"
- "com.fasterxml.jackson.core.json.ReaderBasedJsonParser._releaseBuffers()"
- "com.fasterxml.jackson.core.json.ReaderBasedJsonParser._reportInvalidToken(java.lang.String)"
- "com.fasterxml.jackson.core.json.ReaderBasedJsonParser._reportInvalidToken(java.lang.String,java.lang.String)"
- "com.fasterxml.jackson.core.json.ReaderBasedJsonParser._skipCR()"
- "com.fasterxml.jackson.core.json.ReaderBasedJsonParser._skipString()"
- "com.fasterxml.jackson.core.json.ReaderBasedJsonParser.finishToken()"
- "com.fasterxml.jackson.core.json.ReaderBasedJsonParser.getBinaryValue(com.fasterxml.jackson.core.Base64Variant)"
- "com.fasterxml.jackson.core.json.ReaderBasedJsonParser.getCodec()"
- "com.fasterxml.jackson.core.json.ReaderBasedJsonParser.getCurrentLocation()"
- "com.fasterxml.jackson.core.json.ReaderBasedJsonParser.getInputSource()"
- "com.fasterxml.jackson.core.json.ReaderBasedJsonParser.getNextChar(java.lang.String)"
- "com.fasterxml.jackson.core.json.ReaderBasedJsonParser.getNextChar(java.lang.String,com.fasterxml.jackson.core.JsonToken)"
- "com.fasterxml.jackson.core.json.ReaderBasedJsonParser.getText()"
- "com.fasterxml.jackson.core.json.ReaderBasedJsonParser.getText(java.io.Writer)"
- "com.fasterxml.jackson.core.json.ReaderBasedJsonParser.getTextCharacters()"
- "com.fasterxml.jackson.core.json.ReaderBasedJsonParser.getTextLength()"
- "com.fasterxml.jackson.core.json.ReaderBasedJsonParser.getTextOffset()"
- "com.fasterxml.jackson.core.json.ReaderBasedJsonParser.getTokenLocation()"
- "com.fasterxml.jackson.core.json.ReaderBasedJsonParser.getValueAsString()"
- "com.fasterxml.jackson.core.json.ReaderBasedJsonParser.getValueAsString(java.lang.String)"
- "com.fasterxml.jackson.core.json.ReaderBasedJsonParser.nextBooleanValue()"
- "com.fasterxml.jackson.core.json.ReaderBasedJsonParser.nextFieldName()"
- "com.fasterxml.jackson.core.json.ReaderBasedJsonParser.nextFieldName(com.fasterxml.jackson.core.SerializableString)"
- "com.fasterxml.jackson.core.json.ReaderBasedJsonParser.nextIntValue(int)"
- "com.fasterxml.jackson.core.json.ReaderBasedJsonParser.nextLongValue(long)"
- "com.fasterxml.jackson.core.json.ReaderBasedJsonParser.nextTextValue()"
- "com.fasterxml.jackson.core.json.ReaderBasedJsonParser.nextToken()"
- "com.fasterxml.jackson.core.json.ReaderBasedJsonParser.readBinaryValue(com.fasterxml.jackson.core.Base64Variant,java.io.OutputStream)"
- "com.fasterxml.jackson.core.json.ReaderBasedJsonParser.releaseBuffered(java.io.Writer)"
- "com.fasterxml.jackson.core.json.ReaderBasedJsonParser.setCodec(com.fasterxml.jackson.core.ObjectCodec)"
type: "class"
metadata: {}
package: "com.fasterxml.jackson.core.json"
artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
