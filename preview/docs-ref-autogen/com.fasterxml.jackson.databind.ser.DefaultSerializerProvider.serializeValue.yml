### YamlMime:JavaMember
uid: "com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.serializeValue*"
fullName: "com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.serializeValue"
name: "serializeValue"
nameWithType: "DefaultSerializerProvider.serializeValue"
members:
- uid: "com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.serializeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)"
  fullName: "com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.serializeValue(JsonGenerator gen, Object value)"
  name: "serializeValue(JsonGenerator gen, Object value)"
  nameWithType: "DefaultSerializerProvider.serializeValue(JsonGenerator gen, Object value)"
  summary: "The method to be called by <xref uid=\"com.fasterxml.jackson.databind.ObjectMapper\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ObjectMapper\"></xref> and <xref uid=\"com.fasterxml.jackson.databind.ObjectWriter\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ObjectWriter\"></xref> for serializing given value, using serializers that this provider has access to (via caching and/or creating new serializers as need be)."
  parameters:
  - name: "gen"
    type: "<xref href=\"com.fasterxml.jackson.core.JsonGenerator?alt=com.fasterxml.jackson.core.JsonGenerator&text=JsonGenerator\" data-throw-if-not-resolved=\"False\" />"
  - name: "value"
    type: "<xref href=\"java.lang.Object?alt=java.lang.Object&text=Object\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public void serializeValue(JsonGenerator gen, Object value)"
  exceptions:
  - type: "<xref href=\"java.io.IOException?alt=java.io.IOException&text=IOException\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.serializeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object,com.fasterxml.jackson.databind.JavaType)"
  fullName: "com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.serializeValue(JsonGenerator gen, Object value, JavaType rootType)"
  name: "serializeValue(JsonGenerator gen, Object value, JavaType rootType)"
  nameWithType: "DefaultSerializerProvider.serializeValue(JsonGenerator gen, Object value, JavaType rootType)"
  summary: "The method to be called by <xref uid=\"com.fasterxml.jackson.databind.ObjectMapper\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ObjectMapper\"></xref> and <xref uid=\"com.fasterxml.jackson.databind.ObjectWriter\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ObjectWriter\"></xref> for serializing given value (assumed to be of specified root type, instead of runtime type of value), using serializers that this provider has access to (via caching and/or creating new serializers as need be),"
  parameters:
  - name: "gen"
    type: "<xref href=\"com.fasterxml.jackson.core.JsonGenerator?alt=com.fasterxml.jackson.core.JsonGenerator&text=JsonGenerator\" data-throw-if-not-resolved=\"False\" />"
  - name: "value"
    type: "<xref href=\"java.lang.Object?alt=java.lang.Object&text=Object\" data-throw-if-not-resolved=\"False\" />"
  - description: "Type to use for locating serializer to use, instead of actual\n    runtime type. Must be actual type, or one of its super types"
    name: "rootType"
    type: "<xref href=\"com.fasterxml.jackson.databind.JavaType?alt=com.fasterxml.jackson.databind.JavaType&text=JavaType\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public void serializeValue(JsonGenerator gen, Object value, JavaType rootType)"
  exceptions:
  - type: "<xref href=\"java.io.IOException?alt=java.io.IOException&text=IOException\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.serializeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.JsonSerializer<java.lang.Object>)"
  fullName: "com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.serializeValue(JsonGenerator gen, Object value, JavaType rootType, JsonSerializer<Object> ser)"
  name: "serializeValue(JsonGenerator gen, Object value, JavaType rootType, JsonSerializer<Object> ser)"
  nameWithType: "DefaultSerializerProvider.serializeValue(JsonGenerator gen, Object value, JavaType rootType, JsonSerializer<Object> ser)"
  summary: "The method to be called by <xref uid=\"com.fasterxml.jackson.databind.ObjectWriter\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ObjectWriter\"></xref> for serializing given value (assumed to be of specified root type, instead of runtime type of value), when it may know specific <xref uid=\"com.fasterxml.jackson.databind.JsonSerializer\" data-throw-if-not-resolved=\"false\" data-raw-source=\"JsonSerializer\"></xref> to use."
  parameters:
  - name: "gen"
    type: "<xref href=\"com.fasterxml.jackson.core.JsonGenerator?alt=com.fasterxml.jackson.core.JsonGenerator&text=JsonGenerator\" data-throw-if-not-resolved=\"False\" />"
  - name: "value"
    type: "<xref href=\"java.lang.Object?alt=java.lang.Object&text=Object\" data-throw-if-not-resolved=\"False\" />"
  - description: "Type to use for locating serializer to use, instead of actual\n    runtime type, if no serializer is passed"
    name: "rootType"
    type: "<xref href=\"com.fasterxml.jackson.databind.JavaType?alt=com.fasterxml.jackson.databind.JavaType&text=JavaType\" data-throw-if-not-resolved=\"False\" />"
  - description: "Root Serializer to use, if not null"
    name: "ser"
    type: "<xref href=\"com.fasterxml.jackson.databind.JsonSerializer?alt=com.fasterxml.jackson.databind.JsonSerializer&text=JsonSerializer\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Object?alt=java.lang.Object&text=Object\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public void serializeValue(JsonGenerator gen, Object value, JavaType rootType, JsonSerializer<Object> ser)"
  exceptions:
  - type: "<xref href=\"java.io.IOException?alt=java.io.IOException&text=IOException\" data-throw-if-not-resolved=\"False\" />"
type: "method"
metadata: {}
package: "com.fasterxml.jackson.databind.ser"
artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
