### YamlMime:JavaMember
uid: "com.azure.cosmos.implementation.guava25.base.Optional.get*"
fullName: "com.azure.cosmos.implementation.guava25.base.Optional<T>.get"
name: "get"
nameWithType: "Optional<T>.get"
members:
- uid: "com.azure.cosmos.implementation.guava25.base.Optional.get()"
  fullName: "com.azure.cosmos.implementation.guava25.base.Optional<T>.get()"
  name: "get()"
  nameWithType: "Optional<T>.get()"
  summary: "Returns the contained instance, which must be present. If the instance might be absent, use <xref uid=\"? extends com.azure.cosmos.implementation.guava25.base.Optional.or*\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#or(Object)\"></xref> or <xref uid=\"? extends com.azure.cosmos.implementation.guava25.base.Optional.orNull\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#orNull\"></xref> instead.\n\n**Comparison to `java.util.Optional`:** when the value is absent, this method throws <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"IllegalStateException\"></xref>, whereas the Java 8 counterpart throws <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"NoSuchElementException\"></xref>."
  syntax: "public abstract T get()"
  returns:
    type: "<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />"
type: "method"
metadata: {}
package: "com.azure.cosmos.implementation.guava25.base"
artifact: com.azure:azure-cosmos:4.4.0-beta.1
