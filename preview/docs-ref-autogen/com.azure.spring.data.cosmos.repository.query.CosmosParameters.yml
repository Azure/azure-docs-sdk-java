### YamlMime:ManagedReference
items:
- uid: com.azure.spring.data.cosmos.repository.query.CosmosParameters
  id: CosmosParameters
  artifact: com.azure:azure-spring-data-cosmos:3.0.0-beta.2
  parent: com.azure.spring.data.cosmos.repository.query
  children:
  - com.azure.spring.data.cosmos.repository.query.CosmosParameters.CosmosParameters(java.lang.reflect.Method)
  - com.azure.spring.data.cosmos.repository.query.CosmosParameters.createFrom(java.util.List<com.azure.spring.data.cosmos.repository.query.CosmosParameter>)
  - com.azure.spring.data.cosmos.repository.query.CosmosParameters.createParameter(org.springframework.core.MethodParameter)
  langs:
  - java
  name: CosmosParameters
  nameWithType: CosmosParameters
  fullName: com.azure.spring.data.cosmos.repository.query.CosmosParameters
  type: Class
  package: com.azure.spring.data.cosmos.repository.query
  summary: Method parameters that have to be bound to query parameters or applied to the query independently.
  syntax:
    content: public class CosmosParameters extends Parameters<CosmosParameters,CosmosParameter>
  inheritance:
  - java.lang.Object
  - org.springframework.data.repository.query.Parameters
  inheritedMembers:
  - java.lang.Object.clone()
  - java.lang.Object.equals(java.lang.Object)
  - java.lang.Object.finalize()
  - java.lang.Object.getClass()
  - java.lang.Object.hashCode()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.toString()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
  - org.springframework.data.repository.query.Parameters.createFrom(java.util.List<T>)
  - org.springframework.data.repository.query.Parameters.createParameter(org.springframework.core.MethodParameter)
  - org.springframework.data.repository.query.Parameters.getBindableParameter(int)
  - org.springframework.data.repository.query.Parameters.getBindableParameters()
  - org.springframework.data.repository.query.Parameters.getDynamicProjectionIndex()
  - org.springframework.data.repository.query.Parameters.getNumberOfParameters()
  - org.springframework.data.repository.query.Parameters.getPageableIndex()
  - org.springframework.data.repository.query.Parameters.getParameter(int)
  - org.springframework.data.repository.query.Parameters.getSortIndex()
  - org.springframework.data.repository.query.Parameters.hasDynamicProjection()
  - org.springframework.data.repository.query.Parameters.hasPageableParameter()
  - org.springframework.data.repository.query.Parameters.hasParameterAt(int)
  - org.springframework.data.repository.query.Parameters.hasSortParameter()
  - org.springframework.data.repository.query.Parameters.hasSpecialParameter()
  - org.springframework.data.repository.query.Parameters.isBindable(java.lang.Class<?>)
  - org.springframework.data.repository.query.Parameters.iterator()
  - org.springframework.data.repository.query.Parameters.potentiallySortsDynamically()
- uid: com.azure.spring.data.cosmos.repository.query.CosmosParameters.CosmosParameters(java.lang.reflect.Method)
  id: CosmosParameters(java.lang.reflect.Method)
  artifact: com.azure:azure-spring-data-cosmos:3.0.0-beta.2
  parent: com.azure.spring.data.cosmos.repository.query.CosmosParameters
  langs:
  - java
  name: CosmosParameters(Method method)
  nameWithType: CosmosParameters.CosmosParameters(Method method)
  fullName: com.azure.spring.data.cosmos.repository.query.CosmosParameters.CosmosParameters(Method method)
  overload: com.azure.spring.data.cosmos.repository.query.CosmosParameters.CosmosParameters*
  type: Constructor
  package: com.azure.spring.data.cosmos.repository.query
  summary: Creates a new instance of <xref uid="com.azure.spring.data.cosmos.repository.query.CosmosParameters" data-throw-if-not-resolved="false">CosmosParameters</xref>.
  syntax:
    content: public CosmosParameters(Method method)
    parameters:
    - id: method
      type: java.lang.reflect.Method
      description: must not be null.
- uid: com.azure.spring.data.cosmos.repository.query.CosmosParameters.CosmosParameters(java.util.List<com.azure.spring.data.cosmos.repository.query.CosmosParameter>)
  id: CosmosParameters(java.util.List<com.azure.spring.data.cosmos.repository.query.CosmosParameter>)
  artifact: com.azure:azure-spring-data-cosmos:3.0.0-beta.2
  parent: com.azure.spring.data.cosmos.repository.query.CosmosParameters
  langs:
  - java
  name: CosmosParameters(List<CosmosParameter> parameters)
  nameWithType: CosmosParameters.CosmosParameters(List<CosmosParameter> parameters)
  fullName: com.azure.spring.data.cosmos.repository.query.CosmosParameters.CosmosParameters(List<CosmosParameter> parameters)
  overload: com.azure.spring.data.cosmos.repository.query.CosmosParameters.CosmosParameters*
  type: Constructor
  package: com.azure.spring.data.cosmos.repository.query
  syntax:
    content: private CosmosParameters(List<CosmosParameter> parameters)
    parameters:
    - id: parameters
      type: java.util.List<com.azure.spring.data.cosmos.repository.query.CosmosParameter>
- uid: com.azure.spring.data.cosmos.repository.query.CosmosParameters.createFrom(java.util.List<com.azure.spring.data.cosmos.repository.query.CosmosParameter>)
  id: createFrom(java.util.List<com.azure.spring.data.cosmos.repository.query.CosmosParameter>)
  artifact: com.azure:azure-spring-data-cosmos:3.0.0-beta.2
  parent: com.azure.spring.data.cosmos.repository.query.CosmosParameters
  langs:
  - java
  name: createFrom(List<CosmosParameter> parameters)
  nameWithType: CosmosParameters.createFrom(List<CosmosParameter> parameters)
  fullName: com.azure.spring.data.cosmos.repository.query.CosmosParameters.createFrom(List<CosmosParameter> parameters)
  overload: com.azure.spring.data.cosmos.repository.query.CosmosParameters.createFrom*
  type: Method
  package: com.azure.spring.data.cosmos.repository.query
  syntax:
    content: protected CosmosParameters createFrom(List<CosmosParameter> parameters)
    parameters:
    - id: parameters
      type: java.util.List<com.azure.spring.data.cosmos.repository.query.CosmosParameter>
    return:
      type: com.azure.spring.data.cosmos.repository.query.CosmosParameters
- uid: com.azure.spring.data.cosmos.repository.query.CosmosParameters.createParameter(org.springframework.core.MethodParameter)
  id: createParameter(org.springframework.core.MethodParameter)
  artifact: com.azure:azure-spring-data-cosmos:3.0.0-beta.2
  parent: com.azure.spring.data.cosmos.repository.query.CosmosParameters
  langs:
  - java
  name: createParameter(MethodParameter parameter)
  nameWithType: CosmosParameters.createParameter(MethodParameter parameter)
  fullName: com.azure.spring.data.cosmos.repository.query.CosmosParameters.createParameter(MethodParameter parameter)
  overload: com.azure.spring.data.cosmos.repository.query.CosmosParameters.createParameter*
  type: Method
  package: com.azure.spring.data.cosmos.repository.query
  syntax:
    content: protected CosmosParameter createParameter(MethodParameter parameter)
    parameters:
    - id: parameter
      type: org.springframework.core.MethodParameter
    return:
      type: com.azure.spring.data.cosmos.repository.query.CosmosParameter
references:
- uid: java.lang.reflect.Method
  spec.java:
  - uid: java.lang.reflect.Method
    name: Method
    fullName: java.lang.reflect.Method
- uid: com.azure.spring.data.cosmos.repository.query.CosmosParameters.CosmosParameters*
  name: CosmosParameters
  nameWithType: CosmosParameters.CosmosParameters
  fullName: com.azure.spring.data.cosmos.repository.query.CosmosParameters.CosmosParameters
  package: com.azure.spring.data.cosmos.repository.query
- uid: java.util.List<com.azure.spring.data.cosmos.repository.query.CosmosParameter>
  spec.java:
  - uid: java.util.List
    name: List
    fullName: java.util.List
  - name: <
    fullName: <
  - uid: com.azure.spring.data.cosmos.repository.query.CosmosParameter
    name: CosmosParameter
    fullName: com.azure.spring.data.cosmos.repository.query.CosmosParameter
  - name: '>'
    fullName: '>'
- uid: com.azure.spring.data.cosmos.repository.query.CosmosParameters.createFrom*
  name: createFrom
  nameWithType: CosmosParameters.createFrom
  fullName: com.azure.spring.data.cosmos.repository.query.CosmosParameters.createFrom
  package: com.azure.spring.data.cosmos.repository.query
- uid: org.springframework.core.MethodParameter
  spec.java:
  - uid: org.springframework.core.MethodParameter
    name: MethodParameter
    fullName: org.springframework.core.MethodParameter
- uid: com.azure.spring.data.cosmos.repository.query.CosmosParameter
  name: CosmosParameter
  nameWithType: CosmosParameter
  fullName: com.azure.spring.data.cosmos.repository.query.CosmosParameter
- uid: com.azure.spring.data.cosmos.repository.query.CosmosParameters.createParameter*
  name: createParameter
  nameWithType: CosmosParameters.createParameter
  fullName: com.azure.spring.data.cosmos.repository.query.CosmosParameters.createParameter
  package: com.azure.spring.data.cosmos.repository.query
- uid: org.springframework.data.repository.query.Parameters<com.azure.spring.data.cosmos.repository.query.CosmosParameters,com.azure.spring.data.cosmos.repository.query.CosmosParameter>
  name: Parameters<CosmosParameters,CosmosParameter>
  nameWithType: Parameters<CosmosParameters,CosmosParameter>
  fullName: org.springframework.data.repository.query.Parameters<com.azure.spring.data.cosmos.repository.query.CosmosParameters,com.azure.spring.data.cosmos.repository.query.CosmosParameter>
- uid: org.springframework.data.repository.query.Parameters.getDynamicProjectionIndex()
  name: Parameters.getDynamicProjectionIndex()
  nameWithType: Parameters.getDynamicProjectionIndex()
  fullName: org.springframework.data.repository.query.Parameters.getDynamicProjectionIndex()
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: java.lang.Object.finalize()
  name: Object.finalize()
  nameWithType: Object.finalize()
  fullName: java.lang.Object.finalize()
- uid: org.springframework.data.repository.query.Parameters.getNumberOfParameters()
  name: Parameters.getNumberOfParameters()
  nameWithType: Parameters.getNumberOfParameters()
  fullName: org.springframework.data.repository.query.Parameters.getNumberOfParameters()
- uid: java.lang.Object.clone()
  name: Object.clone()
  nameWithType: Object.clone()
  fullName: java.lang.Object.clone()
- uid: org.springframework.data.repository.query.Parameters.isBindable(java.lang.Class<?>)
  name: Parameters.isBindable(Class<?>)
  nameWithType: Parameters.isBindable(Class<?>)
  fullName: org.springframework.data.repository.query.Parameters.isBindable(java.lang.Class<?>)
- uid: org.springframework.data.repository.query.Parameters.hasDynamicProjection()
  name: Parameters.hasDynamicProjection()
  nameWithType: Parameters.hasDynamicProjection()
  fullName: org.springframework.data.repository.query.Parameters.hasDynamicProjection()
- uid: org.springframework.data.repository.query.Parameters.getPageableIndex()
  name: Parameters.getPageableIndex()
  nameWithType: Parameters.getPageableIndex()
  fullName: org.springframework.data.repository.query.Parameters.getPageableIndex()
- uid: org.springframework.data.repository.query.Parameters.hasParameterAt(int)
  name: Parameters.hasParameterAt(int)
  nameWithType: Parameters.hasParameterAt(int)
  fullName: org.springframework.data.repository.query.Parameters.hasParameterAt(int)
- uid: org.springframework.data.repository.query.Parameters.createParameter(org.springframework.core.MethodParameter)
  name: Parameters.createParameter(MethodParameter)
  nameWithType: Parameters.createParameter(MethodParameter)
  fullName: org.springframework.data.repository.query.Parameters.createParameter(org.springframework.core.MethodParameter)
- uid: org.springframework.data.repository.query.Parameters.hasSortParameter()
  name: Parameters.hasSortParameter()
  nameWithType: Parameters.hasSortParameter()
  fullName: org.springframework.data.repository.query.Parameters.hasSortParameter()
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: java.lang.Object.hashCode()
  name: Object.hashCode()
  nameWithType: Object.hashCode()
  fullName: java.lang.Object.hashCode()
- uid: org.springframework.data.repository.query.Parameters.iterator()
  name: Parameters.iterator()
  nameWithType: Parameters.iterator()
  fullName: org.springframework.data.repository.query.Parameters.iterator()
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: org.springframework.data.repository.query.Parameters.hasSpecialParameter()
  name: Parameters.hasSpecialParameter()
  nameWithType: Parameters.hasSpecialParameter()
  fullName: org.springframework.data.repository.query.Parameters.hasSpecialParameter()
- uid: org.springframework.data.repository.query.Parameters.getBindableParameters()
  name: Parameters.getBindableParameters()
  nameWithType: Parameters.getBindableParameters()
  fullName: org.springframework.data.repository.query.Parameters.getBindableParameters()
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: org.springframework.data.repository.query.Parameters.createFrom(java.util.List<T>)
  name: Parameters.createFrom(List<T>)
  nameWithType: Parameters.createFrom(List<T>)
  fullName: org.springframework.data.repository.query.Parameters.createFrom(java.util.List<T>)
- uid: org.springframework.data.repository.query.Parameters.hasPageableParameter()
  name: Parameters.hasPageableParameter()
  nameWithType: Parameters.hasPageableParameter()
  fullName: org.springframework.data.repository.query.Parameters.hasPageableParameter()
- uid: org.springframework.data.repository.query.Parameters.potentiallySortsDynamically()
  name: Parameters.potentiallySortsDynamically()
  nameWithType: Parameters.potentiallySortsDynamically()
  fullName: org.springframework.data.repository.query.Parameters.potentiallySortsDynamically()
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: org.springframework.data.repository.query.Parameters.getSortIndex()
  name: Parameters.getSortIndex()
  nameWithType: Parameters.getSortIndex()
  fullName: org.springframework.data.repository.query.Parameters.getSortIndex()
- uid: java.lang.Object.equals(java.lang.Object)
  name: Object.equals(Object)
  nameWithType: Object.equals(Object)
  fullName: java.lang.Object.equals(java.lang.Object)
- uid: java.lang.Object.toString()
  name: Object.toString()
  nameWithType: Object.toString()
  fullName: java.lang.Object.toString()
- uid: org.springframework.data.repository.query.Parameters.getParameter(int)
  name: Parameters.getParameter(int)
  nameWithType: Parameters.getParameter(int)
  fullName: org.springframework.data.repository.query.Parameters.getParameter(int)
- uid: org.springframework.data.repository.query.Parameters.getBindableParameter(int)
  name: Parameters.getBindableParameter(int)
  nameWithType: Parameters.getBindableParameter(int)
  fullName: org.springframework.data.repository.query.Parameters.getBindableParameter(int)
- uid: java.util.List
  name: List
  nameWithType: List
  fullName: java.util.List
- uid: com.azure.spring.data.cosmos.repository.query.CosmosParameters,com.azure.spring.data.cosmos.repository.query.CosmosParameter
  name: CosmosParameters,CosmosParameter
  nameWithType: CosmosParameters,CosmosParameter
  fullName: com.azure.spring.data.cosmos.repository.query.CosmosParameters,com.azure.spring.data.cosmos.repository.query.CosmosParameter
- uid: org.springframework.data.repository.query.Parameters
  name: Parameters
  nameWithType: Parameters
  fullName: org.springframework.data.repository.query.Parameters
- uid: ?>)
  name: ?>)
  nameWithType: ?>)
  fullName: ?>)
- uid: org.springframework.data.repository.query.Parameters.isBindable(java.lang.Class
  name: Parameters.isBindable(Class
  nameWithType: Parameters.isBindable(Class
  fullName: org.springframework.data.repository.query.Parameters.isBindable(java.lang.Class
- uid: org.springframework.data.repository.query.Parameters.createFrom(java.util.List
  name: Parameters.createFrom(List
  nameWithType: Parameters.createFrom(List
  fullName: org.springframework.data.repository.query.Parameters.createFrom(java.util.List
- uid: T>)
  name: T>)
  nameWithType: T>)
  fullName: T>)
