### YamlMime:JavaType
uid: "com.azure.verticals.agrifood.farming.WeatherDataAsyncClient"
fullName: "com.azure.verticals.agrifood.farming.WeatherDataAsyncClient"
name: "WeatherDataAsyncClient"
nameWithType: "WeatherDataAsyncClient"
summary: "Initializes a new instance of the asynchronous Farm<wbr>Beats<wbr>Client type."
inheritances:
- "<xref href=\"java.lang.Object?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
inheritedClassMethods:
- classRef: "java.lang.<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html\">Object</a>"
  methodsRef:
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#clone--\">clone</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#equals-java.lang.Object-\">equals</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#finalize--\">finalize</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#getClass--\">getClass</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#hashCode--\">hashCode</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#notify--\">notify</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#notifyAll--\">notifyAll</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#toString--\">toString</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#wait--\">wait</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#wait-long-\">wait</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#wait-long-int-\">wait</a>"
syntax: "public final class **WeatherDataAsyncClient**"
methods:
- uid: "com.azure.verticals.agrifood.farming.WeatherDataAsyncClient.getWithResponse(com.azure.core.util.BinaryData,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.verticals.agrifood.farming.WeatherDataAsyncClient.getWithResponse(BinaryData weatherDataProviderRequest, RequestOptions requestOptions)"
  name: "getWithResponse(BinaryData weatherDataProviderRequest, RequestOptions requestOptions)"
  nameWithType: "WeatherDataAsyncClient.getWithResponse(BinaryData weatherDataProviderRequest, RequestOptions requestOptions)"
  summary: "Returns a list of Weather<wbr>Data."
  parameters:
  - description: "Weather data provider request."
    name: "weatherDataProviderRequest"
    type: "<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<BinaryData>> getWithResponse(BinaryData weatherDataProviderRequest, RequestOptions requestOptions)"
  desc: "Returns a list of WeatherData.\n\n**Request Body Schema**\n\n```java\n{\n     locations (Optional): [\n          (Optional){\n             type: String(LatLong/IataCode/IcaoCode/PlaceId/PostalKey) (Required)\n             value: String (Required)\n         }\n     ]\n     providerAppId: String (Optional)\n     providerApiKey: String (Required)\n     extensionId: String (Required)\n     extensionApiName: String (Required)\n     language: String (Optional)\n     startTimeHours: Integer (Optional)\n     endTimeHours: Integer (Optional)\n     duration: Integer (Optional)\n     units: String (Required)\n     additionalParams (Optional): {\n         iconResolution: String (Optional)\n         details: Boolean (Optional)\n     }\n }\n```\n\n**Response Body Schema**\n\n```java\n{\n     weatherMetadata (Required): {\n         extensionVersion: String (Required)\n         weatherDataType: String (Required)\n         extensionId: String (Required)\n         extensionApiName: String (Required)\n         language: String (Optional)\n         startTimeHours: Integer (Optional)\n         endTimeHours: Integer (Optional)\n         duration: Integer (Optional)\n         units: String (Required)\n         additionalParams (Optional): {\n             iconResolution: String (Optional)\n             details: Boolean (Optional)\n         }\n     }\n     status: String(Succeeded/Failed/PartiallySucceeded) (Optional)\n     locations (Optional): [\n          (Optional){\n             location (Optional): {\n                 type: String(LatLong/IataCode/IcaoCode/PlaceId/PostalKey) (Required)\n                 value: String (Required)\n             }\n             requestCompletionTime: String (Optional)\n             lastRefreshedDateTime: OffsetDateTime (Optional)\n             data (Optional): {\n                 wetBulbTemperature (Optional): {\n                     unit: String (Optional)\n                     values (Optional): [\n                         double (Optional)\n                     ]\n                 }\n                 cloudCover (Optional): (recursive schema, see cloudCover above)\n                 dayOfWeek (Optional): [\n                     String (Optional)\n                 ]\n                 dayOrNight (Optional): [\n                     String (Optional)\n                 ]\n                 expirationTime (Optional): [\n                     String (Optional)\n                 ]\n                 iconCode (Optional): [\n                     String (Optional)\n                 ]\n                 iconCodeExtend (Optional): [\n                     String (Optional)\n                 ]\n                 hasPrecipitation (Optional): [\n                     boolean (Optional)\n                 ]\n                 pressureMeanSeaLevel (Optional): (recursive schema, see pressureMeanSeaLevel above)\n                 relativeHumidity (Optional): (recursive schema, see relativeHumidity above)\n                 temperature (Optional): (recursive schema, see temperature above)\n                 temperatureDewPoint (Optional): (recursive schema, see temperatureDewPoint above)\n                 temperatureFeelsLike (Optional): (recursive schema, see temperatureFeelsLike above)\n                 temperatureHeatIndex (Optional): (recursive schema, see temperatureHeatIndex above)\n                 temperatureWindChill (Optional): (recursive schema, see temperatureWindChill above)\n                 uvDescription (Optional): [\n                     String (Optional)\n                 ]\n                 uvIndex (Optional): [\n                     String (Optional)\n                 ]\n                 validTimeLocal (Optional): [\n                     String (Optional)\n                 ]\n                 validTime (Optional): [\n                     String (Optional)\n                 ]\n                 visibility (Optional): (recursive schema, see visibility above)\n                 windDirection (Optional): (recursive schema, see windDirection above)\n                 windGust (Optional): (recursive schema, see windGust above)\n                 windSpeed (Optional): (recursive schema, see windSpeed above)\n                 wxPhraseLong (Optional): [\n                     String (Optional)\n                 ]\n                 wxPhraseShort (Optional): [\n                     String (Optional)\n                 ]\n                 additionalAttributes (Optional): {\n                     String: Object (Optional)\n                 }\n             }\n         }\n     ]\n     errors (Optional): {\n         locations (Optional): [\n              (Optional){\n                 location (Optional): (recursive schema, see location above)\n                 code: Integer (Optional)\n                 description: String (Optional)\n                 retryable: Boolean (Optional)\n             }\n         ]\n     }\n }\n```"
  returns:
    description: "schema of Weather Data Provider Response along with <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> on successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
type: "class"
desc: "Initializes a new instance of the asynchronous FarmBeatsClient type."
metadata: {}
package: "com.azure.verticals.agrifood.farming"
artifact: com.azure:azure-verticals-agrifood-farming:1.0.0-beta.3
