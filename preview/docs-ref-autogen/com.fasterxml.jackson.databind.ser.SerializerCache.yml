### YamlMime:ManagedReference
items:
- uid: com.fasterxml.jackson.databind.ser.SerializerCache
  id: SerializerCache
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser
  children:
  - com.fasterxml.jackson.databind.ser.SerializerCache.SerializerCache()
  - com.fasterxml.jackson.databind.ser.SerializerCache.addAndResolveNonTypedSerializer(com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.JsonSerializer<java.lang.Object>,com.fasterxml.jackson.databind.SerializerProvider)
  - com.fasterxml.jackson.databind.ser.SerializerCache.addAndResolveNonTypedSerializer(java.lang.Class<?>,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.JsonSerializer<java.lang.Object>,com.fasterxml.jackson.databind.SerializerProvider)
  - com.fasterxml.jackson.databind.ser.SerializerCache.addAndResolveNonTypedSerializer(java.lang.Class<?>,com.fasterxml.jackson.databind.JsonSerializer<java.lang.Object>,com.fasterxml.jackson.databind.SerializerProvider)
  - com.fasterxml.jackson.databind.ser.SerializerCache.addTypedSerializer(com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.JsonSerializer<java.lang.Object>)
  - com.fasterxml.jackson.databind.ser.SerializerCache.addTypedSerializer(java.lang.Class<?>,com.fasterxml.jackson.databind.JsonSerializer<java.lang.Object>)
  - com.fasterxml.jackson.databind.ser.SerializerCache.flush()
  - com.fasterxml.jackson.databind.ser.SerializerCache.getReadOnlyLookupMap()
  - com.fasterxml.jackson.databind.ser.SerializerCache.size()
  - com.fasterxml.jackson.databind.ser.SerializerCache.typedValueSerializer(com.fasterxml.jackson.databind.JavaType)
  - com.fasterxml.jackson.databind.ser.SerializerCache.typedValueSerializer(java.lang.Class<?>)
  - com.fasterxml.jackson.databind.ser.SerializerCache.untypedValueSerializer(com.fasterxml.jackson.databind.JavaType)
  - com.fasterxml.jackson.databind.ser.SerializerCache.untypedValueSerializer(java.lang.Class<?>)
  langs:
  - java
  name: SerializerCache
  nameWithType: SerializerCache
  fullName: com.fasterxml.jackson.databind.ser.SerializerCache
  type: Class
  package: com.fasterxml.jackson.databind.ser
  summary: >-
    Simple cache object that allows for doing 2-level lookups: first level is by "local" read-only lookup Map (used without locking) and second backup level is by a shared modifiable HashMap. The idea is that after a while, most serializers are found from the local Map (to optimize performance, reduce lock contention), but that during buildup we can use a shared map to reduce both number of distinct read-only maps constructed, and number of serializers constructed.


    Cache contains three kinds of entries, based on combination of class pair key. First class in key is for the type to serialize, and second one is type used for determining how to resolve value type. One (but not both) of entries can be null.
  syntax:
    content: public final class SerializerCache
  inheritance:
  - java.lang.Object
  inheritedMembers:
  - java.lang.Object.clone()
  - java.lang.Object.equals(java.lang.Object)
  - java.lang.Object.finalize()
  - java.lang.Object.getClass()
  - java.lang.Object.hashCode()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.toString()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
- uid: com.fasterxml.jackson.databind.ser.SerializerCache.SerializerCache()
  id: SerializerCache()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.SerializerCache
  langs:
  - java
  name: SerializerCache()
  nameWithType: SerializerCache.SerializerCache()
  fullName: com.fasterxml.jackson.databind.ser.SerializerCache.SerializerCache()
  overload: com.fasterxml.jackson.databind.ser.SerializerCache.SerializerCache*
  type: Constructor
  package: com.fasterxml.jackson.databind.ser
  syntax:
    content: public SerializerCache()
- uid: com.fasterxml.jackson.databind.ser.SerializerCache.addAndResolveNonTypedSerializer(com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.JsonSerializer<java.lang.Object>,com.fasterxml.jackson.databind.SerializerProvider)
  id: addAndResolveNonTypedSerializer(com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.JsonSerializer<java.lang.Object>,com.fasterxml.jackson.databind.SerializerProvider)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.SerializerCache
  langs:
  - java
  name: addAndResolveNonTypedSerializer(JavaType type, JsonSerializer<Object> ser, SerializerProvider provider)
  nameWithType: SerializerCache.addAndResolveNonTypedSerializer(JavaType type, JsonSerializer<Object> ser, SerializerProvider provider)
  fullName: com.fasterxml.jackson.databind.ser.SerializerCache.addAndResolveNonTypedSerializer(JavaType type, JsonSerializer<Object> ser, SerializerProvider provider)
  overload: com.fasterxml.jackson.databind.ser.SerializerCache.addAndResolveNonTypedSerializer*
  type: Method
  package: com.fasterxml.jackson.databind.ser
  syntax:
    content: public void addAndResolveNonTypedSerializer(JavaType type, JsonSerializer<Object> ser, SerializerProvider provider)
    parameters:
    - id: type
      type: com.fasterxml.jackson.databind.JavaType
    - id: ser
      type: com.fasterxml.jackson.databind.JsonSerializer<java.lang.Object>
    - id: provider
      type: com.fasterxml.jackson.databind.SerializerProvider
  exceptions:
  - type: com.fasterxml.jackson.databind.JsonMappingException
- uid: com.fasterxml.jackson.databind.ser.SerializerCache.addAndResolveNonTypedSerializer(java.lang.Class<?>,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.JsonSerializer<java.lang.Object>,com.fasterxml.jackson.databind.SerializerProvider)
  id: addAndResolveNonTypedSerializer(java.lang.Class<?>,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.JsonSerializer<java.lang.Object>,com.fasterxml.jackson.databind.SerializerProvider)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.SerializerCache
  langs:
  - java
  name: addAndResolveNonTypedSerializer(Class<?> rawType, JavaType fullType, JsonSerializer<Object> ser, SerializerProvider provider)
  nameWithType: SerializerCache.addAndResolveNonTypedSerializer(Class<?> rawType, JavaType fullType, JsonSerializer<Object> ser, SerializerProvider provider)
  fullName: com.fasterxml.jackson.databind.ser.SerializerCache.addAndResolveNonTypedSerializer(Class<?> rawType, JavaType fullType, JsonSerializer<Object> ser, SerializerProvider provider)
  overload: com.fasterxml.jackson.databind.ser.SerializerCache.addAndResolveNonTypedSerializer*
  type: Method
  package: com.fasterxml.jackson.databind.ser
  summary: Another alternative that will cover both access via raw type and matching fully resolved type, in one fell swoop.
  syntax:
    content: public void addAndResolveNonTypedSerializer(Class<?> rawType, JavaType fullType, JsonSerializer<Object> ser, SerializerProvider provider)
    parameters:
    - id: rawType
      type: java.lang.Class<?>
    - id: fullType
      type: com.fasterxml.jackson.databind.JavaType
    - id: ser
      type: com.fasterxml.jackson.databind.JsonSerializer<java.lang.Object>
    - id: provider
      type: com.fasterxml.jackson.databind.SerializerProvider
  exceptions:
  - type: com.fasterxml.jackson.databind.JsonMappingException
- uid: com.fasterxml.jackson.databind.ser.SerializerCache.addAndResolveNonTypedSerializer(java.lang.Class<?>,com.fasterxml.jackson.databind.JsonSerializer<java.lang.Object>,com.fasterxml.jackson.databind.SerializerProvider)
  id: addAndResolveNonTypedSerializer(java.lang.Class<?>,com.fasterxml.jackson.databind.JsonSerializer<java.lang.Object>,com.fasterxml.jackson.databind.SerializerProvider)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.SerializerCache
  langs:
  - java
  name: addAndResolveNonTypedSerializer(Class<?> type, JsonSerializer<Object> ser, SerializerProvider provider)
  nameWithType: SerializerCache.addAndResolveNonTypedSerializer(Class<?> type, JsonSerializer<Object> ser, SerializerProvider provider)
  fullName: com.fasterxml.jackson.databind.ser.SerializerCache.addAndResolveNonTypedSerializer(Class<?> type, JsonSerializer<Object> ser, SerializerProvider provider)
  overload: com.fasterxml.jackson.databind.ser.SerializerCache.addAndResolveNonTypedSerializer*
  type: Method
  package: com.fasterxml.jackson.databind.ser
  syntax:
    content: public void addAndResolveNonTypedSerializer(Class<?> type, JsonSerializer<Object> ser, SerializerProvider provider)
    parameters:
    - id: type
      type: java.lang.Class<?>
    - id: ser
      type: com.fasterxml.jackson.databind.JsonSerializer<java.lang.Object>
    - id: provider
      type: com.fasterxml.jackson.databind.SerializerProvider
  exceptions:
  - type: com.fasterxml.jackson.databind.JsonMappingException
- uid: com.fasterxml.jackson.databind.ser.SerializerCache.addTypedSerializer(com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.JsonSerializer<java.lang.Object>)
  id: addTypedSerializer(com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.JsonSerializer<java.lang.Object>)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.SerializerCache
  langs:
  - java
  name: addTypedSerializer(JavaType type, JsonSerializer<Object> ser)
  nameWithType: SerializerCache.addTypedSerializer(JavaType type, JsonSerializer<Object> ser)
  fullName: com.fasterxml.jackson.databind.ser.SerializerCache.addTypedSerializer(JavaType type, JsonSerializer<Object> ser)
  overload: com.fasterxml.jackson.databind.ser.SerializerCache.addTypedSerializer*
  type: Method
  package: com.fasterxml.jackson.databind.ser
  summary: Method called if none of lookups succeeded, and caller had to construct a serializer. If so, we will update the shared lookup map so that it can be resolved via it next time.
  syntax:
    content: public void addTypedSerializer(JavaType type, JsonSerializer<Object> ser)
    parameters:
    - id: type
      type: com.fasterxml.jackson.databind.JavaType
    - id: ser
      type: com.fasterxml.jackson.databind.JsonSerializer<java.lang.Object>
- uid: com.fasterxml.jackson.databind.ser.SerializerCache.addTypedSerializer(java.lang.Class<?>,com.fasterxml.jackson.databind.JsonSerializer<java.lang.Object>)
  id: addTypedSerializer(java.lang.Class<?>,com.fasterxml.jackson.databind.JsonSerializer<java.lang.Object>)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.SerializerCache
  langs:
  - java
  name: addTypedSerializer(Class<?> cls, JsonSerializer<Object> ser)
  nameWithType: SerializerCache.addTypedSerializer(Class<?> cls, JsonSerializer<Object> ser)
  fullName: com.fasterxml.jackson.databind.ser.SerializerCache.addTypedSerializer(Class<?> cls, JsonSerializer<Object> ser)
  overload: com.fasterxml.jackson.databind.ser.SerializerCache.addTypedSerializer*
  type: Method
  package: com.fasterxml.jackson.databind.ser
  syntax:
    content: public void addTypedSerializer(Class<?> cls, JsonSerializer<Object> ser)
    parameters:
    - id: cls
      type: java.lang.Class<?>
    - id: ser
      type: com.fasterxml.jackson.databind.JsonSerializer<java.lang.Object>
- uid: com.fasterxml.jackson.databind.ser.SerializerCache.flush()
  id: flush()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.SerializerCache
  langs:
  - java
  name: flush()
  nameWithType: SerializerCache.flush()
  fullName: com.fasterxml.jackson.databind.ser.SerializerCache.flush()
  overload: com.fasterxml.jackson.databind.ser.SerializerCache.flush*
  type: Method
  package: com.fasterxml.jackson.databind.ser
  summary: Method called by StdSerializerProvider\#flushCachedSerializers() to clear all cached serializers
  syntax:
    content: public synchronized void flush()
- uid: com.fasterxml.jackson.databind.ser.SerializerCache.getReadOnlyLookupMap()
  id: getReadOnlyLookupMap()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.SerializerCache
  langs:
  - java
  name: getReadOnlyLookupMap()
  nameWithType: SerializerCache.getReadOnlyLookupMap()
  fullName: com.fasterxml.jackson.databind.ser.SerializerCache.getReadOnlyLookupMap()
  overload: com.fasterxml.jackson.databind.ser.SerializerCache.getReadOnlyLookupMap*
  type: Method
  package: com.fasterxml.jackson.databind.ser
  summary: Method that can be called to get a read-only instance populated from the most recent version of the shared lookup Map.
  syntax:
    content: public ReadOnlyClassToSerializerMap getReadOnlyLookupMap()
    return:
      type: com.fasterxml.jackson.databind.ser.impl.ReadOnlyClassToSerializerMap
- uid: com.fasterxml.jackson.databind.ser.SerializerCache.size()
  id: size()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.SerializerCache
  langs:
  - java
  name: size()
  nameWithType: SerializerCache.size()
  fullName: com.fasterxml.jackson.databind.ser.SerializerCache.size()
  overload: com.fasterxml.jackson.databind.ser.SerializerCache.size*
  type: Method
  package: com.fasterxml.jackson.databind.ser
  syntax:
    content: public synchronized int size()
    return:
      type: int
- uid: com.fasterxml.jackson.databind.ser.SerializerCache.typedValueSerializer(com.fasterxml.jackson.databind.JavaType)
  id: typedValueSerializer(com.fasterxml.jackson.databind.JavaType)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.SerializerCache
  langs:
  - java
  name: typedValueSerializer(JavaType type)
  nameWithType: SerializerCache.typedValueSerializer(JavaType type)
  fullName: com.fasterxml.jackson.databind.ser.SerializerCache.typedValueSerializer(JavaType type)
  overload: com.fasterxml.jackson.databind.ser.SerializerCache.typedValueSerializer*
  type: Method
  package: com.fasterxml.jackson.databind.ser
  syntax:
    content: public JsonSerializer<Object> typedValueSerializer(JavaType type)
    parameters:
    - id: type
      type: com.fasterxml.jackson.databind.JavaType
    return:
      type: com.fasterxml.jackson.databind.JsonSerializer<java.lang.Object>
- uid: com.fasterxml.jackson.databind.ser.SerializerCache.typedValueSerializer(java.lang.Class<?>)
  id: typedValueSerializer(java.lang.Class<?>)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.SerializerCache
  langs:
  - java
  name: typedValueSerializer(Class<?> cls)
  nameWithType: SerializerCache.typedValueSerializer(Class<?> cls)
  fullName: com.fasterxml.jackson.databind.ser.SerializerCache.typedValueSerializer(Class<?> cls)
  overload: com.fasterxml.jackson.databind.ser.SerializerCache.typedValueSerializer*
  type: Method
  package: com.fasterxml.jackson.databind.ser
  syntax:
    content: public JsonSerializer<Object> typedValueSerializer(Class<?> cls)
    parameters:
    - id: cls
      type: java.lang.Class<?>
    return:
      type: com.fasterxml.jackson.databind.JsonSerializer<java.lang.Object>
- uid: com.fasterxml.jackson.databind.ser.SerializerCache.untypedValueSerializer(com.fasterxml.jackson.databind.JavaType)
  id: untypedValueSerializer(com.fasterxml.jackson.databind.JavaType)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.SerializerCache
  langs:
  - java
  name: untypedValueSerializer(JavaType type)
  nameWithType: SerializerCache.untypedValueSerializer(JavaType type)
  fullName: com.fasterxml.jackson.databind.ser.SerializerCache.untypedValueSerializer(JavaType type)
  overload: com.fasterxml.jackson.databind.ser.SerializerCache.untypedValueSerializer*
  type: Method
  package: com.fasterxml.jackson.databind.ser
  syntax:
    content: public JsonSerializer<Object> untypedValueSerializer(JavaType type)
    parameters:
    - id: type
      type: com.fasterxml.jackson.databind.JavaType
    return:
      type: com.fasterxml.jackson.databind.JsonSerializer<java.lang.Object>
- uid: com.fasterxml.jackson.databind.ser.SerializerCache.untypedValueSerializer(java.lang.Class<?>)
  id: untypedValueSerializer(java.lang.Class<?>)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.SerializerCache
  langs:
  - java
  name: untypedValueSerializer(Class<?> type)
  nameWithType: SerializerCache.untypedValueSerializer(Class<?> type)
  fullName: com.fasterxml.jackson.databind.ser.SerializerCache.untypedValueSerializer(Class<?> type)
  overload: com.fasterxml.jackson.databind.ser.SerializerCache.untypedValueSerializer*
  type: Method
  package: com.fasterxml.jackson.databind.ser
  summary: Method that checks if the shared (and hence, synchronized) lookup Map might have untyped serializer for given type.
  syntax:
    content: public JsonSerializer<Object> untypedValueSerializer(Class<?> type)
    parameters:
    - id: type
      type: java.lang.Class<?>
    return:
      type: com.fasterxml.jackson.databind.JsonSerializer<java.lang.Object>
references:
- uid: com.fasterxml.jackson.databind.ser.SerializerCache.SerializerCache*
  name: SerializerCache
  nameWithType: SerializerCache.SerializerCache
  fullName: com.fasterxml.jackson.databind.ser.SerializerCache.SerializerCache
  package: com.fasterxml.jackson.databind.ser
- uid: com.fasterxml.jackson.databind.ser.impl.ReadOnlyClassToSerializerMap
  name: ReadOnlyClassToSerializerMap
  nameWithType: ReadOnlyClassToSerializerMap
  fullName: com.fasterxml.jackson.databind.ser.impl.ReadOnlyClassToSerializerMap
- uid: com.fasterxml.jackson.databind.ser.SerializerCache.getReadOnlyLookupMap*
  name: getReadOnlyLookupMap
  nameWithType: SerializerCache.getReadOnlyLookupMap
  fullName: com.fasterxml.jackson.databind.ser.SerializerCache.getReadOnlyLookupMap
  package: com.fasterxml.jackson.databind.ser
- uid: int
  spec.java:
  - uid: int
    name: int
    fullName: int
- uid: com.fasterxml.jackson.databind.ser.SerializerCache.size*
  name: size
  nameWithType: SerializerCache.size
  fullName: com.fasterxml.jackson.databind.ser.SerializerCache.size
  package: com.fasterxml.jackson.databind.ser
- uid: java.lang.Class<?>
  spec.java:
  - uid: java.lang.Class
    name: Class
    fullName: java.lang.Class
  - name: <
    fullName: <
  - uid: '?'
    name: '?'
    fullName: '?'
  - name: '>'
    fullName: '>'
- uid: com.fasterxml.jackson.databind.JsonSerializer<java.lang.Object>
  spec.java:
  - uid: com.fasterxml.jackson.databind.JsonSerializer
    name: JsonSerializer
    fullName: com.fasterxml.jackson.databind.JsonSerializer
  - name: <
    fullName: <
  - uid: java.lang.Object
    name: Object
    fullName: java.lang.Object
  - name: '>'
    fullName: '>'
- uid: com.fasterxml.jackson.databind.ser.SerializerCache.untypedValueSerializer*
  name: untypedValueSerializer
  nameWithType: SerializerCache.untypedValueSerializer
  fullName: com.fasterxml.jackson.databind.ser.SerializerCache.untypedValueSerializer
  package: com.fasterxml.jackson.databind.ser
- uid: com.fasterxml.jackson.databind.JavaType
  name: JavaType
  nameWithType: JavaType
  fullName: com.fasterxml.jackson.databind.JavaType
- uid: com.fasterxml.jackson.databind.ser.SerializerCache.typedValueSerializer*
  name: typedValueSerializer
  nameWithType: SerializerCache.typedValueSerializer
  fullName: com.fasterxml.jackson.databind.ser.SerializerCache.typedValueSerializer
  package: com.fasterxml.jackson.databind.ser
- uid: com.fasterxml.jackson.databind.ser.SerializerCache.addTypedSerializer*
  name: addTypedSerializer
  nameWithType: SerializerCache.addTypedSerializer
  fullName: com.fasterxml.jackson.databind.ser.SerializerCache.addTypedSerializer
  package: com.fasterxml.jackson.databind.ser
- uid: com.fasterxml.jackson.databind.JsonMappingException
  name: JsonMappingException
  nameWithType: JsonMappingException
  fullName: com.fasterxml.jackson.databind.JsonMappingException
- uid: com.fasterxml.jackson.databind.SerializerProvider
  name: SerializerProvider
  nameWithType: SerializerProvider
  fullName: com.fasterxml.jackson.databind.SerializerProvider
- uid: com.fasterxml.jackson.databind.ser.SerializerCache.addAndResolveNonTypedSerializer*
  name: addAndResolveNonTypedSerializer
  nameWithType: SerializerCache.addAndResolveNonTypedSerializer
  fullName: com.fasterxml.jackson.databind.ser.SerializerCache.addAndResolveNonTypedSerializer
  package: com.fasterxml.jackson.databind.ser
- uid: com.fasterxml.jackson.databind.ser.SerializerCache.flush*
  name: flush
  nameWithType: SerializerCache.flush
  fullName: com.fasterxml.jackson.databind.ser.SerializerCache.flush
  package: com.fasterxml.jackson.databind.ser
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: java.lang.Object.finalize()
  name: Object.finalize()
  nameWithType: Object.finalize()
  fullName: java.lang.Object.finalize()
- uid: java.lang.Object.clone()
  name: Object.clone()
  nameWithType: Object.clone()
  fullName: java.lang.Object.clone()
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: java.lang.Object.equals(java.lang.Object)
  name: Object.equals(Object)
  nameWithType: Object.equals(Object)
  fullName: java.lang.Object.equals(java.lang.Object)
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.lang.Object.hashCode()
  name: Object.hashCode()
  nameWithType: Object.hashCode()
  fullName: java.lang.Object.hashCode()
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: java.lang.Object.toString()
  name: Object.toString()
  nameWithType: Object.toString()
  fullName: java.lang.Object.toString()
- uid: java.lang.Class
  name: Class
  nameWithType: Class
  fullName: java.lang.Class
- uid: '?'
  name: '?'
  nameWithType: '?'
  fullName: '?'
- uid: com.fasterxml.jackson.databind.JsonSerializer
  name: JsonSerializer
  nameWithType: JsonSerializer
  fullName: com.fasterxml.jackson.databind.JsonSerializer
- uid: java.lang.Object
  name: Object
  nameWithType: Object
  fullName: java.lang.Object
