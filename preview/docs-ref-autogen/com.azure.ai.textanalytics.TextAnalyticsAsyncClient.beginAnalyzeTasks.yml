### YamlMime:JavaMember
uid: "com.azure.ai.textanalytics.TextAnalyticsAsyncClient.beginAnalyzeTasks*"
fullName: "com.azure.ai.textanalytics.TextAnalyticsAsyncClient.beginAnalyzeTasks"
name: "beginAnalyzeTasks"
nameWithType: "TextAnalyticsAsyncClient.beginAnalyzeTasks"
members:
- uid: "com.azure.ai.textanalytics.TextAnalyticsAsyncClient.beginAnalyzeTasks(java.lang.Iterable<com.azure.ai.textanalytics.models.TextDocumentInput>,com.azure.ai.textanalytics.models.AnalyzeTasksOptions)"
  fullName: "com.azure.ai.textanalytics.TextAnalyticsAsyncClient.beginAnalyzeTasks(Iterable<TextDocumentInput> documents, AnalyzeTasksOptions options)"
  name: "beginAnalyzeTasks(Iterable<TextDocumentInput> documents, AnalyzeTasksOptions options)"
  nameWithType: "TextAnalyticsAsyncClient.beginAnalyzeTasks(Iterable<TextDocumentInput> documents, AnalyzeTasksOptions options)"
  summary: "Analyze tasks, such as, entity recognition, PII entity recognition and key phrases extraction in a list of <xref uid=\"com.azure.ai.textanalytics.models.TextDocumentInput\" data-throw-if-not-resolved=\"false\" data-raw-source=\"document\"></xref> with provided request options. See [this][] supported languages in Text Analytics API.\n\n**Code Sample**\n\n```java\nList<TextDocumentInput> documents = Arrays.asList(\n     new TextDocumentInput(\"0\", \"Elon Musk is the CEO of SpaceX and Tesla.\").setLanguage(\"en\"),\n     new TextDocumentInput(\"1\", \"My SSN is 859-98-0987\").setLanguage(\"en\")\n );\n textAnalyticsAsyncClient.beginAnalyzeTasks(documents,\n     new AnalyzeTasksOptions().setDisplayName(\"{tasks_display_name}\")\n         .setEntitiesRecognitionTasks(Arrays.asList(new EntitiesTask()))\n         .setKeyPhrasesExtractionTasks(Arrays.asList(new KeyPhrasesTask())))\n     .flatMap(AsyncPollResponse::getFinalResult)\n     .subscribe(analyzeTasksResultPagedFlux ->\n         analyzeTasksResultPagedFlux.subscribe(analyzeTasksResult -> {\n             analyzeTasksResult.getEntityRecognitionTasks().forEach(taskResult ->\n                 taskResult.forEach(entitiesResult ->\n                     entitiesResult.getEntities().forEach(entity -> System.out.printf(\n                         \"Recognized entity: %s, entity category: %s, entity subcategory: %s, \"\n                             + \"confidence score: %f.%n\",\n                         entity.getText(), entity.getCategory(), entity.getSubcategory(),\n                         entity.getConfidenceScore()))));\n             analyzeTasksResult.getKeyPhraseExtractionTasks().forEach(taskResult ->\n                 taskResult.forEach(extractKeyPhraseResult -> {\n                     System.out.println(\"Extracted phrases:\");\n                     extractKeyPhraseResult.getKeyPhrases()\n                         .forEach(keyPhrases -> System.out.printf(\"\\t%s.%n\", keyPhrases));\n                 }));\n         }));\n```\n\n\n[this]: https://aka.ms/talangs"
  parameters:
  - description: "A list of <xref uid=\"com.azure.ai.textanalytics.models.TextDocumentInput\" data-throw-if-not-resolved=\"false\" data-raw-source=\"documents\"></xref> to be analyzed."
    name: "documents"
    type: "<xref href=\"java.lang.Iterable?alt=java.lang.Iterable&text=Iterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.ai.textanalytics.models.TextDocumentInput?alt=com.azure.ai.textanalytics.models.TextDocumentInput&text=TextDocumentInput\" data-throw-if-not-resolved=\"False\" />&gt;"
  - description: "The additional configurable <xref uid=\"com.azure.ai.textanalytics.models.AnalyzeTasksOptions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"options\"></xref> that may be passed when\n analyzing a collection of tasks."
    name: "options"
    type: "<xref href=\"com.azure.ai.textanalytics.models.AnalyzeTasksOptions?alt=com.azure.ai.textanalytics.models.AnalyzeTasksOptions&text=AnalyzeTasksOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PollerFlux<TextAnalyticsOperationResult,PagedFlux<AnalyzeTasksResult>> beginAnalyzeTasks(Iterable<TextDocumentInput> documents, AnalyzeTasksOptions options)"
  returns:
    description: "A <xref uid=\"com.azure.core.util.polling.PollerFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PollerFlux\"></xref> that polls the analyze a collection of tasks operation until it has completed,\n has failed, or has been cancelled. The completed operation returns a <xref uid=\"com.azure.core.http.rest.PagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedFlux\"></xref> of\n <xref uid=\"com.azure.ai.textanalytics.models.AnalyzeTasksResult\" data-throw-if-not-resolved=\"false\" data-raw-source=\"AnalyzeTasksResult\"></xref>."
    type: "<xref href=\"com.azure.core.util.polling.PollerFlux?alt=com.azure.core.util.polling.PollerFlux&text=PollerFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.ai.textanalytics.models.TextAnalyticsOperationResult?alt=com.azure.ai.textanalytics.models.TextAnalyticsOperationResult&text=TextAnalyticsOperationResult\" data-throw-if-not-resolved=\"False\" />,<xref href=\"com.azure.core.http.rest.PagedFlux?alt=com.azure.core.http.rest.PagedFlux&text=PagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.ai.textanalytics.models.AnalyzeTasksResult?alt=com.azure.ai.textanalytics.models.AnalyzeTasksResult&text=AnalyzeTasksResult\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
type: "method"
metadata: {}
package: "com.azure.ai.textanalytics"
artifact: com.azure:azure-ai-textanalytics:5.1.0-beta.3
