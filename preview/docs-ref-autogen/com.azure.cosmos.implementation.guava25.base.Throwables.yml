### YamlMime:ManagedReference
items:
- uid: com.azure.cosmos.implementation.guava25.base.Throwables
  id: Throwables
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.base
  children:
  - com.azure.cosmos.implementation.guava25.base.Throwables.<X1,X2>propagateIfPossible(java.lang.Throwable,java.lang.Class<X1>,java.lang.Class<X2>)
  - com.azure.cosmos.implementation.guava25.base.Throwables.<X>getCauseAs(java.lang.Throwable,java.lang.Class<X>)
  - com.azure.cosmos.implementation.guava25.base.Throwables.<X>propagateIfInstanceOf(java.lang.Throwable,java.lang.Class<X>)
  - com.azure.cosmos.implementation.guava25.base.Throwables.<X>propagateIfPossible(java.lang.Throwable,java.lang.Class<X>)
  - com.azure.cosmos.implementation.guava25.base.Throwables.<X>throwIfInstanceOf(java.lang.Throwable,java.lang.Class<X>)
  - com.azure.cosmos.implementation.guava25.base.Throwables.getCausalChain(java.lang.Throwable)
  - com.azure.cosmos.implementation.guava25.base.Throwables.getRootCause(java.lang.Throwable)
  - com.azure.cosmos.implementation.guava25.base.Throwables.getStackTraceAsString(java.lang.Throwable)
  - com.azure.cosmos.implementation.guava25.base.Throwables.lazyStackTrace(java.lang.Throwable)
  - com.azure.cosmos.implementation.guava25.base.Throwables.lazyStackTraceIsLazy()
  - com.azure.cosmos.implementation.guava25.base.Throwables.propagate(java.lang.Throwable)
  - com.azure.cosmos.implementation.guava25.base.Throwables.propagateIfPossible(java.lang.Throwable)
  - com.azure.cosmos.implementation.guava25.base.Throwables.throwIfUnchecked(java.lang.Throwable)
  langs:
  - java
  name: Throwables
  nameWithType: Throwables
  fullName: com.azure.cosmos.implementation.guava25.base.Throwables
  type: Class
  package: com.azure.cosmos.implementation.guava25.base
  summary: >-
    Static utility methods pertaining to instances of <xref uid="java.lang.Throwable" data-throw-if-not-resolved="false">Throwable</xref>.


    See the Guava User Guide entry on [Throwables][].



    [Throwables]: https://github.com/google/guava/wiki/ThrowablesExplained
  syntax:
    content: public final class Throwables
  inheritance:
  - java.lang.Object
  inheritedMembers:
  - java.lang.Object.clone()
  - java.lang.Object.equals(java.lang.Object)
  - java.lang.Object.finalize()
  - java.lang.Object.getClass()
  - java.lang.Object.hashCode()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.toString()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
- uid: com.azure.cosmos.implementation.guava25.base.Throwables.<X1,X2>propagateIfPossible(java.lang.Throwable,java.lang.Class<X1>,java.lang.Class<X2>)
  id: <X1,X2>propagateIfPossible(java.lang.Throwable,java.lang.Class<X1>,java.lang.Class<X2>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.base.Throwables
  langs:
  - java
  name: <X1,X2>propagateIfPossible(Throwable throwable, Class<X1> declaredType1, Class<X2> declaredType2)
  nameWithType: Throwables.<X1,X2>propagateIfPossible(Throwable throwable, Class<X1> declaredType1, Class<X2> declaredType2)
  fullName: com.azure.cosmos.implementation.guava25.base.Throwables.<X1,X2>propagateIfPossible(Throwable throwable, Class<X1> declaredType1, Class<X2> declaredType2)
  overload: com.azure.cosmos.implementation.guava25.base.Throwables.propagateIfPossible*
  type: Method
  package: com.azure.cosmos.implementation.guava25.base
  summary: Propagates `throwable` exactly as-is, if and only if it is an instance of <xref uid="java.lang.RuntimeException" data-throw-if-not-resolved="false">RuntimeException</xref>, <xref uid="" data-throw-if-not-resolved="false">Error</xref>, `declaredType1`, or `declaredType2`. In the unlikely case that you have three or more declared checked exception types, you can handle them all by invoking these methods repeatedly. See usage example in <xref uid="com.azure.cosmos.implementation.guava25.base.Throwables.&lt;X&gt;propagateIfPossible(java.lang.Throwable,java.lang.Class&lt;X&gt;)" data-throw-if-not-resolved="false">#propagateIfPossible(Throwable, Class)</xref>.
  syntax:
    content: public static void <X1,X2>propagateIfPossible(Throwable throwable, Class<X1> declaredType1, Class<X2> declaredType2)
    parameters:
    - id: throwable
      type: java.lang.Throwable
      description: the Throwable to possibly propagate
    - id: declaredType1
      type: java.lang.Class<X1>
      description: any checked exception type declared by the calling method
    - id: declaredType2
      type: java.lang.Class<X2>
      description: any other checked exception type declared by the calling method
  exceptions:
  - type: X1
  - type: X2
- uid: com.azure.cosmos.implementation.guava25.base.Throwables.<X>getCauseAs(java.lang.Throwable,java.lang.Class<X>)
  id: <X>getCauseAs(java.lang.Throwable,java.lang.Class<X>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.base.Throwables
  langs:
  - java
  name: <X>getCauseAs(Throwable throwable, Class<X> expectedCauseType)
  nameWithType: Throwables.<X>getCauseAs(Throwable throwable, Class<X> expectedCauseType)
  fullName: com.azure.cosmos.implementation.guava25.base.Throwables.<X>getCauseAs(Throwable throwable, Class<X> expectedCauseType)
  overload: com.azure.cosmos.implementation.guava25.base.Throwables.getCauseAs*
  type: Method
  package: com.azure.cosmos.implementation.guava25.base
  summary: >-
    Returns `throwable`'s cause, cast to `expectedCauseType`.


    Prefer this method instead of manually casting an exception's cause. For example, `(IOException) e.getCause()` throws a <xref uid="" data-throw-if-not-resolved="false">ClassCastException</xref> that discards the original exception `e` if the cause is not an <xref uid="" data-throw-if-not-resolved="false">IOException</xref>, but `Throwables.getCauseAs(e, IOException.class)` keeps `e` as the <xref uid="" data-throw-if-not-resolved="false">ClassCastException</xref>'s cause.
  syntax:
    content: public static X <X>getCauseAs(Throwable throwable, Class<X> expectedCauseType)
    parameters:
    - id: throwable
      type: java.lang.Throwable
    - id: expectedCauseType
      type: java.lang.Class<X>
    return:
      type: X
- uid: com.azure.cosmos.implementation.guava25.base.Throwables.<X>propagateIfInstanceOf(java.lang.Throwable,java.lang.Class<X>)
  id: <X>propagateIfInstanceOf(java.lang.Throwable,java.lang.Class<X>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.base.Throwables
  langs:
  - java
  name: <X>propagateIfInstanceOf(Throwable throwable, Class<X> declaredType)
  nameWithType: Throwables.<X>propagateIfInstanceOf(Throwable throwable, Class<X> declaredType)
  fullName: com.azure.cosmos.implementation.guava25.base.Throwables.<X>propagateIfInstanceOf(Throwable throwable, Class<X> declaredType)
  overload: com.azure.cosmos.implementation.guava25.base.Throwables.propagateIfInstanceOf*
  type: Method
  package: com.azure.cosmos.implementation.guava25.base
  summary: >-
    Propagates `throwable` exactly as-is, if and only if it is an instance of `declaredType`. Example usage:


    ```java

    try {
       someMethodThatCouldThrowAnything();
     } catch (IKnowWhatToDoWithThisException e) {
       handle(e);
     } catch (Throwable t) {
       Throwables.propagateIfInstanceOf(t, IOException.class);
       Throwables.propagateIfInstanceOf(t, SQLException.class);
       throw Throwables.propagate(t);
     }
    ```
  syntax:
    content: public static void <X>propagateIfInstanceOf(Throwable throwable, Class<X> declaredType)
    parameters:
    - id: throwable
      type: java.lang.Throwable
    - id: declaredType
      type: java.lang.Class<X>
  exceptions:
  - type: X
- uid: com.azure.cosmos.implementation.guava25.base.Throwables.<X>propagateIfPossible(java.lang.Throwable,java.lang.Class<X>)
  id: <X>propagateIfPossible(java.lang.Throwable,java.lang.Class<X>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.base.Throwables
  langs:
  - java
  name: <X>propagateIfPossible(Throwable throwable, Class<X> declaredType)
  nameWithType: Throwables.<X>propagateIfPossible(Throwable throwable, Class<X> declaredType)
  fullName: com.azure.cosmos.implementation.guava25.base.Throwables.<X>propagateIfPossible(Throwable throwable, Class<X> declaredType)
  overload: com.azure.cosmos.implementation.guava25.base.Throwables.propagateIfPossible*
  type: Method
  package: com.azure.cosmos.implementation.guava25.base
  summary: >-
    Propagates `throwable` exactly as-is, if and only if it is an instance of <xref uid="java.lang.RuntimeException" data-throw-if-not-resolved="false">RuntimeException</xref>, <xref uid="" data-throw-if-not-resolved="false">Error</xref>, or `declaredType`. Example usage:


    ```java

    try {
       someMethodThatCouldThrowAnything();
     } catch (IKnowWhatToDoWithThisException e) {
       handle(e);
     } catch (Throwable t) {
       Throwables.propagateIfPossible(t, OtherException.class);
       throw new RuntimeException("unexpected", t);
     }
    ```
  syntax:
    content: public static void <X>propagateIfPossible(Throwable throwable, Class<X> declaredType)
    parameters:
    - id: throwable
      type: java.lang.Throwable
      description: the Throwable to possibly propagate
    - id: declaredType
      type: java.lang.Class<X>
      description: the single checked exception type declared by the calling method
  exceptions:
  - type: X
- uid: com.azure.cosmos.implementation.guava25.base.Throwables.<X>throwIfInstanceOf(java.lang.Throwable,java.lang.Class<X>)
  id: <X>throwIfInstanceOf(java.lang.Throwable,java.lang.Class<X>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.base.Throwables
  langs:
  - java
  name: <X>throwIfInstanceOf(Throwable throwable, Class<X> declaredType)
  nameWithType: Throwables.<X>throwIfInstanceOf(Throwable throwable, Class<X> declaredType)
  fullName: com.azure.cosmos.implementation.guava25.base.Throwables.<X>throwIfInstanceOf(Throwable throwable, Class<X> declaredType)
  overload: com.azure.cosmos.implementation.guava25.base.Throwables.throwIfInstanceOf*
  type: Method
  package: com.azure.cosmos.implementation.guava25.base
  summary: >-
    Throws `throwable` if it is an instance of `declaredType`. Example usage:


    ```java

    for (Foo foo : foos) {
       try {
         foo.bar();
       } catch (BarException | RuntimeException | Error t) {
         failure = t;
       }
     }
     if (failure != null) {
       throwIfInstanceOf(failure, BarException.class);
       throwIfUnchecked(failure);
       throw new AssertionError(failure);
     }
    ```
  syntax:
    content: public static void <X>throwIfInstanceOf(Throwable throwable, Class<X> declaredType)
    parameters:
    - id: throwable
      type: java.lang.Throwable
    - id: declaredType
      type: java.lang.Class<X>
  exceptions:
  - type: X
- uid: com.azure.cosmos.implementation.guava25.base.Throwables.Throwables()
  id: Throwables()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.base.Throwables
  langs:
  - java
  name: Throwables()
  nameWithType: Throwables.Throwables()
  fullName: com.azure.cosmos.implementation.guava25.base.Throwables.Throwables()
  overload: com.azure.cosmos.implementation.guava25.base.Throwables.Throwables*
  type: Constructor
  package: com.azure.cosmos.implementation.guava25.base
  syntax:
    content: private Throwables()
- uid: com.azure.cosmos.implementation.guava25.base.Throwables.getCausalChain(java.lang.Throwable)
  id: getCausalChain(java.lang.Throwable)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.base.Throwables
  langs:
  - java
  name: getCausalChain(Throwable throwable)
  nameWithType: Throwables.getCausalChain(Throwable throwable)
  fullName: com.azure.cosmos.implementation.guava25.base.Throwables.getCausalChain(Throwable throwable)
  overload: com.azure.cosmos.implementation.guava25.base.Throwables.getCausalChain*
  type: Method
  package: com.azure.cosmos.implementation.guava25.base
  summary: >-
    Gets a `Throwable` cause chain as a list. The first entry in the list will be `throwable` followed by its cause hierarchy. Note that this is a snapshot of the cause chain and will not reflect any subsequent changes to the cause chain.


    Here's an example of how it can be used to find specific types of exceptions in the cause chain:


    ```java

    Iterables.filter(Throwables.getCausalChain(e), IOException.class));

    ```
  syntax:
    content: public static List<Throwable> getCausalChain(Throwable throwable)
    parameters:
    - id: throwable
      type: java.lang.Throwable
      description: the non-null <code>Throwable</code> to extract causes from
    return:
      type: java.util.List<java.lang.Throwable>
      description: an unmodifiable list containing the cause chain starting with <code>throwable</code>
- uid: com.azure.cosmos.implementation.guava25.base.Throwables.getRootCause(java.lang.Throwable)
  id: getRootCause(java.lang.Throwable)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.base.Throwables
  langs:
  - java
  name: getRootCause(Throwable throwable)
  nameWithType: Throwables.getRootCause(Throwable throwable)
  fullName: com.azure.cosmos.implementation.guava25.base.Throwables.getRootCause(Throwable throwable)
  overload: com.azure.cosmos.implementation.guava25.base.Throwables.getRootCause*
  type: Method
  package: com.azure.cosmos.implementation.guava25.base
  summary: >-
    Returns the innermost cause of `throwable`. The first throwable in a chain provides context from when the error or exception was initially detected. Example usage:


    ```java

    assertEquals("Unable to assign a customer id", Throwables.getRootCause(e).getMessage());

    ```
  syntax:
    content: public static Throwable getRootCause(Throwable throwable)
    parameters:
    - id: throwable
      type: java.lang.Throwable
    return:
      type: java.lang.Throwable
- uid: com.azure.cosmos.implementation.guava25.base.Throwables.getStackTraceAsString(java.lang.Throwable)
  id: getStackTraceAsString(java.lang.Throwable)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.base.Throwables
  langs:
  - java
  name: getStackTraceAsString(Throwable throwable)
  nameWithType: Throwables.getStackTraceAsString(Throwable throwable)
  fullName: com.azure.cosmos.implementation.guava25.base.Throwables.getStackTraceAsString(Throwable throwable)
  overload: com.azure.cosmos.implementation.guava25.base.Throwables.getStackTraceAsString*
  type: Method
  package: com.azure.cosmos.implementation.guava25.base
  summary: Returns a string containing the result of <xref uid="java.lang.Throwable.toString()" data-throw-if-not-resolved="false">toString()</xref>, followed by the full, recursive stack trace of `throwable`. Note that you probably should not be parsing the resulting string; if you need programmatic access to the stack frames, you can call <xref uid="java.lang.Throwable.getStackTrace()" data-throw-if-not-resolved="false">Throwable#getStackTrace()</xref>.
  syntax:
    content: public static String getStackTraceAsString(Throwable throwable)
    parameters:
    - id: throwable
      type: java.lang.Throwable
    return:
      type: java.lang.String
- uid: com.azure.cosmos.implementation.guava25.base.Throwables.lazyStackTrace(java.lang.Throwable)
  id: lazyStackTrace(java.lang.Throwable)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.base.Throwables
  langs:
  - java
  name: lazyStackTrace(Throwable throwable)
  nameWithType: Throwables.lazyStackTrace(Throwable throwable)
  fullName: com.azure.cosmos.implementation.guava25.base.Throwables.lazyStackTrace(Throwable throwable)
  overload: com.azure.cosmos.implementation.guava25.base.Throwables.lazyStackTrace*
  type: Method
  package: com.azure.cosmos.implementation.guava25.base
  summary: >-
    Returns the stack trace of `throwable`, possibly providing slower iteration over the full trace but faster iteration over parts of the trace. Here, "slower" and "faster" are defined in comparison to the normal way to access the stack trace, <xref uid="java.lang.Throwable.getStackTrace()" data-throw-if-not-resolved="false">throwable.getStackTrace()</xref>. Note, however, that this method's special implementation is not available for all platforms and configurations. If that implementation is unavailable, this method falls back to `getStackTrace`. Callers that require the special implementation can check its availability with <xref uid="com.azure.cosmos.implementation.guava25.base.Throwables.lazyStackTraceIsLazy()" data-throw-if-not-resolved="false">#lazyStackTraceIsLazy()</xref>.


    The expected (but not guaranteed) performance of the special implementation differs from `getStackTrace` in one main way: The `lazyStackTrace` call itself returns quickly by delaying the per-stack-frame work until each element is accessed. Roughly speaking:

     *  `getStackTrace` takes `stackSize` time to return but then negligible time to retrieve each element of the returned list.
     *  `lazyStackTrace` takes negligible time to return but then `1/stackSize` time to retrieve each element of the returned list (probably slightly more than `1/stackSize`).

    Note: The special implementation does not respect calls to <xref uid="java.lang.Throwable.setStackTrace" data-throw-if-not-resolved="false">throwable.setStackTrace</xref>. Instead, it always reflects the original stack trace from the exception's creation.
  syntax:
    content: public static List<StackTraceElement> lazyStackTrace(Throwable throwable)
    parameters:
    - id: throwable
      type: java.lang.Throwable
    return:
      type: java.util.List<java.lang.StackTraceElement>
- uid: com.azure.cosmos.implementation.guava25.base.Throwables.lazyStackTraceIsLazy()
  id: lazyStackTraceIsLazy()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.base.Throwables
  langs:
  - java
  name: lazyStackTraceIsLazy()
  nameWithType: Throwables.lazyStackTraceIsLazy()
  fullName: com.azure.cosmos.implementation.guava25.base.Throwables.lazyStackTraceIsLazy()
  overload: com.azure.cosmos.implementation.guava25.base.Throwables.lazyStackTraceIsLazy*
  type: Method
  package: com.azure.cosmos.implementation.guava25.base
  summary: Returns whether <xref uid="com.azure.cosmos.implementation.guava25.base.Throwables.lazyStackTrace*" data-throw-if-not-resolved="false">#lazyStackTrace</xref> will use the special implementation described in its documentation.
  syntax:
    content: public static boolean lazyStackTraceIsLazy()
    return:
      type: boolean
- uid: com.azure.cosmos.implementation.guava25.base.Throwables.propagate(java.lang.Throwable)
  id: propagate(java.lang.Throwable)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.base.Throwables
  langs:
  - java
  name: propagate(Throwable throwable)
  nameWithType: Throwables.propagate(Throwable throwable)
  fullName: com.azure.cosmos.implementation.guava25.base.Throwables.propagate(Throwable throwable)
  overload: com.azure.cosmos.implementation.guava25.base.Throwables.propagate*
  type: Method
  package: com.azure.cosmos.implementation.guava25.base
  summary: >-
    Propagates `throwable` as-is if it is an instance of <xref uid="java.lang.RuntimeException" data-throw-if-not-resolved="false">RuntimeException</xref> or <xref uid="" data-throw-if-not-resolved="false">Error</xref>, or else as a last resort, wraps it in a `RuntimeException` and then propagates.


    This method always throws an exception. The `RuntimeException` return type allows client code to signal to the compiler that statements after the call are unreachable. Example usage:


    ```java

    T doSomething() {
       try {
         return someMethodThatCouldThrowAnything();
       } catch (IKnowWhatToDoWithThisException e) {
         return handle(e);
       } catch (Throwable t) {
         throw Throwables.propagate(t);
       }
     }
    ```
  syntax:
    content: public static RuntimeException propagate(Throwable throwable)
    parameters:
    - id: throwable
      type: java.lang.Throwable
      description: the Throwable to propagate
    return:
      type: java.lang.RuntimeException
      description: >-
        nothing will ever be returned; this return type is only for your convenience, as
             illustrated in the example above
- uid: com.azure.cosmos.implementation.guava25.base.Throwables.propagateIfPossible(java.lang.Throwable)
  id: propagateIfPossible(java.lang.Throwable)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.base.Throwables
  langs:
  - java
  name: propagateIfPossible(Throwable throwable)
  nameWithType: Throwables.propagateIfPossible(Throwable throwable)
  fullName: com.azure.cosmos.implementation.guava25.base.Throwables.propagateIfPossible(Throwable throwable)
  overload: com.azure.cosmos.implementation.guava25.base.Throwables.propagateIfPossible*
  type: Method
  package: com.azure.cosmos.implementation.guava25.base
  summary: >-
    Propagates `throwable` exactly as-is, if and only if it is an instance of <xref uid="java.lang.RuntimeException" data-throw-if-not-resolved="false">RuntimeException</xref> or <xref uid="" data-throw-if-not-resolved="false">Error</xref>. Example usage:


    ```java

    try {
       someMethodThatCouldThrowAnything();
     } catch (IKnowWhatToDoWithThisException e) {
       handle(e);
     } catch (Throwable t) {
       Throwables.propagateIfPossible(t);
       throw new RuntimeException("unexpected", t);
     }
    ```
  syntax:
    content: public static void propagateIfPossible(Throwable throwable)
    parameters:
    - id: throwable
      type: java.lang.Throwable
- uid: com.azure.cosmos.implementation.guava25.base.Throwables.throwIfUnchecked(java.lang.Throwable)
  id: throwIfUnchecked(java.lang.Throwable)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.base.Throwables
  langs:
  - java
  name: throwIfUnchecked(Throwable throwable)
  nameWithType: Throwables.throwIfUnchecked(Throwable throwable)
  fullName: com.azure.cosmos.implementation.guava25.base.Throwables.throwIfUnchecked(Throwable throwable)
  overload: com.azure.cosmos.implementation.guava25.base.Throwables.throwIfUnchecked*
  type: Method
  package: com.azure.cosmos.implementation.guava25.base
  summary: >-
    Throws `throwable` if it is a <xref uid="java.lang.RuntimeException" data-throw-if-not-resolved="false">RuntimeException</xref> or <xref uid="" data-throw-if-not-resolved="false">Error</xref>. Example usage:


    ```java

    for (Foo foo : foos) {
       try {
         foo.bar();
       } catch (RuntimeException | Error t) {
         failure = t;
       }
     }
     if (failure != null) {
       throwIfUnchecked(failure);
       throw new AssertionError(failure);
     }
    ```
  syntax:
    content: public static void throwIfUnchecked(Throwable throwable)
    parameters:
    - id: throwable
      type: java.lang.Throwable
references:
- uid: com.azure.cosmos.implementation.guava25.base.Throwables.Throwables*
  name: Throwables
  nameWithType: Throwables.Throwables
  fullName: com.azure.cosmos.implementation.guava25.base.Throwables.Throwables
  package: com.azure.cosmos.implementation.guava25.base
- uid: X
  spec.java:
  - uid: X
    name: X
    fullName: X
- uid: java.lang.Throwable
  spec.java:
  - uid: java.lang.Throwable
    name: Throwable
    fullName: java.lang.Throwable
- uid: java.lang.Class<X>
  spec.java:
  - uid: java.lang.Class
    name: Class
    fullName: java.lang.Class
  - name: <
    fullName: <
  - uid: X
    name: X
    fullName: X
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.base.Throwables.throwIfInstanceOf*
  name: <X>throwIfInstanceOf
  nameWithType: Throwables.<X>throwIfInstanceOf
  fullName: com.azure.cosmos.implementation.guava25.base.Throwables.<X>throwIfInstanceOf
  package: com.azure.cosmos.implementation.guava25.base
- uid: com.azure.cosmos.implementation.guava25.base.Throwables.propagateIfInstanceOf*
  name: <X>propagateIfInstanceOf
  nameWithType: Throwables.<X>propagateIfInstanceOf
  fullName: com.azure.cosmos.implementation.guava25.base.Throwables.<X>propagateIfInstanceOf
  package: com.azure.cosmos.implementation.guava25.base
- uid: com.azure.cosmos.implementation.guava25.base.Throwables.throwIfUnchecked*
  name: throwIfUnchecked
  nameWithType: Throwables.throwIfUnchecked
  fullName: com.azure.cosmos.implementation.guava25.base.Throwables.throwIfUnchecked
  package: com.azure.cosmos.implementation.guava25.base
- uid: com.azure.cosmos.implementation.guava25.base.Throwables.propagateIfPossible*
  name: propagateIfPossible
  nameWithType: Throwables.propagateIfPossible
  fullName: com.azure.cosmos.implementation.guava25.base.Throwables.propagateIfPossible
  package: com.azure.cosmos.implementation.guava25.base
- uid: X1
  spec.java:
  - uid: X1
    name: X1
    fullName: X1
- uid: X2
  spec.java:
  - uid: X2
    name: X2
    fullName: X2
- uid: java.lang.Class<X1>
  spec.java:
  - uid: java.lang.Class
    name: Class
    fullName: java.lang.Class
  - name: <
    fullName: <
  - uid: X1
    name: X1
    fullName: X1
  - name: '>'
    fullName: '>'
- uid: java.lang.Class<X2>
  spec.java:
  - uid: java.lang.Class
    name: Class
    fullName: java.lang.Class
  - name: <
    fullName: <
  - uid: X2
    name: X2
    fullName: X2
  - name: '>'
    fullName: '>'
- uid: java.lang.RuntimeException
  spec.java:
  - uid: java.lang.RuntimeException
    name: RuntimeException
    fullName: java.lang.RuntimeException
- uid: com.azure.cosmos.implementation.guava25.base.Throwables.propagate*
  name: propagate
  nameWithType: Throwables.propagate
  fullName: com.azure.cosmos.implementation.guava25.base.Throwables.propagate
  package: com.azure.cosmos.implementation.guava25.base
- uid: com.azure.cosmos.implementation.guava25.base.Throwables.getRootCause*
  name: getRootCause
  nameWithType: Throwables.getRootCause
  fullName: com.azure.cosmos.implementation.guava25.base.Throwables.getRootCause
  package: com.azure.cosmos.implementation.guava25.base
- uid: java.util.List<java.lang.Throwable>
  spec.java:
  - uid: java.util.List
    name: List
    fullName: java.util.List
  - name: <
    fullName: <
  - uid: java.lang.Throwable
    name: Throwable
    fullName: java.lang.Throwable
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.base.Throwables.getCausalChain*
  name: getCausalChain
  nameWithType: Throwables.getCausalChain
  fullName: com.azure.cosmos.implementation.guava25.base.Throwables.getCausalChain
  package: com.azure.cosmos.implementation.guava25.base
- uid: com.azure.cosmos.implementation.guava25.base.Throwables.getCauseAs*
  name: <X>getCauseAs
  nameWithType: Throwables.<X>getCauseAs
  fullName: com.azure.cosmos.implementation.guava25.base.Throwables.<X>getCauseAs
  package: com.azure.cosmos.implementation.guava25.base
- uid: java.lang.String
  spec.java:
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
- uid: com.azure.cosmos.implementation.guava25.base.Throwables.getStackTraceAsString*
  name: getStackTraceAsString
  nameWithType: Throwables.getStackTraceAsString
  fullName: com.azure.cosmos.implementation.guava25.base.Throwables.getStackTraceAsString
  package: com.azure.cosmos.implementation.guava25.base
- uid: java.util.List<java.lang.StackTraceElement>
  spec.java:
  - uid: java.util.List
    name: List
    fullName: java.util.List
  - name: <
    fullName: <
  - uid: java.lang.StackTraceElement
    name: StackTraceElement
    fullName: java.lang.StackTraceElement
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.base.Throwables.lazyStackTrace*
  name: lazyStackTrace
  nameWithType: Throwables.lazyStackTrace
  fullName: com.azure.cosmos.implementation.guava25.base.Throwables.lazyStackTrace
  package: com.azure.cosmos.implementation.guava25.base
- uid: boolean
  spec.java:
  - uid: boolean
    name: boolean
    fullName: boolean
- uid: com.azure.cosmos.implementation.guava25.base.Throwables.lazyStackTraceIsLazy*
  name: lazyStackTraceIsLazy
  nameWithType: Throwables.lazyStackTraceIsLazy
  fullName: com.azure.cosmos.implementation.guava25.base.Throwables.lazyStackTraceIsLazy
  package: com.azure.cosmos.implementation.guava25.base
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: java.lang.Object.finalize()
  name: Object.finalize()
  nameWithType: Object.finalize()
  fullName: java.lang.Object.finalize()
- uid: java.lang.Object.clone()
  name: Object.clone()
  nameWithType: Object.clone()
  fullName: java.lang.Object.clone()
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: java.lang.Object.equals(java.lang.Object)
  name: Object.equals(Object)
  nameWithType: Object.equals(Object)
  fullName: java.lang.Object.equals(java.lang.Object)
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.lang.Object.hashCode()
  name: Object.hashCode()
  nameWithType: Object.hashCode()
  fullName: java.lang.Object.hashCode()
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: java.lang.Object.toString()
  name: Object.toString()
  nameWithType: Object.toString()
  fullName: java.lang.Object.toString()
- uid: java.lang.Class
  name: Class
  nameWithType: Class
  fullName: java.lang.Class
- uid: java.util.List
  name: List
  nameWithType: List
  fullName: java.util.List
- uid: java.lang.StackTraceElement
  name: StackTraceElement
  nameWithType: StackTraceElement
  fullName: java.lang.StackTraceElement
