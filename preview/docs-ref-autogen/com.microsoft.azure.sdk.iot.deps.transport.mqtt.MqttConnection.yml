### YamlMime:JavaType
uid: "com.microsoft.azure.sdk.iot.deps.transport.mqtt.MqttConnection"
fullName: "com.microsoft.azure.sdk.iot.deps.transport.mqtt.MqttConnection"
name: "MqttConnection"
nameWithType: "MqttConnection"
inheritances:
- "<xref href=\"java.lang.Object?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
inheritedMembers:
- "java.lang.Object.clone()"
- "java.lang.Object.equals(java.lang.Object)"
- "java.lang.Object.finalize()"
- "java.lang.Object.getClass()"
- "java.lang.Object.hashCode()"
- "java.lang.Object.notify()"
- "java.lang.Object.notifyAll()"
- "java.lang.Object.toString()"
- "java.lang.Object.wait()"
- "java.lang.Object.wait(long)"
- "java.lang.Object.wait(long,int)"
syntax: "public class MqttConnection implements MqttCallback"
constructors:
- uid: "com.microsoft.azure.sdk.iot.deps.transport.mqtt.MqttConnection.MqttConnection(java.lang.String,java.lang.String,java.lang.String,java.lang.String,javax.net.ssl.SSLContext,com.microsoft.azure.sdk.iot.deps.transport.mqtt.MqttListener,boolean)"
  fullName: "com.microsoft.azure.sdk.iot.deps.transport.mqtt.MqttConnection.MqttConnection(String hostname, String clientId, String userName, String password, SSLContext sslContext, MqttListener listener, boolean useWebSockets)"
  name: "MqttConnection(String hostname, String clientId, String userName, String password, SSLContext sslContext, MqttListener listener, boolean useWebSockets)"
  nameWithType: "MqttConnection.MqttConnection(String hostname, String clientId, String userName, String password, SSLContext sslContext, MqttListener listener, boolean useWebSockets)"
  summary: "Constructor to create Mqtt<wbr>Async Client with Paho"
  parameters:
  - description: "Uri to connect to"
    name: "hostname"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Client Id to connect to"
    name: "clientId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Username"
    name: "userName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "password"
    name: "password"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "SSLContext for the connection"
    name: "sslContext"
    type: "<xref href=\"javax.net.ssl.SSLContext?alt=javax.net.ssl.SSLContext&text=SSLContext\" data-throw-if-not-resolved=\"False\" />"
  - description: "Mqtt listener"
    name: "listener"
    type: "<xref href=\"com.microsoft.azure.sdk.iot.deps.transport.mqtt.MqttListener?alt=com.microsoft.azure.sdk.iot.deps.transport.mqtt.MqttListener&text=MqttListener\" data-throw-if-not-resolved=\"False\" />"
  - description: "true to use Mqtt over web sockets"
    name: "useWebSockets"
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public MqttConnection(String hostname, String clientId, String userName, String password, SSLContext sslContext, MqttListener listener, boolean useWebSockets)"
  exceptions:
  - description: "is thrown if any of the parameters are null or empty or client cannot be instantiated"
    type: "<xref href=\"java.io.IOException?alt=java.io.IOException&text=IOException\" data-throw-if-not-resolved=\"False\" />"
  desc: "Constructor to create MqttAsync Client with Paho"
methods:
- uid: "com.microsoft.azure.sdk.iot.deps.transport.mqtt.MqttConnection.connect()"
  fullName: "com.microsoft.azure.sdk.iot.deps.transport.mqtt.MqttConnection.connect()"
  name: "connect()"
  nameWithType: "MqttConnection.connect()"
  summary: "Connects to the MQTT broker"
  modifiers:
  - "synchronized"
  syntax: "public synchronized void connect()"
  exceptions:
  - description: "if there is a Mqtt exception."
    type: "<xref href=\"java.io.IOException?alt=java.io.IOException&text=IOException\" data-throw-if-not-resolved=\"False\" />"
  desc: "Connects to the MQTT broker"
- uid: "com.microsoft.azure.sdk.iot.deps.transport.mqtt.MqttConnection.connectionLost(java.lang.Throwable)"
  fullName: "com.microsoft.azure.sdk.iot.deps.transport.mqtt.MqttConnection.connectionLost(Throwable throwable)"
  name: "connectionLost(Throwable throwable)"
  nameWithType: "MqttConnection.connectionLost(Throwable throwable)"
  summary: "Event fired when the connection is lost on the MQTT broker"
  modifiers:
  - "synchronized"
  parameters:
  - description: "the disconnection reason."
    name: "throwable"
    type: "<xref href=\"java.lang.Throwable?alt=java.lang.Throwable&text=Throwable\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public synchronized void connectionLost(Throwable throwable)"
  desc: "Event fired when the connection is lost on the MQTT broker"
- uid: "com.microsoft.azure.sdk.iot.deps.transport.mqtt.MqttConnection.deliveryComplete(org.eclipse.paho.client.mqttv3.IMqttDeliveryToken)"
  fullName: "com.microsoft.azure.sdk.iot.deps.transport.mqtt.MqttConnection.deliveryComplete(IMqttDeliveryToken iMqttDeliveryToken)"
  name: "deliveryComplete(IMqttDeliveryToken iMqttDeliveryToken)"
  nameWithType: "MqttConnection.deliveryComplete(IMqttDeliveryToken iMqttDeliveryToken)"
  summary: "Event fired when the message arrived on the MQTT broker."
  modifiers:
  - "synchronized"
  parameters:
  - description: "the MqttDeliveryToken for which the message was successfully sent."
    name: "iMqttDeliveryToken"
    type: "<xref href=\"org.eclipse.paho.client.mqttv3.IMqttDeliveryToken?alt=org.eclipse.paho.client.mqttv3.IMqttDeliveryToken&text=IMqttDeliveryToken\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public synchronized void deliveryComplete(IMqttDeliveryToken iMqttDeliveryToken)"
  desc: "Event fired when the message arrived on the MQTT broker."
- uid: "com.microsoft.azure.sdk.iot.deps.transport.mqtt.MqttConnection.disconnect()"
  fullName: "com.microsoft.azure.sdk.iot.deps.transport.mqtt.MqttConnection.disconnect()"
  name: "disconnect()"
  nameWithType: "MqttConnection.disconnect()"
  summary: "Disconnects from the MQTT broker"
  modifiers:
  - "synchronized"
  syntax: "public synchronized void disconnect()"
  exceptions:
  - description: "if there is a Mqtt exception."
    type: "<xref href=\"java.io.IOException?alt=java.io.IOException&text=IOException\" data-throw-if-not-resolved=\"False\" />"
  desc: "Disconnects from the MQTT broker"
- uid: "com.microsoft.azure.sdk.iot.deps.transport.mqtt.MqttConnection.isMqttConnected()"
  fullName: "com.microsoft.azure.sdk.iot.deps.transport.mqtt.MqttConnection.isMqttConnected()"
  name: "isMqttConnected()"
  nameWithType: "MqttConnection.isMqttConnected()"
  summary: "Return whether the MQTT broker is connected to the endpoint"
  syntax: "public boolean isMqttConnected()"
  desc: "Return whether the MQTT broker is connected to the endpoint"
  returns:
    description: "true if connected using Mqtt"
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.sdk.iot.deps.transport.mqtt.MqttConnection.messageArrived(java.lang.String,org.eclipse.paho.client.mqttv3.MqttMessage)"
  fullName: "com.microsoft.azure.sdk.iot.deps.transport.mqtt.MqttConnection.messageArrived(String topic, MqttMessage mqttMessage)"
  name: "messageArrived(String topic, MqttMessage mqttMessage)"
  nameWithType: "MqttConnection.messageArrived(String topic, MqttMessage mqttMessage)"
  summary: "Event fired when the message arrived on the MQTT broker."
  modifiers:
  - "synchronized"
  parameters:
  - description: "the topic on which message arrived."
    name: "topic"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "the message arrived on the Mqtt broker."
    name: "mqttMessage"
    type: "<xref href=\"org.eclipse.paho.client.mqttv3.MqttMessage?alt=org.eclipse.paho.client.mqttv3.MqttMessage&text=MqttMessage\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public synchronized void messageArrived(String topic, MqttMessage mqttMessage)"
  desc: "Event fired when the message arrived on the MQTT broker."
- uid: "com.microsoft.azure.sdk.iot.deps.transport.mqtt.MqttConnection.publishMessage(com.microsoft.azure.sdk.iot.deps.transport.mqtt.MqttMessage)"
  fullName: "com.microsoft.azure.sdk.iot.deps.transport.mqtt.MqttConnection.publishMessage(MqttMessage message)"
  name: "publishMessage(MqttMessage message)"
  nameWithType: "MqttConnection.publishMessage(MqttMessage message)"
  summary: "Sends a PUBLISH message to the MQTT broker"
  modifiers:
  - "synchronized"
  parameters:
  - description: "The message to be sent"
    name: "message"
    type: "<xref href=\"com.microsoft.azure.sdk.iot.deps.transport.mqtt.MqttMessage?alt=com.microsoft.azure.sdk.iot.deps.transport.mqtt.MqttMessage&text=MqttMessage\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public synchronized void publishMessage(MqttMessage message)"
  exceptions:
  - description: "if there is a Mqtt exception."
    type: "<xref href=\"java.io.IOException?alt=java.io.IOException&text=IOException\" data-throw-if-not-resolved=\"False\" />"
  desc: "Sends a PUBLISH message to the MQTT broker"
- uid: "com.microsoft.azure.sdk.iot.deps.transport.mqtt.MqttConnection.publishMessage(java.lang.String,com.microsoft.azure.sdk.iot.deps.transport.mqtt.MqttQos,byte[])"
  fullName: "com.microsoft.azure.sdk.iot.deps.transport.mqtt.MqttConnection.publishMessage(String topic, MqttQos qos, byte[] message)"
  name: "publishMessage(String topic, MqttQos qos, byte[] message)"
  nameWithType: "MqttConnection.publishMessage(String topic, MqttQos qos, byte[] message)"
  summary: "Sends a PUBLISH message to the MQTT broker"
  modifiers:
  - "synchronized"
  parameters:
  - description: "The topic of the message"
    name: "topic"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The QOS of the message"
    name: "qos"
    type: "<xref href=\"com.microsoft.azure.sdk.iot.deps.transport.mqtt.MqttQos?alt=com.microsoft.azure.sdk.iot.deps.transport.mqtt.MqttQos&text=MqttQos\" data-throw-if-not-resolved=\"False\" />"
  - description: "The message to be sent"
    name: "message"
    type: "<xref href=\"byte?alt=byte&text=byte\" data-throw-if-not-resolved=\"False\" />[]"
  syntax: "public synchronized void publishMessage(String topic, MqttQos qos, byte[] message)"
  exceptions:
  - description: "if there is a Mqtt exception."
    type: "<xref href=\"java.io.IOException?alt=java.io.IOException&text=IOException\" data-throw-if-not-resolved=\"False\" />"
  desc: "Sends a PUBLISH message to the MQTT broker"
- uid: "com.microsoft.azure.sdk.iot.deps.transport.mqtt.MqttConnection.subscribe(java.lang.String,com.microsoft.azure.sdk.iot.deps.transport.mqtt.MqttQos)"
  fullName: "com.microsoft.azure.sdk.iot.deps.transport.mqtt.MqttConnection.subscribe(String topic, MqttQos qos)"
  name: "subscribe(String topic, MqttQos qos)"
  nameWithType: "MqttConnection.subscribe(String topic, MqttQos qos)"
  summary: "Send the SUBSCRIBE message to the MQTT broker"
  modifiers:
  - "synchronized"
  parameters:
  - description: "The topic of the message"
    name: "topic"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The QOS of the message"
    name: "qos"
    type: "<xref href=\"com.microsoft.azure.sdk.iot.deps.transport.mqtt.MqttQos?alt=com.microsoft.azure.sdk.iot.deps.transport.mqtt.MqttQos&text=MqttQos\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public synchronized void subscribe(String topic, MqttQos qos)"
  exceptions:
  - description: "if there is a Mqtt exception."
    type: "<xref href=\"java.io.IOException?alt=java.io.IOException&text=IOException\" data-throw-if-not-resolved=\"False\" />"
  desc: "Send the SUBSCRIBE message to the MQTT broker"
- uid: "com.microsoft.azure.sdk.iot.deps.transport.mqtt.MqttConnection.unsubscribe(java.lang.String)"
  fullName: "com.microsoft.azure.sdk.iot.deps.transport.mqtt.MqttConnection.unsubscribe(String topic)"
  name: "unsubscribe(String topic)"
  nameWithType: "MqttConnection.unsubscribe(String topic)"
  summary: "Send the UNSUBSCRIBE message to the MQTT broker"
  modifiers:
  - "synchronized"
  parameters:
  - description: "Name of the Topic to unsubscribe."
    name: "topic"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public synchronized void unsubscribe(String topic)"
  exceptions:
  - description: "if there is a Mqtt exception."
    type: "<xref href=\"java.io.IOException?alt=java.io.IOException&text=IOException\" data-throw-if-not-resolved=\"False\" />"
  desc: "Send the UNSUBSCRIBE message to the MQTT broker"
type: "class"
implements:
- "<xref href=\"org.eclipse.paho.client.mqttv3.MqttCallback?alt=org.eclipse.paho.client.mqttv3.MqttCallback&text=MqttCallback\" data-throw-if-not-resolved=\"False\" />"
metadata: {}
package: "com.microsoft.azure.sdk.iot.deps.transport.mqtt"
artifact: com.microsoft.azure.sdk.iot:iot-deps-preview:1.1.0
