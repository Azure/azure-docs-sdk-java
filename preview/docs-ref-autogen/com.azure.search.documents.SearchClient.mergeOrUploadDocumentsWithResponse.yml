### YamlMime:JavaMember
uid: "com.azure.search.documents.SearchClient.mergeOrUploadDocumentsWithResponse*"
fullName: "com.azure.search.documents.SearchClient.mergeOrUploadDocumentsWithResponse"
name: "mergeOrUploadDocumentsWithResponse"
nameWithType: "SearchClient.mergeOrUploadDocumentsWithResponse"
members:
- uid: "com.azure.search.documents.SearchClient.mergeOrUploadDocumentsWithResponse(java.lang.Iterable<?>,com.azure.search.documents.models.IndexDocumentsOptions,com.azure.core.util.Context)"
  fullName: "com.azure.search.documents.SearchClient.mergeOrUploadDocumentsWithResponse(Iterable<?> documents, IndexDocumentsOptions options, Context context)"
  name: "mergeOrUploadDocumentsWithResponse(Iterable<?> documents, IndexDocumentsOptions options, Context context)"
  nameWithType: "SearchClient.mergeOrUploadDocumentsWithResponse(Iterable<?> documents, IndexDocumentsOptions options, Context context)"
  summary: "This action behaves like merge if a document with the given key already exists in the index. If the document does not exist, it behaves like upload with a new document.\n\nIf the type of the document contains non-nullable primitive-typed properties, these properties may not merge correctly. If you do not set such a property, it will automatically take its default value (for example, `0` for `int` or false for `boolean`), which will override the value of the property currently stored in the index, even if this was not your intent. For this reason, it is strongly recommended that you always declare primitive-typed properties with their class equivalents (for example, an integer property should be of type `Integer` instead of `int`).\n\n**Code Sample**\n\nMerge or upload dynamic SearchDocument.\n\n```java\nSearchDocument searchDocument = new SearchDocument();\n searchDocument.put(\"hotelId\", \"1\");\n searchDocument.put(\"hotelName\", \"test\");\n Response<IndexDocumentsResult> resultResponse = searchClient.mergeOrUploadDocumentsWithResponse(\n     Collections.singletonList(searchDocument), null, new Context(key1, value1));\n System.out.println(\"The status code of the response is \" + resultResponse.getStatusCode());\n for (IndexingResult indexingResult : resultResponse.getValue().getResults()) {\n     System.out.printf(\"Does document with key %s mergeOrUpload successfully? %b%n\", indexingResult.getKey(),\n         indexingResult.isSucceeded());\n }\n```"
  parameters:
  - description: "collection of documents to be merged, if exists, otherwise uploaded"
    name: "documents"
    type: "<xref href=\"java.lang.Iterable?alt=java.lang.Iterable&text=Iterable\" data-throw-if-not-resolved=\"False\" />&lt;?&gt;"
  - description: "Options that allow specifying document indexing behavior."
    name: "options"
    type: "<xref href=\"com.azure.search.documents.models.IndexDocumentsOptions?alt=com.azure.search.documents.models.IndexDocumentsOptions&text=IndexDocumentsOptions\" data-throw-if-not-resolved=\"False\" />"
  - description: "additional context that is passed through the Http pipeline during the service call"
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<IndexDocumentsResult> mergeOrUploadDocumentsWithResponse(Iterable<?> documents, IndexDocumentsOptions options, Context context)"
  returns:
    description: "response containing a document index result"
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.search.documents.models.IndexDocumentsResult?alt=com.azure.search.documents.models.IndexDocumentsResult&text=IndexDocumentsResult\" data-throw-if-not-resolved=\"False\" />&gt;"
type: "method"
metadata: {}
package: "com.azure.search.documents"
artifact: com.azure:azure-search-documents:11.2.0-beta.3
