### YamlMime:JavaMember
uid: "com.fasterxml.jackson.databind.type.TypeFactory.constructRawCollectionLikeType*"
fullName: "com.fasterxml.jackson.databind.type.TypeFactory.constructRawCollectionLikeType"
name: "constructRawCollectionLikeType"
nameWithType: "TypeFactory.constructRawCollectionLikeType"
members:
- uid: "com.fasterxml.jackson.databind.type.TypeFactory.constructRawCollectionLikeType(java.lang.Class<?>)"
  fullName: "com.fasterxml.jackson.databind.type.TypeFactory.constructRawCollectionLikeType(Class<?> collectionClass)"
  name: "constructRawCollectionLikeType(Class<?> collectionClass)"
  nameWithType: "TypeFactory.constructRawCollectionLikeType(Class<?> collectionClass)"
  summary: "Method that can be used to construct \"raw\" Collection-like type; meaning that its parameterization is unknown. This is similar to using `Object.class` parameterization, and is equivalent to calling:\n\n```java\ntypeFactory.constructCollectionLikeType(collectionClass, typeFactory.unknownType());\n```\n\nThis method should only be used if parameterization is completely unavailable."
  parameters:
  - name: "collectionClass"
    type: "<xref href=\"java.lang.Class?alt=java.lang.Class&text=Class\" data-throw-if-not-resolved=\"False\" />&lt;?&gt;"
  syntax: "public CollectionLikeType constructRawCollectionLikeType(Class<?> collectionClass)"
  returns:
    type: "<xref href=\"com.fasterxml.jackson.databind.type.CollectionLikeType?alt=com.fasterxml.jackson.databind.type.CollectionLikeType&text=CollectionLikeType\" data-throw-if-not-resolved=\"False\" />"
type: "method"
metadata: {}
package: "com.fasterxml.jackson.databind.type"
artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
