### YamlMime:ManagedReference
items:
- uid: com.azure.storage.blob.nio.AzureDirectoryStream
  id: AzureDirectoryStream
  artifact: com.azure:azure-storage-blob-nio:12.0.0-beta.2
  parent: com.azure.storage.blob.nio
  children:
  - com.azure.storage.blob.nio.AzureDirectoryStream.close()
  - com.azure.storage.blob.nio.AzureDirectoryStream.iterator()
  langs:
  - java
  name: AzureDirectoryStream
  nameWithType: AzureDirectoryStream
  fullName: com.azure.storage.blob.nio.AzureDirectoryStream
  type: Class
  package: com.azure.storage.blob.nio
  summary: A type for iterating over the contents of a directory. This type is asynchronously closeable, i.e. closing the stream from any thread will cause the stream to stop returning elements at that point. \{@inheritDoc\}
  syntax:
    content: public final class AzureDirectoryStream implements DirectoryStream<Path>
  inheritance:
  - java.lang.Object
  implements:
  - java.nio.file.DirectoryStream<java.nio.file.Path>
  inheritedMembers:
  - java.lang.Object.clone()
  - java.lang.Object.equals(java.lang.Object)
  - java.lang.Object.finalize()
  - java.lang.Object.getClass()
  - java.lang.Object.hashCode()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.toString()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
- uid: com.azure.storage.blob.nio.AzureDirectoryStream.AzureDirectoryStream(com.azure.storage.blob.nio.AzurePath,java.nio.file.DirectoryStream.Filter<? super java.nio.file.Path>)
  id: AzureDirectoryStream(com.azure.storage.blob.nio.AzurePath,java.nio.file.DirectoryStream.Filter<? super java.nio.file.Path>)
  artifact: com.azure:azure-storage-blob-nio:12.0.0-beta.2
  parent: com.azure.storage.blob.nio.AzureDirectoryStream
  langs:
  - java
  name: AzureDirectoryStream(AzurePath path, DirectoryStream.Filter<? super Path> filter)
  nameWithType: AzureDirectoryStream.AzureDirectoryStream(AzurePath path, DirectoryStream.Filter<? super Path> filter)
  fullName: com.azure.storage.blob.nio.AzureDirectoryStream.AzureDirectoryStream(AzurePath path, DirectoryStream.Filter<? super Path> filter)
  overload: com.azure.storage.blob.nio.AzureDirectoryStream.AzureDirectoryStream*
  type: Constructor
  package: com.azure.storage.blob.nio
  syntax:
    content: " AzureDirectoryStream(AzurePath path, DirectoryStream.Filter<? super Path> filter)"
    parameters:
    - id: path
      type: com.azure.storage.blob.nio.AzurePath
    - id: filter
      type: java.nio.file.DirectoryStream.Filter<? super java.nio.file.Path>
- uid: com.azure.storage.blob.nio.AzureDirectoryStream.close()
  id: close()
  artifact: com.azure:azure-storage-blob-nio:12.0.0-beta.2
  parent: com.azure.storage.blob.nio.AzureDirectoryStream
  langs:
  - java
  name: close()
  nameWithType: AzureDirectoryStream.close()
  fullName: com.azure.storage.blob.nio.AzureDirectoryStream.close()
  overload: com.azure.storage.blob.nio.AzureDirectoryStream.close*
  type: Method
  package: com.azure.storage.blob.nio
  syntax:
    content: public void close()
  exceptions:
  - type: java.io.IOException
- uid: com.azure.storage.blob.nio.AzureDirectoryStream.iterator()
  id: iterator()
  artifact: com.azure:azure-storage-blob-nio:12.0.0-beta.2
  parent: com.azure.storage.blob.nio.AzureDirectoryStream
  langs:
  - java
  name: iterator()
  nameWithType: AzureDirectoryStream.iterator()
  fullName: com.azure.storage.blob.nio.AzureDirectoryStream.iterator()
  overload: com.azure.storage.blob.nio.AzureDirectoryStream.iterator*
  type: Method
  package: com.azure.storage.blob.nio
  syntax:
    content: public Iterator<Path> iterator()
    return:
      type: java.util.Iterator<java.nio.file.Path>
references:
- uid: com.azure.storage.blob.nio.AzurePath
  name: AzurePath
  nameWithType: AzurePath
  fullName: com.azure.storage.blob.nio.AzurePath
- uid: java.nio.file.DirectoryStream.Filter<? super java.nio.file.Path>
  spec.java:
  - uid: java.nio.file.DirectoryStream.Filter
    name: Filter
    fullName: java.nio.file.DirectoryStream.Filter
  - name: <
    fullName: <
  - uid: '? super java.nio.file.Path'
    name: Path
    fullName: '? super java.nio.file.Path'
  - name: '>'
    fullName: '>'
- uid: com.azure.storage.blob.nio.AzureDirectoryStream.AzureDirectoryStream*
  name: AzureDirectoryStream
  nameWithType: AzureDirectoryStream.AzureDirectoryStream
  fullName: com.azure.storage.blob.nio.AzureDirectoryStream.AzureDirectoryStream
  package: com.azure.storage.blob.nio
- uid: java.util.Iterator<java.nio.file.Path>
  spec.java:
  - uid: java.util.Iterator
    name: Iterator
    fullName: java.util.Iterator
  - name: <
    fullName: <
  - uid: java.nio.file.Path
    name: Path
    fullName: java.nio.file.Path
  - name: '>'
    fullName: '>'
- uid: com.azure.storage.blob.nio.AzureDirectoryStream.iterator*
  name: iterator
  nameWithType: AzureDirectoryStream.iterator
  fullName: com.azure.storage.blob.nio.AzureDirectoryStream.iterator
  package: com.azure.storage.blob.nio
- uid: java.io.IOException
  spec.java:
  - uid: java.io.IOException
    name: IOException
    fullName: java.io.IOException
- uid: com.azure.storage.blob.nio.AzureDirectoryStream.close*
  name: close
  nameWithType: AzureDirectoryStream.close
  fullName: com.azure.storage.blob.nio.AzureDirectoryStream.close
  package: com.azure.storage.blob.nio
- uid: java.nio.file.DirectoryStream<java.nio.file.Path>
  name: DirectoryStream<Path>
  nameWithType: DirectoryStream<Path>
  fullName: java.nio.file.DirectoryStream<java.nio.file.Path>
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: java.lang.Object.finalize()
  name: Object.finalize()
  nameWithType: Object.finalize()
  fullName: java.lang.Object.finalize()
- uid: java.lang.Object.clone()
  name: Object.clone()
  nameWithType: Object.clone()
  fullName: java.lang.Object.clone()
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: java.lang.Object.equals(java.lang.Object)
  name: Object.equals(Object)
  nameWithType: Object.equals(Object)
  fullName: java.lang.Object.equals(java.lang.Object)
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.lang.Object.hashCode()
  name: Object.hashCode()
  nameWithType: Object.hashCode()
  fullName: java.lang.Object.hashCode()
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: java.lang.Object.toString()
  name: Object.toString()
  nameWithType: Object.toString()
  fullName: java.lang.Object.toString()
- uid: '? super java.nio.file.Path'
  name: '? super Path'
  nameWithType: '? super Path'
  fullName: '? super java.nio.file.Path'
- uid: java.nio.file.DirectoryStream.Filter
  name: DirectoryStream.Filter
  nameWithType: DirectoryStream.Filter
  fullName: java.nio.file.DirectoryStream.Filter
- uid: java.util.Iterator
  name: Iterator
  nameWithType: Iterator
  fullName: java.util.Iterator
- uid: java.nio.file.Path
  name: Path
  nameWithType: Path
  fullName: java.nio.file.Path
- uid: java.nio.file.DirectoryStream
  name: DirectoryStream
  nameWithType: DirectoryStream
  fullName: java.nio.file.DirectoryStream
