### YamlMime:JavaType
uid: "com.azure.data.schemaregistry.apacheavro.SchemaRegistryApacheAvroSerializer"
fullName: "com.azure.data.schemaregistry.apacheavro.SchemaRegistryApacheAvroSerializer"
name: "SchemaRegistryApacheAvroSerializer"
nameWithType: "SchemaRegistryApacheAvroSerializer"
summary: "Schema Registry-based serializer implementation for Avro data format using Apache Avro.\n\n**Creating a <xref uid=\"com.azure.data.schemaregistry.apacheavro.SchemaRegistryApacheAvroSerializer\" data-throw-if-not-resolved=\"false\" data-raw-source=\"SchemaRegistryApacheAvroSerializer\"></xref>**\n\n```java\nTokenCredential tokenCredential = new DefaultAzureCredentialBuilder().build();\n SchemaRegistryAsyncClient schemaRegistryAsyncClient = new SchemaRegistryClientBuilder()\n     .credential(tokenCredential)\n     .fullyQualifiedNamespace(\"{schema-registry-endpoint}\")\n     .buildAsyncClient();\n\n // By setting autoRegisterSchema to true, if the schema does not exist in the Schema Registry instance, it is\n // added to the instance. By default, this is false, so it will error if the schema is not found.\n SchemaRegistryApacheAvroSerializer serializer = new SchemaRegistryApacheAvroSerializerBuilder()\n     .schemaRegistryAsyncClient(schemaRegistryAsyncClient)\n     .autoRegisterSchema(true)\n     .schemaGroup(\"{schema-group}\")\n     .buildSerializer();\n```\n\n**Serialize an object**\n\nSerializes an Avro generated object into <xref uid=\"com.azure.core.experimental.models.MessageWithMetadata\" data-throw-if-not-resolved=\"false\" data-raw-source=\"MessageWithMetadata\"></xref>. <xref uid=\"com.azure.data.schemaregistry.apacheavro.SchemaRegistryApacheAvroSerializer.<T>serializeMessageData(java.lang.Object,com.azure.core.util.serializer.TypeReference<T>)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#serializeMessageData(Object, TypeReference)\"></xref> assumes that there is a no argument constructor used to instantiate the <xref uid=\"com.azure.core.experimental.models.MessageWithMetadata\" data-throw-if-not-resolved=\"false\" data-raw-source=\"MessageWithMetadata\"></xref> type. If there is a different way to instantiate the concrete type, use the overload which takes a message factory function, <xref uid=\"com.azure.data.schemaregistry.apacheavro.SchemaRegistryApacheAvroSerializer.<T>serializeMessageData(java.lang.Object,com.azure.core.util.serializer.TypeReference<T>,java.util.function.Function<com.azure.core.util.BinaryData,T>)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#serializeMessageData(Object, TypeReference, Function)\"></xref>.\n\n```java\n// The object to encode. The avro schema is:\n // {\n //     \"namespace\": \"com.azure.data.schemaregistry.apacheavro.generatedtestsources\",\n //     \"type\": \"record\",\n //     \"name\": \"Person\",\n //     \"fields\": [\n //         {\"name\":\"name\", \"type\": \"string\"},\n //         {\"name\":\"favourite_number\", \"type\": [\"int\", \"null\"]},\n //         {\"name\":\"favourite_colour\", \"type\": [\"string\", \"null\"]}\n //   ]\n // }\n Person person = Person.newBuilder()\n     .setName(\"Alina\")\n     .setFavouriteColour(\"Turquoise\")\n     .build();\n\n MessageWithMetadata message = serializer.serializeMessageData(person,\n     TypeReference.createInstance(MessageWithMetadata.class));\n```\n\n**Deserialize an object**\n\n```java\n// Message to deserialize. Assume that the body contains data which has been serialized using an Avro encoder.\n MessageWithMetadata message = new MessageWithMetadata()\n     .setBodyAsBinaryData(BinaryData.fromBytes(new byte[0]))\n     .setContentType(\"avro/binary+{schema-id}\");\n\n // This is an object generated from the Avro schema used in the serialization sample.\n Person person = serializer.deserializeMessageData(message, TypeReference.createInstance(Person.class));\n```\n\n**Serialize an object using a message factory**\n\nSerializes an Avro generated object into <xref uid=\"com.azure.core.experimental.models.MessageWithMetadata\" data-throw-if-not-resolved=\"false\" data-raw-source=\"MessageWithMetadata\"></xref>. It uses the <xref uid=\"java.util.function.Function\" data-throw-if-not-resolved=\"false\" data-raw-source=\"messageFactory\"></xref> to instantiate and populate the type.\n\n```java\n// The object to encode. The avro schema is:\n // {\n //     \"namespace\": \"com.azure.data.schemaregistry.apacheavro.generatedtestsources\",\n //     \"type\": \"record\",\n //     \"name\": \"Person\",\n //     \"fields\": [\n //         {\"name\":\"name\", \"type\": \"string\"},\n //         {\"name\":\"favourite_number\", \"type\": [\"int\", \"null\"]},\n //         {\"name\":\"favourite_colour\", \"type\": [\"string\", \"null\"]}\n //   ]\n // }\n Person person = Person.newBuilder()\n     .setName(\"Alina\")\n     .setFavouriteColour(\"Turquoise\")\n     .build();\n\n // Serializes and creates an instance of ComplexMessage using the messageFactory function.\n ComplexMessage message = serializer.serializeMessageData(person,\n     TypeReference.createInstance(ComplexMessage.class),\n     (encodedData) -> {\n         return new ComplexMessage(\"unique-id\", OffsetDateTime.now());\n     });\n```"
inheritances:
- "<xref href=\"java.lang.Object\" data-throw-if-not-resolved=\"False\" />"
inheritedMembers:
- "java.lang.Object.clone()"
- "java.lang.Object.equals(java.lang.Object)"
- "java.lang.Object.finalize()"
- "java.lang.Object.getClass()"
- "java.lang.Object.hashCode()"
- "java.lang.Object.notify()"
- "java.lang.Object.notifyAll()"
- "java.lang.Object.toString()"
- "java.lang.Object.wait()"
- "java.lang.Object.wait(long)"
- "java.lang.Object.wait(long,int)"
syntax: "public final class SchemaRegistryApacheAvroSerializer"
methods:
- "com.azure.data.schemaregistry.apacheavro.SchemaRegistryApacheAvroSerializer.<T>deserializeMessageData(com.azure.core.experimental.models.MessageWithMetadata,com.azure.core.util.serializer.TypeReference<T>)"
- "com.azure.data.schemaregistry.apacheavro.SchemaRegistryApacheAvroSerializer.<T>deserializeMessageDataAsync(com.azure.core.experimental.models.MessageWithMetadata,com.azure.core.util.serializer.TypeReference<T>)"
- "com.azure.data.schemaregistry.apacheavro.SchemaRegistryApacheAvroSerializer.<T>serializeMessageData(java.lang.Object,com.azure.core.util.serializer.TypeReference<T>)"
- "com.azure.data.schemaregistry.apacheavro.SchemaRegistryApacheAvroSerializer.<T>serializeMessageData(java.lang.Object,com.azure.core.util.serializer.TypeReference<T>,java.util.function.Function<com.azure.core.util.BinaryData,T>)"
- "com.azure.data.schemaregistry.apacheavro.SchemaRegistryApacheAvroSerializer.<T>serializeMessageDataAsync(java.lang.Object,com.azure.core.util.serializer.TypeReference<T>)"
- "com.azure.data.schemaregistry.apacheavro.SchemaRegistryApacheAvroSerializer.<T>serializeMessageDataAsync(java.lang.Object,com.azure.core.util.serializer.TypeReference<T>,java.util.function.Function<com.azure.core.util.BinaryData,T>)"
type: "class"
metadata: {}
package: "com.azure.data.schemaregistry.apacheavro"
artifact: com.azure:azure-data-schemaregistry-apacheavro:1.0.0-beta.11
