### YamlMime:JavaType
uid: "com.azure.developer.loadtesting.TestRunClient"
fullName: "com.azure.developer.loadtesting.TestRunClient"
name: "TestRunClient"
nameWithType: "TestRunClient"
summary: "Initializes a new instance of the synchronous Load<wbr>Testing<wbr>Client type."
inheritances:
- "<xref href=\"java.lang.Object?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
inheritedClassMethods:
- classRef: "java.lang.<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html\">Object</a>"
  methodsRef:
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#clone--\">clone</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#equals-java.lang.Object-\">equals</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#finalize--\">finalize</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#getClass--\">getClass</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#hashCode--\">hashCode</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#notify--\">notify</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#notifyAll--\">notifyAll</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#toString--\">toString</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#wait--\">wait</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#wait-long-\">wait</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#wait-long-int-\">wait</a>"
syntax: "public final class **TestRunClient**"
methods:
- uid: "com.azure.developer.loadtesting.TestRunClient.createOrUpdateTestRunWithResponse(java.lang.String,com.azure.core.util.BinaryData,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.developer.loadtesting.TestRunClient.createOrUpdateTestRunWithResponse(String testRunId, BinaryData body, RequestOptions requestOptions)"
  name: "createOrUpdateTestRunWithResponse(String testRunId, BinaryData body, RequestOptions requestOptions)"
  nameWithType: "TestRunClient.createOrUpdateTestRunWithResponse(String testRunId, BinaryData body, RequestOptions requestOptions)"
  summary: "Create and start a new test run with the given name."
  parameters:
  - description: "Unique name of the load test run, must be a valid URL character ^[a-z0-9_-]*$."
    name: "testRunId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "Load test run model."
    name: "body"
    type: "<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<BinaryData> createOrUpdateTestRunWithResponse(String testRunId, BinaryData body, RequestOptions requestOptions)"
  desc: "Create and start a new test run with the given name.\n\n**Query Parameters**\n\n    | ------------ | ------ | -------- | ------------------------------------------ |\n    | Name         | Type   | Required | Description                                |\n    | oldTestRunId | String | No       | Existing test run Id that should be rerun. |\n\nYou can add these to a request with <xref uid=\"com.azure.core.http.rest.RequestOptions.addQueryParam\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RequestOptions#addQueryParam\"></xref>\n\n**Request Body Schema**\n\n```java\n{\n     testRunId: String (Optional)\n     displayName: String (Optional)\n     testId: String (Optional)\n     resourceId: String (Optional)\n     description: String (Optional)\n     status: String (Optional)\n     startDateTime: OffsetDateTime (Optional)\n     endDateTime: OffsetDateTime (Optional)\n     loadTestConfig (Optional): {\n         engineInstances: Integer (Optional)\n         splitAllCSVs: Boolean (Optional)\n     }\n     testResult: String (Optional)\n     passFailCriteria (Optional): {\n         passFailMetrics (Optional): {\n             String (Optional): {\n                 clientmetric: String (Optional)\n                 aggregate: String (Optional)\n                 condition: String (Optional)\n                 requestName: String (Optional)\n                 value: Double (Optional)\n                 action: String (Optional)\n                 actualValue: Double (Optional)\n                 result: String (Optional)\n             }\n         }\n     }\n     testArtifacts (Optional): {\n         inputArtifacts (Required): {\n             configUrl (Optional): {\n                 url: String (Optional)\n                 fileId: String (Optional)\n                 filename: String (Optional)\n                 fileType: String(0/1/2) (Optional)\n                 expireTime: OffsetDateTime (Optional)\n                 validationStatus: String (Optional)\n             }\n             testScriptUrl (Optional): (recursive schema, see testScriptUrl above)\n             userPropUrl (Optional): (recursive schema, see userPropUrl above)\n             inputArtifactsZipFileurl (Optional): (recursive schema, see inputArtifactsZipFileurl above)\n             additionalUrls (Optional): [\n                 (recursive schema, see above)\n             ]\n         }\n         outputArtifacts (Optional): {\n             resultUrl (Optional): (recursive schema, see resultUrl above)\n             logsUrl (Optional): (recursive schema, see logsUrl above)\n         }\n     }\n     executedDateTime: OffsetDateTime (Optional)\n     vusers: Integer (Optional)\n     testRunStatistics (Optional): {\n         String (Optional): {\n             transaction: String (Optional)\n             sampleCount: Double (Optional)\n             errorCount: Double (Optional)\n             errorPct: Double (Optional)\n             meanResTime: Double (Optional)\n             medianResTime: Double (Optional)\n             maxResTime: Double (Optional)\n             minResTime: Double (Optional)\n             pct1ResTime: Double (Optional)\n             pct2ResTime: Double (Optional)\n             pct3ResTime: Double (Optional)\n             throughput: Double (Optional)\n             receivedKBytesPerSec: Double (Optional)\n             sentKBytesPerSec: Double (Optional)\n         }\n     }\n     createdDateTime: OffsetDateTime (Optional)\n     createdBy: String (Optional)\n     lastModifiedDateTime: OffsetDateTime (Optional)\n     lastModifiedBy: String (Optional)\n     portalUrl: String (Optional)\n     secrets (Optional): {\n         String (Optional): {\n             value: String (Optional)\n             type: String (Optional)\n         }\n     }\n     environmentVariables (Optional): {\n         String: String (Optional)\n     }\n     duration: Long (Optional)\n     subnetId: String (Optional)\n }\n```\n\n**Response Body Schema**\n\n```java\n{\n     testRunId: String (Optional)\n     displayName: String (Optional)\n     testId: String (Optional)\n     resourceId: String (Optional)\n     description: String (Optional)\n     status: String (Optional)\n     startDateTime: OffsetDateTime (Optional)\n     endDateTime: OffsetDateTime (Optional)\n     loadTestConfig (Optional): {\n         engineInstances: Integer (Optional)\n         splitAllCSVs: Boolean (Optional)\n     }\n     testResult: String (Optional)\n     passFailCriteria (Optional): {\n         passFailMetrics (Optional): {\n             String (Optional): {\n                 clientmetric: String (Optional)\n                 aggregate: String (Optional)\n                 condition: String (Optional)\n                 requestName: String (Optional)\n                 value: Double (Optional)\n                 action: String (Optional)\n                 actualValue: Double (Optional)\n                 result: String (Optional)\n             }\n         }\n     }\n     testArtifacts (Optional): {\n         inputArtifacts (Required): {\n             configUrl (Optional): {\n                 url: String (Optional)\n                 fileId: String (Optional)\n                 filename: String (Optional)\n                 fileType: String(0/1/2) (Optional)\n                 expireTime: OffsetDateTime (Optional)\n                 validationStatus: String (Optional)\n             }\n             testScriptUrl (Optional): (recursive schema, see testScriptUrl above)\n             userPropUrl (Optional): (recursive schema, see userPropUrl above)\n             inputArtifactsZipFileurl (Optional): (recursive schema, see inputArtifactsZipFileurl above)\n             additionalUrls (Optional): [\n                 (recursive schema, see above)\n             ]\n         }\n         outputArtifacts (Optional): {\n             resultUrl (Optional): (recursive schema, see resultUrl above)\n             logsUrl (Optional): (recursive schema, see logsUrl above)\n         }\n     }\n     executedDateTime: OffsetDateTime (Optional)\n     vusers: Integer (Optional)\n     testRunStatistics (Optional): {\n         String (Optional): {\n             transaction: String (Optional)\n             sampleCount: Double (Optional)\n             errorCount: Double (Optional)\n             errorPct: Double (Optional)\n             meanResTime: Double (Optional)\n             medianResTime: Double (Optional)\n             maxResTime: Double (Optional)\n             minResTime: Double (Optional)\n             pct1ResTime: Double (Optional)\n             pct2ResTime: Double (Optional)\n             pct3ResTime: Double (Optional)\n             throughput: Double (Optional)\n             receivedKBytesPerSec: Double (Optional)\n             sentKBytesPerSec: Double (Optional)\n         }\n     }\n     createdDateTime: OffsetDateTime (Optional)\n     createdBy: String (Optional)\n     lastModifiedDateTime: OffsetDateTime (Optional)\n     lastModifiedBy: String (Optional)\n     portalUrl: String (Optional)\n     secrets (Optional): {\n         String (Optional): {\n             value: String (Optional)\n             type: String (Optional)\n         }\n     }\n     environmentVariables (Optional): {\n         String: String (Optional)\n     }\n     duration: Long (Optional)\n     subnetId: String (Optional)\n }\n```"
  returns:
    description: "load test run model along with <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.developer.loadtesting.TestRunClient.deleteTestRunWithResponse(java.lang.String,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.developer.loadtesting.TestRunClient.deleteTestRunWithResponse(String testRunId, RequestOptions requestOptions)"
  name: "deleteTestRunWithResponse(String testRunId, RequestOptions requestOptions)"
  nameWithType: "TestRunClient.deleteTestRunWithResponse(String testRunId, RequestOptions requestOptions)"
  summary: "Delete a test run by its name."
  parameters:
  - description: "Unique name of the load test run, must be a valid URL character ^[a-z0-9_-]*$."
    name: "testRunId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<Void> deleteTestRunWithResponse(String testRunId, RequestOptions requestOptions)"
  desc: "Delete a test run by its name."
  returns:
    description: "the <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Void.html\">Void</a>&gt;"
- uid: "com.azure.developer.loadtesting.TestRunClient.getTestRunClientMetricsFiltersWithResponse(java.lang.String,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.developer.loadtesting.TestRunClient.getTestRunClientMetricsFiltersWithResponse(String testRunId, RequestOptions requestOptions)"
  name: "getTestRunClientMetricsFiltersWithResponse(String testRunId, RequestOptions requestOptions)"
  nameWithType: "TestRunClient.getTestRunClientMetricsFiltersWithResponse(String testRunId, RequestOptions requestOptions)"
  summary: "Get all filters that are supported for client metrics for a given load test run."
  parameters:
  - description: "Unique name for load test run, must be a valid URL character ^[a-z0-9_-]*$."
    name: "testRunId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<BinaryData> getTestRunClientMetricsFiltersWithResponse(String testRunId, RequestOptions requestOptions)"
  desc: "Get all filters that are supported for client metrics for a given load test run.\n\n**Response Body Schema**\n\n```java\n{\n     testRunId: String (Optional)\n     filters (Optional): {\n         requestSamplerValues (Optional): [\n             String (Optional)\n         ]\n         errorFiltersValues (Optional): [\n             String (Optional)\n         ]\n     }\n     timeRange (Optional): {\n         startTime: OffsetDateTime (Optional)\n         endTime: OffsetDateTime (Optional)\n     }\n }\n```"
  returns:
    description: "all filters that are supported for client metrics for a given load test run along with <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.developer.loadtesting.TestRunClient.getTestRunClientMetricsWithResponse(java.lang.String,com.azure.core.util.BinaryData,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.developer.loadtesting.TestRunClient.getTestRunClientMetricsWithResponse(String testRunId, BinaryData body, RequestOptions requestOptions)"
  name: "getTestRunClientMetricsWithResponse(String testRunId, BinaryData body, RequestOptions requestOptions)"
  nameWithType: "TestRunClient.getTestRunClientMetricsWithResponse(String testRunId, BinaryData body, RequestOptions requestOptions)"
  summary: "Get all client metrics for a load test run."
  parameters:
  - description: "Unique name of the load test run, must be a valid URL character ^[a-z0-9_-]*$."
    name: "testRunId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "Client metrics request model."
    name: "body"
    type: "<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<BinaryData> getTestRunClientMetricsWithResponse(String testRunId, BinaryData body, RequestOptions requestOptions)"
  desc: "Get all client metrics for a load test run.\n\n**Request Body Schema**\n\n```java\n{\n     requestSamplers (Optional): [\n         String (Optional)\n     ]\n     errors (Optional): [\n         String (Optional)\n     ]\n     percentiles (Optional): [\n         String (Optional)\n     ]\n     groupByInterval: String (Optional)\n     startTime: OffsetDateTime (Required)\n     endTime: OffsetDateTime (Required)\n }\n```\n\n**Response Body Schema**\n\n```java\n{\n     testRunId: String (Optional)\n     timeSeries (Optional): {\n         activeUsers (Optional): {\n             String (Optional): [\n                  (Optional){\n                     timestamp: OffsetDateTime (Optional)\n                     value: Double (Optional)\n                 }\n             ]\n         }\n         responseTime (Optional): {\n             String (Optional): [\n                 (recursive schema, see above)\n             ]\n         }\n         throughput (Optional): {\n             String (Optional): [\n                 (recursive schema, see above)\n             ]\n         }\n         errors (Optional): {\n             String (Optional): [\n                 (recursive schema, see above)\n             ]\n         }\n     }\n }\n```"
  returns:
    description: "all client metrics for a load test run along with <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.developer.loadtesting.TestRunClient.getTestRunFileWithResponse(java.lang.String,java.lang.String,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.developer.loadtesting.TestRunClient.getTestRunFileWithResponse(String testRunId, String fileId, RequestOptions requestOptions)"
  name: "getTestRunFileWithResponse(String testRunId, String fileId, RequestOptions requestOptions)"
  nameWithType: "TestRunClient.getTestRunFileWithResponse(String testRunId, String fileId, RequestOptions requestOptions)"
  summary: "Get test run file by file name."
  parameters:
  - description: "Unique name of load test run, must be a valid URL character ^[a-z0-9_-]*$."
    name: "testRunId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "Unique identifier for test run file, must be a valid URL character ^[a-z0-9_-]*$."
    name: "fileId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<BinaryData> getTestRunFileWithResponse(String testRunId, String fileId, RequestOptions requestOptions)"
  desc: "Get test run file by file name.\n\n**Response Body Schema**\n\n```java\n{\n     url: String (Optional)\n     fileId: String (Optional)\n     filename: String (Optional)\n     fileType: String(0/1/2) (Optional)\n     expireTime: OffsetDateTime (Optional)\n     validationStatus: String (Optional)\n }\n```"
  returns:
    description: "test run file by file name along with <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.developer.loadtesting.TestRunClient.getTestRunWithResponse(java.lang.String,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.developer.loadtesting.TestRunClient.getTestRunWithResponse(String testRunId, RequestOptions requestOptions)"
  name: "getTestRunWithResponse(String testRunId, RequestOptions requestOptions)"
  nameWithType: "TestRunClient.getTestRunWithResponse(String testRunId, RequestOptions requestOptions)"
  summary: "Get test run details by name."
  parameters:
  - description: "Unique name of load test run, must be a valid URL character ^[a-z0-9_-]*$."
    name: "testRunId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<BinaryData> getTestRunWithResponse(String testRunId, RequestOptions requestOptions)"
  desc: "Get test run details by name.\n\n**Response Body Schema**\n\n```java\n{\n     testRunId: String (Optional)\n     displayName: String (Optional)\n     testId: String (Optional)\n     resourceId: String (Optional)\n     description: String (Optional)\n     status: String (Optional)\n     startDateTime: OffsetDateTime (Optional)\n     endDateTime: OffsetDateTime (Optional)\n     loadTestConfig (Optional): {\n         engineInstances: Integer (Optional)\n         splitAllCSVs: Boolean (Optional)\n     }\n     testResult: String (Optional)\n     passFailCriteria (Optional): {\n         passFailMetrics (Optional): {\n             String (Optional): {\n                 clientmetric: String (Optional)\n                 aggregate: String (Optional)\n                 condition: String (Optional)\n                 requestName: String (Optional)\n                 value: Double (Optional)\n                 action: String (Optional)\n                 actualValue: Double (Optional)\n                 result: String (Optional)\n             }\n         }\n     }\n     testArtifacts (Optional): {\n         inputArtifacts (Required): {\n             configUrl (Optional): {\n                 url: String (Optional)\n                 fileId: String (Optional)\n                 filename: String (Optional)\n                 fileType: String(0/1/2) (Optional)\n                 expireTime: OffsetDateTime (Optional)\n                 validationStatus: String (Optional)\n             }\n             testScriptUrl (Optional): (recursive schema, see testScriptUrl above)\n             userPropUrl (Optional): (recursive schema, see userPropUrl above)\n             inputArtifactsZipFileurl (Optional): (recursive schema, see inputArtifactsZipFileurl above)\n             additionalUrls (Optional): [\n                 (recursive schema, see above)\n             ]\n         }\n         outputArtifacts (Optional): {\n             resultUrl (Optional): (recursive schema, see resultUrl above)\n             logsUrl (Optional): (recursive schema, see logsUrl above)\n         }\n     }\n     executedDateTime: OffsetDateTime (Optional)\n     vusers: Integer (Optional)\n     testRunStatistics (Optional): {\n         String (Optional): {\n             transaction: String (Optional)\n             sampleCount: Double (Optional)\n             errorCount: Double (Optional)\n             errorPct: Double (Optional)\n             meanResTime: Double (Optional)\n             medianResTime: Double (Optional)\n             maxResTime: Double (Optional)\n             minResTime: Double (Optional)\n             pct1ResTime: Double (Optional)\n             pct2ResTime: Double (Optional)\n             pct3ResTime: Double (Optional)\n             throughput: Double (Optional)\n             receivedKBytesPerSec: Double (Optional)\n             sentKBytesPerSec: Double (Optional)\n         }\n     }\n     createdDateTime: OffsetDateTime (Optional)\n     createdBy: String (Optional)\n     lastModifiedDateTime: OffsetDateTime (Optional)\n     lastModifiedBy: String (Optional)\n     portalUrl: String (Optional)\n     secrets (Optional): {\n         String (Optional): {\n             value: String (Optional)\n             type: String (Optional)\n         }\n     }\n     environmentVariables (Optional): {\n         String: String (Optional)\n     }\n     duration: Long (Optional)\n     subnetId: String (Optional)\n }\n```"
  returns:
    description: "test run details by name along with <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.developer.loadtesting.TestRunClient.listTestRunsSearch(com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.developer.loadtesting.TestRunClient.listTestRunsSearch(RequestOptions requestOptions)"
  name: "listTestRunsSearch(RequestOptions requestOptions)"
  nameWithType: "TestRunClient.listTestRunsSearch(RequestOptions requestOptions)"
  summary: "Get all test runs with given filters."
  parameters:
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PagedIterable<BinaryData> listTestRunsSearch(RequestOptions requestOptions)"
  desc: "Get all test runs with given filters.\n\n**Query Parameters**\n\n    | ----------------- | -------------- | -------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |\n    | Name              | Type           | Required | Description                                                                                                                                                                                                                    |\n    | orderBy           | String         | No       | Sort on one of the field - status, displayName, executedDateTime in (field asc/desc) format. eg: displayName asc.                                                                                                              |\n    | continuationToken | String         | No       | Continuation token to get the next page of response.                                                                                                                                                                           |\n    | search            | String         | No       | Filter search based on searchable fields - description, executedUser.                                                                                                                                                          |\n    | executionFrom     | OffsetDateTime | No       | The end DateTime(ISO 8601 literal format) of test-run execution time filter range.                                                                                                                                             |\n    | executionTo       | OffsetDateTime | No       | The start DateTime(ISO 8601 literal format) of test-run execution time filter range.                                                                                                                                           |\n    | status            | String         | No       | Comma separated list of test run status, value can be - \"ACCEPTED\", \"NOTSTARTED\",\"PROVISIONING\",\"PROVISIONED\",\"CONFIGURING\", \"CONFIGURED\",\"EXECUTING\",\"EXECUTED\",\"DEPROVISIONING\",\"DEPROVISIONED\",\"DONE\",\"CANCELLED\",\"FAILED\". |\n    | maxPageSize       | Integer        | No       | Number of results in response.                                                                                                                                                                                                 |\n    | testId            | String         | No       | Unique name for load test, must be a valid URL character ^\\[a-z0-9\\_-\\]\\*$.                                                                                                                                                    |\n\nYou can add these to a request with <xref uid=\"com.azure.core.http.rest.RequestOptions.addQueryParam\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RequestOptions#addQueryParam\"></xref>\n\n**Response Body Schema**\n\n```java\n{\n     value (Required): [\n          (Required){\n             testRunId: String (Optional)\n             displayName: String (Optional)\n             testId: String (Optional)\n             resourceId: String (Optional)\n             description: String (Optional)\n             status: String (Optional)\n             startDateTime: OffsetDateTime (Optional)\n             endDateTime: OffsetDateTime (Optional)\n             loadTestConfig (Optional): {\n                 engineInstances: Integer (Optional)\n                 splitAllCSVs: Boolean (Optional)\n             }\n             testResult: String (Optional)\n             passFailCriteria (Optional): {\n                 passFailMetrics (Optional): {\n                     String (Optional): {\n                         clientmetric: String (Optional)\n                         aggregate: String (Optional)\n                         condition: String (Optional)\n                         requestName: String (Optional)\n                         value: Double (Optional)\n                         action: String (Optional)\n                         actualValue: Double (Optional)\n                         result: String (Optional)\n                     }\n                 }\n             }\n             testArtifacts (Optional): {\n                 inputArtifacts (Required): {\n                     configUrl (Optional): {\n                         url: String (Optional)\n                         fileId: String (Optional)\n                         filename: String (Optional)\n                         fileType: String(0/1/2) (Optional)\n                         expireTime: OffsetDateTime (Optional)\n                         validationStatus: String (Optional)\n                     }\n                     testScriptUrl (Optional): (recursive schema, see testScriptUrl above)\n                     userPropUrl (Optional): (recursive schema, see userPropUrl above)\n                     inputArtifactsZipFileurl (Optional): (recursive schema, see inputArtifactsZipFileurl above)\n                     additionalUrls (Optional): [\n                         (recursive schema, see above)\n                     ]\n                 }\n                 outputArtifacts (Optional): {\n                     resultUrl (Optional): (recursive schema, see resultUrl above)\n                     logsUrl (Optional): (recursive schema, see logsUrl above)\n                 }\n             }\n             executedDateTime: OffsetDateTime (Optional)\n             vusers: Integer (Optional)\n             testRunStatistics (Optional): {\n                 String (Optional): {\n                     transaction: String (Optional)\n                     sampleCount: Double (Optional)\n                     errorCount: Double (Optional)\n                     errorPct: Double (Optional)\n                     meanResTime: Double (Optional)\n                     medianResTime: Double (Optional)\n                     maxResTime: Double (Optional)\n                     minResTime: Double (Optional)\n                     pct1ResTime: Double (Optional)\n                     pct2ResTime: Double (Optional)\n                     pct3ResTime: Double (Optional)\n                     throughput: Double (Optional)\n                     receivedKBytesPerSec: Double (Optional)\n                     sentKBytesPerSec: Double (Optional)\n                 }\n             }\n             createdDateTime: OffsetDateTime (Optional)\n             createdBy: String (Optional)\n             lastModifiedDateTime: OffsetDateTime (Optional)\n             lastModifiedBy: String (Optional)\n             portalUrl: String (Optional)\n             secrets (Optional): {\n                 String (Optional): {\n                     value: String (Optional)\n                     type: String (Optional)\n                 }\n             }\n             environmentVariables (Optional): {\n                 String: String (Optional)\n             }\n             duration: Long (Optional)\n             subnetId: String (Optional)\n         }\n     ]\n     nextLink: String (Optional)\n }\n```"
  returns:
    description: "all test runs with given filters as paginated response with <xref uid=\"com.azure.core.http.rest.PagedIterable\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedIterable\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.PagedIterable?alt=com.azure.core.http.rest.PagedIterable&text=PagedIterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.developer.loadtesting.TestRunClient.stopTestRunWithResponse(java.lang.String,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.developer.loadtesting.TestRunClient.stopTestRunWithResponse(String testRunId, RequestOptions requestOptions)"
  name: "stopTestRunWithResponse(String testRunId, RequestOptions requestOptions)"
  nameWithType: "TestRunClient.stopTestRunWithResponse(String testRunId, RequestOptions requestOptions)"
  summary: "Stop test run by name."
  parameters:
  - description: "Unique name of the load test run, must be a valid URL character ^[a-z0-9_-]*$."
    name: "testRunId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<BinaryData> stopTestRunWithResponse(String testRunId, RequestOptions requestOptions)"
  desc: "Stop test run by name.\n\n**Response Body Schema**\n\n```java\n{\n     testRunId: String (Optional)\n     displayName: String (Optional)\n     testId: String (Optional)\n     resourceId: String (Optional)\n     description: String (Optional)\n     status: String (Optional)\n     startDateTime: OffsetDateTime (Optional)\n     endDateTime: OffsetDateTime (Optional)\n     loadTestConfig (Optional): {\n         engineInstances: Integer (Optional)\n         splitAllCSVs: Boolean (Optional)\n     }\n     testResult: String (Optional)\n     passFailCriteria (Optional): {\n         passFailMetrics (Optional): {\n             String (Optional): {\n                 clientmetric: String (Optional)\n                 aggregate: String (Optional)\n                 condition: String (Optional)\n                 requestName: String (Optional)\n                 value: Double (Optional)\n                 action: String (Optional)\n                 actualValue: Double (Optional)\n                 result: String (Optional)\n             }\n         }\n     }\n     testArtifacts (Optional): {\n         inputArtifacts (Required): {\n             configUrl (Optional): {\n                 url: String (Optional)\n                 fileId: String (Optional)\n                 filename: String (Optional)\n                 fileType: String(0/1/2) (Optional)\n                 expireTime: OffsetDateTime (Optional)\n                 validationStatus: String (Optional)\n             }\n             testScriptUrl (Optional): (recursive schema, see testScriptUrl above)\n             userPropUrl (Optional): (recursive schema, see userPropUrl above)\n             inputArtifactsZipFileurl (Optional): (recursive schema, see inputArtifactsZipFileurl above)\n             additionalUrls (Optional): [\n                 (recursive schema, see above)\n             ]\n         }\n         outputArtifacts (Optional): {\n             resultUrl (Optional): (recursive schema, see resultUrl above)\n             logsUrl (Optional): (recursive schema, see logsUrl above)\n         }\n     }\n     executedDateTime: OffsetDateTime (Optional)\n     vusers: Integer (Optional)\n     testRunStatistics (Optional): {\n         String (Optional): {\n             transaction: String (Optional)\n             sampleCount: Double (Optional)\n             errorCount: Double (Optional)\n             errorPct: Double (Optional)\n             meanResTime: Double (Optional)\n             medianResTime: Double (Optional)\n             maxResTime: Double (Optional)\n             minResTime: Double (Optional)\n             pct1ResTime: Double (Optional)\n             pct2ResTime: Double (Optional)\n             pct3ResTime: Double (Optional)\n             throughput: Double (Optional)\n             receivedKBytesPerSec: Double (Optional)\n             sentKBytesPerSec: Double (Optional)\n         }\n     }\n     createdDateTime: OffsetDateTime (Optional)\n     createdBy: String (Optional)\n     lastModifiedDateTime: OffsetDateTime (Optional)\n     lastModifiedBy: String (Optional)\n     portalUrl: String (Optional)\n     secrets (Optional): {\n         String (Optional): {\n             value: String (Optional)\n             type: String (Optional)\n         }\n     }\n     environmentVariables (Optional): {\n         String: String (Optional)\n     }\n     duration: Long (Optional)\n     subnetId: String (Optional)\n }\n```"
  returns:
    description: "load test run model along with <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />&gt;"
type: "class"
desc: "Initializes a new instance of the synchronous LoadTestingClient type."
metadata: {}
package: "com.azure.developer.loadtesting"
artifact: com.azure:azure-developer-loadtesting:1.0.0-beta.1
