### YamlMime:JavaMember
uid: "com.fasterxml.jackson.core.util.TextBuffer.contentsAsLong*"
fullName: "com.fasterxml.jackson.core.util.TextBuffer.contentsAsLong"
name: "contentsAsLong"
nameWithType: "TextBuffer.contentsAsLong"
members:
- uid: "com.fasterxml.jackson.core.util.TextBuffer.contentsAsLong(boolean)"
  fullName: "com.fasterxml.jackson.core.util.TextBuffer.contentsAsLong(boolean neg)"
  name: "contentsAsLong(boolean neg)"
  nameWithType: "TextBuffer.contentsAsLong(boolean neg)"
  summary: "Specialized convenience method that will decode a 64-bit int, of at most 18 digits (and possible leading minus sign).\n\nNOTE: method DOES NOT verify that the contents actually are a valid Java `long` value (either regarding format, or value range): caller MUST validate that."
  parameters:
  - description: "Whether contents start with a minus sign"
    name: "neg"
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public long contentsAsLong(boolean neg)"
  returns:
    description: "Buffered text value parsed as an <code>long</code> using\n   <xref uid=\"com.fasterxml.jackson.core.io.NumberInput.parseLong(java.lang.String)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"NumberInput#parseLong(String)\"></xref> method (which does NOT validate input)"
    type: "<xref href=\"long?alt=long&text=long\" data-throw-if-not-resolved=\"False\" />"
type: "method"
metadata: {}
package: "com.fasterxml.jackson.core.util"
artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.5
