### YamlMime:JavaMember
uid: "com.azure.core.experimental.util.BinaryData.toObject*"
fullName: "com.azure.core.experimental.util.BinaryData.<T>toObject"
name: "<T>toObject"
nameWithType: "BinaryData.<T>toObject"
members:
- uid: "com.azure.core.experimental.util.BinaryData.<T>toObject(java.lang.Class<T>)"
  fullName: "com.azure.core.experimental.util.BinaryData.<T>toObject(Class<T> clazz)"
  name: "<T>toObject(Class<T> clazz)"
  nameWithType: "BinaryData.<T>toObject(Class<T> clazz)"
  summary: "Deserialize the bytes into the <xref uid=\"java.lang.Object\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Object\"></xref> of given type by using json serializer which is available in classpath. The serializer must implement <xref uid=\"com.azure.core.util.serializer.JsonSerializer\" data-throw-if-not-resolved=\"false\" data-raw-source=\"JsonSerializer\"></xref> interface. A singleton instance of <xref uid=\"com.azure.core.util.serializer.JsonSerializer\" data-throw-if-not-resolved=\"false\" data-raw-source=\"JsonSerializer\"></xref> is kept for this class to use."
  parameters:
  - description: "representing the type of the Object."
    name: "clazz"
    type: "<xref href=\"java.lang.Class?alt=java.lang.Class&text=Class\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public T <T>toObject(Class<T> clazz)"
  returns:
    description: "The <xref uid=\"java.lang.Object\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Object\"></xref> of given type after deserializing the bytes."
    type: "<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.core.experimental.util.BinaryData.<T>toObject(java.lang.Class<T>,com.azure.core.util.serializer.ObjectSerializer)"
  fullName: "com.azure.core.experimental.util.BinaryData.<T>toObject(Class<T> clazz, ObjectSerializer serializer)"
  name: "<T>toObject(Class<T> clazz, ObjectSerializer serializer)"
  nameWithType: "BinaryData.<T>toObject(Class<T> clazz, ObjectSerializer serializer)"
  summary: "Deserialize the bytes into the <xref uid=\"java.lang.Object\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Object\"></xref> of given type by applying the provided <xref uid=\"com.azure.core.util.serializer.ObjectSerializer\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ObjectSerializer\"></xref> on the data.\n\nYou can provide your custom implementation of <xref uid=\"com.azure.core.util.serializer.ObjectSerializer\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ObjectSerializer\"></xref> interface or use one provided in azure sdk by adding them as dependency. These implementations could be found at [Json Jackson serializer][] and [Gson based serializer][].\n\n**Code sample**\n\n```java\n// Lets say we have Person object which could be serialized into json.\n class Person {\n     {@literal @}JsonProperty\n     private String name;\n \n     {@literal @}JsonSetter\n     public Person setName(String name) {\n         this.name = name;\n         return this;\n     }\n \n     {@literal @}JsonGetter\n     public String getName() {\n         return name;\n     }\n }\n final Person data = new Person().setName(\"John\");\n \n // Provide your custom serializer or use Azure provided serializers.\n // https://mvnrepository.com/artifact/com.azure/azure-core-serializer-json-jackson or\n // https://mvnrepository.com/artifact/com.azure/azure-core-serializer-json-gson\n \n final ObjectSerializer serializer =\n     new MyJsonSerializer(); // Replace this with your Serializer\n BinaryData binaryData = BinaryData.fromObject(data, serializer);\n \n Person person = binaryData.toObject(Person.class, serializer);\n // Lets print the name\n System.out.println(\"Name : \" + person.getName());\n```\n\n\n[Json Jackson serializer]: https://mvnrepository.com/artifact/com.azure/azure-core-serializer-json-jackson\n[Gson based serializer]: https://mvnrepository.com/artifact/com.azure/azure-core-serializer-json-gson"
  parameters:
  - description: "representing the type of the Object."
    name: "clazz"
    type: "<xref href=\"java.lang.Class?alt=java.lang.Class&text=Class\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
  - description: "to use deserialize data into type."
    name: "serializer"
    type: "<xref href=\"com.azure.core.util.serializer.ObjectSerializer?alt=com.azure.core.util.serializer.ObjectSerializer&text=ObjectSerializer\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public T <T>toObject(Class<T> clazz, ObjectSerializer serializer)"
  returns:
    description: "The <xref uid=\"java.lang.Object\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Object\"></xref> of given type after deserializing the bytes."
    type: "<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />"
type: "method"
metadata: {}
package: "com.azure.core.experimental.util"
artifact: com.azure:azure-core-experimental:1.0.0-beta.8
