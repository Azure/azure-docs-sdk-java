### YamlMime:ManagedReference
items:
- uid: com.azure.messaging.servicebus.ServiceBusSessionReceiverClient
  id: ServiceBusSessionReceiverClient
  artifact: com.azure:azure-messaging-servicebus:7.0.0-beta.7
  parent: com.azure.messaging.servicebus
  children:
  - com.azure.messaging.servicebus.ServiceBusSessionReceiverClient.acceptNextSession()
  - com.azure.messaging.servicebus.ServiceBusSessionReceiverClient.acceptSession(java.lang.String)
  - com.azure.messaging.servicebus.ServiceBusSessionReceiverClient.close()
  langs:
  - java
  name: ServiceBusSessionReceiverClient
  nameWithType: ServiceBusSessionReceiverClient
  fullName: com.azure.messaging.servicebus.ServiceBusSessionReceiverClient
  type: Class
  package: com.azure.messaging.servicebus
  summary: >-
    This session receiver client is used to acquire session locks from a queue or topic and create <xref uid="com.azure.messaging.servicebus.ServiceBusReceiverClient" data-throw-if-not-resolved="false">ServiceBusReceiverClient</xref> instances that are tied to the locked sessions. Use <xref uid="com.azure.messaging.servicebus.ServiceBusSessionReceiverClient.acceptSession(java.lang.String)" data-throw-if-not-resolved="false">#acceptSession(String)</xref> to acquire the lock of a session if you know the session id.


    ```java

    ServiceBusSessionReceiverClient sessionReceiver = new ServiceBusClientBuilder()
         .connectionString("Endpoint={fully-qualified-namespace};SharedAccessKeyName={policy-name};"
             + "SharedAccessKey={key};EntityPath={eh-name}")
         .sessionReceiver()
         .queueName("<< QUEUE NAME >>")
         .buildClient();
     ServiceBusReceiverClient receiver = sessionReceiver.acceptNextSession();
    ```


    Use <xref uid="com.azure.messaging.servicebus.ServiceBusSessionReceiverClient.acceptNextSession()" data-throw-if-not-resolved="false">#acceptNextSession()</xref> to acquire the lock of the next available session without specifying the session id.


    ```java

    ServiceBusSessionReceiverClient sessionReceiver = new ServiceBusClientBuilder()
         .connectionString("Endpoint={fully-qualified-namespace};SharedAccessKeyName={policy-name};"
             + "SharedAccessKey={key};EntityPath={eh-name}")
         .sessionReceiver()
         .queueName("<< QUEUE NAME >>")
         .buildClient();
     ServiceBusReceiverClient receiver = sessionReceiver.acceptSession("<< my-session-id >>");
    ```
  syntax:
    content: public final class ServiceBusSessionReceiverClient implements AutoCloseable
  inheritance:
  - java.lang.Object
  implements:
  - java.lang.AutoCloseable
  inheritedMembers:
  - java.lang.Object.clone()
  - java.lang.Object.equals(java.lang.Object)
  - java.lang.Object.finalize()
  - java.lang.Object.getClass()
  - java.lang.Object.hashCode()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.toString()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
- uid: com.azure.messaging.servicebus.ServiceBusSessionReceiverClient.ServiceBusSessionReceiverClient(com.azure.messaging.servicebus.ServiceBusSessionReceiverAsyncClient,java.time.Duration)
  id: ServiceBusSessionReceiverClient(com.azure.messaging.servicebus.ServiceBusSessionReceiverAsyncClient,java.time.Duration)
  artifact: com.azure:azure-messaging-servicebus:7.0.0-beta.7
  parent: com.azure.messaging.servicebus.ServiceBusSessionReceiverClient
  langs:
  - java
  name: ServiceBusSessionReceiverClient(ServiceBusSessionReceiverAsyncClient asyncClient, Duration operationTimeout)
  nameWithType: ServiceBusSessionReceiverClient.ServiceBusSessionReceiverClient(ServiceBusSessionReceiverAsyncClient asyncClient, Duration operationTimeout)
  fullName: com.azure.messaging.servicebus.ServiceBusSessionReceiverClient.ServiceBusSessionReceiverClient(ServiceBusSessionReceiverAsyncClient asyncClient, Duration operationTimeout)
  overload: com.azure.messaging.servicebus.ServiceBusSessionReceiverClient.ServiceBusSessionReceiverClient*
  type: Constructor
  package: com.azure.messaging.servicebus
  syntax:
    content: " ServiceBusSessionReceiverClient(ServiceBusSessionReceiverAsyncClient asyncClient, Duration operationTimeout)"
    parameters:
    - id: asyncClient
      type: com.azure.messaging.servicebus.ServiceBusSessionReceiverAsyncClient
    - id: operationTimeout
      type: java.time.Duration
- uid: com.azure.messaging.servicebus.ServiceBusSessionReceiverClient.acceptNextSession()
  id: acceptNextSession()
  artifact: com.azure:azure-messaging-servicebus:7.0.0-beta.7
  parent: com.azure.messaging.servicebus.ServiceBusSessionReceiverClient
  langs:
  - java
  name: acceptNextSession()
  nameWithType: ServiceBusSessionReceiverClient.acceptNextSession()
  fullName: com.azure.messaging.servicebus.ServiceBusSessionReceiverClient.acceptNextSession()
  overload: com.azure.messaging.servicebus.ServiceBusSessionReceiverClient.acceptNextSession*
  type: Method
  package: com.azure.messaging.servicebus
  summary: >-
    Acquires a session lock for the next available session and create a <xref uid="com.azure.messaging.servicebus.ServiceBusReceiverClient" data-throw-if-not-resolved="false">ServiceBusReceiverClient</xref> to receive messages from the session. It will wait until a session is available if no one is available immediately.


    ```java

    ServiceBusSessionReceiverClient sessionReceiver = new ServiceBusClientBuilder()
         .connectionString("Endpoint={fully-qualified-namespace};SharedAccessKeyName={policy-name};"
             + "SharedAccessKey={key};EntityPath={eh-name}")
         .sessionReceiver()
         .queueName("<< QUEUE NAME >>")
         .buildClient();
     ServiceBusReceiverClient receiver = sessionReceiver.acceptNextSession();
    ```
  syntax:
    content: public ServiceBusReceiverClient acceptNextSession()
    return:
      type: com.azure.messaging.servicebus.ServiceBusReceiverClient
      description: A <xref uid="com.azure.messaging.servicebus.ServiceBusReceiverClient" data-throw-if-not-resolved="false">ServiceBusReceiverClient</xref> that is tied to the available session.
- uid: com.azure.messaging.servicebus.ServiceBusSessionReceiverClient.acceptSession(java.lang.String)
  id: acceptSession(java.lang.String)
  artifact: com.azure:azure-messaging-servicebus:7.0.0-beta.7
  parent: com.azure.messaging.servicebus.ServiceBusSessionReceiverClient
  langs:
  - java
  name: acceptSession(String sessionId)
  nameWithType: ServiceBusSessionReceiverClient.acceptSession(String sessionId)
  fullName: com.azure.messaging.servicebus.ServiceBusSessionReceiverClient.acceptSession(String sessionId)
  overload: com.azure.messaging.servicebus.ServiceBusSessionReceiverClient.acceptSession*
  type: Method
  package: com.azure.messaging.servicebus
  summary: >-
    Acquires a session lock for `sessionId` and create a <xref uid="com.azure.messaging.servicebus.ServiceBusReceiverClient" data-throw-if-not-resolved="false">ServiceBusReceiverClient</xref> to receive messages from the session. If the session is already locked by another client, an <xref uid="" data-throw-if-not-resolved="false">com.azure.core.amqp.exception.AmqpException</xref> is thrown immediately.


    ```java

    ServiceBusSessionReceiverClient sessionReceiver = new ServiceBusClientBuilder()
         .connectionString("Endpoint={fully-qualified-namespace};SharedAccessKeyName={policy-name};"
             + "SharedAccessKey={key};EntityPath={eh-name}")
         .sessionReceiver()
         .queueName("<< QUEUE NAME >>")
         .buildClient();
     ServiceBusReceiverClient receiver = sessionReceiver.acceptSession("<< my-session-id >>");
    ```
  syntax:
    content: public ServiceBusReceiverClient acceptSession(String sessionId)
    parameters:
    - id: sessionId
      type: java.lang.String
      description: The session Id.
    return:
      type: com.azure.messaging.servicebus.ServiceBusReceiverClient
      description: A <xref uid="com.azure.messaging.servicebus.ServiceBusReceiverClient" data-throw-if-not-resolved="false">ServiceBusReceiverClient</xref> that is tied to the specified session.
- uid: com.azure.messaging.servicebus.ServiceBusSessionReceiverClient.close()
  id: close()
  artifact: com.azure:azure-messaging-servicebus:7.0.0-beta.7
  parent: com.azure.messaging.servicebus.ServiceBusSessionReceiverClient
  langs:
  - java
  name: close()
  nameWithType: ServiceBusSessionReceiverClient.close()
  fullName: com.azure.messaging.servicebus.ServiceBusSessionReceiverClient.close()
  overload: com.azure.messaging.servicebus.ServiceBusSessionReceiverClient.close*
  type: Method
  package: com.azure.messaging.servicebus
  syntax:
    content: public void close()
references:
- uid: com.azure.messaging.servicebus.ServiceBusSessionReceiverAsyncClient
  name: ServiceBusSessionReceiverAsyncClient
  nameWithType: ServiceBusSessionReceiverAsyncClient
  fullName: com.azure.messaging.servicebus.ServiceBusSessionReceiverAsyncClient
- uid: java.time.Duration
  spec.java:
  - uid: java.time.Duration
    name: Duration
    fullName: java.time.Duration
- uid: com.azure.messaging.servicebus.ServiceBusSessionReceiverClient.ServiceBusSessionReceiverClient*
  name: ServiceBusSessionReceiverClient
  nameWithType: ServiceBusSessionReceiverClient.ServiceBusSessionReceiverClient
  fullName: com.azure.messaging.servicebus.ServiceBusSessionReceiverClient.ServiceBusSessionReceiverClient
  package: com.azure.messaging.servicebus
- uid: com.azure.messaging.servicebus.ServiceBusReceiverClient
  name: ServiceBusReceiverClient
  nameWithType: ServiceBusReceiverClient
  fullName: com.azure.messaging.servicebus.ServiceBusReceiverClient
- uid: com.azure.messaging.servicebus.ServiceBusSessionReceiverClient.acceptNextSession*
  name: acceptNextSession
  nameWithType: ServiceBusSessionReceiverClient.acceptNextSession
  fullName: com.azure.messaging.servicebus.ServiceBusSessionReceiverClient.acceptNextSession
  package: com.azure.messaging.servicebus
- uid: java.lang.String
  spec.java:
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
- uid: com.azure.messaging.servicebus.ServiceBusSessionReceiverClient.acceptSession*
  name: acceptSession
  nameWithType: ServiceBusSessionReceiverClient.acceptSession
  fullName: com.azure.messaging.servicebus.ServiceBusSessionReceiverClient.acceptSession
  package: com.azure.messaging.servicebus
- uid: com.azure.messaging.servicebus.ServiceBusSessionReceiverClient.close*
  name: close
  nameWithType: ServiceBusSessionReceiverClient.close
  fullName: com.azure.messaging.servicebus.ServiceBusSessionReceiverClient.close
  package: com.azure.messaging.servicebus
- uid: java.lang.AutoCloseable
  name: AutoCloseable
  nameWithType: AutoCloseable
  fullName: java.lang.AutoCloseable
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: java.lang.Object.finalize()
  name: Object.finalize()
  nameWithType: Object.finalize()
  fullName: java.lang.Object.finalize()
- uid: java.lang.Object.clone()
  name: Object.clone()
  nameWithType: Object.clone()
  fullName: java.lang.Object.clone()
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: java.lang.Object.equals(java.lang.Object)
  name: Object.equals(Object)
  nameWithType: Object.equals(Object)
  fullName: java.lang.Object.equals(java.lang.Object)
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.lang.Object.hashCode()
  name: Object.hashCode()
  nameWithType: Object.hashCode()
  fullName: java.lang.Object.hashCode()
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: java.lang.Object.toString()
  name: Object.toString()
  nameWithType: Object.toString()
  fullName: java.lang.Object.toString()
