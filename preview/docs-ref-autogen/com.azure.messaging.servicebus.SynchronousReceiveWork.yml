### YamlMime:ManagedReference
items:
- uid: "com.azure.messaging.servicebus.SynchronousReceiveWork"
  id: "SynchronousReceiveWork"
  parent: "com.azure.messaging.servicebus"
  children:
  - "com.azure.messaging.servicebus.SynchronousReceiveWork.SynchronousReceiveWork(long,int,java.time.Duration,reactor.core.publisher.FluxSink<com.azure.messaging.servicebus.ServiceBusReceivedMessage>)"
  - "com.azure.messaging.servicebus.SynchronousReceiveWork.complete()"
  - "com.azure.messaging.servicebus.SynchronousReceiveWork.error(java.lang.Throwable)"
  - "com.azure.messaging.servicebus.SynchronousReceiveWork.getId()"
  - "com.azure.messaging.servicebus.SynchronousReceiveWork.getNumberOfEvents()"
  - "com.azure.messaging.servicebus.SynchronousReceiveWork.getTimeout()"
  - "com.azure.messaging.servicebus.SynchronousReceiveWork.isTerminal()"
  - "com.azure.messaging.servicebus.SynchronousReceiveWork.next(com.azure.messaging.servicebus.ServiceBusReceivedMessage)"
  langs:
  - "java"
  name: "SynchronousReceiveWork"
  nameWithType: "SynchronousReceiveWork"
  fullName: "com.azure.messaging.servicebus.SynchronousReceiveWork"
  type: "Class"
  package: "com.azure.messaging.servicebus"
  summary: "Synchronous work for receiving messages."
  syntax:
    content: " class SynchronousReceiveWork"
  inheritance:
  - "java.lang.Object"
  inheritedMembers:
  - "java.lang.Object.clone()"
  - "java.lang.Object.equals(java.lang.Object)"
  - "java.lang.Object.finalize()"
  - "java.lang.Object.getClass()"
  - "java.lang.Object.hashCode()"
  - "java.lang.Object.notify()"
  - "java.lang.Object.notifyAll()"
  - "java.lang.Object.toString()"
  - "java.lang.Object.wait()"
  - "java.lang.Object.wait(long)"
  - "java.lang.Object.wait(long,int)"
- uid: "com.azure.messaging.servicebus.SynchronousReceiveWork.SynchronousReceiveWork(long,int,java.time.Duration,reactor.core.publisher.FluxSink<com.azure.messaging.servicebus.ServiceBusReceivedMessage>)"
  id: "SynchronousReceiveWork(long,int,java.time.Duration,reactor.core.publisher.FluxSink<com.azure.messaging.servicebus.ServiceBusReceivedMessage>)"
  parent: "com.azure.messaging.servicebus.SynchronousReceiveWork"
  langs:
  - "java"
  name: "SynchronousReceiveWork(long id, int numberToReceive, Duration timeout, FluxSink<ServiceBusReceivedMessage> emitter)"
  nameWithType: "SynchronousReceiveWork.SynchronousReceiveWork(long id, int numberToReceive, Duration timeout, FluxSink<ServiceBusReceivedMessage> emitter)"
  fullName: "com.azure.messaging.servicebus.SynchronousReceiveWork.SynchronousReceiveWork(long id, int numberToReceive, Duration timeout, FluxSink<ServiceBusReceivedMessage> emitter)"
  overload: "com.azure.messaging.servicebus.SynchronousReceiveWork.SynchronousReceiveWork*"
  type: "Constructor"
  package: "com.azure.messaging.servicebus"
  summary: "Creates a new synchronous receive work."
  syntax:
    content: " SynchronousReceiveWork(long id, int numberToReceive, Duration timeout, FluxSink<ServiceBusReceivedMessage> emitter)"
    parameters:
    - id: "id"
      type: "long"
      description: "Identifier for the work."
    - id: "numberToReceive"
      type: "int"
      description: "Maximum number of events to receive."
    - id: "timeout"
      type: "java.time.Duration"
      description: "Maximum duration to wait for <code>numberOfReceive</code> events."
    - id: "emitter"
      type: "reactor.core.publisher.FluxSink<com.azure.messaging.servicebus.ServiceBusReceivedMessage>"
      description: "Sink to publish received messages to."
- uid: "com.azure.messaging.servicebus.SynchronousReceiveWork.complete()"
  id: "complete()"
  parent: "com.azure.messaging.servicebus.SynchronousReceiveWork"
  langs:
  - "java"
  name: "complete()"
  nameWithType: "SynchronousReceiveWork.complete()"
  fullName: "com.azure.messaging.servicebus.SynchronousReceiveWork.complete()"
  overload: "com.azure.messaging.servicebus.SynchronousReceiveWork.complete*"
  type: "Method"
  package: "com.azure.messaging.servicebus"
  summary: "Completes the publisher. If the publisher has encountered an error, or an error has occurred, it does nothing."
  syntax:
    content: " void complete()"
- uid: "com.azure.messaging.servicebus.SynchronousReceiveWork.error(java.lang.Throwable)"
  id: "error(java.lang.Throwable)"
  parent: "com.azure.messaging.servicebus.SynchronousReceiveWork"
  langs:
  - "java"
  name: "error(Throwable error)"
  nameWithType: "SynchronousReceiveWork.error(Throwable error)"
  fullName: "com.azure.messaging.servicebus.SynchronousReceiveWork.error(Throwable error)"
  overload: "com.azure.messaging.servicebus.SynchronousReceiveWork.error*"
  type: "Method"
  package: "com.azure.messaging.servicebus"
  summary: "Publishes an error downstream. This is a terminal step."
  syntax:
    content: " void error(Throwable error)"
    parameters:
    - id: "error"
      type: "java.lang.Throwable"
      description: "Error to publish downstream."
- uid: "com.azure.messaging.servicebus.SynchronousReceiveWork.getId()"
  id: "getId()"
  parent: "com.azure.messaging.servicebus.SynchronousReceiveWork"
  langs:
  - "java"
  name: "getId()"
  nameWithType: "SynchronousReceiveWork.getId()"
  fullName: "com.azure.messaging.servicebus.SynchronousReceiveWork.getId()"
  overload: "com.azure.messaging.servicebus.SynchronousReceiveWork.getId*"
  type: "Method"
  package: "com.azure.messaging.servicebus"
  summary: "Gets the unique identifier for this work."
  syntax:
    content: " long getId()"
    return:
      type: "long"
      description: "The unique identifier for this work."
- uid: "com.azure.messaging.servicebus.SynchronousReceiveWork.getNumberOfEvents()"
  id: "getNumberOfEvents()"
  parent: "com.azure.messaging.servicebus.SynchronousReceiveWork"
  langs:
  - "java"
  name: "getNumberOfEvents()"
  nameWithType: "SynchronousReceiveWork.getNumberOfEvents()"
  fullName: "com.azure.messaging.servicebus.SynchronousReceiveWork.getNumberOfEvents()"
  overload: "com.azure.messaging.servicebus.SynchronousReceiveWork.getNumberOfEvents*"
  type: "Method"
  package: "com.azure.messaging.servicebus"
  summary: "Gets the number of events to receive."
  syntax:
    content: " int getNumberOfEvents()"
    return:
      type: "int"
      description: "The number of events to receive."
- uid: "com.azure.messaging.servicebus.SynchronousReceiveWork.getTimeout()"
  id: "getTimeout()"
  parent: "com.azure.messaging.servicebus.SynchronousReceiveWork"
  langs:
  - "java"
  name: "getTimeout()"
  nameWithType: "SynchronousReceiveWork.getTimeout()"
  fullName: "com.azure.messaging.servicebus.SynchronousReceiveWork.getTimeout()"
  overload: "com.azure.messaging.servicebus.SynchronousReceiveWork.getTimeout*"
  type: "Method"
  package: "com.azure.messaging.servicebus"
  summary: "Gets the maximum duration to wait for the work to complete."
  syntax:
    content: " Duration getTimeout()"
    return:
      type: "java.time.Duration"
      description: "The duration to wait for the work to complete."
- uid: "com.azure.messaging.servicebus.SynchronousReceiveWork.isTerminal()"
  id: "isTerminal()"
  parent: "com.azure.messaging.servicebus.SynchronousReceiveWork"
  langs:
  - "java"
  name: "isTerminal()"
  nameWithType: "SynchronousReceiveWork.isTerminal()"
  fullName: "com.azure.messaging.servicebus.SynchronousReceiveWork.isTerminal()"
  overload: "com.azure.messaging.servicebus.SynchronousReceiveWork.isTerminal*"
  type: "Method"
  package: "com.azure.messaging.servicebus"
  summary: "Gets whether or not the work item has reached a terminal state."
  syntax:
    content: " boolean isTerminal()"
    return:
      type: "boolean"
      description: "<code>true</code> if all the events have been fetched, it has been cancelled, or an error occurred. <code>\n     false</code> otherwise."
- uid: "com.azure.messaging.servicebus.SynchronousReceiveWork.next(com.azure.messaging.servicebus.ServiceBusReceivedMessage)"
  id: "next(com.azure.messaging.servicebus.ServiceBusReceivedMessage)"
  parent: "com.azure.messaging.servicebus.SynchronousReceiveWork"
  langs:
  - "java"
  name: "next(ServiceBusReceivedMessage message)"
  nameWithType: "SynchronousReceiveWork.next(ServiceBusReceivedMessage message)"
  fullName: "com.azure.messaging.servicebus.SynchronousReceiveWork.next(ServiceBusReceivedMessage message)"
  overload: "com.azure.messaging.servicebus.SynchronousReceiveWork.next*"
  type: "Method"
  package: "com.azure.messaging.servicebus"
  summary: "Publishes the next message to a downstream subscriber."
  syntax:
    content: " void next(ServiceBusReceivedMessage message)"
    parameters:
    - id: "message"
      type: "com.azure.messaging.servicebus.ServiceBusReceivedMessage"
      description: "Event to publish downstream."
references:
- uid: "long"
  spec.java:
  - uid: "long"
    name: "long"
    fullName: "long"
- uid: "int"
  spec.java:
  - uid: "int"
    name: "int"
    fullName: "int"
- uid: "java.time.Duration"
  spec.java:
  - uid: "java.time.Duration"
    name: "Duration"
    fullName: "java.time.Duration"
- uid: "reactor.core.publisher.FluxSink<com.azure.messaging.servicebus.ServiceBusReceivedMessage>"
  spec.java:
  - uid: "reactor.core.publisher.FluxSink"
    name: "FluxSink"
    fullName: "reactor.core.publisher.FluxSink"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.messaging.servicebus.ServiceBusReceivedMessage"
    name: "ServiceBusReceivedMessage"
    fullName: "com.azure.messaging.servicebus.ServiceBusReceivedMessage"
  - name: ">"
    fullName: ">"
- uid: "com.azure.messaging.servicebus.SynchronousReceiveWork.SynchronousReceiveWork*"
  name: "SynchronousReceiveWork"
  nameWithType: "SynchronousReceiveWork.SynchronousReceiveWork"
  fullName: "com.azure.messaging.servicebus.SynchronousReceiveWork.SynchronousReceiveWork"
  package: "com.azure.messaging.servicebus"
- uid: "com.azure.messaging.servicebus.SynchronousReceiveWork.getId*"
  name: "getId"
  nameWithType: "SynchronousReceiveWork.getId"
  fullName: "com.azure.messaging.servicebus.SynchronousReceiveWork.getId"
  package: "com.azure.messaging.servicebus"
- uid: "com.azure.messaging.servicebus.SynchronousReceiveWork.getTimeout*"
  name: "getTimeout"
  nameWithType: "SynchronousReceiveWork.getTimeout"
  fullName: "com.azure.messaging.servicebus.SynchronousReceiveWork.getTimeout"
  package: "com.azure.messaging.servicebus"
- uid: "com.azure.messaging.servicebus.SynchronousReceiveWork.getNumberOfEvents*"
  name: "getNumberOfEvents"
  nameWithType: "SynchronousReceiveWork.getNumberOfEvents"
  fullName: "com.azure.messaging.servicebus.SynchronousReceiveWork.getNumberOfEvents"
  package: "com.azure.messaging.servicebus"
- uid: "boolean"
  spec.java:
  - uid: "boolean"
    name: "boolean"
    fullName: "boolean"
- uid: "com.azure.messaging.servicebus.SynchronousReceiveWork.isTerminal*"
  name: "isTerminal"
  nameWithType: "SynchronousReceiveWork.isTerminal"
  fullName: "com.azure.messaging.servicebus.SynchronousReceiveWork.isTerminal"
  package: "com.azure.messaging.servicebus"
- uid: "com.azure.messaging.servicebus.ServiceBusReceivedMessage"
  name: "ServiceBusReceivedMessage"
  nameWithType: "ServiceBusReceivedMessage"
  fullName: "com.azure.messaging.servicebus.ServiceBusReceivedMessage"
- uid: "com.azure.messaging.servicebus.SynchronousReceiveWork.next*"
  name: "next"
  nameWithType: "SynchronousReceiveWork.next"
  fullName: "com.azure.messaging.servicebus.SynchronousReceiveWork.next"
  package: "com.azure.messaging.servicebus"
- uid: "com.azure.messaging.servicebus.SynchronousReceiveWork.complete*"
  name: "complete"
  nameWithType: "SynchronousReceiveWork.complete"
  fullName: "com.azure.messaging.servicebus.SynchronousReceiveWork.complete"
  package: "com.azure.messaging.servicebus"
- uid: "java.lang.Throwable"
  spec.java:
  - uid: "java.lang.Throwable"
    name: "Throwable"
    fullName: "java.lang.Throwable"
- uid: "com.azure.messaging.servicebus.SynchronousReceiveWork.error*"
  name: "error"
  nameWithType: "SynchronousReceiveWork.error"
  fullName: "com.azure.messaging.servicebus.SynchronousReceiveWork.error"
  package: "com.azure.messaging.servicebus"
- uid: "java.lang.Object.notify()"
  name: "Object.notify()"
  nameWithType: "Object.notify()"
  fullName: "java.lang.Object.notify()"
- uid: "java.lang.Object.wait()"
  name: "Object.wait()"
  nameWithType: "Object.wait()"
  fullName: "java.lang.Object.wait()"
- uid: "java.lang.Object.finalize()"
  name: "Object.finalize()"
  nameWithType: "Object.finalize()"
  fullName: "java.lang.Object.finalize()"
- uid: "java.lang.Object.clone()"
  name: "Object.clone()"
  nameWithType: "Object.clone()"
  fullName: "java.lang.Object.clone()"
- uid: "java.lang.Object.notifyAll()"
  name: "Object.notifyAll()"
  nameWithType: "Object.notifyAll()"
  fullName: "java.lang.Object.notifyAll()"
- uid: "java.lang.Object.equals(java.lang.Object)"
  name: "Object.equals(Object)"
  nameWithType: "Object.equals(Object)"
  fullName: "java.lang.Object.equals(java.lang.Object)"
- uid: "java.lang.Object.getClass()"
  name: "Object.getClass()"
  nameWithType: "Object.getClass()"
  fullName: "java.lang.Object.getClass()"
- uid: "java.lang.Object.wait(long)"
  name: "Object.wait(long)"
  nameWithType: "Object.wait(long)"
  fullName: "java.lang.Object.wait(long)"
- uid: "java.lang.Object.hashCode()"
  name: "Object.hashCode()"
  nameWithType: "Object.hashCode()"
  fullName: "java.lang.Object.hashCode()"
- uid: "java.lang.Object.wait(long,int)"
  name: "Object.wait(long,int)"
  nameWithType: "Object.wait(long,int)"
  fullName: "java.lang.Object.wait(long,int)"
- uid: "java.lang.Object.toString()"
  name: "Object.toString()"
  nameWithType: "Object.toString()"
  fullName: "java.lang.Object.toString()"
- uid: "reactor.core.publisher.FluxSink"
  name: "FluxSink"
  nameWithType: "FluxSink"
  fullName: "reactor.core.publisher.FluxSink"
