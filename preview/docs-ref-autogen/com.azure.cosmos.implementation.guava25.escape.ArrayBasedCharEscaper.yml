### YamlMime:ManagedReference
items:
- uid: com.azure.cosmos.implementation.guava25.escape.ArrayBasedCharEscaper
  id: ArrayBasedCharEscaper
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.escape
  children:
  - com.azure.cosmos.implementation.guava25.escape.ArrayBasedCharEscaper.ArrayBasedCharEscaper(com.azure.cosmos.implementation.guava25.escape.ArrayBasedEscaperMap,char,char)
  - com.azure.cosmos.implementation.guava25.escape.ArrayBasedCharEscaper.ArrayBasedCharEscaper(java.util.Map<java.lang.Character,java.lang.String>,char,char)
  - com.azure.cosmos.implementation.guava25.escape.ArrayBasedCharEscaper.escape(char)
  - com.azure.cosmos.implementation.guava25.escape.ArrayBasedCharEscaper.escape(java.lang.String)
  - com.azure.cosmos.implementation.guava25.escape.ArrayBasedCharEscaper.escapeUnsafe(char)
  langs:
  - java
  name: ArrayBasedCharEscaper
  nameWithType: ArrayBasedCharEscaper
  fullName: com.azure.cosmos.implementation.guava25.escape.ArrayBasedCharEscaper
  type: Class
  package: com.azure.cosmos.implementation.guava25.escape
  summary: >-
    A <xref uid="com.azure.cosmos.implementation.guava25.escape.CharEscaper" data-throw-if-not-resolved="false">CharEscaper</xref> that uses an array to quickly look up replacement characters for a given `char` value. An additional safe range is provided that determines whether `char` values without specific replacements are to be considered safe and left unescaped or should be escaped in a general way.


    A good example of usage of this class is for Java source code escaping where the replacement array contains information about special ASCII characters such as `\\t` and `\\n` while <xref uid="com.azure.cosmos.implementation.guava25.escape.ArrayBasedCharEscaper.escapeUnsafe*" data-throw-if-not-resolved="false">#escapeUnsafe</xref> is overridden to handle general escaping of the form `\\uxxxx`.


    The size of the data structure used by <xref uid="com.azure.cosmos.implementation.guava25.escape.ArrayBasedCharEscaper" data-throw-if-not-resolved="false">ArrayBasedCharEscaper</xref> is proportional to the highest valued character that requires escaping. For example a replacement map containing the single character '`\``u1000`' will require approximately 16K of memory. If you need to create multiple escaper instances that have the same character replacement mapping consider using <xref uid="com.azure.cosmos.implementation.guava25.escape.ArrayBasedEscaperMap" data-throw-if-not-resolved="false">ArrayBasedEscaperMap</xref>.
  syntax:
    content: public abstract class ArrayBasedCharEscaper extends CharEscaper
  inheritance:
  - java.lang.Object
  - com.azure.cosmos.implementation.guava25.escape.Escaper
  - com.azure.cosmos.implementation.guava25.escape.CharEscaper
  inheritedMembers:
  - com.azure.cosmos.implementation.guava25.escape.CharEscaper.escape(char)
  - com.azure.cosmos.implementation.guava25.escape.CharEscaper.escape(java.lang.String)
  - com.azure.cosmos.implementation.guava25.escape.CharEscaper.escapeSlow(java.lang.String,int)
  - com.azure.cosmos.implementation.guava25.escape.Escaper.asFunction()
  - java.lang.Object.clone()
  - java.lang.Object.equals(java.lang.Object)
  - java.lang.Object.finalize()
  - java.lang.Object.getClass()
  - java.lang.Object.hashCode()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.toString()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
- uid: com.azure.cosmos.implementation.guava25.escape.ArrayBasedCharEscaper.ArrayBasedCharEscaper(com.azure.cosmos.implementation.guava25.escape.ArrayBasedEscaperMap,char,char)
  id: ArrayBasedCharEscaper(com.azure.cosmos.implementation.guava25.escape.ArrayBasedEscaperMap,char,char)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.escape.ArrayBasedCharEscaper
  langs:
  - java
  name: ArrayBasedCharEscaper(ArrayBasedEscaperMap escaperMap, char safeMin, char safeMax)
  nameWithType: ArrayBasedCharEscaper.ArrayBasedCharEscaper(ArrayBasedEscaperMap escaperMap, char safeMin, char safeMax)
  fullName: com.azure.cosmos.implementation.guava25.escape.ArrayBasedCharEscaper.ArrayBasedCharEscaper(ArrayBasedEscaperMap escaperMap, char safeMin, char safeMax)
  overload: com.azure.cosmos.implementation.guava25.escape.ArrayBasedCharEscaper.ArrayBasedCharEscaper*
  type: Constructor
  package: com.azure.cosmos.implementation.guava25.escape
  summary: >-
    Creates a new ArrayBasedCharEscaper instance with the given replacement map and specified safe range. If `safeMax < safeMin` then no characters are considered safe. This initializer is useful when explicit instances of ArrayBasedEscaperMap are used to allow the sharing of large replacement mappings.


    If a character has no mapped replacement then it is checked against the safe range. If it lies outside that, then <xref uid="com.azure.cosmos.implementation.guava25.escape.ArrayBasedCharEscaper.escapeUnsafe*" data-throw-if-not-resolved="false">#escapeUnsafe</xref> is called, otherwise no escaping is performed.
  syntax:
    content: protected ArrayBasedCharEscaper(ArrayBasedEscaperMap escaperMap, char safeMin, char safeMax)
    parameters:
    - id: escaperMap
      type: com.azure.cosmos.implementation.guava25.escape.ArrayBasedEscaperMap
      description: the mapping of characters to be escaped
    - id: safeMin
      type: char
      description: the lowest character value in the safe range
    - id: safeMax
      type: char
      description: the highest character value in the safe range
- uid: com.azure.cosmos.implementation.guava25.escape.ArrayBasedCharEscaper.ArrayBasedCharEscaper(java.util.Map<java.lang.Character,java.lang.String>,char,char)
  id: ArrayBasedCharEscaper(java.util.Map<java.lang.Character,java.lang.String>,char,char)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.escape.ArrayBasedCharEscaper
  langs:
  - java
  name: ArrayBasedCharEscaper(Map<Character,String> replacementMap, char safeMin, char safeMax)
  nameWithType: ArrayBasedCharEscaper.ArrayBasedCharEscaper(Map<Character,String> replacementMap, char safeMin, char safeMax)
  fullName: com.azure.cosmos.implementation.guava25.escape.ArrayBasedCharEscaper.ArrayBasedCharEscaper(Map<Character,String> replacementMap, char safeMin, char safeMax)
  overload: com.azure.cosmos.implementation.guava25.escape.ArrayBasedCharEscaper.ArrayBasedCharEscaper*
  type: Constructor
  package: com.azure.cosmos.implementation.guava25.escape
  summary: >-
    Creates a new ArrayBasedCharEscaper instance with the given replacement map and specified safe range. If `safeMax < safeMin` then no characters are considered safe.


    If a character has no mapped replacement then it is checked against the safe range. If it lies outside that, then <xref uid="com.azure.cosmos.implementation.guava25.escape.ArrayBasedCharEscaper.escapeUnsafe*" data-throw-if-not-resolved="false">#escapeUnsafe</xref> is called, otherwise no escaping is performed.
  syntax:
    content: protected ArrayBasedCharEscaper(Map<Character,String> replacementMap, char safeMin, char safeMax)
    parameters:
    - id: replacementMap
      type: java.util.Map<java.lang.Character,java.lang.String>
      description: a map of characters to their escaped representations
    - id: safeMin
      type: char
      description: the lowest character value in the safe range
    - id: safeMax
      type: char
      description: the highest character value in the safe range
- uid: com.azure.cosmos.implementation.guava25.escape.ArrayBasedCharEscaper.escape(char)
  id: escape(char)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.escape.ArrayBasedCharEscaper
  langs:
  - java
  name: escape(char c)
  nameWithType: ArrayBasedCharEscaper.escape(char c)
  fullName: com.azure.cosmos.implementation.guava25.escape.ArrayBasedCharEscaper.escape(char c)
  overload: com.azure.cosmos.implementation.guava25.escape.ArrayBasedCharEscaper.escape*
  type: Method
  package: com.azure.cosmos.implementation.guava25.escape
  summary: Escapes a single character using the replacement array and safe range values. If the given character does not have an explicit replacement and lies outside the safe range then <xref uid="com.azure.cosmos.implementation.guava25.escape.ArrayBasedCharEscaper.escapeUnsafe*" data-throw-if-not-resolved="false">#escapeUnsafe</xref> is called.
  syntax:
    content: protected final char[] escape(char c)
    parameters:
    - id: c
      type: char
    return:
      type: char[]
- uid: com.azure.cosmos.implementation.guava25.escape.ArrayBasedCharEscaper.escape(java.lang.String)
  id: escape(java.lang.String)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.escape.ArrayBasedCharEscaper
  langs:
  - java
  name: escape(String s)
  nameWithType: ArrayBasedCharEscaper.escape(String s)
  fullName: com.azure.cosmos.implementation.guava25.escape.ArrayBasedCharEscaper.escape(String s)
  overload: com.azure.cosmos.implementation.guava25.escape.ArrayBasedCharEscaper.escape*
  type: Method
  package: com.azure.cosmos.implementation.guava25.escape
  summary: Returns the escaped form of a given literal string.
  syntax:
    content: public final String escape(String s)
    parameters:
    - id: s
      type: java.lang.String
    return:
      type: java.lang.String
- uid: com.azure.cosmos.implementation.guava25.escape.ArrayBasedCharEscaper.escapeUnsafe(char)
  id: escapeUnsafe(char)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.escape.ArrayBasedCharEscaper
  langs:
  - java
  name: escapeUnsafe(char c)
  nameWithType: ArrayBasedCharEscaper.escapeUnsafe(char c)
  fullName: com.azure.cosmos.implementation.guava25.escape.ArrayBasedCharEscaper.escapeUnsafe(char c)
  overload: com.azure.cosmos.implementation.guava25.escape.ArrayBasedCharEscaper.escapeUnsafe*
  type: Method
  package: com.azure.cosmos.implementation.guava25.escape
  summary: >-
    Escapes a `char` value that has no direct explicit value in the replacement array and lies outside the stated safe range. Subclasses should override this method to provide generalized escaping for characters.


    Note that arrays returned by this method must not be modified once they have been returned. However it is acceptable to return the same array multiple times (even for different input characters).
  syntax:
    content: protected abstract char[] escapeUnsafe(char c)
    parameters:
    - id: c
      type: char
      description: the character to escape
    return:
      type: char[]
      description: the replacement characters, or <code>null</code> if no escaping was required
references:
- uid: java.util.Map<java.lang.Character,java.lang.String>
  spec.java:
  - uid: java.util.Map
    name: Map
    fullName: java.util.Map
  - name: <
    fullName: <
  - uid: java.lang.Character
    name: Character
    fullName: java.lang.Character
  - name: ','
    fullName: ','
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
  - name: '>'
    fullName: '>'
- uid: char
  spec.java:
  - uid: char
    name: char
    fullName: char
- uid: com.azure.cosmos.implementation.guava25.escape.ArrayBasedCharEscaper.ArrayBasedCharEscaper*
  name: ArrayBasedCharEscaper
  nameWithType: ArrayBasedCharEscaper.ArrayBasedCharEscaper
  fullName: com.azure.cosmos.implementation.guava25.escape.ArrayBasedCharEscaper.ArrayBasedCharEscaper
  package: com.azure.cosmos.implementation.guava25.escape
- uid: com.azure.cosmos.implementation.guava25.escape.ArrayBasedEscaperMap
  name: ArrayBasedEscaperMap
  nameWithType: ArrayBasedEscaperMap
  fullName: com.azure.cosmos.implementation.guava25.escape.ArrayBasedEscaperMap
- uid: java.lang.String
  spec.java:
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
- uid: com.azure.cosmos.implementation.guava25.escape.ArrayBasedCharEscaper.escape*
  name: escape
  nameWithType: ArrayBasedCharEscaper.escape
  fullName: com.azure.cosmos.implementation.guava25.escape.ArrayBasedCharEscaper.escape
  package: com.azure.cosmos.implementation.guava25.escape
- uid: char[]
  spec.java:
  - uid: char
    name: char
    fullName: char
  - name: '[]'
    fullName: '[]'
- uid: com.azure.cosmos.implementation.guava25.escape.ArrayBasedCharEscaper.escapeUnsafe*
  name: escapeUnsafe
  nameWithType: ArrayBasedCharEscaper.escapeUnsafe
  fullName: com.azure.cosmos.implementation.guava25.escape.ArrayBasedCharEscaper.escapeUnsafe
  package: com.azure.cosmos.implementation.guava25.escape
- uid: com.azure.cosmos.implementation.guava25.escape.CharEscaper
  name: CharEscaper
  nameWithType: CharEscaper
  fullName: com.azure.cosmos.implementation.guava25.escape.CharEscaper
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: java.lang.Object.finalize()
  name: Object.finalize()
  nameWithType: Object.finalize()
  fullName: java.lang.Object.finalize()
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: java.lang.Object.clone()
  name: Object.clone()
  nameWithType: Object.clone()
  fullName: java.lang.Object.clone()
- uid: java.lang.Object.equals(java.lang.Object)
  name: Object.equals(Object)
  nameWithType: Object.equals(Object)
  fullName: java.lang.Object.equals(java.lang.Object)
- uid: java.lang.Object.toString()
  name: Object.toString()
  nameWithType: Object.toString()
  fullName: java.lang.Object.toString()
- uid: com.azure.cosmos.implementation.guava25.escape.Escaper.asFunction()
  name: Escaper.asFunction()
  nameWithType: Escaper.asFunction()
  fullName: com.azure.cosmos.implementation.guava25.escape.Escaper.asFunction()
- uid: com.azure.cosmos.implementation.guava25.escape.CharEscaper.escape(char)
  name: CharEscaper.escape(char)
  nameWithType: CharEscaper.escape(char)
  fullName: com.azure.cosmos.implementation.guava25.escape.CharEscaper.escape(char)
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: com.azure.cosmos.implementation.guava25.escape.CharEscaper.escapeSlow(java.lang.String,int)
  name: CharEscaper.escapeSlow(String,int)
  nameWithType: CharEscaper.escapeSlow(String,int)
  fullName: com.azure.cosmos.implementation.guava25.escape.CharEscaper.escapeSlow(java.lang.String,int)
- uid: java.lang.Object.hashCode()
  name: Object.hashCode()
  nameWithType: Object.hashCode()
  fullName: java.lang.Object.hashCode()
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: com.azure.cosmos.implementation.guava25.escape.CharEscaper.escape(java.lang.String)
  name: CharEscaper.escape(String)
  nameWithType: CharEscaper.escape(String)
  fullName: com.azure.cosmos.implementation.guava25.escape.CharEscaper.escape(java.lang.String)
- uid: java.util.Map
  name: Map
  nameWithType: Map
  fullName: java.util.Map
- uid: java.lang.Character,java.lang.String
  name: Character,String
  nameWithType: Character,String
  fullName: java.lang.Character,java.lang.String
