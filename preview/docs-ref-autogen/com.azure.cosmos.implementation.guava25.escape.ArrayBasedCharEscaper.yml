### YamlMime:JavaType
uid: "com.azure.cosmos.implementation.guava25.escape.ArrayBasedCharEscaper"
fullName: "com.azure.cosmos.implementation.guava25.escape.ArrayBasedCharEscaper"
name: "ArrayBasedCharEscaper"
nameWithType: "ArrayBasedCharEscaper"
summary: "A <xref uid=\"com.azure.cosmos.implementation.guava25.escape.CharEscaper\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CharEscaper\"></xref> that uses an array to quickly look up replacement characters for a given `char` value. An additional safe range is provided that determines whether `char` values without specific replacements are to be considered safe and left unescaped or should be escaped in a general way.\n\nA good example of usage of this class is for Java source code escaping where the replacement array contains information about special ASCII characters such as `\\\\t` and `\\\\n` while <xref uid=\"com.azure.cosmos.implementation.guava25.escape.ArrayBasedCharEscaper.escapeUnsafe*\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#escapeUnsafe\"></xref> is overridden to handle general escaping of the form `\\\\uxxxx`.\n\nThe size of the data structure used by <xref uid=\"com.azure.cosmos.implementation.guava25.escape.ArrayBasedCharEscaper\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ArrayBasedCharEscaper\"></xref> is proportional to the highest valued character that requires escaping. For example a replacement map containing the single character '`\\``u1000`' will require approximately 16K of memory. If you need to create multiple escaper instances that have the same character replacement mapping consider using <xref uid=\"com.azure.cosmos.implementation.guava25.escape.ArrayBasedEscaperMap\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ArrayBasedEscaperMap\"></xref>."
inheritances:
- "<xref href=\"java.lang.Object\" data-throw-if-not-resolved=\"False\" />"
- "<xref href=\"com.azure.cosmos.implementation.guava25.escape.Escaper\" data-throw-if-not-resolved=\"False\" />"
- "<xref href=\"com.azure.cosmos.implementation.guava25.escape.CharEscaper\" data-throw-if-not-resolved=\"False\" />"
inheritedMembers:
- "com.azure.cosmos.implementation.guava25.escape.CharEscaper.escape(char)"
- "com.azure.cosmos.implementation.guava25.escape.CharEscaper.escape(java.lang.String)"
- "com.azure.cosmos.implementation.guava25.escape.CharEscaper.escapeSlow(java.lang.String,int)"
- "com.azure.cosmos.implementation.guava25.escape.Escaper.asFunction()"
- "java.lang.Object.clone()"
- "java.lang.Object.equals(java.lang.Object)"
- "java.lang.Object.finalize()"
- "java.lang.Object.getClass()"
- "java.lang.Object.hashCode()"
- "java.lang.Object.notify()"
- "java.lang.Object.notifyAll()"
- "java.lang.Object.toString()"
- "java.lang.Object.wait()"
- "java.lang.Object.wait(long)"
- "java.lang.Object.wait(long,int)"
syntax: "public abstract class ArrayBasedCharEscaper extends CharEscaper"
constructors:
- "com.azure.cosmos.implementation.guava25.escape.ArrayBasedCharEscaper.ArrayBasedCharEscaper(com.azure.cosmos.implementation.guava25.escape.ArrayBasedEscaperMap,char,char)"
- "com.azure.cosmos.implementation.guava25.escape.ArrayBasedCharEscaper.ArrayBasedCharEscaper(java.util.Map<java.lang.Character,java.lang.String>,char,char)"
methods:
- "com.azure.cosmos.implementation.guava25.escape.ArrayBasedCharEscaper.escape(char)"
- "com.azure.cosmos.implementation.guava25.escape.ArrayBasedCharEscaper.escape(java.lang.String)"
- "com.azure.cosmos.implementation.guava25.escape.ArrayBasedCharEscaper.escapeUnsafe(char)"
type: "class"
metadata: {}
package: "com.azure.cosmos.implementation.guava25.escape"
artifact: com.azure:azure-cosmos:4.4.0-beta.1
