### YamlMime:JavaType
uid: "com.azure.cosmos.implementation.uuid.UUIDTimer"
fullName: "com.azure.cosmos.implementation.uuid.UUIDTimer"
name: "UUIDTimer"
nameWithType: "UUIDTimer"
summary: "UUIDTimer produces the time stamps required for time-based UUIDs. It works as outlined in the UUID specification, with following implementation:\n\n *  Java classes can only product time stamps with maximum resolution of one millisecond (at least before JDK 1.5). To compensate, an additional counter is used, so that more than one UUID can be generated between java clock updates. Counter may be used to generate up to 10000 UUIDs for each distinct java clock value.\n *  Due to even lower clock resolution on some platforms (older Windows versions use 55 msec resolution), timestamp value can also advanced ahead of physical value within limits (by default, up 100 millisecond ahead of reported), if necessary (ie. 10000 instances created before clock time advances).\n *  As an additional precaution, counter is initialized not to 0 but to a random 8-bit number, and each time clock changes, lowest 8-bits of counter are preserved. The purpose it to make likelyhood of multi-JVM multi-instance generators to collide, without significantly reducing max. UUID generation speed. Note though that using more than one generator (from separate JVMs) is strongly discouraged, so hopefully this enhancement isn't needed. This 8-bit offset has to be reduced from total max. UUID count to preserve ordering property of UUIDs (ie. one can see which UUID was generated first for given UUID generator); the resulting 9500 UUIDs isn't much different from the optimal choice.\n *  Finally, as of version 2.0 and onwards, optional external timestamp synchronization can be done. This is done similar to the way UUID specification suggests; except that since there is no way to lock the whole system, file-based locking is used. This works between multiple JVMs and Jug instances.\n\nSome additional assumptions about calculating the timestamp:\n\n *  System.currentTimeMillis() is assumed to give time offset in UTC, or at least close enough thing to get correct timestamps. The alternate route would have to go through calendar object, use TimeZone offset to get to UTC, and then modify. Using currentTimeMillis should be much faster to allow rapid UUID creation.\n *  Similarly, the constant used for time offset between 1.1.1970 and start of Gregorian calendar is assumed to be correct (which seems to be the case when testing with Java calendars).\n\nNote about synchronization: main synchronization point (as of version 3.1.1 and above) is <xref uid=\"com.azure.cosmos.implementation.uuid.UUIDTimer.getTimestamp*\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#getTimestamp\"></xref>, so caller need not synchronize access explicitly."
inheritances:
- "<xref href=\"java.lang.Object\" data-throw-if-not-resolved=\"False\" />"
inheritedMembers:
- "java.lang.Object.clone()"
- "java.lang.Object.equals(java.lang.Object)"
- "java.lang.Object.finalize()"
- "java.lang.Object.getClass()"
- "java.lang.Object.hashCode()"
- "java.lang.Object.notify()"
- "java.lang.Object.notifyAll()"
- "java.lang.Object.toString()"
- "java.lang.Object.wait()"
- "java.lang.Object.wait(long)"
- "java.lang.Object.wait(long,int)"
syntax: "public class UUIDTimer"
constructors:
- "com.azure.cosmos.implementation.uuid.UUIDTimer.UUIDTimer(java.util.Random,com.azure.cosmos.implementation.uuid.TimestampSynchronizer)"
- "com.azure.cosmos.implementation.uuid.UUIDTimer.UUIDTimer(java.util.Random,com.azure.cosmos.implementation.uuid.TimestampSynchronizer,com.azure.cosmos.implementation.uuid.UUIDClock)"
fields:
- "com.azure.cosmos.implementation.uuid.UUIDTimer._clock"
- "com.azure.cosmos.implementation.uuid.UUIDTimer._random"
- "com.azure.cosmos.implementation.uuid.UUIDTimer._syncer"
methods:
- "com.azure.cosmos.implementation.uuid.UUIDTimer.getAndSetTimestamp(byte[])"
- "com.azure.cosmos.implementation.uuid.UUIDTimer.getClockSequence()"
- "com.azure.cosmos.implementation.uuid.UUIDTimer.getTimestamp()"
- "com.azure.cosmos.implementation.uuid.UUIDTimer.slowDown(long,long)"
type: "class"
metadata: {}
package: "com.azure.cosmos.implementation.uuid"
artifact: com.azure:azure-cosmos:4.4.0-beta.1
