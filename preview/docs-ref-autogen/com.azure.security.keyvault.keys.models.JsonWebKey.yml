### YamlMime:JavaType
uid: "com.azure.security.keyvault.keys.models.JsonWebKey"
fullName: "com.azure.security.keyvault.keys.models.JsonWebKey"
name: "JsonWebKey"
nameWithType: "JsonWebKey"
summary: "As of http://tools.<wbr>ietf.<wbr>org/html/draft-ietf-jose-json-web-key-18."
inheritances:
- "<xref href=\"java.lang.Object?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
inheritedMembers:
- "java.lang.Object.clone()"
- "java.lang.Object.equals(java.lang.Object)"
- "java.lang.Object.finalize()"
- "java.lang.Object.getClass()"
- "java.lang.Object.hashCode()"
- "java.lang.Object.notify()"
- "java.lang.Object.notifyAll()"
- "java.lang.Object.toString()"
- "java.lang.Object.wait()"
- "java.lang.Object.wait(long)"
- "java.lang.Object.wait(long,int)"
syntax: "public class JsonWebKey"
constructors:
- uid: "com.azure.security.keyvault.keys.models.JsonWebKey.JsonWebKey()"
  fullName: "com.azure.security.keyvault.keys.models.JsonWebKey.JsonWebKey()"
  name: "JsonWebKey()"
  nameWithType: "JsonWebKey.JsonWebKey()"
  syntax: "public JsonWebKey()"
methods:
- uid: "com.azure.security.keyvault.keys.models.JsonWebKey.clearMemory()"
  fullName: "com.azure.security.keyvault.keys.models.JsonWebKey.clearMemory()"
  name: "clearMemory()"
  nameWithType: "JsonWebKey.clearMemory()"
  summary: "Clear key materials."
  syntax: "public void clearMemory()"
  desc: "Clear key materials."
- uid: "com.azure.security.keyvault.keys.models.JsonWebKey.equals(com.azure.security.keyvault.keys.models.JsonWebKey)"
  fullName: "com.azure.security.keyvault.keys.models.JsonWebKey.equals(JsonWebKey jwk)"
  name: "equals(JsonWebKey jwk)"
  nameWithType: "JsonWebKey.equals(JsonWebKey jwk)"
  summary: "Indicates whether some other <xref uid=\"com.azure.security.keyvault.keys.models.JsonWebKey\" data-throw-if-not-resolved=\"false\" data-raw-source=\"JsonWebKey\"></xref> is \"equal to\" this one."
  parameters:
  - description: "The other <xref uid=\"com.azure.security.keyvault.keys.models.JsonWebKey\" data-throw-if-not-resolved=\"false\" data-raw-source=\"JsonWebKey\"></xref> to compare with."
    name: "jwk"
    type: "<xref href=\"com.azure.security.keyvault.keys.models.JsonWebKey?alt=com.azure.security.keyvault.keys.models.JsonWebKey&text=JsonWebKey\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public boolean equals(JsonWebKey jwk)"
  desc: "Indicates whether some other <xref uid=\"com.azure.security.keyvault.keys.models.JsonWebKey\" data-throw-if-not-resolved=\"false\" data-raw-source=\"JsonWebKey\"></xref> is \"equal to\" this one."
  returns:
    description: "true if this <xref uid=\"com.azure.security.keyvault.keys.models.JsonWebKey\" data-throw-if-not-resolved=\"false\" data-raw-source=\"JsonWebKey\"></xref> is the same as the jwk argument;\n false otherwise."
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.security.keyvault.keys.models.JsonWebKey.equals(java.lang.Object)"
  fullName: "com.azure.security.keyvault.keys.models.JsonWebKey.equals(Object obj)"
  name: "equals(Object obj)"
  nameWithType: "JsonWebKey.equals(Object obj)"
  overridden: "java.lang.Object.equals(java.lang.Object)"
  parameters:
  - name: "obj"
    type: "<xref href=\"java.lang.Object?alt=java.lang.Object&text=Object\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public boolean equals(Object obj)"
  returns:
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.security.keyvault.keys.models.JsonWebKey.fromAes(javax.crypto.SecretKey)"
  fullName: "com.azure.security.keyvault.keys.models.JsonWebKey.fromAes(SecretKey secretKey)"
  name: "fromAes(SecretKey secretKey)"
  nameWithType: "JsonWebKey.fromAes(SecretKey secretKey)"
  summary: "Converts AES key to JSON web key."
  modifiers:
  - "static"
  parameters:
  - description: "The AES key"
    name: "secretKey"
    type: "<xref href=\"javax.crypto.SecretKey?alt=javax.crypto.SecretKey&text=SecretKey\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public static JsonWebKey fromAes(SecretKey secretKey)"
  desc: "Converts AES key to JSON web key."
  returns:
    description: "the JSON web key, converted from AES key."
    type: "<xref href=\"com.azure.security.keyvault.keys.models.JsonWebKey?alt=com.azure.security.keyvault.keys.models.JsonWebKey&text=JsonWebKey\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.security.keyvault.keys.models.JsonWebKey.fromAes(javax.crypto.SecretKey,java.util.List<com.azure.security.keyvault.keys.models.KeyOperation>)"
  fullName: "com.azure.security.keyvault.keys.models.JsonWebKey.fromAes(SecretKey secretKey, List<KeyOperation> keyOperations)"
  name: "fromAes(SecretKey secretKey, List<KeyOperation> keyOperations)"
  nameWithType: "JsonWebKey.fromAes(SecretKey secretKey, List<KeyOperation> keyOperations)"
  summary: "Converts AES key to JSON web key."
  modifiers:
  - "static"
  parameters:
  - description: "The AES key"
    name: "secretKey"
    type: "<xref href=\"javax.crypto.SecretKey?alt=javax.crypto.SecretKey&text=SecretKey\" data-throw-if-not-resolved=\"False\" />"
  - description: "The key operations to set"
    name: "keyOperations"
    type: "<xref href=\"java.util.List?alt=java.util.List&text=List\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.security.keyvault.keys.models.KeyOperation?alt=com.azure.security.keyvault.keys.models.KeyOperation&text=KeyOperation\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public static JsonWebKey fromAes(SecretKey secretKey, List<KeyOperation> keyOperations)"
  desc: "Converts AES key to JSON web key."
  returns:
    description: "the JSON web key, converted from AES key."
    type: "<xref href=\"com.azure.security.keyvault.keys.models.JsonWebKey?alt=com.azure.security.keyvault.keys.models.JsonWebKey&text=JsonWebKey\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.security.keyvault.keys.models.JsonWebKey.fromEc(java.security.KeyPair,java.security.Provider)"
  fullName: "com.azure.security.keyvault.keys.models.JsonWebKey.fromEc(KeyPair keyPair, Provider provider)"
  name: "fromEc(KeyPair keyPair, Provider provider)"
  nameWithType: "JsonWebKey.fromEc(KeyPair keyPair, Provider provider)"
  summary: "Converts EC key pair to JSON web key."
  modifiers:
  - "static"
  parameters:
  - description: "The EC key pair"
    name: "keyPair"
    type: "<xref href=\"java.security.KeyPair?alt=java.security.KeyPair&text=KeyPair\" data-throw-if-not-resolved=\"False\" />"
  - description: "The Java security provider"
    name: "provider"
    type: "<xref href=\"java.security.Provider?alt=java.security.Provider&text=Provider\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public static JsonWebKey fromEc(KeyPair keyPair, Provider provider)"
  desc: "Converts EC key pair to JSON web key."
  returns:
    description: "the JSON web key, converted from EC key pair."
    type: "<xref href=\"com.azure.security.keyvault.keys.models.JsonWebKey?alt=com.azure.security.keyvault.keys.models.JsonWebKey&text=JsonWebKey\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.security.keyvault.keys.models.JsonWebKey.fromEc(java.security.KeyPair,java.security.Provider,java.util.List<com.azure.security.keyvault.keys.models.KeyOperation>)"
  fullName: "com.azure.security.keyvault.keys.models.JsonWebKey.fromEc(KeyPair keyPair, Provider provider, List<KeyOperation> keyOperations)"
  name: "fromEc(KeyPair keyPair, Provider provider, List<KeyOperation> keyOperations)"
  nameWithType: "JsonWebKey.fromEc(KeyPair keyPair, Provider provider, List<KeyOperation> keyOperations)"
  summary: "Converts EC key pair to JSON web key."
  modifiers:
  - "static"
  parameters:
  - description: "The EC key pair"
    name: "keyPair"
    type: "<xref href=\"java.security.KeyPair?alt=java.security.KeyPair&text=KeyPair\" data-throw-if-not-resolved=\"False\" />"
  - description: "The Java security provider"
    name: "provider"
    type: "<xref href=\"java.security.Provider?alt=java.security.Provider&text=Provider\" data-throw-if-not-resolved=\"False\" />"
  - description: "The key operations to set."
    name: "keyOperations"
    type: "<xref href=\"java.util.List?alt=java.util.List&text=List\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.security.keyvault.keys.models.KeyOperation?alt=com.azure.security.keyvault.keys.models.KeyOperation&text=KeyOperation\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public static JsonWebKey fromEc(KeyPair keyPair, Provider provider, List<KeyOperation> keyOperations)"
  desc: "Converts EC key pair to JSON web key."
  returns:
    description: "the JSON web key, converted from EC key pair."
    type: "<xref href=\"com.azure.security.keyvault.keys.models.JsonWebKey?alt=com.azure.security.keyvault.keys.models.JsonWebKey&text=JsonWebKey\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.security.keyvault.keys.models.JsonWebKey.fromRsa(java.security.KeyPair)"
  fullName: "com.azure.security.keyvault.keys.models.JsonWebKey.fromRsa(KeyPair keyPair)"
  name: "fromRsa(KeyPair keyPair)"
  nameWithType: "JsonWebKey.fromRsa(KeyPair keyPair)"
  summary: "Converts RSA key pair to JSON web key."
  modifiers:
  - "static"
  parameters:
  - description: "Tbe RSA key pair"
    name: "keyPair"
    type: "<xref href=\"java.security.KeyPair?alt=java.security.KeyPair&text=KeyPair\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public static JsonWebKey fromRsa(KeyPair keyPair)"
  desc: "Converts RSA key pair to JSON web key."
  returns:
    description: "the JSON web key, converted from RSA key pair."
    type: "<xref href=\"com.azure.security.keyvault.keys.models.JsonWebKey?alt=com.azure.security.keyvault.keys.models.JsonWebKey&text=JsonWebKey\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.security.keyvault.keys.models.JsonWebKey.fromRsa(java.security.KeyPair,java.util.List<com.azure.security.keyvault.keys.models.KeyOperation>)"
  fullName: "com.azure.security.keyvault.keys.models.JsonWebKey.fromRsa(KeyPair keyPair, List<KeyOperation> keyOperations)"
  name: "fromRsa(KeyPair keyPair, List<KeyOperation> keyOperations)"
  nameWithType: "JsonWebKey.fromRsa(KeyPair keyPair, List<KeyOperation> keyOperations)"
  summary: "Converts RSA key pair to JSON web key."
  modifiers:
  - "static"
  parameters:
  - description: "Tbe RSA key pair"
    name: "keyPair"
    type: "<xref href=\"java.security.KeyPair?alt=java.security.KeyPair&text=KeyPair\" data-throw-if-not-resolved=\"False\" />"
  - description: "The key operations to set on the key"
    name: "keyOperations"
    type: "<xref href=\"java.util.List?alt=java.util.List&text=List\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.security.keyvault.keys.models.KeyOperation?alt=com.azure.security.keyvault.keys.models.KeyOperation&text=KeyOperation\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public static JsonWebKey fromRsa(KeyPair keyPair, List<KeyOperation> keyOperations)"
  desc: "Converts RSA key pair to JSON web key."
  returns:
    description: "the JSON web key, converted from RSA key pair."
    type: "<xref href=\"com.azure.security.keyvault.keys.models.JsonWebKey?alt=com.azure.security.keyvault.keys.models.JsonWebKey&text=JsonWebKey\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.security.keyvault.keys.models.JsonWebKey.getCurveName()"
  fullName: "com.azure.security.keyvault.keys.models.JsonWebKey.getCurveName()"
  name: "getCurveName()"
  nameWithType: "JsonWebKey.getCurveName()"
  summary: "Get the crv value."
  syntax: "public KeyCurveName getCurveName()"
  desc: "Get the crv value."
  returns:
    description: "the crv value"
    type: "<xref href=\"com.azure.security.keyvault.keys.models.KeyCurveName?alt=com.azure.security.keyvault.keys.models.KeyCurveName&text=KeyCurveName\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.security.keyvault.keys.models.JsonWebKey.getD()"
  fullName: "com.azure.security.keyvault.keys.models.JsonWebKey.getD()"
  name: "getD()"
  nameWithType: "JsonWebKey.getD()"
  summary: "Get the d value."
  syntax: "public byte[] getD()"
  desc: "Get the d value."
  returns:
    description: "the d value"
    type: "<xref href=\"byte?alt=byte&text=byte\" data-throw-if-not-resolved=\"False\" />[]"
- uid: "com.azure.security.keyvault.keys.models.JsonWebKey.getDp()"
  fullName: "com.azure.security.keyvault.keys.models.JsonWebKey.getDp()"
  name: "getDp()"
  nameWithType: "JsonWebKey.getDp()"
  summary: "Get the RSA Private Key Parameter value."
  syntax: "public byte[] getDp()"
  desc: "Get the RSA Private Key Parameter value."
  returns:
    description: "the RSA Private Key Parameter value."
    type: "<xref href=\"byte?alt=byte&text=byte\" data-throw-if-not-resolved=\"False\" />[]"
- uid: "com.azure.security.keyvault.keys.models.JsonWebKey.getDq()"
  fullName: "com.azure.security.keyvault.keys.models.JsonWebKey.getDq()"
  name: "getDq()"
  nameWithType: "JsonWebKey.getDq()"
  summary: "Get the RSA Private Key Parameter value."
  syntax: "public byte[] getDq()"
  desc: "Get the RSA Private Key Parameter value."
  returns:
    description: "the RSA Private Key Parameter value."
    type: "<xref href=\"byte?alt=byte&text=byte\" data-throw-if-not-resolved=\"False\" />[]"
- uid: "com.azure.security.keyvault.keys.models.JsonWebKey.getE()"
  fullName: "com.azure.security.keyvault.keys.models.JsonWebKey.getE()"
  name: "getE()"
  nameWithType: "JsonWebKey.getE()"
  summary: "Get the e value."
  syntax: "public byte[] getE()"
  desc: "Get the e value."
  returns:
    description: "the e value"
    type: "<xref href=\"byte?alt=byte&text=byte\" data-throw-if-not-resolved=\"False\" />[]"
- uid: "com.azure.security.keyvault.keys.models.JsonWebKey.getId()"
  fullName: "com.azure.security.keyvault.keys.models.JsonWebKey.getId()"
  name: "getId()"
  nameWithType: "JsonWebKey.getId()"
  summary: "Get the kid value."
  syntax: "public String getId()"
  desc: "Get the kid value."
  returns:
    description: "the kid value"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.security.keyvault.keys.models.JsonWebKey.getK()"
  fullName: "com.azure.security.keyvault.keys.models.JsonWebKey.getK()"
  name: "getK()"
  nameWithType: "JsonWebKey.getK()"
  summary: "Get Symmetric key value."
  syntax: "public byte[] getK()"
  desc: "Get Symmetric key value."
  returns:
    description: "the symmetric key value."
    type: "<xref href=\"byte?alt=byte&text=byte\" data-throw-if-not-resolved=\"False\" />[]"
- uid: "com.azure.security.keyvault.keys.models.JsonWebKey.getKeyOps()"
  fullName: "com.azure.security.keyvault.keys.models.JsonWebKey.getKeyOps()"
  name: "getKeyOps()"
  nameWithType: "JsonWebKey.getKeyOps()"
  summary: "Get the immutable key operations list."
  syntax: "public List<KeyOperation> getKeyOps()"
  desc: "Get the immutable key operations list. The list cannot be modified."
  returns:
    description: "the key operations list"
    type: "<xref href=\"java.util.List?alt=java.util.List&text=List\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.security.keyvault.keys.models.KeyOperation?alt=com.azure.security.keyvault.keys.models.KeyOperation&text=KeyOperation\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.security.keyvault.keys.models.JsonWebKey.getKeyType()"
  fullName: "com.azure.security.keyvault.keys.models.JsonWebKey.getKeyType()"
  name: "getKeyType()"
  nameWithType: "JsonWebKey.getKeyType()"
  summary: "Get the kty value."
  syntax: "public KeyType getKeyType()"
  desc: "Get the kty value."
  returns:
    description: "the kty value"
    type: "<xref href=\"com.azure.security.keyvault.keys.models.KeyType?alt=com.azure.security.keyvault.keys.models.KeyType&text=KeyType\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.security.keyvault.keys.models.JsonWebKey.getN()"
  fullName: "com.azure.security.keyvault.keys.models.JsonWebKey.getN()"
  name: "getN()"
  nameWithType: "JsonWebKey.getN()"
  summary: "Get the n value."
  syntax: "public byte[] getN()"
  desc: "Get the n value."
  returns:
    description: "the n value"
    type: "<xref href=\"byte?alt=byte&text=byte\" data-throw-if-not-resolved=\"False\" />[]"
- uid: "com.azure.security.keyvault.keys.models.JsonWebKey.getP()"
  fullName: "com.azure.security.keyvault.keys.models.JsonWebKey.getP()"
  name: "getP()"
  nameWithType: "JsonWebKey.getP()"
  summary: "Get the RSA secret prime value."
  syntax: "public byte[] getP()"
  desc: "Get the RSA secret prime value."
  returns:
    description: "the RSA secret prime value."
    type: "<xref href=\"byte?alt=byte&text=byte\" data-throw-if-not-resolved=\"False\" />[]"
- uid: "com.azure.security.keyvault.keys.models.JsonWebKey.getQ()"
  fullName: "com.azure.security.keyvault.keys.models.JsonWebKey.getQ()"
  name: "getQ()"
  nameWithType: "JsonWebKey.getQ()"
  summary: "Get RSA secret prime, with p < q value."
  syntax: "public byte[] getQ()"
  desc: "Get RSA secret prime, with p < q value."
  returns:
    description: "the RSA secret prime, with p &lt; q value."
    type: "<xref href=\"byte?alt=byte&text=byte\" data-throw-if-not-resolved=\"False\" />[]"
- uid: "com.azure.security.keyvault.keys.models.JsonWebKey.getQi()"
  fullName: "com.azure.security.keyvault.keys.models.JsonWebKey.getQi()"
  name: "getQi()"
  nameWithType: "JsonWebKey.getQi()"
  summary: "Get the RSA Private Key Parameter value."
  syntax: "public byte[] getQi()"
  desc: "Get the RSA Private Key Parameter value."
  returns:
    description: "the RSA Private Key Parameter value."
    type: "<xref href=\"byte?alt=byte&text=byte\" data-throw-if-not-resolved=\"False\" />[]"
- uid: "com.azure.security.keyvault.keys.models.JsonWebKey.getT()"
  fullName: "com.azure.security.keyvault.keys.models.JsonWebKey.getT()"
  name: "getT()"
  nameWithType: "JsonWebKey.getT()"
  summary: "Get HSM Token value, used with Bring Your Own Key."
  syntax: "public byte[] getT()"
  desc: "Get HSM Token value, used with Bring Your Own Key."
  returns:
    description: "HSM Token, used with Bring Your Own Key."
    type: "<xref href=\"byte?alt=byte&text=byte\" data-throw-if-not-resolved=\"False\" />[]"
- uid: "com.azure.security.keyvault.keys.models.JsonWebKey.getX()"
  fullName: "com.azure.security.keyvault.keys.models.JsonWebKey.getX()"
  name: "getX()"
  nameWithType: "JsonWebKey.getX()"
  summary: "Get the x value."
  syntax: "public byte[] getX()"
  desc: "Get the x value."
  returns:
    description: "the x value"
    type: "<xref href=\"byte?alt=byte&text=byte\" data-throw-if-not-resolved=\"False\" />[]"
- uid: "com.azure.security.keyvault.keys.models.JsonWebKey.getY()"
  fullName: "com.azure.security.keyvault.keys.models.JsonWebKey.getY()"
  name: "getY()"
  nameWithType: "JsonWebKey.getY()"
  summary: "Get the y value."
  syntax: "public byte[] getY()"
  desc: "Get the y value."
  returns:
    description: "the y value"
    type: "<xref href=\"byte?alt=byte&text=byte\" data-throw-if-not-resolved=\"False\" />[]"
- uid: "com.azure.security.keyvault.keys.models.JsonWebKey.hasPrivateKey()"
  fullName: "com.azure.security.keyvault.keys.models.JsonWebKey.hasPrivateKey()"
  name: "hasPrivateKey()"
  nameWithType: "JsonWebKey.hasPrivateKey()"
  summary: "Verifies whether the <xref uid=\"com.azure.security.keyvault.keys.models.JsonWebKey\" data-throw-if-not-resolved=\"false\" data-raw-source=\"JsonWebKey\"></xref> has private key."
  syntax: "public boolean hasPrivateKey()"
  desc: "Verifies whether the <xref uid=\"com.azure.security.keyvault.keys.models.JsonWebKey\" data-throw-if-not-resolved=\"false\" data-raw-source=\"JsonWebKey\"></xref> has private key."
  returns:
    description: "true if the <xref uid=\"com.azure.security.keyvault.keys.models.JsonWebKey\" data-throw-if-not-resolved=\"false\" data-raw-source=\"JsonWebKey\"></xref> has private key; false otherwise."
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.security.keyvault.keys.models.JsonWebKey.hashCode()"
  fullName: "com.azure.security.keyvault.keys.models.JsonWebKey.hashCode()"
  name: "hashCode()"
  nameWithType: "JsonWebKey.hashCode()"
  overridden: "java.lang.Object.hashCode()"
  syntax: "public int hashCode()"
  returns:
    type: "<xref href=\"int?alt=int&text=int\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.security.keyvault.keys.models.JsonWebKey.isValid()"
  fullName: "com.azure.security.keyvault.keys.models.JsonWebKey.isValid()"
  name: "isValid()"
  nameWithType: "JsonWebKey.isValid()"
  summary: "Verifies whether the <xref uid=\"com.azure.security.keyvault.keys.models.JsonWebKey\" data-throw-if-not-resolved=\"false\" data-raw-source=\"JsonWebKey\"></xref> is valid."
  syntax: "public boolean isValid()"
  desc: "Verifies whether the <xref uid=\"com.azure.security.keyvault.keys.models.JsonWebKey\" data-throw-if-not-resolved=\"false\" data-raw-source=\"JsonWebKey\"></xref> is valid."
  returns:
    description: "true if the <xref uid=\"com.azure.security.keyvault.keys.models.JsonWebKey\" data-throw-if-not-resolved=\"false\" data-raw-source=\"JsonWebKey\"></xref> is valid; false otherwise."
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.security.keyvault.keys.models.JsonWebKey.setCurveName(com.azure.security.keyvault.keys.models.KeyCurveName)"
  fullName: "com.azure.security.keyvault.keys.models.JsonWebKey.setCurveName(KeyCurveName crv)"
  name: "setCurveName(KeyCurveName crv)"
  nameWithType: "JsonWebKey.setCurveName(KeyCurveName crv)"
  summary: "Set the crv value."
  parameters:
  - description: "The crv value to set"
    name: "crv"
    type: "<xref href=\"com.azure.security.keyvault.keys.models.KeyCurveName?alt=com.azure.security.keyvault.keys.models.KeyCurveName&text=KeyCurveName\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public JsonWebKey setCurveName(KeyCurveName crv)"
  desc: "Set the crv value."
  returns:
    description: "the JsonWebKey object itself."
    type: "<xref href=\"com.azure.security.keyvault.keys.models.JsonWebKey?alt=com.azure.security.keyvault.keys.models.JsonWebKey&text=JsonWebKey\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.security.keyvault.keys.models.JsonWebKey.setD(byte[])"
  fullName: "com.azure.security.keyvault.keys.models.JsonWebKey.setD(byte[] d)"
  name: "setD(byte[] d)"
  nameWithType: "JsonWebKey.setD(byte[] d)"
  summary: "Set the d value."
  parameters:
  - description: "The d value to set"
    name: "d"
    type: "<xref href=\"byte?alt=byte&text=byte\" data-throw-if-not-resolved=\"False\" />[]"
  syntax: "public JsonWebKey setD(byte[] d)"
  desc: "Set the d value."
  returns:
    description: "the JsonWebKey object itself."
    type: "<xref href=\"com.azure.security.keyvault.keys.models.JsonWebKey?alt=com.azure.security.keyvault.keys.models.JsonWebKey&text=JsonWebKey\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.security.keyvault.keys.models.JsonWebKey.setDp(byte[])"
  fullName: "com.azure.security.keyvault.keys.models.JsonWebKey.setDp(byte[] dp)"
  name: "setDp(byte[] dp)"
  nameWithType: "JsonWebKey.setDp(byte[] dp)"
  summary: "Set RSA Private Key Parameter value."
  parameters:
  - description: "The RSA Private Key Parameter value to set."
    name: "dp"
    type: "<xref href=\"byte?alt=byte&text=byte\" data-throw-if-not-resolved=\"False\" />[]"
  syntax: "public JsonWebKey setDp(byte[] dp)"
  desc: "Set RSA Private Key Parameter value."
  returns:
    description: "the JsonWebKey object itself."
    type: "<xref href=\"com.azure.security.keyvault.keys.models.JsonWebKey?alt=com.azure.security.keyvault.keys.models.JsonWebKey&text=JsonWebKey\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.security.keyvault.keys.models.JsonWebKey.setDq(byte[])"
  fullName: "com.azure.security.keyvault.keys.models.JsonWebKey.setDq(byte[] dq)"
  name: "setDq(byte[] dq)"
  nameWithType: "JsonWebKey.setDq(byte[] dq)"
  summary: "Set RSA Private Key Parameter value ."
  parameters:
  - description: "The RSA Private Key Parameter value to set."
    name: "dq"
    type: "<xref href=\"byte?alt=byte&text=byte\" data-throw-if-not-resolved=\"False\" />[]"
  syntax: "public JsonWebKey setDq(byte[] dq)"
  desc: "Set RSA Private Key Parameter value ."
  returns:
    description: "the JsonWebKey object itself."
    type: "<xref href=\"com.azure.security.keyvault.keys.models.JsonWebKey?alt=com.azure.security.keyvault.keys.models.JsonWebKey&text=JsonWebKey\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.security.keyvault.keys.models.JsonWebKey.setE(byte[])"
  fullName: "com.azure.security.keyvault.keys.models.JsonWebKey.setE(byte[] e)"
  name: "setE(byte[] e)"
  nameWithType: "JsonWebKey.setE(byte[] e)"
  summary: "Set the e value."
  parameters:
  - description: "The e value to set"
    name: "e"
    type: "<xref href=\"byte?alt=byte&text=byte\" data-throw-if-not-resolved=\"False\" />[]"
  syntax: "public JsonWebKey setE(byte[] e)"
  desc: "Set the e value."
  returns:
    description: "the JsonWebKey object itself."
    type: "<xref href=\"com.azure.security.keyvault.keys.models.JsonWebKey?alt=com.azure.security.keyvault.keys.models.JsonWebKey&text=JsonWebKey\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.security.keyvault.keys.models.JsonWebKey.setId(java.lang.String)"
  fullName: "com.azure.security.keyvault.keys.models.JsonWebKey.setId(String keyId)"
  name: "setId(String keyId)"
  nameWithType: "JsonWebKey.setId(String keyId)"
  summary: "Set the key identifier value."
  parameters:
  - description: "The keyId value to set"
    name: "keyId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public JsonWebKey setId(String keyId)"
  desc: "Set the key identifier value."
  returns:
    description: "the JsonWebKey object itself."
    type: "<xref href=\"com.azure.security.keyvault.keys.models.JsonWebKey?alt=com.azure.security.keyvault.keys.models.JsonWebKey&text=JsonWebKey\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.security.keyvault.keys.models.JsonWebKey.setK(byte[])"
  fullName: "com.azure.security.keyvault.keys.models.JsonWebKey.setK(byte[] k)"
  name: "setK(byte[] k)"
  nameWithType: "JsonWebKey.setK(byte[] k)"
  summary: "Set the Symmetric key value."
  parameters:
  - description: "The symmetric key value to set."
    name: "k"
    type: "<xref href=\"byte?alt=byte&text=byte\" data-throw-if-not-resolved=\"False\" />[]"
  syntax: "public JsonWebKey setK(byte[] k)"
  desc: "Set the Symmetric key value."
  returns:
    description: "the JsonWebKey object itself."
    type: "<xref href=\"com.azure.security.keyvault.keys.models.JsonWebKey?alt=com.azure.security.keyvault.keys.models.JsonWebKey&text=JsonWebKey\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.security.keyvault.keys.models.JsonWebKey.setKeyOps(java.util.List<com.azure.security.keyvault.keys.models.KeyOperation>)"
  fullName: "com.azure.security.keyvault.keys.models.JsonWebKey.setKeyOps(List<KeyOperation> keyOps)"
  name: "setKeyOps(List<KeyOperation> keyOps)"
  nameWithType: "JsonWebKey.setKeyOps(List<KeyOperation> keyOps)"
  summary: "Set the key<wbr>Ops value."
  parameters:
  - description: "The keyOps value to set"
    name: "keyOps"
    type: "<xref href=\"java.util.List?alt=java.util.List&text=List\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.security.keyvault.keys.models.KeyOperation?alt=com.azure.security.keyvault.keys.models.KeyOperation&text=KeyOperation\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public JsonWebKey setKeyOps(List<KeyOperation> keyOps)"
  desc: "Set the keyOps value."
  returns:
    description: "the JsonWebKey object itself."
    type: "<xref href=\"com.azure.security.keyvault.keys.models.JsonWebKey?alt=com.azure.security.keyvault.keys.models.JsonWebKey&text=JsonWebKey\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.security.keyvault.keys.models.JsonWebKey.setKeyType(com.azure.security.keyvault.keys.models.KeyType)"
  fullName: "com.azure.security.keyvault.keys.models.JsonWebKey.setKeyType(KeyType keyType)"
  name: "setKeyType(KeyType keyType)"
  nameWithType: "JsonWebKey.setKeyType(KeyType keyType)"
  summary: "Set the key type value."
  parameters:
  - description: "The key type"
    name: "keyType"
    type: "<xref href=\"com.azure.security.keyvault.keys.models.KeyType?alt=com.azure.security.keyvault.keys.models.KeyType&text=KeyType\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public JsonWebKey setKeyType(KeyType keyType)"
  desc: "Set the key type value."
  returns:
    description: "the JsonWebKey object itself."
    type: "<xref href=\"com.azure.security.keyvault.keys.models.JsonWebKey?alt=com.azure.security.keyvault.keys.models.JsonWebKey&text=JsonWebKey\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.security.keyvault.keys.models.JsonWebKey.setN(byte[])"
  fullName: "com.azure.security.keyvault.keys.models.JsonWebKey.setN(byte[] n)"
  name: "setN(byte[] n)"
  nameWithType: "JsonWebKey.setN(byte[] n)"
  summary: "Set the n value."
  parameters:
  - description: "The n value to set"
    name: "n"
    type: "<xref href=\"byte?alt=byte&text=byte\" data-throw-if-not-resolved=\"False\" />[]"
  syntax: "public JsonWebKey setN(byte[] n)"
  desc: "Set the n value."
  returns:
    description: "the JsonWebKey object itself."
    type: "<xref href=\"com.azure.security.keyvault.keys.models.JsonWebKey?alt=com.azure.security.keyvault.keys.models.JsonWebKey&text=JsonWebKey\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.security.keyvault.keys.models.JsonWebKey.setP(byte[])"
  fullName: "com.azure.security.keyvault.keys.models.JsonWebKey.setP(byte[] p)"
  name: "setP(byte[] p)"
  nameWithType: "JsonWebKey.setP(byte[] p)"
  summary: "Set the RSA secret prime value."
  parameters:
  - description: "The RSA secret prime value."
    name: "p"
    type: "<xref href=\"byte?alt=byte&text=byte\" data-throw-if-not-resolved=\"False\" />[]"
  syntax: "public JsonWebKey setP(byte[] p)"
  desc: "Set the RSA secret prime value."
  returns:
    description: "the JsonWebKey object itself."
    type: "<xref href=\"com.azure.security.keyvault.keys.models.JsonWebKey?alt=com.azure.security.keyvault.keys.models.JsonWebKey&text=JsonWebKey\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.security.keyvault.keys.models.JsonWebKey.setQ(byte[])"
  fullName: "com.azure.security.keyvault.keys.models.JsonWebKey.setQ(byte[] q)"
  name: "setQ(byte[] q)"
  nameWithType: "JsonWebKey.setQ(byte[] q)"
  summary: "Set the RSA secret prime, with p < q value."
  parameters:
  - description: "The the RSA secret prime, with p &lt; q value to be set."
    name: "q"
    type: "<xref href=\"byte?alt=byte&text=byte\" data-throw-if-not-resolved=\"False\" />[]"
  syntax: "public JsonWebKey setQ(byte[] q)"
  desc: "Set the RSA secret prime, with p < q value."
  returns:
    description: "the JsonWebKey object itself."
    type: "<xref href=\"com.azure.security.keyvault.keys.models.JsonWebKey?alt=com.azure.security.keyvault.keys.models.JsonWebKey&text=JsonWebKey\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.security.keyvault.keys.models.JsonWebKey.setQi(byte[])"
  fullName: "com.azure.security.keyvault.keys.models.JsonWebKey.setQi(byte[] qi)"
  name: "setQi(byte[] qi)"
  nameWithType: "JsonWebKey.setQi(byte[] qi)"
  summary: "Set RSA Private Key Parameter value."
  parameters:
  - description: "The RSA Private Key Parameter value to set."
    name: "qi"
    type: "<xref href=\"byte?alt=byte&text=byte\" data-throw-if-not-resolved=\"False\" />[]"
  syntax: "public JsonWebKey setQi(byte[] qi)"
  desc: "Set RSA Private Key Parameter value."
  returns:
    description: "the JsonWebKey object itself."
    type: "<xref href=\"com.azure.security.keyvault.keys.models.JsonWebKey?alt=com.azure.security.keyvault.keys.models.JsonWebKey&text=JsonWebKey\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.security.keyvault.keys.models.JsonWebKey.setT(byte[])"
  fullName: "com.azure.security.keyvault.keys.models.JsonWebKey.setT(byte[] t)"
  name: "setT(byte[] t)"
  nameWithType: "JsonWebKey.setT(byte[] t)"
  summary: "Set HSM Token value, used with Bring Your Own Key."
  parameters:
  - description: "The HSM Token value to set, used with Bring Your Own Key"
    name: "t"
    type: "<xref href=\"byte?alt=byte&text=byte\" data-throw-if-not-resolved=\"False\" />[]"
  syntax: "public JsonWebKey setT(byte[] t)"
  desc: "Set HSM Token value, used with Bring Your Own Key."
  returns:
    description: "the JsonWebKey object itself."
    type: "<xref href=\"com.azure.security.keyvault.keys.models.JsonWebKey?alt=com.azure.security.keyvault.keys.models.JsonWebKey&text=JsonWebKey\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.security.keyvault.keys.models.JsonWebKey.setX(byte[])"
  fullName: "com.azure.security.keyvault.keys.models.JsonWebKey.setX(byte[] x)"
  name: "setX(byte[] x)"
  nameWithType: "JsonWebKey.setX(byte[] x)"
  summary: "Set the x value."
  parameters:
  - description: "The x value to set"
    name: "x"
    type: "<xref href=\"byte?alt=byte&text=byte\" data-throw-if-not-resolved=\"False\" />[]"
  syntax: "public JsonWebKey setX(byte[] x)"
  desc: "Set the x value."
  returns:
    description: "the JsonWebKey object itself."
    type: "<xref href=\"com.azure.security.keyvault.keys.models.JsonWebKey?alt=com.azure.security.keyvault.keys.models.JsonWebKey&text=JsonWebKey\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.security.keyvault.keys.models.JsonWebKey.setY(byte[])"
  fullName: "com.azure.security.keyvault.keys.models.JsonWebKey.setY(byte[] y)"
  name: "setY(byte[] y)"
  nameWithType: "JsonWebKey.setY(byte[] y)"
  summary: "Set the y value."
  parameters:
  - description: "The y value to set"
    name: "y"
    type: "<xref href=\"byte?alt=byte&text=byte\" data-throw-if-not-resolved=\"False\" />[]"
  syntax: "public JsonWebKey setY(byte[] y)"
  desc: "Set the y value."
  returns:
    description: "the JsonWebKey object itself."
    type: "<xref href=\"com.azure.security.keyvault.keys.models.JsonWebKey?alt=com.azure.security.keyvault.keys.models.JsonWebKey&text=JsonWebKey\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.security.keyvault.keys.models.JsonWebKey.toAes()"
  fullName: "com.azure.security.keyvault.keys.models.JsonWebKey.toAes()"
  name: "toAes()"
  nameWithType: "JsonWebKey.toAes()"
  summary: "Converts JSON web key to AES key."
  syntax: "public SecretKey toAes()"
  desc: "Converts JSON web key to AES key."
  returns:
    description: "AES key"
    type: "<xref href=\"javax.crypto.SecretKey?alt=javax.crypto.SecretKey&text=SecretKey\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.security.keyvault.keys.models.JsonWebKey.toEc()"
  fullName: "com.azure.security.keyvault.keys.models.JsonWebKey.toEc()"
  name: "toEc()"
  nameWithType: "JsonWebKey.toEc()"
  summary: "Converts JSON web key to EC key pair and include the private key if set to true."
  syntax: "public KeyPair toEc()"
  desc: "Converts JSON web key to EC key pair and include the private key if set to true."
  returns:
    description: "EC key pair"
    type: "<xref href=\"java.security.KeyPair?alt=java.security.KeyPair&text=KeyPair\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.security.keyvault.keys.models.JsonWebKey.toEc(boolean)"
  fullName: "com.azure.security.keyvault.keys.models.JsonWebKey.toEc(boolean includePrivateParameters)"
  name: "toEc(boolean includePrivateParameters)"
  nameWithType: "JsonWebKey.toEc(boolean includePrivateParameters)"
  summary: "Converts JSON web key to EC key pair and include the private key if set to true."
  parameters:
  - description: "true if the EC key pair should include the private key. False otherwise."
    name: "includePrivateParameters"
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public KeyPair toEc(boolean includePrivateParameters)"
  desc: "Converts JSON web key to EC key pair and include the private key if set to true."
  returns:
    description: "EC key pair"
    type: "<xref href=\"java.security.KeyPair?alt=java.security.KeyPair&text=KeyPair\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.security.keyvault.keys.models.JsonWebKey.toEc(boolean,java.security.Provider)"
  fullName: "com.azure.security.keyvault.keys.models.JsonWebKey.toEc(boolean includePrivateParameters, Provider provider)"
  name: "toEc(boolean includePrivateParameters, Provider provider)"
  nameWithType: "JsonWebKey.toEc(boolean includePrivateParameters, Provider provider)"
  summary: "Converts JSON web key to EC key pair and include the private key if set to true."
  parameters:
  - description: "true if the EC key pair should include the private key. False otherwise."
    name: "includePrivateParameters"
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
  - description: "The Java security provider"
    name: "provider"
    type: "<xref href=\"java.security.Provider?alt=java.security.Provider&text=Provider\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public KeyPair toEc(boolean includePrivateParameters, Provider provider)"
  desc: "Converts JSON web key to EC key pair and include the private key if set to true."
  returns:
    description: "EC key pair"
    type: "<xref href=\"java.security.KeyPair?alt=java.security.KeyPair&text=KeyPair\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.security.keyvault.keys.models.JsonWebKey.toRsa()"
  fullName: "com.azure.security.keyvault.keys.models.JsonWebKey.toRsa()"
  name: "toRsa()"
  nameWithType: "JsonWebKey.toRsa()"
  summary: "Converts JSON web key to RSA key pair."
  syntax: "public KeyPair toRsa()"
  desc: "Converts JSON web key to RSA key pair."
  returns:
    description: "RSA key pair"
    type: "<xref href=\"java.security.KeyPair?alt=java.security.KeyPair&text=KeyPair\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.security.keyvault.keys.models.JsonWebKey.toRsa(boolean)"
  fullName: "com.azure.security.keyvault.keys.models.JsonWebKey.toRsa(boolean includePrivateParameters)"
  name: "toRsa(boolean includePrivateParameters)"
  nameWithType: "JsonWebKey.toRsa(boolean includePrivateParameters)"
  summary: "Converts JSON web key to RSA key pair and include the private key if set to true."
  parameters:
  - description: "true if the RSA key pair should include the private key. False otherwise."
    name: "includePrivateParameters"
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public KeyPair toRsa(boolean includePrivateParameters)"
  desc: "Converts JSON web key to RSA key pair and include the private key if set to true."
  returns:
    description: "RSA key pair"
    type: "<xref href=\"java.security.KeyPair?alt=java.security.KeyPair&text=KeyPair\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.security.keyvault.keys.models.JsonWebKey.toRsa(boolean,java.security.Provider)"
  fullName: "com.azure.security.keyvault.keys.models.JsonWebKey.toRsa(boolean includePrivateParameters, Provider provider)"
  name: "toRsa(boolean includePrivateParameters, Provider provider)"
  nameWithType: "JsonWebKey.toRsa(boolean includePrivateParameters, Provider provider)"
  summary: "Converts JSON web key to RSA key pair and include the private key if set to true."
  parameters:
  - description: "true if the RSA key pair should include the private key. False otherwise."
    name: "includePrivateParameters"
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
  - description: "The Java security provider."
    name: "provider"
    type: "<xref href=\"java.security.Provider?alt=java.security.Provider&text=Provider\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public KeyPair toRsa(boolean includePrivateParameters, Provider provider)"
  desc: "Converts JSON web key to RSA key pair and include the private key if set to true."
  returns:
    description: "RSA key pair"
    type: "<xref href=\"java.security.KeyPair?alt=java.security.KeyPair&text=KeyPair\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.security.keyvault.keys.models.JsonWebKey.toString()"
  fullName: "com.azure.security.keyvault.keys.models.JsonWebKey.toString()"
  name: "toString()"
  nameWithType: "JsonWebKey.toString()"
  overridden: "java.lang.Object.toString()"
  syntax: "public String toString()"
  returns:
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
type: "class"
desc: "As of http://tools.ietf.org/html/draft-ietf-jose-json-web-key-18."
metadata: {}
package: "com.azure.security.keyvault.keys.models"
artifact: com.azure:azure-security-keyvault-keys:4.4.0-beta.7
