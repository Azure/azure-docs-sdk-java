### YamlMime:ManagedReference
items:
- uid: com.fasterxml.jackson.core.JsonParser.Feature
  id: Feature
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core
  children:
  - com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_BACKSLASH_ESCAPING_ANY_CHARACTER
  - com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_COMMENTS
  - com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_LEADING_DECIMAL_POINT_FOR_NUMBERS
  - com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_MISSING_VALUES
  - com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS
  - com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_NUMERIC_LEADING_ZEROS
  - com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_SINGLE_QUOTES
  - com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_TRAILING_COMMA
  - com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_UNQUOTED_CONTROL_CHARS
  - com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES
  - com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_YAML_COMMENTS
  - com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE
  - com.fasterxml.jackson.core.JsonParser.Feature.IGNORE_UNDEFINED
  - com.fasterxml.jackson.core.JsonParser.Feature.INCLUDE_SOURCE_IN_LOCATION
  - com.fasterxml.jackson.core.JsonParser.Feature.STRICT_DUPLICATE_DETECTION
  - com.fasterxml.jackson.core.JsonParser.Feature.collectDefaults()
  - com.fasterxml.jackson.core.JsonParser.Feature.enabledByDefault()
  - com.fasterxml.jackson.core.JsonParser.Feature.enabledIn(int)
  - com.fasterxml.jackson.core.JsonParser.Feature.getMask()
  - com.fasterxml.jackson.core.JsonParser.Feature.valueOf(java.lang.String)
  - com.fasterxml.jackson.core.JsonParser.Feature.values()
  langs:
  - java
  name: JsonParser.Feature
  nameWithType: JsonParser.Feature
  fullName: com.fasterxml.jackson.core.JsonParser.Feature
  type: Enum
  package: com.fasterxml.jackson.core
  summary: Enumeration that defines all on/off features for parsers.
  syntax:
    content: public enum JsonParser.Feature extends Enum<JsonParser.Feature>
  inheritance:
  - java.lang.Object
  - java.lang.Enum
  inheritedMembers:
  - java.lang.Enum.<T>valueOf(java.lang.Class<T>,java.lang.String)
  - java.lang.Enum.clone()
  - java.lang.Enum.compareTo(E)
  - java.lang.Enum.equals(java.lang.Object)
  - java.lang.Enum.finalize()
  - java.lang.Enum.getDeclaringClass()
  - java.lang.Enum.hashCode()
  - java.lang.Enum.name()
  - java.lang.Enum.ordinal()
  - java.lang.Enum.toString()
  - java.lang.Object.getClass()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
- uid: com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_BACKSLASH_ESCAPING_ANY_CHARACTER
  id: ALLOW_BACKSLASH_ESCAPING_ANY_CHARACTER
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.JsonParser.Feature
  langs:
  - java
  name: ALLOW_BACKSLASH_ESCAPING_ANY_CHARACTER
  nameWithType: JsonParser.Feature.ALLOW_BACKSLASH_ESCAPING_ANY_CHARACTER
  fullName: com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_BACKSLASH_ESCAPING_ANY_CHARACTER
  type: Field
  package: com.fasterxml.jackson.core
  summary: >-
    Feature that can be enabled to accept quoting of all character using backslash quoting mechanism: if not enabled, only characters that are explicitly listed by JSON specification can be thus escaped (see JSON spec for small list of these characters)


    Since JSON specification requires quoting for all control characters, this is a non-standard feature, and as such disabled by default.
  syntax:
    content: public static final JsonParser.Feature ALLOW_BACKSLASH_ESCAPING_ANY_CHARACTER
    return:
      type: com.fasterxml.jackson.core.JsonParser.Feature
- uid: com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_COMMENTS
  id: ALLOW_COMMENTS
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.JsonParser.Feature
  langs:
  - java
  name: ALLOW_COMMENTS
  nameWithType: JsonParser.Feature.ALLOW_COMMENTS
  fullName: com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_COMMENTS
  type: Field
  package: com.fasterxml.jackson.core
  summary: >-
    Feature that determines whether parser will allow use of Java/C++ style comments (both '/'+'\*' and '//' varieties) within parsed content or not.


    Since JSON specification does not mention comments as legal construct, this is a non-standard feature; however, in the wild this is extensively used. As such, feature is **disabled by default** for parsers and must be explicitly enabled.


    NOTE: while not technically deprecated, since 2.10 recommended to use <xref uid="com.fasterxml.jackson.core.json.JsonReadFeature.ALLOW_JAVA_COMMENTS" data-throw-if-not-resolved="false">com.fasterxml.jackson.core.json.JsonReadFeature#ALLOW_JAVA_COMMENTS</xref> instead.
  syntax:
    content: public static final JsonParser.Feature ALLOW_COMMENTS
    return:
      type: com.fasterxml.jackson.core.JsonParser.Feature
- uid: com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_LEADING_DECIMAL_POINT_FOR_NUMBERS
  id: ALLOW_LEADING_DECIMAL_POINT_FOR_NUMBERS
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.JsonParser.Feature
  langs:
  - java
  name: ALLOW_LEADING_DECIMAL_POINT_FOR_NUMBERS
  nameWithType: JsonParser.Feature.ALLOW_LEADING_DECIMAL_POINT_FOR_NUMBERS
  fullName: com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_LEADING_DECIMAL_POINT_FOR_NUMBERS
  type: Field
  package: com.fasterxml.jackson.core
  syntax:
    content: public static final JsonParser.Feature ALLOW_LEADING_DECIMAL_POINT_FOR_NUMBERS
    return:
      type: com.fasterxml.jackson.core.JsonParser.Feature
- uid: com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_MISSING_VALUES
  id: ALLOW_MISSING_VALUES
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.JsonParser.Feature
  langs:
  - java
  name: ALLOW_MISSING_VALUES
  nameWithType: JsonParser.Feature.ALLOW_MISSING_VALUES
  fullName: com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_MISSING_VALUES
  type: Field
  package: com.fasterxml.jackson.core
  summary: >-
    Feature allows the support for "missing" values in a JSON array: missing value meaning sequence of two commas, without value in-between but only optional white space. Enabling this feature will expose "missing" values as <xref uid="com.fasterxml.jackson.core.JsonToken.VALUE_NULL" data-throw-if-not-resolved="false">JsonToken#VALUE_NULL</xref> tokens, which typically become Java nulls in arrays and <xref uid="java.util.Collection" data-throw-if-not-resolved="false">java.util.Collection</xref> in data-binding.


    For example, enabling this feature will represent a JSON array `["value1",,"value3",]` as `["value1", null, "value3", null]`


    Since the JSON specification does not allow missing values this is a non-compliant JSON feature and is disabled by default.
  syntax:
    content: public static final JsonParser.Feature ALLOW_MISSING_VALUES
    return:
      type: com.fasterxml.jackson.core.JsonParser.Feature
- uid: com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS
  id: ALLOW_NON_NUMERIC_NUMBERS
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.JsonParser.Feature
  langs:
  - java
  name: ALLOW_NON_NUMERIC_NUMBERS
  nameWithType: JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS
  fullName: com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS
  type: Field
  package: com.fasterxml.jackson.core
  summary: >-
    Feature that allows parser to recognize set of "Not-a-Number" (NaN) tokens as legal floating number values (similar to how many other data formats and programming language source code allows it). Specific subset contains values that [XML Schema][] (see section 3.2.4.1, Lexical Representation) allows (tokens are quoted contents, not including quotes):

     *  "INF" (for positive infinity), as well as alias of "Infinity"
     *  "-INF" (for negative infinity), alias "-Infinity"
     *  "NaN" (for other not-a-numbers, like result of division by zero)

    Since JSON specification does not allow use of such values, this is a non-standard feature, and as such disabled by default.



    [XML Schema]: http://www.w3.org/TR/xmlschema-2/
  syntax:
    content: public static final JsonParser.Feature ALLOW_NON_NUMERIC_NUMBERS
    return:
      type: com.fasterxml.jackson.core.JsonParser.Feature
- uid: com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_NUMERIC_LEADING_ZEROS
  id: ALLOW_NUMERIC_LEADING_ZEROS
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.JsonParser.Feature
  langs:
  - java
  name: ALLOW_NUMERIC_LEADING_ZEROS
  nameWithType: JsonParser.Feature.ALLOW_NUMERIC_LEADING_ZEROS
  fullName: com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_NUMERIC_LEADING_ZEROS
  type: Field
  package: com.fasterxml.jackson.core
  summary: >-
    Feature that determines whether parser will allow JSON integral numbers to start with additional (ignorable) zeroes (like: 000001). If enabled, no exception is thrown, and extra nulls are silently ignored (and not included in textual representation exposed via <xref uid="com.fasterxml.jackson.core.JsonParser.getText*" data-throw-if-not-resolved="false">JsonParser#getText</xref>).


    Since JSON specification does not allow leading zeroes, this is a non-standard feature, and as such disabled by default.
  syntax:
    content: public static final JsonParser.Feature ALLOW_NUMERIC_LEADING_ZEROS
    return:
      type: com.fasterxml.jackson.core.JsonParser.Feature
- uid: com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_SINGLE_QUOTES
  id: ALLOW_SINGLE_QUOTES
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.JsonParser.Feature
  langs:
  - java
  name: ALLOW_SINGLE_QUOTES
  nameWithType: JsonParser.Feature.ALLOW_SINGLE_QUOTES
  fullName: com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_SINGLE_QUOTES
  type: Field
  package: com.fasterxml.jackson.core
  summary: >-
    Feature that determines whether parser will allow use of single quotes (apostrophe, character '\\'') for quoting Strings (names and String values). If so, this is in addition to other acceptable markers. but not by JSON specification).


    Since JSON specification requires use of double quotes for field names, this is a non-standard feature, and as such disabled by default.


    NOTE: while not technically deprecated, since 2.10 recommended to use <xref uid="com.fasterxml.jackson.core.json.JsonReadFeature.ALLOW_SINGLE_QUOTES" data-throw-if-not-resolved="false">com.fasterxml.jackson.core.json.JsonReadFeature#ALLOW_SINGLE_QUOTES</xref> instead.
  syntax:
    content: public static final JsonParser.Feature ALLOW_SINGLE_QUOTES
    return:
      type: com.fasterxml.jackson.core.JsonParser.Feature
- uid: com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_TRAILING_COMMA
  id: ALLOW_TRAILING_COMMA
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.JsonParser.Feature
  langs:
  - java
  name: ALLOW_TRAILING_COMMA
  nameWithType: JsonParser.Feature.ALLOW_TRAILING_COMMA
  fullName: com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_TRAILING_COMMA
  type: Field
  package: com.fasterxml.jackson.core
  summary: >-
    Feature that determines whether <xref uid="com.fasterxml.jackson.core.JsonParser" data-throw-if-not-resolved="false">JsonParser</xref> will allow for a single trailing comma following the final value (in an Array) or member (in an Object). These commas will simply be ignored.


    For example, when this feature is enabled, `[true,true,]` is equivalent to `[true, true]` and `{"a": true,}` is equivalent to `{"a": true}`.


    When combined with `ALLOW_MISSING_VALUES`, this feature takes priority, and the final trailing comma in an array declaration does not imply a missing (`null`) value. For example, when both `ALLOW_MISSING_VALUES` and `ALLOW_TRAILING_COMMA` are enabled, `[true,true,]` is equivalent to `[true, true]`, and `[true,true,,]` is equivalent to `[true, true, null]`.


    Since the JSON specification does not permit trailing commas, this is a non-standard feature, and as such disabled by default.
  syntax:
    content: public static final JsonParser.Feature ALLOW_TRAILING_COMMA
    return:
      type: com.fasterxml.jackson.core.JsonParser.Feature
- uid: com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_UNQUOTED_CONTROL_CHARS
  id: ALLOW_UNQUOTED_CONTROL_CHARS
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.JsonParser.Feature
  langs:
  - java
  name: ALLOW_UNQUOTED_CONTROL_CHARS
  nameWithType: JsonParser.Feature.ALLOW_UNQUOTED_CONTROL_CHARS
  fullName: com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_UNQUOTED_CONTROL_CHARS
  type: Field
  package: com.fasterxml.jackson.core
  summary: >-
    Feature that determines whether parser will allow JSON Strings to contain unquoted control characters (ASCII characters with value less than 32, including tab and line feed characters) or not. If feature is set false, an exception is thrown if such a character is encountered.


    Since JSON specification requires quoting for all control characters, this is a non-standard feature, and as such disabled by default.
  syntax:
    content: public static final JsonParser.Feature ALLOW_UNQUOTED_CONTROL_CHARS
    return:
      type: com.fasterxml.jackson.core.JsonParser.Feature
- uid: com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES
  id: ALLOW_UNQUOTED_FIELD_NAMES
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.JsonParser.Feature
  langs:
  - java
  name: ALLOW_UNQUOTED_FIELD_NAMES
  nameWithType: JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES
  fullName: com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES
  type: Field
  package: com.fasterxml.jackson.core
  summary: >-
    Feature that determines whether parser will allow use of unquoted field names (which is allowed by Javascript, but not by JSON specification).


    Since JSON specification requires use of double quotes for field names, this is a non-standard feature, and as such disabled by default.


    NOTE: while not technically deprecated, since 2.10 recommended to use <xref uid="com.fasterxml.jackson.core.json.JsonReadFeature.ALLOW_UNQUOTED_FIELD_NAMES" data-throw-if-not-resolved="false">com.fasterxml.jackson.core.json.JsonReadFeature#ALLOW_UNQUOTED_FIELD_NAMES</xref> instead.
  syntax:
    content: public static final JsonParser.Feature ALLOW_UNQUOTED_FIELD_NAMES
    return:
      type: com.fasterxml.jackson.core.JsonParser.Feature
- uid: com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_YAML_COMMENTS
  id: ALLOW_YAML_COMMENTS
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.JsonParser.Feature
  langs:
  - java
  name: ALLOW_YAML_COMMENTS
  nameWithType: JsonParser.Feature.ALLOW_YAML_COMMENTS
  fullName: com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_YAML_COMMENTS
  type: Field
  package: com.fasterxml.jackson.core
  summary: >-
    Feature that determines whether parser will allow use of YAML comments, ones starting with '\#' and continuing until the end of the line. This commenting style is common with scripting languages as well.


    Since JSON specification does not mention comments as legal construct, this is a non-standard feature. As such, feature is **disabled by default** for parsers and must be explicitly enabled.


    NOTE: while not technically deprecated, since 2.10 recommended to use <xref uid="com.fasterxml.jackson.core.json.JsonReadFeature.ALLOW_YAML_COMMENTS" data-throw-if-not-resolved="false">com.fasterxml.jackson.core.json.JsonReadFeature#ALLOW_YAML_COMMENTS</xref> instead.
  syntax:
    content: public static final JsonParser.Feature ALLOW_YAML_COMMENTS
    return:
      type: com.fasterxml.jackson.core.JsonParser.Feature
- uid: com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE
  id: AUTO_CLOSE_SOURCE
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.JsonParser.Feature
  langs:
  - java
  name: AUTO_CLOSE_SOURCE
  nameWithType: JsonParser.Feature.AUTO_CLOSE_SOURCE
  fullName: com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE
  type: Field
  package: com.fasterxml.jackson.core
  summary: >-
    Feature that determines whether parser will automatically close underlying input source that is NOT owned by the parser. If disabled, calling application has to separately close the underlying <xref uid="java.io.InputStream" data-throw-if-not-resolved="false">InputStream</xref> and <xref uid="java.io.Reader" data-throw-if-not-resolved="false">Reader</xref> instances used to create the parser. If enabled, parser will handle closing, as long as parser itself gets closed: this happens when end-of-input is encountered, or parser is closed by a call to <xref uid="com.fasterxml.jackson.core.JsonParser.close*" data-throw-if-not-resolved="false">JsonParser#close</xref>.


    Feature is enabled by default.
  syntax:
    content: public static final JsonParser.Feature AUTO_CLOSE_SOURCE
    return:
      type: com.fasterxml.jackson.core.JsonParser.Feature
- uid: com.fasterxml.jackson.core.JsonParser.Feature.Feature(boolean)
  id: Feature(boolean)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.JsonParser.Feature
  langs:
  - java
  name: Feature(boolean defaultState)
  nameWithType: JsonParser.Feature.Feature(boolean defaultState)
  fullName: com.fasterxml.jackson.core.JsonParser.Feature.Feature(boolean defaultState)
  overload: com.fasterxml.jackson.core.JsonParser.Feature.Feature*
  type: Constructor
  package: com.fasterxml.jackson.core
  syntax:
    content: private Feature(boolean defaultState)
    parameters:
    - id: defaultState
      type: boolean
- uid: com.fasterxml.jackson.core.JsonParser.Feature.IGNORE_UNDEFINED
  id: IGNORE_UNDEFINED
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.JsonParser.Feature
  langs:
  - java
  name: IGNORE_UNDEFINED
  nameWithType: JsonParser.Feature.IGNORE_UNDEFINED
  fullName: com.fasterxml.jackson.core.JsonParser.Feature.IGNORE_UNDEFINED
  type: Field
  package: com.fasterxml.jackson.core
  summary: >-
    Feature that determines what to do if the underlying data format requires knowledge of all properties to decode (usually via a Schema), and if no definition is found for a property that input content contains. Typically most textual data formats do NOT require schema information (although some do, such as CSV), whereas many binary data formats do require definitions (such as Avro, protobuf), although not all (Smile, CBOR, BSON and MessagePack do not). Further note that some formats that do require schema information will not be able to ignore undefined properties: for example, Avro is fully positional and there is no possibility of undefined data. This leaves formats like Protobuf that have identifiers that may or may not map; and as such Protobuf format does make use of this feature.


    Note that support for this feature is implemented by individual data format module, if (and only if) it makes sense for the format in question. For JSON, for example, this feature has no effect as properties need not be pre-defined.


    Feature is disabled by default, meaning that if the underlying data format requires knowledge of all properties to output, attempts to read an unknown property will result in a <xref uid="com.fasterxml.jackson.core.JsonProcessingException" data-throw-if-not-resolved="false">JsonProcessingException</xref>
  syntax:
    content: public static final JsonParser.Feature IGNORE_UNDEFINED
    return:
      type: com.fasterxml.jackson.core.JsonParser.Feature
- uid: com.fasterxml.jackson.core.JsonParser.Feature.INCLUDE_SOURCE_IN_LOCATION
  id: INCLUDE_SOURCE_IN_LOCATION
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.JsonParser.Feature
  langs:
  - java
  name: INCLUDE_SOURCE_IN_LOCATION
  nameWithType: JsonParser.Feature.INCLUDE_SOURCE_IN_LOCATION
  fullName: com.fasterxml.jackson.core.JsonParser.Feature.INCLUDE_SOURCE_IN_LOCATION
  type: Field
  package: com.fasterxml.jackson.core
  summary: >-
    Feature that determines whether <xref uid="com.fasterxml.jackson.core.JsonLocation" data-throw-if-not-resolved="false">JsonLocation</xref> instances should be constructed with reference to source or not. If source reference is included, its type and contents are included when \`toString()\` method is called (most notably when printing out parse exception with that location information). If feature is disabled, no source reference is passed and source is only indicated as "UNKNOWN".


    Most common reason for disabling this feature is to avoid leaking information about internal information; this may be done for security reasons. Note that even if source reference is included, only parts of contents are usually printed, and not the whole contents. Further, many source reference types can not necessarily access contents (like streams), so only type is indicated, not contents.


    Feature is enabled by default, meaning that "source reference" information is passed and some or all of the source content may be included in <xref uid="com.fasterxml.jackson.core.JsonLocation" data-throw-if-not-resolved="false">JsonLocation</xref> information constructed either when requested explicitly, or when needed for an exception.
  syntax:
    content: public static final JsonParser.Feature INCLUDE_SOURCE_IN_LOCATION
    return:
      type: com.fasterxml.jackson.core.JsonParser.Feature
- uid: com.fasterxml.jackson.core.JsonParser.Feature.STRICT_DUPLICATE_DETECTION
  id: STRICT_DUPLICATE_DETECTION
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.JsonParser.Feature
  langs:
  - java
  name: STRICT_DUPLICATE_DETECTION
  nameWithType: JsonParser.Feature.STRICT_DUPLICATE_DETECTION
  fullName: com.fasterxml.jackson.core.JsonParser.Feature.STRICT_DUPLICATE_DETECTION
  type: Field
  package: com.fasterxml.jackson.core
  summary: >-
    Feature that determines whether <xref uid="com.fasterxml.jackson.core.JsonParser" data-throw-if-not-resolved="false">JsonParser</xref> will explicitly check that no duplicate JSON Object field names are encountered. If enabled, parser will check all names within context and report duplicates by throwing a <xref uid="com.fasterxml.jackson.core.JsonParseException" data-throw-if-not-resolved="false">JsonParseException</xref>; if disabled, parser will not do such checking. Assumption in latter case is that caller takes care of handling duplicates at a higher level: data-binding, for example, has features to specify detection to be done there.


    Note that enabling this feature will incur performance overhead due to having to store and check additional information: this typically adds 20-30% to execution time for basic parsing.
  syntax:
    content: public static final JsonParser.Feature STRICT_DUPLICATE_DETECTION
    return:
      type: com.fasterxml.jackson.core.JsonParser.Feature
- uid: com.fasterxml.jackson.core.JsonParser.Feature.collectDefaults()
  id: collectDefaults()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.JsonParser.Feature
  langs:
  - java
  name: collectDefaults()
  nameWithType: JsonParser.Feature.collectDefaults()
  fullName: com.fasterxml.jackson.core.JsonParser.Feature.collectDefaults()
  overload: com.fasterxml.jackson.core.JsonParser.Feature.collectDefaults*
  type: Method
  package: com.fasterxml.jackson.core
  summary: Method that calculates bit set (flags) of all features that are enabled by default.
  syntax:
    content: public static int collectDefaults()
    return:
      type: int
- uid: com.fasterxml.jackson.core.JsonParser.Feature.enabledByDefault()
  id: enabledByDefault()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.JsonParser.Feature
  langs:
  - java
  name: enabledByDefault()
  nameWithType: JsonParser.Feature.enabledByDefault()
  fullName: com.fasterxml.jackson.core.JsonParser.Feature.enabledByDefault()
  overload: com.fasterxml.jackson.core.JsonParser.Feature.enabledByDefault*
  type: Method
  package: com.fasterxml.jackson.core
  syntax:
    content: public boolean enabledByDefault()
    return:
      type: boolean
- uid: com.fasterxml.jackson.core.JsonParser.Feature.enabledIn(int)
  id: enabledIn(int)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.JsonParser.Feature
  langs:
  - java
  name: enabledIn(int flags)
  nameWithType: JsonParser.Feature.enabledIn(int flags)
  fullName: com.fasterxml.jackson.core.JsonParser.Feature.enabledIn(int flags)
  overload: com.fasterxml.jackson.core.JsonParser.Feature.enabledIn*
  type: Method
  package: com.fasterxml.jackson.core
  syntax:
    content: public boolean enabledIn(int flags)
    parameters:
    - id: flags
      type: int
    return:
      type: boolean
- uid: com.fasterxml.jackson.core.JsonParser.Feature.getMask()
  id: getMask()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.JsonParser.Feature
  langs:
  - java
  name: getMask()
  nameWithType: JsonParser.Feature.getMask()
  fullName: com.fasterxml.jackson.core.JsonParser.Feature.getMask()
  overload: com.fasterxml.jackson.core.JsonParser.Feature.getMask*
  type: Method
  package: com.fasterxml.jackson.core
  syntax:
    content: public int getMask()
    return:
      type: int
- uid: com.fasterxml.jackson.core.JsonParser.Feature.valueOf(java.lang.String)
  id: valueOf(java.lang.String)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.JsonParser.Feature
  langs:
  - java
  name: valueOf(String name)
  nameWithType: JsonParser.Feature.valueOf(String name)
  fullName: com.fasterxml.jackson.core.JsonParser.Feature.valueOf(String name)
  overload: com.fasterxml.jackson.core.JsonParser.Feature.valueOf*
  type: Method
  package: com.fasterxml.jackson.core
  syntax:
    content: public static JsonParser.Feature valueOf(String name)
    parameters:
    - id: name
      type: java.lang.String
    return:
      type: com.fasterxml.jackson.core.JsonParser.Feature
- uid: com.fasterxml.jackson.core.JsonParser.Feature.values()
  id: values()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.JsonParser.Feature
  langs:
  - java
  name: values()
  nameWithType: JsonParser.Feature.values()
  fullName: com.fasterxml.jackson.core.JsonParser.Feature.values()
  overload: com.fasterxml.jackson.core.JsonParser.Feature.values*
  type: Method
  package: com.fasterxml.jackson.core
  syntax:
    content: public static JsonParser.Feature[] values()
    return:
      type: com.fasterxml.jackson.core.JsonParser.Feature[]
references:
- uid: boolean
  spec.java:
  - uid: boolean
    name: boolean
    fullName: boolean
- uid: com.fasterxml.jackson.core.JsonParser.Feature.Feature*
  name: Feature
  nameWithType: JsonParser.Feature.Feature
  fullName: com.fasterxml.jackson.core.JsonParser.Feature.Feature
  package: com.fasterxml.jackson.core
- uid: com.fasterxml.jackson.core.JsonParser.Feature[]
  spec.java:
  - uid: com.fasterxml.jackson.core.JsonParser.Feature
    name: Feature
    fullName: com.fasterxml.jackson.core.JsonParser.Feature
  - name: '[]'
    fullName: '[]'
- uid: com.fasterxml.jackson.core.JsonParser.Feature.values*
  name: values
  nameWithType: JsonParser.Feature.values
  fullName: com.fasterxml.jackson.core.JsonParser.Feature.values
  package: com.fasterxml.jackson.core
- uid: java.lang.String
  spec.java:
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
- uid: com.fasterxml.jackson.core.JsonParser.Feature.valueOf*
  name: valueOf
  nameWithType: JsonParser.Feature.valueOf
  fullName: com.fasterxml.jackson.core.JsonParser.Feature.valueOf
  package: com.fasterxml.jackson.core
- uid: int
  spec.java:
  - uid: int
    name: int
    fullName: int
- uid: com.fasterxml.jackson.core.JsonParser.Feature.collectDefaults*
  name: collectDefaults
  nameWithType: JsonParser.Feature.collectDefaults
  fullName: com.fasterxml.jackson.core.JsonParser.Feature.collectDefaults
  package: com.fasterxml.jackson.core
- uid: com.fasterxml.jackson.core.JsonParser.Feature.enabledByDefault*
  name: enabledByDefault
  nameWithType: JsonParser.Feature.enabledByDefault
  fullName: com.fasterxml.jackson.core.JsonParser.Feature.enabledByDefault
  package: com.fasterxml.jackson.core
- uid: com.fasterxml.jackson.core.JsonParser.Feature.enabledIn*
  name: enabledIn
  nameWithType: JsonParser.Feature.enabledIn
  fullName: com.fasterxml.jackson.core.JsonParser.Feature.enabledIn
  package: com.fasterxml.jackson.core
- uid: com.fasterxml.jackson.core.JsonParser.Feature.getMask*
  name: getMask
  nameWithType: JsonParser.Feature.getMask
  fullName: com.fasterxml.jackson.core.JsonParser.Feature.getMask
  package: com.fasterxml.jackson.core
- uid: java.lang.Enum<com.fasterxml.jackson.core.JsonParser.Feature>
  name: Enum<JsonParser.Feature>
  nameWithType: Enum<JsonParser.Feature>
  fullName: java.lang.Enum<com.fasterxml.jackson.core.JsonParser.Feature>
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: java.lang.Enum.toString()
  name: Enum.toString()
  nameWithType: Enum.toString()
  fullName: java.lang.Enum.toString()
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: java.lang.Enum.clone()
  name: Enum.clone()
  nameWithType: Enum.clone()
  fullName: java.lang.Enum.clone()
- uid: java.lang.Enum.finalize()
  name: Enum.finalize()
  nameWithType: Enum.finalize()
  fullName: java.lang.Enum.finalize()
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: java.lang.Enum.compareTo(E)
  name: Enum.compareTo(E)
  nameWithType: Enum.compareTo(E)
  fullName: java.lang.Enum.compareTo(E)
- uid: java.lang.Enum.name()
  name: Enum.name()
  nameWithType: Enum.name()
  fullName: java.lang.Enum.name()
- uid: java.lang.Enum.<T>valueOf(java.lang.Class<T>,java.lang.String)
  name: Enum.<T>valueOf(Class<T>,String)
  nameWithType: Enum.<T>valueOf(Class<T>,String)
  fullName: java.lang.Enum.<T>valueOf(java.lang.Class<T>,java.lang.String)
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: java.lang.Enum.getDeclaringClass()
  name: Enum.getDeclaringClass()
  nameWithType: Enum.getDeclaringClass()
  fullName: java.lang.Enum.getDeclaringClass()
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.lang.Enum.ordinal()
  name: Enum.ordinal()
  nameWithType: Enum.ordinal()
  fullName: java.lang.Enum.ordinal()
- uid: java.lang.Enum.hashCode()
  name: Enum.hashCode()
  nameWithType: Enum.hashCode()
  fullName: java.lang.Enum.hashCode()
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: java.lang.Enum.equals(java.lang.Object)
  name: Enum.equals(Object)
  nameWithType: Enum.equals(Object)
  fullName: java.lang.Enum.equals(java.lang.Object)
- uid: java.lang.Enum
  name: Enum
  nameWithType: Enum
  fullName: java.lang.Enum
- uid: java.lang.Enum.
  name: Enum.
  nameWithType: Enum.
  fullName: java.lang.Enum.
- uid: T>,java.lang.String)
  name: T>,String)
  nameWithType: T>,String)
  fullName: T>,java.lang.String)
- uid: T>valueOf(java.lang.Class
  name: T>valueOf(Class
  nameWithType: T>valueOf(Class
  fullName: T>valueOf(java.lang.Class
