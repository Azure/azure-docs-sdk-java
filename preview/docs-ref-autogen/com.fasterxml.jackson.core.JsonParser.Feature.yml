### YamlMime:JavaEnum
uid: "com.fasterxml.jackson.core.JsonParser.Feature"
fullName: "com.fasterxml.jackson.core.JsonParser.Feature"
name: "JsonParser.Feature"
nameWithType: "JsonParser.Feature"
summary: "Enumeration that defines all on/off features for parsers."
inheritances:
- "<xref href=\"java.lang.Object\" data-throw-if-not-resolved=\"False\" />"
- "<xref href=\"java.lang.Enum\" data-throw-if-not-resolved=\"False\" />"
inheritedMembers:
- "java.lang.Enum.<T>valueOf(java.lang.Class<T>,java.lang.String)"
- "java.lang.Enum.clone()"
- "java.lang.Enum.compareTo(E)"
- "java.lang.Enum.equals(java.lang.Object)"
- "java.lang.Enum.finalize()"
- "java.lang.Enum.getDeclaringClass()"
- "java.lang.Enum.hashCode()"
- "java.lang.Enum.name()"
- "java.lang.Enum.ordinal()"
- "java.lang.Enum.toString()"
- "java.lang.Object.getClass()"
- "java.lang.Object.notify()"
- "java.lang.Object.notifyAll()"
- "java.lang.Object.wait()"
- "java.lang.Object.wait(long)"
- "java.lang.Object.wait(long,int)"
syntax: "public enum JsonParser.Feature extends Enum<JsonParser.Feature>"
fields:
- uid: "com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_BACKSLASH_ESCAPING_ANY_CHARACTER"
  fullName: "com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_BACKSLASH_ESCAPING_ANY_CHARACTER"
  name: "ALLOW_BACKSLASH_ESCAPING_ANY_CHARACTER"
  nameWithType: "JsonParser.Feature.ALLOW_BACKSLASH_ESCAPING_ANY_CHARACTER"
  summary: "Feature that can be enabled to accept quoting of all character using backslash quoting mechanism: if not enabled, only characters that are explicitly listed by JSON specification can be thus escaped (see JSON spec for small list of these characters)\n\nSince JSON specification requires quoting for all control characters, this is a non-standard feature, and as such disabled by default."
- uid: "com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_COMMENTS"
  fullName: "com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_COMMENTS"
  name: "ALLOW_COMMENTS"
  nameWithType: "JsonParser.Feature.ALLOW_COMMENTS"
  summary: "Feature that determines whether parser will allow use of Java/C++ style comments (both '/'+'\\*' and '//' varieties) within parsed content or not.\n\nSince JSON specification does not mention comments as legal construct, this is a non-standard feature; however, in the wild this is extensively used. As such, feature is **disabled by default** for parsers and must be explicitly enabled.\n\nNOTE: while not technically deprecated, since 2.10 recommended to use <xref uid=\"com.fasterxml.jackson.core.json.JsonReadFeature.ALLOW_JAVA_COMMENTS\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.fasterxml.jackson.core.json.JsonReadFeature#ALLOW_JAVA_COMMENTS\"></xref> instead."
- uid: "com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_LEADING_DECIMAL_POINT_FOR_NUMBERS"
  fullName: "com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_LEADING_DECIMAL_POINT_FOR_NUMBERS"
  name: "ALLOW_LEADING_DECIMAL_POINT_FOR_NUMBERS"
  nameWithType: "JsonParser.Feature.ALLOW_LEADING_DECIMAL_POINT_FOR_NUMBERS"
- uid: "com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_MISSING_VALUES"
  fullName: "com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_MISSING_VALUES"
  name: "ALLOW_MISSING_VALUES"
  nameWithType: "JsonParser.Feature.ALLOW_MISSING_VALUES"
  summary: "Feature allows the support for \"missing\" values in a JSON array: missing value meaning sequence of two commas, without value in-between but only optional white space. Enabling this feature will expose \"missing\" values as <xref uid=\"com.fasterxml.jackson.core.JsonToken.VALUE_NULL\" data-throw-if-not-resolved=\"false\" data-raw-source=\"JsonToken#VALUE_NULL\"></xref> tokens, which typically become Java nulls in arrays and <xref uid=\"java.util.Collection\" data-throw-if-not-resolved=\"false\" data-raw-source=\"java.util.Collection\"></xref> in data-binding.\n\nFor example, enabling this feature will represent a JSON array `[\"value1\",,\"value3\",]` as `[\"value1\", null, \"value3\", null]`\n\nSince the JSON specification does not allow missing values this is a non-compliant JSON feature and is disabled by default."
- uid: "com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS"
  fullName: "com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS"
  name: "ALLOW_NON_NUMERIC_NUMBERS"
  nameWithType: "JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS"
  summary: "Feature that allows parser to recognize set of \"Not-a-Number\" (NaN) tokens as legal floating number values (similar to how many other data formats and programming language source code allows it). Specific subset contains values that [XML Schema][] (see section 3.2.4.1, Lexical Representation) allows (tokens are quoted contents, not including quotes):\n\n *  \"INF\" (for positive infinity), as well as alias of \"Infinity\"\n *  \"-INF\" (for negative infinity), alias \"-Infinity\"\n *  \"NaN\" (for other not-a-numbers, like result of division by zero)\n\nSince JSON specification does not allow use of such values, this is a non-standard feature, and as such disabled by default.\n\n\n[XML Schema]: http://www.w3.org/TR/xmlschema-2/"
- uid: "com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_NUMERIC_LEADING_ZEROS"
  fullName: "com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_NUMERIC_LEADING_ZEROS"
  name: "ALLOW_NUMERIC_LEADING_ZEROS"
  nameWithType: "JsonParser.Feature.ALLOW_NUMERIC_LEADING_ZEROS"
  summary: "Feature that determines whether parser will allow JSON integral numbers to start with additional (ignorable) zeroes (like: 000001). If enabled, no exception is thrown, and extra nulls are silently ignored (and not included in textual representation exposed via <xref uid=\"com.fasterxml.jackson.core.JsonParser.getText*\" data-throw-if-not-resolved=\"false\" data-raw-source=\"JsonParser#getText\"></xref>).\n\nSince JSON specification does not allow leading zeroes, this is a non-standard feature, and as such disabled by default."
- uid: "com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_SINGLE_QUOTES"
  fullName: "com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_SINGLE_QUOTES"
  name: "ALLOW_SINGLE_QUOTES"
  nameWithType: "JsonParser.Feature.ALLOW_SINGLE_QUOTES"
  summary: "Feature that determines whether parser will allow use of single quotes (apostrophe, character '\\\\'') for quoting Strings (names and String values). If so, this is in addition to other acceptable markers. but not by JSON specification).\n\nSince JSON specification requires use of double quotes for field names, this is a non-standard feature, and as such disabled by default.\n\nNOTE: while not technically deprecated, since 2.10 recommended to use <xref uid=\"com.fasterxml.jackson.core.json.JsonReadFeature.ALLOW_SINGLE_QUOTES\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.fasterxml.jackson.core.json.JsonReadFeature#ALLOW_SINGLE_QUOTES\"></xref> instead."
- uid: "com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_TRAILING_COMMA"
  fullName: "com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_TRAILING_COMMA"
  name: "ALLOW_TRAILING_COMMA"
  nameWithType: "JsonParser.Feature.ALLOW_TRAILING_COMMA"
  summary: "Feature that determines whether <xref uid=\"com.fasterxml.jackson.core.JsonParser\" data-throw-if-not-resolved=\"false\" data-raw-source=\"JsonParser\"></xref> will allow for a single trailing comma following the final value (in an Array) or member (in an Object). These commas will simply be ignored.\n\nFor example, when this feature is enabled, `[true,true,]` is equivalent to `[true, true]` and `{\"a\": true,}` is equivalent to `{\"a\": true}`.\n\nWhen combined with `ALLOW_MISSING_VALUES`, this feature takes priority, and the final trailing comma in an array declaration does not imply a missing (`null`) value. For example, when both `ALLOW_MISSING_VALUES` and `ALLOW_TRAILING_COMMA` are enabled, `[true,true,]` is equivalent to `[true, true]`, and `[true,true,,]` is equivalent to `[true, true, null]`.\n\nSince the JSON specification does not permit trailing commas, this is a non-standard feature, and as such disabled by default."
- uid: "com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_UNQUOTED_CONTROL_CHARS"
  fullName: "com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_UNQUOTED_CONTROL_CHARS"
  name: "ALLOW_UNQUOTED_CONTROL_CHARS"
  nameWithType: "JsonParser.Feature.ALLOW_UNQUOTED_CONTROL_CHARS"
  summary: "Feature that determines whether parser will allow JSON Strings to contain unquoted control characters (ASCII characters with value less than 32, including tab and line feed characters) or not. If feature is set false, an exception is thrown if such a character is encountered.\n\nSince JSON specification requires quoting for all control characters, this is a non-standard feature, and as such disabled by default."
- uid: "com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES"
  fullName: "com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES"
  name: "ALLOW_UNQUOTED_FIELD_NAMES"
  nameWithType: "JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES"
  summary: "Feature that determines whether parser will allow use of unquoted field names (which is allowed by Javascript, but not by JSON specification).\n\nSince JSON specification requires use of double quotes for field names, this is a non-standard feature, and as such disabled by default.\n\nNOTE: while not technically deprecated, since 2.10 recommended to use <xref uid=\"com.fasterxml.jackson.core.json.JsonReadFeature.ALLOW_UNQUOTED_FIELD_NAMES\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.fasterxml.jackson.core.json.JsonReadFeature#ALLOW_UNQUOTED_FIELD_NAMES\"></xref> instead."
- uid: "com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_YAML_COMMENTS"
  fullName: "com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_YAML_COMMENTS"
  name: "ALLOW_YAML_COMMENTS"
  nameWithType: "JsonParser.Feature.ALLOW_YAML_COMMENTS"
  summary: "Feature that determines whether parser will allow use of YAML comments, ones starting with '\\#' and continuing until the end of the line. This commenting style is common with scripting languages as well.\n\nSince JSON specification does not mention comments as legal construct, this is a non-standard feature. As such, feature is **disabled by default** for parsers and must be explicitly enabled.\n\nNOTE: while not technically deprecated, since 2.10 recommended to use <xref uid=\"com.fasterxml.jackson.core.json.JsonReadFeature.ALLOW_YAML_COMMENTS\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.fasterxml.jackson.core.json.JsonReadFeature#ALLOW_YAML_COMMENTS\"></xref> instead."
- uid: "com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE"
  fullName: "com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE"
  name: "AUTO_CLOSE_SOURCE"
  nameWithType: "JsonParser.Feature.AUTO_CLOSE_SOURCE"
  summary: "Feature that determines whether parser will automatically close underlying input source that is NOT owned by the parser. If disabled, calling application has to separately close the underlying <xref uid=\"java.io.InputStream\" data-throw-if-not-resolved=\"false\" data-raw-source=\"InputStream\"></xref> and <xref uid=\"java.io.Reader\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Reader\"></xref> instances used to create the parser. If enabled, parser will handle closing, as long as parser itself gets closed: this happens when end-of-input is encountered, or parser is closed by a call to <xref uid=\"com.fasterxml.jackson.core.JsonParser.close*\" data-throw-if-not-resolved=\"false\" data-raw-source=\"JsonParser#close\"></xref>.\n\nFeature is enabled by default."
- uid: "com.fasterxml.jackson.core.JsonParser.Feature.IGNORE_UNDEFINED"
  fullName: "com.fasterxml.jackson.core.JsonParser.Feature.IGNORE_UNDEFINED"
  name: "IGNORE_UNDEFINED"
  nameWithType: "JsonParser.Feature.IGNORE_UNDEFINED"
  summary: "Feature that determines what to do if the underlying data format requires knowledge of all properties to decode (usually via a Schema), and if no definition is found for a property that input content contains. Typically most textual data formats do NOT require schema information (although some do, such as CSV), whereas many binary data formats do require definitions (such as Avro, protobuf), although not all (Smile, CBOR, BSON and MessagePack do not). Further note that some formats that do require schema information will not be able to ignore undefined properties: for example, Avro is fully positional and there is no possibility of undefined data. This leaves formats like Protobuf that have identifiers that may or may not map; and as such Protobuf format does make use of this feature.\n\nNote that support for this feature is implemented by individual data format module, if (and only if) it makes sense for the format in question. For JSON, for example, this feature has no effect as properties need not be pre-defined.\n\nFeature is disabled by default, meaning that if the underlying data format requires knowledge of all properties to output, attempts to read an unknown property will result in a <xref uid=\"com.fasterxml.jackson.core.JsonProcessingException\" data-throw-if-not-resolved=\"false\" data-raw-source=\"JsonProcessingException\"></xref>"
- uid: "com.fasterxml.jackson.core.JsonParser.Feature.INCLUDE_SOURCE_IN_LOCATION"
  fullName: "com.fasterxml.jackson.core.JsonParser.Feature.INCLUDE_SOURCE_IN_LOCATION"
  name: "INCLUDE_SOURCE_IN_LOCATION"
  nameWithType: "JsonParser.Feature.INCLUDE_SOURCE_IN_LOCATION"
  summary: "Feature that determines whether <xref uid=\"com.fasterxml.jackson.core.JsonLocation\" data-throw-if-not-resolved=\"false\" data-raw-source=\"JsonLocation\"></xref> instances should be constructed with reference to source or not. If source reference is included, its type and contents are included when \\`toString()\\` method is called (most notably when printing out parse exception with that location information). If feature is disabled, no source reference is passed and source is only indicated as \"UNKNOWN\".\n\nMost common reason for disabling this feature is to avoid leaking information about internal information; this may be done for security reasons. Note that even if source reference is included, only parts of contents are usually printed, and not the whole contents. Further, many source reference types can not necessarily access contents (like streams), so only type is indicated, not contents.\n\nFeature is enabled by default, meaning that \"source reference\" information is passed and some or all of the source content may be included in <xref uid=\"com.fasterxml.jackson.core.JsonLocation\" data-throw-if-not-resolved=\"false\" data-raw-source=\"JsonLocation\"></xref> information constructed either when requested explicitly, or when needed for an exception."
- uid: "com.fasterxml.jackson.core.JsonParser.Feature.STRICT_DUPLICATE_DETECTION"
  fullName: "com.fasterxml.jackson.core.JsonParser.Feature.STRICT_DUPLICATE_DETECTION"
  name: "STRICT_DUPLICATE_DETECTION"
  nameWithType: "JsonParser.Feature.STRICT_DUPLICATE_DETECTION"
  summary: "Feature that determines whether <xref uid=\"com.fasterxml.jackson.core.JsonParser\" data-throw-if-not-resolved=\"false\" data-raw-source=\"JsonParser\"></xref> will explicitly check that no duplicate JSON Object field names are encountered. If enabled, parser will check all names within context and report duplicates by throwing a <xref uid=\"com.fasterxml.jackson.core.JsonParseException\" data-throw-if-not-resolved=\"false\" data-raw-source=\"JsonParseException\"></xref>; if disabled, parser will not do such checking. Assumption in latter case is that caller takes care of handling duplicates at a higher level: data-binding, for example, has features to specify detection to be done there.\n\nNote that enabling this feature will incur performance overhead due to having to store and check additional information: this typically adds 20-30% to execution time for basic parsing."
methods:
- uid: "com.fasterxml.jackson.core.JsonParser.Feature.collectDefaults()"
  fullName: "com.fasterxml.jackson.core.JsonParser.Feature.collectDefaults()"
  name: "collectDefaults()"
  nameWithType: "JsonParser.Feature.collectDefaults()"
  summary: "Method that calculates bit set (flags) of all features that are enabled by default."
  syntax: "public static int collectDefaults()"
  returns:
    type: "<xref href=\"int?alt=int&text=int\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.fasterxml.jackson.core.JsonParser.Feature.enabledByDefault()"
  fullName: "com.fasterxml.jackson.core.JsonParser.Feature.enabledByDefault()"
  name: "enabledByDefault()"
  nameWithType: "JsonParser.Feature.enabledByDefault()"
  syntax: "public boolean enabledByDefault()"
  returns:
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.fasterxml.jackson.core.JsonParser.Feature.enabledIn(int)"
  fullName: "com.fasterxml.jackson.core.JsonParser.Feature.enabledIn(int flags)"
  name: "enabledIn(int flags)"
  nameWithType: "JsonParser.Feature.enabledIn(int flags)"
  parameters:
  - name: "flags"
    type: "<xref href=\"int?alt=int&text=int\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public boolean enabledIn(int flags)"
  returns:
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.fasterxml.jackson.core.JsonParser.Feature.getMask()"
  fullName: "com.fasterxml.jackson.core.JsonParser.Feature.getMask()"
  name: "getMask()"
  nameWithType: "JsonParser.Feature.getMask()"
  syntax: "public int getMask()"
  returns:
    type: "<xref href=\"int?alt=int&text=int\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.fasterxml.jackson.core.JsonParser.Feature.valueOf(java.lang.String)"
  fullName: "com.fasterxml.jackson.core.JsonParser.Feature.valueOf(String name)"
  name: "valueOf(String name)"
  nameWithType: "JsonParser.Feature.valueOf(String name)"
  parameters:
  - name: "name"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public static JsonParser.Feature valueOf(String name)"
  returns:
    type: "<xref href=\"com.fasterxml.jackson.core.JsonParser.Feature?alt=com.fasterxml.jackson.core.JsonParser.Feature&text=Feature\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.fasterxml.jackson.core.JsonParser.Feature.values()"
  fullName: "com.fasterxml.jackson.core.JsonParser.Feature.values()"
  name: "values()"
  nameWithType: "JsonParser.Feature.values()"
  syntax: "public static JsonParser.Feature[] values()"
  returns:
    type: "<xref href=\"com.fasterxml.jackson.core.JsonParser.Feature?alt=com.fasterxml.jackson.core.JsonParser.Feature&text=Feature\" data-throw-if-not-resolved=\"False\" />[]"
metadata: {}
package: "com.fasterxml.jackson.core"
artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
