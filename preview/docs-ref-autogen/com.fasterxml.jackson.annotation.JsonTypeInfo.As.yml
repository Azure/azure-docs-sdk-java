### YamlMime:JavaEnum
uid: "com.fasterxml.jackson.annotation.JsonTypeInfo.As"
fullName: "com.fasterxml.jackson.annotation.JsonTypeInfo.As"
name: "JsonTypeInfo.As"
nameWithType: "JsonTypeInfo.As"
summary: "Definition of standard type inclusion mechanisms for type metadata. Used for standard metadata types, except for <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Id#NONE\"></xref>. May or may not be used for custom types (<xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Id#CUSTOM\"></xref>)."
inheritances:
- "<xref href=\"java.lang.Object\" data-throw-if-not-resolved=\"False\" />"
- "<xref href=\"java.lang.Enum\" data-throw-if-not-resolved=\"False\" />"
inheritedMembers:
- "java.lang.Enum.<T>valueOf(java.lang.Class<T>,java.lang.String)"
- "java.lang.Enum.clone()"
- "java.lang.Enum.compareTo(E)"
- "java.lang.Enum.equals(java.lang.Object)"
- "java.lang.Enum.finalize()"
- "java.lang.Enum.getDeclaringClass()"
- "java.lang.Enum.hashCode()"
- "java.lang.Enum.name()"
- "java.lang.Enum.ordinal()"
- "java.lang.Enum.toString()"
- "java.lang.Object.getClass()"
- "java.lang.Object.notify()"
- "java.lang.Object.notifyAll()"
- "java.lang.Object.wait()"
- "java.lang.Object.wait(long)"
- "java.lang.Object.wait(long,int)"
syntax: "public enum JsonTypeInfo.As extends Enum<JsonTypeInfo.As>"
fields:
- uid: "com.fasterxml.jackson.annotation.JsonTypeInfo.As.EXISTING_PROPERTY"
  fullName: "com.fasterxml.jackson.annotation.JsonTypeInfo.As.EXISTING_PROPERTY"
  name: "EXISTING_PROPERTY"
  nameWithType: "JsonTypeInfo.As.EXISTING_PROPERTY"
  summary: "Inclusion mechanism similar to `PROPERTY` with respect to deserialization; but one that is produced by a \"regular\" accessible property during serialization. This means that `TypeSerializer` will do nothing, and expects a property with defined name to be output using some other mechanism (like default POJO property serialization, or custom serializer).\n\nNote that this behavior is quite similar to that of using <xref uid=\"com.fasterxml.jackson.annotation.JsonTypeId\" data-throw-if-not-resolved=\"false\" data-raw-source=\"JsonTypeId\"></xref> annotation; except that here `TypeSerializer` is basically suppressed; whereas with <xref uid=\"com.fasterxml.jackson.annotation.JsonTypeId\" data-throw-if-not-resolved=\"false\" data-raw-source=\"JsonTypeId\"></xref>, output of regular property is suppressed. This mostly matters with respect to output order; this choice is the only way to ensure specific placement of type id during serialization."
- uid: "com.fasterxml.jackson.annotation.JsonTypeInfo.As.EXTERNAL_PROPERTY"
  fullName: "com.fasterxml.jackson.annotation.JsonTypeInfo.As.EXTERNAL_PROPERTY"
  name: "EXTERNAL_PROPERTY"
  nameWithType: "JsonTypeInfo.As.EXTERNAL_PROPERTY"
  summary: "Inclusion mechanism similar to `PROPERTY`, except that property is included one-level higher in hierarchy, i.e. as sibling property at same level as JSON Object to type. Note that this mechanism **can only be used for properties**, not for types (classes). Trying to use it for classes will result in inclusion strategy of basic `PROPERTY` instead.\n\nNote also that this mechanism **can not be used for container values** (arrays, <xref uid=\"java.util.Collection\" data-throw-if-not-resolved=\"false\" data-raw-source=\"java.util.Collection\"></xref>s, <xref uid=\"java.util.Map\" data-throw-if-not-resolved=\"false\" data-raw-source=\"java.util.Map\"></xref>s); it only works for scalar and POJO values."
- uid: "com.fasterxml.jackson.annotation.JsonTypeInfo.As.PROPERTY"
  fullName: "com.fasterxml.jackson.annotation.JsonTypeInfo.As.PROPERTY"
  name: "PROPERTY"
  nameWithType: "JsonTypeInfo.As.PROPERTY"
  summary: "Inclusion mechanism that uses a single configurable property, included along with actual data (POJO properties) as a separate meta-property.\n\nDefault choice for inclusion."
- uid: "com.fasterxml.jackson.annotation.JsonTypeInfo.As.WRAPPER_ARRAY"
  fullName: "com.fasterxml.jackson.annotation.JsonTypeInfo.As.WRAPPER_ARRAY"
  name: "WRAPPER_ARRAY"
  nameWithType: "JsonTypeInfo.As.WRAPPER_ARRAY"
  summary: "Inclusion mechanism that wraps typed JSON value (POJO serialized as JSON) in a 2-element JSON array: first element is the serialized type identifier, and second element the serialized POJO as JSON Object."
- uid: "com.fasterxml.jackson.annotation.JsonTypeInfo.As.WRAPPER_OBJECT"
  fullName: "com.fasterxml.jackson.annotation.JsonTypeInfo.As.WRAPPER_OBJECT"
  name: "WRAPPER_OBJECT"
  nameWithType: "JsonTypeInfo.As.WRAPPER_OBJECT"
  summary: "Inclusion mechanism that wraps typed JSON value (POJO serialized as JSON) in a JSON Object that has a single entry, where field name is serialized type identifier, and value is the actual JSON value.\n\nNote: can only be used if type information can be serialized as String. This is true for standard type metadata types, but not necessarily for custom types."
methods:
- uid: "com.fasterxml.jackson.annotation.JsonTypeInfo.As.valueOf(java.lang.String)"
  fullName: "com.fasterxml.jackson.annotation.JsonTypeInfo.As.valueOf(String name)"
  name: "valueOf(String name)"
  nameWithType: "JsonTypeInfo.As.valueOf(String name)"
  parameters:
  - name: "name"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public static JsonTypeInfo.As valueOf(String name)"
  returns:
    type: "<xref href=\"com.fasterxml.jackson.annotation.JsonTypeInfo.As?alt=com.fasterxml.jackson.annotation.JsonTypeInfo.As&text=As\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.fasterxml.jackson.annotation.JsonTypeInfo.As.values()"
  fullName: "com.fasterxml.jackson.annotation.JsonTypeInfo.As.values()"
  name: "values()"
  nameWithType: "JsonTypeInfo.As.values()"
  syntax: "public static JsonTypeInfo.As[] values()"
  returns:
    type: "<xref href=\"com.fasterxml.jackson.annotation.JsonTypeInfo.As?alt=com.fasterxml.jackson.annotation.JsonTypeInfo.As&text=As\" data-throw-if-not-resolved=\"False\" />[]"
metadata: {}
package: "com.fasterxml.jackson.annotation"
artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
