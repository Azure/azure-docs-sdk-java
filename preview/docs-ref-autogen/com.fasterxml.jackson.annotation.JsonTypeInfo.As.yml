### YamlMime:ManagedReference
items:
- uid: com.fasterxml.jackson.annotation.JsonTypeInfo.As
  id: As
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.annotation
  children:
  - com.fasterxml.jackson.annotation.JsonTypeInfo.As.EXISTING_PROPERTY
  - com.fasterxml.jackson.annotation.JsonTypeInfo.As.EXTERNAL_PROPERTY
  - com.fasterxml.jackson.annotation.JsonTypeInfo.As.PROPERTY
  - com.fasterxml.jackson.annotation.JsonTypeInfo.As.WRAPPER_ARRAY
  - com.fasterxml.jackson.annotation.JsonTypeInfo.As.WRAPPER_OBJECT
  - com.fasterxml.jackson.annotation.JsonTypeInfo.As.valueOf(java.lang.String)
  - com.fasterxml.jackson.annotation.JsonTypeInfo.As.values()
  langs:
  - java
  name: JsonTypeInfo.As
  nameWithType: JsonTypeInfo.As
  fullName: com.fasterxml.jackson.annotation.JsonTypeInfo.As
  type: Enum
  package: com.fasterxml.jackson.annotation
  summary: Definition of standard type inclusion mechanisms for type metadata. Used for standard metadata types, except for <xref uid="" data-throw-if-not-resolved="false">Id#NONE</xref>. May or may not be used for custom types (<xref uid="" data-throw-if-not-resolved="false">Id#CUSTOM</xref>).
  syntax:
    content: public enum JsonTypeInfo.As extends Enum<JsonTypeInfo.As>
  inheritance:
  - java.lang.Object
  - java.lang.Enum
  inheritedMembers:
  - java.lang.Enum.<T>valueOf(java.lang.Class<T>,java.lang.String)
  - java.lang.Enum.clone()
  - java.lang.Enum.compareTo(E)
  - java.lang.Enum.equals(java.lang.Object)
  - java.lang.Enum.finalize()
  - java.lang.Enum.getDeclaringClass()
  - java.lang.Enum.hashCode()
  - java.lang.Enum.name()
  - java.lang.Enum.ordinal()
  - java.lang.Enum.toString()
  - java.lang.Object.getClass()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
- uid: com.fasterxml.jackson.annotation.JsonTypeInfo.As.As()
  id: As()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.annotation.JsonTypeInfo.As
  langs:
  - java
  name: As()
  nameWithType: JsonTypeInfo.As.As()
  fullName: com.fasterxml.jackson.annotation.JsonTypeInfo.As.As()
  overload: com.fasterxml.jackson.annotation.JsonTypeInfo.As.As*
  type: Constructor
  package: com.fasterxml.jackson.annotation
  syntax:
    content: private As()
- uid: com.fasterxml.jackson.annotation.JsonTypeInfo.As.EXISTING_PROPERTY
  id: EXISTING_PROPERTY
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.annotation.JsonTypeInfo.As
  langs:
  - java
  name: EXISTING_PROPERTY
  nameWithType: JsonTypeInfo.As.EXISTING_PROPERTY
  fullName: com.fasterxml.jackson.annotation.JsonTypeInfo.As.EXISTING_PROPERTY
  type: Field
  package: com.fasterxml.jackson.annotation
  summary: >-
    Inclusion mechanism similar to `PROPERTY` with respect to deserialization; but one that is produced by a "regular" accessible property during serialization. This means that `TypeSerializer` will do nothing, and expects a property with defined name to be output using some other mechanism (like default POJO property serialization, or custom serializer).


    Note that this behavior is quite similar to that of using <xref uid="com.fasterxml.jackson.annotation.JsonTypeId" data-throw-if-not-resolved="false">JsonTypeId</xref> annotation; except that here `TypeSerializer` is basically suppressed; whereas with <xref uid="com.fasterxml.jackson.annotation.JsonTypeId" data-throw-if-not-resolved="false">JsonTypeId</xref>, output of regular property is suppressed. This mostly matters with respect to output order; this choice is the only way to ensure specific placement of type id during serialization.
  syntax:
    content: public static final JsonTypeInfo.As EXISTING_PROPERTY
    return:
      type: com.fasterxml.jackson.annotation.JsonTypeInfo.As
- uid: com.fasterxml.jackson.annotation.JsonTypeInfo.As.EXTERNAL_PROPERTY
  id: EXTERNAL_PROPERTY
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.annotation.JsonTypeInfo.As
  langs:
  - java
  name: EXTERNAL_PROPERTY
  nameWithType: JsonTypeInfo.As.EXTERNAL_PROPERTY
  fullName: com.fasterxml.jackson.annotation.JsonTypeInfo.As.EXTERNAL_PROPERTY
  type: Field
  package: com.fasterxml.jackson.annotation
  summary: >-
    Inclusion mechanism similar to `PROPERTY`, except that property is included one-level higher in hierarchy, i.e. as sibling property at same level as JSON Object to type. Note that this mechanism **can only be used for properties**, not for types (classes). Trying to use it for classes will result in inclusion strategy of basic `PROPERTY` instead.


    Note also that this mechanism **can not be used for container values** (arrays, <xref uid="java.util.Collection" data-throw-if-not-resolved="false">java.util.Collection</xref>s, <xref uid="java.util.Map" data-throw-if-not-resolved="false">java.util.Map</xref>s); it only works for scalar and POJO values.
  syntax:
    content: public static final JsonTypeInfo.As EXTERNAL_PROPERTY
    return:
      type: com.fasterxml.jackson.annotation.JsonTypeInfo.As
- uid: com.fasterxml.jackson.annotation.JsonTypeInfo.As.PROPERTY
  id: PROPERTY
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.annotation.JsonTypeInfo.As
  langs:
  - java
  name: PROPERTY
  nameWithType: JsonTypeInfo.As.PROPERTY
  fullName: com.fasterxml.jackson.annotation.JsonTypeInfo.As.PROPERTY
  type: Field
  package: com.fasterxml.jackson.annotation
  summary: >-
    Inclusion mechanism that uses a single configurable property, included along with actual data (POJO properties) as a separate meta-property.


    Default choice for inclusion.
  syntax:
    content: public static final JsonTypeInfo.As PROPERTY
    return:
      type: com.fasterxml.jackson.annotation.JsonTypeInfo.As
- uid: com.fasterxml.jackson.annotation.JsonTypeInfo.As.WRAPPER_ARRAY
  id: WRAPPER_ARRAY
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.annotation.JsonTypeInfo.As
  langs:
  - java
  name: WRAPPER_ARRAY
  nameWithType: JsonTypeInfo.As.WRAPPER_ARRAY
  fullName: com.fasterxml.jackson.annotation.JsonTypeInfo.As.WRAPPER_ARRAY
  type: Field
  package: com.fasterxml.jackson.annotation
  summary: 'Inclusion mechanism that wraps typed JSON value (POJO serialized as JSON) in a 2-element JSON array: first element is the serialized type identifier, and second element the serialized POJO as JSON Object.'
  syntax:
    content: public static final JsonTypeInfo.As WRAPPER_ARRAY
    return:
      type: com.fasterxml.jackson.annotation.JsonTypeInfo.As
- uid: com.fasterxml.jackson.annotation.JsonTypeInfo.As.WRAPPER_OBJECT
  id: WRAPPER_OBJECT
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.annotation.JsonTypeInfo.As
  langs:
  - java
  name: WRAPPER_OBJECT
  nameWithType: JsonTypeInfo.As.WRAPPER_OBJECT
  fullName: com.fasterxml.jackson.annotation.JsonTypeInfo.As.WRAPPER_OBJECT
  type: Field
  package: com.fasterxml.jackson.annotation
  summary: >-
    Inclusion mechanism that wraps typed JSON value (POJO serialized as JSON) in a JSON Object that has a single entry, where field name is serialized type identifier, and value is the actual JSON value.


    Note: can only be used if type information can be serialized as String. This is true for standard type metadata types, but not necessarily for custom types.
  syntax:
    content: public static final JsonTypeInfo.As WRAPPER_OBJECT
    return:
      type: com.fasterxml.jackson.annotation.JsonTypeInfo.As
- uid: com.fasterxml.jackson.annotation.JsonTypeInfo.As.valueOf(java.lang.String)
  id: valueOf(java.lang.String)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.annotation.JsonTypeInfo.As
  langs:
  - java
  name: valueOf(String name)
  nameWithType: JsonTypeInfo.As.valueOf(String name)
  fullName: com.fasterxml.jackson.annotation.JsonTypeInfo.As.valueOf(String name)
  overload: com.fasterxml.jackson.annotation.JsonTypeInfo.As.valueOf*
  type: Method
  package: com.fasterxml.jackson.annotation
  syntax:
    content: public static JsonTypeInfo.As valueOf(String name)
    parameters:
    - id: name
      type: java.lang.String
    return:
      type: com.fasterxml.jackson.annotation.JsonTypeInfo.As
- uid: com.fasterxml.jackson.annotation.JsonTypeInfo.As.values()
  id: values()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.annotation.JsonTypeInfo.As
  langs:
  - java
  name: values()
  nameWithType: JsonTypeInfo.As.values()
  fullName: com.fasterxml.jackson.annotation.JsonTypeInfo.As.values()
  overload: com.fasterxml.jackson.annotation.JsonTypeInfo.As.values*
  type: Method
  package: com.fasterxml.jackson.annotation
  syntax:
    content: public static JsonTypeInfo.As[] values()
    return:
      type: com.fasterxml.jackson.annotation.JsonTypeInfo.As[]
references:
- uid: com.fasterxml.jackson.annotation.JsonTypeInfo.As.As*
  name: As
  nameWithType: JsonTypeInfo.As.As
  fullName: com.fasterxml.jackson.annotation.JsonTypeInfo.As.As
  package: com.fasterxml.jackson.annotation
- uid: com.fasterxml.jackson.annotation.JsonTypeInfo.As[]
  spec.java:
  - uid: com.fasterxml.jackson.annotation.JsonTypeInfo.As
    name: As
    fullName: com.fasterxml.jackson.annotation.JsonTypeInfo.As
  - name: '[]'
    fullName: '[]'
- uid: com.fasterxml.jackson.annotation.JsonTypeInfo.As.values*
  name: values
  nameWithType: JsonTypeInfo.As.values
  fullName: com.fasterxml.jackson.annotation.JsonTypeInfo.As.values
  package: com.fasterxml.jackson.annotation
- uid: java.lang.String
  spec.java:
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
- uid: com.fasterxml.jackson.annotation.JsonTypeInfo.As.valueOf*
  name: valueOf
  nameWithType: JsonTypeInfo.As.valueOf
  fullName: com.fasterxml.jackson.annotation.JsonTypeInfo.As.valueOf
  package: com.fasterxml.jackson.annotation
- uid: java.lang.Enum<com.fasterxml.jackson.annotation.JsonTypeInfo.As>
  name: Enum<JsonTypeInfo.As>
  nameWithType: Enum<JsonTypeInfo.As>
  fullName: java.lang.Enum<com.fasterxml.jackson.annotation.JsonTypeInfo.As>
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: java.lang.Enum.toString()
  name: Enum.toString()
  nameWithType: Enum.toString()
  fullName: java.lang.Enum.toString()
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: java.lang.Enum.clone()
  name: Enum.clone()
  nameWithType: Enum.clone()
  fullName: java.lang.Enum.clone()
- uid: java.lang.Enum.finalize()
  name: Enum.finalize()
  nameWithType: Enum.finalize()
  fullName: java.lang.Enum.finalize()
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: java.lang.Enum.compareTo(E)
  name: Enum.compareTo(E)
  nameWithType: Enum.compareTo(E)
  fullName: java.lang.Enum.compareTo(E)
- uid: java.lang.Enum.name()
  name: Enum.name()
  nameWithType: Enum.name()
  fullName: java.lang.Enum.name()
- uid: java.lang.Enum.<T>valueOf(java.lang.Class<T>,java.lang.String)
  name: Enum.<T>valueOf(Class<T>,String)
  nameWithType: Enum.<T>valueOf(Class<T>,String)
  fullName: java.lang.Enum.<T>valueOf(java.lang.Class<T>,java.lang.String)
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: java.lang.Enum.getDeclaringClass()
  name: Enum.getDeclaringClass()
  nameWithType: Enum.getDeclaringClass()
  fullName: java.lang.Enum.getDeclaringClass()
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.lang.Enum.ordinal()
  name: Enum.ordinal()
  nameWithType: Enum.ordinal()
  fullName: java.lang.Enum.ordinal()
- uid: java.lang.Enum.hashCode()
  name: Enum.hashCode()
  nameWithType: Enum.hashCode()
  fullName: java.lang.Enum.hashCode()
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: java.lang.Enum.equals(java.lang.Object)
  name: Enum.equals(Object)
  nameWithType: Enum.equals(Object)
  fullName: java.lang.Enum.equals(java.lang.Object)
- uid: java.lang.Enum
  name: Enum
  nameWithType: Enum
  fullName: java.lang.Enum
- uid: java.lang.Enum.
  name: Enum.
  nameWithType: Enum.
  fullName: java.lang.Enum.
- uid: T>,java.lang.String)
  name: T>,String)
  nameWithType: T>,String)
  fullName: T>,java.lang.String)
- uid: T>valueOf(java.lang.Class
  name: T>valueOf(Class
  nameWithType: T>valueOf(Class
  fullName: T>valueOf(java.lang.Class
