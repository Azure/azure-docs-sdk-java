### YamlMime:JavaMember
uid: "com.azure.ai.metricsadvisor.MetricsAdvisorAsyncClient.listMetricSeriesData*"
fullName: "com.azure.ai.metricsadvisor.MetricsAdvisorAsyncClient.listMetricSeriesData"
name: "listMetricSeriesData"
nameWithType: "MetricsAdvisorAsyncClient.listMetricSeriesData"
members:
- uid: "com.azure.ai.metricsadvisor.MetricsAdvisorAsyncClient.listMetricSeriesData(java.lang.String,java.util.List<com.azure.ai.metricsadvisor.models.DimensionKey>,com.azure.ai.metricsadvisor.models.ListMetricSeriesDataOptions)"
  fullName: "com.azure.ai.metricsadvisor.MetricsAdvisorAsyncClient.listMetricSeriesData(String metricId, List<DimensionKey> seriesKeys, ListMetricSeriesDataOptions options)"
  name: "listMetricSeriesData(String metricId, List<DimensionKey> seriesKeys, ListMetricSeriesDataOptions options)"
  nameWithType: "MetricsAdvisorAsyncClient.listMetricSeriesData(String metricId, List<DimensionKey> seriesKeys, ListMetricSeriesDataOptions options)"
  summary: "Get time series data from metric.\n\n**Code sample**\n\n```java\nfinal String metricId = \"2dgfbbbb-41ec-a637-677e77b81455\";\n final OffsetDateTime startTime = OffsetDateTime.parse(\"2020-09-09T00:00:00Z\");\n final OffsetDateTime endTime = OffsetDateTime.parse(\"2020-09-09T12:00:00Z\");\n \n final ListMetricSeriesDataOptions options = new ListMetricSeriesDataOptions(startTime, endTime)\n     .setTop(10);\n final List<DimensionKey> seriesKeyFilter\n     = Arrays.asList(new DimensionKey().put(\"cost\", \"redmond\"));\n \n metricAdvisorAsyncClient.listMetricSeriesData(metricId, seriesKeyFilter, options)\n     .subscribe(metricSeriesData -> {\n         System.out.println(\"List of data points for this series:\");\n         System.out.println(metricSeriesData.getValueList());\n         System.out.println(\"Timestamps of the data related to this time series:\");\n         System.out.println(metricSeriesData.getTimestampList());\n         System.out.printf(\"Series Key:\");\n         System.out.println(metricSeriesData.getSeriesKey().asMap());\n     });\n```"
  parameters:
  - description: "metric unique id."
    name: "metricId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "the series key to filter.\n <p>This enables additional filtering of dimension values being queried.\n For example, let's say we've the dimensions 'category' and 'city',\n so the api can query value of the dimension 'category', with series key as 'city=redmond'.\n </p>"
    name: "seriesKeys"
    type: "<xref href=\"java.util.List?alt=java.util.List&text=List\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.ai.metricsadvisor.models.DimensionKey?alt=com.azure.ai.metricsadvisor.models.DimensionKey&text=DimensionKey\" data-throw-if-not-resolved=\"False\" />&gt;"
  - description: "query time series data condition."
    name: "options"
    type: "<xref href=\"com.azure.ai.metricsadvisor.models.ListMetricSeriesDataOptions?alt=com.azure.ai.metricsadvisor.models.ListMetricSeriesDataOptions&text=ListMetricSeriesDataOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PagedFlux<MetricSeriesData> listMetricSeriesData(String metricId, List<DimensionKey> seriesKeys, ListMetricSeriesDataOptions options)"
  returns:
    description: "A <xref uid=\"com.azure.core.http.rest.PagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedFlux\"></xref> of the <xref uid=\"com.azure.ai.metricsadvisor.models.MetricSeriesData\" data-throw-if-not-resolved=\"false\" data-raw-source=\"metric series data points\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.PagedFlux?alt=com.azure.core.http.rest.PagedFlux&text=PagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.ai.metricsadvisor.models.MetricSeriesData?alt=com.azure.ai.metricsadvisor.models.MetricSeriesData&text=MetricSeriesData\" data-throw-if-not-resolved=\"False\" />&gt;"
type: "method"
metadata: {}
package: "com.azure.ai.metricsadvisor"
artifact: com.azure:azure-ai-metricsadvisor:1.0.0-beta.1
