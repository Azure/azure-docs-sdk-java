### YamlMime:JavaType
uid: "com.azure.communication.callautomation.CallMediaAsync"
fullName: "com.azure.communication.callautomation.CallMediaAsync"
name: "CallMediaAsync"
nameWithType: "CallMediaAsync"
summary: "Call<wbr>Content."
inheritances:
- "<xref href=\"java.lang.Object?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
inheritedClassMethods:
- classRef: "java.lang.<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html\">Object</a>"
  methodsRef:
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#clone--\">clone</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#equals-java.lang.Object-\">equals</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#finalize--\">finalize</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#getClass--\">getClass</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#hashCode--\">hashCode</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#notify--\">notify</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#notifyAll--\">notifyAll</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#toString--\">toString</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#wait--\">wait</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#wait-long-\">wait</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#wait-long-int-\">wait</a>"
syntax: "public final class **CallMediaAsync**"
methods:
- uid: "com.azure.communication.callautomation.CallMediaAsync.cancelAllMediaOperations()"
  fullName: "com.azure.communication.callautomation.CallMediaAsync.cancelAllMediaOperations()"
  name: "cancelAllMediaOperations()"
  nameWithType: "CallMediaAsync.cancelAllMediaOperations()"
  summary: "Cancels all the queued media operations."
  syntax: "public Mono<Void> cancelAllMediaOperations()"
  desc: "Cancels all the queued media operations."
  returns:
    description: "Void"
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Void.html\">Void</a>&gt;"
- uid: "com.azure.communication.callautomation.CallMediaAsync.cancelAllMediaOperationsWithResponse()"
  fullName: "com.azure.communication.callautomation.CallMediaAsync.cancelAllMediaOperationsWithResponse()"
  name: "cancelAllMediaOperationsWithResponse()"
  nameWithType: "CallMediaAsync.cancelAllMediaOperationsWithResponse()"
  summary: "Cancels all the queued media operations"
  syntax: "public Mono<Response<Void>> cancelAllMediaOperationsWithResponse()"
  desc: "Cancels all the queued media operations"
  returns:
    description: "Response for successful playAll request."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Void.html\">Void</a>&gt;&gt;"
- uid: "com.azure.communication.callautomation.CallMediaAsync.hold(com.azure.communication.common.CommunicationIdentifier)"
  fullName: "com.azure.communication.callautomation.CallMediaAsync.hold(CommunicationIdentifier targetParticipant)"
  name: "hold(CommunicationIdentifier targetParticipant)"
  nameWithType: "CallMediaAsync.hold(CommunicationIdentifier targetParticipant)"
  summary: "Holds participant in call."
  parameters:
  - description: "the target."
    name: "targetParticipant"
    type: "<xref href=\"com.azure.communication.common.CommunicationIdentifier?alt=com.azure.communication.common.CommunicationIdentifier&text=CommunicationIdentifier\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Void> hold(CommunicationIdentifier targetParticipant)"
  desc: "Holds participant in call."
  returns:
    description: "Response for successful operation."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Void.html\">Void</a>&gt;"
- uid: "com.azure.communication.callautomation.CallMediaAsync.hold(com.azure.communication.common.CommunicationIdentifier,com.azure.communication.callautomation.models.PlaySource)"
  fullName: "com.azure.communication.callautomation.CallMediaAsync.hold(CommunicationIdentifier targetParticipant, PlaySource playSource)"
  name: "hold(CommunicationIdentifier targetParticipant, PlaySource playSource)"
  nameWithType: "CallMediaAsync.hold(CommunicationIdentifier targetParticipant, PlaySource playSource)"
  summary: "Holds participant in call."
  parameters:
  - description: "the target."
    name: "targetParticipant"
    type: "<xref href=\"com.azure.communication.common.CommunicationIdentifier?alt=com.azure.communication.common.CommunicationIdentifier&text=CommunicationIdentifier\" data-throw-if-not-resolved=\"False\" />"
  - description: "the play source."
    name: "playSource"
    type: "<xref href=\"com.azure.communication.callautomation.models.PlaySource?alt=com.azure.communication.callautomation.models.PlaySource&text=PlaySource\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Void> hold(CommunicationIdentifier targetParticipant, PlaySource playSource)"
  desc: "Holds participant in call."
  returns:
    description: "Response for successful operation."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Void.html\">Void</a>&gt;"
- uid: "com.azure.communication.callautomation.CallMediaAsync.holdWithResponse(com.azure.communication.callautomation.models.HoldOptions)"
  fullName: "com.azure.communication.callautomation.CallMediaAsync.holdWithResponse(HoldOptions options)"
  name: "holdWithResponse(HoldOptions options)"
  nameWithType: "CallMediaAsync.holdWithResponse(HoldOptions options)"
  summary: "Holds participant in call."
  parameters:
  - description: "- Different options to pass to the request."
    name: "options"
    type: "<xref href=\"com.azure.communication.callautomation.models.HoldOptions?alt=com.azure.communication.callautomation.models.HoldOptions&text=HoldOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<Void>> holdWithResponse(HoldOptions options)"
  desc: "Holds participant in call."
  returns:
    description: "Response for successful operation."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Void.html\">Void</a>&gt;&gt;"
- uid: "com.azure.communication.callautomation.CallMediaAsync.play(com.azure.communication.callautomation.models.PlaySource,java.util.List<com.azure.communication.common.CommunicationIdentifier>)"
  fullName: "com.azure.communication.callautomation.CallMediaAsync.play(PlaySource playSource, List<CommunicationIdentifier> playTo)"
  name: "play(PlaySource playSource, List<CommunicationIdentifier> playTo)"
  nameWithType: "CallMediaAsync.play(PlaySource playSource, List<CommunicationIdentifier> playTo)"
  summary: "Play"
  parameters:
  - description: "A <xref uid=\"com.azure.communication.callautomation.models.PlaySource\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PlaySource\"></xref> representing the source to play."
    name: "playSource"
    type: "<xref href=\"com.azure.communication.callautomation.models.PlaySource?alt=com.azure.communication.callautomation.models.PlaySource&text=PlaySource\" data-throw-if-not-resolved=\"False\" />"
  - description: "the targets to play to"
    name: "playTo"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/List.html\">List</a>&lt;<xref href=\"com.azure.communication.common.CommunicationIdentifier?alt=com.azure.communication.common.CommunicationIdentifier&text=CommunicationIdentifier\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public Mono<Void> play(PlaySource playSource, List<CommunicationIdentifier> playTo)"
  desc: "Play"
  returns:
    description: "Void for successful play request."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Void.html\">Void</a>&gt;"
- uid: "com.azure.communication.callautomation.CallMediaAsync.play(java.util.List<com.azure.communication.callautomation.models.PlaySource>,java.util.List<com.azure.communication.common.CommunicationIdentifier>)"
  fullName: "com.azure.communication.callautomation.CallMediaAsync.play(List<PlaySource> playSources, List<CommunicationIdentifier> playTo)"
  name: "play(List<PlaySource> playSources, List<CommunicationIdentifier> playTo)"
  nameWithType: "CallMediaAsync.play(List<PlaySource> playSources, List<CommunicationIdentifier> playTo)"
  summary: "Play"
  parameters:
  - description: "A List of <xref uid=\"com.azure.communication.callautomation.models.PlaySource\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PlaySource\"></xref> representing the sources to play."
    name: "playSources"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/List.html\">List</a>&lt;<xref href=\"com.azure.communication.callautomation.models.PlaySource?alt=com.azure.communication.callautomation.models.PlaySource&text=PlaySource\" data-throw-if-not-resolved=\"False\" />&gt;"
  - description: "the targets to play to"
    name: "playTo"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/List.html\">List</a>&lt;<xref href=\"com.azure.communication.common.CommunicationIdentifier?alt=com.azure.communication.common.CommunicationIdentifier&text=CommunicationIdentifier\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public Mono<Void> play(List<PlaySource> playSources, List<CommunicationIdentifier> playTo)"
  desc: "Play"
  returns:
    description: "Void for successful play request."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Void.html\">Void</a>&gt;"
- uid: "com.azure.communication.callautomation.CallMediaAsync.playToAll(com.azure.communication.callautomation.models.PlaySource)"
  fullName: "com.azure.communication.callautomation.CallMediaAsync.playToAll(PlaySource playSource)"
  name: "playToAll(PlaySource playSource)"
  nameWithType: "CallMediaAsync.playToAll(PlaySource playSource)"
  summary: "Play to all participants"
  parameters:
  - description: "A <xref uid=\"com.azure.communication.callautomation.models.PlaySource\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PlaySource\"></xref> representing the source to play."
    name: "playSource"
    type: "<xref href=\"com.azure.communication.callautomation.models.PlaySource?alt=com.azure.communication.callautomation.models.PlaySource&text=PlaySource\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Void> playToAll(PlaySource playSource)"
  desc: "Play to all participants"
  returns:
    description: "Void for successful playAll request."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Void.html\">Void</a>&gt;"
- uid: "com.azure.communication.callautomation.CallMediaAsync.playToAll(java.util.List<com.azure.communication.callautomation.models.PlaySource>)"
  fullName: "com.azure.communication.callautomation.CallMediaAsync.playToAll(List<PlaySource> playSources)"
  name: "playToAll(List<PlaySource> playSources)"
  nameWithType: "CallMediaAsync.playToAll(List<PlaySource> playSources)"
  summary: "Play to all participants"
  parameters:
  - description: "A List of <xref uid=\"com.azure.communication.callautomation.models.PlaySource\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PlaySource\"></xref> representing the sources to play."
    name: "playSources"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/List.html\">List</a>&lt;<xref href=\"com.azure.communication.callautomation.models.PlaySource?alt=com.azure.communication.callautomation.models.PlaySource&text=PlaySource\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public Mono<Void> playToAll(List<PlaySource> playSources)"
  desc: "Play to all participants"
  returns:
    description: "Void for successful playAll request."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Void.html\">Void</a>&gt;"
- uid: "com.azure.communication.callautomation.CallMediaAsync.playToAllWithResponse(com.azure.communication.callautomation.models.PlayToAllOptions)"
  fullName: "com.azure.communication.callautomation.CallMediaAsync.playToAllWithResponse(PlayToAllOptions options)"
  name: "playToAllWithResponse(PlayToAllOptions options)"
  nameWithType: "CallMediaAsync.playToAllWithResponse(PlayToAllOptions options)"
  summary: "Play to all participants"
  parameters:
  - description: "play to all options."
    name: "options"
    type: "<xref href=\"com.azure.communication.callautomation.models.PlayToAllOptions?alt=com.azure.communication.callautomation.models.PlayToAllOptions&text=PlayToAllOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<Void>> playToAllWithResponse(PlayToAllOptions options)"
  desc: "Play to all participants"
  returns:
    description: "Response for successful playAll request."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Void.html\">Void</a>&gt;&gt;"
- uid: "com.azure.communication.callautomation.CallMediaAsync.playWithResponse(com.azure.communication.callautomation.models.PlayOptions)"
  fullName: "com.azure.communication.callautomation.CallMediaAsync.playWithResponse(PlayOptions options)"
  name: "playWithResponse(PlayOptions options)"
  nameWithType: "CallMediaAsync.playWithResponse(PlayOptions options)"
  summary: "Play"
  parameters:
  - description: "play options."
    name: "options"
    type: "<xref href=\"com.azure.communication.callautomation.models.PlayOptions?alt=com.azure.communication.callautomation.models.PlayOptions&text=PlayOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<Void>> playWithResponse(PlayOptions options)"
  desc: "Play"
  returns:
    description: "Response for successful play request."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Void.html\">Void</a>&gt;&gt;"
- uid: "com.azure.communication.callautomation.CallMediaAsync.sendDtmfTones(java.util.List<com.azure.communication.callautomation.models.DtmfTone>,com.azure.communication.common.CommunicationIdentifier)"
  fullName: "com.azure.communication.callautomation.CallMediaAsync.sendDtmfTones(List<DtmfTone> tones, CommunicationIdentifier targetParticipant)"
  name: "sendDtmfTones(List<DtmfTone> tones, CommunicationIdentifier targetParticipant)"
  nameWithType: "CallMediaAsync.sendDtmfTones(List<DtmfTone> tones, CommunicationIdentifier targetParticipant)"
  summary: "Send DTMF tones"
  parameters:
  - description: "tones to be sent"
    name: "tones"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/List.html\">List</a>&lt;<xref href=\"com.azure.communication.callautomation.models.DtmfTone?alt=com.azure.communication.callautomation.models.DtmfTone&text=DtmfTone\" data-throw-if-not-resolved=\"False\" />&gt;"
  - description: "the target participant"
    name: "targetParticipant"
    type: "<xref href=\"com.azure.communication.common.CommunicationIdentifier?alt=com.azure.communication.common.CommunicationIdentifier&text=CommunicationIdentifier\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<SendDtmfTonesResult> sendDtmfTones(List<DtmfTone> tones, CommunicationIdentifier targetParticipant)"
  desc: "Send DTMF tones"
  returns:
    description: "Response for successful sendDtmfTones request."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.communication.callautomation.models.SendDtmfTonesResult?alt=com.azure.communication.callautomation.models.SendDtmfTonesResult&text=SendDtmfTonesResult\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.communication.callautomation.CallMediaAsync.sendDtmfTonesWithResponse(com.azure.communication.callautomation.models.SendDtmfTonesOptions)"
  fullName: "com.azure.communication.callautomation.CallMediaAsync.sendDtmfTonesWithResponse(SendDtmfTonesOptions options)"
  name: "sendDtmfTonesWithResponse(SendDtmfTonesOptions options)"
  nameWithType: "CallMediaAsync.sendDtmfTonesWithResponse(SendDtmfTonesOptions options)"
  summary: "Send DTMF tones"
  parameters:
  - description: "SendDtmfTones configuration options"
    name: "options"
    type: "<xref href=\"com.azure.communication.callautomation.models.SendDtmfTonesOptions?alt=com.azure.communication.callautomation.models.SendDtmfTonesOptions&text=SendDtmfTonesOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<SendDtmfTonesResult>> sendDtmfTonesWithResponse(SendDtmfTonesOptions options)"
  desc: "Send DTMF tones"
  returns:
    description: "Response for successful sendDtmfTones request."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.communication.callautomation.models.SendDtmfTonesResult?alt=com.azure.communication.callautomation.models.SendDtmfTonesResult&text=SendDtmfTonesResult\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.communication.callautomation.CallMediaAsync.startContinuousDtmfRecognition(com.azure.communication.common.CommunicationIdentifier)"
  fullName: "com.azure.communication.callautomation.CallMediaAsync.startContinuousDtmfRecognition(CommunicationIdentifier targetParticipant)"
  name: "startContinuousDtmfRecognition(CommunicationIdentifier targetParticipant)"
  nameWithType: "CallMediaAsync.startContinuousDtmfRecognition(CommunicationIdentifier targetParticipant)"
  summary: "Starts continuous Dtmf recognition."
  parameters:
  - description: "the target participant"
    name: "targetParticipant"
    type: "<xref href=\"com.azure.communication.common.CommunicationIdentifier?alt=com.azure.communication.common.CommunicationIdentifier&text=CommunicationIdentifier\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Void> startContinuousDtmfRecognition(CommunicationIdentifier targetParticipant)"
  desc: "Starts continuous Dtmf recognition."
  returns:
    description: "void"
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Void.html\">Void</a>&gt;"
- uid: "com.azure.communication.callautomation.CallMediaAsync.startContinuousDtmfRecognitionWithResponse(com.azure.communication.callautomation.models.ContinuousDtmfRecognitionOptions)"
  fullName: "com.azure.communication.callautomation.CallMediaAsync.startContinuousDtmfRecognitionWithResponse(ContinuousDtmfRecognitionOptions options)"
  name: "startContinuousDtmfRecognitionWithResponse(ContinuousDtmfRecognitionOptions options)"
  nameWithType: "CallMediaAsync.startContinuousDtmfRecognitionWithResponse(ContinuousDtmfRecognitionOptions options)"
  summary: "Starts continuous Dtmf recognition."
  parameters:
  - description: "ContinuousDtmfRecognition configuration options"
    name: "options"
    type: "<xref href=\"com.azure.communication.callautomation.models.ContinuousDtmfRecognitionOptions?alt=com.azure.communication.callautomation.models.ContinuousDtmfRecognitionOptions&text=ContinuousDtmfRecognitionOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<Void>> startContinuousDtmfRecognitionWithResponse(ContinuousDtmfRecognitionOptions options)"
  desc: "Starts continuous Dtmf recognition."
  returns:
    description: "Response for successful start continuous dtmf recognition request."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Void.html\">Void</a>&gt;&gt;"
- uid: "com.azure.communication.callautomation.CallMediaAsync.startMediaStreaming()"
  fullName: "com.azure.communication.callautomation.CallMediaAsync.startMediaStreaming()"
  name: "startMediaStreaming()"
  nameWithType: "CallMediaAsync.startMediaStreaming()"
  summary: "Starts media streaming in the call."
  syntax: "public Mono<Void> startMediaStreaming()"
  desc: "Starts media streaming in the call."
  returns:
    description: "Response for successful operation."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Void.html\">Void</a>&gt;"
- uid: "com.azure.communication.callautomation.CallMediaAsync.startMediaStreamingWithResponse(com.azure.communication.callautomation.models.StartMediaStreamingOptions)"
  fullName: "com.azure.communication.callautomation.CallMediaAsync.startMediaStreamingWithResponse(StartMediaStreamingOptions options)"
  name: "startMediaStreamingWithResponse(StartMediaStreamingOptions options)"
  nameWithType: "CallMediaAsync.startMediaStreamingWithResponse(StartMediaStreamingOptions options)"
  summary: "Starts media streaming in the call with options."
  parameters:
  - description: "Options for the Start media streaming operation."
    name: "options"
    type: "<xref href=\"com.azure.communication.callautomation.models.StartMediaStreamingOptions?alt=com.azure.communication.callautomation.models.StartMediaStreamingOptions&text=StartMediaStreamingOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<Void>> startMediaStreamingWithResponse(StartMediaStreamingOptions options)"
  desc: "Starts media streaming in the call with options."
  returns:
    description: "Response for successful operation."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Void.html\">Void</a>&gt;&gt;"
- uid: "com.azure.communication.callautomation.CallMediaAsync.startRecognizing(com.azure.communication.callautomation.models.CallMediaRecognizeOptions)"
  fullName: "com.azure.communication.callautomation.CallMediaAsync.startRecognizing(CallMediaRecognizeOptions recognizeOptions)"
  name: "startRecognizing(CallMediaRecognizeOptions recognizeOptions)"
  nameWithType: "CallMediaAsync.startRecognizing(CallMediaRecognizeOptions recognizeOptions)"
  summary: "Recognize operation."
  parameters:
  - description: "Different attributes for recognize."
    name: "recognizeOptions"
    type: "<xref href=\"com.azure.communication.callautomation.models.CallMediaRecognizeOptions?alt=com.azure.communication.callautomation.models.CallMediaRecognizeOptions&text=CallMediaRecognizeOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Void> startRecognizing(CallMediaRecognizeOptions recognizeOptions)"
  desc: "Recognize operation."
  returns:
    description: "Response for successful recognize request."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Void.html\">Void</a>&gt;"
- uid: "com.azure.communication.callautomation.CallMediaAsync.startRecognizingWithResponse(com.azure.communication.callautomation.models.CallMediaRecognizeOptions)"
  fullName: "com.azure.communication.callautomation.CallMediaAsync.startRecognizingWithResponse(CallMediaRecognizeOptions recognizeOptions)"
  name: "startRecognizingWithResponse(CallMediaRecognizeOptions recognizeOptions)"
  nameWithType: "CallMediaAsync.startRecognizingWithResponse(CallMediaRecognizeOptions recognizeOptions)"
  summary: "Recognize operation"
  parameters:
  - description: "Different attributes for recognize."
    name: "recognizeOptions"
    type: "<xref href=\"com.azure.communication.callautomation.models.CallMediaRecognizeOptions?alt=com.azure.communication.callautomation.models.CallMediaRecognizeOptions&text=CallMediaRecognizeOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<Void>> startRecognizingWithResponse(CallMediaRecognizeOptions recognizeOptions)"
  desc: "Recognize operation"
  returns:
    description: "Response for successful recognize request."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Void.html\">Void</a>&gt;&gt;"
- uid: "com.azure.communication.callautomation.CallMediaAsync.startTranscription()"
  fullName: "com.azure.communication.callautomation.CallMediaAsync.startTranscription()"
  name: "startTranscription()"
  nameWithType: "CallMediaAsync.startTranscription()"
  summary: "Starts transcription in the call."
  syntax: "public Mono<Void> startTranscription()"
  desc: "Starts transcription in the call."
  returns:
    description: "Response for successful operation."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Void.html\">Void</a>&gt;"
- uid: "com.azure.communication.callautomation.CallMediaAsync.startTranscriptionWithResponse(com.azure.communication.callautomation.models.StartTranscriptionOptions)"
  fullName: "com.azure.communication.callautomation.CallMediaAsync.startTranscriptionWithResponse(StartTranscriptionOptions options)"
  name: "startTranscriptionWithResponse(StartTranscriptionOptions options)"
  nameWithType: "CallMediaAsync.startTranscriptionWithResponse(StartTranscriptionOptions options)"
  summary: "Starts transcription in the call with options."
  parameters:
  - description: "Options for the Start Transcription operation."
    name: "options"
    type: "<xref href=\"com.azure.communication.callautomation.models.StartTranscriptionOptions?alt=com.azure.communication.callautomation.models.StartTranscriptionOptions&text=StartTranscriptionOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<Void>> startTranscriptionWithResponse(StartTranscriptionOptions options)"
  desc: "Starts transcription in the call with options."
  returns:
    description: "Response for successful operation."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Void.html\">Void</a>&gt;&gt;"
- uid: "com.azure.communication.callautomation.CallMediaAsync.stopContinuousDtmfRecognition(com.azure.communication.common.CommunicationIdentifier)"
  fullName: "com.azure.communication.callautomation.CallMediaAsync.stopContinuousDtmfRecognition(CommunicationIdentifier targetParticipant)"
  name: "stopContinuousDtmfRecognition(CommunicationIdentifier targetParticipant)"
  nameWithType: "CallMediaAsync.stopContinuousDtmfRecognition(CommunicationIdentifier targetParticipant)"
  summary: "Stops continuous Dtmf recognition."
  parameters:
  - description: "the target participant"
    name: "targetParticipant"
    type: "<xref href=\"com.azure.communication.common.CommunicationIdentifier?alt=com.azure.communication.common.CommunicationIdentifier&text=CommunicationIdentifier\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Void> stopContinuousDtmfRecognition(CommunicationIdentifier targetParticipant)"
  desc: "Stops continuous Dtmf recognition."
  returns:
    description: "void"
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Void.html\">Void</a>&gt;"
- uid: "com.azure.communication.callautomation.CallMediaAsync.stopContinuousDtmfRecognitionWithResponse(com.azure.communication.callautomation.models.ContinuousDtmfRecognitionOptions)"
  fullName: "com.azure.communication.callautomation.CallMediaAsync.stopContinuousDtmfRecognitionWithResponse(ContinuousDtmfRecognitionOptions options)"
  name: "stopContinuousDtmfRecognitionWithResponse(ContinuousDtmfRecognitionOptions options)"
  nameWithType: "CallMediaAsync.stopContinuousDtmfRecognitionWithResponse(ContinuousDtmfRecognitionOptions options)"
  summary: "Stops continuous Dtmf recognition."
  parameters:
  - description: "ContinuousDtmfRecognition configuration options"
    name: "options"
    type: "<xref href=\"com.azure.communication.callautomation.models.ContinuousDtmfRecognitionOptions?alt=com.azure.communication.callautomation.models.ContinuousDtmfRecognitionOptions&text=ContinuousDtmfRecognitionOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<Void>> stopContinuousDtmfRecognitionWithResponse(ContinuousDtmfRecognitionOptions options)"
  desc: "Stops continuous Dtmf recognition."
  returns:
    description: "Response for successful stop continuous dtmf recognition request."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Void.html\">Void</a>&gt;&gt;"
- uid: "com.azure.communication.callautomation.CallMediaAsync.stopMediaStreaming()"
  fullName: "com.azure.communication.callautomation.CallMediaAsync.stopMediaStreaming()"
  name: "stopMediaStreaming()"
  nameWithType: "CallMediaAsync.stopMediaStreaming()"
  summary: "Stops media streaming in the call."
  syntax: "public Mono<Void> stopMediaStreaming()"
  desc: "Stops media streaming in the call."
  returns:
    description: "Response for successful operation."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Void.html\">Void</a>&gt;"
- uid: "com.azure.communication.callautomation.CallMediaAsync.stopMediaStreamingWithResponse(com.azure.communication.callautomation.models.StopMediaStreamingOptions)"
  fullName: "com.azure.communication.callautomation.CallMediaAsync.stopMediaStreamingWithResponse(StopMediaStreamingOptions options)"
  name: "stopMediaStreamingWithResponse(StopMediaStreamingOptions options)"
  nameWithType: "CallMediaAsync.stopMediaStreamingWithResponse(StopMediaStreamingOptions options)"
  summary: "Stops media streaming in the call with options."
  parameters:
  - description: "Options for the Stop media streaming operation."
    name: "options"
    type: "<xref href=\"com.azure.communication.callautomation.models.StopMediaStreamingOptions?alt=com.azure.communication.callautomation.models.StopMediaStreamingOptions&text=StopMediaStreamingOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<Void>> stopMediaStreamingWithResponse(StopMediaStreamingOptions options)"
  desc: "Stops media streaming in the call with options."
  returns:
    description: "Response for successful operation."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Void.html\">Void</a>&gt;&gt;"
- uid: "com.azure.communication.callautomation.CallMediaAsync.stopTranscription()"
  fullName: "com.azure.communication.callautomation.CallMediaAsync.stopTranscription()"
  name: "stopTranscription()"
  nameWithType: "CallMediaAsync.stopTranscription()"
  summary: "Stops transcription in the call."
  syntax: "public Mono<Void> stopTranscription()"
  desc: "Stops transcription in the call."
  returns:
    description: "Response for successful operation."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Void.html\">Void</a>&gt;"
- uid: "com.azure.communication.callautomation.CallMediaAsync.stopTranscriptionWithResponse(com.azure.communication.callautomation.models.StopTranscriptionOptions)"
  fullName: "com.azure.communication.callautomation.CallMediaAsync.stopTranscriptionWithResponse(StopTranscriptionOptions options)"
  name: "stopTranscriptionWithResponse(StopTranscriptionOptions options)"
  nameWithType: "CallMediaAsync.stopTranscriptionWithResponse(StopTranscriptionOptions options)"
  summary: "Stops transcription in the call with options."
  parameters:
  - description: "Options for the Stop Transcription operation."
    name: "options"
    type: "<xref href=\"com.azure.communication.callautomation.models.StopTranscriptionOptions?alt=com.azure.communication.callautomation.models.StopTranscriptionOptions&text=StopTranscriptionOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<Void>> stopTranscriptionWithResponse(StopTranscriptionOptions options)"
  desc: "Stops transcription in the call with options."
  returns:
    description: "Response for successful operation."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Void.html\">Void</a>&gt;&gt;"
- uid: "com.azure.communication.callautomation.CallMediaAsync.unhold(com.azure.communication.common.CommunicationIdentifier)"
  fullName: "com.azure.communication.callautomation.CallMediaAsync.unhold(CommunicationIdentifier targetParticipant)"
  name: "unhold(CommunicationIdentifier targetParticipant)"
  nameWithType: "CallMediaAsync.unhold(CommunicationIdentifier targetParticipant)"
  summary: "Removes hold from participant in call."
  parameters:
  - description: "the target."
    name: "targetParticipant"
    type: "<xref href=\"com.azure.communication.common.CommunicationIdentifier?alt=com.azure.communication.common.CommunicationIdentifier&text=CommunicationIdentifier\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Void> unhold(CommunicationIdentifier targetParticipant)"
  desc: "Removes hold from participant in call."
  returns:
    description: "Response for successful operation."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Void.html\">Void</a>&gt;"
- uid: "com.azure.communication.callautomation.CallMediaAsync.unholdWithResponse(com.azure.communication.common.CommunicationIdentifier,java.lang.String)"
  fullName: "com.azure.communication.callautomation.CallMediaAsync.unholdWithResponse(CommunicationIdentifier targetParticipant, String operationContext)"
  name: "unholdWithResponse(CommunicationIdentifier targetParticipant, String operationContext)"
  nameWithType: "CallMediaAsync.unholdWithResponse(CommunicationIdentifier targetParticipant, String operationContext)"
  summary: "Holds participant in call."
  parameters:
  - description: "the target."
    name: "targetParticipant"
    type: "<xref href=\"com.azure.communication.common.CommunicationIdentifier?alt=com.azure.communication.common.CommunicationIdentifier&text=CommunicationIdentifier\" data-throw-if-not-resolved=\"False\" />"
  - description: "Operational context."
    name: "operationContext"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public Mono<Response<Void>> unholdWithResponse(CommunicationIdentifier targetParticipant, String operationContext)"
  desc: "Holds participant in call."
  returns:
    description: "Response for successful operation."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Void.html\">Void</a>&gt;&gt;"
- uid: "com.azure.communication.callautomation.CallMediaAsync.updateTranscription(java.lang.String)"
  fullName: "com.azure.communication.callautomation.CallMediaAsync.updateTranscription(String locale)"
  name: "updateTranscription(String locale)"
  nameWithType: "CallMediaAsync.updateTranscription(String locale)"
  summary: "Updates transcription language"
  parameters:
  - description: "Defines new locale for transcription."
    name: "locale"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public Mono<Void> updateTranscription(String locale)"
  desc: "Updates transcription language"
  returns:
    description: "Response for successful operation."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Void.html\">Void</a>&gt;"
- uid: "com.azure.communication.callautomation.CallMediaAsync.updateTranscription(java.lang.String,java.lang.String)"
  fullName: "com.azure.communication.callautomation.CallMediaAsync.updateTranscription(String locale, String speechRecognitionModelEndpointId)"
  name: "updateTranscription(String locale, String speechRecognitionModelEndpointId)"
  nameWithType: "CallMediaAsync.updateTranscription(String locale, String speechRecognitionModelEndpointId)"
  summary: "Updates transcription language"
  parameters:
  - description: "Defines new locale for transcription."
    name: "locale"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "Defines custom model endpoint."
    name: "speechRecognitionModelEndpointId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public Mono<Void> updateTranscription(String locale, String speechRecognitionModelEndpointId)"
  desc: "Updates transcription language"
  returns:
    description: "Response for successful operation."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Void.html\">Void</a>&gt;"
- uid: "com.azure.communication.callautomation.CallMediaAsync.updateTranscriptionWithResponse(java.lang.String,java.lang.String,java.lang.String)"
  fullName: "com.azure.communication.callautomation.CallMediaAsync.updateTranscriptionWithResponse(String locale, String speechRecognitionModelEndpointId, String operationContext)"
  name: "updateTranscriptionWithResponse(String locale, String speechRecognitionModelEndpointId, String operationContext)"
  nameWithType: "CallMediaAsync.updateTranscriptionWithResponse(String locale, String speechRecognitionModelEndpointId, String operationContext)"
  summary: "Updates transcription language"
  parameters:
  - description: "Defines new locale for transcription."
    name: "locale"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "Defines custom model endpoint."
    name: "speechRecognitionModelEndpointId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "operational context."
    name: "operationContext"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public Mono<Response<Void>> updateTranscriptionWithResponse(String locale, String speechRecognitionModelEndpointId, String operationContext)"
  desc: "Updates transcription language"
  returns:
    description: "Response for successful operation."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Void.html\">Void</a>&gt;&gt;"
type: "class"
desc: "CallContent."
metadata: {}
package: "com.azure.communication.callautomation"
artifact: com.azure:azure-communication-callautomation:1.3.0-beta.1
