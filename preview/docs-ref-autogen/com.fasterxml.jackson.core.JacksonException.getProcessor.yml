### YamlMime:JavaMember
uid: "com.fasterxml.jackson.core.JacksonException.getProcessor*"
fullName: "com.fasterxml.jackson.core.JacksonException.getProcessor"
name: "getProcessor"
nameWithType: "JacksonException.getProcessor"
members:
- uid: "com.fasterxml.jackson.core.JacksonException.getProcessor()"
  fullName: "com.fasterxml.jackson.core.JacksonException.getProcessor()"
  name: "getProcessor()"
  nameWithType: "JacksonException.getProcessor()"
  summary: "Method that allows accessing underlying processor that triggered this exception; typically either <xref uid=\"com.fasterxml.jackson.core.JsonParser\" data-throw-if-not-resolved=\"false\" data-raw-source=\"JsonParser\"></xref> or <xref uid=\"com.fasterxml.jackson.core.JsonGenerator\" data-throw-if-not-resolved=\"false\" data-raw-source=\"JsonGenerator\"></xref> for exceptions that originate from streaming API, but other abstractions when thrown by databinding.\n\nNote that it is possible that \\`null\\` may be returned if code throwing exception either has no access to processor; or has not been retrofitted to set it; this means that caller needs to take care to check for nulls. Subtypes override this method with co-variant return type, for more type-safe access."
  syntax: "public abstract Object getProcessor()"
  returns:
    description: "Originating processor, if available; <code>null</code> if not."
    type: "<xref href=\"java.lang.Object?alt=java.lang.Object&text=Object\" data-throw-if-not-resolved=\"False\" />"
type: "method"
metadata: {}
package: "com.fasterxml.jackson.core"
artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.5
