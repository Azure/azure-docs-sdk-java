### YamlMime:JavaMember
uid: "com.microsoft.azure.cognitiveservices.vision.computervision.implementation.ComputerVisionImpl.detectObjectsAsync*"
fullName: "com.microsoft.azure.cognitiveservices.vision.computervision.implementation.ComputerVisionImpl.detectObjectsAsync"
name: "detectObjectsAsync"
nameWithType: "ComputerVisionImpl.detectObjectsAsync"
members:
- uid: "com.microsoft.azure.cognitiveservices.vision.computervision.implementation.ComputerVisionImpl.detectObjectsAsync(java.lang.String,com.microsoft.azure.cognitiveservices.vision.computervision.models.DetectObjectsOptionalParameter)"
  fullName: "com.microsoft.azure.cognitiveservices.vision.computervision.implementation.ComputerVisionImpl.detectObjectsAsync(String url, DetectObjectsOptionalParameter detectObjectsOptionalParameter)"
  name: "detectObjectsAsync(String url, DetectObjectsOptionalParameter detectObjectsOptionalParameter)"
  nameWithType: "ComputerVisionImpl.detectObjectsAsync(String url, DetectObjectsOptionalParameter detectObjectsOptionalParameter)"
  summary: "Performs object detection on the specified image. Two input methods are supported -- (1) Uploading an image or (2) specifying an image URL. A successful response will be returned in JSON. If the request failed, the response will contain an error code and a message to help understand what went wrong."
  parameters:
  - description: "Publicly reachable URL of an image."
    name: "url"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "the object representing the optional parameters to be set before calling this API"
    name: "detectObjectsOptionalParameter"
    type: "<xref href=\"com.microsoft.azure.cognitiveservices.vision.computervision.models.DetectObjectsOptionalParameter?alt=com.microsoft.azure.cognitiveservices.vision.computervision.models.DetectObjectsOptionalParameter&text=DetectObjectsOptionalParameter\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Observable<DetectResult> detectObjectsAsync(String url, DetectObjectsOptionalParameter detectObjectsOptionalParameter)"
  returns:
    description: "the observable to the DetectResult object"
    type: "<xref href=\"rx.Observable?alt=rx.Observable&text=Observable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.cognitiveservices.vision.computervision.models.DetectResult?alt=com.microsoft.azure.cognitiveservices.vision.computervision.models.DetectResult&text=DetectResult\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.cognitiveservices.vision.computervision.implementation.ComputerVisionImpl.detectObjectsAsync(java.lang.String,com.microsoft.azure.cognitiveservices.vision.computervision.models.DetectObjectsOptionalParameter,com.microsoft.rest.ServiceCallback<com.microsoft.azure.cognitiveservices.vision.computervision.models.DetectResult>)"
  fullName: "com.microsoft.azure.cognitiveservices.vision.computervision.implementation.ComputerVisionImpl.detectObjectsAsync(String url, DetectObjectsOptionalParameter detectObjectsOptionalParameter, ServiceCallback<DetectResult> serviceCallback)"
  name: "detectObjectsAsync(String url, DetectObjectsOptionalParameter detectObjectsOptionalParameter, ServiceCallback<DetectResult> serviceCallback)"
  nameWithType: "ComputerVisionImpl.detectObjectsAsync(String url, DetectObjectsOptionalParameter detectObjectsOptionalParameter, ServiceCallback<DetectResult> serviceCallback)"
  summary: "Performs object detection on the specified image. Two input methods are supported -- (1) Uploading an image or (2) specifying an image URL. A successful response will be returned in JSON. If the request failed, the response will contain an error code and a message to help understand what went wrong."
  parameters:
  - description: "Publicly reachable URL of an image."
    name: "url"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "the object representing the optional parameters to be set before calling this API"
    name: "detectObjectsOptionalParameter"
    type: "<xref href=\"com.microsoft.azure.cognitiveservices.vision.computervision.models.DetectObjectsOptionalParameter?alt=com.microsoft.azure.cognitiveservices.vision.computervision.models.DetectObjectsOptionalParameter&text=DetectObjectsOptionalParameter\" data-throw-if-not-resolved=\"False\" />"
  - description: "the async ServiceCallback to handle successful and failed responses."
    name: "serviceCallback"
    type: "<xref href=\"com.microsoft.rest.ServiceCallback?alt=com.microsoft.rest.ServiceCallback&text=ServiceCallback\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.cognitiveservices.vision.computervision.models.DetectResult?alt=com.microsoft.azure.cognitiveservices.vision.computervision.models.DetectResult&text=DetectResult\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public ServiceFuture<DetectResult> detectObjectsAsync(String url, DetectObjectsOptionalParameter detectObjectsOptionalParameter, ServiceCallback<DetectResult> serviceCallback)"
  returns:
    description: "the <xref uid=\"com.microsoft.rest.ServiceFuture\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ServiceFuture\"></xref> object"
    type: "<xref href=\"com.microsoft.rest.ServiceFuture?alt=com.microsoft.rest.ServiceFuture&text=ServiceFuture\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.cognitiveservices.vision.computervision.models.DetectResult?alt=com.microsoft.azure.cognitiveservices.vision.computervision.models.DetectResult&text=DetectResult\" data-throw-if-not-resolved=\"False\" />&gt;"
type: "method"
metadata: {}
package: "com.microsoft.azure.cognitiveservices.vision.computervision.implementation"
artifact: com.microsoft.azure.cognitiveservices:azure-cognitiveservices-computervision:1.0.6-beta
