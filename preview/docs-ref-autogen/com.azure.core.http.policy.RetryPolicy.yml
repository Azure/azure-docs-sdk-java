### YamlMime:ManagedReference
items:
- uid: com.azure.core.http.policy.RetryPolicy
  id: RetryPolicy
  artifact: com.azure:azure-core:1.3.0-beta.1
  parent: com.azure.core.http.policy
  children:
  - com.azure.core.http.policy.RetryPolicy.RetryPolicy()
  - com.azure.core.http.policy.RetryPolicy.RetryPolicy(com.azure.core.http.policy.RetryStrategy)
  - com.azure.core.http.policy.RetryPolicy.RetryPolicy(com.azure.core.http.policy.RetryStrategy,java.lang.String,java.time.temporal.ChronoUnit)
  - com.azure.core.http.policy.RetryPolicy.RetryPolicy(java.lang.String,java.time.temporal.ChronoUnit)
  - com.azure.core.http.policy.RetryPolicy.process(com.azure.core.http.HttpPipelineCallContext,com.azure.core.http.HttpPipelineNextPolicy)
  langs:
  - java
  name: RetryPolicy
  nameWithType: RetryPolicy
  fullName: com.azure.core.http.policy.RetryPolicy
  type: Class
  package: com.azure.core.http.policy
  summary: A pipeline policy that retries when a recoverable HTTP error occurs.
  syntax:
    content: public class RetryPolicy implements HttpPipelinePolicy
  inheritance:
  - java.lang.Object
  implements:
  - com.azure.core.http.policy.HttpPipelinePolicy
  inheritedMembers:
  - java.lang.Object.clone()
  - java.lang.Object.equals(java.lang.Object)
  - java.lang.Object.finalize()
  - java.lang.Object.getClass()
  - java.lang.Object.hashCode()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.toString()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
- uid: com.azure.core.http.policy.RetryPolicy.RetryPolicy()
  id: RetryPolicy()
  artifact: com.azure:azure-core:1.3.0-beta.1
  parent: com.azure.core.http.policy.RetryPolicy
  langs:
  - java
  name: RetryPolicy()
  nameWithType: RetryPolicy.RetryPolicy()
  fullName: com.azure.core.http.policy.RetryPolicy.RetryPolicy()
  overload: com.azure.core.http.policy.RetryPolicy.RetryPolicy*
  type: Constructor
  package: com.azure.core.http.policy
  summary: Creates <xref uid="com.azure.core.http.policy.RetryPolicy" data-throw-if-not-resolved="false">RetryPolicy</xref> with default <xref uid="com.azure.core.http.policy.ExponentialBackoff" data-throw-if-not-resolved="false">ExponentialBackoff</xref> as <xref uid="com.azure.core.http.policy.RetryStrategy" data-throw-if-not-resolved="false">RetryStrategy</xref> and ignore the delay provided in response header.
  syntax:
    content: public RetryPolicy()
- uid: com.azure.core.http.policy.RetryPolicy.RetryPolicy(com.azure.core.http.policy.RetryStrategy)
  id: RetryPolicy(com.azure.core.http.policy.RetryStrategy)
  artifact: com.azure:azure-core:1.3.0-beta.1
  parent: com.azure.core.http.policy.RetryPolicy
  langs:
  - java
  name: RetryPolicy(RetryStrategy retryStrategy)
  nameWithType: RetryPolicy.RetryPolicy(RetryStrategy retryStrategy)
  fullName: com.azure.core.http.policy.RetryPolicy.RetryPolicy(RetryStrategy retryStrategy)
  overload: com.azure.core.http.policy.RetryPolicy.RetryPolicy*
  type: Constructor
  package: com.azure.core.http.policy
  summary: Creates a <xref uid="com.azure.core.http.policy.RetryPolicy" data-throw-if-not-resolved="false">RetryPolicy</xref> with the provided <xref uid="com.azure.core.http.policy.RetryStrategy" data-throw-if-not-resolved="false">RetryStrategy</xref> and ignore the delay provided in response header.
  syntax:
    content: public RetryPolicy(RetryStrategy retryStrategy)
    parameters:
    - id: retryStrategy
      type: com.azure.core.http.policy.RetryStrategy
      description: The <xref uid="com.azure.core.http.policy.RetryStrategy" data-throw-if-not-resolved="false">RetryStrategy</xref> used for retries.
- uid: com.azure.core.http.policy.RetryPolicy.RetryPolicy(com.azure.core.http.policy.RetryStrategy,java.lang.String,java.time.temporal.ChronoUnit)
  id: RetryPolicy(com.azure.core.http.policy.RetryStrategy,java.lang.String,java.time.temporal.ChronoUnit)
  artifact: com.azure:azure-core:1.3.0-beta.1
  parent: com.azure.core.http.policy.RetryPolicy
  langs:
  - java
  name: RetryPolicy(RetryStrategy retryStrategy, String retryAfterHeader, ChronoUnit retryAfterTimeUnit)
  nameWithType: RetryPolicy.RetryPolicy(RetryStrategy retryStrategy, String retryAfterHeader, ChronoUnit retryAfterTimeUnit)
  fullName: com.azure.core.http.policy.RetryPolicy.RetryPolicy(RetryStrategy retryStrategy, String retryAfterHeader, ChronoUnit retryAfterTimeUnit)
  overload: com.azure.core.http.policy.RetryPolicy.RetryPolicy*
  type: Constructor
  package: com.azure.core.http.policy
  summary: Creates <xref uid="com.azure.core.http.policy.RetryPolicy" data-throw-if-not-resolved="false">RetryPolicy</xref> with the provided <xref uid="com.azure.core.http.policy.RetryStrategy" data-throw-if-not-resolved="false">RetryStrategy</xref> and default <xref uid="com.azure.core.http.policy.ExponentialBackoff" data-throw-if-not-resolved="false">ExponentialBackoff</xref> as <xref uid="com.azure.core.http.policy.RetryStrategy" data-throw-if-not-resolved="false">RetryStrategy</xref>. It will use provided `retryAfterHeader` in <xref uid="com.azure.core.http.HttpResponse" data-throw-if-not-resolved="false">HttpResponse</xref> headers for calculating retry delay.
  syntax:
    content: public RetryPolicy(RetryStrategy retryStrategy, String retryAfterHeader, ChronoUnit retryAfterTimeUnit)
    parameters:
    - id: retryStrategy
      type: com.azure.core.http.policy.RetryStrategy
      description: The <xref uid="com.azure.core.http.policy.RetryStrategy" data-throw-if-not-resolved="false">RetryStrategy</xref> used for retries.
    - id: retryAfterHeader
      type: java.lang.String
      description: >-
        The HTTP header, such as 'Retry-After' or 'x-ms-retry-after-ms', to lookup for the
         retry delay. If the value is <code>null</code>, <xref uid="com.azure.core.http.policy.RetryPolicy" data-throw-if-not-resolved="false">RetryPolicy</xref> will use the retry strategy to compute the delay
         and ignore the delay provided in response header.
    - id: retryAfterTimeUnit
      type: java.time.temporal.ChronoUnit
      description: >-
        The time unit to use when applying the retry delay. <code>null</code> is valid if, and only
         if, <code>retryAfterHeader</code> is <code>null</code>.
- uid: com.azure.core.http.policy.RetryPolicy.RetryPolicy(java.lang.String,java.time.temporal.ChronoUnit)
  id: RetryPolicy(java.lang.String,java.time.temporal.ChronoUnit)
  artifact: com.azure:azure-core:1.3.0-beta.1
  parent: com.azure.core.http.policy.RetryPolicy
  langs:
  - java
  name: RetryPolicy(String retryAfterHeader, ChronoUnit retryAfterTimeUnit)
  nameWithType: RetryPolicy.RetryPolicy(String retryAfterHeader, ChronoUnit retryAfterTimeUnit)
  fullName: com.azure.core.http.policy.RetryPolicy.RetryPolicy(String retryAfterHeader, ChronoUnit retryAfterTimeUnit)
  overload: com.azure.core.http.policy.RetryPolicy.RetryPolicy*
  type: Constructor
  package: com.azure.core.http.policy
  summary: Creates <xref uid="com.azure.core.http.policy.RetryPolicy" data-throw-if-not-resolved="false">RetryPolicy</xref> with default <xref uid="com.azure.core.http.policy.ExponentialBackoff" data-throw-if-not-resolved="false">ExponentialBackoff</xref> as <xref uid="com.azure.core.http.policy.RetryStrategy" data-throw-if-not-resolved="false">RetryStrategy</xref> and use provided `retryAfterHeader` in <xref uid="com.azure.core.http.HttpResponse" data-throw-if-not-resolved="false">HttpResponse</xref> headers for calculating retry delay.
  syntax:
    content: public RetryPolicy(String retryAfterHeader, ChronoUnit retryAfterTimeUnit)
    parameters:
    - id: retryAfterHeader
      type: java.lang.String
      description: >-
        The HTTP header, such as 'Retry-After' or 'x-ms-retry-after-ms', to lookup for the
         retry delay. If the value is <code>null</code>, <xref uid="com.azure.core.http.policy.RetryPolicy" data-throw-if-not-resolved="false">RetryPolicy</xref> will use the retry strategy to compute the delay
         and ignore the delay provided in response header.
    - id: retryAfterTimeUnit
      type: java.time.temporal.ChronoUnit
      description: >-
        The time unit to use when applying the retry delay. <code>null</code> is valid if, and only
         if, <code>retryAfterHeader</code> is <code>null</code>.
- uid: com.azure.core.http.policy.RetryPolicy.process(com.azure.core.http.HttpPipelineCallContext,com.azure.core.http.HttpPipelineNextPolicy)
  id: process(com.azure.core.http.HttpPipelineCallContext,com.azure.core.http.HttpPipelineNextPolicy)
  artifact: com.azure:azure-core:1.3.0-beta.1
  parent: com.azure.core.http.policy.RetryPolicy
  langs:
  - java
  name: process(HttpPipelineCallContext context, HttpPipelineNextPolicy next)
  nameWithType: RetryPolicy.process(HttpPipelineCallContext context, HttpPipelineNextPolicy next)
  fullName: com.azure.core.http.policy.RetryPolicy.process(HttpPipelineCallContext context, HttpPipelineNextPolicy next)
  overload: com.azure.core.http.policy.RetryPolicy.process*
  type: Method
  package: com.azure.core.http.policy
  summary: Process provided request context and invokes the next policy.
  syntax:
    content: public Mono<HttpResponse> process(HttpPipelineCallContext context, HttpPipelineNextPolicy next)
    parameters:
    - id: context
      type: com.azure.core.http.HttpPipelineCallContext
    - id: next
      type: com.azure.core.http.HttpPipelineNextPolicy
    return:
      type: reactor.core.publisher.Mono<com.azure.core.http.HttpResponse>
references:
- uid: com.azure.core.http.policy.RetryPolicy.RetryPolicy*
  name: RetryPolicy
  nameWithType: RetryPolicy.RetryPolicy
  fullName: com.azure.core.http.policy.RetryPolicy.RetryPolicy
  package: com.azure.core.http.policy
- uid: java.lang.String
  spec.java:
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
- uid: java.time.temporal.ChronoUnit
  spec.java:
  - uid: java.time.temporal.ChronoUnit
    name: ChronoUnit
    fullName: java.time.temporal.ChronoUnit
- uid: com.azure.core.http.policy.RetryStrategy
  name: RetryStrategy
  nameWithType: RetryStrategy
  fullName: com.azure.core.http.policy.RetryStrategy
- uid: com.azure.core.http.HttpPipelineCallContext
  name: HttpPipelineCallContext
  nameWithType: HttpPipelineCallContext
  fullName: com.azure.core.http.HttpPipelineCallContext
- uid: com.azure.core.http.HttpPipelineNextPolicy
  name: HttpPipelineNextPolicy
  nameWithType: HttpPipelineNextPolicy
  fullName: com.azure.core.http.HttpPipelineNextPolicy
- uid: reactor.core.publisher.Mono<com.azure.core.http.HttpResponse>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: com.azure.core.http.HttpResponse
    name: HttpResponse
    fullName: com.azure.core.http.HttpResponse
  - name: '>'
    fullName: '>'
- uid: com.azure.core.http.policy.RetryPolicy.process*
  name: process
  nameWithType: RetryPolicy.process
  fullName: com.azure.core.http.policy.RetryPolicy.process
  package: com.azure.core.http.policy
- uid: com.azure.core.http.policy.HttpPipelinePolicy
  name: HttpPipelinePolicy
  nameWithType: HttpPipelinePolicy
  fullName: com.azure.core.http.policy.HttpPipelinePolicy
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: java.lang.Object.finalize()
  name: Object.finalize()
  nameWithType: Object.finalize()
  fullName: java.lang.Object.finalize()
- uid: java.lang.Object.clone()
  name: Object.clone()
  nameWithType: Object.clone()
  fullName: java.lang.Object.clone()
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: java.lang.Object.equals(java.lang.Object)
  name: Object.equals(Object)
  nameWithType: Object.equals(Object)
  fullName: java.lang.Object.equals(java.lang.Object)
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.lang.Object.hashCode()
  name: Object.hashCode()
  nameWithType: Object.hashCode()
  fullName: java.lang.Object.hashCode()
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: java.lang.Object.toString()
  name: Object.toString()
  nameWithType: Object.toString()
  fullName: java.lang.Object.toString()
- uid: com.azure.core.http.HttpResponse
  name: HttpResponse
  nameWithType: HttpResponse
  fullName: com.azure.core.http.HttpResponse
- uid: reactor.core.publisher.Mono
  name: Mono
  nameWithType: Mono
  fullName: reactor.core.publisher.Mono
