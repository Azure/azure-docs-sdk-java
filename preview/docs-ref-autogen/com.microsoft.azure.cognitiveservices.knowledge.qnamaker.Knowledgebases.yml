### YamlMime:JavaType
uid: "com.microsoft.azure.cognitiveservices.knowledge.qnamaker.Knowledgebases"
fullName: "com.microsoft.azure.cognitiveservices.knowledge.qnamaker.Knowledgebases"
name: "Knowledgebases"
nameWithType: "Knowledgebases"
summary: "An instance of this class provides access to all the operations defined in Knowledgebases."
syntax: "public interface Knowledgebases"
methods:
- uid: "com.microsoft.azure.cognitiveservices.knowledge.qnamaker.Knowledgebases.create(com.microsoft.azure.cognitiveservices.knowledge.qnamaker.models.CreateKbDTO)"
  fullName: "com.microsoft.azure.cognitiveservices.knowledge.qnamaker.Knowledgebases.create(CreateKbDTO createKbPayload)"
  name: "create(CreateKbDTO createKbPayload)"
  nameWithType: "Knowledgebases.create(CreateKbDTO createKbPayload)"
  summary: "Asynchronous operation to create a new knowledgebase."
  modifiers:
  - "abstract"
  parameters:
  - description: "Post body of the request."
    name: "createKbPayload"
    type: "<xref href=\"com.microsoft.azure.cognitiveservices.knowledge.qnamaker.models.CreateKbDTO?alt=com.microsoft.azure.cognitiveservices.knowledge.qnamaker.models.CreateKbDTO&text=CreateKbDTO\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract Operation create(CreateKbDTO createKbPayload)"
  desc: "Asynchronous operation to create a new knowledgebase."
  returns:
    description: "the Operation object if successful."
    type: "<xref href=\"com.microsoft.azure.cognitiveservices.knowledge.qnamaker.models.Operation?alt=com.microsoft.azure.cognitiveservices.knowledge.qnamaker.models.Operation&text=Operation\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.cognitiveservices.knowledge.qnamaker.Knowledgebases.createAsync(com.microsoft.azure.cognitiveservices.knowledge.qnamaker.models.CreateKbDTO)"
  fullName: "com.microsoft.azure.cognitiveservices.knowledge.qnamaker.Knowledgebases.createAsync(CreateKbDTO createKbPayload)"
  name: "createAsync(CreateKbDTO createKbPayload)"
  nameWithType: "Knowledgebases.createAsync(CreateKbDTO createKbPayload)"
  summary: "Asynchronous operation to create a new knowledgebase."
  modifiers:
  - "abstract"
  parameters:
  - description: "Post body of the request."
    name: "createKbPayload"
    type: "<xref href=\"com.microsoft.azure.cognitiveservices.knowledge.qnamaker.models.CreateKbDTO?alt=com.microsoft.azure.cognitiveservices.knowledge.qnamaker.models.CreateKbDTO&text=CreateKbDTO\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract Observable<Operation> createAsync(CreateKbDTO createKbPayload)"
  desc: "Asynchronous operation to create a new knowledgebase."
  returns:
    description: "the observable to the Operation object"
    type: "<xref href=\"rx.Observable?alt=rx.Observable&text=Observable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.cognitiveservices.knowledge.qnamaker.models.Operation?alt=com.microsoft.azure.cognitiveservices.knowledge.qnamaker.models.Operation&text=Operation\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.cognitiveservices.knowledge.qnamaker.Knowledgebases.delete(java.lang.String)"
  fullName: "com.microsoft.azure.cognitiveservices.knowledge.qnamaker.Knowledgebases.delete(String kbId)"
  name: "delete(String kbId)"
  nameWithType: "Knowledgebases.delete(String kbId)"
  summary: "Deletes the knowledgebase and all its data."
  modifiers:
  - "abstract"
  parameters:
  - description: "Knowledgebase id."
    name: "kbId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract void delete(String kbId)"
  desc: "Deletes the knowledgebase and all its data."
- uid: "com.microsoft.azure.cognitiveservices.knowledge.qnamaker.Knowledgebases.deleteAsync(java.lang.String)"
  fullName: "com.microsoft.azure.cognitiveservices.knowledge.qnamaker.Knowledgebases.deleteAsync(String kbId)"
  name: "deleteAsync(String kbId)"
  nameWithType: "Knowledgebases.deleteAsync(String kbId)"
  summary: "Deletes the knowledgebase and all its data."
  modifiers:
  - "abstract"
  parameters:
  - description: "Knowledgebase id."
    name: "kbId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract Observable<Void> deleteAsync(String kbId)"
  desc: "Deletes the knowledgebase and all its data."
  returns:
    description: "a representation of the deferred computation of this call if successful."
    type: "<xref href=\"rx.Observable?alt=rx.Observable&text=Observable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.cognitiveservices.knowledge.qnamaker.Knowledgebases.download()"
  fullName: "com.microsoft.azure.cognitiveservices.knowledge.qnamaker.Knowledgebases.download()"
  name: "download()"
  nameWithType: "Knowledgebases.download()"
  summary: "Download the knowledgebase."
  modifiers:
  - "abstract"
  syntax: "public abstract Knowledgebases.KnowledgebasesDownloadDefinitionStages.WithKbId download()"
  desc: "Download the knowledgebase."
  returns:
    description: "the first stage of the download call"
    type: "<xref href=\"com.microsoft.azure.cognitiveservices.knowledge.qnamaker.Knowledgebases.KnowledgebasesDownloadDefinitionStages.WithKbId?alt=com.microsoft.azure.cognitiveservices.knowledge.qnamaker.Knowledgebases.KnowledgebasesDownloadDefinitionStages.WithKbId&text=WithKbId\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.cognitiveservices.knowledge.qnamaker.Knowledgebases.download(java.lang.String,com.microsoft.azure.cognitiveservices.knowledge.qnamaker.models.EnvironmentType,com.microsoft.azure.cognitiveservices.knowledge.qnamaker.models.DownloadOptionalParameter)"
  fullName: "com.microsoft.azure.cognitiveservices.knowledge.qnamaker.Knowledgebases.download(String kbId, EnvironmentType environment, DownloadOptionalParameter downloadOptionalParameter)"
  name: "download(String kbId, EnvironmentType environment, DownloadOptionalParameter downloadOptionalParameter)"
  nameWithType: "Knowledgebases.download(String kbId, EnvironmentType environment, DownloadOptionalParameter downloadOptionalParameter)"
  summary: "Download the knowledgebase."
  modifiers:
  - "abstract"
  parameters:
  - description: "Knowledgebase id."
    name: "kbId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Specifies whether environment is Test or Prod. Possible values include: 'Prod', 'Test'."
    name: "environment"
    type: "<xref href=\"com.microsoft.azure.cognitiveservices.knowledge.qnamaker.models.EnvironmentType?alt=com.microsoft.azure.cognitiveservices.knowledge.qnamaker.models.EnvironmentType&text=EnvironmentType\" data-throw-if-not-resolved=\"False\" />"
  - description: "the object representing the optional parameters to be set before calling this API"
    name: "downloadOptionalParameter"
    type: "<xref href=\"com.microsoft.azure.cognitiveservices.knowledge.qnamaker.models.DownloadOptionalParameter?alt=com.microsoft.azure.cognitiveservices.knowledge.qnamaker.models.DownloadOptionalParameter&text=DownloadOptionalParameter\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract QnADocumentsDTO download(String kbId, EnvironmentType environment, DownloadOptionalParameter downloadOptionalParameter)"
  desc: "Download the knowledgebase."
  returns:
    description: "the QnADocumentsDTO object if successful."
    type: "<xref href=\"com.microsoft.azure.cognitiveservices.knowledge.qnamaker.models.QnADocumentsDTO?alt=com.microsoft.azure.cognitiveservices.knowledge.qnamaker.models.QnADocumentsDTO&text=QnADocumentsDTO\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.cognitiveservices.knowledge.qnamaker.Knowledgebases.downloadAsync(java.lang.String,com.microsoft.azure.cognitiveservices.knowledge.qnamaker.models.EnvironmentType,com.microsoft.azure.cognitiveservices.knowledge.qnamaker.models.DownloadOptionalParameter)"
  fullName: "com.microsoft.azure.cognitiveservices.knowledge.qnamaker.Knowledgebases.downloadAsync(String kbId, EnvironmentType environment, DownloadOptionalParameter downloadOptionalParameter)"
  name: "downloadAsync(String kbId, EnvironmentType environment, DownloadOptionalParameter downloadOptionalParameter)"
  nameWithType: "Knowledgebases.downloadAsync(String kbId, EnvironmentType environment, DownloadOptionalParameter downloadOptionalParameter)"
  summary: "Download the knowledgebase."
  modifiers:
  - "abstract"
  parameters:
  - description: "Knowledgebase id."
    name: "kbId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Specifies whether environment is Test or Prod. Possible values include: 'Prod', 'Test'."
    name: "environment"
    type: "<xref href=\"com.microsoft.azure.cognitiveservices.knowledge.qnamaker.models.EnvironmentType?alt=com.microsoft.azure.cognitiveservices.knowledge.qnamaker.models.EnvironmentType&text=EnvironmentType\" data-throw-if-not-resolved=\"False\" />"
  - description: "the object representing the optional parameters to be set before calling this API"
    name: "downloadOptionalParameter"
    type: "<xref href=\"com.microsoft.azure.cognitiveservices.knowledge.qnamaker.models.DownloadOptionalParameter?alt=com.microsoft.azure.cognitiveservices.knowledge.qnamaker.models.DownloadOptionalParameter&text=DownloadOptionalParameter\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract Observable<QnADocumentsDTO> downloadAsync(String kbId, EnvironmentType environment, DownloadOptionalParameter downloadOptionalParameter)"
  desc: "Download the knowledgebase."
  returns:
    description: "the observable to the QnADocumentsDTO object"
    type: "<xref href=\"rx.Observable?alt=rx.Observable&text=Observable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.cognitiveservices.knowledge.qnamaker.models.QnADocumentsDTO?alt=com.microsoft.azure.cognitiveservices.knowledge.qnamaker.models.QnADocumentsDTO&text=QnADocumentsDTO\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.cognitiveservices.knowledge.qnamaker.Knowledgebases.generateAnswer(java.lang.String,com.microsoft.azure.cognitiveservices.knowledge.qnamaker.models.QueryDTO)"
  fullName: "com.microsoft.azure.cognitiveservices.knowledge.qnamaker.Knowledgebases.generateAnswer(String kbId, QueryDTO generateAnswerPayload)"
  name: "generateAnswer(String kbId, QueryDTO generateAnswerPayload)"
  nameWithType: "Knowledgebases.generateAnswer(String kbId, QueryDTO generateAnswerPayload)"
  summary: "Generate<wbr>Answer call to query knowledgebase (QnA Maker Managed)."
  modifiers:
  - "abstract"
  parameters:
  - description: "Knowledgebase id."
    name: "kbId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Post body of the request."
    name: "generateAnswerPayload"
    type: "<xref href=\"com.microsoft.azure.cognitiveservices.knowledge.qnamaker.models.QueryDTO?alt=com.microsoft.azure.cognitiveservices.knowledge.qnamaker.models.QueryDTO&text=QueryDTO\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract QnASearchResultList generateAnswer(String kbId, QueryDTO generateAnswerPayload)"
  desc: "GenerateAnswer call to query knowledgebase (QnA Maker Managed)."
  returns:
    description: "the QnASearchResultList object if successful."
    type: "<xref href=\"com.microsoft.azure.cognitiveservices.knowledge.qnamaker.models.QnASearchResultList?alt=com.microsoft.azure.cognitiveservices.knowledge.qnamaker.models.QnASearchResultList&text=QnASearchResultList\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.cognitiveservices.knowledge.qnamaker.Knowledgebases.generateAnswerAsync(java.lang.String,com.microsoft.azure.cognitiveservices.knowledge.qnamaker.models.QueryDTO)"
  fullName: "com.microsoft.azure.cognitiveservices.knowledge.qnamaker.Knowledgebases.generateAnswerAsync(String kbId, QueryDTO generateAnswerPayload)"
  name: "generateAnswerAsync(String kbId, QueryDTO generateAnswerPayload)"
  nameWithType: "Knowledgebases.generateAnswerAsync(String kbId, QueryDTO generateAnswerPayload)"
  summary: "Generate<wbr>Answer call to query knowledgebase (QnA Maker Managed)."
  modifiers:
  - "abstract"
  parameters:
  - description: "Knowledgebase id."
    name: "kbId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Post body of the request."
    name: "generateAnswerPayload"
    type: "<xref href=\"com.microsoft.azure.cognitiveservices.knowledge.qnamaker.models.QueryDTO?alt=com.microsoft.azure.cognitiveservices.knowledge.qnamaker.models.QueryDTO&text=QueryDTO\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract Observable<QnASearchResultList> generateAnswerAsync(String kbId, QueryDTO generateAnswerPayload)"
  desc: "GenerateAnswer call to query knowledgebase (QnA Maker Managed)."
  returns:
    description: "the observable to the QnASearchResultList object"
    type: "<xref href=\"rx.Observable?alt=rx.Observable&text=Observable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.cognitiveservices.knowledge.qnamaker.models.QnASearchResultList?alt=com.microsoft.azure.cognitiveservices.knowledge.qnamaker.models.QnASearchResultList&text=QnASearchResultList\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.cognitiveservices.knowledge.qnamaker.Knowledgebases.getDetails(java.lang.String)"
  fullName: "com.microsoft.azure.cognitiveservices.knowledge.qnamaker.Knowledgebases.getDetails(String kbId)"
  name: "getDetails(String kbId)"
  nameWithType: "Knowledgebases.getDetails(String kbId)"
  summary: "Gets details of a specific knowledgebase."
  modifiers:
  - "abstract"
  parameters:
  - description: "Knowledgebase id."
    name: "kbId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract KnowledgebaseDTO getDetails(String kbId)"
  desc: "Gets details of a specific knowledgebase."
  returns:
    description: "the KnowledgebaseDTO object if successful."
    type: "<xref href=\"com.microsoft.azure.cognitiveservices.knowledge.qnamaker.models.KnowledgebaseDTO?alt=com.microsoft.azure.cognitiveservices.knowledge.qnamaker.models.KnowledgebaseDTO&text=KnowledgebaseDTO\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.cognitiveservices.knowledge.qnamaker.Knowledgebases.getDetailsAsync(java.lang.String)"
  fullName: "com.microsoft.azure.cognitiveservices.knowledge.qnamaker.Knowledgebases.getDetailsAsync(String kbId)"
  name: "getDetailsAsync(String kbId)"
  nameWithType: "Knowledgebases.getDetailsAsync(String kbId)"
  summary: "Gets details of a specific knowledgebase."
  modifiers:
  - "abstract"
  parameters:
  - description: "Knowledgebase id."
    name: "kbId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract Observable<KnowledgebaseDTO> getDetailsAsync(String kbId)"
  desc: "Gets details of a specific knowledgebase."
  returns:
    description: "the observable to the KnowledgebaseDTO object"
    type: "<xref href=\"rx.Observable?alt=rx.Observable&text=Observable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.cognitiveservices.knowledge.qnamaker.models.KnowledgebaseDTO?alt=com.microsoft.azure.cognitiveservices.knowledge.qnamaker.models.KnowledgebaseDTO&text=KnowledgebaseDTO\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.cognitiveservices.knowledge.qnamaker.Knowledgebases.listAll()"
  fullName: "com.microsoft.azure.cognitiveservices.knowledge.qnamaker.Knowledgebases.listAll()"
  name: "listAll()"
  nameWithType: "Knowledgebases.listAll()"
  summary: "Gets all knowledgebases for a user."
  modifiers:
  - "abstract"
  syntax: "public abstract KnowledgebasesDTO listAll()"
  desc: "Gets all knowledgebases for a user."
  returns:
    description: "the KnowledgebasesDTO object if successful."
    type: "<xref href=\"com.microsoft.azure.cognitiveservices.knowledge.qnamaker.models.KnowledgebasesDTO?alt=com.microsoft.azure.cognitiveservices.knowledge.qnamaker.models.KnowledgebasesDTO&text=KnowledgebasesDTO\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.cognitiveservices.knowledge.qnamaker.Knowledgebases.listAllAsync()"
  fullName: "com.microsoft.azure.cognitiveservices.knowledge.qnamaker.Knowledgebases.listAllAsync()"
  name: "listAllAsync()"
  nameWithType: "Knowledgebases.listAllAsync()"
  summary: "Gets all knowledgebases for a user."
  modifiers:
  - "abstract"
  syntax: "public abstract Observable<KnowledgebasesDTO> listAllAsync()"
  desc: "Gets all knowledgebases for a user."
  returns:
    description: "the observable to the KnowledgebasesDTO object"
    type: "<xref href=\"rx.Observable?alt=rx.Observable&text=Observable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.cognitiveservices.knowledge.qnamaker.models.KnowledgebasesDTO?alt=com.microsoft.azure.cognitiveservices.knowledge.qnamaker.models.KnowledgebasesDTO&text=KnowledgebasesDTO\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.cognitiveservices.knowledge.qnamaker.Knowledgebases.publish(java.lang.String)"
  fullName: "com.microsoft.azure.cognitiveservices.knowledge.qnamaker.Knowledgebases.publish(String kbId)"
  name: "publish(String kbId)"
  nameWithType: "Knowledgebases.publish(String kbId)"
  summary: "Publishes all changes in test index of a knowledgebase to its prod index."
  modifiers:
  - "abstract"
  parameters:
  - description: "Knowledgebase id."
    name: "kbId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract void publish(String kbId)"
  desc: "Publishes all changes in test index of a knowledgebase to its prod index."
- uid: "com.microsoft.azure.cognitiveservices.knowledge.qnamaker.Knowledgebases.publishAsync(java.lang.String)"
  fullName: "com.microsoft.azure.cognitiveservices.knowledge.qnamaker.Knowledgebases.publishAsync(String kbId)"
  name: "publishAsync(String kbId)"
  nameWithType: "Knowledgebases.publishAsync(String kbId)"
  summary: "Publishes all changes in test index of a knowledgebase to its prod index."
  modifiers:
  - "abstract"
  parameters:
  - description: "Knowledgebase id."
    name: "kbId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract Observable<Void> publishAsync(String kbId)"
  desc: "Publishes all changes in test index of a knowledgebase to its prod index."
  returns:
    description: "a representation of the deferred computation of this call if successful."
    type: "<xref href=\"rx.Observable?alt=rx.Observable&text=Observable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.cognitiveservices.knowledge.qnamaker.Knowledgebases.replace(java.lang.String,java.util.List<com.microsoft.azure.cognitiveservices.knowledge.qnamaker.models.QnADTO>)"
  fullName: "com.microsoft.azure.cognitiveservices.knowledge.qnamaker.Knowledgebases.replace(String kbId, List<QnADTO> qnAList)"
  name: "replace(String kbId, List<QnADTO> qnAList)"
  nameWithType: "Knowledgebases.replace(String kbId, List<QnADTO> qnAList)"
  summary: "Replace knowledgebase contents."
  modifiers:
  - "abstract"
  parameters:
  - description: "Knowledgebase id."
    name: "kbId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "List of Q-A (QnADTO) to be added to the knowledgebase. Q-A Ids are assigned by the service and\n  should be omitted."
    name: "qnAList"
    type: "<xref href=\"java.util.List?alt=java.util.List&text=List\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.cognitiveservices.knowledge.qnamaker.models.QnADTO?alt=com.microsoft.azure.cognitiveservices.knowledge.qnamaker.models.QnADTO&text=QnADTO\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public abstract void replace(String kbId, List<QnADTO> qnAList)"
  desc: "Replace knowledgebase contents."
- uid: "com.microsoft.azure.cognitiveservices.knowledge.qnamaker.Knowledgebases.replaceAsync(java.lang.String,java.util.List<com.microsoft.azure.cognitiveservices.knowledge.qnamaker.models.QnADTO>)"
  fullName: "com.microsoft.azure.cognitiveservices.knowledge.qnamaker.Knowledgebases.replaceAsync(String kbId, List<QnADTO> qnAList)"
  name: "replaceAsync(String kbId, List<QnADTO> qnAList)"
  nameWithType: "Knowledgebases.replaceAsync(String kbId, List<QnADTO> qnAList)"
  summary: "Replace knowledgebase contents."
  modifiers:
  - "abstract"
  parameters:
  - description: "Knowledgebase id."
    name: "kbId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "List of Q-A (QnADTO) to be added to the knowledgebase. Q-A Ids are assigned by the service and\n  should be omitted."
    name: "qnAList"
    type: "<xref href=\"java.util.List?alt=java.util.List&text=List\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.cognitiveservices.knowledge.qnamaker.models.QnADTO?alt=com.microsoft.azure.cognitiveservices.knowledge.qnamaker.models.QnADTO&text=QnADTO\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public abstract Observable<Void> replaceAsync(String kbId, List<QnADTO> qnAList)"
  desc: "Replace knowledgebase contents."
  returns:
    description: "a representation of the deferred computation of this call if successful."
    type: "<xref href=\"rx.Observable?alt=rx.Observable&text=Observable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.cognitiveservices.knowledge.qnamaker.Knowledgebases.train()"
  fullName: "com.microsoft.azure.cognitiveservices.knowledge.qnamaker.Knowledgebases.train()"
  name: "train()"
  nameWithType: "Knowledgebases.train()"
  summary: "Train call to add suggestions to knowledgebase (Qn<wbr>AMaker Managed)."
  modifiers:
  - "abstract"
  syntax: "public abstract Knowledgebases.KnowledgebasesTrainDefinitionStages.WithKbId train()"
  desc: "Train call to add suggestions to knowledgebase (QnAMaker Managed)."
  returns:
    description: "the first stage of the train call"
    type: "<xref href=\"com.microsoft.azure.cognitiveservices.knowledge.qnamaker.Knowledgebases.KnowledgebasesTrainDefinitionStages.WithKbId?alt=com.microsoft.azure.cognitiveservices.knowledge.qnamaker.Knowledgebases.KnowledgebasesTrainDefinitionStages.WithKbId&text=WithKbId\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.cognitiveservices.knowledge.qnamaker.Knowledgebases.train(java.lang.String,com.microsoft.azure.cognitiveservices.knowledge.qnamaker.models.TrainOptionalParameter)"
  fullName: "com.microsoft.azure.cognitiveservices.knowledge.qnamaker.Knowledgebases.train(String kbId, TrainOptionalParameter trainOptionalParameter)"
  name: "train(String kbId, TrainOptionalParameter trainOptionalParameter)"
  nameWithType: "Knowledgebases.train(String kbId, TrainOptionalParameter trainOptionalParameter)"
  summary: "Train call to add suggestions to knowledgebase (Qn<wbr>AMaker Managed)."
  modifiers:
  - "abstract"
  parameters:
  - description: "Knowledgebase id."
    name: "kbId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "the object representing the optional parameters to be set before calling this API"
    name: "trainOptionalParameter"
    type: "<xref href=\"com.microsoft.azure.cognitiveservices.knowledge.qnamaker.models.TrainOptionalParameter?alt=com.microsoft.azure.cognitiveservices.knowledge.qnamaker.models.TrainOptionalParameter&text=TrainOptionalParameter\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract void train(String kbId, TrainOptionalParameter trainOptionalParameter)"
  desc: "Train call to add suggestions to knowledgebase (QnAMaker Managed)."
- uid: "com.microsoft.azure.cognitiveservices.knowledge.qnamaker.Knowledgebases.trainAsync(java.lang.String,com.microsoft.azure.cognitiveservices.knowledge.qnamaker.models.TrainOptionalParameter)"
  fullName: "com.microsoft.azure.cognitiveservices.knowledge.qnamaker.Knowledgebases.trainAsync(String kbId, TrainOptionalParameter trainOptionalParameter)"
  name: "trainAsync(String kbId, TrainOptionalParameter trainOptionalParameter)"
  nameWithType: "Knowledgebases.trainAsync(String kbId, TrainOptionalParameter trainOptionalParameter)"
  summary: "Train call to add suggestions to knowledgebase (Qn<wbr>AMaker Managed)."
  modifiers:
  - "abstract"
  parameters:
  - description: "Knowledgebase id."
    name: "kbId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "the object representing the optional parameters to be set before calling this API"
    name: "trainOptionalParameter"
    type: "<xref href=\"com.microsoft.azure.cognitiveservices.knowledge.qnamaker.models.TrainOptionalParameter?alt=com.microsoft.azure.cognitiveservices.knowledge.qnamaker.models.TrainOptionalParameter&text=TrainOptionalParameter\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract Observable<Void> trainAsync(String kbId, TrainOptionalParameter trainOptionalParameter)"
  desc: "Train call to add suggestions to knowledgebase (QnAMaker Managed)."
  returns:
    description: "a representation of the deferred computation of this call if successful."
    type: "<xref href=\"rx.Observable?alt=rx.Observable&text=Observable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.cognitiveservices.knowledge.qnamaker.Knowledgebases.update(java.lang.String,com.microsoft.azure.cognitiveservices.knowledge.qnamaker.models.UpdateKbOperationDTO)"
  fullName: "com.microsoft.azure.cognitiveservices.knowledge.qnamaker.Knowledgebases.update(String kbId, UpdateKbOperationDTO updateKb)"
  name: "update(String kbId, UpdateKbOperationDTO updateKb)"
  nameWithType: "Knowledgebases.update(String kbId, UpdateKbOperationDTO updateKb)"
  summary: "Asynchronous operation to modify a knowledgebase."
  modifiers:
  - "abstract"
  parameters:
  - description: "Knowledgebase id."
    name: "kbId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Post body of the request."
    name: "updateKb"
    type: "<xref href=\"com.microsoft.azure.cognitiveservices.knowledge.qnamaker.models.UpdateKbOperationDTO?alt=com.microsoft.azure.cognitiveservices.knowledge.qnamaker.models.UpdateKbOperationDTO&text=UpdateKbOperationDTO\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract Operation update(String kbId, UpdateKbOperationDTO updateKb)"
  desc: "Asynchronous operation to modify a knowledgebase."
  returns:
    description: "the Operation object if successful."
    type: "<xref href=\"com.microsoft.azure.cognitiveservices.knowledge.qnamaker.models.Operation?alt=com.microsoft.azure.cognitiveservices.knowledge.qnamaker.models.Operation&text=Operation\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.cognitiveservices.knowledge.qnamaker.Knowledgebases.updateAsync(java.lang.String,com.microsoft.azure.cognitiveservices.knowledge.qnamaker.models.UpdateKbOperationDTO)"
  fullName: "com.microsoft.azure.cognitiveservices.knowledge.qnamaker.Knowledgebases.updateAsync(String kbId, UpdateKbOperationDTO updateKb)"
  name: "updateAsync(String kbId, UpdateKbOperationDTO updateKb)"
  nameWithType: "Knowledgebases.updateAsync(String kbId, UpdateKbOperationDTO updateKb)"
  summary: "Asynchronous operation to modify a knowledgebase."
  modifiers:
  - "abstract"
  parameters:
  - description: "Knowledgebase id."
    name: "kbId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Post body of the request."
    name: "updateKb"
    type: "<xref href=\"com.microsoft.azure.cognitiveservices.knowledge.qnamaker.models.UpdateKbOperationDTO?alt=com.microsoft.azure.cognitiveservices.knowledge.qnamaker.models.UpdateKbOperationDTO&text=UpdateKbOperationDTO\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract Observable<Operation> updateAsync(String kbId, UpdateKbOperationDTO updateKb)"
  desc: "Asynchronous operation to modify a knowledgebase."
  returns:
    description: "the observable to the Operation object"
    type: "<xref href=\"rx.Observable?alt=rx.Observable&text=Observable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.cognitiveservices.knowledge.qnamaker.models.Operation?alt=com.microsoft.azure.cognitiveservices.knowledge.qnamaker.models.Operation&text=Operation\" data-throw-if-not-resolved=\"False\" />&gt;"
type: "interface"
desc: "An instance of this class provides access to all the operations defined in Knowledgebases."
metadata: {}
package: "com.microsoft.azure.cognitiveservices.knowledge.qnamaker"
artifact: com.microsoft.azure.cognitiveservices:azure-cognitiveservices-qnamaker:1.0.0-beta.2
