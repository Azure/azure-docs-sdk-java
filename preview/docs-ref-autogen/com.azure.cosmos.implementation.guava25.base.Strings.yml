### YamlMime:ManagedReference
items:
- uid: com.azure.cosmos.implementation.guava25.base.Strings
  id: Strings
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.base
  children:
  - com.azure.cosmos.implementation.guava25.base.Strings.commonPrefix(java.lang.CharSequence,java.lang.CharSequence)
  - com.azure.cosmos.implementation.guava25.base.Strings.commonSuffix(java.lang.CharSequence,java.lang.CharSequence)
  - com.azure.cosmos.implementation.guava25.base.Strings.emptyToNull(java.lang.String)
  - com.azure.cosmos.implementation.guava25.base.Strings.isNullOrEmpty(java.lang.String)
  - com.azure.cosmos.implementation.guava25.base.Strings.nullToEmpty(java.lang.String)
  - com.azure.cosmos.implementation.guava25.base.Strings.padEnd(java.lang.String,int,char)
  - com.azure.cosmos.implementation.guava25.base.Strings.padStart(java.lang.String,int,char)
  - com.azure.cosmos.implementation.guava25.base.Strings.repeat(java.lang.String,int)
  langs:
  - java
  name: Strings
  nameWithType: Strings
  fullName: com.azure.cosmos.implementation.guava25.base.Strings
  type: Class
  package: com.azure.cosmos.implementation.guava25.base
  summary: Static utility methods pertaining to `String` or `CharSequence` instances.
  syntax:
    content: public final class Strings
  inheritance:
  - java.lang.Object
  inheritedMembers:
  - java.lang.Object.clone()
  - java.lang.Object.equals(java.lang.Object)
  - java.lang.Object.finalize()
  - java.lang.Object.getClass()
  - java.lang.Object.hashCode()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.toString()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
- uid: com.azure.cosmos.implementation.guava25.base.Strings.Strings()
  id: Strings()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.base.Strings
  langs:
  - java
  name: Strings()
  nameWithType: Strings.Strings()
  fullName: com.azure.cosmos.implementation.guava25.base.Strings.Strings()
  overload: com.azure.cosmos.implementation.guava25.base.Strings.Strings*
  type: Constructor
  package: com.azure.cosmos.implementation.guava25.base
  syntax:
    content: private Strings()
- uid: com.azure.cosmos.implementation.guava25.base.Strings.commonPrefix(java.lang.CharSequence,java.lang.CharSequence)
  id: commonPrefix(java.lang.CharSequence,java.lang.CharSequence)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.base.Strings
  langs:
  - java
  name: commonPrefix(CharSequence a, CharSequence b)
  nameWithType: Strings.commonPrefix(CharSequence a, CharSequence b)
  fullName: com.azure.cosmos.implementation.guava25.base.Strings.commonPrefix(CharSequence a, CharSequence b)
  overload: com.azure.cosmos.implementation.guava25.base.Strings.commonPrefix*
  type: Method
  package: com.azure.cosmos.implementation.guava25.base
  summary: Returns the longest string `prefix` such that `a.toString().startsWith(prefix) && b.toString().startsWith(prefix)`, taking care not to split surrogate pairs. If `a` and `b` have no common prefix, returns the empty string.
  syntax:
    content: public static String commonPrefix(CharSequence a, CharSequence b)
    parameters:
    - id: a
      type: java.lang.CharSequence
    - id: b
      type: java.lang.CharSequence
    return:
      type: java.lang.String
- uid: com.azure.cosmos.implementation.guava25.base.Strings.commonSuffix(java.lang.CharSequence,java.lang.CharSequence)
  id: commonSuffix(java.lang.CharSequence,java.lang.CharSequence)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.base.Strings
  langs:
  - java
  name: commonSuffix(CharSequence a, CharSequence b)
  nameWithType: Strings.commonSuffix(CharSequence a, CharSequence b)
  fullName: com.azure.cosmos.implementation.guava25.base.Strings.commonSuffix(CharSequence a, CharSequence b)
  overload: com.azure.cosmos.implementation.guava25.base.Strings.commonSuffix*
  type: Method
  package: com.azure.cosmos.implementation.guava25.base
  summary: Returns the longest string `suffix` such that `a.toString().endsWith(suffix) && b.toString().endsWith(suffix)`, taking care not to split surrogate pairs. If `a` and `b` have no common suffix, returns the empty string.
  syntax:
    content: public static String commonSuffix(CharSequence a, CharSequence b)
    parameters:
    - id: a
      type: java.lang.CharSequence
    - id: b
      type: java.lang.CharSequence
    return:
      type: java.lang.String
- uid: com.azure.cosmos.implementation.guava25.base.Strings.emptyToNull(java.lang.String)
  id: emptyToNull(java.lang.String)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.base.Strings
  langs:
  - java
  name: emptyToNull(String string)
  nameWithType: Strings.emptyToNull(String string)
  fullName: com.azure.cosmos.implementation.guava25.base.Strings.emptyToNull(String string)
  overload: com.azure.cosmos.implementation.guava25.base.Strings.emptyToNull*
  type: Method
  package: com.azure.cosmos.implementation.guava25.base
  summary: Returns the given string if it is nonempty; `null` otherwise.
  syntax:
    content: public static String emptyToNull(String string)
    parameters:
    - id: string
      type: java.lang.String
      description: the string to test and possibly return
    return:
      type: java.lang.String
      description: <code>string</code> itself if it is nonempty; <code>null</code> if it is empty or null
- uid: com.azure.cosmos.implementation.guava25.base.Strings.isNullOrEmpty(java.lang.String)
  id: isNullOrEmpty(java.lang.String)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.base.Strings
  langs:
  - java
  name: isNullOrEmpty(String string)
  nameWithType: Strings.isNullOrEmpty(String string)
  fullName: com.azure.cosmos.implementation.guava25.base.Strings.isNullOrEmpty(String string)
  overload: com.azure.cosmos.implementation.guava25.base.Strings.isNullOrEmpty*
  type: Method
  package: com.azure.cosmos.implementation.guava25.base
  summary: >-
    Returns `true` if the given string is null or is the empty string.


    Consider normalizing your string references with <xref uid="com.azure.cosmos.implementation.guava25.base.Strings.nullToEmpty*" data-throw-if-not-resolved="false">#nullToEmpty</xref>. If you do, you can use <xref uid="java.lang.String.isEmpty*" data-throw-if-not-resolved="false">String#isEmpty()</xref> instead of this method, and you won't need special null-safe forms of methods like <xref uid="java.lang.String.toUpperCase" data-throw-if-not-resolved="false">String#toUpperCase</xref> either. Or, if you'd like to normalize "in the other direction," converting empty strings to `null`, you can use <xref uid="com.azure.cosmos.implementation.guava25.base.Strings.emptyToNull*" data-throw-if-not-resolved="false">#emptyToNull</xref>.
  syntax:
    content: public static boolean isNullOrEmpty(String string)
    parameters:
    - id: string
      type: java.lang.String
      description: a string reference to check
    return:
      type: boolean
      description: <code>true</code> if the string is null or is the empty string
- uid: com.azure.cosmos.implementation.guava25.base.Strings.nullToEmpty(java.lang.String)
  id: nullToEmpty(java.lang.String)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.base.Strings
  langs:
  - java
  name: nullToEmpty(String string)
  nameWithType: Strings.nullToEmpty(String string)
  fullName: com.azure.cosmos.implementation.guava25.base.Strings.nullToEmpty(String string)
  overload: com.azure.cosmos.implementation.guava25.base.Strings.nullToEmpty*
  type: Method
  package: com.azure.cosmos.implementation.guava25.base
  summary: Returns the given string if it is non-null; the empty string otherwise.
  syntax:
    content: public static String nullToEmpty(String string)
    parameters:
    - id: string
      type: java.lang.String
      description: the string to test and possibly return
    return:
      type: java.lang.String
      description: <code>string</code> itself if it is non-null; <code>""</code> if it is null
- uid: com.azure.cosmos.implementation.guava25.base.Strings.padEnd(java.lang.String,int,char)
  id: padEnd(java.lang.String,int,char)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.base.Strings
  langs:
  - java
  name: padEnd(String string, int minLength, char padChar)
  nameWithType: Strings.padEnd(String string, int minLength, char padChar)
  fullName: com.azure.cosmos.implementation.guava25.base.Strings.padEnd(String string, int minLength, char padChar)
  overload: com.azure.cosmos.implementation.guava25.base.Strings.padEnd*
  type: Method
  package: com.azure.cosmos.implementation.guava25.base
  summary: >-
    Returns a string, of length at least `minLength`, consisting of `string` appended with as many copies of `padChar` as are necessary to reach that length. For example,

     *  `padEnd("4.", 5, '0')` returns `"4.000"`
     *  `padEnd("2010", 3, '!')` returns `"2010"`

    See <xref uid="" data-throw-if-not-resolved="false">java.util.Formatter</xref> for a richer set of formatting capabilities.
  syntax:
    content: public static String padEnd(String string, int minLength, char padChar)
    parameters:
    - id: string
      type: java.lang.String
      description: the string which should appear at the beginning of the result
    - id: minLength
      type: int
      description: >-
        the minimum length the resulting string must have. Can be zero or negative, in
             which case the input string is always returned.
    - id: padChar
      type: char
      description: >-
        the character to append to the end of the result until the minimum length is
             reached
    return:
      type: java.lang.String
      description: the padded string
- uid: com.azure.cosmos.implementation.guava25.base.Strings.padStart(java.lang.String,int,char)
  id: padStart(java.lang.String,int,char)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.base.Strings
  langs:
  - java
  name: padStart(String string, int minLength, char padChar)
  nameWithType: Strings.padStart(String string, int minLength, char padChar)
  fullName: com.azure.cosmos.implementation.guava25.base.Strings.padStart(String string, int minLength, char padChar)
  overload: com.azure.cosmos.implementation.guava25.base.Strings.padStart*
  type: Method
  package: com.azure.cosmos.implementation.guava25.base
  summary: >-
    Returns a string, of length at least `minLength`, consisting of `string` prepended with as many copies of `padChar` as are necessary to reach that length. For example,

     *  `padStart("7", 3, '0')` returns `"007"`
     *  `padStart("2010", 3, '0')` returns `"2010"`

    See <xref uid="" data-throw-if-not-resolved="false">java.util.Formatter</xref> for a richer set of formatting capabilities.
  syntax:
    content: public static String padStart(String string, int minLength, char padChar)
    parameters:
    - id: string
      type: java.lang.String
      description: the string which should appear at the end of the result
    - id: minLength
      type: int
      description: >-
        the minimum length the resulting string must have. Can be zero or negative, in
             which case the input string is always returned.
    - id: padChar
      type: char
      description: >-
        the character to insert at the beginning of the result until the minimum length
             is reached
    return:
      type: java.lang.String
      description: the padded string
- uid: com.azure.cosmos.implementation.guava25.base.Strings.repeat(java.lang.String,int)
  id: repeat(java.lang.String,int)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.base.Strings
  langs:
  - java
  name: repeat(String string, int count)
  nameWithType: Strings.repeat(String string, int count)
  fullName: com.azure.cosmos.implementation.guava25.base.Strings.repeat(String string, int count)
  overload: com.azure.cosmos.implementation.guava25.base.Strings.repeat*
  type: Method
  package: com.azure.cosmos.implementation.guava25.base
  summary: Returns a string consisting of a specific number of concatenated copies of an input string. For example, `repeat("hey", 3)` returns the string `"heyheyhey"`.
  syntax:
    content: public static String repeat(String string, int count)
    parameters:
    - id: string
      type: java.lang.String
      description: any non-null string
    - id: count
      type: int
      description: the number of times to repeat it; a nonnegative integer
    return:
      type: java.lang.String
      description: >-
        a string containing <code>string</code> repeated <code>count</code> times (the empty string if
             <code>count</code> is zero)
references:
- uid: com.azure.cosmos.implementation.guava25.base.Strings.Strings*
  name: Strings
  nameWithType: Strings.Strings
  fullName: com.azure.cosmos.implementation.guava25.base.Strings.Strings
  package: com.azure.cosmos.implementation.guava25.base
- uid: java.lang.String
  spec.java:
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
- uid: com.azure.cosmos.implementation.guava25.base.Strings.nullToEmpty*
  name: nullToEmpty
  nameWithType: Strings.nullToEmpty
  fullName: com.azure.cosmos.implementation.guava25.base.Strings.nullToEmpty
  package: com.azure.cosmos.implementation.guava25.base
- uid: com.azure.cosmos.implementation.guava25.base.Strings.emptyToNull*
  name: emptyToNull
  nameWithType: Strings.emptyToNull
  fullName: com.azure.cosmos.implementation.guava25.base.Strings.emptyToNull
  package: com.azure.cosmos.implementation.guava25.base
- uid: boolean
  spec.java:
  - uid: boolean
    name: boolean
    fullName: boolean
- uid: com.azure.cosmos.implementation.guava25.base.Strings.isNullOrEmpty*
  name: isNullOrEmpty
  nameWithType: Strings.isNullOrEmpty
  fullName: com.azure.cosmos.implementation.guava25.base.Strings.isNullOrEmpty
  package: com.azure.cosmos.implementation.guava25.base
- uid: int
  spec.java:
  - uid: int
    name: int
    fullName: int
- uid: char
  spec.java:
  - uid: char
    name: char
    fullName: char
- uid: com.azure.cosmos.implementation.guava25.base.Strings.padStart*
  name: padStart
  nameWithType: Strings.padStart
  fullName: com.azure.cosmos.implementation.guava25.base.Strings.padStart
  package: com.azure.cosmos.implementation.guava25.base
- uid: com.azure.cosmos.implementation.guava25.base.Strings.padEnd*
  name: padEnd
  nameWithType: Strings.padEnd
  fullName: com.azure.cosmos.implementation.guava25.base.Strings.padEnd
  package: com.azure.cosmos.implementation.guava25.base
- uid: com.azure.cosmos.implementation.guava25.base.Strings.repeat*
  name: repeat
  nameWithType: Strings.repeat
  fullName: com.azure.cosmos.implementation.guava25.base.Strings.repeat
  package: com.azure.cosmos.implementation.guava25.base
- uid: java.lang.CharSequence
  spec.java:
  - uid: java.lang.CharSequence
    name: CharSequence
    fullName: java.lang.CharSequence
- uid: com.azure.cosmos.implementation.guava25.base.Strings.commonPrefix*
  name: commonPrefix
  nameWithType: Strings.commonPrefix
  fullName: com.azure.cosmos.implementation.guava25.base.Strings.commonPrefix
  package: com.azure.cosmos.implementation.guava25.base
- uid: com.azure.cosmos.implementation.guava25.base.Strings.commonSuffix*
  name: commonSuffix
  nameWithType: Strings.commonSuffix
  fullName: com.azure.cosmos.implementation.guava25.base.Strings.commonSuffix
  package: com.azure.cosmos.implementation.guava25.base
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: java.lang.Object.finalize()
  name: Object.finalize()
  nameWithType: Object.finalize()
  fullName: java.lang.Object.finalize()
- uid: java.lang.Object.clone()
  name: Object.clone()
  nameWithType: Object.clone()
  fullName: java.lang.Object.clone()
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: java.lang.Object.equals(java.lang.Object)
  name: Object.equals(Object)
  nameWithType: Object.equals(Object)
  fullName: java.lang.Object.equals(java.lang.Object)
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.lang.Object.hashCode()
  name: Object.hashCode()
  nameWithType: Object.hashCode()
  fullName: java.lang.Object.hashCode()
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: java.lang.Object.toString()
  name: Object.toString()
  nameWithType: Object.toString()
  fullName: java.lang.Object.toString()
