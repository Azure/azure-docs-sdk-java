### YamlMime:JavaType
uid: "com.microsoft.azure.sdk.iot.device.ClientOptions"
fullName: "com.microsoft.azure.sdk.iot.device.ClientOptions"
name: "ClientOptions"
nameWithType: "ClientOptions"
summary: "Options that allow configuration of the device client instance during initialization."
inheritances:
- "<xref href=\"java.lang.Object?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
inheritedClassMethods:
- classRef: "<xref href=\"java.lang.Object?alt=java.lang.Object&text=Object\" data-throw-if-not-resolved=\"False\" />"
  methodsRef:
  - "<xref href=\"java.lang.Object.clone()?alt=java.lang.Object.clone&text=clone\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"java.lang.Object.equals(java.lang.Object)?alt=java.lang.Object.equals&text=equals\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"java.lang.Object.finalize()?alt=java.lang.Object.finalize&text=finalize\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"java.lang.Object.getClass()?alt=java.lang.Object.getClass&text=getClass\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"java.lang.Object.hashCode()?alt=java.lang.Object.hashCode&text=hashCode\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"java.lang.Object.notify()?alt=java.lang.Object.notify&text=notify\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"java.lang.Object.notifyAll()?alt=java.lang.Object.notifyAll&text=notifyAll\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"java.lang.Object.toString()?alt=java.lang.Object.toString&text=toString\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"java.lang.Object.wait()?alt=java.lang.Object.wait&text=wait\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"java.lang.Object.wait(long)?alt=java.lang.Object.wait&text=wait\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"java.lang.Object.wait(long,int)?alt=java.lang.Object.wait&text=wait\" data-throw-if-not-resolved=\"False\" />"
syntax: "public final class **ClientOptions**"
constructors:
- uid: "com.microsoft.azure.sdk.iot.device.ClientOptions.ClientOptions()"
  fullName: "com.microsoft.azure.sdk.iot.device.ClientOptions.ClientOptions()"
  name: "ClientOptions()"
  nameWithType: "ClientOptions.ClientOptions()"
  syntax: "public ClientOptions()"
fields:
- uid: "com.microsoft.azure.sdk.iot.device.ClientOptions.ModelId"
  fullName: "com.microsoft.azure.sdk.iot.device.ClientOptions.ModelId"
  name: "ModelId"
  nameWithType: "ClientOptions.ModelId"
  summary: "The Digital Twin Model Id associated with the device and module identity."
  field:
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public String ModelId"
  desc: "The Digital Twin Model Id associated with the device and module identity. Non plug and play users should not set this value This feature is currently supported only over MQTT"
- uid: "com.microsoft.azure.sdk.iot.device.ClientOptions.sslContext"
  fullName: "com.microsoft.azure.sdk.iot.device.ClientOptions.sslContext"
  name: "sslContext"
  nameWithType: "ClientOptions.sslContext"
  summary: "The ssl context that will be used during authentication."
  field:
    type: "<xref href=\"javax.net.ssl.SSLContext?alt=javax.net.ssl.SSLContext&text=SSLContext\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public SSLContext sslContext"
  desc: "The ssl context that will be used during authentication. If the provided connection string does not contain SAS based credentials, then the sslContext will be used for x509 authentication. If the provided connection string does contain SAS based credentials, the sslContext will still be used during SSL negotiation. By default, this SDK will create an SSLContext instance for you that trusts the IoT Hub public certificates."
type: "class"
desc: "Options that allow configuration of the device client instance during initialization."
metadata: {}
package: "com.microsoft.azure.sdk.iot.device"
artifact: com.microsoft.azure.sdk.iot:iot-device-client-preview:1.2.0
