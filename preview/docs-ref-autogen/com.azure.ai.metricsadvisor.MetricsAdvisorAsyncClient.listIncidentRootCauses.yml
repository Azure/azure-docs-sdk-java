### YamlMime:JavaMember
uid: "com.azure.ai.metricsadvisor.MetricsAdvisorAsyncClient.listIncidentRootCauses*"
fullName: "com.azure.ai.metricsadvisor.MetricsAdvisorAsyncClient.listIncidentRootCauses"
name: "listIncidentRootCauses"
nameWithType: "MetricsAdvisorAsyncClient.listIncidentRootCauses"
members:
- uid: "com.azure.ai.metricsadvisor.MetricsAdvisorAsyncClient.listIncidentRootCauses(com.azure.ai.metricsadvisor.models.AnomalyIncident)"
  fullName: "com.azure.ai.metricsadvisor.MetricsAdvisorAsyncClient.listIncidentRootCauses(AnomalyIncident anomalyIncident)"
  name: "listIncidentRootCauses(AnomalyIncident anomalyIncident)"
  nameWithType: "MetricsAdvisorAsyncClient.listIncidentRootCauses(AnomalyIncident anomalyIncident)"
  summary: "List the root causes for an anomalyIncident.\n\n**Code sample**\n\n\\{@codesnippet com.azure.ai.metricsadvisor.MetricsAdvisorAsyncClient.listIncidentRootCauses\\#AnomalyIncident\\}"
  parameters:
  - description: "the anomalyIncident for which you want to query root causes for."
    name: "anomalyIncident"
    type: "<xref href=\"com.azure.ai.metricsadvisor.models.AnomalyIncident?alt=com.azure.ai.metricsadvisor.models.AnomalyIncident&text=AnomalyIncident\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PagedFlux<IncidentRootCause> listIncidentRootCauses(AnomalyIncident anomalyIncident)"
  returns:
    description: "the list of root causes for that anomalyIncident."
    type: "<xref href=\"com.azure.core.http.rest.PagedFlux?alt=com.azure.core.http.rest.PagedFlux&text=PagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.ai.metricsadvisor.models.IncidentRootCause?alt=com.azure.ai.metricsadvisor.models.IncidentRootCause&text=IncidentRootCause\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.ai.metricsadvisor.MetricsAdvisorAsyncClient.listIncidentRootCauses(java.lang.String,java.lang.String)"
  fullName: "com.azure.ai.metricsadvisor.MetricsAdvisorAsyncClient.listIncidentRootCauses(String detectionConfigurationId, String incidentId)"
  name: "listIncidentRootCauses(String detectionConfigurationId, String incidentId)"
  nameWithType: "MetricsAdvisorAsyncClient.listIncidentRootCauses(String detectionConfigurationId, String incidentId)"
  summary: "List the root causes for an incident.\n\n**Code sample**\n\n\\{@codesnippet com.azure.ai.metricsadvisor.MetricsAdvisorAsyncClient.listIncidentRootCauses\\#String-String\\}"
  parameters:
  - description: "anomaly detection configuration unique id."
    name: "detectionConfigurationId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "the incident for which you want to query root causes for."
    name: "incidentId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PagedFlux<IncidentRootCause> listIncidentRootCauses(String detectionConfigurationId, String incidentId)"
  returns:
    description: "the list of root causes for that incident."
    type: "<xref href=\"com.azure.core.http.rest.PagedFlux?alt=com.azure.core.http.rest.PagedFlux&text=PagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.ai.metricsadvisor.models.IncidentRootCause?alt=com.azure.ai.metricsadvisor.models.IncidentRootCause&text=IncidentRootCause\" data-throw-if-not-resolved=\"False\" />&gt;"
type: "method"
metadata: {}
package: "com.azure.ai.metricsadvisor"
artifact: com.azure:azure-ai-metricsadvisor:1.0.0-beta.4
