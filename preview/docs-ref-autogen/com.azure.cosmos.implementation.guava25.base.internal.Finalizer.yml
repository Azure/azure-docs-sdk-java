### YamlMime:ManagedReference
items:
- uid: com.azure.cosmos.implementation.guava25.base.internal.Finalizer
  id: Finalizer
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.base.internal
  children:
  - com.azure.cosmos.implementation.guava25.base.internal.Finalizer.run()
  - com.azure.cosmos.implementation.guava25.base.internal.Finalizer.startFinalizer(java.lang.Class<?>,java.lang.ref.ReferenceQueue<java.lang.Object>,java.lang.ref.PhantomReference<java.lang.Object>)
  langs:
  - java
  name: Finalizer
  nameWithType: Finalizer
  fullName: com.azure.cosmos.implementation.guava25.base.internal.Finalizer
  type: Class
  package: com.azure.cosmos.implementation.guava25.base.internal
  summary: >-
    Thread that finalizes referents. All references should implement `com.google.common.base.FinalizableReference`.


    While this class is public, we consider it to be \*internal\* and not part of our published API. It is public so we can access it reflectively across class loaders in secure environments.


    This class can't depend on other Guava code. If we were to load this class in the same class loader as the rest of Guava, this thread would keep an indirect strong reference to the class loader and prevent it from being garbage collected. This poses a problem for environments where you want to throw away the class loader. For example, dynamically reloading a web application or unloading an OSGi bundle.


    `com.google.common.base.FinalizableReferenceQueue` loads this class in its own class loader. That way, this class doesn't prevent the main class loader from getting garbage collected, and this class can detect when the main class loader has been garbage collected and stop itself.
  syntax:
    content: public class Finalizer implements Runnable
  inheritance:
  - java.lang.Object
  implements:
  - java.lang.Runnable
  inheritedMembers:
  - java.lang.Object.clone()
  - java.lang.Object.equals(java.lang.Object)
  - java.lang.Object.finalize()
  - java.lang.Object.getClass()
  - java.lang.Object.hashCode()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.toString()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
- uid: com.azure.cosmos.implementation.guava25.base.internal.Finalizer.Finalizer(java.lang.Class<?>,java.lang.ref.ReferenceQueue<java.lang.Object>,java.lang.ref.PhantomReference<java.lang.Object>)
  id: Finalizer(java.lang.Class<?>,java.lang.ref.ReferenceQueue<java.lang.Object>,java.lang.ref.PhantomReference<java.lang.Object>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.base.internal.Finalizer
  langs:
  - java
  name: Finalizer(Class<?> finalizableReferenceClass, ReferenceQueue<Object> queue, PhantomReference<Object> frqReference)
  nameWithType: Finalizer.Finalizer(Class<?> finalizableReferenceClass, ReferenceQueue<Object> queue, PhantomReference<Object> frqReference)
  fullName: com.azure.cosmos.implementation.guava25.base.internal.Finalizer.Finalizer(Class<?> finalizableReferenceClass, ReferenceQueue<Object> queue, PhantomReference<Object> frqReference)
  overload: com.azure.cosmos.implementation.guava25.base.internal.Finalizer.Finalizer*
  type: Constructor
  package: com.azure.cosmos.implementation.guava25.base.internal
  summary: Constructs a new finalizer thread.
  syntax:
    content: private Finalizer(Class<?> finalizableReferenceClass, ReferenceQueue<Object> queue, PhantomReference<Object> frqReference)
    parameters:
    - id: finalizableReferenceClass
      type: java.lang.Class<?>
    - id: queue
      type: java.lang.ref.ReferenceQueue<java.lang.Object>
    - id: frqReference
      type: java.lang.ref.PhantomReference<java.lang.Object>
- uid: com.azure.cosmos.implementation.guava25.base.internal.Finalizer.run()
  id: run()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.base.internal.Finalizer
  langs:
  - java
  name: run()
  nameWithType: Finalizer.run()
  fullName: com.azure.cosmos.implementation.guava25.base.internal.Finalizer.run()
  overload: com.azure.cosmos.implementation.guava25.base.internal.Finalizer.run*
  type: Method
  package: com.azure.cosmos.implementation.guava25.base.internal
  summary: Loops continuously, pulling references off the queue and cleaning them up.
  syntax:
    content: public void run()
- uid: com.azure.cosmos.implementation.guava25.base.internal.Finalizer.startFinalizer(java.lang.Class<?>,java.lang.ref.ReferenceQueue<java.lang.Object>,java.lang.ref.PhantomReference<java.lang.Object>)
  id: startFinalizer(java.lang.Class<?>,java.lang.ref.ReferenceQueue<java.lang.Object>,java.lang.ref.PhantomReference<java.lang.Object>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.base.internal.Finalizer
  langs:
  - java
  name: startFinalizer(Class<?> finalizableReferenceClass, ReferenceQueue<Object> queue, PhantomReference<Object> frqReference)
  nameWithType: Finalizer.startFinalizer(Class<?> finalizableReferenceClass, ReferenceQueue<Object> queue, PhantomReference<Object> frqReference)
  fullName: com.azure.cosmos.implementation.guava25.base.internal.Finalizer.startFinalizer(Class<?> finalizableReferenceClass, ReferenceQueue<Object> queue, PhantomReference<Object> frqReference)
  overload: com.azure.cosmos.implementation.guava25.base.internal.Finalizer.startFinalizer*
  type: Method
  package: com.azure.cosmos.implementation.guava25.base.internal
  summary: Starts the Finalizer thread. FinalizableReferenceQueue calls this method reflectively.
  syntax:
    content: public static void startFinalizer(Class<?> finalizableReferenceClass, ReferenceQueue<Object> queue, PhantomReference<Object> frqReference)
    parameters:
    - id: finalizableReferenceClass
      type: java.lang.Class<?>
      description: FinalizableReference.class.
    - id: queue
      type: java.lang.ref.ReferenceQueue<java.lang.Object>
      description: a reference queue that the thread will poll.
    - id: frqReference
      type: java.lang.ref.PhantomReference<java.lang.Object>
      description: >-
        a phantom reference to the FinalizableReferenceQueue, which will be queued
             either when the FinalizableReferenceQueue is no longer referenced anywhere, or when its
             close() method is called.
references:
- uid: java.lang.Class<?>
  spec.java:
  - uid: java.lang.Class
    name: Class
    fullName: java.lang.Class
  - name: <
    fullName: <
  - uid: '?'
    name: '?'
    fullName: '?'
  - name: '>'
    fullName: '>'
- uid: java.lang.ref.ReferenceQueue<java.lang.Object>
  spec.java:
  - uid: java.lang.ref.ReferenceQueue
    name: ReferenceQueue
    fullName: java.lang.ref.ReferenceQueue
  - name: <
    fullName: <
  - uid: java.lang.Object
    name: Object
    fullName: java.lang.Object
  - name: '>'
    fullName: '>'
- uid: java.lang.ref.PhantomReference<java.lang.Object>
  spec.java:
  - uid: java.lang.ref.PhantomReference
    name: PhantomReference
    fullName: java.lang.ref.PhantomReference
  - name: <
    fullName: <
  - uid: java.lang.Object
    name: Object
    fullName: java.lang.Object
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.base.internal.Finalizer.Finalizer*
  name: Finalizer
  nameWithType: Finalizer.Finalizer
  fullName: com.azure.cosmos.implementation.guava25.base.internal.Finalizer.Finalizer
  package: com.azure.cosmos.implementation.guava25.base.internal
- uid: com.azure.cosmos.implementation.guava25.base.internal.Finalizer.startFinalizer*
  name: startFinalizer
  nameWithType: Finalizer.startFinalizer
  fullName: com.azure.cosmos.implementation.guava25.base.internal.Finalizer.startFinalizer
  package: com.azure.cosmos.implementation.guava25.base.internal
- uid: com.azure.cosmos.implementation.guava25.base.internal.Finalizer.run*
  name: run
  nameWithType: Finalizer.run
  fullName: com.azure.cosmos.implementation.guava25.base.internal.Finalizer.run
  package: com.azure.cosmos.implementation.guava25.base.internal
- uid: java.lang.Runnable
  name: Runnable
  nameWithType: Runnable
  fullName: java.lang.Runnable
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: java.lang.Object.finalize()
  name: Object.finalize()
  nameWithType: Object.finalize()
  fullName: java.lang.Object.finalize()
- uid: java.lang.Object.clone()
  name: Object.clone()
  nameWithType: Object.clone()
  fullName: java.lang.Object.clone()
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: java.lang.Object.equals(java.lang.Object)
  name: Object.equals(Object)
  nameWithType: Object.equals(Object)
  fullName: java.lang.Object.equals(java.lang.Object)
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.lang.Object.hashCode()
  name: Object.hashCode()
  nameWithType: Object.hashCode()
  fullName: java.lang.Object.hashCode()
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: java.lang.Object.toString()
  name: Object.toString()
  nameWithType: Object.toString()
  fullName: java.lang.Object.toString()
- uid: java.lang.Class
  name: Class
  nameWithType: Class
  fullName: java.lang.Class
- uid: '?'
  name: '?'
  nameWithType: '?'
  fullName: '?'
- uid: java.lang.Object
  name: Object
  nameWithType: Object
  fullName: java.lang.Object
- uid: java.lang.ref.ReferenceQueue
  name: ReferenceQueue
  nameWithType: ReferenceQueue
  fullName: java.lang.ref.ReferenceQueue
- uid: java.lang.ref.PhantomReference
  name: PhantomReference
  nameWithType: PhantomReference
  fullName: java.lang.ref.PhantomReference
