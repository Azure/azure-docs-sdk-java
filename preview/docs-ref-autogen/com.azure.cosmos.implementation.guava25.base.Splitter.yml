### YamlMime:JavaType
uid: "com.azure.cosmos.implementation.guava25.base.Splitter"
fullName: "com.azure.cosmos.implementation.guava25.base.Splitter"
name: "Splitter"
nameWithType: "Splitter"
summary: "Extracts non-overlapping substrings from an input string, typically by recognizing appearances of a *separator* sequence. This separator can be specified as a single <xref uid=\"com.azure.cosmos.implementation.guava25.base.Splitter.on(char)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"character\"></xref>, fixed <xref uid=\"com.azure.cosmos.implementation.guava25.base.Splitter.on(java.lang.String)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"string\"></xref>, <xref uid=\"com.azure.cosmos.implementation.guava25.base.Splitter.onPattern*\" data-throw-if-not-resolved=\"false\" data-raw-source=\"regular expression\"></xref> or <xref uid=\"com.azure.cosmos.implementation.guava25.base.Splitter.on(com.azure.cosmos.implementation.guava25.base.CharMatcher)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CharMatcher\"></xref> instance. Or, instead of using a separator at all, a splitter can extract adjacent substrings of a given <xref uid=\"com.azure.cosmos.implementation.guava25.base.Splitter.fixedLength*\" data-throw-if-not-resolved=\"false\" data-raw-source=\"fixed length\"></xref>.\n\nFor example, this expression:\n\n```java\nSplitter.on(',').split(\"foo,bar,qux\")\n```\n\n... produces an `Iterable` containing `\"foo\"`, `\"bar\"` and `\"qux\"`, in that order.\n\nBy default, `Splitter`'s behavior is simplistic and unassuming. The following expression:\n\n```java\nSplitter.on(',').split(\" foo,,,  bar ,\")\n```\n\n... yields the substrings `[\" foo\", \"\", \"\", \" bar \", \"\"]`. If this is not the desired behavior, use configuration methods to obtain a *new* splitter instance with modified behavior:\n\n```java\nprivate static final Splitter MY_SPLITTER = Splitter.on(',')\n     .trimResults()\n     .omitEmptyStrings();\n```\n\nNow `MY_SPLITTER.split(\"foo,,, bar ,\")` returns just `[\"foo\", \"bar\"]`. Note that the order in which these configuration methods are called is never significant.\n\n**Warning:** Splitter instances are immutable. Invoking a configuration method has no effect on the receiving instance; you must store and use the new splitter instance it returns instead.\n\n```java\n// Do NOT do this\n Splitter splitter = Splitter.on('/');\n splitter.trimResults(); // does nothing!\n return splitter.split(\"wrong / wrong / wrong\");\n```\n\nFor separator-based splitters that do not use `omitEmptyStrings`, an input string containing `n` occurrences of the separator naturally yields an iterable of size `n + 1`. So if the separator does not occur anywhere in the input, a single substring is returned containing the entire input. Consequently, all splitters split the empty string to `[\"\"]` (note: even fixed-length splitters).\n\nSplitter instances are thread-safe immutable, and are therefore safe to store as `static final` constants.\n\nThe <xref uid=\"com.azure.cosmos.implementation.guava25.base.Joiner\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Joiner\"></xref> class provides the inverse operation to splitting, but note that a round-trip between the two should be assumed to be lossy.\n\nSee the Guava User Guide article on [`Splitter`][Splitter].\n\n\n[Splitter]: https://github.com/google/guava/wiki/StringsExplained#splitter"
inheritances:
- "<xref href=\"java.lang.Object\" data-throw-if-not-resolved=\"False\" />"
inheritedMembers:
- "java.lang.Object.clone()"
- "java.lang.Object.equals(java.lang.Object)"
- "java.lang.Object.finalize()"
- "java.lang.Object.getClass()"
- "java.lang.Object.hashCode()"
- "java.lang.Object.notify()"
- "java.lang.Object.notifyAll()"
- "java.lang.Object.toString()"
- "java.lang.Object.wait()"
- "java.lang.Object.wait(long)"
- "java.lang.Object.wait(long,int)"
syntax: "public final class Splitter"
methods:
- "com.azure.cosmos.implementation.guava25.base.Splitter.fixedLength(int)"
- "com.azure.cosmos.implementation.guava25.base.Splitter.limit(int)"
- "com.azure.cosmos.implementation.guava25.base.Splitter.omitEmptyStrings()"
- "com.azure.cosmos.implementation.guava25.base.Splitter.on(char)"
- "com.azure.cosmos.implementation.guava25.base.Splitter.on(com.azure.cosmos.implementation.guava25.base.CharMatcher)"
- "com.azure.cosmos.implementation.guava25.base.Splitter.on(java.lang.String)"
- "com.azure.cosmos.implementation.guava25.base.Splitter.on(java.util.regex.Pattern)"
- "com.azure.cosmos.implementation.guava25.base.Splitter.onPattern(java.lang.String)"
- "com.azure.cosmos.implementation.guava25.base.Splitter.split(java.lang.CharSequence)"
- "com.azure.cosmos.implementation.guava25.base.Splitter.splitToList(java.lang.CharSequence)"
- "com.azure.cosmos.implementation.guava25.base.Splitter.trimResults()"
- "com.azure.cosmos.implementation.guava25.base.Splitter.trimResults(com.azure.cosmos.implementation.guava25.base.CharMatcher)"
- "com.azure.cosmos.implementation.guava25.base.Splitter.withKeyValueSeparator(char)"
- "com.azure.cosmos.implementation.guava25.base.Splitter.withKeyValueSeparator(com.azure.cosmos.implementation.guava25.base.Splitter)"
- "com.azure.cosmos.implementation.guava25.base.Splitter.withKeyValueSeparator(java.lang.String)"
type: "class"
metadata: {}
package: "com.azure.cosmos.implementation.guava25.base"
artifact: com.azure:azure-cosmos:4.4.0-beta.1
