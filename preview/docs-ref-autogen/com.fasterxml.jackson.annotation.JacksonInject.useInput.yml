### YamlMime:JavaMember
uid: "com.fasterxml.jackson.annotation.JacksonInject.useInput*"
fullName: "com.fasterxml.jackson.annotation.JacksonInject.useInput"
name: "useInput"
nameWithType: "JacksonInject.useInput"
members:
- uid: "com.fasterxml.jackson.annotation.JacksonInject.useInput()"
  fullName: "com.fasterxml.jackson.annotation.JacksonInject.useInput()"
  name: "useInput()"
  nameWithType: "JacksonInject.useInput()"
  summary: "Whether matching value from input (if any) is used for annotated property or not; if disabled (\\`OptBoolean.FALSE\\`), input value (if any) will be ignored; otherwise it will override injected value.\n\nDefault is \\`OptBoolean.DEFAULT\\`, which translates to \\`OptBoolean.TRUE\\`: this is for backwards compatibility (2.8 and earlier always allow binding input value)."
  syntax: "public abstract OptBoolean useInput()"
  returns:
    description: "<xref uid=\"com.fasterxml.jackson.annotation.OptBoolean.TRUE\" data-throw-if-not-resolved=\"false\" data-raw-source=\"OptBoolean#TRUE\"></xref> to enable use of value from input instead of\n    injected value, if available; <xref uid=\"com.fasterxml.jackson.annotation.OptBoolean.FALSE\" data-throw-if-not-resolved=\"false\" data-raw-source=\"OptBoolean#FALSE\"></xref> if injected value will\n    always be used regardless of input."
    type: "<xref href=\"com.fasterxml.jackson.annotation.OptBoolean?alt=com.fasterxml.jackson.annotation.OptBoolean&text=OptBoolean\" data-throw-if-not-resolved=\"False\" />"
type: "method"
metadata: {}
package: "com.fasterxml.jackson.annotation"
artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
