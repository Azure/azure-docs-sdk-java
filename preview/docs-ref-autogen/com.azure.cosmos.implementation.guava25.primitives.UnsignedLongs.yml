### YamlMime:JavaType
uid: "com.azure.cosmos.implementation.guava25.primitives.UnsignedLongs"
fullName: "com.azure.cosmos.implementation.guava25.primitives.UnsignedLongs"
name: "UnsignedLongs"
nameWithType: "UnsignedLongs"
summary: "Static utility methods pertaining to `long` primitives that interpret values as *unsigned* (that is, any negative value `x` is treated as the positive value `2^64 + x`). The methods for which signedness is not an issue are in <xref uid=\"com.azure.cosmos.implementation.guava25.primitives.Longs\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Longs\"></xref>, as well as signed versions of methods for which signedness is an issue.\n\nIn addition, this class provides several static methods for converting a `long` to a `String` and a `String` to a `long` that treat the `long` as an unsigned number.\n\nUsers of these utilities must be *extremely careful* not to mix up signed and unsigned `long` values. When possible, it is recommended that the <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"UnsignedLong\"></xref> wrapper class be used, at a small efficiency penalty, to enforce the distinction in the type system.\n\nSee the Guava User Guide article on [unsigned primitive utilities][].\n\n\n[unsigned primitive utilities]: https://github.com/google/guava/wiki/PrimitivesExplained#unsigned-support"
inheritances:
- "<xref href=\"java.lang.Object\" data-throw-if-not-resolved=\"False\" />"
inheritedMembers:
- "java.lang.Object.clone()"
- "java.lang.Object.equals(java.lang.Object)"
- "java.lang.Object.finalize()"
- "java.lang.Object.getClass()"
- "java.lang.Object.hashCode()"
- "java.lang.Object.notify()"
- "java.lang.Object.notifyAll()"
- "java.lang.Object.toString()"
- "java.lang.Object.wait()"
- "java.lang.Object.wait(long)"
- "java.lang.Object.wait(long,int)"
syntax: "public final class UnsignedLongs"
fields:
- "com.azure.cosmos.implementation.guava25.primitives.UnsignedLongs.MAX_VALUE"
methods:
- "com.azure.cosmos.implementation.guava25.primitives.UnsignedLongs.compare(long,long)"
- "com.azure.cosmos.implementation.guava25.primitives.UnsignedLongs.decode(java.lang.String)"
- "com.azure.cosmos.implementation.guava25.primitives.UnsignedLongs.divide(long,long)"
- "com.azure.cosmos.implementation.guava25.primitives.UnsignedLongs.join(java.lang.String,long...)"
- "com.azure.cosmos.implementation.guava25.primitives.UnsignedLongs.lexicographicalComparator()"
- "com.azure.cosmos.implementation.guava25.primitives.UnsignedLongs.max(long...)"
- "com.azure.cosmos.implementation.guava25.primitives.UnsignedLongs.min(long...)"
- "com.azure.cosmos.implementation.guava25.primitives.UnsignedLongs.parseUnsignedLong(java.lang.String)"
- "com.azure.cosmos.implementation.guava25.primitives.UnsignedLongs.parseUnsignedLong(java.lang.String,int)"
- "com.azure.cosmos.implementation.guava25.primitives.UnsignedLongs.remainder(long,long)"
- "com.azure.cosmos.implementation.guava25.primitives.UnsignedLongs.sort(long[])"
- "com.azure.cosmos.implementation.guava25.primitives.UnsignedLongs.sort(long[],int,int)"
- "com.azure.cosmos.implementation.guava25.primitives.UnsignedLongs.sortDescending(long[])"
- "com.azure.cosmos.implementation.guava25.primitives.UnsignedLongs.sortDescending(long[],int,int)"
- "com.azure.cosmos.implementation.guava25.primitives.UnsignedLongs.toString(long)"
- "com.azure.cosmos.implementation.guava25.primitives.UnsignedLongs.toString(long,int)"
type: "class"
metadata: {}
package: "com.azure.cosmos.implementation.guava25.primitives"
artifact: com.azure:azure-cosmos:4.4.0-beta.1
