### YamlMime:ManagedReference
items:
- uid: com.azure.cosmos.implementation.guava25.primitives.UnsignedLongs
  id: UnsignedLongs
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.primitives
  children:
  - com.azure.cosmos.implementation.guava25.primitives.UnsignedLongs.MAX_VALUE
  - com.azure.cosmos.implementation.guava25.primitives.UnsignedLongs.compare(long,long)
  - com.azure.cosmos.implementation.guava25.primitives.UnsignedLongs.decode(java.lang.String)
  - com.azure.cosmos.implementation.guava25.primitives.UnsignedLongs.divide(long,long)
  - com.azure.cosmos.implementation.guava25.primitives.UnsignedLongs.join(java.lang.String,long...)
  - com.azure.cosmos.implementation.guava25.primitives.UnsignedLongs.lexicographicalComparator()
  - com.azure.cosmos.implementation.guava25.primitives.UnsignedLongs.max(long...)
  - com.azure.cosmos.implementation.guava25.primitives.UnsignedLongs.min(long...)
  - com.azure.cosmos.implementation.guava25.primitives.UnsignedLongs.parseUnsignedLong(java.lang.String)
  - com.azure.cosmos.implementation.guava25.primitives.UnsignedLongs.parseUnsignedLong(java.lang.String,int)
  - com.azure.cosmos.implementation.guava25.primitives.UnsignedLongs.remainder(long,long)
  - com.azure.cosmos.implementation.guava25.primitives.UnsignedLongs.sort(long[])
  - com.azure.cosmos.implementation.guava25.primitives.UnsignedLongs.sort(long[],int,int)
  - com.azure.cosmos.implementation.guava25.primitives.UnsignedLongs.sortDescending(long[])
  - com.azure.cosmos.implementation.guava25.primitives.UnsignedLongs.sortDescending(long[],int,int)
  - com.azure.cosmos.implementation.guava25.primitives.UnsignedLongs.toString(long)
  - com.azure.cosmos.implementation.guava25.primitives.UnsignedLongs.toString(long,int)
  langs:
  - java
  name: UnsignedLongs
  nameWithType: UnsignedLongs
  fullName: com.azure.cosmos.implementation.guava25.primitives.UnsignedLongs
  type: Class
  package: com.azure.cosmos.implementation.guava25.primitives
  summary: >-
    Static utility methods pertaining to `long` primitives that interpret values as *unsigned* (that is, any negative value `x` is treated as the positive value `2^64 + x`). The methods for which signedness is not an issue are in <xref uid="com.azure.cosmos.implementation.guava25.primitives.Longs" data-throw-if-not-resolved="false">Longs</xref>, as well as signed versions of methods for which signedness is an issue.


    In addition, this class provides several static methods for converting a `long` to a `String` and a `String` to a `long` that treat the `long` as an unsigned number.


    Users of these utilities must be *extremely careful* not to mix up signed and unsigned `long` values. When possible, it is recommended that the <xref uid="" data-throw-if-not-resolved="false">UnsignedLong</xref> wrapper class be used, at a small efficiency penalty, to enforce the distinction in the type system.


    See the Guava User Guide article on [unsigned primitive utilities][].



    [unsigned primitive utilities]: https://github.com/google/guava/wiki/PrimitivesExplained#unsigned-support
  syntax:
    content: public final class UnsignedLongs
  inheritance:
  - java.lang.Object
  inheritedMembers:
  - java.lang.Object.clone()
  - java.lang.Object.equals(java.lang.Object)
  - java.lang.Object.finalize()
  - java.lang.Object.getClass()
  - java.lang.Object.hashCode()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.toString()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
- uid: com.azure.cosmos.implementation.guava25.primitives.UnsignedLongs.MAX_VALUE
  id: MAX_VALUE
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.primitives.UnsignedLongs
  langs:
  - java
  name: MAX_VALUE
  nameWithType: UnsignedLongs.MAX_VALUE
  fullName: com.azure.cosmos.implementation.guava25.primitives.UnsignedLongs.MAX_VALUE
  type: Field
  package: com.azure.cosmos.implementation.guava25.primitives
  syntax:
    content: public static final long MAX_VALUE
    return:
      type: long
- uid: com.azure.cosmos.implementation.guava25.primitives.UnsignedLongs.UnsignedLongs()
  id: UnsignedLongs()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.primitives.UnsignedLongs
  langs:
  - java
  name: UnsignedLongs()
  nameWithType: UnsignedLongs.UnsignedLongs()
  fullName: com.azure.cosmos.implementation.guava25.primitives.UnsignedLongs.UnsignedLongs()
  overload: com.azure.cosmos.implementation.guava25.primitives.UnsignedLongs.UnsignedLongs*
  type: Constructor
  package: com.azure.cosmos.implementation.guava25.primitives
  syntax:
    content: private UnsignedLongs()
- uid: com.azure.cosmos.implementation.guava25.primitives.UnsignedLongs.compare(long,long)
  id: compare(long,long)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.primitives.UnsignedLongs
  langs:
  - java
  name: compare(long a, long b)
  nameWithType: UnsignedLongs.compare(long a, long b)
  fullName: com.azure.cosmos.implementation.guava25.primitives.UnsignedLongs.compare(long a, long b)
  overload: com.azure.cosmos.implementation.guava25.primitives.UnsignedLongs.compare*
  type: Method
  package: com.azure.cosmos.implementation.guava25.primitives
  summary: >-
    Compares the two specified `long` values, treating them as unsigned values between `0` and `2^64 - 1` inclusive.


    **Java 8 users:** use <xref uid="java.lang.Long.compareUnsigned*" data-throw-if-not-resolved="false">Long#compareUnsigned(long, long)</xref> instead.
  syntax:
    content: public static int compare(long a, long b)
    parameters:
    - id: a
      type: long
      description: the first unsigned <code>long</code> to compare
    - id: b
      type: long
      description: the second unsigned <code>long</code> to compare
    return:
      type: int
      description: >-
        a negative value if <code>a</code> is less than <code>b</code>; a positive value if <code>a</code> is
             greater than <code>b</code>; or zero if they are equal
- uid: com.azure.cosmos.implementation.guava25.primitives.UnsignedLongs.decode(java.lang.String)
  id: decode(java.lang.String)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.primitives.UnsignedLongs
  langs:
  - java
  name: decode(String stringValue)
  nameWithType: UnsignedLongs.decode(String stringValue)
  fullName: com.azure.cosmos.implementation.guava25.primitives.UnsignedLongs.decode(String stringValue)
  overload: com.azure.cosmos.implementation.guava25.primitives.UnsignedLongs.decode*
  type: Method
  package: com.azure.cosmos.implementation.guava25.primitives
  summary: >-
    Returns the unsigned `long` value represented by the given string.


    Accepts a decimal, hexadecimal, or octal number given by specifying the following prefix:

     *  `0x`*HexDigits*
     *  `0X`*HexDigits*
     *  `#`*HexDigits*
     *  `0`*OctalDigits*
  syntax:
    content: public static long decode(String stringValue)
    parameters:
    - id: stringValue
      type: java.lang.String
    return:
      type: long
- uid: com.azure.cosmos.implementation.guava25.primitives.UnsignedLongs.divide(long,long)
  id: divide(long,long)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.primitives.UnsignedLongs
  langs:
  - java
  name: divide(long dividend, long divisor)
  nameWithType: UnsignedLongs.divide(long dividend, long divisor)
  fullName: com.azure.cosmos.implementation.guava25.primitives.UnsignedLongs.divide(long dividend, long divisor)
  overload: com.azure.cosmos.implementation.guava25.primitives.UnsignedLongs.divide*
  type: Method
  package: com.azure.cosmos.implementation.guava25.primitives
  summary: >-
    Returns dividend / divisor, where the dividend and divisor are treated as unsigned 64-bit quantities.


    **Java 8 users:** use <xref uid="java.lang.Long.divideUnsigned*" data-throw-if-not-resolved="false">Long#divideUnsigned(long, long)</xref> instead.
  syntax:
    content: public static long divide(long dividend, long divisor)
    parameters:
    - id: dividend
      type: long
      description: the dividend (numerator)
    - id: divisor
      type: long
      description: the divisor (denominator)
    return:
      type: long
- uid: com.azure.cosmos.implementation.guava25.primitives.UnsignedLongs.join(java.lang.String,long...)
  id: join(java.lang.String,long...)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.primitives.UnsignedLongs
  langs:
  - java
  name: join(String separator, long[] array)
  nameWithType: UnsignedLongs.join(String separator, long[] array)
  fullName: com.azure.cosmos.implementation.guava25.primitives.UnsignedLongs.join(String separator, long[] array)
  overload: com.azure.cosmos.implementation.guava25.primitives.UnsignedLongs.join*
  type: Method
  package: com.azure.cosmos.implementation.guava25.primitives
  summary: Returns a string containing the supplied unsigned `long` values separated by `separator`. For example, `join("-", 1, 2, 3)` returns the string `"1-2-3"`.
  syntax:
    content: public static String join(String separator, long[] array)
    parameters:
    - id: separator
      type: java.lang.String
      description: >-
        the text that should appear between consecutive values in the resulting string
             (but not at the start or end)
    - id: array
      type: long[]
      description: an array of unsigned <code>long</code> values, possibly empty
    return:
      type: java.lang.String
- uid: com.azure.cosmos.implementation.guava25.primitives.UnsignedLongs.lexicographicalComparator()
  id: lexicographicalComparator()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.primitives.UnsignedLongs
  langs:
  - java
  name: lexicographicalComparator()
  nameWithType: UnsignedLongs.lexicographicalComparator()
  fullName: com.azure.cosmos.implementation.guava25.primitives.UnsignedLongs.lexicographicalComparator()
  overload: com.azure.cosmos.implementation.guava25.primitives.UnsignedLongs.lexicographicalComparator*
  type: Method
  package: com.azure.cosmos.implementation.guava25.primitives
  summary: >-
    Returns a comparator that compares two arrays of unsigned `long` values [lexicographically][]. That is, it compares, using <xref uid="com.azure.cosmos.implementation.guava25.primitives.UnsignedLongs.compare(long,long)" data-throw-if-not-resolved="false">#compare(long, long)</xref>), the first pair of values that follow any common prefix, or when one array is a prefix of the other, treats the shorter array as the lesser. For example, `[] < [1L] < [1L, 2L] < [2L] < [1L << 63]`.


    The returned comparator is inconsistent with <xref uid="java.lang.Object.equals(java.lang.Object)" data-throw-if-not-resolved="false">Object#equals(Object)</xref> (since arrays support only identity equality), but it is consistent with <xref uid="Arrays#equals(long[],
     long[])" data-throw-if-not-resolved="false">Arrays#equals(long[],
     long[])</xref>.


    [lexicographically]: http://en.wikipedia.org/wiki/Lexicographical_order
  syntax:
    content: public static Comparator<long[]> lexicographicalComparator()
    return:
      type: java.util.Comparator<long[]>
- uid: com.azure.cosmos.implementation.guava25.primitives.UnsignedLongs.max(long...)
  id: max(long...)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.primitives.UnsignedLongs
  langs:
  - java
  name: max(long[] array)
  nameWithType: UnsignedLongs.max(long[] array)
  fullName: com.azure.cosmos.implementation.guava25.primitives.UnsignedLongs.max(long[] array)
  overload: com.azure.cosmos.implementation.guava25.primitives.UnsignedLongs.max*
  type: Method
  package: com.azure.cosmos.implementation.guava25.primitives
  summary: Returns the greatest value present in `array`, treating values as unsigned.
  syntax:
    content: public static long max(long[] array)
    parameters:
    - id: array
      type: long[]
      description: a <i>nonempty</i> array of unsigned <code>long</code> values
    return:
      type: long
      description: >-
        the value present in <code>array</code> that is greater than or equal to every other value
             in the array according to <xref uid="com.azure.cosmos.implementation.guava25.primitives.UnsignedLongs.compare*" data-throw-if-not-resolved="false">#compare</xref>
- uid: com.azure.cosmos.implementation.guava25.primitives.UnsignedLongs.min(long...)
  id: min(long...)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.primitives.UnsignedLongs
  langs:
  - java
  name: min(long[] array)
  nameWithType: UnsignedLongs.min(long[] array)
  fullName: com.azure.cosmos.implementation.guava25.primitives.UnsignedLongs.min(long[] array)
  overload: com.azure.cosmos.implementation.guava25.primitives.UnsignedLongs.min*
  type: Method
  package: com.azure.cosmos.implementation.guava25.primitives
  summary: Returns the least value present in `array`, treating values as unsigned.
  syntax:
    content: public static long min(long[] array)
    parameters:
    - id: array
      type: long[]
      description: a <i>nonempty</i> array of unsigned <code>long</code> values
    return:
      type: long
      description: >-
        the value present in <code>array</code> that is less than or equal to every other value in
             the array according to <xref uid="com.azure.cosmos.implementation.guava25.primitives.UnsignedLongs.compare*" data-throw-if-not-resolved="false">#compare</xref>
- uid: com.azure.cosmos.implementation.guava25.primitives.UnsignedLongs.parseUnsignedLong(java.lang.String)
  id: parseUnsignedLong(java.lang.String)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.primitives.UnsignedLongs
  langs:
  - java
  name: parseUnsignedLong(String string)
  nameWithType: UnsignedLongs.parseUnsignedLong(String string)
  fullName: com.azure.cosmos.implementation.guava25.primitives.UnsignedLongs.parseUnsignedLong(String string)
  overload: com.azure.cosmos.implementation.guava25.primitives.UnsignedLongs.parseUnsignedLong*
  type: Method
  package: com.azure.cosmos.implementation.guava25.primitives
  summary: >-
    Returns the unsigned `long` value represented by the given decimal string.


    **Java 8 users:** use <xref uid="java.lang.Long.parseUnsignedLong*" data-throw-if-not-resolved="false">Long#parseUnsignedLong(String)</xref> instead.
  syntax:
    content: public static long parseUnsignedLong(String string)
    parameters:
    - id: string
      type: java.lang.String
    return:
      type: long
- uid: com.azure.cosmos.implementation.guava25.primitives.UnsignedLongs.parseUnsignedLong(java.lang.String,int)
  id: parseUnsignedLong(java.lang.String,int)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.primitives.UnsignedLongs
  langs:
  - java
  name: parseUnsignedLong(String string, int radix)
  nameWithType: UnsignedLongs.parseUnsignedLong(String string, int radix)
  fullName: com.azure.cosmos.implementation.guava25.primitives.UnsignedLongs.parseUnsignedLong(String string, int radix)
  overload: com.azure.cosmos.implementation.guava25.primitives.UnsignedLongs.parseUnsignedLong*
  type: Method
  package: com.azure.cosmos.implementation.guava25.primitives
  summary: >-
    Returns the unsigned `long` value represented by a string with the given radix.


    **Java 8 users:** use <xref uid="java.lang.Long.parseUnsignedLong*" data-throw-if-not-resolved="false">Long#parseUnsignedLong(String, int)</xref> instead.
  syntax:
    content: public static long parseUnsignedLong(String string, int radix)
    parameters:
    - id: string
      type: java.lang.String
      description: the string containing the unsigned <code>long</code> representation to be parsed.
    - id: radix
      type: int
      description: the radix to use while parsing <code>string</code>
    return:
      type: long
- uid: com.azure.cosmos.implementation.guava25.primitives.UnsignedLongs.remainder(long,long)
  id: remainder(long,long)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.primitives.UnsignedLongs
  langs:
  - java
  name: remainder(long dividend, long divisor)
  nameWithType: UnsignedLongs.remainder(long dividend, long divisor)
  fullName: com.azure.cosmos.implementation.guava25.primitives.UnsignedLongs.remainder(long dividend, long divisor)
  overload: com.azure.cosmos.implementation.guava25.primitives.UnsignedLongs.remainder*
  type: Method
  package: com.azure.cosmos.implementation.guava25.primitives
  summary: >-
    Returns dividend % divisor, where the dividend and divisor are treated as unsigned 64-bit quantities.


    **Java 8 users:** use <xref uid="java.lang.Long.remainderUnsigned*" data-throw-if-not-resolved="false">Long#remainderUnsigned(long, long)</xref> instead.
  syntax:
    content: public static long remainder(long dividend, long divisor)
    parameters:
    - id: dividend
      type: long
      description: the dividend (numerator)
    - id: divisor
      type: long
      description: the divisor (denominator)
    return:
      type: long
- uid: com.azure.cosmos.implementation.guava25.primitives.UnsignedLongs.sort(long[])
  id: sort(long[])
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.primitives.UnsignedLongs
  langs:
  - java
  name: sort(long[] array)
  nameWithType: UnsignedLongs.sort(long[] array)
  fullName: com.azure.cosmos.implementation.guava25.primitives.UnsignedLongs.sort(long[] array)
  overload: com.azure.cosmos.implementation.guava25.primitives.UnsignedLongs.sort*
  type: Method
  package: com.azure.cosmos.implementation.guava25.primitives
  summary: Sorts the array, treating its elements as unsigned 64-bit integers.
  syntax:
    content: public static void sort(long[] array)
    parameters:
    - id: array
      type: long[]
- uid: com.azure.cosmos.implementation.guava25.primitives.UnsignedLongs.sort(long[],int,int)
  id: sort(long[],int,int)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.primitives.UnsignedLongs
  langs:
  - java
  name: sort(long[] array, int fromIndex, int toIndex)
  nameWithType: UnsignedLongs.sort(long[] array, int fromIndex, int toIndex)
  fullName: com.azure.cosmos.implementation.guava25.primitives.UnsignedLongs.sort(long[] array, int fromIndex, int toIndex)
  overload: com.azure.cosmos.implementation.guava25.primitives.UnsignedLongs.sort*
  type: Method
  package: com.azure.cosmos.implementation.guava25.primitives
  summary: Sorts the array between `fromIndex` inclusive and `toIndex` exclusive, treating its elements as unsigned 64-bit integers.
  syntax:
    content: public static void sort(long[] array, int fromIndex, int toIndex)
    parameters:
    - id: array
      type: long[]
    - id: fromIndex
      type: int
    - id: toIndex
      type: int
- uid: com.azure.cosmos.implementation.guava25.primitives.UnsignedLongs.sortDescending(long[])
  id: sortDescending(long[])
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.primitives.UnsignedLongs
  langs:
  - java
  name: sortDescending(long[] array)
  nameWithType: UnsignedLongs.sortDescending(long[] array)
  fullName: com.azure.cosmos.implementation.guava25.primitives.UnsignedLongs.sortDescending(long[] array)
  overload: com.azure.cosmos.implementation.guava25.primitives.UnsignedLongs.sortDescending*
  type: Method
  package: com.azure.cosmos.implementation.guava25.primitives
  summary: Sorts the elements of `array` in descending order, interpreting them as unsigned 64-bit integers.
  syntax:
    content: public static void sortDescending(long[] array)
    parameters:
    - id: array
      type: long[]
- uid: com.azure.cosmos.implementation.guava25.primitives.UnsignedLongs.sortDescending(long[],int,int)
  id: sortDescending(long[],int,int)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.primitives.UnsignedLongs
  langs:
  - java
  name: sortDescending(long[] array, int fromIndex, int toIndex)
  nameWithType: UnsignedLongs.sortDescending(long[] array, int fromIndex, int toIndex)
  fullName: com.azure.cosmos.implementation.guava25.primitives.UnsignedLongs.sortDescending(long[] array, int fromIndex, int toIndex)
  overload: com.azure.cosmos.implementation.guava25.primitives.UnsignedLongs.sortDescending*
  type: Method
  package: com.azure.cosmos.implementation.guava25.primitives
  summary: Sorts the elements of `array` between `fromIndex` inclusive and `toIndex` exclusive in descending order, interpreting them as unsigned 64-bit integers.
  syntax:
    content: public static void sortDescending(long[] array, int fromIndex, int toIndex)
    parameters:
    - id: array
      type: long[]
    - id: fromIndex
      type: int
    - id: toIndex
      type: int
- uid: com.azure.cosmos.implementation.guava25.primitives.UnsignedLongs.toString(long)
  id: toString(long)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.primitives.UnsignedLongs
  langs:
  - java
  name: toString(long x)
  nameWithType: UnsignedLongs.toString(long x)
  fullName: com.azure.cosmos.implementation.guava25.primitives.UnsignedLongs.toString(long x)
  overload: com.azure.cosmos.implementation.guava25.primitives.UnsignedLongs.toString*
  type: Method
  package: com.azure.cosmos.implementation.guava25.primitives
  summary: >-
    Returns a string representation of x, where x is treated as unsigned.


    **Java 8 users:** use <xref uid="java.lang.Long.toUnsignedString*" data-throw-if-not-resolved="false">Long#toUnsignedString(long)</xref> instead.
  syntax:
    content: public static String toString(long x)
    parameters:
    - id: x
      type: long
    return:
      type: java.lang.String
- uid: com.azure.cosmos.implementation.guava25.primitives.UnsignedLongs.toString(long,int)
  id: toString(long,int)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.primitives.UnsignedLongs
  langs:
  - java
  name: toString(long x, int radix)
  nameWithType: UnsignedLongs.toString(long x, int radix)
  fullName: com.azure.cosmos.implementation.guava25.primitives.UnsignedLongs.toString(long x, int radix)
  overload: com.azure.cosmos.implementation.guava25.primitives.UnsignedLongs.toString*
  type: Method
  package: com.azure.cosmos.implementation.guava25.primitives
  summary: >-
    Returns a string representation of `x` for the given radix, where `x` is treated as unsigned.


    **Java 8 users:** use <xref uid="java.lang.Long.toUnsignedString*" data-throw-if-not-resolved="false">Long#toUnsignedString(long, int)</xref> instead.
  syntax:
    content: public static String toString(long x, int radix)
    parameters:
    - id: x
      type: long
      description: the value to convert to a string.
    - id: radix
      type: int
      description: the radix to use while working with <code>x</code>
    return:
      type: java.lang.String
references:
- uid: com.azure.cosmos.implementation.guava25.primitives.UnsignedLongs.UnsignedLongs*
  name: UnsignedLongs
  nameWithType: UnsignedLongs.UnsignedLongs
  fullName: com.azure.cosmos.implementation.guava25.primitives.UnsignedLongs.UnsignedLongs
  package: com.azure.cosmos.implementation.guava25.primitives
- uid: long
  spec.java:
  - uid: long
    name: long
    fullName: long
- uid: int
  spec.java:
  - uid: int
    name: int
    fullName: int
- uid: com.azure.cosmos.implementation.guava25.primitives.UnsignedLongs.compare*
  name: compare
  nameWithType: UnsignedLongs.compare
  fullName: com.azure.cosmos.implementation.guava25.primitives.UnsignedLongs.compare
  package: com.azure.cosmos.implementation.guava25.primitives
- uid: long[]
  spec.java:
  - uid: long
    name: long
    fullName: long
  - name: '[]'
    fullName: '[]'
- uid: com.azure.cosmos.implementation.guava25.primitives.UnsignedLongs.min*
  name: min
  nameWithType: UnsignedLongs.min
  fullName: com.azure.cosmos.implementation.guava25.primitives.UnsignedLongs.min
  package: com.azure.cosmos.implementation.guava25.primitives
- uid: com.azure.cosmos.implementation.guava25.primitives.UnsignedLongs.max*
  name: max
  nameWithType: UnsignedLongs.max
  fullName: com.azure.cosmos.implementation.guava25.primitives.UnsignedLongs.max
  package: com.azure.cosmos.implementation.guava25.primitives
- uid: java.lang.String
  spec.java:
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
- uid: com.azure.cosmos.implementation.guava25.primitives.UnsignedLongs.join*
  name: join
  nameWithType: UnsignedLongs.join
  fullName: com.azure.cosmos.implementation.guava25.primitives.UnsignedLongs.join
  package: com.azure.cosmos.implementation.guava25.primitives
- uid: java.util.Comparator<long[]>
  spec.java:
  - uid: java.util.Comparator
    name: Comparator
    fullName: java.util.Comparator
  - name: <
    fullName: <
  - uid: long
    name: long
    fullName: long
  - name: '[]'
    fullName: '[]'
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.primitives.UnsignedLongs.lexicographicalComparator*
  name: lexicographicalComparator
  nameWithType: UnsignedLongs.lexicographicalComparator
  fullName: com.azure.cosmos.implementation.guava25.primitives.UnsignedLongs.lexicographicalComparator
  package: com.azure.cosmos.implementation.guava25.primitives
- uid: com.azure.cosmos.implementation.guava25.primitives.UnsignedLongs.sort*
  name: sort
  nameWithType: UnsignedLongs.sort
  fullName: com.azure.cosmos.implementation.guava25.primitives.UnsignedLongs.sort
  package: com.azure.cosmos.implementation.guava25.primitives
- uid: com.azure.cosmos.implementation.guava25.primitives.UnsignedLongs.sortDescending*
  name: sortDescending
  nameWithType: UnsignedLongs.sortDescending
  fullName: com.azure.cosmos.implementation.guava25.primitives.UnsignedLongs.sortDescending
  package: com.azure.cosmos.implementation.guava25.primitives
- uid: com.azure.cosmos.implementation.guava25.primitives.UnsignedLongs.divide*
  name: divide
  nameWithType: UnsignedLongs.divide
  fullName: com.azure.cosmos.implementation.guava25.primitives.UnsignedLongs.divide
  package: com.azure.cosmos.implementation.guava25.primitives
- uid: com.azure.cosmos.implementation.guava25.primitives.UnsignedLongs.remainder*
  name: remainder
  nameWithType: UnsignedLongs.remainder
  fullName: com.azure.cosmos.implementation.guava25.primitives.UnsignedLongs.remainder
  package: com.azure.cosmos.implementation.guava25.primitives
- uid: com.azure.cosmos.implementation.guava25.primitives.UnsignedLongs.parseUnsignedLong*
  name: parseUnsignedLong
  nameWithType: UnsignedLongs.parseUnsignedLong
  fullName: com.azure.cosmos.implementation.guava25.primitives.UnsignedLongs.parseUnsignedLong
  package: com.azure.cosmos.implementation.guava25.primitives
- uid: com.azure.cosmos.implementation.guava25.primitives.UnsignedLongs.decode*
  name: decode
  nameWithType: UnsignedLongs.decode
  fullName: com.azure.cosmos.implementation.guava25.primitives.UnsignedLongs.decode
  package: com.azure.cosmos.implementation.guava25.primitives
- uid: com.azure.cosmos.implementation.guava25.primitives.UnsignedLongs.toString*
  name: toString
  nameWithType: UnsignedLongs.toString
  fullName: com.azure.cosmos.implementation.guava25.primitives.UnsignedLongs.toString
  package: com.azure.cosmos.implementation.guava25.primitives
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: java.lang.Object.finalize()
  name: Object.finalize()
  nameWithType: Object.finalize()
  fullName: java.lang.Object.finalize()
- uid: java.lang.Object.clone()
  name: Object.clone()
  nameWithType: Object.clone()
  fullName: java.lang.Object.clone()
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: java.lang.Object.equals(java.lang.Object)
  name: Object.equals(Object)
  nameWithType: Object.equals(Object)
  fullName: java.lang.Object.equals(java.lang.Object)
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.lang.Object.hashCode()
  name: Object.hashCode()
  nameWithType: Object.hashCode()
  fullName: java.lang.Object.hashCode()
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: java.lang.Object.toString()
  name: Object.toString()
  nameWithType: Object.toString()
  fullName: java.lang.Object.toString()
- uid: java.util.Comparator
  name: Comparator
  nameWithType: Comparator
  fullName: java.util.Comparator
