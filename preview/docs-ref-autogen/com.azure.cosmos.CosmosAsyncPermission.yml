### YamlMime:ManagedReference
items:
- uid: "com.azure.cosmos.CosmosAsyncPermission"
  id: "CosmosAsyncPermission"
  parent: "com.azure.cosmos"
  children:
  - "com.azure.cosmos.CosmosAsyncPermission.CosmosAsyncPermission(java.lang.String,com.azure.cosmos.CosmosAsyncUser)"
  - "com.azure.cosmos.CosmosAsyncPermission.delete(com.azure.cosmos.models.CosmosPermissionRequestOptions)"
  - "com.azure.cosmos.CosmosAsyncPermission.getLink()"
  - "com.azure.cosmos.CosmosAsyncPermission.getParentLink()"
  - "com.azure.cosmos.CosmosAsyncPermission.getURIPathSegment()"
  - "com.azure.cosmos.CosmosAsyncPermission.id()"
  - "com.azure.cosmos.CosmosAsyncPermission.id(java.lang.String)"
  - "com.azure.cosmos.CosmosAsyncPermission.read(com.azure.cosmos.models.CosmosPermissionRequestOptions)"
  - "com.azure.cosmos.CosmosAsyncPermission.replace(com.azure.cosmos.models.CosmosPermissionProperties,com.azure.cosmos.models.CosmosPermissionRequestOptions)"
  langs:
  - "java"
  name: "CosmosAsyncPermission"
  nameWithType: "CosmosAsyncPermission"
  fullName: "com.azure.cosmos.CosmosAsyncPermission"
  type: "Class"
  package: "com.azure.cosmos"
  summary: "Has methods to operate on a per-User Permission to access a specific resource"
  syntax:
    content: "public class CosmosAsyncPermission"
  inheritance:
  - "java.lang.Object"
  inheritedMembers:
  - "java.lang.Object.clone()"
  - "java.lang.Object.equals(java.lang.Object)"
  - "java.lang.Object.finalize()"
  - "java.lang.Object.getClass()"
  - "java.lang.Object.hashCode()"
  - "java.lang.Object.notify()"
  - "java.lang.Object.notifyAll()"
  - "java.lang.Object.toString()"
  - "java.lang.Object.wait()"
  - "java.lang.Object.wait(long)"
  - "java.lang.Object.wait(long,int)"
- uid: "com.azure.cosmos.CosmosAsyncPermission.CosmosAsyncPermission(java.lang.String,com.azure.cosmos.CosmosAsyncUser)"
  id: "CosmosAsyncPermission(java.lang.String,com.azure.cosmos.CosmosAsyncUser)"
  parent: "com.azure.cosmos.CosmosAsyncPermission"
  langs:
  - "java"
  name: "CosmosAsyncPermission(String id, CosmosAsyncUser user)"
  nameWithType: "CosmosAsyncPermission.CosmosAsyncPermission(String id, CosmosAsyncUser user)"
  fullName: "com.azure.cosmos.CosmosAsyncPermission.CosmosAsyncPermission(String id, CosmosAsyncUser user)"
  overload: "com.azure.cosmos.CosmosAsyncPermission.CosmosAsyncPermission*"
  type: "Constructor"
  package: "com.azure.cosmos"
  syntax:
    content: " CosmosAsyncPermission(String id, CosmosAsyncUser user)"
    parameters:
    - id: "id"
      type: "java.lang.String"
    - id: "user"
      type: "com.azure.cosmos.CosmosAsyncUser"
- uid: "com.azure.cosmos.CosmosAsyncPermission.delete(com.azure.cosmos.models.CosmosPermissionRequestOptions)"
  id: "delete(com.azure.cosmos.models.CosmosPermissionRequestOptions)"
  parent: "com.azure.cosmos.CosmosAsyncPermission"
  langs:
  - "java"
  name: "delete(CosmosPermissionRequestOptions options)"
  nameWithType: "CosmosAsyncPermission.delete(CosmosPermissionRequestOptions options)"
  fullName: "com.azure.cosmos.CosmosAsyncPermission.delete(CosmosPermissionRequestOptions options)"
  overload: "com.azure.cosmos.CosmosAsyncPermission.delete*"
  type: "Method"
  package: "com.azure.cosmos"
  summary: "Deletes a permission.\n\nAfter subscription the operation will be performed. The <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\">Mono</xref> upon successful completion will contain a single resource response for the deleted permission. In case of failure the <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\">Mono</xref> will error."
  syntax:
    content: "public Mono<CosmosAsyncPermissionResponse> delete(CosmosPermissionRequestOptions options)"
    parameters:
    - id: "options"
      type: "com.azure.cosmos.models.CosmosPermissionRequestOptions"
      description: "the request options."
    return:
      type: "reactor.core.publisher.Mono<com.azure.cosmos.models.CosmosAsyncPermissionResponse>"
      description: "an <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\">Mono</xref> containing the single resource response for the deleted permission or an error."
- uid: "com.azure.cosmos.CosmosAsyncPermission.getLink()"
  id: "getLink()"
  parent: "com.azure.cosmos.CosmosAsyncPermission"
  langs:
  - "java"
  name: "getLink()"
  nameWithType: "CosmosAsyncPermission.getLink()"
  fullName: "com.azure.cosmos.CosmosAsyncPermission.getLink()"
  overload: "com.azure.cosmos.CosmosAsyncPermission.getLink*"
  type: "Method"
  package: "com.azure.cosmos"
  syntax:
    content: " String getLink()"
    return:
      type: "java.lang.String"
- uid: "com.azure.cosmos.CosmosAsyncPermission.getParentLink()"
  id: "getParentLink()"
  parent: "com.azure.cosmos.CosmosAsyncPermission"
  langs:
  - "java"
  name: "getParentLink()"
  nameWithType: "CosmosAsyncPermission.getParentLink()"
  fullName: "com.azure.cosmos.CosmosAsyncPermission.getParentLink()"
  overload: "com.azure.cosmos.CosmosAsyncPermission.getParentLink*"
  type: "Method"
  package: "com.azure.cosmos"
  syntax:
    content: " String getParentLink()"
    return:
      type: "java.lang.String"
- uid: "com.azure.cosmos.CosmosAsyncPermission.getURIPathSegment()"
  id: "getURIPathSegment()"
  parent: "com.azure.cosmos.CosmosAsyncPermission"
  langs:
  - "java"
  name: "getURIPathSegment()"
  nameWithType: "CosmosAsyncPermission.getURIPathSegment()"
  fullName: "com.azure.cosmos.CosmosAsyncPermission.getURIPathSegment()"
  overload: "com.azure.cosmos.CosmosAsyncPermission.getURIPathSegment*"
  type: "Method"
  package: "com.azure.cosmos"
  syntax:
    content: " String getURIPathSegment()"
    return:
      type: "java.lang.String"
- uid: "com.azure.cosmos.CosmosAsyncPermission.id()"
  id: "id()"
  parent: "com.azure.cosmos.CosmosAsyncPermission"
  langs:
  - "java"
  name: "id()"
  nameWithType: "CosmosAsyncPermission.id()"
  fullName: "com.azure.cosmos.CosmosAsyncPermission.id()"
  overload: "com.azure.cosmos.CosmosAsyncPermission.id*"
  type: "Method"
  package: "com.azure.cosmos"
  summary: "Get the id of the <xref uid=\"com.azure.cosmos.CosmosAsyncPermission\" data-throw-if-not-resolved=\"false\">CosmosAsyncPermission</xref>"
  syntax:
    content: "public String id()"
    return:
      type: "java.lang.String"
      description: "the id of the <xref uid=\"com.azure.cosmos.CosmosAsyncPermission\" data-throw-if-not-resolved=\"false\">CosmosAsyncPermission</xref>"
- uid: "com.azure.cosmos.CosmosAsyncPermission.id(java.lang.String)"
  id: "id(java.lang.String)"
  parent: "com.azure.cosmos.CosmosAsyncPermission"
  langs:
  - "java"
  name: "id(String id)"
  nameWithType: "CosmosAsyncPermission.id(String id)"
  fullName: "com.azure.cosmos.CosmosAsyncPermission.id(String id)"
  overload: "com.azure.cosmos.CosmosAsyncPermission.id*"
  type: "Method"
  package: "com.azure.cosmos"
  summary: "Set the id of the <xref uid=\"com.azure.cosmos.CosmosAsyncPermission\" data-throw-if-not-resolved=\"false\">CosmosAsyncPermission</xref>"
  syntax:
    content: " CosmosAsyncPermission id(String id)"
    parameters:
    - id: "id"
      type: "java.lang.String"
      description: "the id of the <xref uid=\"com.azure.cosmos.CosmosAsyncPermission\" data-throw-if-not-resolved=\"false\">CosmosAsyncPermission</xref>"
    return:
      type: "com.azure.cosmos.CosmosAsyncPermission"
      description: "the same <xref uid=\"com.azure.cosmos.CosmosAsyncPermission\" data-throw-if-not-resolved=\"false\">CosmosAsyncPermission</xref> that had the id set"
- uid: "com.azure.cosmos.CosmosAsyncPermission.read(com.azure.cosmos.models.CosmosPermissionRequestOptions)"
  id: "read(com.azure.cosmos.models.CosmosPermissionRequestOptions)"
  parent: "com.azure.cosmos.CosmosAsyncPermission"
  langs:
  - "java"
  name: "read(CosmosPermissionRequestOptions options)"
  nameWithType: "CosmosAsyncPermission.read(CosmosPermissionRequestOptions options)"
  fullName: "com.azure.cosmos.CosmosAsyncPermission.read(CosmosPermissionRequestOptions options)"
  overload: "com.azure.cosmos.CosmosAsyncPermission.read*"
  type: "Method"
  package: "com.azure.cosmos"
  summary: "Reads a permission.\n\nAfter subscription the operation will be performed. The <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\">Mono</xref> upon successful completion will contain a single resource response with the read permission. In case of failure the <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\">Mono</xref> will error."
  syntax:
    content: "public Mono<CosmosAsyncPermissionResponse> read(CosmosPermissionRequestOptions options)"
    parameters:
    - id: "options"
      type: "com.azure.cosmos.models.CosmosPermissionRequestOptions"
      description: "the request options."
    return:
      type: "reactor.core.publisher.Mono<com.azure.cosmos.models.CosmosAsyncPermissionResponse>"
      description: "an <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\">Mono</xref> containing the single resource response with the read permission or an error."
- uid: "com.azure.cosmos.CosmosAsyncPermission.replace(com.azure.cosmos.models.CosmosPermissionProperties,com.azure.cosmos.models.CosmosPermissionRequestOptions)"
  id: "replace(com.azure.cosmos.models.CosmosPermissionProperties,com.azure.cosmos.models.CosmosPermissionRequestOptions)"
  parent: "com.azure.cosmos.CosmosAsyncPermission"
  langs:
  - "java"
  name: "replace(CosmosPermissionProperties permissionSettings, CosmosPermissionRequestOptions options)"
  nameWithType: "CosmosAsyncPermission.replace(CosmosPermissionProperties permissionSettings, CosmosPermissionRequestOptions options)"
  fullName: "com.azure.cosmos.CosmosAsyncPermission.replace(CosmosPermissionProperties permissionSettings, CosmosPermissionRequestOptions options)"
  overload: "com.azure.cosmos.CosmosAsyncPermission.replace*"
  type: "Method"
  package: "com.azure.cosmos"
  summary: "Replaces a permission.\n\nAfter subscription the operation will be performed. The <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\">Mono</xref> upon successful completion will contain a single resource response with the replaced permission. In case of failure the <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\">Mono</xref> will error."
  syntax:
    content: "public Mono<CosmosAsyncPermissionResponse> replace(CosmosPermissionProperties permissionSettings, CosmosPermissionRequestOptions options)"
    parameters:
    - id: "permissionSettings"
      type: "com.azure.cosmos.models.CosmosPermissionProperties"
      description: "the permission properties to use."
    - id: "options"
      type: "com.azure.cosmos.models.CosmosPermissionRequestOptions"
      description: "the request options."
    return:
      type: "reactor.core.publisher.Mono<com.azure.cosmos.models.CosmosAsyncPermissionResponse>"
      description: "an <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\">Mono</xref> containing the single resource response with the replaced permission or an error."
references:
- uid: "java.lang.String"
  spec.java:
  - uid: "java.lang.String"
    name: "String"
    fullName: "java.lang.String"
- uid: "com.azure.cosmos.CosmosAsyncUser"
  name: "CosmosAsyncUser"
  nameWithType: "CosmosAsyncUser"
  fullName: "com.azure.cosmos.CosmosAsyncUser"
- uid: "com.azure.cosmos.CosmosAsyncPermission.CosmosAsyncPermission*"
  name: "CosmosAsyncPermission"
  nameWithType: "CosmosAsyncPermission.CosmosAsyncPermission"
  fullName: "com.azure.cosmos.CosmosAsyncPermission.CosmosAsyncPermission"
  package: "com.azure.cosmos"
- uid: "com.azure.cosmos.CosmosAsyncPermission.id*"
  name: "id"
  nameWithType: "CosmosAsyncPermission.id"
  fullName: "com.azure.cosmos.CosmosAsyncPermission.id"
  package: "com.azure.cosmos"
- uid: "com.azure.cosmos.models.CosmosPermissionRequestOptions"
  name: "CosmosPermissionRequestOptions"
  nameWithType: "CosmosPermissionRequestOptions"
  fullName: "com.azure.cosmos.models.CosmosPermissionRequestOptions"
- uid: "reactor.core.publisher.Mono<com.azure.cosmos.models.CosmosAsyncPermissionResponse>"
  spec.java:
  - uid: "reactor.core.publisher.Mono"
    name: "Mono"
    fullName: "reactor.core.publisher.Mono"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.cosmos.models.CosmosAsyncPermissionResponse"
    name: "CosmosAsyncPermissionResponse"
    fullName: "com.azure.cosmos.models.CosmosAsyncPermissionResponse"
  - name: ">"
    fullName: ">"
- uid: "com.azure.cosmos.CosmosAsyncPermission.read*"
  name: "read"
  nameWithType: "CosmosAsyncPermission.read"
  fullName: "com.azure.cosmos.CosmosAsyncPermission.read"
  package: "com.azure.cosmos"
- uid: "com.azure.cosmos.models.CosmosPermissionProperties"
  name: "CosmosPermissionProperties"
  nameWithType: "CosmosPermissionProperties"
  fullName: "com.azure.cosmos.models.CosmosPermissionProperties"
- uid: "com.azure.cosmos.CosmosAsyncPermission.replace*"
  name: "replace"
  nameWithType: "CosmosAsyncPermission.replace"
  fullName: "com.azure.cosmos.CosmosAsyncPermission.replace"
  package: "com.azure.cosmos"
- uid: "com.azure.cosmos.CosmosAsyncPermission.delete*"
  name: "delete"
  nameWithType: "CosmosAsyncPermission.delete"
  fullName: "com.azure.cosmos.CosmosAsyncPermission.delete"
  package: "com.azure.cosmos"
- uid: "com.azure.cosmos.CosmosAsyncPermission.getURIPathSegment*"
  name: "getURIPathSegment"
  nameWithType: "CosmosAsyncPermission.getURIPathSegment"
  fullName: "com.azure.cosmos.CosmosAsyncPermission.getURIPathSegment"
  package: "com.azure.cosmos"
- uid: "com.azure.cosmos.CosmosAsyncPermission.getParentLink*"
  name: "getParentLink"
  nameWithType: "CosmosAsyncPermission.getParentLink"
  fullName: "com.azure.cosmos.CosmosAsyncPermission.getParentLink"
  package: "com.azure.cosmos"
- uid: "com.azure.cosmos.CosmosAsyncPermission.getLink*"
  name: "getLink"
  nameWithType: "CosmosAsyncPermission.getLink"
  fullName: "com.azure.cosmos.CosmosAsyncPermission.getLink"
  package: "com.azure.cosmos"
- uid: "java.lang.Object.notify()"
  name: "Object.notify()"
  nameWithType: "Object.notify()"
  fullName: "java.lang.Object.notify()"
- uid: "java.lang.Object.wait()"
  name: "Object.wait()"
  nameWithType: "Object.wait()"
  fullName: "java.lang.Object.wait()"
- uid: "java.lang.Object.finalize()"
  name: "Object.finalize()"
  nameWithType: "Object.finalize()"
  fullName: "java.lang.Object.finalize()"
- uid: "java.lang.Object.clone()"
  name: "Object.clone()"
  nameWithType: "Object.clone()"
  fullName: "java.lang.Object.clone()"
- uid: "java.lang.Object.notifyAll()"
  name: "Object.notifyAll()"
  nameWithType: "Object.notifyAll()"
  fullName: "java.lang.Object.notifyAll()"
- uid: "java.lang.Object.equals(java.lang.Object)"
  name: "Object.equals(Object)"
  nameWithType: "Object.equals(Object)"
  fullName: "java.lang.Object.equals(java.lang.Object)"
- uid: "java.lang.Object.getClass()"
  name: "Object.getClass()"
  nameWithType: "Object.getClass()"
  fullName: "java.lang.Object.getClass()"
- uid: "java.lang.Object.wait(long)"
  name: "Object.wait(long)"
  nameWithType: "Object.wait(long)"
  fullName: "java.lang.Object.wait(long)"
- uid: "java.lang.Object.hashCode()"
  name: "Object.hashCode()"
  nameWithType: "Object.hashCode()"
  fullName: "java.lang.Object.hashCode()"
- uid: "java.lang.Object.wait(long,int)"
  name: "Object.wait(long,int)"
  nameWithType: "Object.wait(long,int)"
  fullName: "java.lang.Object.wait(long,int)"
- uid: "java.lang.Object.toString()"
  name: "Object.toString()"
  nameWithType: "Object.toString()"
  fullName: "java.lang.Object.toString()"
- uid: "com.azure.cosmos.models.CosmosAsyncPermissionResponse"
  name: "CosmosAsyncPermissionResponse"
  nameWithType: "CosmosAsyncPermissionResponse"
  fullName: "com.azure.cosmos.models.CosmosAsyncPermissionResponse"
- uid: "reactor.core.publisher.Mono"
  name: "Mono"
  nameWithType: "Mono"
  fullName: "reactor.core.publisher.Mono"
