### YamlMime:ManagedReference
items:
- uid: com.azure.cosmos.CosmosAsyncPermission
  id: CosmosAsyncPermission
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos
  children:
  - com.azure.cosmos.CosmosAsyncPermission.delete(com.azure.cosmos.models.CosmosPermissionRequestOptions)
  - com.azure.cosmos.CosmosAsyncPermission.getId()
  - com.azure.cosmos.CosmosAsyncPermission.read(com.azure.cosmos.models.CosmosPermissionRequestOptions)
  - com.azure.cosmos.CosmosAsyncPermission.replace(com.azure.cosmos.models.CosmosPermissionProperties,com.azure.cosmos.models.CosmosPermissionRequestOptions)
  langs:
  - java
  name: CosmosAsyncPermission
  nameWithType: CosmosAsyncPermission
  fullName: com.azure.cosmos.CosmosAsyncPermission
  type: Class
  package: com.azure.cosmos
  summary: Has methods to operate on a per-User Permission to access a specific resource
  syntax:
    content: public class CosmosAsyncPermission
  inheritance:
  - java.lang.Object
  inheritedMembers:
  - java.lang.Object.clone()
  - java.lang.Object.equals(java.lang.Object)
  - java.lang.Object.finalize()
  - java.lang.Object.getClass()
  - java.lang.Object.hashCode()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.toString()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
- uid: com.azure.cosmos.CosmosAsyncPermission.CosmosAsyncPermission(java.lang.String,com.azure.cosmos.CosmosAsyncUser)
  id: CosmosAsyncPermission(java.lang.String,com.azure.cosmos.CosmosAsyncUser)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.CosmosAsyncPermission
  langs:
  - java
  name: CosmosAsyncPermission(String id, CosmosAsyncUser user)
  nameWithType: CosmosAsyncPermission.CosmosAsyncPermission(String id, CosmosAsyncUser user)
  fullName: com.azure.cosmos.CosmosAsyncPermission.CosmosAsyncPermission(String id, CosmosAsyncUser user)
  overload: com.azure.cosmos.CosmosAsyncPermission.CosmosAsyncPermission*
  type: Constructor
  package: com.azure.cosmos
  syntax:
    content: " CosmosAsyncPermission(String id, CosmosAsyncUser user)"
    parameters:
    - id: id
      type: java.lang.String
    - id: user
      type: com.azure.cosmos.CosmosAsyncUser
- uid: com.azure.cosmos.CosmosAsyncPermission.delete(com.azure.cosmos.models.CosmosPermissionRequestOptions)
  id: delete(com.azure.cosmos.models.CosmosPermissionRequestOptions)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.CosmosAsyncPermission
  langs:
  - java
  name: delete(CosmosPermissionRequestOptions options)
  nameWithType: CosmosAsyncPermission.delete(CosmosPermissionRequestOptions options)
  fullName: com.azure.cosmos.CosmosAsyncPermission.delete(CosmosPermissionRequestOptions options)
  overload: com.azure.cosmos.CosmosAsyncPermission.delete*
  type: Method
  package: com.azure.cosmos
  summary: >-
    Deletes a permission.


    After subscription the operation will be performed. The <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> upon successful completion will contain a single resource response for the deleted permission. In case of failure the <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> will error.
  syntax:
    content: public Mono<CosmosPermissionResponse> delete(CosmosPermissionRequestOptions options)
    parameters:
    - id: options
      type: com.azure.cosmos.models.CosmosPermissionRequestOptions
      description: the request options.
    return:
      type: reactor.core.publisher.Mono<com.azure.cosmos.models.CosmosPermissionResponse>
      description: an <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> containing the single resource response for the deleted permission or an error.
- uid: com.azure.cosmos.CosmosAsyncPermission.getId()
  id: getId()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.CosmosAsyncPermission
  langs:
  - java
  name: getId()
  nameWithType: CosmosAsyncPermission.getId()
  fullName: com.azure.cosmos.CosmosAsyncPermission.getId()
  overload: com.azure.cosmos.CosmosAsyncPermission.getId*
  type: Method
  package: com.azure.cosmos
  summary: Get the id of the <xref uid="com.azure.cosmos.CosmosAsyncPermission" data-throw-if-not-resolved="false">CosmosAsyncPermission</xref>
  syntax:
    content: public String getId()
    return:
      type: java.lang.String
      description: the id of the <xref uid="com.azure.cosmos.CosmosAsyncPermission" data-throw-if-not-resolved="false">CosmosAsyncPermission</xref>
- uid: com.azure.cosmos.CosmosAsyncPermission.read(com.azure.cosmos.models.CosmosPermissionRequestOptions)
  id: read(com.azure.cosmos.models.CosmosPermissionRequestOptions)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.CosmosAsyncPermission
  langs:
  - java
  name: read(CosmosPermissionRequestOptions options)
  nameWithType: CosmosAsyncPermission.read(CosmosPermissionRequestOptions options)
  fullName: com.azure.cosmos.CosmosAsyncPermission.read(CosmosPermissionRequestOptions options)
  overload: com.azure.cosmos.CosmosAsyncPermission.read*
  type: Method
  package: com.azure.cosmos
  summary: >-
    Reads a permission.


    After subscription the operation will be performed. The <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> upon successful completion will contain a single resource response with the read permission. In case of failure the <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> will error.
  syntax:
    content: public Mono<CosmosPermissionResponse> read(CosmosPermissionRequestOptions options)
    parameters:
    - id: options
      type: com.azure.cosmos.models.CosmosPermissionRequestOptions
      description: the request options.
    return:
      type: reactor.core.publisher.Mono<com.azure.cosmos.models.CosmosPermissionResponse>
      description: an <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> containing the single resource response with the read permission or an error.
- uid: com.azure.cosmos.CosmosAsyncPermission.replace(com.azure.cosmos.models.CosmosPermissionProperties,com.azure.cosmos.models.CosmosPermissionRequestOptions)
  id: replace(com.azure.cosmos.models.CosmosPermissionProperties,com.azure.cosmos.models.CosmosPermissionRequestOptions)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.CosmosAsyncPermission
  langs:
  - java
  name: replace(CosmosPermissionProperties permissionProperties, CosmosPermissionRequestOptions options)
  nameWithType: CosmosAsyncPermission.replace(CosmosPermissionProperties permissionProperties, CosmosPermissionRequestOptions options)
  fullName: com.azure.cosmos.CosmosAsyncPermission.replace(CosmosPermissionProperties permissionProperties, CosmosPermissionRequestOptions options)
  overload: com.azure.cosmos.CosmosAsyncPermission.replace*
  type: Method
  package: com.azure.cosmos
  summary: >-
    Replaces a permission.


    After subscription the operation will be performed. The <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> upon successful completion will contain a single resource response with the replaced permission. In case of failure the <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> will error.
  syntax:
    content: public Mono<CosmosPermissionResponse> replace(CosmosPermissionProperties permissionProperties, CosmosPermissionRequestOptions options)
    parameters:
    - id: permissionProperties
      type: com.azure.cosmos.models.CosmosPermissionProperties
      description: the permission properties to use.
    - id: options
      type: com.azure.cosmos.models.CosmosPermissionRequestOptions
      description: the request options.
    return:
      type: reactor.core.publisher.Mono<com.azure.cosmos.models.CosmosPermissionResponse>
      description: an <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> containing the single resource response with the replaced permission or an error.
references:
- uid: java.lang.String
  spec.java:
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
- uid: com.azure.cosmos.CosmosAsyncUser
  name: CosmosAsyncUser
  nameWithType: CosmosAsyncUser
  fullName: com.azure.cosmos.CosmosAsyncUser
- uid: com.azure.cosmos.CosmosAsyncPermission.CosmosAsyncPermission*
  name: CosmosAsyncPermission
  nameWithType: CosmosAsyncPermission.CosmosAsyncPermission
  fullName: com.azure.cosmos.CosmosAsyncPermission.CosmosAsyncPermission
  package: com.azure.cosmos
- uid: com.azure.cosmos.CosmosAsyncPermission.getId*
  name: getId
  nameWithType: CosmosAsyncPermission.getId
  fullName: com.azure.cosmos.CosmosAsyncPermission.getId
  package: com.azure.cosmos
- uid: com.azure.cosmos.models.CosmosPermissionRequestOptions
  name: CosmosPermissionRequestOptions
  nameWithType: CosmosPermissionRequestOptions
  fullName: com.azure.cosmos.models.CosmosPermissionRequestOptions
- uid: reactor.core.publisher.Mono<com.azure.cosmos.models.CosmosPermissionResponse>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: com.azure.cosmos.models.CosmosPermissionResponse
    name: CosmosPermissionResponse
    fullName: com.azure.cosmos.models.CosmosPermissionResponse
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.CosmosAsyncPermission.read*
  name: read
  nameWithType: CosmosAsyncPermission.read
  fullName: com.azure.cosmos.CosmosAsyncPermission.read
  package: com.azure.cosmos
- uid: com.azure.cosmos.models.CosmosPermissionProperties
  name: CosmosPermissionProperties
  nameWithType: CosmosPermissionProperties
  fullName: com.azure.cosmos.models.CosmosPermissionProperties
- uid: com.azure.cosmos.CosmosAsyncPermission.replace*
  name: replace
  nameWithType: CosmosAsyncPermission.replace
  fullName: com.azure.cosmos.CosmosAsyncPermission.replace
  package: com.azure.cosmos
- uid: com.azure.cosmos.CosmosAsyncPermission.delete*
  name: delete
  nameWithType: CosmosAsyncPermission.delete
  fullName: com.azure.cosmos.CosmosAsyncPermission.delete
  package: com.azure.cosmos
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: java.lang.Object.finalize()
  name: Object.finalize()
  nameWithType: Object.finalize()
  fullName: java.lang.Object.finalize()
- uid: java.lang.Object.clone()
  name: Object.clone()
  nameWithType: Object.clone()
  fullName: java.lang.Object.clone()
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: java.lang.Object.equals(java.lang.Object)
  name: Object.equals(Object)
  nameWithType: Object.equals(Object)
  fullName: java.lang.Object.equals(java.lang.Object)
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.lang.Object.hashCode()
  name: Object.hashCode()
  nameWithType: Object.hashCode()
  fullName: java.lang.Object.hashCode()
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: java.lang.Object.toString()
  name: Object.toString()
  nameWithType: Object.toString()
  fullName: java.lang.Object.toString()
- uid: reactor.core.publisher.Mono
  name: Mono
  nameWithType: Mono
  fullName: reactor.core.publisher.Mono
- uid: com.azure.cosmos.models.CosmosPermissionResponse
  name: CosmosPermissionResponse
  nameWithType: CosmosPermissionResponse
  fullName: com.azure.cosmos.models.CosmosPermissionResponse
