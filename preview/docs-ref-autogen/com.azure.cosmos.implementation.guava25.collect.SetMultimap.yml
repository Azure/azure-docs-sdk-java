### YamlMime:ManagedReference
items:
- uid: com.azure.cosmos.implementation.guava25.collect.SetMultimap
  id: SetMultimap
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect
  children:
  - com.azure.cosmos.implementation.guava25.collect.SetMultimap.asMap()
  - com.azure.cosmos.implementation.guava25.collect.SetMultimap.entries()
  - com.azure.cosmos.implementation.guava25.collect.SetMultimap.equals(java.lang.Object)
  - com.azure.cosmos.implementation.guava25.collect.SetMultimap.get(K)
  - com.azure.cosmos.implementation.guava25.collect.SetMultimap.removeAll(java.lang.Object)
  - com.azure.cosmos.implementation.guava25.collect.SetMultimap.replaceValues(K,java.lang.Iterable<? extends V>)
  langs:
  - java
  name: SetMultimap<K,V>
  nameWithType: SetMultimap<K,V>
  fullName: com.azure.cosmos.implementation.guava25.collect.SetMultimap<K,V>
  type: Interface
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    A `Multimap` that cannot hold duplicate key-value pairs. Adding a key-value pair that's already in the multimap has no effect. See the <xref uid="com.azure.cosmos.implementation.guava25.collect.Multimap" data-throw-if-not-resolved="false">Multimap</xref> documentation for information common to all multimaps.


    The <xref uid="com.azure.cosmos.implementation.guava25.collect.SetMultimap.get" data-throw-if-not-resolved="false">#get</xref>, <xref uid="com.azure.cosmos.implementation.guava25.collect.SetMultimap.removeAll" data-throw-if-not-resolved="false">#removeAll</xref>, and <xref uid="com.azure.cosmos.implementation.guava25.collect.SetMultimap.replaceValues" data-throw-if-not-resolved="false">#replaceValues</xref> methods each return a <xref uid="java.util.Set" data-throw-if-not-resolved="false">Set</xref> of values, while <xref uid="com.azure.cosmos.implementation.guava25.collect.SetMultimap.entries" data-throw-if-not-resolved="false">#entries</xref> returns a `Set` of map entries. Though the method signature doesn't say so explicitly, the map returned by <xref uid="com.azure.cosmos.implementation.guava25.collect.SetMultimap.asMap" data-throw-if-not-resolved="false">#asMap</xref> has `Set` values.


    If the values corresponding to a single key should be ordered according to a <xref uid="java.util.Comparator" data-throw-if-not-resolved="false">java.util.Comparator</xref> (or the natural order), see the <xref uid="com.azure.cosmos.implementation.guava25.collect.SortedSetMultimap" data-throw-if-not-resolved="false">SortedSetMultimap</xref> subinterface.


    Since the value collections are sets, the behavior of a `SetMultimap` is not specified if key *or value* objects already present in the multimap change in a manner that affects `equals` comparisons. Use caution if mutable objects are used as keys or values in a `SetMultimap`.


    See the Guava User Guide article on [ `Multimap`][_Multimap].



    [_Multimap]: https://github.com/google/guava/wiki/NewCollectionTypesExplained#multimap
  syntax:
    content: public interface SetMultimap<K,V> extends Multimap<K,V>
    typeParameters:
    - id: K
    - id: V
  implements:
  - com.azure.cosmos.implementation.guava25.collect.Multimap<K,V>
- uid: com.azure.cosmos.implementation.guava25.collect.SetMultimap.asMap()
  id: asMap()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.SetMultimap
  langs:
  - java
  name: asMap()
  nameWithType: SetMultimap<K,V>.asMap()
  fullName: com.azure.cosmos.implementation.guava25.collect.SetMultimap<K,V>.asMap()
  overload: com.azure.cosmos.implementation.guava25.collect.SetMultimap.asMap*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Returns a view of this multimap as a `Map` from each distinct key to the nonempty collection of that key's associated values. Note that `this.asMap().get(k)` is equivalent to `this.get(k)` only when `k` is a key contained in the multimap; otherwise it returns `null` as opposed to an empty collection.


    Changes to the returned map or the collections that serve as its values will update the underlying multimap, and vice versa. The map does not support `put` or `putAll`, nor do its entries support <xref uid="java.util.Map.Entry.setValue" data-throw-if-not-resolved="false">setValue</xref>.


    **Note:** The returned map's values are guaranteed to be of type <xref uid="java.util.Set" data-throw-if-not-resolved="false">Set</xref>. To obtain this map with the more specific generic type `Map>`, call <xref uid="com.azure.cosmos.implementation.guava25.collect.Multimaps.&lt;K,V&gt;asMap(com.azure.cosmos.implementation.guava25.collect.SetMultimap&lt;K,V&gt;)" data-throw-if-not-resolved="false">Multimaps#asMap(SetMultimap)</xref> instead.
  syntax:
    content: public abstract Map<K,Collection<V>> asMap()
    return:
      type: java.util.Map<K,java.util.Collection<V>>
- uid: com.azure.cosmos.implementation.guava25.collect.SetMultimap.entries()
  id: entries()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.SetMultimap
  langs:
  - java
  name: entries()
  nameWithType: SetMultimap<K,V>.entries()
  fullName: com.azure.cosmos.implementation.guava25.collect.SetMultimap<K,V>.entries()
  overload: com.azure.cosmos.implementation.guava25.collect.SetMultimap.entries*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Returns a view collection of all key-value pairs contained in this multimap, as <xref uid="java.util.Map.Entry" data-throw-if-not-resolved="false">Entry</xref> instances.


    Changes to the returned collection or the entries it contains will update the underlying multimap, and vice versa. However, *adding* to the returned collection is not possible.


    Because a `SetMultimap` has unique values for a given key, this method returns a <xref uid="java.util.Set" data-throw-if-not-resolved="false">Set</xref>, instead of the <xref uid="java.util.Collection" data-throw-if-not-resolved="false">java.util.Collection</xref> specified in the <xref uid="com.azure.cosmos.implementation.guava25.collect.Multimap" data-throw-if-not-resolved="false">Multimap</xref> interface.
  syntax:
    content: public abstract Set<Map.Entry<K,V>> entries()
    return:
      type: java.util.Set<java.util.Map.Entry<K,V>>
- uid: com.azure.cosmos.implementation.guava25.collect.SetMultimap.equals(java.lang.Object)
  id: equals(java.lang.Object)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.SetMultimap
  langs:
  - java
  name: equals(Object obj)
  nameWithType: SetMultimap<K,V>.equals(Object obj)
  fullName: com.azure.cosmos.implementation.guava25.collect.SetMultimap<K,V>.equals(Object obj)
  overload: com.azure.cosmos.implementation.guava25.collect.SetMultimap.equals*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Compares the specified object to this multimap for equality.


    Two `SetMultimap` instances are equal if, for each key, they contain the same values. Equality does not depend on the ordering of keys or values.


    An empty `SetMultimap` is equal to any other empty `Multimap`, including an empty `ListMultimap`.
  syntax:
    content: public abstract boolean equals(Object obj)
    parameters:
    - id: obj
      type: java.lang.Object
    return:
      type: boolean
- uid: com.azure.cosmos.implementation.guava25.collect.SetMultimap.get(K)
  id: get(K)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.SetMultimap
  langs:
  - java
  name: get(K key)
  nameWithType: SetMultimap<K,V>.get(K key)
  fullName: com.azure.cosmos.implementation.guava25.collect.SetMultimap<K,V>.get(K key)
  overload: com.azure.cosmos.implementation.guava25.collect.SetMultimap.get*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Returns a view collection of the values associated with `key` in this multimap, if any. Note that when `containsKey(key)` is false, this returns an empty collection, not `null`.


    Changes to the returned collection will update the underlying multimap, and vice versa.


    Because a `SetMultimap` has unique values for a given key, this method returns a <xref uid="java.util.Set" data-throw-if-not-resolved="false">Set</xref>, instead of the <xref uid="java.util.Collection" data-throw-if-not-resolved="false">java.util.Collection</xref> specified in the <xref uid="com.azure.cosmos.implementation.guava25.collect.Multimap" data-throw-if-not-resolved="false">Multimap</xref> interface.
  syntax:
    content: public abstract Set<V> get(K key)
    parameters:
    - id: key
      type: K
    return:
      type: java.util.Set<V>
- uid: com.azure.cosmos.implementation.guava25.collect.SetMultimap.removeAll(java.lang.Object)
  id: removeAll(java.lang.Object)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.SetMultimap
  langs:
  - java
  name: removeAll(Object key)
  nameWithType: SetMultimap<K,V>.removeAll(Object key)
  fullName: com.azure.cosmos.implementation.guava25.collect.SetMultimap<K,V>.removeAll(Object key)
  overload: com.azure.cosmos.implementation.guava25.collect.SetMultimap.removeAll*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Removes all values associated with the key `key`.


    Once this method returns, `key` will not be mapped to any values, so it will not appear in <xref uid="com.azure.cosmos.implementation.guava25.collect.SetMultimap.keySet*" data-throw-if-not-resolved="false">#keySet()</xref>, <xref uid="com.azure.cosmos.implementation.guava25.collect.SetMultimap.asMap()" data-throw-if-not-resolved="false">#asMap()</xref>, or any other views.


    Because a `SetMultimap` has unique values for a given key, this method returns a <xref uid="java.util.Set" data-throw-if-not-resolved="false">Set</xref>, instead of the <xref uid="java.util.Collection" data-throw-if-not-resolved="false">java.util.Collection</xref> specified in the <xref uid="com.azure.cosmos.implementation.guava25.collect.Multimap" data-throw-if-not-resolved="false">Multimap</xref> interface.
  syntax:
    content: public abstract Set<V> removeAll(Object key)
    parameters:
    - id: key
      type: java.lang.Object
    return:
      type: java.util.Set<V>
- uid: com.azure.cosmos.implementation.guava25.collect.SetMultimap.replaceValues(K,java.lang.Iterable<? extends V>)
  id: replaceValues(K,java.lang.Iterable<? extends V>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.SetMultimap
  langs:
  - java
  name: replaceValues(K key, Iterable<? extends V> values)
  nameWithType: SetMultimap<K,V>.replaceValues(K key, Iterable<? extends V> values)
  fullName: com.azure.cosmos.implementation.guava25.collect.SetMultimap<K,V>.replaceValues(K key, Iterable<? extends V> values)
  overload: com.azure.cosmos.implementation.guava25.collect.SetMultimap.replaceValues*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Stores a collection of values with the same key, replacing any existing values for that key.


    If `values` is empty, this is equivalent to <xref uid="com.azure.cosmos.implementation.guava25.collect.SetMultimap.removeAll(java.lang.Object)" data-throw-if-not-resolved="false">removeAll(key)</xref>.


    Because a `SetMultimap` has unique values for a given key, this method returns a <xref uid="java.util.Set" data-throw-if-not-resolved="false">Set</xref>, instead of the <xref uid="java.util.Collection" data-throw-if-not-resolved="false">java.util.Collection</xref> specified in the <xref uid="com.azure.cosmos.implementation.guava25.collect.Multimap" data-throw-if-not-resolved="false">Multimap</xref> interface.


    Any duplicates in `values` will be stored in the multimap once.
  syntax:
    content: public abstract Set<V> replaceValues(K key, Iterable<? extends V> values)
    parameters:
    - id: key
      type: K
    - id: values
      type: java.lang.Iterable<? extends V>
    return:
      type: java.util.Set<V>
references:
- uid: K
  spec.java:
  - uid: K
    name: K
    fullName: K
- uid: java.util.Set<V>
  spec.java:
  - uid: java.util.Set
    name: Set
    fullName: java.util.Set
  - name: <
    fullName: <
  - uid: V
    name: V
    fullName: V
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.SetMultimap.get*
  name: get
  nameWithType: SetMultimap<K,V>.get
  fullName: com.azure.cosmos.implementation.guava25.collect.SetMultimap<K,V>.get
  package: com.azure.cosmos.implementation.guava25.collect
- uid: java.lang.Object
  spec.java:
  - uid: java.lang.Object
    name: Object
    fullName: java.lang.Object
- uid: com.azure.cosmos.implementation.guava25.collect.SetMultimap.removeAll*
  name: removeAll
  nameWithType: SetMultimap<K,V>.removeAll
  fullName: com.azure.cosmos.implementation.guava25.collect.SetMultimap<K,V>.removeAll
  package: com.azure.cosmos.implementation.guava25.collect
- uid: java.lang.Iterable<? extends V>
  spec.java:
  - uid: java.lang.Iterable
    name: Iterable
    fullName: java.lang.Iterable
  - name: <
    fullName: <
  - uid: '? extends V'
    name: '? extends V'
    fullName: '? extends V'
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.SetMultimap.replaceValues*
  name: replaceValues
  nameWithType: SetMultimap<K,V>.replaceValues
  fullName: com.azure.cosmos.implementation.guava25.collect.SetMultimap<K,V>.replaceValues
  package: com.azure.cosmos.implementation.guava25.collect
- uid: java.util.Set<java.util.Map.Entry<K,V>>
  spec.java:
  - uid: java.util.Set
    name: Set
    fullName: java.util.Set
  - name: <
    fullName: <
  - uid: java.util.Map.Entry
    name: Entry
    fullName: java.util.Map.Entry
  - name: <
    fullName: <
  - uid: K
    name: K
    fullName: K
  - name: ','
    fullName: ','
  - uid: V
    name: V
    fullName: V
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.SetMultimap.entries*
  name: entries
  nameWithType: SetMultimap<K,V>.entries
  fullName: com.azure.cosmos.implementation.guava25.collect.SetMultimap<K,V>.entries
  package: com.azure.cosmos.implementation.guava25.collect
- uid: java.util.Map<K,java.util.Collection<V>>
  spec.java:
  - uid: java.util.Map
    name: Map
    fullName: java.util.Map
  - name: <
    fullName: <
  - uid: K
    name: K
    fullName: K
  - name: ','
    fullName: ','
  - uid: java.util.Collection
    name: Collection
    fullName: java.util.Collection
  - name: <
    fullName: <
  - uid: V
    name: V
    fullName: V
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.SetMultimap.asMap*
  name: asMap
  nameWithType: SetMultimap<K,V>.asMap
  fullName: com.azure.cosmos.implementation.guava25.collect.SetMultimap<K,V>.asMap
  package: com.azure.cosmos.implementation.guava25.collect
- uid: boolean
  spec.java:
  - uid: boolean
    name: boolean
    fullName: boolean
- uid: com.azure.cosmos.implementation.guava25.collect.SetMultimap.equals*
  name: equals
  nameWithType: SetMultimap<K,V>.equals
  fullName: com.azure.cosmos.implementation.guava25.collect.SetMultimap<K,V>.equals
  package: com.azure.cosmos.implementation.guava25.collect
- uid: V
  name: V
  nameWithType: V
  fullName: V
- uid: com.azure.cosmos.implementation.guava25.collect.Multimap<K,V>
  name: Multimap<K,V>
  nameWithType: Multimap<K,V>
  fullName: com.azure.cosmos.implementation.guava25.collect.Multimap<K,V>
- uid: java.util.Set
  name: Set
  nameWithType: Set
  fullName: java.util.Set
- uid: '? extends V'
  name: '? extends V'
  nameWithType: '? extends V'
  fullName: '? extends V'
- uid: java.lang.Iterable
  name: Iterable
  nameWithType: Iterable
  fullName: java.lang.Iterable
- uid: K,V
  name: K,V
  nameWithType: K,V
  fullName: K,V
- uid: java.util.Map.Entry
  name: Map.Entry
  nameWithType: Map.Entry
  fullName: java.util.Map.Entry
- uid: java.util.Map
  name: Map
  nameWithType: Map
  fullName: java.util.Map
- uid: K,java.util.Collection
  name: K,Collection
  nameWithType: K,Collection
  fullName: K,java.util.Collection
- uid: com.azure.cosmos.implementation.guava25.collect.Multimap
  name: Multimap
  nameWithType: Multimap
  fullName: com.azure.cosmos.implementation.guava25.collect.Multimap
