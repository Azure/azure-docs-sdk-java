### YamlMime:ManagedReference
items:
- uid: com.fasterxml.jackson.databind.DeserializationContext
  id: DeserializationContext
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind
  children:
  - com.fasterxml.jackson.databind.DeserializationContext.<T>readPropertyValue(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.BeanProperty,com.fasterxml.jackson.databind.JavaType)
  - com.fasterxml.jackson.databind.DeserializationContext.<T>readPropertyValue(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.BeanProperty,java.lang.Class<T>)
  - com.fasterxml.jackson.databind.DeserializationContext.<T>readValue(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.JavaType)
  - com.fasterxml.jackson.databind.DeserializationContext.<T>readValue(com.fasterxml.jackson.core.JsonParser,java.lang.Class<T>)
  - com.fasterxml.jackson.databind.DeserializationContext.<T>reportBadDefinition(com.fasterxml.jackson.databind.JavaType,java.lang.String)
  - com.fasterxml.jackson.databind.DeserializationContext.<T>reportBadMerge(com.fasterxml.jackson.databind.JsonDeserializer<?>)
  - com.fasterxml.jackson.databind.DeserializationContext.<T>reportBadPropertyDefinition(com.fasterxml.jackson.databind.BeanDescription,com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition,java.lang.String,java.lang.Object...)
  - com.fasterxml.jackson.databind.DeserializationContext.<T>reportBadTypeDefinition(com.fasterxml.jackson.databind.BeanDescription,java.lang.String,java.lang.Object...)
  - com.fasterxml.jackson.databind.DeserializationContext.<T>reportInputMismatch(com.fasterxml.jackson.databind.BeanProperty,java.lang.String,java.lang.Object...)
  - com.fasterxml.jackson.databind.DeserializationContext.<T>reportInputMismatch(com.fasterxml.jackson.databind.JavaType,java.lang.String,java.lang.Object...)
  - com.fasterxml.jackson.databind.DeserializationContext.<T>reportInputMismatch(com.fasterxml.jackson.databind.JsonDeserializer<?>,java.lang.String,java.lang.Object...)
  - com.fasterxml.jackson.databind.DeserializationContext.<T>reportInputMismatch(java.lang.Class<?>,java.lang.String,java.lang.Object...)
  - com.fasterxml.jackson.databind.DeserializationContext.<T>reportPropertyInputMismatch(com.fasterxml.jackson.databind.JavaType,java.lang.String,java.lang.String,java.lang.Object...)
  - com.fasterxml.jackson.databind.DeserializationContext.<T>reportPropertyInputMismatch(java.lang.Class<?>,java.lang.String,java.lang.String,java.lang.Object...)
  - com.fasterxml.jackson.databind.DeserializationContext.<T>reportTrailingTokens(java.lang.Class<?>,com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.core.JsonToken)
  - com.fasterxml.jackson.databind.DeserializationContext.<T>reportUnresolvedObjectId(com.fasterxml.jackson.databind.deser.impl.ObjectIdReader,java.lang.Object)
  - com.fasterxml.jackson.databind.DeserializationContext.DeserializationContext(com.fasterxml.jackson.databind.DeserializationContext)
  - com.fasterxml.jackson.databind.DeserializationContext.DeserializationContext(com.fasterxml.jackson.databind.DeserializationContext,com.fasterxml.jackson.databind.DeserializationConfig,com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.InjectableValues)
  - com.fasterxml.jackson.databind.DeserializationContext.DeserializationContext(com.fasterxml.jackson.databind.DeserializationContext,com.fasterxml.jackson.databind.deser.DeserializerFactory)
  - com.fasterxml.jackson.databind.DeserializationContext.DeserializationContext(com.fasterxml.jackson.databind.deser.DeserializerFactory)
  - com.fasterxml.jackson.databind.DeserializationContext.DeserializationContext(com.fasterxml.jackson.databind.deser.DeserializerFactory,com.fasterxml.jackson.databind.deser.DeserializerCache)
  - com.fasterxml.jackson.databind.DeserializationContext._arrayBuilders
  - com.fasterxml.jackson.databind.DeserializationContext._attributes
  - com.fasterxml.jackson.databind.DeserializationContext._cache
  - com.fasterxml.jackson.databind.DeserializationContext._config
  - com.fasterxml.jackson.databind.DeserializationContext._currentType
  - com.fasterxml.jackson.databind.DeserializationContext._dateFormat
  - com.fasterxml.jackson.databind.DeserializationContext._factory
  - com.fasterxml.jackson.databind.DeserializationContext._featureFlags
  - com.fasterxml.jackson.databind.DeserializationContext._injectableValues
  - com.fasterxml.jackson.databind.DeserializationContext._isCompatible(java.lang.Class<?>,java.lang.Object)
  - com.fasterxml.jackson.databind.DeserializationContext._objectBuffer
  - com.fasterxml.jackson.databind.DeserializationContext._parser
  - com.fasterxml.jackson.databind.DeserializationContext._view
  - com.fasterxml.jackson.databind.DeserializationContext.canOverrideAccessModifiers()
  - com.fasterxml.jackson.databind.DeserializationContext.checkUnresolvedObjectId()
  - com.fasterxml.jackson.databind.DeserializationContext.constructCalendar(java.util.Date)
  - com.fasterxml.jackson.databind.DeserializationContext.constructSpecializedType(com.fasterxml.jackson.databind.JavaType,java.lang.Class<?>)
  - com.fasterxml.jackson.databind.DeserializationContext.constructType(java.lang.Class<?>)
  - com.fasterxml.jackson.databind.DeserializationContext.deserializerInstance(com.fasterxml.jackson.databind.introspect.Annotated,java.lang.Object)
  - com.fasterxml.jackson.databind.DeserializationContext.endOfInputException(java.lang.Class<?>)
  - com.fasterxml.jackson.databind.DeserializationContext.findClass(java.lang.String)
  - com.fasterxml.jackson.databind.DeserializationContext.findContextualValueDeserializer(com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.BeanProperty)
  - com.fasterxml.jackson.databind.DeserializationContext.findInjectableValue(java.lang.Object,com.fasterxml.jackson.databind.BeanProperty,java.lang.Object)
  - com.fasterxml.jackson.databind.DeserializationContext.findKeyDeserializer(com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.BeanProperty)
  - com.fasterxml.jackson.databind.DeserializationContext.findNonContextualValueDeserializer(com.fasterxml.jackson.databind.JavaType)
  - com.fasterxml.jackson.databind.DeserializationContext.findObjectId(java.lang.Object,com.fasterxml.jackson.annotation.ObjectIdGenerator<?>,com.fasterxml.jackson.annotation.ObjectIdResolver)
  - com.fasterxml.jackson.databind.DeserializationContext.findRootValueDeserializer(com.fasterxml.jackson.databind.JavaType)
  - com.fasterxml.jackson.databind.DeserializationContext.getActiveView()
  - com.fasterxml.jackson.databind.DeserializationContext.getAnnotationIntrospector()
  - com.fasterxml.jackson.databind.DeserializationContext.getArrayBuilders()
  - com.fasterxml.jackson.databind.DeserializationContext.getAttribute(java.lang.Object)
  - com.fasterxml.jackson.databind.DeserializationContext.getBase64Variant()
  - com.fasterxml.jackson.databind.DeserializationContext.getConfig()
  - com.fasterxml.jackson.databind.DeserializationContext.getContextualType()
  - com.fasterxml.jackson.databind.DeserializationContext.getDateFormat()
  - com.fasterxml.jackson.databind.DeserializationContext.getDefaultPropertyFormat(java.lang.Class<?>)
  - com.fasterxml.jackson.databind.DeserializationContext.getDeserializationFeatures()
  - com.fasterxml.jackson.databind.DeserializationContext.getFactory()
  - com.fasterxml.jackson.databind.DeserializationContext.getLocale()
  - com.fasterxml.jackson.databind.DeserializationContext.getNodeFactory()
  - com.fasterxml.jackson.databind.DeserializationContext.getParser()
  - com.fasterxml.jackson.databind.DeserializationContext.getTimeZone()
  - com.fasterxml.jackson.databind.DeserializationContext.getTypeFactory()
  - com.fasterxml.jackson.databind.DeserializationContext.handleBadMerge(com.fasterxml.jackson.databind.JsonDeserializer<?>)
  - com.fasterxml.jackson.databind.DeserializationContext.handleInstantiationProblem(java.lang.Class<?>,java.lang.Object,java.lang.Throwable)
  - com.fasterxml.jackson.databind.DeserializationContext.handleMissingInstantiator(java.lang.Class<?>,com.fasterxml.jackson.databind.deser.ValueInstantiator,com.fasterxml.jackson.core.JsonParser,java.lang.String,java.lang.Object...)
  - com.fasterxml.jackson.databind.DeserializationContext.handleMissingTypeId(com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.jsontype.TypeIdResolver,java.lang.String)
  - com.fasterxml.jackson.databind.DeserializationContext.handlePrimaryContextualization(com.fasterxml.jackson.databind.JsonDeserializer<?>,com.fasterxml.jackson.databind.BeanProperty,com.fasterxml.jackson.databind.JavaType)
  - com.fasterxml.jackson.databind.DeserializationContext.handleSecondaryContextualization(com.fasterxml.jackson.databind.JsonDeserializer<?>,com.fasterxml.jackson.databind.BeanProperty,com.fasterxml.jackson.databind.JavaType)
  - com.fasterxml.jackson.databind.DeserializationContext.handleUnexpectedToken(com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.core.JsonParser)
  - com.fasterxml.jackson.databind.DeserializationContext.handleUnexpectedToken(com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.core.JsonToken,com.fasterxml.jackson.core.JsonParser,java.lang.String,java.lang.Object...)
  - com.fasterxml.jackson.databind.DeserializationContext.handleUnexpectedToken(java.lang.Class<?>,com.fasterxml.jackson.core.JsonParser)
  - com.fasterxml.jackson.databind.DeserializationContext.handleUnexpectedToken(java.lang.Class<?>,com.fasterxml.jackson.core.JsonToken,com.fasterxml.jackson.core.JsonParser,java.lang.String,java.lang.Object...)
  - com.fasterxml.jackson.databind.DeserializationContext.handleUnknownProperty(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.JsonDeserializer<?>,java.lang.Object,java.lang.String)
  - com.fasterxml.jackson.databind.DeserializationContext.handleUnknownTypeId(com.fasterxml.jackson.databind.JavaType,java.lang.String,com.fasterxml.jackson.databind.jsontype.TypeIdResolver,java.lang.String)
  - com.fasterxml.jackson.databind.DeserializationContext.handleWeirdKey(java.lang.Class<?>,java.lang.String,java.lang.String,java.lang.Object...)
  - com.fasterxml.jackson.databind.DeserializationContext.handleWeirdNativeValue(com.fasterxml.jackson.databind.JavaType,java.lang.Object,com.fasterxml.jackson.core.JsonParser)
  - com.fasterxml.jackson.databind.DeserializationContext.handleWeirdNumberValue(java.lang.Class<?>,java.lang.Number,java.lang.String,java.lang.Object...)
  - com.fasterxml.jackson.databind.DeserializationContext.handleWeirdStringValue(java.lang.Class<?>,java.lang.String,java.lang.String,java.lang.Object...)
  - com.fasterxml.jackson.databind.DeserializationContext.hasDeserializationFeatures(int)
  - com.fasterxml.jackson.databind.DeserializationContext.hasSomeOfFeatures(int)
  - com.fasterxml.jackson.databind.DeserializationContext.hasValueDeserializerFor(com.fasterxml.jackson.databind.JavaType,java.util.concurrent.atomic.AtomicReference<java.lang.Throwable>)
  - com.fasterxml.jackson.databind.DeserializationContext.instantiationException(java.lang.Class<?>,java.lang.String)
  - com.fasterxml.jackson.databind.DeserializationContext.instantiationException(java.lang.Class<?>,java.lang.Throwable)
  - com.fasterxml.jackson.databind.DeserializationContext.invalidTypeIdException(com.fasterxml.jackson.databind.JavaType,java.lang.String,java.lang.String)
  - com.fasterxml.jackson.databind.DeserializationContext.isEnabled(com.fasterxml.jackson.databind.DeserializationFeature)
  - com.fasterxml.jackson.databind.DeserializationContext.isEnabled(com.fasterxml.jackson.databind.MapperFeature)
  - com.fasterxml.jackson.databind.DeserializationContext.keyDeserializerInstance(com.fasterxml.jackson.databind.introspect.Annotated,java.lang.Object)
  - com.fasterxml.jackson.databind.DeserializationContext.leaseObjectBuffer()
  - com.fasterxml.jackson.databind.DeserializationContext.mappingException(java.lang.Class<?>)
  - com.fasterxml.jackson.databind.DeserializationContext.mappingException(java.lang.Class<?>,com.fasterxml.jackson.core.JsonToken)
  - com.fasterxml.jackson.databind.DeserializationContext.mappingException(java.lang.String)
  - com.fasterxml.jackson.databind.DeserializationContext.mappingException(java.lang.String,java.lang.Object...)
  - com.fasterxml.jackson.databind.DeserializationContext.missingTypeIdException(com.fasterxml.jackson.databind.JavaType,java.lang.String)
  - com.fasterxml.jackson.databind.DeserializationContext.parseDate(java.lang.String)
  - com.fasterxml.jackson.databind.DeserializationContext.readTree(com.fasterxml.jackson.core.JsonParser)
  - com.fasterxml.jackson.databind.DeserializationContext.reportMappingException(java.lang.String,java.lang.Object...)
  - com.fasterxml.jackson.databind.DeserializationContext.reportMissingContent(java.lang.String,java.lang.Object...)
  - com.fasterxml.jackson.databind.DeserializationContext.reportUnknownProperty(java.lang.Object,java.lang.String,com.fasterxml.jackson.databind.JsonDeserializer<?>)
  - com.fasterxml.jackson.databind.DeserializationContext.reportWrongTokenException(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.core.JsonToken,java.lang.String,java.lang.Object...)
  - com.fasterxml.jackson.databind.DeserializationContext.reportWrongTokenException(com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.core.JsonToken,java.lang.String,java.lang.Object...)
  - com.fasterxml.jackson.databind.DeserializationContext.reportWrongTokenException(com.fasterxml.jackson.databind.JsonDeserializer<?>,com.fasterxml.jackson.core.JsonToken,java.lang.String,java.lang.Object...)
  - com.fasterxml.jackson.databind.DeserializationContext.reportWrongTokenException(java.lang.Class<?>,com.fasterxml.jackson.core.JsonToken,java.lang.String,java.lang.Object...)
  - com.fasterxml.jackson.databind.DeserializationContext.returnObjectBuffer(com.fasterxml.jackson.databind.util.ObjectBuffer)
  - com.fasterxml.jackson.databind.DeserializationContext.setAttribute(java.lang.Object,java.lang.Object)
  - com.fasterxml.jackson.databind.DeserializationContext.unknownTypeException(com.fasterxml.jackson.databind.JavaType,java.lang.String,java.lang.String)
  - com.fasterxml.jackson.databind.DeserializationContext.weirdKeyException(java.lang.Class<?>,java.lang.String,java.lang.String)
  - com.fasterxml.jackson.databind.DeserializationContext.weirdNativeValueException(java.lang.Object,java.lang.Class<?>)
  - com.fasterxml.jackson.databind.DeserializationContext.weirdNumberException(java.lang.Number,java.lang.Class<?>,java.lang.String)
  - com.fasterxml.jackson.databind.DeserializationContext.weirdStringException(java.lang.String,java.lang.Class<?>,java.lang.String)
  - com.fasterxml.jackson.databind.DeserializationContext.wrongTokenException(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.core.JsonToken,java.lang.String)
  - com.fasterxml.jackson.databind.DeserializationContext.wrongTokenException(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.core.JsonToken,java.lang.String)
  - com.fasterxml.jackson.databind.DeserializationContext.wrongTokenException(com.fasterxml.jackson.core.JsonParser,java.lang.Class<?>,com.fasterxml.jackson.core.JsonToken,java.lang.String)
  langs:
  - java
  name: DeserializationContext
  nameWithType: DeserializationContext
  fullName: com.fasterxml.jackson.databind.DeserializationContext
  type: Class
  package: com.fasterxml.jackson.databind
  summary: >-
    Context for the process of deserialization a single root-level value. Used to allow passing in configuration settings and reusable temporary objects (scrap arrays, containers).


    Instance life-cycle is such that a partially configured "blueprint" object is registered with <xref uid="com.fasterxml.jackson.databind.ObjectMapper" data-throw-if-not-resolved="false">ObjectMapper</xref> (and <xref uid="com.fasterxml.jackson.databind.ObjectReader" data-throw-if-not-resolved="false">ObjectReader</xref>, and when actual instance is needed for deserialization, a fully configured instance will be created using a method in extended internal API of sub-class (<xref uid="com.fasterxml.jackson.databind.deser.DefaultDeserializationContext.createInstance" data-throw-if-not-resolved="false">com.fasterxml.jackson.databind.deser.DefaultDeserializationContext#createInstance</xref>). Each instance is guaranteed to only be used from single-threaded context; instances may be reused if (and only if) no configuration has changed.


    Defined as abstract class so that implementations must define methods for reconfiguring blueprints and creating instances.
  syntax:
    content: public abstract class DeserializationContext extends DatabindContext implements Serializable
  inheritance:
  - java.lang.Object
  - com.fasterxml.jackson.databind.DatabindContext
  implements:
  - java.io.Serializable
  inheritedMembers:
  - com.fasterxml.jackson.databind.DatabindContext.<T>_throwNotASubtype(com.fasterxml.jackson.databind.JavaType,java.lang.String)
  - com.fasterxml.jackson.databind.DatabindContext.<T>_throwSubtypeClassNotAllowed(com.fasterxml.jackson.databind.JavaType,java.lang.String,com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator)
  - com.fasterxml.jackson.databind.DatabindContext.<T>_throwSubtypeNameNotAllowed(com.fasterxml.jackson.databind.JavaType,java.lang.String,com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator)
  - com.fasterxml.jackson.databind.DatabindContext.<T>reportBadDefinition(com.fasterxml.jackson.databind.JavaType,java.lang.String)
  - com.fasterxml.jackson.databind.DatabindContext.<T>reportBadDefinition(java.lang.Class<?>,java.lang.String)
  - com.fasterxml.jackson.databind.DatabindContext._colonConcat(java.lang.String,java.lang.String)
  - com.fasterxml.jackson.databind.DatabindContext._desc(java.lang.String)
  - com.fasterxml.jackson.databind.DatabindContext._format(java.lang.String,java.lang.Object...)
  - com.fasterxml.jackson.databind.DatabindContext._quotedString(java.lang.String)
  - com.fasterxml.jackson.databind.DatabindContext._truncate(java.lang.String)
  - com.fasterxml.jackson.databind.DatabindContext.canOverrideAccessModifiers()
  - com.fasterxml.jackson.databind.DatabindContext.constructSpecializedType(com.fasterxml.jackson.databind.JavaType,java.lang.Class<?>)
  - com.fasterxml.jackson.databind.DatabindContext.constructType(java.lang.reflect.Type)
  - com.fasterxml.jackson.databind.DatabindContext.converterInstance(com.fasterxml.jackson.databind.introspect.Annotated,java.lang.Object)
  - com.fasterxml.jackson.databind.DatabindContext.getActiveView()
  - com.fasterxml.jackson.databind.DatabindContext.getAnnotationIntrospector()
  - com.fasterxml.jackson.databind.DatabindContext.getAttribute(java.lang.Object)
  - com.fasterxml.jackson.databind.DatabindContext.getConfig()
  - com.fasterxml.jackson.databind.DatabindContext.getDefaultPropertyFormat(java.lang.Class<?>)
  - com.fasterxml.jackson.databind.DatabindContext.getLocale()
  - com.fasterxml.jackson.databind.DatabindContext.getTimeZone()
  - com.fasterxml.jackson.databind.DatabindContext.getTypeFactory()
  - com.fasterxml.jackson.databind.DatabindContext.invalidTypeIdException(com.fasterxml.jackson.databind.JavaType,java.lang.String,java.lang.String)
  - com.fasterxml.jackson.databind.DatabindContext.isEnabled(com.fasterxml.jackson.databind.MapperFeature)
  - com.fasterxml.jackson.databind.DatabindContext.objectIdGeneratorInstance(com.fasterxml.jackson.databind.introspect.Annotated,com.fasterxml.jackson.databind.introspect.ObjectIdInfo)
  - com.fasterxml.jackson.databind.DatabindContext.objectIdResolverInstance(com.fasterxml.jackson.databind.introspect.Annotated,com.fasterxml.jackson.databind.introspect.ObjectIdInfo)
  - com.fasterxml.jackson.databind.DatabindContext.resolveAndValidateSubType(com.fasterxml.jackson.databind.JavaType,java.lang.String,com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator)
  - com.fasterxml.jackson.databind.DatabindContext.resolveSubType(com.fasterxml.jackson.databind.JavaType,java.lang.String)
  - com.fasterxml.jackson.databind.DatabindContext.setAttribute(java.lang.Object,java.lang.Object)
  - java.lang.Object.clone()
  - java.lang.Object.equals(java.lang.Object)
  - java.lang.Object.finalize()
  - java.lang.Object.getClass()
  - java.lang.Object.hashCode()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.toString()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
- uid: com.fasterxml.jackson.databind.DeserializationContext.<T>readPropertyValue(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.BeanProperty,com.fasterxml.jackson.databind.JavaType)
  id: <T>readPropertyValue(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.BeanProperty,com.fasterxml.jackson.databind.JavaType)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.DeserializationContext
  langs:
  - java
  name: <T>readPropertyValue(JsonParser p, BeanProperty prop, JavaType type)
  nameWithType: DeserializationContext.<T>readPropertyValue(JsonParser p, BeanProperty prop, JavaType type)
  fullName: com.fasterxml.jackson.databind.DeserializationContext.<T>readPropertyValue(JsonParser p, BeanProperty prop, JavaType type)
  overload: com.fasterxml.jackson.databind.DeserializationContext.readPropertyValue*
  type: Method
  package: com.fasterxml.jackson.databind
  syntax:
    content: public T <T>readPropertyValue(JsonParser p, BeanProperty prop, JavaType type)
    parameters:
    - id: p
      type: com.fasterxml.jackson.core.JsonParser
    - id: prop
      type: com.fasterxml.jackson.databind.BeanProperty
    - id: type
      type: com.fasterxml.jackson.databind.JavaType
    return:
      type: T
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.databind.DeserializationContext.<T>readPropertyValue(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.BeanProperty,java.lang.Class<T>)
  id: <T>readPropertyValue(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.BeanProperty,java.lang.Class<T>)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.DeserializationContext
  langs:
  - java
  name: <T>readPropertyValue(JsonParser p, BeanProperty prop, Class<T> type)
  nameWithType: DeserializationContext.<T>readPropertyValue(JsonParser p, BeanProperty prop, Class<T> type)
  fullName: com.fasterxml.jackson.databind.DeserializationContext.<T>readPropertyValue(JsonParser p, BeanProperty prop, Class<T> type)
  overload: com.fasterxml.jackson.databind.DeserializationContext.readPropertyValue*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: Convenience method that may be used by composite or container deserializers, for reading one-off values for the composite type, taking into account annotations that the property (passed to this method -- usually property that has custom serializer that called this method) has.
  syntax:
    content: public T <T>readPropertyValue(JsonParser p, BeanProperty prop, Class<T> type)
    parameters:
    - id: p
      type: com.fasterxml.jackson.core.JsonParser
    - id: prop
      type: com.fasterxml.jackson.databind.BeanProperty
    - id: type
      type: java.lang.Class<T>
    return:
      type: T
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.databind.DeserializationContext.<T>readValue(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.JavaType)
  id: <T>readValue(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.JavaType)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.DeserializationContext
  langs:
  - java
  name: <T>readValue(JsonParser p, JavaType type)
  nameWithType: DeserializationContext.<T>readValue(JsonParser p, JavaType type)
  fullName: com.fasterxml.jackson.databind.DeserializationContext.<T>readValue(JsonParser p, JavaType type)
  overload: com.fasterxml.jackson.databind.DeserializationContext.readValue*
  type: Method
  package: com.fasterxml.jackson.databind
  syntax:
    content: public T <T>readValue(JsonParser p, JavaType type)
    parameters:
    - id: p
      type: com.fasterxml.jackson.core.JsonParser
    - id: type
      type: com.fasterxml.jackson.databind.JavaType
    return:
      type: T
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.databind.DeserializationContext.<T>readValue(com.fasterxml.jackson.core.JsonParser,java.lang.Class<T>)
  id: <T>readValue(com.fasterxml.jackson.core.JsonParser,java.lang.Class<T>)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.DeserializationContext
  langs:
  - java
  name: <T>readValue(JsonParser p, Class<T> type)
  nameWithType: DeserializationContext.<T>readValue(JsonParser p, Class<T> type)
  fullName: com.fasterxml.jackson.databind.DeserializationContext.<T>readValue(JsonParser p, Class<T> type)
  overload: com.fasterxml.jackson.databind.DeserializationContext.readValue*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: >-
    Convenience method that may be used by composite or container deserializers, for reading one-off values contained (for sequences, it is more efficient to actually fetch deserializer once for the whole collection).


    NOTE: when deserializing values of properties contained in composite types, rather use <xref uid="com.fasterxml.jackson.databind.DeserializationContext.&lt;T&gt;readPropertyValue(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.BeanProperty,java.lang.Class&lt;T&gt;)" data-throw-if-not-resolved="false">#readPropertyValue(JsonParser, BeanProperty, Class)</xref>; this method does not allow use of contextual annotations.
  syntax:
    content: public T <T>readValue(JsonParser p, Class<T> type)
    parameters:
    - id: p
      type: com.fasterxml.jackson.core.JsonParser
    - id: type
      type: java.lang.Class<T>
    return:
      type: T
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.databind.DeserializationContext.<T>reportBadDefinition(com.fasterxml.jackson.databind.JavaType,java.lang.String)
  id: <T>reportBadDefinition(com.fasterxml.jackson.databind.JavaType,java.lang.String)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.DeserializationContext
  langs:
  - java
  name: <T>reportBadDefinition(JavaType type, String msg)
  nameWithType: DeserializationContext.<T>reportBadDefinition(JavaType type, String msg)
  fullName: com.fasterxml.jackson.databind.DeserializationContext.<T>reportBadDefinition(JavaType type, String msg)
  overload: com.fasterxml.jackson.databind.DeserializationContext.reportBadDefinition*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: Helper method called to indicate a generic problem that stems from type definition(s), not input data, or input/output state; typically this means throwing a <xref uid="com.fasterxml.jackson.databind.exc.InvalidDefinitionException" data-throw-if-not-resolved="false">com.fasterxml.jackson.databind.exc.InvalidDefinitionException</xref>.
  syntax:
    content: public T <T>reportBadDefinition(JavaType type, String msg)
    parameters:
    - id: type
      type: com.fasterxml.jackson.databind.JavaType
    - id: msg
      type: java.lang.String
    return:
      type: T
  exceptions:
  - type: com.fasterxml.jackson.databind.JsonMappingException
- uid: com.fasterxml.jackson.databind.DeserializationContext.<T>reportBadMerge(com.fasterxml.jackson.databind.JsonDeserializer<?>)
  id: <T>reportBadMerge(com.fasterxml.jackson.databind.JsonDeserializer<?>)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.DeserializationContext
  langs:
  - java
  name: <T>reportBadMerge(JsonDeserializer<?> deser)
  nameWithType: DeserializationContext.<T>reportBadMerge(JsonDeserializer<?> deser)
  fullName: com.fasterxml.jackson.databind.DeserializationContext.<T>reportBadMerge(JsonDeserializer<?> deser)
  overload: com.fasterxml.jackson.databind.DeserializationContext.reportBadMerge*
  type: Method
  package: com.fasterxml.jackson.databind
  syntax:
    content: public T <T>reportBadMerge(JsonDeserializer<?> deser)
    parameters:
    - id: deser
      type: com.fasterxml.jackson.databind.JsonDeserializer<?>
    return:
      type: T
  exceptions:
  - type: com.fasterxml.jackson.databind.JsonMappingException
- uid: com.fasterxml.jackson.databind.DeserializationContext.<T>reportBadPropertyDefinition(com.fasterxml.jackson.databind.BeanDescription,com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition,java.lang.String,java.lang.Object...)
  id: <T>reportBadPropertyDefinition(com.fasterxml.jackson.databind.BeanDescription,com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition,java.lang.String,java.lang.Object...)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.DeserializationContext
  langs:
  - java
  name: <T>reportBadPropertyDefinition(BeanDescription bean, BeanPropertyDefinition prop, String msg, Object[] msgArgs)
  nameWithType: DeserializationContext.<T>reportBadPropertyDefinition(BeanDescription bean, BeanPropertyDefinition prop, String msg, Object[] msgArgs)
  fullName: com.fasterxml.jackson.databind.DeserializationContext.<T>reportBadPropertyDefinition(BeanDescription bean, BeanPropertyDefinition prop, String msg, Object[] msgArgs)
  overload: com.fasterxml.jackson.databind.DeserializationContext.reportBadPropertyDefinition*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: Helper method called to indicate problem in POJO (serialization) definitions or settings regarding specific property (of a type), unrelated to actual JSON content to map. Default behavior is to construct and throw a <xref uid="com.fasterxml.jackson.databind.JsonMappingException" data-throw-if-not-resolved="false">JsonMappingException</xref>.
  syntax:
    content: public T <T>reportBadPropertyDefinition(BeanDescription bean, BeanPropertyDefinition prop, String msg, Object[] msgArgs)
    parameters:
    - id: bean
      type: com.fasterxml.jackson.databind.BeanDescription
    - id: prop
      type: com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition
    - id: msg
      type: java.lang.String
    - id: msgArgs
      type: java.lang.Object[]
    return:
      type: T
  exceptions:
  - type: com.fasterxml.jackson.databind.JsonMappingException
- uid: com.fasterxml.jackson.databind.DeserializationContext.<T>reportBadTypeDefinition(com.fasterxml.jackson.databind.BeanDescription,java.lang.String,java.lang.Object...)
  id: <T>reportBadTypeDefinition(com.fasterxml.jackson.databind.BeanDescription,java.lang.String,java.lang.Object...)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.DeserializationContext
  langs:
  - java
  name: <T>reportBadTypeDefinition(BeanDescription bean, String msg, Object[] msgArgs)
  nameWithType: DeserializationContext.<T>reportBadTypeDefinition(BeanDescription bean, String msg, Object[] msgArgs)
  fullName: com.fasterxml.jackson.databind.DeserializationContext.<T>reportBadTypeDefinition(BeanDescription bean, String msg, Object[] msgArgs)
  overload: com.fasterxml.jackson.databind.DeserializationContext.reportBadTypeDefinition*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: Helper method called to indicate problem in POJO (serialization) definitions or settings regarding specific Java type, unrelated to actual JSON content to map. Default behavior is to construct and throw a <xref uid="com.fasterxml.jackson.databind.JsonMappingException" data-throw-if-not-resolved="false">JsonMappingException</xref>.
  syntax:
    content: public T <T>reportBadTypeDefinition(BeanDescription bean, String msg, Object[] msgArgs)
    parameters:
    - id: bean
      type: com.fasterxml.jackson.databind.BeanDescription
    - id: msg
      type: java.lang.String
    - id: msgArgs
      type: java.lang.Object[]
    return:
      type: T
  exceptions:
  - type: com.fasterxml.jackson.databind.JsonMappingException
- uid: com.fasterxml.jackson.databind.DeserializationContext.<T>reportInputMismatch(com.fasterxml.jackson.databind.BeanProperty,java.lang.String,java.lang.Object...)
  id: <T>reportInputMismatch(com.fasterxml.jackson.databind.BeanProperty,java.lang.String,java.lang.Object...)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.DeserializationContext
  langs:
  - java
  name: <T>reportInputMismatch(BeanProperty prop, String msg, Object[] msgArgs)
  nameWithType: DeserializationContext.<T>reportInputMismatch(BeanProperty prop, String msg, Object[] msgArgs)
  fullName: com.fasterxml.jackson.databind.DeserializationContext.<T>reportInputMismatch(BeanProperty prop, String msg, Object[] msgArgs)
  overload: com.fasterxml.jackson.databind.DeserializationContext.reportInputMismatch*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: Helper method used to indicate a problem with input in cases where more specific `reportXxx()` method was not available.
  syntax:
    content: public T <T>reportInputMismatch(BeanProperty prop, String msg, Object[] msgArgs)
    parameters:
    - id: prop
      type: com.fasterxml.jackson.databind.BeanProperty
    - id: msg
      type: java.lang.String
    - id: msgArgs
      type: java.lang.Object[]
    return:
      type: T
  exceptions:
  - type: com.fasterxml.jackson.databind.JsonMappingException
- uid: com.fasterxml.jackson.databind.DeserializationContext.<T>reportInputMismatch(com.fasterxml.jackson.databind.JavaType,java.lang.String,java.lang.Object...)
  id: <T>reportInputMismatch(com.fasterxml.jackson.databind.JavaType,java.lang.String,java.lang.Object...)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.DeserializationContext
  langs:
  - java
  name: <T>reportInputMismatch(JavaType targetType, String msg, Object[] msgArgs)
  nameWithType: DeserializationContext.<T>reportInputMismatch(JavaType targetType, String msg, Object[] msgArgs)
  fullName: com.fasterxml.jackson.databind.DeserializationContext.<T>reportInputMismatch(JavaType targetType, String msg, Object[] msgArgs)
  overload: com.fasterxml.jackson.databind.DeserializationContext.reportInputMismatch*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: Helper method used to indicate a problem with input in cases where more specific `reportXxx()` method was not available.
  syntax:
    content: public T <T>reportInputMismatch(JavaType targetType, String msg, Object[] msgArgs)
    parameters:
    - id: targetType
      type: com.fasterxml.jackson.databind.JavaType
    - id: msg
      type: java.lang.String
    - id: msgArgs
      type: java.lang.Object[]
    return:
      type: T
  exceptions:
  - type: com.fasterxml.jackson.databind.JsonMappingException
- uid: com.fasterxml.jackson.databind.DeserializationContext.<T>reportInputMismatch(com.fasterxml.jackson.databind.JsonDeserializer<?>,java.lang.String,java.lang.Object...)
  id: <T>reportInputMismatch(com.fasterxml.jackson.databind.JsonDeserializer<?>,java.lang.String,java.lang.Object...)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.DeserializationContext
  langs:
  - java
  name: <T>reportInputMismatch(JsonDeserializer<?> src, String msg, Object[] msgArgs)
  nameWithType: DeserializationContext.<T>reportInputMismatch(JsonDeserializer<?> src, String msg, Object[] msgArgs)
  fullName: com.fasterxml.jackson.databind.DeserializationContext.<T>reportInputMismatch(JsonDeserializer<?> src, String msg, Object[] msgArgs)
  overload: com.fasterxml.jackson.databind.DeserializationContext.reportInputMismatch*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: Helper method used to indicate a problem with input in cases where more specific `reportXxx()` method was not available.
  syntax:
    content: public T <T>reportInputMismatch(JsonDeserializer<?> src, String msg, Object[] msgArgs)
    parameters:
    - id: src
      type: com.fasterxml.jackson.databind.JsonDeserializer<?>
    - id: msg
      type: java.lang.String
    - id: msgArgs
      type: java.lang.Object[]
    return:
      type: T
  exceptions:
  - type: com.fasterxml.jackson.databind.JsonMappingException
- uid: com.fasterxml.jackson.databind.DeserializationContext.<T>reportInputMismatch(java.lang.Class<?>,java.lang.String,java.lang.Object...)
  id: <T>reportInputMismatch(java.lang.Class<?>,java.lang.String,java.lang.Object...)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.DeserializationContext
  langs:
  - java
  name: <T>reportInputMismatch(Class<?> targetType, String msg, Object[] msgArgs)
  nameWithType: DeserializationContext.<T>reportInputMismatch(Class<?> targetType, String msg, Object[] msgArgs)
  fullName: com.fasterxml.jackson.databind.DeserializationContext.<T>reportInputMismatch(Class<?> targetType, String msg, Object[] msgArgs)
  overload: com.fasterxml.jackson.databind.DeserializationContext.reportInputMismatch*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: Helper method used to indicate a problem with input in cases where more specific `reportXxx()` method was not available.
  syntax:
    content: public T <T>reportInputMismatch(Class<?> targetType, String msg, Object[] msgArgs)
    parameters:
    - id: targetType
      type: java.lang.Class<?>
    - id: msg
      type: java.lang.String
    - id: msgArgs
      type: java.lang.Object[]
    return:
      type: T
  exceptions:
  - type: com.fasterxml.jackson.databind.JsonMappingException
- uid: com.fasterxml.jackson.databind.DeserializationContext.<T>reportPropertyInputMismatch(com.fasterxml.jackson.databind.JavaType,java.lang.String,java.lang.String,java.lang.Object...)
  id: <T>reportPropertyInputMismatch(com.fasterxml.jackson.databind.JavaType,java.lang.String,java.lang.String,java.lang.Object...)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.DeserializationContext
  langs:
  - java
  name: <T>reportPropertyInputMismatch(JavaType targetType, String propertyName, String msg, Object[] msgArgs)
  nameWithType: DeserializationContext.<T>reportPropertyInputMismatch(JavaType targetType, String propertyName, String msg, Object[] msgArgs)
  fullName: com.fasterxml.jackson.databind.DeserializationContext.<T>reportPropertyInputMismatch(JavaType targetType, String propertyName, String msg, Object[] msgArgs)
  overload: com.fasterxml.jackson.databind.DeserializationContext.reportPropertyInputMismatch*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: Helper method used to indicate a problem with input in cases where more specific `reportXxx()` method was not available.
  syntax:
    content: public T <T>reportPropertyInputMismatch(JavaType targetType, String propertyName, String msg, Object[] msgArgs)
    parameters:
    - id: targetType
      type: com.fasterxml.jackson.databind.JavaType
    - id: propertyName
      type: java.lang.String
    - id: msg
      type: java.lang.String
    - id: msgArgs
      type: java.lang.Object[]
    return:
      type: T
  exceptions:
  - type: com.fasterxml.jackson.databind.JsonMappingException
- uid: com.fasterxml.jackson.databind.DeserializationContext.<T>reportPropertyInputMismatch(java.lang.Class<?>,java.lang.String,java.lang.String,java.lang.Object...)
  id: <T>reportPropertyInputMismatch(java.lang.Class<?>,java.lang.String,java.lang.String,java.lang.Object...)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.DeserializationContext
  langs:
  - java
  name: <T>reportPropertyInputMismatch(Class<?> targetType, String propertyName, String msg, Object[] msgArgs)
  nameWithType: DeserializationContext.<T>reportPropertyInputMismatch(Class<?> targetType, String propertyName, String msg, Object[] msgArgs)
  fullName: com.fasterxml.jackson.databind.DeserializationContext.<T>reportPropertyInputMismatch(Class<?> targetType, String propertyName, String msg, Object[] msgArgs)
  overload: com.fasterxml.jackson.databind.DeserializationContext.reportPropertyInputMismatch*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: Helper method used to indicate a problem with input in cases where more specific `reportXxx()` method was not available.
  syntax:
    content: public T <T>reportPropertyInputMismatch(Class<?> targetType, String propertyName, String msg, Object[] msgArgs)
    parameters:
    - id: targetType
      type: java.lang.Class<?>
    - id: propertyName
      type: java.lang.String
    - id: msg
      type: java.lang.String
    - id: msgArgs
      type: java.lang.Object[]
    return:
      type: T
  exceptions:
  - type: com.fasterxml.jackson.databind.JsonMappingException
- uid: com.fasterxml.jackson.databind.DeserializationContext.<T>reportTrailingTokens(java.lang.Class<?>,com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.core.JsonToken)
  id: <T>reportTrailingTokens(java.lang.Class<?>,com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.core.JsonToken)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.DeserializationContext
  langs:
  - java
  name: <T>reportTrailingTokens(Class<?> targetType, JsonParser p, JsonToken trailingToken)
  nameWithType: DeserializationContext.<T>reportTrailingTokens(Class<?> targetType, JsonParser p, JsonToken trailingToken)
  fullName: com.fasterxml.jackson.databind.DeserializationContext.<T>reportTrailingTokens(Class<?> targetType, JsonParser p, JsonToken trailingToken)
  overload: com.fasterxml.jackson.databind.DeserializationContext.reportTrailingTokens*
  type: Method
  package: com.fasterxml.jackson.databind
  syntax:
    content: public T <T>reportTrailingTokens(Class<?> targetType, JsonParser p, JsonToken trailingToken)
    parameters:
    - id: targetType
      type: java.lang.Class<?>
    - id: p
      type: com.fasterxml.jackson.core.JsonParser
    - id: trailingToken
      type: com.fasterxml.jackson.core.JsonToken
    return:
      type: T
  exceptions:
  - type: com.fasterxml.jackson.databind.JsonMappingException
- uid: com.fasterxml.jackson.databind.DeserializationContext.<T>reportUnresolvedObjectId(com.fasterxml.jackson.databind.deser.impl.ObjectIdReader,java.lang.Object)
  id: <T>reportUnresolvedObjectId(com.fasterxml.jackson.databind.deser.impl.ObjectIdReader,java.lang.Object)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.DeserializationContext
  langs:
  - java
  name: <T>reportUnresolvedObjectId(ObjectIdReader oidReader, Object bean)
  nameWithType: DeserializationContext.<T>reportUnresolvedObjectId(ObjectIdReader oidReader, Object bean)
  fullName: com.fasterxml.jackson.databind.DeserializationContext.<T>reportUnresolvedObjectId(ObjectIdReader oidReader, Object bean)
  overload: com.fasterxml.jackson.databind.DeserializationContext.reportUnresolvedObjectId*
  type: Method
  package: com.fasterxml.jackson.databind
  syntax:
    content: public T <T>reportUnresolvedObjectId(ObjectIdReader oidReader, Object bean)
    parameters:
    - id: oidReader
      type: com.fasterxml.jackson.databind.deser.impl.ObjectIdReader
    - id: bean
      type: java.lang.Object
    return:
      type: T
  exceptions:
  - type: com.fasterxml.jackson.databind.JsonMappingException
- uid: com.fasterxml.jackson.databind.DeserializationContext.DeserializationContext(com.fasterxml.jackson.databind.DeserializationContext)
  id: DeserializationContext(com.fasterxml.jackson.databind.DeserializationContext)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.DeserializationContext
  langs:
  - java
  name: DeserializationContext(DeserializationContext src)
  nameWithType: DeserializationContext.DeserializationContext(DeserializationContext src)
  fullName: com.fasterxml.jackson.databind.DeserializationContext.DeserializationContext(DeserializationContext src)
  overload: com.fasterxml.jackson.databind.DeserializationContext.DeserializationContext*
  type: Constructor
  package: com.fasterxml.jackson.databind
  summary: Copy-constructor for use with `copy()` by <xref uid="com.fasterxml.jackson.databind.ObjectMapper.copy()" data-throw-if-not-resolved="false">ObjectMapper#copy()</xref>
  syntax:
    content: protected DeserializationContext(DeserializationContext src)
    parameters:
    - id: src
      type: com.fasterxml.jackson.databind.DeserializationContext
- uid: com.fasterxml.jackson.databind.DeserializationContext.DeserializationContext(com.fasterxml.jackson.databind.DeserializationContext,com.fasterxml.jackson.databind.DeserializationConfig,com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.InjectableValues)
  id: DeserializationContext(com.fasterxml.jackson.databind.DeserializationContext,com.fasterxml.jackson.databind.DeserializationConfig,com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.InjectableValues)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.DeserializationContext
  langs:
  - java
  name: DeserializationContext(DeserializationContext src, DeserializationConfig config, JsonParser p, InjectableValues injectableValues)
  nameWithType: DeserializationContext.DeserializationContext(DeserializationContext src, DeserializationConfig config, JsonParser p, InjectableValues injectableValues)
  fullName: com.fasterxml.jackson.databind.DeserializationContext.DeserializationContext(DeserializationContext src, DeserializationConfig config, JsonParser p, InjectableValues injectableValues)
  overload: com.fasterxml.jackson.databind.DeserializationContext.DeserializationContext*
  type: Constructor
  package: com.fasterxml.jackson.databind
  summary: Constructor used for creating actual per-call instances.
  syntax:
    content: protected DeserializationContext(DeserializationContext src, DeserializationConfig config, JsonParser p, InjectableValues injectableValues)
    parameters:
    - id: src
      type: com.fasterxml.jackson.databind.DeserializationContext
    - id: config
      type: com.fasterxml.jackson.databind.DeserializationConfig
    - id: p
      type: com.fasterxml.jackson.core.JsonParser
    - id: injectableValues
      type: com.fasterxml.jackson.databind.InjectableValues
- uid: com.fasterxml.jackson.databind.DeserializationContext.DeserializationContext(com.fasterxml.jackson.databind.DeserializationContext,com.fasterxml.jackson.databind.deser.DeserializerFactory)
  id: DeserializationContext(com.fasterxml.jackson.databind.DeserializationContext,com.fasterxml.jackson.databind.deser.DeserializerFactory)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.DeserializationContext
  langs:
  - java
  name: DeserializationContext(DeserializationContext src, DeserializerFactory factory)
  nameWithType: DeserializationContext.DeserializationContext(DeserializationContext src, DeserializerFactory factory)
  fullName: com.fasterxml.jackson.databind.DeserializationContext.DeserializationContext(DeserializationContext src, DeserializerFactory factory)
  overload: com.fasterxml.jackson.databind.DeserializationContext.DeserializationContext*
  type: Constructor
  package: com.fasterxml.jackson.databind
  syntax:
    content: protected DeserializationContext(DeserializationContext src, DeserializerFactory factory)
    parameters:
    - id: src
      type: com.fasterxml.jackson.databind.DeserializationContext
    - id: factory
      type: com.fasterxml.jackson.databind.deser.DeserializerFactory
- uid: com.fasterxml.jackson.databind.DeserializationContext.DeserializationContext(com.fasterxml.jackson.databind.deser.DeserializerFactory)
  id: DeserializationContext(com.fasterxml.jackson.databind.deser.DeserializerFactory)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.DeserializationContext
  langs:
  - java
  name: DeserializationContext(DeserializerFactory df)
  nameWithType: DeserializationContext.DeserializationContext(DeserializerFactory df)
  fullName: com.fasterxml.jackson.databind.DeserializationContext.DeserializationContext(DeserializerFactory df)
  overload: com.fasterxml.jackson.databind.DeserializationContext.DeserializationContext*
  type: Constructor
  package: com.fasterxml.jackson.databind
  syntax:
    content: protected DeserializationContext(DeserializerFactory df)
    parameters:
    - id: df
      type: com.fasterxml.jackson.databind.deser.DeserializerFactory
- uid: com.fasterxml.jackson.databind.DeserializationContext.DeserializationContext(com.fasterxml.jackson.databind.deser.DeserializerFactory,com.fasterxml.jackson.databind.deser.DeserializerCache)
  id: DeserializationContext(com.fasterxml.jackson.databind.deser.DeserializerFactory,com.fasterxml.jackson.databind.deser.DeserializerCache)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.DeserializationContext
  langs:
  - java
  name: DeserializationContext(DeserializerFactory df, DeserializerCache cache)
  nameWithType: DeserializationContext.DeserializationContext(DeserializerFactory df, DeserializerCache cache)
  fullName: com.fasterxml.jackson.databind.DeserializationContext.DeserializationContext(DeserializerFactory df, DeserializerCache cache)
  overload: com.fasterxml.jackson.databind.DeserializationContext.DeserializationContext*
  type: Constructor
  package: com.fasterxml.jackson.databind
  syntax:
    content: protected DeserializationContext(DeserializerFactory df, DeserializerCache cache)
    parameters:
    - id: df
      type: com.fasterxml.jackson.databind.deser.DeserializerFactory
    - id: cache
      type: com.fasterxml.jackson.databind.deser.DeserializerCache
- uid: com.fasterxml.jackson.databind.DeserializationContext._arrayBuilders
  id: _arrayBuilders
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.DeserializationContext
  langs:
  - java
  name: _arrayBuilders
  nameWithType: DeserializationContext._arrayBuilders
  fullName: com.fasterxml.jackson.databind.DeserializationContext._arrayBuilders
  type: Field
  package: com.fasterxml.jackson.databind
  syntax:
    content: protected transient ArrayBuilders _arrayBuilders
    return:
      type: com.fasterxml.jackson.databind.util.ArrayBuilders
- uid: com.fasterxml.jackson.databind.DeserializationContext._attributes
  id: _attributes
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.DeserializationContext
  langs:
  - java
  name: _attributes
  nameWithType: DeserializationContext._attributes
  fullName: com.fasterxml.jackson.databind.DeserializationContext._attributes
  type: Field
  package: com.fasterxml.jackson.databind
  summary: Lazily-constructed holder for per-call attributes.
  syntax:
    content: protected transient ContextAttributes _attributes
    return:
      type: com.fasterxml.jackson.databind.cfg.ContextAttributes
- uid: com.fasterxml.jackson.databind.DeserializationContext._cache
  id: _cache
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.DeserializationContext
  langs:
  - java
  name: _cache
  nameWithType: DeserializationContext._cache
  fullName: com.fasterxml.jackson.databind.DeserializationContext._cache
  type: Field
  package: com.fasterxml.jackson.databind
  summary: Object that handle details of <xref uid="com.fasterxml.jackson.databind.JsonDeserializer" data-throw-if-not-resolved="false">JsonDeserializer</xref> caching.
  syntax:
    content: protected final DeserializerCache _cache
    return:
      type: com.fasterxml.jackson.databind.deser.DeserializerCache
- uid: com.fasterxml.jackson.databind.DeserializationContext._config
  id: _config
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.DeserializationContext
  langs:
  - java
  name: _config
  nameWithType: DeserializationContext._config
  fullName: com.fasterxml.jackson.databind.DeserializationContext._config
  type: Field
  package: com.fasterxml.jackson.databind
  summary: Generic deserialization processing configuration
  syntax:
    content: protected final DeserializationConfig _config
    return:
      type: com.fasterxml.jackson.databind.DeserializationConfig
- uid: com.fasterxml.jackson.databind.DeserializationContext._currentType
  id: _currentType
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.DeserializationContext
  langs:
  - java
  name: _currentType
  nameWithType: DeserializationContext._currentType
  fullName: com.fasterxml.jackson.databind.DeserializationContext._currentType
  type: Field
  package: com.fasterxml.jackson.databind
  summary: Type of <xref uid="com.fasterxml.jackson.databind.JsonDeserializer" data-throw-if-not-resolved="false">JsonDeserializer</xref> (or, more specifically, <xref uid="com.fasterxml.jackson.databind.deser.ContextualDeserializer" data-throw-if-not-resolved="false">ContextualDeserializer</xref>) that is being contextualized currently.
  syntax:
    content: protected LinkedNode<JavaType> _currentType
    return:
      type: com.fasterxml.jackson.databind.util.LinkedNode<com.fasterxml.jackson.databind.JavaType>
- uid: com.fasterxml.jackson.databind.DeserializationContext._dateFormat
  id: _dateFormat
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.DeserializationContext
  langs:
  - java
  name: _dateFormat
  nameWithType: DeserializationContext._dateFormat
  fullName: com.fasterxml.jackson.databind.DeserializationContext._dateFormat
  type: Field
  package: com.fasterxml.jackson.databind
  syntax:
    content: protected transient DateFormat _dateFormat
    return:
      type: java.text.DateFormat
- uid: com.fasterxml.jackson.databind.DeserializationContext._factory
  id: _factory
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.DeserializationContext
  langs:
  - java
  name: _factory
  nameWithType: DeserializationContext._factory
  fullName: com.fasterxml.jackson.databind.DeserializationContext._factory
  type: Field
  package: com.fasterxml.jackson.databind
  summary: Read-only factory instance; exposed to let owners (`ObjectMapper`, `ObjectReader`) access it.
  syntax:
    content: protected final DeserializerFactory _factory
    return:
      type: com.fasterxml.jackson.databind.deser.DeserializerFactory
- uid: com.fasterxml.jackson.databind.DeserializationContext._featureFlags
  id: _featureFlags
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.DeserializationContext
  langs:
  - java
  name: _featureFlags
  nameWithType: DeserializationContext._featureFlags
  fullName: com.fasterxml.jackson.databind.DeserializationContext._featureFlags
  type: Field
  package: com.fasterxml.jackson.databind
  summary: Bitmap of <xref uid="com.fasterxml.jackson.databind.DeserializationFeature" data-throw-if-not-resolved="false">DeserializationFeature</xref>s that are enabled
  syntax:
    content: protected final int _featureFlags
    return:
      type: int
- uid: com.fasterxml.jackson.databind.DeserializationContext._injectableValues
  id: _injectableValues
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.DeserializationContext
  langs:
  - java
  name: _injectableValues
  nameWithType: DeserializationContext._injectableValues
  fullName: com.fasterxml.jackson.databind.DeserializationContext._injectableValues
  type: Field
  package: com.fasterxml.jackson.databind
  summary: Object used for resolving references to injectable values.
  syntax:
    content: protected final InjectableValues _injectableValues
    return:
      type: com.fasterxml.jackson.databind.InjectableValues
- uid: com.fasterxml.jackson.databind.DeserializationContext._isCompatible(java.lang.Class<?>,java.lang.Object)
  id: _isCompatible(java.lang.Class<?>,java.lang.Object)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.DeserializationContext
  langs:
  - java
  name: _isCompatible(Class<?> target, Object value)
  nameWithType: DeserializationContext._isCompatible(Class<?> target, Object value)
  fullName: com.fasterxml.jackson.databind.DeserializationContext._isCompatible(Class<?> target, Object value)
  overload: com.fasterxml.jackson.databind.DeserializationContext._isCompatible*
  type: Method
  package: com.fasterxml.jackson.databind
  syntax:
    content: protected boolean _isCompatible(Class<?> target, Object value)
    parameters:
    - id: target
      type: java.lang.Class<?>
    - id: value
      type: java.lang.Object
    return:
      type: boolean
- uid: com.fasterxml.jackson.databind.DeserializationContext._objectBuffer
  id: _objectBuffer
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.DeserializationContext
  langs:
  - java
  name: _objectBuffer
  nameWithType: DeserializationContext._objectBuffer
  fullName: com.fasterxml.jackson.databind.DeserializationContext._objectBuffer
  type: Field
  package: com.fasterxml.jackson.databind
  syntax:
    content: protected transient ObjectBuffer _objectBuffer
    return:
      type: com.fasterxml.jackson.databind.util.ObjectBuffer
- uid: com.fasterxml.jackson.databind.DeserializationContext._parser
  id: _parser
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.DeserializationContext
  langs:
  - java
  name: _parser
  nameWithType: DeserializationContext._parser
  fullName: com.fasterxml.jackson.databind.DeserializationContext._parser
  type: Field
  package: com.fasterxml.jackson.databind
  summary: Currently active parser used for deserialization. May be different from the outermost parser when content is buffered.
  syntax:
    content: protected transient JsonParser _parser
    return:
      type: com.fasterxml.jackson.core.JsonParser
- uid: com.fasterxml.jackson.databind.DeserializationContext._view
  id: _view
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.DeserializationContext
  langs:
  - java
  name: _view
  nameWithType: DeserializationContext._view
  fullName: com.fasterxml.jackson.databind.DeserializationContext._view
  type: Field
  package: com.fasterxml.jackson.databind
  summary: Currently active view, if any.
  syntax:
    content: protected final Class<?> _view
    return:
      type: java.lang.Class<?>
- uid: com.fasterxml.jackson.databind.DeserializationContext.canOverrideAccessModifiers()
  id: canOverrideAccessModifiers()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.DeserializationContext
  langs:
  - java
  name: canOverrideAccessModifiers()
  nameWithType: DeserializationContext.canOverrideAccessModifiers()
  fullName: com.fasterxml.jackson.databind.DeserializationContext.canOverrideAccessModifiers()
  overload: com.fasterxml.jackson.databind.DeserializationContext.canOverrideAccessModifiers*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: >-
    Convenience method for accessing serialization view in use (if any); equivalent to:


    ```java

    getConfig().canOverrideAccessModifiers();

    ```
  syntax:
    content: public final boolean canOverrideAccessModifiers()
    return:
      type: boolean
- uid: com.fasterxml.jackson.databind.DeserializationContext.checkUnresolvedObjectId()
  id: checkUnresolvedObjectId()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.DeserializationContext
  langs:
  - java
  name: checkUnresolvedObjectId()
  nameWithType: DeserializationContext.checkUnresolvedObjectId()
  fullName: com.fasterxml.jackson.databind.DeserializationContext.checkUnresolvedObjectId()
  overload: com.fasterxml.jackson.databind.DeserializationContext.checkUnresolvedObjectId*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: Method called to ensure that every object id encounter during processing are resolved.
  syntax:
    content: public abstract void checkUnresolvedObjectId()
  exceptions:
  - type: com.fasterxml.jackson.databind.deser.UnresolvedForwardReference
- uid: com.fasterxml.jackson.databind.DeserializationContext.constructCalendar(java.util.Date)
  id: constructCalendar(java.util.Date)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.DeserializationContext
  langs:
  - java
  name: constructCalendar(Date d)
  nameWithType: DeserializationContext.constructCalendar(Date d)
  fullName: com.fasterxml.jackson.databind.DeserializationContext.constructCalendar(Date d)
  overload: com.fasterxml.jackson.databind.DeserializationContext.constructCalendar*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: Convenience method for constructing Calendar instance set to specified time, to be modified and used by caller.
  syntax:
    content: public Calendar constructCalendar(Date d)
    parameters:
    - id: d
      type: java.util.Date
    return:
      type: java.util.Calendar
- uid: com.fasterxml.jackson.databind.DeserializationContext.constructSpecializedType(com.fasterxml.jackson.databind.JavaType,java.lang.Class<?>)
  id: constructSpecializedType(com.fasterxml.jackson.databind.JavaType,java.lang.Class<?>)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.DeserializationContext
  langs:
  - java
  name: constructSpecializedType(JavaType baseType, Class<?> subclass)
  nameWithType: DeserializationContext.constructSpecializedType(JavaType baseType, Class<?> subclass)
  fullName: com.fasterxml.jackson.databind.DeserializationContext.constructSpecializedType(JavaType baseType, Class<?> subclass)
  overload: com.fasterxml.jackson.databind.DeserializationContext.constructSpecializedType*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: >-
    Convenience method for constructing subtypes, retaining generic type parameter (if any).


    Note: since 2.11 handling has varied a bit across serialization, deserialization.
  syntax:
    content: public JavaType constructSpecializedType(JavaType baseType, Class<?> subclass)
    parameters:
    - id: baseType
      type: com.fasterxml.jackson.databind.JavaType
    - id: subclass
      type: java.lang.Class<?>
    return:
      type: com.fasterxml.jackson.databind.JavaType
  exceptions:
  - type: java.lang.IllegalArgumentException
- uid: com.fasterxml.jackson.databind.DeserializationContext.constructType(java.lang.Class<?>)
  id: constructType(java.lang.Class<?>)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.DeserializationContext
  langs:
  - java
  name: constructType(Class<?> cls)
  nameWithType: DeserializationContext.constructType(Class<?> cls)
  fullName: com.fasterxml.jackson.databind.DeserializationContext.constructType(Class<?> cls)
  overload: com.fasterxml.jackson.databind.DeserializationContext.constructType*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: >-
    Convenience method, functionally equivalent to:


    ```java

    getConfig().constructType(cls);

    ```
  syntax:
    content: public final JavaType constructType(Class<?> cls)
    parameters:
    - id: cls
      type: java.lang.Class<?>
    return:
      type: com.fasterxml.jackson.databind.JavaType
- uid: com.fasterxml.jackson.databind.DeserializationContext.deserializerInstance(com.fasterxml.jackson.databind.introspect.Annotated,java.lang.Object)
  id: deserializerInstance(com.fasterxml.jackson.databind.introspect.Annotated,java.lang.Object)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.DeserializationContext
  langs:
  - java
  name: deserializerInstance(Annotated annotated, Object deserDef)
  nameWithType: DeserializationContext.deserializerInstance(Annotated annotated, Object deserDef)
  fullName: com.fasterxml.jackson.databind.DeserializationContext.deserializerInstance(Annotated annotated, Object deserDef)
  overload: com.fasterxml.jackson.databind.DeserializationContext.deserializerInstance*
  type: Method
  package: com.fasterxml.jackson.databind
  syntax:
    content: public abstract JsonDeserializer<Object> deserializerInstance(Annotated annotated, Object deserDef)
    parameters:
    - id: annotated
      type: com.fasterxml.jackson.databind.introspect.Annotated
    - id: deserDef
      type: java.lang.Object
    return:
      type: com.fasterxml.jackson.databind.JsonDeserializer<java.lang.Object>
  exceptions:
  - type: com.fasterxml.jackson.databind.JsonMappingException
- uid: com.fasterxml.jackson.databind.DeserializationContext.endOfInputException(java.lang.Class<?>)
  id: endOfInputException(java.lang.Class<?>)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.DeserializationContext
  langs:
  - java
  name: endOfInputException(Class<?> instClass)
  nameWithType: DeserializationContext.endOfInputException(Class<?> instClass)
  fullName: com.fasterxml.jackson.databind.DeserializationContext.endOfInputException(Class<?> instClass)
  overload: com.fasterxml.jackson.databind.DeserializationContext.endOfInputException*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: Helper method for constructing exception to indicate that end-of-input was reached while still expecting more tokens to deserialize value of specified type.
  syntax:
    content: public JsonMappingException endOfInputException(Class<?> instClass)
    parameters:
    - id: instClass
      type: java.lang.Class<?>
    return:
      type: com.fasterxml.jackson.databind.JsonMappingException
- uid: com.fasterxml.jackson.databind.DeserializationContext.findClass(java.lang.String)
  id: findClass(java.lang.String)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.DeserializationContext
  langs:
  - java
  name: findClass(String className)
  nameWithType: DeserializationContext.findClass(String className)
  fullName: com.fasterxml.jackson.databind.DeserializationContext.findClass(String className)
  overload: com.fasterxml.jackson.databind.DeserializationContext.findClass*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: Helper method that is to be used when resolving basic class name into Class instance, the reason being that it may be necessary to work around various ClassLoader limitations, as well as to handle primitive type signatures.
  syntax:
    content: public Class<?> findClass(String className)
    parameters:
    - id: className
      type: java.lang.String
    return:
      type: java.lang.Class<?>
  exceptions:
  - type: java.lang.ClassNotFoundException
- uid: com.fasterxml.jackson.databind.DeserializationContext.findContextualValueDeserializer(com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.BeanProperty)
  id: findContextualValueDeserializer(com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.BeanProperty)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.DeserializationContext
  langs:
  - java
  name: findContextualValueDeserializer(JavaType type, BeanProperty prop)
  nameWithType: DeserializationContext.findContextualValueDeserializer(JavaType type, BeanProperty prop)
  fullName: com.fasterxml.jackson.databind.DeserializationContext.findContextualValueDeserializer(JavaType type, BeanProperty prop)
  overload: com.fasterxml.jackson.databind.DeserializationContext.findContextualValueDeserializer*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: Method for finding a value deserializer, and creating a contextual version if necessary, for value reached via specified property.
  syntax:
    content: public final JsonDeserializer<Object> findContextualValueDeserializer(JavaType type, BeanProperty prop)
    parameters:
    - id: type
      type: com.fasterxml.jackson.databind.JavaType
    - id: prop
      type: com.fasterxml.jackson.databind.BeanProperty
    return:
      type: com.fasterxml.jackson.databind.JsonDeserializer<java.lang.Object>
  exceptions:
  - type: com.fasterxml.jackson.databind.JsonMappingException
- uid: com.fasterxml.jackson.databind.DeserializationContext.findInjectableValue(java.lang.Object,com.fasterxml.jackson.databind.BeanProperty,java.lang.Object)
  id: findInjectableValue(java.lang.Object,com.fasterxml.jackson.databind.BeanProperty,java.lang.Object)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.DeserializationContext
  langs:
  - java
  name: findInjectableValue(Object valueId, BeanProperty forProperty, Object beanInstance)
  nameWithType: DeserializationContext.findInjectableValue(Object valueId, BeanProperty forProperty, Object beanInstance)
  fullName: com.fasterxml.jackson.databind.DeserializationContext.findInjectableValue(Object valueId, BeanProperty forProperty, Object beanInstance)
  overload: com.fasterxml.jackson.databind.DeserializationContext.findInjectableValue*
  type: Method
  package: com.fasterxml.jackson.databind
  syntax:
    content: public final Object findInjectableValue(Object valueId, BeanProperty forProperty, Object beanInstance)
    parameters:
    - id: valueId
      type: java.lang.Object
    - id: forProperty
      type: com.fasterxml.jackson.databind.BeanProperty
    - id: beanInstance
      type: java.lang.Object
    return:
      type: java.lang.Object
  exceptions:
  - type: com.fasterxml.jackson.databind.JsonMappingException
- uid: com.fasterxml.jackson.databind.DeserializationContext.findKeyDeserializer(com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.BeanProperty)
  id: findKeyDeserializer(com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.BeanProperty)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.DeserializationContext
  langs:
  - java
  name: findKeyDeserializer(JavaType keyType, BeanProperty prop)
  nameWithType: DeserializationContext.findKeyDeserializer(JavaType keyType, BeanProperty prop)
  fullName: com.fasterxml.jackson.databind.DeserializationContext.findKeyDeserializer(JavaType keyType, BeanProperty prop)
  overload: com.fasterxml.jackson.databind.DeserializationContext.findKeyDeserializer*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: >-
    Convenience method, functionally same as:


    ```java

    getDeserializerProvider().findKeyDeserializer(getConfig(), prop.getType(), prop);

    ```
  syntax:
    content: public final KeyDeserializer findKeyDeserializer(JavaType keyType, BeanProperty prop)
    parameters:
    - id: keyType
      type: com.fasterxml.jackson.databind.JavaType
    - id: prop
      type: com.fasterxml.jackson.databind.BeanProperty
    return:
      type: com.fasterxml.jackson.databind.KeyDeserializer
  exceptions:
  - type: com.fasterxml.jackson.databind.JsonMappingException
- uid: com.fasterxml.jackson.databind.DeserializationContext.findNonContextualValueDeserializer(com.fasterxml.jackson.databind.JavaType)
  id: findNonContextualValueDeserializer(com.fasterxml.jackson.databind.JavaType)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.DeserializationContext
  langs:
  - java
  name: findNonContextualValueDeserializer(JavaType type)
  nameWithType: DeserializationContext.findNonContextualValueDeserializer(JavaType type)
  fullName: com.fasterxml.jackson.databind.DeserializationContext.findNonContextualValueDeserializer(JavaType type)
  overload: com.fasterxml.jackson.databind.DeserializationContext.findNonContextualValueDeserializer*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: Variant that will try to locate deserializer for current type, but without performing any contextualization (unlike <xref uid="com.fasterxml.jackson.databind.DeserializationContext.findContextualValueDeserializer*" data-throw-if-not-resolved="false">#findContextualValueDeserializer</xref>) or checking for need to create a <xref uid="com.fasterxml.jackson.databind.jsontype.TypeDeserializer" data-throw-if-not-resolved="false">TypeDeserializer</xref> (unlike <xref uid="com.fasterxml.jackson.databind.DeserializationContext.findRootValueDeserializer(com.fasterxml.jackson.databind.JavaType)" data-throw-if-not-resolved="false">#findRootValueDeserializer(JavaType)</xref>. This method is usually called from within <xref uid="com.fasterxml.jackson.databind.deser.ResolvableDeserializer.resolve*" data-throw-if-not-resolved="false">ResolvableDeserializer#resolve</xref>, and expectation is that caller then calls either <xref uid="com.fasterxml.jackson.databind.DeserializationContext.handlePrimaryContextualization(com.fasterxml.jackson.databind.JsonDeserializer&lt;?&gt;,com.fasterxml.jackson.databind.BeanProperty,com.fasterxml.jackson.databind.JavaType)" data-throw-if-not-resolved="false">#handlePrimaryContextualization(JsonDeserializer, BeanProperty, JavaType)</xref> or <xref uid="com.fasterxml.jackson.databind.DeserializationContext.handleSecondaryContextualization(com.fasterxml.jackson.databind.JsonDeserializer&lt;?&gt;,com.fasterxml.jackson.databind.BeanProperty,com.fasterxml.jackson.databind.JavaType)" data-throw-if-not-resolved="false">#handleSecondaryContextualization(JsonDeserializer, BeanProperty, JavaType)</xref> at a later point, as necessary.
  syntax:
    content: public final JsonDeserializer<Object> findNonContextualValueDeserializer(JavaType type)
    parameters:
    - id: type
      type: com.fasterxml.jackson.databind.JavaType
    return:
      type: com.fasterxml.jackson.databind.JsonDeserializer<java.lang.Object>
  exceptions:
  - type: com.fasterxml.jackson.databind.JsonMappingException
- uid: com.fasterxml.jackson.databind.DeserializationContext.findObjectId(java.lang.Object,com.fasterxml.jackson.annotation.ObjectIdGenerator<?>,com.fasterxml.jackson.annotation.ObjectIdResolver)
  id: findObjectId(java.lang.Object,com.fasterxml.jackson.annotation.ObjectIdGenerator<?>,com.fasterxml.jackson.annotation.ObjectIdResolver)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.DeserializationContext
  langs:
  - java
  name: findObjectId(Object id, ObjectIdGenerator<?> generator, ObjectIdResolver resolver)
  nameWithType: DeserializationContext.findObjectId(Object id, ObjectIdGenerator<?> generator, ObjectIdResolver resolver)
  fullName: com.fasterxml.jackson.databind.DeserializationContext.findObjectId(Object id, ObjectIdGenerator<?> generator, ObjectIdResolver resolver)
  overload: com.fasterxml.jackson.databind.DeserializationContext.findObjectId*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: 'Method called to find and return entry corresponding to given Object Id: will add an entry if necessary, and never returns null'
  syntax:
    content: public abstract ReadableObjectId findObjectId(Object id, ObjectIdGenerator<?> generator, ObjectIdResolver resolver)
    parameters:
    - id: id
      type: java.lang.Object
    - id: generator
      type: com.fasterxml.jackson.annotation.ObjectIdGenerator<?>
    - id: resolver
      type: com.fasterxml.jackson.annotation.ObjectIdResolver
    return:
      type: com.fasterxml.jackson.databind.deser.impl.ReadableObjectId
- uid: com.fasterxml.jackson.databind.DeserializationContext.findRootValueDeserializer(com.fasterxml.jackson.databind.JavaType)
  id: findRootValueDeserializer(com.fasterxml.jackson.databind.JavaType)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.DeserializationContext
  langs:
  - java
  name: findRootValueDeserializer(JavaType type)
  nameWithType: DeserializationContext.findRootValueDeserializer(JavaType type)
  fullName: com.fasterxml.jackson.databind.DeserializationContext.findRootValueDeserializer(JavaType type)
  overload: com.fasterxml.jackson.databind.DeserializationContext.findRootValueDeserializer*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: Method for finding a deserializer for root-level value.
  syntax:
    content: public final JsonDeserializer<Object> findRootValueDeserializer(JavaType type)
    parameters:
    - id: type
      type: com.fasterxml.jackson.databind.JavaType
    return:
      type: com.fasterxml.jackson.databind.JsonDeserializer<java.lang.Object>
  exceptions:
  - type: com.fasterxml.jackson.databind.JsonMappingException
- uid: com.fasterxml.jackson.databind.DeserializationContext.getActiveView()
  id: getActiveView()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.DeserializationContext
  langs:
  - java
  name: getActiveView()
  nameWithType: DeserializationContext.getActiveView()
  fullName: com.fasterxml.jackson.databind.DeserializationContext.getActiveView()
  overload: com.fasterxml.jackson.databind.DeserializationContext.getActiveView*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: Accessor for locating currently active view, if any; returns null if no view has been set.
  syntax:
    content: public final Class<?> getActiveView()
    return:
      type: java.lang.Class<?>
- uid: com.fasterxml.jackson.databind.DeserializationContext.getAnnotationIntrospector()
  id: getAnnotationIntrospector()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.DeserializationContext
  langs:
  - java
  name: getAnnotationIntrospector()
  nameWithType: DeserializationContext.getAnnotationIntrospector()
  fullName: com.fasterxml.jackson.databind.DeserializationContext.getAnnotationIntrospector()
  overload: com.fasterxml.jackson.databind.DeserializationContext.getAnnotationIntrospector*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: >-
    Convenience method for accessing serialization view in use (if any); equivalent to:


    ```java

    getConfig().getAnnotationIntrospector();

    ```
  syntax:
    content: public final AnnotationIntrospector getAnnotationIntrospector()
    return:
      type: com.fasterxml.jackson.databind.AnnotationIntrospector
- uid: com.fasterxml.jackson.databind.DeserializationContext.getArrayBuilders()
  id: getArrayBuilders()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.DeserializationContext
  langs:
  - java
  name: getArrayBuilders()
  nameWithType: DeserializationContext.getArrayBuilders()
  fullName: com.fasterxml.jackson.databind.DeserializationContext.getArrayBuilders()
  overload: com.fasterxml.jackson.databind.DeserializationContext.getArrayBuilders*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: Method for accessing object useful for building arrays of primitive types (such as int\[\]).
  syntax:
    content: public final ArrayBuilders getArrayBuilders()
    return:
      type: com.fasterxml.jackson.databind.util.ArrayBuilders
- uid: com.fasterxml.jackson.databind.DeserializationContext.getAttribute(java.lang.Object)
  id: getAttribute(java.lang.Object)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.DeserializationContext
  langs:
  - java
  name: getAttribute(Object key)
  nameWithType: DeserializationContext.getAttribute(Object key)
  fullName: com.fasterxml.jackson.databind.DeserializationContext.getAttribute(Object key)
  overload: com.fasterxml.jackson.databind.DeserializationContext.getAttribute*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: Method for accessing attributes available in this context. Per-call attributes have highest precedence; attributes set via <xref uid="com.fasterxml.jackson.databind.ObjectReader" data-throw-if-not-resolved="false">ObjectReader</xref> or <xref uid="com.fasterxml.jackson.databind.ObjectWriter" data-throw-if-not-resolved="false">ObjectWriter</xref> have lower precedence.
  syntax:
    content: public Object getAttribute(Object key)
    parameters:
    - id: key
      type: java.lang.Object
    return:
      type: java.lang.Object
- uid: com.fasterxml.jackson.databind.DeserializationContext.getBase64Variant()
  id: getBase64Variant()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.DeserializationContext
  langs:
  - java
  name: getBase64Variant()
  nameWithType: DeserializationContext.getBase64Variant()
  fullName: com.fasterxml.jackson.databind.DeserializationContext.getBase64Variant()
  overload: com.fasterxml.jackson.databind.DeserializationContext.getBase64Variant*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: >-
    Convenience method for accessing the default Base64 encoding used for decoding base64 encoded binary content. Same as calling:


    ```java

    getConfig().getBase64Variant();

    ```
  syntax:
    content: public final Base64Variant getBase64Variant()
    return:
      type: com.fasterxml.jackson.core.Base64Variant
- uid: com.fasterxml.jackson.databind.DeserializationContext.getConfig()
  id: getConfig()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.DeserializationContext
  langs:
  - java
  name: getConfig()
  nameWithType: DeserializationContext.getConfig()
  fullName: com.fasterxml.jackson.databind.DeserializationContext.getConfig()
  overload: com.fasterxml.jackson.databind.DeserializationContext.getConfig*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: Accessor to currently active configuration (both per-request configs and per-mapper config).
  syntax:
    content: public DeserializationConfig getConfig()
    return:
      type: com.fasterxml.jackson.databind.DeserializationConfig
- uid: com.fasterxml.jackson.databind.DeserializationContext.getContextualType()
  id: getContextualType()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.DeserializationContext
  langs:
  - java
  name: getContextualType()
  nameWithType: DeserializationContext.getContextualType()
  fullName: com.fasterxml.jackson.databind.DeserializationContext.getContextualType()
  overload: com.fasterxml.jackson.databind.DeserializationContext.getContextualType*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: 'Accessor to <xref uid="com.fasterxml.jackson.databind.JavaType" data-throw-if-not-resolved="false">JavaType</xref> of currently contextualized <xref uid="com.fasterxml.jackson.databind.deser.ContextualDeserializer" data-throw-if-not-resolved="false">ContextualDeserializer</xref>, if any. This is sometimes useful for generic <xref uid="com.fasterxml.jackson.databind.JsonDeserializer" data-throw-if-not-resolved="false">JsonDeserializer</xref>s that do not get passed (or do not retain) type information when being constructed: happens for example for deserializers constructed from annotations.'
  syntax:
    content: public JavaType getContextualType()
    return:
      type: com.fasterxml.jackson.databind.JavaType
      description: >-
        Type of <xref uid="com.fasterxml.jackson.databind.deser.ContextualDeserializer" data-throw-if-not-resolved="false">ContextualDeserializer</xref> being contextualized,
           if process is on-going; null if not.
- uid: com.fasterxml.jackson.databind.DeserializationContext.getDateFormat()
  id: getDateFormat()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.DeserializationContext
  langs:
  - java
  name: getDateFormat()
  nameWithType: DeserializationContext.getDateFormat()
  fullName: com.fasterxml.jackson.databind.DeserializationContext.getDateFormat()
  overload: com.fasterxml.jackson.databind.DeserializationContext.getDateFormat*
  type: Method
  package: com.fasterxml.jackson.databind
  syntax:
    content: protected DateFormat getDateFormat()
    return:
      type: java.text.DateFormat
- uid: com.fasterxml.jackson.databind.DeserializationContext.getDefaultPropertyFormat(java.lang.Class<?>)
  id: getDefaultPropertyFormat(java.lang.Class<?>)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.DeserializationContext
  langs:
  - java
  name: getDefaultPropertyFormat(Class<?> baseType)
  nameWithType: DeserializationContext.getDefaultPropertyFormat(Class<?> baseType)
  fullName: com.fasterxml.jackson.databind.DeserializationContext.getDefaultPropertyFormat(Class<?> baseType)
  overload: com.fasterxml.jackson.databind.DeserializationContext.getDefaultPropertyFormat*
  type: Method
  package: com.fasterxml.jackson.databind
  syntax:
    content: public final JsonFormat.Value getDefaultPropertyFormat(Class<?> baseType)
    parameters:
    - id: baseType
      type: java.lang.Class<?>
    return:
      type: com.fasterxml.jackson.annotation.JsonFormat.Value
- uid: com.fasterxml.jackson.databind.DeserializationContext.getDeserializationFeatures()
  id: getDeserializationFeatures()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.DeserializationContext
  langs:
  - java
  name: getDeserializationFeatures()
  nameWithType: DeserializationContext.getDeserializationFeatures()
  fullName: com.fasterxml.jackson.databind.DeserializationContext.getDeserializationFeatures()
  overload: com.fasterxml.jackson.databind.DeserializationContext.getDeserializationFeatures*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: Bulk access method for getting the bit mask of all <xref uid="com.fasterxml.jackson.databind.DeserializationFeature" data-throw-if-not-resolved="false">DeserializationFeature</xref>s that are enabled.
  syntax:
    content: public final int getDeserializationFeatures()
    return:
      type: int
- uid: com.fasterxml.jackson.databind.DeserializationContext.getFactory()
  id: getFactory()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.DeserializationContext
  langs:
  - java
  name: getFactory()
  nameWithType: DeserializationContext.getFactory()
  fullName: com.fasterxml.jackson.databind.DeserializationContext.getFactory()
  overload: com.fasterxml.jackson.databind.DeserializationContext.getFactory*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: Method for getting current <xref uid="com.fasterxml.jackson.databind.deser.DeserializerFactory" data-throw-if-not-resolved="false">DeserializerFactory</xref>.
  syntax:
    content: public DeserializerFactory getFactory()
    return:
      type: com.fasterxml.jackson.databind.deser.DeserializerFactory
- uid: com.fasterxml.jackson.databind.DeserializationContext.getLocale()
  id: getLocale()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.DeserializationContext
  langs:
  - java
  name: getLocale()
  nameWithType: DeserializationContext.getLocale()
  fullName: com.fasterxml.jackson.databind.DeserializationContext.getLocale()
  overload: com.fasterxml.jackson.databind.DeserializationContext.getLocale*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: >-
    Method for accessing default Locale to use: convenience method for


    ```java

    getConfig().getLocale();

    ```
  syntax:
    content: public Locale getLocale()
    return:
      type: java.util.Locale
- uid: com.fasterxml.jackson.databind.DeserializationContext.getNodeFactory()
  id: getNodeFactory()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.DeserializationContext
  langs:
  - java
  name: getNodeFactory()
  nameWithType: DeserializationContext.getNodeFactory()
  fullName: com.fasterxml.jackson.databind.DeserializationContext.getNodeFactory()
  overload: com.fasterxml.jackson.databind.DeserializationContext.getNodeFactory*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: >-
    Convenience method, functionally equivalent to:


    ```java

    getConfig().getNodeFactory();

    ```
  syntax:
    content: public final JsonNodeFactory getNodeFactory()
    return:
      type: com.fasterxml.jackson.databind.node.JsonNodeFactory
- uid: com.fasterxml.jackson.databind.DeserializationContext.getParser()
  id: getParser()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.DeserializationContext
  langs:
  - java
  name: getParser()
  nameWithType: DeserializationContext.getParser()
  fullName: com.fasterxml.jackson.databind.DeserializationContext.getParser()
  overload: com.fasterxml.jackson.databind.DeserializationContext.getParser*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: >-
    Method for accessing the currently active parser. May be different from the outermost parser when content is buffered.


    Use of this method is discouraged: if code has direct access to the active parser, that should be used instead.
  syntax:
    content: public final JsonParser getParser()
    return:
      type: com.fasterxml.jackson.core.JsonParser
- uid: com.fasterxml.jackson.databind.DeserializationContext.getTimeZone()
  id: getTimeZone()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.DeserializationContext
  langs:
  - java
  name: getTimeZone()
  nameWithType: DeserializationContext.getTimeZone()
  fullName: com.fasterxml.jackson.databind.DeserializationContext.getTimeZone()
  overload: com.fasterxml.jackson.databind.DeserializationContext.getTimeZone*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: >-
    Method for accessing default TimeZone to use: convenience method for


    ```java

    getConfig().getTimeZone();

    ```
  syntax:
    content: public TimeZone getTimeZone()
    return:
      type: java.util.TimeZone
- uid: com.fasterxml.jackson.databind.DeserializationContext.getTypeFactory()
  id: getTypeFactory()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.DeserializationContext
  langs:
  - java
  name: getTypeFactory()
  nameWithType: DeserializationContext.getTypeFactory()
  fullName: com.fasterxml.jackson.databind.DeserializationContext.getTypeFactory()
  overload: com.fasterxml.jackson.databind.DeserializationContext.getTypeFactory*
  type: Method
  package: com.fasterxml.jackson.databind
  syntax:
    content: public final TypeFactory getTypeFactory()
    return:
      type: com.fasterxml.jackson.databind.type.TypeFactory
- uid: com.fasterxml.jackson.databind.DeserializationContext.handleBadMerge(com.fasterxml.jackson.databind.JsonDeserializer<?>)
  id: handleBadMerge(com.fasterxml.jackson.databind.JsonDeserializer<?>)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.DeserializationContext
  langs:
  - java
  name: handleBadMerge(JsonDeserializer<?> deser)
  nameWithType: DeserializationContext.handleBadMerge(JsonDeserializer<?> deser)
  fullName: com.fasterxml.jackson.databind.DeserializationContext.handleBadMerge(JsonDeserializer<?> deser)
  overload: com.fasterxml.jackson.databind.DeserializationContext.handleBadMerge*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: Method that deserializer may call if it is called to do an update ("merge") but deserializer operates on a non-mergeable type. Although this should usually be caught earlier, sometimes it may only be caught during operation and if so this is the method to call. Note that if <xref uid="com.fasterxml.jackson.databind.MapperFeature.IGNORE_MERGE_FOR_UNMERGEABLE" data-throw-if-not-resolved="false">MapperFeature#IGNORE_MERGE_FOR_UNMERGEABLE</xref> is enabled, this method will simply return null; otherwise <xref uid="com.fasterxml.jackson.databind.exc.InvalidDefinitionException" data-throw-if-not-resolved="false">InvalidDefinitionException</xref> will be thrown.
  syntax:
    content: public void handleBadMerge(JsonDeserializer<?> deser)
    parameters:
    - id: deser
      type: com.fasterxml.jackson.databind.JsonDeserializer<?>
  exceptions:
  - type: com.fasterxml.jackson.databind.JsonMappingException
- uid: com.fasterxml.jackson.databind.DeserializationContext.handleInstantiationProblem(java.lang.Class<?>,java.lang.Object,java.lang.Throwable)
  id: handleInstantiationProblem(java.lang.Class<?>,java.lang.Object,java.lang.Throwable)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.DeserializationContext
  langs:
  - java
  name: handleInstantiationProblem(Class<?> instClass, Object argument, Throwable t)
  nameWithType: DeserializationContext.handleInstantiationProblem(Class<?> instClass, Object argument, Throwable t)
  fullName: com.fasterxml.jackson.databind.DeserializationContext.handleInstantiationProblem(Class<?> instClass, Object argument, Throwable t)
  overload: com.fasterxml.jackson.databind.DeserializationContext.handleInstantiationProblem*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: Method that deserializers should call if they fail to instantiate value due to an exception that was thrown by constructor (or other mechanism used to create instances). Default implementation will try to call <xref uid="com.fasterxml.jackson.databind.deser.DeserializationProblemHandler.handleInstantiationProblem*" data-throw-if-not-resolved="false">DeserializationProblemHandler#handleInstantiationProblem</xref> on configured handlers, if any, to allow for recovery; if recovery does not succeed, will throw exception constructed with <xref uid="com.fasterxml.jackson.databind.DeserializationContext.instantiationException*" data-throw-if-not-resolved="false">#instantiationException</xref>.
  syntax:
    content: public Object handleInstantiationProblem(Class<?> instClass, Object argument, Throwable t)
    parameters:
    - id: instClass
      type: java.lang.Class<?>
      description: Type that was to be instantiated
    - id: argument
      type: java.lang.Object
      description: >-
        (optional) Argument that was passed to constructor or equivalent
            instantiator; often a <xref uid="java.lang.String" data-throw-if-not-resolved="false">java.lang.String</xref>.
    - id: t
      type: java.lang.Throwable
      description: Exception that caused failure
    return:
      type: java.lang.Object
      description: Object that should be constructed, if any; has to be of type <code>instClass</code>
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.databind.DeserializationContext.handleMissingInstantiator(java.lang.Class<?>,com.fasterxml.jackson.databind.deser.ValueInstantiator,com.fasterxml.jackson.core.JsonParser,java.lang.String,java.lang.Object...)
  id: handleMissingInstantiator(java.lang.Class<?>,com.fasterxml.jackson.databind.deser.ValueInstantiator,com.fasterxml.jackson.core.JsonParser,java.lang.String,java.lang.Object...)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.DeserializationContext
  langs:
  - java
  name: handleMissingInstantiator(Class<?> instClass, ValueInstantiator valueInst, JsonParser p, String msg, Object[] msgArgs)
  nameWithType: DeserializationContext.handleMissingInstantiator(Class<?> instClass, ValueInstantiator valueInst, JsonParser p, String msg, Object[] msgArgs)
  fullName: com.fasterxml.jackson.databind.DeserializationContext.handleMissingInstantiator(Class<?> instClass, ValueInstantiator valueInst, JsonParser p, String msg, Object[] msgArgs)
  overload: com.fasterxml.jackson.databind.DeserializationContext.handleMissingInstantiator*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: Method that deserializers should call if they fail to instantiate value due to lack of viable instantiator (usually creator, that is, constructor or static factory method). Method should be called at point where value has not been decoded, so that handler has a chance to handle decoding using alternate mechanism, and handle underlying content (possibly by just skipping it) to keep input state valid
  syntax:
    content: public Object handleMissingInstantiator(Class<?> instClass, ValueInstantiator valueInst, JsonParser p, String msg, Object[] msgArgs)
    parameters:
    - id: instClass
      type: java.lang.Class<?>
      description: Type that was to be instantiated
    - id: valueInst
      type: com.fasterxml.jackson.databind.deser.ValueInstantiator
      description: >-
        (optional) Value instantiator to be used, if any; null if type does not
            use one for instantiation (custom deserialiers don't; standard POJO deserializer does)
    - id: p
      type: com.fasterxml.jackson.core.JsonParser
      description: Parser that points to the JSON value to decode
    - id: msg
      type: java.lang.String
    - id: msgArgs
      type: java.lang.Object[]
    return:
      type: java.lang.Object
      description: Object that should be constructed, if any; has to be of type <code>instClass</code>
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.databind.DeserializationContext.handleMissingTypeId(com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.jsontype.TypeIdResolver,java.lang.String)
  id: handleMissingTypeId(com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.jsontype.TypeIdResolver,java.lang.String)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.DeserializationContext
  langs:
  - java
  name: handleMissingTypeId(JavaType baseType, TypeIdResolver idResolver, String extraDesc)
  nameWithType: DeserializationContext.handleMissingTypeId(JavaType baseType, TypeIdResolver idResolver, String extraDesc)
  fullName: com.fasterxml.jackson.databind.DeserializationContext.handleMissingTypeId(JavaType baseType, TypeIdResolver idResolver, String extraDesc)
  overload: com.fasterxml.jackson.databind.DeserializationContext.handleMissingTypeId*
  type: Method
  package: com.fasterxml.jackson.databind
  syntax:
    content: public JavaType handleMissingTypeId(JavaType baseType, TypeIdResolver idResolver, String extraDesc)
    parameters:
    - id: baseType
      type: com.fasterxml.jackson.databind.JavaType
    - id: idResolver
      type: com.fasterxml.jackson.databind.jsontype.TypeIdResolver
    - id: extraDesc
      type: java.lang.String
    return:
      type: com.fasterxml.jackson.databind.JavaType
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.databind.DeserializationContext.handlePrimaryContextualization(com.fasterxml.jackson.databind.JsonDeserializer<?>,com.fasterxml.jackson.databind.BeanProperty,com.fasterxml.jackson.databind.JavaType)
  id: handlePrimaryContextualization(com.fasterxml.jackson.databind.JsonDeserializer<?>,com.fasterxml.jackson.databind.BeanProperty,com.fasterxml.jackson.databind.JavaType)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.DeserializationContext
  langs:
  - java
  name: handlePrimaryContextualization(JsonDeserializer<?> deser, BeanProperty prop, JavaType type)
  nameWithType: DeserializationContext.handlePrimaryContextualization(JsonDeserializer<?> deser, BeanProperty prop, JavaType type)
  fullName: com.fasterxml.jackson.databind.DeserializationContext.handlePrimaryContextualization(JsonDeserializer<?> deser, BeanProperty prop, JavaType type)
  overload: com.fasterxml.jackson.databind.DeserializationContext.handlePrimaryContextualization*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: Method called for primary property deserializers (ones directly created to deserialize values of a POJO property), to handle details of resolving <xref uid="com.fasterxml.jackson.databind.deser.ContextualDeserializer" data-throw-if-not-resolved="false">ContextualDeserializer</xref> with given property context.
  syntax:
    content: public JsonDeserializer<?> handlePrimaryContextualization(JsonDeserializer<?> deser, BeanProperty prop, JavaType type)
    parameters:
    - id: deser
      type: com.fasterxml.jackson.databind.JsonDeserializer<?>
    - id: prop
      type: com.fasterxml.jackson.databind.BeanProperty
      description: Property for which the given primary deserializer is used; never null.
    - id: type
      type: com.fasterxml.jackson.databind.JavaType
    return:
      type: com.fasterxml.jackson.databind.JsonDeserializer<?>
  exceptions:
  - type: com.fasterxml.jackson.databind.JsonMappingException
- uid: com.fasterxml.jackson.databind.DeserializationContext.handleSecondaryContextualization(com.fasterxml.jackson.databind.JsonDeserializer<?>,com.fasterxml.jackson.databind.BeanProperty,com.fasterxml.jackson.databind.JavaType)
  id: handleSecondaryContextualization(com.fasterxml.jackson.databind.JsonDeserializer<?>,com.fasterxml.jackson.databind.BeanProperty,com.fasterxml.jackson.databind.JavaType)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.DeserializationContext
  langs:
  - java
  name: handleSecondaryContextualization(JsonDeserializer<?> deser, BeanProperty prop, JavaType type)
  nameWithType: DeserializationContext.handleSecondaryContextualization(JsonDeserializer<?> deser, BeanProperty prop, JavaType type)
  fullName: com.fasterxml.jackson.databind.DeserializationContext.handleSecondaryContextualization(JsonDeserializer<?> deser, BeanProperty prop, JavaType type)
  overload: com.fasterxml.jackson.databind.DeserializationContext.handleSecondaryContextualization*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: Method called for secondary property deserializers (ones NOT directly created to deal with an annotatable POJO property, but instead created as a component -- such as value deserializers for structured types, or deserializers for root values) to handle details of resolving <xref uid="com.fasterxml.jackson.databind.deser.ContextualDeserializer" data-throw-if-not-resolved="false">ContextualDeserializer</xref> with given property context. Given that these deserializers are not directly related to given property (or, in case of root value property, to any property), annotations accessible may or may not be relevant.
  syntax:
    content: public JsonDeserializer<?> handleSecondaryContextualization(JsonDeserializer<?> deser, BeanProperty prop, JavaType type)
    parameters:
    - id: deser
      type: com.fasterxml.jackson.databind.JsonDeserializer<?>
    - id: prop
      type: com.fasterxml.jackson.databind.BeanProperty
      description: >-
        Property for which deserializer is used, if any; null
            when deserializing root values
    - id: type
      type: com.fasterxml.jackson.databind.JavaType
    return:
      type: com.fasterxml.jackson.databind.JsonDeserializer<?>
  exceptions:
  - type: com.fasterxml.jackson.databind.JsonMappingException
- uid: com.fasterxml.jackson.databind.DeserializationContext.handleUnexpectedToken(com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.core.JsonParser)
  id: handleUnexpectedToken(com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.core.JsonParser)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.DeserializationContext
  langs:
  - java
  name: handleUnexpectedToken(JavaType targetType, JsonParser p)
  nameWithType: DeserializationContext.handleUnexpectedToken(JavaType targetType, JsonParser p)
  fullName: com.fasterxml.jackson.databind.DeserializationContext.handleUnexpectedToken(JavaType targetType, JsonParser p)
  overload: com.fasterxml.jackson.databind.DeserializationContext.handleUnexpectedToken*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: Method that deserializers should call if the first token of the value to deserialize is of unexpected type (that is, type of token that deserializer cannot handle). This could occur, for example, if a Number deserializer encounter <xref uid="com.fasterxml.jackson.core.JsonToken.START_ARRAY" data-throw-if-not-resolved="false">JsonToken#START_ARRAY</xref> instead of <xref uid="com.fasterxml.jackson.core.JsonToken.VALUE_NUMBER_INT" data-throw-if-not-resolved="false">JsonToken#VALUE_NUMBER_INT</xref> or <xref uid="com.fasterxml.jackson.core.JsonToken.VALUE_NUMBER_FLOAT" data-throw-if-not-resolved="false">JsonToken#VALUE_NUMBER_FLOAT</xref>.
  syntax:
    content: public Object handleUnexpectedToken(JavaType targetType, JsonParser p)
    parameters:
    - id: targetType
      type: com.fasterxml.jackson.databind.JavaType
      description: Type that was to be instantiated
    - id: p
      type: com.fasterxml.jackson.core.JsonParser
      description: Parser that points to the JSON value to decode
    return:
      type: java.lang.Object
      description: Object that should be constructed, if any; has to be of type <code>instClass</code>
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.databind.DeserializationContext.handleUnexpectedToken(com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.core.JsonToken,com.fasterxml.jackson.core.JsonParser,java.lang.String,java.lang.Object...)
  id: handleUnexpectedToken(com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.core.JsonToken,com.fasterxml.jackson.core.JsonParser,java.lang.String,java.lang.Object...)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.DeserializationContext
  langs:
  - java
  name: handleUnexpectedToken(JavaType targetType, JsonToken t, JsonParser p, String msg, Object[] msgArgs)
  nameWithType: DeserializationContext.handleUnexpectedToken(JavaType targetType, JsonToken t, JsonParser p, String msg, Object[] msgArgs)
  fullName: com.fasterxml.jackson.databind.DeserializationContext.handleUnexpectedToken(JavaType targetType, JsonToken t, JsonParser p, String msg, Object[] msgArgs)
  overload: com.fasterxml.jackson.databind.DeserializationContext.handleUnexpectedToken*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: Method that deserializers should call if the first token of the value to deserialize is of unexpected type (that is, type of token that deserializer cannot handle). This could occur, for example, if a Number deserializer encounter <xref uid="com.fasterxml.jackson.core.JsonToken.START_ARRAY" data-throw-if-not-resolved="false">JsonToken#START_ARRAY</xref> instead of <xref uid="com.fasterxml.jackson.core.JsonToken.VALUE_NUMBER_INT" data-throw-if-not-resolved="false">JsonToken#VALUE_NUMBER_INT</xref> or <xref uid="com.fasterxml.jackson.core.JsonToken.VALUE_NUMBER_FLOAT" data-throw-if-not-resolved="false">JsonToken#VALUE_NUMBER_FLOAT</xref>.
  syntax:
    content: public Object handleUnexpectedToken(JavaType targetType, JsonToken t, JsonParser p, String msg, Object[] msgArgs)
    parameters:
    - id: targetType
      type: com.fasterxml.jackson.databind.JavaType
      description: Type that was to be instantiated
    - id: t
      type: com.fasterxml.jackson.core.JsonToken
      description: Token encountered that does not match expected
    - id: p
      type: com.fasterxml.jackson.core.JsonParser
      description: Parser that points to the JSON value to decode
    - id: msg
      type: java.lang.String
    - id: msgArgs
      type: java.lang.Object[]
    return:
      type: java.lang.Object
      description: Object that should be constructed, if any; has to be of type <code>instClass</code>
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.databind.DeserializationContext.handleUnexpectedToken(java.lang.Class<?>,com.fasterxml.jackson.core.JsonParser)
  id: handleUnexpectedToken(java.lang.Class<?>,com.fasterxml.jackson.core.JsonParser)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.DeserializationContext
  langs:
  - java
  name: handleUnexpectedToken(Class<?> instClass, JsonParser p)
  nameWithType: DeserializationContext.handleUnexpectedToken(Class<?> instClass, JsonParser p)
  fullName: com.fasterxml.jackson.databind.DeserializationContext.handleUnexpectedToken(Class<?> instClass, JsonParser p)
  overload: com.fasterxml.jackson.databind.DeserializationContext.handleUnexpectedToken*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: Method that deserializers should call if the first token of the value to deserialize is of unexpected type (that is, type of token that deserializer cannot handle). This could occur, for example, if a Number deserializer encounter <xref uid="com.fasterxml.jackson.core.JsonToken.START_ARRAY" data-throw-if-not-resolved="false">JsonToken#START_ARRAY</xref> instead of <xref uid="com.fasterxml.jackson.core.JsonToken.VALUE_NUMBER_INT" data-throw-if-not-resolved="false">JsonToken#VALUE_NUMBER_INT</xref> or <xref uid="com.fasterxml.jackson.core.JsonToken.VALUE_NUMBER_FLOAT" data-throw-if-not-resolved="false">JsonToken#VALUE_NUMBER_FLOAT</xref>.
  syntax:
    content: public Object handleUnexpectedToken(Class<?> instClass, JsonParser p)
    parameters:
    - id: instClass
      type: java.lang.Class<?>
      description: Type that was to be instantiated
    - id: p
      type: com.fasterxml.jackson.core.JsonParser
      description: Parser that points to the JSON value to decode
    return:
      type: java.lang.Object
      description: Object that should be constructed, if any; has to be of type <code>instClass</code>
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.databind.DeserializationContext.handleUnexpectedToken(java.lang.Class<?>,com.fasterxml.jackson.core.JsonToken,com.fasterxml.jackson.core.JsonParser,java.lang.String,java.lang.Object...)
  id: handleUnexpectedToken(java.lang.Class<?>,com.fasterxml.jackson.core.JsonToken,com.fasterxml.jackson.core.JsonParser,java.lang.String,java.lang.Object...)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.DeserializationContext
  langs:
  - java
  name: handleUnexpectedToken(Class<?> instClass, JsonToken t, JsonParser p, String msg, Object[] msgArgs)
  nameWithType: DeserializationContext.handleUnexpectedToken(Class<?> instClass, JsonToken t, JsonParser p, String msg, Object[] msgArgs)
  fullName: com.fasterxml.jackson.databind.DeserializationContext.handleUnexpectedToken(Class<?> instClass, JsonToken t, JsonParser p, String msg, Object[] msgArgs)
  overload: com.fasterxml.jackson.databind.DeserializationContext.handleUnexpectedToken*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: Method that deserializers should call if the first token of the value to deserialize is of unexpected type (that is, type of token that deserializer cannot handle). This could occur, for example, if a Number deserializer encounter <xref uid="com.fasterxml.jackson.core.JsonToken.START_ARRAY" data-throw-if-not-resolved="false">JsonToken#START_ARRAY</xref> instead of <xref uid="com.fasterxml.jackson.core.JsonToken.VALUE_NUMBER_INT" data-throw-if-not-resolved="false">JsonToken#VALUE_NUMBER_INT</xref> or <xref uid="com.fasterxml.jackson.core.JsonToken.VALUE_NUMBER_FLOAT" data-throw-if-not-resolved="false">JsonToken#VALUE_NUMBER_FLOAT</xref>.
  syntax:
    content: public Object handleUnexpectedToken(Class<?> instClass, JsonToken t, JsonParser p, String msg, Object[] msgArgs)
    parameters:
    - id: instClass
      type: java.lang.Class<?>
      description: Type that was to be instantiated
    - id: t
      type: com.fasterxml.jackson.core.JsonToken
      description: Token encountered that does match expected
    - id: p
      type: com.fasterxml.jackson.core.JsonParser
      description: Parser that points to the JSON value to decode
    - id: msg
      type: java.lang.String
    - id: msgArgs
      type: java.lang.Object[]
    return:
      type: java.lang.Object
      description: Object that should be constructed, if any; has to be of type <code>instClass</code>
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.databind.DeserializationContext.handleUnknownProperty(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.JsonDeserializer<?>,java.lang.Object,java.lang.String)
  id: handleUnknownProperty(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.JsonDeserializer<?>,java.lang.Object,java.lang.String)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.DeserializationContext
  langs:
  - java
  name: handleUnknownProperty(JsonParser p, JsonDeserializer<?> deser, Object instanceOrClass, String propName)
  nameWithType: DeserializationContext.handleUnknownProperty(JsonParser p, JsonDeserializer<?> deser, Object instanceOrClass, String propName)
  fullName: com.fasterxml.jackson.databind.DeserializationContext.handleUnknownProperty(JsonParser p, JsonDeserializer<?> deser, Object instanceOrClass, String propName)
  overload: com.fasterxml.jackson.databind.DeserializationContext.handleUnknownProperty*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: Method that deserializers should call if they encounter an unrecognized property (and once that is not explicitly designed as ignorable), to inform possibly configured <xref uid="com.fasterxml.jackson.databind.deser.DeserializationProblemHandler" data-throw-if-not-resolved="false">DeserializationProblemHandler</xref>s and let it handle the problem.
  syntax:
    content: public boolean handleUnknownProperty(JsonParser p, JsonDeserializer<?> deser, Object instanceOrClass, String propName)
    parameters:
    - id: p
      type: com.fasterxml.jackson.core.JsonParser
    - id: deser
      type: com.fasterxml.jackson.databind.JsonDeserializer<?>
    - id: instanceOrClass
      type: java.lang.Object
    - id: propName
      type: java.lang.String
    return:
      type: boolean
      description: >-
        True if there was a configured problem handler that was able to handle the
           problem
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.databind.DeserializationContext.handleUnknownTypeId(com.fasterxml.jackson.databind.JavaType,java.lang.String,com.fasterxml.jackson.databind.jsontype.TypeIdResolver,java.lang.String)
  id: handleUnknownTypeId(com.fasterxml.jackson.databind.JavaType,java.lang.String,com.fasterxml.jackson.databind.jsontype.TypeIdResolver,java.lang.String)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.DeserializationContext
  langs:
  - java
  name: handleUnknownTypeId(JavaType baseType, String id, TypeIdResolver idResolver, String extraDesc)
  nameWithType: DeserializationContext.handleUnknownTypeId(JavaType baseType, String id, TypeIdResolver idResolver, String extraDesc)
  fullName: com.fasterxml.jackson.databind.DeserializationContext.handleUnknownTypeId(JavaType baseType, String id, TypeIdResolver idResolver, String extraDesc)
  overload: com.fasterxml.jackson.databind.DeserializationContext.handleUnknownTypeId*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: Method that deserializers should call if they encounter a type id (for polymorphic deserialization) that cannot be resolved to an actual type; usually since there is no mapping defined. Default implementation will try to call <xref uid="com.fasterxml.jackson.databind.deser.DeserializationProblemHandler.handleUnknownTypeId*" data-throw-if-not-resolved="false">DeserializationProblemHandler#handleUnknownTypeId</xref> on configured handlers, if any, to allow for recovery; if recovery does not succeed, will throw exception constructed with <xref uid="com.fasterxml.jackson.databind.DeserializationContext.invalidTypeIdException*" data-throw-if-not-resolved="false">#invalidTypeIdException</xref>.
  syntax:
    content: public JavaType handleUnknownTypeId(JavaType baseType, String id, TypeIdResolver idResolver, String extraDesc)
    parameters:
    - id: baseType
      type: com.fasterxml.jackson.databind.JavaType
      description: Base type from which resolution starts
    - id: id
      type: java.lang.String
      description: Type id that could not be converted
    - id: idResolver
      type: com.fasterxml.jackson.databind.jsontype.TypeIdResolver
    - id: extraDesc
      type: java.lang.String
      description: >-
        Additional problem description to add to default exception message,
            if resolution fails.
    return:
      type: com.fasterxml.jackson.databind.JavaType
      description: <xref uid="com.fasterxml.jackson.databind.JavaType" data-throw-if-not-resolved="false">JavaType</xref> that id resolves to
  exceptions:
  - type: java.io.IOException
    description: >-
      To indicate unrecoverable problem, if resolution cannot
          be made to work
- uid: com.fasterxml.jackson.databind.DeserializationContext.handleWeirdKey(java.lang.Class<?>,java.lang.String,java.lang.String,java.lang.Object...)
  id: handleWeirdKey(java.lang.Class<?>,java.lang.String,java.lang.String,java.lang.Object...)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.DeserializationContext
  langs:
  - java
  name: handleWeirdKey(Class<?> keyClass, String keyValue, String msg, Object[] msgArgs)
  nameWithType: DeserializationContext.handleWeirdKey(Class<?> keyClass, String keyValue, String msg, Object[] msgArgs)
  fullName: com.fasterxml.jackson.databind.DeserializationContext.handleWeirdKey(Class<?> keyClass, String keyValue, String msg, Object[] msgArgs)
  overload: com.fasterxml.jackson.databind.DeserializationContext.handleWeirdKey*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: Method that deserializers should call if they encounter a String value that cannot be converted to expected key of a <xref uid="java.util.Map" data-throw-if-not-resolved="false">java.util.Map</xref> valued property. Default implementation will try to call <xref uid="com.fasterxml.jackson.databind.deser.DeserializationProblemHandler.handleWeirdNumberValue*" data-throw-if-not-resolved="false">DeserializationProblemHandler#handleWeirdNumberValue</xref> on configured handlers, if any, to allow for recovery; if recovery does not succeed, will throw <xref uid="com.fasterxml.jackson.databind.exc.InvalidFormatException" data-throw-if-not-resolved="false">InvalidFormatException</xref> with given message.
  syntax:
    content: public Object handleWeirdKey(Class<?> keyClass, String keyValue, String msg, Object[] msgArgs)
    parameters:
    - id: keyClass
      type: java.lang.Class<?>
      description: Expected type for key
    - id: keyValue
      type: java.lang.String
      description: String value from which to deserialize key
    - id: msg
      type: java.lang.String
      description: Error message template caller wants to use if exception is to be thrown
    - id: msgArgs
      type: java.lang.Object[]
      description: Optional arguments to use for message, if any
    return:
      type: java.lang.Object
      description: Key value to use
  exceptions:
  - type: java.io.IOException
    description: To indicate unrecoverable problem, usually based on <code>msg</code>
- uid: com.fasterxml.jackson.databind.DeserializationContext.handleWeirdNativeValue(com.fasterxml.jackson.databind.JavaType,java.lang.Object,com.fasterxml.jackson.core.JsonParser)
  id: handleWeirdNativeValue(com.fasterxml.jackson.databind.JavaType,java.lang.Object,com.fasterxml.jackson.core.JsonParser)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.DeserializationContext
  langs:
  - java
  name: handleWeirdNativeValue(JavaType targetType, Object badValue, JsonParser p)
  nameWithType: DeserializationContext.handleWeirdNativeValue(JavaType targetType, Object badValue, JsonParser p)
  fullName: com.fasterxml.jackson.databind.DeserializationContext.handleWeirdNativeValue(JavaType targetType, Object badValue, JsonParser p)
  overload: com.fasterxml.jackson.databind.DeserializationContext.handleWeirdNativeValue*
  type: Method
  package: com.fasterxml.jackson.databind
  syntax:
    content: public Object handleWeirdNativeValue(JavaType targetType, Object badValue, JsonParser p)
    parameters:
    - id: targetType
      type: com.fasterxml.jackson.databind.JavaType
    - id: badValue
      type: java.lang.Object
    - id: p
      type: com.fasterxml.jackson.core.JsonParser
    return:
      type: java.lang.Object
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.databind.DeserializationContext.handleWeirdNumberValue(java.lang.Class<?>,java.lang.Number,java.lang.String,java.lang.Object...)
  id: handleWeirdNumberValue(java.lang.Class<?>,java.lang.Number,java.lang.String,java.lang.Object...)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.DeserializationContext
  langs:
  - java
  name: handleWeirdNumberValue(Class<?> targetClass, Number value, String msg, Object[] msgArgs)
  nameWithType: DeserializationContext.handleWeirdNumberValue(Class<?> targetClass, Number value, String msg, Object[] msgArgs)
  fullName: com.fasterxml.jackson.databind.DeserializationContext.handleWeirdNumberValue(Class<?> targetClass, Number value, String msg, Object[] msgArgs)
  overload: com.fasterxml.jackson.databind.DeserializationContext.handleWeirdNumberValue*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: Method that deserializers should call if they encounter a numeric value that cannot be converted to target property type, in cases where some numeric values could be acceptable (either with different settings, or different numeric value). Default implementation will try to call <xref uid="com.fasterxml.jackson.databind.deser.DeserializationProblemHandler.handleWeirdNumberValue*" data-throw-if-not-resolved="false">DeserializationProblemHandler#handleWeirdNumberValue</xref> on configured handlers, if any, to allow for recovery; if recovery does not succeed, will throw <xref uid="com.fasterxml.jackson.databind.exc.InvalidFormatException" data-throw-if-not-resolved="false">InvalidFormatException</xref> with given message.
  syntax:
    content: public Object handleWeirdNumberValue(Class<?> targetClass, Number value, String msg, Object[] msgArgs)
    parameters:
    - id: targetClass
      type: java.lang.Class<?>
      description: Type of property into which incoming number should be converted
    - id: value
      type: java.lang.Number
      description: Number value from which to deserialize property value
    - id: msg
      type: java.lang.String
      description: Error message template caller wants to use if exception is to be thrown
    - id: msgArgs
      type: java.lang.Object[]
      description: Optional arguments to use for message, if any
    return:
      type: java.lang.Object
      description: Property value to use
  exceptions:
  - type: java.io.IOException
    description: To indicate unrecoverable problem, usually based on <code>msg</code>
- uid: com.fasterxml.jackson.databind.DeserializationContext.handleWeirdStringValue(java.lang.Class<?>,java.lang.String,java.lang.String,java.lang.Object...)
  id: handleWeirdStringValue(java.lang.Class<?>,java.lang.String,java.lang.String,java.lang.Object...)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.DeserializationContext
  langs:
  - java
  name: handleWeirdStringValue(Class<?> targetClass, String value, String msg, Object[] msgArgs)
  nameWithType: DeserializationContext.handleWeirdStringValue(Class<?> targetClass, String value, String msg, Object[] msgArgs)
  fullName: com.fasterxml.jackson.databind.DeserializationContext.handleWeirdStringValue(Class<?> targetClass, String value, String msg, Object[] msgArgs)
  overload: com.fasterxml.jackson.databind.DeserializationContext.handleWeirdStringValue*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: Method that deserializers should call if they encounter a String value that cannot be converted to target property type, in cases where some String values could be acceptable (either with different settings, or different value). Default implementation will try to call <xref uid="com.fasterxml.jackson.databind.deser.DeserializationProblemHandler.handleWeirdStringValue*" data-throw-if-not-resolved="false">DeserializationProblemHandler#handleWeirdStringValue</xref> on configured handlers, if any, to allow for recovery; if recovery does not succeed, will throw <xref uid="com.fasterxml.jackson.databind.exc.InvalidFormatException" data-throw-if-not-resolved="false">InvalidFormatException</xref> with given message.
  syntax:
    content: public Object handleWeirdStringValue(Class<?> targetClass, String value, String msg, Object[] msgArgs)
    parameters:
    - id: targetClass
      type: java.lang.Class<?>
      description: Type of property into which incoming number should be converted
    - id: value
      type: java.lang.String
      description: String value from which to deserialize property value
    - id: msg
      type: java.lang.String
      description: Error message template caller wants to use if exception is to be thrown
    - id: msgArgs
      type: java.lang.Object[]
      description: Optional arguments to use for message, if any
    return:
      type: java.lang.Object
      description: Property value to use
  exceptions:
  - type: java.io.IOException
    description: To indicate unrecoverable problem, usually based on <code>msg</code>
- uid: com.fasterxml.jackson.databind.DeserializationContext.hasDeserializationFeatures(int)
  id: hasDeserializationFeatures(int)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.DeserializationContext
  langs:
  - java
  name: hasDeserializationFeatures(int featureMask)
  nameWithType: DeserializationContext.hasDeserializationFeatures(int featureMask)
  fullName: com.fasterxml.jackson.databind.DeserializationContext.hasDeserializationFeatures(int featureMask)
  overload: com.fasterxml.jackson.databind.DeserializationContext.hasDeserializationFeatures*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: Bulk access method for checking that all features specified by mask are enabled.
  syntax:
    content: public final boolean hasDeserializationFeatures(int featureMask)
    parameters:
    - id: featureMask
      type: int
    return:
      type: boolean
- uid: com.fasterxml.jackson.databind.DeserializationContext.hasSomeOfFeatures(int)
  id: hasSomeOfFeatures(int)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.DeserializationContext
  langs:
  - java
  name: hasSomeOfFeatures(int featureMask)
  nameWithType: DeserializationContext.hasSomeOfFeatures(int featureMask)
  fullName: com.fasterxml.jackson.databind.DeserializationContext.hasSomeOfFeatures(int featureMask)
  overload: com.fasterxml.jackson.databind.DeserializationContext.hasSomeOfFeatures*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: Bulk access method for checking that at least one of features specified by mask is enabled.
  syntax:
    content: public final boolean hasSomeOfFeatures(int featureMask)
    parameters:
    - id: featureMask
      type: int
    return:
      type: boolean
- uid: com.fasterxml.jackson.databind.DeserializationContext.hasValueDeserializerFor(com.fasterxml.jackson.databind.JavaType,java.util.concurrent.atomic.AtomicReference<java.lang.Throwable>)
  id: hasValueDeserializerFor(com.fasterxml.jackson.databind.JavaType,java.util.concurrent.atomic.AtomicReference<java.lang.Throwable>)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.DeserializationContext
  langs:
  - java
  name: hasValueDeserializerFor(JavaType type, AtomicReference<Throwable> cause)
  nameWithType: DeserializationContext.hasValueDeserializerFor(JavaType type, AtomicReference<Throwable> cause)
  fullName: com.fasterxml.jackson.databind.DeserializationContext.hasValueDeserializerFor(JavaType type, AtomicReference<Throwable> cause)
  overload: com.fasterxml.jackson.databind.DeserializationContext.hasValueDeserializerFor*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: Method for checking whether we could find a deserializer for given type.
  syntax:
    content: public boolean hasValueDeserializerFor(JavaType type, AtomicReference<Throwable> cause)
    parameters:
    - id: type
      type: com.fasterxml.jackson.databind.JavaType
    - id: cause
      type: java.util.concurrent.atomic.AtomicReference<java.lang.Throwable>
    return:
      type: boolean
- uid: com.fasterxml.jackson.databind.DeserializationContext.instantiationException(java.lang.Class<?>,java.lang.String)
  id: instantiationException(java.lang.Class<?>,java.lang.String)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.DeserializationContext
  langs:
  - java
  name: instantiationException(Class<?> instClass, String msg0)
  nameWithType: DeserializationContext.instantiationException(Class<?> instClass, String msg0)
  fullName: com.fasterxml.jackson.databind.DeserializationContext.instantiationException(Class<?> instClass, String msg0)
  overload: com.fasterxml.jackson.databind.DeserializationContext.instantiationException*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: >-
    Helper method for constructing instantiation exception for specified type, to indicate that instantiation failed due to missing instantiator (creator; constructor or factory method).


    Note that most of the time this method should NOT be called; instead, <xref uid="com.fasterxml.jackson.databind.DeserializationContext.handleMissingInstantiator*" data-throw-if-not-resolved="false">#handleMissingInstantiator</xref> should be called which will call this method if necessary.
  syntax:
    content: public JsonMappingException instantiationException(Class<?> instClass, String msg0)
    parameters:
    - id: instClass
      type: java.lang.Class<?>
    - id: msg0
      type: java.lang.String
    return:
      type: com.fasterxml.jackson.databind.JsonMappingException
- uid: com.fasterxml.jackson.databind.DeserializationContext.instantiationException(java.lang.Class<?>,java.lang.Throwable)
  id: instantiationException(java.lang.Class<?>,java.lang.Throwable)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.DeserializationContext
  langs:
  - java
  name: instantiationException(Class<?> instClass, Throwable cause)
  nameWithType: DeserializationContext.instantiationException(Class<?> instClass, Throwable cause)
  fullName: com.fasterxml.jackson.databind.DeserializationContext.instantiationException(Class<?> instClass, Throwable cause)
  overload: com.fasterxml.jackson.databind.DeserializationContext.instantiationException*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: >-
    Helper method for constructing instantiation exception for specified type, to indicate problem with physically constructing instance of specified class (missing constructor, exception from constructor)


    Note that most of the time this method should NOT be called directly; instead, <xref uid="com.fasterxml.jackson.databind.DeserializationContext.handleInstantiationProblem*" data-throw-if-not-resolved="false">#handleInstantiationProblem</xref> should be called which will call this method if necessary.
  syntax:
    content: public JsonMappingException instantiationException(Class<?> instClass, Throwable cause)
    parameters:
    - id: instClass
      type: java.lang.Class<?>
    - id: cause
      type: java.lang.Throwable
    return:
      type: com.fasterxml.jackson.databind.JsonMappingException
- uid: com.fasterxml.jackson.databind.DeserializationContext.invalidTypeIdException(com.fasterxml.jackson.databind.JavaType,java.lang.String,java.lang.String)
  id: invalidTypeIdException(com.fasterxml.jackson.databind.JavaType,java.lang.String,java.lang.String)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.DeserializationContext
  langs:
  - java
  name: invalidTypeIdException(JavaType baseType, String typeId, String extraDesc)
  nameWithType: DeserializationContext.invalidTypeIdException(JavaType baseType, String typeId, String extraDesc)
  fullName: com.fasterxml.jackson.databind.DeserializationContext.invalidTypeIdException(JavaType baseType, String typeId, String extraDesc)
  overload: com.fasterxml.jackson.databind.DeserializationContext.invalidTypeIdException*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: >-
    Helper method for constructing exception to indicate that given type id could not be resolved to a valid subtype of specified base type. Most commonly called during polymorphic deserialization.


    Note that most of the time this method should NOT be called directly: instead, method `handleUnknownTypeId()` should be called which will call this method if necessary.
  syntax:
    content: public JsonMappingException invalidTypeIdException(JavaType baseType, String typeId, String extraDesc)
    parameters:
    - id: baseType
      type: com.fasterxml.jackson.databind.JavaType
    - id: typeId
      type: java.lang.String
    - id: extraDesc
      type: java.lang.String
    return:
      type: com.fasterxml.jackson.databind.JsonMappingException
- uid: com.fasterxml.jackson.databind.DeserializationContext.isEnabled(com.fasterxml.jackson.databind.DeserializationFeature)
  id: isEnabled(com.fasterxml.jackson.databind.DeserializationFeature)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.DeserializationContext
  langs:
  - java
  name: isEnabled(DeserializationFeature feat)
  nameWithType: DeserializationContext.isEnabled(DeserializationFeature feat)
  fullName: com.fasterxml.jackson.databind.DeserializationContext.isEnabled(DeserializationFeature feat)
  overload: com.fasterxml.jackson.databind.DeserializationContext.isEnabled*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: Convenience method for checking whether specified on/off feature is enabled
  syntax:
    content: public final boolean isEnabled(DeserializationFeature feat)
    parameters:
    - id: feat
      type: com.fasterxml.jackson.databind.DeserializationFeature
    return:
      type: boolean
- uid: com.fasterxml.jackson.databind.DeserializationContext.isEnabled(com.fasterxml.jackson.databind.MapperFeature)
  id: isEnabled(com.fasterxml.jackson.databind.MapperFeature)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.DeserializationContext
  langs:
  - java
  name: isEnabled(MapperFeature feature)
  nameWithType: DeserializationContext.isEnabled(MapperFeature feature)
  fullName: com.fasterxml.jackson.databind.DeserializationContext.isEnabled(MapperFeature feature)
  overload: com.fasterxml.jackson.databind.DeserializationContext.isEnabled*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: >-
    Convenience method for checking whether specified serialization feature is enabled or not. Shortcut for:


    ```java

    getConfig().isEnabled(feature);

    ```
  syntax:
    content: public final boolean isEnabled(MapperFeature feature)
    parameters:
    - id: feature
      type: com.fasterxml.jackson.databind.MapperFeature
    return:
      type: boolean
- uid: com.fasterxml.jackson.databind.DeserializationContext.keyDeserializerInstance(com.fasterxml.jackson.databind.introspect.Annotated,java.lang.Object)
  id: keyDeserializerInstance(com.fasterxml.jackson.databind.introspect.Annotated,java.lang.Object)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.DeserializationContext
  langs:
  - java
  name: keyDeserializerInstance(Annotated annotated, Object deserDef)
  nameWithType: DeserializationContext.keyDeserializerInstance(Annotated annotated, Object deserDef)
  fullName: com.fasterxml.jackson.databind.DeserializationContext.keyDeserializerInstance(Annotated annotated, Object deserDef)
  overload: com.fasterxml.jackson.databind.DeserializationContext.keyDeserializerInstance*
  type: Method
  package: com.fasterxml.jackson.databind
  syntax:
    content: public abstract KeyDeserializer keyDeserializerInstance(Annotated annotated, Object deserDef)
    parameters:
    - id: annotated
      type: com.fasterxml.jackson.databind.introspect.Annotated
    - id: deserDef
      type: java.lang.Object
    return:
      type: com.fasterxml.jackson.databind.KeyDeserializer
  exceptions:
  - type: com.fasterxml.jackson.databind.JsonMappingException
- uid: com.fasterxml.jackson.databind.DeserializationContext.leaseObjectBuffer()
  id: leaseObjectBuffer()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.DeserializationContext
  langs:
  - java
  name: leaseObjectBuffer()
  nameWithType: DeserializationContext.leaseObjectBuffer()
  fullName: com.fasterxml.jackson.databind.DeserializationContext.leaseObjectBuffer()
  overload: com.fasterxml.jackson.databind.DeserializationContext.leaseObjectBuffer*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: Method that can be used to get access to a reusable ObjectBuffer, useful for efficiently constructing Object arrays and Lists. Note that leased buffers should be returned once deserializer is done, to allow for reuse during same round of deserialization.
  syntax:
    content: public final ObjectBuffer leaseObjectBuffer()
    return:
      type: com.fasterxml.jackson.databind.util.ObjectBuffer
- uid: com.fasterxml.jackson.databind.DeserializationContext.mappingException(java.lang.Class<?>)
  id: mappingException(java.lang.Class<?>)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.DeserializationContext
  langs:
  - java
  name: mappingException(Class<?> targetClass)
  nameWithType: DeserializationContext.mappingException(Class<?> targetClass)
  fullName: com.fasterxml.jackson.databind.DeserializationContext.mappingException(Class<?> targetClass)
  overload: com.fasterxml.jackson.databind.DeserializationContext.mappingException*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: Helper method for constructing generic mapping exception for specified type
  syntax:
    content: public JsonMappingException mappingException(Class<?> targetClass)
    parameters:
    - id: targetClass
      type: java.lang.Class<?>
    return:
      type: com.fasterxml.jackson.databind.JsonMappingException
- uid: com.fasterxml.jackson.databind.DeserializationContext.mappingException(java.lang.Class<?>,com.fasterxml.jackson.core.JsonToken)
  id: mappingException(java.lang.Class<?>,com.fasterxml.jackson.core.JsonToken)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.DeserializationContext
  langs:
  - java
  name: mappingException(Class<?> targetClass, JsonToken token)
  nameWithType: DeserializationContext.mappingException(Class<?> targetClass, JsonToken token)
  fullName: com.fasterxml.jackson.databind.DeserializationContext.mappingException(Class<?> targetClass, JsonToken token)
  overload: com.fasterxml.jackson.databind.DeserializationContext.mappingException*
  type: Method
  package: com.fasterxml.jackson.databind
  syntax:
    content: public JsonMappingException mappingException(Class<?> targetClass, JsonToken token)
    parameters:
    - id: targetClass
      type: java.lang.Class<?>
    - id: token
      type: com.fasterxml.jackson.core.JsonToken
    return:
      type: com.fasterxml.jackson.databind.JsonMappingException
- uid: com.fasterxml.jackson.databind.DeserializationContext.mappingException(java.lang.String)
  id: mappingException(java.lang.String)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.DeserializationContext
  langs:
  - java
  name: mappingException(String message)
  nameWithType: DeserializationContext.mappingException(String message)
  fullName: com.fasterxml.jackson.databind.DeserializationContext.mappingException(String message)
  overload: com.fasterxml.jackson.databind.DeserializationContext.mappingException*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: Helper method for constructing generic mapping exception with specified message and current location information. Note that application code should almost always call one of `handleXxx` methods, or <xref uid="com.fasterxml.jackson.databind.DeserializationContext.reportMappingException*" data-throw-if-not-resolved="false">#reportMappingException(String, Object...)</xref> instead.
  syntax:
    content: public JsonMappingException mappingException(String message)
    parameters:
    - id: message
      type: java.lang.String
    return:
      type: com.fasterxml.jackson.databind.JsonMappingException
- uid: com.fasterxml.jackson.databind.DeserializationContext.mappingException(java.lang.String,java.lang.Object...)
  id: mappingException(java.lang.String,java.lang.Object...)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.DeserializationContext
  langs:
  - java
  name: mappingException(String msg, Object[] msgArgs)
  nameWithType: DeserializationContext.mappingException(String msg, Object[] msgArgs)
  fullName: com.fasterxml.jackson.databind.DeserializationContext.mappingException(String msg, Object[] msgArgs)
  overload: com.fasterxml.jackson.databind.DeserializationContext.mappingException*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: Helper method for constructing generic mapping exception with specified message and current location information Note that application code should almost always call one of `handleXxx` methods, or <xref uid="com.fasterxml.jackson.databind.DeserializationContext.reportMappingException*" data-throw-if-not-resolved="false">#reportMappingException(String, Object...)</xref> instead.
  syntax:
    content: public JsonMappingException mappingException(String msg, Object[] msgArgs)
    parameters:
    - id: msg
      type: java.lang.String
    - id: msgArgs
      type: java.lang.Object[]
    return:
      type: com.fasterxml.jackson.databind.JsonMappingException
- uid: com.fasterxml.jackson.databind.DeserializationContext.missingTypeIdException(com.fasterxml.jackson.databind.JavaType,java.lang.String)
  id: missingTypeIdException(com.fasterxml.jackson.databind.JavaType,java.lang.String)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.DeserializationContext
  langs:
  - java
  name: missingTypeIdException(JavaType baseType, String extraDesc)
  nameWithType: DeserializationContext.missingTypeIdException(JavaType baseType, String extraDesc)
  fullName: com.fasterxml.jackson.databind.DeserializationContext.missingTypeIdException(JavaType baseType, String extraDesc)
  overload: com.fasterxml.jackson.databind.DeserializationContext.missingTypeIdException*
  type: Method
  package: com.fasterxml.jackson.databind
  syntax:
    content: public JsonMappingException missingTypeIdException(JavaType baseType, String extraDesc)
    parameters:
    - id: baseType
      type: com.fasterxml.jackson.databind.JavaType
    - id: extraDesc
      type: java.lang.String
    return:
      type: com.fasterxml.jackson.databind.JsonMappingException
- uid: com.fasterxml.jackson.databind.DeserializationContext.parseDate(java.lang.String)
  id: parseDate(java.lang.String)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.DeserializationContext
  langs:
  - java
  name: parseDate(String dateStr)
  nameWithType: DeserializationContext.parseDate(String dateStr)
  fullName: com.fasterxml.jackson.databind.DeserializationContext.parseDate(String dateStr)
  overload: com.fasterxml.jackson.databind.DeserializationContext.parseDate*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: >-
    Convenience method for parsing a Date from given String, using currently configured date format (accessed using <xref uid="com.fasterxml.jackson.databind.DeserializationConfig.getDateFormat*" data-throw-if-not-resolved="false">DeserializationConfig#getDateFormat()</xref>).


    Implementation will handle thread-safety issues related to date formats such that first time this method is called, date format is cloned, and cloned instance will be retained for use during this deserialization round.
  syntax:
    content: public Date parseDate(String dateStr)
    parameters:
    - id: dateStr
      type: java.lang.String
    return:
      type: java.util.Date
  exceptions:
  - type: java.lang.IllegalArgumentException
- uid: com.fasterxml.jackson.databind.DeserializationContext.readTree(com.fasterxml.jackson.core.JsonParser)
  id: readTree(com.fasterxml.jackson.core.JsonParser)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.DeserializationContext
  langs:
  - java
  name: readTree(JsonParser p)
  nameWithType: DeserializationContext.readTree(JsonParser p)
  fullName: com.fasterxml.jackson.databind.DeserializationContext.readTree(JsonParser p)
  overload: com.fasterxml.jackson.databind.DeserializationContext.readTree*
  type: Method
  package: com.fasterxml.jackson.databind
  syntax:
    content: public JsonNode readTree(JsonParser p)
    parameters:
    - id: p
      type: com.fasterxml.jackson.core.JsonParser
    return:
      type: com.fasterxml.jackson.databind.JsonNode
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.databind.DeserializationContext.reportMappingException(java.lang.String,java.lang.Object...)
  id: reportMappingException(java.lang.String,java.lang.Object...)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.DeserializationContext
  langs:
  - java
  name: reportMappingException(String msg, Object[] msgArgs)
  nameWithType: DeserializationContext.reportMappingException(String msg, Object[] msgArgs)
  fullName: com.fasterxml.jackson.databind.DeserializationContext.reportMappingException(String msg, Object[] msgArgs)
  overload: com.fasterxml.jackson.databind.DeserializationContext.reportMappingException*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: Fallback method that may be called if no other `reportXxx` is applicable -- but only in that case.
  syntax:
    content: public void reportMappingException(String msg, Object[] msgArgs)
    parameters:
    - id: msg
      type: java.lang.String
    - id: msgArgs
      type: java.lang.Object[]
  exceptions:
  - type: com.fasterxml.jackson.databind.JsonMappingException
- uid: com.fasterxml.jackson.databind.DeserializationContext.reportMissingContent(java.lang.String,java.lang.Object...)
  id: reportMissingContent(java.lang.String,java.lang.Object...)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.DeserializationContext
  langs:
  - java
  name: reportMissingContent(String msg, Object[] msgArgs)
  nameWithType: DeserializationContext.reportMissingContent(String msg, Object[] msgArgs)
  fullName: com.fasterxml.jackson.databind.DeserializationContext.reportMissingContent(String msg, Object[] msgArgs)
  overload: com.fasterxml.jackson.databind.DeserializationContext.reportMissingContent*
  type: Method
  package: com.fasterxml.jackson.databind
  syntax:
    content: public void reportMissingContent(String msg, Object[] msgArgs)
    parameters:
    - id: msg
      type: java.lang.String
    - id: msgArgs
      type: java.lang.Object[]
  exceptions:
  - type: com.fasterxml.jackson.databind.JsonMappingException
- uid: com.fasterxml.jackson.databind.DeserializationContext.reportUnknownProperty(java.lang.Object,java.lang.String,com.fasterxml.jackson.databind.JsonDeserializer<?>)
  id: reportUnknownProperty(java.lang.Object,java.lang.String,com.fasterxml.jackson.databind.JsonDeserializer<?>)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.DeserializationContext
  langs:
  - java
  name: reportUnknownProperty(Object instanceOrClass, String fieldName, JsonDeserializer<?> deser)
  nameWithType: DeserializationContext.reportUnknownProperty(Object instanceOrClass, String fieldName, JsonDeserializer<?> deser)
  fullName: com.fasterxml.jackson.databind.DeserializationContext.reportUnknownProperty(Object instanceOrClass, String fieldName, JsonDeserializer<?> deser)
  overload: com.fasterxml.jackson.databind.DeserializationContext.reportUnknownProperty*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: Helper method for reporting a problem with unhandled unknown property.
  syntax:
    content: public void reportUnknownProperty(Object instanceOrClass, String fieldName, JsonDeserializer<?> deser)
    parameters:
    - id: instanceOrClass
      type: java.lang.Object
      description: >-
        Either value being populated (if one has been
           instantiated), or Class that indicates type that would be (or
           have been) instantiated
    - id: fieldName
      type: java.lang.String
    - id: deser
      type: com.fasterxml.jackson.databind.JsonDeserializer<?>
      description: >-
        Deserializer that had the problem, if called by deserializer
           (or on behalf of one)
  exceptions:
  - type: com.fasterxml.jackson.databind.JsonMappingException
- uid: com.fasterxml.jackson.databind.DeserializationContext.reportWrongTokenException(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.core.JsonToken,java.lang.String,java.lang.Object...)
  id: reportWrongTokenException(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.core.JsonToken,java.lang.String,java.lang.Object...)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.DeserializationContext
  langs:
  - java
  name: reportWrongTokenException(JsonParser p, JsonToken expToken, String msg, Object[] msgArgs)
  nameWithType: DeserializationContext.reportWrongTokenException(JsonParser p, JsonToken expToken, String msg, Object[] msgArgs)
  fullName: com.fasterxml.jackson.databind.DeserializationContext.reportWrongTokenException(JsonParser p, JsonToken expToken, String msg, Object[] msgArgs)
  overload: com.fasterxml.jackson.databind.DeserializationContext.reportWrongTokenException*
  type: Method
  package: com.fasterxml.jackson.databind
  syntax:
    content: public void reportWrongTokenException(JsonParser p, JsonToken expToken, String msg, Object[] msgArgs)
    parameters:
    - id: p
      type: com.fasterxml.jackson.core.JsonParser
    - id: expToken
      type: com.fasterxml.jackson.core.JsonToken
    - id: msg
      type: java.lang.String
    - id: msgArgs
      type: java.lang.Object[]
  exceptions:
  - type: com.fasterxml.jackson.databind.JsonMappingException
- uid: com.fasterxml.jackson.databind.DeserializationContext.reportWrongTokenException(com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.core.JsonToken,java.lang.String,java.lang.Object...)
  id: reportWrongTokenException(com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.core.JsonToken,java.lang.String,java.lang.Object...)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.DeserializationContext
  langs:
  - java
  name: reportWrongTokenException(JavaType targetType, JsonToken expToken, String msg, Object[] msgArgs)
  nameWithType: DeserializationContext.reportWrongTokenException(JavaType targetType, JsonToken expToken, String msg, Object[] msgArgs)
  fullName: com.fasterxml.jackson.databind.DeserializationContext.reportWrongTokenException(JavaType targetType, JsonToken expToken, String msg, Object[] msgArgs)
  overload: com.fasterxml.jackson.databind.DeserializationContext.reportWrongTokenException*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: Method for deserializers to call when the token encountered was of type different than what **should** be seen at that position, usually within a sequence of expected tokens. Note that this method will throw a <xref uid="com.fasterxml.jackson.databind.JsonMappingException" data-throw-if-not-resolved="false">JsonMappingException</xref> and no recovery is attempted (via <xref uid="com.fasterxml.jackson.databind.deser.DeserializationProblemHandler" data-throw-if-not-resolved="false">DeserializationProblemHandler</xref>, as problem is considered to be difficult to recover from, in general.
  syntax:
    content: public void reportWrongTokenException(JavaType targetType, JsonToken expToken, String msg, Object[] msgArgs)
    parameters:
    - id: targetType
      type: com.fasterxml.jackson.databind.JavaType
    - id: expToken
      type: com.fasterxml.jackson.core.JsonToken
    - id: msg
      type: java.lang.String
    - id: msgArgs
      type: java.lang.Object[]
  exceptions:
  - type: com.fasterxml.jackson.databind.JsonMappingException
- uid: com.fasterxml.jackson.databind.DeserializationContext.reportWrongTokenException(com.fasterxml.jackson.databind.JsonDeserializer<?>,com.fasterxml.jackson.core.JsonToken,java.lang.String,java.lang.Object...)
  id: reportWrongTokenException(com.fasterxml.jackson.databind.JsonDeserializer<?>,com.fasterxml.jackson.core.JsonToken,java.lang.String,java.lang.Object...)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.DeserializationContext
  langs:
  - java
  name: reportWrongTokenException(JsonDeserializer<?> deser, JsonToken expToken, String msg, Object[] msgArgs)
  nameWithType: DeserializationContext.reportWrongTokenException(JsonDeserializer<?> deser, JsonToken expToken, String msg, Object[] msgArgs)
  fullName: com.fasterxml.jackson.databind.DeserializationContext.reportWrongTokenException(JsonDeserializer<?> deser, JsonToken expToken, String msg, Object[] msgArgs)
  overload: com.fasterxml.jackson.databind.DeserializationContext.reportWrongTokenException*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: Method for deserializers to call when the token encountered was of type different than what **should** be seen at that position, usually within a sequence of expected tokens. Note that this method will throw a <xref uid="com.fasterxml.jackson.databind.JsonMappingException" data-throw-if-not-resolved="false">JsonMappingException</xref> and no recovery is attempted (via <xref uid="com.fasterxml.jackson.databind.deser.DeserializationProblemHandler" data-throw-if-not-resolved="false">DeserializationProblemHandler</xref>, as problem is considered to be difficult to recover from, in general.
  syntax:
    content: public void reportWrongTokenException(JsonDeserializer<?> deser, JsonToken expToken, String msg, Object[] msgArgs)
    parameters:
    - id: deser
      type: com.fasterxml.jackson.databind.JsonDeserializer<?>
    - id: expToken
      type: com.fasterxml.jackson.core.JsonToken
    - id: msg
      type: java.lang.String
    - id: msgArgs
      type: java.lang.Object[]
  exceptions:
  - type: com.fasterxml.jackson.databind.JsonMappingException
- uid: com.fasterxml.jackson.databind.DeserializationContext.reportWrongTokenException(java.lang.Class<?>,com.fasterxml.jackson.core.JsonToken,java.lang.String,java.lang.Object...)
  id: reportWrongTokenException(java.lang.Class<?>,com.fasterxml.jackson.core.JsonToken,java.lang.String,java.lang.Object...)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.DeserializationContext
  langs:
  - java
  name: reportWrongTokenException(Class<?> targetType, JsonToken expToken, String msg, Object[] msgArgs)
  nameWithType: DeserializationContext.reportWrongTokenException(Class<?> targetType, JsonToken expToken, String msg, Object[] msgArgs)
  fullName: com.fasterxml.jackson.databind.DeserializationContext.reportWrongTokenException(Class<?> targetType, JsonToken expToken, String msg, Object[] msgArgs)
  overload: com.fasterxml.jackson.databind.DeserializationContext.reportWrongTokenException*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: Method for deserializers to call when the token encountered was of type different than what **should** be seen at that position, usually within a sequence of expected tokens. Note that this method will throw a <xref uid="com.fasterxml.jackson.databind.JsonMappingException" data-throw-if-not-resolved="false">JsonMappingException</xref> and no recovery is attempted (via <xref uid="com.fasterxml.jackson.databind.deser.DeserializationProblemHandler" data-throw-if-not-resolved="false">DeserializationProblemHandler</xref>, as problem is considered to be difficult to recover from, in general.
  syntax:
    content: public void reportWrongTokenException(Class<?> targetType, JsonToken expToken, String msg, Object[] msgArgs)
    parameters:
    - id: targetType
      type: java.lang.Class<?>
    - id: expToken
      type: com.fasterxml.jackson.core.JsonToken
    - id: msg
      type: java.lang.String
    - id: msgArgs
      type: java.lang.Object[]
  exceptions:
  - type: com.fasterxml.jackson.databind.JsonMappingException
- uid: com.fasterxml.jackson.databind.DeserializationContext.returnObjectBuffer(com.fasterxml.jackson.databind.util.ObjectBuffer)
  id: returnObjectBuffer(com.fasterxml.jackson.databind.util.ObjectBuffer)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.DeserializationContext
  langs:
  - java
  name: returnObjectBuffer(ObjectBuffer buf)
  nameWithType: DeserializationContext.returnObjectBuffer(ObjectBuffer buf)
  fullName: com.fasterxml.jackson.databind.DeserializationContext.returnObjectBuffer(ObjectBuffer buf)
  overload: com.fasterxml.jackson.databind.DeserializationContext.returnObjectBuffer*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: Method to call to return object buffer previously leased with <xref uid="com.fasterxml.jackson.databind.DeserializationContext.leaseObjectBuffer*" data-throw-if-not-resolved="false">#leaseObjectBuffer</xref>.
  syntax:
    content: public final void returnObjectBuffer(ObjectBuffer buf)
    parameters:
    - id: buf
      type: com.fasterxml.jackson.databind.util.ObjectBuffer
      description: Returned object buffer
- uid: com.fasterxml.jackson.databind.DeserializationContext.setAttribute(java.lang.Object,java.lang.Object)
  id: setAttribute(java.lang.Object,java.lang.Object)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.DeserializationContext
  langs:
  - java
  name: setAttribute(Object key, Object value)
  nameWithType: DeserializationContext.setAttribute(Object key, Object value)
  fullName: com.fasterxml.jackson.databind.DeserializationContext.setAttribute(Object key, Object value)
  overload: com.fasterxml.jackson.databind.DeserializationContext.setAttribute*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: Method for setting per-call value of given attribute. This will override any previously defined value for the attribute within this context.
  syntax:
    content: public DeserializationContext setAttribute(Object key, Object value)
    parameters:
    - id: key
      type: java.lang.Object
    - id: value
      type: java.lang.Object
    return:
      type: com.fasterxml.jackson.databind.DeserializationContext
- uid: com.fasterxml.jackson.databind.DeserializationContext.unknownTypeException(com.fasterxml.jackson.databind.JavaType,java.lang.String,java.lang.String)
  id: unknownTypeException(com.fasterxml.jackson.databind.JavaType,java.lang.String,java.lang.String)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.DeserializationContext
  langs:
  - java
  name: unknownTypeException(JavaType type, String id, String extraDesc)
  nameWithType: DeserializationContext.unknownTypeException(JavaType type, String id, String extraDesc)
  fullName: com.fasterxml.jackson.databind.DeserializationContext.unknownTypeException(JavaType type, String id, String extraDesc)
  overload: com.fasterxml.jackson.databind.DeserializationContext.unknownTypeException*
  type: Method
  package: com.fasterxml.jackson.databind
  syntax:
    content: public JsonMappingException unknownTypeException(JavaType type, String id, String extraDesc)
    parameters:
    - id: type
      type: com.fasterxml.jackson.databind.JavaType
    - id: id
      type: java.lang.String
    - id: extraDesc
      type: java.lang.String
    return:
      type: com.fasterxml.jackson.databind.JsonMappingException
- uid: com.fasterxml.jackson.databind.DeserializationContext.weirdKeyException(java.lang.Class<?>,java.lang.String,java.lang.String)
  id: weirdKeyException(java.lang.Class<?>,java.lang.String,java.lang.String)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.DeserializationContext
  langs:
  - java
  name: weirdKeyException(Class<?> keyClass, String keyValue, String msg)
  nameWithType: DeserializationContext.weirdKeyException(Class<?> keyClass, String keyValue, String msg)
  fullName: com.fasterxml.jackson.databind.DeserializationContext.weirdKeyException(Class<?> keyClass, String keyValue, String msg)
  overload: com.fasterxml.jackson.databind.DeserializationContext.weirdKeyException*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: Helper method for constructing exception to indicate that given JSON Object field name was not in format to be able to deserialize specified key type. Note that most of the time this method should NOT be called; instead, <xref uid="com.fasterxml.jackson.databind.DeserializationContext.handleWeirdKey*" data-throw-if-not-resolved="false">#handleWeirdKey</xref> should be called which will call this method if necessary.
  syntax:
    content: public JsonMappingException weirdKeyException(Class<?> keyClass, String keyValue, String msg)
    parameters:
    - id: keyClass
      type: java.lang.Class<?>
    - id: keyValue
      type: java.lang.String
    - id: msg
      type: java.lang.String
    return:
      type: com.fasterxml.jackson.databind.JsonMappingException
- uid: com.fasterxml.jackson.databind.DeserializationContext.weirdNativeValueException(java.lang.Object,java.lang.Class<?>)
  id: weirdNativeValueException(java.lang.Object,java.lang.Class<?>)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.DeserializationContext
  langs:
  - java
  name: weirdNativeValueException(Object value, Class<?> instClass)
  nameWithType: DeserializationContext.weirdNativeValueException(Object value, Class<?> instClass)
  fullName: com.fasterxml.jackson.databind.DeserializationContext.weirdNativeValueException(Object value, Class<?> instClass)
  overload: com.fasterxml.jackson.databind.DeserializationContext.weirdNativeValueException*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: Helper method for constructing exception to indicate that input JSON token of type "native value" (see <xref uid="com.fasterxml.jackson.core.JsonToken.VALUE_EMBEDDED_OBJECT" data-throw-if-not-resolved="false">JsonToken#VALUE_EMBEDDED_OBJECT</xref>) is of incompatible type (and there is no delegating creator or such to use) and can not be used to construct value of specified type (usually POJO). Note that most of the time this method should NOT be called; instead, <xref uid="com.fasterxml.jackson.databind.DeserializationContext.handleWeirdNativeValue*" data-throw-if-not-resolved="false">#handleWeirdNativeValue</xref> should be called which will call this method
  syntax:
    content: public JsonMappingException weirdNativeValueException(Object value, Class<?> instClass)
    parameters:
    - id: value
      type: java.lang.Object
    - id: instClass
      type: java.lang.Class<?>
    return:
      type: com.fasterxml.jackson.databind.JsonMappingException
- uid: com.fasterxml.jackson.databind.DeserializationContext.weirdNumberException(java.lang.Number,java.lang.Class<?>,java.lang.String)
  id: weirdNumberException(java.lang.Number,java.lang.Class<?>,java.lang.String)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.DeserializationContext
  langs:
  - java
  name: weirdNumberException(Number value, Class<?> instClass, String msg)
  nameWithType: DeserializationContext.weirdNumberException(Number value, Class<?> instClass, String msg)
  fullName: com.fasterxml.jackson.databind.DeserializationContext.weirdNumberException(Number value, Class<?> instClass, String msg)
  overload: com.fasterxml.jackson.databind.DeserializationContext.weirdNumberException*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: Helper method for constructing exception to indicate that input JSON Number was not suitable for deserializing into given target type. Note that most of the time this method should NOT be called; instead, <xref uid="com.fasterxml.jackson.databind.DeserializationContext.handleWeirdNumberValue*" data-throw-if-not-resolved="false">#handleWeirdNumberValue</xref> should be called which will call this method if necessary.
  syntax:
    content: public JsonMappingException weirdNumberException(Number value, Class<?> instClass, String msg)
    parameters:
    - id: value
      type: java.lang.Number
    - id: instClass
      type: java.lang.Class<?>
    - id: msg
      type: java.lang.String
    return:
      type: com.fasterxml.jackson.databind.JsonMappingException
- uid: com.fasterxml.jackson.databind.DeserializationContext.weirdStringException(java.lang.String,java.lang.Class<?>,java.lang.String)
  id: weirdStringException(java.lang.String,java.lang.Class<?>,java.lang.String)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.DeserializationContext
  langs:
  - java
  name: weirdStringException(String value, Class<?> instClass, String msgBase)
  nameWithType: DeserializationContext.weirdStringException(String value, Class<?> instClass, String msgBase)
  fullName: com.fasterxml.jackson.databind.DeserializationContext.weirdStringException(String value, Class<?> instClass, String msgBase)
  overload: com.fasterxml.jackson.databind.DeserializationContext.weirdStringException*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: Helper method for constructing exception to indicate that input JSON String was not suitable for deserializing into given target type. Note that most of the time this method should NOT be called; instead, <xref uid="com.fasterxml.jackson.databind.DeserializationContext.handleWeirdStringValue*" data-throw-if-not-resolved="false">#handleWeirdStringValue</xref> should be called which will call this method if necessary.
  syntax:
    content: public JsonMappingException weirdStringException(String value, Class<?> instClass, String msgBase)
    parameters:
    - id: value
      type: java.lang.String
      description: String value from input being deserialized
    - id: instClass
      type: java.lang.Class<?>
      description: Type that String should be deserialized into
    - id: msgBase
      type: java.lang.String
      description: Message that describes specific problem
    return:
      type: com.fasterxml.jackson.databind.JsonMappingException
- uid: com.fasterxml.jackson.databind.DeserializationContext.wrongTokenException(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.core.JsonToken,java.lang.String)
  id: wrongTokenException(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.core.JsonToken,java.lang.String)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.DeserializationContext
  langs:
  - java
  name: wrongTokenException(JsonParser p, JsonToken expToken, String msg)
  nameWithType: DeserializationContext.wrongTokenException(JsonParser p, JsonToken expToken, String msg)
  fullName: com.fasterxml.jackson.databind.DeserializationContext.wrongTokenException(JsonParser p, JsonToken expToken, String msg)
  overload: com.fasterxml.jackson.databind.DeserializationContext.wrongTokenException*
  type: Method
  package: com.fasterxml.jackson.databind
  syntax:
    content: public JsonMappingException wrongTokenException(JsonParser p, JsonToken expToken, String msg)
    parameters:
    - id: p
      type: com.fasterxml.jackson.core.JsonParser
    - id: expToken
      type: com.fasterxml.jackson.core.JsonToken
    - id: msg
      type: java.lang.String
    return:
      type: com.fasterxml.jackson.databind.JsonMappingException
- uid: com.fasterxml.jackson.databind.DeserializationContext.wrongTokenException(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.core.JsonToken,java.lang.String)
  id: wrongTokenException(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.core.JsonToken,java.lang.String)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.DeserializationContext
  langs:
  - java
  name: wrongTokenException(JsonParser p, JavaType targetType, JsonToken expToken, String extra)
  nameWithType: DeserializationContext.wrongTokenException(JsonParser p, JavaType targetType, JsonToken expToken, String extra)
  fullName: com.fasterxml.jackson.databind.DeserializationContext.wrongTokenException(JsonParser p, JavaType targetType, JsonToken expToken, String extra)
  overload: com.fasterxml.jackson.databind.DeserializationContext.wrongTokenException*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: Helper method for constructing <xref uid="com.fasterxml.jackson.databind.JsonMappingException" data-throw-if-not-resolved="false">JsonMappingException</xref> to indicate that the token encountered was of type different than what **should** be seen at that position, usually within a sequence of expected tokens. Note that most of the time this method should NOT be directly called; instead, <xref uid="com.fasterxml.jackson.databind.DeserializationContext.reportWrongTokenException*" data-throw-if-not-resolved="false">#reportWrongTokenException</xref> should be called and will call this method as necessary.
  syntax:
    content: public JsonMappingException wrongTokenException(JsonParser p, JavaType targetType, JsonToken expToken, String extra)
    parameters:
    - id: p
      type: com.fasterxml.jackson.core.JsonParser
    - id: targetType
      type: com.fasterxml.jackson.databind.JavaType
    - id: expToken
      type: com.fasterxml.jackson.core.JsonToken
    - id: extra
      type: java.lang.String
    return:
      type: com.fasterxml.jackson.databind.JsonMappingException
- uid: com.fasterxml.jackson.databind.DeserializationContext.wrongTokenException(com.fasterxml.jackson.core.JsonParser,java.lang.Class<?>,com.fasterxml.jackson.core.JsonToken,java.lang.String)
  id: wrongTokenException(com.fasterxml.jackson.core.JsonParser,java.lang.Class<?>,com.fasterxml.jackson.core.JsonToken,java.lang.String)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.DeserializationContext
  langs:
  - java
  name: wrongTokenException(JsonParser p, Class<?> targetType, JsonToken expToken, String extra)
  nameWithType: DeserializationContext.wrongTokenException(JsonParser p, Class<?> targetType, JsonToken expToken, String extra)
  fullName: com.fasterxml.jackson.databind.DeserializationContext.wrongTokenException(JsonParser p, Class<?> targetType, JsonToken expToken, String extra)
  overload: com.fasterxml.jackson.databind.DeserializationContext.wrongTokenException*
  type: Method
  package: com.fasterxml.jackson.databind
  syntax:
    content: public JsonMappingException wrongTokenException(JsonParser p, Class<?> targetType, JsonToken expToken, String extra)
    parameters:
    - id: p
      type: com.fasterxml.jackson.core.JsonParser
    - id: targetType
      type: java.lang.Class<?>
    - id: expToken
      type: com.fasterxml.jackson.core.JsonToken
    - id: extra
      type: java.lang.String
    return:
      type: com.fasterxml.jackson.databind.JsonMappingException
references:
- uid: com.fasterxml.jackson.databind.deser.DeserializerFactory
  name: DeserializerFactory
  nameWithType: DeserializerFactory
  fullName: com.fasterxml.jackson.databind.deser.DeserializerFactory
- uid: com.fasterxml.jackson.databind.DeserializationContext.DeserializationContext*
  name: DeserializationContext
  nameWithType: DeserializationContext.DeserializationContext
  fullName: com.fasterxml.jackson.databind.DeserializationContext.DeserializationContext
  package: com.fasterxml.jackson.databind
- uid: com.fasterxml.jackson.databind.deser.DeserializerCache
  name: DeserializerCache
  nameWithType: DeserializerCache
  fullName: com.fasterxml.jackson.databind.deser.DeserializerCache
- uid: com.fasterxml.jackson.databind.DeserializationConfig
  name: DeserializationConfig
  nameWithType: DeserializationConfig
  fullName: com.fasterxml.jackson.databind.DeserializationConfig
- uid: com.fasterxml.jackson.core.JsonParser
  name: JsonParser
  nameWithType: JsonParser
  fullName: com.fasterxml.jackson.core.JsonParser
- uid: com.fasterxml.jackson.databind.InjectableValues
  name: InjectableValues
  nameWithType: InjectableValues
  fullName: com.fasterxml.jackson.databind.InjectableValues
- uid: com.fasterxml.jackson.databind.DeserializationContext.getConfig*
  name: getConfig
  nameWithType: DeserializationContext.getConfig
  fullName: com.fasterxml.jackson.databind.DeserializationContext.getConfig
  package: com.fasterxml.jackson.databind
- uid: java.lang.Class<?>
  spec.java:
  - uid: java.lang.Class
    name: Class
    fullName: java.lang.Class
  - name: <
    fullName: <
  - uid: '?'
    name: '?'
    fullName: '?'
  - name: '>'
    fullName: '>'
- uid: com.fasterxml.jackson.databind.DeserializationContext.getActiveView*
  name: getActiveView
  nameWithType: DeserializationContext.getActiveView
  fullName: com.fasterxml.jackson.databind.DeserializationContext.getActiveView
  package: com.fasterxml.jackson.databind
- uid: boolean
  spec.java:
  - uid: boolean
    name: boolean
    fullName: boolean
- uid: com.fasterxml.jackson.databind.DeserializationContext.canOverrideAccessModifiers*
  name: canOverrideAccessModifiers
  nameWithType: DeserializationContext.canOverrideAccessModifiers
  fullName: com.fasterxml.jackson.databind.DeserializationContext.canOverrideAccessModifiers
  package: com.fasterxml.jackson.databind
- uid: com.fasterxml.jackson.databind.MapperFeature
  name: MapperFeature
  nameWithType: MapperFeature
  fullName: com.fasterxml.jackson.databind.MapperFeature
- uid: com.fasterxml.jackson.databind.DeserializationContext.isEnabled*
  name: isEnabled
  nameWithType: DeserializationContext.isEnabled
  fullName: com.fasterxml.jackson.databind.DeserializationContext.isEnabled
  package: com.fasterxml.jackson.databind
- uid: com.fasterxml.jackson.annotation.JsonFormat.Value
  name: JsonFormat.Value
  nameWithType: JsonFormat.Value
  fullName: com.fasterxml.jackson.annotation.JsonFormat.Value
- uid: com.fasterxml.jackson.databind.DeserializationContext.getDefaultPropertyFormat*
  name: getDefaultPropertyFormat
  nameWithType: DeserializationContext.getDefaultPropertyFormat
  fullName: com.fasterxml.jackson.databind.DeserializationContext.getDefaultPropertyFormat
  package: com.fasterxml.jackson.databind
- uid: com.fasterxml.jackson.databind.AnnotationIntrospector
  name: AnnotationIntrospector
  nameWithType: AnnotationIntrospector
  fullName: com.fasterxml.jackson.databind.AnnotationIntrospector
- uid: com.fasterxml.jackson.databind.DeserializationContext.getAnnotationIntrospector*
  name: getAnnotationIntrospector
  nameWithType: DeserializationContext.getAnnotationIntrospector
  fullName: com.fasterxml.jackson.databind.DeserializationContext.getAnnotationIntrospector
  package: com.fasterxml.jackson.databind
- uid: com.fasterxml.jackson.databind.type.TypeFactory
  name: TypeFactory
  nameWithType: TypeFactory
  fullName: com.fasterxml.jackson.databind.type.TypeFactory
- uid: com.fasterxml.jackson.databind.DeserializationContext.getTypeFactory*
  name: getTypeFactory
  nameWithType: DeserializationContext.getTypeFactory
  fullName: com.fasterxml.jackson.databind.DeserializationContext.getTypeFactory
  package: com.fasterxml.jackson.databind
- uid: java.lang.IllegalArgumentException
  spec.java:
  - uid: java.lang.IllegalArgumentException
    name: IllegalArgumentException
    fullName: java.lang.IllegalArgumentException
- uid: com.fasterxml.jackson.databind.JavaType
  name: JavaType
  nameWithType: JavaType
  fullName: com.fasterxml.jackson.databind.JavaType
- uid: com.fasterxml.jackson.databind.DeserializationContext.constructSpecializedType*
  name: constructSpecializedType
  nameWithType: DeserializationContext.constructSpecializedType
  fullName: com.fasterxml.jackson.databind.DeserializationContext.constructSpecializedType
  package: com.fasterxml.jackson.databind
- uid: java.util.Locale
  spec.java:
  - uid: java.util.Locale
    name: Locale
    fullName: java.util.Locale
- uid: com.fasterxml.jackson.databind.DeserializationContext.getLocale*
  name: getLocale
  nameWithType: DeserializationContext.getLocale
  fullName: com.fasterxml.jackson.databind.DeserializationContext.getLocale
  package: com.fasterxml.jackson.databind
- uid: java.util.TimeZone
  spec.java:
  - uid: java.util.TimeZone
    name: TimeZone
    fullName: java.util.TimeZone
- uid: com.fasterxml.jackson.databind.DeserializationContext.getTimeZone*
  name: getTimeZone
  nameWithType: DeserializationContext.getTimeZone
  fullName: com.fasterxml.jackson.databind.DeserializationContext.getTimeZone
  package: com.fasterxml.jackson.databind
- uid: java.lang.Object
  spec.java:
  - uid: java.lang.Object
    name: Object
    fullName: java.lang.Object
- uid: com.fasterxml.jackson.databind.DeserializationContext.getAttribute*
  name: getAttribute
  nameWithType: DeserializationContext.getAttribute
  fullName: com.fasterxml.jackson.databind.DeserializationContext.getAttribute
  package: com.fasterxml.jackson.databind
- uid: com.fasterxml.jackson.databind.DeserializationContext.setAttribute*
  name: setAttribute
  nameWithType: DeserializationContext.setAttribute
  fullName: com.fasterxml.jackson.databind.DeserializationContext.setAttribute
  package: com.fasterxml.jackson.databind
- uid: com.fasterxml.jackson.databind.DeserializationContext.getContextualType*
  name: getContextualType
  nameWithType: DeserializationContext.getContextualType
  fullName: com.fasterxml.jackson.databind.DeserializationContext.getContextualType
  package: com.fasterxml.jackson.databind
- uid: com.fasterxml.jackson.databind.DeserializationContext.getFactory*
  name: getFactory
  nameWithType: DeserializationContext.getFactory
  fullName: com.fasterxml.jackson.databind.DeserializationContext.getFactory
  package: com.fasterxml.jackson.databind
- uid: com.fasterxml.jackson.databind.DeserializationFeature
  name: DeserializationFeature
  nameWithType: DeserializationFeature
  fullName: com.fasterxml.jackson.databind.DeserializationFeature
- uid: int
  spec.java:
  - uid: int
    name: int
    fullName: int
- uid: com.fasterxml.jackson.databind.DeserializationContext.getDeserializationFeatures*
  name: getDeserializationFeatures
  nameWithType: DeserializationContext.getDeserializationFeatures
  fullName: com.fasterxml.jackson.databind.DeserializationContext.getDeserializationFeatures
  package: com.fasterxml.jackson.databind
- uid: com.fasterxml.jackson.databind.DeserializationContext.hasDeserializationFeatures*
  name: hasDeserializationFeatures
  nameWithType: DeserializationContext.hasDeserializationFeatures
  fullName: com.fasterxml.jackson.databind.DeserializationContext.hasDeserializationFeatures
  package: com.fasterxml.jackson.databind
- uid: com.fasterxml.jackson.databind.DeserializationContext.hasSomeOfFeatures*
  name: hasSomeOfFeatures
  nameWithType: DeserializationContext.hasSomeOfFeatures
  fullName: com.fasterxml.jackson.databind.DeserializationContext.hasSomeOfFeatures
  package: com.fasterxml.jackson.databind
- uid: com.fasterxml.jackson.databind.DeserializationContext.getParser*
  name: getParser
  nameWithType: DeserializationContext.getParser
  fullName: com.fasterxml.jackson.databind.DeserializationContext.getParser
  package: com.fasterxml.jackson.databind
- uid: com.fasterxml.jackson.databind.JsonMappingException
  name: JsonMappingException
  nameWithType: JsonMappingException
  fullName: com.fasterxml.jackson.databind.JsonMappingException
- uid: com.fasterxml.jackson.databind.BeanProperty
  name: BeanProperty
  nameWithType: BeanProperty
  fullName: com.fasterxml.jackson.databind.BeanProperty
- uid: com.fasterxml.jackson.databind.DeserializationContext.findInjectableValue*
  name: findInjectableValue
  nameWithType: DeserializationContext.findInjectableValue
  fullName: com.fasterxml.jackson.databind.DeserializationContext.findInjectableValue
  package: com.fasterxml.jackson.databind
- uid: com.fasterxml.jackson.core.Base64Variant
  name: Base64Variant
  nameWithType: Base64Variant
  fullName: com.fasterxml.jackson.core.Base64Variant
- uid: com.fasterxml.jackson.databind.DeserializationContext.getBase64Variant*
  name: getBase64Variant
  nameWithType: DeserializationContext.getBase64Variant
  fullName: com.fasterxml.jackson.databind.DeserializationContext.getBase64Variant
  package: com.fasterxml.jackson.databind
- uid: com.fasterxml.jackson.databind.node.JsonNodeFactory
  name: JsonNodeFactory
  nameWithType: JsonNodeFactory
  fullName: com.fasterxml.jackson.databind.node.JsonNodeFactory
- uid: com.fasterxml.jackson.databind.DeserializationContext.getNodeFactory*
  name: getNodeFactory
  nameWithType: DeserializationContext.getNodeFactory
  fullName: com.fasterxml.jackson.databind.DeserializationContext.getNodeFactory
  package: com.fasterxml.jackson.databind
- uid: java.util.concurrent.atomic.AtomicReference<java.lang.Throwable>
  spec.java:
  - uid: java.util.concurrent.atomic.AtomicReference
    name: AtomicReference
    fullName: java.util.concurrent.atomic.AtomicReference
  - name: <
    fullName: <
  - uid: java.lang.Throwable
    name: Throwable
    fullName: java.lang.Throwable
  - name: '>'
    fullName: '>'
- uid: com.fasterxml.jackson.databind.DeserializationContext.hasValueDeserializerFor*
  name: hasValueDeserializerFor
  nameWithType: DeserializationContext.hasValueDeserializerFor
  fullName: com.fasterxml.jackson.databind.DeserializationContext.hasValueDeserializerFor
  package: com.fasterxml.jackson.databind
- uid: com.fasterxml.jackson.databind.JsonDeserializer<java.lang.Object>
  spec.java:
  - uid: com.fasterxml.jackson.databind.JsonDeserializer
    name: JsonDeserializer
    fullName: com.fasterxml.jackson.databind.JsonDeserializer
  - name: <
    fullName: <
  - uid: java.lang.Object
    name: Object
    fullName: java.lang.Object
  - name: '>'
    fullName: '>'
- uid: com.fasterxml.jackson.databind.DeserializationContext.findContextualValueDeserializer*
  name: findContextualValueDeserializer
  nameWithType: DeserializationContext.findContextualValueDeserializer
  fullName: com.fasterxml.jackson.databind.DeserializationContext.findContextualValueDeserializer
  package: com.fasterxml.jackson.databind
- uid: com.fasterxml.jackson.databind.DeserializationContext.findNonContextualValueDeserializer*
  name: findNonContextualValueDeserializer
  nameWithType: DeserializationContext.findNonContextualValueDeserializer
  fullName: com.fasterxml.jackson.databind.DeserializationContext.findNonContextualValueDeserializer
  package: com.fasterxml.jackson.databind
- uid: com.fasterxml.jackson.databind.DeserializationContext.findRootValueDeserializer*
  name: findRootValueDeserializer
  nameWithType: DeserializationContext.findRootValueDeserializer
  fullName: com.fasterxml.jackson.databind.DeserializationContext.findRootValueDeserializer
  package: com.fasterxml.jackson.databind
- uid: com.fasterxml.jackson.databind.KeyDeserializer
  name: KeyDeserializer
  nameWithType: KeyDeserializer
  fullName: com.fasterxml.jackson.databind.KeyDeserializer
- uid: com.fasterxml.jackson.databind.DeserializationContext.findKeyDeserializer*
  name: findKeyDeserializer
  nameWithType: DeserializationContext.findKeyDeserializer
  fullName: com.fasterxml.jackson.databind.DeserializationContext.findKeyDeserializer
  package: com.fasterxml.jackson.databind
- uid: com.fasterxml.jackson.annotation.ObjectIdGenerator<?>
  spec.java:
  - uid: com.fasterxml.jackson.annotation.ObjectIdGenerator
    name: ObjectIdGenerator
    fullName: com.fasterxml.jackson.annotation.ObjectIdGenerator
  - name: <
    fullName: <
  - uid: '?'
    name: '?'
    fullName: '?'
  - name: '>'
    fullName: '>'
- uid: com.fasterxml.jackson.annotation.ObjectIdResolver
  name: ObjectIdResolver
  nameWithType: ObjectIdResolver
  fullName: com.fasterxml.jackson.annotation.ObjectIdResolver
- uid: com.fasterxml.jackson.databind.deser.impl.ReadableObjectId
  name: ReadableObjectId
  nameWithType: ReadableObjectId
  fullName: com.fasterxml.jackson.databind.deser.impl.ReadableObjectId
- uid: com.fasterxml.jackson.databind.DeserializationContext.findObjectId*
  name: findObjectId
  nameWithType: DeserializationContext.findObjectId
  fullName: com.fasterxml.jackson.databind.DeserializationContext.findObjectId
  package: com.fasterxml.jackson.databind
- uid: com.fasterxml.jackson.databind.deser.UnresolvedForwardReference
  name: UnresolvedForwardReference
  nameWithType: UnresolvedForwardReference
  fullName: com.fasterxml.jackson.databind.deser.UnresolvedForwardReference
- uid: com.fasterxml.jackson.databind.DeserializationContext.checkUnresolvedObjectId*
  name: checkUnresolvedObjectId
  nameWithType: DeserializationContext.checkUnresolvedObjectId
  fullName: com.fasterxml.jackson.databind.DeserializationContext.checkUnresolvedObjectId
  package: com.fasterxml.jackson.databind
- uid: com.fasterxml.jackson.databind.DeserializationContext.constructType*
  name: constructType
  nameWithType: DeserializationContext.constructType
  fullName: com.fasterxml.jackson.databind.DeserializationContext.constructType
  package: com.fasterxml.jackson.databind
- uid: java.lang.ClassNotFoundException
  spec.java:
  - uid: java.lang.ClassNotFoundException
    name: ClassNotFoundException
    fullName: java.lang.ClassNotFoundException
- uid: java.lang.String
  spec.java:
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
- uid: com.fasterxml.jackson.databind.DeserializationContext.findClass*
  name: findClass
  nameWithType: DeserializationContext.findClass
  fullName: com.fasterxml.jackson.databind.DeserializationContext.findClass
  package: com.fasterxml.jackson.databind
- uid: com.fasterxml.jackson.databind.util.ObjectBuffer
  name: ObjectBuffer
  nameWithType: ObjectBuffer
  fullName: com.fasterxml.jackson.databind.util.ObjectBuffer
- uid: com.fasterxml.jackson.databind.DeserializationContext.leaseObjectBuffer*
  name: leaseObjectBuffer
  nameWithType: DeserializationContext.leaseObjectBuffer
  fullName: com.fasterxml.jackson.databind.DeserializationContext.leaseObjectBuffer
  package: com.fasterxml.jackson.databind
- uid: com.fasterxml.jackson.databind.DeserializationContext.returnObjectBuffer*
  name: returnObjectBuffer
  nameWithType: DeserializationContext.returnObjectBuffer
  fullName: com.fasterxml.jackson.databind.DeserializationContext.returnObjectBuffer
  package: com.fasterxml.jackson.databind
- uid: com.fasterxml.jackson.databind.util.ArrayBuilders
  name: ArrayBuilders
  nameWithType: ArrayBuilders
  fullName: com.fasterxml.jackson.databind.util.ArrayBuilders
- uid: com.fasterxml.jackson.databind.DeserializationContext.getArrayBuilders*
  name: getArrayBuilders
  nameWithType: DeserializationContext.getArrayBuilders
  fullName: com.fasterxml.jackson.databind.DeserializationContext.getArrayBuilders
  package: com.fasterxml.jackson.databind
- uid: com.fasterxml.jackson.databind.introspect.Annotated
  name: Annotated
  nameWithType: Annotated
  fullName: com.fasterxml.jackson.databind.introspect.Annotated
- uid: com.fasterxml.jackson.databind.DeserializationContext.deserializerInstance*
  name: deserializerInstance
  nameWithType: DeserializationContext.deserializerInstance
  fullName: com.fasterxml.jackson.databind.DeserializationContext.deserializerInstance
  package: com.fasterxml.jackson.databind
- uid: com.fasterxml.jackson.databind.DeserializationContext.keyDeserializerInstance*
  name: keyDeserializerInstance
  nameWithType: DeserializationContext.keyDeserializerInstance
  fullName: com.fasterxml.jackson.databind.DeserializationContext.keyDeserializerInstance
  package: com.fasterxml.jackson.databind
- uid: com.fasterxml.jackson.databind.JsonDeserializer<?>
  spec.java:
  - uid: com.fasterxml.jackson.databind.JsonDeserializer
    name: JsonDeserializer
    fullName: com.fasterxml.jackson.databind.JsonDeserializer
  - name: <
    fullName: <
  - uid: '?'
    name: '?'
    fullName: '?'
  - name: '>'
    fullName: '>'
- uid: com.fasterxml.jackson.databind.DeserializationContext.handlePrimaryContextualization*
  name: handlePrimaryContextualization
  nameWithType: DeserializationContext.handlePrimaryContextualization
  fullName: com.fasterxml.jackson.databind.DeserializationContext.handlePrimaryContextualization
  package: com.fasterxml.jackson.databind
- uid: com.fasterxml.jackson.databind.DeserializationContext.handleSecondaryContextualization*
  name: handleSecondaryContextualization
  nameWithType: DeserializationContext.handleSecondaryContextualization
  fullName: com.fasterxml.jackson.databind.DeserializationContext.handleSecondaryContextualization
  package: com.fasterxml.jackson.databind
- uid: java.util.Date
  spec.java:
  - uid: java.util.Date
    name: Date
    fullName: java.util.Date
- uid: com.fasterxml.jackson.databind.DeserializationContext.parseDate*
  name: parseDate
  nameWithType: DeserializationContext.parseDate
  fullName: com.fasterxml.jackson.databind.DeserializationContext.parseDate
  package: com.fasterxml.jackson.databind
- uid: java.util.Calendar
  spec.java:
  - uid: java.util.Calendar
    name: Calendar
    fullName: java.util.Calendar
- uid: com.fasterxml.jackson.databind.DeserializationContext.constructCalendar*
  name: constructCalendar
  nameWithType: DeserializationContext.constructCalendar
  fullName: com.fasterxml.jackson.databind.DeserializationContext.constructCalendar
  package: com.fasterxml.jackson.databind
- uid: java.io.IOException
  spec.java:
  - uid: java.io.IOException
    name: IOException
    fullName: java.io.IOException
- uid: java.lang.Class<T>
  spec.java:
  - uid: java.lang.Class
    name: Class
    fullName: java.lang.Class
  - name: <
    fullName: <
  - uid: T
    name: T
    fullName: T
  - name: '>'
    fullName: '>'
- uid: T
  spec.java:
  - uid: T
    name: T
    fullName: T
- uid: com.fasterxml.jackson.databind.DeserializationContext.readValue*
  name: <T>readValue
  nameWithType: DeserializationContext.<T>readValue
  fullName: com.fasterxml.jackson.databind.DeserializationContext.<T>readValue
  package: com.fasterxml.jackson.databind
- uid: com.fasterxml.jackson.databind.DeserializationContext.readPropertyValue*
  name: <T>readPropertyValue
  nameWithType: DeserializationContext.<T>readPropertyValue
  fullName: com.fasterxml.jackson.databind.DeserializationContext.<T>readPropertyValue
  package: com.fasterxml.jackson.databind
- uid: com.fasterxml.jackson.databind.JsonNode
  name: JsonNode
  nameWithType: JsonNode
  fullName: com.fasterxml.jackson.databind.JsonNode
- uid: com.fasterxml.jackson.databind.DeserializationContext.readTree*
  name: readTree
  nameWithType: DeserializationContext.readTree
  fullName: com.fasterxml.jackson.databind.DeserializationContext.readTree
  package: com.fasterxml.jackson.databind
- uid: com.fasterxml.jackson.databind.DeserializationContext.handleUnknownProperty*
  name: handleUnknownProperty
  nameWithType: DeserializationContext.handleUnknownProperty
  fullName: com.fasterxml.jackson.databind.DeserializationContext.handleUnknownProperty
  package: com.fasterxml.jackson.databind
- uid: java.lang.Object[]
  spec.java:
  - uid: java.lang.Object
    name: Object
    fullName: java.lang.Object
  - name: '[]'
    fullName: '[]'
- uid: com.fasterxml.jackson.databind.DeserializationContext.handleWeirdKey*
  name: handleWeirdKey
  nameWithType: DeserializationContext.handleWeirdKey
  fullName: com.fasterxml.jackson.databind.DeserializationContext.handleWeirdKey
  package: com.fasterxml.jackson.databind
- uid: com.fasterxml.jackson.databind.DeserializationContext.handleWeirdStringValue*
  name: handleWeirdStringValue
  nameWithType: DeserializationContext.handleWeirdStringValue
  fullName: com.fasterxml.jackson.databind.DeserializationContext.handleWeirdStringValue
  package: com.fasterxml.jackson.databind
- uid: java.lang.Number
  spec.java:
  - uid: java.lang.Number
    name: Number
    fullName: java.lang.Number
- uid: com.fasterxml.jackson.databind.DeserializationContext.handleWeirdNumberValue*
  name: handleWeirdNumberValue
  nameWithType: DeserializationContext.handleWeirdNumberValue
  fullName: com.fasterxml.jackson.databind.DeserializationContext.handleWeirdNumberValue
  package: com.fasterxml.jackson.databind
- uid: com.fasterxml.jackson.databind.DeserializationContext.handleWeirdNativeValue*
  name: handleWeirdNativeValue
  nameWithType: DeserializationContext.handleWeirdNativeValue
  fullName: com.fasterxml.jackson.databind.DeserializationContext.handleWeirdNativeValue
  package: com.fasterxml.jackson.databind
- uid: com.fasterxml.jackson.databind.deser.ValueInstantiator
  name: ValueInstantiator
  nameWithType: ValueInstantiator
  fullName: com.fasterxml.jackson.databind.deser.ValueInstantiator
- uid: com.fasterxml.jackson.databind.DeserializationContext.handleMissingInstantiator*
  name: handleMissingInstantiator
  nameWithType: DeserializationContext.handleMissingInstantiator
  fullName: com.fasterxml.jackson.databind.DeserializationContext.handleMissingInstantiator
  package: com.fasterxml.jackson.databind
- uid: java.lang.Throwable
  spec.java:
  - uid: java.lang.Throwable
    name: Throwable
    fullName: java.lang.Throwable
- uid: com.fasterxml.jackson.databind.DeserializationContext.handleInstantiationProblem*
  name: handleInstantiationProblem
  nameWithType: DeserializationContext.handleInstantiationProblem
  fullName: com.fasterxml.jackson.databind.DeserializationContext.handleInstantiationProblem
  package: com.fasterxml.jackson.databind
- uid: com.fasterxml.jackson.databind.DeserializationContext.handleUnexpectedToken*
  name: handleUnexpectedToken
  nameWithType: DeserializationContext.handleUnexpectedToken
  fullName: com.fasterxml.jackson.databind.DeserializationContext.handleUnexpectedToken
  package: com.fasterxml.jackson.databind
- uid: com.fasterxml.jackson.core.JsonToken
  name: JsonToken
  nameWithType: JsonToken
  fullName: com.fasterxml.jackson.core.JsonToken
- uid: com.fasterxml.jackson.databind.jsontype.TypeIdResolver
  name: TypeIdResolver
  nameWithType: TypeIdResolver
  fullName: com.fasterxml.jackson.databind.jsontype.TypeIdResolver
- uid: com.fasterxml.jackson.databind.DeserializationContext.handleUnknownTypeId*
  name: handleUnknownTypeId
  nameWithType: DeserializationContext.handleUnknownTypeId
  fullName: com.fasterxml.jackson.databind.DeserializationContext.handleUnknownTypeId
  package: com.fasterxml.jackson.databind
- uid: com.fasterxml.jackson.databind.DeserializationContext.handleMissingTypeId*
  name: handleMissingTypeId
  nameWithType: DeserializationContext.handleMissingTypeId
  fullName: com.fasterxml.jackson.databind.DeserializationContext.handleMissingTypeId
  package: com.fasterxml.jackson.databind
- uid: com.fasterxml.jackson.databind.DeserializationContext.handleBadMerge*
  name: handleBadMerge
  nameWithType: DeserializationContext.handleBadMerge
  fullName: com.fasterxml.jackson.databind.DeserializationContext.handleBadMerge
  package: com.fasterxml.jackson.databind
- uid: com.fasterxml.jackson.databind.DeserializationContext._isCompatible*
  name: _isCompatible
  nameWithType: DeserializationContext._isCompatible
  fullName: com.fasterxml.jackson.databind.DeserializationContext._isCompatible
  package: com.fasterxml.jackson.databind
- uid: com.fasterxml.jackson.databind.DeserializationContext.reportWrongTokenException*
  name: reportWrongTokenException
  nameWithType: DeserializationContext.reportWrongTokenException
  fullName: com.fasterxml.jackson.databind.DeserializationContext.reportWrongTokenException
  package: com.fasterxml.jackson.databind
- uid: com.fasterxml.jackson.databind.deser.impl.ObjectIdReader
  name: ObjectIdReader
  nameWithType: ObjectIdReader
  fullName: com.fasterxml.jackson.databind.deser.impl.ObjectIdReader
- uid: com.fasterxml.jackson.databind.DeserializationContext.reportUnresolvedObjectId*
  name: <T>reportUnresolvedObjectId
  nameWithType: DeserializationContext.<T>reportUnresolvedObjectId
  fullName: com.fasterxml.jackson.databind.DeserializationContext.<T>reportUnresolvedObjectId
  package: com.fasterxml.jackson.databind
- uid: com.fasterxml.jackson.databind.DeserializationContext.reportInputMismatch*
  name: <T>reportInputMismatch
  nameWithType: DeserializationContext.<T>reportInputMismatch
  fullName: com.fasterxml.jackson.databind.DeserializationContext.<T>reportInputMismatch
  package: com.fasterxml.jackson.databind
- uid: com.fasterxml.jackson.databind.DeserializationContext.reportPropertyInputMismatch*
  name: <T>reportPropertyInputMismatch
  nameWithType: DeserializationContext.<T>reportPropertyInputMismatch
  fullName: com.fasterxml.jackson.databind.DeserializationContext.<T>reportPropertyInputMismatch
  package: com.fasterxml.jackson.databind
- uid: com.fasterxml.jackson.databind.DeserializationContext.reportTrailingTokens*
  name: <T>reportTrailingTokens
  nameWithType: DeserializationContext.<T>reportTrailingTokens
  fullName: com.fasterxml.jackson.databind.DeserializationContext.<T>reportTrailingTokens
  package: com.fasterxml.jackson.databind
- uid: com.fasterxml.jackson.databind.DeserializationContext.reportUnknownProperty*
  name: reportUnknownProperty
  nameWithType: DeserializationContext.reportUnknownProperty
  fullName: com.fasterxml.jackson.databind.DeserializationContext.reportUnknownProperty
  package: com.fasterxml.jackson.databind
- uid: com.fasterxml.jackson.databind.DeserializationContext.reportMissingContent*
  name: reportMissingContent
  nameWithType: DeserializationContext.reportMissingContent
  fullName: com.fasterxml.jackson.databind.DeserializationContext.reportMissingContent
  package: com.fasterxml.jackson.databind
- uid: com.fasterxml.jackson.databind.BeanDescription
  name: BeanDescription
  nameWithType: BeanDescription
  fullName: com.fasterxml.jackson.databind.BeanDescription
- uid: com.fasterxml.jackson.databind.DeserializationContext.reportBadTypeDefinition*
  name: <T>reportBadTypeDefinition
  nameWithType: DeserializationContext.<T>reportBadTypeDefinition
  fullName: com.fasterxml.jackson.databind.DeserializationContext.<T>reportBadTypeDefinition
  package: com.fasterxml.jackson.databind
- uid: com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition
  name: BeanPropertyDefinition
  nameWithType: BeanPropertyDefinition
  fullName: com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition
- uid: com.fasterxml.jackson.databind.DeserializationContext.reportBadPropertyDefinition*
  name: <T>reportBadPropertyDefinition
  nameWithType: DeserializationContext.<T>reportBadPropertyDefinition
  fullName: com.fasterxml.jackson.databind.DeserializationContext.<T>reportBadPropertyDefinition
  package: com.fasterxml.jackson.databind
- uid: com.fasterxml.jackson.databind.DeserializationContext.reportBadDefinition*
  name: <T>reportBadDefinition
  nameWithType: DeserializationContext.<T>reportBadDefinition
  fullName: com.fasterxml.jackson.databind.DeserializationContext.<T>reportBadDefinition
  package: com.fasterxml.jackson.databind
- uid: com.fasterxml.jackson.databind.DeserializationContext.reportBadMerge*
  name: <T>reportBadMerge
  nameWithType: DeserializationContext.<T>reportBadMerge
  fullName: com.fasterxml.jackson.databind.DeserializationContext.<T>reportBadMerge
  package: com.fasterxml.jackson.databind
- uid: com.fasterxml.jackson.databind.DeserializationContext.wrongTokenException*
  name: wrongTokenException
  nameWithType: DeserializationContext.wrongTokenException
  fullName: com.fasterxml.jackson.databind.DeserializationContext.wrongTokenException
  package: com.fasterxml.jackson.databind
- uid: com.fasterxml.jackson.databind.DeserializationContext.weirdKeyException*
  name: weirdKeyException
  nameWithType: DeserializationContext.weirdKeyException
  fullName: com.fasterxml.jackson.databind.DeserializationContext.weirdKeyException
  package: com.fasterxml.jackson.databind
- uid: com.fasterxml.jackson.databind.DeserializationContext.weirdStringException*
  name: weirdStringException
  nameWithType: DeserializationContext.weirdStringException
  fullName: com.fasterxml.jackson.databind.DeserializationContext.weirdStringException
  package: com.fasterxml.jackson.databind
- uid: com.fasterxml.jackson.databind.DeserializationContext.weirdNumberException*
  name: weirdNumberException
  nameWithType: DeserializationContext.weirdNumberException
  fullName: com.fasterxml.jackson.databind.DeserializationContext.weirdNumberException
  package: com.fasterxml.jackson.databind
- uid: com.fasterxml.jackson.databind.DeserializationContext.weirdNativeValueException*
  name: weirdNativeValueException
  nameWithType: DeserializationContext.weirdNativeValueException
  fullName: com.fasterxml.jackson.databind.DeserializationContext.weirdNativeValueException
  package: com.fasterxml.jackson.databind
- uid: com.fasterxml.jackson.databind.DeserializationContext.instantiationException*
  name: instantiationException
  nameWithType: DeserializationContext.instantiationException
  fullName: com.fasterxml.jackson.databind.DeserializationContext.instantiationException
  package: com.fasterxml.jackson.databind
- uid: com.fasterxml.jackson.databind.DeserializationContext.invalidTypeIdException*
  name: invalidTypeIdException
  nameWithType: DeserializationContext.invalidTypeIdException
  fullName: com.fasterxml.jackson.databind.DeserializationContext.invalidTypeIdException
  package: com.fasterxml.jackson.databind
- uid: com.fasterxml.jackson.databind.DeserializationContext.missingTypeIdException*
  name: missingTypeIdException
  nameWithType: DeserializationContext.missingTypeIdException
  fullName: com.fasterxml.jackson.databind.DeserializationContext.missingTypeIdException
  package: com.fasterxml.jackson.databind
- uid: com.fasterxml.jackson.databind.DeserializationContext.unknownTypeException*
  name: unknownTypeException
  nameWithType: DeserializationContext.unknownTypeException
  fullName: com.fasterxml.jackson.databind.DeserializationContext.unknownTypeException
  package: com.fasterxml.jackson.databind
- uid: com.fasterxml.jackson.databind.DeserializationContext.endOfInputException*
  name: endOfInputException
  nameWithType: DeserializationContext.endOfInputException
  fullName: com.fasterxml.jackson.databind.DeserializationContext.endOfInputException
  package: com.fasterxml.jackson.databind
- uid: com.fasterxml.jackson.databind.DeserializationContext.reportMappingException*
  name: reportMappingException
  nameWithType: DeserializationContext.reportMappingException
  fullName: com.fasterxml.jackson.databind.DeserializationContext.reportMappingException
  package: com.fasterxml.jackson.databind
- uid: com.fasterxml.jackson.databind.DeserializationContext.mappingException*
  name: mappingException
  nameWithType: DeserializationContext.mappingException
  fullName: com.fasterxml.jackson.databind.DeserializationContext.mappingException
  package: com.fasterxml.jackson.databind
- uid: java.text.DateFormat
  spec.java:
  - uid: java.text.DateFormat
    name: DateFormat
    fullName: java.text.DateFormat
- uid: com.fasterxml.jackson.databind.DeserializationContext.getDateFormat*
  name: getDateFormat
  nameWithType: DeserializationContext.getDateFormat
  fullName: com.fasterxml.jackson.databind.DeserializationContext.getDateFormat
  package: com.fasterxml.jackson.databind
- uid: com.fasterxml.jackson.databind.cfg.ContextAttributes
  name: ContextAttributes
  nameWithType: ContextAttributes
  fullName: com.fasterxml.jackson.databind.cfg.ContextAttributes
- uid: com.fasterxml.jackson.databind.util.LinkedNode<com.fasterxml.jackson.databind.JavaType>
  spec.java:
  - uid: com.fasterxml.jackson.databind.util.LinkedNode
    name: LinkedNode
    fullName: com.fasterxml.jackson.databind.util.LinkedNode
  - name: <
    fullName: <
  - uid: com.fasterxml.jackson.databind.JavaType
    name: JavaType
    fullName: com.fasterxml.jackson.databind.JavaType
  - name: '>'
    fullName: '>'
- uid: com.fasterxml.jackson.databind.DatabindContext
  name: DatabindContext
  nameWithType: DatabindContext
  fullName: com.fasterxml.jackson.databind.DatabindContext
- uid: java.io.Serializable
  name: Serializable
  nameWithType: Serializable
  fullName: java.io.Serializable
- uid: com.fasterxml.jackson.databind.DatabindContext.invalidTypeIdException(com.fasterxml.jackson.databind.JavaType,java.lang.String,java.lang.String)
  name: DatabindContext.invalidTypeIdException(JavaType,String,String)
  nameWithType: DatabindContext.invalidTypeIdException(JavaType,String,String)
  fullName: com.fasterxml.jackson.databind.DatabindContext.invalidTypeIdException(com.fasterxml.jackson.databind.JavaType,java.lang.String,java.lang.String)
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: java.lang.Object.finalize()
  name: Object.finalize()
  nameWithType: Object.finalize()
  fullName: java.lang.Object.finalize()
- uid: java.lang.Object.clone()
  name: Object.clone()
  nameWithType: Object.clone()
  fullName: java.lang.Object.clone()
- uid: com.fasterxml.jackson.databind.DatabindContext.<T>_throwNotASubtype(com.fasterxml.jackson.databind.JavaType,java.lang.String)
  name: DatabindContext.<T>_throwNotASubtype(JavaType,String)
  nameWithType: DatabindContext.<T>_throwNotASubtype(JavaType,String)
  fullName: com.fasterxml.jackson.databind.DatabindContext.<T>_throwNotASubtype(com.fasterxml.jackson.databind.JavaType,java.lang.String)
- uid: com.fasterxml.jackson.databind.DatabindContext.<T>reportBadDefinition(com.fasterxml.jackson.databind.JavaType,java.lang.String)
  name: DatabindContext.<T>reportBadDefinition(JavaType,String)
  nameWithType: DatabindContext.<T>reportBadDefinition(JavaType,String)
  fullName: com.fasterxml.jackson.databind.DatabindContext.<T>reportBadDefinition(com.fasterxml.jackson.databind.JavaType,java.lang.String)
- uid: com.fasterxml.jackson.databind.DatabindContext._desc(java.lang.String)
  name: DatabindContext._desc(String)
  nameWithType: DatabindContext._desc(String)
  fullName: com.fasterxml.jackson.databind.DatabindContext._desc(java.lang.String)
- uid: com.fasterxml.jackson.databind.DatabindContext.objectIdResolverInstance(com.fasterxml.jackson.databind.introspect.Annotated,com.fasterxml.jackson.databind.introspect.ObjectIdInfo)
  name: DatabindContext.objectIdResolverInstance(Annotated,ObjectIdInfo)
  nameWithType: DatabindContext.objectIdResolverInstance(Annotated,ObjectIdInfo)
  fullName: com.fasterxml.jackson.databind.DatabindContext.objectIdResolverInstance(com.fasterxml.jackson.databind.introspect.Annotated,com.fasterxml.jackson.databind.introspect.ObjectIdInfo)
- uid: com.fasterxml.jackson.databind.DatabindContext.getTypeFactory()
  name: DatabindContext.getTypeFactory()
  nameWithType: DatabindContext.getTypeFactory()
  fullName: com.fasterxml.jackson.databind.DatabindContext.getTypeFactory()
- uid: com.fasterxml.jackson.databind.DatabindContext.<T>_throwSubtypeClassNotAllowed(com.fasterxml.jackson.databind.JavaType,java.lang.String,com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator)
  name: DatabindContext.<T>_throwSubtypeClassNotAllowed(JavaType,String,PolymorphicTypeValidator)
  nameWithType: DatabindContext.<T>_throwSubtypeClassNotAllowed(JavaType,String,PolymorphicTypeValidator)
  fullName: com.fasterxml.jackson.databind.DatabindContext.<T>_throwSubtypeClassNotAllowed(com.fasterxml.jackson.databind.JavaType,java.lang.String,com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator)
- uid: com.fasterxml.jackson.databind.DatabindContext._format(java.lang.String,java.lang.Object...)
  name: DatabindContext._format(String,Object)
  nameWithType: DatabindContext._format(String,Object)
  fullName: com.fasterxml.jackson.databind.DatabindContext._format(java.lang.String,java.lang.Object...)
- uid: com.fasterxml.jackson.databind.DatabindContext.constructType(java.lang.reflect.Type)
  name: DatabindContext.constructType(Type)
  nameWithType: DatabindContext.constructType(Type)
  fullName: com.fasterxml.jackson.databind.DatabindContext.constructType(java.lang.reflect.Type)
- uid: com.fasterxml.jackson.databind.DatabindContext.getTimeZone()
  name: DatabindContext.getTimeZone()
  nameWithType: DatabindContext.getTimeZone()
  fullName: com.fasterxml.jackson.databind.DatabindContext.getTimeZone()
- uid: com.fasterxml.jackson.databind.DatabindContext.resolveAndValidateSubType(com.fasterxml.jackson.databind.JavaType,java.lang.String,com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator)
  name: DatabindContext.resolveAndValidateSubType(JavaType,String,PolymorphicTypeValidator)
  nameWithType: DatabindContext.resolveAndValidateSubType(JavaType,String,PolymorphicTypeValidator)
  fullName: com.fasterxml.jackson.databind.DatabindContext.resolveAndValidateSubType(com.fasterxml.jackson.databind.JavaType,java.lang.String,com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator)
- uid: com.fasterxml.jackson.databind.DatabindContext._truncate(java.lang.String)
  name: DatabindContext._truncate(String)
  nameWithType: DatabindContext._truncate(String)
  fullName: com.fasterxml.jackson.databind.DatabindContext._truncate(java.lang.String)
- uid: com.fasterxml.jackson.databind.DatabindContext._colonConcat(java.lang.String,java.lang.String)
  name: DatabindContext._colonConcat(String,String)
  nameWithType: DatabindContext._colonConcat(String,String)
  fullName: com.fasterxml.jackson.databind.DatabindContext._colonConcat(java.lang.String,java.lang.String)
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: com.fasterxml.jackson.databind.DatabindContext.resolveSubType(com.fasterxml.jackson.databind.JavaType,java.lang.String)
  name: DatabindContext.resolveSubType(JavaType,String)
  nameWithType: DatabindContext.resolveSubType(JavaType,String)
  fullName: com.fasterxml.jackson.databind.DatabindContext.resolveSubType(com.fasterxml.jackson.databind.JavaType,java.lang.String)
- uid: java.lang.Object.hashCode()
  name: Object.hashCode()
  nameWithType: Object.hashCode()
  fullName: java.lang.Object.hashCode()
- uid: com.fasterxml.jackson.databind.DatabindContext.<T>reportBadDefinition(java.lang.Class<?>,java.lang.String)
  name: DatabindContext.<T>reportBadDefinition(Class<?>,String)
  nameWithType: DatabindContext.<T>reportBadDefinition(Class<?>,String)
  fullName: com.fasterxml.jackson.databind.DatabindContext.<T>reportBadDefinition(java.lang.Class<?>,java.lang.String)
- uid: com.fasterxml.jackson.databind.DatabindContext.objectIdGeneratorInstance(com.fasterxml.jackson.databind.introspect.Annotated,com.fasterxml.jackson.databind.introspect.ObjectIdInfo)
  name: DatabindContext.objectIdGeneratorInstance(Annotated,ObjectIdInfo)
  nameWithType: DatabindContext.objectIdGeneratorInstance(Annotated,ObjectIdInfo)
  fullName: com.fasterxml.jackson.databind.DatabindContext.objectIdGeneratorInstance(com.fasterxml.jackson.databind.introspect.Annotated,com.fasterxml.jackson.databind.introspect.ObjectIdInfo)
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: com.fasterxml.jackson.databind.DatabindContext.getAnnotationIntrospector()
  name: DatabindContext.getAnnotationIntrospector()
  nameWithType: DatabindContext.getAnnotationIntrospector()
  fullName: com.fasterxml.jackson.databind.DatabindContext.getAnnotationIntrospector()
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: com.fasterxml.jackson.databind.DatabindContext.getDefaultPropertyFormat(java.lang.Class<?>)
  name: DatabindContext.getDefaultPropertyFormat(Class<?>)
  nameWithType: DatabindContext.getDefaultPropertyFormat(Class<?>)
  fullName: com.fasterxml.jackson.databind.DatabindContext.getDefaultPropertyFormat(java.lang.Class<?>)
- uid: com.fasterxml.jackson.databind.DatabindContext.constructSpecializedType(com.fasterxml.jackson.databind.JavaType,java.lang.Class<?>)
  name: DatabindContext.constructSpecializedType(JavaType,Class<?>)
  nameWithType: DatabindContext.constructSpecializedType(JavaType,Class<?>)
  fullName: com.fasterxml.jackson.databind.DatabindContext.constructSpecializedType(com.fasterxml.jackson.databind.JavaType,java.lang.Class<?>)
- uid: com.fasterxml.jackson.databind.DatabindContext.getLocale()
  name: DatabindContext.getLocale()
  nameWithType: DatabindContext.getLocale()
  fullName: com.fasterxml.jackson.databind.DatabindContext.getLocale()
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: com.fasterxml.jackson.databind.DatabindContext._quotedString(java.lang.String)
  name: DatabindContext._quotedString(String)
  nameWithType: DatabindContext._quotedString(String)
  fullName: com.fasterxml.jackson.databind.DatabindContext._quotedString(java.lang.String)
- uid: java.lang.Object.equals(java.lang.Object)
  name: Object.equals(Object)
  nameWithType: Object.equals(Object)
  fullName: java.lang.Object.equals(java.lang.Object)
- uid: java.lang.Object.toString()
  name: Object.toString()
  nameWithType: Object.toString()
  fullName: java.lang.Object.toString()
- uid: com.fasterxml.jackson.databind.DatabindContext.isEnabled(com.fasterxml.jackson.databind.MapperFeature)
  name: DatabindContext.isEnabled(MapperFeature)
  nameWithType: DatabindContext.isEnabled(MapperFeature)
  fullName: com.fasterxml.jackson.databind.DatabindContext.isEnabled(com.fasterxml.jackson.databind.MapperFeature)
- uid: com.fasterxml.jackson.databind.DatabindContext.canOverrideAccessModifiers()
  name: DatabindContext.canOverrideAccessModifiers()
  nameWithType: DatabindContext.canOverrideAccessModifiers()
  fullName: com.fasterxml.jackson.databind.DatabindContext.canOverrideAccessModifiers()
- uid: com.fasterxml.jackson.databind.DatabindContext.setAttribute(java.lang.Object,java.lang.Object)
  name: DatabindContext.setAttribute(Object,Object)
  nameWithType: DatabindContext.setAttribute(Object,Object)
  fullName: com.fasterxml.jackson.databind.DatabindContext.setAttribute(java.lang.Object,java.lang.Object)
- uid: com.fasterxml.jackson.databind.DatabindContext.getActiveView()
  name: DatabindContext.getActiveView()
  nameWithType: DatabindContext.getActiveView()
  fullName: com.fasterxml.jackson.databind.DatabindContext.getActiveView()
- uid: com.fasterxml.jackson.databind.DatabindContext.converterInstance(com.fasterxml.jackson.databind.introspect.Annotated,java.lang.Object)
  name: DatabindContext.converterInstance(Annotated,Object)
  nameWithType: DatabindContext.converterInstance(Annotated,Object)
  fullName: com.fasterxml.jackson.databind.DatabindContext.converterInstance(com.fasterxml.jackson.databind.introspect.Annotated,java.lang.Object)
- uid: com.fasterxml.jackson.databind.DatabindContext.getAttribute(java.lang.Object)
  name: DatabindContext.getAttribute(Object)
  nameWithType: DatabindContext.getAttribute(Object)
  fullName: com.fasterxml.jackson.databind.DatabindContext.getAttribute(java.lang.Object)
- uid: com.fasterxml.jackson.databind.DatabindContext.<T>_throwSubtypeNameNotAllowed(com.fasterxml.jackson.databind.JavaType,java.lang.String,com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator)
  name: DatabindContext.<T>_throwSubtypeNameNotAllowed(JavaType,String,PolymorphicTypeValidator)
  nameWithType: DatabindContext.<T>_throwSubtypeNameNotAllowed(JavaType,String,PolymorphicTypeValidator)
  fullName: com.fasterxml.jackson.databind.DatabindContext.<T>_throwSubtypeNameNotAllowed(com.fasterxml.jackson.databind.JavaType,java.lang.String,com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator)
- uid: com.fasterxml.jackson.databind.DatabindContext.getConfig()
  name: DatabindContext.getConfig()
  nameWithType: DatabindContext.getConfig()
  fullName: com.fasterxml.jackson.databind.DatabindContext.getConfig()
- uid: java.lang.Class
  name: Class
  nameWithType: Class
  fullName: java.lang.Class
- uid: '?'
  name: '?'
  nameWithType: '?'
  fullName: '?'
- uid: java.util.concurrent.atomic.AtomicReference
  name: AtomicReference
  nameWithType: AtomicReference
  fullName: java.util.concurrent.atomic.AtomicReference
- uid: com.fasterxml.jackson.databind.JsonDeserializer
  name: JsonDeserializer
  nameWithType: JsonDeserializer
  fullName: com.fasterxml.jackson.databind.JsonDeserializer
- uid: com.fasterxml.jackson.annotation.ObjectIdGenerator
  name: ObjectIdGenerator
  nameWithType: ObjectIdGenerator
  fullName: com.fasterxml.jackson.annotation.ObjectIdGenerator
- uid: com.fasterxml.jackson.databind.util.LinkedNode
  name: LinkedNode
  nameWithType: LinkedNode
  fullName: com.fasterxml.jackson.databind.util.LinkedNode
- uid: T>_throwNotASubtype(com.fasterxml.jackson.databind.JavaType,java.lang.String)
  name: T>_throwNotASubtype(JavaType,String)
  nameWithType: T>_throwNotASubtype(JavaType,String)
  fullName: T>_throwNotASubtype(com.fasterxml.jackson.databind.JavaType,java.lang.String)
- uid: com.fasterxml.jackson.databind.DatabindContext.
  name: DatabindContext.
  nameWithType: DatabindContext.
  fullName: com.fasterxml.jackson.databind.DatabindContext.
- uid: T>reportBadDefinition(com.fasterxml.jackson.databind.JavaType,java.lang.String)
  name: T>reportBadDefinition(JavaType,String)
  nameWithType: T>reportBadDefinition(JavaType,String)
  fullName: T>reportBadDefinition(com.fasterxml.jackson.databind.JavaType,java.lang.String)
- uid: T>_throwSubtypeClassNotAllowed(com.fasterxml.jackson.databind.JavaType,java.lang.String,com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator)
  name: T>_throwSubtypeClassNotAllowed(JavaType,String,PolymorphicTypeValidator)
  nameWithType: T>_throwSubtypeClassNotAllowed(JavaType,String,PolymorphicTypeValidator)
  fullName: T>_throwSubtypeClassNotAllowed(com.fasterxml.jackson.databind.JavaType,java.lang.String,com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator)
- uid: ?>,java.lang.String)
  name: ?>,String)
  nameWithType: ?>,String)
  fullName: ?>,java.lang.String)
- uid: T>reportBadDefinition(java.lang.Class
  name: T>reportBadDefinition(Class
  nameWithType: T>reportBadDefinition(Class
  fullName: T>reportBadDefinition(java.lang.Class
- uid: ?>)
  name: ?>)
  nameWithType: ?>)
  fullName: ?>)
- uid: com.fasterxml.jackson.databind.DatabindContext.getDefaultPropertyFormat(java.lang.Class
  name: DatabindContext.getDefaultPropertyFormat(Class
  nameWithType: DatabindContext.getDefaultPropertyFormat(Class
  fullName: com.fasterxml.jackson.databind.DatabindContext.getDefaultPropertyFormat(java.lang.Class
- uid: com.fasterxml.jackson.databind.DatabindContext.constructSpecializedType(com.fasterxml.jackson.databind.JavaType,java.lang.Class
  name: DatabindContext.constructSpecializedType(JavaType,Class
  nameWithType: DatabindContext.constructSpecializedType(JavaType,Class
  fullName: com.fasterxml.jackson.databind.DatabindContext.constructSpecializedType(com.fasterxml.jackson.databind.JavaType,java.lang.Class
- uid: T>_throwSubtypeNameNotAllowed(com.fasterxml.jackson.databind.JavaType,java.lang.String,com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator)
  name: T>_throwSubtypeNameNotAllowed(JavaType,String,PolymorphicTypeValidator)
  nameWithType: T>_throwSubtypeNameNotAllowed(JavaType,String,PolymorphicTypeValidator)
  fullName: T>_throwSubtypeNameNotAllowed(com.fasterxml.jackson.databind.JavaType,java.lang.String,com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator)
