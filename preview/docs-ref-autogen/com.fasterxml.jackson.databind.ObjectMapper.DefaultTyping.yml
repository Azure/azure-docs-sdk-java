### YamlMime:JavaEnum
uid: "com.fasterxml.jackson.databind.ObjectMapper.DefaultTyping"
fullName: "com.fasterxml.jackson.databind.ObjectMapper.DefaultTyping"
name: "ObjectMapper.DefaultTyping"
nameWithType: "ObjectMapper.DefaultTyping"
summary: "Enumeration used with <xref uid=\"com.fasterxml.jackson.databind.ObjectMapper.activateDefaultTyping(com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ObjectMapper#activateDefaultTyping(PolymorphicTypeValidator)\"></xref> to specify what kind of types (classes) default typing should be used for. It will only be used if no explicit type information is found, but this enumeration further limits subset of those types.\n\nSince 2.4 there are special exceptions for JSON Tree model types (sub-types of <xref uid=\"com.fasterxml.jackson.core.TreeNode\" data-throw-if-not-resolved=\"false\" data-raw-source=\"TreeNode\"></xref>: default typing is never applied to them. Since 2.8(.4) additional checks are made to avoid attempts at default typing primitive-valued properties.\n\nNOTE: use of Default Typing can be a potential security risk if incoming content comes from untrusted sources, and it is recommended that this is either not done, or, if enabled, make sure to `activateDefaultTyping(...)` methods that take <xref uid=\"com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PolymorphicTypeValidator\"></xref> that limits applicability to known trusted types."
inheritances:
- "<xref href=\"java.lang.Object\" data-throw-if-not-resolved=\"False\" />"
- "<xref href=\"java.lang.Enum\" data-throw-if-not-resolved=\"False\" />"
inheritedMembers:
- "java.lang.Enum.<T>valueOf(java.lang.Class<T>,java.lang.String)"
- "java.lang.Enum.clone()"
- "java.lang.Enum.compareTo(E)"
- "java.lang.Enum.equals(java.lang.Object)"
- "java.lang.Enum.finalize()"
- "java.lang.Enum.getDeclaringClass()"
- "java.lang.Enum.hashCode()"
- "java.lang.Enum.name()"
- "java.lang.Enum.ordinal()"
- "java.lang.Enum.toString()"
- "java.lang.Object.getClass()"
- "java.lang.Object.notify()"
- "java.lang.Object.notifyAll()"
- "java.lang.Object.wait()"
- "java.lang.Object.wait(long)"
- "java.lang.Object.wait(long,int)"
syntax: "public enum ObjectMapper.DefaultTyping extends Enum<ObjectMapper.DefaultTyping>"
fields:
- uid: "com.fasterxml.jackson.databind.ObjectMapper.DefaultTyping.EVERYTHING"
  fullName: "com.fasterxml.jackson.databind.ObjectMapper.DefaultTyping.EVERYTHING"
  name: "EVERYTHING"
  nameWithType: "ObjectMapper.DefaultTyping.EVERYTHING"
  summary: "Value that means that default typing will be used for all types, with exception of small number of \"natural\" types (String, Boolean, Integer, Double) that can be correctly inferred from JSON, and primitives (which can not be polymorphic either). Typing is also enabled for all array types.\n\nNote that this is rarely the option you should use as it results in adding type information in many places where it should not be needed: make sure you understand its behavior. The only known use case for this setting is for serialization when passing instances of final class, and base type is not separately specified."
- uid: "com.fasterxml.jackson.databind.ObjectMapper.DefaultTyping.JAVA_LANG_OBJECT"
  fullName: "com.fasterxml.jackson.databind.ObjectMapper.DefaultTyping.JAVA_LANG_OBJECT"
  name: "JAVA_LANG_OBJECT"
  nameWithType: "ObjectMapper.DefaultTyping.JAVA_LANG_OBJECT"
  summary: "This value means that only properties that have <xref uid=\"java.lang.Object\" data-throw-if-not-resolved=\"false\" data-raw-source=\"java.lang.Object\"></xref> as declared type (including generic types without explicit type) will use default typing."
- uid: "com.fasterxml.jackson.databind.ObjectMapper.DefaultTyping.NON_CONCRETE_AND_ARRAYS"
  fullName: "com.fasterxml.jackson.databind.ObjectMapper.DefaultTyping.NON_CONCRETE_AND_ARRAYS"
  name: "NON_CONCRETE_AND_ARRAYS"
  nameWithType: "ObjectMapper.DefaultTyping.NON_CONCRETE_AND_ARRAYS"
  summary: "Value that means that default typing will be used for all types covered by <xref uid=\"com.fasterxml.jackson.databind.ObjectMapper.DefaultTyping.OBJECT_AND_NON_CONCRETE\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#OBJECT_AND_NON_CONCRETE\"></xref> plus all array types for them.\n\nSince 2.4, this does NOT apply to <xref uid=\"com.fasterxml.jackson.core.TreeNode\" data-throw-if-not-resolved=\"false\" data-raw-source=\"TreeNode\"></xref> and its subtypes."
- uid: "com.fasterxml.jackson.databind.ObjectMapper.DefaultTyping.NON_FINAL"
  fullName: "com.fasterxml.jackson.databind.ObjectMapper.DefaultTyping.NON_FINAL"
  name: "NON_FINAL"
  nameWithType: "ObjectMapper.DefaultTyping.NON_FINAL"
  summary: "Value that means that default typing will be used for all non-final types, with exception of small number of \"natural\" types (String, Boolean, Integer, Double), which can be correctly inferred from JSON; as well as for all arrays of non-final types.\n\nSince 2.4, this does NOT apply to <xref uid=\"com.fasterxml.jackson.core.TreeNode\" data-throw-if-not-resolved=\"false\" data-raw-source=\"TreeNode\"></xref> and its subtypes."
- uid: "com.fasterxml.jackson.databind.ObjectMapper.DefaultTyping.OBJECT_AND_NON_CONCRETE"
  fullName: "com.fasterxml.jackson.databind.ObjectMapper.DefaultTyping.OBJECT_AND_NON_CONCRETE"
  name: "OBJECT_AND_NON_CONCRETE"
  nameWithType: "ObjectMapper.DefaultTyping.OBJECT_AND_NON_CONCRETE"
  summary: "Value that means that default typing will be used for properties with declared type of <xref uid=\"java.lang.Object\" data-throw-if-not-resolved=\"false\" data-raw-source=\"java.lang.Object\"></xref> or an abstract type (abstract class or interface). Note that this does **not** include array types.\n\nSince 2.4, this does NOT apply to <xref uid=\"com.fasterxml.jackson.core.TreeNode\" data-throw-if-not-resolved=\"false\" data-raw-source=\"TreeNode\"></xref> and its subtypes."
methods:
- uid: "com.fasterxml.jackson.databind.ObjectMapper.DefaultTyping.valueOf(java.lang.String)"
  fullName: "com.fasterxml.jackson.databind.ObjectMapper.DefaultTyping.valueOf(String name)"
  name: "valueOf(String name)"
  nameWithType: "ObjectMapper.DefaultTyping.valueOf(String name)"
  parameters:
  - name: "name"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public static ObjectMapper.DefaultTyping valueOf(String name)"
  returns:
    type: "<xref href=\"com.fasterxml.jackson.databind.ObjectMapper.DefaultTyping?alt=com.fasterxml.jackson.databind.ObjectMapper.DefaultTyping&text=DefaultTyping\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.fasterxml.jackson.databind.ObjectMapper.DefaultTyping.values()"
  fullName: "com.fasterxml.jackson.databind.ObjectMapper.DefaultTyping.values()"
  name: "values()"
  nameWithType: "ObjectMapper.DefaultTyping.values()"
  syntax: "public static ObjectMapper.DefaultTyping[] values()"
  returns:
    type: "<xref href=\"com.fasterxml.jackson.databind.ObjectMapper.DefaultTyping?alt=com.fasterxml.jackson.databind.ObjectMapper.DefaultTyping&text=DefaultTyping\" data-throw-if-not-resolved=\"False\" />[]"
metadata: {}
package: "com.fasterxml.jackson.databind"
artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
