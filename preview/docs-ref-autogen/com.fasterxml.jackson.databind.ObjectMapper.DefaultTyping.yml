### YamlMime:ManagedReference
items:
- uid: com.fasterxml.jackson.databind.ObjectMapper.DefaultTyping
  id: DefaultTyping
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind
  children:
  - com.fasterxml.jackson.databind.ObjectMapper.DefaultTyping.EVERYTHING
  - com.fasterxml.jackson.databind.ObjectMapper.DefaultTyping.JAVA_LANG_OBJECT
  - com.fasterxml.jackson.databind.ObjectMapper.DefaultTyping.NON_CONCRETE_AND_ARRAYS
  - com.fasterxml.jackson.databind.ObjectMapper.DefaultTyping.NON_FINAL
  - com.fasterxml.jackson.databind.ObjectMapper.DefaultTyping.OBJECT_AND_NON_CONCRETE
  - com.fasterxml.jackson.databind.ObjectMapper.DefaultTyping.valueOf(java.lang.String)
  - com.fasterxml.jackson.databind.ObjectMapper.DefaultTyping.values()
  langs:
  - java
  name: ObjectMapper.DefaultTyping
  nameWithType: ObjectMapper.DefaultTyping
  fullName: com.fasterxml.jackson.databind.ObjectMapper.DefaultTyping
  type: Enum
  package: com.fasterxml.jackson.databind
  summary: >-
    Enumeration used with <xref uid="com.fasterxml.jackson.databind.ObjectMapper.activateDefaultTyping(com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator)" data-throw-if-not-resolved="false">ObjectMapper#activateDefaultTyping(PolymorphicTypeValidator)</xref> to specify what kind of types (classes) default typing should be used for. It will only be used if no explicit type information is found, but this enumeration further limits subset of those types.


    Since 2.4 there are special exceptions for JSON Tree model types (sub-types of <xref uid="com.fasterxml.jackson.core.TreeNode" data-throw-if-not-resolved="false">TreeNode</xref>: default typing is never applied to them. Since 2.8(.4) additional checks are made to avoid attempts at default typing primitive-valued properties.


    NOTE: use of Default Typing can be a potential security risk if incoming content comes from untrusted sources, and it is recommended that this is either not done, or, if enabled, make sure to `activateDefaultTyping(...)` methods that take <xref uid="com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator" data-throw-if-not-resolved="false">PolymorphicTypeValidator</xref> that limits applicability to known trusted types.
  syntax:
    content: public enum ObjectMapper.DefaultTyping extends Enum<ObjectMapper.DefaultTyping>
  inheritance:
  - java.lang.Object
  - java.lang.Enum
  inheritedMembers:
  - java.lang.Enum.<T>valueOf(java.lang.Class<T>,java.lang.String)
  - java.lang.Enum.clone()
  - java.lang.Enum.compareTo(E)
  - java.lang.Enum.equals(java.lang.Object)
  - java.lang.Enum.finalize()
  - java.lang.Enum.getDeclaringClass()
  - java.lang.Enum.hashCode()
  - java.lang.Enum.name()
  - java.lang.Enum.ordinal()
  - java.lang.Enum.toString()
  - java.lang.Object.getClass()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
- uid: com.fasterxml.jackson.databind.ObjectMapper.DefaultTyping.DefaultTyping()
  id: DefaultTyping()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ObjectMapper.DefaultTyping
  langs:
  - java
  name: DefaultTyping()
  nameWithType: ObjectMapper.DefaultTyping.DefaultTyping()
  fullName: com.fasterxml.jackson.databind.ObjectMapper.DefaultTyping.DefaultTyping()
  overload: com.fasterxml.jackson.databind.ObjectMapper.DefaultTyping.DefaultTyping*
  type: Constructor
  package: com.fasterxml.jackson.databind
  syntax:
    content: private DefaultTyping()
- uid: com.fasterxml.jackson.databind.ObjectMapper.DefaultTyping.EVERYTHING
  id: EVERYTHING
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ObjectMapper.DefaultTyping
  langs:
  - java
  name: EVERYTHING
  nameWithType: ObjectMapper.DefaultTyping.EVERYTHING
  fullName: com.fasterxml.jackson.databind.ObjectMapper.DefaultTyping.EVERYTHING
  type: Field
  package: com.fasterxml.jackson.databind
  summary: >-
    Value that means that default typing will be used for all types, with exception of small number of "natural" types (String, Boolean, Integer, Double) that can be correctly inferred from JSON, and primitives (which can not be polymorphic either). Typing is also enabled for all array types.


    Note that this is rarely the option you should use as it results in adding type information in many places where it should not be needed: make sure you understand its behavior. The only known use case for this setting is for serialization when passing instances of final class, and base type is not separately specified.
  syntax:
    content: public static final ObjectMapper.DefaultTyping EVERYTHING
    return:
      type: com.fasterxml.jackson.databind.ObjectMapper.DefaultTyping
- uid: com.fasterxml.jackson.databind.ObjectMapper.DefaultTyping.JAVA_LANG_OBJECT
  id: JAVA_LANG_OBJECT
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ObjectMapper.DefaultTyping
  langs:
  - java
  name: JAVA_LANG_OBJECT
  nameWithType: ObjectMapper.DefaultTyping.JAVA_LANG_OBJECT
  fullName: com.fasterxml.jackson.databind.ObjectMapper.DefaultTyping.JAVA_LANG_OBJECT
  type: Field
  package: com.fasterxml.jackson.databind
  summary: This value means that only properties that have <xref uid="java.lang.Object" data-throw-if-not-resolved="false">java.lang.Object</xref> as declared type (including generic types without explicit type) will use default typing.
  syntax:
    content: public static final ObjectMapper.DefaultTyping JAVA_LANG_OBJECT
    return:
      type: com.fasterxml.jackson.databind.ObjectMapper.DefaultTyping
- uid: com.fasterxml.jackson.databind.ObjectMapper.DefaultTyping.NON_CONCRETE_AND_ARRAYS
  id: NON_CONCRETE_AND_ARRAYS
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ObjectMapper.DefaultTyping
  langs:
  - java
  name: NON_CONCRETE_AND_ARRAYS
  nameWithType: ObjectMapper.DefaultTyping.NON_CONCRETE_AND_ARRAYS
  fullName: com.fasterxml.jackson.databind.ObjectMapper.DefaultTyping.NON_CONCRETE_AND_ARRAYS
  type: Field
  package: com.fasterxml.jackson.databind
  summary: >-
    Value that means that default typing will be used for all types covered by <xref uid="com.fasterxml.jackson.databind.ObjectMapper.DefaultTyping.OBJECT_AND_NON_CONCRETE" data-throw-if-not-resolved="false">#OBJECT_AND_NON_CONCRETE</xref> plus all array types for them.


    Since 2.4, this does NOT apply to <xref uid="com.fasterxml.jackson.core.TreeNode" data-throw-if-not-resolved="false">TreeNode</xref> and its subtypes.
  syntax:
    content: public static final ObjectMapper.DefaultTyping NON_CONCRETE_AND_ARRAYS
    return:
      type: com.fasterxml.jackson.databind.ObjectMapper.DefaultTyping
- uid: com.fasterxml.jackson.databind.ObjectMapper.DefaultTyping.NON_FINAL
  id: NON_FINAL
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ObjectMapper.DefaultTyping
  langs:
  - java
  name: NON_FINAL
  nameWithType: ObjectMapper.DefaultTyping.NON_FINAL
  fullName: com.fasterxml.jackson.databind.ObjectMapper.DefaultTyping.NON_FINAL
  type: Field
  package: com.fasterxml.jackson.databind
  summary: >-
    Value that means that default typing will be used for all non-final types, with exception of small number of "natural" types (String, Boolean, Integer, Double), which can be correctly inferred from JSON; as well as for all arrays of non-final types.


    Since 2.4, this does NOT apply to <xref uid="com.fasterxml.jackson.core.TreeNode" data-throw-if-not-resolved="false">TreeNode</xref> and its subtypes.
  syntax:
    content: public static final ObjectMapper.DefaultTyping NON_FINAL
    return:
      type: com.fasterxml.jackson.databind.ObjectMapper.DefaultTyping
- uid: com.fasterxml.jackson.databind.ObjectMapper.DefaultTyping.OBJECT_AND_NON_CONCRETE
  id: OBJECT_AND_NON_CONCRETE
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ObjectMapper.DefaultTyping
  langs:
  - java
  name: OBJECT_AND_NON_CONCRETE
  nameWithType: ObjectMapper.DefaultTyping.OBJECT_AND_NON_CONCRETE
  fullName: com.fasterxml.jackson.databind.ObjectMapper.DefaultTyping.OBJECT_AND_NON_CONCRETE
  type: Field
  package: com.fasterxml.jackson.databind
  summary: >-
    Value that means that default typing will be used for properties with declared type of <xref uid="java.lang.Object" data-throw-if-not-resolved="false">java.lang.Object</xref> or an abstract type (abstract class or interface). Note that this does **not** include array types.


    Since 2.4, this does NOT apply to <xref uid="com.fasterxml.jackson.core.TreeNode" data-throw-if-not-resolved="false">TreeNode</xref> and its subtypes.
  syntax:
    content: public static final ObjectMapper.DefaultTyping OBJECT_AND_NON_CONCRETE
    return:
      type: com.fasterxml.jackson.databind.ObjectMapper.DefaultTyping
- uid: com.fasterxml.jackson.databind.ObjectMapper.DefaultTyping.valueOf(java.lang.String)
  id: valueOf(java.lang.String)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ObjectMapper.DefaultTyping
  langs:
  - java
  name: valueOf(String name)
  nameWithType: ObjectMapper.DefaultTyping.valueOf(String name)
  fullName: com.fasterxml.jackson.databind.ObjectMapper.DefaultTyping.valueOf(String name)
  overload: com.fasterxml.jackson.databind.ObjectMapper.DefaultTyping.valueOf*
  type: Method
  package: com.fasterxml.jackson.databind
  syntax:
    content: public static ObjectMapper.DefaultTyping valueOf(String name)
    parameters:
    - id: name
      type: java.lang.String
    return:
      type: com.fasterxml.jackson.databind.ObjectMapper.DefaultTyping
- uid: com.fasterxml.jackson.databind.ObjectMapper.DefaultTyping.values()
  id: values()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ObjectMapper.DefaultTyping
  langs:
  - java
  name: values()
  nameWithType: ObjectMapper.DefaultTyping.values()
  fullName: com.fasterxml.jackson.databind.ObjectMapper.DefaultTyping.values()
  overload: com.fasterxml.jackson.databind.ObjectMapper.DefaultTyping.values*
  type: Method
  package: com.fasterxml.jackson.databind
  syntax:
    content: public static ObjectMapper.DefaultTyping[] values()
    return:
      type: com.fasterxml.jackson.databind.ObjectMapper.DefaultTyping[]
references:
- uid: com.fasterxml.jackson.databind.ObjectMapper.DefaultTyping.DefaultTyping*
  name: DefaultTyping
  nameWithType: ObjectMapper.DefaultTyping.DefaultTyping
  fullName: com.fasterxml.jackson.databind.ObjectMapper.DefaultTyping.DefaultTyping
  package: com.fasterxml.jackson.databind
- uid: com.fasterxml.jackson.databind.ObjectMapper.DefaultTyping[]
  spec.java:
  - uid: com.fasterxml.jackson.databind.ObjectMapper.DefaultTyping
    name: DefaultTyping
    fullName: com.fasterxml.jackson.databind.ObjectMapper.DefaultTyping
  - name: '[]'
    fullName: '[]'
- uid: com.fasterxml.jackson.databind.ObjectMapper.DefaultTyping.values*
  name: values
  nameWithType: ObjectMapper.DefaultTyping.values
  fullName: com.fasterxml.jackson.databind.ObjectMapper.DefaultTyping.values
  package: com.fasterxml.jackson.databind
- uid: java.lang.String
  spec.java:
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
- uid: com.fasterxml.jackson.databind.ObjectMapper.DefaultTyping.valueOf*
  name: valueOf
  nameWithType: ObjectMapper.DefaultTyping.valueOf
  fullName: com.fasterxml.jackson.databind.ObjectMapper.DefaultTyping.valueOf
  package: com.fasterxml.jackson.databind
- uid: java.lang.Enum<com.fasterxml.jackson.databind.ObjectMapper.DefaultTyping>
  name: Enum<ObjectMapper.DefaultTyping>
  nameWithType: Enum<ObjectMapper.DefaultTyping>
  fullName: java.lang.Enum<com.fasterxml.jackson.databind.ObjectMapper.DefaultTyping>
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: java.lang.Enum.toString()
  name: Enum.toString()
  nameWithType: Enum.toString()
  fullName: java.lang.Enum.toString()
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: java.lang.Enum.clone()
  name: Enum.clone()
  nameWithType: Enum.clone()
  fullName: java.lang.Enum.clone()
- uid: java.lang.Enum.finalize()
  name: Enum.finalize()
  nameWithType: Enum.finalize()
  fullName: java.lang.Enum.finalize()
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: java.lang.Enum.compareTo(E)
  name: Enum.compareTo(E)
  nameWithType: Enum.compareTo(E)
  fullName: java.lang.Enum.compareTo(E)
- uid: java.lang.Enum.name()
  name: Enum.name()
  nameWithType: Enum.name()
  fullName: java.lang.Enum.name()
- uid: java.lang.Enum.<T>valueOf(java.lang.Class<T>,java.lang.String)
  name: Enum.<T>valueOf(Class<T>,String)
  nameWithType: Enum.<T>valueOf(Class<T>,String)
  fullName: java.lang.Enum.<T>valueOf(java.lang.Class<T>,java.lang.String)
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: java.lang.Enum.getDeclaringClass()
  name: Enum.getDeclaringClass()
  nameWithType: Enum.getDeclaringClass()
  fullName: java.lang.Enum.getDeclaringClass()
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.lang.Enum.ordinal()
  name: Enum.ordinal()
  nameWithType: Enum.ordinal()
  fullName: java.lang.Enum.ordinal()
- uid: java.lang.Enum.hashCode()
  name: Enum.hashCode()
  nameWithType: Enum.hashCode()
  fullName: java.lang.Enum.hashCode()
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: java.lang.Enum.equals(java.lang.Object)
  name: Enum.equals(Object)
  nameWithType: Enum.equals(Object)
  fullName: java.lang.Enum.equals(java.lang.Object)
- uid: java.lang.Enum
  name: Enum
  nameWithType: Enum
  fullName: java.lang.Enum
- uid: java.lang.Enum.
  name: Enum.
  nameWithType: Enum.
  fullName: java.lang.Enum.
- uid: T>,java.lang.String)
  name: T>,String)
  nameWithType: T>,String)
  fullName: T>,java.lang.String)
- uid: T>valueOf(java.lang.Class
  name: T>valueOf(Class
  nameWithType: T>valueOf(Class
  fullName: T>valueOf(java.lang.Class
