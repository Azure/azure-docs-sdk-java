### YamlMime:ManagedReference
items:
- uid: org.apache.hc.client5.http.impl.auth.KerberosScheme
  id: KerberosScheme
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.apache.hc.client5.http.impl.auth
  children:
  - org.apache.hc.client5.http.impl.auth.KerberosScheme.KerberosScheme()
  - org.apache.hc.client5.http.impl.auth.KerberosScheme.KerberosScheme(org.apache.hc.client5.http.auth.KerberosConfig,org.apache.hc.client5.http.DnsResolver)
  - org.apache.hc.client5.http.impl.auth.KerberosScheme.generateToken(byte[],java.lang.String,java.lang.String)
  - org.apache.hc.client5.http.impl.auth.KerberosScheme.getName()
  - org.apache.hc.client5.http.impl.auth.KerberosScheme.isConnectionBased()
  langs:
  - java
  name: KerberosScheme
  nameWithType: KerberosScheme
  fullName: org.apache.hc.client5.http.impl.auth.KerberosScheme
  type: Class
  package: org.apache.hc.client5.http.impl.auth
  summary: >-
    Kerberos authentication scheme.


    Please note this class is considered experimental and may be discontinued or removed in the future.
  syntax:
    content: public class KerberosScheme extends GGSSchemeBase
  inheritance:
  - java.lang.Object
  - org.apache.hc.client5.http.impl.auth.GGSSchemeBase
  inheritedMembers:
  - java.lang.Object.clone()
  - java.lang.Object.equals(java.lang.Object)
  - java.lang.Object.finalize()
  - java.lang.Object.getClass()
  - java.lang.Object.hashCode()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
  - org.apache.hc.client5.http.impl.auth.GGSSchemeBase.createGSSContext(org.ietf.jgss.GSSManager,org.ietf.jgss.Oid,org.ietf.jgss.GSSName,org.ietf.jgss.GSSCredential)
  - org.apache.hc.client5.http.impl.auth.GGSSchemeBase.generateAuthResponse(org.apache.hc.core5.http.HttpHost,org.apache.hc.core5.http.HttpRequest,org.apache.hc.core5.http.protocol.HttpContext)
  - org.apache.hc.client5.http.impl.auth.GGSSchemeBase.generateGSSToken(byte[],org.ietf.jgss.Oid,java.lang.String,java.lang.String)
  - org.apache.hc.client5.http.impl.auth.GGSSchemeBase.generateToken(byte[],java.lang.String,java.lang.String)
  - org.apache.hc.client5.http.impl.auth.GGSSchemeBase.getManager()
  - org.apache.hc.client5.http.impl.auth.GGSSchemeBase.getPrincipal()
  - org.apache.hc.client5.http.impl.auth.GGSSchemeBase.getRealm()
  - org.apache.hc.client5.http.impl.auth.GGSSchemeBase.isChallengeComplete()
  - org.apache.hc.client5.http.impl.auth.GGSSchemeBase.isResponseReady(org.apache.hc.core5.http.HttpHost,org.apache.hc.client5.http.auth.CredentialsProvider,org.apache.hc.core5.http.protocol.HttpContext)
  - org.apache.hc.client5.http.impl.auth.GGSSchemeBase.processChallenge(org.apache.hc.client5.http.auth.AuthChallenge,org.apache.hc.core5.http.protocol.HttpContext)
  - org.apache.hc.client5.http.impl.auth.GGSSchemeBase.toString()
- uid: org.apache.hc.client5.http.impl.auth.KerberosScheme.KerberosScheme()
  id: KerberosScheme()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.apache.hc.client5.http.impl.auth.KerberosScheme
  langs:
  - java
  name: KerberosScheme()
  nameWithType: KerberosScheme.KerberosScheme()
  fullName: org.apache.hc.client5.http.impl.auth.KerberosScheme.KerberosScheme()
  overload: org.apache.hc.client5.http.impl.auth.KerberosScheme.KerberosScheme*
  type: Constructor
  package: org.apache.hc.client5.http.impl.auth
  syntax:
    content: public KerberosScheme()
- uid: org.apache.hc.client5.http.impl.auth.KerberosScheme.KerberosScheme(org.apache.hc.client5.http.auth.KerberosConfig,org.apache.hc.client5.http.DnsResolver)
  id: KerberosScheme(org.apache.hc.client5.http.auth.KerberosConfig,org.apache.hc.client5.http.DnsResolver)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.apache.hc.client5.http.impl.auth.KerberosScheme
  langs:
  - java
  name: KerberosScheme(KerberosConfig config, DnsResolver dnsResolver)
  nameWithType: KerberosScheme.KerberosScheme(KerberosConfig config, DnsResolver dnsResolver)
  fullName: org.apache.hc.client5.http.impl.auth.KerberosScheme.KerberosScheme(KerberosConfig config, DnsResolver dnsResolver)
  overload: org.apache.hc.client5.http.impl.auth.KerberosScheme.KerberosScheme*
  type: Constructor
  package: org.apache.hc.client5.http.impl.auth
  syntax:
    content: public KerberosScheme(KerberosConfig config, DnsResolver dnsResolver)
    parameters:
    - id: config
      type: org.apache.hc.client5.http.auth.KerberosConfig
    - id: dnsResolver
      type: org.apache.hc.client5.http.DnsResolver
- uid: org.apache.hc.client5.http.impl.auth.KerberosScheme.generateToken(byte[],java.lang.String,java.lang.String)
  id: generateToken(byte[],java.lang.String,java.lang.String)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.apache.hc.client5.http.impl.auth.KerberosScheme
  langs:
  - java
  name: generateToken(byte[] input, String serviceName, String authServer)
  nameWithType: KerberosScheme.generateToken(byte[] input, String serviceName, String authServer)
  fullName: org.apache.hc.client5.http.impl.auth.KerberosScheme.generateToken(byte[] input, String serviceName, String authServer)
  overload: org.apache.hc.client5.http.impl.auth.KerberosScheme.generateToken*
  type: Method
  package: org.apache.hc.client5.http.impl.auth
  syntax:
    content: protected byte[] generateToken(byte[] input, String serviceName, String authServer)
    parameters:
    - id: input
      type: byte[]
    - id: serviceName
      type: java.lang.String
    - id: authServer
      type: java.lang.String
    return:
      type: byte[]
  exceptions:
  - type: org.ietf.jgss.GSSException
- uid: org.apache.hc.client5.http.impl.auth.KerberosScheme.getName()
  id: getName()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.apache.hc.client5.http.impl.auth.KerberosScheme
  langs:
  - java
  name: getName()
  nameWithType: KerberosScheme.getName()
  fullName: org.apache.hc.client5.http.impl.auth.KerberosScheme.getName()
  overload: org.apache.hc.client5.http.impl.auth.KerberosScheme.getName*
  type: Method
  package: org.apache.hc.client5.http.impl.auth
  syntax:
    content: public String getName()
    return:
      type: java.lang.String
- uid: org.apache.hc.client5.http.impl.auth.KerberosScheme.isConnectionBased()
  id: isConnectionBased()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.apache.hc.client5.http.impl.auth.KerberosScheme
  langs:
  - java
  name: isConnectionBased()
  nameWithType: KerberosScheme.isConnectionBased()
  fullName: org.apache.hc.client5.http.impl.auth.KerberosScheme.isConnectionBased()
  overload: org.apache.hc.client5.http.impl.auth.KerberosScheme.isConnectionBased*
  type: Method
  package: org.apache.hc.client5.http.impl.auth
  syntax:
    content: public boolean isConnectionBased()
    return:
      type: boolean
references:
- uid: org.apache.hc.client5.http.auth.KerberosConfig
  name: KerberosConfig
  nameWithType: KerberosConfig
  fullName: org.apache.hc.client5.http.auth.KerberosConfig
- uid: org.apache.hc.client5.http.DnsResolver
  name: DnsResolver
  nameWithType: DnsResolver
  fullName: org.apache.hc.client5.http.DnsResolver
- uid: org.apache.hc.client5.http.impl.auth.KerberosScheme.KerberosScheme*
  name: KerberosScheme
  nameWithType: KerberosScheme.KerberosScheme
  fullName: org.apache.hc.client5.http.impl.auth.KerberosScheme.KerberosScheme
  package: org.apache.hc.client5.http.impl.auth
- uid: java.lang.String
  spec.java:
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
- uid: org.apache.hc.client5.http.impl.auth.KerberosScheme.getName*
  name: getName
  nameWithType: KerberosScheme.getName
  fullName: org.apache.hc.client5.http.impl.auth.KerberosScheme.getName
  package: org.apache.hc.client5.http.impl.auth
- uid: org.ietf.jgss.GSSException
  spec.java:
  - uid: org.ietf.jgss.GSSException
    name: GSSException
    fullName: org.ietf.jgss.GSSException
- uid: byte[]
  spec.java:
  - uid: byte
    name: byte
    fullName: byte
  - name: '[]'
    fullName: '[]'
- uid: org.apache.hc.client5.http.impl.auth.KerberosScheme.generateToken*
  name: generateToken
  nameWithType: KerberosScheme.generateToken
  fullName: org.apache.hc.client5.http.impl.auth.KerberosScheme.generateToken
  package: org.apache.hc.client5.http.impl.auth
- uid: boolean
  spec.java:
  - uid: boolean
    name: boolean
    fullName: boolean
- uid: org.apache.hc.client5.http.impl.auth.KerberosScheme.isConnectionBased*
  name: isConnectionBased
  nameWithType: KerberosScheme.isConnectionBased
  fullName: org.apache.hc.client5.http.impl.auth.KerberosScheme.isConnectionBased
  package: org.apache.hc.client5.http.impl.auth
- uid: org.apache.hc.client5.http.impl.auth.GGSSchemeBase
  name: GGSSchemeBase
  nameWithType: GGSSchemeBase
  fullName: org.apache.hc.client5.http.impl.auth.GGSSchemeBase
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: java.lang.Object.finalize()
  name: Object.finalize()
  nameWithType: Object.finalize()
  fullName: java.lang.Object.finalize()
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: java.lang.Object.clone()
  name: Object.clone()
  nameWithType: Object.clone()
  fullName: java.lang.Object.clone()
- uid: org.apache.hc.client5.http.impl.auth.GGSSchemeBase.getManager()
  name: GGSSchemeBase.getManager()
  nameWithType: GGSSchemeBase.getManager()
  fullName: org.apache.hc.client5.http.impl.auth.GGSSchemeBase.getManager()
- uid: java.lang.Object.equals(java.lang.Object)
  name: Object.equals(Object)
  nameWithType: Object.equals(Object)
  fullName: java.lang.Object.equals(java.lang.Object)
- uid: org.apache.hc.client5.http.impl.auth.GGSSchemeBase.createGSSContext(org.ietf.jgss.GSSManager,org.ietf.jgss.Oid,org.ietf.jgss.GSSName,org.ietf.jgss.GSSCredential)
  name: GGSSchemeBase.createGSSContext(GSSManager,Oid,GSSName,GSSCredential)
  nameWithType: GGSSchemeBase.createGSSContext(GSSManager,Oid,GSSName,GSSCredential)
  fullName: org.apache.hc.client5.http.impl.auth.GGSSchemeBase.createGSSContext(org.ietf.jgss.GSSManager,org.ietf.jgss.Oid,org.ietf.jgss.GSSName,org.ietf.jgss.GSSCredential)
- uid: org.apache.hc.client5.http.impl.auth.GGSSchemeBase.generateAuthResponse(org.apache.hc.core5.http.HttpHost,org.apache.hc.core5.http.HttpRequest,org.apache.hc.core5.http.protocol.HttpContext)
  name: GGSSchemeBase.generateAuthResponse(HttpHost,HttpRequest,HttpContext)
  nameWithType: GGSSchemeBase.generateAuthResponse(HttpHost,HttpRequest,HttpContext)
  fullName: org.apache.hc.client5.http.impl.auth.GGSSchemeBase.generateAuthResponse(org.apache.hc.core5.http.HttpHost,org.apache.hc.core5.http.HttpRequest,org.apache.hc.core5.http.protocol.HttpContext)
- uid: org.apache.hc.client5.http.impl.auth.GGSSchemeBase.toString()
  name: GGSSchemeBase.toString()
  nameWithType: GGSSchemeBase.toString()
  fullName: org.apache.hc.client5.http.impl.auth.GGSSchemeBase.toString()
- uid: org.apache.hc.client5.http.impl.auth.GGSSchemeBase.processChallenge(org.apache.hc.client5.http.auth.AuthChallenge,org.apache.hc.core5.http.protocol.HttpContext)
  name: GGSSchemeBase.processChallenge(AuthChallenge,HttpContext)
  nameWithType: GGSSchemeBase.processChallenge(AuthChallenge,HttpContext)
  fullName: org.apache.hc.client5.http.impl.auth.GGSSchemeBase.processChallenge(org.apache.hc.client5.http.auth.AuthChallenge,org.apache.hc.core5.http.protocol.HttpContext)
- uid: org.apache.hc.client5.http.impl.auth.GGSSchemeBase.getRealm()
  name: GGSSchemeBase.getRealm()
  nameWithType: GGSSchemeBase.getRealm()
  fullName: org.apache.hc.client5.http.impl.auth.GGSSchemeBase.getRealm()
- uid: org.apache.hc.client5.http.impl.auth.GGSSchemeBase.generateGSSToken(byte[],org.ietf.jgss.Oid,java.lang.String,java.lang.String)
  name: GGSSchemeBase.generateGSSToken(byte[],Oid,String,String)
  nameWithType: GGSSchemeBase.generateGSSToken(byte[],Oid,String,String)
  fullName: org.apache.hc.client5.http.impl.auth.GGSSchemeBase.generateGSSToken(byte[],org.ietf.jgss.Oid,java.lang.String,java.lang.String)
- uid: org.apache.hc.client5.http.impl.auth.GGSSchemeBase.getPrincipal()
  name: GGSSchemeBase.getPrincipal()
  nameWithType: GGSSchemeBase.getPrincipal()
  fullName: org.apache.hc.client5.http.impl.auth.GGSSchemeBase.getPrincipal()
- uid: org.apache.hc.client5.http.impl.auth.GGSSchemeBase.isChallengeComplete()
  name: GGSSchemeBase.isChallengeComplete()
  nameWithType: GGSSchemeBase.isChallengeComplete()
  fullName: org.apache.hc.client5.http.impl.auth.GGSSchemeBase.isChallengeComplete()
- uid: org.apache.hc.client5.http.impl.auth.GGSSchemeBase.isResponseReady(org.apache.hc.core5.http.HttpHost,org.apache.hc.client5.http.auth.CredentialsProvider,org.apache.hc.core5.http.protocol.HttpContext)
  name: GGSSchemeBase.isResponseReady(HttpHost,CredentialsProvider,HttpContext)
  nameWithType: GGSSchemeBase.isResponseReady(HttpHost,CredentialsProvider,HttpContext)
  fullName: org.apache.hc.client5.http.impl.auth.GGSSchemeBase.isResponseReady(org.apache.hc.core5.http.HttpHost,org.apache.hc.client5.http.auth.CredentialsProvider,org.apache.hc.core5.http.protocol.HttpContext)
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.lang.Object.hashCode()
  name: Object.hashCode()
  nameWithType: Object.hashCode()
  fullName: java.lang.Object.hashCode()
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: org.apache.hc.client5.http.impl.auth.GGSSchemeBase.generateToken(byte[],java.lang.String,java.lang.String)
  name: GGSSchemeBase.generateToken(byte[],String,String)
  nameWithType: GGSSchemeBase.generateToken(byte[],String,String)
  fullName: org.apache.hc.client5.http.impl.auth.GGSSchemeBase.generateToken(byte[],java.lang.String,java.lang.String)
