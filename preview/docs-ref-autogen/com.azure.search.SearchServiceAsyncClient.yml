### YamlMime:ManagedReference
items:
- uid: "com.azure.search.SearchServiceAsyncClient"
  id: "SearchServiceAsyncClient"
  parent: "com.azure.search"
  children:
  - "com.azure.search.SearchServiceAsyncClient.SearchServiceAsyncClient(java.lang.String,com.azure.search.SearchServiceVersion,com.azure.core.http.HttpPipeline)"
  - "com.azure.search.SearchServiceAsyncClient.analyzeText(java.lang.String,com.azure.search.models.AnalyzeRequest)"
  - "com.azure.search.SearchServiceAsyncClient.analyzeText(java.lang.String,com.azure.search.models.AnalyzeRequest,com.azure.search.models.RequestOptions)"
  - "com.azure.search.SearchServiceAsyncClient.analyzeText(java.lang.String,com.azure.search.models.AnalyzeRequest,com.azure.search.models.RequestOptions,com.azure.core.util.Context)"
  - "com.azure.search.SearchServiceAsyncClient.createDataSource(com.azure.search.models.DataSource)"
  - "com.azure.search.SearchServiceAsyncClient.createDataSourceWithResponse(com.azure.search.models.DataSource,com.azure.search.models.RequestOptions)"
  - "com.azure.search.SearchServiceAsyncClient.createDataSourceWithResponse(com.azure.search.models.DataSource,com.azure.search.models.RequestOptions,com.azure.core.util.Context)"
  - "com.azure.search.SearchServiceAsyncClient.createIndex(com.azure.search.models.Index)"
  - "com.azure.search.SearchServiceAsyncClient.createIndexWithResponse(com.azure.search.models.Index,com.azure.search.models.RequestOptions)"
  - "com.azure.search.SearchServiceAsyncClient.createIndexWithResponse(com.azure.search.models.Index,com.azure.search.models.RequestOptions,com.azure.core.util.Context)"
  - "com.azure.search.SearchServiceAsyncClient.createIndexer(com.azure.search.models.Indexer)"
  - "com.azure.search.SearchServiceAsyncClient.createIndexerWithResponse(com.azure.search.models.Indexer,com.azure.search.models.RequestOptions)"
  - "com.azure.search.SearchServiceAsyncClient.createIndexerWithResponse(com.azure.search.models.Indexer,com.azure.search.models.RequestOptions,com.azure.core.util.Context)"
  - "com.azure.search.SearchServiceAsyncClient.createOrUpdateDataSource(com.azure.search.models.DataSource)"
  - "com.azure.search.SearchServiceAsyncClient.createOrUpdateDataSourceWithResponse(com.azure.search.models.DataSource,com.azure.core.http.MatchConditions,com.azure.search.models.RequestOptions)"
  - "com.azure.search.SearchServiceAsyncClient.createOrUpdateDataSourceWithResponse(com.azure.search.models.DataSource,com.azure.core.http.MatchConditions,com.azure.search.models.RequestOptions,com.azure.core.util.Context)"
  - "com.azure.search.SearchServiceAsyncClient.createOrUpdateIndex(com.azure.search.models.Index)"
  - "com.azure.search.SearchServiceAsyncClient.createOrUpdateIndexWithResponse(com.azure.search.models.Index,boolean,com.azure.core.http.MatchConditions,com.azure.search.models.RequestOptions)"
  - "com.azure.search.SearchServiceAsyncClient.createOrUpdateIndexWithResponse(com.azure.search.models.Index,boolean,com.azure.core.http.MatchConditions,com.azure.search.models.RequestOptions,com.azure.core.util.Context)"
  - "com.azure.search.SearchServiceAsyncClient.createOrUpdateIndexer(com.azure.search.models.Indexer)"
  - "com.azure.search.SearchServiceAsyncClient.createOrUpdateIndexerWithResponse(com.azure.search.models.Indexer,com.azure.core.http.MatchConditions,com.azure.search.models.RequestOptions)"
  - "com.azure.search.SearchServiceAsyncClient.createOrUpdateIndexerWithResponse(com.azure.search.models.Indexer,com.azure.core.http.MatchConditions,com.azure.search.models.RequestOptions,com.azure.core.util.Context)"
  - "com.azure.search.SearchServiceAsyncClient.createOrUpdateSkillset(com.azure.search.models.Skillset)"
  - "com.azure.search.SearchServiceAsyncClient.createOrUpdateSkillsetWithResponse(com.azure.search.models.Skillset,com.azure.core.http.MatchConditions,com.azure.search.models.RequestOptions)"
  - "com.azure.search.SearchServiceAsyncClient.createOrUpdateSkillsetWithResponse(com.azure.search.models.Skillset,com.azure.core.http.MatchConditions,com.azure.search.models.RequestOptions,com.azure.core.util.Context)"
  - "com.azure.search.SearchServiceAsyncClient.createOrUpdateSynonymMap(com.azure.search.models.SynonymMap)"
  - "com.azure.search.SearchServiceAsyncClient.createOrUpdateSynonymMapWithResponse(com.azure.search.models.SynonymMap,com.azure.core.http.MatchConditions,com.azure.search.models.RequestOptions)"
  - "com.azure.search.SearchServiceAsyncClient.createOrUpdateSynonymMapWithResponse(com.azure.search.models.SynonymMap,com.azure.core.http.MatchConditions,com.azure.search.models.RequestOptions,com.azure.core.util.Context)"
  - "com.azure.search.SearchServiceAsyncClient.createSkillset(com.azure.search.models.Skillset)"
  - "com.azure.search.SearchServiceAsyncClient.createSkillsetWithResponse(com.azure.search.models.Skillset,com.azure.search.models.RequestOptions)"
  - "com.azure.search.SearchServiceAsyncClient.createSkillsetWithResponse(com.azure.search.models.Skillset,com.azure.search.models.RequestOptions,com.azure.core.util.Context)"
  - "com.azure.search.SearchServiceAsyncClient.createSynonymMap(com.azure.search.models.SynonymMap)"
  - "com.azure.search.SearchServiceAsyncClient.createSynonymMapWithResponse(com.azure.search.models.SynonymMap,com.azure.search.models.RequestOptions)"
  - "com.azure.search.SearchServiceAsyncClient.createSynonymMapWithResponse(com.azure.search.models.SynonymMap,com.azure.search.models.RequestOptions,com.azure.core.util.Context)"
  - "com.azure.search.SearchServiceAsyncClient.deleteDataSource(java.lang.String)"
  - "com.azure.search.SearchServiceAsyncClient.deleteDataSourceWithResponse(java.lang.String,com.azure.core.http.MatchConditions,com.azure.search.models.RequestOptions)"
  - "com.azure.search.SearchServiceAsyncClient.deleteDataSourceWithResponse(java.lang.String,com.azure.core.http.MatchConditions,com.azure.search.models.RequestOptions,com.azure.core.util.Context)"
  - "com.azure.search.SearchServiceAsyncClient.deleteIndex(java.lang.String)"
  - "com.azure.search.SearchServiceAsyncClient.deleteIndexWithResponse(java.lang.String,com.azure.core.http.MatchConditions,com.azure.search.models.RequestOptions)"
  - "com.azure.search.SearchServiceAsyncClient.deleteIndexWithResponse(java.lang.String,com.azure.core.http.MatchConditions,com.azure.search.models.RequestOptions,com.azure.core.util.Context)"
  - "com.azure.search.SearchServiceAsyncClient.deleteIndexer(java.lang.String)"
  - "com.azure.search.SearchServiceAsyncClient.deleteIndexerWithResponse(java.lang.String,com.azure.core.http.MatchConditions,com.azure.search.models.RequestOptions)"
  - "com.azure.search.SearchServiceAsyncClient.deleteIndexerWithResponse(java.lang.String,com.azure.core.http.MatchConditions,com.azure.search.models.RequestOptions,com.azure.core.util.Context)"
  - "com.azure.search.SearchServiceAsyncClient.deleteSkillset(java.lang.String)"
  - "com.azure.search.SearchServiceAsyncClient.deleteSkillsetWithResponse(java.lang.String,com.azure.core.http.MatchConditions,com.azure.search.models.RequestOptions)"
  - "com.azure.search.SearchServiceAsyncClient.deleteSkillsetWithResponse(java.lang.String,com.azure.core.http.MatchConditions,com.azure.search.models.RequestOptions,com.azure.core.util.Context)"
  - "com.azure.search.SearchServiceAsyncClient.deleteSynonymMap(java.lang.String)"
  - "com.azure.search.SearchServiceAsyncClient.deleteSynonymMapWithResponse(java.lang.String,com.azure.core.http.MatchConditions,com.azure.search.models.RequestOptions)"
  - "com.azure.search.SearchServiceAsyncClient.deleteSynonymMapWithResponse(java.lang.String,com.azure.core.http.MatchConditions,com.azure.search.models.RequestOptions,com.azure.core.util.Context)"
  - "com.azure.search.SearchServiceAsyncClient.getDataSource(java.lang.String)"
  - "com.azure.search.SearchServiceAsyncClient.getDataSourceWithResponse(java.lang.String,com.azure.search.models.RequestOptions)"
  - "com.azure.search.SearchServiceAsyncClient.getDataSourceWithResponse(java.lang.String,com.azure.search.models.RequestOptions,com.azure.core.util.Context)"
  - "com.azure.search.SearchServiceAsyncClient.getEndpoint()"
  - "com.azure.search.SearchServiceAsyncClient.getHttpPipeline()"
  - "com.azure.search.SearchServiceAsyncClient.getIndex(java.lang.String)"
  - "com.azure.search.SearchServiceAsyncClient.getIndexClient(java.lang.String)"
  - "com.azure.search.SearchServiceAsyncClient.getIndexStatistics(java.lang.String)"
  - "com.azure.search.SearchServiceAsyncClient.getIndexStatisticsWithResponse(java.lang.String,com.azure.search.models.RequestOptions)"
  - "com.azure.search.SearchServiceAsyncClient.getIndexStatisticsWithResponse(java.lang.String,com.azure.search.models.RequestOptions,com.azure.core.util.Context)"
  - "com.azure.search.SearchServiceAsyncClient.getIndexWithResponse(java.lang.String,com.azure.search.models.RequestOptions)"
  - "com.azure.search.SearchServiceAsyncClient.getIndexWithResponse(java.lang.String,com.azure.search.models.RequestOptions,com.azure.core.util.Context)"
  - "com.azure.search.SearchServiceAsyncClient.getIndexer(java.lang.String)"
  - "com.azure.search.SearchServiceAsyncClient.getIndexerStatus(java.lang.String)"
  - "com.azure.search.SearchServiceAsyncClient.getIndexerStatusWithResponse(java.lang.String,com.azure.search.models.RequestOptions)"
  - "com.azure.search.SearchServiceAsyncClient.getIndexerStatusWithResponse(java.lang.String,com.azure.search.models.RequestOptions,com.azure.core.util.Context)"
  - "com.azure.search.SearchServiceAsyncClient.getIndexerWithResponse(java.lang.String,com.azure.search.models.RequestOptions)"
  - "com.azure.search.SearchServiceAsyncClient.getIndexerWithResponse(java.lang.String,com.azure.search.models.RequestOptions,com.azure.core.util.Context)"
  - "com.azure.search.SearchServiceAsyncClient.getServiceStatistics()"
  - "com.azure.search.SearchServiceAsyncClient.getServiceStatisticsWithResponse(com.azure.search.models.RequestOptions)"
  - "com.azure.search.SearchServiceAsyncClient.getServiceStatisticsWithResponse(com.azure.search.models.RequestOptions,com.azure.core.util.Context)"
  - "com.azure.search.SearchServiceAsyncClient.getServiceVersion()"
  - "com.azure.search.SearchServiceAsyncClient.getSkillset(java.lang.String)"
  - "com.azure.search.SearchServiceAsyncClient.getSkillsetWithResponse(java.lang.String,com.azure.search.models.RequestOptions)"
  - "com.azure.search.SearchServiceAsyncClient.getSkillsetWithResponse(java.lang.String,com.azure.search.models.RequestOptions,com.azure.core.util.Context)"
  - "com.azure.search.SearchServiceAsyncClient.getSynonymMap(java.lang.String)"
  - "com.azure.search.SearchServiceAsyncClient.getSynonymMapWithResponse(java.lang.String,com.azure.search.models.RequestOptions)"
  - "com.azure.search.SearchServiceAsyncClient.getSynonymMapWithResponse(java.lang.String,com.azure.search.models.RequestOptions,com.azure.core.util.Context)"
  - "com.azure.search.SearchServiceAsyncClient.listDataSources()"
  - "com.azure.search.SearchServiceAsyncClient.listDataSources(java.lang.String,com.azure.search.models.RequestOptions)"
  - "com.azure.search.SearchServiceAsyncClient.listDataSources(java.lang.String,com.azure.search.models.RequestOptions,com.azure.core.util.Context)"
  - "com.azure.search.SearchServiceAsyncClient.listIndexers()"
  - "com.azure.search.SearchServiceAsyncClient.listIndexers(java.lang.String,com.azure.search.models.RequestOptions)"
  - "com.azure.search.SearchServiceAsyncClient.listIndexers(java.lang.String,com.azure.search.models.RequestOptions,com.azure.core.util.Context)"
  - "com.azure.search.SearchServiceAsyncClient.listIndexes()"
  - "com.azure.search.SearchServiceAsyncClient.listIndexes(java.lang.String,com.azure.search.models.RequestOptions)"
  - "com.azure.search.SearchServiceAsyncClient.listIndexes(java.lang.String,com.azure.search.models.RequestOptions,com.azure.core.util.Context)"
  - "com.azure.search.SearchServiceAsyncClient.listSkillsets()"
  - "com.azure.search.SearchServiceAsyncClient.listSkillsets(java.lang.String,com.azure.search.models.RequestOptions)"
  - "com.azure.search.SearchServiceAsyncClient.listSkillsets(java.lang.String,com.azure.search.models.RequestOptions,com.azure.core.util.Context)"
  - "com.azure.search.SearchServiceAsyncClient.listSynonymMaps()"
  - "com.azure.search.SearchServiceAsyncClient.listSynonymMaps(java.lang.String,com.azure.search.models.RequestOptions)"
  - "com.azure.search.SearchServiceAsyncClient.listSynonymMaps(java.lang.String,com.azure.search.models.RequestOptions,com.azure.core.util.Context)"
  - "com.azure.search.SearchServiceAsyncClient.resetIndexer(java.lang.String)"
  - "com.azure.search.SearchServiceAsyncClient.resetIndexerWithResponse(java.lang.String,com.azure.search.models.RequestOptions)"
  - "com.azure.search.SearchServiceAsyncClient.resetIndexerWithResponse(java.lang.String,com.azure.search.models.RequestOptions,com.azure.core.util.Context)"
  - "com.azure.search.SearchServiceAsyncClient.runIndexer(java.lang.String)"
  - "com.azure.search.SearchServiceAsyncClient.runIndexerWithResponse(java.lang.String,com.azure.search.models.RequestOptions)"
  - "com.azure.search.SearchServiceAsyncClient.runIndexerWithResponse(java.lang.String,com.azure.search.models.RequestOptions,com.azure.core.util.Context)"
  langs:
  - "java"
  name: "SearchServiceAsyncClient"
  nameWithType: "SearchServiceAsyncClient"
  fullName: "com.azure.search.SearchServiceAsyncClient"
  type: "Class"
  package: "com.azure.search"
  summary: "Asynchronous Client to manage and query indexes, as well as manage other resources, on a Cognitive Search service"
  syntax:
    content: "public final class SearchServiceAsyncClient"
  inheritance:
  - "java.lang.Object"
  inheritedMembers:
  - "java.lang.Object.clone()"
  - "java.lang.Object.equals(java.lang.Object)"
  - "java.lang.Object.finalize()"
  - "java.lang.Object.getClass()"
  - "java.lang.Object.hashCode()"
  - "java.lang.Object.notify()"
  - "java.lang.Object.notifyAll()"
  - "java.lang.Object.toString()"
  - "java.lang.Object.wait()"
  - "java.lang.Object.wait(long)"
  - "java.lang.Object.wait(long,int)"
- uid: "com.azure.search.SearchServiceAsyncClient.SearchServiceAsyncClient(java.lang.String,com.azure.search.SearchServiceVersion,com.azure.core.http.HttpPipeline)"
  id: "SearchServiceAsyncClient(java.lang.String,com.azure.search.SearchServiceVersion,com.azure.core.http.HttpPipeline)"
  parent: "com.azure.search.SearchServiceAsyncClient"
  langs:
  - "java"
  name: "SearchServiceAsyncClient(String endpoint, SearchServiceVersion serviceVersion, HttpPipeline httpPipeline)"
  nameWithType: "SearchServiceAsyncClient.SearchServiceAsyncClient(String endpoint, SearchServiceVersion serviceVersion, HttpPipeline httpPipeline)"
  fullName: "com.azure.search.SearchServiceAsyncClient.SearchServiceAsyncClient(String endpoint, SearchServiceVersion serviceVersion, HttpPipeline httpPipeline)"
  overload: "com.azure.search.SearchServiceAsyncClient.SearchServiceAsyncClient*"
  type: "Constructor"
  package: "com.azure.search"
  syntax:
    content: " SearchServiceAsyncClient(String endpoint, SearchServiceVersion serviceVersion, HttpPipeline httpPipeline)"
    parameters:
    - id: "endpoint"
      type: "java.lang.String"
    - id: "serviceVersion"
      type: "com.azure.search.SearchServiceVersion"
    - id: "httpPipeline"
      type: "com.azure.core.http.HttpPipeline"
- uid: "com.azure.search.SearchServiceAsyncClient.analyzeText(java.lang.String,com.azure.search.models.AnalyzeRequest)"
  id: "analyzeText(java.lang.String,com.azure.search.models.AnalyzeRequest)"
  parent: "com.azure.search.SearchServiceAsyncClient"
  langs:
  - "java"
  name: "analyzeText(String indexName, AnalyzeRequest analyzeRequest)"
  nameWithType: "SearchServiceAsyncClient.analyzeText(String indexName, AnalyzeRequest analyzeRequest)"
  fullName: "com.azure.search.SearchServiceAsyncClient.analyzeText(String indexName, AnalyzeRequest analyzeRequest)"
  overload: "com.azure.search.SearchServiceAsyncClient.analyzeText*"
  type: "Method"
  package: "com.azure.search"
  summary: "Shows how an analyzer breaks text into tokens."
  syntax:
    content: "public PagedFlux<TokenInfo> analyzeText(String indexName, AnalyzeRequest analyzeRequest)"
    parameters:
    - id: "indexName"
      type: "java.lang.String"
      description: "the name of the index for which to test an analyzer"
    - id: "analyzeRequest"
      type: "com.azure.search.models.AnalyzeRequest"
      description: "the text and analyzer or analysis components to test"
    return:
      type: "com.azure.core.http.rest.PagedFlux<com.azure.search.models.TokenInfo>"
      description: "analyze result."
- uid: "com.azure.search.SearchServiceAsyncClient.analyzeText(java.lang.String,com.azure.search.models.AnalyzeRequest,com.azure.search.models.RequestOptions)"
  id: "analyzeText(java.lang.String,com.azure.search.models.AnalyzeRequest,com.azure.search.models.RequestOptions)"
  parent: "com.azure.search.SearchServiceAsyncClient"
  langs:
  - "java"
  name: "analyzeText(String indexName, AnalyzeRequest analyzeRequest, RequestOptions requestOptions)"
  nameWithType: "SearchServiceAsyncClient.analyzeText(String indexName, AnalyzeRequest analyzeRequest, RequestOptions requestOptions)"
  fullName: "com.azure.search.SearchServiceAsyncClient.analyzeText(String indexName, AnalyzeRequest analyzeRequest, RequestOptions requestOptions)"
  overload: "com.azure.search.SearchServiceAsyncClient.analyzeText*"
  type: "Method"
  package: "com.azure.search"
  summary: "Shows how an analyzer breaks text into tokens."
  syntax:
    content: "public PagedFlux<TokenInfo> analyzeText(String indexName, AnalyzeRequest analyzeRequest, RequestOptions requestOptions)"
    parameters:
    - id: "indexName"
      type: "java.lang.String"
      description: "the name of the index for which to test an analyzer"
    - id: "analyzeRequest"
      type: "com.azure.search.models.AnalyzeRequest"
      description: "the text and analyzer or analysis components to test"
    - id: "requestOptions"
      type: "com.azure.search.models.RequestOptions"
      description: "additional parameters for the operation. Contains the tracking ID sent with the request to\n help with debugging"
    return:
      type: "com.azure.core.http.rest.PagedFlux<com.azure.search.models.TokenInfo>"
      description: "a response containing analyze result."
- uid: "com.azure.search.SearchServiceAsyncClient.analyzeText(java.lang.String,com.azure.search.models.AnalyzeRequest,com.azure.search.models.RequestOptions,com.azure.core.util.Context)"
  id: "analyzeText(java.lang.String,com.azure.search.models.AnalyzeRequest,com.azure.search.models.RequestOptions,com.azure.core.util.Context)"
  parent: "com.azure.search.SearchServiceAsyncClient"
  langs:
  - "java"
  name: "analyzeText(String indexName, AnalyzeRequest analyzeRequest, RequestOptions requestOptions, Context context)"
  nameWithType: "SearchServiceAsyncClient.analyzeText(String indexName, AnalyzeRequest analyzeRequest, RequestOptions requestOptions, Context context)"
  fullName: "com.azure.search.SearchServiceAsyncClient.analyzeText(String indexName, AnalyzeRequest analyzeRequest, RequestOptions requestOptions, Context context)"
  overload: "com.azure.search.SearchServiceAsyncClient.analyzeText*"
  type: "Method"
  package: "com.azure.search"
  syntax:
    content: " PagedFlux<TokenInfo> analyzeText(String indexName, AnalyzeRequest analyzeRequest, RequestOptions requestOptions, Context context)"
    parameters:
    - id: "indexName"
      type: "java.lang.String"
    - id: "analyzeRequest"
      type: "com.azure.search.models.AnalyzeRequest"
    - id: "requestOptions"
      type: "com.azure.search.models.RequestOptions"
    - id: "context"
      type: "com.azure.core.util.Context"
    return:
      type: "com.azure.core.http.rest.PagedFlux<com.azure.search.models.TokenInfo>"
- uid: "com.azure.search.SearchServiceAsyncClient.createDataSource(com.azure.search.models.DataSource)"
  id: "createDataSource(com.azure.search.models.DataSource)"
  parent: "com.azure.search.SearchServiceAsyncClient"
  langs:
  - "java"
  name: "createDataSource(DataSource dataSource)"
  nameWithType: "SearchServiceAsyncClient.createDataSource(DataSource dataSource)"
  fullName: "com.azure.search.SearchServiceAsyncClient.createDataSource(DataSource dataSource)"
  overload: "com.azure.search.SearchServiceAsyncClient.createDataSource*"
  type: "Method"
  package: "com.azure.search"
  summary: "Creates a new Azure Cognitive Search data source"
  syntax:
    content: "public Mono<DataSource> createDataSource(DataSource dataSource)"
    parameters:
    - id: "dataSource"
      type: "com.azure.search.models.DataSource"
      description: "The definition of the dataSource to create."
    return:
      type: "reactor.core.publisher.Mono<com.azure.search.models.DataSource>"
      description: "a Mono which performs the network request upon subscription."
- uid: "com.azure.search.SearchServiceAsyncClient.createDataSourceWithResponse(com.azure.search.models.DataSource,com.azure.search.models.RequestOptions)"
  id: "createDataSourceWithResponse(com.azure.search.models.DataSource,com.azure.search.models.RequestOptions)"
  parent: "com.azure.search.SearchServiceAsyncClient"
  langs:
  - "java"
  name: "createDataSourceWithResponse(DataSource dataSource, RequestOptions requestOptions)"
  nameWithType: "SearchServiceAsyncClient.createDataSourceWithResponse(DataSource dataSource, RequestOptions requestOptions)"
  fullName: "com.azure.search.SearchServiceAsyncClient.createDataSourceWithResponse(DataSource dataSource, RequestOptions requestOptions)"
  overload: "com.azure.search.SearchServiceAsyncClient.createDataSourceWithResponse*"
  type: "Method"
  package: "com.azure.search"
  summary: "Creates a new Azure Cognitive Search data source"
  syntax:
    content: "public Mono<Response<DataSource>> createDataSourceWithResponse(DataSource dataSource, RequestOptions requestOptions)"
    parameters:
    - id: "dataSource"
      type: "com.azure.search.models.DataSource"
      description: "The definition of the data source to create."
    - id: "requestOptions"
      type: "com.azure.search.models.RequestOptions"
      description: "Additional parameters for the operation. Contains the tracking ID sent with the request to\n help with debugging."
    return:
      type: "reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.search.models.DataSource>>"
      description: "a Mono which performs the network request upon subscription."
- uid: "com.azure.search.SearchServiceAsyncClient.createDataSourceWithResponse(com.azure.search.models.DataSource,com.azure.search.models.RequestOptions,com.azure.core.util.Context)"
  id: "createDataSourceWithResponse(com.azure.search.models.DataSource,com.azure.search.models.RequestOptions,com.azure.core.util.Context)"
  parent: "com.azure.search.SearchServiceAsyncClient"
  langs:
  - "java"
  name: "createDataSourceWithResponse(DataSource dataSource, RequestOptions requestOptions, Context context)"
  nameWithType: "SearchServiceAsyncClient.createDataSourceWithResponse(DataSource dataSource, RequestOptions requestOptions, Context context)"
  fullName: "com.azure.search.SearchServiceAsyncClient.createDataSourceWithResponse(DataSource dataSource, RequestOptions requestOptions, Context context)"
  overload: "com.azure.search.SearchServiceAsyncClient.createDataSourceWithResponse*"
  type: "Method"
  package: "com.azure.search"
  syntax:
    content: " Mono<Response<DataSource>> createDataSourceWithResponse(DataSource dataSource, RequestOptions requestOptions, Context context)"
    parameters:
    - id: "dataSource"
      type: "com.azure.search.models.DataSource"
    - id: "requestOptions"
      type: "com.azure.search.models.RequestOptions"
    - id: "context"
      type: "com.azure.core.util.Context"
    return:
      type: "reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.search.models.DataSource>>"
- uid: "com.azure.search.SearchServiceAsyncClient.createIndex(com.azure.search.models.Index)"
  id: "createIndex(com.azure.search.models.Index)"
  parent: "com.azure.search.SearchServiceAsyncClient"
  langs:
  - "java"
  name: "createIndex(Index index)"
  nameWithType: "SearchServiceAsyncClient.createIndex(Index index)"
  fullName: "com.azure.search.SearchServiceAsyncClient.createIndex(Index index)"
  overload: "com.azure.search.SearchServiceAsyncClient.createIndex*"
  type: "Method"
  package: "com.azure.search"
  summary: "Creates a new Azure Cognitive Search index."
  syntax:
    content: "public Mono<Index> createIndex(Index index)"
    parameters:
    - id: "index"
      type: "com.azure.search.models.Index"
      description: "definition of the index to create."
    return:
      type: "reactor.core.publisher.Mono<com.azure.search.models.Index>"
      description: "the created Index."
- uid: "com.azure.search.SearchServiceAsyncClient.createIndexWithResponse(com.azure.search.models.Index,com.azure.search.models.RequestOptions)"
  id: "createIndexWithResponse(com.azure.search.models.Index,com.azure.search.models.RequestOptions)"
  parent: "com.azure.search.SearchServiceAsyncClient"
  langs:
  - "java"
  name: "createIndexWithResponse(Index index, RequestOptions requestOptions)"
  nameWithType: "SearchServiceAsyncClient.createIndexWithResponse(Index index, RequestOptions requestOptions)"
  fullName: "com.azure.search.SearchServiceAsyncClient.createIndexWithResponse(Index index, RequestOptions requestOptions)"
  overload: "com.azure.search.SearchServiceAsyncClient.createIndexWithResponse*"
  type: "Method"
  package: "com.azure.search"
  summary: "Creates a new Azure Cognitive Search index."
  syntax:
    content: "public Mono<Response<Index>> createIndexWithResponse(Index index, RequestOptions requestOptions)"
    parameters:
    - id: "index"
      type: "com.azure.search.models.Index"
      description: "definition of the index to create"
    - id: "requestOptions"
      type: "com.azure.search.models.RequestOptions"
      description: "additional parameters for the operation. Contains the tracking ID sent with the request to\n help with debugging"
    return:
      type: "reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.search.models.Index>>"
      description: "a response containing the created Index."
- uid: "com.azure.search.SearchServiceAsyncClient.createIndexWithResponse(com.azure.search.models.Index,com.azure.search.models.RequestOptions,com.azure.core.util.Context)"
  id: "createIndexWithResponse(com.azure.search.models.Index,com.azure.search.models.RequestOptions,com.azure.core.util.Context)"
  parent: "com.azure.search.SearchServiceAsyncClient"
  langs:
  - "java"
  name: "createIndexWithResponse(Index index, RequestOptions requestOptions, Context context)"
  nameWithType: "SearchServiceAsyncClient.createIndexWithResponse(Index index, RequestOptions requestOptions, Context context)"
  fullName: "com.azure.search.SearchServiceAsyncClient.createIndexWithResponse(Index index, RequestOptions requestOptions, Context context)"
  overload: "com.azure.search.SearchServiceAsyncClient.createIndexWithResponse*"
  type: "Method"
  package: "com.azure.search"
  syntax:
    content: " Mono<Response<Index>> createIndexWithResponse(Index index, RequestOptions requestOptions, Context context)"
    parameters:
    - id: "index"
      type: "com.azure.search.models.Index"
    - id: "requestOptions"
      type: "com.azure.search.models.RequestOptions"
    - id: "context"
      type: "com.azure.core.util.Context"
    return:
      type: "reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.search.models.Index>>"
- uid: "com.azure.search.SearchServiceAsyncClient.createIndexer(com.azure.search.models.Indexer)"
  id: "createIndexer(com.azure.search.models.Indexer)"
  parent: "com.azure.search.SearchServiceAsyncClient"
  langs:
  - "java"
  name: "createIndexer(Indexer indexer)"
  nameWithType: "SearchServiceAsyncClient.createIndexer(Indexer indexer)"
  fullName: "com.azure.search.SearchServiceAsyncClient.createIndexer(Indexer indexer)"
  overload: "com.azure.search.SearchServiceAsyncClient.createIndexer*"
  type: "Method"
  package: "com.azure.search"
  summary: "Creates a new Azure Cognitive Search indexer."
  syntax:
    content: "public Mono<Indexer> createIndexer(Indexer indexer)"
    parameters:
    - id: "indexer"
      type: "com.azure.search.models.Indexer"
      description: "definition of the indexer to create."
    return:
      type: "reactor.core.publisher.Mono<com.azure.search.models.Indexer>"
      description: "the created Indexer."
- uid: "com.azure.search.SearchServiceAsyncClient.createIndexerWithResponse(com.azure.search.models.Indexer,com.azure.search.models.RequestOptions)"
  id: "createIndexerWithResponse(com.azure.search.models.Indexer,com.azure.search.models.RequestOptions)"
  parent: "com.azure.search.SearchServiceAsyncClient"
  langs:
  - "java"
  name: "createIndexerWithResponse(Indexer indexer, RequestOptions requestOptions)"
  nameWithType: "SearchServiceAsyncClient.createIndexerWithResponse(Indexer indexer, RequestOptions requestOptions)"
  fullName: "com.azure.search.SearchServiceAsyncClient.createIndexerWithResponse(Indexer indexer, RequestOptions requestOptions)"
  overload: "com.azure.search.SearchServiceAsyncClient.createIndexerWithResponse*"
  type: "Method"
  package: "com.azure.search"
  summary: "Creates a new Azure Cognitive Search indexer."
  syntax:
    content: "public Mono<Response<Indexer>> createIndexerWithResponse(Indexer indexer, RequestOptions requestOptions)"
    parameters:
    - id: "indexer"
      type: "com.azure.search.models.Indexer"
      description: "definition of the indexer to create"
    - id: "requestOptions"
      type: "com.azure.search.models.RequestOptions"
      description: "additional parameters for the operation. Contains the tracking ID sent with the request to\n help with debugging"
    return:
      type: "reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.search.models.Indexer>>"
      description: "a response containing the created Indexer."
- uid: "com.azure.search.SearchServiceAsyncClient.createIndexerWithResponse(com.azure.search.models.Indexer,com.azure.search.models.RequestOptions,com.azure.core.util.Context)"
  id: "createIndexerWithResponse(com.azure.search.models.Indexer,com.azure.search.models.RequestOptions,com.azure.core.util.Context)"
  parent: "com.azure.search.SearchServiceAsyncClient"
  langs:
  - "java"
  name: "createIndexerWithResponse(Indexer indexer, RequestOptions requestOptions, Context context)"
  nameWithType: "SearchServiceAsyncClient.createIndexerWithResponse(Indexer indexer, RequestOptions requestOptions, Context context)"
  fullName: "com.azure.search.SearchServiceAsyncClient.createIndexerWithResponse(Indexer indexer, RequestOptions requestOptions, Context context)"
  overload: "com.azure.search.SearchServiceAsyncClient.createIndexerWithResponse*"
  type: "Method"
  package: "com.azure.search"
  syntax:
    content: " Mono<Response<Indexer>> createIndexerWithResponse(Indexer indexer, RequestOptions requestOptions, Context context)"
    parameters:
    - id: "indexer"
      type: "com.azure.search.models.Indexer"
    - id: "requestOptions"
      type: "com.azure.search.models.RequestOptions"
    - id: "context"
      type: "com.azure.core.util.Context"
    return:
      type: "reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.search.models.Indexer>>"
- uid: "com.azure.search.SearchServiceAsyncClient.createOrUpdateDataSource(com.azure.search.models.DataSource)"
  id: "createOrUpdateDataSource(com.azure.search.models.DataSource)"
  parent: "com.azure.search.SearchServiceAsyncClient"
  langs:
  - "java"
  name: "createOrUpdateDataSource(DataSource dataSource)"
  nameWithType: "SearchServiceAsyncClient.createOrUpdateDataSource(DataSource dataSource)"
  fullName: "com.azure.search.SearchServiceAsyncClient.createOrUpdateDataSource(DataSource dataSource)"
  overload: "com.azure.search.SearchServiceAsyncClient.createOrUpdateDataSource*"
  type: "Method"
  package: "com.azure.search"
  summary: "Creates a new Azure Cognitive Search data source or updates a data source if it already exists."
  syntax:
    content: "public Mono<DataSource> createOrUpdateDataSource(DataSource dataSource)"
    parameters:
    - id: "dataSource"
      type: "com.azure.search.models.DataSource"
      description: "the definition of the data source to create or update"
    return:
      type: "reactor.core.publisher.Mono<com.azure.search.models.DataSource>"
      description: "the data source that was created or updated."
- uid: "com.azure.search.SearchServiceAsyncClient.createOrUpdateDataSourceWithResponse(com.azure.search.models.DataSource,com.azure.core.http.MatchConditions,com.azure.search.models.RequestOptions)"
  id: "createOrUpdateDataSourceWithResponse(com.azure.search.models.DataSource,com.azure.core.http.MatchConditions,com.azure.search.models.RequestOptions)"
  parent: "com.azure.search.SearchServiceAsyncClient"
  langs:
  - "java"
  name: "createOrUpdateDataSourceWithResponse(DataSource dataSource, MatchConditions accessCondition, RequestOptions requestOptions)"
  nameWithType: "SearchServiceAsyncClient.createOrUpdateDataSourceWithResponse(DataSource dataSource, MatchConditions accessCondition, RequestOptions requestOptions)"
  fullName: "com.azure.search.SearchServiceAsyncClient.createOrUpdateDataSourceWithResponse(DataSource dataSource, MatchConditions accessCondition, RequestOptions requestOptions)"
  overload: "com.azure.search.SearchServiceAsyncClient.createOrUpdateDataSourceWithResponse*"
  type: "Method"
  package: "com.azure.search"
  summary: "Creates a new Azure Cognitive Search data source or updates a data source if it already exists."
  syntax:
    content: "public Mono<Response<DataSource>> createOrUpdateDataSourceWithResponse(DataSource dataSource, MatchConditions accessCondition, RequestOptions requestOptions)"
    parameters:
    - id: "dataSource"
      type: "com.azure.search.models.DataSource"
      description: "The definition of the data source to create or update."
    - id: "accessCondition"
      type: "com.azure.core.http.MatchConditions"
      description: "the condition where the operation will be performed if the ETag on the server matches or\n doesn't match specified values"
    - id: "requestOptions"
      type: "com.azure.search.models.RequestOptions"
      description: "additional parameters for the operation. Contains the tracking ID sent with the request to\n help with debugging"
    return:
      type: "reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.search.models.DataSource>>"
      description: "a data source response."
- uid: "com.azure.search.SearchServiceAsyncClient.createOrUpdateDataSourceWithResponse(com.azure.search.models.DataSource,com.azure.core.http.MatchConditions,com.azure.search.models.RequestOptions,com.azure.core.util.Context)"
  id: "createOrUpdateDataSourceWithResponse(com.azure.search.models.DataSource,com.azure.core.http.MatchConditions,com.azure.search.models.RequestOptions,com.azure.core.util.Context)"
  parent: "com.azure.search.SearchServiceAsyncClient"
  langs:
  - "java"
  name: "createOrUpdateDataSourceWithResponse(DataSource dataSource, MatchConditions accessCondition, RequestOptions requestOptions, Context context)"
  nameWithType: "SearchServiceAsyncClient.createOrUpdateDataSourceWithResponse(DataSource dataSource, MatchConditions accessCondition, RequestOptions requestOptions, Context context)"
  fullName: "com.azure.search.SearchServiceAsyncClient.createOrUpdateDataSourceWithResponse(DataSource dataSource, MatchConditions accessCondition, RequestOptions requestOptions, Context context)"
  overload: "com.azure.search.SearchServiceAsyncClient.createOrUpdateDataSourceWithResponse*"
  type: "Method"
  package: "com.azure.search"
  syntax:
    content: " Mono<Response<DataSource>> createOrUpdateDataSourceWithResponse(DataSource dataSource, MatchConditions accessCondition, RequestOptions requestOptions, Context context)"
    parameters:
    - id: "dataSource"
      type: "com.azure.search.models.DataSource"
    - id: "accessCondition"
      type: "com.azure.core.http.MatchConditions"
    - id: "requestOptions"
      type: "com.azure.search.models.RequestOptions"
    - id: "context"
      type: "com.azure.core.util.Context"
    return:
      type: "reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.search.models.DataSource>>"
- uid: "com.azure.search.SearchServiceAsyncClient.createOrUpdateIndex(com.azure.search.models.Index)"
  id: "createOrUpdateIndex(com.azure.search.models.Index)"
  parent: "com.azure.search.SearchServiceAsyncClient"
  langs:
  - "java"
  name: "createOrUpdateIndex(Index index)"
  nameWithType: "SearchServiceAsyncClient.createOrUpdateIndex(Index index)"
  fullName: "com.azure.search.SearchServiceAsyncClient.createOrUpdateIndex(Index index)"
  overload: "com.azure.search.SearchServiceAsyncClient.createOrUpdateIndex*"
  type: "Method"
  package: "com.azure.search"
  summary: "Creates a new Azure Cognitive Search index or updates an index if it already exists."
  syntax:
    content: "public Mono<Index> createOrUpdateIndex(Index index)"
    parameters:
    - id: "index"
      type: "com.azure.search.models.Index"
      description: "the definition of the index to create or update"
    return:
      type: "reactor.core.publisher.Mono<com.azure.search.models.Index>"
      description: "the index that was created or updated."
- uid: "com.azure.search.SearchServiceAsyncClient.createOrUpdateIndexWithResponse(com.azure.search.models.Index,boolean,com.azure.core.http.MatchConditions,com.azure.search.models.RequestOptions)"
  id: "createOrUpdateIndexWithResponse(com.azure.search.models.Index,boolean,com.azure.core.http.MatchConditions,com.azure.search.models.RequestOptions)"
  parent: "com.azure.search.SearchServiceAsyncClient"
  langs:
  - "java"
  name: "createOrUpdateIndexWithResponse(Index index, boolean allowIndexDowntime, MatchConditions accessCondition, RequestOptions requestOptions)"
  nameWithType: "SearchServiceAsyncClient.createOrUpdateIndexWithResponse(Index index, boolean allowIndexDowntime, MatchConditions accessCondition, RequestOptions requestOptions)"
  fullName: "com.azure.search.SearchServiceAsyncClient.createOrUpdateIndexWithResponse(Index index, boolean allowIndexDowntime, MatchConditions accessCondition, RequestOptions requestOptions)"
  overload: "com.azure.search.SearchServiceAsyncClient.createOrUpdateIndexWithResponse*"
  type: "Method"
  package: "com.azure.search"
  summary: "Creates a new Azure Cognitive Search index or updates an index if it already exists."
  syntax:
    content: "public Mono<Response<Index>> createOrUpdateIndexWithResponse(Index index, boolean allowIndexDowntime, MatchConditions accessCondition, RequestOptions requestOptions)"
    parameters:
    - id: "index"
      type: "com.azure.search.models.Index"
      description: "the definition of the index to create or update"
    - id: "allowIndexDowntime"
      type: "boolean"
      description: "allows new analyzers, tokenizers, token filters, or char filters to be added to an\n index by taking the index offline for at least a few seconds. This temporarily causes indexing and query requests\n to fail. Performance and write availability of the index can be impaired for several minutes after the index is\n updated, or longer for very large indexes"
    - id: "accessCondition"
      type: "com.azure.core.http.MatchConditions"
      description: "the condition where the operation will be performed if the ETag on the server matches or\n doesn't match specified values"
    - id: "requestOptions"
      type: "com.azure.search.models.RequestOptions"
      description: "additional parameters for the operation. Contains the tracking ID sent with the request to\n help with debugging"
    return:
      type: "reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.search.models.Index>>"
      description: "a response containing the index that was created or updated"
- uid: "com.azure.search.SearchServiceAsyncClient.createOrUpdateIndexWithResponse(com.azure.search.models.Index,boolean,com.azure.core.http.MatchConditions,com.azure.search.models.RequestOptions,com.azure.core.util.Context)"
  id: "createOrUpdateIndexWithResponse(com.azure.search.models.Index,boolean,com.azure.core.http.MatchConditions,com.azure.search.models.RequestOptions,com.azure.core.util.Context)"
  parent: "com.azure.search.SearchServiceAsyncClient"
  langs:
  - "java"
  name: "createOrUpdateIndexWithResponse(Index index, boolean allowIndexDowntime, MatchConditions accessCondition, RequestOptions requestOptions, Context context)"
  nameWithType: "SearchServiceAsyncClient.createOrUpdateIndexWithResponse(Index index, boolean allowIndexDowntime, MatchConditions accessCondition, RequestOptions requestOptions, Context context)"
  fullName: "com.azure.search.SearchServiceAsyncClient.createOrUpdateIndexWithResponse(Index index, boolean allowIndexDowntime, MatchConditions accessCondition, RequestOptions requestOptions, Context context)"
  overload: "com.azure.search.SearchServiceAsyncClient.createOrUpdateIndexWithResponse*"
  type: "Method"
  package: "com.azure.search"
  syntax:
    content: " Mono<Response<Index>> createOrUpdateIndexWithResponse(Index index, boolean allowIndexDowntime, MatchConditions accessCondition, RequestOptions requestOptions, Context context)"
    parameters:
    - id: "index"
      type: "com.azure.search.models.Index"
    - id: "allowIndexDowntime"
      type: "boolean"
    - id: "accessCondition"
      type: "com.azure.core.http.MatchConditions"
    - id: "requestOptions"
      type: "com.azure.search.models.RequestOptions"
    - id: "context"
      type: "com.azure.core.util.Context"
    return:
      type: "reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.search.models.Index>>"
- uid: "com.azure.search.SearchServiceAsyncClient.createOrUpdateIndexer(com.azure.search.models.Indexer)"
  id: "createOrUpdateIndexer(com.azure.search.models.Indexer)"
  parent: "com.azure.search.SearchServiceAsyncClient"
  langs:
  - "java"
  name: "createOrUpdateIndexer(Indexer indexer)"
  nameWithType: "SearchServiceAsyncClient.createOrUpdateIndexer(Indexer indexer)"
  fullName: "com.azure.search.SearchServiceAsyncClient.createOrUpdateIndexer(Indexer indexer)"
  overload: "com.azure.search.SearchServiceAsyncClient.createOrUpdateIndexer*"
  type: "Method"
  package: "com.azure.search"
  summary: "Creates a new Azure Cognitive Search indexer or updates an indexer if it already exists."
  syntax:
    content: "public Mono<Indexer> createOrUpdateIndexer(Indexer indexer)"
    parameters:
    - id: "indexer"
      type: "com.azure.search.models.Indexer"
      description: "The definition of the indexer to create or update."
    return:
      type: "reactor.core.publisher.Mono<com.azure.search.models.Indexer>"
      description: "a response containing the created Indexer."
- uid: "com.azure.search.SearchServiceAsyncClient.createOrUpdateIndexerWithResponse(com.azure.search.models.Indexer,com.azure.core.http.MatchConditions,com.azure.search.models.RequestOptions)"
  id: "createOrUpdateIndexerWithResponse(com.azure.search.models.Indexer,com.azure.core.http.MatchConditions,com.azure.search.models.RequestOptions)"
  parent: "com.azure.search.SearchServiceAsyncClient"
  langs:
  - "java"
  name: "createOrUpdateIndexerWithResponse(Indexer indexer, MatchConditions accessCondition, RequestOptions requestOptions)"
  nameWithType: "SearchServiceAsyncClient.createOrUpdateIndexerWithResponse(Indexer indexer, MatchConditions accessCondition, RequestOptions requestOptions)"
  fullName: "com.azure.search.SearchServiceAsyncClient.createOrUpdateIndexerWithResponse(Indexer indexer, MatchConditions accessCondition, RequestOptions requestOptions)"
  overload: "com.azure.search.SearchServiceAsyncClient.createOrUpdateIndexerWithResponse*"
  type: "Method"
  package: "com.azure.search"
  summary: "Creates a new Azure Cognitive Search indexer or updates an indexer if it already exists."
  syntax:
    content: "public Mono<Response<Indexer>> createOrUpdateIndexerWithResponse(Indexer indexer, MatchConditions accessCondition, RequestOptions requestOptions)"
    parameters:
    - id: "indexer"
      type: "com.azure.search.models.Indexer"
      description: "the definition of the indexer to create or update"
    - id: "accessCondition"
      type: "com.azure.core.http.MatchConditions"
      description: "the condition where the operation will be performed if the ETag on the server matches or\n doesn't match specified values"
    - id: "requestOptions"
      type: "com.azure.search.models.RequestOptions"
      description: "additional parameters for the operation Contains the tracking ID sent with the request to\n help with debugging"
    return:
      type: "reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.search.models.Indexer>>"
      description: "a response containing the created Indexer."
- uid: "com.azure.search.SearchServiceAsyncClient.createOrUpdateIndexerWithResponse(com.azure.search.models.Indexer,com.azure.core.http.MatchConditions,com.azure.search.models.RequestOptions,com.azure.core.util.Context)"
  id: "createOrUpdateIndexerWithResponse(com.azure.search.models.Indexer,com.azure.core.http.MatchConditions,com.azure.search.models.RequestOptions,com.azure.core.util.Context)"
  parent: "com.azure.search.SearchServiceAsyncClient"
  langs:
  - "java"
  name: "createOrUpdateIndexerWithResponse(Indexer indexer, MatchConditions accessCondition, RequestOptions requestOptions, Context context)"
  nameWithType: "SearchServiceAsyncClient.createOrUpdateIndexerWithResponse(Indexer indexer, MatchConditions accessCondition, RequestOptions requestOptions, Context context)"
  fullName: "com.azure.search.SearchServiceAsyncClient.createOrUpdateIndexerWithResponse(Indexer indexer, MatchConditions accessCondition, RequestOptions requestOptions, Context context)"
  overload: "com.azure.search.SearchServiceAsyncClient.createOrUpdateIndexerWithResponse*"
  type: "Method"
  package: "com.azure.search"
  syntax:
    content: " Mono<Response<Indexer>> createOrUpdateIndexerWithResponse(Indexer indexer, MatchConditions accessCondition, RequestOptions requestOptions, Context context)"
    parameters:
    - id: "indexer"
      type: "com.azure.search.models.Indexer"
    - id: "accessCondition"
      type: "com.azure.core.http.MatchConditions"
    - id: "requestOptions"
      type: "com.azure.search.models.RequestOptions"
    - id: "context"
      type: "com.azure.core.util.Context"
    return:
      type: "reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.search.models.Indexer>>"
- uid: "com.azure.search.SearchServiceAsyncClient.createOrUpdateSkillset(com.azure.search.models.Skillset)"
  id: "createOrUpdateSkillset(com.azure.search.models.Skillset)"
  parent: "com.azure.search.SearchServiceAsyncClient"
  langs:
  - "java"
  name: "createOrUpdateSkillset(Skillset skillset)"
  nameWithType: "SearchServiceAsyncClient.createOrUpdateSkillset(Skillset skillset)"
  fullName: "com.azure.search.SearchServiceAsyncClient.createOrUpdateSkillset(Skillset skillset)"
  overload: "com.azure.search.SearchServiceAsyncClient.createOrUpdateSkillset*"
  type: "Method"
  package: "com.azure.search"
  summary: "Creates a new Azure Cognitive Search skillset or updates a skillset if it already exists."
  syntax:
    content: "public Mono<Skillset> createOrUpdateSkillset(Skillset skillset)"
    parameters:
    - id: "skillset"
      type: "com.azure.search.models.Skillset"
      description: "the definition of the skillset to create or update"
    return:
      type: "reactor.core.publisher.Mono<com.azure.search.models.Skillset>"
      description: "the skillset that was created or updated."
- uid: "com.azure.search.SearchServiceAsyncClient.createOrUpdateSkillsetWithResponse(com.azure.search.models.Skillset,com.azure.core.http.MatchConditions,com.azure.search.models.RequestOptions)"
  id: "createOrUpdateSkillsetWithResponse(com.azure.search.models.Skillset,com.azure.core.http.MatchConditions,com.azure.search.models.RequestOptions)"
  parent: "com.azure.search.SearchServiceAsyncClient"
  langs:
  - "java"
  name: "createOrUpdateSkillsetWithResponse(Skillset skillset, MatchConditions accessCondition, RequestOptions requestOptions)"
  nameWithType: "SearchServiceAsyncClient.createOrUpdateSkillsetWithResponse(Skillset skillset, MatchConditions accessCondition, RequestOptions requestOptions)"
  fullName: "com.azure.search.SearchServiceAsyncClient.createOrUpdateSkillsetWithResponse(Skillset skillset, MatchConditions accessCondition, RequestOptions requestOptions)"
  overload: "com.azure.search.SearchServiceAsyncClient.createOrUpdateSkillsetWithResponse*"
  type: "Method"
  package: "com.azure.search"
  summary: "Creates a new Azure Cognitive Search skillset or updates a skillset if it already exists."
  syntax:
    content: "public Mono<Response<Skillset>> createOrUpdateSkillsetWithResponse(Skillset skillset, MatchConditions accessCondition, RequestOptions requestOptions)"
    parameters:
    - id: "skillset"
      type: "com.azure.search.models.Skillset"
      description: "the definition of the skillset to create or update"
    - id: "accessCondition"
      type: "com.azure.core.http.MatchConditions"
      description: "the condition where the operation will be performed if the ETag on the server matches or\n doesn't match specified values"
    - id: "requestOptions"
      type: "com.azure.search.models.RequestOptions"
      description: "additional parameters for the operation. Contains the tracking ID sent with the request to\n help with debugging"
    return:
      type: "reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.search.models.Skillset>>"
      description: "a response containing the skillset that was created or updated."
- uid: "com.azure.search.SearchServiceAsyncClient.createOrUpdateSkillsetWithResponse(com.azure.search.models.Skillset,com.azure.core.http.MatchConditions,com.azure.search.models.RequestOptions,com.azure.core.util.Context)"
  id: "createOrUpdateSkillsetWithResponse(com.azure.search.models.Skillset,com.azure.core.http.MatchConditions,com.azure.search.models.RequestOptions,com.azure.core.util.Context)"
  parent: "com.azure.search.SearchServiceAsyncClient"
  langs:
  - "java"
  name: "createOrUpdateSkillsetWithResponse(Skillset skillset, MatchConditions accessCondition, RequestOptions requestOptions, Context context)"
  nameWithType: "SearchServiceAsyncClient.createOrUpdateSkillsetWithResponse(Skillset skillset, MatchConditions accessCondition, RequestOptions requestOptions, Context context)"
  fullName: "com.azure.search.SearchServiceAsyncClient.createOrUpdateSkillsetWithResponse(Skillset skillset, MatchConditions accessCondition, RequestOptions requestOptions, Context context)"
  overload: "com.azure.search.SearchServiceAsyncClient.createOrUpdateSkillsetWithResponse*"
  type: "Method"
  package: "com.azure.search"
  syntax:
    content: " Mono<Response<Skillset>> createOrUpdateSkillsetWithResponse(Skillset skillset, MatchConditions accessCondition, RequestOptions requestOptions, Context context)"
    parameters:
    - id: "skillset"
      type: "com.azure.search.models.Skillset"
    - id: "accessCondition"
      type: "com.azure.core.http.MatchConditions"
    - id: "requestOptions"
      type: "com.azure.search.models.RequestOptions"
    - id: "context"
      type: "com.azure.core.util.Context"
    return:
      type: "reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.search.models.Skillset>>"
- uid: "com.azure.search.SearchServiceAsyncClient.createOrUpdateSynonymMap(com.azure.search.models.SynonymMap)"
  id: "createOrUpdateSynonymMap(com.azure.search.models.SynonymMap)"
  parent: "com.azure.search.SearchServiceAsyncClient"
  langs:
  - "java"
  name: "createOrUpdateSynonymMap(SynonymMap synonymMap)"
  nameWithType: "SearchServiceAsyncClient.createOrUpdateSynonymMap(SynonymMap synonymMap)"
  fullName: "com.azure.search.SearchServiceAsyncClient.createOrUpdateSynonymMap(SynonymMap synonymMap)"
  overload: "com.azure.search.SearchServiceAsyncClient.createOrUpdateSynonymMap*"
  type: "Method"
  package: "com.azure.search"
  summary: "Creates a new Azure Cognitive Search synonym map or updates a synonym map if it already exists."
  syntax:
    content: "public Mono<SynonymMap> createOrUpdateSynonymMap(SynonymMap synonymMap)"
    parameters:
    - id: "synonymMap"
      type: "com.azure.search.models.SynonymMap"
      description: "the definition of the synonym map to create or update"
    return:
      type: "reactor.core.publisher.Mono<com.azure.search.models.SynonymMap>"
      description: "the synonym map that was created or updated."
- uid: "com.azure.search.SearchServiceAsyncClient.createOrUpdateSynonymMapWithResponse(com.azure.search.models.SynonymMap,com.azure.core.http.MatchConditions,com.azure.search.models.RequestOptions)"
  id: "createOrUpdateSynonymMapWithResponse(com.azure.search.models.SynonymMap,com.azure.core.http.MatchConditions,com.azure.search.models.RequestOptions)"
  parent: "com.azure.search.SearchServiceAsyncClient"
  langs:
  - "java"
  name: "createOrUpdateSynonymMapWithResponse(SynonymMap synonymMap, MatchConditions accessCondition, RequestOptions requestOptions)"
  nameWithType: "SearchServiceAsyncClient.createOrUpdateSynonymMapWithResponse(SynonymMap synonymMap, MatchConditions accessCondition, RequestOptions requestOptions)"
  fullName: "com.azure.search.SearchServiceAsyncClient.createOrUpdateSynonymMapWithResponse(SynonymMap synonymMap, MatchConditions accessCondition, RequestOptions requestOptions)"
  overload: "com.azure.search.SearchServiceAsyncClient.createOrUpdateSynonymMapWithResponse*"
  type: "Method"
  package: "com.azure.search"
  summary: "Creates a new Azure Cognitive Search synonym map or updates a synonym map if it already exists."
  syntax:
    content: "public Mono<Response<SynonymMap>> createOrUpdateSynonymMapWithResponse(SynonymMap synonymMap, MatchConditions accessCondition, RequestOptions requestOptions)"
    parameters:
    - id: "synonymMap"
      type: "com.azure.search.models.SynonymMap"
      description: "the definition of the synonym map to create or update"
    - id: "accessCondition"
      type: "com.azure.core.http.MatchConditions"
      description: "the condition where the operation will be performed if the ETag on the server matches or\n doesn't match specified values"
    - id: "requestOptions"
      type: "com.azure.search.models.RequestOptions"
      description: "additional parameters for the operation. Contains the tracking ID sent with the request to\n help with debugging"
    return:
      type: "reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.search.models.SynonymMap>>"
      description: "a response containing the synonym map that was created or updated."
- uid: "com.azure.search.SearchServiceAsyncClient.createOrUpdateSynonymMapWithResponse(com.azure.search.models.SynonymMap,com.azure.core.http.MatchConditions,com.azure.search.models.RequestOptions,com.azure.core.util.Context)"
  id: "createOrUpdateSynonymMapWithResponse(com.azure.search.models.SynonymMap,com.azure.core.http.MatchConditions,com.azure.search.models.RequestOptions,com.azure.core.util.Context)"
  parent: "com.azure.search.SearchServiceAsyncClient"
  langs:
  - "java"
  name: "createOrUpdateSynonymMapWithResponse(SynonymMap synonymMap, MatchConditions accessCondition, RequestOptions requestOptions, Context context)"
  nameWithType: "SearchServiceAsyncClient.createOrUpdateSynonymMapWithResponse(SynonymMap synonymMap, MatchConditions accessCondition, RequestOptions requestOptions, Context context)"
  fullName: "com.azure.search.SearchServiceAsyncClient.createOrUpdateSynonymMapWithResponse(SynonymMap synonymMap, MatchConditions accessCondition, RequestOptions requestOptions, Context context)"
  overload: "com.azure.search.SearchServiceAsyncClient.createOrUpdateSynonymMapWithResponse*"
  type: "Method"
  package: "com.azure.search"
  syntax:
    content: " Mono<Response<SynonymMap>> createOrUpdateSynonymMapWithResponse(SynonymMap synonymMap, MatchConditions accessCondition, RequestOptions requestOptions, Context context)"
    parameters:
    - id: "synonymMap"
      type: "com.azure.search.models.SynonymMap"
    - id: "accessCondition"
      type: "com.azure.core.http.MatchConditions"
    - id: "requestOptions"
      type: "com.azure.search.models.RequestOptions"
    - id: "context"
      type: "com.azure.core.util.Context"
    return:
      type: "reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.search.models.SynonymMap>>"
- uid: "com.azure.search.SearchServiceAsyncClient.createSkillset(com.azure.search.models.Skillset)"
  id: "createSkillset(com.azure.search.models.Skillset)"
  parent: "com.azure.search.SearchServiceAsyncClient"
  langs:
  - "java"
  name: "createSkillset(Skillset skillset)"
  nameWithType: "SearchServiceAsyncClient.createSkillset(Skillset skillset)"
  fullName: "com.azure.search.SearchServiceAsyncClient.createSkillset(Skillset skillset)"
  overload: "com.azure.search.SearchServiceAsyncClient.createSkillset*"
  type: "Method"
  package: "com.azure.search"
  summary: "Creates a new skillset in an Azure Cognitive Search service."
  syntax:
    content: "public Mono<Skillset> createSkillset(Skillset skillset)"
    parameters:
    - id: "skillset"
      type: "com.azure.search.models.Skillset"
      description: "definition of the skillset containing one or more cognitive skills"
    return:
      type: "reactor.core.publisher.Mono<com.azure.search.models.Skillset>"
      description: "the created Skillset."
- uid: "com.azure.search.SearchServiceAsyncClient.createSkillsetWithResponse(com.azure.search.models.Skillset,com.azure.search.models.RequestOptions)"
  id: "createSkillsetWithResponse(com.azure.search.models.Skillset,com.azure.search.models.RequestOptions)"
  parent: "com.azure.search.SearchServiceAsyncClient"
  langs:
  - "java"
  name: "createSkillsetWithResponse(Skillset skillset, RequestOptions requestOptions)"
  nameWithType: "SearchServiceAsyncClient.createSkillsetWithResponse(Skillset skillset, RequestOptions requestOptions)"
  fullName: "com.azure.search.SearchServiceAsyncClient.createSkillsetWithResponse(Skillset skillset, RequestOptions requestOptions)"
  overload: "com.azure.search.SearchServiceAsyncClient.createSkillsetWithResponse*"
  type: "Method"
  package: "com.azure.search"
  summary: "Creates a new skillset in an Azure Cognitive Search service."
  syntax:
    content: "public Mono<Response<Skillset>> createSkillsetWithResponse(Skillset skillset, RequestOptions requestOptions)"
    parameters:
    - id: "skillset"
      type: "com.azure.search.models.Skillset"
      description: "definition of the skillset containing one or more cognitive skills"
    - id: "requestOptions"
      type: "com.azure.search.models.RequestOptions"
      description: "additional parameters for the operation. Contains the tracking ID sent with the request to\n help with debugging"
    return:
      type: "reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.search.models.Skillset>>"
      description: "a response containing the created Skillset."
- uid: "com.azure.search.SearchServiceAsyncClient.createSkillsetWithResponse(com.azure.search.models.Skillset,com.azure.search.models.RequestOptions,com.azure.core.util.Context)"
  id: "createSkillsetWithResponse(com.azure.search.models.Skillset,com.azure.search.models.RequestOptions,com.azure.core.util.Context)"
  parent: "com.azure.search.SearchServiceAsyncClient"
  langs:
  - "java"
  name: "createSkillsetWithResponse(Skillset skillset, RequestOptions requestOptions, Context context)"
  nameWithType: "SearchServiceAsyncClient.createSkillsetWithResponse(Skillset skillset, RequestOptions requestOptions, Context context)"
  fullName: "com.azure.search.SearchServiceAsyncClient.createSkillsetWithResponse(Skillset skillset, RequestOptions requestOptions, Context context)"
  overload: "com.azure.search.SearchServiceAsyncClient.createSkillsetWithResponse*"
  type: "Method"
  package: "com.azure.search"
  syntax:
    content: " Mono<Response<Skillset>> createSkillsetWithResponse(Skillset skillset, RequestOptions requestOptions, Context context)"
    parameters:
    - id: "skillset"
      type: "com.azure.search.models.Skillset"
    - id: "requestOptions"
      type: "com.azure.search.models.RequestOptions"
    - id: "context"
      type: "com.azure.core.util.Context"
    return:
      type: "reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.search.models.Skillset>>"
- uid: "com.azure.search.SearchServiceAsyncClient.createSynonymMap(com.azure.search.models.SynonymMap)"
  id: "createSynonymMap(com.azure.search.models.SynonymMap)"
  parent: "com.azure.search.SearchServiceAsyncClient"
  langs:
  - "java"
  name: "createSynonymMap(SynonymMap synonymMap)"
  nameWithType: "SearchServiceAsyncClient.createSynonymMap(SynonymMap synonymMap)"
  fullName: "com.azure.search.SearchServiceAsyncClient.createSynonymMap(SynonymMap synonymMap)"
  overload: "com.azure.search.SearchServiceAsyncClient.createSynonymMap*"
  type: "Method"
  package: "com.azure.search"
  summary: "Creates a new Azure Cognitive Search synonym map."
  syntax:
    content: "public Mono<SynonymMap> createSynonymMap(SynonymMap synonymMap)"
    parameters:
    - id: "synonymMap"
      type: "com.azure.search.models.SynonymMap"
      description: "the definition of the synonym map to create"
    return:
      type: "reactor.core.publisher.Mono<com.azure.search.models.SynonymMap>"
      description: "the created <xref uid=\"com.azure.search.models.SynonymMap\" data-throw-if-not-resolved=\"false\">SynonymMap</xref>."
- uid: "com.azure.search.SearchServiceAsyncClient.createSynonymMapWithResponse(com.azure.search.models.SynonymMap,com.azure.search.models.RequestOptions)"
  id: "createSynonymMapWithResponse(com.azure.search.models.SynonymMap,com.azure.search.models.RequestOptions)"
  parent: "com.azure.search.SearchServiceAsyncClient"
  langs:
  - "java"
  name: "createSynonymMapWithResponse(SynonymMap synonymMap, RequestOptions requestOptions)"
  nameWithType: "SearchServiceAsyncClient.createSynonymMapWithResponse(SynonymMap synonymMap, RequestOptions requestOptions)"
  fullName: "com.azure.search.SearchServiceAsyncClient.createSynonymMapWithResponse(SynonymMap synonymMap, RequestOptions requestOptions)"
  overload: "com.azure.search.SearchServiceAsyncClient.createSynonymMapWithResponse*"
  type: "Method"
  package: "com.azure.search"
  summary: "Creates a new Azure Cognitive Search synonym map."
  syntax:
    content: "public Mono<Response<SynonymMap>> createSynonymMapWithResponse(SynonymMap synonymMap, RequestOptions requestOptions)"
    parameters:
    - id: "synonymMap"
      type: "com.azure.search.models.SynonymMap"
      description: "the definition of the synonym map to create"
    - id: "requestOptions"
      type: "com.azure.search.models.RequestOptions"
      description: "additional parameters for the operation. Contains the tracking ID sent with the request to\n help with debugging"
    return:
      type: "reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.search.models.SynonymMap>>"
      description: "a response containing the created SynonymMap."
- uid: "com.azure.search.SearchServiceAsyncClient.createSynonymMapWithResponse(com.azure.search.models.SynonymMap,com.azure.search.models.RequestOptions,com.azure.core.util.Context)"
  id: "createSynonymMapWithResponse(com.azure.search.models.SynonymMap,com.azure.search.models.RequestOptions,com.azure.core.util.Context)"
  parent: "com.azure.search.SearchServiceAsyncClient"
  langs:
  - "java"
  name: "createSynonymMapWithResponse(SynonymMap synonymMap, RequestOptions requestOptions, Context context)"
  nameWithType: "SearchServiceAsyncClient.createSynonymMapWithResponse(SynonymMap synonymMap, RequestOptions requestOptions, Context context)"
  fullName: "com.azure.search.SearchServiceAsyncClient.createSynonymMapWithResponse(SynonymMap synonymMap, RequestOptions requestOptions, Context context)"
  overload: "com.azure.search.SearchServiceAsyncClient.createSynonymMapWithResponse*"
  type: "Method"
  package: "com.azure.search"
  syntax:
    content: " Mono<Response<SynonymMap>> createSynonymMapWithResponse(SynonymMap synonymMap, RequestOptions requestOptions, Context context)"
    parameters:
    - id: "synonymMap"
      type: "com.azure.search.models.SynonymMap"
    - id: "requestOptions"
      type: "com.azure.search.models.RequestOptions"
    - id: "context"
      type: "com.azure.core.util.Context"
    return:
      type: "reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.search.models.SynonymMap>>"
- uid: "com.azure.search.SearchServiceAsyncClient.deleteDataSource(java.lang.String)"
  id: "deleteDataSource(java.lang.String)"
  parent: "com.azure.search.SearchServiceAsyncClient"
  langs:
  - "java"
  name: "deleteDataSource(String dataSourceName)"
  nameWithType: "SearchServiceAsyncClient.deleteDataSource(String dataSourceName)"
  fullName: "com.azure.search.SearchServiceAsyncClient.deleteDataSource(String dataSourceName)"
  overload: "com.azure.search.SearchServiceAsyncClient.deleteDataSource*"
  type: "Method"
  package: "com.azure.search"
  summary: "Delete a DataSource"
  syntax:
    content: "public Mono<Void> deleteDataSource(String dataSourceName)"
    parameters:
    - id: "dataSourceName"
      type: "java.lang.String"
      description: "the name of the data source for deletion"
    return:
      type: "reactor.core.publisher.Mono<java.lang.Void>"
      description: "a void Mono"
- uid: "com.azure.search.SearchServiceAsyncClient.deleteDataSourceWithResponse(java.lang.String,com.azure.core.http.MatchConditions,com.azure.search.models.RequestOptions)"
  id: "deleteDataSourceWithResponse(java.lang.String,com.azure.core.http.MatchConditions,com.azure.search.models.RequestOptions)"
  parent: "com.azure.search.SearchServiceAsyncClient"
  langs:
  - "java"
  name: "deleteDataSourceWithResponse(String dataSourceName, MatchConditions accessCondition, RequestOptions requestOptions)"
  nameWithType: "SearchServiceAsyncClient.deleteDataSourceWithResponse(String dataSourceName, MatchConditions accessCondition, RequestOptions requestOptions)"
  fullName: "com.azure.search.SearchServiceAsyncClient.deleteDataSourceWithResponse(String dataSourceName, MatchConditions accessCondition, RequestOptions requestOptions)"
  overload: "com.azure.search.SearchServiceAsyncClient.deleteDataSourceWithResponse*"
  type: "Method"
  package: "com.azure.search"
  summary: "Deletes an Azure Cognitive Search data source."
  syntax:
    content: "public Mono<Response<Void>> deleteDataSourceWithResponse(String dataSourceName, MatchConditions accessCondition, RequestOptions requestOptions)"
    parameters:
    - id: "dataSourceName"
      type: "java.lang.String"
      description: "The name of the data source to delete."
    - id: "accessCondition"
      type: "com.azure.core.http.MatchConditions"
      description: "the condition where the operation will be performed if the ETag on the server matches or\n doesn't match specified values"
    - id: "requestOptions"
      type: "com.azure.search.models.RequestOptions"
      description: "additional parameters for the operation. Contains the tracking ID sent with the request to\n help with debugging"
    return:
      type: "reactor.core.publisher.Mono<com.azure.core.http.rest.Response<java.lang.Void>>"
      description: "a mono response"
- uid: "com.azure.search.SearchServiceAsyncClient.deleteDataSourceWithResponse(java.lang.String,com.azure.core.http.MatchConditions,com.azure.search.models.RequestOptions,com.azure.core.util.Context)"
  id: "deleteDataSourceWithResponse(java.lang.String,com.azure.core.http.MatchConditions,com.azure.search.models.RequestOptions,com.azure.core.util.Context)"
  parent: "com.azure.search.SearchServiceAsyncClient"
  langs:
  - "java"
  name: "deleteDataSourceWithResponse(String dataSourceName, MatchConditions accessCondition, RequestOptions requestOptions, Context context)"
  nameWithType: "SearchServiceAsyncClient.deleteDataSourceWithResponse(String dataSourceName, MatchConditions accessCondition, RequestOptions requestOptions, Context context)"
  fullName: "com.azure.search.SearchServiceAsyncClient.deleteDataSourceWithResponse(String dataSourceName, MatchConditions accessCondition, RequestOptions requestOptions, Context context)"
  overload: "com.azure.search.SearchServiceAsyncClient.deleteDataSourceWithResponse*"
  type: "Method"
  package: "com.azure.search"
  syntax:
    content: " Mono<Response<Void>> deleteDataSourceWithResponse(String dataSourceName, MatchConditions accessCondition, RequestOptions requestOptions, Context context)"
    parameters:
    - id: "dataSourceName"
      type: "java.lang.String"
    - id: "accessCondition"
      type: "com.azure.core.http.MatchConditions"
    - id: "requestOptions"
      type: "com.azure.search.models.RequestOptions"
    - id: "context"
      type: "com.azure.core.util.Context"
    return:
      type: "reactor.core.publisher.Mono<com.azure.core.http.rest.Response<java.lang.Void>>"
- uid: "com.azure.search.SearchServiceAsyncClient.deleteIndex(java.lang.String)"
  id: "deleteIndex(java.lang.String)"
  parent: "com.azure.search.SearchServiceAsyncClient"
  langs:
  - "java"
  name: "deleteIndex(String indexName)"
  nameWithType: "SearchServiceAsyncClient.deleteIndex(String indexName)"
  fullName: "com.azure.search.SearchServiceAsyncClient.deleteIndex(String indexName)"
  overload: "com.azure.search.SearchServiceAsyncClient.deleteIndex*"
  type: "Method"
  package: "com.azure.search"
  summary: "Deletes an Azure Cognitive Search index and all the documents it contains."
  syntax:
    content: "public Mono<Void> deleteIndex(String indexName)"
    parameters:
    - id: "indexName"
      type: "java.lang.String"
      description: "the name of the index to delete"
    return:
      type: "reactor.core.publisher.Mono<java.lang.Void>"
      description: "a response signalling completion."
- uid: "com.azure.search.SearchServiceAsyncClient.deleteIndexWithResponse(java.lang.String,com.azure.core.http.MatchConditions,com.azure.search.models.RequestOptions)"
  id: "deleteIndexWithResponse(java.lang.String,com.azure.core.http.MatchConditions,com.azure.search.models.RequestOptions)"
  parent: "com.azure.search.SearchServiceAsyncClient"
  langs:
  - "java"
  name: "deleteIndexWithResponse(String indexName, MatchConditions accessCondition, RequestOptions requestOptions)"
  nameWithType: "SearchServiceAsyncClient.deleteIndexWithResponse(String indexName, MatchConditions accessCondition, RequestOptions requestOptions)"
  fullName: "com.azure.search.SearchServiceAsyncClient.deleteIndexWithResponse(String indexName, MatchConditions accessCondition, RequestOptions requestOptions)"
  overload: "com.azure.search.SearchServiceAsyncClient.deleteIndexWithResponse*"
  type: "Method"
  package: "com.azure.search"
  summary: "Deletes an Azure Cognitive Search index and all the documents it contains."
  syntax:
    content: "public Mono<Response<Void>> deleteIndexWithResponse(String indexName, MatchConditions accessCondition, RequestOptions requestOptions)"
    parameters:
    - id: "indexName"
      type: "java.lang.String"
      description: "the name of the index to delete"
    - id: "accessCondition"
      type: "com.azure.core.http.MatchConditions"
      description: "the condition where the operation will be performed if the ETag on the server matches or\n doesn't match specified values"
    - id: "requestOptions"
      type: "com.azure.search.models.RequestOptions"
      description: "additional parameters for the operation. Contains the tracking ID sent with the request to\n help with debugging"
    return:
      type: "reactor.core.publisher.Mono<com.azure.core.http.rest.Response<java.lang.Void>>"
      description: "a response signalling completion."
- uid: "com.azure.search.SearchServiceAsyncClient.deleteIndexWithResponse(java.lang.String,com.azure.core.http.MatchConditions,com.azure.search.models.RequestOptions,com.azure.core.util.Context)"
  id: "deleteIndexWithResponse(java.lang.String,com.azure.core.http.MatchConditions,com.azure.search.models.RequestOptions,com.azure.core.util.Context)"
  parent: "com.azure.search.SearchServiceAsyncClient"
  langs:
  - "java"
  name: "deleteIndexWithResponse(String indexName, MatchConditions accessCondition, RequestOptions requestOptions, Context context)"
  nameWithType: "SearchServiceAsyncClient.deleteIndexWithResponse(String indexName, MatchConditions accessCondition, RequestOptions requestOptions, Context context)"
  fullName: "com.azure.search.SearchServiceAsyncClient.deleteIndexWithResponse(String indexName, MatchConditions accessCondition, RequestOptions requestOptions, Context context)"
  overload: "com.azure.search.SearchServiceAsyncClient.deleteIndexWithResponse*"
  type: "Method"
  package: "com.azure.search"
  syntax:
    content: " Mono<Response<Void>> deleteIndexWithResponse(String indexName, MatchConditions accessCondition, RequestOptions requestOptions, Context context)"
    parameters:
    - id: "indexName"
      type: "java.lang.String"
    - id: "accessCondition"
      type: "com.azure.core.http.MatchConditions"
    - id: "requestOptions"
      type: "com.azure.search.models.RequestOptions"
    - id: "context"
      type: "com.azure.core.util.Context"
    return:
      type: "reactor.core.publisher.Mono<com.azure.core.http.rest.Response<java.lang.Void>>"
- uid: "com.azure.search.SearchServiceAsyncClient.deleteIndexer(java.lang.String)"
  id: "deleteIndexer(java.lang.String)"
  parent: "com.azure.search.SearchServiceAsyncClient"
  langs:
  - "java"
  name: "deleteIndexer(String indexerName)"
  nameWithType: "SearchServiceAsyncClient.deleteIndexer(String indexerName)"
  fullName: "com.azure.search.SearchServiceAsyncClient.deleteIndexer(String indexerName)"
  overload: "com.azure.search.SearchServiceAsyncClient.deleteIndexer*"
  type: "Method"
  package: "com.azure.search"
  summary: "Deletes an Azure Cognitive Search indexer."
  syntax:
    content: "public Mono<Void> deleteIndexer(String indexerName)"
    parameters:
    - id: "indexerName"
      type: "java.lang.String"
      description: "the name of the indexer to delete"
    return:
      type: "reactor.core.publisher.Mono<java.lang.Void>"
      description: "a response signalling completion."
- uid: "com.azure.search.SearchServiceAsyncClient.deleteIndexerWithResponse(java.lang.String,com.azure.core.http.MatchConditions,com.azure.search.models.RequestOptions)"
  id: "deleteIndexerWithResponse(java.lang.String,com.azure.core.http.MatchConditions,com.azure.search.models.RequestOptions)"
  parent: "com.azure.search.SearchServiceAsyncClient"
  langs:
  - "java"
  name: "deleteIndexerWithResponse(String indexerName, MatchConditions accessCondition, RequestOptions requestOptions)"
  nameWithType: "SearchServiceAsyncClient.deleteIndexerWithResponse(String indexerName, MatchConditions accessCondition, RequestOptions requestOptions)"
  fullName: "com.azure.search.SearchServiceAsyncClient.deleteIndexerWithResponse(String indexerName, MatchConditions accessCondition, RequestOptions requestOptions)"
  overload: "com.azure.search.SearchServiceAsyncClient.deleteIndexerWithResponse*"
  type: "Method"
  package: "com.azure.search"
  summary: "Deletes an Azure Cognitive Search indexer."
  syntax:
    content: "public Mono<Response<Void>> deleteIndexerWithResponse(String indexerName, MatchConditions accessCondition, RequestOptions requestOptions)"
    parameters:
    - id: "indexerName"
      type: "java.lang.String"
      description: "the name of the indexer to delete"
    - id: "accessCondition"
      type: "com.azure.core.http.MatchConditions"
      description: "the condition where the operation will be performed if the ETag on the server matches or\n doesn't match specified values"
    - id: "requestOptions"
      type: "com.azure.search.models.RequestOptions"
      description: "additional parameters for the operation. Contains the tracking ID sent with the request to\n help with debugging"
    return:
      type: "reactor.core.publisher.Mono<com.azure.core.http.rest.Response<java.lang.Void>>"
      description: "a response signalling completion."
- uid: "com.azure.search.SearchServiceAsyncClient.deleteIndexerWithResponse(java.lang.String,com.azure.core.http.MatchConditions,com.azure.search.models.RequestOptions,com.azure.core.util.Context)"
  id: "deleteIndexerWithResponse(java.lang.String,com.azure.core.http.MatchConditions,com.azure.search.models.RequestOptions,com.azure.core.util.Context)"
  parent: "com.azure.search.SearchServiceAsyncClient"
  langs:
  - "java"
  name: "deleteIndexerWithResponse(String indexerName, MatchConditions accessCondition, RequestOptions requestOptions, Context context)"
  nameWithType: "SearchServiceAsyncClient.deleteIndexerWithResponse(String indexerName, MatchConditions accessCondition, RequestOptions requestOptions, Context context)"
  fullName: "com.azure.search.SearchServiceAsyncClient.deleteIndexerWithResponse(String indexerName, MatchConditions accessCondition, RequestOptions requestOptions, Context context)"
  overload: "com.azure.search.SearchServiceAsyncClient.deleteIndexerWithResponse*"
  type: "Method"
  package: "com.azure.search"
  summary: "Deletes an Azure Cognitive Search indexer."
  syntax:
    content: " Mono<Response<Void>> deleteIndexerWithResponse(String indexerName, MatchConditions accessCondition, RequestOptions requestOptions, Context context)"
    parameters:
    - id: "indexerName"
      type: "java.lang.String"
      description: "the name of the indexer to delete"
    - id: "accessCondition"
      type: "com.azure.core.http.MatchConditions"
      description: "the condition where the operation will be performed if the ETag on the server matches or\n doesn't match specified values"
    - id: "requestOptions"
      type: "com.azure.search.models.RequestOptions"
      description: "additional parameters for the operation. Contains the tracking ID sent with the request to\n help with debugging"
    - id: "context"
      type: "com.azure.core.util.Context"
      description: "the context"
    return:
      type: "reactor.core.publisher.Mono<com.azure.core.http.rest.Response<java.lang.Void>>"
      description: "a response signalling completion."
- uid: "com.azure.search.SearchServiceAsyncClient.deleteSkillset(java.lang.String)"
  id: "deleteSkillset(java.lang.String)"
  parent: "com.azure.search.SearchServiceAsyncClient"
  langs:
  - "java"
  name: "deleteSkillset(String skillsetName)"
  nameWithType: "SearchServiceAsyncClient.deleteSkillset(String skillsetName)"
  fullName: "com.azure.search.SearchServiceAsyncClient.deleteSkillset(String skillsetName)"
  overload: "com.azure.search.SearchServiceAsyncClient.deleteSkillset*"
  type: "Method"
  package: "com.azure.search"
  summary: "Deletes a cognitive skillset in an Azure Cognitive Search service."
  syntax:
    content: "public Mono<Void> deleteSkillset(String skillsetName)"
    parameters:
    - id: "skillsetName"
      type: "java.lang.String"
      description: "the name of the skillset to delete"
    return:
      type: "reactor.core.publisher.Mono<java.lang.Void>"
      description: "a response signalling completion."
- uid: "com.azure.search.SearchServiceAsyncClient.deleteSkillsetWithResponse(java.lang.String,com.azure.core.http.MatchConditions,com.azure.search.models.RequestOptions)"
  id: "deleteSkillsetWithResponse(java.lang.String,com.azure.core.http.MatchConditions,com.azure.search.models.RequestOptions)"
  parent: "com.azure.search.SearchServiceAsyncClient"
  langs:
  - "java"
  name: "deleteSkillsetWithResponse(String skillsetName, MatchConditions accessCondition, RequestOptions requestOptions)"
  nameWithType: "SearchServiceAsyncClient.deleteSkillsetWithResponse(String skillsetName, MatchConditions accessCondition, RequestOptions requestOptions)"
  fullName: "com.azure.search.SearchServiceAsyncClient.deleteSkillsetWithResponse(String skillsetName, MatchConditions accessCondition, RequestOptions requestOptions)"
  overload: "com.azure.search.SearchServiceAsyncClient.deleteSkillsetWithResponse*"
  type: "Method"
  package: "com.azure.search"
  summary: "Deletes a cognitive skillset in an Azure Cognitive Search service."
  syntax:
    content: "public Mono<Response<Void>> deleteSkillsetWithResponse(String skillsetName, MatchConditions accessCondition, RequestOptions requestOptions)"
    parameters:
    - id: "skillsetName"
      type: "java.lang.String"
      description: "the name of the skillset to delete"
    - id: "accessCondition"
      type: "com.azure.core.http.MatchConditions"
      description: "the condition where the operation will be performed if the ETag on the server matches or\n doesn't match specified values"
    - id: "requestOptions"
      type: "com.azure.search.models.RequestOptions"
      description: "additional parameters for the operation. Contains the tracking ID sent with the request to\n help with debugging"
    return:
      type: "reactor.core.publisher.Mono<com.azure.core.http.rest.Response<java.lang.Void>>"
      description: "a response signalling completion."
- uid: "com.azure.search.SearchServiceAsyncClient.deleteSkillsetWithResponse(java.lang.String,com.azure.core.http.MatchConditions,com.azure.search.models.RequestOptions,com.azure.core.util.Context)"
  id: "deleteSkillsetWithResponse(java.lang.String,com.azure.core.http.MatchConditions,com.azure.search.models.RequestOptions,com.azure.core.util.Context)"
  parent: "com.azure.search.SearchServiceAsyncClient"
  langs:
  - "java"
  name: "deleteSkillsetWithResponse(String skillsetName, MatchConditions accessCondition, RequestOptions requestOptions, Context context)"
  nameWithType: "SearchServiceAsyncClient.deleteSkillsetWithResponse(String skillsetName, MatchConditions accessCondition, RequestOptions requestOptions, Context context)"
  fullName: "com.azure.search.SearchServiceAsyncClient.deleteSkillsetWithResponse(String skillsetName, MatchConditions accessCondition, RequestOptions requestOptions, Context context)"
  overload: "com.azure.search.SearchServiceAsyncClient.deleteSkillsetWithResponse*"
  type: "Method"
  package: "com.azure.search"
  syntax:
    content: " Mono<Response<Void>> deleteSkillsetWithResponse(String skillsetName, MatchConditions accessCondition, RequestOptions requestOptions, Context context)"
    parameters:
    - id: "skillsetName"
      type: "java.lang.String"
    - id: "accessCondition"
      type: "com.azure.core.http.MatchConditions"
    - id: "requestOptions"
      type: "com.azure.search.models.RequestOptions"
    - id: "context"
      type: "com.azure.core.util.Context"
    return:
      type: "reactor.core.publisher.Mono<com.azure.core.http.rest.Response<java.lang.Void>>"
- uid: "com.azure.search.SearchServiceAsyncClient.deleteSynonymMap(java.lang.String)"
  id: "deleteSynonymMap(java.lang.String)"
  parent: "com.azure.search.SearchServiceAsyncClient"
  langs:
  - "java"
  name: "deleteSynonymMap(String synonymMapName)"
  nameWithType: "SearchServiceAsyncClient.deleteSynonymMap(String synonymMapName)"
  fullName: "com.azure.search.SearchServiceAsyncClient.deleteSynonymMap(String synonymMapName)"
  overload: "com.azure.search.SearchServiceAsyncClient.deleteSynonymMap*"
  type: "Method"
  package: "com.azure.search"
  summary: "Deletes an Azure Cognitive Search synonym map."
  syntax:
    content: "public Mono<Void> deleteSynonymMap(String synonymMapName)"
    parameters:
    - id: "synonymMapName"
      type: "java.lang.String"
      description: "the name of the synonym map to delete"
    return:
      type: "reactor.core.publisher.Mono<java.lang.Void>"
      description: "a response signalling completion."
- uid: "com.azure.search.SearchServiceAsyncClient.deleteSynonymMapWithResponse(java.lang.String,com.azure.core.http.MatchConditions,com.azure.search.models.RequestOptions)"
  id: "deleteSynonymMapWithResponse(java.lang.String,com.azure.core.http.MatchConditions,com.azure.search.models.RequestOptions)"
  parent: "com.azure.search.SearchServiceAsyncClient"
  langs:
  - "java"
  name: "deleteSynonymMapWithResponse(String synonymMapName, MatchConditions accessCondition, RequestOptions requestOptions)"
  nameWithType: "SearchServiceAsyncClient.deleteSynonymMapWithResponse(String synonymMapName, MatchConditions accessCondition, RequestOptions requestOptions)"
  fullName: "com.azure.search.SearchServiceAsyncClient.deleteSynonymMapWithResponse(String synonymMapName, MatchConditions accessCondition, RequestOptions requestOptions)"
  overload: "com.azure.search.SearchServiceAsyncClient.deleteSynonymMapWithResponse*"
  type: "Method"
  package: "com.azure.search"
  summary: "Deletes an Azure Cognitive Search synonym map."
  syntax:
    content: "public Mono<Response<Void>> deleteSynonymMapWithResponse(String synonymMapName, MatchConditions accessCondition, RequestOptions requestOptions)"
    parameters:
    - id: "synonymMapName"
      type: "java.lang.String"
      description: "the name of the synonym map to delete"
    - id: "accessCondition"
      type: "com.azure.core.http.MatchConditions"
      description: "the condition where the operation will be performed if the ETag on the server matches or\n doesn't match specified values"
    - id: "requestOptions"
      type: "com.azure.search.models.RequestOptions"
      description: "additional parameters for the operation. Contains the tracking ID sent with the request to\n help with debugging"
    return:
      type: "reactor.core.publisher.Mono<com.azure.core.http.rest.Response<java.lang.Void>>"
      description: "a response signalling completion."
- uid: "com.azure.search.SearchServiceAsyncClient.deleteSynonymMapWithResponse(java.lang.String,com.azure.core.http.MatchConditions,com.azure.search.models.RequestOptions,com.azure.core.util.Context)"
  id: "deleteSynonymMapWithResponse(java.lang.String,com.azure.core.http.MatchConditions,com.azure.search.models.RequestOptions,com.azure.core.util.Context)"
  parent: "com.azure.search.SearchServiceAsyncClient"
  langs:
  - "java"
  name: "deleteSynonymMapWithResponse(String synonymMapName, MatchConditions accessCondition, RequestOptions requestOptions, Context context)"
  nameWithType: "SearchServiceAsyncClient.deleteSynonymMapWithResponse(String synonymMapName, MatchConditions accessCondition, RequestOptions requestOptions, Context context)"
  fullName: "com.azure.search.SearchServiceAsyncClient.deleteSynonymMapWithResponse(String synonymMapName, MatchConditions accessCondition, RequestOptions requestOptions, Context context)"
  overload: "com.azure.search.SearchServiceAsyncClient.deleteSynonymMapWithResponse*"
  type: "Method"
  package: "com.azure.search"
  syntax:
    content: " Mono<Response<Void>> deleteSynonymMapWithResponse(String synonymMapName, MatchConditions accessCondition, RequestOptions requestOptions, Context context)"
    parameters:
    - id: "synonymMapName"
      type: "java.lang.String"
    - id: "accessCondition"
      type: "com.azure.core.http.MatchConditions"
    - id: "requestOptions"
      type: "com.azure.search.models.RequestOptions"
    - id: "context"
      type: "com.azure.core.util.Context"
    return:
      type: "reactor.core.publisher.Mono<com.azure.core.http.rest.Response<java.lang.Void>>"
- uid: "com.azure.search.SearchServiceAsyncClient.getDataSource(java.lang.String)"
  id: "getDataSource(java.lang.String)"
  parent: "com.azure.search.SearchServiceAsyncClient"
  langs:
  - "java"
  name: "getDataSource(String dataSourceName)"
  nameWithType: "SearchServiceAsyncClient.getDataSource(String dataSourceName)"
  fullName: "com.azure.search.SearchServiceAsyncClient.getDataSource(String dataSourceName)"
  overload: "com.azure.search.SearchServiceAsyncClient.getDataSource*"
  type: "Method"
  package: "com.azure.search"
  summary: "Retrieves a DataSource from an Azure Cognitive Search service."
  syntax:
    content: "public Mono<DataSource> getDataSource(String dataSourceName)"
    parameters:
    - id: "dataSourceName"
      type: "java.lang.String"
      description: "the name of the data source to retrieve"
    return:
      type: "reactor.core.publisher.Mono<com.azure.search.models.DataSource>"
      description: "the DataSource."
- uid: "com.azure.search.SearchServiceAsyncClient.getDataSourceWithResponse(java.lang.String,com.azure.search.models.RequestOptions)"
  id: "getDataSourceWithResponse(java.lang.String,com.azure.search.models.RequestOptions)"
  parent: "com.azure.search.SearchServiceAsyncClient"
  langs:
  - "java"
  name: "getDataSourceWithResponse(String dataSourceName, RequestOptions requestOptions)"
  nameWithType: "SearchServiceAsyncClient.getDataSourceWithResponse(String dataSourceName, RequestOptions requestOptions)"
  fullName: "com.azure.search.SearchServiceAsyncClient.getDataSourceWithResponse(String dataSourceName, RequestOptions requestOptions)"
  overload: "com.azure.search.SearchServiceAsyncClient.getDataSourceWithResponse*"
  type: "Method"
  package: "com.azure.search"
  summary: "Retrieves a DataSource from an Azure Cognitive Search service."
  syntax:
    content: "public Mono<Response<DataSource>> getDataSourceWithResponse(String dataSourceName, RequestOptions requestOptions)"
    parameters:
    - id: "dataSourceName"
      type: "java.lang.String"
      description: "the name of the data source to retrieve"
    - id: "requestOptions"
      type: "com.azure.search.models.RequestOptions"
      description: "additional parameters for the operation. Contains the tracking ID sent with the request to\n help with debugging."
    return:
      type: "reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.search.models.DataSource>>"
      description: "a response containing the DataSource."
- uid: "com.azure.search.SearchServiceAsyncClient.getDataSourceWithResponse(java.lang.String,com.azure.search.models.RequestOptions,com.azure.core.util.Context)"
  id: "getDataSourceWithResponse(java.lang.String,com.azure.search.models.RequestOptions,com.azure.core.util.Context)"
  parent: "com.azure.search.SearchServiceAsyncClient"
  langs:
  - "java"
  name: "getDataSourceWithResponse(String dataSourceName, RequestOptions requestOptions, Context context)"
  nameWithType: "SearchServiceAsyncClient.getDataSourceWithResponse(String dataSourceName, RequestOptions requestOptions, Context context)"
  fullName: "com.azure.search.SearchServiceAsyncClient.getDataSourceWithResponse(String dataSourceName, RequestOptions requestOptions, Context context)"
  overload: "com.azure.search.SearchServiceAsyncClient.getDataSourceWithResponse*"
  type: "Method"
  package: "com.azure.search"
  syntax:
    content: " Mono<Response<DataSource>> getDataSourceWithResponse(String dataSourceName, RequestOptions requestOptions, Context context)"
    parameters:
    - id: "dataSourceName"
      type: "java.lang.String"
    - id: "requestOptions"
      type: "com.azure.search.models.RequestOptions"
    - id: "context"
      type: "com.azure.core.util.Context"
    return:
      type: "reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.search.models.DataSource>>"
- uid: "com.azure.search.SearchServiceAsyncClient.getEndpoint()"
  id: "getEndpoint()"
  parent: "com.azure.search.SearchServiceAsyncClient"
  langs:
  - "java"
  name: "getEndpoint()"
  nameWithType: "SearchServiceAsyncClient.getEndpoint()"
  fullName: "com.azure.search.SearchServiceAsyncClient.getEndpoint()"
  overload: "com.azure.search.SearchServiceAsyncClient.getEndpoint*"
  type: "Method"
  package: "com.azure.search"
  summary: "Gets the endpoint for the Azure Cognitive Search service."
  syntax:
    content: "public String getEndpoint()"
    return:
      type: "java.lang.String"
      description: "the endpoint value."
- uid: "com.azure.search.SearchServiceAsyncClient.getHttpPipeline()"
  id: "getHttpPipeline()"
  parent: "com.azure.search.SearchServiceAsyncClient"
  langs:
  - "java"
  name: "getHttpPipeline()"
  nameWithType: "SearchServiceAsyncClient.getHttpPipeline()"
  fullName: "com.azure.search.SearchServiceAsyncClient.getHttpPipeline()"
  overload: "com.azure.search.SearchServiceAsyncClient.getHttpPipeline*"
  type: "Method"
  package: "com.azure.search"
  summary: "Gets the <xref uid=\"\" data-throw-if-not-resolved=\"false\">HttpPipeline</xref> powering this client."
  syntax:
    content: " HttpPipeline getHttpPipeline()"
    return:
      type: "com.azure.core.http.HttpPipeline"
      description: "the pipeline."
- uid: "com.azure.search.SearchServiceAsyncClient.getIndex(java.lang.String)"
  id: "getIndex(java.lang.String)"
  parent: "com.azure.search.SearchServiceAsyncClient"
  langs:
  - "java"
  name: "getIndex(String indexName)"
  nameWithType: "SearchServiceAsyncClient.getIndex(String indexName)"
  fullName: "com.azure.search.SearchServiceAsyncClient.getIndex(String indexName)"
  overload: "com.azure.search.SearchServiceAsyncClient.getIndex*"
  type: "Method"
  package: "com.azure.search"
  summary: "Retrieves an index definition from the Azure Cognitive Search."
  syntax:
    content: "public Mono<Index> getIndex(String indexName)"
    parameters:
    - id: "indexName"
      type: "java.lang.String"
      description: "The name of the index to retrieve"
    return:
      type: "reactor.core.publisher.Mono<com.azure.search.models.Index>"
      description: "the Index."
- uid: "com.azure.search.SearchServiceAsyncClient.getIndexClient(java.lang.String)"
  id: "getIndexClient(java.lang.String)"
  parent: "com.azure.search.SearchServiceAsyncClient"
  langs:
  - "java"
  name: "getIndexClient(String indexName)"
  nameWithType: "SearchServiceAsyncClient.getIndexClient(String indexName)"
  fullName: "com.azure.search.SearchServiceAsyncClient.getIndexClient(String indexName)"
  overload: "com.azure.search.SearchServiceAsyncClient.getIndexClient*"
  type: "Method"
  package: "com.azure.search"
  summary: "Initializes a new <xref uid=\"com.azure.search.SearchIndexAsyncClient\" data-throw-if-not-resolved=\"false\">SearchIndexAsyncClient</xref> using the given Index name and the same configuration as the SearchServiceAsyncClient."
  syntax:
    content: "public SearchIndexAsyncClient getIndexClient(String indexName)"
    parameters:
    - id: "indexName"
      type: "java.lang.String"
      description: "the name of the Index for the client"
    return:
      type: "com.azure.search.SearchIndexAsyncClient"
      description: "a <xref uid=\"com.azure.search.SearchIndexAsyncClient\" data-throw-if-not-resolved=\"false\">SearchIndexAsyncClient</xref> created from the service client configuration"
- uid: "com.azure.search.SearchServiceAsyncClient.getIndexStatistics(java.lang.String)"
  id: "getIndexStatistics(java.lang.String)"
  parent: "com.azure.search.SearchServiceAsyncClient"
  langs:
  - "java"
  name: "getIndexStatistics(String indexName)"
  nameWithType: "SearchServiceAsyncClient.getIndexStatistics(String indexName)"
  fullName: "com.azure.search.SearchServiceAsyncClient.getIndexStatistics(String indexName)"
  overload: "com.azure.search.SearchServiceAsyncClient.getIndexStatistics*"
  type: "Method"
  package: "com.azure.search"
  summary: "Returns statistics for the given index, including a document count and storage usage."
  syntax:
    content: "public Mono<GetIndexStatisticsResult> getIndexStatistics(String indexName)"
    parameters:
    - id: "indexName"
      type: "java.lang.String"
      description: "the name of the index for which to retrieve statistics"
    return:
      type: "reactor.core.publisher.Mono<com.azure.search.models.GetIndexStatisticsResult>"
      description: "the index statistics result."
- uid: "com.azure.search.SearchServiceAsyncClient.getIndexStatisticsWithResponse(java.lang.String,com.azure.search.models.RequestOptions)"
  id: "getIndexStatisticsWithResponse(java.lang.String,com.azure.search.models.RequestOptions)"
  parent: "com.azure.search.SearchServiceAsyncClient"
  langs:
  - "java"
  name: "getIndexStatisticsWithResponse(String indexName, RequestOptions requestOptions)"
  nameWithType: "SearchServiceAsyncClient.getIndexStatisticsWithResponse(String indexName, RequestOptions requestOptions)"
  fullName: "com.azure.search.SearchServiceAsyncClient.getIndexStatisticsWithResponse(String indexName, RequestOptions requestOptions)"
  overload: "com.azure.search.SearchServiceAsyncClient.getIndexStatisticsWithResponse*"
  type: "Method"
  package: "com.azure.search"
  summary: "Returns statistics for the given index, including a document count and storage usage."
  syntax:
    content: "public Mono<Response<GetIndexStatisticsResult>> getIndexStatisticsWithResponse(String indexName, RequestOptions requestOptions)"
    parameters:
    - id: "indexName"
      type: "java.lang.String"
      description: "the name of the index for which to retrieve statistics"
    - id: "requestOptions"
      type: "com.azure.search.models.RequestOptions"
      description: "additional parameters for the operation. Contains the tracking ID sent with the request to\n help with debugging"
    return:
      type: "reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.search.models.GetIndexStatisticsResult>>"
      description: "a response containing the index statistics result."
- uid: "com.azure.search.SearchServiceAsyncClient.getIndexStatisticsWithResponse(java.lang.String,com.azure.search.models.RequestOptions,com.azure.core.util.Context)"
  id: "getIndexStatisticsWithResponse(java.lang.String,com.azure.search.models.RequestOptions,com.azure.core.util.Context)"
  parent: "com.azure.search.SearchServiceAsyncClient"
  langs:
  - "java"
  name: "getIndexStatisticsWithResponse(String indexName, RequestOptions requestOptions, Context context)"
  nameWithType: "SearchServiceAsyncClient.getIndexStatisticsWithResponse(String indexName, RequestOptions requestOptions, Context context)"
  fullName: "com.azure.search.SearchServiceAsyncClient.getIndexStatisticsWithResponse(String indexName, RequestOptions requestOptions, Context context)"
  overload: "com.azure.search.SearchServiceAsyncClient.getIndexStatisticsWithResponse*"
  type: "Method"
  package: "com.azure.search"
  syntax:
    content: " Mono<Response<GetIndexStatisticsResult>> getIndexStatisticsWithResponse(String indexName, RequestOptions requestOptions, Context context)"
    parameters:
    - id: "indexName"
      type: "java.lang.String"
    - id: "requestOptions"
      type: "com.azure.search.models.RequestOptions"
    - id: "context"
      type: "com.azure.core.util.Context"
    return:
      type: "reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.search.models.GetIndexStatisticsResult>>"
- uid: "com.azure.search.SearchServiceAsyncClient.getIndexWithResponse(java.lang.String,com.azure.search.models.RequestOptions)"
  id: "getIndexWithResponse(java.lang.String,com.azure.search.models.RequestOptions)"
  parent: "com.azure.search.SearchServiceAsyncClient"
  langs:
  - "java"
  name: "getIndexWithResponse(String indexName, RequestOptions requestOptions)"
  nameWithType: "SearchServiceAsyncClient.getIndexWithResponse(String indexName, RequestOptions requestOptions)"
  fullName: "com.azure.search.SearchServiceAsyncClient.getIndexWithResponse(String indexName, RequestOptions requestOptions)"
  overload: "com.azure.search.SearchServiceAsyncClient.getIndexWithResponse*"
  type: "Method"
  package: "com.azure.search"
  summary: "Retrieves an index definition from the Azure Cognitive Search."
  syntax:
    content: "public Mono<Response<Index>> getIndexWithResponse(String indexName, RequestOptions requestOptions)"
    parameters:
    - id: "indexName"
      type: "java.lang.String"
      description: "the name of the index to retrieve"
    - id: "requestOptions"
      type: "com.azure.search.models.RequestOptions"
      description: "additional parameters for the operation. Contains the tracking ID sent with the request to\n help with debugging"
    return:
      type: "reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.search.models.Index>>"
      description: "a response containing the Index."
- uid: "com.azure.search.SearchServiceAsyncClient.getIndexWithResponse(java.lang.String,com.azure.search.models.RequestOptions,com.azure.core.util.Context)"
  id: "getIndexWithResponse(java.lang.String,com.azure.search.models.RequestOptions,com.azure.core.util.Context)"
  parent: "com.azure.search.SearchServiceAsyncClient"
  langs:
  - "java"
  name: "getIndexWithResponse(String indexName, RequestOptions requestOptions, Context context)"
  nameWithType: "SearchServiceAsyncClient.getIndexWithResponse(String indexName, RequestOptions requestOptions, Context context)"
  fullName: "com.azure.search.SearchServiceAsyncClient.getIndexWithResponse(String indexName, RequestOptions requestOptions, Context context)"
  overload: "com.azure.search.SearchServiceAsyncClient.getIndexWithResponse*"
  type: "Method"
  package: "com.azure.search"
  syntax:
    content: " Mono<Response<Index>> getIndexWithResponse(String indexName, RequestOptions requestOptions, Context context)"
    parameters:
    - id: "indexName"
      type: "java.lang.String"
    - id: "requestOptions"
      type: "com.azure.search.models.RequestOptions"
    - id: "context"
      type: "com.azure.core.util.Context"
    return:
      type: "reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.search.models.Index>>"
- uid: "com.azure.search.SearchServiceAsyncClient.getIndexer(java.lang.String)"
  id: "getIndexer(java.lang.String)"
  parent: "com.azure.search.SearchServiceAsyncClient"
  langs:
  - "java"
  name: "getIndexer(String indexerName)"
  nameWithType: "SearchServiceAsyncClient.getIndexer(String indexerName)"
  fullName: "com.azure.search.SearchServiceAsyncClient.getIndexer(String indexerName)"
  overload: "com.azure.search.SearchServiceAsyncClient.getIndexer*"
  type: "Method"
  package: "com.azure.search"
  summary: "Retrieves an indexer definition."
  syntax:
    content: "public Mono<Indexer> getIndexer(String indexerName)"
    parameters:
    - id: "indexerName"
      type: "java.lang.String"
      description: "the name of the indexer to retrieve"
    return:
      type: "reactor.core.publisher.Mono<com.azure.search.models.Indexer>"
      description: "the indexer."
- uid: "com.azure.search.SearchServiceAsyncClient.getIndexerStatus(java.lang.String)"
  id: "getIndexerStatus(java.lang.String)"
  parent: "com.azure.search.SearchServiceAsyncClient"
  langs:
  - "java"
  name: "getIndexerStatus(String indexerName)"
  nameWithType: "SearchServiceAsyncClient.getIndexerStatus(String indexerName)"
  fullName: "com.azure.search.SearchServiceAsyncClient.getIndexerStatus(String indexerName)"
  overload: "com.azure.search.SearchServiceAsyncClient.getIndexerStatus*"
  type: "Method"
  package: "com.azure.search"
  summary: "Returns the current status and execution history of an indexer."
  syntax:
    content: "public Mono<IndexerExecutionInfo> getIndexerStatus(String indexerName)"
    parameters:
    - id: "indexerName"
      type: "java.lang.String"
      description: "the name of the indexer for which to retrieve status"
    return:
      type: "reactor.core.publisher.Mono<com.azure.search.models.IndexerExecutionInfo>"
      description: "the indexer execution info."
- uid: "com.azure.search.SearchServiceAsyncClient.getIndexerStatusWithResponse(java.lang.String,com.azure.search.models.RequestOptions)"
  id: "getIndexerStatusWithResponse(java.lang.String,com.azure.search.models.RequestOptions)"
  parent: "com.azure.search.SearchServiceAsyncClient"
  langs:
  - "java"
  name: "getIndexerStatusWithResponse(String indexerName, RequestOptions requestOptions)"
  nameWithType: "SearchServiceAsyncClient.getIndexerStatusWithResponse(String indexerName, RequestOptions requestOptions)"
  fullName: "com.azure.search.SearchServiceAsyncClient.getIndexerStatusWithResponse(String indexerName, RequestOptions requestOptions)"
  overload: "com.azure.search.SearchServiceAsyncClient.getIndexerStatusWithResponse*"
  type: "Method"
  package: "com.azure.search"
  summary: "Returns the current status and execution history of an indexer."
  syntax:
    content: "public Mono<Response<IndexerExecutionInfo>> getIndexerStatusWithResponse(String indexerName, RequestOptions requestOptions)"
    parameters:
    - id: "indexerName"
      type: "java.lang.String"
      description: "the name of the indexer for which to retrieve status"
    - id: "requestOptions"
      type: "com.azure.search.models.RequestOptions"
      description: "additional parameters for the operation. Contains the tracking ID sent with the request to\n help with debugging"
    return:
      type: "reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.search.models.IndexerExecutionInfo>>"
      description: "a response with the indexer execution info."
- uid: "com.azure.search.SearchServiceAsyncClient.getIndexerStatusWithResponse(java.lang.String,com.azure.search.models.RequestOptions,com.azure.core.util.Context)"
  id: "getIndexerStatusWithResponse(java.lang.String,com.azure.search.models.RequestOptions,com.azure.core.util.Context)"
  parent: "com.azure.search.SearchServiceAsyncClient"
  langs:
  - "java"
  name: "getIndexerStatusWithResponse(String indexerName, RequestOptions requestOptions, Context context)"
  nameWithType: "SearchServiceAsyncClient.getIndexerStatusWithResponse(String indexerName, RequestOptions requestOptions, Context context)"
  fullName: "com.azure.search.SearchServiceAsyncClient.getIndexerStatusWithResponse(String indexerName, RequestOptions requestOptions, Context context)"
  overload: "com.azure.search.SearchServiceAsyncClient.getIndexerStatusWithResponse*"
  type: "Method"
  package: "com.azure.search"
  syntax:
    content: " Mono<Response<IndexerExecutionInfo>> getIndexerStatusWithResponse(String indexerName, RequestOptions requestOptions, Context context)"
    parameters:
    - id: "indexerName"
      type: "java.lang.String"
    - id: "requestOptions"
      type: "com.azure.search.models.RequestOptions"
    - id: "context"
      type: "com.azure.core.util.Context"
    return:
      type: "reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.search.models.IndexerExecutionInfo>>"
- uid: "com.azure.search.SearchServiceAsyncClient.getIndexerWithResponse(java.lang.String,com.azure.search.models.RequestOptions)"
  id: "getIndexerWithResponse(java.lang.String,com.azure.search.models.RequestOptions)"
  parent: "com.azure.search.SearchServiceAsyncClient"
  langs:
  - "java"
  name: "getIndexerWithResponse(String indexerName, RequestOptions requestOptions)"
  nameWithType: "SearchServiceAsyncClient.getIndexerWithResponse(String indexerName, RequestOptions requestOptions)"
  fullName: "com.azure.search.SearchServiceAsyncClient.getIndexerWithResponse(String indexerName, RequestOptions requestOptions)"
  overload: "com.azure.search.SearchServiceAsyncClient.getIndexerWithResponse*"
  type: "Method"
  package: "com.azure.search"
  summary: "Retrieves an indexer definition."
  syntax:
    content: "public Mono<Response<Indexer>> getIndexerWithResponse(String indexerName, RequestOptions requestOptions)"
    parameters:
    - id: "indexerName"
      type: "java.lang.String"
      description: "the name of the indexer to retrieve"
    - id: "requestOptions"
      type: "com.azure.search.models.RequestOptions"
      description: "additional parameters for the operation. Contains the tracking ID sent with the request to\n help with debugging"
    return:
      type: "reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.search.models.Indexer>>"
      description: "a response containing the indexer."
- uid: "com.azure.search.SearchServiceAsyncClient.getIndexerWithResponse(java.lang.String,com.azure.search.models.RequestOptions,com.azure.core.util.Context)"
  id: "getIndexerWithResponse(java.lang.String,com.azure.search.models.RequestOptions,com.azure.core.util.Context)"
  parent: "com.azure.search.SearchServiceAsyncClient"
  langs:
  - "java"
  name: "getIndexerWithResponse(String indexerName, RequestOptions requestOptions, Context context)"
  nameWithType: "SearchServiceAsyncClient.getIndexerWithResponse(String indexerName, RequestOptions requestOptions, Context context)"
  fullName: "com.azure.search.SearchServiceAsyncClient.getIndexerWithResponse(String indexerName, RequestOptions requestOptions, Context context)"
  overload: "com.azure.search.SearchServiceAsyncClient.getIndexerWithResponse*"
  type: "Method"
  package: "com.azure.search"
  syntax:
    content: " Mono<Response<Indexer>> getIndexerWithResponse(String indexerName, RequestOptions requestOptions, Context context)"
    parameters:
    - id: "indexerName"
      type: "java.lang.String"
    - id: "requestOptions"
      type: "com.azure.search.models.RequestOptions"
    - id: "context"
      type: "com.azure.core.util.Context"
    return:
      type: "reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.search.models.Indexer>>"
- uid: "com.azure.search.SearchServiceAsyncClient.getServiceStatistics()"
  id: "getServiceStatistics()"
  parent: "com.azure.search.SearchServiceAsyncClient"
  langs:
  - "java"
  name: "getServiceStatistics()"
  nameWithType: "SearchServiceAsyncClient.getServiceStatistics()"
  fullName: "com.azure.search.SearchServiceAsyncClient.getServiceStatistics()"
  overload: "com.azure.search.SearchServiceAsyncClient.getServiceStatistics*"
  type: "Method"
  package: "com.azure.search"
  summary: "Returns service level statistics for a search service, including service counters and limits.\n\nContains the tracking ID sent with the request to help with debugging"
  syntax:
    content: "public Mono<ServiceStatistics> getServiceStatistics()"
    return:
      type: "reactor.core.publisher.Mono<com.azure.search.models.ServiceStatistics>"
      description: "the search service statistics result."
- uid: "com.azure.search.SearchServiceAsyncClient.getServiceStatisticsWithResponse(com.azure.search.models.RequestOptions)"
  id: "getServiceStatisticsWithResponse(com.azure.search.models.RequestOptions)"
  parent: "com.azure.search.SearchServiceAsyncClient"
  langs:
  - "java"
  name: "getServiceStatisticsWithResponse(RequestOptions requestOptions)"
  nameWithType: "SearchServiceAsyncClient.getServiceStatisticsWithResponse(RequestOptions requestOptions)"
  fullName: "com.azure.search.SearchServiceAsyncClient.getServiceStatisticsWithResponse(RequestOptions requestOptions)"
  overload: "com.azure.search.SearchServiceAsyncClient.getServiceStatisticsWithResponse*"
  type: "Method"
  package: "com.azure.search"
  summary: "Returns service level statistics for a search service, including service counters and limits."
  syntax:
    content: "public Mono<Response<ServiceStatistics>> getServiceStatisticsWithResponse(RequestOptions requestOptions)"
    parameters:
    - id: "requestOptions"
      type: "com.azure.search.models.RequestOptions"
      description: "additional parameters for the operation. Contains the tracking ID sent with the request to\n help with debugging"
    return:
      type: "reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.search.models.ServiceStatistics>>"
      description: "the search service statistics result."
- uid: "com.azure.search.SearchServiceAsyncClient.getServiceStatisticsWithResponse(com.azure.search.models.RequestOptions,com.azure.core.util.Context)"
  id: "getServiceStatisticsWithResponse(com.azure.search.models.RequestOptions,com.azure.core.util.Context)"
  parent: "com.azure.search.SearchServiceAsyncClient"
  langs:
  - "java"
  name: "getServiceStatisticsWithResponse(RequestOptions requestOptions, Context context)"
  nameWithType: "SearchServiceAsyncClient.getServiceStatisticsWithResponse(RequestOptions requestOptions, Context context)"
  fullName: "com.azure.search.SearchServiceAsyncClient.getServiceStatisticsWithResponse(RequestOptions requestOptions, Context context)"
  overload: "com.azure.search.SearchServiceAsyncClient.getServiceStatisticsWithResponse*"
  type: "Method"
  package: "com.azure.search"
  syntax:
    content: " Mono<Response<ServiceStatistics>> getServiceStatisticsWithResponse(RequestOptions requestOptions, Context context)"
    parameters:
    - id: "requestOptions"
      type: "com.azure.search.models.RequestOptions"
    - id: "context"
      type: "com.azure.core.util.Context"
    return:
      type: "reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.search.models.ServiceStatistics>>"
- uid: "com.azure.search.SearchServiceAsyncClient.getServiceVersion()"
  id: "getServiceVersion()"
  parent: "com.azure.search.SearchServiceAsyncClient"
  langs:
  - "java"
  name: "getServiceVersion()"
  nameWithType: "SearchServiceAsyncClient.getServiceVersion()"
  fullName: "com.azure.search.SearchServiceAsyncClient.getServiceVersion()"
  overload: "com.azure.search.SearchServiceAsyncClient.getServiceVersion*"
  type: "Method"
  package: "com.azure.search"
  summary: "Gets search service version."
  syntax:
    content: "public SearchServiceVersion getServiceVersion()"
    return:
      type: "com.azure.search.SearchServiceVersion"
      description: "the search service version value."
- uid: "com.azure.search.SearchServiceAsyncClient.getSkillset(java.lang.String)"
  id: "getSkillset(java.lang.String)"
  parent: "com.azure.search.SearchServiceAsyncClient"
  langs:
  - "java"
  name: "getSkillset(String skillsetName)"
  nameWithType: "SearchServiceAsyncClient.getSkillset(String skillsetName)"
  fullName: "com.azure.search.SearchServiceAsyncClient.getSkillset(String skillsetName)"
  overload: "com.azure.search.SearchServiceAsyncClient.getSkillset*"
  type: "Method"
  package: "com.azure.search"
  summary: "Retrieves a skillset definition."
  syntax:
    content: "public Mono<Skillset> getSkillset(String skillsetName)"
    parameters:
    - id: "skillsetName"
      type: "java.lang.String"
      description: "the name of the skillset to retrieve"
    return:
      type: "reactor.core.publisher.Mono<com.azure.search.models.Skillset>"
      description: "the Skillset."
- uid: "com.azure.search.SearchServiceAsyncClient.getSkillsetWithResponse(java.lang.String,com.azure.search.models.RequestOptions)"
  id: "getSkillsetWithResponse(java.lang.String,com.azure.search.models.RequestOptions)"
  parent: "com.azure.search.SearchServiceAsyncClient"
  langs:
  - "java"
  name: "getSkillsetWithResponse(String skillsetName, RequestOptions requestOptions)"
  nameWithType: "SearchServiceAsyncClient.getSkillsetWithResponse(String skillsetName, RequestOptions requestOptions)"
  fullName: "com.azure.search.SearchServiceAsyncClient.getSkillsetWithResponse(String skillsetName, RequestOptions requestOptions)"
  overload: "com.azure.search.SearchServiceAsyncClient.getSkillsetWithResponse*"
  type: "Method"
  package: "com.azure.search"
  summary: "Retrieves a skillset definition."
  syntax:
    content: "public Mono<Response<Skillset>> getSkillsetWithResponse(String skillsetName, RequestOptions requestOptions)"
    parameters:
    - id: "skillsetName"
      type: "java.lang.String"
      description: "the name of the skillset to retrieve"
    - id: "requestOptions"
      type: "com.azure.search.models.RequestOptions"
      description: "additional parameters for the operation. Contains the tracking ID sent with the request to\n help with debugging"
    return:
      type: "reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.search.models.Skillset>>"
      description: "a response containing the Skillset."
- uid: "com.azure.search.SearchServiceAsyncClient.getSkillsetWithResponse(java.lang.String,com.azure.search.models.RequestOptions,com.azure.core.util.Context)"
  id: "getSkillsetWithResponse(java.lang.String,com.azure.search.models.RequestOptions,com.azure.core.util.Context)"
  parent: "com.azure.search.SearchServiceAsyncClient"
  langs:
  - "java"
  name: "getSkillsetWithResponse(String skillsetName, RequestOptions requestOptions, Context context)"
  nameWithType: "SearchServiceAsyncClient.getSkillsetWithResponse(String skillsetName, RequestOptions requestOptions, Context context)"
  fullName: "com.azure.search.SearchServiceAsyncClient.getSkillsetWithResponse(String skillsetName, RequestOptions requestOptions, Context context)"
  overload: "com.azure.search.SearchServiceAsyncClient.getSkillsetWithResponse*"
  type: "Method"
  package: "com.azure.search"
  syntax:
    content: " Mono<Response<Skillset>> getSkillsetWithResponse(String skillsetName, RequestOptions requestOptions, Context context)"
    parameters:
    - id: "skillsetName"
      type: "java.lang.String"
    - id: "requestOptions"
      type: "com.azure.search.models.RequestOptions"
    - id: "context"
      type: "com.azure.core.util.Context"
    return:
      type: "reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.search.models.Skillset>>"
- uid: "com.azure.search.SearchServiceAsyncClient.getSynonymMap(java.lang.String)"
  id: "getSynonymMap(java.lang.String)"
  parent: "com.azure.search.SearchServiceAsyncClient"
  langs:
  - "java"
  name: "getSynonymMap(String synonymMapName)"
  nameWithType: "SearchServiceAsyncClient.getSynonymMap(String synonymMapName)"
  fullName: "com.azure.search.SearchServiceAsyncClient.getSynonymMap(String synonymMapName)"
  overload: "com.azure.search.SearchServiceAsyncClient.getSynonymMap*"
  type: "Method"
  package: "com.azure.search"
  summary: "Retrieves a synonym map definition."
  syntax:
    content: "public Mono<SynonymMap> getSynonymMap(String synonymMapName)"
    parameters:
    - id: "synonymMapName"
      type: "java.lang.String"
      description: "name of the synonym map to retrieve"
    return:
      type: "reactor.core.publisher.Mono<com.azure.search.models.SynonymMap>"
      description: "the <xref uid=\"com.azure.search.models.SynonymMap\" data-throw-if-not-resolved=\"false\">SynonymMap</xref> definition"
- uid: "com.azure.search.SearchServiceAsyncClient.getSynonymMapWithResponse(java.lang.String,com.azure.search.models.RequestOptions)"
  id: "getSynonymMapWithResponse(java.lang.String,com.azure.search.models.RequestOptions)"
  parent: "com.azure.search.SearchServiceAsyncClient"
  langs:
  - "java"
  name: "getSynonymMapWithResponse(String synonymMapName, RequestOptions requestOptions)"
  nameWithType: "SearchServiceAsyncClient.getSynonymMapWithResponse(String synonymMapName, RequestOptions requestOptions)"
  fullName: "com.azure.search.SearchServiceAsyncClient.getSynonymMapWithResponse(String synonymMapName, RequestOptions requestOptions)"
  overload: "com.azure.search.SearchServiceAsyncClient.getSynonymMapWithResponse*"
  type: "Method"
  package: "com.azure.search"
  summary: "Retrieves a synonym map definition."
  syntax:
    content: "public Mono<Response<SynonymMap>> getSynonymMapWithResponse(String synonymMapName, RequestOptions requestOptions)"
    parameters:
    - id: "synonymMapName"
      type: "java.lang.String"
      description: "name of the synonym map to retrieve"
    - id: "requestOptions"
      type: "com.azure.search.models.RequestOptions"
      description: "additional parameters for the operation. Contains the tracking ID sent with the request to\n help with debugging"
    return:
      type: "reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.search.models.SynonymMap>>"
      description: "a response containing the SynonymMap."
- uid: "com.azure.search.SearchServiceAsyncClient.getSynonymMapWithResponse(java.lang.String,com.azure.search.models.RequestOptions,com.azure.core.util.Context)"
  id: "getSynonymMapWithResponse(java.lang.String,com.azure.search.models.RequestOptions,com.azure.core.util.Context)"
  parent: "com.azure.search.SearchServiceAsyncClient"
  langs:
  - "java"
  name: "getSynonymMapWithResponse(String synonymMapName, RequestOptions requestOptions, Context context)"
  nameWithType: "SearchServiceAsyncClient.getSynonymMapWithResponse(String synonymMapName, RequestOptions requestOptions, Context context)"
  fullName: "com.azure.search.SearchServiceAsyncClient.getSynonymMapWithResponse(String synonymMapName, RequestOptions requestOptions, Context context)"
  overload: "com.azure.search.SearchServiceAsyncClient.getSynonymMapWithResponse*"
  type: "Method"
  package: "com.azure.search"
  syntax:
    content: " Mono<Response<SynonymMap>> getSynonymMapWithResponse(String synonymMapName, RequestOptions requestOptions, Context context)"
    parameters:
    - id: "synonymMapName"
      type: "java.lang.String"
    - id: "requestOptions"
      type: "com.azure.search.models.RequestOptions"
    - id: "context"
      type: "com.azure.core.util.Context"
    return:
      type: "reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.search.models.SynonymMap>>"
- uid: "com.azure.search.SearchServiceAsyncClient.listDataSources()"
  id: "listDataSources()"
  parent: "com.azure.search.SearchServiceAsyncClient"
  langs:
  - "java"
  name: "listDataSources()"
  nameWithType: "SearchServiceAsyncClient.listDataSources()"
  fullName: "com.azure.search.SearchServiceAsyncClient.listDataSources()"
  overload: "com.azure.search.SearchServiceAsyncClient.listDataSources*"
  type: "Method"
  package: "com.azure.search"
  summary: "List all DataSources from an Azure Cognitive Search service."
  syntax:
    content: "public PagedFlux<DataSource> listDataSources()"
    return:
      type: "com.azure.core.http.rest.PagedFlux<com.azure.search.models.DataSource>"
      description: "a list of DataSources"
- uid: "com.azure.search.SearchServiceAsyncClient.listDataSources(java.lang.String,com.azure.search.models.RequestOptions)"
  id: "listDataSources(java.lang.String,com.azure.search.models.RequestOptions)"
  parent: "com.azure.search.SearchServiceAsyncClient"
  langs:
  - "java"
  name: "listDataSources(String select, RequestOptions requestOptions)"
  nameWithType: "SearchServiceAsyncClient.listDataSources(String select, RequestOptions requestOptions)"
  fullName: "com.azure.search.SearchServiceAsyncClient.listDataSources(String select, RequestOptions requestOptions)"
  overload: "com.azure.search.SearchServiceAsyncClient.listDataSources*"
  type: "Method"
  package: "com.azure.search"
  summary: "List all DataSources from an Azure Cognitive Search service."
  syntax:
    content: "public PagedFlux<DataSource> listDataSources(String select, RequestOptions requestOptions)"
    parameters:
    - id: "select"
      type: "java.lang.String"
      description: "Selects which top-level properties of DataSource definitions to retrieve. Specified as a\n comma-separated list of JSON property names, or '*' for all properties. The default is all properties."
    - id: "requestOptions"
      type: "com.azure.search.models.RequestOptions"
      description: "Additional parameters for the operation. Contains the tracking ID sent with the request to\n help with debugging."
    return:
      type: "com.azure.core.http.rest.PagedFlux<com.azure.search.models.DataSource>"
      description: "a list of DataSources"
- uid: "com.azure.search.SearchServiceAsyncClient.listDataSources(java.lang.String,com.azure.search.models.RequestOptions,com.azure.core.util.Context)"
  id: "listDataSources(java.lang.String,com.azure.search.models.RequestOptions,com.azure.core.util.Context)"
  parent: "com.azure.search.SearchServiceAsyncClient"
  langs:
  - "java"
  name: "listDataSources(String select, RequestOptions requestOptions, Context context)"
  nameWithType: "SearchServiceAsyncClient.listDataSources(String select, RequestOptions requestOptions, Context context)"
  fullName: "com.azure.search.SearchServiceAsyncClient.listDataSources(String select, RequestOptions requestOptions, Context context)"
  overload: "com.azure.search.SearchServiceAsyncClient.listDataSources*"
  type: "Method"
  package: "com.azure.search"
  syntax:
    content: " PagedFlux<DataSource> listDataSources(String select, RequestOptions requestOptions, Context context)"
    parameters:
    - id: "select"
      type: "java.lang.String"
    - id: "requestOptions"
      type: "com.azure.search.models.RequestOptions"
    - id: "context"
      type: "com.azure.core.util.Context"
    return:
      type: "com.azure.core.http.rest.PagedFlux<com.azure.search.models.DataSource>"
- uid: "com.azure.search.SearchServiceAsyncClient.listIndexers()"
  id: "listIndexers()"
  parent: "com.azure.search.SearchServiceAsyncClient"
  langs:
  - "java"
  name: "listIndexers()"
  nameWithType: "SearchServiceAsyncClient.listIndexers()"
  fullName: "com.azure.search.SearchServiceAsyncClient.listIndexers()"
  overload: "com.azure.search.SearchServiceAsyncClient.listIndexers*"
  type: "Method"
  package: "com.azure.search"
  syntax:
    content: "public PagedFlux<Indexer> listIndexers()"
    return:
      type: "com.azure.core.http.rest.PagedFlux<com.azure.search.models.Indexer>"
      description: "all Indexers from the Search service."
- uid: "com.azure.search.SearchServiceAsyncClient.listIndexers(java.lang.String,com.azure.search.models.RequestOptions)"
  id: "listIndexers(java.lang.String,com.azure.search.models.RequestOptions)"
  parent: "com.azure.search.SearchServiceAsyncClient"
  langs:
  - "java"
  name: "listIndexers(String select, RequestOptions requestOptions)"
  nameWithType: "SearchServiceAsyncClient.listIndexers(String select, RequestOptions requestOptions)"
  fullName: "com.azure.search.SearchServiceAsyncClient.listIndexers(String select, RequestOptions requestOptions)"
  overload: "com.azure.search.SearchServiceAsyncClient.listIndexers*"
  type: "Method"
  package: "com.azure.search"
  summary: "Lists all indexers available for an Azure Cognitive Search service."
  syntax:
    content: "public PagedFlux<Indexer> listIndexers(String select, RequestOptions requestOptions)"
    parameters:
    - id: "select"
      type: "java.lang.String"
      description: "Selects which top-level properties of the indexers to retrieve. Specified as a comma-separated list\n of JSON property names, or '*' for all properties. The default is all properties."
    - id: "requestOptions"
      type: "com.azure.search.models.RequestOptions"
      description: "Additional parameters for the operation."
    return:
      type: "com.azure.core.http.rest.PagedFlux<com.azure.search.models.Indexer>"
      description: "a response containing all Indexers from the Search service."
- uid: "com.azure.search.SearchServiceAsyncClient.listIndexers(java.lang.String,com.azure.search.models.RequestOptions,com.azure.core.util.Context)"
  id: "listIndexers(java.lang.String,com.azure.search.models.RequestOptions,com.azure.core.util.Context)"
  parent: "com.azure.search.SearchServiceAsyncClient"
  langs:
  - "java"
  name: "listIndexers(String select, RequestOptions requestOptions, Context context)"
  nameWithType: "SearchServiceAsyncClient.listIndexers(String select, RequestOptions requestOptions, Context context)"
  fullName: "com.azure.search.SearchServiceAsyncClient.listIndexers(String select, RequestOptions requestOptions, Context context)"
  overload: "com.azure.search.SearchServiceAsyncClient.listIndexers*"
  type: "Method"
  package: "com.azure.search"
  syntax:
    content: " PagedFlux<Indexer> listIndexers(String select, RequestOptions requestOptions, Context context)"
    parameters:
    - id: "select"
      type: "java.lang.String"
    - id: "requestOptions"
      type: "com.azure.search.models.RequestOptions"
    - id: "context"
      type: "com.azure.core.util.Context"
    return:
      type: "com.azure.core.http.rest.PagedFlux<com.azure.search.models.Indexer>"
- uid: "com.azure.search.SearchServiceAsyncClient.listIndexes()"
  id: "listIndexes()"
  parent: "com.azure.search.SearchServiceAsyncClient"
  langs:
  - "java"
  name: "listIndexes()"
  nameWithType: "SearchServiceAsyncClient.listIndexes()"
  fullName: "com.azure.search.SearchServiceAsyncClient.listIndexes()"
  overload: "com.azure.search.SearchServiceAsyncClient.listIndexes*"
  type: "Method"
  package: "com.azure.search"
  summary: "Lists all indexes available for an Azure Cognitive Search service."
  syntax:
    content: "public PagedFlux<Index> listIndexes()"
    return:
      type: "com.azure.core.http.rest.PagedFlux<com.azure.search.models.Index>"
      description: "a reactive response emitting the list of indexes."
- uid: "com.azure.search.SearchServiceAsyncClient.listIndexes(java.lang.String,com.azure.search.models.RequestOptions)"
  id: "listIndexes(java.lang.String,com.azure.search.models.RequestOptions)"
  parent: "com.azure.search.SearchServiceAsyncClient"
  langs:
  - "java"
  name: "listIndexes(String select, RequestOptions requestOptions)"
  nameWithType: "SearchServiceAsyncClient.listIndexes(String select, RequestOptions requestOptions)"
  fullName: "com.azure.search.SearchServiceAsyncClient.listIndexes(String select, RequestOptions requestOptions)"
  overload: "com.azure.search.SearchServiceAsyncClient.listIndexes*"
  type: "Method"
  package: "com.azure.search"
  summary: "Lists all indexes available for an Azure Cognitive Search service."
  syntax:
    content: "public PagedFlux<Index> listIndexes(String select, RequestOptions requestOptions)"
    parameters:
    - id: "select"
      type: "java.lang.String"
      description: "selects which top-level properties of the index definitions to retrieve. Specified as a\n comma-separated list of JSON property names, or '*' for all properties. The default is all properties"
    - id: "requestOptions"
      type: "com.azure.search.models.RequestOptions"
      description: "additional parameters for the operation. Contains the tracking ID sent with the request to\n help with debugging"
    return:
      type: "com.azure.core.http.rest.PagedFlux<com.azure.search.models.Index>"
      description: "a reactive response emitting the list of indexes."
- uid: "com.azure.search.SearchServiceAsyncClient.listIndexes(java.lang.String,com.azure.search.models.RequestOptions,com.azure.core.util.Context)"
  id: "listIndexes(java.lang.String,com.azure.search.models.RequestOptions,com.azure.core.util.Context)"
  parent: "com.azure.search.SearchServiceAsyncClient"
  langs:
  - "java"
  name: "listIndexes(String select, RequestOptions requestOptions, Context context)"
  nameWithType: "SearchServiceAsyncClient.listIndexes(String select, RequestOptions requestOptions, Context context)"
  fullName: "com.azure.search.SearchServiceAsyncClient.listIndexes(String select, RequestOptions requestOptions, Context context)"
  overload: "com.azure.search.SearchServiceAsyncClient.listIndexes*"
  type: "Method"
  package: "com.azure.search"
  syntax:
    content: " PagedFlux<Index> listIndexes(String select, RequestOptions requestOptions, Context context)"
    parameters:
    - id: "select"
      type: "java.lang.String"
    - id: "requestOptions"
      type: "com.azure.search.models.RequestOptions"
    - id: "context"
      type: "com.azure.core.util.Context"
    return:
      type: "com.azure.core.http.rest.PagedFlux<com.azure.search.models.Index>"
- uid: "com.azure.search.SearchServiceAsyncClient.listSkillsets()"
  id: "listSkillsets()"
  parent: "com.azure.search.SearchServiceAsyncClient"
  langs:
  - "java"
  name: "listSkillsets()"
  nameWithType: "SearchServiceAsyncClient.listSkillsets()"
  fullName: "com.azure.search.SearchServiceAsyncClient.listSkillsets()"
  overload: "com.azure.search.SearchServiceAsyncClient.listSkillsets*"
  type: "Method"
  package: "com.azure.search"
  summary: "Lists all skillsets available for an Azure Cognitive Search service."
  syntax:
    content: "public PagedFlux<Skillset> listSkillsets()"
    return:
      type: "com.azure.core.http.rest.PagedFlux<com.azure.search.models.Skillset>"
      description: "a reactive response emitting the list of skillsets."
- uid: "com.azure.search.SearchServiceAsyncClient.listSkillsets(java.lang.String,com.azure.search.models.RequestOptions)"
  id: "listSkillsets(java.lang.String,com.azure.search.models.RequestOptions)"
  parent: "com.azure.search.SearchServiceAsyncClient"
  langs:
  - "java"
  name: "listSkillsets(String select, RequestOptions requestOptions)"
  nameWithType: "SearchServiceAsyncClient.listSkillsets(String select, RequestOptions requestOptions)"
  fullName: "com.azure.search.SearchServiceAsyncClient.listSkillsets(String select, RequestOptions requestOptions)"
  overload: "com.azure.search.SearchServiceAsyncClient.listSkillsets*"
  type: "Method"
  package: "com.azure.search"
  summary: "Lists all skillsets available for an Azure Cognitive Search service."
  syntax:
    content: "public PagedFlux<Skillset> listSkillsets(String select, RequestOptions requestOptions)"
    parameters:
    - id: "select"
      type: "java.lang.String"
      description: "selects which top-level properties of the skillset definitions to retrieve. Specified as a\n comma-separated list of JSON property names, or '*' for all properties. The default is all properties"
    - id: "requestOptions"
      type: "com.azure.search.models.RequestOptions"
      description: "additional parameters for the operation. Contains the tracking ID sent with the request to\n help with debugging"
    return:
      type: "com.azure.core.http.rest.PagedFlux<com.azure.search.models.Skillset>"
      description: "a reactive response emitting the list of skillsets."
- uid: "com.azure.search.SearchServiceAsyncClient.listSkillsets(java.lang.String,com.azure.search.models.RequestOptions,com.azure.core.util.Context)"
  id: "listSkillsets(java.lang.String,com.azure.search.models.RequestOptions,com.azure.core.util.Context)"
  parent: "com.azure.search.SearchServiceAsyncClient"
  langs:
  - "java"
  name: "listSkillsets(String select, RequestOptions requestOptions, Context context)"
  nameWithType: "SearchServiceAsyncClient.listSkillsets(String select, RequestOptions requestOptions, Context context)"
  fullName: "com.azure.search.SearchServiceAsyncClient.listSkillsets(String select, RequestOptions requestOptions, Context context)"
  overload: "com.azure.search.SearchServiceAsyncClient.listSkillsets*"
  type: "Method"
  package: "com.azure.search"
  syntax:
    content: " PagedFlux<Skillset> listSkillsets(String select, RequestOptions requestOptions, Context context)"
    parameters:
    - id: "select"
      type: "java.lang.String"
    - id: "requestOptions"
      type: "com.azure.search.models.RequestOptions"
    - id: "context"
      type: "com.azure.core.util.Context"
    return:
      type: "com.azure.core.http.rest.PagedFlux<com.azure.search.models.Skillset>"
- uid: "com.azure.search.SearchServiceAsyncClient.listSynonymMaps()"
  id: "listSynonymMaps()"
  parent: "com.azure.search.SearchServiceAsyncClient"
  langs:
  - "java"
  name: "listSynonymMaps()"
  nameWithType: "SearchServiceAsyncClient.listSynonymMaps()"
  fullName: "com.azure.search.SearchServiceAsyncClient.listSynonymMaps()"
  overload: "com.azure.search.SearchServiceAsyncClient.listSynonymMaps*"
  type: "Method"
  package: "com.azure.search"
  summary: "Lists all synonym maps available for an Azure Cognitive Search service."
  syntax:
    content: "public PagedFlux<SynonymMap> listSynonymMaps()"
    return:
      type: "com.azure.core.http.rest.PagedFlux<com.azure.search.models.SynonymMap>"
      description: "a reactive response emitting the list of synonym maps."
- uid: "com.azure.search.SearchServiceAsyncClient.listSynonymMaps(java.lang.String,com.azure.search.models.RequestOptions)"
  id: "listSynonymMaps(java.lang.String,com.azure.search.models.RequestOptions)"
  parent: "com.azure.search.SearchServiceAsyncClient"
  langs:
  - "java"
  name: "listSynonymMaps(String select, RequestOptions requestOptions)"
  nameWithType: "SearchServiceAsyncClient.listSynonymMaps(String select, RequestOptions requestOptions)"
  fullName: "com.azure.search.SearchServiceAsyncClient.listSynonymMaps(String select, RequestOptions requestOptions)"
  overload: "com.azure.search.SearchServiceAsyncClient.listSynonymMaps*"
  type: "Method"
  package: "com.azure.search"
  summary: "Lists all synonym maps available for an Azure Cognitive Search service."
  syntax:
    content: "public PagedFlux<SynonymMap> listSynonymMaps(String select, RequestOptions requestOptions)"
    parameters:
    - id: "select"
      type: "java.lang.String"
      description: "selects which top-level properties of the synonym maps to retrieve. Specified as a comma-separated\n list of JSON property names, or '*' for all properties. The default is all properties"
    - id: "requestOptions"
      type: "com.azure.search.models.RequestOptions"
      description: "additional parameters for the operation. Contains the tracking ID sent with the request to\n help with debugging"
    return:
      type: "com.azure.core.http.rest.PagedFlux<com.azure.search.models.SynonymMap>"
      description: "a reactive response emitting the list of synonym maps."
- uid: "com.azure.search.SearchServiceAsyncClient.listSynonymMaps(java.lang.String,com.azure.search.models.RequestOptions,com.azure.core.util.Context)"
  id: "listSynonymMaps(java.lang.String,com.azure.search.models.RequestOptions,com.azure.core.util.Context)"
  parent: "com.azure.search.SearchServiceAsyncClient"
  langs:
  - "java"
  name: "listSynonymMaps(String select, RequestOptions requestOptions, Context context)"
  nameWithType: "SearchServiceAsyncClient.listSynonymMaps(String select, RequestOptions requestOptions, Context context)"
  fullName: "com.azure.search.SearchServiceAsyncClient.listSynonymMaps(String select, RequestOptions requestOptions, Context context)"
  overload: "com.azure.search.SearchServiceAsyncClient.listSynonymMaps*"
  type: "Method"
  package: "com.azure.search"
  syntax:
    content: " PagedFlux<SynonymMap> listSynonymMaps(String select, RequestOptions requestOptions, Context context)"
    parameters:
    - id: "select"
      type: "java.lang.String"
    - id: "requestOptions"
      type: "com.azure.search.models.RequestOptions"
    - id: "context"
      type: "com.azure.core.util.Context"
    return:
      type: "com.azure.core.http.rest.PagedFlux<com.azure.search.models.SynonymMap>"
- uid: "com.azure.search.SearchServiceAsyncClient.resetIndexer(java.lang.String)"
  id: "resetIndexer(java.lang.String)"
  parent: "com.azure.search.SearchServiceAsyncClient"
  langs:
  - "java"
  name: "resetIndexer(String indexerName)"
  nameWithType: "SearchServiceAsyncClient.resetIndexer(String indexerName)"
  fullName: "com.azure.search.SearchServiceAsyncClient.resetIndexer(String indexerName)"
  overload: "com.azure.search.SearchServiceAsyncClient.resetIndexer*"
  type: "Method"
  package: "com.azure.search"
  summary: "Resets the change tracking state associated with an indexer."
  syntax:
    content: "public Mono<Void> resetIndexer(String indexerName)"
    parameters:
    - id: "indexerName"
      type: "java.lang.String"
      description: "the name of the indexer to reset"
    return:
      type: "reactor.core.publisher.Mono<java.lang.Void>"
      description: "a response signalling completion."
- uid: "com.azure.search.SearchServiceAsyncClient.resetIndexerWithResponse(java.lang.String,com.azure.search.models.RequestOptions)"
  id: "resetIndexerWithResponse(java.lang.String,com.azure.search.models.RequestOptions)"
  parent: "com.azure.search.SearchServiceAsyncClient"
  langs:
  - "java"
  name: "resetIndexerWithResponse(String indexerName, RequestOptions requestOptions)"
  nameWithType: "SearchServiceAsyncClient.resetIndexerWithResponse(String indexerName, RequestOptions requestOptions)"
  fullName: "com.azure.search.SearchServiceAsyncClient.resetIndexerWithResponse(String indexerName, RequestOptions requestOptions)"
  overload: "com.azure.search.SearchServiceAsyncClient.resetIndexerWithResponse*"
  type: "Method"
  package: "com.azure.search"
  summary: "Resets the change tracking state associated with an indexer."
  syntax:
    content: "public Mono<Response<Void>> resetIndexerWithResponse(String indexerName, RequestOptions requestOptions)"
    parameters:
    - id: "indexerName"
      type: "java.lang.String"
      description: "the name of the indexer to reset"
    - id: "requestOptions"
      type: "com.azure.search.models.RequestOptions"
      description: "additional parameters for the operation. Contains the tracking ID sent with the request to\n help with debugging"
    return:
      type: "reactor.core.publisher.Mono<com.azure.core.http.rest.Response<java.lang.Void>>"
      description: "a response signalling completion."
- uid: "com.azure.search.SearchServiceAsyncClient.resetIndexerWithResponse(java.lang.String,com.azure.search.models.RequestOptions,com.azure.core.util.Context)"
  id: "resetIndexerWithResponse(java.lang.String,com.azure.search.models.RequestOptions,com.azure.core.util.Context)"
  parent: "com.azure.search.SearchServiceAsyncClient"
  langs:
  - "java"
  name: "resetIndexerWithResponse(String indexerName, RequestOptions requestOptions, Context context)"
  nameWithType: "SearchServiceAsyncClient.resetIndexerWithResponse(String indexerName, RequestOptions requestOptions, Context context)"
  fullName: "com.azure.search.SearchServiceAsyncClient.resetIndexerWithResponse(String indexerName, RequestOptions requestOptions, Context context)"
  overload: "com.azure.search.SearchServiceAsyncClient.resetIndexerWithResponse*"
  type: "Method"
  package: "com.azure.search"
  syntax:
    content: " Mono<Response<Void>> resetIndexerWithResponse(String indexerName, RequestOptions requestOptions, Context context)"
    parameters:
    - id: "indexerName"
      type: "java.lang.String"
    - id: "requestOptions"
      type: "com.azure.search.models.RequestOptions"
    - id: "context"
      type: "com.azure.core.util.Context"
    return:
      type: "reactor.core.publisher.Mono<com.azure.core.http.rest.Response<java.lang.Void>>"
- uid: "com.azure.search.SearchServiceAsyncClient.runIndexer(java.lang.String)"
  id: "runIndexer(java.lang.String)"
  parent: "com.azure.search.SearchServiceAsyncClient"
  langs:
  - "java"
  name: "runIndexer(String indexerName)"
  nameWithType: "SearchServiceAsyncClient.runIndexer(String indexerName)"
  fullName: "com.azure.search.SearchServiceAsyncClient.runIndexer(String indexerName)"
  overload: "com.azure.search.SearchServiceAsyncClient.runIndexer*"
  type: "Method"
  package: "com.azure.search"
  summary: "Runs an indexer on-demand."
  syntax:
    content: "public Mono<Void> runIndexer(String indexerName)"
    parameters:
    - id: "indexerName"
      type: "java.lang.String"
      description: "the name of the indexer to run"
    return:
      type: "reactor.core.publisher.Mono<java.lang.Void>"
      description: "a response signalling completion."
- uid: "com.azure.search.SearchServiceAsyncClient.runIndexerWithResponse(java.lang.String,com.azure.search.models.RequestOptions)"
  id: "runIndexerWithResponse(java.lang.String,com.azure.search.models.RequestOptions)"
  parent: "com.azure.search.SearchServiceAsyncClient"
  langs:
  - "java"
  name: "runIndexerWithResponse(String indexerName, RequestOptions requestOptions)"
  nameWithType: "SearchServiceAsyncClient.runIndexerWithResponse(String indexerName, RequestOptions requestOptions)"
  fullName: "com.azure.search.SearchServiceAsyncClient.runIndexerWithResponse(String indexerName, RequestOptions requestOptions)"
  overload: "com.azure.search.SearchServiceAsyncClient.runIndexerWithResponse*"
  type: "Method"
  package: "com.azure.search"
  summary: "Runs an indexer on-demand."
  syntax:
    content: "public Mono<Response<Void>> runIndexerWithResponse(String indexerName, RequestOptions requestOptions)"
    parameters:
    - id: "indexerName"
      type: "java.lang.String"
      description: "the name of the indexer to run"
    - id: "requestOptions"
      type: "com.azure.search.models.RequestOptions"
      description: "additional parameters for the operation. Contains the tracking ID sent with the request to\n help with debugging"
    return:
      type: "reactor.core.publisher.Mono<com.azure.core.http.rest.Response<java.lang.Void>>"
      description: "a response signalling completion."
- uid: "com.azure.search.SearchServiceAsyncClient.runIndexerWithResponse(java.lang.String,com.azure.search.models.RequestOptions,com.azure.core.util.Context)"
  id: "runIndexerWithResponse(java.lang.String,com.azure.search.models.RequestOptions,com.azure.core.util.Context)"
  parent: "com.azure.search.SearchServiceAsyncClient"
  langs:
  - "java"
  name: "runIndexerWithResponse(String indexerName, RequestOptions requestOptions, Context context)"
  nameWithType: "SearchServiceAsyncClient.runIndexerWithResponse(String indexerName, RequestOptions requestOptions, Context context)"
  fullName: "com.azure.search.SearchServiceAsyncClient.runIndexerWithResponse(String indexerName, RequestOptions requestOptions, Context context)"
  overload: "com.azure.search.SearchServiceAsyncClient.runIndexerWithResponse*"
  type: "Method"
  package: "com.azure.search"
  syntax:
    content: " Mono<Response<Void>> runIndexerWithResponse(String indexerName, RequestOptions requestOptions, Context context)"
    parameters:
    - id: "indexerName"
      type: "java.lang.String"
    - id: "requestOptions"
      type: "com.azure.search.models.RequestOptions"
    - id: "context"
      type: "com.azure.core.util.Context"
    return:
      type: "reactor.core.publisher.Mono<com.azure.core.http.rest.Response<java.lang.Void>>"
references:
- uid: "java.lang.String"
  spec.java:
  - uid: "java.lang.String"
    name: "String"
    fullName: "java.lang.String"
- uid: "com.azure.search.SearchServiceVersion"
  name: "SearchServiceVersion"
  nameWithType: "SearchServiceVersion"
  fullName: "com.azure.search.SearchServiceVersion"
- uid: "com.azure.core.http.HttpPipeline"
  spec.java:
  - uid: "com.azure.core.http.HttpPipeline"
    name: "HttpPipeline"
    fullName: "com.azure.core.http.HttpPipeline"
- uid: "com.azure.search.SearchServiceAsyncClient.SearchServiceAsyncClient*"
  name: "SearchServiceAsyncClient"
  nameWithType: "SearchServiceAsyncClient.SearchServiceAsyncClient"
  fullName: "com.azure.search.SearchServiceAsyncClient.SearchServiceAsyncClient"
  package: "com.azure.search"
- uid: "com.azure.search.SearchServiceAsyncClient.getHttpPipeline*"
  name: "getHttpPipeline"
  nameWithType: "SearchServiceAsyncClient.getHttpPipeline"
  fullName: "com.azure.search.SearchServiceAsyncClient.getHttpPipeline"
  package: "com.azure.search"
- uid: "com.azure.search.SearchIndexAsyncClient"
  name: "SearchIndexAsyncClient"
  nameWithType: "SearchIndexAsyncClient"
  fullName: "com.azure.search.SearchIndexAsyncClient"
- uid: "com.azure.search.SearchServiceAsyncClient.getIndexClient*"
  name: "getIndexClient"
  nameWithType: "SearchServiceAsyncClient.getIndexClient"
  fullName: "com.azure.search.SearchServiceAsyncClient.getIndexClient"
  package: "com.azure.search"
- uid: "com.azure.search.SearchServiceAsyncClient.getServiceVersion*"
  name: "getServiceVersion"
  nameWithType: "SearchServiceAsyncClient.getServiceVersion"
  fullName: "com.azure.search.SearchServiceAsyncClient.getServiceVersion"
  package: "com.azure.search"
- uid: "com.azure.search.SearchServiceAsyncClient.getEndpoint*"
  name: "getEndpoint"
  nameWithType: "SearchServiceAsyncClient.getEndpoint"
  fullName: "com.azure.search.SearchServiceAsyncClient.getEndpoint"
  package: "com.azure.search"
- uid: "com.azure.search.models.DataSource"
  name: "DataSource"
  nameWithType: "DataSource"
  fullName: "com.azure.search.models.DataSource"
- uid: "reactor.core.publisher.Mono<com.azure.search.models.DataSource>"
  spec.java:
  - uid: "reactor.core.publisher.Mono"
    name: "Mono"
    fullName: "reactor.core.publisher.Mono"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.search.models.DataSource"
    name: "DataSource"
    fullName: "com.azure.search.models.DataSource"
  - name: ">"
    fullName: ">"
- uid: "com.azure.search.SearchServiceAsyncClient.createOrUpdateDataSource*"
  name: "createOrUpdateDataSource"
  nameWithType: "SearchServiceAsyncClient.createOrUpdateDataSource"
  fullName: "com.azure.search.SearchServiceAsyncClient.createOrUpdateDataSource"
  package: "com.azure.search"
- uid: "com.azure.core.http.MatchConditions"
  spec.java:
  - uid: "com.azure.core.http.MatchConditions"
    name: "MatchConditions"
    fullName: "com.azure.core.http.MatchConditions"
- uid: "com.azure.search.models.RequestOptions"
  name: "RequestOptions"
  nameWithType: "RequestOptions"
  fullName: "com.azure.search.models.RequestOptions"
- uid: "reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.search.models.DataSource>>"
  spec.java:
  - uid: "reactor.core.publisher.Mono"
    name: "Mono"
    fullName: "reactor.core.publisher.Mono"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.core.http.rest.Response"
    name: "Response"
    fullName: "com.azure.core.http.rest.Response"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.search.models.DataSource"
    name: "DataSource"
    fullName: "com.azure.search.models.DataSource"
  - name: ">"
    fullName: ">"
  - name: ">"
    fullName: ">"
- uid: "com.azure.search.SearchServiceAsyncClient.createOrUpdateDataSourceWithResponse*"
  name: "createOrUpdateDataSourceWithResponse"
  nameWithType: "SearchServiceAsyncClient.createOrUpdateDataSourceWithResponse"
  fullName: "com.azure.search.SearchServiceAsyncClient.createOrUpdateDataSourceWithResponse"
  package: "com.azure.search"
- uid: "com.azure.core.util.Context"
  spec.java:
  - uid: "com.azure.core.util.Context"
    name: "Context"
    fullName: "com.azure.core.util.Context"
- uid: "com.azure.search.SearchServiceAsyncClient.createDataSource*"
  name: "createDataSource"
  nameWithType: "SearchServiceAsyncClient.createDataSource"
  fullName: "com.azure.search.SearchServiceAsyncClient.createDataSource"
  package: "com.azure.search"
- uid: "com.azure.search.SearchServiceAsyncClient.createDataSourceWithResponse*"
  name: "createDataSourceWithResponse"
  nameWithType: "SearchServiceAsyncClient.createDataSourceWithResponse"
  fullName: "com.azure.search.SearchServiceAsyncClient.createDataSourceWithResponse"
  package: "com.azure.search"
- uid: "com.azure.search.SearchServiceAsyncClient.getDataSource*"
  name: "getDataSource"
  nameWithType: "SearchServiceAsyncClient.getDataSource"
  fullName: "com.azure.search.SearchServiceAsyncClient.getDataSource"
  package: "com.azure.search"
- uid: "com.azure.search.SearchServiceAsyncClient.getDataSourceWithResponse*"
  name: "getDataSourceWithResponse"
  nameWithType: "SearchServiceAsyncClient.getDataSourceWithResponse"
  fullName: "com.azure.search.SearchServiceAsyncClient.getDataSourceWithResponse"
  package: "com.azure.search"
- uid: "com.azure.core.http.rest.PagedFlux<com.azure.search.models.DataSource>"
  spec.java:
  - uid: "com.azure.core.http.rest.PagedFlux"
    name: "PagedFlux"
    fullName: "com.azure.core.http.rest.PagedFlux"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.search.models.DataSource"
    name: "DataSource"
    fullName: "com.azure.search.models.DataSource"
  - name: ">"
    fullName: ">"
- uid: "com.azure.search.SearchServiceAsyncClient.listDataSources*"
  name: "listDataSources"
  nameWithType: "SearchServiceAsyncClient.listDataSources"
  fullName: "com.azure.search.SearchServiceAsyncClient.listDataSources"
  package: "com.azure.search"
- uid: "reactor.core.publisher.Mono<java.lang.Void>"
  spec.java:
  - uid: "reactor.core.publisher.Mono"
    name: "Mono"
    fullName: "reactor.core.publisher.Mono"
  - name: "<"
    fullName: "<"
  - uid: "java.lang.Void"
    name: "Void"
    fullName: "java.lang.Void"
  - name: ">"
    fullName: ">"
- uid: "com.azure.search.SearchServiceAsyncClient.deleteDataSource*"
  name: "deleteDataSource"
  nameWithType: "SearchServiceAsyncClient.deleteDataSource"
  fullName: "com.azure.search.SearchServiceAsyncClient.deleteDataSource"
  package: "com.azure.search"
- uid: "reactor.core.publisher.Mono<com.azure.core.http.rest.Response<java.lang.Void>>"
  spec.java:
  - uid: "reactor.core.publisher.Mono"
    name: "Mono"
    fullName: "reactor.core.publisher.Mono"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.core.http.rest.Response"
    name: "Response"
    fullName: "com.azure.core.http.rest.Response"
  - name: "<"
    fullName: "<"
  - uid: "java.lang.Void"
    name: "Void"
    fullName: "java.lang.Void"
  - name: ">"
    fullName: ">"
  - name: ">"
    fullName: ">"
- uid: "com.azure.search.SearchServiceAsyncClient.deleteDataSourceWithResponse*"
  name: "deleteDataSourceWithResponse"
  nameWithType: "SearchServiceAsyncClient.deleteDataSourceWithResponse"
  fullName: "com.azure.search.SearchServiceAsyncClient.deleteDataSourceWithResponse"
  package: "com.azure.search"
- uid: "com.azure.search.models.Indexer"
  name: "Indexer"
  nameWithType: "Indexer"
  fullName: "com.azure.search.models.Indexer"
- uid: "reactor.core.publisher.Mono<com.azure.search.models.Indexer>"
  spec.java:
  - uid: "reactor.core.publisher.Mono"
    name: "Mono"
    fullName: "reactor.core.publisher.Mono"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.search.models.Indexer"
    name: "Indexer"
    fullName: "com.azure.search.models.Indexer"
  - name: ">"
    fullName: ">"
- uid: "com.azure.search.SearchServiceAsyncClient.createIndexer*"
  name: "createIndexer"
  nameWithType: "SearchServiceAsyncClient.createIndexer"
  fullName: "com.azure.search.SearchServiceAsyncClient.createIndexer"
  package: "com.azure.search"
- uid: "reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.search.models.Indexer>>"
  spec.java:
  - uid: "reactor.core.publisher.Mono"
    name: "Mono"
    fullName: "reactor.core.publisher.Mono"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.core.http.rest.Response"
    name: "Response"
    fullName: "com.azure.core.http.rest.Response"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.search.models.Indexer"
    name: "Indexer"
    fullName: "com.azure.search.models.Indexer"
  - name: ">"
    fullName: ">"
  - name: ">"
    fullName: ">"
- uid: "com.azure.search.SearchServiceAsyncClient.createIndexerWithResponse*"
  name: "createIndexerWithResponse"
  nameWithType: "SearchServiceAsyncClient.createIndexerWithResponse"
  fullName: "com.azure.search.SearchServiceAsyncClient.createIndexerWithResponse"
  package: "com.azure.search"
- uid: "com.azure.search.SearchServiceAsyncClient.createOrUpdateIndexer*"
  name: "createOrUpdateIndexer"
  nameWithType: "SearchServiceAsyncClient.createOrUpdateIndexer"
  fullName: "com.azure.search.SearchServiceAsyncClient.createOrUpdateIndexer"
  package: "com.azure.search"
- uid: "com.azure.search.SearchServiceAsyncClient.createOrUpdateIndexerWithResponse*"
  name: "createOrUpdateIndexerWithResponse"
  nameWithType: "SearchServiceAsyncClient.createOrUpdateIndexerWithResponse"
  fullName: "com.azure.search.SearchServiceAsyncClient.createOrUpdateIndexerWithResponse"
  package: "com.azure.search"
- uid: "com.azure.search.SearchServiceAsyncClient.getIndexer*"
  name: "getIndexer"
  nameWithType: "SearchServiceAsyncClient.getIndexer"
  fullName: "com.azure.search.SearchServiceAsyncClient.getIndexer"
  package: "com.azure.search"
- uid: "com.azure.search.SearchServiceAsyncClient.getIndexerWithResponse*"
  name: "getIndexerWithResponse"
  nameWithType: "SearchServiceAsyncClient.getIndexerWithResponse"
  fullName: "com.azure.search.SearchServiceAsyncClient.getIndexerWithResponse"
  package: "com.azure.search"
- uid: "com.azure.core.http.rest.PagedFlux<com.azure.search.models.Indexer>"
  spec.java:
  - uid: "com.azure.core.http.rest.PagedFlux"
    name: "PagedFlux"
    fullName: "com.azure.core.http.rest.PagedFlux"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.search.models.Indexer"
    name: "Indexer"
    fullName: "com.azure.search.models.Indexer"
  - name: ">"
    fullName: ">"
- uid: "com.azure.search.SearchServiceAsyncClient.listIndexers*"
  name: "listIndexers"
  nameWithType: "SearchServiceAsyncClient.listIndexers"
  fullName: "com.azure.search.SearchServiceAsyncClient.listIndexers"
  package: "com.azure.search"
- uid: "com.azure.search.SearchServiceAsyncClient.deleteIndexer*"
  name: "deleteIndexer"
  nameWithType: "SearchServiceAsyncClient.deleteIndexer"
  fullName: "com.azure.search.SearchServiceAsyncClient.deleteIndexer"
  package: "com.azure.search"
- uid: "com.azure.search.SearchServiceAsyncClient.deleteIndexerWithResponse*"
  name: "deleteIndexerWithResponse"
  nameWithType: "SearchServiceAsyncClient.deleteIndexerWithResponse"
  fullName: "com.azure.search.SearchServiceAsyncClient.deleteIndexerWithResponse"
  package: "com.azure.search"
- uid: "com.azure.search.SearchServiceAsyncClient.resetIndexer*"
  name: "resetIndexer"
  nameWithType: "SearchServiceAsyncClient.resetIndexer"
  fullName: "com.azure.search.SearchServiceAsyncClient.resetIndexer"
  package: "com.azure.search"
- uid: "com.azure.search.SearchServiceAsyncClient.resetIndexerWithResponse*"
  name: "resetIndexerWithResponse"
  nameWithType: "SearchServiceAsyncClient.resetIndexerWithResponse"
  fullName: "com.azure.search.SearchServiceAsyncClient.resetIndexerWithResponse"
  package: "com.azure.search"
- uid: "com.azure.search.SearchServiceAsyncClient.runIndexer*"
  name: "runIndexer"
  nameWithType: "SearchServiceAsyncClient.runIndexer"
  fullName: "com.azure.search.SearchServiceAsyncClient.runIndexer"
  package: "com.azure.search"
- uid: "com.azure.search.SearchServiceAsyncClient.runIndexerWithResponse*"
  name: "runIndexerWithResponse"
  nameWithType: "SearchServiceAsyncClient.runIndexerWithResponse"
  fullName: "com.azure.search.SearchServiceAsyncClient.runIndexerWithResponse"
  package: "com.azure.search"
- uid: "reactor.core.publisher.Mono<com.azure.search.models.IndexerExecutionInfo>"
  spec.java:
  - uid: "reactor.core.publisher.Mono"
    name: "Mono"
    fullName: "reactor.core.publisher.Mono"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.search.models.IndexerExecutionInfo"
    name: "IndexerExecutionInfo"
    fullName: "com.azure.search.models.IndexerExecutionInfo"
  - name: ">"
    fullName: ">"
- uid: "com.azure.search.SearchServiceAsyncClient.getIndexerStatus*"
  name: "getIndexerStatus"
  nameWithType: "SearchServiceAsyncClient.getIndexerStatus"
  fullName: "com.azure.search.SearchServiceAsyncClient.getIndexerStatus"
  package: "com.azure.search"
- uid: "reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.search.models.IndexerExecutionInfo>>"
  spec.java:
  - uid: "reactor.core.publisher.Mono"
    name: "Mono"
    fullName: "reactor.core.publisher.Mono"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.core.http.rest.Response"
    name: "Response"
    fullName: "com.azure.core.http.rest.Response"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.search.models.IndexerExecutionInfo"
    name: "IndexerExecutionInfo"
    fullName: "com.azure.search.models.IndexerExecutionInfo"
  - name: ">"
    fullName: ">"
  - name: ">"
    fullName: ">"
- uid: "com.azure.search.SearchServiceAsyncClient.getIndexerStatusWithResponse*"
  name: "getIndexerStatusWithResponse"
  nameWithType: "SearchServiceAsyncClient.getIndexerStatusWithResponse"
  fullName: "com.azure.search.SearchServiceAsyncClient.getIndexerStatusWithResponse"
  package: "com.azure.search"
- uid: "com.azure.search.models.Index"
  name: "Index"
  nameWithType: "Index"
  fullName: "com.azure.search.models.Index"
- uid: "reactor.core.publisher.Mono<com.azure.search.models.Index>"
  spec.java:
  - uid: "reactor.core.publisher.Mono"
    name: "Mono"
    fullName: "reactor.core.publisher.Mono"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.search.models.Index"
    name: "Index"
    fullName: "com.azure.search.models.Index"
  - name: ">"
    fullName: ">"
- uid: "com.azure.search.SearchServiceAsyncClient.createIndex*"
  name: "createIndex"
  nameWithType: "SearchServiceAsyncClient.createIndex"
  fullName: "com.azure.search.SearchServiceAsyncClient.createIndex"
  package: "com.azure.search"
- uid: "reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.search.models.Index>>"
  spec.java:
  - uid: "reactor.core.publisher.Mono"
    name: "Mono"
    fullName: "reactor.core.publisher.Mono"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.core.http.rest.Response"
    name: "Response"
    fullName: "com.azure.core.http.rest.Response"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.search.models.Index"
    name: "Index"
    fullName: "com.azure.search.models.Index"
  - name: ">"
    fullName: ">"
  - name: ">"
    fullName: ">"
- uid: "com.azure.search.SearchServiceAsyncClient.createIndexWithResponse*"
  name: "createIndexWithResponse"
  nameWithType: "SearchServiceAsyncClient.createIndexWithResponse"
  fullName: "com.azure.search.SearchServiceAsyncClient.createIndexWithResponse"
  package: "com.azure.search"
- uid: "com.azure.search.SearchServiceAsyncClient.getIndex*"
  name: "getIndex"
  nameWithType: "SearchServiceAsyncClient.getIndex"
  fullName: "com.azure.search.SearchServiceAsyncClient.getIndex"
  package: "com.azure.search"
- uid: "com.azure.search.SearchServiceAsyncClient.getIndexWithResponse*"
  name: "getIndexWithResponse"
  nameWithType: "SearchServiceAsyncClient.getIndexWithResponse"
  fullName: "com.azure.search.SearchServiceAsyncClient.getIndexWithResponse"
  package: "com.azure.search"
- uid: "reactor.core.publisher.Mono<com.azure.search.models.GetIndexStatisticsResult>"
  spec.java:
  - uid: "reactor.core.publisher.Mono"
    name: "Mono"
    fullName: "reactor.core.publisher.Mono"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.search.models.GetIndexStatisticsResult"
    name: "GetIndexStatisticsResult"
    fullName: "com.azure.search.models.GetIndexStatisticsResult"
  - name: ">"
    fullName: ">"
- uid: "com.azure.search.SearchServiceAsyncClient.getIndexStatistics*"
  name: "getIndexStatistics"
  nameWithType: "SearchServiceAsyncClient.getIndexStatistics"
  fullName: "com.azure.search.SearchServiceAsyncClient.getIndexStatistics"
  package: "com.azure.search"
- uid: "reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.search.models.GetIndexStatisticsResult>>"
  spec.java:
  - uid: "reactor.core.publisher.Mono"
    name: "Mono"
    fullName: "reactor.core.publisher.Mono"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.core.http.rest.Response"
    name: "Response"
    fullName: "com.azure.core.http.rest.Response"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.search.models.GetIndexStatisticsResult"
    name: "GetIndexStatisticsResult"
    fullName: "com.azure.search.models.GetIndexStatisticsResult"
  - name: ">"
    fullName: ">"
  - name: ">"
    fullName: ">"
- uid: "com.azure.search.SearchServiceAsyncClient.getIndexStatisticsWithResponse*"
  name: "getIndexStatisticsWithResponse"
  nameWithType: "SearchServiceAsyncClient.getIndexStatisticsWithResponse"
  fullName: "com.azure.search.SearchServiceAsyncClient.getIndexStatisticsWithResponse"
  package: "com.azure.search"
- uid: "com.azure.core.http.rest.PagedFlux<com.azure.search.models.Index>"
  spec.java:
  - uid: "com.azure.core.http.rest.PagedFlux"
    name: "PagedFlux"
    fullName: "com.azure.core.http.rest.PagedFlux"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.search.models.Index"
    name: "Index"
    fullName: "com.azure.search.models.Index"
  - name: ">"
    fullName: ">"
- uid: "com.azure.search.SearchServiceAsyncClient.listIndexes*"
  name: "listIndexes"
  nameWithType: "SearchServiceAsyncClient.listIndexes"
  fullName: "com.azure.search.SearchServiceAsyncClient.listIndexes"
  package: "com.azure.search"
- uid: "com.azure.search.SearchServiceAsyncClient.createOrUpdateIndex*"
  name: "createOrUpdateIndex"
  nameWithType: "SearchServiceAsyncClient.createOrUpdateIndex"
  fullName: "com.azure.search.SearchServiceAsyncClient.createOrUpdateIndex"
  package: "com.azure.search"
- uid: "boolean"
  spec.java:
  - uid: "boolean"
    name: "boolean"
    fullName: "boolean"
- uid: "com.azure.search.SearchServiceAsyncClient.createOrUpdateIndexWithResponse*"
  name: "createOrUpdateIndexWithResponse"
  nameWithType: "SearchServiceAsyncClient.createOrUpdateIndexWithResponse"
  fullName: "com.azure.search.SearchServiceAsyncClient.createOrUpdateIndexWithResponse"
  package: "com.azure.search"
- uid: "com.azure.search.SearchServiceAsyncClient.deleteIndex*"
  name: "deleteIndex"
  nameWithType: "SearchServiceAsyncClient.deleteIndex"
  fullName: "com.azure.search.SearchServiceAsyncClient.deleteIndex"
  package: "com.azure.search"
- uid: "com.azure.search.SearchServiceAsyncClient.deleteIndexWithResponse*"
  name: "deleteIndexWithResponse"
  nameWithType: "SearchServiceAsyncClient.deleteIndexWithResponse"
  fullName: "com.azure.search.SearchServiceAsyncClient.deleteIndexWithResponse"
  package: "com.azure.search"
- uid: "com.azure.search.models.AnalyzeRequest"
  name: "AnalyzeRequest"
  nameWithType: "AnalyzeRequest"
  fullName: "com.azure.search.models.AnalyzeRequest"
- uid: "com.azure.core.http.rest.PagedFlux<com.azure.search.models.TokenInfo>"
  spec.java:
  - uid: "com.azure.core.http.rest.PagedFlux"
    name: "PagedFlux"
    fullName: "com.azure.core.http.rest.PagedFlux"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.search.models.TokenInfo"
    name: "TokenInfo"
    fullName: "com.azure.search.models.TokenInfo"
  - name: ">"
    fullName: ">"
- uid: "com.azure.search.SearchServiceAsyncClient.analyzeText*"
  name: "analyzeText"
  nameWithType: "SearchServiceAsyncClient.analyzeText"
  fullName: "com.azure.search.SearchServiceAsyncClient.analyzeText"
  package: "com.azure.search"
- uid: "com.azure.search.models.Skillset"
  name: "Skillset"
  nameWithType: "Skillset"
  fullName: "com.azure.search.models.Skillset"
- uid: "reactor.core.publisher.Mono<com.azure.search.models.Skillset>"
  spec.java:
  - uid: "reactor.core.publisher.Mono"
    name: "Mono"
    fullName: "reactor.core.publisher.Mono"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.search.models.Skillset"
    name: "Skillset"
    fullName: "com.azure.search.models.Skillset"
  - name: ">"
    fullName: ">"
- uid: "com.azure.search.SearchServiceAsyncClient.createSkillset*"
  name: "createSkillset"
  nameWithType: "SearchServiceAsyncClient.createSkillset"
  fullName: "com.azure.search.SearchServiceAsyncClient.createSkillset"
  package: "com.azure.search"
- uid: "reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.search.models.Skillset>>"
  spec.java:
  - uid: "reactor.core.publisher.Mono"
    name: "Mono"
    fullName: "reactor.core.publisher.Mono"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.core.http.rest.Response"
    name: "Response"
    fullName: "com.azure.core.http.rest.Response"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.search.models.Skillset"
    name: "Skillset"
    fullName: "com.azure.search.models.Skillset"
  - name: ">"
    fullName: ">"
  - name: ">"
    fullName: ">"
- uid: "com.azure.search.SearchServiceAsyncClient.createSkillsetWithResponse*"
  name: "createSkillsetWithResponse"
  nameWithType: "SearchServiceAsyncClient.createSkillsetWithResponse"
  fullName: "com.azure.search.SearchServiceAsyncClient.createSkillsetWithResponse"
  package: "com.azure.search"
- uid: "com.azure.search.SearchServiceAsyncClient.getSkillset*"
  name: "getSkillset"
  nameWithType: "SearchServiceAsyncClient.getSkillset"
  fullName: "com.azure.search.SearchServiceAsyncClient.getSkillset"
  package: "com.azure.search"
- uid: "com.azure.search.SearchServiceAsyncClient.getSkillsetWithResponse*"
  name: "getSkillsetWithResponse"
  nameWithType: "SearchServiceAsyncClient.getSkillsetWithResponse"
  fullName: "com.azure.search.SearchServiceAsyncClient.getSkillsetWithResponse"
  package: "com.azure.search"
- uid: "com.azure.core.http.rest.PagedFlux<com.azure.search.models.Skillset>"
  spec.java:
  - uid: "com.azure.core.http.rest.PagedFlux"
    name: "PagedFlux"
    fullName: "com.azure.core.http.rest.PagedFlux"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.search.models.Skillset"
    name: "Skillset"
    fullName: "com.azure.search.models.Skillset"
  - name: ">"
    fullName: ">"
- uid: "com.azure.search.SearchServiceAsyncClient.listSkillsets*"
  name: "listSkillsets"
  nameWithType: "SearchServiceAsyncClient.listSkillsets"
  fullName: "com.azure.search.SearchServiceAsyncClient.listSkillsets"
  package: "com.azure.search"
- uid: "com.azure.search.SearchServiceAsyncClient.createOrUpdateSkillset*"
  name: "createOrUpdateSkillset"
  nameWithType: "SearchServiceAsyncClient.createOrUpdateSkillset"
  fullName: "com.azure.search.SearchServiceAsyncClient.createOrUpdateSkillset"
  package: "com.azure.search"
- uid: "com.azure.search.SearchServiceAsyncClient.createOrUpdateSkillsetWithResponse*"
  name: "createOrUpdateSkillsetWithResponse"
  nameWithType: "SearchServiceAsyncClient.createOrUpdateSkillsetWithResponse"
  fullName: "com.azure.search.SearchServiceAsyncClient.createOrUpdateSkillsetWithResponse"
  package: "com.azure.search"
- uid: "com.azure.search.SearchServiceAsyncClient.deleteSkillset*"
  name: "deleteSkillset"
  nameWithType: "SearchServiceAsyncClient.deleteSkillset"
  fullName: "com.azure.search.SearchServiceAsyncClient.deleteSkillset"
  package: "com.azure.search"
- uid: "com.azure.search.SearchServiceAsyncClient.deleteSkillsetWithResponse*"
  name: "deleteSkillsetWithResponse"
  nameWithType: "SearchServiceAsyncClient.deleteSkillsetWithResponse"
  fullName: "com.azure.search.SearchServiceAsyncClient.deleteSkillsetWithResponse"
  package: "com.azure.search"
- uid: "com.azure.search.models.SynonymMap"
  name: "SynonymMap"
  nameWithType: "SynonymMap"
  fullName: "com.azure.search.models.SynonymMap"
- uid: "reactor.core.publisher.Mono<com.azure.search.models.SynonymMap>"
  spec.java:
  - uid: "reactor.core.publisher.Mono"
    name: "Mono"
    fullName: "reactor.core.publisher.Mono"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.search.models.SynonymMap"
    name: "SynonymMap"
    fullName: "com.azure.search.models.SynonymMap"
  - name: ">"
    fullName: ">"
- uid: "com.azure.search.SearchServiceAsyncClient.createSynonymMap*"
  name: "createSynonymMap"
  nameWithType: "SearchServiceAsyncClient.createSynonymMap"
  fullName: "com.azure.search.SearchServiceAsyncClient.createSynonymMap"
  package: "com.azure.search"
- uid: "reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.search.models.SynonymMap>>"
  spec.java:
  - uid: "reactor.core.publisher.Mono"
    name: "Mono"
    fullName: "reactor.core.publisher.Mono"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.core.http.rest.Response"
    name: "Response"
    fullName: "com.azure.core.http.rest.Response"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.search.models.SynonymMap"
    name: "SynonymMap"
    fullName: "com.azure.search.models.SynonymMap"
  - name: ">"
    fullName: ">"
  - name: ">"
    fullName: ">"
- uid: "com.azure.search.SearchServiceAsyncClient.createSynonymMapWithResponse*"
  name: "createSynonymMapWithResponse"
  nameWithType: "SearchServiceAsyncClient.createSynonymMapWithResponse"
  fullName: "com.azure.search.SearchServiceAsyncClient.createSynonymMapWithResponse"
  package: "com.azure.search"
- uid: "com.azure.search.SearchServiceAsyncClient.getSynonymMap*"
  name: "getSynonymMap"
  nameWithType: "SearchServiceAsyncClient.getSynonymMap"
  fullName: "com.azure.search.SearchServiceAsyncClient.getSynonymMap"
  package: "com.azure.search"
- uid: "com.azure.search.SearchServiceAsyncClient.getSynonymMapWithResponse*"
  name: "getSynonymMapWithResponse"
  nameWithType: "SearchServiceAsyncClient.getSynonymMapWithResponse"
  fullName: "com.azure.search.SearchServiceAsyncClient.getSynonymMapWithResponse"
  package: "com.azure.search"
- uid: "com.azure.core.http.rest.PagedFlux<com.azure.search.models.SynonymMap>"
  spec.java:
  - uid: "com.azure.core.http.rest.PagedFlux"
    name: "PagedFlux"
    fullName: "com.azure.core.http.rest.PagedFlux"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.search.models.SynonymMap"
    name: "SynonymMap"
    fullName: "com.azure.search.models.SynonymMap"
  - name: ">"
    fullName: ">"
- uid: "com.azure.search.SearchServiceAsyncClient.listSynonymMaps*"
  name: "listSynonymMaps"
  nameWithType: "SearchServiceAsyncClient.listSynonymMaps"
  fullName: "com.azure.search.SearchServiceAsyncClient.listSynonymMaps"
  package: "com.azure.search"
- uid: "com.azure.search.SearchServiceAsyncClient.createOrUpdateSynonymMap*"
  name: "createOrUpdateSynonymMap"
  nameWithType: "SearchServiceAsyncClient.createOrUpdateSynonymMap"
  fullName: "com.azure.search.SearchServiceAsyncClient.createOrUpdateSynonymMap"
  package: "com.azure.search"
- uid: "com.azure.search.SearchServiceAsyncClient.createOrUpdateSynonymMapWithResponse*"
  name: "createOrUpdateSynonymMapWithResponse"
  nameWithType: "SearchServiceAsyncClient.createOrUpdateSynonymMapWithResponse"
  fullName: "com.azure.search.SearchServiceAsyncClient.createOrUpdateSynonymMapWithResponse"
  package: "com.azure.search"
- uid: "com.azure.search.SearchServiceAsyncClient.deleteSynonymMap*"
  name: "deleteSynonymMap"
  nameWithType: "SearchServiceAsyncClient.deleteSynonymMap"
  fullName: "com.azure.search.SearchServiceAsyncClient.deleteSynonymMap"
  package: "com.azure.search"
- uid: "com.azure.search.SearchServiceAsyncClient.deleteSynonymMapWithResponse*"
  name: "deleteSynonymMapWithResponse"
  nameWithType: "SearchServiceAsyncClient.deleteSynonymMapWithResponse"
  fullName: "com.azure.search.SearchServiceAsyncClient.deleteSynonymMapWithResponse"
  package: "com.azure.search"
- uid: "reactor.core.publisher.Mono<com.azure.search.models.ServiceStatistics>"
  spec.java:
  - uid: "reactor.core.publisher.Mono"
    name: "Mono"
    fullName: "reactor.core.publisher.Mono"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.search.models.ServiceStatistics"
    name: "ServiceStatistics"
    fullName: "com.azure.search.models.ServiceStatistics"
  - name: ">"
    fullName: ">"
- uid: "com.azure.search.SearchServiceAsyncClient.getServiceStatistics*"
  name: "getServiceStatistics"
  nameWithType: "SearchServiceAsyncClient.getServiceStatistics"
  fullName: "com.azure.search.SearchServiceAsyncClient.getServiceStatistics"
  package: "com.azure.search"
- uid: "reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.search.models.ServiceStatistics>>"
  spec.java:
  - uid: "reactor.core.publisher.Mono"
    name: "Mono"
    fullName: "reactor.core.publisher.Mono"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.core.http.rest.Response"
    name: "Response"
    fullName: "com.azure.core.http.rest.Response"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.search.models.ServiceStatistics"
    name: "ServiceStatistics"
    fullName: "com.azure.search.models.ServiceStatistics"
  - name: ">"
    fullName: ">"
  - name: ">"
    fullName: ">"
- uid: "com.azure.search.SearchServiceAsyncClient.getServiceStatisticsWithResponse*"
  name: "getServiceStatisticsWithResponse"
  nameWithType: "SearchServiceAsyncClient.getServiceStatisticsWithResponse"
  fullName: "com.azure.search.SearchServiceAsyncClient.getServiceStatisticsWithResponse"
  package: "com.azure.search"
- uid: "java.lang.Object.notify()"
  name: "Object.notify()"
  nameWithType: "Object.notify()"
  fullName: "java.lang.Object.notify()"
- uid: "java.lang.Object.wait()"
  name: "Object.wait()"
  nameWithType: "Object.wait()"
  fullName: "java.lang.Object.wait()"
- uid: "java.lang.Object.finalize()"
  name: "Object.finalize()"
  nameWithType: "Object.finalize()"
  fullName: "java.lang.Object.finalize()"
- uid: "java.lang.Object.clone()"
  name: "Object.clone()"
  nameWithType: "Object.clone()"
  fullName: "java.lang.Object.clone()"
- uid: "java.lang.Object.notifyAll()"
  name: "Object.notifyAll()"
  nameWithType: "Object.notifyAll()"
  fullName: "java.lang.Object.notifyAll()"
- uid: "java.lang.Object.equals(java.lang.Object)"
  name: "Object.equals(Object)"
  nameWithType: "Object.equals(Object)"
  fullName: "java.lang.Object.equals(java.lang.Object)"
- uid: "java.lang.Object.getClass()"
  name: "Object.getClass()"
  nameWithType: "Object.getClass()"
  fullName: "java.lang.Object.getClass()"
- uid: "java.lang.Object.wait(long)"
  name: "Object.wait(long)"
  nameWithType: "Object.wait(long)"
  fullName: "java.lang.Object.wait(long)"
- uid: "java.lang.Object.hashCode()"
  name: "Object.hashCode()"
  nameWithType: "Object.hashCode()"
  fullName: "java.lang.Object.hashCode()"
- uid: "java.lang.Object.wait(long,int)"
  name: "Object.wait(long,int)"
  nameWithType: "Object.wait(long,int)"
  fullName: "java.lang.Object.wait(long,int)"
- uid: "java.lang.Object.toString()"
  name: "Object.toString()"
  nameWithType: "Object.toString()"
  fullName: "java.lang.Object.toString()"
- uid: "reactor.core.publisher.Mono"
  name: "Mono"
  nameWithType: "Mono"
  fullName: "reactor.core.publisher.Mono"
- uid: "com.azure.core.http.rest.Response"
  name: "Response"
  nameWithType: "Response"
  fullName: "com.azure.core.http.rest.Response"
- uid: "com.azure.core.http.rest.PagedFlux"
  name: "PagedFlux"
  nameWithType: "PagedFlux"
  fullName: "com.azure.core.http.rest.PagedFlux"
- uid: "java.lang.Void"
  name: "Void"
  nameWithType: "Void"
  fullName: "java.lang.Void"
- uid: "com.azure.search.models.IndexerExecutionInfo"
  name: "IndexerExecutionInfo"
  nameWithType: "IndexerExecutionInfo"
  fullName: "com.azure.search.models.IndexerExecutionInfo"
- uid: "com.azure.search.models.GetIndexStatisticsResult"
  name: "GetIndexStatisticsResult"
  nameWithType: "GetIndexStatisticsResult"
  fullName: "com.azure.search.models.GetIndexStatisticsResult"
- uid: "com.azure.search.models.TokenInfo"
  name: "TokenInfo"
  nameWithType: "TokenInfo"
  fullName: "com.azure.search.models.TokenInfo"
- uid: "com.azure.search.models.ServiceStatistics"
  name: "ServiceStatistics"
  nameWithType: "ServiceStatistics"
  fullName: "com.azure.search.models.ServiceStatistics"
