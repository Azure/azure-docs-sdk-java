### YamlMime:ManagedReference
items:
- uid: com.azure.ai.metricsadvisor.MetricsAdvisorAsyncClient
  id: MetricsAdvisorAsyncClient
  artifact: com.azure:azure-ai-metricsadvisor:1.0.0-beta.2
  parent: com.azure.ai.metricsadvisor
  children:
  - com.azure.ai.metricsadvisor.MetricsAdvisorAsyncClient.addFeedbackWithResponse(java.lang.String,com.azure.ai.metricsadvisor.models.MetricFeedback)
  - com.azure.ai.metricsadvisor.MetricsAdvisorAsyncClient.addFeeddback(java.lang.String,com.azure.ai.metricsadvisor.models.MetricFeedback)
  - com.azure.ai.metricsadvisor.MetricsAdvisorAsyncClient.getFeedback(java.lang.String)
  - com.azure.ai.metricsadvisor.MetricsAdvisorAsyncClient.getFeedbackWithResponse(java.lang.String)
  - com.azure.ai.metricsadvisor.MetricsAdvisorAsyncClient.listAlerts(java.lang.String,java.time.OffsetDateTime,java.time.OffsetDateTime,com.azure.ai.metricsadvisor.models.ListAlertOptions)
  - com.azure.ai.metricsadvisor.MetricsAdvisorAsyncClient.listAnomaliesForAlert(java.lang.String,java.lang.String)
  - com.azure.ai.metricsadvisor.MetricsAdvisorAsyncClient.listAnomaliesForAlert(java.lang.String,java.lang.String,com.azure.ai.metricsadvisor.models.ListAnomaliesAlertedOptions)
  - com.azure.ai.metricsadvisor.MetricsAdvisorAsyncClient.listAnomaliesForDetectionConfig(java.lang.String,java.time.OffsetDateTime,java.time.OffsetDateTime,com.azure.ai.metricsadvisor.models.ListAnomaliesDetectedOptions)
  - com.azure.ai.metricsadvisor.MetricsAdvisorAsyncClient.listDimensionValuesWithAnomalies(java.lang.String,java.lang.String,java.time.OffsetDateTime,java.time.OffsetDateTime,com.azure.ai.metricsadvisor.models.ListDimensionValuesWithAnomaliesOptions)
  - com.azure.ai.metricsadvisor.MetricsAdvisorAsyncClient.listFeedback(java.lang.String)
  - com.azure.ai.metricsadvisor.MetricsAdvisorAsyncClient.listFeedback(java.lang.String,com.azure.ai.metricsadvisor.models.ListMetricFeedbackOptions)
  - com.azure.ai.metricsadvisor.MetricsAdvisorAsyncClient.listIncidentRootCauses(com.azure.ai.metricsadvisor.models.AnomalyIncident)
  - com.azure.ai.metricsadvisor.MetricsAdvisorAsyncClient.listIncidentRootCauses(java.lang.String,java.lang.String)
  - com.azure.ai.metricsadvisor.MetricsAdvisorAsyncClient.listIncidentsForAlert(java.lang.String,java.lang.String,com.azure.ai.metricsadvisor.models.ListIncidentsAlertedOptions)
  - com.azure.ai.metricsadvisor.MetricsAdvisorAsyncClient.listIncidentsForDetectionConfig(java.lang.String,java.time.OffsetDateTime,java.time.OffsetDateTime,com.azure.ai.metricsadvisor.models.ListIncidentsDetectedOptions)
  - com.azure.ai.metricsadvisor.MetricsAdvisorAsyncClient.listMetricDimensionValues(java.lang.String,java.lang.String)
  - com.azure.ai.metricsadvisor.MetricsAdvisorAsyncClient.listMetricDimensionValues(java.lang.String,java.lang.String,com.azure.ai.metricsadvisor.models.ListMetricDimensionValuesOptions)
  - com.azure.ai.metricsadvisor.MetricsAdvisorAsyncClient.listMetricEnrichedSeriesData(java.util.List<com.azure.ai.metricsadvisor.models.DimensionKey>,java.lang.String,java.time.OffsetDateTime,java.time.OffsetDateTime)
  - com.azure.ai.metricsadvisor.MetricsAdvisorAsyncClient.listMetricEnrichmentStatus(java.lang.String,java.time.OffsetDateTime,java.time.OffsetDateTime,com.azure.ai.metricsadvisor.models.ListMetricEnrichmentStatusOptions)
  - com.azure.ai.metricsadvisor.MetricsAdvisorAsyncClient.listMetricSeriesData(java.lang.String,java.util.List<com.azure.ai.metricsadvisor.models.DimensionKey>,java.time.OffsetDateTime,java.time.OffsetDateTime)
  - com.azure.ai.metricsadvisor.MetricsAdvisorAsyncClient.listMetricSeriesDefinitions(java.lang.String,java.time.OffsetDateTime,com.azure.ai.metricsadvisor.models.ListMetricSeriesDefinitionOptions)
  langs:
  - java
  name: MetricsAdvisorAsyncClient
  nameWithType: MetricsAdvisorAsyncClient
  fullName: com.azure.ai.metricsadvisor.MetricsAdvisorAsyncClient
  type: Class
  package: com.azure.ai.metricsadvisor
  summary: >-
    This class provides an asynchronous client that contains all the operations that apply to Azure Metrics Advisor.


    **Instantiating an asynchronous Metrics Advisor Client**


    ```java

    MetricsAdvisorAsyncClient metricsAdvisorAsyncClient =
         new MetricsAdvisorClientBuilder()
             .credential(new MetricsAdvisorKeyCredential("{subscription_key}", "{api_key}"))
             .endpoint("{endpoint}")
             .buildAsyncClient();
    ```
  syntax:
    content: public class MetricsAdvisorAsyncClient
  inheritance:
  - java.lang.Object
  inheritedMembers:
  - java.lang.Object.clone()
  - java.lang.Object.equals(java.lang.Object)
  - java.lang.Object.finalize()
  - java.lang.Object.getClass()
  - java.lang.Object.hashCode()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.toString()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
- uid: com.azure.ai.metricsadvisor.MetricsAdvisorAsyncClient.MetricsAdvisorAsyncClient(com.azure.ai.metricsadvisor.implementation.AzureCognitiveServiceMetricsAdvisorRestAPIOpenAPIV2Impl,com.azure.ai.metricsadvisor.models.MetricsAdvisorServiceVersion)
  id: MetricsAdvisorAsyncClient(com.azure.ai.metricsadvisor.implementation.AzureCognitiveServiceMetricsAdvisorRestAPIOpenAPIV2Impl,com.azure.ai.metricsadvisor.models.MetricsAdvisorServiceVersion)
  artifact: com.azure:azure-ai-metricsadvisor:1.0.0-beta.2
  parent: com.azure.ai.metricsadvisor.MetricsAdvisorAsyncClient
  langs:
  - java
  name: MetricsAdvisorAsyncClient(AzureCognitiveServiceMetricsAdvisorRestAPIOpenAPIV2Impl service, MetricsAdvisorServiceVersion serviceVersion)
  nameWithType: MetricsAdvisorAsyncClient.MetricsAdvisorAsyncClient(AzureCognitiveServiceMetricsAdvisorRestAPIOpenAPIV2Impl service, MetricsAdvisorServiceVersion serviceVersion)
  fullName: com.azure.ai.metricsadvisor.MetricsAdvisorAsyncClient.MetricsAdvisorAsyncClient(AzureCognitiveServiceMetricsAdvisorRestAPIOpenAPIV2Impl service, MetricsAdvisorServiceVersion serviceVersion)
  overload: com.azure.ai.metricsadvisor.MetricsAdvisorAsyncClient.MetricsAdvisorAsyncClient*
  type: Constructor
  package: com.azure.ai.metricsadvisor
  summary: Create a <xref uid="com.azure.ai.metricsadvisor.MetricsAdvisorAsyncClient" data-throw-if-not-resolved="false">MetricsAdvisorAsyncClient</xref> that sends requests to the Metrics Advisor service's endpoint. Each service call goes through the <xref uid="com.azure.ai.metricsadvisor.MetricsAdvisorClientBuilder.pipeline(com.azure.core.http.HttpPipeline)" data-throw-if-not-resolved="false">MetricsAdvisorClientBuilder#pipeline(HttpPipeline)</xref> http pipeline\}.
  syntax:
    content: " MetricsAdvisorAsyncClient(AzureCognitiveServiceMetricsAdvisorRestAPIOpenAPIV2Impl service, MetricsAdvisorServiceVersion serviceVersion)"
    parameters:
    - id: service
      type: com.azure.ai.metricsadvisor.implementation.AzureCognitiveServiceMetricsAdvisorRestAPIOpenAPIV2Impl
      description: The proxy service used to perform REST calls.
    - id: serviceVersion
      type: com.azure.ai.metricsadvisor.models.MetricsAdvisorServiceVersion
      description: The versions of Azure Metrics Advisor supported by this client library.
- uid: com.azure.ai.metricsadvisor.MetricsAdvisorAsyncClient.addFeedbackWithResponse(java.lang.String,com.azure.ai.metricsadvisor.models.MetricFeedback)
  id: addFeedbackWithResponse(java.lang.String,com.azure.ai.metricsadvisor.models.MetricFeedback)
  artifact: com.azure:azure-ai-metricsadvisor:1.0.0-beta.2
  parent: com.azure.ai.metricsadvisor.MetricsAdvisorAsyncClient
  langs:
  - java
  name: addFeedbackWithResponse(String metricId, MetricFeedback metricFeedback)
  nameWithType: MetricsAdvisorAsyncClient.addFeedbackWithResponse(String metricId, MetricFeedback metricFeedback)
  fullName: com.azure.ai.metricsadvisor.MetricsAdvisorAsyncClient.addFeedbackWithResponse(String metricId, MetricFeedback metricFeedback)
  overload: com.azure.ai.metricsadvisor.MetricsAdvisorAsyncClient.addFeedbackWithResponse*
  type: Method
  package: com.azure.ai.metricsadvisor
  summary: "Create a new metric feedback.\n\n**Code sample**\n\n```java\nfinal String metricId = \"d3gh4i4-b804-4ab9-a70f-0da0c89cft3l\";\n final OffsetDateTime startTime = OffsetDateTime.parse(\"2020-01-01T00:00:00Z\");\n final OffsetDateTime endTime = OffsetDateTime.parse(\"2020-09-09T00:00:00Z\");\n final MetricChangePointFeedback metricChangePointFeedback\n     = new MetricChangePointFeedback(startTime, endTime, ChangePointValue.AUTO_DETECT);\n \n metricsAdvisorAsyncClient.addFeedbackWithResponse(metricId, metricChangePointFeedback)\n     .subscribe(metricFeedbackResponse -> {\n         System.out.printf(\"Data Feed Metric feedback creation operation status %s%n\",\n             metricFeedbackResponse.getStatusCode());\n         MetricChangePointFeedback createdMetricChangePointFeedback\n             = (MetricChangePointFeedback) metricFeedbackResponse.getValue();\n         System.out.printf(\"Data Feed Metric feedback Id: %s%n\", createdMetricChangePointFeedback.getId());\n         System.out.printf(\"Data Feed Metric feedback change point value: %s%n\",\n             createdMetricChangePointFeedback.getChangePointValue().toString());\n         System.out.printf(\"Data Feed Metric feedback start time: %s%n\",\n             createdMetricChangePointFeedback.getStartTime());\n         System.out.printf(\"Data Feed Metric feedback end time: %s%n\",\n             createdMetricChangePointFeedback.getEndTime());\n         System.out.printf(\"Data Feed Metric feedback associated dimension filter: %s%n\",\n             createdMetricChangePointFeedback.getDimensionFilter().asMap());\n     });\n```"
  syntax:
    content: public Mono<Response<MetricFeedback>> addFeedbackWithResponse(String metricId, MetricFeedback metricFeedback)
    parameters:
    - id: metricId
      type: java.lang.String
      description: the unique id for which the feedback needs to be submitted.
    - id: metricFeedback
      type: com.azure.ai.metricsadvisor.models.MetricFeedback
      description: the actual metric feedback.
    return:
      type: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.ai.metricsadvisor.models.MetricFeedback>>
      description: A <xref uid="com.azure.core.http.rest.Response" data-throw-if-not-resolved="false">Response</xref> of a <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> containing the created <xref uid="com.azure.ai.metricsadvisor.models.MetricFeedback" data-throw-if-not-resolved="false">metric feedback</xref>.
- uid: com.azure.ai.metricsadvisor.MetricsAdvisorAsyncClient.addFeeddback(java.lang.String,com.azure.ai.metricsadvisor.models.MetricFeedback)
  id: addFeeddback(java.lang.String,com.azure.ai.metricsadvisor.models.MetricFeedback)
  artifact: com.azure:azure-ai-metricsadvisor:1.0.0-beta.2
  parent: com.azure.ai.metricsadvisor.MetricsAdvisorAsyncClient
  langs:
  - java
  name: addFeeddback(String metricId, MetricFeedback metricFeedback)
  nameWithType: MetricsAdvisorAsyncClient.addFeeddback(String metricId, MetricFeedback metricFeedback)
  fullName: com.azure.ai.metricsadvisor.MetricsAdvisorAsyncClient.addFeeddback(String metricId, MetricFeedback metricFeedback)
  overload: com.azure.ai.metricsadvisor.MetricsAdvisorAsyncClient.addFeeddback*
  type: Method
  package: com.azure.ai.metricsadvisor
  summary: "Create a new metric feedback.\n\n**Code sample**\n\n```java\nfinal String metricId = \"d3gh4i4-b804-4ab9-a70f-0da0c89cft3l\";\n final OffsetDateTime startTime = OffsetDateTime.parse(\"2020-01-01T00:00:00Z\");\n final OffsetDateTime endTime = OffsetDateTime.parse(\"2020-09-09T00:00:00Z\");\n final MetricChangePointFeedback metricChangePointFeedback\n     = new MetricChangePointFeedback(startTime, endTime, ChangePointValue.AUTO_DETECT);\n \n metricsAdvisorAsyncClient.addFeeddback(metricId, metricChangePointFeedback)\n     .subscribe(metricFeedback -> {\n         MetricChangePointFeedback createdMetricChangePointFeedback = (MetricChangePointFeedback) metricFeedback;\n         System.out.printf(\"Data Feed Metric feedback Id: %s%n\", createdMetricChangePointFeedback.getId());\n         System.out.printf(\"Data Feed Metric feedback change point value: %s%n\",\n             createdMetricChangePointFeedback.getChangePointValue().toString());\n         System.out.printf(\"Data Feed Metric feedback start time: %s%n\",\n             createdMetricChangePointFeedback.getStartTime());\n         System.out.printf(\"Data Feed Metric feedback end time: %s%n\",\n             createdMetricChangePointFeedback.getEndTime());\n     });\n```"
  syntax:
    content: public Mono<MetricFeedback> addFeeddback(String metricId, MetricFeedback metricFeedback)
    parameters:
    - id: metricId
      type: java.lang.String
      description: the unique id for which the feedback needs to be submitted.
    - id: metricFeedback
      type: com.azure.ai.metricsadvisor.models.MetricFeedback
      description: the actual metric feedback.
    return:
      type: reactor.core.publisher.Mono<com.azure.ai.metricsadvisor.models.MetricFeedback>
      description: A <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> containing the created <xref uid="com.azure.ai.metricsadvisor.models.MetricFeedback" data-throw-if-not-resolved="false">metric feedback</xref>.
- uid: com.azure.ai.metricsadvisor.MetricsAdvisorAsyncClient.getFeedback(java.lang.String)
  id: getFeedback(java.lang.String)
  artifact: com.azure:azure-ai-metricsadvisor:1.0.0-beta.2
  parent: com.azure.ai.metricsadvisor.MetricsAdvisorAsyncClient
  langs:
  - java
  name: getFeedback(String feedbackId)
  nameWithType: MetricsAdvisorAsyncClient.getFeedback(String feedbackId)
  fullName: com.azure.ai.metricsadvisor.MetricsAdvisorAsyncClient.getFeedback(String feedbackId)
  overload: com.azure.ai.metricsadvisor.MetricsAdvisorAsyncClient.getFeedback*
  type: Method
  package: com.azure.ai.metricsadvisor
  summary: "Get a metric feedback by its id.\n\n**Code sample**\n\n```java\nfinal String feedbackId = \"8i3h4i4-b804-4ab9-a70f-0da0c89cft3l\";\n metricsAdvisorAsyncClient.getFeedback(feedbackId)\n     .subscribe(metricFeedback -> {\n         System.out.printf(\"Data Feed Metric feedback Id: %s%n\", metricFeedback.getId());\n         System.out.printf(\"Data Feed Metric feedback associated dimension filter: %s%n\",\n             metricFeedback.getDimensionFilter().asMap());\n \n         if (PERIOD.equals(metricFeedback.getFeedbackType())) {\n             MetricPeriodFeedback createMetricPeriodFeedback\n                 = (MetricPeriodFeedback) metricFeedback;\n             System.out.printf(\"Data Feed Metric feedback type: %s%n\",\n                 createMetricPeriodFeedback.getPeriodType().toString());\n             System.out.printf(\"Data Feed Metric feedback period value: %f%n\",\n                 createMetricPeriodFeedback.getPeriodValue());\n         }\n     });\n```"
  syntax:
    content: public Mono<MetricFeedback> getFeedback(String feedbackId)
    parameters:
    - id: feedbackId
      type: java.lang.String
      description: The metric feedback unique id.
    return:
      type: reactor.core.publisher.Mono<com.azure.ai.metricsadvisor.models.MetricFeedback>
      description: The metric feedback for the provided id.
- uid: com.azure.ai.metricsadvisor.MetricsAdvisorAsyncClient.getFeedbackWithResponse(java.lang.String)
  id: getFeedbackWithResponse(java.lang.String)
  artifact: com.azure:azure-ai-metricsadvisor:1.0.0-beta.2
  parent: com.azure.ai.metricsadvisor.MetricsAdvisorAsyncClient
  langs:
  - java
  name: getFeedbackWithResponse(String feedbackId)
  nameWithType: MetricsAdvisorAsyncClient.getFeedbackWithResponse(String feedbackId)
  fullName: com.azure.ai.metricsadvisor.MetricsAdvisorAsyncClient.getFeedbackWithResponse(String feedbackId)
  overload: com.azure.ai.metricsadvisor.MetricsAdvisorAsyncClient.getFeedbackWithResponse*
  type: Method
  package: com.azure.ai.metricsadvisor
  summary: "Get a metric feedback by its id.\n\n**Code sample**\n\n```java\nfinal String feedbackId = \"8i3h4i4-b804-4ab9-a70f-0da0c89cft3l\";\n metricsAdvisorAsyncClient.getFeedbackWithResponse(feedbackId)\n     .subscribe(metricFeedbackResponse -> {\n         final MetricFeedback metricFeedback = metricFeedbackResponse.getValue();\n         System.out.printf(\"Data Feed Metric feedback Id: %s%n\", metricFeedback.getId());\n         System.out.printf(\"Data Feed Metric feedback associated dimension filter: %s%n\",\n             metricFeedback.getDimensionFilter().asMap());\n \n         if (PERIOD.equals(metricFeedback.getFeedbackType())) {\n             MetricPeriodFeedback createMetricPeriodFeedback\n                 = (MetricPeriodFeedback) metricFeedback;\n             System.out.printf(\"Data Feed Metric feedback type: %s%n\",\n                 createMetricPeriodFeedback.getPeriodType().toString());\n             System.out.printf(\"Data Feed Metric feedback period value: %f%n\",\n                 createMetricPeriodFeedback.getPeriodValue());\n         }\n     });\n```"
  syntax:
    content: public Mono<Response<MetricFeedback>> getFeedbackWithResponse(String feedbackId)
    parameters:
    - id: feedbackId
      type: java.lang.String
      description: The metric feedback unique id.
    return:
      type: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.ai.metricsadvisor.models.MetricFeedback>>
      description: The metric feedback for the provided id.
- uid: com.azure.ai.metricsadvisor.MetricsAdvisorAsyncClient.listAlerts(java.lang.String,java.time.OffsetDateTime,java.time.OffsetDateTime,com.azure.ai.metricsadvisor.models.ListAlertOptions)
  id: listAlerts(java.lang.String,java.time.OffsetDateTime,java.time.OffsetDateTime,com.azure.ai.metricsadvisor.models.ListAlertOptions)
  artifact: com.azure:azure-ai-metricsadvisor:1.0.0-beta.2
  parent: com.azure.ai.metricsadvisor.MetricsAdvisorAsyncClient
  langs:
  - java
  name: listAlerts(String alertConfigurationId, OffsetDateTime startTime, OffsetDateTime endTime, ListAlertOptions options)
  nameWithType: MetricsAdvisorAsyncClient.listAlerts(String alertConfigurationId, OffsetDateTime startTime, OffsetDateTime endTime, ListAlertOptions options)
  fullName: com.azure.ai.metricsadvisor.MetricsAdvisorAsyncClient.listAlerts(String alertConfigurationId, OffsetDateTime startTime, OffsetDateTime endTime, ListAlertOptions options)
  overload: com.azure.ai.metricsadvisor.MetricsAdvisorAsyncClient.listAlerts*
  type: Method
  package: com.azure.ai.metricsadvisor
  summary: "Fetch the alerts triggered by an anomaly alert configuration.\n\n**Code sample**\n\n```java\nfinal String alertConfigurationId = \"ff3014a0-bbbb-41ec-a637-677e77b81299\";\n final OffsetDateTime startTime = OffsetDateTime.parse(\"2020-01-01T00:00:00Z\");\n final OffsetDateTime endTime = OffsetDateTime.parse(\"2020-09-09T00:00:00Z\");\n final AlertQueryTimeMode timeMode = AlertQueryTimeMode.ANOMALY_TIME;\n final ListAlertOptions options = new ListAlertOptions()\n     .setAlertQueryTimeMode(timeMode)\n     .setTop(10);\n \n metricsAdvisorAsyncClient.listAlerts(alertConfigurationId, startTime, endTime, options)\n     .subscribe(alert -> {\n         System.out.printf(\"Anomaly Alert Id: %s%n\", alert.getId());\n         System.out.printf(\"Created Time: %s%n\", alert.getCreatedTime());\n         System.out.printf(\"Modified Time: %s%n\", alert.getModifiedTime());\n     });\n```"
  syntax:
    content: public PagedFlux<AnomalyAlert> listAlerts(String alertConfigurationId, OffsetDateTime startTime, OffsetDateTime endTime, ListAlertOptions options)
    parameters:
    - id: alertConfigurationId
      type: java.lang.String
      description: The anomaly alert configuration id.
    - id: startTime
      type: java.time.OffsetDateTime
      description: The start time of the time range within which the alerts were triggered.
    - id: endTime
      type: java.time.OffsetDateTime
      description: The end time of the time range within which the alerts were triggered.
    - id: options
      type: com.azure.ai.metricsadvisor.models.ListAlertOptions
      description: The additional parameters.
    return:
      type: com.azure.core.http.rest.PagedFlux<com.azure.ai.metricsadvisor.models.AnomalyAlert>
      description: The alerts.
- uid: com.azure.ai.metricsadvisor.MetricsAdvisorAsyncClient.listAnomaliesForAlert(java.lang.String,java.lang.String)
  id: listAnomaliesForAlert(java.lang.String,java.lang.String)
  artifact: com.azure:azure-ai-metricsadvisor:1.0.0-beta.2
  parent: com.azure.ai.metricsadvisor.MetricsAdvisorAsyncClient
  langs:
  - java
  name: listAnomaliesForAlert(String alertConfigurationId, String alertId)
  nameWithType: MetricsAdvisorAsyncClient.listAnomaliesForAlert(String alertConfigurationId, String alertId)
  fullName: com.azure.ai.metricsadvisor.MetricsAdvisorAsyncClient.listAnomaliesForAlert(String alertConfigurationId, String alertId)
  overload: com.azure.ai.metricsadvisor.MetricsAdvisorAsyncClient.listAnomaliesForAlert*
  type: Method
  package: com.azure.ai.metricsadvisor
  summary: "Fetch the anomalies in an alert.\n\n**Code sample**\n\n```java\nfinal String alertConfigurationId = \"ff3014a0-bbbb-41ec-a637-677e77b81299\";\n final String alertId = \"1746b031c00\";\n \n metricsAdvisorAsyncClient.listAnomaliesForAlert(\n     alertConfigurationId,\n     alertId)\n     .subscribe(anomaly -> {\n         System.out.printf(\"Data Feed Metric Id: %s%n\", anomaly.getMetricId());\n         System.out.printf(\"Detection Configuration Id: %s%n\", anomaly.getDetectionConfigurationId());\n         System.out.printf(\"DataPoint Anomaly Created Time: %s%n\", anomaly.getCreatedTime());\n         System.out.printf(\"DataPoint Anomaly Modified Time: %s%n\", anomaly.getModifiedTime());\n         System.out.printf(\"DataPoint Anomaly AnomalySeverity: %s%n\", anomaly.getSeverity());\n         System.out.printf(\"DataPoint Anomaly Status: %s%n\", anomaly.getStatus());\n         System.out.printf(\"Series Key:\");\n         DimensionKey seriesKey = anomaly.getSeriesKey();\n         for (Map.Entry<String, String> dimension : seriesKey.asMap().entrySet()) {\n             System.out.printf(\"DimensionName: %s DimensionValue:%s%n\",\n                 dimension.getKey(), dimension.getValue());\n         }\n     });\n```"
  syntax:
    content: public PagedFlux<DataPointAnomaly> listAnomaliesForAlert(String alertConfigurationId, String alertId)
    parameters:
    - id: alertConfigurationId
      type: java.lang.String
      description: The anomaly alert configuration id.
    - id: alertId
      type: java.lang.String
      description: The alert id.
    return:
      type: com.azure.core.http.rest.PagedFlux<com.azure.ai.metricsadvisor.models.DataPointAnomaly>
      description: The anomalies.
- uid: com.azure.ai.metricsadvisor.MetricsAdvisorAsyncClient.listAnomaliesForAlert(java.lang.String,java.lang.String,com.azure.ai.metricsadvisor.models.ListAnomaliesAlertedOptions)
  id: listAnomaliesForAlert(java.lang.String,java.lang.String,com.azure.ai.metricsadvisor.models.ListAnomaliesAlertedOptions)
  artifact: com.azure:azure-ai-metricsadvisor:1.0.0-beta.2
  parent: com.azure.ai.metricsadvisor.MetricsAdvisorAsyncClient
  langs:
  - java
  name: listAnomaliesForAlert(String alertConfigurationId, String alertId, ListAnomaliesAlertedOptions options)
  nameWithType: MetricsAdvisorAsyncClient.listAnomaliesForAlert(String alertConfigurationId, String alertId, ListAnomaliesAlertedOptions options)
  fullName: com.azure.ai.metricsadvisor.MetricsAdvisorAsyncClient.listAnomaliesForAlert(String alertConfigurationId, String alertId, ListAnomaliesAlertedOptions options)
  overload: com.azure.ai.metricsadvisor.MetricsAdvisorAsyncClient.listAnomaliesForAlert*
  type: Method
  package: com.azure.ai.metricsadvisor
  summary: >-
    Fetch the anomalies in an alert.


    **Code sample**


    ```java

    final String alertConfigurationId = "ff3014a0-bbbb-41ec-a637-677e77b81299";
     final String alertId = "1746b031c00";
     final ListAnomaliesAlertedOptions options = new ListAnomaliesAlertedOptions()
         .setTop(10);
     metricsAdvisorAsyncClient.listAnomaliesForAlert(
         alertConfigurationId,
         alertId,
         options)
         .subscribe(anomaly -> {
             System.out.printf("Data Feed Metric Id: %s%n", anomaly.getMetricId());
             System.out.printf("Detection Configuration Id: %s%n", anomaly.getDetectionConfigurationId());
             System.out.printf("DataPoint Anomaly Created Time: %s%n", anomaly.getCreatedTime());
             System.out.printf("DataPoint Anomaly Modified Time: %s%n", anomaly.getModifiedTime());
             System.out.printf("DataPoint Anomaly AnomalySeverity: %s%n", anomaly.getSeverity());
             System.out.printf("DataPoint Anomaly Status: %s%n", anomaly.getStatus());
             System.out.printf("Series Key:");
             System.out.println(anomaly.getSeriesKey().asMap());
         });
    ```
  syntax:
    content: public PagedFlux<DataPointAnomaly> listAnomaliesForAlert(String alertConfigurationId, String alertId, ListAnomaliesAlertedOptions options)
    parameters:
    - id: alertConfigurationId
      type: java.lang.String
      description: The anomaly alert configuration id.
    - id: alertId
      type: java.lang.String
      description: The alert id.
    - id: options
      type: com.azure.ai.metricsadvisor.models.ListAnomaliesAlertedOptions
      description: The additional parameters.
    return:
      type: com.azure.core.http.rest.PagedFlux<com.azure.ai.metricsadvisor.models.DataPointAnomaly>
      description: The anomalies.
- uid: com.azure.ai.metricsadvisor.MetricsAdvisorAsyncClient.listAnomaliesForDetectionConfig(java.lang.String,java.time.OffsetDateTime,java.time.OffsetDateTime,com.azure.ai.metricsadvisor.models.ListAnomaliesDetectedOptions)
  id: listAnomaliesForDetectionConfig(java.lang.String,java.time.OffsetDateTime,java.time.OffsetDateTime,com.azure.ai.metricsadvisor.models.ListAnomaliesDetectedOptions)
  artifact: com.azure:azure-ai-metricsadvisor:1.0.0-beta.2
  parent: com.azure.ai.metricsadvisor.MetricsAdvisorAsyncClient
  langs:
  - java
  name: listAnomaliesForDetectionConfig(String detectionConfigurationId, OffsetDateTime startTime, OffsetDateTime endTime, ListAnomaliesDetectedOptions options)
  nameWithType: MetricsAdvisorAsyncClient.listAnomaliesForDetectionConfig(String detectionConfigurationId, OffsetDateTime startTime, OffsetDateTime endTime, ListAnomaliesDetectedOptions options)
  fullName: com.azure.ai.metricsadvisor.MetricsAdvisorAsyncClient.listAnomaliesForDetectionConfig(String detectionConfigurationId, OffsetDateTime startTime, OffsetDateTime endTime, ListAnomaliesDetectedOptions options)
  overload: com.azure.ai.metricsadvisor.MetricsAdvisorAsyncClient.listAnomaliesForDetectionConfig*
  type: Method
  package: com.azure.ai.metricsadvisor
  summary: >-
    Fetch the anomalies identified by an anomaly detection configuration.


    **Code sample**


    ```java

    final String detectionConfigurationId = "c0f2539f-b804-4ab9-a70f-0da0c89c76d8";
     final OffsetDateTime startTime = OffsetDateTime.parse("2020-09-09T00:00:00Z");
     final OffsetDateTime endTime = OffsetDateTime.parse("2020-09-09T12:00:00Z");
     final ListAnomaliesDetectedFilter filter = new ListAnomaliesDetectedFilter()
         .setSeverityRange(AnomalySeverity.LOW, AnomalySeverity.MEDIUM);
     final ListAnomaliesDetectedOptions options = new ListAnomaliesDetectedOptions()
         .setTop(10)
         .setFilter(filter);
     metricsAdvisorAsyncClient.listAnomaliesForDetectionConfig(detectionConfigurationId,
             startTime, endTime, options)
         .subscribe(anomaly -> {
             System.out.printf("DataPoint Anomaly AnomalySeverity: %s%n", anomaly.getSeverity());
             System.out.printf("Series Key:");
             DimensionKey seriesKey = anomaly.getSeriesKey();
             for (Map.Entry<String, String> dimension : seriesKey.asMap().entrySet()) {
                 System.out.printf("DimensionName: %s DimensionValue:%s%n",
                     dimension.getKey(), dimension.getValue());
             }
         });
    ```
  syntax:
    content: public PagedFlux<DataPointAnomaly> listAnomaliesForDetectionConfig(String detectionConfigurationId, OffsetDateTime startTime, OffsetDateTime endTime, ListAnomaliesDetectedOptions options)
    parameters:
    - id: detectionConfigurationId
      type: java.lang.String
      description: The anomaly detection configuration id.
    - id: startTime
      type: java.time.OffsetDateTime
      description: The start time of the time range within which the anomalies were detected.
    - id: endTime
      type: java.time.OffsetDateTime
      description: The end time of the time range within which the anomalies were detected.
    - id: options
      type: com.azure.ai.metricsadvisor.models.ListAnomaliesDetectedOptions
      description: The additional parameters.
    return:
      type: com.azure.core.http.rest.PagedFlux<com.azure.ai.metricsadvisor.models.DataPointAnomaly>
      description: The anomalies.
- uid: com.azure.ai.metricsadvisor.MetricsAdvisorAsyncClient.listDimensionValuesWithAnomalies(java.lang.String,java.lang.String,java.time.OffsetDateTime,java.time.OffsetDateTime,com.azure.ai.metricsadvisor.models.ListDimensionValuesWithAnomaliesOptions)
  id: listDimensionValuesWithAnomalies(java.lang.String,java.lang.String,java.time.OffsetDateTime,java.time.OffsetDateTime,com.azure.ai.metricsadvisor.models.ListDimensionValuesWithAnomaliesOptions)
  artifact: com.azure:azure-ai-metricsadvisor:1.0.0-beta.2
  parent: com.azure.ai.metricsadvisor.MetricsAdvisorAsyncClient
  langs:
  - java
  name: listDimensionValuesWithAnomalies(String detectionConfigurationId, String dimensionName, OffsetDateTime startTime, OffsetDateTime endTime, ListDimensionValuesWithAnomaliesOptions options)
  nameWithType: MetricsAdvisorAsyncClient.listDimensionValuesWithAnomalies(String detectionConfigurationId, String dimensionName, OffsetDateTime startTime, OffsetDateTime endTime, ListDimensionValuesWithAnomaliesOptions options)
  fullName: com.azure.ai.metricsadvisor.MetricsAdvisorAsyncClient.listDimensionValuesWithAnomalies(String detectionConfigurationId, String dimensionName, OffsetDateTime startTime, OffsetDateTime endTime, ListDimensionValuesWithAnomaliesOptions options)
  overload: com.azure.ai.metricsadvisor.MetricsAdvisorAsyncClient.listDimensionValuesWithAnomalies*
  type: Method
  package: com.azure.ai.metricsadvisor
  summary: "Fetch the values of a dimension that have anomalies.\n\n**Code sample**\n\n```java\nfinal String detectionConfigurationId = \"c0f2539f-b804-4ab9-a70f-0da0c89c76d8\";\n final String dimensionName = \"Dim1\";\n final OffsetDateTime startTime = OffsetDateTime.parse(\"2020-01-01T00:00:00Z\");\n final OffsetDateTime endTime = OffsetDateTime.parse(\"2020-09-09T00:00:00Z\");\n final ListDimensionValuesWithAnomaliesOptions options\n     = new ListDimensionValuesWithAnomaliesOptions()\n     .setTop(10);\n \n metricsAdvisorAsyncClient.listDimensionValuesWithAnomalies(detectionConfigurationId,\n     dimensionName,\n     startTime, endTime, options)\n     .subscribe(dimensionValue -> {\n         System.out.printf(\"DataFeedDimension Value: %s%n\", dimensionValue);\n     });\n```"
  syntax:
    content: public PagedFlux<String> listDimensionValuesWithAnomalies(String detectionConfigurationId, String dimensionName, OffsetDateTime startTime, OffsetDateTime endTime, ListDimensionValuesWithAnomaliesOptions options)
    parameters:
    - id: detectionConfigurationId
      type: java.lang.String
      description: Identifies the configuration used to detect the anomalies.
    - id: dimensionName
      type: java.lang.String
      description: The dimension name to retrieve the values for.
    - id: startTime
      type: java.time.OffsetDateTime
      description: The start time of the time range within which the anomalies were identified.
    - id: endTime
      type: java.time.OffsetDateTime
      description: The end time of the time range within which the anomalies were identified.
    - id: options
      type: com.azure.ai.metricsadvisor.models.ListDimensionValuesWithAnomaliesOptions
      description: The additional parameters.
    return:
      type: com.azure.core.http.rest.PagedFlux<java.lang.String>
      description: The dimension values with anomalies.
- uid: com.azure.ai.metricsadvisor.MetricsAdvisorAsyncClient.listFeedback(java.lang.String)
  id: listFeedback(java.lang.String)
  artifact: com.azure:azure-ai-metricsadvisor:1.0.0-beta.2
  parent: com.azure.ai.metricsadvisor.MetricsAdvisorAsyncClient
  langs:
  - java
  name: listFeedback(String metricId)
  nameWithType: MetricsAdvisorAsyncClient.listFeedback(String metricId)
  fullName: com.azure.ai.metricsadvisor.MetricsAdvisorAsyncClient.listFeedback(String metricId)
  overload: com.azure.ai.metricsadvisor.MetricsAdvisorAsyncClient.listFeedback*
  type: Method
  package: com.azure.ai.metricsadvisor
  summary: "List information of metrics feedback on the account for a metric Id.\n\n**Code sample**\n\n```java\nfinal String metricId = \"d3gh4i4-b804-4ab9-a70f-0da0c89cft3l\";\n metricsAdvisorAsyncClient.listFeedback(metricId)\n     .subscribe(metricFeedback -> {\n         System.out.printf(\"Data Feed Metric feedback Id: %s%n\", metricFeedback.getId());\n         System.out.printf(\"Data Feed Metric feedback associated dimension filter: %s%n\",\n             metricFeedback.getDimensionFilter().asMap());\n \n         if (PERIOD.equals(metricFeedback.getFeedbackType())) {\n             MetricPeriodFeedback periodFeedback\n                 = (MetricPeriodFeedback) metricFeedback;\n             System.out.printf(\"Data Feed Metric feedback type: %s%n\",\n                 periodFeedback.getPeriodType().toString());\n             System.out.printf(\"Data Feed Metric feedback period value: %f%n\",\n                 periodFeedback.getPeriodValue());\n         } else if (ANOMALY.equals(metricFeedback.getFeedbackType())) {\n             MetricAnomalyFeedback metricAnomalyFeedback\n                 = (MetricAnomalyFeedback) metricFeedback;\n             System.out.printf(\"Data Feed Metric feedback anomaly value: %s%n\",\n                 metricAnomalyFeedback.getAnomalyValue().toString());\n             System.out.printf(\"Data Feed Metric feedback associated detection configuration: %s%n\",\n                 metricAnomalyFeedback.getDetectionConfigurationId());\n         } else if (COMMENT.equals(metricFeedback.getFeedbackType())) {\n             MetricCommentFeedback metricCommentFeedback\n                 = (MetricCommentFeedback) metricFeedback;\n             System.out.printf(\"Data Feed Metric feedback comment value: %s%n\",\n                 metricCommentFeedback.getComment());\n         }\n     });\n```"
  syntax:
    content: public PagedFlux<MetricFeedback> listFeedback(String metricId)
    parameters:
    - id: metricId
      type: java.lang.String
      description: the unique metric Id.
    return:
      type: com.azure.core.http.rest.PagedFlux<com.azure.ai.metricsadvisor.models.MetricFeedback>
      description: >-
        A <xref uid="com.azure.core.http.rest.PagedFlux" data-throw-if-not-resolved="false">PagedFlux</xref> containing information of all the <xref uid="com.azure.ai.metricsadvisor.models.MetricFeedback" data-throw-if-not-resolved="false">metric feedbacks</xref>
         in the account.
- uid: com.azure.ai.metricsadvisor.MetricsAdvisorAsyncClient.listFeedback(java.lang.String,com.azure.ai.metricsadvisor.models.ListMetricFeedbackOptions)
  id: listFeedback(java.lang.String,com.azure.ai.metricsadvisor.models.ListMetricFeedbackOptions)
  artifact: com.azure:azure-ai-metricsadvisor:1.0.0-beta.2
  parent: com.azure.ai.metricsadvisor.MetricsAdvisorAsyncClient
  langs:
  - java
  name: listFeedback(String metricId, ListMetricFeedbackOptions options)
  nameWithType: MetricsAdvisorAsyncClient.listFeedback(String metricId, ListMetricFeedbackOptions options)
  fullName: com.azure.ai.metricsadvisor.MetricsAdvisorAsyncClient.listFeedback(String metricId, ListMetricFeedbackOptions options)
  overload: com.azure.ai.metricsadvisor.MetricsAdvisorAsyncClient.listFeedback*
  type: Method
  package: com.azure.ai.metricsadvisor
  summary: "List information of all metric feedbacks on the metrics advisor account for a metric Id.\n\n**Code sample**\n\n```java\nfinal String metricId = \"d3gh4i4-b804-4ab9-a70f-0da0c89cft3l\";\n final OffsetDateTime startTime = OffsetDateTime.parse(\"2020-01-01T00:00:00Z\");\n final OffsetDateTime endTime = OffsetDateTime.parse(\"2020-09-09T00:00:00Z\");\n \n metricsAdvisorAsyncClient.listFeedback(metricId,\n     new ListMetricFeedbackOptions()\n         .setFilter(new ListMetricFeedbackFilter()\n             .setStartTime(startTime)\n             .setTimeMode(FeedbackQueryTimeMode.FEEDBACK_CREATED_TIME)\n             .setEndTime(endTime)))\n     .subscribe(metricFeedback -> {\n         System.out.printf(\"Data Feed Metric feedback Id: %s%n\", metricFeedback.getId());\n         System.out.printf(\"Data Feed Metric feedback associated dimension filter: %s%n\",\n             metricFeedback.getDimensionFilter().asMap());\n         System.out.printf(\"Data Feed Metric feedback created time %s%n\", metricFeedback.getCreatedTime());\n \n         if (PERIOD.equals(metricFeedback.getFeedbackType())) {\n             MetricPeriodFeedback periodFeedback\n                 = (MetricPeriodFeedback) metricFeedback;\n             System.out.printf(\"Data Feed Metric feedback type: %s%n\",\n                 periodFeedback.getPeriodType().toString());\n             System.out.printf(\"Data Feed Metric feedback period value: %f%n\",\n                 periodFeedback.getPeriodValue());\n         } else if (ANOMALY.equals(metricFeedback.getFeedbackType())) {\n             MetricAnomalyFeedback metricAnomalyFeedback\n                 = (MetricAnomalyFeedback) metricFeedback;\n             System.out.printf(\"Data Feed Metric feedback anomaly value: %s%n\",\n                 metricAnomalyFeedback.getAnomalyValue().toString());\n             System.out.printf(\"Data Feed Metric feedback associated detection configuration: %s%n\",\n                 metricAnomalyFeedback.getDetectionConfigurationId());\n         } else if (COMMENT.equals(metricFeedback.getFeedbackType())) {\n             MetricCommentFeedback metricCommentFeedback\n                 = (MetricCommentFeedback) metricFeedback;\n             System.out.printf(\"Data Feed Metric feedback comment value: %s%n\",\n                 metricCommentFeedback.getComment());\n         }\n     });\n```"
  syntax:
    content: public PagedFlux<MetricFeedback> listFeedback(String metricId, ListMetricFeedbackOptions options)
    parameters:
    - id: metricId
      type: java.lang.String
      description: the unique metric Id.
    - id: options
      type: com.azure.ai.metricsadvisor.models.ListMetricFeedbackOptions
      description: >-
        The configurable <xref uid="com.azure.ai.metricsadvisor.models.ListMetricFeedbackOptions" data-throw-if-not-resolved="false">options</xref> to pass for filtering the output
         result.
    return:
      type: com.azure.core.http.rest.PagedFlux<com.azure.ai.metricsadvisor.models.MetricFeedback>
      description: >-
        A <xref uid="com.azure.core.http.rest.PagedFlux" data-throw-if-not-resolved="false">PagedFlux</xref> containing information of all the <xref uid="com.azure.ai.metricsadvisor.models.MetricFeedback" data-throw-if-not-resolved="false">metric feedbacks</xref> in
         the account.
- uid: com.azure.ai.metricsadvisor.MetricsAdvisorAsyncClient.listIncidentRootCauses(com.azure.ai.metricsadvisor.models.AnomalyIncident)
  id: listIncidentRootCauses(com.azure.ai.metricsadvisor.models.AnomalyIncident)
  artifact: com.azure:azure-ai-metricsadvisor:1.0.0-beta.2
  parent: com.azure.ai.metricsadvisor.MetricsAdvisorAsyncClient
  langs:
  - java
  name: listIncidentRootCauses(AnomalyIncident anomalyIncident)
  nameWithType: MetricsAdvisorAsyncClient.listIncidentRootCauses(AnomalyIncident anomalyIncident)
  fullName: com.azure.ai.metricsadvisor.MetricsAdvisorAsyncClient.listIncidentRootCauses(AnomalyIncident anomalyIncident)
  overload: com.azure.ai.metricsadvisor.MetricsAdvisorAsyncClient.listIncidentRootCauses*
  type: Method
  package: com.azure.ai.metricsadvisor
  summary: "List the root causes for an anomalyIncident.\n\n**Code sample**\n\n```java\nfinal String detectionConfigurationId = \"c0f2539f-b804-4ab9-a70f-0da0c89c76d8\";\n final OffsetDateTime startTime = OffsetDateTime.parse(\"2020-01-01T00:00:00Z\");\n final OffsetDateTime endTime = OffsetDateTime.parse(\"2020-09-09T00:00:00Z\");\n final ListIncidentsDetectedOptions options\n     = new ListIncidentsDetectedOptions()\n     .setTop(10);\n \n metricsAdvisorAsyncClient.listIncidentsForDetectionConfig(detectionConfigurationId, startTime, endTime, options)\n     .flatMap(incident -> {\n         return metricsAdvisorAsyncClient.listIncidentRootCauses(incident);\n     })\n     .subscribe(incidentRootCause -> {\n         System.out.printf(\"Description: %s%n\", incidentRootCause.getDescription());\n         System.out.printf(\"Series Key:\");\n         System.out.println(incidentRootCause.getSeriesKey().asMap());\n     });\n```"
  syntax:
    content: public PagedFlux<IncidentRootCause> listIncidentRootCauses(AnomalyIncident anomalyIncident)
    parameters:
    - id: anomalyIncident
      type: com.azure.ai.metricsadvisor.models.AnomalyIncident
      description: the anomalyIncident for which you want to query root causes for.
    return:
      type: com.azure.core.http.rest.PagedFlux<com.azure.ai.metricsadvisor.models.IncidentRootCause>
      description: the list of root causes for that anomalyIncident.
- uid: com.azure.ai.metricsadvisor.MetricsAdvisorAsyncClient.listIncidentRootCauses(java.lang.String,java.lang.String)
  id: listIncidentRootCauses(java.lang.String,java.lang.String)
  artifact: com.azure:azure-ai-metricsadvisor:1.0.0-beta.2
  parent: com.azure.ai.metricsadvisor.MetricsAdvisorAsyncClient
  langs:
  - java
  name: listIncidentRootCauses(String detectionConfigurationId, String incidentId)
  nameWithType: MetricsAdvisorAsyncClient.listIncidentRootCauses(String detectionConfigurationId, String incidentId)
  fullName: com.azure.ai.metricsadvisor.MetricsAdvisorAsyncClient.listIncidentRootCauses(String detectionConfigurationId, String incidentId)
  overload: com.azure.ai.metricsadvisor.MetricsAdvisorAsyncClient.listIncidentRootCauses*
  type: Method
  package: com.azure.ai.metricsadvisor
  summary: "List the root causes for an incident.\n\n**Code sample**\n\n```java\nfinal String detectionConfigurationId = \"c0dddf2539f-b804-4ab9-a70f-0da0c89c76d8\";\n final String incidentId = \"c5thh0f2539f-b804-4ab9-a70f-0da0c89c456d\";\n \n metricsAdvisorAsyncClient.listIncidentRootCauses(detectionConfigurationId, incidentId)\n     .subscribe(incidentRootCause -> {\n         System.out.printf(\"Description: %s%n\", incidentRootCause.getDescription());\n         System.out.println(\"Series Key:\");\n         System.out.println(incidentRootCause.getSeriesKey().asMap());\n         System.out.printf(\"Confidence for the detected incident root cause: %.2f%n\",\n             incidentRootCause.getContributionScore());\n     });\n```"
  syntax:
    content: public PagedFlux<IncidentRootCause> listIncidentRootCauses(String detectionConfigurationId, String incidentId)
    parameters:
    - id: detectionConfigurationId
      type: java.lang.String
      description: anomaly detection configuration unique id.
    - id: incidentId
      type: java.lang.String
      description: the incident for which you want to query root causes for.
    return:
      type: com.azure.core.http.rest.PagedFlux<com.azure.ai.metricsadvisor.models.IncidentRootCause>
      description: the list of root causes for that incident.
- uid: com.azure.ai.metricsadvisor.MetricsAdvisorAsyncClient.listIncidentsForAlert(java.lang.String,java.lang.String,com.azure.ai.metricsadvisor.models.ListIncidentsAlertedOptions)
  id: listIncidentsForAlert(java.lang.String,java.lang.String,com.azure.ai.metricsadvisor.models.ListIncidentsAlertedOptions)
  artifact: com.azure:azure-ai-metricsadvisor:1.0.0-beta.2
  parent: com.azure.ai.metricsadvisor.MetricsAdvisorAsyncClient
  langs:
  - java
  name: listIncidentsForAlert(String alertConfigurationId, String alertId, ListIncidentsAlertedOptions options)
  nameWithType: MetricsAdvisorAsyncClient.listIncidentsForAlert(String alertConfigurationId, String alertId, ListIncidentsAlertedOptions options)
  fullName: com.azure.ai.metricsadvisor.MetricsAdvisorAsyncClient.listIncidentsForAlert(String alertConfigurationId, String alertId, ListIncidentsAlertedOptions options)
  overload: com.azure.ai.metricsadvisor.MetricsAdvisorAsyncClient.listIncidentsForAlert*
  type: Method
  package: com.azure.ai.metricsadvisor
  summary: "Fetch the incidents in an alert.\n\n**Code sample**\n\n```java\nfinal String alertConfigurationId = \"ff3014a0-bbbb-41ec-a637-677e77b81299\";\n final String alertId = \"1746b031c00\";\n final ListIncidentsAlertedOptions options = new ListIncidentsAlertedOptions()\n     .setTop(10);\n \n metricsAdvisorAsyncClient.listIncidentsForAlert(\n     alertConfigurationId,\n     alertId,\n     options)\n     .subscribe(incident -> {\n         System.out.printf(\"Data Feed Metric Id: %s%n\", incident.getMetricId());\n         System.out.printf(\"Detection Configuration Id: %s%n\", incident.getDetectionConfigurationId());\n         System.out.printf(\"Anomaly Incident Id: %s%n\", incident.getId());\n         System.out.printf(\"Anomaly Incident Start Time: %s%n\", incident.getStartTime());\n         System.out.printf(\"Anomaly Incident AnomalySeverity: %s%n\", incident.getSeverity());\n         System.out.printf(\"Anomaly Incident Status: %s%n\", incident.getStatus());\n         System.out.printf(\"Root DataFeedDimension Key:\");\n         DimensionKey rootDimension = incident.getRootDimensionKey();\n         for (Map.Entry<String, String> dimension : rootDimension.asMap().entrySet()) {\n             System.out.printf(\"DimensionName: %s DimensionValue:%s%n\",\n                 dimension.getKey(), dimension.getValue());\n         }\n     });\n```"
  syntax:
    content: public PagedFlux<AnomalyIncident> listIncidentsForAlert(String alertConfigurationId, String alertId, ListIncidentsAlertedOptions options)
    parameters:
    - id: alertConfigurationId
      type: java.lang.String
      description: The anomaly alert configuration id.
    - id: alertId
      type: java.lang.String
      description: The alert id.
    - id: options
      type: com.azure.ai.metricsadvisor.models.ListIncidentsAlertedOptions
      description: The additional parameters.
    return:
      type: com.azure.core.http.rest.PagedFlux<com.azure.ai.metricsadvisor.models.AnomalyIncident>
      description: The incidents.
- uid: com.azure.ai.metricsadvisor.MetricsAdvisorAsyncClient.listIncidentsForDetectionConfig(java.lang.String,java.time.OffsetDateTime,java.time.OffsetDateTime,com.azure.ai.metricsadvisor.models.ListIncidentsDetectedOptions)
  id: listIncidentsForDetectionConfig(java.lang.String,java.time.OffsetDateTime,java.time.OffsetDateTime,com.azure.ai.metricsadvisor.models.ListIncidentsDetectedOptions)
  artifact: com.azure:azure-ai-metricsadvisor:1.0.0-beta.2
  parent: com.azure.ai.metricsadvisor.MetricsAdvisorAsyncClient
  langs:
  - java
  name: listIncidentsForDetectionConfig(String detectionConfigurationId, OffsetDateTime startTime, OffsetDateTime endTime, ListIncidentsDetectedOptions options)
  nameWithType: MetricsAdvisorAsyncClient.listIncidentsForDetectionConfig(String detectionConfigurationId, OffsetDateTime startTime, OffsetDateTime endTime, ListIncidentsDetectedOptions options)
  fullName: com.azure.ai.metricsadvisor.MetricsAdvisorAsyncClient.listIncidentsForDetectionConfig(String detectionConfigurationId, OffsetDateTime startTime, OffsetDateTime endTime, ListIncidentsDetectedOptions options)
  overload: com.azure.ai.metricsadvisor.MetricsAdvisorAsyncClient.listIncidentsForDetectionConfig*
  type: Method
  package: com.azure.ai.metricsadvisor
  summary: "Fetch the incidents identified by an anomaly detection configuration.\n\n**Code sample**\n\n```java\nfinal String detectionConfigurationId = \"c0f2539f-b804-4ab9-a70f-0da0c89c76d8\";\n final OffsetDateTime startTime = OffsetDateTime.parse(\"2020-09-09T00:00:00Z\");\n final OffsetDateTime endTime = OffsetDateTime.parse(\"2020-09-09T12:00:00Z\");\n final ListIncidentsDetectedOptions options = new ListIncidentsDetectedOptions()\n     .setTop(1000);\n \n PagedFlux<AnomalyIncident> incidentsFlux\n     = metricsAdvisorAsyncClient.listIncidentsForDetectionConfig(detectionConfigurationId, startTime, endTime, options);\n \n incidentsFlux.subscribe(incident -> {\n     System.out.printf(\"Data Feed Metric Id: %s%n\", incident.getMetricId());\n     System.out.printf(\"Detection Configuration Id: %s%n\", incident.getDetectionConfigurationId());\n     System.out.printf(\"Anomaly Incident Id: %s%n\", incident.getId());\n     System.out.printf(\"Anomaly Incident Start Time: %s%n\", incident.getStartTime());\n     System.out.printf(\"Anomaly Incident AnomalySeverity: %s%n\", incident.getSeverity());\n     System.out.printf(\"Anomaly Incident Status: %s%n\", incident.getStatus());\n     System.out.printf(\"Root DataFeedDimension Key: %s%n\", incident.getRootDimensionKey().asMap());\n });\n```"
  syntax:
    content: public PagedFlux<AnomalyIncident> listIncidentsForDetectionConfig(String detectionConfigurationId, OffsetDateTime startTime, OffsetDateTime endTime, ListIncidentsDetectedOptions options)
    parameters:
    - id: detectionConfigurationId
      type: java.lang.String
      description: The anomaly detection configuration id.
    - id: startTime
      type: java.time.OffsetDateTime
      description: The start time of the time range within which the incidents were detected.
    - id: endTime
      type: java.time.OffsetDateTime
      description: The end time of the time range within which the incidents were detected.
    - id: options
      type: com.azure.ai.metricsadvisor.models.ListIncidentsDetectedOptions
      description: The additional parameters.
    return:
      type: com.azure.core.http.rest.PagedFlux<com.azure.ai.metricsadvisor.models.AnomalyIncident>
      description: The incidents.
- uid: com.azure.ai.metricsadvisor.MetricsAdvisorAsyncClient.listMetricDimensionValues(java.lang.String,java.lang.String)
  id: listMetricDimensionValues(java.lang.String,java.lang.String)
  artifact: com.azure:azure-ai-metricsadvisor:1.0.0-beta.2
  parent: com.azure.ai.metricsadvisor.MetricsAdvisorAsyncClient
  langs:
  - java
  name: listMetricDimensionValues(String metricId, String dimensionName)
  nameWithType: MetricsAdvisorAsyncClient.listMetricDimensionValues(String metricId, String dimensionName)
  fullName: com.azure.ai.metricsadvisor.MetricsAdvisorAsyncClient.listMetricDimensionValues(String metricId, String dimensionName)
  overload: com.azure.ai.metricsadvisor.MetricsAdvisorAsyncClient.listMetricDimensionValues*
  type: Method
  package: com.azure.ai.metricsadvisor
  summary: >-
    List dimension values from certain metric.


    **Code sample**


    ```java

    metricsAdvisorAsyncClient.listMetricDimensionValues("metricId", "dimension1")
         .subscribe(System.out::println);
    ```
  syntax:
    content: public PagedFlux<String> listMetricDimensionValues(String metricId, String dimensionName)
    parameters:
    - id: metricId
      type: java.lang.String
      description: metric unique id.
    - id: dimensionName
      type: java.lang.String
      description: the query dimension name.
    return:
      type: com.azure.core.http.rest.PagedFlux<java.lang.String>
      description: the <xref uid="com.azure.core.http.rest.PagedFlux" data-throw-if-not-resolved="false">PagedFlux</xref> of the dimension values for that metric.
- uid: com.azure.ai.metricsadvisor.MetricsAdvisorAsyncClient.listMetricDimensionValues(java.lang.String,java.lang.String,com.azure.ai.metricsadvisor.models.ListMetricDimensionValuesOptions)
  id: listMetricDimensionValues(java.lang.String,java.lang.String,com.azure.ai.metricsadvisor.models.ListMetricDimensionValuesOptions)
  artifact: com.azure:azure-ai-metricsadvisor:1.0.0-beta.2
  parent: com.azure.ai.metricsadvisor.MetricsAdvisorAsyncClient
  langs:
  - java
  name: listMetricDimensionValues(String metricId, String dimensionName, ListMetricDimensionValuesOptions options)
  nameWithType: MetricsAdvisorAsyncClient.listMetricDimensionValues(String metricId, String dimensionName, ListMetricDimensionValuesOptions options)
  fullName: com.azure.ai.metricsadvisor.MetricsAdvisorAsyncClient.listMetricDimensionValues(String metricId, String dimensionName, ListMetricDimensionValuesOptions options)
  overload: com.azure.ai.metricsadvisor.MetricsAdvisorAsyncClient.listMetricDimensionValues*
  type: Method
  package: com.azure.ai.metricsadvisor
  summary: >-
    List dimension values from certain metric.


    **Code sample**


    ```java

    metricsAdvisorAsyncClient.listMetricDimensionValues("metricId", "dimension1",
         new ListMetricDimensionValuesOptions().setDimensionValueToFilter("value1").setTop(3))
         .subscribe(System.out::println);
    ```
  syntax:
    content: public PagedFlux<String> listMetricDimensionValues(String metricId, String dimensionName, ListMetricDimensionValuesOptions options)
    parameters:
    - id: metricId
      type: java.lang.String
      description: metric unique id.
    - id: dimensionName
      type: java.lang.String
      description: the query dimension name.
    - id: options
      type: com.azure.ai.metricsadvisor.models.ListMetricDimensionValuesOptions
      description: the additional filtering parameters to specify while querying.
    return:
      type: com.azure.core.http.rest.PagedFlux<java.lang.String>
      description: the <xref uid="com.azure.core.http.rest.PagedFlux" data-throw-if-not-resolved="false">PagedFlux</xref> of the dimension values for that metric.
- uid: com.azure.ai.metricsadvisor.MetricsAdvisorAsyncClient.listMetricEnrichedSeriesData(java.util.List<com.azure.ai.metricsadvisor.models.DimensionKey>,java.lang.String,java.time.OffsetDateTime,java.time.OffsetDateTime)
  id: listMetricEnrichedSeriesData(java.util.List<com.azure.ai.metricsadvisor.models.DimensionKey>,java.lang.String,java.time.OffsetDateTime,java.time.OffsetDateTime)
  artifact: com.azure:azure-ai-metricsadvisor:1.0.0-beta.2
  parent: com.azure.ai.metricsadvisor.MetricsAdvisorAsyncClient
  langs:
  - java
  name: listMetricEnrichedSeriesData(List<DimensionKey> seriesKeys, String detectionConfigurationId, OffsetDateTime startTime, OffsetDateTime endTime)
  nameWithType: MetricsAdvisorAsyncClient.listMetricEnrichedSeriesData(List<DimensionKey> seriesKeys, String detectionConfigurationId, OffsetDateTime startTime, OffsetDateTime endTime)
  fullName: com.azure.ai.metricsadvisor.MetricsAdvisorAsyncClient.listMetricEnrichedSeriesData(List<DimensionKey> seriesKeys, String detectionConfigurationId, OffsetDateTime startTime, OffsetDateTime endTime)
  overload: com.azure.ai.metricsadvisor.MetricsAdvisorAsyncClient.listMetricEnrichedSeriesData*
  type: Method
  package: com.azure.ai.metricsadvisor
  summary: "Given a list of time series keys, retrieve time series version enriched using a detection configuration.\n\n**Code sample**\n\n```java\nfinal String detectionConfigurationId = \"e87d899d-a5a0-4259-b752-11aea34d5e34\";\n final DimensionKey seriesKey = new DimensionKey()\n     .put(\"Dim1\", \"Common Lime\")\n     .put(\"Dim2\", \"Antelope\");\n final OffsetDateTime startTime = OffsetDateTime.parse(\"2020-08-12T00:00:00Z\");\n final OffsetDateTime endTime = OffsetDateTime.parse(\"2020-09-12T00:00:00Z\");\n \n PagedFlux<MetricEnrichedSeriesData> enrichedDataFlux\n     = metricsAdvisorAsyncClient.listMetricEnrichedSeriesData(Arrays.asList(seriesKey),\n     detectionConfigurationId,\n     startTime,\n     endTime);\n \n enrichedDataFlux.subscribe(enrichedData -> {\n     System.out.printf(\"Series Key %s%n:\", enrichedData.getSeriesKey().asMap());\n     System.out.println(\"List of data points for this series\");\n     System.out.println(enrichedData.getMetricValues());\n     System.out.println(\"Timestamps of the data related to this time series:\");\n     System.out.println(enrichedData.getTimestamps());\n     System.out.println(\"The expected values of the data points calculated by the smart detector:\");\n     System.out.println(enrichedData.getExpectedMetricValues());\n     System.out.println(\"The lower boundary values of the data points calculated by smart detector:\");\n     System.out.println(enrichedData.getLowerBoundaryValues());\n     System.out.println(\"the periods calculated for the data points in the time series:\");\n     System.out.println(enrichedData.getPeriods());\n });\n```"
  syntax:
    content: public PagedFlux<MetricEnrichedSeriesData> listMetricEnrichedSeriesData(List<DimensionKey> seriesKeys, String detectionConfigurationId, OffsetDateTime startTime, OffsetDateTime endTime)
    parameters:
    - id: seriesKeys
      type: java.util.List<com.azure.ai.metricsadvisor.models.DimensionKey>
      description: The time series key list, each key identifies a specific time series.
    - id: detectionConfigurationId
      type: java.lang.String
      description: >-
        The id of the configuration used to enrich the time series
             identified by the keys in <code>seriesKeys</code>.
    - id: startTime
      type: java.time.OffsetDateTime
      description: The start time of the time range within which the enriched data is returned.
    - id: endTime
      type: java.time.OffsetDateTime
      description: The end time of the time range within which the enriched data is returned.
    return:
      type: com.azure.core.http.rest.PagedFlux<com.azure.ai.metricsadvisor.models.MetricEnrichedSeriesData>
      description: The enriched time series.
- uid: com.azure.ai.metricsadvisor.MetricsAdvisorAsyncClient.listMetricEnrichmentStatus(java.lang.String,java.time.OffsetDateTime,java.time.OffsetDateTime,com.azure.ai.metricsadvisor.models.ListMetricEnrichmentStatusOptions)
  id: listMetricEnrichmentStatus(java.lang.String,java.time.OffsetDateTime,java.time.OffsetDateTime,com.azure.ai.metricsadvisor.models.ListMetricEnrichmentStatusOptions)
  artifact: com.azure:azure-ai-metricsadvisor:1.0.0-beta.2
  parent: com.azure.ai.metricsadvisor.MetricsAdvisorAsyncClient
  langs:
  - java
  name: listMetricEnrichmentStatus(String metricId, OffsetDateTime startTime, OffsetDateTime endTime, ListMetricEnrichmentStatusOptions options)
  nameWithType: MetricsAdvisorAsyncClient.listMetricEnrichmentStatus(String metricId, OffsetDateTime startTime, OffsetDateTime endTime, ListMetricEnrichmentStatusOptions options)
  fullName: com.azure.ai.metricsadvisor.MetricsAdvisorAsyncClient.listMetricEnrichmentStatus(String metricId, OffsetDateTime startTime, OffsetDateTime endTime, ListMetricEnrichmentStatusOptions options)
  overload: com.azure.ai.metricsadvisor.MetricsAdvisorAsyncClient.listMetricEnrichmentStatus*
  type: Method
  package: com.azure.ai.metricsadvisor
  summary: "List the enrichment status for a metric.\n\n**Code sample**\n\n```java\nfinal OffsetDateTime startTime = OffsetDateTime.parse(\"2020-01-01T00:00:00Z\");\n final OffsetDateTime endTime = OffsetDateTime.parse(\"2020-09-09T00:00:00Z\");\n final String metricId = \"d3gh4i4-b804-4ab9-a70f-0da0c89cft3l\";\n final ListMetricEnrichmentStatusOptions options = new ListMetricEnrichmentStatusOptions().setTop(10);\n \n metricsAdvisorAsyncClient.listMetricEnrichmentStatus(metricId, startTime, endTime, options)\n     .subscribe(enrichmentStatus -> {\n         System.out.printf(\"Data Feed Metric enrichment status : %s%n\", enrichmentStatus.getStatus());\n         System.out.printf(\"Data Feed Metric enrichment status message: %s%n\", enrichmentStatus.getMessage());\n         System.out.printf(\"Data Feed Metric enrichment status data slice timestamp : %s%n\",\n             enrichmentStatus.getTimestamp());\n     });\n```"
  syntax:
    content: public PagedFlux<EnrichmentStatus> listMetricEnrichmentStatus(String metricId, OffsetDateTime startTime, OffsetDateTime endTime, ListMetricEnrichmentStatusOptions options)
    parameters:
    - id: metricId
      type: java.lang.String
      description: metric unique id.
    - id: startTime
      type: java.time.OffsetDateTime
      description: The start time for querying the time series data.
    - id: endTime
      type: java.time.OffsetDateTime
      description: The end time for querying the time series data.
    - id: options
      type: com.azure.ai.metricsadvisor.models.ListMetricEnrichmentStatusOptions
      description: th e additional configurable options to specify when querying the result..
    return:
      type: com.azure.core.http.rest.PagedFlux<com.azure.ai.metricsadvisor.models.EnrichmentStatus>
      description: the list of enrichment status's for the specified metric.
- uid: com.azure.ai.metricsadvisor.MetricsAdvisorAsyncClient.listMetricSeriesData(java.lang.String,java.util.List<com.azure.ai.metricsadvisor.models.DimensionKey>,java.time.OffsetDateTime,java.time.OffsetDateTime)
  id: listMetricSeriesData(java.lang.String,java.util.List<com.azure.ai.metricsadvisor.models.DimensionKey>,java.time.OffsetDateTime,java.time.OffsetDateTime)
  artifact: com.azure:azure-ai-metricsadvisor:1.0.0-beta.2
  parent: com.azure.ai.metricsadvisor.MetricsAdvisorAsyncClient
  langs:
  - java
  name: listMetricSeriesData(String metricId, List<DimensionKey> seriesKeys, OffsetDateTime startTime, OffsetDateTime endTime)
  nameWithType: MetricsAdvisorAsyncClient.listMetricSeriesData(String metricId, List<DimensionKey> seriesKeys, OffsetDateTime startTime, OffsetDateTime endTime)
  fullName: com.azure.ai.metricsadvisor.MetricsAdvisorAsyncClient.listMetricSeriesData(String metricId, List<DimensionKey> seriesKeys, OffsetDateTime startTime, OffsetDateTime endTime)
  overload: com.azure.ai.metricsadvisor.MetricsAdvisorAsyncClient.listMetricSeriesData*
  type: Method
  package: com.azure.ai.metricsadvisor
  summary: "Get time series data from metric.\n\n**Code sample**\n\n```java\nfinal String metricId = \"2dgfbbbb-41ec-a637-677e77b81455\";\n final OffsetDateTime startTime = OffsetDateTime.parse(\"2020-09-09T00:00:00Z\");\n final OffsetDateTime endTime = OffsetDateTime.parse(\"2020-09-09T12:00:00Z\");\n \n final List<DimensionKey> seriesKeyFilter\n     = Arrays.asList(new DimensionKey().put(\"cost\", \"redmond\"));\n \n metricsAdvisorAsyncClient.listMetricSeriesData(metricId, seriesKeyFilter, startTime, endTime)\n     .subscribe(metricSeriesData -> {\n         System.out.println(\"List of data points for this series:\");\n         System.out.println(metricSeriesData.getMetricValues());\n         System.out.println(\"Timestamps of the data related to this time series:\");\n         System.out.println(metricSeriesData.getTimestamps());\n         System.out.printf(\"Series Key:\");\n         System.out.println(metricSeriesData.getSeriesKey().asMap());\n     });\n```"
  syntax:
    content: public PagedFlux<MetricSeriesData> listMetricSeriesData(String metricId, List<DimensionKey> seriesKeys, OffsetDateTime startTime, OffsetDateTime endTime)
    parameters:
    - id: metricId
      type: java.lang.String
      description: metric unique id.
    - id: seriesKeys
      type: java.util.List<com.azure.ai.metricsadvisor.models.DimensionKey>
      description: >-
        the series key to filter.
         <p>This enables additional filtering of dimension values being queried.
         For example, let's say we've the dimensions 'category' and 'city',
         so the api can query value of the dimension 'category', with series key as 'city=redmond'.
         </p>
    - id: startTime
      type: java.time.OffsetDateTime
      description: The start time for querying the time series data.
    - id: endTime
      type: java.time.OffsetDateTime
      description: The end time for querying the time series data.
    return:
      type: com.azure.core.http.rest.PagedFlux<com.azure.ai.metricsadvisor.models.MetricSeriesData>
      description: A <xref uid="com.azure.core.http.rest.PagedFlux" data-throw-if-not-resolved="false">PagedFlux</xref> of the <xref uid="com.azure.ai.metricsadvisor.models.MetricSeriesData" data-throw-if-not-resolved="false">metric series data points</xref>.
- uid: com.azure.ai.metricsadvisor.MetricsAdvisorAsyncClient.listMetricSeriesDefinitions(java.lang.String,java.time.OffsetDateTime,com.azure.ai.metricsadvisor.models.ListMetricSeriesDefinitionOptions)
  id: listMetricSeriesDefinitions(java.lang.String,java.time.OffsetDateTime,com.azure.ai.metricsadvisor.models.ListMetricSeriesDefinitionOptions)
  artifact: com.azure:azure-ai-metricsadvisor:1.0.0-beta.2
  parent: com.azure.ai.metricsadvisor.MetricsAdvisorAsyncClient
  langs:
  - java
  name: listMetricSeriesDefinitions(String metricId, OffsetDateTime activeSince, ListMetricSeriesDefinitionOptions options)
  nameWithType: MetricsAdvisorAsyncClient.listMetricSeriesDefinitions(String metricId, OffsetDateTime activeSince, ListMetricSeriesDefinitionOptions options)
  fullName: com.azure.ai.metricsadvisor.MetricsAdvisorAsyncClient.listMetricSeriesDefinitions(String metricId, OffsetDateTime activeSince, ListMetricSeriesDefinitionOptions options)
  overload: com.azure.ai.metricsadvisor.MetricsAdvisorAsyncClient.listMetricSeriesDefinitions*
  type: Method
  package: com.azure.ai.metricsadvisor
  summary: "List series definition for a metric.\n\n**Code sample**\n\n```java\nString metricId = \"b460abfc-7a58-47d7-9d99-21ee21fdfc6e\";\n final OffsetDateTime activeSince = OffsetDateTime.parse(\"2020-07-10T00:00:00Z\");\n final ListMetricSeriesDefinitionOptions options\n     = new ListMetricSeriesDefinitionOptions()\n     .setTop(10)\n     .setDimensionCombinationToFilter(new HashMap<String, List<String>>() {{\n             put(\"Dim2\", Collections.singletonList(\"Angelfish\"));\n         }});\n \n metricsAdvisorAsyncClient.listMetricSeriesDefinitions(metricId, activeSince, options)\n     .subscribe(metricSeriesDefinition -> {\n         System.out.printf(\"Data Feed Metric id for the retrieved series definition : %s%n\",\n             metricSeriesDefinition.getMetricId());\n         System.out.printf(\"Series Key:\");\n         System.out.println(metricSeriesDefinition.getSeriesKey().asMap());\n     });\n```"
  syntax:
    content: public PagedFlux<MetricSeriesDefinition> listMetricSeriesDefinitions(String metricId, OffsetDateTime activeSince, ListMetricSeriesDefinitionOptions options)
    parameters:
    - id: metricId
      type: java.lang.String
      description: metric unique id.
    - id: activeSince
      type: java.time.OffsetDateTime
      description: the start time for querying series ingested after this time.
    - id: options
      type: com.azure.ai.metricsadvisor.models.ListMetricSeriesDefinitionOptions
      description: the additional filtering attributes that can be provided to query the series.
    return:
      type: com.azure.core.http.rest.PagedFlux<com.azure.ai.metricsadvisor.models.MetricSeriesDefinition>
      description: A <xref uid="com.azure.core.http.rest.PagedFlux" data-throw-if-not-resolved="false">PagedFlux</xref> of the <xref uid="com.azure.ai.metricsadvisor.models.MetricSeriesDefinition" data-throw-if-not-resolved="false">metric series definitions</xref>.
references:
- uid: com.azure.ai.metricsadvisor.implementation.AzureCognitiveServiceMetricsAdvisorRestAPIOpenAPIV2Impl
  name: AzureCognitiveServiceMetricsAdvisorRestAPIOpenAPIV2Impl
  nameWithType: AzureCognitiveServiceMetricsAdvisorRestAPIOpenAPIV2Impl
  fullName: com.azure.ai.metricsadvisor.implementation.AzureCognitiveServiceMetricsAdvisorRestAPIOpenAPIV2Impl
- uid: com.azure.ai.metricsadvisor.models.MetricsAdvisorServiceVersion
  name: MetricsAdvisorServiceVersion
  nameWithType: MetricsAdvisorServiceVersion
  fullName: com.azure.ai.metricsadvisor.models.MetricsAdvisorServiceVersion
- uid: com.azure.ai.metricsadvisor.MetricsAdvisorAsyncClient.MetricsAdvisorAsyncClient*
  name: MetricsAdvisorAsyncClient
  nameWithType: MetricsAdvisorAsyncClient.MetricsAdvisorAsyncClient
  fullName: com.azure.ai.metricsadvisor.MetricsAdvisorAsyncClient.MetricsAdvisorAsyncClient
  package: com.azure.ai.metricsadvisor
- uid: java.lang.String
  spec.java:
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
- uid: java.time.OffsetDateTime
  spec.java:
  - uid: java.time.OffsetDateTime
    name: OffsetDateTime
    fullName: java.time.OffsetDateTime
- uid: com.azure.ai.metricsadvisor.models.ListMetricSeriesDefinitionOptions
  name: ListMetricSeriesDefinitionOptions
  nameWithType: ListMetricSeriesDefinitionOptions
  fullName: com.azure.ai.metricsadvisor.models.ListMetricSeriesDefinitionOptions
- uid: com.azure.core.http.rest.PagedFlux<com.azure.ai.metricsadvisor.models.MetricSeriesDefinition>
  spec.java:
  - uid: com.azure.core.http.rest.PagedFlux
    name: PagedFlux
    fullName: com.azure.core.http.rest.PagedFlux
  - name: <
    fullName: <
  - uid: com.azure.ai.metricsadvisor.models.MetricSeriesDefinition
    name: MetricSeriesDefinition
    fullName: com.azure.ai.metricsadvisor.models.MetricSeriesDefinition
  - name: '>'
    fullName: '>'
- uid: com.azure.ai.metricsadvisor.MetricsAdvisorAsyncClient.listMetricSeriesDefinitions*
  name: listMetricSeriesDefinitions
  nameWithType: MetricsAdvisorAsyncClient.listMetricSeriesDefinitions
  fullName: com.azure.ai.metricsadvisor.MetricsAdvisorAsyncClient.listMetricSeriesDefinitions
  package: com.azure.ai.metricsadvisor
- uid: java.util.List<com.azure.ai.metricsadvisor.models.DimensionKey>
  spec.java:
  - uid: java.util.List
    name: List
    fullName: java.util.List
  - name: <
    fullName: <
  - uid: com.azure.ai.metricsadvisor.models.DimensionKey
    name: DimensionKey
    fullName: com.azure.ai.metricsadvisor.models.DimensionKey
  - name: '>'
    fullName: '>'
- uid: com.azure.core.http.rest.PagedFlux<com.azure.ai.metricsadvisor.models.MetricSeriesData>
  spec.java:
  - uid: com.azure.core.http.rest.PagedFlux
    name: PagedFlux
    fullName: com.azure.core.http.rest.PagedFlux
  - name: <
    fullName: <
  - uid: com.azure.ai.metricsadvisor.models.MetricSeriesData
    name: MetricSeriesData
    fullName: com.azure.ai.metricsadvisor.models.MetricSeriesData
  - name: '>'
    fullName: '>'
- uid: com.azure.ai.metricsadvisor.MetricsAdvisorAsyncClient.listMetricSeriesData*
  name: listMetricSeriesData
  nameWithType: MetricsAdvisorAsyncClient.listMetricSeriesData
  fullName: com.azure.ai.metricsadvisor.MetricsAdvisorAsyncClient.listMetricSeriesData
  package: com.azure.ai.metricsadvisor
- uid: com.azure.core.http.rest.PagedFlux<java.lang.String>
  spec.java:
  - uid: com.azure.core.http.rest.PagedFlux
    name: PagedFlux
    fullName: com.azure.core.http.rest.PagedFlux
  - name: <
    fullName: <
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
  - name: '>'
    fullName: '>'
- uid: com.azure.ai.metricsadvisor.MetricsAdvisorAsyncClient.listMetricDimensionValues*
  name: listMetricDimensionValues
  nameWithType: MetricsAdvisorAsyncClient.listMetricDimensionValues
  fullName: com.azure.ai.metricsadvisor.MetricsAdvisorAsyncClient.listMetricDimensionValues
  package: com.azure.ai.metricsadvisor
- uid: com.azure.ai.metricsadvisor.models.ListMetricDimensionValuesOptions
  name: ListMetricDimensionValuesOptions
  nameWithType: ListMetricDimensionValuesOptions
  fullName: com.azure.ai.metricsadvisor.models.ListMetricDimensionValuesOptions
- uid: com.azure.ai.metricsadvisor.models.ListMetricEnrichmentStatusOptions
  name: ListMetricEnrichmentStatusOptions
  nameWithType: ListMetricEnrichmentStatusOptions
  fullName: com.azure.ai.metricsadvisor.models.ListMetricEnrichmentStatusOptions
- uid: com.azure.core.http.rest.PagedFlux<com.azure.ai.metricsadvisor.models.EnrichmentStatus>
  spec.java:
  - uid: com.azure.core.http.rest.PagedFlux
    name: PagedFlux
    fullName: com.azure.core.http.rest.PagedFlux
  - name: <
    fullName: <
  - uid: com.azure.ai.metricsadvisor.models.EnrichmentStatus
    name: EnrichmentStatus
    fullName: com.azure.ai.metricsadvisor.models.EnrichmentStatus
  - name: '>'
    fullName: '>'
- uid: com.azure.ai.metricsadvisor.MetricsAdvisorAsyncClient.listMetricEnrichmentStatus*
  name: listMetricEnrichmentStatus
  nameWithType: MetricsAdvisorAsyncClient.listMetricEnrichmentStatus
  fullName: com.azure.ai.metricsadvisor.MetricsAdvisorAsyncClient.listMetricEnrichmentStatus
  package: com.azure.ai.metricsadvisor
- uid: com.azure.core.http.rest.PagedFlux<com.azure.ai.metricsadvisor.models.MetricEnrichedSeriesData>
  spec.java:
  - uid: com.azure.core.http.rest.PagedFlux
    name: PagedFlux
    fullName: com.azure.core.http.rest.PagedFlux
  - name: <
    fullName: <
  - uid: com.azure.ai.metricsadvisor.models.MetricEnrichedSeriesData
    name: MetricEnrichedSeriesData
    fullName: com.azure.ai.metricsadvisor.models.MetricEnrichedSeriesData
  - name: '>'
    fullName: '>'
- uid: com.azure.ai.metricsadvisor.MetricsAdvisorAsyncClient.listMetricEnrichedSeriesData*
  name: listMetricEnrichedSeriesData
  nameWithType: MetricsAdvisorAsyncClient.listMetricEnrichedSeriesData
  fullName: com.azure.ai.metricsadvisor.MetricsAdvisorAsyncClient.listMetricEnrichedSeriesData
  package: com.azure.ai.metricsadvisor
- uid: com.azure.ai.metricsadvisor.models.ListAnomaliesDetectedOptions
  name: ListAnomaliesDetectedOptions
  nameWithType: ListAnomaliesDetectedOptions
  fullName: com.azure.ai.metricsadvisor.models.ListAnomaliesDetectedOptions
- uid: com.azure.core.http.rest.PagedFlux<com.azure.ai.metricsadvisor.models.DataPointAnomaly>
  spec.java:
  - uid: com.azure.core.http.rest.PagedFlux
    name: PagedFlux
    fullName: com.azure.core.http.rest.PagedFlux
  - name: <
    fullName: <
  - uid: com.azure.ai.metricsadvisor.models.DataPointAnomaly
    name: DataPointAnomaly
    fullName: com.azure.ai.metricsadvisor.models.DataPointAnomaly
  - name: '>'
    fullName: '>'
- uid: com.azure.ai.metricsadvisor.MetricsAdvisorAsyncClient.listAnomaliesForDetectionConfig*
  name: listAnomaliesForDetectionConfig
  nameWithType: MetricsAdvisorAsyncClient.listAnomaliesForDetectionConfig
  fullName: com.azure.ai.metricsadvisor.MetricsAdvisorAsyncClient.listAnomaliesForDetectionConfig
  package: com.azure.ai.metricsadvisor
- uid: com.azure.ai.metricsadvisor.models.ListIncidentsDetectedOptions
  name: ListIncidentsDetectedOptions
  nameWithType: ListIncidentsDetectedOptions
  fullName: com.azure.ai.metricsadvisor.models.ListIncidentsDetectedOptions
- uid: com.azure.core.http.rest.PagedFlux<com.azure.ai.metricsadvisor.models.AnomalyIncident>
  spec.java:
  - uid: com.azure.core.http.rest.PagedFlux
    name: PagedFlux
    fullName: com.azure.core.http.rest.PagedFlux
  - name: <
    fullName: <
  - uid: com.azure.ai.metricsadvisor.models.AnomalyIncident
    name: AnomalyIncident
    fullName: com.azure.ai.metricsadvisor.models.AnomalyIncident
  - name: '>'
    fullName: '>'
- uid: com.azure.ai.metricsadvisor.MetricsAdvisorAsyncClient.listIncidentsForDetectionConfig*
  name: listIncidentsForDetectionConfig
  nameWithType: MetricsAdvisorAsyncClient.listIncidentsForDetectionConfig
  fullName: com.azure.ai.metricsadvisor.MetricsAdvisorAsyncClient.listIncidentsForDetectionConfig
  package: com.azure.ai.metricsadvisor
- uid: com.azure.core.http.rest.PagedFlux<com.azure.ai.metricsadvisor.models.IncidentRootCause>
  spec.java:
  - uid: com.azure.core.http.rest.PagedFlux
    name: PagedFlux
    fullName: com.azure.core.http.rest.PagedFlux
  - name: <
    fullName: <
  - uid: com.azure.ai.metricsadvisor.models.IncidentRootCause
    name: IncidentRootCause
    fullName: com.azure.ai.metricsadvisor.models.IncidentRootCause
  - name: '>'
    fullName: '>'
- uid: com.azure.ai.metricsadvisor.MetricsAdvisorAsyncClient.listIncidentRootCauses*
  name: listIncidentRootCauses
  nameWithType: MetricsAdvisorAsyncClient.listIncidentRootCauses
  fullName: com.azure.ai.metricsadvisor.MetricsAdvisorAsyncClient.listIncidentRootCauses
  package: com.azure.ai.metricsadvisor
- uid: com.azure.ai.metricsadvisor.models.AnomalyIncident
  name: AnomalyIncident
  nameWithType: AnomalyIncident
  fullName: com.azure.ai.metricsadvisor.models.AnomalyIncident
- uid: com.azure.ai.metricsadvisor.models.ListDimensionValuesWithAnomaliesOptions
  name: ListDimensionValuesWithAnomaliesOptions
  nameWithType: ListDimensionValuesWithAnomaliesOptions
  fullName: com.azure.ai.metricsadvisor.models.ListDimensionValuesWithAnomaliesOptions
- uid: com.azure.ai.metricsadvisor.MetricsAdvisorAsyncClient.listDimensionValuesWithAnomalies*
  name: listDimensionValuesWithAnomalies
  nameWithType: MetricsAdvisorAsyncClient.listDimensionValuesWithAnomalies
  fullName: com.azure.ai.metricsadvisor.MetricsAdvisorAsyncClient.listDimensionValuesWithAnomalies
  package: com.azure.ai.metricsadvisor
- uid: com.azure.ai.metricsadvisor.models.ListAlertOptions
  name: ListAlertOptions
  nameWithType: ListAlertOptions
  fullName: com.azure.ai.metricsadvisor.models.ListAlertOptions
- uid: com.azure.core.http.rest.PagedFlux<com.azure.ai.metricsadvisor.models.AnomalyAlert>
  spec.java:
  - uid: com.azure.core.http.rest.PagedFlux
    name: PagedFlux
    fullName: com.azure.core.http.rest.PagedFlux
  - name: <
    fullName: <
  - uid: com.azure.ai.metricsadvisor.models.AnomalyAlert
    name: AnomalyAlert
    fullName: com.azure.ai.metricsadvisor.models.AnomalyAlert
  - name: '>'
    fullName: '>'
- uid: com.azure.ai.metricsadvisor.MetricsAdvisorAsyncClient.listAlerts*
  name: listAlerts
  nameWithType: MetricsAdvisorAsyncClient.listAlerts
  fullName: com.azure.ai.metricsadvisor.MetricsAdvisorAsyncClient.listAlerts
  package: com.azure.ai.metricsadvisor
- uid: com.azure.ai.metricsadvisor.MetricsAdvisorAsyncClient.listAnomaliesForAlert*
  name: listAnomaliesForAlert
  nameWithType: MetricsAdvisorAsyncClient.listAnomaliesForAlert
  fullName: com.azure.ai.metricsadvisor.MetricsAdvisorAsyncClient.listAnomaliesForAlert
  package: com.azure.ai.metricsadvisor
- uid: com.azure.ai.metricsadvisor.models.ListAnomaliesAlertedOptions
  name: ListAnomaliesAlertedOptions
  nameWithType: ListAnomaliesAlertedOptions
  fullName: com.azure.ai.metricsadvisor.models.ListAnomaliesAlertedOptions
- uid: com.azure.ai.metricsadvisor.models.ListIncidentsAlertedOptions
  name: ListIncidentsAlertedOptions
  nameWithType: ListIncidentsAlertedOptions
  fullName: com.azure.ai.metricsadvisor.models.ListIncidentsAlertedOptions
- uid: com.azure.ai.metricsadvisor.MetricsAdvisorAsyncClient.listIncidentsForAlert*
  name: listIncidentsForAlert
  nameWithType: MetricsAdvisorAsyncClient.listIncidentsForAlert
  fullName: com.azure.ai.metricsadvisor.MetricsAdvisorAsyncClient.listIncidentsForAlert
  package: com.azure.ai.metricsadvisor
- uid: com.azure.ai.metricsadvisor.models.MetricFeedback
  name: MetricFeedback
  nameWithType: MetricFeedback
  fullName: com.azure.ai.metricsadvisor.models.MetricFeedback
- uid: reactor.core.publisher.Mono<com.azure.ai.metricsadvisor.models.MetricFeedback>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: com.azure.ai.metricsadvisor.models.MetricFeedback
    name: MetricFeedback
    fullName: com.azure.ai.metricsadvisor.models.MetricFeedback
  - name: '>'
    fullName: '>'
- uid: com.azure.ai.metricsadvisor.MetricsAdvisorAsyncClient.addFeeddback*
  name: addFeeddback
  nameWithType: MetricsAdvisorAsyncClient.addFeeddback
  fullName: com.azure.ai.metricsadvisor.MetricsAdvisorAsyncClient.addFeeddback
  package: com.azure.ai.metricsadvisor
- uid: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.ai.metricsadvisor.models.MetricFeedback>>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: com.azure.core.http.rest.Response
    name: Response
    fullName: com.azure.core.http.rest.Response
  - name: <
    fullName: <
  - uid: com.azure.ai.metricsadvisor.models.MetricFeedback
    name: MetricFeedback
    fullName: com.azure.ai.metricsadvisor.models.MetricFeedback
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
- uid: com.azure.ai.metricsadvisor.MetricsAdvisorAsyncClient.addFeedbackWithResponse*
  name: addFeedbackWithResponse
  nameWithType: MetricsAdvisorAsyncClient.addFeedbackWithResponse
  fullName: com.azure.ai.metricsadvisor.MetricsAdvisorAsyncClient.addFeedbackWithResponse
  package: com.azure.ai.metricsadvisor
- uid: com.azure.ai.metricsadvisor.MetricsAdvisorAsyncClient.getFeedback*
  name: getFeedback
  nameWithType: MetricsAdvisorAsyncClient.getFeedback
  fullName: com.azure.ai.metricsadvisor.MetricsAdvisorAsyncClient.getFeedback
  package: com.azure.ai.metricsadvisor
- uid: com.azure.ai.metricsadvisor.MetricsAdvisorAsyncClient.getFeedbackWithResponse*
  name: getFeedbackWithResponse
  nameWithType: MetricsAdvisorAsyncClient.getFeedbackWithResponse
  fullName: com.azure.ai.metricsadvisor.MetricsAdvisorAsyncClient.getFeedbackWithResponse
  package: com.azure.ai.metricsadvisor
- uid: com.azure.core.http.rest.PagedFlux<com.azure.ai.metricsadvisor.models.MetricFeedback>
  spec.java:
  - uid: com.azure.core.http.rest.PagedFlux
    name: PagedFlux
    fullName: com.azure.core.http.rest.PagedFlux
  - name: <
    fullName: <
  - uid: com.azure.ai.metricsadvisor.models.MetricFeedback
    name: MetricFeedback
    fullName: com.azure.ai.metricsadvisor.models.MetricFeedback
  - name: '>'
    fullName: '>'
- uid: com.azure.ai.metricsadvisor.MetricsAdvisorAsyncClient.listFeedback*
  name: listFeedback
  nameWithType: MetricsAdvisorAsyncClient.listFeedback
  fullName: com.azure.ai.metricsadvisor.MetricsAdvisorAsyncClient.listFeedback
  package: com.azure.ai.metricsadvisor
- uid: com.azure.ai.metricsadvisor.models.ListMetricFeedbackOptions
  name: ListMetricFeedbackOptions
  nameWithType: ListMetricFeedbackOptions
  fullName: com.azure.ai.metricsadvisor.models.ListMetricFeedbackOptions
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: java.lang.Object.finalize()
  name: Object.finalize()
  nameWithType: Object.finalize()
  fullName: java.lang.Object.finalize()
- uid: java.lang.Object.clone()
  name: Object.clone()
  nameWithType: Object.clone()
  fullName: java.lang.Object.clone()
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: java.lang.Object.equals(java.lang.Object)
  name: Object.equals(Object)
  nameWithType: Object.equals(Object)
  fullName: java.lang.Object.equals(java.lang.Object)
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.lang.Object.hashCode()
  name: Object.hashCode()
  nameWithType: Object.hashCode()
  fullName: java.lang.Object.hashCode()
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: java.lang.Object.toString()
  name: Object.toString()
  nameWithType: Object.toString()
  fullName: java.lang.Object.toString()
- uid: com.azure.core.http.rest.PagedFlux
  name: PagedFlux
  nameWithType: PagedFlux
  fullName: com.azure.core.http.rest.PagedFlux
- uid: com.azure.ai.metricsadvisor.models.MetricSeriesDefinition
  name: MetricSeriesDefinition
  nameWithType: MetricSeriesDefinition
  fullName: com.azure.ai.metricsadvisor.models.MetricSeriesDefinition
- uid: java.util.List
  name: List
  nameWithType: List
  fullName: java.util.List
- uid: com.azure.ai.metricsadvisor.models.DimensionKey
  name: DimensionKey
  nameWithType: DimensionKey
  fullName: com.azure.ai.metricsadvisor.models.DimensionKey
- uid: com.azure.ai.metricsadvisor.models.MetricSeriesData
  name: MetricSeriesData
  nameWithType: MetricSeriesData
  fullName: com.azure.ai.metricsadvisor.models.MetricSeriesData
- uid: com.azure.ai.metricsadvisor.models.EnrichmentStatus
  name: EnrichmentStatus
  nameWithType: EnrichmentStatus
  fullName: com.azure.ai.metricsadvisor.models.EnrichmentStatus
- uid: com.azure.ai.metricsadvisor.models.MetricEnrichedSeriesData
  name: MetricEnrichedSeriesData
  nameWithType: MetricEnrichedSeriesData
  fullName: com.azure.ai.metricsadvisor.models.MetricEnrichedSeriesData
- uid: com.azure.ai.metricsadvisor.models.DataPointAnomaly
  name: DataPointAnomaly
  nameWithType: DataPointAnomaly
  fullName: com.azure.ai.metricsadvisor.models.DataPointAnomaly
- uid: com.azure.ai.metricsadvisor.models.IncidentRootCause
  name: IncidentRootCause
  nameWithType: IncidentRootCause
  fullName: com.azure.ai.metricsadvisor.models.IncidentRootCause
- uid: com.azure.ai.metricsadvisor.models.AnomalyAlert
  name: AnomalyAlert
  nameWithType: AnomalyAlert
  fullName: com.azure.ai.metricsadvisor.models.AnomalyAlert
- uid: reactor.core.publisher.Mono
  name: Mono
  nameWithType: Mono
  fullName: reactor.core.publisher.Mono
- uid: com.azure.core.http.rest.Response
  name: Response
  nameWithType: Response
  fullName: com.azure.core.http.rest.Response
