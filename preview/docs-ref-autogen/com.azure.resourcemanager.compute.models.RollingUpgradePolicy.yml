### YamlMime:ManagedReference
items:
- uid: com.azure.resourcemanager.compute.models.RollingUpgradePolicy
  id: RollingUpgradePolicy
  artifact: com.azure.resourcemanager:azure-resourcemanager-compute:2.0.0-beta.2
  parent: com.azure.resourcemanager.compute.models
  children:
  - com.azure.resourcemanager.compute.models.RollingUpgradePolicy.RollingUpgradePolicy()
  - com.azure.resourcemanager.compute.models.RollingUpgradePolicy.maxBatchInstancePercent()
  - com.azure.resourcemanager.compute.models.RollingUpgradePolicy.maxUnhealthyInstancePercent()
  - com.azure.resourcemanager.compute.models.RollingUpgradePolicy.maxUnhealthyUpgradedInstancePercent()
  - com.azure.resourcemanager.compute.models.RollingUpgradePolicy.pauseTimeBetweenBatches()
  - com.azure.resourcemanager.compute.models.RollingUpgradePolicy.validate()
  - com.azure.resourcemanager.compute.models.RollingUpgradePolicy.withMaxBatchInstancePercent(java.lang.Integer)
  - com.azure.resourcemanager.compute.models.RollingUpgradePolicy.withMaxUnhealthyInstancePercent(java.lang.Integer)
  - com.azure.resourcemanager.compute.models.RollingUpgradePolicy.withMaxUnhealthyUpgradedInstancePercent(java.lang.Integer)
  - com.azure.resourcemanager.compute.models.RollingUpgradePolicy.withPauseTimeBetweenBatches(java.lang.String)
  langs:
  - java
  name: RollingUpgradePolicy
  nameWithType: RollingUpgradePolicy
  fullName: com.azure.resourcemanager.compute.models.RollingUpgradePolicy
  type: Class
  package: com.azure.resourcemanager.compute.models
  summary: The RollingUpgradePolicy model.
  syntax:
    content: public final class RollingUpgradePolicy
  inheritance:
  - java.lang.Object
  inheritedMembers:
  - java.lang.Object.clone()
  - java.lang.Object.equals(java.lang.Object)
  - java.lang.Object.finalize()
  - java.lang.Object.getClass()
  - java.lang.Object.hashCode()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.toString()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
- uid: com.azure.resourcemanager.compute.models.RollingUpgradePolicy.RollingUpgradePolicy()
  id: RollingUpgradePolicy()
  artifact: com.azure.resourcemanager:azure-resourcemanager-compute:2.0.0-beta.2
  parent: com.azure.resourcemanager.compute.models.RollingUpgradePolicy
  langs:
  - java
  name: RollingUpgradePolicy()
  nameWithType: RollingUpgradePolicy.RollingUpgradePolicy()
  fullName: com.azure.resourcemanager.compute.models.RollingUpgradePolicy.RollingUpgradePolicy()
  overload: com.azure.resourcemanager.compute.models.RollingUpgradePolicy.RollingUpgradePolicy*
  type: Constructor
  package: com.azure.resourcemanager.compute.models
  syntax:
    content: public RollingUpgradePolicy()
- uid: com.azure.resourcemanager.compute.models.RollingUpgradePolicy.maxBatchInstancePercent()
  id: maxBatchInstancePercent()
  artifact: com.azure.resourcemanager:azure-resourcemanager-compute:2.0.0-beta.2
  parent: com.azure.resourcemanager.compute.models.RollingUpgradePolicy
  langs:
  - java
  name: maxBatchInstancePercent()
  nameWithType: RollingUpgradePolicy.maxBatchInstancePercent()
  fullName: com.azure.resourcemanager.compute.models.RollingUpgradePolicy.maxBatchInstancePercent()
  overload: com.azure.resourcemanager.compute.models.RollingUpgradePolicy.maxBatchInstancePercent*
  type: Method
  package: com.azure.resourcemanager.compute.models
  summary: 'Get the maxBatchInstancePercent property: The maximum percent of total virtual machine instances that will be upgraded simultaneously by the rolling upgrade in one batch. As this is a maximum, unhealthy instances in previous or future batches can cause the percentage of instances in a batch to decrease to ensure higher reliability. The default value for this parameter is 20%.'
  syntax:
    content: public Integer maxBatchInstancePercent()
    return:
      type: java.lang.Integer
      description: the maxBatchInstancePercent value.
- uid: com.azure.resourcemanager.compute.models.RollingUpgradePolicy.maxUnhealthyInstancePercent()
  id: maxUnhealthyInstancePercent()
  artifact: com.azure.resourcemanager:azure-resourcemanager-compute:2.0.0-beta.2
  parent: com.azure.resourcemanager.compute.models.RollingUpgradePolicy
  langs:
  - java
  name: maxUnhealthyInstancePercent()
  nameWithType: RollingUpgradePolicy.maxUnhealthyInstancePercent()
  fullName: com.azure.resourcemanager.compute.models.RollingUpgradePolicy.maxUnhealthyInstancePercent()
  overload: com.azure.resourcemanager.compute.models.RollingUpgradePolicy.maxUnhealthyInstancePercent*
  type: Method
  package: com.azure.resourcemanager.compute.models
  summary: 'Get the maxUnhealthyInstancePercent property: The maximum percentage of the total virtual machine instances in the scale set that can be simultaneously unhealthy, either as a result of being upgraded, or by being found in an unhealthy state by the virtual machine health checks before the rolling upgrade aborts. This constraint will be checked prior to starting any batch. The default value for this parameter is 20%.'
  syntax:
    content: public Integer maxUnhealthyInstancePercent()
    return:
      type: java.lang.Integer
      description: the maxUnhealthyInstancePercent value.
- uid: com.azure.resourcemanager.compute.models.RollingUpgradePolicy.maxUnhealthyUpgradedInstancePercent()
  id: maxUnhealthyUpgradedInstancePercent()
  artifact: com.azure.resourcemanager:azure-resourcemanager-compute:2.0.0-beta.2
  parent: com.azure.resourcemanager.compute.models.RollingUpgradePolicy
  langs:
  - java
  name: maxUnhealthyUpgradedInstancePercent()
  nameWithType: RollingUpgradePolicy.maxUnhealthyUpgradedInstancePercent()
  fullName: com.azure.resourcemanager.compute.models.RollingUpgradePolicy.maxUnhealthyUpgradedInstancePercent()
  overload: com.azure.resourcemanager.compute.models.RollingUpgradePolicy.maxUnhealthyUpgradedInstancePercent*
  type: Method
  package: com.azure.resourcemanager.compute.models
  summary: 'Get the maxUnhealthyUpgradedInstancePercent property: The maximum percentage of upgraded virtual machine instances that can be found to be in an unhealthy state. This check will happen after each batch is upgraded. If this percentage is ever exceeded, the rolling update aborts. The default value for this parameter is 20%.'
  syntax:
    content: public Integer maxUnhealthyUpgradedInstancePercent()
    return:
      type: java.lang.Integer
      description: the maxUnhealthyUpgradedInstancePercent value.
- uid: com.azure.resourcemanager.compute.models.RollingUpgradePolicy.pauseTimeBetweenBatches()
  id: pauseTimeBetweenBatches()
  artifact: com.azure.resourcemanager:azure-resourcemanager-compute:2.0.0-beta.2
  parent: com.azure.resourcemanager.compute.models.RollingUpgradePolicy
  langs:
  - java
  name: pauseTimeBetweenBatches()
  nameWithType: RollingUpgradePolicy.pauseTimeBetweenBatches()
  fullName: com.azure.resourcemanager.compute.models.RollingUpgradePolicy.pauseTimeBetweenBatches()
  overload: com.azure.resourcemanager.compute.models.RollingUpgradePolicy.pauseTimeBetweenBatches*
  type: Method
  package: com.azure.resourcemanager.compute.models
  summary: 'Get the pauseTimeBetweenBatches property: The wait time between completing the update for all virtual machines in one batch and starting the next batch. The time duration should be specified in ISO 8601 format. The default value is 0 seconds (PT0S).'
  syntax:
    content: public String pauseTimeBetweenBatches()
    return:
      type: java.lang.String
      description: the pauseTimeBetweenBatches value.
- uid: com.azure.resourcemanager.compute.models.RollingUpgradePolicy.validate()
  id: validate()
  artifact: com.azure.resourcemanager:azure-resourcemanager-compute:2.0.0-beta.2
  parent: com.azure.resourcemanager.compute.models.RollingUpgradePolicy
  langs:
  - java
  name: validate()
  nameWithType: RollingUpgradePolicy.validate()
  fullName: com.azure.resourcemanager.compute.models.RollingUpgradePolicy.validate()
  overload: com.azure.resourcemanager.compute.models.RollingUpgradePolicy.validate*
  type: Method
  package: com.azure.resourcemanager.compute.models
  summary: Validates the instance.
  syntax:
    content: public void validate()
- uid: com.azure.resourcemanager.compute.models.RollingUpgradePolicy.withMaxBatchInstancePercent(java.lang.Integer)
  id: withMaxBatchInstancePercent(java.lang.Integer)
  artifact: com.azure.resourcemanager:azure-resourcemanager-compute:2.0.0-beta.2
  parent: com.azure.resourcemanager.compute.models.RollingUpgradePolicy
  langs:
  - java
  name: withMaxBatchInstancePercent(Integer maxBatchInstancePercent)
  nameWithType: RollingUpgradePolicy.withMaxBatchInstancePercent(Integer maxBatchInstancePercent)
  fullName: com.azure.resourcemanager.compute.models.RollingUpgradePolicy.withMaxBatchInstancePercent(Integer maxBatchInstancePercent)
  overload: com.azure.resourcemanager.compute.models.RollingUpgradePolicy.withMaxBatchInstancePercent*
  type: Method
  package: com.azure.resourcemanager.compute.models
  summary: 'Set the maxBatchInstancePercent property: The maximum percent of total virtual machine instances that will be upgraded simultaneously by the rolling upgrade in one batch. As this is a maximum, unhealthy instances in previous or future batches can cause the percentage of instances in a batch to decrease to ensure higher reliability. The default value for this parameter is 20%.'
  syntax:
    content: public RollingUpgradePolicy withMaxBatchInstancePercent(Integer maxBatchInstancePercent)
    parameters:
    - id: maxBatchInstancePercent
      type: java.lang.Integer
      description: the maxBatchInstancePercent value to set.
    return:
      type: com.azure.resourcemanager.compute.models.RollingUpgradePolicy
      description: the RollingUpgradePolicy object itself.
- uid: com.azure.resourcemanager.compute.models.RollingUpgradePolicy.withMaxUnhealthyInstancePercent(java.lang.Integer)
  id: withMaxUnhealthyInstancePercent(java.lang.Integer)
  artifact: com.azure.resourcemanager:azure-resourcemanager-compute:2.0.0-beta.2
  parent: com.azure.resourcemanager.compute.models.RollingUpgradePolicy
  langs:
  - java
  name: withMaxUnhealthyInstancePercent(Integer maxUnhealthyInstancePercent)
  nameWithType: RollingUpgradePolicy.withMaxUnhealthyInstancePercent(Integer maxUnhealthyInstancePercent)
  fullName: com.azure.resourcemanager.compute.models.RollingUpgradePolicy.withMaxUnhealthyInstancePercent(Integer maxUnhealthyInstancePercent)
  overload: com.azure.resourcemanager.compute.models.RollingUpgradePolicy.withMaxUnhealthyInstancePercent*
  type: Method
  package: com.azure.resourcemanager.compute.models
  summary: 'Set the maxUnhealthyInstancePercent property: The maximum percentage of the total virtual machine instances in the scale set that can be simultaneously unhealthy, either as a result of being upgraded, or by being found in an unhealthy state by the virtual machine health checks before the rolling upgrade aborts. This constraint will be checked prior to starting any batch. The default value for this parameter is 20%.'
  syntax:
    content: public RollingUpgradePolicy withMaxUnhealthyInstancePercent(Integer maxUnhealthyInstancePercent)
    parameters:
    - id: maxUnhealthyInstancePercent
      type: java.lang.Integer
      description: the maxUnhealthyInstancePercent value to set.
    return:
      type: com.azure.resourcemanager.compute.models.RollingUpgradePolicy
      description: the RollingUpgradePolicy object itself.
- uid: com.azure.resourcemanager.compute.models.RollingUpgradePolicy.withMaxUnhealthyUpgradedInstancePercent(java.lang.Integer)
  id: withMaxUnhealthyUpgradedInstancePercent(java.lang.Integer)
  artifact: com.azure.resourcemanager:azure-resourcemanager-compute:2.0.0-beta.2
  parent: com.azure.resourcemanager.compute.models.RollingUpgradePolicy
  langs:
  - java
  name: withMaxUnhealthyUpgradedInstancePercent(Integer maxUnhealthyUpgradedInstancePercent)
  nameWithType: RollingUpgradePolicy.withMaxUnhealthyUpgradedInstancePercent(Integer maxUnhealthyUpgradedInstancePercent)
  fullName: com.azure.resourcemanager.compute.models.RollingUpgradePolicy.withMaxUnhealthyUpgradedInstancePercent(Integer maxUnhealthyUpgradedInstancePercent)
  overload: com.azure.resourcemanager.compute.models.RollingUpgradePolicy.withMaxUnhealthyUpgradedInstancePercent*
  type: Method
  package: com.azure.resourcemanager.compute.models
  summary: 'Set the maxUnhealthyUpgradedInstancePercent property: The maximum percentage of upgraded virtual machine instances that can be found to be in an unhealthy state. This check will happen after each batch is upgraded. If this percentage is ever exceeded, the rolling update aborts. The default value for this parameter is 20%.'
  syntax:
    content: public RollingUpgradePolicy withMaxUnhealthyUpgradedInstancePercent(Integer maxUnhealthyUpgradedInstancePercent)
    parameters:
    - id: maxUnhealthyUpgradedInstancePercent
      type: java.lang.Integer
      description: the maxUnhealthyUpgradedInstancePercent value to set.
    return:
      type: com.azure.resourcemanager.compute.models.RollingUpgradePolicy
      description: the RollingUpgradePolicy object itself.
- uid: com.azure.resourcemanager.compute.models.RollingUpgradePolicy.withPauseTimeBetweenBatches(java.lang.String)
  id: withPauseTimeBetweenBatches(java.lang.String)
  artifact: com.azure.resourcemanager:azure-resourcemanager-compute:2.0.0-beta.2
  parent: com.azure.resourcemanager.compute.models.RollingUpgradePolicy
  langs:
  - java
  name: withPauseTimeBetweenBatches(String pauseTimeBetweenBatches)
  nameWithType: RollingUpgradePolicy.withPauseTimeBetweenBatches(String pauseTimeBetweenBatches)
  fullName: com.azure.resourcemanager.compute.models.RollingUpgradePolicy.withPauseTimeBetweenBatches(String pauseTimeBetweenBatches)
  overload: com.azure.resourcemanager.compute.models.RollingUpgradePolicy.withPauseTimeBetweenBatches*
  type: Method
  package: com.azure.resourcemanager.compute.models
  summary: 'Set the pauseTimeBetweenBatches property: The wait time between completing the update for all virtual machines in one batch and starting the next batch. The time duration should be specified in ISO 8601 format. The default value is 0 seconds (PT0S).'
  syntax:
    content: public RollingUpgradePolicy withPauseTimeBetweenBatches(String pauseTimeBetweenBatches)
    parameters:
    - id: pauseTimeBetweenBatches
      type: java.lang.String
      description: the pauseTimeBetweenBatches value to set.
    return:
      type: com.azure.resourcemanager.compute.models.RollingUpgradePolicy
      description: the RollingUpgradePolicy object itself.
references:
- uid: com.azure.resourcemanager.compute.models.RollingUpgradePolicy.RollingUpgradePolicy*
  name: RollingUpgradePolicy
  nameWithType: RollingUpgradePolicy.RollingUpgradePolicy
  fullName: com.azure.resourcemanager.compute.models.RollingUpgradePolicy.RollingUpgradePolicy
  package: com.azure.resourcemanager.compute.models
- uid: java.lang.Integer
  spec.java:
  - uid: java.lang.Integer
    name: Integer
    fullName: java.lang.Integer
- uid: com.azure.resourcemanager.compute.models.RollingUpgradePolicy.maxBatchInstancePercent*
  name: maxBatchInstancePercent
  nameWithType: RollingUpgradePolicy.maxBatchInstancePercent
  fullName: com.azure.resourcemanager.compute.models.RollingUpgradePolicy.maxBatchInstancePercent
  package: com.azure.resourcemanager.compute.models
- uid: com.azure.resourcemanager.compute.models.RollingUpgradePolicy.withMaxBatchInstancePercent*
  name: withMaxBatchInstancePercent
  nameWithType: RollingUpgradePolicy.withMaxBatchInstancePercent
  fullName: com.azure.resourcemanager.compute.models.RollingUpgradePolicy.withMaxBatchInstancePercent
  package: com.azure.resourcemanager.compute.models
- uid: com.azure.resourcemanager.compute.models.RollingUpgradePolicy.maxUnhealthyInstancePercent*
  name: maxUnhealthyInstancePercent
  nameWithType: RollingUpgradePolicy.maxUnhealthyInstancePercent
  fullName: com.azure.resourcemanager.compute.models.RollingUpgradePolicy.maxUnhealthyInstancePercent
  package: com.azure.resourcemanager.compute.models
- uid: com.azure.resourcemanager.compute.models.RollingUpgradePolicy.withMaxUnhealthyInstancePercent*
  name: withMaxUnhealthyInstancePercent
  nameWithType: RollingUpgradePolicy.withMaxUnhealthyInstancePercent
  fullName: com.azure.resourcemanager.compute.models.RollingUpgradePolicy.withMaxUnhealthyInstancePercent
  package: com.azure.resourcemanager.compute.models
- uid: com.azure.resourcemanager.compute.models.RollingUpgradePolicy.maxUnhealthyUpgradedInstancePercent*
  name: maxUnhealthyUpgradedInstancePercent
  nameWithType: RollingUpgradePolicy.maxUnhealthyUpgradedInstancePercent
  fullName: com.azure.resourcemanager.compute.models.RollingUpgradePolicy.maxUnhealthyUpgradedInstancePercent
  package: com.azure.resourcemanager.compute.models
- uid: com.azure.resourcemanager.compute.models.RollingUpgradePolicy.withMaxUnhealthyUpgradedInstancePercent*
  name: withMaxUnhealthyUpgradedInstancePercent
  nameWithType: RollingUpgradePolicy.withMaxUnhealthyUpgradedInstancePercent
  fullName: com.azure.resourcemanager.compute.models.RollingUpgradePolicy.withMaxUnhealthyUpgradedInstancePercent
  package: com.azure.resourcemanager.compute.models
- uid: java.lang.String
  spec.java:
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
- uid: com.azure.resourcemanager.compute.models.RollingUpgradePolicy.pauseTimeBetweenBatches*
  name: pauseTimeBetweenBatches
  nameWithType: RollingUpgradePolicy.pauseTimeBetweenBatches
  fullName: com.azure.resourcemanager.compute.models.RollingUpgradePolicy.pauseTimeBetweenBatches
  package: com.azure.resourcemanager.compute.models
- uid: com.azure.resourcemanager.compute.models.RollingUpgradePolicy.withPauseTimeBetweenBatches*
  name: withPauseTimeBetweenBatches
  nameWithType: RollingUpgradePolicy.withPauseTimeBetweenBatches
  fullName: com.azure.resourcemanager.compute.models.RollingUpgradePolicy.withPauseTimeBetweenBatches
  package: com.azure.resourcemanager.compute.models
- uid: com.azure.resourcemanager.compute.models.RollingUpgradePolicy.validate*
  name: validate
  nameWithType: RollingUpgradePolicy.validate
  fullName: com.azure.resourcemanager.compute.models.RollingUpgradePolicy.validate
  package: com.azure.resourcemanager.compute.models
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: java.lang.Object.finalize()
  name: Object.finalize()
  nameWithType: Object.finalize()
  fullName: java.lang.Object.finalize()
- uid: java.lang.Object.clone()
  name: Object.clone()
  nameWithType: Object.clone()
  fullName: java.lang.Object.clone()
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: java.lang.Object.equals(java.lang.Object)
  name: Object.equals(Object)
  nameWithType: Object.equals(Object)
  fullName: java.lang.Object.equals(java.lang.Object)
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.lang.Object.hashCode()
  name: Object.hashCode()
  nameWithType: Object.hashCode()
  fullName: java.lang.Object.hashCode()
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: java.lang.Object.toString()
  name: Object.toString()
  nameWithType: Object.toString()
  fullName: java.lang.Object.toString()
