### YamlMime:ManagedReference
items:
- uid: com.fasterxml.jackson.core.base.ParserBase
  id: ParserBase
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.base
  children:
  - com.fasterxml.jackson.core.base.ParserBase.ParserBase(com.fasterxml.jackson.core.io.IOContext,int)
  - com.fasterxml.jackson.core.base.ParserBase._binaryValue
  - com.fasterxml.jackson.core.base.ParserBase._byteArrayBuilder
  - com.fasterxml.jackson.core.base.ParserBase._checkStdFeatureChanges(int,int)
  - com.fasterxml.jackson.core.base.ParserBase._closeInput()
  - com.fasterxml.jackson.core.base.ParserBase._closed
  - com.fasterxml.jackson.core.base.ParserBase._currInputProcessed
  - com.fasterxml.jackson.core.base.ParserBase._currInputRow
  - com.fasterxml.jackson.core.base.ParserBase._currInputRowStart
  - com.fasterxml.jackson.core.base.ParserBase._decodeBase64Escape(com.fasterxml.jackson.core.Base64Variant,char,int)
  - com.fasterxml.jackson.core.base.ParserBase._decodeBase64Escape(com.fasterxml.jackson.core.Base64Variant,int,int)
  - com.fasterxml.jackson.core.base.ParserBase._decodeEscaped()
  - com.fasterxml.jackson.core.base.ParserBase._eofAsNextChar()
  - com.fasterxml.jackson.core.base.ParserBase._expLength
  - com.fasterxml.jackson.core.base.ParserBase._finishString()
  - com.fasterxml.jackson.core.base.ParserBase._fractLength
  - com.fasterxml.jackson.core.base.ParserBase._getByteArrayBuilder()
  - com.fasterxml.jackson.core.base.ParserBase._getSourceReference()
  - com.fasterxml.jackson.core.base.ParserBase._handleBase64MissingPadding(com.fasterxml.jackson.core.Base64Variant)
  - com.fasterxml.jackson.core.base.ParserBase._handleEOF()
  - com.fasterxml.jackson.core.base.ParserBase._handleUnrecognizedCharacterEscape(char)
  - com.fasterxml.jackson.core.base.ParserBase._inputEnd
  - com.fasterxml.jackson.core.base.ParserBase._inputPtr
  - com.fasterxml.jackson.core.base.ParserBase._intLength
  - com.fasterxml.jackson.core.base.ParserBase._ioContext
  - com.fasterxml.jackson.core.base.ParserBase._nameCopied
  - com.fasterxml.jackson.core.base.ParserBase._nameCopyBuffer
  - com.fasterxml.jackson.core.base.ParserBase._nextToken
  - com.fasterxml.jackson.core.base.ParserBase._numTypesValid
  - com.fasterxml.jackson.core.base.ParserBase._numberBigDecimal
  - com.fasterxml.jackson.core.base.ParserBase._numberBigInt
  - com.fasterxml.jackson.core.base.ParserBase._numberDouble
  - com.fasterxml.jackson.core.base.ParserBase._numberInt
  - com.fasterxml.jackson.core.base.ParserBase._numberLong
  - com.fasterxml.jackson.core.base.ParserBase._numberNegative
  - com.fasterxml.jackson.core.base.ParserBase._parseIntValue()
  - com.fasterxml.jackson.core.base.ParserBase._parseNumericValue(int)
  - com.fasterxml.jackson.core.base.ParserBase._parsingContext
  - com.fasterxml.jackson.core.base.ParserBase._releaseBuffers()
  - com.fasterxml.jackson.core.base.ParserBase._reportMismatchedEndMarker(int,char)
  - com.fasterxml.jackson.core.base.ParserBase._reportTooLongIntegral(int,java.lang.String)
  - com.fasterxml.jackson.core.base.ParserBase._textBuffer
  - com.fasterxml.jackson.core.base.ParserBase._throwUnquotedSpace(int,java.lang.String)
  - com.fasterxml.jackson.core.base.ParserBase._tokenInputCol
  - com.fasterxml.jackson.core.base.ParserBase._tokenInputRow
  - com.fasterxml.jackson.core.base.ParserBase._tokenInputTotal
  - com.fasterxml.jackson.core.base.ParserBase._validJsonTokenList()
  - com.fasterxml.jackson.core.base.ParserBase._validJsonValueList()
  - com.fasterxml.jackson.core.base.ParserBase.close()
  - com.fasterxml.jackson.core.base.ParserBase.convertNumberToBigDecimal()
  - com.fasterxml.jackson.core.base.ParserBase.convertNumberToBigInteger()
  - com.fasterxml.jackson.core.base.ParserBase.convertNumberToDouble()
  - com.fasterxml.jackson.core.base.ParserBase.convertNumberToInt()
  - com.fasterxml.jackson.core.base.ParserBase.convertNumberToLong()
  - com.fasterxml.jackson.core.base.ParserBase.disable(com.fasterxml.jackson.core.JsonParser.Feature)
  - com.fasterxml.jackson.core.base.ParserBase.enable(com.fasterxml.jackson.core.JsonParser.Feature)
  - com.fasterxml.jackson.core.base.ParserBase.getBigIntegerValue()
  - com.fasterxml.jackson.core.base.ParserBase.getBinaryValue(com.fasterxml.jackson.core.Base64Variant)
  - com.fasterxml.jackson.core.base.ParserBase.getCurrentLocation()
  - com.fasterxml.jackson.core.base.ParserBase.getCurrentName()
  - com.fasterxml.jackson.core.base.ParserBase.getCurrentValue()
  - com.fasterxml.jackson.core.base.ParserBase.getDecimalValue()
  - com.fasterxml.jackson.core.base.ParserBase.getDoubleValue()
  - com.fasterxml.jackson.core.base.ParserBase.getFloatValue()
  - com.fasterxml.jackson.core.base.ParserBase.getIntValue()
  - com.fasterxml.jackson.core.base.ParserBase.getLongValue()
  - com.fasterxml.jackson.core.base.ParserBase.getNumberType()
  - com.fasterxml.jackson.core.base.ParserBase.getNumberValue()
  - com.fasterxml.jackson.core.base.ParserBase.getParsingContext()
  - com.fasterxml.jackson.core.base.ParserBase.getTokenCharacterOffset()
  - com.fasterxml.jackson.core.base.ParserBase.getTokenColumnNr()
  - com.fasterxml.jackson.core.base.ParserBase.getTokenLineNr()
  - com.fasterxml.jackson.core.base.ParserBase.getTokenLocation()
  - com.fasterxml.jackson.core.base.ParserBase.growArrayBy(int[],int)
  - com.fasterxml.jackson.core.base.ParserBase.hasTextCharacters()
  - com.fasterxml.jackson.core.base.ParserBase.isClosed()
  - com.fasterxml.jackson.core.base.ParserBase.isNaN()
  - com.fasterxml.jackson.core.base.ParserBase.loadMore()
  - com.fasterxml.jackson.core.base.ParserBase.loadMoreGuaranteed()
  - com.fasterxml.jackson.core.base.ParserBase.overrideCurrentName(java.lang.String)
  - com.fasterxml.jackson.core.base.ParserBase.overrideStdFeatures(int,int)
  - com.fasterxml.jackson.core.base.ParserBase.reportInvalidBase64Char(com.fasterxml.jackson.core.Base64Variant,int,int)
  - com.fasterxml.jackson.core.base.ParserBase.reportInvalidBase64Char(com.fasterxml.jackson.core.Base64Variant,int,int,java.lang.String)
  - com.fasterxml.jackson.core.base.ParserBase.reset(boolean,int,int,int)
  - com.fasterxml.jackson.core.base.ParserBase.resetAsNaN(java.lang.String,double)
  - com.fasterxml.jackson.core.base.ParserBase.resetFloat(boolean,int,int,int)
  - com.fasterxml.jackson.core.base.ParserBase.resetInt(boolean,int)
  - com.fasterxml.jackson.core.base.ParserBase.setCurrentValue(java.lang.Object)
  - com.fasterxml.jackson.core.base.ParserBase.setFeatureMask(int)
  - com.fasterxml.jackson.core.base.ParserBase.version()
  langs:
  - java
  name: ParserBase
  nameWithType: ParserBase
  fullName: com.fasterxml.jackson.core.base.ParserBase
  type: Class
  package: com.fasterxml.jackson.core.base
  summary: Intermediate base class used by all Jackson <xref uid="com.fasterxml.jackson.core.JsonParser" data-throw-if-not-resolved="false">JsonParser</xref> implementations. Contains most common things that are independent of actual underlying input source.
  syntax:
    content: public abstract class ParserBase extends ParserMinimalBase
  inheritance:
  - java.lang.Object
  - com.fasterxml.jackson.core.JsonParser
  - com.fasterxml.jackson.core.base.ParserMinimalBase
  inheritedMembers:
  - com.fasterxml.jackson.core.JsonParser.<T>readValueAs(com.fasterxml.jackson.core.type.TypeReference<?>)
  - com.fasterxml.jackson.core.JsonParser.<T>readValueAs(java.lang.Class<T>)
  - com.fasterxml.jackson.core.JsonParser.<T>readValueAsTree()
  - com.fasterxml.jackson.core.JsonParser.<T>readValuesAs(com.fasterxml.jackson.core.type.TypeReference<T>)
  - com.fasterxml.jackson.core.JsonParser.<T>readValuesAs(java.lang.Class<T>)
  - com.fasterxml.jackson.core.JsonParser._codec()
  - com.fasterxml.jackson.core.JsonParser._constructError(java.lang.String)
  - com.fasterxml.jackson.core.JsonParser._reportUnsupportedOperation()
  - com.fasterxml.jackson.core.JsonParser.canParseAsync()
  - com.fasterxml.jackson.core.JsonParser.canReadObjectId()
  - com.fasterxml.jackson.core.JsonParser.canReadTypeId()
  - com.fasterxml.jackson.core.JsonParser.canUseSchema(com.fasterxml.jackson.core.FormatSchema)
  - com.fasterxml.jackson.core.JsonParser.configure(com.fasterxml.jackson.core.JsonParser.Feature,boolean)
  - com.fasterxml.jackson.core.JsonParser.currentName()
  - com.fasterxml.jackson.core.JsonParser.disable(com.fasterxml.jackson.core.JsonParser.Feature)
  - com.fasterxml.jackson.core.JsonParser.enable(com.fasterxml.jackson.core.JsonParser.Feature)
  - com.fasterxml.jackson.core.JsonParser.finishToken()
  - com.fasterxml.jackson.core.JsonParser.getBigIntegerValue()
  - com.fasterxml.jackson.core.JsonParser.getBinaryValue()
  - com.fasterxml.jackson.core.JsonParser.getBooleanValue()
  - com.fasterxml.jackson.core.JsonParser.getByteValue()
  - com.fasterxml.jackson.core.JsonParser.getCodec()
  - com.fasterxml.jackson.core.JsonParser.getCurrentLocation()
  - com.fasterxml.jackson.core.JsonParser.getCurrentValue()
  - com.fasterxml.jackson.core.JsonParser.getDecimalValue()
  - com.fasterxml.jackson.core.JsonParser.getDoubleValue()
  - com.fasterxml.jackson.core.JsonParser.getEmbeddedObject()
  - com.fasterxml.jackson.core.JsonParser.getFeatureMask()
  - com.fasterxml.jackson.core.JsonParser.getFloatValue()
  - com.fasterxml.jackson.core.JsonParser.getFormatFeatures()
  - com.fasterxml.jackson.core.JsonParser.getInputSource()
  - com.fasterxml.jackson.core.JsonParser.getIntValue()
  - com.fasterxml.jackson.core.JsonParser.getLongValue()
  - com.fasterxml.jackson.core.JsonParser.getNonBlockingInputFeeder()
  - com.fasterxml.jackson.core.JsonParser.getNumberType()
  - com.fasterxml.jackson.core.JsonParser.getNumberValue()
  - com.fasterxml.jackson.core.JsonParser.getObjectId()
  - com.fasterxml.jackson.core.JsonParser.getSchema()
  - com.fasterxml.jackson.core.JsonParser.getShortValue()
  - com.fasterxml.jackson.core.JsonParser.getText(java.io.Writer)
  - com.fasterxml.jackson.core.JsonParser.getTokenLocation()
  - com.fasterxml.jackson.core.JsonParser.getTypeId()
  - com.fasterxml.jackson.core.JsonParser.getValueAsBoolean()
  - com.fasterxml.jackson.core.JsonParser.getValueAsDouble()
  - com.fasterxml.jackson.core.JsonParser.isEnabled(com.fasterxml.jackson.core.JsonParser.Feature)
  - com.fasterxml.jackson.core.JsonParser.isEnabled(com.fasterxml.jackson.core.StreamReadFeature)
  - com.fasterxml.jackson.core.JsonParser.isNaN()
  - com.fasterxml.jackson.core.JsonParser.nextBooleanValue()
  - com.fasterxml.jackson.core.JsonParser.nextFieldName()
  - com.fasterxml.jackson.core.JsonParser.nextFieldName(com.fasterxml.jackson.core.SerializableString)
  - com.fasterxml.jackson.core.JsonParser.nextIntValue(int)
  - com.fasterxml.jackson.core.JsonParser.nextLongValue(long)
  - com.fasterxml.jackson.core.JsonParser.nextTextValue()
  - com.fasterxml.jackson.core.JsonParser.overrideFormatFeatures(int,int)
  - com.fasterxml.jackson.core.JsonParser.overrideStdFeatures(int,int)
  - com.fasterxml.jackson.core.JsonParser.readBinaryValue(com.fasterxml.jackson.core.Base64Variant,java.io.OutputStream)
  - com.fasterxml.jackson.core.JsonParser.readBinaryValue(java.io.OutputStream)
  - com.fasterxml.jackson.core.JsonParser.releaseBuffered(java.io.OutputStream)
  - com.fasterxml.jackson.core.JsonParser.releaseBuffered(java.io.Writer)
  - com.fasterxml.jackson.core.JsonParser.requiresCustomCodec()
  - com.fasterxml.jackson.core.JsonParser.setCodec(com.fasterxml.jackson.core.ObjectCodec)
  - com.fasterxml.jackson.core.JsonParser.setCurrentValue(java.lang.Object)
  - com.fasterxml.jackson.core.JsonParser.setFeatureMask(int)
  - com.fasterxml.jackson.core.JsonParser.setRequestPayloadOnError(byte[],java.lang.String)
  - com.fasterxml.jackson.core.JsonParser.setRequestPayloadOnError(com.fasterxml.jackson.core.util.RequestPayload)
  - com.fasterxml.jackson.core.JsonParser.setRequestPayloadOnError(java.lang.String)
  - com.fasterxml.jackson.core.JsonParser.setSchema(com.fasterxml.jackson.core.FormatSchema)
  - com.fasterxml.jackson.core.JsonParser.version()
  - com.fasterxml.jackson.core.base.ParserMinimalBase._ascii(byte[])
  - com.fasterxml.jackson.core.base.ParserMinimalBase._asciiBytes(java.lang.String)
  - com.fasterxml.jackson.core.base.ParserMinimalBase._constructError(java.lang.String,java.lang.Throwable)
  - com.fasterxml.jackson.core.base.ParserMinimalBase._decodeBase64(java.lang.String,com.fasterxml.jackson.core.util.ByteArrayBuilder,com.fasterxml.jackson.core.Base64Variant)
  - com.fasterxml.jackson.core.base.ParserMinimalBase._getCharDesc(int)
  - com.fasterxml.jackson.core.base.ParserMinimalBase._handleEOF()
  - com.fasterxml.jackson.core.base.ParserMinimalBase._hasTextualNull(java.lang.String)
  - com.fasterxml.jackson.core.base.ParserMinimalBase._longIntegerDesc(java.lang.String)
  - com.fasterxml.jackson.core.base.ParserMinimalBase._longNumberDesc(java.lang.String)
  - com.fasterxml.jackson.core.base.ParserMinimalBase._reportError(java.lang.String)
  - com.fasterxml.jackson.core.base.ParserMinimalBase._reportError(java.lang.String,java.lang.Object)
  - com.fasterxml.jackson.core.base.ParserMinimalBase._reportError(java.lang.String,java.lang.Object,java.lang.Object)
  - com.fasterxml.jackson.core.base.ParserMinimalBase._reportInputCoercion(java.lang.String,com.fasterxml.jackson.core.JsonToken,java.lang.Class<?>)
  - com.fasterxml.jackson.core.base.ParserMinimalBase._reportInvalidEOF()
  - com.fasterxml.jackson.core.base.ParserMinimalBase._reportInvalidEOF(java.lang.String)
  - com.fasterxml.jackson.core.base.ParserMinimalBase._reportInvalidEOF(java.lang.String,com.fasterxml.jackson.core.JsonToken)
  - com.fasterxml.jackson.core.base.ParserMinimalBase._reportInvalidEOFInValue()
  - com.fasterxml.jackson.core.base.ParserMinimalBase._reportInvalidEOFInValue(com.fasterxml.jackson.core.JsonToken)
  - com.fasterxml.jackson.core.base.ParserMinimalBase._reportMissingRootWS(int)
  - com.fasterxml.jackson.core.base.ParserMinimalBase._reportUnexpectedChar(int,java.lang.String)
  - com.fasterxml.jackson.core.base.ParserMinimalBase._throwInternal()
  - com.fasterxml.jackson.core.base.ParserMinimalBase._throwInvalidSpace(int)
  - com.fasterxml.jackson.core.base.ParserMinimalBase._wrapError(java.lang.String,java.lang.Throwable)
  - com.fasterxml.jackson.core.base.ParserMinimalBase.clearCurrentToken()
  - com.fasterxml.jackson.core.base.ParserMinimalBase.close()
  - com.fasterxml.jackson.core.base.ParserMinimalBase.currentToken()
  - com.fasterxml.jackson.core.base.ParserMinimalBase.currentTokenId()
  - com.fasterxml.jackson.core.base.ParserMinimalBase.getBinaryValue(com.fasterxml.jackson.core.Base64Variant)
  - com.fasterxml.jackson.core.base.ParserMinimalBase.getCurrentName()
  - com.fasterxml.jackson.core.base.ParserMinimalBase.getCurrentToken()
  - com.fasterxml.jackson.core.base.ParserMinimalBase.getCurrentTokenId()
  - com.fasterxml.jackson.core.base.ParserMinimalBase.getLastClearedToken()
  - com.fasterxml.jackson.core.base.ParserMinimalBase.getParsingContext()
  - com.fasterxml.jackson.core.base.ParserMinimalBase.getText()
  - com.fasterxml.jackson.core.base.ParserMinimalBase.getTextCharacters()
  - com.fasterxml.jackson.core.base.ParserMinimalBase.getTextLength()
  - com.fasterxml.jackson.core.base.ParserMinimalBase.getTextOffset()
  - com.fasterxml.jackson.core.base.ParserMinimalBase.getValueAsBoolean(boolean)
  - com.fasterxml.jackson.core.base.ParserMinimalBase.getValueAsDouble(double)
  - com.fasterxml.jackson.core.base.ParserMinimalBase.getValueAsInt()
  - com.fasterxml.jackson.core.base.ParserMinimalBase.getValueAsInt(int)
  - com.fasterxml.jackson.core.base.ParserMinimalBase.getValueAsLong()
  - com.fasterxml.jackson.core.base.ParserMinimalBase.getValueAsLong(long)
  - com.fasterxml.jackson.core.base.ParserMinimalBase.getValueAsString()
  - com.fasterxml.jackson.core.base.ParserMinimalBase.getValueAsString(java.lang.String)
  - com.fasterxml.jackson.core.base.ParserMinimalBase.hasCurrentToken()
  - com.fasterxml.jackson.core.base.ParserMinimalBase.hasTextCharacters()
  - com.fasterxml.jackson.core.base.ParserMinimalBase.hasToken(com.fasterxml.jackson.core.JsonToken)
  - com.fasterxml.jackson.core.base.ParserMinimalBase.hasTokenId(int)
  - com.fasterxml.jackson.core.base.ParserMinimalBase.isClosed()
  - com.fasterxml.jackson.core.base.ParserMinimalBase.isExpectedStartArrayToken()
  - com.fasterxml.jackson.core.base.ParserMinimalBase.isExpectedStartObjectToken()
  - com.fasterxml.jackson.core.base.ParserMinimalBase.nextToken()
  - com.fasterxml.jackson.core.base.ParserMinimalBase.nextValue()
  - com.fasterxml.jackson.core.base.ParserMinimalBase.overrideCurrentName(java.lang.String)
  - com.fasterxml.jackson.core.base.ParserMinimalBase.reportInvalidNumber(java.lang.String)
  - com.fasterxml.jackson.core.base.ParserMinimalBase.reportOverflowInt()
  - com.fasterxml.jackson.core.base.ParserMinimalBase.reportOverflowInt(java.lang.String)
  - com.fasterxml.jackson.core.base.ParserMinimalBase.reportOverflowInt(java.lang.String,com.fasterxml.jackson.core.JsonToken)
  - com.fasterxml.jackson.core.base.ParserMinimalBase.reportOverflowLong()
  - com.fasterxml.jackson.core.base.ParserMinimalBase.reportOverflowLong(java.lang.String)
  - com.fasterxml.jackson.core.base.ParserMinimalBase.reportOverflowLong(java.lang.String,com.fasterxml.jackson.core.JsonToken)
  - com.fasterxml.jackson.core.base.ParserMinimalBase.reportUnexpectedNumberChar(int,java.lang.String)
  - com.fasterxml.jackson.core.base.ParserMinimalBase.skipChildren()
  - java.lang.Object.clone()
  - java.lang.Object.equals(java.lang.Object)
  - java.lang.Object.finalize()
  - java.lang.Object.getClass()
  - java.lang.Object.hashCode()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.toString()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
- uid: com.fasterxml.jackson.core.base.ParserBase.ParserBase(com.fasterxml.jackson.core.io.IOContext,int)
  id: ParserBase(com.fasterxml.jackson.core.io.IOContext,int)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.base.ParserBase
  langs:
  - java
  name: ParserBase(IOContext ctxt, int features)
  nameWithType: ParserBase.ParserBase(IOContext ctxt, int features)
  fullName: com.fasterxml.jackson.core.base.ParserBase.ParserBase(IOContext ctxt, int features)
  overload: com.fasterxml.jackson.core.base.ParserBase.ParserBase*
  type: Constructor
  package: com.fasterxml.jackson.core.base
  syntax:
    content: protected ParserBase(IOContext ctxt, int features)
    parameters:
    - id: ctxt
      type: com.fasterxml.jackson.core.io.IOContext
    - id: features
      type: int
- uid: com.fasterxml.jackson.core.base.ParserBase._binaryValue
  id: _binaryValue
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.base.ParserBase
  langs:
  - java
  name: _binaryValue
  nameWithType: ParserBase._binaryValue
  fullName: com.fasterxml.jackson.core.base.ParserBase._binaryValue
  type: Field
  package: com.fasterxml.jackson.core.base
  summary: We will hold on to decoded binary data, for duration of current event, so that multiple calls to <xref uid="com.fasterxml.jackson.core.base.ParserBase.getBinaryValue*" data-throw-if-not-resolved="false">#getBinaryValue</xref> will not need to decode data more than once.
  syntax:
    content: protected byte[] _binaryValue
    return:
      type: byte[]
- uid: com.fasterxml.jackson.core.base.ParserBase._byteArrayBuilder
  id: _byteArrayBuilder
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.base.ParserBase
  langs:
  - java
  name: _byteArrayBuilder
  nameWithType: ParserBase._byteArrayBuilder
  fullName: com.fasterxml.jackson.core.base.ParserBase._byteArrayBuilder
  type: Field
  package: com.fasterxml.jackson.core.base
  summary: ByteArrayBuilder is needed if 'getBinaryValue' is called. If so, we better reuse it for remainder of content.
  syntax:
    content: protected ByteArrayBuilder _byteArrayBuilder
    return:
      type: com.fasterxml.jackson.core.util.ByteArrayBuilder
- uid: com.fasterxml.jackson.core.base.ParserBase._checkStdFeatureChanges(int,int)
  id: _checkStdFeatureChanges(int,int)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.base.ParserBase
  langs:
  - java
  name: _checkStdFeatureChanges(int newFeatureFlags, int changedFeatures)
  nameWithType: ParserBase._checkStdFeatureChanges(int newFeatureFlags, int changedFeatures)
  fullName: com.fasterxml.jackson.core.base.ParserBase._checkStdFeatureChanges(int newFeatureFlags, int changedFeatures)
  overload: com.fasterxml.jackson.core.base.ParserBase._checkStdFeatureChanges*
  type: Method
  package: com.fasterxml.jackson.core.base
  summary: Helper method called to verify changes to standard features.
  syntax:
    content: protected void _checkStdFeatureChanges(int newFeatureFlags, int changedFeatures)
    parameters:
    - id: newFeatureFlags
      type: int
      description: Bitflag of standard features after they were changed
    - id: changedFeatures
      type: int
      description: >-
        Bitflag of standard features for which setting
            did change
- uid: com.fasterxml.jackson.core.base.ParserBase._closeInput()
  id: _closeInput()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.base.ParserBase
  langs:
  - java
  name: _closeInput()
  nameWithType: ParserBase._closeInput()
  fullName: com.fasterxml.jackson.core.base.ParserBase._closeInput()
  overload: com.fasterxml.jackson.core.base.ParserBase._closeInput*
  type: Method
  package: com.fasterxml.jackson.core.base
  syntax:
    content: protected abstract void _closeInput()
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.base.ParserBase._closed
  id: _closed
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.base.ParserBase
  langs:
  - java
  name: _closed
  nameWithType: ParserBase._closed
  fullName: com.fasterxml.jackson.core.base.ParserBase._closed
  type: Field
  package: com.fasterxml.jackson.core.base
  summary: Flag that indicates whether parser is closed or not. Gets set when parser is either closed by explicit call (<xref uid="com.fasterxml.jackson.core.base.ParserBase.close*" data-throw-if-not-resolved="false">#close</xref>) or when end-of-input is reached.
  syntax:
    content: protected boolean _closed
    return:
      type: boolean
- uid: com.fasterxml.jackson.core.base.ParserBase._currInputProcessed
  id: _currInputProcessed
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.base.ParserBase
  langs:
  - java
  name: _currInputProcessed
  nameWithType: ParserBase._currInputProcessed
  fullName: com.fasterxml.jackson.core.base.ParserBase._currInputProcessed
  type: Field
  package: com.fasterxml.jackson.core.base
  summary: Number of characters/bytes that were contained in previous blocks (blocks that were already processed prior to the current buffer).
  syntax:
    content: protected long _currInputProcessed
    return:
      type: long
- uid: com.fasterxml.jackson.core.base.ParserBase._currInputRow
  id: _currInputRow
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.base.ParserBase
  langs:
  - java
  name: _currInputRow
  nameWithType: ParserBase._currInputRow
  fullName: com.fasterxml.jackson.core.base.ParserBase._currInputRow
  type: Field
  package: com.fasterxml.jackson.core.base
  summary: Current row location of current point in input buffer, starting from 1, if available.
  syntax:
    content: protected int _currInputRow
    return:
      type: int
- uid: com.fasterxml.jackson.core.base.ParserBase._currInputRowStart
  id: _currInputRowStart
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.base.ParserBase
  langs:
  - java
  name: _currInputRowStart
  nameWithType: ParserBase._currInputRowStart
  fullName: com.fasterxml.jackson.core.base.ParserBase._currInputRowStart
  type: Field
  package: com.fasterxml.jackson.core.base
  summary: Current index of the first character of the current row in input buffer. Needed to calculate column position, if necessary; benefit of not having column itself is that this only has to be updated once per line.
  syntax:
    content: protected int _currInputRowStart
    return:
      type: int
- uid: com.fasterxml.jackson.core.base.ParserBase._decodeBase64Escape(com.fasterxml.jackson.core.Base64Variant,char,int)
  id: _decodeBase64Escape(com.fasterxml.jackson.core.Base64Variant,char,int)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.base.ParserBase
  langs:
  - java
  name: _decodeBase64Escape(Base64Variant b64variant, char ch, int index)
  nameWithType: ParserBase._decodeBase64Escape(Base64Variant b64variant, char ch, int index)
  fullName: com.fasterxml.jackson.core.base.ParserBase._decodeBase64Escape(Base64Variant b64variant, char ch, int index)
  overload: com.fasterxml.jackson.core.base.ParserBase._decodeBase64Escape*
  type: Method
  package: com.fasterxml.jackson.core.base
  syntax:
    content: protected final int _decodeBase64Escape(Base64Variant b64variant, char ch, int index)
    parameters:
    - id: b64variant
      type: com.fasterxml.jackson.core.Base64Variant
    - id: ch
      type: char
    - id: index
      type: int
    return:
      type: int
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.base.ParserBase._decodeBase64Escape(com.fasterxml.jackson.core.Base64Variant,int,int)
  id: _decodeBase64Escape(com.fasterxml.jackson.core.Base64Variant,int,int)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.base.ParserBase
  langs:
  - java
  name: _decodeBase64Escape(Base64Variant b64variant, int ch, int index)
  nameWithType: ParserBase._decodeBase64Escape(Base64Variant b64variant, int ch, int index)
  fullName: com.fasterxml.jackson.core.base.ParserBase._decodeBase64Escape(Base64Variant b64variant, int ch, int index)
  overload: com.fasterxml.jackson.core.base.ParserBase._decodeBase64Escape*
  type: Method
  package: com.fasterxml.jackson.core.base
  syntax:
    content: protected final int _decodeBase64Escape(Base64Variant b64variant, int ch, int index)
    parameters:
    - id: b64variant
      type: com.fasterxml.jackson.core.Base64Variant
    - id: ch
      type: int
    - id: index
      type: int
    return:
      type: int
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.base.ParserBase._decodeEscaped()
  id: _decodeEscaped()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.base.ParserBase
  langs:
  - java
  name: _decodeEscaped()
  nameWithType: ParserBase._decodeEscaped()
  fullName: com.fasterxml.jackson.core.base.ParserBase._decodeEscaped()
  overload: com.fasterxml.jackson.core.base.ParserBase._decodeEscaped*
  type: Method
  package: com.fasterxml.jackson.core.base
  summary: Method that sub-classes must implement to support escaped sequences in base64-encoded sections. Sub-classes that do not need base64 support can leave this as is
  syntax:
    content: protected char _decodeEscaped()
    return:
      type: char
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.base.ParserBase._eofAsNextChar()
  id: _eofAsNextChar()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.base.ParserBase
  langs:
  - java
  name: _eofAsNextChar()
  nameWithType: ParserBase._eofAsNextChar()
  fullName: com.fasterxml.jackson.core.base.ParserBase._eofAsNextChar()
  overload: com.fasterxml.jackson.core.base.ParserBase._eofAsNextChar*
  type: Method
  package: com.fasterxml.jackson.core.base
  syntax:
    content: protected final int _eofAsNextChar()
    return:
      type: int
  exceptions:
  - type: com.fasterxml.jackson.core.JsonParseException
- uid: com.fasterxml.jackson.core.base.ParserBase._expLength
  id: _expLength
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.base.ParserBase
  langs:
  - java
  name: _expLength
  nameWithType: ParserBase._expLength
  fullName: com.fasterxml.jackson.core.base.ParserBase._expLength
  type: Field
  package: com.fasterxml.jackson.core.base
  summary: Length of the exponent part of the number, if any, not including 'e' marker or sign, just digits. Not used for pure integer values.
  syntax:
    content: protected int _expLength
    return:
      type: int
- uid: com.fasterxml.jackson.core.base.ParserBase._finishString()
  id: _finishString()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.base.ParserBase
  langs:
  - java
  name: _finishString()
  nameWithType: ParserBase._finishString()
  fullName: com.fasterxml.jackson.core.base.ParserBase._finishString()
  overload: com.fasterxml.jackson.core.base.ParserBase._finishString*
  type: Method
  package: com.fasterxml.jackson.core.base
  syntax:
    content: protected void _finishString()
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.base.ParserBase._fractLength
  id: _fractLength
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.base.ParserBase
  langs:
  - java
  name: _fractLength
  nameWithType: ParserBase._fractLength
  fullName: com.fasterxml.jackson.core.base.ParserBase._fractLength
  type: Field
  package: com.fasterxml.jackson.core.base
  summary: Length of the fractional part (not including decimal point or exponent), in characters. Not used for pure integer values.
  syntax:
    content: protected int _fractLength
    return:
      type: int
- uid: com.fasterxml.jackson.core.base.ParserBase._getByteArrayBuilder()
  id: _getByteArrayBuilder()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.base.ParserBase
  langs:
  - java
  name: _getByteArrayBuilder()
  nameWithType: ParserBase._getByteArrayBuilder()
  fullName: com.fasterxml.jackson.core.base.ParserBase._getByteArrayBuilder()
  overload: com.fasterxml.jackson.core.base.ParserBase._getByteArrayBuilder*
  type: Method
  package: com.fasterxml.jackson.core.base
  syntax:
    content: public ByteArrayBuilder _getByteArrayBuilder()
    return:
      type: com.fasterxml.jackson.core.util.ByteArrayBuilder
- uid: com.fasterxml.jackson.core.base.ParserBase._getSourceReference()
  id: _getSourceReference()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.base.ParserBase
  langs:
  - java
  name: _getSourceReference()
  nameWithType: ParserBase._getSourceReference()
  fullName: com.fasterxml.jackson.core.base.ParserBase._getSourceReference()
  overload: com.fasterxml.jackson.core.base.ParserBase._getSourceReference*
  type: Method
  package: com.fasterxml.jackson.core.base
  summary: Helper method used to encapsulate logic of including (or not) of "source reference" when constructing <xref uid="com.fasterxml.jackson.core.JsonLocation" data-throw-if-not-resolved="false">JsonLocation</xref> instances.
  syntax:
    content: protected Object _getSourceReference()
    return:
      type: java.lang.Object
- uid: com.fasterxml.jackson.core.base.ParserBase._handleBase64MissingPadding(com.fasterxml.jackson.core.Base64Variant)
  id: _handleBase64MissingPadding(com.fasterxml.jackson.core.Base64Variant)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.base.ParserBase
  langs:
  - java
  name: _handleBase64MissingPadding(Base64Variant b64variant)
  nameWithType: ParserBase._handleBase64MissingPadding(Base64Variant b64variant)
  fullName: com.fasterxml.jackson.core.base.ParserBase._handleBase64MissingPadding(Base64Variant b64variant)
  overload: com.fasterxml.jackson.core.base.ParserBase._handleBase64MissingPadding*
  type: Method
  package: com.fasterxml.jackson.core.base
  syntax:
    content: protected void _handleBase64MissingPadding(Base64Variant b64variant)
    parameters:
    - id: b64variant
      type: com.fasterxml.jackson.core.Base64Variant
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.base.ParserBase._handleEOF()
  id: _handleEOF()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.base.ParserBase
  langs:
  - java
  name: _handleEOF()
  nameWithType: ParserBase._handleEOF()
  fullName: com.fasterxml.jackson.core.base.ParserBase._handleEOF()
  overload: com.fasterxml.jackson.core.base.ParserBase._handleEOF*
  type: Method
  package: com.fasterxml.jackson.core.base
  summary: Method called when an EOF is encountered between tokens. If so, it may be a legitimate EOF, but only iff there is no open non-root context.
  syntax:
    content: protected void _handleEOF()
  exceptions:
  - type: com.fasterxml.jackson.core.JsonParseException
- uid: com.fasterxml.jackson.core.base.ParserBase._handleUnrecognizedCharacterEscape(char)
  id: _handleUnrecognizedCharacterEscape(char)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.base.ParserBase
  langs:
  - java
  name: _handleUnrecognizedCharacterEscape(char ch)
  nameWithType: ParserBase._handleUnrecognizedCharacterEscape(char ch)
  fullName: com.fasterxml.jackson.core.base.ParserBase._handleUnrecognizedCharacterEscape(char ch)
  overload: com.fasterxml.jackson.core.base.ParserBase._handleUnrecognizedCharacterEscape*
  type: Method
  package: com.fasterxml.jackson.core.base
  syntax:
    content: protected char _handleUnrecognizedCharacterEscape(char ch)
    parameters:
    - id: ch
      type: char
    return:
      type: char
  exceptions:
  - type: com.fasterxml.jackson.core.JsonProcessingException
- uid: com.fasterxml.jackson.core.base.ParserBase._inputEnd
  id: _inputEnd
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.base.ParserBase
  langs:
  - java
  name: _inputEnd
  nameWithType: ParserBase._inputEnd
  fullName: com.fasterxml.jackson.core.base.ParserBase._inputEnd
  type: Field
  package: com.fasterxml.jackson.core.base
  summary: Index of character after last available one in the buffer.
  syntax:
    content: protected int _inputEnd
    return:
      type: int
- uid: com.fasterxml.jackson.core.base.ParserBase._inputPtr
  id: _inputPtr
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.base.ParserBase
  langs:
  - java
  name: _inputPtr
  nameWithType: ParserBase._inputPtr
  fullName: com.fasterxml.jackson.core.base.ParserBase._inputPtr
  type: Field
  package: com.fasterxml.jackson.core.base
  summary: Pointer to next available character in buffer
  syntax:
    content: protected int _inputPtr
    return:
      type: int
- uid: com.fasterxml.jackson.core.base.ParserBase._intLength
  id: _intLength
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.base.ParserBase
  langs:
  - java
  name: _intLength
  nameWithType: ParserBase._intLength
  fullName: com.fasterxml.jackson.core.base.ParserBase._intLength
  type: Field
  package: com.fasterxml.jackson.core.base
  summary: Length of integer part of the number, in characters
  syntax:
    content: protected int _intLength
    return:
      type: int
- uid: com.fasterxml.jackson.core.base.ParserBase._ioContext
  id: _ioContext
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.base.ParserBase
  langs:
  - java
  name: _ioContext
  nameWithType: ParserBase._ioContext
  fullName: com.fasterxml.jackson.core.base.ParserBase._ioContext
  type: Field
  package: com.fasterxml.jackson.core.base
  summary: I/O context for this reader. It handles buffer allocation for the reader.
  syntax:
    content: protected final IOContext _ioContext
    return:
      type: com.fasterxml.jackson.core.io.IOContext
- uid: com.fasterxml.jackson.core.base.ParserBase._nameCopied
  id: _nameCopied
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.base.ParserBase
  langs:
  - java
  name: _nameCopied
  nameWithType: ParserBase._nameCopied
  fullName: com.fasterxml.jackson.core.base.ParserBase._nameCopied
  type: Field
  package: com.fasterxml.jackson.core.base
  summary: Flag set to indicate whether the field name is available from the name copy buffer or not (in addition to its String representation being available via read context)
  syntax:
    content: protected boolean _nameCopied
    return:
      type: boolean
- uid: com.fasterxml.jackson.core.base.ParserBase._nameCopyBuffer
  id: _nameCopyBuffer
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.base.ParserBase
  langs:
  - java
  name: _nameCopyBuffer
  nameWithType: ParserBase._nameCopyBuffer
  fullName: com.fasterxml.jackson.core.base.ParserBase._nameCopyBuffer
  type: Field
  package: com.fasterxml.jackson.core.base
  summary: Temporary buffer that is needed if field name is accessed using <xref uid="com.fasterxml.jackson.core.base.ParserBase.getTextCharacters" data-throw-if-not-resolved="false">#getTextCharacters</xref> method (instead of String returning alternatives)
  syntax:
    content: protected char[] _nameCopyBuffer
    return:
      type: char[]
- uid: com.fasterxml.jackson.core.base.ParserBase._nextToken
  id: _nextToken
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.base.ParserBase
  langs:
  - java
  name: _nextToken
  nameWithType: ParserBase._nextToken
  fullName: com.fasterxml.jackson.core.base.ParserBase._nextToken
  type: Field
  package: com.fasterxml.jackson.core.base
  summary: Secondary token related to the next token after current one; used if its type is known. This may be value token that follows FIELD\_NAME, for example.
  syntax:
    content: protected JsonToken _nextToken
    return:
      type: com.fasterxml.jackson.core.JsonToken
- uid: com.fasterxml.jackson.core.base.ParserBase._numTypesValid
  id: _numTypesValid
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.base.ParserBase
  langs:
  - java
  name: _numTypesValid
  nameWithType: ParserBase._numTypesValid
  fullName: com.fasterxml.jackson.core.base.ParserBase._numTypesValid
  type: Field
  package: com.fasterxml.jackson.core.base
  summary: Bitfield that indicates which numeric representations have been calculated for the current type
  syntax:
    content: protected int _numTypesValid
    return:
      type: int
- uid: com.fasterxml.jackson.core.base.ParserBase._numberBigDecimal
  id: _numberBigDecimal
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.base.ParserBase
  langs:
  - java
  name: _numberBigDecimal
  nameWithType: ParserBase._numberBigDecimal
  fullName: com.fasterxml.jackson.core.base.ParserBase._numberBigDecimal
  type: Field
  package: com.fasterxml.jackson.core.base
  syntax:
    content: protected BigDecimal _numberBigDecimal
    return:
      type: java.math.BigDecimal
- uid: com.fasterxml.jackson.core.base.ParserBase._numberBigInt
  id: _numberBigInt
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.base.ParserBase
  langs:
  - java
  name: _numberBigInt
  nameWithType: ParserBase._numberBigInt
  fullName: com.fasterxml.jackson.core.base.ParserBase._numberBigInt
  type: Field
  package: com.fasterxml.jackson.core.base
  syntax:
    content: protected BigInteger _numberBigInt
    return:
      type: java.math.BigInteger
- uid: com.fasterxml.jackson.core.base.ParserBase._numberDouble
  id: _numberDouble
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.base.ParserBase
  langs:
  - java
  name: _numberDouble
  nameWithType: ParserBase._numberDouble
  fullName: com.fasterxml.jackson.core.base.ParserBase._numberDouble
  type: Field
  package: com.fasterxml.jackson.core.base
  syntax:
    content: protected double _numberDouble
    return:
      type: double
- uid: com.fasterxml.jackson.core.base.ParserBase._numberInt
  id: _numberInt
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.base.ParserBase
  langs:
  - java
  name: _numberInt
  nameWithType: ParserBase._numberInt
  fullName: com.fasterxml.jackson.core.base.ParserBase._numberInt
  type: Field
  package: com.fasterxml.jackson.core.base
  syntax:
    content: protected int _numberInt
    return:
      type: int
- uid: com.fasterxml.jackson.core.base.ParserBase._numberLong
  id: _numberLong
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.base.ParserBase
  langs:
  - java
  name: _numberLong
  nameWithType: ParserBase._numberLong
  fullName: com.fasterxml.jackson.core.base.ParserBase._numberLong
  type: Field
  package: com.fasterxml.jackson.core.base
  syntax:
    content: protected long _numberLong
    return:
      type: long
- uid: com.fasterxml.jackson.core.base.ParserBase._numberNegative
  id: _numberNegative
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.base.ParserBase
  langs:
  - java
  name: _numberNegative
  nameWithType: ParserBase._numberNegative
  fullName: com.fasterxml.jackson.core.base.ParserBase._numberNegative
  type: Field
  package: com.fasterxml.jackson.core.base
  summary: Flag that indicates whether numeric value has a negative value. That is, whether its textual representation starts with minus character.
  syntax:
    content: protected boolean _numberNegative
    return:
      type: boolean
- uid: com.fasterxml.jackson.core.base.ParserBase._parseIntValue()
  id: _parseIntValue()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.base.ParserBase
  langs:
  - java
  name: _parseIntValue()
  nameWithType: ParserBase._parseIntValue()
  fullName: com.fasterxml.jackson.core.base.ParserBase._parseIntValue()
  overload: com.fasterxml.jackson.core.base.ParserBase._parseIntValue*
  type: Method
  package: com.fasterxml.jackson.core.base
  syntax:
    content: protected int _parseIntValue()
    return:
      type: int
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.base.ParserBase._parseNumericValue(int)
  id: _parseNumericValue(int)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.base.ParserBase
  langs:
  - java
  name: _parseNumericValue(int expType)
  nameWithType: ParserBase._parseNumericValue(int expType)
  fullName: com.fasterxml.jackson.core.base.ParserBase._parseNumericValue(int expType)
  overload: com.fasterxml.jackson.core.base.ParserBase._parseNumericValue*
  type: Method
  package: com.fasterxml.jackson.core.base
  summary: 'Method that will parse actual numeric value out of a syntactically valid number value. Type it will parse into depends on whether it is a floating point number, as well as its magnitude: smallest legal type (of ones available) is used for efficiency.'
  syntax:
    content: protected void _parseNumericValue(int expType)
    parameters:
    - id: expType
      type: int
      description: >-
        Numeric type that we will immediately need, if any;
           mostly necessary to optimize handling of floating point numbers
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.base.ParserBase._parsingContext
  id: _parsingContext
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.base.ParserBase
  langs:
  - java
  name: _parsingContext
  nameWithType: ParserBase._parsingContext
  fullName: com.fasterxml.jackson.core.base.ParserBase._parsingContext
  type: Field
  package: com.fasterxml.jackson.core.base
  summary: Information about parser context, context in which the next token is to be parsed (root, array, object).
  syntax:
    content: protected JsonReadContext _parsingContext
    return:
      type: com.fasterxml.jackson.core.json.JsonReadContext
- uid: com.fasterxml.jackson.core.base.ParserBase._releaseBuffers()
  id: _releaseBuffers()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.base.ParserBase
  langs:
  - java
  name: _releaseBuffers()
  nameWithType: ParserBase._releaseBuffers()
  fullName: com.fasterxml.jackson.core.base.ParserBase._releaseBuffers()
  overload: com.fasterxml.jackson.core.base.ParserBase._releaseBuffers*
  type: Method
  package: com.fasterxml.jackson.core.base
  summary: Method called to release internal buffers owned by the base reader. This may be called along with <xref uid="com.fasterxml.jackson.core.base.ParserBase._closeInput*" data-throw-if-not-resolved="false">#_closeInput</xref> (for example, when explicitly closing this reader instance), or separately (if need be).
  syntax:
    content: protected void _releaseBuffers()
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.base.ParserBase._reportMismatchedEndMarker(int,char)
  id: _reportMismatchedEndMarker(int,char)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.base.ParserBase
  langs:
  - java
  name: _reportMismatchedEndMarker(int actCh, char expCh)
  nameWithType: ParserBase._reportMismatchedEndMarker(int actCh, char expCh)
  fullName: com.fasterxml.jackson.core.base.ParserBase._reportMismatchedEndMarker(int actCh, char expCh)
  overload: com.fasterxml.jackson.core.base.ParserBase._reportMismatchedEndMarker*
  type: Method
  package: com.fasterxml.jackson.core.base
  syntax:
    content: protected void _reportMismatchedEndMarker(int actCh, char expCh)
    parameters:
    - id: actCh
      type: int
    - id: expCh
      type: char
  exceptions:
  - type: com.fasterxml.jackson.core.JsonParseException
- uid: com.fasterxml.jackson.core.base.ParserBase._reportTooLongIntegral(int,java.lang.String)
  id: _reportTooLongIntegral(int,java.lang.String)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.base.ParserBase
  langs:
  - java
  name: _reportTooLongIntegral(int expType, String rawNum)
  nameWithType: ParserBase._reportTooLongIntegral(int expType, String rawNum)
  fullName: com.fasterxml.jackson.core.base.ParserBase._reportTooLongIntegral(int expType, String rawNum)
  overload: com.fasterxml.jackson.core.base.ParserBase._reportTooLongIntegral*
  type: Method
  package: com.fasterxml.jackson.core.base
  syntax:
    content: protected void _reportTooLongIntegral(int expType, String rawNum)
    parameters:
    - id: expType
      type: int
    - id: rawNum
      type: java.lang.String
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.base.ParserBase._textBuffer
  id: _textBuffer
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.base.ParserBase
  langs:
  - java
  name: _textBuffer
  nameWithType: ParserBase._textBuffer
  fullName: com.fasterxml.jackson.core.base.ParserBase._textBuffer
  type: Field
  package: com.fasterxml.jackson.core.base
  summary: Buffer that contains contents of String values, including field names if necessary (name split across boundary, contains escape sequence, or access needed to char array)
  syntax:
    content: protected final TextBuffer _textBuffer
    return:
      type: com.fasterxml.jackson.core.util.TextBuffer
- uid: com.fasterxml.jackson.core.base.ParserBase._throwUnquotedSpace(int,java.lang.String)
  id: _throwUnquotedSpace(int,java.lang.String)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.base.ParserBase
  langs:
  - java
  name: _throwUnquotedSpace(int i, String ctxtDesc)
  nameWithType: ParserBase._throwUnquotedSpace(int i, String ctxtDesc)
  fullName: com.fasterxml.jackson.core.base.ParserBase._throwUnquotedSpace(int i, String ctxtDesc)
  overload: com.fasterxml.jackson.core.base.ParserBase._throwUnquotedSpace*
  type: Method
  package: com.fasterxml.jackson.core.base
  summary: 'Method called to report a problem with unquoted control character. Note: it is possible to suppress some instances of exception by enabling <xref uid="" data-throw-if-not-resolved="false">Feature#ALLOW_UNQUOTED_CONTROL_CHARS</xref>.'
  syntax:
    content: protected void _throwUnquotedSpace(int i, String ctxtDesc)
    parameters:
    - id: i
      type: int
    - id: ctxtDesc
      type: java.lang.String
  exceptions:
  - type: com.fasterxml.jackson.core.JsonParseException
- uid: com.fasterxml.jackson.core.base.ParserBase._tokenInputCol
  id: _tokenInputCol
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.base.ParserBase
  langs:
  - java
  name: _tokenInputCol
  nameWithType: ParserBase._tokenInputCol
  fullName: com.fasterxml.jackson.core.base.ParserBase._tokenInputCol
  type: Field
  package: com.fasterxml.jackson.core.base
  summary: Column on input row that current token starts; 0-based (although in the end it'll be converted to 1-based)
  syntax:
    content: protected int _tokenInputCol
    return:
      type: int
- uid: com.fasterxml.jackson.core.base.ParserBase._tokenInputRow
  id: _tokenInputRow
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.base.ParserBase
  langs:
  - java
  name: _tokenInputRow
  nameWithType: ParserBase._tokenInputRow
  fullName: com.fasterxml.jackson.core.base.ParserBase._tokenInputRow
  type: Field
  package: com.fasterxml.jackson.core.base
  summary: Input row on which current token starts, 1-based
  syntax:
    content: protected int _tokenInputRow
    return:
      type: int
- uid: com.fasterxml.jackson.core.base.ParserBase._tokenInputTotal
  id: _tokenInputTotal
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.base.ParserBase
  langs:
  - java
  name: _tokenInputTotal
  nameWithType: ParserBase._tokenInputTotal
  fullName: com.fasterxml.jackson.core.base.ParserBase._tokenInputTotal
  type: Field
  package: com.fasterxml.jackson.core.base
  summary: Total number of bytes/characters read before start of current token. For big (gigabyte-sized) sizes are possible, needs to be long, unlike pointers and sizes related to in-memory buffers.
  syntax:
    content: protected long _tokenInputTotal
    return:
      type: long
- uid: com.fasterxml.jackson.core.base.ParserBase._validJsonTokenList()
  id: _validJsonTokenList()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.base.ParserBase
  langs:
  - java
  name: _validJsonTokenList()
  nameWithType: ParserBase._validJsonTokenList()
  fullName: com.fasterxml.jackson.core.base.ParserBase._validJsonTokenList()
  overload: com.fasterxml.jackson.core.base.ParserBase._validJsonTokenList*
  type: Method
  package: com.fasterxml.jackson.core.base
  syntax:
    content: protected String _validJsonTokenList()
    return:
      type: java.lang.String
      description: >-
        Description to use as "valid tokens" in an exception message about
            invalid (unrecognized) JSON token: called when parser finds something that
            looks like unquoted textual token
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.base.ParserBase._validJsonValueList()
  id: _validJsonValueList()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.base.ParserBase
  langs:
  - java
  name: _validJsonValueList()
  nameWithType: ParserBase._validJsonValueList()
  fullName: com.fasterxml.jackson.core.base.ParserBase._validJsonValueList()
  overload: com.fasterxml.jackson.core.base.ParserBase._validJsonValueList*
  type: Method
  package: com.fasterxml.jackson.core.base
  syntax:
    content: protected String _validJsonValueList()
    return:
      type: java.lang.String
      description: >-
        Description to use as "valid JSON values" in an exception message about
            invalid (unrecognized) JSON value: called when parser finds something that
            does not look like a value or separator.
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.base.ParserBase.close()
  id: close()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.base.ParserBase
  langs:
  - java
  name: close()
  nameWithType: ParserBase.close()
  fullName: com.fasterxml.jackson.core.base.ParserBase.close()
  overload: com.fasterxml.jackson.core.base.ParserBase.close*
  type: Method
  package: com.fasterxml.jackson.core.base
  summary: Closes the parser so that no further iteration or data access can be made; will also close the underlying input source if parser either **owns** the input source, or feature <xref uid="" data-throw-if-not-resolved="false">Feature#AUTO_CLOSE_SOURCE</xref> is enabled. Whether parser owns the input source depends on factory method that was used to construct instance (so check <xref uid="com.fasterxml.jackson.core.JsonFactory" data-throw-if-not-resolved="false">com.fasterxml.jackson.core.JsonFactory</xref> for details, but the general idea is that if caller passes in closable resource (such as <xref uid="java.io.InputStream" data-throw-if-not-resolved="false">InputStream</xref> or <xref uid="java.io.Reader" data-throw-if-not-resolved="false">Reader</xref>) parser does NOT own the source; but if it passes a reference (such as <xref uid="java.io.File" data-throw-if-not-resolved="false">java.io.File</xref> or <xref uid="java.net.URL" data-throw-if-not-resolved="false">java.net.URL</xref> and creates stream or reader it does own them.
  syntax:
    content: public void close()
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.base.ParserBase.convertNumberToBigDecimal()
  id: convertNumberToBigDecimal()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.base.ParserBase
  langs:
  - java
  name: convertNumberToBigDecimal()
  nameWithType: ParserBase.convertNumberToBigDecimal()
  fullName: com.fasterxml.jackson.core.base.ParserBase.convertNumberToBigDecimal()
  overload: com.fasterxml.jackson.core.base.ParserBase.convertNumberToBigDecimal*
  type: Method
  package: com.fasterxml.jackson.core.base
  syntax:
    content: protected void convertNumberToBigDecimal()
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.base.ParserBase.convertNumberToBigInteger()
  id: convertNumberToBigInteger()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.base.ParserBase
  langs:
  - java
  name: convertNumberToBigInteger()
  nameWithType: ParserBase.convertNumberToBigInteger()
  fullName: com.fasterxml.jackson.core.base.ParserBase.convertNumberToBigInteger()
  overload: com.fasterxml.jackson.core.base.ParserBase.convertNumberToBigInteger*
  type: Method
  package: com.fasterxml.jackson.core.base
  syntax:
    content: protected void convertNumberToBigInteger()
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.base.ParserBase.convertNumberToDouble()
  id: convertNumberToDouble()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.base.ParserBase
  langs:
  - java
  name: convertNumberToDouble()
  nameWithType: ParserBase.convertNumberToDouble()
  fullName: com.fasterxml.jackson.core.base.ParserBase.convertNumberToDouble()
  overload: com.fasterxml.jackson.core.base.ParserBase.convertNumberToDouble*
  type: Method
  package: com.fasterxml.jackson.core.base
  syntax:
    content: protected void convertNumberToDouble()
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.base.ParserBase.convertNumberToInt()
  id: convertNumberToInt()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.base.ParserBase
  langs:
  - java
  name: convertNumberToInt()
  nameWithType: ParserBase.convertNumberToInt()
  fullName: com.fasterxml.jackson.core.base.ParserBase.convertNumberToInt()
  overload: com.fasterxml.jackson.core.base.ParserBase.convertNumberToInt*
  type: Method
  package: com.fasterxml.jackson.core.base
  syntax:
    content: protected void convertNumberToInt()
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.base.ParserBase.convertNumberToLong()
  id: convertNumberToLong()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.base.ParserBase
  langs:
  - java
  name: convertNumberToLong()
  nameWithType: ParserBase.convertNumberToLong()
  fullName: com.fasterxml.jackson.core.base.ParserBase.convertNumberToLong()
  overload: com.fasterxml.jackson.core.base.ParserBase.convertNumberToLong*
  type: Method
  package: com.fasterxml.jackson.core.base
  syntax:
    content: protected void convertNumberToLong()
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.base.ParserBase.disable(com.fasterxml.jackson.core.JsonParser.Feature)
  id: disable(com.fasterxml.jackson.core.JsonParser.Feature)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.base.ParserBase
  langs:
  - java
  name: disable(JsonParser.Feature f)
  nameWithType: ParserBase.disable(JsonParser.Feature f)
  fullName: com.fasterxml.jackson.core.base.ParserBase.disable(JsonParser.Feature f)
  overload: com.fasterxml.jackson.core.base.ParserBase.disable*
  type: Method
  package: com.fasterxml.jackson.core.base
  summary: Method for disabling specified feature (check <xref uid="" data-throw-if-not-resolved="false">Feature</xref> for list of features)
  syntax:
    content: public JsonParser disable(JsonParser.Feature f)
    parameters:
    - id: f
      type: com.fasterxml.jackson.core.JsonParser.Feature
    return:
      type: com.fasterxml.jackson.core.JsonParser
- uid: com.fasterxml.jackson.core.base.ParserBase.enable(com.fasterxml.jackson.core.JsonParser.Feature)
  id: enable(com.fasterxml.jackson.core.JsonParser.Feature)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.base.ParserBase
  langs:
  - java
  name: enable(JsonParser.Feature f)
  nameWithType: ParserBase.enable(JsonParser.Feature f)
  fullName: com.fasterxml.jackson.core.base.ParserBase.enable(JsonParser.Feature f)
  overload: com.fasterxml.jackson.core.base.ParserBase.enable*
  type: Method
  package: com.fasterxml.jackson.core.base
  summary: Method for enabling specified parser feature (check <xref uid="" data-throw-if-not-resolved="false">Feature</xref> for list of features)
  syntax:
    content: public JsonParser enable(JsonParser.Feature f)
    parameters:
    - id: f
      type: com.fasterxml.jackson.core.JsonParser.Feature
    return:
      type: com.fasterxml.jackson.core.JsonParser
- uid: com.fasterxml.jackson.core.base.ParserBase.getBigIntegerValue()
  id: getBigIntegerValue()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.base.ParserBase
  langs:
  - java
  name: getBigIntegerValue()
  nameWithType: ParserBase.getBigIntegerValue()
  fullName: com.fasterxml.jackson.core.base.ParserBase.getBigIntegerValue()
  overload: com.fasterxml.jackson.core.base.ParserBase.getBigIntegerValue*
  type: Method
  package: com.fasterxml.jackson.core.base
  summary: Numeric accessor that can be called when the current token is of type <xref uid="com.fasterxml.jackson.core.JsonToken.VALUE_NUMBER_INT" data-throw-if-not-resolved="false">JsonToken#VALUE_NUMBER_INT</xref> and it can not be used as a Java long primitive type due to its magnitude. It can also be called for <xref uid="com.fasterxml.jackson.core.JsonToken.VALUE_NUMBER_FLOAT" data-throw-if-not-resolved="false">JsonToken#VALUE_NUMBER_FLOAT</xref>; if so, it is equivalent to calling <xref uid="com.fasterxml.jackson.core.base.ParserBase.getDecimalValue*" data-throw-if-not-resolved="false">#getDecimalValue</xref> and then constructing a <xref uid="java.math.BigInteger" data-throw-if-not-resolved="false">BigInteger</xref> from that value.
  syntax:
    content: public BigInteger getBigIntegerValue()
    return:
      type: java.math.BigInteger
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.base.ParserBase.getBinaryValue(com.fasterxml.jackson.core.Base64Variant)
  id: getBinaryValue(com.fasterxml.jackson.core.Base64Variant)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.base.ParserBase
  langs:
  - java
  name: getBinaryValue(Base64Variant variant)
  nameWithType: ParserBase.getBinaryValue(Base64Variant variant)
  fullName: com.fasterxml.jackson.core.base.ParserBase.getBinaryValue(Base64Variant variant)
  overload: com.fasterxml.jackson.core.base.ParserBase.getBinaryValue*
  type: Method
  package: com.fasterxml.jackson.core.base
  summary: >-
    Method that can be used to read (and consume -- results may not be accessible using other methods after the call) base64-encoded binary data included in the current textual JSON value. It works similar to getting String value via <xref uid="com.fasterxml.jackson.core.base.ParserBase.getText" data-throw-if-not-resolved="false">#getText</xref> and decoding result (except for decoding part), but should be significantly more performant.


    Note that non-decoded textual contents of the current token are not guaranteed to be accessible after this method is called. Current implementation, for example, clears up textual content during decoding. Decoded binary content, however, will be retained until parser is advanced to the next event.
  syntax:
    content: public byte[] getBinaryValue(Base64Variant variant)
    parameters:
    - id: variant
      type: com.fasterxml.jackson.core.Base64Variant
    return:
      type: byte[]
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.base.ParserBase.getCurrentLocation()
  id: getCurrentLocation()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.base.ParserBase
  langs:
  - java
  name: getCurrentLocation()
  nameWithType: ParserBase.getCurrentLocation()
  fullName: com.fasterxml.jackson.core.base.ParserBase.getCurrentLocation()
  overload: com.fasterxml.jackson.core.base.ParserBase.getCurrentLocation*
  type: Method
  package: com.fasterxml.jackson.core.base
  summary: Method that returns location of the last processed character; usually for error reporting purposes
  syntax:
    content: public JsonLocation getCurrentLocation()
    return:
      type: com.fasterxml.jackson.core.JsonLocation
- uid: com.fasterxml.jackson.core.base.ParserBase.getCurrentName()
  id: getCurrentName()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.base.ParserBase
  langs:
  - java
  name: getCurrentName()
  nameWithType: ParserBase.getCurrentName()
  fullName: com.fasterxml.jackson.core.base.ParserBase.getCurrentName()
  overload: com.fasterxml.jackson.core.base.ParserBase.getCurrentName*
  type: Method
  package: com.fasterxml.jackson.core.base
  summary: Method that can be called to get the name associated with the current event.
  syntax:
    content: public String getCurrentName()
    return:
      type: java.lang.String
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.base.ParserBase.getCurrentValue()
  id: getCurrentValue()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.base.ParserBase
  langs:
  - java
  name: getCurrentValue()
  nameWithType: ParserBase.getCurrentValue()
  fullName: com.fasterxml.jackson.core.base.ParserBase.getCurrentValue()
  overload: com.fasterxml.jackson.core.base.ParserBase.getCurrentValue*
  type: Method
  package: com.fasterxml.jackson.core.base
  summary: >-
    Helper method, usually equivalent to: `getParsingContext().getCurrentValue();`


    Note that "current value" is NOT populated (or used) by Streaming parser; it is only used by higher-level data-binding functionality. The reason it is included here is that it can be stored and accessed hierarchically, and gets passed through data-binding.
  syntax:
    content: public Object getCurrentValue()
    return:
      type: java.lang.Object
- uid: com.fasterxml.jackson.core.base.ParserBase.getDecimalValue()
  id: getDecimalValue()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.base.ParserBase
  langs:
  - java
  name: getDecimalValue()
  nameWithType: ParserBase.getDecimalValue()
  fullName: com.fasterxml.jackson.core.base.ParserBase.getDecimalValue()
  overload: com.fasterxml.jackson.core.base.ParserBase.getDecimalValue*
  type: Method
  package: com.fasterxml.jackson.core.base
  summary: Numeric accessor that can be called when the current token is of type <xref uid="com.fasterxml.jackson.core.JsonToken.VALUE_NUMBER_FLOAT" data-throw-if-not-resolved="false">JsonToken#VALUE_NUMBER_FLOAT</xref> or <xref uid="com.fasterxml.jackson.core.JsonToken.VALUE_NUMBER_INT" data-throw-if-not-resolved="false">JsonToken#VALUE_NUMBER_INT</xref>. No under/overflow exceptions are ever thrown.
  syntax:
    content: public BigDecimal getDecimalValue()
    return:
      type: java.math.BigDecimal
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.base.ParserBase.getDoubleValue()
  id: getDoubleValue()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.base.ParserBase
  langs:
  - java
  name: getDoubleValue()
  nameWithType: ParserBase.getDoubleValue()
  fullName: com.fasterxml.jackson.core.base.ParserBase.getDoubleValue()
  overload: com.fasterxml.jackson.core.base.ParserBase.getDoubleValue*
  type: Method
  package: com.fasterxml.jackson.core.base
  summary: >-
    Numeric accessor that can be called when the current token is of type <xref uid="com.fasterxml.jackson.core.JsonToken.VALUE_NUMBER_FLOAT" data-throw-if-not-resolved="false">JsonToken#VALUE_NUMBER_FLOAT</xref> and it can be expressed as a Java double primitive type. It can also be called for <xref uid="com.fasterxml.jackson.core.JsonToken.VALUE_NUMBER_INT" data-throw-if-not-resolved="false">JsonToken#VALUE_NUMBER_INT</xref>; if so, it is equivalent to calling <xref uid="com.fasterxml.jackson.core.base.ParserBase.getLongValue*" data-throw-if-not-resolved="false">#getLongValue</xref> and then casting; except for possible overflow/underflow exception.


    Note: if the value falls outside of range of Java double, a <xref uid="com.fasterxml.jackson.core.JsonParseException" data-throw-if-not-resolved="false">JsonParseException</xref> will be thrown to indicate numeric overflow/underflow.
  syntax:
    content: public double getDoubleValue()
    return:
      type: double
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.base.ParserBase.getFloatValue()
  id: getFloatValue()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.base.ParserBase
  langs:
  - java
  name: getFloatValue()
  nameWithType: ParserBase.getFloatValue()
  fullName: com.fasterxml.jackson.core.base.ParserBase.getFloatValue()
  overload: com.fasterxml.jackson.core.base.ParserBase.getFloatValue*
  type: Method
  package: com.fasterxml.jackson.core.base
  summary: >-
    Numeric accessor that can be called when the current token is of type <xref uid="com.fasterxml.jackson.core.JsonToken.VALUE_NUMBER_FLOAT" data-throw-if-not-resolved="false">JsonToken#VALUE_NUMBER_FLOAT</xref> and it can be expressed as a Java float primitive type. It can also be called for <xref uid="com.fasterxml.jackson.core.JsonToken.VALUE_NUMBER_INT" data-throw-if-not-resolved="false">JsonToken#VALUE_NUMBER_INT</xref>; if so, it is equivalent to calling <xref uid="com.fasterxml.jackson.core.base.ParserBase.getLongValue*" data-throw-if-not-resolved="false">#getLongValue</xref> and then casting; except for possible overflow/underflow exception.


    Note: if the value falls outside of range of Java float, a <xref uid="com.fasterxml.jackson.core.JsonParseException" data-throw-if-not-resolved="false">JsonParseException</xref> will be thrown to indicate numeric overflow/underflow.
  syntax:
    content: public float getFloatValue()
    return:
      type: float
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.base.ParserBase.getIntValue()
  id: getIntValue()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.base.ParserBase
  langs:
  - java
  name: getIntValue()
  nameWithType: ParserBase.getIntValue()
  fullName: com.fasterxml.jackson.core.base.ParserBase.getIntValue()
  overload: com.fasterxml.jackson.core.base.ParserBase.getIntValue*
  type: Method
  package: com.fasterxml.jackson.core.base
  summary: >-
    Numeric accessor that can be called when the current token is of type <xref uid="com.fasterxml.jackson.core.JsonToken.VALUE_NUMBER_INT" data-throw-if-not-resolved="false">JsonToken#VALUE_NUMBER_INT</xref> and it can be expressed as a value of Java int primitive type. It can also be called for <xref uid="com.fasterxml.jackson.core.JsonToken.VALUE_NUMBER_FLOAT" data-throw-if-not-resolved="false">JsonToken#VALUE_NUMBER_FLOAT</xref>; if so, it is equivalent to calling <xref uid="com.fasterxml.jackson.core.base.ParserBase.getDoubleValue*" data-throw-if-not-resolved="false">#getDoubleValue</xref> and then casting; except for possible overflow/underflow exception.


    Note: if the resulting integer value falls outside range of Java int, a <xref uid="com.fasterxml.jackson.core.JsonParseException" data-throw-if-not-resolved="false">JsonParseException</xref> may be thrown to indicate numeric overflow/underflow.
  syntax:
    content: public int getIntValue()
    return:
      type: int
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.base.ParserBase.getLongValue()
  id: getLongValue()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.base.ParserBase
  langs:
  - java
  name: getLongValue()
  nameWithType: ParserBase.getLongValue()
  fullName: com.fasterxml.jackson.core.base.ParserBase.getLongValue()
  overload: com.fasterxml.jackson.core.base.ParserBase.getLongValue*
  type: Method
  package: com.fasterxml.jackson.core.base
  summary: >-
    Numeric accessor that can be called when the current token is of type <xref uid="com.fasterxml.jackson.core.JsonToken.VALUE_NUMBER_INT" data-throw-if-not-resolved="false">JsonToken#VALUE_NUMBER_INT</xref> and it can be expressed as a Java long primitive type. It can also be called for <xref uid="com.fasterxml.jackson.core.JsonToken.VALUE_NUMBER_FLOAT" data-throw-if-not-resolved="false">JsonToken#VALUE_NUMBER_FLOAT</xref>; if so, it is equivalent to calling <xref uid="com.fasterxml.jackson.core.base.ParserBase.getDoubleValue*" data-throw-if-not-resolved="false">#getDoubleValue</xref> and then casting to int; except for possible overflow/underflow exception.


    Note: if the token is an integer, but its value falls outside of range of Java long, a <xref uid="com.fasterxml.jackson.core.JsonParseException" data-throw-if-not-resolved="false">JsonParseException</xref> may be thrown to indicate numeric overflow/underflow.
  syntax:
    content: public long getLongValue()
    return:
      type: long
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.base.ParserBase.getNumberType()
  id: getNumberType()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.base.ParserBase
  langs:
  - java
  name: getNumberType()
  nameWithType: ParserBase.getNumberType()
  fullName: com.fasterxml.jackson.core.base.ParserBase.getNumberType()
  overload: com.fasterxml.jackson.core.base.ParserBase.getNumberType*
  type: Method
  package: com.fasterxml.jackson.core.base
  summary: If current token is of type <xref uid="com.fasterxml.jackson.core.JsonToken.VALUE_NUMBER_INT" data-throw-if-not-resolved="false">JsonToken#VALUE_NUMBER_INT</xref> or <xref uid="com.fasterxml.jackson.core.JsonToken.VALUE_NUMBER_FLOAT" data-throw-if-not-resolved="false">JsonToken#VALUE_NUMBER_FLOAT</xref>, returns one of <xref uid="" data-throw-if-not-resolved="false">NumberType</xref> constants; otherwise returns null.
  syntax:
    content: public JsonParser.NumberType getNumberType()
    return:
      type: com.fasterxml.jackson.core.JsonParser.NumberType
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.base.ParserBase.getNumberValue()
  id: getNumberValue()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.base.ParserBase
  langs:
  - java
  name: getNumberValue()
  nameWithType: ParserBase.getNumberValue()
  fullName: com.fasterxml.jackson.core.base.ParserBase.getNumberValue()
  overload: com.fasterxml.jackson.core.base.ParserBase.getNumberValue*
  type: Method
  package: com.fasterxml.jackson.core.base
  summary: Generic number value accessor method that will work for all kinds of numeric values. It will return the optimal (simplest/smallest possible) wrapper object that can express the numeric value just parsed.
  syntax:
    content: public Number getNumberValue()
    return:
      type: java.lang.Number
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.base.ParserBase.getParsingContext()
  id: getParsingContext()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.base.ParserBase
  langs:
  - java
  name: getParsingContext()
  nameWithType: ParserBase.getParsingContext()
  fullName: com.fasterxml.jackson.core.base.ParserBase.getParsingContext()
  overload: com.fasterxml.jackson.core.base.ParserBase.getParsingContext*
  type: Method
  package: com.fasterxml.jackson.core.base
  summary: 'Method that can be used to access current parsing context reader is in. There are 3 different types: root, array and object contexts, with slightly different available information. Contexts are hierarchically nested, and can be used for example for figuring out part of the input document that correspond to specific array or object (for highlighting purposes, or error reporting). Contexts can also be used for simple xpath-like matching of input, if so desired.'
  syntax:
    content: public JsonReadContext getParsingContext()
    return:
      type: com.fasterxml.jackson.core.json.JsonReadContext
- uid: com.fasterxml.jackson.core.base.ParserBase.getTokenCharacterOffset()
  id: getTokenCharacterOffset()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.base.ParserBase
  langs:
  - java
  name: getTokenCharacterOffset()
  nameWithType: ParserBase.getTokenCharacterOffset()
  fullName: com.fasterxml.jackson.core.base.ParserBase.getTokenCharacterOffset()
  overload: com.fasterxml.jackson.core.base.ParserBase.getTokenCharacterOffset*
  type: Method
  package: com.fasterxml.jackson.core.base
  syntax:
    content: public long getTokenCharacterOffset()
    return:
      type: long
- uid: com.fasterxml.jackson.core.base.ParserBase.getTokenColumnNr()
  id: getTokenColumnNr()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.base.ParserBase
  langs:
  - java
  name: getTokenColumnNr()
  nameWithType: ParserBase.getTokenColumnNr()
  fullName: com.fasterxml.jackson.core.base.ParserBase.getTokenColumnNr()
  overload: com.fasterxml.jackson.core.base.ParserBase.getTokenColumnNr*
  type: Method
  package: com.fasterxml.jackson.core.base
  syntax:
    content: public int getTokenColumnNr()
    return:
      type: int
- uid: com.fasterxml.jackson.core.base.ParserBase.getTokenLineNr()
  id: getTokenLineNr()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.base.ParserBase
  langs:
  - java
  name: getTokenLineNr()
  nameWithType: ParserBase.getTokenLineNr()
  fullName: com.fasterxml.jackson.core.base.ParserBase.getTokenLineNr()
  overload: com.fasterxml.jackson.core.base.ParserBase.getTokenLineNr*
  type: Method
  package: com.fasterxml.jackson.core.base
  syntax:
    content: public int getTokenLineNr()
    return:
      type: int
- uid: com.fasterxml.jackson.core.base.ParserBase.getTokenLocation()
  id: getTokenLocation()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.base.ParserBase
  langs:
  - java
  name: getTokenLocation()
  nameWithType: ParserBase.getTokenLocation()
  fullName: com.fasterxml.jackson.core.base.ParserBase.getTokenLocation()
  overload: com.fasterxml.jackson.core.base.ParserBase.getTokenLocation*
  type: Method
  package: com.fasterxml.jackson.core.base
  summary: Method that return the **starting** location of the current token; that is, position of the first character from input that starts the current token.
  syntax:
    content: public JsonLocation getTokenLocation()
    return:
      type: com.fasterxml.jackson.core.JsonLocation
- uid: com.fasterxml.jackson.core.base.ParserBase.growArrayBy(int[],int)
  id: growArrayBy(int[],int)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.base.ParserBase
  langs:
  - java
  name: growArrayBy(int[] arr, int more)
  nameWithType: ParserBase.growArrayBy(int[] arr, int more)
  fullName: com.fasterxml.jackson.core.base.ParserBase.growArrayBy(int[] arr, int more)
  overload: com.fasterxml.jackson.core.base.ParserBase.growArrayBy*
  type: Method
  package: com.fasterxml.jackson.core.base
  syntax:
    content: protected static int[] growArrayBy(int[] arr, int more)
    parameters:
    - id: arr
      type: int[]
    - id: more
      type: int
    return:
      type: int[]
- uid: com.fasterxml.jackson.core.base.ParserBase.hasTextCharacters()
  id: hasTextCharacters()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.base.ParserBase
  langs:
  - java
  name: hasTextCharacters()
  nameWithType: ParserBase.hasTextCharacters()
  fullName: com.fasterxml.jackson.core.base.ParserBase.hasTextCharacters()
  overload: com.fasterxml.jackson.core.base.ParserBase.hasTextCharacters*
  type: Method
  package: com.fasterxml.jackson.core.base
  summary: >-
    Method that can be used to determine whether calling of <xref uid="com.fasterxml.jackson.core.base.ParserBase.getTextCharacters" data-throw-if-not-resolved="false">#getTextCharacters</xref> would be the most efficient way to access textual content for the event parser currently points to.


    Default implementation simply returns false since only actual implementation class has knowledge of its internal buffering state. Implementations are strongly encouraged to properly override this method, to allow efficient copying of content by other code.
  syntax:
    content: public boolean hasTextCharacters()
    return:
      type: boolean
- uid: com.fasterxml.jackson.core.base.ParserBase.isClosed()
  id: isClosed()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.base.ParserBase
  langs:
  - java
  name: isClosed()
  nameWithType: ParserBase.isClosed()
  fullName: com.fasterxml.jackson.core.base.ParserBase.isClosed()
  overload: com.fasterxml.jackson.core.base.ParserBase.isClosed*
  type: Method
  package: com.fasterxml.jackson.core.base
  summary: Method that can be called to determine whether this parser is closed or not. If it is closed, no new tokens can be retrieved by calling <xref uid="com.fasterxml.jackson.core.base.ParserBase.nextToken" data-throw-if-not-resolved="false">#nextToken</xref> (and the underlying stream may be closed). Closing may be due to an explicit call to <xref uid="com.fasterxml.jackson.core.base.ParserBase.close*" data-throw-if-not-resolved="false">#close</xref> or because parser has encountered end of input.
  syntax:
    content: public boolean isClosed()
    return:
      type: boolean
- uid: com.fasterxml.jackson.core.base.ParserBase.isNaN()
  id: isNaN()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.base.ParserBase
  langs:
  - java
  name: isNaN()
  nameWithType: ParserBase.isNaN()
  fullName: com.fasterxml.jackson.core.base.ParserBase.isNaN()
  overload: com.fasterxml.jackson.core.base.ParserBase.isNaN*
  type: Method
  package: com.fasterxml.jackson.core.base
  summary: 'Access for checking whether current token is a numeric value token, but one that is of "not-a-number" (NaN) variety (including both "NaN" AND positive/negative infinity!): not supported by all formats, but often supported for <xref uid="com.fasterxml.jackson.core.JsonToken.VALUE_NUMBER_FLOAT" data-throw-if-not-resolved="false">JsonToken#VALUE_NUMBER_FLOAT</xref>. NOTE: roughly equivalent to calling `!Double.isFinite()` on value you would get from calling <xref uid="com.fasterxml.jackson.core.base.ParserBase.getDoubleValue()" data-throw-if-not-resolved="false">#getDoubleValue()</xref>.'
  syntax:
    content: public boolean isNaN()
    return:
      type: boolean
- uid: com.fasterxml.jackson.core.base.ParserBase.loadMore()
  id: loadMore()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.base.ParserBase
  langs:
  - java
  name: loadMore()
  nameWithType: ParserBase.loadMore()
  fullName: com.fasterxml.jackson.core.base.ParserBase.loadMore()
  overload: com.fasterxml.jackson.core.base.ParserBase.loadMore*
  type: Method
  package: com.fasterxml.jackson.core.base
  syntax:
    content: protected boolean loadMore()
    return:
      type: boolean
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.base.ParserBase.loadMoreGuaranteed()
  id: loadMoreGuaranteed()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.base.ParserBase
  langs:
  - java
  name: loadMoreGuaranteed()
  nameWithType: ParserBase.loadMoreGuaranteed()
  fullName: com.fasterxml.jackson.core.base.ParserBase.loadMoreGuaranteed()
  overload: com.fasterxml.jackson.core.base.ParserBase.loadMoreGuaranteed*
  type: Method
  package: com.fasterxml.jackson.core.base
  syntax:
    content: protected void loadMoreGuaranteed()
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.base.ParserBase.overrideCurrentName(java.lang.String)
  id: overrideCurrentName(java.lang.String)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.base.ParserBase
  langs:
  - java
  name: overrideCurrentName(String name)
  nameWithType: ParserBase.overrideCurrentName(String name)
  fullName: com.fasterxml.jackson.core.base.ParserBase.overrideCurrentName(String name)
  overload: com.fasterxml.jackson.core.base.ParserBase.overrideCurrentName*
  type: Method
  package: com.fasterxml.jackson.core.base
  summary: >-
    Method that can be used to change what is considered to be the current (field) name. May be needed to support non-JSON data formats or unusual binding conventions; not needed for typical processing.


    Note that use of this method should only be done as sort of last resort, as it is a work-around for regular operation.
  syntax:
    content: public void overrideCurrentName(String name)
    parameters:
    - id: name
      type: java.lang.String
- uid: com.fasterxml.jackson.core.base.ParserBase.overrideStdFeatures(int,int)
  id: overrideStdFeatures(int,int)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.base.ParserBase
  langs:
  - java
  name: overrideStdFeatures(int values, int mask)
  nameWithType: ParserBase.overrideStdFeatures(int values, int mask)
  fullName: com.fasterxml.jackson.core.base.ParserBase.overrideStdFeatures(int values, int mask)
  overload: com.fasterxml.jackson.core.base.ParserBase.overrideStdFeatures*
  type: Method
  package: com.fasterxml.jackson.core.base
  summary: Bulk set method for (re)setting states of features specified by `mask`. Functionally equivalent to `int oldState = getFeatureMask(); int newState = (oldState & ~mask) | (values & mask); setFeatureMask(newState);` but preferred as this lets caller more efficiently specify actual changes made.
  syntax:
    content: public JsonParser overrideStdFeatures(int values, int mask)
    parameters:
    - id: values
      type: int
    - id: mask
      type: int
    return:
      type: com.fasterxml.jackson.core.JsonParser
- uid: com.fasterxml.jackson.core.base.ParserBase.reportInvalidBase64Char(com.fasterxml.jackson.core.Base64Variant,int,int)
  id: reportInvalidBase64Char(com.fasterxml.jackson.core.Base64Variant,int,int)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.base.ParserBase
  langs:
  - java
  name: reportInvalidBase64Char(Base64Variant b64variant, int ch, int bindex)
  nameWithType: ParserBase.reportInvalidBase64Char(Base64Variant b64variant, int ch, int bindex)
  fullName: com.fasterxml.jackson.core.base.ParserBase.reportInvalidBase64Char(Base64Variant b64variant, int ch, int bindex)
  overload: com.fasterxml.jackson.core.base.ParserBase.reportInvalidBase64Char*
  type: Method
  package: com.fasterxml.jackson.core.base
  syntax:
    content: protected IllegalArgumentException reportInvalidBase64Char(Base64Variant b64variant, int ch, int bindex)
    parameters:
    - id: b64variant
      type: com.fasterxml.jackson.core.Base64Variant
    - id: ch
      type: int
    - id: bindex
      type: int
    return:
      type: java.lang.IllegalArgumentException
  exceptions:
  - type: java.lang.IllegalArgumentException
- uid: com.fasterxml.jackson.core.base.ParserBase.reportInvalidBase64Char(com.fasterxml.jackson.core.Base64Variant,int,int,java.lang.String)
  id: reportInvalidBase64Char(com.fasterxml.jackson.core.Base64Variant,int,int,java.lang.String)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.base.ParserBase
  langs:
  - java
  name: reportInvalidBase64Char(Base64Variant b64variant, int ch, int bindex, String msg)
  nameWithType: ParserBase.reportInvalidBase64Char(Base64Variant b64variant, int ch, int bindex, String msg)
  fullName: com.fasterxml.jackson.core.base.ParserBase.reportInvalidBase64Char(Base64Variant b64variant, int ch, int bindex, String msg)
  overload: com.fasterxml.jackson.core.base.ParserBase.reportInvalidBase64Char*
  type: Method
  package: com.fasterxml.jackson.core.base
  syntax:
    content: protected IllegalArgumentException reportInvalidBase64Char(Base64Variant b64variant, int ch, int bindex, String msg)
    parameters:
    - id: b64variant
      type: com.fasterxml.jackson.core.Base64Variant
    - id: ch
      type: int
    - id: bindex
      type: int
      description: >-
        Relative index within base64 character unit; between 0
           and 3 (as unit has exactly 4 characters)
    - id: msg
      type: java.lang.String
    return:
      type: java.lang.IllegalArgumentException
  exceptions:
  - type: java.lang.IllegalArgumentException
- uid: com.fasterxml.jackson.core.base.ParserBase.reset(boolean,int,int,int)
  id: reset(boolean,int,int,int)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.base.ParserBase
  langs:
  - java
  name: reset(boolean negative, int intLen, int fractLen, int expLen)
  nameWithType: ParserBase.reset(boolean negative, int intLen, int fractLen, int expLen)
  fullName: com.fasterxml.jackson.core.base.ParserBase.reset(boolean negative, int intLen, int fractLen, int expLen)
  overload: com.fasterxml.jackson.core.base.ParserBase.reset*
  type: Method
  package: com.fasterxml.jackson.core.base
  syntax:
    content: protected final JsonToken reset(boolean negative, int intLen, int fractLen, int expLen)
    parameters:
    - id: negative
      type: boolean
    - id: intLen
      type: int
    - id: fractLen
      type: int
    - id: expLen
      type: int
    return:
      type: com.fasterxml.jackson.core.JsonToken
- uid: com.fasterxml.jackson.core.base.ParserBase.resetAsNaN(java.lang.String,double)
  id: resetAsNaN(java.lang.String,double)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.base.ParserBase
  langs:
  - java
  name: resetAsNaN(String valueStr, double value)
  nameWithType: ParserBase.resetAsNaN(String valueStr, double value)
  fullName: com.fasterxml.jackson.core.base.ParserBase.resetAsNaN(String valueStr, double value)
  overload: com.fasterxml.jackson.core.base.ParserBase.resetAsNaN*
  type: Method
  package: com.fasterxml.jackson.core.base
  syntax:
    content: protected final JsonToken resetAsNaN(String valueStr, double value)
    parameters:
    - id: valueStr
      type: java.lang.String
    - id: value
      type: double
    return:
      type: com.fasterxml.jackson.core.JsonToken
- uid: com.fasterxml.jackson.core.base.ParserBase.resetFloat(boolean,int,int,int)
  id: resetFloat(boolean,int,int,int)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.base.ParserBase
  langs:
  - java
  name: resetFloat(boolean negative, int intLen, int fractLen, int expLen)
  nameWithType: ParserBase.resetFloat(boolean negative, int intLen, int fractLen, int expLen)
  fullName: com.fasterxml.jackson.core.base.ParserBase.resetFloat(boolean negative, int intLen, int fractLen, int expLen)
  overload: com.fasterxml.jackson.core.base.ParserBase.resetFloat*
  type: Method
  package: com.fasterxml.jackson.core.base
  syntax:
    content: protected final JsonToken resetFloat(boolean negative, int intLen, int fractLen, int expLen)
    parameters:
    - id: negative
      type: boolean
    - id: intLen
      type: int
    - id: fractLen
      type: int
    - id: expLen
      type: int
    return:
      type: com.fasterxml.jackson.core.JsonToken
- uid: com.fasterxml.jackson.core.base.ParserBase.resetInt(boolean,int)
  id: resetInt(boolean,int)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.base.ParserBase
  langs:
  - java
  name: resetInt(boolean negative, int intLen)
  nameWithType: ParserBase.resetInt(boolean negative, int intLen)
  fullName: com.fasterxml.jackson.core.base.ParserBase.resetInt(boolean negative, int intLen)
  overload: com.fasterxml.jackson.core.base.ParserBase.resetInt*
  type: Method
  package: com.fasterxml.jackson.core.base
  syntax:
    content: protected final JsonToken resetInt(boolean negative, int intLen)
    parameters:
    - id: negative
      type: boolean
    - id: intLen
      type: int
    return:
      type: com.fasterxml.jackson.core.JsonToken
- uid: com.fasterxml.jackson.core.base.ParserBase.setCurrentValue(java.lang.Object)
  id: setCurrentValue(java.lang.Object)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.base.ParserBase
  langs:
  - java
  name: setCurrentValue(Object v)
  nameWithType: ParserBase.setCurrentValue(Object v)
  fullName: com.fasterxml.jackson.core.base.ParserBase.setCurrentValue(Object v)
  overload: com.fasterxml.jackson.core.base.ParserBase.setCurrentValue*
  type: Method
  package: com.fasterxml.jackson.core.base
  summary: 'Helper method, usually equivalent to: `getParsingContext().setCurrentValue(v);`'
  syntax:
    content: public void setCurrentValue(Object v)
    parameters:
    - id: v
      type: java.lang.Object
- uid: com.fasterxml.jackson.core.base.ParserBase.setFeatureMask(int)
  id: setFeatureMask(int)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.base.ParserBase
  langs:
  - java
  name: setFeatureMask(int newMask)
  nameWithType: ParserBase.setFeatureMask(int newMask)
  fullName: com.fasterxml.jackson.core.base.ParserBase.setFeatureMask(int newMask)
  overload: com.fasterxml.jackson.core.base.ParserBase.setFeatureMask*
  type: Method
  package: com.fasterxml.jackson.core.base
  summary: Bulk set method for (re)setting states of all standard <xref uid="" data-throw-if-not-resolved="false">Feature</xref>s
  syntax:
    content: public JsonParser setFeatureMask(int newMask)
    parameters:
    - id: newMask
      type: int
    return:
      type: com.fasterxml.jackson.core.JsonParser
- uid: com.fasterxml.jackson.core.base.ParserBase.version()
  id: version()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.base.ParserBase
  langs:
  - java
  name: version()
  nameWithType: ParserBase.version()
  fullName: com.fasterxml.jackson.core.base.ParserBase.version()
  overload: com.fasterxml.jackson.core.base.ParserBase.version*
  type: Method
  package: com.fasterxml.jackson.core.base
  summary: Accessor for getting version of the core package, given a parser instance. Left for sub-classes to implement.
  syntax:
    content: public Version version()
    return:
      type: com.fasterxml.jackson.core.Version
references:
- uid: com.fasterxml.jackson.core.io.IOContext
  name: IOContext
  nameWithType: IOContext
  fullName: com.fasterxml.jackson.core.io.IOContext
- uid: int
  spec.java:
  - uid: int
    name: int
    fullName: int
- uid: com.fasterxml.jackson.core.base.ParserBase.ParserBase*
  name: ParserBase
  nameWithType: ParserBase.ParserBase
  fullName: com.fasterxml.jackson.core.base.ParserBase.ParserBase
  package: com.fasterxml.jackson.core.base
- uid: com.fasterxml.jackson.core.Version
  name: Version
  nameWithType: Version
  fullName: com.fasterxml.jackson.core.Version
- uid: com.fasterxml.jackson.core.base.ParserBase.version*
  name: version
  nameWithType: ParserBase.version
  fullName: com.fasterxml.jackson.core.base.ParserBase.version
  package: com.fasterxml.jackson.core.base
- uid: java.lang.Object
  spec.java:
  - uid: java.lang.Object
    name: Object
    fullName: java.lang.Object
- uid: com.fasterxml.jackson.core.base.ParserBase.getCurrentValue*
  name: getCurrentValue
  nameWithType: ParserBase.getCurrentValue
  fullName: com.fasterxml.jackson.core.base.ParserBase.getCurrentValue
  package: com.fasterxml.jackson.core.base
- uid: com.fasterxml.jackson.core.base.ParserBase.setCurrentValue*
  name: setCurrentValue
  nameWithType: ParserBase.setCurrentValue
  fullName: com.fasterxml.jackson.core.base.ParserBase.setCurrentValue
  package: com.fasterxml.jackson.core.base
- uid: com.fasterxml.jackson.core.JsonParser.Feature
  name: JsonParser.Feature
  nameWithType: JsonParser.Feature
  fullName: com.fasterxml.jackson.core.JsonParser.Feature
- uid: com.fasterxml.jackson.core.JsonParser
  name: JsonParser
  nameWithType: JsonParser
  fullName: com.fasterxml.jackson.core.JsonParser
- uid: com.fasterxml.jackson.core.base.ParserBase.enable*
  name: enable
  nameWithType: ParserBase.enable
  fullName: com.fasterxml.jackson.core.base.ParserBase.enable
  package: com.fasterxml.jackson.core.base
- uid: com.fasterxml.jackson.core.base.ParserBase.disable*
  name: disable
  nameWithType: ParserBase.disable
  fullName: com.fasterxml.jackson.core.base.ParserBase.disable
  package: com.fasterxml.jackson.core.base
- uid: com.fasterxml.jackson.core.base.ParserBase.setFeatureMask*
  name: setFeatureMask
  nameWithType: ParserBase.setFeatureMask
  fullName: com.fasterxml.jackson.core.base.ParserBase.setFeatureMask
  package: com.fasterxml.jackson.core.base
- uid: com.fasterxml.jackson.core.base.ParserBase.overrideStdFeatures*
  name: overrideStdFeatures
  nameWithType: ParserBase.overrideStdFeatures
  fullName: com.fasterxml.jackson.core.base.ParserBase.overrideStdFeatures
  package: com.fasterxml.jackson.core.base
- uid: com.fasterxml.jackson.core.base.ParserBase._checkStdFeatureChanges*
  name: _checkStdFeatureChanges
  nameWithType: ParserBase._checkStdFeatureChanges
  fullName: com.fasterxml.jackson.core.base.ParserBase._checkStdFeatureChanges
  package: com.fasterxml.jackson.core.base
- uid: java.io.IOException
  spec.java:
  - uid: java.io.IOException
    name: IOException
    fullName: java.io.IOException
- uid: java.lang.String
  spec.java:
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
- uid: com.fasterxml.jackson.core.base.ParserBase.getCurrentName*
  name: getCurrentName
  nameWithType: ParserBase.getCurrentName
  fullName: com.fasterxml.jackson.core.base.ParserBase.getCurrentName
  package: com.fasterxml.jackson.core.base
- uid: com.fasterxml.jackson.core.base.ParserBase.overrideCurrentName*
  name: overrideCurrentName
  nameWithType: ParserBase.overrideCurrentName
  fullName: com.fasterxml.jackson.core.base.ParserBase.overrideCurrentName
  package: com.fasterxml.jackson.core.base
- uid: com.fasterxml.jackson.core.base.ParserBase.close*
  name: close
  nameWithType: ParserBase.close
  fullName: com.fasterxml.jackson.core.base.ParserBase.close
  package: com.fasterxml.jackson.core.base
- uid: boolean
  spec.java:
  - uid: boolean
    name: boolean
    fullName: boolean
- uid: com.fasterxml.jackson.core.base.ParserBase.isClosed*
  name: isClosed
  nameWithType: ParserBase.isClosed
  fullName: com.fasterxml.jackson.core.base.ParserBase.isClosed
  package: com.fasterxml.jackson.core.base
- uid: com.fasterxml.jackson.core.json.JsonReadContext
  name: JsonReadContext
  nameWithType: JsonReadContext
  fullName: com.fasterxml.jackson.core.json.JsonReadContext
- uid: com.fasterxml.jackson.core.base.ParserBase.getParsingContext*
  name: getParsingContext
  nameWithType: ParserBase.getParsingContext
  fullName: com.fasterxml.jackson.core.base.ParserBase.getParsingContext
  package: com.fasterxml.jackson.core.base
- uid: com.fasterxml.jackson.core.JsonLocation
  name: JsonLocation
  nameWithType: JsonLocation
  fullName: com.fasterxml.jackson.core.JsonLocation
- uid: com.fasterxml.jackson.core.base.ParserBase.getTokenLocation*
  name: getTokenLocation
  nameWithType: ParserBase.getTokenLocation
  fullName: com.fasterxml.jackson.core.base.ParserBase.getTokenLocation
  package: com.fasterxml.jackson.core.base
- uid: com.fasterxml.jackson.core.base.ParserBase.getCurrentLocation*
  name: getCurrentLocation
  nameWithType: ParserBase.getCurrentLocation
  fullName: com.fasterxml.jackson.core.base.ParserBase.getCurrentLocation
  package: com.fasterxml.jackson.core.base
- uid: com.fasterxml.jackson.core.base.ParserBase.hasTextCharacters*
  name: hasTextCharacters
  nameWithType: ParserBase.hasTextCharacters
  fullName: com.fasterxml.jackson.core.base.ParserBase.hasTextCharacters
  package: com.fasterxml.jackson.core.base
- uid: com.fasterxml.jackson.core.Base64Variant
  name: Base64Variant
  nameWithType: Base64Variant
  fullName: com.fasterxml.jackson.core.Base64Variant
- uid: byte[]
  spec.java:
  - uid: byte
    name: byte
    fullName: byte
  - name: '[]'
    fullName: '[]'
- uid: com.fasterxml.jackson.core.base.ParserBase.getBinaryValue*
  name: getBinaryValue
  nameWithType: ParserBase.getBinaryValue
  fullName: com.fasterxml.jackson.core.base.ParserBase.getBinaryValue
  package: com.fasterxml.jackson.core.base
- uid: long
  spec.java:
  - uid: long
    name: long
    fullName: long
- uid: com.fasterxml.jackson.core.base.ParserBase.getTokenCharacterOffset*
  name: getTokenCharacterOffset
  nameWithType: ParserBase.getTokenCharacterOffset
  fullName: com.fasterxml.jackson.core.base.ParserBase.getTokenCharacterOffset
  package: com.fasterxml.jackson.core.base
- uid: com.fasterxml.jackson.core.base.ParserBase.getTokenLineNr*
  name: getTokenLineNr
  nameWithType: ParserBase.getTokenLineNr
  fullName: com.fasterxml.jackson.core.base.ParserBase.getTokenLineNr
  package: com.fasterxml.jackson.core.base
- uid: com.fasterxml.jackson.core.base.ParserBase.getTokenColumnNr*
  name: getTokenColumnNr
  nameWithType: ParserBase.getTokenColumnNr
  fullName: com.fasterxml.jackson.core.base.ParserBase.getTokenColumnNr
  package: com.fasterxml.jackson.core.base
- uid: com.fasterxml.jackson.core.base.ParserBase._closeInput*
  name: _closeInput
  nameWithType: ParserBase._closeInput
  fullName: com.fasterxml.jackson.core.base.ParserBase._closeInput
  package: com.fasterxml.jackson.core.base
- uid: com.fasterxml.jackson.core.base.ParserBase._releaseBuffers*
  name: _releaseBuffers
  nameWithType: ParserBase._releaseBuffers
  fullName: com.fasterxml.jackson.core.base.ParserBase._releaseBuffers
  package: com.fasterxml.jackson.core.base
- uid: com.fasterxml.jackson.core.JsonParseException
  name: JsonParseException
  nameWithType: JsonParseException
  fullName: com.fasterxml.jackson.core.JsonParseException
- uid: com.fasterxml.jackson.core.base.ParserBase._handleEOF*
  name: _handleEOF
  nameWithType: ParserBase._handleEOF
  fullName: com.fasterxml.jackson.core.base.ParserBase._handleEOF
  package: com.fasterxml.jackson.core.base
- uid: com.fasterxml.jackson.core.base.ParserBase._eofAsNextChar*
  name: _eofAsNextChar
  nameWithType: ParserBase._eofAsNextChar
  fullName: com.fasterxml.jackson.core.base.ParserBase._eofAsNextChar
  package: com.fasterxml.jackson.core.base
- uid: com.fasterxml.jackson.core.util.ByteArrayBuilder
  name: ByteArrayBuilder
  nameWithType: ByteArrayBuilder
  fullName: com.fasterxml.jackson.core.util.ByteArrayBuilder
- uid: com.fasterxml.jackson.core.base.ParserBase._getByteArrayBuilder*
  name: _getByteArrayBuilder
  nameWithType: ParserBase._getByteArrayBuilder
  fullName: com.fasterxml.jackson.core.base.ParserBase._getByteArrayBuilder
  package: com.fasterxml.jackson.core.base
- uid: com.fasterxml.jackson.core.JsonToken
  name: JsonToken
  nameWithType: JsonToken
  fullName: com.fasterxml.jackson.core.JsonToken
- uid: com.fasterxml.jackson.core.base.ParserBase.reset*
  name: reset
  nameWithType: ParserBase.reset
  fullName: com.fasterxml.jackson.core.base.ParserBase.reset
  package: com.fasterxml.jackson.core.base
- uid: com.fasterxml.jackson.core.base.ParserBase.resetInt*
  name: resetInt
  nameWithType: ParserBase.resetInt
  fullName: com.fasterxml.jackson.core.base.ParserBase.resetInt
  package: com.fasterxml.jackson.core.base
- uid: com.fasterxml.jackson.core.base.ParserBase.resetFloat*
  name: resetFloat
  nameWithType: ParserBase.resetFloat
  fullName: com.fasterxml.jackson.core.base.ParserBase.resetFloat
  package: com.fasterxml.jackson.core.base
- uid: double
  spec.java:
  - uid: double
    name: double
    fullName: double
- uid: com.fasterxml.jackson.core.base.ParserBase.resetAsNaN*
  name: resetAsNaN
  nameWithType: ParserBase.resetAsNaN
  fullName: com.fasterxml.jackson.core.base.ParserBase.resetAsNaN
  package: com.fasterxml.jackson.core.base
- uid: com.fasterxml.jackson.core.base.ParserBase.isNaN*
  name: isNaN
  nameWithType: ParserBase.isNaN
  fullName: com.fasterxml.jackson.core.base.ParserBase.isNaN
  package: com.fasterxml.jackson.core.base
- uid: java.lang.Number
  spec.java:
  - uid: java.lang.Number
    name: Number
    fullName: java.lang.Number
- uid: com.fasterxml.jackson.core.base.ParserBase.getNumberValue*
  name: getNumberValue
  nameWithType: ParserBase.getNumberValue
  fullName: com.fasterxml.jackson.core.base.ParserBase.getNumberValue
  package: com.fasterxml.jackson.core.base
- uid: com.fasterxml.jackson.core.JsonParser.NumberType
  name: JsonParser.NumberType
  nameWithType: JsonParser.NumberType
  fullName: com.fasterxml.jackson.core.JsonParser.NumberType
- uid: com.fasterxml.jackson.core.base.ParserBase.getNumberType*
  name: getNumberType
  nameWithType: ParserBase.getNumberType
  fullName: com.fasterxml.jackson.core.base.ParserBase.getNumberType
  package: com.fasterxml.jackson.core.base
- uid: com.fasterxml.jackson.core.base.ParserBase.getIntValue*
  name: getIntValue
  nameWithType: ParserBase.getIntValue
  fullName: com.fasterxml.jackson.core.base.ParserBase.getIntValue
  package: com.fasterxml.jackson.core.base
- uid: com.fasterxml.jackson.core.base.ParserBase.getLongValue*
  name: getLongValue
  nameWithType: ParserBase.getLongValue
  fullName: com.fasterxml.jackson.core.base.ParserBase.getLongValue
  package: com.fasterxml.jackson.core.base
- uid: java.math.BigInteger
  spec.java:
  - uid: java.math.BigInteger
    name: BigInteger
    fullName: java.math.BigInteger
- uid: com.fasterxml.jackson.core.base.ParserBase.getBigIntegerValue*
  name: getBigIntegerValue
  nameWithType: ParserBase.getBigIntegerValue
  fullName: com.fasterxml.jackson.core.base.ParserBase.getBigIntegerValue
  package: com.fasterxml.jackson.core.base
- uid: float
  spec.java:
  - uid: float
    name: float
    fullName: float
- uid: com.fasterxml.jackson.core.base.ParserBase.getFloatValue*
  name: getFloatValue
  nameWithType: ParserBase.getFloatValue
  fullName: com.fasterxml.jackson.core.base.ParserBase.getFloatValue
  package: com.fasterxml.jackson.core.base
- uid: com.fasterxml.jackson.core.base.ParserBase.getDoubleValue*
  name: getDoubleValue
  nameWithType: ParserBase.getDoubleValue
  fullName: com.fasterxml.jackson.core.base.ParserBase.getDoubleValue
  package: com.fasterxml.jackson.core.base
- uid: java.math.BigDecimal
  spec.java:
  - uid: java.math.BigDecimal
    name: BigDecimal
    fullName: java.math.BigDecimal
- uid: com.fasterxml.jackson.core.base.ParserBase.getDecimalValue*
  name: getDecimalValue
  nameWithType: ParserBase.getDecimalValue
  fullName: com.fasterxml.jackson.core.base.ParserBase.getDecimalValue
  package: com.fasterxml.jackson.core.base
- uid: com.fasterxml.jackson.core.base.ParserBase._parseNumericValue*
  name: _parseNumericValue
  nameWithType: ParserBase._parseNumericValue
  fullName: com.fasterxml.jackson.core.base.ParserBase._parseNumericValue
  package: com.fasterxml.jackson.core.base
- uid: com.fasterxml.jackson.core.base.ParserBase._parseIntValue*
  name: _parseIntValue
  nameWithType: ParserBase._parseIntValue
  fullName: com.fasterxml.jackson.core.base.ParserBase._parseIntValue
  package: com.fasterxml.jackson.core.base
- uid: com.fasterxml.jackson.core.base.ParserBase._reportTooLongIntegral*
  name: _reportTooLongIntegral
  nameWithType: ParserBase._reportTooLongIntegral
  fullName: com.fasterxml.jackson.core.base.ParserBase._reportTooLongIntegral
  package: com.fasterxml.jackson.core.base
- uid: com.fasterxml.jackson.core.base.ParserBase.convertNumberToInt*
  name: convertNumberToInt
  nameWithType: ParserBase.convertNumberToInt
  fullName: com.fasterxml.jackson.core.base.ParserBase.convertNumberToInt
  package: com.fasterxml.jackson.core.base
- uid: com.fasterxml.jackson.core.base.ParserBase.convertNumberToLong*
  name: convertNumberToLong
  nameWithType: ParserBase.convertNumberToLong
  fullName: com.fasterxml.jackson.core.base.ParserBase.convertNumberToLong
  package: com.fasterxml.jackson.core.base
- uid: com.fasterxml.jackson.core.base.ParserBase.convertNumberToBigInteger*
  name: convertNumberToBigInteger
  nameWithType: ParserBase.convertNumberToBigInteger
  fullName: com.fasterxml.jackson.core.base.ParserBase.convertNumberToBigInteger
  package: com.fasterxml.jackson.core.base
- uid: com.fasterxml.jackson.core.base.ParserBase.convertNumberToDouble*
  name: convertNumberToDouble
  nameWithType: ParserBase.convertNumberToDouble
  fullName: com.fasterxml.jackson.core.base.ParserBase.convertNumberToDouble
  package: com.fasterxml.jackson.core.base
- uid: com.fasterxml.jackson.core.base.ParserBase.convertNumberToBigDecimal*
  name: convertNumberToBigDecimal
  nameWithType: ParserBase.convertNumberToBigDecimal
  fullName: com.fasterxml.jackson.core.base.ParserBase.convertNumberToBigDecimal
  package: com.fasterxml.jackson.core.base
- uid: char
  spec.java:
  - uid: char
    name: char
    fullName: char
- uid: com.fasterxml.jackson.core.base.ParserBase._reportMismatchedEndMarker*
  name: _reportMismatchedEndMarker
  nameWithType: ParserBase._reportMismatchedEndMarker
  fullName: com.fasterxml.jackson.core.base.ParserBase._reportMismatchedEndMarker
  package: com.fasterxml.jackson.core.base
- uid: com.fasterxml.jackson.core.JsonProcessingException
  name: JsonProcessingException
  nameWithType: JsonProcessingException
  fullName: com.fasterxml.jackson.core.JsonProcessingException
- uid: com.fasterxml.jackson.core.base.ParserBase._handleUnrecognizedCharacterEscape*
  name: _handleUnrecognizedCharacterEscape
  nameWithType: ParserBase._handleUnrecognizedCharacterEscape
  fullName: com.fasterxml.jackson.core.base.ParserBase._handleUnrecognizedCharacterEscape
  package: com.fasterxml.jackson.core.base
- uid: com.fasterxml.jackson.core.base.ParserBase._throwUnquotedSpace*
  name: _throwUnquotedSpace
  nameWithType: ParserBase._throwUnquotedSpace
  fullName: com.fasterxml.jackson.core.base.ParserBase._throwUnquotedSpace
  package: com.fasterxml.jackson.core.base
- uid: com.fasterxml.jackson.core.base.ParserBase._validJsonTokenList*
  name: _validJsonTokenList
  nameWithType: ParserBase._validJsonTokenList
  fullName: com.fasterxml.jackson.core.base.ParserBase._validJsonTokenList
  package: com.fasterxml.jackson.core.base
- uid: com.fasterxml.jackson.core.base.ParserBase._validJsonValueList*
  name: _validJsonValueList
  nameWithType: ParserBase._validJsonValueList
  fullName: com.fasterxml.jackson.core.base.ParserBase._validJsonValueList
  package: com.fasterxml.jackson.core.base
- uid: com.fasterxml.jackson.core.base.ParserBase._decodeEscaped*
  name: _decodeEscaped
  nameWithType: ParserBase._decodeEscaped
  fullName: com.fasterxml.jackson.core.base.ParserBase._decodeEscaped
  package: com.fasterxml.jackson.core.base
- uid: com.fasterxml.jackson.core.base.ParserBase._decodeBase64Escape*
  name: _decodeBase64Escape
  nameWithType: ParserBase._decodeBase64Escape
  fullName: com.fasterxml.jackson.core.base.ParserBase._decodeBase64Escape
  package: com.fasterxml.jackson.core.base
- uid: java.lang.IllegalArgumentException
  spec.java:
  - uid: java.lang.IllegalArgumentException
    name: IllegalArgumentException
    fullName: java.lang.IllegalArgumentException
- uid: com.fasterxml.jackson.core.base.ParserBase.reportInvalidBase64Char*
  name: reportInvalidBase64Char
  nameWithType: ParserBase.reportInvalidBase64Char
  fullName: com.fasterxml.jackson.core.base.ParserBase.reportInvalidBase64Char
  package: com.fasterxml.jackson.core.base
- uid: com.fasterxml.jackson.core.base.ParserBase._handleBase64MissingPadding*
  name: _handleBase64MissingPadding
  nameWithType: ParserBase._handleBase64MissingPadding
  fullName: com.fasterxml.jackson.core.base.ParserBase._handleBase64MissingPadding
  package: com.fasterxml.jackson.core.base
- uid: com.fasterxml.jackson.core.base.ParserBase._getSourceReference*
  name: _getSourceReference
  nameWithType: ParserBase._getSourceReference
  fullName: com.fasterxml.jackson.core.base.ParserBase._getSourceReference
  package: com.fasterxml.jackson.core.base
- uid: int[]
  spec.java:
  - uid: int
    name: int
    fullName: int
  - name: '[]'
    fullName: '[]'
- uid: com.fasterxml.jackson.core.base.ParserBase.growArrayBy*
  name: growArrayBy
  nameWithType: ParserBase.growArrayBy
  fullName: com.fasterxml.jackson.core.base.ParserBase.growArrayBy
  package: com.fasterxml.jackson.core.base
- uid: com.fasterxml.jackson.core.base.ParserBase.loadMoreGuaranteed*
  name: loadMoreGuaranteed
  nameWithType: ParserBase.loadMoreGuaranteed
  fullName: com.fasterxml.jackson.core.base.ParserBase.loadMoreGuaranteed
  package: com.fasterxml.jackson.core.base
- uid: com.fasterxml.jackson.core.base.ParserBase.loadMore*
  name: loadMore
  nameWithType: ParserBase.loadMore
  fullName: com.fasterxml.jackson.core.base.ParserBase.loadMore
  package: com.fasterxml.jackson.core.base
- uid: com.fasterxml.jackson.core.base.ParserBase._finishString*
  name: _finishString
  nameWithType: ParserBase._finishString
  fullName: com.fasterxml.jackson.core.base.ParserBase._finishString
  package: com.fasterxml.jackson.core.base
- uid: com.fasterxml.jackson.core.util.TextBuffer
  name: TextBuffer
  nameWithType: TextBuffer
  fullName: com.fasterxml.jackson.core.util.TextBuffer
- uid: char[]
  spec.java:
  - uid: char
    name: char
    fullName: char
  - name: '[]'
    fullName: '[]'
- uid: com.fasterxml.jackson.core.base.ParserMinimalBase
  name: ParserMinimalBase
  nameWithType: ParserMinimalBase
  fullName: com.fasterxml.jackson.core.base.ParserMinimalBase
- uid: com.fasterxml.jackson.core.base.ParserMinimalBase._asciiBytes(java.lang.String)
  name: ParserMinimalBase._asciiBytes(String)
  nameWithType: ParserMinimalBase._asciiBytes(String)
  fullName: com.fasterxml.jackson.core.base.ParserMinimalBase._asciiBytes(java.lang.String)
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: java.lang.Object.finalize()
  name: Object.finalize()
  nameWithType: Object.finalize()
  fullName: java.lang.Object.finalize()
- uid: com.fasterxml.jackson.core.JsonParser.canReadTypeId()
  name: JsonParser.canReadTypeId()
  nameWithType: JsonParser.canReadTypeId()
  fullName: com.fasterxml.jackson.core.JsonParser.canReadTypeId()
- uid: com.fasterxml.jackson.core.base.ParserMinimalBase._reportInvalidEOFInValue()
  name: ParserMinimalBase._reportInvalidEOFInValue()
  nameWithType: ParserMinimalBase._reportInvalidEOFInValue()
  fullName: com.fasterxml.jackson.core.base.ParserMinimalBase._reportInvalidEOFInValue()
- uid: com.fasterxml.jackson.core.JsonParser.readBinaryValue(java.io.OutputStream)
  name: JsonParser.readBinaryValue(OutputStream)
  nameWithType: JsonParser.readBinaryValue(OutputStream)
  fullName: com.fasterxml.jackson.core.JsonParser.readBinaryValue(java.io.OutputStream)
- uid: com.fasterxml.jackson.core.JsonParser.getNumberType()
  name: JsonParser.getNumberType()
  nameWithType: JsonParser.getNumberType()
  fullName: com.fasterxml.jackson.core.JsonParser.getNumberType()
- uid: com.fasterxml.jackson.core.base.ParserMinimalBase.reportOverflowLong()
  name: ParserMinimalBase.reportOverflowLong()
  nameWithType: ParserMinimalBase.reportOverflowLong()
  fullName: com.fasterxml.jackson.core.base.ParserMinimalBase.reportOverflowLong()
- uid: com.fasterxml.jackson.core.JsonParser.getObjectId()
  name: JsonParser.getObjectId()
  nameWithType: JsonParser.getObjectId()
  fullName: com.fasterxml.jackson.core.JsonParser.getObjectId()
- uid: com.fasterxml.jackson.core.JsonParser.canParseAsync()
  name: JsonParser.canParseAsync()
  nameWithType: JsonParser.canParseAsync()
  fullName: com.fasterxml.jackson.core.JsonParser.canParseAsync()
- uid: com.fasterxml.jackson.core.base.ParserMinimalBase._getCharDesc(int)
  name: ParserMinimalBase._getCharDesc(int)
  nameWithType: ParserMinimalBase._getCharDesc(int)
  fullName: com.fasterxml.jackson.core.base.ParserMinimalBase._getCharDesc(int)
- uid: com.fasterxml.jackson.core.base.ParserMinimalBase.getValueAsInt(int)
  name: ParserMinimalBase.getValueAsInt(int)
  nameWithType: ParserMinimalBase.getValueAsInt(int)
  fullName: com.fasterxml.jackson.core.base.ParserMinimalBase.getValueAsInt(int)
- uid: com.fasterxml.jackson.core.base.ParserMinimalBase.getText()
  name: ParserMinimalBase.getText()
  nameWithType: ParserMinimalBase.getText()
  fullName: com.fasterxml.jackson.core.base.ParserMinimalBase.getText()
- uid: com.fasterxml.jackson.core.base.ParserMinimalBase._reportInvalidEOFInValue(com.fasterxml.jackson.core.JsonToken)
  name: ParserMinimalBase._reportInvalidEOFInValue(JsonToken)
  nameWithType: ParserMinimalBase._reportInvalidEOFInValue(JsonToken)
  fullName: com.fasterxml.jackson.core.base.ParserMinimalBase._reportInvalidEOFInValue(com.fasterxml.jackson.core.JsonToken)
- uid: com.fasterxml.jackson.core.base.ParserMinimalBase.reportOverflowLong(java.lang.String)
  name: ParserMinimalBase.reportOverflowLong(String)
  nameWithType: ParserMinimalBase.reportOverflowLong(String)
  fullName: com.fasterxml.jackson.core.base.ParserMinimalBase.reportOverflowLong(java.lang.String)
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: com.fasterxml.jackson.core.JsonParser.getIntValue()
  name: JsonParser.getIntValue()
  nameWithType: JsonParser.getIntValue()
  fullName: com.fasterxml.jackson.core.JsonParser.getIntValue()
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: com.fasterxml.jackson.core.base.ParserMinimalBase._reportInvalidEOF()
  name: ParserMinimalBase._reportInvalidEOF()
  nameWithType: ParserMinimalBase._reportInvalidEOF()
  fullName: com.fasterxml.jackson.core.base.ParserMinimalBase._reportInvalidEOF()
- uid: com.fasterxml.jackson.core.base.ParserMinimalBase.nextValue()
  name: ParserMinimalBase.nextValue()
  nameWithType: ParserMinimalBase.nextValue()
  fullName: com.fasterxml.jackson.core.base.ParserMinimalBase.nextValue()
- uid: com.fasterxml.jackson.core.base.ParserMinimalBase._longNumberDesc(java.lang.String)
  name: ParserMinimalBase._longNumberDesc(String)
  nameWithType: ParserMinimalBase._longNumberDesc(String)
  fullName: com.fasterxml.jackson.core.base.ParserMinimalBase._longNumberDesc(java.lang.String)
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: com.fasterxml.jackson.core.base.ParserMinimalBase._longIntegerDesc(java.lang.String)
  name: ParserMinimalBase._longIntegerDesc(String)
  nameWithType: ParserMinimalBase._longIntegerDesc(String)
  fullName: com.fasterxml.jackson.core.base.ParserMinimalBase._longIntegerDesc(java.lang.String)
- uid: com.fasterxml.jackson.core.JsonParser.getBooleanValue()
  name: JsonParser.getBooleanValue()
  nameWithType: JsonParser.getBooleanValue()
  fullName: com.fasterxml.jackson.core.JsonParser.getBooleanValue()
- uid: com.fasterxml.jackson.core.JsonParser.getBinaryValue()
  name: JsonParser.getBinaryValue()
  nameWithType: JsonParser.getBinaryValue()
  fullName: com.fasterxml.jackson.core.JsonParser.getBinaryValue()
- uid: com.fasterxml.jackson.core.JsonParser.canReadObjectId()
  name: JsonParser.canReadObjectId()
  nameWithType: JsonParser.canReadObjectId()
  fullName: com.fasterxml.jackson.core.JsonParser.canReadObjectId()
- uid: com.fasterxml.jackson.core.base.ParserMinimalBase._reportInputCoercion(java.lang.String,com.fasterxml.jackson.core.JsonToken,java.lang.Class<?>)
  name: ParserMinimalBase._reportInputCoercion(String,JsonToken,Class<?>)
  nameWithType: ParserMinimalBase._reportInputCoercion(String,JsonToken,Class<?>)
  fullName: com.fasterxml.jackson.core.base.ParserMinimalBase._reportInputCoercion(java.lang.String,com.fasterxml.jackson.core.JsonToken,java.lang.Class<?>)
- uid: com.fasterxml.jackson.core.JsonParser.setRequestPayloadOnError(java.lang.String)
  name: JsonParser.setRequestPayloadOnError(String)
  nameWithType: JsonParser.setRequestPayloadOnError(String)
  fullName: com.fasterxml.jackson.core.JsonParser.setRequestPayloadOnError(java.lang.String)
- uid: com.fasterxml.jackson.core.JsonParser.isEnabled(com.fasterxml.jackson.core.StreamReadFeature)
  name: JsonParser.isEnabled(StreamReadFeature)
  nameWithType: JsonParser.isEnabled(StreamReadFeature)
  fullName: com.fasterxml.jackson.core.JsonParser.isEnabled(com.fasterxml.jackson.core.StreamReadFeature)
- uid: com.fasterxml.jackson.core.JsonParser.<T>readValueAs(com.fasterxml.jackson.core.type.TypeReference<?>)
  name: JsonParser.<T>readValueAs(TypeReference<?>)
  nameWithType: JsonParser.<T>readValueAs(TypeReference<?>)
  fullName: com.fasterxml.jackson.core.JsonParser.<T>readValueAs(com.fasterxml.jackson.core.type.TypeReference<?>)
- uid: com.fasterxml.jackson.core.base.ParserMinimalBase.close()
  name: ParserMinimalBase.close()
  nameWithType: ParserMinimalBase.close()
  fullName: com.fasterxml.jackson.core.base.ParserMinimalBase.close()
- uid: com.fasterxml.jackson.core.JsonParser.getInputSource()
  name: JsonParser.getInputSource()
  nameWithType: JsonParser.getInputSource()
  fullName: com.fasterxml.jackson.core.JsonParser.getInputSource()
- uid: com.fasterxml.jackson.core.base.ParserMinimalBase.hasTextCharacters()
  name: ParserMinimalBase.hasTextCharacters()
  nameWithType: ParserMinimalBase.hasTextCharacters()
  fullName: com.fasterxml.jackson.core.base.ParserMinimalBase.hasTextCharacters()
- uid: com.fasterxml.jackson.core.base.ParserMinimalBase._throwInternal()
  name: ParserMinimalBase._throwInternal()
  nameWithType: ParserMinimalBase._throwInternal()
  fullName: com.fasterxml.jackson.core.base.ParserMinimalBase._throwInternal()
- uid: com.fasterxml.jackson.core.base.ParserMinimalBase._wrapError(java.lang.String,java.lang.Throwable)
  name: ParserMinimalBase._wrapError(String,Throwable)
  nameWithType: ParserMinimalBase._wrapError(String,Throwable)
  fullName: com.fasterxml.jackson.core.base.ParserMinimalBase._wrapError(java.lang.String,java.lang.Throwable)
- uid: com.fasterxml.jackson.core.base.ParserMinimalBase._reportError(java.lang.String)
  name: ParserMinimalBase._reportError(String)
  nameWithType: ParserMinimalBase._reportError(String)
  fullName: com.fasterxml.jackson.core.base.ParserMinimalBase._reportError(java.lang.String)
- uid: com.fasterxml.jackson.core.JsonParser.disable(com.fasterxml.jackson.core.JsonParser.Feature)
  name: JsonParser.disable(JsonParser.Feature)
  nameWithType: JsonParser.disable(JsonParser.Feature)
  fullName: com.fasterxml.jackson.core.JsonParser.disable(com.fasterxml.jackson.core.JsonParser.Feature)
- uid: com.fasterxml.jackson.core.base.ParserMinimalBase._reportMissingRootWS(int)
  name: ParserMinimalBase._reportMissingRootWS(int)
  nameWithType: ParserMinimalBase._reportMissingRootWS(int)
  fullName: com.fasterxml.jackson.core.base.ParserMinimalBase._reportMissingRootWS(int)
- uid: com.fasterxml.jackson.core.base.ParserMinimalBase.getValueAsLong()
  name: ParserMinimalBase.getValueAsLong()
  nameWithType: ParserMinimalBase.getValueAsLong()
  fullName: com.fasterxml.jackson.core.base.ParserMinimalBase.getValueAsLong()
- uid: com.fasterxml.jackson.core.base.ParserMinimalBase.isExpectedStartArrayToken()
  name: ParserMinimalBase.isExpectedStartArrayToken()
  nameWithType: ParserMinimalBase.isExpectedStartArrayToken()
  fullName: com.fasterxml.jackson.core.base.ParserMinimalBase.isExpectedStartArrayToken()
- uid: com.fasterxml.jackson.core.base.ParserMinimalBase.getLastClearedToken()
  name: ParserMinimalBase.getLastClearedToken()
  nameWithType: ParserMinimalBase.getLastClearedToken()
  fullName: com.fasterxml.jackson.core.base.ParserMinimalBase.getLastClearedToken()
- uid: com.fasterxml.jackson.core.JsonParser.<T>readValuesAs(java.lang.Class<T>)
  name: JsonParser.<T>readValuesAs(Class<T>)
  nameWithType: JsonParser.<T>readValuesAs(Class<T>)
  fullName: com.fasterxml.jackson.core.JsonParser.<T>readValuesAs(java.lang.Class<T>)
- uid: com.fasterxml.jackson.core.JsonParser.getCodec()
  name: JsonParser.getCodec()
  nameWithType: JsonParser.getCodec()
  fullName: com.fasterxml.jackson.core.JsonParser.getCodec()
- uid: com.fasterxml.jackson.core.JsonParser.setCodec(com.fasterxml.jackson.core.ObjectCodec)
  name: JsonParser.setCodec(ObjectCodec)
  nameWithType: JsonParser.setCodec(ObjectCodec)
  fullName: com.fasterxml.jackson.core.JsonParser.setCodec(com.fasterxml.jackson.core.ObjectCodec)
- uid: com.fasterxml.jackson.core.JsonParser.getCurrentLocation()
  name: JsonParser.getCurrentLocation()
  nameWithType: JsonParser.getCurrentLocation()
  fullName: com.fasterxml.jackson.core.JsonParser.getCurrentLocation()
- uid: com.fasterxml.jackson.core.JsonParser.currentName()
  name: JsonParser.currentName()
  nameWithType: JsonParser.currentName()
  fullName: com.fasterxml.jackson.core.JsonParser.currentName()
- uid: com.fasterxml.jackson.core.base.ParserMinimalBase.hasCurrentToken()
  name: ParserMinimalBase.hasCurrentToken()
  nameWithType: ParserMinimalBase.hasCurrentToken()
  fullName: com.fasterxml.jackson.core.base.ParserMinimalBase.hasCurrentToken()
- uid: com.fasterxml.jackson.core.base.ParserMinimalBase.clearCurrentToken()
  name: ParserMinimalBase.clearCurrentToken()
  nameWithType: ParserMinimalBase.clearCurrentToken()
  fullName: com.fasterxml.jackson.core.base.ParserMinimalBase.clearCurrentToken()
- uid: com.fasterxml.jackson.core.JsonParser.requiresCustomCodec()
  name: JsonParser.requiresCustomCodec()
  nameWithType: JsonParser.requiresCustomCodec()
  fullName: com.fasterxml.jackson.core.JsonParser.requiresCustomCodec()
- uid: com.fasterxml.jackson.core.JsonParser._reportUnsupportedOperation()
  name: JsonParser._reportUnsupportedOperation()
  nameWithType: JsonParser._reportUnsupportedOperation()
  fullName: com.fasterxml.jackson.core.JsonParser._reportUnsupportedOperation()
- uid: com.fasterxml.jackson.core.base.ParserMinimalBase._reportError(java.lang.String,java.lang.Object,java.lang.Object)
  name: ParserMinimalBase._reportError(String,Object,Object)
  nameWithType: ParserMinimalBase._reportError(String,Object,Object)
  fullName: com.fasterxml.jackson.core.base.ParserMinimalBase._reportError(java.lang.String,java.lang.Object,java.lang.Object)
- uid: com.fasterxml.jackson.core.JsonParser.getValueAsDouble()
  name: JsonParser.getValueAsDouble()
  nameWithType: JsonParser.getValueAsDouble()
  fullName: com.fasterxml.jackson.core.JsonParser.getValueAsDouble()
- uid: com.fasterxml.jackson.core.base.ParserMinimalBase.getValueAsInt()
  name: ParserMinimalBase.getValueAsInt()
  nameWithType: ParserMinimalBase.getValueAsInt()
  fullName: com.fasterxml.jackson.core.base.ParserMinimalBase.getValueAsInt()
- uid: com.fasterxml.jackson.core.base.ParserMinimalBase._reportInvalidEOF(java.lang.String)
  name: ParserMinimalBase._reportInvalidEOF(String)
  nameWithType: ParserMinimalBase._reportInvalidEOF(String)
  fullName: com.fasterxml.jackson.core.base.ParserMinimalBase._reportInvalidEOF(java.lang.String)
- uid: com.fasterxml.jackson.core.JsonParser.getDoubleValue()
  name: JsonParser.getDoubleValue()
  nameWithType: JsonParser.getDoubleValue()
  fullName: com.fasterxml.jackson.core.JsonParser.getDoubleValue()
- uid: com.fasterxml.jackson.core.base.ParserMinimalBase.isClosed()
  name: ParserMinimalBase.isClosed()
  nameWithType: ParserMinimalBase.isClosed()
  fullName: com.fasterxml.jackson.core.base.ParserMinimalBase.isClosed()
- uid: com.fasterxml.jackson.core.JsonParser.nextBooleanValue()
  name: JsonParser.nextBooleanValue()
  nameWithType: JsonParser.nextBooleanValue()
  fullName: com.fasterxml.jackson.core.JsonParser.nextBooleanValue()
- uid: com.fasterxml.jackson.core.base.ParserMinimalBase.currentToken()
  name: ParserMinimalBase.currentToken()
  nameWithType: ParserMinimalBase.currentToken()
  fullName: com.fasterxml.jackson.core.base.ParserMinimalBase.currentToken()
- uid: com.fasterxml.jackson.core.JsonParser.<T>readValueAsTree()
  name: JsonParser.<T>readValueAsTree()
  nameWithType: JsonParser.<T>readValueAsTree()
  fullName: com.fasterxml.jackson.core.JsonParser.<T>readValueAsTree()
- uid: com.fasterxml.jackson.core.base.ParserMinimalBase.getTextOffset()
  name: ParserMinimalBase.getTextOffset()
  nameWithType: ParserMinimalBase.getTextOffset()
  fullName: com.fasterxml.jackson.core.base.ParserMinimalBase.getTextOffset()
- uid: com.fasterxml.jackson.core.JsonParser.getTypeId()
  name: JsonParser.getTypeId()
  nameWithType: JsonParser.getTypeId()
  fullName: com.fasterxml.jackson.core.JsonParser.getTypeId()
- uid: com.fasterxml.jackson.core.base.ParserMinimalBase.getTextLength()
  name: ParserMinimalBase.getTextLength()
  nameWithType: ParserMinimalBase.getTextLength()
  fullName: com.fasterxml.jackson.core.base.ParserMinimalBase.getTextLength()
- uid: com.fasterxml.jackson.core.base.ParserMinimalBase.skipChildren()
  name: ParserMinimalBase.skipChildren()
  nameWithType: ParserMinimalBase.skipChildren()
  fullName: com.fasterxml.jackson.core.base.ParserMinimalBase.skipChildren()
- uid: com.fasterxml.jackson.core.JsonParser.getEmbeddedObject()
  name: JsonParser.getEmbeddedObject()
  nameWithType: JsonParser.getEmbeddedObject()
  fullName: com.fasterxml.jackson.core.JsonParser.getEmbeddedObject()
- uid: com.fasterxml.jackson.core.JsonParser.version()
  name: JsonParser.version()
  nameWithType: JsonParser.version()
  fullName: com.fasterxml.jackson.core.JsonParser.version()
- uid: com.fasterxml.jackson.core.base.ParserMinimalBase.overrideCurrentName(java.lang.String)
  name: ParserMinimalBase.overrideCurrentName(String)
  nameWithType: ParserMinimalBase.overrideCurrentName(String)
  fullName: com.fasterxml.jackson.core.base.ParserMinimalBase.overrideCurrentName(java.lang.String)
- uid: com.fasterxml.jackson.core.JsonParser.nextIntValue(int)
  name: JsonParser.nextIntValue(int)
  nameWithType: JsonParser.nextIntValue(int)
  fullName: com.fasterxml.jackson.core.JsonParser.nextIntValue(int)
- uid: com.fasterxml.jackson.core.JsonParser.overrideStdFeatures(int,int)
  name: JsonParser.overrideStdFeatures(int,int)
  nameWithType: JsonParser.overrideStdFeatures(int,int)
  fullName: com.fasterxml.jackson.core.JsonParser.overrideStdFeatures(int,int)
- uid: com.fasterxml.jackson.core.JsonParser.setFeatureMask(int)
  name: JsonParser.setFeatureMask(int)
  nameWithType: JsonParser.setFeatureMask(int)
  fullName: com.fasterxml.jackson.core.JsonParser.setFeatureMask(int)
- uid: com.fasterxml.jackson.core.base.ParserMinimalBase.getBinaryValue(com.fasterxml.jackson.core.Base64Variant)
  name: ParserMinimalBase.getBinaryValue(Base64Variant)
  nameWithType: ParserMinimalBase.getBinaryValue(Base64Variant)
  fullName: com.fasterxml.jackson.core.base.ParserMinimalBase.getBinaryValue(com.fasterxml.jackson.core.Base64Variant)
- uid: com.fasterxml.jackson.core.JsonParser.canUseSchema(com.fasterxml.jackson.core.FormatSchema)
  name: JsonParser.canUseSchema(FormatSchema)
  nameWithType: JsonParser.canUseSchema(FormatSchema)
  fullName: com.fasterxml.jackson.core.JsonParser.canUseSchema(com.fasterxml.jackson.core.FormatSchema)
- uid: java.lang.Object.clone()
  name: Object.clone()
  nameWithType: Object.clone()
  fullName: java.lang.Object.clone()
- uid: com.fasterxml.jackson.core.JsonParser.<T>readValueAs(java.lang.Class<T>)
  name: JsonParser.<T>readValueAs(Class<T>)
  nameWithType: JsonParser.<T>readValueAs(Class<T>)
  fullName: com.fasterxml.jackson.core.JsonParser.<T>readValueAs(java.lang.Class<T>)
- uid: com.fasterxml.jackson.core.JsonParser.getCurrentValue()
  name: JsonParser.getCurrentValue()
  nameWithType: JsonParser.getCurrentValue()
  fullName: com.fasterxml.jackson.core.JsonParser.getCurrentValue()
- uid: com.fasterxml.jackson.core.JsonParser.setRequestPayloadOnError(com.fasterxml.jackson.core.util.RequestPayload)
  name: JsonParser.setRequestPayloadOnError(RequestPayload)
  nameWithType: JsonParser.setRequestPayloadOnError(RequestPayload)
  fullName: com.fasterxml.jackson.core.JsonParser.setRequestPayloadOnError(com.fasterxml.jackson.core.util.RequestPayload)
- uid: com.fasterxml.jackson.core.JsonParser.releaseBuffered(java.io.OutputStream)
  name: JsonParser.releaseBuffered(OutputStream)
  nameWithType: JsonParser.releaseBuffered(OutputStream)
  fullName: com.fasterxml.jackson.core.JsonParser.releaseBuffered(java.io.OutputStream)
- uid: com.fasterxml.jackson.core.JsonParser.isEnabled(com.fasterxml.jackson.core.JsonParser.Feature)
  name: JsonParser.isEnabled(JsonParser.Feature)
  nameWithType: JsonParser.isEnabled(JsonParser.Feature)
  fullName: com.fasterxml.jackson.core.JsonParser.isEnabled(com.fasterxml.jackson.core.JsonParser.Feature)
- uid: com.fasterxml.jackson.core.JsonParser.getText(java.io.Writer)
  name: JsonParser.getText(Writer)
  nameWithType: JsonParser.getText(Writer)
  fullName: com.fasterxml.jackson.core.JsonParser.getText(java.io.Writer)
- uid: com.fasterxml.jackson.core.base.ParserMinimalBase.getCurrentToken()
  name: ParserMinimalBase.getCurrentToken()
  nameWithType: ParserMinimalBase.getCurrentToken()
  fullName: com.fasterxml.jackson.core.base.ParserMinimalBase.getCurrentToken()
- uid: com.fasterxml.jackson.core.JsonParser.nextFieldName()
  name: JsonParser.nextFieldName()
  nameWithType: JsonParser.nextFieldName()
  fullName: com.fasterxml.jackson.core.JsonParser.nextFieldName()
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: com.fasterxml.jackson.core.JsonParser._codec()
  name: JsonParser._codec()
  nameWithType: JsonParser._codec()
  fullName: com.fasterxml.jackson.core.JsonParser._codec()
- uid: com.fasterxml.jackson.core.JsonParser.nextTextValue()
  name: JsonParser.nextTextValue()
  nameWithType: JsonParser.nextTextValue()
  fullName: com.fasterxml.jackson.core.JsonParser.nextTextValue()
- uid: com.fasterxml.jackson.core.base.ParserMinimalBase._reportError(java.lang.String,java.lang.Object)
  name: ParserMinimalBase._reportError(String,Object)
  nameWithType: ParserMinimalBase._reportError(String,Object)
  fullName: com.fasterxml.jackson.core.base.ParserMinimalBase._reportError(java.lang.String,java.lang.Object)
- uid: com.fasterxml.jackson.core.base.ParserMinimalBase.currentTokenId()
  name: ParserMinimalBase.currentTokenId()
  nameWithType: ParserMinimalBase.currentTokenId()
  fullName: com.fasterxml.jackson.core.base.ParserMinimalBase.currentTokenId()
- uid: com.fasterxml.jackson.core.JsonParser.readBinaryValue(com.fasterxml.jackson.core.Base64Variant,java.io.OutputStream)
  name: JsonParser.readBinaryValue(Base64Variant,OutputStream)
  nameWithType: JsonParser.readBinaryValue(Base64Variant,OutputStream)
  fullName: com.fasterxml.jackson.core.JsonParser.readBinaryValue(com.fasterxml.jackson.core.Base64Variant,java.io.OutputStream)
- uid: com.fasterxml.jackson.core.base.ParserMinimalBase._ascii(byte[])
  name: ParserMinimalBase._ascii(byte[])
  nameWithType: ParserMinimalBase._ascii(byte[])
  fullName: com.fasterxml.jackson.core.base.ParserMinimalBase._ascii(byte[])
- uid: com.fasterxml.jackson.core.JsonParser.getBigIntegerValue()
  name: JsonParser.getBigIntegerValue()
  nameWithType: JsonParser.getBigIntegerValue()
  fullName: com.fasterxml.jackson.core.JsonParser.getBigIntegerValue()
- uid: com.fasterxml.jackson.core.base.ParserMinimalBase._decodeBase64(java.lang.String,com.fasterxml.jackson.core.util.ByteArrayBuilder,com.fasterxml.jackson.core.Base64Variant)
  name: ParserMinimalBase._decodeBase64(String,ByteArrayBuilder,Base64Variant)
  nameWithType: ParserMinimalBase._decodeBase64(String,ByteArrayBuilder,Base64Variant)
  fullName: com.fasterxml.jackson.core.base.ParserMinimalBase._decodeBase64(java.lang.String,com.fasterxml.jackson.core.util.ByteArrayBuilder,com.fasterxml.jackson.core.Base64Variant)
- uid: com.fasterxml.jackson.core.JsonParser.finishToken()
  name: JsonParser.finishToken()
  nameWithType: JsonParser.finishToken()
  fullName: com.fasterxml.jackson.core.JsonParser.finishToken()
- uid: com.fasterxml.jackson.core.base.ParserMinimalBase.getValueAsBoolean(boolean)
  name: ParserMinimalBase.getValueAsBoolean(boolean)
  nameWithType: ParserMinimalBase.getValueAsBoolean(boolean)
  fullName: com.fasterxml.jackson.core.base.ParserMinimalBase.getValueAsBoolean(boolean)
- uid: com.fasterxml.jackson.core.JsonParser.nextLongValue(long)
  name: JsonParser.nextLongValue(long)
  nameWithType: JsonParser.nextLongValue(long)
  fullName: com.fasterxml.jackson.core.JsonParser.nextLongValue(long)
- uid: java.lang.Object.equals(java.lang.Object)
  name: Object.equals(Object)
  nameWithType: Object.equals(Object)
  fullName: java.lang.Object.equals(java.lang.Object)
- uid: com.fasterxml.jackson.core.base.ParserMinimalBase.reportUnexpectedNumberChar(int,java.lang.String)
  name: ParserMinimalBase.reportUnexpectedNumberChar(int,String)
  nameWithType: ParserMinimalBase.reportUnexpectedNumberChar(int,String)
  fullName: com.fasterxml.jackson.core.base.ParserMinimalBase.reportUnexpectedNumberChar(int,java.lang.String)
- uid: com.fasterxml.jackson.core.JsonParser.getByteValue()
  name: JsonParser.getByteValue()
  nameWithType: JsonParser.getByteValue()
  fullName: com.fasterxml.jackson.core.JsonParser.getByteValue()
- uid: com.fasterxml.jackson.core.JsonParser.getNonBlockingInputFeeder()
  name: JsonParser.getNonBlockingInputFeeder()
  nameWithType: JsonParser.getNonBlockingInputFeeder()
  fullName: com.fasterxml.jackson.core.JsonParser.getNonBlockingInputFeeder()
- uid: java.lang.Object.toString()
  name: Object.toString()
  nameWithType: Object.toString()
  fullName: java.lang.Object.toString()
- uid: com.fasterxml.jackson.core.base.ParserMinimalBase._throwInvalidSpace(int)
  name: ParserMinimalBase._throwInvalidSpace(int)
  nameWithType: ParserMinimalBase._throwInvalidSpace(int)
  fullName: com.fasterxml.jackson.core.base.ParserMinimalBase._throwInvalidSpace(int)
- uid: com.fasterxml.jackson.core.base.ParserMinimalBase._hasTextualNull(java.lang.String)
  name: ParserMinimalBase._hasTextualNull(String)
  nameWithType: ParserMinimalBase._hasTextualNull(String)
  fullName: com.fasterxml.jackson.core.base.ParserMinimalBase._hasTextualNull(java.lang.String)
- uid: com.fasterxml.jackson.core.base.ParserMinimalBase.reportOverflowInt()
  name: ParserMinimalBase.reportOverflowInt()
  nameWithType: ParserMinimalBase.reportOverflowInt()
  fullName: com.fasterxml.jackson.core.base.ParserMinimalBase.reportOverflowInt()
- uid: com.fasterxml.jackson.core.JsonParser.isNaN()
  name: JsonParser.isNaN()
  nameWithType: JsonParser.isNaN()
  fullName: com.fasterxml.jackson.core.JsonParser.isNaN()
- uid: com.fasterxml.jackson.core.base.ParserMinimalBase._reportInvalidEOF(java.lang.String,com.fasterxml.jackson.core.JsonToken)
  name: ParserMinimalBase._reportInvalidEOF(String,JsonToken)
  nameWithType: ParserMinimalBase._reportInvalidEOF(String,JsonToken)
  fullName: com.fasterxml.jackson.core.base.ParserMinimalBase._reportInvalidEOF(java.lang.String,com.fasterxml.jackson.core.JsonToken)
- uid: com.fasterxml.jackson.core.base.ParserMinimalBase.getValueAsString(java.lang.String)
  name: ParserMinimalBase.getValueAsString(String)
  nameWithType: ParserMinimalBase.getValueAsString(String)
  fullName: com.fasterxml.jackson.core.base.ParserMinimalBase.getValueAsString(java.lang.String)
- uid: com.fasterxml.jackson.core.base.ParserMinimalBase._handleEOF()
  name: ParserMinimalBase._handleEOF()
  nameWithType: ParserMinimalBase._handleEOF()
  fullName: com.fasterxml.jackson.core.base.ParserMinimalBase._handleEOF()
- uid: com.fasterxml.jackson.core.base.ParserMinimalBase.nextToken()
  name: ParserMinimalBase.nextToken()
  nameWithType: ParserMinimalBase.nextToken()
  fullName: com.fasterxml.jackson.core.base.ParserMinimalBase.nextToken()
- uid: com.fasterxml.jackson.core.JsonParser.getNumberValue()
  name: JsonParser.getNumberValue()
  nameWithType: JsonParser.getNumberValue()
  fullName: com.fasterxml.jackson.core.JsonParser.getNumberValue()
- uid: com.fasterxml.jackson.core.base.ParserMinimalBase.getTextCharacters()
  name: ParserMinimalBase.getTextCharacters()
  nameWithType: ParserMinimalBase.getTextCharacters()
  fullName: com.fasterxml.jackson.core.base.ParserMinimalBase.getTextCharacters()
- uid: com.fasterxml.jackson.core.JsonParser.getSchema()
  name: JsonParser.getSchema()
  nameWithType: JsonParser.getSchema()
  fullName: com.fasterxml.jackson.core.JsonParser.getSchema()
- uid: com.fasterxml.jackson.core.base.ParserMinimalBase._constructError(java.lang.String,java.lang.Throwable)
  name: ParserMinimalBase._constructError(String,Throwable)
  nameWithType: ParserMinimalBase._constructError(String,Throwable)
  fullName: com.fasterxml.jackson.core.base.ParserMinimalBase._constructError(java.lang.String,java.lang.Throwable)
- uid: com.fasterxml.jackson.core.base.ParserMinimalBase.getCurrentName()
  name: ParserMinimalBase.getCurrentName()
  nameWithType: ParserMinimalBase.getCurrentName()
  fullName: com.fasterxml.jackson.core.base.ParserMinimalBase.getCurrentName()
- uid: com.fasterxml.jackson.core.base.ParserMinimalBase.getCurrentTokenId()
  name: ParserMinimalBase.getCurrentTokenId()
  nameWithType: ParserMinimalBase.getCurrentTokenId()
  fullName: com.fasterxml.jackson.core.base.ParserMinimalBase.getCurrentTokenId()
- uid: com.fasterxml.jackson.core.base.ParserMinimalBase.reportOverflowInt(java.lang.String,com.fasterxml.jackson.core.JsonToken)
  name: ParserMinimalBase.reportOverflowInt(String,JsonToken)
  nameWithType: ParserMinimalBase.reportOverflowInt(String,JsonToken)
  fullName: com.fasterxml.jackson.core.base.ParserMinimalBase.reportOverflowInt(java.lang.String,com.fasterxml.jackson.core.JsonToken)
- uid: com.fasterxml.jackson.core.JsonParser.configure(com.fasterxml.jackson.core.JsonParser.Feature,boolean)
  name: JsonParser.configure(JsonParser.Feature,boolean)
  nameWithType: JsonParser.configure(JsonParser.Feature,boolean)
  fullName: com.fasterxml.jackson.core.JsonParser.configure(com.fasterxml.jackson.core.JsonParser.Feature,boolean)
- uid: com.fasterxml.jackson.core.base.ParserMinimalBase.hasToken(com.fasterxml.jackson.core.JsonToken)
  name: ParserMinimalBase.hasToken(JsonToken)
  nameWithType: ParserMinimalBase.hasToken(JsonToken)
  fullName: com.fasterxml.jackson.core.base.ParserMinimalBase.hasToken(com.fasterxml.jackson.core.JsonToken)
- uid: com.fasterxml.jackson.core.JsonParser.<T>readValuesAs(com.fasterxml.jackson.core.type.TypeReference<T>)
  name: JsonParser.<T>readValuesAs(TypeReference<T>)
  nameWithType: JsonParser.<T>readValuesAs(TypeReference<T>)
  fullName: com.fasterxml.jackson.core.JsonParser.<T>readValuesAs(com.fasterxml.jackson.core.type.TypeReference<T>)
- uid: com.fasterxml.jackson.core.JsonParser.getFloatValue()
  name: JsonParser.getFloatValue()
  nameWithType: JsonParser.getFloatValue()
  fullName: com.fasterxml.jackson.core.JsonParser.getFloatValue()
- uid: com.fasterxml.jackson.core.JsonParser.overrideFormatFeatures(int,int)
  name: JsonParser.overrideFormatFeatures(int,int)
  nameWithType: JsonParser.overrideFormatFeatures(int,int)
  fullName: com.fasterxml.jackson.core.JsonParser.overrideFormatFeatures(int,int)
- uid: com.fasterxml.jackson.core.base.ParserMinimalBase.reportOverflowInt(java.lang.String)
  name: ParserMinimalBase.reportOverflowInt(String)
  nameWithType: ParserMinimalBase.reportOverflowInt(String)
  fullName: com.fasterxml.jackson.core.base.ParserMinimalBase.reportOverflowInt(java.lang.String)
- uid: com.fasterxml.jackson.core.JsonParser.getLongValue()
  name: JsonParser.getLongValue()
  nameWithType: JsonParser.getLongValue()
  fullName: com.fasterxml.jackson.core.JsonParser.getLongValue()
- uid: com.fasterxml.jackson.core.base.ParserMinimalBase.getValueAsString()
  name: ParserMinimalBase.getValueAsString()
  nameWithType: ParserMinimalBase.getValueAsString()
  fullName: com.fasterxml.jackson.core.base.ParserMinimalBase.getValueAsString()
- uid: com.fasterxml.jackson.core.base.ParserMinimalBase.isExpectedStartObjectToken()
  name: ParserMinimalBase.isExpectedStartObjectToken()
  nameWithType: ParserMinimalBase.isExpectedStartObjectToken()
  fullName: com.fasterxml.jackson.core.base.ParserMinimalBase.isExpectedStartObjectToken()
- uid: com.fasterxml.jackson.core.base.ParserMinimalBase.getParsingContext()
  name: ParserMinimalBase.getParsingContext()
  nameWithType: ParserMinimalBase.getParsingContext()
  fullName: com.fasterxml.jackson.core.base.ParserMinimalBase.getParsingContext()
- uid: com.fasterxml.jackson.core.base.ParserMinimalBase.getValueAsDouble(double)
  name: ParserMinimalBase.getValueAsDouble(double)
  nameWithType: ParserMinimalBase.getValueAsDouble(double)
  fullName: com.fasterxml.jackson.core.base.ParserMinimalBase.getValueAsDouble(double)
- uid: com.fasterxml.jackson.core.JsonParser.getFeatureMask()
  name: JsonParser.getFeatureMask()
  nameWithType: JsonParser.getFeatureMask()
  fullName: com.fasterxml.jackson.core.JsonParser.getFeatureMask()
- uid: java.lang.Object.hashCode()
  name: Object.hashCode()
  nameWithType: Object.hashCode()
  fullName: java.lang.Object.hashCode()
- uid: com.fasterxml.jackson.core.base.ParserMinimalBase.reportOverflowLong(java.lang.String,com.fasterxml.jackson.core.JsonToken)
  name: ParserMinimalBase.reportOverflowLong(String,JsonToken)
  nameWithType: ParserMinimalBase.reportOverflowLong(String,JsonToken)
  fullName: com.fasterxml.jackson.core.base.ParserMinimalBase.reportOverflowLong(java.lang.String,com.fasterxml.jackson.core.JsonToken)
- uid: com.fasterxml.jackson.core.base.ParserMinimalBase.hasTokenId(int)
  name: ParserMinimalBase.hasTokenId(int)
  nameWithType: ParserMinimalBase.hasTokenId(int)
  fullName: com.fasterxml.jackson.core.base.ParserMinimalBase.hasTokenId(int)
- uid: com.fasterxml.jackson.core.base.ParserMinimalBase.getValueAsLong(long)
  name: ParserMinimalBase.getValueAsLong(long)
  nameWithType: ParserMinimalBase.getValueAsLong(long)
  fullName: com.fasterxml.jackson.core.base.ParserMinimalBase.getValueAsLong(long)
- uid: com.fasterxml.jackson.core.JsonParser.enable(com.fasterxml.jackson.core.JsonParser.Feature)
  name: JsonParser.enable(JsonParser.Feature)
  nameWithType: JsonParser.enable(JsonParser.Feature)
  fullName: com.fasterxml.jackson.core.JsonParser.enable(com.fasterxml.jackson.core.JsonParser.Feature)
- uid: com.fasterxml.jackson.core.base.ParserMinimalBase.reportInvalidNumber(java.lang.String)
  name: ParserMinimalBase.reportInvalidNumber(String)
  nameWithType: ParserMinimalBase.reportInvalidNumber(String)
  fullName: com.fasterxml.jackson.core.base.ParserMinimalBase.reportInvalidNumber(java.lang.String)
- uid: com.fasterxml.jackson.core.JsonParser.setSchema(com.fasterxml.jackson.core.FormatSchema)
  name: JsonParser.setSchema(FormatSchema)
  nameWithType: JsonParser.setSchema(FormatSchema)
  fullName: com.fasterxml.jackson.core.JsonParser.setSchema(com.fasterxml.jackson.core.FormatSchema)
- uid: com.fasterxml.jackson.core.JsonParser.setCurrentValue(java.lang.Object)
  name: JsonParser.setCurrentValue(Object)
  nameWithType: JsonParser.setCurrentValue(Object)
  fullName: com.fasterxml.jackson.core.JsonParser.setCurrentValue(java.lang.Object)
- uid: com.fasterxml.jackson.core.JsonParser.getValueAsBoolean()
  name: JsonParser.getValueAsBoolean()
  nameWithType: JsonParser.getValueAsBoolean()
  fullName: com.fasterxml.jackson.core.JsonParser.getValueAsBoolean()
- uid: com.fasterxml.jackson.core.JsonParser.nextFieldName(com.fasterxml.jackson.core.SerializableString)
  name: JsonParser.nextFieldName(SerializableString)
  nameWithType: JsonParser.nextFieldName(SerializableString)
  fullName: com.fasterxml.jackson.core.JsonParser.nextFieldName(com.fasterxml.jackson.core.SerializableString)
- uid: com.fasterxml.jackson.core.JsonParser.getShortValue()
  name: JsonParser.getShortValue()
  nameWithType: JsonParser.getShortValue()
  fullName: com.fasterxml.jackson.core.JsonParser.getShortValue()
- uid: com.fasterxml.jackson.core.JsonParser.setRequestPayloadOnError(byte[],java.lang.String)
  name: JsonParser.setRequestPayloadOnError(byte[],String)
  nameWithType: JsonParser.setRequestPayloadOnError(byte[],String)
  fullName: com.fasterxml.jackson.core.JsonParser.setRequestPayloadOnError(byte[],java.lang.String)
- uid: com.fasterxml.jackson.core.base.ParserMinimalBase._reportUnexpectedChar(int,java.lang.String)
  name: ParserMinimalBase._reportUnexpectedChar(int,String)
  nameWithType: ParserMinimalBase._reportUnexpectedChar(int,String)
  fullName: com.fasterxml.jackson.core.base.ParserMinimalBase._reportUnexpectedChar(int,java.lang.String)
- uid: com.fasterxml.jackson.core.JsonParser.getTokenLocation()
  name: JsonParser.getTokenLocation()
  nameWithType: JsonParser.getTokenLocation()
  fullName: com.fasterxml.jackson.core.JsonParser.getTokenLocation()
- uid: com.fasterxml.jackson.core.JsonParser.releaseBuffered(java.io.Writer)
  name: JsonParser.releaseBuffered(Writer)
  nameWithType: JsonParser.releaseBuffered(Writer)
  fullName: com.fasterxml.jackson.core.JsonParser.releaseBuffered(java.io.Writer)
- uid: com.fasterxml.jackson.core.JsonParser.getDecimalValue()
  name: JsonParser.getDecimalValue()
  nameWithType: JsonParser.getDecimalValue()
  fullName: com.fasterxml.jackson.core.JsonParser.getDecimalValue()
- uid: com.fasterxml.jackson.core.JsonParser._constructError(java.lang.String)
  name: JsonParser._constructError(String)
  nameWithType: JsonParser._constructError(String)
  fullName: com.fasterxml.jackson.core.JsonParser._constructError(java.lang.String)
- uid: com.fasterxml.jackson.core.JsonParser.getFormatFeatures()
  name: JsonParser.getFormatFeatures()
  nameWithType: JsonParser.getFormatFeatures()
  fullName: com.fasterxml.jackson.core.JsonParser.getFormatFeatures()
- uid: com.fasterxml.jackson.core.base.ParserMinimalBase._reportInputCoercion(java.lang.String,com.fasterxml.jackson.core.JsonToken,java.lang.Class
  name: ParserMinimalBase._reportInputCoercion(String,JsonToken,Class
  nameWithType: ParserMinimalBase._reportInputCoercion(String,JsonToken,Class
  fullName: com.fasterxml.jackson.core.base.ParserMinimalBase._reportInputCoercion(java.lang.String,com.fasterxml.jackson.core.JsonToken,java.lang.Class
- uid: ?>)
  name: ?>)
  nameWithType: ?>)
  fullName: ?>)
- uid: com.fasterxml.jackson.core.JsonParser.
  name: JsonParser.
  nameWithType: JsonParser.
  fullName: com.fasterxml.jackson.core.JsonParser.
- uid: T>readValueAs(com.fasterxml.jackson.core.type.TypeReference
  name: T>readValueAs(TypeReference
  nameWithType: T>readValueAs(TypeReference
  fullName: T>readValueAs(com.fasterxml.jackson.core.type.TypeReference
- uid: T>readValuesAs(java.lang.Class
  name: T>readValuesAs(Class
  nameWithType: T>readValuesAs(Class
  fullName: T>readValuesAs(java.lang.Class
- uid: T>)
  name: T>)
  nameWithType: T>)
  fullName: T>)
- uid: T>readValueAsTree()
  name: T>readValueAsTree()
  nameWithType: T>readValueAsTree()
  fullName: T>readValueAsTree()
- uid: T>readValueAs(java.lang.Class
  name: T>readValueAs(Class
  nameWithType: T>readValueAs(Class
  fullName: T>readValueAs(java.lang.Class
- uid: T>readValuesAs(com.fasterxml.jackson.core.type.TypeReference
  name: T>readValuesAs(TypeReference
  nameWithType: T>readValuesAs(TypeReference
  fullName: T>readValuesAs(com.fasterxml.jackson.core.type.TypeReference
