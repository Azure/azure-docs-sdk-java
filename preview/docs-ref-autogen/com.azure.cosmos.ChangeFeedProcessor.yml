### YamlMime:ManagedReference
items:
- uid: "com.azure.cosmos.ChangeFeedProcessor"
  id: "ChangeFeedProcessor"
  parent: "com.azure.cosmos"
  children:
  - "com.azure.cosmos.ChangeFeedProcessor.BuilderDefinition"
  - "com.azure.cosmos.ChangeFeedProcessor.changeFeedProcessorBuilder()"
  - "com.azure.cosmos.ChangeFeedProcessor.start()"
  - "com.azure.cosmos.ChangeFeedProcessor.stop()"
  langs:
  - "java"
  name: "ChangeFeedProcessor"
  nameWithType: "ChangeFeedProcessor"
  fullName: "com.azure.cosmos.ChangeFeedProcessor"
  type: "Interface"
  package: "com.azure.cosmos"
  summary: "Simple host for distributing change feed events across observers and thus allowing these observers scale. It distributes the load across its instances and allows dynamic scaling: - Partitions in partitioned collections are distributed across instances/observers. - New instance takes leases from existing instances to make distribution equal. - If an instance dies, the leases are distributed across remaining instances. It's useful for scenario when partition count is high so that one host/VM is not capable of processing that many change feed events. Client application needs to implement <xref uid=\"com.azure.cosmos.implementation.changefeed.ChangeFeedObserver\" data-throw-if-not-resolved=\"false\">ChangeFeedObserver</xref> and register processor implementation with <xref uid=\"com.azure.cosmos.ChangeFeedProcessor\" data-throw-if-not-resolved=\"false\">ChangeFeedProcessor</xref>.\n\nIt uses auxiliary document collection for managing leases for a partition. Every EventProcessorHost instance is performing the following two tasks: 1) Renew Leases: It keeps track of leases currently owned by the host and continuously keeps on renewing the leases. 2) Acquire Leases: Each instance continuously polls all leases to check if there are any leases it should acquire for the system to get into balanced state.\n\n`ChangeFeedProcessor changeFeedProcessor = ChangeFeedProcessor.Builder() .hostName(hostName) .feedContainer(feedContainer) .leaseContainer(leaseContainer) .handleChanges(docs -> { // Implementation for handling and processing CosmosItemProperties list goes here }) .build();`"
  syntax:
    content: "public interface ChangeFeedProcessor"
- uid: "com.azure.cosmos.ChangeFeedProcessor.changeFeedProcessorBuilder()"
  id: "changeFeedProcessorBuilder()"
  parent: "com.azure.cosmos.ChangeFeedProcessor"
  langs:
  - "java"
  name: "changeFeedProcessorBuilder()"
  nameWithType: "ChangeFeedProcessor.changeFeedProcessorBuilder()"
  fullName: "com.azure.cosmos.ChangeFeedProcessor.changeFeedProcessorBuilder()"
  overload: "com.azure.cosmos.ChangeFeedProcessor.changeFeedProcessorBuilder*"
  type: "Method"
  package: "com.azure.cosmos"
  summary: "Helper static method to buildAsyncClient <xref uid=\"com.azure.cosmos.ChangeFeedProcessor\" data-throw-if-not-resolved=\"false\">ChangeFeedProcessor</xref> instances as logical representation of the Azure Cosmos DB database service.\n\n`ChangeFeedProcessor changeFeedProcessor = ChangeFeedProcessor.Builder() .hostName(hostName) .feedContainer(feedContainer) .leaseContainer(leaseContainer) .handleChanges(docs -> { // Implementation for handling and processing CosmosItemProperties list goes here }) .build();`"
  syntax:
    content: "public static ChangeFeedProcessor.BuilderDefinition changeFeedProcessorBuilder()"
    return:
      type: "com.azure.cosmos.ChangeFeedProcessor.BuilderDefinition"
      description: "a changeFeedProcessorBuilder definition instance."
- uid: "com.azure.cosmos.ChangeFeedProcessor.start()"
  id: "start()"
  parent: "com.azure.cosmos.ChangeFeedProcessor"
  langs:
  - "java"
  name: "start()"
  nameWithType: "ChangeFeedProcessor.start()"
  fullName: "com.azure.cosmos.ChangeFeedProcessor.start()"
  overload: "com.azure.cosmos.ChangeFeedProcessor.start*"
  type: "Method"
  package: "com.azure.cosmos"
  summary: "Start listening for changes asynchronously."
  syntax:
    content: "public abstract Mono<Void> start()"
    return:
      type: "reactor.core.publisher.Mono<java.lang.Void>"
      description: "a representation of the deferred computation of this call."
- uid: "com.azure.cosmos.ChangeFeedProcessor.stop()"
  id: "stop()"
  parent: "com.azure.cosmos.ChangeFeedProcessor"
  langs:
  - "java"
  name: "stop()"
  nameWithType: "ChangeFeedProcessor.stop()"
  fullName: "com.azure.cosmos.ChangeFeedProcessor.stop()"
  overload: "com.azure.cosmos.ChangeFeedProcessor.stop*"
  type: "Method"
  package: "com.azure.cosmos"
  summary: "Stops listening for changes asynchronously."
  syntax:
    content: "public abstract Mono<Void> stop()"
    return:
      type: "reactor.core.publisher.Mono<java.lang.Void>"
      description: "a representation of the deferred computation of this call."
references:
- uid: "reactor.core.publisher.Mono<java.lang.Void>"
  spec.java:
  - uid: "reactor.core.publisher.Mono"
    name: "Mono"
    fullName: "reactor.core.publisher.Mono"
  - name: "<"
    fullName: "<"
  - uid: "java.lang.Void"
    name: "Void"
    fullName: "java.lang.Void"
  - name: ">"
    fullName: ">"
- uid: "com.azure.cosmos.ChangeFeedProcessor.start*"
  name: "start"
  nameWithType: "ChangeFeedProcessor.start"
  fullName: "com.azure.cosmos.ChangeFeedProcessor.start"
  package: "com.azure.cosmos"
- uid: "com.azure.cosmos.ChangeFeedProcessor.stop*"
  name: "stop"
  nameWithType: "ChangeFeedProcessor.stop"
  fullName: "com.azure.cosmos.ChangeFeedProcessor.stop"
  package: "com.azure.cosmos"
- uid: "com.azure.cosmos.ChangeFeedProcessor.BuilderDefinition"
  name: "ChangeFeedProcessor.BuilderDefinition"
  nameWithType: "ChangeFeedProcessor.BuilderDefinition"
  fullName: "com.azure.cosmos.ChangeFeedProcessor.BuilderDefinition"
- uid: "com.azure.cosmos.ChangeFeedProcessor.changeFeedProcessorBuilder*"
  name: "changeFeedProcessorBuilder"
  nameWithType: "ChangeFeedProcessor.changeFeedProcessorBuilder"
  fullName: "com.azure.cosmos.ChangeFeedProcessor.changeFeedProcessorBuilder"
  package: "com.azure.cosmos"
- uid: "java.lang.Void"
  name: "Void"
  nameWithType: "Void"
  fullName: "java.lang.Void"
- uid: "reactor.core.publisher.Mono"
  name: "Mono"
  nameWithType: "Mono"
  fullName: "reactor.core.publisher.Mono"
