### YamlMime:ManagedReference
items:
- uid: com.azure.cosmos.ChangeFeedProcessor
  id: ChangeFeedProcessor
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos
  children:
  - com.azure.cosmos.ChangeFeedProcessor.getEstimatedLag()
  - com.azure.cosmos.ChangeFeedProcessor.isStarted()
  - com.azure.cosmos.ChangeFeedProcessor.start()
  - com.azure.cosmos.ChangeFeedProcessor.stop()
  langs:
  - java
  name: ChangeFeedProcessor
  nameWithType: ChangeFeedProcessor
  fullName: com.azure.cosmos.ChangeFeedProcessor
  type: Interface
  package: com.azure.cosmos
  summary: >-
    Simple host for distributing change feed events across observers, simplifying the process of reading the change feeds and distributing the processing events across multiple consumers effectively.


    There are four main components of implementing the change feed processor:

     *  The monitored container: the monitored container has the data from which the change feed is generated. Any inserts and updates to the monitored container are reflected in the change feed of the container.
     *  The lease container: the lease container acts as a state storage and coordinates processing the change feed across multiple workers. The lease container can be stored in the same account as the monitored container or in a separate account.
     *  The host: a host is an application instance that uses the change feed processor to listen for changes. Multiple instances with the same lease configuration can run in parallel, but each instance should have a different instance name.
     *  The delegate: the delegate is the code that defines what you, the developer, want to do with each batch of changes that the change feed processor reads.

    ```java

    ChangeFeedProcessor changeFeedProcessor = new ChangeFeedProcessorBuilder()
         .hostName(hostName)
         .feedContainer(feedContainer)
         .leaseContainer(leaseContainer)
         .handleChanges(docs -> {
             for (JsonNode item : docs) {
                 // Implementation for handling and processing of each JsonNode item goes here
             }
         })
         .buildChangeFeedProcessor();
    ```
  syntax:
    content: public interface ChangeFeedProcessor
- uid: com.azure.cosmos.ChangeFeedProcessor.getEstimatedLag()
  id: getEstimatedLag()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.ChangeFeedProcessor
  langs:
  - java
  name: getEstimatedLag()
  nameWithType: ChangeFeedProcessor.getEstimatedLag()
  fullName: com.azure.cosmos.ChangeFeedProcessor.getEstimatedLag()
  overload: com.azure.cosmos.ChangeFeedProcessor.getEstimatedLag*
  type: Method
  package: com.azure.cosmos
  summary: >-
    Returns the current owner (host) and an approximation of the difference between the last processed item (defined by the state of the feed container) and the latest change in the container for each partition (lease item).


    An empty map will be returned if the processor was not started or no lease items matching the current <xref uid="com.azure.cosmos.ChangeFeedProcessor" data-throw-if-not-resolved="false">ChangeFeedProcessor</xref> instance's lease prefix could be found.
  syntax:
    content: public abstract Mono<Map<String,Integer>> getEstimatedLag()
    return:
      type: reactor.core.publisher.Mono<java.util.Map<java.lang.String,java.lang.Integer>>
      description: >-
        a map representing the current owner and lease token, the current LSN and latest LSN, and the estimated
                 lag, asynchronously.
- uid: com.azure.cosmos.ChangeFeedProcessor.isStarted()
  id: isStarted()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.ChangeFeedProcessor
  langs:
  - java
  name: isStarted()
  nameWithType: ChangeFeedProcessor.isStarted()
  fullName: com.azure.cosmos.ChangeFeedProcessor.isStarted()
  overload: com.azure.cosmos.ChangeFeedProcessor.isStarted*
  type: Method
  package: com.azure.cosmos
  summary: Returns the state of the change feed processor.
  syntax:
    content: public abstract boolean isStarted()
    return:
      type: boolean
      description: true if the change feed processor is currently active and running.
- uid: com.azure.cosmos.ChangeFeedProcessor.start()
  id: start()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.ChangeFeedProcessor
  langs:
  - java
  name: start()
  nameWithType: ChangeFeedProcessor.start()
  fullName: com.azure.cosmos.ChangeFeedProcessor.start()
  overload: com.azure.cosmos.ChangeFeedProcessor.start*
  type: Method
  package: com.azure.cosmos
  summary: Start listening for changes asynchronously.
  syntax:
    content: public abstract Mono<Void> start()
    return:
      type: reactor.core.publisher.Mono<java.lang.Void>
      description: a representation of the deferred computation of this call.
- uid: com.azure.cosmos.ChangeFeedProcessor.stop()
  id: stop()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.ChangeFeedProcessor
  langs:
  - java
  name: stop()
  nameWithType: ChangeFeedProcessor.stop()
  fullName: com.azure.cosmos.ChangeFeedProcessor.stop()
  overload: com.azure.cosmos.ChangeFeedProcessor.stop*
  type: Method
  package: com.azure.cosmos
  summary: Stops listening for changes asynchronously.
  syntax:
    content: public abstract Mono<Void> stop()
    return:
      type: reactor.core.publisher.Mono<java.lang.Void>
      description: a representation of the deferred computation of this call.
references:
- uid: reactor.core.publisher.Mono<java.lang.Void>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: java.lang.Void
    name: Void
    fullName: java.lang.Void
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.ChangeFeedProcessor.start*
  name: start
  nameWithType: ChangeFeedProcessor.start
  fullName: com.azure.cosmos.ChangeFeedProcessor.start
  package: com.azure.cosmos
- uid: com.azure.cosmos.ChangeFeedProcessor.stop*
  name: stop
  nameWithType: ChangeFeedProcessor.stop
  fullName: com.azure.cosmos.ChangeFeedProcessor.stop
  package: com.azure.cosmos
- uid: boolean
  spec.java:
  - uid: boolean
    name: boolean
    fullName: boolean
- uid: com.azure.cosmos.ChangeFeedProcessor.isStarted*
  name: isStarted
  nameWithType: ChangeFeedProcessor.isStarted
  fullName: com.azure.cosmos.ChangeFeedProcessor.isStarted
  package: com.azure.cosmos
- uid: reactor.core.publisher.Mono<java.util.Map<java.lang.String,java.lang.Integer>>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: java.util.Map
    name: Map
    fullName: java.util.Map
  - name: <
    fullName: <
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
  - name: ','
    fullName: ','
  - uid: java.lang.Integer
    name: Integer
    fullName: java.lang.Integer
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.ChangeFeedProcessor.getEstimatedLag*
  name: getEstimatedLag
  nameWithType: ChangeFeedProcessor.getEstimatedLag
  fullName: com.azure.cosmos.ChangeFeedProcessor.getEstimatedLag
  package: com.azure.cosmos
- uid: java.lang.Void
  name: Void
  nameWithType: Void
  fullName: java.lang.Void
- uid: reactor.core.publisher.Mono
  name: Mono
  nameWithType: Mono
  fullName: reactor.core.publisher.Mono
- uid: java.util.Map
  name: Map
  nameWithType: Map
  fullName: java.util.Map
- uid: java.lang.String,java.lang.Integer
  name: String,Integer
  nameWithType: String,Integer
  fullName: java.lang.String,java.lang.Integer
