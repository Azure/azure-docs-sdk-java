### YamlMime:JavaType
uid: "com.azure.storage.blob.specialized.AppendBlobClient"
fullName: "com.azure.storage.blob.specialized.AppendBlobClient"
name: "AppendBlobClient"
nameWithType: "AppendBlobClient"
summary: "Client to an append blob."
inheritances:
- "<xref href=\"java.lang.Object?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
- "<xref href=\"com.azure.storage.blob.specialized.BlobClientBase?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
inheritedMembers:
- "com.azure.storage.blob.specialized.BlobClientBase.abortCopyFromUrl(java.lang.String)"
- "com.azure.storage.blob.specialized.BlobClientBase.abortCopyFromUrlWithResponse(java.lang.String,java.lang.String,java.time.Duration,com.azure.core.util.Context)"
- "com.azure.storage.blob.specialized.BlobClientBase.beginCopy(com.azure.storage.blob.options.BlobBeginCopyOptions)"
- "com.azure.storage.blob.specialized.BlobClientBase.beginCopy(java.lang.String,java.time.Duration)"
- "com.azure.storage.blob.specialized.BlobClientBase.beginCopy(java.lang.String,java.util.Map<java.lang.String,java.lang.String>,com.azure.storage.blob.models.AccessTier,com.azure.storage.blob.models.RehydratePriority,com.azure.core.http.RequestConditions,com.azure.storage.blob.models.BlobRequestConditions,java.time.Duration)"
- "com.azure.storage.blob.specialized.BlobClientBase.copyFromUrl(java.lang.String)"
- "com.azure.storage.blob.specialized.BlobClientBase.copyFromUrlWithResponse(com.azure.storage.blob.options.BlobCopyFromUrlOptions,java.time.Duration,com.azure.core.util.Context)"
- "com.azure.storage.blob.specialized.BlobClientBase.copyFromUrlWithResponse(java.lang.String,java.util.Map<java.lang.String,java.lang.String>,com.azure.storage.blob.models.AccessTier,com.azure.core.http.RequestConditions,com.azure.storage.blob.models.BlobRequestConditions,java.time.Duration,com.azure.core.util.Context)"
- "com.azure.storage.blob.specialized.BlobClientBase.createSnapshot()"
- "com.azure.storage.blob.specialized.BlobClientBase.createSnapshotWithResponse(java.util.Map<java.lang.String,java.lang.String>,com.azure.storage.blob.models.BlobRequestConditions,java.time.Duration,com.azure.core.util.Context)"
- "com.azure.storage.blob.specialized.BlobClientBase.delete()"
- "com.azure.storage.blob.specialized.BlobClientBase.deleteIfExists()"
- "com.azure.storage.blob.specialized.BlobClientBase.deleteIfExistsWithResponse(com.azure.storage.blob.models.DeleteSnapshotsOptionType,com.azure.storage.blob.models.BlobRequestConditions,java.time.Duration,com.azure.core.util.Context)"
- "com.azure.storage.blob.specialized.BlobClientBase.deleteImmutabilityPolicy()"
- "com.azure.storage.blob.specialized.BlobClientBase.deleteImmutabilityPolicyWithResponse(java.time.Duration,com.azure.core.util.Context)"
- "com.azure.storage.blob.specialized.BlobClientBase.deleteWithResponse(com.azure.storage.blob.models.DeleteSnapshotsOptionType,com.azure.storage.blob.models.BlobRequestConditions,java.time.Duration,com.azure.core.util.Context)"
- "com.azure.storage.blob.specialized.BlobClientBase.download(java.io.OutputStream)"
- "com.azure.storage.blob.specialized.BlobClientBase.downloadContent()"
- "com.azure.storage.blob.specialized.BlobClientBase.downloadContentWithResponse(com.azure.storage.blob.models.DownloadRetryOptions,com.azure.storage.blob.models.BlobRequestConditions,java.time.Duration,com.azure.core.util.Context)"
- "com.azure.storage.blob.specialized.BlobClientBase.downloadStream(java.io.OutputStream)"
- "com.azure.storage.blob.specialized.BlobClientBase.downloadStreamWithResponse(java.io.OutputStream,com.azure.storage.blob.models.BlobRange,com.azure.storage.blob.models.DownloadRetryOptions,com.azure.storage.blob.models.BlobRequestConditions,boolean,java.time.Duration,com.azure.core.util.Context)"
- "com.azure.storage.blob.specialized.BlobClientBase.downloadToFile(java.lang.String)"
- "com.azure.storage.blob.specialized.BlobClientBase.downloadToFile(java.lang.String,boolean)"
- "com.azure.storage.blob.specialized.BlobClientBase.downloadToFileWithResponse(com.azure.storage.blob.options.BlobDownloadToFileOptions,java.time.Duration,com.azure.core.util.Context)"
- "com.azure.storage.blob.specialized.BlobClientBase.downloadToFileWithResponse(java.lang.String,com.azure.storage.blob.models.BlobRange,com.azure.storage.blob.models.ParallelTransferOptions,com.azure.storage.blob.models.DownloadRetryOptions,com.azure.storage.blob.models.BlobRequestConditions,boolean,java.time.Duration,com.azure.core.util.Context)"
- "com.azure.storage.blob.specialized.BlobClientBase.downloadToFileWithResponse(java.lang.String,com.azure.storage.blob.models.BlobRange,com.azure.storage.blob.models.ParallelTransferOptions,com.azure.storage.blob.models.DownloadRetryOptions,com.azure.storage.blob.models.BlobRequestConditions,boolean,java.util.Set<java.nio.file.OpenOption>,java.time.Duration,com.azure.core.util.Context)"
- "com.azure.storage.blob.specialized.BlobClientBase.downloadWithResponse(java.io.OutputStream,com.azure.storage.blob.models.BlobRange,com.azure.storage.blob.models.DownloadRetryOptions,com.azure.storage.blob.models.BlobRequestConditions,boolean,java.time.Duration,com.azure.core.util.Context)"
- "com.azure.storage.blob.specialized.BlobClientBase.exists()"
- "com.azure.storage.blob.specialized.BlobClientBase.existsWithResponse(java.time.Duration,com.azure.core.util.Context)"
- "com.azure.storage.blob.specialized.BlobClientBase.generateSas(com.azure.storage.blob.sas.BlobServiceSasSignatureValues)"
- "com.azure.storage.blob.specialized.BlobClientBase.generateSas(com.azure.storage.blob.sas.BlobServiceSasSignatureValues,com.azure.core.util.Context)"
- "com.azure.storage.blob.specialized.BlobClientBase.generateUserDelegationSas(com.azure.storage.blob.sas.BlobServiceSasSignatureValues,com.azure.storage.blob.models.UserDelegationKey)"
- "com.azure.storage.blob.specialized.BlobClientBase.generateUserDelegationSas(com.azure.storage.blob.sas.BlobServiceSasSignatureValues,com.azure.storage.blob.models.UserDelegationKey,java.lang.String,com.azure.core.util.Context)"
- "com.azure.storage.blob.specialized.BlobClientBase.getAccountInfo()"
- "com.azure.storage.blob.specialized.BlobClientBase.getAccountInfoWithResponse(java.time.Duration,com.azure.core.util.Context)"
- "com.azure.storage.blob.specialized.BlobClientBase.getAccountName()"
- "com.azure.storage.blob.specialized.BlobClientBase.getAccountUrl()"
- "com.azure.storage.blob.specialized.BlobClientBase.getBlobName()"
- "com.azure.storage.blob.specialized.BlobClientBase.getBlobUrl()"
- "com.azure.storage.blob.specialized.BlobClientBase.getContainerClient()"
- "com.azure.storage.blob.specialized.BlobClientBase.getContainerName()"
- "com.azure.storage.blob.specialized.BlobClientBase.getCustomerProvidedKey()"
- "com.azure.storage.blob.specialized.BlobClientBase.getCustomerProvidedKeyClient(com.azure.storage.blob.models.CustomerProvidedKey)"
- "com.azure.storage.blob.specialized.BlobClientBase.getEncryptionScopeClient(java.lang.String)"
- "com.azure.storage.blob.specialized.BlobClientBase.getHttpPipeline()"
- "com.azure.storage.blob.specialized.BlobClientBase.getProperties()"
- "com.azure.storage.blob.specialized.BlobClientBase.getPropertiesWithResponse(com.azure.storage.blob.models.BlobRequestConditions,java.time.Duration,com.azure.core.util.Context)"
- "com.azure.storage.blob.specialized.BlobClientBase.getServiceVersion()"
- "com.azure.storage.blob.specialized.BlobClientBase.getSnapshotClient(java.lang.String)"
- "com.azure.storage.blob.specialized.BlobClientBase.getSnapshotId()"
- "com.azure.storage.blob.specialized.BlobClientBase.getTags()"
- "com.azure.storage.blob.specialized.BlobClientBase.getTagsWithResponse(com.azure.storage.blob.options.BlobGetTagsOptions,java.time.Duration,com.azure.core.util.Context)"
- "com.azure.storage.blob.specialized.BlobClientBase.getVersionClient(java.lang.String)"
- "com.azure.storage.blob.specialized.BlobClientBase.getVersionId()"
- "com.azure.storage.blob.specialized.BlobClientBase.isSnapshot()"
- "com.azure.storage.blob.specialized.BlobClientBase.openInputStream()"
- "com.azure.storage.blob.specialized.BlobClientBase.openInputStream(com.azure.storage.blob.models.BlobRange,com.azure.storage.blob.models.BlobRequestConditions)"
- "com.azure.storage.blob.specialized.BlobClientBase.openInputStream(com.azure.storage.blob.options.BlobInputStreamOptions)"
- "com.azure.storage.blob.specialized.BlobClientBase.openQueryInputStream(java.lang.String)"
- "com.azure.storage.blob.specialized.BlobClientBase.openQueryInputStreamWithResponse(com.azure.storage.blob.options.BlobQueryOptions)"
- "com.azure.storage.blob.specialized.BlobClientBase.query(java.io.OutputStream,java.lang.String)"
- "com.azure.storage.blob.specialized.BlobClientBase.queryWithResponse(com.azure.storage.blob.options.BlobQueryOptions,java.time.Duration,com.azure.core.util.Context)"
- "com.azure.storage.blob.specialized.BlobClientBase.setAccessTier(com.azure.storage.blob.models.AccessTier)"
- "com.azure.storage.blob.specialized.BlobClientBase.setAccessTierWithResponse(com.azure.storage.blob.models.AccessTier,com.azure.storage.blob.models.RehydratePriority,java.lang.String,java.time.Duration,com.azure.core.util.Context)"
- "com.azure.storage.blob.specialized.BlobClientBase.setAccessTierWithResponse(com.azure.storage.blob.options.BlobSetAccessTierOptions,java.time.Duration,com.azure.core.util.Context)"
- "com.azure.storage.blob.specialized.BlobClientBase.setHttpHeaders(com.azure.storage.blob.models.BlobHttpHeaders)"
- "com.azure.storage.blob.specialized.BlobClientBase.setHttpHeadersWithResponse(com.azure.storage.blob.models.BlobHttpHeaders,com.azure.storage.blob.models.BlobRequestConditions,java.time.Duration,com.azure.core.util.Context)"
- "com.azure.storage.blob.specialized.BlobClientBase.setImmutabilityPolicy(com.azure.storage.blob.models.BlobImmutabilityPolicy)"
- "com.azure.storage.blob.specialized.BlobClientBase.setImmutabilityPolicyWithResponse(com.azure.storage.blob.models.BlobImmutabilityPolicy,com.azure.storage.blob.models.BlobRequestConditions,java.time.Duration,com.azure.core.util.Context)"
- "com.azure.storage.blob.specialized.BlobClientBase.setLegalHold(boolean)"
- "com.azure.storage.blob.specialized.BlobClientBase.setLegalHoldWithResponse(boolean,java.time.Duration,com.azure.core.util.Context)"
- "com.azure.storage.blob.specialized.BlobClientBase.setMetadata(java.util.Map<java.lang.String,java.lang.String>)"
- "com.azure.storage.blob.specialized.BlobClientBase.setMetadataWithResponse(java.util.Map<java.lang.String,java.lang.String>,com.azure.storage.blob.models.BlobRequestConditions,java.time.Duration,com.azure.core.util.Context)"
- "com.azure.storage.blob.specialized.BlobClientBase.setTags(java.util.Map<java.lang.String,java.lang.String>)"
- "com.azure.storage.blob.specialized.BlobClientBase.setTagsWithResponse(com.azure.storage.blob.options.BlobSetTagsOptions,java.time.Duration,com.azure.core.util.Context)"
- "com.azure.storage.blob.specialized.BlobClientBase.undelete()"
- "com.azure.storage.blob.specialized.BlobClientBase.undeleteWithResponse(java.time.Duration,com.azure.core.util.Context)"
- "java.lang.Object.clone()"
- "java.lang.Object.equals(java.lang.Object)"
- "java.lang.Object.finalize()"
- "java.lang.Object.getClass()"
- "java.lang.Object.hashCode()"
- "java.lang.Object.notify()"
- "java.lang.Object.notifyAll()"
- "java.lang.Object.toString()"
- "java.lang.Object.wait()"
- "java.lang.Object.wait(long)"
- "java.lang.Object.wait(long,int)"
syntax: "public final class AppendBlobClient extends BlobClientBase"
fields:
- uid: "com.azure.storage.blob.specialized.AppendBlobClient.MAX_APPEND_BLOCK_BYTES"
  fullName: "com.azure.storage.blob.specialized.AppendBlobClient.MAX_APPEND_BLOCK_BYTES"
  name: "MAX_APPEND_BLOCK_BYTES"
  nameWithType: "AppendBlobClient.MAX_APPEND_BLOCK_BYTES"
  summary: "Indicates the maximum number of bytes that can be sent in a call to append<wbr>Block."
  modifiers:
  - "static"
  - "final"
  field:
    value: "4194304"
    type: "<xref href=\"int?alt=int&text=int\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public static final int MAX_APPEND_BLOCK_BYTES"
  desc: "Indicates the maximum number of bytes that can be sent in a call to appendBlock."
- uid: "com.azure.storage.blob.specialized.AppendBlobClient.MAX_BLOCKS"
  fullName: "com.azure.storage.blob.specialized.AppendBlobClient.MAX_BLOCKS"
  name: "MAX_BLOCKS"
  nameWithType: "AppendBlobClient.MAX_BLOCKS"
  summary: "Indicates the maximum number of blocks allowed in an append blob."
  modifiers:
  - "static"
  - "final"
  field:
    value: "50000"
    type: "<xref href=\"int?alt=int&text=int\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public static final int MAX_BLOCKS"
  desc: "Indicates the maximum number of blocks allowed in an append blob."
methods:
- uid: "com.azure.storage.blob.specialized.AppendBlobClient.appendBlock(java.io.InputStream,long)"
  fullName: "com.azure.storage.blob.specialized.AppendBlobClient.appendBlock(InputStream data, long length)"
  name: "appendBlock(InputStream data, long length)"
  nameWithType: "AppendBlobClient.appendBlock(InputStream data, long length)"
  summary: "Commits a new block of data to the end of the existing append blob."
  parameters:
  - description: "The data to write to the blob. The data must be markable. This is in order to support retries. If\n the data is not markable, consider using <xref uid=\"com.azure.storage.blob.specialized.AppendBlobClient.getBlobOutputStream()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#getBlobOutputStream()\"></xref> and writing to the returned OutputStream.\n Alternatively, consider wrapping your data source in a <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"java.io.BufferedInputStream\"></xref> to add mark support."
    name: "data"
    type: "<xref href=\"java.io.InputStream?alt=java.io.InputStream&text=InputStream\" data-throw-if-not-resolved=\"False\" />"
  - description: "The exact length of the data. It is important that this value match precisely the length of the\n data emitted by the <code>Flux</code>."
    name: "length"
    type: "<xref href=\"long?alt=long&text=long\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public AppendBlobItem appendBlock(InputStream data, long length)"
  desc: "Commits a new block of data to the end of the existing append blob.\n\nNote that the data passed must be replayable if retries are enabled (the default). In other words, the `Flux` must produce the same data each time it is subscribed to.\n\n**Code Samples**\n\n```java\nSystem.out.printf(\"AppendBlob has %d committed blocks%n\",\n     client.appendBlock(data, length).getBlobCommittedBlockCount());\n```"
  returns:
    description: "The information of the append blob operation."
    type: "<xref href=\"com.azure.storage.blob.models.AppendBlobItem?alt=com.azure.storage.blob.models.AppendBlobItem&text=AppendBlobItem\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.blob.specialized.AppendBlobClient.appendBlockFromUrl(java.lang.String,com.azure.storage.blob.models.BlobRange)"
  fullName: "com.azure.storage.blob.specialized.AppendBlobClient.appendBlockFromUrl(String sourceUrl, BlobRange sourceRange)"
  name: "appendBlockFromUrl(String sourceUrl, BlobRange sourceRange)"
  nameWithType: "AppendBlobClient.appendBlockFromUrl(String sourceUrl, BlobRange sourceRange)"
  summary: "Commits a new block of data from another blob to the end of this append blob."
  parameters:
  - description: "The url to the blob that will be the source of the copy.  A source blob in the same storage\n account can be authenticated via Shared Key. However, if the source is a blob in another account, the source blob\n must either be public or must be authenticated via a shared access signature. If the source blob is public, no\n authentication is required to perform the operation."
    name: "sourceUrl"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The source <xref uid=\"com.azure.storage.blob.models.BlobRange\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BlobRange\"></xref> to copy."
    name: "sourceRange"
    type: "<xref href=\"com.azure.storage.blob.models.BlobRange?alt=com.azure.storage.blob.models.BlobRange&text=BlobRange\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public AppendBlobItem appendBlockFromUrl(String sourceUrl, BlobRange sourceRange)"
  desc: "Commits a new block of data from another blob to the end of this append blob.\n\n**Code Samples**\n\n```java\nSystem.out.printf(\"AppendBlob has %d committed blocks%n\",\n     client.appendBlockFromUrl(sourceUrl, new BlobRange(offset, count)).getBlobCommittedBlockCount());\n```"
  returns:
    description: "The information of the append blob operation."
    type: "<xref href=\"com.azure.storage.blob.models.AppendBlobItem?alt=com.azure.storage.blob.models.AppendBlobItem&text=AppendBlobItem\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.blob.specialized.AppendBlobClient.appendBlockFromUrlWithResponse(com.azure.storage.blob.options.AppendBlobAppendBlockFromUrlOptions,java.time.Duration,com.azure.core.util.Context)"
  fullName: "com.azure.storage.blob.specialized.AppendBlobClient.appendBlockFromUrlWithResponse(AppendBlobAppendBlockFromUrlOptions options, Duration timeout, Context context)"
  name: "appendBlockFromUrlWithResponse(AppendBlobAppendBlockFromUrlOptions options, Duration timeout, Context context)"
  nameWithType: "AppendBlobClient.appendBlockFromUrlWithResponse(AppendBlobAppendBlockFromUrlOptions options, Duration timeout, Context context)"
  summary: "Commits a new block of data from another blob to the end of this append blob."
  parameters:
  - description: "options for the operation"
    name: "options"
    type: "<xref href=\"com.azure.storage.blob.options.AppendBlobAppendBlockFromUrlOptions?alt=com.azure.storage.blob.options.AppendBlobAppendBlockFromUrlOptions&text=AppendBlobAppendBlockFromUrlOptions\" data-throw-if-not-resolved=\"False\" />"
  - description: "An optional timeout value beyond which a <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RuntimeException\"></xref> will be raised."
    name: "timeout"
    type: "<xref href=\"java.time.Duration?alt=java.time.Duration&text=Duration\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional context that is passed through the Http pipeline during the service call."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<AppendBlobItem> appendBlockFromUrlWithResponse(AppendBlobAppendBlockFromUrlOptions options, Duration timeout, Context context)"
  desc: "Commits a new block of data from another blob to the end of this append blob.\n\n**Code Samples**\n\n```java\nAppendBlobRequestConditions appendBlobRequestConditions = new AppendBlobRequestConditions()\n     .setAppendPosition(POSITION)\n     .setMaxSize(maxSize);\n\n BlobRequestConditions modifiedRequestConditions = new BlobRequestConditions()\n     .setIfUnmodifiedSince(OffsetDateTime.now().minusDays(3));\n\n Context context = new Context(\"key\", \"value\");\n\n System.out.printf(\"AppendBlob has %d committed blocks%n\",\n     client.appendBlockFromUrlWithResponse(new AppendBlobAppendBlockFromUrlOptions(sourceUrl)\n         .setSourceRange(new BlobRange(offset, count))\n         .setDestinationRequestConditions(appendBlobRequestConditions)\n         .setSourceRequestConditions(modifiedRequestConditions), timeout,\n         context).getValue().getBlobCommittedBlockCount());\n```"
  returns:
    description: "The information of the append blob operation."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.blob.models.AppendBlobItem?alt=com.azure.storage.blob.models.AppendBlobItem&text=AppendBlobItem\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.blob.specialized.AppendBlobClient.appendBlockFromUrlWithResponse(java.lang.String,com.azure.storage.blob.models.BlobRange,byte[],com.azure.storage.blob.models.AppendBlobRequestConditions,com.azure.storage.blob.models.BlobRequestConditions,java.time.Duration,com.azure.core.util.Context)"
  fullName: "com.azure.storage.blob.specialized.AppendBlobClient.appendBlockFromUrlWithResponse(String sourceUrl, BlobRange sourceRange, byte[] sourceContentMd5, AppendBlobRequestConditions destRequestConditions, BlobRequestConditions sourceRequestConditions, Duration timeout, Context context)"
  name: "appendBlockFromUrlWithResponse(String sourceUrl, BlobRange sourceRange, byte[] sourceContentMd5, AppendBlobRequestConditions destRequestConditions, BlobRequestConditions sourceRequestConditions, Duration timeout, Context context)"
  nameWithType: "AppendBlobClient.appendBlockFromUrlWithResponse(String sourceUrl, BlobRange sourceRange, byte[] sourceContentMd5, AppendBlobRequestConditions destRequestConditions, BlobRequestConditions sourceRequestConditions, Duration timeout, Context context)"
  summary: "Commits a new block of data from another blob to the end of this append blob."
  parameters:
  - description: "The url to the blob that will be the source of the copy.  A source blob in the same storage\n account can be authenticated via Shared Key. However, if the source is a blob in another account, the source blob\n must either be public or must be authenticated via a shared access signature. If the source blob is public, no\n authentication is required to perform the operation."
    name: "sourceUrl"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "<xref uid=\"com.azure.storage.blob.models.BlobRange\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BlobRange\"></xref>"
    name: "sourceRange"
    type: "<xref href=\"com.azure.storage.blob.models.BlobRange?alt=com.azure.storage.blob.models.BlobRange&text=BlobRange\" data-throw-if-not-resolved=\"False\" />"
  - description: "An MD5 hash of the block content from the source blob. If specified, the service will\n calculate the MD5 of the received data and fail the request if it does not match the provided MD5."
    name: "sourceContentMd5"
    type: "<xref href=\"byte?alt=byte&text=byte\" data-throw-if-not-resolved=\"False\" />[]"
  - description: "<xref uid=\"com.azure.storage.blob.models.AppendBlobRequestConditions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"AppendBlobRequestConditions\"></xref>"
    name: "destRequestConditions"
    type: "<xref href=\"com.azure.storage.blob.models.AppendBlobRequestConditions?alt=com.azure.storage.blob.models.AppendBlobRequestConditions&text=AppendBlobRequestConditions\" data-throw-if-not-resolved=\"False\" />"
  - description: "<xref uid=\"com.azure.storage.blob.models.BlobRequestConditions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BlobRequestConditions\"></xref>"
    name: "sourceRequestConditions"
    type: "<xref href=\"com.azure.storage.blob.models.BlobRequestConditions?alt=com.azure.storage.blob.models.BlobRequestConditions&text=BlobRequestConditions\" data-throw-if-not-resolved=\"False\" />"
  - description: "An optional timeout value beyond which a <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RuntimeException\"></xref> will be raised."
    name: "timeout"
    type: "<xref href=\"java.time.Duration?alt=java.time.Duration&text=Duration\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional context that is passed through the Http pipeline during the service call."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<AppendBlobItem> appendBlockFromUrlWithResponse(String sourceUrl, BlobRange sourceRange, byte[] sourceContentMd5, AppendBlobRequestConditions destRequestConditions, BlobRequestConditions sourceRequestConditions, Duration timeout, Context context)"
  desc: "Commits a new block of data from another blob to the end of this append blob.\n\n**Code Samples**\n\n```java\nAppendBlobRequestConditions appendBlobRequestConditions = new AppendBlobRequestConditions()\n     .setAppendPosition(POSITION)\n     .setMaxSize(maxSize);\n\n BlobRequestConditions modifiedRequestConditions = new BlobRequestConditions()\n     .setIfUnmodifiedSince(OffsetDateTime.now().minusDays(3));\n\n Context context = new Context(\"key\", \"value\");\n\n System.out.printf(\"AppendBlob has %d committed blocks%n\",\n     client.appendBlockFromUrlWithResponse(sourceUrl, new BlobRange(offset, count), null,\n         appendBlobRequestConditions, modifiedRequestConditions, timeout,\n         context).getValue().getBlobCommittedBlockCount());\n```"
  returns:
    description: "The information of the append blob operation."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.blob.models.AppendBlobItem?alt=com.azure.storage.blob.models.AppendBlobItem&text=AppendBlobItem\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.blob.specialized.AppendBlobClient.appendBlockWithResponse(java.io.InputStream,long,byte[],com.azure.storage.blob.models.AppendBlobRequestConditions,java.time.Duration,com.azure.core.util.Context)"
  fullName: "com.azure.storage.blob.specialized.AppendBlobClient.appendBlockWithResponse(InputStream data, long length, byte[] contentMd5, AppendBlobRequestConditions appendBlobRequestConditions, Duration timeout, Context context)"
  name: "appendBlockWithResponse(InputStream data, long length, byte[] contentMd5, AppendBlobRequestConditions appendBlobRequestConditions, Duration timeout, Context context)"
  nameWithType: "AppendBlobClient.appendBlockWithResponse(InputStream data, long length, byte[] contentMd5, AppendBlobRequestConditions appendBlobRequestConditions, Duration timeout, Context context)"
  summary: "Commits a new block of data to the end of the existing append blob."
  parameters:
  - description: "The data to write to the blob. The data must be markable. This is in order to support retries. If\n the data is not markable, consider using <xref uid=\"com.azure.storage.blob.specialized.AppendBlobClient.getBlobOutputStream()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#getBlobOutputStream()\"></xref> and writing to the returned OutputStream.\n Alternatively, consider wrapping your data source in a <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"java.io.BufferedInputStream\"></xref> to add mark support."
    name: "data"
    type: "<xref href=\"java.io.InputStream?alt=java.io.InputStream&text=InputStream\" data-throw-if-not-resolved=\"False\" />"
  - description: "The exact length of the data. It is important that this value match precisely the length of the\n data emitted by the <code>Flux</code>."
    name: "length"
    type: "<xref href=\"long?alt=long&text=long\" data-throw-if-not-resolved=\"False\" />"
  - description: "An MD5 hash of the block content. This hash is used to verify the integrity of the block during\n transport. When this header is specified, the storage service compares the hash of the content that has arrived\n with this header value. Note that this MD5 hash is not stored with the blob. If the two hashes do not match, the\n operation will fail."
    name: "contentMd5"
    type: "<xref href=\"byte?alt=byte&text=byte\" data-throw-if-not-resolved=\"False\" />[]"
  - description: "<xref uid=\"com.azure.storage.blob.models.AppendBlobRequestConditions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"AppendBlobRequestConditions\"></xref>"
    name: "appendBlobRequestConditions"
    type: "<xref href=\"com.azure.storage.blob.models.AppendBlobRequestConditions?alt=com.azure.storage.blob.models.AppendBlobRequestConditions&text=AppendBlobRequestConditions\" data-throw-if-not-resolved=\"False\" />"
  - description: "An optional timeout value beyond which a <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RuntimeException\"></xref> will be raised."
    name: "timeout"
    type: "<xref href=\"java.time.Duration?alt=java.time.Duration&text=Duration\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional context that is passed through the Http pipeline during the service call."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<AppendBlobItem> appendBlockWithResponse(InputStream data, long length, byte[] contentMd5, AppendBlobRequestConditions appendBlobRequestConditions, Duration timeout, Context context)"
  desc: "Commits a new block of data to the end of the existing append blob.\n\nNote that the data passed must be replayable if retries are enabled (the default). In other words, the `Flux` must produce the same data each time it is subscribed to.\n\n**Code Samples**\n\n```java\nbyte[] md5 = MessageDigest.getInstance(\"MD5\").digest(\"data\".getBytes(StandardCharsets.UTF_8));\n AppendBlobRequestConditions requestConditions = new AppendBlobRequestConditions()\n     .setAppendPosition(POSITION)\n     .setMaxSize(maxSize);\n Context context = new Context(\"key\", \"value\");\n\n System.out.printf(\"AppendBlob has %d committed blocks%n\",\n     client.appendBlockWithResponse(data, length, md5, requestConditions, timeout, context)\n         .getValue().getBlobCommittedBlockCount());\n```"
  returns:
    description: "A <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> whose <xref uid=\"com.azure.core.http.rest.Response.getValue*\" data-throw-if-not-resolved=\"false\" data-raw-source=\"value\"></xref> contains the append blob operation."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.blob.models.AppendBlobItem?alt=com.azure.storage.blob.models.AppendBlobItem&text=AppendBlobItem\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.blob.specialized.AppendBlobClient.create()"
  fullName: "com.azure.storage.blob.specialized.AppendBlobClient.create()"
  name: "create()"
  nameWithType: "AppendBlobClient.create()"
  summary: "Creates a 0-length append blob."
  syntax: "public AppendBlobItem create()"
  desc: "Creates a 0-length append blob. Call appendBlock to append data to an append blob. By default this method will not overwrite an existing blob.\n\n**Code Samples**\n\n```java\nSystem.out.printf(\"Created AppendBlob at %s%n\", client.create().getLastModified());\n```"
  returns:
    description: "The information of the created appended blob."
    type: "<xref href=\"com.azure.storage.blob.models.AppendBlobItem?alt=com.azure.storage.blob.models.AppendBlobItem&text=AppendBlobItem\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.blob.specialized.AppendBlobClient.create(boolean)"
  fullName: "com.azure.storage.blob.specialized.AppendBlobClient.create(boolean overwrite)"
  name: "create(boolean overwrite)"
  nameWithType: "AppendBlobClient.create(boolean overwrite)"
  summary: "Creates a 0-length append blob."
  parameters:
  - description: "Whether or not to overwrite, should data exist on the blob."
    name: "overwrite"
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public AppendBlobItem create(boolean overwrite)"
  desc: "Creates a 0-length append blob. Call appendBlock to append data to an append blob.\n\n**Code Samples**\n\n```java\nboolean overwrite = false; // Default value\n System.out.printf(\"Created AppendBlob at %s%n\", client.create(overwrite).getLastModified());\n```"
  returns:
    description: "The information of the created appended blob."
    type: "<xref href=\"com.azure.storage.blob.models.AppendBlobItem?alt=com.azure.storage.blob.models.AppendBlobItem&text=AppendBlobItem\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.blob.specialized.AppendBlobClient.createIfNotExists()"
  fullName: "com.azure.storage.blob.specialized.AppendBlobClient.createIfNotExists()"
  name: "createIfNotExists()"
  nameWithType: "AppendBlobClient.createIfNotExists()"
  summary: "Creates a 0-length append blob if it does not exist."
  syntax: "public AppendBlobItem createIfNotExists()"
  desc: "Creates a 0-length append blob if it does not exist. Call appendBlock to append data to an append blob.\n\n**Code Samples**\n\n```java\nclient.createIfNotExists();\n System.out.println(\"Created AppendBlob\");\n```"
  returns:
    description: "<xref uid=\"com.azure.storage.blob.models.AppendBlobItem\" data-throw-if-not-resolved=\"false\" data-raw-source=\"AppendBlobItem\"></xref> containing information of the created appended blob."
    type: "<xref href=\"com.azure.storage.blob.models.AppendBlobItem?alt=com.azure.storage.blob.models.AppendBlobItem&text=AppendBlobItem\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.blob.specialized.AppendBlobClient.createIfNotExistsWithResponse(com.azure.storage.blob.options.AppendBlobCreateOptions,java.time.Duration,com.azure.core.util.Context)"
  fullName: "com.azure.storage.blob.specialized.AppendBlobClient.createIfNotExistsWithResponse(AppendBlobCreateOptions options, Duration timeout, Context context)"
  name: "createIfNotExistsWithResponse(AppendBlobCreateOptions options, Duration timeout, Context context)"
  nameWithType: "AppendBlobClient.createIfNotExistsWithResponse(AppendBlobCreateOptions options, Duration timeout, Context context)"
  summary: "Creates a 0-length append blob if it does not exist."
  parameters:
  - description: "<xref uid=\"com.azure.storage.blob.options.AppendBlobCreateOptions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"AppendBlobCreateOptions\"></xref>"
    name: "options"
    type: "<xref href=\"com.azure.storage.blob.options.AppendBlobCreateOptions?alt=com.azure.storage.blob.options.AppendBlobCreateOptions&text=AppendBlobCreateOptions\" data-throw-if-not-resolved=\"False\" />"
  - description: "An optional timeout value beyond which a <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RuntimeException\"></xref> will be raised."
    name: "timeout"
    type: "<xref href=\"java.time.Duration?alt=java.time.Duration&text=Duration\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional context that is passed through the Http pipeline during the service call."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<AppendBlobItem> createIfNotExistsWithResponse(AppendBlobCreateOptions options, Duration timeout, Context context)"
  desc: "Creates a 0-length append blob if it does not exist. Call appendBlock to append data to an append blob.\n\n**Code Samples**\n\n```java\nBlobHttpHeaders headers = new BlobHttpHeaders()\n     .setContentType(\"binary\")\n     .setContentLanguage(\"en-US\");\n Map<String, String> metadata = Collections.singletonMap(\"metadata\", \"value\");\n Map<String, String> tags = Collections.singletonMap(\"tags\", \"value\");\n Context context = new Context(\"key\", \"value\");\n\n Response<AppendBlobItem> response = client.createIfNotExistsWithResponse(new AppendBlobCreateOptions()\n     .setHeaders(headers).setMetadata(metadata).setTags(tags), timeout, context);\n if (response.getStatusCode() == 409) {\n     System.out.println(\"Already existed.\");\n } else {\n     System.out.printf(\"Create completed with status %d%n\", response.getStatusCode());\n }\n```"
  returns:
    description: "A reactive response <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> signaling completion, whose <xref uid=\"com.azure.core.http.rest.Response.getValue*\" data-throw-if-not-resolved=\"false\" data-raw-source=\"value\"></xref>\n contains the <xref uid=\"com.azure.storage.blob.models.AppendBlobItem\" data-throw-if-not-resolved=\"false\" data-raw-source=\"AppendBlobItem\"></xref> containing information about the append blob. If <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref>'s status\n code is 201, a new append blob was successfully created. If status code is 409, an append blob already existed at\n this location."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.blob.models.AppendBlobItem?alt=com.azure.storage.blob.models.AppendBlobItem&text=AppendBlobItem\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.blob.specialized.AppendBlobClient.createWithResponse(com.azure.storage.blob.models.BlobHttpHeaders,java.util.Map<java.lang.String,java.lang.String>,com.azure.storage.blob.models.BlobRequestConditions,java.time.Duration,com.azure.core.util.Context)"
  fullName: "com.azure.storage.blob.specialized.AppendBlobClient.createWithResponse(BlobHttpHeaders headers, Map<String,String> metadata, BlobRequestConditions requestConditions, Duration timeout, Context context)"
  name: "createWithResponse(BlobHttpHeaders headers, Map<String,String> metadata, BlobRequestConditions requestConditions, Duration timeout, Context context)"
  nameWithType: "AppendBlobClient.createWithResponse(BlobHttpHeaders headers, Map<String,String> metadata, BlobRequestConditions requestConditions, Duration timeout, Context context)"
  summary: "Creates a 0-length append blob."
  parameters:
  - description: "<xref uid=\"com.azure.storage.blob.models.BlobHttpHeaders\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BlobHttpHeaders\"></xref>"
    name: "headers"
    type: "<xref href=\"com.azure.storage.blob.models.BlobHttpHeaders?alt=com.azure.storage.blob.models.BlobHttpHeaders&text=BlobHttpHeaders\" data-throw-if-not-resolved=\"False\" />"
  - description: "Metadata to associate with the blob. If there is leading or trailing whitespace in any\n metadata key or value, it must be removed or encoded."
    name: "metadata"
    type: "<xref href=\"java.util.Map?alt=java.util.Map&text=Map\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />,<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />&gt;"
  - description: "<xref uid=\"com.azure.storage.blob.models.BlobRequestConditions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BlobRequestConditions\"></xref>"
    name: "requestConditions"
    type: "<xref href=\"com.azure.storage.blob.models.BlobRequestConditions?alt=com.azure.storage.blob.models.BlobRequestConditions&text=BlobRequestConditions\" data-throw-if-not-resolved=\"False\" />"
  - description: "An optional timeout value beyond which a <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RuntimeException\"></xref> will be raised."
    name: "timeout"
    type: "<xref href=\"java.time.Duration?alt=java.time.Duration&text=Duration\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional context that is passed through the Http pipeline during the service call."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<AppendBlobItem> createWithResponse(BlobHttpHeaders headers, Map<String,String> metadata, BlobRequestConditions requestConditions, Duration timeout, Context context)"
  desc: "Creates a 0-length append blob. Call appendBlock to append data to an append blob.\n\nTo avoid overwriting, pass \"\\*\" to <xref uid=\"com.azure.storage.blob.models.BlobRequestConditions.setIfNoneMatch(java.lang.String)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BlobRequestConditions#setIfNoneMatch(String)\"></xref>.\n\n**Code Samples**\n\n```java\nBlobHttpHeaders headers = new BlobHttpHeaders()\n     .setContentType(\"binary\")\n     .setContentLanguage(\"en-US\");\n Map<String, String> metadata = Collections.singletonMap(\"metadata\", \"value\");\n BlobRequestConditions requestConditions = new BlobRequestConditions()\n     .setLeaseId(leaseId)\n     .setIfUnmodifiedSince(OffsetDateTime.now().minusDays(3));\n Context context = new Context(\"key\", \"value\");\n\n System.out.printf(\"Created AppendBlob at %s%n\",\n     client.createWithResponse(headers, metadata, requestConditions, timeout, context).getValue()\n         .getLastModified());\n```"
  returns:
    description: "A <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> whose <xref uid=\"com.azure.core.http.rest.Response.getValue*\" data-throw-if-not-resolved=\"false\" data-raw-source=\"value\"></xref> contains the created appended blob."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.blob.models.AppendBlobItem?alt=com.azure.storage.blob.models.AppendBlobItem&text=AppendBlobItem\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.blob.specialized.AppendBlobClient.createWithResponse(com.azure.storage.blob.options.AppendBlobCreateOptions,java.time.Duration,com.azure.core.util.Context)"
  fullName: "com.azure.storage.blob.specialized.AppendBlobClient.createWithResponse(AppendBlobCreateOptions options, Duration timeout, Context context)"
  name: "createWithResponse(AppendBlobCreateOptions options, Duration timeout, Context context)"
  nameWithType: "AppendBlobClient.createWithResponse(AppendBlobCreateOptions options, Duration timeout, Context context)"
  summary: "Creates a 0-length append blob."
  parameters:
  - description: "<xref uid=\"com.azure.storage.blob.options.AppendBlobCreateOptions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"AppendBlobCreateOptions\"></xref>"
    name: "options"
    type: "<xref href=\"com.azure.storage.blob.options.AppendBlobCreateOptions?alt=com.azure.storage.blob.options.AppendBlobCreateOptions&text=AppendBlobCreateOptions\" data-throw-if-not-resolved=\"False\" />"
  - description: "An optional timeout value beyond which a <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RuntimeException\"></xref> will be raised."
    name: "timeout"
    type: "<xref href=\"java.time.Duration?alt=java.time.Duration&text=Duration\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional context that is passed through the Http pipeline during the service call."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<AppendBlobItem> createWithResponse(AppendBlobCreateOptions options, Duration timeout, Context context)"
  desc: "Creates a 0-length append blob. Call appendBlock to append data to an append blob.\n\nTo avoid overwriting, pass \"\\*\" to <xref uid=\"com.azure.storage.blob.models.BlobRequestConditions.setIfNoneMatch(java.lang.String)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BlobRequestConditions#setIfNoneMatch(String)\"></xref>.\n\n**Code Samples**\n\n```java\nBlobHttpHeaders headers = new BlobHttpHeaders()\n     .setContentType(\"binary\")\n     .setContentLanguage(\"en-US\");\n Map<String, String> metadata = Collections.singletonMap(\"metadata\", \"value\");\n Map<String, String> tags = Collections.singletonMap(\"tags\", \"value\");\n BlobRequestConditions requestConditions = new BlobRequestConditions()\n     .setIfUnmodifiedSince(OffsetDateTime.now().minusDays(3));\n Context context = new Context(\"key\", \"value\");\n\n System.out.printf(\"Created AppendBlob at %s%n\",\n     client.createWithResponse(new AppendBlobCreateOptions().setHeaders(headers).setMetadata(metadata)\n         .setTags(tags).setRequestConditions(requestConditions), timeout, context).getValue()\n         .getLastModified());\n```"
  returns:
    description: "A <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> whose <xref uid=\"com.azure.core.http.rest.Response.getValue*\" data-throw-if-not-resolved=\"false\" data-raw-source=\"value\"></xref> contains the created appended blob."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.blob.models.AppendBlobItem?alt=com.azure.storage.blob.models.AppendBlobItem&text=AppendBlobItem\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.blob.specialized.AppendBlobClient.getBlobOutputStream()"
  fullName: "com.azure.storage.blob.specialized.AppendBlobClient.getBlobOutputStream()"
  name: "getBlobOutputStream()"
  nameWithType: "AppendBlobClient.getBlobOutputStream()"
  summary: "Creates and opens an output stream to write data to the append blob."
  syntax: "public BlobOutputStream getBlobOutputStream()"
  desc: "Creates and opens an output stream to write data to the append blob. If the blob already exists on the service, it will be overwritten."
  returns:
    description: "A <xref uid=\"com.azure.storage.blob.specialized.BlobOutputStream\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BlobOutputStream\"></xref> object used to write data to the blob."
    type: "<xref href=\"com.azure.storage.blob.specialized.BlobOutputStream?alt=com.azure.storage.blob.specialized.BlobOutputStream&text=BlobOutputStream\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.blob.specialized.AppendBlobClient.getBlobOutputStream(com.azure.storage.blob.models.AppendBlobRequestConditions)"
  fullName: "com.azure.storage.blob.specialized.AppendBlobClient.getBlobOutputStream(AppendBlobRequestConditions requestConditions)"
  name: "getBlobOutputStream(AppendBlobRequestConditions requestConditions)"
  nameWithType: "AppendBlobClient.getBlobOutputStream(AppendBlobRequestConditions requestConditions)"
  summary: "Creates and opens an output stream to write data to the append blob."
  parameters:
  - description: "A <xref uid=\"com.azure.storage.blob.models.BlobRequestConditions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BlobRequestConditions\"></xref> object that represents the access conditions for the\n blob."
    name: "requestConditions"
    type: "<xref href=\"com.azure.storage.blob.models.AppendBlobRequestConditions?alt=com.azure.storage.blob.models.AppendBlobRequestConditions&text=AppendBlobRequestConditions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public BlobOutputStream getBlobOutputStream(AppendBlobRequestConditions requestConditions)"
  desc: "Creates and opens an output stream to write data to the append blob. If the blob already exists on the service, it will be overwritten."
  returns:
    description: "A <xref uid=\"com.azure.storage.blob.specialized.BlobOutputStream\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BlobOutputStream\"></xref> object used to write data to the blob."
    type: "<xref href=\"com.azure.storage.blob.specialized.BlobOutputStream?alt=com.azure.storage.blob.specialized.BlobOutputStream&text=BlobOutputStream\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.blob.specialized.AppendBlobClient.getCustomerProvidedKeyClient(com.azure.storage.blob.models.CustomerProvidedKey)"
  fullName: "com.azure.storage.blob.specialized.AppendBlobClient.getCustomerProvidedKeyClient(CustomerProvidedKey customerProvidedKey)"
  name: "getCustomerProvidedKeyClient(CustomerProvidedKey customerProvidedKey)"
  nameWithType: "AppendBlobClient.getCustomerProvidedKeyClient(CustomerProvidedKey customerProvidedKey)"
  summary: "Creates a new <xref uid=\"com.azure.storage.blob.specialized.AppendBlobClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"AppendBlobClient\"></xref> with the specified `customerProvidedKey`."
  overridden: "com.azure.storage.blob.specialized.BlobClientBase.getCustomerProvidedKeyClient(com.azure.storage.blob.models.CustomerProvidedKey)"
  parameters:
  - description: "the <xref uid=\"com.azure.storage.blob.models.CustomerProvidedKey\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CustomerProvidedKey\"></xref> for the blob,\n pass <code>null</code> to use no customer provided key."
    name: "customerProvidedKey"
    type: "<xref href=\"com.azure.storage.blob.models.CustomerProvidedKey?alt=com.azure.storage.blob.models.CustomerProvidedKey&text=CustomerProvidedKey\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public AppendBlobClient getCustomerProvidedKeyClient(CustomerProvidedKey customerProvidedKey)"
  desc: "Creates a new <xref uid=\"com.azure.storage.blob.specialized.AppendBlobClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"AppendBlobClient\"></xref> with the specified `customerProvidedKey`."
  returns:
    description: "a <xref uid=\"com.azure.storage.blob.specialized.AppendBlobClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"AppendBlobClient\"></xref> with the specified <code>customerProvidedKey</code>."
    type: "<xref href=\"com.azure.storage.blob.specialized.AppendBlobClient?alt=com.azure.storage.blob.specialized.AppendBlobClient&text=AppendBlobClient\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.blob.specialized.AppendBlobClient.getEncryptionScopeClient(java.lang.String)"
  fullName: "com.azure.storage.blob.specialized.AppendBlobClient.getEncryptionScopeClient(String encryptionScope)"
  name: "getEncryptionScopeClient(String encryptionScope)"
  nameWithType: "AppendBlobClient.getEncryptionScopeClient(String encryptionScope)"
  summary: "Creates a new <xref uid=\"com.azure.storage.blob.specialized.AppendBlobClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"AppendBlobClient\"></xref> with the specified `encryptionScope`."
  overridden: "com.azure.storage.blob.specialized.BlobClientBase.getEncryptionScopeClient(java.lang.String)"
  parameters:
  - description: "the encryption scope for the blob, pass <code>null</code> to use no encryption scope."
    name: "encryptionScope"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public AppendBlobClient getEncryptionScopeClient(String encryptionScope)"
  desc: "Creates a new <xref uid=\"com.azure.storage.blob.specialized.AppendBlobClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"AppendBlobClient\"></xref> with the specified `encryptionScope`."
  returns:
    description: "a <xref uid=\"com.azure.storage.blob.specialized.AppendBlobClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"AppendBlobClient\"></xref> with the specified <code>encryptionScope</code>."
    type: "<xref href=\"com.azure.storage.blob.specialized.AppendBlobClient?alt=com.azure.storage.blob.specialized.AppendBlobClient&text=AppendBlobClient\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.blob.specialized.AppendBlobClient.seal()"
  fullName: "com.azure.storage.blob.specialized.AppendBlobClient.seal()"
  name: "seal()"
  nameWithType: "AppendBlobClient.seal()"
  summary: "Seals an append blob, making it read only."
  syntax: "public void seal()"
  desc: "Seals an append blob, making it read only. Any subsequent appends will fail.\n\n**Code Samples**\n\n```java\nclient.seal();\n System.out.println(\"Sealed AppendBlob\");\n```"
- uid: "com.azure.storage.blob.specialized.AppendBlobClient.sealWithResponse(com.azure.storage.blob.options.AppendBlobSealOptions,java.time.Duration,com.azure.core.util.Context)"
  fullName: "com.azure.storage.blob.specialized.AppendBlobClient.sealWithResponse(AppendBlobSealOptions options, Duration timeout, Context context)"
  name: "sealWithResponse(AppendBlobSealOptions options, Duration timeout, Context context)"
  nameWithType: "AppendBlobClient.sealWithResponse(AppendBlobSealOptions options, Duration timeout, Context context)"
  summary: "Seals an append blob, making it read only."
  parameters:
  - description: "<xref uid=\"com.azure.storage.blob.options.AppendBlobSealOptions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"AppendBlobSealOptions\"></xref>"
    name: "options"
    type: "<xref href=\"com.azure.storage.blob.options.AppendBlobSealOptions?alt=com.azure.storage.blob.options.AppendBlobSealOptions&text=AppendBlobSealOptions\" data-throw-if-not-resolved=\"False\" />"
  - description: "An optional timeout value beyond which a <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RuntimeException\"></xref> will be raised."
    name: "timeout"
    type: "<xref href=\"java.time.Duration?alt=java.time.Duration&text=Duration\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional context that is passed through the Http pipeline during the service call."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<Void> sealWithResponse(AppendBlobSealOptions options, Duration timeout, Context context)"
  desc: "Seals an append blob, making it read only. Any subsequent appends will fail.\n\n**Code Samples**\n\n```java\nAppendBlobRequestConditions requestConditions = new AppendBlobRequestConditions().setLeaseId(leaseId)\n     .setIfUnmodifiedSince(OffsetDateTime.now().minusDays(3));\n Context context = new Context(\"key\", \"value\");\n\n client.sealWithResponse(new AppendBlobSealOptions().setRequestConditions(requestConditions), timeout, context);\n System.out.println(\"Sealed AppendBlob\");\n```"
  returns:
    description: "A reactive response signalling completion."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
type: "class"
desc: "Client to an append blob. It may only be instantiated through a <xref uid=\"com.azure.storage.blob.specialized.SpecializedBlobClientBuilder\" data-throw-if-not-resolved=\"false\" data-raw-source=\"SpecializedBlobClientBuilder\"></xref> or via the method <xref uid=\"com.azure.storage.blob.BlobClient.getAppendBlobClient()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BlobClient#getAppendBlobClient()\"></xref>. This class does not hold any state about a particular blob, but is instead a convenient way of sending appropriate requests to the resource on the service.\n\nThis client contains operations on a blob. Operations on a container are available on <xref uid=\"com.azure.storage.blob.BlobContainerClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BlobContainerClient\"></xref>, and operations on the service are available on <xref uid=\"com.azure.storage.blob.BlobServiceClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BlobServiceClient\"></xref>.\n\nPlease refer to the [Azure Docs][] for more information.\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/understanding-block-blobs--append-blobs--and-page-blobs"
metadata: {}
package: "com.azure.storage.blob.specialized"
artifact: com.azure:azure-storage-blob:12.18.0-beta.1
