### YamlMime:ManagedReference
items:
- uid: com.azure.data.tables.TableClient
  id: TableClient
  artifact: com.azure:azure-data-tables:12.0.0-beta.3
  parent: com.azure.data.tables
  children:
  - com.azure.data.tables.TableClient.<T>getEntity(java.lang.String,java.lang.String,java.lang.Class<T>)
  - com.azure.data.tables.TableClient.<T>getEntity(java.lang.String,java.lang.String,java.lang.String,java.lang.Class<T>)
  - com.azure.data.tables.TableClient.<T>getEntity(java.lang.String,java.lang.String,java.lang.String,java.lang.Class<T>,java.time.Duration)
  - com.azure.data.tables.TableClient.<T>getEntityWithResponse(java.lang.String,java.lang.String,java.lang.String,java.lang.Class<T>,java.time.Duration,com.azure.core.util.Context)
  - com.azure.data.tables.TableClient.<T>listEntities(com.azure.data.tables.models.ListEntitiesOptions,java.lang.Class<T>)
  - com.azure.data.tables.TableClient.<T>listEntities(java.lang.Class<T>)
  - com.azure.data.tables.TableClient.create()
  - com.azure.data.tables.TableClient.create(java.time.Duration)
  - com.azure.data.tables.TableClient.createBatch(java.lang.String)
  - com.azure.data.tables.TableClient.createEntity(com.azure.data.tables.models.TableEntity)
  - com.azure.data.tables.TableClient.createEntity(com.azure.data.tables.models.TableEntity,java.time.Duration)
  - com.azure.data.tables.TableClient.createEntityWithResponse(com.azure.data.tables.models.TableEntity,java.time.Duration,com.azure.core.util.Context)
  - com.azure.data.tables.TableClient.createWithResponse(java.time.Duration,com.azure.core.util.Context)
  - com.azure.data.tables.TableClient.delete()
  - com.azure.data.tables.TableClient.delete(java.time.Duration)
  - com.azure.data.tables.TableClient.deleteEntity(java.lang.String,java.lang.String)
  - com.azure.data.tables.TableClient.deleteEntity(java.lang.String,java.lang.String,java.lang.String)
  - com.azure.data.tables.TableClient.deleteEntity(java.lang.String,java.lang.String,java.lang.String,java.time.Duration)
  - com.azure.data.tables.TableClient.deleteEntityWithResponse(java.lang.String,java.lang.String,java.lang.String,java.time.Duration,com.azure.core.util.Context)
  - com.azure.data.tables.TableClient.deleteWithResponse(java.time.Duration,com.azure.core.util.Context)
  - com.azure.data.tables.TableClient.getAccountName()
  - com.azure.data.tables.TableClient.getApiVersion()
  - com.azure.data.tables.TableClient.getEntity(java.lang.String,java.lang.String)
  - com.azure.data.tables.TableClient.getEntity(java.lang.String,java.lang.String,java.lang.String)
  - com.azure.data.tables.TableClient.getEntity(java.lang.String,java.lang.String,java.lang.String,java.time.Duration)
  - com.azure.data.tables.TableClient.getEntityWithResponse(java.lang.String,java.lang.String,java.lang.String,java.time.Duration,com.azure.core.util.Context)
  - com.azure.data.tables.TableClient.getTableName()
  - com.azure.data.tables.TableClient.getTableUrl()
  - com.azure.data.tables.TableClient.listEntities()
  - com.azure.data.tables.TableClient.listEntities(com.azure.data.tables.models.ListEntitiesOptions)
  - com.azure.data.tables.TableClient.updateEntity(com.azure.data.tables.models.TableEntity)
  - com.azure.data.tables.TableClient.updateEntity(com.azure.data.tables.models.TableEntity,com.azure.data.tables.models.UpdateMode)
  - com.azure.data.tables.TableClient.updateEntity(com.azure.data.tables.models.TableEntity,com.azure.data.tables.models.UpdateMode,boolean)
  - com.azure.data.tables.TableClient.updateEntity(com.azure.data.tables.models.TableEntity,com.azure.data.tables.models.UpdateMode,boolean,java.time.Duration)
  - com.azure.data.tables.TableClient.updateEntityWithResponse(com.azure.data.tables.models.TableEntity,com.azure.data.tables.models.UpdateMode,boolean,java.time.Duration,com.azure.core.util.Context)
  - com.azure.data.tables.TableClient.upsertEntity(com.azure.data.tables.models.TableEntity)
  - com.azure.data.tables.TableClient.upsertEntity(com.azure.data.tables.models.TableEntity,com.azure.data.tables.models.UpdateMode)
  - com.azure.data.tables.TableClient.upsertEntity(com.azure.data.tables.models.TableEntity,com.azure.data.tables.models.UpdateMode,java.time.Duration)
  - com.azure.data.tables.TableClient.upsertEntityWithResponse(com.azure.data.tables.models.TableEntity,com.azure.data.tables.models.UpdateMode,java.time.Duration,com.azure.core.util.Context)
  langs:
  - java
  name: TableClient
  nameWithType: TableClient
  fullName: com.azure.data.tables.TableClient
  type: Class
  package: com.azure.data.tables
  summary: Provides a synchronous service client for accessing a table in the Azure Tables service. The client encapsulates the URL for the table within the Tables service endpoint, the name of the table, and the credentials for accessing the storage or CosmosDB table API account. It provides methods to create and delete the table itself, as well as methods to create, upsert, update, delete, list, and get entities within the table. These methods invoke REST API operations to make the requests and obtain the results that are returned. Instances of this client are obtained by calling the <xref uid="com.azure.data.tables.TableClientBuilder.buildClient()" data-throw-if-not-resolved="false">TableClientBuilder#buildClient()</xref> method on a <xref uid="com.azure.data.tables.TableClientBuilder" data-throw-if-not-resolved="false">TableClientBuilder</xref> object.
  syntax:
    content: public class TableClient
  inheritance:
  - java.lang.Object
  inheritedMembers:
  - java.lang.Object.clone()
  - java.lang.Object.equals(java.lang.Object)
  - java.lang.Object.finalize()
  - java.lang.Object.getClass()
  - java.lang.Object.hashCode()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.toString()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
- uid: com.azure.data.tables.TableClient.<T>getEntity(java.lang.String,java.lang.String,java.lang.Class<T>)
  id: <T>getEntity(java.lang.String,java.lang.String,java.lang.Class<T>)
  artifact: com.azure:azure-data-tables:12.0.0-beta.3
  parent: com.azure.data.tables.TableClient
  langs:
  - java
  name: <T>getEntity(String partitionKey, String rowKey, Class<T> resultType)
  nameWithType: TableClient.<T>getEntity(String partitionKey, String rowKey, Class<T> resultType)
  fullName: com.azure.data.tables.TableClient.<T>getEntity(String partitionKey, String rowKey, Class<T> resultType)
  overload: com.azure.data.tables.TableClient.getEntity*
  type: Method
  package: com.azure.data.tables
  summary: Gets a single entity from the table.
  syntax:
    content: public T <T>getEntity(String partitionKey, String rowKey, Class<T> resultType)
    parameters:
    - id: partitionKey
      type: java.lang.String
      description: The partition key of the entity.
    - id: rowKey
      type: java.lang.String
      description: The partition key of the entity.
    - id: resultType
      type: java.lang.Class<T>
      description: The type of the result value, which must be a subclass of TableEntity.
    return:
      type: T
      description: The entity.
- uid: com.azure.data.tables.TableClient.<T>getEntity(java.lang.String,java.lang.String,java.lang.String,java.lang.Class<T>)
  id: <T>getEntity(java.lang.String,java.lang.String,java.lang.String,java.lang.Class<T>)
  artifact: com.azure:azure-data-tables:12.0.0-beta.3
  parent: com.azure.data.tables.TableClient
  langs:
  - java
  name: <T>getEntity(String partitionKey, String rowKey, String select, Class<T> resultType)
  nameWithType: TableClient.<T>getEntity(String partitionKey, String rowKey, String select, Class<T> resultType)
  fullName: com.azure.data.tables.TableClient.<T>getEntity(String partitionKey, String rowKey, String select, Class<T> resultType)
  overload: com.azure.data.tables.TableClient.getEntity*
  type: Method
  package: com.azure.data.tables
  summary: Gets a single entity from the table.
  syntax:
    content: public T <T>getEntity(String partitionKey, String rowKey, String select, Class<T> resultType)
    parameters:
    - id: partitionKey
      type: java.lang.String
      description: The partition key of the entity.
    - id: rowKey
      type: java.lang.String
      description: The partition key of the entity.
    - id: select
      type: java.lang.String
      description: An OData `select` expression to limit the set of properties included in the returned entity.
    - id: resultType
      type: java.lang.Class<T>
      description: The type of the result value, which must be a subclass of TableEntity.
    return:
      type: T
      description: The entity.
- uid: com.azure.data.tables.TableClient.<T>getEntity(java.lang.String,java.lang.String,java.lang.String,java.lang.Class<T>,java.time.Duration)
  id: <T>getEntity(java.lang.String,java.lang.String,java.lang.String,java.lang.Class<T>,java.time.Duration)
  artifact: com.azure:azure-data-tables:12.0.0-beta.3
  parent: com.azure.data.tables.TableClient
  langs:
  - java
  name: <T>getEntity(String partitionKey, String rowKey, String select, Class<T> resultType, Duration timeout)
  nameWithType: TableClient.<T>getEntity(String partitionKey, String rowKey, String select, Class<T> resultType, Duration timeout)
  fullName: com.azure.data.tables.TableClient.<T>getEntity(String partitionKey, String rowKey, String select, Class<T> resultType, Duration timeout)
  overload: com.azure.data.tables.TableClient.getEntity*
  type: Method
  package: com.azure.data.tables
  summary: Gets a single entity from the table.
  syntax:
    content: public T <T>getEntity(String partitionKey, String rowKey, String select, Class<T> resultType, Duration timeout)
    parameters:
    - id: partitionKey
      type: java.lang.String
      description: The partition key of the entity.
    - id: rowKey
      type: java.lang.String
      description: The partition key of the entity.
    - id: select
      type: java.lang.String
      description: An OData `select` expression to limit the set of properties included in the returned entity.
    - id: resultType
      type: java.lang.Class<T>
      description: The type of the result value, which must be a subclass of TableEntity.
    - id: timeout
      type: java.time.Duration
      description: Duration to wait for the operation to complete.
    return:
      type: T
      description: The entity.
- uid: com.azure.data.tables.TableClient.<T>getEntityWithResponse(java.lang.String,java.lang.String,java.lang.String,java.lang.Class<T>,java.time.Duration,com.azure.core.util.Context)
  id: <T>getEntityWithResponse(java.lang.String,java.lang.String,java.lang.String,java.lang.Class<T>,java.time.Duration,com.azure.core.util.Context)
  artifact: com.azure:azure-data-tables:12.0.0-beta.3
  parent: com.azure.data.tables.TableClient
  langs:
  - java
  name: <T>getEntityWithResponse(String partitionKey, String rowKey, String select, Class<T> resultType, Duration timeout, Context context)
  nameWithType: TableClient.<T>getEntityWithResponse(String partitionKey, String rowKey, String select, Class<T> resultType, Duration timeout, Context context)
  fullName: com.azure.data.tables.TableClient.<T>getEntityWithResponse(String partitionKey, String rowKey, String select, Class<T> resultType, Duration timeout, Context context)
  overload: com.azure.data.tables.TableClient.getEntityWithResponse*
  type: Method
  package: com.azure.data.tables
  summary: Gets a single entity from the table.
  syntax:
    content: public Response<T> <T>getEntityWithResponse(String partitionKey, String rowKey, String select, Class<T> resultType, Duration timeout, Context context)
    parameters:
    - id: partitionKey
      type: java.lang.String
      description: The partition key of the entity.
    - id: rowKey
      type: java.lang.String
      description: The partition key of the entity.
    - id: select
      type: java.lang.String
      description: An OData `select` expression to limit the set of properties included in the returned entity.
    - id: resultType
      type: java.lang.Class<T>
      description: The type of the result value, which must be a subclass of TableEntity.
    - id: timeout
      type: java.time.Duration
      description: Duration to wait for the operation to complete.
    - id: context
      type: com.azure.core.util.Context
      description: Additional context that is passed through the HTTP pipeline during the service call.
    return:
      type: com.azure.core.http.rest.Response<T>
      description: The HTTP response containing the entity.
- uid: com.azure.data.tables.TableClient.<T>listEntities(com.azure.data.tables.models.ListEntitiesOptions,java.lang.Class<T>)
  id: <T>listEntities(com.azure.data.tables.models.ListEntitiesOptions,java.lang.Class<T>)
  artifact: com.azure:azure-data-tables:12.0.0-beta.3
  parent: com.azure.data.tables.TableClient
  langs:
  - java
  name: <T>listEntities(ListEntitiesOptions options, Class<T> resultType)
  nameWithType: TableClient.<T>listEntities(ListEntitiesOptions options, Class<T> resultType)
  fullName: com.azure.data.tables.TableClient.<T>listEntities(ListEntitiesOptions options, Class<T> resultType)
  overload: com.azure.data.tables.TableClient.listEntities*
  type: Method
  package: com.azure.data.tables
  summary: Lists entities using the parameters in the provided options. If the \`filter\` parameter in the options is set, only entities matching the filter will be returned. If the \`select\` parameter is set, only the properties included in the select parameter will be returned for each entity. If the \`top\` parameter is set, the number of returned entities will be limited to that value.
  syntax:
    content: public PagedIterable<T> <T>listEntities(ListEntitiesOptions options, Class<T> resultType)
    parameters:
    - id: options
      type: com.azure.data.tables.models.ListEntitiesOptions
      description: The `filter`, `select`, and `top` OData query options to apply to this operation.
    - id: resultType
      type: java.lang.Class<T>
      description: The type of the result value, which must be a subclass of TableEntity.
    return:
      type: com.azure.core.http.rest.PagedIterable<T>
      description: A paged iterable containing matching entities within the table.
- uid: com.azure.data.tables.TableClient.<T>listEntities(java.lang.Class<T>)
  id: <T>listEntities(java.lang.Class<T>)
  artifact: com.azure:azure-data-tables:12.0.0-beta.3
  parent: com.azure.data.tables.TableClient
  langs:
  - java
  name: <T>listEntities(Class<T> resultType)
  nameWithType: TableClient.<T>listEntities(Class<T> resultType)
  fullName: com.azure.data.tables.TableClient.<T>listEntities(Class<T> resultType)
  overload: com.azure.data.tables.TableClient.listEntities*
  type: Method
  package: com.azure.data.tables
  summary: Lists all entities within the table.
  syntax:
    content: public PagedIterable<T> <T>listEntities(Class<T> resultType)
    parameters:
    - id: resultType
      type: java.lang.Class<T>
      description: The type of the result value, which must be a subclass of TableEntity.
    return:
      type: com.azure.core.http.rest.PagedIterable<T>
      description: A paged iterable containing all entities within the table.
- uid: com.azure.data.tables.TableClient.TableClient(com.azure.data.tables.TableAsyncClient)
  id: TableClient(com.azure.data.tables.TableAsyncClient)
  artifact: com.azure:azure-data-tables:12.0.0-beta.3
  parent: com.azure.data.tables.TableClient
  langs:
  - java
  name: TableClient(TableAsyncClient client)
  nameWithType: TableClient.TableClient(TableAsyncClient client)
  fullName: com.azure.data.tables.TableClient.TableClient(TableAsyncClient client)
  overload: com.azure.data.tables.TableClient.TableClient*
  type: Constructor
  package: com.azure.data.tables
  syntax:
    content: " TableClient(TableAsyncClient client)"
    parameters:
    - id: client
      type: com.azure.data.tables.TableAsyncClient
- uid: com.azure.data.tables.TableClient.create()
  id: create()
  artifact: com.azure:azure-data-tables:12.0.0-beta.3
  parent: com.azure.data.tables.TableClient
  langs:
  - java
  name: create()
  nameWithType: TableClient.create()
  fullName: com.azure.data.tables.TableClient.create()
  overload: com.azure.data.tables.TableClient.create*
  type: Method
  package: com.azure.data.tables
  summary: Creates the table within the Tables service.
  syntax:
    content: public void create()
- uid: com.azure.data.tables.TableClient.create(java.time.Duration)
  id: create(java.time.Duration)
  artifact: com.azure:azure-data-tables:12.0.0-beta.3
  parent: com.azure.data.tables.TableClient
  langs:
  - java
  name: create(Duration timeout)
  nameWithType: TableClient.create(Duration timeout)
  fullName: com.azure.data.tables.TableClient.create(Duration timeout)
  overload: com.azure.data.tables.TableClient.create*
  type: Method
  package: com.azure.data.tables
  summary: Creates the table within the Tables service.
  syntax:
    content: public void create(Duration timeout)
    parameters:
    - id: timeout
      type: java.time.Duration
      description: Duration to wait for the operation to complete.
- uid: com.azure.data.tables.TableClient.createBatch(java.lang.String)
  id: createBatch(java.lang.String)
  artifact: com.azure:azure-data-tables:12.0.0-beta.3
  parent: com.azure.data.tables.TableClient
  langs:
  - java
  name: createBatch(String partitionKey)
  nameWithType: TableClient.createBatch(String partitionKey)
  fullName: com.azure.data.tables.TableClient.createBatch(String partitionKey)
  overload: com.azure.data.tables.TableClient.createBatch*
  type: Method
  package: com.azure.data.tables
  summary: Creates a new <xref uid="com.azure.data.tables.TableBatch" data-throw-if-not-resolved="false">TableBatch</xref> object. Batch objects allow you to enqueue multiple create, update, upsert, and/or delete operations on entities that share the same partition key. When the batch is executed, all of the operations will be performed as part of a single transaction. As a result, either all operations in the batch will succeed, or if a failure occurs, all operations in the batch will be rolled back. Each operation in a batch must operate on a distinct row key. Attempting to add multiple operations to a batch that share the same row key will cause an exception to be thrown.
  syntax:
    content: public TableBatch createBatch(String partitionKey)
    parameters:
    - id: partitionKey
      type: java.lang.String
      description: The partition key shared by all operations in the batch.
    return:
      type: com.azure.data.tables.TableBatch
      description: An object representing the batch, to which operations can be added.
- uid: com.azure.data.tables.TableClient.createEntity(com.azure.data.tables.models.TableEntity)
  id: createEntity(com.azure.data.tables.models.TableEntity)
  artifact: com.azure:azure-data-tables:12.0.0-beta.3
  parent: com.azure.data.tables.TableClient
  langs:
  - java
  name: createEntity(TableEntity entity)
  nameWithType: TableClient.createEntity(TableEntity entity)
  fullName: com.azure.data.tables.TableClient.createEntity(TableEntity entity)
  overload: com.azure.data.tables.TableClient.createEntity*
  type: Method
  package: com.azure.data.tables
  summary: Inserts an entity into the table.
  syntax:
    content: public void createEntity(TableEntity entity)
    parameters:
    - id: entity
      type: com.azure.data.tables.models.TableEntity
      description: The entity to insert.
- uid: com.azure.data.tables.TableClient.createEntity(com.azure.data.tables.models.TableEntity,java.time.Duration)
  id: createEntity(com.azure.data.tables.models.TableEntity,java.time.Duration)
  artifact: com.azure:azure-data-tables:12.0.0-beta.3
  parent: com.azure.data.tables.TableClient
  langs:
  - java
  name: createEntity(TableEntity entity, Duration timeout)
  nameWithType: TableClient.createEntity(TableEntity entity, Duration timeout)
  fullName: com.azure.data.tables.TableClient.createEntity(TableEntity entity, Duration timeout)
  overload: com.azure.data.tables.TableClient.createEntity*
  type: Method
  package: com.azure.data.tables
  summary: Inserts an entity into the table.
  syntax:
    content: public void createEntity(TableEntity entity, Duration timeout)
    parameters:
    - id: entity
      type: com.azure.data.tables.models.TableEntity
      description: The entity to insert.
    - id: timeout
      type: java.time.Duration
      description: Duration to wait for the operation to complete.
- uid: com.azure.data.tables.TableClient.createEntityWithResponse(com.azure.data.tables.models.TableEntity,java.time.Duration,com.azure.core.util.Context)
  id: createEntityWithResponse(com.azure.data.tables.models.TableEntity,java.time.Duration,com.azure.core.util.Context)
  artifact: com.azure:azure-data-tables:12.0.0-beta.3
  parent: com.azure.data.tables.TableClient
  langs:
  - java
  name: createEntityWithResponse(TableEntity entity, Duration timeout, Context context)
  nameWithType: TableClient.createEntityWithResponse(TableEntity entity, Duration timeout, Context context)
  fullName: com.azure.data.tables.TableClient.createEntityWithResponse(TableEntity entity, Duration timeout, Context context)
  overload: com.azure.data.tables.TableClient.createEntityWithResponse*
  type: Method
  package: com.azure.data.tables
  summary: Inserts an entity into the table.
  syntax:
    content: public Response<Void> createEntityWithResponse(TableEntity entity, Duration timeout, Context context)
    parameters:
    - id: entity
      type: com.azure.data.tables.models.TableEntity
      description: The entity to insert.
    - id: timeout
      type: java.time.Duration
      description: Duration to wait for the operation to complete.
    - id: context
      type: com.azure.core.util.Context
      description: Additional context that is passed through the HTTP pipeline during the service call.
    return:
      type: com.azure.core.http.rest.Response<java.lang.Void>
      description: The HTTP response.
- uid: com.azure.data.tables.TableClient.createWithResponse(java.time.Duration,com.azure.core.util.Context)
  id: createWithResponse(java.time.Duration,com.azure.core.util.Context)
  artifact: com.azure:azure-data-tables:12.0.0-beta.3
  parent: com.azure.data.tables.TableClient
  langs:
  - java
  name: createWithResponse(Duration timeout, Context context)
  nameWithType: TableClient.createWithResponse(Duration timeout, Context context)
  fullName: com.azure.data.tables.TableClient.createWithResponse(Duration timeout, Context context)
  overload: com.azure.data.tables.TableClient.createWithResponse*
  type: Method
  package: com.azure.data.tables
  summary: Creates the table within the Tables service.
  syntax:
    content: public Response<Void> createWithResponse(Duration timeout, Context context)
    parameters:
    - id: timeout
      type: java.time.Duration
      description: Duration to wait for the operation to complete.
    - id: context
      type: com.azure.core.util.Context
      description: Additional context that is passed through the HTTP pipeline during the service call.
    return:
      type: com.azure.core.http.rest.Response<java.lang.Void>
      description: The HTTP response.
- uid: com.azure.data.tables.TableClient.delete()
  id: delete()
  artifact: com.azure:azure-data-tables:12.0.0-beta.3
  parent: com.azure.data.tables.TableClient
  langs:
  - java
  name: delete()
  nameWithType: TableClient.delete()
  fullName: com.azure.data.tables.TableClient.delete()
  overload: com.azure.data.tables.TableClient.delete*
  type: Method
  package: com.azure.data.tables
  summary: Deletes the table within the Tables service.
  syntax:
    content: public void delete()
- uid: com.azure.data.tables.TableClient.delete(java.time.Duration)
  id: delete(java.time.Duration)
  artifact: com.azure:azure-data-tables:12.0.0-beta.3
  parent: com.azure.data.tables.TableClient
  langs:
  - java
  name: delete(Duration timeout)
  nameWithType: TableClient.delete(Duration timeout)
  fullName: com.azure.data.tables.TableClient.delete(Duration timeout)
  overload: com.azure.data.tables.TableClient.delete*
  type: Method
  package: com.azure.data.tables
  summary: Deletes the table within the Tables service.
  syntax:
    content: public void delete(Duration timeout)
    parameters:
    - id: timeout
      type: java.time.Duration
      description: Duration to wait for the operation to complete.
- uid: com.azure.data.tables.TableClient.deleteEntity(java.lang.String,java.lang.String)
  id: deleteEntity(java.lang.String,java.lang.String)
  artifact: com.azure:azure-data-tables:12.0.0-beta.3
  parent: com.azure.data.tables.TableClient
  langs:
  - java
  name: deleteEntity(String partitionKey, String rowKey)
  nameWithType: TableClient.deleteEntity(String partitionKey, String rowKey)
  fullName: com.azure.data.tables.TableClient.deleteEntity(String partitionKey, String rowKey)
  overload: com.azure.data.tables.TableClient.deleteEntity*
  type: Method
  package: com.azure.data.tables
  summary: Deletes an entity from the table.
  syntax:
    content: public void deleteEntity(String partitionKey, String rowKey)
    parameters:
    - id: partitionKey
      type: java.lang.String
      description: The partition key of the entity.
    - id: rowKey
      type: java.lang.String
      description: The row key of the entity.
- uid: com.azure.data.tables.TableClient.deleteEntity(java.lang.String,java.lang.String,java.lang.String)
  id: deleteEntity(java.lang.String,java.lang.String,java.lang.String)
  artifact: com.azure:azure-data-tables:12.0.0-beta.3
  parent: com.azure.data.tables.TableClient
  langs:
  - java
  name: deleteEntity(String partitionKey, String rowKey, String eTag)
  nameWithType: TableClient.deleteEntity(String partitionKey, String rowKey, String eTag)
  fullName: com.azure.data.tables.TableClient.deleteEntity(String partitionKey, String rowKey, String eTag)
  overload: com.azure.data.tables.TableClient.deleteEntity*
  type: Method
  package: com.azure.data.tables
  summary: Deletes an entity from the table.
  syntax:
    content: public void deleteEntity(String partitionKey, String rowKey, String eTag)
    parameters:
    - id: partitionKey
      type: java.lang.String
      description: The partition key of the entity.
    - id: rowKey
      type: java.lang.String
      description: The row key of the entity.
    - id: eTag
      type: java.lang.String
      description: >-
        The value to compare with the eTag of the entity in the Tables service. If the values do not match,
                     the delete will not occur and an exception will be thrown.
- uid: com.azure.data.tables.TableClient.deleteEntity(java.lang.String,java.lang.String,java.lang.String,java.time.Duration)
  id: deleteEntity(java.lang.String,java.lang.String,java.lang.String,java.time.Duration)
  artifact: com.azure:azure-data-tables:12.0.0-beta.3
  parent: com.azure.data.tables.TableClient
  langs:
  - java
  name: deleteEntity(String partitionKey, String rowKey, String eTag, Duration timeout)
  nameWithType: TableClient.deleteEntity(String partitionKey, String rowKey, String eTag, Duration timeout)
  fullName: com.azure.data.tables.TableClient.deleteEntity(String partitionKey, String rowKey, String eTag, Duration timeout)
  overload: com.azure.data.tables.TableClient.deleteEntity*
  type: Method
  package: com.azure.data.tables
  summary: Deletes an entity from the table.
  syntax:
    content: public void deleteEntity(String partitionKey, String rowKey, String eTag, Duration timeout)
    parameters:
    - id: partitionKey
      type: java.lang.String
      description: The partition key of the entity.
    - id: rowKey
      type: java.lang.String
      description: The row key of the entity.
    - id: eTag
      type: java.lang.String
      description: >-
        The value to compare with the eTag of the entity in the Tables service. If the values do not match,
                     the delete will not occur and an exception will be thrown.
    - id: timeout
      type: java.time.Duration
      description: Duration to wait for the operation to complete.
- uid: com.azure.data.tables.TableClient.deleteEntityWithResponse(java.lang.String,java.lang.String,java.lang.String,java.time.Duration,com.azure.core.util.Context)
  id: deleteEntityWithResponse(java.lang.String,java.lang.String,java.lang.String,java.time.Duration,com.azure.core.util.Context)
  artifact: com.azure:azure-data-tables:12.0.0-beta.3
  parent: com.azure.data.tables.TableClient
  langs:
  - java
  name: deleteEntityWithResponse(String partitionKey, String rowKey, String eTag, Duration timeout, Context context)
  nameWithType: TableClient.deleteEntityWithResponse(String partitionKey, String rowKey, String eTag, Duration timeout, Context context)
  fullName: com.azure.data.tables.TableClient.deleteEntityWithResponse(String partitionKey, String rowKey, String eTag, Duration timeout, Context context)
  overload: com.azure.data.tables.TableClient.deleteEntityWithResponse*
  type: Method
  package: com.azure.data.tables
  summary: Deletes an entity from the table.
  syntax:
    content: public Response<Void> deleteEntityWithResponse(String partitionKey, String rowKey, String eTag, Duration timeout, Context context)
    parameters:
    - id: partitionKey
      type: java.lang.String
      description: The partition key of the entity.
    - id: rowKey
      type: java.lang.String
      description: The row key of the entity.
    - id: eTag
      type: java.lang.String
      description: >-
        The value to compare with the eTag of the entity in the Tables service. If the values do not match,
                     the delete will not occur and an exception will be thrown.
    - id: timeout
      type: java.time.Duration
      description: Duration to wait for the operation to complete.
    - id: context
      type: com.azure.core.util.Context
      description: Additional context that is passed through the HTTP pipeline during the service call.
    return:
      type: com.azure.core.http.rest.Response<java.lang.Void>
      description: The HTTP response.
- uid: com.azure.data.tables.TableClient.deleteWithResponse(java.time.Duration,com.azure.core.util.Context)
  id: deleteWithResponse(java.time.Duration,com.azure.core.util.Context)
  artifact: com.azure:azure-data-tables:12.0.0-beta.3
  parent: com.azure.data.tables.TableClient
  langs:
  - java
  name: deleteWithResponse(Duration timeout, Context context)
  nameWithType: TableClient.deleteWithResponse(Duration timeout, Context context)
  fullName: com.azure.data.tables.TableClient.deleteWithResponse(Duration timeout, Context context)
  overload: com.azure.data.tables.TableClient.deleteWithResponse*
  type: Method
  package: com.azure.data.tables
  summary: Deletes the table within the Tables service.
  syntax:
    content: public Response<Void> deleteWithResponse(Duration timeout, Context context)
    parameters:
    - id: timeout
      type: java.time.Duration
      description: Duration to wait for the operation to complete.
    - id: context
      type: com.azure.core.util.Context
      description: Additional context that is passed through the HTTP pipeline during the service call.
    return:
      type: com.azure.core.http.rest.Response<java.lang.Void>
      description: The HTTP response.
- uid: com.azure.data.tables.TableClient.getAccountName()
  id: getAccountName()
  artifact: com.azure:azure-data-tables:12.0.0-beta.3
  parent: com.azure.data.tables.TableClient
  langs:
  - java
  name: getAccountName()
  nameWithType: TableClient.getAccountName()
  fullName: com.azure.data.tables.TableClient.getAccountName()
  overload: com.azure.data.tables.TableClient.getAccountName*
  type: Method
  package: com.azure.data.tables
  summary: Gets the name of the account containing the table.
  syntax:
    content: public String getAccountName()
    return:
      type: java.lang.String
      description: The name of the account containing the table.
- uid: com.azure.data.tables.TableClient.getApiVersion()
  id: getApiVersion()
  artifact: com.azure:azure-data-tables:12.0.0-beta.3
  parent: com.azure.data.tables.TableClient
  langs:
  - java
  name: getApiVersion()
  nameWithType: TableClient.getApiVersion()
  fullName: com.azure.data.tables.TableClient.getApiVersion()
  overload: com.azure.data.tables.TableClient.getApiVersion*
  type: Method
  package: com.azure.data.tables
  summary: Gets the REST API version used by this client.
  syntax:
    content: public TablesServiceVersion getApiVersion()
    return:
      type: com.azure.data.tables.TablesServiceVersion
      description: The REST API version used by this client.
- uid: com.azure.data.tables.TableClient.getEntity(java.lang.String,java.lang.String)
  id: getEntity(java.lang.String,java.lang.String)
  artifact: com.azure:azure-data-tables:12.0.0-beta.3
  parent: com.azure.data.tables.TableClient
  langs:
  - java
  name: getEntity(String partitionKey, String rowKey)
  nameWithType: TableClient.getEntity(String partitionKey, String rowKey)
  fullName: com.azure.data.tables.TableClient.getEntity(String partitionKey, String rowKey)
  overload: com.azure.data.tables.TableClient.getEntity*
  type: Method
  package: com.azure.data.tables
  summary: Gets a single entity from the table.
  syntax:
    content: public TableEntity getEntity(String partitionKey, String rowKey)
    parameters:
    - id: partitionKey
      type: java.lang.String
      description: The partition key of the entity.
    - id: rowKey
      type: java.lang.String
      description: The partition key of the entity.
    return:
      type: com.azure.data.tables.models.TableEntity
      description: The entity.
- uid: com.azure.data.tables.TableClient.getEntity(java.lang.String,java.lang.String,java.lang.String)
  id: getEntity(java.lang.String,java.lang.String,java.lang.String)
  artifact: com.azure:azure-data-tables:12.0.0-beta.3
  parent: com.azure.data.tables.TableClient
  langs:
  - java
  name: getEntity(String partitionKey, String rowKey, String select)
  nameWithType: TableClient.getEntity(String partitionKey, String rowKey, String select)
  fullName: com.azure.data.tables.TableClient.getEntity(String partitionKey, String rowKey, String select)
  overload: com.azure.data.tables.TableClient.getEntity*
  type: Method
  package: com.azure.data.tables
  summary: Gets a single entity from the table.
  syntax:
    content: public TableEntity getEntity(String partitionKey, String rowKey, String select)
    parameters:
    - id: partitionKey
      type: java.lang.String
      description: The partition key of the entity.
    - id: rowKey
      type: java.lang.String
      description: The partition key of the entity.
    - id: select
      type: java.lang.String
      description: An OData `select` expression to limit the set of properties included in the returned entity.
    return:
      type: com.azure.data.tables.models.TableEntity
      description: The entity.
- uid: com.azure.data.tables.TableClient.getEntity(java.lang.String,java.lang.String,java.lang.String,java.time.Duration)
  id: getEntity(java.lang.String,java.lang.String,java.lang.String,java.time.Duration)
  artifact: com.azure:azure-data-tables:12.0.0-beta.3
  parent: com.azure.data.tables.TableClient
  langs:
  - java
  name: getEntity(String partitionKey, String rowKey, String select, Duration timeout)
  nameWithType: TableClient.getEntity(String partitionKey, String rowKey, String select, Duration timeout)
  fullName: com.azure.data.tables.TableClient.getEntity(String partitionKey, String rowKey, String select, Duration timeout)
  overload: com.azure.data.tables.TableClient.getEntity*
  type: Method
  package: com.azure.data.tables
  summary: Gets a single entity from the table.
  syntax:
    content: public TableEntity getEntity(String partitionKey, String rowKey, String select, Duration timeout)
    parameters:
    - id: partitionKey
      type: java.lang.String
      description: The partition key of the entity.
    - id: rowKey
      type: java.lang.String
      description: The partition key of the entity.
    - id: select
      type: java.lang.String
      description: An OData `select` expression to limit the set of properties included in the returned entity.
    - id: timeout
      type: java.time.Duration
      description: Duration to wait for the operation to complete.
    return:
      type: com.azure.data.tables.models.TableEntity
      description: The entity.
- uid: com.azure.data.tables.TableClient.getEntityWithResponse(java.lang.String,java.lang.String,java.lang.String,java.time.Duration,com.azure.core.util.Context)
  id: getEntityWithResponse(java.lang.String,java.lang.String,java.lang.String,java.time.Duration,com.azure.core.util.Context)
  artifact: com.azure:azure-data-tables:12.0.0-beta.3
  parent: com.azure.data.tables.TableClient
  langs:
  - java
  name: getEntityWithResponse(String partitionKey, String rowKey, String select, Duration timeout, Context context)
  nameWithType: TableClient.getEntityWithResponse(String partitionKey, String rowKey, String select, Duration timeout, Context context)
  fullName: com.azure.data.tables.TableClient.getEntityWithResponse(String partitionKey, String rowKey, String select, Duration timeout, Context context)
  overload: com.azure.data.tables.TableClient.getEntityWithResponse*
  type: Method
  package: com.azure.data.tables
  summary: Gets a single entity from the table.
  syntax:
    content: public Response<TableEntity> getEntityWithResponse(String partitionKey, String rowKey, String select, Duration timeout, Context context)
    parameters:
    - id: partitionKey
      type: java.lang.String
      description: The partition key of the entity.
    - id: rowKey
      type: java.lang.String
      description: The partition key of the entity.
    - id: select
      type: java.lang.String
      description: An OData `select` expression to limit the set of properties included in the returned entity.
    - id: timeout
      type: java.time.Duration
      description: Duration to wait for the operation to complete.
    - id: context
      type: com.azure.core.util.Context
      description: Additional context that is passed through the HTTP pipeline during the service call.
    return:
      type: com.azure.core.http.rest.Response<com.azure.data.tables.models.TableEntity>
      description: The HTTP response containing the entity.
- uid: com.azure.data.tables.TableClient.getTableName()
  id: getTableName()
  artifact: com.azure:azure-data-tables:12.0.0-beta.3
  parent: com.azure.data.tables.TableClient
  langs:
  - java
  name: getTableName()
  nameWithType: TableClient.getTableName()
  fullName: com.azure.data.tables.TableClient.getTableName()
  overload: com.azure.data.tables.TableClient.getTableName*
  type: Method
  package: com.azure.data.tables
  summary: Gets the name of the table.
  syntax:
    content: public String getTableName()
    return:
      type: java.lang.String
      description: The name of the table.
- uid: com.azure.data.tables.TableClient.getTableUrl()
  id: getTableUrl()
  artifact: com.azure:azure-data-tables:12.0.0-beta.3
  parent: com.azure.data.tables.TableClient
  langs:
  - java
  name: getTableUrl()
  nameWithType: TableClient.getTableUrl()
  fullName: com.azure.data.tables.TableClient.getTableUrl()
  overload: com.azure.data.tables.TableClient.getTableUrl*
  type: Method
  package: com.azure.data.tables
  summary: Gets the absolute URL for this table.
  syntax:
    content: public String getTableUrl()
    return:
      type: java.lang.String
      description: The absolute URL for this table.
- uid: com.azure.data.tables.TableClient.listEntities()
  id: listEntities()
  artifact: com.azure:azure-data-tables:12.0.0-beta.3
  parent: com.azure.data.tables.TableClient
  langs:
  - java
  name: listEntities()
  nameWithType: TableClient.listEntities()
  fullName: com.azure.data.tables.TableClient.listEntities()
  overload: com.azure.data.tables.TableClient.listEntities*
  type: Method
  package: com.azure.data.tables
  summary: Lists all entities within the table.
  syntax:
    content: public PagedIterable<TableEntity> listEntities()
    return:
      type: com.azure.core.http.rest.PagedIterable<com.azure.data.tables.models.TableEntity>
      description: A paged iterable containing all entities within the table.
- uid: com.azure.data.tables.TableClient.listEntities(com.azure.data.tables.models.ListEntitiesOptions)
  id: listEntities(com.azure.data.tables.models.ListEntitiesOptions)
  artifact: com.azure:azure-data-tables:12.0.0-beta.3
  parent: com.azure.data.tables.TableClient
  langs:
  - java
  name: listEntities(ListEntitiesOptions options)
  nameWithType: TableClient.listEntities(ListEntitiesOptions options)
  fullName: com.azure.data.tables.TableClient.listEntities(ListEntitiesOptions options)
  overload: com.azure.data.tables.TableClient.listEntities*
  type: Method
  package: com.azure.data.tables
  summary: Lists entities using the parameters in the provided options. If the \`filter\` parameter in the options is set, only entities matching the filter will be returned. If the \`select\` parameter is set, only the properties included in the select parameter will be returned for each entity. If the \`top\` parameter is set, the number of returned entities will be limited to that value.
  syntax:
    content: public PagedIterable<TableEntity> listEntities(ListEntitiesOptions options)
    parameters:
    - id: options
      type: com.azure.data.tables.models.ListEntitiesOptions
      description: The `filter`, `select`, and `top` OData query options to apply to this operation.
    return:
      type: com.azure.core.http.rest.PagedIterable<com.azure.data.tables.models.TableEntity>
      description: A paged iterable containing matching entities within the table.
- uid: com.azure.data.tables.TableClient.updateEntity(com.azure.data.tables.models.TableEntity)
  id: updateEntity(com.azure.data.tables.models.TableEntity)
  artifact: com.azure:azure-data-tables:12.0.0-beta.3
  parent: com.azure.data.tables.TableClient
  langs:
  - java
  name: updateEntity(TableEntity entity)
  nameWithType: TableClient.updateEntity(TableEntity entity)
  fullName: com.azure.data.tables.TableClient.updateEntity(TableEntity entity)
  overload: com.azure.data.tables.TableClient.updateEntity*
  type: Method
  package: com.azure.data.tables
  summary: Updates an existing entity by merging the provided entity with the existing entity.
  syntax:
    content: public void updateEntity(TableEntity entity)
    parameters:
    - id: entity
      type: com.azure.data.tables.models.TableEntity
      description: The entity to update.
- uid: com.azure.data.tables.TableClient.updateEntity(com.azure.data.tables.models.TableEntity,com.azure.data.tables.models.UpdateMode)
  id: updateEntity(com.azure.data.tables.models.TableEntity,com.azure.data.tables.models.UpdateMode)
  artifact: com.azure:azure-data-tables:12.0.0-beta.3
  parent: com.azure.data.tables.TableClient
  langs:
  - java
  name: updateEntity(TableEntity entity, UpdateMode updateMode)
  nameWithType: TableClient.updateEntity(TableEntity entity, UpdateMode updateMode)
  fullName: com.azure.data.tables.TableClient.updateEntity(TableEntity entity, UpdateMode updateMode)
  overload: com.azure.data.tables.TableClient.updateEntity*
  type: Method
  package: com.azure.data.tables
  summary: Updates an existing entity using the specified update mode. When the update mode is 'MERGE', the provided entity's properties will be merged into the existing entity. When the update mode is 'REPLACE', the provided entity's properties will completely replace those in the existing entity.
  syntax:
    content: public void updateEntity(TableEntity entity, UpdateMode updateMode)
    parameters:
    - id: entity
      type: com.azure.data.tables.models.TableEntity
      description: The entity to update.
    - id: updateMode
      type: com.azure.data.tables.models.UpdateMode
      description: which type of mode to execute
- uid: com.azure.data.tables.TableClient.updateEntity(com.azure.data.tables.models.TableEntity,com.azure.data.tables.models.UpdateMode,boolean)
  id: updateEntity(com.azure.data.tables.models.TableEntity,com.azure.data.tables.models.UpdateMode,boolean)
  artifact: com.azure:azure-data-tables:12.0.0-beta.3
  parent: com.azure.data.tables.TableClient
  langs:
  - java
  name: updateEntity(TableEntity entity, UpdateMode updateMode, boolean ifUnchanged)
  nameWithType: TableClient.updateEntity(TableEntity entity, UpdateMode updateMode, boolean ifUnchanged)
  fullName: com.azure.data.tables.TableClient.updateEntity(TableEntity entity, UpdateMode updateMode, boolean ifUnchanged)
  overload: com.azure.data.tables.TableClient.updateEntity*
  type: Method
  package: com.azure.data.tables
  summary: Updates an existing entity using the specified update mode. When the update mode is 'MERGE', the provided entity's properties will be merged into the existing entity. When the update mode is 'REPLACE', the provided entity's properties will completely replace those in the existing entity.
  syntax:
    content: public void updateEntity(TableEntity entity, UpdateMode updateMode, boolean ifUnchanged)
    parameters:
    - id: entity
      type: com.azure.data.tables.models.TableEntity
      description: The entity to update.
    - id: updateMode
      type: com.azure.data.tables.models.UpdateMode
      description: The type of update to perform.
    - id: ifUnchanged
      type: boolean
      description: >-
        When true, the eTag of the provided entity must match the eTag of the entity in the Table
                            service. If the values do not match, the update will not occur and an exception will be
                            thrown.
- uid: com.azure.data.tables.TableClient.updateEntity(com.azure.data.tables.models.TableEntity,com.azure.data.tables.models.UpdateMode,boolean,java.time.Duration)
  id: updateEntity(com.azure.data.tables.models.TableEntity,com.azure.data.tables.models.UpdateMode,boolean,java.time.Duration)
  artifact: com.azure:azure-data-tables:12.0.0-beta.3
  parent: com.azure.data.tables.TableClient
  langs:
  - java
  name: updateEntity(TableEntity entity, UpdateMode updateMode, boolean ifUnchanged, Duration timeout)
  nameWithType: TableClient.updateEntity(TableEntity entity, UpdateMode updateMode, boolean ifUnchanged, Duration timeout)
  fullName: com.azure.data.tables.TableClient.updateEntity(TableEntity entity, UpdateMode updateMode, boolean ifUnchanged, Duration timeout)
  overload: com.azure.data.tables.TableClient.updateEntity*
  type: Method
  package: com.azure.data.tables
  summary: Updates an existing entity using the specified update mode. When the update mode is 'MERGE', the provided entity's properties will be merged into the existing entity. When the update mode is 'REPLACE', the provided entity's properties will completely replace those in the existing entity.
  syntax:
    content: public void updateEntity(TableEntity entity, UpdateMode updateMode, boolean ifUnchanged, Duration timeout)
    parameters:
    - id: entity
      type: com.azure.data.tables.models.TableEntity
      description: The entity to update.
    - id: updateMode
      type: com.azure.data.tables.models.UpdateMode
      description: The type of update to perform.
    - id: ifUnchanged
      type: boolean
      description: >-
        When true, the eTag of the provided entity must match the eTag of the entity in the Table
                            service. If the values do not match, the update will not occur and an exception will be
                            thrown.
    - id: timeout
      type: java.time.Duration
      description: Duration to wait for the operation to complete.
- uid: com.azure.data.tables.TableClient.updateEntityWithResponse(com.azure.data.tables.models.TableEntity,com.azure.data.tables.models.UpdateMode,boolean,java.time.Duration,com.azure.core.util.Context)
  id: updateEntityWithResponse(com.azure.data.tables.models.TableEntity,com.azure.data.tables.models.UpdateMode,boolean,java.time.Duration,com.azure.core.util.Context)
  artifact: com.azure:azure-data-tables:12.0.0-beta.3
  parent: com.azure.data.tables.TableClient
  langs:
  - java
  name: updateEntityWithResponse(TableEntity entity, UpdateMode updateMode, boolean ifUnchanged, Duration timeout, Context context)
  nameWithType: TableClient.updateEntityWithResponse(TableEntity entity, UpdateMode updateMode, boolean ifUnchanged, Duration timeout, Context context)
  fullName: com.azure.data.tables.TableClient.updateEntityWithResponse(TableEntity entity, UpdateMode updateMode, boolean ifUnchanged, Duration timeout, Context context)
  overload: com.azure.data.tables.TableClient.updateEntityWithResponse*
  type: Method
  package: com.azure.data.tables
  summary: Updates an existing entity using the specified update mode. When the update mode is 'MERGE', the provided entity's properties will be merged into the existing entity. When the update mode is 'REPLACE', the provided entity's properties will completely replace those in the existing entity.
  syntax:
    content: public Response<Void> updateEntityWithResponse(TableEntity entity, UpdateMode updateMode, boolean ifUnchanged, Duration timeout, Context context)
    parameters:
    - id: entity
      type: com.azure.data.tables.models.TableEntity
      description: The entity to update.
    - id: updateMode
      type: com.azure.data.tables.models.UpdateMode
      description: The type of update to perform.
    - id: ifUnchanged
      type: boolean
      description: >-
        When true, the eTag of the provided entity must match the eTag of the entity in the Table
                            service. If the values do not match, the update will not occur and an exception will be
                            thrown.
    - id: timeout
      type: java.time.Duration
      description: Duration to wait for the operation to complete.
    - id: context
      type: com.azure.core.util.Context
      description: Additional context that is passed through the HTTP pipeline during the service call.
    return:
      type: com.azure.core.http.rest.Response<java.lang.Void>
      description: The HTTP response.
- uid: com.azure.data.tables.TableClient.upsertEntity(com.azure.data.tables.models.TableEntity)
  id: upsertEntity(com.azure.data.tables.models.TableEntity)
  artifact: com.azure:azure-data-tables:12.0.0-beta.3
  parent: com.azure.data.tables.TableClient
  langs:
  - java
  name: upsertEntity(TableEntity entity)
  nameWithType: TableClient.upsertEntity(TableEntity entity)
  fullName: com.azure.data.tables.TableClient.upsertEntity(TableEntity entity)
  overload: com.azure.data.tables.TableClient.upsertEntity*
  type: Method
  package: com.azure.data.tables
  summary: Inserts an entity into the table if it does not exist, or merges the entity with the existing entity otherwise. If no entity exists within the table having the same partition key and row key as the provided entity, it will be inserted. Otherwise, the provided entity's properties will be merged into the existing entity.
  syntax:
    content: public void upsertEntity(TableEntity entity)
    parameters:
    - id: entity
      type: com.azure.data.tables.models.TableEntity
      description: The entity to upsert.
- uid: com.azure.data.tables.TableClient.upsertEntity(com.azure.data.tables.models.TableEntity,com.azure.data.tables.models.UpdateMode)
  id: upsertEntity(com.azure.data.tables.models.TableEntity,com.azure.data.tables.models.UpdateMode)
  artifact: com.azure:azure-data-tables:12.0.0-beta.3
  parent: com.azure.data.tables.TableClient
  langs:
  - java
  name: upsertEntity(TableEntity entity, UpdateMode updateMode)
  nameWithType: TableClient.upsertEntity(TableEntity entity, UpdateMode updateMode)
  fullName: com.azure.data.tables.TableClient.upsertEntity(TableEntity entity, UpdateMode updateMode)
  overload: com.azure.data.tables.TableClient.upsertEntity*
  type: Method
  package: com.azure.data.tables
  summary: Inserts an entity into the table if it does not exist, or updates the existing entity using the specified update mode otherwise. If no entity exists within the table having the same partition key and row key as the provided entity, it will be inserted. Otherwise, the existing entity will be updated according to the specified update mode. When the update mode is 'MERGE', the provided entity's properties will be merged into the existing entity. When the update mode is 'REPLACE', the provided entity's properties will completely replace those in the existing entity.
  syntax:
    content: public void upsertEntity(TableEntity entity, UpdateMode updateMode)
    parameters:
    - id: entity
      type: com.azure.data.tables.models.TableEntity
      description: The entity to upsert.
    - id: updateMode
      type: com.azure.data.tables.models.UpdateMode
      description: The type of update to perform if the entity already exits.
- uid: com.azure.data.tables.TableClient.upsertEntity(com.azure.data.tables.models.TableEntity,com.azure.data.tables.models.UpdateMode,java.time.Duration)
  id: upsertEntity(com.azure.data.tables.models.TableEntity,com.azure.data.tables.models.UpdateMode,java.time.Duration)
  artifact: com.azure:azure-data-tables:12.0.0-beta.3
  parent: com.azure.data.tables.TableClient
  langs:
  - java
  name: upsertEntity(TableEntity entity, UpdateMode updateMode, Duration timeout)
  nameWithType: TableClient.upsertEntity(TableEntity entity, UpdateMode updateMode, Duration timeout)
  fullName: com.azure.data.tables.TableClient.upsertEntity(TableEntity entity, UpdateMode updateMode, Duration timeout)
  overload: com.azure.data.tables.TableClient.upsertEntity*
  type: Method
  package: com.azure.data.tables
  summary: Inserts an entity into the table if it does not exist, or updates the existing entity using the specified update mode otherwise. If no entity exists within the table having the same partition key and row key as the provided entity, it will be inserted. Otherwise, the existing entity will be updated according to the specified update mode. When the update mode is 'MERGE', the provided entity's properties will be merged into the existing entity. When the update mode is 'REPLACE', the provided entity's properties will completely replace those in the existing entity.
  syntax:
    content: public void upsertEntity(TableEntity entity, UpdateMode updateMode, Duration timeout)
    parameters:
    - id: entity
      type: com.azure.data.tables.models.TableEntity
      description: The entity to upsert.
    - id: updateMode
      type: com.azure.data.tables.models.UpdateMode
      description: The type of update to perform if the entity already exits.
    - id: timeout
      type: java.time.Duration
      description: Duration to wait for the operation to complete.
- uid: com.azure.data.tables.TableClient.upsertEntityWithResponse(com.azure.data.tables.models.TableEntity,com.azure.data.tables.models.UpdateMode,java.time.Duration,com.azure.core.util.Context)
  id: upsertEntityWithResponse(com.azure.data.tables.models.TableEntity,com.azure.data.tables.models.UpdateMode,java.time.Duration,com.azure.core.util.Context)
  artifact: com.azure:azure-data-tables:12.0.0-beta.3
  parent: com.azure.data.tables.TableClient
  langs:
  - java
  name: upsertEntityWithResponse(TableEntity entity, UpdateMode updateMode, Duration timeout, Context context)
  nameWithType: TableClient.upsertEntityWithResponse(TableEntity entity, UpdateMode updateMode, Duration timeout, Context context)
  fullName: com.azure.data.tables.TableClient.upsertEntityWithResponse(TableEntity entity, UpdateMode updateMode, Duration timeout, Context context)
  overload: com.azure.data.tables.TableClient.upsertEntityWithResponse*
  type: Method
  package: com.azure.data.tables
  summary: Inserts an entity into the table if it does not exist, or updates the existing entity using the specified update mode otherwise. If no entity exists within the table having the same partition key and row key as the provided entity, it will be inserted. Otherwise, the existing entity will be updated according to the specified update mode. When the update mode is 'MERGE', the provided entity's properties will be merged into the existing entity. When the update mode is 'REPLACE', the provided entity's properties will completely replace those in the existing entity.
  syntax:
    content: public Response<Void> upsertEntityWithResponse(TableEntity entity, UpdateMode updateMode, Duration timeout, Context context)
    parameters:
    - id: entity
      type: com.azure.data.tables.models.TableEntity
      description: The entity to upsert.
    - id: updateMode
      type: com.azure.data.tables.models.UpdateMode
      description: The type of update to perform if the entity already exits.
    - id: timeout
      type: java.time.Duration
      description: Duration to wait for the operation to complete.
    - id: context
      type: com.azure.core.util.Context
      description: Additional context that is passed through the HTTP pipeline during the service call.
    return:
      type: com.azure.core.http.rest.Response<java.lang.Void>
      description: The HTTP response.
references:
- uid: com.azure.data.tables.TableAsyncClient
  name: TableAsyncClient
  nameWithType: TableAsyncClient
  fullName: com.azure.data.tables.TableAsyncClient
- uid: com.azure.data.tables.TableClient.TableClient*
  name: TableClient
  nameWithType: TableClient.TableClient
  fullName: com.azure.data.tables.TableClient.TableClient
  package: com.azure.data.tables
- uid: java.lang.String
  spec.java:
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
- uid: com.azure.data.tables.TableClient.getTableName*
  name: getTableName
  nameWithType: TableClient.getTableName
  fullName: com.azure.data.tables.TableClient.getTableName
  package: com.azure.data.tables
- uid: com.azure.data.tables.TableClient.getAccountName*
  name: getAccountName
  nameWithType: TableClient.getAccountName
  fullName: com.azure.data.tables.TableClient.getAccountName
  package: com.azure.data.tables
- uid: com.azure.data.tables.TableClient.getTableUrl*
  name: getTableUrl
  nameWithType: TableClient.getTableUrl
  fullName: com.azure.data.tables.TableClient.getTableUrl
  package: com.azure.data.tables
- uid: com.azure.data.tables.TablesServiceVersion
  name: TablesServiceVersion
  nameWithType: TablesServiceVersion
  fullName: com.azure.data.tables.TablesServiceVersion
- uid: com.azure.data.tables.TableClient.getApiVersion*
  name: getApiVersion
  nameWithType: TableClient.getApiVersion
  fullName: com.azure.data.tables.TableClient.getApiVersion
  package: com.azure.data.tables
- uid: com.azure.data.tables.TableBatch
  name: TableBatch
  nameWithType: TableBatch
  fullName: com.azure.data.tables.TableBatch
- uid: com.azure.data.tables.TableClient.createBatch*
  name: createBatch
  nameWithType: TableClient.createBatch
  fullName: com.azure.data.tables.TableClient.createBatch
  package: com.azure.data.tables
- uid: com.azure.data.tables.TableClient.create*
  name: create
  nameWithType: TableClient.create
  fullName: com.azure.data.tables.TableClient.create
  package: com.azure.data.tables
- uid: java.time.Duration
  spec.java:
  - uid: java.time.Duration
    name: Duration
    fullName: java.time.Duration
- uid: com.azure.core.util.Context
  spec.java:
  - uid: com.azure.core.util.Context
    name: Context
    fullName: com.azure.core.util.Context
- uid: com.azure.core.http.rest.Response<java.lang.Void>
  spec.java:
  - uid: com.azure.core.http.rest.Response
    name: Response
    fullName: com.azure.core.http.rest.Response
  - name: <
    fullName: <
  - uid: java.lang.Void
    name: Void
    fullName: java.lang.Void
  - name: '>'
    fullName: '>'
- uid: com.azure.data.tables.TableClient.createWithResponse*
  name: createWithResponse
  nameWithType: TableClient.createWithResponse
  fullName: com.azure.data.tables.TableClient.createWithResponse
  package: com.azure.data.tables
- uid: com.azure.data.tables.models.TableEntity
  name: TableEntity
  nameWithType: TableEntity
  fullName: com.azure.data.tables.models.TableEntity
- uid: com.azure.data.tables.TableClient.createEntity*
  name: createEntity
  nameWithType: TableClient.createEntity
  fullName: com.azure.data.tables.TableClient.createEntity
  package: com.azure.data.tables
- uid: com.azure.data.tables.TableClient.createEntityWithResponse*
  name: createEntityWithResponse
  nameWithType: TableClient.createEntityWithResponse
  fullName: com.azure.data.tables.TableClient.createEntityWithResponse
  package: com.azure.data.tables
- uid: com.azure.data.tables.TableClient.upsertEntity*
  name: upsertEntity
  nameWithType: TableClient.upsertEntity
  fullName: com.azure.data.tables.TableClient.upsertEntity
  package: com.azure.data.tables
- uid: com.azure.data.tables.models.UpdateMode
  name: UpdateMode
  nameWithType: UpdateMode
  fullName: com.azure.data.tables.models.UpdateMode
- uid: com.azure.data.tables.TableClient.upsertEntityWithResponse*
  name: upsertEntityWithResponse
  nameWithType: TableClient.upsertEntityWithResponse
  fullName: com.azure.data.tables.TableClient.upsertEntityWithResponse
  package: com.azure.data.tables
- uid: com.azure.data.tables.TableClient.updateEntity*
  name: updateEntity
  nameWithType: TableClient.updateEntity
  fullName: com.azure.data.tables.TableClient.updateEntity
  package: com.azure.data.tables
- uid: boolean
  spec.java:
  - uid: boolean
    name: boolean
    fullName: boolean
- uid: com.azure.data.tables.TableClient.updateEntityWithResponse*
  name: updateEntityWithResponse
  nameWithType: TableClient.updateEntityWithResponse
  fullName: com.azure.data.tables.TableClient.updateEntityWithResponse
  package: com.azure.data.tables
- uid: com.azure.data.tables.TableClient.delete*
  name: delete
  nameWithType: TableClient.delete
  fullName: com.azure.data.tables.TableClient.delete
  package: com.azure.data.tables
- uid: com.azure.data.tables.TableClient.deleteWithResponse*
  name: deleteWithResponse
  nameWithType: TableClient.deleteWithResponse
  fullName: com.azure.data.tables.TableClient.deleteWithResponse
  package: com.azure.data.tables
- uid: com.azure.data.tables.TableClient.deleteEntity*
  name: deleteEntity
  nameWithType: TableClient.deleteEntity
  fullName: com.azure.data.tables.TableClient.deleteEntity
  package: com.azure.data.tables
- uid: com.azure.data.tables.TableClient.deleteEntityWithResponse*
  name: deleteEntityWithResponse
  nameWithType: TableClient.deleteEntityWithResponse
  fullName: com.azure.data.tables.TableClient.deleteEntityWithResponse
  package: com.azure.data.tables
- uid: com.azure.core.http.rest.PagedIterable<com.azure.data.tables.models.TableEntity>
  spec.java:
  - uid: com.azure.core.http.rest.PagedIterable
    name: PagedIterable
    fullName: com.azure.core.http.rest.PagedIterable
  - name: <
    fullName: <
  - uid: com.azure.data.tables.models.TableEntity
    name: TableEntity
    fullName: com.azure.data.tables.models.TableEntity
  - name: '>'
    fullName: '>'
- uid: com.azure.data.tables.TableClient.listEntities*
  name: listEntities
  nameWithType: TableClient.listEntities
  fullName: com.azure.data.tables.TableClient.listEntities
  package: com.azure.data.tables
- uid: com.azure.data.tables.models.ListEntitiesOptions
  name: ListEntitiesOptions
  nameWithType: ListEntitiesOptions
  fullName: com.azure.data.tables.models.ListEntitiesOptions
- uid: java.lang.Class<T>
  spec.java:
  - uid: java.lang.Class
    name: Class
    fullName: java.lang.Class
  - name: <
    fullName: <
  - uid: T
    name: T
    fullName: T
  - name: '>'
    fullName: '>'
- uid: com.azure.core.http.rest.PagedIterable<T>
  spec.java:
  - uid: com.azure.core.http.rest.PagedIterable
    name: PagedIterable
    fullName: com.azure.core.http.rest.PagedIterable
  - name: <
    fullName: <
  - uid: T
    name: T
    fullName: T
  - name: '>'
    fullName: '>'
- uid: com.azure.data.tables.TableClient.getEntity*
  name: getEntity
  nameWithType: TableClient.getEntity
  fullName: com.azure.data.tables.TableClient.getEntity
  package: com.azure.data.tables
- uid: T
  spec.java:
  - uid: T
    name: T
    fullName: T
- uid: com.azure.core.http.rest.Response<com.azure.data.tables.models.TableEntity>
  spec.java:
  - uid: com.azure.core.http.rest.Response
    name: Response
    fullName: com.azure.core.http.rest.Response
  - name: <
    fullName: <
  - uid: com.azure.data.tables.models.TableEntity
    name: TableEntity
    fullName: com.azure.data.tables.models.TableEntity
  - name: '>'
    fullName: '>'
- uid: com.azure.data.tables.TableClient.getEntityWithResponse*
  name: getEntityWithResponse
  nameWithType: TableClient.getEntityWithResponse
  fullName: com.azure.data.tables.TableClient.getEntityWithResponse
  package: com.azure.data.tables
- uid: com.azure.core.http.rest.Response<T>
  spec.java:
  - uid: com.azure.core.http.rest.Response
    name: Response
    fullName: com.azure.core.http.rest.Response
  - name: <
    fullName: <
  - uid: T
    name: T
    fullName: T
  - name: '>'
    fullName: '>'
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: java.lang.Object.finalize()
  name: Object.finalize()
  nameWithType: Object.finalize()
  fullName: java.lang.Object.finalize()
- uid: java.lang.Object.clone()
  name: Object.clone()
  nameWithType: Object.clone()
  fullName: java.lang.Object.clone()
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: java.lang.Object.equals(java.lang.Object)
  name: Object.equals(Object)
  nameWithType: Object.equals(Object)
  fullName: java.lang.Object.equals(java.lang.Object)
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.lang.Object.hashCode()
  name: Object.hashCode()
  nameWithType: Object.hashCode()
  fullName: java.lang.Object.hashCode()
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: java.lang.Object.toString()
  name: Object.toString()
  nameWithType: Object.toString()
  fullName: java.lang.Object.toString()
- uid: java.lang.Void
  name: Void
  nameWithType: Void
  fullName: java.lang.Void
- uid: com.azure.core.http.rest.Response
  name: Response
  nameWithType: Response
  fullName: com.azure.core.http.rest.Response
- uid: com.azure.core.http.rest.PagedIterable
  name: PagedIterable
  nameWithType: PagedIterable
  fullName: com.azure.core.http.rest.PagedIterable
- uid: java.lang.Class
  name: Class
  nameWithType: Class
  fullName: java.lang.Class
