### YamlMime:JavaType
uid: "com.azure.cosmos.CosmosBridgeInternal"
fullName: "com.azure.cosmos.CosmosBridgeInternal"
name: "CosmosBridgeInternal"
nameWithType: "CosmosBridgeInternal"
summary: "DO NOT USE."
inheritances:
- "<xref href=\"java.lang.Object?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
inheritedMembers:
- "java.lang.Object.clone()"
- "java.lang.Object.equals(java.lang.Object)"
- "java.lang.Object.finalize()"
- "java.lang.Object.getClass()"
- "java.lang.Object.hashCode()"
- "java.lang.Object.notify()"
- "java.lang.Object.notifyAll()"
- "java.lang.Object.toString()"
- "java.lang.Object.wait()"
- "java.lang.Object.wait(long)"
- "java.lang.Object.wait(long,int)"
syntax: "public final class CosmosBridgeInternal"
methods:
- uid: "com.azure.cosmos.CosmosBridgeInternal.<T>queryChangeFeedInternal(com.azure.cosmos.CosmosAsyncContainer,com.azure.cosmos.models.CosmosChangeFeedRequestOptions,com.azure.cosmos.implementation.query.Transformer<T>)"
  fullName: "com.azure.cosmos.CosmosBridgeInternal.<T>queryChangeFeedInternal(CosmosAsyncContainer container, CosmosChangeFeedRequestOptions changeFeedRequestOptions, Transformer<T> transformer)"
  name: "<T>queryChangeFeedInternal(CosmosAsyncContainer container, CosmosChangeFeedRequestOptions changeFeedRequestOptions, Transformer<T> transformer)"
  nameWithType: "CosmosBridgeInternal.<T>queryChangeFeedInternal(CosmosAsyncContainer container, CosmosChangeFeedRequestOptions changeFeedRequestOptions, Transformer<T> transformer)"
  modifiers:
  - "static"
  parameters:
  - name: "container"
    type: "<xref href=\"com.azure.cosmos.CosmosAsyncContainer?alt=com.azure.cosmos.CosmosAsyncContainer&text=CosmosAsyncContainer\" data-throw-if-not-resolved=\"False\" />"
  - name: "changeFeedRequestOptions"
    type: "<xref href=\"com.azure.cosmos.models.CosmosChangeFeedRequestOptions?alt=com.azure.cosmos.models.CosmosChangeFeedRequestOptions&text=CosmosChangeFeedRequestOptions\" data-throw-if-not-resolved=\"False\" />"
  - name: "transformer"
    type: "<xref href=\"com.azure.cosmos.implementation.query.Transformer?alt=com.azure.cosmos.implementation.query.Transformer&text=Transformer\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public static CosmosPagedFlux<T> <T>queryChangeFeedInternal(CosmosAsyncContainer container, CosmosChangeFeedRequestOptions changeFeedRequestOptions, Transformer<T> transformer)"
  returns:
    type: "<xref href=\"com.azure.cosmos.util.CosmosPagedFlux?alt=com.azure.cosmos.util.CosmosPagedFlux&text=CosmosPagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.cosmos.CosmosBridgeInternal.<T>queryItemsInternal(com.azure.cosmos.CosmosAsyncContainer,com.azure.cosmos.models.SqlQuerySpec,com.azure.cosmos.models.CosmosQueryRequestOptions,com.azure.cosmos.implementation.query.Transformer<T>)"
  fullName: "com.azure.cosmos.CosmosBridgeInternal.<T>queryItemsInternal(CosmosAsyncContainer container, SqlQuerySpec sqlQuerySpec, CosmosQueryRequestOptions cosmosQueryRequestOptions, Transformer<T> transformer)"
  name: "<T>queryItemsInternal(CosmosAsyncContainer container, SqlQuerySpec sqlQuerySpec, CosmosQueryRequestOptions cosmosQueryRequestOptions, Transformer<T> transformer)"
  nameWithType: "CosmosBridgeInternal.<T>queryItemsInternal(CosmosAsyncContainer container, SqlQuerySpec sqlQuerySpec, CosmosQueryRequestOptions cosmosQueryRequestOptions, Transformer<T> transformer)"
  modifiers:
  - "static"
  parameters:
  - name: "container"
    type: "<xref href=\"com.azure.cosmos.CosmosAsyncContainer?alt=com.azure.cosmos.CosmosAsyncContainer&text=CosmosAsyncContainer\" data-throw-if-not-resolved=\"False\" />"
  - name: "sqlQuerySpec"
    type: "<xref href=\"com.azure.cosmos.models.SqlQuerySpec?alt=com.azure.cosmos.models.SqlQuerySpec&text=SqlQuerySpec\" data-throw-if-not-resolved=\"False\" />"
  - name: "cosmosQueryRequestOptions"
    type: "<xref href=\"com.azure.cosmos.models.CosmosQueryRequestOptions?alt=com.azure.cosmos.models.CosmosQueryRequestOptions&text=CosmosQueryRequestOptions\" data-throw-if-not-resolved=\"False\" />"
  - name: "transformer"
    type: "<xref href=\"com.azure.cosmos.implementation.query.Transformer?alt=com.azure.cosmos.implementation.query.Transformer&text=Transformer\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public static CosmosPagedFlux<T> <T>queryItemsInternal(CosmosAsyncContainer container, SqlQuerySpec sqlQuerySpec, CosmosQueryRequestOptions cosmosQueryRequestOptions, Transformer<T> transformer)"
  returns:
    type: "<xref href=\"com.azure.cosmos.util.CosmosPagedFlux?alt=com.azure.cosmos.util.CosmosPagedFlux&text=CosmosPagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.cosmos.CosmosBridgeInternal.<T>queryItemsInternal(com.azure.cosmos.CosmosAsyncContainer,reactor.core.publisher.Mono<com.azure.cosmos.models.SqlQuerySpec>,com.azure.cosmos.models.CosmosQueryRequestOptions,com.azure.cosmos.implementation.query.Transformer<T>)"
  fullName: "com.azure.cosmos.CosmosBridgeInternal.<T>queryItemsInternal(CosmosAsyncContainer container, Mono<SqlQuerySpec> sqlQuerySpecMono, CosmosQueryRequestOptions cosmosQueryRequestOptions, Transformer<T> transformer)"
  name: "<T>queryItemsInternal(CosmosAsyncContainer container, Mono<SqlQuerySpec> sqlQuerySpecMono, CosmosQueryRequestOptions cosmosQueryRequestOptions, Transformer<T> transformer)"
  nameWithType: "CosmosBridgeInternal.<T>queryItemsInternal(CosmosAsyncContainer container, Mono<SqlQuerySpec> sqlQuerySpecMono, CosmosQueryRequestOptions cosmosQueryRequestOptions, Transformer<T> transformer)"
  modifiers:
  - "static"
  parameters:
  - name: "container"
    type: "<xref href=\"com.azure.cosmos.CosmosAsyncContainer?alt=com.azure.cosmos.CosmosAsyncContainer&text=CosmosAsyncContainer\" data-throw-if-not-resolved=\"False\" />"
  - name: "sqlQuerySpecMono"
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.cosmos.models.SqlQuerySpec?alt=com.azure.cosmos.models.SqlQuerySpec&text=SqlQuerySpec\" data-throw-if-not-resolved=\"False\" />&gt;"
  - name: "cosmosQueryRequestOptions"
    type: "<xref href=\"com.azure.cosmos.models.CosmosQueryRequestOptions?alt=com.azure.cosmos.models.CosmosQueryRequestOptions&text=CosmosQueryRequestOptions\" data-throw-if-not-resolved=\"False\" />"
  - name: "transformer"
    type: "<xref href=\"com.azure.cosmos.implementation.query.Transformer?alt=com.azure.cosmos.implementation.query.Transformer&text=Transformer\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public static CosmosPagedFlux<T> <T>queryItemsInternal(CosmosAsyncContainer container, Mono<SqlQuerySpec> sqlQuerySpecMono, CosmosQueryRequestOptions cosmosQueryRequestOptions, Transformer<T> transformer)"
  returns:
    type: "<xref href=\"com.azure.cosmos.util.CosmosPagedFlux?alt=com.azure.cosmos.util.CosmosPagedFlux&text=CosmosPagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.cosmos.CosmosBridgeInternal.cloneCosmosClientBuilder(com.azure.cosmos.CosmosClientBuilder)"
  fullName: "com.azure.cosmos.CosmosBridgeInternal.cloneCosmosClientBuilder(CosmosClientBuilder builder)"
  name: "cloneCosmosClientBuilder(CosmosClientBuilder builder)"
  nameWithType: "CosmosBridgeInternal.cloneCosmosClientBuilder(CosmosClientBuilder builder)"
  modifiers:
  - "static"
  parameters:
  - name: "builder"
    type: "<xref href=\"com.azure.cosmos.CosmosClientBuilder?alt=com.azure.cosmos.CosmosClientBuilder&text=CosmosClientBuilder\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public static CosmosClientBuilder cloneCosmosClientBuilder(CosmosClientBuilder builder)"
  returns:
    type: "<xref href=\"com.azure.cosmos.CosmosClientBuilder?alt=com.azure.cosmos.CosmosClientBuilder&text=CosmosClientBuilder\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.cosmos.CosmosBridgeInternal.cosmosException(int,java.lang.Exception)"
  fullName: "com.azure.cosmos.CosmosBridgeInternal.cosmosException(int statusCode, Exception innerException)"
  name: "cosmosException(int statusCode, Exception innerException)"
  nameWithType: "CosmosBridgeInternal.cosmosException(int statusCode, Exception innerException)"
  modifiers:
  - "static"
  parameters:
  - name: "statusCode"
    type: "<xref href=\"int?alt=int&text=int\" data-throw-if-not-resolved=\"False\" />"
  - name: "innerException"
    type: "<xref href=\"java.lang.Exception?alt=java.lang.Exception&text=Exception\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public static CosmosException cosmosException(int statusCode, Exception innerException)"
  returns:
    type: "<xref href=\"com.azure.cosmos.CosmosException?alt=com.azure.cosmos.CosmosException&text=CosmosException\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.cosmos.CosmosBridgeInternal.getAsyncDocumentClient(com.azure.cosmos.CosmosAsyncClient)"
  fullName: "com.azure.cosmos.CosmosBridgeInternal.getAsyncDocumentClient(CosmosAsyncClient client)"
  name: "getAsyncDocumentClient(CosmosAsyncClient client)"
  nameWithType: "CosmosBridgeInternal.getAsyncDocumentClient(CosmosAsyncClient client)"
  modifiers:
  - "static"
  parameters:
  - name: "client"
    type: "<xref href=\"com.azure.cosmos.CosmosAsyncClient?alt=com.azure.cosmos.CosmosAsyncClient&text=CosmosAsyncClient\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public static AsyncDocumentClient getAsyncDocumentClient(CosmosAsyncClient client)"
  returns:
    type: "<xref href=\"com.azure.cosmos.implementation.AsyncDocumentClient?alt=com.azure.cosmos.implementation.AsyncDocumentClient&text=AsyncDocumentClient\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.cosmos.CosmosBridgeInternal.getAsyncDocumentClient(com.azure.cosmos.CosmosAsyncDatabase)"
  fullName: "com.azure.cosmos.CosmosBridgeInternal.getAsyncDocumentClient(CosmosAsyncDatabase cosmosAsyncDatabase)"
  name: "getAsyncDocumentClient(CosmosAsyncDatabase cosmosAsyncDatabase)"
  nameWithType: "CosmosBridgeInternal.getAsyncDocumentClient(CosmosAsyncDatabase cosmosAsyncDatabase)"
  modifiers:
  - "static"
  parameters:
  - name: "cosmosAsyncDatabase"
    type: "<xref href=\"com.azure.cosmos.CosmosAsyncDatabase?alt=com.azure.cosmos.CosmosAsyncDatabase&text=CosmosAsyncDatabase\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public static AsyncDocumentClient getAsyncDocumentClient(CosmosAsyncDatabase cosmosAsyncDatabase)"
  returns:
    type: "<xref href=\"com.azure.cosmos.implementation.AsyncDocumentClient?alt=com.azure.cosmos.implementation.AsyncDocumentClient&text=AsyncDocumentClient\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.cosmos.CosmosBridgeInternal.getAsyncDocumentClient(com.azure.cosmos.CosmosClient)"
  fullName: "com.azure.cosmos.CosmosBridgeInternal.getAsyncDocumentClient(CosmosClient client)"
  name: "getAsyncDocumentClient(CosmosClient client)"
  nameWithType: "CosmosBridgeInternal.getAsyncDocumentClient(CosmosClient client)"
  modifiers:
  - "static"
  parameters:
  - name: "client"
    type: "<xref href=\"com.azure.cosmos.CosmosClient?alt=com.azure.cosmos.CosmosClient&text=CosmosClient\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public static AsyncDocumentClient getAsyncDocumentClient(CosmosClient client)"
  returns:
    type: "<xref href=\"com.azure.cosmos.implementation.AsyncDocumentClient?alt=com.azure.cosmos.implementation.AsyncDocumentClient&text=AsyncDocumentClient\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.cosmos.CosmosBridgeInternal.getConnectionPolicy(com.azure.cosmos.CosmosClientBuilder)"
  fullName: "com.azure.cosmos.CosmosBridgeInternal.getConnectionPolicy(CosmosClientBuilder cosmosClientBuilder)"
  name: "getConnectionPolicy(CosmosClientBuilder cosmosClientBuilder)"
  nameWithType: "CosmosBridgeInternal.getConnectionPolicy(CosmosClientBuilder cosmosClientBuilder)"
  modifiers:
  - "static"
  parameters:
  - name: "cosmosClientBuilder"
    type: "<xref href=\"com.azure.cosmos.CosmosClientBuilder?alt=com.azure.cosmos.CosmosClientBuilder&text=CosmosClientBuilder\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public static ConnectionPolicy getConnectionPolicy(CosmosClientBuilder cosmosClientBuilder)"
  returns:
    type: "<xref href=\"com.azure.cosmos.implementation.ConnectionPolicy?alt=com.azure.cosmos.implementation.ConnectionPolicy&text=ConnectionPolicy\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.cosmos.CosmosBridgeInternal.getConsistencyLevel(com.azure.cosmos.CosmosClientBuilder)"
  fullName: "com.azure.cosmos.CosmosBridgeInternal.getConsistencyLevel(CosmosClientBuilder cosmosClientBuilder)"
  name: "getConsistencyLevel(CosmosClientBuilder cosmosClientBuilder)"
  nameWithType: "CosmosBridgeInternal.getConsistencyLevel(CosmosClientBuilder cosmosClientBuilder)"
  modifiers:
  - "static"
  parameters:
  - name: "cosmosClientBuilder"
    type: "<xref href=\"com.azure.cosmos.CosmosClientBuilder?alt=com.azure.cosmos.CosmosClientBuilder&text=CosmosClientBuilder\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public static ConsistencyLevel getConsistencyLevel(CosmosClientBuilder cosmosClientBuilder)"
  returns:
    type: "<xref href=\"com.azure.cosmos.ConsistencyLevel?alt=com.azure.cosmos.ConsistencyLevel&text=ConsistencyLevel\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.cosmos.CosmosBridgeInternal.getContextClient(com.azure.cosmos.CosmosAsyncContainer)"
  fullName: "com.azure.cosmos.CosmosBridgeInternal.getContextClient(CosmosAsyncContainer container)"
  name: "getContextClient(CosmosAsyncContainer container)"
  nameWithType: "CosmosBridgeInternal.getContextClient(CosmosAsyncContainer container)"
  modifiers:
  - "static"
  parameters:
  - name: "container"
    type: "<xref href=\"com.azure.cosmos.CosmosAsyncContainer?alt=com.azure.cosmos.CosmosAsyncContainer&text=CosmosAsyncContainer\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public static AsyncDocumentClient getContextClient(CosmosAsyncContainer container)"
  returns:
    type: "<xref href=\"com.azure.cosmos.implementation.AsyncDocumentClient?alt=com.azure.cosmos.implementation.AsyncDocumentClient&text=AsyncDocumentClient\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.cosmos.CosmosBridgeInternal.getContextClient(com.azure.cosmos.CosmosAsyncDatabase)"
  fullName: "com.azure.cosmos.CosmosBridgeInternal.getContextClient(CosmosAsyncDatabase database)"
  name: "getContextClient(CosmosAsyncDatabase database)"
  nameWithType: "CosmosBridgeInternal.getContextClient(CosmosAsyncDatabase database)"
  modifiers:
  - "static"
  parameters:
  - name: "database"
    type: "<xref href=\"com.azure.cosmos.CosmosAsyncDatabase?alt=com.azure.cosmos.CosmosAsyncDatabase&text=CosmosAsyncDatabase\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public static AsyncDocumentClient getContextClient(CosmosAsyncDatabase database)"
  returns:
    type: "<xref href=\"com.azure.cosmos.implementation.AsyncDocumentClient?alt=com.azure.cosmos.implementation.AsyncDocumentClient&text=AsyncDocumentClient\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.cosmos.CosmosBridgeInternal.getCosmosAsyncContainer(com.azure.cosmos.CosmosContainer)"
  fullName: "com.azure.cosmos.CosmosBridgeInternal.getCosmosAsyncContainer(CosmosContainer container)"
  name: "getCosmosAsyncContainer(CosmosContainer container)"
  nameWithType: "CosmosBridgeInternal.getCosmosAsyncContainer(CosmosContainer container)"
  modifiers:
  - "static"
  parameters:
  - name: "container"
    type: "<xref href=\"com.azure.cosmos.CosmosContainer?alt=com.azure.cosmos.CosmosContainer&text=CosmosContainer\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public static CosmosAsyncContainer getCosmosAsyncContainer(CosmosContainer container)"
  returns:
    type: "<xref href=\"com.azure.cosmos.CosmosAsyncContainer?alt=com.azure.cosmos.CosmosAsyncContainer&text=CosmosAsyncContainer\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.cosmos.CosmosBridgeInternal.getCosmosContainerWithNewClient(com.azure.cosmos.CosmosAsyncContainer,com.azure.cosmos.CosmosAsyncDatabase,com.azure.cosmos.CosmosAsyncClient)"
  fullName: "com.azure.cosmos.CosmosBridgeInternal.getCosmosContainerWithNewClient(CosmosAsyncContainer cosmosContainer, CosmosAsyncDatabase cosmosDatabase, CosmosAsyncClient client)"
  name: "getCosmosContainerWithNewClient(CosmosAsyncContainer cosmosContainer, CosmosAsyncDatabase cosmosDatabase, CosmosAsyncClient client)"
  nameWithType: "CosmosBridgeInternal.getCosmosContainerWithNewClient(CosmosAsyncContainer cosmosContainer, CosmosAsyncDatabase cosmosDatabase, CosmosAsyncClient client)"
  modifiers:
  - "static"
  parameters:
  - name: "cosmosContainer"
    type: "<xref href=\"com.azure.cosmos.CosmosAsyncContainer?alt=com.azure.cosmos.CosmosAsyncContainer&text=CosmosAsyncContainer\" data-throw-if-not-resolved=\"False\" />"
  - name: "cosmosDatabase"
    type: "<xref href=\"com.azure.cosmos.CosmosAsyncDatabase?alt=com.azure.cosmos.CosmosAsyncDatabase&text=CosmosAsyncDatabase\" data-throw-if-not-resolved=\"False\" />"
  - name: "client"
    type: "<xref href=\"com.azure.cosmos.CosmosAsyncClient?alt=com.azure.cosmos.CosmosAsyncClient&text=CosmosAsyncClient\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public static CosmosAsyncContainer getCosmosContainerWithNewClient(CosmosAsyncContainer cosmosContainer, CosmosAsyncDatabase cosmosDatabase, CosmosAsyncClient client)"
  returns:
    type: "<xref href=\"com.azure.cosmos.CosmosAsyncContainer?alt=com.azure.cosmos.CosmosAsyncContainer&text=CosmosAsyncContainer\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.cosmos.CosmosBridgeInternal.getCosmosDatabaseWithNewClient(com.azure.cosmos.CosmosAsyncDatabase,com.azure.cosmos.CosmosAsyncClient)"
  fullName: "com.azure.cosmos.CosmosBridgeInternal.getCosmosDatabaseWithNewClient(CosmosAsyncDatabase cosmosDatabase, CosmosAsyncClient client)"
  name: "getCosmosDatabaseWithNewClient(CosmosAsyncDatabase cosmosDatabase, CosmosAsyncClient client)"
  nameWithType: "CosmosBridgeInternal.getCosmosDatabaseWithNewClient(CosmosAsyncDatabase cosmosDatabase, CosmosAsyncClient client)"
  modifiers:
  - "static"
  parameters:
  - name: "cosmosDatabase"
    type: "<xref href=\"com.azure.cosmos.CosmosAsyncDatabase?alt=com.azure.cosmos.CosmosAsyncDatabase&text=CosmosAsyncDatabase\" data-throw-if-not-resolved=\"False\" />"
  - name: "client"
    type: "<xref href=\"com.azure.cosmos.CosmosAsyncClient?alt=com.azure.cosmos.CosmosAsyncClient&text=CosmosAsyncClient\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public static CosmosAsyncDatabase getCosmosDatabaseWithNewClient(CosmosAsyncDatabase cosmosDatabase, CosmosAsyncClient client)"
  returns:
    type: "<xref href=\"com.azure.cosmos.CosmosAsyncDatabase?alt=com.azure.cosmos.CosmosAsyncDatabase&text=CosmosAsyncDatabase\" data-throw-if-not-resolved=\"False\" />"
type: "class"
desc: "DO NOT USE. For internal use only by the SDK. These methods might break at any time. No support will be provided."
metadata: {}
package: "com.azure.cosmos"
artifact: com.azure:azure-cosmos:4.26.0-beta.1
