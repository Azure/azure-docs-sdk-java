### YamlMime:JavaMember
uid: "com.fasterxml.jackson.databind.deser.DeserializationProblemHandler.handleMissingTypeId*"
fullName: "com.fasterxml.jackson.databind.deser.DeserializationProblemHandler.handleMissingTypeId"
name: "handleMissingTypeId"
nameWithType: "DeserializationProblemHandler.handleMissingTypeId"
members:
- uid: "com.fasterxml.jackson.databind.deser.DeserializationProblemHandler.handleMissingTypeId(com.fasterxml.jackson.databind.DeserializationContext,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.jsontype.TypeIdResolver,java.lang.String)"
  fullName: "com.fasterxml.jackson.databind.deser.DeserializationProblemHandler.handleMissingTypeId(DeserializationContext ctxt, JavaType baseType, TypeIdResolver idResolver, String failureMsg)"
  name: "handleMissingTypeId(DeserializationContext ctxt, JavaType baseType, TypeIdResolver idResolver, String failureMsg)"
  nameWithType: "DeserializationProblemHandler.handleMissingTypeId(DeserializationContext ctxt, JavaType baseType, TypeIdResolver idResolver, String failureMsg)"
  summary: "Handler method called if an expected type id for a polymorphic value is not found and no \"default type\" is specified or allowed. Handler may choose to do one of following things:\n\n *  Indicate it does not know what to do by returning \\`null\\`\n *  Indicate that nothing should be deserialized, by return \\`Void.class\\`\n *  Throw a <xref uid=\"java.io.IOException\" data-throw-if-not-resolved=\"false\" data-raw-source=\"IOException\"></xref> to indicate specific fail message (instead of standard exception caller would throw\n *  Return actual resolved type to use for this particular case."
  parameters:
  - description: "Deserialization context to use for accessing information or\n    constructing exception to throw"
    name: "ctxt"
    type: "<xref href=\"com.fasterxml.jackson.databind.DeserializationContext?alt=com.fasterxml.jackson.databind.DeserializationContext&text=DeserializationContext\" data-throw-if-not-resolved=\"False\" />"
  - description: "Base type to use for resolving subtype id"
    name: "baseType"
    type: "<xref href=\"com.fasterxml.jackson.databind.JavaType?alt=com.fasterxml.jackson.databind.JavaType&text=JavaType\" data-throw-if-not-resolved=\"False\" />"
  - name: "idResolver"
    type: "<xref href=\"com.fasterxml.jackson.databind.jsontype.TypeIdResolver?alt=com.fasterxml.jackson.databind.jsontype.TypeIdResolver&text=TypeIdResolver\" data-throw-if-not-resolved=\"False\" />"
  - description: "Informational message that would be thrown as part of\n    exception, if resolution still fails"
    name: "failureMsg"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public JavaType handleMissingTypeId(DeserializationContext ctxt, JavaType baseType, TypeIdResolver idResolver, String failureMsg)"
  exceptions:
  - type: "<xref href=\"java.io.IOException?alt=java.io.IOException&text=IOException\" data-throw-if-not-resolved=\"False\" />"
  returns:
    description: "Actual type to use, if resolved; `null` if handler does not know what\n     to do; or `Void.class` to indicate that nothing should be deserialized for\n     type with the id (which caller may choose to do... or not)"
    type: "<xref href=\"com.fasterxml.jackson.databind.JavaType?alt=com.fasterxml.jackson.databind.JavaType&text=JavaType\" data-throw-if-not-resolved=\"False\" />"
type: "method"
metadata: {}
package: "com.fasterxml.jackson.databind.deser"
artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
