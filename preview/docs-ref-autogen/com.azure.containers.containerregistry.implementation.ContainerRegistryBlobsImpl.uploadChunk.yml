### YamlMime:JavaMember
uid: "com.azure.containers.containerregistry.implementation.ContainerRegistryBlobsImpl.uploadChunk*"
fullName: "com.azure.containers.containerregistry.implementation.ContainerRegistryBlobsImpl.uploadChunk"
name: "uploadChunk"
nameWithType: "ContainerRegistryBlobsImpl.uploadChunk"
members:
- uid: "com.azure.containers.containerregistry.implementation.ContainerRegistryBlobsImpl.uploadChunk(java.lang.String,reactor.core.publisher.Flux<java.nio.ByteBuffer>,long)"
  fullName: "com.azure.containers.containerregistry.implementation.ContainerRegistryBlobsImpl.uploadChunk(String location, Flux<ByteBuffer> value, long contentLength)"
  name: "uploadChunk(String location, Flux<ByteBuffer> value, long contentLength)"
  nameWithType: "ContainerRegistryBlobsImpl.uploadChunk(String location, Flux<ByteBuffer> value, long contentLength)"
  summary: "Upload a stream of data without completing the upload."
  parameters:
  - description: "Link acquired from upload start or previous chunk. Note, do not include initial / (must do\n     substring(1) )."
    name: "location"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Raw data of blob."
    name: "value"
    type: "<xref href=\"reactor.core.publisher.Flux?alt=reactor.core.publisher.Flux&text=Flux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.nio.ByteBuffer?alt=java.nio.ByteBuffer&text=ByteBuffer\" data-throw-if-not-resolved=\"False\" />&gt;"
  - description: "The contentLength parameter."
    name: "contentLength"
    type: "<xref href=\"long?alt=long&text=long\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public void uploadChunk(String location, Flux<ByteBuffer> value, long contentLength)"
type: "method"
metadata: {}
package: "com.azure.containers.containerregistry.implementation"
artifact: com.azure:azure-containers-containerregistry:1.0.0-beta.1
