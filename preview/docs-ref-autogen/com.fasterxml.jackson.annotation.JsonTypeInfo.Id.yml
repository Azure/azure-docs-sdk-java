### YamlMime:ManagedReference
items:
- uid: com.fasterxml.jackson.annotation.JsonTypeInfo.Id
  id: Id
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.annotation
  children:
  - com.fasterxml.jackson.annotation.JsonTypeInfo.Id.CLASS
  - com.fasterxml.jackson.annotation.JsonTypeInfo.Id.CUSTOM
  - com.fasterxml.jackson.annotation.JsonTypeInfo.Id.MINIMAL_CLASS
  - com.fasterxml.jackson.annotation.JsonTypeInfo.Id.NAME
  - com.fasterxml.jackson.annotation.JsonTypeInfo.Id.NONE
  - com.fasterxml.jackson.annotation.JsonTypeInfo.Id.getDefaultPropertyName()
  - com.fasterxml.jackson.annotation.JsonTypeInfo.Id.valueOf(java.lang.String)
  - com.fasterxml.jackson.annotation.JsonTypeInfo.Id.values()
  langs:
  - java
  name: JsonTypeInfo.Id
  nameWithType: JsonTypeInfo.Id
  fullName: com.fasterxml.jackson.annotation.JsonTypeInfo.Id
  type: Enum
  package: com.fasterxml.jackson.annotation
  summary: Definition of different type identifiers that can be included in JSON during serialization, and used for deserialization.
  syntax:
    content: public enum JsonTypeInfo.Id extends Enum<JsonTypeInfo.Id>
  inheritance:
  - java.lang.Object
  - java.lang.Enum
  inheritedMembers:
  - java.lang.Enum.<T>valueOf(java.lang.Class<T>,java.lang.String)
  - java.lang.Enum.clone()
  - java.lang.Enum.compareTo(E)
  - java.lang.Enum.equals(java.lang.Object)
  - java.lang.Enum.finalize()
  - java.lang.Enum.getDeclaringClass()
  - java.lang.Enum.hashCode()
  - java.lang.Enum.name()
  - java.lang.Enum.ordinal()
  - java.lang.Enum.toString()
  - java.lang.Object.getClass()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
- uid: com.fasterxml.jackson.annotation.JsonTypeInfo.Id.CLASS
  id: CLASS
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.annotation.JsonTypeInfo.Id
  langs:
  - java
  name: CLASS
  nameWithType: JsonTypeInfo.Id.CLASS
  fullName: com.fasterxml.jackson.annotation.JsonTypeInfo.Id.CLASS
  type: Field
  package: com.fasterxml.jackson.annotation
  summary: Means that fully-qualified Java class name is used as the type identifier.
  syntax:
    content: public static final JsonTypeInfo.Id CLASS
    return:
      type: com.fasterxml.jackson.annotation.JsonTypeInfo.Id
- uid: com.fasterxml.jackson.annotation.JsonTypeInfo.Id.CUSTOM
  id: CUSTOM
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.annotation.JsonTypeInfo.Id
  langs:
  - java
  name: CUSTOM
  nameWithType: JsonTypeInfo.Id.CUSTOM
  fullName: com.fasterxml.jackson.annotation.JsonTypeInfo.Id.CUSTOM
  type: Field
  package: com.fasterxml.jackson.annotation
  summary: Means that typing mechanism uses customized handling, with possibly custom configuration. This means that semantics of other properties is not defined by Jackson package, but by the custom implementation.
  syntax:
    content: public static final JsonTypeInfo.Id CUSTOM
    return:
      type: com.fasterxml.jackson.annotation.JsonTypeInfo.Id
- uid: com.fasterxml.jackson.annotation.JsonTypeInfo.Id.Id(java.lang.String)
  id: Id(java.lang.String)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.annotation.JsonTypeInfo.Id
  langs:
  - java
  name: Id(String defProp)
  nameWithType: JsonTypeInfo.Id.Id(String defProp)
  fullName: com.fasterxml.jackson.annotation.JsonTypeInfo.Id.Id(String defProp)
  overload: com.fasterxml.jackson.annotation.JsonTypeInfo.Id.Id*
  type: Constructor
  package: com.fasterxml.jackson.annotation
  syntax:
    content: private Id(String defProp)
    parameters:
    - id: defProp
      type: java.lang.String
- uid: com.fasterxml.jackson.annotation.JsonTypeInfo.Id.MINIMAL_CLASS
  id: MINIMAL_CLASS
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.annotation.JsonTypeInfo.Id
  langs:
  - java
  name: MINIMAL_CLASS
  nameWithType: JsonTypeInfo.Id.MINIMAL_CLASS
  fullName: com.fasterxml.jackson.annotation.JsonTypeInfo.Id.MINIMAL_CLASS
  type: Field
  package: com.fasterxml.jackson.annotation
  summary: >-
    Means that Java class name with minimal path is used as the type identifier. Minimal means that only the class name, and that part of preceding Java package name is included that is needed to construct fully-qualified name given fully-qualified name of the declared supertype; additionally a single leading dot ('.') must be used to indicate that partial class name is used. For example, for supertype "com.foobar.Base", and concrete type "com.foo.Impl", only ".Impl" would be included; and for "com.foo.impl.Impl2" only ".impl.Impl2" would be included.

    **NOTE**: leading dot ('.') MUST be used to denote partial (minimal) name; if it is missing, value is assumed to be fully-qualified name. Fully-qualified name is used in cases where subtypes are not in same package (or sub-package thereof) as base class.


    If all related classes are in the same Java package, this option can reduce amount of type information overhead, especially for small types. However, please note that using this alternative is inherently risky since it assumes that the supertype can be reliably detected. Given that it is based on declared type (since ultimate supertype, `java.lang.Object` would not be very useful reference point), this may not always work as expected.
  syntax:
    content: public static final JsonTypeInfo.Id MINIMAL_CLASS
    return:
      type: com.fasterxml.jackson.annotation.JsonTypeInfo.Id
- uid: com.fasterxml.jackson.annotation.JsonTypeInfo.Id.NAME
  id: NAME
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.annotation.JsonTypeInfo.Id
  langs:
  - java
  name: NAME
  nameWithType: JsonTypeInfo.Id.NAME
  fullName: com.fasterxml.jackson.annotation.JsonTypeInfo.Id.NAME
  type: Field
  package: com.fasterxml.jackson.annotation
  summary: Means that logical type name is used as type information; name will then need to be separately resolved to actual concrete type (Class).
  syntax:
    content: public static final JsonTypeInfo.Id NAME
    return:
      type: com.fasterxml.jackson.annotation.JsonTypeInfo.Id
- uid: com.fasterxml.jackson.annotation.JsonTypeInfo.Id.NONE
  id: NONE
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.annotation.JsonTypeInfo.Id
  langs:
  - java
  name: NONE
  nameWithType: JsonTypeInfo.Id.NONE
  fullName: com.fasterxml.jackson.annotation.JsonTypeInfo.Id.NONE
  type: Field
  package: com.fasterxml.jackson.annotation
  summary: This means that no explicit type metadata is included, and typing is purely done using contextual information possibly augmented with other annotations.
  syntax:
    content: public static final JsonTypeInfo.Id NONE
    return:
      type: com.fasterxml.jackson.annotation.JsonTypeInfo.Id
- uid: com.fasterxml.jackson.annotation.JsonTypeInfo.Id.getDefaultPropertyName()
  id: getDefaultPropertyName()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.annotation.JsonTypeInfo.Id
  langs:
  - java
  name: getDefaultPropertyName()
  nameWithType: JsonTypeInfo.Id.getDefaultPropertyName()
  fullName: com.fasterxml.jackson.annotation.JsonTypeInfo.Id.getDefaultPropertyName()
  overload: com.fasterxml.jackson.annotation.JsonTypeInfo.Id.getDefaultPropertyName*
  type: Method
  package: com.fasterxml.jackson.annotation
  syntax:
    content: public String getDefaultPropertyName()
    return:
      type: java.lang.String
- uid: com.fasterxml.jackson.annotation.JsonTypeInfo.Id.valueOf(java.lang.String)
  id: valueOf(java.lang.String)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.annotation.JsonTypeInfo.Id
  langs:
  - java
  name: valueOf(String name)
  nameWithType: JsonTypeInfo.Id.valueOf(String name)
  fullName: com.fasterxml.jackson.annotation.JsonTypeInfo.Id.valueOf(String name)
  overload: com.fasterxml.jackson.annotation.JsonTypeInfo.Id.valueOf*
  type: Method
  package: com.fasterxml.jackson.annotation
  syntax:
    content: public static JsonTypeInfo.Id valueOf(String name)
    parameters:
    - id: name
      type: java.lang.String
    return:
      type: com.fasterxml.jackson.annotation.JsonTypeInfo.Id
- uid: com.fasterxml.jackson.annotation.JsonTypeInfo.Id.values()
  id: values()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.annotation.JsonTypeInfo.Id
  langs:
  - java
  name: values()
  nameWithType: JsonTypeInfo.Id.values()
  fullName: com.fasterxml.jackson.annotation.JsonTypeInfo.Id.values()
  overload: com.fasterxml.jackson.annotation.JsonTypeInfo.Id.values*
  type: Method
  package: com.fasterxml.jackson.annotation
  syntax:
    content: public static JsonTypeInfo.Id[] values()
    return:
      type: com.fasterxml.jackson.annotation.JsonTypeInfo.Id[]
references:
- uid: java.lang.String
  spec.java:
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
- uid: com.fasterxml.jackson.annotation.JsonTypeInfo.Id.Id*
  name: Id
  nameWithType: JsonTypeInfo.Id.Id
  fullName: com.fasterxml.jackson.annotation.JsonTypeInfo.Id.Id
  package: com.fasterxml.jackson.annotation
- uid: com.fasterxml.jackson.annotation.JsonTypeInfo.Id[]
  spec.java:
  - uid: com.fasterxml.jackson.annotation.JsonTypeInfo.Id
    name: Id
    fullName: com.fasterxml.jackson.annotation.JsonTypeInfo.Id
  - name: '[]'
    fullName: '[]'
- uid: com.fasterxml.jackson.annotation.JsonTypeInfo.Id.values*
  name: values
  nameWithType: JsonTypeInfo.Id.values
  fullName: com.fasterxml.jackson.annotation.JsonTypeInfo.Id.values
  package: com.fasterxml.jackson.annotation
- uid: com.fasterxml.jackson.annotation.JsonTypeInfo.Id.valueOf*
  name: valueOf
  nameWithType: JsonTypeInfo.Id.valueOf
  fullName: com.fasterxml.jackson.annotation.JsonTypeInfo.Id.valueOf
  package: com.fasterxml.jackson.annotation
- uid: com.fasterxml.jackson.annotation.JsonTypeInfo.Id.getDefaultPropertyName*
  name: getDefaultPropertyName
  nameWithType: JsonTypeInfo.Id.getDefaultPropertyName
  fullName: com.fasterxml.jackson.annotation.JsonTypeInfo.Id.getDefaultPropertyName
  package: com.fasterxml.jackson.annotation
- uid: java.lang.Enum<com.fasterxml.jackson.annotation.JsonTypeInfo.Id>
  name: Enum<JsonTypeInfo.Id>
  nameWithType: Enum<JsonTypeInfo.Id>
  fullName: java.lang.Enum<com.fasterxml.jackson.annotation.JsonTypeInfo.Id>
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: java.lang.Enum.toString()
  name: Enum.toString()
  nameWithType: Enum.toString()
  fullName: java.lang.Enum.toString()
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: java.lang.Enum.clone()
  name: Enum.clone()
  nameWithType: Enum.clone()
  fullName: java.lang.Enum.clone()
- uid: java.lang.Enum.finalize()
  name: Enum.finalize()
  nameWithType: Enum.finalize()
  fullName: java.lang.Enum.finalize()
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: java.lang.Enum.compareTo(E)
  name: Enum.compareTo(E)
  nameWithType: Enum.compareTo(E)
  fullName: java.lang.Enum.compareTo(E)
- uid: java.lang.Enum.name()
  name: Enum.name()
  nameWithType: Enum.name()
  fullName: java.lang.Enum.name()
- uid: java.lang.Enum.<T>valueOf(java.lang.Class<T>,java.lang.String)
  name: Enum.<T>valueOf(Class<T>,String)
  nameWithType: Enum.<T>valueOf(Class<T>,String)
  fullName: java.lang.Enum.<T>valueOf(java.lang.Class<T>,java.lang.String)
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: java.lang.Enum.getDeclaringClass()
  name: Enum.getDeclaringClass()
  nameWithType: Enum.getDeclaringClass()
  fullName: java.lang.Enum.getDeclaringClass()
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.lang.Enum.ordinal()
  name: Enum.ordinal()
  nameWithType: Enum.ordinal()
  fullName: java.lang.Enum.ordinal()
- uid: java.lang.Enum.hashCode()
  name: Enum.hashCode()
  nameWithType: Enum.hashCode()
  fullName: java.lang.Enum.hashCode()
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: java.lang.Enum.equals(java.lang.Object)
  name: Enum.equals(Object)
  nameWithType: Enum.equals(Object)
  fullName: java.lang.Enum.equals(java.lang.Object)
- uid: java.lang.Enum
  name: Enum
  nameWithType: Enum
  fullName: java.lang.Enum
- uid: java.lang.Enum.
  name: Enum.
  nameWithType: Enum.
  fullName: java.lang.Enum.
- uid: T>,java.lang.String)
  name: T>,String)
  nameWithType: T>,String)
  fullName: T>,java.lang.String)
- uid: T>valueOf(java.lang.Class
  name: T>valueOf(Class
  nameWithType: T>valueOf(Class
  fullName: T>valueOf(java.lang.Class
