### YamlMime:JavaEnum
uid: "com.fasterxml.jackson.annotation.JsonTypeInfo.Id"
fullName: "com.fasterxml.jackson.annotation.JsonTypeInfo.Id"
name: "JsonTypeInfo.Id"
nameWithType: "JsonTypeInfo.Id"
summary: "Definition of different type identifiers that can be included in JSON during serialization, and used for deserialization."
inheritances:
- "<xref href=\"java.lang.Object\" data-throw-if-not-resolved=\"False\" />"
- "<xref href=\"java.lang.Enum\" data-throw-if-not-resolved=\"False\" />"
inheritedMembers:
- "java.lang.Enum.<T>valueOf(java.lang.Class<T>,java.lang.String)"
- "java.lang.Enum.clone()"
- "java.lang.Enum.compareTo(E)"
- "java.lang.Enum.equals(java.lang.Object)"
- "java.lang.Enum.finalize()"
- "java.lang.Enum.getDeclaringClass()"
- "java.lang.Enum.hashCode()"
- "java.lang.Enum.name()"
- "java.lang.Enum.ordinal()"
- "java.lang.Enum.toString()"
- "java.lang.Object.getClass()"
- "java.lang.Object.notify()"
- "java.lang.Object.notifyAll()"
- "java.lang.Object.wait()"
- "java.lang.Object.wait(long)"
- "java.lang.Object.wait(long,int)"
syntax: "public enum JsonTypeInfo.Id extends Enum<JsonTypeInfo.Id>"
fields:
- uid: "com.fasterxml.jackson.annotation.JsonTypeInfo.Id.CLASS"
  fullName: "com.fasterxml.jackson.annotation.JsonTypeInfo.Id.CLASS"
  name: "CLASS"
  nameWithType: "JsonTypeInfo.Id.CLASS"
  summary: "Means that fully-qualified Java class name is used as the type identifier."
- uid: "com.fasterxml.jackson.annotation.JsonTypeInfo.Id.CUSTOM"
  fullName: "com.fasterxml.jackson.annotation.JsonTypeInfo.Id.CUSTOM"
  name: "CUSTOM"
  nameWithType: "JsonTypeInfo.Id.CUSTOM"
  summary: "Means that typing mechanism uses customized handling, with possibly custom configuration. This means that semantics of other properties is not defined by Jackson package, but by the custom implementation."
- uid: "com.fasterxml.jackson.annotation.JsonTypeInfo.Id.MINIMAL_CLASS"
  fullName: "com.fasterxml.jackson.annotation.JsonTypeInfo.Id.MINIMAL_CLASS"
  name: "MINIMAL_CLASS"
  nameWithType: "JsonTypeInfo.Id.MINIMAL_CLASS"
  summary: "Means that Java class name with minimal path is used as the type identifier. Minimal means that only the class name, and that part of preceding Java package name is included that is needed to construct fully-qualified name given fully-qualified name of the declared supertype; additionally a single leading dot ('.') must be used to indicate that partial class name is used. For example, for supertype \"com.foobar.Base\", and concrete type \"com.foo.Impl\", only \".Impl\" would be included; and for \"com.foo.impl.Impl2\" only \".impl.Impl2\" would be included.\n**NOTE**: leading dot ('.') MUST be used to denote partial (minimal) name; if it is missing, value is assumed to be fully-qualified name. Fully-qualified name is used in cases where subtypes are not in same package (or sub-package thereof) as base class.\n\nIf all related classes are in the same Java package, this option can reduce amount of type information overhead, especially for small types. However, please note that using this alternative is inherently risky since it assumes that the supertype can be reliably detected. Given that it is based on declared type (since ultimate supertype, `java.lang.Object` would not be very useful reference point), this may not always work as expected."
- uid: "com.fasterxml.jackson.annotation.JsonTypeInfo.Id.NAME"
  fullName: "com.fasterxml.jackson.annotation.JsonTypeInfo.Id.NAME"
  name: "NAME"
  nameWithType: "JsonTypeInfo.Id.NAME"
  summary: "Means that logical type name is used as type information; name will then need to be separately resolved to actual concrete type (Class)."
- uid: "com.fasterxml.jackson.annotation.JsonTypeInfo.Id.NONE"
  fullName: "com.fasterxml.jackson.annotation.JsonTypeInfo.Id.NONE"
  name: "NONE"
  nameWithType: "JsonTypeInfo.Id.NONE"
  summary: "This means that no explicit type metadata is included, and typing is purely done using contextual information possibly augmented with other annotations."
methods:
- uid: "com.fasterxml.jackson.annotation.JsonTypeInfo.Id.getDefaultPropertyName()"
  fullName: "com.fasterxml.jackson.annotation.JsonTypeInfo.Id.getDefaultPropertyName()"
  name: "getDefaultPropertyName()"
  nameWithType: "JsonTypeInfo.Id.getDefaultPropertyName()"
  syntax: "public String getDefaultPropertyName()"
  returns:
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.fasterxml.jackson.annotation.JsonTypeInfo.Id.valueOf(java.lang.String)"
  fullName: "com.fasterxml.jackson.annotation.JsonTypeInfo.Id.valueOf(String name)"
  name: "valueOf(String name)"
  nameWithType: "JsonTypeInfo.Id.valueOf(String name)"
  parameters:
  - name: "name"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public static JsonTypeInfo.Id valueOf(String name)"
  returns:
    type: "<xref href=\"com.fasterxml.jackson.annotation.JsonTypeInfo.Id?alt=com.fasterxml.jackson.annotation.JsonTypeInfo.Id&text=Id\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.fasterxml.jackson.annotation.JsonTypeInfo.Id.values()"
  fullName: "com.fasterxml.jackson.annotation.JsonTypeInfo.Id.values()"
  name: "values()"
  nameWithType: "JsonTypeInfo.Id.values()"
  syntax: "public static JsonTypeInfo.Id[] values()"
  returns:
    type: "<xref href=\"com.fasterxml.jackson.annotation.JsonTypeInfo.Id?alt=com.fasterxml.jackson.annotation.JsonTypeInfo.Id&text=Id\" data-throw-if-not-resolved=\"False\" />[]"
metadata: {}
package: "com.fasterxml.jackson.annotation"
artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
