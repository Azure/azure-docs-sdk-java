### YamlMime:JavaMember
uid: "com.fasterxml.jackson.databind.type.TypeFactory.constructRawCollectionType*"
fullName: "com.fasterxml.jackson.databind.type.TypeFactory.constructRawCollectionType"
name: "constructRawCollectionType"
nameWithType: "TypeFactory.constructRawCollectionType"
members:
- uid: "com.fasterxml.jackson.databind.type.TypeFactory.constructRawCollectionType(java.lang.Class<? extends java.util.Collection>)"
  fullName: "com.fasterxml.jackson.databind.type.TypeFactory.constructRawCollectionType(Class<? extends Collection> collectionClass)"
  name: "constructRawCollectionType(Class<? extends Collection> collectionClass)"
  nameWithType: "TypeFactory.constructRawCollectionType(Class<? extends Collection> collectionClass)"
  summary: "Method that can be used to construct \"raw\" Collection type; meaning that its parameterization is unknown. This is similar to using `Object.class` parameterization, and is equivalent to calling:\n\n```java\ntypeFactory.constructCollectionType(collectionClass, typeFactory.unknownType());\n```\n\nThis method should only be used if parameterization is completely unavailable."
  parameters:
  - name: "collectionClass"
    type: "<xref href=\"java.lang.Class?alt=java.lang.Class&text=Class\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"? extends java.util.Collection?alt=? extends java.util.Collection&text=Collection\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public CollectionType constructRawCollectionType(Class<? extends Collection> collectionClass)"
  returns:
    type: "<xref href=\"com.fasterxml.jackson.databind.type.CollectionType?alt=com.fasterxml.jackson.databind.type.CollectionType&text=CollectionType\" data-throw-if-not-resolved=\"False\" />"
type: "method"
metadata: {}
package: "com.fasterxml.jackson.databind.type"
artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
