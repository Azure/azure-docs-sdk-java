### YamlMime:JavaMember
uid: "com.azure.cosmos.implementation.guava25.collect.Maps.asMap*"
fullName: "com.azure.cosmos.implementation.guava25.collect.Maps.<K,V>asMap"
name: "<K,V>asMap"
nameWithType: "Maps.<K,V>asMap"
members:
- uid: "com.azure.cosmos.implementation.guava25.collect.Maps.<K,V>asMap(java.util.NavigableSet<K>,com.azure.cosmos.implementation.guava25.base.Function<? super K,V>)"
  fullName: "com.azure.cosmos.implementation.guava25.collect.Maps.<K,V>asMap(NavigableSet<K> set, Function<? super K,V> function)"
  name: "<K,V>asMap(NavigableSet<K> set, Function<? super K,V> function)"
  nameWithType: "Maps.<K,V>asMap(NavigableSet<K> set, Function<? super K,V> function)"
  summary: "Returns a view of the navigable set as a map, mapping keys from the set according to the specified function.\n\nSpecifically, for each `k` in the backing set, the returned map has an entry mapping `k` to `function.apply(k)`. The `keySet`, `values`, and `entrySet` views of the returned map iterate in the same order as the backing set.\n\nModifications to the backing set are read through to the returned map. The returned map supports removal operations if the backing set does. Removal operations write through to the backing set. The returned map does not support put operations.\n\n**Warning:** If the function rejects `null`, caution is required to make sure the set does not contain `null`, because the view cannot stop `null` from being added to the set.\n\n**Warning:** This method assumes that for any instance `k` of key type `K`, `k.equals(k2)` implies that `k2` is also of type `K`. Using a key type for which this may not hold, such as `ArrayList`, may risk a `ClassCastException` when calling methods on the resulting map view."
  parameters:
  - name: "set"
    type: "<xref href=\"java.util.NavigableSet?alt=java.util.NavigableSet&text=NavigableSet\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"K?alt=K&text=K\" data-throw-if-not-resolved=\"False\" />&gt;"
  - name: "function"
    type: "<xref href=\"com.azure.cosmos.implementation.guava25.base.Function?alt=com.azure.cosmos.implementation.guava25.base.Function&text=Function\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"? super K?alt=? super K&text=? super K\" data-throw-if-not-resolved=\"False\" />,<xref href=\"V?alt=V&text=V\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public static NavigableMap<K,V> <K,V>asMap(NavigableSet<K> set, Function<? super K,V> function)"
  returns:
    type: "<xref href=\"java.util.NavigableMap?alt=java.util.NavigableMap&text=NavigableMap\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"K?alt=K&text=K\" data-throw-if-not-resolved=\"False\" />,<xref href=\"V?alt=V&text=V\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.cosmos.implementation.guava25.collect.Maps.<K,V>asMap(java.util.Set<K>,com.azure.cosmos.implementation.guava25.base.Function<? super K,V>)"
  fullName: "com.azure.cosmos.implementation.guava25.collect.Maps.<K,V>asMap(Set<K> set, Function<? super K,V> function)"
  name: "<K,V>asMap(Set<K> set, Function<? super K,V> function)"
  nameWithType: "Maps.<K,V>asMap(Set<K> set, Function<? super K,V> function)"
  summary: "Returns a live <xref uid=\"java.util.Map\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Map\"></xref> view whose keys are the contents of `set` and whose values are computed on demand using `function`. To get an immutable *copy* instead, use <xref uid=\"com.azure.cosmos.implementation.guava25.collect.Maps.&lt;K,V&gt;toMap(java.lang.Iterable&lt;K&gt;,com.azure.cosmos.implementation.guava25.base.Function&lt;? super K,V&gt;)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#toMap(Iterable, Function)\"></xref>.\n\nSpecifically, for each `k` in the backing set, the returned map has an entry mapping `k` to `function.apply(k)`. The `keySet`, `values`, and `entrySet` views of the returned map iterate in the same order as the backing set.\n\nModifications to the backing set are read through to the returned map. The returned map supports removal operations if the backing set does. Removal operations write through to the backing set. The returned map does not support put operations.\n\n**Warning:** If the function rejects `null`, caution is required to make sure the set does not contain `null`, because the view cannot stop `null` from being added to the set.\n\n**Warning:** This method assumes that for any instance `k` of key type `K`, `k.equals(k2)` implies that `k2` is also of type `K`. Using a key type for which this may not hold, such as `ArrayList`, may risk a `ClassCastException` when calling methods on the resulting map view."
  parameters:
  - name: "set"
    type: "<xref href=\"java.util.Set?alt=java.util.Set&text=Set\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"K?alt=K&text=K\" data-throw-if-not-resolved=\"False\" />&gt;"
  - name: "function"
    type: "<xref href=\"com.azure.cosmos.implementation.guava25.base.Function?alt=com.azure.cosmos.implementation.guava25.base.Function&text=Function\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"? super K?alt=? super K&text=? super K\" data-throw-if-not-resolved=\"False\" />,<xref href=\"V?alt=V&text=V\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public static Map<K,V> <K,V>asMap(Set<K> set, Function<? super K,V> function)"
  returns:
    type: "<xref href=\"java.util.Map?alt=java.util.Map&text=Map\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"K?alt=K&text=K\" data-throw-if-not-resolved=\"False\" />,<xref href=\"V?alt=V&text=V\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.cosmos.implementation.guava25.collect.Maps.<K,V>asMap(java.util.SortedSet<K>,com.azure.cosmos.implementation.guava25.base.Function<? super K,V>)"
  fullName: "com.azure.cosmos.implementation.guava25.collect.Maps.<K,V>asMap(SortedSet<K> set, Function<? super K,V> function)"
  name: "<K,V>asMap(SortedSet<K> set, Function<? super K,V> function)"
  nameWithType: "Maps.<K,V>asMap(SortedSet<K> set, Function<? super K,V> function)"
  summary: "Returns a view of the sorted set as a map, mapping keys from the set according to the specified function.\n\nSpecifically, for each `k` in the backing set, the returned map has an entry mapping `k` to `function.apply(k)`. The `keySet`, `values`, and `entrySet` views of the returned map iterate in the same order as the backing set.\n\nModifications to the backing set are read through to the returned map. The returned map supports removal operations if the backing set does. Removal operations write through to the backing set. The returned map does not support put operations.\n\n**Warning:** If the function rejects `null`, caution is required to make sure the set does not contain `null`, because the view cannot stop `null` from being added to the set.\n\n**Warning:** This method assumes that for any instance `k` of key type `K`, `k.equals(k2)` implies that `k2` is also of type `K`. Using a key type for which this may not hold, such as `ArrayList`, may risk a `ClassCastException` when calling methods on the resulting map view."
  parameters:
  - name: "set"
    type: "<xref href=\"java.util.SortedSet?alt=java.util.SortedSet&text=SortedSet\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"K?alt=K&text=K\" data-throw-if-not-resolved=\"False\" />&gt;"
  - name: "function"
    type: "<xref href=\"com.azure.cosmos.implementation.guava25.base.Function?alt=com.azure.cosmos.implementation.guava25.base.Function&text=Function\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"? super K?alt=? super K&text=? super K\" data-throw-if-not-resolved=\"False\" />,<xref href=\"V?alt=V&text=V\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public static SortedMap<K,V> <K,V>asMap(SortedSet<K> set, Function<? super K,V> function)"
  returns:
    type: "<xref href=\"java.util.SortedMap?alt=java.util.SortedMap&text=SortedMap\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"K?alt=K&text=K\" data-throw-if-not-resolved=\"False\" />,<xref href=\"V?alt=V&text=V\" data-throw-if-not-resolved=\"False\" />&gt;"
type: "method"
metadata: {}
package: "com.azure.cosmos.implementation.guava25.collect"
artifact: com.azure:azure-cosmos:4.4.0-beta.1
