### YamlMime:ManagedReference
items:
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableListMultimap
  id: ImmutableListMultimap
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect
  children:
  - com.azure.cosmos.implementation.guava25.collect.ImmutableListMultimap.<K,V>builder()
  - com.azure.cosmos.implementation.guava25.collect.ImmutableListMultimap.<K,V>copyOf(com.azure.cosmos.implementation.guava25.collect.Multimap<? extends K,? extends V>)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableListMultimap.<K,V>copyOf(java.lang.Iterable<? extends java.util.Map.Entry<? extends K,? extends V>>)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableListMultimap.<K,V>of()
  - com.azure.cosmos.implementation.guava25.collect.ImmutableListMultimap.<K,V>of(K,V)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableListMultimap.<K,V>of(K,V,K,V)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableListMultimap.<K,V>of(K,V,K,V,K,V)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableListMultimap.<K,V>of(K,V,K,V,K,V,K,V)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableListMultimap.<K,V>of(K,V,K,V,K,V,K,V,K,V)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableListMultimap.<T,K,V>flatteningToImmutableListMultimap(java.util.function.Function<? super T,? extends K>,java.util.function.Function<? super T,? extends java.util.stream.Stream<? extends V>>)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableListMultimap.<T,K,V>toImmutableListMultimap(java.util.function.Function<? super T,? extends K>,java.util.function.Function<? super T,? extends V>)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableListMultimap.Builder
  - com.azure.cosmos.implementation.guava25.collect.ImmutableListMultimap.get(K)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableListMultimap.inverse()
  - com.azure.cosmos.implementation.guava25.collect.ImmutableListMultimap.removeAll(java.lang.Object)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableListMultimap.replaceValues(K,java.lang.Iterable<? extends V>)
  langs:
  - java
  name: ImmutableListMultimap<K,V>
  nameWithType: ImmutableListMultimap<K,V>
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableListMultimap<K,V>
  type: Class
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    A <xref uid="com.azure.cosmos.implementation.guava25.collect.ListMultimap" data-throw-if-not-resolved="false">ListMultimap</xref> whose contents will never change, with many other important properties detailed at <xref uid="com.azure.cosmos.implementation.guava25.collect.ImmutableCollection" data-throw-if-not-resolved="false">ImmutableCollection</xref>.


    See the Guava User Guide article on [ immutable collections][immutable collections].



    [immutable collections]: https://github.com/google/guava/wiki/ImmutableCollectionsExplained
  syntax:
    content: public class ImmutableListMultimap<K,V> extends ImmutableMultimap<K,V> implements ListMultimap<K,V>
    typeParameters:
    - id: K
    - id: V
  inheritance:
  - java.lang.Object
  - com.azure.cosmos.implementation.guava25.collect.AbstractMultimap
  - com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap
  implements:
  - com.azure.cosmos.implementation.guava25.collect.ListMultimap<K,V>
  inheritedMembers:
  - com.azure.cosmos.implementation.guava25.collect.AbstractMultimap.containsEntry(java.lang.Object,java.lang.Object)
  - com.azure.cosmos.implementation.guava25.collect.AbstractMultimap.equals(java.lang.Object)
  - com.azure.cosmos.implementation.guava25.collect.AbstractMultimap.hashCode()
  - com.azure.cosmos.implementation.guava25.collect.AbstractMultimap.isEmpty()
  - com.azure.cosmos.implementation.guava25.collect.AbstractMultimap.toString()
  - com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap.<K,V>builder()
  - com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap.<K,V>copyOf(com.azure.cosmos.implementation.guava25.collect.Multimap<? extends K,? extends V>)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap.<K,V>copyOf(java.lang.Iterable<? extends java.util.Map.Entry<? extends K,? extends V>>)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap.<K,V>of()
  - com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap.<K,V>of(K,V)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap.<K,V>of(K,V,K,V)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap.<K,V>of(K,V,K,V,K,V)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap.<K,V>of(K,V,K,V,K,V,K,V)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap.<K,V>of(K,V,K,V,K,V,K,V,K,V)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap.asMap()
  - com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap.clear()
  - com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap.containsKey(java.lang.Object)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap.containsValue(java.lang.Object)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap.entries()
  - com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap.forEach(java.util.function.BiConsumer<? super K,? super V>)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap.get(K)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap.inverse()
  - com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap.keySet()
  - com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap.keys()
  - com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap.put(K,V)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap.putAll(K,java.lang.Iterable<? extends V>)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap.putAll(com.azure.cosmos.implementation.guava25.collect.Multimap<? extends K,? extends V>)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap.remove(java.lang.Object,java.lang.Object)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap.removeAll(java.lang.Object)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap.replaceValues(K,java.lang.Iterable<? extends V>)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap.size()
  - com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap.values()
  - java.lang.Object.clone()
  - java.lang.Object.finalize()
  - java.lang.Object.getClass()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableListMultimap.<K,V>builder()
  id: <K,V>builder()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableListMultimap
  langs:
  - java
  name: <K,V>builder()
  nameWithType: ImmutableListMultimap<K,V>.<K,V>builder()
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableListMultimap<K,V>.<K,V>builder()
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableListMultimap.builder*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Returns a new builder. The generated builder is equivalent to the builder created by the <xref uid="com.azure.cosmos.implementation.guava25.collect.ImmutableListMultimap.Builder" data-throw-if-not-resolved="false">Builder</xref> constructor.
  syntax:
    content: public static ImmutableListMultimap.Builder<K,V> <K,V>builder()
    return:
      type: com.azure.cosmos.implementation.guava25.collect.ImmutableListMultimap.Builder<K,V>
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableListMultimap.<K,V>copyOf(com.azure.cosmos.implementation.guava25.collect.Multimap<? extends K,? extends V>)
  id: <K,V>copyOf(com.azure.cosmos.implementation.guava25.collect.Multimap<? extends K,? extends V>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableListMultimap
  langs:
  - java
  name: <K,V>copyOf(Multimap<? extends K,? extends V> multimap)
  nameWithType: ImmutableListMultimap<K,V>.<K,V>copyOf(Multimap<? extends K,? extends V> multimap)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableListMultimap<K,V>.<K,V>copyOf(Multimap<? extends K,? extends V> multimap)
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableListMultimap.copyOf*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Returns an immutable multimap containing the same mappings as `multimap`. The generated multimap's key and value orderings correspond to the iteration ordering of the `multimap.asMap()` view.


    Despite the method name, this method attempts to avoid actually copying the data when it is safe to do so. The exact circumstances under which a copy will or will not be performed are undocumented and subject to change.
  syntax:
    content: public static ImmutableListMultimap<K,V> <K,V>copyOf(Multimap<? extends K,? extends V> multimap)
    parameters:
    - id: multimap
      type: com.azure.cosmos.implementation.guava25.collect.Multimap<? extends K,? extends V>
    return:
      type: com.azure.cosmos.implementation.guava25.collect.ImmutableListMultimap<K,V>
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableListMultimap.<K,V>copyOf(java.lang.Iterable<? extends java.util.Map.Entry<? extends K,? extends V>>)
  id: <K,V>copyOf(java.lang.Iterable<? extends java.util.Map.Entry<? extends K,? extends V>>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableListMultimap
  langs:
  - java
  name: <K,V>copyOf(Iterable<? extends Map.Entry<? extends K,? extends V>> entries)
  nameWithType: ImmutableListMultimap<K,V>.<K,V>copyOf(Iterable<? extends Map.Entry<? extends K,? extends V>> entries)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableListMultimap<K,V>.<K,V>copyOf(Iterable<? extends Map.Entry<? extends K,? extends V>> entries)
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableListMultimap.copyOf*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Returns an immutable multimap containing the specified entries. The returned multimap iterates over keys in the order they were first encountered in the input, and the values for each key are iterated in the order they were encountered.
  syntax:
    content: public static ImmutableListMultimap<K,V> <K,V>copyOf(Iterable<? extends Map.Entry<? extends K,? extends V>> entries)
    parameters:
    - id: entries
      type: java.lang.Iterable<? extends java.util.Map.Entry<? extends K,? extends V>>
    return:
      type: com.azure.cosmos.implementation.guava25.collect.ImmutableListMultimap<K,V>
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableListMultimap.<K,V>of()
  id: <K,V>of()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableListMultimap
  langs:
  - java
  name: <K,V>of()
  nameWithType: ImmutableListMultimap<K,V>.<K,V>of()
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableListMultimap<K,V>.<K,V>of()
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableListMultimap.of*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Returns the empty multimap.
  syntax:
    content: public static ImmutableListMultimap<K,V> <K,V>of()
    return:
      type: com.azure.cosmos.implementation.guava25.collect.ImmutableListMultimap<K,V>
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableListMultimap.<K,V>of(K,V)
  id: <K,V>of(K,V)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableListMultimap
  langs:
  - java
  name: <K,V>of(K k1, V v1)
  nameWithType: ImmutableListMultimap<K,V>.<K,V>of(K k1, V v1)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableListMultimap<K,V>.<K,V>of(K k1, V v1)
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableListMultimap.of*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Returns an immutable multimap containing a single entry.
  syntax:
    content: public static ImmutableListMultimap<K,V> <K,V>of(K k1, V v1)
    parameters:
    - id: k1
      type: K
    - id: v1
      type: V
    return:
      type: com.azure.cosmos.implementation.guava25.collect.ImmutableListMultimap<K,V>
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableListMultimap.<K,V>of(K,V,K,V)
  id: <K,V>of(K,V,K,V)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableListMultimap
  langs:
  - java
  name: <K,V>of(K k1, V v1, K k2, V v2)
  nameWithType: ImmutableListMultimap<K,V>.<K,V>of(K k1, V v1, K k2, V v2)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableListMultimap<K,V>.<K,V>of(K k1, V v1, K k2, V v2)
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableListMultimap.of*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Returns an immutable multimap containing the given entries, in order.
  syntax:
    content: public static ImmutableListMultimap<K,V> <K,V>of(K k1, V v1, K k2, V v2)
    parameters:
    - id: k1
      type: K
    - id: v1
      type: V
    - id: k2
      type: K
    - id: v2
      type: V
    return:
      type: com.azure.cosmos.implementation.guava25.collect.ImmutableListMultimap<K,V>
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableListMultimap.<K,V>of(K,V,K,V,K,V)
  id: <K,V>of(K,V,K,V,K,V)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableListMultimap
  langs:
  - java
  name: <K,V>of(K k1, V v1, K k2, V v2, K k3, V v3)
  nameWithType: ImmutableListMultimap<K,V>.<K,V>of(K k1, V v1, K k2, V v2, K k3, V v3)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableListMultimap<K,V>.<K,V>of(K k1, V v1, K k2, V v2, K k3, V v3)
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableListMultimap.of*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Returns an immutable multimap containing the given entries, in order.
  syntax:
    content: public static ImmutableListMultimap<K,V> <K,V>of(K k1, V v1, K k2, V v2, K k3, V v3)
    parameters:
    - id: k1
      type: K
    - id: v1
      type: V
    - id: k2
      type: K
    - id: v2
      type: V
    - id: k3
      type: K
    - id: v3
      type: V
    return:
      type: com.azure.cosmos.implementation.guava25.collect.ImmutableListMultimap<K,V>
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableListMultimap.<K,V>of(K,V,K,V,K,V,K,V)
  id: <K,V>of(K,V,K,V,K,V,K,V)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableListMultimap
  langs:
  - java
  name: <K,V>of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4)
  nameWithType: ImmutableListMultimap<K,V>.<K,V>of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableListMultimap<K,V>.<K,V>of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4)
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableListMultimap.of*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Returns an immutable multimap containing the given entries, in order.
  syntax:
    content: public static ImmutableListMultimap<K,V> <K,V>of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4)
    parameters:
    - id: k1
      type: K
    - id: v1
      type: V
    - id: k2
      type: K
    - id: v2
      type: V
    - id: k3
      type: K
    - id: v3
      type: V
    - id: k4
      type: K
    - id: v4
      type: V
    return:
      type: com.azure.cosmos.implementation.guava25.collect.ImmutableListMultimap<K,V>
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableListMultimap.<K,V>of(K,V,K,V,K,V,K,V,K,V)
  id: <K,V>of(K,V,K,V,K,V,K,V,K,V)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableListMultimap
  langs:
  - java
  name: <K,V>of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)
  nameWithType: ImmutableListMultimap<K,V>.<K,V>of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableListMultimap<K,V>.<K,V>of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableListMultimap.of*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Returns an immutable multimap containing the given entries, in order.
  syntax:
    content: public static ImmutableListMultimap<K,V> <K,V>of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)
    parameters:
    - id: k1
      type: K
    - id: v1
      type: V
    - id: k2
      type: K
    - id: v2
      type: V
    - id: k3
      type: K
    - id: v3
      type: V
    - id: k4
      type: K
    - id: v4
      type: V
    - id: k5
      type: K
    - id: v5
      type: V
    return:
      type: com.azure.cosmos.implementation.guava25.collect.ImmutableListMultimap<K,V>
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableListMultimap.<T,K,V>flatteningToImmutableListMultimap(java.util.function.Function<? super T,? extends K>,java.util.function.Function<? super T,? extends java.util.stream.Stream<? extends V>>)
  id: <T,K,V>flatteningToImmutableListMultimap(java.util.function.Function<? super T,? extends K>,java.util.function.Function<? super T,? extends java.util.stream.Stream<? extends V>>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableListMultimap
  langs:
  - java
  name: <T,K,V>flatteningToImmutableListMultimap(Function<? super T,? extends K> keyFunction, Function<? super T,? extends Stream<? extends V>> valuesFunction)
  nameWithType: ImmutableListMultimap<K,V>.<T,K,V>flatteningToImmutableListMultimap(Function<? super T,? extends K> keyFunction, Function<? super T,? extends Stream<? extends V>> valuesFunction)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableListMultimap<K,V>.<T,K,V>flatteningToImmutableListMultimap(Function<? super T,? extends K> keyFunction, Function<? super T,? extends Stream<? extends V>> valuesFunction)
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableListMultimap.flatteningToImmutableListMultimap*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: "Returns a `Collector` accumulating entries into an `ImmutableListMultimap`. Each input element is mapped to a key and a stream of values, each of which are put into the resulting `Multimap`, in the encounter order of the stream and the encounter order of the streams of values.\n\nExample:\n\n```java\nstatic final ImmutableListMultimap FIRST_LETTER_MULTIMAP =\n     Stream.of(\"banana\", \"apple\", \"carrot\", \"asparagus\", \"cherry\")\n         .collect(\n             flatteningToImmutableListMultimap(\n                  str -> str.charAt(0),\n                  str -> str.substring(1).chars().mapToObj(c -> (char) c));\n\n // is equivalent to\n\n static final ImmutableListMultimap FIRST_LETTER_MULTIMAP =\n     ImmutableListMultimap.builder()\n         .putAll('b', Arrays.asList('a', 'n', 'a', 'n', 'a'))\n         .putAll('a', Arrays.asList('p', 'p', 'l', 'e'))\n         .putAll('c', Arrays.asList('a', 'r', 'r', 'o', 't'))\n         .putAll('a', Arrays.asList('s', 'p', 'a', 'r', 'a', 'g', 'u', 's'))\n         .putAll('c', Arrays.asList('h', 'e', 'r', 'r', 'y'))\n         .build();\n \n }\n```"
  syntax:
    content: public static Collector<T,?,ImmutableListMultimap<K,V>> <T,K,V>flatteningToImmutableListMultimap(Function<? super T,? extends K> keyFunction, Function<? super T,? extends Stream<? extends V>> valuesFunction)
    parameters:
    - id: keyFunction
      type: java.util.function.Function<? super T,? extends K>
    - id: valuesFunction
      type: java.util.function.Function<? super T,? extends java.util.stream.Stream<? extends V>>
    return:
      type: java.util.stream.Collector<T,?,com.azure.cosmos.implementation.guava25.collect.ImmutableListMultimap<K,V>>
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableListMultimap.<T,K,V>toImmutableListMultimap(java.util.function.Function<? super T,? extends K>,java.util.function.Function<? super T,? extends V>)
  id: <T,K,V>toImmutableListMultimap(java.util.function.Function<? super T,? extends K>,java.util.function.Function<? super T,? extends V>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableListMultimap
  langs:
  - java
  name: <T,K,V>toImmutableListMultimap(Function<? super T,? extends K> keyFunction, Function<? super T,? extends V> valueFunction)
  nameWithType: ImmutableListMultimap<K,V>.<T,K,V>toImmutableListMultimap(Function<? super T,? extends K> keyFunction, Function<? super T,? extends V> valueFunction)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableListMultimap<K,V>.<T,K,V>toImmutableListMultimap(Function<? super T,? extends K> keyFunction, Function<? super T,? extends V> valueFunction)
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableListMultimap.toImmutableListMultimap*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Returns a <xref uid="java.util.stream.Collector" data-throw-if-not-resolved="false">Collector</xref> that accumulates elements into an `ImmutableListMultimap` whose keys and values are the result of applying the provided mapping functions to the input elements.


    For streams with <xref uid="" data-throw-if-not-resolved="false">defined encounter order</xref>, that order is preserved, but entries are grouped by key.


    Example:


    ```java

    static final Multimap FIRST_LETTER_MULTIMAP =
         Stream.of("banana", "apple", "carrot", "asparagus", "cherry")
             .collect(toImmutableListMultimap(str -> str.charAt(0), str -> str.substring(1)));

     // is equivalent to

     static final Multimap FIRST_LETTER_MULTIMAP =
         new ImmutableListMultimap.Builder()
             .put('b', "anana")
             .putAll('a', "pple", "sparagus")
             .putAll('c', "arrot", "herry")
             .build();
    ```
  syntax:
    content: public static Collector<T,?,ImmutableListMultimap<K,V>> <T,K,V>toImmutableListMultimap(Function<? super T,? extends K> keyFunction, Function<? super T,? extends V> valueFunction)
    parameters:
    - id: keyFunction
      type: java.util.function.Function<? super T,? extends K>
    - id: valueFunction
      type: java.util.function.Function<? super T,? extends V>
    return:
      type: java.util.stream.Collector<T,?,com.azure.cosmos.implementation.guava25.collect.ImmutableListMultimap<K,V>>
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableListMultimap.ImmutableListMultimap(com.azure.cosmos.implementation.guava25.collect.ImmutableMap<K,com.azure.cosmos.implementation.guava25.collect.ImmutableList<V>>,int)
  id: ImmutableListMultimap(com.azure.cosmos.implementation.guava25.collect.ImmutableMap<K,com.azure.cosmos.implementation.guava25.collect.ImmutableList<V>>,int)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableListMultimap
  langs:
  - java
  name: ImmutableListMultimap(ImmutableMap<K,ImmutableList<V>> map, int size)
  nameWithType: ImmutableListMultimap<K,V>.ImmutableListMultimap(ImmutableMap<K,ImmutableList<V>> map, int size)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableListMultimap<K,V>.ImmutableListMultimap(ImmutableMap<K,ImmutableList<V>> map, int size)
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableListMultimap.ImmutableListMultimap*
  type: Constructor
  package: com.azure.cosmos.implementation.guava25.collect
  syntax:
    content: " ImmutableListMultimap(ImmutableMap<K,ImmutableList<V>> map, int size)"
    parameters:
    - id: map
      type: com.azure.cosmos.implementation.guava25.collect.ImmutableMap<K,com.azure.cosmos.implementation.guava25.collect.ImmutableList<V>>
    - id: size
      type: int
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableListMultimap.get(K)
  id: get(K)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableListMultimap
  langs:
  - java
  name: get(K key)
  nameWithType: ImmutableListMultimap<K,V>.get(K key)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableListMultimap<K,V>.get(K key)
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableListMultimap.get*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Returns an immutable list of the values for the given key. If no mappings in the multimap have the provided key, an empty immutable list is returned. The values are in the same order as the parameters used to build this multimap.
  syntax:
    content: public ImmutableList<V> get(K key)
    parameters:
    - id: key
      type: K
    return:
      type: com.azure.cosmos.implementation.guava25.collect.ImmutableList<V>
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableListMultimap.inverse()
  id: inverse()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableListMultimap
  langs:
  - java
  name: inverse()
  nameWithType: ImmutableListMultimap<K,V>.inverse()
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableListMultimap<K,V>.inverse()
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableListMultimap.inverse*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Returns an immutable multimap which is the inverse of this one. For every key-value mapping in the original, the result will have a mapping with key and value reversed.


    Because an inverse of a list multimap can contain multiple pairs with the same key and value, this method returns an `ImmutableListMultimap` rather than the `ImmutableMultimap` specified in the `ImmutableMultimap` class.
  syntax:
    content: public ImmutableListMultimap<V,K> inverse()
    return:
      type: com.azure.cosmos.implementation.guava25.collect.ImmutableListMultimap<V,K>
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableListMultimap.removeAll(java.lang.Object)
  id: removeAll(java.lang.Object)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableListMultimap
  langs:
  - java
  name: removeAll(Object key)
  nameWithType: ImmutableListMultimap<K,V>.removeAll(Object key)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableListMultimap<K,V>.removeAll(Object key)
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableListMultimap.removeAll*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Guaranteed to throw an exception and leave the multimap unmodified.
  syntax:
    content: public ImmutableList<V> removeAll(Object key)
    parameters:
    - id: key
      type: java.lang.Object
    return:
      type: com.azure.cosmos.implementation.guava25.collect.ImmutableList<V>
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableListMultimap.replaceValues(K,java.lang.Iterable<? extends V>)
  id: replaceValues(K,java.lang.Iterable<? extends V>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableListMultimap
  langs:
  - java
  name: replaceValues(K key, Iterable<? extends V> values)
  nameWithType: ImmutableListMultimap<K,V>.replaceValues(K key, Iterable<? extends V> values)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableListMultimap<K,V>.replaceValues(K key, Iterable<? extends V> values)
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableListMultimap.replaceValues*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Guaranteed to throw an exception and leave the multimap unmodified.
  syntax:
    content: public ImmutableList<V> replaceValues(K key, Iterable<? extends V> values)
    parameters:
    - id: key
      type: K
    - id: values
      type: java.lang.Iterable<? extends V>
    return:
      type: com.azure.cosmos.implementation.guava25.collect.ImmutableList<V>
references:
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMap<K,com.azure.cosmos.implementation.guava25.collect.ImmutableList<V>>
  spec.java:
  - uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMap
    name: ImmutableMap
    fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMap
  - name: <
    fullName: <
  - uid: K
    name: K
    fullName: K
  - name: ','
    fullName: ','
  - uid: com.azure.cosmos.implementation.guava25.collect.ImmutableList
    name: ImmutableList
    fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableList
  - name: <
    fullName: <
  - uid: V
    name: V
    fullName: V
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
- uid: int
  spec.java:
  - uid: int
    name: int
    fullName: int
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableListMultimap.ImmutableListMultimap*
  name: ImmutableListMultimap
  nameWithType: ImmutableListMultimap<K,V>.ImmutableListMultimap
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableListMultimap<K,V>.ImmutableListMultimap
  package: com.azure.cosmos.implementation.guava25.collect
- uid: java.util.function.Function<? super T,? extends K>
  spec.java:
  - uid: java.util.function.Function
    name: Function
    fullName: java.util.function.Function
  - name: <
    fullName: <
  - uid: '? super T'
    name: '? super T'
    fullName: '? super T'
  - name: ','
    fullName: ','
  - uid: '? extends K'
    name: '? extends K'
    fullName: '? extends K'
  - name: '>'
    fullName: '>'
- uid: java.util.function.Function<? super T,? extends V>
  spec.java:
  - uid: java.util.function.Function
    name: Function
    fullName: java.util.function.Function
  - name: <
    fullName: <
  - uid: '? super T'
    name: '? super T'
    fullName: '? super T'
  - name: ','
    fullName: ','
  - uid: '? extends V'
    name: '? extends V'
    fullName: '? extends V'
  - name: '>'
    fullName: '>'
- uid: java.util.stream.Collector<T,?,com.azure.cosmos.implementation.guava25.collect.ImmutableListMultimap<K,V>>
  spec.java:
  - uid: java.util.stream.Collector
    name: Collector
    fullName: java.util.stream.Collector
  - name: <
    fullName: <
  - uid: T
    name: T
    fullName: T
  - name: ','
    fullName: ','
  - uid: '?'
    name: '?'
    fullName: '?'
  - name: ','
    fullName: ','
  - uid: com.azure.cosmos.implementation.guava25.collect.ImmutableListMultimap
    name: ImmutableListMultimap
    fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableListMultimap
  - name: <
    fullName: <
  - uid: K
    name: K
    fullName: K
  - name: ','
    fullName: ','
  - uid: V
    name: V
    fullName: V
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableListMultimap.toImmutableListMultimap*
  name: <T,K,V>toImmutableListMultimap
  nameWithType: ImmutableListMultimap<K,V>.<T,K,V>toImmutableListMultimap
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableListMultimap<K,V>.<T,K,V>toImmutableListMultimap
  package: com.azure.cosmos.implementation.guava25.collect
- uid: java.util.function.Function<? super T,? extends java.util.stream.Stream<? extends V>>
  spec.java:
  - uid: java.util.function.Function
    name: Function
    fullName: java.util.function.Function
  - name: <
    fullName: <
  - uid: '? super T'
    name: '? super T'
    fullName: '? super T'
  - name: ','
    fullName: ','
  - uid: '? extends java.util.stream.Stream'
    name: Stream
    fullName: '? extends java.util.stream.Stream'
  - name: <
    fullName: <
  - uid: '? extends V'
    name: '? extends V'
    fullName: '? extends V'
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableListMultimap.flatteningToImmutableListMultimap*
  name: <T,K,V>flatteningToImmutableListMultimap
  nameWithType: ImmutableListMultimap<K,V>.<T,K,V>flatteningToImmutableListMultimap
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableListMultimap<K,V>.<T,K,V>flatteningToImmutableListMultimap
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableListMultimap<K,V>
  spec.java:
  - uid: com.azure.cosmos.implementation.guava25.collect.ImmutableListMultimap
    name: ImmutableListMultimap
    fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableListMultimap
  - name: <
    fullName: <
  - uid: K
    name: K
    fullName: K
  - name: ','
    fullName: ','
  - uid: V
    name: V
    fullName: V
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableListMultimap.of*
  name: <K,V>of
  nameWithType: ImmutableListMultimap<K,V>.<K,V>of
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableListMultimap<K,V>.<K,V>of
  package: com.azure.cosmos.implementation.guava25.collect
- uid: K
  spec.java:
  - uid: K
    name: K
    fullName: K
- uid: V
  spec.java:
  - uid: V
    name: V
    fullName: V
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableListMultimap.Builder<K,V>
  spec.java:
  - uid: com.azure.cosmos.implementation.guava25.collect.ImmutableListMultimap.Builder
    name: Builder
    fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableListMultimap.Builder
  - name: <
    fullName: <
  - uid: K
    name: K
    fullName: K
  - name: ','
    fullName: ','
  - uid: V
    name: V
    fullName: V
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableListMultimap.builder*
  name: <K,V>builder
  nameWithType: ImmutableListMultimap<K,V>.<K,V>builder
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableListMultimap<K,V>.<K,V>builder
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.Multimap<? extends K,? extends V>
  spec.java:
  - uid: com.azure.cosmos.implementation.guava25.collect.Multimap
    name: Multimap
    fullName: com.azure.cosmos.implementation.guava25.collect.Multimap
  - name: <
    fullName: <
  - uid: '? extends K'
    name: '? extends K'
    fullName: '? extends K'
  - name: ','
    fullName: ','
  - uid: '? extends V'
    name: '? extends V'
    fullName: '? extends V'
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableListMultimap.copyOf*
  name: <K,V>copyOf
  nameWithType: ImmutableListMultimap<K,V>.<K,V>copyOf
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableListMultimap<K,V>.<K,V>copyOf
  package: com.azure.cosmos.implementation.guava25.collect
- uid: java.lang.Iterable<? extends java.util.Map.Entry<? extends K,? extends V>>
  spec.java:
  - uid: java.lang.Iterable
    name: Iterable
    fullName: java.lang.Iterable
  - name: <
    fullName: <
  - uid: '? extends java.util.Map.Entry'
    name: Entry
    fullName: '? extends java.util.Map.Entry'
  - name: <
    fullName: <
  - uid: '? extends K'
    name: '? extends K'
    fullName: '? extends K'
  - name: ','
    fullName: ','
  - uid: '? extends V'
    name: '? extends V'
    fullName: '? extends V'
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableList<V>
  spec.java:
  - uid: com.azure.cosmos.implementation.guava25.collect.ImmutableList
    name: ImmutableList
    fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableList
  - name: <
    fullName: <
  - uid: V
    name: V
    fullName: V
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableListMultimap.get*
  name: get
  nameWithType: ImmutableListMultimap<K,V>.get
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableListMultimap<K,V>.get
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableListMultimap<V,K>
  spec.java:
  - uid: com.azure.cosmos.implementation.guava25.collect.ImmutableListMultimap
    name: ImmutableListMultimap
    fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableListMultimap
  - name: <
    fullName: <
  - uid: V
    name: V
    fullName: V
  - name: ','
    fullName: ','
  - uid: K
    name: K
    fullName: K
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableListMultimap.inverse*
  name: inverse
  nameWithType: ImmutableListMultimap<K,V>.inverse
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableListMultimap<K,V>.inverse
  package: com.azure.cosmos.implementation.guava25.collect
- uid: java.lang.Object
  spec.java:
  - uid: java.lang.Object
    name: Object
    fullName: java.lang.Object
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableListMultimap.removeAll*
  name: removeAll
  nameWithType: ImmutableListMultimap<K,V>.removeAll
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableListMultimap<K,V>.removeAll
  package: com.azure.cosmos.implementation.guava25.collect
- uid: java.lang.Iterable<? extends V>
  spec.java:
  - uid: java.lang.Iterable
    name: Iterable
    fullName: java.lang.Iterable
  - name: <
    fullName: <
  - uid: '? extends V'
    name: '? extends V'
    fullName: '? extends V'
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableListMultimap.replaceValues*
  name: replaceValues
  nameWithType: ImmutableListMultimap<K,V>.replaceValues
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableListMultimap<K,V>.replaceValues
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap<K,V>
  name: ImmutableMultimap<K,V>
  nameWithType: ImmutableMultimap<K,V>
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap<K,V>
- uid: com.azure.cosmos.implementation.guava25.collect.ListMultimap<K,V>
  name: ListMultimap<K,V>
  nameWithType: ListMultimap<K,V>
  fullName: com.azure.cosmos.implementation.guava25.collect.ListMultimap<K,V>
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: com.azure.cosmos.implementation.guava25.collect.AbstractMultimap.isEmpty()
  name: AbstractMultimap.isEmpty()
  nameWithType: AbstractMultimap.isEmpty()
  fullName: com.azure.cosmos.implementation.guava25.collect.AbstractMultimap.isEmpty()
- uid: java.lang.Object.finalize()
  name: Object.finalize()
  nameWithType: Object.finalize()
  fullName: java.lang.Object.finalize()
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap.values()
  name: ImmutableMultimap.values()
  nameWithType: ImmutableMultimap.values()
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap.values()
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap.containsValue(java.lang.Object)
  name: ImmutableMultimap.containsValue(Object)
  nameWithType: ImmutableMultimap.containsValue(Object)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap.containsValue(java.lang.Object)
- uid: java.lang.Object.clone()
  name: Object.clone()
  nameWithType: Object.clone()
  fullName: java.lang.Object.clone()
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap.inverse()
  name: ImmutableMultimap.inverse()
  nameWithType: ImmutableMultimap.inverse()
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap.inverse()
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap.<K,V>copyOf(com.azure.cosmos.implementation.guava25.collect.Multimap<? extends K,? extends V>)
  name: ImmutableMultimap.<K,V>copyOf(Multimap<? extends K,? extends V>)
  nameWithType: ImmutableMultimap.<K,V>copyOf(Multimap<? extends K,? extends V>)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap.<K,V>copyOf(com.azure.cosmos.implementation.guava25.collect.Multimap<? extends K,? extends V>)
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap.clear()
  name: ImmutableMultimap.clear()
  nameWithType: ImmutableMultimap.clear()
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap.clear()
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap.replaceValues(K,java.lang.Iterable<? extends V>)
  name: ImmutableMultimap.replaceValues(K,Iterable<? extends V>)
  nameWithType: ImmutableMultimap.replaceValues(K,Iterable<? extends V>)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap.replaceValues(K,java.lang.Iterable<? extends V>)
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap.putAll(K,java.lang.Iterable<? extends V>)
  name: ImmutableMultimap.putAll(K,Iterable<? extends V>)
  nameWithType: ImmutableMultimap.putAll(K,Iterable<? extends V>)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap.putAll(K,java.lang.Iterable<? extends V>)
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap.removeAll(java.lang.Object)
  name: ImmutableMultimap.removeAll(Object)
  nameWithType: ImmutableMultimap.removeAll(Object)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap.removeAll(java.lang.Object)
- uid: com.azure.cosmos.implementation.guava25.collect.AbstractMultimap.toString()
  name: AbstractMultimap.toString()
  nameWithType: AbstractMultimap.toString()
  fullName: com.azure.cosmos.implementation.guava25.collect.AbstractMultimap.toString()
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap.get(K)
  name: ImmutableMultimap.get(K)
  nameWithType: ImmutableMultimap.get(K)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap.get(K)
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap.<K,V>of(K,V,K,V,K,V,K,V)
  name: ImmutableMultimap.<K,V>of(K,V,K,V,K,V,K,V)
  nameWithType: ImmutableMultimap.<K,V>of(K,V,K,V,K,V,K,V)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap.<K,V>of(K,V,K,V,K,V,K,V)
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap.<K,V>of(K,V,K,V,K,V,K,V,K,V)
  name: ImmutableMultimap.<K,V>of(K,V,K,V,K,V,K,V,K,V)
  nameWithType: ImmutableMultimap.<K,V>of(K,V,K,V,K,V,K,V,K,V)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap.<K,V>of(K,V,K,V,K,V,K,V,K,V)
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap.entries()
  name: ImmutableMultimap.entries()
  nameWithType: ImmutableMultimap.entries()
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap.entries()
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap.forEach(java.util.function.BiConsumer<? super K,? super V>)
  name: ImmutableMultimap.forEach(BiConsumer<? super K,? super V>)
  nameWithType: ImmutableMultimap.forEach(BiConsumer<? super K,? super V>)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap.forEach(java.util.function.BiConsumer<? super K,? super V>)
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap.<K,V>of(K,V)
  name: ImmutableMultimap.<K,V>of(K,V)
  nameWithType: ImmutableMultimap.<K,V>of(K,V)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap.<K,V>of(K,V)
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap.<K,V>of(K,V,K,V)
  name: ImmutableMultimap.<K,V>of(K,V,K,V)
  nameWithType: ImmutableMultimap.<K,V>of(K,V,K,V)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap.<K,V>of(K,V,K,V)
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap.<K,V>of()
  name: ImmutableMultimap.<K,V>of()
  nameWithType: ImmutableMultimap.<K,V>of()
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap.<K,V>of()
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap.<K,V>builder()
  name: ImmutableMultimap.<K,V>builder()
  nameWithType: ImmutableMultimap.<K,V>builder()
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap.<K,V>builder()
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap.keySet()
  name: ImmutableMultimap.keySet()
  nameWithType: ImmutableMultimap.keySet()
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap.keySet()
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap.asMap()
  name: ImmutableMultimap.asMap()
  nameWithType: ImmutableMultimap.asMap()
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap.asMap()
- uid: com.azure.cosmos.implementation.guava25.collect.AbstractMultimap.hashCode()
  name: AbstractMultimap.hashCode()
  nameWithType: AbstractMultimap.hashCode()
  fullName: com.azure.cosmos.implementation.guava25.collect.AbstractMultimap.hashCode()
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap.keys()
  name: ImmutableMultimap.keys()
  nameWithType: ImmutableMultimap.keys()
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap.keys()
- uid: com.azure.cosmos.implementation.guava25.collect.AbstractMultimap.containsEntry(java.lang.Object,java.lang.Object)
  name: AbstractMultimap.containsEntry(Object,Object)
  nameWithType: AbstractMultimap.containsEntry(Object,Object)
  fullName: com.azure.cosmos.implementation.guava25.collect.AbstractMultimap.containsEntry(java.lang.Object,java.lang.Object)
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap.put(K,V)
  name: ImmutableMultimap.put(K,V)
  nameWithType: ImmutableMultimap.put(K,V)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap.put(K,V)
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap.remove(java.lang.Object,java.lang.Object)
  name: ImmutableMultimap.remove(Object,Object)
  nameWithType: ImmutableMultimap.remove(Object,Object)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap.remove(java.lang.Object,java.lang.Object)
- uid: com.azure.cosmos.implementation.guava25.collect.AbstractMultimap.equals(java.lang.Object)
  name: AbstractMultimap.equals(Object)
  nameWithType: AbstractMultimap.equals(Object)
  fullName: com.azure.cosmos.implementation.guava25.collect.AbstractMultimap.equals(java.lang.Object)
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap.<K,V>copyOf(java.lang.Iterable<? extends java.util.Map.Entry<? extends K,? extends V>>)
  name: ImmutableMultimap.<K,V>copyOf(Iterable<? extends Map.Entry<? extends K,? extends V>>)
  nameWithType: ImmutableMultimap.<K,V>copyOf(Iterable<? extends Map.Entry<? extends K,? extends V>>)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap.<K,V>copyOf(java.lang.Iterable<? extends java.util.Map.Entry<? extends K,? extends V>>)
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap.size()
  name: ImmutableMultimap.size()
  nameWithType: ImmutableMultimap.size()
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap.size()
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap.putAll(com.azure.cosmos.implementation.guava25.collect.Multimap<? extends K,? extends V>)
  name: ImmutableMultimap.putAll(Multimap<? extends K,? extends V>)
  nameWithType: ImmutableMultimap.putAll(Multimap<? extends K,? extends V>)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap.putAll(com.azure.cosmos.implementation.guava25.collect.Multimap<? extends K,? extends V>)
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap.<K,V>of(K,V,K,V,K,V)
  name: ImmutableMultimap.<K,V>of(K,V,K,V,K,V)
  nameWithType: ImmutableMultimap.<K,V>of(K,V,K,V,K,V)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap.<K,V>of(K,V,K,V,K,V)
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap.containsKey(java.lang.Object)
  name: ImmutableMultimap.containsKey(Object)
  nameWithType: ImmutableMultimap.containsKey(Object)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap.containsKey(java.lang.Object)
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableListMultimap.Builder
  name: ImmutableListMultimap.Builder<K,V>
  nameWithType: ImmutableListMultimap.Builder<K,V>
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableListMultimap.Builder<K,V>
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMap
  name: ImmutableMap
  nameWithType: ImmutableMap
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMap
- uid: K,com.azure.cosmos.implementation.guava25.collect.ImmutableList
  name: K,ImmutableList
  nameWithType: K,ImmutableList
  fullName: K,com.azure.cosmos.implementation.guava25.collect.ImmutableList
- uid: '? super T,? extends K'
  name: '? super T,? extends K'
  nameWithType: '? super T,? extends K'
  fullName: '? super T,? extends K'
- uid: java.util.function.Function
  name: Function
  nameWithType: Function
  fullName: java.util.function.Function
- uid: '? super T,? extends V'
  name: '? super T,? extends V'
  nameWithType: '? super T,? extends V'
  fullName: '? super T,? extends V'
- uid: K,V
  name: K,V
  nameWithType: K,V
  fullName: K,V
- uid: T,?,com.azure.cosmos.implementation.guava25.collect.ImmutableListMultimap
  name: T,?,ImmutableListMultimap
  nameWithType: T,?,ImmutableListMultimap
  fullName: T,?,com.azure.cosmos.implementation.guava25.collect.ImmutableListMultimap
- uid: java.util.stream.Collector
  name: Collector
  nameWithType: Collector
  fullName: java.util.stream.Collector
- uid: '? extends V'
  name: '? extends V'
  nameWithType: '? extends V'
  fullName: '? extends V'
- uid: '? super T,? extends java.util.stream.Stream'
  name: '? super T,? extends Stream'
  nameWithType: '? super T,? extends Stream'
  fullName: '? super T,? extends java.util.stream.Stream'
- uid: '? extends K,? extends V'
  name: '? extends K,? extends V'
  nameWithType: '? extends K,? extends V'
  fullName: '? extends K,? extends V'
- uid: com.azure.cosmos.implementation.guava25.collect.Multimap
  name: Multimap
  nameWithType: Multimap
  fullName: com.azure.cosmos.implementation.guava25.collect.Multimap
- uid: '? extends java.util.Map.Entry'
  name: '? extends Map.Entry'
  nameWithType: '? extends Map.Entry'
  fullName: '? extends java.util.Map.Entry'
- uid: java.lang.Iterable
  name: Iterable
  nameWithType: Iterable
  fullName: java.lang.Iterable
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableList
  name: ImmutableList
  nameWithType: ImmutableList
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableList
- uid: V,K
  name: V,K
  nameWithType: V,K
  fullName: V,K
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap
  name: ImmutableMultimap
  nameWithType: ImmutableMultimap
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap
- uid: com.azure.cosmos.implementation.guava25.collect.ListMultimap
  name: ListMultimap
  nameWithType: ListMultimap
  fullName: com.azure.cosmos.implementation.guava25.collect.ListMultimap
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap.
  name: ImmutableMultimap.
  nameWithType: ImmutableMultimap.
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap.
- uid: '? extends K,? extends V>)'
  name: '? extends K,? extends V>)'
  nameWithType: '? extends K,? extends V>)'
  fullName: '? extends K,? extends V>)'
- uid: K,V>copyOf(com.azure.cosmos.implementation.guava25.collect.Multimap
  name: K,V>copyOf(Multimap
  nameWithType: K,V>copyOf(Multimap
  fullName: K,V>copyOf(com.azure.cosmos.implementation.guava25.collect.Multimap
- uid: '? extends V>)'
  name: '? extends V>)'
  nameWithType: '? extends V>)'
  fullName: '? extends V>)'
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap.replaceValues(K,java.lang.Iterable
  name: ImmutableMultimap.replaceValues(K,Iterable
  nameWithType: ImmutableMultimap.replaceValues(K,Iterable
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap.replaceValues(K,java.lang.Iterable
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap.putAll(K,java.lang.Iterable
  name: ImmutableMultimap.putAll(K,Iterable
  nameWithType: ImmutableMultimap.putAll(K,Iterable
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap.putAll(K,java.lang.Iterable
- uid: K,V>of(K,V,K,V,K,V,K,V)
  name: K,V>of(K,V,K,V,K,V,K,V)
  nameWithType: K,V>of(K,V,K,V,K,V,K,V)
  fullName: K,V>of(K,V,K,V,K,V,K,V)
- uid: K,V>of(K,V,K,V,K,V,K,V,K,V)
  name: K,V>of(K,V,K,V,K,V,K,V,K,V)
  nameWithType: K,V>of(K,V,K,V,K,V,K,V,K,V)
  fullName: K,V>of(K,V,K,V,K,V,K,V,K,V)
- uid: '? super K,? super V>)'
  name: '? super K,? super V>)'
  nameWithType: '? super K,? super V>)'
  fullName: '? super K,? super V>)'
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap.forEach(java.util.function.BiConsumer
  name: ImmutableMultimap.forEach(BiConsumer
  nameWithType: ImmutableMultimap.forEach(BiConsumer
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap.forEach(java.util.function.BiConsumer
- uid: K,V>of(K,V)
  name: K,V>of(K,V)
  nameWithType: K,V>of(K,V)
  fullName: K,V>of(K,V)
- uid: K,V>of(K,V,K,V)
  name: K,V>of(K,V,K,V)
  nameWithType: K,V>of(K,V,K,V)
  fullName: K,V>of(K,V,K,V)
- uid: K,V>of()
  name: K,V>of()
  nameWithType: K,V>of()
  fullName: K,V>of()
- uid: K,V>builder()
  name: K,V>builder()
  nameWithType: K,V>builder()
  fullName: K,V>builder()
- uid: K,V>copyOf(java.lang.Iterable
  name: K,V>copyOf(Iterable
  nameWithType: K,V>copyOf(Iterable
  fullName: K,V>copyOf(java.lang.Iterable
- uid: '? extends K,? extends V>>)'
  name: '? extends K,? extends V>>)'
  nameWithType: '? extends K,? extends V>>)'
  fullName: '? extends K,? extends V>>)'
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap.putAll(com.azure.cosmos.implementation.guava25.collect.Multimap
  name: ImmutableMultimap.putAll(Multimap
  nameWithType: ImmutableMultimap.putAll(Multimap
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap.putAll(com.azure.cosmos.implementation.guava25.collect.Multimap
- uid: K,V>of(K,V,K,V,K,V)
  name: K,V>of(K,V,K,V,K,V)
  nameWithType: K,V>of(K,V,K,V,K,V)
  fullName: K,V>of(K,V,K,V,K,V)
