### YamlMime:ManagedReference
items:
- uid: org.slf4j.Logger
  id: Logger
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.slf4j
  children:
  - org.slf4j.Logger.ROOT_LOGGER_NAME
  - org.slf4j.Logger.debug(java.lang.String)
  - org.slf4j.Logger.debug(java.lang.String,java.lang.Object)
  - org.slf4j.Logger.debug(java.lang.String,java.lang.Object,java.lang.Object)
  - org.slf4j.Logger.debug(java.lang.String,java.lang.Object...)
  - org.slf4j.Logger.debug(java.lang.String,java.lang.Throwable)
  - org.slf4j.Logger.debug(org.slf4j.Marker,java.lang.String)
  - org.slf4j.Logger.debug(org.slf4j.Marker,java.lang.String,java.lang.Object)
  - org.slf4j.Logger.debug(org.slf4j.Marker,java.lang.String,java.lang.Object,java.lang.Object)
  - org.slf4j.Logger.debug(org.slf4j.Marker,java.lang.String,java.lang.Object...)
  - org.slf4j.Logger.debug(org.slf4j.Marker,java.lang.String,java.lang.Throwable)
  - org.slf4j.Logger.error(java.lang.String)
  - org.slf4j.Logger.error(java.lang.String,java.lang.Object)
  - org.slf4j.Logger.error(java.lang.String,java.lang.Object,java.lang.Object)
  - org.slf4j.Logger.error(java.lang.String,java.lang.Object...)
  - org.slf4j.Logger.error(java.lang.String,java.lang.Throwable)
  - org.slf4j.Logger.error(org.slf4j.Marker,java.lang.String)
  - org.slf4j.Logger.error(org.slf4j.Marker,java.lang.String,java.lang.Object)
  - org.slf4j.Logger.error(org.slf4j.Marker,java.lang.String,java.lang.Object,java.lang.Object)
  - org.slf4j.Logger.error(org.slf4j.Marker,java.lang.String,java.lang.Object...)
  - org.slf4j.Logger.error(org.slf4j.Marker,java.lang.String,java.lang.Throwable)
  - org.slf4j.Logger.getName()
  - org.slf4j.Logger.info(java.lang.String)
  - org.slf4j.Logger.info(java.lang.String,java.lang.Object)
  - org.slf4j.Logger.info(java.lang.String,java.lang.Object,java.lang.Object)
  - org.slf4j.Logger.info(java.lang.String,java.lang.Object...)
  - org.slf4j.Logger.info(java.lang.String,java.lang.Throwable)
  - org.slf4j.Logger.info(org.slf4j.Marker,java.lang.String)
  - org.slf4j.Logger.info(org.slf4j.Marker,java.lang.String,java.lang.Object)
  - org.slf4j.Logger.info(org.slf4j.Marker,java.lang.String,java.lang.Object,java.lang.Object)
  - org.slf4j.Logger.info(org.slf4j.Marker,java.lang.String,java.lang.Object...)
  - org.slf4j.Logger.info(org.slf4j.Marker,java.lang.String,java.lang.Throwable)
  - org.slf4j.Logger.isDebugEnabled()
  - org.slf4j.Logger.isDebugEnabled(org.slf4j.Marker)
  - org.slf4j.Logger.isErrorEnabled()
  - org.slf4j.Logger.isErrorEnabled(org.slf4j.Marker)
  - org.slf4j.Logger.isInfoEnabled()
  - org.slf4j.Logger.isInfoEnabled(org.slf4j.Marker)
  - org.slf4j.Logger.isTraceEnabled()
  - org.slf4j.Logger.isTraceEnabled(org.slf4j.Marker)
  - org.slf4j.Logger.isWarnEnabled()
  - org.slf4j.Logger.isWarnEnabled(org.slf4j.Marker)
  - org.slf4j.Logger.trace(java.lang.String)
  - org.slf4j.Logger.trace(java.lang.String,java.lang.Object)
  - org.slf4j.Logger.trace(java.lang.String,java.lang.Object,java.lang.Object)
  - org.slf4j.Logger.trace(java.lang.String,java.lang.Object...)
  - org.slf4j.Logger.trace(java.lang.String,java.lang.Throwable)
  - org.slf4j.Logger.trace(org.slf4j.Marker,java.lang.String)
  - org.slf4j.Logger.trace(org.slf4j.Marker,java.lang.String,java.lang.Object)
  - org.slf4j.Logger.trace(org.slf4j.Marker,java.lang.String,java.lang.Object,java.lang.Object)
  - org.slf4j.Logger.trace(org.slf4j.Marker,java.lang.String,java.lang.Object...)
  - org.slf4j.Logger.trace(org.slf4j.Marker,java.lang.String,java.lang.Throwable)
  - org.slf4j.Logger.warn(java.lang.String)
  - org.slf4j.Logger.warn(java.lang.String,java.lang.Object)
  - org.slf4j.Logger.warn(java.lang.String,java.lang.Object,java.lang.Object)
  - org.slf4j.Logger.warn(java.lang.String,java.lang.Object...)
  - org.slf4j.Logger.warn(java.lang.String,java.lang.Throwable)
  - org.slf4j.Logger.warn(org.slf4j.Marker,java.lang.String)
  - org.slf4j.Logger.warn(org.slf4j.Marker,java.lang.String,java.lang.Object)
  - org.slf4j.Logger.warn(org.slf4j.Marker,java.lang.String,java.lang.Object,java.lang.Object)
  - org.slf4j.Logger.warn(org.slf4j.Marker,java.lang.String,java.lang.Object...)
  - org.slf4j.Logger.warn(org.slf4j.Marker,java.lang.String,java.lang.Throwable)
  langs:
  - java
  name: Logger
  nameWithType: Logger
  fullName: org.slf4j.Logger
  type: Interface
  package: org.slf4j
  summary: >-
    The org.slf4j.Logger interface is the main user entry point of SLF4J API. It is expected that logging takes place through concrete implementations of this interface.


    ### Typical usage pattern: ###


    ```java

    import org.slf4j.Logger;
     import org.slf4j.LoggerFactory;

     public class Wombat {

       final static Logger logger = LoggerFactory.getLogger(Wombat.class);
       Integer t;
       Integer oldT;

       public void setTemperature(Integer temperature) {
         oldT = t;
         t = temperature;
         logger.debug("Temperature set to {}. Old temperature was {}.", t, oldT);
         if(temperature.intValue() > 50) {
           logger.info("Temperature has risen above 50 degrees.");
         }
       }
     }
    ```


    Be sure to read the FAQ entry relating to parameterized logging. Note that logging statements can be parameterized in presence of an exception/throwable.


    Once you are comfortable using loggers, i.e. instances of this interface, consider using MDC as well as Markers.
  syntax:
    content: public interface Logger
- uid: org.slf4j.Logger.ROOT_LOGGER_NAME
  id: ROOT_LOGGER_NAME
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.slf4j.Logger
  langs:
  - java
  name: ROOT_LOGGER_NAME
  nameWithType: Logger.ROOT_LOGGER_NAME
  fullName: org.slf4j.Logger.ROOT_LOGGER_NAME
  type: Field
  package: org.slf4j
  summary: Case insensitive String constant used to retrieve the name of the root logger.
  syntax:
    content: public static final String ROOT_LOGGER_NAME
    return:
      type: java.lang.String
- uid: org.slf4j.Logger.debug(java.lang.String)
  id: debug(java.lang.String)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.slf4j.Logger
  langs:
  - java
  name: debug(String msg)
  nameWithType: Logger.debug(String msg)
  fullName: org.slf4j.Logger.debug(String msg)
  overload: org.slf4j.Logger.debug*
  type: Method
  package: org.slf4j
  summary: Log a message at the DEBUG level.
  syntax:
    content: public abstract void debug(String msg)
    parameters:
    - id: msg
      type: java.lang.String
      description: the message string to be logged
- uid: org.slf4j.Logger.debug(java.lang.String,java.lang.Object)
  id: debug(java.lang.String,java.lang.Object)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.slf4j.Logger
  langs:
  - java
  name: debug(String format, Object arg)
  nameWithType: Logger.debug(String format, Object arg)
  fullName: org.slf4j.Logger.debug(String format, Object arg)
  overload: org.slf4j.Logger.debug*
  type: Method
  package: org.slf4j
  summary: >-
    Log a message at the DEBUG level according to the specified format and argument.


    This form avoids superfluous object creation when the logger is disabled for the DEBUG level.
  syntax:
    content: public abstract void debug(String format, Object arg)
    parameters:
    - id: format
      type: java.lang.String
      description: the format string
    - id: arg
      type: java.lang.Object
      description: the argument
- uid: org.slf4j.Logger.debug(java.lang.String,java.lang.Object,java.lang.Object)
  id: debug(java.lang.String,java.lang.Object,java.lang.Object)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.slf4j.Logger
  langs:
  - java
  name: debug(String format, Object arg1, Object arg2)
  nameWithType: Logger.debug(String format, Object arg1, Object arg2)
  fullName: org.slf4j.Logger.debug(String format, Object arg1, Object arg2)
  overload: org.slf4j.Logger.debug*
  type: Method
  package: org.slf4j
  summary: >-
    Log a message at the DEBUG level according to the specified format and arguments.


    This form avoids superfluous object creation when the logger is disabled for the DEBUG level.
  syntax:
    content: public abstract void debug(String format, Object arg1, Object arg2)
    parameters:
    - id: format
      type: java.lang.String
      description: the format string
    - id: arg1
      type: java.lang.Object
      description: the first argument
    - id: arg2
      type: java.lang.Object
      description: the second argument
- uid: org.slf4j.Logger.debug(java.lang.String,java.lang.Object...)
  id: debug(java.lang.String,java.lang.Object...)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.slf4j.Logger
  langs:
  - java
  name: debug(String format, Object[] arguments)
  nameWithType: Logger.debug(String format, Object[] arguments)
  fullName: org.slf4j.Logger.debug(String format, Object[] arguments)
  overload: org.slf4j.Logger.debug*
  type: Method
  package: org.slf4j
  summary: >-
    Log a message at the DEBUG level according to the specified format and arguments.


    This form avoids superfluous string concatenation when the logger is disabled for the DEBUG level. However, this variant incurs the hidden (and relatively small) cost of creating an `Object[]` before invoking the method, even if this logger is disabled for DEBUG. The variants taking <xref uid="org.slf4j.Logger.debug(java.lang.String,java.lang.Object)" data-throw-if-not-resolved="false">one</xref> and <xref uid="org.slf4j.Logger.debug(java.lang.String,java.lang.Object,java.lang.Object)" data-throw-if-not-resolved="false">two</xref> arguments exist solely in order to avoid this hidden cost.
  syntax:
    content: public abstract void debug(String format, Object[] arguments)
    parameters:
    - id: format
      type: java.lang.String
      description: the format string
    - id: arguments
      type: java.lang.Object[]
      description: a list of 3 or more arguments
- uid: org.slf4j.Logger.debug(java.lang.String,java.lang.Throwable)
  id: debug(java.lang.String,java.lang.Throwable)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.slf4j.Logger
  langs:
  - java
  name: debug(String msg, Throwable t)
  nameWithType: Logger.debug(String msg, Throwable t)
  fullName: org.slf4j.Logger.debug(String msg, Throwable t)
  overload: org.slf4j.Logger.debug*
  type: Method
  package: org.slf4j
  summary: Log an exception (throwable) at the DEBUG level with an accompanying message.
  syntax:
    content: public abstract void debug(String msg, Throwable t)
    parameters:
    - id: msg
      type: java.lang.String
      description: the message accompanying the exception
    - id: t
      type: java.lang.Throwable
      description: the exception (throwable) to log
- uid: org.slf4j.Logger.debug(org.slf4j.Marker,java.lang.String)
  id: debug(org.slf4j.Marker,java.lang.String)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.slf4j.Logger
  langs:
  - java
  name: debug(Marker marker, String msg)
  nameWithType: Logger.debug(Marker marker, String msg)
  fullName: org.slf4j.Logger.debug(Marker marker, String msg)
  overload: org.slf4j.Logger.debug*
  type: Method
  package: org.slf4j
  summary: Log a message with the specific Marker at the DEBUG level.
  syntax:
    content: public abstract void debug(Marker marker, String msg)
    parameters:
    - id: marker
      type: org.slf4j.Marker
      description: the marker data specific to this log statement
    - id: msg
      type: java.lang.String
      description: the message string to be logged
- uid: org.slf4j.Logger.debug(org.slf4j.Marker,java.lang.String,java.lang.Object)
  id: debug(org.slf4j.Marker,java.lang.String,java.lang.Object)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.slf4j.Logger
  langs:
  - java
  name: debug(Marker marker, String format, Object arg)
  nameWithType: Logger.debug(Marker marker, String format, Object arg)
  fullName: org.slf4j.Logger.debug(Marker marker, String format, Object arg)
  overload: org.slf4j.Logger.debug*
  type: Method
  package: org.slf4j
  summary: This method is similar to <xref uid="org.slf4j.Logger.debug(java.lang.String,java.lang.Object)" data-throw-if-not-resolved="false">#debug(String, Object)</xref> method except that the marker data is also taken into consideration.
  syntax:
    content: public abstract void debug(Marker marker, String format, Object arg)
    parameters:
    - id: marker
      type: org.slf4j.Marker
      description: the marker data specific to this log statement
    - id: format
      type: java.lang.String
      description: the format string
    - id: arg
      type: java.lang.Object
      description: the argument
- uid: org.slf4j.Logger.debug(org.slf4j.Marker,java.lang.String,java.lang.Object,java.lang.Object)
  id: debug(org.slf4j.Marker,java.lang.String,java.lang.Object,java.lang.Object)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.slf4j.Logger
  langs:
  - java
  name: debug(Marker marker, String format, Object arg1, Object arg2)
  nameWithType: Logger.debug(Marker marker, String format, Object arg1, Object arg2)
  fullName: org.slf4j.Logger.debug(Marker marker, String format, Object arg1, Object arg2)
  overload: org.slf4j.Logger.debug*
  type: Method
  package: org.slf4j
  summary: This method is similar to <xref uid="org.slf4j.Logger.debug(java.lang.String,java.lang.Object,java.lang.Object)" data-throw-if-not-resolved="false">#debug(String, Object, Object)</xref> method except that the marker data is also taken into consideration.
  syntax:
    content: public abstract void debug(Marker marker, String format, Object arg1, Object arg2)
    parameters:
    - id: marker
      type: org.slf4j.Marker
      description: the marker data specific to this log statement
    - id: format
      type: java.lang.String
      description: the format string
    - id: arg1
      type: java.lang.Object
      description: the first argument
    - id: arg2
      type: java.lang.Object
      description: the second argument
- uid: org.slf4j.Logger.debug(org.slf4j.Marker,java.lang.String,java.lang.Object...)
  id: debug(org.slf4j.Marker,java.lang.String,java.lang.Object...)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.slf4j.Logger
  langs:
  - java
  name: debug(Marker marker, String format, Object[] arguments)
  nameWithType: Logger.debug(Marker marker, String format, Object[] arguments)
  fullName: org.slf4j.Logger.debug(Marker marker, String format, Object[] arguments)
  overload: org.slf4j.Logger.debug*
  type: Method
  package: org.slf4j
  summary: This method is similar to <xref uid="org.slf4j.Logger.debug*" data-throw-if-not-resolved="false">#debug(String, Object...)</xref> method except that the marker data is also taken into consideration.
  syntax:
    content: public abstract void debug(Marker marker, String format, Object[] arguments)
    parameters:
    - id: marker
      type: org.slf4j.Marker
      description: the marker data specific to this log statement
    - id: format
      type: java.lang.String
      description: the format string
    - id: arguments
      type: java.lang.Object[]
      description: a list of 3 or more arguments
- uid: org.slf4j.Logger.debug(org.slf4j.Marker,java.lang.String,java.lang.Throwable)
  id: debug(org.slf4j.Marker,java.lang.String,java.lang.Throwable)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.slf4j.Logger
  langs:
  - java
  name: debug(Marker marker, String msg, Throwable t)
  nameWithType: Logger.debug(Marker marker, String msg, Throwable t)
  fullName: org.slf4j.Logger.debug(Marker marker, String msg, Throwable t)
  overload: org.slf4j.Logger.debug*
  type: Method
  package: org.slf4j
  summary: This method is similar to <xref uid="org.slf4j.Logger.debug(java.lang.String,java.lang.Throwable)" data-throw-if-not-resolved="false">#debug(String, Throwable)</xref> method except that the marker data is also taken into consideration.
  syntax:
    content: public abstract void debug(Marker marker, String msg, Throwable t)
    parameters:
    - id: marker
      type: org.slf4j.Marker
      description: the marker data specific to this log statement
    - id: msg
      type: java.lang.String
      description: the message accompanying the exception
    - id: t
      type: java.lang.Throwable
      description: the exception (throwable) to log
- uid: org.slf4j.Logger.error(java.lang.String)
  id: error(java.lang.String)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.slf4j.Logger
  langs:
  - java
  name: error(String msg)
  nameWithType: Logger.error(String msg)
  fullName: org.slf4j.Logger.error(String msg)
  overload: org.slf4j.Logger.error*
  type: Method
  package: org.slf4j
  summary: Log a message at the ERROR level.
  syntax:
    content: public abstract void error(String msg)
    parameters:
    - id: msg
      type: java.lang.String
      description: the message string to be logged
- uid: org.slf4j.Logger.error(java.lang.String,java.lang.Object)
  id: error(java.lang.String,java.lang.Object)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.slf4j.Logger
  langs:
  - java
  name: error(String format, Object arg)
  nameWithType: Logger.error(String format, Object arg)
  fullName: org.slf4j.Logger.error(String format, Object arg)
  overload: org.slf4j.Logger.error*
  type: Method
  package: org.slf4j
  summary: >-
    Log a message at the ERROR level according to the specified format and argument.


    This form avoids superfluous object creation when the logger is disabled for the ERROR level.
  syntax:
    content: public abstract void error(String format, Object arg)
    parameters:
    - id: format
      type: java.lang.String
      description: the format string
    - id: arg
      type: java.lang.Object
      description: the argument
- uid: org.slf4j.Logger.error(java.lang.String,java.lang.Object,java.lang.Object)
  id: error(java.lang.String,java.lang.Object,java.lang.Object)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.slf4j.Logger
  langs:
  - java
  name: error(String format, Object arg1, Object arg2)
  nameWithType: Logger.error(String format, Object arg1, Object arg2)
  fullName: org.slf4j.Logger.error(String format, Object arg1, Object arg2)
  overload: org.slf4j.Logger.error*
  type: Method
  package: org.slf4j
  summary: >-
    Log a message at the ERROR level according to the specified format and arguments.


    This form avoids superfluous object creation when the logger is disabled for the ERROR level.
  syntax:
    content: public abstract void error(String format, Object arg1, Object arg2)
    parameters:
    - id: format
      type: java.lang.String
      description: the format string
    - id: arg1
      type: java.lang.Object
      description: the first argument
    - id: arg2
      type: java.lang.Object
      description: the second argument
- uid: org.slf4j.Logger.error(java.lang.String,java.lang.Object...)
  id: error(java.lang.String,java.lang.Object...)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.slf4j.Logger
  langs:
  - java
  name: error(String format, Object[] arguments)
  nameWithType: Logger.error(String format, Object[] arguments)
  fullName: org.slf4j.Logger.error(String format, Object[] arguments)
  overload: org.slf4j.Logger.error*
  type: Method
  package: org.slf4j
  summary: >-
    Log a message at the ERROR level according to the specified format and arguments.


    This form avoids superfluous string concatenation when the logger is disabled for the ERROR level. However, this variant incurs the hidden (and relatively small) cost of creating an `Object[]` before invoking the method, even if this logger is disabled for ERROR. The variants taking <xref uid="org.slf4j.Logger.error(java.lang.String,java.lang.Object)" data-throw-if-not-resolved="false">one</xref> and <xref uid="org.slf4j.Logger.error(java.lang.String,java.lang.Object,java.lang.Object)" data-throw-if-not-resolved="false">two</xref> arguments exist solely in order to avoid this hidden cost.
  syntax:
    content: public abstract void error(String format, Object[] arguments)
    parameters:
    - id: format
      type: java.lang.String
      description: the format string
    - id: arguments
      type: java.lang.Object[]
      description: a list of 3 or more arguments
- uid: org.slf4j.Logger.error(java.lang.String,java.lang.Throwable)
  id: error(java.lang.String,java.lang.Throwable)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.slf4j.Logger
  langs:
  - java
  name: error(String msg, Throwable t)
  nameWithType: Logger.error(String msg, Throwable t)
  fullName: org.slf4j.Logger.error(String msg, Throwable t)
  overload: org.slf4j.Logger.error*
  type: Method
  package: org.slf4j
  summary: Log an exception (throwable) at the ERROR level with an accompanying message.
  syntax:
    content: public abstract void error(String msg, Throwable t)
    parameters:
    - id: msg
      type: java.lang.String
      description: the message accompanying the exception
    - id: t
      type: java.lang.Throwable
      description: the exception (throwable) to log
- uid: org.slf4j.Logger.error(org.slf4j.Marker,java.lang.String)
  id: error(org.slf4j.Marker,java.lang.String)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.slf4j.Logger
  langs:
  - java
  name: error(Marker marker, String msg)
  nameWithType: Logger.error(Marker marker, String msg)
  fullName: org.slf4j.Logger.error(Marker marker, String msg)
  overload: org.slf4j.Logger.error*
  type: Method
  package: org.slf4j
  summary: Log a message with the specific Marker at the ERROR level.
  syntax:
    content: public abstract void error(Marker marker, String msg)
    parameters:
    - id: marker
      type: org.slf4j.Marker
      description: The marker specific to this log statement
    - id: msg
      type: java.lang.String
      description: the message string to be logged
- uid: org.slf4j.Logger.error(org.slf4j.Marker,java.lang.String,java.lang.Object)
  id: error(org.slf4j.Marker,java.lang.String,java.lang.Object)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.slf4j.Logger
  langs:
  - java
  name: error(Marker marker, String format, Object arg)
  nameWithType: Logger.error(Marker marker, String format, Object arg)
  fullName: org.slf4j.Logger.error(Marker marker, String format, Object arg)
  overload: org.slf4j.Logger.error*
  type: Method
  package: org.slf4j
  summary: This method is similar to <xref uid="org.slf4j.Logger.error(java.lang.String,java.lang.Object)" data-throw-if-not-resolved="false">#error(String, Object)</xref> method except that the marker data is also taken into consideration.
  syntax:
    content: public abstract void error(Marker marker, String format, Object arg)
    parameters:
    - id: marker
      type: org.slf4j.Marker
      description: the marker data specific to this log statement
    - id: format
      type: java.lang.String
      description: the format string
    - id: arg
      type: java.lang.Object
      description: the argument
- uid: org.slf4j.Logger.error(org.slf4j.Marker,java.lang.String,java.lang.Object,java.lang.Object)
  id: error(org.slf4j.Marker,java.lang.String,java.lang.Object,java.lang.Object)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.slf4j.Logger
  langs:
  - java
  name: error(Marker marker, String format, Object arg1, Object arg2)
  nameWithType: Logger.error(Marker marker, String format, Object arg1, Object arg2)
  fullName: org.slf4j.Logger.error(Marker marker, String format, Object arg1, Object arg2)
  overload: org.slf4j.Logger.error*
  type: Method
  package: org.slf4j
  summary: This method is similar to <xref uid="org.slf4j.Logger.error(java.lang.String,java.lang.Object,java.lang.Object)" data-throw-if-not-resolved="false">#error(String, Object, Object)</xref> method except that the marker data is also taken into consideration.
  syntax:
    content: public abstract void error(Marker marker, String format, Object arg1, Object arg2)
    parameters:
    - id: marker
      type: org.slf4j.Marker
      description: the marker data specific to this log statement
    - id: format
      type: java.lang.String
      description: the format string
    - id: arg1
      type: java.lang.Object
      description: the first argument
    - id: arg2
      type: java.lang.Object
      description: the second argument
- uid: org.slf4j.Logger.error(org.slf4j.Marker,java.lang.String,java.lang.Object...)
  id: error(org.slf4j.Marker,java.lang.String,java.lang.Object...)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.slf4j.Logger
  langs:
  - java
  name: error(Marker marker, String format, Object[] arguments)
  nameWithType: Logger.error(Marker marker, String format, Object[] arguments)
  fullName: org.slf4j.Logger.error(Marker marker, String format, Object[] arguments)
  overload: org.slf4j.Logger.error*
  type: Method
  package: org.slf4j
  summary: This method is similar to <xref uid="org.slf4j.Logger.error*" data-throw-if-not-resolved="false">#error(String, Object...)</xref> method except that the marker data is also taken into consideration.
  syntax:
    content: public abstract void error(Marker marker, String format, Object[] arguments)
    parameters:
    - id: marker
      type: org.slf4j.Marker
      description: the marker data specific to this log statement
    - id: format
      type: java.lang.String
      description: the format string
    - id: arguments
      type: java.lang.Object[]
      description: a list of 3 or more arguments
- uid: org.slf4j.Logger.error(org.slf4j.Marker,java.lang.String,java.lang.Throwable)
  id: error(org.slf4j.Marker,java.lang.String,java.lang.Throwable)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.slf4j.Logger
  langs:
  - java
  name: error(Marker marker, String msg, Throwable t)
  nameWithType: Logger.error(Marker marker, String msg, Throwable t)
  fullName: org.slf4j.Logger.error(Marker marker, String msg, Throwable t)
  overload: org.slf4j.Logger.error*
  type: Method
  package: org.slf4j
  summary: This method is similar to <xref uid="org.slf4j.Logger.error(java.lang.String,java.lang.Throwable)" data-throw-if-not-resolved="false">#error(String, Throwable)</xref> method except that the marker data is also taken into consideration.
  syntax:
    content: public abstract void error(Marker marker, String msg, Throwable t)
    parameters:
    - id: marker
      type: org.slf4j.Marker
      description: the marker data specific to this log statement
    - id: msg
      type: java.lang.String
      description: the message accompanying the exception
    - id: t
      type: java.lang.Throwable
      description: the exception (throwable) to log
- uid: org.slf4j.Logger.getName()
  id: getName()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.slf4j.Logger
  langs:
  - java
  name: getName()
  nameWithType: Logger.getName()
  fullName: org.slf4j.Logger.getName()
  overload: org.slf4j.Logger.getName*
  type: Method
  package: org.slf4j
  summary: Return the name of this `Logger` instance.
  syntax:
    content: public abstract String getName()
    return:
      type: java.lang.String
      description: name of this logger instance
- uid: org.slf4j.Logger.info(java.lang.String)
  id: info(java.lang.String)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.slf4j.Logger
  langs:
  - java
  name: info(String msg)
  nameWithType: Logger.info(String msg)
  fullName: org.slf4j.Logger.info(String msg)
  overload: org.slf4j.Logger.info*
  type: Method
  package: org.slf4j
  summary: Log a message at the INFO level.
  syntax:
    content: public abstract void info(String msg)
    parameters:
    - id: msg
      type: java.lang.String
      description: the message string to be logged
- uid: org.slf4j.Logger.info(java.lang.String,java.lang.Object)
  id: info(java.lang.String,java.lang.Object)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.slf4j.Logger
  langs:
  - java
  name: info(String format, Object arg)
  nameWithType: Logger.info(String format, Object arg)
  fullName: org.slf4j.Logger.info(String format, Object arg)
  overload: org.slf4j.Logger.info*
  type: Method
  package: org.slf4j
  summary: >-
    Log a message at the INFO level according to the specified format and argument.


    This form avoids superfluous object creation when the logger is disabled for the INFO level.
  syntax:
    content: public abstract void info(String format, Object arg)
    parameters:
    - id: format
      type: java.lang.String
      description: the format string
    - id: arg
      type: java.lang.Object
      description: the argument
- uid: org.slf4j.Logger.info(java.lang.String,java.lang.Object,java.lang.Object)
  id: info(java.lang.String,java.lang.Object,java.lang.Object)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.slf4j.Logger
  langs:
  - java
  name: info(String format, Object arg1, Object arg2)
  nameWithType: Logger.info(String format, Object arg1, Object arg2)
  fullName: org.slf4j.Logger.info(String format, Object arg1, Object arg2)
  overload: org.slf4j.Logger.info*
  type: Method
  package: org.slf4j
  summary: >-
    Log a message at the INFO level according to the specified format and arguments.


    This form avoids superfluous object creation when the logger is disabled for the INFO level.
  syntax:
    content: public abstract void info(String format, Object arg1, Object arg2)
    parameters:
    - id: format
      type: java.lang.String
      description: the format string
    - id: arg1
      type: java.lang.Object
      description: the first argument
    - id: arg2
      type: java.lang.Object
      description: the second argument
- uid: org.slf4j.Logger.info(java.lang.String,java.lang.Object...)
  id: info(java.lang.String,java.lang.Object...)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.slf4j.Logger
  langs:
  - java
  name: info(String format, Object[] arguments)
  nameWithType: Logger.info(String format, Object[] arguments)
  fullName: org.slf4j.Logger.info(String format, Object[] arguments)
  overload: org.slf4j.Logger.info*
  type: Method
  package: org.slf4j
  summary: >-
    Log a message at the INFO level according to the specified format and arguments.


    This form avoids superfluous string concatenation when the logger is disabled for the INFO level. However, this variant incurs the hidden (and relatively small) cost of creating an `Object[]` before invoking the method, even if this logger is disabled for INFO. The variants taking <xref uid="org.slf4j.Logger.info(java.lang.String,java.lang.Object)" data-throw-if-not-resolved="false">one</xref> and <xref uid="org.slf4j.Logger.info(java.lang.String,java.lang.Object,java.lang.Object)" data-throw-if-not-resolved="false">two</xref> arguments exist solely in order to avoid this hidden cost.
  syntax:
    content: public abstract void info(String format, Object[] arguments)
    parameters:
    - id: format
      type: java.lang.String
      description: the format string
    - id: arguments
      type: java.lang.Object[]
      description: a list of 3 or more arguments
- uid: org.slf4j.Logger.info(java.lang.String,java.lang.Throwable)
  id: info(java.lang.String,java.lang.Throwable)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.slf4j.Logger
  langs:
  - java
  name: info(String msg, Throwable t)
  nameWithType: Logger.info(String msg, Throwable t)
  fullName: org.slf4j.Logger.info(String msg, Throwable t)
  overload: org.slf4j.Logger.info*
  type: Method
  package: org.slf4j
  summary: Log an exception (throwable) at the INFO level with an accompanying message.
  syntax:
    content: public abstract void info(String msg, Throwable t)
    parameters:
    - id: msg
      type: java.lang.String
      description: the message accompanying the exception
    - id: t
      type: java.lang.Throwable
      description: the exception (throwable) to log
- uid: org.slf4j.Logger.info(org.slf4j.Marker,java.lang.String)
  id: info(org.slf4j.Marker,java.lang.String)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.slf4j.Logger
  langs:
  - java
  name: info(Marker marker, String msg)
  nameWithType: Logger.info(Marker marker, String msg)
  fullName: org.slf4j.Logger.info(Marker marker, String msg)
  overload: org.slf4j.Logger.info*
  type: Method
  package: org.slf4j
  summary: Log a message with the specific Marker at the INFO level.
  syntax:
    content: public abstract void info(Marker marker, String msg)
    parameters:
    - id: marker
      type: org.slf4j.Marker
      description: The marker specific to this log statement
    - id: msg
      type: java.lang.String
      description: the message string to be logged
- uid: org.slf4j.Logger.info(org.slf4j.Marker,java.lang.String,java.lang.Object)
  id: info(org.slf4j.Marker,java.lang.String,java.lang.Object)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.slf4j.Logger
  langs:
  - java
  name: info(Marker marker, String format, Object arg)
  nameWithType: Logger.info(Marker marker, String format, Object arg)
  fullName: org.slf4j.Logger.info(Marker marker, String format, Object arg)
  overload: org.slf4j.Logger.info*
  type: Method
  package: org.slf4j
  summary: This method is similar to <xref uid="org.slf4j.Logger.info(java.lang.String,java.lang.Object)" data-throw-if-not-resolved="false">#info(String, Object)</xref> method except that the marker data is also taken into consideration.
  syntax:
    content: public abstract void info(Marker marker, String format, Object arg)
    parameters:
    - id: marker
      type: org.slf4j.Marker
      description: the marker data specific to this log statement
    - id: format
      type: java.lang.String
      description: the format string
    - id: arg
      type: java.lang.Object
      description: the argument
- uid: org.slf4j.Logger.info(org.slf4j.Marker,java.lang.String,java.lang.Object,java.lang.Object)
  id: info(org.slf4j.Marker,java.lang.String,java.lang.Object,java.lang.Object)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.slf4j.Logger
  langs:
  - java
  name: info(Marker marker, String format, Object arg1, Object arg2)
  nameWithType: Logger.info(Marker marker, String format, Object arg1, Object arg2)
  fullName: org.slf4j.Logger.info(Marker marker, String format, Object arg1, Object arg2)
  overload: org.slf4j.Logger.info*
  type: Method
  package: org.slf4j
  summary: This method is similar to <xref uid="org.slf4j.Logger.info(java.lang.String,java.lang.Object,java.lang.Object)" data-throw-if-not-resolved="false">#info(String, Object, Object)</xref> method except that the marker data is also taken into consideration.
  syntax:
    content: public abstract void info(Marker marker, String format, Object arg1, Object arg2)
    parameters:
    - id: marker
      type: org.slf4j.Marker
      description: the marker data specific to this log statement
    - id: format
      type: java.lang.String
      description: the format string
    - id: arg1
      type: java.lang.Object
      description: the first argument
    - id: arg2
      type: java.lang.Object
      description: the second argument
- uid: org.slf4j.Logger.info(org.slf4j.Marker,java.lang.String,java.lang.Object...)
  id: info(org.slf4j.Marker,java.lang.String,java.lang.Object...)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.slf4j.Logger
  langs:
  - java
  name: info(Marker marker, String format, Object[] arguments)
  nameWithType: Logger.info(Marker marker, String format, Object[] arguments)
  fullName: org.slf4j.Logger.info(Marker marker, String format, Object[] arguments)
  overload: org.slf4j.Logger.info*
  type: Method
  package: org.slf4j
  summary: This method is similar to <xref uid="org.slf4j.Logger.info*" data-throw-if-not-resolved="false">#info(String, Object...)</xref> method except that the marker data is also taken into consideration.
  syntax:
    content: public abstract void info(Marker marker, String format, Object[] arguments)
    parameters:
    - id: marker
      type: org.slf4j.Marker
      description: the marker data specific to this log statement
    - id: format
      type: java.lang.String
      description: the format string
    - id: arguments
      type: java.lang.Object[]
      description: a list of 3 or more arguments
- uid: org.slf4j.Logger.info(org.slf4j.Marker,java.lang.String,java.lang.Throwable)
  id: info(org.slf4j.Marker,java.lang.String,java.lang.Throwable)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.slf4j.Logger
  langs:
  - java
  name: info(Marker marker, String msg, Throwable t)
  nameWithType: Logger.info(Marker marker, String msg, Throwable t)
  fullName: org.slf4j.Logger.info(Marker marker, String msg, Throwable t)
  overload: org.slf4j.Logger.info*
  type: Method
  package: org.slf4j
  summary: This method is similar to <xref uid="org.slf4j.Logger.info(java.lang.String,java.lang.Throwable)" data-throw-if-not-resolved="false">#info(String, Throwable)</xref> method except that the marker data is also taken into consideration.
  syntax:
    content: public abstract void info(Marker marker, String msg, Throwable t)
    parameters:
    - id: marker
      type: org.slf4j.Marker
      description: the marker data for this log statement
    - id: msg
      type: java.lang.String
      description: the message accompanying the exception
    - id: t
      type: java.lang.Throwable
      description: the exception (throwable) to log
- uid: org.slf4j.Logger.isDebugEnabled()
  id: isDebugEnabled()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.slf4j.Logger
  langs:
  - java
  name: isDebugEnabled()
  nameWithType: Logger.isDebugEnabled()
  fullName: org.slf4j.Logger.isDebugEnabled()
  overload: org.slf4j.Logger.isDebugEnabled*
  type: Method
  package: org.slf4j
  summary: Is the logger instance enabled for the DEBUG level?
  syntax:
    content: public abstract boolean isDebugEnabled()
    return:
      type: boolean
      description: >-
        True if this Logger is enabled for the DEBUG level,
                 false otherwise.
- uid: org.slf4j.Logger.isDebugEnabled(org.slf4j.Marker)
  id: isDebugEnabled(org.slf4j.Marker)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.slf4j.Logger
  langs:
  - java
  name: isDebugEnabled(Marker marker)
  nameWithType: Logger.isDebugEnabled(Marker marker)
  fullName: org.slf4j.Logger.isDebugEnabled(Marker marker)
  overload: org.slf4j.Logger.isDebugEnabled*
  type: Method
  package: org.slf4j
  summary: Similar to <xref uid="org.slf4j.Logger.isDebugEnabled()" data-throw-if-not-resolved="false">#isDebugEnabled()</xref> method except that the marker data is also taken into account.
  syntax:
    content: public abstract boolean isDebugEnabled(Marker marker)
    parameters:
    - id: marker
      type: org.slf4j.Marker
      description: The marker data to take into consideration
    return:
      type: boolean
      description: >-
        True if this Logger is enabled for the DEBUG level,
                 false otherwise.
- uid: org.slf4j.Logger.isErrorEnabled()
  id: isErrorEnabled()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.slf4j.Logger
  langs:
  - java
  name: isErrorEnabled()
  nameWithType: Logger.isErrorEnabled()
  fullName: org.slf4j.Logger.isErrorEnabled()
  overload: org.slf4j.Logger.isErrorEnabled*
  type: Method
  package: org.slf4j
  summary: Is the logger instance enabled for the ERROR level?
  syntax:
    content: public abstract boolean isErrorEnabled()
    return:
      type: boolean
      description: >-
        True if this Logger is enabled for the ERROR level,
                 false otherwise.
- uid: org.slf4j.Logger.isErrorEnabled(org.slf4j.Marker)
  id: isErrorEnabled(org.slf4j.Marker)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.slf4j.Logger
  langs:
  - java
  name: isErrorEnabled(Marker marker)
  nameWithType: Logger.isErrorEnabled(Marker marker)
  fullName: org.slf4j.Logger.isErrorEnabled(Marker marker)
  overload: org.slf4j.Logger.isErrorEnabled*
  type: Method
  package: org.slf4j
  summary: Similar to <xref uid="org.slf4j.Logger.isErrorEnabled()" data-throw-if-not-resolved="false">#isErrorEnabled()</xref> method except that the marker data is also taken into consideration.
  syntax:
    content: public abstract boolean isErrorEnabled(Marker marker)
    parameters:
    - id: marker
      type: org.slf4j.Marker
      description: The marker data to take into consideration
    return:
      type: boolean
      description: >-
        True if this Logger is enabled for the ERROR level,
                 false otherwise.
- uid: org.slf4j.Logger.isInfoEnabled()
  id: isInfoEnabled()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.slf4j.Logger
  langs:
  - java
  name: isInfoEnabled()
  nameWithType: Logger.isInfoEnabled()
  fullName: org.slf4j.Logger.isInfoEnabled()
  overload: org.slf4j.Logger.isInfoEnabled*
  type: Method
  package: org.slf4j
  summary: Is the logger instance enabled for the INFO level?
  syntax:
    content: public abstract boolean isInfoEnabled()
    return:
      type: boolean
      description: >-
        True if this Logger is enabled for the INFO level,
                 false otherwise.
- uid: org.slf4j.Logger.isInfoEnabled(org.slf4j.Marker)
  id: isInfoEnabled(org.slf4j.Marker)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.slf4j.Logger
  langs:
  - java
  name: isInfoEnabled(Marker marker)
  nameWithType: Logger.isInfoEnabled(Marker marker)
  fullName: org.slf4j.Logger.isInfoEnabled(Marker marker)
  overload: org.slf4j.Logger.isInfoEnabled*
  type: Method
  package: org.slf4j
  summary: Similar to <xref uid="org.slf4j.Logger.isInfoEnabled()" data-throw-if-not-resolved="false">#isInfoEnabled()</xref> method except that the marker data is also taken into consideration.
  syntax:
    content: public abstract boolean isInfoEnabled(Marker marker)
    parameters:
    - id: marker
      type: org.slf4j.Marker
      description: The marker data to take into consideration
    return:
      type: boolean
      description: true if this logger is warn enabled, false otherwise
- uid: org.slf4j.Logger.isTraceEnabled()
  id: isTraceEnabled()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.slf4j.Logger
  langs:
  - java
  name: isTraceEnabled()
  nameWithType: Logger.isTraceEnabled()
  fullName: org.slf4j.Logger.isTraceEnabled()
  overload: org.slf4j.Logger.isTraceEnabled*
  type: Method
  package: org.slf4j
  summary: Is the logger instance enabled for the TRACE level?
  syntax:
    content: public abstract boolean isTraceEnabled()
    return:
      type: boolean
      description: >-
        True if this Logger is enabled for the TRACE level,
                 false otherwise.
- uid: org.slf4j.Logger.isTraceEnabled(org.slf4j.Marker)
  id: isTraceEnabled(org.slf4j.Marker)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.slf4j.Logger
  langs:
  - java
  name: isTraceEnabled(Marker marker)
  nameWithType: Logger.isTraceEnabled(Marker marker)
  fullName: org.slf4j.Logger.isTraceEnabled(Marker marker)
  overload: org.slf4j.Logger.isTraceEnabled*
  type: Method
  package: org.slf4j
  summary: Similar to <xref uid="org.slf4j.Logger.isTraceEnabled()" data-throw-if-not-resolved="false">#isTraceEnabled()</xref> method except that the marker data is also taken into account.
  syntax:
    content: public abstract boolean isTraceEnabled(Marker marker)
    parameters:
    - id: marker
      type: org.slf4j.Marker
      description: The marker data to take into consideration
    return:
      type: boolean
      description: >-
        True if this Logger is enabled for the TRACE level,
                 false otherwise.
- uid: org.slf4j.Logger.isWarnEnabled()
  id: isWarnEnabled()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.slf4j.Logger
  langs:
  - java
  name: isWarnEnabled()
  nameWithType: Logger.isWarnEnabled()
  fullName: org.slf4j.Logger.isWarnEnabled()
  overload: org.slf4j.Logger.isWarnEnabled*
  type: Method
  package: org.slf4j
  summary: Is the logger instance enabled for the WARN level?
  syntax:
    content: public abstract boolean isWarnEnabled()
    return:
      type: boolean
      description: >-
        True if this Logger is enabled for the WARN level,
                 false otherwise.
- uid: org.slf4j.Logger.isWarnEnabled(org.slf4j.Marker)
  id: isWarnEnabled(org.slf4j.Marker)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.slf4j.Logger
  langs:
  - java
  name: isWarnEnabled(Marker marker)
  nameWithType: Logger.isWarnEnabled(Marker marker)
  fullName: org.slf4j.Logger.isWarnEnabled(Marker marker)
  overload: org.slf4j.Logger.isWarnEnabled*
  type: Method
  package: org.slf4j
  summary: Similar to <xref uid="org.slf4j.Logger.isWarnEnabled()" data-throw-if-not-resolved="false">#isWarnEnabled()</xref> method except that the marker data is also taken into consideration.
  syntax:
    content: public abstract boolean isWarnEnabled(Marker marker)
    parameters:
    - id: marker
      type: org.slf4j.Marker
      description: The marker data to take into consideration
    return:
      type: boolean
      description: >-
        True if this Logger is enabled for the WARN level,
                 false otherwise.
- uid: org.slf4j.Logger.trace(java.lang.String)
  id: trace(java.lang.String)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.slf4j.Logger
  langs:
  - java
  name: trace(String msg)
  nameWithType: Logger.trace(String msg)
  fullName: org.slf4j.Logger.trace(String msg)
  overload: org.slf4j.Logger.trace*
  type: Method
  package: org.slf4j
  summary: Log a message at the TRACE level.
  syntax:
    content: public abstract void trace(String msg)
    parameters:
    - id: msg
      type: java.lang.String
      description: the message string to be logged
- uid: org.slf4j.Logger.trace(java.lang.String,java.lang.Object)
  id: trace(java.lang.String,java.lang.Object)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.slf4j.Logger
  langs:
  - java
  name: trace(String format, Object arg)
  nameWithType: Logger.trace(String format, Object arg)
  fullName: org.slf4j.Logger.trace(String format, Object arg)
  overload: org.slf4j.Logger.trace*
  type: Method
  package: org.slf4j
  summary: >-
    Log a message at the TRACE level according to the specified format and argument.


    This form avoids superfluous object creation when the logger is disabled for the TRACE level.
  syntax:
    content: public abstract void trace(String format, Object arg)
    parameters:
    - id: format
      type: java.lang.String
      description: the format string
    - id: arg
      type: java.lang.Object
      description: the argument
- uid: org.slf4j.Logger.trace(java.lang.String,java.lang.Object,java.lang.Object)
  id: trace(java.lang.String,java.lang.Object,java.lang.Object)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.slf4j.Logger
  langs:
  - java
  name: trace(String format, Object arg1, Object arg2)
  nameWithType: Logger.trace(String format, Object arg1, Object arg2)
  fullName: org.slf4j.Logger.trace(String format, Object arg1, Object arg2)
  overload: org.slf4j.Logger.trace*
  type: Method
  package: org.slf4j
  summary: >-
    Log a message at the TRACE level according to the specified format and arguments.


    This form avoids superfluous object creation when the logger is disabled for the TRACE level.
  syntax:
    content: public abstract void trace(String format, Object arg1, Object arg2)
    parameters:
    - id: format
      type: java.lang.String
      description: the format string
    - id: arg1
      type: java.lang.Object
      description: the first argument
    - id: arg2
      type: java.lang.Object
      description: the second argument
- uid: org.slf4j.Logger.trace(java.lang.String,java.lang.Object...)
  id: trace(java.lang.String,java.lang.Object...)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.slf4j.Logger
  langs:
  - java
  name: trace(String format, Object[] arguments)
  nameWithType: Logger.trace(String format, Object[] arguments)
  fullName: org.slf4j.Logger.trace(String format, Object[] arguments)
  overload: org.slf4j.Logger.trace*
  type: Method
  package: org.slf4j
  summary: >-
    Log a message at the TRACE level according to the specified format and arguments.


    This form avoids superfluous string concatenation when the logger is disabled for the TRACE level. However, this variant incurs the hidden (and relatively small) cost of creating an `Object[]` before invoking the method, even if this logger is disabled for TRACE. The variants taking <xref uid="org.slf4j.Logger.trace(java.lang.String,java.lang.Object)" data-throw-if-not-resolved="false">one</xref> and <xref uid="org.slf4j.Logger.trace(java.lang.String,java.lang.Object,java.lang.Object)" data-throw-if-not-resolved="false">two</xref> arguments exist solely in order to avoid this hidden cost.
  syntax:
    content: public abstract void trace(String format, Object[] arguments)
    parameters:
    - id: format
      type: java.lang.String
      description: the format string
    - id: arguments
      type: java.lang.Object[]
      description: a list of 3 or more arguments
- uid: org.slf4j.Logger.trace(java.lang.String,java.lang.Throwable)
  id: trace(java.lang.String,java.lang.Throwable)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.slf4j.Logger
  langs:
  - java
  name: trace(String msg, Throwable t)
  nameWithType: Logger.trace(String msg, Throwable t)
  fullName: org.slf4j.Logger.trace(String msg, Throwable t)
  overload: org.slf4j.Logger.trace*
  type: Method
  package: org.slf4j
  summary: Log an exception (throwable) at the TRACE level with an accompanying message.
  syntax:
    content: public abstract void trace(String msg, Throwable t)
    parameters:
    - id: msg
      type: java.lang.String
      description: the message accompanying the exception
    - id: t
      type: java.lang.Throwable
      description: the exception (throwable) to log
- uid: org.slf4j.Logger.trace(org.slf4j.Marker,java.lang.String)
  id: trace(org.slf4j.Marker,java.lang.String)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.slf4j.Logger
  langs:
  - java
  name: trace(Marker marker, String msg)
  nameWithType: Logger.trace(Marker marker, String msg)
  fullName: org.slf4j.Logger.trace(Marker marker, String msg)
  overload: org.slf4j.Logger.trace*
  type: Method
  package: org.slf4j
  summary: Log a message with the specific Marker at the TRACE level.
  syntax:
    content: public abstract void trace(Marker marker, String msg)
    parameters:
    - id: marker
      type: org.slf4j.Marker
      description: the marker data specific to this log statement
    - id: msg
      type: java.lang.String
      description: the message string to be logged
- uid: org.slf4j.Logger.trace(org.slf4j.Marker,java.lang.String,java.lang.Object)
  id: trace(org.slf4j.Marker,java.lang.String,java.lang.Object)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.slf4j.Logger
  langs:
  - java
  name: trace(Marker marker, String format, Object arg)
  nameWithType: Logger.trace(Marker marker, String format, Object arg)
  fullName: org.slf4j.Logger.trace(Marker marker, String format, Object arg)
  overload: org.slf4j.Logger.trace*
  type: Method
  package: org.slf4j
  summary: This method is similar to <xref uid="org.slf4j.Logger.trace(java.lang.String,java.lang.Object)" data-throw-if-not-resolved="false">#trace(String, Object)</xref> method except that the marker data is also taken into consideration.
  syntax:
    content: public abstract void trace(Marker marker, String format, Object arg)
    parameters:
    - id: marker
      type: org.slf4j.Marker
      description: the marker data specific to this log statement
    - id: format
      type: java.lang.String
      description: the format string
    - id: arg
      type: java.lang.Object
      description: the argument
- uid: org.slf4j.Logger.trace(org.slf4j.Marker,java.lang.String,java.lang.Object,java.lang.Object)
  id: trace(org.slf4j.Marker,java.lang.String,java.lang.Object,java.lang.Object)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.slf4j.Logger
  langs:
  - java
  name: trace(Marker marker, String format, Object arg1, Object arg2)
  nameWithType: Logger.trace(Marker marker, String format, Object arg1, Object arg2)
  fullName: org.slf4j.Logger.trace(Marker marker, String format, Object arg1, Object arg2)
  overload: org.slf4j.Logger.trace*
  type: Method
  package: org.slf4j
  summary: This method is similar to <xref uid="org.slf4j.Logger.trace(java.lang.String,java.lang.Object,java.lang.Object)" data-throw-if-not-resolved="false">#trace(String, Object, Object)</xref> method except that the marker data is also taken into consideration.
  syntax:
    content: public abstract void trace(Marker marker, String format, Object arg1, Object arg2)
    parameters:
    - id: marker
      type: org.slf4j.Marker
      description: the marker data specific to this log statement
    - id: format
      type: java.lang.String
      description: the format string
    - id: arg1
      type: java.lang.Object
      description: the first argument
    - id: arg2
      type: java.lang.Object
      description: the second argument
- uid: org.slf4j.Logger.trace(org.slf4j.Marker,java.lang.String,java.lang.Object...)
  id: trace(org.slf4j.Marker,java.lang.String,java.lang.Object...)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.slf4j.Logger
  langs:
  - java
  name: trace(Marker marker, String format, Object[] argArray)
  nameWithType: Logger.trace(Marker marker, String format, Object[] argArray)
  fullName: org.slf4j.Logger.trace(Marker marker, String format, Object[] argArray)
  overload: org.slf4j.Logger.trace*
  type: Method
  package: org.slf4j
  summary: This method is similar to <xref uid="org.slf4j.Logger.trace*" data-throw-if-not-resolved="false">#trace(String, Object...)</xref> method except that the marker data is also taken into consideration.
  syntax:
    content: public abstract void trace(Marker marker, String format, Object[] argArray)
    parameters:
    - id: marker
      type: org.slf4j.Marker
      description: the marker data specific to this log statement
    - id: format
      type: java.lang.String
      description: the format string
    - id: argArray
      type: java.lang.Object[]
      description: an array of arguments
- uid: org.slf4j.Logger.trace(org.slf4j.Marker,java.lang.String,java.lang.Throwable)
  id: trace(org.slf4j.Marker,java.lang.String,java.lang.Throwable)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.slf4j.Logger
  langs:
  - java
  name: trace(Marker marker, String msg, Throwable t)
  nameWithType: Logger.trace(Marker marker, String msg, Throwable t)
  fullName: org.slf4j.Logger.trace(Marker marker, String msg, Throwable t)
  overload: org.slf4j.Logger.trace*
  type: Method
  package: org.slf4j
  summary: This method is similar to <xref uid="org.slf4j.Logger.trace(java.lang.String,java.lang.Throwable)" data-throw-if-not-resolved="false">#trace(String, Throwable)</xref> method except that the marker data is also taken into consideration.
  syntax:
    content: public abstract void trace(Marker marker, String msg, Throwable t)
    parameters:
    - id: marker
      type: org.slf4j.Marker
      description: the marker data specific to this log statement
    - id: msg
      type: java.lang.String
      description: the message accompanying the exception
    - id: t
      type: java.lang.Throwable
      description: the exception (throwable) to log
- uid: org.slf4j.Logger.warn(java.lang.String)
  id: warn(java.lang.String)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.slf4j.Logger
  langs:
  - java
  name: warn(String msg)
  nameWithType: Logger.warn(String msg)
  fullName: org.slf4j.Logger.warn(String msg)
  overload: org.slf4j.Logger.warn*
  type: Method
  package: org.slf4j
  summary: Log a message at the WARN level.
  syntax:
    content: public abstract void warn(String msg)
    parameters:
    - id: msg
      type: java.lang.String
      description: the message string to be logged
- uid: org.slf4j.Logger.warn(java.lang.String,java.lang.Object)
  id: warn(java.lang.String,java.lang.Object)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.slf4j.Logger
  langs:
  - java
  name: warn(String format, Object arg)
  nameWithType: Logger.warn(String format, Object arg)
  fullName: org.slf4j.Logger.warn(String format, Object arg)
  overload: org.slf4j.Logger.warn*
  type: Method
  package: org.slf4j
  summary: >-
    Log a message at the WARN level according to the specified format and argument.


    This form avoids superfluous object creation when the logger is disabled for the WARN level.
  syntax:
    content: public abstract void warn(String format, Object arg)
    parameters:
    - id: format
      type: java.lang.String
      description: the format string
    - id: arg
      type: java.lang.Object
      description: the argument
- uid: org.slf4j.Logger.warn(java.lang.String,java.lang.Object,java.lang.Object)
  id: warn(java.lang.String,java.lang.Object,java.lang.Object)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.slf4j.Logger
  langs:
  - java
  name: warn(String format, Object arg1, Object arg2)
  nameWithType: Logger.warn(String format, Object arg1, Object arg2)
  fullName: org.slf4j.Logger.warn(String format, Object arg1, Object arg2)
  overload: org.slf4j.Logger.warn*
  type: Method
  package: org.slf4j
  summary: >-
    Log a message at the WARN level according to the specified format and arguments.


    This form avoids superfluous object creation when the logger is disabled for the WARN level.
  syntax:
    content: public abstract void warn(String format, Object arg1, Object arg2)
    parameters:
    - id: format
      type: java.lang.String
      description: the format string
    - id: arg1
      type: java.lang.Object
      description: the first argument
    - id: arg2
      type: java.lang.Object
      description: the second argument
- uid: org.slf4j.Logger.warn(java.lang.String,java.lang.Object...)
  id: warn(java.lang.String,java.lang.Object...)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.slf4j.Logger
  langs:
  - java
  name: warn(String format, Object[] arguments)
  nameWithType: Logger.warn(String format, Object[] arguments)
  fullName: org.slf4j.Logger.warn(String format, Object[] arguments)
  overload: org.slf4j.Logger.warn*
  type: Method
  package: org.slf4j
  summary: >-
    Log a message at the WARN level according to the specified format and arguments.


    This form avoids superfluous string concatenation when the logger is disabled for the WARN level. However, this variant incurs the hidden (and relatively small) cost of creating an `Object[]` before invoking the method, even if this logger is disabled for WARN. The variants taking <xref uid="org.slf4j.Logger.warn(java.lang.String,java.lang.Object)" data-throw-if-not-resolved="false">one</xref> and <xref uid="org.slf4j.Logger.warn(java.lang.String,java.lang.Object,java.lang.Object)" data-throw-if-not-resolved="false">two</xref> arguments exist solely in order to avoid this hidden cost.
  syntax:
    content: public abstract void warn(String format, Object[] arguments)
    parameters:
    - id: format
      type: java.lang.String
      description: the format string
    - id: arguments
      type: java.lang.Object[]
      description: a list of 3 or more arguments
- uid: org.slf4j.Logger.warn(java.lang.String,java.lang.Throwable)
  id: warn(java.lang.String,java.lang.Throwable)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.slf4j.Logger
  langs:
  - java
  name: warn(String msg, Throwable t)
  nameWithType: Logger.warn(String msg, Throwable t)
  fullName: org.slf4j.Logger.warn(String msg, Throwable t)
  overload: org.slf4j.Logger.warn*
  type: Method
  package: org.slf4j
  summary: Log an exception (throwable) at the WARN level with an accompanying message.
  syntax:
    content: public abstract void warn(String msg, Throwable t)
    parameters:
    - id: msg
      type: java.lang.String
      description: the message accompanying the exception
    - id: t
      type: java.lang.Throwable
      description: the exception (throwable) to log
- uid: org.slf4j.Logger.warn(org.slf4j.Marker,java.lang.String)
  id: warn(org.slf4j.Marker,java.lang.String)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.slf4j.Logger
  langs:
  - java
  name: warn(Marker marker, String msg)
  nameWithType: Logger.warn(Marker marker, String msg)
  fullName: org.slf4j.Logger.warn(Marker marker, String msg)
  overload: org.slf4j.Logger.warn*
  type: Method
  package: org.slf4j
  summary: Log a message with the specific Marker at the WARN level.
  syntax:
    content: public abstract void warn(Marker marker, String msg)
    parameters:
    - id: marker
      type: org.slf4j.Marker
      description: The marker specific to this log statement
    - id: msg
      type: java.lang.String
      description: the message string to be logged
- uid: org.slf4j.Logger.warn(org.slf4j.Marker,java.lang.String,java.lang.Object)
  id: warn(org.slf4j.Marker,java.lang.String,java.lang.Object)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.slf4j.Logger
  langs:
  - java
  name: warn(Marker marker, String format, Object arg)
  nameWithType: Logger.warn(Marker marker, String format, Object arg)
  fullName: org.slf4j.Logger.warn(Marker marker, String format, Object arg)
  overload: org.slf4j.Logger.warn*
  type: Method
  package: org.slf4j
  summary: This method is similar to <xref uid="org.slf4j.Logger.warn(java.lang.String,java.lang.Object)" data-throw-if-not-resolved="false">#warn(String, Object)</xref> method except that the marker data is also taken into consideration.
  syntax:
    content: public abstract void warn(Marker marker, String format, Object arg)
    parameters:
    - id: marker
      type: org.slf4j.Marker
      description: the marker data specific to this log statement
    - id: format
      type: java.lang.String
      description: the format string
    - id: arg
      type: java.lang.Object
      description: the argument
- uid: org.slf4j.Logger.warn(org.slf4j.Marker,java.lang.String,java.lang.Object,java.lang.Object)
  id: warn(org.slf4j.Marker,java.lang.String,java.lang.Object,java.lang.Object)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.slf4j.Logger
  langs:
  - java
  name: warn(Marker marker, String format, Object arg1, Object arg2)
  nameWithType: Logger.warn(Marker marker, String format, Object arg1, Object arg2)
  fullName: org.slf4j.Logger.warn(Marker marker, String format, Object arg1, Object arg2)
  overload: org.slf4j.Logger.warn*
  type: Method
  package: org.slf4j
  summary: This method is similar to <xref uid="org.slf4j.Logger.warn(java.lang.String,java.lang.Object,java.lang.Object)" data-throw-if-not-resolved="false">#warn(String, Object, Object)</xref> method except that the marker data is also taken into consideration.
  syntax:
    content: public abstract void warn(Marker marker, String format, Object arg1, Object arg2)
    parameters:
    - id: marker
      type: org.slf4j.Marker
      description: the marker data specific to this log statement
    - id: format
      type: java.lang.String
      description: the format string
    - id: arg1
      type: java.lang.Object
      description: the first argument
    - id: arg2
      type: java.lang.Object
      description: the second argument
- uid: org.slf4j.Logger.warn(org.slf4j.Marker,java.lang.String,java.lang.Object...)
  id: warn(org.slf4j.Marker,java.lang.String,java.lang.Object...)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.slf4j.Logger
  langs:
  - java
  name: warn(Marker marker, String format, Object[] arguments)
  nameWithType: Logger.warn(Marker marker, String format, Object[] arguments)
  fullName: org.slf4j.Logger.warn(Marker marker, String format, Object[] arguments)
  overload: org.slf4j.Logger.warn*
  type: Method
  package: org.slf4j
  summary: This method is similar to <xref uid="org.slf4j.Logger.warn*" data-throw-if-not-resolved="false">#warn(String, Object...)</xref> method except that the marker data is also taken into consideration.
  syntax:
    content: public abstract void warn(Marker marker, String format, Object[] arguments)
    parameters:
    - id: marker
      type: org.slf4j.Marker
      description: the marker data specific to this log statement
    - id: format
      type: java.lang.String
      description: the format string
    - id: arguments
      type: java.lang.Object[]
      description: a list of 3 or more arguments
- uid: org.slf4j.Logger.warn(org.slf4j.Marker,java.lang.String,java.lang.Throwable)
  id: warn(org.slf4j.Marker,java.lang.String,java.lang.Throwable)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.slf4j.Logger
  langs:
  - java
  name: warn(Marker marker, String msg, Throwable t)
  nameWithType: Logger.warn(Marker marker, String msg, Throwable t)
  fullName: org.slf4j.Logger.warn(Marker marker, String msg, Throwable t)
  overload: org.slf4j.Logger.warn*
  type: Method
  package: org.slf4j
  summary: This method is similar to <xref uid="org.slf4j.Logger.warn(java.lang.String,java.lang.Throwable)" data-throw-if-not-resolved="false">#warn(String, Throwable)</xref> method except that the marker data is also taken into consideration.
  syntax:
    content: public abstract void warn(Marker marker, String msg, Throwable t)
    parameters:
    - id: marker
      type: org.slf4j.Marker
      description: the marker data for this log statement
    - id: msg
      type: java.lang.String
      description: the message accompanying the exception
    - id: t
      type: java.lang.Throwable
      description: the exception (throwable) to log
references:
- uid: java.lang.String
  spec.java:
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
- uid: org.slf4j.Logger.getName*
  name: getName
  nameWithType: Logger.getName
  fullName: org.slf4j.Logger.getName
  package: org.slf4j
- uid: boolean
  spec.java:
  - uid: boolean
    name: boolean
    fullName: boolean
- uid: org.slf4j.Logger.isTraceEnabled*
  name: isTraceEnabled
  nameWithType: Logger.isTraceEnabled
  fullName: org.slf4j.Logger.isTraceEnabled
  package: org.slf4j
- uid: org.slf4j.Logger.trace*
  name: trace
  nameWithType: Logger.trace
  fullName: org.slf4j.Logger.trace
  package: org.slf4j
- uid: java.lang.Object
  spec.java:
  - uid: java.lang.Object
    name: Object
    fullName: java.lang.Object
- uid: java.lang.Object[]
  spec.java:
  - uid: java.lang.Object
    name: Object
    fullName: java.lang.Object
  - name: '[]'
    fullName: '[]'
- uid: java.lang.Throwable
  spec.java:
  - uid: java.lang.Throwable
    name: Throwable
    fullName: java.lang.Throwable
- uid: org.slf4j.Marker
  name: Marker
  nameWithType: Marker
  fullName: org.slf4j.Marker
- uid: org.slf4j.Logger.isDebugEnabled*
  name: isDebugEnabled
  nameWithType: Logger.isDebugEnabled
  fullName: org.slf4j.Logger.isDebugEnabled
  package: org.slf4j
- uid: org.slf4j.Logger.debug*
  name: debug
  nameWithType: Logger.debug
  fullName: org.slf4j.Logger.debug
  package: org.slf4j
- uid: org.slf4j.Logger.isInfoEnabled*
  name: isInfoEnabled
  nameWithType: Logger.isInfoEnabled
  fullName: org.slf4j.Logger.isInfoEnabled
  package: org.slf4j
- uid: org.slf4j.Logger.info*
  name: info
  nameWithType: Logger.info
  fullName: org.slf4j.Logger.info
  package: org.slf4j
- uid: org.slf4j.Logger.isWarnEnabled*
  name: isWarnEnabled
  nameWithType: Logger.isWarnEnabled
  fullName: org.slf4j.Logger.isWarnEnabled
  package: org.slf4j
- uid: org.slf4j.Logger.warn*
  name: warn
  nameWithType: Logger.warn
  fullName: org.slf4j.Logger.warn
  package: org.slf4j
- uid: org.slf4j.Logger.isErrorEnabled*
  name: isErrorEnabled
  nameWithType: Logger.isErrorEnabled
  fullName: org.slf4j.Logger.isErrorEnabled
  package: org.slf4j
- uid: org.slf4j.Logger.error*
  name: error
  nameWithType: Logger.error
  fullName: org.slf4j.Logger.error
  package: org.slf4j
