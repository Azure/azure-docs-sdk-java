### YamlMime:JavaMember
uid: "com.fasterxml.jackson.databind.deser.std.AtomicReferenceDeserializer.getReferenced*"
fullName: "com.fasterxml.jackson.databind.deser.std.AtomicReferenceDeserializer.getReferenced"
name: "getReferenced"
nameWithType: "AtomicReferenceDeserializer.getReferenced"
members:
- uid: "com.fasterxml.jackson.databind.deser.std.AtomicReferenceDeserializer.getReferenced(java.util.concurrent.atomic.AtomicReference<java.lang.Object>)"
  fullName: "com.fasterxml.jackson.databind.deser.std.AtomicReferenceDeserializer.getReferenced(AtomicReference<Object> reference)"
  name: "getReferenced(AtomicReference<Object> reference)"
  nameWithType: "AtomicReferenceDeserializer.getReferenced(AtomicReference<Object> reference)"
  summary: "Method that may be called to find contents of specified reference, if any; or \\`null\\` if none. Note that method should never fail, so for types that use concept of \"absence\" vs \"presence\", \\`null\\` is to be returned for both \"absent\" and \"reference to \\`null\\`\" cases."
  overridden: "com.fasterxml.jackson.databind.deser.std.ReferenceTypeDeserializer.getReferenced(T)"
  parameters:
  - name: "reference"
    type: "<xref href=\"java.util.concurrent.atomic.AtomicReference?alt=java.util.concurrent.atomic.AtomicReference&text=AtomicReference\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Object?alt=java.lang.Object&text=Object\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public Object getReferenced(AtomicReference<Object> reference)"
  returns:
    type: "<xref href=\"java.lang.Object?alt=java.lang.Object&text=Object\" data-throw-if-not-resolved=\"False\" />"
type: "method"
metadata: {}
package: "com.fasterxml.jackson.databind.deser.std"
artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
