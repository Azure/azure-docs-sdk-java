### YamlMime:ManagedReference
items:
- uid: com.fasterxml.jackson.core.util.JsonParserDelegate
  id: JsonParserDelegate
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.util
  children:
  - com.fasterxml.jackson.core.util.JsonParserDelegate.JsonParserDelegate(com.fasterxml.jackson.core.JsonParser)
  - com.fasterxml.jackson.core.util.JsonParserDelegate.canReadObjectId()
  - com.fasterxml.jackson.core.util.JsonParserDelegate.canReadTypeId()
  - com.fasterxml.jackson.core.util.JsonParserDelegate.canUseSchema(com.fasterxml.jackson.core.FormatSchema)
  - com.fasterxml.jackson.core.util.JsonParserDelegate.clearCurrentToken()
  - com.fasterxml.jackson.core.util.JsonParserDelegate.close()
  - com.fasterxml.jackson.core.util.JsonParserDelegate.currentToken()
  - com.fasterxml.jackson.core.util.JsonParserDelegate.currentTokenId()
  - com.fasterxml.jackson.core.util.JsonParserDelegate.delegate
  - com.fasterxml.jackson.core.util.JsonParserDelegate.delegate()
  - com.fasterxml.jackson.core.util.JsonParserDelegate.disable(com.fasterxml.jackson.core.JsonParser.Feature)
  - com.fasterxml.jackson.core.util.JsonParserDelegate.enable(com.fasterxml.jackson.core.JsonParser.Feature)
  - com.fasterxml.jackson.core.util.JsonParserDelegate.finishToken()
  - com.fasterxml.jackson.core.util.JsonParserDelegate.getBigIntegerValue()
  - com.fasterxml.jackson.core.util.JsonParserDelegate.getBinaryValue(com.fasterxml.jackson.core.Base64Variant)
  - com.fasterxml.jackson.core.util.JsonParserDelegate.getBooleanValue()
  - com.fasterxml.jackson.core.util.JsonParserDelegate.getByteValue()
  - com.fasterxml.jackson.core.util.JsonParserDelegate.getCodec()
  - com.fasterxml.jackson.core.util.JsonParserDelegate.getCurrentLocation()
  - com.fasterxml.jackson.core.util.JsonParserDelegate.getCurrentName()
  - com.fasterxml.jackson.core.util.JsonParserDelegate.getCurrentToken()
  - com.fasterxml.jackson.core.util.JsonParserDelegate.getCurrentTokenId()
  - com.fasterxml.jackson.core.util.JsonParserDelegate.getCurrentValue()
  - com.fasterxml.jackson.core.util.JsonParserDelegate.getDecimalValue()
  - com.fasterxml.jackson.core.util.JsonParserDelegate.getDoubleValue()
  - com.fasterxml.jackson.core.util.JsonParserDelegate.getEmbeddedObject()
  - com.fasterxml.jackson.core.util.JsonParserDelegate.getFeatureMask()
  - com.fasterxml.jackson.core.util.JsonParserDelegate.getFloatValue()
  - com.fasterxml.jackson.core.util.JsonParserDelegate.getInputSource()
  - com.fasterxml.jackson.core.util.JsonParserDelegate.getIntValue()
  - com.fasterxml.jackson.core.util.JsonParserDelegate.getLastClearedToken()
  - com.fasterxml.jackson.core.util.JsonParserDelegate.getLongValue()
  - com.fasterxml.jackson.core.util.JsonParserDelegate.getNumberType()
  - com.fasterxml.jackson.core.util.JsonParserDelegate.getNumberValue()
  - com.fasterxml.jackson.core.util.JsonParserDelegate.getObjectId()
  - com.fasterxml.jackson.core.util.JsonParserDelegate.getParsingContext()
  - com.fasterxml.jackson.core.util.JsonParserDelegate.getSchema()
  - com.fasterxml.jackson.core.util.JsonParserDelegate.getShortValue()
  - com.fasterxml.jackson.core.util.JsonParserDelegate.getText()
  - com.fasterxml.jackson.core.util.JsonParserDelegate.getText(java.io.Writer)
  - com.fasterxml.jackson.core.util.JsonParserDelegate.getTextCharacters()
  - com.fasterxml.jackson.core.util.JsonParserDelegate.getTextLength()
  - com.fasterxml.jackson.core.util.JsonParserDelegate.getTextOffset()
  - com.fasterxml.jackson.core.util.JsonParserDelegate.getTokenLocation()
  - com.fasterxml.jackson.core.util.JsonParserDelegate.getTypeId()
  - com.fasterxml.jackson.core.util.JsonParserDelegate.getValueAsBoolean()
  - com.fasterxml.jackson.core.util.JsonParserDelegate.getValueAsBoolean(boolean)
  - com.fasterxml.jackson.core.util.JsonParserDelegate.getValueAsDouble()
  - com.fasterxml.jackson.core.util.JsonParserDelegate.getValueAsDouble(double)
  - com.fasterxml.jackson.core.util.JsonParserDelegate.getValueAsInt()
  - com.fasterxml.jackson.core.util.JsonParserDelegate.getValueAsInt(int)
  - com.fasterxml.jackson.core.util.JsonParserDelegate.getValueAsLong()
  - com.fasterxml.jackson.core.util.JsonParserDelegate.getValueAsLong(long)
  - com.fasterxml.jackson.core.util.JsonParserDelegate.getValueAsString()
  - com.fasterxml.jackson.core.util.JsonParserDelegate.getValueAsString(java.lang.String)
  - com.fasterxml.jackson.core.util.JsonParserDelegate.hasCurrentToken()
  - com.fasterxml.jackson.core.util.JsonParserDelegate.hasTextCharacters()
  - com.fasterxml.jackson.core.util.JsonParserDelegate.hasToken(com.fasterxml.jackson.core.JsonToken)
  - com.fasterxml.jackson.core.util.JsonParserDelegate.hasTokenId(int)
  - com.fasterxml.jackson.core.util.JsonParserDelegate.isClosed()
  - com.fasterxml.jackson.core.util.JsonParserDelegate.isEnabled(com.fasterxml.jackson.core.JsonParser.Feature)
  - com.fasterxml.jackson.core.util.JsonParserDelegate.isExpectedStartArrayToken()
  - com.fasterxml.jackson.core.util.JsonParserDelegate.isExpectedStartObjectToken()
  - com.fasterxml.jackson.core.util.JsonParserDelegate.isNaN()
  - com.fasterxml.jackson.core.util.JsonParserDelegate.nextToken()
  - com.fasterxml.jackson.core.util.JsonParserDelegate.nextValue()
  - com.fasterxml.jackson.core.util.JsonParserDelegate.overrideCurrentName(java.lang.String)
  - com.fasterxml.jackson.core.util.JsonParserDelegate.overrideFormatFeatures(int,int)
  - com.fasterxml.jackson.core.util.JsonParserDelegate.overrideStdFeatures(int,int)
  - com.fasterxml.jackson.core.util.JsonParserDelegate.readBinaryValue(com.fasterxml.jackson.core.Base64Variant,java.io.OutputStream)
  - com.fasterxml.jackson.core.util.JsonParserDelegate.requiresCustomCodec()
  - com.fasterxml.jackson.core.util.JsonParserDelegate.setCodec(com.fasterxml.jackson.core.ObjectCodec)
  - com.fasterxml.jackson.core.util.JsonParserDelegate.setCurrentValue(java.lang.Object)
  - com.fasterxml.jackson.core.util.JsonParserDelegate.setFeatureMask(int)
  - com.fasterxml.jackson.core.util.JsonParserDelegate.setSchema(com.fasterxml.jackson.core.FormatSchema)
  - com.fasterxml.jackson.core.util.JsonParserDelegate.skipChildren()
  - com.fasterxml.jackson.core.util.JsonParserDelegate.version()
  langs:
  - java
  name: JsonParserDelegate
  nameWithType: JsonParserDelegate
  fullName: com.fasterxml.jackson.core.util.JsonParserDelegate
  type: Class
  package: com.fasterxml.jackson.core.util
  summary: >-
    Helper class that implements [delegation pattern][] for <xref uid="com.fasterxml.jackson.core.JsonParser" data-throw-if-not-resolved="false">JsonParser</xref>, to allow for simple overridability of basic parsing functionality. The idea is that any functionality to be modified can be simply overridden; and anything else will be delegated by default.



    [delegation pattern]: http://en.wikipedia.org/wiki/Delegation_pattern
  syntax:
    content: public class JsonParserDelegate extends JsonParser
  inheritance:
  - java.lang.Object
  - com.fasterxml.jackson.core.JsonParser
  inheritedMembers:
  - com.fasterxml.jackson.core.JsonParser.<T>readValueAs(com.fasterxml.jackson.core.type.TypeReference<?>)
  - com.fasterxml.jackson.core.JsonParser.<T>readValueAs(java.lang.Class<T>)
  - com.fasterxml.jackson.core.JsonParser.<T>readValueAsTree()
  - com.fasterxml.jackson.core.JsonParser.<T>readValuesAs(com.fasterxml.jackson.core.type.TypeReference<T>)
  - com.fasterxml.jackson.core.JsonParser.<T>readValuesAs(java.lang.Class<T>)
  - com.fasterxml.jackson.core.JsonParser._codec()
  - com.fasterxml.jackson.core.JsonParser._constructError(java.lang.String)
  - com.fasterxml.jackson.core.JsonParser._reportUnsupportedOperation()
  - com.fasterxml.jackson.core.JsonParser.canParseAsync()
  - com.fasterxml.jackson.core.JsonParser.canReadObjectId()
  - com.fasterxml.jackson.core.JsonParser.canReadTypeId()
  - com.fasterxml.jackson.core.JsonParser.canUseSchema(com.fasterxml.jackson.core.FormatSchema)
  - com.fasterxml.jackson.core.JsonParser.clearCurrentToken()
  - com.fasterxml.jackson.core.JsonParser.close()
  - com.fasterxml.jackson.core.JsonParser.configure(com.fasterxml.jackson.core.JsonParser.Feature,boolean)
  - com.fasterxml.jackson.core.JsonParser.currentName()
  - com.fasterxml.jackson.core.JsonParser.currentToken()
  - com.fasterxml.jackson.core.JsonParser.currentTokenId()
  - com.fasterxml.jackson.core.JsonParser.disable(com.fasterxml.jackson.core.JsonParser.Feature)
  - com.fasterxml.jackson.core.JsonParser.enable(com.fasterxml.jackson.core.JsonParser.Feature)
  - com.fasterxml.jackson.core.JsonParser.finishToken()
  - com.fasterxml.jackson.core.JsonParser.getBigIntegerValue()
  - com.fasterxml.jackson.core.JsonParser.getBinaryValue()
  - com.fasterxml.jackson.core.JsonParser.getBinaryValue(com.fasterxml.jackson.core.Base64Variant)
  - com.fasterxml.jackson.core.JsonParser.getBooleanValue()
  - com.fasterxml.jackson.core.JsonParser.getByteValue()
  - com.fasterxml.jackson.core.JsonParser.getCodec()
  - com.fasterxml.jackson.core.JsonParser.getCurrentLocation()
  - com.fasterxml.jackson.core.JsonParser.getCurrentName()
  - com.fasterxml.jackson.core.JsonParser.getCurrentToken()
  - com.fasterxml.jackson.core.JsonParser.getCurrentTokenId()
  - com.fasterxml.jackson.core.JsonParser.getCurrentValue()
  - com.fasterxml.jackson.core.JsonParser.getDecimalValue()
  - com.fasterxml.jackson.core.JsonParser.getDoubleValue()
  - com.fasterxml.jackson.core.JsonParser.getEmbeddedObject()
  - com.fasterxml.jackson.core.JsonParser.getFeatureMask()
  - com.fasterxml.jackson.core.JsonParser.getFloatValue()
  - com.fasterxml.jackson.core.JsonParser.getFormatFeatures()
  - com.fasterxml.jackson.core.JsonParser.getInputSource()
  - com.fasterxml.jackson.core.JsonParser.getIntValue()
  - com.fasterxml.jackson.core.JsonParser.getLastClearedToken()
  - com.fasterxml.jackson.core.JsonParser.getLongValue()
  - com.fasterxml.jackson.core.JsonParser.getNonBlockingInputFeeder()
  - com.fasterxml.jackson.core.JsonParser.getNumberType()
  - com.fasterxml.jackson.core.JsonParser.getNumberValue()
  - com.fasterxml.jackson.core.JsonParser.getObjectId()
  - com.fasterxml.jackson.core.JsonParser.getParsingContext()
  - com.fasterxml.jackson.core.JsonParser.getSchema()
  - com.fasterxml.jackson.core.JsonParser.getShortValue()
  - com.fasterxml.jackson.core.JsonParser.getText()
  - com.fasterxml.jackson.core.JsonParser.getText(java.io.Writer)
  - com.fasterxml.jackson.core.JsonParser.getTextCharacters()
  - com.fasterxml.jackson.core.JsonParser.getTextLength()
  - com.fasterxml.jackson.core.JsonParser.getTextOffset()
  - com.fasterxml.jackson.core.JsonParser.getTokenLocation()
  - com.fasterxml.jackson.core.JsonParser.getTypeId()
  - com.fasterxml.jackson.core.JsonParser.getValueAsBoolean()
  - com.fasterxml.jackson.core.JsonParser.getValueAsBoolean(boolean)
  - com.fasterxml.jackson.core.JsonParser.getValueAsDouble()
  - com.fasterxml.jackson.core.JsonParser.getValueAsDouble(double)
  - com.fasterxml.jackson.core.JsonParser.getValueAsInt()
  - com.fasterxml.jackson.core.JsonParser.getValueAsInt(int)
  - com.fasterxml.jackson.core.JsonParser.getValueAsLong()
  - com.fasterxml.jackson.core.JsonParser.getValueAsLong(long)
  - com.fasterxml.jackson.core.JsonParser.getValueAsString()
  - com.fasterxml.jackson.core.JsonParser.getValueAsString(java.lang.String)
  - com.fasterxml.jackson.core.JsonParser.hasCurrentToken()
  - com.fasterxml.jackson.core.JsonParser.hasTextCharacters()
  - com.fasterxml.jackson.core.JsonParser.hasToken(com.fasterxml.jackson.core.JsonToken)
  - com.fasterxml.jackson.core.JsonParser.hasTokenId(int)
  - com.fasterxml.jackson.core.JsonParser.isClosed()
  - com.fasterxml.jackson.core.JsonParser.isEnabled(com.fasterxml.jackson.core.JsonParser.Feature)
  - com.fasterxml.jackson.core.JsonParser.isEnabled(com.fasterxml.jackson.core.StreamReadFeature)
  - com.fasterxml.jackson.core.JsonParser.isExpectedStartArrayToken()
  - com.fasterxml.jackson.core.JsonParser.isExpectedStartObjectToken()
  - com.fasterxml.jackson.core.JsonParser.isNaN()
  - com.fasterxml.jackson.core.JsonParser.nextBooleanValue()
  - com.fasterxml.jackson.core.JsonParser.nextFieldName()
  - com.fasterxml.jackson.core.JsonParser.nextFieldName(com.fasterxml.jackson.core.SerializableString)
  - com.fasterxml.jackson.core.JsonParser.nextIntValue(int)
  - com.fasterxml.jackson.core.JsonParser.nextLongValue(long)
  - com.fasterxml.jackson.core.JsonParser.nextTextValue()
  - com.fasterxml.jackson.core.JsonParser.nextToken()
  - com.fasterxml.jackson.core.JsonParser.nextValue()
  - com.fasterxml.jackson.core.JsonParser.overrideCurrentName(java.lang.String)
  - com.fasterxml.jackson.core.JsonParser.overrideFormatFeatures(int,int)
  - com.fasterxml.jackson.core.JsonParser.overrideStdFeatures(int,int)
  - com.fasterxml.jackson.core.JsonParser.readBinaryValue(com.fasterxml.jackson.core.Base64Variant,java.io.OutputStream)
  - com.fasterxml.jackson.core.JsonParser.readBinaryValue(java.io.OutputStream)
  - com.fasterxml.jackson.core.JsonParser.releaseBuffered(java.io.OutputStream)
  - com.fasterxml.jackson.core.JsonParser.releaseBuffered(java.io.Writer)
  - com.fasterxml.jackson.core.JsonParser.requiresCustomCodec()
  - com.fasterxml.jackson.core.JsonParser.setCodec(com.fasterxml.jackson.core.ObjectCodec)
  - com.fasterxml.jackson.core.JsonParser.setCurrentValue(java.lang.Object)
  - com.fasterxml.jackson.core.JsonParser.setFeatureMask(int)
  - com.fasterxml.jackson.core.JsonParser.setRequestPayloadOnError(byte[],java.lang.String)
  - com.fasterxml.jackson.core.JsonParser.setRequestPayloadOnError(com.fasterxml.jackson.core.util.RequestPayload)
  - com.fasterxml.jackson.core.JsonParser.setRequestPayloadOnError(java.lang.String)
  - com.fasterxml.jackson.core.JsonParser.setSchema(com.fasterxml.jackson.core.FormatSchema)
  - com.fasterxml.jackson.core.JsonParser.skipChildren()
  - com.fasterxml.jackson.core.JsonParser.version()
  - java.lang.Object.clone()
  - java.lang.Object.equals(java.lang.Object)
  - java.lang.Object.finalize()
  - java.lang.Object.getClass()
  - java.lang.Object.hashCode()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.toString()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
- uid: com.fasterxml.jackson.core.util.JsonParserDelegate.JsonParserDelegate(com.fasterxml.jackson.core.JsonParser)
  id: JsonParserDelegate(com.fasterxml.jackson.core.JsonParser)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.util.JsonParserDelegate
  langs:
  - java
  name: JsonParserDelegate(JsonParser d)
  nameWithType: JsonParserDelegate.JsonParserDelegate(JsonParser d)
  fullName: com.fasterxml.jackson.core.util.JsonParserDelegate.JsonParserDelegate(JsonParser d)
  overload: com.fasterxml.jackson.core.util.JsonParserDelegate.JsonParserDelegate*
  type: Constructor
  package: com.fasterxml.jackson.core.util
  syntax:
    content: public JsonParserDelegate(JsonParser d)
    parameters:
    - id: d
      type: com.fasterxml.jackson.core.JsonParser
- uid: com.fasterxml.jackson.core.util.JsonParserDelegate.canReadObjectId()
  id: canReadObjectId()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.util.JsonParserDelegate
  langs:
  - java
  name: canReadObjectId()
  nameWithType: JsonParserDelegate.canReadObjectId()
  fullName: com.fasterxml.jackson.core.util.JsonParserDelegate.canReadObjectId()
  overload: com.fasterxml.jackson.core.util.JsonParserDelegate.canReadObjectId*
  type: Method
  package: com.fasterxml.jackson.core.util
  summary: >-
    Introspection method that may be called to see if the underlying data format supports some kind of Object Ids natively (many do not; for example, JSON doesn't).


    Default implementation returns true; overridden by data formats that do support native Object Ids. Caller is expected to either use a non-native notation (explicit property or such), or fail, in case it can not use native object ids.
  syntax:
    content: public boolean canReadObjectId()
    return:
      type: boolean
- uid: com.fasterxml.jackson.core.util.JsonParserDelegate.canReadTypeId()
  id: canReadTypeId()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.util.JsonParserDelegate
  langs:
  - java
  name: canReadTypeId()
  nameWithType: JsonParserDelegate.canReadTypeId()
  fullName: com.fasterxml.jackson.core.util.JsonParserDelegate.canReadTypeId()
  overload: com.fasterxml.jackson.core.util.JsonParserDelegate.canReadTypeId*
  type: Method
  package: com.fasterxml.jackson.core.util
  summary: >-
    Introspection method that may be called to see if the underlying data format supports some kind of Type Ids natively (many do not; for example, JSON doesn't).


    Default implementation returns true; overridden by data formats that do support native Type Ids. Caller is expected to either use a non-native notation (explicit property or such), or fail, in case it can not use native type ids.
  syntax:
    content: public boolean canReadTypeId()
    return:
      type: boolean
- uid: com.fasterxml.jackson.core.util.JsonParserDelegate.canUseSchema(com.fasterxml.jackson.core.FormatSchema)
  id: canUseSchema(com.fasterxml.jackson.core.FormatSchema)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.util.JsonParserDelegate
  langs:
  - java
  name: canUseSchema(FormatSchema schema)
  nameWithType: JsonParserDelegate.canUseSchema(FormatSchema schema)
  fullName: com.fasterxml.jackson.core.util.JsonParserDelegate.canUseSchema(FormatSchema schema)
  overload: com.fasterxml.jackson.core.util.JsonParserDelegate.canUseSchema*
  type: Method
  package: com.fasterxml.jackson.core.util
  summary: Method that can be used to verify that given schema can be used with this parser (using <xref uid="com.fasterxml.jackson.core.util.JsonParserDelegate.setSchema*" data-throw-if-not-resolved="false">#setSchema</xref>).
  syntax:
    content: public boolean canUseSchema(FormatSchema schema)
    parameters:
    - id: schema
      type: com.fasterxml.jackson.core.FormatSchema
    return:
      type: boolean
- uid: com.fasterxml.jackson.core.util.JsonParserDelegate.clearCurrentToken()
  id: clearCurrentToken()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.util.JsonParserDelegate
  langs:
  - java
  name: clearCurrentToken()
  nameWithType: JsonParserDelegate.clearCurrentToken()
  fullName: com.fasterxml.jackson.core.util.JsonParserDelegate.clearCurrentToken()
  overload: com.fasterxml.jackson.core.util.JsonParserDelegate.clearCurrentToken*
  type: Method
  package: com.fasterxml.jackson.core.util
  summary: >-
    Method called to "consume" the current token by effectively removing it so that <xref uid="com.fasterxml.jackson.core.util.JsonParserDelegate.hasCurrentToken*" data-throw-if-not-resolved="false">#hasCurrentToken</xref> returns false, and <xref uid="com.fasterxml.jackson.core.util.JsonParserDelegate.getCurrentToken*" data-throw-if-not-resolved="false">#getCurrentToken</xref> null). Cleared token value can still be accessed by calling <xref uid="com.fasterxml.jackson.core.util.JsonParserDelegate.getLastClearedToken*" data-throw-if-not-resolved="false">#getLastClearedToken</xref> (if absolutely needed), but usually isn't.


    Method was added to be used by the optional data binder, since it has to be able to consume last token used for binding (so that it will not be used again).
  syntax:
    content: public void clearCurrentToken()
- uid: com.fasterxml.jackson.core.util.JsonParserDelegate.close()
  id: close()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.util.JsonParserDelegate
  langs:
  - java
  name: close()
  nameWithType: JsonParserDelegate.close()
  fullName: com.fasterxml.jackson.core.util.JsonParserDelegate.close()
  overload: com.fasterxml.jackson.core.util.JsonParserDelegate.close*
  type: Method
  package: com.fasterxml.jackson.core.util
  summary: Closes the parser so that no further iteration or data access can be made; will also close the underlying input source if parser either **owns** the input source, or feature <xref uid="" data-throw-if-not-resolved="false">Feature#AUTO_CLOSE_SOURCE</xref> is enabled. Whether parser owns the input source depends on factory method that was used to construct instance (so check <xref uid="com.fasterxml.jackson.core.JsonFactory" data-throw-if-not-resolved="false">com.fasterxml.jackson.core.JsonFactory</xref> for details, but the general idea is that if caller passes in closable resource (such as <xref uid="java.io.InputStream" data-throw-if-not-resolved="false">InputStream</xref> or <xref uid="java.io.Reader" data-throw-if-not-resolved="false">Reader</xref>) parser does NOT own the source; but if it passes a reference (such as <xref uid="java.io.File" data-throw-if-not-resolved="false">java.io.File</xref> or <xref uid="java.net.URL" data-throw-if-not-resolved="false">java.net.URL</xref> and creates stream or reader it does own them.
  syntax:
    content: public void close()
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.util.JsonParserDelegate.currentToken()
  id: currentToken()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.util.JsonParserDelegate
  langs:
  - java
  name: currentToken()
  nameWithType: JsonParserDelegate.currentToken()
  fullName: com.fasterxml.jackson.core.util.JsonParserDelegate.currentToken()
  overload: com.fasterxml.jackson.core.util.JsonParserDelegate.currentToken*
  type: Method
  package: com.fasterxml.jackson.core.util
  summary: Accessor to find which token parser currently points to, if any; null will be returned if none. If return value is non-null, data associated with the token is available via other accessor methods.
  syntax:
    content: public JsonToken currentToken()
    return:
      type: com.fasterxml.jackson.core.JsonToken
- uid: com.fasterxml.jackson.core.util.JsonParserDelegate.currentTokenId()
  id: currentTokenId()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.util.JsonParserDelegate
  langs:
  - java
  name: currentTokenId()
  nameWithType: JsonParserDelegate.currentTokenId()
  fullName: com.fasterxml.jackson.core.util.JsonParserDelegate.currentTokenId()
  overload: com.fasterxml.jackson.core.util.JsonParserDelegate.currentTokenId*
  type: Method
  package: com.fasterxml.jackson.core.util
  summary: >-
    Method similar to <xref uid="com.fasterxml.jackson.core.util.JsonParserDelegate.getCurrentToken()" data-throw-if-not-resolved="false">#getCurrentToken()</xref> but that returns an `int` instead of <xref uid="com.fasterxml.jackson.core.JsonToken" data-throw-if-not-resolved="false">JsonToken</xref> (enum value).


    Use of int directly is typically more efficient on switch statements, so this method may be useful when building low-overhead codecs. Note, however, that effect may not be big enough to matter: make sure to profile performance before deciding to use this method.
  syntax:
    content: public int currentTokenId()
    return:
      type: int
- uid: com.fasterxml.jackson.core.util.JsonParserDelegate.delegate
  id: delegate
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.util.JsonParserDelegate
  langs:
  - java
  name: delegate
  nameWithType: JsonParserDelegate.delegate
  fullName: com.fasterxml.jackson.core.util.JsonParserDelegate.delegate
  type: Field
  package: com.fasterxml.jackson.core.util
  summary: Delegate object that method calls are delegated to.
  syntax:
    content: protected JsonParser delegate
    return:
      type: com.fasterxml.jackson.core.JsonParser
- uid: com.fasterxml.jackson.core.util.JsonParserDelegate.delegate()
  id: delegate()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.util.JsonParserDelegate
  langs:
  - java
  name: delegate()
  nameWithType: JsonParserDelegate.delegate()
  fullName: com.fasterxml.jackson.core.util.JsonParserDelegate.delegate()
  overload: com.fasterxml.jackson.core.util.JsonParserDelegate.delegate*
  type: Method
  package: com.fasterxml.jackson.core.util
  summary: Accessor for getting the immediate <xref uid="com.fasterxml.jackson.core.JsonParser" data-throw-if-not-resolved="false">JsonParser</xref> this parser delegates calls to.
  syntax:
    content: public JsonParser delegate()
    return:
      type: com.fasterxml.jackson.core.JsonParser
- uid: com.fasterxml.jackson.core.util.JsonParserDelegate.disable(com.fasterxml.jackson.core.JsonParser.Feature)
  id: disable(com.fasterxml.jackson.core.JsonParser.Feature)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.util.JsonParserDelegate
  langs:
  - java
  name: disable(JsonParser.Feature f)
  nameWithType: JsonParserDelegate.disable(JsonParser.Feature f)
  fullName: com.fasterxml.jackson.core.util.JsonParserDelegate.disable(JsonParser.Feature f)
  overload: com.fasterxml.jackson.core.util.JsonParserDelegate.disable*
  type: Method
  package: com.fasterxml.jackson.core.util
  summary: Method for disabling specified feature (check <xref uid="" data-throw-if-not-resolved="false">Feature</xref> for list of features)
  syntax:
    content: public JsonParser disable(JsonParser.Feature f)
    parameters:
    - id: f
      type: com.fasterxml.jackson.core.JsonParser.Feature
    return:
      type: com.fasterxml.jackson.core.JsonParser
- uid: com.fasterxml.jackson.core.util.JsonParserDelegate.enable(com.fasterxml.jackson.core.JsonParser.Feature)
  id: enable(com.fasterxml.jackson.core.JsonParser.Feature)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.util.JsonParserDelegate
  langs:
  - java
  name: enable(JsonParser.Feature f)
  nameWithType: JsonParserDelegate.enable(JsonParser.Feature f)
  fullName: com.fasterxml.jackson.core.util.JsonParserDelegate.enable(JsonParser.Feature f)
  overload: com.fasterxml.jackson.core.util.JsonParserDelegate.enable*
  type: Method
  package: com.fasterxml.jackson.core.util
  summary: Method for enabling specified parser feature (check <xref uid="" data-throw-if-not-resolved="false">Feature</xref> for list of features)
  syntax:
    content: public JsonParser enable(JsonParser.Feature f)
    parameters:
    - id: f
      type: com.fasterxml.jackson.core.JsonParser.Feature
    return:
      type: com.fasterxml.jackson.core.JsonParser
- uid: com.fasterxml.jackson.core.util.JsonParserDelegate.finishToken()
  id: finishToken()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.util.JsonParserDelegate
  langs:
  - java
  name: finishToken()
  nameWithType: JsonParserDelegate.finishToken()
  fullName: com.fasterxml.jackson.core.util.JsonParserDelegate.finishToken()
  overload: com.fasterxml.jackson.core.util.JsonParserDelegate.finishToken*
  type: Method
  package: com.fasterxml.jackson.core.util
  summary: >-
    Method that may be used to force full handling of the current token so that even if lazy processing is enabled, the whole contents are read for possible retrieval. This is usually used to ensure that the token end location is available, as well as token contents (similar to what calling, say <xref uid="com.fasterxml.jackson.core.util.JsonParserDelegate.getTextCharacters()" data-throw-if-not-resolved="false">#getTextCharacters()</xref>, would achieve).


    Note that for many dataformat implementations this method will not do anything; this is the default implementation unless overridden by sub-classes.
  syntax:
    content: public void finishToken()
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.util.JsonParserDelegate.getBigIntegerValue()
  id: getBigIntegerValue()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.util.JsonParserDelegate
  langs:
  - java
  name: getBigIntegerValue()
  nameWithType: JsonParserDelegate.getBigIntegerValue()
  fullName: com.fasterxml.jackson.core.util.JsonParserDelegate.getBigIntegerValue()
  overload: com.fasterxml.jackson.core.util.JsonParserDelegate.getBigIntegerValue*
  type: Method
  package: com.fasterxml.jackson.core.util
  summary: Numeric accessor that can be called when the current token is of type <xref uid="com.fasterxml.jackson.core.JsonToken.VALUE_NUMBER_INT" data-throw-if-not-resolved="false">JsonToken#VALUE_NUMBER_INT</xref> and it can not be used as a Java long primitive type due to its magnitude. It can also be called for <xref uid="com.fasterxml.jackson.core.JsonToken.VALUE_NUMBER_FLOAT" data-throw-if-not-resolved="false">JsonToken#VALUE_NUMBER_FLOAT</xref>; if so, it is equivalent to calling <xref uid="com.fasterxml.jackson.core.util.JsonParserDelegate.getDecimalValue*" data-throw-if-not-resolved="false">#getDecimalValue</xref> and then constructing a <xref uid="java.math.BigInteger" data-throw-if-not-resolved="false">BigInteger</xref> from that value.
  syntax:
    content: public BigInteger getBigIntegerValue()
    return:
      type: java.math.BigInteger
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.util.JsonParserDelegate.getBinaryValue(com.fasterxml.jackson.core.Base64Variant)
  id: getBinaryValue(com.fasterxml.jackson.core.Base64Variant)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.util.JsonParserDelegate
  langs:
  - java
  name: getBinaryValue(Base64Variant b64variant)
  nameWithType: JsonParserDelegate.getBinaryValue(Base64Variant b64variant)
  fullName: com.fasterxml.jackson.core.util.JsonParserDelegate.getBinaryValue(Base64Variant b64variant)
  overload: com.fasterxml.jackson.core.util.JsonParserDelegate.getBinaryValue*
  type: Method
  package: com.fasterxml.jackson.core.util
  summary: >-
    Method that can be used to read (and consume -- results may not be accessible using other methods after the call) base64-encoded binary data included in the current textual JSON value. It works similar to getting String value via <xref uid="com.fasterxml.jackson.core.util.JsonParserDelegate.getText*" data-throw-if-not-resolved="false">#getText</xref> and decoding result (except for decoding part), but should be significantly more performant.


    Note that non-decoded textual contents of the current token are not guaranteed to be accessible after this method is called. Current implementation, for example, clears up textual content during decoding. Decoded binary content, however, will be retained until parser is advanced to the next event.
  syntax:
    content: public byte[] getBinaryValue(Base64Variant b64variant)
    parameters:
    - id: b64variant
      type: com.fasterxml.jackson.core.Base64Variant
    return:
      type: byte[]
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.util.JsonParserDelegate.getBooleanValue()
  id: getBooleanValue()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.util.JsonParserDelegate
  langs:
  - java
  name: getBooleanValue()
  nameWithType: JsonParserDelegate.getBooleanValue()
  fullName: com.fasterxml.jackson.core.util.JsonParserDelegate.getBooleanValue()
  overload: com.fasterxml.jackson.core.util.JsonParserDelegate.getBooleanValue*
  type: Method
  package: com.fasterxml.jackson.core.util
  summary: >-
    Convenience accessor that can be called when the current token is <xref uid="com.fasterxml.jackson.core.JsonToken.VALUE_TRUE" data-throw-if-not-resolved="false">JsonToken#VALUE_TRUE</xref> or <xref uid="com.fasterxml.jackson.core.JsonToken.VALUE_FALSE" data-throw-if-not-resolved="false">JsonToken#VALUE_FALSE</xref>.


    Note: if the token is not of above-mentioned boolean types, an integer, but its value falls outside of range of Java long, a <xref uid="com.fasterxml.jackson.core.JsonParseException" data-throw-if-not-resolved="false">JsonParseException</xref> may be thrown to indicate numeric overflow/underflow.
  syntax:
    content: public boolean getBooleanValue()
    return:
      type: boolean
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.util.JsonParserDelegate.getByteValue()
  id: getByteValue()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.util.JsonParserDelegate
  langs:
  - java
  name: getByteValue()
  nameWithType: JsonParserDelegate.getByteValue()
  fullName: com.fasterxml.jackson.core.util.JsonParserDelegate.getByteValue()
  overload: com.fasterxml.jackson.core.util.JsonParserDelegate.getByteValue*
  type: Method
  package: com.fasterxml.jackson.core.util
  summary: >-
    Numeric accessor that can be called when the current token is of type <xref uid="com.fasterxml.jackson.core.JsonToken.VALUE_NUMBER_INT" data-throw-if-not-resolved="false">JsonToken#VALUE_NUMBER_INT</xref> and it can be expressed as a value of Java byte primitive type. It can also be called for <xref uid="com.fasterxml.jackson.core.JsonToken.VALUE_NUMBER_FLOAT" data-throw-if-not-resolved="false">JsonToken#VALUE_NUMBER_FLOAT</xref>; if so, it is equivalent to calling <xref uid="com.fasterxml.jackson.core.util.JsonParserDelegate.getDoubleValue*" data-throw-if-not-resolved="false">#getDoubleValue</xref> and then casting; except for possible overflow/underflow exception.


    Note: if the resulting integer value falls outside range of Java byte, a <xref uid="com.fasterxml.jackson.core.JsonParseException" data-throw-if-not-resolved="false">JsonParseException</xref> will be thrown to indicate numeric overflow/underflow.
  syntax:
    content: public byte getByteValue()
    return:
      type: byte
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.util.JsonParserDelegate.getCodec()
  id: getCodec()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.util.JsonParserDelegate
  langs:
  - java
  name: getCodec()
  nameWithType: JsonParserDelegate.getCodec()
  fullName: com.fasterxml.jackson.core.util.JsonParserDelegate.getCodec()
  overload: com.fasterxml.jackson.core.util.JsonParserDelegate.getCodec*
  type: Method
  package: com.fasterxml.jackson.core.util
  summary: Accessor for <xref uid="com.fasterxml.jackson.core.ObjectCodec" data-throw-if-not-resolved="false">ObjectCodec</xref> associated with this parser, if any. Codec is used by <xref uid="com.fasterxml.jackson.core.util.JsonParserDelegate.readValueAs*" data-throw-if-not-resolved="false">#readValueAs(Class)</xref> method (and its variants).
  syntax:
    content: public ObjectCodec getCodec()
    return:
      type: com.fasterxml.jackson.core.ObjectCodec
- uid: com.fasterxml.jackson.core.util.JsonParserDelegate.getCurrentLocation()
  id: getCurrentLocation()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.util.JsonParserDelegate
  langs:
  - java
  name: getCurrentLocation()
  nameWithType: JsonParserDelegate.getCurrentLocation()
  fullName: com.fasterxml.jackson.core.util.JsonParserDelegate.getCurrentLocation()
  overload: com.fasterxml.jackson.core.util.JsonParserDelegate.getCurrentLocation*
  type: Method
  package: com.fasterxml.jackson.core.util
  summary: Method that returns location of the last processed character; usually for error reporting purposes.
  syntax:
    content: public JsonLocation getCurrentLocation()
    return:
      type: com.fasterxml.jackson.core.JsonLocation
- uid: com.fasterxml.jackson.core.util.JsonParserDelegate.getCurrentName()
  id: getCurrentName()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.util.JsonParserDelegate
  langs:
  - java
  name: getCurrentName()
  nameWithType: JsonParserDelegate.getCurrentName()
  fullName: com.fasterxml.jackson.core.util.JsonParserDelegate.getCurrentName()
  overload: com.fasterxml.jackson.core.util.JsonParserDelegate.getCurrentName*
  type: Method
  package: com.fasterxml.jackson.core.util
  summary: 'Method that can be called to get the name associated with the current token: for <xref uid="com.fasterxml.jackson.core.JsonToken.FIELD_NAME" data-throw-if-not-resolved="false">JsonToken#FIELD_NAME</xref>s it will be the same as what <xref uid="com.fasterxml.jackson.core.util.JsonParserDelegate.getText*" data-throw-if-not-resolved="false">#getText</xref> returns; for field values it will be preceding field name; and for others (array values, root-level values) null.'
  syntax:
    content: public String getCurrentName()
    return:
      type: java.lang.String
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.util.JsonParserDelegate.getCurrentToken()
  id: getCurrentToken()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.util.JsonParserDelegate
  langs:
  - java
  name: getCurrentToken()
  nameWithType: JsonParserDelegate.getCurrentToken()
  fullName: com.fasterxml.jackson.core.util.JsonParserDelegate.getCurrentToken()
  overload: com.fasterxml.jackson.core.util.JsonParserDelegate.getCurrentToken*
  type: Method
  package: com.fasterxml.jackson.core.util
  summary: Alias for <xref uid="com.fasterxml.jackson.core.util.JsonParserDelegate.currentToken()" data-throw-if-not-resolved="false">#currentToken()</xref>, will be deprecated in Jackson 2.9
  syntax:
    content: public JsonToken getCurrentToken()
    return:
      type: com.fasterxml.jackson.core.JsonToken
- uid: com.fasterxml.jackson.core.util.JsonParserDelegate.getCurrentTokenId()
  id: getCurrentTokenId()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.util.JsonParserDelegate
  langs:
  - java
  name: getCurrentTokenId()
  nameWithType: JsonParserDelegate.getCurrentTokenId()
  fullName: com.fasterxml.jackson.core.util.JsonParserDelegate.getCurrentTokenId()
  overload: com.fasterxml.jackson.core.util.JsonParserDelegate.getCurrentTokenId*
  type: Method
  package: com.fasterxml.jackson.core.util
  summary: Alias for <xref uid="com.fasterxml.jackson.core.util.JsonParserDelegate.currentTokenId()" data-throw-if-not-resolved="false">#currentTokenId()</xref>, will be deprecated in Jackson 2.9
  syntax:
    content: public int getCurrentTokenId()
    return:
      type: int
- uid: com.fasterxml.jackson.core.util.JsonParserDelegate.getCurrentValue()
  id: getCurrentValue()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.util.JsonParserDelegate
  langs:
  - java
  name: getCurrentValue()
  nameWithType: JsonParserDelegate.getCurrentValue()
  fullName: com.fasterxml.jackson.core.util.JsonParserDelegate.getCurrentValue()
  overload: com.fasterxml.jackson.core.util.JsonParserDelegate.getCurrentValue*
  type: Method
  package: com.fasterxml.jackson.core.util
  summary: >-
    Helper method, usually equivalent to: `getParsingContext().getCurrentValue();`


    Note that "current value" is NOT populated (or used) by Streaming parser; it is only used by higher-level data-binding functionality. The reason it is included here is that it can be stored and accessed hierarchically, and gets passed through data-binding.
  syntax:
    content: public Object getCurrentValue()
    return:
      type: java.lang.Object
- uid: com.fasterxml.jackson.core.util.JsonParserDelegate.getDecimalValue()
  id: getDecimalValue()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.util.JsonParserDelegate
  langs:
  - java
  name: getDecimalValue()
  nameWithType: JsonParserDelegate.getDecimalValue()
  fullName: com.fasterxml.jackson.core.util.JsonParserDelegate.getDecimalValue()
  overload: com.fasterxml.jackson.core.util.JsonParserDelegate.getDecimalValue*
  type: Method
  package: com.fasterxml.jackson.core.util
  summary: Numeric accessor that can be called when the current token is of type <xref uid="com.fasterxml.jackson.core.JsonToken.VALUE_NUMBER_FLOAT" data-throw-if-not-resolved="false">JsonToken#VALUE_NUMBER_FLOAT</xref> or <xref uid="com.fasterxml.jackson.core.JsonToken.VALUE_NUMBER_INT" data-throw-if-not-resolved="false">JsonToken#VALUE_NUMBER_INT</xref>. No under/overflow exceptions are ever thrown.
  syntax:
    content: public BigDecimal getDecimalValue()
    return:
      type: java.math.BigDecimal
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.util.JsonParserDelegate.getDoubleValue()
  id: getDoubleValue()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.util.JsonParserDelegate
  langs:
  - java
  name: getDoubleValue()
  nameWithType: JsonParserDelegate.getDoubleValue()
  fullName: com.fasterxml.jackson.core.util.JsonParserDelegate.getDoubleValue()
  overload: com.fasterxml.jackson.core.util.JsonParserDelegate.getDoubleValue*
  type: Method
  package: com.fasterxml.jackson.core.util
  summary: >-
    Numeric accessor that can be called when the current token is of type <xref uid="com.fasterxml.jackson.core.JsonToken.VALUE_NUMBER_FLOAT" data-throw-if-not-resolved="false">JsonToken#VALUE_NUMBER_FLOAT</xref> and it can be expressed as a Java double primitive type. It can also be called for <xref uid="com.fasterxml.jackson.core.JsonToken.VALUE_NUMBER_INT" data-throw-if-not-resolved="false">JsonToken#VALUE_NUMBER_INT</xref>; if so, it is equivalent to calling <xref uid="com.fasterxml.jackson.core.util.JsonParserDelegate.getLongValue*" data-throw-if-not-resolved="false">#getLongValue</xref> and then casting; except for possible overflow/underflow exception.


    Note: if the value falls outside of range of Java double, a <xref uid="com.fasterxml.jackson.core.JsonParseException" data-throw-if-not-resolved="false">JsonParseException</xref> will be thrown to indicate numeric overflow/underflow.
  syntax:
    content: public double getDoubleValue()
    return:
      type: double
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.util.JsonParserDelegate.getEmbeddedObject()
  id: getEmbeddedObject()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.util.JsonParserDelegate
  langs:
  - java
  name: getEmbeddedObject()
  nameWithType: JsonParserDelegate.getEmbeddedObject()
  fullName: com.fasterxml.jackson.core.util.JsonParserDelegate.getEmbeddedObject()
  overload: com.fasterxml.jackson.core.util.JsonParserDelegate.getEmbeddedObject*
  type: Method
  package: com.fasterxml.jackson.core.util
  summary: >-
    Accessor that can be called if (and only if) the current token is <xref uid="com.fasterxml.jackson.core.JsonToken.VALUE_EMBEDDED_OBJECT" data-throw-if-not-resolved="false">JsonToken#VALUE_EMBEDDED_OBJECT</xref>. For other token types, null is returned.


    Note: only some specialized parser implementations support embedding of objects (usually ones that are facades on top of non-streaming sources, such as object trees). One exception is access to binary content (whether via base64 encoding or not) which typically is accessible using this method, as well as <xref uid="com.fasterxml.jackson.core.util.JsonParserDelegate.getBinaryValue*" data-throw-if-not-resolved="false">#getBinaryValue()</xref>.
  syntax:
    content: public Object getEmbeddedObject()
    return:
      type: java.lang.Object
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.util.JsonParserDelegate.getFeatureMask()
  id: getFeatureMask()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.util.JsonParserDelegate
  langs:
  - java
  name: getFeatureMask()
  nameWithType: JsonParserDelegate.getFeatureMask()
  fullName: com.fasterxml.jackson.core.util.JsonParserDelegate.getFeatureMask()
  overload: com.fasterxml.jackson.core.util.JsonParserDelegate.getFeatureMask*
  type: Method
  package: com.fasterxml.jackson.core.util
  summary: Bulk access method for getting state of all standard <xref uid="" data-throw-if-not-resolved="false">Feature</xref>s.
  syntax:
    content: public int getFeatureMask()
    return:
      type: int
- uid: com.fasterxml.jackson.core.util.JsonParserDelegate.getFloatValue()
  id: getFloatValue()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.util.JsonParserDelegate
  langs:
  - java
  name: getFloatValue()
  nameWithType: JsonParserDelegate.getFloatValue()
  fullName: com.fasterxml.jackson.core.util.JsonParserDelegate.getFloatValue()
  overload: com.fasterxml.jackson.core.util.JsonParserDelegate.getFloatValue*
  type: Method
  package: com.fasterxml.jackson.core.util
  summary: >-
    Numeric accessor that can be called when the current token is of type <xref uid="com.fasterxml.jackson.core.JsonToken.VALUE_NUMBER_FLOAT" data-throw-if-not-resolved="false">JsonToken#VALUE_NUMBER_FLOAT</xref> and it can be expressed as a Java float primitive type. It can also be called for <xref uid="com.fasterxml.jackson.core.JsonToken.VALUE_NUMBER_INT" data-throw-if-not-resolved="false">JsonToken#VALUE_NUMBER_INT</xref>; if so, it is equivalent to calling <xref uid="com.fasterxml.jackson.core.util.JsonParserDelegate.getLongValue*" data-throw-if-not-resolved="false">#getLongValue</xref> and then casting; except for possible overflow/underflow exception.


    Note: if the value falls outside of range of Java float, a <xref uid="com.fasterxml.jackson.core.JsonParseException" data-throw-if-not-resolved="false">JsonParseException</xref> will be thrown to indicate numeric overflow/underflow.
  syntax:
    content: public float getFloatValue()
    return:
      type: float
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.util.JsonParserDelegate.getInputSource()
  id: getInputSource()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.util.JsonParserDelegate
  langs:
  - java
  name: getInputSource()
  nameWithType: JsonParserDelegate.getInputSource()
  fullName: com.fasterxml.jackson.core.util.JsonParserDelegate.getInputSource()
  overload: com.fasterxml.jackson.core.util.JsonParserDelegate.getInputSource*
  type: Method
  package: com.fasterxml.jackson.core.util
  summary: >-
    Method that can be used to get access to object that is used to access input being parsed; this is usually either <xref uid="java.io.InputStream" data-throw-if-not-resolved="false">InputStream</xref> or <xref uid="java.io.Reader" data-throw-if-not-resolved="false">Reader</xref>, depending on what parser was constructed with. Note that returned value may be null in some cases; including case where parser implementation does not want to exposed raw source to caller. In cases where input has been decorated, object returned here is the decorated version; this allows some level of interaction between users of parser and decorator object.


    In general use of this accessor should be considered as "last effort", i.e. only used if no other mechanism is applicable.
  syntax:
    content: public Object getInputSource()
    return:
      type: java.lang.Object
- uid: com.fasterxml.jackson.core.util.JsonParserDelegate.getIntValue()
  id: getIntValue()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.util.JsonParserDelegate
  langs:
  - java
  name: getIntValue()
  nameWithType: JsonParserDelegate.getIntValue()
  fullName: com.fasterxml.jackson.core.util.JsonParserDelegate.getIntValue()
  overload: com.fasterxml.jackson.core.util.JsonParserDelegate.getIntValue*
  type: Method
  package: com.fasterxml.jackson.core.util
  summary: >-
    Numeric accessor that can be called when the current token is of type <xref uid="com.fasterxml.jackson.core.JsonToken.VALUE_NUMBER_INT" data-throw-if-not-resolved="false">JsonToken#VALUE_NUMBER_INT</xref> and it can be expressed as a value of Java int primitive type. It can also be called for <xref uid="com.fasterxml.jackson.core.JsonToken.VALUE_NUMBER_FLOAT" data-throw-if-not-resolved="false">JsonToken#VALUE_NUMBER_FLOAT</xref>; if so, it is equivalent to calling <xref uid="com.fasterxml.jackson.core.util.JsonParserDelegate.getDoubleValue*" data-throw-if-not-resolved="false">#getDoubleValue</xref> and then casting; except for possible overflow/underflow exception.


    Note: if the resulting integer value falls outside range of Java int, a <xref uid="com.fasterxml.jackson.core.JsonParseException" data-throw-if-not-resolved="false">JsonParseException</xref> may be thrown to indicate numeric overflow/underflow.
  syntax:
    content: public int getIntValue()
    return:
      type: int
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.util.JsonParserDelegate.getLastClearedToken()
  id: getLastClearedToken()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.util.JsonParserDelegate
  langs:
  - java
  name: getLastClearedToken()
  nameWithType: JsonParserDelegate.getLastClearedToken()
  fullName: com.fasterxml.jackson.core.util.JsonParserDelegate.getLastClearedToken()
  overload: com.fasterxml.jackson.core.util.JsonParserDelegate.getLastClearedToken*
  type: Method
  package: com.fasterxml.jackson.core.util
  summary: Method that can be called to get the last token that was cleared using <xref uid="com.fasterxml.jackson.core.util.JsonParserDelegate.clearCurrentToken*" data-throw-if-not-resolved="false">#clearCurrentToken</xref>. This is not necessarily the latest token read. Will return null if no tokens have been cleared, or if parser has been closed.
  syntax:
    content: public JsonToken getLastClearedToken()
    return:
      type: com.fasterxml.jackson.core.JsonToken
- uid: com.fasterxml.jackson.core.util.JsonParserDelegate.getLongValue()
  id: getLongValue()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.util.JsonParserDelegate
  langs:
  - java
  name: getLongValue()
  nameWithType: JsonParserDelegate.getLongValue()
  fullName: com.fasterxml.jackson.core.util.JsonParserDelegate.getLongValue()
  overload: com.fasterxml.jackson.core.util.JsonParserDelegate.getLongValue*
  type: Method
  package: com.fasterxml.jackson.core.util
  summary: >-
    Numeric accessor that can be called when the current token is of type <xref uid="com.fasterxml.jackson.core.JsonToken.VALUE_NUMBER_INT" data-throw-if-not-resolved="false">JsonToken#VALUE_NUMBER_INT</xref> and it can be expressed as a Java long primitive type. It can also be called for <xref uid="com.fasterxml.jackson.core.JsonToken.VALUE_NUMBER_FLOAT" data-throw-if-not-resolved="false">JsonToken#VALUE_NUMBER_FLOAT</xref>; if so, it is equivalent to calling <xref uid="com.fasterxml.jackson.core.util.JsonParserDelegate.getDoubleValue*" data-throw-if-not-resolved="false">#getDoubleValue</xref> and then casting to int; except for possible overflow/underflow exception.


    Note: if the token is an integer, but its value falls outside of range of Java long, a <xref uid="com.fasterxml.jackson.core.JsonParseException" data-throw-if-not-resolved="false">JsonParseException</xref> may be thrown to indicate numeric overflow/underflow.
  syntax:
    content: public long getLongValue()
    return:
      type: long
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.util.JsonParserDelegate.getNumberType()
  id: getNumberType()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.util.JsonParserDelegate
  langs:
  - java
  name: getNumberType()
  nameWithType: JsonParserDelegate.getNumberType()
  fullName: com.fasterxml.jackson.core.util.JsonParserDelegate.getNumberType()
  overload: com.fasterxml.jackson.core.util.JsonParserDelegate.getNumberType*
  type: Method
  package: com.fasterxml.jackson.core.util
  summary: If current token is of type <xref uid="com.fasterxml.jackson.core.JsonToken.VALUE_NUMBER_INT" data-throw-if-not-resolved="false">JsonToken#VALUE_NUMBER_INT</xref> or <xref uid="com.fasterxml.jackson.core.JsonToken.VALUE_NUMBER_FLOAT" data-throw-if-not-resolved="false">JsonToken#VALUE_NUMBER_FLOAT</xref>, returns one of <xref uid="" data-throw-if-not-resolved="false">NumberType</xref> constants; otherwise returns null.
  syntax:
    content: public JsonParser.NumberType getNumberType()
    return:
      type: com.fasterxml.jackson.core.JsonParser.NumberType
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.util.JsonParserDelegate.getNumberValue()
  id: getNumberValue()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.util.JsonParserDelegate
  langs:
  - java
  name: getNumberValue()
  nameWithType: JsonParserDelegate.getNumberValue()
  fullName: com.fasterxml.jackson.core.util.JsonParserDelegate.getNumberValue()
  overload: com.fasterxml.jackson.core.util.JsonParserDelegate.getNumberValue*
  type: Method
  package: com.fasterxml.jackson.core.util
  summary: Generic number value accessor method that will work for all kinds of numeric values. It will return the optimal (simplest/smallest possible) wrapper object that can express the numeric value just parsed.
  syntax:
    content: public Number getNumberValue()
    return:
      type: java.lang.Number
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.util.JsonParserDelegate.getObjectId()
  id: getObjectId()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.util.JsonParserDelegate
  langs:
  - java
  name: getObjectId()
  nameWithType: JsonParserDelegate.getObjectId()
  fullName: com.fasterxml.jackson.core.util.JsonParserDelegate.getObjectId()
  overload: com.fasterxml.jackson.core.util.JsonParserDelegate.getObjectId*
  type: Method
  package: com.fasterxml.jackson.core.util
  summary: >-
    Method that can be called to check whether current token (one that was just read) has an associated Object id, and if so, return it. Note that while typically caller should check with <xref uid="com.fasterxml.jackson.core.util.JsonParserDelegate.canReadObjectId*" data-throw-if-not-resolved="false">#canReadObjectId</xref> first, it is not illegal to call this method even if that method returns true; but if so, it will return null. This may be used to simplify calling code.


    Default implementation will simply return null.
  syntax:
    content: public Object getObjectId()
    return:
      type: java.lang.Object
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.util.JsonParserDelegate.getParsingContext()
  id: getParsingContext()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.util.JsonParserDelegate
  langs:
  - java
  name: getParsingContext()
  nameWithType: JsonParserDelegate.getParsingContext()
  fullName: com.fasterxml.jackson.core.util.JsonParserDelegate.getParsingContext()
  overload: com.fasterxml.jackson.core.util.JsonParserDelegate.getParsingContext*
  type: Method
  package: com.fasterxml.jackson.core.util
  summary: 'Method that can be used to access current parsing context reader is in. There are 3 different types: root, array and object contexts, with slightly different available information. Contexts are hierarchically nested, and can be used for example for figuring out part of the input document that correspond to specific array or object (for highlighting purposes, or error reporting). Contexts can also be used for simple xpath-like matching of input, if so desired.'
  syntax:
    content: public JsonStreamContext getParsingContext()
    return:
      type: com.fasterxml.jackson.core.JsonStreamContext
- uid: com.fasterxml.jackson.core.util.JsonParserDelegate.getSchema()
  id: getSchema()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.util.JsonParserDelegate
  langs:
  - java
  name: getSchema()
  nameWithType: JsonParserDelegate.getSchema()
  fullName: com.fasterxml.jackson.core.util.JsonParserDelegate.getSchema()
  overload: com.fasterxml.jackson.core.util.JsonParserDelegate.getSchema*
  type: Method
  package: com.fasterxml.jackson.core.util
  summary: Method for accessing Schema that this parser uses, if any. Default implementation returns null.
  syntax:
    content: public FormatSchema getSchema()
    return:
      type: com.fasterxml.jackson.core.FormatSchema
- uid: com.fasterxml.jackson.core.util.JsonParserDelegate.getShortValue()
  id: getShortValue()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.util.JsonParserDelegate
  langs:
  - java
  name: getShortValue()
  nameWithType: JsonParserDelegate.getShortValue()
  fullName: com.fasterxml.jackson.core.util.JsonParserDelegate.getShortValue()
  overload: com.fasterxml.jackson.core.util.JsonParserDelegate.getShortValue*
  type: Method
  package: com.fasterxml.jackson.core.util
  summary: >-
    Numeric accessor that can be called when the current token is of type <xref uid="com.fasterxml.jackson.core.JsonToken.VALUE_NUMBER_INT" data-throw-if-not-resolved="false">JsonToken#VALUE_NUMBER_INT</xref> and it can be expressed as a value of Java short primitive type. It can also be called for <xref uid="com.fasterxml.jackson.core.JsonToken.VALUE_NUMBER_FLOAT" data-throw-if-not-resolved="false">JsonToken#VALUE_NUMBER_FLOAT</xref>; if so, it is equivalent to calling <xref uid="com.fasterxml.jackson.core.util.JsonParserDelegate.getDoubleValue*" data-throw-if-not-resolved="false">#getDoubleValue</xref> and then casting; except for possible overflow/underflow exception.


    Note: if the resulting integer value falls outside range of Java short, a <xref uid="com.fasterxml.jackson.core.JsonParseException" data-throw-if-not-resolved="false">JsonParseException</xref> will be thrown to indicate numeric overflow/underflow.
  syntax:
    content: public short getShortValue()
    return:
      type: short
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.util.JsonParserDelegate.getText()
  id: getText()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.util.JsonParserDelegate
  langs:
  - java
  name: getText()
  nameWithType: JsonParserDelegate.getText()
  fullName: com.fasterxml.jackson.core.util.JsonParserDelegate.getText()
  overload: com.fasterxml.jackson.core.util.JsonParserDelegate.getText*
  type: Method
  package: com.fasterxml.jackson.core.util
  summary: Method for accessing textual representation of the current token; if no current token (before first call to <xref uid="com.fasterxml.jackson.core.util.JsonParserDelegate.nextToken*" data-throw-if-not-resolved="false">#nextToken</xref>, or after encountering end-of-input), returns null. Method can be called for any token type.
  syntax:
    content: public String getText()
    return:
      type: java.lang.String
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.util.JsonParserDelegate.getText(java.io.Writer)
  id: getText(java.io.Writer)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.util.JsonParserDelegate
  langs:
  - java
  name: getText(Writer writer)
  nameWithType: JsonParserDelegate.getText(Writer writer)
  fullName: com.fasterxml.jackson.core.util.JsonParserDelegate.getText(Writer writer)
  overload: com.fasterxml.jackson.core.util.JsonParserDelegate.getText*
  type: Method
  package: com.fasterxml.jackson.core.util
  summary: >-
    Method to read the textual representation of the current token in chunks and pass it to the given Writer. Conceptually same as calling:


    ```java

    writer.write(parser.getText());

    ```


    but should typically be more efficient as longer content does need to be combined into a single `String` to return, and write can occur directly from intermediate buffers Jackson uses.
  syntax:
    content: public int getText(Writer writer)
    parameters:
    - id: writer
      type: java.io.Writer
    return:
      type: int
  exceptions:
  - type: java.io.IOException
  - type: java.lang.UnsupportedOperationException
- uid: com.fasterxml.jackson.core.util.JsonParserDelegate.getTextCharacters()
  id: getTextCharacters()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.util.JsonParserDelegate
  langs:
  - java
  name: getTextCharacters()
  nameWithType: JsonParserDelegate.getTextCharacters()
  fullName: com.fasterxml.jackson.core.util.JsonParserDelegate.getTextCharacters()
  overload: com.fasterxml.jackson.core.util.JsonParserDelegate.getTextCharacters*
  type: Method
  package: com.fasterxml.jackson.core.util
  summary: >-
    Method similar to <xref uid="com.fasterxml.jackson.core.util.JsonParserDelegate.getText*" data-throw-if-not-resolved="false">#getText</xref>, but that will return underlying (unmodifiable) character array that contains textual value, instead of constructing a String object to contain this information. Note, however, that:

     *  Textual contents are not guaranteed to start at index 0 (rather, call <xref uid="com.fasterxml.jackson.core.util.JsonParserDelegate.getTextOffset*" data-throw-if-not-resolved="false">#getTextOffset</xref>) to know the actual offset
     *  Length of textual contents may be less than the length of returned buffer: call <xref uid="com.fasterxml.jackson.core.util.JsonParserDelegate.getTextLength*" data-throw-if-not-resolved="false">#getTextLength</xref> for actual length of returned content.

    Note that caller **MUST NOT** modify the returned character array in any way -- doing so may corrupt current parser state and render parser instance useless.


    The only reason to call this method (over <xref uid="com.fasterxml.jackson.core.util.JsonParserDelegate.getText*" data-throw-if-not-resolved="false">#getText</xref>) is to avoid construction of a String object (which will make a copy of contents).
  syntax:
    content: public char[] getTextCharacters()
    return:
      type: char[]
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.util.JsonParserDelegate.getTextLength()
  id: getTextLength()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.util.JsonParserDelegate
  langs:
  - java
  name: getTextLength()
  nameWithType: JsonParserDelegate.getTextLength()
  fullName: com.fasterxml.jackson.core.util.JsonParserDelegate.getTextLength()
  overload: com.fasterxml.jackson.core.util.JsonParserDelegate.getTextLength*
  type: Method
  package: com.fasterxml.jackson.core.util
  summary: Accessor used with <xref uid="com.fasterxml.jackson.core.util.JsonParserDelegate.getTextCharacters*" data-throw-if-not-resolved="false">#getTextCharacters</xref>, to know length of String stored in returned buffer.
  syntax:
    content: public int getTextLength()
    return:
      type: int
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.util.JsonParserDelegate.getTextOffset()
  id: getTextOffset()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.util.JsonParserDelegate
  langs:
  - java
  name: getTextOffset()
  nameWithType: JsonParserDelegate.getTextOffset()
  fullName: com.fasterxml.jackson.core.util.JsonParserDelegate.getTextOffset()
  overload: com.fasterxml.jackson.core.util.JsonParserDelegate.getTextOffset*
  type: Method
  package: com.fasterxml.jackson.core.util
  summary: Accessor used with <xref uid="com.fasterxml.jackson.core.util.JsonParserDelegate.getTextCharacters*" data-throw-if-not-resolved="false">#getTextCharacters</xref>, to know offset of the first text content character within buffer.
  syntax:
    content: public int getTextOffset()
    return:
      type: int
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.util.JsonParserDelegate.getTokenLocation()
  id: getTokenLocation()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.util.JsonParserDelegate
  langs:
  - java
  name: getTokenLocation()
  nameWithType: JsonParserDelegate.getTokenLocation()
  fullName: com.fasterxml.jackson.core.util.JsonParserDelegate.getTokenLocation()
  overload: com.fasterxml.jackson.core.util.JsonParserDelegate.getTokenLocation*
  type: Method
  package: com.fasterxml.jackson.core.util
  summary: Method that return the **starting** location of the current token; that is, position of the first character from input that starts the current token.
  syntax:
    content: public JsonLocation getTokenLocation()
    return:
      type: com.fasterxml.jackson.core.JsonLocation
- uid: com.fasterxml.jackson.core.util.JsonParserDelegate.getTypeId()
  id: getTypeId()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.util.JsonParserDelegate
  langs:
  - java
  name: getTypeId()
  nameWithType: JsonParserDelegate.getTypeId()
  fullName: com.fasterxml.jackson.core.util.JsonParserDelegate.getTypeId()
  overload: com.fasterxml.jackson.core.util.JsonParserDelegate.getTypeId*
  type: Method
  package: com.fasterxml.jackson.core.util
  summary: >-
    Method that can be called to check whether current token (one that was just read) has an associated type id, and if so, return it. Note that while typically caller should check with <xref uid="com.fasterxml.jackson.core.util.JsonParserDelegate.canReadTypeId*" data-throw-if-not-resolved="false">#canReadTypeId</xref> first, it is not illegal to call this method even if that method returns true; but if so, it will return null. This may be used to simplify calling code.


    Default implementation will simply return null.
  syntax:
    content: public Object getTypeId()
    return:
      type: java.lang.Object
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.util.JsonParserDelegate.getValueAsBoolean()
  id: getValueAsBoolean()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.util.JsonParserDelegate
  langs:
  - java
  name: getValueAsBoolean()
  nameWithType: JsonParserDelegate.getValueAsBoolean()
  fullName: com.fasterxml.jackson.core.util.JsonParserDelegate.getValueAsBoolean()
  overload: com.fasterxml.jackson.core.util.JsonParserDelegate.getValueAsBoolean*
  type: Method
  package: com.fasterxml.jackson.core.util
  summary: >-
    Method that will try to convert value of current token to a **boolean**. JSON booleans map naturally; integer numbers other than 0 map to true, and 0 maps to false and Strings 'true' and 'false' map to corresponding values.


    If representation can not be converted to a boolean value (including structured types like Objects and Arrays), default value of **false** will be returned; no exceptions are thrown.
  syntax:
    content: public boolean getValueAsBoolean()
    return:
      type: boolean
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.util.JsonParserDelegate.getValueAsBoolean(boolean)
  id: getValueAsBoolean(boolean)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.util.JsonParserDelegate
  langs:
  - java
  name: getValueAsBoolean(boolean defaultValue)
  nameWithType: JsonParserDelegate.getValueAsBoolean(boolean defaultValue)
  fullName: com.fasterxml.jackson.core.util.JsonParserDelegate.getValueAsBoolean(boolean defaultValue)
  overload: com.fasterxml.jackson.core.util.JsonParserDelegate.getValueAsBoolean*
  type: Method
  package: com.fasterxml.jackson.core.util
  summary: >-
    Method that will try to convert value of current token to a **boolean**. JSON booleans map naturally; integer numbers other than 0 map to true, and 0 maps to false and Strings 'true' and 'false' map to corresponding values.


    If representation can not be converted to a boolean value (including structured types like Objects and Arrays), specified **def** will be returned; no exceptions are thrown.
  syntax:
    content: public boolean getValueAsBoolean(boolean defaultValue)
    parameters:
    - id: defaultValue
      type: boolean
    return:
      type: boolean
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.util.JsonParserDelegate.getValueAsDouble()
  id: getValueAsDouble()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.util.JsonParserDelegate
  langs:
  - java
  name: getValueAsDouble()
  nameWithType: JsonParserDelegate.getValueAsDouble()
  fullName: com.fasterxml.jackson.core.util.JsonParserDelegate.getValueAsDouble()
  overload: com.fasterxml.jackson.core.util.JsonParserDelegate.getValueAsDouble*
  type: Method
  package: com.fasterxml.jackson.core.util
  summary: >-
    Method that will try to convert value of current token to a Java **double**. Numbers are coerced using default Java rules; booleans convert to 0.0 (false) and 1.0 (true), and Strings are parsed using default Java language floating point parsing rules.


    If representation can not be converted to a double (including structured types like Objects and Arrays), default value of **0.0** will be returned; no exceptions are thrown.
  syntax:
    content: public double getValueAsDouble()
    return:
      type: double
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.util.JsonParserDelegate.getValueAsDouble(double)
  id: getValueAsDouble(double)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.util.JsonParserDelegate
  langs:
  - java
  name: getValueAsDouble(double defaultValue)
  nameWithType: JsonParserDelegate.getValueAsDouble(double defaultValue)
  fullName: com.fasterxml.jackson.core.util.JsonParserDelegate.getValueAsDouble(double defaultValue)
  overload: com.fasterxml.jackson.core.util.JsonParserDelegate.getValueAsDouble*
  type: Method
  package: com.fasterxml.jackson.core.util
  summary: >-
    Method that will try to convert value of current token to a Java **double**. Numbers are coerced using default Java rules; booleans convert to 0.0 (false) and 1.0 (true), and Strings are parsed using default Java language floating point parsing rules.


    If representation can not be converted to a double (including structured types like Objects and Arrays), specified **def** will be returned; no exceptions are thrown.
  syntax:
    content: public double getValueAsDouble(double defaultValue)
    parameters:
    - id: defaultValue
      type: double
    return:
      type: double
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.util.JsonParserDelegate.getValueAsInt()
  id: getValueAsInt()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.util.JsonParserDelegate
  langs:
  - java
  name: getValueAsInt()
  nameWithType: JsonParserDelegate.getValueAsInt()
  fullName: com.fasterxml.jackson.core.util.JsonParserDelegate.getValueAsInt()
  overload: com.fasterxml.jackson.core.util.JsonParserDelegate.getValueAsInt*
  type: Method
  package: com.fasterxml.jackson.core.util
  summary: >-
    Method that will try to convert value of current token to a **int**. Numbers are coerced using default Java rules; booleans convert to 0 (false) and 1 (true), and Strings are parsed using default Java language integer parsing rules.


    If representation can not be converted to an int (including structured type markers like start/end Object/Array) default value of **0** will be returned; no exceptions are thrown.
  syntax:
    content: public int getValueAsInt()
    return:
      type: int
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.util.JsonParserDelegate.getValueAsInt(int)
  id: getValueAsInt(int)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.util.JsonParserDelegate
  langs:
  - java
  name: getValueAsInt(int defaultValue)
  nameWithType: JsonParserDelegate.getValueAsInt(int defaultValue)
  fullName: com.fasterxml.jackson.core.util.JsonParserDelegate.getValueAsInt(int defaultValue)
  overload: com.fasterxml.jackson.core.util.JsonParserDelegate.getValueAsInt*
  type: Method
  package: com.fasterxml.jackson.core.util
  summary: >-
    Method that will try to convert value of current token to a **int**. Numbers are coerced using default Java rules; booleans convert to 0 (false) and 1 (true), and Strings are parsed using default Java language integer parsing rules.


    If representation can not be converted to an int (including structured type markers like start/end Object/Array) specified **def** will be returned; no exceptions are thrown.
  syntax:
    content: public int getValueAsInt(int defaultValue)
    parameters:
    - id: defaultValue
      type: int
    return:
      type: int
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.util.JsonParserDelegate.getValueAsLong()
  id: getValueAsLong()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.util.JsonParserDelegate
  langs:
  - java
  name: getValueAsLong()
  nameWithType: JsonParserDelegate.getValueAsLong()
  fullName: com.fasterxml.jackson.core.util.JsonParserDelegate.getValueAsLong()
  overload: com.fasterxml.jackson.core.util.JsonParserDelegate.getValueAsLong*
  type: Method
  package: com.fasterxml.jackson.core.util
  summary: >-
    Method that will try to convert value of current token to a **long**. Numbers are coerced using default Java rules; booleans convert to 0 (false) and 1 (true), and Strings are parsed using default Java language integer parsing rules.


    If representation can not be converted to a long (including structured type markers like start/end Object/Array) default value of **0L** will be returned; no exceptions are thrown.
  syntax:
    content: public long getValueAsLong()
    return:
      type: long
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.util.JsonParserDelegate.getValueAsLong(long)
  id: getValueAsLong(long)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.util.JsonParserDelegate
  langs:
  - java
  name: getValueAsLong(long defaultValue)
  nameWithType: JsonParserDelegate.getValueAsLong(long defaultValue)
  fullName: com.fasterxml.jackson.core.util.JsonParserDelegate.getValueAsLong(long defaultValue)
  overload: com.fasterxml.jackson.core.util.JsonParserDelegate.getValueAsLong*
  type: Method
  package: com.fasterxml.jackson.core.util
  summary: >-
    Method that will try to convert value of current token to a **long**. Numbers are coerced using default Java rules; booleans convert to 0 (false) and 1 (true), and Strings are parsed using default Java language integer parsing rules.


    If representation can not be converted to a long (including structured type markers like start/end Object/Array) specified **def** will be returned; no exceptions are thrown.
  syntax:
    content: public long getValueAsLong(long defaultValue)
    parameters:
    - id: defaultValue
      type: long
    return:
      type: long
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.util.JsonParserDelegate.getValueAsString()
  id: getValueAsString()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.util.JsonParserDelegate
  langs:
  - java
  name: getValueAsString()
  nameWithType: JsonParserDelegate.getValueAsString()
  fullName: com.fasterxml.jackson.core.util.JsonParserDelegate.getValueAsString()
  overload: com.fasterxml.jackson.core.util.JsonParserDelegate.getValueAsString*
  type: Method
  package: com.fasterxml.jackson.core.util
  summary: Method that will try to convert value of current token to a <xref uid="java.lang.String" data-throw-if-not-resolved="false">java.lang.String</xref>. JSON Strings map naturally; scalar values get converted to their textual representation. If representation can not be converted to a String value (including structured types like Objects and Arrays and null token), default value of **null** will be returned; no exceptions are thrown.
  syntax:
    content: public String getValueAsString()
    return:
      type: java.lang.String
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.util.JsonParserDelegate.getValueAsString(java.lang.String)
  id: getValueAsString(java.lang.String)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.util.JsonParserDelegate
  langs:
  - java
  name: getValueAsString(String defaultValue)
  nameWithType: JsonParserDelegate.getValueAsString(String defaultValue)
  fullName: com.fasterxml.jackson.core.util.JsonParserDelegate.getValueAsString(String defaultValue)
  overload: com.fasterxml.jackson.core.util.JsonParserDelegate.getValueAsString*
  type: Method
  package: com.fasterxml.jackson.core.util
  summary: Method that will try to convert value of current token to a <xref uid="java.lang.String" data-throw-if-not-resolved="false">java.lang.String</xref>. JSON Strings map naturally; scalar values get converted to their textual representation. If representation can not be converted to a String value (including structured types like Objects and Arrays and null token), specified default value will be returned; no exceptions are thrown.
  syntax:
    content: public String getValueAsString(String defaultValue)
    parameters:
    - id: defaultValue
      type: java.lang.String
    return:
      type: java.lang.String
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.util.JsonParserDelegate.hasCurrentToken()
  id: hasCurrentToken()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.util.JsonParserDelegate
  langs:
  - java
  name: hasCurrentToken()
  nameWithType: JsonParserDelegate.hasCurrentToken()
  fullName: com.fasterxml.jackson.core.util.JsonParserDelegate.hasCurrentToken()
  overload: com.fasterxml.jackson.core.util.JsonParserDelegate.hasCurrentToken*
  type: Method
  package: com.fasterxml.jackson.core.util
  summary: Method for checking whether parser currently points to a token (and data for that token is available). Equivalent to check for `parser.getCurrentToken() != null`.
  syntax:
    content: public boolean hasCurrentToken()
    return:
      type: boolean
- uid: com.fasterxml.jackson.core.util.JsonParserDelegate.hasTextCharacters()
  id: hasTextCharacters()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.util.JsonParserDelegate
  langs:
  - java
  name: hasTextCharacters()
  nameWithType: JsonParserDelegate.hasTextCharacters()
  fullName: com.fasterxml.jackson.core.util.JsonParserDelegate.hasTextCharacters()
  overload: com.fasterxml.jackson.core.util.JsonParserDelegate.hasTextCharacters*
  type: Method
  package: com.fasterxml.jackson.core.util
  summary: >-
    Method that can be used to determine whether calling of <xref uid="com.fasterxml.jackson.core.util.JsonParserDelegate.getTextCharacters*" data-throw-if-not-resolved="false">#getTextCharacters</xref> would be the most efficient way to access textual content for the event parser currently points to.


    Default implementation simply returns false since only actual implementation class has knowledge of its internal buffering state. Implementations are strongly encouraged to properly override this method, to allow efficient copying of content by other code.
  syntax:
    content: public boolean hasTextCharacters()
    return:
      type: boolean
- uid: com.fasterxml.jackson.core.util.JsonParserDelegate.hasToken(com.fasterxml.jackson.core.JsonToken)
  id: hasToken(com.fasterxml.jackson.core.JsonToken)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.util.JsonParserDelegate
  langs:
  - java
  name: hasToken(JsonToken t)
  nameWithType: JsonParserDelegate.hasToken(JsonToken t)
  fullName: com.fasterxml.jackson.core.util.JsonParserDelegate.hasToken(JsonToken t)
  overload: com.fasterxml.jackson.core.util.JsonParserDelegate.hasToken*
  type: Method
  package: com.fasterxml.jackson.core.util
  summary: >-
    Method that is functionally equivalent to: `return currentToken() == t` but may be more efficiently implemented.


    Note that no traversal or conversion is performed; so in some cases calling method like <xref uid="com.fasterxml.jackson.core.util.JsonParserDelegate.isExpectedStartArrayToken()" data-throw-if-not-resolved="false">#isExpectedStartArrayToken()</xref> is necessary instead.
  syntax:
    content: public boolean hasToken(JsonToken t)
    parameters:
    - id: t
      type: com.fasterxml.jackson.core.JsonToken
    return:
      type: boolean
- uid: com.fasterxml.jackson.core.util.JsonParserDelegate.hasTokenId(int)
  id: hasTokenId(int)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.util.JsonParserDelegate
  langs:
  - java
  name: hasTokenId(int id)
  nameWithType: JsonParserDelegate.hasTokenId(int id)
  fullName: com.fasterxml.jackson.core.util.JsonParserDelegate.hasTokenId(int id)
  overload: com.fasterxml.jackson.core.util.JsonParserDelegate.hasTokenId*
  type: Method
  package: com.fasterxml.jackson.core.util
  summary: >-
    Method that is functionally equivalent to: `return currentTokenId() == id` but may be more efficiently implemented.


    Note that no traversal or conversion is performed; so in some cases calling method like <xref uid="com.fasterxml.jackson.core.util.JsonParserDelegate.isExpectedStartArrayToken()" data-throw-if-not-resolved="false">#isExpectedStartArrayToken()</xref> is necessary instead.
  syntax:
    content: public boolean hasTokenId(int id)
    parameters:
    - id: id
      type: int
    return:
      type: boolean
- uid: com.fasterxml.jackson.core.util.JsonParserDelegate.isClosed()
  id: isClosed()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.util.JsonParserDelegate
  langs:
  - java
  name: isClosed()
  nameWithType: JsonParserDelegate.isClosed()
  fullName: com.fasterxml.jackson.core.util.JsonParserDelegate.isClosed()
  overload: com.fasterxml.jackson.core.util.JsonParserDelegate.isClosed*
  type: Method
  package: com.fasterxml.jackson.core.util
  summary: Method that can be called to determine whether this parser is closed or not. If it is closed, no new tokens can be retrieved by calling <xref uid="com.fasterxml.jackson.core.util.JsonParserDelegate.nextToken*" data-throw-if-not-resolved="false">#nextToken</xref> (and the underlying stream may be closed). Closing may be due to an explicit call to <xref uid="com.fasterxml.jackson.core.util.JsonParserDelegate.close*" data-throw-if-not-resolved="false">#close</xref> or because parser has encountered end of input.
  syntax:
    content: public boolean isClosed()
    return:
      type: boolean
- uid: com.fasterxml.jackson.core.util.JsonParserDelegate.isEnabled(com.fasterxml.jackson.core.JsonParser.Feature)
  id: isEnabled(com.fasterxml.jackson.core.JsonParser.Feature)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.util.JsonParserDelegate
  langs:
  - java
  name: isEnabled(JsonParser.Feature f)
  nameWithType: JsonParserDelegate.isEnabled(JsonParser.Feature f)
  fullName: com.fasterxml.jackson.core.util.JsonParserDelegate.isEnabled(JsonParser.Feature f)
  overload: com.fasterxml.jackson.core.util.JsonParserDelegate.isEnabled*
  type: Method
  package: com.fasterxml.jackson.core.util
  summary: Method for checking whether specified <xref uid="" data-throw-if-not-resolved="false">Feature</xref> is enabled.
  syntax:
    content: public boolean isEnabled(JsonParser.Feature f)
    parameters:
    - id: f
      type: com.fasterxml.jackson.core.JsonParser.Feature
    return:
      type: boolean
- uid: com.fasterxml.jackson.core.util.JsonParserDelegate.isExpectedStartArrayToken()
  id: isExpectedStartArrayToken()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.util.JsonParserDelegate
  langs:
  - java
  name: isExpectedStartArrayToken()
  nameWithType: JsonParserDelegate.isExpectedStartArrayToken()
  fullName: com.fasterxml.jackson.core.util.JsonParserDelegate.isExpectedStartArrayToken()
  overload: com.fasterxml.jackson.core.util.JsonParserDelegate.isExpectedStartArrayToken*
  type: Method
  package: com.fasterxml.jackson.core.util
  summary: >-
    Specialized accessor that can be used to verify that the current token indicates start array (usually meaning that current token is <xref uid="com.fasterxml.jackson.core.JsonToken.START_ARRAY" data-throw-if-not-resolved="false">JsonToken#START_ARRAY</xref>) when start array is expected. For some specialized parsers this can return true for other cases as well; this is usually done to emulate arrays in cases underlying format is ambiguous (XML, for example, has no format-level difference between Objects and Arrays; it just has elements).


    Default implementation is equivalent to:


    ```java

    currentToken() == JsonToken.START_ARRAY

    ```


    but may be overridden by custom parser implementations.
  syntax:
    content: public boolean isExpectedStartArrayToken()
    return:
      type: boolean
- uid: com.fasterxml.jackson.core.util.JsonParserDelegate.isExpectedStartObjectToken()
  id: isExpectedStartObjectToken()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.util.JsonParserDelegate
  langs:
  - java
  name: isExpectedStartObjectToken()
  nameWithType: JsonParserDelegate.isExpectedStartObjectToken()
  fullName: com.fasterxml.jackson.core.util.JsonParserDelegate.isExpectedStartObjectToken()
  overload: com.fasterxml.jackson.core.util.JsonParserDelegate.isExpectedStartObjectToken*
  type: Method
  package: com.fasterxml.jackson.core.util
  summary: Similar to <xref uid="com.fasterxml.jackson.core.util.JsonParserDelegate.isExpectedStartArrayToken()" data-throw-if-not-resolved="false">#isExpectedStartArrayToken()</xref>, but checks whether stream currently points to <xref uid="com.fasterxml.jackson.core.JsonToken.START_OBJECT" data-throw-if-not-resolved="false">JsonToken#START_OBJECT</xref>.
  syntax:
    content: public boolean isExpectedStartObjectToken()
    return:
      type: boolean
- uid: com.fasterxml.jackson.core.util.JsonParserDelegate.isNaN()
  id: isNaN()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.util.JsonParserDelegate
  langs:
  - java
  name: isNaN()
  nameWithType: JsonParserDelegate.isNaN()
  fullName: com.fasterxml.jackson.core.util.JsonParserDelegate.isNaN()
  overload: com.fasterxml.jackson.core.util.JsonParserDelegate.isNaN*
  type: Method
  package: com.fasterxml.jackson.core.util
  summary: 'Access for checking whether current token is a numeric value token, but one that is of "not-a-number" (NaN) variety (including both "NaN" AND positive/negative infinity!): not supported by all formats, but often supported for <xref uid="com.fasterxml.jackson.core.JsonToken.VALUE_NUMBER_FLOAT" data-throw-if-not-resolved="false">JsonToken#VALUE_NUMBER_FLOAT</xref>. NOTE: roughly equivalent to calling `!Double.isFinite()` on value you would get from calling <xref uid="com.fasterxml.jackson.core.util.JsonParserDelegate.getDoubleValue()" data-throw-if-not-resolved="false">#getDoubleValue()</xref>.'
  syntax:
    content: public boolean isNaN()
    return:
      type: boolean
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.util.JsonParserDelegate.nextToken()
  id: nextToken()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.util.JsonParserDelegate
  langs:
  - java
  name: nextToken()
  nameWithType: JsonParserDelegate.nextToken()
  fullName: com.fasterxml.jackson.core.util.JsonParserDelegate.nextToken()
  overload: com.fasterxml.jackson.core.util.JsonParserDelegate.nextToken*
  type: Method
  package: com.fasterxml.jackson.core.util
  summary: Main iteration method, which will advance stream enough to determine type of the next token, if any. If none remaining (stream has no content other than possible white space before ending), null will be returned.
  syntax:
    content: public JsonToken nextToken()
    return:
      type: com.fasterxml.jackson.core.JsonToken
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.util.JsonParserDelegate.nextValue()
  id: nextValue()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.util.JsonParserDelegate
  langs:
  - java
  name: nextValue()
  nameWithType: JsonParserDelegate.nextValue()
  fullName: com.fasterxml.jackson.core.util.JsonParserDelegate.nextValue()
  overload: com.fasterxml.jackson.core.util.JsonParserDelegate.nextValue*
  type: Method
  package: com.fasterxml.jackson.core.util
  summary: Iteration method that will advance stream enough to determine type of the next token that is a value type (including JSON Array and Object start/end markers). Or put another way, nextToken() will be called once, and if <xref uid="com.fasterxml.jackson.core.JsonToken.FIELD_NAME" data-throw-if-not-resolved="false">JsonToken#FIELD_NAME</xref> is returned, another time to get the value for the field. Method is most useful for iterating over value entries of JSON objects; field name will still be available by calling <xref uid="com.fasterxml.jackson.core.util.JsonParserDelegate.getCurrentName*" data-throw-if-not-resolved="false">#getCurrentName</xref> when parser points to the value.
  syntax:
    content: public JsonToken nextValue()
    return:
      type: com.fasterxml.jackson.core.JsonToken
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.util.JsonParserDelegate.overrideCurrentName(java.lang.String)
  id: overrideCurrentName(java.lang.String)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.util.JsonParserDelegate
  langs:
  - java
  name: overrideCurrentName(String name)
  nameWithType: JsonParserDelegate.overrideCurrentName(String name)
  fullName: com.fasterxml.jackson.core.util.JsonParserDelegate.overrideCurrentName(String name)
  overload: com.fasterxml.jackson.core.util.JsonParserDelegate.overrideCurrentName*
  type: Method
  package: com.fasterxml.jackson.core.util
  summary: >-
    Method that can be used to change what is considered to be the current (field) name. May be needed to support non-JSON data formats or unusual binding conventions; not needed for typical processing.


    Note that use of this method should only be done as sort of last resort, as it is a work-around for regular operation.
  syntax:
    content: public void overrideCurrentName(String name)
    parameters:
    - id: name
      type: java.lang.String
- uid: com.fasterxml.jackson.core.util.JsonParserDelegate.overrideFormatFeatures(int,int)
  id: overrideFormatFeatures(int,int)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.util.JsonParserDelegate
  langs:
  - java
  name: overrideFormatFeatures(int values, int mask)
  nameWithType: JsonParserDelegate.overrideFormatFeatures(int values, int mask)
  fullName: com.fasterxml.jackson.core.util.JsonParserDelegate.overrideFormatFeatures(int values, int mask)
  overload: com.fasterxml.jackson.core.util.JsonParserDelegate.overrideFormatFeatures*
  type: Method
  package: com.fasterxml.jackson.core.util
  summary: >-
    Bulk set method for (re)setting states of <xref uid="com.fasterxml.jackson.core.FormatFeature" data-throw-if-not-resolved="false">FormatFeature</xref>s, by specifying values (set / clear) along with a mask, to determine which features to change, if any.


    Default implementation will simply throw an exception to indicate that the generator implementation does not support any <xref uid="com.fasterxml.jackson.core.FormatFeature" data-throw-if-not-resolved="false">FormatFeature</xref>s.
  syntax:
    content: public JsonParser overrideFormatFeatures(int values, int mask)
    parameters:
    - id: values
      type: int
    - id: mask
      type: int
    return:
      type: com.fasterxml.jackson.core.JsonParser
- uid: com.fasterxml.jackson.core.util.JsonParserDelegate.overrideStdFeatures(int,int)
  id: overrideStdFeatures(int,int)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.util.JsonParserDelegate
  langs:
  - java
  name: overrideStdFeatures(int values, int mask)
  nameWithType: JsonParserDelegate.overrideStdFeatures(int values, int mask)
  fullName: com.fasterxml.jackson.core.util.JsonParserDelegate.overrideStdFeatures(int values, int mask)
  overload: com.fasterxml.jackson.core.util.JsonParserDelegate.overrideStdFeatures*
  type: Method
  package: com.fasterxml.jackson.core.util
  summary: Bulk set method for (re)setting states of features specified by `mask`. Functionally equivalent to `int oldState = getFeatureMask(); int newState = (oldState & ~mask) | (values & mask); setFeatureMask(newState);` but preferred as this lets caller more efficiently specify actual changes made.
  syntax:
    content: public JsonParser overrideStdFeatures(int values, int mask)
    parameters:
    - id: values
      type: int
    - id: mask
      type: int
    return:
      type: com.fasterxml.jackson.core.JsonParser
- uid: com.fasterxml.jackson.core.util.JsonParserDelegate.readBinaryValue(com.fasterxml.jackson.core.Base64Variant,java.io.OutputStream)
  id: readBinaryValue(com.fasterxml.jackson.core.Base64Variant,java.io.OutputStream)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.util.JsonParserDelegate
  langs:
  - java
  name: readBinaryValue(Base64Variant b64variant, OutputStream out)
  nameWithType: JsonParserDelegate.readBinaryValue(Base64Variant b64variant, OutputStream out)
  fullName: com.fasterxml.jackson.core.util.JsonParserDelegate.readBinaryValue(Base64Variant b64variant, OutputStream out)
  overload: com.fasterxml.jackson.core.util.JsonParserDelegate.readBinaryValue*
  type: Method
  package: com.fasterxml.jackson.core.util
  summary: Similar to <xref uid="com.fasterxml.jackson.core.util.JsonParserDelegate.readBinaryValue*" data-throw-if-not-resolved="false">#readBinaryValue(OutputStream)</xref> but allows explicitly specifying base64 variant to use.
  syntax:
    content: public int readBinaryValue(Base64Variant b64variant, OutputStream out)
    parameters:
    - id: b64variant
      type: com.fasterxml.jackson.core.Base64Variant
    - id: out
      type: java.io.OutputStream
    return:
      type: int
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.util.JsonParserDelegate.requiresCustomCodec()
  id: requiresCustomCodec()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.util.JsonParserDelegate
  langs:
  - java
  name: requiresCustomCodec()
  nameWithType: JsonParserDelegate.requiresCustomCodec()
  fullName: com.fasterxml.jackson.core.util.JsonParserDelegate.requiresCustomCodec()
  overload: com.fasterxml.jackson.core.util.JsonParserDelegate.requiresCustomCodec*
  type: Method
  package: com.fasterxml.jackson.core.util
  summary: Method that can be called to determine if a custom <xref uid="com.fasterxml.jackson.core.ObjectCodec" data-throw-if-not-resolved="false">ObjectCodec</xref> is needed for binding data parsed using <xref uid="com.fasterxml.jackson.core.JsonParser" data-throw-if-not-resolved="false">JsonParser</xref> constructed by this factory (which typically also implies the same for serialization with <xref uid="com.fasterxml.jackson.core.JsonGenerator" data-throw-if-not-resolved="false">JsonGenerator</xref>).
  syntax:
    content: public boolean requiresCustomCodec()
    return:
      type: boolean
- uid: com.fasterxml.jackson.core.util.JsonParserDelegate.setCodec(com.fasterxml.jackson.core.ObjectCodec)
  id: setCodec(com.fasterxml.jackson.core.ObjectCodec)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.util.JsonParserDelegate
  langs:
  - java
  name: setCodec(ObjectCodec c)
  nameWithType: JsonParserDelegate.setCodec(ObjectCodec c)
  fullName: com.fasterxml.jackson.core.util.JsonParserDelegate.setCodec(ObjectCodec c)
  overload: com.fasterxml.jackson.core.util.JsonParserDelegate.setCodec*
  type: Method
  package: com.fasterxml.jackson.core.util
  summary: Setter that allows defining <xref uid="com.fasterxml.jackson.core.ObjectCodec" data-throw-if-not-resolved="false">ObjectCodec</xref> associated with this parser, if any. Codec is used by <xref uid="com.fasterxml.jackson.core.util.JsonParserDelegate.readValueAs*" data-throw-if-not-resolved="false">#readValueAs(Class)</xref> method (and its variants).
  syntax:
    content: public void setCodec(ObjectCodec c)
    parameters:
    - id: c
      type: com.fasterxml.jackson.core.ObjectCodec
- uid: com.fasterxml.jackson.core.util.JsonParserDelegate.setCurrentValue(java.lang.Object)
  id: setCurrentValue(java.lang.Object)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.util.JsonParserDelegate
  langs:
  - java
  name: setCurrentValue(Object v)
  nameWithType: JsonParserDelegate.setCurrentValue(Object v)
  fullName: com.fasterxml.jackson.core.util.JsonParserDelegate.setCurrentValue(Object v)
  overload: com.fasterxml.jackson.core.util.JsonParserDelegate.setCurrentValue*
  type: Method
  package: com.fasterxml.jackson.core.util
  summary: 'Helper method, usually equivalent to: `getParsingContext().setCurrentValue(v);`'
  syntax:
    content: public void setCurrentValue(Object v)
    parameters:
    - id: v
      type: java.lang.Object
- uid: com.fasterxml.jackson.core.util.JsonParserDelegate.setFeatureMask(int)
  id: setFeatureMask(int)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.util.JsonParserDelegate
  langs:
  - java
  name: setFeatureMask(int mask)
  nameWithType: JsonParserDelegate.setFeatureMask(int mask)
  fullName: com.fasterxml.jackson.core.util.JsonParserDelegate.setFeatureMask(int mask)
  overload: com.fasterxml.jackson.core.util.JsonParserDelegate.setFeatureMask*
  type: Method
  package: com.fasterxml.jackson.core.util
  summary: Bulk set method for (re)setting states of all standard <xref uid="" data-throw-if-not-resolved="false">Feature</xref>s
  syntax:
    content: public JsonParser setFeatureMask(int mask)
    parameters:
    - id: mask
      type: int
    return:
      type: com.fasterxml.jackson.core.JsonParser
- uid: com.fasterxml.jackson.core.util.JsonParserDelegate.setSchema(com.fasterxml.jackson.core.FormatSchema)
  id: setSchema(com.fasterxml.jackson.core.FormatSchema)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.util.JsonParserDelegate
  langs:
  - java
  name: setSchema(FormatSchema schema)
  nameWithType: JsonParserDelegate.setSchema(FormatSchema schema)
  fullName: com.fasterxml.jackson.core.util.JsonParserDelegate.setSchema(FormatSchema schema)
  overload: com.fasterxml.jackson.core.util.JsonParserDelegate.setSchema*
  type: Method
  package: com.fasterxml.jackson.core.util
  summary: >-
    Method to call to make this parser use specified schema. Method must be called before trying to parse any content, right after parser instance has been created. Note that not all parsers support schemas; and those that do usually only accept specific types of schemas: ones defined for data format parser can read.


    If parser does not support specified schema, <xref uid="java.lang.UnsupportedOperationException" data-throw-if-not-resolved="false">UnsupportedOperationException</xref> is thrown.
  syntax:
    content: public void setSchema(FormatSchema schema)
    parameters:
    - id: schema
      type: com.fasterxml.jackson.core.FormatSchema
- uid: com.fasterxml.jackson.core.util.JsonParserDelegate.skipChildren()
  id: skipChildren()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.util.JsonParserDelegate
  langs:
  - java
  name: skipChildren()
  nameWithType: JsonParserDelegate.skipChildren()
  fullName: com.fasterxml.jackson.core.util.JsonParserDelegate.skipChildren()
  overload: com.fasterxml.jackson.core.util.JsonParserDelegate.skipChildren*
  type: Method
  package: com.fasterxml.jackson.core.util
  summary: Method that will skip all child tokens of an array or object token that the parser currently points to, iff stream points to <xref uid="com.fasterxml.jackson.core.JsonToken.START_OBJECT" data-throw-if-not-resolved="false">JsonToken#START_OBJECT</xref> or <xref uid="com.fasterxml.jackson.core.JsonToken.START_ARRAY" data-throw-if-not-resolved="false">JsonToken#START_ARRAY</xref>. If not, it will do nothing. After skipping, stream will point to **matching** <xref uid="com.fasterxml.jackson.core.JsonToken.END_OBJECT" data-throw-if-not-resolved="false">JsonToken#END_OBJECT</xref> or <xref uid="com.fasterxml.jackson.core.JsonToken.END_ARRAY" data-throw-if-not-resolved="false">JsonToken#END_ARRAY</xref> (possibly skipping nested pairs of START/END OBJECT/ARRAY tokens as well as value tokens). The idea is that after calling this method, application will call <xref uid="com.fasterxml.jackson.core.util.JsonParserDelegate.nextToken*" data-throw-if-not-resolved="false">#nextToken</xref> to point to the next available token, if any.
  syntax:
    content: public JsonParser skipChildren()
    return:
      type: com.fasterxml.jackson.core.JsonParser
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.util.JsonParserDelegate.version()
  id: version()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.util.JsonParserDelegate
  langs:
  - java
  name: version()
  nameWithType: JsonParserDelegate.version()
  fullName: com.fasterxml.jackson.core.util.JsonParserDelegate.version()
  overload: com.fasterxml.jackson.core.util.JsonParserDelegate.version*
  type: Method
  package: com.fasterxml.jackson.core.util
  summary: Accessor for getting version of the core package, given a parser instance. Left for sub-classes to implement.
  syntax:
    content: public Version version()
    return:
      type: com.fasterxml.jackson.core.Version
references:
- uid: com.fasterxml.jackson.core.JsonParser
  name: JsonParser
  nameWithType: JsonParser
  fullName: com.fasterxml.jackson.core.JsonParser
- uid: com.fasterxml.jackson.core.util.JsonParserDelegate.JsonParserDelegate*
  name: JsonParserDelegate
  nameWithType: JsonParserDelegate.JsonParserDelegate
  fullName: com.fasterxml.jackson.core.util.JsonParserDelegate.JsonParserDelegate
  package: com.fasterxml.jackson.core.util
- uid: java.lang.Object
  spec.java:
  - uid: java.lang.Object
    name: Object
    fullName: java.lang.Object
- uid: com.fasterxml.jackson.core.util.JsonParserDelegate.getCurrentValue*
  name: getCurrentValue
  nameWithType: JsonParserDelegate.getCurrentValue
  fullName: com.fasterxml.jackson.core.util.JsonParserDelegate.getCurrentValue
  package: com.fasterxml.jackson.core.util
- uid: com.fasterxml.jackson.core.util.JsonParserDelegate.setCurrentValue*
  name: setCurrentValue
  nameWithType: JsonParserDelegate.setCurrentValue
  fullName: com.fasterxml.jackson.core.util.JsonParserDelegate.setCurrentValue
  package: com.fasterxml.jackson.core.util
- uid: com.fasterxml.jackson.core.ObjectCodec
  name: ObjectCodec
  nameWithType: ObjectCodec
  fullName: com.fasterxml.jackson.core.ObjectCodec
- uid: com.fasterxml.jackson.core.util.JsonParserDelegate.setCodec*
  name: setCodec
  nameWithType: JsonParserDelegate.setCodec
  fullName: com.fasterxml.jackson.core.util.JsonParserDelegate.setCodec
  package: com.fasterxml.jackson.core.util
- uid: com.fasterxml.jackson.core.util.JsonParserDelegate.getCodec*
  name: getCodec
  nameWithType: JsonParserDelegate.getCodec
  fullName: com.fasterxml.jackson.core.util.JsonParserDelegate.getCodec
  package: com.fasterxml.jackson.core.util
- uid: com.fasterxml.jackson.core.JsonParser.Feature
  name: JsonParser.Feature
  nameWithType: JsonParser.Feature
  fullName: com.fasterxml.jackson.core.JsonParser.Feature
- uid: com.fasterxml.jackson.core.util.JsonParserDelegate.enable*
  name: enable
  nameWithType: JsonParserDelegate.enable
  fullName: com.fasterxml.jackson.core.util.JsonParserDelegate.enable
  package: com.fasterxml.jackson.core.util
- uid: com.fasterxml.jackson.core.util.JsonParserDelegate.disable*
  name: disable
  nameWithType: JsonParserDelegate.disable
  fullName: com.fasterxml.jackson.core.util.JsonParserDelegate.disable
  package: com.fasterxml.jackson.core.util
- uid: boolean
  spec.java:
  - uid: boolean
    name: boolean
    fullName: boolean
- uid: com.fasterxml.jackson.core.util.JsonParserDelegate.isEnabled*
  name: isEnabled
  nameWithType: JsonParserDelegate.isEnabled
  fullName: com.fasterxml.jackson.core.util.JsonParserDelegate.isEnabled
  package: com.fasterxml.jackson.core.util
- uid: int
  spec.java:
  - uid: int
    name: int
    fullName: int
- uid: com.fasterxml.jackson.core.util.JsonParserDelegate.getFeatureMask*
  name: getFeatureMask
  nameWithType: JsonParserDelegate.getFeatureMask
  fullName: com.fasterxml.jackson.core.util.JsonParserDelegate.getFeatureMask
  package: com.fasterxml.jackson.core.util
- uid: com.fasterxml.jackson.core.util.JsonParserDelegate.setFeatureMask*
  name: setFeatureMask
  nameWithType: JsonParserDelegate.setFeatureMask
  fullName: com.fasterxml.jackson.core.util.JsonParserDelegate.setFeatureMask
  package: com.fasterxml.jackson.core.util
- uid: com.fasterxml.jackson.core.util.JsonParserDelegate.overrideStdFeatures*
  name: overrideStdFeatures
  nameWithType: JsonParserDelegate.overrideStdFeatures
  fullName: com.fasterxml.jackson.core.util.JsonParserDelegate.overrideStdFeatures
  package: com.fasterxml.jackson.core.util
- uid: com.fasterxml.jackson.core.util.JsonParserDelegate.overrideFormatFeatures*
  name: overrideFormatFeatures
  nameWithType: JsonParserDelegate.overrideFormatFeatures
  fullName: com.fasterxml.jackson.core.util.JsonParserDelegate.overrideFormatFeatures
  package: com.fasterxml.jackson.core.util
- uid: com.fasterxml.jackson.core.FormatSchema
  name: FormatSchema
  nameWithType: FormatSchema
  fullName: com.fasterxml.jackson.core.FormatSchema
- uid: com.fasterxml.jackson.core.util.JsonParserDelegate.getSchema*
  name: getSchema
  nameWithType: JsonParserDelegate.getSchema
  fullName: com.fasterxml.jackson.core.util.JsonParserDelegate.getSchema
  package: com.fasterxml.jackson.core.util
- uid: com.fasterxml.jackson.core.util.JsonParserDelegate.setSchema*
  name: setSchema
  nameWithType: JsonParserDelegate.setSchema
  fullName: com.fasterxml.jackson.core.util.JsonParserDelegate.setSchema
  package: com.fasterxml.jackson.core.util
- uid: com.fasterxml.jackson.core.util.JsonParserDelegate.canUseSchema*
  name: canUseSchema
  nameWithType: JsonParserDelegate.canUseSchema
  fullName: com.fasterxml.jackson.core.util.JsonParserDelegate.canUseSchema
  package: com.fasterxml.jackson.core.util
- uid: com.fasterxml.jackson.core.Version
  name: Version
  nameWithType: Version
  fullName: com.fasterxml.jackson.core.Version
- uid: com.fasterxml.jackson.core.util.JsonParserDelegate.version*
  name: version
  nameWithType: JsonParserDelegate.version
  fullName: com.fasterxml.jackson.core.util.JsonParserDelegate.version
  package: com.fasterxml.jackson.core.util
- uid: com.fasterxml.jackson.core.util.JsonParserDelegate.getInputSource*
  name: getInputSource
  nameWithType: JsonParserDelegate.getInputSource
  fullName: com.fasterxml.jackson.core.util.JsonParserDelegate.getInputSource
  package: com.fasterxml.jackson.core.util
- uid: com.fasterxml.jackson.core.util.JsonParserDelegate.requiresCustomCodec*
  name: requiresCustomCodec
  nameWithType: JsonParserDelegate.requiresCustomCodec
  fullName: com.fasterxml.jackson.core.util.JsonParserDelegate.requiresCustomCodec
  package: com.fasterxml.jackson.core.util
- uid: java.io.IOException
  spec.java:
  - uid: java.io.IOException
    name: IOException
    fullName: java.io.IOException
- uid: com.fasterxml.jackson.core.util.JsonParserDelegate.close*
  name: close
  nameWithType: JsonParserDelegate.close
  fullName: com.fasterxml.jackson.core.util.JsonParserDelegate.close
  package: com.fasterxml.jackson.core.util
- uid: com.fasterxml.jackson.core.util.JsonParserDelegate.isClosed*
  name: isClosed
  nameWithType: JsonParserDelegate.isClosed
  fullName: com.fasterxml.jackson.core.util.JsonParserDelegate.isClosed
  package: com.fasterxml.jackson.core.util
- uid: com.fasterxml.jackson.core.JsonToken
  name: JsonToken
  nameWithType: JsonToken
  fullName: com.fasterxml.jackson.core.JsonToken
- uid: com.fasterxml.jackson.core.util.JsonParserDelegate.currentToken*
  name: currentToken
  nameWithType: JsonParserDelegate.currentToken
  fullName: com.fasterxml.jackson.core.util.JsonParserDelegate.currentToken
  package: com.fasterxml.jackson.core.util
- uid: com.fasterxml.jackson.core.util.JsonParserDelegate.currentTokenId*
  name: currentTokenId
  nameWithType: JsonParserDelegate.currentTokenId
  fullName: com.fasterxml.jackson.core.util.JsonParserDelegate.currentTokenId
  package: com.fasterxml.jackson.core.util
- uid: com.fasterxml.jackson.core.util.JsonParserDelegate.getCurrentToken*
  name: getCurrentToken
  nameWithType: JsonParserDelegate.getCurrentToken
  fullName: com.fasterxml.jackson.core.util.JsonParserDelegate.getCurrentToken
  package: com.fasterxml.jackson.core.util
- uid: com.fasterxml.jackson.core.util.JsonParserDelegate.getCurrentTokenId*
  name: getCurrentTokenId
  nameWithType: JsonParserDelegate.getCurrentTokenId
  fullName: com.fasterxml.jackson.core.util.JsonParserDelegate.getCurrentTokenId
  package: com.fasterxml.jackson.core.util
- uid: com.fasterxml.jackson.core.util.JsonParserDelegate.hasCurrentToken*
  name: hasCurrentToken
  nameWithType: JsonParserDelegate.hasCurrentToken
  fullName: com.fasterxml.jackson.core.util.JsonParserDelegate.hasCurrentToken
  package: com.fasterxml.jackson.core.util
- uid: com.fasterxml.jackson.core.util.JsonParserDelegate.hasTokenId*
  name: hasTokenId
  nameWithType: JsonParserDelegate.hasTokenId
  fullName: com.fasterxml.jackson.core.util.JsonParserDelegate.hasTokenId
  package: com.fasterxml.jackson.core.util
- uid: com.fasterxml.jackson.core.util.JsonParserDelegate.hasToken*
  name: hasToken
  nameWithType: JsonParserDelegate.hasToken
  fullName: com.fasterxml.jackson.core.util.JsonParserDelegate.hasToken
  package: com.fasterxml.jackson.core.util
- uid: java.lang.String
  spec.java:
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
- uid: com.fasterxml.jackson.core.util.JsonParserDelegate.getCurrentName*
  name: getCurrentName
  nameWithType: JsonParserDelegate.getCurrentName
  fullName: com.fasterxml.jackson.core.util.JsonParserDelegate.getCurrentName
  package: com.fasterxml.jackson.core.util
- uid: com.fasterxml.jackson.core.JsonLocation
  name: JsonLocation
  nameWithType: JsonLocation
  fullName: com.fasterxml.jackson.core.JsonLocation
- uid: com.fasterxml.jackson.core.util.JsonParserDelegate.getCurrentLocation*
  name: getCurrentLocation
  nameWithType: JsonParserDelegate.getCurrentLocation
  fullName: com.fasterxml.jackson.core.util.JsonParserDelegate.getCurrentLocation
  package: com.fasterxml.jackson.core.util
- uid: com.fasterxml.jackson.core.JsonStreamContext
  name: JsonStreamContext
  nameWithType: JsonStreamContext
  fullName: com.fasterxml.jackson.core.JsonStreamContext
- uid: com.fasterxml.jackson.core.util.JsonParserDelegate.getParsingContext*
  name: getParsingContext
  nameWithType: JsonParserDelegate.getParsingContext
  fullName: com.fasterxml.jackson.core.util.JsonParserDelegate.getParsingContext
  package: com.fasterxml.jackson.core.util
- uid: com.fasterxml.jackson.core.util.JsonParserDelegate.isExpectedStartArrayToken*
  name: isExpectedStartArrayToken
  nameWithType: JsonParserDelegate.isExpectedStartArrayToken
  fullName: com.fasterxml.jackson.core.util.JsonParserDelegate.isExpectedStartArrayToken
  package: com.fasterxml.jackson.core.util
- uid: com.fasterxml.jackson.core.util.JsonParserDelegate.isExpectedStartObjectToken*
  name: isExpectedStartObjectToken
  nameWithType: JsonParserDelegate.isExpectedStartObjectToken
  fullName: com.fasterxml.jackson.core.util.JsonParserDelegate.isExpectedStartObjectToken
  package: com.fasterxml.jackson.core.util
- uid: com.fasterxml.jackson.core.util.JsonParserDelegate.isNaN*
  name: isNaN
  nameWithType: JsonParserDelegate.isNaN
  fullName: com.fasterxml.jackson.core.util.JsonParserDelegate.isNaN
  package: com.fasterxml.jackson.core.util
- uid: com.fasterxml.jackson.core.util.JsonParserDelegate.clearCurrentToken*
  name: clearCurrentToken
  nameWithType: JsonParserDelegate.clearCurrentToken
  fullName: com.fasterxml.jackson.core.util.JsonParserDelegate.clearCurrentToken
  package: com.fasterxml.jackson.core.util
- uid: com.fasterxml.jackson.core.util.JsonParserDelegate.getLastClearedToken*
  name: getLastClearedToken
  nameWithType: JsonParserDelegate.getLastClearedToken
  fullName: com.fasterxml.jackson.core.util.JsonParserDelegate.getLastClearedToken
  package: com.fasterxml.jackson.core.util
- uid: com.fasterxml.jackson.core.util.JsonParserDelegate.overrideCurrentName*
  name: overrideCurrentName
  nameWithType: JsonParserDelegate.overrideCurrentName
  fullName: com.fasterxml.jackson.core.util.JsonParserDelegate.overrideCurrentName
  package: com.fasterxml.jackson.core.util
- uid: com.fasterxml.jackson.core.util.JsonParserDelegate.getText*
  name: getText
  nameWithType: JsonParserDelegate.getText
  fullName: com.fasterxml.jackson.core.util.JsonParserDelegate.getText
  package: com.fasterxml.jackson.core.util
- uid: com.fasterxml.jackson.core.util.JsonParserDelegate.hasTextCharacters*
  name: hasTextCharacters
  nameWithType: JsonParserDelegate.hasTextCharacters
  fullName: com.fasterxml.jackson.core.util.JsonParserDelegate.hasTextCharacters
  package: com.fasterxml.jackson.core.util
- uid: char[]
  spec.java:
  - uid: char
    name: char
    fullName: char
  - name: '[]'
    fullName: '[]'
- uid: com.fasterxml.jackson.core.util.JsonParserDelegate.getTextCharacters*
  name: getTextCharacters
  nameWithType: JsonParserDelegate.getTextCharacters
  fullName: com.fasterxml.jackson.core.util.JsonParserDelegate.getTextCharacters
  package: com.fasterxml.jackson.core.util
- uid: com.fasterxml.jackson.core.util.JsonParserDelegate.getTextLength*
  name: getTextLength
  nameWithType: JsonParserDelegate.getTextLength
  fullName: com.fasterxml.jackson.core.util.JsonParserDelegate.getTextLength
  package: com.fasterxml.jackson.core.util
- uid: com.fasterxml.jackson.core.util.JsonParserDelegate.getTextOffset*
  name: getTextOffset
  nameWithType: JsonParserDelegate.getTextOffset
  fullName: com.fasterxml.jackson.core.util.JsonParserDelegate.getTextOffset
  package: com.fasterxml.jackson.core.util
- uid: java.lang.UnsupportedOperationException
  spec.java:
  - uid: java.lang.UnsupportedOperationException
    name: UnsupportedOperationException
    fullName: java.lang.UnsupportedOperationException
- uid: java.io.Writer
  spec.java:
  - uid: java.io.Writer
    name: Writer
    fullName: java.io.Writer
- uid: java.math.BigInteger
  spec.java:
  - uid: java.math.BigInteger
    name: BigInteger
    fullName: java.math.BigInteger
- uid: com.fasterxml.jackson.core.util.JsonParserDelegate.getBigIntegerValue*
  name: getBigIntegerValue
  nameWithType: JsonParserDelegate.getBigIntegerValue
  fullName: com.fasterxml.jackson.core.util.JsonParserDelegate.getBigIntegerValue
  package: com.fasterxml.jackson.core.util
- uid: com.fasterxml.jackson.core.util.JsonParserDelegate.getBooleanValue*
  name: getBooleanValue
  nameWithType: JsonParserDelegate.getBooleanValue
  fullName: com.fasterxml.jackson.core.util.JsonParserDelegate.getBooleanValue
  package: com.fasterxml.jackson.core.util
- uid: byte
  spec.java:
  - uid: byte
    name: byte
    fullName: byte
- uid: com.fasterxml.jackson.core.util.JsonParserDelegate.getByteValue*
  name: getByteValue
  nameWithType: JsonParserDelegate.getByteValue
  fullName: com.fasterxml.jackson.core.util.JsonParserDelegate.getByteValue
  package: com.fasterxml.jackson.core.util
- uid: short
  spec.java:
  - uid: short
    name: short
    fullName: short
- uid: com.fasterxml.jackson.core.util.JsonParserDelegate.getShortValue*
  name: getShortValue
  nameWithType: JsonParserDelegate.getShortValue
  fullName: com.fasterxml.jackson.core.util.JsonParserDelegate.getShortValue
  package: com.fasterxml.jackson.core.util
- uid: java.math.BigDecimal
  spec.java:
  - uid: java.math.BigDecimal
    name: BigDecimal
    fullName: java.math.BigDecimal
- uid: com.fasterxml.jackson.core.util.JsonParserDelegate.getDecimalValue*
  name: getDecimalValue
  nameWithType: JsonParserDelegate.getDecimalValue
  fullName: com.fasterxml.jackson.core.util.JsonParserDelegate.getDecimalValue
  package: com.fasterxml.jackson.core.util
- uid: double
  spec.java:
  - uid: double
    name: double
    fullName: double
- uid: com.fasterxml.jackson.core.util.JsonParserDelegate.getDoubleValue*
  name: getDoubleValue
  nameWithType: JsonParserDelegate.getDoubleValue
  fullName: com.fasterxml.jackson.core.util.JsonParserDelegate.getDoubleValue
  package: com.fasterxml.jackson.core.util
- uid: float
  spec.java:
  - uid: float
    name: float
    fullName: float
- uid: com.fasterxml.jackson.core.util.JsonParserDelegate.getFloatValue*
  name: getFloatValue
  nameWithType: JsonParserDelegate.getFloatValue
  fullName: com.fasterxml.jackson.core.util.JsonParserDelegate.getFloatValue
  package: com.fasterxml.jackson.core.util
- uid: com.fasterxml.jackson.core.util.JsonParserDelegate.getIntValue*
  name: getIntValue
  nameWithType: JsonParserDelegate.getIntValue
  fullName: com.fasterxml.jackson.core.util.JsonParserDelegate.getIntValue
  package: com.fasterxml.jackson.core.util
- uid: long
  spec.java:
  - uid: long
    name: long
    fullName: long
- uid: com.fasterxml.jackson.core.util.JsonParserDelegate.getLongValue*
  name: getLongValue
  nameWithType: JsonParserDelegate.getLongValue
  fullName: com.fasterxml.jackson.core.util.JsonParserDelegate.getLongValue
  package: com.fasterxml.jackson.core.util
- uid: com.fasterxml.jackson.core.JsonParser.NumberType
  name: JsonParser.NumberType
  nameWithType: JsonParser.NumberType
  fullName: com.fasterxml.jackson.core.JsonParser.NumberType
- uid: com.fasterxml.jackson.core.util.JsonParserDelegate.getNumberType*
  name: getNumberType
  nameWithType: JsonParserDelegate.getNumberType
  fullName: com.fasterxml.jackson.core.util.JsonParserDelegate.getNumberType
  package: com.fasterxml.jackson.core.util
- uid: java.lang.Number
  spec.java:
  - uid: java.lang.Number
    name: Number
    fullName: java.lang.Number
- uid: com.fasterxml.jackson.core.util.JsonParserDelegate.getNumberValue*
  name: getNumberValue
  nameWithType: JsonParserDelegate.getNumberValue
  fullName: com.fasterxml.jackson.core.util.JsonParserDelegate.getNumberValue
  package: com.fasterxml.jackson.core.util
- uid: com.fasterxml.jackson.core.util.JsonParserDelegate.getValueAsInt*
  name: getValueAsInt
  nameWithType: JsonParserDelegate.getValueAsInt
  fullName: com.fasterxml.jackson.core.util.JsonParserDelegate.getValueAsInt
  package: com.fasterxml.jackson.core.util
- uid: com.fasterxml.jackson.core.util.JsonParserDelegate.getValueAsLong*
  name: getValueAsLong
  nameWithType: JsonParserDelegate.getValueAsLong
  fullName: com.fasterxml.jackson.core.util.JsonParserDelegate.getValueAsLong
  package: com.fasterxml.jackson.core.util
- uid: com.fasterxml.jackson.core.util.JsonParserDelegate.getValueAsDouble*
  name: getValueAsDouble
  nameWithType: JsonParserDelegate.getValueAsDouble
  fullName: com.fasterxml.jackson.core.util.JsonParserDelegate.getValueAsDouble
  package: com.fasterxml.jackson.core.util
- uid: com.fasterxml.jackson.core.util.JsonParserDelegate.getValueAsBoolean*
  name: getValueAsBoolean
  nameWithType: JsonParserDelegate.getValueAsBoolean
  fullName: com.fasterxml.jackson.core.util.JsonParserDelegate.getValueAsBoolean
  package: com.fasterxml.jackson.core.util
- uid: com.fasterxml.jackson.core.util.JsonParserDelegate.getValueAsString*
  name: getValueAsString
  nameWithType: JsonParserDelegate.getValueAsString
  fullName: com.fasterxml.jackson.core.util.JsonParserDelegate.getValueAsString
  package: com.fasterxml.jackson.core.util
- uid: com.fasterxml.jackson.core.util.JsonParserDelegate.getEmbeddedObject*
  name: getEmbeddedObject
  nameWithType: JsonParserDelegate.getEmbeddedObject
  fullName: com.fasterxml.jackson.core.util.JsonParserDelegate.getEmbeddedObject
  package: com.fasterxml.jackson.core.util
- uid: com.fasterxml.jackson.core.Base64Variant
  name: Base64Variant
  nameWithType: Base64Variant
  fullName: com.fasterxml.jackson.core.Base64Variant
- uid: byte[]
  spec.java:
  - uid: byte
    name: byte
    fullName: byte
  - name: '[]'
    fullName: '[]'
- uid: com.fasterxml.jackson.core.util.JsonParserDelegate.getBinaryValue*
  name: getBinaryValue
  nameWithType: JsonParserDelegate.getBinaryValue
  fullName: com.fasterxml.jackson.core.util.JsonParserDelegate.getBinaryValue
  package: com.fasterxml.jackson.core.util
- uid: java.io.OutputStream
  spec.java:
  - uid: java.io.OutputStream
    name: OutputStream
    fullName: java.io.OutputStream
- uid: com.fasterxml.jackson.core.util.JsonParserDelegate.readBinaryValue*
  name: readBinaryValue
  nameWithType: JsonParserDelegate.readBinaryValue
  fullName: com.fasterxml.jackson.core.util.JsonParserDelegate.readBinaryValue
  package: com.fasterxml.jackson.core.util
- uid: com.fasterxml.jackson.core.util.JsonParserDelegate.getTokenLocation*
  name: getTokenLocation
  nameWithType: JsonParserDelegate.getTokenLocation
  fullName: com.fasterxml.jackson.core.util.JsonParserDelegate.getTokenLocation
  package: com.fasterxml.jackson.core.util
- uid: com.fasterxml.jackson.core.util.JsonParserDelegate.nextToken*
  name: nextToken
  nameWithType: JsonParserDelegate.nextToken
  fullName: com.fasterxml.jackson.core.util.JsonParserDelegate.nextToken
  package: com.fasterxml.jackson.core.util
- uid: com.fasterxml.jackson.core.util.JsonParserDelegate.nextValue*
  name: nextValue
  nameWithType: JsonParserDelegate.nextValue
  fullName: com.fasterxml.jackson.core.util.JsonParserDelegate.nextValue
  package: com.fasterxml.jackson.core.util
- uid: com.fasterxml.jackson.core.util.JsonParserDelegate.finishToken*
  name: finishToken
  nameWithType: JsonParserDelegate.finishToken
  fullName: com.fasterxml.jackson.core.util.JsonParserDelegate.finishToken
  package: com.fasterxml.jackson.core.util
- uid: com.fasterxml.jackson.core.util.JsonParserDelegate.skipChildren*
  name: skipChildren
  nameWithType: JsonParserDelegate.skipChildren
  fullName: com.fasterxml.jackson.core.util.JsonParserDelegate.skipChildren
  package: com.fasterxml.jackson.core.util
- uid: com.fasterxml.jackson.core.util.JsonParserDelegate.canReadObjectId*
  name: canReadObjectId
  nameWithType: JsonParserDelegate.canReadObjectId
  fullName: com.fasterxml.jackson.core.util.JsonParserDelegate.canReadObjectId
  package: com.fasterxml.jackson.core.util
- uid: com.fasterxml.jackson.core.util.JsonParserDelegate.canReadTypeId*
  name: canReadTypeId
  nameWithType: JsonParserDelegate.canReadTypeId
  fullName: com.fasterxml.jackson.core.util.JsonParserDelegate.canReadTypeId
  package: com.fasterxml.jackson.core.util
- uid: com.fasterxml.jackson.core.util.JsonParserDelegate.getObjectId*
  name: getObjectId
  nameWithType: JsonParserDelegate.getObjectId
  fullName: com.fasterxml.jackson.core.util.JsonParserDelegate.getObjectId
  package: com.fasterxml.jackson.core.util
- uid: com.fasterxml.jackson.core.util.JsonParserDelegate.getTypeId*
  name: getTypeId
  nameWithType: JsonParserDelegate.getTypeId
  fullName: com.fasterxml.jackson.core.util.JsonParserDelegate.getTypeId
  package: com.fasterxml.jackson.core.util
- uid: com.fasterxml.jackson.core.util.JsonParserDelegate.delegate*
  name: delegate
  nameWithType: JsonParserDelegate.delegate
  fullName: com.fasterxml.jackson.core.util.JsonParserDelegate.delegate
  package: com.fasterxml.jackson.core.util
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: com.fasterxml.jackson.core.JsonParser.getBinaryValue(com.fasterxml.jackson.core.Base64Variant)
  name: JsonParser.getBinaryValue(Base64Variant)
  nameWithType: JsonParser.getBinaryValue(Base64Variant)
  fullName: com.fasterxml.jackson.core.JsonParser.getBinaryValue(com.fasterxml.jackson.core.Base64Variant)
- uid: java.lang.Object.finalize()
  name: Object.finalize()
  nameWithType: Object.finalize()
  fullName: java.lang.Object.finalize()
- uid: com.fasterxml.jackson.core.JsonParser.getParsingContext()
  name: JsonParser.getParsingContext()
  nameWithType: JsonParser.getParsingContext()
  fullName: com.fasterxml.jackson.core.JsonParser.getParsingContext()
- uid: com.fasterxml.jackson.core.JsonParser.canReadTypeId()
  name: JsonParser.canReadTypeId()
  nameWithType: JsonParser.canReadTypeId()
  fullName: com.fasterxml.jackson.core.JsonParser.canReadTypeId()
- uid: com.fasterxml.jackson.core.JsonParser.nextValue()
  name: JsonParser.nextValue()
  nameWithType: JsonParser.nextValue()
  fullName: com.fasterxml.jackson.core.JsonParser.nextValue()
- uid: com.fasterxml.jackson.core.JsonParser.getValueAsDouble(double)
  name: JsonParser.getValueAsDouble(double)
  nameWithType: JsonParser.getValueAsDouble(double)
  fullName: com.fasterxml.jackson.core.JsonParser.getValueAsDouble(double)
- uid: com.fasterxml.jackson.core.JsonParser.readBinaryValue(java.io.OutputStream)
  name: JsonParser.readBinaryValue(OutputStream)
  nameWithType: JsonParser.readBinaryValue(OutputStream)
  fullName: com.fasterxml.jackson.core.JsonParser.readBinaryValue(java.io.OutputStream)
- uid: com.fasterxml.jackson.core.JsonParser.getNumberType()
  name: JsonParser.getNumberType()
  nameWithType: JsonParser.getNumberType()
  fullName: com.fasterxml.jackson.core.JsonParser.getNumberType()
- uid: com.fasterxml.jackson.core.JsonParser.getObjectId()
  name: JsonParser.getObjectId()
  nameWithType: JsonParser.getObjectId()
  fullName: com.fasterxml.jackson.core.JsonParser.getObjectId()
- uid: com.fasterxml.jackson.core.JsonParser.canParseAsync()
  name: JsonParser.canParseAsync()
  nameWithType: JsonParser.canParseAsync()
  fullName: com.fasterxml.jackson.core.JsonParser.canParseAsync()
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: com.fasterxml.jackson.core.JsonParser.getCurrentToken()
  name: JsonParser.getCurrentToken()
  nameWithType: JsonParser.getCurrentToken()
  fullName: com.fasterxml.jackson.core.JsonParser.getCurrentToken()
- uid: com.fasterxml.jackson.core.JsonParser.getIntValue()
  name: JsonParser.getIntValue()
  nameWithType: JsonParser.getIntValue()
  fullName: com.fasterxml.jackson.core.JsonParser.getIntValue()
- uid: com.fasterxml.jackson.core.JsonParser.hasTokenId(int)
  name: JsonParser.hasTokenId(int)
  nameWithType: JsonParser.hasTokenId(int)
  fullName: com.fasterxml.jackson.core.JsonParser.hasTokenId(int)
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: com.fasterxml.jackson.core.JsonParser.isClosed()
  name: JsonParser.isClosed()
  nameWithType: JsonParser.isClosed()
  fullName: com.fasterxml.jackson.core.JsonParser.isClosed()
- uid: com.fasterxml.jackson.core.JsonParser.getValueAsString()
  name: JsonParser.getValueAsString()
  nameWithType: JsonParser.getValueAsString()
  fullName: com.fasterxml.jackson.core.JsonParser.getValueAsString()
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: com.fasterxml.jackson.core.JsonParser.getBooleanValue()
  name: JsonParser.getBooleanValue()
  nameWithType: JsonParser.getBooleanValue()
  fullName: com.fasterxml.jackson.core.JsonParser.getBooleanValue()
- uid: com.fasterxml.jackson.core.JsonParser.getBinaryValue()
  name: JsonParser.getBinaryValue()
  nameWithType: JsonParser.getBinaryValue()
  fullName: com.fasterxml.jackson.core.JsonParser.getBinaryValue()
- uid: com.fasterxml.jackson.core.JsonParser.canReadObjectId()
  name: JsonParser.canReadObjectId()
  nameWithType: JsonParser.canReadObjectId()
  fullName: com.fasterxml.jackson.core.JsonParser.canReadObjectId()
- uid: com.fasterxml.jackson.core.JsonParser.setRequestPayloadOnError(java.lang.String)
  name: JsonParser.setRequestPayloadOnError(String)
  nameWithType: JsonParser.setRequestPayloadOnError(String)
  fullName: com.fasterxml.jackson.core.JsonParser.setRequestPayloadOnError(java.lang.String)
- uid: com.fasterxml.jackson.core.JsonParser.getValueAsString(java.lang.String)
  name: JsonParser.getValueAsString(String)
  nameWithType: JsonParser.getValueAsString(String)
  fullName: com.fasterxml.jackson.core.JsonParser.getValueAsString(java.lang.String)
- uid: com.fasterxml.jackson.core.JsonParser.isEnabled(com.fasterxml.jackson.core.StreamReadFeature)
  name: JsonParser.isEnabled(StreamReadFeature)
  nameWithType: JsonParser.isEnabled(StreamReadFeature)
  fullName: com.fasterxml.jackson.core.JsonParser.isEnabled(com.fasterxml.jackson.core.StreamReadFeature)
- uid: com.fasterxml.jackson.core.JsonParser.getText()
  name: JsonParser.getText()
  nameWithType: JsonParser.getText()
  fullName: com.fasterxml.jackson.core.JsonParser.getText()
- uid: com.fasterxml.jackson.core.JsonParser.<T>readValueAs(com.fasterxml.jackson.core.type.TypeReference<?>)
  name: JsonParser.<T>readValueAs(TypeReference<?>)
  nameWithType: JsonParser.<T>readValueAs(TypeReference<?>)
  fullName: com.fasterxml.jackson.core.JsonParser.<T>readValueAs(com.fasterxml.jackson.core.type.TypeReference<?>)
- uid: com.fasterxml.jackson.core.JsonParser.getInputSource()
  name: JsonParser.getInputSource()
  nameWithType: JsonParser.getInputSource()
  fullName: com.fasterxml.jackson.core.JsonParser.getInputSource()
- uid: com.fasterxml.jackson.core.JsonParser.disable(com.fasterxml.jackson.core.JsonParser.Feature)
  name: JsonParser.disable(JsonParser.Feature)
  nameWithType: JsonParser.disable(JsonParser.Feature)
  fullName: com.fasterxml.jackson.core.JsonParser.disable(com.fasterxml.jackson.core.JsonParser.Feature)
- uid: com.fasterxml.jackson.core.JsonParser.<T>readValuesAs(java.lang.Class<T>)
  name: JsonParser.<T>readValuesAs(Class<T>)
  nameWithType: JsonParser.<T>readValuesAs(Class<T>)
  fullName: com.fasterxml.jackson.core.JsonParser.<T>readValuesAs(java.lang.Class<T>)
- uid: com.fasterxml.jackson.core.JsonParser.getCurrentName()
  name: JsonParser.getCurrentName()
  nameWithType: JsonParser.getCurrentName()
  fullName: com.fasterxml.jackson.core.JsonParser.getCurrentName()
- uid: com.fasterxml.jackson.core.JsonParser.getCodec()
  name: JsonParser.getCodec()
  nameWithType: JsonParser.getCodec()
  fullName: com.fasterxml.jackson.core.JsonParser.getCodec()
- uid: com.fasterxml.jackson.core.JsonParser.setCodec(com.fasterxml.jackson.core.ObjectCodec)
  name: JsonParser.setCodec(ObjectCodec)
  nameWithType: JsonParser.setCodec(ObjectCodec)
  fullName: com.fasterxml.jackson.core.JsonParser.setCodec(com.fasterxml.jackson.core.ObjectCodec)
- uid: com.fasterxml.jackson.core.JsonParser.getCurrentLocation()
  name: JsonParser.getCurrentLocation()
  nameWithType: JsonParser.getCurrentLocation()
  fullName: com.fasterxml.jackson.core.JsonParser.getCurrentLocation()
- uid: com.fasterxml.jackson.core.JsonParser.currentName()
  name: JsonParser.currentName()
  nameWithType: JsonParser.currentName()
  fullName: com.fasterxml.jackson.core.JsonParser.currentName()
- uid: com.fasterxml.jackson.core.JsonParser.getTextCharacters()
  name: JsonParser.getTextCharacters()
  nameWithType: JsonParser.getTextCharacters()
  fullName: com.fasterxml.jackson.core.JsonParser.getTextCharacters()
- uid: com.fasterxml.jackson.core.JsonParser.requiresCustomCodec()
  name: JsonParser.requiresCustomCodec()
  nameWithType: JsonParser.requiresCustomCodec()
  fullName: com.fasterxml.jackson.core.JsonParser.requiresCustomCodec()
- uid: com.fasterxml.jackson.core.JsonParser._reportUnsupportedOperation()
  name: JsonParser._reportUnsupportedOperation()
  nameWithType: JsonParser._reportUnsupportedOperation()
  fullName: com.fasterxml.jackson.core.JsonParser._reportUnsupportedOperation()
- uid: com.fasterxml.jackson.core.JsonParser.getValueAsDouble()
  name: JsonParser.getValueAsDouble()
  nameWithType: JsonParser.getValueAsDouble()
  fullName: com.fasterxml.jackson.core.JsonParser.getValueAsDouble()
- uid: com.fasterxml.jackson.core.JsonParser.hasTextCharacters()
  name: JsonParser.hasTextCharacters()
  nameWithType: JsonParser.hasTextCharacters()
  fullName: com.fasterxml.jackson.core.JsonParser.hasTextCharacters()
- uid: com.fasterxml.jackson.core.JsonParser.hasToken(com.fasterxml.jackson.core.JsonToken)
  name: JsonParser.hasToken(JsonToken)
  nameWithType: JsonParser.hasToken(JsonToken)
  fullName: com.fasterxml.jackson.core.JsonParser.hasToken(com.fasterxml.jackson.core.JsonToken)
- uid: com.fasterxml.jackson.core.JsonParser.overrideCurrentName(java.lang.String)
  name: JsonParser.overrideCurrentName(String)
  nameWithType: JsonParser.overrideCurrentName(String)
  fullName: com.fasterxml.jackson.core.JsonParser.overrideCurrentName(java.lang.String)
- uid: com.fasterxml.jackson.core.JsonParser.nextToken()
  name: JsonParser.nextToken()
  nameWithType: JsonParser.nextToken()
  fullName: com.fasterxml.jackson.core.JsonParser.nextToken()
- uid: com.fasterxml.jackson.core.JsonParser.close()
  name: JsonParser.close()
  nameWithType: JsonParser.close()
  fullName: com.fasterxml.jackson.core.JsonParser.close()
- uid: com.fasterxml.jackson.core.JsonParser.getDoubleValue()
  name: JsonParser.getDoubleValue()
  nameWithType: JsonParser.getDoubleValue()
  fullName: com.fasterxml.jackson.core.JsonParser.getDoubleValue()
- uid: com.fasterxml.jackson.core.JsonParser.nextBooleanValue()
  name: JsonParser.nextBooleanValue()
  nameWithType: JsonParser.nextBooleanValue()
  fullName: com.fasterxml.jackson.core.JsonParser.nextBooleanValue()
- uid: com.fasterxml.jackson.core.JsonParser.<T>readValueAsTree()
  name: JsonParser.<T>readValueAsTree()
  nameWithType: JsonParser.<T>readValueAsTree()
  fullName: com.fasterxml.jackson.core.JsonParser.<T>readValueAsTree()
- uid: com.fasterxml.jackson.core.JsonParser.getTypeId()
  name: JsonParser.getTypeId()
  nameWithType: JsonParser.getTypeId()
  fullName: com.fasterxml.jackson.core.JsonParser.getTypeId()
- uid: com.fasterxml.jackson.core.JsonParser.isExpectedStartArrayToken()
  name: JsonParser.isExpectedStartArrayToken()
  nameWithType: JsonParser.isExpectedStartArrayToken()
  fullName: com.fasterxml.jackson.core.JsonParser.isExpectedStartArrayToken()
- uid: com.fasterxml.jackson.core.JsonParser.getEmbeddedObject()
  name: JsonParser.getEmbeddedObject()
  nameWithType: JsonParser.getEmbeddedObject()
  fullName: com.fasterxml.jackson.core.JsonParser.getEmbeddedObject()
- uid: com.fasterxml.jackson.core.JsonParser.version()
  name: JsonParser.version()
  nameWithType: JsonParser.version()
  fullName: com.fasterxml.jackson.core.JsonParser.version()
- uid: com.fasterxml.jackson.core.JsonParser.nextIntValue(int)
  name: JsonParser.nextIntValue(int)
  nameWithType: JsonParser.nextIntValue(int)
  fullName: com.fasterxml.jackson.core.JsonParser.nextIntValue(int)
- uid: com.fasterxml.jackson.core.JsonParser.overrideStdFeatures(int,int)
  name: JsonParser.overrideStdFeatures(int,int)
  nameWithType: JsonParser.overrideStdFeatures(int,int)
  fullName: com.fasterxml.jackson.core.JsonParser.overrideStdFeatures(int,int)
- uid: com.fasterxml.jackson.core.JsonParser.setFeatureMask(int)
  name: JsonParser.setFeatureMask(int)
  nameWithType: JsonParser.setFeatureMask(int)
  fullName: com.fasterxml.jackson.core.JsonParser.setFeatureMask(int)
- uid: com.fasterxml.jackson.core.JsonParser.canUseSchema(com.fasterxml.jackson.core.FormatSchema)
  name: JsonParser.canUseSchema(FormatSchema)
  nameWithType: JsonParser.canUseSchema(FormatSchema)
  fullName: com.fasterxml.jackson.core.JsonParser.canUseSchema(com.fasterxml.jackson.core.FormatSchema)
- uid: java.lang.Object.clone()
  name: Object.clone()
  nameWithType: Object.clone()
  fullName: java.lang.Object.clone()
- uid: com.fasterxml.jackson.core.JsonParser.<T>readValueAs(java.lang.Class<T>)
  name: JsonParser.<T>readValueAs(Class<T>)
  nameWithType: JsonParser.<T>readValueAs(Class<T>)
  fullName: com.fasterxml.jackson.core.JsonParser.<T>readValueAs(java.lang.Class<T>)
- uid: com.fasterxml.jackson.core.JsonParser.getCurrentValue()
  name: JsonParser.getCurrentValue()
  nameWithType: JsonParser.getCurrentValue()
  fullName: com.fasterxml.jackson.core.JsonParser.getCurrentValue()
- uid: com.fasterxml.jackson.core.JsonParser.setRequestPayloadOnError(com.fasterxml.jackson.core.util.RequestPayload)
  name: JsonParser.setRequestPayloadOnError(RequestPayload)
  nameWithType: JsonParser.setRequestPayloadOnError(RequestPayload)
  fullName: com.fasterxml.jackson.core.JsonParser.setRequestPayloadOnError(com.fasterxml.jackson.core.util.RequestPayload)
- uid: com.fasterxml.jackson.core.JsonParser.isExpectedStartObjectToken()
  name: JsonParser.isExpectedStartObjectToken()
  nameWithType: JsonParser.isExpectedStartObjectToken()
  fullName: com.fasterxml.jackson.core.JsonParser.isExpectedStartObjectToken()
- uid: com.fasterxml.jackson.core.JsonParser.releaseBuffered(java.io.OutputStream)
  name: JsonParser.releaseBuffered(OutputStream)
  nameWithType: JsonParser.releaseBuffered(OutputStream)
  fullName: com.fasterxml.jackson.core.JsonParser.releaseBuffered(java.io.OutputStream)
- uid: com.fasterxml.jackson.core.JsonParser.isEnabled(com.fasterxml.jackson.core.JsonParser.Feature)
  name: JsonParser.isEnabled(JsonParser.Feature)
  nameWithType: JsonParser.isEnabled(JsonParser.Feature)
  fullName: com.fasterxml.jackson.core.JsonParser.isEnabled(com.fasterxml.jackson.core.JsonParser.Feature)
- uid: com.fasterxml.jackson.core.JsonParser.currentTokenId()
  name: JsonParser.currentTokenId()
  nameWithType: JsonParser.currentTokenId()
  fullName: com.fasterxml.jackson.core.JsonParser.currentTokenId()
- uid: com.fasterxml.jackson.core.JsonParser.getText(java.io.Writer)
  name: JsonParser.getText(Writer)
  nameWithType: JsonParser.getText(Writer)
  fullName: com.fasterxml.jackson.core.JsonParser.getText(java.io.Writer)
- uid: com.fasterxml.jackson.core.JsonParser.currentToken()
  name: JsonParser.currentToken()
  nameWithType: JsonParser.currentToken()
  fullName: com.fasterxml.jackson.core.JsonParser.currentToken()
- uid: com.fasterxml.jackson.core.JsonParser.nextFieldName()
  name: JsonParser.nextFieldName()
  nameWithType: JsonParser.nextFieldName()
  fullName: com.fasterxml.jackson.core.JsonParser.nextFieldName()
- uid: com.fasterxml.jackson.core.JsonParser.getValueAsInt()
  name: JsonParser.getValueAsInt()
  nameWithType: JsonParser.getValueAsInt()
  fullName: com.fasterxml.jackson.core.JsonParser.getValueAsInt()
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: com.fasterxml.jackson.core.JsonParser.getCurrentTokenId()
  name: JsonParser.getCurrentTokenId()
  nameWithType: JsonParser.getCurrentTokenId()
  fullName: com.fasterxml.jackson.core.JsonParser.getCurrentTokenId()
- uid: com.fasterxml.jackson.core.JsonParser._codec()
  name: JsonParser._codec()
  nameWithType: JsonParser._codec()
  fullName: com.fasterxml.jackson.core.JsonParser._codec()
- uid: com.fasterxml.jackson.core.JsonParser.nextTextValue()
  name: JsonParser.nextTextValue()
  nameWithType: JsonParser.nextTextValue()
  fullName: com.fasterxml.jackson.core.JsonParser.nextTextValue()
- uid: com.fasterxml.jackson.core.JsonParser.getValueAsInt(int)
  name: JsonParser.getValueAsInt(int)
  nameWithType: JsonParser.getValueAsInt(int)
  fullName: com.fasterxml.jackson.core.JsonParser.getValueAsInt(int)
- uid: com.fasterxml.jackson.core.JsonParser.readBinaryValue(com.fasterxml.jackson.core.Base64Variant,java.io.OutputStream)
  name: JsonParser.readBinaryValue(Base64Variant,OutputStream)
  nameWithType: JsonParser.readBinaryValue(Base64Variant,OutputStream)
  fullName: com.fasterxml.jackson.core.JsonParser.readBinaryValue(com.fasterxml.jackson.core.Base64Variant,java.io.OutputStream)
- uid: com.fasterxml.jackson.core.JsonParser.getBigIntegerValue()
  name: JsonParser.getBigIntegerValue()
  nameWithType: JsonParser.getBigIntegerValue()
  fullName: com.fasterxml.jackson.core.JsonParser.getBigIntegerValue()
- uid: com.fasterxml.jackson.core.JsonParser.finishToken()
  name: JsonParser.finishToken()
  nameWithType: JsonParser.finishToken()
  fullName: com.fasterxml.jackson.core.JsonParser.finishToken()
- uid: com.fasterxml.jackson.core.JsonParser.nextLongValue(long)
  name: JsonParser.nextLongValue(long)
  nameWithType: JsonParser.nextLongValue(long)
  fullName: com.fasterxml.jackson.core.JsonParser.nextLongValue(long)
- uid: java.lang.Object.equals(java.lang.Object)
  name: Object.equals(Object)
  nameWithType: Object.equals(Object)
  fullName: java.lang.Object.equals(java.lang.Object)
- uid: com.fasterxml.jackson.core.JsonParser.getByteValue()
  name: JsonParser.getByteValue()
  nameWithType: JsonParser.getByteValue()
  fullName: com.fasterxml.jackson.core.JsonParser.getByteValue()
- uid: com.fasterxml.jackson.core.JsonParser.clearCurrentToken()
  name: JsonParser.clearCurrentToken()
  nameWithType: JsonParser.clearCurrentToken()
  fullName: com.fasterxml.jackson.core.JsonParser.clearCurrentToken()
- uid: com.fasterxml.jackson.core.JsonParser.getNonBlockingInputFeeder()
  name: JsonParser.getNonBlockingInputFeeder()
  nameWithType: JsonParser.getNonBlockingInputFeeder()
  fullName: com.fasterxml.jackson.core.JsonParser.getNonBlockingInputFeeder()
- uid: java.lang.Object.toString()
  name: Object.toString()
  nameWithType: Object.toString()
  fullName: java.lang.Object.toString()
- uid: com.fasterxml.jackson.core.JsonParser.isNaN()
  name: JsonParser.isNaN()
  nameWithType: JsonParser.isNaN()
  fullName: com.fasterxml.jackson.core.JsonParser.isNaN()
- uid: com.fasterxml.jackson.core.JsonParser.getNumberValue()
  name: JsonParser.getNumberValue()
  nameWithType: JsonParser.getNumberValue()
  fullName: com.fasterxml.jackson.core.JsonParser.getNumberValue()
- uid: com.fasterxml.jackson.core.JsonParser.getSchema()
  name: JsonParser.getSchema()
  nameWithType: JsonParser.getSchema()
  fullName: com.fasterxml.jackson.core.JsonParser.getSchema()
- uid: com.fasterxml.jackson.core.JsonParser.getValueAsLong(long)
  name: JsonParser.getValueAsLong(long)
  nameWithType: JsonParser.getValueAsLong(long)
  fullName: com.fasterxml.jackson.core.JsonParser.getValueAsLong(long)
- uid: com.fasterxml.jackson.core.JsonParser.hasCurrentToken()
  name: JsonParser.hasCurrentToken()
  nameWithType: JsonParser.hasCurrentToken()
  fullName: com.fasterxml.jackson.core.JsonParser.hasCurrentToken()
- uid: com.fasterxml.jackson.core.JsonParser.getValueAsLong()
  name: JsonParser.getValueAsLong()
  nameWithType: JsonParser.getValueAsLong()
  fullName: com.fasterxml.jackson.core.JsonParser.getValueAsLong()
- uid: com.fasterxml.jackson.core.JsonParser.configure(com.fasterxml.jackson.core.JsonParser.Feature,boolean)
  name: JsonParser.configure(JsonParser.Feature,boolean)
  nameWithType: JsonParser.configure(JsonParser.Feature,boolean)
  fullName: com.fasterxml.jackson.core.JsonParser.configure(com.fasterxml.jackson.core.JsonParser.Feature,boolean)
- uid: com.fasterxml.jackson.core.JsonParser.getTextOffset()
  name: JsonParser.getTextOffset()
  nameWithType: JsonParser.getTextOffset()
  fullName: com.fasterxml.jackson.core.JsonParser.getTextOffset()
- uid: com.fasterxml.jackson.core.JsonParser.<T>readValuesAs(com.fasterxml.jackson.core.type.TypeReference<T>)
  name: JsonParser.<T>readValuesAs(TypeReference<T>)
  nameWithType: JsonParser.<T>readValuesAs(TypeReference<T>)
  fullName: com.fasterxml.jackson.core.JsonParser.<T>readValuesAs(com.fasterxml.jackson.core.type.TypeReference<T>)
- uid: com.fasterxml.jackson.core.JsonParser.getFloatValue()
  name: JsonParser.getFloatValue()
  nameWithType: JsonParser.getFloatValue()
  fullName: com.fasterxml.jackson.core.JsonParser.getFloatValue()
- uid: com.fasterxml.jackson.core.JsonParser.overrideFormatFeatures(int,int)
  name: JsonParser.overrideFormatFeatures(int,int)
  nameWithType: JsonParser.overrideFormatFeatures(int,int)
  fullName: com.fasterxml.jackson.core.JsonParser.overrideFormatFeatures(int,int)
- uid: com.fasterxml.jackson.core.JsonParser.getLongValue()
  name: JsonParser.getLongValue()
  nameWithType: JsonParser.getLongValue()
  fullName: com.fasterxml.jackson.core.JsonParser.getLongValue()
- uid: com.fasterxml.jackson.core.JsonParser.getFeatureMask()
  name: JsonParser.getFeatureMask()
  nameWithType: JsonParser.getFeatureMask()
  fullName: com.fasterxml.jackson.core.JsonParser.getFeatureMask()
- uid: java.lang.Object.hashCode()
  name: Object.hashCode()
  nameWithType: Object.hashCode()
  fullName: java.lang.Object.hashCode()
- uid: com.fasterxml.jackson.core.JsonParser.enable(com.fasterxml.jackson.core.JsonParser.Feature)
  name: JsonParser.enable(JsonParser.Feature)
  nameWithType: JsonParser.enable(JsonParser.Feature)
  fullName: com.fasterxml.jackson.core.JsonParser.enable(com.fasterxml.jackson.core.JsonParser.Feature)
- uid: com.fasterxml.jackson.core.JsonParser.setSchema(com.fasterxml.jackson.core.FormatSchema)
  name: JsonParser.setSchema(FormatSchema)
  nameWithType: JsonParser.setSchema(FormatSchema)
  fullName: com.fasterxml.jackson.core.JsonParser.setSchema(com.fasterxml.jackson.core.FormatSchema)
- uid: com.fasterxml.jackson.core.JsonParser.setCurrentValue(java.lang.Object)
  name: JsonParser.setCurrentValue(Object)
  nameWithType: JsonParser.setCurrentValue(Object)
  fullName: com.fasterxml.jackson.core.JsonParser.setCurrentValue(java.lang.Object)
- uid: com.fasterxml.jackson.core.JsonParser.getValueAsBoolean()
  name: JsonParser.getValueAsBoolean()
  nameWithType: JsonParser.getValueAsBoolean()
  fullName: com.fasterxml.jackson.core.JsonParser.getValueAsBoolean()
- uid: com.fasterxml.jackson.core.JsonParser.nextFieldName(com.fasterxml.jackson.core.SerializableString)
  name: JsonParser.nextFieldName(SerializableString)
  nameWithType: JsonParser.nextFieldName(SerializableString)
  fullName: com.fasterxml.jackson.core.JsonParser.nextFieldName(com.fasterxml.jackson.core.SerializableString)
- uid: com.fasterxml.jackson.core.JsonParser.skipChildren()
  name: JsonParser.skipChildren()
  nameWithType: JsonParser.skipChildren()
  fullName: com.fasterxml.jackson.core.JsonParser.skipChildren()
- uid: com.fasterxml.jackson.core.JsonParser.getValueAsBoolean(boolean)
  name: JsonParser.getValueAsBoolean(boolean)
  nameWithType: JsonParser.getValueAsBoolean(boolean)
  fullName: com.fasterxml.jackson.core.JsonParser.getValueAsBoolean(boolean)
- uid: com.fasterxml.jackson.core.JsonParser.getLastClearedToken()
  name: JsonParser.getLastClearedToken()
  nameWithType: JsonParser.getLastClearedToken()
  fullName: com.fasterxml.jackson.core.JsonParser.getLastClearedToken()
- uid: com.fasterxml.jackson.core.JsonParser.getShortValue()
  name: JsonParser.getShortValue()
  nameWithType: JsonParser.getShortValue()
  fullName: com.fasterxml.jackson.core.JsonParser.getShortValue()
- uid: com.fasterxml.jackson.core.JsonParser.setRequestPayloadOnError(byte[],java.lang.String)
  name: JsonParser.setRequestPayloadOnError(byte[],String)
  nameWithType: JsonParser.setRequestPayloadOnError(byte[],String)
  fullName: com.fasterxml.jackson.core.JsonParser.setRequestPayloadOnError(byte[],java.lang.String)
- uid: com.fasterxml.jackson.core.JsonParser.getTokenLocation()
  name: JsonParser.getTokenLocation()
  nameWithType: JsonParser.getTokenLocation()
  fullName: com.fasterxml.jackson.core.JsonParser.getTokenLocation()
- uid: com.fasterxml.jackson.core.JsonParser.releaseBuffered(java.io.Writer)
  name: JsonParser.releaseBuffered(Writer)
  nameWithType: JsonParser.releaseBuffered(Writer)
  fullName: com.fasterxml.jackson.core.JsonParser.releaseBuffered(java.io.Writer)
- uid: com.fasterxml.jackson.core.JsonParser.getDecimalValue()
  name: JsonParser.getDecimalValue()
  nameWithType: JsonParser.getDecimalValue()
  fullName: com.fasterxml.jackson.core.JsonParser.getDecimalValue()
- uid: com.fasterxml.jackson.core.JsonParser.getTextLength()
  name: JsonParser.getTextLength()
  nameWithType: JsonParser.getTextLength()
  fullName: com.fasterxml.jackson.core.JsonParser.getTextLength()
- uid: com.fasterxml.jackson.core.JsonParser._constructError(java.lang.String)
  name: JsonParser._constructError(String)
  nameWithType: JsonParser._constructError(String)
  fullName: com.fasterxml.jackson.core.JsonParser._constructError(java.lang.String)
- uid: com.fasterxml.jackson.core.JsonParser.getFormatFeatures()
  name: JsonParser.getFormatFeatures()
  nameWithType: JsonParser.getFormatFeatures()
  fullName: com.fasterxml.jackson.core.JsonParser.getFormatFeatures()
- uid: com.fasterxml.jackson.core.JsonParser.
  name: JsonParser.
  nameWithType: JsonParser.
  fullName: com.fasterxml.jackson.core.JsonParser.
- uid: T>readValueAs(com.fasterxml.jackson.core.type.TypeReference
  name: T>readValueAs(TypeReference
  nameWithType: T>readValueAs(TypeReference
  fullName: T>readValueAs(com.fasterxml.jackson.core.type.TypeReference
- uid: ?>)
  name: ?>)
  nameWithType: ?>)
  fullName: ?>)
- uid: T>readValuesAs(java.lang.Class
  name: T>readValuesAs(Class
  nameWithType: T>readValuesAs(Class
  fullName: T>readValuesAs(java.lang.Class
- uid: T>)
  name: T>)
  nameWithType: T>)
  fullName: T>)
- uid: T>readValueAsTree()
  name: T>readValueAsTree()
  nameWithType: T>readValueAsTree()
  fullName: T>readValueAsTree()
- uid: T>readValueAs(java.lang.Class
  name: T>readValueAs(Class
  nameWithType: T>readValueAs(Class
  fullName: T>readValueAs(java.lang.Class
- uid: T>readValuesAs(com.fasterxml.jackson.core.type.TypeReference
  name: T>readValuesAs(TypeReference
  nameWithType: T>readValuesAs(TypeReference
  fullName: T>readValuesAs(com.fasterxml.jackson.core.type.TypeReference
