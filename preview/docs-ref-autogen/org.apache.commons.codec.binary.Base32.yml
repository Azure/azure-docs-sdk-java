### YamlMime:ManagedReference
items:
- uid: org.apache.commons.codec.binary.Base32
  id: Base32
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.apache.commons.codec.binary
  children:
  - org.apache.commons.codec.binary.Base32.Base32()
  - org.apache.commons.codec.binary.Base32.Base32(boolean)
  - org.apache.commons.codec.binary.Base32.Base32(boolean,byte)
  - org.apache.commons.codec.binary.Base32.Base32(byte)
  - org.apache.commons.codec.binary.Base32.Base32(int)
  - org.apache.commons.codec.binary.Base32.Base32(int,byte[])
  - org.apache.commons.codec.binary.Base32.Base32(int,byte[],boolean)
  - org.apache.commons.codec.binary.Base32.Base32(int,byte[],boolean,byte)
  - org.apache.commons.codec.binary.Base32.isInAlphabet(byte)
  langs:
  - java
  name: Base32
  nameWithType: Base32
  fullName: org.apache.commons.codec.binary.Base32
  type: Class
  package: org.apache.commons.codec.binary
  summary: >-
    Provides Base32 encoding and decoding as defined by [RFC 4648][].


    The class can be parameterized in the following manner with various constructors:

     *  Whether to use the "base32hex" variant instead of the default "base32"
     *  Line length: Default 76. Line length that aren't multiples of 8 will still essentially end up being multiples of 8 in the encoded data.
     *  Line separator: Default is CRLF ("\\r\\n")

    This class operates directly on byte streams, and not character streams.


    This class is thread-safe.



    [RFC 4648]: http://www.ietf.org/rfc/rfc4648.txt
  syntax:
    content: public class Base32 extends BaseNCodec
  inheritance:
  - java.lang.Object
  - org.apache.commons.codec.binary.BaseNCodec
  inheritedMembers:
  - java.lang.Object.clone()
  - java.lang.Object.equals(java.lang.Object)
  - java.lang.Object.finalize()
  - java.lang.Object.getClass()
  - java.lang.Object.hashCode()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.toString()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
  - org.apache.commons.codec.binary.BaseNCodec.containsAlphabetOrPad(byte[])
  - org.apache.commons.codec.binary.BaseNCodec.decode(byte[])
  - org.apache.commons.codec.binary.BaseNCodec.decode(java.lang.Object)
  - org.apache.commons.codec.binary.BaseNCodec.decode(java.lang.String)
  - org.apache.commons.codec.binary.BaseNCodec.encode(byte[])
  - org.apache.commons.codec.binary.BaseNCodec.encode(byte[],int,int)
  - org.apache.commons.codec.binary.BaseNCodec.encode(java.lang.Object)
  - org.apache.commons.codec.binary.BaseNCodec.encodeAsString(byte[])
  - org.apache.commons.codec.binary.BaseNCodec.encodeToString(byte[])
  - org.apache.commons.codec.binary.BaseNCodec.ensureBufferSize(int,org.apache.commons.codec.binary.BaseNCodec.Context)
  - org.apache.commons.codec.binary.BaseNCodec.getDefaultBufferSize()
  - org.apache.commons.codec.binary.BaseNCodec.getEncodedLength(byte[])
  - org.apache.commons.codec.binary.BaseNCodec.isInAlphabet(byte)
  - org.apache.commons.codec.binary.BaseNCodec.isInAlphabet(byte[],boolean)
  - org.apache.commons.codec.binary.BaseNCodec.isInAlphabet(java.lang.String)
  - org.apache.commons.codec.binary.BaseNCodec.isWhiteSpace(byte)
- uid: org.apache.commons.codec.binary.Base32.Base32()
  id: Base32()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.apache.commons.codec.binary.Base32
  langs:
  - java
  name: Base32()
  nameWithType: Base32.Base32()
  fullName: org.apache.commons.codec.binary.Base32.Base32()
  overload: org.apache.commons.codec.binary.Base32.Base32*
  type: Constructor
  package: org.apache.commons.codec.binary
  summary: >-
    Creates a Base32 codec used for decoding and encoding.


    When encoding the line length is 0 (no chunking).
  syntax:
    content: public Base32()
- uid: org.apache.commons.codec.binary.Base32.Base32(boolean)
  id: Base32(boolean)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.apache.commons.codec.binary.Base32
  langs:
  - java
  name: Base32(boolean useHex)
  nameWithType: Base32.Base32(boolean useHex)
  fullName: org.apache.commons.codec.binary.Base32.Base32(boolean useHex)
  overload: org.apache.commons.codec.binary.Base32.Base32*
  type: Constructor
  package: org.apache.commons.codec.binary
  summary: >-
    Creates a Base32 codec used for decoding and encoding.


    When encoding the line length is 0 (no chunking).
  syntax:
    content: public Base32(boolean useHex)
    parameters:
    - id: useHex
      type: boolean
      description: if <code>true</code> then use Base32 Hex alphabet
- uid: org.apache.commons.codec.binary.Base32.Base32(boolean,byte)
  id: Base32(boolean,byte)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.apache.commons.codec.binary.Base32
  langs:
  - java
  name: Base32(boolean useHex, byte pad)
  nameWithType: Base32.Base32(boolean useHex, byte pad)
  fullName: org.apache.commons.codec.binary.Base32.Base32(boolean useHex, byte pad)
  overload: org.apache.commons.codec.binary.Base32.Base32*
  type: Constructor
  package: org.apache.commons.codec.binary
  summary: >-
    Creates a Base32 codec used for decoding and encoding.


    When encoding the line length is 0 (no chunking).
  syntax:
    content: public Base32(boolean useHex, byte pad)
    parameters:
    - id: useHex
      type: boolean
      description: if <code>true</code> then use Base32 Hex alphabet
    - id: pad
      type: byte
      description: byte used as padding byte.
- uid: org.apache.commons.codec.binary.Base32.Base32(byte)
  id: Base32(byte)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.apache.commons.codec.binary.Base32
  langs:
  - java
  name: Base32(byte pad)
  nameWithType: Base32.Base32(byte pad)
  fullName: org.apache.commons.codec.binary.Base32.Base32(byte pad)
  overload: org.apache.commons.codec.binary.Base32.Base32*
  type: Constructor
  package: org.apache.commons.codec.binary
  summary: >-
    Creates a Base32 codec used for decoding and encoding.


    When encoding the line length is 0 (no chunking).
  syntax:
    content: public Base32(byte pad)
    parameters:
    - id: pad
      type: byte
      description: byte used as padding byte.
- uid: org.apache.commons.codec.binary.Base32.Base32(int)
  id: Base32(int)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.apache.commons.codec.binary.Base32
  langs:
  - java
  name: Base32(int lineLength)
  nameWithType: Base32.Base32(int lineLength)
  fullName: org.apache.commons.codec.binary.Base32.Base32(int lineLength)
  overload: org.apache.commons.codec.binary.Base32.Base32*
  type: Constructor
  package: org.apache.commons.codec.binary
  summary: >-
    Creates a Base32 codec used for decoding and encoding.


    When encoding the line length is given in the constructor, the line separator is CRLF.
  syntax:
    content: public Base32(int lineLength)
    parameters:
    - id: lineLength
      type: int
      description: >-
        Each line of encoded data will be at most of the given length (rounded down to nearest multiple of
                    8). If lineLength &lt;= 0, then the output will not be divided into lines (chunks). Ignored when
                    decoding.
- uid: org.apache.commons.codec.binary.Base32.Base32(int,byte[])
  id: Base32(int,byte[])
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.apache.commons.codec.binary.Base32
  langs:
  - java
  name: Base32(int lineLength, byte[] lineSeparator)
  nameWithType: Base32.Base32(int lineLength, byte[] lineSeparator)
  fullName: org.apache.commons.codec.binary.Base32.Base32(int lineLength, byte[] lineSeparator)
  overload: org.apache.commons.codec.binary.Base32.Base32*
  type: Constructor
  package: org.apache.commons.codec.binary
  summary: >-
    Creates a Base32 codec used for decoding and encoding.


    When encoding the line length and line separator are given in the constructor.


    Line lengths that aren't multiples of 8 will still essentially end up being multiples of 8 in the encoded data.
  syntax:
    content: public Base32(int lineLength, byte[] lineSeparator)
    parameters:
    - id: lineLength
      type: int
      description: >-
        Each line of encoded data will be at most of the given length (rounded down to nearest multiple of
                    8). If lineLength &lt;= 0, then the output will not be divided into lines (chunks). Ignored when
                    decoding.
    - id: lineSeparator
      type: byte[]
      description: Each line of encoded data will end with this sequence of bytes.
- uid: org.apache.commons.codec.binary.Base32.Base32(int,byte[],boolean)
  id: Base32(int,byte[],boolean)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.apache.commons.codec.binary.Base32
  langs:
  - java
  name: Base32(int lineLength, byte[] lineSeparator, boolean useHex)
  nameWithType: Base32.Base32(int lineLength, byte[] lineSeparator, boolean useHex)
  fullName: org.apache.commons.codec.binary.Base32.Base32(int lineLength, byte[] lineSeparator, boolean useHex)
  overload: org.apache.commons.codec.binary.Base32.Base32*
  type: Constructor
  package: org.apache.commons.codec.binary
  summary: >-
    Creates a Base32 / Base32 Hex codec used for decoding and encoding.


    When encoding the line length and line separator are given in the constructor.


    Line lengths that aren't multiples of 8 will still essentially end up being multiples of 8 in the encoded data.
  syntax:
    content: public Base32(int lineLength, byte[] lineSeparator, boolean useHex)
    parameters:
    - id: lineLength
      type: int
      description: >-
        Each line of encoded data will be at most of the given length (rounded down to nearest multiple of
                    8). If lineLength &lt;= 0, then the output will not be divided into lines (chunks). Ignored when
                    decoding.
    - id: lineSeparator
      type: byte[]
      description: Each line of encoded data will end with this sequence of bytes.
    - id: useHex
      type: boolean
      description: if <code>true</code>, then use Base32 Hex alphabet, otherwise use Base32 alphabet
- uid: org.apache.commons.codec.binary.Base32.Base32(int,byte[],boolean,byte)
  id: Base32(int,byte[],boolean,byte)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.apache.commons.codec.binary.Base32
  langs:
  - java
  name: Base32(int lineLength, byte[] lineSeparator, boolean useHex, byte pad)
  nameWithType: Base32.Base32(int lineLength, byte[] lineSeparator, boolean useHex, byte pad)
  fullName: org.apache.commons.codec.binary.Base32.Base32(int lineLength, byte[] lineSeparator, boolean useHex, byte pad)
  overload: org.apache.commons.codec.binary.Base32.Base32*
  type: Constructor
  package: org.apache.commons.codec.binary
  summary: >-
    Creates a Base32 / Base32 Hex codec used for decoding and encoding.


    When encoding the line length and line separator are given in the constructor.


    Line lengths that aren't multiples of 8 will still essentially end up being multiples of 8 in the encoded data.
  syntax:
    content: public Base32(int lineLength, byte[] lineSeparator, boolean useHex, byte pad)
    parameters:
    - id: lineLength
      type: int
      description: >-
        Each line of encoded data will be at most of the given length (rounded down to nearest multiple of
                    8). If lineLength &lt;= 0, then the output will not be divided into lines (chunks). Ignored when
                    decoding.
    - id: lineSeparator
      type: byte[]
      description: Each line of encoded data will end with this sequence of bytes.
    - id: useHex
      type: boolean
      description: if <code>true</code>, then use Base32 Hex alphabet, otherwise use Base32 alphabet
    - id: pad
      type: byte
      description: byte used as padding byte.
- uid: org.apache.commons.codec.binary.Base32.isInAlphabet(byte)
  id: isInAlphabet(byte)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.apache.commons.codec.binary.Base32
  langs:
  - java
  name: isInAlphabet(byte octet)
  nameWithType: Base32.isInAlphabet(byte octet)
  fullName: org.apache.commons.codec.binary.Base32.isInAlphabet(byte octet)
  overload: org.apache.commons.codec.binary.Base32.isInAlphabet*
  type: Method
  package: org.apache.commons.codec.binary
  summary: Returns whether or not the `octet` is in the Base32 alphabet.
  syntax:
    content: public boolean isInAlphabet(byte octet)
    parameters:
    - id: octet
      type: byte
      description: The value to test
    return:
      type: boolean
      description: <code>true</code> if the value is defined in the the Base32 alphabet <code>false</code> otherwise.
references:
- uid: org.apache.commons.codec.binary.Base32.Base32*
  name: Base32
  nameWithType: Base32.Base32
  fullName: org.apache.commons.codec.binary.Base32.Base32
  package: org.apache.commons.codec.binary
- uid: byte
  spec.java:
  - uid: byte
    name: byte
    fullName: byte
- uid: boolean
  spec.java:
  - uid: boolean
    name: boolean
    fullName: boolean
- uid: int
  spec.java:
  - uid: int
    name: int
    fullName: int
- uid: byte[]
  spec.java:
  - uid: byte
    name: byte
    fullName: byte
  - name: '[]'
    fullName: '[]'
- uid: org.apache.commons.codec.binary.Base32.isInAlphabet*
  name: isInAlphabet
  nameWithType: Base32.isInAlphabet
  fullName: org.apache.commons.codec.binary.Base32.isInAlphabet
  package: org.apache.commons.codec.binary
- uid: org.apache.commons.codec.binary.BaseNCodec
  name: BaseNCodec
  nameWithType: BaseNCodec
  fullName: org.apache.commons.codec.binary.BaseNCodec
- uid: org.apache.commons.codec.binary.BaseNCodec.encode(java.lang.Object)
  name: BaseNCodec.encode(Object)
  nameWithType: BaseNCodec.encode(Object)
  fullName: org.apache.commons.codec.binary.BaseNCodec.encode(java.lang.Object)
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: java.lang.Object.finalize()
  name: Object.finalize()
  nameWithType: Object.finalize()
  fullName: java.lang.Object.finalize()
- uid: org.apache.commons.codec.binary.BaseNCodec.decode(java.lang.String)
  name: BaseNCodec.decode(String)
  nameWithType: BaseNCodec.decode(String)
  fullName: org.apache.commons.codec.binary.BaseNCodec.decode(java.lang.String)
- uid: java.lang.Object.clone()
  name: Object.clone()
  nameWithType: Object.clone()
  fullName: java.lang.Object.clone()
- uid: org.apache.commons.codec.binary.BaseNCodec.encodeAsString(byte[])
  name: BaseNCodec.encodeAsString(byte[])
  nameWithType: BaseNCodec.encodeAsString(byte[])
  fullName: org.apache.commons.codec.binary.BaseNCodec.encodeAsString(byte[])
- uid: org.apache.commons.codec.binary.BaseNCodec.getDefaultBufferSize()
  name: BaseNCodec.getDefaultBufferSize()
  nameWithType: BaseNCodec.getDefaultBufferSize()
  fullName: org.apache.commons.codec.binary.BaseNCodec.getDefaultBufferSize()
- uid: org.apache.commons.codec.binary.BaseNCodec.isWhiteSpace(byte)
  name: BaseNCodec.isWhiteSpace(byte)
  nameWithType: BaseNCodec.isWhiteSpace(byte)
  fullName: org.apache.commons.codec.binary.BaseNCodec.isWhiteSpace(byte)
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: org.apache.commons.codec.binary.BaseNCodec.decode(java.lang.Object)
  name: BaseNCodec.decode(Object)
  nameWithType: BaseNCodec.decode(Object)
  fullName: org.apache.commons.codec.binary.BaseNCodec.decode(java.lang.Object)
- uid: java.lang.Object.hashCode()
  name: Object.hashCode()
  nameWithType: Object.hashCode()
  fullName: java.lang.Object.hashCode()
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: org.apache.commons.codec.binary.BaseNCodec.encode(byte[])
  name: BaseNCodec.encode(byte[])
  nameWithType: BaseNCodec.encode(byte[])
  fullName: org.apache.commons.codec.binary.BaseNCodec.encode(byte[])
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: org.apache.commons.codec.binary.BaseNCodec.isInAlphabet(byte[],boolean)
  name: BaseNCodec.isInAlphabet(byte[],boolean)
  nameWithType: BaseNCodec.isInAlphabet(byte[],boolean)
  fullName: org.apache.commons.codec.binary.BaseNCodec.isInAlphabet(byte[],boolean)
- uid: org.apache.commons.codec.binary.BaseNCodec.isInAlphabet(byte)
  name: BaseNCodec.isInAlphabet(byte)
  nameWithType: BaseNCodec.isInAlphabet(byte)
  fullName: org.apache.commons.codec.binary.BaseNCodec.isInAlphabet(byte)
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: org.apache.commons.codec.binary.BaseNCodec.ensureBufferSize(int,org.apache.commons.codec.binary.BaseNCodec.Context)
  name: BaseNCodec.ensureBufferSize(int,BaseNCodec.Context)
  nameWithType: BaseNCodec.ensureBufferSize(int,BaseNCodec.Context)
  fullName: org.apache.commons.codec.binary.BaseNCodec.ensureBufferSize(int,org.apache.commons.codec.binary.BaseNCodec.Context)
- uid: java.lang.Object.equals(java.lang.Object)
  name: Object.equals(Object)
  nameWithType: Object.equals(Object)
  fullName: java.lang.Object.equals(java.lang.Object)
- uid: java.lang.Object.toString()
  name: Object.toString()
  nameWithType: Object.toString()
  fullName: java.lang.Object.toString()
- uid: org.apache.commons.codec.binary.BaseNCodec.encode(byte[],int,int)
  name: BaseNCodec.encode(byte[],int,int)
  nameWithType: BaseNCodec.encode(byte[],int,int)
  fullName: org.apache.commons.codec.binary.BaseNCodec.encode(byte[],int,int)
- uid: org.apache.commons.codec.binary.BaseNCodec.containsAlphabetOrPad(byte[])
  name: BaseNCodec.containsAlphabetOrPad(byte[])
  nameWithType: BaseNCodec.containsAlphabetOrPad(byte[])
  fullName: org.apache.commons.codec.binary.BaseNCodec.containsAlphabetOrPad(byte[])
- uid: org.apache.commons.codec.binary.BaseNCodec.isInAlphabet(java.lang.String)
  name: BaseNCodec.isInAlphabet(String)
  nameWithType: BaseNCodec.isInAlphabet(String)
  fullName: org.apache.commons.codec.binary.BaseNCodec.isInAlphabet(java.lang.String)
- uid: org.apache.commons.codec.binary.BaseNCodec.encodeToString(byte[])
  name: BaseNCodec.encodeToString(byte[])
  nameWithType: BaseNCodec.encodeToString(byte[])
  fullName: org.apache.commons.codec.binary.BaseNCodec.encodeToString(byte[])
- uid: org.apache.commons.codec.binary.BaseNCodec.getEncodedLength(byte[])
  name: BaseNCodec.getEncodedLength(byte[])
  nameWithType: BaseNCodec.getEncodedLength(byte[])
  fullName: org.apache.commons.codec.binary.BaseNCodec.getEncodedLength(byte[])
- uid: org.apache.commons.codec.binary.BaseNCodec.decode(byte[])
  name: BaseNCodec.decode(byte[])
  nameWithType: BaseNCodec.decode(byte[])
  fullName: org.apache.commons.codec.binary.BaseNCodec.decode(byte[])
