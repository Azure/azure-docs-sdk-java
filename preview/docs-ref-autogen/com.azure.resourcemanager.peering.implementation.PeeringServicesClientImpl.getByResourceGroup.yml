### YamlMime:JavaMember
uid: "com.azure.resourcemanager.peering.implementation.PeeringServicesClientImpl.getByResourceGroup*"
fullName: "com.azure.resourcemanager.peering.implementation.PeeringServicesClientImpl.getByResourceGroup"
name: "getByResourceGroup"
nameWithType: "PeeringServicesClientImpl.getByResourceGroup"
members:
- uid: "com.azure.resourcemanager.peering.implementation.PeeringServicesClientImpl.getByResourceGroup(java.lang.String,java.lang.String)"
  fullName: "com.azure.resourcemanager.peering.implementation.PeeringServicesClientImpl.getByResourceGroup(String resourceGroupName, String peeringServiceName)"
  name: "getByResourceGroup(String resourceGroupName, String peeringServiceName)"
  nameWithType: "PeeringServicesClientImpl.getByResourceGroup(String resourceGroupName, String peeringServiceName)"
  summary: "Gets an existing peering service with the specified name under the given subscription and resource group."
  parameters:
  - description: "The name of the resource group."
    name: "resourceGroupName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The name of the peering."
    name: "peeringServiceName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PeeringServiceInner getByResourceGroup(String resourceGroupName, String peeringServiceName)"
  returns:
    description: "an existing peering service with the specified name under the given subscription and resource group."
    type: "<xref href=\"com.azure.resourcemanager.peering.fluent.models.PeeringServiceInner?alt=com.azure.resourcemanager.peering.fluent.models.PeeringServiceInner&text=PeeringServiceInner\" data-throw-if-not-resolved=\"False\" />"
type: "method"
metadata: {}
package: "com.azure.resourcemanager.peering.implementation"
artifact: com.azure.resourcemanager:azure-resourcemanager-peering:1.0.0-beta.1
