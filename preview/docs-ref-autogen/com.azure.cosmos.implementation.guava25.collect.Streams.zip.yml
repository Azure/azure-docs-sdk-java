### YamlMime:JavaMember
uid: "com.azure.cosmos.implementation.guava25.collect.Streams.zip*"
fullName: "com.azure.cosmos.implementation.guava25.collect.Streams.<A,B,R>zip"
name: "<A,B,R>zip"
nameWithType: "Streams.<A,B,R>zip"
members:
- uid: "com.azure.cosmos.implementation.guava25.collect.Streams.<A,B,R>zip(java.util.stream.Stream<A>,java.util.stream.Stream<B>,java.util.function.BiFunction<? super A,? super B,R>)"
  fullName: "com.azure.cosmos.implementation.guava25.collect.Streams.<A,B,R>zip(Stream<A> streamA, Stream<B> streamB, BiFunction<? super A,? super B,R> function)"
  name: "<A,B,R>zip(Stream<A> streamA, Stream<B> streamB, BiFunction<? super A,? super B,R> function)"
  nameWithType: "Streams.<A,B,R>zip(Stream<A> streamA, Stream<B> streamB, BiFunction<? super A,? super B,R> function)"
  summary: "Returns a stream in which each element is the result of passing the corresponding elementY of each of `streamA` and `streamB` to `function`.\n\nFor example:\n\n```java\nStreams.zip(\n   Stream.of(\"foo1\", \"foo2\", \"foo3\"),\n   Stream.of(\"bar1\", \"bar2\"),\n   (arg1, arg2) -> arg1 + \":\" + arg2)\n```\n\nwill return `Stream.of(\"foo1:bar1\", \"foo2:bar2\")`.\n\nThe resulting stream will only be as long as the shorter of the two input streams; if one stream is longer, its extra elements will be ignored.\n\nNote that if you are calling <xref uid=\"java.util.stream.Stream.forEach\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Stream#forEach\"></xref> on the resulting stream, you might want to consider using <xref uid=\"com.azure.cosmos.implementation.guava25.collect.Streams.forEachPair\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#forEachPair\"></xref> instead of this method.\n\n**Performance note:** The resulting stream is not [efficiently splittable][]. This may harm parallel performance.\n\n\n[efficiently splittable]: http://gee.cs.oswego.edu/dl/html/StreamParallelGuidance.html"
  parameters:
  - name: "streamA"
    type: "<xref href=\"java.util.stream.Stream?alt=java.util.stream.Stream&text=Stream\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"A?alt=A&text=A\" data-throw-if-not-resolved=\"False\" />&gt;"
  - name: "streamB"
    type: "<xref href=\"java.util.stream.Stream?alt=java.util.stream.Stream&text=Stream\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"B?alt=B&text=B\" data-throw-if-not-resolved=\"False\" />&gt;"
  - name: "function"
    type: "<xref href=\"java.util.function.BiFunction?alt=java.util.function.BiFunction&text=BiFunction\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"? super A?alt=? super A&text=? super A\" data-throw-if-not-resolved=\"False\" />,<xref href=\"? super B?alt=? super B&text=? super B\" data-throw-if-not-resolved=\"False\" />,<xref href=\"R?alt=R&text=R\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public static Stream<R> <A,B,R>zip(Stream<A> streamA, Stream<B> streamB, BiFunction<? super A,? super B,R> function)"
  returns:
    type: "<xref href=\"java.util.stream.Stream?alt=java.util.stream.Stream&text=Stream\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"R?alt=R&text=R\" data-throw-if-not-resolved=\"False\" />&gt;"
type: "method"
metadata: {}
package: "com.azure.cosmos.implementation.guava25.collect"
artifact: com.azure:azure-cosmos:4.4.0-beta.1
