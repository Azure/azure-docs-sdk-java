### YamlMime:ManagedReference
items:
- uid: com.fasterxml.jackson.databind.jsontype.TypeSerializer
  id: TypeSerializer
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.jsontype
  children:
  - com.fasterxml.jackson.databind.jsontype.TypeSerializer.TypeSerializer()
  - com.fasterxml.jackson.databind.jsontype.TypeSerializer._writeLegacySuffix(com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.core.type.WritableTypeId)
  - com.fasterxml.jackson.databind.jsontype.TypeSerializer.forProperty(com.fasterxml.jackson.databind.BeanProperty)
  - com.fasterxml.jackson.databind.jsontype.TypeSerializer.getPropertyName()
  - com.fasterxml.jackson.databind.jsontype.TypeSerializer.getTypeIdResolver()
  - com.fasterxml.jackson.databind.jsontype.TypeSerializer.getTypeInclusion()
  - com.fasterxml.jackson.databind.jsontype.TypeSerializer.typeId(java.lang.Object,com.fasterxml.jackson.core.JsonToken)
  - com.fasterxml.jackson.databind.jsontype.TypeSerializer.typeId(java.lang.Object,com.fasterxml.jackson.core.JsonToken,java.lang.Object)
  - com.fasterxml.jackson.databind.jsontype.TypeSerializer.typeId(java.lang.Object,java.lang.Class<?>,com.fasterxml.jackson.core.JsonToken)
  - com.fasterxml.jackson.databind.jsontype.TypeSerializer.writeCustomTypePrefixForArray(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,java.lang.String)
  - com.fasterxml.jackson.databind.jsontype.TypeSerializer.writeCustomTypePrefixForObject(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,java.lang.String)
  - com.fasterxml.jackson.databind.jsontype.TypeSerializer.writeCustomTypePrefixForScalar(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,java.lang.String)
  - com.fasterxml.jackson.databind.jsontype.TypeSerializer.writeCustomTypeSuffixForArray(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,java.lang.String)
  - com.fasterxml.jackson.databind.jsontype.TypeSerializer.writeCustomTypeSuffixForObject(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,java.lang.String)
  - com.fasterxml.jackson.databind.jsontype.TypeSerializer.writeCustomTypeSuffixForScalar(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,java.lang.String)
  - com.fasterxml.jackson.databind.jsontype.TypeSerializer.writeTypePrefix(com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.core.type.WritableTypeId)
  - com.fasterxml.jackson.databind.jsontype.TypeSerializer.writeTypePrefixForArray(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator)
  - com.fasterxml.jackson.databind.jsontype.TypeSerializer.writeTypePrefixForArray(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,java.lang.Class<?>)
  - com.fasterxml.jackson.databind.jsontype.TypeSerializer.writeTypePrefixForObject(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator)
  - com.fasterxml.jackson.databind.jsontype.TypeSerializer.writeTypePrefixForObject(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,java.lang.Class<?>)
  - com.fasterxml.jackson.databind.jsontype.TypeSerializer.writeTypePrefixForScalar(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator)
  - com.fasterxml.jackson.databind.jsontype.TypeSerializer.writeTypePrefixForScalar(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,java.lang.Class<?>)
  - com.fasterxml.jackson.databind.jsontype.TypeSerializer.writeTypeSuffix(com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.core.type.WritableTypeId)
  - com.fasterxml.jackson.databind.jsontype.TypeSerializer.writeTypeSuffixForArray(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator)
  - com.fasterxml.jackson.databind.jsontype.TypeSerializer.writeTypeSuffixForObject(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator)
  - com.fasterxml.jackson.databind.jsontype.TypeSerializer.writeTypeSuffixForScalar(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator)
  langs:
  - java
  name: TypeSerializer
  nameWithType: TypeSerializer
  fullName: com.fasterxml.jackson.databind.jsontype.TypeSerializer
  type: Class
  package: com.fasterxml.jackson.databind.jsontype
  summary: >-
    Interface for serializing type information regarding instances of specified base type (super class), so that exact subtype can be properly deserialized later on. These instances are to be called by regular <xref uid="com.fasterxml.jackson.databind.JsonSerializer" data-throw-if-not-resolved="false">com.fasterxml.jackson.databind.JsonSerializer</xref>s using proper contextual calls, to add type information using mechanism type serializer was configured with.


    NOTE: version 2.9 contains significant attempt at simplifying interface, as well as giving format implementation (via <xref uid="com.fasterxml.jackson.core.JsonGenerator" data-throw-if-not-resolved="false">JsonGenerator</xref>) more control over actual serialization details. Minor changes are required to change call pattern so that return value of "prefix" write needs to be passed to "suffix" write.
  syntax:
    content: public abstract class TypeSerializer
  inheritance:
  - java.lang.Object
  inheritedMembers:
  - java.lang.Object.clone()
  - java.lang.Object.equals(java.lang.Object)
  - java.lang.Object.finalize()
  - java.lang.Object.getClass()
  - java.lang.Object.hashCode()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.toString()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
- uid: com.fasterxml.jackson.databind.jsontype.TypeSerializer.TypeSerializer()
  id: TypeSerializer()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.jsontype.TypeSerializer
  langs:
  - java
  name: TypeSerializer()
  nameWithType: TypeSerializer.TypeSerializer()
  fullName: com.fasterxml.jackson.databind.jsontype.TypeSerializer.TypeSerializer()
  overload: com.fasterxml.jackson.databind.jsontype.TypeSerializer.TypeSerializer*
  type: Constructor
  package: com.fasterxml.jackson.databind.jsontype
  syntax:
    content: public TypeSerializer()
- uid: com.fasterxml.jackson.databind.jsontype.TypeSerializer._writeLegacySuffix(com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.core.type.WritableTypeId)
  id: _writeLegacySuffix(com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.core.type.WritableTypeId)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.jsontype.TypeSerializer
  langs:
  - java
  name: _writeLegacySuffix(JsonGenerator g, WritableTypeId typeId)
  nameWithType: TypeSerializer._writeLegacySuffix(JsonGenerator g, WritableTypeId typeId)
  fullName: com.fasterxml.jackson.databind.jsontype.TypeSerializer._writeLegacySuffix(JsonGenerator g, WritableTypeId typeId)
  overload: com.fasterxml.jackson.databind.jsontype.TypeSerializer._writeLegacySuffix*
  type: Method
  package: com.fasterxml.jackson.databind.jsontype
  summary: 'Helper method needed for backwards compatibility: since original type id can not be routed through completely, we have to reverse-engineer likely setting before calling suffix.'
  syntax:
    content: protected final void _writeLegacySuffix(JsonGenerator g, WritableTypeId typeId)
    parameters:
    - id: g
      type: com.fasterxml.jackson.core.JsonGenerator
    - id: typeId
      type: com.fasterxml.jackson.core.type.WritableTypeId
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.databind.jsontype.TypeSerializer.forProperty(com.fasterxml.jackson.databind.BeanProperty)
  id: forProperty(com.fasterxml.jackson.databind.BeanProperty)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.jsontype.TypeSerializer
  langs:
  - java
  name: forProperty(BeanProperty prop)
  nameWithType: TypeSerializer.forProperty(BeanProperty prop)
  fullName: com.fasterxml.jackson.databind.jsontype.TypeSerializer.forProperty(BeanProperty prop)
  overload: com.fasterxml.jackson.databind.jsontype.TypeSerializer.forProperty*
  type: Method
  package: com.fasterxml.jackson.databind.jsontype
  summary: Method called to create contextual version, to be used for values of given property. This may be the type itself (as is the case for bean properties), or values contained (for <xref uid="java.util.Collection" data-throw-if-not-resolved="false">java.util.Collection</xref> or <xref uid="java.util.Map" data-throw-if-not-resolved="false">java.util.Map</xref> valued properties).
  syntax:
    content: public abstract TypeSerializer forProperty(BeanProperty prop)
    parameters:
    - id: prop
      type: com.fasterxml.jackson.databind.BeanProperty
    return:
      type: com.fasterxml.jackson.databind.jsontype.TypeSerializer
- uid: com.fasterxml.jackson.databind.jsontype.TypeSerializer.getPropertyName()
  id: getPropertyName()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.jsontype.TypeSerializer
  langs:
  - java
  name: getPropertyName()
  nameWithType: TypeSerializer.getPropertyName()
  fullName: com.fasterxml.jackson.databind.jsontype.TypeSerializer.getPropertyName()
  overload: com.fasterxml.jackson.databind.jsontype.TypeSerializer.getPropertyName*
  type: Method
  package: com.fasterxml.jackson.databind.jsontype
  summary: Name of property that contains type information, if property-based inclusion is used.
  syntax:
    content: public abstract String getPropertyName()
    return:
      type: java.lang.String
- uid: com.fasterxml.jackson.databind.jsontype.TypeSerializer.getTypeIdResolver()
  id: getTypeIdResolver()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.jsontype.TypeSerializer
  langs:
  - java
  name: getTypeIdResolver()
  nameWithType: TypeSerializer.getTypeIdResolver()
  fullName: com.fasterxml.jackson.databind.jsontype.TypeSerializer.getTypeIdResolver()
  overload: com.fasterxml.jackson.databind.jsontype.TypeSerializer.getTypeIdResolver*
  type: Method
  package: com.fasterxml.jackson.databind.jsontype
  summary: Accessor for object that handles conversions between types and matching type ids.
  syntax:
    content: public abstract TypeIdResolver getTypeIdResolver()
    return:
      type: com.fasterxml.jackson.databind.jsontype.TypeIdResolver
- uid: com.fasterxml.jackson.databind.jsontype.TypeSerializer.getTypeInclusion()
  id: getTypeInclusion()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.jsontype.TypeSerializer
  langs:
  - java
  name: getTypeInclusion()
  nameWithType: TypeSerializer.getTypeInclusion()
  fullName: com.fasterxml.jackson.databind.jsontype.TypeSerializer.getTypeInclusion()
  overload: com.fasterxml.jackson.databind.jsontype.TypeSerializer.getTypeInclusion*
  type: Method
  package: com.fasterxml.jackson.databind.jsontype
  summary: Accessor for type information inclusion method that serializer uses; indicates how type information is embedded in resulting JSON.
  syntax:
    content: public abstract JsonTypeInfo.As getTypeInclusion()
    return:
      type: com.fasterxml.jackson.annotation.JsonTypeInfo.As
- uid: com.fasterxml.jackson.databind.jsontype.TypeSerializer.typeId(java.lang.Object,com.fasterxml.jackson.core.JsonToken)
  id: typeId(java.lang.Object,com.fasterxml.jackson.core.JsonToken)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.jsontype.TypeSerializer
  langs:
  - java
  name: typeId(Object value, JsonToken valueShape)
  nameWithType: TypeSerializer.typeId(Object value, JsonToken valueShape)
  fullName: com.fasterxml.jackson.databind.jsontype.TypeSerializer.typeId(Object value, JsonToken valueShape)
  overload: com.fasterxml.jackson.databind.jsontype.TypeSerializer.typeId*
  type: Method
  package: com.fasterxml.jackson.databind.jsontype
  summary: Factory method for constructing type id value object to pass to <xref uid="com.fasterxml.jackson.databind.jsontype.TypeSerializer.writeTypePrefix*" data-throw-if-not-resolved="false">#writeTypePrefix</xref>.
  syntax:
    content: public WritableTypeId typeId(Object value, JsonToken valueShape)
    parameters:
    - id: value
      type: java.lang.Object
    - id: valueShape
      type: com.fasterxml.jackson.core.JsonToken
    return:
      type: com.fasterxml.jackson.core.type.WritableTypeId
- uid: com.fasterxml.jackson.databind.jsontype.TypeSerializer.typeId(java.lang.Object,com.fasterxml.jackson.core.JsonToken,java.lang.Object)
  id: typeId(java.lang.Object,com.fasterxml.jackson.core.JsonToken,java.lang.Object)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.jsontype.TypeSerializer
  langs:
  - java
  name: typeId(Object value, JsonToken valueShape, Object id)
  nameWithType: TypeSerializer.typeId(Object value, JsonToken valueShape, Object id)
  fullName: com.fasterxml.jackson.databind.jsontype.TypeSerializer.typeId(Object value, JsonToken valueShape, Object id)
  overload: com.fasterxml.jackson.databind.jsontype.TypeSerializer.typeId*
  type: Method
  package: com.fasterxml.jackson.databind.jsontype
  syntax:
    content: public WritableTypeId typeId(Object value, JsonToken valueShape, Object id)
    parameters:
    - id: value
      type: java.lang.Object
    - id: valueShape
      type: com.fasterxml.jackson.core.JsonToken
    - id: id
      type: java.lang.Object
    return:
      type: com.fasterxml.jackson.core.type.WritableTypeId
- uid: com.fasterxml.jackson.databind.jsontype.TypeSerializer.typeId(java.lang.Object,java.lang.Class<?>,com.fasterxml.jackson.core.JsonToken)
  id: typeId(java.lang.Object,java.lang.Class<?>,com.fasterxml.jackson.core.JsonToken)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.jsontype.TypeSerializer
  langs:
  - java
  name: typeId(Object value, Class<?> typeForId, JsonToken valueShape)
  nameWithType: TypeSerializer.typeId(Object value, Class<?> typeForId, JsonToken valueShape)
  fullName: com.fasterxml.jackson.databind.jsontype.TypeSerializer.typeId(Object value, Class<?> typeForId, JsonToken valueShape)
  overload: com.fasterxml.jackson.databind.jsontype.TypeSerializer.typeId*
  type: Method
  package: com.fasterxml.jackson.databind.jsontype
  syntax:
    content: public WritableTypeId typeId(Object value, Class<?> typeForId, JsonToken valueShape)
    parameters:
    - id: value
      type: java.lang.Object
    - id: typeForId
      type: java.lang.Class<?>
    - id: valueShape
      type: com.fasterxml.jackson.core.JsonToken
    return:
      type: com.fasterxml.jackson.core.type.WritableTypeId
- uid: com.fasterxml.jackson.databind.jsontype.TypeSerializer.writeCustomTypePrefixForArray(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,java.lang.String)
  id: writeCustomTypePrefixForArray(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,java.lang.String)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.jsontype.TypeSerializer
  langs:
  - java
  name: writeCustomTypePrefixForArray(Object value, JsonGenerator g, String typeId)
  nameWithType: TypeSerializer.writeCustomTypePrefixForArray(Object value, JsonGenerator g, String typeId)
  fullName: com.fasterxml.jackson.databind.jsontype.TypeSerializer.writeCustomTypePrefixForArray(Object value, JsonGenerator g, String typeId)
  overload: com.fasterxml.jackson.databind.jsontype.TypeSerializer.writeCustomTypePrefixForArray*
  type: Method
  package: com.fasterxml.jackson.databind.jsontype
  summary: 'DEPRECATED: now equivalent to: `writeTypePrefix(g, typeId(value, JsonToken.START_ARRAY, typeId));`. See <xref uid="com.fasterxml.jackson.databind.jsontype.TypeSerializer.writeTypePrefix*" data-throw-if-not-resolved="false">#writeTypePrefix</xref> for more info.'
  syntax:
    content: public void writeCustomTypePrefixForArray(Object value, JsonGenerator g, String typeId)
    parameters:
    - id: value
      type: java.lang.Object
    - id: g
      type: com.fasterxml.jackson.core.JsonGenerator
    - id: typeId
      type: java.lang.String
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.databind.jsontype.TypeSerializer.writeCustomTypePrefixForObject(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,java.lang.String)
  id: writeCustomTypePrefixForObject(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,java.lang.String)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.jsontype.TypeSerializer
  langs:
  - java
  name: writeCustomTypePrefixForObject(Object value, JsonGenerator g, String typeId)
  nameWithType: TypeSerializer.writeCustomTypePrefixForObject(Object value, JsonGenerator g, String typeId)
  fullName: com.fasterxml.jackson.databind.jsontype.TypeSerializer.writeCustomTypePrefixForObject(Object value, JsonGenerator g, String typeId)
  overload: com.fasterxml.jackson.databind.jsontype.TypeSerializer.writeCustomTypePrefixForObject*
  type: Method
  package: com.fasterxml.jackson.databind.jsontype
  summary: 'DEPRECATED: now equivalent to: `writeTypePrefix(g, typeId(value, JsonToken.START_OBJECT, typeId));`. See <xref uid="com.fasterxml.jackson.databind.jsontype.TypeSerializer.writeTypePrefix*" data-throw-if-not-resolved="false">#writeTypePrefix</xref> for more info.'
  syntax:
    content: public void writeCustomTypePrefixForObject(Object value, JsonGenerator g, String typeId)
    parameters:
    - id: value
      type: java.lang.Object
    - id: g
      type: com.fasterxml.jackson.core.JsonGenerator
    - id: typeId
      type: java.lang.String
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.databind.jsontype.TypeSerializer.writeCustomTypePrefixForScalar(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,java.lang.String)
  id: writeCustomTypePrefixForScalar(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,java.lang.String)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.jsontype.TypeSerializer
  langs:
  - java
  name: writeCustomTypePrefixForScalar(Object value, JsonGenerator g, String typeId)
  nameWithType: TypeSerializer.writeCustomTypePrefixForScalar(Object value, JsonGenerator g, String typeId)
  fullName: com.fasterxml.jackson.databind.jsontype.TypeSerializer.writeCustomTypePrefixForScalar(Object value, JsonGenerator g, String typeId)
  overload: com.fasterxml.jackson.databind.jsontype.TypeSerializer.writeCustomTypePrefixForScalar*
  type: Method
  package: com.fasterxml.jackson.databind.jsontype
  summary: 'DEPRECATED: now equivalent to: `writeTypePrefix(g, typeId(value, JsonToken.VALUE_STRING, typeId));`. See <xref uid="com.fasterxml.jackson.databind.jsontype.TypeSerializer.writeTypePrefix*" data-throw-if-not-resolved="false">#writeTypePrefix</xref> for more info.'
  syntax:
    content: public void writeCustomTypePrefixForScalar(Object value, JsonGenerator g, String typeId)
    parameters:
    - id: value
      type: java.lang.Object
    - id: g
      type: com.fasterxml.jackson.core.JsonGenerator
    - id: typeId
      type: java.lang.String
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.databind.jsontype.TypeSerializer.writeCustomTypeSuffixForArray(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,java.lang.String)
  id: writeCustomTypeSuffixForArray(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,java.lang.String)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.jsontype.TypeSerializer
  langs:
  - java
  name: writeCustomTypeSuffixForArray(Object value, JsonGenerator g, String typeId)
  nameWithType: TypeSerializer.writeCustomTypeSuffixForArray(Object value, JsonGenerator g, String typeId)
  fullName: com.fasterxml.jackson.databind.jsontype.TypeSerializer.writeCustomTypeSuffixForArray(Object value, JsonGenerator g, String typeId)
  overload: com.fasterxml.jackson.databind.jsontype.TypeSerializer.writeCustomTypeSuffixForArray*
  type: Method
  package: com.fasterxml.jackson.databind.jsontype
  syntax:
    content: public void writeCustomTypeSuffixForArray(Object value, JsonGenerator g, String typeId)
    parameters:
    - id: value
      type: java.lang.Object
    - id: g
      type: com.fasterxml.jackson.core.JsonGenerator
    - id: typeId
      type: java.lang.String
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.databind.jsontype.TypeSerializer.writeCustomTypeSuffixForObject(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,java.lang.String)
  id: writeCustomTypeSuffixForObject(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,java.lang.String)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.jsontype.TypeSerializer
  langs:
  - java
  name: writeCustomTypeSuffixForObject(Object value, JsonGenerator g, String typeId)
  nameWithType: TypeSerializer.writeCustomTypeSuffixForObject(Object value, JsonGenerator g, String typeId)
  fullName: com.fasterxml.jackson.databind.jsontype.TypeSerializer.writeCustomTypeSuffixForObject(Object value, JsonGenerator g, String typeId)
  overload: com.fasterxml.jackson.databind.jsontype.TypeSerializer.writeCustomTypeSuffixForObject*
  type: Method
  package: com.fasterxml.jackson.databind.jsontype
  syntax:
    content: public void writeCustomTypeSuffixForObject(Object value, JsonGenerator g, String typeId)
    parameters:
    - id: value
      type: java.lang.Object
    - id: g
      type: com.fasterxml.jackson.core.JsonGenerator
    - id: typeId
      type: java.lang.String
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.databind.jsontype.TypeSerializer.writeCustomTypeSuffixForScalar(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,java.lang.String)
  id: writeCustomTypeSuffixForScalar(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,java.lang.String)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.jsontype.TypeSerializer
  langs:
  - java
  name: writeCustomTypeSuffixForScalar(Object value, JsonGenerator g, String typeId)
  nameWithType: TypeSerializer.writeCustomTypeSuffixForScalar(Object value, JsonGenerator g, String typeId)
  fullName: com.fasterxml.jackson.databind.jsontype.TypeSerializer.writeCustomTypeSuffixForScalar(Object value, JsonGenerator g, String typeId)
  overload: com.fasterxml.jackson.databind.jsontype.TypeSerializer.writeCustomTypeSuffixForScalar*
  type: Method
  package: com.fasterxml.jackson.databind.jsontype
  syntax:
    content: public void writeCustomTypeSuffixForScalar(Object value, JsonGenerator g, String typeId)
    parameters:
    - id: value
      type: java.lang.Object
    - id: g
      type: com.fasterxml.jackson.core.JsonGenerator
    - id: typeId
      type: java.lang.String
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.databind.jsontype.TypeSerializer.writeTypePrefix(com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.core.type.WritableTypeId)
  id: writeTypePrefix(com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.core.type.WritableTypeId)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.jsontype.TypeSerializer
  langs:
  - java
  name: writeTypePrefix(JsonGenerator g, WritableTypeId typeId)
  nameWithType: TypeSerializer.writeTypePrefix(JsonGenerator g, WritableTypeId typeId)
  fullName: com.fasterxml.jackson.databind.jsontype.TypeSerializer.writeTypePrefix(JsonGenerator g, WritableTypeId typeId)
  overload: com.fasterxml.jackson.databind.jsontype.TypeSerializer.writeTypePrefix*
  type: Method
  package: com.fasterxml.jackson.databind.jsontype
  summary: >-
    Method called to write initial part of type information for given value, along with possible wrapping to use: details are specified by \`typeId\` argument. Note that for structured types (Object, Array), this call will add necessary start token so it should NOT be explicitly written, unlike with non-type-id value writes.


    See <xref uid="com.fasterxml.jackson.databind.jsontype.TypeSerializer.writeTypeSuffix(com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.core.type.WritableTypeId)" data-throw-if-not-resolved="false">#writeTypeSuffix(JsonGenerator, WritableTypeId)</xref> for a complete example of typical usage.
  syntax:
    content: public abstract WritableTypeId writeTypePrefix(JsonGenerator g, WritableTypeId typeId)
    parameters:
    - id: g
      type: com.fasterxml.jackson.core.JsonGenerator
      description: Generator to use for outputting type id and possible wrapping
    - id: typeId
      type: com.fasterxml.jackson.core.type.WritableTypeId
      description: Details of what type id is to be written, how.
    return:
      type: com.fasterxml.jackson.core.type.WritableTypeId
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.databind.jsontype.TypeSerializer.writeTypePrefixForArray(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator)
  id: writeTypePrefixForArray(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.jsontype.TypeSerializer
  langs:
  - java
  name: writeTypePrefixForArray(Object value, JsonGenerator g)
  nameWithType: TypeSerializer.writeTypePrefixForArray(Object value, JsonGenerator g)
  fullName: com.fasterxml.jackson.databind.jsontype.TypeSerializer.writeTypePrefixForArray(Object value, JsonGenerator g)
  overload: com.fasterxml.jackson.databind.jsontype.TypeSerializer.writeTypePrefixForArray*
  type: Method
  package: com.fasterxml.jackson.databind.jsontype
  summary: 'DEPRECATED: now equivalent to: `writeTypePrefix(g, typeId(value, JsonToken.START_ARRAY));`. See <xref uid="com.fasterxml.jackson.databind.jsontype.TypeSerializer.writeTypePrefix*" data-throw-if-not-resolved="false">#writeTypePrefix</xref> for more info.'
  syntax:
    content: public void writeTypePrefixForArray(Object value, JsonGenerator g)
    parameters:
    - id: value
      type: java.lang.Object
    - id: g
      type: com.fasterxml.jackson.core.JsonGenerator
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.databind.jsontype.TypeSerializer.writeTypePrefixForArray(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,java.lang.Class<?>)
  id: writeTypePrefixForArray(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,java.lang.Class<?>)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.jsontype.TypeSerializer
  langs:
  - java
  name: writeTypePrefixForArray(Object value, JsonGenerator g, Class<?> type)
  nameWithType: TypeSerializer.writeTypePrefixForArray(Object value, JsonGenerator g, Class<?> type)
  fullName: com.fasterxml.jackson.databind.jsontype.TypeSerializer.writeTypePrefixForArray(Object value, JsonGenerator g, Class<?> type)
  overload: com.fasterxml.jackson.databind.jsontype.TypeSerializer.writeTypePrefixForArray*
  type: Method
  package: com.fasterxml.jackson.databind.jsontype
  summary: 'DEPRECATED: now equivalent to: `writeTypePrefix(g, typeId(value, type, JsonToken.START_ARRAY));`. See <xref uid="com.fasterxml.jackson.databind.jsontype.TypeSerializer.writeTypePrefix*" data-throw-if-not-resolved="false">#writeTypePrefix</xref> for more info.'
  syntax:
    content: public void writeTypePrefixForArray(Object value, JsonGenerator g, Class<?> type)
    parameters:
    - id: value
      type: java.lang.Object
    - id: g
      type: com.fasterxml.jackson.core.JsonGenerator
    - id: type
      type: java.lang.Class<?>
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.databind.jsontype.TypeSerializer.writeTypePrefixForObject(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator)
  id: writeTypePrefixForObject(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.jsontype.TypeSerializer
  langs:
  - java
  name: writeTypePrefixForObject(Object value, JsonGenerator g)
  nameWithType: TypeSerializer.writeTypePrefixForObject(Object value, JsonGenerator g)
  fullName: com.fasterxml.jackson.databind.jsontype.TypeSerializer.writeTypePrefixForObject(Object value, JsonGenerator g)
  overload: com.fasterxml.jackson.databind.jsontype.TypeSerializer.writeTypePrefixForObject*
  type: Method
  package: com.fasterxml.jackson.databind.jsontype
  summary: 'DEPRECATED: now equivalent to: `writeTypePrefix(g, typeId(value, JsonToken.START_OBJECT));`. See <xref uid="com.fasterxml.jackson.databind.jsontype.TypeSerializer.writeTypePrefix*" data-throw-if-not-resolved="false">#writeTypePrefix</xref> for more info.'
  syntax:
    content: public void writeTypePrefixForObject(Object value, JsonGenerator g)
    parameters:
    - id: value
      type: java.lang.Object
    - id: g
      type: com.fasterxml.jackson.core.JsonGenerator
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.databind.jsontype.TypeSerializer.writeTypePrefixForObject(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,java.lang.Class<?>)
  id: writeTypePrefixForObject(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,java.lang.Class<?>)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.jsontype.TypeSerializer
  langs:
  - java
  name: writeTypePrefixForObject(Object value, JsonGenerator g, Class<?> type)
  nameWithType: TypeSerializer.writeTypePrefixForObject(Object value, JsonGenerator g, Class<?> type)
  fullName: com.fasterxml.jackson.databind.jsontype.TypeSerializer.writeTypePrefixForObject(Object value, JsonGenerator g, Class<?> type)
  overload: com.fasterxml.jackson.databind.jsontype.TypeSerializer.writeTypePrefixForObject*
  type: Method
  package: com.fasterxml.jackson.databind.jsontype
  summary: 'DEPRECATED: now equivalent to: `writeTypePrefix(g, typeId(value, type, JsonToken.START_OBJECT));`. See <xref uid="com.fasterxml.jackson.databind.jsontype.TypeSerializer.writeTypePrefix*" data-throw-if-not-resolved="false">#writeTypePrefix</xref> for more info.'
  syntax:
    content: public void writeTypePrefixForObject(Object value, JsonGenerator g, Class<?> type)
    parameters:
    - id: value
      type: java.lang.Object
    - id: g
      type: com.fasterxml.jackson.core.JsonGenerator
    - id: type
      type: java.lang.Class<?>
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.databind.jsontype.TypeSerializer.writeTypePrefixForScalar(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator)
  id: writeTypePrefixForScalar(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.jsontype.TypeSerializer
  langs:
  - java
  name: writeTypePrefixForScalar(Object value, JsonGenerator g)
  nameWithType: TypeSerializer.writeTypePrefixForScalar(Object value, JsonGenerator g)
  fullName: com.fasterxml.jackson.databind.jsontype.TypeSerializer.writeTypePrefixForScalar(Object value, JsonGenerator g)
  overload: com.fasterxml.jackson.databind.jsontype.TypeSerializer.writeTypePrefixForScalar*
  type: Method
  package: com.fasterxml.jackson.databind.jsontype
  summary: 'DEPRECATED: now equivalent to: `writeTypePrefix(g, typeId(value, JsonToken.VALUE_STRING));`. See <xref uid="com.fasterxml.jackson.databind.jsontype.TypeSerializer.writeTypePrefix*" data-throw-if-not-resolved="false">#writeTypePrefix</xref> for more info.'
  syntax:
    content: public void writeTypePrefixForScalar(Object value, JsonGenerator g)
    parameters:
    - id: value
      type: java.lang.Object
    - id: g
      type: com.fasterxml.jackson.core.JsonGenerator
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.databind.jsontype.TypeSerializer.writeTypePrefixForScalar(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,java.lang.Class<?>)
  id: writeTypePrefixForScalar(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,java.lang.Class<?>)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.jsontype.TypeSerializer
  langs:
  - java
  name: writeTypePrefixForScalar(Object value, JsonGenerator g, Class<?> type)
  nameWithType: TypeSerializer.writeTypePrefixForScalar(Object value, JsonGenerator g, Class<?> type)
  fullName: com.fasterxml.jackson.databind.jsontype.TypeSerializer.writeTypePrefixForScalar(Object value, JsonGenerator g, Class<?> type)
  overload: com.fasterxml.jackson.databind.jsontype.TypeSerializer.writeTypePrefixForScalar*
  type: Method
  package: com.fasterxml.jackson.databind.jsontype
  summary: 'DEPRECATED: now equivalent to: `writeTypePrefix(g, typeId(value, type, JsonToken.VALUE_STRING));`. See <xref uid="com.fasterxml.jackson.databind.jsontype.TypeSerializer.writeTypePrefix*" data-throw-if-not-resolved="false">#writeTypePrefix</xref> for more info.'
  syntax:
    content: public void writeTypePrefixForScalar(Object value, JsonGenerator g, Class<?> type)
    parameters:
    - id: value
      type: java.lang.Object
    - id: g
      type: com.fasterxml.jackson.core.JsonGenerator
    - id: type
      type: java.lang.Class<?>
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.databind.jsontype.TypeSerializer.writeTypeSuffix(com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.core.type.WritableTypeId)
  id: writeTypeSuffix(com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.core.type.WritableTypeId)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.jsontype.TypeSerializer
  langs:
  - java
  name: writeTypeSuffix(JsonGenerator g, WritableTypeId typeId)
  nameWithType: TypeSerializer.writeTypeSuffix(JsonGenerator g, WritableTypeId typeId)
  fullName: com.fasterxml.jackson.databind.jsontype.TypeSerializer.writeTypeSuffix(JsonGenerator g, WritableTypeId typeId)
  overload: com.fasterxml.jackson.databind.jsontype.TypeSerializer.writeTypeSuffix*
  type: Method
  package: com.fasterxml.jackson.databind.jsontype
  summary: "Method that should be called after <xref uid=\"com.fasterxml.jackson.databind.jsontype.TypeSerializer.writeTypePrefix(com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.core.type.WritableTypeId)\" data-throw-if-not-resolved=\"false\">#writeTypePrefix(JsonGenerator, WritableTypeId)</xref> and matching value write have been called, passing <xref uid=\"com.fasterxml.jackson.core.type.WritableTypeId\" data-throw-if-not-resolved=\"false\">WritableTypeId</xref> returned. Usual idiom is:\n\n```java\n// Indicator generator that type identifier may be needed; generator may write\n // one as suggested, modify information, or take some other action \n // NOTE! For Object/Array types, this will ALSO write start marker!\n WritableTypeId typeIdDef = typeSer.writeTypePrefix(gen,\n          typeSer.typeId(value, JsonToken.START_OBJECT));\n\n // serializing actual value for which TypeId may have been written... like\n // NOTE: do NOT write START_OBJECT before OR END_OBJECT after:\n g.writeStringField(\"message\", \"Hello, world!\"\n\n // matching type suffix call to let generator chance to add suffix, if any\n // NOTE! For Object/Array types, this will ALSO write end marker!\n typeSer.writeTypeSuffix(gen, typeIdDef);\n```"
  syntax:
    content: public abstract WritableTypeId writeTypeSuffix(JsonGenerator g, WritableTypeId typeId)
    parameters:
    - id: g
      type: com.fasterxml.jackson.core.JsonGenerator
    - id: typeId
      type: com.fasterxml.jackson.core.type.WritableTypeId
    return:
      type: com.fasterxml.jackson.core.type.WritableTypeId
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.databind.jsontype.TypeSerializer.writeTypeSuffixForArray(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator)
  id: writeTypeSuffixForArray(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.jsontype.TypeSerializer
  langs:
  - java
  name: writeTypeSuffixForArray(Object value, JsonGenerator g)
  nameWithType: TypeSerializer.writeTypeSuffixForArray(Object value, JsonGenerator g)
  fullName: com.fasterxml.jackson.databind.jsontype.TypeSerializer.writeTypeSuffixForArray(Object value, JsonGenerator g)
  overload: com.fasterxml.jackson.databind.jsontype.TypeSerializer.writeTypeSuffixForArray*
  type: Method
  package: com.fasterxml.jackson.databind.jsontype
  summary: 'DEPRECATED: now equivalent to: `writeTypeSuffix(g, typeId(value, JsonToken.START_ARRAY));`. See <xref uid="com.fasterxml.jackson.databind.jsontype.TypeSerializer.writeTypeSuffix*" data-throw-if-not-resolved="false">#writeTypeSuffix</xref> for more info.'
  syntax:
    content: public void writeTypeSuffixForArray(Object value, JsonGenerator g)
    parameters:
    - id: value
      type: java.lang.Object
    - id: g
      type: com.fasterxml.jackson.core.JsonGenerator
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.databind.jsontype.TypeSerializer.writeTypeSuffixForObject(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator)
  id: writeTypeSuffixForObject(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.jsontype.TypeSerializer
  langs:
  - java
  name: writeTypeSuffixForObject(Object value, JsonGenerator g)
  nameWithType: TypeSerializer.writeTypeSuffixForObject(Object value, JsonGenerator g)
  fullName: com.fasterxml.jackson.databind.jsontype.TypeSerializer.writeTypeSuffixForObject(Object value, JsonGenerator g)
  overload: com.fasterxml.jackson.databind.jsontype.TypeSerializer.writeTypeSuffixForObject*
  type: Method
  package: com.fasterxml.jackson.databind.jsontype
  summary: 'DEPRECATED: now equivalent to: `writeTypeSuffix(g, typeId(value, JsonToken.START_OBJECT));`. See <xref uid="com.fasterxml.jackson.databind.jsontype.TypeSerializer.writeTypeSuffix*" data-throw-if-not-resolved="false">#writeTypeSuffix</xref> for more info.'
  syntax:
    content: public void writeTypeSuffixForObject(Object value, JsonGenerator g)
    parameters:
    - id: value
      type: java.lang.Object
    - id: g
      type: com.fasterxml.jackson.core.JsonGenerator
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.databind.jsontype.TypeSerializer.writeTypeSuffixForScalar(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator)
  id: writeTypeSuffixForScalar(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.jsontype.TypeSerializer
  langs:
  - java
  name: writeTypeSuffixForScalar(Object value, JsonGenerator g)
  nameWithType: TypeSerializer.writeTypeSuffixForScalar(Object value, JsonGenerator g)
  fullName: com.fasterxml.jackson.databind.jsontype.TypeSerializer.writeTypeSuffixForScalar(Object value, JsonGenerator g)
  overload: com.fasterxml.jackson.databind.jsontype.TypeSerializer.writeTypeSuffixForScalar*
  type: Method
  package: com.fasterxml.jackson.databind.jsontype
  summary: 'DEPRECATED: now equivalent to: `writeTypeSuffix(g, typeId(value, JsonToken.VALUE_STRING));`. See <xref uid="com.fasterxml.jackson.databind.jsontype.TypeSerializer.writeTypeSuffix*" data-throw-if-not-resolved="false">#writeTypeSuffix</xref> for more info.'
  syntax:
    content: public void writeTypeSuffixForScalar(Object value, JsonGenerator g)
    parameters:
    - id: value
      type: java.lang.Object
    - id: g
      type: com.fasterxml.jackson.core.JsonGenerator
  exceptions:
  - type: java.io.IOException
references:
- uid: com.fasterxml.jackson.databind.jsontype.TypeSerializer.TypeSerializer*
  name: TypeSerializer
  nameWithType: TypeSerializer.TypeSerializer
  fullName: com.fasterxml.jackson.databind.jsontype.TypeSerializer.TypeSerializer
  package: com.fasterxml.jackson.databind.jsontype
- uid: com.fasterxml.jackson.databind.BeanProperty
  name: BeanProperty
  nameWithType: BeanProperty
  fullName: com.fasterxml.jackson.databind.BeanProperty
- uid: com.fasterxml.jackson.databind.jsontype.TypeSerializer.forProperty*
  name: forProperty
  nameWithType: TypeSerializer.forProperty
  fullName: com.fasterxml.jackson.databind.jsontype.TypeSerializer.forProperty
  package: com.fasterxml.jackson.databind.jsontype
- uid: com.fasterxml.jackson.annotation.JsonTypeInfo.As
  name: JsonTypeInfo.As
  nameWithType: JsonTypeInfo.As
  fullName: com.fasterxml.jackson.annotation.JsonTypeInfo.As
- uid: com.fasterxml.jackson.databind.jsontype.TypeSerializer.getTypeInclusion*
  name: getTypeInclusion
  nameWithType: TypeSerializer.getTypeInclusion
  fullName: com.fasterxml.jackson.databind.jsontype.TypeSerializer.getTypeInclusion
  package: com.fasterxml.jackson.databind.jsontype
- uid: java.lang.String
  spec.java:
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
- uid: com.fasterxml.jackson.databind.jsontype.TypeSerializer.getPropertyName*
  name: getPropertyName
  nameWithType: TypeSerializer.getPropertyName
  fullName: com.fasterxml.jackson.databind.jsontype.TypeSerializer.getPropertyName
  package: com.fasterxml.jackson.databind.jsontype
- uid: com.fasterxml.jackson.databind.jsontype.TypeIdResolver
  name: TypeIdResolver
  nameWithType: TypeIdResolver
  fullName: com.fasterxml.jackson.databind.jsontype.TypeIdResolver
- uid: com.fasterxml.jackson.databind.jsontype.TypeSerializer.getTypeIdResolver*
  name: getTypeIdResolver
  nameWithType: TypeSerializer.getTypeIdResolver
  fullName: com.fasterxml.jackson.databind.jsontype.TypeSerializer.getTypeIdResolver
  package: com.fasterxml.jackson.databind.jsontype
- uid: java.lang.Object
  spec.java:
  - uid: java.lang.Object
    name: Object
    fullName: java.lang.Object
- uid: com.fasterxml.jackson.core.JsonToken
  name: JsonToken
  nameWithType: JsonToken
  fullName: com.fasterxml.jackson.core.JsonToken
- uid: com.fasterxml.jackson.core.type.WritableTypeId
  name: WritableTypeId
  nameWithType: WritableTypeId
  fullName: com.fasterxml.jackson.core.type.WritableTypeId
- uid: com.fasterxml.jackson.databind.jsontype.TypeSerializer.typeId*
  name: typeId
  nameWithType: TypeSerializer.typeId
  fullName: com.fasterxml.jackson.databind.jsontype.TypeSerializer.typeId
  package: com.fasterxml.jackson.databind.jsontype
- uid: java.lang.Class<?>
  spec.java:
  - uid: java.lang.Class
    name: Class
    fullName: java.lang.Class
  - name: <
    fullName: <
  - uid: '?'
    name: '?'
    fullName: '?'
  - name: '>'
    fullName: '>'
- uid: java.io.IOException
  spec.java:
  - uid: java.io.IOException
    name: IOException
    fullName: java.io.IOException
- uid: com.fasterxml.jackson.core.JsonGenerator
  name: JsonGenerator
  nameWithType: JsonGenerator
  fullName: com.fasterxml.jackson.core.JsonGenerator
- uid: com.fasterxml.jackson.databind.jsontype.TypeSerializer.writeTypePrefix*
  name: writeTypePrefix
  nameWithType: TypeSerializer.writeTypePrefix
  fullName: com.fasterxml.jackson.databind.jsontype.TypeSerializer.writeTypePrefix
  package: com.fasterxml.jackson.databind.jsontype
- uid: com.fasterxml.jackson.databind.jsontype.TypeSerializer.writeTypeSuffix*
  name: writeTypeSuffix
  nameWithType: TypeSerializer.writeTypeSuffix
  fullName: com.fasterxml.jackson.databind.jsontype.TypeSerializer.writeTypeSuffix
  package: com.fasterxml.jackson.databind.jsontype
- uid: com.fasterxml.jackson.databind.jsontype.TypeSerializer.writeTypePrefixForScalar*
  name: writeTypePrefixForScalar
  nameWithType: TypeSerializer.writeTypePrefixForScalar
  fullName: com.fasterxml.jackson.databind.jsontype.TypeSerializer.writeTypePrefixForScalar
  package: com.fasterxml.jackson.databind.jsontype
- uid: com.fasterxml.jackson.databind.jsontype.TypeSerializer.writeTypePrefixForObject*
  name: writeTypePrefixForObject
  nameWithType: TypeSerializer.writeTypePrefixForObject
  fullName: com.fasterxml.jackson.databind.jsontype.TypeSerializer.writeTypePrefixForObject
  package: com.fasterxml.jackson.databind.jsontype
- uid: com.fasterxml.jackson.databind.jsontype.TypeSerializer.writeTypePrefixForArray*
  name: writeTypePrefixForArray
  nameWithType: TypeSerializer.writeTypePrefixForArray
  fullName: com.fasterxml.jackson.databind.jsontype.TypeSerializer.writeTypePrefixForArray
  package: com.fasterxml.jackson.databind.jsontype
- uid: com.fasterxml.jackson.databind.jsontype.TypeSerializer.writeTypeSuffixForScalar*
  name: writeTypeSuffixForScalar
  nameWithType: TypeSerializer.writeTypeSuffixForScalar
  fullName: com.fasterxml.jackson.databind.jsontype.TypeSerializer.writeTypeSuffixForScalar
  package: com.fasterxml.jackson.databind.jsontype
- uid: com.fasterxml.jackson.databind.jsontype.TypeSerializer.writeTypeSuffixForObject*
  name: writeTypeSuffixForObject
  nameWithType: TypeSerializer.writeTypeSuffixForObject
  fullName: com.fasterxml.jackson.databind.jsontype.TypeSerializer.writeTypeSuffixForObject
  package: com.fasterxml.jackson.databind.jsontype
- uid: com.fasterxml.jackson.databind.jsontype.TypeSerializer.writeTypeSuffixForArray*
  name: writeTypeSuffixForArray
  nameWithType: TypeSerializer.writeTypeSuffixForArray
  fullName: com.fasterxml.jackson.databind.jsontype.TypeSerializer.writeTypeSuffixForArray
  package: com.fasterxml.jackson.databind.jsontype
- uid: com.fasterxml.jackson.databind.jsontype.TypeSerializer.writeCustomTypePrefixForScalar*
  name: writeCustomTypePrefixForScalar
  nameWithType: TypeSerializer.writeCustomTypePrefixForScalar
  fullName: com.fasterxml.jackson.databind.jsontype.TypeSerializer.writeCustomTypePrefixForScalar
  package: com.fasterxml.jackson.databind.jsontype
- uid: com.fasterxml.jackson.databind.jsontype.TypeSerializer.writeCustomTypePrefixForObject*
  name: writeCustomTypePrefixForObject
  nameWithType: TypeSerializer.writeCustomTypePrefixForObject
  fullName: com.fasterxml.jackson.databind.jsontype.TypeSerializer.writeCustomTypePrefixForObject
  package: com.fasterxml.jackson.databind.jsontype
- uid: com.fasterxml.jackson.databind.jsontype.TypeSerializer.writeCustomTypePrefixForArray*
  name: writeCustomTypePrefixForArray
  nameWithType: TypeSerializer.writeCustomTypePrefixForArray
  fullName: com.fasterxml.jackson.databind.jsontype.TypeSerializer.writeCustomTypePrefixForArray
  package: com.fasterxml.jackson.databind.jsontype
- uid: com.fasterxml.jackson.databind.jsontype.TypeSerializer.writeCustomTypeSuffixForScalar*
  name: writeCustomTypeSuffixForScalar
  nameWithType: TypeSerializer.writeCustomTypeSuffixForScalar
  fullName: com.fasterxml.jackson.databind.jsontype.TypeSerializer.writeCustomTypeSuffixForScalar
  package: com.fasterxml.jackson.databind.jsontype
- uid: com.fasterxml.jackson.databind.jsontype.TypeSerializer.writeCustomTypeSuffixForObject*
  name: writeCustomTypeSuffixForObject
  nameWithType: TypeSerializer.writeCustomTypeSuffixForObject
  fullName: com.fasterxml.jackson.databind.jsontype.TypeSerializer.writeCustomTypeSuffixForObject
  package: com.fasterxml.jackson.databind.jsontype
- uid: com.fasterxml.jackson.databind.jsontype.TypeSerializer.writeCustomTypeSuffixForArray*
  name: writeCustomTypeSuffixForArray
  nameWithType: TypeSerializer.writeCustomTypeSuffixForArray
  fullName: com.fasterxml.jackson.databind.jsontype.TypeSerializer.writeCustomTypeSuffixForArray
  package: com.fasterxml.jackson.databind.jsontype
- uid: com.fasterxml.jackson.databind.jsontype.TypeSerializer._writeLegacySuffix*
  name: _writeLegacySuffix
  nameWithType: TypeSerializer._writeLegacySuffix
  fullName: com.fasterxml.jackson.databind.jsontype.TypeSerializer._writeLegacySuffix
  package: com.fasterxml.jackson.databind.jsontype
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: java.lang.Object.finalize()
  name: Object.finalize()
  nameWithType: Object.finalize()
  fullName: java.lang.Object.finalize()
- uid: java.lang.Object.clone()
  name: Object.clone()
  nameWithType: Object.clone()
  fullName: java.lang.Object.clone()
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: java.lang.Object.equals(java.lang.Object)
  name: Object.equals(Object)
  nameWithType: Object.equals(Object)
  fullName: java.lang.Object.equals(java.lang.Object)
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.lang.Object.hashCode()
  name: Object.hashCode()
  nameWithType: Object.hashCode()
  fullName: java.lang.Object.hashCode()
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: java.lang.Object.toString()
  name: Object.toString()
  nameWithType: Object.toString()
  fullName: java.lang.Object.toString()
- uid: java.lang.Class
  name: Class
  nameWithType: Class
  fullName: java.lang.Class
- uid: '?'
  name: '?'
  nameWithType: '?'
  fullName: '?'
