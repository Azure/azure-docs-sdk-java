### YamlMime:ManagedReference
items:
- uid: com.fasterxml.jackson.annotation.JsonIgnoreProperties
  id: JsonIgnoreProperties
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.annotation
  children:
  - com.fasterxml.jackson.annotation.JsonIgnoreProperties.Value
  - com.fasterxml.jackson.annotation.JsonIgnoreProperties.allowGetters()
  - com.fasterxml.jackson.annotation.JsonIgnoreProperties.allowSetters()
  - com.fasterxml.jackson.annotation.JsonIgnoreProperties.ignoreUnknown()
  - com.fasterxml.jackson.annotation.JsonIgnoreProperties.value()
  langs:
  - java
  name: JsonIgnoreProperties
  nameWithType: JsonIgnoreProperties
  fullName: com.fasterxml.jackson.annotation.JsonIgnoreProperties
  type: Interface
  package: com.fasterxml.jackson.annotation
  summary: >-
    Annotation that can be used to either suppress serialization of properties (during serialization), or ignore processing of JSON properties read (during deserialization).


    Example:


    ```java

    // to prevent specified fields from being serialized or deserialized
     // (i.e. not include in JSON output; or being set even if they were included)
     @JsonIgnoreProperties({ "internalId", "secretKey" })
     // To ignore any unknown properties in JSON input without exception:
     @JsonIgnoreProperties(ignoreUnknown=true)
    ```


    Annotation can be applied both to classes and to properties. If used for both, actual set will be union of all ignorals: that is, you can only add properties to ignore, not remove or override. So you can not remove properties to ignore using per-property annotation.
  syntax:
    content: public interface JsonIgnoreProperties implements Annotation
  implements:
  - java.lang.annotation.Annotation
- uid: com.fasterxml.jackson.annotation.JsonIgnoreProperties.allowGetters()
  id: allowGetters()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.annotation.JsonIgnoreProperties
  langs:
  - java
  name: allowGetters()
  nameWithType: JsonIgnoreProperties.allowGetters()
  fullName: com.fasterxml.jackson.annotation.JsonIgnoreProperties.allowGetters()
  overload: com.fasterxml.jackson.annotation.JsonIgnoreProperties.allowGetters*
  type: Method
  package: com.fasterxml.jackson.annotation
  summary: >-
    Property that can be enabled to allow "getters" to be used (that is, prevent ignoral of getters for properties listed in <xref uid="com.fasterxml.jackson.annotation.JsonIgnoreProperties.value()" data-throw-if-not-resolved="false">#value()</xref>). This is commonly set to support defining "read-only" properties; ones for which there is a getter, but no matching setter: in this case, properties should be ignored for deserialization but NOT serialization. Another way to think about this setting is that setting it to \`true\` will "disable" ignoring of getters.


    Default value is \`false\`, which means that getters with matching names will be ignored.
  syntax:
    content: public abstract boolean allowGetters()
    return:
      type: boolean
      description: >-
        True if getters should be allowed (i.e. NOT ignored); false if getters
            are to be ignored
- uid: com.fasterxml.jackson.annotation.JsonIgnoreProperties.allowSetters()
  id: allowSetters()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.annotation.JsonIgnoreProperties
  langs:
  - java
  name: allowSetters()
  nameWithType: JsonIgnoreProperties.allowSetters()
  fullName: com.fasterxml.jackson.annotation.JsonIgnoreProperties.allowSetters()
  overload: com.fasterxml.jackson.annotation.JsonIgnoreProperties.allowSetters*
  type: Method
  package: com.fasterxml.jackson.annotation
  summary: >-
    Property that can be enabled to allow "setters" to be used (that is, prevent ignoral of setters for properties listed in <xref uid="com.fasterxml.jackson.annotation.JsonIgnoreProperties.value()" data-throw-if-not-resolved="false">#value()</xref>). This could be used to specify "write-only" properties; ones that should not be serialized out, but that may be provided in for deserialization. Another way to think about this setting is that setting it to \`true\` will "disable" ignoring of setters.


    Default value is \`false\`, which means that setters with matching names will be ignored.
  syntax:
    content: public abstract boolean allowSetters()
    return:
      type: boolean
      description: >-
        True if setters should be allowed (i.e. NOT ignored); false if setters
            are to be ignored
- uid: com.fasterxml.jackson.annotation.JsonIgnoreProperties.ignoreUnknown()
  id: ignoreUnknown()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.annotation.JsonIgnoreProperties
  langs:
  - java
  name: ignoreUnknown()
  nameWithType: JsonIgnoreProperties.ignoreUnknown()
  fullName: com.fasterxml.jackson.annotation.JsonIgnoreProperties.ignoreUnknown()
  overload: com.fasterxml.jackson.annotation.JsonIgnoreProperties.ignoreUnknown*
  type: Method
  package: com.fasterxml.jackson.annotation
  summary: >-
    Property that defines whether it is ok to just ignore any unrecognized properties during deserialization. If true, all properties that are unrecognized -- that is, there are no setters or creators that accept them -- are ignored without warnings (although handlers for unknown properties, if any, will still be called) without exception.


    Does not have any effect on serialization.
  syntax:
    content: public abstract boolean ignoreUnknown()
    return:
      type: boolean
      description: >-
        True if any and all unknown properties are to be ignored without
           exceptions (or other special handling); false otherwise.
- uid: com.fasterxml.jackson.annotation.JsonIgnoreProperties.value()
  id: value()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.annotation.JsonIgnoreProperties
  langs:
  - java
  name: value()
  nameWithType: JsonIgnoreProperties.value()
  fullName: com.fasterxml.jackson.annotation.JsonIgnoreProperties.value()
  overload: com.fasterxml.jackson.annotation.JsonIgnoreProperties.value*
  type: Method
  package: com.fasterxml.jackson.annotation
  summary: Names of properties to ignore.
  syntax:
    content: public abstract String[] value()
    return:
      type: java.lang.String[]
references:
- uid: java.lang.String[]
  spec.java:
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
  - name: '[]'
    fullName: '[]'
- uid: com.fasterxml.jackson.annotation.JsonIgnoreProperties.value*
  name: value
  nameWithType: JsonIgnoreProperties.value
  fullName: com.fasterxml.jackson.annotation.JsonIgnoreProperties.value
  package: com.fasterxml.jackson.annotation
- uid: boolean
  spec.java:
  - uid: boolean
    name: boolean
    fullName: boolean
- uid: com.fasterxml.jackson.annotation.JsonIgnoreProperties.ignoreUnknown*
  name: ignoreUnknown
  nameWithType: JsonIgnoreProperties.ignoreUnknown
  fullName: com.fasterxml.jackson.annotation.JsonIgnoreProperties.ignoreUnknown
  package: com.fasterxml.jackson.annotation
- uid: com.fasterxml.jackson.annotation.JsonIgnoreProperties.allowGetters*
  name: allowGetters
  nameWithType: JsonIgnoreProperties.allowGetters
  fullName: com.fasterxml.jackson.annotation.JsonIgnoreProperties.allowGetters
  package: com.fasterxml.jackson.annotation
- uid: com.fasterxml.jackson.annotation.JsonIgnoreProperties.allowSetters*
  name: allowSetters
  nameWithType: JsonIgnoreProperties.allowSetters
  fullName: com.fasterxml.jackson.annotation.JsonIgnoreProperties.allowSetters
  package: com.fasterxml.jackson.annotation
- uid: java.lang.annotation.Annotation
  name: Annotation
  nameWithType: Annotation
  fullName: java.lang.annotation.Annotation
- uid: com.fasterxml.jackson.annotation.JsonIgnoreProperties.Value
  name: JsonIgnoreProperties.Value
  nameWithType: JsonIgnoreProperties.Value
  fullName: com.fasterxml.jackson.annotation.JsonIgnoreProperties.Value
