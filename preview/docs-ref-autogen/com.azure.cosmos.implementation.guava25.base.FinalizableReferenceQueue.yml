### YamlMime:JavaType
uid: "com.azure.cosmos.implementation.guava25.base.FinalizableReferenceQueue"
fullName: "com.azure.cosmos.implementation.guava25.base.FinalizableReferenceQueue"
name: "FinalizableReferenceQueue"
nameWithType: "FinalizableReferenceQueue"
summary: "A reference queue with an associated background thread that dequeues references and invokes <xref uid=\"com.azure.cosmos.implementation.guava25.base.FinalizableReference.finalizeReferent()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"FinalizableReference#finalizeReferent()\"></xref> on them.\n\nKeep a strong reference to this object until all of the associated referents have been finalized. If this object is garbage collected earlier, the backing thread will not invoke `finalizeReferent()` on the remaining references.\n\nAs an example of how this is used, imagine you have a class `MyServer` that creates a a <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ServerSocket\"></xref>, and you would like to ensure that the `ServerSocket` is closed even if the `MyServer` object is garbage-collected without calling its `close` method. You *could* use a finalizer to accomplish this, but that has a number of well-known problems. Here is how you might use this class instead:\n\n```java\npublic class MyServer implements Closeable {\n   private static final FinalizableReferenceQueue frq = new FinalizableReferenceQueue();\n   // You might also share this between several objects.\n\n   private static final Set> references = Sets.newConcurrentHashSet();\n   // This ensures that the FinalizablePhantomReference itself is not garbage-collected.\n\n   private final ServerSocket serverSocket;\n\n   private MyServer(...) {\n     ...\n     this.serverSocket = new ServerSocket(...);\n     ...\n   }\n\n   public static MyServer create(...) {\n     MyServer myServer = new MyServer(...);\n     final ServerSocket serverSocket = myServer.serverSocket;\n     Reference reference = new FinalizablePhantomReference(myServer, frq) {\n       public void finalizeReferent() {\n         references.remove(this):\n         if (!serverSocket.isClosed()) {\n           ...log a message about how nobody called close()...\n           try {\n             serverSocket.close();\n           } catch (IOException e) {\n             ...\n           }\n         }\n       }\n     };\n     references.add(reference);\n     return myServer;\n   }\n\n   public void close() {\n     serverSocket.close();\n   }\n }\n```"
inheritances:
- "<xref href=\"java.lang.Object\" data-throw-if-not-resolved=\"False\" />"
inheritedMembers:
- "java.lang.Object.clone()"
- "java.lang.Object.equals(java.lang.Object)"
- "java.lang.Object.finalize()"
- "java.lang.Object.getClass()"
- "java.lang.Object.hashCode()"
- "java.lang.Object.notify()"
- "java.lang.Object.notifyAll()"
- "java.lang.Object.toString()"
- "java.lang.Object.wait()"
- "java.lang.Object.wait(long)"
- "java.lang.Object.wait(long,int)"
syntax: "public class FinalizableReferenceQueue implements Closeable"
constructors:
- "com.azure.cosmos.implementation.guava25.base.FinalizableReferenceQueue.FinalizableReferenceQueue()"
methods:
- "com.azure.cosmos.implementation.guava25.base.FinalizableReferenceQueue.close()"
type: "class"
implements:
- "<xref href=\"java.io.Closeable?alt=java.io.Closeable&text=Closeable\" data-throw-if-not-resolved=\"False\" />"
metadata: {}
package: "com.azure.cosmos.implementation.guava25.base"
artifact: com.azure:azure-cosmos:4.4.0-beta.1
