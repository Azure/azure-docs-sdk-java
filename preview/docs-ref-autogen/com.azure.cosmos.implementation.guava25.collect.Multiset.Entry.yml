### YamlMime:ManagedReference
items:
- uid: com.azure.cosmos.implementation.guava25.collect.Multiset.Entry
  id: Entry
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect
  children:
  - com.azure.cosmos.implementation.guava25.collect.Multiset.Entry.equals(java.lang.Object)
  - com.azure.cosmos.implementation.guava25.collect.Multiset.Entry.getCount()
  - com.azure.cosmos.implementation.guava25.collect.Multiset.Entry.getElement()
  - com.azure.cosmos.implementation.guava25.collect.Multiset.Entry.hashCode()
  - com.azure.cosmos.implementation.guava25.collect.Multiset.Entry.toString()
  langs:
  - java
  name: Multiset.Entry<E>
  nameWithType: Multiset.Entry<E>
  fullName: com.azure.cosmos.implementation.guava25.collect.Multiset.Entry<E>
  type: Interface
  package: com.azure.cosmos.implementation.guava25.collect
  summary: An unmodifiable element-count pair for a multiset. The <xref uid="com.azure.cosmos.implementation.guava25.collect.Multiset.entrySet" data-throw-if-not-resolved="false">Multiset#entrySet</xref> method returns a view of the multiset whose elements are of this class. A multiset implementation may return Entry instances that are either live "read-through" views to the Multiset, or immutable snapshots. Note that this type is unrelated to the similarly-named type `Map.Entry`.
  syntax:
    content: public static interface Multiset.Entry<E>
    typeParameters:
    - id: E
- uid: com.azure.cosmos.implementation.guava25.collect.Multiset.Entry.equals(java.lang.Object)
  id: equals(java.lang.Object)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.Multiset.Entry
  langs:
  - java
  name: equals(Object o)
  nameWithType: Multiset.Entry<E>.equals(Object o)
  fullName: com.azure.cosmos.implementation.guava25.collect.Multiset.Entry<E>.equals(Object o)
  overload: com.azure.cosmos.implementation.guava25.collect.Multiset.Entry.equals*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Returns `true` if the given object is also a multiset entry and the two entries represent the same element and count. That is, two entries `a` and `b` are equal if:


    ```java

    Objects.equal(a.getElement(), b.getElement())
         && a.getCount() == b.getCount()
    ```
  syntax:
    content: public abstract boolean equals(Object o)
    parameters:
    - id: o
      type: java.lang.Object
    return:
      type: boolean
- uid: com.azure.cosmos.implementation.guava25.collect.Multiset.Entry.getCount()
  id: getCount()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.Multiset.Entry
  langs:
  - java
  name: getCount()
  nameWithType: Multiset.Entry<E>.getCount()
  fullName: com.azure.cosmos.implementation.guava25.collect.Multiset.Entry<E>.getCount()
  overload: com.azure.cosmos.implementation.guava25.collect.Multiset.Entry.getCount*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Returns the count of the associated element in the underlying multiset. This count may either be an unchanging snapshot of the count at the time the entry was retrieved, or a live view of the current count of the element in the multiset, depending on the implementation. Note that in the former case, this method can never return zero, while in the latter, it will return zero if all occurrences of the element were since removed from the multiset.
  syntax:
    content: public abstract int getCount()
    return:
      type: int
      description: the count of the element; never negative
- uid: com.azure.cosmos.implementation.guava25.collect.Multiset.Entry.getElement()
  id: getElement()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.Multiset.Entry
  langs:
  - java
  name: getElement()
  nameWithType: Multiset.Entry<E>.getElement()
  fullName: com.azure.cosmos.implementation.guava25.collect.Multiset.Entry<E>.getElement()
  overload: com.azure.cosmos.implementation.guava25.collect.Multiset.Entry.getElement*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Returns the multiset element corresponding to this entry. Multiple calls to this method always return the same instance.
  syntax:
    content: public abstract E getElement()
    return:
      type: E
      description: the element corresponding to this entry
- uid: com.azure.cosmos.implementation.guava25.collect.Multiset.Entry.hashCode()
  id: hashCode()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.Multiset.Entry
  langs:
  - java
  name: hashCode()
  nameWithType: Multiset.Entry<E>.hashCode()
  fullName: com.azure.cosmos.implementation.guava25.collect.Multiset.Entry<E>.hashCode()
  overload: com.azure.cosmos.implementation.guava25.collect.Multiset.Entry.hashCode*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    The hash code of a multiset entry for element `element` and count `count` is defined as:


    ```java

    ((element == null) ? 0 : element.hashCode()) ^ count

    ```
  syntax:
    content: public abstract int hashCode()
    return:
      type: int
- uid: com.azure.cosmos.implementation.guava25.collect.Multiset.Entry.toString()
  id: toString()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.Multiset.Entry
  langs:
  - java
  name: toString()
  nameWithType: Multiset.Entry<E>.toString()
  fullName: com.azure.cosmos.implementation.guava25.collect.Multiset.Entry<E>.toString()
  overload: com.azure.cosmos.implementation.guava25.collect.Multiset.Entry.toString*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Returns the canonical string representation of this entry, defined as follows. If the count for this entry is one, this is simply the string representation of the corresponding element. Otherwise, it is the string representation of the element, followed by the three characters `" x "` (space, letter x, space), followed by the count.
  syntax:
    content: public abstract String toString()
    return:
      type: java.lang.String
references:
- uid: E
  spec.java:
  - uid: E
    name: E
    fullName: E
- uid: com.azure.cosmos.implementation.guava25.collect.Multiset.Entry.getElement*
  name: getElement
  nameWithType: Multiset.Entry<E>.getElement
  fullName: com.azure.cosmos.implementation.guava25.collect.Multiset.Entry<E>.getElement
  package: com.azure.cosmos.implementation.guava25.collect
- uid: int
  spec.java:
  - uid: int
    name: int
    fullName: int
- uid: com.azure.cosmos.implementation.guava25.collect.Multiset.Entry.getCount*
  name: getCount
  nameWithType: Multiset.Entry<E>.getCount
  fullName: com.azure.cosmos.implementation.guava25.collect.Multiset.Entry<E>.getCount
  package: com.azure.cosmos.implementation.guava25.collect
- uid: java.lang.Object
  spec.java:
  - uid: java.lang.Object
    name: Object
    fullName: java.lang.Object
- uid: boolean
  spec.java:
  - uid: boolean
    name: boolean
    fullName: boolean
- uid: com.azure.cosmos.implementation.guava25.collect.Multiset.Entry.equals*
  name: equals
  nameWithType: Multiset.Entry<E>.equals
  fullName: com.azure.cosmos.implementation.guava25.collect.Multiset.Entry<E>.equals
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.Multiset.Entry.hashCode*
  name: hashCode
  nameWithType: Multiset.Entry<E>.hashCode
  fullName: com.azure.cosmos.implementation.guava25.collect.Multiset.Entry<E>.hashCode
  package: com.azure.cosmos.implementation.guava25.collect
- uid: java.lang.String
  spec.java:
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
- uid: com.azure.cosmos.implementation.guava25.collect.Multiset.Entry.toString*
  name: toString
  nameWithType: Multiset.Entry<E>.toString
  fullName: com.azure.cosmos.implementation.guava25.collect.Multiset.Entry<E>.toString
  package: com.azure.cosmos.implementation.guava25.collect
