### YamlMime:ManagedReference
items:
- uid: com.fasterxml.jackson.annotation.JsonFormat.Feature
  id: Feature
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.annotation
  children:
  - com.fasterxml.jackson.annotation.JsonFormat.Feature.ACCEPT_CASE_INSENSITIVE_PROPERTIES
  - com.fasterxml.jackson.annotation.JsonFormat.Feature.ACCEPT_CASE_INSENSITIVE_VALUES
  - com.fasterxml.jackson.annotation.JsonFormat.Feature.ACCEPT_SINGLE_VALUE_AS_ARRAY
  - com.fasterxml.jackson.annotation.JsonFormat.Feature.ADJUST_DATES_TO_CONTEXT_TIME_ZONE
  - com.fasterxml.jackson.annotation.JsonFormat.Feature.WRITE_DATES_WITH_ZONE_ID
  - com.fasterxml.jackson.annotation.JsonFormat.Feature.WRITE_DATE_TIMESTAMPS_AS_NANOSECONDS
  - com.fasterxml.jackson.annotation.JsonFormat.Feature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED
  - com.fasterxml.jackson.annotation.JsonFormat.Feature.WRITE_SORTED_MAP_ENTRIES
  - com.fasterxml.jackson.annotation.JsonFormat.Feature.valueOf(java.lang.String)
  - com.fasterxml.jackson.annotation.JsonFormat.Feature.values()
  langs:
  - java
  name: JsonFormat.Feature
  nameWithType: JsonFormat.Feature
  fullName: com.fasterxml.jackson.annotation.JsonFormat.Feature
  type: Enum
  package: com.fasterxml.jackson.annotation
  summary: >-
    Set of features that can be enabled/disabled for property annotated. These often relate to specific `SerializationFeature` or `DeserializationFeature`, as noted by entries.


    Note that whether specific setting has an effect depends on whether `JsonSerializer` / `JsonDeserializer` being used takes the format setting into account. If not, please file an issue for adding support via issue tracker for package that has handlers (if you know which one; if not, just use \`jackson-databind\`).
  syntax:
    content: public enum JsonFormat.Feature extends Enum<JsonFormat.Feature>
  inheritance:
  - java.lang.Object
  - java.lang.Enum
  inheritedMembers:
  - java.lang.Enum.<T>valueOf(java.lang.Class<T>,java.lang.String)
  - java.lang.Enum.clone()
  - java.lang.Enum.compareTo(E)
  - java.lang.Enum.equals(java.lang.Object)
  - java.lang.Enum.finalize()
  - java.lang.Enum.getDeclaringClass()
  - java.lang.Enum.hashCode()
  - java.lang.Enum.name()
  - java.lang.Enum.ordinal()
  - java.lang.Enum.toString()
  - java.lang.Object.getClass()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
- uid: com.fasterxml.jackson.annotation.JsonFormat.Feature.ACCEPT_CASE_INSENSITIVE_PROPERTIES
  id: ACCEPT_CASE_INSENSITIVE_PROPERTIES
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.annotation.JsonFormat.Feature
  langs:
  - java
  name: ACCEPT_CASE_INSENSITIVE_PROPERTIES
  nameWithType: JsonFormat.Feature.ACCEPT_CASE_INSENSITIVE_PROPERTIES
  fullName: com.fasterxml.jackson.annotation.JsonFormat.Feature.ACCEPT_CASE_INSENSITIVE_PROPERTIES
  type: Field
  package: com.fasterxml.jackson.annotation
  summary: >-
    Override for `MapperFeature.ACCEPT_CASE_INSENSITIVE_PROPERTIES`, which allows case-insensitive matching of property names (but NOT values, see <xref uid="com.fasterxml.jackson.annotation.JsonFormat.Feature.ACCEPT_CASE_INSENSITIVE_VALUES" data-throw-if-not-resolved="false">#ACCEPT_CASE_INSENSITIVE_VALUES</xref> for that).


    Only affects deserialization, has no effect on serialization.
  syntax:
    content: public static final JsonFormat.Feature ACCEPT_CASE_INSENSITIVE_PROPERTIES
    return:
      type: com.fasterxml.jackson.annotation.JsonFormat.Feature
- uid: com.fasterxml.jackson.annotation.JsonFormat.Feature.ACCEPT_CASE_INSENSITIVE_VALUES
  id: ACCEPT_CASE_INSENSITIVE_VALUES
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.annotation.JsonFormat.Feature
  langs:
  - java
  name: ACCEPT_CASE_INSENSITIVE_VALUES
  nameWithType: JsonFormat.Feature.ACCEPT_CASE_INSENSITIVE_VALUES
  fullName: com.fasterxml.jackson.annotation.JsonFormat.Feature.ACCEPT_CASE_INSENSITIVE_VALUES
  type: Field
  package: com.fasterxml.jackson.annotation
  summary: Override for `MapperFeature.ACCEPT_CASE_INSENSITIVE_VALUES`, which allows case-sensitive matching of (some) property values, such as `Enum`s. Only affects deserialization, has no effect on serialization.
  syntax:
    content: public static final JsonFormat.Feature ACCEPT_CASE_INSENSITIVE_VALUES
    return:
      type: com.fasterxml.jackson.annotation.JsonFormat.Feature
- uid: com.fasterxml.jackson.annotation.JsonFormat.Feature.ACCEPT_SINGLE_VALUE_AS_ARRAY
  id: ACCEPT_SINGLE_VALUE_AS_ARRAY
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.annotation.JsonFormat.Feature
  langs:
  - java
  name: ACCEPT_SINGLE_VALUE_AS_ARRAY
  nameWithType: JsonFormat.Feature.ACCEPT_SINGLE_VALUE_AS_ARRAY
  fullName: com.fasterxml.jackson.annotation.JsonFormat.Feature.ACCEPT_SINGLE_VALUE_AS_ARRAY
  type: Field
  package: com.fasterxml.jackson.annotation
  summary: Override for `DeserializationFeature.ACCEPT_SINGLE_VALUE_AS_ARRAY` which will allow deserialization of JSON non-array values into single-element Java arrays and <xref uid="java.util.Collection" data-throw-if-not-resolved="false">java.util.Collection</xref>s.
  syntax:
    content: public static final JsonFormat.Feature ACCEPT_SINGLE_VALUE_AS_ARRAY
    return:
      type: com.fasterxml.jackson.annotation.JsonFormat.Feature
- uid: com.fasterxml.jackson.annotation.JsonFormat.Feature.ADJUST_DATES_TO_CONTEXT_TIME_ZONE
  id: ADJUST_DATES_TO_CONTEXT_TIME_ZONE
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.annotation.JsonFormat.Feature
  langs:
  - java
  name: ADJUST_DATES_TO_CONTEXT_TIME_ZONE
  nameWithType: JsonFormat.Feature.ADJUST_DATES_TO_CONTEXT_TIME_ZONE
  fullName: com.fasterxml.jackson.annotation.JsonFormat.Feature.ADJUST_DATES_TO_CONTEXT_TIME_ZONE
  type: Field
  package: com.fasterxml.jackson.annotation
  summary: >-
    Override for `DeserializationFeature.ADJUST_DATES_TO_CONTEXT_TIMEZONE` that specifies whether context provided timezone `DeserializationContext.getTimeZone()` should be used to adjust Date/Time values on deserialization, even if value itself contains timezone informatio


    NOTE: due to limitations of "old" JDK date/time types (that is, <xref uid="java.util.Date" data-throw-if-not-resolved="false">java.util.Date</xref> and <xref uid="java.util.Calendar" data-throw-if-not-resolved="false">java.util.Calendar</xref>), this setting is only applicable to `Joda` and `Java 8 date/time` values, but not to `java.util.Date` or `java.util.Calendar`.
  syntax:
    content: public static final JsonFormat.Feature ADJUST_DATES_TO_CONTEXT_TIME_ZONE
    return:
      type: com.fasterxml.jackson.annotation.JsonFormat.Feature
- uid: com.fasterxml.jackson.annotation.JsonFormat.Feature.Feature()
  id: Feature()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.annotation.JsonFormat.Feature
  langs:
  - java
  name: Feature()
  nameWithType: JsonFormat.Feature.Feature()
  fullName: com.fasterxml.jackson.annotation.JsonFormat.Feature.Feature()
  overload: com.fasterxml.jackson.annotation.JsonFormat.Feature.Feature*
  type: Constructor
  package: com.fasterxml.jackson.annotation
  syntax:
    content: private Feature()
- uid: com.fasterxml.jackson.annotation.JsonFormat.Feature.WRITE_DATES_WITH_ZONE_ID
  id: WRITE_DATES_WITH_ZONE_ID
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.annotation.JsonFormat.Feature
  langs:
  - java
  name: WRITE_DATES_WITH_ZONE_ID
  nameWithType: JsonFormat.Feature.WRITE_DATES_WITH_ZONE_ID
  fullName: com.fasterxml.jackson.annotation.JsonFormat.Feature.WRITE_DATES_WITH_ZONE_ID
  type: Field
  package: com.fasterxml.jackson.annotation
  summary: Override for `SerializationFeature.WRITE_DATES_WITH_ZONE_ID`, similar constraints apply.
  syntax:
    content: public static final JsonFormat.Feature WRITE_DATES_WITH_ZONE_ID
    return:
      type: com.fasterxml.jackson.annotation.JsonFormat.Feature
- uid: com.fasterxml.jackson.annotation.JsonFormat.Feature.WRITE_DATE_TIMESTAMPS_AS_NANOSECONDS
  id: WRITE_DATE_TIMESTAMPS_AS_NANOSECONDS
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.annotation.JsonFormat.Feature
  langs:
  - java
  name: WRITE_DATE_TIMESTAMPS_AS_NANOSECONDS
  nameWithType: JsonFormat.Feature.WRITE_DATE_TIMESTAMPS_AS_NANOSECONDS
  fullName: com.fasterxml.jackson.annotation.JsonFormat.Feature.WRITE_DATE_TIMESTAMPS_AS_NANOSECONDS
  type: Field
  package: com.fasterxml.jackson.annotation
  summary: Override for `SerializationFeature.WRITE_DATE_TIMESTAMPS_AS_NANOSECONDS`, similar constraints apply.
  syntax:
    content: public static final JsonFormat.Feature WRITE_DATE_TIMESTAMPS_AS_NANOSECONDS
    return:
      type: com.fasterxml.jackson.annotation.JsonFormat.Feature
- uid: com.fasterxml.jackson.annotation.JsonFormat.Feature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED
  id: WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.annotation.JsonFormat.Feature
  langs:
  - java
  name: WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED
  nameWithType: JsonFormat.Feature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED
  fullName: com.fasterxml.jackson.annotation.JsonFormat.Feature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED
  type: Field
  package: com.fasterxml.jackson.annotation
  summary: Override for `SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED` which will force serialization of single-element arrays and <xref uid="java.util.Collection" data-throw-if-not-resolved="false">java.util.Collection</xref>s as that single element and excluding array wrapper.
  syntax:
    content: public static final JsonFormat.Feature WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED
    return:
      type: com.fasterxml.jackson.annotation.JsonFormat.Feature
- uid: com.fasterxml.jackson.annotation.JsonFormat.Feature.WRITE_SORTED_MAP_ENTRIES
  id: WRITE_SORTED_MAP_ENTRIES
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.annotation.JsonFormat.Feature
  langs:
  - java
  name: WRITE_SORTED_MAP_ENTRIES
  nameWithType: JsonFormat.Feature.WRITE_SORTED_MAP_ENTRIES
  fullName: com.fasterxml.jackson.annotation.JsonFormat.Feature.WRITE_SORTED_MAP_ENTRIES
  type: Field
  package: com.fasterxml.jackson.annotation
  summary: Override for `SerializationFeature.ORDER_MAP_ENTRIES_BY_KEYS`, enabling of which will force sorting of <xref uid="java.util.Map" data-throw-if-not-resolved="false">java.util.Map</xref> keys before serialization.
  syntax:
    content: public static final JsonFormat.Feature WRITE_SORTED_MAP_ENTRIES
    return:
      type: com.fasterxml.jackson.annotation.JsonFormat.Feature
- uid: com.fasterxml.jackson.annotation.JsonFormat.Feature.valueOf(java.lang.String)
  id: valueOf(java.lang.String)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.annotation.JsonFormat.Feature
  langs:
  - java
  name: valueOf(String name)
  nameWithType: JsonFormat.Feature.valueOf(String name)
  fullName: com.fasterxml.jackson.annotation.JsonFormat.Feature.valueOf(String name)
  overload: com.fasterxml.jackson.annotation.JsonFormat.Feature.valueOf*
  type: Method
  package: com.fasterxml.jackson.annotation
  syntax:
    content: public static JsonFormat.Feature valueOf(String name)
    parameters:
    - id: name
      type: java.lang.String
    return:
      type: com.fasterxml.jackson.annotation.JsonFormat.Feature
- uid: com.fasterxml.jackson.annotation.JsonFormat.Feature.values()
  id: values()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.annotation.JsonFormat.Feature
  langs:
  - java
  name: values()
  nameWithType: JsonFormat.Feature.values()
  fullName: com.fasterxml.jackson.annotation.JsonFormat.Feature.values()
  overload: com.fasterxml.jackson.annotation.JsonFormat.Feature.values*
  type: Method
  package: com.fasterxml.jackson.annotation
  syntax:
    content: public static JsonFormat.Feature[] values()
    return:
      type: com.fasterxml.jackson.annotation.JsonFormat.Feature[]
references:
- uid: com.fasterxml.jackson.annotation.JsonFormat.Feature.Feature*
  name: Feature
  nameWithType: JsonFormat.Feature.Feature
  fullName: com.fasterxml.jackson.annotation.JsonFormat.Feature.Feature
  package: com.fasterxml.jackson.annotation
- uid: com.fasterxml.jackson.annotation.JsonFormat.Feature[]
  spec.java:
  - uid: com.fasterxml.jackson.annotation.JsonFormat.Feature
    name: Feature
    fullName: com.fasterxml.jackson.annotation.JsonFormat.Feature
  - name: '[]'
    fullName: '[]'
- uid: com.fasterxml.jackson.annotation.JsonFormat.Feature.values*
  name: values
  nameWithType: JsonFormat.Feature.values
  fullName: com.fasterxml.jackson.annotation.JsonFormat.Feature.values
  package: com.fasterxml.jackson.annotation
- uid: java.lang.String
  spec.java:
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
- uid: com.fasterxml.jackson.annotation.JsonFormat.Feature.valueOf*
  name: valueOf
  nameWithType: JsonFormat.Feature.valueOf
  fullName: com.fasterxml.jackson.annotation.JsonFormat.Feature.valueOf
  package: com.fasterxml.jackson.annotation
- uid: java.lang.Enum<com.fasterxml.jackson.annotation.JsonFormat.Feature>
  name: Enum<JsonFormat.Feature>
  nameWithType: Enum<JsonFormat.Feature>
  fullName: java.lang.Enum<com.fasterxml.jackson.annotation.JsonFormat.Feature>
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: java.lang.Enum.toString()
  name: Enum.toString()
  nameWithType: Enum.toString()
  fullName: java.lang.Enum.toString()
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: java.lang.Enum.clone()
  name: Enum.clone()
  nameWithType: Enum.clone()
  fullName: java.lang.Enum.clone()
- uid: java.lang.Enum.finalize()
  name: Enum.finalize()
  nameWithType: Enum.finalize()
  fullName: java.lang.Enum.finalize()
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: java.lang.Enum.compareTo(E)
  name: Enum.compareTo(E)
  nameWithType: Enum.compareTo(E)
  fullName: java.lang.Enum.compareTo(E)
- uid: java.lang.Enum.name()
  name: Enum.name()
  nameWithType: Enum.name()
  fullName: java.lang.Enum.name()
- uid: java.lang.Enum.<T>valueOf(java.lang.Class<T>,java.lang.String)
  name: Enum.<T>valueOf(Class<T>,String)
  nameWithType: Enum.<T>valueOf(Class<T>,String)
  fullName: java.lang.Enum.<T>valueOf(java.lang.Class<T>,java.lang.String)
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: java.lang.Enum.getDeclaringClass()
  name: Enum.getDeclaringClass()
  nameWithType: Enum.getDeclaringClass()
  fullName: java.lang.Enum.getDeclaringClass()
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.lang.Enum.ordinal()
  name: Enum.ordinal()
  nameWithType: Enum.ordinal()
  fullName: java.lang.Enum.ordinal()
- uid: java.lang.Enum.hashCode()
  name: Enum.hashCode()
  nameWithType: Enum.hashCode()
  fullName: java.lang.Enum.hashCode()
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: java.lang.Enum.equals(java.lang.Object)
  name: Enum.equals(Object)
  nameWithType: Enum.equals(Object)
  fullName: java.lang.Enum.equals(java.lang.Object)
- uid: java.lang.Enum
  name: Enum
  nameWithType: Enum
  fullName: java.lang.Enum
- uid: java.lang.Enum.
  name: Enum.
  nameWithType: Enum.
  fullName: java.lang.Enum.
- uid: T>,java.lang.String)
  name: T>,String)
  nameWithType: T>,String)
  fullName: T>,java.lang.String)
- uid: T>valueOf(java.lang.Class
  name: T>valueOf(Class
  nameWithType: T>valueOf(Class
  fullName: T>valueOf(java.lang.Class
