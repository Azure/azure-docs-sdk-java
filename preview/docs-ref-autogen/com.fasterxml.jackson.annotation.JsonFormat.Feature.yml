### YamlMime:JavaEnum
uid: "com.fasterxml.jackson.annotation.JsonFormat.Feature"
fullName: "com.fasterxml.jackson.annotation.JsonFormat.Feature"
name: "JsonFormat.Feature"
nameWithType: "JsonFormat.Feature"
summary: "Set of features that can be enabled/disabled for property annotated. These often relate to specific `SerializationFeature` or `DeserializationFeature`, as noted by entries.\n\nNote that whether specific setting has an effect depends on whether `JsonSerializer` / `JsonDeserializer` being used takes the format setting into account. If not, please file an issue for adding support via issue tracker for package that has handlers (if you know which one; if not, just use \\`jackson-databind\\`)."
inheritances:
- "<xref href=\"java.lang.Object\" data-throw-if-not-resolved=\"False\" />"
- "<xref href=\"java.lang.Enum\" data-throw-if-not-resolved=\"False\" />"
inheritedMembers:
- "java.lang.Enum.<T>valueOf(java.lang.Class<T>,java.lang.String)"
- "java.lang.Enum.clone()"
- "java.lang.Enum.compareTo(E)"
- "java.lang.Enum.equals(java.lang.Object)"
- "java.lang.Enum.finalize()"
- "java.lang.Enum.getDeclaringClass()"
- "java.lang.Enum.hashCode()"
- "java.lang.Enum.name()"
- "java.lang.Enum.ordinal()"
- "java.lang.Enum.toString()"
- "java.lang.Object.getClass()"
- "java.lang.Object.notify()"
- "java.lang.Object.notifyAll()"
- "java.lang.Object.wait()"
- "java.lang.Object.wait(long)"
- "java.lang.Object.wait(long,int)"
syntax: "public enum JsonFormat.Feature extends Enum<JsonFormat.Feature>"
fields:
- uid: "com.fasterxml.jackson.annotation.JsonFormat.Feature.ACCEPT_CASE_INSENSITIVE_PROPERTIES"
  fullName: "com.fasterxml.jackson.annotation.JsonFormat.Feature.ACCEPT_CASE_INSENSITIVE_PROPERTIES"
  name: "ACCEPT_CASE_INSENSITIVE_PROPERTIES"
  nameWithType: "JsonFormat.Feature.ACCEPT_CASE_INSENSITIVE_PROPERTIES"
  summary: "Override for `MapperFeature.ACCEPT_CASE_INSENSITIVE_PROPERTIES`, which allows case-insensitive matching of property names (but NOT values, see <xref uid=\"com.fasterxml.jackson.annotation.JsonFormat.Feature.ACCEPT_CASE_INSENSITIVE_VALUES\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#ACCEPT_CASE_INSENSITIVE_VALUES\"></xref> for that).\n\nOnly affects deserialization, has no effect on serialization."
- uid: "com.fasterxml.jackson.annotation.JsonFormat.Feature.ACCEPT_CASE_INSENSITIVE_VALUES"
  fullName: "com.fasterxml.jackson.annotation.JsonFormat.Feature.ACCEPT_CASE_INSENSITIVE_VALUES"
  name: "ACCEPT_CASE_INSENSITIVE_VALUES"
  nameWithType: "JsonFormat.Feature.ACCEPT_CASE_INSENSITIVE_VALUES"
  summary: "Override for `MapperFeature.ACCEPT_CASE_INSENSITIVE_VALUES`, which allows case-sensitive matching of (some) property values, such as `Enum`s. Only affects deserialization, has no effect on serialization."
- uid: "com.fasterxml.jackson.annotation.JsonFormat.Feature.ACCEPT_SINGLE_VALUE_AS_ARRAY"
  fullName: "com.fasterxml.jackson.annotation.JsonFormat.Feature.ACCEPT_SINGLE_VALUE_AS_ARRAY"
  name: "ACCEPT_SINGLE_VALUE_AS_ARRAY"
  nameWithType: "JsonFormat.Feature.ACCEPT_SINGLE_VALUE_AS_ARRAY"
  summary: "Override for `DeserializationFeature.ACCEPT_SINGLE_VALUE_AS_ARRAY` which will allow deserialization of JSON non-array values into single-element Java arrays and <xref uid=\"java.util.Collection\" data-throw-if-not-resolved=\"false\" data-raw-source=\"java.util.Collection\"></xref>s."
- uid: "com.fasterxml.jackson.annotation.JsonFormat.Feature.ADJUST_DATES_TO_CONTEXT_TIME_ZONE"
  fullName: "com.fasterxml.jackson.annotation.JsonFormat.Feature.ADJUST_DATES_TO_CONTEXT_TIME_ZONE"
  name: "ADJUST_DATES_TO_CONTEXT_TIME_ZONE"
  nameWithType: "JsonFormat.Feature.ADJUST_DATES_TO_CONTEXT_TIME_ZONE"
  summary: "Override for `DeserializationFeature.ADJUST_DATES_TO_CONTEXT_TIMEZONE` that specifies whether context provided timezone `DeserializationContext.getTimeZone()` should be used to adjust Date/Time values on deserialization, even if value itself contains timezone informatio\n\nNOTE: due to limitations of \"old\" JDK date/time types (that is, <xref uid=\"java.util.Date\" data-throw-if-not-resolved=\"false\" data-raw-source=\"java.util.Date\"></xref> and <xref uid=\"java.util.Calendar\" data-throw-if-not-resolved=\"false\" data-raw-source=\"java.util.Calendar\"></xref>), this setting is only applicable to `Joda` and `Java 8 date/time` values, but not to `java.util.Date` or `java.util.Calendar`."
- uid: "com.fasterxml.jackson.annotation.JsonFormat.Feature.WRITE_DATES_WITH_ZONE_ID"
  fullName: "com.fasterxml.jackson.annotation.JsonFormat.Feature.WRITE_DATES_WITH_ZONE_ID"
  name: "WRITE_DATES_WITH_ZONE_ID"
  nameWithType: "JsonFormat.Feature.WRITE_DATES_WITH_ZONE_ID"
  summary: "Override for `SerializationFeature.WRITE_DATES_WITH_ZONE_ID`, similar constraints apply."
- uid: "com.fasterxml.jackson.annotation.JsonFormat.Feature.WRITE_DATE_TIMESTAMPS_AS_NANOSECONDS"
  fullName: "com.fasterxml.jackson.annotation.JsonFormat.Feature.WRITE_DATE_TIMESTAMPS_AS_NANOSECONDS"
  name: "WRITE_DATE_TIMESTAMPS_AS_NANOSECONDS"
  nameWithType: "JsonFormat.Feature.WRITE_DATE_TIMESTAMPS_AS_NANOSECONDS"
  summary: "Override for `SerializationFeature.WRITE_DATE_TIMESTAMPS_AS_NANOSECONDS`, similar constraints apply."
- uid: "com.fasterxml.jackson.annotation.JsonFormat.Feature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED"
  fullName: "com.fasterxml.jackson.annotation.JsonFormat.Feature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED"
  name: "WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED"
  nameWithType: "JsonFormat.Feature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED"
  summary: "Override for `SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED` which will force serialization of single-element arrays and <xref uid=\"java.util.Collection\" data-throw-if-not-resolved=\"false\" data-raw-source=\"java.util.Collection\"></xref>s as that single element and excluding array wrapper."
- uid: "com.fasterxml.jackson.annotation.JsonFormat.Feature.WRITE_SORTED_MAP_ENTRIES"
  fullName: "com.fasterxml.jackson.annotation.JsonFormat.Feature.WRITE_SORTED_MAP_ENTRIES"
  name: "WRITE_SORTED_MAP_ENTRIES"
  nameWithType: "JsonFormat.Feature.WRITE_SORTED_MAP_ENTRIES"
  summary: "Override for `SerializationFeature.ORDER_MAP_ENTRIES_BY_KEYS`, enabling of which will force sorting of <xref uid=\"java.util.Map\" data-throw-if-not-resolved=\"false\" data-raw-source=\"java.util.Map\"></xref> keys before serialization."
methods:
- uid: "com.fasterxml.jackson.annotation.JsonFormat.Feature.valueOf(java.lang.String)"
  fullName: "com.fasterxml.jackson.annotation.JsonFormat.Feature.valueOf(String name)"
  name: "valueOf(String name)"
  nameWithType: "JsonFormat.Feature.valueOf(String name)"
  parameters:
  - name: "name"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public static JsonFormat.Feature valueOf(String name)"
  returns:
    type: "<xref href=\"com.fasterxml.jackson.annotation.JsonFormat.Feature?alt=com.fasterxml.jackson.annotation.JsonFormat.Feature&text=Feature\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.fasterxml.jackson.annotation.JsonFormat.Feature.values()"
  fullName: "com.fasterxml.jackson.annotation.JsonFormat.Feature.values()"
  name: "values()"
  nameWithType: "JsonFormat.Feature.values()"
  syntax: "public static JsonFormat.Feature[] values()"
  returns:
    type: "<xref href=\"com.fasterxml.jackson.annotation.JsonFormat.Feature?alt=com.fasterxml.jackson.annotation.JsonFormat.Feature&text=Feature\" data-throw-if-not-resolved=\"False\" />[]"
metadata: {}
package: "com.fasterxml.jackson.annotation"
artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
