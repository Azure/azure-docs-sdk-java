### YamlMime:JavaType
uid: "com.azure.storage.file.datalake.options.FileParallelUploadOptions"
fullName: "com.azure.storage.file.datalake.options.FileParallelUploadOptions"
name: "FileParallelUploadOptions"
nameWithType: "FileParallelUploadOptions"
summary: "Extended options that may be passed when uploading a file in parallel."
inheritances:
- "<xref href=\"java.lang.Object?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
inheritedMembers:
- "java.lang.Object.clone()"
- "java.lang.Object.equals(java.lang.Object)"
- "java.lang.Object.finalize()"
- "java.lang.Object.getClass()"
- "java.lang.Object.hashCode()"
- "java.lang.Object.notify()"
- "java.lang.Object.notifyAll()"
- "java.lang.Object.toString()"
- "java.lang.Object.wait()"
- "java.lang.Object.wait(long)"
- "java.lang.Object.wait(long,int)"
syntax: "public class FileParallelUploadOptions"
constructors:
- uid: "com.azure.storage.file.datalake.options.FileParallelUploadOptions.FileParallelUploadOptions(java.io.InputStream)"
  fullName: "com.azure.storage.file.datalake.options.FileParallelUploadOptions.FileParallelUploadOptions(InputStream dataStream)"
  name: "FileParallelUploadOptions(InputStream dataStream)"
  nameWithType: "FileParallelUploadOptions.FileParallelUploadOptions(InputStream dataStream)"
  summary: "Constructs a new `FileParallelUploadOptions`."
  parameters:
  - description: "The data to write to the blob. The data must be markable. This is in order to support retries.\n If the data is not markable, consider wrapping your data source in a <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"java.io.BufferedInputStream\"></xref> to add\n mark support."
    name: "dataStream"
    type: "<xref href=\"java.io.InputStream?alt=java.io.InputStream&text=InputStream\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public FileParallelUploadOptions(InputStream dataStream)"
  desc: "Constructs a new `FileParallelUploadOptions`."
- uid: "com.azure.storage.file.datalake.options.FileParallelUploadOptions.FileParallelUploadOptions(java.io.InputStream,long)"
  fullName: "com.azure.storage.file.datalake.options.FileParallelUploadOptions.FileParallelUploadOptions(InputStream dataStream, long length)"
  name: "FileParallelUploadOptions(InputStream dataStream, long length)"
  nameWithType: "FileParallelUploadOptions.FileParallelUploadOptions(InputStream dataStream, long length)"
  summary: "Constructs a new `FileParallelUploadOptions`."
  deprecatedTag: "length is no longer necessary; use <xref uid=\"com.azure.storage.file.datalake.options.FileParallelUploadOptions.FileParallelUploadOptions(java.io.InputStream)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#FileParallelUploadOptions(InputStream)\"></xref> instead."
  parameters:
  - description: "The data to write to the blob. The data must be markable. This is in order to support retries.\n If the data is not markable, consider wrapping your data source in a <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"java.io.BufferedInputStream\"></xref> to add\n mark support."
    name: "dataStream"
    type: "<xref href=\"java.io.InputStream?alt=java.io.InputStream&text=InputStream\" data-throw-if-not-resolved=\"False\" />"
  - description: "The exact length of the data. It is important that this value match precisely the length of the\n data provided in the <xref uid=\"java.io.InputStream\" data-throw-if-not-resolved=\"false\" data-raw-source=\"InputStream\"></xref>."
    name: "length"
    type: "<xref href=\"long?alt=long&text=long\" data-throw-if-not-resolved=\"False\" />"
  syntax: "@Deprecated\npublic FileParallelUploadOptions(InputStream dataStream, long length)"
  desc: "Constructs a new `FileParallelUploadOptions`. Use <xref uid=\"com.azure.storage.file.datalake.options.FileParallelUploadOptions.FileParallelUploadOptions(java.io.InputStream)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#FileParallelUploadOptions(InputStream)\"></xref> instead to supply an InputStream without knowing the exact length beforehand."
  hasDeprecatedTag: true
- uid: "com.azure.storage.file.datalake.options.FileParallelUploadOptions.FileParallelUploadOptions(reactor.core.publisher.Flux<java.nio.ByteBuffer>)"
  fullName: "com.azure.storage.file.datalake.options.FileParallelUploadOptions.FileParallelUploadOptions(Flux<ByteBuffer> dataFlux)"
  name: "FileParallelUploadOptions(Flux<ByteBuffer> dataFlux)"
  nameWithType: "FileParallelUploadOptions.FileParallelUploadOptions(Flux<ByteBuffer> dataFlux)"
  summary: "Constructs a new `FileParallelUploadOptions`."
  parameters:
  - description: "The data to write to the file. Unlike other upload methods, this method does not require that\n the <code>Flux</code> be replayable. In other words, it does not have to support multiple subscribers and is not\n expected to produce the same values across subscriptions."
    name: "dataFlux"
    type: "<xref href=\"reactor.core.publisher.Flux?alt=reactor.core.publisher.Flux&text=Flux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.nio.ByteBuffer?alt=java.nio.ByteBuffer&text=ByteBuffer\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public FileParallelUploadOptions(Flux<ByteBuffer> dataFlux)"
  desc: "Constructs a new `FileParallelUploadOptions`."
methods:
- uid: "com.azure.storage.file.datalake.options.FileParallelUploadOptions.getDataFlux()"
  fullName: "com.azure.storage.file.datalake.options.FileParallelUploadOptions.getDataFlux()"
  name: "getDataFlux()"
  nameWithType: "FileParallelUploadOptions.getDataFlux()"
  summary: "Gets the data source."
  syntax: "public Flux<ByteBuffer> getDataFlux()"
  desc: "Gets the data source."
  returns:
    description: "The data to write to the file."
    type: "<xref href=\"reactor.core.publisher.Flux?alt=reactor.core.publisher.Flux&text=Flux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.nio.ByteBuffer?alt=java.nio.ByteBuffer&text=ByteBuffer\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.file.datalake.options.FileParallelUploadOptions.getDataStream()"
  fullName: "com.azure.storage.file.datalake.options.FileParallelUploadOptions.getDataStream()"
  name: "getDataStream()"
  nameWithType: "FileParallelUploadOptions.getDataStream()"
  summary: "Gets the data source."
  syntax: "public InputStream getDataStream()"
  desc: "Gets the data source."
  returns:
    description: "The data to write to the file."
    type: "<xref href=\"java.io.InputStream?alt=java.io.InputStream&text=InputStream\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.file.datalake.options.FileParallelUploadOptions.getHeaders()"
  fullName: "com.azure.storage.file.datalake.options.FileParallelUploadOptions.getHeaders()"
  name: "getHeaders()"
  nameWithType: "FileParallelUploadOptions.getHeaders()"
  summary: "Gets the <xref uid=\"com.azure.storage.file.datalake.models.PathHttpHeaders\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PathHttpHeaders\"></xref>."
  syntax: "public PathHttpHeaders getHeaders()"
  desc: "Gets the <xref uid=\"com.azure.storage.file.datalake.models.PathHttpHeaders\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PathHttpHeaders\"></xref>."
  returns:
    description: "<xref uid=\"com.azure.storage.file.datalake.models.PathHttpHeaders\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PathHttpHeaders\"></xref>"
    type: "<xref href=\"com.azure.storage.file.datalake.models.PathHttpHeaders?alt=com.azure.storage.file.datalake.models.PathHttpHeaders&text=PathHttpHeaders\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.file.datalake.options.FileParallelUploadOptions.getLength()"
  fullName: "com.azure.storage.file.datalake.options.FileParallelUploadOptions.getLength()"
  name: "getLength()"
  nameWithType: "FileParallelUploadOptions.getLength()"
  summary: "Gets the length of the data."
  deprecatedTag: "use <xref uid=\"com.azure.storage.file.datalake.options.FileParallelUploadOptions.getOptionalLength()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#getOptionalLength()\"></xref> to have safe access to a length that will not always exist."
  syntax: "@Deprecated\npublic long getLength()"
  desc: "Gets the length of the data."
  hasDeprecatedTag: true
  returns:
    description: "The exact length of the data. It is important that this value match precisely the length of the\n data provided in the <xref uid=\"java.io.InputStream\" data-throw-if-not-resolved=\"false\" data-raw-source=\"InputStream\"></xref>."
    type: "<xref href=\"long?alt=long&text=long\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.file.datalake.options.FileParallelUploadOptions.getMetadata()"
  fullName: "com.azure.storage.file.datalake.options.FileParallelUploadOptions.getMetadata()"
  name: "getMetadata()"
  nameWithType: "FileParallelUploadOptions.getMetadata()"
  summary: "Gets the metadata."
  syntax: "public Map<String,String> getMetadata()"
  desc: "Gets the metadata."
  returns:
    description: "The metadata to associate with the file."
    type: "<xref href=\"java.util.Map?alt=java.util.Map&text=Map\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />,<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.file.datalake.options.FileParallelUploadOptions.getOptionalLength()"
  fullName: "com.azure.storage.file.datalake.options.FileParallelUploadOptions.getOptionalLength()"
  name: "getOptionalLength()"
  nameWithType: "FileParallelUploadOptions.getOptionalLength()"
  summary: "Gets the length of the data."
  syntax: "public Long getOptionalLength()"
  desc: "Gets the length of the data."
  returns:
    description: "The exact length of the data. It is important that this value match precisely the length of the\n data provided in the <xref uid=\"java.io.InputStream\" data-throw-if-not-resolved=\"false\" data-raw-source=\"InputStream\"></xref>."
    type: "<xref href=\"java.lang.Long?alt=java.lang.Long&text=Long\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.file.datalake.options.FileParallelUploadOptions.getParallelTransferOptions()"
  fullName: "com.azure.storage.file.datalake.options.FileParallelUploadOptions.getParallelTransferOptions()"
  name: "getParallelTransferOptions()"
  nameWithType: "FileParallelUploadOptions.getParallelTransferOptions()"
  summary: "Gets the <xref uid=\"com.azure.storage.common.ParallelTransferOptions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ParallelTransferOptions\"></xref>."
  syntax: "public ParallelTransferOptions getParallelTransferOptions()"
  desc: "Gets the <xref uid=\"com.azure.storage.common.ParallelTransferOptions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ParallelTransferOptions\"></xref>."
  returns:
    description: "<xref uid=\"com.azure.storage.common.ParallelTransferOptions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ParallelTransferOptions\"></xref>"
    type: "<xref href=\"com.azure.storage.common.ParallelTransferOptions?alt=com.azure.storage.common.ParallelTransferOptions&text=ParallelTransferOptions\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.file.datalake.options.FileParallelUploadOptions.getPermissions()"
  fullName: "com.azure.storage.file.datalake.options.FileParallelUploadOptions.getPermissions()"
  name: "getPermissions()"
  nameWithType: "FileParallelUploadOptions.getPermissions()"
  summary: "Gets the permissions."
  syntax: "public String getPermissions()"
  desc: "Gets the permissions."
  returns:
    description: "the POSIX access permissions for the resource owner, the resource owning group, and others."
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.file.datalake.options.FileParallelUploadOptions.getRequestConditions()"
  fullName: "com.azure.storage.file.datalake.options.FileParallelUploadOptions.getRequestConditions()"
  name: "getRequestConditions()"
  nameWithType: "FileParallelUploadOptions.getRequestConditions()"
  summary: "Gets the <xref uid=\"com.azure.storage.file.datalake.models.DataLakeRequestConditions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DataLakeRequestConditions\"></xref>."
  syntax: "public DataLakeRequestConditions getRequestConditions()"
  desc: "Gets the <xref uid=\"com.azure.storage.file.datalake.models.DataLakeRequestConditions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DataLakeRequestConditions\"></xref>."
  returns:
    description: "<xref uid=\"com.azure.storage.file.datalake.models.DataLakeRequestConditions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DataLakeRequestConditions\"></xref>"
    type: "<xref href=\"com.azure.storage.file.datalake.models.DataLakeRequestConditions?alt=com.azure.storage.file.datalake.models.DataLakeRequestConditions&text=DataLakeRequestConditions\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.file.datalake.options.FileParallelUploadOptions.getUmask()"
  fullName: "com.azure.storage.file.datalake.options.FileParallelUploadOptions.getUmask()"
  name: "getUmask()"
  nameWithType: "FileParallelUploadOptions.getUmask()"
  summary: "Gets the umask."
  syntax: "public String getUmask()"
  desc: "Gets the umask."
  returns:
    description: "the umask."
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.file.datalake.options.FileParallelUploadOptions.setHeaders(com.azure.storage.file.datalake.models.PathHttpHeaders)"
  fullName: "com.azure.storage.file.datalake.options.FileParallelUploadOptions.setHeaders(PathHttpHeaders headers)"
  name: "setHeaders(PathHttpHeaders headers)"
  nameWithType: "FileParallelUploadOptions.setHeaders(PathHttpHeaders headers)"
  summary: "Sets the <xref uid=\"com.azure.storage.file.datalake.models.PathHttpHeaders\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PathHttpHeaders\"></xref>."
  parameters:
  - description: "<xref uid=\"com.azure.storage.file.datalake.models.PathHttpHeaders\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PathHttpHeaders\"></xref>"
    name: "headers"
    type: "<xref href=\"com.azure.storage.file.datalake.models.PathHttpHeaders?alt=com.azure.storage.file.datalake.models.PathHttpHeaders&text=PathHttpHeaders\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public FileParallelUploadOptions setHeaders(PathHttpHeaders headers)"
  desc: "Sets the <xref uid=\"com.azure.storage.file.datalake.models.PathHttpHeaders\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PathHttpHeaders\"></xref>."
  returns:
    description: "The updated options"
    type: "<xref href=\"com.azure.storage.file.datalake.options.FileParallelUploadOptions?alt=com.azure.storage.file.datalake.options.FileParallelUploadOptions&text=FileParallelUploadOptions\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.file.datalake.options.FileParallelUploadOptions.setMetadata(java.util.Map<java.lang.String,java.lang.String>)"
  fullName: "com.azure.storage.file.datalake.options.FileParallelUploadOptions.setMetadata(Map<String,String> metadata)"
  name: "setMetadata(Map<String,String> metadata)"
  nameWithType: "FileParallelUploadOptions.setMetadata(Map<String,String> metadata)"
  summary: "Sets the metadata."
  parameters:
  - description: "The metadata to associate with the blob."
    name: "metadata"
    type: "<xref href=\"java.util.Map?alt=java.util.Map&text=Map\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />,<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public FileParallelUploadOptions setMetadata(Map<String,String> metadata)"
  desc: "Sets the metadata."
  returns:
    description: "The updated options."
    type: "<xref href=\"com.azure.storage.file.datalake.options.FileParallelUploadOptions?alt=com.azure.storage.file.datalake.options.FileParallelUploadOptions&text=FileParallelUploadOptions\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.file.datalake.options.FileParallelUploadOptions.setParallelTransferOptions(com.azure.storage.common.ParallelTransferOptions)"
  fullName: "com.azure.storage.file.datalake.options.FileParallelUploadOptions.setParallelTransferOptions(ParallelTransferOptions parallelTransferOptions)"
  name: "setParallelTransferOptions(ParallelTransferOptions parallelTransferOptions)"
  nameWithType: "FileParallelUploadOptions.setParallelTransferOptions(ParallelTransferOptions parallelTransferOptions)"
  summary: "Sets the <xref uid=\"com.azure.storage.common.ParallelTransferOptions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ParallelTransferOptions\"></xref>."
  parameters:
  - description: "<xref uid=\"com.azure.storage.common.ParallelTransferOptions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ParallelTransferOptions\"></xref>"
    name: "parallelTransferOptions"
    type: "<xref href=\"com.azure.storage.common.ParallelTransferOptions?alt=com.azure.storage.common.ParallelTransferOptions&text=ParallelTransferOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public FileParallelUploadOptions setParallelTransferOptions(ParallelTransferOptions parallelTransferOptions)"
  desc: "Sets the <xref uid=\"com.azure.storage.common.ParallelTransferOptions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ParallelTransferOptions\"></xref>."
  returns:
    description: "The updated options."
    type: "<xref href=\"com.azure.storage.file.datalake.options.FileParallelUploadOptions?alt=com.azure.storage.file.datalake.options.FileParallelUploadOptions&text=FileParallelUploadOptions\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.file.datalake.options.FileParallelUploadOptions.setPermissions(java.lang.String)"
  fullName: "com.azure.storage.file.datalake.options.FileParallelUploadOptions.setPermissions(String permissions)"
  name: "setPermissions(String permissions)"
  nameWithType: "FileParallelUploadOptions.setPermissions(String permissions)"
  summary: "Sets the permissions."
  parameters:
  - description: "the POSIX access permissions for the resource owner, the resource owning group, and others."
    name: "permissions"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public FileParallelUploadOptions setPermissions(String permissions)"
  desc: "Sets the permissions."
  returns:
    description: "The updated options"
    type: "<xref href=\"com.azure.storage.file.datalake.options.FileParallelUploadOptions?alt=com.azure.storage.file.datalake.options.FileParallelUploadOptions&text=FileParallelUploadOptions\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.file.datalake.options.FileParallelUploadOptions.setRequestConditions(com.azure.storage.file.datalake.models.DataLakeRequestConditions)"
  fullName: "com.azure.storage.file.datalake.options.FileParallelUploadOptions.setRequestConditions(DataLakeRequestConditions requestConditions)"
  name: "setRequestConditions(DataLakeRequestConditions requestConditions)"
  nameWithType: "FileParallelUploadOptions.setRequestConditions(DataLakeRequestConditions requestConditions)"
  summary: "Sets the <xref uid=\"com.azure.storage.file.datalake.models.DataLakeRequestConditions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DataLakeRequestConditions\"></xref>."
  parameters:
  - description: "<xref uid=\"com.azure.storage.file.datalake.models.DataLakeRequestConditions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DataLakeRequestConditions\"></xref>"
    name: "requestConditions"
    type: "<xref href=\"com.azure.storage.file.datalake.models.DataLakeRequestConditions?alt=com.azure.storage.file.datalake.models.DataLakeRequestConditions&text=DataLakeRequestConditions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public FileParallelUploadOptions setRequestConditions(DataLakeRequestConditions requestConditions)"
  desc: "Sets the <xref uid=\"com.azure.storage.file.datalake.models.DataLakeRequestConditions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DataLakeRequestConditions\"></xref>."
  returns:
    description: "The updated options."
    type: "<xref href=\"com.azure.storage.file.datalake.options.FileParallelUploadOptions?alt=com.azure.storage.file.datalake.options.FileParallelUploadOptions&text=FileParallelUploadOptions\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.file.datalake.options.FileParallelUploadOptions.setUmask(java.lang.String)"
  fullName: "com.azure.storage.file.datalake.options.FileParallelUploadOptions.setUmask(String umask)"
  name: "setUmask(String umask)"
  nameWithType: "FileParallelUploadOptions.setUmask(String umask)"
  summary: "Sets the umask."
  parameters:
  - description: "Restricts permissions of the resource to be created."
    name: "umask"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public FileParallelUploadOptions setUmask(String umask)"
  desc: "Sets the umask."
  returns:
    description: "The updated options"
    type: "<xref href=\"com.azure.storage.file.datalake.options.FileParallelUploadOptions?alt=com.azure.storage.file.datalake.options.FileParallelUploadOptions&text=FileParallelUploadOptions\" data-throw-if-not-resolved=\"False\" />"
type: "class"
desc: "Extended options that may be passed when uploading a file in parallel."
metadata: {}
package: "com.azure.storage.file.datalake.options"
artifact: com.azure:azure-storage-file-datalake:12.11.0-beta.1
