### YamlMime:ManagedReference
items:
- uid: com.azure.storage.file.datalake.options.FileParallelUploadOptions
  id: FileParallelUploadOptions
  artifact: com.azure:azure-storage-file-datalake:12.3.0-beta.1
  parent: com.azure.storage.file.datalake.options
  children:
  - com.azure.storage.file.datalake.options.FileParallelUploadOptions.FileParallelUploadOptions(java.io.InputStream,long)
  - com.azure.storage.file.datalake.options.FileParallelUploadOptions.FileParallelUploadOptions(reactor.core.publisher.Flux<java.nio.ByteBuffer>)
  - com.azure.storage.file.datalake.options.FileParallelUploadOptions.getDataFlux()
  - com.azure.storage.file.datalake.options.FileParallelUploadOptions.getDataStream()
  - com.azure.storage.file.datalake.options.FileParallelUploadOptions.getHeaders()
  - com.azure.storage.file.datalake.options.FileParallelUploadOptions.getLength()
  - com.azure.storage.file.datalake.options.FileParallelUploadOptions.getMetadata()
  - com.azure.storage.file.datalake.options.FileParallelUploadOptions.getParallelTransferOptions()
  - com.azure.storage.file.datalake.options.FileParallelUploadOptions.getPermissions()
  - com.azure.storage.file.datalake.options.FileParallelUploadOptions.getRequestConditions()
  - com.azure.storage.file.datalake.options.FileParallelUploadOptions.getUmask()
  - com.azure.storage.file.datalake.options.FileParallelUploadOptions.setHeaders(com.azure.storage.file.datalake.models.PathHttpHeaders)
  - com.azure.storage.file.datalake.options.FileParallelUploadOptions.setMetadata(java.util.Map<java.lang.String,java.lang.String>)
  - com.azure.storage.file.datalake.options.FileParallelUploadOptions.setParallelTransferOptions(com.azure.storage.common.ParallelTransferOptions)
  - com.azure.storage.file.datalake.options.FileParallelUploadOptions.setPermissions(java.lang.String)
  - com.azure.storage.file.datalake.options.FileParallelUploadOptions.setRequestConditions(com.azure.storage.file.datalake.models.DataLakeRequestConditions)
  - com.azure.storage.file.datalake.options.FileParallelUploadOptions.setUmask(java.lang.String)
  langs:
  - java
  name: FileParallelUploadOptions
  nameWithType: FileParallelUploadOptions
  fullName: com.azure.storage.file.datalake.options.FileParallelUploadOptions
  type: Class
  package: com.azure.storage.file.datalake.options
  summary: Extended options that may be passed when uploading a file in parallel.
  syntax:
    content: public class FileParallelUploadOptions
  inheritance:
  - java.lang.Object
  inheritedMembers:
  - java.lang.Object.clone()
  - java.lang.Object.equals(java.lang.Object)
  - java.lang.Object.finalize()
  - java.lang.Object.getClass()
  - java.lang.Object.hashCode()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.toString()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
- uid: com.azure.storage.file.datalake.options.FileParallelUploadOptions.FileParallelUploadOptions(java.io.InputStream,long)
  id: FileParallelUploadOptions(java.io.InputStream,long)
  artifact: com.azure:azure-storage-file-datalake:12.3.0-beta.1
  parent: com.azure.storage.file.datalake.options.FileParallelUploadOptions
  langs:
  - java
  name: FileParallelUploadOptions(InputStream dataStream, long length)
  nameWithType: FileParallelUploadOptions.FileParallelUploadOptions(InputStream dataStream, long length)
  fullName: com.azure.storage.file.datalake.options.FileParallelUploadOptions.FileParallelUploadOptions(InputStream dataStream, long length)
  overload: com.azure.storage.file.datalake.options.FileParallelUploadOptions.FileParallelUploadOptions*
  type: Constructor
  package: com.azure.storage.file.datalake.options
  summary: Constructs a new `FileParallelUploadOptions`.
  syntax:
    content: public FileParallelUploadOptions(InputStream dataStream, long length)
    parameters:
    - id: dataStream
      type: java.io.InputStream
      description: >-
        The data to write to the blob. The data must be markable. This is in order to support retries.
         If the data is not markable, consider wrapping your data source in a <xref uid="" data-throw-if-not-resolved="false">java.io.BufferedInputStream</xref> to add
         mark support.
    - id: length
      type: long
      description: >-
        The exact length of the data. It is important that this value match precisely the length of the
         data provided in the <xref uid="java.io.InputStream" data-throw-if-not-resolved="false">InputStream</xref>.
- uid: com.azure.storage.file.datalake.options.FileParallelUploadOptions.FileParallelUploadOptions(reactor.core.publisher.Flux<java.nio.ByteBuffer>)
  id: FileParallelUploadOptions(reactor.core.publisher.Flux<java.nio.ByteBuffer>)
  artifact: com.azure:azure-storage-file-datalake:12.3.0-beta.1
  parent: com.azure.storage.file.datalake.options.FileParallelUploadOptions
  langs:
  - java
  name: FileParallelUploadOptions(Flux<ByteBuffer> dataFlux)
  nameWithType: FileParallelUploadOptions.FileParallelUploadOptions(Flux<ByteBuffer> dataFlux)
  fullName: com.azure.storage.file.datalake.options.FileParallelUploadOptions.FileParallelUploadOptions(Flux<ByteBuffer> dataFlux)
  overload: com.azure.storage.file.datalake.options.FileParallelUploadOptions.FileParallelUploadOptions*
  type: Constructor
  package: com.azure.storage.file.datalake.options
  summary: Constructs a new `FileParallelUploadOptions`.
  syntax:
    content: public FileParallelUploadOptions(Flux<ByteBuffer> dataFlux)
    parameters:
    - id: dataFlux
      type: reactor.core.publisher.Flux<java.nio.ByteBuffer>
      description: >-
        The data to write to the file. Unlike other upload methods, this method does not require that
         the <code>Flux</code> be replayable. In other words, it does not have to support multiple subscribers and is not
         expected to produce the same values across subscriptions.
- uid: com.azure.storage.file.datalake.options.FileParallelUploadOptions.getDataFlux()
  id: getDataFlux()
  artifact: com.azure:azure-storage-file-datalake:12.3.0-beta.1
  parent: com.azure.storage.file.datalake.options.FileParallelUploadOptions
  langs:
  - java
  name: getDataFlux()
  nameWithType: FileParallelUploadOptions.getDataFlux()
  fullName: com.azure.storage.file.datalake.options.FileParallelUploadOptions.getDataFlux()
  overload: com.azure.storage.file.datalake.options.FileParallelUploadOptions.getDataFlux*
  type: Method
  package: com.azure.storage.file.datalake.options
  summary: Gets the data source.
  syntax:
    content: public Flux<ByteBuffer> getDataFlux()
    return:
      type: reactor.core.publisher.Flux<java.nio.ByteBuffer>
      description: The data to write to the file.
- uid: com.azure.storage.file.datalake.options.FileParallelUploadOptions.getDataStream()
  id: getDataStream()
  artifact: com.azure:azure-storage-file-datalake:12.3.0-beta.1
  parent: com.azure.storage.file.datalake.options.FileParallelUploadOptions
  langs:
  - java
  name: getDataStream()
  nameWithType: FileParallelUploadOptions.getDataStream()
  fullName: com.azure.storage.file.datalake.options.FileParallelUploadOptions.getDataStream()
  overload: com.azure.storage.file.datalake.options.FileParallelUploadOptions.getDataStream*
  type: Method
  package: com.azure.storage.file.datalake.options
  summary: Gets the data source.
  syntax:
    content: public InputStream getDataStream()
    return:
      type: java.io.InputStream
      description: The data to write to the file.
- uid: com.azure.storage.file.datalake.options.FileParallelUploadOptions.getHeaders()
  id: getHeaders()
  artifact: com.azure:azure-storage-file-datalake:12.3.0-beta.1
  parent: com.azure.storage.file.datalake.options.FileParallelUploadOptions
  langs:
  - java
  name: getHeaders()
  nameWithType: FileParallelUploadOptions.getHeaders()
  fullName: com.azure.storage.file.datalake.options.FileParallelUploadOptions.getHeaders()
  overload: com.azure.storage.file.datalake.options.FileParallelUploadOptions.getHeaders*
  type: Method
  package: com.azure.storage.file.datalake.options
  summary: Gets the <xref uid="com.azure.storage.file.datalake.models.PathHttpHeaders" data-throw-if-not-resolved="false">PathHttpHeaders</xref>.
  syntax:
    content: public PathHttpHeaders getHeaders()
    return:
      type: com.azure.storage.file.datalake.models.PathHttpHeaders
      description: <xref uid="com.azure.storage.file.datalake.models.PathHttpHeaders" data-throw-if-not-resolved="false">PathHttpHeaders</xref>
- uid: com.azure.storage.file.datalake.options.FileParallelUploadOptions.getLength()
  id: getLength()
  artifact: com.azure:azure-storage-file-datalake:12.3.0-beta.1
  parent: com.azure.storage.file.datalake.options.FileParallelUploadOptions
  langs:
  - java
  name: getLength()
  nameWithType: FileParallelUploadOptions.getLength()
  fullName: com.azure.storage.file.datalake.options.FileParallelUploadOptions.getLength()
  overload: com.azure.storage.file.datalake.options.FileParallelUploadOptions.getLength*
  type: Method
  package: com.azure.storage.file.datalake.options
  summary: Gets the length of the data.
  syntax:
    content: public long getLength()
    return:
      type: long
      description: >-
        The exact length of the data. It is important that this value match precisely the length of the
         data provided in the <xref uid="java.io.InputStream" data-throw-if-not-resolved="false">InputStream</xref>.
- uid: com.azure.storage.file.datalake.options.FileParallelUploadOptions.getMetadata()
  id: getMetadata()
  artifact: com.azure:azure-storage-file-datalake:12.3.0-beta.1
  parent: com.azure.storage.file.datalake.options.FileParallelUploadOptions
  langs:
  - java
  name: getMetadata()
  nameWithType: FileParallelUploadOptions.getMetadata()
  fullName: com.azure.storage.file.datalake.options.FileParallelUploadOptions.getMetadata()
  overload: com.azure.storage.file.datalake.options.FileParallelUploadOptions.getMetadata*
  type: Method
  package: com.azure.storage.file.datalake.options
  summary: Gets the metadata.
  syntax:
    content: public Map<String,String> getMetadata()
    return:
      type: java.util.Map<java.lang.String,java.lang.String>
      description: The metadata to associate with the file.
- uid: com.azure.storage.file.datalake.options.FileParallelUploadOptions.getParallelTransferOptions()
  id: getParallelTransferOptions()
  artifact: com.azure:azure-storage-file-datalake:12.3.0-beta.1
  parent: com.azure.storage.file.datalake.options.FileParallelUploadOptions
  langs:
  - java
  name: getParallelTransferOptions()
  nameWithType: FileParallelUploadOptions.getParallelTransferOptions()
  fullName: com.azure.storage.file.datalake.options.FileParallelUploadOptions.getParallelTransferOptions()
  overload: com.azure.storage.file.datalake.options.FileParallelUploadOptions.getParallelTransferOptions*
  type: Method
  package: com.azure.storage.file.datalake.options
  summary: Gets the <xref uid="com.azure.storage.common.ParallelTransferOptions" data-throw-if-not-resolved="false">ParallelTransferOptions</xref>.
  syntax:
    content: public ParallelTransferOptions getParallelTransferOptions()
    return:
      type: com.azure.storage.common.ParallelTransferOptions
      description: <xref uid="com.azure.storage.common.ParallelTransferOptions" data-throw-if-not-resolved="false">ParallelTransferOptions</xref>
- uid: com.azure.storage.file.datalake.options.FileParallelUploadOptions.getPermissions()
  id: getPermissions()
  artifact: com.azure:azure-storage-file-datalake:12.3.0-beta.1
  parent: com.azure.storage.file.datalake.options.FileParallelUploadOptions
  langs:
  - java
  name: getPermissions()
  nameWithType: FileParallelUploadOptions.getPermissions()
  fullName: com.azure.storage.file.datalake.options.FileParallelUploadOptions.getPermissions()
  overload: com.azure.storage.file.datalake.options.FileParallelUploadOptions.getPermissions*
  type: Method
  package: com.azure.storage.file.datalake.options
  summary: Gets the permissions.
  syntax:
    content: public String getPermissions()
    return:
      type: java.lang.String
      description: the POSIX access permissions for the resource owner, the resource owning group, and others.
- uid: com.azure.storage.file.datalake.options.FileParallelUploadOptions.getRequestConditions()
  id: getRequestConditions()
  artifact: com.azure:azure-storage-file-datalake:12.3.0-beta.1
  parent: com.azure.storage.file.datalake.options.FileParallelUploadOptions
  langs:
  - java
  name: getRequestConditions()
  nameWithType: FileParallelUploadOptions.getRequestConditions()
  fullName: com.azure.storage.file.datalake.options.FileParallelUploadOptions.getRequestConditions()
  overload: com.azure.storage.file.datalake.options.FileParallelUploadOptions.getRequestConditions*
  type: Method
  package: com.azure.storage.file.datalake.options
  summary: Gets the <xref uid="com.azure.storage.file.datalake.models.DataLakeRequestConditions" data-throw-if-not-resolved="false">DataLakeRequestConditions</xref>.
  syntax:
    content: public DataLakeRequestConditions getRequestConditions()
    return:
      type: com.azure.storage.file.datalake.models.DataLakeRequestConditions
      description: <xref uid="com.azure.storage.file.datalake.models.DataLakeRequestConditions" data-throw-if-not-resolved="false">DataLakeRequestConditions</xref>
- uid: com.azure.storage.file.datalake.options.FileParallelUploadOptions.getUmask()
  id: getUmask()
  artifact: com.azure:azure-storage-file-datalake:12.3.0-beta.1
  parent: com.azure.storage.file.datalake.options.FileParallelUploadOptions
  langs:
  - java
  name: getUmask()
  nameWithType: FileParallelUploadOptions.getUmask()
  fullName: com.azure.storage.file.datalake.options.FileParallelUploadOptions.getUmask()
  overload: com.azure.storage.file.datalake.options.FileParallelUploadOptions.getUmask*
  type: Method
  package: com.azure.storage.file.datalake.options
  summary: Gets the umask.
  syntax:
    content: public String getUmask()
    return:
      type: java.lang.String
      description: the umask.
- uid: com.azure.storage.file.datalake.options.FileParallelUploadOptions.setHeaders(com.azure.storage.file.datalake.models.PathHttpHeaders)
  id: setHeaders(com.azure.storage.file.datalake.models.PathHttpHeaders)
  artifact: com.azure:azure-storage-file-datalake:12.3.0-beta.1
  parent: com.azure.storage.file.datalake.options.FileParallelUploadOptions
  langs:
  - java
  name: setHeaders(PathHttpHeaders headers)
  nameWithType: FileParallelUploadOptions.setHeaders(PathHttpHeaders headers)
  fullName: com.azure.storage.file.datalake.options.FileParallelUploadOptions.setHeaders(PathHttpHeaders headers)
  overload: com.azure.storage.file.datalake.options.FileParallelUploadOptions.setHeaders*
  type: Method
  package: com.azure.storage.file.datalake.options
  summary: Sets the <xref uid="com.azure.storage.file.datalake.models.PathHttpHeaders" data-throw-if-not-resolved="false">PathHttpHeaders</xref>.
  syntax:
    content: public FileParallelUploadOptions setHeaders(PathHttpHeaders headers)
    parameters:
    - id: headers
      type: com.azure.storage.file.datalake.models.PathHttpHeaders
      description: <xref uid="com.azure.storage.file.datalake.models.PathHttpHeaders" data-throw-if-not-resolved="false">PathHttpHeaders</xref>
    return:
      type: com.azure.storage.file.datalake.options.FileParallelUploadOptions
      description: The updated options
- uid: com.azure.storage.file.datalake.options.FileParallelUploadOptions.setMetadata(java.util.Map<java.lang.String,java.lang.String>)
  id: setMetadata(java.util.Map<java.lang.String,java.lang.String>)
  artifact: com.azure:azure-storage-file-datalake:12.3.0-beta.1
  parent: com.azure.storage.file.datalake.options.FileParallelUploadOptions
  langs:
  - java
  name: setMetadata(Map<String,String> metadata)
  nameWithType: FileParallelUploadOptions.setMetadata(Map<String,String> metadata)
  fullName: com.azure.storage.file.datalake.options.FileParallelUploadOptions.setMetadata(Map<String,String> metadata)
  overload: com.azure.storage.file.datalake.options.FileParallelUploadOptions.setMetadata*
  type: Method
  package: com.azure.storage.file.datalake.options
  summary: Sets the metadata.
  syntax:
    content: public FileParallelUploadOptions setMetadata(Map<String,String> metadata)
    parameters:
    - id: metadata
      type: java.util.Map<java.lang.String,java.lang.String>
      description: The metadata to associate with the blob.
    return:
      type: com.azure.storage.file.datalake.options.FileParallelUploadOptions
      description: The updated options.
- uid: com.azure.storage.file.datalake.options.FileParallelUploadOptions.setParallelTransferOptions(com.azure.storage.common.ParallelTransferOptions)
  id: setParallelTransferOptions(com.azure.storage.common.ParallelTransferOptions)
  artifact: com.azure:azure-storage-file-datalake:12.3.0-beta.1
  parent: com.azure.storage.file.datalake.options.FileParallelUploadOptions
  langs:
  - java
  name: setParallelTransferOptions(ParallelTransferOptions parallelTransferOptions)
  nameWithType: FileParallelUploadOptions.setParallelTransferOptions(ParallelTransferOptions parallelTransferOptions)
  fullName: com.azure.storage.file.datalake.options.FileParallelUploadOptions.setParallelTransferOptions(ParallelTransferOptions parallelTransferOptions)
  overload: com.azure.storage.file.datalake.options.FileParallelUploadOptions.setParallelTransferOptions*
  type: Method
  package: com.azure.storage.file.datalake.options
  summary: Sets the <xref uid="com.azure.storage.common.ParallelTransferOptions" data-throw-if-not-resolved="false">ParallelTransferOptions</xref>.
  syntax:
    content: public FileParallelUploadOptions setParallelTransferOptions(ParallelTransferOptions parallelTransferOptions)
    parameters:
    - id: parallelTransferOptions
      type: com.azure.storage.common.ParallelTransferOptions
      description: <xref uid="com.azure.storage.common.ParallelTransferOptions" data-throw-if-not-resolved="false">ParallelTransferOptions</xref>
    return:
      type: com.azure.storage.file.datalake.options.FileParallelUploadOptions
      description: The updated options.
- uid: com.azure.storage.file.datalake.options.FileParallelUploadOptions.setPermissions(java.lang.String)
  id: setPermissions(java.lang.String)
  artifact: com.azure:azure-storage-file-datalake:12.3.0-beta.1
  parent: com.azure.storage.file.datalake.options.FileParallelUploadOptions
  langs:
  - java
  name: setPermissions(String permissions)
  nameWithType: FileParallelUploadOptions.setPermissions(String permissions)
  fullName: com.azure.storage.file.datalake.options.FileParallelUploadOptions.setPermissions(String permissions)
  overload: com.azure.storage.file.datalake.options.FileParallelUploadOptions.setPermissions*
  type: Method
  package: com.azure.storage.file.datalake.options
  summary: Sets the permissions.
  syntax:
    content: public FileParallelUploadOptions setPermissions(String permissions)
    parameters:
    - id: permissions
      type: java.lang.String
      description: the POSIX access permissions for the resource owner, the resource owning group, and others.
    return:
      type: com.azure.storage.file.datalake.options.FileParallelUploadOptions
      description: The updated options
- uid: com.azure.storage.file.datalake.options.FileParallelUploadOptions.setRequestConditions(com.azure.storage.file.datalake.models.DataLakeRequestConditions)
  id: setRequestConditions(com.azure.storage.file.datalake.models.DataLakeRequestConditions)
  artifact: com.azure:azure-storage-file-datalake:12.3.0-beta.1
  parent: com.azure.storage.file.datalake.options.FileParallelUploadOptions
  langs:
  - java
  name: setRequestConditions(DataLakeRequestConditions requestConditions)
  nameWithType: FileParallelUploadOptions.setRequestConditions(DataLakeRequestConditions requestConditions)
  fullName: com.azure.storage.file.datalake.options.FileParallelUploadOptions.setRequestConditions(DataLakeRequestConditions requestConditions)
  overload: com.azure.storage.file.datalake.options.FileParallelUploadOptions.setRequestConditions*
  type: Method
  package: com.azure.storage.file.datalake.options
  summary: Sets the <xref uid="com.azure.storage.file.datalake.models.DataLakeRequestConditions" data-throw-if-not-resolved="false">DataLakeRequestConditions</xref>.
  syntax:
    content: public FileParallelUploadOptions setRequestConditions(DataLakeRequestConditions requestConditions)
    parameters:
    - id: requestConditions
      type: com.azure.storage.file.datalake.models.DataLakeRequestConditions
      description: <xref uid="com.azure.storage.file.datalake.models.DataLakeRequestConditions" data-throw-if-not-resolved="false">DataLakeRequestConditions</xref>
    return:
      type: com.azure.storage.file.datalake.options.FileParallelUploadOptions
      description: The updated options.
- uid: com.azure.storage.file.datalake.options.FileParallelUploadOptions.setUmask(java.lang.String)
  id: setUmask(java.lang.String)
  artifact: com.azure:azure-storage-file-datalake:12.3.0-beta.1
  parent: com.azure.storage.file.datalake.options.FileParallelUploadOptions
  langs:
  - java
  name: setUmask(String umask)
  nameWithType: FileParallelUploadOptions.setUmask(String umask)
  fullName: com.azure.storage.file.datalake.options.FileParallelUploadOptions.setUmask(String umask)
  overload: com.azure.storage.file.datalake.options.FileParallelUploadOptions.setUmask*
  type: Method
  package: com.azure.storage.file.datalake.options
  summary: Sets the umask.
  syntax:
    content: public FileParallelUploadOptions setUmask(String umask)
    parameters:
    - id: umask
      type: java.lang.String
      description: Restricts permissions of the resource to be created.
    return:
      type: com.azure.storage.file.datalake.options.FileParallelUploadOptions
      description: The updated options
references:
- uid: reactor.core.publisher.Flux<java.nio.ByteBuffer>
  spec.java:
  - uid: reactor.core.publisher.Flux
    name: Flux
    fullName: reactor.core.publisher.Flux
  - name: <
    fullName: <
  - uid: java.nio.ByteBuffer
    name: ByteBuffer
    fullName: java.nio.ByteBuffer
  - name: '>'
    fullName: '>'
- uid: com.azure.storage.file.datalake.options.FileParallelUploadOptions.FileParallelUploadOptions*
  name: FileParallelUploadOptions
  nameWithType: FileParallelUploadOptions.FileParallelUploadOptions
  fullName: com.azure.storage.file.datalake.options.FileParallelUploadOptions.FileParallelUploadOptions
  package: com.azure.storage.file.datalake.options
- uid: java.io.InputStream
  spec.java:
  - uid: java.io.InputStream
    name: InputStream
    fullName: java.io.InputStream
- uid: long
  spec.java:
  - uid: long
    name: long
    fullName: long
- uid: com.azure.storage.file.datalake.options.FileParallelUploadOptions.getDataFlux*
  name: getDataFlux
  nameWithType: FileParallelUploadOptions.getDataFlux
  fullName: com.azure.storage.file.datalake.options.FileParallelUploadOptions.getDataFlux
  package: com.azure.storage.file.datalake.options
- uid: com.azure.storage.file.datalake.options.FileParallelUploadOptions.getDataStream*
  name: getDataStream
  nameWithType: FileParallelUploadOptions.getDataStream
  fullName: com.azure.storage.file.datalake.options.FileParallelUploadOptions.getDataStream
  package: com.azure.storage.file.datalake.options
- uid: com.azure.storage.file.datalake.options.FileParallelUploadOptions.getLength*
  name: getLength
  nameWithType: FileParallelUploadOptions.getLength
  fullName: com.azure.storage.file.datalake.options.FileParallelUploadOptions.getLength
  package: com.azure.storage.file.datalake.options
- uid: com.azure.storage.common.ParallelTransferOptions
  spec.java:
  - uid: com.azure.storage.common.ParallelTransferOptions
    name: ParallelTransferOptions
    fullName: com.azure.storage.common.ParallelTransferOptions
- uid: com.azure.storage.file.datalake.options.FileParallelUploadOptions.getParallelTransferOptions*
  name: getParallelTransferOptions
  nameWithType: FileParallelUploadOptions.getParallelTransferOptions
  fullName: com.azure.storage.file.datalake.options.FileParallelUploadOptions.getParallelTransferOptions
  package: com.azure.storage.file.datalake.options
- uid: com.azure.storage.file.datalake.options.FileParallelUploadOptions.setParallelTransferOptions*
  name: setParallelTransferOptions
  nameWithType: FileParallelUploadOptions.setParallelTransferOptions
  fullName: com.azure.storage.file.datalake.options.FileParallelUploadOptions.setParallelTransferOptions
  package: com.azure.storage.file.datalake.options
- uid: com.azure.storage.file.datalake.models.PathHttpHeaders
  name: PathHttpHeaders
  nameWithType: PathHttpHeaders
  fullName: com.azure.storage.file.datalake.models.PathHttpHeaders
- uid: com.azure.storage.file.datalake.options.FileParallelUploadOptions.getHeaders*
  name: getHeaders
  nameWithType: FileParallelUploadOptions.getHeaders
  fullName: com.azure.storage.file.datalake.options.FileParallelUploadOptions.getHeaders
  package: com.azure.storage.file.datalake.options
- uid: com.azure.storage.file.datalake.options.FileParallelUploadOptions.setHeaders*
  name: setHeaders
  nameWithType: FileParallelUploadOptions.setHeaders
  fullName: com.azure.storage.file.datalake.options.FileParallelUploadOptions.setHeaders
  package: com.azure.storage.file.datalake.options
- uid: java.util.Map<java.lang.String,java.lang.String>
  spec.java:
  - uid: java.util.Map
    name: Map
    fullName: java.util.Map
  - name: <
    fullName: <
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
  - name: ','
    fullName: ','
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
  - name: '>'
    fullName: '>'
- uid: com.azure.storage.file.datalake.options.FileParallelUploadOptions.getMetadata*
  name: getMetadata
  nameWithType: FileParallelUploadOptions.getMetadata
  fullName: com.azure.storage.file.datalake.options.FileParallelUploadOptions.getMetadata
  package: com.azure.storage.file.datalake.options
- uid: com.azure.storage.file.datalake.options.FileParallelUploadOptions.setMetadata*
  name: setMetadata
  nameWithType: FileParallelUploadOptions.setMetadata
  fullName: com.azure.storage.file.datalake.options.FileParallelUploadOptions.setMetadata
  package: com.azure.storage.file.datalake.options
- uid: java.lang.String
  spec.java:
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
- uid: com.azure.storage.file.datalake.options.FileParallelUploadOptions.getPermissions*
  name: getPermissions
  nameWithType: FileParallelUploadOptions.getPermissions
  fullName: com.azure.storage.file.datalake.options.FileParallelUploadOptions.getPermissions
  package: com.azure.storage.file.datalake.options
- uid: com.azure.storage.file.datalake.options.FileParallelUploadOptions.setPermissions*
  name: setPermissions
  nameWithType: FileParallelUploadOptions.setPermissions
  fullName: com.azure.storage.file.datalake.options.FileParallelUploadOptions.setPermissions
  package: com.azure.storage.file.datalake.options
- uid: com.azure.storage.file.datalake.options.FileParallelUploadOptions.getUmask*
  name: getUmask
  nameWithType: FileParallelUploadOptions.getUmask
  fullName: com.azure.storage.file.datalake.options.FileParallelUploadOptions.getUmask
  package: com.azure.storage.file.datalake.options
- uid: com.azure.storage.file.datalake.options.FileParallelUploadOptions.setUmask*
  name: setUmask
  nameWithType: FileParallelUploadOptions.setUmask
  fullName: com.azure.storage.file.datalake.options.FileParallelUploadOptions.setUmask
  package: com.azure.storage.file.datalake.options
- uid: com.azure.storage.file.datalake.models.DataLakeRequestConditions
  name: DataLakeRequestConditions
  nameWithType: DataLakeRequestConditions
  fullName: com.azure.storage.file.datalake.models.DataLakeRequestConditions
- uid: com.azure.storage.file.datalake.options.FileParallelUploadOptions.getRequestConditions*
  name: getRequestConditions
  nameWithType: FileParallelUploadOptions.getRequestConditions
  fullName: com.azure.storage.file.datalake.options.FileParallelUploadOptions.getRequestConditions
  package: com.azure.storage.file.datalake.options
- uid: com.azure.storage.file.datalake.options.FileParallelUploadOptions.setRequestConditions*
  name: setRequestConditions
  nameWithType: FileParallelUploadOptions.setRequestConditions
  fullName: com.azure.storage.file.datalake.options.FileParallelUploadOptions.setRequestConditions
  package: com.azure.storage.file.datalake.options
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: java.lang.Object.finalize()
  name: Object.finalize()
  nameWithType: Object.finalize()
  fullName: java.lang.Object.finalize()
- uid: java.lang.Object.clone()
  name: Object.clone()
  nameWithType: Object.clone()
  fullName: java.lang.Object.clone()
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: java.lang.Object.equals(java.lang.Object)
  name: Object.equals(Object)
  nameWithType: Object.equals(Object)
  fullName: java.lang.Object.equals(java.lang.Object)
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.lang.Object.hashCode()
  name: Object.hashCode()
  nameWithType: Object.hashCode()
  fullName: java.lang.Object.hashCode()
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: java.lang.Object.toString()
  name: Object.toString()
  nameWithType: Object.toString()
  fullName: java.lang.Object.toString()
- uid: reactor.core.publisher.Flux
  name: Flux
  nameWithType: Flux
  fullName: reactor.core.publisher.Flux
- uid: java.nio.ByteBuffer
  name: ByteBuffer
  nameWithType: ByteBuffer
  fullName: java.nio.ByteBuffer
- uid: java.util.Map
  name: Map
  nameWithType: Map
  fullName: java.util.Map
- uid: java.lang.String,java.lang.String
  name: String,String
  nameWithType: String,String
  fullName: java.lang.String,java.lang.String
