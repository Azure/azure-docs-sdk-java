### YamlMime:ManagedReference
items:
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableClassToInstanceMap.Builder
  id: Builder
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect
  children:
  - com.azure.cosmos.implementation.guava25.collect.ImmutableClassToInstanceMap.Builder.<T>put(java.lang.Class<T>,T)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableClassToInstanceMap.Builder.<T>putAll(java.util.Map<? extends java.lang.Class<? extends T>,? extends T>)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableClassToInstanceMap.Builder.Builder()
  - com.azure.cosmos.implementation.guava25.collect.ImmutableClassToInstanceMap.Builder.build()
  langs:
  - java
  name: ImmutableClassToInstanceMap.Builder<B>
  nameWithType: ImmutableClassToInstanceMap.Builder<B>
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableClassToInstanceMap.Builder<B>
  type: Class
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    A builder for creating immutable class-to-instance maps. Example:


    ```java

    static final ImmutableClassToInstanceMap HANDLERS =
         new ImmutableClassToInstanceMap.Builder()
             .put(FooHandler.class, new FooHandler())
             .put(BarHandler.class, new SubBarHandler())
             .put(Handler.class, new QuuxHandler())
             .build();
    ```


    After invoking <xref uid="com.azure.cosmos.implementation.guava25.collect.ImmutableClassToInstanceMap.Builder.build()" data-throw-if-not-resolved="false">#build()</xref> it is still possible to add more entries and build again. Thus each map generated by this builder will be a superset of any map generated before it.
  syntax:
    content: public static final class ImmutableClassToInstanceMap.Builder<B>
    typeParameters:
    - id: B
  inheritance:
  - java.lang.Object
  inheritedMembers:
  - java.lang.Object.clone()
  - java.lang.Object.equals(java.lang.Object)
  - java.lang.Object.finalize()
  - java.lang.Object.getClass()
  - java.lang.Object.hashCode()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.toString()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableClassToInstanceMap.Builder.<T>put(java.lang.Class<T>,T)
  id: <T>put(java.lang.Class<T>,T)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableClassToInstanceMap.Builder
  langs:
  - java
  name: <T>put(Class<T> key, T value)
  nameWithType: ImmutableClassToInstanceMap.Builder<B>.<T>put(Class<T> key, T value)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableClassToInstanceMap.Builder<B>.<T>put(Class<T> key, T value)
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableClassToInstanceMap.Builder.put*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Associates `key` with `value` in the built map. Duplicate keys are not allowed, and will cause <xref uid="com.azure.cosmos.implementation.guava25.collect.ImmutableClassToInstanceMap.Builder.build" data-throw-if-not-resolved="false">#build</xref> to fail.
  syntax:
    content: public ImmutableClassToInstanceMap.Builder<B> <T>put(Class<T> key, T value)
    parameters:
    - id: key
      type: java.lang.Class<T>
    - id: value
      type: T
    return:
      type: com.azure.cosmos.implementation.guava25.collect.ImmutableClassToInstanceMap.Builder<B>
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableClassToInstanceMap.Builder.<T>putAll(java.util.Map<? extends java.lang.Class<? extends T>,? extends T>)
  id: <T>putAll(java.util.Map<? extends java.lang.Class<? extends T>,? extends T>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableClassToInstanceMap.Builder
  langs:
  - java
  name: <T>putAll(Map<? extends Class<? extends T>,? extends T> map)
  nameWithType: ImmutableClassToInstanceMap.Builder<B>.<T>putAll(Map<? extends Class<? extends T>,? extends T> map)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableClassToInstanceMap.Builder<B>.<T>putAll(Map<? extends Class<? extends T>,? extends T> map)
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableClassToInstanceMap.Builder.putAll*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Associates all of `map's` keys and values in the built map. Duplicate keys are not allowed, and will cause <xref uid="com.azure.cosmos.implementation.guava25.collect.ImmutableClassToInstanceMap.Builder.build" data-throw-if-not-resolved="false">#build</xref> to fail.
  syntax:
    content: public ImmutableClassToInstanceMap.Builder<B> <T>putAll(Map<? extends Class<? extends T>,? extends T> map)
    parameters:
    - id: map
      type: java.util.Map<? extends java.lang.Class<? extends T>,? extends T>
    return:
      type: com.azure.cosmos.implementation.guava25.collect.ImmutableClassToInstanceMap.Builder<B>
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableClassToInstanceMap.Builder.Builder()
  id: Builder()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableClassToInstanceMap.Builder
  langs:
  - java
  name: Builder()
  nameWithType: ImmutableClassToInstanceMap.Builder<B>.Builder()
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableClassToInstanceMap.Builder<B>.Builder()
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableClassToInstanceMap.Builder.Builder*
  type: Constructor
  package: com.azure.cosmos.implementation.guava25.collect
  syntax:
    content: public Builder()
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableClassToInstanceMap.Builder.build()
  id: build()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableClassToInstanceMap.Builder
  langs:
  - java
  name: build()
  nameWithType: ImmutableClassToInstanceMap.Builder<B>.build()
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableClassToInstanceMap.Builder<B>.build()
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableClassToInstanceMap.Builder.build*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Returns a new immutable class-to-instance map containing the entries provided to this builder.
  syntax:
    content: public ImmutableClassToInstanceMap<B> build()
    return:
      type: com.azure.cosmos.implementation.guava25.collect.ImmutableClassToInstanceMap<B>
references:
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableClassToInstanceMap.Builder.Builder*
  name: Builder
  nameWithType: ImmutableClassToInstanceMap.Builder<B>.Builder
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableClassToInstanceMap.Builder<B>.Builder
  package: com.azure.cosmos.implementation.guava25.collect
- uid: java.lang.Class<T>
  spec.java:
  - uid: java.lang.Class
    name: Class
    fullName: java.lang.Class
  - name: <
    fullName: <
  - uid: T
    name: T
    fullName: T
  - name: '>'
    fullName: '>'
- uid: T
  spec.java:
  - uid: T
    name: T
    fullName: T
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableClassToInstanceMap.Builder<B>
  spec.java:
  - uid: com.azure.cosmos.implementation.guava25.collect.ImmutableClassToInstanceMap.Builder
    name: Builder
    fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableClassToInstanceMap.Builder
  - name: <
    fullName: <
  - uid: B
    name: B
    fullName: B
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableClassToInstanceMap.Builder.put*
  name: <T>put
  nameWithType: ImmutableClassToInstanceMap.Builder<B>.<T>put
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableClassToInstanceMap.Builder<B>.<T>put
  package: com.azure.cosmos.implementation.guava25.collect
- uid: java.util.Map<? extends java.lang.Class<? extends T>,? extends T>
  spec.java:
  - uid: java.util.Map
    name: Map
    fullName: java.util.Map
  - name: <
    fullName: <
  - uid: '? extends java.lang.Class'
    name: Class
    fullName: '? extends java.lang.Class'
  - name: <
    fullName: <
  - uid: '? extends T'
    name: '? extends T'
    fullName: '? extends T'
  - name: '>'
    fullName: '>'
  - name: ','
    fullName: ','
  - uid: '? extends T'
    name: '? extends T'
    fullName: '? extends T'
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableClassToInstanceMap.Builder.putAll*
  name: <T>putAll
  nameWithType: ImmutableClassToInstanceMap.Builder<B>.<T>putAll
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableClassToInstanceMap.Builder<B>.<T>putAll
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableClassToInstanceMap<B>
  spec.java:
  - uid: com.azure.cosmos.implementation.guava25.collect.ImmutableClassToInstanceMap
    name: ImmutableClassToInstanceMap
    fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableClassToInstanceMap
  - name: <
    fullName: <
  - uid: B
    name: B
    fullName: B
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableClassToInstanceMap.Builder.build*
  name: build
  nameWithType: ImmutableClassToInstanceMap.Builder<B>.build
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableClassToInstanceMap.Builder<B>.build
  package: com.azure.cosmos.implementation.guava25.collect
- uid: B
  name: B
  nameWithType: B
  fullName: B
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: java.lang.Object.finalize()
  name: Object.finalize()
  nameWithType: Object.finalize()
  fullName: java.lang.Object.finalize()
- uid: java.lang.Object.clone()
  name: Object.clone()
  nameWithType: Object.clone()
  fullName: java.lang.Object.clone()
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: java.lang.Object.equals(java.lang.Object)
  name: Object.equals(Object)
  nameWithType: Object.equals(Object)
  fullName: java.lang.Object.equals(java.lang.Object)
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.lang.Object.hashCode()
  name: Object.hashCode()
  nameWithType: Object.hashCode()
  fullName: java.lang.Object.hashCode()
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: java.lang.Object.toString()
  name: Object.toString()
  nameWithType: Object.toString()
  fullName: java.lang.Object.toString()
- uid: java.lang.Class
  name: Class
  nameWithType: Class
  fullName: java.lang.Class
- uid: '? extends java.lang.Class'
  name: '? extends Class'
  nameWithType: '? extends Class'
  fullName: '? extends java.lang.Class'
- uid: java.util.Map
  name: Map
  nameWithType: Map
  fullName: java.util.Map
- uid: '? extends T>,? extends T'
  name: '? extends T>,? extends T'
  nameWithType: '? extends T>,? extends T'
  fullName: '? extends T>,? extends T'
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableClassToInstanceMap
  name: ImmutableClassToInstanceMap
  nameWithType: ImmutableClassToInstanceMap
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableClassToInstanceMap
