### YamlMime:JavaType
uid: "com.azure.cosmos.implementation.guava25.collect.LinkedListMultimap"
fullName: "com.azure.cosmos.implementation.guava25.collect.LinkedListMultimap<K,V>"
name: "LinkedListMultimap<K,V>"
nameWithType: "LinkedListMultimap<K,V>"
summary: "An implementation of `ListMultimap` that supports deterministic iteration order for both keys and values. The iteration order is preserved across non-distinct key values. For example, for the following multimap definition:\n\n```java\nMultimap multimap = LinkedListMultimap.create();\n multimap.put(key1, foo);\n multimap.put(key2, bar);\n multimap.put(key1, baz);\n```\n\n... the iteration order for <xref uid=\"com.azure.cosmos.implementation.guava25.collect.LinkedListMultimap.keys*\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#keys()\"></xref> is `[key1, key2, key1]`, and similarly for <xref uid=\"com.azure.cosmos.implementation.guava25.collect.LinkedListMultimap.entries()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#entries()\"></xref>. Unlike <xref uid=\"com.azure.cosmos.implementation.guava25.collect.LinkedHashMultimap\" data-throw-if-not-resolved=\"false\" data-raw-source=\"LinkedHashMultimap\"></xref>, the iteration order is kept consistent between keys, entries and values. For example, calling:\n\n```java\nmap.remove(key1, foo);\n```\n\nchanges the entries iteration order to `[key2=bar, key1=baz]` and the key iteration order to `[key2, key1]`. The <xref uid=\"com.azure.cosmos.implementation.guava25.collect.LinkedListMultimap.entries()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#entries()\"></xref> iterator returns mutable map entries, and <xref uid=\"com.azure.cosmos.implementation.guava25.collect.LinkedListMultimap.replaceValues\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#replaceValues\"></xref> attempts to preserve iteration order as much as possible.\n\nThe collections returned by <xref uid=\"com.azure.cosmos.implementation.guava25.collect.LinkedListMultimap.keySet*\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#keySet()\"></xref> and <xref uid=\"com.azure.cosmos.implementation.guava25.collect.LinkedListMultimap.asMap\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#asMap\"></xref> iterate through the keys in the order they were first added to the multimap. Similarly, <xref uid=\"com.azure.cosmos.implementation.guava25.collect.LinkedListMultimap.get\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#get\"></xref>, <xref uid=\"com.azure.cosmos.implementation.guava25.collect.LinkedListMultimap.removeAll\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#removeAll\"></xref>, and <xref uid=\"com.azure.cosmos.implementation.guava25.collect.LinkedListMultimap.replaceValues\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#replaceValues\"></xref> return collections that iterate through the values in the order they were added. The collections generated by <xref uid=\"com.azure.cosmos.implementation.guava25.collect.LinkedListMultimap.entries()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#entries()\"></xref>, <xref uid=\"com.azure.cosmos.implementation.guava25.collect.LinkedListMultimap.keys*\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#keys()\"></xref>, and <xref uid=\"com.azure.cosmos.implementation.guava25.collect.LinkedListMultimap.values\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#values\"></xref> iterate across the key-value mappings in the order they were added to the multimap.\n\nThe <xref uid=\"com.azure.cosmos.implementation.guava25.collect.LinkedListMultimap.values()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#values()\"></xref> and <xref uid=\"com.azure.cosmos.implementation.guava25.collect.LinkedListMultimap.entries()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#entries()\"></xref> methods both return a `List`, instead of the `Collection` specified by the <xref uid=\"com.azure.cosmos.implementation.guava25.collect.ListMultimap\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ListMultimap\"></xref> interface.\n\nThe methods <xref uid=\"com.azure.cosmos.implementation.guava25.collect.LinkedListMultimap.get\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#get\"></xref>, <xref uid=\"com.azure.cosmos.implementation.guava25.collect.LinkedListMultimap.keySet*\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#keySet()\"></xref>, <xref uid=\"com.azure.cosmos.implementation.guava25.collect.LinkedListMultimap.keys*\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#keys()\"></xref>, <xref uid=\"com.azure.cosmos.implementation.guava25.collect.LinkedListMultimap.values\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#values\"></xref>, <xref uid=\"com.azure.cosmos.implementation.guava25.collect.LinkedListMultimap.entries()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#entries()\"></xref>, and <xref uid=\"com.azure.cosmos.implementation.guava25.collect.LinkedListMultimap.asMap\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#asMap\"></xref> return collections that are views of the multimap. If the multimap is modified while an iteration over any of those collections is in progress, except through the iterator's methods, the results of the iteration are undefined.\n\nKeys and values may be null. All optional multimap methods are supported, and all returned views are modifiable.\n\nThis class is not threadsafe when any concurrent operations update the multimap. Concurrent read operations will work correctly. To allow concurrent update operations, wrap your multimap with a call to <xref uid=\"com.azure.cosmos.implementation.guava25.collect.Multimaps.synchronizedListMultimap\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Multimaps#synchronizedListMultimap\"></xref>.\n\nSee the Guava User Guide article on [ `Multimap`][_Multimap].\n\n\n[_Multimap]: https://github.com/google/guava/wiki/NewCollectionTypesExplained#multimap"
inheritances:
- "<xref href=\"java.lang.Object\" data-throw-if-not-resolved=\"False\" />"
- "<xref href=\"com.azure.cosmos.implementation.guava25.collect.AbstractMultimap\" data-throw-if-not-resolved=\"False\" />"
inheritedMembers:
- "com.azure.cosmos.implementation.guava25.collect.AbstractMultimap.asMap()"
- "com.azure.cosmos.implementation.guava25.collect.AbstractMultimap.containsEntry(java.lang.Object,java.lang.Object)"
- "com.azure.cosmos.implementation.guava25.collect.AbstractMultimap.containsValue(java.lang.Object)"
- "com.azure.cosmos.implementation.guava25.collect.AbstractMultimap.entries()"
- "com.azure.cosmos.implementation.guava25.collect.AbstractMultimap.equals(java.lang.Object)"
- "com.azure.cosmos.implementation.guava25.collect.AbstractMultimap.hashCode()"
- "com.azure.cosmos.implementation.guava25.collect.AbstractMultimap.isEmpty()"
- "com.azure.cosmos.implementation.guava25.collect.AbstractMultimap.keySet()"
- "com.azure.cosmos.implementation.guava25.collect.AbstractMultimap.keys()"
- "com.azure.cosmos.implementation.guava25.collect.AbstractMultimap.put(K,V)"
- "com.azure.cosmos.implementation.guava25.collect.AbstractMultimap.putAll(K,java.lang.Iterable<? extends V>)"
- "com.azure.cosmos.implementation.guava25.collect.AbstractMultimap.putAll(com.azure.cosmos.implementation.guava25.collect.Multimap<? extends K,? extends V>)"
- "com.azure.cosmos.implementation.guava25.collect.AbstractMultimap.remove(java.lang.Object,java.lang.Object)"
- "com.azure.cosmos.implementation.guava25.collect.AbstractMultimap.replaceValues(K,java.lang.Iterable<? extends V>)"
- "com.azure.cosmos.implementation.guava25.collect.AbstractMultimap.toString()"
- "com.azure.cosmos.implementation.guava25.collect.AbstractMultimap.values()"
- "java.lang.Object.clone()"
- "java.lang.Object.finalize()"
- "java.lang.Object.getClass()"
- "java.lang.Object.notify()"
- "java.lang.Object.notifyAll()"
- "java.lang.Object.wait()"
- "java.lang.Object.wait(long)"
- "java.lang.Object.wait(long,int)"
syntax: "public class LinkedListMultimap<K,V> extends AbstractMultimap<K,V> implements ListMultimap<K,V>, Serializable"
methods:
- "com.azure.cosmos.implementation.guava25.collect.LinkedListMultimap.<K,V>create()"
- "com.azure.cosmos.implementation.guava25.collect.LinkedListMultimap.<K,V>create(com.azure.cosmos.implementation.guava25.collect.Multimap<? extends K,? extends V>)"
- "com.azure.cosmos.implementation.guava25.collect.LinkedListMultimap.<K,V>create(int)"
- "com.azure.cosmos.implementation.guava25.collect.LinkedListMultimap.clear()"
- "com.azure.cosmos.implementation.guava25.collect.LinkedListMultimap.containsKey(java.lang.Object)"
- "com.azure.cosmos.implementation.guava25.collect.LinkedListMultimap.containsValue(java.lang.Object)"
- "com.azure.cosmos.implementation.guava25.collect.LinkedListMultimap.entries()"
- "com.azure.cosmos.implementation.guava25.collect.LinkedListMultimap.get(K)"
- "com.azure.cosmos.implementation.guava25.collect.LinkedListMultimap.isEmpty()"
- "com.azure.cosmos.implementation.guava25.collect.LinkedListMultimap.put(K,V)"
- "com.azure.cosmos.implementation.guava25.collect.LinkedListMultimap.removeAll(java.lang.Object)"
- "com.azure.cosmos.implementation.guava25.collect.LinkedListMultimap.replaceValues(K,java.lang.Iterable<? extends V>)"
- "com.azure.cosmos.implementation.guava25.collect.LinkedListMultimap.size()"
- "com.azure.cosmos.implementation.guava25.collect.LinkedListMultimap.values()"
type: "class"
typeParameters:
- name: "K"
- name: "V"
implements:
- "<xref href=\"com.azure.cosmos.implementation.guava25.collect.ListMultimap?alt=com.azure.cosmos.implementation.guava25.collect.ListMultimap&text=ListMultimap\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"K?alt=K&text=K\" data-throw-if-not-resolved=\"False\" />,<xref href=\"V?alt=V&text=V\" data-throw-if-not-resolved=\"False\" />&gt;"
- "<xref href=\"java.io.Serializable?alt=java.io.Serializable&text=Serializable\" data-throw-if-not-resolved=\"False\" />"
metadata: {}
package: "com.azure.cosmos.implementation.guava25.collect"
artifact: com.azure:azure-cosmos:4.4.0-beta.1
