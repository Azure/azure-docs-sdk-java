### YamlMime:ManagedReference
items:
- uid: com.azure.cosmos.implementation.guava25.collect.LinkedListMultimap
  id: LinkedListMultimap
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect
  children:
  - com.azure.cosmos.implementation.guava25.collect.LinkedListMultimap.<K,V>create()
  - com.azure.cosmos.implementation.guava25.collect.LinkedListMultimap.<K,V>create(com.azure.cosmos.implementation.guava25.collect.Multimap<? extends K,? extends V>)
  - com.azure.cosmos.implementation.guava25.collect.LinkedListMultimap.<K,V>create(int)
  - com.azure.cosmos.implementation.guava25.collect.LinkedListMultimap.clear()
  - com.azure.cosmos.implementation.guava25.collect.LinkedListMultimap.containsKey(java.lang.Object)
  - com.azure.cosmos.implementation.guava25.collect.LinkedListMultimap.containsValue(java.lang.Object)
  - com.azure.cosmos.implementation.guava25.collect.LinkedListMultimap.entries()
  - com.azure.cosmos.implementation.guava25.collect.LinkedListMultimap.get(K)
  - com.azure.cosmos.implementation.guava25.collect.LinkedListMultimap.isEmpty()
  - com.azure.cosmos.implementation.guava25.collect.LinkedListMultimap.put(K,V)
  - com.azure.cosmos.implementation.guava25.collect.LinkedListMultimap.removeAll(java.lang.Object)
  - com.azure.cosmos.implementation.guava25.collect.LinkedListMultimap.replaceValues(K,java.lang.Iterable<? extends V>)
  - com.azure.cosmos.implementation.guava25.collect.LinkedListMultimap.size()
  - com.azure.cosmos.implementation.guava25.collect.LinkedListMultimap.values()
  langs:
  - java
  name: LinkedListMultimap<K,V>
  nameWithType: LinkedListMultimap<K,V>
  fullName: com.azure.cosmos.implementation.guava25.collect.LinkedListMultimap<K,V>
  type: Class
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    An implementation of `ListMultimap` that supports deterministic iteration order for both keys and values. The iteration order is preserved across non-distinct key values. For example, for the following multimap definition:


    ```java

    Multimap multimap = LinkedListMultimap.create();
     multimap.put(key1, foo);
     multimap.put(key2, bar);
     multimap.put(key1, baz);
    ```


    ... the iteration order for <xref uid="com.azure.cosmos.implementation.guava25.collect.LinkedListMultimap.keys*" data-throw-if-not-resolved="false">#keys()</xref> is `[key1, key2, key1]`, and similarly for <xref uid="com.azure.cosmos.implementation.guava25.collect.LinkedListMultimap.entries()" data-throw-if-not-resolved="false">#entries()</xref>. Unlike <xref uid="com.azure.cosmos.implementation.guava25.collect.LinkedHashMultimap" data-throw-if-not-resolved="false">LinkedHashMultimap</xref>, the iteration order is kept consistent between keys, entries and values. For example, calling:


    ```java

    map.remove(key1, foo);

    ```


    changes the entries iteration order to `[key2=bar, key1=baz]` and the key iteration order to `[key2, key1]`. The <xref uid="com.azure.cosmos.implementation.guava25.collect.LinkedListMultimap.entries()" data-throw-if-not-resolved="false">#entries()</xref> iterator returns mutable map entries, and <xref uid="com.azure.cosmos.implementation.guava25.collect.LinkedListMultimap.replaceValues" data-throw-if-not-resolved="false">#replaceValues</xref> attempts to preserve iteration order as much as possible.


    The collections returned by <xref uid="com.azure.cosmos.implementation.guava25.collect.LinkedListMultimap.keySet*" data-throw-if-not-resolved="false">#keySet()</xref> and <xref uid="com.azure.cosmos.implementation.guava25.collect.LinkedListMultimap.asMap" data-throw-if-not-resolved="false">#asMap</xref> iterate through the keys in the order they were first added to the multimap. Similarly, <xref uid="com.azure.cosmos.implementation.guava25.collect.LinkedListMultimap.get" data-throw-if-not-resolved="false">#get</xref>, <xref uid="com.azure.cosmos.implementation.guava25.collect.LinkedListMultimap.removeAll" data-throw-if-not-resolved="false">#removeAll</xref>, and <xref uid="com.azure.cosmos.implementation.guava25.collect.LinkedListMultimap.replaceValues" data-throw-if-not-resolved="false">#replaceValues</xref> return collections that iterate through the values in the order they were added. The collections generated by <xref uid="com.azure.cosmos.implementation.guava25.collect.LinkedListMultimap.entries()" data-throw-if-not-resolved="false">#entries()</xref>, <xref uid="com.azure.cosmos.implementation.guava25.collect.LinkedListMultimap.keys*" data-throw-if-not-resolved="false">#keys()</xref>, and <xref uid="com.azure.cosmos.implementation.guava25.collect.LinkedListMultimap.values" data-throw-if-not-resolved="false">#values</xref> iterate across the key-value mappings in the order they were added to the multimap.


    The <xref uid="com.azure.cosmos.implementation.guava25.collect.LinkedListMultimap.values()" data-throw-if-not-resolved="false">#values()</xref> and <xref uid="com.azure.cosmos.implementation.guava25.collect.LinkedListMultimap.entries()" data-throw-if-not-resolved="false">#entries()</xref> methods both return a `List`, instead of the `Collection` specified by the <xref uid="com.azure.cosmos.implementation.guava25.collect.ListMultimap" data-throw-if-not-resolved="false">ListMultimap</xref> interface.


    The methods <xref uid="com.azure.cosmos.implementation.guava25.collect.LinkedListMultimap.get" data-throw-if-not-resolved="false">#get</xref>, <xref uid="com.azure.cosmos.implementation.guava25.collect.LinkedListMultimap.keySet*" data-throw-if-not-resolved="false">#keySet()</xref>, <xref uid="com.azure.cosmos.implementation.guava25.collect.LinkedListMultimap.keys*" data-throw-if-not-resolved="false">#keys()</xref>, <xref uid="com.azure.cosmos.implementation.guava25.collect.LinkedListMultimap.values" data-throw-if-not-resolved="false">#values</xref>, <xref uid="com.azure.cosmos.implementation.guava25.collect.LinkedListMultimap.entries()" data-throw-if-not-resolved="false">#entries()</xref>, and <xref uid="com.azure.cosmos.implementation.guava25.collect.LinkedListMultimap.asMap" data-throw-if-not-resolved="false">#asMap</xref> return collections that are views of the multimap. If the multimap is modified while an iteration over any of those collections is in progress, except through the iterator's methods, the results of the iteration are undefined.


    Keys and values may be null. All optional multimap methods are supported, and all returned views are modifiable.


    This class is not threadsafe when any concurrent operations update the multimap. Concurrent read operations will work correctly. To allow concurrent update operations, wrap your multimap with a call to <xref uid="com.azure.cosmos.implementation.guava25.collect.Multimaps.synchronizedListMultimap" data-throw-if-not-resolved="false">Multimaps#synchronizedListMultimap</xref>.


    See the Guava User Guide article on [ `Multimap`][_Multimap].



    [_Multimap]: https://github.com/google/guava/wiki/NewCollectionTypesExplained#multimap
  syntax:
    content: public class LinkedListMultimap<K,V> extends AbstractMultimap<K,V> implements ListMultimap<K,V>, Serializable
    typeParameters:
    - id: K
    - id: V
  inheritance:
  - java.lang.Object
  - com.azure.cosmos.implementation.guava25.collect.AbstractMultimap
  implements:
  - com.azure.cosmos.implementation.guava25.collect.ListMultimap<K,V>
  - java.io.Serializable
  inheritedMembers:
  - com.azure.cosmos.implementation.guava25.collect.AbstractMultimap.asMap()
  - com.azure.cosmos.implementation.guava25.collect.AbstractMultimap.containsEntry(java.lang.Object,java.lang.Object)
  - com.azure.cosmos.implementation.guava25.collect.AbstractMultimap.containsValue(java.lang.Object)
  - com.azure.cosmos.implementation.guava25.collect.AbstractMultimap.entries()
  - com.azure.cosmos.implementation.guava25.collect.AbstractMultimap.equals(java.lang.Object)
  - com.azure.cosmos.implementation.guava25.collect.AbstractMultimap.hashCode()
  - com.azure.cosmos.implementation.guava25.collect.AbstractMultimap.isEmpty()
  - com.azure.cosmos.implementation.guava25.collect.AbstractMultimap.keySet()
  - com.azure.cosmos.implementation.guava25.collect.AbstractMultimap.keys()
  - com.azure.cosmos.implementation.guava25.collect.AbstractMultimap.put(K,V)
  - com.azure.cosmos.implementation.guava25.collect.AbstractMultimap.putAll(K,java.lang.Iterable<? extends V>)
  - com.azure.cosmos.implementation.guava25.collect.AbstractMultimap.putAll(com.azure.cosmos.implementation.guava25.collect.Multimap<? extends K,? extends V>)
  - com.azure.cosmos.implementation.guava25.collect.AbstractMultimap.remove(java.lang.Object,java.lang.Object)
  - com.azure.cosmos.implementation.guava25.collect.AbstractMultimap.replaceValues(K,java.lang.Iterable<? extends V>)
  - com.azure.cosmos.implementation.guava25.collect.AbstractMultimap.toString()
  - com.azure.cosmos.implementation.guava25.collect.AbstractMultimap.values()
  - java.lang.Object.clone()
  - java.lang.Object.finalize()
  - java.lang.Object.getClass()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
- uid: com.azure.cosmos.implementation.guava25.collect.LinkedListMultimap.<K,V>create()
  id: <K,V>create()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.LinkedListMultimap
  langs:
  - java
  name: <K,V>create()
  nameWithType: LinkedListMultimap<K,V>.<K,V>create()
  fullName: com.azure.cosmos.implementation.guava25.collect.LinkedListMultimap<K,V>.<K,V>create()
  overload: com.azure.cosmos.implementation.guava25.collect.LinkedListMultimap.create*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Creates a new, empty `LinkedListMultimap` with the default initial capacity.
  syntax:
    content: public static LinkedListMultimap<K,V> <K,V>create()
    return:
      type: com.azure.cosmos.implementation.guava25.collect.LinkedListMultimap<K,V>
- uid: com.azure.cosmos.implementation.guava25.collect.LinkedListMultimap.<K,V>create(com.azure.cosmos.implementation.guava25.collect.Multimap<? extends K,? extends V>)
  id: <K,V>create(com.azure.cosmos.implementation.guava25.collect.Multimap<? extends K,? extends V>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.LinkedListMultimap
  langs:
  - java
  name: <K,V>create(Multimap<? extends K,? extends V> multimap)
  nameWithType: LinkedListMultimap<K,V>.<K,V>create(Multimap<? extends K,? extends V> multimap)
  fullName: com.azure.cosmos.implementation.guava25.collect.LinkedListMultimap<K,V>.<K,V>create(Multimap<? extends K,? extends V> multimap)
  overload: com.azure.cosmos.implementation.guava25.collect.LinkedListMultimap.create*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Constructs a `LinkedListMultimap` with the same mappings as the specified `Multimap`. The new multimap has the same <xref uid="com.azure.cosmos.implementation.guava25.collect.Multimap.entries()" data-throw-if-not-resolved="false">Multimap#entries()</xref> iteration order as the input multimap.
  syntax:
    content: public static LinkedListMultimap<K,V> <K,V>create(Multimap<? extends K,? extends V> multimap)
    parameters:
    - id: multimap
      type: com.azure.cosmos.implementation.guava25.collect.Multimap<? extends K,? extends V>
      description: the multimap whose contents are copied to this multimap
    return:
      type: com.azure.cosmos.implementation.guava25.collect.LinkedListMultimap<K,V>
- uid: com.azure.cosmos.implementation.guava25.collect.LinkedListMultimap.<K,V>create(int)
  id: <K,V>create(int)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.LinkedListMultimap
  langs:
  - java
  name: <K,V>create(int expectedKeys)
  nameWithType: LinkedListMultimap<K,V>.<K,V>create(int expectedKeys)
  fullName: com.azure.cosmos.implementation.guava25.collect.LinkedListMultimap<K,V>.<K,V>create(int expectedKeys)
  overload: com.azure.cosmos.implementation.guava25.collect.LinkedListMultimap.create*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Constructs an empty `LinkedListMultimap` with enough capacity to hold the specified number of keys without rehashing.
  syntax:
    content: public static LinkedListMultimap<K,V> <K,V>create(int expectedKeys)
    parameters:
    - id: expectedKeys
      type: int
      description: the expected number of distinct keys
    return:
      type: com.azure.cosmos.implementation.guava25.collect.LinkedListMultimap<K,V>
- uid: com.azure.cosmos.implementation.guava25.collect.LinkedListMultimap.LinkedListMultimap()
  id: LinkedListMultimap()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.LinkedListMultimap
  langs:
  - java
  name: LinkedListMultimap()
  nameWithType: LinkedListMultimap<K,V>.LinkedListMultimap()
  fullName: com.azure.cosmos.implementation.guava25.collect.LinkedListMultimap<K,V>.LinkedListMultimap()
  overload: com.azure.cosmos.implementation.guava25.collect.LinkedListMultimap.LinkedListMultimap*
  type: Constructor
  package: com.azure.cosmos.implementation.guava25.collect
  syntax:
    content: " LinkedListMultimap()"
- uid: com.azure.cosmos.implementation.guava25.collect.LinkedListMultimap.LinkedListMultimap(com.azure.cosmos.implementation.guava25.collect.Multimap<? extends K,? extends V>)
  id: LinkedListMultimap(com.azure.cosmos.implementation.guava25.collect.Multimap<? extends K,? extends V>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.LinkedListMultimap
  langs:
  - java
  name: LinkedListMultimap(Multimap<? extends K,? extends V> multimap)
  nameWithType: LinkedListMultimap<K,V>.LinkedListMultimap(Multimap<? extends K,? extends V> multimap)
  fullName: com.azure.cosmos.implementation.guava25.collect.LinkedListMultimap<K,V>.LinkedListMultimap(Multimap<? extends K,? extends V> multimap)
  overload: com.azure.cosmos.implementation.guava25.collect.LinkedListMultimap.LinkedListMultimap*
  type: Constructor
  package: com.azure.cosmos.implementation.guava25.collect
  syntax:
    content: private LinkedListMultimap(Multimap<? extends K,? extends V> multimap)
    parameters:
    - id: multimap
      type: com.azure.cosmos.implementation.guava25.collect.Multimap<? extends K,? extends V>
- uid: com.azure.cosmos.implementation.guava25.collect.LinkedListMultimap.LinkedListMultimap(int)
  id: LinkedListMultimap(int)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.LinkedListMultimap
  langs:
  - java
  name: LinkedListMultimap(int expectedKeys)
  nameWithType: LinkedListMultimap<K,V>.LinkedListMultimap(int expectedKeys)
  fullName: com.azure.cosmos.implementation.guava25.collect.LinkedListMultimap<K,V>.LinkedListMultimap(int expectedKeys)
  overload: com.azure.cosmos.implementation.guava25.collect.LinkedListMultimap.LinkedListMultimap*
  type: Constructor
  package: com.azure.cosmos.implementation.guava25.collect
  syntax:
    content: private LinkedListMultimap(int expectedKeys)
    parameters:
    - id: expectedKeys
      type: int
- uid: com.azure.cosmos.implementation.guava25.collect.LinkedListMultimap.clear()
  id: clear()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.LinkedListMultimap
  langs:
  - java
  name: clear()
  nameWithType: LinkedListMultimap<K,V>.clear()
  fullName: com.azure.cosmos.implementation.guava25.collect.LinkedListMultimap<K,V>.clear()
  overload: com.azure.cosmos.implementation.guava25.collect.LinkedListMultimap.clear*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Removes all key-value pairs from the multimap, leaving it <xref uid="com.azure.cosmos.implementation.guava25.collect.LinkedListMultimap.isEmpty" data-throw-if-not-resolved="false">empty</xref>.
  syntax:
    content: public void clear()
- uid: com.azure.cosmos.implementation.guava25.collect.LinkedListMultimap.containsKey(java.lang.Object)
  id: containsKey(java.lang.Object)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.LinkedListMultimap
  langs:
  - java
  name: containsKey(Object key)
  nameWithType: LinkedListMultimap<K,V>.containsKey(Object key)
  fullName: com.azure.cosmos.implementation.guava25.collect.LinkedListMultimap<K,V>.containsKey(Object key)
  overload: com.azure.cosmos.implementation.guava25.collect.LinkedListMultimap.containsKey*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Returns `true` if this multimap contains at least one key-value pair with the key `key`.
  syntax:
    content: public boolean containsKey(Object key)
    parameters:
    - id: key
      type: java.lang.Object
    return:
      type: boolean
- uid: com.azure.cosmos.implementation.guava25.collect.LinkedListMultimap.containsValue(java.lang.Object)
  id: containsValue(java.lang.Object)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.LinkedListMultimap
  langs:
  - java
  name: containsValue(Object value)
  nameWithType: LinkedListMultimap<K,V>.containsValue(Object value)
  fullName: com.azure.cosmos.implementation.guava25.collect.LinkedListMultimap<K,V>.containsValue(Object value)
  overload: com.azure.cosmos.implementation.guava25.collect.LinkedListMultimap.containsValue*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Returns `true` if this multimap contains at least one key-value pair with the value `value`.
  syntax:
    content: public boolean containsValue(Object value)
    parameters:
    - id: value
      type: java.lang.Object
    return:
      type: boolean
- uid: com.azure.cosmos.implementation.guava25.collect.LinkedListMultimap.entries()
  id: entries()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.LinkedListMultimap
  langs:
  - java
  name: entries()
  nameWithType: LinkedListMultimap<K,V>.entries()
  fullName: com.azure.cosmos.implementation.guava25.collect.LinkedListMultimap<K,V>.entries()
  overload: com.azure.cosmos.implementation.guava25.collect.LinkedListMultimap.entries*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Returns a view collection of all key-value pairs contained in this multimap, as <xref uid="java.util.Map.Entry" data-throw-if-not-resolved="false">Entry</xref> instances.


    Changes to the returned collection or the entries it contains will update the underlying multimap, and vice versa. However, *adding* to the returned collection is not possible.


    The iterator generated by the returned collection traverses the entries in the order they were added to the multimap. Because the entries may have duplicates and follow the insertion ordering, this method returns a <xref uid="java.util.List" data-throw-if-not-resolved="false">List</xref>, instead of the <xref uid="java.util.Collection" data-throw-if-not-resolved="false">Collection</xref> specified in the <xref uid="com.azure.cosmos.implementation.guava25.collect.ListMultimap" data-throw-if-not-resolved="false">ListMultimap</xref> interface.


    An entry's <xref uid="java.util.Map.Entry.getKey" data-throw-if-not-resolved="false">Entry#getKey</xref> method always returns the same key, regardless of what happens subsequently. As long as the corresponding key-value mapping is not removed from the multimap, <xref uid="java.util.Map.Entry.getValue" data-throw-if-not-resolved="false">Entry#getValue</xref> returns the value from the multimap, which may change over time, and <xref uid="java.util.Map.Entry.setValue" data-throw-if-not-resolved="false">Entry#setValue</xref> modifies that value. Removing the mapping from the multimap does not alter the value returned by `getValue()`, though a subsequent `setValue()` call won't update the multimap but will lead to a revised value being returned by `getValue()`.
  syntax:
    content: public List<Map.Entry<K,V>> entries()
    return:
      type: java.util.List<java.util.Map.Entry<K,V>>
- uid: com.azure.cosmos.implementation.guava25.collect.LinkedListMultimap.get(K)
  id: get(K)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.LinkedListMultimap
  langs:
  - java
  name: get(K key)
  nameWithType: LinkedListMultimap<K,V>.get(K key)
  fullName: com.azure.cosmos.implementation.guava25.collect.LinkedListMultimap<K,V>.get(K key)
  overload: com.azure.cosmos.implementation.guava25.collect.LinkedListMultimap.get*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Returns a view collection of the values associated with `key` in this multimap, if any. Note that when `containsKey(key)` is false, this returns an empty collection, not `null`.


    Changes to the returned collection will update the underlying multimap, and vice versa.


    Because the values for a given key may have duplicates and follow the insertion ordering, this method returns a <xref uid="java.util.List" data-throw-if-not-resolved="false">List</xref>, instead of the <xref uid="java.util.Collection" data-throw-if-not-resolved="false">java.util.Collection</xref> specified in the <xref uid="com.azure.cosmos.implementation.guava25.collect.Multimap" data-throw-if-not-resolved="false">Multimap</xref> interface.


    If the multimap is modified while an iteration over the list is in progress (except through the iterator's own `add`, `set` or `remove` operations) the results of the iteration are undefined.


    The returned list is not serializable and does not have random access.
  syntax:
    content: public List<V> get(K key)
    parameters:
    - id: key
      type: K
    return:
      type: java.util.List<V>
- uid: com.azure.cosmos.implementation.guava25.collect.LinkedListMultimap.isEmpty()
  id: isEmpty()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.LinkedListMultimap
  langs:
  - java
  name: isEmpty()
  nameWithType: LinkedListMultimap<K,V>.isEmpty()
  fullName: com.azure.cosmos.implementation.guava25.collect.LinkedListMultimap<K,V>.isEmpty()
  overload: com.azure.cosmos.implementation.guava25.collect.LinkedListMultimap.isEmpty*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Returns `true` if this multimap contains no key-value pairs. Equivalent to `size() == 0`, but can in some cases be more efficient.
  syntax:
    content: public boolean isEmpty()
    return:
      type: boolean
- uid: com.azure.cosmos.implementation.guava25.collect.LinkedListMultimap.put(K,V)
  id: put(K,V)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.LinkedListMultimap
  langs:
  - java
  name: put(K key, V value)
  nameWithType: LinkedListMultimap<K,V>.put(K key, V value)
  fullName: com.azure.cosmos.implementation.guava25.collect.LinkedListMultimap<K,V>.put(K key, V value)
  overload: com.azure.cosmos.implementation.guava25.collect.LinkedListMultimap.put*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Stores a key-value pair in the multimap.
  syntax:
    content: public boolean put(K key, V value)
    parameters:
    - id: key
      type: K
      description: key to store in the multimap
    - id: value
      type: V
      description: value to store in the multimap
    return:
      type: boolean
      description: <code>true</code> always
- uid: com.azure.cosmos.implementation.guava25.collect.LinkedListMultimap.removeAll(java.lang.Object)
  id: removeAll(java.lang.Object)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.LinkedListMultimap
  langs:
  - java
  name: removeAll(Object key)
  nameWithType: LinkedListMultimap<K,V>.removeAll(Object key)
  fullName: com.azure.cosmos.implementation.guava25.collect.LinkedListMultimap<K,V>.removeAll(Object key)
  overload: com.azure.cosmos.implementation.guava25.collect.LinkedListMultimap.removeAll*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Removes all values associated with the key `key`.


    Once this method returns, `key` will not be mapped to any values, so it will not appear in <xref uid="com.azure.cosmos.implementation.guava25.collect.LinkedListMultimap.keySet*" data-throw-if-not-resolved="false">#keySet()</xref>, <xref uid="com.azure.cosmos.implementation.guava25.collect.LinkedListMultimap.asMap*" data-throw-if-not-resolved="false">#asMap()</xref>, or any other views.


    Because the values for a given key may have duplicates and follow the insertion ordering, this method returns a <xref uid="java.util.List" data-throw-if-not-resolved="false">List</xref>, instead of the <xref uid="java.util.Collection" data-throw-if-not-resolved="false">java.util.Collection</xref> specified in the <xref uid="com.azure.cosmos.implementation.guava25.collect.Multimap" data-throw-if-not-resolved="false">Multimap</xref> interface.


    The returned list is immutable and implements <xref uid="java.util.RandomAccess" data-throw-if-not-resolved="false">java.util.RandomAccess</xref>.
  syntax:
    content: public List<V> removeAll(Object key)
    parameters:
    - id: key
      type: java.lang.Object
    return:
      type: java.util.List<V>
- uid: com.azure.cosmos.implementation.guava25.collect.LinkedListMultimap.replaceValues(K,java.lang.Iterable<? extends V>)
  id: replaceValues(K,java.lang.Iterable<? extends V>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.LinkedListMultimap
  langs:
  - java
  name: replaceValues(K key, Iterable<? extends V> values)
  nameWithType: LinkedListMultimap<K,V>.replaceValues(K key, Iterable<? extends V> values)
  fullName: com.azure.cosmos.implementation.guava25.collect.LinkedListMultimap<K,V>.replaceValues(K key, Iterable<? extends V> values)
  overload: com.azure.cosmos.implementation.guava25.collect.LinkedListMultimap.replaceValues*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Stores a collection of values with the same key, replacing any existing values for that key.


    If `values` is empty, this is equivalent to <xref uid="com.azure.cosmos.implementation.guava25.collect.LinkedListMultimap.removeAll(java.lang.Object)" data-throw-if-not-resolved="false">removeAll(key)</xref>.


    If any entries for the specified `key` already exist in the multimap, their values are changed in-place without affecting the iteration order.


    The returned list is immutable and implements <xref uid="java.util.RandomAccess" data-throw-if-not-resolved="false">java.util.RandomAccess</xref>.
  syntax:
    content: public List<V> replaceValues(K key, Iterable<? extends V> values)
    parameters:
    - id: key
      type: K
    - id: values
      type: java.lang.Iterable<? extends V>
    return:
      type: java.util.List<V>
- uid: com.azure.cosmos.implementation.guava25.collect.LinkedListMultimap.size()
  id: size()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.LinkedListMultimap
  langs:
  - java
  name: size()
  nameWithType: LinkedListMultimap<K,V>.size()
  fullName: com.azure.cosmos.implementation.guava25.collect.LinkedListMultimap<K,V>.size()
  overload: com.azure.cosmos.implementation.guava25.collect.LinkedListMultimap.size*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Returns the number of key-value pairs in this multimap.


    **Note:** this method does not return the number of *distinct keys* in the multimap, which is given by `keySet().size()` or `asMap().size()`. See the opening section of the <xref uid="com.azure.cosmos.implementation.guava25.collect.Multimap" data-throw-if-not-resolved="false">Multimap</xref> class documentation for clarification.
  syntax:
    content: public int size()
    return:
      type: int
- uid: com.azure.cosmos.implementation.guava25.collect.LinkedListMultimap.values()
  id: values()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.LinkedListMultimap
  langs:
  - java
  name: values()
  nameWithType: LinkedListMultimap<K,V>.values()
  fullName: com.azure.cosmos.implementation.guava25.collect.LinkedListMultimap<K,V>.values()
  overload: com.azure.cosmos.implementation.guava25.collect.LinkedListMultimap.values*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Returns a view collection containing the *value* from each key-value pair contained in this multimap, without collapsing duplicates (so `values().size() == size()`).


    Changes to the returned collection will update the underlying multimap, and vice versa. However, *adding* to the returned collection is not possible.


    The iterator generated by the returned collection traverses the values in the order they were added to the multimap. Because the values may have duplicates and follow the insertion ordering, this method returns a <xref uid="java.util.List" data-throw-if-not-resolved="false">List</xref>, instead of the <xref uid="java.util.Collection" data-throw-if-not-resolved="false">Collection</xref> specified in the <xref uid="com.azure.cosmos.implementation.guava25.collect.ListMultimap" data-throw-if-not-resolved="false">ListMultimap</xref> interface.
  syntax:
    content: public List<V> values()
    return:
      type: java.util.List<V>
references:
- uid: com.azure.cosmos.implementation.guava25.collect.LinkedListMultimap.LinkedListMultimap*
  name: LinkedListMultimap
  nameWithType: LinkedListMultimap<K,V>.LinkedListMultimap
  fullName: com.azure.cosmos.implementation.guava25.collect.LinkedListMultimap<K,V>.LinkedListMultimap
  package: com.azure.cosmos.implementation.guava25.collect
- uid: int
  spec.java:
  - uid: int
    name: int
    fullName: int
- uid: com.azure.cosmos.implementation.guava25.collect.Multimap<? extends K,? extends V>
  spec.java:
  - uid: com.azure.cosmos.implementation.guava25.collect.Multimap
    name: Multimap
    fullName: com.azure.cosmos.implementation.guava25.collect.Multimap
  - name: <
    fullName: <
  - uid: '? extends K'
    name: '? extends K'
    fullName: '? extends K'
  - name: ','
    fullName: ','
  - uid: '? extends V'
    name: '? extends V'
    fullName: '? extends V'
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.LinkedListMultimap<K,V>
  spec.java:
  - uid: com.azure.cosmos.implementation.guava25.collect.LinkedListMultimap
    name: LinkedListMultimap
    fullName: com.azure.cosmos.implementation.guava25.collect.LinkedListMultimap
  - name: <
    fullName: <
  - uid: K
    name: K
    fullName: K
  - name: ','
    fullName: ','
  - uid: V
    name: V
    fullName: V
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.LinkedListMultimap.create*
  name: <K,V>create
  nameWithType: LinkedListMultimap<K,V>.<K,V>create
  fullName: com.azure.cosmos.implementation.guava25.collect.LinkedListMultimap<K,V>.<K,V>create
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.LinkedListMultimap.size*
  name: size
  nameWithType: LinkedListMultimap<K,V>.size
  fullName: com.azure.cosmos.implementation.guava25.collect.LinkedListMultimap<K,V>.size
  package: com.azure.cosmos.implementation.guava25.collect
- uid: boolean
  spec.java:
  - uid: boolean
    name: boolean
    fullName: boolean
- uid: com.azure.cosmos.implementation.guava25.collect.LinkedListMultimap.isEmpty*
  name: isEmpty
  nameWithType: LinkedListMultimap<K,V>.isEmpty
  fullName: com.azure.cosmos.implementation.guava25.collect.LinkedListMultimap<K,V>.isEmpty
  package: com.azure.cosmos.implementation.guava25.collect
- uid: java.lang.Object
  spec.java:
  - uid: java.lang.Object
    name: Object
    fullName: java.lang.Object
- uid: com.azure.cosmos.implementation.guava25.collect.LinkedListMultimap.containsKey*
  name: containsKey
  nameWithType: LinkedListMultimap<K,V>.containsKey
  fullName: com.azure.cosmos.implementation.guava25.collect.LinkedListMultimap<K,V>.containsKey
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.LinkedListMultimap.containsValue*
  name: containsValue
  nameWithType: LinkedListMultimap<K,V>.containsValue
  fullName: com.azure.cosmos.implementation.guava25.collect.LinkedListMultimap<K,V>.containsValue
  package: com.azure.cosmos.implementation.guava25.collect
- uid: K
  spec.java:
  - uid: K
    name: K
    fullName: K
- uid: V
  spec.java:
  - uid: V
    name: V
    fullName: V
- uid: com.azure.cosmos.implementation.guava25.collect.LinkedListMultimap.put*
  name: put
  nameWithType: LinkedListMultimap<K,V>.put
  fullName: com.azure.cosmos.implementation.guava25.collect.LinkedListMultimap<K,V>.put
  package: com.azure.cosmos.implementation.guava25.collect
- uid: java.lang.Iterable<? extends V>
  spec.java:
  - uid: java.lang.Iterable
    name: Iterable
    fullName: java.lang.Iterable
  - name: <
    fullName: <
  - uid: '? extends V'
    name: '? extends V'
    fullName: '? extends V'
  - name: '>'
    fullName: '>'
- uid: java.util.List<V>
  spec.java:
  - uid: java.util.List
    name: List
    fullName: java.util.List
  - name: <
    fullName: <
  - uid: V
    name: V
    fullName: V
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.LinkedListMultimap.replaceValues*
  name: replaceValues
  nameWithType: LinkedListMultimap<K,V>.replaceValues
  fullName: com.azure.cosmos.implementation.guava25.collect.LinkedListMultimap<K,V>.replaceValues
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.LinkedListMultimap.removeAll*
  name: removeAll
  nameWithType: LinkedListMultimap<K,V>.removeAll
  fullName: com.azure.cosmos.implementation.guava25.collect.LinkedListMultimap<K,V>.removeAll
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.LinkedListMultimap.clear*
  name: clear
  nameWithType: LinkedListMultimap<K,V>.clear
  fullName: com.azure.cosmos.implementation.guava25.collect.LinkedListMultimap<K,V>.clear
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.LinkedListMultimap.get*
  name: get
  nameWithType: LinkedListMultimap<K,V>.get
  fullName: com.azure.cosmos.implementation.guava25.collect.LinkedListMultimap<K,V>.get
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.LinkedListMultimap.values*
  name: values
  nameWithType: LinkedListMultimap<K,V>.values
  fullName: com.azure.cosmos.implementation.guava25.collect.LinkedListMultimap<K,V>.values
  package: com.azure.cosmos.implementation.guava25.collect
- uid: java.util.List<java.util.Map.Entry<K,V>>
  spec.java:
  - uid: java.util.List
    name: List
    fullName: java.util.List
  - name: <
    fullName: <
  - uid: java.util.Map.Entry
    name: Entry
    fullName: java.util.Map.Entry
  - name: <
    fullName: <
  - uid: K
    name: K
    fullName: K
  - name: ','
    fullName: ','
  - uid: V
    name: V
    fullName: V
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.LinkedListMultimap.entries*
  name: entries
  nameWithType: LinkedListMultimap<K,V>.entries
  fullName: com.azure.cosmos.implementation.guava25.collect.LinkedListMultimap<K,V>.entries
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.AbstractMultimap<K,V>
  name: AbstractMultimap<K,V>
  nameWithType: AbstractMultimap<K,V>
  fullName: com.azure.cosmos.implementation.guava25.collect.AbstractMultimap<K,V>
- uid: com.azure.cosmos.implementation.guava25.collect.ListMultimap<K,V>
  name: ListMultimap<K,V>
  nameWithType: ListMultimap<K,V>
  fullName: com.azure.cosmos.implementation.guava25.collect.ListMultimap<K,V>
- uid: java.io.Serializable
  name: Serializable
  nameWithType: Serializable
  fullName: java.io.Serializable
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: com.azure.cosmos.implementation.guava25.collect.AbstractMultimap.keys()
  name: AbstractMultimap.keys()
  nameWithType: AbstractMultimap.keys()
  fullName: com.azure.cosmos.implementation.guava25.collect.AbstractMultimap.keys()
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: com.azure.cosmos.implementation.guava25.collect.AbstractMultimap.isEmpty()
  name: AbstractMultimap.isEmpty()
  nameWithType: AbstractMultimap.isEmpty()
  fullName: com.azure.cosmos.implementation.guava25.collect.AbstractMultimap.isEmpty()
- uid: java.lang.Object.finalize()
  name: Object.finalize()
  nameWithType: Object.finalize()
  fullName: java.lang.Object.finalize()
- uid: com.azure.cosmos.implementation.guava25.collect.AbstractMultimap.entries()
  name: AbstractMultimap.entries()
  nameWithType: AbstractMultimap.entries()
  fullName: com.azure.cosmos.implementation.guava25.collect.AbstractMultimap.entries()
- uid: com.azure.cosmos.implementation.guava25.collect.AbstractMultimap.asMap()
  name: AbstractMultimap.asMap()
  nameWithType: AbstractMultimap.asMap()
  fullName: com.azure.cosmos.implementation.guava25.collect.AbstractMultimap.asMap()
- uid: com.azure.cosmos.implementation.guava25.collect.AbstractMultimap.hashCode()
  name: AbstractMultimap.hashCode()
  nameWithType: AbstractMultimap.hashCode()
  fullName: com.azure.cosmos.implementation.guava25.collect.AbstractMultimap.hashCode()
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: java.lang.Object.clone()
  name: Object.clone()
  nameWithType: Object.clone()
  fullName: java.lang.Object.clone()
- uid: com.azure.cosmos.implementation.guava25.collect.AbstractMultimap.containsValue(java.lang.Object)
  name: AbstractMultimap.containsValue(Object)
  nameWithType: AbstractMultimap.containsValue(Object)
  fullName: com.azure.cosmos.implementation.guava25.collect.AbstractMultimap.containsValue(java.lang.Object)
- uid: com.azure.cosmos.implementation.guava25.collect.AbstractMultimap.toString()
  name: AbstractMultimap.toString()
  nameWithType: AbstractMultimap.toString()
  fullName: com.azure.cosmos.implementation.guava25.collect.AbstractMultimap.toString()
- uid: com.azure.cosmos.implementation.guava25.collect.AbstractMultimap.putAll(com.azure.cosmos.implementation.guava25.collect.Multimap<? extends K,? extends V>)
  name: AbstractMultimap.putAll(Multimap<? extends K,? extends V>)
  nameWithType: AbstractMultimap.putAll(Multimap<? extends K,? extends V>)
  fullName: com.azure.cosmos.implementation.guava25.collect.AbstractMultimap.putAll(com.azure.cosmos.implementation.guava25.collect.Multimap<? extends K,? extends V>)
- uid: com.azure.cosmos.implementation.guava25.collect.AbstractMultimap.containsEntry(java.lang.Object,java.lang.Object)
  name: AbstractMultimap.containsEntry(Object,Object)
  nameWithType: AbstractMultimap.containsEntry(Object,Object)
  fullName: com.azure.cosmos.implementation.guava25.collect.AbstractMultimap.containsEntry(java.lang.Object,java.lang.Object)
- uid: com.azure.cosmos.implementation.guava25.collect.AbstractMultimap.equals(java.lang.Object)
  name: AbstractMultimap.equals(Object)
  nameWithType: AbstractMultimap.equals(Object)
  fullName: com.azure.cosmos.implementation.guava25.collect.AbstractMultimap.equals(java.lang.Object)
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: com.azure.cosmos.implementation.guava25.collect.AbstractMultimap.putAll(K,java.lang.Iterable<? extends V>)
  name: AbstractMultimap.putAll(K,Iterable<? extends V>)
  nameWithType: AbstractMultimap.putAll(K,Iterable<? extends V>)
  fullName: com.azure.cosmos.implementation.guava25.collect.AbstractMultimap.putAll(K,java.lang.Iterable<? extends V>)
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: com.azure.cosmos.implementation.guava25.collect.AbstractMultimap.replaceValues(K,java.lang.Iterable<? extends V>)
  name: AbstractMultimap.replaceValues(K,Iterable<? extends V>)
  nameWithType: AbstractMultimap.replaceValues(K,Iterable<? extends V>)
  fullName: com.azure.cosmos.implementation.guava25.collect.AbstractMultimap.replaceValues(K,java.lang.Iterable<? extends V>)
- uid: com.azure.cosmos.implementation.guava25.collect.AbstractMultimap.remove(java.lang.Object,java.lang.Object)
  name: AbstractMultimap.remove(Object,Object)
  nameWithType: AbstractMultimap.remove(Object,Object)
  fullName: com.azure.cosmos.implementation.guava25.collect.AbstractMultimap.remove(java.lang.Object,java.lang.Object)
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: com.azure.cosmos.implementation.guava25.collect.AbstractMultimap.put(K,V)
  name: AbstractMultimap.put(K,V)
  nameWithType: AbstractMultimap.put(K,V)
  fullName: com.azure.cosmos.implementation.guava25.collect.AbstractMultimap.put(K,V)
- uid: com.azure.cosmos.implementation.guava25.collect.AbstractMultimap.keySet()
  name: AbstractMultimap.keySet()
  nameWithType: AbstractMultimap.keySet()
  fullName: com.azure.cosmos.implementation.guava25.collect.AbstractMultimap.keySet()
- uid: com.azure.cosmos.implementation.guava25.collect.AbstractMultimap.values()
  name: AbstractMultimap.values()
  nameWithType: AbstractMultimap.values()
  fullName: com.azure.cosmos.implementation.guava25.collect.AbstractMultimap.values()
- uid: '? extends K,? extends V'
  name: '? extends K,? extends V'
  nameWithType: '? extends K,? extends V'
  fullName: '? extends K,? extends V'
- uid: com.azure.cosmos.implementation.guava25.collect.Multimap
  name: Multimap
  nameWithType: Multimap
  fullName: com.azure.cosmos.implementation.guava25.collect.Multimap
- uid: K,V
  name: K,V
  nameWithType: K,V
  fullName: K,V
- uid: '? extends V'
  name: '? extends V'
  nameWithType: '? extends V'
  fullName: '? extends V'
- uid: java.lang.Iterable
  name: Iterable
  nameWithType: Iterable
  fullName: java.lang.Iterable
- uid: java.util.List
  name: List
  nameWithType: List
  fullName: java.util.List
- uid: java.util.Map.Entry
  name: Map.Entry
  nameWithType: Map.Entry
  fullName: java.util.Map.Entry
- uid: com.azure.cosmos.implementation.guava25.collect.AbstractMultimap
  name: AbstractMultimap
  nameWithType: AbstractMultimap
  fullName: com.azure.cosmos.implementation.guava25.collect.AbstractMultimap
- uid: com.azure.cosmos.implementation.guava25.collect.ListMultimap
  name: ListMultimap
  nameWithType: ListMultimap
  fullName: com.azure.cosmos.implementation.guava25.collect.ListMultimap
- uid: com.azure.cosmos.implementation.guava25.collect.AbstractMultimap.putAll(com.azure.cosmos.implementation.guava25.collect.Multimap
  name: AbstractMultimap.putAll(Multimap
  nameWithType: AbstractMultimap.putAll(Multimap
  fullName: com.azure.cosmos.implementation.guava25.collect.AbstractMultimap.putAll(com.azure.cosmos.implementation.guava25.collect.Multimap
- uid: '? extends K,? extends V>)'
  name: '? extends K,? extends V>)'
  nameWithType: '? extends K,? extends V>)'
  fullName: '? extends K,? extends V>)'
- uid: '? extends V>)'
  name: '? extends V>)'
  nameWithType: '? extends V>)'
  fullName: '? extends V>)'
- uid: com.azure.cosmos.implementation.guava25.collect.AbstractMultimap.putAll(K,java.lang.Iterable
  name: AbstractMultimap.putAll(K,Iterable
  nameWithType: AbstractMultimap.putAll(K,Iterable
  fullName: com.azure.cosmos.implementation.guava25.collect.AbstractMultimap.putAll(K,java.lang.Iterable
- uid: com.azure.cosmos.implementation.guava25.collect.AbstractMultimap.replaceValues(K,java.lang.Iterable
  name: AbstractMultimap.replaceValues(K,Iterable
  nameWithType: AbstractMultimap.replaceValues(K,Iterable
  fullName: com.azure.cosmos.implementation.guava25.collect.AbstractMultimap.replaceValues(K,java.lang.Iterable
