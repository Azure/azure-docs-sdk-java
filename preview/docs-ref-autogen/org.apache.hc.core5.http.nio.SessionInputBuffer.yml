### YamlMime:ManagedReference
items:
- uid: org.apache.hc.core5.http.nio.SessionInputBuffer
  id: SessionInputBuffer
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.apache.hc.core5.http.nio
  children:
  - org.apache.hc.core5.http.nio.SessionInputBuffer.fill(java.nio.channels.ReadableByteChannel)
  - org.apache.hc.core5.http.nio.SessionInputBuffer.hasData()
  - org.apache.hc.core5.http.nio.SessionInputBuffer.length()
  - org.apache.hc.core5.http.nio.SessionInputBuffer.read()
  - org.apache.hc.core5.http.nio.SessionInputBuffer.read(java.nio.ByteBuffer)
  - org.apache.hc.core5.http.nio.SessionInputBuffer.read(java.nio.ByteBuffer,int)
  - org.apache.hc.core5.http.nio.SessionInputBuffer.read(java.nio.channels.WritableByteChannel)
  - org.apache.hc.core5.http.nio.SessionInputBuffer.read(java.nio.channels.WritableByteChannel,int)
  - org.apache.hc.core5.http.nio.SessionInputBuffer.readLine(org.apache.hc.core5.util.CharArrayBuffer,boolean)
  langs:
  - java
  name: SessionInputBuffer
  nameWithType: SessionInputBuffer
  fullName: org.apache.hc.core5.http.nio.SessionInputBuffer
  type: Interface
  package: org.apache.hc.core5.http.nio
  summary: >-
    Session input buffer for HTTP/1.1 non-blocking connections.


    This interface facilitates intermediate buffering of input data streamed from a source channel and provides methods for reading lines of text.
  syntax:
    content: public interface SessionInputBuffer
- uid: org.apache.hc.core5.http.nio.SessionInputBuffer.fill(java.nio.channels.ReadableByteChannel)
  id: fill(java.nio.channels.ReadableByteChannel)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.apache.hc.core5.http.nio.SessionInputBuffer
  langs:
  - java
  name: fill(ReadableByteChannel src)
  nameWithType: SessionInputBuffer.fill(ReadableByteChannel src)
  fullName: org.apache.hc.core5.http.nio.SessionInputBuffer.fill(ReadableByteChannel src)
  overload: org.apache.hc.core5.http.nio.SessionInputBuffer.fill*
  type: Method
  package: org.apache.hc.core5.http.nio
  summary: Makes an attempt to fill the buffer with data from the given <xref uid="java.nio.channels.ReadableByteChannel" data-throw-if-not-resolved="false">ReadableByteChannel</xref>.
  syntax:
    content: public abstract int fill(ReadableByteChannel src)
    parameters:
    - id: src
      type: java.nio.channels.ReadableByteChannel
      description: the source channel
    return:
      type: int
      description: >-
        The number of bytes read, possibly zero, or <code>-1</code> if the
           channel has reached end-of-stream.
  exceptions:
  - type: java.io.IOException
    description: in case of an I/O error.
- uid: org.apache.hc.core5.http.nio.SessionInputBuffer.hasData()
  id: hasData()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.apache.hc.core5.http.nio.SessionInputBuffer
  langs:
  - java
  name: hasData()
  nameWithType: SessionInputBuffer.hasData()
  fullName: org.apache.hc.core5.http.nio.SessionInputBuffer.hasData()
  overload: org.apache.hc.core5.http.nio.SessionInputBuffer.hasData*
  type: Method
  package: org.apache.hc.core5.http.nio
  summary: Determines if the buffer contains data.
  syntax:
    content: public abstract boolean hasData()
    return:
      type: boolean
      description: >-
        <code>true</code> if there is data in the buffer,
           <code>false</code> otherwise.
- uid: org.apache.hc.core5.http.nio.SessionInputBuffer.length()
  id: length()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.apache.hc.core5.http.nio.SessionInputBuffer
  langs:
  - java
  name: length()
  nameWithType: SessionInputBuffer.length()
  fullName: org.apache.hc.core5.http.nio.SessionInputBuffer.length()
  overload: org.apache.hc.core5.http.nio.SessionInputBuffer.length*
  type: Method
  package: org.apache.hc.core5.http.nio
  summary: Returns the length of this buffer.
  syntax:
    content: public abstract int length()
    return:
      type: int
      description: buffer length.
- uid: org.apache.hc.core5.http.nio.SessionInputBuffer.read()
  id: read()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.apache.hc.core5.http.nio.SessionInputBuffer
  langs:
  - java
  name: read()
  nameWithType: SessionInputBuffer.read()
  fullName: org.apache.hc.core5.http.nio.SessionInputBuffer.read()
  overload: org.apache.hc.core5.http.nio.SessionInputBuffer.read*
  type: Method
  package: org.apache.hc.core5.http.nio
  summary: Reads one byte from the buffer. If the buffer is empty this method can throw a runtime exception. The exact type of runtime exception thrown by this method depends on implementation.
  syntax:
    content: public abstract int read()
    return:
      type: int
      description: one byte
- uid: org.apache.hc.core5.http.nio.SessionInputBuffer.read(java.nio.ByteBuffer)
  id: read(java.nio.ByteBuffer)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.apache.hc.core5.http.nio.SessionInputBuffer
  langs:
  - java
  name: read(ByteBuffer dst)
  nameWithType: SessionInputBuffer.read(ByteBuffer dst)
  fullName: org.apache.hc.core5.http.nio.SessionInputBuffer.read(ByteBuffer dst)
  overload: org.apache.hc.core5.http.nio.SessionInputBuffer.read*
  type: Method
  package: org.apache.hc.core5.http.nio
  summary: Reads a sequence of bytes from this buffer into the destination buffer. The exact number of bytes transferred depends on availability of data in this buffer and capacity of the destination buffer.
  syntax:
    content: public abstract int read(ByteBuffer dst)
    parameters:
    - id: dst
      type: java.nio.ByteBuffer
      description: the destination buffer.
    return:
      type: int
      description: The number of bytes read, possibly zero.
- uid: org.apache.hc.core5.http.nio.SessionInputBuffer.read(java.nio.ByteBuffer,int)
  id: read(java.nio.ByteBuffer,int)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.apache.hc.core5.http.nio.SessionInputBuffer
  langs:
  - java
  name: read(ByteBuffer dst, int maxLen)
  nameWithType: SessionInputBuffer.read(ByteBuffer dst, int maxLen)
  fullName: org.apache.hc.core5.http.nio.SessionInputBuffer.read(ByteBuffer dst, int maxLen)
  overload: org.apache.hc.core5.http.nio.SessionInputBuffer.read*
  type: Method
  package: org.apache.hc.core5.http.nio
  summary: Reads a sequence of bytes from this buffer into the destination buffer, up to the given maximum limit. The exact number of bytes transferred depends on availability of data in this buffer and capacity of the destination buffer, but cannot be more than `maxLen` value.
  syntax:
    content: public abstract int read(ByteBuffer dst, int maxLen)
    parameters:
    - id: dst
      type: java.nio.ByteBuffer
      description: the destination buffer.
    - id: maxLen
      type: int
      description: the maximum number of bytes to be read.
    return:
      type: int
      description: The number of bytes read, possibly zero.
- uid: org.apache.hc.core5.http.nio.SessionInputBuffer.read(java.nio.channels.WritableByteChannel)
  id: read(java.nio.channels.WritableByteChannel)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.apache.hc.core5.http.nio.SessionInputBuffer
  langs:
  - java
  name: read(WritableByteChannel dst)
  nameWithType: SessionInputBuffer.read(WritableByteChannel dst)
  fullName: org.apache.hc.core5.http.nio.SessionInputBuffer.read(WritableByteChannel dst)
  overload: org.apache.hc.core5.http.nio.SessionInputBuffer.read*
  type: Method
  package: org.apache.hc.core5.http.nio
  summary: Reads a sequence of bytes from this buffer into the destination channel. The exact number of bytes transferred depends on availability of data in this buffer.
  syntax:
    content: public abstract int read(WritableByteChannel dst)
    parameters:
    - id: dst
      type: java.nio.channels.WritableByteChannel
      description: the destination channel.
    return:
      type: int
      description: The number of bytes read, possibly zero.
  exceptions:
  - type: java.io.IOException
    description: in case of an I/O error.
- uid: org.apache.hc.core5.http.nio.SessionInputBuffer.read(java.nio.channels.WritableByteChannel,int)
  id: read(java.nio.channels.WritableByteChannel,int)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.apache.hc.core5.http.nio.SessionInputBuffer
  langs:
  - java
  name: read(WritableByteChannel dst, int maxLen)
  nameWithType: SessionInputBuffer.read(WritableByteChannel dst, int maxLen)
  fullName: org.apache.hc.core5.http.nio.SessionInputBuffer.read(WritableByteChannel dst, int maxLen)
  overload: org.apache.hc.core5.http.nio.SessionInputBuffer.read*
  type: Method
  package: org.apache.hc.core5.http.nio
  summary: Reads a sequence of bytes from this buffer into the destination channel, up to the given maximum limit. The exact number of bytes transferred depends on availability of data in this buffer, but cannot be more than `maxLen` value.
  syntax:
    content: public abstract int read(WritableByteChannel dst, int maxLen)
    parameters:
    - id: dst
      type: java.nio.channels.WritableByteChannel
      description: the destination channel.
    - id: maxLen
      type: int
      description: the maximum number of bytes to be read.
    return:
      type: int
      description: The number of bytes read, possibly zero.
  exceptions:
  - type: java.io.IOException
    description: in case of an I/O error.
- uid: org.apache.hc.core5.http.nio.SessionInputBuffer.readLine(org.apache.hc.core5.util.CharArrayBuffer,boolean)
  id: readLine(org.apache.hc.core5.util.CharArrayBuffer,boolean)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.apache.hc.core5.http.nio.SessionInputBuffer
  langs:
  - java
  name: readLine(CharArrayBuffer dst, boolean endOfStream)
  nameWithType: SessionInputBuffer.readLine(CharArrayBuffer dst, boolean endOfStream)
  fullName: org.apache.hc.core5.http.nio.SessionInputBuffer.readLine(CharArrayBuffer dst, boolean endOfStream)
  overload: org.apache.hc.core5.http.nio.SessionInputBuffer.readLine*
  type: Method
  package: org.apache.hc.core5.http.nio
  summary: >-
    Attempts to transfer a complete line of characters up to a line delimiter from this buffer to the destination buffer. If a complete line is available in the buffer, the sequence of chars is transferred to the destination buffer the method returns `true`. The line delimiter itself is discarded. If a complete line is not available in the buffer, this method returns `false` without transferring anything to the destination buffer. If `endOfStream` parameter is set to `true` this method assumes the end of stream has been reached and the content currently stored in the buffer should be treated as a complete line.


    The choice of a char encoding and line delimiter sequence is up to the specific implementations of this interface.
  syntax:
    content: public abstract boolean readLine(CharArrayBuffer dst, boolean endOfStream)
    parameters:
    - id: dst
      type: org.apache.hc.core5.util.CharArrayBuffer
      description: the destination buffer.
    - id: endOfStream
      type: boolean
      description: end of stream flag
    return:
      type: boolean
      description: >-
        <code>true</code> if a sequence of chars representing a complete
          line has been transferred to the destination buffer, <code>false</code>
          otherwise.
  exceptions:
  - type: java.io.IOException
    description: >-
      in case a character encoding or decoding
         error occurs.
references:
- uid: boolean
  spec.java:
  - uid: boolean
    name: boolean
    fullName: boolean
- uid: org.apache.hc.core5.http.nio.SessionInputBuffer.hasData*
  name: hasData
  nameWithType: SessionInputBuffer.hasData
  fullName: org.apache.hc.core5.http.nio.SessionInputBuffer.hasData
  package: org.apache.hc.core5.http.nio
- uid: int
  spec.java:
  - uid: int
    name: int
    fullName: int
- uid: org.apache.hc.core5.http.nio.SessionInputBuffer.length*
  name: length
  nameWithType: SessionInputBuffer.length
  fullName: org.apache.hc.core5.http.nio.SessionInputBuffer.length
  package: org.apache.hc.core5.http.nio
- uid: java.io.IOException
  spec.java:
  - uid: java.io.IOException
    name: IOException
    fullName: java.io.IOException
- uid: java.nio.channels.ReadableByteChannel
  spec.java:
  - uid: java.nio.channels.ReadableByteChannel
    name: ReadableByteChannel
    fullName: java.nio.channels.ReadableByteChannel
- uid: org.apache.hc.core5.http.nio.SessionInputBuffer.fill*
  name: fill
  nameWithType: SessionInputBuffer.fill
  fullName: org.apache.hc.core5.http.nio.SessionInputBuffer.fill
  package: org.apache.hc.core5.http.nio
- uid: org.apache.hc.core5.http.nio.SessionInputBuffer.read*
  name: read
  nameWithType: SessionInputBuffer.read
  fullName: org.apache.hc.core5.http.nio.SessionInputBuffer.read
  package: org.apache.hc.core5.http.nio
- uid: java.nio.ByteBuffer
  spec.java:
  - uid: java.nio.ByteBuffer
    name: ByteBuffer
    fullName: java.nio.ByteBuffer
- uid: java.nio.channels.WritableByteChannel
  spec.java:
  - uid: java.nio.channels.WritableByteChannel
    name: WritableByteChannel
    fullName: java.nio.channels.WritableByteChannel
- uid: org.apache.hc.core5.util.CharArrayBuffer
  name: CharArrayBuffer
  nameWithType: CharArrayBuffer
  fullName: org.apache.hc.core5.util.CharArrayBuffer
- uid: org.apache.hc.core5.http.nio.SessionInputBuffer.readLine*
  name: readLine
  nameWithType: SessionInputBuffer.readLine
  fullName: org.apache.hc.core5.http.nio.SessionInputBuffer.readLine
  package: org.apache.hc.core5.http.nio
