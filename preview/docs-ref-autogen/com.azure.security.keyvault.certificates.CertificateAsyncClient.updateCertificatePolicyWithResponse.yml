### YamlMime:JavaMember
uid: "com.azure.security.keyvault.certificates.CertificateAsyncClient.updateCertificatePolicyWithResponse*"
fullName: "com.azure.security.keyvault.certificates.CertificateAsyncClient.updateCertificatePolicyWithResponse"
name: "updateCertificatePolicyWithResponse"
nameWithType: "CertificateAsyncClient.updateCertificatePolicyWithResponse"
members:
- uid: "com.azure.security.keyvault.certificates.CertificateAsyncClient.updateCertificatePolicyWithResponse(java.lang.String,com.azure.security.keyvault.certificates.models.CertificatePolicy)"
  fullName: "com.azure.security.keyvault.certificates.CertificateAsyncClient.updateCertificatePolicyWithResponse(String certificateName, CertificatePolicy policy)"
  name: "updateCertificatePolicyWithResponse(String certificateName, CertificatePolicy policy)"
  nameWithType: "CertificateAsyncClient.updateCertificatePolicyWithResponse(String certificateName, CertificatePolicy policy)"
  summary: "Updates the policy for a certificate. The update operation changes specified attributes of the certificate policy and attributes that are not specified in the request are left unchanged. This operation requires the `certificates/update` permission.\n\n**Code Samples**\n\nGets the certificate policy, changes its properties and then updates it in the Azure Key Vault. Prints out the returned policy details when a response has been received.\n\n```java\ncertificateAsyncClient.getCertificatePolicy(\"certificateName\")\n     .subscriberContext(Context.of(key1, value1, key2, value2))\n     .subscribe(certificatePolicyResponseValue -> {\n         CertificatePolicy certificatePolicy = certificatePolicyResponseValue;\n         // Update transparency\n         certificatePolicy.setCertificateTransparent(true);\n         certificateAsyncClient.updateCertificatePolicyWithResponse(\"certificateName\",\n             certificatePolicy)\n             .subscribe(updatedPolicyResponse ->\n                 System.out.printf(\"Certificate policy's updated transparency status %s %n\",\n                     updatedPolicyResponse.getValue().isCertificateTransparent()));\n     });\n```"
  parameters:
  - description: "The name of the certificate whose policy is to be updated."
    name: "certificateName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The certificate policy is to be updated."
    name: "policy"
    type: "<xref href=\"com.azure.security.keyvault.certificates.models.CertificatePolicy?alt=com.azure.security.keyvault.certificates.models.CertificatePolicy&text=CertificatePolicy\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<CertificatePolicy>> updateCertificatePolicyWithResponse(String certificateName, CertificatePolicy policy)"
  returns:
    description: "A <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> containing a <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> whose <xref uid=\"com.azure.core.http.rest.Response.getValue*\" data-throw-if-not-resolved=\"false\" data-raw-source=\"value\"></xref> contains the updated <xref uid=\"com.azure.security.keyvault.certificates.models.CertificatePolicy\" data-throw-if-not-resolved=\"false\" data-raw-source=\"certificate policy\"></xref>."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.security.keyvault.certificates.models.CertificatePolicy?alt=com.azure.security.keyvault.certificates.models.CertificatePolicy&text=CertificatePolicy\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
type: "method"
metadata: {}
package: "com.azure.security.keyvault.certificates"
artifact: com.azure:azure-security-keyvault-certificates:4.2.0-beta.2
