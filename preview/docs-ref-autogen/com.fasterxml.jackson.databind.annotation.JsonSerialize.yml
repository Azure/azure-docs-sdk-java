### YamlMime:ManagedReference
items:
- uid: com.fasterxml.jackson.databind.annotation.JsonSerialize
  id: JsonSerialize
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.annotation
  children:
  - com.fasterxml.jackson.databind.annotation.JsonSerialize.Inclusion
  - com.fasterxml.jackson.databind.annotation.JsonSerialize.Typing
  - com.fasterxml.jackson.databind.annotation.JsonSerialize.as()
  - com.fasterxml.jackson.databind.annotation.JsonSerialize.contentAs()
  - com.fasterxml.jackson.databind.annotation.JsonSerialize.contentConverter()
  - com.fasterxml.jackson.databind.annotation.JsonSerialize.contentUsing()
  - com.fasterxml.jackson.databind.annotation.JsonSerialize.converter()
  - com.fasterxml.jackson.databind.annotation.JsonSerialize.include()
  - com.fasterxml.jackson.databind.annotation.JsonSerialize.keyAs()
  - com.fasterxml.jackson.databind.annotation.JsonSerialize.keyUsing()
  - com.fasterxml.jackson.databind.annotation.JsonSerialize.nullsUsing()
  - com.fasterxml.jackson.databind.annotation.JsonSerialize.typing()
  - com.fasterxml.jackson.databind.annotation.JsonSerialize.using()
  langs:
  - java
  name: JsonSerialize
  nameWithType: JsonSerialize
  fullName: com.fasterxml.jackson.databind.annotation.JsonSerialize
  type: Interface
  package: com.fasterxml.jackson.databind.annotation
  summary: >-
    Annotation used for configuring serialization aspects, by attaching to "getter" methods or fields, or to value classes. When annotating value classes, configuration is used for instances of the value class but can be overridden by more specific annotations (ones that attach to methods or fields).


    An example annotation would be:


    ```java

    @JsonSerialize(using=MySerializer.class,
        as=MySubClass.class,
        typing=JsonSerialize.Typing.STATIC
      )
    ```


    (which would be redundant, since some properties block others: specifically, 'using' has precedence over 'as', which has precedence over 'typing' setting)
  syntax:
    content: public interface JsonSerialize implements Annotation
  implements:
  - java.lang.annotation.Annotation
- uid: com.fasterxml.jackson.databind.annotation.JsonSerialize.as()
  id: as()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.annotation.JsonSerialize
  langs:
  - java
  name: as()
  nameWithType: JsonSerialize.as()
  fullName: com.fasterxml.jackson.databind.annotation.JsonSerialize.as()
  overload: com.fasterxml.jackson.databind.annotation.JsonSerialize.as*
  type: Method
  package: com.fasterxml.jackson.databind.annotation
  summary: >-
    Supertype (of declared type, which itself is supertype of runtime type) to use as type when locating serializer to use.


    Bogus type <xref uid="" data-throw-if-not-resolved="false">Void</xref> can be used to indicate that declared type is used as is (i.e. this annotation property has no setting); this since annotation properties are not allowed to have null value.


    Note: if <xref uid="com.fasterxml.jackson.databind.annotation.JsonSerialize.using*" data-throw-if-not-resolved="false">#using</xref> is also used it has precedence (since it directly specifies serializer, whereas this would only be used to locate the serializer) and value of this annotation property is ignored.
  syntax:
    content: public abstract Class<?> as()
    return:
      type: java.lang.Class<?>
- uid: com.fasterxml.jackson.databind.annotation.JsonSerialize.contentAs()
  id: contentAs()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.annotation.JsonSerialize
  langs:
  - java
  name: contentAs()
  nameWithType: JsonSerialize.contentAs()
  fullName: com.fasterxml.jackson.databind.annotation.JsonSerialize.contentAs()
  overload: com.fasterxml.jackson.databind.annotation.JsonSerialize.contentAs*
  type: Method
  package: com.fasterxml.jackson.databind.annotation
  summary: Concrete type to serialize content value (elements of a Collection/array, values of Maps) as, instead of type otherwise declared. Must be a supertype of declared type; otherwise an exception may be thrown by serializer.
  syntax:
    content: public abstract Class<?> contentAs()
    return:
      type: java.lang.Class<?>
- uid: com.fasterxml.jackson.databind.annotation.JsonSerialize.contentConverter()
  id: contentConverter()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.annotation.JsonSerialize
  langs:
  - java
  name: contentConverter()
  nameWithType: JsonSerialize.contentConverter()
  fullName: com.fasterxml.jackson.databind.annotation.JsonSerialize.contentConverter()
  overload: com.fasterxml.jackson.databind.annotation.JsonSerialize.contentConverter*
  type: Method
  package: com.fasterxml.jackson.databind.annotation
  summary: 'Similar to <xref uid="com.fasterxml.jackson.databind.annotation.JsonSerialize.converter*" data-throw-if-not-resolved="false">#converter</xref>, but used for values of structures types (List, arrays, Maps). Note that this property does NOT have effect when used as Class annotation; it can only be used as property annotation: this because association between container and value types is loose and as such converters seldom make sense for such usage.'
  syntax:
    content: public abstract Class<? extends Converter> contentConverter()
    return:
      type: java.lang.Class<? extends com.fasterxml.jackson.databind.util.Converter>
- uid: com.fasterxml.jackson.databind.annotation.JsonSerialize.contentUsing()
  id: contentUsing()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.annotation.JsonSerialize
  langs:
  - java
  name: contentUsing()
  nameWithType: JsonSerialize.contentUsing()
  fullName: com.fasterxml.jackson.databind.annotation.JsonSerialize.contentUsing()
  overload: com.fasterxml.jackson.databind.annotation.JsonSerialize.contentUsing*
  type: Method
  package: com.fasterxml.jackson.databind.annotation
  summary: Serializer class to use for serializing contents (elements of a Collection/array, values of Maps) of annotated property. Can only be used on properties (methods, fields, constructors), and not value classes themselves (as they are typically generic)
  syntax:
    content: public abstract Class<? extends JsonSerializer> contentUsing()
    return:
      type: java.lang.Class<? extends com.fasterxml.jackson.databind.JsonSerializer>
- uid: com.fasterxml.jackson.databind.annotation.JsonSerialize.converter()
  id: converter()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.annotation.JsonSerialize
  langs:
  - java
  name: converter()
  nameWithType: JsonSerialize.converter()
  fullName: com.fasterxml.jackson.databind.annotation.JsonSerialize.converter()
  overload: com.fasterxml.jackson.databind.annotation.JsonSerialize.converter*
  type: Method
  package: com.fasterxml.jackson.databind.annotation
  summary: Which helper object is to be used to convert type into something that Jackson knows how to serialize; either because base type cannot be serialized easily, or just to alter serialization.
  syntax:
    content: public abstract Class<? extends Converter> converter()
    return:
      type: java.lang.Class<? extends com.fasterxml.jackson.databind.util.Converter>
- uid: com.fasterxml.jackson.databind.annotation.JsonSerialize.include()
  id: include()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.annotation.JsonSerialize
  langs:
  - java
  name: include()
  nameWithType: JsonSerialize.include()
  fullName: com.fasterxml.jackson.databind.annotation.JsonSerialize.include()
  overload: com.fasterxml.jackson.databind.annotation.JsonSerialize.include*
  type: Method
  package: com.fasterxml.jackson.databind.annotation
  summary: >-
    Which properties of annotated Bean are to be included in serialization (has no effect on other types like enums, primitives or collections). Choices are "all", "properties that have value other than null" and "properties that have non-default value" (i.e. default value being property setting for a Bean constructed with default no-arg constructor, often null).


    This property has been replaced by special-purpose <xref uid="com.fasterxml.jackson.annotation.JsonInclude" data-throw-if-not-resolved="false">com.fasterxml.jackson.annotation.JsonInclude</xref> annotation, introduced in Jackson 2.0.


    Note that Jackson 2.3 changed default to `DEFAULT_INCLUSION`, which is roughly same as saying "whatever". This is important because it allows hierarchic default values to be used.
  syntax:
    content: public abstract JsonSerialize.Inclusion include()
    return:
      type: com.fasterxml.jackson.databind.annotation.JsonSerialize.Inclusion
- uid: com.fasterxml.jackson.databind.annotation.JsonSerialize.keyAs()
  id: keyAs()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.annotation.JsonSerialize
  langs:
  - java
  name: keyAs()
  nameWithType: JsonSerialize.keyAs()
  fullName: com.fasterxml.jackson.databind.annotation.JsonSerialize.keyAs()
  overload: com.fasterxml.jackson.databind.annotation.JsonSerialize.keyAs*
  type: Method
  package: com.fasterxml.jackson.databind.annotation
  summary: Concrete type to serialize keys of <xref uid="java.util.Map" data-throw-if-not-resolved="false">java.util.Map</xref> as, instead of type otherwise declared. Must be a supertype of declared type; otherwise an exception may be thrown by serializer.
  syntax:
    content: public abstract Class<?> keyAs()
    return:
      type: java.lang.Class<?>
- uid: com.fasterxml.jackson.databind.annotation.JsonSerialize.keyUsing()
  id: keyUsing()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.annotation.JsonSerialize
  langs:
  - java
  name: keyUsing()
  nameWithType: JsonSerialize.keyUsing()
  fullName: com.fasterxml.jackson.databind.annotation.JsonSerialize.keyUsing()
  overload: com.fasterxml.jackson.databind.annotation.JsonSerialize.keyUsing*
  type: Method
  package: com.fasterxml.jackson.databind.annotation
  summary: Serializer class to use for serializing Map keys of annotated property. Can only be used on properties (methods, fields, constructors), and not value classes themselves.
  syntax:
    content: public abstract Class<? extends JsonSerializer> keyUsing()
    return:
      type: java.lang.Class<? extends com.fasterxml.jackson.databind.JsonSerializer>
- uid: com.fasterxml.jackson.databind.annotation.JsonSerialize.nullsUsing()
  id: nullsUsing()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.annotation.JsonSerialize
  langs:
  - java
  name: nullsUsing()
  nameWithType: JsonSerialize.nullsUsing()
  fullName: com.fasterxml.jackson.databind.annotation.JsonSerialize.nullsUsing()
  overload: com.fasterxml.jackson.databind.annotation.JsonSerialize.nullsUsing*
  type: Method
  package: com.fasterxml.jackson.databind.annotation
  summary: Serializer class to use for serializing nulls for properties that are annotated, instead of the default null serializer. Note that using this property when annotation types (classes) has no effect currently (it is possible this could be improved in future).
  syntax:
    content: public abstract Class<? extends JsonSerializer> nullsUsing()
    return:
      type: java.lang.Class<? extends com.fasterxml.jackson.databind.JsonSerializer>
- uid: com.fasterxml.jackson.databind.annotation.JsonSerialize.typing()
  id: typing()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.annotation.JsonSerialize
  langs:
  - java
  name: typing()
  nameWithType: JsonSerialize.typing()
  fullName: com.fasterxml.jackson.databind.annotation.JsonSerialize.typing()
  overload: com.fasterxml.jackson.databind.annotation.JsonSerialize.typing*
  type: Method
  package: com.fasterxml.jackson.databind.annotation
  summary: >-
    Whether type detection used is dynamic or static: that is, whether actual runtime type is used (dynamic), or just the declared type (static).


    Note that Jackson 2.3 changed default to `DEFAULT_TYPING`, which is roughly same as saying "whatever". This is important as it allows avoiding accidental overrides at property level.
  syntax:
    content: public abstract JsonSerialize.Typing typing()
    return:
      type: com.fasterxml.jackson.databind.annotation.JsonSerialize.Typing
- uid: com.fasterxml.jackson.databind.annotation.JsonSerialize.using()
  id: using()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.annotation.JsonSerialize
  langs:
  - java
  name: using()
  nameWithType: JsonSerialize.using()
  fullName: com.fasterxml.jackson.databind.annotation.JsonSerialize.using()
  overload: com.fasterxml.jackson.databind.annotation.JsonSerialize.using*
  type: Method
  package: com.fasterxml.jackson.databind.annotation
  summary: Serializer class to use for serializing associated value. Depending on what is annotated, value is either an instance of annotated class (used globablly anywhere where class serializer is needed); or only used for serializing property access via a getter method.
  syntax:
    content: public abstract Class<? extends JsonSerializer> using()
    return:
      type: java.lang.Class<? extends com.fasterxml.jackson.databind.JsonSerializer>
references:
- uid: java.lang.Class<? extends com.fasterxml.jackson.databind.JsonSerializer>
  spec.java:
  - uid: java.lang.Class
    name: Class
    fullName: java.lang.Class
  - name: <
    fullName: <
  - uid: '? extends com.fasterxml.jackson.databind.JsonSerializer'
    name: JsonSerializer
    fullName: '? extends com.fasterxml.jackson.databind.JsonSerializer'
  - name: '>'
    fullName: '>'
- uid: com.fasterxml.jackson.databind.annotation.JsonSerialize.using*
  name: using
  nameWithType: JsonSerialize.using
  fullName: com.fasterxml.jackson.databind.annotation.JsonSerialize.using
  package: com.fasterxml.jackson.databind.annotation
- uid: com.fasterxml.jackson.databind.annotation.JsonSerialize.contentUsing*
  name: contentUsing
  nameWithType: JsonSerialize.contentUsing
  fullName: com.fasterxml.jackson.databind.annotation.JsonSerialize.contentUsing
  package: com.fasterxml.jackson.databind.annotation
- uid: com.fasterxml.jackson.databind.annotation.JsonSerialize.keyUsing*
  name: keyUsing
  nameWithType: JsonSerialize.keyUsing
  fullName: com.fasterxml.jackson.databind.annotation.JsonSerialize.keyUsing
  package: com.fasterxml.jackson.databind.annotation
- uid: com.fasterxml.jackson.databind.annotation.JsonSerialize.nullsUsing*
  name: nullsUsing
  nameWithType: JsonSerialize.nullsUsing
  fullName: com.fasterxml.jackson.databind.annotation.JsonSerialize.nullsUsing
  package: com.fasterxml.jackson.databind.annotation
- uid: java.lang.Class<?>
  spec.java:
  - uid: java.lang.Class
    name: Class
    fullName: java.lang.Class
  - name: <
    fullName: <
  - uid: '?'
    name: '?'
    fullName: '?'
  - name: '>'
    fullName: '>'
- uid: com.fasterxml.jackson.databind.annotation.JsonSerialize.as*
  name: as
  nameWithType: JsonSerialize.as
  fullName: com.fasterxml.jackson.databind.annotation.JsonSerialize.as
  package: com.fasterxml.jackson.databind.annotation
- uid: com.fasterxml.jackson.databind.annotation.JsonSerialize.keyAs*
  name: keyAs
  nameWithType: JsonSerialize.keyAs
  fullName: com.fasterxml.jackson.databind.annotation.JsonSerialize.keyAs
  package: com.fasterxml.jackson.databind.annotation
- uid: com.fasterxml.jackson.databind.annotation.JsonSerialize.contentAs*
  name: contentAs
  nameWithType: JsonSerialize.contentAs
  fullName: com.fasterxml.jackson.databind.annotation.JsonSerialize.contentAs
  package: com.fasterxml.jackson.databind.annotation
- uid: com.fasterxml.jackson.databind.annotation.JsonSerialize.Typing
  name: JsonSerialize.Typing
  nameWithType: JsonSerialize.Typing
  fullName: com.fasterxml.jackson.databind.annotation.JsonSerialize.Typing
- uid: com.fasterxml.jackson.databind.annotation.JsonSerialize.typing*
  name: typing
  nameWithType: JsonSerialize.typing
  fullName: com.fasterxml.jackson.databind.annotation.JsonSerialize.typing
  package: com.fasterxml.jackson.databind.annotation
- uid: java.lang.Class<? extends com.fasterxml.jackson.databind.util.Converter>
  spec.java:
  - uid: java.lang.Class
    name: Class
    fullName: java.lang.Class
  - name: <
    fullName: <
  - uid: '? extends com.fasterxml.jackson.databind.util.Converter'
    name: Converter
    fullName: '? extends com.fasterxml.jackson.databind.util.Converter'
  - name: '>'
    fullName: '>'
- uid: com.fasterxml.jackson.databind.annotation.JsonSerialize.converter*
  name: converter
  nameWithType: JsonSerialize.converter
  fullName: com.fasterxml.jackson.databind.annotation.JsonSerialize.converter
  package: com.fasterxml.jackson.databind.annotation
- uid: com.fasterxml.jackson.databind.annotation.JsonSerialize.contentConverter*
  name: contentConverter
  nameWithType: JsonSerialize.contentConverter
  fullName: com.fasterxml.jackson.databind.annotation.JsonSerialize.contentConverter
  package: com.fasterxml.jackson.databind.annotation
- uid: com.fasterxml.jackson.databind.annotation.JsonSerialize.Inclusion
  name: JsonSerialize.Inclusion
  nameWithType: JsonSerialize.Inclusion
  fullName: com.fasterxml.jackson.databind.annotation.JsonSerialize.Inclusion
- uid: com.fasterxml.jackson.databind.annotation.JsonSerialize.include*
  name: include
  nameWithType: JsonSerialize.include
  fullName: com.fasterxml.jackson.databind.annotation.JsonSerialize.include
  package: com.fasterxml.jackson.databind.annotation
- uid: java.lang.annotation.Annotation
  name: Annotation
  nameWithType: Annotation
  fullName: java.lang.annotation.Annotation
- uid: '? extends com.fasterxml.jackson.databind.JsonSerializer'
  name: '? extends JsonSerializer'
  nameWithType: '? extends JsonSerializer'
  fullName: '? extends com.fasterxml.jackson.databind.JsonSerializer'
- uid: java.lang.Class
  name: Class
  nameWithType: Class
  fullName: java.lang.Class
- uid: '?'
  name: '?'
  nameWithType: '?'
  fullName: '?'
- uid: '? extends com.fasterxml.jackson.databind.util.Converter'
  name: '? extends Converter'
  nameWithType: '? extends Converter'
  fullName: '? extends com.fasterxml.jackson.databind.util.Converter'
