### YamlMime:JavaMember
uid: "com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase._addName*"
fullName: "com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase._addName"
name: "_addName"
nameWithType: "NonBlockingJsonParserBase._addName"
members:
- uid: "com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase._addName(int[],int,int)"
  fullName: "com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase._addName(int[] quads, int qlen, int lastQuadBytes)"
  name: "_addName(int[] quads, int qlen, int lastQuadBytes)"
  nameWithType: "NonBlockingJsonParserBase._addName(int[] quads, int qlen, int lastQuadBytes)"
  summary: "This is the main workhorse method used when we take a symbol table miss. It needs to demultiplex individual bytes, decode multi-byte chars (if any), and then construct Name instance and add it to the symbol table."
  parameters:
  - name: "quads"
    type: "<xref href=\"int?alt=int&text=int\" data-throw-if-not-resolved=\"False\" />[]"
  - name: "qlen"
    type: "<xref href=\"int?alt=int&text=int\" data-throw-if-not-resolved=\"False\" />"
  - name: "lastQuadBytes"
    type: "<xref href=\"int?alt=int&text=int\" data-throw-if-not-resolved=\"False\" />"
  syntax: "protected final String _addName(int[] quads, int qlen, int lastQuadBytes)"
  exceptions:
  - type: "<xref href=\"com.fasterxml.jackson.core.JsonParseException?alt=com.fasterxml.jackson.core.JsonParseException&text=JsonParseException\" data-throw-if-not-resolved=\"False\" />"
  returns:
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
type: "method"
metadata: {}
package: "com.fasterxml.jackson.core.json.async"
artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
