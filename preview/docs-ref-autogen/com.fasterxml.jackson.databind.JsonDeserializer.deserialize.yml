### YamlMime:JavaMember
uid: "com.fasterxml.jackson.databind.JsonDeserializer.deserialize*"
fullName: "com.fasterxml.jackson.databind.JsonDeserializer<T>.deserialize"
name: "deserialize"
nameWithType: "JsonDeserializer<T>.deserialize"
members:
- uid: "com.fasterxml.jackson.databind.JsonDeserializer.deserialize(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)"
  fullName: "com.fasterxml.jackson.databind.JsonDeserializer<T>.deserialize(JsonParser p, DeserializationContext ctxt)"
  name: "deserialize(JsonParser p, DeserializationContext ctxt)"
  nameWithType: "JsonDeserializer<T>.deserialize(JsonParser p, DeserializationContext ctxt)"
  summary: "Method that can be called to ask implementation to deserialize JSON content into the value type this serializer handles. Returned instance is to be constructed by method itself.\n\nPre-condition for this method is that the parser points to the first event that is part of value to deserializer (and which is never JSON 'null' literal, more on this below): for simple types it may be the only value; and for structured types the Object start marker or a FIELD\\_NAME.\n\nThe two possible input conditions for structured types result from polymorphism via fields. In the ordinary case, Jackson calls this method when it has encountered an OBJECT\\_START, and the method implementation must advance to the next token to see the first field name. If the application configures polymorphism via a field, then the object looks like the following.\n\n```java\n{\n          \"@class\": \"class name\",\n          ...\n      }\n```\n\nJackson consumes the two tokens (the @class field name and its value) in order to learn the class and select the deserializer. Thus, the stream is pointing to the FIELD\\_NAME for the first field after the @class. Thus, if you want your method to work correctly both with and without polymorphism, you must begin your method with:\n\n```java\nif (p.currentToken() == JsonToken.START_OBJECT) {\n         p.nextToken();\n       }\n```\n\nThis results in the stream pointing to the field name, so that the two conditions align.\n\nPost-condition is that the parser will point to the last event that is part of deserialized value (or in case deserialization fails, event that was not recognized or usable, which may be the same event as the one it pointed to upon call).\n\nNote that this method is never called for JSON null literal, and thus deserializers need (and should) not check for it."
  parameters:
  - description: "Parsed used for reading JSON content"
    name: "p"
    type: "<xref href=\"com.fasterxml.jackson.core.JsonParser?alt=com.fasterxml.jackson.core.JsonParser&text=JsonParser\" data-throw-if-not-resolved=\"False\" />"
  - description: "Context that can be used to access information about\n   this deserialization activity."
    name: "ctxt"
    type: "<xref href=\"com.fasterxml.jackson.databind.DeserializationContext?alt=com.fasterxml.jackson.databind.DeserializationContext&text=DeserializationContext\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract T deserialize(JsonParser p, DeserializationContext ctxt)"
  exceptions:
  - type: "<xref href=\"java.io.IOException?alt=java.io.IOException&text=IOException\" data-throw-if-not-resolved=\"False\" />"
  - type: "<xref href=\"com.fasterxml.jackson.core.JsonProcessingException?alt=com.fasterxml.jackson.core.JsonProcessingException&text=JsonProcessingException\" data-throw-if-not-resolved=\"False\" />"
  returns:
    description: "Deserialized value"
    type: "<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.fasterxml.jackson.databind.JsonDeserializer.deserialize(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,T)"
  fullName: "com.fasterxml.jackson.databind.JsonDeserializer<T>.deserialize(JsonParser p, DeserializationContext ctxt, T intoValue)"
  name: "deserialize(JsonParser p, DeserializationContext ctxt, T intoValue)"
  nameWithType: "JsonDeserializer<T>.deserialize(JsonParser p, DeserializationContext ctxt, T intoValue)"
  summary: "Alternate deserialization method (compared to the most commonly used, <xref uid=\"com.fasterxml.jackson.databind.JsonDeserializer.deserialize(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#deserialize(JsonParser, DeserializationContext)\"></xref>), which takes in initialized value instance, to be configured and/or populated by deserializer. Method is not necessarily used (or supported) by all types (it will not work for immutable types, for obvious reasons): most commonly it is used for Collections and Maps. It may be used both with \"updating readers\" (for POJOs) and when Collections and Maps use \"getter as setter\".\n\nDefault implementation just throws <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"UnsupportedOperationException\"></xref>, to indicate that types that do not explicitly add support do not necessarily support update-existing-value operation (esp. immutable types)"
  parameters:
  - name: "p"
    type: "<xref href=\"com.fasterxml.jackson.core.JsonParser?alt=com.fasterxml.jackson.core.JsonParser&text=JsonParser\" data-throw-if-not-resolved=\"False\" />"
  - name: "ctxt"
    type: "<xref href=\"com.fasterxml.jackson.databind.DeserializationContext?alt=com.fasterxml.jackson.databind.DeserializationContext&text=DeserializationContext\" data-throw-if-not-resolved=\"False\" />"
  - name: "intoValue"
    type: "<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public T deserialize(JsonParser p, DeserializationContext ctxt, T intoValue)"
  exceptions:
  - type: "<xref href=\"java.io.IOException?alt=java.io.IOException&text=IOException\" data-throw-if-not-resolved=\"False\" />"
  returns:
    type: "<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />"
type: "method"
metadata: {}
package: "com.fasterxml.jackson.databind"
artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
