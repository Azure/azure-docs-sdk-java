### YamlMime:JavaMember
uid: "com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.listHooks*"
fullName: "com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.listHooks"
name: "listHooks"
nameWithType: "MetricsAdvisorAdministrationClient.listHooks"
members:
- uid: "com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.listHooks()"
  fullName: "com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.listHooks()"
  name: "listHooks()"
  nameWithType: "MetricsAdvisorAdministrationClient.listHooks()"
  summary: "List information of hooks on the metrics advisor account.\n\n**Code sample**\n\n```java\nPagedIterable<Hook> hooks = metricsAdvisorAdministrationClient.listHooks();\n for (Hook hook : hooks) {\n     if (hook instanceof EmailHook) {\n         EmailHook emailHook = (EmailHook) hook;\n         System.out.printf(\"Hook Id: %s%n\", emailHook.getId());\n         System.out.printf(\"Hook Name: %s%n\", emailHook.getName());\n         System.out.printf(\"Hook Description: %s%n\", emailHook.getDescription());\n         System.out.printf(\"Hook External Link: %s%n\", emailHook.getExternalLink());\n         System.out.printf(\"Hook Emails: %s%n\", String.join(\",\", emailHook.getEmailsToAlert()));\n     } else if (hook instanceof WebHook) {\n         WebHook webHook = (WebHook) hook;\n         System.out.printf(\"Hook Id: %s%n\", webHook.getId());\n         System.out.printf(\"Hook Name: %s%n\", webHook.getName());\n         System.out.printf(\"Hook Description: %s%n\", webHook.getDescription());\n         System.out.printf(\"Hook External Link: %s%n\", webHook.getExternalLink());\n         System.out.printf(\"Hook Endpoint: %s%n\", webHook.getEndpoint());\n         System.out.printf(\"Hook Headers: %s%n\", webHook.getHttpHeaders());\n     }\n }\n```"
  syntax: "public PagedIterable<Hook> listHooks()"
  returns:
    description: "A <xref uid=\"com.azure.core.http.rest.PagedIterable\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedIterable\"></xref> containing information of all the <xref uid=\"com.azure.ai.metricsadvisor.models.Hook\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Hook\"></xref> in the account."
    type: "<xref href=\"com.azure.core.http.rest.PagedIterable?alt=com.azure.core.http.rest.PagedIterable&text=PagedIterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.ai.metricsadvisor.models.Hook?alt=com.azure.ai.metricsadvisor.models.Hook&text=Hook\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.listHooks(com.azure.ai.metricsadvisor.models.ListHookOptions,com.azure.core.util.Context)"
  fullName: "com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.listHooks(ListHookOptions options, Context context)"
  name: "listHooks(ListHookOptions options, Context context)"
  nameWithType: "MetricsAdvisorAdministrationClient.listHooks(ListHookOptions options, Context context)"
  summary: "List information of hooks.\n\n**Code sample**\n\n```java\nListHookOptions options = new ListHookOptions()\n     .setSkip(100)\n     .setTop(20);\n PagedIterable<Hook> hooks = metricsAdvisorAdministrationClient.listHooks(options, Context.NONE);\n Stream<PagedResponse<Hook>> hooksPageStream = hooks.streamByPage();\n int[] pageCount = new int[1];\n hooksPageStream.forEach(hookPage -> {\n     System.out.printf(\"Page: %d%n\", pageCount[0]++);\n     for (Hook hook : hookPage.getElements()) {\n         if (hook instanceof EmailHook) {\n             EmailHook emailHook = (EmailHook) hook;\n             System.out.printf(\"Hook Id: %s%n\", emailHook.getId());\n             System.out.printf(\"Hook Name: %s%n\", emailHook.getName());\n             System.out.printf(\"Hook Description: %s%n\", emailHook.getDescription());\n             System.out.printf(\"Hook External Link: %s%n\", emailHook.getExternalLink());\n             System.out.printf(\"Hook Emails: %s%n\", String.join(\",\", emailHook.getEmailsToAlert()));\n             System.out.printf(\"Hook Admins: %s%n\", String.join(\",\", emailHook.getAdmins()));\n         } else if (hook instanceof WebHook) {\n             WebHook webHook = (WebHook) hook;\n             System.out.printf(\"Hook Id: %s%n\", webHook.getId());\n             System.out.printf(\"Hook Name: %s%n\", webHook.getName());\n             System.out.printf(\"Hook Description: %s%n\", webHook.getDescription());\n             System.out.printf(\"Hook External Link: %s%n\", webHook.getExternalLink());\n             System.out.printf(\"Hook Endpoint: %s%n\", webHook.getEndpoint());\n             System.out.printf(\"Hook Headers: %s%n\", webHook.getHttpHeaders());\n             System.out.printf(\"Hook Admins: %s%n\", String.join(\",\", webHook.getAdmins()));\n         }\n     }\n });\n```"
  parameters:
  - description: "The additional parameters."
    name: "options"
    type: "<xref href=\"com.azure.ai.metricsadvisor.models.ListHookOptions?alt=com.azure.ai.metricsadvisor.models.ListHookOptions&text=ListHookOptions\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional context that is passed through the Http pipeline during the service call."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PagedIterable<Hook> listHooks(ListHookOptions options, Context context)"
  returns:
    description: "A <xref uid=\"com.azure.core.http.rest.PagedIterable\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedIterable\"></xref> containing information of the <xref uid=\"com.azure.ai.metricsadvisor.models.Hook\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Hook\"></xref> resources."
    type: "<xref href=\"com.azure.core.http.rest.PagedIterable?alt=com.azure.core.http.rest.PagedIterable&text=PagedIterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.ai.metricsadvisor.models.Hook?alt=com.azure.ai.metricsadvisor.models.Hook&text=Hook\" data-throw-if-not-resolved=\"False\" />&gt;"
type: "method"
metadata: {}
package: "com.azure.ai.metricsadvisor.administration"
artifact: com.azure:azure-ai-metricsadvisor:1.0.0-beta.1
