### YamlMime:ManagedReference
items:
- uid: com.fasterxml.jackson.databind.ser.impl.SimpleFilterProvider
  id: SimpleFilterProvider
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.impl
  children:
  - com.fasterxml.jackson.databind.ser.impl.SimpleFilterProvider.SimpleFilterProvider()
  - com.fasterxml.jackson.databind.ser.impl.SimpleFilterProvider.SimpleFilterProvider(java.util.Map<java.lang.String,?>)
  - com.fasterxml.jackson.databind.ser.impl.SimpleFilterProvider._cfgFailOnUnknownId
  - com.fasterxml.jackson.databind.ser.impl.SimpleFilterProvider._defaultFilter
  - com.fasterxml.jackson.databind.ser.impl.SimpleFilterProvider._filtersById
  - com.fasterxml.jackson.databind.ser.impl.SimpleFilterProvider.addFilter(java.lang.String,com.fasterxml.jackson.databind.ser.BeanPropertyFilter)
  - com.fasterxml.jackson.databind.ser.impl.SimpleFilterProvider.addFilter(java.lang.String,com.fasterxml.jackson.databind.ser.PropertyFilter)
  - com.fasterxml.jackson.databind.ser.impl.SimpleFilterProvider.addFilter(java.lang.String,com.fasterxml.jackson.databind.ser.impl.SimpleBeanPropertyFilter)
  - com.fasterxml.jackson.databind.ser.impl.SimpleFilterProvider.findFilter(java.lang.Object)
  - com.fasterxml.jackson.databind.ser.impl.SimpleFilterProvider.findPropertyFilter(java.lang.Object,java.lang.Object)
  - com.fasterxml.jackson.databind.ser.impl.SimpleFilterProvider.getDefaultFilter()
  - com.fasterxml.jackson.databind.ser.impl.SimpleFilterProvider.removeFilter(java.lang.String)
  - com.fasterxml.jackson.databind.ser.impl.SimpleFilterProvider.setDefaultFilter(com.fasterxml.jackson.databind.ser.BeanPropertyFilter)
  - com.fasterxml.jackson.databind.ser.impl.SimpleFilterProvider.setDefaultFilter(com.fasterxml.jackson.databind.ser.PropertyFilter)
  - com.fasterxml.jackson.databind.ser.impl.SimpleFilterProvider.setDefaultFilter(com.fasterxml.jackson.databind.ser.impl.SimpleBeanPropertyFilter)
  - com.fasterxml.jackson.databind.ser.impl.SimpleFilterProvider.setFailOnUnknownId(boolean)
  - com.fasterxml.jackson.databind.ser.impl.SimpleFilterProvider.willFailOnUnknownId()
  langs:
  - java
  name: SimpleFilterProvider
  nameWithType: SimpleFilterProvider
  fullName: com.fasterxml.jackson.databind.ser.impl.SimpleFilterProvider
  type: Class
  package: com.fasterxml.jackson.databind.ser.impl
  summary: >-
    Simple <xref uid="com.fasterxml.jackson.databind.ser.FilterProvider" data-throw-if-not-resolved="false">FilterProvider</xref> implementation that just stores direct id-to-filter mapping.


    Note that version 2.3 was a partial rewrite, now that <xref uid="com.fasterxml.jackson.databind.ser.PropertyFilter" data-throw-if-not-resolved="false">PropertyFilter</xref> is set to replace `BeanPropertyFilter`.
  syntax:
    content: public class SimpleFilterProvider extends FilterProvider implements Serializable
  inheritance:
  - java.lang.Object
  - com.fasterxml.jackson.databind.ser.FilterProvider
  implements:
  - java.io.Serializable
  inheritedMembers:
  - com.fasterxml.jackson.databind.ser.FilterProvider.findFilter(java.lang.Object)
  - com.fasterxml.jackson.databind.ser.FilterProvider.findPropertyFilter(java.lang.Object,java.lang.Object)
  - java.lang.Object.clone()
  - java.lang.Object.equals(java.lang.Object)
  - java.lang.Object.finalize()
  - java.lang.Object.getClass()
  - java.lang.Object.hashCode()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.toString()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
- uid: com.fasterxml.jackson.databind.ser.impl.SimpleFilterProvider.SimpleFilterProvider()
  id: SimpleFilterProvider()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.impl.SimpleFilterProvider
  langs:
  - java
  name: SimpleFilterProvider()
  nameWithType: SimpleFilterProvider.SimpleFilterProvider()
  fullName: com.fasterxml.jackson.databind.ser.impl.SimpleFilterProvider.SimpleFilterProvider()
  overload: com.fasterxml.jackson.databind.ser.impl.SimpleFilterProvider.SimpleFilterProvider*
  type: Constructor
  package: com.fasterxml.jackson.databind.ser.impl
  syntax:
    content: public SimpleFilterProvider()
- uid: com.fasterxml.jackson.databind.ser.impl.SimpleFilterProvider.SimpleFilterProvider(java.util.Map<java.lang.String,?>)
  id: SimpleFilterProvider(java.util.Map<java.lang.String,?>)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.impl.SimpleFilterProvider
  langs:
  - java
  name: SimpleFilterProvider(Map<String,?> mapping)
  nameWithType: SimpleFilterProvider.SimpleFilterProvider(Map<String,?> mapping)
  fullName: com.fasterxml.jackson.databind.ser.impl.SimpleFilterProvider.SimpleFilterProvider(Map<String,?> mapping)
  overload: com.fasterxml.jackson.databind.ser.impl.SimpleFilterProvider.SimpleFilterProvider*
  type: Constructor
  package: com.fasterxml.jackson.databind.ser.impl
  syntax:
    content: public SimpleFilterProvider(Map<String,?> mapping)
    parameters:
    - id: mapping
      type: java.util.Map<java.lang.String,?>
      description: Mapping from id to filter; used as is if if possible
- uid: com.fasterxml.jackson.databind.ser.impl.SimpleFilterProvider._cfgFailOnUnknownId
  id: _cfgFailOnUnknownId
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.impl.SimpleFilterProvider
  langs:
  - java
  name: _cfgFailOnUnknownId
  nameWithType: SimpleFilterProvider._cfgFailOnUnknownId
  fullName: com.fasterxml.jackson.databind.ser.impl.SimpleFilterProvider._cfgFailOnUnknownId
  type: Field
  package: com.fasterxml.jackson.databind.ser.impl
  summary: Flag that indicates whether request for an unknown filter id should result an exception (default) or not. Note that this is only relevant if no default filter has been configured.
  syntax:
    content: protected boolean _cfgFailOnUnknownId
    return:
      type: boolean
- uid: com.fasterxml.jackson.databind.ser.impl.SimpleFilterProvider._defaultFilter
  id: _defaultFilter
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.impl.SimpleFilterProvider
  langs:
  - java
  name: _defaultFilter
  nameWithType: SimpleFilterProvider._defaultFilter
  fullName: com.fasterxml.jackson.databind.ser.impl.SimpleFilterProvider._defaultFilter
  type: Field
  package: com.fasterxml.jackson.databind.ser.impl
  summary: This is the filter we return in case no mapping was found for given id; default is 'null' (in which case caller typically reports an error), but can be set to an explicit filter.
  syntax:
    content: protected PropertyFilter _defaultFilter
    return:
      type: com.fasterxml.jackson.databind.ser.PropertyFilter
- uid: com.fasterxml.jackson.databind.ser.impl.SimpleFilterProvider._filtersById
  id: _filtersById
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.impl.SimpleFilterProvider
  langs:
  - java
  name: _filtersById
  nameWithType: SimpleFilterProvider._filtersById
  fullName: com.fasterxml.jackson.databind.ser.impl.SimpleFilterProvider._filtersById
  type: Field
  package: com.fasterxml.jackson.databind.ser.impl
  summary: Mappings from ids to filters.
  syntax:
    content: protected final Map<String,PropertyFilter> _filtersById
    return:
      type: java.util.Map<java.lang.String,com.fasterxml.jackson.databind.ser.PropertyFilter>
- uid: com.fasterxml.jackson.databind.ser.impl.SimpleFilterProvider.addFilter(java.lang.String,com.fasterxml.jackson.databind.ser.BeanPropertyFilter)
  id: addFilter(java.lang.String,com.fasterxml.jackson.databind.ser.BeanPropertyFilter)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.impl.SimpleFilterProvider
  langs:
  - java
  name: addFilter(String id, BeanPropertyFilter filter)
  nameWithType: SimpleFilterProvider.addFilter(String id, BeanPropertyFilter filter)
  fullName: com.fasterxml.jackson.databind.ser.impl.SimpleFilterProvider.addFilter(String id, BeanPropertyFilter filter)
  overload: com.fasterxml.jackson.databind.ser.impl.SimpleFilterProvider.addFilter*
  type: Method
  package: com.fasterxml.jackson.databind.ser.impl
  syntax:
    content: public SimpleFilterProvider addFilter(String id, BeanPropertyFilter filter)
    parameters:
    - id: id
      type: java.lang.String
    - id: filter
      type: com.fasterxml.jackson.databind.ser.BeanPropertyFilter
    return:
      type: com.fasterxml.jackson.databind.ser.impl.SimpleFilterProvider
- uid: com.fasterxml.jackson.databind.ser.impl.SimpleFilterProvider.addFilter(java.lang.String,com.fasterxml.jackson.databind.ser.PropertyFilter)
  id: addFilter(java.lang.String,com.fasterxml.jackson.databind.ser.PropertyFilter)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.impl.SimpleFilterProvider
  langs:
  - java
  name: addFilter(String id, PropertyFilter filter)
  nameWithType: SimpleFilterProvider.addFilter(String id, PropertyFilter filter)
  fullName: com.fasterxml.jackson.databind.ser.impl.SimpleFilterProvider.addFilter(String id, PropertyFilter filter)
  overload: com.fasterxml.jackson.databind.ser.impl.SimpleFilterProvider.addFilter*
  type: Method
  package: com.fasterxml.jackson.databind.ser.impl
  syntax:
    content: public SimpleFilterProvider addFilter(String id, PropertyFilter filter)
    parameters:
    - id: id
      type: java.lang.String
    - id: filter
      type: com.fasterxml.jackson.databind.ser.PropertyFilter
    return:
      type: com.fasterxml.jackson.databind.ser.impl.SimpleFilterProvider
- uid: com.fasterxml.jackson.databind.ser.impl.SimpleFilterProvider.addFilter(java.lang.String,com.fasterxml.jackson.databind.ser.impl.SimpleBeanPropertyFilter)
  id: addFilter(java.lang.String,com.fasterxml.jackson.databind.ser.impl.SimpleBeanPropertyFilter)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.impl.SimpleFilterProvider
  langs:
  - java
  name: addFilter(String id, SimpleBeanPropertyFilter filter)
  nameWithType: SimpleFilterProvider.addFilter(String id, SimpleBeanPropertyFilter filter)
  fullName: com.fasterxml.jackson.databind.ser.impl.SimpleFilterProvider.addFilter(String id, SimpleBeanPropertyFilter filter)
  overload: com.fasterxml.jackson.databind.ser.impl.SimpleFilterProvider.addFilter*
  type: Method
  package: com.fasterxml.jackson.databind.ser.impl
  summary: Overloaded variant just to resolve "ties" when using <xref uid="com.fasterxml.jackson.databind.ser.impl.SimpleBeanPropertyFilter" data-throw-if-not-resolved="false">SimpleBeanPropertyFilter</xref>.
  syntax:
    content: public SimpleFilterProvider addFilter(String id, SimpleBeanPropertyFilter filter)
    parameters:
    - id: id
      type: java.lang.String
    - id: filter
      type: com.fasterxml.jackson.databind.ser.impl.SimpleBeanPropertyFilter
    return:
      type: com.fasterxml.jackson.databind.ser.impl.SimpleFilterProvider
- uid: com.fasterxml.jackson.databind.ser.impl.SimpleFilterProvider.findFilter(java.lang.Object)
  id: findFilter(java.lang.Object)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.impl.SimpleFilterProvider
  langs:
  - java
  name: findFilter(Object filterId)
  nameWithType: SimpleFilterProvider.findFilter(Object filterId)
  fullName: com.fasterxml.jackson.databind.ser.impl.SimpleFilterProvider.findFilter(Object filterId)
  overload: com.fasterxml.jackson.databind.ser.impl.SimpleFilterProvider.findFilter*
  type: Method
  package: com.fasterxml.jackson.databind.ser.impl
  summary: Lookup method used to find <xref uid="com.fasterxml.jackson.databind.ser.BeanPropertyFilter" data-throw-if-not-resolved="false">BeanPropertyFilter</xref> that has specified id. Note that id is typically a <xref uid="java.lang.String" data-throw-if-not-resolved="false">java.lang.String</xref>, but is not necessarily limited to that; that is, while standard components use String, custom implementation can choose other kinds of keys.
  syntax:
    content: public BeanPropertyFilter findFilter(Object filterId)
    parameters:
    - id: filterId
      type: java.lang.Object
    return:
      type: com.fasterxml.jackson.databind.ser.BeanPropertyFilter
- uid: com.fasterxml.jackson.databind.ser.impl.SimpleFilterProvider.findPropertyFilter(java.lang.Object,java.lang.Object)
  id: findPropertyFilter(java.lang.Object,java.lang.Object)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.impl.SimpleFilterProvider
  langs:
  - java
  name: findPropertyFilter(Object filterId, Object valueToFilter)
  nameWithType: SimpleFilterProvider.findPropertyFilter(Object filterId, Object valueToFilter)
  fullName: com.fasterxml.jackson.databind.ser.impl.SimpleFilterProvider.findPropertyFilter(Object filterId, Object valueToFilter)
  overload: com.fasterxml.jackson.databind.ser.impl.SimpleFilterProvider.findPropertyFilter*
  type: Method
  package: com.fasterxml.jackson.databind.ser.impl
  summary: >-
    Lookup method used to find <xref uid="com.fasterxml.jackson.databind.ser.PropertyFilter" data-throw-if-not-resolved="false">PropertyFilter</xref> that has specified id. Note that id is typically a <xref uid="java.lang.String" data-throw-if-not-resolved="false">java.lang.String</xref>, but is not necessarily limited to that; that is, while standard components use String, custom implementation can choose other kinds of keys.


    This method is the replacement for <xref uid="com.fasterxml.jackson.databind.ser.impl.SimpleFilterProvider.findFilter*" data-throw-if-not-resolved="false">#findFilter</xref> starting with 2.3.


    Note that the default implementation is designed to support short-term backwards compatibility, and will call the deprecated `findFilter` method, then wrap filter if one found as <xref uid="com.fasterxml.jackson.databind.ser.PropertyFilter" data-throw-if-not-resolved="false">PropertyFilter</xref>. It should be overridden by up-to-date implementations
  syntax:
    content: public PropertyFilter findPropertyFilter(Object filterId, Object valueToFilter)
    parameters:
    - id: filterId
      type: java.lang.Object
    - id: valueToFilter
      type: java.lang.Object
    return:
      type: com.fasterxml.jackson.databind.ser.PropertyFilter
- uid: com.fasterxml.jackson.databind.ser.impl.SimpleFilterProvider.getDefaultFilter()
  id: getDefaultFilter()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.impl.SimpleFilterProvider
  langs:
  - java
  name: getDefaultFilter()
  nameWithType: SimpleFilterProvider.getDefaultFilter()
  fullName: com.fasterxml.jackson.databind.ser.impl.SimpleFilterProvider.getDefaultFilter()
  overload: com.fasterxml.jackson.databind.ser.impl.SimpleFilterProvider.getDefaultFilter*
  type: Method
  package: com.fasterxml.jackson.databind.ser.impl
  syntax:
    content: public PropertyFilter getDefaultFilter()
    return:
      type: com.fasterxml.jackson.databind.ser.PropertyFilter
- uid: com.fasterxml.jackson.databind.ser.impl.SimpleFilterProvider.removeFilter(java.lang.String)
  id: removeFilter(java.lang.String)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.impl.SimpleFilterProvider
  langs:
  - java
  name: removeFilter(String id)
  nameWithType: SimpleFilterProvider.removeFilter(String id)
  fullName: com.fasterxml.jackson.databind.ser.impl.SimpleFilterProvider.removeFilter(String id)
  overload: com.fasterxml.jackson.databind.ser.impl.SimpleFilterProvider.removeFilter*
  type: Method
  package: com.fasterxml.jackson.databind.ser.impl
  syntax:
    content: public PropertyFilter removeFilter(String id)
    parameters:
    - id: id
      type: java.lang.String
    return:
      type: com.fasterxml.jackson.databind.ser.PropertyFilter
- uid: com.fasterxml.jackson.databind.ser.impl.SimpleFilterProvider.setDefaultFilter(com.fasterxml.jackson.databind.ser.BeanPropertyFilter)
  id: setDefaultFilter(com.fasterxml.jackson.databind.ser.BeanPropertyFilter)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.impl.SimpleFilterProvider
  langs:
  - java
  name: setDefaultFilter(BeanPropertyFilter f)
  nameWithType: SimpleFilterProvider.setDefaultFilter(BeanPropertyFilter f)
  fullName: com.fasterxml.jackson.databind.ser.impl.SimpleFilterProvider.setDefaultFilter(BeanPropertyFilter f)
  overload: com.fasterxml.jackson.databind.ser.impl.SimpleFilterProvider.setDefaultFilter*
  type: Method
  package: com.fasterxml.jackson.databind.ser.impl
  summary: Method for defining filter to return for "unknown" filters; cases where there is no mapping from given id to an explicit filter.
  syntax:
    content: public SimpleFilterProvider setDefaultFilter(BeanPropertyFilter f)
    parameters:
    - id: f
      type: com.fasterxml.jackson.databind.ser.BeanPropertyFilter
      description: Filter to return when no filter is found for given id
    return:
      type: com.fasterxml.jackson.databind.ser.impl.SimpleFilterProvider
- uid: com.fasterxml.jackson.databind.ser.impl.SimpleFilterProvider.setDefaultFilter(com.fasterxml.jackson.databind.ser.PropertyFilter)
  id: setDefaultFilter(com.fasterxml.jackson.databind.ser.PropertyFilter)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.impl.SimpleFilterProvider
  langs:
  - java
  name: setDefaultFilter(PropertyFilter f)
  nameWithType: SimpleFilterProvider.setDefaultFilter(PropertyFilter f)
  fullName: com.fasterxml.jackson.databind.ser.impl.SimpleFilterProvider.setDefaultFilter(PropertyFilter f)
  overload: com.fasterxml.jackson.databind.ser.impl.SimpleFilterProvider.setDefaultFilter*
  type: Method
  package: com.fasterxml.jackson.databind.ser.impl
  syntax:
    content: public SimpleFilterProvider setDefaultFilter(PropertyFilter f)
    parameters:
    - id: f
      type: com.fasterxml.jackson.databind.ser.PropertyFilter
    return:
      type: com.fasterxml.jackson.databind.ser.impl.SimpleFilterProvider
- uid: com.fasterxml.jackson.databind.ser.impl.SimpleFilterProvider.setDefaultFilter(com.fasterxml.jackson.databind.ser.impl.SimpleBeanPropertyFilter)
  id: setDefaultFilter(com.fasterxml.jackson.databind.ser.impl.SimpleBeanPropertyFilter)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.impl.SimpleFilterProvider
  langs:
  - java
  name: setDefaultFilter(SimpleBeanPropertyFilter f)
  nameWithType: SimpleFilterProvider.setDefaultFilter(SimpleBeanPropertyFilter f)
  fullName: com.fasterxml.jackson.databind.ser.impl.SimpleFilterProvider.setDefaultFilter(SimpleBeanPropertyFilter f)
  overload: com.fasterxml.jackson.databind.ser.impl.SimpleFilterProvider.setDefaultFilter*
  type: Method
  package: com.fasterxml.jackson.databind.ser.impl
  summary: Overloaded variant just to resolve "ties" when using <xref uid="com.fasterxml.jackson.databind.ser.impl.SimpleBeanPropertyFilter" data-throw-if-not-resolved="false">SimpleBeanPropertyFilter</xref>.
  syntax:
    content: public SimpleFilterProvider setDefaultFilter(SimpleBeanPropertyFilter f)
    parameters:
    - id: f
      type: com.fasterxml.jackson.databind.ser.impl.SimpleBeanPropertyFilter
    return:
      type: com.fasterxml.jackson.databind.ser.impl.SimpleFilterProvider
- uid: com.fasterxml.jackson.databind.ser.impl.SimpleFilterProvider.setFailOnUnknownId(boolean)
  id: setFailOnUnknownId(boolean)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.impl.SimpleFilterProvider
  langs:
  - java
  name: setFailOnUnknownId(boolean state)
  nameWithType: SimpleFilterProvider.setFailOnUnknownId(boolean state)
  fullName: com.fasterxml.jackson.databind.ser.impl.SimpleFilterProvider.setFailOnUnknownId(boolean state)
  overload: com.fasterxml.jackson.databind.ser.impl.SimpleFilterProvider.setFailOnUnknownId*
  type: Method
  package: com.fasterxml.jackson.databind.ser.impl
  syntax:
    content: public SimpleFilterProvider setFailOnUnknownId(boolean state)
    parameters:
    - id: state
      type: boolean
    return:
      type: com.fasterxml.jackson.databind.ser.impl.SimpleFilterProvider
- uid: com.fasterxml.jackson.databind.ser.impl.SimpleFilterProvider.willFailOnUnknownId()
  id: willFailOnUnknownId()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.impl.SimpleFilterProvider
  langs:
  - java
  name: willFailOnUnknownId()
  nameWithType: SimpleFilterProvider.willFailOnUnknownId()
  fullName: com.fasterxml.jackson.databind.ser.impl.SimpleFilterProvider.willFailOnUnknownId()
  overload: com.fasterxml.jackson.databind.ser.impl.SimpleFilterProvider.willFailOnUnknownId*
  type: Method
  package: com.fasterxml.jackson.databind.ser.impl
  syntax:
    content: public boolean willFailOnUnknownId()
    return:
      type: boolean
references:
- uid: com.fasterxml.jackson.databind.ser.impl.SimpleFilterProvider.SimpleFilterProvider*
  name: SimpleFilterProvider
  nameWithType: SimpleFilterProvider.SimpleFilterProvider
  fullName: com.fasterxml.jackson.databind.ser.impl.SimpleFilterProvider.SimpleFilterProvider
  package: com.fasterxml.jackson.databind.ser.impl
- uid: java.util.Map<java.lang.String,?>
  spec.java:
  - uid: java.util.Map
    name: Map
    fullName: java.util.Map
  - name: <
    fullName: <
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
  - name: ','
    fullName: ','
  - uid: '?'
    name: '?'
    fullName: '?'
  - name: '>'
    fullName: '>'
- uid: com.fasterxml.jackson.databind.ser.BeanPropertyFilter
  name: BeanPropertyFilter
  nameWithType: BeanPropertyFilter
  fullName: com.fasterxml.jackson.databind.ser.BeanPropertyFilter
- uid: com.fasterxml.jackson.databind.ser.impl.SimpleFilterProvider.setDefaultFilter*
  name: setDefaultFilter
  nameWithType: SimpleFilterProvider.setDefaultFilter
  fullName: com.fasterxml.jackson.databind.ser.impl.SimpleFilterProvider.setDefaultFilter
  package: com.fasterxml.jackson.databind.ser.impl
- uid: com.fasterxml.jackson.databind.ser.PropertyFilter
  name: PropertyFilter
  nameWithType: PropertyFilter
  fullName: com.fasterxml.jackson.databind.ser.PropertyFilter
- uid: com.fasterxml.jackson.databind.ser.impl.SimpleBeanPropertyFilter
  name: SimpleBeanPropertyFilter
  nameWithType: SimpleBeanPropertyFilter
  fullName: com.fasterxml.jackson.databind.ser.impl.SimpleBeanPropertyFilter
- uid: com.fasterxml.jackson.databind.ser.impl.SimpleFilterProvider.getDefaultFilter*
  name: getDefaultFilter
  nameWithType: SimpleFilterProvider.getDefaultFilter
  fullName: com.fasterxml.jackson.databind.ser.impl.SimpleFilterProvider.getDefaultFilter
  package: com.fasterxml.jackson.databind.ser.impl
- uid: boolean
  spec.java:
  - uid: boolean
    name: boolean
    fullName: boolean
- uid: com.fasterxml.jackson.databind.ser.impl.SimpleFilterProvider.setFailOnUnknownId*
  name: setFailOnUnknownId
  nameWithType: SimpleFilterProvider.setFailOnUnknownId
  fullName: com.fasterxml.jackson.databind.ser.impl.SimpleFilterProvider.setFailOnUnknownId
  package: com.fasterxml.jackson.databind.ser.impl
- uid: com.fasterxml.jackson.databind.ser.impl.SimpleFilterProvider.willFailOnUnknownId*
  name: willFailOnUnknownId
  nameWithType: SimpleFilterProvider.willFailOnUnknownId
  fullName: com.fasterxml.jackson.databind.ser.impl.SimpleFilterProvider.willFailOnUnknownId
  package: com.fasterxml.jackson.databind.ser.impl
- uid: java.lang.String
  spec.java:
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
- uid: com.fasterxml.jackson.databind.ser.impl.SimpleFilterProvider.addFilter*
  name: addFilter
  nameWithType: SimpleFilterProvider.addFilter
  fullName: com.fasterxml.jackson.databind.ser.impl.SimpleFilterProvider.addFilter
  package: com.fasterxml.jackson.databind.ser.impl
- uid: com.fasterxml.jackson.databind.ser.impl.SimpleFilterProvider.removeFilter*
  name: removeFilter
  nameWithType: SimpleFilterProvider.removeFilter
  fullName: com.fasterxml.jackson.databind.ser.impl.SimpleFilterProvider.removeFilter
  package: com.fasterxml.jackson.databind.ser.impl
- uid: java.lang.Object
  spec.java:
  - uid: java.lang.Object
    name: Object
    fullName: java.lang.Object
- uid: com.fasterxml.jackson.databind.ser.impl.SimpleFilterProvider.findFilter*
  name: findFilter
  nameWithType: SimpleFilterProvider.findFilter
  fullName: com.fasterxml.jackson.databind.ser.impl.SimpleFilterProvider.findFilter
  package: com.fasterxml.jackson.databind.ser.impl
- uid: com.fasterxml.jackson.databind.ser.impl.SimpleFilterProvider.findPropertyFilter*
  name: findPropertyFilter
  nameWithType: SimpleFilterProvider.findPropertyFilter
  fullName: com.fasterxml.jackson.databind.ser.impl.SimpleFilterProvider.findPropertyFilter
  package: com.fasterxml.jackson.databind.ser.impl
- uid: java.util.Map<java.lang.String,com.fasterxml.jackson.databind.ser.PropertyFilter>
  spec.java:
  - uid: java.util.Map
    name: Map
    fullName: java.util.Map
  - name: <
    fullName: <
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
  - name: ','
    fullName: ','
  - uid: com.fasterxml.jackson.databind.ser.PropertyFilter
    name: PropertyFilter
    fullName: com.fasterxml.jackson.databind.ser.PropertyFilter
  - name: '>'
    fullName: '>'
- uid: com.fasterxml.jackson.databind.ser.FilterProvider
  name: FilterProvider
  nameWithType: FilterProvider
  fullName: com.fasterxml.jackson.databind.ser.FilterProvider
- uid: java.io.Serializable
  name: Serializable
  nameWithType: Serializable
  fullName: java.io.Serializable
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: com.fasterxml.jackson.databind.ser.FilterProvider.findPropertyFilter(java.lang.Object,java.lang.Object)
  name: FilterProvider.findPropertyFilter(Object,Object)
  nameWithType: FilterProvider.findPropertyFilter(Object,Object)
  fullName: com.fasterxml.jackson.databind.ser.FilterProvider.findPropertyFilter(java.lang.Object,java.lang.Object)
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: java.lang.Object.finalize()
  name: Object.finalize()
  nameWithType: Object.finalize()
  fullName: java.lang.Object.finalize()
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: java.lang.Object.clone()
  name: Object.clone()
  nameWithType: Object.clone()
  fullName: java.lang.Object.clone()
- uid: java.lang.Object.equals(java.lang.Object)
  name: Object.equals(Object)
  nameWithType: Object.equals(Object)
  fullName: java.lang.Object.equals(java.lang.Object)
- uid: java.lang.Object.toString()
  name: Object.toString()
  nameWithType: Object.toString()
  fullName: java.lang.Object.toString()
- uid: com.fasterxml.jackson.databind.ser.FilterProvider.findFilter(java.lang.Object)
  name: FilterProvider.findFilter(Object)
  nameWithType: FilterProvider.findFilter(Object)
  fullName: com.fasterxml.jackson.databind.ser.FilterProvider.findFilter(java.lang.Object)
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.lang.Object.hashCode()
  name: Object.hashCode()
  nameWithType: Object.hashCode()
  fullName: java.lang.Object.hashCode()
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: java.lang.String,?
  name: String,?
  nameWithType: String,?
  fullName: java.lang.String,?
- uid: java.util.Map
  name: Map
  nameWithType: Map
  fullName: java.util.Map
- uid: java.lang.String,com.fasterxml.jackson.databind.ser.PropertyFilter
  name: String,PropertyFilter
  nameWithType: String,PropertyFilter
  fullName: java.lang.String,com.fasterxml.jackson.databind.ser.PropertyFilter
