### YamlMime:ManagedReference
items:
- uid: com.azure.cosmos.implementation.ObservableHelper
  id: ObservableHelper
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation
  children:
  - com.azure.cosmos.implementation.ObservableHelper.<T>fluxInlineIfPossibleAsObs(java.util.concurrent.Callable<reactor.core.publisher.Flux<T>>,com.azure.cosmos.implementation.IRetryPolicy)
  - com.azure.cosmos.implementation.ObservableHelper.<T>inlineIfPossible(java.util.concurrent.Callable<reactor.core.publisher.Mono<T>>,com.azure.cosmos.implementation.IRetryPolicy)
  - com.azure.cosmos.implementation.ObservableHelper.<T>inlineIfPossibleAsObs(java.util.concurrent.Callable<reactor.core.publisher.Mono<T>>,com.azure.cosmos.implementation.IRetryPolicy)
  - com.azure.cosmos.implementation.ObservableHelper.ObservableHelper()
  langs:
  - java
  name: ObservableHelper
  nameWithType: ObservableHelper
  fullName: com.azure.cosmos.implementation.ObservableHelper
  type: Class
  package: com.azure.cosmos.implementation
  summary: While this class is public, but it is not part of our published public APIs. This is meant to be internally used only by our sdk.
  syntax:
    content: public class ObservableHelper
  inheritance:
  - java.lang.Object
  inheritedMembers:
  - java.lang.Object.clone()
  - java.lang.Object.equals(java.lang.Object)
  - java.lang.Object.finalize()
  - java.lang.Object.getClass()
  - java.lang.Object.hashCode()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.toString()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
- uid: com.azure.cosmos.implementation.ObservableHelper.<T>fluxInlineIfPossibleAsObs(java.util.concurrent.Callable<reactor.core.publisher.Flux<T>>,com.azure.cosmos.implementation.IRetryPolicy)
  id: <T>fluxInlineIfPossibleAsObs(java.util.concurrent.Callable<reactor.core.publisher.Flux<T>>,com.azure.cosmos.implementation.IRetryPolicy)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.ObservableHelper
  langs:
  - java
  name: <T>fluxInlineIfPossibleAsObs(Callable<Flux<T>> function, IRetryPolicy retryPolicy)
  nameWithType: ObservableHelper.<T>fluxInlineIfPossibleAsObs(Callable<Flux<T>> function, IRetryPolicy retryPolicy)
  fullName: com.azure.cosmos.implementation.ObservableHelper.<T>fluxInlineIfPossibleAsObs(Callable<Flux<T>> function, IRetryPolicy retryPolicy)
  overload: com.azure.cosmos.implementation.ObservableHelper.fluxInlineIfPossibleAsObs*
  type: Method
  package: com.azure.cosmos.implementation
  syntax:
    content: public static Flux<T> <T>fluxInlineIfPossibleAsObs(Callable<Flux<T>> function, IRetryPolicy retryPolicy)
    parameters:
    - id: function
      type: java.util.concurrent.Callable<reactor.core.publisher.Flux<T>>
    - id: retryPolicy
      type: com.azure.cosmos.implementation.IRetryPolicy
    return:
      type: reactor.core.publisher.Flux<T>
- uid: com.azure.cosmos.implementation.ObservableHelper.<T>inlineIfPossible(java.util.concurrent.Callable<reactor.core.publisher.Mono<T>>,com.azure.cosmos.implementation.IRetryPolicy)
  id: <T>inlineIfPossible(java.util.concurrent.Callable<reactor.core.publisher.Mono<T>>,com.azure.cosmos.implementation.IRetryPolicy)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.ObservableHelper
  langs:
  - java
  name: <T>inlineIfPossible(Callable<Mono<T>> function, IRetryPolicy retryPolicy)
  nameWithType: ObservableHelper.<T>inlineIfPossible(Callable<Mono<T>> function, IRetryPolicy retryPolicy)
  fullName: com.azure.cosmos.implementation.ObservableHelper.<T>inlineIfPossible(Callable<Mono<T>> function, IRetryPolicy retryPolicy)
  overload: com.azure.cosmos.implementation.ObservableHelper.inlineIfPossible*
  type: Method
  package: com.azure.cosmos.implementation
  syntax:
    content: public static Mono<T> <T>inlineIfPossible(Callable<Mono<T>> function, IRetryPolicy retryPolicy)
    parameters:
    - id: function
      type: java.util.concurrent.Callable<reactor.core.publisher.Mono<T>>
    - id: retryPolicy
      type: com.azure.cosmos.implementation.IRetryPolicy
    return:
      type: reactor.core.publisher.Mono<T>
- uid: com.azure.cosmos.implementation.ObservableHelper.<T>inlineIfPossibleAsObs(java.util.concurrent.Callable<reactor.core.publisher.Mono<T>>,com.azure.cosmos.implementation.IRetryPolicy)
  id: <T>inlineIfPossibleAsObs(java.util.concurrent.Callable<reactor.core.publisher.Mono<T>>,com.azure.cosmos.implementation.IRetryPolicy)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.ObservableHelper
  langs:
  - java
  name: <T>inlineIfPossibleAsObs(Callable<Mono<T>> function, IRetryPolicy retryPolicy)
  nameWithType: ObservableHelper.<T>inlineIfPossibleAsObs(Callable<Mono<T>> function, IRetryPolicy retryPolicy)
  fullName: com.azure.cosmos.implementation.ObservableHelper.<T>inlineIfPossibleAsObs(Callable<Mono<T>> function, IRetryPolicy retryPolicy)
  overload: com.azure.cosmos.implementation.ObservableHelper.inlineIfPossibleAsObs*
  type: Method
  package: com.azure.cosmos.implementation
  syntax:
    content: public static Mono<T> <T>inlineIfPossibleAsObs(Callable<Mono<T>> function, IRetryPolicy retryPolicy)
    parameters:
    - id: function
      type: java.util.concurrent.Callable<reactor.core.publisher.Mono<T>>
    - id: retryPolicy
      type: com.azure.cosmos.implementation.IRetryPolicy
    return:
      type: reactor.core.publisher.Mono<T>
- uid: com.azure.cosmos.implementation.ObservableHelper.ObservableHelper()
  id: ObservableHelper()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.ObservableHelper
  langs:
  - java
  name: ObservableHelper()
  nameWithType: ObservableHelper.ObservableHelper()
  fullName: com.azure.cosmos.implementation.ObservableHelper.ObservableHelper()
  overload: com.azure.cosmos.implementation.ObservableHelper.ObservableHelper*
  type: Constructor
  package: com.azure.cosmos.implementation
  syntax:
    content: public ObservableHelper()
references:
- uid: com.azure.cosmos.implementation.ObservableHelper.ObservableHelper*
  name: ObservableHelper
  nameWithType: ObservableHelper.ObservableHelper
  fullName: com.azure.cosmos.implementation.ObservableHelper.ObservableHelper
  package: com.azure.cosmos.implementation
- uid: java.util.concurrent.Callable<reactor.core.publisher.Mono<T>>
  spec.java:
  - uid: java.util.concurrent.Callable
    name: Callable
    fullName: java.util.concurrent.Callable
  - name: <
    fullName: <
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: T
    name: T
    fullName: T
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.IRetryPolicy
  name: IRetryPolicy
  nameWithType: IRetryPolicy
  fullName: com.azure.cosmos.implementation.IRetryPolicy
- uid: reactor.core.publisher.Mono<T>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: T
    name: T
    fullName: T
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.ObservableHelper.inlineIfPossible*
  name: <T>inlineIfPossible
  nameWithType: ObservableHelper.<T>inlineIfPossible
  fullName: com.azure.cosmos.implementation.ObservableHelper.<T>inlineIfPossible
  package: com.azure.cosmos.implementation
- uid: com.azure.cosmos.implementation.ObservableHelper.inlineIfPossibleAsObs*
  name: <T>inlineIfPossibleAsObs
  nameWithType: ObservableHelper.<T>inlineIfPossibleAsObs
  fullName: com.azure.cosmos.implementation.ObservableHelper.<T>inlineIfPossibleAsObs
  package: com.azure.cosmos.implementation
- uid: java.util.concurrent.Callable<reactor.core.publisher.Flux<T>>
  spec.java:
  - uid: java.util.concurrent.Callable
    name: Callable
    fullName: java.util.concurrent.Callable
  - name: <
    fullName: <
  - uid: reactor.core.publisher.Flux
    name: Flux
    fullName: reactor.core.publisher.Flux
  - name: <
    fullName: <
  - uid: T
    name: T
    fullName: T
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
- uid: reactor.core.publisher.Flux<T>
  spec.java:
  - uid: reactor.core.publisher.Flux
    name: Flux
    fullName: reactor.core.publisher.Flux
  - name: <
    fullName: <
  - uid: T
    name: T
    fullName: T
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.ObservableHelper.fluxInlineIfPossibleAsObs*
  name: <T>fluxInlineIfPossibleAsObs
  nameWithType: ObservableHelper.<T>fluxInlineIfPossibleAsObs
  fullName: com.azure.cosmos.implementation.ObservableHelper.<T>fluxInlineIfPossibleAsObs
  package: com.azure.cosmos.implementation
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: java.lang.Object.finalize()
  name: Object.finalize()
  nameWithType: Object.finalize()
  fullName: java.lang.Object.finalize()
- uid: java.lang.Object.clone()
  name: Object.clone()
  nameWithType: Object.clone()
  fullName: java.lang.Object.clone()
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: java.lang.Object.equals(java.lang.Object)
  name: Object.equals(Object)
  nameWithType: Object.equals(Object)
  fullName: java.lang.Object.equals(java.lang.Object)
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.lang.Object.hashCode()
  name: Object.hashCode()
  nameWithType: Object.hashCode()
  fullName: java.lang.Object.hashCode()
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: java.lang.Object.toString()
  name: Object.toString()
  nameWithType: Object.toString()
  fullName: java.lang.Object.toString()
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: java.util.concurrent.Callable
  name: Callable
  nameWithType: Callable
  fullName: java.util.concurrent.Callable
- uid: reactor.core.publisher.Mono
  name: Mono
  nameWithType: Mono
  fullName: reactor.core.publisher.Mono
- uid: reactor.core.publisher.Flux
  name: Flux
  nameWithType: Flux
  fullName: reactor.core.publisher.Flux
