### YamlMime:JavaMember
uid: "com.azure.cosmos.implementation.guava27.Strings.lenientFormat*"
fullName: "com.azure.cosmos.implementation.guava27.Strings.lenientFormat"
name: "lenientFormat"
nameWithType: "Strings.lenientFormat"
members:
- uid: "com.azure.cosmos.implementation.guava27.Strings.lenientFormat(java.lang.String,java.lang.Object...)"
  fullName: "com.azure.cosmos.implementation.guava27.Strings.lenientFormat(String template, Object[] args)"
  name: "lenientFormat(String template, Object[] args)"
  nameWithType: "Strings.lenientFormat(String template, Object[] args)"
  summary: "Returns the given `template` string with each occurrence of `\"%s\"` replaced with the corresponding argument value from `args`; or, if the placeholder and argument counts do not match, returns a best-effort form of that string. Will not throw an exception under normal conditions.\n\n**Note:** For most string-formatting needs, use <xref uid=\"java.lang.String.format\" data-throw-if-not-resolved=\"false\" data-raw-source=\"String.format\"></xref>, <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PrintWriter.format\"></xref>, and related methods. These support the full range of [format specifiers][], and alert you to usage errors by throwing <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"java.util.IllegalFormatException\"></xref>.\n\nIn certain cases, such as outputting debugging information or constructing a message to be used for another unchecked exception, an exception during string formatting would serve little purpose except to supplant the real information you were trying to provide. These are the cases this method is made for; it instead generates a best-effort string with all supplied argument values present. This method is also useful in environments such as GWT where `String.format` is not available. As an example, method implementations of the <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.google.common.base.Preconditions\"></xref> class use this formatter, for both of the reasons just discussed.\n\n**Warning:** Only the exact two-character placeholder sequence `\"%s\"` is recognized.\n\n\n[format specifiers]: https://docs.oracle.com/javase/9/docs/api/java/util/Formatter.html#syntax"
  parameters:
  - description: "a string containing zero or more <code>\"%s\"</code> placeholder sequences. <code>\n     null</code> is treated as the four-character string <code>\"null\"</code>."
    name: "template"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "the arguments to be substituted into the message template. The first argument\n     specified is substituted for the first occurrence of <code>\"%s\"</code> in the template, and so\n     forth. A <code>null</code> argument is converted to the four-character string <code>\"null\"</code>;\n     non-null values are converted to strings using <xref uid=\"java.lang.Object.toString()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Object#toString()\"></xref>."
    name: "args"
    type: "<xref href=\"java.lang.Object?alt=java.lang.Object&text=Object\" data-throw-if-not-resolved=\"False\" />[]"
  syntax: "public static String lenientFormat(String template, Object[] args)"
  returns:
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
type: "method"
metadata: {}
package: "com.azure.cosmos.implementation.guava27"
artifact: com.azure:azure-cosmos:4.4.0-beta.1
