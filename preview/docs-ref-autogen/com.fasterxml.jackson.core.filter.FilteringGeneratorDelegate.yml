### YamlMime:ManagedReference
items:
- uid: com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate
  id: FilteringGeneratorDelegate
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.filter
  children:
  - com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.FilteringGeneratorDelegate(com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.core.filter.TokenFilter,boolean,boolean)
  - com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate._allowMultipleMatches
  - com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate._checkBinaryWrite()
  - com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate._checkParentPath()
  - com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate._checkPropertyParentPath()
  - com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate._checkRawValueWrite()
  - com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate._filterContext
  - com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate._includeImmediateParent
  - com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate._includePath
  - com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate._itemFilter
  - com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate._matchCount
  - com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.getFilter()
  - com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.getFilterContext()
  - com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.getMatchCount()
  - com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.getOutputContext()
  - com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.rootFilter
  - com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeBinary(com.fasterxml.jackson.core.Base64Variant,byte[],int,int)
  - com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeBinary(com.fasterxml.jackson.core.Base64Variant,java.io.InputStream,int)
  - com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeBoolean(boolean)
  - com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeEndArray()
  - com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeEndObject()
  - com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeFieldId(long)
  - com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeFieldName(com.fasterxml.jackson.core.SerializableString)
  - com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeFieldName(java.lang.String)
  - com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeNull()
  - com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeNumber(char[],int,int)
  - com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeNumber(double)
  - com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeNumber(float)
  - com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeNumber(int)
  - com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeNumber(java.lang.String)
  - com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeNumber(java.math.BigDecimal)
  - com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeNumber(java.math.BigInteger)
  - com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeNumber(long)
  - com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeNumber(short)
  - com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeObjectId(java.lang.Object)
  - com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeObjectRef(java.lang.Object)
  - com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeOmittedField(java.lang.String)
  - com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeRaw(char)
  - com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeRaw(char[],int,int)
  - com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeRaw(com.fasterxml.jackson.core.SerializableString)
  - com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeRaw(java.lang.String)
  - com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeRaw(java.lang.String,int,int)
  - com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeRawUTF8String(byte[],int,int)
  - com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeRawValue(char[],int,int)
  - com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeRawValue(java.lang.String)
  - com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeRawValue(java.lang.String,int,int)
  - com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeStartArray()
  - com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeStartArray(int)
  - com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeStartArray(java.lang.Object)
  - com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeStartArray(java.lang.Object,int)
  - com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeStartObject()
  - com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeStartObject(java.lang.Object)
  - com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeStartObject(java.lang.Object,int)
  - com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeString(char[],int,int)
  - com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeString(com.fasterxml.jackson.core.SerializableString)
  - com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeString(java.io.Reader,int)
  - com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeString(java.lang.String)
  - com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeTypeId(java.lang.Object)
  - com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeUTF8String(byte[],int,int)
  langs:
  - java
  name: FilteringGeneratorDelegate
  nameWithType: FilteringGeneratorDelegate
  fullName: com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate
  type: Class
  package: com.fasterxml.jackson.core.filter
  summary: Specialized <xref uid="com.fasterxml.jackson.core.util.JsonGeneratorDelegate" data-throw-if-not-resolved="false">JsonGeneratorDelegate</xref> that allows use of <xref uid="com.fasterxml.jackson.core.filter.TokenFilter" data-throw-if-not-resolved="false">TokenFilter</xref> for outputting a subset of content that caller tries to generate.
  syntax:
    content: public class FilteringGeneratorDelegate extends JsonGeneratorDelegate
  inheritance:
  - java.lang.Object
  - com.fasterxml.jackson.core.JsonGenerator
  - com.fasterxml.jackson.core.util.JsonGeneratorDelegate
  inheritedMembers:
  - com.fasterxml.jackson.core.JsonGenerator._copyCurrentContents(com.fasterxml.jackson.core.JsonParser)
  - com.fasterxml.jackson.core.JsonGenerator._reportError(java.lang.String)
  - com.fasterxml.jackson.core.JsonGenerator._reportUnsupportedOperation()
  - com.fasterxml.jackson.core.JsonGenerator._throwInternal()
  - com.fasterxml.jackson.core.JsonGenerator._verifyOffsets(int,int,int)
  - com.fasterxml.jackson.core.JsonGenerator._writeSimpleObject(java.lang.Object)
  - com.fasterxml.jackson.core.JsonGenerator.configure(com.fasterxml.jackson.core.JsonGenerator.Feature,boolean)
  - com.fasterxml.jackson.core.JsonGenerator.getFormatFeatures()
  - com.fasterxml.jackson.core.JsonGenerator.isEnabled(com.fasterxml.jackson.core.StreamWriteFeature)
  - com.fasterxml.jackson.core.JsonGenerator.writeArrayFieldStart(java.lang.String)
  - com.fasterxml.jackson.core.JsonGenerator.writeBinary(byte[])
  - com.fasterxml.jackson.core.JsonGenerator.writeBinary(byte[],int,int)
  - com.fasterxml.jackson.core.JsonGenerator.writeBinary(java.io.InputStream,int)
  - com.fasterxml.jackson.core.JsonGenerator.writeBinaryField(java.lang.String,byte[])
  - com.fasterxml.jackson.core.JsonGenerator.writeBooleanField(java.lang.String,boolean)
  - com.fasterxml.jackson.core.JsonGenerator.writeNullField(java.lang.String)
  - com.fasterxml.jackson.core.JsonGenerator.writeNumberField(java.lang.String,double)
  - com.fasterxml.jackson.core.JsonGenerator.writeNumberField(java.lang.String,float)
  - com.fasterxml.jackson.core.JsonGenerator.writeNumberField(java.lang.String,int)
  - com.fasterxml.jackson.core.JsonGenerator.writeNumberField(java.lang.String,java.math.BigDecimal)
  - com.fasterxml.jackson.core.JsonGenerator.writeNumberField(java.lang.String,java.math.BigInteger)
  - com.fasterxml.jackson.core.JsonGenerator.writeNumberField(java.lang.String,long)
  - com.fasterxml.jackson.core.JsonGenerator.writeNumberField(java.lang.String,short)
  - com.fasterxml.jackson.core.JsonGenerator.writeObjectField(java.lang.String,java.lang.Object)
  - com.fasterxml.jackson.core.JsonGenerator.writeObjectFieldStart(java.lang.String)
  - com.fasterxml.jackson.core.JsonGenerator.writeRawValue(com.fasterxml.jackson.core.SerializableString)
  - com.fasterxml.jackson.core.JsonGenerator.writeStringField(java.lang.String,java.lang.String)
  - com.fasterxml.jackson.core.JsonGenerator.writeTypePrefix(com.fasterxml.jackson.core.type.WritableTypeId)
  - com.fasterxml.jackson.core.JsonGenerator.writeTypeSuffix(com.fasterxml.jackson.core.type.WritableTypeId)
  - com.fasterxml.jackson.core.util.JsonGeneratorDelegate.canOmitFields()
  - com.fasterxml.jackson.core.util.JsonGeneratorDelegate.canUseSchema(com.fasterxml.jackson.core.FormatSchema)
  - com.fasterxml.jackson.core.util.JsonGeneratorDelegate.canWriteBinaryNatively()
  - com.fasterxml.jackson.core.util.JsonGeneratorDelegate.canWriteFormattedNumbers()
  - com.fasterxml.jackson.core.util.JsonGeneratorDelegate.canWriteObjectId()
  - com.fasterxml.jackson.core.util.JsonGeneratorDelegate.canWriteTypeId()
  - com.fasterxml.jackson.core.util.JsonGeneratorDelegate.close()
  - com.fasterxml.jackson.core.util.JsonGeneratorDelegate.copyCurrentEvent(com.fasterxml.jackson.core.JsonParser)
  - com.fasterxml.jackson.core.util.JsonGeneratorDelegate.copyCurrentStructure(com.fasterxml.jackson.core.JsonParser)
  - com.fasterxml.jackson.core.util.JsonGeneratorDelegate.delegate()
  - com.fasterxml.jackson.core.util.JsonGeneratorDelegate.disable(com.fasterxml.jackson.core.JsonGenerator.Feature)
  - com.fasterxml.jackson.core.util.JsonGeneratorDelegate.enable(com.fasterxml.jackson.core.JsonGenerator.Feature)
  - com.fasterxml.jackson.core.util.JsonGeneratorDelegate.flush()
  - com.fasterxml.jackson.core.util.JsonGeneratorDelegate.getCharacterEscapes()
  - com.fasterxml.jackson.core.util.JsonGeneratorDelegate.getCodec()
  - com.fasterxml.jackson.core.util.JsonGeneratorDelegate.getCurrentValue()
  - com.fasterxml.jackson.core.util.JsonGeneratorDelegate.getDelegate()
  - com.fasterxml.jackson.core.util.JsonGeneratorDelegate.getFeatureMask()
  - com.fasterxml.jackson.core.util.JsonGeneratorDelegate.getHighestEscapedChar()
  - com.fasterxml.jackson.core.util.JsonGeneratorDelegate.getOutputBuffered()
  - com.fasterxml.jackson.core.util.JsonGeneratorDelegate.getOutputContext()
  - com.fasterxml.jackson.core.util.JsonGeneratorDelegate.getOutputTarget()
  - com.fasterxml.jackson.core.util.JsonGeneratorDelegate.getPrettyPrinter()
  - com.fasterxml.jackson.core.util.JsonGeneratorDelegate.getSchema()
  - com.fasterxml.jackson.core.util.JsonGeneratorDelegate.isClosed()
  - com.fasterxml.jackson.core.util.JsonGeneratorDelegate.isEnabled(com.fasterxml.jackson.core.JsonGenerator.Feature)
  - com.fasterxml.jackson.core.util.JsonGeneratorDelegate.overrideFormatFeatures(int,int)
  - com.fasterxml.jackson.core.util.JsonGeneratorDelegate.overrideStdFeatures(int,int)
  - com.fasterxml.jackson.core.util.JsonGeneratorDelegate.setCharacterEscapes(com.fasterxml.jackson.core.io.CharacterEscapes)
  - com.fasterxml.jackson.core.util.JsonGeneratorDelegate.setCodec(com.fasterxml.jackson.core.ObjectCodec)
  - com.fasterxml.jackson.core.util.JsonGeneratorDelegate.setCurrentValue(java.lang.Object)
  - com.fasterxml.jackson.core.util.JsonGeneratorDelegate.setFeatureMask(int)
  - com.fasterxml.jackson.core.util.JsonGeneratorDelegate.setHighestNonEscapedChar(int)
  - com.fasterxml.jackson.core.util.JsonGeneratorDelegate.setPrettyPrinter(com.fasterxml.jackson.core.PrettyPrinter)
  - com.fasterxml.jackson.core.util.JsonGeneratorDelegate.setRootValueSeparator(com.fasterxml.jackson.core.SerializableString)
  - com.fasterxml.jackson.core.util.JsonGeneratorDelegate.setSchema(com.fasterxml.jackson.core.FormatSchema)
  - com.fasterxml.jackson.core.util.JsonGeneratorDelegate.useDefaultPrettyPrinter()
  - com.fasterxml.jackson.core.util.JsonGeneratorDelegate.version()
  - com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeArray(double[],int,int)
  - com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeArray(int[],int,int)
  - com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeArray(java.lang.String[],int,int)
  - com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeArray(long[],int,int)
  - com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeBinary(com.fasterxml.jackson.core.Base64Variant,byte[],int,int)
  - com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeBinary(com.fasterxml.jackson.core.Base64Variant,java.io.InputStream,int)
  - com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeBoolean(boolean)
  - com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeEmbeddedObject(java.lang.Object)
  - com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeEndArray()
  - com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeEndObject()
  - com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeFieldId(long)
  - com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeFieldName(com.fasterxml.jackson.core.SerializableString)
  - com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeFieldName(java.lang.String)
  - com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeNull()
  - com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeNumber(char[],int,int)
  - com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeNumber(double)
  - com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeNumber(float)
  - com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeNumber(int)
  - com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeNumber(java.lang.String)
  - com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeNumber(java.math.BigDecimal)
  - com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeNumber(java.math.BigInteger)
  - com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeNumber(long)
  - com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeNumber(short)
  - com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeObject(java.lang.Object)
  - com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeObjectId(java.lang.Object)
  - com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeObjectRef(java.lang.Object)
  - com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeOmittedField(java.lang.String)
  - com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeRaw(char)
  - com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeRaw(char[],int,int)
  - com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeRaw(com.fasterxml.jackson.core.SerializableString)
  - com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeRaw(java.lang.String)
  - com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeRaw(java.lang.String,int,int)
  - com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeRawUTF8String(byte[],int,int)
  - com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeRawValue(char[],int,int)
  - com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeRawValue(java.lang.String)
  - com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeRawValue(java.lang.String,int,int)
  - com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeStartArray()
  - com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeStartArray(int)
  - com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeStartArray(java.lang.Object)
  - com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeStartArray(java.lang.Object,int)
  - com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeStartObject()
  - com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeStartObject(java.lang.Object)
  - com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeStartObject(java.lang.Object,int)
  - com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeString(char[],int,int)
  - com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeString(com.fasterxml.jackson.core.SerializableString)
  - com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeString(java.io.Reader,int)
  - com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeString(java.lang.String)
  - com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeTree(com.fasterxml.jackson.core.TreeNode)
  - com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeTypeId(java.lang.Object)
  - com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeUTF8String(byte[],int,int)
  - java.lang.Object.clone()
  - java.lang.Object.equals(java.lang.Object)
  - java.lang.Object.finalize()
  - java.lang.Object.getClass()
  - java.lang.Object.hashCode()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.toString()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
- uid: com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.FilteringGeneratorDelegate(com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.core.filter.TokenFilter,boolean,boolean)
  id: FilteringGeneratorDelegate(com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.core.filter.TokenFilter,boolean,boolean)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate
  langs:
  - java
  name: FilteringGeneratorDelegate(JsonGenerator d, TokenFilter f, boolean includePath, boolean allowMultipleMatches)
  nameWithType: FilteringGeneratorDelegate.FilteringGeneratorDelegate(JsonGenerator d, TokenFilter f, boolean includePath, boolean allowMultipleMatches)
  fullName: com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.FilteringGeneratorDelegate(JsonGenerator d, TokenFilter f, boolean includePath, boolean allowMultipleMatches)
  overload: com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.FilteringGeneratorDelegate*
  type: Constructor
  package: com.fasterxml.jackson.core.filter
  syntax:
    content: public FilteringGeneratorDelegate(JsonGenerator d, TokenFilter f, boolean includePath, boolean allowMultipleMatches)
    parameters:
    - id: d
      type: com.fasterxml.jackson.core.JsonGenerator
    - id: f
      type: com.fasterxml.jackson.core.filter.TokenFilter
    - id: includePath
      type: boolean
    - id: allowMultipleMatches
      type: boolean
- uid: com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate._allowMultipleMatches
  id: _allowMultipleMatches
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate
  langs:
  - java
  name: _allowMultipleMatches
  nameWithType: FilteringGeneratorDelegate._allowMultipleMatches
  fullName: com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate._allowMultipleMatches
  type: Field
  package: com.fasterxml.jackson.core.filter
  summary: 'Flag that determines whether filtering will continue after the first match is indicated or not: if \`false\`, output is based on just the first full match (returning <xref uid="com.fasterxml.jackson.core.filter.TokenFilter.INCLUDE_ALL" data-throw-if-not-resolved="false">TokenFilter#INCLUDE_ALL</xref>) and no more checks are made; if \`true\` then filtering will be applied as necessary until end of content.'
  syntax:
    content: protected boolean _allowMultipleMatches
    return:
      type: boolean
- uid: com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate._checkBinaryWrite()
  id: _checkBinaryWrite()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate
  langs:
  - java
  name: _checkBinaryWrite()
  nameWithType: FilteringGeneratorDelegate._checkBinaryWrite()
  fullName: com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate._checkBinaryWrite()
  overload: com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate._checkBinaryWrite*
  type: Method
  package: com.fasterxml.jackson.core.filter
  syntax:
    content: protected boolean _checkBinaryWrite()
    return:
      type: boolean
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate._checkParentPath()
  id: _checkParentPath()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate
  langs:
  - java
  name: _checkParentPath()
  nameWithType: FilteringGeneratorDelegate._checkParentPath()
  fullName: com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate._checkParentPath()
  overload: com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate._checkParentPath*
  type: Method
  package: com.fasterxml.jackson.core.filter
  syntax:
    content: protected void _checkParentPath()
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate._checkPropertyParentPath()
  id: _checkPropertyParentPath()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate
  langs:
  - java
  name: _checkPropertyParentPath()
  nameWithType: FilteringGeneratorDelegate._checkPropertyParentPath()
  fullName: com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate._checkPropertyParentPath()
  overload: com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate._checkPropertyParentPath*
  type: Method
  package: com.fasterxml.jackson.core.filter
  summary: 'Specialized variant of <xref uid="com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate._checkParentPath*" data-throw-if-not-resolved="false">#_checkParentPath</xref> used when checking parent for a property name to be included with value: rules are slightly different.'
  syntax:
    content: protected void _checkPropertyParentPath()
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate._checkRawValueWrite()
  id: _checkRawValueWrite()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate
  langs:
  - java
  name: _checkRawValueWrite()
  nameWithType: FilteringGeneratorDelegate._checkRawValueWrite()
  fullName: com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate._checkRawValueWrite()
  overload: com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate._checkRawValueWrite*
  type: Method
  package: com.fasterxml.jackson.core.filter
  syntax:
    content: protected boolean _checkRawValueWrite()
    return:
      type: boolean
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate._filterContext
  id: _filterContext
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate
  langs:
  - java
  name: _filterContext
  nameWithType: FilteringGeneratorDelegate._filterContext
  fullName: com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate._filterContext
  type: Field
  package: com.fasterxml.jackson.core.filter
  summary: Although delegate has its own output context it is not sufficient since we actually have to keep track of excluded (filtered out) structures as well as ones delegate actually outputs.
  syntax:
    content: protected TokenFilterContext _filterContext
    return:
      type: com.fasterxml.jackson.core.filter.TokenFilterContext
- uid: com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate._includeImmediateParent
  id: _includeImmediateParent
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate
  langs:
  - java
  name: _includeImmediateParent
  nameWithType: FilteringGeneratorDelegate._includeImmediateParent
  fullName: com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate._includeImmediateParent
  type: Field
  package: com.fasterxml.jackson.core.filter
  syntax:
    content: protected boolean _includeImmediateParent
    return:
      type: boolean
- uid: com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate._includePath
  id: _includePath
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate
  langs:
  - java
  name: _includePath
  nameWithType: FilteringGeneratorDelegate._includePath
  fullName: com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate._includePath
  type: Field
  package: com.fasterxml.jackson.core.filter
  summary: Flag that determines whether path leading up to included content should also be automatically included or not. If \`false\`, no path inclusion is done and only explicitly included entries are output; if \`true\` then path from main level down to match is also included as necessary.
  syntax:
    content: protected boolean _includePath
    return:
      type: boolean
- uid: com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate._itemFilter
  id: _itemFilter
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate
  langs:
  - java
  name: _itemFilter
  nameWithType: FilteringGeneratorDelegate._itemFilter
  fullName: com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate._itemFilter
  type: Field
  package: com.fasterxml.jackson.core.filter
  summary: State that applies to the item within container, used where applicable. Specifically used to pass inclusion state between property name and property, and also used for array elements.
  syntax:
    content: protected TokenFilter _itemFilter
    return:
      type: com.fasterxml.jackson.core.filter.TokenFilter
- uid: com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate._matchCount
  id: _matchCount
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate
  langs:
  - java
  name: _matchCount
  nameWithType: FilteringGeneratorDelegate._matchCount
  fullName: com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate._matchCount
  type: Field
  package: com.fasterxml.jackson.core.filter
  summary: Number of tokens for which <xref uid="com.fasterxml.jackson.core.filter.TokenFilter.INCLUDE_ALL" data-throw-if-not-resolved="false">TokenFilter#INCLUDE_ALL</xref> has been returned
  syntax:
    content: protected int _matchCount
    return:
      type: int
- uid: com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.getFilter()
  id: getFilter()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate
  langs:
  - java
  name: getFilter()
  nameWithType: FilteringGeneratorDelegate.getFilter()
  fullName: com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.getFilter()
  overload: com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.getFilter*
  type: Method
  package: com.fasterxml.jackson.core.filter
  syntax:
    content: public TokenFilter getFilter()
    return:
      type: com.fasterxml.jackson.core.filter.TokenFilter
- uid: com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.getFilterContext()
  id: getFilterContext()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate
  langs:
  - java
  name: getFilterContext()
  nameWithType: FilteringGeneratorDelegate.getFilterContext()
  fullName: com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.getFilterContext()
  overload: com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.getFilterContext*
  type: Method
  package: com.fasterxml.jackson.core.filter
  syntax:
    content: public JsonStreamContext getFilterContext()
    return:
      type: com.fasterxml.jackson.core.JsonStreamContext
- uid: com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.getMatchCount()
  id: getMatchCount()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate
  langs:
  - java
  name: getMatchCount()
  nameWithType: FilteringGeneratorDelegate.getMatchCount()
  fullName: com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.getMatchCount()
  overload: com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.getMatchCount*
  type: Method
  package: com.fasterxml.jackson.core.filter
  summary: Accessor for finding number of matches, where specific token and sub-tree starting (if structured type) are passed.
  syntax:
    content: public int getMatchCount()
    return:
      type: int
- uid: com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.getOutputContext()
  id: getOutputContext()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate
  langs:
  - java
  name: getOutputContext()
  nameWithType: FilteringGeneratorDelegate.getOutputContext()
  fullName: com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.getOutputContext()
  overload: com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.getOutputContext*
  type: Method
  package: com.fasterxml.jackson.core.filter
  syntax:
    content: public JsonStreamContext getOutputContext()
    return:
      type: com.fasterxml.jackson.core.JsonStreamContext
- uid: com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.rootFilter
  id: rootFilter
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate
  langs:
  - java
  name: rootFilter
  nameWithType: FilteringGeneratorDelegate.rootFilter
  fullName: com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.rootFilter
  type: Field
  package: com.fasterxml.jackson.core.filter
  summary: Object consulted to determine whether to write parts of content generator is asked to write or not.
  syntax:
    content: protected TokenFilter rootFilter
    return:
      type: com.fasterxml.jackson.core.filter.TokenFilter
- uid: com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeBinary(com.fasterxml.jackson.core.Base64Variant,byte[],int,int)
  id: writeBinary(com.fasterxml.jackson.core.Base64Variant,byte[],int,int)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate
  langs:
  - java
  name: writeBinary(Base64Variant b64variant, byte[] data, int offset, int len)
  nameWithType: FilteringGeneratorDelegate.writeBinary(Base64Variant b64variant, byte[] data, int offset, int len)
  fullName: com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeBinary(Base64Variant b64variant, byte[] data, int offset, int len)
  overload: com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeBinary*
  type: Method
  package: com.fasterxml.jackson.core.filter
  summary: >-
    Method that will output given chunk of binary data as base64 encoded, as a complete String value (surrounded by double quotes). This method defaults


    Note: because JSON Strings can not contain unescaped linefeeds, if linefeeds are included (as per last argument), they must be escaped. This adds overhead for decoding without improving readability. Alternatively if linefeeds are not included, resulting String value may violate the requirement of base64 RFC which mandates line-length of 76 characters and use of linefeeds. However, all <xref uid="com.fasterxml.jackson.core.JsonParser" data-throw-if-not-resolved="false">JsonParser</xref> implementations are required to accept such "long line base64"; as do typical production-level base64 decoders.
  syntax:
    content: public void writeBinary(Base64Variant b64variant, byte[] data, int offset, int len)
    parameters:
    - id: b64variant
      type: com.fasterxml.jackson.core.Base64Variant
    - id: data
      type: byte[]
    - id: offset
      type: int
    - id: len
      type: int
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeBinary(com.fasterxml.jackson.core.Base64Variant,java.io.InputStream,int)
  id: writeBinary(com.fasterxml.jackson.core.Base64Variant,java.io.InputStream,int)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate
  langs:
  - java
  name: writeBinary(Base64Variant b64variant, InputStream data, int dataLength)
  nameWithType: FilteringGeneratorDelegate.writeBinary(Base64Variant b64variant, InputStream data, int dataLength)
  fullName: com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeBinary(Base64Variant b64variant, InputStream data, int dataLength)
  overload: com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeBinary*
  type: Method
  package: com.fasterxml.jackson.core.filter
  summary: Method similar to <xref uid="com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeBinary(com.fasterxml.jackson.core.Base64Variant,byte[],int,int)" data-throw-if-not-resolved="false">#writeBinary(Base64Variant,byte[],int,int)</xref>, but where input is provided through a stream, allowing for incremental writes without holding the whole input in memory.
  syntax:
    content: public int writeBinary(Base64Variant b64variant, InputStream data, int dataLength)
    parameters:
    - id: b64variant
      type: com.fasterxml.jackson.core.Base64Variant
    - id: data
      type: java.io.InputStream
    - id: dataLength
      type: int
    return:
      type: int
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeBoolean(boolean)
  id: writeBoolean(boolean)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate
  langs:
  - java
  name: writeBoolean(boolean v)
  nameWithType: FilteringGeneratorDelegate.writeBoolean(boolean v)
  fullName: com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeBoolean(boolean v)
  overload: com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeBoolean*
  type: Method
  package: com.fasterxml.jackson.core.filter
  summary: Method for outputting literal JSON boolean value (one of Strings 'true' and 'false'). Can be called in any context where a value is expected (Array value, Object field value, root-level value). Additional white space may be added around the value if pretty-printing is enabled.
  syntax:
    content: public void writeBoolean(boolean v)
    parameters:
    - id: v
      type: boolean
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeEndArray()
  id: writeEndArray()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate
  langs:
  - java
  name: writeEndArray()
  nameWithType: FilteringGeneratorDelegate.writeEndArray()
  fullName: com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeEndArray()
  overload: com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeEndArray*
  type: Method
  package: com.fasterxml.jackson.core.filter
  summary: >-
    Method for writing closing marker of a JSON Array value (character '\]'; plus possible white space decoration if pretty-printing is enabled).


    Marker can be written if the innermost structured type is Array.
  syntax:
    content: public void writeEndArray()
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeEndObject()
  id: writeEndObject()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate
  langs:
  - java
  name: writeEndObject()
  nameWithType: FilteringGeneratorDelegate.writeEndObject()
  fullName: com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeEndObject()
  overload: com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeEndObject*
  type: Method
  package: com.fasterxml.jackson.core.filter
  summary: >-
    Method for writing closing marker of an Object value (character '\}'; plus possible white space decoration if pretty-printing is enabled).


    Marker can be written if the innermost structured type is Object, and the last written event was either a complete value, or START-OBJECT marker (see JSON specification for more details).
  syntax:
    content: public void writeEndObject()
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeFieldId(long)
  id: writeFieldId(long)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate
  langs:
  - java
  name: writeFieldId(long id)
  nameWithType: FilteringGeneratorDelegate.writeFieldId(long id)
  fullName: com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeFieldId(long id)
  overload: com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeFieldId*
  type: Method
  package: com.fasterxml.jackson.core.filter
  summary: Alternative to <xref uid="com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeFieldName(java.lang.String)" data-throw-if-not-resolved="false">#writeFieldName(String)</xref> that may be used in cases where property key is of numeric type; either where underlying format supports such notion (some binary formats do, unlike JSON), or for convenient conversion into String presentation. Default implementation will simply convert id into `String` and call <xref uid="com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeFieldName(java.lang.String)" data-throw-if-not-resolved="false">#writeFieldName(String)</xref>.
  syntax:
    content: public void writeFieldId(long id)
    parameters:
    - id: id
      type: long
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeFieldName(com.fasterxml.jackson.core.SerializableString)
  id: writeFieldName(com.fasterxml.jackson.core.SerializableString)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate
  langs:
  - java
  name: writeFieldName(SerializableString name)
  nameWithType: FilteringGeneratorDelegate.writeFieldName(SerializableString name)
  fullName: com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeFieldName(SerializableString name)
  overload: com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeFieldName*
  type: Method
  package: com.fasterxml.jackson.core.filter
  summary: >-
    Method similar to <xref uid="com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeFieldName(java.lang.String)" data-throw-if-not-resolved="false">#writeFieldName(String)</xref>, main difference being that it may perform better as some of processing (such as quoting of certain characters, or encoding into external encoding if supported by generator) can be done just once and reused for later calls.


    Default implementation simple uses unprocessed name container in serialized String; implementations are strongly encouraged to make use of more efficient methods argument object has.
  syntax:
    content: public void writeFieldName(SerializableString name)
    parameters:
    - id: name
      type: com.fasterxml.jackson.core.SerializableString
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeFieldName(java.lang.String)
  id: writeFieldName(java.lang.String)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate
  langs:
  - java
  name: writeFieldName(String name)
  nameWithType: FilteringGeneratorDelegate.writeFieldName(String name)
  fullName: com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeFieldName(String name)
  overload: com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeFieldName*
  type: Method
  package: com.fasterxml.jackson.core.filter
  summary: >-
    Method for writing a field name (JSON String surrounded by double quotes: syntactically identical to a JSON String value), possibly decorated by white space if pretty-printing is enabled.


    Field names can only be written in Object context (check out JSON specification for details), when field name is expected (field names alternate with values).
  syntax:
    content: public void writeFieldName(String name)
    parameters:
    - id: name
      type: java.lang.String
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeNull()
  id: writeNull()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate
  langs:
  - java
  name: writeNull()
  nameWithType: FilteringGeneratorDelegate.writeNull()
  fullName: com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeNull()
  overload: com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeNull*
  type: Method
  package: com.fasterxml.jackson.core.filter
  summary: Method for outputting literal JSON null value. Can be called in any context where a value is expected (Array value, Object field value, root-level value). Additional white space may be added around the value if pretty-printing is enabled.
  syntax:
    content: public void writeNull()
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeNumber(char[],int,int)
  id: writeNumber(char[],int,int)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate
  langs:
  - java
  name: writeNumber(char[] encodedValueBuffer, int offset, int length)
  nameWithType: FilteringGeneratorDelegate.writeNumber(char[] encodedValueBuffer, int offset, int length)
  fullName: com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeNumber(char[] encodedValueBuffer, int offset, int length)
  overload: com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeNumber*
  type: Method
  package: com.fasterxml.jackson.core.filter
  summary: Overloaded version of <xref uid="com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeNumber(java.lang.String)" data-throw-if-not-resolved="false">#writeNumber(String)</xref> with same semantics but possibly more efficient operation.
  syntax:
    content: public void writeNumber(char[] encodedValueBuffer, int offset, int length)
    parameters:
    - id: encodedValueBuffer
      type: char[]
    - id: offset
      type: int
    - id: length
      type: int
  exceptions:
  - type: java.io.IOException
  - type: java.lang.UnsupportedOperationException
- uid: com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeNumber(double)
  id: writeNumber(double)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate
  langs:
  - java
  name: writeNumber(double v)
  nameWithType: FilteringGeneratorDelegate.writeNumber(double v)
  fullName: com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeNumber(double v)
  overload: com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeNumber*
  type: Method
  package: com.fasterxml.jackson.core.filter
  summary: Method for outputting indicate JSON numeric value. Can be called in any context where a value is expected (Array value, Object field value, root-level value). Additional white space may be added around the value if pretty-printing is enabled.
  syntax:
    content: public void writeNumber(double v)
    parameters:
    - id: v
      type: double
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeNumber(float)
  id: writeNumber(float)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate
  langs:
  - java
  name: writeNumber(float v)
  nameWithType: FilteringGeneratorDelegate.writeNumber(float v)
  fullName: com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeNumber(float v)
  overload: com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeNumber*
  type: Method
  package: com.fasterxml.jackson.core.filter
  summary: Method for outputting indicate JSON numeric value. Can be called in any context where a value is expected (Array value, Object field value, root-level value). Additional white space may be added around the value if pretty-printing is enabled.
  syntax:
    content: public void writeNumber(float v)
    parameters:
    - id: v
      type: float
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeNumber(int)
  id: writeNumber(int)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate
  langs:
  - java
  name: writeNumber(int v)
  nameWithType: FilteringGeneratorDelegate.writeNumber(int v)
  fullName: com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeNumber(int v)
  overload: com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeNumber*
  type: Method
  package: com.fasterxml.jackson.core.filter
  summary: Method for outputting given value as JSON number. Can be called in any context where a value is expected (Array value, Object field value, root-level value). Additional white space may be added around the value if pretty-printing is enabled.
  syntax:
    content: public void writeNumber(int v)
    parameters:
    - id: v
      type: int
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeNumber(java.lang.String)
  id: writeNumber(java.lang.String)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate
  langs:
  - java
  name: writeNumber(String encodedValue)
  nameWithType: FilteringGeneratorDelegate.writeNumber(String encodedValue)
  fullName: com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeNumber(String encodedValue)
  overload: com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeNumber*
  type: Method
  package: com.fasterxml.jackson.core.filter
  summary: >-
    Write method that can be used for custom numeric types that can not be (easily?) converted to "standard" Java number types. Because numbers are not surrounded by double quotes, regular <xref uid="com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeString*" data-throw-if-not-resolved="false">#writeString</xref> method can not be used; nor <xref uid="com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeRaw*" data-throw-if-not-resolved="false">#writeRaw</xref> because that does not properly handle value separators needed in Array or Object contexts.


    Note: because of lack of type safety, some generator implementations may not be able to implement this method. For example, if a binary JSON format is used, it may require type information for encoding; similarly for generator-wrappers around Java objects or JSON nodes. If implementation does not implement this method, it needs to throw <xref uid="java.lang.UnsupportedOperationException" data-throw-if-not-resolved="false">UnsupportedOperationException</xref>.
  syntax:
    content: public void writeNumber(String encodedValue)
    parameters:
    - id: encodedValue
      type: java.lang.String
  exceptions:
  - type: java.io.IOException
  - type: java.lang.UnsupportedOperationException
- uid: com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeNumber(java.math.BigDecimal)
  id: writeNumber(java.math.BigDecimal)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate
  langs:
  - java
  name: writeNumber(BigDecimal v)
  nameWithType: FilteringGeneratorDelegate.writeNumber(BigDecimal v)
  fullName: com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeNumber(BigDecimal v)
  overload: com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeNumber*
  type: Method
  package: com.fasterxml.jackson.core.filter
  summary: Method for outputting indicate JSON numeric value. Can be called in any context where a value is expected (Array value, Object field value, root-level value). Additional white space may be added around the value if pretty-printing is enabled.
  syntax:
    content: public void writeNumber(BigDecimal v)
    parameters:
    - id: v
      type: java.math.BigDecimal
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeNumber(java.math.BigInteger)
  id: writeNumber(java.math.BigInteger)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate
  langs:
  - java
  name: writeNumber(BigInteger v)
  nameWithType: FilteringGeneratorDelegate.writeNumber(BigInteger v)
  fullName: com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeNumber(BigInteger v)
  overload: com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeNumber*
  type: Method
  package: com.fasterxml.jackson.core.filter
  summary: Method for outputting given value as JSON number. Can be called in any context where a value is expected (Array value, Object field value, root-level value). Additional white space may be added around the value if pretty-printing is enabled.
  syntax:
    content: public void writeNumber(BigInteger v)
    parameters:
    - id: v
      type: java.math.BigInteger
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeNumber(long)
  id: writeNumber(long)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate
  langs:
  - java
  name: writeNumber(long v)
  nameWithType: FilteringGeneratorDelegate.writeNumber(long v)
  fullName: com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeNumber(long v)
  overload: com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeNumber*
  type: Method
  package: com.fasterxml.jackson.core.filter
  summary: Method for outputting given value as JSON number. Can be called in any context where a value is expected (Array value, Object field value, root-level value). Additional white space may be added around the value if pretty-printing is enabled.
  syntax:
    content: public void writeNumber(long v)
    parameters:
    - id: v
      type: long
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeNumber(short)
  id: writeNumber(short)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate
  langs:
  - java
  name: writeNumber(short v)
  nameWithType: FilteringGeneratorDelegate.writeNumber(short v)
  fullName: com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeNumber(short v)
  overload: com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeNumber*
  type: Method
  package: com.fasterxml.jackson.core.filter
  summary: Method for outputting given value as JSON number. Can be called in any context where a value is expected (Array value, Object field value, root-level value). Additional white space may be added around the value if pretty-printing is enabled.
  syntax:
    content: public void writeNumber(short v)
    parameters:
    - id: v
      type: short
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeObjectId(java.lang.Object)
  id: writeObjectId(java.lang.Object)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate
  langs:
  - java
  name: writeObjectId(Object id)
  nameWithType: FilteringGeneratorDelegate.writeObjectId(Object id)
  fullName: com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeObjectId(Object id)
  overload: com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeObjectId*
  type: Method
  package: com.fasterxml.jackson.core.filter
  summary: Method that can be called to output so-called native Object Id. Note that it may only be called after ensuring this is legal (with <xref uid="com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.canWriteObjectId*" data-throw-if-not-resolved="false">#canWriteObjectId()</xref>), as not all data formats have native type id support; and some may only allow them in certain positions or locations. If output is not allowed by the data format in this position, a <xref uid="com.fasterxml.jackson.core.JsonGenerationException" data-throw-if-not-resolved="false">JsonGenerationException</xref> will be thrown.
  syntax:
    content: public void writeObjectId(Object id)
    parameters:
    - id: id
      type: java.lang.Object
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeObjectRef(java.lang.Object)
  id: writeObjectRef(java.lang.Object)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate
  langs:
  - java
  name: writeObjectRef(Object id)
  nameWithType: FilteringGeneratorDelegate.writeObjectRef(Object id)
  fullName: com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeObjectRef(Object id)
  overload: com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeObjectRef*
  type: Method
  package: com.fasterxml.jackson.core.filter
  summary: Method that can be called to output references to native Object Ids. Note that it may only be called after ensuring this is legal (with <xref uid="com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.canWriteObjectId*" data-throw-if-not-resolved="false">#canWriteObjectId()</xref>), as not all data formats have native type id support; and some may only allow them in certain positions or locations. If output is not allowed by the data format in this position, a <xref uid="com.fasterxml.jackson.core.JsonGenerationException" data-throw-if-not-resolved="false">JsonGenerationException</xref> will be thrown.
  syntax:
    content: public void writeObjectRef(Object id)
    parameters:
    - id: id
      type: java.lang.Object
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeOmittedField(java.lang.String)
  id: writeOmittedField(java.lang.String)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate
  langs:
  - java
  name: writeOmittedField(String fieldName)
  nameWithType: FilteringGeneratorDelegate.writeOmittedField(String fieldName)
  fullName: com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeOmittedField(String fieldName)
  overload: com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeOmittedField*
  type: Method
  package: com.fasterxml.jackson.core.filter
  summary: >-
    Method called to indicate that a property in this position was skipped. It is usually only called for generators that return `false` from <xref uid="com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.canOmitFields*" data-throw-if-not-resolved="false">#canOmitFields()</xref>.


    Default implementation does nothing.
  syntax:
    content: public void writeOmittedField(String fieldName)
    parameters:
    - id: fieldName
      type: java.lang.String
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeRaw(char)
  id: writeRaw(char)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate
  langs:
  - java
  name: writeRaw(char c)
  nameWithType: FilteringGeneratorDelegate.writeRaw(char c)
  fullName: com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeRaw(char c)
  overload: com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeRaw*
  type: Method
  package: com.fasterxml.jackson.core.filter
  summary: >-
    Method that will force generator to copy input text verbatim with **no** modifications (including that no escaping is done and no separators are added even if context \[array, object\] would otherwise require such). If such separators are desired, use <xref uid="com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeRawValue(java.lang.String)" data-throw-if-not-resolved="false">#writeRawValue(String)</xref> instead.


    Note that not all generator implementations necessarily support such by-pass methods: those that do not will throw <xref uid="java.lang.UnsupportedOperationException" data-throw-if-not-resolved="false">UnsupportedOperationException</xref>.
  syntax:
    content: public void writeRaw(char c)
    parameters:
    - id: c
      type: char
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeRaw(char[],int,int)
  id: writeRaw(char[],int,int)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate
  langs:
  - java
  name: writeRaw(char[] text, int offset, int len)
  nameWithType: FilteringGeneratorDelegate.writeRaw(char[] text, int offset, int len)
  fullName: com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeRaw(char[] text, int offset, int len)
  overload: com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeRaw*
  type: Method
  package: com.fasterxml.jackson.core.filter
  summary: >-
    Method that will force generator to copy input text verbatim with **no** modifications (including that no escaping is done and no separators are added even if context \[array, object\] would otherwise require such). If such separators are desired, use <xref uid="com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeRawValue(java.lang.String)" data-throw-if-not-resolved="false">#writeRawValue(String)</xref> instead.


    Note that not all generator implementations necessarily support such by-pass methods: those that do not will throw <xref uid="java.lang.UnsupportedOperationException" data-throw-if-not-resolved="false">UnsupportedOperationException</xref>.
  syntax:
    content: public void writeRaw(char[] text, int offset, int len)
    parameters:
    - id: text
      type: char[]
    - id: offset
      type: int
    - id: len
      type: int
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeRaw(com.fasterxml.jackson.core.SerializableString)
  id: writeRaw(com.fasterxml.jackson.core.SerializableString)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate
  langs:
  - java
  name: writeRaw(SerializableString text)
  nameWithType: FilteringGeneratorDelegate.writeRaw(SerializableString text)
  fullName: com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeRaw(SerializableString text)
  overload: com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeRaw*
  type: Method
  package: com.fasterxml.jackson.core.filter
  summary: >-
    Method that will force generator to copy input text verbatim with **no** modifications (including that no escaping is done and no separators are added even if context \[array, object\] would otherwise require such). If such separators are desired, use <xref uid="com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeRawValue(java.lang.String)" data-throw-if-not-resolved="false">#writeRawValue(String)</xref> instead.


    Note that not all generator implementations necessarily support such by-pass methods: those that do not will throw <xref uid="java.lang.UnsupportedOperationException" data-throw-if-not-resolved="false">UnsupportedOperationException</xref>.


    The default implementation delegates to <xref uid="com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeRaw(java.lang.String)" data-throw-if-not-resolved="false">#writeRaw(String)</xref>; other backends that support raw inclusion of text are encouraged to implement it in more efficient manner (especially if they use UTF-8 encoding).
  syntax:
    content: public void writeRaw(SerializableString text)
    parameters:
    - id: text
      type: com.fasterxml.jackson.core.SerializableString
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeRaw(java.lang.String)
  id: writeRaw(java.lang.String)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate
  langs:
  - java
  name: writeRaw(String text)
  nameWithType: FilteringGeneratorDelegate.writeRaw(String text)
  fullName: com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeRaw(String text)
  overload: com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeRaw*
  type: Method
  package: com.fasterxml.jackson.core.filter
  summary: >-
    Method that will force generator to copy input text verbatim with **no** modifications (including that no escaping is done and no separators are added even if context \[array, object\] would otherwise require such). If such separators are desired, use <xref uid="com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeRawValue(java.lang.String)" data-throw-if-not-resolved="false">#writeRawValue(String)</xref> instead.


    Note that not all generator implementations necessarily support such by-pass methods: those that do not will throw <xref uid="java.lang.UnsupportedOperationException" data-throw-if-not-resolved="false">UnsupportedOperationException</xref>.
  syntax:
    content: public void writeRaw(String text)
    parameters:
    - id: text
      type: java.lang.String
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeRaw(java.lang.String,int,int)
  id: writeRaw(java.lang.String,int,int)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate
  langs:
  - java
  name: writeRaw(String text, int offset, int len)
  nameWithType: FilteringGeneratorDelegate.writeRaw(String text, int offset, int len)
  fullName: com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeRaw(String text, int offset, int len)
  overload: com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeRaw*
  type: Method
  package: com.fasterxml.jackson.core.filter
  summary: >-
    Method that will force generator to copy input text verbatim with **no** modifications (including that no escaping is done and no separators are added even if context \[array, object\] would otherwise require such). If such separators are desired, use <xref uid="com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeRawValue(java.lang.String)" data-throw-if-not-resolved="false">#writeRawValue(String)</xref> instead.


    Note that not all generator implementations necessarily support such by-pass methods: those that do not will throw <xref uid="java.lang.UnsupportedOperationException" data-throw-if-not-resolved="false">UnsupportedOperationException</xref>.
  syntax:
    content: public void writeRaw(String text, int offset, int len)
    parameters:
    - id: text
      type: java.lang.String
    - id: offset
      type: int
    - id: len
      type: int
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeRawUTF8String(byte[],int,int)
  id: writeRawUTF8String(byte[],int,int)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate
  langs:
  - java
  name: writeRawUTF8String(byte[] text, int offset, int length)
  nameWithType: FilteringGeneratorDelegate.writeRawUTF8String(byte[] text, int offset, int length)
  fullName: com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeRawUTF8String(byte[] text, int offset, int length)
  overload: com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeRawUTF8String*
  type: Method
  package: com.fasterxml.jackson.core.filter
  summary: >-
    Method similar to <xref uid="com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeString(java.lang.String)" data-throw-if-not-resolved="false">#writeString(String)</xref> but that takes as its input a UTF-8 encoded String that is to be output as-is, without additional escaping (type of which depends on data format; backslashes for JSON). However, quoting that data format requires (like double-quotes for JSON) will be added around the value if and as necessary.


    Note that some backends may choose not to support this method: for example, if underlying destination is a <xref uid="java.io.Writer" data-throw-if-not-resolved="false">java.io.Writer</xref> using this method would require UTF-8 decoding. If so, implementation may instead choose to throw a <xref uid="java.lang.UnsupportedOperationException" data-throw-if-not-resolved="false">UnsupportedOperationException</xref> due to ineffectiveness of having to decode input.
  syntax:
    content: public void writeRawUTF8String(byte[] text, int offset, int length)
    parameters:
    - id: text
      type: byte[]
    - id: offset
      type: int
    - id: length
      type: int
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeRawValue(char[],int,int)
  id: writeRawValue(char[],int,int)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate
  langs:
  - java
  name: writeRawValue(char[] text, int offset, int len)
  nameWithType: FilteringGeneratorDelegate.writeRawValue(char[] text, int offset, int len)
  fullName: com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeRawValue(char[] text, int offset, int len)
  overload: com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeRawValue*
  type: Method
  package: com.fasterxml.jackson.core.filter
  syntax:
    content: public void writeRawValue(char[] text, int offset, int len)
    parameters:
    - id: text
      type: char[]
    - id: offset
      type: int
    - id: len
      type: int
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeRawValue(java.lang.String)
  id: writeRawValue(java.lang.String)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate
  langs:
  - java
  name: writeRawValue(String text)
  nameWithType: FilteringGeneratorDelegate.writeRawValue(String text)
  fullName: com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeRawValue(String text)
  overload: com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeRawValue*
  type: Method
  package: com.fasterxml.jackson.core.filter
  summary: Method that will force generator to copy input text verbatim without any modifications, but assuming it must constitute a single legal JSON value (number, string, boolean, null, Array or List). Assuming this, proper separators are added if and as needed (comma or colon), and generator state updated to reflect this.
  syntax:
    content: public void writeRawValue(String text)
    parameters:
    - id: text
      type: java.lang.String
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeRawValue(java.lang.String,int,int)
  id: writeRawValue(java.lang.String,int,int)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate
  langs:
  - java
  name: writeRawValue(String text, int offset, int len)
  nameWithType: FilteringGeneratorDelegate.writeRawValue(String text, int offset, int len)
  fullName: com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeRawValue(String text, int offset, int len)
  overload: com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeRawValue*
  type: Method
  package: com.fasterxml.jackson.core.filter
  syntax:
    content: public void writeRawValue(String text, int offset, int len)
    parameters:
    - id: text
      type: java.lang.String
    - id: offset
      type: int
    - id: len
      type: int
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeStartArray()
  id: writeStartArray()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate
  langs:
  - java
  name: writeStartArray()
  nameWithType: FilteringGeneratorDelegate.writeStartArray()
  fullName: com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeStartArray()
  overload: com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeStartArray*
  type: Method
  package: com.fasterxml.jackson.core.filter
  summary: >-
    Method for writing starting marker of a Array value (for JSON this is character '\['; plus possible white space decoration if pretty-printing is enabled).


    Array values can be written in any context where values are allowed: meaning everywhere except for when a field name is expected.
  syntax:
    content: public void writeStartArray()
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeStartArray(int)
  id: writeStartArray(int)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate
  langs:
  - java
  name: writeStartArray(int size)
  nameWithType: FilteringGeneratorDelegate.writeStartArray(int size)
  fullName: com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeStartArray(int size)
  overload: com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeStartArray*
  type: Method
  package: com.fasterxml.jackson.core.filter
  summary: >-
    Method for writing start marker of an Array value, similar to <xref uid="com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeStartArray()" data-throw-if-not-resolved="false">#writeStartArray()</xref>, but also specifying how many elements will be written for the array before calling <xref uid="com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeEndArray()" data-throw-if-not-resolved="false">#writeEndArray()</xref>.


    Default implementation simply calls <xref uid="com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeStartArray()" data-throw-if-not-resolved="false">#writeStartArray()</xref>.
  syntax:
    content: public void writeStartArray(int size)
    parameters:
    - id: size
      type: int
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeStartArray(java.lang.Object)
  id: writeStartArray(java.lang.Object)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate
  langs:
  - java
  name: writeStartArray(Object forValue)
  nameWithType: FilteringGeneratorDelegate.writeStartArray(Object forValue)
  fullName: com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeStartArray(Object forValue)
  overload: com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeStartArray*
  type: Method
  package: com.fasterxml.jackson.core.filter
  syntax:
    content: public void writeStartArray(Object forValue)
    parameters:
    - id: forValue
      type: java.lang.Object
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeStartArray(java.lang.Object,int)
  id: writeStartArray(java.lang.Object,int)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate
  langs:
  - java
  name: writeStartArray(Object forValue, int size)
  nameWithType: FilteringGeneratorDelegate.writeStartArray(Object forValue, int size)
  fullName: com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeStartArray(Object forValue, int size)
  overload: com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeStartArray*
  type: Method
  package: com.fasterxml.jackson.core.filter
  syntax:
    content: public void writeStartArray(Object forValue, int size)
    parameters:
    - id: forValue
      type: java.lang.Object
    - id: size
      type: int
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeStartObject()
  id: writeStartObject()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate
  langs:
  - java
  name: writeStartObject()
  nameWithType: FilteringGeneratorDelegate.writeStartObject()
  fullName: com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeStartObject()
  overload: com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeStartObject*
  type: Method
  package: com.fasterxml.jackson.core.filter
  summary: >-
    Method for writing starting marker of an Object value (character '\{'; plus possible white space decoration if pretty-printing is enabled).


    Object values can be written in any context where values are allowed: meaning everywhere except for when a field name is expected.
  syntax:
    content: public void writeStartObject()
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeStartObject(java.lang.Object)
  id: writeStartObject(java.lang.Object)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate
  langs:
  - java
  name: writeStartObject(Object forValue)
  nameWithType: FilteringGeneratorDelegate.writeStartObject(Object forValue)
  fullName: com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeStartObject(Object forValue)
  overload: com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeStartObject*
  type: Method
  package: com.fasterxml.jackson.core.filter
  summary: >-
    Method for writing starting marker of an Object value to represent the given Java Object value. Argument is offered as metadata, but more importantly it should be assigned as the "current value" for the Object content that gets constructed and initialized.


    Object values can be written in any context where values are allowed: meaning everywhere except for when a field name is expected.
  syntax:
    content: public void writeStartObject(Object forValue)
    parameters:
    - id: forValue
      type: java.lang.Object
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeStartObject(java.lang.Object,int)
  id: writeStartObject(java.lang.Object,int)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate
  langs:
  - java
  name: writeStartObject(Object forValue, int size)
  nameWithType: FilteringGeneratorDelegate.writeStartObject(Object forValue, int size)
  fullName: com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeStartObject(Object forValue, int size)
  overload: com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeStartObject*
  type: Method
  package: com.fasterxml.jackson.core.filter
  summary: >-
    Method for writing starting marker of an Object value to represent the given Java Object value. Argument is offered as metadata, but more importantly it should be assigned as the "current value" for the Object content that gets constructed and initialized. In addition, caller knows number of key/value pairs ("properties") that will get written for the Object value: this is relevant for some format backends (but not, as an example, for JSON).


    Object values can be written in any context where values are allowed: meaning everywhere except for when a field name is expected.
  syntax:
    content: public void writeStartObject(Object forValue, int size)
    parameters:
    - id: forValue
      type: java.lang.Object
    - id: size
      type: int
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeString(char[],int,int)
  id: writeString(char[],int,int)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate
  langs:
  - java
  name: writeString(char[] text, int offset, int len)
  nameWithType: FilteringGeneratorDelegate.writeString(char[] text, int offset, int len)
  fullName: com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeString(char[] text, int offset, int len)
  overload: com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeString*
  type: Method
  package: com.fasterxml.jackson.core.filter
  summary: Method for outputting a String value. Depending on context this means either array element, (object) field value or a stand alone String; but in all cases, String will be surrounded in double quotes, and contents will be properly escaped as required by JSON specification.
  syntax:
    content: public void writeString(char[] text, int offset, int len)
    parameters:
    - id: text
      type: char[]
    - id: offset
      type: int
    - id: len
      type: int
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeString(com.fasterxml.jackson.core.SerializableString)
  id: writeString(com.fasterxml.jackson.core.SerializableString)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate
  langs:
  - java
  name: writeString(SerializableString value)
  nameWithType: FilteringGeneratorDelegate.writeString(SerializableString value)
  fullName: com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeString(SerializableString value)
  overload: com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeString*
  type: Method
  package: com.fasterxml.jackson.core.filter
  summary: >-
    Method similar to <xref uid="com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeString(java.lang.String)" data-throw-if-not-resolved="false">#writeString(String)</xref>, but that takes <xref uid="com.fasterxml.jackson.core.SerializableString" data-throw-if-not-resolved="false">SerializableString</xref> which can make this potentially more efficient to call as generator may be able to reuse quoted and/or encoded representation.


    Default implementation just calls <xref uid="com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeString(java.lang.String)" data-throw-if-not-resolved="false">#writeString(String)</xref>; sub-classes should override it with more efficient implementation if possible.
  syntax:
    content: public void writeString(SerializableString value)
    parameters:
    - id: value
      type: com.fasterxml.jackson.core.SerializableString
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeString(java.io.Reader,int)
  id: writeString(java.io.Reader,int)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate
  langs:
  - java
  name: writeString(Reader reader, int len)
  nameWithType: FilteringGeneratorDelegate.writeString(Reader reader, int len)
  fullName: com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeString(Reader reader, int len)
  overload: com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeString*
  type: Method
  package: com.fasterxml.jackson.core.filter
  summary: Method for outputting a String value. Depending on context this means either array element, (object) field value or a stand alone String; but in all cases, String will be surrounded in double quotes, and contents will be properly escaped as required by JSON specification. If the reader is null, then write a null. If len is < 0, then write all contents of the reader. Otherwise, write only len characters.
  syntax:
    content: public void writeString(Reader reader, int len)
    parameters:
    - id: reader
      type: java.io.Reader
    - id: len
      type: int
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeString(java.lang.String)
  id: writeString(java.lang.String)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate
  langs:
  - java
  name: writeString(String value)
  nameWithType: FilteringGeneratorDelegate.writeString(String value)
  fullName: com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeString(String value)
  overload: com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeString*
  type: Method
  package: com.fasterxml.jackson.core.filter
  summary: Method for outputting a String value. Depending on context this means either array element, (object) field value or a stand alone String; but in all cases, String will be surrounded in double quotes, and contents will be properly escaped as required by JSON specification.
  syntax:
    content: public void writeString(String value)
    parameters:
    - id: value
      type: java.lang.String
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeTypeId(java.lang.Object)
  id: writeTypeId(java.lang.Object)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate
  langs:
  - java
  name: writeTypeId(Object id)
  nameWithType: FilteringGeneratorDelegate.writeTypeId(Object id)
  fullName: com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeTypeId(Object id)
  overload: com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeTypeId*
  type: Method
  package: com.fasterxml.jackson.core.filter
  summary: Method that can be called to output so-called native Type Id. Note that it may only be called after ensuring this is legal (with <xref uid="com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.canWriteTypeId*" data-throw-if-not-resolved="false">#canWriteTypeId()</xref>), as not all data formats have native type id support; and some may only allow them in certain positions or locations. If output is not allowed by the data format in this position, a <xref uid="com.fasterxml.jackson.core.JsonGenerationException" data-throw-if-not-resolved="false">JsonGenerationException</xref> will be thrown.
  syntax:
    content: public void writeTypeId(Object id)
    parameters:
    - id: id
      type: java.lang.Object
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeUTF8String(byte[],int,int)
  id: writeUTF8String(byte[],int,int)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate
  langs:
  - java
  name: writeUTF8String(byte[] text, int offset, int length)
  nameWithType: FilteringGeneratorDelegate.writeUTF8String(byte[] text, int offset, int length)
  fullName: com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeUTF8String(byte[] text, int offset, int length)
  overload: com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeUTF8String*
  type: Method
  package: com.fasterxml.jackson.core.filter
  summary: >-
    Method similar to <xref uid="com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeString(java.lang.String)" data-throw-if-not-resolved="false">#writeString(String)</xref> but that takes as its input a UTF-8 encoded String which has **not** been escaped using whatever escaping scheme data format requires (for JSON that is backslash-escaping for control characters and double-quotes; for other formats something else). This means that textual JSON backends need to check if value needs JSON escaping, but otherwise can just be copied as is to output. Also, quoting that data format requires (like double-quotes for JSON) will be added around the value if and as necessary.


    Note that some backends may choose not to support this method: for example, if underlying destination is a <xref uid="java.io.Writer" data-throw-if-not-resolved="false">java.io.Writer</xref> using this method would require UTF-8 decoding. In this case generator implementation may instead choose to throw a <xref uid="java.lang.UnsupportedOperationException" data-throw-if-not-resolved="false">UnsupportedOperationException</xref> due to ineffectiveness of having to decode input.
  syntax:
    content: public void writeUTF8String(byte[] text, int offset, int length)
    parameters:
    - id: text
      type: byte[]
    - id: offset
      type: int
    - id: length
      type: int
  exceptions:
  - type: java.io.IOException
references:
- uid: com.fasterxml.jackson.core.JsonGenerator
  name: JsonGenerator
  nameWithType: JsonGenerator
  fullName: com.fasterxml.jackson.core.JsonGenerator
- uid: com.fasterxml.jackson.core.filter.TokenFilter
  name: TokenFilter
  nameWithType: TokenFilter
  fullName: com.fasterxml.jackson.core.filter.TokenFilter
- uid: boolean
  spec.java:
  - uid: boolean
    name: boolean
    fullName: boolean
- uid: com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.FilteringGeneratorDelegate*
  name: FilteringGeneratorDelegate
  nameWithType: FilteringGeneratorDelegate.FilteringGeneratorDelegate
  fullName: com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.FilteringGeneratorDelegate
  package: com.fasterxml.jackson.core.filter
- uid: com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.getFilter*
  name: getFilter
  nameWithType: FilteringGeneratorDelegate.getFilter
  fullName: com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.getFilter
  package: com.fasterxml.jackson.core.filter
- uid: com.fasterxml.jackson.core.JsonStreamContext
  name: JsonStreamContext
  nameWithType: JsonStreamContext
  fullName: com.fasterxml.jackson.core.JsonStreamContext
- uid: com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.getFilterContext*
  name: getFilterContext
  nameWithType: FilteringGeneratorDelegate.getFilterContext
  fullName: com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.getFilterContext
  package: com.fasterxml.jackson.core.filter
- uid: int
  spec.java:
  - uid: int
    name: int
    fullName: int
- uid: com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.getMatchCount*
  name: getMatchCount
  nameWithType: FilteringGeneratorDelegate.getMatchCount
  fullName: com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.getMatchCount
  package: com.fasterxml.jackson.core.filter
- uid: com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.getOutputContext*
  name: getOutputContext
  nameWithType: FilteringGeneratorDelegate.getOutputContext
  fullName: com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.getOutputContext
  package: com.fasterxml.jackson.core.filter
- uid: java.io.IOException
  spec.java:
  - uid: java.io.IOException
    name: IOException
    fullName: java.io.IOException
- uid: com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeStartArray*
  name: writeStartArray
  nameWithType: FilteringGeneratorDelegate.writeStartArray
  fullName: com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeStartArray
  package: com.fasterxml.jackson.core.filter
- uid: java.lang.Object
  spec.java:
  - uid: java.lang.Object
    name: Object
    fullName: java.lang.Object
- uid: com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeEndArray*
  name: writeEndArray
  nameWithType: FilteringGeneratorDelegate.writeEndArray
  fullName: com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeEndArray
  package: com.fasterxml.jackson.core.filter
- uid: com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeStartObject*
  name: writeStartObject
  nameWithType: FilteringGeneratorDelegate.writeStartObject
  fullName: com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeStartObject
  package: com.fasterxml.jackson.core.filter
- uid: com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeEndObject*
  name: writeEndObject
  nameWithType: FilteringGeneratorDelegate.writeEndObject
  fullName: com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeEndObject
  package: com.fasterxml.jackson.core.filter
- uid: java.lang.String
  spec.java:
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
- uid: com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeFieldName*
  name: writeFieldName
  nameWithType: FilteringGeneratorDelegate.writeFieldName
  fullName: com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeFieldName
  package: com.fasterxml.jackson.core.filter
- uid: com.fasterxml.jackson.core.SerializableString
  name: SerializableString
  nameWithType: SerializableString
  fullName: com.fasterxml.jackson.core.SerializableString
- uid: long
  spec.java:
  - uid: long
    name: long
    fullName: long
- uid: com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeFieldId*
  name: writeFieldId
  nameWithType: FilteringGeneratorDelegate.writeFieldId
  fullName: com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeFieldId
  package: com.fasterxml.jackson.core.filter
- uid: com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeString*
  name: writeString
  nameWithType: FilteringGeneratorDelegate.writeString
  fullName: com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeString
  package: com.fasterxml.jackson.core.filter
- uid: char[]
  spec.java:
  - uid: char
    name: char
    fullName: char
  - name: '[]'
    fullName: '[]'
- uid: java.io.Reader
  spec.java:
  - uid: java.io.Reader
    name: Reader
    fullName: java.io.Reader
- uid: byte[]
  spec.java:
  - uid: byte
    name: byte
    fullName: byte
  - name: '[]'
    fullName: '[]'
- uid: com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeRawUTF8String*
  name: writeRawUTF8String
  nameWithType: FilteringGeneratorDelegate.writeRawUTF8String
  fullName: com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeRawUTF8String
  package: com.fasterxml.jackson.core.filter
- uid: com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeUTF8String*
  name: writeUTF8String
  nameWithType: FilteringGeneratorDelegate.writeUTF8String
  fullName: com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeUTF8String
  package: com.fasterxml.jackson.core.filter
- uid: com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeRaw*
  name: writeRaw
  nameWithType: FilteringGeneratorDelegate.writeRaw
  fullName: com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeRaw
  package: com.fasterxml.jackson.core.filter
- uid: char
  spec.java:
  - uid: char
    name: char
    fullName: char
- uid: com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeRawValue*
  name: writeRawValue
  nameWithType: FilteringGeneratorDelegate.writeRawValue
  fullName: com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeRawValue
  package: com.fasterxml.jackson.core.filter
- uid: com.fasterxml.jackson.core.Base64Variant
  name: Base64Variant
  nameWithType: Base64Variant
  fullName: com.fasterxml.jackson.core.Base64Variant
- uid: com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeBinary*
  name: writeBinary
  nameWithType: FilteringGeneratorDelegate.writeBinary
  fullName: com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeBinary
  package: com.fasterxml.jackson.core.filter
- uid: java.io.InputStream
  spec.java:
  - uid: java.io.InputStream
    name: InputStream
    fullName: java.io.InputStream
- uid: short
  spec.java:
  - uid: short
    name: short
    fullName: short
- uid: com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeNumber*
  name: writeNumber
  nameWithType: FilteringGeneratorDelegate.writeNumber
  fullName: com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeNumber
  package: com.fasterxml.jackson.core.filter
- uid: java.math.BigInteger
  spec.java:
  - uid: java.math.BigInteger
    name: BigInteger
    fullName: java.math.BigInteger
- uid: double
  spec.java:
  - uid: double
    name: double
    fullName: double
- uid: float
  spec.java:
  - uid: float
    name: float
    fullName: float
- uid: java.math.BigDecimal
  spec.java:
  - uid: java.math.BigDecimal
    name: BigDecimal
    fullName: java.math.BigDecimal
- uid: java.lang.UnsupportedOperationException
  spec.java:
  - uid: java.lang.UnsupportedOperationException
    name: UnsupportedOperationException
    fullName: java.lang.UnsupportedOperationException
- uid: com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeBoolean*
  name: writeBoolean
  nameWithType: FilteringGeneratorDelegate.writeBoolean
  fullName: com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeBoolean
  package: com.fasterxml.jackson.core.filter
- uid: com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeNull*
  name: writeNull
  nameWithType: FilteringGeneratorDelegate.writeNull
  fullName: com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeNull
  package: com.fasterxml.jackson.core.filter
- uid: com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeOmittedField*
  name: writeOmittedField
  nameWithType: FilteringGeneratorDelegate.writeOmittedField
  fullName: com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeOmittedField
  package: com.fasterxml.jackson.core.filter
- uid: com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeObjectId*
  name: writeObjectId
  nameWithType: FilteringGeneratorDelegate.writeObjectId
  fullName: com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeObjectId
  package: com.fasterxml.jackson.core.filter
- uid: com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeObjectRef*
  name: writeObjectRef
  nameWithType: FilteringGeneratorDelegate.writeObjectRef
  fullName: com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeObjectRef
  package: com.fasterxml.jackson.core.filter
- uid: com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeTypeId*
  name: writeTypeId
  nameWithType: FilteringGeneratorDelegate.writeTypeId
  fullName: com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeTypeId
  package: com.fasterxml.jackson.core.filter
- uid: com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate._checkParentPath*
  name: _checkParentPath
  nameWithType: FilteringGeneratorDelegate._checkParentPath
  fullName: com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate._checkParentPath
  package: com.fasterxml.jackson.core.filter
- uid: com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate._checkPropertyParentPath*
  name: _checkPropertyParentPath
  nameWithType: FilteringGeneratorDelegate._checkPropertyParentPath
  fullName: com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate._checkPropertyParentPath
  package: com.fasterxml.jackson.core.filter
- uid: com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate._checkBinaryWrite*
  name: _checkBinaryWrite
  nameWithType: FilteringGeneratorDelegate._checkBinaryWrite
  fullName: com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate._checkBinaryWrite
  package: com.fasterxml.jackson.core.filter
- uid: com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate._checkRawValueWrite*
  name: _checkRawValueWrite
  nameWithType: FilteringGeneratorDelegate._checkRawValueWrite
  fullName: com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate._checkRawValueWrite
  package: com.fasterxml.jackson.core.filter
- uid: com.fasterxml.jackson.core.filter.TokenFilterContext
  name: TokenFilterContext
  nameWithType: TokenFilterContext
  fullName: com.fasterxml.jackson.core.filter.TokenFilterContext
- uid: com.fasterxml.jackson.core.util.JsonGeneratorDelegate
  name: JsonGeneratorDelegate
  nameWithType: JsonGeneratorDelegate
  fullName: com.fasterxml.jackson.core.util.JsonGeneratorDelegate
- uid: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.getFeatureMask()
  name: JsonGeneratorDelegate.getFeatureMask()
  nameWithType: JsonGeneratorDelegate.getFeatureMask()
  fullName: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.getFeatureMask()
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: java.lang.Object.finalize()
  name: Object.finalize()
  nameWithType: Object.finalize()
  fullName: java.lang.Object.finalize()
- uid: com.fasterxml.jackson.core.JsonGenerator.writeObjectField(java.lang.String,java.lang.Object)
  name: JsonGenerator.writeObjectField(String,Object)
  nameWithType: JsonGenerator.writeObjectField(String,Object)
  fullName: com.fasterxml.jackson.core.JsonGenerator.writeObjectField(java.lang.String,java.lang.Object)
- uid: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.canWriteFormattedNumbers()
  name: JsonGeneratorDelegate.canWriteFormattedNumbers()
  nameWithType: JsonGeneratorDelegate.canWriteFormattedNumbers()
  fullName: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.canWriteFormattedNumbers()
- uid: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeStartArray(java.lang.Object,int)
  name: JsonGeneratorDelegate.writeStartArray(Object,int)
  nameWithType: JsonGeneratorDelegate.writeStartArray(Object,int)
  fullName: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeStartArray(java.lang.Object,int)
- uid: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.getDelegate()
  name: JsonGeneratorDelegate.getDelegate()
  nameWithType: JsonGeneratorDelegate.getDelegate()
  fullName: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.getDelegate()
- uid: com.fasterxml.jackson.core.JsonGenerator.writeBinary(byte[])
  name: JsonGenerator.writeBinary(byte[])
  nameWithType: JsonGenerator.writeBinary(byte[])
  fullName: com.fasterxml.jackson.core.JsonGenerator.writeBinary(byte[])
- uid: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.setPrettyPrinter(com.fasterxml.jackson.core.PrettyPrinter)
  name: JsonGeneratorDelegate.setPrettyPrinter(PrettyPrinter)
  nameWithType: JsonGeneratorDelegate.setPrettyPrinter(PrettyPrinter)
  fullName: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.setPrettyPrinter(com.fasterxml.jackson.core.PrettyPrinter)
- uid: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeRaw(java.lang.String)
  name: JsonGeneratorDelegate.writeRaw(String)
  nameWithType: JsonGeneratorDelegate.writeRaw(String)
  fullName: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeRaw(java.lang.String)
- uid: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.setHighestNonEscapedChar(int)
  name: JsonGeneratorDelegate.setHighestNonEscapedChar(int)
  nameWithType: JsonGeneratorDelegate.setHighestNonEscapedChar(int)
  fullName: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.setHighestNonEscapedChar(int)
- uid: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.getOutputContext()
  name: JsonGeneratorDelegate.getOutputContext()
  nameWithType: JsonGeneratorDelegate.getOutputContext()
  fullName: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.getOutputContext()
- uid: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeArray(int[],int,int)
  name: JsonGeneratorDelegate.writeArray(int[],int,int)
  nameWithType: JsonGeneratorDelegate.writeArray(int[],int,int)
  fullName: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeArray(int[],int,int)
- uid: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeNumber(int)
  name: JsonGeneratorDelegate.writeNumber(int)
  nameWithType: JsonGeneratorDelegate.writeNumber(int)
  fullName: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeNumber(int)
- uid: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeBinary(com.fasterxml.jackson.core.Base64Variant,java.io.InputStream,int)
  name: JsonGeneratorDelegate.writeBinary(Base64Variant,InputStream,int)
  nameWithType: JsonGeneratorDelegate.writeBinary(Base64Variant,InputStream,int)
  fullName: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeBinary(com.fasterxml.jackson.core.Base64Variant,java.io.InputStream,int)
- uid: com.fasterxml.jackson.core.JsonGenerator.writeArrayFieldStart(java.lang.String)
  name: JsonGenerator.writeArrayFieldStart(String)
  nameWithType: JsonGenerator.writeArrayFieldStart(String)
  fullName: com.fasterxml.jackson.core.JsonGenerator.writeArrayFieldStart(java.lang.String)
- uid: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeRawUTF8String(byte[],int,int)
  name: JsonGeneratorDelegate.writeRawUTF8String(byte[],int,int)
  nameWithType: JsonGeneratorDelegate.writeRawUTF8String(byte[],int,int)
  fullName: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeRawUTF8String(byte[],int,int)
- uid: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeNumber(long)
  name: JsonGeneratorDelegate.writeNumber(long)
  nameWithType: JsonGeneratorDelegate.writeNumber(long)
  fullName: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeNumber(long)
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.setFeatureMask(int)
  name: JsonGeneratorDelegate.setFeatureMask(int)
  nameWithType: JsonGeneratorDelegate.setFeatureMask(int)
  fullName: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.setFeatureMask(int)
- uid: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeEndObject()
  name: JsonGeneratorDelegate.writeEndObject()
  nameWithType: JsonGeneratorDelegate.writeEndObject()
  fullName: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeEndObject()
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeBinary(com.fasterxml.jackson.core.Base64Variant,byte[],int,int)
  name: JsonGeneratorDelegate.writeBinary(Base64Variant,byte[],int,int)
  nameWithType: JsonGeneratorDelegate.writeBinary(Base64Variant,byte[],int,int)
  fullName: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeBinary(com.fasterxml.jackson.core.Base64Variant,byte[],int,int)
- uid: com.fasterxml.jackson.core.JsonGenerator.isEnabled(com.fasterxml.jackson.core.StreamWriteFeature)
  name: JsonGenerator.isEnabled(StreamWriteFeature)
  nameWithType: JsonGenerator.isEnabled(StreamWriteFeature)
  fullName: com.fasterxml.jackson.core.JsonGenerator.isEnabled(com.fasterxml.jackson.core.StreamWriteFeature)
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.overrideFormatFeatures(int,int)
  name: JsonGeneratorDelegate.overrideFormatFeatures(int,int)
  nameWithType: JsonGeneratorDelegate.overrideFormatFeatures(int,int)
  fullName: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.overrideFormatFeatures(int,int)
- uid: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.copyCurrentStructure(com.fasterxml.jackson.core.JsonParser)
  name: JsonGeneratorDelegate.copyCurrentStructure(JsonParser)
  nameWithType: JsonGeneratorDelegate.copyCurrentStructure(JsonParser)
  fullName: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.copyCurrentStructure(com.fasterxml.jackson.core.JsonParser)
- uid: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.canWriteTypeId()
  name: JsonGeneratorDelegate.canWriteTypeId()
  nameWithType: JsonGeneratorDelegate.canWriteTypeId()
  fullName: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.canWriteTypeId()
- uid: com.fasterxml.jackson.core.JsonGenerator._reportUnsupportedOperation()
  name: JsonGenerator._reportUnsupportedOperation()
  nameWithType: JsonGenerator._reportUnsupportedOperation()
  fullName: com.fasterxml.jackson.core.JsonGenerator._reportUnsupportedOperation()
- uid: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.setCharacterEscapes(com.fasterxml.jackson.core.io.CharacterEscapes)
  name: JsonGeneratorDelegate.setCharacterEscapes(CharacterEscapes)
  nameWithType: JsonGeneratorDelegate.setCharacterEscapes(CharacterEscapes)
  fullName: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.setCharacterEscapes(com.fasterxml.jackson.core.io.CharacterEscapes)
- uid: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.isEnabled(com.fasterxml.jackson.core.JsonGenerator.Feature)
  name: JsonGeneratorDelegate.isEnabled(JsonGenerator.Feature)
  nameWithType: JsonGeneratorDelegate.isEnabled(JsonGenerator.Feature)
  fullName: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.isEnabled(com.fasterxml.jackson.core.JsonGenerator.Feature)
- uid: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeString(java.lang.String)
  name: JsonGeneratorDelegate.writeString(String)
  nameWithType: JsonGeneratorDelegate.writeString(String)
  fullName: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeString(java.lang.String)
- uid: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeRawValue(java.lang.String)
  name: JsonGeneratorDelegate.writeRawValue(String)
  nameWithType: JsonGeneratorDelegate.writeRawValue(String)
  fullName: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeRawValue(java.lang.String)
- uid: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeTree(com.fasterxml.jackson.core.TreeNode)
  name: JsonGeneratorDelegate.writeTree(TreeNode)
  nameWithType: JsonGeneratorDelegate.writeTree(TreeNode)
  fullName: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeTree(com.fasterxml.jackson.core.TreeNode)
- uid: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.overrideStdFeatures(int,int)
  name: JsonGeneratorDelegate.overrideStdFeatures(int,int)
  nameWithType: JsonGeneratorDelegate.overrideStdFeatures(int,int)
  fullName: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.overrideStdFeatures(int,int)
- uid: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeBoolean(boolean)
  name: JsonGeneratorDelegate.writeBoolean(boolean)
  nameWithType: JsonGeneratorDelegate.writeBoolean(boolean)
  fullName: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeBoolean(boolean)
- uid: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeFieldId(long)
  name: JsonGeneratorDelegate.writeFieldId(long)
  nameWithType: JsonGeneratorDelegate.writeFieldId(long)
  fullName: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeFieldId(long)
- uid: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeObjectRef(java.lang.Object)
  name: JsonGeneratorDelegate.writeObjectRef(Object)
  nameWithType: JsonGeneratorDelegate.writeObjectRef(Object)
  fullName: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeObjectRef(java.lang.Object)
- uid: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeStartArray(java.lang.Object)
  name: JsonGeneratorDelegate.writeStartArray(Object)
  nameWithType: JsonGeneratorDelegate.writeStartArray(Object)
  fullName: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeStartArray(java.lang.Object)
- uid: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeOmittedField(java.lang.String)
  name: JsonGeneratorDelegate.writeOmittedField(String)
  nameWithType: JsonGeneratorDelegate.writeOmittedField(String)
  fullName: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeOmittedField(java.lang.String)
- uid: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeString(com.fasterxml.jackson.core.SerializableString)
  name: JsonGeneratorDelegate.writeString(SerializableString)
  nameWithType: JsonGeneratorDelegate.writeString(SerializableString)
  fullName: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeString(com.fasterxml.jackson.core.SerializableString)
- uid: com.fasterxml.jackson.core.JsonGenerator.configure(com.fasterxml.jackson.core.JsonGenerator.Feature,boolean)
  name: JsonGenerator.configure(JsonGenerator.Feature,boolean)
  nameWithType: JsonGenerator.configure(JsonGenerator.Feature,boolean)
  fullName: com.fasterxml.jackson.core.JsonGenerator.configure(com.fasterxml.jackson.core.JsonGenerator.Feature,boolean)
- uid: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.getPrettyPrinter()
  name: JsonGeneratorDelegate.getPrettyPrinter()
  nameWithType: JsonGeneratorDelegate.getPrettyPrinter()
  fullName: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.getPrettyPrinter()
- uid: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.delegate()
  name: JsonGeneratorDelegate.delegate()
  nameWithType: JsonGeneratorDelegate.delegate()
  fullName: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.delegate()
- uid: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.getCodec()
  name: JsonGeneratorDelegate.getCodec()
  nameWithType: JsonGeneratorDelegate.getCodec()
  fullName: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.getCodec()
- uid: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeRaw(char[],int,int)
  name: JsonGeneratorDelegate.writeRaw(char[],int,int)
  nameWithType: JsonGeneratorDelegate.writeRaw(char[],int,int)
  fullName: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeRaw(char[],int,int)
- uid: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.getCurrentValue()
  name: JsonGeneratorDelegate.getCurrentValue()
  nameWithType: JsonGeneratorDelegate.getCurrentValue()
  fullName: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.getCurrentValue()
- uid: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeStartObject(java.lang.Object,int)
  name: JsonGeneratorDelegate.writeStartObject(Object,int)
  nameWithType: JsonGeneratorDelegate.writeStartObject(Object,int)
  fullName: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeStartObject(java.lang.Object,int)
- uid: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeNumber(java.math.BigDecimal)
  name: JsonGeneratorDelegate.writeNumber(BigDecimal)
  nameWithType: JsonGeneratorDelegate.writeNumber(BigDecimal)
  fullName: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeNumber(java.math.BigDecimal)
- uid: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeString(char[],int,int)
  name: JsonGeneratorDelegate.writeString(char[],int,int)
  nameWithType: JsonGeneratorDelegate.writeString(char[],int,int)
  fullName: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeString(char[],int,int)
- uid: com.fasterxml.jackson.core.JsonGenerator.writeBinary(byte[],int,int)
  name: JsonGenerator.writeBinary(byte[],int,int)
  nameWithType: JsonGenerator.writeBinary(byte[],int,int)
  fullName: com.fasterxml.jackson.core.JsonGenerator.writeBinary(byte[],int,int)
- uid: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeNumber(java.lang.String)
  name: JsonGeneratorDelegate.writeNumber(String)
  nameWithType: JsonGeneratorDelegate.writeNumber(String)
  fullName: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeNumber(java.lang.String)
- uid: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeArray(long[],int,int)
  name: JsonGeneratorDelegate.writeArray(long[],int,int)
  nameWithType: JsonGeneratorDelegate.writeArray(long[],int,int)
  fullName: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeArray(long[],int,int)
- uid: com.fasterxml.jackson.core.JsonGenerator.writeObjectFieldStart(java.lang.String)
  name: JsonGenerator.writeObjectFieldStart(String)
  nameWithType: JsonGenerator.writeObjectFieldStart(String)
  fullName: com.fasterxml.jackson.core.JsonGenerator.writeObjectFieldStart(java.lang.String)
- uid: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeNumber(double)
  name: JsonGeneratorDelegate.writeNumber(double)
  nameWithType: JsonGeneratorDelegate.writeNumber(double)
  fullName: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeNumber(double)
- uid: com.fasterxml.jackson.core.JsonGenerator._throwInternal()
  name: JsonGenerator._throwInternal()
  nameWithType: JsonGenerator._throwInternal()
  fullName: com.fasterxml.jackson.core.JsonGenerator._throwInternal()
- uid: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeUTF8String(byte[],int,int)
  name: JsonGeneratorDelegate.writeUTF8String(byte[],int,int)
  nameWithType: JsonGeneratorDelegate.writeUTF8String(byte[],int,int)
  fullName: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeUTF8String(byte[],int,int)
- uid: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeArray(java.lang.String[],int,int)
  name: JsonGeneratorDelegate.writeArray(String[],int,int)
  nameWithType: JsonGeneratorDelegate.writeArray(String[],int,int)
  fullName: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeArray(java.lang.String[],int,int)
- uid: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeObject(java.lang.Object)
  name: JsonGeneratorDelegate.writeObject(Object)
  nameWithType: JsonGeneratorDelegate.writeObject(Object)
  fullName: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeObject(java.lang.Object)
- uid: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.useDefaultPrettyPrinter()
  name: JsonGeneratorDelegate.useDefaultPrettyPrinter()
  nameWithType: JsonGeneratorDelegate.useDefaultPrettyPrinter()
  fullName: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.useDefaultPrettyPrinter()
- uid: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeStartArray(int)
  name: JsonGeneratorDelegate.writeStartArray(int)
  nameWithType: JsonGeneratorDelegate.writeStartArray(int)
  fullName: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeStartArray(int)
- uid: java.lang.Object.clone()
  name: Object.clone()
  nameWithType: Object.clone()
  fullName: java.lang.Object.clone()
- uid: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeNumber(float)
  name: JsonGeneratorDelegate.writeNumber(float)
  nameWithType: JsonGeneratorDelegate.writeNumber(float)
  fullName: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeNumber(float)
- uid: com.fasterxml.jackson.core.JsonGenerator.writeBinaryField(java.lang.String,byte[])
  name: JsonGenerator.writeBinaryField(String,byte[])
  nameWithType: JsonGenerator.writeBinaryField(String,byte[])
  fullName: com.fasterxml.jackson.core.JsonGenerator.writeBinaryField(java.lang.String,byte[])
- uid: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.setCodec(com.fasterxml.jackson.core.ObjectCodec)
  name: JsonGeneratorDelegate.setCodec(ObjectCodec)
  nameWithType: JsonGeneratorDelegate.setCodec(ObjectCodec)
  fullName: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.setCodec(com.fasterxml.jackson.core.ObjectCodec)
- uid: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeNumber(java.math.BigInteger)
  name: JsonGeneratorDelegate.writeNumber(BigInteger)
  nameWithType: JsonGeneratorDelegate.writeNumber(BigInteger)
  fullName: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeNumber(java.math.BigInteger)
- uid: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeString(java.io.Reader,int)
  name: JsonGeneratorDelegate.writeString(Reader,int)
  nameWithType: JsonGeneratorDelegate.writeString(Reader,int)
  fullName: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeString(java.io.Reader,int)
- uid: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.setCurrentValue(java.lang.Object)
  name: JsonGeneratorDelegate.setCurrentValue(Object)
  nameWithType: JsonGeneratorDelegate.setCurrentValue(Object)
  fullName: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.setCurrentValue(java.lang.Object)
- uid: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.copyCurrentEvent(com.fasterxml.jackson.core.JsonParser)
  name: JsonGeneratorDelegate.copyCurrentEvent(JsonParser)
  nameWithType: JsonGeneratorDelegate.copyCurrentEvent(JsonParser)
  fullName: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.copyCurrentEvent(com.fasterxml.jackson.core.JsonParser)
- uid: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.close()
  name: JsonGeneratorDelegate.close()
  nameWithType: JsonGeneratorDelegate.close()
  fullName: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.close()
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.version()
  name: JsonGeneratorDelegate.version()
  nameWithType: JsonGeneratorDelegate.version()
  fullName: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.version()
- uid: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.isClosed()
  name: JsonGeneratorDelegate.isClosed()
  nameWithType: JsonGeneratorDelegate.isClosed()
  fullName: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.isClosed()
- uid: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.setRootValueSeparator(com.fasterxml.jackson.core.SerializableString)
  name: JsonGeneratorDelegate.setRootValueSeparator(SerializableString)
  nameWithType: JsonGeneratorDelegate.setRootValueSeparator(SerializableString)
  fullName: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.setRootValueSeparator(com.fasterxml.jackson.core.SerializableString)
- uid: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeObjectId(java.lang.Object)
  name: JsonGeneratorDelegate.writeObjectId(Object)
  nameWithType: JsonGeneratorDelegate.writeObjectId(Object)
  fullName: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeObjectId(java.lang.Object)
- uid: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.getCharacterEscapes()
  name: JsonGeneratorDelegate.getCharacterEscapes()
  nameWithType: JsonGeneratorDelegate.getCharacterEscapes()
  fullName: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.getCharacterEscapes()
- uid: java.lang.Object.equals(java.lang.Object)
  name: Object.equals(Object)
  nameWithType: Object.equals(Object)
  fullName: java.lang.Object.equals(java.lang.Object)
- uid: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.canWriteBinaryNatively()
  name: JsonGeneratorDelegate.canWriteBinaryNatively()
  nameWithType: JsonGeneratorDelegate.canWriteBinaryNatively()
  fullName: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.canWriteBinaryNatively()
- uid: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.flush()
  name: JsonGeneratorDelegate.flush()
  nameWithType: JsonGeneratorDelegate.flush()
  fullName: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.flush()
- uid: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.getOutputBuffered()
  name: JsonGeneratorDelegate.getOutputBuffered()
  nameWithType: JsonGeneratorDelegate.getOutputBuffered()
  fullName: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.getOutputBuffered()
- uid: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeRaw(com.fasterxml.jackson.core.SerializableString)
  name: JsonGeneratorDelegate.writeRaw(SerializableString)
  nameWithType: JsonGeneratorDelegate.writeRaw(SerializableString)
  fullName: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeRaw(com.fasterxml.jackson.core.SerializableString)
- uid: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.getHighestEscapedChar()
  name: JsonGeneratorDelegate.getHighestEscapedChar()
  nameWithType: JsonGeneratorDelegate.getHighestEscapedChar()
  fullName: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.getHighestEscapedChar()
- uid: java.lang.Object.toString()
  name: Object.toString()
  nameWithType: Object.toString()
  fullName: java.lang.Object.toString()
- uid: com.fasterxml.jackson.core.JsonGenerator._reportError(java.lang.String)
  name: JsonGenerator._reportError(String)
  nameWithType: JsonGenerator._reportError(String)
  fullName: com.fasterxml.jackson.core.JsonGenerator._reportError(java.lang.String)
- uid: com.fasterxml.jackson.core.JsonGenerator.writeStringField(java.lang.String,java.lang.String)
  name: JsonGenerator.writeStringField(String,String)
  nameWithType: JsonGenerator.writeStringField(String,String)
  fullName: com.fasterxml.jackson.core.JsonGenerator.writeStringField(java.lang.String,java.lang.String)
- uid: com.fasterxml.jackson.core.JsonGenerator.writeTypePrefix(com.fasterxml.jackson.core.type.WritableTypeId)
  name: JsonGenerator.writeTypePrefix(WritableTypeId)
  nameWithType: JsonGenerator.writeTypePrefix(WritableTypeId)
  fullName: com.fasterxml.jackson.core.JsonGenerator.writeTypePrefix(com.fasterxml.jackson.core.type.WritableTypeId)
- uid: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeStartObject(java.lang.Object)
  name: JsonGeneratorDelegate.writeStartObject(Object)
  nameWithType: JsonGeneratorDelegate.writeStartObject(Object)
  fullName: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeStartObject(java.lang.Object)
- uid: com.fasterxml.jackson.core.JsonGenerator.writeTypeSuffix(com.fasterxml.jackson.core.type.WritableTypeId)
  name: JsonGenerator.writeTypeSuffix(WritableTypeId)
  nameWithType: JsonGenerator.writeTypeSuffix(WritableTypeId)
  fullName: com.fasterxml.jackson.core.JsonGenerator.writeTypeSuffix(com.fasterxml.jackson.core.type.WritableTypeId)
- uid: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeRawValue(java.lang.String,int,int)
  name: JsonGeneratorDelegate.writeRawValue(String,int,int)
  nameWithType: JsonGeneratorDelegate.writeRawValue(String,int,int)
  fullName: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeRawValue(java.lang.String,int,int)
- uid: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeStartArray()
  name: JsonGeneratorDelegate.writeStartArray()
  nameWithType: JsonGeneratorDelegate.writeStartArray()
  fullName: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeStartArray()
- uid: com.fasterxml.jackson.core.JsonGenerator.writeBooleanField(java.lang.String,boolean)
  name: JsonGenerator.writeBooleanField(String,boolean)
  nameWithType: JsonGenerator.writeBooleanField(String,boolean)
  fullName: com.fasterxml.jackson.core.JsonGenerator.writeBooleanField(java.lang.String,boolean)
- uid: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.enable(com.fasterxml.jackson.core.JsonGenerator.Feature)
  name: JsonGeneratorDelegate.enable(JsonGenerator.Feature)
  nameWithType: JsonGeneratorDelegate.enable(JsonGenerator.Feature)
  fullName: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.enable(com.fasterxml.jackson.core.JsonGenerator.Feature)
- uid: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeNumber(short)
  name: JsonGeneratorDelegate.writeNumber(short)
  nameWithType: JsonGeneratorDelegate.writeNumber(short)
  fullName: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeNumber(short)
- uid: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeEmbeddedObject(java.lang.Object)
  name: JsonGeneratorDelegate.writeEmbeddedObject(Object)
  nameWithType: JsonGeneratorDelegate.writeEmbeddedObject(Object)
  fullName: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeEmbeddedObject(java.lang.Object)
- uid: com.fasterxml.jackson.core.JsonGenerator.writeNumberField(java.lang.String,long)
  name: JsonGenerator.writeNumberField(String,long)
  nameWithType: JsonGenerator.writeNumberField(String,long)
  fullName: com.fasterxml.jackson.core.JsonGenerator.writeNumberField(java.lang.String,long)
- uid: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeFieldName(com.fasterxml.jackson.core.SerializableString)
  name: JsonGeneratorDelegate.writeFieldName(SerializableString)
  nameWithType: JsonGeneratorDelegate.writeFieldName(SerializableString)
  fullName: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeFieldName(com.fasterxml.jackson.core.SerializableString)
- uid: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.canOmitFields()
  name: JsonGeneratorDelegate.canOmitFields()
  nameWithType: JsonGeneratorDelegate.canOmitFields()
  fullName: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.canOmitFields()
- uid: com.fasterxml.jackson.core.JsonGenerator.writeNullField(java.lang.String)
  name: JsonGenerator.writeNullField(String)
  nameWithType: JsonGenerator.writeNullField(String)
  fullName: com.fasterxml.jackson.core.JsonGenerator.writeNullField(java.lang.String)
- uid: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeArray(double[],int,int)
  name: JsonGeneratorDelegate.writeArray(double[],int,int)
  nameWithType: JsonGeneratorDelegate.writeArray(double[],int,int)
  fullName: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeArray(double[],int,int)
- uid: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeEndArray()
  name: JsonGeneratorDelegate.writeEndArray()
  nameWithType: JsonGeneratorDelegate.writeEndArray()
  fullName: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeEndArray()
- uid: com.fasterxml.jackson.core.JsonGenerator._verifyOffsets(int,int,int)
  name: JsonGenerator._verifyOffsets(int,int,int)
  nameWithType: JsonGenerator._verifyOffsets(int,int,int)
  fullName: com.fasterxml.jackson.core.JsonGenerator._verifyOffsets(int,int,int)
- uid: com.fasterxml.jackson.core.JsonGenerator.writeNumberField(java.lang.String,float)
  name: JsonGenerator.writeNumberField(String,float)
  nameWithType: JsonGenerator.writeNumberField(String,float)
  fullName: com.fasterxml.jackson.core.JsonGenerator.writeNumberField(java.lang.String,float)
- uid: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.setSchema(com.fasterxml.jackson.core.FormatSchema)
  name: JsonGeneratorDelegate.setSchema(FormatSchema)
  nameWithType: JsonGeneratorDelegate.setSchema(FormatSchema)
  fullName: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.setSchema(com.fasterxml.jackson.core.FormatSchema)
- uid: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.canWriteObjectId()
  name: JsonGeneratorDelegate.canWriteObjectId()
  nameWithType: JsonGeneratorDelegate.canWriteObjectId()
  fullName: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.canWriteObjectId()
- uid: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeRaw(java.lang.String,int,int)
  name: JsonGeneratorDelegate.writeRaw(String,int,int)
  nameWithType: JsonGeneratorDelegate.writeRaw(String,int,int)
  fullName: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeRaw(java.lang.String,int,int)
- uid: java.lang.Object.hashCode()
  name: Object.hashCode()
  nameWithType: Object.hashCode()
  fullName: java.lang.Object.hashCode()
- uid: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeNull()
  name: JsonGeneratorDelegate.writeNull()
  nameWithType: JsonGeneratorDelegate.writeNull()
  fullName: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeNull()
- uid: com.fasterxml.jackson.core.JsonGenerator.getFormatFeatures()
  name: JsonGenerator.getFormatFeatures()
  nameWithType: JsonGenerator.getFormatFeatures()
  fullName: com.fasterxml.jackson.core.JsonGenerator.getFormatFeatures()
- uid: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeRaw(char)
  name: JsonGeneratorDelegate.writeRaw(char)
  nameWithType: JsonGeneratorDelegate.writeRaw(char)
  fullName: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeRaw(char)
- uid: com.fasterxml.jackson.core.JsonGenerator._writeSimpleObject(java.lang.Object)
  name: JsonGenerator._writeSimpleObject(Object)
  nameWithType: JsonGenerator._writeSimpleObject(Object)
  fullName: com.fasterxml.jackson.core.JsonGenerator._writeSimpleObject(java.lang.Object)
- uid: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeStartObject()
  name: JsonGeneratorDelegate.writeStartObject()
  nameWithType: JsonGeneratorDelegate.writeStartObject()
  fullName: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeStartObject()
- uid: com.fasterxml.jackson.core.JsonGenerator.writeNumberField(java.lang.String,int)
  name: JsonGenerator.writeNumberField(String,int)
  nameWithType: JsonGenerator.writeNumberField(String,int)
  fullName: com.fasterxml.jackson.core.JsonGenerator.writeNumberField(java.lang.String,int)
- uid: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.disable(com.fasterxml.jackson.core.JsonGenerator.Feature)
  name: JsonGeneratorDelegate.disable(JsonGenerator.Feature)
  nameWithType: JsonGeneratorDelegate.disable(JsonGenerator.Feature)
  fullName: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.disable(com.fasterxml.jackson.core.JsonGenerator.Feature)
- uid: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeTypeId(java.lang.Object)
  name: JsonGeneratorDelegate.writeTypeId(Object)
  nameWithType: JsonGeneratorDelegate.writeTypeId(Object)
  fullName: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeTypeId(java.lang.Object)
- uid: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeFieldName(java.lang.String)
  name: JsonGeneratorDelegate.writeFieldName(String)
  nameWithType: JsonGeneratorDelegate.writeFieldName(String)
  fullName: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeFieldName(java.lang.String)
- uid: com.fasterxml.jackson.core.JsonGenerator._copyCurrentContents(com.fasterxml.jackson.core.JsonParser)
  name: JsonGenerator._copyCurrentContents(JsonParser)
  nameWithType: JsonGenerator._copyCurrentContents(JsonParser)
  fullName: com.fasterxml.jackson.core.JsonGenerator._copyCurrentContents(com.fasterxml.jackson.core.JsonParser)
- uid: com.fasterxml.jackson.core.JsonGenerator.writeBinary(java.io.InputStream,int)
  name: JsonGenerator.writeBinary(InputStream,int)
  nameWithType: JsonGenerator.writeBinary(InputStream,int)
  fullName: com.fasterxml.jackson.core.JsonGenerator.writeBinary(java.io.InputStream,int)
- uid: com.fasterxml.jackson.core.JsonGenerator.writeNumberField(java.lang.String,java.math.BigInteger)
  name: JsonGenerator.writeNumberField(String,BigInteger)
  nameWithType: JsonGenerator.writeNumberField(String,BigInteger)
  fullName: com.fasterxml.jackson.core.JsonGenerator.writeNumberField(java.lang.String,java.math.BigInteger)
- uid: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.canUseSchema(com.fasterxml.jackson.core.FormatSchema)
  name: JsonGeneratorDelegate.canUseSchema(FormatSchema)
  nameWithType: JsonGeneratorDelegate.canUseSchema(FormatSchema)
  fullName: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.canUseSchema(com.fasterxml.jackson.core.FormatSchema)
- uid: com.fasterxml.jackson.core.JsonGenerator.writeNumberField(java.lang.String,java.math.BigDecimal)
  name: JsonGenerator.writeNumberField(String,BigDecimal)
  nameWithType: JsonGenerator.writeNumberField(String,BigDecimal)
  fullName: com.fasterxml.jackson.core.JsonGenerator.writeNumberField(java.lang.String,java.math.BigDecimal)
- uid: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.getSchema()
  name: JsonGeneratorDelegate.getSchema()
  nameWithType: JsonGeneratorDelegate.getSchema()
  fullName: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.getSchema()
- uid: com.fasterxml.jackson.core.JsonGenerator.writeNumberField(java.lang.String,double)
  name: JsonGenerator.writeNumberField(String,double)
  nameWithType: JsonGenerator.writeNumberField(String,double)
  fullName: com.fasterxml.jackson.core.JsonGenerator.writeNumberField(java.lang.String,double)
- uid: com.fasterxml.jackson.core.JsonGenerator.writeNumberField(java.lang.String,short)
  name: JsonGenerator.writeNumberField(String,short)
  nameWithType: JsonGenerator.writeNumberField(String,short)
  fullName: com.fasterxml.jackson.core.JsonGenerator.writeNumberField(java.lang.String,short)
- uid: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeRawValue(char[],int,int)
  name: JsonGeneratorDelegate.writeRawValue(char[],int,int)
  nameWithType: JsonGeneratorDelegate.writeRawValue(char[],int,int)
  fullName: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeRawValue(char[],int,int)
- uid: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.getOutputTarget()
  name: JsonGeneratorDelegate.getOutputTarget()
  nameWithType: JsonGeneratorDelegate.getOutputTarget()
  fullName: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.getOutputTarget()
- uid: com.fasterxml.jackson.core.JsonGenerator.writeRawValue(com.fasterxml.jackson.core.SerializableString)
  name: JsonGenerator.writeRawValue(SerializableString)
  nameWithType: JsonGenerator.writeRawValue(SerializableString)
  fullName: com.fasterxml.jackson.core.JsonGenerator.writeRawValue(com.fasterxml.jackson.core.SerializableString)
- uid: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeNumber(char[],int,int)
  name: JsonGeneratorDelegate.writeNumber(char[],int,int)
  nameWithType: JsonGeneratorDelegate.writeNumber(char[],int,int)
  fullName: com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeNumber(char[],int,int)
