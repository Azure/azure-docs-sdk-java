### YamlMime:JavaType
uid: "com.azure.storage.queue.QueueServiceAsyncClient"
fullName: "com.azure.storage.queue.QueueServiceAsyncClient"
name: "QueueServiceAsyncClient"
nameWithType: "QueueServiceAsyncClient"
summary: "This class provides a client that contains all the operations for interacting with a queue account in Azure Storage."
inheritances:
- "<xref href=\"java.lang.Object?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
inheritedMembers:
- "java.lang.Object.clone()"
- "java.lang.Object.equals(java.lang.Object)"
- "java.lang.Object.finalize()"
- "java.lang.Object.getClass()"
- "java.lang.Object.hashCode()"
- "java.lang.Object.notify()"
- "java.lang.Object.notifyAll()"
- "java.lang.Object.toString()"
- "java.lang.Object.wait()"
- "java.lang.Object.wait(long)"
- "java.lang.Object.wait(long,int)"
syntax: "public final class QueueServiceAsyncClient"
methods:
- uid: "com.azure.storage.queue.QueueServiceAsyncClient.createQueue(java.lang.String)"
  fullName: "com.azure.storage.queue.QueueServiceAsyncClient.createQueue(String queueName)"
  name: "createQueue(String queueName)"
  nameWithType: "QueueServiceAsyncClient.createQueue(String queueName)"
  summary: "Creates a queue in the storage account with the specified name and returns a Queue<wbr>Async<wbr>Client to interact with it."
  parameters:
  - description: "Name of the queue"
    name: "queueName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<QueueAsyncClient> createQueue(String queueName)"
  desc: "Creates a queue in the storage account with the specified name and returns a QueueAsyncClient to interact with it.\n\n**Code Samples**\n\nCreate the queue \"test\"\n\n```java\nclient.createQueue(\"myqueue\").subscribe(\n     response -> {\n     },\n     error -> System.err.print(error.toString()),\n     () -> System.out.println(\"Complete creating the queue!\")\n );\n```"
  returns:
    description: "The <xref uid=\"com.azure.storage.queue.QueueAsyncClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"QueueAsyncClient\"></xref>"
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.queue.QueueAsyncClient?alt=com.azure.storage.queue.QueueAsyncClient&text=QueueAsyncClient\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.queue.QueueServiceAsyncClient.createQueueWithResponse(java.lang.String,java.util.Map<java.lang.String,java.lang.String>)"
  fullName: "com.azure.storage.queue.QueueServiceAsyncClient.createQueueWithResponse(String queueName, Map<String,String> metadata)"
  name: "createQueueWithResponse(String queueName, Map<String,String> metadata)"
  nameWithType: "QueueServiceAsyncClient.createQueueWithResponse(String queueName, Map<String,String> metadata)"
  summary: "Creates a queue in the storage account with the specified name and metadata and returns a Queue<wbr>Async<wbr>Client to interact with it."
  parameters:
  - description: "Name of the queue"
    name: "queueName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Metadata to associate with the queue. If there is leading or trailing whitespace in any\n metadata key or value, it must be removed or encoded."
    name: "metadata"
    type: "<xref href=\"java.util.Map?alt=java.util.Map&text=Map\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />,<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public Mono<Response<QueueAsyncClient>> createQueueWithResponse(String queueName, Map<String,String> metadata)"
  desc: "Creates a queue in the storage account with the specified name and metadata and returns a QueueAsyncClient to interact with it.\n\n**Code Samples**\n\nCreate the queue \"test\" with metadata \"queue:metadata\"\n\n```java\nclient.createQueueWithResponse(\"myqueue\", Collections.singletonMap(\"queue\", \"metadata\"))\n     .subscribe(\n         response -> System.out.printf(\"Creating the queue with status code %d\", response.getStatusCode()),\n         error -> System.err.print(error.toString()),\n         () -> System.out.println(\"Complete creating the queue!\")\n     );\n```"
  returns:
    description: "A response containing the <xref uid=\"com.azure.storage.queue.QueueAsyncClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"QueueAsyncClient\"></xref> and the status of creating the queue"
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.queue.QueueAsyncClient?alt=com.azure.storage.queue.QueueAsyncClient&text=QueueAsyncClient\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.storage.queue.QueueServiceAsyncClient.deleteQueue(java.lang.String)"
  fullName: "com.azure.storage.queue.QueueServiceAsyncClient.deleteQueue(String queueName)"
  name: "deleteQueue(String queueName)"
  nameWithType: "QueueServiceAsyncClient.deleteQueue(String queueName)"
  summary: "Deletes a queue in the storage account"
  parameters:
  - description: "Name of the queue"
    name: "queueName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Void> deleteQueue(String queueName)"
  desc: "Deletes a queue in the storage account\n\n**Code Samples**\n\nDelete the queue \"test\"\n\n```java\nclient.deleteQueue(\"myshare\").subscribe(\n     response -> System.out.println(\"Deleting the queue completed.\")\n );\n```"
  returns:
    description: "An empty response"
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.queue.QueueServiceAsyncClient.deleteQueueWithResponse(java.lang.String)"
  fullName: "com.azure.storage.queue.QueueServiceAsyncClient.deleteQueueWithResponse(String queueName)"
  name: "deleteQueueWithResponse(String queueName)"
  nameWithType: "QueueServiceAsyncClient.deleteQueueWithResponse(String queueName)"
  summary: "Deletes a queue in the storage account"
  parameters:
  - description: "Name of the queue"
    name: "queueName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<Void>> deleteQueueWithResponse(String queueName)"
  desc: "Deletes a queue in the storage account\n\n**Code Samples**\n\nDelete the queue \"test\"\n\n```java\nclient.deleteQueueWithResponse(\"myshare\").subscribe(\n     response -> System.out.println(\"Deleting the queue completed with status code: \" + response.getStatusCode())\n );\n```"
  returns:
    description: "A response that only contains headers and response status code"
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.storage.queue.QueueServiceAsyncClient.generateAccountSas(com.azure.storage.common.sas.AccountSasSignatureValues)"
  fullName: "com.azure.storage.queue.QueueServiceAsyncClient.generateAccountSas(AccountSasSignatureValues accountSasSignatureValues)"
  name: "generateAccountSas(AccountSasSignatureValues accountSasSignatureValues)"
  nameWithType: "QueueServiceAsyncClient.generateAccountSas(AccountSasSignatureValues accountSasSignatureValues)"
  summary: "Generates an account SAS for the Azure Storage account using the specified <xref uid=\"com.azure.storage.common.sas.AccountSasSignatureValues\" data-throw-if-not-resolved=\"false\" data-raw-source=\"AccountSasSignatureValues\"></xref>."
  parameters:
  - description: "<xref uid=\"com.azure.storage.common.sas.AccountSasSignatureValues\" data-throw-if-not-resolved=\"false\" data-raw-source=\"AccountSasSignatureValues\"></xref>"
    name: "accountSasSignatureValues"
    type: "<xref href=\"com.azure.storage.common.sas.AccountSasSignatureValues?alt=com.azure.storage.common.sas.AccountSasSignatureValues&text=AccountSasSignatureValues\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public String generateAccountSas(AccountSasSignatureValues accountSasSignatureValues)"
  desc: "Generates an account SAS for the Azure Storage account using the specified <xref uid=\"com.azure.storage.common.sas.AccountSasSignatureValues\" data-throw-if-not-resolved=\"false\" data-raw-source=\"AccountSasSignatureValues\"></xref>.\n\nNote : The client must be authenticated via <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"StorageSharedKeyCredential\"></xref>\n\nSee <xref uid=\"com.azure.storage.common.sas.AccountSasSignatureValues\" data-throw-if-not-resolved=\"false\" data-raw-source=\"AccountSasSignatureValues\"></xref> for more information on how to construct an account SAS.\n\nThe snippet below generates a SAS that lasts for two days and gives the user read and list access to queues and file shares.\n\n```java\nAccountSasPermission permissions = new AccountSasPermission()\n     .setListPermission(true)\n     .setReadPermission(true);\n AccountSasResourceType resourceTypes = new AccountSasResourceType().setContainer(true).setObject(true);\n AccountSasService services = new AccountSasService().setQueueAccess(true).setFileAccess(true);\n OffsetDateTime expiryTime = OffsetDateTime.now().plus(Duration.ofDays(2));\n\n AccountSasSignatureValues sasValues =\n     new AccountSasSignatureValues(expiryTime, permissions, services, resourceTypes);\n\n // Client must be authenticated via StorageSharedKeyCredential\n String sas = queueServiceAsyncClient.generateAccountSas(sasValues);\n```"
  returns:
    description: "A <code>String</code> representing the SAS query parameters."
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.queue.QueueServiceAsyncClient.generateAccountSas(com.azure.storage.common.sas.AccountSasSignatureValues,com.azure.core.util.Context)"
  fullName: "com.azure.storage.queue.QueueServiceAsyncClient.generateAccountSas(AccountSasSignatureValues accountSasSignatureValues, Context context)"
  name: "generateAccountSas(AccountSasSignatureValues accountSasSignatureValues, Context context)"
  nameWithType: "QueueServiceAsyncClient.generateAccountSas(AccountSasSignatureValues accountSasSignatureValues, Context context)"
  summary: "Generates an account SAS for the Azure Storage account using the specified <xref uid=\"com.azure.storage.common.sas.AccountSasSignatureValues\" data-throw-if-not-resolved=\"false\" data-raw-source=\"AccountSasSignatureValues\"></xref>."
  parameters:
  - description: "<xref uid=\"com.azure.storage.common.sas.AccountSasSignatureValues\" data-throw-if-not-resolved=\"false\" data-raw-source=\"AccountSasSignatureValues\"></xref>"
    name: "accountSasSignatureValues"
    type: "<xref href=\"com.azure.storage.common.sas.AccountSasSignatureValues?alt=com.azure.storage.common.sas.AccountSasSignatureValues&text=AccountSasSignatureValues\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional context that is passed through the code when generating a SAS."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public String generateAccountSas(AccountSasSignatureValues accountSasSignatureValues, Context context)"
  desc: "Generates an account SAS for the Azure Storage account using the specified <xref uid=\"com.azure.storage.common.sas.AccountSasSignatureValues\" data-throw-if-not-resolved=\"false\" data-raw-source=\"AccountSasSignatureValues\"></xref>.\n\nNote : The client must be authenticated via <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"StorageSharedKeyCredential\"></xref>\n\nSee <xref uid=\"com.azure.storage.common.sas.AccountSasSignatureValues\" data-throw-if-not-resolved=\"false\" data-raw-source=\"AccountSasSignatureValues\"></xref> for more information on how to construct an account SAS.\n\nThe snippet below generates a SAS that lasts for two days and gives the user read and list access to queues and file shares.\n\n```java\nAccountSasPermission permissions = new AccountSasPermission()\n     .setListPermission(true)\n     .setReadPermission(true);\n AccountSasResourceType resourceTypes = new AccountSasResourceType().setContainer(true).setObject(true);\n AccountSasService services = new AccountSasService().setQueueAccess(true).setFileAccess(true);\n OffsetDateTime expiryTime = OffsetDateTime.now().plus(Duration.ofDays(2));\n\n AccountSasSignatureValues sasValues =\n     new AccountSasSignatureValues(expiryTime, permissions, services, resourceTypes);\n\n // Client must be authenticated via StorageSharedKeyCredential\n String sas = queueServiceAsyncClient.generateAccountSas(sasValues, new Context(\"key\", \"value\"));\n```"
  returns:
    description: "A <code>String</code> representing the SAS query parameters."
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.queue.QueueServiceAsyncClient.getAccountName()"
  fullName: "com.azure.storage.queue.QueueServiceAsyncClient.getAccountName()"
  name: "getAccountName()"
  nameWithType: "QueueServiceAsyncClient.getAccountName()"
  summary: "Get associated account name."
  syntax: "public String getAccountName()"
  desc: "Get associated account name."
  returns:
    description: "account name associated with this storage resource."
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.queue.QueueServiceAsyncClient.getHttpPipeline()"
  fullName: "com.azure.storage.queue.QueueServiceAsyncClient.getHttpPipeline()"
  name: "getHttpPipeline()"
  nameWithType: "QueueServiceAsyncClient.getHttpPipeline()"
  summary: "Gets the <xref uid=\"com.azure.core.http.HttpPipeline\" data-throw-if-not-resolved=\"false\" data-raw-source=\"HttpPipeline\"></xref> powering this client."
  syntax: "public HttpPipeline getHttpPipeline()"
  desc: "Gets the <xref uid=\"com.azure.core.http.HttpPipeline\" data-throw-if-not-resolved=\"false\" data-raw-source=\"HttpPipeline\"></xref> powering this client."
  returns:
    description: "The pipeline."
    type: "<xref href=\"com.azure.core.http.HttpPipeline?alt=com.azure.core.http.HttpPipeline&text=HttpPipeline\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.queue.QueueServiceAsyncClient.getMessageEncoding()"
  fullName: "com.azure.storage.queue.QueueServiceAsyncClient.getMessageEncoding()"
  name: "getMessageEncoding()"
  nameWithType: "QueueServiceAsyncClient.getMessageEncoding()"
  summary: "Gets the message encoding the client is using."
  syntax: "public QueueMessageEncoding getMessageEncoding()"
  desc: "Gets the message encoding the client is using."
  returns:
    description: "the message encoding the client is using."
    type: "<xref href=\"com.azure.storage.queue.QueueMessageEncoding?alt=com.azure.storage.queue.QueueMessageEncoding&text=QueueMessageEncoding\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.queue.QueueServiceAsyncClient.getProperties()"
  fullName: "com.azure.storage.queue.QueueServiceAsyncClient.getProperties()"
  name: "getProperties()"
  nameWithType: "QueueServiceAsyncClient.getProperties()"
  summary: "Retrieves the properties of the storage account's Queue service."
  syntax: "public Mono<QueueServiceProperties> getProperties()"
  desc: "Retrieves the properties of the storage account's Queue service. The properties range from storage analytics and metric to CORS (Cross-Origin Resource Sharing).\n\n**Code Samples**\n\nRetrieve Queue service properties\n\n```java\nclient.getProperties()\n     .subscribe(properties -> {\n         System.out.printf(\"Hour metrics enabled: %b, Minute metrics enabled: %b\",\n             properties.getHourMetrics().isEnabled(), properties.getMinuteMetrics().isEnabled());\n     });\n```\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/get-queue-service-properties"
  returns:
    description: "Storage account <xref uid=\"com.azure.storage.queue.models.QueueServiceProperties\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Queue service properties\"></xref>"
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.queue.models.QueueServiceProperties?alt=com.azure.storage.queue.models.QueueServiceProperties&text=QueueServiceProperties\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.queue.QueueServiceAsyncClient.getPropertiesWithResponse()"
  fullName: "com.azure.storage.queue.QueueServiceAsyncClient.getPropertiesWithResponse()"
  name: "getPropertiesWithResponse()"
  nameWithType: "QueueServiceAsyncClient.getPropertiesWithResponse()"
  summary: "Retrieves the properties of the storage account's Queue service."
  syntax: "public Mono<Response<QueueServiceProperties>> getPropertiesWithResponse()"
  desc: "Retrieves the properties of the storage account's Queue service. The properties range from storage analytics and metric to CORS (Cross-Origin Resource Sharing).\n\n**Code Samples**\n\nRetrieve Queue service properties\n\n```java\nclient.getPropertiesWithResponse()\n     .subscribe(response -> {\n         QueueServiceProperties properties = response.getValue();\n         System.out.printf(\"Hour metrics enabled: %b, Minute metrics enabled: %b\",\n             properties.getHourMetrics().isEnabled(), properties.getMinuteMetrics().isEnabled());\n     });\n```\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/get-queue-service-properties"
  returns:
    description: "A response containing the Storage account <xref uid=\"com.azure.storage.queue.models.QueueServiceProperties\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Queue service properties\"></xref>"
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.queue.models.QueueServiceProperties?alt=com.azure.storage.queue.models.QueueServiceProperties&text=QueueServiceProperties\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.storage.queue.QueueServiceAsyncClient.getQueueAsyncClient(java.lang.String)"
  fullName: "com.azure.storage.queue.QueueServiceAsyncClient.getQueueAsyncClient(String queueName)"
  name: "getQueueAsyncClient(String queueName)"
  nameWithType: "QueueServiceAsyncClient.getQueueAsyncClient(String queueName)"
  summary: "Constructs a Queue<wbr>Async<wbr>Client that interacts with the specified queue."
  parameters:
  - description: "Name of the queue"
    name: "queueName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public QueueAsyncClient getQueueAsyncClient(String queueName)"
  desc: "Constructs a QueueAsyncClient that interacts with the specified queue. This will not create the queue in the storage account if it doesn't exist."
  returns:
    description: "QueueAsyncClient that interacts with the specified queue"
    type: "<xref href=\"com.azure.storage.queue.QueueAsyncClient?alt=com.azure.storage.queue.QueueAsyncClient&text=QueueAsyncClient\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.queue.QueueServiceAsyncClient.getQueueServiceUrl()"
  fullName: "com.azure.storage.queue.QueueServiceAsyncClient.getQueueServiceUrl()"
  name: "getQueueServiceUrl()"
  nameWithType: "QueueServiceAsyncClient.getQueueServiceUrl()"
  syntax: "public String getQueueServiceUrl()"
  returns:
    description: "the URL of the storage queue"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.queue.QueueServiceAsyncClient.getServiceVersion()"
  fullName: "com.azure.storage.queue.QueueServiceAsyncClient.getServiceVersion()"
  name: "getServiceVersion()"
  nameWithType: "QueueServiceAsyncClient.getServiceVersion()"
  summary: "Gets the service version the client is using."
  syntax: "public QueueServiceVersion getServiceVersion()"
  desc: "Gets the service version the client is using."
  returns:
    description: "the service version the client is using."
    type: "<xref href=\"com.azure.storage.queue.QueueServiceVersion?alt=com.azure.storage.queue.QueueServiceVersion&text=QueueServiceVersion\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.queue.QueueServiceAsyncClient.getStatistics()"
  fullName: "com.azure.storage.queue.QueueServiceAsyncClient.getStatistics()"
  name: "getStatistics()"
  nameWithType: "QueueServiceAsyncClient.getStatistics()"
  summary: "Retrieves the geo replication information about the Queue service."
  syntax: "public Mono<QueueServiceStatistics> getStatistics()"
  desc: "Retrieves the geo replication information about the Queue service.\n\n**Code Samples**\n\nRetrieve the geo replication information\n\n```java\nclient.getStatistics()\n     .subscribe(stats -> {\n         System.out.printf(\"Geo replication status: %s, Last synced: %s\",\n             stats.getGeoReplication().getStatus(), stats.getGeoReplication().getLastSyncTime());\n     });\n```\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/get-queue-service-stats"
  returns:
    description: "The geo replication information about the Queue service"
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.queue.models.QueueServiceStatistics?alt=com.azure.storage.queue.models.QueueServiceStatistics&text=QueueServiceStatistics\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.queue.QueueServiceAsyncClient.getStatisticsWithResponse()"
  fullName: "com.azure.storage.queue.QueueServiceAsyncClient.getStatisticsWithResponse()"
  name: "getStatisticsWithResponse()"
  nameWithType: "QueueServiceAsyncClient.getStatisticsWithResponse()"
  summary: "Retrieves the geo replication information about the Queue service."
  syntax: "public Mono<Response<QueueServiceStatistics>> getStatisticsWithResponse()"
  desc: "Retrieves the geo replication information about the Queue service.\n\n**Code Samples**\n\nRetrieve the geo replication information\n\n```java\nclient.getStatisticsWithResponse()\n     .subscribe(response -> {\n         QueueServiceStatistics stats = response.getValue();\n         System.out.printf(\"Geo replication status: %s, Last synced: %s\",\n             stats.getGeoReplication().getStatus(), stats.getGeoReplication().getLastSyncTime());\n     });\n```\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/get-queue-service-stats"
  returns:
    description: "A response containing the geo replication information about the Queue service"
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.queue.models.QueueServiceStatistics?alt=com.azure.storage.queue.models.QueueServiceStatistics&text=QueueServiceStatistics\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.storage.queue.QueueServiceAsyncClient.listQueues()"
  fullName: "com.azure.storage.queue.QueueServiceAsyncClient.listQueues()"
  name: "listQueues()"
  nameWithType: "QueueServiceAsyncClient.listQueues()"
  summary: "Lists all queues in the storage account without their metadata."
  syntax: "public PagedFlux<QueueItem> listQueues()"
  desc: "Lists all queues in the storage account without their metadata.\n\n**Code Samples**\n\nList all queues in the account\n\n```java\nclient.listQueues().subscribe(\n     queueItem -> System.out.printf(\"Queue %s exists in the account\", queueItem.getName()),\n     error -> System.err.print(error.toString()),\n     () -> System.out.println(\"Complete listing the queues!\")\n );\n```\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/list-queues1"
  returns:
    description: "<xref uid=\"com.azure.storage.queue.models.QueueItem\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Queues\"></xref> in the storage account"
    type: "<xref href=\"com.azure.core.http.rest.PagedFlux?alt=com.azure.core.http.rest.PagedFlux&text=PagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.queue.models.QueueItem?alt=com.azure.storage.queue.models.QueueItem&text=QueueItem\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.queue.QueueServiceAsyncClient.listQueues(com.azure.storage.queue.models.QueuesSegmentOptions)"
  fullName: "com.azure.storage.queue.QueueServiceAsyncClient.listQueues(QueuesSegmentOptions options)"
  name: "listQueues(QueuesSegmentOptions options)"
  nameWithType: "QueueServiceAsyncClient.listQueues(QueuesSegmentOptions options)"
  summary: "Lists the queues in the storage account that pass the filter."
  parameters:
  - description: "Options for listing queues"
    name: "options"
    type: "<xref href=\"com.azure.storage.queue.models.QueuesSegmentOptions?alt=com.azure.storage.queue.models.QueuesSegmentOptions&text=QueuesSegmentOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PagedFlux<QueueItem> listQueues(QueuesSegmentOptions options)"
  desc: "Lists the queues in the storage account that pass the filter. Pass true to <xref uid=\"com.azure.storage.queue.models.QueuesSegmentOptions.setIncludeMetadata(boolean)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"includeMetadata\"></xref> to have metadata returned for the queues.\n\n**Code Samples**\n\nList all queues that begin with \"azure\"\n\n```java\nclient.listQueues(new QueuesSegmentOptions().setPrefix(\"azure\")).subscribe(\n     queueItem -> System.out.printf(\"Queue %s exists in the account and has metadata %s\",\n         queueItem.getName(), queueItem.getMetadata()),\n     error -> System.err.print(error.toString()),\n     () -> System.out.println(\"Complete listing the queues!\")\n );\n```\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/list-queues1"
  returns:
    description: "<xref uid=\"com.azure.storage.queue.models.QueueItem\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Queues\"></xref> in the storage account that satisfy the filter requirements"
    type: "<xref href=\"com.azure.core.http.rest.PagedFlux?alt=com.azure.core.http.rest.PagedFlux&text=PagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.queue.models.QueueItem?alt=com.azure.storage.queue.models.QueueItem&text=QueueItem\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.queue.QueueServiceAsyncClient.setProperties(com.azure.storage.queue.models.QueueServiceProperties)"
  fullName: "com.azure.storage.queue.QueueServiceAsyncClient.setProperties(QueueServiceProperties properties)"
  name: "setProperties(QueueServiceProperties properties)"
  nameWithType: "QueueServiceAsyncClient.setProperties(QueueServiceProperties properties)"
  summary: "Sets the properties for the storage account's Queue service."
  parameters:
  - description: "Storage account Queue service properties"
    name: "properties"
    type: "<xref href=\"com.azure.storage.queue.models.QueueServiceProperties?alt=com.azure.storage.queue.models.QueueServiceProperties&text=QueueServiceProperties\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Void> setProperties(QueueServiceProperties properties)"
  desc: "Sets the properties for the storage account's Queue service. The properties range from storage analytics and metric to CORS (Cross-Origin Resource Sharing). To maintain the CORS in the Queue service pass a `null` value for <xref uid=\"com.azure.storage.queue.models.QueueServiceProperties.getCors()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CORS\"></xref>. To disable all CORS in the Queue service pass an empty list for <xref uid=\"com.azure.storage.queue.models.QueueServiceProperties.getCors()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CORS\"></xref>.\n\n**Code Sample**\n\nClear CORS in the Queue service\n\n```java\nQueueServiceProperties properties = client.getProperties().block();\n client.setProperties(properties)\n     .doOnSuccess(response -> System.out.println(\"Setting Queue service properties completed.\"));\n```\n\nEnable Minute and Hour Metrics\n\n```java\nQueueServiceProperties properties = client.getProperties().block();\n properties.getMinuteMetrics().setEnabled(true);\n properties.getHourMetrics().setEnabled(true);\n client.setProperties(properties).subscribe(\n     response -> System.out.println(\"Setting Queue service properties completed.\"));\n```\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/set-queue-service-properties"
  returns:
    description: "An empty response"
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.queue.QueueServiceAsyncClient.setPropertiesWithResponse(com.azure.storage.queue.models.QueueServiceProperties)"
  fullName: "com.azure.storage.queue.QueueServiceAsyncClient.setPropertiesWithResponse(QueueServiceProperties properties)"
  name: "setPropertiesWithResponse(QueueServiceProperties properties)"
  nameWithType: "QueueServiceAsyncClient.setPropertiesWithResponse(QueueServiceProperties properties)"
  summary: "Sets the properties for the storage account's Queue service."
  parameters:
  - description: "Storage account Queue service properties"
    name: "properties"
    type: "<xref href=\"com.azure.storage.queue.models.QueueServiceProperties?alt=com.azure.storage.queue.models.QueueServiceProperties&text=QueueServiceProperties\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<Void>> setPropertiesWithResponse(QueueServiceProperties properties)"
  desc: "Sets the properties for the storage account's Queue service. The properties range from storage analytics and metric to CORS (Cross-Origin Resource Sharing). To maintain the CORS in the Queue service pass a `null` value for <xref uid=\"com.azure.storage.queue.models.QueueServiceProperties.getCors()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CORS\"></xref>. To disable all CORS in the Queue service pass an empty list for <xref uid=\"com.azure.storage.queue.models.QueueServiceProperties.getCors()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CORS\"></xref>.\n\n**Code Sample**\n\nClear CORS in the Queue service\n\n```java\nQueueServiceProperties properties = client.getProperties().block();\n client.setPropertiesWithResponse(properties)\n     .subscribe(response -> System.out.printf(\"Setting Queue service properties completed with status code %d\",\n         response.getStatusCode()));\n```\n\nEnable Minute and Hour Metrics\n\n```java\nQueueServiceProperties properties = client.getProperties().block();\n properties.getMinuteMetrics().setEnabled(true);\n properties.getHourMetrics().setEnabled(true);\n client.setPropertiesWithResponse(properties)\n     .subscribe(response -> System.out.printf(\"Setting Queue service properties completed with status code %d\",\n         response.getStatusCode()));\n```\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/set-queue-service-properties"
  returns:
    description: "A response that only contains headers and response status code"
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
type: "class"
desc: "This class provides a client that contains all the operations for interacting with a queue account in Azure Storage. Operations allowed by the client are creating, listing, and deleting queues, retrieving and updating properties of the account, and retrieving statistics of the account.\n\n**Instantiating an Asynchronous Queue Service Client**\n\n```java\nQueueServiceAsyncClient client = new QueueServiceClientBuilder()\n     .connectionString(\"connectionstring\")\n     .endpoint(\"endpoint\")\n     .buildAsyncClient();\n```\n\nView <xref uid=\"com.azure.storage.queue.QueueServiceClientBuilder\" data-throw-if-not-resolved=\"false\" data-raw-source=\"this\"></xref> for additional ways to construct the client."
metadata: {}
package: "com.azure.storage.queue"
artifact: com.azure:azure-storage-queue:12.14.0-beta.1
