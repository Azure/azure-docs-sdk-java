### YamlMime:ManagedReference
items:
- uid: com.azure.data.schemaregistry.implementation.Schemas
  id: Schemas
  artifact: com.azure:azure-data-schemaregistry:1.0.0-beta.3
  parent: com.azure.data.schemaregistry.implementation
  children:
  - com.azure.data.schemaregistry.implementation.Schemas.getById(java.lang.String)
  - com.azure.data.schemaregistry.implementation.Schemas.getByIdAsync(java.lang.String)
  - com.azure.data.schemaregistry.implementation.Schemas.getByIdWithResponseAsync(java.lang.String)
  - com.azure.data.schemaregistry.implementation.Schemas.queryIdByContent(java.lang.String,java.lang.String,com.azure.data.schemaregistry.implementation.models.SerializationType,java.lang.String)
  - com.azure.data.schemaregistry.implementation.Schemas.queryIdByContentAsync(java.lang.String,java.lang.String,com.azure.data.schemaregistry.implementation.models.SerializationType,java.lang.String)
  - com.azure.data.schemaregistry.implementation.Schemas.queryIdByContentWithResponseAsync(java.lang.String,java.lang.String,com.azure.data.schemaregistry.implementation.models.SerializationType,java.lang.String)
  - com.azure.data.schemaregistry.implementation.Schemas.register(java.lang.String,java.lang.String,com.azure.data.schemaregistry.implementation.models.SerializationType,java.lang.String)
  - com.azure.data.schemaregistry.implementation.Schemas.registerAsync(java.lang.String,java.lang.String,com.azure.data.schemaregistry.implementation.models.SerializationType,java.lang.String)
  - com.azure.data.schemaregistry.implementation.Schemas.registerWithResponseAsync(java.lang.String,java.lang.String,com.azure.data.schemaregistry.implementation.models.SerializationType,java.lang.String)
  langs:
  - java
  name: Schemas
  nameWithType: Schemas
  fullName: com.azure.data.schemaregistry.implementation.Schemas
  type: Class
  package: com.azure.data.schemaregistry.implementation
  summary: An instance of this class provides access to all the operations defined in Schemas.
  syntax:
    content: public final class Schemas
  inheritance:
  - java.lang.Object
  inheritedMembers:
  - java.lang.Object.clone()
  - java.lang.Object.equals(java.lang.Object)
  - java.lang.Object.finalize()
  - java.lang.Object.getClass()
  - java.lang.Object.hashCode()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.toString()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
- uid: com.azure.data.schemaregistry.implementation.Schemas.Schemas(com.azure.data.schemaregistry.implementation.AzureSchemaRegistry)
  id: Schemas(com.azure.data.schemaregistry.implementation.AzureSchemaRegistry)
  artifact: com.azure:azure-data-schemaregistry:1.0.0-beta.3
  parent: com.azure.data.schemaregistry.implementation.Schemas
  langs:
  - java
  name: Schemas(AzureSchemaRegistry client)
  nameWithType: Schemas.Schemas(AzureSchemaRegistry client)
  fullName: com.azure.data.schemaregistry.implementation.Schemas.Schemas(AzureSchemaRegistry client)
  overload: com.azure.data.schemaregistry.implementation.Schemas.Schemas*
  type: Constructor
  package: com.azure.data.schemaregistry.implementation
  summary: Initializes an instance of Schemas.
  syntax:
    content: " Schemas(AzureSchemaRegistry client)"
    parameters:
    - id: client
      type: com.azure.data.schemaregistry.implementation.AzureSchemaRegistry
      description: the instance of the service client containing this operation class.
- uid: com.azure.data.schemaregistry.implementation.Schemas.getById(java.lang.String)
  id: getById(java.lang.String)
  artifact: com.azure:azure-data-schemaregistry:1.0.0-beta.3
  parent: com.azure.data.schemaregistry.implementation.Schemas
  langs:
  - java
  name: getById(String schemaId)
  nameWithType: Schemas.getById(String schemaId)
  fullName: com.azure.data.schemaregistry.implementation.Schemas.getById(String schemaId)
  overload: com.azure.data.schemaregistry.implementation.Schemas.getById*
  type: Method
  package: com.azure.data.schemaregistry.implementation
  summary: Gets a registered schema by its unique ID. Azure Schema Registry guarantees that ID is unique within a namespace.
  syntax:
    content: public String getById(String schemaId)
    parameters:
    - id: schemaId
      type: java.lang.String
      description: References specific schema in registry namespace.
    return:
      type: java.lang.String
      description: a registered schema by its unique ID.
- uid: com.azure.data.schemaregistry.implementation.Schemas.getByIdAsync(java.lang.String)
  id: getByIdAsync(java.lang.String)
  artifact: com.azure:azure-data-schemaregistry:1.0.0-beta.3
  parent: com.azure.data.schemaregistry.implementation.Schemas
  langs:
  - java
  name: getByIdAsync(String schemaId)
  nameWithType: Schemas.getByIdAsync(String schemaId)
  fullName: com.azure.data.schemaregistry.implementation.Schemas.getByIdAsync(String schemaId)
  overload: com.azure.data.schemaregistry.implementation.Schemas.getByIdAsync*
  type: Method
  package: com.azure.data.schemaregistry.implementation
  summary: Gets a registered schema by its unique ID. Azure Schema Registry guarantees that ID is unique within a namespace.
  syntax:
    content: public Mono<String> getByIdAsync(String schemaId)
    parameters:
    - id: schemaId
      type: java.lang.String
      description: References specific schema in registry namespace.
    return:
      type: reactor.core.publisher.Mono<java.lang.String>
      description: a registered schema by its unique ID.
- uid: com.azure.data.schemaregistry.implementation.Schemas.getByIdWithResponseAsync(java.lang.String)
  id: getByIdWithResponseAsync(java.lang.String)
  artifact: com.azure:azure-data-schemaregistry:1.0.0-beta.3
  parent: com.azure.data.schemaregistry.implementation.Schemas
  langs:
  - java
  name: getByIdWithResponseAsync(String schemaId)
  nameWithType: Schemas.getByIdWithResponseAsync(String schemaId)
  fullName: com.azure.data.schemaregistry.implementation.Schemas.getByIdWithResponseAsync(String schemaId)
  overload: com.azure.data.schemaregistry.implementation.Schemas.getByIdWithResponseAsync*
  type: Method
  package: com.azure.data.schemaregistry.implementation
  summary: Gets a registered schema by its unique ID. Azure Schema Registry guarantees that ID is unique within a namespace.
  syntax:
    content: public Mono<SchemasGetByIdResponse> getByIdWithResponseAsync(String schemaId)
    parameters:
    - id: schemaId
      type: java.lang.String
      description: References specific schema in registry namespace.
    return:
      type: reactor.core.publisher.Mono<com.azure.data.schemaregistry.implementation.models.SchemasGetByIdResponse>
      description: a registered schema by its unique ID.
- uid: com.azure.data.schemaregistry.implementation.Schemas.queryIdByContent(java.lang.String,java.lang.String,com.azure.data.schemaregistry.implementation.models.SerializationType,java.lang.String)
  id: queryIdByContent(java.lang.String,java.lang.String,com.azure.data.schemaregistry.implementation.models.SerializationType,java.lang.String)
  artifact: com.azure:azure-data-schemaregistry:1.0.0-beta.3
  parent: com.azure.data.schemaregistry.implementation.Schemas
  langs:
  - java
  name: queryIdByContent(String groupName, String schemaName, SerializationType xSchemaType, String schemaContent)
  nameWithType: Schemas.queryIdByContent(String groupName, String schemaName, SerializationType xSchemaType, String schemaContent)
  fullName: com.azure.data.schemaregistry.implementation.Schemas.queryIdByContent(String groupName, String schemaName, SerializationType xSchemaType, String schemaContent)
  overload: com.azure.data.schemaregistry.implementation.Schemas.queryIdByContent*
  type: Method
  package: com.azure.data.schemaregistry.implementation
  summary: Gets the ID referencing an existing schema within the specified schema group, as matched by schema content comparison.
  syntax:
    content: public SchemaId queryIdByContent(String groupName, String schemaName, SerializationType xSchemaType, String schemaContent)
    parameters:
    - id: groupName
      type: java.lang.String
      description: >-
        Schema group under which schema is registered. Group's serialization type should match the
             serialization type specified in the request.
    - id: schemaName
      type: java.lang.String
      description: Name of the registered schema.
    - id: xSchemaType
      type: com.azure.data.schemaregistry.implementation.models.SerializationType
      description: Serialization type for the schema being registered.
    - id: schemaContent
      type: java.lang.String
      description: String representation of the registered schema.
    return:
      type: com.azure.data.schemaregistry.implementation.models.SchemaId
      description: >-
        the ID referencing an existing schema within the specified schema group, as matched by schema content
             comparison.
- uid: com.azure.data.schemaregistry.implementation.Schemas.queryIdByContentAsync(java.lang.String,java.lang.String,com.azure.data.schemaregistry.implementation.models.SerializationType,java.lang.String)
  id: queryIdByContentAsync(java.lang.String,java.lang.String,com.azure.data.schemaregistry.implementation.models.SerializationType,java.lang.String)
  artifact: com.azure:azure-data-schemaregistry:1.0.0-beta.3
  parent: com.azure.data.schemaregistry.implementation.Schemas
  langs:
  - java
  name: queryIdByContentAsync(String groupName, String schemaName, SerializationType xSchemaType, String schemaContent)
  nameWithType: Schemas.queryIdByContentAsync(String groupName, String schemaName, SerializationType xSchemaType, String schemaContent)
  fullName: com.azure.data.schemaregistry.implementation.Schemas.queryIdByContentAsync(String groupName, String schemaName, SerializationType xSchemaType, String schemaContent)
  overload: com.azure.data.schemaregistry.implementation.Schemas.queryIdByContentAsync*
  type: Method
  package: com.azure.data.schemaregistry.implementation
  summary: Gets the ID referencing an existing schema within the specified schema group, as matched by schema content comparison.
  syntax:
    content: public Mono<SchemaId> queryIdByContentAsync(String groupName, String schemaName, SerializationType xSchemaType, String schemaContent)
    parameters:
    - id: groupName
      type: java.lang.String
      description: >-
        Schema group under which schema is registered. Group's serialization type should match the
             serialization type specified in the request.
    - id: schemaName
      type: java.lang.String
      description: Name of the registered schema.
    - id: xSchemaType
      type: com.azure.data.schemaregistry.implementation.models.SerializationType
      description: Serialization type for the schema being registered.
    - id: schemaContent
      type: java.lang.String
      description: String representation of the registered schema.
    return:
      type: reactor.core.publisher.Mono<com.azure.data.schemaregistry.implementation.models.SchemaId>
      description: >-
        the ID referencing an existing schema within the specified schema group, as matched by schema content
             comparison.
- uid: com.azure.data.schemaregistry.implementation.Schemas.queryIdByContentWithResponseAsync(java.lang.String,java.lang.String,com.azure.data.schemaregistry.implementation.models.SerializationType,java.lang.String)
  id: queryIdByContentWithResponseAsync(java.lang.String,java.lang.String,com.azure.data.schemaregistry.implementation.models.SerializationType,java.lang.String)
  artifact: com.azure:azure-data-schemaregistry:1.0.0-beta.3
  parent: com.azure.data.schemaregistry.implementation.Schemas
  langs:
  - java
  name: queryIdByContentWithResponseAsync(String groupName, String schemaName, SerializationType xSchemaType, String schemaContent)
  nameWithType: Schemas.queryIdByContentWithResponseAsync(String groupName, String schemaName, SerializationType xSchemaType, String schemaContent)
  fullName: com.azure.data.schemaregistry.implementation.Schemas.queryIdByContentWithResponseAsync(String groupName, String schemaName, SerializationType xSchemaType, String schemaContent)
  overload: com.azure.data.schemaregistry.implementation.Schemas.queryIdByContentWithResponseAsync*
  type: Method
  package: com.azure.data.schemaregistry.implementation
  summary: Gets the ID referencing an existing schema within the specified schema group, as matched by schema content comparison.
  syntax:
    content: public Mono<SchemasQueryIdByContentResponse> queryIdByContentWithResponseAsync(String groupName, String schemaName, SerializationType xSchemaType, String schemaContent)
    parameters:
    - id: groupName
      type: java.lang.String
      description: >-
        Schema group under which schema is registered. Group's serialization type should match the
             serialization type specified in the request.
    - id: schemaName
      type: java.lang.String
      description: Name of the registered schema.
    - id: xSchemaType
      type: com.azure.data.schemaregistry.implementation.models.SerializationType
      description: Serialization type for the schema being registered.
    - id: schemaContent
      type: java.lang.String
      description: String representation of the registered schema.
    return:
      type: reactor.core.publisher.Mono<com.azure.data.schemaregistry.implementation.models.SchemasQueryIdByContentResponse>
      description: >-
        the ID referencing an existing schema within the specified schema group, as matched by schema content
             comparison.
- uid: com.azure.data.schemaregistry.implementation.Schemas.register(java.lang.String,java.lang.String,com.azure.data.schemaregistry.implementation.models.SerializationType,java.lang.String)
  id: register(java.lang.String,java.lang.String,com.azure.data.schemaregistry.implementation.models.SerializationType,java.lang.String)
  artifact: com.azure:azure-data-schemaregistry:1.0.0-beta.3
  parent: com.azure.data.schemaregistry.implementation.Schemas
  langs:
  - java
  name: register(String groupName, String schemaName, SerializationType xSchemaType, String schemaContent)
  nameWithType: Schemas.register(String groupName, String schemaName, SerializationType xSchemaType, String schemaContent)
  fullName: com.azure.data.schemaregistry.implementation.Schemas.register(String groupName, String schemaName, SerializationType xSchemaType, String schemaContent)
  overload: com.azure.data.schemaregistry.implementation.Schemas.register*
  type: Method
  package: com.azure.data.schemaregistry.implementation
  summary: Register new schema. If schema of specified name does not exist in specified group, schema is created at version 1. If schema of specified name exists already in specified group, schema is created at latest version + 1.
  syntax:
    content: public SchemaId register(String groupName, String schemaName, SerializationType xSchemaType, String schemaContent)
    parameters:
    - id: groupName
      type: java.lang.String
      description: >-
        Schema group under which schema should be registered. Group's serialization type should match
             the serialization type specified in the request.
    - id: schemaName
      type: java.lang.String
      description: Name of schema being registered.
    - id: xSchemaType
      type: com.azure.data.schemaregistry.implementation.models.SerializationType
      description: Serialization type for the schema being registered.
    - id: schemaContent
      type: java.lang.String
      description: String representation of the schema being registered.
    return:
      type: com.azure.data.schemaregistry.implementation.models.SchemaId
      description: jSON Object received from the registry containing schema identifiers.
- uid: com.azure.data.schemaregistry.implementation.Schemas.registerAsync(java.lang.String,java.lang.String,com.azure.data.schemaregistry.implementation.models.SerializationType,java.lang.String)
  id: registerAsync(java.lang.String,java.lang.String,com.azure.data.schemaregistry.implementation.models.SerializationType,java.lang.String)
  artifact: com.azure:azure-data-schemaregistry:1.0.0-beta.3
  parent: com.azure.data.schemaregistry.implementation.Schemas
  langs:
  - java
  name: registerAsync(String groupName, String schemaName, SerializationType xSchemaType, String schemaContent)
  nameWithType: Schemas.registerAsync(String groupName, String schemaName, SerializationType xSchemaType, String schemaContent)
  fullName: com.azure.data.schemaregistry.implementation.Schemas.registerAsync(String groupName, String schemaName, SerializationType xSchemaType, String schemaContent)
  overload: com.azure.data.schemaregistry.implementation.Schemas.registerAsync*
  type: Method
  package: com.azure.data.schemaregistry.implementation
  summary: Register new schema. If schema of specified name does not exist in specified group, schema is created at version 1. If schema of specified name exists already in specified group, schema is created at latest version + 1.
  syntax:
    content: public Mono<SchemaId> registerAsync(String groupName, String schemaName, SerializationType xSchemaType, String schemaContent)
    parameters:
    - id: groupName
      type: java.lang.String
      description: >-
        Schema group under which schema should be registered. Group's serialization type should match
             the serialization type specified in the request.
    - id: schemaName
      type: java.lang.String
      description: Name of schema being registered.
    - id: xSchemaType
      type: com.azure.data.schemaregistry.implementation.models.SerializationType
      description: Serialization type for the schema being registered.
    - id: schemaContent
      type: java.lang.String
      description: String representation of the schema being registered.
    return:
      type: reactor.core.publisher.Mono<com.azure.data.schemaregistry.implementation.models.SchemaId>
      description: jSON Object received from the registry containing schema identifiers.
- uid: com.azure.data.schemaregistry.implementation.Schemas.registerWithResponseAsync(java.lang.String,java.lang.String,com.azure.data.schemaregistry.implementation.models.SerializationType,java.lang.String)
  id: registerWithResponseAsync(java.lang.String,java.lang.String,com.azure.data.schemaregistry.implementation.models.SerializationType,java.lang.String)
  artifact: com.azure:azure-data-schemaregistry:1.0.0-beta.3
  parent: com.azure.data.schemaregistry.implementation.Schemas
  langs:
  - java
  name: registerWithResponseAsync(String groupName, String schemaName, SerializationType xSchemaType, String schemaContent)
  nameWithType: Schemas.registerWithResponseAsync(String groupName, String schemaName, SerializationType xSchemaType, String schemaContent)
  fullName: com.azure.data.schemaregistry.implementation.Schemas.registerWithResponseAsync(String groupName, String schemaName, SerializationType xSchemaType, String schemaContent)
  overload: com.azure.data.schemaregistry.implementation.Schemas.registerWithResponseAsync*
  type: Method
  package: com.azure.data.schemaregistry.implementation
  summary: Register new schema. If schema of specified name does not exist in specified group, schema is created at version 1. If schema of specified name exists already in specified group, schema is created at latest version + 1.
  syntax:
    content: public Mono<SchemasRegisterResponse> registerWithResponseAsync(String groupName, String schemaName, SerializationType xSchemaType, String schemaContent)
    parameters:
    - id: groupName
      type: java.lang.String
      description: >-
        Schema group under which schema should be registered. Group's serialization type should match
             the serialization type specified in the request.
    - id: schemaName
      type: java.lang.String
      description: Name of schema being registered.
    - id: xSchemaType
      type: com.azure.data.schemaregistry.implementation.models.SerializationType
      description: Serialization type for the schema being registered.
    - id: schemaContent
      type: java.lang.String
      description: String representation of the schema being registered.
    return:
      type: reactor.core.publisher.Mono<com.azure.data.schemaregistry.implementation.models.SchemasRegisterResponse>
      description: jSON Object received from the registry containing schema identifiers.
references:
- uid: com.azure.data.schemaregistry.implementation.AzureSchemaRegistry
  name: AzureSchemaRegistry
  nameWithType: AzureSchemaRegistry
  fullName: com.azure.data.schemaregistry.implementation.AzureSchemaRegistry
- uid: com.azure.data.schemaregistry.implementation.Schemas.Schemas*
  name: Schemas
  nameWithType: Schemas.Schemas
  fullName: com.azure.data.schemaregistry.implementation.Schemas.Schemas
  package: com.azure.data.schemaregistry.implementation
- uid: java.lang.String
  spec.java:
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
- uid: reactor.core.publisher.Mono<com.azure.data.schemaregistry.implementation.models.SchemasGetByIdResponse>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: com.azure.data.schemaregistry.implementation.models.SchemasGetByIdResponse
    name: SchemasGetByIdResponse
    fullName: com.azure.data.schemaregistry.implementation.models.SchemasGetByIdResponse
  - name: '>'
    fullName: '>'
- uid: com.azure.data.schemaregistry.implementation.Schemas.getByIdWithResponseAsync*
  name: getByIdWithResponseAsync
  nameWithType: Schemas.getByIdWithResponseAsync
  fullName: com.azure.data.schemaregistry.implementation.Schemas.getByIdWithResponseAsync
  package: com.azure.data.schemaregistry.implementation
- uid: reactor.core.publisher.Mono<java.lang.String>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
  - name: '>'
    fullName: '>'
- uid: com.azure.data.schemaregistry.implementation.Schemas.getByIdAsync*
  name: getByIdAsync
  nameWithType: Schemas.getByIdAsync
  fullName: com.azure.data.schemaregistry.implementation.Schemas.getByIdAsync
  package: com.azure.data.schemaregistry.implementation
- uid: com.azure.data.schemaregistry.implementation.Schemas.getById*
  name: getById
  nameWithType: Schemas.getById
  fullName: com.azure.data.schemaregistry.implementation.Schemas.getById
  package: com.azure.data.schemaregistry.implementation
- uid: com.azure.data.schemaregistry.implementation.models.SerializationType
  name: SerializationType
  nameWithType: SerializationType
  fullName: com.azure.data.schemaregistry.implementation.models.SerializationType
- uid: reactor.core.publisher.Mono<com.azure.data.schemaregistry.implementation.models.SchemasQueryIdByContentResponse>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: com.azure.data.schemaregistry.implementation.models.SchemasQueryIdByContentResponse
    name: SchemasQueryIdByContentResponse
    fullName: com.azure.data.schemaregistry.implementation.models.SchemasQueryIdByContentResponse
  - name: '>'
    fullName: '>'
- uid: com.azure.data.schemaregistry.implementation.Schemas.queryIdByContentWithResponseAsync*
  name: queryIdByContentWithResponseAsync
  nameWithType: Schemas.queryIdByContentWithResponseAsync
  fullName: com.azure.data.schemaregistry.implementation.Schemas.queryIdByContentWithResponseAsync
  package: com.azure.data.schemaregistry.implementation
- uid: reactor.core.publisher.Mono<com.azure.data.schemaregistry.implementation.models.SchemaId>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: com.azure.data.schemaregistry.implementation.models.SchemaId
    name: SchemaId
    fullName: com.azure.data.schemaregistry.implementation.models.SchemaId
  - name: '>'
    fullName: '>'
- uid: com.azure.data.schemaregistry.implementation.Schemas.queryIdByContentAsync*
  name: queryIdByContentAsync
  nameWithType: Schemas.queryIdByContentAsync
  fullName: com.azure.data.schemaregistry.implementation.Schemas.queryIdByContentAsync
  package: com.azure.data.schemaregistry.implementation
- uid: com.azure.data.schemaregistry.implementation.models.SchemaId
  name: SchemaId
  nameWithType: SchemaId
  fullName: com.azure.data.schemaregistry.implementation.models.SchemaId
- uid: com.azure.data.schemaregistry.implementation.Schemas.queryIdByContent*
  name: queryIdByContent
  nameWithType: Schemas.queryIdByContent
  fullName: com.azure.data.schemaregistry.implementation.Schemas.queryIdByContent
  package: com.azure.data.schemaregistry.implementation
- uid: reactor.core.publisher.Mono<com.azure.data.schemaregistry.implementation.models.SchemasRegisterResponse>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: com.azure.data.schemaregistry.implementation.models.SchemasRegisterResponse
    name: SchemasRegisterResponse
    fullName: com.azure.data.schemaregistry.implementation.models.SchemasRegisterResponse
  - name: '>'
    fullName: '>'
- uid: com.azure.data.schemaregistry.implementation.Schemas.registerWithResponseAsync*
  name: registerWithResponseAsync
  nameWithType: Schemas.registerWithResponseAsync
  fullName: com.azure.data.schemaregistry.implementation.Schemas.registerWithResponseAsync
  package: com.azure.data.schemaregistry.implementation
- uid: com.azure.data.schemaregistry.implementation.Schemas.registerAsync*
  name: registerAsync
  nameWithType: Schemas.registerAsync
  fullName: com.azure.data.schemaregistry.implementation.Schemas.registerAsync
  package: com.azure.data.schemaregistry.implementation
- uid: com.azure.data.schemaregistry.implementation.Schemas.register*
  name: register
  nameWithType: Schemas.register
  fullName: com.azure.data.schemaregistry.implementation.Schemas.register
  package: com.azure.data.schemaregistry.implementation
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: java.lang.Object.finalize()
  name: Object.finalize()
  nameWithType: Object.finalize()
  fullName: java.lang.Object.finalize()
- uid: java.lang.Object.clone()
  name: Object.clone()
  nameWithType: Object.clone()
  fullName: java.lang.Object.clone()
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: java.lang.Object.equals(java.lang.Object)
  name: Object.equals(Object)
  nameWithType: Object.equals(Object)
  fullName: java.lang.Object.equals(java.lang.Object)
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.lang.Object.hashCode()
  name: Object.hashCode()
  nameWithType: Object.hashCode()
  fullName: java.lang.Object.hashCode()
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: java.lang.Object.toString()
  name: Object.toString()
  nameWithType: Object.toString()
  fullName: java.lang.Object.toString()
- uid: reactor.core.publisher.Mono
  name: Mono
  nameWithType: Mono
  fullName: reactor.core.publisher.Mono
- uid: com.azure.data.schemaregistry.implementation.models.SchemasGetByIdResponse
  name: SchemasGetByIdResponse
  nameWithType: SchemasGetByIdResponse
  fullName: com.azure.data.schemaregistry.implementation.models.SchemasGetByIdResponse
- uid: com.azure.data.schemaregistry.implementation.models.SchemasQueryIdByContentResponse
  name: SchemasQueryIdByContentResponse
  nameWithType: SchemasQueryIdByContentResponse
  fullName: com.azure.data.schemaregistry.implementation.models.SchemasQueryIdByContentResponse
- uid: com.azure.data.schemaregistry.implementation.models.SchemasRegisterResponse
  name: SchemasRegisterResponse
  nameWithType: SchemasRegisterResponse
  fullName: com.azure.data.schemaregistry.implementation.models.SchemasRegisterResponse
