### YamlMime:JavaType
uid: "com.fasterxml.jackson.annotation.JsonKey"
fullName: "com.fasterxml.jackson.annotation.JsonKey"
name: "JsonKey"
nameWithType: "JsonKey"
summary: "Marker annotation that indicates that the value of annotated accessor (either field or \"getter\" method \\[a method with non-void return type, no args\\]) is to be used as the single value to serialize for the instance. This value will be used only if the instance is being serialized as a key in a Map type. Usually value will be of a simple scalar type (String or Number), but it can be any serializable type (Collection, Map or Bean).\n\nAt most one accessor of a `Class` can be annotated with this annotation; if more than one is found, an exception may be thrown. Also, if method signature of annotated method is not compatible with Getters, an exception may be thrown (whether exception is thrown or not is an implementation detail (due to filtering during introspection, some annotations may be skipped) and applications should not rely on specific behavior).\n\nA typical usage is that of annotating `toString()` method so that returned String value is used as the JSON serialization; and if deserialization is needed, there is matching constructor or factory method annotated with <xref uid=\"com.fasterxml.jackson.annotation.JsonCreator\" data-throw-if-not-resolved=\"false\" data-raw-source=\"JsonCreator\"></xref> annotation.\n\nBoolean argument is only used so that sub-classes can \"disable\" annotation if necessary."
syntax: "public interface JsonKey implements Annotation"
methods:
- "com.fasterxml.jackson.annotation.JsonKey.value()"
type: "interface"
implements:
- "<xref href=\"java.lang.annotation.Annotation?alt=java.lang.annotation.Annotation&text=Annotation\" data-throw-if-not-resolved=\"False\" />"
metadata: {}
package: "com.fasterxml.jackson.annotation"
artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.5
