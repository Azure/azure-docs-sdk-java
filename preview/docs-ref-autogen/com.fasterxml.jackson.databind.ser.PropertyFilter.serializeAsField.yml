### YamlMime:JavaMember
uid: "com.fasterxml.jackson.databind.ser.PropertyFilter.serializeAsField*"
fullName: "com.fasterxml.jackson.databind.ser.PropertyFilter.serializeAsField"
name: "serializeAsField"
nameWithType: "PropertyFilter.serializeAsField"
members:
- uid: "com.fasterxml.jackson.databind.ser.PropertyFilter.serializeAsField(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.ser.PropertyWriter)"
  fullName: "com.fasterxml.jackson.databind.ser.PropertyFilter.serializeAsField(Object pojo, JsonGenerator gen, SerializerProvider prov, PropertyWriter writer)"
  name: "serializeAsField(Object pojo, JsonGenerator gen, SerializerProvider prov, PropertyWriter writer)"
  nameWithType: "PropertyFilter.serializeAsField(Object pojo, JsonGenerator gen, SerializerProvider prov, PropertyWriter writer)"
  summary: "Method called by <xref uid=\"com.fasterxml.jackson.databind.ser.BeanSerializer\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BeanSerializer\"></xref> to let the filter decide what to do with given bean property value: the usual choices are to either filter out (i.e. do nothing) or write using given <xref uid=\"com.fasterxml.jackson.databind.ser.PropertyWriter\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PropertyWriter\"></xref>, although filters can choose other to do something different altogether.\n\nTypical implementation is something like:\n\n```java\nif (include(writer)) {\n      writer.serializeAsField(pojo, gen, prov);\n }\n```"
  parameters:
  - description: "Object that contains property value to serialize"
    name: "pojo"
    type: "<xref href=\"java.lang.Object?alt=java.lang.Object&text=Object\" data-throw-if-not-resolved=\"False\" />"
  - description: "Generator use for serializing value"
    name: "gen"
    type: "<xref href=\"com.fasterxml.jackson.core.JsonGenerator?alt=com.fasterxml.jackson.core.JsonGenerator&text=JsonGenerator\" data-throw-if-not-resolved=\"False\" />"
  - description: "Provider that can be used for accessing dynamic aspects of serialization\n    processing"
    name: "prov"
    type: "<xref href=\"com.fasterxml.jackson.databind.SerializerProvider?alt=com.fasterxml.jackson.databind.SerializerProvider&text=SerializerProvider\" data-throw-if-not-resolved=\"False\" />"
  - description: "Object called to do actual serialization of the field, if not filtered out"
    name: "writer"
    type: "<xref href=\"com.fasterxml.jackson.databind.ser.PropertyWriter?alt=com.fasterxml.jackson.databind.ser.PropertyWriter&text=PropertyWriter\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract void serializeAsField(Object pojo, JsonGenerator gen, SerializerProvider prov, PropertyWriter writer)"
  exceptions:
  - type: "<xref href=\"java.lang.Exception?alt=java.lang.Exception&text=Exception\" data-throw-if-not-resolved=\"False\" />"
type: "method"
metadata: {}
package: "com.fasterxml.jackson.databind.ser"
artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
