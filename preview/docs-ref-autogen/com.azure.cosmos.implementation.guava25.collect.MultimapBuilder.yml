### YamlMime:ManagedReference
items:
- uid: com.azure.cosmos.implementation.guava25.collect.MultimapBuilder
  id: MultimapBuilder
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect
  children:
  - com.azure.cosmos.implementation.guava25.collect.MultimapBuilder.<K,V>build()
  - com.azure.cosmos.implementation.guava25.collect.MultimapBuilder.<K,V>build(com.azure.cosmos.implementation.guava25.collect.Multimap<? extends K,? extends V>)
  - com.azure.cosmos.implementation.guava25.collect.MultimapBuilder.<K0>enumKeys(java.lang.Class<K0>)
  - com.azure.cosmos.implementation.guava25.collect.MultimapBuilder.<K0>treeKeys(java.util.Comparator<K0>)
  - com.azure.cosmos.implementation.guava25.collect.MultimapBuilder.ListMultimapBuilder
  - com.azure.cosmos.implementation.guava25.collect.MultimapBuilder.MultimapBuilderWithKeys
  - com.azure.cosmos.implementation.guava25.collect.MultimapBuilder.SetMultimapBuilder
  - com.azure.cosmos.implementation.guava25.collect.MultimapBuilder.SortedSetMultimapBuilder
  - com.azure.cosmos.implementation.guava25.collect.MultimapBuilder.hashKeys()
  - com.azure.cosmos.implementation.guava25.collect.MultimapBuilder.hashKeys(int)
  - com.azure.cosmos.implementation.guava25.collect.MultimapBuilder.linkedHashKeys()
  - com.azure.cosmos.implementation.guava25.collect.MultimapBuilder.linkedHashKeys(int)
  - com.azure.cosmos.implementation.guava25.collect.MultimapBuilder.treeKeys()
  langs:
  - java
  name: MultimapBuilder<K0,V0>
  nameWithType: MultimapBuilder<K0,V0>
  fullName: com.azure.cosmos.implementation.guava25.collect.MultimapBuilder<K0,V0>
  type: Class
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    A builder for a multimap implementation that allows customization of the backing map and value collection implementations used in a particular multimap.


    This can be used to easily configure multimap data structure implementations not provided explicitly in `com.google.common.collect`, for example:


    ```java

    ListMultimap treeListMultimap =
         MultimapBuilder.treeKeys().arrayListValues().build();
     SetMultimap hashEnumMultimap =
         MultimapBuilder.hashKeys().enumSetValues(MyEnum.class).build();
    ```


    `MultimapBuilder` instances are immutable. Invoking a configuration method has no effect on the receiving instance; you must store and use the new builder instance it returns instead.


    The generated multimaps are serializable if the key and value types are serializable, unless stated otherwise in one of the configuration methods.
  syntax:
    content: public abstract class MultimapBuilder<K0,V0>
    typeParameters:
    - id: K0
    - id: V0
  inheritance:
  - java.lang.Object
  inheritedMembers:
  - java.lang.Object.clone()
  - java.lang.Object.equals(java.lang.Object)
  - java.lang.Object.finalize()
  - java.lang.Object.getClass()
  - java.lang.Object.hashCode()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.toString()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
- uid: com.azure.cosmos.implementation.guava25.collect.MultimapBuilder.<K,V>build()
  id: <K,V>build()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.MultimapBuilder
  langs:
  - java
  name: <K,V>build()
  nameWithType: MultimapBuilder<K0,V0>.<K,V>build()
  fullName: com.azure.cosmos.implementation.guava25.collect.MultimapBuilder<K0,V0>.<K,V>build()
  overload: com.azure.cosmos.implementation.guava25.collect.MultimapBuilder.build*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Returns a new, empty `Multimap` with the specified implementation.
  syntax:
    content: public abstract Multimap<K,V> <K,V>build()
    return:
      type: com.azure.cosmos.implementation.guava25.collect.Multimap<K,V>
- uid: com.azure.cosmos.implementation.guava25.collect.MultimapBuilder.<K,V>build(com.azure.cosmos.implementation.guava25.collect.Multimap<? extends K,? extends V>)
  id: <K,V>build(com.azure.cosmos.implementation.guava25.collect.Multimap<? extends K,? extends V>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.MultimapBuilder
  langs:
  - java
  name: <K,V>build(Multimap<? extends K,? extends V> multimap)
  nameWithType: MultimapBuilder<K0,V0>.<K,V>build(Multimap<? extends K,? extends V> multimap)
  fullName: com.azure.cosmos.implementation.guava25.collect.MultimapBuilder<K0,V0>.<K,V>build(Multimap<? extends K,? extends V> multimap)
  overload: com.azure.cosmos.implementation.guava25.collect.MultimapBuilder.build*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Returns a `Multimap` with the specified implementation, initialized with the entries of `multimap`.
  syntax:
    content: public Multimap<K,V> <K,V>build(Multimap<? extends K,? extends V> multimap)
    parameters:
    - id: multimap
      type: com.azure.cosmos.implementation.guava25.collect.Multimap<? extends K,? extends V>
    return:
      type: com.azure.cosmos.implementation.guava25.collect.Multimap<K,V>
- uid: com.azure.cosmos.implementation.guava25.collect.MultimapBuilder.<K0>enumKeys(java.lang.Class<K0>)
  id: <K0>enumKeys(java.lang.Class<K0>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.MultimapBuilder
  langs:
  - java
  name: <K0>enumKeys(Class<K0> keyClass)
  nameWithType: MultimapBuilder<K0,V0>.<K0>enumKeys(Class<K0> keyClass)
  fullName: com.azure.cosmos.implementation.guava25.collect.MultimapBuilder<K0,V0>.<K0>enumKeys(Class<K0> keyClass)
  overload: com.azure.cosmos.implementation.guava25.collect.MultimapBuilder.enumKeys*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Uses an <xref uid="java.util.EnumMap" data-throw-if-not-resolved="false">EnumMap</xref> to map keys to value collections.
  syntax:
    content: public static MultimapBuilder.MultimapBuilderWithKeys<K0> <K0>enumKeys(Class<K0> keyClass)
    parameters:
    - id: keyClass
      type: java.lang.Class<K0>
    return:
      type: com.azure.cosmos.implementation.guava25.collect.MultimapBuilder.MultimapBuilderWithKeys<K0>
- uid: com.azure.cosmos.implementation.guava25.collect.MultimapBuilder.<K0>treeKeys(java.util.Comparator<K0>)
  id: <K0>treeKeys(java.util.Comparator<K0>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.MultimapBuilder
  langs:
  - java
  name: <K0>treeKeys(Comparator<K0> comparator)
  nameWithType: MultimapBuilder<K0,V0>.<K0>treeKeys(Comparator<K0> comparator)
  fullName: com.azure.cosmos.implementation.guava25.collect.MultimapBuilder<K0,V0>.<K0>treeKeys(Comparator<K0> comparator)
  overload: com.azure.cosmos.implementation.guava25.collect.MultimapBuilder.treeKeys*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Uses a <xref uid="java.util.TreeMap" data-throw-if-not-resolved="false">TreeMap</xref> sorted by the specified comparator to map keys to value collections.


    The collections returned by <xref uid="com.azure.cosmos.implementation.guava25.collect.Multimap.keySet()" data-throw-if-not-resolved="false">Multimap#keySet()</xref>, <xref uid="com.azure.cosmos.implementation.guava25.collect.Multimap.keys()" data-throw-if-not-resolved="false">Multimap#keys()</xref>, and <xref uid="com.azure.cosmos.implementation.guava25.collect.Multimap.asMap()" data-throw-if-not-resolved="false">Multimap#asMap()</xref> will iterate through the keys in sorted order.


    For all multimaps generated by the resulting builder, the <xref uid="com.azure.cosmos.implementation.guava25.collect.Multimap.keySet()" data-throw-if-not-resolved="false">Multimap#keySet()</xref> can be safely cast to a <xref uid="java.util.SortedSet" data-throw-if-not-resolved="false">java.util.SortedSet</xref>, and the <xref uid="com.azure.cosmos.implementation.guava25.collect.Multimap.asMap()" data-throw-if-not-resolved="false">Multimap#asMap()</xref> can safely be cast to a <xref uid="java.util.SortedMap" data-throw-if-not-resolved="false">java.util.SortedMap</xref>.


    Multimaps generated by the resulting builder will not be serializable if `comparator` is not serializable.
  syntax:
    content: public static MultimapBuilder.MultimapBuilderWithKeys<K0> <K0>treeKeys(Comparator<K0> comparator)
    parameters:
    - id: comparator
      type: java.util.Comparator<K0>
    return:
      type: com.azure.cosmos.implementation.guava25.collect.MultimapBuilder.MultimapBuilderWithKeys<K0>
- uid: com.azure.cosmos.implementation.guava25.collect.MultimapBuilder.MultimapBuilder()
  id: MultimapBuilder()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.MultimapBuilder
  langs:
  - java
  name: MultimapBuilder()
  nameWithType: MultimapBuilder<K0,V0>.MultimapBuilder()
  fullName: com.azure.cosmos.implementation.guava25.collect.MultimapBuilder<K0,V0>.MultimapBuilder()
  overload: com.azure.cosmos.implementation.guava25.collect.MultimapBuilder.MultimapBuilder*
  type: Constructor
  package: com.azure.cosmos.implementation.guava25.collect
  syntax:
    content: private MultimapBuilder()
- uid: com.azure.cosmos.implementation.guava25.collect.MultimapBuilder.hashKeys()
  id: hashKeys()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.MultimapBuilder
  langs:
  - java
  name: hashKeys()
  nameWithType: MultimapBuilder<K0,V0>.hashKeys()
  fullName: com.azure.cosmos.implementation.guava25.collect.MultimapBuilder<K0,V0>.hashKeys()
  overload: com.azure.cosmos.implementation.guava25.collect.MultimapBuilder.hashKeys*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Uses a hash table to map keys to value collections.
  syntax:
    content: public static MultimapBuilder.MultimapBuilderWithKeys<Object> hashKeys()
    return:
      type: com.azure.cosmos.implementation.guava25.collect.MultimapBuilder.MultimapBuilderWithKeys<java.lang.Object>
- uid: com.azure.cosmos.implementation.guava25.collect.MultimapBuilder.hashKeys(int)
  id: hashKeys(int)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.MultimapBuilder
  langs:
  - java
  name: hashKeys(int expectedKeys)
  nameWithType: MultimapBuilder<K0,V0>.hashKeys(int expectedKeys)
  fullName: com.azure.cosmos.implementation.guava25.collect.MultimapBuilder<K0,V0>.hashKeys(int expectedKeys)
  overload: com.azure.cosmos.implementation.guava25.collect.MultimapBuilder.hashKeys*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Uses a hash table to map keys to value collections, initialized to expect the specified number of keys.
  syntax:
    content: public static MultimapBuilder.MultimapBuilderWithKeys<Object> hashKeys(int expectedKeys)
    parameters:
    - id: expectedKeys
      type: int
    return:
      type: com.azure.cosmos.implementation.guava25.collect.MultimapBuilder.MultimapBuilderWithKeys<java.lang.Object>
- uid: com.azure.cosmos.implementation.guava25.collect.MultimapBuilder.linkedHashKeys()
  id: linkedHashKeys()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.MultimapBuilder
  langs:
  - java
  name: linkedHashKeys()
  nameWithType: MultimapBuilder<K0,V0>.linkedHashKeys()
  fullName: com.azure.cosmos.implementation.guava25.collect.MultimapBuilder<K0,V0>.linkedHashKeys()
  overload: com.azure.cosmos.implementation.guava25.collect.MultimapBuilder.linkedHashKeys*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Uses a hash table to map keys to value collections.


    The collections returned by <xref uid="com.azure.cosmos.implementation.guava25.collect.Multimap.keySet()" data-throw-if-not-resolved="false">Multimap#keySet()</xref>, <xref uid="com.azure.cosmos.implementation.guava25.collect.Multimap.keys()" data-throw-if-not-resolved="false">Multimap#keys()</xref>, and <xref uid="com.azure.cosmos.implementation.guava25.collect.Multimap.asMap()" data-throw-if-not-resolved="false">Multimap#asMap()</xref> will iterate through the keys in the order that they were first added to the multimap, save that if all values associated with a key are removed and then the key is added back into the multimap, that key will come last in the key iteration order.
  syntax:
    content: public static MultimapBuilder.MultimapBuilderWithKeys<Object> linkedHashKeys()
    return:
      type: com.azure.cosmos.implementation.guava25.collect.MultimapBuilder.MultimapBuilderWithKeys<java.lang.Object>
- uid: com.azure.cosmos.implementation.guava25.collect.MultimapBuilder.linkedHashKeys(int)
  id: linkedHashKeys(int)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.MultimapBuilder
  langs:
  - java
  name: linkedHashKeys(int expectedKeys)
  nameWithType: MultimapBuilder<K0,V0>.linkedHashKeys(int expectedKeys)
  fullName: com.azure.cosmos.implementation.guava25.collect.MultimapBuilder<K0,V0>.linkedHashKeys(int expectedKeys)
  overload: com.azure.cosmos.implementation.guava25.collect.MultimapBuilder.linkedHashKeys*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Uses an hash table to map keys to value collections, initialized to expect the specified number of keys.


    The collections returned by <xref uid="com.azure.cosmos.implementation.guava25.collect.Multimap.keySet()" data-throw-if-not-resolved="false">Multimap#keySet()</xref>, <xref uid="com.azure.cosmos.implementation.guava25.collect.Multimap.keys()" data-throw-if-not-resolved="false">Multimap#keys()</xref>, and <xref uid="com.azure.cosmos.implementation.guava25.collect.Multimap.asMap()" data-throw-if-not-resolved="false">Multimap#asMap()</xref> will iterate through the keys in the order that they were first added to the multimap, save that if all values associated with a key are removed and then the key is added back into the multimap, that key will come last in the key iteration order.
  syntax:
    content: public static MultimapBuilder.MultimapBuilderWithKeys<Object> linkedHashKeys(int expectedKeys)
    parameters:
    - id: expectedKeys
      type: int
    return:
      type: com.azure.cosmos.implementation.guava25.collect.MultimapBuilder.MultimapBuilderWithKeys<java.lang.Object>
- uid: com.azure.cosmos.implementation.guava25.collect.MultimapBuilder.treeKeys()
  id: treeKeys()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.MultimapBuilder
  langs:
  - java
  name: treeKeys()
  nameWithType: MultimapBuilder<K0,V0>.treeKeys()
  fullName: com.azure.cosmos.implementation.guava25.collect.MultimapBuilder<K0,V0>.treeKeys()
  overload: com.azure.cosmos.implementation.guava25.collect.MultimapBuilder.treeKeys*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Uses a naturally-ordered <xref uid="java.util.TreeMap" data-throw-if-not-resolved="false">TreeMap</xref> to map keys to value collections.


    The collections returned by <xref uid="com.azure.cosmos.implementation.guava25.collect.Multimap.keySet()" data-throw-if-not-resolved="false">Multimap#keySet()</xref>, <xref uid="com.azure.cosmos.implementation.guava25.collect.Multimap.keys()" data-throw-if-not-resolved="false">Multimap#keys()</xref>, and <xref uid="com.azure.cosmos.implementation.guava25.collect.Multimap.asMap()" data-throw-if-not-resolved="false">Multimap#asMap()</xref> will iterate through the keys in sorted order.


    For all multimaps generated by the resulting builder, the <xref uid="com.azure.cosmos.implementation.guava25.collect.Multimap.keySet()" data-throw-if-not-resolved="false">Multimap#keySet()</xref> can be safely cast to a <xref uid="java.util.SortedSet" data-throw-if-not-resolved="false">java.util.SortedSet</xref>, and the <xref uid="com.azure.cosmos.implementation.guava25.collect.Multimap.asMap()" data-throw-if-not-resolved="false">Multimap#asMap()</xref> can safely be cast to a <xref uid="java.util.SortedMap" data-throw-if-not-resolved="false">java.util.SortedMap</xref>.
  syntax:
    content: public static MultimapBuilder.MultimapBuilderWithKeys<Comparable> treeKeys()
    return:
      type: com.azure.cosmos.implementation.guava25.collect.MultimapBuilder.MultimapBuilderWithKeys<java.lang.Comparable>
references:
- uid: com.azure.cosmos.implementation.guava25.collect.MultimapBuilder.MultimapBuilder*
  name: MultimapBuilder
  nameWithType: MultimapBuilder<K0,V0>.MultimapBuilder
  fullName: com.azure.cosmos.implementation.guava25.collect.MultimapBuilder<K0,V0>.MultimapBuilder
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.MultimapBuilder.MultimapBuilderWithKeys<java.lang.Object>
  spec.java:
  - uid: com.azure.cosmos.implementation.guava25.collect.MultimapBuilder.MultimapBuilderWithKeys
    name: MultimapBuilderWithKeys
    fullName: com.azure.cosmos.implementation.guava25.collect.MultimapBuilder.MultimapBuilderWithKeys
  - name: <
    fullName: <
  - uid: java.lang.Object
    name: Object
    fullName: java.lang.Object
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.MultimapBuilder.hashKeys*
  name: hashKeys
  nameWithType: MultimapBuilder<K0,V0>.hashKeys
  fullName: com.azure.cosmos.implementation.guava25.collect.MultimapBuilder<K0,V0>.hashKeys
  package: com.azure.cosmos.implementation.guava25.collect
- uid: int
  spec.java:
  - uid: int
    name: int
    fullName: int
- uid: com.azure.cosmos.implementation.guava25.collect.MultimapBuilder.linkedHashKeys*
  name: linkedHashKeys
  nameWithType: MultimapBuilder<K0,V0>.linkedHashKeys
  fullName: com.azure.cosmos.implementation.guava25.collect.MultimapBuilder<K0,V0>.linkedHashKeys
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.MultimapBuilder.MultimapBuilderWithKeys<java.lang.Comparable>
  spec.java:
  - uid: com.azure.cosmos.implementation.guava25.collect.MultimapBuilder.MultimapBuilderWithKeys
    name: MultimapBuilderWithKeys
    fullName: com.azure.cosmos.implementation.guava25.collect.MultimapBuilder.MultimapBuilderWithKeys
  - name: <
    fullName: <
  - uid: java.lang.Comparable
    name: Comparable
    fullName: java.lang.Comparable
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.MultimapBuilder.treeKeys*
  name: treeKeys
  nameWithType: MultimapBuilder<K0,V0>.treeKeys
  fullName: com.azure.cosmos.implementation.guava25.collect.MultimapBuilder<K0,V0>.treeKeys
  package: com.azure.cosmos.implementation.guava25.collect
- uid: java.util.Comparator<K0>
  spec.java:
  - uid: java.util.Comparator
    name: Comparator
    fullName: java.util.Comparator
  - name: <
    fullName: <
  - uid: K0
    name: K0
    fullName: K0
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.MultimapBuilder.MultimapBuilderWithKeys<K0>
  spec.java:
  - uid: com.azure.cosmos.implementation.guava25.collect.MultimapBuilder.MultimapBuilderWithKeys
    name: MultimapBuilderWithKeys
    fullName: com.azure.cosmos.implementation.guava25.collect.MultimapBuilder.MultimapBuilderWithKeys
  - name: <
    fullName: <
  - uid: K0
    name: K0
    fullName: K0
  - name: '>'
    fullName: '>'
- uid: java.lang.Class<K0>
  spec.java:
  - uid: java.lang.Class
    name: Class
    fullName: java.lang.Class
  - name: <
    fullName: <
  - uid: K0
    name: K0
    fullName: K0
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.MultimapBuilder.enumKeys*
  name: <K0>enumKeys
  nameWithType: MultimapBuilder<K0,V0>.<K0>enumKeys
  fullName: com.azure.cosmos.implementation.guava25.collect.MultimapBuilder<K0,V0>.<K0>enumKeys
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.Multimap<K,V>
  spec.java:
  - uid: com.azure.cosmos.implementation.guava25.collect.Multimap
    name: Multimap
    fullName: com.azure.cosmos.implementation.guava25.collect.Multimap
  - name: <
    fullName: <
  - uid: K
    name: K
    fullName: K
  - name: ','
    fullName: ','
  - uid: V
    name: V
    fullName: V
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.MultimapBuilder.build*
  name: <K,V>build
  nameWithType: MultimapBuilder<K0,V0>.<K,V>build
  fullName: com.azure.cosmos.implementation.guava25.collect.MultimapBuilder<K0,V0>.<K,V>build
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.Multimap<? extends K,? extends V>
  spec.java:
  - uid: com.azure.cosmos.implementation.guava25.collect.Multimap
    name: Multimap
    fullName: com.azure.cosmos.implementation.guava25.collect.Multimap
  - name: <
    fullName: <
  - uid: '? extends K'
    name: '? extends K'
    fullName: '? extends K'
  - name: ','
    fullName: ','
  - uid: '? extends V'
    name: '? extends V'
    fullName: '? extends V'
  - name: '>'
    fullName: '>'
- uid: K0
  name: K0
  nameWithType: K0
  fullName: K0
- uid: V0
  name: V0
  nameWithType: V0
  fullName: V0
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: java.lang.Object.finalize()
  name: Object.finalize()
  nameWithType: Object.finalize()
  fullName: java.lang.Object.finalize()
- uid: java.lang.Object.clone()
  name: Object.clone()
  nameWithType: Object.clone()
  fullName: java.lang.Object.clone()
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: java.lang.Object.equals(java.lang.Object)
  name: Object.equals(Object)
  nameWithType: Object.equals(Object)
  fullName: java.lang.Object.equals(java.lang.Object)
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.lang.Object.hashCode()
  name: Object.hashCode()
  nameWithType: Object.hashCode()
  fullName: java.lang.Object.hashCode()
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: java.lang.Object.toString()
  name: Object.toString()
  nameWithType: Object.toString()
  fullName: java.lang.Object.toString()
- uid: com.azure.cosmos.implementation.guava25.collect.MultimapBuilder.ListMultimapBuilder
  name: MultimapBuilder.ListMultimapBuilder<K0,V0>
  nameWithType: MultimapBuilder.ListMultimapBuilder<K0,V0>
  fullName: com.azure.cosmos.implementation.guava25.collect.MultimapBuilder.ListMultimapBuilder<K0,V0>
- uid: com.azure.cosmos.implementation.guava25.collect.MultimapBuilder.MultimapBuilderWithKeys
  name: MultimapBuilder.MultimapBuilderWithKeys<K0>
  nameWithType: MultimapBuilder.MultimapBuilderWithKeys<K0>
  fullName: com.azure.cosmos.implementation.guava25.collect.MultimapBuilder.MultimapBuilderWithKeys<K0>
- uid: com.azure.cosmos.implementation.guava25.collect.MultimapBuilder.SetMultimapBuilder
  name: MultimapBuilder.SetMultimapBuilder<K0,V0>
  nameWithType: MultimapBuilder.SetMultimapBuilder<K0,V0>
  fullName: com.azure.cosmos.implementation.guava25.collect.MultimapBuilder.SetMultimapBuilder<K0,V0>
- uid: com.azure.cosmos.implementation.guava25.collect.MultimapBuilder.SortedSetMultimapBuilder
  name: MultimapBuilder.SortedSetMultimapBuilder<K0,V0>
  nameWithType: MultimapBuilder.SortedSetMultimapBuilder<K0,V0>
  fullName: com.azure.cosmos.implementation.guava25.collect.MultimapBuilder.SortedSetMultimapBuilder<K0,V0>
- uid: java.lang.Object
  name: Object
  nameWithType: Object
  fullName: java.lang.Object
- uid: java.lang.Comparable
  name: Comparable
  nameWithType: Comparable
  fullName: java.lang.Comparable
- uid: java.util.Comparator
  name: Comparator
  nameWithType: Comparator
  fullName: java.util.Comparator
- uid: java.lang.Class
  name: Class
  nameWithType: Class
  fullName: java.lang.Class
- uid: K,V
  name: K,V
  nameWithType: K,V
  fullName: K,V
- uid: com.azure.cosmos.implementation.guava25.collect.Multimap
  name: Multimap
  nameWithType: Multimap
  fullName: com.azure.cosmos.implementation.guava25.collect.Multimap
- uid: '? extends K,? extends V'
  name: '? extends K,? extends V'
  nameWithType: '? extends K,? extends V'
  fullName: '? extends K,? extends V'
