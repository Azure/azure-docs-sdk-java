### YamlMime:ManagedReference
items:
- uid: com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap
  id: PropertySerializerMap
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.impl
  children:
  - com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap.PropertySerializerMap(boolean)
  - com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap.PropertySerializerMap(com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap)
  - com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap.SerializerAndMapResult
  - com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap._resetWhenFull
  - com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap.addSerializer(com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.JsonSerializer<java.lang.Object>)
  - com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap.addSerializer(java.lang.Class<?>,com.fasterxml.jackson.databind.JsonSerializer<java.lang.Object>)
  - com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap.emptyForProperties()
  - com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap.emptyForRootValues()
  - com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap.emptyMap()
  - com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap.findAndAddKeySerializer(java.lang.Class<?>,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.BeanProperty)
  - com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap.findAndAddPrimarySerializer(com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.BeanProperty)
  - com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap.findAndAddPrimarySerializer(java.lang.Class<?>,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.BeanProperty)
  - com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap.findAndAddRootValueSerializer(com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.SerializerProvider)
  - com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap.findAndAddRootValueSerializer(java.lang.Class<?>,com.fasterxml.jackson.databind.SerializerProvider)
  - com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap.findAndAddSecondarySerializer(com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.BeanProperty)
  - com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap.findAndAddSecondarySerializer(java.lang.Class<?>,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.BeanProperty)
  - com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap.newWith(java.lang.Class<?>,com.fasterxml.jackson.databind.JsonSerializer<java.lang.Object>)
  - com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap.serializerFor(java.lang.Class<?>)
  langs:
  - java
  name: PropertySerializerMap
  nameWithType: PropertySerializerMap
  fullName: com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap
  type: Class
  package: com.fasterxml.jackson.databind.ser.impl
  summary: 'Helper container used for resolving serializers for dynamic (possibly but not necessarily polymorphic) properties: properties whose type is not forced to use dynamic (declared) type and that are not final. If so, serializer to use can only be established once actual value type is known. Since this happens a lot unless static typing is forced (or types are final) this implementation is optimized for efficiency. Instances are immutable; new instances are created with factory methods: this is important to ensure correct multi-threaded access.'
  syntax:
    content: public abstract class PropertySerializerMap
  inheritance:
  - java.lang.Object
  inheritedMembers:
  - java.lang.Object.clone()
  - java.lang.Object.equals(java.lang.Object)
  - java.lang.Object.finalize()
  - java.lang.Object.getClass()
  - java.lang.Object.hashCode()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.toString()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
- uid: com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap.PropertySerializerMap(boolean)
  id: PropertySerializerMap(boolean)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap
  langs:
  - java
  name: PropertySerializerMap(boolean resetWhenFull)
  nameWithType: PropertySerializerMap.PropertySerializerMap(boolean resetWhenFull)
  fullName: com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap.PropertySerializerMap(boolean resetWhenFull)
  overload: com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap.PropertySerializerMap*
  type: Constructor
  package: com.fasterxml.jackson.databind.ser.impl
  syntax:
    content: protected PropertySerializerMap(boolean resetWhenFull)
    parameters:
    - id: resetWhenFull
      type: boolean
- uid: com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap.PropertySerializerMap(com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap)
  id: PropertySerializerMap(com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap
  langs:
  - java
  name: PropertySerializerMap(PropertySerializerMap base)
  nameWithType: PropertySerializerMap.PropertySerializerMap(PropertySerializerMap base)
  fullName: com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap.PropertySerializerMap(PropertySerializerMap base)
  overload: com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap.PropertySerializerMap*
  type: Constructor
  package: com.fasterxml.jackson.databind.ser.impl
  syntax:
    content: protected PropertySerializerMap(PropertySerializerMap base)
    parameters:
    - id: base
      type: com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap
- uid: com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap._resetWhenFull
  id: _resetWhenFull
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap
  langs:
  - java
  name: _resetWhenFull
  nameWithType: PropertySerializerMap._resetWhenFull
  fullName: com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap._resetWhenFull
  type: Field
  package: com.fasterxml.jackson.databind.ser.impl
  summary: 'Configuration setting that determines what happens when maximum size (currently 8) is reached: if true, will "start from beginning"; if false, will simply stop adding new entries.'
  syntax:
    content: protected final boolean _resetWhenFull
    return:
      type: boolean
- uid: com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap.addSerializer(com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.JsonSerializer<java.lang.Object>)
  id: addSerializer(com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.JsonSerializer<java.lang.Object>)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap
  langs:
  - java
  name: addSerializer(JavaType type, JsonSerializer<Object> serializer)
  nameWithType: PropertySerializerMap.addSerializer(JavaType type, JsonSerializer<Object> serializer)
  fullName: com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap.addSerializer(JavaType type, JsonSerializer<Object> serializer)
  overload: com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap.addSerializer*
  type: Method
  package: com.fasterxml.jackson.databind.ser.impl
  syntax:
    content: public final PropertySerializerMap.SerializerAndMapResult addSerializer(JavaType type, JsonSerializer<Object> serializer)
    parameters:
    - id: type
      type: com.fasterxml.jackson.databind.JavaType
    - id: serializer
      type: com.fasterxml.jackson.databind.JsonSerializer<java.lang.Object>
    return:
      type: com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap.SerializerAndMapResult
- uid: com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap.addSerializer(java.lang.Class<?>,com.fasterxml.jackson.databind.JsonSerializer<java.lang.Object>)
  id: addSerializer(java.lang.Class<?>,com.fasterxml.jackson.databind.JsonSerializer<java.lang.Object>)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap
  langs:
  - java
  name: addSerializer(Class<?> type, JsonSerializer<Object> serializer)
  nameWithType: PropertySerializerMap.addSerializer(Class<?> type, JsonSerializer<Object> serializer)
  fullName: com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap.addSerializer(Class<?> type, JsonSerializer<Object> serializer)
  overload: com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap.addSerializer*
  type: Method
  package: com.fasterxml.jackson.databind.ser.impl
  summary: Method that can be used to 'register' a serializer that caller has resolved without help of this map.
  syntax:
    content: public final PropertySerializerMap.SerializerAndMapResult addSerializer(Class<?> type, JsonSerializer<Object> serializer)
    parameters:
    - id: type
      type: java.lang.Class<?>
    - id: serializer
      type: com.fasterxml.jackson.databind.JsonSerializer<java.lang.Object>
    return:
      type: com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap.SerializerAndMapResult
- uid: com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap.emptyForProperties()
  id: emptyForProperties()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap
  langs:
  - java
  name: emptyForProperties()
  nameWithType: PropertySerializerMap.emptyForProperties()
  fullName: com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap.emptyForProperties()
  overload: com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap.emptyForProperties*
  type: Method
  package: com.fasterxml.jackson.databind.ser.impl
  syntax:
    content: public static PropertySerializerMap emptyForProperties()
    return:
      type: com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap
- uid: com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap.emptyForRootValues()
  id: emptyForRootValues()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap
  langs:
  - java
  name: emptyForRootValues()
  nameWithType: PropertySerializerMap.emptyForRootValues()
  fullName: com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap.emptyForRootValues()
  overload: com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap.emptyForRootValues*
  type: Method
  package: com.fasterxml.jackson.databind.ser.impl
  syntax:
    content: public static PropertySerializerMap emptyForRootValues()
    return:
      type: com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap
- uid: com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap.emptyMap()
  id: emptyMap()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap
  langs:
  - java
  name: emptyMap()
  nameWithType: PropertySerializerMap.emptyMap()
  fullName: com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap.emptyMap()
  overload: com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap.emptyMap*
  type: Method
  package: com.fasterxml.jackson.databind.ser.impl
  syntax:
    content: public static PropertySerializerMap emptyMap()
    return:
      type: com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap
- uid: com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap.findAndAddKeySerializer(java.lang.Class<?>,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.BeanProperty)
  id: findAndAddKeySerializer(java.lang.Class<?>,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.BeanProperty)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap
  langs:
  - java
  name: findAndAddKeySerializer(Class<?> type, SerializerProvider provider, BeanProperty property)
  nameWithType: PropertySerializerMap.findAndAddKeySerializer(Class<?> type, SerializerProvider provider, BeanProperty property)
  fullName: com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap.findAndAddKeySerializer(Class<?> type, SerializerProvider provider, BeanProperty property)
  overload: com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap.findAndAddKeySerializer*
  type: Method
  package: com.fasterxml.jackson.databind.ser.impl
  summary: Method called if initial lookup fails, when looking for a key serializer (possible attached indirectly to a property) Will both find serializer and construct new map instance if warranted, and return both.
  syntax:
    content: public final PropertySerializerMap.SerializerAndMapResult findAndAddKeySerializer(Class<?> type, SerializerProvider provider, BeanProperty property)
    parameters:
    - id: type
      type: java.lang.Class<?>
    - id: provider
      type: com.fasterxml.jackson.databind.SerializerProvider
    - id: property
      type: com.fasterxml.jackson.databind.BeanProperty
    return:
      type: com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap.SerializerAndMapResult
  exceptions:
  - type: com.fasterxml.jackson.databind.JsonMappingException
- uid: com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap.findAndAddPrimarySerializer(com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.BeanProperty)
  id: findAndAddPrimarySerializer(com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.BeanProperty)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap
  langs:
  - java
  name: findAndAddPrimarySerializer(JavaType type, SerializerProvider provider, BeanProperty property)
  nameWithType: PropertySerializerMap.findAndAddPrimarySerializer(JavaType type, SerializerProvider provider, BeanProperty property)
  fullName: com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap.findAndAddPrimarySerializer(JavaType type, SerializerProvider provider, BeanProperty property)
  overload: com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap.findAndAddPrimarySerializer*
  type: Method
  package: com.fasterxml.jackson.databind.ser.impl
  syntax:
    content: public final PropertySerializerMap.SerializerAndMapResult findAndAddPrimarySerializer(JavaType type, SerializerProvider provider, BeanProperty property)
    parameters:
    - id: type
      type: com.fasterxml.jackson.databind.JavaType
    - id: provider
      type: com.fasterxml.jackson.databind.SerializerProvider
    - id: property
      type: com.fasterxml.jackson.databind.BeanProperty
    return:
      type: com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap.SerializerAndMapResult
  exceptions:
  - type: com.fasterxml.jackson.databind.JsonMappingException
- uid: com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap.findAndAddPrimarySerializer(java.lang.Class<?>,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.BeanProperty)
  id: findAndAddPrimarySerializer(java.lang.Class<?>,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.BeanProperty)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap
  langs:
  - java
  name: findAndAddPrimarySerializer(Class<?> type, SerializerProvider provider, BeanProperty property)
  nameWithType: PropertySerializerMap.findAndAddPrimarySerializer(Class<?> type, SerializerProvider provider, BeanProperty property)
  fullName: com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap.findAndAddPrimarySerializer(Class<?> type, SerializerProvider provider, BeanProperty property)
  overload: com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap.findAndAddPrimarySerializer*
  type: Method
  package: com.fasterxml.jackson.databind.ser.impl
  summary: Method called if initial lookup fails, when looking for a primary serializer (one that is directly attached to a property). Will both find serializer and construct new map instance if warranted, and return both.
  syntax:
    content: public final PropertySerializerMap.SerializerAndMapResult findAndAddPrimarySerializer(Class<?> type, SerializerProvider provider, BeanProperty property)
    parameters:
    - id: type
      type: java.lang.Class<?>
    - id: provider
      type: com.fasterxml.jackson.databind.SerializerProvider
    - id: property
      type: com.fasterxml.jackson.databind.BeanProperty
    return:
      type: com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap.SerializerAndMapResult
  exceptions:
  - type: com.fasterxml.jackson.databind.JsonMappingException
- uid: com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap.findAndAddRootValueSerializer(com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.SerializerProvider)
  id: findAndAddRootValueSerializer(com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.SerializerProvider)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap
  langs:
  - java
  name: findAndAddRootValueSerializer(JavaType type, SerializerProvider provider)
  nameWithType: PropertySerializerMap.findAndAddRootValueSerializer(JavaType type, SerializerProvider provider)
  fullName: com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap.findAndAddRootValueSerializer(JavaType type, SerializerProvider provider)
  overload: com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap.findAndAddRootValueSerializer*
  type: Method
  package: com.fasterxml.jackson.databind.ser.impl
  syntax:
    content: public final PropertySerializerMap.SerializerAndMapResult findAndAddRootValueSerializer(JavaType type, SerializerProvider provider)
    parameters:
    - id: type
      type: com.fasterxml.jackson.databind.JavaType
    - id: provider
      type: com.fasterxml.jackson.databind.SerializerProvider
    return:
      type: com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap.SerializerAndMapResult
  exceptions:
  - type: com.fasterxml.jackson.databind.JsonMappingException
- uid: com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap.findAndAddRootValueSerializer(java.lang.Class<?>,com.fasterxml.jackson.databind.SerializerProvider)
  id: findAndAddRootValueSerializer(java.lang.Class<?>,com.fasterxml.jackson.databind.SerializerProvider)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap
  langs:
  - java
  name: findAndAddRootValueSerializer(Class<?> type, SerializerProvider provider)
  nameWithType: PropertySerializerMap.findAndAddRootValueSerializer(Class<?> type, SerializerProvider provider)
  fullName: com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap.findAndAddRootValueSerializer(Class<?> type, SerializerProvider provider)
  overload: com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap.findAndAddRootValueSerializer*
  type: Method
  package: com.fasterxml.jackson.databind.ser.impl
  summary: 'Method called if initial lookup fails, when looking for a root value serializer: one that is not directly attached to a property, but needs to have <xref uid="com.fasterxml.jackson.databind.jsontype.TypeSerializer" data-throw-if-not-resolved="false">com.fasterxml.jackson.databind.jsontype.TypeSerializer</xref> wrapped around it. Will both find the serializer and construct new map instance if warranted, and return both.'
  syntax:
    content: public final PropertySerializerMap.SerializerAndMapResult findAndAddRootValueSerializer(Class<?> type, SerializerProvider provider)
    parameters:
    - id: type
      type: java.lang.Class<?>
    - id: provider
      type: com.fasterxml.jackson.databind.SerializerProvider
    return:
      type: com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap.SerializerAndMapResult
  exceptions:
  - type: com.fasterxml.jackson.databind.JsonMappingException
- uid: com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap.findAndAddSecondarySerializer(com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.BeanProperty)
  id: findAndAddSecondarySerializer(com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.BeanProperty)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap
  langs:
  - java
  name: findAndAddSecondarySerializer(JavaType type, SerializerProvider provider, BeanProperty property)
  nameWithType: PropertySerializerMap.findAndAddSecondarySerializer(JavaType type, SerializerProvider provider, BeanProperty property)
  fullName: com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap.findAndAddSecondarySerializer(JavaType type, SerializerProvider provider, BeanProperty property)
  overload: com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap.findAndAddSecondarySerializer*
  type: Method
  package: com.fasterxml.jackson.databind.ser.impl
  syntax:
    content: public final PropertySerializerMap.SerializerAndMapResult findAndAddSecondarySerializer(JavaType type, SerializerProvider provider, BeanProperty property)
    parameters:
    - id: type
      type: com.fasterxml.jackson.databind.JavaType
    - id: provider
      type: com.fasterxml.jackson.databind.SerializerProvider
    - id: property
      type: com.fasterxml.jackson.databind.BeanProperty
    return:
      type: com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap.SerializerAndMapResult
  exceptions:
  - type: com.fasterxml.jackson.databind.JsonMappingException
- uid: com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap.findAndAddSecondarySerializer(java.lang.Class<?>,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.BeanProperty)
  id: findAndAddSecondarySerializer(java.lang.Class<?>,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.BeanProperty)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap
  langs:
  - java
  name: findAndAddSecondarySerializer(Class<?> type, SerializerProvider provider, BeanProperty property)
  nameWithType: PropertySerializerMap.findAndAddSecondarySerializer(Class<?> type, SerializerProvider provider, BeanProperty property)
  fullName: com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap.findAndAddSecondarySerializer(Class<?> type, SerializerProvider provider, BeanProperty property)
  overload: com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap.findAndAddSecondarySerializer*
  type: Method
  package: com.fasterxml.jackson.databind.ser.impl
  summary: Method called if initial lookup fails, when looking for a non-primary serializer (one that is not directly attached to a property). Will both find serializer and construct new map instance if warranted, and return both.
  syntax:
    content: public final PropertySerializerMap.SerializerAndMapResult findAndAddSecondarySerializer(Class<?> type, SerializerProvider provider, BeanProperty property)
    parameters:
    - id: type
      type: java.lang.Class<?>
    - id: provider
      type: com.fasterxml.jackson.databind.SerializerProvider
    - id: property
      type: com.fasterxml.jackson.databind.BeanProperty
    return:
      type: com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap.SerializerAndMapResult
  exceptions:
  - type: com.fasterxml.jackson.databind.JsonMappingException
- uid: com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap.newWith(java.lang.Class<?>,com.fasterxml.jackson.databind.JsonSerializer<java.lang.Object>)
  id: newWith(java.lang.Class<?>,com.fasterxml.jackson.databind.JsonSerializer<java.lang.Object>)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap
  langs:
  - java
  name: newWith(Class<?> type, JsonSerializer<Object> serializer)
  nameWithType: PropertySerializerMap.newWith(Class<?> type, JsonSerializer<Object> serializer)
  fullName: com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap.newWith(Class<?> type, JsonSerializer<Object> serializer)
  overload: com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap.newWith*
  type: Method
  package: com.fasterxml.jackson.databind.ser.impl
  syntax:
    content: public abstract PropertySerializerMap newWith(Class<?> type, JsonSerializer<Object> serializer)
    parameters:
    - id: type
      type: java.lang.Class<?>
    - id: serializer
      type: com.fasterxml.jackson.databind.JsonSerializer<java.lang.Object>
    return:
      type: com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap
- uid: com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap.serializerFor(java.lang.Class<?>)
  id: serializerFor(java.lang.Class<?>)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap
  langs:
  - java
  name: serializerFor(Class<?> type)
  nameWithType: PropertySerializerMap.serializerFor(Class<?> type)
  fullName: com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap.serializerFor(Class<?> type)
  overload: com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap.serializerFor*
  type: Method
  package: com.fasterxml.jackson.databind.ser.impl
  summary: Main lookup method. Takes a "raw" type since usage is always from place where parameterization is fixed such that there cannot be type-parametric variations.
  syntax:
    content: public abstract JsonSerializer<Object> serializerFor(Class<?> type)
    parameters:
    - id: type
      type: java.lang.Class<?>
    return:
      type: com.fasterxml.jackson.databind.JsonSerializer<java.lang.Object>
references:
- uid: boolean
  spec.java:
  - uid: boolean
    name: boolean
    fullName: boolean
- uid: com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap.PropertySerializerMap*
  name: PropertySerializerMap
  nameWithType: PropertySerializerMap.PropertySerializerMap
  fullName: com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap.PropertySerializerMap
  package: com.fasterxml.jackson.databind.ser.impl
- uid: java.lang.Class<?>
  spec.java:
  - uid: java.lang.Class
    name: Class
    fullName: java.lang.Class
  - name: <
    fullName: <
  - uid: '?'
    name: '?'
    fullName: '?'
  - name: '>'
    fullName: '>'
- uid: com.fasterxml.jackson.databind.JsonSerializer<java.lang.Object>
  spec.java:
  - uid: com.fasterxml.jackson.databind.JsonSerializer
    name: JsonSerializer
    fullName: com.fasterxml.jackson.databind.JsonSerializer
  - name: <
    fullName: <
  - uid: java.lang.Object
    name: Object
    fullName: java.lang.Object
  - name: '>'
    fullName: '>'
- uid: com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap.serializerFor*
  name: serializerFor
  nameWithType: PropertySerializerMap.serializerFor
  fullName: com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap.serializerFor
  package: com.fasterxml.jackson.databind.ser.impl
- uid: com.fasterxml.jackson.databind.JsonMappingException
  name: JsonMappingException
  nameWithType: JsonMappingException
  fullName: com.fasterxml.jackson.databind.JsonMappingException
- uid: com.fasterxml.jackson.databind.SerializerProvider
  name: SerializerProvider
  nameWithType: SerializerProvider
  fullName: com.fasterxml.jackson.databind.SerializerProvider
- uid: com.fasterxml.jackson.databind.BeanProperty
  name: BeanProperty
  nameWithType: BeanProperty
  fullName: com.fasterxml.jackson.databind.BeanProperty
- uid: com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap.SerializerAndMapResult
  name: PropertySerializerMap.SerializerAndMapResult
  nameWithType: PropertySerializerMap.SerializerAndMapResult
  fullName: com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap.SerializerAndMapResult
- uid: com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap.findAndAddPrimarySerializer*
  name: findAndAddPrimarySerializer
  nameWithType: PropertySerializerMap.findAndAddPrimarySerializer
  fullName: com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap.findAndAddPrimarySerializer
  package: com.fasterxml.jackson.databind.ser.impl
- uid: com.fasterxml.jackson.databind.JavaType
  name: JavaType
  nameWithType: JavaType
  fullName: com.fasterxml.jackson.databind.JavaType
- uid: com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap.findAndAddSecondarySerializer*
  name: findAndAddSecondarySerializer
  nameWithType: PropertySerializerMap.findAndAddSecondarySerializer
  fullName: com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap.findAndAddSecondarySerializer
  package: com.fasterxml.jackson.databind.ser.impl
- uid: com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap.findAndAddRootValueSerializer*
  name: findAndAddRootValueSerializer
  nameWithType: PropertySerializerMap.findAndAddRootValueSerializer
  fullName: com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap.findAndAddRootValueSerializer
  package: com.fasterxml.jackson.databind.ser.impl
- uid: com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap.findAndAddKeySerializer*
  name: findAndAddKeySerializer
  nameWithType: PropertySerializerMap.findAndAddKeySerializer
  fullName: com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap.findAndAddKeySerializer
  package: com.fasterxml.jackson.databind.ser.impl
- uid: com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap.addSerializer*
  name: addSerializer
  nameWithType: PropertySerializerMap.addSerializer
  fullName: com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap.addSerializer
  package: com.fasterxml.jackson.databind.ser.impl
- uid: com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap.newWith*
  name: newWith
  nameWithType: PropertySerializerMap.newWith
  fullName: com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap.newWith
  package: com.fasterxml.jackson.databind.ser.impl
- uid: com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap.emptyMap*
  name: emptyMap
  nameWithType: PropertySerializerMap.emptyMap
  fullName: com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap.emptyMap
  package: com.fasterxml.jackson.databind.ser.impl
- uid: com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap.emptyForProperties*
  name: emptyForProperties
  nameWithType: PropertySerializerMap.emptyForProperties
  fullName: com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap.emptyForProperties
  package: com.fasterxml.jackson.databind.ser.impl
- uid: com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap.emptyForRootValues*
  name: emptyForRootValues
  nameWithType: PropertySerializerMap.emptyForRootValues
  fullName: com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap.emptyForRootValues
  package: com.fasterxml.jackson.databind.ser.impl
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: java.lang.Object.finalize()
  name: Object.finalize()
  nameWithType: Object.finalize()
  fullName: java.lang.Object.finalize()
- uid: java.lang.Object.clone()
  name: Object.clone()
  nameWithType: Object.clone()
  fullName: java.lang.Object.clone()
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: java.lang.Object.equals(java.lang.Object)
  name: Object.equals(Object)
  nameWithType: Object.equals(Object)
  fullName: java.lang.Object.equals(java.lang.Object)
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.lang.Object.hashCode()
  name: Object.hashCode()
  nameWithType: Object.hashCode()
  fullName: java.lang.Object.hashCode()
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: java.lang.Object.toString()
  name: Object.toString()
  nameWithType: Object.toString()
  fullName: java.lang.Object.toString()
- uid: java.lang.Class
  name: Class
  nameWithType: Class
  fullName: java.lang.Class
- uid: '?'
  name: '?'
  nameWithType: '?'
  fullName: '?'
- uid: com.fasterxml.jackson.databind.JsonSerializer
  name: JsonSerializer
  nameWithType: JsonSerializer
  fullName: com.fasterxml.jackson.databind.JsonSerializer
- uid: java.lang.Object
  name: Object
  nameWithType: Object
  fullName: java.lang.Object
