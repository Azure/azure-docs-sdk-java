### YamlMime:ManagedReference
items:
- uid: com.fasterxml.jackson.annotation.JsonIgnore
  id: JsonIgnore
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.annotation
  children:
  - com.fasterxml.jackson.annotation.JsonIgnore.value()
  langs:
  - java
  name: JsonIgnore
  nameWithType: JsonIgnore
  fullName: com.fasterxml.jackson.annotation.JsonIgnore
  type: Interface
  package: com.fasterxml.jackson.annotation
  summary: >-
    Marker annotation that indicates that the logical property that the accessor (field, getter/setter method or Creator parameter \[of <xref uid="com.fasterxml.jackson.annotation.JsonCreator" data-throw-if-not-resolved="false">JsonCreator</xref>\-annotated constructor or factory method\]) is to be ignored by introspection-based serialization and deserialization functionality.


    Annotation only needs to be added to one of the accessors (often getter method, but may be setter, field or creator parameter), if the complete removal of the property is desired. However: if only particular accessor is to be ignored (for example, when ignoring one of potentially conflicting setter methods), this can be done by annotating other not-to-be-ignored accessors with <xref uid="com.fasterxml.jackson.annotation.JsonProperty" data-throw-if-not-resolved="false">JsonProperty</xref> (or its equivalents). This is considered so-called "split property" case and allows definitions of "read-only" (read from input into POJO) and "write-only" (write in output but ignore on output)

    NOTE! As Jackson 2.6, there is a new and improved way to define \`read-only\` and \`write-only\` properties, using <xref uid="com.fasterxml.jackson.annotation.JsonProperty.access()" data-throw-if-not-resolved="false">JsonProperty#access()</xref> annotation: this is recommended over use of separate `JsonIgnore` and <xref uid="com.fasterxml.jackson.annotation.JsonProperty" data-throw-if-not-resolved="false">JsonProperty</xref> annotations.


    For example, a "getter" method that would otherwise denote a property (like, say, "getValue" to suggest property "value") to serialize, would be ignored and no such property would be output unless another annotation defines alternative method to use.


    When ignoring the whole property, the default behavior if encountering such property in input is to ignore it without exception; but if there is a <xref uid="com.fasterxml.jackson.annotation.JsonAnySetter" data-throw-if-not-resolved="false">JsonAnySetter</xref> it will be called instead. Either way, no exception will be thrown.


    Annotation is usually used just a like a marker annotation, that is, without explicitly defining 'value' argument (which defaults to `true`): but argument can be explicitly defined. This can be done to override an existing \`JsonIgnore\` by explicitly defining one with 'false' argument: either in a sub-class, or by using "mix-in annotations".
  syntax:
    content: public interface JsonIgnore implements Annotation
  implements:
  - java.lang.annotation.Annotation
- uid: com.fasterxml.jackson.annotation.JsonIgnore.value()
  id: value()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.annotation.JsonIgnore
  langs:
  - java
  name: value()
  nameWithType: JsonIgnore.value()
  fullName: com.fasterxml.jackson.annotation.JsonIgnore.value()
  overload: com.fasterxml.jackson.annotation.JsonIgnore.value*
  type: Method
  package: com.fasterxml.jackson.annotation
  summary: Optional argument that defines whether this annotation is active or not. The only use for value 'false' if for overriding purposes (which is not needed often); most likely it is needed for use with "mix-in annotations" (aka "annotation overrides"). For most cases, however, default value of "true" is just fine and should be omitted.
  syntax:
    content: public abstract boolean value()
    return:
      type: boolean
      description: >-
        True if annotation is enabled (normal case); false if it is to
           be ignored (only useful for mix-in annotations to "mask" annotation)
references:
- uid: boolean
  spec.java:
  - uid: boolean
    name: boolean
    fullName: boolean
- uid: com.fasterxml.jackson.annotation.JsonIgnore.value*
  name: value
  nameWithType: JsonIgnore.value
  fullName: com.fasterxml.jackson.annotation.JsonIgnore.value
  package: com.fasterxml.jackson.annotation
- uid: java.lang.annotation.Annotation
  name: Annotation
  nameWithType: Annotation
  fullName: java.lang.annotation.Annotation
