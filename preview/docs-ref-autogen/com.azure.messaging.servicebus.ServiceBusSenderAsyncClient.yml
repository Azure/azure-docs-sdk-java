### YamlMime:ManagedReference
items:
- uid: "com.azure.messaging.servicebus.ServiceBusSenderAsyncClient"
  id: "ServiceBusSenderAsyncClient"
  parent: "com.azure.messaging.servicebus"
  children:
  - "com.azure.messaging.servicebus.ServiceBusSenderAsyncClient.MAX_MESSAGE_LENGTH_BYTES"
  - "com.azure.messaging.servicebus.ServiceBusSenderAsyncClient.ServiceBusSenderAsyncClient(java.lang.String,com.azure.messaging.servicebus.implementation.MessagingEntityType,com.azure.messaging.servicebus.implementation.ServiceBusConnectionProcessor,com.azure.core.amqp.AmqpRetryOptions,com.azure.core.amqp.implementation.TracerProvider,com.azure.core.amqp.implementation.MessageSerializer,java.lang.Runnable)"
  - "com.azure.messaging.servicebus.ServiceBusSenderAsyncClient.cancelScheduledMessage(long)"
  - "com.azure.messaging.servicebus.ServiceBusSenderAsyncClient.close()"
  - "com.azure.messaging.servicebus.ServiceBusSenderAsyncClient.createBatch()"
  - "com.azure.messaging.servicebus.ServiceBusSenderAsyncClient.createBatch(com.azure.messaging.servicebus.models.CreateBatchOptions)"
  - "com.azure.messaging.servicebus.ServiceBusSenderAsyncClient.getEntityPath()"
  - "com.azure.messaging.servicebus.ServiceBusSenderAsyncClient.getFullyQualifiedNamespace()"
  - "com.azure.messaging.servicebus.ServiceBusSenderAsyncClient.scheduleMessage(com.azure.messaging.servicebus.ServiceBusMessage,java.time.Instant)"
  - "com.azure.messaging.servicebus.ServiceBusSenderAsyncClient.send(com.azure.messaging.servicebus.ServiceBusMessage)"
  - "com.azure.messaging.servicebus.ServiceBusSenderAsyncClient.send(com.azure.messaging.servicebus.ServiceBusMessage,java.lang.String)"
  - "com.azure.messaging.servicebus.ServiceBusSenderAsyncClient.send(com.azure.messaging.servicebus.ServiceBusMessageBatch)"
  langs:
  - "java"
  name: "ServiceBusSenderAsyncClient"
  nameWithType: "ServiceBusSenderAsyncClient"
  fullName: "com.azure.messaging.servicebus.ServiceBusSenderAsyncClient"
  type: "Class"
  package: "com.azure.messaging.servicebus"
  summary: "An **asynchronous** client to send messages to a Service Bus resource.\n\n**Create an instance of sender**\n\n```java\n// The required parameter is a way to authenticate with Service Bus using credentials.\n // The connectionString provides a way to authenticate with Service Bus.\n ServiceBusSenderAsyncClient sender = new ServiceBusClientBuilder()\n     .connectionString(\n         \"Endpoint={fully-qualified-namespace};SharedAccessKeyName={policy-name};SharedAccessKey={key}\")\n     .sender()\n     .queueName(\"<< QUEUE NAME >>\")\n     .buildAsyncClient();\n```\n\n**Create an instance of sender using default credential**\n\n```java\n// The required parameter is a way to authenticate with Service Bus using credentials.\n // The connectionString provides a way to authenticate with Service Bus.\n ServiceBusSenderAsyncClient sender = new ServiceBusClientBuilder()\n     .credential(\"<<fully-qualified-namespace>>\",\n         new DefaultAzureCredentialBuilder().build())\n     .sender()\n     .queueName(\"<< QUEUE NAME >>\")\n     .buildAsyncClient();\n```\n\n**Send messages to a Service Bus resource**\n\n```java\n// The required parameter is a way to authenticate with Service Bus using credentials.\n // The connectionString provides a way to authenticate with Service Bus.\n ServiceBusSenderAsyncClient sender = new ServiceBusClientBuilder()\n     .connectionString(\n         \"Endpoint={fully-qualified-namespace};SharedAccessKeyName={policy-name};SharedAccessKey={key}\")\n     .sender()\n     .queueName(\"<QUEUE OR TOPIC NAME>\")\n     .buildAsyncClient();\n \n // Creating a batch without options set, will allow for automatic routing of events to any partition.\n sender.createBatch().flatMap(batch -> {\n     batch.tryAdd(new ServiceBusMessage(\"test-1\".getBytes(UTF_8)));\n     batch.tryAdd(new ServiceBusMessage(\"test-2\".getBytes(UTF_8)));\n     return sender.send(batch);\n }).subscribe(unused -> {\n },\n     error -> System.err.println(\"Error occurred while sending batch:\" + error),\n     () -> System.out.println(\"Send complete.\"));\n```\n\n**Send messages using a size-limited <xref uid=\"com.azure.messaging.servicebus.ServiceBusMessageBatch\" data-throw-if-not-resolved=\"false\">ServiceBusMessageBatch</xref> to a Service Bus resource**\n\n```java\nfinal Flux<ServiceBusMessage> telemetryMessages = Flux.just(firstMessage, secondMessage);\n \n // Setting `setMaximumSizeInBytes` when creating a batch, limits the size of that batch.\n // In this case, all the batches created with these options are limited to 256 bytes.\n final CreateBatchOptions options = new CreateBatchOptions()\n     .setMaximumSizeInBytes(256);\n final AtomicReference<ServiceBusMessageBatch> currentBatch = new AtomicReference<>(\n     sender.createBatch(options).block());\n \n // The sample Flux contains two messages, but it could be an infinite stream of telemetry messages.\n telemetryMessages.flatMap(message -> {\n     final ServiceBusMessageBatch batch = currentBatch.get();\n     if (batch.tryAdd(message)) {\n         return Mono.empty();\n     }\n \n     return Mono.when(\n         sender.send(batch),\n         sender.createBatch(options).map(newBatch -> {\n             currentBatch.set(newBatch);\n \n             // Add the message that did not fit in the previous batch.\n             if (!newBatch.tryAdd(message)) {\n                 throw Exceptions.propagate(new IllegalArgumentException(\n                     \"Message was too large to fit in an empty batch. Max size: \" + newBatch.getMaxSizeInBytes()));\n             }\n \n             return newBatch;\n         }));\n }).then()\n     .doFinally(signal -> {\n         final ServiceBusMessageBatch batch = currentBatch.getAndSet(null);\n         if (batch != null && batch.getCount() > 0) {\n             sender.send(batch).block();\n         }\n     });\n```"
  syntax:
    content: "public final class ServiceBusSenderAsyncClient implements AutoCloseable"
  inheritance:
  - "java.lang.Object"
  implements:
  - "java.lang.AutoCloseable"
  inheritedMembers:
  - "java.lang.Object.clone()"
  - "java.lang.Object.equals(java.lang.Object)"
  - "java.lang.Object.finalize()"
  - "java.lang.Object.getClass()"
  - "java.lang.Object.hashCode()"
  - "java.lang.Object.notify()"
  - "java.lang.Object.notifyAll()"
  - "java.lang.Object.toString()"
  - "java.lang.Object.wait()"
  - "java.lang.Object.wait(long)"
  - "java.lang.Object.wait(long,int)"
- uid: "com.azure.messaging.servicebus.ServiceBusSenderAsyncClient.MAX_MESSAGE_LENGTH_BYTES"
  id: "MAX_MESSAGE_LENGTH_BYTES"
  parent: "com.azure.messaging.servicebus.ServiceBusSenderAsyncClient"
  langs:
  - "java"
  name: "MAX_MESSAGE_LENGTH_BYTES"
  nameWithType: "ServiceBusSenderAsyncClient.MAX_MESSAGE_LENGTH_BYTES"
  fullName: "com.azure.messaging.servicebus.ServiceBusSenderAsyncClient.MAX_MESSAGE_LENGTH_BYTES"
  type: "Field"
  package: "com.azure.messaging.servicebus"
  summary: "The default maximum allowable size, in bytes, for a batch to be sent."
  syntax:
    content: "static final int MAX_MESSAGE_LENGTH_BYTES"
    return:
      type: "int"
- uid: "com.azure.messaging.servicebus.ServiceBusSenderAsyncClient.ServiceBusSenderAsyncClient(java.lang.String,com.azure.messaging.servicebus.implementation.MessagingEntityType,com.azure.messaging.servicebus.implementation.ServiceBusConnectionProcessor,com.azure.core.amqp.AmqpRetryOptions,com.azure.core.amqp.implementation.TracerProvider,com.azure.core.amqp.implementation.MessageSerializer,java.lang.Runnable)"
  id: "ServiceBusSenderAsyncClient(java.lang.String,com.azure.messaging.servicebus.implementation.MessagingEntityType,com.azure.messaging.servicebus.implementation.ServiceBusConnectionProcessor,com.azure.core.amqp.AmqpRetryOptions,com.azure.core.amqp.implementation.TracerProvider,com.azure.core.amqp.implementation.MessageSerializer,java.lang.Runnable)"
  parent: "com.azure.messaging.servicebus.ServiceBusSenderAsyncClient"
  langs:
  - "java"
  name: "ServiceBusSenderAsyncClient(String entityName, MessagingEntityType entityType, ServiceBusConnectionProcessor connectionProcessor, AmqpRetryOptions retryOptions, TracerProvider tracerProvider, MessageSerializer messageSerializer, Runnable onClientClose)"
  nameWithType: "ServiceBusSenderAsyncClient.ServiceBusSenderAsyncClient(String entityName, MessagingEntityType entityType, ServiceBusConnectionProcessor connectionProcessor, AmqpRetryOptions retryOptions, TracerProvider tracerProvider, MessageSerializer messageSerializer, Runnable onClientClose)"
  fullName: "com.azure.messaging.servicebus.ServiceBusSenderAsyncClient.ServiceBusSenderAsyncClient(String entityName, MessagingEntityType entityType, ServiceBusConnectionProcessor connectionProcessor, AmqpRetryOptions retryOptions, TracerProvider tracerProvider, MessageSerializer messageSerializer, Runnable onClientClose)"
  overload: "com.azure.messaging.servicebus.ServiceBusSenderAsyncClient.ServiceBusSenderAsyncClient*"
  type: "Constructor"
  package: "com.azure.messaging.servicebus"
  summary: "Creates a new instance of this <xref uid=\"com.azure.messaging.servicebus.ServiceBusSenderAsyncClient\" data-throw-if-not-resolved=\"false\">ServiceBusSenderAsyncClient</xref> that sends messages to a Service Bus entity."
  syntax:
    content: " ServiceBusSenderAsyncClient(String entityName, MessagingEntityType entityType, ServiceBusConnectionProcessor connectionProcessor, AmqpRetryOptions retryOptions, TracerProvider tracerProvider, MessageSerializer messageSerializer, Runnable onClientClose)"
    parameters:
    - id: "entityName"
      type: "java.lang.String"
    - id: "entityType"
      type: "com.azure.messaging.servicebus.implementation.MessagingEntityType"
    - id: "connectionProcessor"
      type: "com.azure.messaging.servicebus.implementation.ServiceBusConnectionProcessor"
    - id: "retryOptions"
      type: "com.azure.core.amqp.AmqpRetryOptions"
    - id: "tracerProvider"
      type: "com.azure.core.amqp.implementation.TracerProvider"
    - id: "messageSerializer"
      type: "com.azure.core.amqp.implementation.MessageSerializer"
    - id: "onClientClose"
      type: "java.lang.Runnable"
- uid: "com.azure.messaging.servicebus.ServiceBusSenderAsyncClient.cancelScheduledMessage(long)"
  id: "cancelScheduledMessage(long)"
  parent: "com.azure.messaging.servicebus.ServiceBusSenderAsyncClient"
  langs:
  - "java"
  name: "cancelScheduledMessage(long sequenceNumber)"
  nameWithType: "ServiceBusSenderAsyncClient.cancelScheduledMessage(long sequenceNumber)"
  fullName: "com.azure.messaging.servicebus.ServiceBusSenderAsyncClient.cancelScheduledMessage(long sequenceNumber)"
  overload: "com.azure.messaging.servicebus.ServiceBusSenderAsyncClient.cancelScheduledMessage*"
  type: "Method"
  package: "com.azure.messaging.servicebus"
  summary: "Cancels the enqueuing of an already scheduled message, if it was not already enqueued."
  syntax:
    content: "public Mono<Void> cancelScheduledMessage(long sequenceNumber)"
    parameters:
    - id: "sequenceNumber"
      type: "long"
      description: "of the scheduled message to cancel."
    return:
      type: "reactor.core.publisher.Mono<java.lang.Void>"
      description: "The <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\">Mono</xref> that finishes this operation on service bus resource."
- uid: "com.azure.messaging.servicebus.ServiceBusSenderAsyncClient.close()"
  id: "close()"
  parent: "com.azure.messaging.servicebus.ServiceBusSenderAsyncClient"
  langs:
  - "java"
  name: "close()"
  nameWithType: "ServiceBusSenderAsyncClient.close()"
  fullName: "com.azure.messaging.servicebus.ServiceBusSenderAsyncClient.close()"
  overload: "com.azure.messaging.servicebus.ServiceBusSenderAsyncClient.close*"
  type: "Method"
  package: "com.azure.messaging.servicebus"
  summary: "Disposes of the <xref uid=\"com.azure.messaging.servicebus.ServiceBusSenderAsyncClient\" data-throw-if-not-resolved=\"false\">ServiceBusSenderAsyncClient</xref>. If the client had a dedicated connection, the underlying connection is also closed."
  syntax:
    content: "public void close()"
- uid: "com.azure.messaging.servicebus.ServiceBusSenderAsyncClient.createBatch()"
  id: "createBatch()"
  parent: "com.azure.messaging.servicebus.ServiceBusSenderAsyncClient"
  langs:
  - "java"
  name: "createBatch()"
  nameWithType: "ServiceBusSenderAsyncClient.createBatch()"
  fullName: "com.azure.messaging.servicebus.ServiceBusSenderAsyncClient.createBatch()"
  overload: "com.azure.messaging.servicebus.ServiceBusSenderAsyncClient.createBatch*"
  type: "Method"
  package: "com.azure.messaging.servicebus"
  summary: "Creates a <xref uid=\"com.azure.messaging.servicebus.ServiceBusMessageBatch\" data-throw-if-not-resolved=\"false\">ServiceBusMessageBatch</xref> that can fit as many messages as the transport allows."
  syntax:
    content: "public Mono<ServiceBusMessageBatch> createBatch()"
    return:
      type: "reactor.core.publisher.Mono<com.azure.messaging.servicebus.ServiceBusMessageBatch>"
      description: "A <xref uid=\"com.azure.messaging.servicebus.ServiceBusMessageBatch\" data-throw-if-not-resolved=\"false\">ServiceBusMessageBatch</xref> that can fit as many messages as the transport allows."
- uid: "com.azure.messaging.servicebus.ServiceBusSenderAsyncClient.createBatch(com.azure.messaging.servicebus.models.CreateBatchOptions)"
  id: "createBatch(com.azure.messaging.servicebus.models.CreateBatchOptions)"
  parent: "com.azure.messaging.servicebus.ServiceBusSenderAsyncClient"
  langs:
  - "java"
  name: "createBatch(CreateBatchOptions options)"
  nameWithType: "ServiceBusSenderAsyncClient.createBatch(CreateBatchOptions options)"
  fullName: "com.azure.messaging.servicebus.ServiceBusSenderAsyncClient.createBatch(CreateBatchOptions options)"
  overload: "com.azure.messaging.servicebus.ServiceBusSenderAsyncClient.createBatch*"
  type: "Method"
  package: "com.azure.messaging.servicebus"
  summary: "Creates an <xref uid=\"com.azure.messaging.servicebus.ServiceBusMessageBatch\" data-throw-if-not-resolved=\"false\">ServiceBusMessageBatch</xref> configured with the options specified."
  syntax:
    content: "public Mono<ServiceBusMessageBatch> createBatch(CreateBatchOptions options)"
    parameters:
    - id: "options"
      type: "com.azure.messaging.servicebus.models.CreateBatchOptions"
      description: "A set of options used to configure the <xref uid=\"com.azure.messaging.servicebus.ServiceBusMessageBatch\" data-throw-if-not-resolved=\"false\">ServiceBusMessageBatch</xref>."
    return:
      type: "reactor.core.publisher.Mono<com.azure.messaging.servicebus.ServiceBusMessageBatch>"
      description: "A new <xref uid=\"com.azure.messaging.servicebus.ServiceBusMessageBatch\" data-throw-if-not-resolved=\"false\">ServiceBusMessageBatch</xref> configured with the given options."
- uid: "com.azure.messaging.servicebus.ServiceBusSenderAsyncClient.getEntityPath()"
  id: "getEntityPath()"
  parent: "com.azure.messaging.servicebus.ServiceBusSenderAsyncClient"
  langs:
  - "java"
  name: "getEntityPath()"
  nameWithType: "ServiceBusSenderAsyncClient.getEntityPath()"
  fullName: "com.azure.messaging.servicebus.ServiceBusSenderAsyncClient.getEntityPath()"
  overload: "com.azure.messaging.servicebus.ServiceBusSenderAsyncClient.getEntityPath*"
  type: "Method"
  package: "com.azure.messaging.servicebus"
  summary: "Gets the name of the Service Bus resource."
  syntax:
    content: "public String getEntityPath()"
    return:
      type: "java.lang.String"
      description: "The name of the Service Bus resource."
- uid: "com.azure.messaging.servicebus.ServiceBusSenderAsyncClient.getFullyQualifiedNamespace()"
  id: "getFullyQualifiedNamespace()"
  parent: "com.azure.messaging.servicebus.ServiceBusSenderAsyncClient"
  langs:
  - "java"
  name: "getFullyQualifiedNamespace()"
  nameWithType: "ServiceBusSenderAsyncClient.getFullyQualifiedNamespace()"
  fullName: "com.azure.messaging.servicebus.ServiceBusSenderAsyncClient.getFullyQualifiedNamespace()"
  overload: "com.azure.messaging.servicebus.ServiceBusSenderAsyncClient.getFullyQualifiedNamespace*"
  type: "Method"
  package: "com.azure.messaging.servicebus"
  summary: "Gets the fully qualified namespace."
  syntax:
    content: "public String getFullyQualifiedNamespace()"
    return:
      type: "java.lang.String"
      description: "The fully qualified namespace."
- uid: "com.azure.messaging.servicebus.ServiceBusSenderAsyncClient.scheduleMessage(com.azure.messaging.servicebus.ServiceBusMessage,java.time.Instant)"
  id: "scheduleMessage(com.azure.messaging.servicebus.ServiceBusMessage,java.time.Instant)"
  parent: "com.azure.messaging.servicebus.ServiceBusSenderAsyncClient"
  langs:
  - "java"
  name: "scheduleMessage(ServiceBusMessage message, Instant scheduledEnqueueTime)"
  nameWithType: "ServiceBusSenderAsyncClient.scheduleMessage(ServiceBusMessage message, Instant scheduledEnqueueTime)"
  fullName: "com.azure.messaging.servicebus.ServiceBusSenderAsyncClient.scheduleMessage(ServiceBusMessage message, Instant scheduledEnqueueTime)"
  overload: "com.azure.messaging.servicebus.ServiceBusSenderAsyncClient.scheduleMessage*"
  type: "Method"
  package: "com.azure.messaging.servicebus"
  summary: "Sends a scheduled message to the Azure Service Bus entity this sender is connected to. A scheduled message is enqueued and made available to receivers only at the scheduled enqueue time."
  syntax:
    content: "public Mono<Long> scheduleMessage(ServiceBusMessage message, Instant scheduledEnqueueTime)"
    parameters:
    - id: "message"
      type: "com.azure.messaging.servicebus.ServiceBusMessage"
      description: "Message to be sent to the Service Bus Queue."
    - id: "scheduledEnqueueTime"
      type: "java.time.Instant"
      description: "Instant at which the message should appear in the Service Bus queue or topic."
    return:
      type: "reactor.core.publisher.Mono<java.lang.Long>"
      description: "The sequence number of the scheduled message which can be used to cancel the scheduling of the message."
- uid: "com.azure.messaging.servicebus.ServiceBusSenderAsyncClient.send(com.azure.messaging.servicebus.ServiceBusMessage)"
  id: "send(com.azure.messaging.servicebus.ServiceBusMessage)"
  parent: "com.azure.messaging.servicebus.ServiceBusSenderAsyncClient"
  langs:
  - "java"
  name: "send(ServiceBusMessage message)"
  nameWithType: "ServiceBusSenderAsyncClient.send(ServiceBusMessage message)"
  fullName: "com.azure.messaging.servicebus.ServiceBusSenderAsyncClient.send(ServiceBusMessage message)"
  overload: "com.azure.messaging.servicebus.ServiceBusSenderAsyncClient.send*"
  type: "Method"
  package: "com.azure.messaging.servicebus"
  summary: "Sends a message to a Service Bus queue or topic."
  syntax:
    content: "public Mono<Void> send(ServiceBusMessage message)"
    parameters:
    - id: "message"
      type: "com.azure.messaging.servicebus.ServiceBusMessage"
      description: "Message to be sent to Service Bus queue or topic."
    return:
      type: "reactor.core.publisher.Mono<java.lang.Void>"
      description: "The <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\">Mono</xref> the finishes this operation on service bus resource."
- uid: "com.azure.messaging.servicebus.ServiceBusSenderAsyncClient.send(com.azure.messaging.servicebus.ServiceBusMessage,java.lang.String)"
  id: "send(com.azure.messaging.servicebus.ServiceBusMessage,java.lang.String)"
  parent: "com.azure.messaging.servicebus.ServiceBusSenderAsyncClient"
  langs:
  - "java"
  name: "send(ServiceBusMessage message, String sessionId)"
  nameWithType: "ServiceBusSenderAsyncClient.send(ServiceBusMessage message, String sessionId)"
  fullName: "com.azure.messaging.servicebus.ServiceBusSenderAsyncClient.send(ServiceBusMessage message, String sessionId)"
  overload: "com.azure.messaging.servicebus.ServiceBusSenderAsyncClient.send*"
  type: "Method"
  package: "com.azure.messaging.servicebus"
  summary: "Sends a message to a Service Bus queue or topic."
  syntax:
    content: "public Mono<Void> send(ServiceBusMessage message, String sessionId)"
    parameters:
    - id: "message"
      type: "com.azure.messaging.servicebus.ServiceBusMessage"
      description: "Message to be sent to Service Bus queue or topic."
    - id: "sessionId"
      type: "java.lang.String"
      description: "the session id to associate with the message."
    return:
      type: "reactor.core.publisher.Mono<java.lang.Void>"
      description: "A <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\">Mono</xref> the finishes this operation on service bus resource."
- uid: "com.azure.messaging.servicebus.ServiceBusSenderAsyncClient.send(com.azure.messaging.servicebus.ServiceBusMessageBatch)"
  id: "send(com.azure.messaging.servicebus.ServiceBusMessageBatch)"
  parent: "com.azure.messaging.servicebus.ServiceBusSenderAsyncClient"
  langs:
  - "java"
  name: "send(ServiceBusMessageBatch batch)"
  nameWithType: "ServiceBusSenderAsyncClient.send(ServiceBusMessageBatch batch)"
  fullName: "com.azure.messaging.servicebus.ServiceBusSenderAsyncClient.send(ServiceBusMessageBatch batch)"
  overload: "com.azure.messaging.servicebus.ServiceBusSenderAsyncClient.send*"
  type: "Method"
  package: "com.azure.messaging.servicebus"
  summary: "Sends a message batch to the Azure Service Bus entity this sender is connected to."
  syntax:
    content: "public Mono<Void> send(ServiceBusMessageBatch batch)"
    parameters:
    - id: "batch"
      type: "com.azure.messaging.servicebus.ServiceBusMessageBatch"
      description: "of messages which allows client to send maximum allowed size for a batch of messages."
    return:
      type: "reactor.core.publisher.Mono<java.lang.Void>"
      description: "A <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\">Mono</xref> the finishes this operation on service bus resource."
references:
- uid: "java.lang.String"
  spec.java:
  - uid: "java.lang.String"
    name: "String"
    fullName: "java.lang.String"
- uid: "com.azure.messaging.servicebus.implementation.MessagingEntityType"
  name: "MessagingEntityType"
  nameWithType: "MessagingEntityType"
  fullName: "com.azure.messaging.servicebus.implementation.MessagingEntityType"
- uid: "com.azure.messaging.servicebus.implementation.ServiceBusConnectionProcessor"
  name: "ServiceBusConnectionProcessor"
  nameWithType: "ServiceBusConnectionProcessor"
  fullName: "com.azure.messaging.servicebus.implementation.ServiceBusConnectionProcessor"
- uid: "com.azure.core.amqp.AmqpRetryOptions"
  spec.java:
  - uid: "com.azure.core.amqp.AmqpRetryOptions"
    name: "AmqpRetryOptions"
    fullName: "com.azure.core.amqp.AmqpRetryOptions"
- uid: "com.azure.core.amqp.implementation.TracerProvider"
  spec.java:
  - uid: "com.azure.core.amqp.implementation.TracerProvider"
    name: "TracerProvider"
    fullName: "com.azure.core.amqp.implementation.TracerProvider"
- uid: "com.azure.core.amqp.implementation.MessageSerializer"
  spec.java:
  - uid: "com.azure.core.amqp.implementation.MessageSerializer"
    name: "MessageSerializer"
    fullName: "com.azure.core.amqp.implementation.MessageSerializer"
- uid: "java.lang.Runnable"
  spec.java:
  - uid: "java.lang.Runnable"
    name: "Runnable"
    fullName: "java.lang.Runnable"
- uid: "com.azure.messaging.servicebus.ServiceBusSenderAsyncClient.ServiceBusSenderAsyncClient*"
  name: "ServiceBusSenderAsyncClient"
  nameWithType: "ServiceBusSenderAsyncClient.ServiceBusSenderAsyncClient"
  fullName: "com.azure.messaging.servicebus.ServiceBusSenderAsyncClient.ServiceBusSenderAsyncClient"
  package: "com.azure.messaging.servicebus"
- uid: "com.azure.messaging.servicebus.ServiceBusSenderAsyncClient.getFullyQualifiedNamespace*"
  name: "getFullyQualifiedNamespace"
  nameWithType: "ServiceBusSenderAsyncClient.getFullyQualifiedNamespace"
  fullName: "com.azure.messaging.servicebus.ServiceBusSenderAsyncClient.getFullyQualifiedNamespace"
  package: "com.azure.messaging.servicebus"
- uid: "com.azure.messaging.servicebus.ServiceBusSenderAsyncClient.getEntityPath*"
  name: "getEntityPath"
  nameWithType: "ServiceBusSenderAsyncClient.getEntityPath"
  fullName: "com.azure.messaging.servicebus.ServiceBusSenderAsyncClient.getEntityPath"
  package: "com.azure.messaging.servicebus"
- uid: "com.azure.messaging.servicebus.ServiceBusMessage"
  name: "ServiceBusMessage"
  nameWithType: "ServiceBusMessage"
  fullName: "com.azure.messaging.servicebus.ServiceBusMessage"
- uid: "reactor.core.publisher.Mono<java.lang.Void>"
  spec.java:
  - uid: "reactor.core.publisher.Mono"
    name: "Mono"
    fullName: "reactor.core.publisher.Mono"
  - name: "<"
    fullName: "<"
  - uid: "java.lang.Void"
    name: "Void"
    fullName: "java.lang.Void"
  - name: ">"
    fullName: ">"
- uid: "com.azure.messaging.servicebus.ServiceBusSenderAsyncClient.send*"
  name: "send"
  nameWithType: "ServiceBusSenderAsyncClient.send"
  fullName: "com.azure.messaging.servicebus.ServiceBusSenderAsyncClient.send"
  package: "com.azure.messaging.servicebus"
- uid: "reactor.core.publisher.Mono<com.azure.messaging.servicebus.ServiceBusMessageBatch>"
  spec.java:
  - uid: "reactor.core.publisher.Mono"
    name: "Mono"
    fullName: "reactor.core.publisher.Mono"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.messaging.servicebus.ServiceBusMessageBatch"
    name: "ServiceBusMessageBatch"
    fullName: "com.azure.messaging.servicebus.ServiceBusMessageBatch"
  - name: ">"
    fullName: ">"
- uid: "com.azure.messaging.servicebus.ServiceBusSenderAsyncClient.createBatch*"
  name: "createBatch"
  nameWithType: "ServiceBusSenderAsyncClient.createBatch"
  fullName: "com.azure.messaging.servicebus.ServiceBusSenderAsyncClient.createBatch"
  package: "com.azure.messaging.servicebus"
- uid: "com.azure.messaging.servicebus.models.CreateBatchOptions"
  name: "CreateBatchOptions"
  nameWithType: "CreateBatchOptions"
  fullName: "com.azure.messaging.servicebus.models.CreateBatchOptions"
- uid: "com.azure.messaging.servicebus.ServiceBusMessageBatch"
  name: "ServiceBusMessageBatch"
  nameWithType: "ServiceBusMessageBatch"
  fullName: "com.azure.messaging.servicebus.ServiceBusMessageBatch"
- uid: "java.time.Instant"
  spec.java:
  - uid: "java.time.Instant"
    name: "Instant"
    fullName: "java.time.Instant"
- uid: "reactor.core.publisher.Mono<java.lang.Long>"
  spec.java:
  - uid: "reactor.core.publisher.Mono"
    name: "Mono"
    fullName: "reactor.core.publisher.Mono"
  - name: "<"
    fullName: "<"
  - uid: "java.lang.Long"
    name: "Long"
    fullName: "java.lang.Long"
  - name: ">"
    fullName: ">"
- uid: "com.azure.messaging.servicebus.ServiceBusSenderAsyncClient.scheduleMessage*"
  name: "scheduleMessage"
  nameWithType: "ServiceBusSenderAsyncClient.scheduleMessage"
  fullName: "com.azure.messaging.servicebus.ServiceBusSenderAsyncClient.scheduleMessage"
  package: "com.azure.messaging.servicebus"
- uid: "long"
  spec.java:
  - uid: "long"
    name: "long"
    fullName: "long"
- uid: "com.azure.messaging.servicebus.ServiceBusSenderAsyncClient.cancelScheduledMessage*"
  name: "cancelScheduledMessage"
  nameWithType: "ServiceBusSenderAsyncClient.cancelScheduledMessage"
  fullName: "com.azure.messaging.servicebus.ServiceBusSenderAsyncClient.cancelScheduledMessage"
  package: "com.azure.messaging.servicebus"
- uid: "com.azure.messaging.servicebus.ServiceBusSenderAsyncClient.close*"
  name: "close"
  nameWithType: "ServiceBusSenderAsyncClient.close"
  fullName: "com.azure.messaging.servicebus.ServiceBusSenderAsyncClient.close"
  package: "com.azure.messaging.servicebus"
- uid: "int"
  spec.java:
  - uid: "int"
    name: "int"
    fullName: "int"
- uid: "java.lang.AutoCloseable"
  name: "AutoCloseable"
  nameWithType: "AutoCloseable"
  fullName: "java.lang.AutoCloseable"
- uid: "java.lang.Object.notify()"
  name: "Object.notify()"
  nameWithType: "Object.notify()"
  fullName: "java.lang.Object.notify()"
- uid: "java.lang.Object.wait()"
  name: "Object.wait()"
  nameWithType: "Object.wait()"
  fullName: "java.lang.Object.wait()"
- uid: "java.lang.Object.finalize()"
  name: "Object.finalize()"
  nameWithType: "Object.finalize()"
  fullName: "java.lang.Object.finalize()"
- uid: "java.lang.Object.clone()"
  name: "Object.clone()"
  nameWithType: "Object.clone()"
  fullName: "java.lang.Object.clone()"
- uid: "java.lang.Object.notifyAll()"
  name: "Object.notifyAll()"
  nameWithType: "Object.notifyAll()"
  fullName: "java.lang.Object.notifyAll()"
- uid: "java.lang.Object.equals(java.lang.Object)"
  name: "Object.equals(Object)"
  nameWithType: "Object.equals(Object)"
  fullName: "java.lang.Object.equals(java.lang.Object)"
- uid: "java.lang.Object.getClass()"
  name: "Object.getClass()"
  nameWithType: "Object.getClass()"
  fullName: "java.lang.Object.getClass()"
- uid: "java.lang.Object.wait(long)"
  name: "Object.wait(long)"
  nameWithType: "Object.wait(long)"
  fullName: "java.lang.Object.wait(long)"
- uid: "java.lang.Object.hashCode()"
  name: "Object.hashCode()"
  nameWithType: "Object.hashCode()"
  fullName: "java.lang.Object.hashCode()"
- uid: "java.lang.Object.wait(long,int)"
  name: "Object.wait(long,int)"
  nameWithType: "Object.wait(long,int)"
  fullName: "java.lang.Object.wait(long,int)"
- uid: "java.lang.Object.toString()"
  name: "Object.toString()"
  nameWithType: "Object.toString()"
  fullName: "java.lang.Object.toString()"
- uid: "com.azure.messaging.servicebus.ServiceBusSenderAsyncClient.AmqpMessageCollector"
  name: "ServiceBusSenderAsyncClient.AmqpMessageCollector"
  nameWithType: "ServiceBusSenderAsyncClient.AmqpMessageCollector"
  fullName: "com.azure.messaging.servicebus.ServiceBusSenderAsyncClient.AmqpMessageCollector"
- uid: "java.lang.Void"
  name: "Void"
  nameWithType: "Void"
  fullName: "java.lang.Void"
- uid: "reactor.core.publisher.Mono"
  name: "Mono"
  nameWithType: "Mono"
  fullName: "reactor.core.publisher.Mono"
- uid: "java.lang.Long"
  name: "Long"
  nameWithType: "Long"
  fullName: "java.lang.Long"
