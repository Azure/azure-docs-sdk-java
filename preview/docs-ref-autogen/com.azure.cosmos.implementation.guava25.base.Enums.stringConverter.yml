### YamlMime:JavaMember
uid: "com.azure.cosmos.implementation.guava25.base.Enums.stringConverter*"
fullName: "com.azure.cosmos.implementation.guava25.base.Enums.<T>stringConverter"
name: "<T>stringConverter"
nameWithType: "Enums.<T>stringConverter"
members:
- uid: "com.azure.cosmos.implementation.guava25.base.Enums.<T>stringConverter(java.lang.Class<T>)"
  fullName: "com.azure.cosmos.implementation.guava25.base.Enums.<T>stringConverter(Class<T> enumClass)"
  name: "<T>stringConverter(Class<T> enumClass)"
  nameWithType: "Enums.<T>stringConverter(Class<T> enumClass)"
  summary: "Returns a converter that converts between strings and `enum` values of type `enumClass` using <xref uid=\"java.lang.Enum.valueOf*\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Enum#valueOf(Class, String)\"></xref> and <xref uid=\"java.lang.Enum.name()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Enum#name()\"></xref>. The converter will throw an `IllegalArgumentException` if the argument is not the name of any enum constant in the specified enum."
  parameters:
  - name: "enumClass"
    type: "<xref href=\"java.lang.Class?alt=java.lang.Class&text=Class\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public static Converter<String,T> <T>stringConverter(Class<T> enumClass)"
  returns:
    type: "<xref href=\"com.azure.cosmos.implementation.guava25.base.Converter?alt=com.azure.cosmos.implementation.guava25.base.Converter&text=Converter\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />,<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
type: "method"
metadata: {}
package: "com.azure.cosmos.implementation.guava25.base"
artifact: com.azure:azure-cosmos:4.4.0-beta.1
