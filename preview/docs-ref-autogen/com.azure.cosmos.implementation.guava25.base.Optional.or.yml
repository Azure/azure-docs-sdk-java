### YamlMime:JavaMember
uid: "com.azure.cosmos.implementation.guava25.base.Optional.or*"
fullName: "com.azure.cosmos.implementation.guava25.base.Optional<T>.or"
name: "or"
nameWithType: "Optional<T>.or"
members:
- uid: "com.azure.cosmos.implementation.guava25.base.Optional.or(T)"
  fullName: "com.azure.cosmos.implementation.guava25.base.Optional<T>.or(T defaultValue)"
  name: "or(T defaultValue)"
  nameWithType: "Optional<T>.or(T defaultValue)"
  summary: "Returns the contained instance if it is present; `defaultValue` otherwise. If no default value should be required because the instance is known to be present, use <xref uid=\"com.azure.cosmos.implementation.guava25.base.Optional.get()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#get()\"></xref> instead. For a default value of `null`, use <xref uid=\"? extends com.azure.cosmos.implementation.guava25.base.Optional.orNull\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#orNull\"></xref>.\n\nNote about generics: The signature `public T or(T defaultValue)` is overly restrictive. However, the ideal signature, `public S or(S)`~~, is not legal Java. As a result, some sensible operations involving subtypes are compile errors:~~ \n\n```java\nOptional optionalInt = getSomeOptionalInt();\n Number value = optionalInt.or(0.5); // error\n\n FluentIterable numbers = getSomeNumbers();\n Optional first = numbers.first();\n Number value = first.or(0.5); // error\n```\n\nAs a workaround, it is always safe to cast an `Optional` to `Optional`. Casting either of the above example `Optional` instances to `Optional` (where `Number` is the desired output type) solves the problem:\n\n```java\nOptional optionalInt = (Optional) getSomeOptionalInt();\n Number value = optionalInt.or(0.5); // fine\n\n FluentIterable numbers = getSomeNumbers();\n Optional first = (Optional) numbers.first();\n Number value = first.or(0.5); // fine\n```\n\n**Comparison to `java.util.Optional`:** this method is similar to Java 8's `Optional.orElse`, but will not accept `null` as a `defaultValue` (<xref uid=\"? extends com.azure.cosmos.implementation.guava25.base.Optional.orNull\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#orNull\"></xref> must be used instead). As a result, the value returned by this method is guaranteed non-null, which is not the case for the `java.util` equivalent."
  parameters:
  - name: "defaultValue"
    type: "<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract T or(T defaultValue)"
  returns:
    type: "<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.cosmos.implementation.guava25.base.Optional.or(com.azure.cosmos.implementation.guava25.base.Optional<? extends T>)"
  fullName: "com.azure.cosmos.implementation.guava25.base.Optional<T>.or(Optional<? extends T> secondChoice)"
  name: "or(Optional<? extends T> secondChoice)"
  nameWithType: "Optional<T>.or(Optional<? extends T> secondChoice)"
  summary: "Returns this `Optional` if it has a value present; `secondChoice` otherwise.\n\n**Comparison to `java.util.Optional`:** this method has no equivalent in Java 8's `Optional` class; write `thisOptional.isPresent() ? thisOptional : secondChoice` instead."
  parameters:
  - name: "secondChoice"
    type: "<xref href=\"com.azure.cosmos.implementation.guava25.base.Optional?alt=com.azure.cosmos.implementation.guava25.base.Optional&text=Optional\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"? extends T?alt=? extends T&text=? extends T\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public abstract Optional<T> or(Optional<? extends T> secondChoice)"
  returns:
    type: "<xref href=\"com.azure.cosmos.implementation.guava25.base.Optional?alt=com.azure.cosmos.implementation.guava25.base.Optional&text=Optional\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.cosmos.implementation.guava25.base.Optional.or(com.azure.cosmos.implementation.guava25.base.Supplier<? extends T>)"
  fullName: "com.azure.cosmos.implementation.guava25.base.Optional<T>.or(Supplier<? extends T> supplier)"
  name: "or(Supplier<? extends T> supplier)"
  nameWithType: "Optional<T>.or(Supplier<? extends T> supplier)"
  summary: "Returns the contained instance if it is present; `supplier.get()` otherwise.\n\n**Comparison to `java.util.Optional`:** this method is similar to Java 8's `Optional.orElseGet`, except when `supplier` returns `null`. In this case this method throws an exception, whereas the Java 8 method returns the `null` to the caller."
  parameters:
  - name: "supplier"
    type: "<xref href=\"com.azure.cosmos.implementation.guava25.base.Supplier?alt=com.azure.cosmos.implementation.guava25.base.Supplier&text=Supplier\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"? extends T?alt=? extends T&text=? extends T\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public abstract T or(Supplier<? extends T> supplier)"
  returns:
    type: "<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />"
type: "method"
metadata: {}
package: "com.azure.cosmos.implementation.guava25.base"
artifact: com.azure:azure-cosmos:4.4.0-beta.1
