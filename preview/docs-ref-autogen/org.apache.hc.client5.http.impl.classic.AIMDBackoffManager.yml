### YamlMime:ManagedReference
items:
- uid: org.apache.hc.client5.http.impl.classic.AIMDBackoffManager
  id: AIMDBackoffManager
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.apache.hc.client5.http.impl.classic
  children:
  - org.apache.hc.client5.http.impl.classic.AIMDBackoffManager.AIMDBackoffManager(org.apache.hc.core5.pool.ConnPoolControl<org.apache.hc.client5.http.HttpRoute>)
  - org.apache.hc.client5.http.impl.classic.AIMDBackoffManager.backOff(org.apache.hc.client5.http.HttpRoute)
  - org.apache.hc.client5.http.impl.classic.AIMDBackoffManager.probe(org.apache.hc.client5.http.HttpRoute)
  - org.apache.hc.client5.http.impl.classic.AIMDBackoffManager.setBackoffFactor(double)
  - org.apache.hc.client5.http.impl.classic.AIMDBackoffManager.setCoolDown(org.apache.hc.core5.util.TimeValue)
  - org.apache.hc.client5.http.impl.classic.AIMDBackoffManager.setPerHostConnectionCap(int)
  langs:
  - java
  name: AIMDBackoffManager
  nameWithType: AIMDBackoffManager
  fullName: org.apache.hc.client5.http.impl.classic.AIMDBackoffManager
  type: Class
  package: org.apache.hc.client5.http.impl.classic
  summary: >-
    The `AIMDBackoffManager` applies an additive increase, multiplicative decrease (AIMD) to managing a dynamic limit to the number of connections allowed to a given host. You may want to experiment with the settings for the cooldown periods and the backoff factor to get the adaptive behavior you want.


    Generally speaking, shorter cooldowns will lead to more steady-state variability but faster reaction times, while longer cooldowns will lead to more stable equilibrium behavior but slower reaction times.


    Similarly, higher backoff factors promote greater utilization of available capacity at the expense of fairness among clients. Lower backoff factors allow equal distribution of capacity among clients (fairness) to happen faster, at the expense of having more server capacity unused in the short term.
  syntax:
    content: public class AIMDBackoffManager implements BackoffManager
  inheritance:
  - java.lang.Object
  implements:
  - org.apache.hc.client5.http.classic.BackoffManager
  inheritedMembers:
  - java.lang.Object.clone()
  - java.lang.Object.equals(java.lang.Object)
  - java.lang.Object.finalize()
  - java.lang.Object.getClass()
  - java.lang.Object.hashCode()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.toString()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
- uid: org.apache.hc.client5.http.impl.classic.AIMDBackoffManager.AIMDBackoffManager(org.apache.hc.core5.pool.ConnPoolControl<org.apache.hc.client5.http.HttpRoute>)
  id: AIMDBackoffManager(org.apache.hc.core5.pool.ConnPoolControl<org.apache.hc.client5.http.HttpRoute>)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.apache.hc.client5.http.impl.classic.AIMDBackoffManager
  langs:
  - java
  name: AIMDBackoffManager(ConnPoolControl<HttpRoute> connPerRoute)
  nameWithType: AIMDBackoffManager.AIMDBackoffManager(ConnPoolControl<HttpRoute> connPerRoute)
  fullName: org.apache.hc.client5.http.impl.classic.AIMDBackoffManager.AIMDBackoffManager(ConnPoolControl<HttpRoute> connPerRoute)
  overload: org.apache.hc.client5.http.impl.classic.AIMDBackoffManager.AIMDBackoffManager*
  type: Constructor
  package: org.apache.hc.client5.http.impl.classic
  summary: Creates an `AIMDBackoffManager` to manage per-host connection pool sizes represented by the given <xref uid="org.apache.hc.core5.pool.ConnPoolControl" data-throw-if-not-resolved="false">ConnPoolControl</xref>.
  syntax:
    content: public AIMDBackoffManager(ConnPoolControl<HttpRoute> connPerRoute)
    parameters:
    - id: connPerRoute
      type: org.apache.hc.core5.pool.ConnPoolControl<org.apache.hc.client5.http.HttpRoute>
      description: >-
        per-host routing maximums to
           be managed
- uid: org.apache.hc.client5.http.impl.classic.AIMDBackoffManager.AIMDBackoffManager(org.apache.hc.core5.pool.ConnPoolControl<org.apache.hc.client5.http.HttpRoute>,org.apache.hc.client5.http.impl.classic.Clock)
  id: AIMDBackoffManager(org.apache.hc.core5.pool.ConnPoolControl<org.apache.hc.client5.http.HttpRoute>,org.apache.hc.client5.http.impl.classic.Clock)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.apache.hc.client5.http.impl.classic.AIMDBackoffManager
  langs:
  - java
  name: AIMDBackoffManager(ConnPoolControl<HttpRoute> connPerRoute, Clock clock)
  nameWithType: AIMDBackoffManager.AIMDBackoffManager(ConnPoolControl<HttpRoute> connPerRoute, Clock clock)
  fullName: org.apache.hc.client5.http.impl.classic.AIMDBackoffManager.AIMDBackoffManager(ConnPoolControl<HttpRoute> connPerRoute, Clock clock)
  overload: org.apache.hc.client5.http.impl.classic.AIMDBackoffManager.AIMDBackoffManager*
  type: Constructor
  package: org.apache.hc.client5.http.impl.classic
  syntax:
    content: " AIMDBackoffManager(ConnPoolControl<HttpRoute> connPerRoute, Clock clock)"
    parameters:
    - id: connPerRoute
      type: org.apache.hc.core5.pool.ConnPoolControl<org.apache.hc.client5.http.HttpRoute>
    - id: clock
      type: org.apache.hc.client5.http.impl.classic.Clock
- uid: org.apache.hc.client5.http.impl.classic.AIMDBackoffManager.backOff(org.apache.hc.client5.http.HttpRoute)
  id: backOff(org.apache.hc.client5.http.HttpRoute)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.apache.hc.client5.http.impl.classic.AIMDBackoffManager
  langs:
  - java
  name: backOff(HttpRoute route)
  nameWithType: AIMDBackoffManager.backOff(HttpRoute route)
  fullName: org.apache.hc.client5.http.impl.classic.AIMDBackoffManager.backOff(HttpRoute route)
  overload: org.apache.hc.client5.http.impl.classic.AIMDBackoffManager.backOff*
  type: Method
  package: org.apache.hc.client5.http.impl.classic
  summary: Called when we have decided that the result of using a connection should be interpreted as a backoff signal.
  syntax:
    content: public void backOff(HttpRoute route)
    parameters:
    - id: route
      type: org.apache.hc.client5.http.HttpRoute
- uid: org.apache.hc.client5.http.impl.classic.AIMDBackoffManager.probe(org.apache.hc.client5.http.HttpRoute)
  id: probe(org.apache.hc.client5.http.HttpRoute)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.apache.hc.client5.http.impl.classic.AIMDBackoffManager
  langs:
  - java
  name: probe(HttpRoute route)
  nameWithType: AIMDBackoffManager.probe(HttpRoute route)
  fullName: org.apache.hc.client5.http.impl.classic.AIMDBackoffManager.probe(HttpRoute route)
  overload: org.apache.hc.client5.http.impl.classic.AIMDBackoffManager.probe*
  type: Method
  package: org.apache.hc.client5.http.impl.classic
  summary: Called when we have determined that the result of using a connection has succeeded and that we may probe for more connections.
  syntax:
    content: public void probe(HttpRoute route)
    parameters:
    - id: route
      type: org.apache.hc.client5.http.HttpRoute
- uid: org.apache.hc.client5.http.impl.classic.AIMDBackoffManager.setBackoffFactor(double)
  id: setBackoffFactor(double)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.apache.hc.client5.http.impl.classic.AIMDBackoffManager
  langs:
  - java
  name: setBackoffFactor(double d)
  nameWithType: AIMDBackoffManager.setBackoffFactor(double d)
  fullName: org.apache.hc.client5.http.impl.classic.AIMDBackoffManager.setBackoffFactor(double d)
  overload: org.apache.hc.client5.http.impl.classic.AIMDBackoffManager.setBackoffFactor*
  type: Method
  package: org.apache.hc.client5.http.impl.classic
  summary: Sets the factor to use when backing off; the new per-host limit will be roughly the current max times this factor. `Math.floor` is applied in the case of non-integer outcomes to ensure we actually decrease the pool size. Pool sizes are never decreased below 1, however. Defaults to 0.5.
  syntax:
    content: public void setBackoffFactor(double d)
    parameters:
    - id: d
      type: double
      description: must be between 0.0 and 1.0, exclusive.
- uid: org.apache.hc.client5.http.impl.classic.AIMDBackoffManager.setCoolDown(org.apache.hc.core5.util.TimeValue)
  id: setCoolDown(org.apache.hc.core5.util.TimeValue)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.apache.hc.client5.http.impl.classic.AIMDBackoffManager
  langs:
  - java
  name: setCoolDown(TimeValue coolDown)
  nameWithType: AIMDBackoffManager.setCoolDown(TimeValue coolDown)
  fullName: org.apache.hc.client5.http.impl.classic.AIMDBackoffManager.setCoolDown(TimeValue coolDown)
  overload: org.apache.hc.client5.http.impl.classic.AIMDBackoffManager.setCoolDown*
  type: Method
  package: org.apache.hc.client5.http.impl.classic
  summary: Sets the amount of time to wait between adjustments in pool sizes for a given host, to allow enough time for the adjustments to take effect. Defaults to 5 seconds.
  syntax:
    content: public void setCoolDown(TimeValue coolDown)
    parameters:
    - id: coolDown
      type: org.apache.hc.core5.util.TimeValue
      description: must be positive
- uid: org.apache.hc.client5.http.impl.classic.AIMDBackoffManager.setPerHostConnectionCap(int)
  id: setPerHostConnectionCap(int)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.apache.hc.client5.http.impl.classic.AIMDBackoffManager
  langs:
  - java
  name: setPerHostConnectionCap(int cap)
  nameWithType: AIMDBackoffManager.setPerHostConnectionCap(int cap)
  fullName: org.apache.hc.client5.http.impl.classic.AIMDBackoffManager.setPerHostConnectionCap(int cap)
  overload: org.apache.hc.client5.http.impl.classic.AIMDBackoffManager.setPerHostConnectionCap*
  type: Method
  package: org.apache.hc.client5.http.impl.classic
  summary: Sets the absolute maximum per-host connection pool size to probe up to; defaults to 2 (the default per-host max).
  syntax:
    content: public void setPerHostConnectionCap(int cap)
    parameters:
    - id: cap
      type: int
      description: must be &gt;= 1
references:
- uid: org.apache.hc.core5.pool.ConnPoolControl<org.apache.hc.client5.http.HttpRoute>
  spec.java:
  - uid: org.apache.hc.core5.pool.ConnPoolControl
    name: ConnPoolControl
    fullName: org.apache.hc.core5.pool.ConnPoolControl
  - name: <
    fullName: <
  - uid: org.apache.hc.client5.http.HttpRoute
    name: HttpRoute
    fullName: org.apache.hc.client5.http.HttpRoute
  - name: '>'
    fullName: '>'
- uid: org.apache.hc.client5.http.impl.classic.AIMDBackoffManager.AIMDBackoffManager*
  name: AIMDBackoffManager
  nameWithType: AIMDBackoffManager.AIMDBackoffManager
  fullName: org.apache.hc.client5.http.impl.classic.AIMDBackoffManager.AIMDBackoffManager
  package: org.apache.hc.client5.http.impl.classic
- uid: org.apache.hc.client5.http.impl.classic.Clock
  spec.java:
  - uid: org.apache.hc.client5.http.impl.classic.Clock
    name: Clock
    fullName: org.apache.hc.client5.http.impl.classic.Clock
- uid: org.apache.hc.client5.http.HttpRoute
  name: HttpRoute
  nameWithType: HttpRoute
  fullName: org.apache.hc.client5.http.HttpRoute
- uid: org.apache.hc.client5.http.impl.classic.AIMDBackoffManager.backOff*
  name: backOff
  nameWithType: AIMDBackoffManager.backOff
  fullName: org.apache.hc.client5.http.impl.classic.AIMDBackoffManager.backOff
  package: org.apache.hc.client5.http.impl.classic
- uid: org.apache.hc.client5.http.impl.classic.AIMDBackoffManager.probe*
  name: probe
  nameWithType: AIMDBackoffManager.probe
  fullName: org.apache.hc.client5.http.impl.classic.AIMDBackoffManager.probe
  package: org.apache.hc.client5.http.impl.classic
- uid: double
  spec.java:
  - uid: double
    name: double
    fullName: double
- uid: org.apache.hc.client5.http.impl.classic.AIMDBackoffManager.setBackoffFactor*
  name: setBackoffFactor
  nameWithType: AIMDBackoffManager.setBackoffFactor
  fullName: org.apache.hc.client5.http.impl.classic.AIMDBackoffManager.setBackoffFactor
  package: org.apache.hc.client5.http.impl.classic
- uid: org.apache.hc.core5.util.TimeValue
  name: TimeValue
  nameWithType: TimeValue
  fullName: org.apache.hc.core5.util.TimeValue
- uid: org.apache.hc.client5.http.impl.classic.AIMDBackoffManager.setCoolDown*
  name: setCoolDown
  nameWithType: AIMDBackoffManager.setCoolDown
  fullName: org.apache.hc.client5.http.impl.classic.AIMDBackoffManager.setCoolDown
  package: org.apache.hc.client5.http.impl.classic
- uid: int
  spec.java:
  - uid: int
    name: int
    fullName: int
- uid: org.apache.hc.client5.http.impl.classic.AIMDBackoffManager.setPerHostConnectionCap*
  name: setPerHostConnectionCap
  nameWithType: AIMDBackoffManager.setPerHostConnectionCap
  fullName: org.apache.hc.client5.http.impl.classic.AIMDBackoffManager.setPerHostConnectionCap
  package: org.apache.hc.client5.http.impl.classic
- uid: org.apache.hc.client5.http.classic.BackoffManager
  name: BackoffManager
  nameWithType: BackoffManager
  fullName: org.apache.hc.client5.http.classic.BackoffManager
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: java.lang.Object.finalize()
  name: Object.finalize()
  nameWithType: Object.finalize()
  fullName: java.lang.Object.finalize()
- uid: java.lang.Object.clone()
  name: Object.clone()
  nameWithType: Object.clone()
  fullName: java.lang.Object.clone()
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: java.lang.Object.equals(java.lang.Object)
  name: Object.equals(Object)
  nameWithType: Object.equals(Object)
  fullName: java.lang.Object.equals(java.lang.Object)
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.lang.Object.hashCode()
  name: Object.hashCode()
  nameWithType: Object.hashCode()
  fullName: java.lang.Object.hashCode()
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: java.lang.Object.toString()
  name: Object.toString()
  nameWithType: Object.toString()
  fullName: java.lang.Object.toString()
- uid: org.apache.hc.core5.pool.ConnPoolControl
  name: ConnPoolControl
  nameWithType: ConnPoolControl
  fullName: org.apache.hc.core5.pool.ConnPoolControl
