### YamlMime:ManagedReference
items:
- uid: com.fasterxml.jackson.annotation.JsonValue
  id: JsonValue
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.annotation
  children:
  - com.fasterxml.jackson.annotation.JsonValue.value()
  langs:
  - java
  name: JsonValue
  nameWithType: JsonValue
  fullName: com.fasterxml.jackson.annotation.JsonValue
  type: Interface
  package: com.fasterxml.jackson.annotation
  summary: >-
    Marker annotation that indicates that the value of annotated accessor (either field or "getter" method \[a method with non-void return type, no args\]) is to be used as the single value to serialize for the instance, instead of the usual method of collecting properties of value. Usually value will be of a simple scalar type (String or Number), but it can be any serializable type (Collection, Map or Bean).


    At most one accessor of a `Class` can be annotated with this annotation; if more than one is found, an exception may be thrown. Also, if method signature of annotated method is not compatible with Getters, an exception may be thrown (whether exception is thrown or not is an implementation detail (due to filtering during introspection, some annotations may be skipped) and applications should not rely on specific behavior).


    A typical usage is that of annotating `toString()` method so that returned String value is used as the JSON serialization; and if deserialization is needed, there is matching constructor or factory method annotated with <xref uid="com.fasterxml.jackson.annotation.JsonCreator" data-throw-if-not-resolved="false">JsonCreator</xref> annotation.


    Boolean argument is only used so that sub-classes can "disable" annotation if necessary.


    NOTE: when use for Java `enum`s, one additional feature is that value returned by annotated method is also considered to be the value to deserialize from, not just JSON String to serialize as. This is possible since set of Enum values is constant and it is possible to define mapping, but can not be done in general for POJO types; as such, this is not used for POJO deserialization.
  syntax:
    content: public interface JsonValue implements Annotation
  implements:
  - java.lang.annotation.Annotation
- uid: com.fasterxml.jackson.annotation.JsonValue.value()
  id: value()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.annotation.JsonValue
  langs:
  - java
  name: value()
  nameWithType: JsonValue.value()
  fullName: com.fasterxml.jackson.annotation.JsonValue.value()
  overload: com.fasterxml.jackson.annotation.JsonValue.value*
  type: Method
  package: com.fasterxml.jackson.annotation
  summary: Optional argument that defines whether this annotation is active or not. The only use for value 'false' if for overriding purposes. Overriding may be necessary when used with "mix-in annotations" (aka "annotation overrides"). For most cases, however, default value of "true" is just fine and should be omitted.
  syntax:
    content: public abstract boolean value()
    return:
      type: boolean
references:
- uid: boolean
  spec.java:
  - uid: boolean
    name: boolean
    fullName: boolean
- uid: com.fasterxml.jackson.annotation.JsonValue.value*
  name: value
  nameWithType: JsonValue.value
  fullName: com.fasterxml.jackson.annotation.JsonValue.value
  package: com.fasterxml.jackson.annotation
- uid: java.lang.annotation.Annotation
  name: Annotation
  nameWithType: Annotation
  fullName: java.lang.annotation.Annotation
