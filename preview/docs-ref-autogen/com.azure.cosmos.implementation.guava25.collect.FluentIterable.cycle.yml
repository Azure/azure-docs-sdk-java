### YamlMime:JavaMember
uid: "com.azure.cosmos.implementation.guava25.collect.FluentIterable.cycle*"
fullName: "com.azure.cosmos.implementation.guava25.collect.FluentIterable<E>.cycle"
name: "cycle"
nameWithType: "FluentIterable<E>.cycle"
members:
- uid: "com.azure.cosmos.implementation.guava25.collect.FluentIterable.cycle()"
  fullName: "com.azure.cosmos.implementation.guava25.collect.FluentIterable<E>.cycle()"
  name: "cycle()"
  nameWithType: "FluentIterable<E>.cycle()"
  summary: "Returns a fluent iterable whose `Iterator` cycles indefinitely over the elements of this fluent iterable.\n\nThat iterator supports `remove()` if `iterable.iterator()` does. After `remove()` is called, subsequent cycles omit the removed element, which is no longer in this fluent iterable. The iterator's `hasNext()` method returns `true` until this fluent iterable is empty.\n\n**Warning:** Typical uses of the resulting iterator may produce an infinite loop. You should use an explicit `break` or be certain that you will eventually remove all the elements.\n\n**`Stream` equivalent:** if the source iterable has only a single element `e`, use `Stream.generate(() -> e)`. Otherwise, collect your stream into a collection and use `Stream.generate(() -> collection).flatMap(Collection::stream)`."
  syntax: "public final FluentIterable<E> cycle()"
  returns:
    type: "<xref href=\"com.azure.cosmos.implementation.guava25.collect.FluentIterable?alt=com.azure.cosmos.implementation.guava25.collect.FluentIterable&text=FluentIterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"E?alt=E&text=E\" data-throw-if-not-resolved=\"False\" />&gt;"
type: "method"
metadata: {}
package: "com.azure.cosmos.implementation.guava25.collect"
artifact: com.azure:azure-cosmos:4.4.0-beta.1
