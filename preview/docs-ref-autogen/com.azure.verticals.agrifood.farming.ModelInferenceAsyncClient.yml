### YamlMime:JavaType
uid: "com.azure.verticals.agrifood.farming.ModelInferenceAsyncClient"
fullName: "com.azure.verticals.agrifood.farming.ModelInferenceAsyncClient"
name: "ModelInferenceAsyncClient"
nameWithType: "ModelInferenceAsyncClient"
summary: "Initializes a new instance of the asynchronous Farm<wbr>Beats<wbr>Client type."
inheritances:
- "<xref href=\"java.lang.Object?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
inheritedClassMethods:
- classRef: "java.lang.<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html\">Object</a>"
  methodsRef:
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#clone--\">clone</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#equals-java.lang.Object-\">equals</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#finalize--\">finalize</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#getClass--\">getClass</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#hashCode--\">hashCode</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#notify--\">notify</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#notifyAll--\">notifyAll</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#toString--\">toString</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#wait--\">wait</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#wait-long-\">wait</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#wait-long-int-\">wait</a>"
syntax: "public final class **ModelInferenceAsyncClient**"
methods:
- uid: "com.azure.verticals.agrifood.farming.ModelInferenceAsyncClient.beginCreateBiomassModelJob(java.lang.String,com.azure.core.util.BinaryData,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.verticals.agrifood.farming.ModelInferenceAsyncClient.beginCreateBiomassModelJob(String jobId, BinaryData job, RequestOptions requestOptions)"
  name: "beginCreateBiomassModelJob(String jobId, BinaryData job, RequestOptions requestOptions)"
  nameWithType: "ModelInferenceAsyncClient.beginCreateBiomassModelJob(String jobId, BinaryData job, RequestOptions requestOptions)"
  summary: "Create a Biomass Model job."
  parameters:
  - description: "JobId provided by user."
    name: "jobId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "Job parameters supplied by user."
    name: "job"
    type: "<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PollerFlux<BinaryData,BinaryData> beginCreateBiomassModelJob(String jobId, BinaryData job, RequestOptions requestOptions)"
  desc: "Create a Biomass Model job.\n\n**Request Body Schema**\n\n```java\n{\n     partyId: String (Required)\n     boundaryId: String (Required)\n     modelVersion: String (Required)\n     cropName: String(Corn) (Required)\n     plantingStartDateTime: OffsetDateTime (Required)\n     inferenceEndDateTime: OffsetDateTime (Required)\n     weatherExtensionId: String (Required)\n     satelliteProvider: String(Microsoft) (Required)\n     satelliteSource: String(Sentinel_2_L2A/Sentinel_2_L1C) (Required)\n     imageResolution: double (Required)\n     imageFormat: String(TIF) (Required)\n     id: String (Optional)\n     status: String (Optional)\n     durationInSeconds: Double (Optional)\n     message: String (Optional)\n     errorCode: String (Optional)\n     createdDateTime: OffsetDateTime (Optional)\n     lastActionDateTime: OffsetDateTime (Optional)\n     startTime: OffsetDateTime (Optional)\n     endTime: OffsetDateTime (Optional)\n     name: String (Optional)\n     description: String (Optional)\n     createdBy: String (Optional)\n     modifiedBy: String (Optional)\n     properties (Optional): {\n         String: Object (Optional)\n     }\n }\n```\n\n**Response Body Schema**\n\n```java\n{\n     partyId: String (Required)\n     boundaryId: String (Required)\n     modelVersion: String (Required)\n     cropName: String(Corn) (Required)\n     plantingStartDateTime: OffsetDateTime (Required)\n     inferenceEndDateTime: OffsetDateTime (Required)\n     weatherExtensionId: String (Required)\n     satelliteProvider: String(Microsoft) (Required)\n     satelliteSource: String(Sentinel_2_L2A/Sentinel_2_L1C) (Required)\n     imageResolution: double (Required)\n     imageFormat: String(TIF) (Required)\n     id: String (Optional)\n     status: String (Optional)\n     durationInSeconds: Double (Optional)\n     message: String (Optional)\n     errorCode: String (Optional)\n     createdDateTime: OffsetDateTime (Optional)\n     lastActionDateTime: OffsetDateTime (Optional)\n     startTime: OffsetDateTime (Optional)\n     endTime: OffsetDateTime (Optional)\n     name: String (Optional)\n     description: String (Optional)\n     createdBy: String (Optional)\n     modifiedBy: String (Optional)\n     properties (Optional): {\n         String: Object (Optional)\n     }\n }\n```"
  returns:
    description: "the <xref uid=\"com.azure.core.util.polling.PollerFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PollerFlux\"></xref> for polling of schema of biomass model job."
    type: "<xref href=\"com.azure.core.util.polling.PollerFlux?alt=com.azure.core.util.polling.PollerFlux&text=PollerFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />,<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.verticals.agrifood.farming.ModelInferenceAsyncClient.beginCreateSensorPlacementModelJob(java.lang.String,com.azure.core.util.BinaryData,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.verticals.agrifood.farming.ModelInferenceAsyncClient.beginCreateSensorPlacementModelJob(String jobId, BinaryData job, RequestOptions requestOptions)"
  name: "beginCreateSensorPlacementModelJob(String jobId, BinaryData job, RequestOptions requestOptions)"
  nameWithType: "ModelInferenceAsyncClient.beginCreateSensorPlacementModelJob(String jobId, BinaryData job, RequestOptions requestOptions)"
  summary: "Create a Sensor Placement Model job."
  parameters:
  - description: "JobId provided by user."
    name: "jobId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "Job parameters supplied by user."
    name: "job"
    type: "<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PollerFlux<BinaryData,BinaryData> beginCreateSensorPlacementModelJob(String jobId, BinaryData job, RequestOptions requestOptions)"
  desc: "Create a Sensor Placement Model job.\n\n**Request Body Schema**\n\n```java\n{\n     partyId: String (Required)\n     boundaryId: String (Required)\n     modelVersion: String (Required)\n     inferenceStartDateTime: OffsetDateTime (Required)\n     inferenceEndDateTime: OffsetDateTime (Required)\n     satelliteProvider: String(Microsoft) (Required)\n     satelliteSource: String(Sentinel_2_L2A/Sentinel_2_L1C) (Required)\n     sensorType: String (Required)\n     isRanked: boolean (Required)\n     id: String (Optional)\n     status: String (Optional)\n     durationInSeconds: Double (Optional)\n     message: String (Optional)\n     errorCode: String (Optional)\n     createdDateTime: OffsetDateTime (Optional)\n     lastActionDateTime: OffsetDateTime (Optional)\n     startTime: OffsetDateTime (Optional)\n     endTime: OffsetDateTime (Optional)\n     name: String (Optional)\n     description: String (Optional)\n     createdBy: String (Optional)\n     modifiedBy: String (Optional)\n     properties (Optional): {\n         String: Object (Optional)\n     }\n }\n```\n\n**Response Body Schema**\n\n```java\n{\n     partyId: String (Required)\n     boundaryId: String (Required)\n     modelVersion: String (Required)\n     inferenceStartDateTime: OffsetDateTime (Required)\n     inferenceEndDateTime: OffsetDateTime (Required)\n     satelliteProvider: String(Microsoft) (Required)\n     satelliteSource: String(Sentinel_2_L2A/Sentinel_2_L1C) (Required)\n     sensorType: String (Required)\n     isRanked: boolean (Required)\n     id: String (Optional)\n     status: String (Optional)\n     durationInSeconds: Double (Optional)\n     message: String (Optional)\n     errorCode: String (Optional)\n     createdDateTime: OffsetDateTime (Optional)\n     lastActionDateTime: OffsetDateTime (Optional)\n     startTime: OffsetDateTime (Optional)\n     endTime: OffsetDateTime (Optional)\n     name: String (Optional)\n     description: String (Optional)\n     createdBy: String (Optional)\n     modifiedBy: String (Optional)\n     properties (Optional): {\n         String: Object (Optional)\n     }\n }\n```"
  returns:
    description: "the <xref uid=\"com.azure.core.util.polling.PollerFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PollerFlux\"></xref> for polling of schema of sensor placement model job."
    type: "<xref href=\"com.azure.core.util.polling.PollerFlux?alt=com.azure.core.util.polling.PollerFlux&text=PollerFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />,<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.verticals.agrifood.farming.ModelInferenceAsyncClient.beginCreateSoilMoistureModelJob(java.lang.String,com.azure.core.util.BinaryData,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.verticals.agrifood.farming.ModelInferenceAsyncClient.beginCreateSoilMoistureModelJob(String jobId, BinaryData job, RequestOptions requestOptions)"
  name: "beginCreateSoilMoistureModelJob(String jobId, BinaryData job, RequestOptions requestOptions)"
  nameWithType: "ModelInferenceAsyncClient.beginCreateSoilMoistureModelJob(String jobId, BinaryData job, RequestOptions requestOptions)"
  summary: "Create a Soil<wbr>Moisture Model job."
  parameters:
  - description: "JobId provided by user."
    name: "jobId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "Job parameters supplied by user."
    name: "job"
    type: "<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PollerFlux<BinaryData,BinaryData> beginCreateSoilMoistureModelJob(String jobId, BinaryData job, RequestOptions requestOptions)"
  desc: "Create a SoilMoisture Model job.\n\n**Request Body Schema**\n\n```java\n{\n     partyId: String (Required)\n     boundaryId: String (Required)\n     sensorDataModelId: String (Required)\n     sensorPartnerId: String (Required)\n     inferenceStartDateTime: OffsetDateTime (Required)\n     inferenceEndDateTime: OffsetDateTime (Required)\n     satelliteProvider: String(Microsoft) (Required)\n     satelliteSource: String(Sentinel_2_L2A/Sentinel_2_L1C) (Required)\n     imageResolution: double (Required)\n     imageFormat: String(TIF) (Required)\n     modelVersion: String (Required)\n     sensorDefinition (Required): {\n         sensorMeasurement: String (Required)\n         minProperty: String (Required)\n         maxProperty: String (Required)\n     }\n     id: String (Optional)\n     status: String (Optional)\n     durationInSeconds: Double (Optional)\n     message: String (Optional)\n     errorCode: String (Optional)\n     createdDateTime: OffsetDateTime (Optional)\n     lastActionDateTime: OffsetDateTime (Optional)\n     startTime: OffsetDateTime (Optional)\n     endTime: OffsetDateTime (Optional)\n     name: String (Optional)\n     description: String (Optional)\n     createdBy: String (Optional)\n     modifiedBy: String (Optional)\n     properties (Optional): {\n         String: Object (Optional)\n     }\n }\n```\n\n**Response Body Schema**\n\n```java\n{\n     partyId: String (Required)\n     boundaryId: String (Required)\n     sensorDataModelId: String (Required)\n     sensorPartnerId: String (Required)\n     inferenceStartDateTime: OffsetDateTime (Required)\n     inferenceEndDateTime: OffsetDateTime (Required)\n     satelliteProvider: String(Microsoft) (Required)\n     satelliteSource: String(Sentinel_2_L2A/Sentinel_2_L1C) (Required)\n     imageResolution: double (Required)\n     imageFormat: String(TIF) (Required)\n     modelVersion: String (Required)\n     sensorDefinition (Required): {\n         sensorMeasurement: String (Required)\n         minProperty: String (Required)\n         maxProperty: String (Required)\n     }\n     id: String (Optional)\n     status: String (Optional)\n     durationInSeconds: Double (Optional)\n     message: String (Optional)\n     errorCode: String (Optional)\n     createdDateTime: OffsetDateTime (Optional)\n     lastActionDateTime: OffsetDateTime (Optional)\n     startTime: OffsetDateTime (Optional)\n     endTime: OffsetDateTime (Optional)\n     name: String (Optional)\n     description: String (Optional)\n     createdBy: String (Optional)\n     modifiedBy: String (Optional)\n     properties (Optional): {\n         String: Object (Optional)\n     }\n }\n```"
  returns:
    description: "the <xref uid=\"com.azure.core.util.polling.PollerFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PollerFlux\"></xref> for polling of schema of soil moisture model job."
    type: "<xref href=\"com.azure.core.util.polling.PollerFlux?alt=com.azure.core.util.polling.PollerFlux&text=PollerFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />,<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.verticals.agrifood.farming.ModelInferenceAsyncClient.getBiomassModelJobWithResponse(java.lang.String,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.verticals.agrifood.farming.ModelInferenceAsyncClient.getBiomassModelJobWithResponse(String jobId, RequestOptions requestOptions)"
  name: "getBiomassModelJobWithResponse(String jobId, RequestOptions requestOptions)"
  nameWithType: "ModelInferenceAsyncClient.getBiomassModelJobWithResponse(String jobId, RequestOptions requestOptions)"
  summary: "Get Biomass Model job's details."
  parameters:
  - description: "Id of the job."
    name: "jobId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<BinaryData>> getBiomassModelJobWithResponse(String jobId, RequestOptions requestOptions)"
  desc: "Get Biomass Model job's details.\n\n**Response Body Schema**\n\n```java\n{\n     partyId: String (Required)\n     boundaryId: String (Required)\n     modelVersion: String (Required)\n     cropName: String(Corn) (Required)\n     plantingStartDateTime: OffsetDateTime (Required)\n     inferenceEndDateTime: OffsetDateTime (Required)\n     weatherExtensionId: String (Required)\n     satelliteProvider: String(Microsoft) (Required)\n     satelliteSource: String(Sentinel_2_L2A/Sentinel_2_L1C) (Required)\n     imageResolution: double (Required)\n     imageFormat: String(TIF) (Required)\n     id: String (Optional)\n     status: String (Optional)\n     durationInSeconds: Double (Optional)\n     message: String (Optional)\n     errorCode: String (Optional)\n     createdDateTime: OffsetDateTime (Optional)\n     lastActionDateTime: OffsetDateTime (Optional)\n     startTime: OffsetDateTime (Optional)\n     endTime: OffsetDateTime (Optional)\n     name: String (Optional)\n     description: String (Optional)\n     createdBy: String (Optional)\n     modifiedBy: String (Optional)\n     properties (Optional): {\n         String: Object (Optional)\n     }\n }\n```"
  returns:
    description: "biomass Model job's details along with <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> on successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.verticals.agrifood.farming.ModelInferenceAsyncClient.getSensorPlacementModelJobWithResponse(java.lang.String,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.verticals.agrifood.farming.ModelInferenceAsyncClient.getSensorPlacementModelJobWithResponse(String jobId, RequestOptions requestOptions)"
  name: "getSensorPlacementModelJobWithResponse(String jobId, RequestOptions requestOptions)"
  nameWithType: "ModelInferenceAsyncClient.getSensorPlacementModelJobWithResponse(String jobId, RequestOptions requestOptions)"
  summary: "Get Sensor Placement Model job's details."
  parameters:
  - description: "Id of the job."
    name: "jobId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<BinaryData>> getSensorPlacementModelJobWithResponse(String jobId, RequestOptions requestOptions)"
  desc: "Get Sensor Placement Model job's details.\n\n**Response Body Schema**\n\n```java\n{\n     partyId: String (Required)\n     boundaryId: String (Required)\n     modelVersion: String (Required)\n     inferenceStartDateTime: OffsetDateTime (Required)\n     inferenceEndDateTime: OffsetDateTime (Required)\n     satelliteProvider: String(Microsoft) (Required)\n     satelliteSource: String(Sentinel_2_L2A/Sentinel_2_L1C) (Required)\n     sensorType: String (Required)\n     isRanked: boolean (Required)\n     id: String (Optional)\n     status: String (Optional)\n     durationInSeconds: Double (Optional)\n     message: String (Optional)\n     errorCode: String (Optional)\n     createdDateTime: OffsetDateTime (Optional)\n     lastActionDateTime: OffsetDateTime (Optional)\n     startTime: OffsetDateTime (Optional)\n     endTime: OffsetDateTime (Optional)\n     name: String (Optional)\n     description: String (Optional)\n     createdBy: String (Optional)\n     modifiedBy: String (Optional)\n     properties (Optional): {\n         String: Object (Optional)\n     }\n }\n```"
  returns:
    description: "sensor Placement Model job's details along with <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> on successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.verticals.agrifood.farming.ModelInferenceAsyncClient.getSoilMoistureModelJobWithResponse(java.lang.String,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.verticals.agrifood.farming.ModelInferenceAsyncClient.getSoilMoistureModelJobWithResponse(String jobId, RequestOptions requestOptions)"
  name: "getSoilMoistureModelJobWithResponse(String jobId, RequestOptions requestOptions)"
  nameWithType: "ModelInferenceAsyncClient.getSoilMoistureModelJobWithResponse(String jobId, RequestOptions requestOptions)"
  summary: "Get Soil<wbr>Moisture Model job's details."
  parameters:
  - description: "Id of the job."
    name: "jobId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<BinaryData>> getSoilMoistureModelJobWithResponse(String jobId, RequestOptions requestOptions)"
  desc: "Get SoilMoisture Model job's details.\n\n**Response Body Schema**\n\n```java\n{\n     partyId: String (Required)\n     boundaryId: String (Required)\n     sensorDataModelId: String (Required)\n     sensorPartnerId: String (Required)\n     inferenceStartDateTime: OffsetDateTime (Required)\n     inferenceEndDateTime: OffsetDateTime (Required)\n     satelliteProvider: String(Microsoft) (Required)\n     satelliteSource: String(Sentinel_2_L2A/Sentinel_2_L1C) (Required)\n     imageResolution: double (Required)\n     imageFormat: String(TIF) (Required)\n     modelVersion: String (Required)\n     sensorDefinition (Required): {\n         sensorMeasurement: String (Required)\n         minProperty: String (Required)\n         maxProperty: String (Required)\n     }\n     id: String (Optional)\n     status: String (Optional)\n     durationInSeconds: Double (Optional)\n     message: String (Optional)\n     errorCode: String (Optional)\n     createdDateTime: OffsetDateTime (Optional)\n     lastActionDateTime: OffsetDateTime (Optional)\n     startTime: OffsetDateTime (Optional)\n     endTime: OffsetDateTime (Optional)\n     name: String (Optional)\n     description: String (Optional)\n     createdBy: String (Optional)\n     modifiedBy: String (Optional)\n     properties (Optional): {\n         String: Object (Optional)\n     }\n }\n```"
  returns:
    description: "soilMoisture Model job's details along with <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> on successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
type: "class"
desc: "Initializes a new instance of the asynchronous FarmBeatsClient type."
metadata: {}
package: "com.azure.verticals.agrifood.farming"
artifact: com.azure:azure-verticals-agrifood-farming:1.0.0-beta.3
