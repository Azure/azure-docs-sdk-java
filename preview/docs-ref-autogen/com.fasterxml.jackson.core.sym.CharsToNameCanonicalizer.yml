### YamlMime:JavaType
uid: "com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer"
fullName: "com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer"
name: "CharsToNameCanonicalizer"
nameWithType: "CharsToNameCanonicalizer"
summary: "This class is a kind of specialized type-safe Map, from char array to String value. Specialization means that in addition to type-safety and specific access patterns (key char array, Value optionally interned String; values added on access if necessary), and that instances are meant to be used concurrently, but by using well-defined mechanisms to obtain such concurrently usable instances. Main use for the class is to store symbol table information for things like compilers and parsers; especially when number of symbols (keywords) is limited.\n\nFor optimal performance, usage pattern should be one where matches should be very common (especially after \"warm-up\"), and as with most hash-based maps/sets, that hash codes are uniformly distributed. Also, collisions are slightly more expensive than with HashMap or HashSet, since hash codes are not used in resolving collisions; that is, equals() comparison is done with all symbols in same bucket index.\nFinally, rehashing is also more expensive, as hash codes are not stored; rehashing requires all entries' hash codes to be recalculated. Reason for not storing hash codes is reduced memory usage, hoping for better memory locality.\n\nUsual usage pattern is to create a single \"master\" instance, and either use that instance in sequential fashion, or to create derived \"child\" instances, which after use, are asked to return possible symbol additions to master instance. In either case benefit is that symbol table gets initialized so that further uses are more efficient, as eventually all symbols needed will already be in symbol table. At that point no more Symbol String allocations are needed, nor changes to symbol table itself.\n\nNote that while individual SymbolTable instances are NOT thread-safe (much like generic collection classes), concurrently used \"child\" instances can be freely used without synchronization. However, using master table concurrently with child instances can only be done if access to master instance is read-only (i.e. no modifications done)."
inheritances:
- "<xref href=\"java.lang.Object\" data-throw-if-not-resolved=\"False\" />"
inheritedMembers:
- "java.lang.Object.clone()"
- "java.lang.Object.equals(java.lang.Object)"
- "java.lang.Object.finalize()"
- "java.lang.Object.getClass()"
- "java.lang.Object.hashCode()"
- "java.lang.Object.notify()"
- "java.lang.Object.notifyAll()"
- "java.lang.Object.toString()"
- "java.lang.Object.wait()"
- "java.lang.Object.wait(long)"
- "java.lang.Object.wait(long,int)"
syntax: "public final class CharsToNameCanonicalizer"
fields:
- "com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.HASH_MULT"
methods:
- "com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer._hashToIndex(int)"
- "com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.bucketCount()"
- "com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.calcHash(char[],int,int)"
- "com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.calcHash(java.lang.String)"
- "com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.collisionCount()"
- "com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot()"
- "com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot(int)"
- "com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.findSymbol(char[],int,int,int)"
- "com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.hashSeed()"
- "com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.makeChild(int)"
- "com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.maxCollisionLength()"
- "com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.maybeDirty()"
- "com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.release()"
- "com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.reportTooManyCollisions(int)"
- "com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.size()"
- "com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.verifyInternalConsistency()"
type: "class"
metadata: {}
package: "com.fasterxml.jackson.core.sym"
artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
