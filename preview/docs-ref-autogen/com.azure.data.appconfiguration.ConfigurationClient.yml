### YamlMime:ManagedReference
items:
- uid: com.azure.data.appconfiguration.ConfigurationClient
  id: ConfigurationClient
  parent: com.azure.data.appconfiguration
  children:
  - com.azure.data.appconfiguration.ConfigurationClient.addSetting(ConfigurationSetting)
  - com.azure.data.appconfiguration.ConfigurationClient.addSetting(String,String)
  - com.azure.data.appconfiguration.ConfigurationClient.getSetting(String)
  - com.azure.data.appconfiguration.ConfigurationClient.setSetting(ConfigurationSetting)
  - com.azure.data.appconfiguration.ConfigurationClient.setSetting(String,String)
  - com.azure.data.appconfiguration.ConfigurationClient.updateSetting(ConfigurationSetting)
  - com.azure.data.appconfiguration.ConfigurationClient.updateSetting(String,String)
  href: com.azure.data.appconfiguration.ConfigurationClient.yml
  langs:
  - java
  name: ConfigurationClient
  nameWithType: ConfigurationClient
  fullName: com.azure.data.appconfiguration.ConfigurationClient
  type: Class
  source:
    remote: &o0
      path: sdk/appconfiguration/azure-data-appconfiguration/src/main/java/com/azure/data/appconfiguration/ConfigurationClient.java
      branch: master
      repo: https://github.com/Azure/azure-sdk-for-java
    path: sdk/appconfiguration/azure-data-appconfiguration/src/main/java/com/azure/data/appconfiguration/ConfigurationClient.java
    startLine: 33
  package: com.azure.data.appconfiguration
  summary: "<p>This class provides a client that contains all the operations for <xref uid=\"\" data-throw-if-not-resolved=\"false\">ConfigurationSettings</xref> in Azure App Configuration Store. Operations allowed by the client are adding, retrieving, updating, and deleting ConfigurationSettings, and listing settings or revision of a setting based on a <xref uid=\"\" data-throw-if-not-resolved=\"false\">filter</xref>.</p>\r\n<p>\r\n  <b>Instantiating a synchronous Configuration Client</b>\r\n</p>\r\n<p>{ com.azure.data.applicationconfig.configurationclient.instantiation}</p>\r\n<p>View <xref uid=\"com.azure.data.appconfiguration.ConfigurationClientBuilder\" data-throw-if-not-resolved=\"false\">this</xref> for additional ways to construct the client.</p>\r\n<p></p>"
  syntax:
    content: public class ConfigurationClient
  inheritance:
  - java.lang.Object
- uid: com.azure.data.appconfiguration.ConfigurationClient.addSetting(ConfigurationSetting)
  id: addSetting(ConfigurationSetting)
  parent: com.azure.data.appconfiguration.ConfigurationClient
  href: com.azure.data.appconfiguration.ConfigurationClient.yml
  langs:
  - java
  name: addSetting(ConfigurationSetting setting)
  nameWithType: ConfigurationClient.addSetting(ConfigurationSetting setting)
  fullName: com.azure.data.appconfiguration.ConfigurationClient.addSetting(ConfigurationSetting setting)
  overload: com.azure.data.appconfiguration.ConfigurationClient.addSetting*
  type: Method
  source:
    remote: *o0
    path: sdk/appconfiguration/azure-data-appconfiguration/src/main/java/com/azure/data/appconfiguration/ConfigurationClient.java
    startLine: 89
  package: com.azure.data.appconfiguration
  summary: "<p>Adds a configuration value in the service if that key and label does not exist. The label value of the ConfigurationSetting is optional.</p>\r\n<p>\r\n  <b>Code Samples</b>\r\n</p>\r\n<p>Add a setting with the key \"prodDBConnection\", label \"westUS\", and value \"db_connection\".</p>\r\n<p>\r\n  <pre>\r\nConfigurationSetting result = client.addSetting(new ConfigurationSetting().key(\"prodDBConnection\").label(\"westUS\").value(\"db_connection\"));\r\nSystem.out.printf(\"Key: %s, Value: %s\", result.key(), result.value());</pre>\r\n</p>\r\n<p></p>"
  syntax:
    content: public Response<ConfigurationSetting> addSetting(ConfigurationSetting setting)
    parameters:
    - id: setting
      type: com.azure.data.appconfiguration.models.ConfigurationSetting
      description: <p>The setting to add to the configuration service. </p>
    return:
      type: com.azure.core.http.rest.Response78504a52com.azure.data.appconfiguration.models.ConfigurationSettinga08ddfce
      description: >-
        <p>The <xref uid="" data-throw-if-not-resolved="false">ConfigurationSetting</xref> that was created, or<code>null 

            </code> , if a key collision occurs or the key is an invalid value (which will also throw ServiceRequestException described below). </p>
  exceptions:
  - type: 17c54119
    description: >-
      <p>If<code>setting 

          </code> is<code>null 

          </code> . </p>
  - type: 3c87bd19
    description: >-
      <p>If <xref uid="com.azure.data.appconfiguration.models.ConfigurationSetting.key()" data-throw-if-not-resolved="false">key</xref> is<code>null 

          </code> . </p>
  - type: 8eb71202
    description: <p>If a ConfigurationSetting with the same key and label exists. </p>
  - type: c5b4e9e3
    description: >-
      <p>If<code>key 

          </code> is an empty string. </p>
- uid: com.azure.data.appconfiguration.ConfigurationClient.addSetting(String,String)
  id: addSetting(String,String)
  parent: com.azure.data.appconfiguration.ConfigurationClient
  href: com.azure.data.appconfiguration.ConfigurationClient.yml
  langs:
  - java
  name: addSetting(String key, String value)
  nameWithType: ConfigurationClient.addSetting(String key, String value)
  fullName: com.azure.data.appconfiguration.ConfigurationClient.addSetting(String key, String value)
  overload: com.azure.data.appconfiguration.ConfigurationClient.addSetting*
  type: Method
  source:
    remote: *o0
    path: sdk/appconfiguration/azure-data-appconfiguration/src/main/java/com/azure/data/appconfiguration/ConfigurationClient.java
    startLine: 64
  package: com.azure.data.appconfiguration
  summary: "<p>Adds a configuration value in the service if that key does not exist.</p>\r\n<p>\r\n  <b>Code Samples</b>\r\n</p>\r\n<p>Add a setting with the key \"prodDBConnection\" and value \"db_connection\".</p>\r\n<p>{ com.azure.data.applicationconfig.configurationclient.addSetting::string-string}</p>\r\n<p></p>"
  syntax:
    content: public Response<ConfigurationSetting> addSetting(String key, String value)
    parameters:
    - id: key
      type: "26831127"
      description: <p>The key of the configuration setting to add. </p>
    - id: value
      type: "26831127"
      description: <p>The value associated with this configuration setting key. </p>
    return:
      type: com.azure.core.http.rest.Response78504a52com.azure.data.appconfiguration.models.ConfigurationSettinga08ddfce
      description: >-
        <p>The <xref uid="" data-throw-if-not-resolved="false">ConfigurationSetting</xref> that was created, or<code>null 

            </code> , if a key collision occurs or the key is an invalid value (which will also throw ServiceRequestException described below). </p>
  exceptions:
  - type: 3c87bd19
    description: >-
      <p>If<code>key 

          </code> is<code>null 

          </code> . </p>
  - type: 8eb71202
    description: <p>If a ConfigurationSetting with the same key exists. </p>
  - type: c5b4e9e3
    description: >-
      <p>If<code>key 

          </code> is an empty string. </p>
- uid: com.azure.data.appconfiguration.ConfigurationClient.getSetting(String)
  id: getSetting(String)
  parent: com.azure.data.appconfiguration.ConfigurationClient
  href: com.azure.data.appconfiguration.ConfigurationClient.yml
  langs:
  - java
  name: getSetting(String key)
  nameWithType: ConfigurationClient.getSetting(String key)
  fullName: com.azure.data.appconfiguration.ConfigurationClient.getSetting(String key)
  overload: com.azure.data.appconfiguration.ConfigurationClient.getSetting*
  type: Method
  source:
    remote: *o0
    path: sdk/appconfiguration/azure-data-appconfiguration/src/main/java/com/azure/data/appconfiguration/ConfigurationClient.java
    startLine: 328
  package: com.azure.data.appconfiguration
  summary: "<p>Attempts to get a ConfigurationSetting that matches the<code>key \r\n    </code> .</p>\r\n<p>\r\n  <b>Code Samples</b>\r\n</p>\r\n<p>Retrieve the setting with the key \"prodDBConnection\".</p>\r\n<p>\r\n  <pre>\r\nConfigurationSetting result = client.get(\"prodDBConnection\");\r\nSystem.out.printf(\"Key: %s, Value: %s\", result.key(), result.value());</pre>\r\n</p>\r\n<p></p>"
  syntax:
    content: public Response<ConfigurationSetting> getSetting(String key)
    parameters:
    - id: key
      type: "26831127"
      description: <p>The key of the setting to retrieve. </p>
    return:
      type: com.azure.core.http.rest.Response78504a52com.azure.data.appconfiguration.models.ConfigurationSettinga08ddfce
      description: >-
        <p>The <xref uid="" data-throw-if-not-resolved="false">ConfigurationSetting</xref> stored in the service, or<code>null 

            </code> , if the configuration value does not exist or the key is an invalid value (which will also throw ServiceRequestException described below). </p>
  exceptions:
  - type: 3c87bd19
    description: >-
      <p>If<code>key 

          </code> is<code>null 

          </code> . </p>
  - type: 47b9dbf9
    description: >-
      <p>If a ConfigurationSetting with<code>key 

          </code> does not exist. </p>
  - type: c5b4e9e3
    description: >-
      <p>If<code>key 

          </code> is an empty string. </p>
- uid: com.azure.data.appconfiguration.ConfigurationClient.setSetting(ConfigurationSetting)
  id: setSetting(ConfigurationSetting)
  parent: com.azure.data.appconfiguration.ConfigurationClient
  href: com.azure.data.appconfiguration.ConfigurationClient.yml
  langs:
  - java
  name: setSetting(ConfigurationSetting setting)
  nameWithType: ConfigurationClient.setSetting(ConfigurationSetting setting)
  fullName: com.azure.data.appconfiguration.ConfigurationClient.setSetting(ConfigurationSetting setting)
  overload: com.azure.data.appconfiguration.ConfigurationClient.setSetting*
  type: Method
  source:
    remote: *o0
    path: sdk/appconfiguration/azure-data-appconfiguration/src/main/java/com/azure/data/appconfiguration/ConfigurationClient.java
    startLine: 183
  package: com.azure.data.appconfiguration
  summary: "<p>Creates or updates a configuration value in the service. Partial updates are not supported and the entire configuration setting is updated.</p>\r\n<p>If <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting.etag()\" data-throw-if-not-resolved=\"false\">etag</xref> is specified, the configuration value is updated if the current setting's etag matches. If the etag's value is equal to the wildcard character (<code>\"*\" \r\n    </code> ), the setting will always be updated.</p>\r\n<p>\r\n  <b>Code Samples</b>\r\n</p>\r\n<p>Add a setting with the key \"prodDBConnection\", label \"westUS\", and value \"db_connection\".</p>\r\n<p>\r\n  <pre>\r\nConfigurationSetting result = client.setSetting(new ConfigurationSetting().key(\"prodDBConnection\").label(\"westUS\").value(\"db_connection\"));\r\nSystem.out.printf(\"Key: %s, Value: %s\", result.key(), result.value());</pre>\r\n</p>\r\n<p>Update the value of the setting to \"updated_db_connection\".</p>\r\n<p>\r\n  <pre>\r\nresult = client\r\n    .setSetting(new ConfigurationSetting().key(\"prodDBConnection\").label(\"westUS\").value(\"updated_db_connection\"))\r\nSystem.out.printf(\"Key: %s, Value: %s\", result.key(), result.value());</pre>\r\n</p>\r\n<p></p>"
  syntax:
    content: public Response<ConfigurationSetting> setSetting(ConfigurationSetting setting)
    parameters:
    - id: setting
      type: com.azure.data.appconfiguration.models.ConfigurationSetting
      description: <p>The configuration setting to create or update. </p>
    return:
      type: com.azure.core.http.rest.Response78504a52com.azure.data.appconfiguration.models.ConfigurationSettinga08ddfce
      description: >-
        <p>The <xref uid="" data-throw-if-not-resolved="false">ConfigurationSetting</xref> that was created or updated, or<code>null 

            </code> , if the key is an invalid value, the setting is locked, or an etag was provided but does not match the service's current etag value (which will also throw ServiceRequestException described below). </p>
  exceptions:
  - type: 17c54119
    description: >-
      <p>If<code>setting 

          </code> is<code>null 

          </code> . </p>
  - type: 3c87bd19
    description: >-
      <p>If <xref uid="com.azure.data.appconfiguration.models.ConfigurationSetting.key()" data-throw-if-not-resolved="false">key</xref> is<code>null 

          </code> . </p>
  - type: 8eb71202
    description: <p>If the <xref uid="com.azure.data.appconfiguration.models.ConfigurationSetting.etag()" data-throw-if-not-resolved="false">etag</xref> was specified, is not the wildcard character, and the current configuration value's etag does not match, or the setting exists and is locked. </p>
  - type: c5b4e9e3
    description: >-
      <p>If<code>key 

          </code> is an empty string. </p>
- uid: com.azure.data.appconfiguration.ConfigurationClient.setSetting(String,String)
  id: setSetting(String,String)
  parent: com.azure.data.appconfiguration.ConfigurationClient
  href: com.azure.data.appconfiguration.ConfigurationClient.yml
  langs:
  - java
  name: setSetting(String key, String value)
  nameWithType: ConfigurationClient.setSetting(String key, String value)
  fullName: com.azure.data.appconfiguration.ConfigurationClient.setSetting(String key, String value)
  overload: com.azure.data.appconfiguration.ConfigurationClient.setSetting*
  type: Method
  source:
    remote: *o0
    path: sdk/appconfiguration/azure-data-appconfiguration/src/main/java/com/azure/data/appconfiguration/ConfigurationClient.java
    startLine: 144
  package: com.azure.data.appconfiguration
  summary: "<p>Creates or updates a configuration value in the service with the given key.</p>\r\n<p>\r\n  <b>Code Samples</b>\r\n</p>\r\n<p>Add a setting with the key \"prodDBConnection\" and value \"db_connection\".</p>\r\n<p>\r\n  <pre>\r\nConfigurationSetting result = client.setSetting(\"prodDBConnection\", \"db_connection\");\r\nSystem.out.printf(\"Key: %s, Value: %s\", result.key(), result.value());</pre>\r\n</p>\r\n<p>Update the value of the setting to \"updated_db_connection\".</p>\r\n<p>\r\n  <pre>\r\nresult = client.setSetting(\"prodDBConnection\", \"updated_db_connection\");\r\nSystem.out.printf(\"Key: %s, Value: %s\", result.key(), result.value());</pre>\r\n</p>\r\n<p></p>"
  syntax:
    content: public Response<ConfigurationSetting> setSetting(String key, String value)
    parameters:
    - id: key
      type: "26831127"
      description: <p>The key of the configuration setting to create or update. </p>
    - id: value
      type: "26831127"
      description: <p>The value of this configuration setting. </p>
    return:
      type: com.azure.core.http.rest.Response78504a52com.azure.data.appconfiguration.models.ConfigurationSettinga08ddfce
      description: >-
        <p>The <xref uid="" data-throw-if-not-resolved="false">ConfigurationSetting</xref> that was created or updated, or<code>null 

            </code> , if the key is an invalid value (which will also throw ServiceRequestException described below). </p>
  exceptions:
  - type: 3c87bd19
    description: >-
      <p>If<code>key 

          </code> is<code>null 

          </code> . </p>
  - type: 8eb71202
    description: <p>If the setting exists and is locked. </p>
  - type: c5b4e9e3
    description: >-
      <p>If<code>key 

          </code> is an empty string. </p>
- uid: com.azure.data.appconfiguration.ConfigurationClient.updateSetting(ConfigurationSetting)
  id: updateSetting(ConfigurationSetting)
  parent: com.azure.data.appconfiguration.ConfigurationClient
  href: com.azure.data.appconfiguration.ConfigurationClient.yml
  langs:
  - java
  name: updateSetting(ConfigurationSetting setting)
  nameWithType: ConfigurationClient.updateSetting(ConfigurationSetting setting)
  fullName: com.azure.data.appconfiguration.ConfigurationClient.updateSetting(ConfigurationSetting setting)
  overload: com.azure.data.appconfiguration.ConfigurationClient.updateSetting*
  type: Method
  source:
    remote: *o0
    path: sdk/appconfiguration/azure-data-appconfiguration/src/main/java/com/azure/data/appconfiguration/ConfigurationClient.java
    startLine: 276
  package: com.azure.data.appconfiguration
  summary: "<p>Updates an existing configuration value in the service. The setting must already exist. Partial updates are not supported, the entire configuration value is replaced.</p>\r\n<p>If <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting.etag()\" data-throw-if-not-resolved=\"false\">etag</xref> is specified, the configuration value is only updated if it matches.</p>\r\n<p>\r\n  <b>Code Samples</b>\r\n</p>\r\n<p>Update the setting with the key-label pair \"prodDBConnection\"-\"westUS\" to have the value \"updated_db_connection\".</p>\r\n<p>\r\n  <pre>\r\nConfigurationSetting result = client.updateSetting(new ConfigurationSetting().key(\"prodDBConnection\").label(\"westUS\").value(\"updated_db_connection\"));\r\nSystem.out.printf(\"Key: %s, Value: %s\", result.key(), result.value());</pre>\r\n</p>\r\n<p></p>"
  syntax:
    content: public Response<ConfigurationSetting> updateSetting(ConfigurationSetting setting)
    parameters:
    - id: setting
      type: com.azure.data.appconfiguration.models.ConfigurationSetting
      description: <p>The setting to add or update in the service. </p>
    return:
      type: com.azure.core.http.rest.Response78504a52com.azure.data.appconfiguration.models.ConfigurationSettinga08ddfce
      description: >-
        <p>The <xref uid="" data-throw-if-not-resolved="false">ConfigurationSetting</xref> that was updated, or<code>null 

            </code> , if the configuration value does not exist, is locked, or the key is an invalid value (which will also throw ServiceRequestException described below). </p>
  exceptions:
  - type: 17c54119
    description: >-
      <p>If<code>setting 

          </code> is<code>null 

          </code> . </p>
  - type: 3c87bd19
    description: >-
      <p>If <xref uid="com.azure.data.appconfiguration.models.ConfigurationSetting.key()" data-throw-if-not-resolved="false">key</xref> is<code>null 

          </code> . </p>
  - type: 8eb71202
    description: <p>If a ConfigurationSetting with the same key and label does not exist, the setting is locked, or <xref uid="com.azure.data.appconfiguration.models.ConfigurationSetting.etag()" data-throw-if-not-resolved="false">etag</xref> is specified but does not match the current value. </p>
  - type: c5b4e9e3
    description: >-
      <p>If<code>key 

          </code> is an empty string. </p>
- uid: com.azure.data.appconfiguration.ConfigurationClient.updateSetting(String,String)
  id: updateSetting(String,String)
  parent: com.azure.data.appconfiguration.ConfigurationClient
  href: com.azure.data.appconfiguration.ConfigurationClient.yml
  langs:
  - java
  name: updateSetting(String key, String value)
  nameWithType: ConfigurationClient.updateSetting(String key, String value)
  fullName: com.azure.data.appconfiguration.ConfigurationClient.updateSetting(String key, String value)
  overload: com.azure.data.appconfiguration.ConfigurationClient.updateSetting*
  type: Method
  source:
    remote: *o0
    path: sdk/appconfiguration/azure-data-appconfiguration/src/main/java/com/azure/data/appconfiguration/ConfigurationClient.java
    startLine: 247
  package: com.azure.data.appconfiguration
  summary: "<p>Updates an existing configuration value in the service with the given key. The setting must already exist.</p>\r\n<p>\r\n  <b>Code Samples</b>\r\n</p>\r\n<p>Update a setting with the key \"prodDBConnection\" to have the value \"updated_db_connection\".</p>\r\n<p>\r\n  <pre>\r\nConfigurationSetting result = client.updateSetting(\"prodDCConnection\", \"updated_db_connection\");\r\nSystem.out.printf(\"Key: %s, Value: %s\", result.key(), result.value());</pre>\r\n</p>\r\n<p></p>"
  syntax:
    content: public Response<ConfigurationSetting> updateSetting(String key, String value)
    parameters:
    - id: key
      type: "26831127"
      description: <p>The key of the configuration setting to update. </p>
    - id: value
      type: "26831127"
      description: <p>The updated value of this configuration setting. </p>
    return:
      type: com.azure.core.http.rest.Response78504a52com.azure.data.appconfiguration.models.ConfigurationSettinga08ddfce
      description: >-
        <p>The <xref uid="" data-throw-if-not-resolved="false">ConfigurationSetting</xref> that was updated, or<code>null 

            </code> , if the configuration value does not exist, is locked, or the key is an invalid value (which will also throw ServiceRequestException described below). </p>
  exceptions:
  - type: 3c87bd19
    description: >-
      <p>If<code>key 

          </code> is<code>null 

          </code> . </p>
  - type: c5b4e9e3
    description: <p>If a ConfigurationSetting with the key does not exist or the configuration value is locked. </p>
  - type: c5b4e9e3
    description: >-
      <p>If<code>key 

          </code> is an empty string. </p>
references:
- uid: 3c87bd19
  spec.java:
  - name: IllegalArgumentException
    fullName: IllegalArgumentException
- uid: 8eb71202
  spec.java:
  - name: ResourceModifiedException
    fullName: ResourceModifiedException
- uid: c5b4e9e3
  spec.java:
  - name: HttpResponseException
    fullName: HttpResponseException
- uid: "26831127"
  spec.java:
  - name: String
    fullName: String
- uid: com.azure.core.http.rest.Response78504a52com.azure.data.appconfiguration.models.ConfigurationSettinga08ddfce
  spec.java:
  - uid: com.azure.core.http.rest.Response
    name: Response
    fullName: com.azure.core.http.rest.Response
    href: com.azure.core.http.rest.Response.yml
  - name: <
    fullName: <
  - uid: com.azure.data.appconfiguration.models.ConfigurationSetting
    name: ConfigurationSetting
    fullName: com.azure.data.appconfiguration.models.ConfigurationSetting
    href: com.azure.data.appconfiguration.models.ConfigurationSetting.yml
  - name: '>'
    fullName: '>'
- uid: com.azure.data.appconfiguration.ConfigurationClient.addSetting*
  name: addSetting
  nameWithType: ConfigurationClient.addSetting
  fullName: com.azure.data.appconfiguration.ConfigurationClient.addSetting
  package: com.azure.data.appconfiguration
- uid: 17c54119
  spec.java:
  - name: NullPointerException
    fullName: NullPointerException
- uid: com.azure.data.appconfiguration.ConfigurationClient.setSetting*
  name: setSetting
  nameWithType: ConfigurationClient.setSetting
  fullName: com.azure.data.appconfiguration.ConfigurationClient.setSetting
  package: com.azure.data.appconfiguration
- uid: com.azure.data.appconfiguration.ConfigurationClient.updateSetting*
  name: updateSetting
  nameWithType: ConfigurationClient.updateSetting
  fullName: com.azure.data.appconfiguration.ConfigurationClient.updateSetting
  package: com.azure.data.appconfiguration
- uid: 47b9dbf9
  spec.java:
  - name: ResourceNotFoundException
    fullName: ResourceNotFoundException
- uid: com.azure.data.appconfiguration.ConfigurationClient.getSetting*
  name: getSetting
  nameWithType: ConfigurationClient.getSetting
  fullName: com.azure.data.appconfiguration.ConfigurationClient.getSetting
  package: com.azure.data.appconfiguration
- uid: com.azure.data.appconfiguration.ConfigurationAsyncClient
  parent: com.azure.data.appconfiguration
  href: com.azure.data.appconfiguration.ConfigurationAsyncClient.yml
  name: ConfigurationAsyncClient
  nameWithType: ConfigurationAsyncClient
  fullName: com.azure.data.appconfiguration.ConfigurationAsyncClient
  type: Class
  summary: "<p>This class provides a client that contains all the operations for <xref uid=\"\" data-throw-if-not-resolved=\"false\">ConfigurationSettings</xref> in Azure App Configuration Store. Operations allowed by the client are adding, retrieving, updating, and deleting ConfigurationSettings, and listing settings or revision of a setting based on a <xref uid=\"\" data-throw-if-not-resolved=\"false\">filter</xref>.</p>\r\n<p>\r\n  <b>Instantiating an Asynchronous Configuration Client</b>\r\n</p>\r\n<p>{ com.azure.data.applicationconfig.async.configurationclient.instantiation}</p>\r\n<p>View <xref uid=\"com.azure.data.appconfiguration.ConfigurationClientBuilder\" data-throw-if-not-resolved=\"false\">this</xref> for additional ways to construct the client.</p>\r\n<p></p>"
  syntax:
    content: public class ConfigurationAsyncClient
- uid: com.azure.core.http.rest.Response
  parent: com.azure.core.http.rest
  href: com.azure.core.http.rest.Response.yml
  name: Response<T>
  nameWithType: Response<T>
  fullName: com.azure.core.http.rest.Response<T>
  type: Interface
  summary: "<p>REST response with a strongly-typed content specified.</p>\r\n<p></p>"
  syntax:
    content: public interface Response<T>
    typeParameters:
    - id: T
      type: 8ce1ecb9
      description: <p>The deserialized type of the response content, available from <xref uid="com.azure.core.http.rest.Response.value()" data-throw-if-not-resolved="false">value()</xref>. </p>
- uid: com.azure.data.appconfiguration.models.ConfigurationSetting
  parent: com.azure.data.appconfiguration.models
  href: com.azure.data.appconfiguration.models.ConfigurationSetting.yml
  name: ConfigurationSetting
  nameWithType: ConfigurationSetting
  fullName: com.azure.data.appconfiguration.models.ConfigurationSetting
  type: Class
  summary: "<p>ConfigurationSetting is a resource identified by unique combination of <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting.key()\" data-throw-if-not-resolved=\"false\">key</xref> and <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting.label()\" data-throw-if-not-resolved=\"false\">label</xref>. By default, the label is<code>null \r\n    </code> . To explicitly reference the default label use <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting.NO_LABEL\" data-throw-if-not-resolved=\"false\">ConfigurationSetting#NO_LABEL</xref>. </p>"
  syntax:
    content: public class ConfigurationSetting
- uid: com.azure.data.appconfiguration.models.ConfigurationSetting.key()
  parent: com.azure.data.appconfiguration.models.ConfigurationSetting
  href: com.azure.data.appconfiguration.models.ConfigurationSetting.yml
  name: key()
  nameWithType: ConfigurationSetting.key()
  fullName: com.azure.data.appconfiguration.models.ConfigurationSetting.key()
  type: Method
  summary: "<p>Gets the key name for this configuration setting.</p>\r\n<p></p>"
  syntax:
    content: public String key()
    return:
      type: "26831127"
      description: <p>The key for this configuration setting. </p>
- uid: com.azure.data.appconfiguration.models.ConfigurationSetting.etag()
  parent: com.azure.data.appconfiguration.models.ConfigurationSetting
  href: com.azure.data.appconfiguration.models.ConfigurationSetting.yml
  name: etag()
  nameWithType: ConfigurationSetting.etag()
  fullName: com.azure.data.appconfiguration.models.ConfigurationSetting.etag()
  type: Method
  summary: "<p>The etag for this configuration setting.</p>\r\n<p></p>"
  syntax:
    content: public String etag()
    return:
      type: "26831127"
      description: <p>etag The etag for the setting. </p>
- uid: com.azure.core.util.Context
  parent: com.azure.core.util
  href: com.azure.core.util.Context.yml
  name: Context
  nameWithType: Context
  fullName: com.azure.core.util.Context
  type: Class
  summary: "<p>\r\n  <code>Context \r\n    </code> offers a means of passing arbitrary data (key-value pairs) to pipeline policies. Most applications do not need to pass arbitrary data to the pipeline and can pass<code>Context.NONE \r\n    </code> or <code>null \r\n    </code> . Each context object is immutable. The<code>addData(Object, Object) \r\n    </code> method creates a new <code>Context \r\n    </code> object that refers to its parent, forming a linked list. </p>"
  syntax:
    content: public class Context
- uid: com.azure.data.appconfiguration.ConfigurationClientBuilder
  parent: com.azure.data.appconfiguration
  href: com.azure.data.appconfiguration.ConfigurationClientBuilder.yml
  name: ConfigurationClientBuilder
  nameWithType: ConfigurationClientBuilder
  fullName: com.azure.data.appconfiguration.ConfigurationClientBuilder
  type: Class
  summary: "<p>This class provides a fluent builder API to help aid the configuration and instantiation of the <xref uid=\"com.azure.data.appconfiguration.ConfigurationAsyncClient\" data-throw-if-not-resolved=\"false\">ConfigurationAsyncClient</xref> and <xref uid=\"com.azure.data.appconfiguration.ConfigurationClient\" data-throw-if-not-resolved=\"false\">ConfigurationClient</xref>, by calling <xref uid=\"com.azure.data.appconfiguration.ConfigurationClientBuilder.buildAsyncClient()\" data-throw-if-not-resolved=\"false\">buildAsyncClient</xref> and <xref uid=\"com.azure.data.appconfiguration.ConfigurationClientBuilder.buildClient()\" data-throw-if-not-resolved=\"false\">buildClient</xref> respectively to construct an instance of the desired client.</p>\r\n<p>The client needs the service endpoint of the Azure App Configuration store and access credential. <xref uid=\"\" data-throw-if-not-resolved=\"false\">ConfigurationClientCredentials</xref> gives the builder the service endpoint and access credential it requires to construct a client, set the ConfigurationClientCredentials with <xref uid=\"com.azure.data.appconfiguration.ConfigurationClientBuilder.credential(ConfigurationClientCredentials)\" data-throw-if-not-resolved=\"false\">this</xref>.</p>\r\n<p>\r\n  <b>Instantiating an asynchronous Configuration Client</b>\r\n</p>\r\n<p>{ com.azure.data.applicationconfig.async.configurationclient.instantiation}</p>\r\n<p>\r\n  <b>Instantiating a synchronous Configuration Client</b>\r\n</p>\r\n<p>{ com.azure.data.applicationconfig.configurationclient.instantiation}</p>\r\n<p>Another way to construct the client is using a <xref uid=\"\" data-throw-if-not-resolved=\"false\">HttpPipeline</xref>. The pipeline gives the client an authenticated way to communicate with the service but it doesn't contain the service endpoint. Set the pipeline with <xref uid=\"com.azure.data.appconfiguration.ConfigurationClientBuilder.pipeline(HttpPipeline)\" data-throw-if-not-resolved=\"false\">this</xref>, additionally set the service endpoint with <xref uid=\"com.azure.data.appconfiguration.ConfigurationClientBuilder.endpoint(String)\" data-throw-if-not-resolved=\"false\">this</xref>. Using a pipeline requires additional setup but allows for finer control on how the <xref uid=\"com.azure.data.appconfiguration.ConfigurationAsyncClient\" data-throw-if-not-resolved=\"false\">ConfigurationAsyncClient</xref> and <xref uid=\"com.azure.data.appconfiguration.ConfigurationClient\" data-throw-if-not-resolved=\"false\">ConfigurationClient</xref> it built.</p>\r\n<p>{ com.azure.data.applicationconfig.configurationclient.pipeline.instantiation}</p>\r\n<p></p>"
  syntax:
    content: public class ConfigurationClientBuilder
