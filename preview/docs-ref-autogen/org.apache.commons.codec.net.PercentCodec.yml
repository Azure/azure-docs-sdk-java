### YamlMime:ManagedReference
items:
- uid: org.apache.commons.codec.net.PercentCodec
  id: PercentCodec
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.apache.commons.codec.net
  children:
  - org.apache.commons.codec.net.PercentCodec.PercentCodec()
  - org.apache.commons.codec.net.PercentCodec.PercentCodec(byte[],boolean)
  - org.apache.commons.codec.net.PercentCodec.decode(byte[])
  - org.apache.commons.codec.net.PercentCodec.decode(java.lang.Object)
  - org.apache.commons.codec.net.PercentCodec.encode(byte[])
  - org.apache.commons.codec.net.PercentCodec.encode(java.lang.Object)
  langs:
  - java
  name: PercentCodec
  nameWithType: PercentCodec
  fullName: org.apache.commons.codec.net.PercentCodec
  type: Class
  package: org.apache.commons.codec.net
  summary: >-
    Implements the Percent-Encoding scheme, as described in HTTP 1.1 specification. For extensibility, an array of special US-ASCII characters can be specified in order to perform proper URI encoding for the different parts of the URI.


    This class is immutable. It is also thread-safe besides using BitSet which is not thread-safe, but its public interface only call the access
  syntax:
    content: public class PercentCodec implements BinaryEncoder, BinaryDecoder
  inheritance:
  - java.lang.Object
  implements:
  - org.apache.commons.codec.BinaryEncoder
  - org.apache.commons.codec.BinaryDecoder
  inheritedMembers:
  - java.lang.Object.clone()
  - java.lang.Object.equals(java.lang.Object)
  - java.lang.Object.finalize()
  - java.lang.Object.getClass()
  - java.lang.Object.hashCode()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.toString()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
- uid: org.apache.commons.codec.net.PercentCodec.PercentCodec()
  id: PercentCodec()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.apache.commons.codec.net.PercentCodec
  langs:
  - java
  name: PercentCodec()
  nameWithType: PercentCodec.PercentCodec()
  fullName: org.apache.commons.codec.net.PercentCodec.PercentCodec()
  overload: org.apache.commons.codec.net.PercentCodec.PercentCodec*
  type: Constructor
  package: org.apache.commons.codec.net
  summary: Constructs a Percent coded that will encode all the non US-ASCII characters using the Percent-Encoding while it will not encode all the US-ASCII characters, except for character '%' that is used as escape character for Percent-Encoding.
  syntax:
    content: public PercentCodec()
- uid: org.apache.commons.codec.net.PercentCodec.PercentCodec(byte[],boolean)
  id: PercentCodec(byte[],boolean)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.apache.commons.codec.net.PercentCodec
  langs:
  - java
  name: PercentCodec(byte[] alwaysEncodeChars, boolean plusForSpace)
  nameWithType: PercentCodec.PercentCodec(byte[] alwaysEncodeChars, boolean plusForSpace)
  fullName: org.apache.commons.codec.net.PercentCodec.PercentCodec(byte[] alwaysEncodeChars, boolean plusForSpace)
  overload: org.apache.commons.codec.net.PercentCodec.PercentCodec*
  type: Constructor
  package: org.apache.commons.codec.net
  summary: Constructs a Percent codec by specifying the characters that belong to US-ASCII that should always be encoded. The rest US-ASCII characters will not be encoded, except for character '%' that is used as escape character for Percent-Encoding.
  syntax:
    content: public PercentCodec(byte[] alwaysEncodeChars, boolean plusForSpace)
    parameters:
    - id: alwaysEncodeChars
      type: byte[]
      description: the unsafe characters that should always be encoded
    - id: plusForSpace
      type: boolean
      description: the flag defining if the space character should be encoded as '+'
- uid: org.apache.commons.codec.net.PercentCodec.decode(byte[])
  id: decode(byte[])
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.apache.commons.codec.net.PercentCodec
  langs:
  - java
  name: decode(byte[] bytes)
  nameWithType: PercentCodec.decode(byte[] bytes)
  fullName: org.apache.commons.codec.net.PercentCodec.decode(byte[] bytes)
  overload: org.apache.commons.codec.net.PercentCodec.decode*
  type: Method
  package: org.apache.commons.codec.net
  summary: Decode bytes encoded with Percent-Encoding based on RFC 3986. The reverse process is performed in order to decode the encoded characters to Unicode.
  syntax:
    content: public byte[] decode(byte[] bytes)
    parameters:
    - id: bytes
      type: byte[]
    return:
      type: byte[]
  exceptions:
  - type: org.apache.commons.codec.DecoderException
- uid: org.apache.commons.codec.net.PercentCodec.decode(java.lang.Object)
  id: decode(java.lang.Object)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.apache.commons.codec.net.PercentCodec
  langs:
  - java
  name: decode(Object obj)
  nameWithType: PercentCodec.decode(Object obj)
  fullName: org.apache.commons.codec.net.PercentCodec.decode(Object obj)
  overload: org.apache.commons.codec.net.PercentCodec.decode*
  type: Method
  package: org.apache.commons.codec.net
  summary: Decodes a byte\[\] Object, whose bytes are encoded with Percent-Encoding.
  syntax:
    content: public Object decode(Object obj)
    parameters:
    - id: obj
      type: java.lang.Object
      description: the object to decode
    return:
      type: java.lang.Object
      description: the decoding result byte[] as Object
  exceptions:
  - type: org.apache.commons.codec.DecoderException
    description: if the object is not a byte array
- uid: org.apache.commons.codec.net.PercentCodec.encode(byte[])
  id: encode(byte[])
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.apache.commons.codec.net.PercentCodec
  langs:
  - java
  name: encode(byte[] bytes)
  nameWithType: PercentCodec.encode(byte[] bytes)
  fullName: org.apache.commons.codec.net.PercentCodec.encode(byte[] bytes)
  overload: org.apache.commons.codec.net.PercentCodec.encode*
  type: Method
  package: org.apache.commons.codec.net
  summary: Percent-Encoding based on RFC 3986. The non US-ASCII characters are encoded, as well as the US-ASCII characters that are configured to be always encoded.
  syntax:
    content: public byte[] encode(byte[] bytes)
    parameters:
    - id: bytes
      type: byte[]
    return:
      type: byte[]
  exceptions:
  - type: org.apache.commons.codec.EncoderException
- uid: org.apache.commons.codec.net.PercentCodec.encode(java.lang.Object)
  id: encode(java.lang.Object)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.apache.commons.codec.net.PercentCodec
  langs:
  - java
  name: encode(Object obj)
  nameWithType: PercentCodec.encode(Object obj)
  fullName: org.apache.commons.codec.net.PercentCodec.encode(Object obj)
  overload: org.apache.commons.codec.net.PercentCodec.encode*
  type: Method
  package: org.apache.commons.codec.net
  summary: Encodes an object into using the Percent-Encoding. Only byte\[\] objects are accepted.
  syntax:
    content: public Object encode(Object obj)
    parameters:
    - id: obj
      type: java.lang.Object
      description: the object to encode
    return:
      type: java.lang.Object
      description: the encoding result byte[] as Object
  exceptions:
  - type: org.apache.commons.codec.EncoderException
    description: if the object is not a byte array
references:
- uid: org.apache.commons.codec.net.PercentCodec.PercentCodec*
  name: PercentCodec
  nameWithType: PercentCodec.PercentCodec
  fullName: org.apache.commons.codec.net.PercentCodec.PercentCodec
  package: org.apache.commons.codec.net
- uid: byte[]
  spec.java:
  - uid: byte
    name: byte
    fullName: byte
  - name: '[]'
    fullName: '[]'
- uid: boolean
  spec.java:
  - uid: boolean
    name: boolean
    fullName: boolean
- uid: org.apache.commons.codec.EncoderException
  name: EncoderException
  nameWithType: EncoderException
  fullName: org.apache.commons.codec.EncoderException
- uid: org.apache.commons.codec.net.PercentCodec.encode*
  name: encode
  nameWithType: PercentCodec.encode
  fullName: org.apache.commons.codec.net.PercentCodec.encode
  package: org.apache.commons.codec.net
- uid: org.apache.commons.codec.DecoderException
  name: DecoderException
  nameWithType: DecoderException
  fullName: org.apache.commons.codec.DecoderException
- uid: org.apache.commons.codec.net.PercentCodec.decode*
  name: decode
  nameWithType: PercentCodec.decode
  fullName: org.apache.commons.codec.net.PercentCodec.decode
  package: org.apache.commons.codec.net
- uid: java.lang.Object
  spec.java:
  - uid: java.lang.Object
    name: Object
    fullName: java.lang.Object
- uid: org.apache.commons.codec.BinaryEncoder
  name: BinaryEncoder
  nameWithType: BinaryEncoder
  fullName: org.apache.commons.codec.BinaryEncoder
- uid: org.apache.commons.codec.BinaryDecoder
  name: BinaryDecoder
  nameWithType: BinaryDecoder
  fullName: org.apache.commons.codec.BinaryDecoder
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: java.lang.Object.finalize()
  name: Object.finalize()
  nameWithType: Object.finalize()
  fullName: java.lang.Object.finalize()
- uid: java.lang.Object.clone()
  name: Object.clone()
  nameWithType: Object.clone()
  fullName: java.lang.Object.clone()
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: java.lang.Object.equals(java.lang.Object)
  name: Object.equals(Object)
  nameWithType: Object.equals(Object)
  fullName: java.lang.Object.equals(java.lang.Object)
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.lang.Object.hashCode()
  name: Object.hashCode()
  nameWithType: Object.hashCode()
  fullName: java.lang.Object.hashCode()
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: java.lang.Object.toString()
  name: Object.toString()
  nameWithType: Object.toString()
  fullName: java.lang.Object.toString()
