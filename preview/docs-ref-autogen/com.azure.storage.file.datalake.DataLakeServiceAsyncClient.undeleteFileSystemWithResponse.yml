### YamlMime:JavaMember
uid: "com.azure.storage.file.datalake.DataLakeServiceAsyncClient.undeleteFileSystemWithResponse*"
fullName: "com.azure.storage.file.datalake.DataLakeServiceAsyncClient.undeleteFileSystemWithResponse"
name: "undeleteFileSystemWithResponse"
nameWithType: "DataLakeServiceAsyncClient.undeleteFileSystemWithResponse"
members:
- uid: "com.azure.storage.file.datalake.DataLakeServiceAsyncClient.undeleteFileSystemWithResponse(com.azure.storage.file.datalake.options.FileSystemUndeleteOptions)"
  fullName: "com.azure.storage.file.datalake.DataLakeServiceAsyncClient.undeleteFileSystemWithResponse(FileSystemUndeleteOptions options)"
  name: "undeleteFileSystemWithResponse(FileSystemUndeleteOptions options)"
  nameWithType: "DataLakeServiceAsyncClient.undeleteFileSystemWithResponse(FileSystemUndeleteOptions options)"
  summary: "Restores a previously deleted file system. The restored file system will be renamed to the `destinationFileSystemName` if provided in `options`. Otherwise `deletedFileSystemName` is used as he destination file system name. If the file system associated with provided `destinationFileSystemName` already exists, this call will result in a 409 (conflict). This API is only functional if Container Soft Delete is enabled for the storage account associated with the file system.\n\n**Code Samples**\n\n```java\nListFileSystemsOptions listFileSystemsOptions = new ListFileSystemsOptions();\n listFileSystemsOptions.getDetails().setRetrieveDeleted(true);\n client.listFileSystems(listFileSystemsOptions).flatMap(\n     deletedFileSystem -> {\n         Mono<DataLakeFileSystemAsyncClient> fileSystemClient = client.undeleteFileSystemWithResponse(\n             new FileSystemUndeleteOptions(deletedFileSystem.getName(), deletedFileSystem.getVersion())\n                 .setDestinationFileSystemName(deletedFileSystem.getName() + \"V2\"))\n             .map(Response::getValue);\n         return fileSystemClient;\n     }\n ).then().block();\n```"
  parameters:
  - description: "<xref uid=\"com.azure.storage.file.datalake.options.FileSystemUndeleteOptions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"FileSystemUndeleteOptions\"></xref>."
    name: "options"
    type: "<xref href=\"com.azure.storage.file.datalake.options.FileSystemUndeleteOptions?alt=com.azure.storage.file.datalake.options.FileSystemUndeleteOptions&text=FileSystemUndeleteOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<DataLakeFileSystemAsyncClient>> undeleteFileSystemWithResponse(FileSystemUndeleteOptions options)"
  returns:
    description: "A <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> containing a <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> whose <xref uid=\"com.azure.core.http.rest.Response.getValue*\" data-throw-if-not-resolved=\"false\" data-raw-source=\"value\"></xref> contains a <xref uid=\"com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DataLakeFileSystemAsyncClient\"></xref> used to interact with the restored file system."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient?alt=com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient&text=DataLakeFileSystemAsyncClient\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
type: "method"
metadata: {}
package: "com.azure.storage.file.datalake"
artifact: com.azure:azure-storage-file-datalake:12.5.0-beta.2
