### YamlMime:ManagedReference
items:
- uid: com.azure.cosmos.implementation.apachecommons.lang.tuple.Pair
  id: Pair
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.apachecommons.lang.tuple
  children:
  - com.azure.cosmos.implementation.apachecommons.lang.tuple.Pair.<L,R>of(L,R)
  - com.azure.cosmos.implementation.apachecommons.lang.tuple.Pair.Pair()
  - com.azure.cosmos.implementation.apachecommons.lang.tuple.Pair.compareTo(com.azure.cosmos.implementation.apachecommons.lang.tuple.Pair<L,R>)
  - com.azure.cosmos.implementation.apachecommons.lang.tuple.Pair.equals(java.lang.Object)
  - com.azure.cosmos.implementation.apachecommons.lang.tuple.Pair.getKey()
  - com.azure.cosmos.implementation.apachecommons.lang.tuple.Pair.getLeft()
  - com.azure.cosmos.implementation.apachecommons.lang.tuple.Pair.getRight()
  - com.azure.cosmos.implementation.apachecommons.lang.tuple.Pair.getValue()
  - com.azure.cosmos.implementation.apachecommons.lang.tuple.Pair.hashCode()
  - com.azure.cosmos.implementation.apachecommons.lang.tuple.Pair.toString()
  - com.azure.cosmos.implementation.apachecommons.lang.tuple.Pair.toString(java.lang.String)
  langs:
  - java
  name: Pair<L,R>
  nameWithType: Pair<L,R>
  fullName: com.azure.cosmos.implementation.apachecommons.lang.tuple.Pair<L,R>
  type: Class
  package: com.azure.cosmos.implementation.apachecommons.lang.tuple
  syntax:
    content: public abstract class Pair<L,R> implements Map.Entry<L,R>, Comparable<Pair<L,R>>, Serializable
    typeParameters:
    - id: L
    - id: R
  inheritance:
  - java.lang.Object
  implements:
  - java.util.Map.Entry<L,R>
  - java.lang.Comparable<com.azure.cosmos.implementation.apachecommons.lang.tuple.Pair<L,R>>
  - java.io.Serializable
  inheritedMembers:
  - java.lang.Object.clone()
  - java.lang.Object.equals(java.lang.Object)
  - java.lang.Object.finalize()
  - java.lang.Object.getClass()
  - java.lang.Object.hashCode()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.toString()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
- uid: com.azure.cosmos.implementation.apachecommons.lang.tuple.Pair.<L,R>of(L,R)
  id: <L,R>of(L,R)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.apachecommons.lang.tuple.Pair
  langs:
  - java
  name: <L,R>of(L left, R right)
  nameWithType: Pair<L,R>.<L,R>of(L left, R right)
  fullName: com.azure.cosmos.implementation.apachecommons.lang.tuple.Pair<L,R>.<L,R>of(L left, R right)
  overload: com.azure.cosmos.implementation.apachecommons.lang.tuple.Pair.of*
  type: Method
  package: com.azure.cosmos.implementation.apachecommons.lang.tuple
  summary: >-
    Obtains an immutable pair of two objects inferring the generic types.


    This factory allows the pair to be created using inference to obtain the generic types.
  syntax:
    content: public static Pair<L,R> <L,R>of(L left, R right)
    parameters:
    - id: left
      type: L
      description: the left element, may be null
    - id: right
      type: R
      description: the right element, may be null
    return:
      type: com.azure.cosmos.implementation.apachecommons.lang.tuple.Pair<L,R>
      description: a pair formed from the two parameters, not null
- uid: com.azure.cosmos.implementation.apachecommons.lang.tuple.Pair.Pair()
  id: Pair()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.apachecommons.lang.tuple.Pair
  langs:
  - java
  name: Pair()
  nameWithType: Pair<L,R>.Pair()
  fullName: com.azure.cosmos.implementation.apachecommons.lang.tuple.Pair<L,R>.Pair()
  overload: com.azure.cosmos.implementation.apachecommons.lang.tuple.Pair.Pair*
  type: Constructor
  package: com.azure.cosmos.implementation.apachecommons.lang.tuple
  syntax:
    content: public Pair()
- uid: com.azure.cosmos.implementation.apachecommons.lang.tuple.Pair.compareTo(com.azure.cosmos.implementation.apachecommons.lang.tuple.Pair<L,R>)
  id: compareTo(com.azure.cosmos.implementation.apachecommons.lang.tuple.Pair<L,R>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.apachecommons.lang.tuple.Pair
  langs:
  - java
  name: compareTo(Pair<L,R> other)
  nameWithType: Pair<L,R>.compareTo(Pair<L,R> other)
  fullName: com.azure.cosmos.implementation.apachecommons.lang.tuple.Pair<L,R>.compareTo(Pair<L,R> other)
  overload: com.azure.cosmos.implementation.apachecommons.lang.tuple.Pair.compareTo*
  type: Method
  package: com.azure.cosmos.implementation.apachecommons.lang.tuple
  summary: Compares the pair based on the left element followed by the right element. The types must be `Comparable`.
  syntax:
    content: public int compareTo(Pair<L,R> other)
    parameters:
    - id: other
      type: com.azure.cosmos.implementation.apachecommons.lang.tuple.Pair<L,R>
      description: the other pair, not null
    return:
      type: int
      description: negative if this is less, zero if equal, positive if greater
- uid: com.azure.cosmos.implementation.apachecommons.lang.tuple.Pair.equals(java.lang.Object)
  id: equals(java.lang.Object)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.apachecommons.lang.tuple.Pair
  langs:
  - java
  name: equals(Object obj)
  nameWithType: Pair<L,R>.equals(Object obj)
  fullName: com.azure.cosmos.implementation.apachecommons.lang.tuple.Pair<L,R>.equals(Object obj)
  overload: com.azure.cosmos.implementation.apachecommons.lang.tuple.Pair.equals*
  type: Method
  package: com.azure.cosmos.implementation.apachecommons.lang.tuple
  summary: Compares this pair to another based on the two elements.
  syntax:
    content: public boolean equals(Object obj)
    parameters:
    - id: obj
      type: java.lang.Object
      description: the object to compare to, null returns false
    return:
      type: boolean
      description: true if the elements of the pair are equal
- uid: com.azure.cosmos.implementation.apachecommons.lang.tuple.Pair.getKey()
  id: getKey()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.apachecommons.lang.tuple.Pair
  langs:
  - java
  name: getKey()
  nameWithType: Pair<L,R>.getKey()
  fullName: com.azure.cosmos.implementation.apachecommons.lang.tuple.Pair<L,R>.getKey()
  overload: com.azure.cosmos.implementation.apachecommons.lang.tuple.Pair.getKey*
  type: Method
  package: com.azure.cosmos.implementation.apachecommons.lang.tuple
  summary: >-
    Gets the key from this pair.


    This method implements the `Map.Entry` interface returning the left element as the key.
  syntax:
    content: public final L getKey()
    return:
      type: L
      description: the left element as the key, may be null
- uid: com.azure.cosmos.implementation.apachecommons.lang.tuple.Pair.getLeft()
  id: getLeft()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.apachecommons.lang.tuple.Pair
  langs:
  - java
  name: getLeft()
  nameWithType: Pair<L,R>.getLeft()
  fullName: com.azure.cosmos.implementation.apachecommons.lang.tuple.Pair<L,R>.getLeft()
  overload: com.azure.cosmos.implementation.apachecommons.lang.tuple.Pair.getLeft*
  type: Method
  package: com.azure.cosmos.implementation.apachecommons.lang.tuple
  summary: >-
    Gets the left element from this pair.


    When treated as a key-value pair, this is the key.
  syntax:
    content: public abstract L getLeft()
    return:
      type: L
      description: the left element, may be null
- uid: com.azure.cosmos.implementation.apachecommons.lang.tuple.Pair.getRight()
  id: getRight()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.apachecommons.lang.tuple.Pair
  langs:
  - java
  name: getRight()
  nameWithType: Pair<L,R>.getRight()
  fullName: com.azure.cosmos.implementation.apachecommons.lang.tuple.Pair<L,R>.getRight()
  overload: com.azure.cosmos.implementation.apachecommons.lang.tuple.Pair.getRight*
  type: Method
  package: com.azure.cosmos.implementation.apachecommons.lang.tuple
  summary: >-
    Gets the right element from this pair.


    When treated as a key-value pair, this is the value.
  syntax:
    content: public abstract R getRight()
    return:
      type: R
      description: the right element, may be null
- uid: com.azure.cosmos.implementation.apachecommons.lang.tuple.Pair.getValue()
  id: getValue()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.apachecommons.lang.tuple.Pair
  langs:
  - java
  name: getValue()
  nameWithType: Pair<L,R>.getValue()
  fullName: com.azure.cosmos.implementation.apachecommons.lang.tuple.Pair<L,R>.getValue()
  overload: com.azure.cosmos.implementation.apachecommons.lang.tuple.Pair.getValue*
  type: Method
  package: com.azure.cosmos.implementation.apachecommons.lang.tuple
  summary: >-
    Gets the value from this pair.


    This method implements the `Map.Entry` interface returning the right element as the value.
  syntax:
    content: public R getValue()
    return:
      type: R
      description: the right element as the value, may be null
- uid: com.azure.cosmos.implementation.apachecommons.lang.tuple.Pair.hashCode()
  id: hashCode()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.apachecommons.lang.tuple.Pair
  langs:
  - java
  name: hashCode()
  nameWithType: Pair<L,R>.hashCode()
  fullName: com.azure.cosmos.implementation.apachecommons.lang.tuple.Pair<L,R>.hashCode()
  overload: com.azure.cosmos.implementation.apachecommons.lang.tuple.Pair.hashCode*
  type: Method
  package: com.azure.cosmos.implementation.apachecommons.lang.tuple
  summary: Returns a suitable hash code. The hash code follows the definition in `Map.Entry`.
  syntax:
    content: public int hashCode()
    return:
      type: int
      description: the hash code
- uid: com.azure.cosmos.implementation.apachecommons.lang.tuple.Pair.toString()
  id: toString()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.apachecommons.lang.tuple.Pair
  langs:
  - java
  name: toString()
  nameWithType: Pair<L,R>.toString()
  fullName: com.azure.cosmos.implementation.apachecommons.lang.tuple.Pair<L,R>.toString()
  overload: com.azure.cosmos.implementation.apachecommons.lang.tuple.Pair.toString*
  type: Method
  package: com.azure.cosmos.implementation.apachecommons.lang.tuple
  summary: Returns a String representation of this pair using the format `($left,$right)`.
  syntax:
    content: public String toString()
    return:
      type: java.lang.String
      description: a string describing this object, not null
- uid: com.azure.cosmos.implementation.apachecommons.lang.tuple.Pair.toString(java.lang.String)
  id: toString(java.lang.String)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.apachecommons.lang.tuple.Pair
  langs:
  - java
  name: toString(String format)
  nameWithType: Pair<L,R>.toString(String format)
  fullName: com.azure.cosmos.implementation.apachecommons.lang.tuple.Pair<L,R>.toString(String format)
  overload: com.azure.cosmos.implementation.apachecommons.lang.tuple.Pair.toString*
  type: Method
  package: com.azure.cosmos.implementation.apachecommons.lang.tuple
  summary: >-
    Formats the receiver using the given format.


    This uses <xref uid="" data-throw-if-not-resolved="false">java.util.Formattable</xref> to perform the formatting. Two variables may be used to embed the left and right elements. Use `%1$s` for the left element (key) and `%2$s` for the right element (value). The default format used by `toString()` is `(%1$s,%2$s)`.
  syntax:
    content: public String toString(String format)
    parameters:
    - id: format
      type: java.lang.String
      description: the format string, optionally containing <code>%1$s</code> and <code>%2$s</code>, not null
    return:
      type: java.lang.String
      description: the formatted string, not null
references:
- uid: com.azure.cosmos.implementation.apachecommons.lang.tuple.Pair.Pair*
  name: Pair
  nameWithType: Pair<L,R>.Pair
  fullName: com.azure.cosmos.implementation.apachecommons.lang.tuple.Pair<L,R>.Pair
  package: com.azure.cosmos.implementation.apachecommons.lang.tuple
- uid: L
  spec.java:
  - uid: L
    name: L
    fullName: L
- uid: R
  spec.java:
  - uid: R
    name: R
    fullName: R
- uid: com.azure.cosmos.implementation.apachecommons.lang.tuple.Pair<L,R>
  spec.java:
  - uid: com.azure.cosmos.implementation.apachecommons.lang.tuple.Pair
    name: Pair
    fullName: com.azure.cosmos.implementation.apachecommons.lang.tuple.Pair
  - name: <
    fullName: <
  - uid: L
    name: L
    fullName: L
  - name: ','
    fullName: ','
  - uid: R
    name: R
    fullName: R
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.apachecommons.lang.tuple.Pair.of*
  name: <L,R>of
  nameWithType: Pair<L,R>.<L,R>of
  fullName: com.azure.cosmos.implementation.apachecommons.lang.tuple.Pair<L,R>.<L,R>of
  package: com.azure.cosmos.implementation.apachecommons.lang.tuple
- uid: com.azure.cosmos.implementation.apachecommons.lang.tuple.Pair.getLeft*
  name: getLeft
  nameWithType: Pair<L,R>.getLeft
  fullName: com.azure.cosmos.implementation.apachecommons.lang.tuple.Pair<L,R>.getLeft
  package: com.azure.cosmos.implementation.apachecommons.lang.tuple
- uid: com.azure.cosmos.implementation.apachecommons.lang.tuple.Pair.getRight*
  name: getRight
  nameWithType: Pair<L,R>.getRight
  fullName: com.azure.cosmos.implementation.apachecommons.lang.tuple.Pair<L,R>.getRight
  package: com.azure.cosmos.implementation.apachecommons.lang.tuple
- uid: com.azure.cosmos.implementation.apachecommons.lang.tuple.Pair.getKey*
  name: getKey
  nameWithType: Pair<L,R>.getKey
  fullName: com.azure.cosmos.implementation.apachecommons.lang.tuple.Pair<L,R>.getKey
  package: com.azure.cosmos.implementation.apachecommons.lang.tuple
- uid: com.azure.cosmos.implementation.apachecommons.lang.tuple.Pair.getValue*
  name: getValue
  nameWithType: Pair<L,R>.getValue
  fullName: com.azure.cosmos.implementation.apachecommons.lang.tuple.Pair<L,R>.getValue
  package: com.azure.cosmos.implementation.apachecommons.lang.tuple
- uid: int
  spec.java:
  - uid: int
    name: int
    fullName: int
- uid: com.azure.cosmos.implementation.apachecommons.lang.tuple.Pair.compareTo*
  name: compareTo
  nameWithType: Pair<L,R>.compareTo
  fullName: com.azure.cosmos.implementation.apachecommons.lang.tuple.Pair<L,R>.compareTo
  package: com.azure.cosmos.implementation.apachecommons.lang.tuple
- uid: java.lang.Object
  spec.java:
  - uid: java.lang.Object
    name: Object
    fullName: java.lang.Object
- uid: boolean
  spec.java:
  - uid: boolean
    name: boolean
    fullName: boolean
- uid: com.azure.cosmos.implementation.apachecommons.lang.tuple.Pair.equals*
  name: equals
  nameWithType: Pair<L,R>.equals
  fullName: com.azure.cosmos.implementation.apachecommons.lang.tuple.Pair<L,R>.equals
  package: com.azure.cosmos.implementation.apachecommons.lang.tuple
- uid: com.azure.cosmos.implementation.apachecommons.lang.tuple.Pair.hashCode*
  name: hashCode
  nameWithType: Pair<L,R>.hashCode
  fullName: com.azure.cosmos.implementation.apachecommons.lang.tuple.Pair<L,R>.hashCode
  package: com.azure.cosmos.implementation.apachecommons.lang.tuple
- uid: java.lang.String
  spec.java:
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
- uid: com.azure.cosmos.implementation.apachecommons.lang.tuple.Pair.toString*
  name: toString
  nameWithType: Pair<L,R>.toString
  fullName: com.azure.cosmos.implementation.apachecommons.lang.tuple.Pair<L,R>.toString
  package: com.azure.cosmos.implementation.apachecommons.lang.tuple
- uid: java.lang.Comparable<com.azure.cosmos.implementation.apachecommons.lang.tuple.Pair<L,R>>
  name: Comparable<Pair<L,R>>
  nameWithType: Comparable<Pair<L,R>>
  fullName: java.lang.Comparable<com.azure.cosmos.implementation.apachecommons.lang.tuple.Pair<L,R>>
- uid: java.util.Map.Entry<L,R>
  name: Map.Entry<L,R>
  nameWithType: Map.Entry<L,R>
  fullName: java.util.Map.Entry<L,R>
- uid: java.io.Serializable
  name: Serializable
  nameWithType: Serializable
  fullName: java.io.Serializable
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: java.lang.Object.finalize()
  name: Object.finalize()
  nameWithType: Object.finalize()
  fullName: java.lang.Object.finalize()
- uid: java.lang.Object.clone()
  name: Object.clone()
  nameWithType: Object.clone()
  fullName: java.lang.Object.clone()
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: java.lang.Object.equals(java.lang.Object)
  name: Object.equals(Object)
  nameWithType: Object.equals(Object)
  fullName: java.lang.Object.equals(java.lang.Object)
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.lang.Object.hashCode()
  name: Object.hashCode()
  nameWithType: Object.hashCode()
  fullName: java.lang.Object.hashCode()
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: java.lang.Object.toString()
  name: Object.toString()
  nameWithType: Object.toString()
  fullName: java.lang.Object.toString()
- uid: L,R
  name: L,R
  nameWithType: L,R
  fullName: L,R
- uid: java.lang.Comparable
  name: Comparable
  nameWithType: Comparable
  fullName: java.lang.Comparable
- uid: java.util.Map.Entry
  name: Map.Entry
  nameWithType: Map.Entry
  fullName: java.util.Map.Entry
