### YamlMime:ManagedReference
items:
- uid: com.azure.cosmos.implementation.guava25.base.Joiner
  id: Joiner
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.base
  children:
  - com.azure.cosmos.implementation.guava25.base.Joiner.<A>appendTo(A,java.lang.Iterable<?>)
  - com.azure.cosmos.implementation.guava25.base.Joiner.<A>appendTo(A,java.lang.Object,java.lang.Object,java.lang.Object...)
  - com.azure.cosmos.implementation.guava25.base.Joiner.<A>appendTo(A,java.lang.Object[])
  - com.azure.cosmos.implementation.guava25.base.Joiner.<A>appendTo(A,java.util.Iterator<?>)
  - com.azure.cosmos.implementation.guava25.base.Joiner.MapJoiner
  - com.azure.cosmos.implementation.guava25.base.Joiner.appendTo(java.lang.StringBuilder,java.lang.Iterable<?>)
  - com.azure.cosmos.implementation.guava25.base.Joiner.appendTo(java.lang.StringBuilder,java.lang.Object,java.lang.Object,java.lang.Object...)
  - com.azure.cosmos.implementation.guava25.base.Joiner.appendTo(java.lang.StringBuilder,java.lang.Object[])
  - com.azure.cosmos.implementation.guava25.base.Joiner.appendTo(java.lang.StringBuilder,java.util.Iterator<?>)
  - com.azure.cosmos.implementation.guava25.base.Joiner.join(java.lang.Iterable<?>)
  - com.azure.cosmos.implementation.guava25.base.Joiner.join(java.lang.Object,java.lang.Object,java.lang.Object...)
  - com.azure.cosmos.implementation.guava25.base.Joiner.join(java.lang.Object[])
  - com.azure.cosmos.implementation.guava25.base.Joiner.join(java.util.Iterator<?>)
  - com.azure.cosmos.implementation.guava25.base.Joiner.on(char)
  - com.azure.cosmos.implementation.guava25.base.Joiner.on(java.lang.String)
  - com.azure.cosmos.implementation.guava25.base.Joiner.skipNulls()
  - com.azure.cosmos.implementation.guava25.base.Joiner.useForNull(java.lang.String)
  - com.azure.cosmos.implementation.guava25.base.Joiner.withKeyValueSeparator(char)
  - com.azure.cosmos.implementation.guava25.base.Joiner.withKeyValueSeparator(java.lang.String)
  langs:
  - java
  name: Joiner
  nameWithType: Joiner
  fullName: com.azure.cosmos.implementation.guava25.base.Joiner
  type: Class
  package: com.azure.cosmos.implementation.guava25.base
  summary: >-
    An object which joins pieces of text (specified as an array, <xref uid="java.lang.Iterable" data-throw-if-not-resolved="false">Iterable</xref>, varargs or even a <xref uid="java.util.Map" data-throw-if-not-resolved="false">Map</xref>) with a separator. It either appends the results to an <xref uid="" data-throw-if-not-resolved="false">Appendable</xref> or returns them as a <xref uid="java.lang.String" data-throw-if-not-resolved="false">String</xref>. Example:


    ```java

    Joiner joiner = Joiner.on("; ").skipNulls();
      . . .
     return joiner.join("Harry", null, "Ron", "Hermione");
    ```


    This returns the string `"Harry; Ron; Hermione"`. Note that all input elements are converted to strings using <xref uid="java.lang.Object.toString()" data-throw-if-not-resolved="false">Object#toString()</xref> before being appended.


    If neither <xref uid="com.azure.cosmos.implementation.guava25.base.Joiner.skipNulls()" data-throw-if-not-resolved="false">#skipNulls()</xref> nor <xref uid="com.azure.cosmos.implementation.guava25.base.Joiner.useForNull(java.lang.String)" data-throw-if-not-resolved="false">#useForNull(String)</xref> is specified, the joining methods will throw <xref uid="" data-throw-if-not-resolved="false">NullPointerException</xref> if any given element is null.


    **Warning: joiner instances are always immutable**; a configuration method such as `useForNull` has no effect on the instance it is invoked on! You must store and use the new joiner instance returned by the method. This makes joiners thread-safe, and safe to store as `static final` constants.


    ```java

    // Bad! Do not do this!
     Joiner joiner = Joiner.on(',');
     joiner.skipNulls(); // does nothing!
     return joiner.join("wrong", null, "wrong");
    ```


    See the Guava User Guide article on [`Joiner`][Joiner].



    [Joiner]: https://github.com/google/guava/wiki/StringsExplained#joiner
  syntax:
    content: public class Joiner
  inheritance:
  - java.lang.Object
  inheritedMembers:
  - java.lang.Object.clone()
  - java.lang.Object.equals(java.lang.Object)
  - java.lang.Object.finalize()
  - java.lang.Object.getClass()
  - java.lang.Object.hashCode()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.toString()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
- uid: com.azure.cosmos.implementation.guava25.base.Joiner.<A>appendTo(A,java.lang.Iterable<?>)
  id: <A>appendTo(A,java.lang.Iterable<?>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.base.Joiner
  langs:
  - java
  name: <A>appendTo(A appendable, Iterable<?> parts)
  nameWithType: Joiner.<A>appendTo(A appendable, Iterable<?> parts)
  fullName: com.azure.cosmos.implementation.guava25.base.Joiner.<A>appendTo(A appendable, Iterable<?> parts)
  overload: com.azure.cosmos.implementation.guava25.base.Joiner.appendTo*
  type: Method
  package: com.azure.cosmos.implementation.guava25.base
  summary: Appends the string representation of each of `parts`, using the previously configured separator between each, to `appendable`.
  syntax:
    content: public A <A>appendTo(A appendable, Iterable<?> parts)
    parameters:
    - id: appendable
      type: A
    - id: parts
      type: java.lang.Iterable<?>
    return:
      type: A
  exceptions:
  - type: java.io.IOException
- uid: com.azure.cosmos.implementation.guava25.base.Joiner.<A>appendTo(A,java.lang.Object,java.lang.Object,java.lang.Object...)
  id: <A>appendTo(A,java.lang.Object,java.lang.Object,java.lang.Object...)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.base.Joiner
  langs:
  - java
  name: <A>appendTo(A appendable, Object first, Object second, Object[] rest)
  nameWithType: Joiner.<A>appendTo(A appendable, Object first, Object second, Object[] rest)
  fullName: com.azure.cosmos.implementation.guava25.base.Joiner.<A>appendTo(A appendable, Object first, Object second, Object[] rest)
  overload: com.azure.cosmos.implementation.guava25.base.Joiner.appendTo*
  type: Method
  package: com.azure.cosmos.implementation.guava25.base
  summary: Appends to `appendable` the string representation of each of the remaining arguments.
  syntax:
    content: public final A <A>appendTo(A appendable, Object first, Object second, Object[] rest)
    parameters:
    - id: appendable
      type: A
    - id: first
      type: java.lang.Object
    - id: second
      type: java.lang.Object
    - id: rest
      type: java.lang.Object[]
    return:
      type: A
  exceptions:
  - type: java.io.IOException
- uid: com.azure.cosmos.implementation.guava25.base.Joiner.<A>appendTo(A,java.lang.Object[])
  id: <A>appendTo(A,java.lang.Object[])
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.base.Joiner
  langs:
  - java
  name: <A>appendTo(A appendable, Object[] parts)
  nameWithType: Joiner.<A>appendTo(A appendable, Object[] parts)
  fullName: com.azure.cosmos.implementation.guava25.base.Joiner.<A>appendTo(A appendable, Object[] parts)
  overload: com.azure.cosmos.implementation.guava25.base.Joiner.appendTo*
  type: Method
  package: com.azure.cosmos.implementation.guava25.base
  summary: Appends the string representation of each of `parts`, using the previously configured separator between each, to `appendable`.
  syntax:
    content: public final A <A>appendTo(A appendable, Object[] parts)
    parameters:
    - id: appendable
      type: A
    - id: parts
      type: java.lang.Object[]
    return:
      type: A
  exceptions:
  - type: java.io.IOException
- uid: com.azure.cosmos.implementation.guava25.base.Joiner.<A>appendTo(A,java.util.Iterator<?>)
  id: <A>appendTo(A,java.util.Iterator<?>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.base.Joiner
  langs:
  - java
  name: <A>appendTo(A appendable, Iterator<?> parts)
  nameWithType: Joiner.<A>appendTo(A appendable, Iterator<?> parts)
  fullName: com.azure.cosmos.implementation.guava25.base.Joiner.<A>appendTo(A appendable, Iterator<?> parts)
  overload: com.azure.cosmos.implementation.guava25.base.Joiner.appendTo*
  type: Method
  package: com.azure.cosmos.implementation.guava25.base
  summary: Appends the string representation of each of `parts`, using the previously configured separator between each, to `appendable`.
  syntax:
    content: public A <A>appendTo(A appendable, Iterator<?> parts)
    parameters:
    - id: appendable
      type: A
    - id: parts
      type: java.util.Iterator<?>
    return:
      type: A
  exceptions:
  - type: java.io.IOException
- uid: com.azure.cosmos.implementation.guava25.base.Joiner.Joiner(com.azure.cosmos.implementation.guava25.base.Joiner)
  id: Joiner(com.azure.cosmos.implementation.guava25.base.Joiner)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.base.Joiner
  langs:
  - java
  name: Joiner(Joiner prototype)
  nameWithType: Joiner.Joiner(Joiner prototype)
  fullName: com.azure.cosmos.implementation.guava25.base.Joiner.Joiner(Joiner prototype)
  overload: com.azure.cosmos.implementation.guava25.base.Joiner.Joiner*
  type: Constructor
  package: com.azure.cosmos.implementation.guava25.base
  syntax:
    content: private Joiner(Joiner prototype)
    parameters:
    - id: prototype
      type: com.azure.cosmos.implementation.guava25.base.Joiner
- uid: com.azure.cosmos.implementation.guava25.base.Joiner.Joiner(java.lang.String)
  id: Joiner(java.lang.String)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.base.Joiner
  langs:
  - java
  name: Joiner(String separator)
  nameWithType: Joiner.Joiner(String separator)
  fullName: com.azure.cosmos.implementation.guava25.base.Joiner.Joiner(String separator)
  overload: com.azure.cosmos.implementation.guava25.base.Joiner.Joiner*
  type: Constructor
  package: com.azure.cosmos.implementation.guava25.base
  syntax:
    content: private Joiner(String separator)
    parameters:
    - id: separator
      type: java.lang.String
- uid: com.azure.cosmos.implementation.guava25.base.Joiner.appendTo(java.lang.StringBuilder,java.lang.Iterable<?>)
  id: appendTo(java.lang.StringBuilder,java.lang.Iterable<?>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.base.Joiner
  langs:
  - java
  name: appendTo(StringBuilder builder, Iterable<?> parts)
  nameWithType: Joiner.appendTo(StringBuilder builder, Iterable<?> parts)
  fullName: com.azure.cosmos.implementation.guava25.base.Joiner.appendTo(StringBuilder builder, Iterable<?> parts)
  overload: com.azure.cosmos.implementation.guava25.base.Joiner.appendTo*
  type: Method
  package: com.azure.cosmos.implementation.guava25.base
  summary: >-
    Appends the string representation of each of `parts`, using the previously configured separator between each, to `builder`. Identical to <xref uid="#appendTo(Appendable,
     Iterable)" data-throw-if-not-resolved="false">#appendTo(Appendable,
     Iterable)</xref>, except that it does not throw <xref uid="java.io.IOException" data-throw-if-not-resolved="false">IOException</xref>.
  syntax:
    content: public final StringBuilder appendTo(StringBuilder builder, Iterable<?> parts)
    parameters:
    - id: builder
      type: java.lang.StringBuilder
    - id: parts
      type: java.lang.Iterable<?>
    return:
      type: java.lang.StringBuilder
- uid: com.azure.cosmos.implementation.guava25.base.Joiner.appendTo(java.lang.StringBuilder,java.lang.Object,java.lang.Object,java.lang.Object...)
  id: appendTo(java.lang.StringBuilder,java.lang.Object,java.lang.Object,java.lang.Object...)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.base.Joiner
  langs:
  - java
  name: appendTo(StringBuilder builder, Object first, Object second, Object[] rest)
  nameWithType: Joiner.appendTo(StringBuilder builder, Object first, Object second, Object[] rest)
  fullName: com.azure.cosmos.implementation.guava25.base.Joiner.appendTo(StringBuilder builder, Object first, Object second, Object[] rest)
  overload: com.azure.cosmos.implementation.guava25.base.Joiner.appendTo*
  type: Method
  package: com.azure.cosmos.implementation.guava25.base
  summary: Appends to `builder` the string representation of each of the remaining arguments. Identical to <xref uid="com.azure.cosmos.implementation.guava25.base.Joiner.appendTo*" data-throw-if-not-resolved="false">#appendTo(Appendable, Object, Object, Object...)</xref>, except that it does not throw <xref uid="java.io.IOException" data-throw-if-not-resolved="false">IOException</xref>.
  syntax:
    content: public final StringBuilder appendTo(StringBuilder builder, Object first, Object second, Object[] rest)
    parameters:
    - id: builder
      type: java.lang.StringBuilder
    - id: first
      type: java.lang.Object
    - id: second
      type: java.lang.Object
    - id: rest
      type: java.lang.Object[]
    return:
      type: java.lang.StringBuilder
- uid: com.azure.cosmos.implementation.guava25.base.Joiner.appendTo(java.lang.StringBuilder,java.lang.Object[])
  id: appendTo(java.lang.StringBuilder,java.lang.Object[])
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.base.Joiner
  langs:
  - java
  name: appendTo(StringBuilder builder, Object[] parts)
  nameWithType: Joiner.appendTo(StringBuilder builder, Object[] parts)
  fullName: com.azure.cosmos.implementation.guava25.base.Joiner.appendTo(StringBuilder builder, Object[] parts)
  overload: com.azure.cosmos.implementation.guava25.base.Joiner.appendTo*
  type: Method
  package: com.azure.cosmos.implementation.guava25.base
  summary: >-
    Appends the string representation of each of `parts`, using the previously configured separator between each, to `builder`. Identical to <xref uid="#appendTo(Appendable,
     Iterable)" data-throw-if-not-resolved="false">#appendTo(Appendable,
     Iterable)</xref>, except that it does not throw <xref uid="java.io.IOException" data-throw-if-not-resolved="false">IOException</xref>.
  syntax:
    content: public final StringBuilder appendTo(StringBuilder builder, Object[] parts)
    parameters:
    - id: builder
      type: java.lang.StringBuilder
    - id: parts
      type: java.lang.Object[]
    return:
      type: java.lang.StringBuilder
- uid: com.azure.cosmos.implementation.guava25.base.Joiner.appendTo(java.lang.StringBuilder,java.util.Iterator<?>)
  id: appendTo(java.lang.StringBuilder,java.util.Iterator<?>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.base.Joiner
  langs:
  - java
  name: appendTo(StringBuilder builder, Iterator<?> parts)
  nameWithType: Joiner.appendTo(StringBuilder builder, Iterator<?> parts)
  fullName: com.azure.cosmos.implementation.guava25.base.Joiner.appendTo(StringBuilder builder, Iterator<?> parts)
  overload: com.azure.cosmos.implementation.guava25.base.Joiner.appendTo*
  type: Method
  package: com.azure.cosmos.implementation.guava25.base
  summary: >-
    Appends the string representation of each of `parts`, using the previously configured separator between each, to `builder`. Identical to <xref uid="#appendTo(Appendable,
     Iterable)" data-throw-if-not-resolved="false">#appendTo(Appendable,
     Iterable)</xref>, except that it does not throw <xref uid="java.io.IOException" data-throw-if-not-resolved="false">IOException</xref>.
  syntax:
    content: public final StringBuilder appendTo(StringBuilder builder, Iterator<?> parts)
    parameters:
    - id: builder
      type: java.lang.StringBuilder
    - id: parts
      type: java.util.Iterator<?>
    return:
      type: java.lang.StringBuilder
- uid: com.azure.cosmos.implementation.guava25.base.Joiner.join(java.lang.Iterable<?>)
  id: join(java.lang.Iterable<?>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.base.Joiner
  langs:
  - java
  name: join(Iterable<?> parts)
  nameWithType: Joiner.join(Iterable<?> parts)
  fullName: com.azure.cosmos.implementation.guava25.base.Joiner.join(Iterable<?> parts)
  overload: com.azure.cosmos.implementation.guava25.base.Joiner.join*
  type: Method
  package: com.azure.cosmos.implementation.guava25.base
  summary: Returns a string containing the string representation of each of `parts`, using the previously configured separator between each.
  syntax:
    content: public final String join(Iterable<?> parts)
    parameters:
    - id: parts
      type: java.lang.Iterable<?>
    return:
      type: java.lang.String
- uid: com.azure.cosmos.implementation.guava25.base.Joiner.join(java.lang.Object,java.lang.Object,java.lang.Object...)
  id: join(java.lang.Object,java.lang.Object,java.lang.Object...)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.base.Joiner
  langs:
  - java
  name: join(Object first, Object second, Object[] rest)
  nameWithType: Joiner.join(Object first, Object second, Object[] rest)
  fullName: com.azure.cosmos.implementation.guava25.base.Joiner.join(Object first, Object second, Object[] rest)
  overload: com.azure.cosmos.implementation.guava25.base.Joiner.join*
  type: Method
  package: com.azure.cosmos.implementation.guava25.base
  summary: Returns a string containing the string representation of each argument, using the previously configured separator between each.
  syntax:
    content: public final String join(Object first, Object second, Object[] rest)
    parameters:
    - id: first
      type: java.lang.Object
    - id: second
      type: java.lang.Object
    - id: rest
      type: java.lang.Object[]
    return:
      type: java.lang.String
- uid: com.azure.cosmos.implementation.guava25.base.Joiner.join(java.lang.Object[])
  id: join(java.lang.Object[])
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.base.Joiner
  langs:
  - java
  name: join(Object[] parts)
  nameWithType: Joiner.join(Object[] parts)
  fullName: com.azure.cosmos.implementation.guava25.base.Joiner.join(Object[] parts)
  overload: com.azure.cosmos.implementation.guava25.base.Joiner.join*
  type: Method
  package: com.azure.cosmos.implementation.guava25.base
  summary: Returns a string containing the string representation of each of `parts`, using the previously configured separator between each.
  syntax:
    content: public final String join(Object[] parts)
    parameters:
    - id: parts
      type: java.lang.Object[]
    return:
      type: java.lang.String
- uid: com.azure.cosmos.implementation.guava25.base.Joiner.join(java.util.Iterator<?>)
  id: join(java.util.Iterator<?>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.base.Joiner
  langs:
  - java
  name: join(Iterator<?> parts)
  nameWithType: Joiner.join(Iterator<?> parts)
  fullName: com.azure.cosmos.implementation.guava25.base.Joiner.join(Iterator<?> parts)
  overload: com.azure.cosmos.implementation.guava25.base.Joiner.join*
  type: Method
  package: com.azure.cosmos.implementation.guava25.base
  summary: Returns a string containing the string representation of each of `parts`, using the previously configured separator between each.
  syntax:
    content: public final String join(Iterator<?> parts)
    parameters:
    - id: parts
      type: java.util.Iterator<?>
    return:
      type: java.lang.String
- uid: com.azure.cosmos.implementation.guava25.base.Joiner.on(char)
  id: on(char)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.base.Joiner
  langs:
  - java
  name: on(char separator)
  nameWithType: Joiner.on(char separator)
  fullName: com.azure.cosmos.implementation.guava25.base.Joiner.on(char separator)
  overload: com.azure.cosmos.implementation.guava25.base.Joiner.on*
  type: Method
  package: com.azure.cosmos.implementation.guava25.base
  summary: Returns a joiner which automatically places `separator` between consecutive elements.
  syntax:
    content: public static Joiner on(char separator)
    parameters:
    - id: separator
      type: char
    return:
      type: com.azure.cosmos.implementation.guava25.base.Joiner
- uid: com.azure.cosmos.implementation.guava25.base.Joiner.on(java.lang.String)
  id: on(java.lang.String)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.base.Joiner
  langs:
  - java
  name: on(String separator)
  nameWithType: Joiner.on(String separator)
  fullName: com.azure.cosmos.implementation.guava25.base.Joiner.on(String separator)
  overload: com.azure.cosmos.implementation.guava25.base.Joiner.on*
  type: Method
  package: com.azure.cosmos.implementation.guava25.base
  summary: Returns a joiner which automatically places `separator` between consecutive elements.
  syntax:
    content: public static Joiner on(String separator)
    parameters:
    - id: separator
      type: java.lang.String
    return:
      type: com.azure.cosmos.implementation.guava25.base.Joiner
- uid: com.azure.cosmos.implementation.guava25.base.Joiner.skipNulls()
  id: skipNulls()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.base.Joiner
  langs:
  - java
  name: skipNulls()
  nameWithType: Joiner.skipNulls()
  fullName: com.azure.cosmos.implementation.guava25.base.Joiner.skipNulls()
  overload: com.azure.cosmos.implementation.guava25.base.Joiner.skipNulls*
  type: Method
  package: com.azure.cosmos.implementation.guava25.base
  summary: Returns a joiner with the same behavior as this joiner, except automatically skipping over any provided null elements.
  syntax:
    content: public Joiner skipNulls()
    return:
      type: com.azure.cosmos.implementation.guava25.base.Joiner
- uid: com.azure.cosmos.implementation.guava25.base.Joiner.useForNull(java.lang.String)
  id: useForNull(java.lang.String)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.base.Joiner
  langs:
  - java
  name: useForNull(String nullText)
  nameWithType: Joiner.useForNull(String nullText)
  fullName: com.azure.cosmos.implementation.guava25.base.Joiner.useForNull(String nullText)
  overload: com.azure.cosmos.implementation.guava25.base.Joiner.useForNull*
  type: Method
  package: com.azure.cosmos.implementation.guava25.base
  summary: Returns a joiner with the same behavior as this one, except automatically substituting `nullText` for any provided null elements.
  syntax:
    content: public Joiner useForNull(String nullText)
    parameters:
    - id: nullText
      type: java.lang.String
    return:
      type: com.azure.cosmos.implementation.guava25.base.Joiner
- uid: com.azure.cosmos.implementation.guava25.base.Joiner.withKeyValueSeparator(char)
  id: withKeyValueSeparator(char)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.base.Joiner
  langs:
  - java
  name: withKeyValueSeparator(char keyValueSeparator)
  nameWithType: Joiner.withKeyValueSeparator(char keyValueSeparator)
  fullName: com.azure.cosmos.implementation.guava25.base.Joiner.withKeyValueSeparator(char keyValueSeparator)
  overload: com.azure.cosmos.implementation.guava25.base.Joiner.withKeyValueSeparator*
  type: Method
  package: com.azure.cosmos.implementation.guava25.base
  summary: Returns a `MapJoiner` using the given key-value separator, and the same configuration as this `Joiner` otherwise.
  syntax:
    content: public Joiner.MapJoiner withKeyValueSeparator(char keyValueSeparator)
    parameters:
    - id: keyValueSeparator
      type: char
    return:
      type: com.azure.cosmos.implementation.guava25.base.Joiner.MapJoiner
- uid: com.azure.cosmos.implementation.guava25.base.Joiner.withKeyValueSeparator(java.lang.String)
  id: withKeyValueSeparator(java.lang.String)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.base.Joiner
  langs:
  - java
  name: withKeyValueSeparator(String keyValueSeparator)
  nameWithType: Joiner.withKeyValueSeparator(String keyValueSeparator)
  fullName: com.azure.cosmos.implementation.guava25.base.Joiner.withKeyValueSeparator(String keyValueSeparator)
  overload: com.azure.cosmos.implementation.guava25.base.Joiner.withKeyValueSeparator*
  type: Method
  package: com.azure.cosmos.implementation.guava25.base
  summary: Returns a `MapJoiner` using the given key-value separator, and the same configuration as this `Joiner` otherwise.
  syntax:
    content: public Joiner.MapJoiner withKeyValueSeparator(String keyValueSeparator)
    parameters:
    - id: keyValueSeparator
      type: java.lang.String
    return:
      type: com.azure.cosmos.implementation.guava25.base.Joiner.MapJoiner
references:
- uid: java.lang.String
  spec.java:
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
- uid: com.azure.cosmos.implementation.guava25.base.Joiner.Joiner*
  name: Joiner
  nameWithType: Joiner.Joiner
  fullName: com.azure.cosmos.implementation.guava25.base.Joiner.Joiner
  package: com.azure.cosmos.implementation.guava25.base
- uid: com.azure.cosmos.implementation.guava25.base.Joiner.on*
  name: on
  nameWithType: Joiner.on
  fullName: com.azure.cosmos.implementation.guava25.base.Joiner.on
  package: com.azure.cosmos.implementation.guava25.base
- uid: char
  spec.java:
  - uid: char
    name: char
    fullName: char
- uid: java.io.IOException
  spec.java:
  - uid: java.io.IOException
    name: IOException
    fullName: java.io.IOException
- uid: A
  spec.java:
  - uid: A
    name: A
    fullName: A
- uid: java.lang.Iterable<?>
  spec.java:
  - uid: java.lang.Iterable
    name: Iterable
    fullName: java.lang.Iterable
  - name: <
    fullName: <
  - uid: '?'
    name: '?'
    fullName: '?'
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.base.Joiner.appendTo*
  name: <A>appendTo
  nameWithType: Joiner.<A>appendTo
  fullName: com.azure.cosmos.implementation.guava25.base.Joiner.<A>appendTo
  package: com.azure.cosmos.implementation.guava25.base
- uid: java.util.Iterator<?>
  spec.java:
  - uid: java.util.Iterator
    name: Iterator
    fullName: java.util.Iterator
  - name: <
    fullName: <
  - uid: '?'
    name: '?'
    fullName: '?'
  - name: '>'
    fullName: '>'
- uid: java.lang.Object[]
  spec.java:
  - uid: java.lang.Object
    name: Object
    fullName: java.lang.Object
  - name: '[]'
    fullName: '[]'
- uid: java.lang.Object
  spec.java:
  - uid: java.lang.Object
    name: Object
    fullName: java.lang.Object
- uid: java.lang.StringBuilder
  spec.java:
  - uid: java.lang.StringBuilder
    name: StringBuilder
    fullName: java.lang.StringBuilder
- uid: com.azure.cosmos.implementation.guava25.base.Joiner.join*
  name: join
  nameWithType: Joiner.join
  fullName: com.azure.cosmos.implementation.guava25.base.Joiner.join
  package: com.azure.cosmos.implementation.guava25.base
- uid: com.azure.cosmos.implementation.guava25.base.Joiner.useForNull*
  name: useForNull
  nameWithType: Joiner.useForNull
  fullName: com.azure.cosmos.implementation.guava25.base.Joiner.useForNull
  package: com.azure.cosmos.implementation.guava25.base
- uid: com.azure.cosmos.implementation.guava25.base.Joiner.skipNulls*
  name: skipNulls
  nameWithType: Joiner.skipNulls
  fullName: com.azure.cosmos.implementation.guava25.base.Joiner.skipNulls
  package: com.azure.cosmos.implementation.guava25.base
- uid: com.azure.cosmos.implementation.guava25.base.Joiner.MapJoiner
  name: Joiner.MapJoiner
  nameWithType: Joiner.MapJoiner
  fullName: com.azure.cosmos.implementation.guava25.base.Joiner.MapJoiner
- uid: com.azure.cosmos.implementation.guava25.base.Joiner.withKeyValueSeparator*
  name: withKeyValueSeparator
  nameWithType: Joiner.withKeyValueSeparator
  fullName: com.azure.cosmos.implementation.guava25.base.Joiner.withKeyValueSeparator
  package: com.azure.cosmos.implementation.guava25.base
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: java.lang.Object.finalize()
  name: Object.finalize()
  nameWithType: Object.finalize()
  fullName: java.lang.Object.finalize()
- uid: java.lang.Object.clone()
  name: Object.clone()
  nameWithType: Object.clone()
  fullName: java.lang.Object.clone()
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: java.lang.Object.equals(java.lang.Object)
  name: Object.equals(Object)
  nameWithType: Object.equals(Object)
  fullName: java.lang.Object.equals(java.lang.Object)
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.lang.Object.hashCode()
  name: Object.hashCode()
  nameWithType: Object.hashCode()
  fullName: java.lang.Object.hashCode()
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: java.lang.Object.toString()
  name: Object.toString()
  nameWithType: Object.toString()
  fullName: java.lang.Object.toString()
- uid: java.lang.Iterable
  name: Iterable
  nameWithType: Iterable
  fullName: java.lang.Iterable
- uid: '?'
  name: '?'
  nameWithType: '?'
  fullName: '?'
- uid: java.util.Iterator
  name: Iterator
  nameWithType: Iterator
  fullName: java.util.Iterator
