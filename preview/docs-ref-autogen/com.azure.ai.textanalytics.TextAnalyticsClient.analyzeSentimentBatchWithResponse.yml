### YamlMime:JavaMember
uid: "com.azure.ai.textanalytics.TextAnalyticsClient.analyzeSentimentBatchWithResponse*"
fullName: "com.azure.ai.textanalytics.TextAnalyticsClient.analyzeSentimentBatchWithResponse"
name: "analyzeSentimentBatchWithResponse"
nameWithType: "TextAnalyticsClient.analyzeSentimentBatchWithResponse"
members:
- uid: "com.azure.ai.textanalytics.TextAnalyticsClient.analyzeSentimentBatchWithResponse(java.lang.Iterable<com.azure.ai.textanalytics.models.TextDocumentInput>,com.azure.ai.textanalytics.models.AnalyzeSentimentOptions,com.azure.core.util.Context)"
  fullName: "com.azure.ai.textanalytics.TextAnalyticsClient.analyzeSentimentBatchWithResponse(Iterable<TextDocumentInput> documents, AnalyzeSentimentOptions options, Context context)"
  name: "analyzeSentimentBatchWithResponse(Iterable<TextDocumentInput> documents, AnalyzeSentimentOptions options, Context context)"
  nameWithType: "TextAnalyticsClient.analyzeSentimentBatchWithResponse(Iterable<TextDocumentInput> documents, AnalyzeSentimentOptions options, Context context)"
  summary: "Returns a sentiment prediction, as well as confidence scores for each sentiment label (Positive, Negative, and Neutral) for the document and each sentence within it. If the `includeOpinionMining` of <xref uid=\"com.azure.ai.textanalytics.models.AnalyzeSentimentOptions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"AnalyzeSentimentOptions\"></xref> set to true, the output will include the opinion mining results. It mines the opinions of a sentence and conducts more granular analysis around the aspects in the text (also known as aspect-based sentiment analysis).\n\n**Code Sample**\n\nAnalyze sentiment and mine the opinions for each sentence in a list of <xref uid=\"com.azure.ai.textanalytics.models.TextDocumentInput\" data-throw-if-not-resolved=\"false\" data-raw-source=\"document\"></xref> with provided <xref uid=\"com.azure.ai.textanalytics.models.AnalyzeSentimentOptions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"AnalyzeSentimentOptions\"></xref> options.\n\n```java\nList<TextDocumentInput> textDocumentInputs = Arrays.asList(\n     new TextDocumentInput(\"1\", \"The hotel was dark and unclean. The restaurant had amazing gnocchi.\")\n         .setLanguage(\"en\"),\n     new TextDocumentInput(\"2\", \"The restaurant had amazing gnocchi. The hotel was dark and unclean.\")\n         .setLanguage(\"en\")\n );\n \n AnalyzeSentimentOptions options = new AnalyzeSentimentOptions().setIncludeOpinionMining(true)\n     .setIncludeStatistics(true);\n \n // Analyzing batch sentiments\n Response<AnalyzeSentimentResultCollection> response =\n     textAnalyticsClient.analyzeSentimentBatchWithResponse(textDocumentInputs, options, Context.NONE);\n \n // Response's status code\n System.out.printf(\"Status code of request response: %d%n\", response.getStatusCode());\n AnalyzeSentimentResultCollection resultCollection = response.getValue();\n \n // Batch statistics\n TextDocumentBatchStatistics batchStatistics = resultCollection.getStatistics();\n System.out.printf(\"A batch of documents statistics, transaction count: %s, valid document count: %s.%n\",\n     batchStatistics.getTransactionCount(), batchStatistics.getValidDocumentCount());\n \n // Analyzed sentiment for each of documents from a batch of documents\n resultCollection.forEach(analyzeSentimentResult -> {\n     System.out.printf(\"Document ID: %s%n\", analyzeSentimentResult.getId());\n     DocumentSentiment documentSentiment = analyzeSentimentResult.getDocumentSentiment();\n     documentSentiment.getSentences().forEach(sentenceSentiment -> {\n         System.out.printf(\"\\tSentence sentiment: %s%n\", sentenceSentiment.getSentiment());\n         sentenceSentiment.getMinedOpinions().forEach(minedOpinions -> {\n             AspectSentiment aspectSentiment = minedOpinions.getAspect();\n             System.out.printf(\"\\tAspect sentiment: %s, aspect text: %s%n\", aspectSentiment.getSentiment(),\n                 aspectSentiment.getText());\n             for (OpinionSentiment opinionSentiment : minedOpinions.getOpinions()) {\n                 System.out.printf(\"\\t\\t'%s' sentiment because of \\\"%s\\\". Is the opinion negated: %s.%n\",\n                     opinionSentiment.getSentiment(), opinionSentiment.getText(), opinionSentiment.isNegated());\n             }\n         });\n     });\n });\n```"
  parameters:
  - description: "A list of <xref uid=\"com.azure.ai.textanalytics.models.TextDocumentInput\" data-throw-if-not-resolved=\"false\" data-raw-source=\"documents\"></xref> to be analyzed.\n For text length limits, maximum batch size, and supported text encoding, see\n <a href=\"https://docs.microsoft.com/azure/cognitive-services/text-analytics/overview#data-limits\">data limits</a>."
    name: "documents"
    type: "<xref href=\"java.lang.Iterable?alt=java.lang.Iterable&text=Iterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.ai.textanalytics.models.TextDocumentInput?alt=com.azure.ai.textanalytics.models.TextDocumentInput&text=TextDocumentInput\" data-throw-if-not-resolved=\"False\" />&gt;"
  - description: "The additional configurable <xref uid=\"com.azure.ai.textanalytics.models.AnalyzeSentimentOptions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"options\"></xref> that may be passed when\n analyzing sentiments."
    name: "options"
    type: "<xref href=\"com.azure.ai.textanalytics.models.AnalyzeSentimentOptions?alt=com.azure.ai.textanalytics.models.AnalyzeSentimentOptions&text=AnalyzeSentimentOptions\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional context that is passed through the Http pipeline during the service call."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<AnalyzeSentimentResultCollection> analyzeSentimentBatchWithResponse(Iterable<TextDocumentInput> documents, AnalyzeSentimentOptions options, Context context)"
  returns:
    description: "A <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> that contains a <xref uid=\"com.azure.ai.textanalytics.util.AnalyzeSentimentResultCollection\" data-throw-if-not-resolved=\"false\" data-raw-source=\"AnalyzeSentimentResultCollection\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.ai.textanalytics.util.AnalyzeSentimentResultCollection?alt=com.azure.ai.textanalytics.util.AnalyzeSentimentResultCollection&text=AnalyzeSentimentResultCollection\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.ai.textanalytics.TextAnalyticsClient.analyzeSentimentBatchWithResponse(java.lang.Iterable<com.azure.ai.textanalytics.models.TextDocumentInput>,com.azure.ai.textanalytics.models.TextAnalyticsRequestOptions,com.azure.core.util.Context)"
  fullName: "com.azure.ai.textanalytics.TextAnalyticsClient.analyzeSentimentBatchWithResponse(Iterable<TextDocumentInput> documents, TextAnalyticsRequestOptions options, Context context)"
  name: "analyzeSentimentBatchWithResponse(Iterable<TextDocumentInput> documents, TextAnalyticsRequestOptions options, Context context)"
  nameWithType: "TextAnalyticsClient.analyzeSentimentBatchWithResponse(Iterable<TextDocumentInput> documents, TextAnalyticsRequestOptions options, Context context)"
  summary: "Returns a sentiment prediction, as well as confidence scores for each sentiment label (Positive, Negative, and Neutral) for the document and each sentence within it.\n\n**Code Sample**\n\nAnalyze sentiment in a list of <xref uid=\"com.azure.ai.textanalytics.models.TextDocumentInput\" data-throw-if-not-resolved=\"false\" data-raw-source=\"document\"></xref> with provided request options.\n\n```java\nList<TextDocumentInput> textDocumentInputs = Arrays.asList(\n     new TextDocumentInput(\"1\", \"The hotel was dark and unclean. The restaurant had amazing gnocchi.\")\n         .setLanguage(\"en\"),\n     new TextDocumentInput(\"2\", \"The restaurant had amazing gnocchi. The hotel was dark and unclean.\")\n         .setLanguage(\"en\")\n );\n \n // Analyzing batch sentiments\n Response<AnalyzeSentimentResultCollection> response =\n     textAnalyticsClient.analyzeSentimentBatchWithResponse(textDocumentInputs,\n         new TextAnalyticsRequestOptions().setIncludeStatistics(true), Context.NONE);\n \n // Response's status code\n System.out.printf(\"Status code of request response: %d%n\", response.getStatusCode());\n AnalyzeSentimentResultCollection resultCollection = response.getValue();\n \n // Batch statistics\n TextDocumentBatchStatistics batchStatistics = resultCollection.getStatistics();\n System.out.printf(\"A batch of documents statistics, transaction count: %s, valid document count: %s.%n\",\n     batchStatistics.getTransactionCount(), batchStatistics.getValidDocumentCount());\n \n // Analyzed sentiment for each of documents from a batch of documents\n resultCollection.forEach(analyzeSentimentResult -> {\n     System.out.printf(\"Document ID: %s%n\", analyzeSentimentResult.getId());\n     // Valid document\n     DocumentSentiment documentSentiment = analyzeSentimentResult.getDocumentSentiment();\n     System.out.printf(\n         \"Recognized document sentiment: %s, positive score: %.2f, neutral score: %.2f, \"\n             + \"negative score: %.2f.%n\",\n         documentSentiment.getSentiment(),\n         documentSentiment.getConfidenceScores().getPositive(),\n         documentSentiment.getConfidenceScores().getNeutral(),\n         documentSentiment.getConfidenceScores().getNegative());\n     documentSentiment.getSentences().forEach(sentenceSentiment -> {\n         System.out.printf(\n             \"Recognized sentence sentiment: %s, positive score: %.2f, neutral score: %.2f,\"\n                 + \" negative score: %.2f.%n\",\n             sentenceSentiment.getSentiment(),\n             sentenceSentiment.getConfidenceScores().getPositive(),\n             sentenceSentiment.getConfidenceScores().getNeutral(),\n             sentenceSentiment.getConfidenceScores().getNegative());\n     });\n });\n```"
  parameters:
  - description: "A list of <xref uid=\"com.azure.ai.textanalytics.models.TextDocumentInput\" data-throw-if-not-resolved=\"false\" data-raw-source=\"documents\"></xref> to be analyzed.\n For text length limits, maximum batch size, and supported text encoding, see\n <a href=\"https://docs.microsoft.com/azure/cognitive-services/text-analytics/overview#data-limits\">data limits</a>."
    name: "documents"
    type: "<xref href=\"java.lang.Iterable?alt=java.lang.Iterable&text=Iterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.ai.textanalytics.models.TextDocumentInput?alt=com.azure.ai.textanalytics.models.TextDocumentInput&text=TextDocumentInput\" data-throw-if-not-resolved=\"False\" />&gt;"
  - description: "The <xref uid=\"com.azure.ai.textanalytics.models.TextAnalyticsRequestOptions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"options\"></xref> to configure the scoring model for documents\n and show statistics."
    name: "options"
    type: "<xref href=\"com.azure.ai.textanalytics.models.TextAnalyticsRequestOptions?alt=com.azure.ai.textanalytics.models.TextAnalyticsRequestOptions&text=TextAnalyticsRequestOptions\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional context that is passed through the Http pipeline during the service call."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<AnalyzeSentimentResultCollection> analyzeSentimentBatchWithResponse(Iterable<TextDocumentInput> documents, TextAnalyticsRequestOptions options, Context context)"
  returns:
    description: "A <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> that contains a <xref uid=\"com.azure.ai.textanalytics.util.AnalyzeSentimentResultCollection\" data-throw-if-not-resolved=\"false\" data-raw-source=\"AnalyzeSentimentResultCollection\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.ai.textanalytics.util.AnalyzeSentimentResultCollection?alt=com.azure.ai.textanalytics.util.AnalyzeSentimentResultCollection&text=AnalyzeSentimentResultCollection\" data-throw-if-not-resolved=\"False\" />&gt;"
type: "method"
metadata: {}
package: "com.azure.ai.textanalytics"
artifact: com.azure:azure-ai-textanalytics:5.1.0-beta.3
