### YamlMime:JavaType
uid: "com.azure.security.keyvault.administration.KeyVaultBackupAsyncClient"
fullName: "com.azure.security.keyvault.administration.KeyVaultBackupAsyncClient"
name: "KeyVaultBackupAsyncClient"
nameWithType: "KeyVaultBackupAsyncClient"
summary: "The <xref uid=\"com.azure.security.keyvault.administration.KeyVaultBackupAsyncClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"KeyVaultBackupAsyncClient\"></xref> provides asynchronous methods to perform full backup and restore of an Azure Key Vault."
inheritances:
- "<xref href=\"java.lang.Object?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
inheritedMembers:
- "java.lang.Object.clone()"
- "java.lang.Object.equals(java.lang.Object)"
- "java.lang.Object.finalize()"
- "java.lang.Object.getClass()"
- "java.lang.Object.hashCode()"
- "java.lang.Object.notify()"
- "java.lang.Object.notifyAll()"
- "java.lang.Object.toString()"
- "java.lang.Object.wait()"
- "java.lang.Object.wait(long)"
- "java.lang.Object.wait(long,int)"
syntax: "public final class KeyVaultBackupAsyncClient"
methods:
- uid: "com.azure.security.keyvault.administration.KeyVaultBackupAsyncClient.beginBackup(java.lang.String,java.lang.String)"
  fullName: "com.azure.security.keyvault.administration.KeyVaultBackupAsyncClient.beginBackup(String blobStorageUrl, String sasToken)"
  name: "beginBackup(String blobStorageUrl, String sasToken)"
  nameWithType: "KeyVaultBackupAsyncClient.beginBackup(String blobStorageUrl, String sasToken)"
  summary: "Initiates a full backup of the Key Vault."
  parameters:
  - description: "The URL for the Blob Storage resource where the backup will be located."
    name: "blobStorageUrl"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "A Shared Access Signature (SAS) token to authorize access to the blob."
    name: "sasToken"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PollerFlux<KeyVaultBackupOperation,String> beginBackup(String blobStorageUrl, String sasToken)"
  desc: "Initiates a full backup of the Key Vault.\n\n**Code Samples**\n\nStarts a <xref uid=\"com.azure.security.keyvault.administration.models.KeyVaultBackupOperation\" data-throw-if-not-resolved=\"false\" data-raw-source=\"backup operation\"></xref>, polls for its status and waits for it to complete. Prints out the details of the operation's final result in case of success or prints out details of an error in case the operation fails.\n\n```java\nString blobStorageUrl = \"https://myaccount.blob.core.windows.net/myContainer\";\n String sasToken = \"sv=2020-02-10&ss=b&srt=o&sp=rwdlactfx&se=2021-06-17T07:13:07Z&st=2021-06-16T23:13:07Z\"\n     + \"&spr=https&sig=n5V6fnlkViEF9b7ij%2FttTHNwO2BdFIHKHppRxGAyJdc%3D\";\n\n client.beginBackup(blobStorageUrl, sasToken)\n     .setPollInterval(Duration.ofSeconds(1)) // You can set a custom polling interval.\n     .doOnError(e -> System.out.printf(\"Backup failed with error: %s.%n\", e.getMessage()))\n     .doOnNext(pollResponse ->\n         System.out.printf(\"The current status of the operation is: %s.%n\", pollResponse.getStatus()))\n     .filter(pollResponse -> pollResponse.getStatus() == LongRunningOperationStatus.SUCCESSFULLY_COMPLETED)\n     .flatMap(AsyncPollResponse::getFinalResult)\n     .subscribe(folderUrl ->\n         System.out.printf(\"Backup completed. The storage location of this backup is: %s.%n\", folderUrl));\n```"
  returns:
    description: "A <xref uid=\"com.azure.core.util.polling.PollerFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PollerFlux\"></xref> polling on the <xref uid=\"com.azure.security.keyvault.administration.models.KeyVaultBackupOperation\" data-throw-if-not-resolved=\"false\" data-raw-source=\"backup operation\"></xref> status."
    type: "<xref href=\"com.azure.core.util.polling.PollerFlux?alt=com.azure.core.util.polling.PollerFlux&text=PollerFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.security.keyvault.administration.models.KeyVaultBackupOperation?alt=com.azure.security.keyvault.administration.models.KeyVaultBackupOperation&text=KeyVaultBackupOperation\" data-throw-if-not-resolved=\"False\" />,<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.security.keyvault.administration.KeyVaultBackupAsyncClient.beginRestore(java.lang.String,java.lang.String)"
  fullName: "com.azure.security.keyvault.administration.KeyVaultBackupAsyncClient.beginRestore(String folderUrl, String sasToken)"
  name: "beginRestore(String folderUrl, String sasToken)"
  nameWithType: "KeyVaultBackupAsyncClient.beginRestore(String folderUrl, String sasToken)"
  summary: "Initiates a full restore of the Key Vault."
  parameters:
  - description: "The URL for the Blob Storage resource where the backup is located, including the path to\n the blob container where the backup resides. This would be the exact value that is returned as the result of a\n backup operation. An example of such a URL may look like the following:\n https://contoso.blob.core.windows.net/backup/mhsm-contoso-2020090117323313."
    name: "folderUrl"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "A Shared Access Signature (SAS) token to authorize access to the blob."
    name: "sasToken"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PollerFlux<KeyVaultRestoreOperation,KeyVaultRestoreResult> beginRestore(String folderUrl, String sasToken)"
  desc: "Initiates a full restore of the Key Vault.\n\n**Code Samples**\n\nStarts a <xref uid=\"com.azure.security.keyvault.administration.models.KeyVaultRestoreOperation\" data-throw-if-not-resolved=\"false\" data-raw-source=\"restore operation\"></xref>, polls for its status and waits for it to complete. Prints out error details in case the operation fails.\n\n```java\nString folderUrl = \"https://myaccount.blob.core.windows.net/myContainer/mhsm-myaccount-2020090117323313\";\n String sasToken = \"sv=2020-02-10&ss=b&srt=o&sp=rwdlactfx&se=2021-06-17T07:13:07Z&st=2021-06-16T23:13:07Z\"\n     + \"&spr=https&sig=n5V6fnlkViEF9b7ij%2FttTHNwO2BdFIHKHppRxGAyJdc%3D\";\n\n client.beginRestore(folderUrl, sasToken)\n     .setPollInterval(Duration.ofSeconds(1)) // You can set a custom polling interval.\n     .doOnError(e -> System.out.printf(\"Restore failed with error: %s.%n\", e.getMessage()))\n     .doOnNext(pollResponse ->\n         System.out.printf(\"The current status of the operation is: %s.%n\", pollResponse.getStatus()))\n     .filter(pollResponse -> pollResponse.getStatus() == LongRunningOperationStatus.SUCCESSFULLY_COMPLETED)\n     .flatMap(AsyncPollResponse::getFinalResult)\n     .subscribe(unused -> System.out.printf(\"Backup restored successfully.%n\"));\n```"
  returns:
    description: "A <xref uid=\"com.azure.core.util.polling.PollerFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PollerFlux\"></xref> polling on the <xref uid=\"com.azure.security.keyvault.administration.models.KeyVaultRestoreOperation\" data-throw-if-not-resolved=\"false\" data-raw-source=\"restore operation\"></xref> status."
    type: "<xref href=\"com.azure.core.util.polling.PollerFlux?alt=com.azure.core.util.polling.PollerFlux&text=PollerFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.security.keyvault.administration.models.KeyVaultRestoreOperation?alt=com.azure.security.keyvault.administration.models.KeyVaultRestoreOperation&text=KeyVaultRestoreOperation\" data-throw-if-not-resolved=\"False\" />,<xref href=\"com.azure.security.keyvault.administration.models.KeyVaultRestoreResult?alt=com.azure.security.keyvault.administration.models.KeyVaultRestoreResult&text=KeyVaultRestoreResult\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.security.keyvault.administration.KeyVaultBackupAsyncClient.beginSelectiveKeyRestore(java.lang.String,java.lang.String,java.lang.String)"
  fullName: "com.azure.security.keyvault.administration.KeyVaultBackupAsyncClient.beginSelectiveKeyRestore(String keyName, String folderUrl, String sasToken)"
  name: "beginSelectiveKeyRestore(String keyName, String folderUrl, String sasToken)"
  nameWithType: "KeyVaultBackupAsyncClient.beginSelectiveKeyRestore(String keyName, String folderUrl, String sasToken)"
  summary: "Restores all versions of a given key using the supplied SAS token pointing to a previously stored Azure Blob storage backup folder."
  parameters:
  - description: "The name of the key to be restored."
    name: "keyName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The URL for the Blob Storage resource where the backup is located, including the path to\n the blob container where the backup resides. This would be the exact value that is returned as the result of a\n backup operation. An example of such a URL may look like the following:\n https://contoso.blob.core.windows.net/backup/mhsm-contoso-2020090117323313."
    name: "folderUrl"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "A Shared Access Signature (SAS) token to authorize access to the blob."
    name: "sasToken"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PollerFlux<KeyVaultSelectiveKeyRestoreOperation,KeyVaultSelectiveKeyRestoreResult> beginSelectiveKeyRestore(String keyName, String folderUrl, String sasToken)"
  desc: "Restores all versions of a given key using the supplied SAS token pointing to a previously stored Azure Blob storage backup folder.\n\n**Code Samples**\n\nStarts a <xref uid=\"com.azure.security.keyvault.administration.models.KeyVaultSelectiveKeyRestoreOperation\" data-throw-if-not-resolved=\"false\" data-raw-source=\"selective key restore operation\"></xref>, polls for its status and waits for it to complete. Prints out error details in case the operation fails.\n\n```java\nString folderUrl = \"https://myaccount.blob.core.windows.net/myContainer/mhsm-myaccount-2020090117323313\";\n String sasToken = \"sv=2020-02-10&ss=b&srt=o&sp=rwdlactfx&se=2021-06-17T07:13:07Z&st=2021-06-16T23:13:07Z\"\n     + \"&spr=https&sig=n5V6fnlkViEF9b7ij%2FttTHNwO2BdFIHKHppRxGAyJdc%3D\";\n String keyName = \"myKey\";\n\n client.beginSelectiveKeyRestore(folderUrl, sasToken, keyName)\n     .setPollInterval(Duration.ofSeconds(1)) // You can set a custom polling interval.\n     .doOnError(e -> System.out.printf(\"Key restoration failed with error: %s.%n\", e.getMessage()))\n     .doOnNext(pollResponse ->\n         System.out.printf(\"The current status of the operation is: %s.%n\", pollResponse.getStatus()))\n     .filter(pollResponse -> pollResponse.getStatus() == LongRunningOperationStatus.SUCCESSFULLY_COMPLETED)\n     .flatMap(AsyncPollResponse::getFinalResult)\n     .subscribe(unused -> System.out.printf(\"Key restored successfully.%n\"));\n```"
  returns:
    description: "A <xref uid=\"com.azure.core.util.polling.PollerFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PollerFlux\"></xref> polling on the <xref uid=\"com.azure.security.keyvault.administration.models.KeyVaultRestoreOperation\" data-throw-if-not-resolved=\"false\" data-raw-source=\"restore operation\"></xref> status."
    type: "<xref href=\"com.azure.core.util.polling.PollerFlux?alt=com.azure.core.util.polling.PollerFlux&text=PollerFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.security.keyvault.administration.models.KeyVaultSelectiveKeyRestoreOperation?alt=com.azure.security.keyvault.administration.models.KeyVaultSelectiveKeyRestoreOperation&text=KeyVaultSelectiveKeyRestoreOperation\" data-throw-if-not-resolved=\"False\" />,<xref href=\"com.azure.security.keyvault.administration.models.KeyVaultSelectiveKeyRestoreResult?alt=com.azure.security.keyvault.administration.models.KeyVaultSelectiveKeyRestoreResult&text=KeyVaultSelectiveKeyRestoreResult\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.security.keyvault.administration.KeyVaultBackupAsyncClient.getVaultUrl()"
  fullName: "com.azure.security.keyvault.administration.KeyVaultBackupAsyncClient.getVaultUrl()"
  name: "getVaultUrl()"
  nameWithType: "KeyVaultBackupAsyncClient.getVaultUrl()"
  summary: "Gets the URL for the Key Vault this client is associated with."
  syntax: "public String getVaultUrl()"
  desc: "Gets the URL for the Key Vault this client is associated with."
  returns:
    description: "The Key Vault URL."
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
type: "class"
desc: "The <xref uid=\"com.azure.security.keyvault.administration.KeyVaultBackupAsyncClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"KeyVaultBackupAsyncClient\"></xref> provides asynchronous methods to perform full backup and restore of an Azure Key Vault.\n\nInstances of this client are obtained by calling the <xref uid=\"com.azure.security.keyvault.administration.KeyVaultBackupClientBuilder.buildAsyncClient()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"KeyVaultBackupClientBuilder#buildAsyncClient()\"></xref> method on a <xref uid=\"com.azure.security.keyvault.administration.KeyVaultBackupClientBuilder\" data-throw-if-not-resolved=\"false\" data-raw-source=\"KeyVaultBackupClientBuilder\"></xref> object.\n\n**Samples to construct an async client**\n\n```java\nKeyVaultBackupAsyncClient keyVaultBackupAsyncClient = new KeyVaultBackupClientBuilder()\n     .vaultUrl(\"https://myaccount.managedhsm.azure.net/\")\n     .credential(new DefaultAzureCredentialBuilder().build())\n     .buildAsyncClient();\n```"
metadata: {}
package: "com.azure.security.keyvault.administration"
artifact: com.azure:azure-security-keyvault-administration:4.1.0-beta.5
