### YamlMime:ManagedReference
items:
- uid: "com.azure.search.models.AnalyzeRequest"
  id: "AnalyzeRequest"
  parent: "com.azure.search.models"
  children:
  - "com.azure.search.models.AnalyzeRequest.AnalyzeRequest()"
  - "com.azure.search.models.AnalyzeRequest.getAnalyzer()"
  - "com.azure.search.models.AnalyzeRequest.getCharFilters()"
  - "com.azure.search.models.AnalyzeRequest.getText()"
  - "com.azure.search.models.AnalyzeRequest.getTokenFilters()"
  - "com.azure.search.models.AnalyzeRequest.getTokenizer()"
  - "com.azure.search.models.AnalyzeRequest.setAnalyzer(com.azure.search.models.AnalyzerName)"
  - "com.azure.search.models.AnalyzeRequest.setCharFilters(java.util.List<com.azure.search.models.CharFilterName>)"
  - "com.azure.search.models.AnalyzeRequest.setText(java.lang.String)"
  - "com.azure.search.models.AnalyzeRequest.setTokenFilters(java.util.List<com.azure.search.models.TokenFilterName>)"
  - "com.azure.search.models.AnalyzeRequest.setTokenizer(com.azure.search.models.TokenizerName)"
  langs:
  - "java"
  name: "AnalyzeRequest"
  nameWithType: "AnalyzeRequest"
  fullName: "com.azure.search.models.AnalyzeRequest"
  type: "Class"
  package: "com.azure.search.models"
  summary: "Specifies some text and analysis components used to break that text into tokens."
  syntax:
    content: "public final class AnalyzeRequest"
  inheritance:
  - "java.lang.Object"
  inheritedMembers:
  - "java.lang.Object.clone()"
  - "java.lang.Object.equals(java.lang.Object)"
  - "java.lang.Object.finalize()"
  - "java.lang.Object.getClass()"
  - "java.lang.Object.hashCode()"
  - "java.lang.Object.notify()"
  - "java.lang.Object.notifyAll()"
  - "java.lang.Object.toString()"
  - "java.lang.Object.wait()"
  - "java.lang.Object.wait(long)"
  - "java.lang.Object.wait(long,int)"
- uid: "com.azure.search.models.AnalyzeRequest.AnalyzeRequest()"
  id: "AnalyzeRequest()"
  parent: "com.azure.search.models.AnalyzeRequest"
  langs:
  - "java"
  name: "AnalyzeRequest()"
  nameWithType: "AnalyzeRequest.AnalyzeRequest()"
  fullName: "com.azure.search.models.AnalyzeRequest.AnalyzeRequest()"
  overload: "com.azure.search.models.AnalyzeRequest.AnalyzeRequest*"
  type: "Constructor"
  package: "com.azure.search.models"
  syntax:
    content: "public AnalyzeRequest()"
- uid: "com.azure.search.models.AnalyzeRequest.getAnalyzer()"
  id: "getAnalyzer()"
  parent: "com.azure.search.models.AnalyzeRequest"
  langs:
  - "java"
  name: "getAnalyzer()"
  nameWithType: "AnalyzeRequest.getAnalyzer()"
  fullName: "com.azure.search.models.AnalyzeRequest.getAnalyzer()"
  overload: "com.azure.search.models.AnalyzeRequest.getAnalyzer*"
  type: "Method"
  package: "com.azure.search.models"
  summary: "Get the analyzer property: The name of the analyzer to use to break the given text. If this parameter is not specified, you must specify a tokenizer instead. The tokenizer and analyzer parameters are mutually exclusive. Possible values include: 'ar.microsoft', 'ar.lucene', 'hy.lucene', 'bn.microsoft', 'eu.lucene', 'bg.microsoft', 'bg.lucene', 'ca.microsoft', 'ca.lucene', 'zh-Hans.microsoft', 'zh-Hans.lucene', 'zh-Hant.microsoft', 'zh-Hant.lucene', 'hr.microsoft', 'cs.microsoft', 'cs.lucene', 'da.microsoft', 'da.lucene', 'nl.microsoft', 'nl.lucene', 'en.microsoft', 'en.lucene', 'et.microsoft', 'fi.microsoft', 'fi.lucene', 'fr.microsoft', 'fr.lucene', 'gl.lucene', 'de.microsoft', 'de.lucene', 'el.microsoft', 'el.lucene', 'gu.microsoft', 'he.microsoft', 'hi.microsoft', 'hi.lucene', 'hu.microsoft', 'hu.lucene', 'is.microsoft', 'id.microsoft', 'id.lucene', 'ga.lucene', 'it.microsoft', 'it.lucene', 'ja.microsoft', 'ja.lucene', 'kn.microsoft', 'ko.microsoft', 'ko.lucene', 'lv.microsoft', 'lv.lucene', 'lt.microsoft', 'ml.microsoft', 'ms.microsoft', 'mr.microsoft', 'nb.microsoft', 'no.lucene', 'fa.lucene', 'pl.microsoft', 'pl.lucene', 'pt-BR.microsoft', 'pt-BR.lucene', 'pt-PT.microsoft', 'pt-PT.lucene', 'pa.microsoft', 'ro.microsoft', 'ro.lucene', 'ru.microsoft', 'ru.lucene', 'sr-cyrillic.microsoft', 'sr-latin.microsoft', 'sk.microsoft', 'sl.microsoft', 'es.microsoft', 'es.lucene', 'sv.microsoft', 'sv.lucene', 'ta.microsoft', 'te.microsoft', 'th.microsoft', 'th.lucene', 'tr.microsoft', 'tr.lucene', 'uk.microsoft', 'ur.microsoft', 'vi.microsoft', 'standard.lucene', 'standardasciifolding.lucene', 'keyword', 'pattern', 'simple', 'stop', 'whitespace'."
  syntax:
    content: "public AnalyzerName getAnalyzer()"
    return:
      type: "com.azure.search.models.AnalyzerName"
      description: "the analyzer value."
- uid: "com.azure.search.models.AnalyzeRequest.getCharFilters()"
  id: "getCharFilters()"
  parent: "com.azure.search.models.AnalyzeRequest"
  langs:
  - "java"
  name: "getCharFilters()"
  nameWithType: "AnalyzeRequest.getCharFilters()"
  fullName: "com.azure.search.models.AnalyzeRequest.getCharFilters()"
  overload: "com.azure.search.models.AnalyzeRequest.getCharFilters*"
  type: "Method"
  package: "com.azure.search.models"
  summary: "Get the charFilters property: An optional list of character filters to use when breaking the given text. This parameter can only be set when using the tokenizer parameter."
  syntax:
    content: "public List<CharFilterName> getCharFilters()"
    return:
      type: "java.util.List<com.azure.search.models.CharFilterName>"
      description: "the charFilters value."
- uid: "com.azure.search.models.AnalyzeRequest.getText()"
  id: "getText()"
  parent: "com.azure.search.models.AnalyzeRequest"
  langs:
  - "java"
  name: "getText()"
  nameWithType: "AnalyzeRequest.getText()"
  fullName: "com.azure.search.models.AnalyzeRequest.getText()"
  overload: "com.azure.search.models.AnalyzeRequest.getText*"
  type: "Method"
  package: "com.azure.search.models"
  summary: "Get the text property: The text to break into tokens."
  syntax:
    content: "public String getText()"
    return:
      type: "java.lang.String"
      description: "the text value."
- uid: "com.azure.search.models.AnalyzeRequest.getTokenFilters()"
  id: "getTokenFilters()"
  parent: "com.azure.search.models.AnalyzeRequest"
  langs:
  - "java"
  name: "getTokenFilters()"
  nameWithType: "AnalyzeRequest.getTokenFilters()"
  fullName: "com.azure.search.models.AnalyzeRequest.getTokenFilters()"
  overload: "com.azure.search.models.AnalyzeRequest.getTokenFilters*"
  type: "Method"
  package: "com.azure.search.models"
  summary: "Get the tokenFilters property: An optional list of token filters to use when breaking the given text. This parameter can only be set when using the tokenizer parameter."
  syntax:
    content: "public List<TokenFilterName> getTokenFilters()"
    return:
      type: "java.util.List<com.azure.search.models.TokenFilterName>"
      description: "the tokenFilters value."
- uid: "com.azure.search.models.AnalyzeRequest.getTokenizer()"
  id: "getTokenizer()"
  parent: "com.azure.search.models.AnalyzeRequest"
  langs:
  - "java"
  name: "getTokenizer()"
  nameWithType: "AnalyzeRequest.getTokenizer()"
  fullName: "com.azure.search.models.AnalyzeRequest.getTokenizer()"
  overload: "com.azure.search.models.AnalyzeRequest.getTokenizer*"
  type: "Method"
  package: "com.azure.search.models"
  summary: "Get the tokenizer property: The name of the tokenizer to use to break the given text. If this parameter is not specified, you must specify an analyzer instead. The tokenizer and analyzer parameters are mutually exclusive. Possible values include: 'Classic', 'EdgeNGram', 'Keyword', 'Letter', 'Lowercase', 'MicrosoftLanguageTokenizer', 'MicrosoftLanguageStemmingTokenizer', 'NGram', 'PathHierarchy', 'Pattern', 'Standard', 'UaxUrlEmail', 'Whitespace'."
  syntax:
    content: "public TokenizerName getTokenizer()"
    return:
      type: "com.azure.search.models.TokenizerName"
      description: "the tokenizer value."
- uid: "com.azure.search.models.AnalyzeRequest.setAnalyzer(com.azure.search.models.AnalyzerName)"
  id: "setAnalyzer(com.azure.search.models.AnalyzerName)"
  parent: "com.azure.search.models.AnalyzeRequest"
  langs:
  - "java"
  name: "setAnalyzer(AnalyzerName analyzer)"
  nameWithType: "AnalyzeRequest.setAnalyzer(AnalyzerName analyzer)"
  fullName: "com.azure.search.models.AnalyzeRequest.setAnalyzer(AnalyzerName analyzer)"
  overload: "com.azure.search.models.AnalyzeRequest.setAnalyzer*"
  type: "Method"
  package: "com.azure.search.models"
  summary: "Set the analyzer property: The name of the analyzer to use to break the given text. If this parameter is not specified, you must specify a tokenizer instead. The tokenizer and analyzer parameters are mutually exclusive. Possible values include: 'ar.microsoft', 'ar.lucene', 'hy.lucene', 'bn.microsoft', 'eu.lucene', 'bg.microsoft', 'bg.lucene', 'ca.microsoft', 'ca.lucene', 'zh-Hans.microsoft', 'zh-Hans.lucene', 'zh-Hant.microsoft', 'zh-Hant.lucene', 'hr.microsoft', 'cs.microsoft', 'cs.lucene', 'da.microsoft', 'da.lucene', 'nl.microsoft', 'nl.lucene', 'en.microsoft', 'en.lucene', 'et.microsoft', 'fi.microsoft', 'fi.lucene', 'fr.microsoft', 'fr.lucene', 'gl.lucene', 'de.microsoft', 'de.lucene', 'el.microsoft', 'el.lucene', 'gu.microsoft', 'he.microsoft', 'hi.microsoft', 'hi.lucene', 'hu.microsoft', 'hu.lucene', 'is.microsoft', 'id.microsoft', 'id.lucene', 'ga.lucene', 'it.microsoft', 'it.lucene', 'ja.microsoft', 'ja.lucene', 'kn.microsoft', 'ko.microsoft', 'ko.lucene', 'lv.microsoft', 'lv.lucene', 'lt.microsoft', 'ml.microsoft', 'ms.microsoft', 'mr.microsoft', 'nb.microsoft', 'no.lucene', 'fa.lucene', 'pl.microsoft', 'pl.lucene', 'pt-BR.microsoft', 'pt-BR.lucene', 'pt-PT.microsoft', 'pt-PT.lucene', 'pa.microsoft', 'ro.microsoft', 'ro.lucene', 'ru.microsoft', 'ru.lucene', 'sr-cyrillic.microsoft', 'sr-latin.microsoft', 'sk.microsoft', 'sl.microsoft', 'es.microsoft', 'es.lucene', 'sv.microsoft', 'sv.lucene', 'ta.microsoft', 'te.microsoft', 'th.microsoft', 'th.lucene', 'tr.microsoft', 'tr.lucene', 'uk.microsoft', 'ur.microsoft', 'vi.microsoft', 'standard.lucene', 'standardasciifolding.lucene', 'keyword', 'pattern', 'simple', 'stop', 'whitespace'."
  syntax:
    content: "public AnalyzeRequest setAnalyzer(AnalyzerName analyzer)"
    parameters:
    - id: "analyzer"
      type: "com.azure.search.models.AnalyzerName"
      description: "the analyzer value to set."
    return:
      type: "com.azure.search.models.AnalyzeRequest"
      description: "the AnalyzeRequest object itself."
- uid: "com.azure.search.models.AnalyzeRequest.setCharFilters(java.util.List<com.azure.search.models.CharFilterName>)"
  id: "setCharFilters(java.util.List<com.azure.search.models.CharFilterName>)"
  parent: "com.azure.search.models.AnalyzeRequest"
  langs:
  - "java"
  name: "setCharFilters(List<CharFilterName> charFilters)"
  nameWithType: "AnalyzeRequest.setCharFilters(List<CharFilterName> charFilters)"
  fullName: "com.azure.search.models.AnalyzeRequest.setCharFilters(List<CharFilterName> charFilters)"
  overload: "com.azure.search.models.AnalyzeRequest.setCharFilters*"
  type: "Method"
  package: "com.azure.search.models"
  summary: "Set the charFilters property: An optional list of character filters to use when breaking the given text. This parameter can only be set when using the tokenizer parameter."
  syntax:
    content: "public AnalyzeRequest setCharFilters(List<CharFilterName> charFilters)"
    parameters:
    - id: "charFilters"
      type: "java.util.List<com.azure.search.models.CharFilterName>"
      description: "the charFilters value to set."
    return:
      type: "com.azure.search.models.AnalyzeRequest"
      description: "the AnalyzeRequest object itself."
- uid: "com.azure.search.models.AnalyzeRequest.setText(java.lang.String)"
  id: "setText(java.lang.String)"
  parent: "com.azure.search.models.AnalyzeRequest"
  langs:
  - "java"
  name: "setText(String text)"
  nameWithType: "AnalyzeRequest.setText(String text)"
  fullName: "com.azure.search.models.AnalyzeRequest.setText(String text)"
  overload: "com.azure.search.models.AnalyzeRequest.setText*"
  type: "Method"
  package: "com.azure.search.models"
  summary: "Set the text property: The text to break into tokens."
  syntax:
    content: "public AnalyzeRequest setText(String text)"
    parameters:
    - id: "text"
      type: "java.lang.String"
      description: "the text value to set."
    return:
      type: "com.azure.search.models.AnalyzeRequest"
      description: "the AnalyzeRequest object itself."
- uid: "com.azure.search.models.AnalyzeRequest.setTokenFilters(java.util.List<com.azure.search.models.TokenFilterName>)"
  id: "setTokenFilters(java.util.List<com.azure.search.models.TokenFilterName>)"
  parent: "com.azure.search.models.AnalyzeRequest"
  langs:
  - "java"
  name: "setTokenFilters(List<TokenFilterName> tokenFilters)"
  nameWithType: "AnalyzeRequest.setTokenFilters(List<TokenFilterName> tokenFilters)"
  fullName: "com.azure.search.models.AnalyzeRequest.setTokenFilters(List<TokenFilterName> tokenFilters)"
  overload: "com.azure.search.models.AnalyzeRequest.setTokenFilters*"
  type: "Method"
  package: "com.azure.search.models"
  summary: "Set the tokenFilters property: An optional list of token filters to use when breaking the given text. This parameter can only be set when using the tokenizer parameter."
  syntax:
    content: "public AnalyzeRequest setTokenFilters(List<TokenFilterName> tokenFilters)"
    parameters:
    - id: "tokenFilters"
      type: "java.util.List<com.azure.search.models.TokenFilterName>"
      description: "the tokenFilters value to set."
    return:
      type: "com.azure.search.models.AnalyzeRequest"
      description: "the AnalyzeRequest object itself."
- uid: "com.azure.search.models.AnalyzeRequest.setTokenizer(com.azure.search.models.TokenizerName)"
  id: "setTokenizer(com.azure.search.models.TokenizerName)"
  parent: "com.azure.search.models.AnalyzeRequest"
  langs:
  - "java"
  name: "setTokenizer(TokenizerName tokenizer)"
  nameWithType: "AnalyzeRequest.setTokenizer(TokenizerName tokenizer)"
  fullName: "com.azure.search.models.AnalyzeRequest.setTokenizer(TokenizerName tokenizer)"
  overload: "com.azure.search.models.AnalyzeRequest.setTokenizer*"
  type: "Method"
  package: "com.azure.search.models"
  summary: "Set the tokenizer property: The name of the tokenizer to use to break the given text. If this parameter is not specified, you must specify an analyzer instead. The tokenizer and analyzer parameters are mutually exclusive. Possible values include: 'Classic', 'EdgeNGram', 'Keyword', 'Letter', 'Lowercase', 'MicrosoftLanguageTokenizer', 'MicrosoftLanguageStemmingTokenizer', 'NGram', 'PathHierarchy', 'Pattern', 'Standard', 'UaxUrlEmail', 'Whitespace'."
  syntax:
    content: "public AnalyzeRequest setTokenizer(TokenizerName tokenizer)"
    parameters:
    - id: "tokenizer"
      type: "com.azure.search.models.TokenizerName"
      description: "the tokenizer value to set."
    return:
      type: "com.azure.search.models.AnalyzeRequest"
      description: "the AnalyzeRequest object itself."
references:
- uid: "com.azure.search.models.AnalyzeRequest.AnalyzeRequest*"
  name: "AnalyzeRequest"
  nameWithType: "AnalyzeRequest.AnalyzeRequest"
  fullName: "com.azure.search.models.AnalyzeRequest.AnalyzeRequest"
  package: "com.azure.search.models"
- uid: "java.lang.String"
  spec.java:
  - uid: "java.lang.String"
    name: "String"
    fullName: "java.lang.String"
- uid: "com.azure.search.models.AnalyzeRequest.getText*"
  name: "getText"
  nameWithType: "AnalyzeRequest.getText"
  fullName: "com.azure.search.models.AnalyzeRequest.getText"
  package: "com.azure.search.models"
- uid: "com.azure.search.models.AnalyzeRequest.setText*"
  name: "setText"
  nameWithType: "AnalyzeRequest.setText"
  fullName: "com.azure.search.models.AnalyzeRequest.setText"
  package: "com.azure.search.models"
- uid: "com.azure.search.models.AnalyzerName"
  name: "AnalyzerName"
  nameWithType: "AnalyzerName"
  fullName: "com.azure.search.models.AnalyzerName"
- uid: "com.azure.search.models.AnalyzeRequest.getAnalyzer*"
  name: "getAnalyzer"
  nameWithType: "AnalyzeRequest.getAnalyzer"
  fullName: "com.azure.search.models.AnalyzeRequest.getAnalyzer"
  package: "com.azure.search.models"
- uid: "com.azure.search.models.AnalyzeRequest.setAnalyzer*"
  name: "setAnalyzer"
  nameWithType: "AnalyzeRequest.setAnalyzer"
  fullName: "com.azure.search.models.AnalyzeRequest.setAnalyzer"
  package: "com.azure.search.models"
- uid: "com.azure.search.models.TokenizerName"
  name: "TokenizerName"
  nameWithType: "TokenizerName"
  fullName: "com.azure.search.models.TokenizerName"
- uid: "com.azure.search.models.AnalyzeRequest.getTokenizer*"
  name: "getTokenizer"
  nameWithType: "AnalyzeRequest.getTokenizer"
  fullName: "com.azure.search.models.AnalyzeRequest.getTokenizer"
  package: "com.azure.search.models"
- uid: "com.azure.search.models.AnalyzeRequest.setTokenizer*"
  name: "setTokenizer"
  nameWithType: "AnalyzeRequest.setTokenizer"
  fullName: "com.azure.search.models.AnalyzeRequest.setTokenizer"
  package: "com.azure.search.models"
- uid: "java.util.List<com.azure.search.models.TokenFilterName>"
  spec.java:
  - uid: "java.util.List"
    name: "List"
    fullName: "java.util.List"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.search.models.TokenFilterName"
    name: "TokenFilterName"
    fullName: "com.azure.search.models.TokenFilterName"
  - name: ">"
    fullName: ">"
- uid: "com.azure.search.models.AnalyzeRequest.getTokenFilters*"
  name: "getTokenFilters"
  nameWithType: "AnalyzeRequest.getTokenFilters"
  fullName: "com.azure.search.models.AnalyzeRequest.getTokenFilters"
  package: "com.azure.search.models"
- uid: "com.azure.search.models.AnalyzeRequest.setTokenFilters*"
  name: "setTokenFilters"
  nameWithType: "AnalyzeRequest.setTokenFilters"
  fullName: "com.azure.search.models.AnalyzeRequest.setTokenFilters"
  package: "com.azure.search.models"
- uid: "java.util.List<com.azure.search.models.CharFilterName>"
  spec.java:
  - uid: "java.util.List"
    name: "List"
    fullName: "java.util.List"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.search.models.CharFilterName"
    name: "CharFilterName"
    fullName: "com.azure.search.models.CharFilterName"
  - name: ">"
    fullName: ">"
- uid: "com.azure.search.models.AnalyzeRequest.getCharFilters*"
  name: "getCharFilters"
  nameWithType: "AnalyzeRequest.getCharFilters"
  fullName: "com.azure.search.models.AnalyzeRequest.getCharFilters"
  package: "com.azure.search.models"
- uid: "com.azure.search.models.AnalyzeRequest.setCharFilters*"
  name: "setCharFilters"
  nameWithType: "AnalyzeRequest.setCharFilters"
  fullName: "com.azure.search.models.AnalyzeRequest.setCharFilters"
  package: "com.azure.search.models"
- uid: "java.lang.Object.notify()"
  name: "Object.notify()"
  nameWithType: "Object.notify()"
  fullName: "java.lang.Object.notify()"
- uid: "java.lang.Object.wait()"
  name: "Object.wait()"
  nameWithType: "Object.wait()"
  fullName: "java.lang.Object.wait()"
- uid: "java.lang.Object.finalize()"
  name: "Object.finalize()"
  nameWithType: "Object.finalize()"
  fullName: "java.lang.Object.finalize()"
- uid: "java.lang.Object.clone()"
  name: "Object.clone()"
  nameWithType: "Object.clone()"
  fullName: "java.lang.Object.clone()"
- uid: "java.lang.Object.notifyAll()"
  name: "Object.notifyAll()"
  nameWithType: "Object.notifyAll()"
  fullName: "java.lang.Object.notifyAll()"
- uid: "java.lang.Object.equals(java.lang.Object)"
  name: "Object.equals(Object)"
  nameWithType: "Object.equals(Object)"
  fullName: "java.lang.Object.equals(java.lang.Object)"
- uid: "java.lang.Object.getClass()"
  name: "Object.getClass()"
  nameWithType: "Object.getClass()"
  fullName: "java.lang.Object.getClass()"
- uid: "java.lang.Object.wait(long)"
  name: "Object.wait(long)"
  nameWithType: "Object.wait(long)"
  fullName: "java.lang.Object.wait(long)"
- uid: "java.lang.Object.hashCode()"
  name: "Object.hashCode()"
  nameWithType: "Object.hashCode()"
  fullName: "java.lang.Object.hashCode()"
- uid: "java.lang.Object.wait(long,int)"
  name: "Object.wait(long,int)"
  nameWithType: "Object.wait(long,int)"
  fullName: "java.lang.Object.wait(long,int)"
- uid: "java.lang.Object.toString()"
  name: "Object.toString()"
  nameWithType: "Object.toString()"
  fullName: "java.lang.Object.toString()"
- uid: "java.util.List"
  name: "List"
  nameWithType: "List"
  fullName: "java.util.List"
- uid: "com.azure.search.models.TokenFilterName"
  name: "TokenFilterName"
  nameWithType: "TokenFilterName"
  fullName: "com.azure.search.models.TokenFilterName"
- uid: "com.azure.search.models.CharFilterName"
  name: "CharFilterName"
  nameWithType: "CharFilterName"
  fullName: "com.azure.search.models.CharFilterName"
