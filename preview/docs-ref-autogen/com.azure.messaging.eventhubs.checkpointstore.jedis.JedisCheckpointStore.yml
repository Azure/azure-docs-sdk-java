### YamlMime:JavaType
uid: "com.azure.messaging.eventhubs.checkpointstore.jedis.JedisCheckpointStore"
fullName: "com.azure.messaging.eventhubs.checkpointstore.jedis.JedisCheckpointStore"
name: "JedisCheckpointStore"
nameWithType: "JedisCheckpointStore"
summary: "Implementation of <xref uid=\"com.azure.messaging.eventhubs.CheckpointStore\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CheckpointStore\"></xref> that uses Azure Redis Cache, specifically Jedis."
inheritances:
- "<xref href=\"java.lang.Object?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
inheritedClassMethods:
- classRef: "java.lang.<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html\">Object</a>"
  methodsRef:
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#clone--\">clone</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#equals-java.lang.Object-\">equals</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#finalize--\">finalize</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#getClass--\">getClass</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#hashCode--\">hashCode</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#notify--\">notify</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#notifyAll--\">notifyAll</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#toString--\">toString</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#wait--\">wait</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#wait-long-\">wait</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#wait-long-int-\">wait</a>"
syntax: "public final class **JedisCheckpointStore**</br> implements <xref href=\"com.azure.messaging.eventhubs.CheckpointStore?alt=com.azure.messaging.eventhubs.CheckpointStore&text=CheckpointStore\" data-throw-if-not-resolved=\"False\" />"
constructors:
- uid: "com.azure.messaging.eventhubs.checkpointstore.jedis.JedisCheckpointStore.JedisCheckpointStore(redis.clients.jedis.JedisPool)"
  fullName: "com.azure.messaging.eventhubs.checkpointstore.jedis.JedisCheckpointStore.JedisCheckpointStore(JedisPool jedisPool)"
  name: "JedisCheckpointStore(JedisPool jedisPool)"
  nameWithType: "JedisCheckpointStore.JedisCheckpointStore(JedisPool jedisPool)"
  summary: "Constructor for Jedis<wbr>Redis<wbr>Checkpoint<wbr>Store"
  parameters:
  - description: "a JedisPool object that creates a pool connected to the Azure Redis Cache"
    name: "jedisPool"
    type: "<xref href=\"redis.clients.jedis.JedisPool?alt=redis.clients.jedis.JedisPool&text=JedisPool\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public JedisCheckpointStore(JedisPool jedisPool)"
  desc: "Constructor for JedisRedisCheckpointStore"
methods:
- uid: "com.azure.messaging.eventhubs.checkpointstore.jedis.JedisCheckpointStore.claimOwnership(java.util.List<com.azure.messaging.eventhubs.models.PartitionOwnership>)"
  fullName: "com.azure.messaging.eventhubs.checkpointstore.jedis.JedisCheckpointStore.claimOwnership(List<PartitionOwnership> requestedPartitionOwnerships)"
  name: "claimOwnership(List<PartitionOwnership> requestedPartitionOwnerships)"
  nameWithType: "JedisCheckpointStore.claimOwnership(List<PartitionOwnership> requestedPartitionOwnerships)"
  summary: "This method returns the list of partitions that were owned successfully."
  parameters:
  - description: "List of partition ownerships from the current instance"
    name: "requestedPartitionOwnerships"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/List.html\">List</a>&lt;<xref href=\"com.azure.messaging.eventhubs.models.PartitionOwnership?alt=com.azure.messaging.eventhubs.models.PartitionOwnership&text=PartitionOwnership\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public Flux<PartitionOwnership> claimOwnership(List<PartitionOwnership> requestedPartitionOwnerships)"
  desc: "This method returns the list of partitions that were owned successfully."
  returns:
    description: "Flux of PartitionOwnership objects"
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Flux.html\">Flux</a>&lt;<xref href=\"com.azure.messaging.eventhubs.models.PartitionOwnership?alt=com.azure.messaging.eventhubs.models.PartitionOwnership&text=PartitionOwnership\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.messaging.eventhubs.checkpointstore.jedis.JedisCheckpointStore.listCheckpoints(java.lang.String,java.lang.String,java.lang.String)"
  fullName: "com.azure.messaging.eventhubs.checkpointstore.jedis.JedisCheckpointStore.listCheckpoints(String fullyQualifiedNamespace, String eventHubName, String consumerGroup)"
  name: "listCheckpoints(String fullyQualifiedNamespace, String eventHubName, String consumerGroup)"
  nameWithType: "JedisCheckpointStore.listCheckpoints(String fullyQualifiedNamespace, String eventHubName, String consumerGroup)"
  summary: "This method returns the list of checkpoints from the underlying data store, and if no checkpoints are available, then it returns empty results."
  parameters:
  - description: "The fully qualified namespace of the current Event Hub instance"
    name: "fullyQualifiedNamespace"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The Event Hub name from which checkpoint information is acquired"
    name: "eventHubName"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The consumer group name associated with the checkpoint"
    name: "consumerGroup"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public Flux<Checkpoint> listCheckpoints(String fullyQualifiedNamespace, String eventHubName, String consumerGroup)"
  desc: "This method returns the list of checkpoints from the underlying data store, and if no checkpoints are available, then it returns empty results."
  returns:
    description: "Flux of Checkpoint objects"
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Flux.html\">Flux</a>&lt;<xref href=\"com.azure.messaging.eventhubs.models.Checkpoint?alt=com.azure.messaging.eventhubs.models.Checkpoint&text=Checkpoint\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.messaging.eventhubs.checkpointstore.jedis.JedisCheckpointStore.listOwnership(java.lang.String,java.lang.String,java.lang.String)"
  fullName: "com.azure.messaging.eventhubs.checkpointstore.jedis.JedisCheckpointStore.listOwnership(String fullyQualifiedNamespace, String eventHubName, String consumerGroup)"
  name: "listOwnership(String fullyQualifiedNamespace, String eventHubName, String consumerGroup)"
  nameWithType: "JedisCheckpointStore.listOwnership(String fullyQualifiedNamespace, String eventHubName, String consumerGroup)"
  summary: "This method returns the list of ownership records from the underlying data store, and if no ownership records are available, then it returns empty results."
  parameters:
  - description: "The fully qualified namespace of the current instance of Event Hub"
    name: "fullyQualifiedNamespace"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The Event Hub name from which checkpoint information is acquired"
    name: "eventHubName"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The consumer group name associated with the checkpoint"
    name: "consumerGroup"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public Flux<PartitionOwnership> listOwnership(String fullyQualifiedNamespace, String eventHubName, String consumerGroup)"
  desc: "This method returns the list of ownership records from the underlying data store, and if no ownership records are available, then it returns empty results."
  returns:
    description: "Flux of PartitionOwnership objects"
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Flux.html\">Flux</a>&lt;<xref href=\"com.azure.messaging.eventhubs.models.PartitionOwnership?alt=com.azure.messaging.eventhubs.models.PartitionOwnership&text=PartitionOwnership\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.messaging.eventhubs.checkpointstore.jedis.JedisCheckpointStore.updateCheckpoint(com.azure.messaging.eventhubs.models.Checkpoint)"
  fullName: "com.azure.messaging.eventhubs.checkpointstore.jedis.JedisCheckpointStore.updateCheckpoint(Checkpoint checkpoint)"
  name: "updateCheckpoint(Checkpoint checkpoint)"
  nameWithType: "JedisCheckpointStore.updateCheckpoint(Checkpoint checkpoint)"
  summary: "This method updates the checkpoint in the Jedis resource for a given partition."
  parameters:
  - description: "Checkpoint information for this partition"
    name: "checkpoint"
    type: "<xref href=\"com.azure.messaging.eventhubs.models.Checkpoint?alt=com.azure.messaging.eventhubs.models.Checkpoint&text=Checkpoint\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Void> updateCheckpoint(Checkpoint checkpoint)"
  desc: "This method updates the checkpoint in the Jedis resource for a given partition."
  returns:
    description: "Mono that completes if no errors take place"
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Void.html\">Void</a>&gt;"
type: "class"
desc: "Implementation of <xref uid=\"com.azure.messaging.eventhubs.CheckpointStore\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CheckpointStore\"></xref> that uses Azure Redis Cache, specifically Jedis.\n\n**Instantiate checkpoint store**\n\nDemonstrates one way to instantiate the checkpoint store. <xref uid=\"redis.clients.jedis.JedisPool\" data-throw-if-not-resolved=\"false\" data-raw-source=\"JedisPool\"></xref> has multiple ways to create an instance.\n\n```java\nJedisClientConfig clientConfig = DefaultJedisClientConfig.builder()\n     .password(\"<YOUR_REDIS_PRIMARY_ACCESS_KEY>\")\n     .ssl(true)\n     .build();\n\n String redisHostName = \"<YOUR_REDIS_HOST_NAME>.redis.cache.windows.net\";\n HostAndPort hostAndPort = new HostAndPort(redisHostName, 6380);\n JedisPool jedisPool = new JedisPool(hostAndPort, clientConfig);\n\n CheckpointStore checkpointStore = new JedisCheckpointStore(jedisPool);\n\n // DefaultAzureCredential tries to resolve the best credential to use based on your environment.\n TokenCredential credential = new DefaultAzureCredentialBuilder().build();\n EventProcessorClient processorClient = new EventProcessorClientBuilder()\n     .checkpointStore(checkpointStore)\n     .fullyQualifiedNamespace(\"<YOUR_EVENT_HUB_FULLY_QUALIFIED_NAMESPACE>\")\n     .eventHubName(\"<YOUR_EVENT_HUB_NAME>\")\n     .credential(credential)\n     .consumerGroup(\"<YOUR_CONSUMER_GROUP_NAME>\")\n     .buildEventProcessorClient();\n```"
implements:
- "<xref href=\"com.azure.messaging.eventhubs.CheckpointStore?alt=com.azure.messaging.eventhubs.CheckpointStore&text=CheckpointStore\" data-throw-if-not-resolved=\"False\" />"
metadata: {}
package: "com.azure.messaging.eventhubs.checkpointstore.jedis"
artifact: com.azure:azure-messaging-eventhubs-checkpointstore-jedis:1.0.0-beta.2
