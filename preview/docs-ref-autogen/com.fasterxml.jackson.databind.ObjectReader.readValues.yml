### YamlMime:JavaMember
uid: "com.fasterxml.jackson.databind.ObjectReader.readValues*"
fullName: "com.fasterxml.jackson.databind.ObjectReader.<T>readValues"
name: "<T>readValues"
nameWithType: "ObjectReader.<T>readValues"
members:
- uid: "com.fasterxml.jackson.databind.ObjectReader.<T>readValues(byte[])"
  fullName: "com.fasterxml.jackson.databind.ObjectReader.<T>readValues(byte[] src)"
  name: "<T>readValues(byte[] src)"
  nameWithType: "ObjectReader.<T>readValues(byte[] src)"
  summary: "Overloaded version of <xref uid=\"com.fasterxml.jackson.databind.ObjectReader.&lt;T&gt;readValue(java.io.InputStream)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#readValue(InputStream)\"></xref>."
  parameters:
  - name: "src"
    type: "<xref href=\"byte?alt=byte&text=byte\" data-throw-if-not-resolved=\"False\" />[]"
  syntax: "public final MappingIterator<T> <T>readValues(byte[] src)"
  exceptions:
  - type: "<xref href=\"java.io.IOException?alt=java.io.IOException&text=IOException\" data-throw-if-not-resolved=\"False\" />"
  returns:
    type: "<xref href=\"com.fasterxml.jackson.databind.MappingIterator?alt=com.fasterxml.jackson.databind.MappingIterator&text=MappingIterator\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.fasterxml.jackson.databind.ObjectReader.<T>readValues(byte[],int,int)"
  fullName: "com.fasterxml.jackson.databind.ObjectReader.<T>readValues(byte[] src, int offset, int length)"
  name: "<T>readValues(byte[] src, int offset, int length)"
  nameWithType: "ObjectReader.<T>readValues(byte[] src, int offset, int length)"
  summary: "Overloaded version of <xref uid=\"com.fasterxml.jackson.databind.ObjectReader.&lt;T&gt;readValue(java.io.InputStream)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#readValue(InputStream)\"></xref>."
  parameters:
  - name: "src"
    type: "<xref href=\"byte?alt=byte&text=byte\" data-throw-if-not-resolved=\"False\" />[]"
  - name: "offset"
    type: "<xref href=\"int?alt=int&text=int\" data-throw-if-not-resolved=\"False\" />"
  - name: "length"
    type: "<xref href=\"int?alt=int&text=int\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public MappingIterator<T> <T>readValues(byte[] src, int offset, int length)"
  exceptions:
  - type: "<xref href=\"java.io.IOException?alt=java.io.IOException&text=IOException\" data-throw-if-not-resolved=\"False\" />"
  returns:
    type: "<xref href=\"com.fasterxml.jackson.databind.MappingIterator?alt=com.fasterxml.jackson.databind.MappingIterator&text=MappingIterator\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.fasterxml.jackson.databind.ObjectReader.<T>readValues(com.fasterxml.jackson.core.JsonParser)"
  fullName: "com.fasterxml.jackson.databind.ObjectReader.<T>readValues(JsonParser p)"
  name: "<T>readValues(JsonParser p)"
  nameWithType: "ObjectReader.<T>readValues(JsonParser p)"
  summary: "Method for reading sequence of Objects from parser stream.\n\nSequence can be either root-level \"unwrapped\" sequence (without surrounding JSON array), or a sequence contained in a JSON Array. In either case <xref uid=\"com.fasterxml.jackson.core.JsonParser\" data-throw-if-not-resolved=\"false\" data-raw-source=\"JsonParser\"></xref> must point to the first token of the first element, OR not point to any token (in which case it is advanced to the next token). This means, specifically, that for wrapped sequences, parser MUST NOT point to the surrounding `START_ARRAY` but rather to the token following it."
  parameters:
  - name: "p"
    type: "<xref href=\"com.fasterxml.jackson.core.JsonParser?alt=com.fasterxml.jackson.core.JsonParser&text=JsonParser\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public MappingIterator<T> <T>readValues(JsonParser p)"
  exceptions:
  - type: "<xref href=\"java.io.IOException?alt=java.io.IOException&text=IOException\" data-throw-if-not-resolved=\"False\" />"
  returns:
    type: "<xref href=\"com.fasterxml.jackson.databind.MappingIterator?alt=com.fasterxml.jackson.databind.MappingIterator&text=MappingIterator\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.fasterxml.jackson.databind.ObjectReader.<T>readValues(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.core.type.ResolvedType)"
  fullName: "com.fasterxml.jackson.databind.ObjectReader.<T>readValues(JsonParser p, ResolvedType valueType)"
  name: "<T>readValues(JsonParser p, ResolvedType valueType)"
  nameWithType: "ObjectReader.<T>readValues(JsonParser p, ResolvedType valueType)"
  summary: "Convenience method that is equivalent to:\n\n```java\nwithType(valueType).readValues(p);\n```\n\nMethod reads a sequence of Objects from parser stream. Sequence can be either root-level \"unwrapped\" sequence (without surrounding JSON array), or a sequence contained in a JSON Array. In either case <xref uid=\"com.fasterxml.jackson.core.JsonParser\" data-throw-if-not-resolved=\"false\" data-raw-source=\"JsonParser\"></xref> **MUST** point to the first token of the first element, OR not point to any token (in which case it is advanced to the next token). This means, specifically, that for wrapped sequences, parser MUST NOT point to the surrounding `START_ARRAY` (one that contains values to read) but rather to the token following it which is the first token of the first value to read.\n\nNOTE: this method never tries to auto-detect format, since actual (data-format specific) parser is given."
  overridden: "com.fasterxml.jackson.core.ObjectCodec.<T>readValues(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.core.type.ResolvedType)"
  parameters:
  - name: "p"
    type: "<xref href=\"com.fasterxml.jackson.core.JsonParser?alt=com.fasterxml.jackson.core.JsonParser&text=JsonParser\" data-throw-if-not-resolved=\"False\" />"
  - name: "valueType"
    type: "<xref href=\"com.fasterxml.jackson.core.type.ResolvedType?alt=com.fasterxml.jackson.core.type.ResolvedType&text=ResolvedType\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Iterator<T> <T>readValues(JsonParser p, ResolvedType valueType)"
  exceptions:
  - type: "<xref href=\"java.io.IOException?alt=java.io.IOException&text=IOException\" data-throw-if-not-resolved=\"False\" />"
  returns:
    type: "<xref href=\"java.util.Iterator?alt=java.util.Iterator&text=Iterator\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.fasterxml.jackson.databind.ObjectReader.<T>readValues(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.core.type.TypeReference<T>)"
  fullName: "com.fasterxml.jackson.databind.ObjectReader.<T>readValues(JsonParser p, TypeReference<T> valueTypeRef)"
  name: "<T>readValues(JsonParser p, TypeReference<T> valueTypeRef)"
  nameWithType: "ObjectReader.<T>readValues(JsonParser p, TypeReference<T> valueTypeRef)"
  summary: "Convenience method that is equivalent to:\n\n```java\nwithType(valueTypeRef).readValues(p);\n```\n\nMethod reads a sequence of Objects from parser stream. Sequence can be either root-level \"unwrapped\" sequence (without surrounding JSON array), or a sequence contained in a JSON Array. In either case <xref uid=\"com.fasterxml.jackson.core.JsonParser\" data-throw-if-not-resolved=\"false\" data-raw-source=\"JsonParser\"></xref> **MUST** point to the first token of the first element, OR not point to any token (in which case it is advanced to the next token). This means, specifically, that for wrapped sequences, parser MUST NOT point to the surrounding `START_ARRAY` (one that contains values to read) but rather to the token following it which is the first token of the first value to read.\n\nNOTE: this method never tries to auto-detect format, since actual (data-format specific) parser is given."
  overridden: "com.fasterxml.jackson.core.ObjectCodec.<T>readValues(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.core.type.TypeReference<T>)"
  parameters:
  - name: "p"
    type: "<xref href=\"com.fasterxml.jackson.core.JsonParser?alt=com.fasterxml.jackson.core.JsonParser&text=JsonParser\" data-throw-if-not-resolved=\"False\" />"
  - name: "valueTypeRef"
    type: "<xref href=\"com.fasterxml.jackson.core.type.TypeReference?alt=com.fasterxml.jackson.core.type.TypeReference&text=TypeReference\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public Iterator<T> <T>readValues(JsonParser p, TypeReference<T> valueTypeRef)"
  exceptions:
  - type: "<xref href=\"java.io.IOException?alt=java.io.IOException&text=IOException\" data-throw-if-not-resolved=\"False\" />"
  returns:
    type: "<xref href=\"java.util.Iterator?alt=java.util.Iterator&text=Iterator\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.fasterxml.jackson.databind.ObjectReader.<T>readValues(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.JavaType)"
  fullName: "com.fasterxml.jackson.databind.ObjectReader.<T>readValues(JsonParser p, JavaType valueType)"
  name: "<T>readValues(JsonParser p, JavaType valueType)"
  nameWithType: "ObjectReader.<T>readValues(JsonParser p, JavaType valueType)"
  summary: "Convenience method that is equivalent to:\n\n```java\nwithType(valueType).readValues(p);\n```\n\nMethod reads a sequence of Objects from parser stream. Sequence can be either root-level \"unwrapped\" sequence (without surrounding JSON array), or a sequence contained in a JSON Array. In either case <xref uid=\"com.fasterxml.jackson.core.JsonParser\" data-throw-if-not-resolved=\"false\" data-raw-source=\"JsonParser\"></xref> **MUST** point to the first token of the first element, OR not point to any token (in which case it is advanced to the next token). This means, specifically, that for wrapped sequences, parser MUST NOT point to the surrounding `START_ARRAY` (one that contains values to read) but rather to the token following it which is the first token of the first value to read.\n\nNOTE: this method never tries to auto-detect format, since actual (data-format specific) parser is given."
  parameters:
  - name: "p"
    type: "<xref href=\"com.fasterxml.jackson.core.JsonParser?alt=com.fasterxml.jackson.core.JsonParser&text=JsonParser\" data-throw-if-not-resolved=\"False\" />"
  - name: "valueType"
    type: "<xref href=\"com.fasterxml.jackson.databind.JavaType?alt=com.fasterxml.jackson.databind.JavaType&text=JavaType\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Iterator<T> <T>readValues(JsonParser p, JavaType valueType)"
  exceptions:
  - type: "<xref href=\"java.io.IOException?alt=java.io.IOException&text=IOException\" data-throw-if-not-resolved=\"False\" />"
  returns:
    type: "<xref href=\"java.util.Iterator?alt=java.util.Iterator&text=Iterator\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.fasterxml.jackson.databind.ObjectReader.<T>readValues(com.fasterxml.jackson.core.JsonParser,java.lang.Class<T>)"
  fullName: "com.fasterxml.jackson.databind.ObjectReader.<T>readValues(JsonParser p, Class<T> valueType)"
  name: "<T>readValues(JsonParser p, Class<T> valueType)"
  nameWithType: "ObjectReader.<T>readValues(JsonParser p, Class<T> valueType)"
  summary: "Convenience method that is equivalent to:\n\n```java\nwithType(valueType).readValues(p);\n```\n\nMethod reads a sequence of Objects from parser stream. Sequence can be either root-level \"unwrapped\" sequence (without surrounding JSON array), or a sequence contained in a JSON Array. In either case <xref uid=\"com.fasterxml.jackson.core.JsonParser\" data-throw-if-not-resolved=\"false\" data-raw-source=\"JsonParser\"></xref> **MUST** point to the first token of the first element, OR not point to any token (in which case it is advanced to the next token). This means, specifically, that for wrapped sequences, parser MUST NOT point to the surrounding `START_ARRAY` (one that contains values to read) but rather to the token following it which is the first token of the first value to read.\n\nNOTE: this method never tries to auto-detect format, since actual (data-format specific) parser is given."
  overridden: "com.fasterxml.jackson.core.ObjectCodec.<T>readValues(com.fasterxml.jackson.core.JsonParser,java.lang.Class<T>)"
  parameters:
  - name: "p"
    type: "<xref href=\"com.fasterxml.jackson.core.JsonParser?alt=com.fasterxml.jackson.core.JsonParser&text=JsonParser\" data-throw-if-not-resolved=\"False\" />"
  - name: "valueType"
    type: "<xref href=\"java.lang.Class?alt=java.lang.Class&text=Class\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public Iterator<T> <T>readValues(JsonParser p, Class<T> valueType)"
  exceptions:
  - type: "<xref href=\"java.io.IOException?alt=java.io.IOException&text=IOException\" data-throw-if-not-resolved=\"False\" />"
  returns:
    type: "<xref href=\"java.util.Iterator?alt=java.util.Iterator&text=Iterator\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.fasterxml.jackson.databind.ObjectReader.<T>readValues(java.io.DataInput)"
  fullName: "com.fasterxml.jackson.databind.ObjectReader.<T>readValues(DataInput src)"
  name: "<T>readValues(DataInput src)"
  nameWithType: "ObjectReader.<T>readValues(DataInput src)"
  parameters:
  - name: "src"
    type: "<xref href=\"java.io.DataInput?alt=java.io.DataInput&text=DataInput\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public MappingIterator<T> <T>readValues(DataInput src)"
  exceptions:
  - type: "<xref href=\"java.io.IOException?alt=java.io.IOException&text=IOException\" data-throw-if-not-resolved=\"False\" />"
  returns:
    type: "<xref href=\"com.fasterxml.jackson.databind.MappingIterator?alt=com.fasterxml.jackson.databind.MappingIterator&text=MappingIterator\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.fasterxml.jackson.databind.ObjectReader.<T>readValues(java.io.File)"
  fullName: "com.fasterxml.jackson.databind.ObjectReader.<T>readValues(File src)"
  name: "<T>readValues(File src)"
  nameWithType: "ObjectReader.<T>readValues(File src)"
  summary: "Overloaded version of <xref uid=\"com.fasterxml.jackson.databind.ObjectReader.&lt;T&gt;readValue(java.io.InputStream)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#readValue(InputStream)\"></xref>."
  parameters:
  - name: "src"
    type: "<xref href=\"java.io.File?alt=java.io.File&text=File\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public MappingIterator<T> <T>readValues(File src)"
  exceptions:
  - type: "<xref href=\"java.io.IOException?alt=java.io.IOException&text=IOException\" data-throw-if-not-resolved=\"False\" />"
  returns:
    type: "<xref href=\"com.fasterxml.jackson.databind.MappingIterator?alt=com.fasterxml.jackson.databind.MappingIterator&text=MappingIterator\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.fasterxml.jackson.databind.ObjectReader.<T>readValues(java.io.InputStream)"
  fullName: "com.fasterxml.jackson.databind.ObjectReader.<T>readValues(InputStream src)"
  name: "<T>readValues(InputStream src)"
  nameWithType: "ObjectReader.<T>readValues(InputStream src)"
  summary: "Method for reading sequence of Objects from parser stream.\n\nSequence can be either wrapped or unwrapped root-level sequence: wrapped means that the elements are enclosed in JSON Array; and unwrapped that elements are directly accessed at main level. Assumption is that iff the first token of the document is `START_ARRAY`, we have a wrapped sequence; otherwise unwrapped. For wrapped sequences, leading `START_ARRAY` is skipped, so that for both cases, underlying <xref uid=\"com.fasterxml.jackson.core.JsonParser\" data-throw-if-not-resolved=\"false\" data-raw-source=\"JsonParser\"></xref> will point to what is expected to be the first token of the first element.\n\nNote that the wrapped vs unwrapped logic means that it is NOT possible to use this method for reading an unwrapped sequence of elements written as JSON Arrays: to read such sequences, one has to use <xref uid=\"com.fasterxml.jackson.databind.ObjectReader.&lt;T&gt;readValues(com.fasterxml.jackson.core.JsonParser)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#readValues(JsonParser)\"></xref>, making sure parser points to the first token of the first element (i.e. the second `START_ARRAY` which is part of the first element)."
  parameters:
  - name: "src"
    type: "<xref href=\"java.io.InputStream?alt=java.io.InputStream&text=InputStream\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public MappingIterator<T> <T>readValues(InputStream src)"
  exceptions:
  - type: "<xref href=\"java.io.IOException?alt=java.io.IOException&text=IOException\" data-throw-if-not-resolved=\"False\" />"
  returns:
    type: "<xref href=\"com.fasterxml.jackson.databind.MappingIterator?alt=com.fasterxml.jackson.databind.MappingIterator&text=MappingIterator\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.fasterxml.jackson.databind.ObjectReader.<T>readValues(java.io.Reader)"
  fullName: "com.fasterxml.jackson.databind.ObjectReader.<T>readValues(Reader src)"
  name: "<T>readValues(Reader src)"
  nameWithType: "ObjectReader.<T>readValues(Reader src)"
  summary: "Overloaded version of <xref uid=\"com.fasterxml.jackson.databind.ObjectReader.&lt;T&gt;readValue(java.io.InputStream)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#readValue(InputStream)\"></xref>."
  parameters:
  - name: "src"
    type: "<xref href=\"java.io.Reader?alt=java.io.Reader&text=Reader\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public MappingIterator<T> <T>readValues(Reader src)"
  exceptions:
  - type: "<xref href=\"java.io.IOException?alt=java.io.IOException&text=IOException\" data-throw-if-not-resolved=\"False\" />"
  returns:
    type: "<xref href=\"com.fasterxml.jackson.databind.MappingIterator?alt=com.fasterxml.jackson.databind.MappingIterator&text=MappingIterator\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.fasterxml.jackson.databind.ObjectReader.<T>readValues(java.lang.String)"
  fullName: "com.fasterxml.jackson.databind.ObjectReader.<T>readValues(String json)"
  name: "<T>readValues(String json)"
  nameWithType: "ObjectReader.<T>readValues(String json)"
  summary: "Overloaded version of <xref uid=\"com.fasterxml.jackson.databind.ObjectReader.&lt;T&gt;readValue(java.io.InputStream)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#readValue(InputStream)\"></xref>."
  parameters:
  - description: "String that contains JSON content to parse"
    name: "json"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public MappingIterator<T> <T>readValues(String json)"
  exceptions:
  - type: "<xref href=\"java.io.IOException?alt=java.io.IOException&text=IOException\" data-throw-if-not-resolved=\"False\" />"
  returns:
    type: "<xref href=\"com.fasterxml.jackson.databind.MappingIterator?alt=com.fasterxml.jackson.databind.MappingIterator&text=MappingIterator\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.fasterxml.jackson.databind.ObjectReader.<T>readValues(java.net.URL)"
  fullName: "com.fasterxml.jackson.databind.ObjectReader.<T>readValues(URL src)"
  name: "<T>readValues(URL src)"
  nameWithType: "ObjectReader.<T>readValues(URL src)"
  summary: "Overloaded version of <xref uid=\"com.fasterxml.jackson.databind.ObjectReader.&lt;T&gt;readValue(java.io.InputStream)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#readValue(InputStream)\"></xref>.\n\nNOTE: handling of <xref uid=\"java.net.URL\" data-throw-if-not-resolved=\"false\" data-raw-source=\"java.net.URL\"></xref> is delegated to <xref uid=\"com.fasterxml.jackson.core.JsonFactory.createParser(java.net.URL)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"JsonFactory#createParser(java.net.URL)\"></xref> and usually simply calls <xref uid=\"java.net.URL.openStream*\" data-throw-if-not-resolved=\"false\" data-raw-source=\"java.net.URL#openStream()\"></xref>, meaning no special handling is done. If different HTTP connection options are needed you will need to create <xref uid=\"java.io.InputStream\" data-throw-if-not-resolved=\"false\" data-raw-source=\"java.io.InputStream\"></xref> separately."
  parameters:
  - description: "URL to read to access JSON content to parse."
    name: "src"
    type: "<xref href=\"java.net.URL?alt=java.net.URL&text=URL\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public MappingIterator<T> <T>readValues(URL src)"
  exceptions:
  - type: "<xref href=\"java.io.IOException?alt=java.io.IOException&text=IOException\" data-throw-if-not-resolved=\"False\" />"
  returns:
    type: "<xref href=\"com.fasterxml.jackson.databind.MappingIterator?alt=com.fasterxml.jackson.databind.MappingIterator&text=MappingIterator\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
type: "method"
metadata: {}
package: "com.fasterxml.jackson.databind"
artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
