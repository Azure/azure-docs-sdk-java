### YamlMime:ManagedReference
items:
- uid: "com.azure.cosmos.ConnectionPolicy"
  id: "ConnectionPolicy"
  parent: "com.azure.cosmos"
  children:
  - "com.azure.cosmos.ConnectionPolicy.ConnectionPolicy()"
  - "com.azure.cosmos.ConnectionPolicy.getConnectionMode()"
  - "com.azure.cosmos.ConnectionPolicy.getDefaultPolicy()"
  - "com.azure.cosmos.ConnectionPolicy.getIdleConnectionTimeout()"
  - "com.azure.cosmos.ConnectionPolicy.getMaxPoolSize()"
  - "com.azure.cosmos.ConnectionPolicy.getPreferredLocations()"
  - "com.azure.cosmos.ConnectionPolicy.getProxy()"
  - "com.azure.cosmos.ConnectionPolicy.getRequestTimeout()"
  - "com.azure.cosmos.ConnectionPolicy.getThrottlingRetryOptions()"
  - "com.azure.cosmos.ConnectionPolicy.getUserAgentSuffix()"
  - "com.azure.cosmos.ConnectionPolicy.isEndpointDiscoveryEnabled()"
  - "com.azure.cosmos.ConnectionPolicy.isReadRequestsFallbackEnabled()"
  - "com.azure.cosmos.ConnectionPolicy.isUsingMultipleWriteLocations()"
  - "com.azure.cosmos.ConnectionPolicy.setConnectionMode(com.azure.cosmos.ConnectionMode)"
  - "com.azure.cosmos.ConnectionPolicy.setEndpointDiscoveryEnabled(boolean)"
  - "com.azure.cosmos.ConnectionPolicy.setIdleConnectionTimeout(java.time.Duration)"
  - "com.azure.cosmos.ConnectionPolicy.setMaxPoolSize(int)"
  - "com.azure.cosmos.ConnectionPolicy.setPreferredLocations(java.util.List<java.lang.String>)"
  - "com.azure.cosmos.ConnectionPolicy.setProxy(java.net.InetSocketAddress)"
  - "com.azure.cosmos.ConnectionPolicy.setReadRequestsFallbackEnabled(java.lang.Boolean)"
  - "com.azure.cosmos.ConnectionPolicy.setRequestTimeout(java.time.Duration)"
  - "com.azure.cosmos.ConnectionPolicy.setThrottlingRetryOptions(com.azure.cosmos.ThrottlingRetryOptions)"
  - "com.azure.cosmos.ConnectionPolicy.setUserAgentSuffix(java.lang.String)"
  - "com.azure.cosmos.ConnectionPolicy.setUsingMultipleWriteLocations(boolean)"
  - "com.azure.cosmos.ConnectionPolicy.toString()"
  langs:
  - "java"
  name: "ConnectionPolicy"
  nameWithType: "ConnectionPolicy"
  fullName: "com.azure.cosmos.ConnectionPolicy"
  type: "Class"
  package: "com.azure.cosmos"
  summary: "Represents the Connection policy associated with a DocumentClient in the Azure Cosmos DB database service."
  syntax:
    content: "public final class ConnectionPolicy"
  inheritance:
  - "java.lang.Object"
  inheritedMembers:
  - "java.lang.Object.clone()"
  - "java.lang.Object.equals(java.lang.Object)"
  - "java.lang.Object.finalize()"
  - "java.lang.Object.getClass()"
  - "java.lang.Object.hashCode()"
  - "java.lang.Object.notify()"
  - "java.lang.Object.notifyAll()"
  - "java.lang.Object.toString()"
  - "java.lang.Object.wait()"
  - "java.lang.Object.wait(long)"
  - "java.lang.Object.wait(long,int)"
- uid: "com.azure.cosmos.ConnectionPolicy.ConnectionPolicy()"
  id: "ConnectionPolicy()"
  parent: "com.azure.cosmos.ConnectionPolicy"
  langs:
  - "java"
  name: "ConnectionPolicy()"
  nameWithType: "ConnectionPolicy.ConnectionPolicy()"
  fullName: "com.azure.cosmos.ConnectionPolicy.ConnectionPolicy()"
  overload: "com.azure.cosmos.ConnectionPolicy.ConnectionPolicy*"
  type: "Constructor"
  package: "com.azure.cosmos"
  summary: "Constructor."
  syntax:
    content: "public ConnectionPolicy()"
- uid: "com.azure.cosmos.ConnectionPolicy.getConnectionMode()"
  id: "getConnectionMode()"
  parent: "com.azure.cosmos.ConnectionPolicy"
  langs:
  - "java"
  name: "getConnectionMode()"
  nameWithType: "ConnectionPolicy.getConnectionMode()"
  fullName: "com.azure.cosmos.ConnectionPolicy.getConnectionMode()"
  overload: "com.azure.cosmos.ConnectionPolicy.getConnectionMode*"
  type: "Method"
  package: "com.azure.cosmos"
  summary: "Gets the connection mode used in the client."
  syntax:
    content: "public ConnectionMode getConnectionMode()"
    return:
      type: "com.azure.cosmos.ConnectionMode"
      description: "the connection mode."
- uid: "com.azure.cosmos.ConnectionPolicy.getDefaultPolicy()"
  id: "getDefaultPolicy()"
  parent: "com.azure.cosmos.ConnectionPolicy"
  langs:
  - "java"
  name: "getDefaultPolicy()"
  nameWithType: "ConnectionPolicy.getDefaultPolicy()"
  fullName: "com.azure.cosmos.ConnectionPolicy.getDefaultPolicy()"
  overload: "com.azure.cosmos.ConnectionPolicy.getDefaultPolicy*"
  type: "Method"
  package: "com.azure.cosmos"
  summary: "Gets the default connection policy."
  syntax:
    content: "public static ConnectionPolicy getDefaultPolicy()"
    return:
      type: "com.azure.cosmos.ConnectionPolicy"
      description: "the default connection policy."
- uid: "com.azure.cosmos.ConnectionPolicy.getIdleConnectionTimeout()"
  id: "getIdleConnectionTimeout()"
  parent: "com.azure.cosmos.ConnectionPolicy"
  langs:
  - "java"
  name: "getIdleConnectionTimeout()"
  nameWithType: "ConnectionPolicy.getIdleConnectionTimeout()"
  fullName: "com.azure.cosmos.ConnectionPolicy.getIdleConnectionTimeout()"
  overload: "com.azure.cosmos.ConnectionPolicy.getIdleConnectionTimeout*"
  type: "Method"
  package: "com.azure.cosmos"
  summary: "Gets the value of the timeout for an idle connection, the default is 60 seconds."
  syntax:
    content: "public Duration getIdleConnectionTimeout()"
    return:
      type: "java.time.Duration"
      description: "Idle connection timeout duration."
- uid: "com.azure.cosmos.ConnectionPolicy.getMaxPoolSize()"
  id: "getMaxPoolSize()"
  parent: "com.azure.cosmos.ConnectionPolicy"
  langs:
  - "java"
  name: "getMaxPoolSize()"
  nameWithType: "ConnectionPolicy.getMaxPoolSize()"
  fullName: "com.azure.cosmos.ConnectionPolicy.getMaxPoolSize()"
  overload: "com.azure.cosmos.ConnectionPolicy.getMaxPoolSize*"
  type: "Method"
  package: "com.azure.cosmos"
  summary: "Gets the value of the connection pool size the client is using."
  syntax:
    content: "public int getMaxPoolSize()"
    return:
      type: "int"
      description: "connection pool size."
- uid: "com.azure.cosmos.ConnectionPolicy.getPreferredLocations()"
  id: "getPreferredLocations()"
  parent: "com.azure.cosmos.ConnectionPolicy"
  langs:
  - "java"
  name: "getPreferredLocations()"
  nameWithType: "ConnectionPolicy.getPreferredLocations()"
  fullName: "com.azure.cosmos.ConnectionPolicy.getPreferredLocations()"
  overload: "com.azure.cosmos.ConnectionPolicy.getPreferredLocations*"
  type: "Method"
  package: "com.azure.cosmos"
  summary: "Gets the preferred locations for geo-replicated database accounts"
  syntax:
    content: "public List<String> getPreferredLocations()"
    return:
      type: "java.util.List<java.lang.String>"
      description: "the list of preferred location."
- uid: "com.azure.cosmos.ConnectionPolicy.getProxy()"
  id: "getProxy()"
  parent: "com.azure.cosmos.ConnectionPolicy"
  langs:
  - "java"
  name: "getProxy()"
  nameWithType: "ConnectionPolicy.getProxy()"
  fullName: "com.azure.cosmos.ConnectionPolicy.getProxy()"
  overload: "com.azure.cosmos.ConnectionPolicy.getProxy*"
  type: "Method"
  package: "com.azure.cosmos"
  summary: "Gets the InetSocketAddress of proxy server."
  syntax:
    content: "public InetSocketAddress getProxy()"
    return:
      type: "java.net.InetSocketAddress"
      description: "the value of proxyHost."
- uid: "com.azure.cosmos.ConnectionPolicy.getRequestTimeout()"
  id: "getRequestTimeout()"
  parent: "com.azure.cosmos.ConnectionPolicy"
  langs:
  - "java"
  name: "getRequestTimeout()"
  nameWithType: "ConnectionPolicy.getRequestTimeout()"
  fullName: "com.azure.cosmos.ConnectionPolicy.getRequestTimeout()"
  overload: "com.azure.cosmos.ConnectionPolicy.getRequestTimeout*"
  type: "Method"
  package: "com.azure.cosmos"
  summary: "Gets the request timeout (time to wait for response from network peer)."
  syntax:
    content: "public Duration getRequestTimeout()"
    return:
      type: "java.time.Duration"
      description: "the request timeout duration."
- uid: "com.azure.cosmos.ConnectionPolicy.getThrottlingRetryOptions()"
  id: "getThrottlingRetryOptions()"
  parent: "com.azure.cosmos.ConnectionPolicy"
  langs:
  - "java"
  name: "getThrottlingRetryOptions()"
  nameWithType: "ConnectionPolicy.getThrottlingRetryOptions()"
  fullName: "com.azure.cosmos.ConnectionPolicy.getThrottlingRetryOptions()"
  overload: "com.azure.cosmos.ConnectionPolicy.getThrottlingRetryOptions*"
  type: "Method"
  package: "com.azure.cosmos"
  summary: "Gets the retry policy options associated with the DocumentClient instance."
  syntax:
    content: "public ThrottlingRetryOptions getThrottlingRetryOptions()"
    return:
      type: "com.azure.cosmos.ThrottlingRetryOptions"
      description: "the RetryOptions instance."
- uid: "com.azure.cosmos.ConnectionPolicy.getUserAgentSuffix()"
  id: "getUserAgentSuffix()"
  parent: "com.azure.cosmos.ConnectionPolicy"
  langs:
  - "java"
  name: "getUserAgentSuffix()"
  nameWithType: "ConnectionPolicy.getUserAgentSuffix()"
  fullName: "com.azure.cosmos.ConnectionPolicy.getUserAgentSuffix()"
  overload: "com.azure.cosmos.ConnectionPolicy.getUserAgentSuffix*"
  type: "Method"
  package: "com.azure.cosmos"
  summary: "Gets the value of user-agent suffix."
  syntax:
    content: "public String getUserAgentSuffix()"
    return:
      type: "java.lang.String"
      description: "the value of user-agent suffix."
- uid: "com.azure.cosmos.ConnectionPolicy.isEndpointDiscoveryEnabled()"
  id: "isEndpointDiscoveryEnabled()"
  parent: "com.azure.cosmos.ConnectionPolicy"
  langs:
  - "java"
  name: "isEndpointDiscoveryEnabled()"
  nameWithType: "ConnectionPolicy.isEndpointDiscoveryEnabled()"
  fullName: "com.azure.cosmos.ConnectionPolicy.isEndpointDiscoveryEnabled()"
  overload: "com.azure.cosmos.ConnectionPolicy.isEndpointDiscoveryEnabled*"
  type: "Method"
  package: "com.azure.cosmos"
  summary: "Gets the flag to enable endpoint discovery for geo-replicated database accounts."
  syntax:
    content: "public boolean isEndpointDiscoveryEnabled()"
    return:
      type: "boolean"
      description: "whether endpoint discovery is enabled."
- uid: "com.azure.cosmos.ConnectionPolicy.isReadRequestsFallbackEnabled()"
  id: "isReadRequestsFallbackEnabled()"
  parent: "com.azure.cosmos.ConnectionPolicy"
  langs:
  - "java"
  name: "isReadRequestsFallbackEnabled()"
  nameWithType: "ConnectionPolicy.isReadRequestsFallbackEnabled()"
  fullName: "com.azure.cosmos.ConnectionPolicy.isReadRequestsFallbackEnabled()"
  overload: "com.azure.cosmos.ConnectionPolicy.isReadRequestsFallbackEnabled*"
  type: "Method"
  package: "com.azure.cosmos"
  summary: "Gets whether to allow for reads to go to multiple regions configured on an account of Azure Cosmos DB service.\n\nDEFAULT value is null.\n\nIf this property is not set, the default is true for all Consistency Levels other than Bounded Staleness, The default is false for Bounded Staleness. 1. <xref uid=\"\" data-throw-if-not-resolved=\"false\">#endpointDiscoveryEnabled</xref> is true 2. the Azure Cosmos DB account has more than one region"
  syntax:
    content: "public Boolean isReadRequestsFallbackEnabled()"
    return:
      type: "java.lang.Boolean"
      description: "flag to allow for reads to go to multiple regions configured on an account of Azure Cosmos DB service."
- uid: "com.azure.cosmos.ConnectionPolicy.isUsingMultipleWriteLocations()"
  id: "isUsingMultipleWriteLocations()"
  parent: "com.azure.cosmos.ConnectionPolicy"
  langs:
  - "java"
  name: "isUsingMultipleWriteLocations()"
  nameWithType: "ConnectionPolicy.isUsingMultipleWriteLocations()"
  fullName: "com.azure.cosmos.ConnectionPolicy.isUsingMultipleWriteLocations()"
  overload: "com.azure.cosmos.ConnectionPolicy.isUsingMultipleWriteLocations*"
  type: "Method"
  package: "com.azure.cosmos"
  summary: "Gets the flag to enable writes on any locations (regions) for geo-replicated database accounts in the Azure Cosmos DB service.\n\nWhen the value of this property is true, the SDK will direct write operations to available writable locations of geo-replicated database account. Writable locations are ordered by PreferredLocations property. Setting the property value to true has no effect until EnableMultipleWriteLocations in DatabaseAccount is also set to true.\n\nDEFAULT value is true indicating that writes are directed to available writable locations of geo-replicated database account."
  syntax:
    content: "public boolean isUsingMultipleWriteLocations()"
    return:
      type: "boolean"
      description: "flag to enable writes on any locations (regions) for geo-replicated database accounts."
- uid: "com.azure.cosmos.ConnectionPolicy.setConnectionMode(com.azure.cosmos.ConnectionMode)"
  id: "setConnectionMode(com.azure.cosmos.ConnectionMode)"
  parent: "com.azure.cosmos.ConnectionPolicy"
  langs:
  - "java"
  name: "setConnectionMode(ConnectionMode connectionMode)"
  nameWithType: "ConnectionPolicy.setConnectionMode(ConnectionMode connectionMode)"
  fullName: "com.azure.cosmos.ConnectionPolicy.setConnectionMode(ConnectionMode connectionMode)"
  overload: "com.azure.cosmos.ConnectionPolicy.setConnectionMode*"
  type: "Method"
  package: "com.azure.cosmos"
  summary: "Sets the connection mode used in the client."
  syntax:
    content: "public ConnectionPolicy setConnectionMode(ConnectionMode connectionMode)"
    parameters:
    - id: "connectionMode"
      type: "com.azure.cosmos.ConnectionMode"
      description: "the connection mode."
    return:
      type: "com.azure.cosmos.ConnectionPolicy"
      description: "the ConnectionPolicy."
- uid: "com.azure.cosmos.ConnectionPolicy.setEndpointDiscoveryEnabled(boolean)"
  id: "setEndpointDiscoveryEnabled(boolean)"
  parent: "com.azure.cosmos.ConnectionPolicy"
  langs:
  - "java"
  name: "setEndpointDiscoveryEnabled(boolean endpointDiscoveryEnabled)"
  nameWithType: "ConnectionPolicy.setEndpointDiscoveryEnabled(boolean endpointDiscoveryEnabled)"
  fullName: "com.azure.cosmos.ConnectionPolicy.setEndpointDiscoveryEnabled(boolean endpointDiscoveryEnabled)"
  overload: "com.azure.cosmos.ConnectionPolicy.setEndpointDiscoveryEnabled*"
  type: "Method"
  package: "com.azure.cosmos"
  summary: "Sets the flag to enable endpoint discovery for geo-replicated database accounts.\n\nWhen EnableEndpointDiscovery is true, the SDK will automatically discover the current write and read regions to ensure requests are sent to the correct region based on the capability of the region and the user's preference.\n\nThe default value for this property is true indicating endpoint discovery is enabled."
  syntax:
    content: "public ConnectionPolicy setEndpointDiscoveryEnabled(boolean endpointDiscoveryEnabled)"
    parameters:
    - id: "endpointDiscoveryEnabled"
      type: "boolean"
      description: "true if EndpointDiscovery is enabled."
    return:
      type: "com.azure.cosmos.ConnectionPolicy"
      description: "the ConnectionPolicy."
- uid: "com.azure.cosmos.ConnectionPolicy.setIdleConnectionTimeout(java.time.Duration)"
  id: "setIdleConnectionTimeout(java.time.Duration)"
  parent: "com.azure.cosmos.ConnectionPolicy"
  langs:
  - "java"
  name: "setIdleConnectionTimeout(Duration idleConnectionTimeout)"
  nameWithType: "ConnectionPolicy.setIdleConnectionTimeout(Duration idleConnectionTimeout)"
  fullName: "com.azure.cosmos.ConnectionPolicy.setIdleConnectionTimeout(Duration idleConnectionTimeout)"
  overload: "com.azure.cosmos.ConnectionPolicy.setIdleConnectionTimeout*"
  type: "Method"
  package: "com.azure.cosmos"
  summary: "sets the value of the timeout for an idle connection. After that time, the connection will be automatically closed."
  syntax:
    content: "public ConnectionPolicy setIdleConnectionTimeout(Duration idleConnectionTimeout)"
    parameters:
    - id: "idleConnectionTimeout"
      type: "java.time.Duration"
      description: "the duration for an idle connection."
    return:
      type: "com.azure.cosmos.ConnectionPolicy"
      description: "the ConnectionPolicy."
- uid: "com.azure.cosmos.ConnectionPolicy.setMaxPoolSize(int)"
  id: "setMaxPoolSize(int)"
  parent: "com.azure.cosmos.ConnectionPolicy"
  langs:
  - "java"
  name: "setMaxPoolSize(int maxPoolSize)"
  nameWithType: "ConnectionPolicy.setMaxPoolSize(int maxPoolSize)"
  fullName: "com.azure.cosmos.ConnectionPolicy.setMaxPoolSize(int maxPoolSize)"
  overload: "com.azure.cosmos.ConnectionPolicy.setMaxPoolSize*"
  type: "Method"
  package: "com.azure.cosmos"
  summary: "Sets the value of the connection pool size, the default is 1000."
  syntax:
    content: "public ConnectionPolicy setMaxPoolSize(int maxPoolSize)"
    parameters:
    - id: "maxPoolSize"
      type: "int"
      description: "The value of the connection pool size."
    return:
      type: "com.azure.cosmos.ConnectionPolicy"
      description: "the ConnectionPolicy."
- uid: "com.azure.cosmos.ConnectionPolicy.setPreferredLocations(java.util.List<java.lang.String>)"
  id: "setPreferredLocations(java.util.List<java.lang.String>)"
  parent: "com.azure.cosmos.ConnectionPolicy"
  langs:
  - "java"
  name: "setPreferredLocations(List<String> preferredLocations)"
  nameWithType: "ConnectionPolicy.setPreferredLocations(List<String> preferredLocations)"
  fullName: "com.azure.cosmos.ConnectionPolicy.setPreferredLocations(List<String> preferredLocations)"
  overload: "com.azure.cosmos.ConnectionPolicy.setPreferredLocations*"
  type: "Method"
  package: "com.azure.cosmos"
  summary: "Sets the preferred locations for geo-replicated database accounts. For example, \"East US\" as the preferred location.\n\nWhen EnableEndpointDiscovery is true and PreferredRegions is non-empty, the SDK will prefer to use the locations in the collection in the order they are specified to perform operations.\n\nIf EnableEndpointDiscovery is set to false, this property is ignored."
  syntax:
    content: "public ConnectionPolicy setPreferredLocations(List<String> preferredLocations)"
    parameters:
    - id: "preferredLocations"
      type: "java.util.List<java.lang.String>"
      description: "the list of preferred locations."
    return:
      type: "com.azure.cosmos.ConnectionPolicy"
      description: "the ConnectionPolicy."
- uid: "com.azure.cosmos.ConnectionPolicy.setProxy(java.net.InetSocketAddress)"
  id: "setProxy(java.net.InetSocketAddress)"
  parent: "com.azure.cosmos.ConnectionPolicy"
  langs:
  - "java"
  name: "setProxy(InetSocketAddress proxy)"
  nameWithType: "ConnectionPolicy.setProxy(InetSocketAddress proxy)"
  fullName: "com.azure.cosmos.ConnectionPolicy.setProxy(InetSocketAddress proxy)"
  overload: "com.azure.cosmos.ConnectionPolicy.setProxy*"
  type: "Method"
  package: "com.azure.cosmos"
  summary: "This will create the InetSocketAddress for proxy server, all the requests to cosmoDB will route from this address."
  syntax:
    content: "public ConnectionPolicy setProxy(InetSocketAddress proxy)"
    parameters:
    - id: "proxy"
      type: "java.net.InetSocketAddress"
      description: "The proxy server."
    return:
      type: "com.azure.cosmos.ConnectionPolicy"
      description: "the ConnectionPolicy."
- uid: "com.azure.cosmos.ConnectionPolicy.setReadRequestsFallbackEnabled(java.lang.Boolean)"
  id: "setReadRequestsFallbackEnabled(java.lang.Boolean)"
  parent: "com.azure.cosmos.ConnectionPolicy"
  langs:
  - "java"
  name: "setReadRequestsFallbackEnabled(Boolean readRequestsFallbackEnabled)"
  nameWithType: "ConnectionPolicy.setReadRequestsFallbackEnabled(Boolean readRequestsFallbackEnabled)"
  fullName: "com.azure.cosmos.ConnectionPolicy.setReadRequestsFallbackEnabled(Boolean readRequestsFallbackEnabled)"
  overload: "com.azure.cosmos.ConnectionPolicy.setReadRequestsFallbackEnabled*"
  type: "Method"
  package: "com.azure.cosmos"
  summary: "Sets whether to allow for reads to go to multiple regions configured on an account of Azure Cosmos DB service.\n\nDEFAULT value is null.\n\nIf this property is not set, the default is true for all Consistency Levels other than Bounded Staleness, The default is false for Bounded Staleness. 1. <xref uid=\"\" data-throw-if-not-resolved=\"false\">#endpointDiscoveryEnabled</xref> is true 2. the Azure Cosmos DB account has more than one region"
  syntax:
    content: "public ConnectionPolicy setReadRequestsFallbackEnabled(Boolean readRequestsFallbackEnabled)"
    parameters:
    - id: "readRequestsFallbackEnabled"
      type: "java.lang.Boolean"
      description: "flag to enable reads to go to multiple regions configured on an account of\n Azure Cosmos DB service."
    return:
      type: "com.azure.cosmos.ConnectionPolicy"
      description: "the ConnectionPolicy."
- uid: "com.azure.cosmos.ConnectionPolicy.setRequestTimeout(java.time.Duration)"
  id: "setRequestTimeout(java.time.Duration)"
  parent: "com.azure.cosmos.ConnectionPolicy"
  langs:
  - "java"
  name: "setRequestTimeout(Duration requestTimeout)"
  nameWithType: "ConnectionPolicy.setRequestTimeout(Duration requestTimeout)"
  fullName: "com.azure.cosmos.ConnectionPolicy.setRequestTimeout(Duration requestTimeout)"
  overload: "com.azure.cosmos.ConnectionPolicy.setRequestTimeout*"
  type: "Method"
  package: "com.azure.cosmos"
  summary: "Sets the request timeout (time to wait for response from network peer). The default is 60 seconds."
  syntax:
    content: "public ConnectionPolicy setRequestTimeout(Duration requestTimeout)"
    parameters:
    - id: "requestTimeout"
      type: "java.time.Duration"
      description: "the request timeout duration."
    return:
      type: "com.azure.cosmos.ConnectionPolicy"
      description: "the ConnectionPolicy."
- uid: "com.azure.cosmos.ConnectionPolicy.setThrottlingRetryOptions(com.azure.cosmos.ThrottlingRetryOptions)"
  id: "setThrottlingRetryOptions(com.azure.cosmos.ThrottlingRetryOptions)"
  parent: "com.azure.cosmos.ConnectionPolicy"
  langs:
  - "java"
  name: "setThrottlingRetryOptions(ThrottlingRetryOptions throttlingRetryOptions)"
  nameWithType: "ConnectionPolicy.setThrottlingRetryOptions(ThrottlingRetryOptions throttlingRetryOptions)"
  fullName: "com.azure.cosmos.ConnectionPolicy.setThrottlingRetryOptions(ThrottlingRetryOptions throttlingRetryOptions)"
  overload: "com.azure.cosmos.ConnectionPolicy.setThrottlingRetryOptions*"
  type: "Method"
  package: "com.azure.cosmos"
  summary: "Sets the retry policy options associated with the DocumentClient instance.\n\nProperties in the RetryOptions class allow application to customize the built-in retry policies. This property is optional. When it's not set, the SDK uses the default values for configuring the retry policies. See RetryOptions class for more details."
  syntax:
    content: "public ConnectionPolicy setThrottlingRetryOptions(ThrottlingRetryOptions throttlingRetryOptions)"
    parameters:
    - id: "throttlingRetryOptions"
      type: "com.azure.cosmos.ThrottlingRetryOptions"
      description: "the RetryOptions instance."
    return:
      type: "com.azure.cosmos.ConnectionPolicy"
      description: "the ConnectionPolicy."
- uid: "com.azure.cosmos.ConnectionPolicy.setUserAgentSuffix(java.lang.String)"
  id: "setUserAgentSuffix(java.lang.String)"
  parent: "com.azure.cosmos.ConnectionPolicy"
  langs:
  - "java"
  name: "setUserAgentSuffix(String userAgentSuffix)"
  nameWithType: "ConnectionPolicy.setUserAgentSuffix(String userAgentSuffix)"
  fullName: "com.azure.cosmos.ConnectionPolicy.setUserAgentSuffix(String userAgentSuffix)"
  overload: "com.azure.cosmos.ConnectionPolicy.setUserAgentSuffix*"
  type: "Method"
  package: "com.azure.cosmos"
  summary: "sets the value of the user-agent suffix."
  syntax:
    content: "public ConnectionPolicy setUserAgentSuffix(String userAgentSuffix)"
    parameters:
    - id: "userAgentSuffix"
      type: "java.lang.String"
      description: "The value to be appended to the user-agent header, this is\n used for monitoring purposes."
    return:
      type: "com.azure.cosmos.ConnectionPolicy"
      description: "the ConnectionPolicy."
- uid: "com.azure.cosmos.ConnectionPolicy.setUsingMultipleWriteLocations(boolean)"
  id: "setUsingMultipleWriteLocations(boolean)"
  parent: "com.azure.cosmos.ConnectionPolicy"
  langs:
  - "java"
  name: "setUsingMultipleWriteLocations(boolean usingMultipleWriteLocations)"
  nameWithType: "ConnectionPolicy.setUsingMultipleWriteLocations(boolean usingMultipleWriteLocations)"
  fullName: "com.azure.cosmos.ConnectionPolicy.setUsingMultipleWriteLocations(boolean usingMultipleWriteLocations)"
  overload: "com.azure.cosmos.ConnectionPolicy.setUsingMultipleWriteLocations*"
  type: "Method"
  package: "com.azure.cosmos"
  summary: "Sets the flag to enable writes on any locations (regions) for geo-replicated database accounts in the Azure Cosmos DB service.\n\nWhen the value of this property is true, the SDK will direct write operations to available writable locations of geo-replicated database account. Writable locations are ordered by PreferredLocations property. Setting the property value to true has no effect until EnableMultipleWriteLocations in DatabaseAccount is also set to true.\n\nDEFAULT value is false indicating that writes are only directed to first region in PreferredLocations property."
  syntax:
    content: "public ConnectionPolicy setUsingMultipleWriteLocations(boolean usingMultipleWriteLocations)"
    parameters:
    - id: "usingMultipleWriteLocations"
      type: "boolean"
      description: "flag to enable writes on any locations (regions) for geo-replicated\n database accounts."
    return:
      type: "com.azure.cosmos.ConnectionPolicy"
      description: "the ConnectionPolicy."
- uid: "com.azure.cosmos.ConnectionPolicy.toString()"
  id: "toString()"
  parent: "com.azure.cosmos.ConnectionPolicy"
  langs:
  - "java"
  name: "toString()"
  nameWithType: "ConnectionPolicy.toString()"
  fullName: "com.azure.cosmos.ConnectionPolicy.toString()"
  overload: "com.azure.cosmos.ConnectionPolicy.toString*"
  type: "Method"
  package: "com.azure.cosmos"
  syntax:
    content: "public String toString()"
    return:
      type: "java.lang.String"
references:
- uid: "com.azure.cosmos.ConnectionPolicy.ConnectionPolicy*"
  name: "ConnectionPolicy"
  nameWithType: "ConnectionPolicy.ConnectionPolicy"
  fullName: "com.azure.cosmos.ConnectionPolicy.ConnectionPolicy"
  package: "com.azure.cosmos"
- uid: "com.azure.cosmos.ConnectionPolicy.getDefaultPolicy*"
  name: "getDefaultPolicy"
  nameWithType: "ConnectionPolicy.getDefaultPolicy"
  fullName: "com.azure.cosmos.ConnectionPolicy.getDefaultPolicy"
  package: "com.azure.cosmos"
- uid: "java.time.Duration"
  spec.java:
  - uid: "java.time.Duration"
    name: "Duration"
    fullName: "java.time.Duration"
- uid: "com.azure.cosmos.ConnectionPolicy.getRequestTimeout*"
  name: "getRequestTimeout"
  nameWithType: "ConnectionPolicy.getRequestTimeout"
  fullName: "com.azure.cosmos.ConnectionPolicy.getRequestTimeout"
  package: "com.azure.cosmos"
- uid: "com.azure.cosmos.ConnectionPolicy.setRequestTimeout*"
  name: "setRequestTimeout"
  nameWithType: "ConnectionPolicy.setRequestTimeout"
  fullName: "com.azure.cosmos.ConnectionPolicy.setRequestTimeout"
  package: "com.azure.cosmos"
- uid: "com.azure.cosmos.ConnectionMode"
  name: "ConnectionMode"
  nameWithType: "ConnectionMode"
  fullName: "com.azure.cosmos.ConnectionMode"
- uid: "com.azure.cosmos.ConnectionPolicy.getConnectionMode*"
  name: "getConnectionMode"
  nameWithType: "ConnectionPolicy.getConnectionMode"
  fullName: "com.azure.cosmos.ConnectionPolicy.getConnectionMode"
  package: "com.azure.cosmos"
- uid: "com.azure.cosmos.ConnectionPolicy.setConnectionMode*"
  name: "setConnectionMode"
  nameWithType: "ConnectionPolicy.setConnectionMode"
  fullName: "com.azure.cosmos.ConnectionPolicy.setConnectionMode"
  package: "com.azure.cosmos"
- uid: "int"
  spec.java:
  - uid: "int"
    name: "int"
    fullName: "int"
- uid: "com.azure.cosmos.ConnectionPolicy.getMaxPoolSize*"
  name: "getMaxPoolSize"
  nameWithType: "ConnectionPolicy.getMaxPoolSize"
  fullName: "com.azure.cosmos.ConnectionPolicy.getMaxPoolSize"
  package: "com.azure.cosmos"
- uid: "com.azure.cosmos.ConnectionPolicy.setMaxPoolSize*"
  name: "setMaxPoolSize"
  nameWithType: "ConnectionPolicy.setMaxPoolSize"
  fullName: "com.azure.cosmos.ConnectionPolicy.setMaxPoolSize"
  package: "com.azure.cosmos"
- uid: "com.azure.cosmos.ConnectionPolicy.getIdleConnectionTimeout*"
  name: "getIdleConnectionTimeout"
  nameWithType: "ConnectionPolicy.getIdleConnectionTimeout"
  fullName: "com.azure.cosmos.ConnectionPolicy.getIdleConnectionTimeout"
  package: "com.azure.cosmos"
- uid: "com.azure.cosmos.ConnectionPolicy.setIdleConnectionTimeout*"
  name: "setIdleConnectionTimeout"
  nameWithType: "ConnectionPolicy.setIdleConnectionTimeout"
  fullName: "com.azure.cosmos.ConnectionPolicy.setIdleConnectionTimeout"
  package: "com.azure.cosmos"
- uid: "java.lang.String"
  spec.java:
  - uid: "java.lang.String"
    name: "String"
    fullName: "java.lang.String"
- uid: "com.azure.cosmos.ConnectionPolicy.getUserAgentSuffix*"
  name: "getUserAgentSuffix"
  nameWithType: "ConnectionPolicy.getUserAgentSuffix"
  fullName: "com.azure.cosmos.ConnectionPolicy.getUserAgentSuffix"
  package: "com.azure.cosmos"
- uid: "com.azure.cosmos.ConnectionPolicy.setUserAgentSuffix*"
  name: "setUserAgentSuffix"
  nameWithType: "ConnectionPolicy.setUserAgentSuffix"
  fullName: "com.azure.cosmos.ConnectionPolicy.setUserAgentSuffix"
  package: "com.azure.cosmos"
- uid: "com.azure.cosmos.ThrottlingRetryOptions"
  name: "ThrottlingRetryOptions"
  nameWithType: "ThrottlingRetryOptions"
  fullName: "com.azure.cosmos.ThrottlingRetryOptions"
- uid: "com.azure.cosmos.ConnectionPolicy.getThrottlingRetryOptions*"
  name: "getThrottlingRetryOptions"
  nameWithType: "ConnectionPolicy.getThrottlingRetryOptions"
  fullName: "com.azure.cosmos.ConnectionPolicy.getThrottlingRetryOptions"
  package: "com.azure.cosmos"
- uid: "com.azure.cosmos.ConnectionPolicy.setThrottlingRetryOptions*"
  name: "setThrottlingRetryOptions"
  nameWithType: "ConnectionPolicy.setThrottlingRetryOptions"
  fullName: "com.azure.cosmos.ConnectionPolicy.setThrottlingRetryOptions"
  package: "com.azure.cosmos"
- uid: "boolean"
  spec.java:
  - uid: "boolean"
    name: "boolean"
    fullName: "boolean"
- uid: "com.azure.cosmos.ConnectionPolicy.isEndpointDiscoveryEnabled*"
  name: "isEndpointDiscoveryEnabled"
  nameWithType: "ConnectionPolicy.isEndpointDiscoveryEnabled"
  fullName: "com.azure.cosmos.ConnectionPolicy.isEndpointDiscoveryEnabled"
  package: "com.azure.cosmos"
- uid: "com.azure.cosmos.ConnectionPolicy.setEndpointDiscoveryEnabled*"
  name: "setEndpointDiscoveryEnabled"
  nameWithType: "ConnectionPolicy.setEndpointDiscoveryEnabled"
  fullName: "com.azure.cosmos.ConnectionPolicy.setEndpointDiscoveryEnabled"
  package: "com.azure.cosmos"
- uid: "com.azure.cosmos.ConnectionPolicy.isUsingMultipleWriteLocations*"
  name: "isUsingMultipleWriteLocations"
  nameWithType: "ConnectionPolicy.isUsingMultipleWriteLocations"
  fullName: "com.azure.cosmos.ConnectionPolicy.isUsingMultipleWriteLocations"
  package: "com.azure.cosmos"
- uid: "java.lang.Boolean"
  spec.java:
  - uid: "java.lang.Boolean"
    name: "Boolean"
    fullName: "java.lang.Boolean"
- uid: "com.azure.cosmos.ConnectionPolicy.isReadRequestsFallbackEnabled*"
  name: "isReadRequestsFallbackEnabled"
  nameWithType: "ConnectionPolicy.isReadRequestsFallbackEnabled"
  fullName: "com.azure.cosmos.ConnectionPolicy.isReadRequestsFallbackEnabled"
  package: "com.azure.cosmos"
- uid: "com.azure.cosmos.ConnectionPolicy.setUsingMultipleWriteLocations*"
  name: "setUsingMultipleWriteLocations"
  nameWithType: "ConnectionPolicy.setUsingMultipleWriteLocations"
  fullName: "com.azure.cosmos.ConnectionPolicy.setUsingMultipleWriteLocations"
  package: "com.azure.cosmos"
- uid: "com.azure.cosmos.ConnectionPolicy.setReadRequestsFallbackEnabled*"
  name: "setReadRequestsFallbackEnabled"
  nameWithType: "ConnectionPolicy.setReadRequestsFallbackEnabled"
  fullName: "com.azure.cosmos.ConnectionPolicy.setReadRequestsFallbackEnabled"
  package: "com.azure.cosmos"
- uid: "java.util.List<java.lang.String>"
  spec.java:
  - uid: "java.util.List"
    name: "List"
    fullName: "java.util.List"
  - name: "<"
    fullName: "<"
  - uid: "java.lang.String"
    name: "String"
    fullName: "java.lang.String"
  - name: ">"
    fullName: ">"
- uid: "com.azure.cosmos.ConnectionPolicy.getPreferredLocations*"
  name: "getPreferredLocations"
  nameWithType: "ConnectionPolicy.getPreferredLocations"
  fullName: "com.azure.cosmos.ConnectionPolicy.getPreferredLocations"
  package: "com.azure.cosmos"
- uid: "com.azure.cosmos.ConnectionPolicy.setPreferredLocations*"
  name: "setPreferredLocations"
  nameWithType: "ConnectionPolicy.setPreferredLocations"
  fullName: "com.azure.cosmos.ConnectionPolicy.setPreferredLocations"
  package: "com.azure.cosmos"
- uid: "java.net.InetSocketAddress"
  spec.java:
  - uid: "java.net.InetSocketAddress"
    name: "InetSocketAddress"
    fullName: "java.net.InetSocketAddress"
- uid: "com.azure.cosmos.ConnectionPolicy.getProxy*"
  name: "getProxy"
  nameWithType: "ConnectionPolicy.getProxy"
  fullName: "com.azure.cosmos.ConnectionPolicy.getProxy"
  package: "com.azure.cosmos"
- uid: "com.azure.cosmos.ConnectionPolicy.setProxy*"
  name: "setProxy"
  nameWithType: "ConnectionPolicy.setProxy"
  fullName: "com.azure.cosmos.ConnectionPolicy.setProxy"
  package: "com.azure.cosmos"
- uid: "com.azure.cosmos.ConnectionPolicy.toString*"
  name: "toString"
  nameWithType: "ConnectionPolicy.toString"
  fullName: "com.azure.cosmos.ConnectionPolicy.toString"
  package: "com.azure.cosmos"
- uid: "java.lang.Object.notify()"
  name: "Object.notify()"
  nameWithType: "Object.notify()"
  fullName: "java.lang.Object.notify()"
- uid: "java.lang.Object.wait()"
  name: "Object.wait()"
  nameWithType: "Object.wait()"
  fullName: "java.lang.Object.wait()"
- uid: "java.lang.Object.finalize()"
  name: "Object.finalize()"
  nameWithType: "Object.finalize()"
  fullName: "java.lang.Object.finalize()"
- uid: "java.lang.Object.clone()"
  name: "Object.clone()"
  nameWithType: "Object.clone()"
  fullName: "java.lang.Object.clone()"
- uid: "java.lang.Object.notifyAll()"
  name: "Object.notifyAll()"
  nameWithType: "Object.notifyAll()"
  fullName: "java.lang.Object.notifyAll()"
- uid: "java.lang.Object.equals(java.lang.Object)"
  name: "Object.equals(Object)"
  nameWithType: "Object.equals(Object)"
  fullName: "java.lang.Object.equals(java.lang.Object)"
- uid: "java.lang.Object.getClass()"
  name: "Object.getClass()"
  nameWithType: "Object.getClass()"
  fullName: "java.lang.Object.getClass()"
- uid: "java.lang.Object.wait(long)"
  name: "Object.wait(long)"
  nameWithType: "Object.wait(long)"
  fullName: "java.lang.Object.wait(long)"
- uid: "java.lang.Object.hashCode()"
  name: "Object.hashCode()"
  nameWithType: "Object.hashCode()"
  fullName: "java.lang.Object.hashCode()"
- uid: "java.lang.Object.wait(long,int)"
  name: "Object.wait(long,int)"
  nameWithType: "Object.wait(long,int)"
  fullName: "java.lang.Object.wait(long,int)"
- uid: "java.lang.Object.toString()"
  name: "Object.toString()"
  nameWithType: "Object.toString()"
  fullName: "java.lang.Object.toString()"
- uid: "java.util.List"
  name: "List"
  nameWithType: "List"
  fullName: "java.util.List"
