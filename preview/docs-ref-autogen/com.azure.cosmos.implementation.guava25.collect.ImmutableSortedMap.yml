### YamlMime:ManagedReference
items:
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap
  id: ImmutableSortedMap
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect
  children:
  - com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap.<K,V>copyOf(java.lang.Iterable<? extends java.util.Map.Entry<? extends K,? extends V>>)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap.<K,V>copyOf(java.lang.Iterable<? extends java.util.Map.Entry<? extends K,? extends V>>,java.util.Comparator<? super K>)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap.<K,V>copyOf(java.util.Map<? extends K,? extends V>)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap.<K,V>copyOf(java.util.Map<? extends K,? extends V>,java.util.Comparator<? super K>)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap.<K,V>copyOfSorted(java.util.SortedMap<K,? extends V>)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap.<K,V>naturalOrder()
  - com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap.<K,V>of()
  - com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap.<K,V>of(K,V)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap.<K,V>of(K,V,K,V)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap.<K,V>of(K,V,K,V,K,V)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap.<K,V>of(K,V,K,V,K,V,K,V)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap.<K,V>of(K,V,K,V,K,V,K,V,K,V)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap.<K,V>orderedBy(java.util.Comparator<K>)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap.<K,V>reverseOrder()
  - com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap.<T,K,V>toImmutableSortedMap(java.util.Comparator<? super K>,java.util.function.Function<? super T,? extends K>,java.util.function.Function<? super T,? extends V>)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap.<T,K,V>toImmutableSortedMap(java.util.Comparator<? super K>,java.util.function.Function<? super T,? extends K>,java.util.function.Function<? super T,? extends V>,java.util.function.BinaryOperator<V>)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap.Builder
  - com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap.ceilingEntry(K)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap.ceilingKey(K)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap.comparator()
  - com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap.descendingKeySet()
  - com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap.descendingMap()
  - com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap.entrySet()
  - com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap.firstEntry()
  - com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap.firstKey()
  - com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap.floorEntry(K)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap.floorKey(K)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap.forEach(java.util.function.BiConsumer<? super K,? super V>)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap.get(java.lang.Object)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap.headMap(K)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap.headMap(K,boolean)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap.higherEntry(K)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap.higherKey(K)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap.keySet()
  - com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap.lastEntry()
  - com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap.lastKey()
  - com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap.lowerEntry(K)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap.lowerKey(K)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap.navigableKeySet()
  - com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap.pollFirstEntry()
  - com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap.pollLastEntry()
  - com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap.size()
  - com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap.subMap(K,K)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap.subMap(K,boolean,K,boolean)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap.tailMap(K)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap.tailMap(K,boolean)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap.values()
  langs:
  - java
  name: ImmutableSortedMap<K,V>
  nameWithType: ImmutableSortedMap<K,V>
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap<K,V>
  type: Class
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    A <xref uid="java.util.NavigableMap" data-throw-if-not-resolved="false">NavigableMap</xref> whose contents will never change, with many other important properties detailed at <xref uid="com.azure.cosmos.implementation.guava25.collect.ImmutableCollection" data-throw-if-not-resolved="false">ImmutableCollection</xref>.


    **Warning:** as with any sorted collection, you are strongly advised not to use a <xref uid="java.util.Comparator" data-throw-if-not-resolved="false">Comparator</xref> or <xref uid="java.lang.Comparable" data-throw-if-not-resolved="false">Comparable</xref> type whose comparison behavior is *inconsistent with equals*. That is, `a.compareTo(b)` or `comparator.compare(a, b)` should equal zero *if and only if* `a.equals(b)`. If this advice is not followed, the resulting map will not correctly obey its specification.


    See the Guava User Guide article on [ immutable collections][immutable collections].



    [immutable collections]: https://github.com/google/guava/wiki/ImmutableCollectionsExplained
  syntax:
    content: public final class ImmutableSortedMap<K,V> extends ImmutableSortedMapFauxverideShim<K,V> implements NavigableMap<K,V>
    typeParameters:
    - id: K
    - id: V
  inheritance:
  - java.lang.Object
  - com.azure.cosmos.implementation.guava25.collect.ImmutableMap
  - com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMapFauxverideShim
  implements:
  - java.util.NavigableMap<K,V>
  inheritedMembers:
  - com.azure.cosmos.implementation.guava25.collect.ImmutableMap.<K,V>copyOf(java.lang.Iterable<? extends java.util.Map.Entry<? extends K,? extends V>>)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableMap.<K,V>copyOf(java.util.Map<? extends K,? extends V>)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableMap.<K,V>of()
  - com.azure.cosmos.implementation.guava25.collect.ImmutableMap.asMultimap()
  - com.azure.cosmos.implementation.guava25.collect.ImmutableMap.clear()
  - com.azure.cosmos.implementation.guava25.collect.ImmutableMap.compute(K,java.util.function.BiFunction<? super K,? super V,? extends V>)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableMap.computeIfAbsent(K,java.util.function.Function<? super K,? extends V>)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableMap.computeIfPresent(K,java.util.function.BiFunction<? super K,? super V,? extends V>)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableMap.containsKey(java.lang.Object)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableMap.containsValue(java.lang.Object)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableMap.entrySet()
  - com.azure.cosmos.implementation.guava25.collect.ImmutableMap.equals(java.lang.Object)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableMap.get(java.lang.Object)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableMap.getOrDefault(java.lang.Object,V)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableMap.hashCode()
  - com.azure.cosmos.implementation.guava25.collect.ImmutableMap.isEmpty()
  - com.azure.cosmos.implementation.guava25.collect.ImmutableMap.keySet()
  - com.azure.cosmos.implementation.guava25.collect.ImmutableMap.merge(K,V,java.util.function.BiFunction<? super V,? super V,? extends V>)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableMap.put(K,V)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableMap.putAll(java.util.Map<? extends K,? extends V>)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableMap.putIfAbsent(K,V)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableMap.remove(java.lang.Object)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableMap.remove(java.lang.Object,java.lang.Object)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableMap.replace(K,V)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableMap.replace(K,V,V)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableMap.replaceAll(java.util.function.BiFunction<? super K,? super V,? extends V>)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableMap.toString()
  - com.azure.cosmos.implementation.guava25.collect.ImmutableMap.values()
  - com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMapFauxverideShim.<K,V>builder()
  - com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMapFauxverideShim.<K,V>builderWithExpectedSize(int)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMapFauxverideShim.<K,V>of(K,V)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMapFauxverideShim.<K,V>of(K,V,K,V)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMapFauxverideShim.<K,V>of(K,V,K,V,K,V)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMapFauxverideShim.<K,V>of(K,V,K,V,K,V,K,V)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMapFauxverideShim.<K,V>of(K,V,K,V,K,V,K,V,K,V)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMapFauxverideShim.<T,K,V>toImmutableMap(java.util.function.Function<? super T,? extends K>,java.util.function.Function<? super T,? extends V>)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMapFauxverideShim.<T,K,V>toImmutableMap(java.util.function.Function<? super T,? extends K>,java.util.function.Function<? super T,? extends V>,java.util.function.BinaryOperator<V>)
  - java.lang.Object.clone()
  - java.lang.Object.finalize()
  - java.lang.Object.getClass()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap.<K,V>copyOf(java.lang.Iterable<? extends java.util.Map.Entry<? extends K,? extends V>>)
  id: <K,V>copyOf(java.lang.Iterable<? extends java.util.Map.Entry<? extends K,? extends V>>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap
  langs:
  - java
  name: <K,V>copyOf(Iterable<? extends Map.Entry<? extends K,? extends V>> entries)
  nameWithType: ImmutableSortedMap<K,V>.<K,V>copyOf(Iterable<? extends Map.Entry<? extends K,? extends V>> entries)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap<K,V>.<K,V>copyOf(Iterable<? extends Map.Entry<? extends K,? extends V>> entries)
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap.copyOf*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Returns an immutable map containing the given entries, with keys sorted by the provided comparator.


    This method is not type-safe, as it may be called on a map with keys that are not mutually comparable.
  syntax:
    content: public static ImmutableSortedMap<K,V> <K,V>copyOf(Iterable<? extends Map.Entry<? extends K,? extends V>> entries)
    parameters:
    - id: entries
      type: java.lang.Iterable<? extends java.util.Map.Entry<? extends K,? extends V>>
    return:
      type: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap<K,V>
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap.<K,V>copyOf(java.lang.Iterable<? extends java.util.Map.Entry<? extends K,? extends V>>,java.util.Comparator<? super K>)
  id: <K,V>copyOf(java.lang.Iterable<? extends java.util.Map.Entry<? extends K,? extends V>>,java.util.Comparator<? super K>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap
  langs:
  - java
  name: <K,V>copyOf(Iterable<? extends Map.Entry<? extends K,? extends V>> entries, Comparator<? super K> comparator)
  nameWithType: ImmutableSortedMap<K,V>.<K,V>copyOf(Iterable<? extends Map.Entry<? extends K,? extends V>> entries, Comparator<? super K> comparator)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap<K,V>.<K,V>copyOf(Iterable<? extends Map.Entry<? extends K,? extends V>> entries, Comparator<? super K> comparator)
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap.copyOf*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Returns an immutable map containing the given entries, with keys sorted by the provided comparator.
  syntax:
    content: public static ImmutableSortedMap<K,V> <K,V>copyOf(Iterable<? extends Map.Entry<? extends K,? extends V>> entries, Comparator<? super K> comparator)
    parameters:
    - id: entries
      type: java.lang.Iterable<? extends java.util.Map.Entry<? extends K,? extends V>>
    - id: comparator
      type: java.util.Comparator<? super K>
    return:
      type: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap<K,V>
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap.<K,V>copyOf(java.util.Map<? extends K,? extends V>)
  id: <K,V>copyOf(java.util.Map<? extends K,? extends V>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap
  langs:
  - java
  name: <K,V>copyOf(Map<? extends K,? extends V> map)
  nameWithType: ImmutableSortedMap<K,V>.<K,V>copyOf(Map<? extends K,? extends V> map)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap<K,V>.<K,V>copyOf(Map<? extends K,? extends V> map)
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap.copyOf*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Returns an immutable map containing the same entries as `map`, sorted by the natural ordering of the keys.


    Despite the method name, this method attempts to avoid actually copying the data when it is safe to do so. The exact circumstances under which a copy will or will not be performed are undocumented and subject to change.


    This method is not type-safe, as it may be called on a map with keys that are not mutually comparable.
  syntax:
    content: public static ImmutableSortedMap<K,V> <K,V>copyOf(Map<? extends K,? extends V> map)
    parameters:
    - id: map
      type: java.util.Map<? extends K,? extends V>
    return:
      type: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap<K,V>
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap.<K,V>copyOf(java.util.Map<? extends K,? extends V>,java.util.Comparator<? super K>)
  id: <K,V>copyOf(java.util.Map<? extends K,? extends V>,java.util.Comparator<? super K>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap
  langs:
  - java
  name: <K,V>copyOf(Map<? extends K,? extends V> map, Comparator<? super K> comparator)
  nameWithType: ImmutableSortedMap<K,V>.<K,V>copyOf(Map<? extends K,? extends V> map, Comparator<? super K> comparator)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap<K,V>.<K,V>copyOf(Map<? extends K,? extends V> map, Comparator<? super K> comparator)
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap.copyOf*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Returns an immutable map containing the same entries as `map`, with keys sorted by the provided comparator.


    Despite the method name, this method attempts to avoid actually copying the data when it is safe to do so. The exact circumstances under which a copy will or will not be performed are undocumented and subject to change.
  syntax:
    content: public static ImmutableSortedMap<K,V> <K,V>copyOf(Map<? extends K,? extends V> map, Comparator<? super K> comparator)
    parameters:
    - id: map
      type: java.util.Map<? extends K,? extends V>
    - id: comparator
      type: java.util.Comparator<? super K>
    return:
      type: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap<K,V>
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap.<K,V>copyOfSorted(java.util.SortedMap<K,? extends V>)
  id: <K,V>copyOfSorted(java.util.SortedMap<K,? extends V>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap
  langs:
  - java
  name: <K,V>copyOfSorted(SortedMap<K,? extends V> map)
  nameWithType: ImmutableSortedMap<K,V>.<K,V>copyOfSorted(SortedMap<K,? extends V> map)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap<K,V>.<K,V>copyOfSorted(SortedMap<K,? extends V> map)
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap.copyOfSorted*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Returns an immutable map containing the same entries as the provided sorted map, with the same ordering.


    Despite the method name, this method attempts to avoid actually copying the data when it is safe to do so. The exact circumstances under which a copy will or will not be performed are undocumented and subject to change.
  syntax:
    content: public static ImmutableSortedMap<K,V> <K,V>copyOfSorted(SortedMap<K,? extends V> map)
    parameters:
    - id: map
      type: java.util.SortedMap<K,? extends V>
    return:
      type: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap<K,V>
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap.<K,V>naturalOrder()
  id: <K,V>naturalOrder()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap
  langs:
  - java
  name: <K,V>naturalOrder()
  nameWithType: ImmutableSortedMap<K,V>.<K,V>naturalOrder()
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap<K,V>.<K,V>naturalOrder()
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap.naturalOrder*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Returns a builder that creates immutable sorted maps whose keys are ordered by their natural ordering. The sorted maps use <xref uid="com.azure.cosmos.implementation.guava25.collect.Ordering.&lt;C&gt;natural()" data-throw-if-not-resolved="false">Ordering#natural()</xref> as the comparator.
  syntax:
    content: public static ImmutableSortedMap.Builder<K,V> <K,V>naturalOrder()
    return:
      type: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap.Builder<K,V>
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap.<K,V>of()
  id: <K,V>of()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap
  langs:
  - java
  name: <K,V>of()
  nameWithType: ImmutableSortedMap<K,V>.<K,V>of()
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap<K,V>.<K,V>of()
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap.of*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Returns the empty sorted map.
  syntax:
    content: public static ImmutableSortedMap<K,V> <K,V>of()
    return:
      type: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap<K,V>
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap.<K,V>of(K,V)
  id: <K,V>of(K,V)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap
  langs:
  - java
  name: <K,V>of(K k1, V v1)
  nameWithType: ImmutableSortedMap<K,V>.<K,V>of(K k1, V v1)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap<K,V>.<K,V>of(K k1, V v1)
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap.of*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Returns an immutable map containing a single entry.
  syntax:
    content: public static ImmutableSortedMap<K,V> <K,V>of(K k1, V v1)
    parameters:
    - id: k1
      type: K
    - id: v1
      type: V
    return:
      type: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap<K,V>
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap.<K,V>of(K,V,K,V)
  id: <K,V>of(K,V,K,V)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap
  langs:
  - java
  name: <K,V>of(K k1, V v1, K k2, V v2)
  nameWithType: ImmutableSortedMap<K,V>.<K,V>of(K k1, V v1, K k2, V v2)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap<K,V>.<K,V>of(K k1, V v1, K k2, V v2)
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap.of*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Returns an immutable sorted map containing the given entries, sorted by the natural ordering of their keys.
  syntax:
    content: public static ImmutableSortedMap<K,V> <K,V>of(K k1, V v1, K k2, V v2)
    parameters:
    - id: k1
      type: K
    - id: v1
      type: V
    - id: k2
      type: K
    - id: v2
      type: V
    return:
      type: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap<K,V>
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap.<K,V>of(K,V,K,V,K,V)
  id: <K,V>of(K,V,K,V,K,V)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap
  langs:
  - java
  name: <K,V>of(K k1, V v1, K k2, V v2, K k3, V v3)
  nameWithType: ImmutableSortedMap<K,V>.<K,V>of(K k1, V v1, K k2, V v2, K k3, V v3)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap<K,V>.<K,V>of(K k1, V v1, K k2, V v2, K k3, V v3)
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap.of*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Returns an immutable sorted map containing the given entries, sorted by the natural ordering of their keys.
  syntax:
    content: public static ImmutableSortedMap<K,V> <K,V>of(K k1, V v1, K k2, V v2, K k3, V v3)
    parameters:
    - id: k1
      type: K
    - id: v1
      type: V
    - id: k2
      type: K
    - id: v2
      type: V
    - id: k3
      type: K
    - id: v3
      type: V
    return:
      type: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap<K,V>
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap.<K,V>of(K,V,K,V,K,V,K,V)
  id: <K,V>of(K,V,K,V,K,V,K,V)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap
  langs:
  - java
  name: <K,V>of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4)
  nameWithType: ImmutableSortedMap<K,V>.<K,V>of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap<K,V>.<K,V>of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4)
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap.of*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Returns an immutable sorted map containing the given entries, sorted by the natural ordering of their keys.
  syntax:
    content: public static ImmutableSortedMap<K,V> <K,V>of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4)
    parameters:
    - id: k1
      type: K
    - id: v1
      type: V
    - id: k2
      type: K
    - id: v2
      type: V
    - id: k3
      type: K
    - id: v3
      type: V
    - id: k4
      type: K
    - id: v4
      type: V
    return:
      type: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap<K,V>
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap.<K,V>of(K,V,K,V,K,V,K,V,K,V)
  id: <K,V>of(K,V,K,V,K,V,K,V,K,V)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap
  langs:
  - java
  name: <K,V>of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)
  nameWithType: ImmutableSortedMap<K,V>.<K,V>of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap<K,V>.<K,V>of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap.of*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Returns an immutable sorted map containing the given entries, sorted by the natural ordering of their keys.
  syntax:
    content: public static ImmutableSortedMap<K,V> <K,V>of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)
    parameters:
    - id: k1
      type: K
    - id: v1
      type: V
    - id: k2
      type: K
    - id: v2
      type: V
    - id: k3
      type: K
    - id: v3
      type: V
    - id: k4
      type: K
    - id: v4
      type: V
    - id: k5
      type: K
    - id: v5
      type: V
    return:
      type: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap<K,V>
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap.<K,V>orderedBy(java.util.Comparator<K>)
  id: <K,V>orderedBy(java.util.Comparator<K>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap
  langs:
  - java
  name: <K,V>orderedBy(Comparator<K> comparator)
  nameWithType: ImmutableSortedMap<K,V>.<K,V>orderedBy(Comparator<K> comparator)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap<K,V>.<K,V>orderedBy(Comparator<K> comparator)
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap.orderedBy*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Returns a builder that creates immutable sorted maps with an explicit comparator. If the comparator has a more general type than the map's keys, such as creating a `SortedMap` with a `Comparator`, use the <xref uid="com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap.Builder" data-throw-if-not-resolved="false">Builder</xref> constructor instead.
  syntax:
    content: public static ImmutableSortedMap.Builder<K,V> <K,V>orderedBy(Comparator<K> comparator)
    parameters:
    - id: comparator
      type: java.util.Comparator<K>
    return:
      type: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap.Builder<K,V>
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap.<K,V>reverseOrder()
  id: <K,V>reverseOrder()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap
  langs:
  - java
  name: <K,V>reverseOrder()
  nameWithType: ImmutableSortedMap<K,V>.<K,V>reverseOrder()
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap<K,V>.<K,V>reverseOrder()
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap.reverseOrder*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Returns a builder that creates immutable sorted maps whose keys are ordered by the reverse of their natural ordering.
  syntax:
    content: public static ImmutableSortedMap.Builder<K,V> <K,V>reverseOrder()
    return:
      type: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap.Builder<K,V>
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap.<T,K,V>toImmutableSortedMap(java.util.Comparator<? super K>,java.util.function.Function<? super T,? extends K>,java.util.function.Function<? super T,? extends V>)
  id: <T,K,V>toImmutableSortedMap(java.util.Comparator<? super K>,java.util.function.Function<? super T,? extends K>,java.util.function.Function<? super T,? extends V>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap
  langs:
  - java
  name: <T,K,V>toImmutableSortedMap(Comparator<? super K> comparator, Function<? super T,? extends K> keyFunction, Function<? super T,? extends V> valueFunction)
  nameWithType: ImmutableSortedMap<K,V>.<T,K,V>toImmutableSortedMap(Comparator<? super K> comparator, Function<? super T,? extends K> keyFunction, Function<? super T,? extends V> valueFunction)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap<K,V>.<T,K,V>toImmutableSortedMap(Comparator<? super K> comparator, Function<? super T,? extends K> keyFunction, Function<? super T,? extends V> valueFunction)
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap.toImmutableSortedMap*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Returns a <xref uid="java.util.stream.Collector" data-throw-if-not-resolved="false">Collector</xref> that accumulates elements into an `ImmutableSortedMap` whose keys and values are the result of applying the provided mapping functions to the input elements. The generated map is sorted by the specified comparator.


    If the mapped keys contain duplicates (according to the specified comparator), an `IllegalArgumentException` is thrown when the collection operation is performed. (This differs from the `Collector` returned by <xref uid="" data-throw-if-not-resolved="false">Collectors#toMap(Function, Function)</xref>, which throws an `IllegalStateException`.)
  syntax:
    content: public static Collector<T,?,ImmutableSortedMap<K,V>> <T,K,V>toImmutableSortedMap(Comparator<? super K> comparator, Function<? super T,? extends K> keyFunction, Function<? super T,? extends V> valueFunction)
    parameters:
    - id: comparator
      type: java.util.Comparator<? super K>
    - id: keyFunction
      type: java.util.function.Function<? super T,? extends K>
    - id: valueFunction
      type: java.util.function.Function<? super T,? extends V>
    return:
      type: java.util.stream.Collector<T,?,com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap<K,V>>
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap.<T,K,V>toImmutableSortedMap(java.util.Comparator<? super K>,java.util.function.Function<? super T,? extends K>,java.util.function.Function<? super T,? extends V>,java.util.function.BinaryOperator<V>)
  id: <T,K,V>toImmutableSortedMap(java.util.Comparator<? super K>,java.util.function.Function<? super T,? extends K>,java.util.function.Function<? super T,? extends V>,java.util.function.BinaryOperator<V>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap
  langs:
  - java
  name: <T,K,V>toImmutableSortedMap(Comparator<? super K> comparator, Function<? super T,? extends K> keyFunction, Function<? super T,? extends V> valueFunction, BinaryOperator<V> mergeFunction)
  nameWithType: ImmutableSortedMap<K,V>.<T,K,V>toImmutableSortedMap(Comparator<? super K> comparator, Function<? super T,? extends K> keyFunction, Function<? super T,? extends V> valueFunction, BinaryOperator<V> mergeFunction)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap<K,V>.<T,K,V>toImmutableSortedMap(Comparator<? super K> comparator, Function<? super T,? extends K> keyFunction, Function<? super T,? extends V> valueFunction, BinaryOperator<V> mergeFunction)
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap.toImmutableSortedMap*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Returns a <xref uid="java.util.stream.Collector" data-throw-if-not-resolved="false">Collector</xref> that accumulates elements into an `ImmutableSortedMap` whose keys and values are the result of applying the provided mapping functions to the input elements.


    If the mapped keys contain duplicates (according to the comparator), the the values are merged using the specified merging function. Entries will appear in the encounter order of the first occurrence of the key.
  syntax:
    content: public static Collector<T,?,ImmutableSortedMap<K,V>> <T,K,V>toImmutableSortedMap(Comparator<? super K> comparator, Function<? super T,? extends K> keyFunction, Function<? super T,? extends V> valueFunction, BinaryOperator<V> mergeFunction)
    parameters:
    - id: comparator
      type: java.util.Comparator<? super K>
    - id: keyFunction
      type: java.util.function.Function<? super T,? extends K>
    - id: valueFunction
      type: java.util.function.Function<? super T,? extends V>
    - id: mergeFunction
      type: java.util.function.BinaryOperator<V>
    return:
      type: java.util.stream.Collector<T,?,com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap<K,V>>
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap.ImmutableSortedMap(com.azure.cosmos.implementation.guava25.collect.RegularImmutableSortedSet<K>,com.azure.cosmos.implementation.guava25.collect.ImmutableList<V>)
  id: ImmutableSortedMap(com.azure.cosmos.implementation.guava25.collect.RegularImmutableSortedSet<K>,com.azure.cosmos.implementation.guava25.collect.ImmutableList<V>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap
  langs:
  - java
  name: ImmutableSortedMap(RegularImmutableSortedSet<K> keySet, ImmutableList<V> valueList)
  nameWithType: ImmutableSortedMap<K,V>.ImmutableSortedMap(RegularImmutableSortedSet<K> keySet, ImmutableList<V> valueList)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap<K,V>.ImmutableSortedMap(RegularImmutableSortedSet<K> keySet, ImmutableList<V> valueList)
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap.ImmutableSortedMap*
  type: Constructor
  package: com.azure.cosmos.implementation.guava25.collect
  syntax:
    content: " ImmutableSortedMap(RegularImmutableSortedSet<K> keySet, ImmutableList<V> valueList)"
    parameters:
    - id: keySet
      type: com.azure.cosmos.implementation.guava25.collect.RegularImmutableSortedSet<K>
    - id: valueList
      type: com.azure.cosmos.implementation.guava25.collect.ImmutableList<V>
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap.ImmutableSortedMap(com.azure.cosmos.implementation.guava25.collect.RegularImmutableSortedSet<K>,com.azure.cosmos.implementation.guava25.collect.ImmutableList<V>,com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap<K,V>)
  id: ImmutableSortedMap(com.azure.cosmos.implementation.guava25.collect.RegularImmutableSortedSet<K>,com.azure.cosmos.implementation.guava25.collect.ImmutableList<V>,com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap<K,V>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap
  langs:
  - java
  name: ImmutableSortedMap(RegularImmutableSortedSet<K> keySet, ImmutableList<V> valueList, ImmutableSortedMap<K,V> descendingMap)
  nameWithType: ImmutableSortedMap<K,V>.ImmutableSortedMap(RegularImmutableSortedSet<K> keySet, ImmutableList<V> valueList, ImmutableSortedMap<K,V> descendingMap)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap<K,V>.ImmutableSortedMap(RegularImmutableSortedSet<K> keySet, ImmutableList<V> valueList, ImmutableSortedMap<K,V> descendingMap)
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap.ImmutableSortedMap*
  type: Constructor
  package: com.azure.cosmos.implementation.guava25.collect
  syntax:
    content: " ImmutableSortedMap(RegularImmutableSortedSet<K> keySet, ImmutableList<V> valueList, ImmutableSortedMap<K,V> descendingMap)"
    parameters:
    - id: keySet
      type: com.azure.cosmos.implementation.guava25.collect.RegularImmutableSortedSet<K>
    - id: valueList
      type: com.azure.cosmos.implementation.guava25.collect.ImmutableList<V>
    - id: descendingMap
      type: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap<K,V>
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap.ceilingEntry(K)
  id: ceilingEntry(K)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap
  langs:
  - java
  name: ceilingEntry(K key)
  nameWithType: ImmutableSortedMap<K,V>.ceilingEntry(K key)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap<K,V>.ceilingEntry(K key)
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap.ceilingEntry*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  syntax:
    content: public Map.Entry<K,V> ceilingEntry(K key)
    parameters:
    - id: key
      type: K
    return:
      type: java.util.Map.Entry<K,V>
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap.ceilingKey(K)
  id: ceilingKey(K)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap
  langs:
  - java
  name: ceilingKey(K key)
  nameWithType: ImmutableSortedMap<K,V>.ceilingKey(K key)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap<K,V>.ceilingKey(K key)
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap.ceilingKey*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  syntax:
    content: public K ceilingKey(K key)
    parameters:
    - id: key
      type: K
    return:
      type: K
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap.comparator()
  id: comparator()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap
  langs:
  - java
  name: comparator()
  nameWithType: ImmutableSortedMap<K,V>.comparator()
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap<K,V>.comparator()
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap.comparator*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Returns the comparator that orders the keys, which is <xref uid="com.azure.cosmos.implementation.guava25.collect.Ordering.&lt;C&gt;natural()" data-throw-if-not-resolved="false">Ordering#natural()</xref> when the natural ordering of the keys is used. Note that its behavior is not consistent with <xref uid="java.util.TreeMap.comparator*" data-throw-if-not-resolved="false">TreeMap#comparator()</xref>, which returns `null` to indicate natural ordering.
  syntax:
    content: public Comparator<? super K> comparator()
    return:
      type: java.util.Comparator<? super K>
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap.descendingKeySet()
  id: descendingKeySet()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap
  langs:
  - java
  name: descendingKeySet()
  nameWithType: ImmutableSortedMap<K,V>.descendingKeySet()
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap<K,V>.descendingKeySet()
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap.descendingKeySet*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  syntax:
    content: public ImmutableSortedSet<K> descendingKeySet()
    return:
      type: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet<K>
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap.descendingMap()
  id: descendingMap()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap
  langs:
  - java
  name: descendingMap()
  nameWithType: ImmutableSortedMap<K,V>.descendingMap()
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap<K,V>.descendingMap()
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap.descendingMap*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  syntax:
    content: public ImmutableSortedMap<K,V> descendingMap()
    return:
      type: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap<K,V>
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap.entrySet()
  id: entrySet()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap
  langs:
  - java
  name: entrySet()
  nameWithType: ImmutableSortedMap<K,V>.entrySet()
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap<K,V>.entrySet()
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap.entrySet*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Returns an immutable set of the mappings in this map, sorted by the key ordering.
  syntax:
    content: public ImmutableSet<Map.Entry<K,V>> entrySet()
    return:
      type: com.azure.cosmos.implementation.guava25.collect.ImmutableSet<java.util.Map.Entry<K,V>>
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap.firstEntry()
  id: firstEntry()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap
  langs:
  - java
  name: firstEntry()
  nameWithType: ImmutableSortedMap<K,V>.firstEntry()
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap<K,V>.firstEntry()
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap.firstEntry*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  syntax:
    content: public Map.Entry<K,V> firstEntry()
    return:
      type: java.util.Map.Entry<K,V>
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap.firstKey()
  id: firstKey()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap
  langs:
  - java
  name: firstKey()
  nameWithType: ImmutableSortedMap<K,V>.firstKey()
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap<K,V>.firstKey()
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap.firstKey*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  syntax:
    content: public K firstKey()
    return:
      type: K
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap.floorEntry(K)
  id: floorEntry(K)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap
  langs:
  - java
  name: floorEntry(K key)
  nameWithType: ImmutableSortedMap<K,V>.floorEntry(K key)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap<K,V>.floorEntry(K key)
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap.floorEntry*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  syntax:
    content: public Map.Entry<K,V> floorEntry(K key)
    parameters:
    - id: key
      type: K
    return:
      type: java.util.Map.Entry<K,V>
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap.floorKey(K)
  id: floorKey(K)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap
  langs:
  - java
  name: floorKey(K key)
  nameWithType: ImmutableSortedMap<K,V>.floorKey(K key)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap<K,V>.floorKey(K key)
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap.floorKey*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  syntax:
    content: public K floorKey(K key)
    parameters:
    - id: key
      type: K
    return:
      type: K
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap.forEach(java.util.function.BiConsumer<? super K,? super V>)
  id: forEach(java.util.function.BiConsumer<? super K,? super V>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap
  langs:
  - java
  name: forEach(BiConsumer<? super K,? super V> action)
  nameWithType: ImmutableSortedMap<K,V>.forEach(BiConsumer<? super K,? super V> action)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap<K,V>.forEach(BiConsumer<? super K,? super V> action)
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap.forEach*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  syntax:
    content: public void forEach(BiConsumer<? super K,? super V> action)
    parameters:
    - id: action
      type: java.util.function.BiConsumer<? super K,? super V>
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap.get(java.lang.Object)
  id: get(java.lang.Object)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap
  langs:
  - java
  name: get(Object key)
  nameWithType: ImmutableSortedMap<K,V>.get(Object key)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap<K,V>.get(Object key)
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap.get*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  syntax:
    content: public V get(Object key)
    parameters:
    - id: key
      type: java.lang.Object
    return:
      type: V
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap.headMap(K)
  id: headMap(K)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap
  langs:
  - java
  name: headMap(K toKey)
  nameWithType: ImmutableSortedMap<K,V>.headMap(K toKey)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap<K,V>.headMap(K toKey)
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap.headMap*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    This method returns a `ImmutableSortedMap`, consisting of the entries whose keys are less than `toKey`.


    The <xref uid="java.util.SortedMap.headMap" data-throw-if-not-resolved="false">SortedMap#headMap</xref> documentation states that a submap of a submap throws an <xref uid="" data-throw-if-not-resolved="false">IllegalArgumentException</xref> if passed a `toKey` greater than an earlier `toKey`. However, this method doesn't throw an exception in that situation, but instead keeps the original `toKey`.
  syntax:
    content: public ImmutableSortedMap<K,V> headMap(K toKey)
    parameters:
    - id: toKey
      type: K
    return:
      type: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap<K,V>
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap.headMap(K,boolean)
  id: headMap(K,boolean)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap
  langs:
  - java
  name: headMap(K toKey, boolean inclusive)
  nameWithType: ImmutableSortedMap<K,V>.headMap(K toKey, boolean inclusive)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap<K,V>.headMap(K toKey, boolean inclusive)
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap.headMap*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    This method returns a `ImmutableSortedMap`, consisting of the entries whose keys are less than (or equal to, if `inclusive`) `toKey`.


    The <xref uid="java.util.SortedMap.headMap" data-throw-if-not-resolved="false">SortedMap#headMap</xref> documentation states that a submap of a submap throws an <xref uid="" data-throw-if-not-resolved="false">IllegalArgumentException</xref> if passed a `toKey` greater than an earlier `toKey`. However, this method doesn't throw an exception in that situation, but instead keeps the original `toKey`.
  syntax:
    content: public ImmutableSortedMap<K,V> headMap(K toKey, boolean inclusive)
    parameters:
    - id: toKey
      type: K
    - id: inclusive
      type: boolean
    return:
      type: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap<K,V>
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap.higherEntry(K)
  id: higherEntry(K)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap
  langs:
  - java
  name: higherEntry(K key)
  nameWithType: ImmutableSortedMap<K,V>.higherEntry(K key)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap<K,V>.higherEntry(K key)
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap.higherEntry*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  syntax:
    content: public Map.Entry<K,V> higherEntry(K key)
    parameters:
    - id: key
      type: K
    return:
      type: java.util.Map.Entry<K,V>
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap.higherKey(K)
  id: higherKey(K)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap
  langs:
  - java
  name: higherKey(K key)
  nameWithType: ImmutableSortedMap<K,V>.higherKey(K key)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap<K,V>.higherKey(K key)
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap.higherKey*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  syntax:
    content: public K higherKey(K key)
    parameters:
    - id: key
      type: K
    return:
      type: K
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap.keySet()
  id: keySet()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap
  langs:
  - java
  name: keySet()
  nameWithType: ImmutableSortedMap<K,V>.keySet()
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap<K,V>.keySet()
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap.keySet*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Returns an immutable sorted set of the keys in this map.
  syntax:
    content: public ImmutableSortedSet<K> keySet()
    return:
      type: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet<K>
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap.lastEntry()
  id: lastEntry()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap
  langs:
  - java
  name: lastEntry()
  nameWithType: ImmutableSortedMap<K,V>.lastEntry()
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap<K,V>.lastEntry()
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap.lastEntry*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  syntax:
    content: public Map.Entry<K,V> lastEntry()
    return:
      type: java.util.Map.Entry<K,V>
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap.lastKey()
  id: lastKey()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap
  langs:
  - java
  name: lastKey()
  nameWithType: ImmutableSortedMap<K,V>.lastKey()
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap<K,V>.lastKey()
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap.lastKey*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  syntax:
    content: public K lastKey()
    return:
      type: K
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap.lowerEntry(K)
  id: lowerEntry(K)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap
  langs:
  - java
  name: lowerEntry(K key)
  nameWithType: ImmutableSortedMap<K,V>.lowerEntry(K key)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap<K,V>.lowerEntry(K key)
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap.lowerEntry*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  syntax:
    content: public Map.Entry<K,V> lowerEntry(K key)
    parameters:
    - id: key
      type: K
    return:
      type: java.util.Map.Entry<K,V>
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap.lowerKey(K)
  id: lowerKey(K)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap
  langs:
  - java
  name: lowerKey(K key)
  nameWithType: ImmutableSortedMap<K,V>.lowerKey(K key)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap<K,V>.lowerKey(K key)
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap.lowerKey*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  syntax:
    content: public K lowerKey(K key)
    parameters:
    - id: key
      type: K
    return:
      type: K
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap.navigableKeySet()
  id: navigableKeySet()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap
  langs:
  - java
  name: navigableKeySet()
  nameWithType: ImmutableSortedMap<K,V>.navigableKeySet()
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap<K,V>.navigableKeySet()
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap.navigableKeySet*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  syntax:
    content: public ImmutableSortedSet<K> navigableKeySet()
    return:
      type: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet<K>
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap.pollFirstEntry()
  id: pollFirstEntry()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap
  langs:
  - java
  name: pollFirstEntry()
  nameWithType: ImmutableSortedMap<K,V>.pollFirstEntry()
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap<K,V>.pollFirstEntry()
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap.pollFirstEntry*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Guaranteed to throw an exception and leave the map unmodified.
  syntax:
    content: public final Map.Entry<K,V> pollFirstEntry()
    return:
      type: java.util.Map.Entry<K,V>
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap.pollLastEntry()
  id: pollLastEntry()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap
  langs:
  - java
  name: pollLastEntry()
  nameWithType: ImmutableSortedMap<K,V>.pollLastEntry()
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap<K,V>.pollLastEntry()
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap.pollLastEntry*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Guaranteed to throw an exception and leave the map unmodified.
  syntax:
    content: public final Map.Entry<K,V> pollLastEntry()
    return:
      type: java.util.Map.Entry<K,V>
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap.size()
  id: size()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap
  langs:
  - java
  name: size()
  nameWithType: ImmutableSortedMap<K,V>.size()
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap<K,V>.size()
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap.size*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  syntax:
    content: public int size()
    return:
      type: int
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap.subMap(K,K)
  id: subMap(K,K)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap
  langs:
  - java
  name: subMap(K fromKey, K toKey)
  nameWithType: ImmutableSortedMap<K,V>.subMap(K fromKey, K toKey)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap<K,V>.subMap(K fromKey, K toKey)
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap.subMap*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    This method returns a `ImmutableSortedMap`, consisting of the entries whose keys ranges from `fromKey`, inclusive, to `toKey`, exclusive.


    The <xref uid="java.util.SortedMap.subMap" data-throw-if-not-resolved="false">SortedMap#subMap</xref> documentation states that a submap of a submap throws an <xref uid="" data-throw-if-not-resolved="false">IllegalArgumentException</xref> if passed a `fromKey` less than an earlier `fromKey`. However, this method doesn't throw an exception in that situation, but instead keeps the original `fromKey`. Similarly, this method keeps the original `toKey`, instead of throwing an exception, if passed a `toKey` greater than an earlier `toKey`.
  syntax:
    content: public ImmutableSortedMap<K,V> subMap(K fromKey, K toKey)
    parameters:
    - id: fromKey
      type: K
    - id: toKey
      type: K
    return:
      type: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap<K,V>
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap.subMap(K,boolean,K,boolean)
  id: subMap(K,boolean,K,boolean)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap
  langs:
  - java
  name: subMap(K fromKey, boolean fromInclusive, K toKey, boolean toInclusive)
  nameWithType: ImmutableSortedMap<K,V>.subMap(K fromKey, boolean fromInclusive, K toKey, boolean toInclusive)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap<K,V>.subMap(K fromKey, boolean fromInclusive, K toKey, boolean toInclusive)
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap.subMap*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    This method returns a `ImmutableSortedMap`, consisting of the entries whose keys ranges from `fromKey` to `toKey`, inclusive or exclusive as indicated by the boolean flags.


    The <xref uid="java.util.SortedMap.subMap" data-throw-if-not-resolved="false">SortedMap#subMap</xref> documentation states that a submap of a submap throws an <xref uid="" data-throw-if-not-resolved="false">IllegalArgumentException</xref> if passed a `fromKey` less than an earlier `fromKey`. However, this method doesn't throw an exception in that situation, but instead keeps the original `fromKey`. Similarly, this method keeps the original `toKey`, instead of throwing an exception, if passed a `toKey` greater than an earlier `toKey`.
  syntax:
    content: public ImmutableSortedMap<K,V> subMap(K fromKey, boolean fromInclusive, K toKey, boolean toInclusive)
    parameters:
    - id: fromKey
      type: K
    - id: fromInclusive
      type: boolean
    - id: toKey
      type: K
    - id: toInclusive
      type: boolean
    return:
      type: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap<K,V>
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap.tailMap(K)
  id: tailMap(K)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap
  langs:
  - java
  name: tailMap(K fromKey)
  nameWithType: ImmutableSortedMap<K,V>.tailMap(K fromKey)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap<K,V>.tailMap(K fromKey)
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap.tailMap*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    This method returns a `ImmutableSortedMap`, consisting of the entries whose keys are greater than or equals to `fromKey`.


    The <xref uid="java.util.SortedMap.tailMap" data-throw-if-not-resolved="false">SortedMap#tailMap</xref> documentation states that a submap of a submap throws an <xref uid="" data-throw-if-not-resolved="false">IllegalArgumentException</xref> if passed a `fromKey` less than an earlier `fromKey`. However, this method doesn't throw an exception in that situation, but instead keeps the original `fromKey`.
  syntax:
    content: public ImmutableSortedMap<K,V> tailMap(K fromKey)
    parameters:
    - id: fromKey
      type: K
    return:
      type: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap<K,V>
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap.tailMap(K,boolean)
  id: tailMap(K,boolean)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap
  langs:
  - java
  name: tailMap(K fromKey, boolean inclusive)
  nameWithType: ImmutableSortedMap<K,V>.tailMap(K fromKey, boolean inclusive)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap<K,V>.tailMap(K fromKey, boolean inclusive)
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap.tailMap*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    This method returns a `ImmutableSortedMap`, consisting of the entries whose keys are greater than (or equal to, if `inclusive`) `fromKey`.


    The <xref uid="java.util.SortedMap.tailMap" data-throw-if-not-resolved="false">SortedMap#tailMap</xref> documentation states that a submap of a submap throws an <xref uid="" data-throw-if-not-resolved="false">IllegalArgumentException</xref> if passed a `fromKey` less than an earlier `fromKey`. However, this method doesn't throw an exception in that situation, but instead keeps the original `fromKey`.
  syntax:
    content: public ImmutableSortedMap<K,V> tailMap(K fromKey, boolean inclusive)
    parameters:
    - id: fromKey
      type: K
    - id: inclusive
      type: boolean
    return:
      type: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap<K,V>
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap.values()
  id: values()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap
  langs:
  - java
  name: values()
  nameWithType: ImmutableSortedMap<K,V>.values()
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap<K,V>.values()
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap.values*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Returns an immutable collection of the values in this map, sorted by the ordering of the corresponding keys.
  syntax:
    content: public ImmutableCollection<V> values()
    return:
      type: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection<V>
references:
- uid: com.azure.cosmos.implementation.guava25.collect.RegularImmutableSortedSet<K>
  spec.java:
  - uid: com.azure.cosmos.implementation.guava25.collect.RegularImmutableSortedSet
    name: RegularImmutableSortedSet
    fullName: com.azure.cosmos.implementation.guava25.collect.RegularImmutableSortedSet
  - name: <
    fullName: <
  - uid: K
    name: K
    fullName: K
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableList<V>
  spec.java:
  - uid: com.azure.cosmos.implementation.guava25.collect.ImmutableList
    name: ImmutableList
    fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableList
  - name: <
    fullName: <
  - uid: V
    name: V
    fullName: V
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap.ImmutableSortedMap*
  name: ImmutableSortedMap
  nameWithType: ImmutableSortedMap<K,V>.ImmutableSortedMap
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap<K,V>.ImmutableSortedMap
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap<K,V>
  spec.java:
  - uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap
    name: ImmutableSortedMap
    fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap
  - name: <
    fullName: <
  - uid: K
    name: K
    fullName: K
  - name: ','
    fullName: ','
  - uid: V
    name: V
    fullName: V
  - name: '>'
    fullName: '>'
- uid: java.util.Comparator<? super K>
  spec.java:
  - uid: java.util.Comparator
    name: Comparator
    fullName: java.util.Comparator
  - name: <
    fullName: <
  - uid: '? super K'
    name: '? super K'
    fullName: '? super K'
  - name: '>'
    fullName: '>'
- uid: java.util.function.Function<? super T,? extends K>
  spec.java:
  - uid: java.util.function.Function
    name: Function
    fullName: java.util.function.Function
  - name: <
    fullName: <
  - uid: '? super T'
    name: '? super T'
    fullName: '? super T'
  - name: ','
    fullName: ','
  - uid: '? extends K'
    name: '? extends K'
    fullName: '? extends K'
  - name: '>'
    fullName: '>'
- uid: java.util.function.Function<? super T,? extends V>
  spec.java:
  - uid: java.util.function.Function
    name: Function
    fullName: java.util.function.Function
  - name: <
    fullName: <
  - uid: '? super T'
    name: '? super T'
    fullName: '? super T'
  - name: ','
    fullName: ','
  - uid: '? extends V'
    name: '? extends V'
    fullName: '? extends V'
  - name: '>'
    fullName: '>'
- uid: java.util.stream.Collector<T,?,com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap<K,V>>
  spec.java:
  - uid: java.util.stream.Collector
    name: Collector
    fullName: java.util.stream.Collector
  - name: <
    fullName: <
  - uid: T
    name: T
    fullName: T
  - name: ','
    fullName: ','
  - uid: '?'
    name: '?'
    fullName: '?'
  - name: ','
    fullName: ','
  - uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap
    name: ImmutableSortedMap
    fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap
  - name: <
    fullName: <
  - uid: K
    name: K
    fullName: K
  - name: ','
    fullName: ','
  - uid: V
    name: V
    fullName: V
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap.toImmutableSortedMap*
  name: <T,K,V>toImmutableSortedMap
  nameWithType: ImmutableSortedMap<K,V>.<T,K,V>toImmutableSortedMap
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap<K,V>.<T,K,V>toImmutableSortedMap
  package: com.azure.cosmos.implementation.guava25.collect
- uid: java.util.function.BinaryOperator<V>
  spec.java:
  - uid: java.util.function.BinaryOperator
    name: BinaryOperator
    fullName: java.util.function.BinaryOperator
  - name: <
    fullName: <
  - uid: V
    name: V
    fullName: V
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap.of*
  name: <K,V>of
  nameWithType: ImmutableSortedMap<K,V>.<K,V>of
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap<K,V>.<K,V>of
  package: com.azure.cosmos.implementation.guava25.collect
- uid: K
  spec.java:
  - uid: K
    name: K
    fullName: K
- uid: V
  spec.java:
  - uid: V
    name: V
    fullName: V
- uid: java.util.Map<? extends K,? extends V>
  spec.java:
  - uid: java.util.Map
    name: Map
    fullName: java.util.Map
  - name: <
    fullName: <
  - uid: '? extends K'
    name: '? extends K'
    fullName: '? extends K'
  - name: ','
    fullName: ','
  - uid: '? extends V'
    name: '? extends V'
    fullName: '? extends V'
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap.copyOf*
  name: <K,V>copyOf
  nameWithType: ImmutableSortedMap<K,V>.<K,V>copyOf
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap<K,V>.<K,V>copyOf
  package: com.azure.cosmos.implementation.guava25.collect
- uid: java.lang.Iterable<? extends java.util.Map.Entry<? extends K,? extends V>>
  spec.java:
  - uid: java.lang.Iterable
    name: Iterable
    fullName: java.lang.Iterable
  - name: <
    fullName: <
  - uid: '? extends java.util.Map.Entry'
    name: Entry
    fullName: '? extends java.util.Map.Entry'
  - name: <
    fullName: <
  - uid: '? extends K'
    name: '? extends K'
    fullName: '? extends K'
  - name: ','
    fullName: ','
  - uid: '? extends V'
    name: '? extends V'
    fullName: '? extends V'
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
- uid: java.util.SortedMap<K,? extends V>
  spec.java:
  - uid: java.util.SortedMap
    name: SortedMap
    fullName: java.util.SortedMap
  - name: <
    fullName: <
  - uid: K
    name: K
    fullName: K
  - name: ','
    fullName: ','
  - uid: '? extends V'
    name: '? extends V'
    fullName: '? extends V'
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap.copyOfSorted*
  name: <K,V>copyOfSorted
  nameWithType: ImmutableSortedMap<K,V>.<K,V>copyOfSorted
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap<K,V>.<K,V>copyOfSorted
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap.Builder<K,V>
  spec.java:
  - uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap.Builder
    name: Builder
    fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap.Builder
  - name: <
    fullName: <
  - uid: K
    name: K
    fullName: K
  - name: ','
    fullName: ','
  - uid: V
    name: V
    fullName: V
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap.naturalOrder*
  name: <K,V>naturalOrder
  nameWithType: ImmutableSortedMap<K,V>.<K,V>naturalOrder
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap<K,V>.<K,V>naturalOrder
  package: com.azure.cosmos.implementation.guava25.collect
- uid: java.util.Comparator<K>
  spec.java:
  - uid: java.util.Comparator
    name: Comparator
    fullName: java.util.Comparator
  - name: <
    fullName: <
  - uid: K
    name: K
    fullName: K
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap.orderedBy*
  name: <K,V>orderedBy
  nameWithType: ImmutableSortedMap<K,V>.<K,V>orderedBy
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap<K,V>.<K,V>orderedBy
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap.reverseOrder*
  name: <K,V>reverseOrder
  nameWithType: ImmutableSortedMap<K,V>.<K,V>reverseOrder
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap<K,V>.<K,V>reverseOrder
  package: com.azure.cosmos.implementation.guava25.collect
- uid: int
  spec.java:
  - uid: int
    name: int
    fullName: int
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap.size*
  name: size
  nameWithType: ImmutableSortedMap<K,V>.size
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap<K,V>.size
  package: com.azure.cosmos.implementation.guava25.collect
- uid: java.util.function.BiConsumer<? super K,? super V>
  spec.java:
  - uid: java.util.function.BiConsumer
    name: BiConsumer
    fullName: java.util.function.BiConsumer
  - name: <
    fullName: <
  - uid: '? super K'
    name: '? super K'
    fullName: '? super K'
  - name: ','
    fullName: ','
  - uid: '? super V'
    name: '? super V'
    fullName: '? super V'
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap.forEach*
  name: forEach
  nameWithType: ImmutableSortedMap<K,V>.forEach
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap<K,V>.forEach
  package: com.azure.cosmos.implementation.guava25.collect
- uid: java.lang.Object
  spec.java:
  - uid: java.lang.Object
    name: Object
    fullName: java.lang.Object
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap.get*
  name: get
  nameWithType: ImmutableSortedMap<K,V>.get
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap<K,V>.get
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSet<java.util.Map.Entry<K,V>>
  spec.java:
  - uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSet
    name: ImmutableSet
    fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSet
  - name: <
    fullName: <
  - uid: java.util.Map.Entry
    name: Entry
    fullName: java.util.Map.Entry
  - name: <
    fullName: <
  - uid: K
    name: K
    fullName: K
  - name: ','
    fullName: ','
  - uid: V
    name: V
    fullName: V
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap.entrySet*
  name: entrySet
  nameWithType: ImmutableSortedMap<K,V>.entrySet
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap<K,V>.entrySet
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet<K>
  spec.java:
  - uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet
    name: ImmutableSortedSet
    fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet
  - name: <
    fullName: <
  - uid: K
    name: K
    fullName: K
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap.keySet*
  name: keySet
  nameWithType: ImmutableSortedMap<K,V>.keySet
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap<K,V>.keySet
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection<V>
  spec.java:
  - uid: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection
    name: ImmutableCollection
    fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection
  - name: <
    fullName: <
  - uid: V
    name: V
    fullName: V
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap.values*
  name: values
  nameWithType: ImmutableSortedMap<K,V>.values
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap<K,V>.values
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap.comparator*
  name: comparator
  nameWithType: ImmutableSortedMap<K,V>.comparator
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap<K,V>.comparator
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap.firstKey*
  name: firstKey
  nameWithType: ImmutableSortedMap<K,V>.firstKey
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap<K,V>.firstKey
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap.lastKey*
  name: lastKey
  nameWithType: ImmutableSortedMap<K,V>.lastKey
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap<K,V>.lastKey
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap.headMap*
  name: headMap
  nameWithType: ImmutableSortedMap<K,V>.headMap
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap<K,V>.headMap
  package: com.azure.cosmos.implementation.guava25.collect
- uid: boolean
  spec.java:
  - uid: boolean
    name: boolean
    fullName: boolean
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap.subMap*
  name: subMap
  nameWithType: ImmutableSortedMap<K,V>.subMap
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap<K,V>.subMap
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap.tailMap*
  name: tailMap
  nameWithType: ImmutableSortedMap<K,V>.tailMap
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap<K,V>.tailMap
  package: com.azure.cosmos.implementation.guava25.collect
- uid: java.util.Map.Entry<K,V>
  spec.java:
  - uid: java.util.Map.Entry
    name: Entry
    fullName: java.util.Map.Entry
  - name: <
    fullName: <
  - uid: K
    name: K
    fullName: K
  - name: ','
    fullName: ','
  - uid: V
    name: V
    fullName: V
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap.lowerEntry*
  name: lowerEntry
  nameWithType: ImmutableSortedMap<K,V>.lowerEntry
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap<K,V>.lowerEntry
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap.lowerKey*
  name: lowerKey
  nameWithType: ImmutableSortedMap<K,V>.lowerKey
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap<K,V>.lowerKey
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap.floorEntry*
  name: floorEntry
  nameWithType: ImmutableSortedMap<K,V>.floorEntry
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap<K,V>.floorEntry
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap.floorKey*
  name: floorKey
  nameWithType: ImmutableSortedMap<K,V>.floorKey
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap<K,V>.floorKey
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap.ceilingEntry*
  name: ceilingEntry
  nameWithType: ImmutableSortedMap<K,V>.ceilingEntry
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap<K,V>.ceilingEntry
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap.ceilingKey*
  name: ceilingKey
  nameWithType: ImmutableSortedMap<K,V>.ceilingKey
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap<K,V>.ceilingKey
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap.higherEntry*
  name: higherEntry
  nameWithType: ImmutableSortedMap<K,V>.higherEntry
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap<K,V>.higherEntry
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap.higherKey*
  name: higherKey
  nameWithType: ImmutableSortedMap<K,V>.higherKey
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap<K,V>.higherKey
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap.firstEntry*
  name: firstEntry
  nameWithType: ImmutableSortedMap<K,V>.firstEntry
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap<K,V>.firstEntry
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap.lastEntry*
  name: lastEntry
  nameWithType: ImmutableSortedMap<K,V>.lastEntry
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap<K,V>.lastEntry
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap.pollFirstEntry*
  name: pollFirstEntry
  nameWithType: ImmutableSortedMap<K,V>.pollFirstEntry
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap<K,V>.pollFirstEntry
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap.pollLastEntry*
  name: pollLastEntry
  nameWithType: ImmutableSortedMap<K,V>.pollLastEntry
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap<K,V>.pollLastEntry
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap.descendingMap*
  name: descendingMap
  nameWithType: ImmutableSortedMap<K,V>.descendingMap
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap<K,V>.descendingMap
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap.navigableKeySet*
  name: navigableKeySet
  nameWithType: ImmutableSortedMap<K,V>.navigableKeySet
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap<K,V>.navigableKeySet
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap.descendingKeySet*
  name: descendingKeySet
  nameWithType: ImmutableSortedMap<K,V>.descendingKeySet
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap<K,V>.descendingKeySet
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMapFauxverideShim<K,V>
  name: ImmutableSortedMapFauxverideShim<K,V>
  nameWithType: ImmutableSortedMapFauxverideShim<K,V>
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMapFauxverideShim<K,V>
- uid: java.util.NavigableMap<K,V>
  name: NavigableMap<K,V>
  nameWithType: NavigableMap<K,V>
  fullName: java.util.NavigableMap<K,V>
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMap.put(K,V)
  name: ImmutableMap.put(K,V)
  nameWithType: ImmutableMap.put(K,V)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMap.put(K,V)
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: java.lang.Object.finalize()
  name: Object.finalize()
  nameWithType: Object.finalize()
  fullName: java.lang.Object.finalize()
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMap.<K,V>copyOf(java.util.Map<? extends K,? extends V>)
  name: ImmutableMap.<K,V>copyOf(Map<? extends K,? extends V>)
  nameWithType: ImmutableMap.<K,V>copyOf(Map<? extends K,? extends V>)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMap.<K,V>copyOf(java.util.Map<? extends K,? extends V>)
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMap.<K,V>of()
  name: ImmutableMap.<K,V>of()
  nameWithType: ImmutableMap.<K,V>of()
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMap.<K,V>of()
- uid: java.lang.Object.clone()
  name: Object.clone()
  nameWithType: Object.clone()
  fullName: java.lang.Object.clone()
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMap.computeIfAbsent(K,java.util.function.Function<? super K,? extends V>)
  name: ImmutableMap.computeIfAbsent(K,Function<? super K,? extends V>)
  nameWithType: ImmutableMap.computeIfAbsent(K,Function<? super K,? extends V>)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMap.computeIfAbsent(K,java.util.function.Function<? super K,? extends V>)
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMapFauxverideShim.<T,K,V>toImmutableMap(java.util.function.Function<? super T,? extends K>,java.util.function.Function<? super T,? extends V>,java.util.function.BinaryOperator<V>)
  name: ImmutableSortedMapFauxverideShim.<T,K,V>toImmutableMap(Function<? super T,? extends K>,Function<? super T,? extends V>,BinaryOperator<V>)
  nameWithType: ImmutableSortedMapFauxverideShim.<T,K,V>toImmutableMap(Function<? super T,? extends K>,Function<? super T,? extends V>,BinaryOperator<V>)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMapFauxverideShim.<T,K,V>toImmutableMap(java.util.function.Function<? super T,? extends K>,java.util.function.Function<? super T,? extends V>,java.util.function.BinaryOperator<V>)
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMap.hashCode()
  name: ImmutableMap.hashCode()
  nameWithType: ImmutableMap.hashCode()
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMap.hashCode()
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMap.clear()
  name: ImmutableMap.clear()
  nameWithType: ImmutableMap.clear()
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMap.clear()
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMap.compute(K,java.util.function.BiFunction<? super K,? super V,? extends V>)
  name: ImmutableMap.compute(K,BiFunction<? super K,? super V,? extends V>)
  nameWithType: ImmutableMap.compute(K,BiFunction<? super K,? super V,? extends V>)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMap.compute(K,java.util.function.BiFunction<? super K,? super V,? extends V>)
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMap.remove(java.lang.Object)
  name: ImmutableMap.remove(Object)
  nameWithType: ImmutableMap.remove(Object)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMap.remove(java.lang.Object)
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMapFauxverideShim.<K,V>of(K,V,K,V,K,V)
  name: ImmutableSortedMapFauxverideShim.<K,V>of(K,V,K,V,K,V)
  nameWithType: ImmutableSortedMapFauxverideShim.<K,V>of(K,V,K,V,K,V)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMapFauxverideShim.<K,V>of(K,V,K,V,K,V)
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMap.values()
  name: ImmutableMap.values()
  nameWithType: ImmutableMap.values()
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMap.values()
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMap.equals(java.lang.Object)
  name: ImmutableMap.equals(Object)
  nameWithType: ImmutableMap.equals(Object)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMap.equals(java.lang.Object)
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMapFauxverideShim.<K,V>of(K,V)
  name: ImmutableSortedMapFauxverideShim.<K,V>of(K,V)
  nameWithType: ImmutableSortedMapFauxverideShim.<K,V>of(K,V)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMapFauxverideShim.<K,V>of(K,V)
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMapFauxverideShim.<K,V>builder()
  name: ImmutableSortedMapFauxverideShim.<K,V>builder()
  nameWithType: ImmutableSortedMapFauxverideShim.<K,V>builder()
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMapFauxverideShim.<K,V>builder()
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMap.remove(java.lang.Object,java.lang.Object)
  name: ImmutableMap.remove(Object,Object)
  nameWithType: ImmutableMap.remove(Object,Object)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMap.remove(java.lang.Object,java.lang.Object)
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMapFauxverideShim.<K,V>of(K,V,K,V,K,V,K,V)
  name: ImmutableSortedMapFauxverideShim.<K,V>of(K,V,K,V,K,V,K,V)
  nameWithType: ImmutableSortedMapFauxverideShim.<K,V>of(K,V,K,V,K,V,K,V)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMapFauxverideShim.<K,V>of(K,V,K,V,K,V,K,V)
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMap.merge(K,V,java.util.function.BiFunction<? super V,? super V,? extends V>)
  name: ImmutableMap.merge(K,V,BiFunction<? super V,? super V,? extends V>)
  nameWithType: ImmutableMap.merge(K,V,BiFunction<? super V,? super V,? extends V>)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMap.merge(K,V,java.util.function.BiFunction<? super V,? super V,? extends V>)
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMap.containsKey(java.lang.Object)
  name: ImmutableMap.containsKey(Object)
  nameWithType: ImmutableMap.containsKey(Object)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMap.containsKey(java.lang.Object)
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMap.<K,V>copyOf(java.lang.Iterable<? extends java.util.Map.Entry<? extends K,? extends V>>)
  name: ImmutableMap.<K,V>copyOf(Iterable<? extends Map.Entry<? extends K,? extends V>>)
  nameWithType: ImmutableMap.<K,V>copyOf(Iterable<? extends Map.Entry<? extends K,? extends V>>)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMap.<K,V>copyOf(java.lang.Iterable<? extends java.util.Map.Entry<? extends K,? extends V>>)
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMap.toString()
  name: ImmutableMap.toString()
  nameWithType: ImmutableMap.toString()
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMap.toString()
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMap.get(java.lang.Object)
  name: ImmutableMap.get(Object)
  nameWithType: ImmutableMap.get(Object)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMap.get(java.lang.Object)
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMap.putIfAbsent(K,V)
  name: ImmutableMap.putIfAbsent(K,V)
  nameWithType: ImmutableMap.putIfAbsent(K,V)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMap.putIfAbsent(K,V)
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMap.replace(K,V,V)
  name: ImmutableMap.replace(K,V,V)
  nameWithType: ImmutableMap.replace(K,V,V)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMap.replace(K,V,V)
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMapFauxverideShim.<K,V>builderWithExpectedSize(int)
  name: ImmutableSortedMapFauxverideShim.<K,V>builderWithExpectedSize(int)
  nameWithType: ImmutableSortedMapFauxverideShim.<K,V>builderWithExpectedSize(int)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMapFauxverideShim.<K,V>builderWithExpectedSize(int)
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMap.entrySet()
  name: ImmutableMap.entrySet()
  nameWithType: ImmutableMap.entrySet()
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMap.entrySet()
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMap.asMultimap()
  name: ImmutableMap.asMultimap()
  nameWithType: ImmutableMap.asMultimap()
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMap.asMultimap()
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMap.getOrDefault(java.lang.Object,V)
  name: ImmutableMap.getOrDefault(Object,V)
  nameWithType: ImmutableMap.getOrDefault(Object,V)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMap.getOrDefault(java.lang.Object,V)
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMap.putAll(java.util.Map<? extends K,? extends V>)
  name: ImmutableMap.putAll(Map<? extends K,? extends V>)
  nameWithType: ImmutableMap.putAll(Map<? extends K,? extends V>)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMap.putAll(java.util.Map<? extends K,? extends V>)
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMapFauxverideShim.<K,V>of(K,V,K,V,K,V,K,V,K,V)
  name: ImmutableSortedMapFauxverideShim.<K,V>of(K,V,K,V,K,V,K,V,K,V)
  nameWithType: ImmutableSortedMapFauxverideShim.<K,V>of(K,V,K,V,K,V,K,V,K,V)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMapFauxverideShim.<K,V>of(K,V,K,V,K,V,K,V,K,V)
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMap.isEmpty()
  name: ImmutableMap.isEmpty()
  nameWithType: ImmutableMap.isEmpty()
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMap.isEmpty()
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMap.replace(K,V)
  name: ImmutableMap.replace(K,V)
  nameWithType: ImmutableMap.replace(K,V)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMap.replace(K,V)
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMap.keySet()
  name: ImmutableMap.keySet()
  nameWithType: ImmutableMap.keySet()
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMap.keySet()
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMapFauxverideShim.<T,K,V>toImmutableMap(java.util.function.Function<? super T,? extends K>,java.util.function.Function<? super T,? extends V>)
  name: ImmutableSortedMapFauxverideShim.<T,K,V>toImmutableMap(Function<? super T,? extends K>,Function<? super T,? extends V>)
  nameWithType: ImmutableSortedMapFauxverideShim.<T,K,V>toImmutableMap(Function<? super T,? extends K>,Function<? super T,? extends V>)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMapFauxverideShim.<T,K,V>toImmutableMap(java.util.function.Function<? super T,? extends K>,java.util.function.Function<? super T,? extends V>)
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMap.containsValue(java.lang.Object)
  name: ImmutableMap.containsValue(Object)
  nameWithType: ImmutableMap.containsValue(Object)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMap.containsValue(java.lang.Object)
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMap.computeIfPresent(K,java.util.function.BiFunction<? super K,? super V,? extends V>)
  name: ImmutableMap.computeIfPresent(K,BiFunction<? super K,? super V,? extends V>)
  nameWithType: ImmutableMap.computeIfPresent(K,BiFunction<? super K,? super V,? extends V>)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMap.computeIfPresent(K,java.util.function.BiFunction<? super K,? super V,? extends V>)
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMap.replaceAll(java.util.function.BiFunction<? super K,? super V,? extends V>)
  name: ImmutableMap.replaceAll(BiFunction<? super K,? super V,? extends V>)
  nameWithType: ImmutableMap.replaceAll(BiFunction<? super K,? super V,? extends V>)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMap.replaceAll(java.util.function.BiFunction<? super K,? super V,? extends V>)
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMapFauxverideShim.<K,V>of(K,V,K,V)
  name: ImmutableSortedMapFauxverideShim.<K,V>of(K,V,K,V)
  nameWithType: ImmutableSortedMapFauxverideShim.<K,V>of(K,V,K,V)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMapFauxverideShim.<K,V>of(K,V,K,V)
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap.Builder
  name: ImmutableSortedMap.Builder<K,V>
  nameWithType: ImmutableSortedMap.Builder<K,V>
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap.Builder<K,V>
- uid: com.azure.cosmos.implementation.guava25.collect.RegularImmutableSortedSet
  name: RegularImmutableSortedSet
  nameWithType: RegularImmutableSortedSet
  fullName: com.azure.cosmos.implementation.guava25.collect.RegularImmutableSortedSet
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableList
  name: ImmutableList
  nameWithType: ImmutableList
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableList
- uid: K,V
  name: K,V
  nameWithType: K,V
  fullName: K,V
- uid: java.util.Comparator
  name: Comparator
  nameWithType: Comparator
  fullName: java.util.Comparator
- uid: '? super K'
  name: '? super K'
  nameWithType: '? super K'
  fullName: '? super K'
- uid: '? super T,? extends K'
  name: '? super T,? extends K'
  nameWithType: '? super T,? extends K'
  fullName: '? super T,? extends K'
- uid: java.util.function.Function
  name: Function
  nameWithType: Function
  fullName: java.util.function.Function
- uid: '? super T,? extends V'
  name: '? super T,? extends V'
  nameWithType: '? super T,? extends V'
  fullName: '? super T,? extends V'
- uid: T,?,com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap
  name: T,?,ImmutableSortedMap
  nameWithType: T,?,ImmutableSortedMap
  fullName: T,?,com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMap
- uid: java.util.stream.Collector
  name: Collector
  nameWithType: Collector
  fullName: java.util.stream.Collector
- uid: java.util.function.BinaryOperator
  name: BinaryOperator
  nameWithType: BinaryOperator
  fullName: java.util.function.BinaryOperator
- uid: java.util.Map
  name: Map
  nameWithType: Map
  fullName: java.util.Map
- uid: '? extends K,? extends V'
  name: '? extends K,? extends V'
  nameWithType: '? extends K,? extends V'
  fullName: '? extends K,? extends V'
- uid: '? extends java.util.Map.Entry'
  name: '? extends Map.Entry'
  nameWithType: '? extends Map.Entry'
  fullName: '? extends java.util.Map.Entry'
- uid: java.lang.Iterable
  name: Iterable
  nameWithType: Iterable
  fullName: java.lang.Iterable
- uid: K,? extends V
  name: K,? extends V
  nameWithType: K,? extends V
  fullName: K,? extends V
- uid: java.util.SortedMap
  name: SortedMap
  nameWithType: SortedMap
  fullName: java.util.SortedMap
- uid: '? super K,? super V'
  name: '? super K,? super V'
  nameWithType: '? super K,? super V'
  fullName: '? super K,? super V'
- uid: java.util.function.BiConsumer
  name: BiConsumer
  nameWithType: BiConsumer
  fullName: java.util.function.BiConsumer
- uid: java.util.Map.Entry
  name: Map.Entry
  nameWithType: Map.Entry
  fullName: java.util.Map.Entry
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSet
  name: ImmutableSet
  nameWithType: ImmutableSet
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSet
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet
  name: ImmutableSortedSet
  nameWithType: ImmutableSortedSet
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection
  name: ImmutableCollection
  nameWithType: ImmutableCollection
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMapFauxverideShim
  name: ImmutableSortedMapFauxverideShim
  nameWithType: ImmutableSortedMapFauxverideShim
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMapFauxverideShim
- uid: java.util.NavigableMap
  name: NavigableMap
  nameWithType: NavigableMap
  fullName: java.util.NavigableMap
- uid: K,V>copyOf(java.util.Map
  name: K,V>copyOf(Map
  nameWithType: K,V>copyOf(Map
  fullName: K,V>copyOf(java.util.Map
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMap.
  name: ImmutableMap.
  nameWithType: ImmutableMap.
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMap.
- uid: '? extends K,? extends V>)'
  name: '? extends K,? extends V>)'
  nameWithType: '? extends K,? extends V>)'
  fullName: '? extends K,? extends V>)'
- uid: K,V>of()
  name: K,V>of()
  nameWithType: K,V>of()
  fullName: K,V>of()
- uid: '? super K,? extends V>)'
  name: '? super K,? extends V>)'
  nameWithType: '? super K,? extends V>)'
  fullName: '? super K,? extends V>)'
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMap.computeIfAbsent(K,java.util.function.Function
  name: ImmutableMap.computeIfAbsent(K,Function
  nameWithType: ImmutableMap.computeIfAbsent(K,Function
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMap.computeIfAbsent(K,java.util.function.Function
- uid: V>)
  name: V>)
  nameWithType: V>)
  fullName: V>)
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMapFauxverideShim.
  name: ImmutableSortedMapFauxverideShim.
  nameWithType: ImmutableSortedMapFauxverideShim.
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMapFauxverideShim.
- uid: '? super T,? extends V>,java.util.function.BinaryOperator'
  name: '? super T,? extends V>,BinaryOperator'
  nameWithType: '? super T,? extends V>,BinaryOperator'
  fullName: '? super T,? extends V>,java.util.function.BinaryOperator'
- uid: T,K,V>toImmutableMap(java.util.function.Function
  name: T,K,V>toImmutableMap(Function
  nameWithType: T,K,V>toImmutableMap(Function
  fullName: T,K,V>toImmutableMap(java.util.function.Function
- uid: '? super T,? extends K>,java.util.function.Function'
  name: '? super T,? extends K>,Function'
  nameWithType: '? super T,? extends K>,Function'
  fullName: '? super T,? extends K>,java.util.function.Function'
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMap.compute(K,java.util.function.BiFunction
  name: ImmutableMap.compute(K,BiFunction
  nameWithType: ImmutableMap.compute(K,BiFunction
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMap.compute(K,java.util.function.BiFunction
- uid: '? super K,? super V,? extends V>)'
  name: '? super K,? super V,? extends V>)'
  nameWithType: '? super K,? super V,? extends V>)'
  fullName: '? super K,? super V,? extends V>)'
- uid: K,V>of(K,V,K,V,K,V)
  name: K,V>of(K,V,K,V,K,V)
  nameWithType: K,V>of(K,V,K,V,K,V)
  fullName: K,V>of(K,V,K,V,K,V)
- uid: K,V>of(K,V)
  name: K,V>of(K,V)
  nameWithType: K,V>of(K,V)
  fullName: K,V>of(K,V)
- uid: K,V>builder()
  name: K,V>builder()
  nameWithType: K,V>builder()
  fullName: K,V>builder()
- uid: K,V>of(K,V,K,V,K,V,K,V)
  name: K,V>of(K,V,K,V,K,V,K,V)
  nameWithType: K,V>of(K,V,K,V,K,V,K,V)
  fullName: K,V>of(K,V,K,V,K,V,K,V)
- uid: '? super V,? super V,? extends V>)'
  name: '? super V,? super V,? extends V>)'
  nameWithType: '? super V,? super V,? extends V>)'
  fullName: '? super V,? super V,? extends V>)'
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMap.merge(K,V,java.util.function.BiFunction
  name: ImmutableMap.merge(K,V,BiFunction
  nameWithType: ImmutableMap.merge(K,V,BiFunction
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMap.merge(K,V,java.util.function.BiFunction
- uid: K,V>copyOf(java.lang.Iterable
  name: K,V>copyOf(Iterable
  nameWithType: K,V>copyOf(Iterable
  fullName: K,V>copyOf(java.lang.Iterable
- uid: '? extends K,? extends V>>)'
  name: '? extends K,? extends V>>)'
  nameWithType: '? extends K,? extends V>>)'
  fullName: '? extends K,? extends V>>)'
- uid: K,V>builderWithExpectedSize(int)
  name: K,V>builderWithExpectedSize(int)
  nameWithType: K,V>builderWithExpectedSize(int)
  fullName: K,V>builderWithExpectedSize(int)
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMap.putAll(java.util.Map
  name: ImmutableMap.putAll(Map
  nameWithType: ImmutableMap.putAll(Map
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMap.putAll(java.util.Map
- uid: K,V>of(K,V,K,V,K,V,K,V,K,V)
  name: K,V>of(K,V,K,V,K,V,K,V,K,V)
  nameWithType: K,V>of(K,V,K,V,K,V,K,V,K,V)
  fullName: K,V>of(K,V,K,V,K,V,K,V,K,V)
- uid: '? super T,? extends V>)'
  name: '? super T,? extends V>)'
  nameWithType: '? super T,? extends V>)'
  fullName: '? super T,? extends V>)'
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMap.computeIfPresent(K,java.util.function.BiFunction
  name: ImmutableMap.computeIfPresent(K,BiFunction
  nameWithType: ImmutableMap.computeIfPresent(K,BiFunction
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMap.computeIfPresent(K,java.util.function.BiFunction
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMap.replaceAll(java.util.function.BiFunction
  name: ImmutableMap.replaceAll(BiFunction
  nameWithType: ImmutableMap.replaceAll(BiFunction
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMap.replaceAll(java.util.function.BiFunction
- uid: K,V>of(K,V,K,V)
  name: K,V>of(K,V,K,V)
  nameWithType: K,V>of(K,V,K,V)
  fullName: K,V>of(K,V,K,V)
