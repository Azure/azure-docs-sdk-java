### YamlMime:ManagedReference
items:
- uid: com.fasterxml.jackson.databind.cfg.MapperConfig
  id: MapperConfig
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.cfg
  children:
  - com.fasterxml.jackson.databind.cfg.MapperConfig.<F>collectFeatureDefaults(java.lang.Class<F>)
  - com.fasterxml.jackson.databind.cfg.MapperConfig.EMPTY_FORMAT
  - com.fasterxml.jackson.databind.cfg.MapperConfig.EMPTY_INCLUDE
  - com.fasterxml.jackson.databind.cfg.MapperConfig.MapperConfig(com.fasterxml.jackson.databind.cfg.BaseSettings,int)
  - com.fasterxml.jackson.databind.cfg.MapperConfig.MapperConfig(com.fasterxml.jackson.databind.cfg.MapperConfig<T>)
  - com.fasterxml.jackson.databind.cfg.MapperConfig.MapperConfig(com.fasterxml.jackson.databind.cfg.MapperConfig<T>,com.fasterxml.jackson.databind.cfg.BaseSettings)
  - com.fasterxml.jackson.databind.cfg.MapperConfig.MapperConfig(com.fasterxml.jackson.databind.cfg.MapperConfig<T>,int)
  - com.fasterxml.jackson.databind.cfg.MapperConfig._base
  - com.fasterxml.jackson.databind.cfg.MapperConfig._mapperFeatures
  - com.fasterxml.jackson.databind.cfg.MapperConfig.canOverrideAccessModifiers()
  - com.fasterxml.jackson.databind.cfg.MapperConfig.compileString(java.lang.String)
  - com.fasterxml.jackson.databind.cfg.MapperConfig.constructSpecializedType(com.fasterxml.jackson.databind.JavaType,java.lang.Class<?>)
  - com.fasterxml.jackson.databind.cfg.MapperConfig.constructType(com.fasterxml.jackson.core.type.TypeReference<?>)
  - com.fasterxml.jackson.databind.cfg.MapperConfig.constructType(java.lang.Class<?>)
  - com.fasterxml.jackson.databind.cfg.MapperConfig.findConfigOverride(java.lang.Class<?>)
  - com.fasterxml.jackson.databind.cfg.MapperConfig.findRootName(com.fasterxml.jackson.databind.JavaType)
  - com.fasterxml.jackson.databind.cfg.MapperConfig.findRootName(java.lang.Class<?>)
  - com.fasterxml.jackson.databind.cfg.MapperConfig.getActiveView()
  - com.fasterxml.jackson.databind.cfg.MapperConfig.getAnnotationIntrospector()
  - com.fasterxml.jackson.databind.cfg.MapperConfig.getAttributes()
  - com.fasterxml.jackson.databind.cfg.MapperConfig.getBase64Variant()
  - com.fasterxml.jackson.databind.cfg.MapperConfig.getClassIntrospector()
  - com.fasterxml.jackson.databind.cfg.MapperConfig.getConfigOverride(java.lang.Class<?>)
  - com.fasterxml.jackson.databind.cfg.MapperConfig.getDateFormat()
  - com.fasterxml.jackson.databind.cfg.MapperConfig.getDefaultInclusion(java.lang.Class<?>,java.lang.Class<?>)
  - com.fasterxml.jackson.databind.cfg.MapperConfig.getDefaultInclusion(java.lang.Class<?>,java.lang.Class<?>,com.fasterxml.jackson.annotation.JsonInclude.Value)
  - com.fasterxml.jackson.databind.cfg.MapperConfig.getDefaultMergeable()
  - com.fasterxml.jackson.databind.cfg.MapperConfig.getDefaultMergeable(java.lang.Class<?>)
  - com.fasterxml.jackson.databind.cfg.MapperConfig.getDefaultPropertyFormat(java.lang.Class<?>)
  - com.fasterxml.jackson.databind.cfg.MapperConfig.getDefaultPropertyIgnorals(java.lang.Class<?>)
  - com.fasterxml.jackson.databind.cfg.MapperConfig.getDefaultPropertyIgnorals(java.lang.Class<?>,com.fasterxml.jackson.databind.introspect.AnnotatedClass)
  - com.fasterxml.jackson.databind.cfg.MapperConfig.getDefaultPropertyInclusion()
  - com.fasterxml.jackson.databind.cfg.MapperConfig.getDefaultPropertyInclusion(java.lang.Class<?>)
  - com.fasterxml.jackson.databind.cfg.MapperConfig.getDefaultPropertyInclusion(java.lang.Class<?>,com.fasterxml.jackson.annotation.JsonInclude.Value)
  - com.fasterxml.jackson.databind.cfg.MapperConfig.getDefaultSetterInfo()
  - com.fasterxml.jackson.databind.cfg.MapperConfig.getDefaultTyper(com.fasterxml.jackson.databind.JavaType)
  - com.fasterxml.jackson.databind.cfg.MapperConfig.getDefaultVisibilityChecker()
  - com.fasterxml.jackson.databind.cfg.MapperConfig.getDefaultVisibilityChecker(java.lang.Class<?>,com.fasterxml.jackson.databind.introspect.AnnotatedClass)
  - com.fasterxml.jackson.databind.cfg.MapperConfig.getHandlerInstantiator()
  - com.fasterxml.jackson.databind.cfg.MapperConfig.getLocale()
  - com.fasterxml.jackson.databind.cfg.MapperConfig.getPolymorphicTypeValidator()
  - com.fasterxml.jackson.databind.cfg.MapperConfig.getPropertyNamingStrategy()
  - com.fasterxml.jackson.databind.cfg.MapperConfig.getSubtypeResolver()
  - com.fasterxml.jackson.databind.cfg.MapperConfig.getTimeZone()
  - com.fasterxml.jackson.databind.cfg.MapperConfig.getTypeFactory()
  - com.fasterxml.jackson.databind.cfg.MapperConfig.hasMapperFeatures(int)
  - com.fasterxml.jackson.databind.cfg.MapperConfig.introspectClassAnnotations(com.fasterxml.jackson.databind.JavaType)
  - com.fasterxml.jackson.databind.cfg.MapperConfig.introspectClassAnnotations(java.lang.Class<?>)
  - com.fasterxml.jackson.databind.cfg.MapperConfig.introspectDirectClassAnnotations(com.fasterxml.jackson.databind.JavaType)
  - com.fasterxml.jackson.databind.cfg.MapperConfig.introspectDirectClassAnnotations(java.lang.Class<?>)
  - com.fasterxml.jackson.databind.cfg.MapperConfig.isAnnotationProcessingEnabled()
  - com.fasterxml.jackson.databind.cfg.MapperConfig.isEnabled(com.fasterxml.jackson.databind.MapperFeature)
  - com.fasterxml.jackson.databind.cfg.MapperConfig.shouldSortPropertiesAlphabetically()
  - com.fasterxml.jackson.databind.cfg.MapperConfig.typeIdResolverInstance(com.fasterxml.jackson.databind.introspect.Annotated,java.lang.Class<? extends com.fasterxml.jackson.databind.jsontype.TypeIdResolver>)
  - com.fasterxml.jackson.databind.cfg.MapperConfig.typeResolverBuilderInstance(com.fasterxml.jackson.databind.introspect.Annotated,java.lang.Class<? extends com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder<?>>)
  - com.fasterxml.jackson.databind.cfg.MapperConfig.useRootWrapping()
  - com.fasterxml.jackson.databind.cfg.MapperConfig.with(com.fasterxml.jackson.databind.MapperFeature,boolean)
  - com.fasterxml.jackson.databind.cfg.MapperConfig.with(com.fasterxml.jackson.databind.MapperFeature...)
  - com.fasterxml.jackson.databind.cfg.MapperConfig.without(com.fasterxml.jackson.databind.MapperFeature...)
  langs:
  - java
  name: MapperConfig<T>
  nameWithType: MapperConfig<T>
  fullName: com.fasterxml.jackson.databind.cfg.MapperConfig<T>
  type: Class
  package: com.fasterxml.jackson.databind.cfg
  summary: >-
    Interface that defines functionality accessible through both serialization and deserialization configuration objects; accessors to mode-independent configuration settings and such. In addition, shared features are defined in <xref uid="com.fasterxml.jackson.databind.MapperFeature" data-throw-if-not-resolved="false">MapperFeature</xref>.


    Small part of implementation is included here by aggregating <xref uid="com.fasterxml.jackson.databind.cfg.BaseSettings" data-throw-if-not-resolved="false">BaseSettings</xref> instance that contains configuration that is shared between different types of instances.
  syntax:
    content: public abstract class MapperConfig<T> implements ClassIntrospector.MixInResolver, Serializable
    typeParameters:
    - id: T
  inheritance:
  - java.lang.Object
  implements:
  - com.fasterxml.jackson.databind.introspect.ClassIntrospector.MixInResolver
  - java.io.Serializable
  inheritedMembers:
  - java.lang.Object.clone()
  - java.lang.Object.equals(java.lang.Object)
  - java.lang.Object.finalize()
  - java.lang.Object.getClass()
  - java.lang.Object.hashCode()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.toString()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
- uid: com.fasterxml.jackson.databind.cfg.MapperConfig.<F>collectFeatureDefaults(java.lang.Class<F>)
  id: <F>collectFeatureDefaults(java.lang.Class<F>)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.cfg.MapperConfig
  langs:
  - java
  name: <F>collectFeatureDefaults(Class<F> enumClass)
  nameWithType: MapperConfig<T>.<F>collectFeatureDefaults(Class<F> enumClass)
  fullName: com.fasterxml.jackson.databind.cfg.MapperConfig<T>.<F>collectFeatureDefaults(Class<F> enumClass)
  overload: com.fasterxml.jackson.databind.cfg.MapperConfig.collectFeatureDefaults*
  type: Method
  package: com.fasterxml.jackson.databind.cfg
  summary: Method that calculates bit set (flags) of all features that are enabled by default.
  syntax:
    content: public static int <F>collectFeatureDefaults(Class<F> enumClass)
    parameters:
    - id: enumClass
      type: java.lang.Class<F>
    return:
      type: int
- uid: com.fasterxml.jackson.databind.cfg.MapperConfig.EMPTY_FORMAT
  id: EMPTY_FORMAT
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.cfg.MapperConfig
  langs:
  - java
  name: EMPTY_FORMAT
  nameWithType: MapperConfig<T>.EMPTY_FORMAT
  fullName: com.fasterxml.jackson.databind.cfg.MapperConfig<T>.EMPTY_FORMAT
  type: Field
  package: com.fasterxml.jackson.databind.cfg
  syntax:
    content: protected static final JsonFormat.Value EMPTY_FORMAT
    return:
      type: com.fasterxml.jackson.annotation.JsonFormat.Value
- uid: com.fasterxml.jackson.databind.cfg.MapperConfig.EMPTY_INCLUDE
  id: EMPTY_INCLUDE
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.cfg.MapperConfig
  langs:
  - java
  name: EMPTY_INCLUDE
  nameWithType: MapperConfig<T>.EMPTY_INCLUDE
  fullName: com.fasterxml.jackson.databind.cfg.MapperConfig<T>.EMPTY_INCLUDE
  type: Field
  package: com.fasterxml.jackson.databind.cfg
  syntax:
    content: protected static final JsonInclude.Value EMPTY_INCLUDE
    return:
      type: com.fasterxml.jackson.annotation.JsonInclude.Value
- uid: com.fasterxml.jackson.databind.cfg.MapperConfig.MapperConfig(com.fasterxml.jackson.databind.cfg.BaseSettings,int)
  id: MapperConfig(com.fasterxml.jackson.databind.cfg.BaseSettings,int)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.cfg.MapperConfig
  langs:
  - java
  name: MapperConfig(BaseSettings base, int mapperFeatures)
  nameWithType: MapperConfig<T>.MapperConfig(BaseSettings base, int mapperFeatures)
  fullName: com.fasterxml.jackson.databind.cfg.MapperConfig<T>.MapperConfig(BaseSettings base, int mapperFeatures)
  overload: com.fasterxml.jackson.databind.cfg.MapperConfig.MapperConfig*
  type: Constructor
  package: com.fasterxml.jackson.databind.cfg
  syntax:
    content: protected MapperConfig(BaseSettings base, int mapperFeatures)
    parameters:
    - id: base
      type: com.fasterxml.jackson.databind.cfg.BaseSettings
    - id: mapperFeatures
      type: int
- uid: com.fasterxml.jackson.databind.cfg.MapperConfig.MapperConfig(com.fasterxml.jackson.databind.cfg.MapperConfig<T>)
  id: MapperConfig(com.fasterxml.jackson.databind.cfg.MapperConfig<T>)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.cfg.MapperConfig
  langs:
  - java
  name: MapperConfig(MapperConfig<T> src)
  nameWithType: MapperConfig<T>.MapperConfig(MapperConfig<T> src)
  fullName: com.fasterxml.jackson.databind.cfg.MapperConfig<T>.MapperConfig(MapperConfig<T> src)
  overload: com.fasterxml.jackson.databind.cfg.MapperConfig.MapperConfig*
  type: Constructor
  package: com.fasterxml.jackson.databind.cfg
  syntax:
    content: protected MapperConfig(MapperConfig<T> src)
    parameters:
    - id: src
      type: com.fasterxml.jackson.databind.cfg.MapperConfig<T>
- uid: com.fasterxml.jackson.databind.cfg.MapperConfig.MapperConfig(com.fasterxml.jackson.databind.cfg.MapperConfig<T>,com.fasterxml.jackson.databind.cfg.BaseSettings)
  id: MapperConfig(com.fasterxml.jackson.databind.cfg.MapperConfig<T>,com.fasterxml.jackson.databind.cfg.BaseSettings)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.cfg.MapperConfig
  langs:
  - java
  name: MapperConfig(MapperConfig<T> src, BaseSettings base)
  nameWithType: MapperConfig<T>.MapperConfig(MapperConfig<T> src, BaseSettings base)
  fullName: com.fasterxml.jackson.databind.cfg.MapperConfig<T>.MapperConfig(MapperConfig<T> src, BaseSettings base)
  overload: com.fasterxml.jackson.databind.cfg.MapperConfig.MapperConfig*
  type: Constructor
  package: com.fasterxml.jackson.databind.cfg
  syntax:
    content: protected MapperConfig(MapperConfig<T> src, BaseSettings base)
    parameters:
    - id: src
      type: com.fasterxml.jackson.databind.cfg.MapperConfig<T>
    - id: base
      type: com.fasterxml.jackson.databind.cfg.BaseSettings
- uid: com.fasterxml.jackson.databind.cfg.MapperConfig.MapperConfig(com.fasterxml.jackson.databind.cfg.MapperConfig<T>,int)
  id: MapperConfig(com.fasterxml.jackson.databind.cfg.MapperConfig<T>,int)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.cfg.MapperConfig
  langs:
  - java
  name: MapperConfig(MapperConfig<T> src, int mapperFeatures)
  nameWithType: MapperConfig<T>.MapperConfig(MapperConfig<T> src, int mapperFeatures)
  fullName: com.fasterxml.jackson.databind.cfg.MapperConfig<T>.MapperConfig(MapperConfig<T> src, int mapperFeatures)
  overload: com.fasterxml.jackson.databind.cfg.MapperConfig.MapperConfig*
  type: Constructor
  package: com.fasterxml.jackson.databind.cfg
  syntax:
    content: protected MapperConfig(MapperConfig<T> src, int mapperFeatures)
    parameters:
    - id: src
      type: com.fasterxml.jackson.databind.cfg.MapperConfig<T>
    - id: mapperFeatures
      type: int
- uid: com.fasterxml.jackson.databind.cfg.MapperConfig._base
  id: _base
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.cfg.MapperConfig
  langs:
  - java
  name: _base
  nameWithType: MapperConfig<T>._base
  fullName: com.fasterxml.jackson.databind.cfg.MapperConfig<T>._base
  type: Field
  package: com.fasterxml.jackson.databind.cfg
  summary: Immutable container object for simple configuration settings.
  syntax:
    content: protected final BaseSettings _base
    return:
      type: com.fasterxml.jackson.databind.cfg.BaseSettings
- uid: com.fasterxml.jackson.databind.cfg.MapperConfig._mapperFeatures
  id: _mapperFeatures
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.cfg.MapperConfig
  langs:
  - java
  name: _mapperFeatures
  nameWithType: MapperConfig<T>._mapperFeatures
  fullName: com.fasterxml.jackson.databind.cfg.MapperConfig<T>._mapperFeatures
  type: Field
  package: com.fasterxml.jackson.databind.cfg
  summary: Set of shared mapper features enabled.
  syntax:
    content: protected final int _mapperFeatures
    return:
      type: int
- uid: com.fasterxml.jackson.databind.cfg.MapperConfig.canOverrideAccessModifiers()
  id: canOverrideAccessModifiers()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.cfg.MapperConfig
  langs:
  - java
  name: canOverrideAccessModifiers()
  nameWithType: MapperConfig<T>.canOverrideAccessModifiers()
  fullName: com.fasterxml.jackson.databind.cfg.MapperConfig<T>.canOverrideAccessModifiers()
  overload: com.fasterxml.jackson.databind.cfg.MapperConfig.canOverrideAccessModifiers*
  type: Method
  package: com.fasterxml.jackson.databind.cfg
  summary: Accessor for determining whether it is ok to try to force override of access modifiers to be able to get or set values of non-public Methods, Fields; to invoke non-public Constructors, Methods; or to instantiate non-public Classes. By default this is enabled, but on some platforms it needs to be prevented since if this would violate security constraints and cause failures.
  syntax:
    content: public final boolean canOverrideAccessModifiers()
    return:
      type: boolean
      description: >-
        True if access modifier overriding is allowed (and may be done for
           any Field, Method, Constructor or Class); false to prevent any attempts
           to override.
- uid: com.fasterxml.jackson.databind.cfg.MapperConfig.compileString(java.lang.String)
  id: compileString(java.lang.String)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.cfg.MapperConfig
  langs:
  - java
  name: compileString(String src)
  nameWithType: MapperConfig<T>.compileString(String src)
  fullName: com.fasterxml.jackson.databind.cfg.MapperConfig<T>.compileString(String src)
  overload: com.fasterxml.jackson.databind.cfg.MapperConfig.compileString*
  type: Method
  package: com.fasterxml.jackson.databind.cfg
  summary: Method for constructing a specialized textual object that can typically be serialized faster than basic <xref uid="java.lang.String" data-throw-if-not-resolved="false">java.lang.String</xref> (depending on escaping needed if any, char-to-byte encoding if needed).
  syntax:
    content: public SerializableString compileString(String src)
    parameters:
    - id: src
      type: java.lang.String
      description: Text to represent
    return:
      type: com.fasterxml.jackson.core.SerializableString
      description: Optimized text object constructed
- uid: com.fasterxml.jackson.databind.cfg.MapperConfig.constructSpecializedType(com.fasterxml.jackson.databind.JavaType,java.lang.Class<?>)
  id: constructSpecializedType(com.fasterxml.jackson.databind.JavaType,java.lang.Class<?>)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.cfg.MapperConfig
  langs:
  - java
  name: constructSpecializedType(JavaType baseType, Class<?> subclass)
  nameWithType: MapperConfig<T>.constructSpecializedType(JavaType baseType, Class<?> subclass)
  fullName: com.fasterxml.jackson.databind.cfg.MapperConfig<T>.constructSpecializedType(JavaType baseType, Class<?> subclass)
  overload: com.fasterxml.jackson.databind.cfg.MapperConfig.constructSpecializedType*
  type: Method
  package: com.fasterxml.jackson.databind.cfg
  syntax:
    content: public JavaType constructSpecializedType(JavaType baseType, Class<?> subclass)
    parameters:
    - id: baseType
      type: com.fasterxml.jackson.databind.JavaType
    - id: subclass
      type: java.lang.Class<?>
    return:
      type: com.fasterxml.jackson.databind.JavaType
- uid: com.fasterxml.jackson.databind.cfg.MapperConfig.constructType(com.fasterxml.jackson.core.type.TypeReference<?>)
  id: constructType(com.fasterxml.jackson.core.type.TypeReference<?>)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.cfg.MapperConfig
  langs:
  - java
  name: constructType(TypeReference<?> valueTypeRef)
  nameWithType: MapperConfig<T>.constructType(TypeReference<?> valueTypeRef)
  fullName: com.fasterxml.jackson.databind.cfg.MapperConfig<T>.constructType(TypeReference<?> valueTypeRef)
  overload: com.fasterxml.jackson.databind.cfg.MapperConfig.constructType*
  type: Method
  package: com.fasterxml.jackson.databind.cfg
  summary: >-
    Helper method that will construct <xref uid="com.fasterxml.jackson.databind.JavaType" data-throw-if-not-resolved="false">JavaType</xref> for given type reference This is a simple short-cut for:


    ```java

    getTypeFactory().constructType(valueTypeRef);

    ```
  syntax:
    content: public final JavaType constructType(TypeReference<?> valueTypeRef)
    parameters:
    - id: valueTypeRef
      type: com.fasterxml.jackson.core.type.TypeReference<?>
    return:
      type: com.fasterxml.jackson.databind.JavaType
- uid: com.fasterxml.jackson.databind.cfg.MapperConfig.constructType(java.lang.Class<?>)
  id: constructType(java.lang.Class<?>)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.cfg.MapperConfig
  langs:
  - java
  name: constructType(Class<?> cls)
  nameWithType: MapperConfig<T>.constructType(Class<?> cls)
  fullName: com.fasterxml.jackson.databind.cfg.MapperConfig<T>.constructType(Class<?> cls)
  overload: com.fasterxml.jackson.databind.cfg.MapperConfig.constructType*
  type: Method
  package: com.fasterxml.jackson.databind.cfg
  summary: >-
    Helper method that will construct <xref uid="com.fasterxml.jackson.databind.JavaType" data-throw-if-not-resolved="false">JavaType</xref> for given raw class. This is a simple short-cut for:


    ```java

    getTypeFactory().constructType(cls);

    ```
  syntax:
    content: public final JavaType constructType(Class<?> cls)
    parameters:
    - id: cls
      type: java.lang.Class<?>
    return:
      type: com.fasterxml.jackson.databind.JavaType
- uid: com.fasterxml.jackson.databind.cfg.MapperConfig.findConfigOverride(java.lang.Class<?>)
  id: findConfigOverride(java.lang.Class<?>)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.cfg.MapperConfig
  langs:
  - java
  name: findConfigOverride(Class<?> type)
  nameWithType: MapperConfig<T>.findConfigOverride(Class<?> type)
  fullName: com.fasterxml.jackson.databind.cfg.MapperConfig<T>.findConfigOverride(Class<?> type)
  overload: com.fasterxml.jackson.databind.cfg.MapperConfig.findConfigOverride*
  type: Method
  package: com.fasterxml.jackson.databind.cfg
  summary: >-
    Accessor for finding <xref uid="com.fasterxml.jackson.databind.cfg.ConfigOverride" data-throw-if-not-resolved="false">ConfigOverride</xref> to use for properties of given type, if any exist; or return \`null\` if not.


    Note that only directly associated override is found; no type hierarchy traversal is performed.
  syntax:
    content: public abstract ConfigOverride findConfigOverride(Class<?> type)
    parameters:
    - id: type
      type: java.lang.Class<?>
    return:
      type: com.fasterxml.jackson.databind.cfg.ConfigOverride
      description: Override object to use for the type, if defined; null if none.
- uid: com.fasterxml.jackson.databind.cfg.MapperConfig.findRootName(com.fasterxml.jackson.databind.JavaType)
  id: findRootName(com.fasterxml.jackson.databind.JavaType)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.cfg.MapperConfig
  langs:
  - java
  name: findRootName(JavaType rootType)
  nameWithType: MapperConfig<T>.findRootName(JavaType rootType)
  fullName: com.fasterxml.jackson.databind.cfg.MapperConfig<T>.findRootName(JavaType rootType)
  overload: com.fasterxml.jackson.databind.cfg.MapperConfig.findRootName*
  type: Method
  package: com.fasterxml.jackson.databind.cfg
  syntax:
    content: public abstract PropertyName findRootName(JavaType rootType)
    parameters:
    - id: rootType
      type: com.fasterxml.jackson.databind.JavaType
    return:
      type: com.fasterxml.jackson.databind.PropertyName
- uid: com.fasterxml.jackson.databind.cfg.MapperConfig.findRootName(java.lang.Class<?>)
  id: findRootName(java.lang.Class<?>)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.cfg.MapperConfig
  langs:
  - java
  name: findRootName(Class<?> rawRootType)
  nameWithType: MapperConfig<T>.findRootName(Class<?> rawRootType)
  fullName: com.fasterxml.jackson.databind.cfg.MapperConfig<T>.findRootName(Class<?> rawRootType)
  overload: com.fasterxml.jackson.databind.cfg.MapperConfig.findRootName*
  type: Method
  package: com.fasterxml.jackson.databind.cfg
  syntax:
    content: public abstract PropertyName findRootName(Class<?> rawRootType)
    parameters:
    - id: rawRootType
      type: java.lang.Class<?>
    return:
      type: com.fasterxml.jackson.databind.PropertyName
- uid: com.fasterxml.jackson.databind.cfg.MapperConfig.getActiveView()
  id: getActiveView()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.cfg.MapperConfig
  langs:
  - java
  name: getActiveView()
  nameWithType: MapperConfig<T>.getActiveView()
  fullName: com.fasterxml.jackson.databind.cfg.MapperConfig<T>.getActiveView()
  overload: com.fasterxml.jackson.databind.cfg.MapperConfig.getActiveView*
  type: Method
  package: com.fasterxml.jackson.databind.cfg
  summary: Accessor for finding currently active view, if any (null if none)
  syntax:
    content: public abstract Class<?> getActiveView()
    return:
      type: java.lang.Class<?>
- uid: com.fasterxml.jackson.databind.cfg.MapperConfig.getAnnotationIntrospector()
  id: getAnnotationIntrospector()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.cfg.MapperConfig
  langs:
  - java
  name: getAnnotationIntrospector()
  nameWithType: MapperConfig<T>.getAnnotationIntrospector()
  fullName: com.fasterxml.jackson.databind.cfg.MapperConfig<T>.getAnnotationIntrospector()
  overload: com.fasterxml.jackson.databind.cfg.MapperConfig.getAnnotationIntrospector*
  type: Method
  package: com.fasterxml.jackson.databind.cfg
  summary: >-
    Method for getting <xref uid="com.fasterxml.jackson.databind.AnnotationIntrospector" data-throw-if-not-resolved="false">AnnotationIntrospector</xref> configured to introspect annotation values used for configuration.


    Non-final since it is actually overridden by sub-classes (for now?)
  syntax:
    content: public AnnotationIntrospector getAnnotationIntrospector()
    return:
      type: com.fasterxml.jackson.databind.AnnotationIntrospector
- uid: com.fasterxml.jackson.databind.cfg.MapperConfig.getAttributes()
  id: getAttributes()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.cfg.MapperConfig
  langs:
  - java
  name: getAttributes()
  nameWithType: MapperConfig<T>.getAttributes()
  fullName: com.fasterxml.jackson.databind.cfg.MapperConfig<T>.getAttributes()
  overload: com.fasterxml.jackson.databind.cfg.MapperConfig.getAttributes*
  type: Method
  package: com.fasterxml.jackson.databind.cfg
  summary: Method for accessing per-instance shared (baseline/default) attribute values; these are used as the basis for per-call attributes.
  syntax:
    content: public abstract ContextAttributes getAttributes()
    return:
      type: com.fasterxml.jackson.databind.cfg.ContextAttributes
- uid: com.fasterxml.jackson.databind.cfg.MapperConfig.getBase64Variant()
  id: getBase64Variant()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.cfg.MapperConfig
  langs:
  - java
  name: getBase64Variant()
  nameWithType: MapperConfig<T>.getBase64Variant()
  fullName: com.fasterxml.jackson.databind.cfg.MapperConfig<T>.getBase64Variant()
  overload: com.fasterxml.jackson.databind.cfg.MapperConfig.getBase64Variant*
  type: Method
  package: com.fasterxml.jackson.databind.cfg
  summary: Method called during deserialization if Base64 encoded content needs to be decoded. Default version just returns default Jackson uses, which is modified-mime which does not add linefeeds (because those would have to be escaped in JSON strings); but this can be configured on <xref uid="com.fasterxml.jackson.databind.ObjectWriter" data-throw-if-not-resolved="false">ObjectWriter</xref>.
  syntax:
    content: public Base64Variant getBase64Variant()
    return:
      type: com.fasterxml.jackson.core.Base64Variant
- uid: com.fasterxml.jackson.databind.cfg.MapperConfig.getClassIntrospector()
  id: getClassIntrospector()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.cfg.MapperConfig
  langs:
  - java
  name: getClassIntrospector()
  nameWithType: MapperConfig<T>.getClassIntrospector()
  fullName: com.fasterxml.jackson.databind.cfg.MapperConfig<T>.getClassIntrospector()
  overload: com.fasterxml.jackson.databind.cfg.MapperConfig.getClassIntrospector*
  type: Method
  package: com.fasterxml.jackson.databind.cfg
  syntax:
    content: public ClassIntrospector getClassIntrospector()
    return:
      type: com.fasterxml.jackson.databind.introspect.ClassIntrospector
- uid: com.fasterxml.jackson.databind.cfg.MapperConfig.getConfigOverride(java.lang.Class<?>)
  id: getConfigOverride(java.lang.Class<?>)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.cfg.MapperConfig
  langs:
  - java
  name: getConfigOverride(Class<?> type)
  nameWithType: MapperConfig<T>.getConfigOverride(Class<?> type)
  fullName: com.fasterxml.jackson.databind.cfg.MapperConfig<T>.getConfigOverride(Class<?> type)
  overload: com.fasterxml.jackson.databind.cfg.MapperConfig.getConfigOverride*
  type: Method
  package: com.fasterxml.jackson.databind.cfg
  summary: >-
    Accessor for finding <xref uid="com.fasterxml.jackson.databind.cfg.ConfigOverride" data-throw-if-not-resolved="false">ConfigOverride</xref> to use for properties of given type, if any exist; or if none, return an immutable "empty" instance with no overrides.


    Note that only directly associated override is found; no type hierarchy traversal is performed.
  syntax:
    content: public abstract ConfigOverride getConfigOverride(Class<?> type)
    parameters:
    - id: type
      type: java.lang.Class<?>
    return:
      type: com.fasterxml.jackson.databind.cfg.ConfigOverride
      description: Override object to use for the type, never null (but may be empty)
- uid: com.fasterxml.jackson.databind.cfg.MapperConfig.getDateFormat()
  id: getDateFormat()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.cfg.MapperConfig
  langs:
  - java
  name: getDateFormat()
  nameWithType: MapperConfig<T>.getDateFormat()
  fullName: com.fasterxml.jackson.databind.cfg.MapperConfig<T>.getDateFormat()
  overload: com.fasterxml.jackson.databind.cfg.MapperConfig.getDateFormat*
  type: Method
  package: com.fasterxml.jackson.databind.cfg
  summary: >-
    Method for accessing currently configured (textual) date format that will be used for reading or writing date values (in case of writing, only if textual output is configured; not if dates are to be serialized as time stamps).


    Note that typically <xref uid="java.text.DateFormat" data-throw-if-not-resolved="false">DateFormat</xref> instances are **not thread-safe** (at least ones provided by JDK): this means that calling code should clone format instance before using it.


    This method is usually only called by framework itself, since there are convenience methods available via <xref uid="com.fasterxml.jackson.databind.DeserializationContext" data-throw-if-not-resolved="false">DeserializationContext</xref> and <xref uid="com.fasterxml.jackson.databind.SerializerProvider" data-throw-if-not-resolved="false">SerializerProvider</xref> that take care of cloning and thread-safe reuse.
  syntax:
    content: public final DateFormat getDateFormat()
    return:
      type: java.text.DateFormat
- uid: com.fasterxml.jackson.databind.cfg.MapperConfig.getDefaultInclusion(java.lang.Class<?>,java.lang.Class<?>)
  id: getDefaultInclusion(java.lang.Class<?>,java.lang.Class<?>)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.cfg.MapperConfig
  langs:
  - java
  name: getDefaultInclusion(Class<?> baseType, Class<?> propertyType)
  nameWithType: MapperConfig<T>.getDefaultInclusion(Class<?> baseType, Class<?> propertyType)
  fullName: com.fasterxml.jackson.databind.cfg.MapperConfig<T>.getDefaultInclusion(Class<?> baseType, Class<?> propertyType)
  overload: com.fasterxml.jackson.databind.cfg.MapperConfig.getDefaultInclusion*
  type: Method
  package: com.fasterxml.jackson.databind.cfg
  summary: >-
    Accessor for default property inclusion to use for serialization, considering possible per-type override for given base type and possible per-type override for given property type.

    NOTE: if no override found, defaults to value returned by <xref uid="com.fasterxml.jackson.databind.cfg.MapperConfig.getDefaultPropertyInclusion()" data-throw-if-not-resolved="false">#getDefaultPropertyInclusion()</xref>.
  syntax:
    content: public abstract JsonInclude.Value getDefaultInclusion(Class<?> baseType, Class<?> propertyType)
    parameters:
    - id: baseType
      type: java.lang.Class<?>
      description: Type of the instance containing the targeted property.
    - id: propertyType
      type: java.lang.Class<?>
      description: Type of the property to look up inclusion setting for.
    return:
      type: com.fasterxml.jackson.annotation.JsonInclude.Value
- uid: com.fasterxml.jackson.databind.cfg.MapperConfig.getDefaultInclusion(java.lang.Class<?>,java.lang.Class<?>,com.fasterxml.jackson.annotation.JsonInclude.Value)
  id: getDefaultInclusion(java.lang.Class<?>,java.lang.Class<?>,com.fasterxml.jackson.annotation.JsonInclude.Value)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.cfg.MapperConfig
  langs:
  - java
  name: getDefaultInclusion(Class<?> baseType, Class<?> propertyType, JsonInclude.Value defaultIncl)
  nameWithType: MapperConfig<T>.getDefaultInclusion(Class<?> baseType, Class<?> propertyType, JsonInclude.Value defaultIncl)
  fullName: com.fasterxml.jackson.databind.cfg.MapperConfig<T>.getDefaultInclusion(Class<?> baseType, Class<?> propertyType, JsonInclude.Value defaultIncl)
  overload: com.fasterxml.jackson.databind.cfg.MapperConfig.getDefaultInclusion*
  type: Method
  package: com.fasterxml.jackson.databind.cfg
  summary: Accessor for default property inclusion to use for serialization, considering possible per-type override for given base type and possible per-type override for given property type; but if none found, returning given `defaultIncl`
  syntax:
    content: public JsonInclude.Value getDefaultInclusion(Class<?> baseType, Class<?> propertyType, JsonInclude.Value defaultIncl)
    parameters:
    - id: baseType
      type: java.lang.Class<?>
      description: Type of the instance containing the targeted property.
    - id: propertyType
      type: java.lang.Class<?>
      description: Type of the property to look up inclusion setting for.
    - id: defaultIncl
      type: com.fasterxml.jackson.annotation.JsonInclude.Value
      description: Inclusion setting to return if no overrides found.
    return:
      type: com.fasterxml.jackson.annotation.JsonInclude.Value
- uid: com.fasterxml.jackson.databind.cfg.MapperConfig.getDefaultMergeable()
  id: getDefaultMergeable()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.cfg.MapperConfig
  langs:
  - java
  name: getDefaultMergeable()
  nameWithType: MapperConfig<T>.getDefaultMergeable()
  fullName: com.fasterxml.jackson.databind.cfg.MapperConfig<T>.getDefaultMergeable()
  overload: com.fasterxml.jackson.databind.cfg.MapperConfig.getDefaultMergeable*
  type: Method
  package: com.fasterxml.jackson.databind.cfg
  summary: Accessor for the baseline merge info used as the global baseline, not considering possible per-type overrides.
  syntax:
    content: public abstract Boolean getDefaultMergeable()
    return:
      type: java.lang.Boolean
      description: Global base settings, if any; `null` if none.
- uid: com.fasterxml.jackson.databind.cfg.MapperConfig.getDefaultMergeable(java.lang.Class<?>)
  id: getDefaultMergeable(java.lang.Class<?>)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.cfg.MapperConfig
  langs:
  - java
  name: getDefaultMergeable(Class<?> baseType)
  nameWithType: MapperConfig<T>.getDefaultMergeable(Class<?> baseType)
  fullName: com.fasterxml.jackson.databind.cfg.MapperConfig<T>.getDefaultMergeable(Class<?> baseType)
  overload: com.fasterxml.jackson.databind.cfg.MapperConfig.getDefaultMergeable*
  type: Method
  package: com.fasterxml.jackson.databind.cfg
  summary: Accessor for the baseline merge info used for given type, including global defaults if no type-specific overrides defined.
  syntax:
    content: public abstract Boolean getDefaultMergeable(Class<?> baseType)
    parameters:
    - id: baseType
      type: java.lang.Class<?>
    return:
      type: java.lang.Boolean
      description: >-
        Type-specific settings (if any); global defaults (same as
            <xref uid="com.fasterxml.jackson.databind.cfg.MapperConfig.getDefaultMergeable()" data-throw-if-not-resolved="false">#getDefaultMergeable()</xref>) otherwise, if any defined; or `null`
            if neither defined
- uid: com.fasterxml.jackson.databind.cfg.MapperConfig.getDefaultPropertyFormat(java.lang.Class<?>)
  id: getDefaultPropertyFormat(java.lang.Class<?>)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.cfg.MapperConfig
  langs:
  - java
  name: getDefaultPropertyFormat(Class<?> baseType)
  nameWithType: MapperConfig<T>.getDefaultPropertyFormat(Class<?> baseType)
  fullName: com.fasterxml.jackson.databind.cfg.MapperConfig<T>.getDefaultPropertyFormat(Class<?> baseType)
  overload: com.fasterxml.jackson.databind.cfg.MapperConfig.getDefaultPropertyFormat*
  type: Method
  package: com.fasterxml.jackson.databind.cfg
  summary: Accessor for default format settings to use for serialization (and, to a degree deserialization), considering baseline settings and per-type defaults for given base type (if any).
  syntax:
    content: public abstract JsonFormat.Value getDefaultPropertyFormat(Class<?> baseType)
    parameters:
    - id: baseType
      type: java.lang.Class<?>
    return:
      type: com.fasterxml.jackson.annotation.JsonFormat.Value
- uid: com.fasterxml.jackson.databind.cfg.MapperConfig.getDefaultPropertyIgnorals(java.lang.Class<?>)
  id: getDefaultPropertyIgnorals(java.lang.Class<?>)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.cfg.MapperConfig
  langs:
  - java
  name: getDefaultPropertyIgnorals(Class<?> baseType)
  nameWithType: MapperConfig<T>.getDefaultPropertyIgnorals(Class<?> baseType)
  fullName: com.fasterxml.jackson.databind.cfg.MapperConfig<T>.getDefaultPropertyIgnorals(Class<?> baseType)
  overload: com.fasterxml.jackson.databind.cfg.MapperConfig.getDefaultPropertyIgnorals*
  type: Method
  package: com.fasterxml.jackson.databind.cfg
  summary: Accessor for default property ignorals to use, if any, for given base type, based on config overrides settings (see <xref uid="com.fasterxml.jackson.databind.cfg.MapperConfig.findConfigOverride(java.lang.Class&lt;?&gt;)" data-throw-if-not-resolved="false">#findConfigOverride(Class)</xref>).
  syntax:
    content: public abstract JsonIgnoreProperties.Value getDefaultPropertyIgnorals(Class<?> baseType)
    parameters:
    - id: baseType
      type: java.lang.Class<?>
    return:
      type: com.fasterxml.jackson.annotation.JsonIgnoreProperties.Value
- uid: com.fasterxml.jackson.databind.cfg.MapperConfig.getDefaultPropertyIgnorals(java.lang.Class<?>,com.fasterxml.jackson.databind.introspect.AnnotatedClass)
  id: getDefaultPropertyIgnorals(java.lang.Class<?>,com.fasterxml.jackson.databind.introspect.AnnotatedClass)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.cfg.MapperConfig
  langs:
  - java
  name: getDefaultPropertyIgnorals(Class<?> baseType, AnnotatedClass actualClass)
  nameWithType: MapperConfig<T>.getDefaultPropertyIgnorals(Class<?> baseType, AnnotatedClass actualClass)
  fullName: com.fasterxml.jackson.databind.cfg.MapperConfig<T>.getDefaultPropertyIgnorals(Class<?> baseType, AnnotatedClass actualClass)
  overload: com.fasterxml.jackson.databind.cfg.MapperConfig.getDefaultPropertyIgnorals*
  type: Method
  package: com.fasterxml.jackson.databind.cfg
  summary: Helper method that may be called to see if there are property ignoral definitions from annotations (via <xref uid="com.fasterxml.jackson.databind.introspect.AnnotatedClass" data-throw-if-not-resolved="false">AnnotatedClass</xref>) or through "config overrides". If both exist, config overrides have precedence over class annotations.
  syntax:
    content: public abstract JsonIgnoreProperties.Value getDefaultPropertyIgnorals(Class<?> baseType, AnnotatedClass actualClass)
    parameters:
    - id: baseType
      type: java.lang.Class<?>
    - id: actualClass
      type: com.fasterxml.jackson.databind.introspect.AnnotatedClass
    return:
      type: com.fasterxml.jackson.annotation.JsonIgnoreProperties.Value
- uid: com.fasterxml.jackson.databind.cfg.MapperConfig.getDefaultPropertyInclusion()
  id: getDefaultPropertyInclusion()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.cfg.MapperConfig
  langs:
  - java
  name: getDefaultPropertyInclusion()
  nameWithType: MapperConfig<T>.getDefaultPropertyInclusion()
  fullName: com.fasterxml.jackson.databind.cfg.MapperConfig<T>.getDefaultPropertyInclusion()
  overload: com.fasterxml.jackson.databind.cfg.MapperConfig.getDefaultPropertyInclusion*
  type: Method
  package: com.fasterxml.jackson.databind.cfg
  summary: Accessor for default property inclusion to use for serialization, used unless overridden by per-type or per-property overrides.
  syntax:
    content: public abstract JsonInclude.Value getDefaultPropertyInclusion()
    return:
      type: com.fasterxml.jackson.annotation.JsonInclude.Value
- uid: com.fasterxml.jackson.databind.cfg.MapperConfig.getDefaultPropertyInclusion(java.lang.Class<?>)
  id: getDefaultPropertyInclusion(java.lang.Class<?>)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.cfg.MapperConfig
  langs:
  - java
  name: getDefaultPropertyInclusion(Class<?> baseType)
  nameWithType: MapperConfig<T>.getDefaultPropertyInclusion(Class<?> baseType)
  fullName: com.fasterxml.jackson.databind.cfg.MapperConfig<T>.getDefaultPropertyInclusion(Class<?> baseType)
  overload: com.fasterxml.jackson.databind.cfg.MapperConfig.getDefaultPropertyInclusion*
  type: Method
  package: com.fasterxml.jackson.databind.cfg
  summary: >-
    Accessor for default property inclusion to use for serialization, considering possible per-type override for given base type.

    NOTE: if no override found, defaults to value returned by <xref uid="com.fasterxml.jackson.databind.cfg.MapperConfig.getDefaultPropertyInclusion()" data-throw-if-not-resolved="false">#getDefaultPropertyInclusion()</xref>.
  syntax:
    content: public abstract JsonInclude.Value getDefaultPropertyInclusion(Class<?> baseType)
    parameters:
    - id: baseType
      type: java.lang.Class<?>
    return:
      type: com.fasterxml.jackson.annotation.JsonInclude.Value
- uid: com.fasterxml.jackson.databind.cfg.MapperConfig.getDefaultPropertyInclusion(java.lang.Class<?>,com.fasterxml.jackson.annotation.JsonInclude.Value)
  id: getDefaultPropertyInclusion(java.lang.Class<?>,com.fasterxml.jackson.annotation.JsonInclude.Value)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.cfg.MapperConfig
  langs:
  - java
  name: getDefaultPropertyInclusion(Class<?> baseType, JsonInclude.Value defaultIncl)
  nameWithType: MapperConfig<T>.getDefaultPropertyInclusion(Class<?> baseType, JsonInclude.Value defaultIncl)
  fullName: com.fasterxml.jackson.databind.cfg.MapperConfig<T>.getDefaultPropertyInclusion(Class<?> baseType, JsonInclude.Value defaultIncl)
  overload: com.fasterxml.jackson.databind.cfg.MapperConfig.getDefaultPropertyInclusion*
  type: Method
  package: com.fasterxml.jackson.databind.cfg
  summary: Accessor for default property inclusion to use for serialization, considering possible per-type override for given base type; but if none found, returning given `defaultIncl`
  syntax:
    content: public JsonInclude.Value getDefaultPropertyInclusion(Class<?> baseType, JsonInclude.Value defaultIncl)
    parameters:
    - id: baseType
      type: java.lang.Class<?>
    - id: defaultIncl
      type: com.fasterxml.jackson.annotation.JsonInclude.Value
      description: Inclusion setting to return if no overrides found.
    return:
      type: com.fasterxml.jackson.annotation.JsonInclude.Value
- uid: com.fasterxml.jackson.databind.cfg.MapperConfig.getDefaultSetterInfo()
  id: getDefaultSetterInfo()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.cfg.MapperConfig
  langs:
  - java
  name: getDefaultSetterInfo()
  nameWithType: MapperConfig<T>.getDefaultSetterInfo()
  fullName: com.fasterxml.jackson.databind.cfg.MapperConfig<T>.getDefaultSetterInfo()
  overload: com.fasterxml.jackson.databind.cfg.MapperConfig.getDefaultSetterInfo*
  type: Method
  package: com.fasterxml.jackson.databind.cfg
  summary: Accessor for the baseline setter info used as the global baseline, not considering possible per-type overrides.
  syntax:
    content: public abstract JsonSetter.Value getDefaultSetterInfo()
    return:
      type: com.fasterxml.jackson.annotation.JsonSetter.Value
      description: Global base settings; never null
- uid: com.fasterxml.jackson.databind.cfg.MapperConfig.getDefaultTyper(com.fasterxml.jackson.databind.JavaType)
  id: getDefaultTyper(com.fasterxml.jackson.databind.JavaType)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.cfg.MapperConfig
  langs:
  - java
  name: getDefaultTyper(JavaType baseType)
  nameWithType: MapperConfig<T>.getDefaultTyper(JavaType baseType)
  fullName: com.fasterxml.jackson.databind.cfg.MapperConfig<T>.getDefaultTyper(JavaType baseType)
  overload: com.fasterxml.jackson.databind.cfg.MapperConfig.getDefaultTyper*
  type: Method
  package: com.fasterxml.jackson.databind.cfg
  summary: Method called to locate a type info handler for types that do not have one explicitly declared via annotations (or other configuration). If such default handler is configured, it is returned; otherwise null is returned.
  syntax:
    content: public final TypeResolverBuilder<?> getDefaultTyper(JavaType baseType)
    parameters:
    - id: baseType
      type: com.fasterxml.jackson.databind.JavaType
    return:
      type: com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder<?>
- uid: com.fasterxml.jackson.databind.cfg.MapperConfig.getDefaultVisibilityChecker()
  id: getDefaultVisibilityChecker()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.cfg.MapperConfig
  langs:
  - java
  name: getDefaultVisibilityChecker()
  nameWithType: MapperConfig<T>.getDefaultVisibilityChecker()
  fullName: com.fasterxml.jackson.databind.cfg.MapperConfig<T>.getDefaultVisibilityChecker()
  overload: com.fasterxml.jackson.databind.cfg.MapperConfig.getDefaultVisibilityChecker*
  type: Method
  package: com.fasterxml.jackson.databind.cfg
  summary: Accessor for object used for determining whether specific property elements (method, constructors, fields) can be auto-detected based on their visibility (access modifiers). Can be changed to allow different minimum visibility levels for auto-detection. Note that this is the global handler; individual types (classes) can further override active checker used (using <xref uid="com.fasterxml.jackson.annotation.JsonAutoDetect" data-throw-if-not-resolved="false">JsonAutoDetect</xref> annotation)
  syntax:
    content: public abstract VisibilityChecker<?> getDefaultVisibilityChecker()
    return:
      type: com.fasterxml.jackson.databind.introspect.VisibilityChecker<?>
- uid: com.fasterxml.jackson.databind.cfg.MapperConfig.getDefaultVisibilityChecker(java.lang.Class<?>,com.fasterxml.jackson.databind.introspect.AnnotatedClass)
  id: getDefaultVisibilityChecker(java.lang.Class<?>,com.fasterxml.jackson.databind.introspect.AnnotatedClass)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.cfg.MapperConfig
  langs:
  - java
  name: getDefaultVisibilityChecker(Class<?> baseType, AnnotatedClass actualClass)
  nameWithType: MapperConfig<T>.getDefaultVisibilityChecker(Class<?> baseType, AnnotatedClass actualClass)
  fullName: com.fasterxml.jackson.databind.cfg.MapperConfig<T>.getDefaultVisibilityChecker(Class<?> baseType, AnnotatedClass actualClass)
  overload: com.fasterxml.jackson.databind.cfg.MapperConfig.getDefaultVisibilityChecker*
  type: Method
  package: com.fasterxml.jackson.databind.cfg
  summary: Accessor for object used for determining whether specific property elements (method, constructors, fields) can be auto-detected based on their visibility (access modifiers). This is based on global defaults (as would be returned by <xref uid="com.fasterxml.jackson.databind.cfg.MapperConfig.getDefaultVisibilityChecker()" data-throw-if-not-resolved="false">#getDefaultVisibilityChecker()</xref>, but then modified by possible class annotation (see <xref uid="com.fasterxml.jackson.annotation.JsonAutoDetect" data-throw-if-not-resolved="false">JsonAutoDetect</xref>) and/or per-type config override (see <xref uid="com.fasterxml.jackson.databind.cfg.ConfigOverride.getVisibility()" data-throw-if-not-resolved="false">ConfigOverride#getVisibility()</xref>).
  syntax:
    content: public abstract VisibilityChecker<?> getDefaultVisibilityChecker(Class<?> baseType, AnnotatedClass actualClass)
    parameters:
    - id: baseType
      type: java.lang.Class<?>
    - id: actualClass
      type: com.fasterxml.jackson.databind.introspect.AnnotatedClass
    return:
      type: com.fasterxml.jackson.databind.introspect.VisibilityChecker<?>
- uid: com.fasterxml.jackson.databind.cfg.MapperConfig.getHandlerInstantiator()
  id: getHandlerInstantiator()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.cfg.MapperConfig
  langs:
  - java
  name: getHandlerInstantiator()
  nameWithType: MapperConfig<T>.getHandlerInstantiator()
  fullName: com.fasterxml.jackson.databind.cfg.MapperConfig<T>.getHandlerInstantiator()
  overload: com.fasterxml.jackson.databind.cfg.MapperConfig.getHandlerInstantiator*
  type: Method
  package: com.fasterxml.jackson.databind.cfg
  syntax:
    content: public final HandlerInstantiator getHandlerInstantiator()
    return:
      type: com.fasterxml.jackson.databind.cfg.HandlerInstantiator
- uid: com.fasterxml.jackson.databind.cfg.MapperConfig.getLocale()
  id: getLocale()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.cfg.MapperConfig
  langs:
  - java
  name: getLocale()
  nameWithType: MapperConfig<T>.getLocale()
  fullName: com.fasterxml.jackson.databind.cfg.MapperConfig<T>.getLocale()
  overload: com.fasterxml.jackson.databind.cfg.MapperConfig.getLocale*
  type: Method
  package: com.fasterxml.jackson.databind.cfg
  summary: Method for accessing the default <xref uid="java.util.Locale" data-throw-if-not-resolved="false">java.util.Locale</xref> to use for formatting, unless overridden by local annotations. Initially set to <xref uid="java.util.Locale.getDefault*" data-throw-if-not-resolved="false">Locale#getDefault()</xref>.
  syntax:
    content: public final Locale getLocale()
    return:
      type: java.util.Locale
- uid: com.fasterxml.jackson.databind.cfg.MapperConfig.getPolymorphicTypeValidator()
  id: getPolymorphicTypeValidator()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.cfg.MapperConfig
  langs:
  - java
  name: getPolymorphicTypeValidator()
  nameWithType: MapperConfig<T>.getPolymorphicTypeValidator()
  fullName: com.fasterxml.jackson.databind.cfg.MapperConfig<T>.getPolymorphicTypeValidator()
  overload: com.fasterxml.jackson.databind.cfg.MapperConfig.getPolymorphicTypeValidator*
  type: Method
  package: com.fasterxml.jackson.databind.cfg
  summary: >-
    Simple accessor for default <xref uid="com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator" data-throw-if-not-resolved="false">PolymorphicTypeValidator</xref> to use for legacy Default Typing methods (`ObjectMapper.enableDefaultTyping()`) and annotation based enabling.


    Since 2.11 will also check <xref uid="com.fasterxml.jackson.databind.MapperFeature.BLOCK_UNSAFE_POLYMORPHIC_BASE_TYPES" data-throw-if-not-resolved="false">MapperFeature#BLOCK_UNSAFE_POLYMORPHIC_BASE_TYPES</xref> to possibly override default to more restrictive implementation, see <xref uid="com.fasterxml.jackson.databind.jsontype.DefaultBaseTypeLimitingValidator" data-throw-if-not-resolved="false">com.fasterxml.jackson.databind.jsontype.DefaultBaseTypeLimitingValidator</xref>).
  syntax:
    content: public PolymorphicTypeValidator getPolymorphicTypeValidator()
    return:
      type: com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator
- uid: com.fasterxml.jackson.databind.cfg.MapperConfig.getPropertyNamingStrategy()
  id: getPropertyNamingStrategy()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.cfg.MapperConfig
  langs:
  - java
  name: getPropertyNamingStrategy()
  nameWithType: MapperConfig<T>.getPropertyNamingStrategy()
  fullName: com.fasterxml.jackson.databind.cfg.MapperConfig<T>.getPropertyNamingStrategy()
  overload: com.fasterxml.jackson.databind.cfg.MapperConfig.getPropertyNamingStrategy*
  type: Method
  package: com.fasterxml.jackson.databind.cfg
  syntax:
    content: public final PropertyNamingStrategy getPropertyNamingStrategy()
    return:
      type: com.fasterxml.jackson.databind.PropertyNamingStrategy
- uid: com.fasterxml.jackson.databind.cfg.MapperConfig.getSubtypeResolver()
  id: getSubtypeResolver()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.cfg.MapperConfig
  langs:
  - java
  name: getSubtypeResolver()
  nameWithType: MapperConfig<T>.getSubtypeResolver()
  fullName: com.fasterxml.jackson.databind.cfg.MapperConfig<T>.getSubtypeResolver()
  overload: com.fasterxml.jackson.databind.cfg.MapperConfig.getSubtypeResolver*
  type: Method
  package: com.fasterxml.jackson.databind.cfg
  syntax:
    content: public abstract SubtypeResolver getSubtypeResolver()
    return:
      type: com.fasterxml.jackson.databind.jsontype.SubtypeResolver
- uid: com.fasterxml.jackson.databind.cfg.MapperConfig.getTimeZone()
  id: getTimeZone()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.cfg.MapperConfig
  langs:
  - java
  name: getTimeZone()
  nameWithType: MapperConfig<T>.getTimeZone()
  fullName: com.fasterxml.jackson.databind.cfg.MapperConfig<T>.getTimeZone()
  overload: com.fasterxml.jackson.databind.cfg.MapperConfig.getTimeZone*
  type: Method
  package: com.fasterxml.jackson.databind.cfg
  summary: Method for accessing the default <xref uid="java.util.TimeZone" data-throw-if-not-resolved="false">java.util.TimeZone</xref> to use for formatting, unless overridden by local annotations. Initially set to <xref uid="java.util.TimeZone.getDefault*" data-throw-if-not-resolved="false">TimeZone#getDefault()</xref>.
  syntax:
    content: public final TimeZone getTimeZone()
    return:
      type: java.util.TimeZone
- uid: com.fasterxml.jackson.databind.cfg.MapperConfig.getTypeFactory()
  id: getTypeFactory()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.cfg.MapperConfig
  langs:
  - java
  name: getTypeFactory()
  nameWithType: MapperConfig<T>.getTypeFactory()
  fullName: com.fasterxml.jackson.databind.cfg.MapperConfig<T>.getTypeFactory()
  overload: com.fasterxml.jackson.databind.cfg.MapperConfig.getTypeFactory*
  type: Method
  package: com.fasterxml.jackson.databind.cfg
  syntax:
    content: public final TypeFactory getTypeFactory()
    return:
      type: com.fasterxml.jackson.databind.type.TypeFactory
- uid: com.fasterxml.jackson.databind.cfg.MapperConfig.hasMapperFeatures(int)
  id: hasMapperFeatures(int)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.cfg.MapperConfig
  langs:
  - java
  name: hasMapperFeatures(int featureMask)
  nameWithType: MapperConfig<T>.hasMapperFeatures(int featureMask)
  fullName: com.fasterxml.jackson.databind.cfg.MapperConfig<T>.hasMapperFeatures(int featureMask)
  overload: com.fasterxml.jackson.databind.cfg.MapperConfig.hasMapperFeatures*
  type: Method
  package: com.fasterxml.jackson.databind.cfg
  summary: "\"Bulk\" access method for checking that all features specified by mask are enabled."
  syntax:
    content: public final boolean hasMapperFeatures(int featureMask)
    parameters:
    - id: featureMask
      type: int
    return:
      type: boolean
- uid: com.fasterxml.jackson.databind.cfg.MapperConfig.introspectClassAnnotations(com.fasterxml.jackson.databind.JavaType)
  id: introspectClassAnnotations(com.fasterxml.jackson.databind.JavaType)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.cfg.MapperConfig
  langs:
  - java
  name: introspectClassAnnotations(JavaType type)
  nameWithType: MapperConfig<T>.introspectClassAnnotations(JavaType type)
  fullName: com.fasterxml.jackson.databind.cfg.MapperConfig<T>.introspectClassAnnotations(JavaType type)
  overload: com.fasterxml.jackson.databind.cfg.MapperConfig.introspectClassAnnotations*
  type: Method
  package: com.fasterxml.jackson.databind.cfg
  summary: 'Accessor for getting bean description that only contains class annotations: useful if no getter/setter/creator information is needed.'
  syntax:
    content: public BeanDescription introspectClassAnnotations(JavaType type)
    parameters:
    - id: type
      type: com.fasterxml.jackson.databind.JavaType
    return:
      type: com.fasterxml.jackson.databind.BeanDescription
- uid: com.fasterxml.jackson.databind.cfg.MapperConfig.introspectClassAnnotations(java.lang.Class<?>)
  id: introspectClassAnnotations(java.lang.Class<?>)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.cfg.MapperConfig
  langs:
  - java
  name: introspectClassAnnotations(Class<?> cls)
  nameWithType: MapperConfig<T>.introspectClassAnnotations(Class<?> cls)
  fullName: com.fasterxml.jackson.databind.cfg.MapperConfig<T>.introspectClassAnnotations(Class<?> cls)
  overload: com.fasterxml.jackson.databind.cfg.MapperConfig.introspectClassAnnotations*
  type: Method
  package: com.fasterxml.jackson.databind.cfg
  summary: 'Accessor for getting bean description that only contains class annotations: useful if no getter/setter/creator information is needed.'
  syntax:
    content: public BeanDescription introspectClassAnnotations(Class<?> cls)
    parameters:
    - id: cls
      type: java.lang.Class<?>
    return:
      type: com.fasterxml.jackson.databind.BeanDescription
- uid: com.fasterxml.jackson.databind.cfg.MapperConfig.introspectDirectClassAnnotations(com.fasterxml.jackson.databind.JavaType)
  id: introspectDirectClassAnnotations(com.fasterxml.jackson.databind.JavaType)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.cfg.MapperConfig
  langs:
  - java
  name: introspectDirectClassAnnotations(JavaType type)
  nameWithType: MapperConfig<T>.introspectDirectClassAnnotations(JavaType type)
  fullName: com.fasterxml.jackson.databind.cfg.MapperConfig<T>.introspectDirectClassAnnotations(JavaType type)
  overload: com.fasterxml.jackson.databind.cfg.MapperConfig.introspectDirectClassAnnotations*
  type: Method
  package: com.fasterxml.jackson.databind.cfg
  summary: 'Accessor for getting bean description that only contains immediate class annotations: ones from the class, and its direct mix-in, if any, but not from super types.'
  syntax:
    content: public final BeanDescription introspectDirectClassAnnotations(JavaType type)
    parameters:
    - id: type
      type: com.fasterxml.jackson.databind.JavaType
    return:
      type: com.fasterxml.jackson.databind.BeanDescription
- uid: com.fasterxml.jackson.databind.cfg.MapperConfig.introspectDirectClassAnnotations(java.lang.Class<?>)
  id: introspectDirectClassAnnotations(java.lang.Class<?>)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.cfg.MapperConfig
  langs:
  - java
  name: introspectDirectClassAnnotations(Class<?> cls)
  nameWithType: MapperConfig<T>.introspectDirectClassAnnotations(Class<?> cls)
  fullName: com.fasterxml.jackson.databind.cfg.MapperConfig<T>.introspectDirectClassAnnotations(Class<?> cls)
  overload: com.fasterxml.jackson.databind.cfg.MapperConfig.introspectDirectClassAnnotations*
  type: Method
  package: com.fasterxml.jackson.databind.cfg
  summary: 'Accessor for getting bean description that only contains immediate class annotations: ones from the class, and its direct mix-in, if any, but not from super types.'
  syntax:
    content: public BeanDescription introspectDirectClassAnnotations(Class<?> cls)
    parameters:
    - id: cls
      type: java.lang.Class<?>
    return:
      type: com.fasterxml.jackson.databind.BeanDescription
- uid: com.fasterxml.jackson.databind.cfg.MapperConfig.isAnnotationProcessingEnabled()
  id: isAnnotationProcessingEnabled()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.cfg.MapperConfig
  langs:
  - java
  name: isAnnotationProcessingEnabled()
  nameWithType: MapperConfig<T>.isAnnotationProcessingEnabled()
  fullName: com.fasterxml.jackson.databind.cfg.MapperConfig<T>.isAnnotationProcessingEnabled()
  overload: com.fasterxml.jackson.databind.cfg.MapperConfig.isAnnotationProcessingEnabled*
  type: Method
  package: com.fasterxml.jackson.databind.cfg
  summary: Method for determining whether annotation processing is enabled or not (default settings are typically that it is enabled; must explicitly disable).
  syntax:
    content: public final boolean isAnnotationProcessingEnabled()
    return:
      type: boolean
      description: True if annotation processing is enabled; false if not
- uid: com.fasterxml.jackson.databind.cfg.MapperConfig.isEnabled(com.fasterxml.jackson.databind.MapperFeature)
  id: isEnabled(com.fasterxml.jackson.databind.MapperFeature)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.cfg.MapperConfig
  langs:
  - java
  name: isEnabled(MapperFeature f)
  nameWithType: MapperConfig<T>.isEnabled(MapperFeature f)
  fullName: com.fasterxml.jackson.databind.cfg.MapperConfig<T>.isEnabled(MapperFeature f)
  overload: com.fasterxml.jackson.databind.cfg.MapperConfig.isEnabled*
  type: Method
  package: com.fasterxml.jackson.databind.cfg
  summary: Accessor for simple mapper features (which are shared for serialization, deserialization)
  syntax:
    content: public final boolean isEnabled(MapperFeature f)
    parameters:
    - id: f
      type: com.fasterxml.jackson.databind.MapperFeature
    return:
      type: boolean
- uid: com.fasterxml.jackson.databind.cfg.MapperConfig.shouldSortPropertiesAlphabetically()
  id: shouldSortPropertiesAlphabetically()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.cfg.MapperConfig
  langs:
  - java
  name: shouldSortPropertiesAlphabetically()
  nameWithType: MapperConfig<T>.shouldSortPropertiesAlphabetically()
  fullName: com.fasterxml.jackson.databind.cfg.MapperConfig<T>.shouldSortPropertiesAlphabetically()
  overload: com.fasterxml.jackson.databind.cfg.MapperConfig.shouldSortPropertiesAlphabetically*
  type: Method
  package: com.fasterxml.jackson.databind.cfg
  summary: Accessor for checking whether default settings for property handling indicate that properties should be alphabetically ordered or not.
  syntax:
    content: public final boolean shouldSortPropertiesAlphabetically()
    return:
      type: boolean
- uid: com.fasterxml.jackson.databind.cfg.MapperConfig.typeIdResolverInstance(com.fasterxml.jackson.databind.introspect.Annotated,java.lang.Class<? extends com.fasterxml.jackson.databind.jsontype.TypeIdResolver>)
  id: typeIdResolverInstance(com.fasterxml.jackson.databind.introspect.Annotated,java.lang.Class<? extends com.fasterxml.jackson.databind.jsontype.TypeIdResolver>)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.cfg.MapperConfig
  langs:
  - java
  name: typeIdResolverInstance(Annotated annotated, Class<? extends TypeIdResolver> resolverClass)
  nameWithType: MapperConfig<T>.typeIdResolverInstance(Annotated annotated, Class<? extends TypeIdResolver> resolverClass)
  fullName: com.fasterxml.jackson.databind.cfg.MapperConfig<T>.typeIdResolverInstance(Annotated annotated, Class<? extends TypeIdResolver> resolverClass)
  overload: com.fasterxml.jackson.databind.cfg.MapperConfig.typeIdResolverInstance*
  type: Method
  package: com.fasterxml.jackson.databind.cfg
  summary: Method that can be called to obtain an instance of `TypeIdResolver` of specified type.
  syntax:
    content: public TypeIdResolver typeIdResolverInstance(Annotated annotated, Class<? extends TypeIdResolver> resolverClass)
    parameters:
    - id: annotated
      type: com.fasterxml.jackson.databind.introspect.Annotated
    - id: resolverClass
      type: java.lang.Class<? extends com.fasterxml.jackson.databind.jsontype.TypeIdResolver>
    return:
      type: com.fasterxml.jackson.databind.jsontype.TypeIdResolver
- uid: com.fasterxml.jackson.databind.cfg.MapperConfig.typeResolverBuilderInstance(com.fasterxml.jackson.databind.introspect.Annotated,java.lang.Class<? extends com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder<?>>)
  id: typeResolverBuilderInstance(com.fasterxml.jackson.databind.introspect.Annotated,java.lang.Class<? extends com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder<?>>)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.cfg.MapperConfig
  langs:
  - java
  name: typeResolverBuilderInstance(Annotated annotated, Class<? extends TypeResolverBuilder<?>> builderClass)
  nameWithType: MapperConfig<T>.typeResolverBuilderInstance(Annotated annotated, Class<? extends TypeResolverBuilder<?>> builderClass)
  fullName: com.fasterxml.jackson.databind.cfg.MapperConfig<T>.typeResolverBuilderInstance(Annotated annotated, Class<? extends TypeResolverBuilder<?>> builderClass)
  overload: com.fasterxml.jackson.databind.cfg.MapperConfig.typeResolverBuilderInstance*
  type: Method
  package: com.fasterxml.jackson.databind.cfg
  summary: Method that can be called to obtain an instance of `TypeIdResolver` of specified type.
  syntax:
    content: public TypeResolverBuilder<?> typeResolverBuilderInstance(Annotated annotated, Class<? extends TypeResolverBuilder<?>> builderClass)
    parameters:
    - id: annotated
      type: com.fasterxml.jackson.databind.introspect.Annotated
    - id: builderClass
      type: java.lang.Class<? extends com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder<?>>
    return:
      type: com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder<?>
- uid: com.fasterxml.jackson.databind.cfg.MapperConfig.useRootWrapping()
  id: useRootWrapping()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.cfg.MapperConfig
  langs:
  - java
  name: useRootWrapping()
  nameWithType: MapperConfig<T>.useRootWrapping()
  fullName: com.fasterxml.jackson.databind.cfg.MapperConfig<T>.useRootWrapping()
  overload: com.fasterxml.jackson.databind.cfg.MapperConfig.useRootWrapping*
  type: Method
  package: com.fasterxml.jackson.databind.cfg
  summary: Accessor for checking whether configuration indicates that "root wrapping" (use of an extra property/name pair at root level) is expected or not.
  syntax:
    content: public abstract boolean useRootWrapping()
    return:
      type: boolean
- uid: com.fasterxml.jackson.databind.cfg.MapperConfig.with(com.fasterxml.jackson.databind.MapperFeature,boolean)
  id: with(com.fasterxml.jackson.databind.MapperFeature,boolean)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.cfg.MapperConfig
  langs:
  - java
  name: with(MapperFeature feature, boolean state)
  nameWithType: MapperConfig<T>.with(MapperFeature feature, boolean state)
  fullName: com.fasterxml.jackson.databind.cfg.MapperConfig<T>.with(MapperFeature feature, boolean state)
  overload: com.fasterxml.jackson.databind.cfg.MapperConfig.with*
  type: Method
  package: com.fasterxml.jackson.databind.cfg
  syntax:
    content: public abstract T with(MapperFeature feature, boolean state)
    parameters:
    - id: feature
      type: com.fasterxml.jackson.databind.MapperFeature
    - id: state
      type: boolean
    return:
      type: T
- uid: com.fasterxml.jackson.databind.cfg.MapperConfig.with(com.fasterxml.jackson.databind.MapperFeature...)
  id: with(com.fasterxml.jackson.databind.MapperFeature...)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.cfg.MapperConfig
  langs:
  - java
  name: with(MapperFeature[] features)
  nameWithType: MapperConfig<T>.with(MapperFeature[] features)
  fullName: com.fasterxml.jackson.databind.cfg.MapperConfig<T>.with(MapperFeature[] features)
  overload: com.fasterxml.jackson.databind.cfg.MapperConfig.with*
  type: Method
  package: com.fasterxml.jackson.databind.cfg
  summary: Method for constructing and returning a new instance with specified mapper features enabled.
  syntax:
    content: public abstract T with(MapperFeature[] features)
    parameters:
    - id: features
      type: com.fasterxml.jackson.databind.MapperFeature[]
    return:
      type: T
- uid: com.fasterxml.jackson.databind.cfg.MapperConfig.without(com.fasterxml.jackson.databind.MapperFeature...)
  id: without(com.fasterxml.jackson.databind.MapperFeature...)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.cfg.MapperConfig
  langs:
  - java
  name: without(MapperFeature[] features)
  nameWithType: MapperConfig<T>.without(MapperFeature[] features)
  fullName: com.fasterxml.jackson.databind.cfg.MapperConfig<T>.without(MapperFeature[] features)
  overload: com.fasterxml.jackson.databind.cfg.MapperConfig.without*
  type: Method
  package: com.fasterxml.jackson.databind.cfg
  summary: Method for constructing and returning a new instance with specified mapper features disabled.
  syntax:
    content: public abstract T without(MapperFeature[] features)
    parameters:
    - id: features
      type: com.fasterxml.jackson.databind.MapperFeature[]
    return:
      type: T
references:
- uid: com.fasterxml.jackson.databind.cfg.BaseSettings
  name: BaseSettings
  nameWithType: BaseSettings
  fullName: com.fasterxml.jackson.databind.cfg.BaseSettings
- uid: int
  spec.java:
  - uid: int
    name: int
    fullName: int
- uid: com.fasterxml.jackson.databind.cfg.MapperConfig.MapperConfig*
  name: MapperConfig
  nameWithType: MapperConfig<T>.MapperConfig
  fullName: com.fasterxml.jackson.databind.cfg.MapperConfig<T>.MapperConfig
  package: com.fasterxml.jackson.databind.cfg
- uid: com.fasterxml.jackson.databind.cfg.MapperConfig<T>
  spec.java:
  - uid: com.fasterxml.jackson.databind.cfg.MapperConfig
    name: MapperConfig
    fullName: com.fasterxml.jackson.databind.cfg.MapperConfig
  - name: <
    fullName: <
  - uid: T
    name: T
    fullName: T
  - name: '>'
    fullName: '>'
- uid: java.lang.Class<F>
  spec.java:
  - uid: java.lang.Class
    name: Class
    fullName: java.lang.Class
  - name: <
    fullName: <
  - uid: F
    name: F
    fullName: F
  - name: '>'
    fullName: '>'
- uid: com.fasterxml.jackson.databind.cfg.MapperConfig.collectFeatureDefaults*
  name: <F>collectFeatureDefaults
  nameWithType: MapperConfig<T>.<F>collectFeatureDefaults
  fullName: com.fasterxml.jackson.databind.cfg.MapperConfig<T>.<F>collectFeatureDefaults
  package: com.fasterxml.jackson.databind.cfg
- uid: com.fasterxml.jackson.databind.MapperFeature[]
  spec.java:
  - uid: com.fasterxml.jackson.databind.MapperFeature
    name: MapperFeature
    fullName: com.fasterxml.jackson.databind.MapperFeature
  - name: '[]'
    fullName: '[]'
- uid: T
  spec.java:
  - uid: T
    name: T
    fullName: T
- uid: com.fasterxml.jackson.databind.cfg.MapperConfig.with*
  name: with
  nameWithType: MapperConfig<T>.with
  fullName: com.fasterxml.jackson.databind.cfg.MapperConfig<T>.with
  package: com.fasterxml.jackson.databind.cfg
- uid: com.fasterxml.jackson.databind.cfg.MapperConfig.without*
  name: without
  nameWithType: MapperConfig<T>.without
  fullName: com.fasterxml.jackson.databind.cfg.MapperConfig<T>.without
  package: com.fasterxml.jackson.databind.cfg
- uid: com.fasterxml.jackson.databind.MapperFeature
  name: MapperFeature
  nameWithType: MapperFeature
  fullName: com.fasterxml.jackson.databind.MapperFeature
- uid: boolean
  spec.java:
  - uid: boolean
    name: boolean
    fullName: boolean
- uid: com.fasterxml.jackson.databind.cfg.MapperConfig.isEnabled*
  name: isEnabled
  nameWithType: MapperConfig<T>.isEnabled
  fullName: com.fasterxml.jackson.databind.cfg.MapperConfig<T>.isEnabled
  package: com.fasterxml.jackson.databind.cfg
- uid: com.fasterxml.jackson.databind.cfg.MapperConfig.hasMapperFeatures*
  name: hasMapperFeatures
  nameWithType: MapperConfig<T>.hasMapperFeatures
  fullName: com.fasterxml.jackson.databind.cfg.MapperConfig<T>.hasMapperFeatures
  package: com.fasterxml.jackson.databind.cfg
- uid: com.fasterxml.jackson.databind.cfg.MapperConfig.isAnnotationProcessingEnabled*
  name: isAnnotationProcessingEnabled
  nameWithType: MapperConfig<T>.isAnnotationProcessingEnabled
  fullName: com.fasterxml.jackson.databind.cfg.MapperConfig<T>.isAnnotationProcessingEnabled
  package: com.fasterxml.jackson.databind.cfg
- uid: com.fasterxml.jackson.databind.cfg.MapperConfig.canOverrideAccessModifiers*
  name: canOverrideAccessModifiers
  nameWithType: MapperConfig<T>.canOverrideAccessModifiers
  fullName: com.fasterxml.jackson.databind.cfg.MapperConfig<T>.canOverrideAccessModifiers
  package: com.fasterxml.jackson.databind.cfg
- uid: com.fasterxml.jackson.databind.cfg.MapperConfig.shouldSortPropertiesAlphabetically*
  name: shouldSortPropertiesAlphabetically
  nameWithType: MapperConfig<T>.shouldSortPropertiesAlphabetically
  fullName: com.fasterxml.jackson.databind.cfg.MapperConfig<T>.shouldSortPropertiesAlphabetically
  package: com.fasterxml.jackson.databind.cfg
- uid: com.fasterxml.jackson.databind.cfg.MapperConfig.useRootWrapping*
  name: useRootWrapping
  nameWithType: MapperConfig<T>.useRootWrapping
  fullName: com.fasterxml.jackson.databind.cfg.MapperConfig<T>.useRootWrapping
  package: com.fasterxml.jackson.databind.cfg
- uid: java.lang.String
  spec.java:
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
- uid: com.fasterxml.jackson.core.SerializableString
  name: SerializableString
  nameWithType: SerializableString
  fullName: com.fasterxml.jackson.core.SerializableString
- uid: com.fasterxml.jackson.databind.cfg.MapperConfig.compileString*
  name: compileString
  nameWithType: MapperConfig<T>.compileString
  fullName: com.fasterxml.jackson.databind.cfg.MapperConfig<T>.compileString
  package: com.fasterxml.jackson.databind.cfg
- uid: com.fasterxml.jackson.databind.introspect.ClassIntrospector
  name: ClassIntrospector
  nameWithType: ClassIntrospector
  fullName: com.fasterxml.jackson.databind.introspect.ClassIntrospector
- uid: com.fasterxml.jackson.databind.cfg.MapperConfig.getClassIntrospector*
  name: getClassIntrospector
  nameWithType: MapperConfig<T>.getClassIntrospector
  fullName: com.fasterxml.jackson.databind.cfg.MapperConfig<T>.getClassIntrospector
  package: com.fasterxml.jackson.databind.cfg
- uid: com.fasterxml.jackson.databind.AnnotationIntrospector
  name: AnnotationIntrospector
  nameWithType: AnnotationIntrospector
  fullName: com.fasterxml.jackson.databind.AnnotationIntrospector
- uid: com.fasterxml.jackson.databind.cfg.MapperConfig.getAnnotationIntrospector*
  name: getAnnotationIntrospector
  nameWithType: MapperConfig<T>.getAnnotationIntrospector
  fullName: com.fasterxml.jackson.databind.cfg.MapperConfig<T>.getAnnotationIntrospector
  package: com.fasterxml.jackson.databind.cfg
- uid: com.fasterxml.jackson.databind.PropertyNamingStrategy
  name: PropertyNamingStrategy
  nameWithType: PropertyNamingStrategy
  fullName: com.fasterxml.jackson.databind.PropertyNamingStrategy
- uid: com.fasterxml.jackson.databind.cfg.MapperConfig.getPropertyNamingStrategy*
  name: getPropertyNamingStrategy
  nameWithType: MapperConfig<T>.getPropertyNamingStrategy
  fullName: com.fasterxml.jackson.databind.cfg.MapperConfig<T>.getPropertyNamingStrategy
  package: com.fasterxml.jackson.databind.cfg
- uid: com.fasterxml.jackson.databind.cfg.HandlerInstantiator
  name: HandlerInstantiator
  nameWithType: HandlerInstantiator
  fullName: com.fasterxml.jackson.databind.cfg.HandlerInstantiator
- uid: com.fasterxml.jackson.databind.cfg.MapperConfig.getHandlerInstantiator*
  name: getHandlerInstantiator
  nameWithType: MapperConfig<T>.getHandlerInstantiator
  fullName: com.fasterxml.jackson.databind.cfg.MapperConfig<T>.getHandlerInstantiator
  package: com.fasterxml.jackson.databind.cfg
- uid: com.fasterxml.jackson.databind.JavaType
  name: JavaType
  nameWithType: JavaType
  fullName: com.fasterxml.jackson.databind.JavaType
- uid: com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder<?>
  spec.java:
  - uid: com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder
    name: TypeResolverBuilder
    fullName: com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder
  - name: <
    fullName: <
  - uid: '?'
    name: '?'
    fullName: '?'
  - name: '>'
    fullName: '>'
- uid: com.fasterxml.jackson.databind.cfg.MapperConfig.getDefaultTyper*
  name: getDefaultTyper
  nameWithType: MapperConfig<T>.getDefaultTyper
  fullName: com.fasterxml.jackson.databind.cfg.MapperConfig<T>.getDefaultTyper
  package: com.fasterxml.jackson.databind.cfg
- uid: com.fasterxml.jackson.databind.jsontype.SubtypeResolver
  name: SubtypeResolver
  nameWithType: SubtypeResolver
  fullName: com.fasterxml.jackson.databind.jsontype.SubtypeResolver
- uid: com.fasterxml.jackson.databind.cfg.MapperConfig.getSubtypeResolver*
  name: getSubtypeResolver
  nameWithType: MapperConfig<T>.getSubtypeResolver
  fullName: com.fasterxml.jackson.databind.cfg.MapperConfig<T>.getSubtypeResolver
  package: com.fasterxml.jackson.databind.cfg
- uid: com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator
  name: PolymorphicTypeValidator
  nameWithType: PolymorphicTypeValidator
  fullName: com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator
- uid: com.fasterxml.jackson.databind.cfg.MapperConfig.getPolymorphicTypeValidator*
  name: getPolymorphicTypeValidator
  nameWithType: MapperConfig<T>.getPolymorphicTypeValidator
  fullName: com.fasterxml.jackson.databind.cfg.MapperConfig<T>.getPolymorphicTypeValidator
  package: com.fasterxml.jackson.databind.cfg
- uid: com.fasterxml.jackson.databind.type.TypeFactory
  name: TypeFactory
  nameWithType: TypeFactory
  fullName: com.fasterxml.jackson.databind.type.TypeFactory
- uid: com.fasterxml.jackson.databind.cfg.MapperConfig.getTypeFactory*
  name: getTypeFactory
  nameWithType: MapperConfig<T>.getTypeFactory
  fullName: com.fasterxml.jackson.databind.cfg.MapperConfig<T>.getTypeFactory
  package: com.fasterxml.jackson.databind.cfg
- uid: java.lang.Class<?>
  spec.java:
  - uid: java.lang.Class
    name: Class
    fullName: java.lang.Class
  - name: <
    fullName: <
  - uid: '?'
    name: '?'
    fullName: '?'
  - name: '>'
    fullName: '>'
- uid: com.fasterxml.jackson.databind.cfg.MapperConfig.constructType*
  name: constructType
  nameWithType: MapperConfig<T>.constructType
  fullName: com.fasterxml.jackson.databind.cfg.MapperConfig<T>.constructType
  package: com.fasterxml.jackson.databind.cfg
- uid: com.fasterxml.jackson.core.type.TypeReference<?>
  spec.java:
  - uid: com.fasterxml.jackson.core.type.TypeReference
    name: TypeReference
    fullName: com.fasterxml.jackson.core.type.TypeReference
  - name: <
    fullName: <
  - uid: '?'
    name: '?'
    fullName: '?'
  - name: '>'
    fullName: '>'
- uid: com.fasterxml.jackson.databind.cfg.MapperConfig.constructSpecializedType*
  name: constructSpecializedType
  nameWithType: MapperConfig<T>.constructSpecializedType
  fullName: com.fasterxml.jackson.databind.cfg.MapperConfig<T>.constructSpecializedType
  package: com.fasterxml.jackson.databind.cfg
- uid: com.fasterxml.jackson.databind.BeanDescription
  name: BeanDescription
  nameWithType: BeanDescription
  fullName: com.fasterxml.jackson.databind.BeanDescription
- uid: com.fasterxml.jackson.databind.cfg.MapperConfig.introspectClassAnnotations*
  name: introspectClassAnnotations
  nameWithType: MapperConfig<T>.introspectClassAnnotations
  fullName: com.fasterxml.jackson.databind.cfg.MapperConfig<T>.introspectClassAnnotations
  package: com.fasterxml.jackson.databind.cfg
- uid: com.fasterxml.jackson.databind.cfg.MapperConfig.introspectDirectClassAnnotations*
  name: introspectDirectClassAnnotations
  nameWithType: MapperConfig<T>.introspectDirectClassAnnotations
  fullName: com.fasterxml.jackson.databind.cfg.MapperConfig<T>.introspectDirectClassAnnotations
  package: com.fasterxml.jackson.databind.cfg
- uid: com.fasterxml.jackson.databind.cfg.ConfigOverride
  name: ConfigOverride
  nameWithType: ConfigOverride
  fullName: com.fasterxml.jackson.databind.cfg.ConfigOverride
- uid: com.fasterxml.jackson.databind.cfg.MapperConfig.findConfigOverride*
  name: findConfigOverride
  nameWithType: MapperConfig<T>.findConfigOverride
  fullName: com.fasterxml.jackson.databind.cfg.MapperConfig<T>.findConfigOverride
  package: com.fasterxml.jackson.databind.cfg
- uid: com.fasterxml.jackson.databind.cfg.MapperConfig.getConfigOverride*
  name: getConfigOverride
  nameWithType: MapperConfig<T>.getConfigOverride
  fullName: com.fasterxml.jackson.databind.cfg.MapperConfig<T>.getConfigOverride
  package: com.fasterxml.jackson.databind.cfg
- uid: com.fasterxml.jackson.annotation.JsonInclude.Value
  name: JsonInclude.Value
  nameWithType: JsonInclude.Value
  fullName: com.fasterxml.jackson.annotation.JsonInclude.Value
- uid: com.fasterxml.jackson.databind.cfg.MapperConfig.getDefaultPropertyInclusion*
  name: getDefaultPropertyInclusion
  nameWithType: MapperConfig<T>.getDefaultPropertyInclusion
  fullName: com.fasterxml.jackson.databind.cfg.MapperConfig<T>.getDefaultPropertyInclusion
  package: com.fasterxml.jackson.databind.cfg
- uid: com.fasterxml.jackson.databind.cfg.MapperConfig.getDefaultInclusion*
  name: getDefaultInclusion
  nameWithType: MapperConfig<T>.getDefaultInclusion
  fullName: com.fasterxml.jackson.databind.cfg.MapperConfig<T>.getDefaultInclusion
  package: com.fasterxml.jackson.databind.cfg
- uid: com.fasterxml.jackson.annotation.JsonFormat.Value
  name: JsonFormat.Value
  nameWithType: JsonFormat.Value
  fullName: com.fasterxml.jackson.annotation.JsonFormat.Value
- uid: com.fasterxml.jackson.databind.cfg.MapperConfig.getDefaultPropertyFormat*
  name: getDefaultPropertyFormat
  nameWithType: MapperConfig<T>.getDefaultPropertyFormat
  fullName: com.fasterxml.jackson.databind.cfg.MapperConfig<T>.getDefaultPropertyFormat
  package: com.fasterxml.jackson.databind.cfg
- uid: com.fasterxml.jackson.annotation.JsonIgnoreProperties.Value
  name: JsonIgnoreProperties.Value
  nameWithType: JsonIgnoreProperties.Value
  fullName: com.fasterxml.jackson.annotation.JsonIgnoreProperties.Value
- uid: com.fasterxml.jackson.databind.cfg.MapperConfig.getDefaultPropertyIgnorals*
  name: getDefaultPropertyIgnorals
  nameWithType: MapperConfig<T>.getDefaultPropertyIgnorals
  fullName: com.fasterxml.jackson.databind.cfg.MapperConfig<T>.getDefaultPropertyIgnorals
  package: com.fasterxml.jackson.databind.cfg
- uid: com.fasterxml.jackson.databind.introspect.AnnotatedClass
  name: AnnotatedClass
  nameWithType: AnnotatedClass
  fullName: com.fasterxml.jackson.databind.introspect.AnnotatedClass
- uid: com.fasterxml.jackson.databind.introspect.VisibilityChecker<?>
  spec.java:
  - uid: com.fasterxml.jackson.databind.introspect.VisibilityChecker
    name: VisibilityChecker
    fullName: com.fasterxml.jackson.databind.introspect.VisibilityChecker
  - name: <
    fullName: <
  - uid: '?'
    name: '?'
    fullName: '?'
  - name: '>'
    fullName: '>'
- uid: com.fasterxml.jackson.databind.cfg.MapperConfig.getDefaultVisibilityChecker*
  name: getDefaultVisibilityChecker
  nameWithType: MapperConfig<T>.getDefaultVisibilityChecker
  fullName: com.fasterxml.jackson.databind.cfg.MapperConfig<T>.getDefaultVisibilityChecker
  package: com.fasterxml.jackson.databind.cfg
- uid: com.fasterxml.jackson.annotation.JsonSetter.Value
  name: JsonSetter.Value
  nameWithType: JsonSetter.Value
  fullName: com.fasterxml.jackson.annotation.JsonSetter.Value
- uid: com.fasterxml.jackson.databind.cfg.MapperConfig.getDefaultSetterInfo*
  name: getDefaultSetterInfo
  nameWithType: MapperConfig<T>.getDefaultSetterInfo
  fullName: com.fasterxml.jackson.databind.cfg.MapperConfig<T>.getDefaultSetterInfo
  package: com.fasterxml.jackson.databind.cfg
- uid: java.lang.Boolean
  spec.java:
  - uid: java.lang.Boolean
    name: Boolean
    fullName: java.lang.Boolean
- uid: com.fasterxml.jackson.databind.cfg.MapperConfig.getDefaultMergeable*
  name: getDefaultMergeable
  nameWithType: MapperConfig<T>.getDefaultMergeable
  fullName: com.fasterxml.jackson.databind.cfg.MapperConfig<T>.getDefaultMergeable
  package: com.fasterxml.jackson.databind.cfg
- uid: java.text.DateFormat
  spec.java:
  - uid: java.text.DateFormat
    name: DateFormat
    fullName: java.text.DateFormat
- uid: com.fasterxml.jackson.databind.cfg.MapperConfig.getDateFormat*
  name: getDateFormat
  nameWithType: MapperConfig<T>.getDateFormat
  fullName: com.fasterxml.jackson.databind.cfg.MapperConfig<T>.getDateFormat
  package: com.fasterxml.jackson.databind.cfg
- uid: java.util.Locale
  spec.java:
  - uid: java.util.Locale
    name: Locale
    fullName: java.util.Locale
- uid: com.fasterxml.jackson.databind.cfg.MapperConfig.getLocale*
  name: getLocale
  nameWithType: MapperConfig<T>.getLocale
  fullName: com.fasterxml.jackson.databind.cfg.MapperConfig<T>.getLocale
  package: com.fasterxml.jackson.databind.cfg
- uid: java.util.TimeZone
  spec.java:
  - uid: java.util.TimeZone
    name: TimeZone
    fullName: java.util.TimeZone
- uid: com.fasterxml.jackson.databind.cfg.MapperConfig.getTimeZone*
  name: getTimeZone
  nameWithType: MapperConfig<T>.getTimeZone
  fullName: com.fasterxml.jackson.databind.cfg.MapperConfig<T>.getTimeZone
  package: com.fasterxml.jackson.databind.cfg
- uid: com.fasterxml.jackson.databind.cfg.MapperConfig.getActiveView*
  name: getActiveView
  nameWithType: MapperConfig<T>.getActiveView
  fullName: com.fasterxml.jackson.databind.cfg.MapperConfig<T>.getActiveView
  package: com.fasterxml.jackson.databind.cfg
- uid: com.fasterxml.jackson.core.Base64Variant
  name: Base64Variant
  nameWithType: Base64Variant
  fullName: com.fasterxml.jackson.core.Base64Variant
- uid: com.fasterxml.jackson.databind.cfg.MapperConfig.getBase64Variant*
  name: getBase64Variant
  nameWithType: MapperConfig<T>.getBase64Variant
  fullName: com.fasterxml.jackson.databind.cfg.MapperConfig<T>.getBase64Variant
  package: com.fasterxml.jackson.databind.cfg
- uid: com.fasterxml.jackson.databind.cfg.ContextAttributes
  name: ContextAttributes
  nameWithType: ContextAttributes
  fullName: com.fasterxml.jackson.databind.cfg.ContextAttributes
- uid: com.fasterxml.jackson.databind.cfg.MapperConfig.getAttributes*
  name: getAttributes
  nameWithType: MapperConfig<T>.getAttributes
  fullName: com.fasterxml.jackson.databind.cfg.MapperConfig<T>.getAttributes
  package: com.fasterxml.jackson.databind.cfg
- uid: com.fasterxml.jackson.databind.PropertyName
  name: PropertyName
  nameWithType: PropertyName
  fullName: com.fasterxml.jackson.databind.PropertyName
- uid: com.fasterxml.jackson.databind.cfg.MapperConfig.findRootName*
  name: findRootName
  nameWithType: MapperConfig<T>.findRootName
  fullName: com.fasterxml.jackson.databind.cfg.MapperConfig<T>.findRootName
  package: com.fasterxml.jackson.databind.cfg
- uid: com.fasterxml.jackson.databind.introspect.Annotated
  name: Annotated
  nameWithType: Annotated
  fullName: com.fasterxml.jackson.databind.introspect.Annotated
- uid: java.lang.Class<? extends com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder<?>>
  spec.java:
  - uid: java.lang.Class
    name: Class
    fullName: java.lang.Class
  - name: <
    fullName: <
  - uid: '? extends com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder'
    name: TypeResolverBuilder
    fullName: '? extends com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder'
  - name: <
    fullName: <
  - uid: '?'
    name: '?'
    fullName: '?'
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
- uid: com.fasterxml.jackson.databind.cfg.MapperConfig.typeResolverBuilderInstance*
  name: typeResolverBuilderInstance
  nameWithType: MapperConfig<T>.typeResolverBuilderInstance
  fullName: com.fasterxml.jackson.databind.cfg.MapperConfig<T>.typeResolverBuilderInstance
  package: com.fasterxml.jackson.databind.cfg
- uid: java.lang.Class<? extends com.fasterxml.jackson.databind.jsontype.TypeIdResolver>
  spec.java:
  - uid: java.lang.Class
    name: Class
    fullName: java.lang.Class
  - name: <
    fullName: <
  - uid: '? extends com.fasterxml.jackson.databind.jsontype.TypeIdResolver'
    name: TypeIdResolver
    fullName: '? extends com.fasterxml.jackson.databind.jsontype.TypeIdResolver'
  - name: '>'
    fullName: '>'
- uid: com.fasterxml.jackson.databind.jsontype.TypeIdResolver
  name: TypeIdResolver
  nameWithType: TypeIdResolver
  fullName: com.fasterxml.jackson.databind.jsontype.TypeIdResolver
- uid: com.fasterxml.jackson.databind.cfg.MapperConfig.typeIdResolverInstance*
  name: typeIdResolverInstance
  nameWithType: MapperConfig<T>.typeIdResolverInstance
  fullName: com.fasterxml.jackson.databind.cfg.MapperConfig<T>.typeIdResolverInstance
  package: com.fasterxml.jackson.databind.cfg
- uid: com.fasterxml.jackson.databind.introspect.ClassIntrospector.MixInResolver
  name: ClassIntrospector.MixInResolver
  nameWithType: ClassIntrospector.MixInResolver
  fullName: com.fasterxml.jackson.databind.introspect.ClassIntrospector.MixInResolver
- uid: java.io.Serializable
  name: Serializable
  nameWithType: Serializable
  fullName: java.io.Serializable
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: java.lang.Object.finalize()
  name: Object.finalize()
  nameWithType: Object.finalize()
  fullName: java.lang.Object.finalize()
- uid: java.lang.Object.clone()
  name: Object.clone()
  nameWithType: Object.clone()
  fullName: java.lang.Object.clone()
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: java.lang.Object.equals(java.lang.Object)
  name: Object.equals(Object)
  nameWithType: Object.equals(Object)
  fullName: java.lang.Object.equals(java.lang.Object)
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.lang.Object.hashCode()
  name: Object.hashCode()
  nameWithType: Object.hashCode()
  fullName: java.lang.Object.hashCode()
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: java.lang.Object.toString()
  name: Object.toString()
  nameWithType: Object.toString()
  fullName: java.lang.Object.toString()
- uid: F
  name: F
  nameWithType: F
  fullName: F
- uid: java.lang.Class
  name: Class
  nameWithType: Class
  fullName: java.lang.Class
- uid: com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder
  name: TypeResolverBuilder
  nameWithType: TypeResolverBuilder
  fullName: com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder
- uid: '?'
  name: '?'
  nameWithType: '?'
  fullName: '?'
- uid: com.fasterxml.jackson.core.type.TypeReference
  name: TypeReference
  nameWithType: TypeReference
  fullName: com.fasterxml.jackson.core.type.TypeReference
- uid: com.fasterxml.jackson.databind.introspect.VisibilityChecker
  name: VisibilityChecker
  nameWithType: VisibilityChecker
  fullName: com.fasterxml.jackson.databind.introspect.VisibilityChecker
- uid: '? extends com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder'
  name: '? extends TypeResolverBuilder'
  nameWithType: '? extends TypeResolverBuilder'
  fullName: '? extends com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder'
- uid: '? extends com.fasterxml.jackson.databind.jsontype.TypeIdResolver'
  name: '? extends TypeIdResolver'
  nameWithType: '? extends TypeIdResolver'
  fullName: '? extends com.fasterxml.jackson.databind.jsontype.TypeIdResolver'
