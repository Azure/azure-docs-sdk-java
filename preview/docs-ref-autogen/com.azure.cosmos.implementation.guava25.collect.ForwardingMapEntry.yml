### YamlMime:JavaType
uid: "com.azure.cosmos.implementation.guava25.collect.ForwardingMapEntry"
fullName: "com.azure.cosmos.implementation.guava25.collect.ForwardingMapEntry<K,V>"
name: "ForwardingMapEntry<K,V>"
nameWithType: "ForwardingMapEntry<K,V>"
summary: "A map entry which forwards all its method calls to another map entry. Subclasses should override one or more methods to modify the behavior of the backing map entry as desired per the [decorator pattern][].\n\n**Warning:** The methods of `ForwardingMapEntry` forward *indiscriminately* to the methods of the delegate. For example, overriding <xref uid=\"com.azure.cosmos.implementation.guava25.collect.ForwardingMapEntry.getValue\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#getValue\"></xref> alone *will not* change the behavior of <xref uid=\"com.azure.cosmos.implementation.guava25.collect.ForwardingMapEntry.equals\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#equals\"></xref>, which can lead to unexpected behavior. In this case, you should override `equals` as well, either providing your own implementation, or delegating to the provided `standardEquals` method.\n\nEach of the `standard` methods, where appropriate, use <xref uid=\"com.azure.cosmos.implementation.guava25.base.Objects.equal*\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Objects#equal\"></xref> to test equality for both keys and values. This may not be the desired behavior for map implementations that use non-standard notions of key equality, such as the entry of a `SortedMap` whose comparator is not consistent with `equals`.\n\nThe `standard` methods are not guaranteed to be thread-safe, even when all of the methods that they depend on are thread-safe.\n\n\n[decorator pattern]: http://en.wikipedia.org/wiki/Decorator_pattern"
inheritances:
- "<xref href=\"java.lang.Object\" data-throw-if-not-resolved=\"False\" />"
- "<xref href=\"com.azure.cosmos.implementation.guava25.collect.ForwardingObject\" data-throw-if-not-resolved=\"False\" />"
inheritedMembers:
- "com.azure.cosmos.implementation.guava25.collect.ForwardingObject.delegate()"
- "com.azure.cosmos.implementation.guava25.collect.ForwardingObject.toString()"
- "java.lang.Object.clone()"
- "java.lang.Object.equals(java.lang.Object)"
- "java.lang.Object.finalize()"
- "java.lang.Object.getClass()"
- "java.lang.Object.hashCode()"
- "java.lang.Object.notify()"
- "java.lang.Object.notifyAll()"
- "java.lang.Object.wait()"
- "java.lang.Object.wait(long)"
- "java.lang.Object.wait(long,int)"
syntax: "public abstract class ForwardingMapEntry<K,V> extends ForwardingObject implements Map.Entry<K,V>"
constructors:
- "com.azure.cosmos.implementation.guava25.collect.ForwardingMapEntry.ForwardingMapEntry()"
methods:
- "com.azure.cosmos.implementation.guava25.collect.ForwardingMapEntry.delegate()"
- "com.azure.cosmos.implementation.guava25.collect.ForwardingMapEntry.equals(java.lang.Object)"
- "com.azure.cosmos.implementation.guava25.collect.ForwardingMapEntry.getKey()"
- "com.azure.cosmos.implementation.guava25.collect.ForwardingMapEntry.getValue()"
- "com.azure.cosmos.implementation.guava25.collect.ForwardingMapEntry.hashCode()"
- "com.azure.cosmos.implementation.guava25.collect.ForwardingMapEntry.setValue(V)"
- "com.azure.cosmos.implementation.guava25.collect.ForwardingMapEntry.standardEquals(java.lang.Object)"
- "com.azure.cosmos.implementation.guava25.collect.ForwardingMapEntry.standardHashCode()"
- "com.azure.cosmos.implementation.guava25.collect.ForwardingMapEntry.standardToString()"
type: "class"
typeParameters:
- name: "K"
- name: "V"
implements:
- "<xref href=\"java.util.Map.Entry?alt=java.util.Map.Entry&text=Entry\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"K?alt=K&text=K\" data-throw-if-not-resolved=\"False\" />,<xref href=\"V?alt=V&text=V\" data-throw-if-not-resolved=\"False\" />&gt;"
metadata: {}
package: "com.azure.cosmos.implementation.guava25.collect"
artifact: com.azure:azure-cosmos:4.4.0-beta.1
