### YamlMime:JavaMember
uid: "com.azure.core.amqp.implementation.ReactorProvider.createReactor*"
fullName: "com.azure.core.amqp.implementation.ReactorProvider.createReactor"
name: "createReactor"
nameWithType: "ReactorProvider.createReactor"
members:
- uid: "com.azure.core.amqp.implementation.ReactorProvider.createReactor(java.lang.String,int)"
  fullName: "com.azure.core.amqp.implementation.ReactorProvider.createReactor(String connectionId, int maxFrameSize)"
  name: "createReactor(String connectionId, int maxFrameSize)"
  nameWithType: "ReactorProvider.createReactor(String connectionId, int maxFrameSize)"
  summary: "Creates a reactor and replaces the existing instance of it."
  parameters:
  - description: "Identifier for Reactor."
    name: "connectionId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - name: "maxFrameSize"
    type: "<xref href=\"int?alt=int&text=int\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Reactor createReactor(String connectionId, int maxFrameSize)"
  exceptions:
  - description: "If the service could not create a Reactor instance."
    type: "<xref href=\"java.io.IOException?alt=java.io.IOException&text=IOException\" data-throw-if-not-resolved=\"False\" />"
  returns:
    description: "The newly created reactor instance."
    type: "<xref href=\"org.apache.qpid.proton.reactor.Reactor?alt=org.apache.qpid.proton.reactor.Reactor&text=Reactor\" data-throw-if-not-resolved=\"False\" />"
type: "method"
metadata: {}
package: "com.azure.core.amqp.implementation"
artifact: com.azure:azure-core-amqp:1.7.0-beta.2
