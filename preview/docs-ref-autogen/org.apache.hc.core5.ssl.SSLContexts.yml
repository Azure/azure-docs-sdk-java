### YamlMime:JavaType
uid: "org.apache.hc.core5.ssl.SSLContexts"
fullName: "org.apache.hc.core5.ssl.SSLContexts"
name: "SSLContexts"
nameWithType: "SSLContexts"
summary: "<xref uid=\"javax.net.ssl.SSLContext\" data-throw-if-not-resolved=\"false\" data-raw-source=\"javax.net.ssl.SSLContext\"></xref> factory methods.\n\nPlease note: the default Oracle JSSE implementation of <xref uid=\"javax.net.ssl.SSLContext.init*\" data-throw-if-not-resolved=\"false\" data-raw-source=\"SSLContext#init(KeyManager[], TrustManager[], SecureRandom)\"></xref> accepts multiple key and trust managers, however only only first matching type is ever used. See for example: [ SSLContext.html\\#init ][SSLContext.html_init]\n\n\n[SSLContext.html_init]: http://docs.oracle.com/javase/7/docs/api/javax/net/ssl/SSLContext.html#init%28javax.net.ssl.KeyManager[],%20javax.net.ssl.TrustManager[],%20java.security.SecureRandom%29"
inheritances:
- "<xref href=\"java.lang.Object\" data-throw-if-not-resolved=\"False\" />"
inheritedMembers:
- "java.lang.Object.clone()"
- "java.lang.Object.equals(java.lang.Object)"
- "java.lang.Object.finalize()"
- "java.lang.Object.getClass()"
- "java.lang.Object.hashCode()"
- "java.lang.Object.notify()"
- "java.lang.Object.notifyAll()"
- "java.lang.Object.toString()"
- "java.lang.Object.wait()"
- "java.lang.Object.wait(long)"
- "java.lang.Object.wait(long,int)"
syntax: "public final class SSLContexts"
methods:
- "org.apache.hc.core5.ssl.SSLContexts.createDefault()"
- "org.apache.hc.core5.ssl.SSLContexts.createSystemDefault()"
- "org.apache.hc.core5.ssl.SSLContexts.custom()"
type: "class"
metadata: {}
package: "org.apache.hc.core5.ssl"
artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
