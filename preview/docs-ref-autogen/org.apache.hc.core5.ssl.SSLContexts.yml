### YamlMime:ManagedReference
items:
- uid: org.apache.hc.core5.ssl.SSLContexts
  id: SSLContexts
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.apache.hc.core5.ssl
  children:
  - org.apache.hc.core5.ssl.SSLContexts.createDefault()
  - org.apache.hc.core5.ssl.SSLContexts.createSystemDefault()
  - org.apache.hc.core5.ssl.SSLContexts.custom()
  langs:
  - java
  name: SSLContexts
  nameWithType: SSLContexts
  fullName: org.apache.hc.core5.ssl.SSLContexts
  type: Class
  package: org.apache.hc.core5.ssl
  summary: >-
    <xref uid="javax.net.ssl.SSLContext" data-throw-if-not-resolved="false">javax.net.ssl.SSLContext</xref> factory methods.


    Please note: the default Oracle JSSE implementation of <xref uid="javax.net.ssl.SSLContext.init*" data-throw-if-not-resolved="false">SSLContext#init(KeyManager[], TrustManager[], SecureRandom)</xref> accepts multiple key and trust managers, however only only first matching type is ever used. See for example: [ SSLContext.html\#init ][SSLContext.html_init]



    [SSLContext.html_init]: http://docs.oracle.com/javase/7/docs/api/javax/net/ssl/SSLContext.html#init%28javax.net.ssl.KeyManager[],%20javax.net.ssl.TrustManager[],%20java.security.SecureRandom%29
  syntax:
    content: public final class SSLContexts
  inheritance:
  - java.lang.Object
  inheritedMembers:
  - java.lang.Object.clone()
  - java.lang.Object.equals(java.lang.Object)
  - java.lang.Object.finalize()
  - java.lang.Object.getClass()
  - java.lang.Object.hashCode()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.toString()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
- uid: org.apache.hc.core5.ssl.SSLContexts.SSLContexts()
  id: SSLContexts()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.apache.hc.core5.ssl.SSLContexts
  langs:
  - java
  name: SSLContexts()
  nameWithType: SSLContexts.SSLContexts()
  fullName: org.apache.hc.core5.ssl.SSLContexts.SSLContexts()
  overload: org.apache.hc.core5.ssl.SSLContexts.SSLContexts*
  type: Constructor
  package: org.apache.hc.core5.ssl
  syntax:
    content: private SSLContexts()
- uid: org.apache.hc.core5.ssl.SSLContexts.createDefault()
  id: createDefault()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.apache.hc.core5.ssl.SSLContexts
  langs:
  - java
  name: createDefault()
  nameWithType: SSLContexts.createDefault()
  fullName: org.apache.hc.core5.ssl.SSLContexts.createDefault()
  overload: org.apache.hc.core5.ssl.SSLContexts.createDefault*
  type: Method
  package: org.apache.hc.core5.ssl
  summary: Creates default factory based on the standard JSSE trust material (`cacerts` file in the security properties directory). System properties are not taken into consideration.
  syntax:
    content: public static SSLContext createDefault()
    return:
      type: javax.net.ssl.SSLContext
      description: the default SSL socket factory
  exceptions:
  - type: org.apache.hc.core5.ssl.SSLInitializationException
    description: >-
      if NoSuchAlgorithmException or KeyManagementException
       are thrown when invoking <xref uid="SSLContext#getInstance(String)" data-throw-if-not-resolved="false">SSLContext#getInstance(String)</xref>
- uid: org.apache.hc.core5.ssl.SSLContexts.createSystemDefault()
  id: createSystemDefault()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.apache.hc.core5.ssl.SSLContexts
  langs:
  - java
  name: createSystemDefault()
  nameWithType: SSLContexts.createSystemDefault()
  fullName: org.apache.hc.core5.ssl.SSLContexts.createSystemDefault()
  overload: org.apache.hc.core5.ssl.SSLContexts.createSystemDefault*
  type: Method
  package: org.apache.hc.core5.ssl
  summary: Creates default SSL context based on system properties. This method obtains default SSL context by calling `SSLContext.getInstance("Default")`. Please note that `Default` algorithm is supported as of Java 6. This method will fall back onto <xref uid="org.apache.hc.core5.ssl.SSLContexts.createDefault()" data-throw-if-not-resolved="false">#createDefault()</xref> when `Default` algorithm is not available.
  syntax:
    content: public static SSLContext createSystemDefault()
    return:
      type: javax.net.ssl.SSLContext
      description: default system SSL context
  exceptions:
  - type: org.apache.hc.core5.ssl.SSLInitializationException
    description: if <xref uid="#createDefault()" data-throw-if-not-resolved="false">#createDefault()</xref> throws it
- uid: org.apache.hc.core5.ssl.SSLContexts.custom()
  id: custom()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.apache.hc.core5.ssl.SSLContexts
  langs:
  - java
  name: custom()
  nameWithType: SSLContexts.custom()
  fullName: org.apache.hc.core5.ssl.SSLContexts.custom()
  overload: org.apache.hc.core5.ssl.SSLContexts.custom*
  type: Method
  package: org.apache.hc.core5.ssl
  summary: Creates custom SSL context.
  syntax:
    content: public static SSLContextBuilder custom()
    return:
      type: org.apache.hc.core5.ssl.SSLContextBuilder
      description: default system SSL context
references:
- uid: org.apache.hc.core5.ssl.SSLContexts.SSLContexts*
  name: SSLContexts
  nameWithType: SSLContexts.SSLContexts
  fullName: org.apache.hc.core5.ssl.SSLContexts.SSLContexts
  package: org.apache.hc.core5.ssl
- uid: org.apache.hc.core5.ssl.SSLInitializationException
  name: SSLInitializationException
  nameWithType: SSLInitializationException
  fullName: org.apache.hc.core5.ssl.SSLInitializationException
- uid: javax.net.ssl.SSLContext
  spec.java:
  - uid: javax.net.ssl.SSLContext
    name: SSLContext
    fullName: javax.net.ssl.SSLContext
- uid: org.apache.hc.core5.ssl.SSLContexts.createDefault*
  name: createDefault
  nameWithType: SSLContexts.createDefault
  fullName: org.apache.hc.core5.ssl.SSLContexts.createDefault
  package: org.apache.hc.core5.ssl
- uid: org.apache.hc.core5.ssl.SSLContexts.createSystemDefault*
  name: createSystemDefault
  nameWithType: SSLContexts.createSystemDefault
  fullName: org.apache.hc.core5.ssl.SSLContexts.createSystemDefault
  package: org.apache.hc.core5.ssl
- uid: org.apache.hc.core5.ssl.SSLContextBuilder
  name: SSLContextBuilder
  nameWithType: SSLContextBuilder
  fullName: org.apache.hc.core5.ssl.SSLContextBuilder
- uid: org.apache.hc.core5.ssl.SSLContexts.custom*
  name: custom
  nameWithType: SSLContexts.custom
  fullName: org.apache.hc.core5.ssl.SSLContexts.custom
  package: org.apache.hc.core5.ssl
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: java.lang.Object.finalize()
  name: Object.finalize()
  nameWithType: Object.finalize()
  fullName: java.lang.Object.finalize()
- uid: java.lang.Object.clone()
  name: Object.clone()
  nameWithType: Object.clone()
  fullName: java.lang.Object.clone()
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: java.lang.Object.equals(java.lang.Object)
  name: Object.equals(Object)
  nameWithType: Object.equals(Object)
  fullName: java.lang.Object.equals(java.lang.Object)
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.lang.Object.hashCode()
  name: Object.hashCode()
  nameWithType: Object.hashCode()
  fullName: java.lang.Object.hashCode()
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: java.lang.Object.toString()
  name: Object.toString()
  nameWithType: Object.toString()
  fullName: java.lang.Object.toString()
