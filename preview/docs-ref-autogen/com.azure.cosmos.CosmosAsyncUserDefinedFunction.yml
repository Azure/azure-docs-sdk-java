### YamlMime:ManagedReference
items:
- uid: "com.azure.cosmos.CosmosAsyncUserDefinedFunction"
  id: "CosmosAsyncUserDefinedFunction"
  parent: "com.azure.cosmos"
  children:
  - "com.azure.cosmos.CosmosAsyncUserDefinedFunction.CosmosAsyncUserDefinedFunction(java.lang.String,com.azure.cosmos.CosmosAsyncContainer)"
  - "com.azure.cosmos.CosmosAsyncUserDefinedFunction.delete()"
  - "com.azure.cosmos.CosmosAsyncUserDefinedFunction.getId()"
  - "com.azure.cosmos.CosmosAsyncUserDefinedFunction.getLink()"
  - "com.azure.cosmos.CosmosAsyncUserDefinedFunction.getParentLink()"
  - "com.azure.cosmos.CosmosAsyncUserDefinedFunction.getURIPathSegment()"
  - "com.azure.cosmos.CosmosAsyncUserDefinedFunction.read()"
  - "com.azure.cosmos.CosmosAsyncUserDefinedFunction.replace(com.azure.cosmos.models.CosmosUserDefinedFunctionProperties)"
  - "com.azure.cosmos.CosmosAsyncUserDefinedFunction.setId(java.lang.String)"
  langs:
  - "java"
  name: "CosmosAsyncUserDefinedFunction"
  nameWithType: "CosmosAsyncUserDefinedFunction"
  fullName: "com.azure.cosmos.CosmosAsyncUserDefinedFunction"
  type: "Class"
  package: "com.azure.cosmos"
  summary: "The type Cosmos async user defined function."
  syntax:
    content: "public class CosmosAsyncUserDefinedFunction"
  inheritance:
  - "java.lang.Object"
  inheritedMembers:
  - "java.lang.Object.clone()"
  - "java.lang.Object.equals(java.lang.Object)"
  - "java.lang.Object.finalize()"
  - "java.lang.Object.getClass()"
  - "java.lang.Object.hashCode()"
  - "java.lang.Object.notify()"
  - "java.lang.Object.notifyAll()"
  - "java.lang.Object.toString()"
  - "java.lang.Object.wait()"
  - "java.lang.Object.wait(long)"
  - "java.lang.Object.wait(long,int)"
- uid: "com.azure.cosmos.CosmosAsyncUserDefinedFunction.CosmosAsyncUserDefinedFunction(java.lang.String,com.azure.cosmos.CosmosAsyncContainer)"
  id: "CosmosAsyncUserDefinedFunction(java.lang.String,com.azure.cosmos.CosmosAsyncContainer)"
  parent: "com.azure.cosmos.CosmosAsyncUserDefinedFunction"
  langs:
  - "java"
  name: "CosmosAsyncUserDefinedFunction(String id, CosmosAsyncContainer container)"
  nameWithType: "CosmosAsyncUserDefinedFunction.CosmosAsyncUserDefinedFunction(String id, CosmosAsyncContainer container)"
  fullName: "com.azure.cosmos.CosmosAsyncUserDefinedFunction.CosmosAsyncUserDefinedFunction(String id, CosmosAsyncContainer container)"
  overload: "com.azure.cosmos.CosmosAsyncUserDefinedFunction.CosmosAsyncUserDefinedFunction*"
  type: "Constructor"
  package: "com.azure.cosmos"
  syntax:
    content: " CosmosAsyncUserDefinedFunction(String id, CosmosAsyncContainer container)"
    parameters:
    - id: "id"
      type: "java.lang.String"
    - id: "container"
      type: "com.azure.cosmos.CosmosAsyncContainer"
- uid: "com.azure.cosmos.CosmosAsyncUserDefinedFunction.delete()"
  id: "delete()"
  parent: "com.azure.cosmos.CosmosAsyncUserDefinedFunction"
  langs:
  - "java"
  name: "delete()"
  nameWithType: "CosmosAsyncUserDefinedFunction.delete()"
  fullName: "com.azure.cosmos.CosmosAsyncUserDefinedFunction.delete()"
  overload: "com.azure.cosmos.CosmosAsyncUserDefinedFunction.delete*"
  type: "Method"
  package: "com.azure.cosmos"
  summary: "Deletes a cosmos user defined function.\n\nAfter subscription the operation will be performed. The <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\">Mono</xref> upon successful completion will contain a single resource response for the deleted user defined function. In case of failure the <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\">Mono</xref> will error."
  syntax:
    content: "public Mono<CosmosAsyncUserDefinedFunctionResponse> delete()"
    return:
      type: "reactor.core.publisher.Mono<com.azure.cosmos.models.CosmosAsyncUserDefinedFunctionResponse>"
      description: "an <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\">Mono</xref> containing the single resource response for the deleted cosmos user defined function or\n an error."
- uid: "com.azure.cosmos.CosmosAsyncUserDefinedFunction.getId()"
  id: "getId()"
  parent: "com.azure.cosmos.CosmosAsyncUserDefinedFunction"
  langs:
  - "java"
  name: "getId()"
  nameWithType: "CosmosAsyncUserDefinedFunction.getId()"
  fullName: "com.azure.cosmos.CosmosAsyncUserDefinedFunction.getId()"
  overload: "com.azure.cosmos.CosmosAsyncUserDefinedFunction.getId*"
  type: "Method"
  package: "com.azure.cosmos"
  summary: "Get the id of the <xref uid=\"com.azure.cosmos.CosmosAsyncUserDefinedFunction\" data-throw-if-not-resolved=\"false\">CosmosAsyncUserDefinedFunction</xref>"
  syntax:
    content: "public String getId()"
    return:
      type: "java.lang.String"
      description: "the id of the <xref uid=\"com.azure.cosmos.CosmosAsyncUserDefinedFunction\" data-throw-if-not-resolved=\"false\">CosmosAsyncUserDefinedFunction</xref>"
- uid: "com.azure.cosmos.CosmosAsyncUserDefinedFunction.getLink()"
  id: "getLink()"
  parent: "com.azure.cosmos.CosmosAsyncUserDefinedFunction"
  langs:
  - "java"
  name: "getLink()"
  nameWithType: "CosmosAsyncUserDefinedFunction.getLink()"
  fullName: "com.azure.cosmos.CosmosAsyncUserDefinedFunction.getLink()"
  overload: "com.azure.cosmos.CosmosAsyncUserDefinedFunction.getLink*"
  type: "Method"
  package: "com.azure.cosmos"
  syntax:
    content: " String getLink()"
    return:
      type: "java.lang.String"
- uid: "com.azure.cosmos.CosmosAsyncUserDefinedFunction.getParentLink()"
  id: "getParentLink()"
  parent: "com.azure.cosmos.CosmosAsyncUserDefinedFunction"
  langs:
  - "java"
  name: "getParentLink()"
  nameWithType: "CosmosAsyncUserDefinedFunction.getParentLink()"
  fullName: "com.azure.cosmos.CosmosAsyncUserDefinedFunction.getParentLink()"
  overload: "com.azure.cosmos.CosmosAsyncUserDefinedFunction.getParentLink*"
  type: "Method"
  package: "com.azure.cosmos"
  syntax:
    content: " String getParentLink()"
    return:
      type: "java.lang.String"
- uid: "com.azure.cosmos.CosmosAsyncUserDefinedFunction.getURIPathSegment()"
  id: "getURIPathSegment()"
  parent: "com.azure.cosmos.CosmosAsyncUserDefinedFunction"
  langs:
  - "java"
  name: "getURIPathSegment()"
  nameWithType: "CosmosAsyncUserDefinedFunction.getURIPathSegment()"
  fullName: "com.azure.cosmos.CosmosAsyncUserDefinedFunction.getURIPathSegment()"
  overload: "com.azure.cosmos.CosmosAsyncUserDefinedFunction.getURIPathSegment*"
  type: "Method"
  package: "com.azure.cosmos"
  syntax:
    content: " String getURIPathSegment()"
    return:
      type: "java.lang.String"
- uid: "com.azure.cosmos.CosmosAsyncUserDefinedFunction.read()"
  id: "read()"
  parent: "com.azure.cosmos.CosmosAsyncUserDefinedFunction"
  langs:
  - "java"
  name: "read()"
  nameWithType: "CosmosAsyncUserDefinedFunction.read()"
  fullName: "com.azure.cosmos.CosmosAsyncUserDefinedFunction.read()"
  overload: "com.azure.cosmos.CosmosAsyncUserDefinedFunction.read*"
  type: "Method"
  package: "com.azure.cosmos"
  summary: "Read a user defined function.\n\nAfter subscription the operation will be performed. The <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\">Mono</xref> upon successful completion will contain a single resource response for the read user defined function. In case of failure the <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\">Mono</xref> will error."
  syntax:
    content: "public Mono<CosmosAsyncUserDefinedFunctionResponse> read()"
    return:
      type: "reactor.core.publisher.Mono<com.azure.cosmos.models.CosmosAsyncUserDefinedFunctionResponse>"
      description: "an <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\">Mono</xref> containing the single resource response for the read user defined function or an error."
- uid: "com.azure.cosmos.CosmosAsyncUserDefinedFunction.replace(com.azure.cosmos.models.CosmosUserDefinedFunctionProperties)"
  id: "replace(com.azure.cosmos.models.CosmosUserDefinedFunctionProperties)"
  parent: "com.azure.cosmos.CosmosAsyncUserDefinedFunction"
  langs:
  - "java"
  name: "replace(CosmosUserDefinedFunctionProperties udfSettings)"
  nameWithType: "CosmosAsyncUserDefinedFunction.replace(CosmosUserDefinedFunctionProperties udfSettings)"
  fullName: "com.azure.cosmos.CosmosAsyncUserDefinedFunction.replace(CosmosUserDefinedFunctionProperties udfSettings)"
  overload: "com.azure.cosmos.CosmosAsyncUserDefinedFunction.replace*"
  type: "Method"
  package: "com.azure.cosmos"
  summary: "Replaces a cosmos user defined function.\n\nAfter subscription the operation will be performed. The <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\">Mono</xref> upon successful completion will contain a single resource response with the replaced user defined function. In case of failure the <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\">Mono</xref> will error."
  syntax:
    content: "public Mono<CosmosAsyncUserDefinedFunctionResponse> replace(CosmosUserDefinedFunctionProperties udfSettings)"
    parameters:
    - id: "udfSettings"
      type: "com.azure.cosmos.models.CosmosUserDefinedFunctionProperties"
      description: "the cosmos user defined function properties."
    return:
      type: "reactor.core.publisher.Mono<com.azure.cosmos.models.CosmosAsyncUserDefinedFunctionResponse>"
      description: "an <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\">Mono</xref> containing the single resource response with the replaced cosmos user defined function\n or an error."
- uid: "com.azure.cosmos.CosmosAsyncUserDefinedFunction.setId(java.lang.String)"
  id: "setId(java.lang.String)"
  parent: "com.azure.cosmos.CosmosAsyncUserDefinedFunction"
  langs:
  - "java"
  name: "setId(String id)"
  nameWithType: "CosmosAsyncUserDefinedFunction.setId(String id)"
  fullName: "com.azure.cosmos.CosmosAsyncUserDefinedFunction.setId(String id)"
  overload: "com.azure.cosmos.CosmosAsyncUserDefinedFunction.setId*"
  type: "Method"
  package: "com.azure.cosmos"
  summary: "Set the id of the <xref uid=\"com.azure.cosmos.CosmosAsyncUserDefinedFunction\" data-throw-if-not-resolved=\"false\">CosmosAsyncUserDefinedFunction</xref>"
  syntax:
    content: " CosmosAsyncUserDefinedFunction setId(String id)"
    parameters:
    - id: "id"
      type: "java.lang.String"
      description: "the id of the <xref uid=\"com.azure.cosmos.CosmosAsyncUserDefinedFunction\" data-throw-if-not-resolved=\"false\">CosmosAsyncUserDefinedFunction</xref>"
    return:
      type: "com.azure.cosmos.CosmosAsyncUserDefinedFunction"
      description: "the same <xref uid=\"com.azure.cosmos.CosmosAsyncUserDefinedFunction\" data-throw-if-not-resolved=\"false\">CosmosAsyncUserDefinedFunction</xref> that had the id set"
references:
- uid: "java.lang.String"
  spec.java:
  - uid: "java.lang.String"
    name: "String"
    fullName: "java.lang.String"
- uid: "com.azure.cosmos.CosmosAsyncContainer"
  name: "CosmosAsyncContainer"
  nameWithType: "CosmosAsyncContainer"
  fullName: "com.azure.cosmos.CosmosAsyncContainer"
- uid: "com.azure.cosmos.CosmosAsyncUserDefinedFunction.CosmosAsyncUserDefinedFunction*"
  name: "CosmosAsyncUserDefinedFunction"
  nameWithType: "CosmosAsyncUserDefinedFunction.CosmosAsyncUserDefinedFunction"
  fullName: "com.azure.cosmos.CosmosAsyncUserDefinedFunction.CosmosAsyncUserDefinedFunction"
  package: "com.azure.cosmos"
- uid: "com.azure.cosmos.CosmosAsyncUserDefinedFunction.getId*"
  name: "getId"
  nameWithType: "CosmosAsyncUserDefinedFunction.getId"
  fullName: "com.azure.cosmos.CosmosAsyncUserDefinedFunction.getId"
  package: "com.azure.cosmos"
- uid: "com.azure.cosmos.CosmosAsyncUserDefinedFunction.setId*"
  name: "setId"
  nameWithType: "CosmosAsyncUserDefinedFunction.setId"
  fullName: "com.azure.cosmos.CosmosAsyncUserDefinedFunction.setId"
  package: "com.azure.cosmos"
- uid: "reactor.core.publisher.Mono<com.azure.cosmos.models.CosmosAsyncUserDefinedFunctionResponse>"
  spec.java:
  - uid: "reactor.core.publisher.Mono"
    name: "Mono"
    fullName: "reactor.core.publisher.Mono"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.cosmos.models.CosmosAsyncUserDefinedFunctionResponse"
    name: "CosmosAsyncUserDefinedFunctionResponse"
    fullName: "com.azure.cosmos.models.CosmosAsyncUserDefinedFunctionResponse"
  - name: ">"
    fullName: ">"
- uid: "com.azure.cosmos.CosmosAsyncUserDefinedFunction.read*"
  name: "read"
  nameWithType: "CosmosAsyncUserDefinedFunction.read"
  fullName: "com.azure.cosmos.CosmosAsyncUserDefinedFunction.read"
  package: "com.azure.cosmos"
- uid: "com.azure.cosmos.models.CosmosUserDefinedFunctionProperties"
  name: "CosmosUserDefinedFunctionProperties"
  nameWithType: "CosmosUserDefinedFunctionProperties"
  fullName: "com.azure.cosmos.models.CosmosUserDefinedFunctionProperties"
- uid: "com.azure.cosmos.CosmosAsyncUserDefinedFunction.replace*"
  name: "replace"
  nameWithType: "CosmosAsyncUserDefinedFunction.replace"
  fullName: "com.azure.cosmos.CosmosAsyncUserDefinedFunction.replace"
  package: "com.azure.cosmos"
- uid: "com.azure.cosmos.CosmosAsyncUserDefinedFunction.delete*"
  name: "delete"
  nameWithType: "CosmosAsyncUserDefinedFunction.delete"
  fullName: "com.azure.cosmos.CosmosAsyncUserDefinedFunction.delete"
  package: "com.azure.cosmos"
- uid: "com.azure.cosmos.CosmosAsyncUserDefinedFunction.getURIPathSegment*"
  name: "getURIPathSegment"
  nameWithType: "CosmosAsyncUserDefinedFunction.getURIPathSegment"
  fullName: "com.azure.cosmos.CosmosAsyncUserDefinedFunction.getURIPathSegment"
  package: "com.azure.cosmos"
- uid: "com.azure.cosmos.CosmosAsyncUserDefinedFunction.getParentLink*"
  name: "getParentLink"
  nameWithType: "CosmosAsyncUserDefinedFunction.getParentLink"
  fullName: "com.azure.cosmos.CosmosAsyncUserDefinedFunction.getParentLink"
  package: "com.azure.cosmos"
- uid: "com.azure.cosmos.CosmosAsyncUserDefinedFunction.getLink*"
  name: "getLink"
  nameWithType: "CosmosAsyncUserDefinedFunction.getLink"
  fullName: "com.azure.cosmos.CosmosAsyncUserDefinedFunction.getLink"
  package: "com.azure.cosmos"
- uid: "java.lang.Object.notify()"
  name: "Object.notify()"
  nameWithType: "Object.notify()"
  fullName: "java.lang.Object.notify()"
- uid: "java.lang.Object.wait()"
  name: "Object.wait()"
  nameWithType: "Object.wait()"
  fullName: "java.lang.Object.wait()"
- uid: "java.lang.Object.finalize()"
  name: "Object.finalize()"
  nameWithType: "Object.finalize()"
  fullName: "java.lang.Object.finalize()"
- uid: "java.lang.Object.clone()"
  name: "Object.clone()"
  nameWithType: "Object.clone()"
  fullName: "java.lang.Object.clone()"
- uid: "java.lang.Object.notifyAll()"
  name: "Object.notifyAll()"
  nameWithType: "Object.notifyAll()"
  fullName: "java.lang.Object.notifyAll()"
- uid: "java.lang.Object.equals(java.lang.Object)"
  name: "Object.equals(Object)"
  nameWithType: "Object.equals(Object)"
  fullName: "java.lang.Object.equals(java.lang.Object)"
- uid: "java.lang.Object.getClass()"
  name: "Object.getClass()"
  nameWithType: "Object.getClass()"
  fullName: "java.lang.Object.getClass()"
- uid: "java.lang.Object.wait(long)"
  name: "Object.wait(long)"
  nameWithType: "Object.wait(long)"
  fullName: "java.lang.Object.wait(long)"
- uid: "java.lang.Object.hashCode()"
  name: "Object.hashCode()"
  nameWithType: "Object.hashCode()"
  fullName: "java.lang.Object.hashCode()"
- uid: "java.lang.Object.wait(long,int)"
  name: "Object.wait(long,int)"
  nameWithType: "Object.wait(long,int)"
  fullName: "java.lang.Object.wait(long,int)"
- uid: "java.lang.Object.toString()"
  name: "Object.toString()"
  nameWithType: "Object.toString()"
  fullName: "java.lang.Object.toString()"
- uid: "reactor.core.publisher.Mono"
  name: "Mono"
  nameWithType: "Mono"
  fullName: "reactor.core.publisher.Mono"
- uid: "com.azure.cosmos.models.CosmosAsyncUserDefinedFunctionResponse"
  name: "CosmosAsyncUserDefinedFunctionResponse"
  nameWithType: "CosmosAsyncUserDefinedFunctionResponse"
  fullName: "com.azure.cosmos.models.CosmosAsyncUserDefinedFunctionResponse"
