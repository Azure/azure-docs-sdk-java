### YamlMime:ManagedReference
items:
- uid: com.azure.cosmos.implementation.guava25.base.MoreObjects
  id: MoreObjects
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.base
  children:
  - com.azure.cosmos.implementation.guava25.base.MoreObjects.<T>firstNonNull(T,T)
  - com.azure.cosmos.implementation.guava25.base.MoreObjects.ToStringHelper
  - com.azure.cosmos.implementation.guava25.base.MoreObjects.toStringHelper(java.lang.Class<?>)
  - com.azure.cosmos.implementation.guava25.base.MoreObjects.toStringHelper(java.lang.Object)
  - com.azure.cosmos.implementation.guava25.base.MoreObjects.toStringHelper(java.lang.String)
  langs:
  - java
  name: MoreObjects
  nameWithType: MoreObjects
  fullName: com.azure.cosmos.implementation.guava25.base.MoreObjects
  type: Class
  package: com.azure.cosmos.implementation.guava25.base
  summary: >-
    Helper functions that operate on any `Object`, and are not already provided in <xref uid="" data-throw-if-not-resolved="false">java.util.Objects</xref>.


    See the Guava User Guide on [writing `Object` methods with `MoreObjects`][writing _Object_ methods with _MoreObjects].



    [writing _Object_ methods with _MoreObjects]: https://github.com/google/guava/wiki/CommonObjectUtilitiesExplained
  syntax:
    content: public final class MoreObjects
  inheritance:
  - java.lang.Object
  inheritedMembers:
  - java.lang.Object.clone()
  - java.lang.Object.equals(java.lang.Object)
  - java.lang.Object.finalize()
  - java.lang.Object.getClass()
  - java.lang.Object.hashCode()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.toString()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
- uid: com.azure.cosmos.implementation.guava25.base.MoreObjects.<T>firstNonNull(T,T)
  id: <T>firstNonNull(T,T)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.base.MoreObjects
  langs:
  - java
  name: <T>firstNonNull(T first, T second)
  nameWithType: MoreObjects.<T>firstNonNull(T first, T second)
  fullName: com.azure.cosmos.implementation.guava25.base.MoreObjects.<T>firstNonNull(T first, T second)
  overload: com.azure.cosmos.implementation.guava25.base.MoreObjects.firstNonNull*
  type: Method
  package: com.azure.cosmos.implementation.guava25.base
  summary: >-
    Returns the first of two given parameters that is not `null`, if either is, or otherwise throws a <xref uid="" data-throw-if-not-resolved="false">NullPointerException</xref>.


    To find the first non-null element in an iterable, use `Iterables.find(iterable, Predicates.notNull())`. For varargs, use `Iterables.find(Arrays.asList(a, b, c, ...), Predicates.notNull())`, static importing as necessary.


    **Note:** if `first` is represented as an <xref uid="java.util.Optional" data-throw-if-not-resolved="false">Optional</xref>, this can be accomplished with <xref uid="java.util.Optional.or*" data-throw-if-not-resolved="false">first.or(second)</xref>. That approach also allows for lazy evaluation of the fallback instance, using <xref uid="com.azure.cosmos.implementation.guava25.base.Optional.or(com.azure.cosmos.implementation.guava25.base.Supplier&lt;? extends T&gt;)" data-throw-if-not-resolved="false">first.or(supplier)</xref>.
  syntax:
    content: public static T <T>firstNonNull(T first, T second)
    parameters:
    - id: first
      type: T
    - id: second
      type: T
    return:
      type: T
      description: <code>first</code> if it is non-null; otherwise <code>second</code> if it is non-null
- uid: com.azure.cosmos.implementation.guava25.base.MoreObjects.MoreObjects()
  id: MoreObjects()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.base.MoreObjects
  langs:
  - java
  name: MoreObjects()
  nameWithType: MoreObjects.MoreObjects()
  fullName: com.azure.cosmos.implementation.guava25.base.MoreObjects.MoreObjects()
  overload: com.azure.cosmos.implementation.guava25.base.MoreObjects.MoreObjects*
  type: Constructor
  package: com.azure.cosmos.implementation.guava25.base
  syntax:
    content: private MoreObjects()
- uid: com.azure.cosmos.implementation.guava25.base.MoreObjects.toStringHelper(java.lang.Class<?>)
  id: toStringHelper(java.lang.Class<?>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.base.MoreObjects
  langs:
  - java
  name: toStringHelper(Class<?> clazz)
  nameWithType: MoreObjects.toStringHelper(Class<?> clazz)
  fullName: com.azure.cosmos.implementation.guava25.base.MoreObjects.toStringHelper(Class<?> clazz)
  overload: com.azure.cosmos.implementation.guava25.base.MoreObjects.toStringHelper*
  type: Method
  package: com.azure.cosmos.implementation.guava25.base
  summary: >-
    Creates an instance of <xref uid="" data-throw-if-not-resolved="false">ToStringHelper</xref> in the same manner as <xref uid="com.azure.cosmos.implementation.guava25.base.MoreObjects.toStringHelper(java.lang.Object)" data-throw-if-not-resolved="false">#toStringHelper(Object)</xref>, but using the simple name of `clazz` instead of using an instance's <xref uid="java.lang.Object.getClass()" data-throw-if-not-resolved="false">Object#getClass()</xref>.


    Note that in GWT, class names are often obfuscated.
  syntax:
    content: public static MoreObjects.ToStringHelper toStringHelper(Class<?> clazz)
    parameters:
    - id: clazz
      type: java.lang.Class<?>
      description: the <xref uid="java.lang.Class" data-throw-if-not-resolved="false">Class</xref> of the instance
    return:
      type: com.azure.cosmos.implementation.guava25.base.MoreObjects.ToStringHelper
- uid: com.azure.cosmos.implementation.guava25.base.MoreObjects.toStringHelper(java.lang.Object)
  id: toStringHelper(java.lang.Object)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.base.MoreObjects
  langs:
  - java
  name: toStringHelper(Object self)
  nameWithType: MoreObjects.toStringHelper(Object self)
  fullName: com.azure.cosmos.implementation.guava25.base.MoreObjects.toStringHelper(Object self)
  overload: com.azure.cosmos.implementation.guava25.base.MoreObjects.toStringHelper*
  type: Method
  package: com.azure.cosmos.implementation.guava25.base
  summary: >-
    Creates an instance of <xref uid="" data-throw-if-not-resolved="false">ToStringHelper</xref>.


    This is helpful for implementing <xref uid="java.lang.Object.toString()" data-throw-if-not-resolved="false">Object#toString()</xref>. Specification by example:


    ```java

    // Returns "ClassName{}"
     MoreObjects.toStringHelper(this)
         .toString();

     // Returns "ClassName{x=1}"
     MoreObjects.toStringHelper(this)
         .add("x", 1)
         .toString();

     // Returns "MyObject{x=1}"
     MoreObjects.toStringHelper("MyObject")
         .add("x", 1)
         .toString();

     // Returns "ClassName{x=1, y=foo}"
     MoreObjects.toStringHelper(this)
         .add("x", 1)
         .add("y", "foo")
         .toString();

     // Returns "ClassName{x=1}"
     MoreObjects.toStringHelper(this)
         .omitNullValues()
         .add("x", 1)
         .add("y", null)
         .toString();
    ```


    Note that in GWT, class names are often obfuscated.
  syntax:
    content: public static MoreObjects.ToStringHelper toStringHelper(Object self)
    parameters:
    - id: self
      type: java.lang.Object
      description: >-
        the object to generate the string for (typically <code>this</code>), used only for its
             class name
    return:
      type: com.azure.cosmos.implementation.guava25.base.MoreObjects.ToStringHelper
- uid: com.azure.cosmos.implementation.guava25.base.MoreObjects.toStringHelper(java.lang.String)
  id: toStringHelper(java.lang.String)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.base.MoreObjects
  langs:
  - java
  name: toStringHelper(String className)
  nameWithType: MoreObjects.toStringHelper(String className)
  fullName: com.azure.cosmos.implementation.guava25.base.MoreObjects.toStringHelper(String className)
  overload: com.azure.cosmos.implementation.guava25.base.MoreObjects.toStringHelper*
  type: Method
  package: com.azure.cosmos.implementation.guava25.base
  summary: Creates an instance of <xref uid="" data-throw-if-not-resolved="false">ToStringHelper</xref> in the same manner as <xref uid="com.azure.cosmos.implementation.guava25.base.MoreObjects.toStringHelper(java.lang.Object)" data-throw-if-not-resolved="false">#toStringHelper(Object)</xref>, but using `className` instead of using an instance's <xref uid="java.lang.Object.getClass()" data-throw-if-not-resolved="false">Object#getClass()</xref>.
  syntax:
    content: public static MoreObjects.ToStringHelper toStringHelper(String className)
    parameters:
    - id: className
      type: java.lang.String
      description: the name of the instance type
    return:
      type: com.azure.cosmos.implementation.guava25.base.MoreObjects.ToStringHelper
references:
- uid: com.azure.cosmos.implementation.guava25.base.MoreObjects.MoreObjects*
  name: MoreObjects
  nameWithType: MoreObjects.MoreObjects
  fullName: com.azure.cosmos.implementation.guava25.base.MoreObjects.MoreObjects
  package: com.azure.cosmos.implementation.guava25.base
- uid: T
  spec.java:
  - uid: T
    name: T
    fullName: T
- uid: com.azure.cosmos.implementation.guava25.base.MoreObjects.firstNonNull*
  name: <T>firstNonNull
  nameWithType: MoreObjects.<T>firstNonNull
  fullName: com.azure.cosmos.implementation.guava25.base.MoreObjects.<T>firstNonNull
  package: com.azure.cosmos.implementation.guava25.base
- uid: java.lang.Object
  spec.java:
  - uid: java.lang.Object
    name: Object
    fullName: java.lang.Object
- uid: com.azure.cosmos.implementation.guava25.base.MoreObjects.ToStringHelper
  name: MoreObjects.ToStringHelper
  nameWithType: MoreObjects.ToStringHelper
  fullName: com.azure.cosmos.implementation.guava25.base.MoreObjects.ToStringHelper
- uid: com.azure.cosmos.implementation.guava25.base.MoreObjects.toStringHelper*
  name: toStringHelper
  nameWithType: MoreObjects.toStringHelper
  fullName: com.azure.cosmos.implementation.guava25.base.MoreObjects.toStringHelper
  package: com.azure.cosmos.implementation.guava25.base
- uid: java.lang.Class<?>
  spec.java:
  - uid: java.lang.Class
    name: Class
    fullName: java.lang.Class
  - name: <
    fullName: <
  - uid: '?'
    name: '?'
    fullName: '?'
  - name: '>'
    fullName: '>'
- uid: java.lang.String
  spec.java:
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: java.lang.Object.finalize()
  name: Object.finalize()
  nameWithType: Object.finalize()
  fullName: java.lang.Object.finalize()
- uid: java.lang.Object.clone()
  name: Object.clone()
  nameWithType: Object.clone()
  fullName: java.lang.Object.clone()
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: java.lang.Object.equals(java.lang.Object)
  name: Object.equals(Object)
  nameWithType: Object.equals(Object)
  fullName: java.lang.Object.equals(java.lang.Object)
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.lang.Object.hashCode()
  name: Object.hashCode()
  nameWithType: Object.hashCode()
  fullName: java.lang.Object.hashCode()
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: java.lang.Object.toString()
  name: Object.toString()
  nameWithType: Object.toString()
  fullName: java.lang.Object.toString()
- uid: java.lang.Class
  name: Class
  nameWithType: Class
  fullName: java.lang.Class
- uid: '?'
  name: '?'
  nameWithType: '?'
  fullName: '?'
