### YamlMime:ManagedReference
items:
- uid: com.fasterxml.jackson.databind.MapperFeature
  id: MapperFeature
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind
  children:
  - com.fasterxml.jackson.databind.MapperFeature.ACCEPT_CASE_INSENSITIVE_ENUMS
  - com.fasterxml.jackson.databind.MapperFeature.ACCEPT_CASE_INSENSITIVE_PROPERTIES
  - com.fasterxml.jackson.databind.MapperFeature.ACCEPT_CASE_INSENSITIVE_VALUES
  - com.fasterxml.jackson.databind.MapperFeature.ALLOW_COERCION_OF_SCALARS
  - com.fasterxml.jackson.databind.MapperFeature.ALLOW_EXPLICIT_PROPERTY_RENAMING
  - com.fasterxml.jackson.databind.MapperFeature.ALLOW_FINAL_FIELDS_AS_MUTATORS
  - com.fasterxml.jackson.databind.MapperFeature.AUTO_DETECT_CREATORS
  - com.fasterxml.jackson.databind.MapperFeature.AUTO_DETECT_FIELDS
  - com.fasterxml.jackson.databind.MapperFeature.AUTO_DETECT_GETTERS
  - com.fasterxml.jackson.databind.MapperFeature.AUTO_DETECT_IS_GETTERS
  - com.fasterxml.jackson.databind.MapperFeature.AUTO_DETECT_SETTERS
  - com.fasterxml.jackson.databind.MapperFeature.BLOCK_UNSAFE_POLYMORPHIC_BASE_TYPES
  - com.fasterxml.jackson.databind.MapperFeature.CAN_OVERRIDE_ACCESS_MODIFIERS
  - com.fasterxml.jackson.databind.MapperFeature.DEFAULT_VIEW_INCLUSION
  - com.fasterxml.jackson.databind.MapperFeature.IGNORE_DUPLICATE_MODULE_REGISTRATIONS
  - com.fasterxml.jackson.databind.MapperFeature.IGNORE_MERGE_FOR_UNMERGEABLE
  - com.fasterxml.jackson.databind.MapperFeature.INFER_CREATOR_FROM_CONSTRUCTOR_PROPERTIES
  - com.fasterxml.jackson.databind.MapperFeature.INFER_PROPERTY_MUTATORS
  - com.fasterxml.jackson.databind.MapperFeature.OVERRIDE_PUBLIC_ACCESS_MODIFIERS
  - com.fasterxml.jackson.databind.MapperFeature.PROPAGATE_TRANSIENT_MARKER
  - com.fasterxml.jackson.databind.MapperFeature.REQUIRE_SETTERS_FOR_GETTERS
  - com.fasterxml.jackson.databind.MapperFeature.SORT_PROPERTIES_ALPHABETICALLY
  - com.fasterxml.jackson.databind.MapperFeature.USE_ANNOTATIONS
  - com.fasterxml.jackson.databind.MapperFeature.USE_BASE_TYPE_AS_DEFAULT_IMPL
  - com.fasterxml.jackson.databind.MapperFeature.USE_GETTERS_AS_SETTERS
  - com.fasterxml.jackson.databind.MapperFeature.USE_STATIC_TYPING
  - com.fasterxml.jackson.databind.MapperFeature.USE_STD_BEAN_NAMING
  - com.fasterxml.jackson.databind.MapperFeature.USE_WRAPPER_NAME_AS_PROPERTY_NAME
  - com.fasterxml.jackson.databind.MapperFeature.enabledByDefault()
  - com.fasterxml.jackson.databind.MapperFeature.enabledIn(int)
  - com.fasterxml.jackson.databind.MapperFeature.getMask()
  - com.fasterxml.jackson.databind.MapperFeature.valueOf(java.lang.String)
  - com.fasterxml.jackson.databind.MapperFeature.values()
  langs:
  - java
  name: MapperFeature
  nameWithType: MapperFeature
  fullName: com.fasterxml.jackson.databind.MapperFeature
  type: Enum
  package: com.fasterxml.jackson.databind
  summary: >-
    Enumeration that defines simple on/off features to set for <xref uid="com.fasterxml.jackson.databind.ObjectMapper" data-throw-if-not-resolved="false">ObjectMapper</xref>, and accessible (but not changeable) via <xref uid="com.fasterxml.jackson.databind.ObjectReader" data-throw-if-not-resolved="false">ObjectReader</xref> and <xref uid="com.fasterxml.jackson.databind.ObjectWriter" data-throw-if-not-resolved="false">ObjectWriter</xref> (as well as through various convenience methods through context objects).


    Note that in addition to being only mutable via <xref uid="com.fasterxml.jackson.databind.ObjectMapper" data-throw-if-not-resolved="false">ObjectMapper</xref>, changes only take effect when done **before any serialization or deserialization** calls -- that is, caller must follow "configure-then-use" pattern.
  syntax:
    content: public enum MapperFeature extends Enum<MapperFeature> implements ConfigFeature
  inheritance:
  - java.lang.Object
  - java.lang.Enum
  implements:
  - com.fasterxml.jackson.databind.cfg.ConfigFeature
  inheritedMembers:
  - java.lang.Enum.<T>valueOf(java.lang.Class<T>,java.lang.String)
  - java.lang.Enum.clone()
  - java.lang.Enum.compareTo(E)
  - java.lang.Enum.equals(java.lang.Object)
  - java.lang.Enum.finalize()
  - java.lang.Enum.getDeclaringClass()
  - java.lang.Enum.hashCode()
  - java.lang.Enum.name()
  - java.lang.Enum.ordinal()
  - java.lang.Enum.toString()
  - java.lang.Object.getClass()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
- uid: com.fasterxml.jackson.databind.MapperFeature.ACCEPT_CASE_INSENSITIVE_ENUMS
  id: ACCEPT_CASE_INSENSITIVE_ENUMS
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.MapperFeature
  langs:
  - java
  name: ACCEPT_CASE_INSENSITIVE_ENUMS
  nameWithType: MapperFeature.ACCEPT_CASE_INSENSITIVE_ENUMS
  fullName: com.fasterxml.jackson.databind.MapperFeature.ACCEPT_CASE_INSENSITIVE_ENUMS
  type: Field
  package: com.fasterxml.jackson.databind
  summary: >-
    Feature that determines if Enum deserialization should be case sensitive or not. If enabled, Enum deserialization will ignore case, that is, case of incoming String value and enum id (depending on other settings, either \`name()\`, \`toString()\`, or explicit override) do not need to match.


    Feature is disabled by default.
  syntax:
    content: public static final MapperFeature ACCEPT_CASE_INSENSITIVE_ENUMS
    return:
      type: com.fasterxml.jackson.databind.MapperFeature
- uid: com.fasterxml.jackson.databind.MapperFeature.ACCEPT_CASE_INSENSITIVE_PROPERTIES
  id: ACCEPT_CASE_INSENSITIVE_PROPERTIES
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.MapperFeature
  langs:
  - java
  name: ACCEPT_CASE_INSENSITIVE_PROPERTIES
  nameWithType: MapperFeature.ACCEPT_CASE_INSENSITIVE_PROPERTIES
  fullName: com.fasterxml.jackson.databind.MapperFeature.ACCEPT_CASE_INSENSITIVE_PROPERTIES
  type: Field
  package: com.fasterxml.jackson.databind
  summary: >-
    Feature that will allow for more forgiving deserialization of incoming JSON. If enabled, the bean properties will be matched using their lower-case equivalents, meaning that any case-combination (incoming and matching names are canonicalized by lower-casing) should work.


    Note that there is additional performance overhead since incoming property names need to be lower-cased before comparison, for cases where there are upper-case letters. Overhead for names that are already lower-case should be negligible.


    Feature is disabled by default.
  syntax:
    content: public static final MapperFeature ACCEPT_CASE_INSENSITIVE_PROPERTIES
    return:
      type: com.fasterxml.jackson.databind.MapperFeature
- uid: com.fasterxml.jackson.databind.MapperFeature.ACCEPT_CASE_INSENSITIVE_VALUES
  id: ACCEPT_CASE_INSENSITIVE_VALUES
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.MapperFeature
  langs:
  - java
  name: ACCEPT_CASE_INSENSITIVE_VALUES
  nameWithType: MapperFeature.ACCEPT_CASE_INSENSITIVE_VALUES
  fullName: com.fasterxml.jackson.databind.MapperFeature.ACCEPT_CASE_INSENSITIVE_VALUES
  type: Field
  package: com.fasterxml.jackson.databind
  summary: >-
    Feature that permits parsing some enumerated text-based value types but ignoring the case of the values on deserialization: for example, date/time type deserializers. Support for this feature depends on deserializer implementations using it.


    Note, however, that regular `Enum` types follow <xref uid="com.fasterxml.jackson.databind.MapperFeature.ACCEPT_CASE_INSENSITIVE_ENUMS" data-throw-if-not-resolved="false">#ACCEPT_CASE_INSENSITIVE_ENUMS</xref> setting instead.


    Feature is disabled by default.
  syntax:
    content: public static final MapperFeature ACCEPT_CASE_INSENSITIVE_VALUES
    return:
      type: com.fasterxml.jackson.databind.MapperFeature
- uid: com.fasterxml.jackson.databind.MapperFeature.ALLOW_COERCION_OF_SCALARS
  id: ALLOW_COERCION_OF_SCALARS
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.MapperFeature
  langs:
  - java
  name: ALLOW_COERCION_OF_SCALARS
  nameWithType: MapperFeature.ALLOW_COERCION_OF_SCALARS
  fullName: com.fasterxml.jackson.databind.MapperFeature.ALLOW_COERCION_OF_SCALARS
  type: Field
  package: com.fasterxml.jackson.databind
  summary: >-
    Feature that determines whether coercions from secondary representations are allowed for simple non-textual scalar types: numbers and booleans. This includes \`primitive\` types and their wrappers, but excludes \`java.lang.String\` and date/time types.


    When feature is disabled, only strictly compatible input may be bound: numbers for numbers, boolean values for booleans. When feature is enabled, conversions from JSON String are allowed, as long as textual value matches (for example, String "true" is allowed as equivalent of JSON boolean token \`true\`; or String "1.0" for \`double\`).


    Note that it is possible that other configurability options can override this in closer scope (like on per-type or per-property basis); this is just the global default.


    Feature is enabled by default (for backwards compatibility since this was the default behavior)
  syntax:
    content: public static final MapperFeature ALLOW_COERCION_OF_SCALARS
    return:
      type: com.fasterxml.jackson.databind.MapperFeature
- uid: com.fasterxml.jackson.databind.MapperFeature.ALLOW_EXPLICIT_PROPERTY_RENAMING
  id: ALLOW_EXPLICIT_PROPERTY_RENAMING
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.MapperFeature
  langs:
  - java
  name: ALLOW_EXPLICIT_PROPERTY_RENAMING
  nameWithType: MapperFeature.ALLOW_EXPLICIT_PROPERTY_RENAMING
  fullName: com.fasterxml.jackson.databind.MapperFeature.ALLOW_EXPLICIT_PROPERTY_RENAMING
  type: Field
  package: com.fasterxml.jackson.databind
  summary: >-
    Feature that when enabled will allow explicitly named properties (i.e., fields or methods annotated with <xref uid="com.fasterxml.jackson.annotation.JsonProperty" data-throw-if-not-resolved="false">com.fasterxml.jackson.annotation.JsonProperty</xref>("explicitName")) to be re-named by a <xref uid="com.fasterxml.jackson.databind.PropertyNamingStrategy" data-throw-if-not-resolved="false">PropertyNamingStrategy</xref>, if one is configured.


    Feature is disabled by default.
  syntax:
    content: public static final MapperFeature ALLOW_EXPLICIT_PROPERTY_RENAMING
    return:
      type: com.fasterxml.jackson.databind.MapperFeature
- uid: com.fasterxml.jackson.databind.MapperFeature.ALLOW_FINAL_FIELDS_AS_MUTATORS
  id: ALLOW_FINAL_FIELDS_AS_MUTATORS
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.MapperFeature
  langs:
  - java
  name: ALLOW_FINAL_FIELDS_AS_MUTATORS
  nameWithType: MapperFeature.ALLOW_FINAL_FIELDS_AS_MUTATORS
  fullName: com.fasterxml.jackson.databind.MapperFeature.ALLOW_FINAL_FIELDS_AS_MUTATORS
  type: Field
  package: com.fasterxml.jackson.databind
  summary: >-
    Feature that determines whether member fields declared as 'final' may be auto-detected to be used mutators (used to change value of the logical property) or not. If enabled, 'final' access modifier has no effect, and such fields may be detected according to usual visibility and inference rules; if disabled, such fields are NOT used as mutators except if explicitly annotated for such use.


    Feature is enabled by default, for backwards compatibility reasons.
  syntax:
    content: public static final MapperFeature ALLOW_FINAL_FIELDS_AS_MUTATORS
    return:
      type: com.fasterxml.jackson.databind.MapperFeature
- uid: com.fasterxml.jackson.databind.MapperFeature.AUTO_DETECT_CREATORS
  id: AUTO_DETECT_CREATORS
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.MapperFeature
  langs:
  - java
  name: AUTO_DETECT_CREATORS
  nameWithType: MapperFeature.AUTO_DETECT_CREATORS
  fullName: com.fasterxml.jackson.databind.MapperFeature.AUTO_DETECT_CREATORS
  type: Field
  package: com.fasterxml.jackson.databind
  summary: >-
    Feature that determines whether "creator" methods are automatically detected by consider public constructors, and static single argument methods with name "valueOf". If disabled, only methods explicitly annotated are considered creator methods (except for the no-arg default constructor which is always considered a factory method).


    Note that this feature has lower precedence than per-class annotations, and is only used if there isn't more granular configuration available.


    Feature is enabled by default.
  syntax:
    content: public static final MapperFeature AUTO_DETECT_CREATORS
    return:
      type: com.fasterxml.jackson.databind.MapperFeature
- uid: com.fasterxml.jackson.databind.MapperFeature.AUTO_DETECT_FIELDS
  id: AUTO_DETECT_FIELDS
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.MapperFeature
  langs:
  - java
  name: AUTO_DETECT_FIELDS
  nameWithType: MapperFeature.AUTO_DETECT_FIELDS
  fullName: com.fasterxml.jackson.databind.MapperFeature.AUTO_DETECT_FIELDS
  type: Field
  package: com.fasterxml.jackson.databind
  summary: >-
    Feature that determines whether non-static fields are recognized as properties. If yes, then all public member fields are considered as properties. If disabled, only fields explicitly annotated are considered property fields.


    Note that this feature has lower precedence than per-class annotations, and is only used if there isn't more granular configuration available.


    Feature is enabled by default.
  syntax:
    content: public static final MapperFeature AUTO_DETECT_FIELDS
    return:
      type: com.fasterxml.jackson.databind.MapperFeature
- uid: com.fasterxml.jackson.databind.MapperFeature.AUTO_DETECT_GETTERS
  id: AUTO_DETECT_GETTERS
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.MapperFeature
  langs:
  - java
  name: AUTO_DETECT_GETTERS
  nameWithType: MapperFeature.AUTO_DETECT_GETTERS
  fullName: com.fasterxml.jackson.databind.MapperFeature.AUTO_DETECT_GETTERS
  type: Field
  package: com.fasterxml.jackson.databind
  summary: >-
    Feature that determines whether regular "getter" methods are automatically detected based on standard Bean naming convention or not. If yes, then all public zero-argument methods that start with prefix "get" are considered as getters. If disabled, only methods explicitly annotated are considered getters.


    Note that since version 1.3, this does **NOT** include "is getters" (see <xref uid="com.fasterxml.jackson.databind.MapperFeature.AUTO_DETECT_IS_GETTERS" data-throw-if-not-resolved="false">#AUTO_DETECT_IS_GETTERS</xref> for details)


    Note that this feature has lower precedence than per-class annotations, and is only used if there isn't more granular configuration available.


    Feature is enabled by default.
  syntax:
    content: public static final MapperFeature AUTO_DETECT_GETTERS
    return:
      type: com.fasterxml.jackson.databind.MapperFeature
- uid: com.fasterxml.jackson.databind.MapperFeature.AUTO_DETECT_IS_GETTERS
  id: AUTO_DETECT_IS_GETTERS
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.MapperFeature
  langs:
  - java
  name: AUTO_DETECT_IS_GETTERS
  nameWithType: MapperFeature.AUTO_DETECT_IS_GETTERS
  fullName: com.fasterxml.jackson.databind.MapperFeature.AUTO_DETECT_IS_GETTERS
  type: Field
  package: com.fasterxml.jackson.databind
  summary: >-
    Feature that determines whether "is getter" methods are automatically detected based on standard Bean naming convention or not. If yes, then all public zero-argument methods that start with prefix "is", and whose return type is boolean are considered as "is getters". If disabled, only methods explicitly annotated are considered getters.


    Note that this feature has lower precedence than per-class annotations, and is only used if there isn't more granular configuration available.


    Feature is enabled by default.
  syntax:
    content: public static final MapperFeature AUTO_DETECT_IS_GETTERS
    return:
      type: com.fasterxml.jackson.databind.MapperFeature
- uid: com.fasterxml.jackson.databind.MapperFeature.AUTO_DETECT_SETTERS
  id: AUTO_DETECT_SETTERS
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.MapperFeature
  langs:
  - java
  name: AUTO_DETECT_SETTERS
  nameWithType: MapperFeature.AUTO_DETECT_SETTERS
  fullName: com.fasterxml.jackson.databind.MapperFeature.AUTO_DETECT_SETTERS
  type: Field
  package: com.fasterxml.jackson.databind
  summary: >-
    Feature that determines whether "setter" methods are automatically detected based on standard Bean naming convention or not. If yes, then all public one-argument methods that start with prefix "set" are considered setters. If disabled, only methods explicitly annotated are considered setters.


    Note that this feature has lower precedence than per-class annotations, and is only used if there isn't more granular configuration available.


    Feature is enabled by default.
  syntax:
    content: public static final MapperFeature AUTO_DETECT_SETTERS
    return:
      type: com.fasterxml.jackson.databind.MapperFeature
- uid: com.fasterxml.jackson.databind.MapperFeature.BLOCK_UNSAFE_POLYMORPHIC_BASE_TYPES
  id: BLOCK_UNSAFE_POLYMORPHIC_BASE_TYPES
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.MapperFeature
  langs:
  - java
  name: BLOCK_UNSAFE_POLYMORPHIC_BASE_TYPES
  nameWithType: MapperFeature.BLOCK_UNSAFE_POLYMORPHIC_BASE_TYPES
  fullName: com.fasterxml.jackson.databind.MapperFeature.BLOCK_UNSAFE_POLYMORPHIC_BASE_TYPES
  type: Field
  package: com.fasterxml.jackson.databind
  summary: >-
    Setting that may be enabled to reconfigure **default** <xref uid="com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator" data-throw-if-not-resolved="false">com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator</xref> used by legacy `ObjectMapper.enableDefaultTyping()` methods as well as default used for annotation-based polymorphic handling so that it uses <xref uid="com.fasterxml.jackson.databind.jsontype.DefaultBaseTypeLimitingValidator" data-throw-if-not-resolved="false">com.fasterxml.jackson.databind.jsontype.DefaultBaseTypeLimitingValidator</xref>. This will block use of a set of "unsafe" base types such as <xref uid="java.lang.Object" data-throw-if-not-resolved="false">java.lang.Object</xref> through methods that do not require passing of explicit <xref uid="com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator" data-throw-if-not-resolved="false">com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator</xref>. It is still possible to override one used; this only affects default settings.


    Enabling of this setting is **strongly recommended**.


    Feature is disabled by default in 2.x for backwards compatibility reasons: it will become default setting (and feature likely removed) in 3.0.
  syntax:
    content: public static final MapperFeature BLOCK_UNSAFE_POLYMORPHIC_BASE_TYPES
    return:
      type: com.fasterxml.jackson.databind.MapperFeature
- uid: com.fasterxml.jackson.databind.MapperFeature.CAN_OVERRIDE_ACCESS_MODIFIERS
  id: CAN_OVERRIDE_ACCESS_MODIFIERS
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.MapperFeature
  langs:
  - java
  name: CAN_OVERRIDE_ACCESS_MODIFIERS
  nameWithType: MapperFeature.CAN_OVERRIDE_ACCESS_MODIFIERS
  fullName: com.fasterxml.jackson.databind.MapperFeature.CAN_OVERRIDE_ACCESS_MODIFIERS
  type: Field
  package: com.fasterxml.jackson.databind
  summary: >-
    Feature that determines whether method and field access modifier settings can be overridden when accessing properties. If enabled, method <xref uid="" data-throw-if-not-resolved="false">java.lang.reflect.AccessibleObject#setAccessible</xref> may be called to enable access to otherwise unaccessible objects.


    Note that this setting may have significant performance implications, since access override helps remove costly access checks on each and every Reflection access. If you are considering disabling this feature, be sure to verify performance consequences if usage is performance sensitive. Also note that performance effects vary between Java platforms (JavaSE vs Android, for example), as well as JDK versions: older versions seemed to have more significant performance difference.


    Conversely, on some platforms, it may be necessary to disable this feature as platform does not allow such calls. For example, when developing Applets (or other Java code that runs on tightly restricted sandbox), it may be necessary to disable the feature regardless of performance effects.


    Feature is enabled by default.
  syntax:
    content: public static final MapperFeature CAN_OVERRIDE_ACCESS_MODIFIERS
    return:
      type: com.fasterxml.jackson.databind.MapperFeature
- uid: com.fasterxml.jackson.databind.MapperFeature.DEFAULT_VIEW_INCLUSION
  id: DEFAULT_VIEW_INCLUSION
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.MapperFeature
  langs:
  - java
  name: DEFAULT_VIEW_INCLUSION
  nameWithType: MapperFeature.DEFAULT_VIEW_INCLUSION
  fullName: com.fasterxml.jackson.databind.MapperFeature.DEFAULT_VIEW_INCLUSION
  type: Field
  package: com.fasterxml.jackson.databind
  summary: >-
    Feature that determines whether properties that have no view annotations are included in JSON serialization views (see <xref uid="com.fasterxml.jackson.annotation.JsonView" data-throw-if-not-resolved="false">com.fasterxml.jackson.annotation.JsonView</xref> for more details on JSON Views). If enabled, non-annotated properties will be included; when disabled, they will be excluded. So this feature changes between "opt-in" (feature disabled) and "opt-out" (feature enabled) modes.


    Default value is enabled, meaning that non-annotated properties are included in all views if there is no <xref uid="com.fasterxml.jackson.annotation.JsonView" data-throw-if-not-resolved="false">com.fasterxml.jackson.annotation.JsonView</xref> annotation.


    Feature is enabled by default.
  syntax:
    content: public static final MapperFeature DEFAULT_VIEW_INCLUSION
    return:
      type: com.fasterxml.jackson.databind.MapperFeature
- uid: com.fasterxml.jackson.databind.MapperFeature.IGNORE_DUPLICATE_MODULE_REGISTRATIONS
  id: IGNORE_DUPLICATE_MODULE_REGISTRATIONS
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.MapperFeature
  langs:
  - java
  name: IGNORE_DUPLICATE_MODULE_REGISTRATIONS
  nameWithType: MapperFeature.IGNORE_DUPLICATE_MODULE_REGISTRATIONS
  fullName: com.fasterxml.jackson.databind.MapperFeature.IGNORE_DUPLICATE_MODULE_REGISTRATIONS
  type: Field
  package: com.fasterxml.jackson.databind
  summary: >-
    Feature that determines whether multiple registrations of same module should be ignored or not; if enabled, only the first registration call results in module being called, and possible duplicate calls are silently ignored; if disabled, no checking is done and all registration calls are dispatched to module.


    Definition of "same module" is based on using <xref uid="com.fasterxml.jackson.databind.Module.getTypeId()" data-throw-if-not-resolved="false">Module#getTypeId()</xref>; modules with same non-null `type id` are considered same for purposes of duplicate registration. This also avoids having to keep track of actual module instances; only ids will be kept track of (and only if this feature is enabled).


    Feature is enabled by default.
  syntax:
    content: public static final MapperFeature IGNORE_DUPLICATE_MODULE_REGISTRATIONS
    return:
      type: com.fasterxml.jackson.databind.MapperFeature
- uid: com.fasterxml.jackson.databind.MapperFeature.IGNORE_MERGE_FOR_UNMERGEABLE
  id: IGNORE_MERGE_FOR_UNMERGEABLE
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.MapperFeature
  langs:
  - java
  name: IGNORE_MERGE_FOR_UNMERGEABLE
  nameWithType: MapperFeature.IGNORE_MERGE_FOR_UNMERGEABLE
  fullName: com.fasterxml.jackson.databind.MapperFeature.IGNORE_MERGE_FOR_UNMERGEABLE
  type: Field
  package: com.fasterxml.jackson.databind
  summary: >-
    Setting that determines what happens if an attempt is made to explicitly "merge" value of a property, where value does not support merging; either merging is skipped and new value is created (`true`) or an exception is thrown (false).


    Feature is enabled by default, to allow use of merge defaults even in presence of some unmergeable properties.
  syntax:
    content: public static final MapperFeature IGNORE_MERGE_FOR_UNMERGEABLE
    return:
      type: com.fasterxml.jackson.databind.MapperFeature
- uid: com.fasterxml.jackson.databind.MapperFeature.INFER_CREATOR_FROM_CONSTRUCTOR_PROPERTIES
  id: INFER_CREATOR_FROM_CONSTRUCTOR_PROPERTIES
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.MapperFeature
  langs:
  - java
  name: INFER_CREATOR_FROM_CONSTRUCTOR_PROPERTIES
  nameWithType: MapperFeature.INFER_CREATOR_FROM_CONSTRUCTOR_PROPERTIES
  fullName: com.fasterxml.jackson.databind.MapperFeature.INFER_CREATOR_FROM_CONSTRUCTOR_PROPERTIES
  type: Field
  package: com.fasterxml.jackson.databind
  summary: >-
    Feature that determines handling of `java.beans.ConstructorProperties` annotation: when enabled, it is considered as alias of <xref uid="com.fasterxml.jackson.annotation.JsonCreator" data-throw-if-not-resolved="false">com.fasterxml.jackson.annotation.JsonCreator</xref>, to mean that constructor should be considered a property-based Creator; when disabled, only constructor parameter name information is used, but constructor is NOT considered an explicit Creator (although may be discovered as one using other annotations or heuristics).


    Feature is mostly used to help inter-operability with frameworks like Lombok that may automatically generate `ConstructorProperties` annotation but without necessarily meaning that constructor should be used as Creator for deserialization.


    Feature is enabled by default.
  syntax:
    content: public static final MapperFeature INFER_CREATOR_FROM_CONSTRUCTOR_PROPERTIES
    return:
      type: com.fasterxml.jackson.databind.MapperFeature
- uid: com.fasterxml.jackson.databind.MapperFeature.INFER_PROPERTY_MUTATORS
  id: INFER_PROPERTY_MUTATORS
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.MapperFeature
  langs:
  - java
  name: INFER_PROPERTY_MUTATORS
  nameWithType: MapperFeature.INFER_PROPERTY_MUTATORS
  fullName: com.fasterxml.jackson.databind.MapperFeature.INFER_PROPERTY_MUTATORS
  type: Field
  package: com.fasterxml.jackson.databind
  summary: >-
    Feature that determines whether member mutators (fields and setters) may be "pulled in" even if they are not visible, as long as there is a visible accessor (getter or field) with same name. For example: field "value" may be inferred as mutator, if there is visible or explicitly marked getter "getValue()". If enabled, inferring is enabled; otherwise (disabled) only visible and explicitly annotated accessors are ever used.


    Note that 'getters' are never inferred and need to be either visible (including bean-style naming) or explicitly annotated.


    Feature is enabled by default.
  syntax:
    content: public static final MapperFeature INFER_PROPERTY_MUTATORS
    return:
      type: com.fasterxml.jackson.databind.MapperFeature
- uid: com.fasterxml.jackson.databind.MapperFeature.MapperFeature(boolean)
  id: MapperFeature(boolean)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.MapperFeature
  langs:
  - java
  name: MapperFeature(boolean defaultState)
  nameWithType: MapperFeature.MapperFeature(boolean defaultState)
  fullName: com.fasterxml.jackson.databind.MapperFeature.MapperFeature(boolean defaultState)
  overload: com.fasterxml.jackson.databind.MapperFeature.MapperFeature*
  type: Constructor
  package: com.fasterxml.jackson.databind
  syntax:
    content: private MapperFeature(boolean defaultState)
    parameters:
    - id: defaultState
      type: boolean
- uid: com.fasterxml.jackson.databind.MapperFeature.OVERRIDE_PUBLIC_ACCESS_MODIFIERS
  id: OVERRIDE_PUBLIC_ACCESS_MODIFIERS
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.MapperFeature
  langs:
  - java
  name: OVERRIDE_PUBLIC_ACCESS_MODIFIERS
  nameWithType: MapperFeature.OVERRIDE_PUBLIC_ACCESS_MODIFIERS
  fullName: com.fasterxml.jackson.databind.MapperFeature.OVERRIDE_PUBLIC_ACCESS_MODIFIERS
  type: Field
  package: com.fasterxml.jackson.databind
  summary: >-
    Feature that determines that forces call to <xref uid="" data-throw-if-not-resolved="false">java.lang.reflect.AccessibleObject#setAccessible</xref> even for `public` accessors -- that is, even if no such call is needed from functionality perspective -- if call is allowed (that is, <xref uid="com.fasterxml.jackson.databind.MapperFeature.CAN_OVERRIDE_ACCESS_MODIFIERS" data-throw-if-not-resolved="false">#CAN_OVERRIDE_ACCESS_MODIFIERS</xref> is set to true). The main reason to enable this feature is possible performance improvement as JDK does not have to perform access checks; these checks are otherwise made for all accessors, including public ones, and may result in slower Reflection calls. Exact impact (if any) depends on Java platform (Java SE, Android) as well as JDK version.


    Feature is enabled by default, for legacy reasons (it was the behavior until 2.6)
  syntax:
    content: public static final MapperFeature OVERRIDE_PUBLIC_ACCESS_MODIFIERS
    return:
      type: com.fasterxml.jackson.databind.MapperFeature
- uid: com.fasterxml.jackson.databind.MapperFeature.PROPAGATE_TRANSIENT_MARKER
  id: PROPAGATE_TRANSIENT_MARKER
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.MapperFeature
  langs:
  - java
  name: PROPAGATE_TRANSIENT_MARKER
  nameWithType: MapperFeature.PROPAGATE_TRANSIENT_MARKER
  fullName: com.fasterxml.jackson.databind.MapperFeature.PROPAGATE_TRANSIENT_MARKER
  type: Field
  package: com.fasterxml.jackson.databind
  summary: >-
    Feature that determines how `transient` modifier for fields is handled: if disabled, it is only taken to mean exclusion of the field as accessor; if true, it is taken to imply removal of the whole property.


    Feature is disabled by default, meaning that existence of \`transient\` for a field does not necessarily lead to ignoral of getters or setters but just ignoring the use of field for access.
  syntax:
    content: public static final MapperFeature PROPAGATE_TRANSIENT_MARKER
    return:
      type: com.fasterxml.jackson.databind.MapperFeature
- uid: com.fasterxml.jackson.databind.MapperFeature.REQUIRE_SETTERS_FOR_GETTERS
  id: REQUIRE_SETTERS_FOR_GETTERS
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.MapperFeature
  langs:
  - java
  name: REQUIRE_SETTERS_FOR_GETTERS
  nameWithType: MapperFeature.REQUIRE_SETTERS_FOR_GETTERS
  fullName: com.fasterxml.jackson.databind.MapperFeature.REQUIRE_SETTERS_FOR_GETTERS
  type: Field
  package: com.fasterxml.jackson.databind
  summary: >-
    Feature that determines whether getters (getter methods) can be auto-detected if there is no matching mutator (setter, constructor parameter or field) or not: if set to true, only getters that match a mutator are auto-discovered; if false, all auto-detectable getters can be discovered.


    Feature is disabled by default.
  syntax:
    content: public static final MapperFeature REQUIRE_SETTERS_FOR_GETTERS
    return:
      type: com.fasterxml.jackson.databind.MapperFeature
- uid: com.fasterxml.jackson.databind.MapperFeature.SORT_PROPERTIES_ALPHABETICALLY
  id: SORT_PROPERTIES_ALPHABETICALLY
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.MapperFeature
  langs:
  - java
  name: SORT_PROPERTIES_ALPHABETICALLY
  nameWithType: MapperFeature.SORT_PROPERTIES_ALPHABETICALLY
  fullName: com.fasterxml.jackson.databind.MapperFeature.SORT_PROPERTIES_ALPHABETICALLY
  type: Field
  package: com.fasterxml.jackson.databind
  summary: >-
    Feature that defines default property serialization order used for POJO fields (note: does **not** apply to <xref uid="java.util.Map" data-throw-if-not-resolved="false">java.util.Map</xref> serialization!): if enabled, default ordering is alphabetic (similar to how <xref uid="com.fasterxml.jackson.annotation.JsonPropertyOrder.alphabetic()" data-throw-if-not-resolved="false">com.fasterxml.jackson.annotation.JsonPropertyOrder#alphabetic()</xref> works); if disabled, order is unspecified (based on what JDK gives us, which may be declaration order, but is not guaranteed).


    Note that this is just the default behavior, and can be overridden by explicit overrides in classes (for example with <xref uid="com.fasterxml.jackson.annotation.JsonPropertyOrder" data-throw-if-not-resolved="false">com.fasterxml.jackson.annotation.JsonPropertyOrder</xref> annotation)


    Feature is disabled by default.
  syntax:
    content: public static final MapperFeature SORT_PROPERTIES_ALPHABETICALLY
    return:
      type: com.fasterxml.jackson.databind.MapperFeature
- uid: com.fasterxml.jackson.databind.MapperFeature.USE_ANNOTATIONS
  id: USE_ANNOTATIONS
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.MapperFeature
  langs:
  - java
  name: USE_ANNOTATIONS
  nameWithType: MapperFeature.USE_ANNOTATIONS
  fullName: com.fasterxml.jackson.databind.MapperFeature.USE_ANNOTATIONS
  type: Field
  package: com.fasterxml.jackson.databind
  summary: >-
    Feature that determines whether annotation introspection is used for configuration; if enabled, configured <xref uid="com.fasterxml.jackson.databind.AnnotationIntrospector" data-throw-if-not-resolved="false">AnnotationIntrospector</xref> will be used: if disabled, no annotations are considered.


    Feature is enabled by default.
  syntax:
    content: public static final MapperFeature USE_ANNOTATIONS
    return:
      type: com.fasterxml.jackson.databind.MapperFeature
- uid: com.fasterxml.jackson.databind.MapperFeature.USE_BASE_TYPE_AS_DEFAULT_IMPL
  id: USE_BASE_TYPE_AS_DEFAULT_IMPL
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.MapperFeature
  langs:
  - java
  name: USE_BASE_TYPE_AS_DEFAULT_IMPL
  nameWithType: MapperFeature.USE_BASE_TYPE_AS_DEFAULT_IMPL
  fullName: com.fasterxml.jackson.databind.MapperFeature.USE_BASE_TYPE_AS_DEFAULT_IMPL
  type: Field
  package: com.fasterxml.jackson.databind
  summary: >-
    Feature that specifies whether the declared base type of a polymorphic value is to be used as the "default" implementation, if no explicit default class is specified via `@JsonTypeInfo.defaultImpl` annotation.


    Note that feature only has effect on deserialization of regular polymorphic properties: it does NOT affect non-polymorphic cases, and is unlikely to work with Default Typing.


    Feature is disabled by default for backwards compatibility.
  syntax:
    content: public static final MapperFeature USE_BASE_TYPE_AS_DEFAULT_IMPL
    return:
      type: com.fasterxml.jackson.databind.MapperFeature
- uid: com.fasterxml.jackson.databind.MapperFeature.USE_GETTERS_AS_SETTERS
  id: USE_GETTERS_AS_SETTERS
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.MapperFeature
  langs:
  - java
  name: USE_GETTERS_AS_SETTERS
  nameWithType: MapperFeature.USE_GETTERS_AS_SETTERS
  fullName: com.fasterxml.jackson.databind.MapperFeature.USE_GETTERS_AS_SETTERS
  type: Field
  package: com.fasterxml.jackson.databind
  summary: >-
    Feature that determines whether otherwise regular "getter" methods (but only ones that handle Collections and Maps, not getters of other type) can be used for purpose of getting a reference to a Collection and Map to modify the property, without requiring a setter method. This is similar to how JAXB framework sets Collections and Maps: no setter is involved, just setter.


    Note that such getters-as-setters methods have lower precedence than setters, so they are only used if no setter is found for the Map/Collection property.


    Feature is enabled by default.
  syntax:
    content: public static final MapperFeature USE_GETTERS_AS_SETTERS
    return:
      type: com.fasterxml.jackson.databind.MapperFeature
- uid: com.fasterxml.jackson.databind.MapperFeature.USE_STATIC_TYPING
  id: USE_STATIC_TYPING
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.MapperFeature
  langs:
  - java
  name: USE_STATIC_TYPING
  nameWithType: MapperFeature.USE_STATIC_TYPING
  fullName: com.fasterxml.jackson.databind.MapperFeature.USE_STATIC_TYPING
  type: Field
  package: com.fasterxml.jackson.databind
  summary: >-
    Feature that determines whether the type detection for serialization should be using actual dynamic runtime type, or declared static type. Note that deserialization always uses declared static types since no runtime types are available (as we are creating instances after using type information).


    This global default value can be overridden at class, method or field level by using <xref uid="com.fasterxml.jackson.databind.annotation.JsonSerialize.typing*" data-throw-if-not-resolved="false">JsonSerialize#typing</xref> annotation property.


    Feature is disabled by default which means that dynamic runtime types are used (instead of declared static types) for serialization.
  syntax:
    content: public static final MapperFeature USE_STATIC_TYPING
    return:
      type: com.fasterxml.jackson.databind.MapperFeature
- uid: com.fasterxml.jackson.databind.MapperFeature.USE_STD_BEAN_NAMING
  id: USE_STD_BEAN_NAMING
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.MapperFeature
  langs:
  - java
  name: USE_STD_BEAN_NAMING
  nameWithType: MapperFeature.USE_STD_BEAN_NAMING
  fullName: com.fasterxml.jackson.databind.MapperFeature.USE_STD_BEAN_NAMING
  type: Field
  package: com.fasterxml.jackson.databind
  summary: >-
    Feature that may be enabled to enforce strict compatibility with Bean name introspection, instead of slightly different mechanism Jackson defaults to. Specific difference is that Jackson always lower cases leading upper-case letters, so "getURL()" becomes "url" property; whereas standard Bean naming **only** lower-cases the first letter if it is NOT followed by another upper-case letter (so "getURL()" would result in "URL" property).


    Feature is disabled by default for backwards compatibility purposes: earlier Jackson versions used Jackson's own mechanism.
  syntax:
    content: public static final MapperFeature USE_STD_BEAN_NAMING
    return:
      type: com.fasterxml.jackson.databind.MapperFeature
- uid: com.fasterxml.jackson.databind.MapperFeature.USE_WRAPPER_NAME_AS_PROPERTY_NAME
  id: USE_WRAPPER_NAME_AS_PROPERTY_NAME
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.MapperFeature
  langs:
  - java
  name: USE_WRAPPER_NAME_AS_PROPERTY_NAME
  nameWithType: MapperFeature.USE_WRAPPER_NAME_AS_PROPERTY_NAME
  fullName: com.fasterxml.jackson.databind.MapperFeature.USE_WRAPPER_NAME_AS_PROPERTY_NAME
  type: Field
  package: com.fasterxml.jackson.databind
  summary: >-
    Feature that can be enabled to make property names be overridden by wrapper name (usually detected with annotations as defined by <xref uid="com.fasterxml.jackson.databind.AnnotationIntrospector.findWrapperName*" data-throw-if-not-resolved="false">AnnotationIntrospector#findWrapperName</xref>. If enabled, all properties that have associated non-empty Wrapper name will use that wrapper name instead of property name. If disabled, wrapper name is only used for wrapping (if anything).


    Feature is disabled by default.
  syntax:
    content: public static final MapperFeature USE_WRAPPER_NAME_AS_PROPERTY_NAME
    return:
      type: com.fasterxml.jackson.databind.MapperFeature
- uid: com.fasterxml.jackson.databind.MapperFeature.enabledByDefault()
  id: enabledByDefault()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.MapperFeature
  langs:
  - java
  name: enabledByDefault()
  nameWithType: MapperFeature.enabledByDefault()
  fullName: com.fasterxml.jackson.databind.MapperFeature.enabledByDefault()
  overload: com.fasterxml.jackson.databind.MapperFeature.enabledByDefault*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: Accessor for checking whether this feature is enabled by default.
  syntax:
    content: public boolean enabledByDefault()
    return:
      type: boolean
- uid: com.fasterxml.jackson.databind.MapperFeature.enabledIn(int)
  id: enabledIn(int)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.MapperFeature
  langs:
  - java
  name: enabledIn(int flags)
  nameWithType: MapperFeature.enabledIn(int flags)
  fullName: com.fasterxml.jackson.databind.MapperFeature.enabledIn(int flags)
  overload: com.fasterxml.jackson.databind.MapperFeature.enabledIn*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: Convenience method for checking whether feature is enabled in given bitmask
  syntax:
    content: public boolean enabledIn(int flags)
    parameters:
    - id: flags
      type: int
    return:
      type: boolean
- uid: com.fasterxml.jackson.databind.MapperFeature.getMask()
  id: getMask()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.MapperFeature
  langs:
  - java
  name: getMask()
  nameWithType: MapperFeature.getMask()
  fullName: com.fasterxml.jackson.databind.MapperFeature.getMask()
  overload: com.fasterxml.jackson.databind.MapperFeature.getMask*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: Returns bit mask for this feature instance
  syntax:
    content: public int getMask()
    return:
      type: int
- uid: com.fasterxml.jackson.databind.MapperFeature.valueOf(java.lang.String)
  id: valueOf(java.lang.String)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.MapperFeature
  langs:
  - java
  name: valueOf(String name)
  nameWithType: MapperFeature.valueOf(String name)
  fullName: com.fasterxml.jackson.databind.MapperFeature.valueOf(String name)
  overload: com.fasterxml.jackson.databind.MapperFeature.valueOf*
  type: Method
  package: com.fasterxml.jackson.databind
  syntax:
    content: public static MapperFeature valueOf(String name)
    parameters:
    - id: name
      type: java.lang.String
    return:
      type: com.fasterxml.jackson.databind.MapperFeature
- uid: com.fasterxml.jackson.databind.MapperFeature.values()
  id: values()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.MapperFeature
  langs:
  - java
  name: values()
  nameWithType: MapperFeature.values()
  fullName: com.fasterxml.jackson.databind.MapperFeature.values()
  overload: com.fasterxml.jackson.databind.MapperFeature.values*
  type: Method
  package: com.fasterxml.jackson.databind
  syntax:
    content: public static MapperFeature[] values()
    return:
      type: com.fasterxml.jackson.databind.MapperFeature[]
references:
- uid: boolean
  spec.java:
  - uid: boolean
    name: boolean
    fullName: boolean
- uid: com.fasterxml.jackson.databind.MapperFeature.MapperFeature*
  name: MapperFeature
  nameWithType: MapperFeature.MapperFeature
  fullName: com.fasterxml.jackson.databind.MapperFeature.MapperFeature
  package: com.fasterxml.jackson.databind
- uid: com.fasterxml.jackson.databind.MapperFeature[]
  spec.java:
  - uid: com.fasterxml.jackson.databind.MapperFeature
    name: MapperFeature
    fullName: com.fasterxml.jackson.databind.MapperFeature
  - name: '[]'
    fullName: '[]'
- uid: com.fasterxml.jackson.databind.MapperFeature.values*
  name: values
  nameWithType: MapperFeature.values
  fullName: com.fasterxml.jackson.databind.MapperFeature.values
  package: com.fasterxml.jackson.databind
- uid: java.lang.String
  spec.java:
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
- uid: com.fasterxml.jackson.databind.MapperFeature.valueOf*
  name: valueOf
  nameWithType: MapperFeature.valueOf
  fullName: com.fasterxml.jackson.databind.MapperFeature.valueOf
  package: com.fasterxml.jackson.databind
- uid: com.fasterxml.jackson.databind.MapperFeature.enabledByDefault*
  name: enabledByDefault
  nameWithType: MapperFeature.enabledByDefault
  fullName: com.fasterxml.jackson.databind.MapperFeature.enabledByDefault
  package: com.fasterxml.jackson.databind
- uid: int
  spec.java:
  - uid: int
    name: int
    fullName: int
- uid: com.fasterxml.jackson.databind.MapperFeature.getMask*
  name: getMask
  nameWithType: MapperFeature.getMask
  fullName: com.fasterxml.jackson.databind.MapperFeature.getMask
  package: com.fasterxml.jackson.databind
- uid: com.fasterxml.jackson.databind.MapperFeature.enabledIn*
  name: enabledIn
  nameWithType: MapperFeature.enabledIn
  fullName: com.fasterxml.jackson.databind.MapperFeature.enabledIn
  package: com.fasterxml.jackson.databind
- uid: java.lang.Enum<com.fasterxml.jackson.databind.MapperFeature>
  name: Enum<MapperFeature>
  nameWithType: Enum<MapperFeature>
  fullName: java.lang.Enum<com.fasterxml.jackson.databind.MapperFeature>
- uid: com.fasterxml.jackson.databind.cfg.ConfigFeature
  name: ConfigFeature
  nameWithType: ConfigFeature
  fullName: com.fasterxml.jackson.databind.cfg.ConfigFeature
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: java.lang.Enum.toString()
  name: Enum.toString()
  nameWithType: Enum.toString()
  fullName: java.lang.Enum.toString()
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: java.lang.Enum.clone()
  name: Enum.clone()
  nameWithType: Enum.clone()
  fullName: java.lang.Enum.clone()
- uid: java.lang.Enum.finalize()
  name: Enum.finalize()
  nameWithType: Enum.finalize()
  fullName: java.lang.Enum.finalize()
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: java.lang.Enum.compareTo(E)
  name: Enum.compareTo(E)
  nameWithType: Enum.compareTo(E)
  fullName: java.lang.Enum.compareTo(E)
- uid: java.lang.Enum.name()
  name: Enum.name()
  nameWithType: Enum.name()
  fullName: java.lang.Enum.name()
- uid: java.lang.Enum.<T>valueOf(java.lang.Class<T>,java.lang.String)
  name: Enum.<T>valueOf(Class<T>,String)
  nameWithType: Enum.<T>valueOf(Class<T>,String)
  fullName: java.lang.Enum.<T>valueOf(java.lang.Class<T>,java.lang.String)
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: java.lang.Enum.getDeclaringClass()
  name: Enum.getDeclaringClass()
  nameWithType: Enum.getDeclaringClass()
  fullName: java.lang.Enum.getDeclaringClass()
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.lang.Enum.ordinal()
  name: Enum.ordinal()
  nameWithType: Enum.ordinal()
  fullName: java.lang.Enum.ordinal()
- uid: java.lang.Enum.hashCode()
  name: Enum.hashCode()
  nameWithType: Enum.hashCode()
  fullName: java.lang.Enum.hashCode()
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: java.lang.Enum.equals(java.lang.Object)
  name: Enum.equals(Object)
  nameWithType: Enum.equals(Object)
  fullName: java.lang.Enum.equals(java.lang.Object)
- uid: java.lang.Enum
  name: Enum
  nameWithType: Enum
  fullName: java.lang.Enum
- uid: java.lang.Enum.
  name: Enum.
  nameWithType: Enum.
  fullName: java.lang.Enum.
- uid: T>,java.lang.String)
  name: T>,String)
  nameWithType: T>,String)
  fullName: T>,java.lang.String)
- uid: T>valueOf(java.lang.Class
  name: T>valueOf(Class
  nameWithType: T>valueOf(Class
  fullName: T>valueOf(java.lang.Class
