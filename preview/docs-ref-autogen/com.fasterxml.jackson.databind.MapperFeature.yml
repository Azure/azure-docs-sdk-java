### YamlMime:JavaEnum
uid: "com.fasterxml.jackson.databind.MapperFeature"
fullName: "com.fasterxml.jackson.databind.MapperFeature"
name: "MapperFeature"
nameWithType: "MapperFeature"
summary: "Enumeration that defines simple on/off features to set for <xref uid=\"com.fasterxml.jackson.databind.ObjectMapper\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ObjectMapper\"></xref>, and accessible (but not changeable) via <xref uid=\"com.fasterxml.jackson.databind.ObjectReader\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ObjectReader\"></xref> and <xref uid=\"com.fasterxml.jackson.databind.ObjectWriter\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ObjectWriter\"></xref> (as well as through various convenience methods through context objects).\n\nNote that in addition to being only mutable via <xref uid=\"com.fasterxml.jackson.databind.ObjectMapper\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ObjectMapper\"></xref>, changes only take effect when done **before any serialization or deserialization** calls -- that is, caller must follow \"configure-then-use\" pattern."
inheritances:
- "<xref href=\"java.lang.Object\" data-throw-if-not-resolved=\"False\" />"
- "<xref href=\"java.lang.Enum\" data-throw-if-not-resolved=\"False\" />"
inheritedMembers:
- "java.lang.Enum.<T>valueOf(java.lang.Class<T>,java.lang.String)"
- "java.lang.Enum.clone()"
- "java.lang.Enum.compareTo(E)"
- "java.lang.Enum.equals(java.lang.Object)"
- "java.lang.Enum.finalize()"
- "java.lang.Enum.getDeclaringClass()"
- "java.lang.Enum.hashCode()"
- "java.lang.Enum.name()"
- "java.lang.Enum.ordinal()"
- "java.lang.Enum.toString()"
- "java.lang.Object.getClass()"
- "java.lang.Object.notify()"
- "java.lang.Object.notifyAll()"
- "java.lang.Object.wait()"
- "java.lang.Object.wait(long)"
- "java.lang.Object.wait(long,int)"
syntax: "public enum MapperFeature extends Enum<MapperFeature> implements ConfigFeature"
fields:
- uid: "com.fasterxml.jackson.databind.MapperFeature.ACCEPT_CASE_INSENSITIVE_ENUMS"
  fullName: "com.fasterxml.jackson.databind.MapperFeature.ACCEPT_CASE_INSENSITIVE_ENUMS"
  name: "ACCEPT_CASE_INSENSITIVE_ENUMS"
  nameWithType: "MapperFeature.ACCEPT_CASE_INSENSITIVE_ENUMS"
  summary: "Feature that determines if Enum deserialization should be case sensitive or not. If enabled, Enum deserialization will ignore case, that is, case of incoming String value and enum id (depending on other settings, either \\`name()\\`, \\`toString()\\`, or explicit override) do not need to match.\n\nFeature is disabled by default."
- uid: "com.fasterxml.jackson.databind.MapperFeature.ACCEPT_CASE_INSENSITIVE_PROPERTIES"
  fullName: "com.fasterxml.jackson.databind.MapperFeature.ACCEPT_CASE_INSENSITIVE_PROPERTIES"
  name: "ACCEPT_CASE_INSENSITIVE_PROPERTIES"
  nameWithType: "MapperFeature.ACCEPT_CASE_INSENSITIVE_PROPERTIES"
  summary: "Feature that will allow for more forgiving deserialization of incoming JSON. If enabled, the bean properties will be matched using their lower-case equivalents, meaning that any case-combination (incoming and matching names are canonicalized by lower-casing) should work.\n\nNote that there is additional performance overhead since incoming property names need to be lower-cased before comparison, for cases where there are upper-case letters. Overhead for names that are already lower-case should be negligible.\n\nFeature is disabled by default."
- uid: "com.fasterxml.jackson.databind.MapperFeature.ACCEPT_CASE_INSENSITIVE_VALUES"
  fullName: "com.fasterxml.jackson.databind.MapperFeature.ACCEPT_CASE_INSENSITIVE_VALUES"
  name: "ACCEPT_CASE_INSENSITIVE_VALUES"
  nameWithType: "MapperFeature.ACCEPT_CASE_INSENSITIVE_VALUES"
  summary: "Feature that permits parsing some enumerated text-based value types but ignoring the case of the values on deserialization: for example, date/time type deserializers. Support for this feature depends on deserializer implementations using it.\n\nNote, however, that regular `Enum` types follow <xref uid=\"com.fasterxml.jackson.databind.MapperFeature.ACCEPT_CASE_INSENSITIVE_ENUMS\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#ACCEPT_CASE_INSENSITIVE_ENUMS\"></xref> setting instead.\n\nFeature is disabled by default."
- uid: "com.fasterxml.jackson.databind.MapperFeature.ALLOW_COERCION_OF_SCALARS"
  fullName: "com.fasterxml.jackson.databind.MapperFeature.ALLOW_COERCION_OF_SCALARS"
  name: "ALLOW_COERCION_OF_SCALARS"
  nameWithType: "MapperFeature.ALLOW_COERCION_OF_SCALARS"
  summary: "Feature that determines whether coercions from secondary representations are allowed for simple non-textual scalar types: numbers and booleans. This includes \\`primitive\\` types and their wrappers, but excludes \\`java.lang.String\\` and date/time types.\n\nWhen feature is disabled, only strictly compatible input may be bound: numbers for numbers, boolean values for booleans. When feature is enabled, conversions from JSON String are allowed, as long as textual value matches (for example, String \"true\" is allowed as equivalent of JSON boolean token \\`true\\`; or String \"1.0\" for \\`double\\`).\n\nNote that it is possible that other configurability options can override this in closer scope (like on per-type or per-property basis); this is just the global default.\n\nFeature is enabled by default (for backwards compatibility since this was the default behavior)"
- uid: "com.fasterxml.jackson.databind.MapperFeature.ALLOW_EXPLICIT_PROPERTY_RENAMING"
  fullName: "com.fasterxml.jackson.databind.MapperFeature.ALLOW_EXPLICIT_PROPERTY_RENAMING"
  name: "ALLOW_EXPLICIT_PROPERTY_RENAMING"
  nameWithType: "MapperFeature.ALLOW_EXPLICIT_PROPERTY_RENAMING"
  summary: "Feature that when enabled will allow explicitly named properties (i.e., fields or methods annotated with <xref uid=\"com.fasterxml.jackson.annotation.JsonProperty\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.fasterxml.jackson.annotation.JsonProperty\"></xref>(\"explicitName\")) to be re-named by a <xref uid=\"com.fasterxml.jackson.databind.PropertyNamingStrategy\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PropertyNamingStrategy\"></xref>, if one is configured.\n\nFeature is disabled by default."
- uid: "com.fasterxml.jackson.databind.MapperFeature.ALLOW_FINAL_FIELDS_AS_MUTATORS"
  fullName: "com.fasterxml.jackson.databind.MapperFeature.ALLOW_FINAL_FIELDS_AS_MUTATORS"
  name: "ALLOW_FINAL_FIELDS_AS_MUTATORS"
  nameWithType: "MapperFeature.ALLOW_FINAL_FIELDS_AS_MUTATORS"
  summary: "Feature that determines whether member fields declared as 'final' may be auto-detected to be used mutators (used to change value of the logical property) or not. If enabled, 'final' access modifier has no effect, and such fields may be detected according to usual visibility and inference rules; if disabled, such fields are NOT used as mutators except if explicitly annotated for such use.\n\nFeature is enabled by default, for backwards compatibility reasons."
- uid: "com.fasterxml.jackson.databind.MapperFeature.AUTO_DETECT_CREATORS"
  fullName: "com.fasterxml.jackson.databind.MapperFeature.AUTO_DETECT_CREATORS"
  name: "AUTO_DETECT_CREATORS"
  nameWithType: "MapperFeature.AUTO_DETECT_CREATORS"
  summary: "Feature that determines whether \"creator\" methods are automatically detected by consider public constructors, and static single argument methods with name \"valueOf\". If disabled, only methods explicitly annotated are considered creator methods (except for the no-arg default constructor which is always considered a factory method).\n\nNote that this feature has lower precedence than per-class annotations, and is only used if there isn't more granular configuration available.\n\nFeature is enabled by default."
- uid: "com.fasterxml.jackson.databind.MapperFeature.AUTO_DETECT_FIELDS"
  fullName: "com.fasterxml.jackson.databind.MapperFeature.AUTO_DETECT_FIELDS"
  name: "AUTO_DETECT_FIELDS"
  nameWithType: "MapperFeature.AUTO_DETECT_FIELDS"
  summary: "Feature that determines whether non-static fields are recognized as properties. If yes, then all public member fields are considered as properties. If disabled, only fields explicitly annotated are considered property fields.\n\nNote that this feature has lower precedence than per-class annotations, and is only used if there isn't more granular configuration available.\n\nFeature is enabled by default."
- uid: "com.fasterxml.jackson.databind.MapperFeature.AUTO_DETECT_GETTERS"
  fullName: "com.fasterxml.jackson.databind.MapperFeature.AUTO_DETECT_GETTERS"
  name: "AUTO_DETECT_GETTERS"
  nameWithType: "MapperFeature.AUTO_DETECT_GETTERS"
  summary: "Feature that determines whether regular \"getter\" methods are automatically detected based on standard Bean naming convention or not. If yes, then all public zero-argument methods that start with prefix \"get\" are considered as getters. If disabled, only methods explicitly annotated are considered getters.\n\nNote that since version 1.3, this does **NOT** include \"is getters\" (see <xref uid=\"com.fasterxml.jackson.databind.MapperFeature.AUTO_DETECT_IS_GETTERS\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#AUTO_DETECT_IS_GETTERS\"></xref> for details)\n\nNote that this feature has lower precedence than per-class annotations, and is only used if there isn't more granular configuration available.\n\nFeature is enabled by default."
- uid: "com.fasterxml.jackson.databind.MapperFeature.AUTO_DETECT_IS_GETTERS"
  fullName: "com.fasterxml.jackson.databind.MapperFeature.AUTO_DETECT_IS_GETTERS"
  name: "AUTO_DETECT_IS_GETTERS"
  nameWithType: "MapperFeature.AUTO_DETECT_IS_GETTERS"
  summary: "Feature that determines whether \"is getter\" methods are automatically detected based on standard Bean naming convention or not. If yes, then all public zero-argument methods that start with prefix \"is\", and whose return type is boolean are considered as \"is getters\". If disabled, only methods explicitly annotated are considered getters.\n\nNote that this feature has lower precedence than per-class annotations, and is only used if there isn't more granular configuration available.\n\nFeature is enabled by default."
- uid: "com.fasterxml.jackson.databind.MapperFeature.AUTO_DETECT_SETTERS"
  fullName: "com.fasterxml.jackson.databind.MapperFeature.AUTO_DETECT_SETTERS"
  name: "AUTO_DETECT_SETTERS"
  nameWithType: "MapperFeature.AUTO_DETECT_SETTERS"
  summary: "Feature that determines whether \"setter\" methods are automatically detected based on standard Bean naming convention or not. If yes, then all public one-argument methods that start with prefix \"set\" are considered setters. If disabled, only methods explicitly annotated are considered setters.\n\nNote that this feature has lower precedence than per-class annotations, and is only used if there isn't more granular configuration available.\n\nFeature is enabled by default."
- uid: "com.fasterxml.jackson.databind.MapperFeature.BLOCK_UNSAFE_POLYMORPHIC_BASE_TYPES"
  fullName: "com.fasterxml.jackson.databind.MapperFeature.BLOCK_UNSAFE_POLYMORPHIC_BASE_TYPES"
  name: "BLOCK_UNSAFE_POLYMORPHIC_BASE_TYPES"
  nameWithType: "MapperFeature.BLOCK_UNSAFE_POLYMORPHIC_BASE_TYPES"
  summary: "Setting that may be enabled to reconfigure **default** <xref uid=\"com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator\"></xref> used by legacy `ObjectMapper.enableDefaultTyping()` methods as well as default used for annotation-based polymorphic handling so that it uses <xref uid=\"com.fasterxml.jackson.databind.jsontype.DefaultBaseTypeLimitingValidator\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.fasterxml.jackson.databind.jsontype.DefaultBaseTypeLimitingValidator\"></xref>. This will block use of a set of \"unsafe\" base types such as <xref uid=\"java.lang.Object\" data-throw-if-not-resolved=\"false\" data-raw-source=\"java.lang.Object\"></xref> through methods that do not require passing of explicit <xref uid=\"com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator\"></xref>. It is still possible to override one used; this only affects default settings.\n\nEnabling of this setting is **strongly recommended**.\n\nFeature is disabled by default in 2.x for backwards compatibility reasons: it will become default setting (and feature likely removed) in 3.0."
- uid: "com.fasterxml.jackson.databind.MapperFeature.CAN_OVERRIDE_ACCESS_MODIFIERS"
  fullName: "com.fasterxml.jackson.databind.MapperFeature.CAN_OVERRIDE_ACCESS_MODIFIERS"
  name: "CAN_OVERRIDE_ACCESS_MODIFIERS"
  nameWithType: "MapperFeature.CAN_OVERRIDE_ACCESS_MODIFIERS"
  summary: "Feature that determines whether method and field access modifier settings can be overridden when accessing properties. If enabled, method <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"java.lang.reflect.AccessibleObject#setAccessible\"></xref> may be called to enable access to otherwise unaccessible objects.\n\nNote that this setting may have significant performance implications, since access override helps remove costly access checks on each and every Reflection access. If you are considering disabling this feature, be sure to verify performance consequences if usage is performance sensitive. Also note that performance effects vary between Java platforms (JavaSE vs Android, for example), as well as JDK versions: older versions seemed to have more significant performance difference.\n\nConversely, on some platforms, it may be necessary to disable this feature as platform does not allow such calls. For example, when developing Applets (or other Java code that runs on tightly restricted sandbox), it may be necessary to disable the feature regardless of performance effects.\n\nFeature is enabled by default."
- uid: "com.fasterxml.jackson.databind.MapperFeature.DEFAULT_VIEW_INCLUSION"
  fullName: "com.fasterxml.jackson.databind.MapperFeature.DEFAULT_VIEW_INCLUSION"
  name: "DEFAULT_VIEW_INCLUSION"
  nameWithType: "MapperFeature.DEFAULT_VIEW_INCLUSION"
  summary: "Feature that determines whether properties that have no view annotations are included in JSON serialization views (see <xref uid=\"com.fasterxml.jackson.annotation.JsonView\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.fasterxml.jackson.annotation.JsonView\"></xref> for more details on JSON Views). If enabled, non-annotated properties will be included; when disabled, they will be excluded. So this feature changes between \"opt-in\" (feature disabled) and \"opt-out\" (feature enabled) modes.\n\nDefault value is enabled, meaning that non-annotated properties are included in all views if there is no <xref uid=\"com.fasterxml.jackson.annotation.JsonView\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.fasterxml.jackson.annotation.JsonView\"></xref> annotation.\n\nFeature is enabled by default."
- uid: "com.fasterxml.jackson.databind.MapperFeature.IGNORE_DUPLICATE_MODULE_REGISTRATIONS"
  fullName: "com.fasterxml.jackson.databind.MapperFeature.IGNORE_DUPLICATE_MODULE_REGISTRATIONS"
  name: "IGNORE_DUPLICATE_MODULE_REGISTRATIONS"
  nameWithType: "MapperFeature.IGNORE_DUPLICATE_MODULE_REGISTRATIONS"
  summary: "Feature that determines whether multiple registrations of same module should be ignored or not; if enabled, only the first registration call results in module being called, and possible duplicate calls are silently ignored; if disabled, no checking is done and all registration calls are dispatched to module.\n\nDefinition of \"same module\" is based on using <xref uid=\"com.fasterxml.jackson.databind.Module.getTypeId()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Module#getTypeId()\"></xref>; modules with same non-null `type id` are considered same for purposes of duplicate registration. This also avoids having to keep track of actual module instances; only ids will be kept track of (and only if this feature is enabled).\n\nFeature is enabled by default."
- uid: "com.fasterxml.jackson.databind.MapperFeature.IGNORE_MERGE_FOR_UNMERGEABLE"
  fullName: "com.fasterxml.jackson.databind.MapperFeature.IGNORE_MERGE_FOR_UNMERGEABLE"
  name: "IGNORE_MERGE_FOR_UNMERGEABLE"
  nameWithType: "MapperFeature.IGNORE_MERGE_FOR_UNMERGEABLE"
  summary: "Setting that determines what happens if an attempt is made to explicitly \"merge\" value of a property, where value does not support merging; either merging is skipped and new value is created (`true`) or an exception is thrown (false).\n\nFeature is enabled by default, to allow use of merge defaults even in presence of some unmergeable properties."
- uid: "com.fasterxml.jackson.databind.MapperFeature.INFER_CREATOR_FROM_CONSTRUCTOR_PROPERTIES"
  fullName: "com.fasterxml.jackson.databind.MapperFeature.INFER_CREATOR_FROM_CONSTRUCTOR_PROPERTIES"
  name: "INFER_CREATOR_FROM_CONSTRUCTOR_PROPERTIES"
  nameWithType: "MapperFeature.INFER_CREATOR_FROM_CONSTRUCTOR_PROPERTIES"
  summary: "Feature that determines handling of `java.beans.ConstructorProperties` annotation: when enabled, it is considered as alias of <xref uid=\"com.fasterxml.jackson.annotation.JsonCreator\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.fasterxml.jackson.annotation.JsonCreator\"></xref>, to mean that constructor should be considered a property-based Creator; when disabled, only constructor parameter name information is used, but constructor is NOT considered an explicit Creator (although may be discovered as one using other annotations or heuristics).\n\nFeature is mostly used to help inter-operability with frameworks like Lombok that may automatically generate `ConstructorProperties` annotation but without necessarily meaning that constructor should be used as Creator for deserialization.\n\nFeature is enabled by default."
- uid: "com.fasterxml.jackson.databind.MapperFeature.INFER_PROPERTY_MUTATORS"
  fullName: "com.fasterxml.jackson.databind.MapperFeature.INFER_PROPERTY_MUTATORS"
  name: "INFER_PROPERTY_MUTATORS"
  nameWithType: "MapperFeature.INFER_PROPERTY_MUTATORS"
  summary: "Feature that determines whether member mutators (fields and setters) may be \"pulled in\" even if they are not visible, as long as there is a visible accessor (getter or field) with same name. For example: field \"value\" may be inferred as mutator, if there is visible or explicitly marked getter \"getValue()\". If enabled, inferring is enabled; otherwise (disabled) only visible and explicitly annotated accessors are ever used.\n\nNote that 'getters' are never inferred and need to be either visible (including bean-style naming) or explicitly annotated.\n\nFeature is enabled by default."
- uid: "com.fasterxml.jackson.databind.MapperFeature.OVERRIDE_PUBLIC_ACCESS_MODIFIERS"
  fullName: "com.fasterxml.jackson.databind.MapperFeature.OVERRIDE_PUBLIC_ACCESS_MODIFIERS"
  name: "OVERRIDE_PUBLIC_ACCESS_MODIFIERS"
  nameWithType: "MapperFeature.OVERRIDE_PUBLIC_ACCESS_MODIFIERS"
  summary: "Feature that determines that forces call to <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"java.lang.reflect.AccessibleObject#setAccessible\"></xref> even for `public` accessors -- that is, even if no such call is needed from functionality perspective -- if call is allowed (that is, <xref uid=\"com.fasterxml.jackson.databind.MapperFeature.CAN_OVERRIDE_ACCESS_MODIFIERS\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#CAN_OVERRIDE_ACCESS_MODIFIERS\"></xref> is set to true). The main reason to enable this feature is possible performance improvement as JDK does not have to perform access checks; these checks are otherwise made for all accessors, including public ones, and may result in slower Reflection calls. Exact impact (if any) depends on Java platform (Java SE, Android) as well as JDK version.\n\nFeature is enabled by default, for legacy reasons (it was the behavior until 2.6)"
- uid: "com.fasterxml.jackson.databind.MapperFeature.PROPAGATE_TRANSIENT_MARKER"
  fullName: "com.fasterxml.jackson.databind.MapperFeature.PROPAGATE_TRANSIENT_MARKER"
  name: "PROPAGATE_TRANSIENT_MARKER"
  nameWithType: "MapperFeature.PROPAGATE_TRANSIENT_MARKER"
  summary: "Feature that determines how `transient` modifier for fields is handled: if disabled, it is only taken to mean exclusion of the field as accessor; if true, it is taken to imply removal of the whole property.\n\nFeature is disabled by default, meaning that existence of \\`transient\\` for a field does not necessarily lead to ignoral of getters or setters but just ignoring the use of field for access."
- uid: "com.fasterxml.jackson.databind.MapperFeature.REQUIRE_SETTERS_FOR_GETTERS"
  fullName: "com.fasterxml.jackson.databind.MapperFeature.REQUIRE_SETTERS_FOR_GETTERS"
  name: "REQUIRE_SETTERS_FOR_GETTERS"
  nameWithType: "MapperFeature.REQUIRE_SETTERS_FOR_GETTERS"
  summary: "Feature that determines whether getters (getter methods) can be auto-detected if there is no matching mutator (setter, constructor parameter or field) or not: if set to true, only getters that match a mutator are auto-discovered; if false, all auto-detectable getters can be discovered.\n\nFeature is disabled by default."
- uid: "com.fasterxml.jackson.databind.MapperFeature.SORT_PROPERTIES_ALPHABETICALLY"
  fullName: "com.fasterxml.jackson.databind.MapperFeature.SORT_PROPERTIES_ALPHABETICALLY"
  name: "SORT_PROPERTIES_ALPHABETICALLY"
  nameWithType: "MapperFeature.SORT_PROPERTIES_ALPHABETICALLY"
  summary: "Feature that defines default property serialization order used for POJO fields (note: does **not** apply to <xref uid=\"java.util.Map\" data-throw-if-not-resolved=\"false\" data-raw-source=\"java.util.Map\"></xref> serialization!): if enabled, default ordering is alphabetic (similar to how <xref uid=\"com.fasterxml.jackson.annotation.JsonPropertyOrder.alphabetic()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.fasterxml.jackson.annotation.JsonPropertyOrder#alphabetic()\"></xref> works); if disabled, order is unspecified (based on what JDK gives us, which may be declaration order, but is not guaranteed).\n\nNote that this is just the default behavior, and can be overridden by explicit overrides in classes (for example with <xref uid=\"com.fasterxml.jackson.annotation.JsonPropertyOrder\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.fasterxml.jackson.annotation.JsonPropertyOrder\"></xref> annotation)\n\nFeature is disabled by default."
- uid: "com.fasterxml.jackson.databind.MapperFeature.USE_ANNOTATIONS"
  fullName: "com.fasterxml.jackson.databind.MapperFeature.USE_ANNOTATIONS"
  name: "USE_ANNOTATIONS"
  nameWithType: "MapperFeature.USE_ANNOTATIONS"
  summary: "Feature that determines whether annotation introspection is used for configuration; if enabled, configured <xref uid=\"com.fasterxml.jackson.databind.AnnotationIntrospector\" data-throw-if-not-resolved=\"false\" data-raw-source=\"AnnotationIntrospector\"></xref> will be used: if disabled, no annotations are considered.\n\nFeature is enabled by default."
- uid: "com.fasterxml.jackson.databind.MapperFeature.USE_BASE_TYPE_AS_DEFAULT_IMPL"
  fullName: "com.fasterxml.jackson.databind.MapperFeature.USE_BASE_TYPE_AS_DEFAULT_IMPL"
  name: "USE_BASE_TYPE_AS_DEFAULT_IMPL"
  nameWithType: "MapperFeature.USE_BASE_TYPE_AS_DEFAULT_IMPL"
  summary: "Feature that specifies whether the declared base type of a polymorphic value is to be used as the \"default\" implementation, if no explicit default class is specified via `@JsonTypeInfo.defaultImpl` annotation.\n\nNote that feature only has effect on deserialization of regular polymorphic properties: it does NOT affect non-polymorphic cases, and is unlikely to work with Default Typing.\n\nFeature is disabled by default for backwards compatibility."
- uid: "com.fasterxml.jackson.databind.MapperFeature.USE_GETTERS_AS_SETTERS"
  fullName: "com.fasterxml.jackson.databind.MapperFeature.USE_GETTERS_AS_SETTERS"
  name: "USE_GETTERS_AS_SETTERS"
  nameWithType: "MapperFeature.USE_GETTERS_AS_SETTERS"
  summary: "Feature that determines whether otherwise regular \"getter\" methods (but only ones that handle Collections and Maps, not getters of other type) can be used for purpose of getting a reference to a Collection and Map to modify the property, without requiring a setter method. This is similar to how JAXB framework sets Collections and Maps: no setter is involved, just setter.\n\nNote that such getters-as-setters methods have lower precedence than setters, so they are only used if no setter is found for the Map/Collection property.\n\nFeature is enabled by default."
- uid: "com.fasterxml.jackson.databind.MapperFeature.USE_STATIC_TYPING"
  fullName: "com.fasterxml.jackson.databind.MapperFeature.USE_STATIC_TYPING"
  name: "USE_STATIC_TYPING"
  nameWithType: "MapperFeature.USE_STATIC_TYPING"
  summary: "Feature that determines whether the type detection for serialization should be using actual dynamic runtime type, or declared static type. Note that deserialization always uses declared static types since no runtime types are available (as we are creating instances after using type information).\n\nThis global default value can be overridden at class, method or field level by using <xref uid=\"com.fasterxml.jackson.databind.annotation.JsonSerialize.typing*\" data-throw-if-not-resolved=\"false\" data-raw-source=\"JsonSerialize#typing\"></xref> annotation property.\n\nFeature is disabled by default which means that dynamic runtime types are used (instead of declared static types) for serialization."
- uid: "com.fasterxml.jackson.databind.MapperFeature.USE_STD_BEAN_NAMING"
  fullName: "com.fasterxml.jackson.databind.MapperFeature.USE_STD_BEAN_NAMING"
  name: "USE_STD_BEAN_NAMING"
  nameWithType: "MapperFeature.USE_STD_BEAN_NAMING"
  summary: "Feature that may be enabled to enforce strict compatibility with Bean name introspection, instead of slightly different mechanism Jackson defaults to. Specific difference is that Jackson always lower cases leading upper-case letters, so \"getURL()\" becomes \"url\" property; whereas standard Bean naming **only** lower-cases the first letter if it is NOT followed by another upper-case letter (so \"getURL()\" would result in \"URL\" property).\n\nFeature is disabled by default for backwards compatibility purposes: earlier Jackson versions used Jackson's own mechanism."
- uid: "com.fasterxml.jackson.databind.MapperFeature.USE_WRAPPER_NAME_AS_PROPERTY_NAME"
  fullName: "com.fasterxml.jackson.databind.MapperFeature.USE_WRAPPER_NAME_AS_PROPERTY_NAME"
  name: "USE_WRAPPER_NAME_AS_PROPERTY_NAME"
  nameWithType: "MapperFeature.USE_WRAPPER_NAME_AS_PROPERTY_NAME"
  summary: "Feature that can be enabled to make property names be overridden by wrapper name (usually detected with annotations as defined by <xref uid=\"com.fasterxml.jackson.databind.AnnotationIntrospector.findWrapperName*\" data-throw-if-not-resolved=\"false\" data-raw-source=\"AnnotationIntrospector#findWrapperName\"></xref>. If enabled, all properties that have associated non-empty Wrapper name will use that wrapper name instead of property name. If disabled, wrapper name is only used for wrapping (if anything).\n\nFeature is disabled by default."
methods:
- uid: "com.fasterxml.jackson.databind.MapperFeature.enabledByDefault()"
  fullName: "com.fasterxml.jackson.databind.MapperFeature.enabledByDefault()"
  name: "enabledByDefault()"
  nameWithType: "MapperFeature.enabledByDefault()"
  summary: "Accessor for checking whether this feature is enabled by default."
  syntax: "public boolean enabledByDefault()"
  returns:
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.fasterxml.jackson.databind.MapperFeature.enabledIn(int)"
  fullName: "com.fasterxml.jackson.databind.MapperFeature.enabledIn(int flags)"
  name: "enabledIn(int flags)"
  nameWithType: "MapperFeature.enabledIn(int flags)"
  summary: "Convenience method for checking whether feature is enabled in given bitmask"
  parameters:
  - name: "flags"
    type: "<xref href=\"int?alt=int&text=int\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public boolean enabledIn(int flags)"
  returns:
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.fasterxml.jackson.databind.MapperFeature.getMask()"
  fullName: "com.fasterxml.jackson.databind.MapperFeature.getMask()"
  name: "getMask()"
  nameWithType: "MapperFeature.getMask()"
  summary: "Returns bit mask for this feature instance"
  syntax: "public int getMask()"
  returns:
    type: "<xref href=\"int?alt=int&text=int\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.fasterxml.jackson.databind.MapperFeature.valueOf(java.lang.String)"
  fullName: "com.fasterxml.jackson.databind.MapperFeature.valueOf(String name)"
  name: "valueOf(String name)"
  nameWithType: "MapperFeature.valueOf(String name)"
  parameters:
  - name: "name"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public static MapperFeature valueOf(String name)"
  returns:
    type: "<xref href=\"com.fasterxml.jackson.databind.MapperFeature?alt=com.fasterxml.jackson.databind.MapperFeature&text=MapperFeature\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.fasterxml.jackson.databind.MapperFeature.values()"
  fullName: "com.fasterxml.jackson.databind.MapperFeature.values()"
  name: "values()"
  nameWithType: "MapperFeature.values()"
  syntax: "public static MapperFeature[] values()"
  returns:
    type: "<xref href=\"com.fasterxml.jackson.databind.MapperFeature?alt=com.fasterxml.jackson.databind.MapperFeature&text=MapperFeature\" data-throw-if-not-resolved=\"False\" />[]"
implements:
- "<xref href=\"com.fasterxml.jackson.databind.cfg.ConfigFeature?alt=com.fasterxml.jackson.databind.cfg.ConfigFeature&text=ConfigFeature\" data-throw-if-not-resolved=\"False\" />"
metadata: {}
package: "com.fasterxml.jackson.databind"
artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
