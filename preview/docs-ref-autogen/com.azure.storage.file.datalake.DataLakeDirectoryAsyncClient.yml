### YamlMime:JavaType
uid: "com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient"
fullName: "com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient"
name: "DataLakeDirectoryAsyncClient"
nameWithType: "DataLakeDirectoryAsyncClient"
summary: "This class provides a client that contains directory operations for Azure Storage Data Lake."
inheritances:
- "<xref href=\"java.lang.Object?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
- "<xref href=\"com.azure.storage.file.datalake.DataLakePathAsyncClient?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
inheritedMembers:
- "com.azure.storage.file.datalake.DataLakePathAsyncClient.create()"
- "com.azure.storage.file.datalake.DataLakePathAsyncClient.create(boolean)"
- "com.azure.storage.file.datalake.DataLakePathAsyncClient.createIfNotExists()"
- "com.azure.storage.file.datalake.DataLakePathAsyncClient.createIfNotExistsWithResponse(com.azure.storage.file.datalake.options.DataLakePathCreateOptions)"
- "com.azure.storage.file.datalake.DataLakePathAsyncClient.createWithResponse(com.azure.storage.file.datalake.options.DataLakePathCreateOptions)"
- "com.azure.storage.file.datalake.DataLakePathAsyncClient.createWithResponse(java.lang.String,java.lang.String,com.azure.storage.file.datalake.models.PathHttpHeaders,java.util.Map<java.lang.String,java.lang.String>,com.azure.storage.file.datalake.models.DataLakeRequestConditions)"
- "com.azure.storage.file.datalake.DataLakePathAsyncClient.deleteIfExists()"
- "com.azure.storage.file.datalake.DataLakePathAsyncClient.deleteIfExistsWithResponse(com.azure.storage.file.datalake.options.DataLakePathDeleteOptions)"
- "com.azure.storage.file.datalake.DataLakePathAsyncClient.exists()"
- "com.azure.storage.file.datalake.DataLakePathAsyncClient.existsWithResponse()"
- "com.azure.storage.file.datalake.DataLakePathAsyncClient.generateSas(com.azure.storage.file.datalake.sas.DataLakeServiceSasSignatureValues)"
- "com.azure.storage.file.datalake.DataLakePathAsyncClient.generateSas(com.azure.storage.file.datalake.sas.DataLakeServiceSasSignatureValues,com.azure.core.util.Context)"
- "com.azure.storage.file.datalake.DataLakePathAsyncClient.generateUserDelegationSas(com.azure.storage.file.datalake.sas.DataLakeServiceSasSignatureValues,com.azure.storage.file.datalake.models.UserDelegationKey)"
- "com.azure.storage.file.datalake.DataLakePathAsyncClient.generateUserDelegationSas(com.azure.storage.file.datalake.sas.DataLakeServiceSasSignatureValues,com.azure.storage.file.datalake.models.UserDelegationKey,java.lang.String,com.azure.core.util.Context)"
- "com.azure.storage.file.datalake.DataLakePathAsyncClient.getAccessControl()"
- "com.azure.storage.file.datalake.DataLakePathAsyncClient.getAccessControlWithResponse(boolean,com.azure.storage.file.datalake.models.DataLakeRequestConditions)"
- "com.azure.storage.file.datalake.DataLakePathAsyncClient.getAccountName()"
- "com.azure.storage.file.datalake.DataLakePathAsyncClient.getCustomerProvidedKey()"
- "com.azure.storage.file.datalake.DataLakePathAsyncClient.getCustomerProvidedKeyAsyncClient(com.azure.storage.file.datalake.models.CustomerProvidedKey)"
- "com.azure.storage.file.datalake.DataLakePathAsyncClient.getFileSystemName()"
- "com.azure.storage.file.datalake.DataLakePathAsyncClient.getHttpPipeline()"
- "com.azure.storage.file.datalake.DataLakePathAsyncClient.getProperties()"
- "com.azure.storage.file.datalake.DataLakePathAsyncClient.getPropertiesWithResponse(com.azure.storage.file.datalake.models.DataLakeRequestConditions)"
- "com.azure.storage.file.datalake.DataLakePathAsyncClient.getServiceVersion()"
- "com.azure.storage.file.datalake.DataLakePathAsyncClient.removeAccessControlRecursive(java.util.List<com.azure.storage.file.datalake.models.PathRemoveAccessControlEntry>)"
- "com.azure.storage.file.datalake.DataLakePathAsyncClient.removeAccessControlRecursiveWithResponse(com.azure.storage.file.datalake.options.PathRemoveAccessControlRecursiveOptions)"
- "com.azure.storage.file.datalake.DataLakePathAsyncClient.setAccessControlList(java.util.List<com.azure.storage.file.datalake.models.PathAccessControlEntry>,java.lang.String,java.lang.String)"
- "com.azure.storage.file.datalake.DataLakePathAsyncClient.setAccessControlListWithResponse(java.util.List<com.azure.storage.file.datalake.models.PathAccessControlEntry>,java.lang.String,java.lang.String,com.azure.storage.file.datalake.models.DataLakeRequestConditions)"
- "com.azure.storage.file.datalake.DataLakePathAsyncClient.setAccessControlRecursive(java.util.List<com.azure.storage.file.datalake.models.PathAccessControlEntry>)"
- "com.azure.storage.file.datalake.DataLakePathAsyncClient.setAccessControlRecursiveWithResponse(com.azure.storage.file.datalake.options.PathSetAccessControlRecursiveOptions)"
- "com.azure.storage.file.datalake.DataLakePathAsyncClient.setHttpHeaders(com.azure.storage.file.datalake.models.PathHttpHeaders)"
- "com.azure.storage.file.datalake.DataLakePathAsyncClient.setHttpHeadersWithResponse(com.azure.storage.file.datalake.models.PathHttpHeaders,com.azure.storage.file.datalake.models.DataLakeRequestConditions)"
- "com.azure.storage.file.datalake.DataLakePathAsyncClient.setMetadata(java.util.Map<java.lang.String,java.lang.String>)"
- "com.azure.storage.file.datalake.DataLakePathAsyncClient.setMetadataWithResponse(java.util.Map<java.lang.String,java.lang.String>,com.azure.storage.file.datalake.models.DataLakeRequestConditions)"
- "com.azure.storage.file.datalake.DataLakePathAsyncClient.setPermissions(com.azure.storage.file.datalake.models.PathPermissions,java.lang.String,java.lang.String)"
- "com.azure.storage.file.datalake.DataLakePathAsyncClient.setPermissionsWithResponse(com.azure.storage.file.datalake.models.PathPermissions,java.lang.String,java.lang.String,com.azure.storage.file.datalake.models.DataLakeRequestConditions)"
- "com.azure.storage.file.datalake.DataLakePathAsyncClient.updateAccessControlRecursive(java.util.List<com.azure.storage.file.datalake.models.PathAccessControlEntry>)"
- "com.azure.storage.file.datalake.DataLakePathAsyncClient.updateAccessControlRecursiveWithResponse(com.azure.storage.file.datalake.options.PathUpdateAccessControlRecursiveOptions)"
- "java.lang.Object.clone()"
- "java.lang.Object.equals(java.lang.Object)"
- "java.lang.Object.finalize()"
- "java.lang.Object.getClass()"
- "java.lang.Object.hashCode()"
- "java.lang.Object.notify()"
- "java.lang.Object.notifyAll()"
- "java.lang.Object.toString()"
- "java.lang.Object.wait()"
- "java.lang.Object.wait(long)"
- "java.lang.Object.wait(long,int)"
syntax: "public final class DataLakeDirectoryAsyncClient extends DataLakePathAsyncClient"
methods:
- uid: "com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient.createFile(java.lang.String)"
  fullName: "com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient.createFile(String fileName)"
  name: "createFile(String fileName)"
  nameWithType: "DataLakeDirectoryAsyncClient.createFile(String fileName)"
  summary: "Creates a new file within a directory."
  parameters:
  - description: "Name of the file to create."
    name: "fileName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<DataLakeFileAsyncClient> createFile(String fileName)"
  desc: "Creates a new file within a directory. By default, this method will not overwrite an existing file. For more information, see the [Azure Docs][].\n\n**Code Samples**\n\n```java\nDataLakeFileAsyncClient fileClient = client.createFile(fileName).block();\n```\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/datalakestoragegen2/path/create"
  returns:
    description: "A <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> containing a <xref uid=\"com.azure.storage.file.datalake.DataLakeFileAsyncClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DataLakeFileAsyncClient\"></xref> used to interact with the file created."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.file.datalake.DataLakeFileAsyncClient?alt=com.azure.storage.file.datalake.DataLakeFileAsyncClient&text=DataLakeFileAsyncClient\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient.createFile(java.lang.String,boolean)"
  fullName: "com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient.createFile(String fileName, boolean overwrite)"
  name: "createFile(String fileName, boolean overwrite)"
  nameWithType: "DataLakeDirectoryAsyncClient.createFile(String fileName, boolean overwrite)"
  summary: "Creates a new file within a directory."
  parameters:
  - description: "Name of the file to create."
    name: "fileName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Whether to overwrite, should the file exist."
    name: "overwrite"
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<DataLakeFileAsyncClient> createFile(String fileName, boolean overwrite)"
  desc: "Creates a new file within a directory. For more information, see the [Azure Docs][].\n\n**Code Samples**\n\n```java\nboolean overwrite = false; /* Default value. */\n DataLakeFileAsyncClient fClient = client.createFile(fileName, overwrite).block();\n```\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/datalakestoragegen2/path/create"
  returns:
    description: "A <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> containing a <xref uid=\"com.azure.storage.file.datalake.DataLakeFileAsyncClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DataLakeFileAsyncClient\"></xref> used to interact with the file created."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.file.datalake.DataLakeFileAsyncClient?alt=com.azure.storage.file.datalake.DataLakeFileAsyncClient&text=DataLakeFileAsyncClient\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient.createFileIfNotExists(java.lang.String)"
  fullName: "com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient.createFileIfNotExists(String fileName)"
  name: "createFileIfNotExists(String fileName)"
  nameWithType: "DataLakeDirectoryAsyncClient.createFileIfNotExists(String fileName)"
  summary: "Creates a new file within a directory if it does not exist."
  parameters:
  - description: "Name of the file to create."
    name: "fileName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<DataLakeFileAsyncClient> createFileIfNotExists(String fileName)"
  desc: "Creates a new file within a directory if it does not exist. By default this method will not overwrite an existing file. For more information, see the [Azure Docs][].\n\n**Code Samples**\n\n```java\nDataLakeFileAsyncClient fileClient = client.createFileIfNotExists(fileName).block();\n```\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/datalakestoragegen2/path/create"
  returns:
    description: "A <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> containing a <xref uid=\"com.azure.storage.file.datalake.DataLakeFileAsyncClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DataLakeFileAsyncClient\"></xref> used to interact with the file created."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.file.datalake.DataLakeFileAsyncClient?alt=com.azure.storage.file.datalake.DataLakeFileAsyncClient&text=DataLakeFileAsyncClient\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient.createFileIfNotExistsWithResponse(java.lang.String,com.azure.storage.file.datalake.options.DataLakePathCreateOptions)"
  fullName: "com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient.createFileIfNotExistsWithResponse(String fileName, DataLakePathCreateOptions options)"
  name: "createFileIfNotExistsWithResponse(String fileName, DataLakePathCreateOptions options)"
  nameWithType: "DataLakeDirectoryAsyncClient.createFileIfNotExistsWithResponse(String fileName, DataLakePathCreateOptions options)"
  summary: "Creates a new file within a directory if it does not exist."
  parameters:
  - description: "Name of the file to create."
    name: "fileName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "<xref uid=\"com.azure.storage.file.datalake.options.DataLakePathCreateOptions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DataLakePathCreateOptions\"></xref>\n metadata key or value, it must be removed or encoded."
    name: "options"
    type: "<xref href=\"com.azure.storage.file.datalake.options.DataLakePathCreateOptions?alt=com.azure.storage.file.datalake.options.DataLakePathCreateOptions&text=DataLakePathCreateOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<DataLakeFileAsyncClient>> createFileIfNotExistsWithResponse(String fileName, DataLakePathCreateOptions options)"
  desc: "Creates a new file within a directory if it does not exist. For more information, see the [Azure Docs][].\n\n**Code Samples**\n\n```java\nPathHttpHeaders headers = new PathHttpHeaders()\n     .setContentLanguage(\"en-US\")\n     .setContentType(\"binary\");\n String permissions = \"permissions\";\n String umask = \"umask\";\n DataLakePathCreateOptions options = new DataLakePathCreateOptions()\n     .setPermissions(permissions)\n     .setUmask(umask)\n     .setPathHttpHeaders(headers)\n     .setMetadata(Collections.singletonMap(\"metadata\", \"value\"));\n\n client.createFileIfNotExistsWithResponse(fileName, options).subscribe(response -> {\n     if (response.getStatusCode() == 409) {\n         System.out.println(\"Already exists.\");\n     } else {\n         System.out.println(\"successfully created.\");\n     }\n });\n```\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/datalakestoragegen2/path/create"
  returns:
    description: "A <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> containing a <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> whose <xref uid=\"com.azure.core.http.rest.Response.getValue*\" data-throw-if-not-resolved=\"false\" data-raw-source=\"value\"></xref> contains a\n <xref uid=\"com.azure.storage.file.datalake.DataLakeFileAsyncClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DataLakeFileAsyncClient\"></xref> used to interact with the file created. If <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref>'s status code is 201,\n a new file was successfully created. If status code is 409, a file with the same name already existed\n at this location."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.file.datalake.DataLakeFileAsyncClient?alt=com.azure.storage.file.datalake.DataLakeFileAsyncClient&text=DataLakeFileAsyncClient\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient.createFileWithResponse(java.lang.String,com.azure.storage.file.datalake.options.DataLakePathCreateOptions)"
  fullName: "com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient.createFileWithResponse(String fileName, DataLakePathCreateOptions options)"
  name: "createFileWithResponse(String fileName, DataLakePathCreateOptions options)"
  nameWithType: "DataLakeDirectoryAsyncClient.createFileWithResponse(String fileName, DataLakePathCreateOptions options)"
  summary: "Creates a new file within a directory."
  parameters:
  - description: "Name of the file to create."
    name: "fileName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "<xref uid=\"com.azure.storage.file.datalake.options.DataLakePathCreateOptions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DataLakePathCreateOptions\"></xref>"
    name: "options"
    type: "<xref href=\"com.azure.storage.file.datalake.options.DataLakePathCreateOptions?alt=com.azure.storage.file.datalake.options.DataLakePathCreateOptions&text=DataLakePathCreateOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<DataLakeFileAsyncClient>> createFileWithResponse(String fileName, DataLakePathCreateOptions options)"
  desc: "Creates a new file within a directory. If a file with the same name already exists, the file will be overwritten. For more information, see the [Azure Docs][].\n\n**Code Samples**\n\n```java\nPathHttpHeaders httpHeaders = new PathHttpHeaders()\n     .setContentLanguage(\"en-US\")\n     .setContentType(\"binary\");\n DataLakeRequestConditions requestConditions = new DataLakeRequestConditions()\n     .setLeaseId(leaseId);\n Map<String, String> metadata = Collections.singletonMap(\"metadata\", \"value\");\n String permissions = \"permissions\";\n String umask = \"umask\";\n String owner = \"rwx\";\n String group = \"r--\";\n String leaseId = UUID.randomUUID().toString();\n Integer duration = 15;\n DataLakePathCreateOptions options = new DataLakePathCreateOptions()\n     .setPermissions(permissions)\n     .setUmask(umask)\n     .setOwner(owner)\n     .setGroup(group)\n     .setPathHttpHeaders(httpHeaders)\n     .setRequestConditions(requestConditions)\n     .setMetadata(metadata)\n     .setProposedLeaseId(leaseId)\n     .setLeaseDuration(duration);\n\n DataLakeFileAsyncClient newFileClient = client.createFileWithResponse(fileName, options).block().getValue();\n```\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/datalakestoragegen2/path/create"
  returns:
    description: "A <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> containing a <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> whose <xref uid=\"com.azure.core.http.rest.Response.getValue*\" data-throw-if-not-resolved=\"false\" data-raw-source=\"value\"></xref> contains a <xref uid=\"com.azure.storage.file.datalake.DataLakeFileAsyncClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DataLakeFileAsyncClient\"></xref> used to interact with the file created."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.file.datalake.DataLakeFileAsyncClient?alt=com.azure.storage.file.datalake.DataLakeFileAsyncClient&text=DataLakeFileAsyncClient\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient.createFileWithResponse(java.lang.String,java.lang.String,java.lang.String,com.azure.storage.file.datalake.models.PathHttpHeaders,java.util.Map<java.lang.String,java.lang.String>,com.azure.storage.file.datalake.models.DataLakeRequestConditions)"
  fullName: "com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient.createFileWithResponse(String fileName, String permissions, String umask, PathHttpHeaders headers, Map<String,String> metadata, DataLakeRequestConditions requestConditions)"
  name: "createFileWithResponse(String fileName, String permissions, String umask, PathHttpHeaders headers, Map<String,String> metadata, DataLakeRequestConditions requestConditions)"
  nameWithType: "DataLakeDirectoryAsyncClient.createFileWithResponse(String fileName, String permissions, String umask, PathHttpHeaders headers, Map<String,String> metadata, DataLakeRequestConditions requestConditions)"
  summary: "Creates a new file within a directory."
  parameters:
  - description: "Name of the file to create."
    name: "fileName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "POSIX access permissions for the file owner, the file owning group, and others."
    name: "permissions"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Restricts permissions of the file to be created."
    name: "umask"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "<xref uid=\"com.azure.storage.file.datalake.models.PathHttpHeaders\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PathHttpHeaders\"></xref>"
    name: "headers"
    type: "<xref href=\"com.azure.storage.file.datalake.models.PathHttpHeaders?alt=com.azure.storage.file.datalake.models.PathHttpHeaders&text=PathHttpHeaders\" data-throw-if-not-resolved=\"False\" />"
  - description: "Metadata to associate with the file. If there is leading or trailing whitespace in any\n metadata key or value, it must be removed or encoded."
    name: "metadata"
    type: "<xref href=\"java.util.Map?alt=java.util.Map&text=Map\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />,<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />&gt;"
  - description: "<xref uid=\"com.azure.storage.file.datalake.models.DataLakeRequestConditions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DataLakeRequestConditions\"></xref>"
    name: "requestConditions"
    type: "<xref href=\"com.azure.storage.file.datalake.models.DataLakeRequestConditions?alt=com.azure.storage.file.datalake.models.DataLakeRequestConditions&text=DataLakeRequestConditions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<DataLakeFileAsyncClient>> createFileWithResponse(String fileName, String permissions, String umask, PathHttpHeaders headers, Map<String,String> metadata, DataLakeRequestConditions requestConditions)"
  desc: "Creates a new file within a directory. If a file with the same name already exists, the file will be overwritten. For more information, see the [Azure Docs][].\n\n**Code Samples**\n\n```java\nPathHttpHeaders httpHeaders = new PathHttpHeaders()\n     .setContentLanguage(\"en-US\")\n     .setContentType(\"binary\");\n DataLakeRequestConditions requestConditions = new DataLakeRequestConditions()\n     .setLeaseId(leaseId);\n String permissions = \"permissions\";\n String umask = \"umask\";\n DataLakeFileAsyncClient newFileClient = client.createFileWithResponse(fileName,\n     permissions, umask, httpHeaders, Collections.singletonMap(\"metadata\", \"value\"), requestConditions\n ).block().getValue();\n```\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/datalakestoragegen2/path/create"
  returns:
    description: "A <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> containing a <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> whose <xref uid=\"com.azure.core.http.rest.Response.getValue*\" data-throw-if-not-resolved=\"false\" data-raw-source=\"value\"></xref> contains a <xref uid=\"com.azure.storage.file.datalake.DataLakeFileAsyncClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DataLakeFileAsyncClient\"></xref> used to interact with the file created."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.file.datalake.DataLakeFileAsyncClient?alt=com.azure.storage.file.datalake.DataLakeFileAsyncClient&text=DataLakeFileAsyncClient\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient.createSubdirectory(java.lang.String)"
  fullName: "com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient.createSubdirectory(String subdirectoryName)"
  name: "createSubdirectory(String subdirectoryName)"
  nameWithType: "DataLakeDirectoryAsyncClient.createSubdirectory(String subdirectoryName)"
  summary: "Creates a new sub-directory within a directory."
  parameters:
  - description: "Name of the sub-directory to create."
    name: "subdirectoryName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<DataLakeDirectoryAsyncClient> createSubdirectory(String subdirectoryName)"
  desc: "Creates a new sub-directory within a directory. By default, this method will not overwrite an existing sub-directory. For more information, see the [Azure Docs][].\n\n**Code Samples**\n\n```java\nDataLakeDirectoryAsyncClient directoryClient = client.createSubdirectory(directoryName).block();\n```\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/datalakestoragegen2/path/create"
  returns:
    description: "A <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> containing a <xref uid=\"com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DataLakeDirectoryAsyncClient\"></xref> used to interact with the directory\n created."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient?alt=com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient&text=DataLakeDirectoryAsyncClient\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient.createSubdirectory(java.lang.String,boolean)"
  fullName: "com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient.createSubdirectory(String subdirectoryName, boolean overwrite)"
  name: "createSubdirectory(String subdirectoryName, boolean overwrite)"
  nameWithType: "DataLakeDirectoryAsyncClient.createSubdirectory(String subdirectoryName, boolean overwrite)"
  summary: "Creates a new sub-directory within a directory."
  parameters:
  - description: "Name of the sub-directory to create."
    name: "subdirectoryName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Whether to overwrite, should the subdirectory exist."
    name: "overwrite"
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<DataLakeDirectoryAsyncClient> createSubdirectory(String subdirectoryName, boolean overwrite)"
  desc: "Creates a new sub-directory within a directory. For more information, see the [Azure Docs][].\n\n**Code Samples**\n\n```java\nboolean overwrite = false; /* Default value. */\n DataLakeDirectoryAsyncClient dClient = client.createSubdirectory(directoryName, overwrite).block();\n```\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/datalakestoragegen2/path/create"
  returns:
    description: "A <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> containing a <xref uid=\"com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DataLakeDirectoryAsyncClient\"></xref> used to interact with the directory\n created."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient?alt=com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient&text=DataLakeDirectoryAsyncClient\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient.createSubdirectoryIfNotExists(java.lang.String)"
  fullName: "com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient.createSubdirectoryIfNotExists(String subdirectoryName)"
  name: "createSubdirectoryIfNotExists(String subdirectoryName)"
  nameWithType: "DataLakeDirectoryAsyncClient.createSubdirectoryIfNotExists(String subdirectoryName)"
  summary: "Creates a new subdirectory within a directory if it does not exist."
  parameters:
  - description: "Name of the sub-directory to create."
    name: "subdirectoryName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<DataLakeDirectoryAsyncClient> createSubdirectoryIfNotExists(String subdirectoryName)"
  desc: "Creates a new subdirectory within a directory if it does not exist. For more information, see the [Azure Docs][].\n\n**Code Samples**\n\n```java\nDataLakeDirectoryAsyncClient subdirectoryClient = client.createSubdirectoryIfNotExists(directoryName).block();\n```\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/datalakestoragegen2/path/create"
  returns:
    description: "A <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> containing a <xref uid=\"com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DataLakeDirectoryAsyncClient\"></xref> used to interact with the subdirectory\n created."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient?alt=com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient&text=DataLakeDirectoryAsyncClient\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient.createSubdirectoryIfNotExistsWithResponse(java.lang.String,com.azure.storage.file.datalake.options.DataLakePathCreateOptions)"
  fullName: "com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient.createSubdirectoryIfNotExistsWithResponse(String subdirectoryName, DataLakePathCreateOptions options)"
  name: "createSubdirectoryIfNotExistsWithResponse(String subdirectoryName, DataLakePathCreateOptions options)"
  nameWithType: "DataLakeDirectoryAsyncClient.createSubdirectoryIfNotExistsWithResponse(String subdirectoryName, DataLakePathCreateOptions options)"
  summary: "Creates a new sub-directory within a directory if it does not exist."
  parameters:
  - description: "Name of the subdirectory to create."
    name: "subdirectoryName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "<xref uid=\"com.azure.storage.file.datalake.options.DataLakePathCreateOptions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DataLakePathCreateOptions\"></xref>"
    name: "options"
    type: "<xref href=\"com.azure.storage.file.datalake.options.DataLakePathCreateOptions?alt=com.azure.storage.file.datalake.options.DataLakePathCreateOptions&text=DataLakePathCreateOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<DataLakeDirectoryAsyncClient>> createSubdirectoryIfNotExistsWithResponse(String subdirectoryName, DataLakePathCreateOptions options)"
  desc: "Creates a new sub-directory within a directory if it does not exist. For more information, see the [Azure Docs][].\n\n**Code Samples**\n\n```java\nPathHttpHeaders headers = new PathHttpHeaders()\n     .setContentLanguage(\"en-US\")\n     .setContentType(\"binary\");\n String permissions = \"permissions\";\n String umask = \"umask\";\n DataLakePathCreateOptions options = new DataLakePathCreateOptions()\n     .setPermissions(permissions)\n     .setUmask(umask)\n     .setPathHttpHeaders(headers)\n     .setMetadata(Collections.singletonMap(\"metadata\", \"value\"));\n\n client.createSubdirectoryIfNotExistsWithResponse(directoryName, options).subscribe(response -> {\n     if (response.getStatusCode() == 409) {\n         System.out.println(\"Already exists.\");\n     } else {\n         System.out.println(\"successfully created.\");\n     }\n });\n```\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/datalakestoragegen2/path/create"
  returns:
    description: "A <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> containing a <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> whose <xref uid=\"com.azure.core.http.rest.Response.getValue*\" data-throw-if-not-resolved=\"false\" data-raw-source=\"value\"></xref> contains a\n <xref uid=\"com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DataLakeDirectoryAsyncClient\"></xref> used to interact with the subdirectory created. If <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref>'s status\n code is 201, a new subdirectory was successfully created. If status code is 409, a subdirectory with the same\n name already existed at this location."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient?alt=com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient&text=DataLakeDirectoryAsyncClient\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient.createSubdirectoryWithResponse(java.lang.String,com.azure.storage.file.datalake.options.DataLakePathCreateOptions)"
  fullName: "com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient.createSubdirectoryWithResponse(String subdirectoryName, DataLakePathCreateOptions options)"
  name: "createSubdirectoryWithResponse(String subdirectoryName, DataLakePathCreateOptions options)"
  nameWithType: "DataLakeDirectoryAsyncClient.createSubdirectoryWithResponse(String subdirectoryName, DataLakePathCreateOptions options)"
  summary: "Creates a new sub-directory within a directory."
  parameters:
  - description: "Name of the sub-directory to create."
    name: "subdirectoryName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "<xref uid=\"com.azure.storage.file.datalake.options.DataLakePathCreateOptions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DataLakePathCreateOptions\"></xref>"
    name: "options"
    type: "<xref href=\"com.azure.storage.file.datalake.options.DataLakePathCreateOptions?alt=com.azure.storage.file.datalake.options.DataLakePathCreateOptions&text=DataLakePathCreateOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<DataLakeDirectoryAsyncClient>> createSubdirectoryWithResponse(String subdirectoryName, DataLakePathCreateOptions options)"
  desc: "Creates a new sub-directory within a directory. If a sub-directory with the same name already exists, the sub-directory will be overwritten. For more information, see the [Azure Docs][].\n\n**Code Samples**\n\n```java\nPathHttpHeaders httpHeaders = new PathHttpHeaders()\n     .setContentLanguage(\"en-US\")\n     .setContentType(\"binary\");\n DataLakeRequestConditions requestConditions = new DataLakeRequestConditions()\n     .setLeaseId(leaseId);\n Map<String, String> metadata = Collections.singletonMap(\"metadata\", \"value\");\n String permissions = \"permissions\";\n String umask = \"umask\";\n String owner = \"rwx\";\n String group = \"r--\";\n String leaseId = UUID.randomUUID().toString();\n Integer duration = 15;\n DataLakePathCreateOptions options = new DataLakePathCreateOptions()\n     .setPermissions(permissions)\n     .setUmask(umask)\n     .setOwner(owner)\n     .setGroup(group)\n     .setPathHttpHeaders(httpHeaders)\n     .setRequestConditions(requestConditions)\n     .setMetadata(metadata)\n     .setProposedLeaseId(leaseId)\n     .setLeaseDuration(duration);\n\n DataLakeDirectoryAsyncClient newDirectoryClient = client.createSubdirectoryWithResponse(directoryName, options)\n     .block().getValue();\n```\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/datalakestoragegen2/path/create"
  returns:
    description: "A <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> containing a <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> whose <xref uid=\"com.azure.core.http.rest.Response.getValue*\" data-throw-if-not-resolved=\"false\" data-raw-source=\"value\"></xref> contains a <xref uid=\"com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DataLakeDirectoryAsyncClient\"></xref> used to interact with the sub-directory created."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient?alt=com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient&text=DataLakeDirectoryAsyncClient\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient.createSubdirectoryWithResponse(java.lang.String,java.lang.String,java.lang.String,com.azure.storage.file.datalake.models.PathHttpHeaders,java.util.Map<java.lang.String,java.lang.String>,com.azure.storage.file.datalake.models.DataLakeRequestConditions)"
  fullName: "com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient.createSubdirectoryWithResponse(String subdirectoryName, String permissions, String umask, PathHttpHeaders headers, Map<String,String> metadata, DataLakeRequestConditions requestConditions)"
  name: "createSubdirectoryWithResponse(String subdirectoryName, String permissions, String umask, PathHttpHeaders headers, Map<String,String> metadata, DataLakeRequestConditions requestConditions)"
  nameWithType: "DataLakeDirectoryAsyncClient.createSubdirectoryWithResponse(String subdirectoryName, String permissions, String umask, PathHttpHeaders headers, Map<String,String> metadata, DataLakeRequestConditions requestConditions)"
  summary: "Creates a new sub-directory within a directory."
  parameters:
  - description: "Name of the sub-directory to create."
    name: "subdirectoryName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "POSIX access permissions for the sub-directory owner, the sub-directory owning group, and\n others."
    name: "permissions"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Restricts permissions of the sub-directory to be created."
    name: "umask"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "<xref uid=\"com.azure.storage.file.datalake.models.PathHttpHeaders\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PathHttpHeaders\"></xref>"
    name: "headers"
    type: "<xref href=\"com.azure.storage.file.datalake.models.PathHttpHeaders?alt=com.azure.storage.file.datalake.models.PathHttpHeaders&text=PathHttpHeaders\" data-throw-if-not-resolved=\"False\" />"
  - description: "Metadata to associate with the resource. If there is leading or trailing whitespace in any\n metadata key or value, it must be removed or encoded."
    name: "metadata"
    type: "<xref href=\"java.util.Map?alt=java.util.Map&text=Map\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />,<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />&gt;"
  - description: "<xref uid=\"com.azure.storage.file.datalake.models.DataLakeRequestConditions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DataLakeRequestConditions\"></xref>"
    name: "requestConditions"
    type: "<xref href=\"com.azure.storage.file.datalake.models.DataLakeRequestConditions?alt=com.azure.storage.file.datalake.models.DataLakeRequestConditions&text=DataLakeRequestConditions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<DataLakeDirectoryAsyncClient>> createSubdirectoryWithResponse(String subdirectoryName, String permissions, String umask, PathHttpHeaders headers, Map<String,String> metadata, DataLakeRequestConditions requestConditions)"
  desc: "Creates a new sub-directory within a directory. If a sub-directory with the same name already exists, the sub-directory will be overwritten. For more information, see the [Azure Docs][].\n\n**Code Samples**\n\n```java\nPathHttpHeaders httpHeaders = new PathHttpHeaders()\n     .setContentLanguage(\"en-US\")\n     .setContentType(\"binary\");\n DataLakeRequestConditions requestConditions = new DataLakeRequestConditions()\n     .setLeaseId(leaseId);\n String permissions = \"permissions\";\n String umask = \"umask\";\n DataLakeDirectoryAsyncClient newDirectoryClient = client.createSubdirectoryWithResponse(\n     directoryName, permissions, umask, httpHeaders, Collections.singletonMap(\"metadata\", \"value\"),\n     requestConditions\n ).block().getValue();\n```\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/datalakestoragegen2/path/create"
  returns:
    description: "A <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> containing a <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> whose <xref uid=\"com.azure.core.http.rest.Response.getValue*\" data-throw-if-not-resolved=\"false\" data-raw-source=\"value\"></xref> contains a <xref uid=\"com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DataLakeDirectoryAsyncClient\"></xref> used to interact with the sub-directory created."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient?alt=com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient&text=DataLakeDirectoryAsyncClient\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient.delete()"
  fullName: "com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient.delete()"
  name: "delete()"
  nameWithType: "DataLakeDirectoryAsyncClient.delete()"
  summary: "Deletes a directory."
  syntax: "public Mono<Void> delete()"
  desc: "Deletes a directory.\n\n**Code Samples**\n\n```java\nclient.delete().subscribe(response ->\n     System.out.println(\"Delete request completed\"));\n```\n\nFor more information see the [Azure Docs][]\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/datalakestoragegen2/path/delete"
  returns:
    description: "A reactive response signalling completion."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient.deleteFile(java.lang.String)"
  fullName: "com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient.deleteFile(String fileName)"
  name: "deleteFile(String fileName)"
  nameWithType: "DataLakeDirectoryAsyncClient.deleteFile(String fileName)"
  summary: "Deletes the specified file in the file system."
  parameters:
  - description: "Name of the file to delete."
    name: "fileName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Void> deleteFile(String fileName)"
  desc: "Deletes the specified file in the file system. If the file doesn't exist the operation fails. For more information see the [Azure Docs][].\n\n**Code Samples**\n\n```java\nclient.deleteFile(fileName).subscribe(response ->\n     System.out.println(\"Delete request completed\"));\n```\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/datalakestoragegen2/path/delete"
  returns:
    description: "A reactive response signalling completion."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient.deleteFileIfExists(java.lang.String)"
  fullName: "com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient.deleteFileIfExists(String fileName)"
  name: "deleteFileIfExists(String fileName)"
  nameWithType: "DataLakeDirectoryAsyncClient.deleteFileIfExists(String fileName)"
  summary: "Deletes the specified file in the file system if it exists."
  parameters:
  - description: "Name of the file to delete."
    name: "fileName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Boolean> deleteFileIfExists(String fileName)"
  desc: "Deletes the specified file in the file system if it exists. For more information see the [Azure Docs][].\n\n**Code Samples**\n\n```java\nclient.deleteFileIfExists(fileName).subscribe(deleted -> {\n     if (deleted) {\n         System.out.println(\"successfully deleted.\");\n     } else {\n         System.out.println(\"Does not exist.\");\n     }\n });\n```\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/datalakestoragegen2/path/delete"
  returns:
    description: "a reactive response signaling completion. <code>true</code> indicates that the specified file was successfully\n deleted, <code>false</code> indicates that the specified file did not exist."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Boolean?alt=java.lang.Boolean&text=Boolean\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient.deleteFileIfExistsWithResponse(java.lang.String,com.azure.storage.file.datalake.options.DataLakePathDeleteOptions)"
  fullName: "com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient.deleteFileIfExistsWithResponse(String fileName, DataLakePathDeleteOptions options)"
  name: "deleteFileIfExistsWithResponse(String fileName, DataLakePathDeleteOptions options)"
  nameWithType: "DataLakeDirectoryAsyncClient.deleteFileIfExistsWithResponse(String fileName, DataLakePathDeleteOptions options)"
  summary: "Deletes the specified file in the directory if it exists."
  parameters:
  - description: "Name of the file to delete."
    name: "fileName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "<xref uid=\"com.azure.storage.file.datalake.options.DataLakePathDeleteOptions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DataLakePathDeleteOptions\"></xref>"
    name: "options"
    type: "<xref href=\"com.azure.storage.file.datalake.options.DataLakePathDeleteOptions?alt=com.azure.storage.file.datalake.options.DataLakePathDeleteOptions&text=DataLakePathDeleteOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<Boolean>> deleteFileIfExistsWithResponse(String fileName, DataLakePathDeleteOptions options)"
  desc: "Deletes the specified file in the directory if it exists. For more information see the [Azure Docs][].\n\n**Code Samples**\n\n```java\nDataLakeRequestConditions requestConditions = new DataLakeRequestConditions()\n     .setLeaseId(leaseId);\n DataLakePathDeleteOptions options = new DataLakePathDeleteOptions().setIsRecursive(false)\n     .setRequestConditions(requestConditions);\n\n client.deleteFileIfExistsWithResponse(fileName, options).subscribe(response -> {\n     if (response.getStatusCode() == 404) {\n         System.out.println(\"Does not exist.\");\n     } else {\n         System.out.println(\"successfully deleted.\");\n     }\n });\n```\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/datalakestoragegen2/path/delete"
  returns:
    description: "A reactive response signaling completion. If <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref>'s status code is 200, the specified file was\n successfully deleted. If status code is 404, the specified file does not exist."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Boolean?alt=java.lang.Boolean&text=Boolean\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient.deleteFileWithResponse(java.lang.String,com.azure.storage.file.datalake.models.DataLakeRequestConditions)"
  fullName: "com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient.deleteFileWithResponse(String fileName, DataLakeRequestConditions requestConditions)"
  name: "deleteFileWithResponse(String fileName, DataLakeRequestConditions requestConditions)"
  nameWithType: "DataLakeDirectoryAsyncClient.deleteFileWithResponse(String fileName, DataLakeRequestConditions requestConditions)"
  summary: "Deletes the specified file in the directory."
  parameters:
  - description: "Name of the file to delete."
    name: "fileName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "<xref uid=\"com.azure.storage.file.datalake.models.DataLakeRequestConditions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DataLakeRequestConditions\"></xref>"
    name: "requestConditions"
    type: "<xref href=\"com.azure.storage.file.datalake.models.DataLakeRequestConditions?alt=com.azure.storage.file.datalake.models.DataLakeRequestConditions&text=DataLakeRequestConditions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<Void>> deleteFileWithResponse(String fileName, DataLakeRequestConditions requestConditions)"
  desc: "Deletes the specified file in the directory. If the file doesn't exist the operation fails. For more information see the [Azure Docs][].\n\n**Code Samples**\n\n```java\nDataLakeRequestConditions requestConditions = new DataLakeRequestConditions()\n     .setLeaseId(leaseId);\n\n client.deleteFileWithResponse(fileName, requestConditions)\n     .subscribe(response -> System.out.println(\"Delete request completed\"));\n```\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/datalakestoragegen2/path/delete"
  returns:
    description: "A <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> containing status code and HTTP headers"
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient.deleteIfExists()"
  fullName: "com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient.deleteIfExists()"
  name: "deleteIfExists()"
  nameWithType: "DataLakeDirectoryAsyncClient.deleteIfExists()"
  summary: "Deletes a directory if it exists."
  overridden: "com.azure.storage.file.datalake.DataLakePathAsyncClient.deleteIfExists()"
  syntax: "public Mono<Boolean> deleteIfExists()"
  desc: "Deletes a directory if it exists.\n\n**Code Samples**\n\n```java\nclient.deleteIfExists().subscribe(deleted -> {\n     if (deleted) {\n         System.out.println(\"Successfully deleted.\");\n     } else {\n         System.out.println(\"Does not exist.\");\n     }\n });\n```\n\nFor more information see the [Azure Docs][]\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/datalakestoragegen2/path/delete"
  returns:
    description: "a reactive response signaling completion. <code>true</code> indicates that the directory was successfully\n deleted, <code>true</code> indicates that the directory did not exist."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Boolean?alt=java.lang.Boolean&text=Boolean\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient.deleteIfExistsWithResponse(com.azure.storage.file.datalake.options.DataLakePathDeleteOptions)"
  fullName: "com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient.deleteIfExistsWithResponse(DataLakePathDeleteOptions options)"
  name: "deleteIfExistsWithResponse(DataLakePathDeleteOptions options)"
  nameWithType: "DataLakeDirectoryAsyncClient.deleteIfExistsWithResponse(DataLakePathDeleteOptions options)"
  summary: "Deletes a directory if it exists."
  overridden: "com.azure.storage.file.datalake.DataLakePathAsyncClient.deleteIfExistsWithResponse(com.azure.storage.file.datalake.options.DataLakePathDeleteOptions)"
  parameters:
  - description: "<xref uid=\"com.azure.storage.file.datalake.options.DataLakePathDeleteOptions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DataLakePathDeleteOptions\"></xref>"
    name: "options"
    type: "<xref href=\"com.azure.storage.file.datalake.options.DataLakePathDeleteOptions?alt=com.azure.storage.file.datalake.options.DataLakePathDeleteOptions&text=DataLakePathDeleteOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<Boolean>> deleteIfExistsWithResponse(DataLakePathDeleteOptions options)"
  desc: "Deletes a directory if it exists.\n\n**Code Samples**\n\n```java\nDataLakeRequestConditions requestConditions = new DataLakeRequestConditions()\n     .setLeaseId(leaseId);\n boolean recursive = false; // Default value\n DataLakePathDeleteOptions options = new DataLakePathDeleteOptions().setIsRecursive(recursive)\n     .setRequestConditions(requestConditions);\n\n client.deleteIfExistsWithResponse(options).subscribe(response -> {\n     if (response.getStatusCode() == 404) {\n         System.out.println(\"Does not exist.\");\n     } else {\n         System.out.println(\"successfully deleted.\");\n     }\n });\n```\n\nFor more information see the [Azure Docs][]\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/datalakestoragegen2/path/delete"
  returns:
    description: "A reactive response signaling completion. If <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref>'s status code is 200, the directory was\n successfully deleted. If status code is 404, the directory does not exist."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Boolean?alt=java.lang.Boolean&text=Boolean\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient.deleteSubdirectory(java.lang.String)"
  fullName: "com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient.deleteSubdirectory(String subdirectoryName)"
  name: "deleteSubdirectory(String subdirectoryName)"
  nameWithType: "DataLakeDirectoryAsyncClient.deleteSubdirectory(String subdirectoryName)"
  summary: "Deletes the specified sub-directory in the directory."
  parameters:
  - description: "Name of the sub-directory to delete."
    name: "subdirectoryName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Void> deleteSubdirectory(String subdirectoryName)"
  desc: "Deletes the specified sub-directory in the directory. If the sub-directory doesn't exist or is not empty the operation fails. For more information see the [Azure Docs][].\n\n**Code Samples**\n\n```java\nclient.deleteSubdirectory(directoryName).subscribe(response ->\n     System.out.println(\"Delete request completed\"));\n```\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/datalakestoragegen2/path/delete"
  returns:
    description: "A reactive response signalling completion."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient.deleteSubdirectoryIfExists(java.lang.String)"
  fullName: "com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient.deleteSubdirectoryIfExists(String subdirectoryName)"
  name: "deleteSubdirectoryIfExists(String subdirectoryName)"
  nameWithType: "DataLakeDirectoryAsyncClient.deleteSubdirectoryIfExists(String subdirectoryName)"
  summary: "Deletes the specified subdirectory in the directory if it exists."
  parameters:
  - description: "Name of the subdirectory to delete."
    name: "subdirectoryName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Boolean> deleteSubdirectoryIfExists(String subdirectoryName)"
  desc: "Deletes the specified subdirectory in the directory if it exists. For more information see the [Azure Docs][].\n\n**Code Samples**\n\n```java\nclient.deleteSubdirectoryIfExists(directoryName).subscribe(deleted -> {\n     if (deleted) {\n         System.out.println(\"Successfully deleted.\");\n     } else {\n         System.out.println(\"Does not exist.\");\n     }\n });\n```\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/datalakestoragegen2/path/delete"
  returns:
    description: "A reactive response signaling completion. <code>true</code> indicates that the subdirectory was deleted.\n <code>false</code> indicates the specified subdirectory does not exist."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Boolean?alt=java.lang.Boolean&text=Boolean\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient.deleteSubdirectoryIfExistsWithResponse(java.lang.String,com.azure.storage.file.datalake.options.DataLakePathDeleteOptions)"
  fullName: "com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient.deleteSubdirectoryIfExistsWithResponse(String directoryName, DataLakePathDeleteOptions options)"
  name: "deleteSubdirectoryIfExistsWithResponse(String directoryName, DataLakePathDeleteOptions options)"
  nameWithType: "DataLakeDirectoryAsyncClient.deleteSubdirectoryIfExistsWithResponse(String directoryName, DataLakePathDeleteOptions options)"
  summary: "Deletes the specified subdirectory in the directory if it exists."
  parameters:
  - description: "Name of the subdirectory to delete."
    name: "directoryName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "<xref uid=\"com.azure.storage.file.datalake.options.DataLakePathDeleteOptions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DataLakePathDeleteOptions\"></xref>"
    name: "options"
    type: "<xref href=\"com.azure.storage.file.datalake.options.DataLakePathDeleteOptions?alt=com.azure.storage.file.datalake.options.DataLakePathDeleteOptions&text=DataLakePathDeleteOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<Boolean>> deleteSubdirectoryIfExistsWithResponse(String directoryName, DataLakePathDeleteOptions options)"
  desc: "Deletes the specified subdirectory in the directory if it exists. For more information see the [Azure Docs][].\n\n**Code Samples**\n\n```java\nDataLakeRequestConditions requestConditions = new DataLakeRequestConditions()\n     .setLeaseId(leaseId);\n boolean recursive = false; // Default value\n DataLakePathDeleteOptions options = new DataLakePathDeleteOptions().setIsRecursive(recursive)\n     .setRequestConditions(requestConditions);\n\n client.deleteSubdirectoryIfExistsWithResponse(directoryName, options).subscribe(response -> {\n     if (response.getStatusCode() == 404) {\n         System.out.println(\"Does not exist.\");\n     } else {\n         System.out.println(\"successfully deleted.\");\n     }\n });\n```\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/datalakestoragegen2/path/delete"
  returns:
    description: "A reactive response signaling completion. If <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref>'s status code is 200, the specified subdirectory\n was successfully deleted. If status code is 404, the specified subdirectory does not exist."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Boolean?alt=java.lang.Boolean&text=Boolean\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient.deleteSubdirectoryWithResponse(java.lang.String,boolean,com.azure.storage.file.datalake.models.DataLakeRequestConditions)"
  fullName: "com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient.deleteSubdirectoryWithResponse(String directoryName, boolean recursive, DataLakeRequestConditions requestConditions)"
  name: "deleteSubdirectoryWithResponse(String directoryName, boolean recursive, DataLakeRequestConditions requestConditions)"
  nameWithType: "DataLakeDirectoryAsyncClient.deleteSubdirectoryWithResponse(String directoryName, boolean recursive, DataLakeRequestConditions requestConditions)"
  summary: "Deletes the specified sub-directory in the directory."
  parameters:
  - description: "Name of the sub-directory to delete."
    name: "directoryName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Whether to delete all paths beneath the sub-directory."
    name: "recursive"
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
  - description: "<xref uid=\"com.azure.storage.file.datalake.models.DataLakeRequestConditions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DataLakeRequestConditions\"></xref>"
    name: "requestConditions"
    type: "<xref href=\"com.azure.storage.file.datalake.models.DataLakeRequestConditions?alt=com.azure.storage.file.datalake.models.DataLakeRequestConditions&text=DataLakeRequestConditions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<Void>> deleteSubdirectoryWithResponse(String directoryName, boolean recursive, DataLakeRequestConditions requestConditions)"
  desc: "Deletes the specified sub-directory in the directory. If the sub-directory doesn't exist or is not empty the operation fails. For more information see the [Azure Docs][].\n\n**Code Samples**\n\n```java\nDataLakeRequestConditions requestConditions = new DataLakeRequestConditions()\n     .setLeaseId(leaseId);\n boolean recursive = false; // Default value\n\n client.deleteSubdirectoryWithResponse(directoryName, recursive, requestConditions)\n     .subscribe(response -> System.out.println(\"Delete request completed\"));\n```\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/datalakestoragegen2/path/delete"
  returns:
    description: "A <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> containing status code and HTTP headers"
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient.deleteWithResponse(boolean,com.azure.storage.file.datalake.models.DataLakeRequestConditions)"
  fullName: "com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient.deleteWithResponse(boolean recursive, DataLakeRequestConditions requestConditions)"
  name: "deleteWithResponse(boolean recursive, DataLakeRequestConditions requestConditions)"
  nameWithType: "DataLakeDirectoryAsyncClient.deleteWithResponse(boolean recursive, DataLakeRequestConditions requestConditions)"
  summary: "Deletes a directory."
  parameters:
  - description: "Whether to delete all paths beneath the directory."
    name: "recursive"
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
  - description: "<xref uid=\"com.azure.storage.file.datalake.models.DataLakeRequestConditions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DataLakeRequestConditions\"></xref>"
    name: "requestConditions"
    type: "<xref href=\"com.azure.storage.file.datalake.models.DataLakeRequestConditions?alt=com.azure.storage.file.datalake.models.DataLakeRequestConditions&text=DataLakeRequestConditions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<Void>> deleteWithResponse(boolean recursive, DataLakeRequestConditions requestConditions)"
  desc: "Deletes a directory.\n\n**Code Samples**\n\n```java\nDataLakeRequestConditions requestConditions = new DataLakeRequestConditions()\n     .setLeaseId(leaseId);\n boolean recursive = false; // Default value\n\n client.deleteWithResponse(recursive, requestConditions)\n     .subscribe(response -> System.out.println(\"Delete request completed\"));\n```\n\nFor more information see the [Azure Docs][]\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/datalakestoragegen2/path/delete"
  returns:
    description: "A reactive response signalling completion."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient.getCustomerProvidedKeyAsyncClient(com.azure.storage.file.datalake.models.CustomerProvidedKey)"
  fullName: "com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient.getCustomerProvidedKeyAsyncClient(CustomerProvidedKey customerProvidedKey)"
  name: "getCustomerProvidedKeyAsyncClient(CustomerProvidedKey customerProvidedKey)"
  nameWithType: "DataLakeDirectoryAsyncClient.getCustomerProvidedKeyAsyncClient(CustomerProvidedKey customerProvidedKey)"
  summary: "Creates a new <xref uid=\"com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DataLakeDirectoryAsyncClient\"></xref> with the specified `customerProvidedKey`."
  overridden: "com.azure.storage.file.datalake.DataLakePathAsyncClient.getCustomerProvidedKeyAsyncClient(com.azure.storage.file.datalake.models.CustomerProvidedKey)"
  parameters:
  - description: "the <xref uid=\"com.azure.storage.file.datalake.models.CustomerProvidedKey\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CustomerProvidedKey\"></xref> for the directory,\n pass <code>null</code> to use no customer provided key."
    name: "customerProvidedKey"
    type: "<xref href=\"com.azure.storage.file.datalake.models.CustomerProvidedKey?alt=com.azure.storage.file.datalake.models.CustomerProvidedKey&text=CustomerProvidedKey\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public DataLakeDirectoryAsyncClient getCustomerProvidedKeyAsyncClient(CustomerProvidedKey customerProvidedKey)"
  desc: "Creates a new <xref uid=\"com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DataLakeDirectoryAsyncClient\"></xref> with the specified `customerProvidedKey`."
  returns:
    description: "a <xref uid=\"com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DataLakeDirectoryAsyncClient\"></xref> with the specified <code>customerProvidedKey</code>."
    type: "<xref href=\"com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient?alt=com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient&text=DataLakeDirectoryAsyncClient\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient.getDirectoryName()"
  fullName: "com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient.getDirectoryName()"
  name: "getDirectoryName()"
  nameWithType: "DataLakeDirectoryAsyncClient.getDirectoryName()"
  summary: "Gets the name of this directory, not including its full path."
  syntax: "public String getDirectoryName()"
  desc: "Gets the name of this directory, not including its full path."
  returns:
    description: "The name of the directory."
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient.getDirectoryPath()"
  fullName: "com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient.getDirectoryPath()"
  name: "getDirectoryPath()"
  nameWithType: "DataLakeDirectoryAsyncClient.getDirectoryPath()"
  summary: "Gets the path of this directory, not including the name of the resource itself."
  syntax: "public String getDirectoryPath()"
  desc: "Gets the path of this directory, not including the name of the resource itself."
  returns:
    description: "The path of the directory."
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient.getDirectoryUrl()"
  fullName: "com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient.getDirectoryUrl()"
  name: "getDirectoryUrl()"
  nameWithType: "DataLakeDirectoryAsyncClient.getDirectoryUrl()"
  summary: "Gets the URL of the directory represented by this client on the Data Lake service."
  syntax: "public String getDirectoryUrl()"
  desc: "Gets the URL of the directory represented by this client on the Data Lake service."
  returns:
    description: "the URL."
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient.getFileAsyncClient(java.lang.String)"
  fullName: "com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient.getFileAsyncClient(String fileName)"
  name: "getFileAsyncClient(String fileName)"
  nameWithType: "DataLakeDirectoryAsyncClient.getFileAsyncClient(String fileName)"
  summary: "Creates a new Data<wbr>Lake<wbr>File<wbr>Async<wbr>Client object by concatenating file<wbr>Name to the end of Data<wbr>Lake<wbr>Directory<wbr>Async<wbr>Client's URL."
  parameters:
  - description: "A <code>String</code> representing the name of the file."
    name: "fileName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public DataLakeFileAsyncClient getFileAsyncClient(String fileName)"
  desc: "Creates a new DataLakeFileAsyncClient object by concatenating fileName to the end of DataLakeDirectoryAsyncClient's URL. The new DataLakeFileAsyncClient uses the same request policy pipeline as the DataLakeDirectoryAsyncClient.\n\n**Code Samples**\n\n```java\nDataLakeFileAsyncClient dataLakeFileClient = client.getFileAsyncClient(fileName);\n```"
  returns:
    description: "A new <xref uid=\"com.azure.storage.file.datalake.DataLakeFileAsyncClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DataLakeFileAsyncClient\"></xref> object which references the file with the specified name in this\n file system."
    type: "<xref href=\"com.azure.storage.file.datalake.DataLakeFileAsyncClient?alt=com.azure.storage.file.datalake.DataLakeFileAsyncClient&text=DataLakeFileAsyncClient\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient.getSubdirectoryAsyncClient(java.lang.String)"
  fullName: "com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient.getSubdirectoryAsyncClient(String subdirectoryName)"
  name: "getSubdirectoryAsyncClient(String subdirectoryName)"
  nameWithType: "DataLakeDirectoryAsyncClient.getSubdirectoryAsyncClient(String subdirectoryName)"
  summary: "Creates a new Data<wbr>Lake<wbr>Directory<wbr>Async<wbr>Client object by concatenating subdirectory<wbr>Name to the end of Data<wbr>Lake<wbr>Directory<wbr>Async<wbr>Client's URL."
  parameters:
  - description: "A <code>String</code> representing the name of the sub-directory."
    name: "subdirectoryName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public DataLakeDirectoryAsyncClient getSubdirectoryAsyncClient(String subdirectoryName)"
  desc: "Creates a new DataLakeDirectoryAsyncClient object by concatenating subdirectoryName to the end of DataLakeDirectoryAsyncClient's URL. The new DataLakeDirectoryAsyncClient uses the same request policy pipeline as the DataLakeDirectoryAsyncClient.\n\n**Code Samples**\n\n```java\nDataLakeDirectoryAsyncClient dataLakeDirectoryClient = client.getSubdirectoryAsyncClient(directoryName);\n```"
  returns:
    description: "A new <xref uid=\"com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DataLakeDirectoryAsyncClient\"></xref> object which references the directory with the specified name\n in this file system."
    type: "<xref href=\"com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient?alt=com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient&text=DataLakeDirectoryAsyncClient\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient.listPaths()"
  fullName: "com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient.listPaths()"
  name: "listPaths()"
  nameWithType: "DataLakeDirectoryAsyncClient.listPaths()"
  summary: "Returns a reactive Publisher emitting all the files/directories in this directory lazily as needed."
  syntax: "public PagedFlux<PathItem> listPaths()"
  desc: "Returns a reactive Publisher emitting all the files/directories in this directory lazily as needed. For more information, see the [Azure Docs][].\n\n**Code Samples**\n\n```java\nclient.listPaths().subscribe(path -> System.out.printf(\"Name: %s%n\", path.getName()));\n```\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/datalakestoragegen2/filesystem/list"
  returns:
    description: "A reactive response emitting the list of files/directories."
    type: "<xref href=\"com.azure.core.http.rest.PagedFlux?alt=com.azure.core.http.rest.PagedFlux&text=PagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.file.datalake.models.PathItem?alt=com.azure.storage.file.datalake.models.PathItem&text=PathItem\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient.listPaths(boolean,boolean,java.lang.Integer)"
  fullName: "com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient.listPaths(boolean recursive, boolean userPrincipleNameReturned, Integer maxResults)"
  name: "listPaths(boolean recursive, boolean userPrincipleNameReturned, Integer maxResults)"
  nameWithType: "DataLakeDirectoryAsyncClient.listPaths(boolean recursive, boolean userPrincipleNameReturned, Integer maxResults)"
  summary: "Returns a reactive Publisher emitting all the files/directories in this directory lazily as needed."
  parameters:
  - description: "Specifies if the call should recursively include all paths."
    name: "recursive"
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
  - description: "If \"true\", the user identity values returned by the x-ms-owner, x-ms-group,\n and x-ms-acl response headers will be transformed from Azure Active Directory Object IDs to User Principal Names.\n If \"false\", the values will be returned as Azure Active Directory Object IDs.\n The default value is false. Note that group and application Object IDs are not translated because they do not\n have unique friendly names."
    name: "userPrincipleNameReturned"
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
  - description: "Specifies the maximum number of blobs to return per page, including all BlobPrefix elements. If\n the request does not specify maxResults or specifies a value greater than 5,000, the server will return up to\n 5,000 items per page."
    name: "maxResults"
    type: "<xref href=\"java.lang.Integer?alt=java.lang.Integer&text=Integer\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PagedFlux<PathItem> listPaths(boolean recursive, boolean userPrincipleNameReturned, Integer maxResults)"
  desc: "Returns a reactive Publisher emitting all the files/directories in this directory lazily as needed. For more information, see the [Azure Docs][].\n\n**Code Samples**\n\n```java\nclient.listPaths(false, false, 10)\n     .subscribe(path -> System.out.printf(\"Name: %s%n\", path.getName()));\n```\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/datalakestoragegen2/filesystem/list"
  returns:
    description: "A reactive response emitting the list of files/directories."
    type: "<xref href=\"com.azure.core.http.rest.PagedFlux?alt=com.azure.core.http.rest.PagedFlux&text=PagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.file.datalake.models.PathItem?alt=com.azure.storage.file.datalake.models.PathItem&text=PathItem\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient.rename(java.lang.String,java.lang.String)"
  fullName: "com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient.rename(String destinationFileSystem, String destinationPath)"
  name: "rename(String destinationFileSystem, String destinationPath)"
  nameWithType: "DataLakeDirectoryAsyncClient.rename(String destinationFileSystem, String destinationPath)"
  summary: "Moves the directory to another location within the file system."
  parameters:
  - description: "The file system of the destination within the account.\n <code>null</code> for the current file system."
    name: "destinationFileSystem"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Relative path from the file system to rename the directory to, excludes the file system\n name. For example if you want to move a directory with fileSystem = \"myfilesystem\", path = \"mydir/mysubdir\" to\n another path in myfilesystem (ex: newdir) then set the destinationPath = \"newdir\""
    name: "destinationPath"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<DataLakeDirectoryAsyncClient> rename(String destinationFileSystem, String destinationPath)"
  desc: "Moves the directory to another location within the file system. For more information see the [Azure Docs][].\n\n**Code Samples**\n\n```java\nDataLakeDirectoryAsyncClient renamedClient = client.rename(fileSystemName, destinationPath).block();\n System.out.println(\"Directory Client has been renamed\");\n```\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/datalakestoragegen2/path/create"
  returns:
    description: "A <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> containing a <xref uid=\"com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DataLakeDirectoryAsyncClient\"></xref> used to interact with the new directory\n created."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient?alt=com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient&text=DataLakeDirectoryAsyncClient\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient.renameWithResponse(java.lang.String,java.lang.String,com.azure.storage.file.datalake.models.DataLakeRequestConditions,com.azure.storage.file.datalake.models.DataLakeRequestConditions)"
  fullName: "com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient.renameWithResponse(String destinationFileSystem, String destinationPath, DataLakeRequestConditions sourceRequestConditions, DataLakeRequestConditions destinationRequestConditions)"
  name: "renameWithResponse(String destinationFileSystem, String destinationPath, DataLakeRequestConditions sourceRequestConditions, DataLakeRequestConditions destinationRequestConditions)"
  nameWithType: "DataLakeDirectoryAsyncClient.renameWithResponse(String destinationFileSystem, String destinationPath, DataLakeRequestConditions sourceRequestConditions, DataLakeRequestConditions destinationRequestConditions)"
  summary: "Moves the directory to another location within the file system."
  parameters:
  - description: "The file system of the destination within the account.\n <code>null</code> for the current file system."
    name: "destinationFileSystem"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Relative path from the file system to rename the directory to, excludes the file system\n name. For example if you want to move a directory with fileSystem = \"myfilesystem\", path = \"mydir/mysubdir\" to\n another path in myfilesystem (ex: newdir) then set the destinationPath = \"newdir\""
    name: "destinationPath"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "<xref uid=\"com.azure.storage.file.datalake.models.DataLakeRequestConditions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DataLakeRequestConditions\"></xref> against the source."
    name: "sourceRequestConditions"
    type: "<xref href=\"com.azure.storage.file.datalake.models.DataLakeRequestConditions?alt=com.azure.storage.file.datalake.models.DataLakeRequestConditions&text=DataLakeRequestConditions\" data-throw-if-not-resolved=\"False\" />"
  - description: "<xref uid=\"com.azure.storage.file.datalake.models.DataLakeRequestConditions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DataLakeRequestConditions\"></xref> against the destination."
    name: "destinationRequestConditions"
    type: "<xref href=\"com.azure.storage.file.datalake.models.DataLakeRequestConditions?alt=com.azure.storage.file.datalake.models.DataLakeRequestConditions&text=DataLakeRequestConditions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<DataLakeDirectoryAsyncClient>> renameWithResponse(String destinationFileSystem, String destinationPath, DataLakeRequestConditions sourceRequestConditions, DataLakeRequestConditions destinationRequestConditions)"
  desc: "Moves the directory to another location within the file system. For more information, see the [Azure Docs][].\n\n**Code Samples**\n\n```java\nDataLakeRequestConditions sourceRequestConditions = new DataLakeRequestConditions()\n     .setLeaseId(leaseId);\n DataLakeRequestConditions destinationRequestConditions = new DataLakeRequestConditions();\n\n DataLakeDirectoryAsyncClient newRenamedClient = client.renameWithResponse(fileSystemName, destinationPath,\n     sourceRequestConditions, destinationRequestConditions).block().getValue();\n System.out.println(\"Directory Client has been renamed\");\n```\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/datalakestoragegen2/path/create"
  returns:
    description: "A <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> containing a <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> whose <xref uid=\"com.azure.core.http.rest.Response.getValue*\" data-throw-if-not-resolved=\"false\" data-raw-source=\"value\"></xref> contains a <xref uid=\"com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DataLakeDirectoryAsyncClient\"></xref> used to interact with the directory created."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient?alt=com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient&text=DataLakeDirectoryAsyncClient\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
type: "class"
desc: "This class provides a client that contains directory operations for Azure Storage Data Lake. Operations provided by this client include creating a directory, deleting a directory, renaming a directory, setting metadata and http headers, setting and retrieving access control, getting properties and creating and deleting files and subdirectories.\n\nThis client is instantiated through <xref uid=\"com.azure.storage.file.datalake.DataLakePathClientBuilder\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DataLakePathClientBuilder\"></xref> or retrieved via <xref uid=\"com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.getDirectoryAsyncClient(java.lang.String)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"getDirectoryAsyncClient\"></xref>.\n\nPlease refer to the [Azure Docs][] for more information.\n\n\n[Azure Docs]: https://docs.microsoft.com/azure/storage/blobs/data-lake-storage-introduction"
metadata: {}
package: "com.azure.storage.file.datalake"
artifact: com.azure:azure-storage-file-datalake:12.11.0-beta.1
