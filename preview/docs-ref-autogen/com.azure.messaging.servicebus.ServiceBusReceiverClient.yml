### YamlMime:ManagedReference
items:
- uid: "com.azure.messaging.servicebus.ServiceBusReceiverClient"
  id: "ServiceBusReceiverClient"
  parent: "com.azure.messaging.servicebus"
  children:
  - "com.azure.messaging.servicebus.ServiceBusReceiverClient.ServiceBusReceiverClient(com.azure.messaging.servicebus.ServiceBusReceiverAsyncClient,java.time.Duration)"
  - "com.azure.messaging.servicebus.ServiceBusReceiverClient.abandon(com.azure.messaging.servicebus.MessageLockToken)"
  - "com.azure.messaging.servicebus.ServiceBusReceiverClient.abandon(com.azure.messaging.servicebus.MessageLockToken,java.util.Map<java.lang.String,java.lang.Object>)"
  - "com.azure.messaging.servicebus.ServiceBusReceiverClient.close()"
  - "com.azure.messaging.servicebus.ServiceBusReceiverClient.complete(com.azure.messaging.servicebus.MessageLockToken)"
  - "com.azure.messaging.servicebus.ServiceBusReceiverClient.deadLetter(com.azure.messaging.servicebus.MessageLockToken)"
  - "com.azure.messaging.servicebus.ServiceBusReceiverClient.deadLetter(com.azure.messaging.servicebus.MessageLockToken,com.azure.messaging.servicebus.DeadLetterOptions)"
  - "com.azure.messaging.servicebus.ServiceBusReceiverClient.defer(com.azure.messaging.servicebus.MessageLockToken)"
  - "com.azure.messaging.servicebus.ServiceBusReceiverClient.defer(com.azure.messaging.servicebus.MessageLockToken,java.util.Map<java.lang.String,java.lang.Object>)"
  - "com.azure.messaging.servicebus.ServiceBusReceiverClient.getEntityPath()"
  - "com.azure.messaging.servicebus.ServiceBusReceiverClient.getFullyQualifiedNamespace()"
  - "com.azure.messaging.servicebus.ServiceBusReceiverClient.peek()"
  - "com.azure.messaging.servicebus.ServiceBusReceiverClient.peekAt(long)"
  - "com.azure.messaging.servicebus.ServiceBusReceiverClient.peekBatch(int)"
  - "com.azure.messaging.servicebus.ServiceBusReceiverClient.peekBatchAt(int,long)"
  - "com.azure.messaging.servicebus.ServiceBusReceiverClient.receive(int)"
  - "com.azure.messaging.servicebus.ServiceBusReceiverClient.receive(int,java.time.Duration)"
  - "com.azure.messaging.servicebus.ServiceBusReceiverClient.receiveDeferredMessage(long)"
  - "com.azure.messaging.servicebus.ServiceBusReceiverClient.receiveDeferredMessageBatch(long...)"
  - "com.azure.messaging.servicebus.ServiceBusReceiverClient.renewMessageLock(com.azure.messaging.servicebus.MessageLockToken)"
  langs:
  - "java"
  name: "ServiceBusReceiverClient"
  nameWithType: "ServiceBusReceiverClient"
  fullName: "com.azure.messaging.servicebus.ServiceBusReceiverClient"
  type: "Class"
  package: "com.azure.messaging.servicebus"
  summary: "A **synchronous** receiver responsible for receiving <xref uid=\"com.azure.messaging.servicebus.ServiceBusReceivedMessage\" data-throw-if-not-resolved=\"false\">ServiceBusReceivedMessage</xref> from a specific queue or topic on Azure Service Bus.\n\n**Create an instance of receiver**\n\n```java\nServiceBusReceiverClient receiver = new ServiceBusClientBuilder()\n     .connectionString(\n         \"Endpoint={eh-namespace};SharedAccessKeyName={policy-name};SharedAccessKey={key};\"\n             + \"Entity-Path={hub-name}\")\n     .receiver()\n     .queueName(\"<< QUEUE NAME >>\")\n     .buildClient();\n```"
  syntax:
    content: "public class ServiceBusReceiverClient implements AutoCloseable"
  inheritance:
  - "java.lang.Object"
  implements:
  - "java.lang.AutoCloseable"
  inheritedMembers:
  - "java.lang.Object.clone()"
  - "java.lang.Object.equals(java.lang.Object)"
  - "java.lang.Object.finalize()"
  - "java.lang.Object.getClass()"
  - "java.lang.Object.hashCode()"
  - "java.lang.Object.notify()"
  - "java.lang.Object.notifyAll()"
  - "java.lang.Object.toString()"
  - "java.lang.Object.wait()"
  - "java.lang.Object.wait(long)"
  - "java.lang.Object.wait(long,int)"
- uid: "com.azure.messaging.servicebus.ServiceBusReceiverClient.ServiceBusReceiverClient(com.azure.messaging.servicebus.ServiceBusReceiverAsyncClient,java.time.Duration)"
  id: "ServiceBusReceiverClient(com.azure.messaging.servicebus.ServiceBusReceiverAsyncClient,java.time.Duration)"
  parent: "com.azure.messaging.servicebus.ServiceBusReceiverClient"
  langs:
  - "java"
  name: "ServiceBusReceiverClient(ServiceBusReceiverAsyncClient asyncClient, Duration operationTimeout)"
  nameWithType: "ServiceBusReceiverClient.ServiceBusReceiverClient(ServiceBusReceiverAsyncClient asyncClient, Duration operationTimeout)"
  fullName: "com.azure.messaging.servicebus.ServiceBusReceiverClient.ServiceBusReceiverClient(ServiceBusReceiverAsyncClient asyncClient, Duration operationTimeout)"
  overload: "com.azure.messaging.servicebus.ServiceBusReceiverClient.ServiceBusReceiverClient*"
  type: "Constructor"
  package: "com.azure.messaging.servicebus"
  summary: "Creates a synchronous receiver given its asynchronous counterpart."
  syntax:
    content: " ServiceBusReceiverClient(ServiceBusReceiverAsyncClient asyncClient, Duration operationTimeout)"
    parameters:
    - id: "asyncClient"
      type: "com.azure.messaging.servicebus.ServiceBusReceiverAsyncClient"
      description: "Asynchronous receiver."
    - id: "operationTimeout"
      type: "java.time.Duration"
- uid: "com.azure.messaging.servicebus.ServiceBusReceiverClient.abandon(com.azure.messaging.servicebus.MessageLockToken)"
  id: "abandon(com.azure.messaging.servicebus.MessageLockToken)"
  parent: "com.azure.messaging.servicebus.ServiceBusReceiverClient"
  langs:
  - "java"
  name: "abandon(MessageLockToken lockToken)"
  nameWithType: "ServiceBusReceiverClient.abandon(MessageLockToken lockToken)"
  fullName: "com.azure.messaging.servicebus.ServiceBusReceiverClient.abandon(MessageLockToken lockToken)"
  overload: "com.azure.messaging.servicebus.ServiceBusReceiverClient.abandon*"
  type: "Method"
  package: "com.azure.messaging.servicebus"
  summary: "Abandon a <xref uid=\"com.azure.messaging.servicebus.ServiceBusReceivedMessage\" data-throw-if-not-resolved=\"false\">message</xref> with its lock token. This will make the message available again for processing. Abandoning a message will increase the delivery count on the message."
  syntax:
    content: "public void abandon(MessageLockToken lockToken)"
    parameters:
    - id: "lockToken"
      type: "com.azure.messaging.servicebus.MessageLockToken"
      description: "Lock token of the message."
- uid: "com.azure.messaging.servicebus.ServiceBusReceiverClient.abandon(com.azure.messaging.servicebus.MessageLockToken,java.util.Map<java.lang.String,java.lang.Object>)"
  id: "abandon(com.azure.messaging.servicebus.MessageLockToken,java.util.Map<java.lang.String,java.lang.Object>)"
  parent: "com.azure.messaging.servicebus.ServiceBusReceiverClient"
  langs:
  - "java"
  name: "abandon(MessageLockToken lockToken, Map<String,Object> propertiesToModify)"
  nameWithType: "ServiceBusReceiverClient.abandon(MessageLockToken lockToken, Map<String,Object> propertiesToModify)"
  fullName: "com.azure.messaging.servicebus.ServiceBusReceiverClient.abandon(MessageLockToken lockToken, Map<String,Object> propertiesToModify)"
  overload: "com.azure.messaging.servicebus.ServiceBusReceiverClient.abandon*"
  type: "Method"
  package: "com.azure.messaging.servicebus"
  summary: "Abandon a <xref uid=\"com.azure.messaging.servicebus.ServiceBusReceivedMessage\" data-throw-if-not-resolved=\"false\">message</xref> with its lock token and updates the message's properties. This will make the message available again for processing. Abandoning a message will increase the delivery count on the message."
  syntax:
    content: "public void abandon(MessageLockToken lockToken, Map<String,Object> propertiesToModify)"
    parameters:
    - id: "lockToken"
      type: "com.azure.messaging.servicebus.MessageLockToken"
      description: "Lock token of the message."
    - id: "propertiesToModify"
      type: "java.util.Map<java.lang.String,java.lang.Object>"
      description: "Properties to modify on the message."
- uid: "com.azure.messaging.servicebus.ServiceBusReceiverClient.close()"
  id: "close()"
  parent: "com.azure.messaging.servicebus.ServiceBusReceiverClient"
  langs:
  - "java"
  name: "close()"
  nameWithType: "ServiceBusReceiverClient.close()"
  fullName: "com.azure.messaging.servicebus.ServiceBusReceiverClient.close()"
  overload: "com.azure.messaging.servicebus.ServiceBusReceiverClient.close*"
  type: "Method"
  package: "com.azure.messaging.servicebus"
  summary: "\\{@inheritDoc\\}"
  syntax:
    content: "public void close()"
- uid: "com.azure.messaging.servicebus.ServiceBusReceiverClient.complete(com.azure.messaging.servicebus.MessageLockToken)"
  id: "complete(com.azure.messaging.servicebus.MessageLockToken)"
  parent: "com.azure.messaging.servicebus.ServiceBusReceiverClient"
  langs:
  - "java"
  name: "complete(MessageLockToken lockToken)"
  nameWithType: "ServiceBusReceiverClient.complete(MessageLockToken lockToken)"
  fullName: "com.azure.messaging.servicebus.ServiceBusReceiverClient.complete(MessageLockToken lockToken)"
  overload: "com.azure.messaging.servicebus.ServiceBusReceiverClient.complete*"
  type: "Method"
  package: "com.azure.messaging.servicebus"
  summary: "Completes a <xref uid=\"com.azure.messaging.servicebus.ServiceBusReceivedMessage\" data-throw-if-not-resolved=\"false\">message</xref> using its lock token. This will delete the message from the service."
  syntax:
    content: "public void complete(MessageLockToken lockToken)"
    parameters:
    - id: "lockToken"
      type: "com.azure.messaging.servicebus.MessageLockToken"
      description: "Lock token of the message."
- uid: "com.azure.messaging.servicebus.ServiceBusReceiverClient.deadLetter(com.azure.messaging.servicebus.MessageLockToken)"
  id: "deadLetter(com.azure.messaging.servicebus.MessageLockToken)"
  parent: "com.azure.messaging.servicebus.ServiceBusReceiverClient"
  langs:
  - "java"
  name: "deadLetter(MessageLockToken lockToken)"
  nameWithType: "ServiceBusReceiverClient.deadLetter(MessageLockToken lockToken)"
  fullName: "com.azure.messaging.servicebus.ServiceBusReceiverClient.deadLetter(MessageLockToken lockToken)"
  overload: "com.azure.messaging.servicebus.ServiceBusReceiverClient.deadLetter*"
  type: "Method"
  package: "com.azure.messaging.servicebus"
  summary: "Moves a <xref uid=\"com.azure.messaging.servicebus.ServiceBusReceivedMessage\" data-throw-if-not-resolved=\"false\">message</xref> to the deadletter sub-queue."
  syntax:
    content: "public void deadLetter(MessageLockToken lockToken)"
    parameters:
    - id: "lockToken"
      type: "com.azure.messaging.servicebus.MessageLockToken"
      description: "Lock token of the message."
- uid: "com.azure.messaging.servicebus.ServiceBusReceiverClient.deadLetter(com.azure.messaging.servicebus.MessageLockToken,com.azure.messaging.servicebus.DeadLetterOptions)"
  id: "deadLetter(com.azure.messaging.servicebus.MessageLockToken,com.azure.messaging.servicebus.DeadLetterOptions)"
  parent: "com.azure.messaging.servicebus.ServiceBusReceiverClient"
  langs:
  - "java"
  name: "deadLetter(MessageLockToken lockToken, DeadLetterOptions deadLetterOptions)"
  nameWithType: "ServiceBusReceiverClient.deadLetter(MessageLockToken lockToken, DeadLetterOptions deadLetterOptions)"
  fullName: "com.azure.messaging.servicebus.ServiceBusReceiverClient.deadLetter(MessageLockToken lockToken, DeadLetterOptions deadLetterOptions)"
  overload: "com.azure.messaging.servicebus.ServiceBusReceiverClient.deadLetter*"
  type: "Method"
  package: "com.azure.messaging.servicebus"
  summary: "Moves a <xref uid=\"com.azure.messaging.servicebus.ServiceBusReceivedMessage\" data-throw-if-not-resolved=\"false\">message</xref> to the deadletter subqueue with deadletter reason, error description, and/or modified properties."
  syntax:
    content: "public void deadLetter(MessageLockToken lockToken, DeadLetterOptions deadLetterOptions)"
    parameters:
    - id: "lockToken"
      type: "com.azure.messaging.servicebus.MessageLockToken"
      description: "Lock token of the message."
    - id: "deadLetterOptions"
      type: "com.azure.messaging.servicebus.DeadLetterOptions"
      description: "The options to specify when moving message to the deadletter sub-queue."
- uid: "com.azure.messaging.servicebus.ServiceBusReceiverClient.defer(com.azure.messaging.servicebus.MessageLockToken)"
  id: "defer(com.azure.messaging.servicebus.MessageLockToken)"
  parent: "com.azure.messaging.servicebus.ServiceBusReceiverClient"
  langs:
  - "java"
  name: "defer(MessageLockToken lockToken)"
  nameWithType: "ServiceBusReceiverClient.defer(MessageLockToken lockToken)"
  fullName: "com.azure.messaging.servicebus.ServiceBusReceiverClient.defer(MessageLockToken lockToken)"
  overload: "com.azure.messaging.servicebus.ServiceBusReceiverClient.defer*"
  type: "Method"
  package: "com.azure.messaging.servicebus"
  summary: "Defers a <xref uid=\"com.azure.messaging.servicebus.ServiceBusReceivedMessage\" data-throw-if-not-resolved=\"false\">message</xref> using its lock token. This will move message into the deferred subqueue."
  syntax:
    content: "public void defer(MessageLockToken lockToken)"
    parameters:
    - id: "lockToken"
      type: "com.azure.messaging.servicebus.MessageLockToken"
      description: "Lock token of the message."
- uid: "com.azure.messaging.servicebus.ServiceBusReceiverClient.defer(com.azure.messaging.servicebus.MessageLockToken,java.util.Map<java.lang.String,java.lang.Object>)"
  id: "defer(com.azure.messaging.servicebus.MessageLockToken,java.util.Map<java.lang.String,java.lang.Object>)"
  parent: "com.azure.messaging.servicebus.ServiceBusReceiverClient"
  langs:
  - "java"
  name: "defer(MessageLockToken lockToken, Map<String,Object> propertiesToModify)"
  nameWithType: "ServiceBusReceiverClient.defer(MessageLockToken lockToken, Map<String,Object> propertiesToModify)"
  fullName: "com.azure.messaging.servicebus.ServiceBusReceiverClient.defer(MessageLockToken lockToken, Map<String,Object> propertiesToModify)"
  overload: "com.azure.messaging.servicebus.ServiceBusReceiverClient.defer*"
  type: "Method"
  package: "com.azure.messaging.servicebus"
  summary: "Defers a <xref uid=\"com.azure.messaging.servicebus.ServiceBusReceivedMessage\" data-throw-if-not-resolved=\"false\">message</xref> using its lock token with modified message property. This will move message into the deferred subqueue."
  syntax:
    content: "public void defer(MessageLockToken lockToken, Map<String,Object> propertiesToModify)"
    parameters:
    - id: "lockToken"
      type: "com.azure.messaging.servicebus.MessageLockToken"
      description: "Lock token of the message."
    - id: "propertiesToModify"
      type: "java.util.Map<java.lang.String,java.lang.Object>"
      description: "Message properties to modify."
- uid: "com.azure.messaging.servicebus.ServiceBusReceiverClient.getEntityPath()"
  id: "getEntityPath()"
  parent: "com.azure.messaging.servicebus.ServiceBusReceiverClient"
  langs:
  - "java"
  name: "getEntityPath()"
  nameWithType: "ServiceBusReceiverClient.getEntityPath()"
  fullName: "com.azure.messaging.servicebus.ServiceBusReceiverClient.getEntityPath()"
  overload: "com.azure.messaging.servicebus.ServiceBusReceiverClient.getEntityPath*"
  type: "Method"
  package: "com.azure.messaging.servicebus"
  summary: "Gets the Service Bus resource this client interacts with."
  syntax:
    content: "public String getEntityPath()"
    return:
      type: "java.lang.String"
      description: "The Service Bus resource this client interacts with."
- uid: "com.azure.messaging.servicebus.ServiceBusReceiverClient.getFullyQualifiedNamespace()"
  id: "getFullyQualifiedNamespace()"
  parent: "com.azure.messaging.servicebus.ServiceBusReceiverClient"
  langs:
  - "java"
  name: "getFullyQualifiedNamespace()"
  nameWithType: "ServiceBusReceiverClient.getFullyQualifiedNamespace()"
  fullName: "com.azure.messaging.servicebus.ServiceBusReceiverClient.getFullyQualifiedNamespace()"
  overload: "com.azure.messaging.servicebus.ServiceBusReceiverClient.getFullyQualifiedNamespace*"
  type: "Method"
  package: "com.azure.messaging.servicebus"
  summary: "Gets the fully qualified Service Bus namespace that the connection is associated with. This is likely similar to `{yournamespace}.servicebus.windows.net`."
  syntax:
    content: "public String getFullyQualifiedNamespace()"
    return:
      type: "java.lang.String"
      description: "The fully qualified Service Bus namespace that the connection is associated with."
- uid: "com.azure.messaging.servicebus.ServiceBusReceiverClient.peek()"
  id: "peek()"
  parent: "com.azure.messaging.servicebus.ServiceBusReceiverClient"
  langs:
  - "java"
  name: "peek()"
  nameWithType: "ServiceBusReceiverClient.peek()"
  fullName: "com.azure.messaging.servicebus.ServiceBusReceiverClient.peek()"
  overload: "com.azure.messaging.servicebus.ServiceBusReceiverClient.peek*"
  type: "Method"
  package: "com.azure.messaging.servicebus"
  summary: "Reads the next active message without changing the state of the receiver or the message source. The first call to `peek()` fetches the first active message for this receiver. Each subsequent call fetches the subsequent message in the entity."
  syntax:
    content: "public ServiceBusReceivedMessage peek()"
    return:
      type: "com.azure.messaging.servicebus.ServiceBusReceivedMessage"
      description: "A peeked <xref uid=\"com.azure.messaging.servicebus.ServiceBusReceivedMessage\" data-throw-if-not-resolved=\"false\">ServiceBusReceivedMessage</xref>."
- uid: "com.azure.messaging.servicebus.ServiceBusReceiverClient.peekAt(long)"
  id: "peekAt(long)"
  parent: "com.azure.messaging.servicebus.ServiceBusReceiverClient"
  langs:
  - "java"
  name: "peekAt(long sequenceNumber)"
  nameWithType: "ServiceBusReceiverClient.peekAt(long sequenceNumber)"
  fullName: "com.azure.messaging.servicebus.ServiceBusReceiverClient.peekAt(long sequenceNumber)"
  overload: "com.azure.messaging.servicebus.ServiceBusReceiverClient.peekAt*"
  type: "Method"
  package: "com.azure.messaging.servicebus"
  summary: "Starting from the given sequence number, reads next the active message without changing the state of the receiver or the message source."
  syntax:
    content: "public ServiceBusReceivedMessage peekAt(long sequenceNumber)"
    parameters:
    - id: "sequenceNumber"
      type: "long"
      description: "The sequence number from where to read the message."
    return:
      type: "com.azure.messaging.servicebus.ServiceBusReceivedMessage"
      description: "A peeked <xref uid=\"com.azure.messaging.servicebus.ServiceBusReceivedMessage\" data-throw-if-not-resolved=\"false\">ServiceBusReceivedMessage</xref>."
- uid: "com.azure.messaging.servicebus.ServiceBusReceiverClient.peekBatch(int)"
  id: "peekBatch(int)"
  parent: "com.azure.messaging.servicebus.ServiceBusReceiverClient"
  langs:
  - "java"
  name: "peekBatch(int maxMessages)"
  nameWithType: "ServiceBusReceiverClient.peekBatch(int maxMessages)"
  fullName: "com.azure.messaging.servicebus.ServiceBusReceiverClient.peekBatch(int maxMessages)"
  overload: "com.azure.messaging.servicebus.ServiceBusReceiverClient.peekBatch*"
  type: "Method"
  package: "com.azure.messaging.servicebus"
  summary: "Reads the next batch of active messages without changing the state of the receiver or the message source."
  syntax:
    content: "public IterableStream<ServiceBusReceivedMessage> peekBatch(int maxMessages)"
    parameters:
    - id: "maxMessages"
      type: "int"
      description: "The number of messages."
    return:
      type: "com.azure.core.util.IterableStream<com.azure.messaging.servicebus.ServiceBusReceivedMessage>"
      description: "An <xref uid=\"com.azure.core.util.IterableStream\" data-throw-if-not-resolved=\"false\">IterableStream</xref> of <xref uid=\"com.azure.messaging.servicebus.ServiceBusReceivedMessage\" data-throw-if-not-resolved=\"false\">messages</xref> that are peeked."
- uid: "com.azure.messaging.servicebus.ServiceBusReceiverClient.peekBatchAt(int,long)"
  id: "peekBatchAt(int,long)"
  parent: "com.azure.messaging.servicebus.ServiceBusReceiverClient"
  langs:
  - "java"
  name: "peekBatchAt(int maxMessages, long sequenceNumber)"
  nameWithType: "ServiceBusReceiverClient.peekBatchAt(int maxMessages, long sequenceNumber)"
  fullName: "com.azure.messaging.servicebus.ServiceBusReceiverClient.peekBatchAt(int maxMessages, long sequenceNumber)"
  overload: "com.azure.messaging.servicebus.ServiceBusReceiverClient.peekBatchAt*"
  type: "Method"
  package: "com.azure.messaging.servicebus"
  summary: "Starting from the given sequence number, reads the next batch of active messages without changing the state of the receiver or the message source."
  syntax:
    content: "public IterableStream<ServiceBusReceivedMessage> peekBatchAt(int maxMessages, long sequenceNumber)"
    parameters:
    - id: "maxMessages"
      type: "int"
      description: "The number of messages."
    - id: "sequenceNumber"
      type: "long"
      description: "The sequence number from where to start reading messages."
    return:
      type: "com.azure.core.util.IterableStream<com.azure.messaging.servicebus.ServiceBusReceivedMessage>"
      description: "An <xref uid=\"com.azure.core.util.IterableStream\" data-throw-if-not-resolved=\"false\">IterableStream</xref> of <xref uid=\"com.azure.messaging.servicebus.ServiceBusReceivedMessage\" data-throw-if-not-resolved=\"false\">ServiceBusReceivedMessage</xref> peeked."
- uid: "com.azure.messaging.servicebus.ServiceBusReceiverClient.receive(int)"
  id: "receive(int)"
  parent: "com.azure.messaging.servicebus.ServiceBusReceiverClient"
  langs:
  - "java"
  name: "receive(int maxMessages)"
  nameWithType: "ServiceBusReceiverClient.receive(int maxMessages)"
  fullName: "com.azure.messaging.servicebus.ServiceBusReceiverClient.receive(int maxMessages)"
  overload: "com.azure.messaging.servicebus.ServiceBusReceiverClient.receive*"
  type: "Method"
  package: "com.azure.messaging.servicebus"
  summary: "Receives an iterable stream of <xref uid=\"com.azure.messaging.servicebus.ServiceBusReceivedMessage\" data-throw-if-not-resolved=\"false\">messages</xref> from the Service Bus entity. The receive operation will wait for a default 1 minute for receiving a message before it times out. You can it override by using <xref uid=\"com.azure.messaging.servicebus.ServiceBusReceiverClient.receive(int,java.time.Duration)\" data-throw-if-not-resolved=\"false\">#receive(int, Duration)</xref>."
  syntax:
    content: "public IterableStream<ServiceBusReceivedMessage> receive(int maxMessages)"
    parameters:
    - id: "maxMessages"
      type: "int"
      description: "The maximum number of messages to receive."
    return:
      type: "com.azure.core.util.IterableStream<com.azure.messaging.servicebus.ServiceBusReceivedMessage>"
      description: "An <xref uid=\"com.azure.core.util.IterableStream\" data-throw-if-not-resolved=\"false\">IterableStream</xref> of at most <code>maxMessages</code> messages from the Service Bus entity."
- uid: "com.azure.messaging.servicebus.ServiceBusReceiverClient.receive(int,java.time.Duration)"
  id: "receive(int,java.time.Duration)"
  parent: "com.azure.messaging.servicebus.ServiceBusReceiverClient"
  langs:
  - "java"
  name: "receive(int maxMessages, Duration maxWaitTime)"
  nameWithType: "ServiceBusReceiverClient.receive(int maxMessages, Duration maxWaitTime)"
  fullName: "com.azure.messaging.servicebus.ServiceBusReceiverClient.receive(int maxMessages, Duration maxWaitTime)"
  overload: "com.azure.messaging.servicebus.ServiceBusReceiverClient.receive*"
  type: "Method"
  package: "com.azure.messaging.servicebus"
  summary: "Receives an iterable stream of <xref uid=\"com.azure.messaging.servicebus.ServiceBusReceivedMessage\" data-throw-if-not-resolved=\"false\">messages</xref> from the Service Bus entity."
  syntax:
    content: "public IterableStream<ServiceBusReceivedMessage> receive(int maxMessages, Duration maxWaitTime)"
    parameters:
    - id: "maxMessages"
      type: "int"
      description: "The maximum number of messages to receive."
    - id: "maxWaitTime"
      type: "java.time.Duration"
      description: "The time the client waits for receiving a message before it times out."
    return:
      type: "com.azure.core.util.IterableStream<com.azure.messaging.servicebus.ServiceBusReceivedMessage>"
      description: "An <xref uid=\"com.azure.core.util.IterableStream\" data-throw-if-not-resolved=\"false\">IterableStream</xref> of at most <code>maxMessages</code> messages from the Service Bus entity."
- uid: "com.azure.messaging.servicebus.ServiceBusReceiverClient.receiveDeferredMessage(long)"
  id: "receiveDeferredMessage(long)"
  parent: "com.azure.messaging.servicebus.ServiceBusReceiverClient"
  langs:
  - "java"
  name: "receiveDeferredMessage(long sequenceNumber)"
  nameWithType: "ServiceBusReceiverClient.receiveDeferredMessage(long sequenceNumber)"
  fullName: "com.azure.messaging.servicebus.ServiceBusReceiverClient.receiveDeferredMessage(long sequenceNumber)"
  overload: "com.azure.messaging.servicebus.ServiceBusReceiverClient.receiveDeferredMessage*"
  type: "Method"
  package: "com.azure.messaging.servicebus"
  summary: "Receives a deferred <xref uid=\"com.azure.messaging.servicebus.ServiceBusReceivedMessage\" data-throw-if-not-resolved=\"false\">message</xref>. Deferred messages can only be received by using sequence number."
  syntax:
    content: "public ServiceBusReceivedMessage receiveDeferredMessage(long sequenceNumber)"
    parameters:
    - id: "sequenceNumber"
      type: "long"
      description: "The <xref uid=\"com.azure.messaging.servicebus.ServiceBusReceivedMessage.getSequenceNumber()\" data-throw-if-not-resolved=\"false\">sequence number</xref> of the\n     message."
    return:
      type: "com.azure.messaging.servicebus.ServiceBusReceivedMessage"
      description: "A deferred message with the matching <code>sequenceNumber</code>."
- uid: "com.azure.messaging.servicebus.ServiceBusReceiverClient.receiveDeferredMessageBatch(long...)"
  id: "receiveDeferredMessageBatch(long...)"
  parent: "com.azure.messaging.servicebus.ServiceBusReceiverClient"
  langs:
  - "java"
  name: "receiveDeferredMessageBatch(long[] sequenceNumbers)"
  nameWithType: "ServiceBusReceiverClient.receiveDeferredMessageBatch(long[] sequenceNumbers)"
  fullName: "com.azure.messaging.servicebus.ServiceBusReceiverClient.receiveDeferredMessageBatch(long[] sequenceNumbers)"
  overload: "com.azure.messaging.servicebus.ServiceBusReceiverClient.receiveDeferredMessageBatch*"
  type: "Method"
  package: "com.azure.messaging.servicebus"
  summary: "Receives a batch of deferred <xref uid=\"com.azure.messaging.servicebus.ServiceBusReceivedMessage\" data-throw-if-not-resolved=\"false\">messages</xref>. Deferred messages can only be received by using sequence number."
  syntax:
    content: "public IterableStream<ServiceBusReceivedMessage> receiveDeferredMessageBatch(long[] sequenceNumbers)"
    parameters:
    - id: "sequenceNumbers"
      type: "long[]"
      description: "The sequence numbers of the deferred messages."
    return:
      type: "com.azure.core.util.IterableStream<com.azure.messaging.servicebus.ServiceBusReceivedMessage>"
      description: "An <xref uid=\"com.azure.core.util.IterableStream\" data-throw-if-not-resolved=\"false\">IterableStream</xref> of deferred <xref uid=\"com.azure.messaging.servicebus.ServiceBusReceivedMessage\" data-throw-if-not-resolved=\"false\">messages</xref>."
- uid: "com.azure.messaging.servicebus.ServiceBusReceiverClient.renewMessageLock(com.azure.messaging.servicebus.MessageLockToken)"
  id: "renewMessageLock(com.azure.messaging.servicebus.MessageLockToken)"
  parent: "com.azure.messaging.servicebus.ServiceBusReceiverClient"
  langs:
  - "java"
  name: "renewMessageLock(MessageLockToken lockToken)"
  nameWithType: "ServiceBusReceiverClient.renewMessageLock(MessageLockToken lockToken)"
  fullName: "com.azure.messaging.servicebus.ServiceBusReceiverClient.renewMessageLock(MessageLockToken lockToken)"
  overload: "com.azure.messaging.servicebus.ServiceBusReceiverClient.renewMessageLock*"
  type: "Method"
  package: "com.azure.messaging.servicebus"
  summary: "Renews the lock on the specified message. The lock will be renewed based on the setting specified on the entity. When a message is received in <xref uid=\"com.azure.messaging.servicebus.models.ReceiveMode.PEEK_LOCK\" data-throw-if-not-resolved=\"false\">ReceiveMode#PEEK_LOCK</xref> mode, the message is locked on the server for this receiver instance for a duration as specified during the Queue creation (LockDuration). If processing of the message requires longer than this duration, the lock needs to be renewed. For each renewal, the lock is reset to the entity's LockDuration value."
  syntax:
    content: "public Instant renewMessageLock(MessageLockToken lockToken)"
    parameters:
    - id: "lockToken"
      type: "com.azure.messaging.servicebus.MessageLockToken"
      description: "Lock token of the message to renew."
    return:
      type: "java.time.Instant"
      description: "The new expiration time for the message."
references:
- uid: "com.azure.messaging.servicebus.ServiceBusReceiverAsyncClient"
  name: "ServiceBusReceiverAsyncClient"
  nameWithType: "ServiceBusReceiverAsyncClient"
  fullName: "com.azure.messaging.servicebus.ServiceBusReceiverAsyncClient"
- uid: "java.time.Duration"
  spec.java:
  - uid: "java.time.Duration"
    name: "Duration"
    fullName: "java.time.Duration"
- uid: "com.azure.messaging.servicebus.ServiceBusReceiverClient.ServiceBusReceiverClient*"
  name: "ServiceBusReceiverClient"
  nameWithType: "ServiceBusReceiverClient.ServiceBusReceiverClient"
  fullName: "com.azure.messaging.servicebus.ServiceBusReceiverClient.ServiceBusReceiverClient"
  package: "com.azure.messaging.servicebus"
- uid: "java.lang.String"
  spec.java:
  - uid: "java.lang.String"
    name: "String"
    fullName: "java.lang.String"
- uid: "com.azure.messaging.servicebus.ServiceBusReceiverClient.getFullyQualifiedNamespace*"
  name: "getFullyQualifiedNamespace"
  nameWithType: "ServiceBusReceiverClient.getFullyQualifiedNamespace"
  fullName: "com.azure.messaging.servicebus.ServiceBusReceiverClient.getFullyQualifiedNamespace"
  package: "com.azure.messaging.servicebus"
- uid: "com.azure.messaging.servicebus.ServiceBusReceiverClient.getEntityPath*"
  name: "getEntityPath"
  nameWithType: "ServiceBusReceiverClient.getEntityPath"
  fullName: "com.azure.messaging.servicebus.ServiceBusReceiverClient.getEntityPath"
  package: "com.azure.messaging.servicebus"
- uid: "com.azure.messaging.servicebus.MessageLockToken"
  name: "MessageLockToken"
  nameWithType: "MessageLockToken"
  fullName: "com.azure.messaging.servicebus.MessageLockToken"
- uid: "com.azure.messaging.servicebus.ServiceBusReceiverClient.abandon*"
  name: "abandon"
  nameWithType: "ServiceBusReceiverClient.abandon"
  fullName: "com.azure.messaging.servicebus.ServiceBusReceiverClient.abandon"
  package: "com.azure.messaging.servicebus"
- uid: "java.util.Map<java.lang.String,java.lang.Object>"
  spec.java:
  - uid: "java.util.Map"
    name: "Map"
    fullName: "java.util.Map"
  - name: "<"
    fullName: "<"
  - uid: "java.lang.String"
    name: "String"
    fullName: "java.lang.String"
  - name: ","
    fullName: ","
  - uid: "java.lang.Object"
    name: "Object"
    fullName: "java.lang.Object"
  - name: ">"
    fullName: ">"
- uid: "com.azure.messaging.servicebus.ServiceBusReceiverClient.complete*"
  name: "complete"
  nameWithType: "ServiceBusReceiverClient.complete"
  fullName: "com.azure.messaging.servicebus.ServiceBusReceiverClient.complete"
  package: "com.azure.messaging.servicebus"
- uid: "com.azure.messaging.servicebus.ServiceBusReceiverClient.defer*"
  name: "defer"
  nameWithType: "ServiceBusReceiverClient.defer"
  fullName: "com.azure.messaging.servicebus.ServiceBusReceiverClient.defer"
  package: "com.azure.messaging.servicebus"
- uid: "com.azure.messaging.servicebus.ServiceBusReceiverClient.deadLetter*"
  name: "deadLetter"
  nameWithType: "ServiceBusReceiverClient.deadLetter"
  fullName: "com.azure.messaging.servicebus.ServiceBusReceiverClient.deadLetter"
  package: "com.azure.messaging.servicebus"
- uid: "com.azure.messaging.servicebus.DeadLetterOptions"
  name: "DeadLetterOptions"
  nameWithType: "DeadLetterOptions"
  fullName: "com.azure.messaging.servicebus.DeadLetterOptions"
- uid: "com.azure.messaging.servicebus.ServiceBusReceivedMessage"
  name: "ServiceBusReceivedMessage"
  nameWithType: "ServiceBusReceivedMessage"
  fullName: "com.azure.messaging.servicebus.ServiceBusReceivedMessage"
- uid: "com.azure.messaging.servicebus.ServiceBusReceiverClient.peek*"
  name: "peek"
  nameWithType: "ServiceBusReceiverClient.peek"
  fullName: "com.azure.messaging.servicebus.ServiceBusReceiverClient.peek"
  package: "com.azure.messaging.servicebus"
- uid: "long"
  spec.java:
  - uid: "long"
    name: "long"
    fullName: "long"
- uid: "com.azure.messaging.servicebus.ServiceBusReceiverClient.peekAt*"
  name: "peekAt"
  nameWithType: "ServiceBusReceiverClient.peekAt"
  fullName: "com.azure.messaging.servicebus.ServiceBusReceiverClient.peekAt"
  package: "com.azure.messaging.servicebus"
- uid: "int"
  spec.java:
  - uid: "int"
    name: "int"
    fullName: "int"
- uid: "com.azure.core.util.IterableStream<com.azure.messaging.servicebus.ServiceBusReceivedMessage>"
  spec.java:
  - uid: "com.azure.core.util.IterableStream"
    name: "IterableStream"
    fullName: "com.azure.core.util.IterableStream"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.messaging.servicebus.ServiceBusReceivedMessage"
    name: "ServiceBusReceivedMessage"
    fullName: "com.azure.messaging.servicebus.ServiceBusReceivedMessage"
  - name: ">"
    fullName: ">"
- uid: "com.azure.messaging.servicebus.ServiceBusReceiverClient.peekBatch*"
  name: "peekBatch"
  nameWithType: "ServiceBusReceiverClient.peekBatch"
  fullName: "com.azure.messaging.servicebus.ServiceBusReceiverClient.peekBatch"
  package: "com.azure.messaging.servicebus"
- uid: "com.azure.messaging.servicebus.ServiceBusReceiverClient.peekBatchAt*"
  name: "peekBatchAt"
  nameWithType: "ServiceBusReceiverClient.peekBatchAt"
  fullName: "com.azure.messaging.servicebus.ServiceBusReceiverClient.peekBatchAt"
  package: "com.azure.messaging.servicebus"
- uid: "com.azure.messaging.servicebus.ServiceBusReceiverClient.receive*"
  name: "receive"
  nameWithType: "ServiceBusReceiverClient.receive"
  fullName: "com.azure.messaging.servicebus.ServiceBusReceiverClient.receive"
  package: "com.azure.messaging.servicebus"
- uid: "com.azure.messaging.servicebus.ServiceBusReceiverClient.receiveDeferredMessage*"
  name: "receiveDeferredMessage"
  nameWithType: "ServiceBusReceiverClient.receiveDeferredMessage"
  fullName: "com.azure.messaging.servicebus.ServiceBusReceiverClient.receiveDeferredMessage"
  package: "com.azure.messaging.servicebus"
- uid: "long[]"
  spec.java:
  - uid: "long"
    name: "long"
    fullName: "long"
  - name: "[]"
    fullName: "[]"
- uid: "com.azure.messaging.servicebus.ServiceBusReceiverClient.receiveDeferredMessageBatch*"
  name: "receiveDeferredMessageBatch"
  nameWithType: "ServiceBusReceiverClient.receiveDeferredMessageBatch"
  fullName: "com.azure.messaging.servicebus.ServiceBusReceiverClient.receiveDeferredMessageBatch"
  package: "com.azure.messaging.servicebus"
- uid: "java.time.Instant"
  spec.java:
  - uid: "java.time.Instant"
    name: "Instant"
    fullName: "java.time.Instant"
- uid: "com.azure.messaging.servicebus.ServiceBusReceiverClient.renewMessageLock*"
  name: "renewMessageLock"
  nameWithType: "ServiceBusReceiverClient.renewMessageLock"
  fullName: "com.azure.messaging.servicebus.ServiceBusReceiverClient.renewMessageLock"
  package: "com.azure.messaging.servicebus"
- uid: "com.azure.messaging.servicebus.ServiceBusReceiverClient.close*"
  name: "close"
  nameWithType: "ServiceBusReceiverClient.close"
  fullName: "com.azure.messaging.servicebus.ServiceBusReceiverClient.close"
  package: "com.azure.messaging.servicebus"
- uid: "java.lang.AutoCloseable"
  name: "AutoCloseable"
  nameWithType: "AutoCloseable"
  fullName: "java.lang.AutoCloseable"
- uid: "java.lang.Object.notify()"
  name: "Object.notify()"
  nameWithType: "Object.notify()"
  fullName: "java.lang.Object.notify()"
- uid: "java.lang.Object.wait()"
  name: "Object.wait()"
  nameWithType: "Object.wait()"
  fullName: "java.lang.Object.wait()"
- uid: "java.lang.Object.finalize()"
  name: "Object.finalize()"
  nameWithType: "Object.finalize()"
  fullName: "java.lang.Object.finalize()"
- uid: "java.lang.Object.clone()"
  name: "Object.clone()"
  nameWithType: "Object.clone()"
  fullName: "java.lang.Object.clone()"
- uid: "java.lang.Object.notifyAll()"
  name: "Object.notifyAll()"
  nameWithType: "Object.notifyAll()"
  fullName: "java.lang.Object.notifyAll()"
- uid: "java.lang.Object.equals(java.lang.Object)"
  name: "Object.equals(Object)"
  nameWithType: "Object.equals(Object)"
  fullName: "java.lang.Object.equals(java.lang.Object)"
- uid: "java.lang.Object.getClass()"
  name: "Object.getClass()"
  nameWithType: "Object.getClass()"
  fullName: "java.lang.Object.getClass()"
- uid: "java.lang.Object.wait(long)"
  name: "Object.wait(long)"
  nameWithType: "Object.wait(long)"
  fullName: "java.lang.Object.wait(long)"
- uid: "java.lang.Object.hashCode()"
  name: "Object.hashCode()"
  nameWithType: "Object.hashCode()"
  fullName: "java.lang.Object.hashCode()"
- uid: "java.lang.Object.wait(long,int)"
  name: "Object.wait(long,int)"
  nameWithType: "Object.wait(long,int)"
  fullName: "java.lang.Object.wait(long,int)"
- uid: "java.lang.Object.toString()"
  name: "Object.toString()"
  nameWithType: "Object.toString()"
  fullName: "java.lang.Object.toString()"
- uid: "java.lang.String,java.lang.Object"
  name: "String,Object"
  nameWithType: "String,Object"
  fullName: "java.lang.String,java.lang.Object"
- uid: "java.util.Map"
  name: "Map"
  nameWithType: "Map"
  fullName: "java.util.Map"
- uid: "com.azure.core.util.IterableStream"
  name: "IterableStream"
  nameWithType: "IterableStream"
  fullName: "com.azure.core.util.IterableStream"
