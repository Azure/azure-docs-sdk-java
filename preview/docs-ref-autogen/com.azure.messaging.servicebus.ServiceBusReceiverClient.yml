### YamlMime:ManagedReference
items:
- uid: com.azure.messaging.servicebus.ServiceBusReceiverClient
  id: ServiceBusReceiverClient
  artifact: com.azure:azure-messaging-servicebus:7.0.0-beta.2
  parent: com.azure.messaging.servicebus
  children:
  - com.azure.messaging.servicebus.ServiceBusReceiverClient.abandon(com.azure.messaging.servicebus.MessageLockToken)
  - com.azure.messaging.servicebus.ServiceBusReceiverClient.abandon(com.azure.messaging.servicebus.MessageLockToken,java.util.Map<java.lang.String,java.lang.Object>)
  - com.azure.messaging.servicebus.ServiceBusReceiverClient.abandon(com.azure.messaging.servicebus.MessageLockToken,java.util.Map<java.lang.String,java.lang.Object>,java.lang.String)
  - com.azure.messaging.servicebus.ServiceBusReceiverClient.close()
  - com.azure.messaging.servicebus.ServiceBusReceiverClient.complete(com.azure.messaging.servicebus.MessageLockToken)
  - com.azure.messaging.servicebus.ServiceBusReceiverClient.complete(com.azure.messaging.servicebus.MessageLockToken,java.lang.String)
  - com.azure.messaging.servicebus.ServiceBusReceiverClient.deadLetter(com.azure.messaging.servicebus.MessageLockToken)
  - com.azure.messaging.servicebus.ServiceBusReceiverClient.deadLetter(com.azure.messaging.servicebus.MessageLockToken,com.azure.messaging.servicebus.models.DeadLetterOptions)
  - com.azure.messaging.servicebus.ServiceBusReceiverClient.deadLetter(com.azure.messaging.servicebus.MessageLockToken,com.azure.messaging.servicebus.models.DeadLetterOptions,java.lang.String)
  - com.azure.messaging.servicebus.ServiceBusReceiverClient.deadLetter(com.azure.messaging.servicebus.MessageLockToken,java.lang.String)
  - com.azure.messaging.servicebus.ServiceBusReceiverClient.defer(com.azure.messaging.servicebus.MessageLockToken)
  - com.azure.messaging.servicebus.ServiceBusReceiverClient.defer(com.azure.messaging.servicebus.MessageLockToken,java.lang.String)
  - com.azure.messaging.servicebus.ServiceBusReceiverClient.defer(com.azure.messaging.servicebus.MessageLockToken,java.util.Map<java.lang.String,java.lang.Object>)
  - com.azure.messaging.servicebus.ServiceBusReceiverClient.defer(com.azure.messaging.servicebus.MessageLockToken,java.util.Map<java.lang.String,java.lang.Object>,java.lang.String)
  - com.azure.messaging.servicebus.ServiceBusReceiverClient.getEntityPath()
  - com.azure.messaging.servicebus.ServiceBusReceiverClient.getFullyQualifiedNamespace()
  - com.azure.messaging.servicebus.ServiceBusReceiverClient.getSessionState(java.lang.String)
  - com.azure.messaging.servicebus.ServiceBusReceiverClient.peek()
  - com.azure.messaging.servicebus.ServiceBusReceiverClient.peek(java.lang.String)
  - com.azure.messaging.servicebus.ServiceBusReceiverClient.peekAt(long)
  - com.azure.messaging.servicebus.ServiceBusReceiverClient.peekAt(long,java.lang.String)
  - com.azure.messaging.servicebus.ServiceBusReceiverClient.peekBatch(int)
  - com.azure.messaging.servicebus.ServiceBusReceiverClient.peekBatch(int,java.lang.String)
  - com.azure.messaging.servicebus.ServiceBusReceiverClient.peekBatchAt(int,long)
  - com.azure.messaging.servicebus.ServiceBusReceiverClient.peekBatchAt(int,long,java.lang.String)
  - com.azure.messaging.servicebus.ServiceBusReceiverClient.receive(int)
  - com.azure.messaging.servicebus.ServiceBusReceiverClient.receive(int,java.time.Duration)
  - com.azure.messaging.servicebus.ServiceBusReceiverClient.receiveDeferredMessage(long)
  - com.azure.messaging.servicebus.ServiceBusReceiverClient.receiveDeferredMessage(long,java.lang.String)
  - com.azure.messaging.servicebus.ServiceBusReceiverClient.receiveDeferredMessageBatch(java.lang.Iterable<java.lang.Long>)
  - com.azure.messaging.servicebus.ServiceBusReceiverClient.receiveDeferredMessageBatch(java.lang.Iterable<java.lang.Long>,java.lang.String)
  - com.azure.messaging.servicebus.ServiceBusReceiverClient.renewMessageLock(com.azure.messaging.servicebus.MessageLockToken)
  - com.azure.messaging.servicebus.ServiceBusReceiverClient.renewSessionLock(java.lang.String)
  - com.azure.messaging.servicebus.ServiceBusReceiverClient.setSessionState(java.lang.String,byte[])
  langs:
  - java
  name: ServiceBusReceiverClient
  nameWithType: ServiceBusReceiverClient
  fullName: com.azure.messaging.servicebus.ServiceBusReceiverClient
  type: Class
  package: com.azure.messaging.servicebus
  summary: >-
    A **synchronous** receiver responsible for receiving <xref uid="com.azure.messaging.servicebus.ServiceBusReceivedMessage" data-throw-if-not-resolved="false">ServiceBusReceivedMessage</xref> from a specific queue or topic on Azure Service Bus.


    **Create an instance of receiver**


    ```java

    ServiceBusReceiverClient receiver = new ServiceBusClientBuilder()
         .connectionString(
             "Endpoint={eh-namespace};SharedAccessKeyName={policy-name};SharedAccessKey={key};"
                 + "Entity-Path={hub-name}")
         .receiver()
         .queueName("<< QUEUE NAME >>")
         .buildClient();
    ```
  syntax:
    content: public final class ServiceBusReceiverClient implements AutoCloseable
  inheritance:
  - java.lang.Object
  implements:
  - java.lang.AutoCloseable
  inheritedMembers:
  - java.lang.Object.clone()
  - java.lang.Object.equals(java.lang.Object)
  - java.lang.Object.finalize()
  - java.lang.Object.getClass()
  - java.lang.Object.hashCode()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.toString()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
- uid: com.azure.messaging.servicebus.ServiceBusReceiverClient.ServiceBusReceiverClient(com.azure.messaging.servicebus.ServiceBusReceiverAsyncClient,java.time.Duration)
  id: ServiceBusReceiverClient(com.azure.messaging.servicebus.ServiceBusReceiverAsyncClient,java.time.Duration)
  artifact: com.azure:azure-messaging-servicebus:7.0.0-beta.2
  parent: com.azure.messaging.servicebus.ServiceBusReceiverClient
  langs:
  - java
  name: ServiceBusReceiverClient(ServiceBusReceiverAsyncClient asyncClient, Duration operationTimeout)
  nameWithType: ServiceBusReceiverClient.ServiceBusReceiverClient(ServiceBusReceiverAsyncClient asyncClient, Duration operationTimeout)
  fullName: com.azure.messaging.servicebus.ServiceBusReceiverClient.ServiceBusReceiverClient(ServiceBusReceiverAsyncClient asyncClient, Duration operationTimeout)
  overload: com.azure.messaging.servicebus.ServiceBusReceiverClient.ServiceBusReceiverClient*
  type: Constructor
  package: com.azure.messaging.servicebus
  summary: Creates a synchronous receiver given its asynchronous counterpart.
  syntax:
    content: " ServiceBusReceiverClient(ServiceBusReceiverAsyncClient asyncClient, Duration operationTimeout)"
    parameters:
    - id: asyncClient
      type: com.azure.messaging.servicebus.ServiceBusReceiverAsyncClient
      description: Asynchronous receiver.
    - id: operationTimeout
      type: java.time.Duration
- uid: com.azure.messaging.servicebus.ServiceBusReceiverClient.abandon(com.azure.messaging.servicebus.MessageLockToken)
  id: abandon(com.azure.messaging.servicebus.MessageLockToken)
  artifact: com.azure:azure-messaging-servicebus:7.0.0-beta.2
  parent: com.azure.messaging.servicebus.ServiceBusReceiverClient
  langs:
  - java
  name: abandon(MessageLockToken lockToken)
  nameWithType: ServiceBusReceiverClient.abandon(MessageLockToken lockToken)
  fullName: com.azure.messaging.servicebus.ServiceBusReceiverClient.abandon(MessageLockToken lockToken)
  overload: com.azure.messaging.servicebus.ServiceBusReceiverClient.abandon*
  type: Method
  package: com.azure.messaging.servicebus
  summary: Abandon a <xref uid="com.azure.messaging.servicebus.ServiceBusReceivedMessage" data-throw-if-not-resolved="false">message</xref> with its lock token. This will make the message available again for processing. Abandoning a message will increase the delivery count on the message.
  syntax:
    content: public void abandon(MessageLockToken lockToken)
    parameters:
    - id: lockToken
      type: com.azure.messaging.servicebus.MessageLockToken
      description: Lock token of the message.
- uid: com.azure.messaging.servicebus.ServiceBusReceiverClient.abandon(com.azure.messaging.servicebus.MessageLockToken,java.util.Map<java.lang.String,java.lang.Object>)
  id: abandon(com.azure.messaging.servicebus.MessageLockToken,java.util.Map<java.lang.String,java.lang.Object>)
  artifact: com.azure:azure-messaging-servicebus:7.0.0-beta.2
  parent: com.azure.messaging.servicebus.ServiceBusReceiverClient
  langs:
  - java
  name: abandon(MessageLockToken lockToken, Map<String,Object> propertiesToModify)
  nameWithType: ServiceBusReceiverClient.abandon(MessageLockToken lockToken, Map<String,Object> propertiesToModify)
  fullName: com.azure.messaging.servicebus.ServiceBusReceiverClient.abandon(MessageLockToken lockToken, Map<String,Object> propertiesToModify)
  overload: com.azure.messaging.servicebus.ServiceBusReceiverClient.abandon*
  type: Method
  package: com.azure.messaging.servicebus
  summary: Abandon a <xref uid="com.azure.messaging.servicebus.ServiceBusReceivedMessage" data-throw-if-not-resolved="false">message</xref> with its lock token and updates the message's properties. This will make the message available again for processing. Abandoning a message will increase the delivery count on the message.
  syntax:
    content: public void abandon(MessageLockToken lockToken, Map<String,Object> propertiesToModify)
    parameters:
    - id: lockToken
      type: com.azure.messaging.servicebus.MessageLockToken
      description: Lock token of the message.
    - id: propertiesToModify
      type: java.util.Map<java.lang.String,java.lang.Object>
      description: Properties to modify on the message.
- uid: com.azure.messaging.servicebus.ServiceBusReceiverClient.abandon(com.azure.messaging.servicebus.MessageLockToken,java.util.Map<java.lang.String,java.lang.Object>,java.lang.String)
  id: abandon(com.azure.messaging.servicebus.MessageLockToken,java.util.Map<java.lang.String,java.lang.Object>,java.lang.String)
  artifact: com.azure:azure-messaging-servicebus:7.0.0-beta.2
  parent: com.azure.messaging.servicebus.ServiceBusReceiverClient
  langs:
  - java
  name: abandon(MessageLockToken lockToken, Map<String,Object> propertiesToModify, String sessionId)
  nameWithType: ServiceBusReceiverClient.abandon(MessageLockToken lockToken, Map<String,Object> propertiesToModify, String sessionId)
  fullName: com.azure.messaging.servicebus.ServiceBusReceiverClient.abandon(MessageLockToken lockToken, Map<String,Object> propertiesToModify, String sessionId)
  overload: com.azure.messaging.servicebus.ServiceBusReceiverClient.abandon*
  type: Method
  package: com.azure.messaging.servicebus
  summary: Abandon a <xref uid="com.azure.messaging.servicebus.ServiceBusReceivedMessage" data-throw-if-not-resolved="false">message</xref> with its lock token and updates the message's properties. This will make the message available again for processing. Abandoning a message will increase the delivery count on the message.
  syntax:
    content: public void abandon(MessageLockToken lockToken, Map<String,Object> propertiesToModify, String sessionId)
    parameters:
    - id: lockToken
      type: com.azure.messaging.servicebus.MessageLockToken
      description: Lock token of the message.
    - id: propertiesToModify
      type: java.util.Map<java.lang.String,java.lang.Object>
      description: Properties to modify on the message.
    - id: sessionId
      type: java.lang.String
      description: Session id of the message to abandon. <code>null</code> if there is no session.
- uid: com.azure.messaging.servicebus.ServiceBusReceiverClient.close()
  id: close()
  artifact: com.azure:azure-messaging-servicebus:7.0.0-beta.2
  parent: com.azure.messaging.servicebus.ServiceBusReceiverClient
  langs:
  - java
  name: close()
  nameWithType: ServiceBusReceiverClient.close()
  fullName: com.azure.messaging.servicebus.ServiceBusReceiverClient.close()
  overload: com.azure.messaging.servicebus.ServiceBusReceiverClient.close*
  type: Method
  package: com.azure.messaging.servicebus
  syntax:
    content: public void close()
- uid: com.azure.messaging.servicebus.ServiceBusReceiverClient.complete(com.azure.messaging.servicebus.MessageLockToken)
  id: complete(com.azure.messaging.servicebus.MessageLockToken)
  artifact: com.azure:azure-messaging-servicebus:7.0.0-beta.2
  parent: com.azure.messaging.servicebus.ServiceBusReceiverClient
  langs:
  - java
  name: complete(MessageLockToken lockToken)
  nameWithType: ServiceBusReceiverClient.complete(MessageLockToken lockToken)
  fullName: com.azure.messaging.servicebus.ServiceBusReceiverClient.complete(MessageLockToken lockToken)
  overload: com.azure.messaging.servicebus.ServiceBusReceiverClient.complete*
  type: Method
  package: com.azure.messaging.servicebus
  summary: Completes a <xref uid="com.azure.messaging.servicebus.ServiceBusReceivedMessage" data-throw-if-not-resolved="false">message</xref> using its lock token. This will delete the message from the service.
  syntax:
    content: public void complete(MessageLockToken lockToken)
    parameters:
    - id: lockToken
      type: com.azure.messaging.servicebus.MessageLockToken
      description: Lock token of the message.
- uid: com.azure.messaging.servicebus.ServiceBusReceiverClient.complete(com.azure.messaging.servicebus.MessageLockToken,java.lang.String)
  id: complete(com.azure.messaging.servicebus.MessageLockToken,java.lang.String)
  artifact: com.azure:azure-messaging-servicebus:7.0.0-beta.2
  parent: com.azure.messaging.servicebus.ServiceBusReceiverClient
  langs:
  - java
  name: complete(MessageLockToken lockToken, String sessionId)
  nameWithType: ServiceBusReceiverClient.complete(MessageLockToken lockToken, String sessionId)
  fullName: com.azure.messaging.servicebus.ServiceBusReceiverClient.complete(MessageLockToken lockToken, String sessionId)
  overload: com.azure.messaging.servicebus.ServiceBusReceiverClient.complete*
  type: Method
  package: com.azure.messaging.servicebus
  summary: Completes a <xref uid="com.azure.messaging.servicebus.ServiceBusReceivedMessage" data-throw-if-not-resolved="false">message</xref> using its lock token. This will delete the message from the service.
  syntax:
    content: public void complete(MessageLockToken lockToken, String sessionId)
    parameters:
    - id: lockToken
      type: com.azure.messaging.servicebus.MessageLockToken
      description: Lock token of the message.
    - id: sessionId
      type: java.lang.String
      description: Session id of the message to complete. <code>null</code> if there is no session.
- uid: com.azure.messaging.servicebus.ServiceBusReceiverClient.deadLetter(com.azure.messaging.servicebus.MessageLockToken)
  id: deadLetter(com.azure.messaging.servicebus.MessageLockToken)
  artifact: com.azure:azure-messaging-servicebus:7.0.0-beta.2
  parent: com.azure.messaging.servicebus.ServiceBusReceiverClient
  langs:
  - java
  name: deadLetter(MessageLockToken lockToken)
  nameWithType: ServiceBusReceiverClient.deadLetter(MessageLockToken lockToken)
  fullName: com.azure.messaging.servicebus.ServiceBusReceiverClient.deadLetter(MessageLockToken lockToken)
  overload: com.azure.messaging.servicebus.ServiceBusReceiverClient.deadLetter*
  type: Method
  package: com.azure.messaging.servicebus
  summary: Moves a <xref uid="com.azure.messaging.servicebus.ServiceBusReceivedMessage" data-throw-if-not-resolved="false">message</xref> to the deadletter sub-queue.
  syntax:
    content: public void deadLetter(MessageLockToken lockToken)
    parameters:
    - id: lockToken
      type: com.azure.messaging.servicebus.MessageLockToken
      description: Lock token of the message.
- uid: com.azure.messaging.servicebus.ServiceBusReceiverClient.deadLetter(com.azure.messaging.servicebus.MessageLockToken,com.azure.messaging.servicebus.models.DeadLetterOptions)
  id: deadLetter(com.azure.messaging.servicebus.MessageLockToken,com.azure.messaging.servicebus.models.DeadLetterOptions)
  artifact: com.azure:azure-messaging-servicebus:7.0.0-beta.2
  parent: com.azure.messaging.servicebus.ServiceBusReceiverClient
  langs:
  - java
  name: deadLetter(MessageLockToken lockToken, DeadLetterOptions deadLetterOptions)
  nameWithType: ServiceBusReceiverClient.deadLetter(MessageLockToken lockToken, DeadLetterOptions deadLetterOptions)
  fullName: com.azure.messaging.servicebus.ServiceBusReceiverClient.deadLetter(MessageLockToken lockToken, DeadLetterOptions deadLetterOptions)
  overload: com.azure.messaging.servicebus.ServiceBusReceiverClient.deadLetter*
  type: Method
  package: com.azure.messaging.servicebus
  summary: Moves a <xref uid="com.azure.messaging.servicebus.ServiceBusReceivedMessage" data-throw-if-not-resolved="false">message</xref> to the deadletter subqueue with deadletter reason, error description, and/or modified properties.
  syntax:
    content: public void deadLetter(MessageLockToken lockToken, DeadLetterOptions deadLetterOptions)
    parameters:
    - id: lockToken
      type: com.azure.messaging.servicebus.MessageLockToken
      description: Lock token of the message.
    - id: deadLetterOptions
      type: com.azure.messaging.servicebus.models.DeadLetterOptions
      description: The options to specify when moving message to the deadletter sub-queue.
- uid: com.azure.messaging.servicebus.ServiceBusReceiverClient.deadLetter(com.azure.messaging.servicebus.MessageLockToken,com.azure.messaging.servicebus.models.DeadLetterOptions,java.lang.String)
  id: deadLetter(com.azure.messaging.servicebus.MessageLockToken,com.azure.messaging.servicebus.models.DeadLetterOptions,java.lang.String)
  artifact: com.azure:azure-messaging-servicebus:7.0.0-beta.2
  parent: com.azure.messaging.servicebus.ServiceBusReceiverClient
  langs:
  - java
  name: deadLetter(MessageLockToken lockToken, DeadLetterOptions deadLetterOptions, String sessionId)
  nameWithType: ServiceBusReceiverClient.deadLetter(MessageLockToken lockToken, DeadLetterOptions deadLetterOptions, String sessionId)
  fullName: com.azure.messaging.servicebus.ServiceBusReceiverClient.deadLetter(MessageLockToken lockToken, DeadLetterOptions deadLetterOptions, String sessionId)
  overload: com.azure.messaging.servicebus.ServiceBusReceiverClient.deadLetter*
  type: Method
  package: com.azure.messaging.servicebus
  summary: Moves a <xref uid="com.azure.messaging.servicebus.ServiceBusReceivedMessage" data-throw-if-not-resolved="false">message</xref> to the deadletter subqueue with deadletter reason, error description, and/or modified properties.
  syntax:
    content: public void deadLetter(MessageLockToken lockToken, DeadLetterOptions deadLetterOptions, String sessionId)
    parameters:
    - id: lockToken
      type: com.azure.messaging.servicebus.MessageLockToken
      description: Lock token of the message.
    - id: deadLetterOptions
      type: com.azure.messaging.servicebus.models.DeadLetterOptions
      description: The options to specify when moving message to the deadletter sub-queue.
    - id: sessionId
      type: java.lang.String
      description: Session id of the message to deadletter. <code>null</code> if there is no session.
- uid: com.azure.messaging.servicebus.ServiceBusReceiverClient.deadLetter(com.azure.messaging.servicebus.MessageLockToken,java.lang.String)
  id: deadLetter(com.azure.messaging.servicebus.MessageLockToken,java.lang.String)
  artifact: com.azure:azure-messaging-servicebus:7.0.0-beta.2
  parent: com.azure.messaging.servicebus.ServiceBusReceiverClient
  langs:
  - java
  name: deadLetter(MessageLockToken lockToken, String sessionId)
  nameWithType: ServiceBusReceiverClient.deadLetter(MessageLockToken lockToken, String sessionId)
  fullName: com.azure.messaging.servicebus.ServiceBusReceiverClient.deadLetter(MessageLockToken lockToken, String sessionId)
  overload: com.azure.messaging.servicebus.ServiceBusReceiverClient.deadLetter*
  type: Method
  package: com.azure.messaging.servicebus
  summary: Moves a <xref uid="com.azure.messaging.servicebus.ServiceBusReceivedMessage" data-throw-if-not-resolved="false">message</xref> to the deadletter sub-queue.
  syntax:
    content: public void deadLetter(MessageLockToken lockToken, String sessionId)
    parameters:
    - id: lockToken
      type: com.azure.messaging.servicebus.MessageLockToken
      description: Lock token of the message.
    - id: sessionId
      type: java.lang.String
      description: Session id of the message to deadletter. <code>null</code> if there is no session.
- uid: com.azure.messaging.servicebus.ServiceBusReceiverClient.defer(com.azure.messaging.servicebus.MessageLockToken)
  id: defer(com.azure.messaging.servicebus.MessageLockToken)
  artifact: com.azure:azure-messaging-servicebus:7.0.0-beta.2
  parent: com.azure.messaging.servicebus.ServiceBusReceiverClient
  langs:
  - java
  name: defer(MessageLockToken lockToken)
  nameWithType: ServiceBusReceiverClient.defer(MessageLockToken lockToken)
  fullName: com.azure.messaging.servicebus.ServiceBusReceiverClient.defer(MessageLockToken lockToken)
  overload: com.azure.messaging.servicebus.ServiceBusReceiverClient.defer*
  type: Method
  package: com.azure.messaging.servicebus
  summary: Defers a <xref uid="com.azure.messaging.servicebus.ServiceBusReceivedMessage" data-throw-if-not-resolved="false">message</xref> using its lock token. This will move message into the deferred subqueue.
  syntax:
    content: public void defer(MessageLockToken lockToken)
    parameters:
    - id: lockToken
      type: com.azure.messaging.servicebus.MessageLockToken
      description: Lock token of the message.
- uid: com.azure.messaging.servicebus.ServiceBusReceiverClient.defer(com.azure.messaging.servicebus.MessageLockToken,java.lang.String)
  id: defer(com.azure.messaging.servicebus.MessageLockToken,java.lang.String)
  artifact: com.azure:azure-messaging-servicebus:7.0.0-beta.2
  parent: com.azure.messaging.servicebus.ServiceBusReceiverClient
  langs:
  - java
  name: defer(MessageLockToken lockToken, String sessionId)
  nameWithType: ServiceBusReceiverClient.defer(MessageLockToken lockToken, String sessionId)
  fullName: com.azure.messaging.servicebus.ServiceBusReceiverClient.defer(MessageLockToken lockToken, String sessionId)
  overload: com.azure.messaging.servicebus.ServiceBusReceiverClient.defer*
  type: Method
  package: com.azure.messaging.servicebus
  summary: Defers a <xref uid="com.azure.messaging.servicebus.ServiceBusReceivedMessage" data-throw-if-not-resolved="false">message</xref> using its lock token. This will move message into the deferred subqueue.
  syntax:
    content: public void defer(MessageLockToken lockToken, String sessionId)
    parameters:
    - id: lockToken
      type: com.azure.messaging.servicebus.MessageLockToken
      description: Lock token of the message.
    - id: sessionId
      type: java.lang.String
      description: Session id of the message to defer. <code>null</code> if there is no session.
- uid: com.azure.messaging.servicebus.ServiceBusReceiverClient.defer(com.azure.messaging.servicebus.MessageLockToken,java.util.Map<java.lang.String,java.lang.Object>)
  id: defer(com.azure.messaging.servicebus.MessageLockToken,java.util.Map<java.lang.String,java.lang.Object>)
  artifact: com.azure:azure-messaging-servicebus:7.0.0-beta.2
  parent: com.azure.messaging.servicebus.ServiceBusReceiverClient
  langs:
  - java
  name: defer(MessageLockToken lockToken, Map<String,Object> propertiesToModify)
  nameWithType: ServiceBusReceiverClient.defer(MessageLockToken lockToken, Map<String,Object> propertiesToModify)
  fullName: com.azure.messaging.servicebus.ServiceBusReceiverClient.defer(MessageLockToken lockToken, Map<String,Object> propertiesToModify)
  overload: com.azure.messaging.servicebus.ServiceBusReceiverClient.defer*
  type: Method
  package: com.azure.messaging.servicebus
  summary: Defers a <xref uid="com.azure.messaging.servicebus.ServiceBusReceivedMessage" data-throw-if-not-resolved="false">message</xref> using its lock token with modified message property. This will move message into the deferred subqueue.
  syntax:
    content: public void defer(MessageLockToken lockToken, Map<String,Object> propertiesToModify)
    parameters:
    - id: lockToken
      type: com.azure.messaging.servicebus.MessageLockToken
      description: Lock token of the message.
    - id: propertiesToModify
      type: java.util.Map<java.lang.String,java.lang.Object>
      description: Message properties to modify.
- uid: com.azure.messaging.servicebus.ServiceBusReceiverClient.defer(com.azure.messaging.servicebus.MessageLockToken,java.util.Map<java.lang.String,java.lang.Object>,java.lang.String)
  id: defer(com.azure.messaging.servicebus.MessageLockToken,java.util.Map<java.lang.String,java.lang.Object>,java.lang.String)
  artifact: com.azure:azure-messaging-servicebus:7.0.0-beta.2
  parent: com.azure.messaging.servicebus.ServiceBusReceiverClient
  langs:
  - java
  name: defer(MessageLockToken lockToken, Map<String,Object> propertiesToModify, String sessionId)
  nameWithType: ServiceBusReceiverClient.defer(MessageLockToken lockToken, Map<String,Object> propertiesToModify, String sessionId)
  fullName: com.azure.messaging.servicebus.ServiceBusReceiverClient.defer(MessageLockToken lockToken, Map<String,Object> propertiesToModify, String sessionId)
  overload: com.azure.messaging.servicebus.ServiceBusReceiverClient.defer*
  type: Method
  package: com.azure.messaging.servicebus
  summary: Defers a <xref uid="com.azure.messaging.servicebus.ServiceBusReceivedMessage" data-throw-if-not-resolved="false">message</xref> using its lock token with modified message property. This will move message into the deferred subqueue.
  syntax:
    content: public void defer(MessageLockToken lockToken, Map<String,Object> propertiesToModify, String sessionId)
    parameters:
    - id: lockToken
      type: com.azure.messaging.servicebus.MessageLockToken
      description: Lock token of the message.
    - id: propertiesToModify
      type: java.util.Map<java.lang.String,java.lang.Object>
      description: Message properties to modify.
    - id: sessionId
      type: java.lang.String
      description: Session id of the message to defer. <code>null</code> if there is no session.
- uid: com.azure.messaging.servicebus.ServiceBusReceiverClient.getEntityPath()
  id: getEntityPath()
  artifact: com.azure:azure-messaging-servicebus:7.0.0-beta.2
  parent: com.azure.messaging.servicebus.ServiceBusReceiverClient
  langs:
  - java
  name: getEntityPath()
  nameWithType: ServiceBusReceiverClient.getEntityPath()
  fullName: com.azure.messaging.servicebus.ServiceBusReceiverClient.getEntityPath()
  overload: com.azure.messaging.servicebus.ServiceBusReceiverClient.getEntityPath*
  type: Method
  package: com.azure.messaging.servicebus
  summary: Gets the Service Bus resource this client interacts with.
  syntax:
    content: public String getEntityPath()
    return:
      type: java.lang.String
      description: The Service Bus resource this client interacts with.
- uid: com.azure.messaging.servicebus.ServiceBusReceiverClient.getFullyQualifiedNamespace()
  id: getFullyQualifiedNamespace()
  artifact: com.azure:azure-messaging-servicebus:7.0.0-beta.2
  parent: com.azure.messaging.servicebus.ServiceBusReceiverClient
  langs:
  - java
  name: getFullyQualifiedNamespace()
  nameWithType: ServiceBusReceiverClient.getFullyQualifiedNamespace()
  fullName: com.azure.messaging.servicebus.ServiceBusReceiverClient.getFullyQualifiedNamespace()
  overload: com.azure.messaging.servicebus.ServiceBusReceiverClient.getFullyQualifiedNamespace*
  type: Method
  package: com.azure.messaging.servicebus
  summary: Gets the fully qualified Service Bus namespace that the connection is associated with. This is likely similar to `{yournamespace}.servicebus.windows.net`.
  syntax:
    content: public String getFullyQualifiedNamespace()
    return:
      type: java.lang.String
      description: The fully qualified Service Bus namespace that the connection is associated with.
- uid: com.azure.messaging.servicebus.ServiceBusReceiverClient.getSessionState(java.lang.String)
  id: getSessionState(java.lang.String)
  artifact: com.azure:azure-messaging-servicebus:7.0.0-beta.2
  parent: com.azure.messaging.servicebus.ServiceBusReceiverClient
  langs:
  - java
  name: getSessionState(String sessionId)
  nameWithType: ServiceBusReceiverClient.getSessionState(String sessionId)
  fullName: com.azure.messaging.servicebus.ServiceBusReceiverClient.getSessionState(String sessionId)
  overload: com.azure.messaging.servicebus.ServiceBusReceiverClient.getSessionState*
  type: Method
  package: com.azure.messaging.servicebus
  summary: Gets the state of a session given its identifier.
  syntax:
    content: public byte[] getSessionState(String sessionId)
    parameters:
    - id: sessionId
      type: java.lang.String
      description: Identifier of session to get.
    return:
      type: byte[]
      description: The session state or null if there is no state set for the session.
- uid: com.azure.messaging.servicebus.ServiceBusReceiverClient.peek()
  id: peek()
  artifact: com.azure:azure-messaging-servicebus:7.0.0-beta.2
  parent: com.azure.messaging.servicebus.ServiceBusReceiverClient
  langs:
  - java
  name: peek()
  nameWithType: ServiceBusReceiverClient.peek()
  fullName: com.azure.messaging.servicebus.ServiceBusReceiverClient.peek()
  overload: com.azure.messaging.servicebus.ServiceBusReceiverClient.peek*
  type: Method
  package: com.azure.messaging.servicebus
  summary: Reads the next active message without changing the state of the receiver or the message source. The first call to `peek()` fetches the first active message for this receiver. Each subsequent call fetches the subsequent message in the entity.
  syntax:
    content: public ServiceBusReceivedMessage peek()
    return:
      type: com.azure.messaging.servicebus.ServiceBusReceivedMessage
      description: A peeked <xref uid="com.azure.messaging.servicebus.ServiceBusReceivedMessage" data-throw-if-not-resolved="false">ServiceBusReceivedMessage</xref>.
- uid: com.azure.messaging.servicebus.ServiceBusReceiverClient.peek(java.lang.String)
  id: peek(java.lang.String)
  artifact: com.azure:azure-messaging-servicebus:7.0.0-beta.2
  parent: com.azure.messaging.servicebus.ServiceBusReceiverClient
  langs:
  - java
  name: peek(String sessionId)
  nameWithType: ServiceBusReceiverClient.peek(String sessionId)
  fullName: com.azure.messaging.servicebus.ServiceBusReceiverClient.peek(String sessionId)
  overload: com.azure.messaging.servicebus.ServiceBusReceiverClient.peek*
  type: Method
  package: com.azure.messaging.servicebus
  summary: Reads the next active message without changing the state of the receiver or the message source. The first call to `peek()` fetches the first active message for this receiver. Each subsequent call fetches the subsequent message in the entity.
  syntax:
    content: public ServiceBusReceivedMessage peek(String sessionId)
    parameters:
    - id: sessionId
      type: java.lang.String
      description: Session id of the message to peek from. <code>null</code> if there is no session.
    return:
      type: com.azure.messaging.servicebus.ServiceBusReceivedMessage
      description: A peeked <xref uid="com.azure.messaging.servicebus.ServiceBusReceivedMessage" data-throw-if-not-resolved="false">ServiceBusReceivedMessage</xref>.
- uid: com.azure.messaging.servicebus.ServiceBusReceiverClient.peekAt(long)
  id: peekAt(long)
  artifact: com.azure:azure-messaging-servicebus:7.0.0-beta.2
  parent: com.azure.messaging.servicebus.ServiceBusReceiverClient
  langs:
  - java
  name: peekAt(long sequenceNumber)
  nameWithType: ServiceBusReceiverClient.peekAt(long sequenceNumber)
  fullName: com.azure.messaging.servicebus.ServiceBusReceiverClient.peekAt(long sequenceNumber)
  overload: com.azure.messaging.servicebus.ServiceBusReceiverClient.peekAt*
  type: Method
  package: com.azure.messaging.servicebus
  summary: Starting from the given sequence number, reads next the active message without changing the state of the receiver or the message source.
  syntax:
    content: public ServiceBusReceivedMessage peekAt(long sequenceNumber)
    parameters:
    - id: sequenceNumber
      type: long
      description: The sequence number from where to read the message.
    return:
      type: com.azure.messaging.servicebus.ServiceBusReceivedMessage
      description: A peeked <xref uid="com.azure.messaging.servicebus.ServiceBusReceivedMessage" data-throw-if-not-resolved="false">ServiceBusReceivedMessage</xref>.
- uid: com.azure.messaging.servicebus.ServiceBusReceiverClient.peekAt(long,java.lang.String)
  id: peekAt(long,java.lang.String)
  artifact: com.azure:azure-messaging-servicebus:7.0.0-beta.2
  parent: com.azure.messaging.servicebus.ServiceBusReceiverClient
  langs:
  - java
  name: peekAt(long sequenceNumber, String sessionId)
  nameWithType: ServiceBusReceiverClient.peekAt(long sequenceNumber, String sessionId)
  fullName: com.azure.messaging.servicebus.ServiceBusReceiverClient.peekAt(long sequenceNumber, String sessionId)
  overload: com.azure.messaging.servicebus.ServiceBusReceiverClient.peekAt*
  type: Method
  package: com.azure.messaging.servicebus
  summary: Starting from the given sequence number, reads next the active message without changing the state of the receiver or the message source.
  syntax:
    content: public ServiceBusReceivedMessage peekAt(long sequenceNumber, String sessionId)
    parameters:
    - id: sequenceNumber
      type: long
      description: The sequence number from where to read the message.
    - id: sessionId
      type: java.lang.String
      description: Session id of the message to peek from. <code>null</code> if there is no session.
    return:
      type: com.azure.messaging.servicebus.ServiceBusReceivedMessage
      description: A peeked <xref uid="com.azure.messaging.servicebus.ServiceBusReceivedMessage" data-throw-if-not-resolved="false">ServiceBusReceivedMessage</xref>.
- uid: com.azure.messaging.servicebus.ServiceBusReceiverClient.peekBatch(int)
  id: peekBatch(int)
  artifact: com.azure:azure-messaging-servicebus:7.0.0-beta.2
  parent: com.azure.messaging.servicebus.ServiceBusReceiverClient
  langs:
  - java
  name: peekBatch(int maxMessages)
  nameWithType: ServiceBusReceiverClient.peekBatch(int maxMessages)
  fullName: com.azure.messaging.servicebus.ServiceBusReceiverClient.peekBatch(int maxMessages)
  overload: com.azure.messaging.servicebus.ServiceBusReceiverClient.peekBatch*
  type: Method
  package: com.azure.messaging.servicebus
  summary: Reads the next batch of active messages without changing the state of the receiver or the message source.
  syntax:
    content: public IterableStream<ServiceBusReceivedMessage> peekBatch(int maxMessages)
    parameters:
    - id: maxMessages
      type: int
      description: The number of messages.
    return:
      type: com.azure.core.util.IterableStream<com.azure.messaging.servicebus.ServiceBusReceivedMessage>
      description: An <xref uid="com.azure.core.util.IterableStream" data-throw-if-not-resolved="false">IterableStream</xref> of <xref uid="com.azure.messaging.servicebus.ServiceBusReceivedMessage" data-throw-if-not-resolved="false">messages</xref> that are peeked.
- uid: com.azure.messaging.servicebus.ServiceBusReceiverClient.peekBatch(int,java.lang.String)
  id: peekBatch(int,java.lang.String)
  artifact: com.azure:azure-messaging-servicebus:7.0.0-beta.2
  parent: com.azure.messaging.servicebus.ServiceBusReceiverClient
  langs:
  - java
  name: peekBatch(int maxMessages, String sessionId)
  nameWithType: ServiceBusReceiverClient.peekBatch(int maxMessages, String sessionId)
  fullName: com.azure.messaging.servicebus.ServiceBusReceiverClient.peekBatch(int maxMessages, String sessionId)
  overload: com.azure.messaging.servicebus.ServiceBusReceiverClient.peekBatch*
  type: Method
  package: com.azure.messaging.servicebus
  summary: Reads the next batch of active messages without changing the state of the receiver or the message source.
  syntax:
    content: public IterableStream<ServiceBusReceivedMessage> peekBatch(int maxMessages, String sessionId)
    parameters:
    - id: maxMessages
      type: int
      description: The number of messages.
    - id: sessionId
      type: java.lang.String
      description: Session id of the messages to peek from. <code>null</code> if there is no session.
    return:
      type: com.azure.core.util.IterableStream<com.azure.messaging.servicebus.ServiceBusReceivedMessage>
      description: An <xref uid="com.azure.core.util.IterableStream" data-throw-if-not-resolved="false">IterableStream</xref> of <xref uid="com.azure.messaging.servicebus.ServiceBusReceivedMessage" data-throw-if-not-resolved="false">messages</xref> that are peeked.
- uid: com.azure.messaging.servicebus.ServiceBusReceiverClient.peekBatchAt(int,long)
  id: peekBatchAt(int,long)
  artifact: com.azure:azure-messaging-servicebus:7.0.0-beta.2
  parent: com.azure.messaging.servicebus.ServiceBusReceiverClient
  langs:
  - java
  name: peekBatchAt(int maxMessages, long sequenceNumber)
  nameWithType: ServiceBusReceiverClient.peekBatchAt(int maxMessages, long sequenceNumber)
  fullName: com.azure.messaging.servicebus.ServiceBusReceiverClient.peekBatchAt(int maxMessages, long sequenceNumber)
  overload: com.azure.messaging.servicebus.ServiceBusReceiverClient.peekBatchAt*
  type: Method
  package: com.azure.messaging.servicebus
  summary: Starting from the given sequence number, reads the next batch of active messages without changing the state of the receiver or the message source.
  syntax:
    content: public IterableStream<ServiceBusReceivedMessage> peekBatchAt(int maxMessages, long sequenceNumber)
    parameters:
    - id: maxMessages
      type: int
      description: The number of messages.
    - id: sequenceNumber
      type: long
      description: The sequence number from where to start reading messages.
    return:
      type: com.azure.core.util.IterableStream<com.azure.messaging.servicebus.ServiceBusReceivedMessage>
      description: An <xref uid="com.azure.core.util.IterableStream" data-throw-if-not-resolved="false">IterableStream</xref> of <xref uid="com.azure.messaging.servicebus.ServiceBusReceivedMessage" data-throw-if-not-resolved="false">ServiceBusReceivedMessage</xref> peeked.
- uid: com.azure.messaging.servicebus.ServiceBusReceiverClient.peekBatchAt(int,long,java.lang.String)
  id: peekBatchAt(int,long,java.lang.String)
  artifact: com.azure:azure-messaging-servicebus:7.0.0-beta.2
  parent: com.azure.messaging.servicebus.ServiceBusReceiverClient
  langs:
  - java
  name: peekBatchAt(int maxMessages, long sequenceNumber, String sessionId)
  nameWithType: ServiceBusReceiverClient.peekBatchAt(int maxMessages, long sequenceNumber, String sessionId)
  fullName: com.azure.messaging.servicebus.ServiceBusReceiverClient.peekBatchAt(int maxMessages, long sequenceNumber, String sessionId)
  overload: com.azure.messaging.servicebus.ServiceBusReceiverClient.peekBatchAt*
  type: Method
  package: com.azure.messaging.servicebus
  summary: Starting from the given sequence number, reads the next batch of active messages without changing the state of the receiver or the message source.
  syntax:
    content: public IterableStream<ServiceBusReceivedMessage> peekBatchAt(int maxMessages, long sequenceNumber, String sessionId)
    parameters:
    - id: maxMessages
      type: int
      description: The number of messages.
    - id: sequenceNumber
      type: long
      description: The sequence number from where to start reading messages.
    - id: sessionId
      type: java.lang.String
      description: Session id of the messages to peek from. <code>null</code> if there is no session.
    return:
      type: com.azure.core.util.IterableStream<com.azure.messaging.servicebus.ServiceBusReceivedMessage>
      description: An <xref uid="com.azure.core.util.IterableStream" data-throw-if-not-resolved="false">IterableStream</xref> of <xref uid="com.azure.messaging.servicebus.ServiceBusReceivedMessage" data-throw-if-not-resolved="false">ServiceBusReceivedMessage</xref> peeked.
- uid: com.azure.messaging.servicebus.ServiceBusReceiverClient.receive(int)
  id: receive(int)
  artifact: com.azure:azure-messaging-servicebus:7.0.0-beta.2
  parent: com.azure.messaging.servicebus.ServiceBusReceiverClient
  langs:
  - java
  name: receive(int maxMessages)
  nameWithType: ServiceBusReceiverClient.receive(int maxMessages)
  fullName: com.azure.messaging.servicebus.ServiceBusReceiverClient.receive(int maxMessages)
  overload: com.azure.messaging.servicebus.ServiceBusReceiverClient.receive*
  type: Method
  package: com.azure.messaging.servicebus
  summary: Receives an iterable stream of <xref uid="com.azure.messaging.servicebus.ServiceBusReceivedMessage" data-throw-if-not-resolved="false">messages</xref> from the Service Bus entity. The receive operation will wait for a default 1 minute for receiving a message before it times out. You can it override by using <xref uid="com.azure.messaging.servicebus.ServiceBusReceiverClient.receive(int,java.time.Duration)" data-throw-if-not-resolved="false">#receive(int, Duration)</xref>.
  syntax:
    content: public IterableStream<ServiceBusReceivedMessageContext> receive(int maxMessages)
    parameters:
    - id: maxMessages
      type: int
      description: The maximum number of messages to receive.
    return:
      type: com.azure.core.util.IterableStream<com.azure.messaging.servicebus.ServiceBusReceivedMessageContext>
      description: An <xref uid="com.azure.core.util.IterableStream" data-throw-if-not-resolved="false">IterableStream</xref> of at most <code>maxMessages</code> messages from the Service Bus entity.
- uid: com.azure.messaging.servicebus.ServiceBusReceiverClient.receive(int,java.time.Duration)
  id: receive(int,java.time.Duration)
  artifact: com.azure:azure-messaging-servicebus:7.0.0-beta.2
  parent: com.azure.messaging.servicebus.ServiceBusReceiverClient
  langs:
  - java
  name: receive(int maxMessages, Duration maxWaitTime)
  nameWithType: ServiceBusReceiverClient.receive(int maxMessages, Duration maxWaitTime)
  fullName: com.azure.messaging.servicebus.ServiceBusReceiverClient.receive(int maxMessages, Duration maxWaitTime)
  overload: com.azure.messaging.servicebus.ServiceBusReceiverClient.receive*
  type: Method
  package: com.azure.messaging.servicebus
  summary: Receives an iterable stream of <xref uid="com.azure.messaging.servicebus.ServiceBusReceivedMessage" data-throw-if-not-resolved="false">messages</xref> from the Service Bus entity.
  syntax:
    content: public IterableStream<ServiceBusReceivedMessageContext> receive(int maxMessages, Duration maxWaitTime)
    parameters:
    - id: maxMessages
      type: int
      description: The maximum number of messages to receive.
    - id: maxWaitTime
      type: java.time.Duration
      description: The time the client waits for receiving a message before it times out.
    return:
      type: com.azure.core.util.IterableStream<com.azure.messaging.servicebus.ServiceBusReceivedMessageContext>
      description: An <xref uid="com.azure.core.util.IterableStream" data-throw-if-not-resolved="false">IterableStream</xref> of at most <code>maxMessages</code> messages from the Service Bus entity.
- uid: com.azure.messaging.servicebus.ServiceBusReceiverClient.receiveDeferredMessage(long)
  id: receiveDeferredMessage(long)
  artifact: com.azure:azure-messaging-servicebus:7.0.0-beta.2
  parent: com.azure.messaging.servicebus.ServiceBusReceiverClient
  langs:
  - java
  name: receiveDeferredMessage(long sequenceNumber)
  nameWithType: ServiceBusReceiverClient.receiveDeferredMessage(long sequenceNumber)
  fullName: com.azure.messaging.servicebus.ServiceBusReceiverClient.receiveDeferredMessage(long sequenceNumber)
  overload: com.azure.messaging.servicebus.ServiceBusReceiverClient.receiveDeferredMessage*
  type: Method
  package: com.azure.messaging.servicebus
  summary: Receives a deferred <xref uid="com.azure.messaging.servicebus.ServiceBusReceivedMessage" data-throw-if-not-resolved="false">message</xref>. Deferred messages can only be received by using sequence number.
  syntax:
    content: public ServiceBusReceivedMessage receiveDeferredMessage(long sequenceNumber)
    parameters:
    - id: sequenceNumber
      type: long
      description: >-
        The <xref uid="com.azure.messaging.servicebus.ServiceBusReceivedMessage.getSequenceNumber()" data-throw-if-not-resolved="false">sequence number</xref> of the
             message.
    return:
      type: com.azure.messaging.servicebus.ServiceBusReceivedMessage
      description: A deferred message with the matching <code>sequenceNumber</code>.
- uid: com.azure.messaging.servicebus.ServiceBusReceiverClient.receiveDeferredMessage(long,java.lang.String)
  id: receiveDeferredMessage(long,java.lang.String)
  artifact: com.azure:azure-messaging-servicebus:7.0.0-beta.2
  parent: com.azure.messaging.servicebus.ServiceBusReceiverClient
  langs:
  - java
  name: receiveDeferredMessage(long sequenceNumber, String sessionId)
  nameWithType: ServiceBusReceiverClient.receiveDeferredMessage(long sequenceNumber, String sessionId)
  fullName: com.azure.messaging.servicebus.ServiceBusReceiverClient.receiveDeferredMessage(long sequenceNumber, String sessionId)
  overload: com.azure.messaging.servicebus.ServiceBusReceiverClient.receiveDeferredMessage*
  type: Method
  package: com.azure.messaging.servicebus
  summary: Receives a deferred <xref uid="com.azure.messaging.servicebus.ServiceBusReceivedMessage" data-throw-if-not-resolved="false">message</xref>. Deferred messages can only be received by using sequence number.
  syntax:
    content: public ServiceBusReceivedMessage receiveDeferredMessage(long sequenceNumber, String sessionId)
    parameters:
    - id: sequenceNumber
      type: long
      description: >-
        The <xref uid="com.azure.messaging.servicebus.ServiceBusReceivedMessage.getSequenceNumber()" data-throw-if-not-resolved="false">sequence number</xref> of the
             message.
    - id: sessionId
      type: java.lang.String
      description: Session id of the deferred message.
    return:
      type: com.azure.messaging.servicebus.ServiceBusReceivedMessage
      description: A deferred message with the matching <code>sequenceNumber</code>.
- uid: com.azure.messaging.servicebus.ServiceBusReceiverClient.receiveDeferredMessageBatch(java.lang.Iterable<java.lang.Long>)
  id: receiveDeferredMessageBatch(java.lang.Iterable<java.lang.Long>)
  artifact: com.azure:azure-messaging-servicebus:7.0.0-beta.2
  parent: com.azure.messaging.servicebus.ServiceBusReceiverClient
  langs:
  - java
  name: receiveDeferredMessageBatch(Iterable<Long> sequenceNumbers)
  nameWithType: ServiceBusReceiverClient.receiveDeferredMessageBatch(Iterable<Long> sequenceNumbers)
  fullName: com.azure.messaging.servicebus.ServiceBusReceiverClient.receiveDeferredMessageBatch(Iterable<Long> sequenceNumbers)
  overload: com.azure.messaging.servicebus.ServiceBusReceiverClient.receiveDeferredMessageBatch*
  type: Method
  package: com.azure.messaging.servicebus
  summary: Receives a batch of deferred <xref uid="com.azure.messaging.servicebus.ServiceBusReceivedMessage" data-throw-if-not-resolved="false">messages</xref>. Deferred messages can only be received by using sequence number.
  syntax:
    content: public IterableStream<ServiceBusReceivedMessage> receiveDeferredMessageBatch(Iterable<Long> sequenceNumbers)
    parameters:
    - id: sequenceNumbers
      type: java.lang.Iterable<java.lang.Long>
      description: The sequence numbers of the deferred messages.
    return:
      type: com.azure.core.util.IterableStream<com.azure.messaging.servicebus.ServiceBusReceivedMessage>
      description: An <xref uid="com.azure.core.util.IterableStream" data-throw-if-not-resolved="false">IterableStream</xref> of deferred <xref uid="com.azure.messaging.servicebus.ServiceBusReceivedMessage" data-throw-if-not-resolved="false">messages</xref>.
- uid: com.azure.messaging.servicebus.ServiceBusReceiverClient.receiveDeferredMessageBatch(java.lang.Iterable<java.lang.Long>,java.lang.String)
  id: receiveDeferredMessageBatch(java.lang.Iterable<java.lang.Long>,java.lang.String)
  artifact: com.azure:azure-messaging-servicebus:7.0.0-beta.2
  parent: com.azure.messaging.servicebus.ServiceBusReceiverClient
  langs:
  - java
  name: receiveDeferredMessageBatch(Iterable<Long> sequenceNumbers, String sessionId)
  nameWithType: ServiceBusReceiverClient.receiveDeferredMessageBatch(Iterable<Long> sequenceNumbers, String sessionId)
  fullName: com.azure.messaging.servicebus.ServiceBusReceiverClient.receiveDeferredMessageBatch(Iterable<Long> sequenceNumbers, String sessionId)
  overload: com.azure.messaging.servicebus.ServiceBusReceiverClient.receiveDeferredMessageBatch*
  type: Method
  package: com.azure.messaging.servicebus
  summary: Receives a batch of deferred <xref uid="com.azure.messaging.servicebus.ServiceBusReceivedMessage" data-throw-if-not-resolved="false">messages</xref>. Deferred messages can only be received by using sequence number.
  syntax:
    content: public IterableStream<ServiceBusReceivedMessage> receiveDeferredMessageBatch(Iterable<Long> sequenceNumbers, String sessionId)
    parameters:
    - id: sequenceNumbers
      type: java.lang.Iterable<java.lang.Long>
      description: The sequence numbers of the deferred messages.
    - id: sessionId
      type: java.lang.String
      description: Session id of the deferred messages. <code>null</code> if there is no session.
    return:
      type: com.azure.core.util.IterableStream<com.azure.messaging.servicebus.ServiceBusReceivedMessage>
      description: An <xref uid="com.azure.core.util.IterableStream" data-throw-if-not-resolved="false">IterableStream</xref> of deferred <xref uid="com.azure.messaging.servicebus.ServiceBusReceivedMessage" data-throw-if-not-resolved="false">messages</xref>.
- uid: com.azure.messaging.servicebus.ServiceBusReceiverClient.renewMessageLock(com.azure.messaging.servicebus.MessageLockToken)
  id: renewMessageLock(com.azure.messaging.servicebus.MessageLockToken)
  artifact: com.azure:azure-messaging-servicebus:7.0.0-beta.2
  parent: com.azure.messaging.servicebus.ServiceBusReceiverClient
  langs:
  - java
  name: renewMessageLock(MessageLockToken lockToken)
  nameWithType: ServiceBusReceiverClient.renewMessageLock(MessageLockToken lockToken)
  fullName: com.azure.messaging.servicebus.ServiceBusReceiverClient.renewMessageLock(MessageLockToken lockToken)
  overload: com.azure.messaging.servicebus.ServiceBusReceiverClient.renewMessageLock*
  type: Method
  package: com.azure.messaging.servicebus
  summary: Renews the lock on the specified message. The lock will be renewed based on the setting specified on the entity. When a message is received in <xref uid="com.azure.messaging.servicebus.models.ReceiveMode.PEEK_LOCK" data-throw-if-not-resolved="false">ReceiveMode#PEEK_LOCK</xref> mode, the message is locked on the server for this receiver instance for a duration as specified during the Queue creation (LockDuration). If processing of the message requires longer than this duration, the lock needs to be renewed. For each renewal, the lock is reset to the entity's LockDuration value.
  syntax:
    content: public Instant renewMessageLock(MessageLockToken lockToken)
    parameters:
    - id: lockToken
      type: com.azure.messaging.servicebus.MessageLockToken
      description: Lock token of the message to renew.
    return:
      type: java.time.Instant
      description: The new expiration time for the message.
- uid: com.azure.messaging.servicebus.ServiceBusReceiverClient.renewSessionLock(java.lang.String)
  id: renewSessionLock(java.lang.String)
  artifact: com.azure:azure-messaging-servicebus:7.0.0-beta.2
  parent: com.azure.messaging.servicebus.ServiceBusReceiverClient
  langs:
  - java
  name: renewSessionLock(String sessionId)
  nameWithType: ServiceBusReceiverClient.renewSessionLock(String sessionId)
  fullName: com.azure.messaging.servicebus.ServiceBusReceiverClient.renewSessionLock(String sessionId)
  overload: com.azure.messaging.servicebus.ServiceBusReceiverClient.renewSessionLock*
  type: Method
  package: com.azure.messaging.servicebus
  summary: Sets the state of a session given its identifier.
  syntax:
    content: public Instant renewSessionLock(String sessionId)
    parameters:
    - id: sessionId
      type: java.lang.String
      description: Identifier of session to get.
    return:
      type: java.time.Instant
      description: The next expiration time for the session lock.
- uid: com.azure.messaging.servicebus.ServiceBusReceiverClient.setSessionState(java.lang.String,byte[])
  id: setSessionState(java.lang.String,byte[])
  artifact: com.azure:azure-messaging-servicebus:7.0.0-beta.2
  parent: com.azure.messaging.servicebus.ServiceBusReceiverClient
  langs:
  - java
  name: setSessionState(String sessionId, byte[] sessionState)
  nameWithType: ServiceBusReceiverClient.setSessionState(String sessionId, byte[] sessionState)
  fullName: com.azure.messaging.servicebus.ServiceBusReceiverClient.setSessionState(String sessionId, byte[] sessionState)
  overload: com.azure.messaging.servicebus.ServiceBusReceiverClient.setSessionState*
  type: Method
  package: com.azure.messaging.servicebus
  summary: Sets the state of a session given its identifier.
  syntax:
    content: public void setSessionState(String sessionId, byte[] sessionState)
    parameters:
    - id: sessionId
      type: java.lang.String
      description: Identifier of session to get.
    - id: sessionState
      type: byte[]
      description: State to set on the session.
references:
- uid: com.azure.messaging.servicebus.ServiceBusReceiverAsyncClient
  name: ServiceBusReceiverAsyncClient
  nameWithType: ServiceBusReceiverAsyncClient
  fullName: com.azure.messaging.servicebus.ServiceBusReceiverAsyncClient
- uid: java.time.Duration
  spec.java:
  - uid: java.time.Duration
    name: Duration
    fullName: java.time.Duration
- uid: com.azure.messaging.servicebus.ServiceBusReceiverClient.ServiceBusReceiverClient*
  name: ServiceBusReceiverClient
  nameWithType: ServiceBusReceiverClient.ServiceBusReceiverClient
  fullName: com.azure.messaging.servicebus.ServiceBusReceiverClient.ServiceBusReceiverClient
  package: com.azure.messaging.servicebus
- uid: java.lang.String
  spec.java:
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
- uid: com.azure.messaging.servicebus.ServiceBusReceiverClient.getFullyQualifiedNamespace*
  name: getFullyQualifiedNamespace
  nameWithType: ServiceBusReceiverClient.getFullyQualifiedNamespace
  fullName: com.azure.messaging.servicebus.ServiceBusReceiverClient.getFullyQualifiedNamespace
  package: com.azure.messaging.servicebus
- uid: com.azure.messaging.servicebus.ServiceBusReceiverClient.getEntityPath*
  name: getEntityPath
  nameWithType: ServiceBusReceiverClient.getEntityPath
  fullName: com.azure.messaging.servicebus.ServiceBusReceiverClient.getEntityPath
  package: com.azure.messaging.servicebus
- uid: com.azure.messaging.servicebus.MessageLockToken
  name: MessageLockToken
  nameWithType: MessageLockToken
  fullName: com.azure.messaging.servicebus.MessageLockToken
- uid: com.azure.messaging.servicebus.ServiceBusReceiverClient.abandon*
  name: abandon
  nameWithType: ServiceBusReceiverClient.abandon
  fullName: com.azure.messaging.servicebus.ServiceBusReceiverClient.abandon
  package: com.azure.messaging.servicebus
- uid: java.util.Map<java.lang.String,java.lang.Object>
  spec.java:
  - uid: java.util.Map
    name: Map
    fullName: java.util.Map
  - name: <
    fullName: <
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
  - name: ','
    fullName: ','
  - uid: java.lang.Object
    name: Object
    fullName: java.lang.Object
  - name: '>'
    fullName: '>'
- uid: com.azure.messaging.servicebus.ServiceBusReceiverClient.complete*
  name: complete
  nameWithType: ServiceBusReceiverClient.complete
  fullName: com.azure.messaging.servicebus.ServiceBusReceiverClient.complete
  package: com.azure.messaging.servicebus
- uid: com.azure.messaging.servicebus.ServiceBusReceiverClient.defer*
  name: defer
  nameWithType: ServiceBusReceiverClient.defer
  fullName: com.azure.messaging.servicebus.ServiceBusReceiverClient.defer
  package: com.azure.messaging.servicebus
- uid: com.azure.messaging.servicebus.ServiceBusReceiverClient.deadLetter*
  name: deadLetter
  nameWithType: ServiceBusReceiverClient.deadLetter
  fullName: com.azure.messaging.servicebus.ServiceBusReceiverClient.deadLetter
  package: com.azure.messaging.servicebus
- uid: com.azure.messaging.servicebus.models.DeadLetterOptions
  name: DeadLetterOptions
  nameWithType: DeadLetterOptions
  fullName: com.azure.messaging.servicebus.models.DeadLetterOptions
- uid: byte[]
  spec.java:
  - uid: byte
    name: byte
    fullName: byte
  - name: '[]'
    fullName: '[]'
- uid: com.azure.messaging.servicebus.ServiceBusReceiverClient.getSessionState*
  name: getSessionState
  nameWithType: ServiceBusReceiverClient.getSessionState
  fullName: com.azure.messaging.servicebus.ServiceBusReceiverClient.getSessionState
  package: com.azure.messaging.servicebus
- uid: com.azure.messaging.servicebus.ServiceBusReceivedMessage
  name: ServiceBusReceivedMessage
  nameWithType: ServiceBusReceivedMessage
  fullName: com.azure.messaging.servicebus.ServiceBusReceivedMessage
- uid: com.azure.messaging.servicebus.ServiceBusReceiverClient.peek*
  name: peek
  nameWithType: ServiceBusReceiverClient.peek
  fullName: com.azure.messaging.servicebus.ServiceBusReceiverClient.peek
  package: com.azure.messaging.servicebus
- uid: long
  spec.java:
  - uid: long
    name: long
    fullName: long
- uid: com.azure.messaging.servicebus.ServiceBusReceiverClient.peekAt*
  name: peekAt
  nameWithType: ServiceBusReceiverClient.peekAt
  fullName: com.azure.messaging.servicebus.ServiceBusReceiverClient.peekAt
  package: com.azure.messaging.servicebus
- uid: int
  spec.java:
  - uid: int
    name: int
    fullName: int
- uid: com.azure.core.util.IterableStream<com.azure.messaging.servicebus.ServiceBusReceivedMessage>
  spec.java:
  - uid: com.azure.core.util.IterableStream
    name: IterableStream
    fullName: com.azure.core.util.IterableStream
  - name: <
    fullName: <
  - uid: com.azure.messaging.servicebus.ServiceBusReceivedMessage
    name: ServiceBusReceivedMessage
    fullName: com.azure.messaging.servicebus.ServiceBusReceivedMessage
  - name: '>'
    fullName: '>'
- uid: com.azure.messaging.servicebus.ServiceBusReceiverClient.peekBatch*
  name: peekBatch
  nameWithType: ServiceBusReceiverClient.peekBatch
  fullName: com.azure.messaging.servicebus.ServiceBusReceiverClient.peekBatch
  package: com.azure.messaging.servicebus
- uid: com.azure.messaging.servicebus.ServiceBusReceiverClient.peekBatchAt*
  name: peekBatchAt
  nameWithType: ServiceBusReceiverClient.peekBatchAt
  fullName: com.azure.messaging.servicebus.ServiceBusReceiverClient.peekBatchAt
  package: com.azure.messaging.servicebus
- uid: com.azure.core.util.IterableStream<com.azure.messaging.servicebus.ServiceBusReceivedMessageContext>
  spec.java:
  - uid: com.azure.core.util.IterableStream
    name: IterableStream
    fullName: com.azure.core.util.IterableStream
  - name: <
    fullName: <
  - uid: com.azure.messaging.servicebus.ServiceBusReceivedMessageContext
    name: ServiceBusReceivedMessageContext
    fullName: com.azure.messaging.servicebus.ServiceBusReceivedMessageContext
  - name: '>'
    fullName: '>'
- uid: com.azure.messaging.servicebus.ServiceBusReceiverClient.receive*
  name: receive
  nameWithType: ServiceBusReceiverClient.receive
  fullName: com.azure.messaging.servicebus.ServiceBusReceiverClient.receive
  package: com.azure.messaging.servicebus
- uid: com.azure.messaging.servicebus.ServiceBusReceiverClient.receiveDeferredMessage*
  name: receiveDeferredMessage
  nameWithType: ServiceBusReceiverClient.receiveDeferredMessage
  fullName: com.azure.messaging.servicebus.ServiceBusReceiverClient.receiveDeferredMessage
  package: com.azure.messaging.servicebus
- uid: java.lang.Iterable<java.lang.Long>
  spec.java:
  - uid: java.lang.Iterable
    name: Iterable
    fullName: java.lang.Iterable
  - name: <
    fullName: <
  - uid: java.lang.Long
    name: Long
    fullName: java.lang.Long
  - name: '>'
    fullName: '>'
- uid: com.azure.messaging.servicebus.ServiceBusReceiverClient.receiveDeferredMessageBatch*
  name: receiveDeferredMessageBatch
  nameWithType: ServiceBusReceiverClient.receiveDeferredMessageBatch
  fullName: com.azure.messaging.servicebus.ServiceBusReceiverClient.receiveDeferredMessageBatch
  package: com.azure.messaging.servicebus
- uid: java.time.Instant
  spec.java:
  - uid: java.time.Instant
    name: Instant
    fullName: java.time.Instant
- uid: com.azure.messaging.servicebus.ServiceBusReceiverClient.renewMessageLock*
  name: renewMessageLock
  nameWithType: ServiceBusReceiverClient.renewMessageLock
  fullName: com.azure.messaging.servicebus.ServiceBusReceiverClient.renewMessageLock
  package: com.azure.messaging.servicebus
- uid: com.azure.messaging.servicebus.ServiceBusReceiverClient.renewSessionLock*
  name: renewSessionLock
  nameWithType: ServiceBusReceiverClient.renewSessionLock
  fullName: com.azure.messaging.servicebus.ServiceBusReceiverClient.renewSessionLock
  package: com.azure.messaging.servicebus
- uid: com.azure.messaging.servicebus.ServiceBusReceiverClient.setSessionState*
  name: setSessionState
  nameWithType: ServiceBusReceiverClient.setSessionState
  fullName: com.azure.messaging.servicebus.ServiceBusReceiverClient.setSessionState
  package: com.azure.messaging.servicebus
- uid: com.azure.messaging.servicebus.ServiceBusReceiverClient.close*
  name: close
  nameWithType: ServiceBusReceiverClient.close
  fullName: com.azure.messaging.servicebus.ServiceBusReceiverClient.close
  package: com.azure.messaging.servicebus
- uid: java.lang.AutoCloseable
  name: AutoCloseable
  nameWithType: AutoCloseable
  fullName: java.lang.AutoCloseable
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: java.lang.Object.finalize()
  name: Object.finalize()
  nameWithType: Object.finalize()
  fullName: java.lang.Object.finalize()
- uid: java.lang.Object.clone()
  name: Object.clone()
  nameWithType: Object.clone()
  fullName: java.lang.Object.clone()
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: java.lang.Object.equals(java.lang.Object)
  name: Object.equals(Object)
  nameWithType: Object.equals(Object)
  fullName: java.lang.Object.equals(java.lang.Object)
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.lang.Object.hashCode()
  name: Object.hashCode()
  nameWithType: Object.hashCode()
  fullName: java.lang.Object.hashCode()
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: java.lang.Object.toString()
  name: Object.toString()
  nameWithType: Object.toString()
  fullName: java.lang.Object.toString()
- uid: java.lang.String,java.lang.Object
  name: String,Object
  nameWithType: String,Object
  fullName: java.lang.String,java.lang.Object
- uid: java.util.Map
  name: Map
  nameWithType: Map
  fullName: java.util.Map
- uid: com.azure.core.util.IterableStream
  name: IterableStream
  nameWithType: IterableStream
  fullName: com.azure.core.util.IterableStream
- uid: com.azure.messaging.servicebus.ServiceBusReceivedMessageContext
  name: ServiceBusReceivedMessageContext
  nameWithType: ServiceBusReceivedMessageContext
  fullName: com.azure.messaging.servicebus.ServiceBusReceivedMessageContext
- uid: java.lang.Long
  name: Long
  nameWithType: Long
  fullName: java.lang.Long
- uid: java.lang.Iterable
  name: Iterable
  nameWithType: Iterable
  fullName: java.lang.Iterable
