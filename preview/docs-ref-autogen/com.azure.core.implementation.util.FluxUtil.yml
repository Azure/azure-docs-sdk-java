### YamlMime:ManagedReference
items:
- uid: com.azure.core.implementation.util.FluxUtil
  id: FluxUtil
  parent: com.azure.core.implementation.util
  children:
  - com.azure.core.implementation.util.FluxUtil.byteBufStreamFromFile(AsynchronousFileChannel)
  - com.azure.core.implementation.util.FluxUtil.byteBufStreamFromFile(AsynchronousFileChannel,int,long,long)
  - com.azure.core.implementation.util.FluxUtil.byteBufStreamFromFile(AsynchronousFileChannel,long,long)
  - com.azure.core.implementation.util.FluxUtil.bytebufStreamToFile(Flux<ByteBuf>,AsynchronousFileChannel)
  - com.azure.core.implementation.util.FluxUtil.bytebufStreamToFile(Flux<ByteBuf>,AsynchronousFileChannel,long)
  - com.azure.core.implementation.util.FluxUtil.byteBufToArray(ByteBuf)
  - com.azure.core.implementation.util.FluxUtil.collectByteBufStream(Flux<ByteBuf>,boolean)
  - com.azure.core.implementation.util.FluxUtil.collectBytesInByteBufStream(Flux<ByteBuf>,boolean)
  - com.azure.core.implementation.util.FluxUtil.fluxContext(Function<Context, Flux<T>>)
  - com.azure.core.implementation.util.FluxUtil.isFluxByteBuf(Type)
  - com.azure.core.implementation.util.FluxUtil.split(final ByteBuf,final int)
  - com.azure.core.implementation.util.FluxUtil.withContext(Function<Context, Mono<T>>)
  href: com.azure.core.implementation.util.FluxUtil.yml
  langs:
  - java
  name: FluxUtil
  nameWithType: FluxUtil
  fullName: com.azure.core.implementation.util.FluxUtil
  type: Class
  source:
    remote: &o0
      path: sdk/core/azure-core/src/main/java/com/azure/core/implementation/util/FluxUtil.java
      branch: master
      repo: https://github.com/Azure/azure-sdk-for-java
    path: sdk/core/azure-core/src/main/java/com/azure/core/implementation/util/FluxUtil.java
    startLine: 32
  package: com.azure.core.implementation.util
  summary: "<p>Utility type exposing methods to deal with <xref uid=\"\" data-throw-if-not-resolved=\"false\">Flux</xref>. </p>"
  syntax:
    content: public class FluxUtil
  inheritance:
  - java.lang.Object
- uid: com.azure.core.implementation.util.FluxUtil.byteBufStreamFromFile(AsynchronousFileChannel)
  id: byteBufStreamFromFile(AsynchronousFileChannel)
  parent: com.azure.core.implementation.util.FluxUtil
  href: com.azure.core.implementation.util.FluxUtil.yml
  langs:
  - java
  name: byteBufStreamFromFile(AsynchronousFileChannel fileChannel)
  nameWithType: FluxUtil.byteBufStreamFromFile(AsynchronousFileChannel fileChannel)
  fullName: com.azure.core.implementation.util.FluxUtil.byteBufStreamFromFile(AsynchronousFileChannel fileChannel)
  overload: com.azure.core.implementation.util.FluxUtil.byteBufStreamFromFile*
  type: Method
  source:
    remote: *o0
    path: sdk/core/azure-core/src/main/java/com/azure/core/implementation/util/FluxUtil.java
    startLine: 343
  package: com.azure.core.implementation.util
  summary: "<p>Creates a <xref uid=\"\" data-throw-if-not-resolved=\"false\">Flux</xref> from an <xref uid=\"\" data-throw-if-not-resolved=\"false\">AsynchronousFileChannel</xref> which reads the entire file.</p>\r\n<p></p>"
  syntax:
    content: public static Flux<ByteBuf> byteBufStreamFromFile(AsynchronousFileChannel fileChannel)
    parameters:
    - id: fileChannel
      type: a39e71f7
      description: <p>The file channel. </p>
    return:
      type: c4ee8496
      description: <p>The AsyncInputStream. </p>
- uid: com.azure.core.implementation.util.FluxUtil.byteBufStreamFromFile(AsynchronousFileChannel,int,long,long)
  id: byteBufStreamFromFile(AsynchronousFileChannel,int,long,long)
  parent: com.azure.core.implementation.util.FluxUtil
  href: com.azure.core.implementation.util.FluxUtil.yml
  langs:
  - java
  name: byteBufStreamFromFile(AsynchronousFileChannel fileChannel, int chunkSize, long offset, long length)
  nameWithType: FluxUtil.byteBufStreamFromFile(AsynchronousFileChannel fileChannel, int chunkSize, long offset, long length)
  fullName: com.azure.core.implementation.util.FluxUtil.byteBufStreamFromFile(AsynchronousFileChannel fileChannel, int chunkSize, long offset, long length)
  overload: com.azure.core.implementation.util.FluxUtil.byteBufStreamFromFile*
  type: Method
  source:
    remote: *o0
    path: sdk/core/azure-core/src/main/java/com/azure/core/implementation/util/FluxUtil.java
    startLine: 319
  package: com.azure.core.implementation.util
  summary: "<p>Creates a <xref uid=\"\" data-throw-if-not-resolved=\"false\">Flux</xref> from an <xref uid=\"\" data-throw-if-not-resolved=\"false\">AsynchronousFileChannel</xref> which reads part of a file into chunks of the given size.</p>\r\n<p></p>"
  syntax:
    content: public static Flux<ByteBuf> byteBufStreamFromFile(AsynchronousFileChannel fileChannel, int chunkSize, long offset, long length)
    parameters:
    - id: fileChannel
      type: a39e71f7
      description: <p>The file channel. </p>
    - id: chunkSize
      type: f75371fa
      description: <p>the size of file chunks to read. </p>
    - id: offset
      type: 0364520f
      description: <p>The offset in the file to begin reading. </p>
    - id: length
      type: 0364520f
      description: <p>The number of bytes to read from the file. </p>
    return:
      type: c4ee8496
      description: <p>the Flowable. </p>
- uid: com.azure.core.implementation.util.FluxUtil.byteBufStreamFromFile(AsynchronousFileChannel,long,long)
  id: byteBufStreamFromFile(AsynchronousFileChannel,long,long)
  parent: com.azure.core.implementation.util.FluxUtil
  href: com.azure.core.implementation.util.FluxUtil.yml
  langs:
  - java
  name: byteBufStreamFromFile(AsynchronousFileChannel fileChannel, long offset, long length)
  nameWithType: FluxUtil.byteBufStreamFromFile(AsynchronousFileChannel fileChannel, long offset, long length)
  fullName: com.azure.core.implementation.util.FluxUtil.byteBufStreamFromFile(AsynchronousFileChannel fileChannel, long offset, long length)
  overload: com.azure.core.implementation.util.FluxUtil.byteBufStreamFromFile*
  type: Method
  source:
    remote: *o0
    path: sdk/core/azure-core/src/main/java/com/azure/core/implementation/util/FluxUtil.java
    startLine: 332
  package: com.azure.core.implementation.util
  summary: "<p>Creates a <xref uid=\"\" data-throw-if-not-resolved=\"false\">Flux</xref> from an <xref uid=\"\" data-throw-if-not-resolved=\"false\">AsynchronousFileChannel</xref> which reads part of a file.</p>\r\n<p></p>"
  syntax:
    content: public static Flux<ByteBuf> byteBufStreamFromFile(AsynchronousFileChannel fileChannel, long offset, long length)
    parameters:
    - id: fileChannel
      type: a39e71f7
      description: <p>The file channel. </p>
    - id: offset
      type: 0364520f
      description: <p>The offset in the file to begin reading. </p>
    - id: length
      type: 0364520f
      description: <p>The number of bytes to read from the file. </p>
    return:
      type: c4ee8496
      description: <p>the Flowable. </p>
- uid: com.azure.core.implementation.util.FluxUtil.bytebufStreamToFile(Flux<ByteBuf>,AsynchronousFileChannel)
  id: bytebufStreamToFile(Flux<ByteBuf>,AsynchronousFileChannel)
  parent: com.azure.core.implementation.util.FluxUtil
  href: com.azure.core.implementation.util.FluxUtil.yml
  langs:
  - java
  name: bytebufStreamToFile(Flux<ByteBuf> content, AsynchronousFileChannel outFile)
  nameWithType: FluxUtil.bytebufStreamToFile(Flux<ByteBuf> content, AsynchronousFileChannel outFile)
  fullName: com.azure.core.implementation.util.FluxUtil.bytebufStreamToFile(Flux<ByteBuf> content, AsynchronousFileChannel outFile)
  overload: com.azure.core.implementation.util.FluxUtil.bytebufStreamToFile*
  type: Method
  source:
    remote: *o0
    path: sdk/core/azure-core/src/main/java/com/azure/core/implementation/util/FluxUtil.java
    startLine: 163
  package: com.azure.core.implementation.util
  summary: "<p>Writes the bytes emitted by a Flux to an AsynchronousFileChannel.</p>\r\n<p></p>"
  syntax:
    content: public static Mono<Void> bytebufStreamToFile(Flux<ByteBuf> content, AsynchronousFileChannel outFile)
    parameters:
    - id: content
      type: c4ee8496
      description: <p>the Flux content </p>
    - id: outFile
      type: a39e71f7
      description: <p>the file channel </p>
    return:
      type: d4009ed4
      description: <p>a Completable which performs the write operation when subscribed </p>
- uid: com.azure.core.implementation.util.FluxUtil.bytebufStreamToFile(Flux<ByteBuf>,AsynchronousFileChannel,long)
  id: bytebufStreamToFile(Flux<ByteBuf>,AsynchronousFileChannel,long)
  parent: com.azure.core.implementation.util.FluxUtil
  href: com.azure.core.implementation.util.FluxUtil.yml
  langs:
  - java
  name: bytebufStreamToFile(Flux<ByteBuf> content, AsynchronousFileChannel outFile, long position)
  nameWithType: FluxUtil.bytebufStreamToFile(Flux<ByteBuf> content, AsynchronousFileChannel outFile, long position)
  fullName: com.azure.core.implementation.util.FluxUtil.bytebufStreamToFile(Flux<ByteBuf> content, AsynchronousFileChannel outFile, long position)
  overload: com.azure.core.implementation.util.FluxUtil.bytebufStreamToFile*
  type: Method
  source:
    remote: *o0
    path: sdk/core/azure-core/src/main/java/com/azure/core/implementation/util/FluxUtil.java
    startLine: 176
  package: com.azure.core.implementation.util
  summary: "<p>Writes the bytes emitted by a Flux to an AsynchronousFileChannel starting at the given position in the file.</p>\r\n<p></p>"
  syntax:
    content: public static Mono<Void> bytebufStreamToFile(Flux<ByteBuf> content, AsynchronousFileChannel outFile, long position)
    parameters:
    - id: content
      type: c4ee8496
      description: <p>the Flux content </p>
    - id: outFile
      type: a39e71f7
      description: <p>the file channel </p>
    - id: position
      type: 0364520f
      description: <p>the position in the file to begin writing </p>
    return:
      type: d4009ed4
      description: <p>a Mono&lt;Void&gt; which performs the write operation when subscribed </p>
- uid: com.azure.core.implementation.util.FluxUtil.byteBufToArray(ByteBuf)
  id: byteBufToArray(ByteBuf)
  parent: com.azure.core.implementation.util.FluxUtil
  href: com.azure.core.implementation.util.FluxUtil.yml
  langs:
  - java
  name: byteBufToArray(ByteBuf byteBuf)
  nameWithType: FluxUtil.byteBufToArray(ByteBuf byteBuf)
  fullName: com.azure.core.implementation.util.FluxUtil.byteBufToArray(ByteBuf byteBuf)
  overload: com.azure.core.implementation.util.FluxUtil.byteBufToArray*
  type: Method
  source:
    remote: *o0
    path: sdk/core/azure-core/src/main/java/com/azure/core/implementation/util/FluxUtil.java
    startLine: 110
  package: com.azure.core.implementation.util
  summary: "<p>Gets the content of the provided ByteBuf as a byte array. This method will create a new byte array even if the ByteBuf can have optionally backing array.</p>\r\n<p></p>"
  syntax:
    content: public static byte [] byteBufToArray(ByteBuf byteBuf)
    parameters:
    - id: byteBuf
      type: 3e1beca6
      description: <p>the byte buffer </p>
    return:
      type: ccd9418d
      description: <p>the byte array </p>
- uid: com.azure.core.implementation.util.FluxUtil.collectByteBufStream(Flux<ByteBuf>,boolean)
  id: collectByteBufStream(Flux<ByteBuf>,boolean)
  parent: com.azure.core.implementation.util.FluxUtil
  href: com.azure.core.implementation.util.FluxUtil.yml
  langs:
  - java
  name: collectByteBufStream(Flux<ByteBuf> stream, boolean autoReleaseEnabled)
  nameWithType: FluxUtil.collectByteBufStream(Flux<ByteBuf> stream, boolean autoReleaseEnabled)
  fullName: com.azure.core.implementation.util.FluxUtil.collectByteBufStream(Flux<ByteBuf> stream, boolean autoReleaseEnabled)
  overload: com.azure.core.implementation.util.FluxUtil.collectByteBufStream*
  type: Method
  source:
    remote: *o0
    path: sdk/core/azure-core/src/main/java/com/azure/core/implementation/util/FluxUtil.java
    startLine: 124
  package: com.azure.core.implementation.util
  summary: "<p>Collects byte buffers emitted by a Flux into a ByteBuf.</p>\r\n<p></p>"
  syntax:
    content: public static Mono<ByteBuf> collectByteBufStream(Flux<ByteBuf> stream, boolean autoReleaseEnabled)
    parameters:
    - id: stream
      type: c4ee8496
      description: <p>A stream which emits ByteBuf instances. </p>
    - id: autoReleaseEnabled
      type: 4fc6e284
      description: <p>if ByteBuf instances in stream gets automatically released as they consumed </p>
    return:
      type: fc98a8ca
      description: <p>A Mono which emits the concatenation of all the byte buffers given by the source Flux. </p>
- uid: com.azure.core.implementation.util.FluxUtil.collectBytesInByteBufStream(Flux<ByteBuf>,boolean)
  id: collectBytesInByteBufStream(Flux<ByteBuf>,boolean)
  parent: com.azure.core.implementation.util.FluxUtil
  href: com.azure.core.implementation.util.FluxUtil.yml
  langs:
  - java
  name: collectBytesInByteBufStream(Flux<ByteBuf> stream, boolean autoReleaseEnabled)
  nameWithType: FluxUtil.collectBytesInByteBufStream(Flux<ByteBuf> stream, boolean autoReleaseEnabled)
  fullName: com.azure.core.implementation.util.FluxUtil.collectBytesInByteBufStream(Flux<ByteBuf> stream, boolean autoReleaseEnabled)
  overload: com.azure.core.implementation.util.FluxUtil.collectBytesInByteBufStream*
  type: Method
  source:
    remote: *o0
    path: sdk/core/azure-core/src/main/java/com/azure/core/implementation/util/FluxUtil.java
    startLine: 55
  package: com.azure.core.implementation.util
  summary: "<p>Collects ByteBuf emitted by a Flux into a byte array. </p>"
  syntax:
    content: public static Mono<byte[]> collectBytesInByteBufStream(Flux<ByteBuf> stream, boolean autoReleaseEnabled)
    parameters:
    - id: stream
      type: c4ee8496
      description: <p>A stream which emits ByteBuf instances. </p>
    - id: autoReleaseEnabled
      type: 4fc6e284
      description: <p>if ByteBuf instances in stream gets automatically released as they consumed </p>
    return:
      type: cfd85ef3
      description: <p>A Mono which emits the concatenation of all the ByteBuf instances given by the source Flux. </p>
- uid: com.azure.core.implementation.util.FluxUtil.fluxContext(Function<Context, Flux<T>>)
  id: fluxContext(Function<Context, Flux<T>>)
  parent: com.azure.core.implementation.util.FluxUtil
  href: com.azure.core.implementation.util.FluxUtil.yml
  langs:
  - java
  name: fluxContext(Function<Context, Flux<T>> serviceCall)
  nameWithType: FluxUtil.fluxContext(Function<Context, Flux<T>> serviceCall)
  fullName: com.azure.core.implementation.util.FluxUtil.fluxContext(Function<Context, Flux<T>> serviceCall)
  overload: com.azure.core.implementation.util.FluxUtil.fluxContext*
  type: Method
  source:
    remote: *o0
    path: sdk/core/azure-core/src/main/java/com/azure/core/implementation/util/FluxUtil.java
    startLine: 216
  package: com.azure.core.implementation.util
  summary: "<p>This method converts the incoming<code>subscriberContext \r\n    </code> from <xref uid=\"\" data-throw-if-not-resolved=\"false\">Reactor Context</xref> to <xref uid=\"\" data-throw-if-not-resolved=\"false\">Azure Context</xref> and calls the given lambda function with this context and returns a collection of type<code>T \r\n    </code></p>\r\n<p>If the reactor context is empty, <xref uid=\"com.azure.core.util.Context.NONE\" data-throw-if-not-resolved=\"false\">Context#NONE</xref> will be used to call the lambda function </p>\r\n<p>\r\n  <b>Code samples</b>\r\n</p>\r\n<p>{ com.azure.core.implementation.util.fluxutil.fluxcontext}</p>\r\n<p></p>"
  syntax:
    content: public static static<T> Flux<T> fluxContext(Function<Context, Flux<T>> serviceCall)
    parameters:
    - id: serviceCall
      type: 432ffe41com.azure.core.util.Contextcadb0b75
      description: <p>The lambda function that makes the service call into which the context will be passed </p>
    return:
      type: d3ab0b18
      description: <p>The response from service call </p>
- uid: com.azure.core.implementation.util.FluxUtil.isFluxByteBuf(Type)
  id: isFluxByteBuf(Type)
  parent: com.azure.core.implementation.util.FluxUtil
  href: com.azure.core.implementation.util.FluxUtil.yml
  langs:
  - java
  name: isFluxByteBuf(Type entityType)
  nameWithType: FluxUtil.isFluxByteBuf(Type entityType)
  fullName: com.azure.core.implementation.util.FluxUtil.isFluxByteBuf(Type entityType)
  overload: com.azure.core.implementation.util.FluxUtil.isFluxByteBuf*
  type: Method
  source:
    remote: *o0
    path: sdk/core/azure-core/src/main/java/com/azure/core/implementation/util/FluxUtil.java
    startLine: 39
  package: com.azure.core.implementation.util
  summary: "<p>Checks if a type is Flux&lt;ByteBuf&gt;.</p>\r\n<p></p>"
  syntax:
    content: public static boolean isFluxByteBuf(Type entityType)
    parameters:
    - id: entityType
      type: 7727faa1
      description: <p>the type to check </p>
    return:
      type: 4fc6e284
      description: <p>whether the type represents a Flux that emits ByteBuf </p>
- uid: com.azure.core.implementation.util.FluxUtil.split(final ByteBuf,final int)
  id: split(final ByteBuf,final int)
  parent: com.azure.core.implementation.util.FluxUtil
  href: com.azure.core.implementation.util.FluxUtil.yml
  langs:
  - java
  name: split(final ByteBuf whole, final int chunkSize)
  nameWithType: FluxUtil.split(final ByteBuf whole, final int chunkSize)
  fullName: com.azure.core.implementation.util.FluxUtil.split(final ByteBuf whole, final int chunkSize)
  overload: com.azure.core.implementation.util.FluxUtil.split*
  type: Method
  source:
    remote: *o0
    path: sdk/core/azure-core/src/main/java/com/azure/core/implementation/util/FluxUtil.java
    startLine: 80
  package: com.azure.core.implementation.util
  summary: "<p>Splits a ByteBuf into ByteBuf chunks.</p>\r\n<p></p>"
  syntax:
    content: public static Flux<ByteBuf> split(final ByteBuf whole, final int chunkSize)
    parameters:
    - id: whole
      type: "48328786"
      description: <p>the ByteBuf to split </p>
    - id: chunkSize
      type: cd225469
      description: <p>the maximum size of each ByteBuf chunk </p>
    return:
      type: c4ee8496
      description: <p>A stream that emits chunks of the original whole ByteBuf </p>
- uid: com.azure.core.implementation.util.FluxUtil.withContext(Function<Context, Mono<T>>)
  id: withContext(Function<Context, Mono<T>>)
  parent: com.azure.core.implementation.util.FluxUtil
  href: com.azure.core.implementation.util.FluxUtil.yml
  langs:
  - java
  name: withContext(Function<Context, Mono<T>> serviceCall)
  nameWithType: FluxUtil.withContext(Function<Context, Mono<T>> serviceCall)
  fullName: com.azure.core.implementation.util.FluxUtil.withContext(Function<Context, Mono<T>> serviceCall)
  overload: com.azure.core.implementation.util.FluxUtil.withContext*
  type: Method
  source:
    remote: *o0
    path: sdk/core/azure-core/src/main/java/com/azure/core/implementation/util/FluxUtil.java
    startLine: 195
  package: com.azure.core.implementation.util
  summary: "<p>This method converts the incoming<code>subscriberContext \r\n    </code> from <xref uid=\"\" data-throw-if-not-resolved=\"false\">Reactor Context</xref> to <xref uid=\"\" data-throw-if-not-resolved=\"false\">Azure Context</xref> and calls the given lambda function with this context and returns a single entity of type<code>T \r\n    </code></p>\r\n<p>If the reactor context is empty, <xref uid=\"com.azure.core.util.Context.NONE\" data-throw-if-not-resolved=\"false\">Context#NONE</xref> will be used to call the lambda function </p>\r\n<p>\r\n  <b>Code samples</b>\r\n</p>\r\n<p>{ com.azure.core.implementation.util.fluxutil.withcontext}</p>\r\n<p></p>"
  syntax:
    content: public static static<T> Mono<T> withContext(Function<Context, Mono<T>> serviceCall)
    parameters:
    - id: serviceCall
      type: 432ffe41com.azure.core.util.Context2d0f2fb4
      description: <p>The lambda function that makes the service call into which azure context will be passed </p>
    return:
      type: fc279d3a
      description: <p>The response from service call </p>
references:
- uid: 7727faa1
  spec.java:
  - name: Type
    fullName: Type
- uid: 4fc6e284
  spec.java:
  - name: boolean
    fullName: boolean
- uid: com.azure.core.implementation.util.FluxUtil.isFluxByteBuf*
  name: isFluxByteBuf
  nameWithType: FluxUtil.isFluxByteBuf
  fullName: com.azure.core.implementation.util.FluxUtil.isFluxByteBuf
  package: com.azure.core.implementation.util
- uid: c4ee8496
  spec.java:
  - name: Flux<ByteBuf>
    fullName: Flux<ByteBuf>
- uid: cfd85ef3
  spec.java:
  - name: Mono<byte[]>
    fullName: Mono<byte[]>
- uid: com.azure.core.implementation.util.FluxUtil.collectBytesInByteBufStream*
  name: collectBytesInByteBufStream
  nameWithType: FluxUtil.collectBytesInByteBufStream
  fullName: com.azure.core.implementation.util.FluxUtil.collectBytesInByteBufStream
  package: com.azure.core.implementation.util
- uid: "48328786"
  spec.java:
  - name: final ByteBuf
    fullName: final ByteBuf
- uid: cd225469
  spec.java:
  - name: final int
    fullName: final int
- uid: com.azure.core.implementation.util.FluxUtil.split*
  name: split
  nameWithType: FluxUtil.split
  fullName: com.azure.core.implementation.util.FluxUtil.split
  package: com.azure.core.implementation.util
- uid: 3e1beca6
  spec.java:
  - name: ByteBuf
    fullName: ByteBuf
- uid: ccd9418d
  spec.java:
  - name: byte []
    fullName: byte []
- uid: com.azure.core.implementation.util.FluxUtil.byteBufToArray*
  name: byteBufToArray
  nameWithType: FluxUtil.byteBufToArray
  fullName: com.azure.core.implementation.util.FluxUtil.byteBufToArray
  package: com.azure.core.implementation.util
- uid: fc98a8ca
  spec.java:
  - name: Mono<ByteBuf>
    fullName: Mono<ByteBuf>
- uid: com.azure.core.implementation.util.FluxUtil.collectByteBufStream*
  name: collectByteBufStream
  nameWithType: FluxUtil.collectByteBufStream
  fullName: com.azure.core.implementation.util.FluxUtil.collectByteBufStream
  package: com.azure.core.implementation.util
- uid: a39e71f7
  spec.java:
  - name: AsynchronousFileChannel
    fullName: AsynchronousFileChannel
- uid: d4009ed4
  spec.java:
  - name: Mono<Void>
    fullName: Mono<Void>
- uid: com.azure.core.implementation.util.FluxUtil.bytebufStreamToFile*
  name: bytebufStreamToFile
  nameWithType: FluxUtil.bytebufStreamToFile
  fullName: com.azure.core.implementation.util.FluxUtil.bytebufStreamToFile
  package: com.azure.core.implementation.util
- uid: 0364520f
  spec.java:
  - name: long
    fullName: long
- uid: 432ffe41com.azure.core.util.Context2d0f2fb4
  spec.java:
  - name: Function<
    fullName: Function<
  - uid: com.azure.core.util.Context
    name: Context
    fullName: com.azure.core.util.Context
    href: com.azure.core.util.Context.yml
  - name: ', Mono<T>>'
    fullName: ', Mono<T>>'
- uid: fc279d3a
  spec.java:
  - name: static<T> Mono<T>
    fullName: static<T> Mono<T>
- uid: com.azure.core.implementation.util.FluxUtil.withContext*
  name: withContext
  nameWithType: FluxUtil.withContext
  fullName: com.azure.core.implementation.util.FluxUtil.withContext
  package: com.azure.core.implementation.util
- uid: 432ffe41com.azure.core.util.Contextcadb0b75
  spec.java:
  - name: Function<
    fullName: Function<
  - uid: com.azure.core.util.Context
    name: Context
    fullName: com.azure.core.util.Context
    href: com.azure.core.util.Context.yml
  - name: ', Flux<T>>'
    fullName: ', Flux<T>>'
- uid: d3ab0b18
  spec.java:
  - name: static<T> Flux<T>
    fullName: static<T> Flux<T>
- uid: com.azure.core.implementation.util.FluxUtil.fluxContext*
  name: fluxContext
  nameWithType: FluxUtil.fluxContext
  fullName: com.azure.core.implementation.util.FluxUtil.fluxContext
  package: com.azure.core.implementation.util
- uid: f75371fa
  spec.java:
  - name: int
    fullName: int
- uid: com.azure.core.implementation.util.FluxUtil.byteBufStreamFromFile*
  name: byteBufStreamFromFile
  nameWithType: FluxUtil.byteBufStreamFromFile
  fullName: com.azure.core.implementation.util.FluxUtil.byteBufStreamFromFile
  package: com.azure.core.implementation.util
- uid: com.azure.core.util.Context
  parent: com.azure.core.util
  href: com.azure.core.util.Context.yml
  name: Context
  nameWithType: Context
  fullName: com.azure.core.util.Context
  type: Class
  summary: "<p>\r\n  <code>Context \r\n    </code> offers a means of passing arbitrary data (key-value pairs) to pipeline policies. Most applications do not need to pass arbitrary data to the pipeline and can pass<code>Context.NONE \r\n    </code> or <code>null \r\n    </code> . Each context object is immutable. The<code>addData(Object, Object) \r\n    </code> method creates a new <code>Context \r\n    </code> object that refers to its parent, forming a linked list. </p>"
  syntax:
    content: public class Context
- uid: com.azure.core.util.Context.NONE
  parent: com.azure.core.util.Context
  href: com.azure.core.util.Context.yml
  name: NONE
  nameWithType: Context.NONE
  fullName: com.azure.core.util.Context.NONE
  type: Field
  summary: "<p>Signifies that no data need be passed to the pipeline. </p>"
  syntax:
    content: public static final Context NONE= new Context(null, null, null)
    return:
      type: 93de0ef9com.azure.core.util.Context
