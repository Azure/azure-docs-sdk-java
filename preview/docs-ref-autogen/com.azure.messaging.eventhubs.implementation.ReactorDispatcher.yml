### YamlMime:ManagedReference
items:
- uid: com.azure.messaging.eventhubs.implementation.ReactorDispatcher
  id: ReactorDispatcher
  parent: com.azure.messaging.eventhubs.implementation
  children:
  - com.azure.messaging.eventhubs.implementation.ReactorDispatcher.invoke(final Runnable)
  - com.azure.messaging.eventhubs.implementation.ReactorDispatcher.invoke(final Runnable,final Duration)
  href: com.azure.messaging.eventhubs.implementation.ReactorDispatcher.yml
  langs:
  - java
  name: ReactorDispatcher
  nameWithType: ReactorDispatcher
  fullName: com.azure.messaging.eventhubs.implementation.ReactorDispatcher
  type: Class
  source:
    remote: &o0
      path: sdk/eventhubs/azure-eventhubs/src/main/java/com/azure/messaging/eventhubs/implementation/ReactorDispatcher.java
      branch: master
      repo: https://github.com/Azure/azure-sdk-for-java
    path: sdk/eventhubs/azure-eventhubs/src/main/java/com/azure/messaging/eventhubs/implementation/ReactorDispatcher.java
    startLine: 37
  package: com.azure.messaging.eventhubs.implementation
  summary: "<p>\r\n  <xref uid=\"\" data-throw-if-not-resolved=\"false\">Reactor</xref> is not thread-safe - all calls to <xref uid=\"\" data-throw-if-not-resolved=\"false\">Proton</xref> APIs should be on the Reactor Thread. <xref uid=\"\" data-throw-if-not-resolved=\"false\">Reactor</xref> works out-of-box for all event driven API - ex: onReceive - which could raise upon onSocketRead. <xref uid=\"\" data-throw-if-not-resolved=\"false\">Reactor</xref> doesn't support APIs like send() out-of-box - which could potentially run on different thread to that of the Reactor thread.</p>\r\n<p>The following utility class is used to generate an Event to hook into <xref uid=\"\" data-throw-if-not-resolved=\"false\">Reactor</xref>'s event delegation pattern. It uses a <xref uid=\"\" data-throw-if-not-resolved=\"false\">Pipe</xref> as the IO on which Reactor listens to. </p>\r\n<p>Cardinality: Multiple <xref uid=\"com.azure.messaging.eventhubs.implementation.ReactorDispatcher\" data-throw-if-not-resolved=\"false\">ReactorDispatcher</xref>'s could be attached to 1 <xref uid=\"\" data-throw-if-not-resolved=\"false\">Reactor</xref>. Each <xref uid=\"com.azure.messaging.eventhubs.implementation.ReactorDispatcher\" data-throw-if-not-resolved=\"false\">ReactorDispatcher</xref> should be initialized synchronously - as it calls API in <xref uid=\"\" data-throw-if-not-resolved=\"false\">Reactor</xref> which is not thread-safe. </p>"
  syntax: &o1
    content: public class ReactorDispatcher
  inheritance:
  - java.lang.Object
- uid: com.azure.messaging.eventhubs.implementation.ReactorDispatcher.invoke(final Runnable)
  id: invoke(final Runnable)
  parent: com.azure.messaging.eventhubs.implementation.ReactorDispatcher
  href: com.azure.messaging.eventhubs.implementation.ReactorDispatcher.yml
  langs:
  - java
  name: invoke(final Runnable work)
  nameWithType: ReactorDispatcher.invoke(final Runnable work)
  fullName: com.azure.messaging.eventhubs.implementation.ReactorDispatcher.invoke(final Runnable work)
  overload: com.azure.messaging.eventhubs.implementation.ReactorDispatcher.invoke*
  type: Method
  source:
    remote: *o0
    path: sdk/eventhubs/azure-eventhubs/src/main/java/com/azure/messaging/eventhubs/implementation/ReactorDispatcher.java
    startLine: 66
  package: com.azure.messaging.eventhubs.implementation
  syntax:
    content: public void invoke(final Runnable work)
    parameters:
    - id: work
      type: 809b2ee5
- uid: com.azure.messaging.eventhubs.implementation.ReactorDispatcher.invoke(final Runnable,final Duration)
  id: invoke(final Runnable,final Duration)
  parent: com.azure.messaging.eventhubs.implementation.ReactorDispatcher
  href: com.azure.messaging.eventhubs.implementation.ReactorDispatcher.yml
  langs:
  - java
  name: invoke(final Runnable work, final Duration delay)
  nameWithType: ReactorDispatcher.invoke(final Runnable work, final Duration delay)
  fullName: com.azure.messaging.eventhubs.implementation.ReactorDispatcher.invoke(final Runnable work, final Duration delay)
  overload: com.azure.messaging.eventhubs.implementation.ReactorDispatcher.invoke*
  type: Method
  source:
    remote: *o0
    path: sdk/eventhubs/azure-eventhubs/src/main/java/com/azure/messaging/eventhubs/implementation/ReactorDispatcher.java
    startLine: 73
  package: com.azure.messaging.eventhubs.implementation
  syntax:
    content: public void invoke(final Runnable work, final Duration delay)
    parameters:
    - id: work
      type: 809b2ee5
    - id: delay
      type: 89ac7c4d
references:
- uid: 809b2ee5
  spec.java:
  - name: final Runnable
    fullName: final Runnable
- uid: com.azure.messaging.eventhubs.implementation.ReactorDispatcher.invoke*
  name: invoke
  nameWithType: ReactorDispatcher.invoke
  fullName: com.azure.messaging.eventhubs.implementation.ReactorDispatcher.invoke
  package: com.azure.messaging.eventhubs.implementation
- uid: 89ac7c4d
  spec.java:
  - name: final Duration
    fullName: final Duration
- uid: com.azure.core.util.logging.ClientLogger
  parent: com.azure.core.util.logging
  href: com.azure.core.util.logging.ClientLogger.yml
  name: ClientLogger
  nameWithType: ClientLogger
  fullName: com.azure.core.util.logging.ClientLogger
  type: Class
  summary: "<p>This is a fluent logger helper class that wraps a plug-able <xref uid=\"\" data-throw-if-not-resolved=\"false\">Logger</xref>.</p>\r\n<p>This logger logs formattable messages that use<code>{}Â \r\n    </code> as the placeholder. When a throwable is the last argument of the format varargs and the logger is enabled for <xref uid=\"\" data-throw-if-not-resolved=\"false\">verbose</xref> logging the stack trace for the throwable will be included in the log message.</p>\r\n<p>A minimum logging level threshold is determined by the <xref uid=\"com.azure.core.util.configuration.BaseConfigurations.AZURE_LOG_LEVEL\" data-throw-if-not-resolved=\"false\">AZURE_LOG_LEVEL</xref> environment configuration, by default logging is disabled.</p>\r\n<p>\r\n  <b>Log level hierarchy</b>\r\n</p>\r\n<p>\r\n  <orderedlist>\r\n    <li>\r\n      <p>\r\n        <xref uid=\"\" data-throw-if-not-resolved=\"false\">Error</xref>\r\n      </p>\r\n    </li>\r\n    <li>\r\n      <p>\r\n        <xref uid=\"\" data-throw-if-not-resolved=\"false\">Warning</xref>\r\n      </p>\r\n    </li>\r\n    <li>\r\n      <p>\r\n        <xref uid=\"\" data-throw-if-not-resolved=\"false\">Info</xref>\r\n      </p>\r\n    </li>\r\n    <li>\r\n      <p>\r\n        <xref uid=\"\" data-throw-if-not-resolved=\"false\">Verbose</xref>\r\n      </p>\r\n    </li>\r\n  </orderedlist>\r\n</p>\r\n<p></p>"
  syntax:
    content: public class ClientLogger
- uid: com.azure.messaging.eventhubs.implementation.ReactorDispatcher
  parent: com.azure.messaging.eventhubs.implementation
  href: com.azure.messaging.eventhubs.implementation.ReactorDispatcher.yml
  name: ReactorDispatcher
  nameWithType: ReactorDispatcher
  fullName: com.azure.messaging.eventhubs.implementation.ReactorDispatcher
  type: Class
  summary: "<p>\r\n  <xref uid=\"\" data-throw-if-not-resolved=\"false\">Reactor</xref> is not thread-safe - all calls to <xref uid=\"\" data-throw-if-not-resolved=\"false\">Proton</xref> APIs should be on the Reactor Thread. <xref uid=\"\" data-throw-if-not-resolved=\"false\">Reactor</xref> works out-of-box for all event driven API - ex: onReceive - which could raise upon onSocketRead. <xref uid=\"\" data-throw-if-not-resolved=\"false\">Reactor</xref> doesn't support APIs like send() out-of-box - which could potentially run on different thread to that of the Reactor thread.</p>\r\n<p>The following utility class is used to generate an Event to hook into <xref uid=\"\" data-throw-if-not-resolved=\"false\">Reactor</xref>'s event delegation pattern. It uses a <xref uid=\"\" data-throw-if-not-resolved=\"false\">Pipe</xref> as the IO on which Reactor listens to. </p>\r\n<p>Cardinality: Multiple <xref uid=\"com.azure.messaging.eventhubs.implementation.ReactorDispatcher\" data-throw-if-not-resolved=\"false\">ReactorDispatcher</xref>'s could be attached to 1 <xref uid=\"\" data-throw-if-not-resolved=\"false\">Reactor</xref>. Each <xref uid=\"com.azure.messaging.eventhubs.implementation.ReactorDispatcher\" data-throw-if-not-resolved=\"false\">ReactorDispatcher</xref> should be initialized synchronously - as it calls API in <xref uid=\"\" data-throw-if-not-resolved=\"false\">Reactor</xref> which is not thread-safe. </p>"
  syntax: *o1
