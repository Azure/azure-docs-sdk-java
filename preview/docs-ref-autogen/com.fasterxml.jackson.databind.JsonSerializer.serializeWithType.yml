### YamlMime:JavaMember
uid: "com.fasterxml.jackson.databind.JsonSerializer.serializeWithType*"
fullName: "com.fasterxml.jackson.databind.JsonSerializer<T>.serializeWithType"
name: "serializeWithType"
nameWithType: "JsonSerializer<T>.serializeWithType"
members:
- uid: "com.fasterxml.jackson.databind.JsonSerializer.serializeWithType(T,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.jsontype.TypeSerializer)"
  fullName: "com.fasterxml.jackson.databind.JsonSerializer<T>.serializeWithType(T value, JsonGenerator gen, SerializerProvider serializers, TypeSerializer typeSer)"
  name: "serializeWithType(T value, JsonGenerator gen, SerializerProvider serializers, TypeSerializer typeSer)"
  nameWithType: "JsonSerializer<T>.serializeWithType(T value, JsonGenerator gen, SerializerProvider serializers, TypeSerializer typeSer)"
  summary: "Method that can be called to ask implementation to serialize values of type this serializer handles, using specified type serializer for embedding necessary type information.\n\nDefault implementation will throw <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"UnsupportedOperationException\"></xref> to indicate that proper type handling needs to be implemented.\n\nFor simple datatypes written as a single scalar value (JSON String, Number, Boolean), implementation would look like:\n\n```java\n// note: method to call depends on whether this type is serialized as JSON scalar, object or Array!\n  typeSer.writeTypePrefixForScalar(value, gen);\n  serialize(value, gen, provider);\n  typeSer.writeTypeSuffixForScalar(value, gen);\n```\n\nand implementations for type serialized as JSON Arrays or Objects would differ slightly, as `START-ARRAY`/`END-ARRAY` and `START-OBJECT`/`END-OBJECT` pairs need to be properly handled with respect to serializing of contents."
  parameters:
  - description: "Value to serialize; can <b>not</b> be null."
    name: "value"
    type: "<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />"
  - description: "Generator used to output resulting Json content"
    name: "gen"
    type: "<xref href=\"com.fasterxml.jackson.core.JsonGenerator?alt=com.fasterxml.jackson.core.JsonGenerator&text=JsonGenerator\" data-throw-if-not-resolved=\"False\" />"
  - description: "Provider that can be used to get serializers for\n   serializing Objects value contains, if any."
    name: "serializers"
    type: "<xref href=\"com.fasterxml.jackson.databind.SerializerProvider?alt=com.fasterxml.jackson.databind.SerializerProvider&text=SerializerProvider\" data-throw-if-not-resolved=\"False\" />"
  - description: "Type serializer to use for including type information"
    name: "typeSer"
    type: "<xref href=\"com.fasterxml.jackson.databind.jsontype.TypeSerializer?alt=com.fasterxml.jackson.databind.jsontype.TypeSerializer&text=TypeSerializer\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public void serializeWithType(T value, JsonGenerator gen, SerializerProvider serializers, TypeSerializer typeSer)"
  exceptions:
  - type: "<xref href=\"java.io.IOException?alt=java.io.IOException&text=IOException\" data-throw-if-not-resolved=\"False\" />"
type: "method"
metadata: {}
package: "com.fasterxml.jackson.databind"
artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
