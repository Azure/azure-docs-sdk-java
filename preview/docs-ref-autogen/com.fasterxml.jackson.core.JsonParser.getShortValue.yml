### YamlMime:JavaMember
uid: "com.fasterxml.jackson.core.JsonParser.getShortValue*"
fullName: "com.fasterxml.jackson.core.JsonParser.getShortValue"
name: "getShortValue"
nameWithType: "JsonParser.getShortValue"
members:
- uid: "com.fasterxml.jackson.core.JsonParser.getShortValue()"
  fullName: "com.fasterxml.jackson.core.JsonParser.getShortValue()"
  name: "getShortValue()"
  nameWithType: "JsonParser.getShortValue()"
  summary: "Numeric accessor that can be called when the current token is of type <xref uid=\"com.fasterxml.jackson.core.JsonToken.VALUE_NUMBER_INT\" data-throw-if-not-resolved=\"false\" data-raw-source=\"JsonToken#VALUE_NUMBER_INT\"></xref> and it can be expressed as a value of Java short primitive type. It can also be called for <xref uid=\"com.fasterxml.jackson.core.JsonToken.VALUE_NUMBER_FLOAT\" data-throw-if-not-resolved=\"false\" data-raw-source=\"JsonToken#VALUE_NUMBER_FLOAT\"></xref>; if so, it is equivalent to calling <xref uid=\"com.fasterxml.jackson.core.JsonParser.getDoubleValue*\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#getDoubleValue\"></xref> and then casting; except for possible overflow/underflow exception.\n\nNote: if the resulting integer value falls outside range of Java short, a <xref uid=\"com.fasterxml.jackson.core.JsonParseException\" data-throw-if-not-resolved=\"false\" data-raw-source=\"JsonParseException\"></xref> will be thrown to indicate numeric overflow/underflow."
  syntax: "public short getShortValue()"
  exceptions:
  - type: "<xref href=\"java.io.IOException?alt=java.io.IOException&text=IOException\" data-throw-if-not-resolved=\"False\" />"
  returns:
    type: "<xref href=\"short?alt=short&text=short\" data-throw-if-not-resolved=\"False\" />"
type: "method"
metadata: {}
package: "com.fasterxml.jackson.core"
artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
