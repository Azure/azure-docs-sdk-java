### YamlMime:JavaMember
uid: "com.azure.cosmos.implementation.guava25.primitives.Doubles.reverse*"
fullName: "com.azure.cosmos.implementation.guava25.primitives.Doubles.reverse"
name: "reverse"
nameWithType: "Doubles.reverse"
members:
- uid: "com.azure.cosmos.implementation.guava25.primitives.Doubles.reverse(double[])"
  fullName: "com.azure.cosmos.implementation.guava25.primitives.Doubles.reverse(double[] array)"
  name: "reverse(double[] array)"
  nameWithType: "Doubles.reverse(double[] array)"
  summary: "Reverses the elements of `array`. This is equivalent to `Collections.reverse(Doubles.asList(array))`, but is likely to be more efficient."
  parameters:
  - name: "array"
    type: "<xref href=\"double?alt=double&text=double\" data-throw-if-not-resolved=\"False\" />[]"
  syntax: "public static void reverse(double[] array)"
- uid: "com.azure.cosmos.implementation.guava25.primitives.Doubles.reverse(double[],int,int)"
  fullName: "com.azure.cosmos.implementation.guava25.primitives.Doubles.reverse(double[] array, int fromIndex, int toIndex)"
  name: "reverse(double[] array, int fromIndex, int toIndex)"
  nameWithType: "Doubles.reverse(double[] array, int fromIndex, int toIndex)"
  summary: "Reverses the elements of `array` between `fromIndex` inclusive and `toIndex` exclusive. This is equivalent to `Collections.reverse(Doubles.asList(array).subList(fromIndex, toIndex))`, but is likely to be more efficient."
  parameters:
  - name: "array"
    type: "<xref href=\"double?alt=double&text=double\" data-throw-if-not-resolved=\"False\" />[]"
  - name: "fromIndex"
    type: "<xref href=\"int?alt=int&text=int\" data-throw-if-not-resolved=\"False\" />"
  - name: "toIndex"
    type: "<xref href=\"int?alt=int&text=int\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public static void reverse(double[] array, int fromIndex, int toIndex)"
type: "method"
metadata: {}
package: "com.azure.cosmos.implementation.guava25.primitives"
artifact: com.azure:azure-cosmos:4.4.0-beta.1
