### YamlMime:JavaType
uid: "com.azure.compute.batch.BatchClient"
fullName: "com.azure.compute.batch.BatchClient"
name: "BatchClient"
nameWithType: "BatchClient"
summary: "Initializes a new instance of the synchronous Batch<wbr>Client type."
inheritances:
- "<xref href=\"java.lang.Object?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
inheritedClassMethods:
- classRef: "java.lang.<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html\">Object</a>"
  methodsRef:
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#clone--\">clone</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#equals-java.lang.Object-\">equals</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#finalize--\">finalize</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#getClass--\">getClass</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#hashCode--\">hashCode</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#notify--\">notify</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#notifyAll--\">notifyAll</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#toString--\">toString</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#wait--\">wait</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#wait-long-\">wait</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#wait-long-int-\">wait</a>"
syntax: "public final class **BatchClient**"
methods:
- uid: "com.azure.compute.batch.BatchClient.createJob(com.azure.compute.batch.models.BatchJobCreateContent)"
  fullName: "com.azure.compute.batch.BatchClient.createJob(BatchJobCreateContent body)"
  name: "createJob(BatchJobCreateContent body)"
  nameWithType: "BatchClient.createJob(BatchJobCreateContent body)"
  summary: "Creates a Job to the specified Account."
  parameters:
  - description: "The Job to be created."
    name: "body"
    type: "<xref href=\"com.azure.compute.batch.models.BatchJobCreateContent?alt=com.azure.compute.batch.models.BatchJobCreateContent&text=BatchJobCreateContent\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public void createJob(BatchJobCreateContent body)"
  desc: "Creates a Job to the specified Account.\n\nThe Batch service supports two ways to control the work done as part of a Job. In the first approach, the user specifies a Job Manager Task. The Batch service launches this Task when it is ready to start the Job. The Job Manager Task controls all other Tasks that run under this Job, by using the Task APIs. In the second approach, the user directly controls the execution of Tasks under an active Job, by using the Task APIs. Also note: when naming Jobs, avoid including sensitive information such as user names or secret project names. This information may appear in telemetry logs accessible to Microsoft Support engineers."
- uid: "com.azure.compute.batch.BatchClient.createJob(com.azure.compute.batch.models.BatchJobCreateContent,com.azure.compute.batch.models.CreateBatchJobOptions)"
  fullName: "com.azure.compute.batch.BatchClient.createJob(BatchJobCreateContent body, CreateBatchJobOptions options)"
  name: "createJob(BatchJobCreateContent body, CreateBatchJobOptions options)"
  nameWithType: "BatchClient.createJob(BatchJobCreateContent body, CreateBatchJobOptions options)"
  summary: "Creates a Job to the specified Account."
  parameters:
  - description: "The Job to be created."
    name: "body"
    type: "<xref href=\"com.azure.compute.batch.models.BatchJobCreateContent?alt=com.azure.compute.batch.models.BatchJobCreateContent&text=BatchJobCreateContent\" data-throw-if-not-resolved=\"False\" />"
  - description: "A group of optional parameters containing timeOutInSeconds."
    name: "options"
    type: "<xref href=\"com.azure.compute.batch.models.CreateBatchJobOptions?alt=com.azure.compute.batch.models.CreateBatchJobOptions&text=CreateBatchJobOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public void createJob(BatchJobCreateContent body, CreateBatchJobOptions options)"
  desc: "Creates a Job to the specified Account.\n\nThe Batch service supports two ways to control the work done as part of a Job. In the first approach, the user specifies a Job Manager Task. The Batch service launches this Task when it is ready to start the Job. The Job Manager Task controls all other Tasks that run under this Job, by using the Task APIs. In the second approach, the user directly controls the execution of Tasks under an active Job, by using the Task APIs. Also note: when naming Jobs, avoid including sensitive information such as user names or secret project names. This information may appear in telemetry logs accessible to Microsoft Support engineers."
- uid: "com.azure.compute.batch.BatchClient.createJobSchedule(com.azure.compute.batch.models.BatchJobScheduleCreateContent)"
  fullName: "com.azure.compute.batch.BatchClient.createJobSchedule(BatchJobScheduleCreateContent body)"
  name: "createJobSchedule(BatchJobScheduleCreateContent body)"
  nameWithType: "BatchClient.createJobSchedule(BatchJobScheduleCreateContent body)"
  summary: "Creates a Job Schedule to the specified Account."
  parameters:
  - description: "The Job Schedule to be created."
    name: "body"
    type: "<xref href=\"com.azure.compute.batch.models.BatchJobScheduleCreateContent?alt=com.azure.compute.batch.models.BatchJobScheduleCreateContent&text=BatchJobScheduleCreateContent\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public void createJobSchedule(BatchJobScheduleCreateContent body)"
  desc: "Creates a Job Schedule to the specified Account."
- uid: "com.azure.compute.batch.BatchClient.createJobSchedule(com.azure.compute.batch.models.BatchJobScheduleCreateContent,com.azure.compute.batch.models.CreateBatchJobScheduleOptions)"
  fullName: "com.azure.compute.batch.BatchClient.createJobSchedule(BatchJobScheduleCreateContent body, CreateBatchJobScheduleOptions options)"
  name: "createJobSchedule(BatchJobScheduleCreateContent body, CreateBatchJobScheduleOptions options)"
  nameWithType: "BatchClient.createJobSchedule(BatchJobScheduleCreateContent body, CreateBatchJobScheduleOptions options)"
  summary: "Creates a Job Schedule to the specified Account."
  parameters:
  - description: "The Job Schedule to be created."
    name: "body"
    type: "<xref href=\"com.azure.compute.batch.models.BatchJobScheduleCreateContent?alt=com.azure.compute.batch.models.BatchJobScheduleCreateContent&text=BatchJobScheduleCreateContent\" data-throw-if-not-resolved=\"False\" />"
  - description: "A group containing optional parameters like timeOutInSeconds."
    name: "options"
    type: "<xref href=\"com.azure.compute.batch.models.CreateBatchJobScheduleOptions?alt=com.azure.compute.batch.models.CreateBatchJobScheduleOptions&text=CreateBatchJobScheduleOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public void createJobSchedule(BatchJobScheduleCreateContent body, CreateBatchJobScheduleOptions options)"
  desc: "Creates a Job Schedule to the specified Account."
- uid: "com.azure.compute.batch.BatchClient.createJobScheduleWithResponse(com.azure.core.util.BinaryData,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.compute.batch.BatchClient.createJobScheduleWithResponse(BinaryData jobSchedule, RequestOptions requestOptions)"
  name: "createJobScheduleWithResponse(BinaryData jobSchedule, RequestOptions requestOptions)"
  nameWithType: "BatchClient.createJobScheduleWithResponse(BinaryData jobSchedule, RequestOptions requestOptions)"
  summary: "Creates a Job Schedule to the specified Account."
  parameters:
  - description: "The Job Schedule to be created."
    name: "jobSchedule"
    type: "<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<Void> createJobScheduleWithResponse(BinaryData jobSchedule, RequestOptions requestOptions)"
  desc: "Creates a Job Schedule to the specified Account.\n\n**Query Parameters**\n\n    | ------- | ------- | -------- | -------------------------------------------------------------------------------------------------------------- |\n    | Name    | Type    | Required | Description                                                                                                    |\n    | timeOut | Integer | No       | Sets the maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. |\n\nYou can add these to a request with <xref uid=\"com.azure.core.http.rest.RequestOptions.addQueryParam\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RequestOptions#addQueryParam\"></xref>\n\n**Request Body Schema**\n\n```java\n{\n     id: String (Required)\n     displayName: String (Optional)\n     schedule (Required): {\n         doNotRunUntil: OffsetDateTime (Optional)\n         doNotRunAfter: OffsetDateTime (Optional)\n         startWindow: Duration (Optional)\n         recurrenceInterval: Duration (Optional)\n     }\n     jobSpecification (Required): {\n         priority: Integer (Optional)\n         allowTaskPreemption: Boolean (Optional)\n         maxParallelTasks: Integer (Optional)\n         displayName: String (Optional)\n         usesTaskDependencies: Boolean (Optional)\n         onAllTasksComplete: String(noaction/terminatejob) (Optional)\n         onTaskFailure: String(noaction/performexitoptionsjobaction) (Optional)\n         networkConfiguration (Optional): {\n             subnetId: String (Required)\n         }\n         constraints (Optional): {\n             maxWallClockTime: Duration (Optional)\n             maxTaskRetryCount: Integer (Optional)\n         }\n         jobManagerTask (Optional): {\n             id: String (Required)\n             displayName: String (Optional)\n             commandLine: String (Required)\n             containerSettings (Optional): {\n                 containerRunOptions: String (Optional)\n                 imageName: String (Required)\n                 registry (Optional): {\n                     username: String (Optional)\n                     password: String (Optional)\n                     registryServer: String (Optional)\n                     identityReference (Optional): {\n                         resourceId: String (Optional)\n                     }\n                 }\n                 workingDirectory: String(taskWorkingDirectory/containerImageDefault) (Optional)\n             }\n             resourceFiles (Optional): [\n                  (Optional){\n                     autoStorageContainerName: String (Optional)\n                     storageContainerUrl: String (Optional)\n                     httpUrl: String (Optional)\n                     blobPrefix: String (Optional)\n                     filePath: String (Optional)\n                     fileMode: String (Optional)\n                     identityReference (Optional): (recursive schema, see identityReference above)\n                 }\n             ]\n             outputFiles (Optional): [\n                  (Optional){\n                     filePattern: String (Required)\n                     destination (Required): {\n                         container (Optional): {\n                             path: String (Optional)\n                             containerUrl: String (Required)\n                             identityReference (Optional): (recursive schema, see identityReference above)\n                             uploadHeaders (Optional): [\n                                  (Optional){\n                                     name: String (Required)\n                                     value: String (Optional)\n                                 }\n                             ]\n                         }\n                     }\n                     uploadOptions (Required): {\n                         uploadCondition: String(tasksuccess/taskfailure/taskcompletion) (Required)\n                     }\n                 }\n             ]\n             environmentSettings (Optional): [\n                  (Optional){\n                     name: String (Required)\n                     value: String (Optional)\n                 }\n             ]\n             constraints (Optional): {\n                 maxWallClockTime: Duration (Optional)\n                 retentionTime: Duration (Optional)\n                 maxTaskRetryCount: Integer (Optional)\n             }\n             requiredSlots: Integer (Optional)\n             killJobOnCompletion: Boolean (Optional)\n             userIdentity (Optional): {\n                 username: String (Optional)\n                 autoUser (Optional): {\n                     scope: String(task/pool) (Optional)\n                     elevationLevel: String(nonadmin/admin) (Optional)\n                 }\n             }\n             runExclusive: Boolean (Optional)\n             applicationPackageReferences (Optional): [\n                  (Optional){\n                     applicationId: String (Required)\n                     version: String (Optional)\n                 }\n             ]\n             authenticationTokenSettings (Optional): {\n                 access (Optional): [\n                     String(job) (Optional)\n                 ]\n             }\n             allowLowPriorityNode: Boolean (Optional)\n         }\n         jobPreparationTask (Optional): {\n             id: String (Optional)\n             commandLine: String (Required)\n             containerSettings (Optional): (recursive schema, see containerSettings above)\n             resourceFiles (Optional): [\n                 (recursive schema, see above)\n             ]\n             environmentSettings (Optional): [\n                 (recursive schema, see above)\n             ]\n             constraints (Optional): (recursive schema, see constraints above)\n             waitForSuccess: Boolean (Optional)\n             userIdentity (Optional): (recursive schema, see userIdentity above)\n             rerunOnNodeRebootAfterSuccess: Boolean (Optional)\n         }\n         jobReleaseTask (Optional): {\n             id: String (Optional)\n             commandLine: String (Required)\n             containerSettings (Optional): (recursive schema, see containerSettings above)\n             resourceFiles (Optional): [\n                 (recursive schema, see above)\n             ]\n             environmentSettings (Optional): [\n                 (recursive schema, see above)\n             ]\n             maxWallClockTime: Duration (Optional)\n             retentionTime: Duration (Optional)\n             userIdentity (Optional): (recursive schema, see userIdentity above)\n         }\n         commonEnvironmentSettings (Optional): [\n             (recursive schema, see above)\n         ]\n         poolInfo (Required): {\n             poolId: String (Optional)\n             autoPoolSpecification (Optional): {\n                 autoPoolIdPrefix: String (Optional)\n                 poolLifetimeOption: String(jobschedule/job) (Required)\n                 keepAlive: Boolean (Optional)\n                 pool (Optional): {\n                     displayName: String (Optional)\n                     vmSize: String (Required)\n                     cloudServiceConfiguration (Optional): {\n                         osFamily: String (Required)\n                         osVersion: String (Optional)\n                     }\n                     virtualMachineConfiguration (Optional): {\n                         imageReference (Required): {\n                             publisher: String (Optional)\n                             offer: String (Optional)\n                             sku: String (Optional)\n                             version: String (Optional)\n                             virtualMachineImageId: String (Optional)\n                             exactVersion: String (Optional)\n                         }\n                         nodeAgentSKUId: String (Required)\n                         windowsConfiguration (Optional): {\n                             enableAutomaticUpdates: Boolean (Optional)\n                         }\n                         dataDisks (Optional): [\n                              (Optional){\n                                 lun: int (Required)\n                                 caching: String(none/readonly/readwrite) (Optional)\n                                 diskSizeGB: int (Required)\n                                 storageAccountType: String(standard_lrs/premium_lrs) (Optional)\n                             }\n                         ]\n                         licenseType: String (Optional)\n                         containerConfiguration (Optional): {\n                             type: String(dockerCompatible/criCompatible) (Required)\n                             containerImageNames (Optional): [\n                                 String (Optional)\n                             ]\n                             containerRegistries (Optional): [\n                                 (recursive schema, see above)\n                             ]\n                         }\n                         diskEncryptionConfiguration (Optional): {\n                             targets (Optional): [\n                                 String(osdisk/temporarydisk) (Optional)\n                             ]\n                         }\n                         nodePlacementConfiguration (Optional): {\n                             policy: String(regional/zonal) (Optional)\n                         }\n                         extensions (Optional): [\n                              (Optional){\n                                 name: String (Required)\n                                 publisher: String (Required)\n                                 type: String (Required)\n                                 typeHandlerVersion: String (Optional)\n                                 autoUpgradeMinorVersion: Boolean (Optional)\n                                 enableAutomaticUpgrade: Boolean (Optional)\n                                 settings (Optional): {\n                                     String: String (Optional)\n                                 }\n                                 protectedSettings (Optional): {\n                                     String: String (Optional)\n                                 }\n                                 provisionAfterExtensions (Optional): [\n                                     String (Optional)\n                                 ]\n                             }\n                         ]\n                         osDisk (Optional): {\n                             ephemeralOSDiskSettings (Optional): {\n                                 placement: String(cachedisk) (Optional)\n                             }\n                         }\n                     }\n                     taskSlotsPerNode: Integer (Optional)\n                     taskSchedulingPolicy (Optional): {\n                         nodeFillType: String(spread/pack) (Required)\n                     }\n                     resizeTimeout: Duration (Optional)\n                     targetDedicatedNodes: Integer (Optional)\n                     targetLowPriorityNodes: Integer (Optional)\n                     enableAutoScale: Boolean (Optional)\n                     autoScaleFormula: String (Optional)\n                     autoScaleEvaluationInterval: Duration (Optional)\n                     enableInterNodeCommunication: Boolean (Optional)\n                     networkConfiguration (Optional): {\n                         subnetId: String (Optional)\n                         dynamicVNetAssignmentScope: String(none/job) (Optional)\n                         endpointConfiguration (Optional): {\n                             inboundNATPools (Required): [\n                                  (Required){\n                                     name: String (Required)\n                                     protocol: String(tcp/udp) (Required)\n                                     backendPort: int (Required)\n                                     frontendPortRangeStart: int (Required)\n                                     frontendPortRangeEnd: int (Required)\n                                     networkSecurityGroupRules (Optional): [\n                                          (Optional){\n                                             priority: int (Required)\n                                             access: String(allow/deny) (Required)\n                                             sourceAddressPrefix: String (Required)\n                                             sourcePortRanges (Optional): [\n                                                 String (Optional)\n                                             ]\n                                         }\n                                     ]\n                                 }\n                             ]\n                         }\n                         publicIPAddressConfiguration (Optional): {\n                             provision: String(batchmanaged/usermanaged/nopublicipaddresses) (Optional)\n                             ipAddressIds (Optional): [\n                                 String (Optional)\n                             ]\n                         }\n                         enableAcceleratedNetworking: Boolean (Optional)\n                     }\n                     startTask (Optional): {\n                         commandLine: String (Required)\n                         containerSettings (Optional): (recursive schema, see containerSettings above)\n                         resourceFiles (Optional): [\n                             (recursive schema, see above)\n                         ]\n                         environmentSettings (Optional): [\n                             (recursive schema, see above)\n                         ]\n                         userIdentity (Optional): (recursive schema, see userIdentity above)\n                         maxTaskRetryCount: Integer (Optional)\n                         waitForSuccess: Boolean (Optional)\n                     }\n                     applicationPackageReferences (Optional): [\n                         (recursive schema, see above)\n                     ]\n                     applicationLicenses (Optional): [\n                         String (Optional)\n                     ]\n                     userAccounts (Optional): [\n                          (Optional){\n                             name: String (Required)\n                             password: String (Required)\n                             elevationLevel: String(nonadmin/admin) (Optional)\n                             linuxUserConfiguration (Optional): {\n                                 uid: Integer (Optional)\n                                 gid: Integer (Optional)\n                                 sshPrivateKey: String (Optional)\n                             }\n                             windowsUserConfiguration (Optional): {\n                                 loginMode: String(batch/interactive) (Optional)\n                             }\n                         }\n                     ]\n                     metadata (Optional): [\n                          (Optional){\n                             name: String (Required)\n                             value: String (Required)\n                         }\n                     ]\n                     mountConfiguration (Optional): [\n                          (Optional){\n                             azureBlobFileSystemConfiguration (Optional): {\n                                 accountName: String (Required)\n                                 containerName: String (Required)\n                                 accountKey: String (Optional)\n                                 sasKey: String (Optional)\n                                 blobfuseOptions: String (Optional)\n                                 relativeMountPath: String (Required)\n                                 identityReference (Optional): (recursive schema, see identityReference above)\n                             }\n                             nfsMountConfiguration (Optional): {\n                                 source: String (Required)\n                                 relativeMountPath: String (Required)\n                                 mountOptions: String (Optional)\n                             }\n                             cifsMountConfiguration (Optional): {\n                                 username: String (Required)\n                                 source: String (Required)\n                                 relativeMountPath: String (Required)\n                                 mountOptions: String (Optional)\n                                 password: String (Required)\n                             }\n                             azureFileShareConfiguration (Optional): {\n                                 accountName: String (Required)\n                                 azureFileUrl: String (Required)\n                                 accountKey: String (Required)\n                                 relativeMountPath: String (Required)\n                                 mountOptions: String (Optional)\n                             }\n                         }\n                     ]\n                     targetNodeCommunicationMode: String(default/classic/simplified) (Optional)\n                 }\n             }\n         }\n         metadata (Optional): [\n             (recursive schema, see above)\n         ]\n     }\n     metadata (Optional): [\n         (recursive schema, see above)\n     ]\n }\n```"
  returns:
    description: "the <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Void.html\">Void</a>&gt;"
- uid: "com.azure.compute.batch.BatchClient.createJobWithResponse(com.azure.core.util.BinaryData,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.compute.batch.BatchClient.createJobWithResponse(BinaryData job, RequestOptions requestOptions)"
  name: "createJobWithResponse(BinaryData job, RequestOptions requestOptions)"
  nameWithType: "BatchClient.createJobWithResponse(BinaryData job, RequestOptions requestOptions)"
  summary: "Creates a Job to the specified Account."
  parameters:
  - description: "The Job to be created."
    name: "job"
    type: "<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<Void> createJobWithResponse(BinaryData job, RequestOptions requestOptions)"
  desc: "Creates a Job to the specified Account.\n\nThe Batch service supports two ways to control the work done as part of a Job. In the first approach, the user specifies a Job Manager Task. The Batch service launches this Task when it is ready to start the Job. The Job Manager Task controls all other Tasks that run under this Job, by using the Task APIs. In the second approach, the user directly controls the execution of Tasks under an active Job, by using the Task APIs. Also note: when naming Jobs, avoid including sensitive information such as user names or secret project names. This information may appear in telemetry logs accessible to Microsoft Support engineers.\n\n**Query Parameters**\n\n    | ------- | ------- | -------- | -------------------------------------------------------------------------------------------------------------- |\n    | Name    | Type    | Required | Description                                                                                                    |\n    | timeOut | Integer | No       | Sets the maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. |\n\nYou can add these to a request with <xref uid=\"com.azure.core.http.rest.RequestOptions.addQueryParam\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RequestOptions#addQueryParam\"></xref>\n\n**Request Body Schema**\n\n```java\n{\n     id: String (Required)\n     displayName: String (Optional)\n     usesTaskDependencies: Boolean (Optional)\n     priority: Integer (Optional)\n     allowTaskPreemption: Boolean (Optional)\n     maxParallelTasks: Integer (Optional)\n     constraints (Optional): {\n         maxWallClockTime: Duration (Optional)\n         maxTaskRetryCount: Integer (Optional)\n     }\n     jobManagerTask (Optional): {\n         id: String (Required)\n         displayName: String (Optional)\n         commandLine: String (Required)\n         containerSettings (Optional): {\n             containerRunOptions: String (Optional)\n             imageName: String (Required)\n             registry (Optional): {\n                 username: String (Optional)\n                 password: String (Optional)\n                 registryServer: String (Optional)\n                 identityReference (Optional): {\n                     resourceId: String (Optional)\n                 }\n             }\n             workingDirectory: String(taskWorkingDirectory/containerImageDefault) (Optional)\n         }\n         resourceFiles (Optional): [\n              (Optional){\n                 autoStorageContainerName: String (Optional)\n                 storageContainerUrl: String (Optional)\n                 httpUrl: String (Optional)\n                 blobPrefix: String (Optional)\n                 filePath: String (Optional)\n                 fileMode: String (Optional)\n                 identityReference (Optional): (recursive schema, see identityReference above)\n             }\n         ]\n         outputFiles (Optional): [\n              (Optional){\n                 filePattern: String (Required)\n                 destination (Required): {\n                     container (Optional): {\n                         path: String (Optional)\n                         containerUrl: String (Required)\n                         identityReference (Optional): (recursive schema, see identityReference above)\n                         uploadHeaders (Optional): [\n                              (Optional){\n                                 name: String (Required)\n                                 value: String (Optional)\n                             }\n                         ]\n                     }\n                 }\n                 uploadOptions (Required): {\n                     uploadCondition: String(tasksuccess/taskfailure/taskcompletion) (Required)\n                 }\n             }\n         ]\n         environmentSettings (Optional): [\n              (Optional){\n                 name: String (Required)\n                 value: String (Optional)\n             }\n         ]\n         constraints (Optional): {\n             maxWallClockTime: Duration (Optional)\n             retentionTime: Duration (Optional)\n             maxTaskRetryCount: Integer (Optional)\n         }\n         requiredSlots: Integer (Optional)\n         killJobOnCompletion: Boolean (Optional)\n         userIdentity (Optional): {\n             username: String (Optional)\n             autoUser (Optional): {\n                 scope: String(task/pool) (Optional)\n                 elevationLevel: String(nonadmin/admin) (Optional)\n             }\n         }\n         runExclusive: Boolean (Optional)\n         applicationPackageReferences (Optional): [\n              (Optional){\n                 applicationId: String (Required)\n                 version: String (Optional)\n             }\n         ]\n         authenticationTokenSettings (Optional): {\n             access (Optional): [\n                 String(job) (Optional)\n             ]\n         }\n         allowLowPriorityNode: Boolean (Optional)\n     }\n     jobPreparationTask (Optional): {\n         id: String (Optional)\n         commandLine: String (Required)\n         containerSettings (Optional): (recursive schema, see containerSettings above)\n         resourceFiles (Optional): [\n             (recursive schema, see above)\n         ]\n         environmentSettings (Optional): [\n             (recursive schema, see above)\n         ]\n         constraints (Optional): (recursive schema, see constraints above)\n         waitForSuccess: Boolean (Optional)\n         userIdentity (Optional): (recursive schema, see userIdentity above)\n         rerunOnNodeRebootAfterSuccess: Boolean (Optional)\n     }\n     jobReleaseTask (Optional): {\n         id: String (Optional)\n         commandLine: String (Required)\n         containerSettings (Optional): (recursive schema, see containerSettings above)\n         resourceFiles (Optional): [\n             (recursive schema, see above)\n         ]\n         environmentSettings (Optional): [\n             (recursive schema, see above)\n         ]\n         maxWallClockTime: Duration (Optional)\n         retentionTime: Duration (Optional)\n         userIdentity (Optional): (recursive schema, see userIdentity above)\n     }\n     commonEnvironmentSettings (Optional): [\n         (recursive schema, see above)\n     ]\n     poolInfo (Required): {\n         poolId: String (Optional)\n         autoPoolSpecification (Optional): {\n             autoPoolIdPrefix: String (Optional)\n             poolLifetimeOption: String(jobschedule/job) (Required)\n             keepAlive: Boolean (Optional)\n             pool (Optional): {\n                 displayName: String (Optional)\n                 vmSize: String (Required)\n                 cloudServiceConfiguration (Optional): {\n                     osFamily: String (Required)\n                     osVersion: String (Optional)\n                 }\n                 virtualMachineConfiguration (Optional): {\n                     imageReference (Required): {\n                         publisher: String (Optional)\n                         offer: String (Optional)\n                         sku: String (Optional)\n                         version: String (Optional)\n                         virtualMachineImageId: String (Optional)\n                         exactVersion: String (Optional)\n                     }\n                     nodeAgentSKUId: String (Required)\n                     windowsConfiguration (Optional): {\n                         enableAutomaticUpdates: Boolean (Optional)\n                     }\n                     dataDisks (Optional): [\n                          (Optional){\n                             lun: int (Required)\n                             caching: String(none/readonly/readwrite) (Optional)\n                             diskSizeGB: int (Required)\n                             storageAccountType: String(standard_lrs/premium_lrs) (Optional)\n                         }\n                     ]\n                     licenseType: String (Optional)\n                     containerConfiguration (Optional): {\n                         type: String(dockerCompatible/criCompatible) (Required)\n                         containerImageNames (Optional): [\n                             String (Optional)\n                         ]\n                         containerRegistries (Optional): [\n                             (recursive schema, see above)\n                         ]\n                     }\n                     diskEncryptionConfiguration (Optional): {\n                         targets (Optional): [\n                             String(osdisk/temporarydisk) (Optional)\n                         ]\n                     }\n                     nodePlacementConfiguration (Optional): {\n                         policy: String(regional/zonal) (Optional)\n                     }\n                     extensions (Optional): [\n                          (Optional){\n                             name: String (Required)\n                             publisher: String (Required)\n                             type: String (Required)\n                             typeHandlerVersion: String (Optional)\n                             autoUpgradeMinorVersion: Boolean (Optional)\n                             enableAutomaticUpgrade: Boolean (Optional)\n                             settings (Optional): {\n                                 String: String (Optional)\n                             }\n                             protectedSettings (Optional): {\n                                 String: String (Optional)\n                             }\n                             provisionAfterExtensions (Optional): [\n                                 String (Optional)\n                             ]\n                         }\n                     ]\n                     osDisk (Optional): {\n                         ephemeralOSDiskSettings (Optional): {\n                             placement: String(cachedisk) (Optional)\n                         }\n                     }\n                 }\n                 taskSlotsPerNode: Integer (Optional)\n                 taskSchedulingPolicy (Optional): {\n                     nodeFillType: String(spread/pack) (Required)\n                 }\n                 resizeTimeout: Duration (Optional)\n                 targetDedicatedNodes: Integer (Optional)\n                 targetLowPriorityNodes: Integer (Optional)\n                 enableAutoScale: Boolean (Optional)\n                 autoScaleFormula: String (Optional)\n                 autoScaleEvaluationInterval: Duration (Optional)\n                 enableInterNodeCommunication: Boolean (Optional)\n                 networkConfiguration (Optional): {\n                     subnetId: String (Optional)\n                     dynamicVNetAssignmentScope: String(none/job) (Optional)\n                     endpointConfiguration (Optional): {\n                         inboundNATPools (Required): [\n                              (Required){\n                                 name: String (Required)\n                                 protocol: String(tcp/udp) (Required)\n                                 backendPort: int (Required)\n                                 frontendPortRangeStart: int (Required)\n                                 frontendPortRangeEnd: int (Required)\n                                 networkSecurityGroupRules (Optional): [\n                                      (Optional){\n                                         priority: int (Required)\n                                         access: String(allow/deny) (Required)\n                                         sourceAddressPrefix: String (Required)\n                                         sourcePortRanges (Optional): [\n                                             String (Optional)\n                                         ]\n                                     }\n                                 ]\n                             }\n                         ]\n                     }\n                     publicIPAddressConfiguration (Optional): {\n                         provision: String(batchmanaged/usermanaged/nopublicipaddresses) (Optional)\n                         ipAddressIds (Optional): [\n                             String (Optional)\n                         ]\n                     }\n                     enableAcceleratedNetworking: Boolean (Optional)\n                 }\n                 startTask (Optional): {\n                     commandLine: String (Required)\n                     containerSettings (Optional): (recursive schema, see containerSettings above)\n                     resourceFiles (Optional): [\n                         (recursive schema, see above)\n                     ]\n                     environmentSettings (Optional): [\n                         (recursive schema, see above)\n                     ]\n                     userIdentity (Optional): (recursive schema, see userIdentity above)\n                     maxTaskRetryCount: Integer (Optional)\n                     waitForSuccess: Boolean (Optional)\n                 }\n                 applicationPackageReferences (Optional): [\n                     (recursive schema, see above)\n                 ]\n                 applicationLicenses (Optional): [\n                     String (Optional)\n                 ]\n                 userAccounts (Optional): [\n                      (Optional){\n                         name: String (Required)\n                         password: String (Required)\n                         elevationLevel: String(nonadmin/admin) (Optional)\n                         linuxUserConfiguration (Optional): {\n                             uid: Integer (Optional)\n                             gid: Integer (Optional)\n                             sshPrivateKey: String (Optional)\n                         }\n                         windowsUserConfiguration (Optional): {\n                             loginMode: String(batch/interactive) (Optional)\n                         }\n                     }\n                 ]\n                 metadata (Optional): [\n                      (Optional){\n                         name: String (Required)\n                         value: String (Required)\n                     }\n                 ]\n                 mountConfiguration (Optional): [\n                      (Optional){\n                         azureBlobFileSystemConfiguration (Optional): {\n                             accountName: String (Required)\n                             containerName: String (Required)\n                             accountKey: String (Optional)\n                             sasKey: String (Optional)\n                             blobfuseOptions: String (Optional)\n                             relativeMountPath: String (Required)\n                             identityReference (Optional): (recursive schema, see identityReference above)\n                         }\n                         nfsMountConfiguration (Optional): {\n                             source: String (Required)\n                             relativeMountPath: String (Required)\n                             mountOptions: String (Optional)\n                         }\n                         cifsMountConfiguration (Optional): {\n                             username: String (Required)\n                             source: String (Required)\n                             relativeMountPath: String (Required)\n                             mountOptions: String (Optional)\n                             password: String (Required)\n                         }\n                         azureFileShareConfiguration (Optional): {\n                             accountName: String (Required)\n                             azureFileUrl: String (Required)\n                             accountKey: String (Required)\n                             relativeMountPath: String (Required)\n                             mountOptions: String (Optional)\n                         }\n                     }\n                 ]\n                 targetNodeCommunicationMode: String(default/classic/simplified) (Optional)\n             }\n         }\n     }\n     onAllTasksComplete: String(noaction/terminatejob) (Optional)\n     onTaskFailure: String(noaction/performexitoptionsjobaction) (Optional)\n     networkConfiguration (Optional): {\n         subnetId: String (Required)\n     }\n     metadata (Optional): [\n         (recursive schema, see above)\n     ]\n }\n```"
  returns:
    description: "the <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Void.html\">Void</a>&gt;"
- uid: "com.azure.compute.batch.BatchClient.createNodeUser(java.lang.String,java.lang.String,com.azure.compute.batch.models.BatchNodeUserCreateContent)"
  fullName: "com.azure.compute.batch.BatchClient.createNodeUser(String poolId, String nodeId, BatchNodeUserCreateContent body)"
  name: "createNodeUser(String poolId, String nodeId, BatchNodeUserCreateContent body)"
  nameWithType: "BatchClient.createNodeUser(String poolId, String nodeId, BatchNodeUserCreateContent body)"
  summary: "Adds a user Account to the specified Compute Node."
  parameters:
  - description: "The ID of the Pool that contains the Compute Node."
    name: "poolId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The ID of the machine on which you want to create a user Account."
    name: "nodeId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The options to use for creating the user."
    name: "body"
    type: "<xref href=\"com.azure.compute.batch.models.BatchNodeUserCreateContent?alt=com.azure.compute.batch.models.BatchNodeUserCreateContent&text=BatchNodeUserCreateContent\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public void createNodeUser(String poolId, String nodeId, BatchNodeUserCreateContent body)"
  desc: "Adds a user Account to the specified Compute Node.\n\nYou can add a user Account to a Compute Node only when it is in the idle or running state."
- uid: "com.azure.compute.batch.BatchClient.createNodeUser(java.lang.String,java.lang.String,com.azure.compute.batch.models.BatchNodeUserCreateContent,com.azure.compute.batch.models.CreateBatchNodeUserOptions)"
  fullName: "com.azure.compute.batch.BatchClient.createNodeUser(String poolId, String nodeId, BatchNodeUserCreateContent body, CreateBatchNodeUserOptions options)"
  name: "createNodeUser(String poolId, String nodeId, BatchNodeUserCreateContent body, CreateBatchNodeUserOptions options)"
  nameWithType: "BatchClient.createNodeUser(String poolId, String nodeId, BatchNodeUserCreateContent body, CreateBatchNodeUserOptions options)"
  summary: "Adds a user Account to the specified Compute Node."
  parameters:
  - description: "The ID of the Pool that contains the Compute Node."
    name: "poolId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The ID of the machine on which you want to create a user Account."
    name: "nodeId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The options to use for creating the user."
    name: "body"
    type: "<xref href=\"com.azure.compute.batch.models.BatchNodeUserCreateContent?alt=com.azure.compute.batch.models.BatchNodeUserCreateContent&text=BatchNodeUserCreateContent\" data-throw-if-not-resolved=\"False\" />"
  - description: "A group containing optional parameters like timeOutInSeconds."
    name: "options"
    type: "<xref href=\"com.azure.compute.batch.models.CreateBatchNodeUserOptions?alt=com.azure.compute.batch.models.CreateBatchNodeUserOptions&text=CreateBatchNodeUserOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public void createNodeUser(String poolId, String nodeId, BatchNodeUserCreateContent body, CreateBatchNodeUserOptions options)"
  desc: "Adds a user Account to the specified Compute Node.\n\nYou can add a user Account to a Compute Node only when it is in the idle or running state."
- uid: "com.azure.compute.batch.BatchClient.createNodeUserWithResponse(java.lang.String,java.lang.String,com.azure.core.util.BinaryData,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.compute.batch.BatchClient.createNodeUserWithResponse(String poolId, String nodeId, BinaryData user, RequestOptions requestOptions)"
  name: "createNodeUserWithResponse(String poolId, String nodeId, BinaryData user, RequestOptions requestOptions)"
  nameWithType: "BatchClient.createNodeUserWithResponse(String poolId, String nodeId, BinaryData user, RequestOptions requestOptions)"
  summary: "Adds a user Account to the specified Compute Node."
  parameters:
  - description: "The ID of the Pool that contains the Compute Node."
    name: "poolId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The ID of the machine on which you want to create a user Account."
    name: "nodeId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The options to use for creating the user."
    name: "user"
    type: "<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<Void> createNodeUserWithResponse(String poolId, String nodeId, BinaryData user, RequestOptions requestOptions)"
  desc: "Adds a user Account to the specified Compute Node.\n\nYou can add a user Account to a Compute Node only when it is in the idle or running state.\n\n**Query Parameters**\n\n    | ------- | ------- | -------- | -------------------------------------------------------------------------------------------------------------- |\n    | Name    | Type    | Required | Description                                                                                                    |\n    | timeOut | Integer | No       | Sets the maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. |\n\nYou can add these to a request with <xref uid=\"com.azure.core.http.rest.RequestOptions.addQueryParam\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RequestOptions#addQueryParam\"></xref>\n\n**Request Body Schema**\n\n```java\n{\n     name: String (Required)\n     isAdmin: Boolean (Optional)\n     expiryTime: OffsetDateTime (Optional)\n     password: String (Optional)\n     sshPublicKey: String (Optional)\n }\n```"
  returns:
    description: "the <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Void.html\">Void</a>&gt;"
- uid: "com.azure.compute.batch.BatchClient.createPool(com.azure.compute.batch.models.BatchPoolCreateContent)"
  fullName: "com.azure.compute.batch.BatchClient.createPool(BatchPoolCreateContent body)"
  name: "createPool(BatchPoolCreateContent body)"
  nameWithType: "BatchClient.createPool(BatchPoolCreateContent body)"
  summary: "Creates a Pool to the specified Account."
  parameters:
  - description: "The Pool to be created."
    name: "body"
    type: "<xref href=\"com.azure.compute.batch.models.BatchPoolCreateContent?alt=com.azure.compute.batch.models.BatchPoolCreateContent&text=BatchPoolCreateContent\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public void createPool(BatchPoolCreateContent body)"
  desc: "Creates a Pool to the specified Account.\n\nWhen naming Pools, avoid including sensitive information such as user names or secret project names. This information may appear in telemetry logs accessible to Microsoft Support engineers."
- uid: "com.azure.compute.batch.BatchClient.createPool(com.azure.compute.batch.models.BatchPoolCreateContent,com.azure.compute.batch.models.CreateBatchPoolOptions)"
  fullName: "com.azure.compute.batch.BatchClient.createPool(BatchPoolCreateContent body, CreateBatchPoolOptions options)"
  name: "createPool(BatchPoolCreateContent body, CreateBatchPoolOptions options)"
  nameWithType: "BatchClient.createPool(BatchPoolCreateContent body, CreateBatchPoolOptions options)"
  summary: "Creates a Pool to the specified Account."
  parameters:
  - description: "The Pool to be created."
    name: "body"
    type: "<xref href=\"com.azure.compute.batch.models.BatchPoolCreateContent?alt=com.azure.compute.batch.models.BatchPoolCreateContent&text=BatchPoolCreateContent\" data-throw-if-not-resolved=\"False\" />"
  - description: "A group of optional parameters that includes timeOutInSeconds."
    name: "options"
    type: "<xref href=\"com.azure.compute.batch.models.CreateBatchPoolOptions?alt=com.azure.compute.batch.models.CreateBatchPoolOptions&text=CreateBatchPoolOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public void createPool(BatchPoolCreateContent body, CreateBatchPoolOptions options)"
  desc: "Creates a Pool to the specified Account.\n\nWhen naming Pools, avoid including sensitive information such as user names or secret project names. This information may appear in telemetry logs accessible to Microsoft Support engineers."
- uid: "com.azure.compute.batch.BatchClient.createPoolWithResponse(com.azure.core.util.BinaryData,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.compute.batch.BatchClient.createPoolWithResponse(BinaryData pool, RequestOptions requestOptions)"
  name: "createPoolWithResponse(BinaryData pool, RequestOptions requestOptions)"
  nameWithType: "BatchClient.createPoolWithResponse(BinaryData pool, RequestOptions requestOptions)"
  summary: "Creates a Pool to the specified Account."
  parameters:
  - description: "The Pool to be created."
    name: "pool"
    type: "<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<Void> createPoolWithResponse(BinaryData pool, RequestOptions requestOptions)"
  desc: "Creates a Pool to the specified Account.\n\nWhen naming Pools, avoid including sensitive information such as user names or secret project names. This information may appear in telemetry logs accessible to Microsoft Support engineers.\n\n**Query Parameters**\n\n    | ------- | ------- | -------- | -------------------------------------------------------------------------------------------------------------- |\n    | Name    | Type    | Required | Description                                                                                                    |\n    | timeOut | Integer | No       | Sets the maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. |\n\nYou can add these to a request with <xref uid=\"com.azure.core.http.rest.RequestOptions.addQueryParam\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RequestOptions#addQueryParam\"></xref>\n\n**Request Body Schema**\n\n```java\n{\n     id: String (Required)\n     displayName: String (Optional)\n     vmSize: String (Required)\n     cloudServiceConfiguration (Optional): {\n         osFamily: String (Required)\n         osVersion: String (Optional)\n     }\n     virtualMachineConfiguration (Optional): {\n         imageReference (Required): {\n             publisher: String (Optional)\n             offer: String (Optional)\n             sku: String (Optional)\n             version: String (Optional)\n             virtualMachineImageId: String (Optional)\n             exactVersion: String (Optional)\n         }\n         nodeAgentSKUId: String (Required)\n         windowsConfiguration (Optional): {\n             enableAutomaticUpdates: Boolean (Optional)\n         }\n         dataDisks (Optional): [\n              (Optional){\n                 lun: int (Required)\n                 caching: String(none/readonly/readwrite) (Optional)\n                 diskSizeGB: int (Required)\n                 storageAccountType: String(standard_lrs/premium_lrs) (Optional)\n             }\n         ]\n         licenseType: String (Optional)\n         containerConfiguration (Optional): {\n             type: String(dockerCompatible/criCompatible) (Required)\n             containerImageNames (Optional): [\n                 String (Optional)\n             ]\n             containerRegistries (Optional): [\n                  (Optional){\n                     username: String (Optional)\n                     password: String (Optional)\n                     registryServer: String (Optional)\n                     identityReference (Optional): {\n                         resourceId: String (Optional)\n                     }\n                 }\n             ]\n         }\n         diskEncryptionConfiguration (Optional): {\n             targets (Optional): [\n                 String(osdisk/temporarydisk) (Optional)\n             ]\n         }\n         nodePlacementConfiguration (Optional): {\n             policy: String(regional/zonal) (Optional)\n         }\n         extensions (Optional): [\n              (Optional){\n                 name: String (Required)\n                 publisher: String (Required)\n                 type: String (Required)\n                 typeHandlerVersion: String (Optional)\n                 autoUpgradeMinorVersion: Boolean (Optional)\n                 enableAutomaticUpgrade: Boolean (Optional)\n                 settings (Optional): {\n                     String: String (Optional)\n                 }\n                 protectedSettings (Optional): {\n                     String: String (Optional)\n                 }\n                 provisionAfterExtensions (Optional): [\n                     String (Optional)\n                 ]\n             }\n         ]\n         osDisk (Optional): {\n             ephemeralOSDiskSettings (Optional): {\n                 placement: String(cachedisk) (Optional)\n             }\n         }\n     }\n     resizeTimeout: Duration (Optional)\n     targetDedicatedNodes: Integer (Optional)\n     targetLowPriorityNodes: Integer (Optional)\n     enableAutoScale: Boolean (Optional)\n     autoScaleFormula: String (Optional)\n     autoScaleEvaluationInterval: Duration (Optional)\n     enableInterNodeCommunication: Boolean (Optional)\n     networkConfiguration (Optional): {\n         subnetId: String (Optional)\n         dynamicVNetAssignmentScope: String(none/job) (Optional)\n         endpointConfiguration (Optional): {\n             inboundNATPools (Required): [\n                  (Required){\n                     name: String (Required)\n                     protocol: String(tcp/udp) (Required)\n                     backendPort: int (Required)\n                     frontendPortRangeStart: int (Required)\n                     frontendPortRangeEnd: int (Required)\n                     networkSecurityGroupRules (Optional): [\n                          (Optional){\n                             priority: int (Required)\n                             access: String(allow/deny) (Required)\n                             sourceAddressPrefix: String (Required)\n                             sourcePortRanges (Optional): [\n                                 String (Optional)\n                             ]\n                         }\n                     ]\n                 }\n             ]\n         }\n         publicIPAddressConfiguration (Optional): {\n             provision: String(batchmanaged/usermanaged/nopublicipaddresses) (Optional)\n             ipAddressIds (Optional): [\n                 String (Optional)\n             ]\n         }\n         enableAcceleratedNetworking: Boolean (Optional)\n     }\n     startTask (Optional): {\n         commandLine: String (Required)\n         containerSettings (Optional): {\n             containerRunOptions: String (Optional)\n             imageName: String (Required)\n             registry (Optional): (recursive schema, see registry above)\n             workingDirectory: String(taskWorkingDirectory/containerImageDefault) (Optional)\n         }\n         resourceFiles (Optional): [\n              (Optional){\n                 autoStorageContainerName: String (Optional)\n                 storageContainerUrl: String (Optional)\n                 httpUrl: String (Optional)\n                 blobPrefix: String (Optional)\n                 filePath: String (Optional)\n                 fileMode: String (Optional)\n                 identityReference (Optional): (recursive schema, see identityReference above)\n             }\n         ]\n         environmentSettings (Optional): [\n              (Optional){\n                 name: String (Required)\n                 value: String (Optional)\n             }\n         ]\n         userIdentity (Optional): {\n             username: String (Optional)\n             autoUser (Optional): {\n                 scope: String(task/pool) (Optional)\n                 elevationLevel: String(nonadmin/admin) (Optional)\n             }\n         }\n         maxTaskRetryCount: Integer (Optional)\n         waitForSuccess: Boolean (Optional)\n     }\n     applicationPackageReferences (Optional): [\n          (Optional){\n             applicationId: String (Required)\n             version: String (Optional)\n         }\n     ]\n     applicationLicenses (Optional): [\n         String (Optional)\n     ]\n     taskSlotsPerNode: Integer (Optional)\n     taskSchedulingPolicy (Optional): {\n         nodeFillType: String(spread/pack) (Required)\n     }\n     userAccounts (Optional): [\n          (Optional){\n             name: String (Required)\n             password: String (Required)\n             elevationLevel: String(nonadmin/admin) (Optional)\n             linuxUserConfiguration (Optional): {\n                 uid: Integer (Optional)\n                 gid: Integer (Optional)\n                 sshPrivateKey: String (Optional)\n             }\n             windowsUserConfiguration (Optional): {\n                 loginMode: String(batch/interactive) (Optional)\n             }\n         }\n     ]\n     metadata (Optional): [\n          (Optional){\n             name: String (Required)\n             value: String (Required)\n         }\n     ]\n     mountConfiguration (Optional): [\n          (Optional){\n             azureBlobFileSystemConfiguration (Optional): {\n                 accountName: String (Required)\n                 containerName: String (Required)\n                 accountKey: String (Optional)\n                 sasKey: String (Optional)\n                 blobfuseOptions: String (Optional)\n                 relativeMountPath: String (Required)\n                 identityReference (Optional): (recursive schema, see identityReference above)\n             }\n             nfsMountConfiguration (Optional): {\n                 source: String (Required)\n                 relativeMountPath: String (Required)\n                 mountOptions: String (Optional)\n             }\n             cifsMountConfiguration (Optional): {\n                 username: String (Required)\n                 source: String (Required)\n                 relativeMountPath: String (Required)\n                 mountOptions: String (Optional)\n                 password: String (Required)\n             }\n             azureFileShareConfiguration (Optional): {\n                 accountName: String (Required)\n                 azureFileUrl: String (Required)\n                 accountKey: String (Required)\n                 relativeMountPath: String (Required)\n                 mountOptions: String (Optional)\n             }\n         }\n     ]\n     targetNodeCommunicationMode: String(default/classic/simplified) (Optional)\n }\n```"
  returns:
    description: "the <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Void.html\">Void</a>&gt;"
- uid: "com.azure.compute.batch.BatchClient.createTask(java.lang.String,com.azure.compute.batch.models.BatchTaskCreateContent)"
  fullName: "com.azure.compute.batch.BatchClient.createTask(String jobId, BatchTaskCreateContent body)"
  name: "createTask(String jobId, BatchTaskCreateContent body)"
  nameWithType: "BatchClient.createTask(String jobId, BatchTaskCreateContent body)"
  summary: "Creates a Task to the specified Job."
  parameters:
  - description: "The ID of the Job to which the Task is to be created."
    name: "jobId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The Task to be created."
    name: "body"
    type: "<xref href=\"com.azure.compute.batch.models.BatchTaskCreateContent?alt=com.azure.compute.batch.models.BatchTaskCreateContent&text=BatchTaskCreateContent\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public void createTask(String jobId, BatchTaskCreateContent body)"
  desc: "Creates a Task to the specified Job.\n\nThe maximum lifetime of a Task from addition to completion is 180 days. If a Task has not completed within 180 days of being added it will be terminated by the Batch service and left in whatever state it was in at that time."
- uid: "com.azure.compute.batch.BatchClient.createTask(java.lang.String,com.azure.compute.batch.models.BatchTaskCreateContent,com.azure.compute.batch.models.CreateBatchTaskOptions)"
  fullName: "com.azure.compute.batch.BatchClient.createTask(String jobId, BatchTaskCreateContent body, CreateBatchTaskOptions options)"
  name: "createTask(String jobId, BatchTaskCreateContent body, CreateBatchTaskOptions options)"
  nameWithType: "BatchClient.createTask(String jobId, BatchTaskCreateContent body, CreateBatchTaskOptions options)"
  summary: "Creates a Task to the specified Job."
  parameters:
  - description: "The ID of the Job to which the Task is to be created."
    name: "jobId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The Task to be created."
    name: "body"
    type: "<xref href=\"com.azure.compute.batch.models.BatchTaskCreateContent?alt=com.azure.compute.batch.models.BatchTaskCreateContent&text=BatchTaskCreateContent\" data-throw-if-not-resolved=\"False\" />"
  - description: "A group containing optional parameters like timeOutInSeconds."
    name: "options"
    type: "<xref href=\"com.azure.compute.batch.models.CreateBatchTaskOptions?alt=com.azure.compute.batch.models.CreateBatchTaskOptions&text=CreateBatchTaskOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public void createTask(String jobId, BatchTaskCreateContent body, CreateBatchTaskOptions options)"
  desc: "Creates a Task to the specified Job.\n\nThe maximum lifetime of a Task from addition to completion is 180 days. If a Task has not completed within 180 days of being added it will be terminated by the Batch service and left in whatever state it was in at that time."
- uid: "com.azure.compute.batch.BatchClient.createTaskCollection(java.lang.String,com.azure.compute.batch.models.BatchTaskGroup)"
  fullName: "com.azure.compute.batch.BatchClient.createTaskCollection(String jobId, BatchTaskGroup collection)"
  name: "createTaskCollection(String jobId, BatchTaskGroup collection)"
  nameWithType: "BatchClient.createTaskCollection(String jobId, BatchTaskGroup collection)"
  summary: "Adds a collection of Tasks to the specified Job."
  parameters:
  - description: "The ID of the Job to which the Task collection is to be added."
    name: "jobId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The Tasks to be added."
    name: "collection"
    type: "<xref href=\"com.azure.compute.batch.models.BatchTaskGroup?alt=com.azure.compute.batch.models.BatchTaskGroup&text=BatchTaskGroup\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public BatchTaskAddCollectionResult createTaskCollection(String jobId, BatchTaskGroup collection)"
  desc: "Adds a collection of Tasks to the specified Job.\n\nNote that each Task must have a unique ID. The Batch service may not return the results for each Task in the same order the Tasks were submitted in this request. If the server times out or the connection is closed during the request, the request may have been partially or fully processed, or not at all. In such cases, the user should re-issue the request. Note that it is up to the user to correctly handle failures when re-issuing a request. For example, you should use the same Task IDs during a retry so that if the prior operation succeeded, the retry will not create extra Tasks unexpectedly. If the response contains any Tasks which failed to add, a client can retry the request. In a retry, it is most efficient to resubmit only Tasks that failed to add, and to omit Tasks that were successfully added on the first attempt. The maximum lifetime of a Task from addition to completion is 180 days. If a Task has not completed within 180 days of being added it will be terminated by the Batch service and left in whatever state it was in at that time."
  returns:
    description: "the result of adding a collection of Tasks to a Job."
    type: "<xref href=\"com.azure.compute.batch.models.BatchTaskAddCollectionResult?alt=com.azure.compute.batch.models.BatchTaskAddCollectionResult&text=BatchTaskAddCollectionResult\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.compute.batch.BatchClient.createTaskCollection(java.lang.String,com.azure.compute.batch.models.BatchTaskGroup,com.azure.compute.batch.models.CreateBatchTaskCollectionOptions)"
  fullName: "com.azure.compute.batch.BatchClient.createTaskCollection(String jobId, BatchTaskGroup collection, CreateBatchTaskCollectionOptions options)"
  name: "createTaskCollection(String jobId, BatchTaskGroup collection, CreateBatchTaskCollectionOptions options)"
  nameWithType: "BatchClient.createTaskCollection(String jobId, BatchTaskGroup collection, CreateBatchTaskCollectionOptions options)"
  summary: "Adds a collection of Tasks to the specified Job."
  parameters:
  - description: "The ID of the Job to which the Task collection is to be added."
    name: "jobId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The Tasks to be added."
    name: "collection"
    type: "<xref href=\"com.azure.compute.batch.models.BatchTaskGroup?alt=com.azure.compute.batch.models.BatchTaskGroup&text=BatchTaskGroup\" data-throw-if-not-resolved=\"False\" />"
  - description: "A group containing optional parameters like timeOutInSeconds."
    name: "options"
    type: "<xref href=\"com.azure.compute.batch.models.CreateBatchTaskCollectionOptions?alt=com.azure.compute.batch.models.CreateBatchTaskCollectionOptions&text=CreateBatchTaskCollectionOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public BatchTaskAddCollectionResult createTaskCollection(String jobId, BatchTaskGroup collection, CreateBatchTaskCollectionOptions options)"
  desc: "Adds a collection of Tasks to the specified Job.\n\nNote that each Task must have a unique ID. The Batch service may not return the results for each Task in the same order the Tasks were submitted in this request. If the server times out or the connection is closed during the request, the request may have been partially or fully processed, or not at all. In such cases, the user should re-issue the request. Note that it is up to the user to correctly handle failures when re-issuing a request. For example, you should use the same Task IDs during a retry so that if the prior operation succeeded, the retry will not create extra Tasks unexpectedly. If the response contains any Tasks which failed to add, a client can retry the request. In a retry, it is most efficient to resubmit only Tasks that failed to add, and to omit Tasks that were successfully added on the first attempt. The maximum lifetime of a Task from addition to completion is 180 days. If a Task has not completed within 180 days of being added it will be terminated by the Batch service and left in whatever state it was in at that time."
  returns:
    description: "the result of adding a collection of Tasks to a Job."
    type: "<xref href=\"com.azure.compute.batch.models.BatchTaskAddCollectionResult?alt=com.azure.compute.batch.models.BatchTaskAddCollectionResult&text=BatchTaskAddCollectionResult\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.compute.batch.BatchClient.createTaskCollectionWithResponse(java.lang.String,com.azure.core.util.BinaryData,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.compute.batch.BatchClient.createTaskCollectionWithResponse(String jobId, BinaryData taskCollection, RequestOptions requestOptions)"
  name: "createTaskCollectionWithResponse(String jobId, BinaryData taskCollection, RequestOptions requestOptions)"
  nameWithType: "BatchClient.createTaskCollectionWithResponse(String jobId, BinaryData taskCollection, RequestOptions requestOptions)"
  summary: "Adds a collection of Tasks to the specified Job."
  parameters:
  - description: "The ID of the Job to which the Task collection is to be added."
    name: "jobId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The Tasks to be added."
    name: "taskCollection"
    type: "<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<BinaryData> createTaskCollectionWithResponse(String jobId, BinaryData taskCollection, RequestOptions requestOptions)"
  desc: "Adds a collection of Tasks to the specified Job.\n\nNote that each Task must have a unique ID. The Batch service may not return the results for each Task in the same order the Tasks were submitted in this request. If the server times out or the connection is closed during the request, the request may have been partially or fully processed, or not at all. In such cases, the user should re-issue the request. Note that it is up to the user to correctly handle failures when re-issuing a request. For example, you should use the same Task IDs during a retry so that if the prior operation succeeded, the retry will not create extra Tasks unexpectedly. If the response contains any Tasks which failed to add, a client can retry the request. In a retry, it is most efficient to resubmit only Tasks that failed to add, and to omit Tasks that were successfully added on the first attempt. The maximum lifetime of a Task from addition to completion is 180 days. If a Task has not completed within 180 days of being added it will be terminated by the Batch service and left in whatever state it was in at that time.\n\n**Query Parameters**\n\n    | ------- | ------- | -------- | -------------------------------------------------------------------------------------------------------------- |\n    | Name    | Type    | Required | Description                                                                                                    |\n    | timeOut | Integer | No       | Sets the maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. |\n\nYou can add these to a request with <xref uid=\"com.azure.core.http.rest.RequestOptions.addQueryParam\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RequestOptions#addQueryParam\"></xref>\n\n**Request Body Schema**\n\n```java\n{\n     value (Required): [\n          (Required){\n             id: String (Required)\n             displayName: String (Optional)\n             exitConditions (Optional): {\n                 exitCodes (Optional): [\n                      (Optional){\n                         code: int (Required)\n                         exitOptions (Required): {\n                             jobAction: String(none/disable/terminate) (Optional)\n                             dependencyAction: String(satisfy/block) (Optional)\n                         }\n                     }\n                 ]\n                 exitCodeRanges (Optional): [\n                      (Optional){\n                         start: int (Required)\n                         end: int (Required)\n                         exitOptions (Required): (recursive schema, see exitOptions above)\n                     }\n                 ]\n                 preProcessingError (Optional): (recursive schema, see preProcessingError above)\n                 fileUploadError (Optional): (recursive schema, see fileUploadError above)\n                 default (Optional): (recursive schema, see default above)\n             }\n             commandLine: String (Required)\n             containerSettings (Optional): {\n                 containerRunOptions: String (Optional)\n                 imageName: String (Required)\n                 registry (Optional): {\n                     username: String (Optional)\n                     password: String (Optional)\n                     registryServer: String (Optional)\n                     identityReference (Optional): {\n                         resourceId: String (Optional)\n                     }\n                 }\n                 workingDirectory: String(taskWorkingDirectory/containerImageDefault) (Optional)\n             }\n             resourceFiles (Optional): [\n                  (Optional){\n                     autoStorageContainerName: String (Optional)\n                     storageContainerUrl: String (Optional)\n                     httpUrl: String (Optional)\n                     blobPrefix: String (Optional)\n                     filePath: String (Optional)\n                     fileMode: String (Optional)\n                     identityReference (Optional): (recursive schema, see identityReference above)\n                 }\n             ]\n             outputFiles (Optional): [\n                  (Optional){\n                     filePattern: String (Required)\n                     destination (Required): {\n                         container (Optional): {\n                             path: String (Optional)\n                             containerUrl: String (Required)\n                             identityReference (Optional): (recursive schema, see identityReference above)\n                             uploadHeaders (Optional): [\n                                  (Optional){\n                                     name: String (Required)\n                                     value: String (Optional)\n                                 }\n                             ]\n                         }\n                     }\n                     uploadOptions (Required): {\n                         uploadCondition: String(tasksuccess/taskfailure/taskcompletion) (Required)\n                     }\n                 }\n             ]\n             environmentSettings (Optional): [\n                  (Optional){\n                     name: String (Required)\n                     value: String (Optional)\n                 }\n             ]\n             affinityInfo (Optional): {\n                 affinityId: String (Required)\n             }\n             constraints (Optional): {\n                 maxWallClockTime: Duration (Optional)\n                 retentionTime: Duration (Optional)\n                 maxTaskRetryCount: Integer (Optional)\n             }\n             requiredSlots: Integer (Optional)\n             userIdentity (Optional): {\n                 username: String (Optional)\n                 autoUser (Optional): {\n                     scope: String(task/pool) (Optional)\n                     elevationLevel: String(nonadmin/admin) (Optional)\n                 }\n             }\n             multiInstanceSettings (Optional): {\n                 numberOfInstances: Integer (Optional)\n                 coordinationCommandLine: String (Required)\n                 commonResourceFiles (Optional): [\n                     (recursive schema, see above)\n                 ]\n             }\n             dependsOn (Optional): {\n                 taskIds (Optional): [\n                     String (Optional)\n                 ]\n                 taskIdRanges (Optional): [\n                      (Optional){\n                         start: int (Required)\n                         end: int (Required)\n                     }\n                 ]\n             }\n             applicationPackageReferences (Optional): [\n                  (Optional){\n                     applicationId: String (Required)\n                     version: String (Optional)\n                 }\n             ]\n             authenticationTokenSettings (Optional): {\n                 access (Optional): [\n                     String(job) (Optional)\n                 ]\n             }\n         }\n     ]\n }\n```\n\n**Response Body Schema**\n\n```java\n{\n     value (Optional): [\n          (Optional){\n             status: String(Success/clienterror/servererror) (Required)\n             taskId: String (Required)\n             eTag: String (Optional)\n             lastModified: OffsetDateTime (Optional)\n             location: String (Optional)\n             error (Optional): {\n                 code: String (Required)\n                 message (Optional): {\n                     lang: String (Optional)\n                     value: String (Optional)\n                 }\n                 values (Optional): [\n                      (Optional){\n                         key: String (Optional)\n                         value: String (Optional)\n                     }\n                 ]\n             }\n         }\n     ]\n }\n```"
  returns:
    description: "the result of adding a collection of Tasks to a Job along with <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.compute.batch.BatchClient.createTaskWithResponse(java.lang.String,com.azure.core.util.BinaryData,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.compute.batch.BatchClient.createTaskWithResponse(String jobId, BinaryData task, RequestOptions requestOptions)"
  name: "createTaskWithResponse(String jobId, BinaryData task, RequestOptions requestOptions)"
  nameWithType: "BatchClient.createTaskWithResponse(String jobId, BinaryData task, RequestOptions requestOptions)"
  summary: "Creates a Task to the specified Job."
  parameters:
  - description: "The ID of the Job to which the Task is to be created."
    name: "jobId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The Task to be created."
    name: "task"
    type: "<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<Void> createTaskWithResponse(String jobId, BinaryData task, RequestOptions requestOptions)"
  desc: "Creates a Task to the specified Job.\n\nThe maximum lifetime of a Task from addition to completion is 180 days. If a Task has not completed within 180 days of being added it will be terminated by the Batch service and left in whatever state it was in at that time.\n\n**Query Parameters**\n\n    | ------- | ------- | -------- | -------------------------------------------------------------------------------------------------------------- |\n    | Name    | Type    | Required | Description                                                                                                    |\n    | timeOut | Integer | No       | Sets the maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. |\n\nYou can add these to a request with <xref uid=\"com.azure.core.http.rest.RequestOptions.addQueryParam\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RequestOptions#addQueryParam\"></xref>\n\n**Request Body Schema**\n\n```java\n{\n     id: String (Required)\n     displayName: String (Optional)\n     exitConditions (Optional): {\n         exitCodes (Optional): [\n              (Optional){\n                 code: int (Required)\n                 exitOptions (Required): {\n                     jobAction: String(none/disable/terminate) (Optional)\n                     dependencyAction: String(satisfy/block) (Optional)\n                 }\n             }\n         ]\n         exitCodeRanges (Optional): [\n              (Optional){\n                 start: int (Required)\n                 end: int (Required)\n                 exitOptions (Required): (recursive schema, see exitOptions above)\n             }\n         ]\n         preProcessingError (Optional): (recursive schema, see preProcessingError above)\n         fileUploadError (Optional): (recursive schema, see fileUploadError above)\n         default (Optional): (recursive schema, see default above)\n     }\n     commandLine: String (Required)\n     containerSettings (Optional): {\n         containerRunOptions: String (Optional)\n         imageName: String (Required)\n         registry (Optional): {\n             username: String (Optional)\n             password: String (Optional)\n             registryServer: String (Optional)\n             identityReference (Optional): {\n                 resourceId: String (Optional)\n             }\n         }\n         workingDirectory: String(taskWorkingDirectory/containerImageDefault) (Optional)\n     }\n     resourceFiles (Optional): [\n          (Optional){\n             autoStorageContainerName: String (Optional)\n             storageContainerUrl: String (Optional)\n             httpUrl: String (Optional)\n             blobPrefix: String (Optional)\n             filePath: String (Optional)\n             fileMode: String (Optional)\n             identityReference (Optional): (recursive schema, see identityReference above)\n         }\n     ]\n     outputFiles (Optional): [\n          (Optional){\n             filePattern: String (Required)\n             destination (Required): {\n                 container (Optional): {\n                     path: String (Optional)\n                     containerUrl: String (Required)\n                     identityReference (Optional): (recursive schema, see identityReference above)\n                     uploadHeaders (Optional): [\n                          (Optional){\n                             name: String (Required)\n                             value: String (Optional)\n                         }\n                     ]\n                 }\n             }\n             uploadOptions (Required): {\n                 uploadCondition: String(tasksuccess/taskfailure/taskcompletion) (Required)\n             }\n         }\n     ]\n     environmentSettings (Optional): [\n          (Optional){\n             name: String (Required)\n             value: String (Optional)\n         }\n     ]\n     affinityInfo (Optional): {\n         affinityId: String (Required)\n     }\n     constraints (Optional): {\n         maxWallClockTime: Duration (Optional)\n         retentionTime: Duration (Optional)\n         maxTaskRetryCount: Integer (Optional)\n     }\n     requiredSlots: Integer (Optional)\n     userIdentity (Optional): {\n         username: String (Optional)\n         autoUser (Optional): {\n             scope: String(task/pool) (Optional)\n             elevationLevel: String(nonadmin/admin) (Optional)\n         }\n     }\n     multiInstanceSettings (Optional): {\n         numberOfInstances: Integer (Optional)\n         coordinationCommandLine: String (Required)\n         commonResourceFiles (Optional): [\n             (recursive schema, see above)\n         ]\n     }\n     dependsOn (Optional): {\n         taskIds (Optional): [\n             String (Optional)\n         ]\n         taskIdRanges (Optional): [\n              (Optional){\n                 start: int (Required)\n                 end: int (Required)\n             }\n         ]\n     }\n     applicationPackageReferences (Optional): [\n          (Optional){\n             applicationId: String (Required)\n             version: String (Optional)\n         }\n     ]\n     authenticationTokenSettings (Optional): {\n         access (Optional): [\n             String(job) (Optional)\n         ]\n     }\n }\n```"
  returns:
    description: "the <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Void.html\">Void</a>&gt;"
- uid: "com.azure.compute.batch.BatchClient.createTasks(java.lang.String,java.util.List<com.azure.compute.batch.models.BatchTaskCreateContent>)"
  fullName: "com.azure.compute.batch.BatchClient.createTasks(String jobId, List<BatchTaskCreateContent> taskList)"
  name: "createTasks(String jobId, List<BatchTaskCreateContent> taskList)"
  nameWithType: "BatchClient.createTasks(String jobId, List<BatchTaskCreateContent> taskList)"
  summary: "Adds multiple tasks to a job."
  parameters:
  - description: "The ID of the job to which to add the task."
    name: "jobId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "A list of <xref uid=\"com.azure.compute.batch.models.BatchTaskCreateContent\" data-throw-if-not-resolved=\"false\" data-raw-source=\"tasks\"></xref> to add."
    name: "taskList"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/List.html\">List</a>&lt;<xref href=\"com.azure.compute.batch.models.BatchTaskCreateContent?alt=com.azure.compute.batch.models.BatchTaskCreateContent&text=BatchTaskCreateContent\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public void createTasks(String jobId, List<BatchTaskCreateContent> taskList)"
  desc: "Adds multiple tasks to a job."
- uid: "com.azure.compute.batch.BatchClient.createTasks(java.lang.String,java.util.List<com.azure.compute.batch.models.BatchTaskCreateContent>,com.azure.compute.batch.models.BatchClientParallelOptions)"
  fullName: "com.azure.compute.batch.BatchClient.createTasks(String jobId, List<BatchTaskCreateContent> taskList, BatchClientParallelOptions batchClientParallelOptions)"
  name: "createTasks(String jobId, List<BatchTaskCreateContent> taskList, BatchClientParallelOptions batchClientParallelOptions)"
  nameWithType: "BatchClient.createTasks(String jobId, List<BatchTaskCreateContent> taskList, BatchClientParallelOptions batchClientParallelOptions)"
  summary: "Creates a collection of Tasks to the specified Job."
  parameters:
  - description: "The ID of the job to which to add the task."
    name: "jobId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "A list of <xref uid=\"com.azure.compute.batch.models.BatchTaskCreateContent\" data-throw-if-not-resolved=\"false\" data-raw-source=\"tasks\"></xref> to add."
    name: "taskList"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/List.html\">List</a>&lt;<xref href=\"com.azure.compute.batch.models.BatchTaskCreateContent?alt=com.azure.compute.batch.models.BatchTaskCreateContent&text=BatchTaskCreateContent\" data-throw-if-not-resolved=\"False\" />&gt;"
  - description: "Option that configure the parallelization of the method."
    name: "batchClientParallelOptions"
    type: "<xref href=\"com.azure.compute.batch.models.BatchClientParallelOptions?alt=com.azure.compute.batch.models.BatchClientParallelOptions&text=BatchClientParallelOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public void createTasks(String jobId, List<BatchTaskCreateContent> taskList, BatchClientParallelOptions batchClientParallelOptions)"
  desc: "Creates a collection of Tasks to the specified Job.\n\nNote that each Task must have a unique ID.This method can work with multiple threads. The parallel degree can be specified by the user. If the server times out or the connection is closed during the request, the request may have been partially or fully processed, or not at all. In such cases, the user should re-issue the request. Note that it is up to the user to correctly handle failures when re-issuing a request. For example, you should use the same Task IDs during a retry so that if the prior operation succeeded, the retry will not create extra Tasks unexpectedly. If the response contains any Tasks which failed to add, a client can retry the request. In a retry, it is most efficient to resubmit only Tasks that failed to add, and to omit Tasks that were successfully added on the first attempt. The maximum lifetime of a Task from addition to completion is 180 days. If a Task has not completed within 180 days of being added it will be terminated by the Batch service and left in whatever state it was in at that time."
- uid: "com.azure.compute.batch.BatchClient.deleteJob(java.lang.String)"
  fullName: "com.azure.compute.batch.BatchClient.deleteJob(String jobId)"
  name: "deleteJob(String jobId)"
  nameWithType: "BatchClient.deleteJob(String jobId)"
  summary: "Deletes a Job."
  parameters:
  - description: "The ID of the Job to delete."
    name: "jobId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public void deleteJob(String jobId)"
  desc: "Deletes a Job.\n\nDeleting a Job also deletes all Tasks that are part of that Job, and all Job statistics. This also overrides the retention period for Task data; that is, if the Job contains Tasks which are still retained on Compute Nodes, the Batch services deletes those Tasks' working directories and all their contents. When a Delete Job request is received, the Batch service sets the Job to the deleting state. All update operations on a Job that is in deleting state will fail with status code 409 (Conflict), with additional information indicating that the Job is being deleted."
- uid: "com.azure.compute.batch.BatchClient.deleteJob(java.lang.String,com.azure.compute.batch.models.DeleteBatchJobOptions)"
  fullName: "com.azure.compute.batch.BatchClient.deleteJob(String jobId, DeleteBatchJobOptions options)"
  name: "deleteJob(String jobId, DeleteBatchJobOptions options)"
  nameWithType: "BatchClient.deleteJob(String jobId, DeleteBatchJobOptions options)"
  summary: "Deletes a Job."
  parameters:
  - description: "The ID of the Job to delete."
    name: "jobId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "A group of optional parameters."
    name: "options"
    type: "<xref href=\"com.azure.compute.batch.models.DeleteBatchJobOptions?alt=com.azure.compute.batch.models.DeleteBatchJobOptions&text=DeleteBatchJobOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public void deleteJob(String jobId, DeleteBatchJobOptions options)"
  desc: "Deletes a Job.\n\nDeleting a Job also deletes all Tasks that are part of that Job, and all Job statistics. This also overrides the retention period for Task data; that is, if the Job contains Tasks which are still retained on Compute Nodes, the Batch services deletes those Tasks' working directories and all their contents. When a Delete Job request is received, the Batch service sets the Job to the deleting state. All update operations on a Job that is in deleting state will fail with status code 409 (Conflict), with additional information indicating that the Job is being deleted."
- uid: "com.azure.compute.batch.BatchClient.deleteJobSchedule(java.lang.String)"
  fullName: "com.azure.compute.batch.BatchClient.deleteJobSchedule(String jobScheduleId)"
  name: "deleteJobSchedule(String jobScheduleId)"
  nameWithType: "BatchClient.deleteJobSchedule(String jobScheduleId)"
  summary: "Deletes a Job Schedule from the specified Account."
  parameters:
  - description: "The ID of the Job Schedule to delete."
    name: "jobScheduleId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public void deleteJobSchedule(String jobScheduleId)"
  desc: "Deletes a Job Schedule from the specified Account.\n\nWhen you delete a Job Schedule, this also deletes all Jobs and Tasks under that schedule. When Tasks are deleted, all the files in their working directories on the Compute Nodes are also deleted (the retention period is ignored). The Job Schedule statistics are no longer accessible once the Job Schedule is deleted, though they are still counted towards Account lifetime statistics."
- uid: "com.azure.compute.batch.BatchClient.deleteJobSchedule(java.lang.String,com.azure.compute.batch.models.DeleteBatchJobScheduleOptions)"
  fullName: "com.azure.compute.batch.BatchClient.deleteJobSchedule(String jobScheduleId, DeleteBatchJobScheduleOptions options)"
  name: "deleteJobSchedule(String jobScheduleId, DeleteBatchJobScheduleOptions options)"
  nameWithType: "BatchClient.deleteJobSchedule(String jobScheduleId, DeleteBatchJobScheduleOptions options)"
  summary: "Deletes a Job Schedule from the specified Account."
  parameters:
  - description: "The ID of the Job Schedule to delete."
    name: "jobScheduleId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "A group of optional parameters containing timeOutInSeconds and requestConditions."
    name: "options"
    type: "<xref href=\"com.azure.compute.batch.models.DeleteBatchJobScheduleOptions?alt=com.azure.compute.batch.models.DeleteBatchJobScheduleOptions&text=DeleteBatchJobScheduleOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public void deleteJobSchedule(String jobScheduleId, DeleteBatchJobScheduleOptions options)"
  desc: "Deletes a Job Schedule from the specified Account.\n\nWhen you delete a Job Schedule, this also deletes all Jobs and Tasks under that schedule. When Tasks are deleted, all the files in their working directories on the Compute Nodes are also deleted (the retention period is ignored). The Job Schedule statistics are no longer accessible once the Job Schedule is deleted, though they are still counted towards Account lifetime statistics."
- uid: "com.azure.compute.batch.BatchClient.deleteJobScheduleWithResponse(java.lang.String,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.compute.batch.BatchClient.deleteJobScheduleWithResponse(String jobScheduleId, RequestOptions requestOptions)"
  name: "deleteJobScheduleWithResponse(String jobScheduleId, RequestOptions requestOptions)"
  nameWithType: "BatchClient.deleteJobScheduleWithResponse(String jobScheduleId, RequestOptions requestOptions)"
  summary: "Deletes a Job Schedule from the specified Account."
  parameters:
  - description: "The ID of the Job Schedule to delete."
    name: "jobScheduleId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<Void> deleteJobScheduleWithResponse(String jobScheduleId, RequestOptions requestOptions)"
  desc: "Deletes a Job Schedule from the specified Account.\n\nWhen you delete a Job Schedule, this also deletes all Jobs and Tasks under that schedule. When Tasks are deleted, all the files in their working directories on the Compute Nodes are also deleted (the retention period is ignored). The Job Schedule statistics are no longer accessible once the Job Schedule is deleted, though they are still counted towards Account lifetime statistics.\n\n**Query Parameters**\n\n    | ------- | ------- | -------- | -------------------------------------------------------------------------------------------------------------- |\n    | Name    | Type    | Required | Description                                                                                                    |\n    | timeOut | Integer | No       | Sets the maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. |\n\nYou can add these to a request with <xref uid=\"com.azure.core.http.rest.RequestOptions.addQueryParam\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RequestOptions#addQueryParam\"></xref>\n\n**Header Parameters**\n\n    | ------------------- | -------------- | -------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n    | Name                | Type           | Required | Description                                                                                                                                                                                                          |\n    | if-match            | String         | No       | An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service exactly matches the value specified by the client. |\n    | if-none-match       | String         | No       | An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service does not match the value specified by the client.  |\n    | if-modified-since   | OffsetDateTime | No       | A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has been modified since the specified time.                   |\n    | if-unmodified-since | OffsetDateTime | No       | A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has not been modified since the specified time.               |\n\nYou can add these to a request with <xref uid=\"com.azure.core.http.rest.RequestOptions.addHeader\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RequestOptions#addHeader\"></xref>"
  returns:
    description: "the <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Void.html\">Void</a>&gt;"
- uid: "com.azure.compute.batch.BatchClient.deleteJobWithResponse(java.lang.String,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.compute.batch.BatchClient.deleteJobWithResponse(String jobId, RequestOptions requestOptions)"
  name: "deleteJobWithResponse(String jobId, RequestOptions requestOptions)"
  nameWithType: "BatchClient.deleteJobWithResponse(String jobId, RequestOptions requestOptions)"
  summary: "Deletes a Job."
  parameters:
  - description: "The ID of the Job to delete."
    name: "jobId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<Void> deleteJobWithResponse(String jobId, RequestOptions requestOptions)"
  desc: "Deletes a Job.\n\nDeleting a Job also deletes all Tasks that are part of that Job, and all Job statistics. This also overrides the retention period for Task data; that is, if the Job contains Tasks which are still retained on Compute Nodes, the Batch services deletes those Tasks' working directories and all their contents. When a Delete Job request is received, the Batch service sets the Job to the deleting state. All update operations on a Job that is in deleting state will fail with status code 409 (Conflict), with additional information indicating that the Job is being deleted.\n\n**Query Parameters**\n\n    | ------- | ------- | -------- | -------------------------------------------------------------------------------------------------------------- |\n    | Name    | Type    | Required | Description                                                                                                    |\n    | timeOut | Integer | No       | Sets the maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. |\n\nYou can add these to a request with <xref uid=\"com.azure.core.http.rest.RequestOptions.addQueryParam\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RequestOptions#addQueryParam\"></xref>\n\n**Header Parameters**\n\n    | ------------------- | -------------- | -------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n    | Name                | Type           | Required | Description                                                                                                                                                                                                          |\n    | if-match            | String         | No       | An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service exactly matches the value specified by the client. |\n    | if-none-match       | String         | No       | An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service does not match the value specified by the client.  |\n    | if-modified-since   | OffsetDateTime | No       | A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has been modified since the specified time.                   |\n    | if-unmodified-since | OffsetDateTime | No       | A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has not been modified since the specified time.               |\n\nYou can add these to a request with <xref uid=\"com.azure.core.http.rest.RequestOptions.addHeader\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RequestOptions#addHeader\"></xref>"
  returns:
    description: "the <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Void.html\">Void</a>&gt;"
- uid: "com.azure.compute.batch.BatchClient.deleteNodeFile(java.lang.String,java.lang.String,java.lang.String)"
  fullName: "com.azure.compute.batch.BatchClient.deleteNodeFile(String poolId, String nodeId, String filePath)"
  name: "deleteNodeFile(String poolId, String nodeId, String filePath)"
  nameWithType: "BatchClient.deleteNodeFile(String poolId, String nodeId, String filePath)"
  summary: "Deletes the specified file from the Compute Node."
  parameters:
  - description: "The ID of the Pool that contains the Compute Node."
    name: "poolId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The ID of the Compute Node from which you want to delete the file."
    name: "nodeId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The path to the file or directory that you want to delete."
    name: "filePath"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public void deleteNodeFile(String poolId, String nodeId, String filePath)"
  desc: "Deletes the specified file from the Compute Node."
- uid: "com.azure.compute.batch.BatchClient.deleteNodeFile(java.lang.String,java.lang.String,java.lang.String,com.azure.compute.batch.models.DeleteBatchNodeFileOptions)"
  fullName: "com.azure.compute.batch.BatchClient.deleteNodeFile(String poolId, String nodeId, String filePath, DeleteBatchNodeFileOptions options)"
  name: "deleteNodeFile(String poolId, String nodeId, String filePath, DeleteBatchNodeFileOptions options)"
  nameWithType: "BatchClient.deleteNodeFile(String poolId, String nodeId, String filePath, DeleteBatchNodeFileOptions options)"
  summary: "Deletes the specified file from the Compute Node."
  parameters:
  - description: "The ID of the Pool that contains the Compute Node."
    name: "poolId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The ID of the Compute Node from which you want to delete the file."
    name: "nodeId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The path to the file or directory that you want to delete."
    name: "filePath"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "A group containing optional parameters like timeOutInSeconds and recursive."
    name: "options"
    type: "<xref href=\"com.azure.compute.batch.models.DeleteBatchNodeFileOptions?alt=com.azure.compute.batch.models.DeleteBatchNodeFileOptions&text=DeleteBatchNodeFileOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public void deleteNodeFile(String poolId, String nodeId, String filePath, DeleteBatchNodeFileOptions options)"
  desc: "Deletes the specified file from the Compute Node."
- uid: "com.azure.compute.batch.BatchClient.deleteNodeFileWithResponse(java.lang.String,java.lang.String,java.lang.String,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.compute.batch.BatchClient.deleteNodeFileWithResponse(String poolId, String nodeId, String filePath, RequestOptions requestOptions)"
  name: "deleteNodeFileWithResponse(String poolId, String nodeId, String filePath, RequestOptions requestOptions)"
  nameWithType: "BatchClient.deleteNodeFileWithResponse(String poolId, String nodeId, String filePath, RequestOptions requestOptions)"
  summary: "Deletes the specified file from the Compute Node."
  parameters:
  - description: "The ID of the Pool that contains the Compute Node."
    name: "poolId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The ID of the Compute Node from which you want to delete the file."
    name: "nodeId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The path to the file or directory that you want to delete."
    name: "filePath"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<Void> deleteNodeFileWithResponse(String poolId, String nodeId, String filePath, RequestOptions requestOptions)"
  desc: "Deletes the specified file from the Compute Node.\n\n**Query Parameters**\n\n    | --------- | ------- | -------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n    | Name      | Type    | Required | Description                                                                                                                                                                                                                                                                                       |\n    | timeOut   | Integer | No       | Sets the maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.                                                                                                                                                                                    |\n    | recursive | Boolean | No       | Whether to delete children of a directory. If the filePath parameter represents a directory instead of a file, you can set recursive to true to delete the directory and all of the files and subdirectories in it. If recursive is false then the directory must be empty or deletion will fail. |\n\nYou can add these to a request with <xref uid=\"com.azure.core.http.rest.RequestOptions.addQueryParam\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RequestOptions#addQueryParam\"></xref>"
  returns:
    description: "the <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Void.html\">Void</a>&gt;"
- uid: "com.azure.compute.batch.BatchClient.deleteNodeUser(java.lang.String,java.lang.String,java.lang.String)"
  fullName: "com.azure.compute.batch.BatchClient.deleteNodeUser(String poolId, String nodeId, String userName)"
  name: "deleteNodeUser(String poolId, String nodeId, String userName)"
  nameWithType: "BatchClient.deleteNodeUser(String poolId, String nodeId, String userName)"
  summary: "Deletes a user Account from the specified Compute Node."
  parameters:
  - description: "The ID of the Pool that contains the Compute Node."
    name: "poolId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The ID of the machine on which you want to delete a user Account."
    name: "nodeId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The name of the user Account to delete."
    name: "userName"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public void deleteNodeUser(String poolId, String nodeId, String userName)"
  desc: "Deletes a user Account from the specified Compute Node.\n\nYou can delete a user Account to a Compute Node only when it is in the idle or running state."
- uid: "com.azure.compute.batch.BatchClient.deleteNodeUser(java.lang.String,java.lang.String,java.lang.String,com.azure.compute.batch.models.DeleteBatchNodeUserOptions)"
  fullName: "com.azure.compute.batch.BatchClient.deleteNodeUser(String poolId, String nodeId, String userName, DeleteBatchNodeUserOptions options)"
  name: "deleteNodeUser(String poolId, String nodeId, String userName, DeleteBatchNodeUserOptions options)"
  nameWithType: "BatchClient.deleteNodeUser(String poolId, String nodeId, String userName, DeleteBatchNodeUserOptions options)"
  summary: "Deletes a user Account from the specified Compute Node."
  parameters:
  - description: "The ID of the Pool that contains the Compute Node."
    name: "poolId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The ID of the machine on which you want to delete a user Account."
    name: "nodeId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The name of the user Account to delete."
    name: "userName"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "A group containing optional parameters like timeOutInSeconds."
    name: "options"
    type: "<xref href=\"com.azure.compute.batch.models.DeleteBatchNodeUserOptions?alt=com.azure.compute.batch.models.DeleteBatchNodeUserOptions&text=DeleteBatchNodeUserOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public void deleteNodeUser(String poolId, String nodeId, String userName, DeleteBatchNodeUserOptions options)"
  desc: "Deletes a user Account from the specified Compute Node.\n\nYou can delete a user Account to a Compute Node only when it is in the idle or running state."
- uid: "com.azure.compute.batch.BatchClient.deleteNodeUserWithResponse(java.lang.String,java.lang.String,java.lang.String,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.compute.batch.BatchClient.deleteNodeUserWithResponse(String poolId, String nodeId, String userName, RequestOptions requestOptions)"
  name: "deleteNodeUserWithResponse(String poolId, String nodeId, String userName, RequestOptions requestOptions)"
  nameWithType: "BatchClient.deleteNodeUserWithResponse(String poolId, String nodeId, String userName, RequestOptions requestOptions)"
  summary: "Deletes a user Account from the specified Compute Node."
  parameters:
  - description: "The ID of the Pool that contains the Compute Node."
    name: "poolId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The ID of the machine on which you want to delete a user Account."
    name: "nodeId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The name of the user Account to delete."
    name: "userName"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<Void> deleteNodeUserWithResponse(String poolId, String nodeId, String userName, RequestOptions requestOptions)"
  desc: "Deletes a user Account from the specified Compute Node.\n\nYou can delete a user Account to a Compute Node only when it is in the idle or running state.\n\n**Query Parameters**\n\n    | ------- | ------- | -------- | -------------------------------------------------------------------------------------------------------------- |\n    | Name    | Type    | Required | Description                                                                                                    |\n    | timeOut | Integer | No       | Sets the maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. |\n\nYou can add these to a request with <xref uid=\"com.azure.core.http.rest.RequestOptions.addQueryParam\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RequestOptions#addQueryParam\"></xref>"
  returns:
    description: "the <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Void.html\">Void</a>&gt;"
- uid: "com.azure.compute.batch.BatchClient.deletePool(java.lang.String)"
  fullName: "com.azure.compute.batch.BatchClient.deletePool(String poolId)"
  name: "deletePool(String poolId)"
  nameWithType: "BatchClient.deletePool(String poolId)"
  summary: "Deletes a Pool from the specified Account using the options provided in options."
  parameters:
  - description: "The ID of the Pool to get."
    name: "poolId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public void deletePool(String poolId)"
  desc: "Deletes a Pool from the specified Account using the options provided in options."
- uid: "com.azure.compute.batch.BatchClient.deletePool(java.lang.String,com.azure.compute.batch.models.DeleteBatchPoolOptions)"
  fullName: "com.azure.compute.batch.BatchClient.deletePool(String poolId, DeleteBatchPoolOptions options)"
  name: "deletePool(String poolId, DeleteBatchPoolOptions options)"
  nameWithType: "BatchClient.deletePool(String poolId, DeleteBatchPoolOptions options)"
  summary: "Deletes a Pool from the specified Account using the options provided in options."
  parameters:
  - description: "The ID of the Pool to get."
    name: "poolId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "A group of optional parameters that includes requestConditions."
    name: "options"
    type: "<xref href=\"com.azure.compute.batch.models.DeleteBatchPoolOptions?alt=com.azure.compute.batch.models.DeleteBatchPoolOptions&text=DeleteBatchPoolOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public void deletePool(String poolId, DeleteBatchPoolOptions options)"
  desc: "Deletes a Pool from the specified Account using the options provided in options."
- uid: "com.azure.compute.batch.BatchClient.deletePoolWithResponse(java.lang.String,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.compute.batch.BatchClient.deletePoolWithResponse(String poolId, RequestOptions requestOptions)"
  name: "deletePoolWithResponse(String poolId, RequestOptions requestOptions)"
  nameWithType: "BatchClient.deletePoolWithResponse(String poolId, RequestOptions requestOptions)"
  summary: "Deletes a Pool from the specified Account."
  parameters:
  - description: "The ID of the Pool to get."
    name: "poolId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<Void> deletePoolWithResponse(String poolId, RequestOptions requestOptions)"
  desc: "Deletes a Pool from the specified Account.\n\nWhen you request that a Pool be deleted, the following actions occur: the Pool state is set to deleting; any ongoing resize operation on the Pool are stopped; the Batch service starts resizing the Pool to zero Compute Nodes; any Tasks running on existing Compute Nodes are terminated and requeued (as if a resize Pool operation had been requested with the default requeue option); finally, the Pool is removed from the system. Because running Tasks are requeued, the user can rerun these Tasks by updating their Job to target a different Pool. The Tasks can then run on the new Pool. If you want to override the requeue behavior, then you should call resize Pool explicitly to shrink the Pool to zero size before deleting the Pool. If you call an Update, Patch or Delete API on a Pool in the deleting state, it will fail with HTTP status code 409 with error code PoolBeingDeleted.\n\n**Query Parameters**\n\n    | ------- | ------- | -------- | -------------------------------------------------------------------------------------------------------------- |\n    | Name    | Type    | Required | Description                                                                                                    |\n    | timeOut | Integer | No       | Sets the maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. |\n\nYou can add these to a request with <xref uid=\"com.azure.core.http.rest.RequestOptions.addQueryParam\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RequestOptions#addQueryParam\"></xref>\n\n**Header Parameters**\n\n    | ------------------- | -------------- | -------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n    | Name                | Type           | Required | Description                                                                                                                                                                                                          |\n    | if-match            | String         | No       | An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service exactly matches the value specified by the client. |\n    | if-none-match       | String         | No       | An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service does not match the value specified by the client.  |\n    | if-modified-since   | OffsetDateTime | No       | A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has been modified since the specified time.                   |\n    | if-unmodified-since | OffsetDateTime | No       | A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has not been modified since the specified time.               |\n\nYou can add these to a request with <xref uid=\"com.azure.core.http.rest.RequestOptions.addHeader\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RequestOptions#addHeader\"></xref>"
  returns:
    description: "the <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Void.html\">Void</a>&gt;"
- uid: "com.azure.compute.batch.BatchClient.deleteTask(java.lang.String,java.lang.String)"
  fullName: "com.azure.compute.batch.BatchClient.deleteTask(String jobId, String taskId)"
  name: "deleteTask(String jobId, String taskId)"
  nameWithType: "BatchClient.deleteTask(String jobId, String taskId)"
  summary: "Deletes a Task from the specified Job."
  parameters:
  - description: "The ID of the Job from which to delete the Task."
    name: "jobId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The ID of the Task to delete."
    name: "taskId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public void deleteTask(String jobId, String taskId)"
  desc: "Deletes a Task from the specified Job.\n\nWhen a Task is deleted, all of the files in its directory on the Compute Node where it ran are also deleted (regardless of the retention time). For multi-instance Tasks, the delete Task operation applies synchronously to the primary task; subtasks and their files are then deleted asynchronously in the background."
- uid: "com.azure.compute.batch.BatchClient.deleteTask(java.lang.String,java.lang.String,com.azure.compute.batch.models.DeleteBatchTaskOptions)"
  fullName: "com.azure.compute.batch.BatchClient.deleteTask(String jobId, String taskId, DeleteBatchTaskOptions options)"
  name: "deleteTask(String jobId, String taskId, DeleteBatchTaskOptions options)"
  nameWithType: "BatchClient.deleteTask(String jobId, String taskId, DeleteBatchTaskOptions options)"
  summary: "Deletes a Task from the specified Job."
  parameters:
  - description: "The ID of the Job from which to delete the Task."
    name: "jobId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The ID of the Task to delete."
    name: "taskId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "A group containing optional parameters like timeOutInSeconds and requestConditions."
    name: "options"
    type: "<xref href=\"com.azure.compute.batch.models.DeleteBatchTaskOptions?alt=com.azure.compute.batch.models.DeleteBatchTaskOptions&text=DeleteBatchTaskOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public void deleteTask(String jobId, String taskId, DeleteBatchTaskOptions options)"
  desc: "Deletes a Task from the specified Job.\n\nWhen a Task is deleted, all of the files in its directory on the Compute Node where it ran are also deleted (regardless of the retention time). For multi-instance Tasks, the delete Task operation applies synchronously to the primary task; subtasks and their files are then deleted asynchronously in the background."
- uid: "com.azure.compute.batch.BatchClient.deleteTaskFile(java.lang.String,java.lang.String,java.lang.String)"
  fullName: "com.azure.compute.batch.BatchClient.deleteTaskFile(String jobId, String taskId, String filePath)"
  name: "deleteTaskFile(String jobId, String taskId, String filePath)"
  nameWithType: "BatchClient.deleteTaskFile(String jobId, String taskId, String filePath)"
  summary: "Deletes the specified Task file from the Compute Node where the Task ran."
  parameters:
  - description: "The ID of the Job that contains the Task."
    name: "jobId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The ID of the Task whose file you want to retrieve."
    name: "taskId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The path to the Task file that you want to get the content of."
    name: "filePath"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public void deleteTaskFile(String jobId, String taskId, String filePath)"
  desc: "Deletes the specified Task file from the Compute Node where the Task ran."
- uid: "com.azure.compute.batch.BatchClient.deleteTaskFile(java.lang.String,java.lang.String,java.lang.String,com.azure.compute.batch.models.DeleteBatchTaskFileOptions)"
  fullName: "com.azure.compute.batch.BatchClient.deleteTaskFile(String jobId, String taskId, String filePath, DeleteBatchTaskFileOptions options)"
  name: "deleteTaskFile(String jobId, String taskId, String filePath, DeleteBatchTaskFileOptions options)"
  nameWithType: "BatchClient.deleteTaskFile(String jobId, String taskId, String filePath, DeleteBatchTaskFileOptions options)"
  summary: "Deletes the specified Task file from the Compute Node where the Task ran."
  parameters:
  - description: "The ID of the Job that contains the Task."
    name: "jobId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The ID of the Task whose file you want to retrieve."
    name: "taskId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The path to the Task file that you want to get the content of."
    name: "filePath"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "A group containing optional parameters like timeOutInSeconds and recursive."
    name: "options"
    type: "<xref href=\"com.azure.compute.batch.models.DeleteBatchTaskFileOptions?alt=com.azure.compute.batch.models.DeleteBatchTaskFileOptions&text=DeleteBatchTaskFileOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public void deleteTaskFile(String jobId, String taskId, String filePath, DeleteBatchTaskFileOptions options)"
  desc: "Deletes the specified Task file from the Compute Node where the Task ran."
- uid: "com.azure.compute.batch.BatchClient.deleteTaskFileWithResponse(java.lang.String,java.lang.String,java.lang.String,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.compute.batch.BatchClient.deleteTaskFileWithResponse(String jobId, String taskId, String filePath, RequestOptions requestOptions)"
  name: "deleteTaskFileWithResponse(String jobId, String taskId, String filePath, RequestOptions requestOptions)"
  nameWithType: "BatchClient.deleteTaskFileWithResponse(String jobId, String taskId, String filePath, RequestOptions requestOptions)"
  summary: "Deletes the specified Task file from the Compute Node where the Task ran."
  parameters:
  - description: "The ID of the Job that contains the Task."
    name: "jobId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The ID of the Task whose file you want to retrieve."
    name: "taskId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The path to the Task file that you want to get the content of."
    name: "filePath"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<Void> deleteTaskFileWithResponse(String jobId, String taskId, String filePath, RequestOptions requestOptions)"
  desc: "Deletes the specified Task file from the Compute Node where the Task ran.\n\n**Query Parameters**\n\n    | --------- | ------- | -------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n    | Name      | Type    | Required | Description                                                                                                                                                                                                                                                                                       |\n    | timeOut   | Integer | No       | Sets the maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.                                                                                                                                                                                    |\n    | recursive | Boolean | No       | Whether to delete children of a directory. If the filePath parameter represents a directory instead of a file, you can set recursive to true to delete the directory and all of the files and subdirectories in it. If recursive is false then the directory must be empty or deletion will fail. |\n\nYou can add these to a request with <xref uid=\"com.azure.core.http.rest.RequestOptions.addQueryParam\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RequestOptions#addQueryParam\"></xref>"
  returns:
    description: "the <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Void.html\">Void</a>&gt;"
- uid: "com.azure.compute.batch.BatchClient.deleteTaskWithResponse(java.lang.String,java.lang.String,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.compute.batch.BatchClient.deleteTaskWithResponse(String jobId, String taskId, RequestOptions requestOptions)"
  name: "deleteTaskWithResponse(String jobId, String taskId, RequestOptions requestOptions)"
  nameWithType: "BatchClient.deleteTaskWithResponse(String jobId, String taskId, RequestOptions requestOptions)"
  summary: "Deletes a Task from the specified Job."
  parameters:
  - description: "The ID of the Job from which to delete the Task."
    name: "jobId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The ID of the Task to delete."
    name: "taskId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<Void> deleteTaskWithResponse(String jobId, String taskId, RequestOptions requestOptions)"
  desc: "Deletes a Task from the specified Job.\n\nWhen a Task is deleted, all of the files in its directory on the Compute Node where it ran are also deleted (regardless of the retention time). For multi-instance Tasks, the delete Task operation applies synchronously to the primary task; subtasks and their files are then deleted asynchronously in the background.\n\n**Query Parameters**\n\n    | ------- | ------- | -------- | -------------------------------------------------------------------------------------------------------------- |\n    | Name    | Type    | Required | Description                                                                                                    |\n    | timeOut | Integer | No       | Sets the maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. |\n\nYou can add these to a request with <xref uid=\"com.azure.core.http.rest.RequestOptions.addQueryParam\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RequestOptions#addQueryParam\"></xref>\n\n**Header Parameters**\n\n    | ------------------- | -------------- | -------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n    | Name                | Type           | Required | Description                                                                                                                                                                                                          |\n    | if-match            | String         | No       | An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service exactly matches the value specified by the client. |\n    | if-none-match       | String         | No       | An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service does not match the value specified by the client.  |\n    | if-modified-since   | OffsetDateTime | No       | A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has been modified since the specified time.                   |\n    | if-unmodified-since | OffsetDateTime | No       | A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has not been modified since the specified time.               |\n\nYou can add these to a request with <xref uid=\"com.azure.core.http.rest.RequestOptions.addHeader\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RequestOptions#addHeader\"></xref>"
  returns:
    description: "the <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Void.html\">Void</a>&gt;"
- uid: "com.azure.compute.batch.BatchClient.disableJob(java.lang.String,com.azure.compute.batch.models.BatchJobDisableContent)"
  fullName: "com.azure.compute.batch.BatchClient.disableJob(String jobId, BatchJobDisableContent body)"
  name: "disableJob(String jobId, BatchJobDisableContent body)"
  nameWithType: "BatchClient.disableJob(String jobId, BatchJobDisableContent body)"
  summary: "Disables the specified Job, preventing new Tasks from running."
  parameters:
  - description: "The ID of the Job to disable."
    name: "jobId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The options to use for disabling the Job."
    name: "body"
    type: "<xref href=\"com.azure.compute.batch.models.BatchJobDisableContent?alt=com.azure.compute.batch.models.BatchJobDisableContent&text=BatchJobDisableContent\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public void disableJob(String jobId, BatchJobDisableContent body)"
  desc: "Disables the specified Job, preventing new Tasks from running.\n\nThe Batch Service immediately moves the Job to the disabling state. Batch then uses the disableTasks parameter to determine what to do with the currently running Tasks of the Job. The Job remains in the disabling state until the disable operation is completed and all Tasks have been dealt with according to the disableTasks option; the Job then moves to the disabled state. No new Tasks are started under the Job until it moves back to active state. If you try to disable a Job that is in any state other than active, disabling, or disabled, the request fails with status code 409."
- uid: "com.azure.compute.batch.BatchClient.disableJob(java.lang.String,com.azure.compute.batch.models.BatchJobDisableContent,com.azure.compute.batch.models.DisableBatchJobOptions)"
  fullName: "com.azure.compute.batch.BatchClient.disableJob(String jobId, BatchJobDisableContent body, DisableBatchJobOptions options)"
  name: "disableJob(String jobId, BatchJobDisableContent body, DisableBatchJobOptions options)"
  nameWithType: "BatchClient.disableJob(String jobId, BatchJobDisableContent body, DisableBatchJobOptions options)"
  summary: "Disables the specified Job, preventing new Tasks from running."
  parameters:
  - description: "The ID of the Job to disable."
    name: "jobId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The options to use for disabling the Job."
    name: "body"
    type: "<xref href=\"com.azure.compute.batch.models.BatchJobDisableContent?alt=com.azure.compute.batch.models.BatchJobDisableContent&text=BatchJobDisableContent\" data-throw-if-not-resolved=\"False\" />"
  - description: "A group of optional parameters containing timeOutInSeconds and requestConditions."
    name: "options"
    type: "<xref href=\"com.azure.compute.batch.models.DisableBatchJobOptions?alt=com.azure.compute.batch.models.DisableBatchJobOptions&text=DisableBatchJobOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public void disableJob(String jobId, BatchJobDisableContent body, DisableBatchJobOptions options)"
  desc: "Disables the specified Job, preventing new Tasks from running.\n\nThe Batch Service immediately moves the Job to the disabling state. Batch then uses the disableTasks parameter to determine what to do with the currently running Tasks of the Job. The Job remains in the disabling state until the disable operation is completed and all Tasks have been dealt with according to the disableTasks option; the Job then moves to the disabled state. No new Tasks are started under the Job until it moves back to active state. If you try to disable a Job that is in any state other than active, disabling, or disabled, the request fails with status code 409."
- uid: "com.azure.compute.batch.BatchClient.disableJobSchedule(java.lang.String)"
  fullName: "com.azure.compute.batch.BatchClient.disableJobSchedule(String jobScheduleId)"
  name: "disableJobSchedule(String jobScheduleId)"
  nameWithType: "BatchClient.disableJobSchedule(String jobScheduleId)"
  summary: "Disables a Job Schedule."
  parameters:
  - description: "The ID of the Job Schedule to disable."
    name: "jobScheduleId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public void disableJobSchedule(String jobScheduleId)"
  desc: "Disables a Job Schedule.\n\nNo new Jobs will be created until the Job Schedule is enabled again."
- uid: "com.azure.compute.batch.BatchClient.disableJobSchedule(java.lang.String,com.azure.compute.batch.models.DisableBatchJobScheduleOptions)"
  fullName: "com.azure.compute.batch.BatchClient.disableJobSchedule(String jobScheduleId, DisableBatchJobScheduleOptions options)"
  name: "disableJobSchedule(String jobScheduleId, DisableBatchJobScheduleOptions options)"
  nameWithType: "BatchClient.disableJobSchedule(String jobScheduleId, DisableBatchJobScheduleOptions options)"
  summary: "Disables a Job Schedule."
  parameters:
  - description: "The ID of the Job Schedule to disable."
    name: "jobScheduleId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "A group containing optional parameters like timeOutInSeconds and requestConditions."
    name: "options"
    type: "<xref href=\"com.azure.compute.batch.models.DisableBatchJobScheduleOptions?alt=com.azure.compute.batch.models.DisableBatchJobScheduleOptions&text=DisableBatchJobScheduleOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public void disableJobSchedule(String jobScheduleId, DisableBatchJobScheduleOptions options)"
  desc: "Disables a Job Schedule.\n\nNo new Jobs will be created until the Job Schedule is enabled again."
- uid: "com.azure.compute.batch.BatchClient.disableJobScheduleWithResponse(java.lang.String,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.compute.batch.BatchClient.disableJobScheduleWithResponse(String jobScheduleId, RequestOptions requestOptions)"
  name: "disableJobScheduleWithResponse(String jobScheduleId, RequestOptions requestOptions)"
  nameWithType: "BatchClient.disableJobScheduleWithResponse(String jobScheduleId, RequestOptions requestOptions)"
  summary: "Disables a Job Schedule."
  parameters:
  - description: "The ID of the Job Schedule to disable."
    name: "jobScheduleId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<Void> disableJobScheduleWithResponse(String jobScheduleId, RequestOptions requestOptions)"
  desc: "Disables a Job Schedule.\n\nNo new Jobs will be created until the Job Schedule is enabled again.\n\n**Query Parameters**\n\n    | ------- | ------- | -------- | -------------------------------------------------------------------------------------------------------------- |\n    | Name    | Type    | Required | Description                                                                                                    |\n    | timeOut | Integer | No       | Sets the maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. |\n\nYou can add these to a request with <xref uid=\"com.azure.core.http.rest.RequestOptions.addQueryParam\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RequestOptions#addQueryParam\"></xref>\n\n**Header Parameters**\n\n    | ------------------- | -------------- | -------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n    | Name                | Type           | Required | Description                                                                                                                                                                                                          |\n    | if-match            | String         | No       | An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service exactly matches the value specified by the client. |\n    | if-none-match       | String         | No       | An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service does not match the value specified by the client.  |\n    | if-modified-since   | OffsetDateTime | No       | A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has been modified since the specified time.                   |\n    | if-unmodified-since | OffsetDateTime | No       | A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has not been modified since the specified time.               |\n\nYou can add these to a request with <xref uid=\"com.azure.core.http.rest.RequestOptions.addHeader\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RequestOptions#addHeader\"></xref>"
  returns:
    description: "the <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Void.html\">Void</a>&gt;"
- uid: "com.azure.compute.batch.BatchClient.disableJobWithResponse(java.lang.String,com.azure.core.util.BinaryData,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.compute.batch.BatchClient.disableJobWithResponse(String jobId, BinaryData parameters, RequestOptions requestOptions)"
  name: "disableJobWithResponse(String jobId, BinaryData parameters, RequestOptions requestOptions)"
  nameWithType: "BatchClient.disableJobWithResponse(String jobId, BinaryData parameters, RequestOptions requestOptions)"
  summary: "Disables the specified Job, preventing new Tasks from running."
  parameters:
  - description: "The ID of the Job to disable."
    name: "jobId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The options to use for disabling the Job."
    name: "parameters"
    type: "<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<Void> disableJobWithResponse(String jobId, BinaryData parameters, RequestOptions requestOptions)"
  desc: "Disables the specified Job, preventing new Tasks from running.\n\nThe Batch Service immediately moves the Job to the disabling state. Batch then uses the disableTasks parameter to determine what to do with the currently running Tasks of the Job. The Job remains in the disabling state until the disable operation is completed and all Tasks have been dealt with according to the disableTasks option; the Job then moves to the disabled state. No new Tasks are started under the Job until it moves back to active state. If you try to disable a Job that is in any state other than active, disabling, or disabled, the request fails with status code 409.\n\n**Query Parameters**\n\n    | ------- | ------- | -------- | -------------------------------------------------------------------------------------------------------------- |\n    | Name    | Type    | Required | Description                                                                                                    |\n    | timeOut | Integer | No       | Sets the maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. |\n\nYou can add these to a request with <xref uid=\"com.azure.core.http.rest.RequestOptions.addQueryParam\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RequestOptions#addQueryParam\"></xref>\n\n**Header Parameters**\n\n    | ------------------- | -------------- | -------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n    | Name                | Type           | Required | Description                                                                                                                                                                                                          |\n    | if-match            | String         | No       | An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service exactly matches the value specified by the client. |\n    | if-none-match       | String         | No       | An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service does not match the value specified by the client.  |\n    | if-modified-since   | OffsetDateTime | No       | A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has been modified since the specified time.                   |\n    | if-unmodified-since | OffsetDateTime | No       | A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has not been modified since the specified time.               |\n\nYou can add these to a request with <xref uid=\"com.azure.core.http.rest.RequestOptions.addHeader\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RequestOptions#addHeader\"></xref>\n\n**Request Body Schema**\n\n```java\n{\n     disableTasks: String(requeue/terminate/wait) (Required)\n }\n```"
  returns:
    description: "the <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Void.html\">Void</a>&gt;"
- uid: "com.azure.compute.batch.BatchClient.disableNodeScheduling(java.lang.String,java.lang.String)"
  fullName: "com.azure.compute.batch.BatchClient.disableNodeScheduling(String poolId, String nodeId)"
  name: "disableNodeScheduling(String poolId, String nodeId)"
  nameWithType: "BatchClient.disableNodeScheduling(String poolId, String nodeId)"
  summary: "Disables Task scheduling on the specified Compute Node."
  parameters:
  - description: "The ID of the Pool that contains the Compute Node."
    name: "poolId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The ID of the Compute Node on which you want to disable Task scheduling."
    name: "nodeId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public void disableNodeScheduling(String poolId, String nodeId)"
  desc: "Disables Task scheduling on the specified Compute Node.\n\nYou can disable Task scheduling on a Compute Node only if its current scheduling state is enabled."
- uid: "com.azure.compute.batch.BatchClient.disableNodeScheduling(java.lang.String,java.lang.String,com.azure.compute.batch.models.DisableBatchNodeSchedulingOptions,com.azure.compute.batch.models.BatchNodeDisableSchedulingContent)"
  fullName: "com.azure.compute.batch.BatchClient.disableNodeScheduling(String poolId, String nodeId, DisableBatchNodeSchedulingOptions options, BatchNodeDisableSchedulingContent body)"
  name: "disableNodeScheduling(String poolId, String nodeId, DisableBatchNodeSchedulingOptions options, BatchNodeDisableSchedulingContent body)"
  nameWithType: "BatchClient.disableNodeScheduling(String poolId, String nodeId, DisableBatchNodeSchedulingOptions options, BatchNodeDisableSchedulingContent body)"
  summary: "Disables Task scheduling on the specified Compute Node."
  parameters:
  - description: "The ID of the Pool that contains the Compute Node."
    name: "poolId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The ID of the Compute Node on which you want to disable Task scheduling."
    name: "nodeId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "A group containing optional parameters like timeOutInSeconds."
    name: "options"
    type: "<xref href=\"com.azure.compute.batch.models.DisableBatchNodeSchedulingOptions?alt=com.azure.compute.batch.models.DisableBatchNodeSchedulingOptions&text=DisableBatchNodeSchedulingOptions\" data-throw-if-not-resolved=\"False\" />"
  - description: "The options to use for disabling scheduling on the Compute Node."
    name: "body"
    type: "<xref href=\"com.azure.compute.batch.models.BatchNodeDisableSchedulingContent?alt=com.azure.compute.batch.models.BatchNodeDisableSchedulingContent&text=BatchNodeDisableSchedulingContent\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public void disableNodeScheduling(String poolId, String nodeId, DisableBatchNodeSchedulingOptions options, BatchNodeDisableSchedulingContent body)"
  desc: "Disables Task scheduling on the specified Compute Node.\n\nYou can disable Task scheduling on a Compute Node only if its current scheduling state is enabled."
- uid: "com.azure.compute.batch.BatchClient.disableNodeSchedulingWithResponse(java.lang.String,java.lang.String,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.compute.batch.BatchClient.disableNodeSchedulingWithResponse(String poolId, String nodeId, RequestOptions requestOptions)"
  name: "disableNodeSchedulingWithResponse(String poolId, String nodeId, RequestOptions requestOptions)"
  nameWithType: "BatchClient.disableNodeSchedulingWithResponse(String poolId, String nodeId, RequestOptions requestOptions)"
  summary: "Disables Task scheduling on the specified Compute Node."
  parameters:
  - description: "The ID of the Pool that contains the Compute Node."
    name: "poolId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The ID of the Compute Node on which you want to disable Task scheduling."
    name: "nodeId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<Void> disableNodeSchedulingWithResponse(String poolId, String nodeId, RequestOptions requestOptions)"
  desc: "Disables Task scheduling on the specified Compute Node.\n\nYou can disable Task scheduling on a Compute Node only if its current scheduling state is enabled.\n\n**Query Parameters**\n\n    | ------- | ------- | -------- | -------------------------------------------------------------------------------------------------------------- |\n    | Name    | Type    | Required | Description                                                                                                    |\n    | timeOut | Integer | No       | Sets the maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. |\n\nYou can add these to a request with <xref uid=\"com.azure.core.http.rest.RequestOptions.addQueryParam\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RequestOptions#addQueryParam\"></xref>\n\n**Request Body Schema**\n\n```java\n{\n     nodeDisableSchedulingOption: String(requeue/terminate/taskcompletion) (Optional)\n }\n```"
  returns:
    description: "the <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Void.html\">Void</a>&gt;"
- uid: "com.azure.compute.batch.BatchClient.disablePoolAutoScale(java.lang.String)"
  fullName: "com.azure.compute.batch.BatchClient.disablePoolAutoScale(String poolId)"
  name: "disablePoolAutoScale(String poolId)"
  nameWithType: "BatchClient.disablePoolAutoScale(String poolId)"
  summary: "Disables automatic scaling for a Pool using the options provided in options."
  parameters:
  - description: "The ID of the Pool on which to disable automatic scaling."
    name: "poolId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public void disablePoolAutoScale(String poolId)"
  desc: "Disables automatic scaling for a Pool using the options provided in options."
- uid: "com.azure.compute.batch.BatchClient.disablePoolAutoScale(java.lang.String,com.azure.compute.batch.models.DisableBatchPoolAutoScaleOptions)"
  fullName: "com.azure.compute.batch.BatchClient.disablePoolAutoScale(String poolId, DisableBatchPoolAutoScaleOptions options)"
  name: "disablePoolAutoScale(String poolId, DisableBatchPoolAutoScaleOptions options)"
  nameWithType: "BatchClient.disablePoolAutoScale(String poolId, DisableBatchPoolAutoScaleOptions options)"
  summary: "Disables automatic scaling for a Pool using the options provided in options."
  parameters:
  - description: "The ID of the Pool on which to disable automatic scaling."
    name: "poolId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "A group of optional parameters that includes timeOutInSeconds."
    name: "options"
    type: "<xref href=\"com.azure.compute.batch.models.DisableBatchPoolAutoScaleOptions?alt=com.azure.compute.batch.models.DisableBatchPoolAutoScaleOptions&text=DisableBatchPoolAutoScaleOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public void disablePoolAutoScale(String poolId, DisableBatchPoolAutoScaleOptions options)"
  desc: "Disables automatic scaling for a Pool using the options provided in options."
- uid: "com.azure.compute.batch.BatchClient.disablePoolAutoScaleWithResponse(java.lang.String,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.compute.batch.BatchClient.disablePoolAutoScaleWithResponse(String poolId, RequestOptions requestOptions)"
  name: "disablePoolAutoScaleWithResponse(String poolId, RequestOptions requestOptions)"
  nameWithType: "BatchClient.disablePoolAutoScaleWithResponse(String poolId, RequestOptions requestOptions)"
  summary: "Disables automatic scaling for a Pool."
  parameters:
  - description: "The ID of the Pool on which to disable automatic scaling."
    name: "poolId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<Void> disablePoolAutoScaleWithResponse(String poolId, RequestOptions requestOptions)"
  desc: "Disables automatic scaling for a Pool.\n\n**Query Parameters**\n\n    | ------- | ------- | -------- | -------------------------------------------------------------------------------------------------------------- |\n    | Name    | Type    | Required | Description                                                                                                    |\n    | timeOut | Integer | No       | Sets the maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. |\n\nYou can add these to a request with <xref uid=\"com.azure.core.http.rest.RequestOptions.addQueryParam\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RequestOptions#addQueryParam\"></xref>"
  returns:
    description: "the <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Void.html\">Void</a>&gt;"
- uid: "com.azure.compute.batch.BatchClient.enableJob(java.lang.String)"
  fullName: "com.azure.compute.batch.BatchClient.enableJob(String jobId)"
  name: "enableJob(String jobId)"
  nameWithType: "BatchClient.enableJob(String jobId)"
  summary: "Enables the specified Job, allowing new Tasks to run."
  parameters:
  - description: "The ID of the Job to enable."
    name: "jobId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public void enableJob(String jobId)"
  desc: "Enables the specified Job, allowing new Tasks to run.\n\nWhen you call this API, the Batch service sets a disabled Job to the enabling state. After the this operation is completed, the Job moves to the active state, and scheduling of new Tasks under the Job resumes. The Batch service does not allow a Task to remain in the active state for more than 180 days. Therefore, if you enable a Job containing active Tasks which were added more than 180 days ago, those Tasks will not run."
- uid: "com.azure.compute.batch.BatchClient.enableJob(java.lang.String,com.azure.compute.batch.models.EnableBatchJobOptions)"
  fullName: "com.azure.compute.batch.BatchClient.enableJob(String jobId, EnableBatchJobOptions options)"
  name: "enableJob(String jobId, EnableBatchJobOptions options)"
  nameWithType: "BatchClient.enableJob(String jobId, EnableBatchJobOptions options)"
  summary: "Enables the specified Job, allowing new Tasks to run."
  parameters:
  - description: "The ID of the Job to enable."
    name: "jobId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "A group of optional parameters containing timeOutInSeconds and requestConditions."
    name: "options"
    type: "<xref href=\"com.azure.compute.batch.models.EnableBatchJobOptions?alt=com.azure.compute.batch.models.EnableBatchJobOptions&text=EnableBatchJobOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public void enableJob(String jobId, EnableBatchJobOptions options)"
  desc: "Enables the specified Job, allowing new Tasks to run.\n\nWhen you call this API, the Batch service sets a disabled Job to the enabling state. After the this operation is completed, the Job moves to the active state, and scheduling of new Tasks under the Job resumes. The Batch service does not allow a Task to remain in the active state for more than 180 days. Therefore, if you enable a Job containing active Tasks which were added more than 180 days ago, those Tasks will not run."
- uid: "com.azure.compute.batch.BatchClient.enableJobSchedule(java.lang.String)"
  fullName: "com.azure.compute.batch.BatchClient.enableJobSchedule(String jobScheduleId)"
  name: "enableJobSchedule(String jobScheduleId)"
  nameWithType: "BatchClient.enableJobSchedule(String jobScheduleId)"
  summary: "Enables a Job Schedule."
  parameters:
  - description: "The ID of the Job Schedule to enable."
    name: "jobScheduleId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public void enableJobSchedule(String jobScheduleId)"
  desc: "Enables a Job Schedule."
- uid: "com.azure.compute.batch.BatchClient.enableJobSchedule(java.lang.String,com.azure.compute.batch.models.EnableBatchJobScheduleOptions)"
  fullName: "com.azure.compute.batch.BatchClient.enableJobSchedule(String jobScheduleId, EnableBatchJobScheduleOptions options)"
  name: "enableJobSchedule(String jobScheduleId, EnableBatchJobScheduleOptions options)"
  nameWithType: "BatchClient.enableJobSchedule(String jobScheduleId, EnableBatchJobScheduleOptions options)"
  summary: "Enables a Job Schedule."
  parameters:
  - description: "The ID of the Job Schedule to enable."
    name: "jobScheduleId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "A group containing optional parameters like timeOutInSeconds and requestConditions."
    name: "options"
    type: "<xref href=\"com.azure.compute.batch.models.EnableBatchJobScheduleOptions?alt=com.azure.compute.batch.models.EnableBatchJobScheduleOptions&text=EnableBatchJobScheduleOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public void enableJobSchedule(String jobScheduleId, EnableBatchJobScheduleOptions options)"
  desc: "Enables a Job Schedule."
- uid: "com.azure.compute.batch.BatchClient.enableJobScheduleWithResponse(java.lang.String,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.compute.batch.BatchClient.enableJobScheduleWithResponse(String jobScheduleId, RequestOptions requestOptions)"
  name: "enableJobScheduleWithResponse(String jobScheduleId, RequestOptions requestOptions)"
  nameWithType: "BatchClient.enableJobScheduleWithResponse(String jobScheduleId, RequestOptions requestOptions)"
  summary: "Enables a Job Schedule."
  parameters:
  - description: "The ID of the Job Schedule to enable."
    name: "jobScheduleId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<Void> enableJobScheduleWithResponse(String jobScheduleId, RequestOptions requestOptions)"
  desc: "Enables a Job Schedule.\n\n**Query Parameters**\n\n    | ------- | ------- | -------- | -------------------------------------------------------------------------------------------------------------- |\n    | Name    | Type    | Required | Description                                                                                                    |\n    | timeOut | Integer | No       | Sets the maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. |\n\nYou can add these to a request with <xref uid=\"com.azure.core.http.rest.RequestOptions.addQueryParam\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RequestOptions#addQueryParam\"></xref>\n\n**Header Parameters**\n\n    | ------------------- | -------------- | -------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n    | Name                | Type           | Required | Description                                                                                                                                                                                                          |\n    | if-match            | String         | No       | An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service exactly matches the value specified by the client. |\n    | if-none-match       | String         | No       | An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service does not match the value specified by the client.  |\n    | if-modified-since   | OffsetDateTime | No       | A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has been modified since the specified time.                   |\n    | if-unmodified-since | OffsetDateTime | No       | A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has not been modified since the specified time.               |\n\nYou can add these to a request with <xref uid=\"com.azure.core.http.rest.RequestOptions.addHeader\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RequestOptions#addHeader\"></xref>"
  returns:
    description: "the <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Void.html\">Void</a>&gt;"
- uid: "com.azure.compute.batch.BatchClient.enableJobWithResponse(java.lang.String,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.compute.batch.BatchClient.enableJobWithResponse(String jobId, RequestOptions requestOptions)"
  name: "enableJobWithResponse(String jobId, RequestOptions requestOptions)"
  nameWithType: "BatchClient.enableJobWithResponse(String jobId, RequestOptions requestOptions)"
  summary: "Enables the specified Job, allowing new Tasks to run."
  parameters:
  - description: "The ID of the Job to enable."
    name: "jobId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<Void> enableJobWithResponse(String jobId, RequestOptions requestOptions)"
  desc: "Enables the specified Job, allowing new Tasks to run.\n\nWhen you call this API, the Batch service sets a disabled Job to the enabling state. After the this operation is completed, the Job moves to the active state, and scheduling of new Tasks under the Job resumes. The Batch service does not allow a Task to remain in the active state for more than 180 days. Therefore, if you enable a Job containing active Tasks which were added more than 180 days ago, those Tasks will not run.\n\n**Query Parameters**\n\n    | ------- | ------- | -------- | -------------------------------------------------------------------------------------------------------------- |\n    | Name    | Type    | Required | Description                                                                                                    |\n    | timeOut | Integer | No       | Sets the maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. |\n\nYou can add these to a request with <xref uid=\"com.azure.core.http.rest.RequestOptions.addQueryParam\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RequestOptions#addQueryParam\"></xref>\n\n**Header Parameters**\n\n    | ------------------- | -------------- | -------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n    | Name                | Type           | Required | Description                                                                                                                                                                                                          |\n    | if-match            | String         | No       | An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service exactly matches the value specified by the client. |\n    | if-none-match       | String         | No       | An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service does not match the value specified by the client.  |\n    | if-modified-since   | OffsetDateTime | No       | A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has been modified since the specified time.                   |\n    | if-unmodified-since | OffsetDateTime | No       | A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has not been modified since the specified time.               |\n\nYou can add these to a request with <xref uid=\"com.azure.core.http.rest.RequestOptions.addHeader\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RequestOptions#addHeader\"></xref>"
  returns:
    description: "the <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Void.html\">Void</a>&gt;"
- uid: "com.azure.compute.batch.BatchClient.enableNodeScheduling(java.lang.String,java.lang.String)"
  fullName: "com.azure.compute.batch.BatchClient.enableNodeScheduling(String poolId, String nodeId)"
  name: "enableNodeScheduling(String poolId, String nodeId)"
  nameWithType: "BatchClient.enableNodeScheduling(String poolId, String nodeId)"
  summary: "Enables Task scheduling on the specified Compute Node."
  parameters:
  - description: "The ID of the Pool that contains the Compute Node."
    name: "poolId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The ID of the Compute Node on which you want to enable Task scheduling."
    name: "nodeId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public void enableNodeScheduling(String poolId, String nodeId)"
  desc: "Enables Task scheduling on the specified Compute Node.\n\nYou can enable Task scheduling on a Compute Node only if its current scheduling state is disabled."
- uid: "com.azure.compute.batch.BatchClient.enableNodeScheduling(java.lang.String,java.lang.String,com.azure.compute.batch.models.EnableBatchNodeSchedulingOptions)"
  fullName: "com.azure.compute.batch.BatchClient.enableNodeScheduling(String poolId, String nodeId, EnableBatchNodeSchedulingOptions options)"
  name: "enableNodeScheduling(String poolId, String nodeId, EnableBatchNodeSchedulingOptions options)"
  nameWithType: "BatchClient.enableNodeScheduling(String poolId, String nodeId, EnableBatchNodeSchedulingOptions options)"
  summary: "Enables Task scheduling on the specified Compute Node."
  parameters:
  - description: "The ID of the Pool that contains the Compute Node."
    name: "poolId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The ID of the Compute Node on which you want to enable Task scheduling."
    name: "nodeId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "A group containing optional parameters like timeOutInSeconds."
    name: "options"
    type: "<xref href=\"com.azure.compute.batch.models.EnableBatchNodeSchedulingOptions?alt=com.azure.compute.batch.models.EnableBatchNodeSchedulingOptions&text=EnableBatchNodeSchedulingOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public void enableNodeScheduling(String poolId, String nodeId, EnableBatchNodeSchedulingOptions options)"
  desc: "Enables Task scheduling on the specified Compute Node.\n\nYou can enable Task scheduling on a Compute Node only if its current scheduling state is disabled."
- uid: "com.azure.compute.batch.BatchClient.enableNodeSchedulingWithResponse(java.lang.String,java.lang.String,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.compute.batch.BatchClient.enableNodeSchedulingWithResponse(String poolId, String nodeId, RequestOptions requestOptions)"
  name: "enableNodeSchedulingWithResponse(String poolId, String nodeId, RequestOptions requestOptions)"
  nameWithType: "BatchClient.enableNodeSchedulingWithResponse(String poolId, String nodeId, RequestOptions requestOptions)"
  summary: "Enables Task scheduling on the specified Compute Node."
  parameters:
  - description: "The ID of the Pool that contains the Compute Node."
    name: "poolId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The ID of the Compute Node on which you want to enable Task scheduling."
    name: "nodeId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<Void> enableNodeSchedulingWithResponse(String poolId, String nodeId, RequestOptions requestOptions)"
  desc: "Enables Task scheduling on the specified Compute Node.\n\nYou can enable Task scheduling on a Compute Node only if its current scheduling state is disabled.\n\n**Query Parameters**\n\n    | ------- | ------- | -------- | -------------------------------------------------------------------------------------------------------------- |\n    | Name    | Type    | Required | Description                                                                                                    |\n    | timeOut | Integer | No       | Sets the maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. |\n\nYou can add these to a request with <xref uid=\"com.azure.core.http.rest.RequestOptions.addQueryParam\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RequestOptions#addQueryParam\"></xref>"
  returns:
    description: "the <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Void.html\">Void</a>&gt;"
- uid: "com.azure.compute.batch.BatchClient.enablePoolAutoScale(java.lang.String,com.azure.compute.batch.models.BatchPoolEnableAutoScaleContent)"
  fullName: "com.azure.compute.batch.BatchClient.enablePoolAutoScale(String poolId, BatchPoolEnableAutoScaleContent body)"
  name: "enablePoolAutoScale(String poolId, BatchPoolEnableAutoScaleContent body)"
  nameWithType: "BatchClient.enablePoolAutoScale(String poolId, BatchPoolEnableAutoScaleContent body)"
  summary: "Enables automatic scaling for a Pool using the options provided in options."
  parameters:
  - description: "The ID of the Pool to get."
    name: "poolId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The options to use for enabling automatic scaling."
    name: "body"
    type: "<xref href=\"com.azure.compute.batch.models.BatchPoolEnableAutoScaleContent?alt=com.azure.compute.batch.models.BatchPoolEnableAutoScaleContent&text=BatchPoolEnableAutoScaleContent\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public void enablePoolAutoScale(String poolId, BatchPoolEnableAutoScaleContent body)"
  desc: "Enables automatic scaling for a Pool using the options provided in options.\n\nYou cannot enable automatic scaling on a Pool if a resize operation is in progress on the Pool. If automatic scaling of the Pool is currently disabled, you must specify a valid autoscale formula as part of the request. If automatic scaling of the Pool is already enabled, you may specify a new autoscale formula and/or a new evaluation interval. You cannot call this API for the same Pool more than once every 30 seconds."
- uid: "com.azure.compute.batch.BatchClient.enablePoolAutoScale(java.lang.String,com.azure.compute.batch.models.BatchPoolEnableAutoScaleContent,com.azure.compute.batch.models.EnableBatchPoolAutoScaleOptions)"
  fullName: "com.azure.compute.batch.BatchClient.enablePoolAutoScale(String poolId, BatchPoolEnableAutoScaleContent body, EnableBatchPoolAutoScaleOptions options)"
  name: "enablePoolAutoScale(String poolId, BatchPoolEnableAutoScaleContent body, EnableBatchPoolAutoScaleOptions options)"
  nameWithType: "BatchClient.enablePoolAutoScale(String poolId, BatchPoolEnableAutoScaleContent body, EnableBatchPoolAutoScaleOptions options)"
  summary: "Enables automatic scaling for a Pool using the options provided in options."
  parameters:
  - description: "The ID of the Pool to get."
    name: "poolId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The options to use for enabling automatic scaling."
    name: "body"
    type: "<xref href=\"com.azure.compute.batch.models.BatchPoolEnableAutoScaleContent?alt=com.azure.compute.batch.models.BatchPoolEnableAutoScaleContent&text=BatchPoolEnableAutoScaleContent\" data-throw-if-not-resolved=\"False\" />"
  - description: "A group of optional parameters."
    name: "options"
    type: "<xref href=\"com.azure.compute.batch.models.EnableBatchPoolAutoScaleOptions?alt=com.azure.compute.batch.models.EnableBatchPoolAutoScaleOptions&text=EnableBatchPoolAutoScaleOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public void enablePoolAutoScale(String poolId, BatchPoolEnableAutoScaleContent body, EnableBatchPoolAutoScaleOptions options)"
  desc: "Enables automatic scaling for a Pool using the options provided in options.\n\nYou cannot enable automatic scaling on a Pool if a resize operation is in progress on the Pool. If automatic scaling of the Pool is currently disabled, you must specify a valid autoscale formula as part of the request. If automatic scaling of the Pool is already enabled, you may specify a new autoscale formula and/or a new evaluation interval. You cannot call this API for the same Pool more than once every 30 seconds."
- uid: "com.azure.compute.batch.BatchClient.enablePoolAutoScaleWithResponse(java.lang.String,com.azure.core.util.BinaryData,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.compute.batch.BatchClient.enablePoolAutoScaleWithResponse(String poolId, BinaryData parameters, RequestOptions requestOptions)"
  name: "enablePoolAutoScaleWithResponse(String poolId, BinaryData parameters, RequestOptions requestOptions)"
  nameWithType: "BatchClient.enablePoolAutoScaleWithResponse(String poolId, BinaryData parameters, RequestOptions requestOptions)"
  summary: "Enables automatic scaling for a Pool."
  parameters:
  - description: "The ID of the Pool to get."
    name: "poolId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The options to use for enabling automatic scaling."
    name: "parameters"
    type: "<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<Void> enablePoolAutoScaleWithResponse(String poolId, BinaryData parameters, RequestOptions requestOptions)"
  desc: "Enables automatic scaling for a Pool.\n\nYou cannot enable automatic scaling on a Pool if a resize operation is in progress on the Pool. If automatic scaling of the Pool is currently disabled, you must specify a valid autoscale formula as part of the request. If automatic scaling of the Pool is already enabled, you may specify a new autoscale formula and/or a new evaluation interval. You cannot call this API for the same Pool more than once every 30 seconds.\n\n**Query Parameters**\n\n    | ------- | ------- | -------- | -------------------------------------------------------------------------------------------------------------- |\n    | Name    | Type    | Required | Description                                                                                                    |\n    | timeOut | Integer | No       | Sets the maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. |\n\nYou can add these to a request with <xref uid=\"com.azure.core.http.rest.RequestOptions.addQueryParam\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RequestOptions#addQueryParam\"></xref>\n\n**Header Parameters**\n\n    | ------------------- | -------------- | -------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n    | Name                | Type           | Required | Description                                                                                                                                                                                                          |\n    | if-match            | String         | No       | An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service exactly matches the value specified by the client. |\n    | if-none-match       | String         | No       | An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service does not match the value specified by the client.  |\n    | if-modified-since   | OffsetDateTime | No       | A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has been modified since the specified time.                   |\n    | if-unmodified-since | OffsetDateTime | No       | A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has not been modified since the specified time.               |\n\nYou can add these to a request with <xref uid=\"com.azure.core.http.rest.RequestOptions.addHeader\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RequestOptions#addHeader\"></xref>\n\n**Request Body Schema**\n\n```java\n{\n     autoScaleFormula: String (Optional)\n     autoScaleEvaluationInterval: Duration (Optional)\n }\n```"
  returns:
    description: "the <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Void.html\">Void</a>&gt;"
- uid: "com.azure.compute.batch.BatchClient.evaluatePoolAutoScale(java.lang.String,com.azure.compute.batch.models.BatchPoolEvaluateAutoScaleContent)"
  fullName: "com.azure.compute.batch.BatchClient.evaluatePoolAutoScale(String poolId, BatchPoolEvaluateAutoScaleContent body)"
  name: "evaluatePoolAutoScale(String poolId, BatchPoolEvaluateAutoScaleContent body)"
  nameWithType: "BatchClient.evaluatePoolAutoScale(String poolId, BatchPoolEvaluateAutoScaleContent body)"
  summary: "Gets the result of evaluating an automatic scaling formula on the Pool using the options provided in options."
  parameters:
  - description: "The ID of the Pool on which to evaluate the automatic scaling formula."
    name: "poolId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The options to use for evaluating the automatic scaling formula."
    name: "body"
    type: "<xref href=\"com.azure.compute.batch.models.BatchPoolEvaluateAutoScaleContent?alt=com.azure.compute.batch.models.BatchPoolEvaluateAutoScaleContent&text=BatchPoolEvaluateAutoScaleContent\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public AutoScaleRun evaluatePoolAutoScale(String poolId, BatchPoolEvaluateAutoScaleContent body)"
  desc: "Gets the result of evaluating an automatic scaling formula on the Pool using the options provided in options.\n\nThis API is primarily for validating an autoscale formula, as it simply returns the result without applying the formula to the Pool. The Pool must have auto scaling enabled in order to evaluate a formula."
  returns:
    description: "the results and errors from an execution of a Pool autoscale formula."
    type: "<xref href=\"com.azure.compute.batch.models.AutoScaleRun?alt=com.azure.compute.batch.models.AutoScaleRun&text=AutoScaleRun\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.compute.batch.BatchClient.evaluatePoolAutoScale(java.lang.String,com.azure.compute.batch.models.BatchPoolEvaluateAutoScaleContent,com.azure.compute.batch.models.EvaluateBatchPoolAutoScaleOptions)"
  fullName: "com.azure.compute.batch.BatchClient.evaluatePoolAutoScale(String poolId, BatchPoolEvaluateAutoScaleContent body, EvaluateBatchPoolAutoScaleOptions options)"
  name: "evaluatePoolAutoScale(String poolId, BatchPoolEvaluateAutoScaleContent body, EvaluateBatchPoolAutoScaleOptions options)"
  nameWithType: "BatchClient.evaluatePoolAutoScale(String poolId, BatchPoolEvaluateAutoScaleContent body, EvaluateBatchPoolAutoScaleOptions options)"
  summary: "Gets the result of evaluating an automatic scaling formula on the Pool using the options provided in options."
  parameters:
  - description: "The ID of the Pool on which to evaluate the automatic scaling formula."
    name: "poolId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The options to use for evaluating the automatic scaling formula."
    name: "body"
    type: "<xref href=\"com.azure.compute.batch.models.BatchPoolEvaluateAutoScaleContent?alt=com.azure.compute.batch.models.BatchPoolEvaluateAutoScaleContent&text=BatchPoolEvaluateAutoScaleContent\" data-throw-if-not-resolved=\"False\" />"
  - description: "A group of optional parameters."
    name: "options"
    type: "<xref href=\"com.azure.compute.batch.models.EvaluateBatchPoolAutoScaleOptions?alt=com.azure.compute.batch.models.EvaluateBatchPoolAutoScaleOptions&text=EvaluateBatchPoolAutoScaleOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public AutoScaleRun evaluatePoolAutoScale(String poolId, BatchPoolEvaluateAutoScaleContent body, EvaluateBatchPoolAutoScaleOptions options)"
  desc: "Gets the result of evaluating an automatic scaling formula on the Pool using the options provided in options.\n\nThis API is primarily for validating an autoscale formula, as it simply returns the result without applying the formula to the Pool. The Pool must have auto scaling enabled in order to evaluate a formula."
  returns:
    description: "the results and errors from an execution of a Pool autoscale formula."
    type: "<xref href=\"com.azure.compute.batch.models.AutoScaleRun?alt=com.azure.compute.batch.models.AutoScaleRun&text=AutoScaleRun\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.compute.batch.BatchClient.evaluatePoolAutoScaleWithResponse(java.lang.String,com.azure.core.util.BinaryData,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.compute.batch.BatchClient.evaluatePoolAutoScaleWithResponse(String poolId, BinaryData parameters, RequestOptions requestOptions)"
  name: "evaluatePoolAutoScaleWithResponse(String poolId, BinaryData parameters, RequestOptions requestOptions)"
  nameWithType: "BatchClient.evaluatePoolAutoScaleWithResponse(String poolId, BinaryData parameters, RequestOptions requestOptions)"
  summary: "Gets the result of evaluating an automatic scaling formula on the Pool."
  parameters:
  - description: "The ID of the Pool on which to evaluate the automatic scaling formula."
    name: "poolId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The options to use for evaluating the automatic scaling formula."
    name: "parameters"
    type: "<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<BinaryData> evaluatePoolAutoScaleWithResponse(String poolId, BinaryData parameters, RequestOptions requestOptions)"
  desc: "Gets the result of evaluating an automatic scaling formula on the Pool.\n\nThis API is primarily for validating an autoscale formula, as it simply returns the result without applying the formula to the Pool. The Pool must have auto scaling enabled in order to evaluate a formula.\n\n**Query Parameters**\n\n    | ------- | ------- | -------- | -------------------------------------------------------------------------------------------------------------- |\n    | Name    | Type    | Required | Description                                                                                                    |\n    | timeOut | Integer | No       | Sets the maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. |\n\nYou can add these to a request with <xref uid=\"com.azure.core.http.rest.RequestOptions.addQueryParam\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RequestOptions#addQueryParam\"></xref>\n\n**Request Body Schema**\n\n```java\n{\n     autoScaleFormula: String (Required)\n }\n```\n\n**Response Body Schema**\n\n```java\n{\n     timestamp: OffsetDateTime (Required)\n     results: String (Optional)\n     error (Optional): {\n         code: String (Optional)\n         message: String (Optional)\n         values (Optional): [\n              (Optional){\n                 name: String (Optional)\n                 value: String (Optional)\n             }\n         ]\n     }\n }\n```"
  returns:
    description: "the results and errors from an execution of a Pool autoscale formula along with <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.compute.batch.BatchClient.getApplication(java.lang.String)"
  fullName: "com.azure.compute.batch.BatchClient.getApplication(String applicationId)"
  name: "getApplication(String applicationId)"
  nameWithType: "BatchClient.getApplication(String applicationId)"
  summary: "Gets information about the specified Application."
  parameters:
  - description: "The ID of the Application."
    name: "applicationId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public BatchApplication getApplication(String applicationId)"
  desc: "Gets information about the specified Application.\n\nThis operation returns only Applications and versions that are available for use on Compute Nodes; that is, that can be used in a Package reference. For administrator information about Applications and versions that are not yet available to Compute Nodes, use the Azure portal or the Azure Resource Manager API."
  returns:
    description: "contains information about an application in an Azure Batch Account."
    type: "<xref href=\"com.azure.compute.batch.models.BatchApplication?alt=com.azure.compute.batch.models.BatchApplication&text=BatchApplication\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.compute.batch.BatchClient.getApplication(java.lang.String,com.azure.compute.batch.models.GetApplicationOptions)"
  fullName: "com.azure.compute.batch.BatchClient.getApplication(String applicationId, GetApplicationOptions options)"
  name: "getApplication(String applicationId, GetApplicationOptions options)"
  nameWithType: "BatchClient.getApplication(String applicationId, GetApplicationOptions options)"
  summary: "Gets information about the specified Application."
  parameters:
  - description: "The ID of the Application."
    name: "applicationId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "A group of optional parameters that includes timeOutInSeconds."
    name: "options"
    type: "<xref href=\"com.azure.compute.batch.models.GetApplicationOptions?alt=com.azure.compute.batch.models.GetApplicationOptions&text=GetApplicationOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public BatchApplication getApplication(String applicationId, GetApplicationOptions options)"
  desc: "Gets information about the specified Application.\n\nThis operation returns only Applications and versions that are available for use on Compute Nodes; that is, that can be used in a Package reference. For administrator information about Applications and versions that are not yet available to Compute Nodes, use the Azure portal or the Azure Resource Manager API."
  returns:
    description: "contains information about an application in an Azure Batch Account."
    type: "<xref href=\"com.azure.compute.batch.models.BatchApplication?alt=com.azure.compute.batch.models.BatchApplication&text=BatchApplication\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.compute.batch.BatchClient.getApplicationWithResponse(java.lang.String,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.compute.batch.BatchClient.getApplicationWithResponse(String applicationId, RequestOptions requestOptions)"
  name: "getApplicationWithResponse(String applicationId, RequestOptions requestOptions)"
  nameWithType: "BatchClient.getApplicationWithResponse(String applicationId, RequestOptions requestOptions)"
  summary: "Gets information about the specified Application."
  parameters:
  - description: "The ID of the Application."
    name: "applicationId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<BinaryData> getApplicationWithResponse(String applicationId, RequestOptions requestOptions)"
  desc: "Gets information about the specified Application.\n\nThis operation returns only Applications and versions that are available for use on Compute Nodes; that is, that can be used in an Package reference. For administrator information about Applications and versions that are not yet available to Compute Nodes, use the Azure portal or the Azure Resource Manager API.\n\n**Query Parameters**\n\n    | ------- | ------- | -------- | -------------------------------------------------------------------------------------------------------------- |\n    | Name    | Type    | Required | Description                                                                                                    |\n    | timeOut | Integer | No       | Sets the maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. |\n\nYou can add these to a request with <xref uid=\"com.azure.core.http.rest.RequestOptions.addQueryParam\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RequestOptions#addQueryParam\"></xref>\n\n**Response Body Schema**\n\n```java\n{\n     id: String (Required)\n     displayName: String (Required)\n     versions (Required): [\n         String (Required)\n     ]\n }\n```"
  returns:
    description: "contains information about an application in an Azure Batch Account along with <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.compute.batch.BatchClient.getJob(java.lang.String)"
  fullName: "com.azure.compute.batch.BatchClient.getJob(String jobId)"
  name: "getJob(String jobId)"
  nameWithType: "BatchClient.getJob(String jobId)"
  summary: "Gets information about the specified Job."
  parameters:
  - description: "The ID of the Job to delete."
    name: "jobId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public BatchJob getJob(String jobId)"
  desc: "Gets information about the specified Job."
  returns:
    description: "information about the specified Job."
    type: "<xref href=\"com.azure.compute.batch.models.BatchJob?alt=com.azure.compute.batch.models.BatchJob&text=BatchJob\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.compute.batch.BatchClient.getJob(java.lang.String,com.azure.compute.batch.models.GetBatchJobOptions)"
  fullName: "com.azure.compute.batch.BatchClient.getJob(String jobId, GetBatchJobOptions options)"
  name: "getJob(String jobId, GetBatchJobOptions options)"
  nameWithType: "BatchClient.getJob(String jobId, GetBatchJobOptions options)"
  summary: "Gets information about the specified Job."
  parameters:
  - description: "The ID of the Job to delete."
    name: "jobId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "A group of optional parameters."
    name: "options"
    type: "<xref href=\"com.azure.compute.batch.models.GetBatchJobOptions?alt=com.azure.compute.batch.models.GetBatchJobOptions&text=GetBatchJobOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public BatchJob getJob(String jobId, GetBatchJobOptions options)"
  desc: "Gets information about the specified Job."
  returns:
    description: "information about the specified Job."
    type: "<xref href=\"com.azure.compute.batch.models.BatchJob?alt=com.azure.compute.batch.models.BatchJob&text=BatchJob\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.compute.batch.BatchClient.getJobSchedule(java.lang.String)"
  fullName: "com.azure.compute.batch.BatchClient.getJobSchedule(String jobScheduleId)"
  name: "getJobSchedule(String jobScheduleId)"
  nameWithType: "BatchClient.getJobSchedule(String jobScheduleId)"
  summary: "Gets information about the specified Job Schedule."
  parameters:
  - description: "The ID of the Job Schedule to get."
    name: "jobScheduleId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public BatchJobSchedule getJobSchedule(String jobScheduleId)"
  desc: "Gets information about the specified Job Schedule."
  returns:
    description: "information about the specified Job Schedule."
    type: "<xref href=\"com.azure.compute.batch.models.BatchJobSchedule?alt=com.azure.compute.batch.models.BatchJobSchedule&text=BatchJobSchedule\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.compute.batch.BatchClient.getJobSchedule(java.lang.String,com.azure.compute.batch.models.GetBatchJobScheduleOptions)"
  fullName: "com.azure.compute.batch.BatchClient.getJobSchedule(String jobScheduleId, GetBatchJobScheduleOptions options)"
  name: "getJobSchedule(String jobScheduleId, GetBatchJobScheduleOptions options)"
  nameWithType: "BatchClient.getJobSchedule(String jobScheduleId, GetBatchJobScheduleOptions options)"
  summary: "Gets information about the specified Job Schedule."
  parameters:
  - description: "The ID of the Job Schedule to get."
    name: "jobScheduleId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "A group containing optional parameters like timeOutInSeconds, select, expand and\n requestConditions."
    name: "options"
    type: "<xref href=\"com.azure.compute.batch.models.GetBatchJobScheduleOptions?alt=com.azure.compute.batch.models.GetBatchJobScheduleOptions&text=GetBatchJobScheduleOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public BatchJobSchedule getJobSchedule(String jobScheduleId, GetBatchJobScheduleOptions options)"
  desc: "Gets information about the specified Job Schedule."
  returns:
    description: "information about the specified Job Schedule."
    type: "<xref href=\"com.azure.compute.batch.models.BatchJobSchedule?alt=com.azure.compute.batch.models.BatchJobSchedule&text=BatchJobSchedule\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.compute.batch.BatchClient.getJobScheduleWithResponse(java.lang.String,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.compute.batch.BatchClient.getJobScheduleWithResponse(String jobScheduleId, RequestOptions requestOptions)"
  name: "getJobScheduleWithResponse(String jobScheduleId, RequestOptions requestOptions)"
  nameWithType: "BatchClient.getJobScheduleWithResponse(String jobScheduleId, RequestOptions requestOptions)"
  summary: "Gets information about the specified Job Schedule."
  parameters:
  - description: "The ID of the Job Schedule to get."
    name: "jobScheduleId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<BinaryData> getJobScheduleWithResponse(String jobScheduleId, RequestOptions requestOptions)"
  desc: "Gets information about the specified Job Schedule.\n\n**Query Parameters**\n\n    | ------- | ------------ | -------- | -------------------------------------------------------------------------------------------------------------- |\n    | Name    | Type         | Required | Description                                                                                                    |\n    | timeOut | Integer      | No       | Sets the maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. |\n    | $select | List<String> | No       | An OData $select clause. In the form of \",\" separated string.                                                  |\n    | $expand | List<String> | No       | An OData $expand clause. In the form of \",\" separated string.                                                  |\n\nYou can add these to a request with <xref uid=\"com.azure.core.http.rest.RequestOptions.addQueryParam\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RequestOptions#addQueryParam\"></xref>\n\n**Header Parameters**\n\n    | ------------------- | -------------- | -------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n    | Name                | Type           | Required | Description                                                                                                                                                                                                          |\n    | if-match            | String         | No       | An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service exactly matches the value specified by the client. |\n    | if-none-match       | String         | No       | An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service does not match the value specified by the client.  |\n    | if-modified-since   | OffsetDateTime | No       | A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has been modified since the specified time.                   |\n    | if-unmodified-since | OffsetDateTime | No       | A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has not been modified since the specified time.               |\n\nYou can add these to a request with <xref uid=\"com.azure.core.http.rest.RequestOptions.addHeader\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RequestOptions#addHeader\"></xref>\n\n**Response Body Schema**\n\n```java\n{\n     id: String (Optional)\n     displayName: String (Optional)\n     url: String (Optional)\n     eTag: String (Optional)\n     lastModified: OffsetDateTime (Optional)\n     creationTime: OffsetDateTime (Optional)\n     state: String(active/completed/disabled/terminating/deleting) (Optional)\n     stateTransitionTime: OffsetDateTime (Optional)\n     previousState: String(active/completed/disabled/terminating/deleting) (Optional)\n     previousStateTransitionTime: OffsetDateTime (Optional)\n     schedule (Required): {\n         doNotRunUntil: OffsetDateTime (Optional)\n         doNotRunAfter: OffsetDateTime (Optional)\n         startWindow: Duration (Optional)\n         recurrenceInterval: Duration (Optional)\n     }\n     jobSpecification (Required): {\n         priority: Integer (Optional)\n         allowTaskPreemption: Boolean (Optional)\n         maxParallelTasks: Integer (Optional)\n         displayName: String (Optional)\n         usesTaskDependencies: Boolean (Optional)\n         onAllTasksComplete: String(noaction/terminatejob) (Optional)\n         onTaskFailure: String(noaction/performexitoptionsjobaction) (Optional)\n         networkConfiguration (Optional): {\n             subnetId: String (Required)\n         }\n         constraints (Optional): {\n             maxWallClockTime: Duration (Optional)\n             maxTaskRetryCount: Integer (Optional)\n         }\n         jobManagerTask (Optional): {\n             id: String (Required)\n             displayName: String (Optional)\n             commandLine: String (Required)\n             containerSettings (Optional): {\n                 containerRunOptions: String (Optional)\n                 imageName: String (Required)\n                 registry (Optional): {\n                     username: String (Optional)\n                     password: String (Optional)\n                     registryServer: String (Optional)\n                     identityReference (Optional): {\n                         resourceId: String (Optional)\n                     }\n                 }\n                 workingDirectory: String(taskWorkingDirectory/containerImageDefault) (Optional)\n             }\n             resourceFiles (Optional): [\n                  (Optional){\n                     autoStorageContainerName: String (Optional)\n                     storageContainerUrl: String (Optional)\n                     httpUrl: String (Optional)\n                     blobPrefix: String (Optional)\n                     filePath: String (Optional)\n                     fileMode: String (Optional)\n                     identityReference (Optional): (recursive schema, see identityReference above)\n                 }\n             ]\n             outputFiles (Optional): [\n                  (Optional){\n                     filePattern: String (Required)\n                     destination (Required): {\n                         container (Optional): {\n                             path: String (Optional)\n                             containerUrl: String (Required)\n                             identityReference (Optional): (recursive schema, see identityReference above)\n                             uploadHeaders (Optional): [\n                                  (Optional){\n                                     name: String (Required)\n                                     value: String (Optional)\n                                 }\n                             ]\n                         }\n                     }\n                     uploadOptions (Required): {\n                         uploadCondition: String(tasksuccess/taskfailure/taskcompletion) (Required)\n                     }\n                 }\n             ]\n             environmentSettings (Optional): [\n                  (Optional){\n                     name: String (Required)\n                     value: String (Optional)\n                 }\n             ]\n             constraints (Optional): {\n                 maxWallClockTime: Duration (Optional)\n                 retentionTime: Duration (Optional)\n                 maxTaskRetryCount: Integer (Optional)\n             }\n             requiredSlots: Integer (Optional)\n             killJobOnCompletion: Boolean (Optional)\n             userIdentity (Optional): {\n                 username: String (Optional)\n                 autoUser (Optional): {\n                     scope: String(task/pool) (Optional)\n                     elevationLevel: String(nonadmin/admin) (Optional)\n                 }\n             }\n             runExclusive: Boolean (Optional)\n             applicationPackageReferences (Optional): [\n                  (Optional){\n                     applicationId: String (Required)\n                     version: String (Optional)\n                 }\n             ]\n             authenticationTokenSettings (Optional): {\n                 access (Optional): [\n                     String(job) (Optional)\n                 ]\n             }\n             allowLowPriorityNode: Boolean (Optional)\n         }\n         jobPreparationTask (Optional): {\n             id: String (Optional)\n             commandLine: String (Required)\n             containerSettings (Optional): (recursive schema, see containerSettings above)\n             resourceFiles (Optional): [\n                 (recursive schema, see above)\n             ]\n             environmentSettings (Optional): [\n                 (recursive schema, see above)\n             ]\n             constraints (Optional): (recursive schema, see constraints above)\n             waitForSuccess: Boolean (Optional)\n             userIdentity (Optional): (recursive schema, see userIdentity above)\n             rerunOnNodeRebootAfterSuccess: Boolean (Optional)\n         }\n         jobReleaseTask (Optional): {\n             id: String (Optional)\n             commandLine: String (Required)\n             containerSettings (Optional): (recursive schema, see containerSettings above)\n             resourceFiles (Optional): [\n                 (recursive schema, see above)\n             ]\n             environmentSettings (Optional): [\n                 (recursive schema, see above)\n             ]\n             maxWallClockTime: Duration (Optional)\n             retentionTime: Duration (Optional)\n             userIdentity (Optional): (recursive schema, see userIdentity above)\n         }\n         commonEnvironmentSettings (Optional): [\n             (recursive schema, see above)\n         ]\n         poolInfo (Required): {\n             poolId: String (Optional)\n             autoPoolSpecification (Optional): {\n                 autoPoolIdPrefix: String (Optional)\n                 poolLifetimeOption: String(jobschedule/job) (Required)\n                 keepAlive: Boolean (Optional)\n                 pool (Optional): {\n                     displayName: String (Optional)\n                     vmSize: String (Required)\n                     cloudServiceConfiguration (Optional): {\n                         osFamily: String (Required)\n                         osVersion: String (Optional)\n                     }\n                     virtualMachineConfiguration (Optional): {\n                         imageReference (Required): {\n                             publisher: String (Optional)\n                             offer: String (Optional)\n                             sku: String (Optional)\n                             version: String (Optional)\n                             virtualMachineImageId: String (Optional)\n                             exactVersion: String (Optional)\n                         }\n                         nodeAgentSKUId: String (Required)\n                         windowsConfiguration (Optional): {\n                             enableAutomaticUpdates: Boolean (Optional)\n                         }\n                         dataDisks (Optional): [\n                              (Optional){\n                                 lun: int (Required)\n                                 caching: String(none/readonly/readwrite) (Optional)\n                                 diskSizeGB: int (Required)\n                                 storageAccountType: String(standard_lrs/premium_lrs) (Optional)\n                             }\n                         ]\n                         licenseType: String (Optional)\n                         containerConfiguration (Optional): {\n                             type: String(dockerCompatible/criCompatible) (Required)\n                             containerImageNames (Optional): [\n                                 String (Optional)\n                             ]\n                             containerRegistries (Optional): [\n                                 (recursive schema, see above)\n                             ]\n                         }\n                         diskEncryptionConfiguration (Optional): {\n                             targets (Optional): [\n                                 String(osdisk/temporarydisk) (Optional)\n                             ]\n                         }\n                         nodePlacementConfiguration (Optional): {\n                             policy: String(regional/zonal) (Optional)\n                         }\n                         extensions (Optional): [\n                              (Optional){\n                                 name: String (Required)\n                                 publisher: String (Required)\n                                 type: String (Required)\n                                 typeHandlerVersion: String (Optional)\n                                 autoUpgradeMinorVersion: Boolean (Optional)\n                                 enableAutomaticUpgrade: Boolean (Optional)\n                                 settings (Optional): {\n                                     String: String (Optional)\n                                 }\n                                 protectedSettings (Optional): {\n                                     String: String (Optional)\n                                 }\n                                 provisionAfterExtensions (Optional): [\n                                     String (Optional)\n                                 ]\n                             }\n                         ]\n                         osDisk (Optional): {\n                             ephemeralOSDiskSettings (Optional): {\n                                 placement: String(cachedisk) (Optional)\n                             }\n                         }\n                     }\n                     taskSlotsPerNode: Integer (Optional)\n                     taskSchedulingPolicy (Optional): {\n                         nodeFillType: String(spread/pack) (Required)\n                     }\n                     resizeTimeout: Duration (Optional)\n                     targetDedicatedNodes: Integer (Optional)\n                     targetLowPriorityNodes: Integer (Optional)\n                     enableAutoScale: Boolean (Optional)\n                     autoScaleFormula: String (Optional)\n                     autoScaleEvaluationInterval: Duration (Optional)\n                     enableInterNodeCommunication: Boolean (Optional)\n                     networkConfiguration (Optional): {\n                         subnetId: String (Optional)\n                         dynamicVNetAssignmentScope: String(none/job) (Optional)\n                         endpointConfiguration (Optional): {\n                             inboundNATPools (Required): [\n                                  (Required){\n                                     name: String (Required)\n                                     protocol: String(tcp/udp) (Required)\n                                     backendPort: int (Required)\n                                     frontendPortRangeStart: int (Required)\n                                     frontendPortRangeEnd: int (Required)\n                                     networkSecurityGroupRules (Optional): [\n                                          (Optional){\n                                             priority: int (Required)\n                                             access: String(allow/deny) (Required)\n                                             sourceAddressPrefix: String (Required)\n                                             sourcePortRanges (Optional): [\n                                                 String (Optional)\n                                             ]\n                                         }\n                                     ]\n                                 }\n                             ]\n                         }\n                         publicIPAddressConfiguration (Optional): {\n                             provision: String(batchmanaged/usermanaged/nopublicipaddresses) (Optional)\n                             ipAddressIds (Optional): [\n                                 String (Optional)\n                             ]\n                         }\n                         enableAcceleratedNetworking: Boolean (Optional)\n                     }\n                     startTask (Optional): {\n                         commandLine: String (Required)\n                         containerSettings (Optional): (recursive schema, see containerSettings above)\n                         resourceFiles (Optional): [\n                             (recursive schema, see above)\n                         ]\n                         environmentSettings (Optional): [\n                             (recursive schema, see above)\n                         ]\n                         userIdentity (Optional): (recursive schema, see userIdentity above)\n                         maxTaskRetryCount: Integer (Optional)\n                         waitForSuccess: Boolean (Optional)\n                     }\n                     applicationPackageReferences (Optional): [\n                         (recursive schema, see above)\n                     ]\n                     applicationLicenses (Optional): [\n                         String (Optional)\n                     ]\n                     userAccounts (Optional): [\n                          (Optional){\n                             name: String (Required)\n                             password: String (Required)\n                             elevationLevel: String(nonadmin/admin) (Optional)\n                             linuxUserConfiguration (Optional): {\n                                 uid: Integer (Optional)\n                                 gid: Integer (Optional)\n                                 sshPrivateKey: String (Optional)\n                             }\n                             windowsUserConfiguration (Optional): {\n                                 loginMode: String(batch/interactive) (Optional)\n                             }\n                         }\n                     ]\n                     metadata (Optional): [\n                          (Optional){\n                             name: String (Required)\n                             value: String (Required)\n                         }\n                     ]\n                     mountConfiguration (Optional): [\n                          (Optional){\n                             azureBlobFileSystemConfiguration (Optional): {\n                                 accountName: String (Required)\n                                 containerName: String (Required)\n                                 accountKey: String (Optional)\n                                 sasKey: String (Optional)\n                                 blobfuseOptions: String (Optional)\n                                 relativeMountPath: String (Required)\n                                 identityReference (Optional): (recursive schema, see identityReference above)\n                             }\n                             nfsMountConfiguration (Optional): {\n                                 source: String (Required)\n                                 relativeMountPath: String (Required)\n                                 mountOptions: String (Optional)\n                             }\n                             cifsMountConfiguration (Optional): {\n                                 username: String (Required)\n                                 source: String (Required)\n                                 relativeMountPath: String (Required)\n                                 mountOptions: String (Optional)\n                                 password: String (Required)\n                             }\n                             azureFileShareConfiguration (Optional): {\n                                 accountName: String (Required)\n                                 azureFileUrl: String (Required)\n                                 accountKey: String (Required)\n                                 relativeMountPath: String (Required)\n                                 mountOptions: String (Optional)\n                             }\n                         }\n                     ]\n                     targetNodeCommunicationMode: String(default/classic/simplified) (Optional)\n                 }\n             }\n         }\n         metadata (Optional): [\n             (recursive schema, see above)\n         ]\n     }\n     executionInfo (Optional): {\n         nextRunTime: OffsetDateTime (Optional)\n         recentJob (Optional): {\n             id: String (Optional)\n             url: String (Optional)\n         }\n         endTime: OffsetDateTime (Optional)\n     }\n     metadata (Optional): [\n         (recursive schema, see above)\n     ]\n     stats (Optional): {\n         url: String (Required)\n         startTime: OffsetDateTime (Required)\n         lastUpdateTime: OffsetDateTime (Required)\n         userCPUTime: Duration (Required)\n         kernelCPUTime: Duration (Required)\n         wallClockTime: Duration (Required)\n         readIOps: int (Required)\n         writeIOps: int (Required)\n         readIOGiB: double (Required)\n         writeIOGiB: double (Required)\n         numSucceededTasks: int (Required)\n         numFailedTasks: int (Required)\n         numTaskRetries: int (Required)\n         waitTime: Duration (Required)\n     }\n }\n```"
  returns:
    description: "information about the specified Job Schedule along with <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.compute.batch.BatchClient.getJobTaskCounts(java.lang.String)"
  fullName: "com.azure.compute.batch.BatchClient.getJobTaskCounts(String jobId)"
  name: "getJobTaskCounts(String jobId)"
  nameWithType: "BatchClient.getJobTaskCounts(String jobId)"
  summary: "Gets the Task counts for the specified Job."
  parameters:
  - description: "The ID of the Job."
    name: "jobId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public BatchTaskCountsResult getJobTaskCounts(String jobId)"
  desc: "Gets the Task counts for the specified Job.\n\nTask counts provide a count of the Tasks by active, running or completed Task state, and a count of Tasks which succeeded or failed. Tasks in the preparing state are counted as running. Note that the numbers returned may not always be up to date. If you need exact task counts, use a list query."
  returns:
    description: "the Task and TaskSlot counts for a Job."
    type: "<xref href=\"com.azure.compute.batch.models.BatchTaskCountsResult?alt=com.azure.compute.batch.models.BatchTaskCountsResult&text=BatchTaskCountsResult\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.compute.batch.BatchClient.getJobTaskCounts(java.lang.String,com.azure.compute.batch.models.GetBatchJobTaskCountsOptions)"
  fullName: "com.azure.compute.batch.BatchClient.getJobTaskCounts(String jobId, GetBatchJobTaskCountsOptions options)"
  name: "getJobTaskCounts(String jobId, GetBatchJobTaskCountsOptions options)"
  nameWithType: "BatchClient.getJobTaskCounts(String jobId, GetBatchJobTaskCountsOptions options)"
  summary: "Gets the Task counts for the specified Job."
  parameters:
  - description: "The ID of the Job."
    name: "jobId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "A group of optional parameters containing timeOutInSeconds."
    name: "options"
    type: "<xref href=\"com.azure.compute.batch.models.GetBatchJobTaskCountsOptions?alt=com.azure.compute.batch.models.GetBatchJobTaskCountsOptions&text=GetBatchJobTaskCountsOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public BatchTaskCountsResult getJobTaskCounts(String jobId, GetBatchJobTaskCountsOptions options)"
  desc: "Gets the Task counts for the specified Job.\n\nTask counts provide a count of the Tasks by active, running or completed Task state, and a count of Tasks which succeeded or failed. Tasks in the preparing state are counted as running. Note that the numbers returned may not always be up to date. If you need exact task counts, use a list query."
  returns:
    description: "the Task and TaskSlot counts for a Job."
    type: "<xref href=\"com.azure.compute.batch.models.BatchTaskCountsResult?alt=com.azure.compute.batch.models.BatchTaskCountsResult&text=BatchTaskCountsResult\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.compute.batch.BatchClient.getJobTaskCountsWithResponse(java.lang.String,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.compute.batch.BatchClient.getJobTaskCountsWithResponse(String jobId, RequestOptions requestOptions)"
  name: "getJobTaskCountsWithResponse(String jobId, RequestOptions requestOptions)"
  nameWithType: "BatchClient.getJobTaskCountsWithResponse(String jobId, RequestOptions requestOptions)"
  summary: "Gets the Task counts for the specified Job."
  parameters:
  - description: "The ID of the Job."
    name: "jobId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<BinaryData> getJobTaskCountsWithResponse(String jobId, RequestOptions requestOptions)"
  desc: "Gets the Task counts for the specified Job.\n\nTask counts provide a count of the Tasks by active, running or completed Task state, and a count of Tasks which succeeded or failed. Tasks in the preparing state are counted as running. Note that the numbers returned may not always be up to date. If you need exact task counts, use a list query.\n\n**Query Parameters**\n\n    | ------- | ------- | -------- | -------------------------------------------------------------------------------------------------------------- |\n    | Name    | Type    | Required | Description                                                                                                    |\n    | timeOut | Integer | No       | Sets the maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. |\n\nYou can add these to a request with <xref uid=\"com.azure.core.http.rest.RequestOptions.addQueryParam\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RequestOptions#addQueryParam\"></xref>\n\n**Response Body Schema**\n\n```java\n{\n     taskCounts (Required): {\n         active: int (Required)\n         running: int (Required)\n         completed: int (Required)\n         succeeded: int (Required)\n         failed: int (Required)\n     }\n     taskSlotCounts (Required): {\n         active: int (Required)\n         running: int (Required)\n         completed: int (Required)\n         succeeded: int (Required)\n         failed: int (Required)\n     }\n }\n```"
  returns:
    description: "the Task and TaskSlot counts for a Job along with <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.compute.batch.BatchClient.getJobWithResponse(java.lang.String,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.compute.batch.BatchClient.getJobWithResponse(String jobId, RequestOptions requestOptions)"
  name: "getJobWithResponse(String jobId, RequestOptions requestOptions)"
  nameWithType: "BatchClient.getJobWithResponse(String jobId, RequestOptions requestOptions)"
  summary: "Gets information about the specified Job."
  parameters:
  - description: "The ID of the Job."
    name: "jobId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<BinaryData> getJobWithResponse(String jobId, RequestOptions requestOptions)"
  desc: "Gets information about the specified Job.\n\n**Query Parameters**\n\n    | ------- | ------------ | -------- | -------------------------------------------------------------------------------------------------------------- |\n    | Name    | Type         | Required | Description                                                                                                    |\n    | timeOut | Integer      | No       | Sets the maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. |\n    | $select | List<String> | No       | An OData $select clause. In the form of \",\" separated string.                                                  |\n    | $expand | List<String> | No       | An OData $expand clause. In the form of \",\" separated string.                                                  |\n\nYou can add these to a request with <xref uid=\"com.azure.core.http.rest.RequestOptions.addQueryParam\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RequestOptions#addQueryParam\"></xref>\n\n**Header Parameters**\n\n    | ------------------- | -------------- | -------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n    | Name                | Type           | Required | Description                                                                                                                                                                                                          |\n    | if-match            | String         | No       | An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service exactly matches the value specified by the client. |\n    | if-none-match       | String         | No       | An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service does not match the value specified by the client.  |\n    | if-modified-since   | OffsetDateTime | No       | A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has been modified since the specified time.                   |\n    | if-unmodified-since | OffsetDateTime | No       | A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has not been modified since the specified time.               |\n\nYou can add these to a request with <xref uid=\"com.azure.core.http.rest.RequestOptions.addHeader\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RequestOptions#addHeader\"></xref>\n\n**Response Body Schema**\n\n```java\n{\n     id: String (Optional)\n     displayName: String (Optional)\n     usesTaskDependencies: Boolean (Optional)\n     url: String (Optional)\n     eTag: String (Optional)\n     lastModified: OffsetDateTime (Optional)\n     creationTime: OffsetDateTime (Optional)\n     state: String(active/disabling/disabled/enabling/terminating/completed/deleting) (Optional)\n     stateTransitionTime: OffsetDateTime (Optional)\n     previousState: String(active/disabling/disabled/enabling/terminating/completed/deleting) (Optional)\n     previousStateTransitionTime: OffsetDateTime (Optional)\n     priority: Integer (Optional)\n     allowTaskPreemption: Boolean (Optional)\n     maxParallelTasks: Integer (Optional)\n     constraints (Optional): {\n         maxWallClockTime: Duration (Optional)\n         maxTaskRetryCount: Integer (Optional)\n     }\n     jobManagerTask (Optional): {\n         id: String (Required)\n         displayName: String (Optional)\n         commandLine: String (Required)\n         containerSettings (Optional): {\n             containerRunOptions: String (Optional)\n             imageName: String (Required)\n             registry (Optional): {\n                 username: String (Optional)\n                 password: String (Optional)\n                 registryServer: String (Optional)\n                 identityReference (Optional): {\n                     resourceId: String (Optional)\n                 }\n             }\n             workingDirectory: String(taskWorkingDirectory/containerImageDefault) (Optional)\n         }\n         resourceFiles (Optional): [\n              (Optional){\n                 autoStorageContainerName: String (Optional)\n                 storageContainerUrl: String (Optional)\n                 httpUrl: String (Optional)\n                 blobPrefix: String (Optional)\n                 filePath: String (Optional)\n                 fileMode: String (Optional)\n                 identityReference (Optional): (recursive schema, see identityReference above)\n             }\n         ]\n         outputFiles (Optional): [\n              (Optional){\n                 filePattern: String (Required)\n                 destination (Required): {\n                     container (Optional): {\n                         path: String (Optional)\n                         containerUrl: String (Required)\n                         identityReference (Optional): (recursive schema, see identityReference above)\n                         uploadHeaders (Optional): [\n                              (Optional){\n                                 name: String (Required)\n                                 value: String (Optional)\n                             }\n                         ]\n                     }\n                 }\n                 uploadOptions (Required): {\n                     uploadCondition: String(tasksuccess/taskfailure/taskcompletion) (Required)\n                 }\n             }\n         ]\n         environmentSettings (Optional): [\n              (Optional){\n                 name: String (Required)\n                 value: String (Optional)\n             }\n         ]\n         constraints (Optional): {\n             maxWallClockTime: Duration (Optional)\n             retentionTime: Duration (Optional)\n             maxTaskRetryCount: Integer (Optional)\n         }\n         requiredSlots: Integer (Optional)\n         killJobOnCompletion: Boolean (Optional)\n         userIdentity (Optional): {\n             username: String (Optional)\n             autoUser (Optional): {\n                 scope: String(task/pool) (Optional)\n                 elevationLevel: String(nonadmin/admin) (Optional)\n             }\n         }\n         runExclusive: Boolean (Optional)\n         applicationPackageReferences (Optional): [\n              (Optional){\n                 applicationId: String (Required)\n                 version: String (Optional)\n             }\n         ]\n         authenticationTokenSettings (Optional): {\n             access (Optional): [\n                 String(job) (Optional)\n             ]\n         }\n         allowLowPriorityNode: Boolean (Optional)\n     }\n     jobPreparationTask (Optional): {\n         id: String (Optional)\n         commandLine: String (Required)\n         containerSettings (Optional): (recursive schema, see containerSettings above)\n         resourceFiles (Optional): [\n             (recursive schema, see above)\n         ]\n         environmentSettings (Optional): [\n             (recursive schema, see above)\n         ]\n         constraints (Optional): (recursive schema, see constraints above)\n         waitForSuccess: Boolean (Optional)\n         userIdentity (Optional): (recursive schema, see userIdentity above)\n         rerunOnNodeRebootAfterSuccess: Boolean (Optional)\n     }\n     jobReleaseTask (Optional): {\n         id: String (Optional)\n         commandLine: String (Required)\n         containerSettings (Optional): (recursive schema, see containerSettings above)\n         resourceFiles (Optional): [\n             (recursive schema, see above)\n         ]\n         environmentSettings (Optional): [\n             (recursive schema, see above)\n         ]\n         maxWallClockTime: Duration (Optional)\n         retentionTime: Duration (Optional)\n         userIdentity (Optional): (recursive schema, see userIdentity above)\n     }\n     commonEnvironmentSettings (Optional): [\n         (recursive schema, see above)\n     ]\n     poolInfo (Required): {\n         poolId: String (Optional)\n         autoPoolSpecification (Optional): {\n             autoPoolIdPrefix: String (Optional)\n             poolLifetimeOption: String(jobschedule/job) (Required)\n             keepAlive: Boolean (Optional)\n             pool (Optional): {\n                 displayName: String (Optional)\n                 vmSize: String (Required)\n                 cloudServiceConfiguration (Optional): {\n                     osFamily: String (Required)\n                     osVersion: String (Optional)\n                 }\n                 virtualMachineConfiguration (Optional): {\n                     imageReference (Required): {\n                         publisher: String (Optional)\n                         offer: String (Optional)\n                         sku: String (Optional)\n                         version: String (Optional)\n                         virtualMachineImageId: String (Optional)\n                         exactVersion: String (Optional)\n                     }\n                     nodeAgentSKUId: String (Required)\n                     windowsConfiguration (Optional): {\n                         enableAutomaticUpdates: Boolean (Optional)\n                     }\n                     dataDisks (Optional): [\n                          (Optional){\n                             lun: int (Required)\n                             caching: String(none/readonly/readwrite) (Optional)\n                             diskSizeGB: int (Required)\n                             storageAccountType: String(standard_lrs/premium_lrs) (Optional)\n                         }\n                     ]\n                     licenseType: String (Optional)\n                     containerConfiguration (Optional): {\n                         type: String(dockerCompatible/criCompatible) (Required)\n                         containerImageNames (Optional): [\n                             String (Optional)\n                         ]\n                         containerRegistries (Optional): [\n                             (recursive schema, see above)\n                         ]\n                     }\n                     diskEncryptionConfiguration (Optional): {\n                         targets (Optional): [\n                             String(osdisk/temporarydisk) (Optional)\n                         ]\n                     }\n                     nodePlacementConfiguration (Optional): {\n                         policy: String(regional/zonal) (Optional)\n                     }\n                     extensions (Optional): [\n                          (Optional){\n                             name: String (Required)\n                             publisher: String (Required)\n                             type: String (Required)\n                             typeHandlerVersion: String (Optional)\n                             autoUpgradeMinorVersion: Boolean (Optional)\n                             enableAutomaticUpgrade: Boolean (Optional)\n                             settings (Optional): {\n                                 String: String (Optional)\n                             }\n                             protectedSettings (Optional): {\n                                 String: String (Optional)\n                             }\n                             provisionAfterExtensions (Optional): [\n                                 String (Optional)\n                             ]\n                         }\n                     ]\n                     osDisk (Optional): {\n                         ephemeralOSDiskSettings (Optional): {\n                             placement: String(cachedisk) (Optional)\n                         }\n                     }\n                 }\n                 taskSlotsPerNode: Integer (Optional)\n                 taskSchedulingPolicy (Optional): {\n                     nodeFillType: String(spread/pack) (Required)\n                 }\n                 resizeTimeout: Duration (Optional)\n                 targetDedicatedNodes: Integer (Optional)\n                 targetLowPriorityNodes: Integer (Optional)\n                 enableAutoScale: Boolean (Optional)\n                 autoScaleFormula: String (Optional)\n                 autoScaleEvaluationInterval: Duration (Optional)\n                 enableInterNodeCommunication: Boolean (Optional)\n                 networkConfiguration (Optional): {\n                     subnetId: String (Optional)\n                     dynamicVNetAssignmentScope: String(none/job) (Optional)\n                     endpointConfiguration (Optional): {\n                         inboundNATPools (Required): [\n                              (Required){\n                                 name: String (Required)\n                                 protocol: String(tcp/udp) (Required)\n                                 backendPort: int (Required)\n                                 frontendPortRangeStart: int (Required)\n                                 frontendPortRangeEnd: int (Required)\n                                 networkSecurityGroupRules (Optional): [\n                                      (Optional){\n                                         priority: int (Required)\n                                         access: String(allow/deny) (Required)\n                                         sourceAddressPrefix: String (Required)\n                                         sourcePortRanges (Optional): [\n                                             String (Optional)\n                                         ]\n                                     }\n                                 ]\n                             }\n                         ]\n                     }\n                     publicIPAddressConfiguration (Optional): {\n                         provision: String(batchmanaged/usermanaged/nopublicipaddresses) (Optional)\n                         ipAddressIds (Optional): [\n                             String (Optional)\n                         ]\n                     }\n                     enableAcceleratedNetworking: Boolean (Optional)\n                 }\n                 startTask (Optional): {\n                     commandLine: String (Required)\n                     containerSettings (Optional): (recursive schema, see containerSettings above)\n                     resourceFiles (Optional): [\n                         (recursive schema, see above)\n                     ]\n                     environmentSettings (Optional): [\n                         (recursive schema, see above)\n                     ]\n                     userIdentity (Optional): (recursive schema, see userIdentity above)\n                     maxTaskRetryCount: Integer (Optional)\n                     waitForSuccess: Boolean (Optional)\n                 }\n                 applicationPackageReferences (Optional): [\n                     (recursive schema, see above)\n                 ]\n                 applicationLicenses (Optional): [\n                     String (Optional)\n                 ]\n                 userAccounts (Optional): [\n                      (Optional){\n                         name: String (Required)\n                         password: String (Required)\n                         elevationLevel: String(nonadmin/admin) (Optional)\n                         linuxUserConfiguration (Optional): {\n                             uid: Integer (Optional)\n                             gid: Integer (Optional)\n                             sshPrivateKey: String (Optional)\n                         }\n                         windowsUserConfiguration (Optional): {\n                             loginMode: String(batch/interactive) (Optional)\n                         }\n                     }\n                 ]\n                 metadata (Optional): [\n                      (Optional){\n                         name: String (Required)\n                         value: String (Required)\n                     }\n                 ]\n                 mountConfiguration (Optional): [\n                      (Optional){\n                         azureBlobFileSystemConfiguration (Optional): {\n                             accountName: String (Required)\n                             containerName: String (Required)\n                             accountKey: String (Optional)\n                             sasKey: String (Optional)\n                             blobfuseOptions: String (Optional)\n                             relativeMountPath: String (Required)\n                             identityReference (Optional): (recursive schema, see identityReference above)\n                         }\n                         nfsMountConfiguration (Optional): {\n                             source: String (Required)\n                             relativeMountPath: String (Required)\n                             mountOptions: String (Optional)\n                         }\n                         cifsMountConfiguration (Optional): {\n                             username: String (Required)\n                             source: String (Required)\n                             relativeMountPath: String (Required)\n                             mountOptions: String (Optional)\n                             password: String (Required)\n                         }\n                         azureFileShareConfiguration (Optional): {\n                             accountName: String (Required)\n                             azureFileUrl: String (Required)\n                             accountKey: String (Required)\n                             relativeMountPath: String (Required)\n                             mountOptions: String (Optional)\n                         }\n                     }\n                 ]\n                 targetNodeCommunicationMode: String(default/classic/simplified) (Optional)\n             }\n         }\n     }\n     onAllTasksComplete: String(noaction/terminatejob) (Optional)\n     onTaskFailure: String(noaction/performexitoptionsjobaction) (Optional)\n     networkConfiguration (Optional): {\n         subnetId: String (Required)\n     }\n     metadata (Optional): [\n         (recursive schema, see above)\n     ]\n     executionInfo (Optional): {\n         startTime: OffsetDateTime (Required)\n         endTime: OffsetDateTime (Optional)\n         poolId: String (Optional)\n         schedulingError (Optional): {\n             category: String(usererror/servererror) (Required)\n             code: String (Optional)\n             message: String (Optional)\n             details (Optional): [\n                  (Optional){\n                     name: String (Optional)\n                     value: String (Optional)\n                 }\n             ]\n         }\n         terminateReason: String (Optional)\n     }\n     stats (Optional): {\n         url: String (Required)\n         startTime: OffsetDateTime (Required)\n         lastUpdateTime: OffsetDateTime (Required)\n         userCPUTime: Duration (Required)\n         kernelCPUTime: Duration (Required)\n         wallClockTime: Duration (Required)\n         readIOps: int (Required)\n         writeIOps: int (Required)\n         readIOGiB: double (Required)\n         writeIOGiB: double (Required)\n         numSucceededTasks: int (Required)\n         numFailedTasks: int (Required)\n         numTaskRetries: int (Required)\n         waitTime: Duration (Required)\n     }\n }\n```"
  returns:
    description: "information about the specified Job along with <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.compute.batch.BatchClient.getNode(java.lang.String,java.lang.String)"
  fullName: "com.azure.compute.batch.BatchClient.getNode(String poolId, String nodeId)"
  name: "getNode(String poolId, String nodeId)"
  nameWithType: "BatchClient.getNode(String poolId, String nodeId)"
  summary: "Gets information about the specified Compute Node."
  parameters:
  - description: "The ID of the Pool that contains the Compute Node."
    name: "poolId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The ID of the Compute Node that you want to get information about."
    name: "nodeId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public BatchNode getNode(String poolId, String nodeId)"
  desc: "Gets information about the specified Compute Node."
  returns:
    description: "information about the specified Compute Node."
    type: "<xref href=\"com.azure.compute.batch.models.BatchNode?alt=com.azure.compute.batch.models.BatchNode&text=BatchNode\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.compute.batch.BatchClient.getNode(java.lang.String,java.lang.String,com.azure.compute.batch.models.GetBatchNodeOptions)"
  fullName: "com.azure.compute.batch.BatchClient.getNode(String poolId, String nodeId, GetBatchNodeOptions options)"
  name: "getNode(String poolId, String nodeId, GetBatchNodeOptions options)"
  nameWithType: "BatchClient.getNode(String poolId, String nodeId, GetBatchNodeOptions options)"
  summary: "Gets information about the specified Compute Node."
  parameters:
  - description: "The ID of the Pool that contains the Compute Node."
    name: "poolId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The ID of the Compute Node that you want to get information about."
    name: "nodeId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "A group containing optional parameters like timeOutInSeconds and select."
    name: "options"
    type: "<xref href=\"com.azure.compute.batch.models.GetBatchNodeOptions?alt=com.azure.compute.batch.models.GetBatchNodeOptions&text=GetBatchNodeOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public BatchNode getNode(String poolId, String nodeId, GetBatchNodeOptions options)"
  desc: "Gets information about the specified Compute Node."
  returns:
    description: "information about the specified Compute Node."
    type: "<xref href=\"com.azure.compute.batch.models.BatchNode?alt=com.azure.compute.batch.models.BatchNode&text=BatchNode\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.compute.batch.BatchClient.getNodeExtension(java.lang.String,java.lang.String,java.lang.String)"
  fullName: "com.azure.compute.batch.BatchClient.getNodeExtension(String poolId, String nodeId, String extensionName)"
  name: "getNodeExtension(String poolId, String nodeId, String extensionName)"
  nameWithType: "BatchClient.getNodeExtension(String poolId, String nodeId, String extensionName)"
  summary: "Gets information about the specified Compute Node Extension."
  parameters:
  - description: "The ID of the Pool that contains the Compute Node."
    name: "poolId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The ID of the Compute Node that contains the extensions."
    name: "nodeId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The name of the Compute Node Extension that you want to get information about."
    name: "extensionName"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public BatchNodeVMExtension getNodeExtension(String poolId, String nodeId, String extensionName)"
  desc: "Gets information about the specified Compute Node Extension."
  returns:
    description: "information about the specified Compute Node Extension."
    type: "<xref href=\"com.azure.compute.batch.models.BatchNodeVMExtension?alt=com.azure.compute.batch.models.BatchNodeVMExtension&text=BatchNodeVMExtension\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.compute.batch.BatchClient.getNodeExtension(java.lang.String,java.lang.String,java.lang.String,com.azure.compute.batch.models.GetBatchNodeExtensionOptions)"
  fullName: "com.azure.compute.batch.BatchClient.getNodeExtension(String poolId, String nodeId, String extensionName, GetBatchNodeExtensionOptions options)"
  name: "getNodeExtension(String poolId, String nodeId, String extensionName, GetBatchNodeExtensionOptions options)"
  nameWithType: "BatchClient.getNodeExtension(String poolId, String nodeId, String extensionName, GetBatchNodeExtensionOptions options)"
  summary: "Gets information about the specified Compute Node Extension."
  parameters:
  - description: "The ID of the Pool that contains the Compute Node."
    name: "poolId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The ID of the Compute Node that contains the extensions."
    name: "nodeId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The name of the Compute Node Extension that you want to get information about."
    name: "extensionName"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "A group containing optional parameters like timeOutInSeconds and select."
    name: "options"
    type: "<xref href=\"com.azure.compute.batch.models.GetBatchNodeExtensionOptions?alt=com.azure.compute.batch.models.GetBatchNodeExtensionOptions&text=GetBatchNodeExtensionOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public BatchNodeVMExtension getNodeExtension(String poolId, String nodeId, String extensionName, GetBatchNodeExtensionOptions options)"
  desc: "Gets information about the specified Compute Node Extension."
  returns:
    description: "information about the specified Compute Node Extension."
    type: "<xref href=\"com.azure.compute.batch.models.BatchNodeVMExtension?alt=com.azure.compute.batch.models.BatchNodeVMExtension&text=BatchNodeVMExtension\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.compute.batch.BatchClient.getNodeExtensionWithResponse(java.lang.String,java.lang.String,java.lang.String,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.compute.batch.BatchClient.getNodeExtensionWithResponse(String poolId, String nodeId, String extensionName, RequestOptions requestOptions)"
  name: "getNodeExtensionWithResponse(String poolId, String nodeId, String extensionName, RequestOptions requestOptions)"
  nameWithType: "BatchClient.getNodeExtensionWithResponse(String poolId, String nodeId, String extensionName, RequestOptions requestOptions)"
  summary: "Gets information about the specified Compute Node Extension."
  parameters:
  - description: "The ID of the Pool that contains the Compute Node."
    name: "poolId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The ID of the Compute Node that contains the extensions."
    name: "nodeId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The name of the Compute Node Extension that you want to get information about."
    name: "extensionName"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<BinaryData> getNodeExtensionWithResponse(String poolId, String nodeId, String extensionName, RequestOptions requestOptions)"
  desc: "Gets information about the specified Compute Node Extension.\n\n**Query Parameters**\n\n    | ------- | ------------ | -------- | -------------------------------------------------------------------------------------------------------------- |\n    | Name    | Type         | Required | Description                                                                                                    |\n    | timeOut | Integer      | No       | Sets the maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. |\n    | $select | List<String> | No       | An OData $select clause. In the form of \",\" separated string.                                                  |\n\nYou can add these to a request with <xref uid=\"com.azure.core.http.rest.RequestOptions.addQueryParam\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RequestOptions#addQueryParam\"></xref>\n\n**Response Body Schema**\n\n```java\n{\n     provisioningState: String (Optional)\n     vmExtension (Optional): {\n         name: String (Required)\n         publisher: String (Required)\n         type: String (Required)\n         typeHandlerVersion: String (Optional)\n         autoUpgradeMinorVersion: Boolean (Optional)\n         enableAutomaticUpgrade: Boolean (Optional)\n         settings (Optional): {\n             String: String (Optional)\n         }\n         protectedSettings (Optional): {\n             String: String (Optional)\n         }\n         provisionAfterExtensions (Optional): [\n             String (Optional)\n         ]\n     }\n     instanceView (Optional): {\n         name: String (Optional)\n         statuses (Optional): [\n              (Optional){\n                 code: String (Optional)\n                 displayStatus: String (Optional)\n                 level: String(Error/Info/Warning) (Optional)\n                 message: String (Optional)\n                 time: String (Optional)\n             }\n         ]\n         subStatuses (Optional): [\n             (recursive schema, see above)\n         ]\n     }\n }\n```"
  returns:
    description: "information about the specified Compute Node Extension along with <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.compute.batch.BatchClient.getNodeFile(java.lang.String,java.lang.String,java.lang.String)"
  fullName: "com.azure.compute.batch.BatchClient.getNodeFile(String poolId, String nodeId, String filePath)"
  name: "getNodeFile(String poolId, String nodeId, String filePath)"
  nameWithType: "BatchClient.getNodeFile(String poolId, String nodeId, String filePath)"
  summary: "Returns the content of the specified Compute Node file."
  parameters:
  - description: "The ID of the Pool that contains the Compute Node."
    name: "poolId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The ID of the Compute Node."
    name: "nodeId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The path to the file or directory."
    name: "filePath"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public BinaryData getNodeFile(String poolId, String nodeId, String filePath)"
  desc: "Returns the content of the specified Compute Node file."
  returns:
    description: "the response."
    type: "<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.compute.batch.BatchClient.getNodeFile(java.lang.String,java.lang.String,java.lang.String,com.azure.compute.batch.models.GetBatchNodeFileOptions)"
  fullName: "com.azure.compute.batch.BatchClient.getNodeFile(String poolId, String nodeId, String filePath, GetBatchNodeFileOptions options)"
  name: "getNodeFile(String poolId, String nodeId, String filePath, GetBatchNodeFileOptions options)"
  nameWithType: "BatchClient.getNodeFile(String poolId, String nodeId, String filePath, GetBatchNodeFileOptions options)"
  summary: "Returns the content of the specified Compute Node file."
  parameters:
  - description: "The ID of the Pool that contains the Compute Node."
    name: "poolId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The ID of the Compute Node."
    name: "nodeId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The path to the file or directory."
    name: "filePath"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "A group containing optional parameters like timeOutInSeconds, ifModifiedSince, ifUnmodifiedSince,\n and ocpRange."
    name: "options"
    type: "<xref href=\"com.azure.compute.batch.models.GetBatchNodeFileOptions?alt=com.azure.compute.batch.models.GetBatchNodeFileOptions&text=GetBatchNodeFileOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public BinaryData getNodeFile(String poolId, String nodeId, String filePath, GetBatchNodeFileOptions options)"
  desc: "Returns the content of the specified Compute Node file."
  returns:
    description: "the response."
    type: "<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.compute.batch.BatchClient.getNodeFileProperties(java.lang.String,java.lang.String,java.lang.String)"
  fullName: "com.azure.compute.batch.BatchClient.getNodeFileProperties(String poolId, String nodeId, String filePath)"
  name: "getNodeFileProperties(String poolId, String nodeId, String filePath)"
  nameWithType: "BatchClient.getNodeFileProperties(String poolId, String nodeId, String filePath)"
  summary: "Gets the properties of the specified Compute Node file."
  parameters:
  - description: "The ID of the Pool that contains the Compute Node."
    name: "poolId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The ID of the Compute Node."
    name: "nodeId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The path to the file or directory."
    name: "filePath"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public FileResponseHeaderProperties getNodeFileProperties(String poolId, String nodeId, String filePath)"
  desc: "Gets the properties of the specified Compute Node file."
  returns:
    description: "The <xref uid=\"com.azure.compute.batch.models.FileResponseHeaderProperties\" data-throw-if-not-resolved=\"false\" data-raw-source=\"FileResponseHeaderProperties\"></xref> object containing the properties retrieved from the response\n headers."
    type: "<xref href=\"com.azure.compute.batch.models.FileResponseHeaderProperties?alt=com.azure.compute.batch.models.FileResponseHeaderProperties&text=FileResponseHeaderProperties\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.compute.batch.BatchClient.getNodeFileProperties(java.lang.String,java.lang.String,java.lang.String,com.azure.compute.batch.models.GetBatchNodeFilePropertiesOptions)"
  fullName: "com.azure.compute.batch.BatchClient.getNodeFileProperties(String poolId, String nodeId, String filePath, GetBatchNodeFilePropertiesOptions options)"
  name: "getNodeFileProperties(String poolId, String nodeId, String filePath, GetBatchNodeFilePropertiesOptions options)"
  nameWithType: "BatchClient.getNodeFileProperties(String poolId, String nodeId, String filePath, GetBatchNodeFilePropertiesOptions options)"
  summary: "Gets the properties of the specified Compute Node file."
  parameters:
  - description: "The ID of the Pool that contains the Compute Node."
    name: "poolId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The ID of the Compute Node."
    name: "nodeId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The path to the file or directory."
    name: "filePath"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "A group containing optional parameters like timeOutInSeconds, ifModifiedSince, and\n ifUnmodifiedSince."
    name: "options"
    type: "<xref href=\"com.azure.compute.batch.models.GetBatchNodeFilePropertiesOptions?alt=com.azure.compute.batch.models.GetBatchNodeFilePropertiesOptions&text=GetBatchNodeFilePropertiesOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public FileResponseHeaderProperties getNodeFileProperties(String poolId, String nodeId, String filePath, GetBatchNodeFilePropertiesOptions options)"
  desc: "Gets the properties of the specified Compute Node file."
  returns:
    description: "The <xref uid=\"com.azure.compute.batch.models.FileResponseHeaderProperties\" data-throw-if-not-resolved=\"false\" data-raw-source=\"FileResponseHeaderProperties\"></xref> object containing the properties retrieved from the response\n headers."
    type: "<xref href=\"com.azure.compute.batch.models.FileResponseHeaderProperties?alt=com.azure.compute.batch.models.FileResponseHeaderProperties&text=FileResponseHeaderProperties\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.compute.batch.BatchClient.getNodeFilePropertiesWithResponse(java.lang.String,java.lang.String,java.lang.String,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.compute.batch.BatchClient.getNodeFilePropertiesWithResponse(String poolId, String nodeId, String filePath, RequestOptions requestOptions)"
  name: "getNodeFilePropertiesWithResponse(String poolId, String nodeId, String filePath, RequestOptions requestOptions)"
  nameWithType: "BatchClient.getNodeFilePropertiesWithResponse(String poolId, String nodeId, String filePath, RequestOptions requestOptions)"
  summary: "Gets the properties of the specified Compute Node file."
  parameters:
  - description: "The ID of the Pool that contains the Compute Node."
    name: "poolId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The ID of the Compute Node."
    name: "nodeId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The path to the file or directory."
    name: "filePath"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<Void> getNodeFilePropertiesWithResponse(String poolId, String nodeId, String filePath, RequestOptions requestOptions)"
  desc: "Gets the properties of the specified Compute Node file.\n\n**Query Parameters**\n\n    | ------- | ------- | -------- | -------------------------------------------------------------------------------------------------------------- |\n    | Name    | Type    | Required | Description                                                                                                    |\n    | timeOut | Integer | No       | Sets the maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. |\n\nYou can add these to a request with <xref uid=\"com.azure.core.http.rest.RequestOptions.addQueryParam\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RequestOptions#addQueryParam\"></xref>\n\n**Header Parameters**\n\n    | ------------------- | -------------- | -------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |\n    | Name                | Type           | Required | Description                                                                                                                                                                                            |\n    | if-modified-since   | OffsetDateTime | No       | A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has been modified since the specified time.     |\n    | if-unmodified-since | OffsetDateTime | No       | A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has not been modified since the specified time. |\n\nYou can add these to a request with <xref uid=\"com.azure.core.http.rest.RequestOptions.addHeader\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RequestOptions#addHeader\"></xref>"
  returns:
    description: "the properties of the specified Compute Node file along with <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Void.html\">Void</a>&gt;"
- uid: "com.azure.compute.batch.BatchClient.getNodeFileWithResponse(java.lang.String,java.lang.String,java.lang.String,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.compute.batch.BatchClient.getNodeFileWithResponse(String poolId, String nodeId, String filePath, RequestOptions requestOptions)"
  name: "getNodeFileWithResponse(String poolId, String nodeId, String filePath, RequestOptions requestOptions)"
  nameWithType: "BatchClient.getNodeFileWithResponse(String poolId, String nodeId, String filePath, RequestOptions requestOptions)"
  summary: "Returns the content of the specified Compute Node file."
  parameters:
  - description: "The ID of the Pool that contains the Compute Node."
    name: "poolId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The ID of the Compute Node from which you want to delete the file."
    name: "nodeId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The path to the file or directory that you want to delete."
    name: "filePath"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<BinaryData> getNodeFileWithResponse(String poolId, String nodeId, String filePath, RequestOptions requestOptions)"
  desc: "Returns the content of the specified Compute Node file.\n\n**Query Parameters**\n\n    | ------- | ------- | -------- | -------------------------------------------------------------------------------------------------------------- |\n    | Name    | Type    | Required | Description                                                                                                    |\n    | timeOut | Integer | No       | Sets the maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. |\n\nYou can add these to a request with <xref uid=\"com.azure.core.http.rest.RequestOptions.addQueryParam\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RequestOptions#addQueryParam\"></xref>\n\n**Header Parameters**\n\n    | ------------------- | -------------- | -------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |\n    | Name                | Type           | Required | Description                                                                                                                                                                                            |\n    | if-modified-since   | OffsetDateTime | No       | A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has been modified since the specified time.     |\n    | if-unmodified-since | OffsetDateTime | No       | A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has not been modified since the specified time. |\n    | ocp-range           | String         | No       | The byte range to be retrieved. The default is to retrieve the entire file. The format is bytes=startRange-endRange.                                                                                   |\n\nYou can add these to a request with <xref uid=\"com.azure.core.http.rest.RequestOptions.addHeader\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RequestOptions#addHeader\"></xref>\n\n**Response Body Schema**\n\n```java\nbyte[]\n```"
  returns:
    description: "represent a byte array along with <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.compute.batch.BatchClient.getNodeRemoteLoginSettings(java.lang.String,java.lang.String)"
  fullName: "com.azure.compute.batch.BatchClient.getNodeRemoteLoginSettings(String poolId, String nodeId)"
  name: "getNodeRemoteLoginSettings(String poolId, String nodeId)"
  nameWithType: "BatchClient.getNodeRemoteLoginSettings(String poolId, String nodeId)"
  summary: "Gets the settings required for remote login to a Compute Node."
  parameters:
  - description: "The ID of the Pool that contains the Compute Node."
    name: "poolId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The ID of the Compute Node for which to obtain the remote login settings."
    name: "nodeId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public BatchNodeRemoteLoginSettings getNodeRemoteLoginSettings(String poolId, String nodeId)"
  desc: "Gets the settings required for remote login to a Compute Node.\n\nBefore you can remotely login to a Compute Node using the remote login settings, you must create a user Account on the Compute Node. This API can be invoked only on Pools created with the virtual machine configuration property. For Pools created with a cloud service configuration, see the GetRemoteDesktop API."
  returns:
    description: "the remote login settings for a Compute Node."
    type: "<xref href=\"com.azure.compute.batch.models.BatchNodeRemoteLoginSettings?alt=com.azure.compute.batch.models.BatchNodeRemoteLoginSettings&text=BatchNodeRemoteLoginSettings\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.compute.batch.BatchClient.getNodeRemoteLoginSettings(java.lang.String,java.lang.String,com.azure.compute.batch.models.GetBatchNodeRemoteLoginSettingsOptions)"
  fullName: "com.azure.compute.batch.BatchClient.getNodeRemoteLoginSettings(String poolId, String nodeId, GetBatchNodeRemoteLoginSettingsOptions options)"
  name: "getNodeRemoteLoginSettings(String poolId, String nodeId, GetBatchNodeRemoteLoginSettingsOptions options)"
  nameWithType: "BatchClient.getNodeRemoteLoginSettings(String poolId, String nodeId, GetBatchNodeRemoteLoginSettingsOptions options)"
  summary: "Gets the settings required for remote login to a Compute Node."
  parameters:
  - description: "The ID of the Pool that contains the Compute Node."
    name: "poolId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The ID of the Compute Node for which to obtain the remote login settings."
    name: "nodeId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "A group containing optional parameters like timeOutInSeconds."
    name: "options"
    type: "<xref href=\"com.azure.compute.batch.models.GetBatchNodeRemoteLoginSettingsOptions?alt=com.azure.compute.batch.models.GetBatchNodeRemoteLoginSettingsOptions&text=GetBatchNodeRemoteLoginSettingsOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public BatchNodeRemoteLoginSettings getNodeRemoteLoginSettings(String poolId, String nodeId, GetBatchNodeRemoteLoginSettingsOptions options)"
  desc: "Gets the settings required for remote login to a Compute Node.\n\nBefore you can remotely login to a Compute Node using the remote login settings, you must create a user Account on the Compute Node. This API can be invoked only on Pools created with the virtual machine configuration property. For Pools created with a cloud service configuration, see the GetRemoteDesktop API."
  returns:
    description: "the remote login settings for a Compute Node."
    type: "<xref href=\"com.azure.compute.batch.models.BatchNodeRemoteLoginSettings?alt=com.azure.compute.batch.models.BatchNodeRemoteLoginSettings&text=BatchNodeRemoteLoginSettings\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.compute.batch.BatchClient.getNodeRemoteLoginSettingsWithResponse(java.lang.String,java.lang.String,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.compute.batch.BatchClient.getNodeRemoteLoginSettingsWithResponse(String poolId, String nodeId, RequestOptions requestOptions)"
  name: "getNodeRemoteLoginSettingsWithResponse(String poolId, String nodeId, RequestOptions requestOptions)"
  nameWithType: "BatchClient.getNodeRemoteLoginSettingsWithResponse(String poolId, String nodeId, RequestOptions requestOptions)"
  summary: "Gets the settings required for remote login to a Compute Node."
  parameters:
  - description: "The ID of the Pool that contains the Compute Node."
    name: "poolId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The ID of the Compute Node for which to obtain the remote login settings."
    name: "nodeId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<BinaryData> getNodeRemoteLoginSettingsWithResponse(String poolId, String nodeId, RequestOptions requestOptions)"
  desc: "Gets the settings required for remote login to a Compute Node.\n\nBefore you can remotely login to a Compute Node using the remote login settings, you must create a user Account on the Compute Node. This API can be invoked only on Pools created with the virtual machine configuration property. For Pools created with a cloud service configuration, see the GetRemoteDesktop API.\n\n**Query Parameters**\n\n    | ------- | ------- | -------- | -------------------------------------------------------------------------------------------------------------- |\n    | Name    | Type    | Required | Description                                                                                                    |\n    | timeOut | Integer | No       | Sets the maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. |\n\nYou can add these to a request with <xref uid=\"com.azure.core.http.rest.RequestOptions.addQueryParam\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RequestOptions#addQueryParam\"></xref>\n\n**Response Body Schema**\n\n```java\n{\n     remoteLoginIPAddress: String (Required)\n     remoteLoginPort: int (Required)\n }\n```"
  returns:
    description: "the remote login settings for a Compute Node along with <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.compute.batch.BatchClient.getNodeWithResponse(java.lang.String,java.lang.String,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.compute.batch.BatchClient.getNodeWithResponse(String poolId, String nodeId, RequestOptions requestOptions)"
  name: "getNodeWithResponse(String poolId, String nodeId, RequestOptions requestOptions)"
  nameWithType: "BatchClient.getNodeWithResponse(String poolId, String nodeId, RequestOptions requestOptions)"
  summary: "Gets information about the specified Compute Node."
  parameters:
  - description: "The ID of the Pool that contains the Compute Node."
    name: "poolId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The ID of the Compute Node that you want to get information about."
    name: "nodeId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<BinaryData> getNodeWithResponse(String poolId, String nodeId, RequestOptions requestOptions)"
  desc: "Gets information about the specified Compute Node.\n\n**Query Parameters**\n\n    | ------- | ------------ | -------- | -------------------------------------------------------------------------------------------------------------- |\n    | Name    | Type         | Required | Description                                                                                                    |\n    | timeOut | Integer      | No       | Sets the maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. |\n    | $select | List<String> | No       | An OData $select clause. In the form of \",\" separated string.                                                  |\n\nYou can add these to a request with <xref uid=\"com.azure.core.http.rest.RequestOptions.addQueryParam\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RequestOptions#addQueryParam\"></xref>\n\n**Response Body Schema**\n\n```java\n{\n     id: String (Optional)\n     url: String (Optional)\n     state: String(idle/rebooting/reimaging/running/unusable/creating/starting/waitingforstarttask/starttaskfailed/unknown/leavingpool/offline/preempted) (Optional)\n     schedulingState: String(enabled/disabled) (Optional)\n     stateTransitionTime: OffsetDateTime (Optional)\n     lastBootTime: OffsetDateTime (Optional)\n     allocationTime: OffsetDateTime (Optional)\n     ipAddress: String (Optional)\n     affinityId: String (Optional)\n     vmSize: String (Optional)\n     totalTasksRun: Integer (Optional)\n     runningTasksCount: Integer (Optional)\n     runningTaskSlotsCount: Integer (Optional)\n     totalTasksSucceeded: Integer (Optional)\n     recentTasks (Optional): [\n          (Optional){\n             taskUrl: String (Optional)\n             jobId: String (Optional)\n             taskId: String (Optional)\n             subtaskId: Integer (Optional)\n             taskState: String(active/preparing/running/completed) (Required)\n             executionInfo (Optional): {\n                 startTime: OffsetDateTime (Optional)\n                 endTime: OffsetDateTime (Optional)\n                 exitCode: Integer (Optional)\n                 containerInfo (Optional): {\n                     containerId: String (Optional)\n                     state: String (Optional)\n                     error: String (Optional)\n                 }\n                 failureInfo (Optional): {\n                     category: String(usererror/servererror) (Required)\n                     code: String (Optional)\n                     message: String (Optional)\n                     details (Optional): [\n                          (Optional){\n                             name: String (Optional)\n                             value: String (Optional)\n                         }\n                     ]\n                 }\n                 retryCount: int (Required)\n                 lastRetryTime: OffsetDateTime (Optional)\n                 requeueCount: int (Required)\n                 lastRequeueTime: OffsetDateTime (Optional)\n                 result: String(success/failure) (Optional)\n             }\n         }\n     ]\n     startTask (Optional): {\n         commandLine: String (Required)\n         containerSettings (Optional): {\n             containerRunOptions: String (Optional)\n             imageName: String (Required)\n             registry (Optional): {\n                 username: String (Optional)\n                 password: String (Optional)\n                 registryServer: String (Optional)\n                 identityReference (Optional): {\n                     resourceId: String (Optional)\n                 }\n             }\n             workingDirectory: String(taskWorkingDirectory/containerImageDefault) (Optional)\n         }\n         resourceFiles (Optional): [\n              (Optional){\n                 autoStorageContainerName: String (Optional)\n                 storageContainerUrl: String (Optional)\n                 httpUrl: String (Optional)\n                 blobPrefix: String (Optional)\n                 filePath: String (Optional)\n                 fileMode: String (Optional)\n                 identityReference (Optional): (recursive schema, see identityReference above)\n             }\n         ]\n         environmentSettings (Optional): [\n              (Optional){\n                 name: String (Required)\n                 value: String (Optional)\n             }\n         ]\n         userIdentity (Optional): {\n             username: String (Optional)\n             autoUser (Optional): {\n                 scope: String(task/pool) (Optional)\n                 elevationLevel: String(nonadmin/admin) (Optional)\n             }\n         }\n         maxTaskRetryCount: Integer (Optional)\n         waitForSuccess: Boolean (Optional)\n     }\n     startTaskInfo (Optional): {\n         state: String(running/completed) (Required)\n         startTime: OffsetDateTime (Required)\n         endTime: OffsetDateTime (Optional)\n         exitCode: Integer (Optional)\n         containerInfo (Optional): (recursive schema, see containerInfo above)\n         failureInfo (Optional): (recursive schema, see failureInfo above)\n         retryCount: int (Required)\n         lastRetryTime: OffsetDateTime (Optional)\n         result: String(success/failure) (Optional)\n     }\n     errors (Optional): [\n          (Optional){\n             code: String (Optional)\n             message: String (Optional)\n             errorDetails (Optional): [\n                 (recursive schema, see above)\n             ]\n         }\n     ]\n     isDedicated: Boolean (Optional)\n     endpointConfiguration (Optional): {\n         inboundEndpoints (Required): [\n              (Required){\n                 name: String (Required)\n                 protocol: String(tcp/udp) (Required)\n                 publicIPAddress: String (Required)\n                 publicFQDN: String (Required)\n                 frontendPort: int (Required)\n                 backendPort: int (Required)\n             }\n         ]\n     }\n     nodeAgentInfo (Optional): {\n         version: String (Required)\n         lastUpdateTime: OffsetDateTime (Required)\n     }\n     virtualMachineInfo (Optional): {\n         imageReference (Optional): {\n             publisher: String (Optional)\n             offer: String (Optional)\n             sku: String (Optional)\n             version: String (Optional)\n             virtualMachineImageId: String (Optional)\n             exactVersion: String (Optional)\n         }\n     }\n }\n```"
  returns:
    description: "information about the specified Compute Node along with <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.compute.batch.BatchClient.getPool(java.lang.String)"
  fullName: "com.azure.compute.batch.BatchClient.getPool(String poolId)"
  name: "getPool(String poolId)"
  nameWithType: "BatchClient.getPool(String poolId)"
  summary: "Gets information about the specified Pool using the options provided in options."
  parameters:
  - description: "The ID of the Pool to get."
    name: "poolId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public BatchPool getPool(String poolId)"
  desc: "Gets information about the specified Pool using the options provided in options."
  returns:
    description: "information about the specified Pool."
    type: "<xref href=\"com.azure.compute.batch.models.BatchPool?alt=com.azure.compute.batch.models.BatchPool&text=BatchPool\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.compute.batch.BatchClient.getPool(java.lang.String,com.azure.compute.batch.models.GetBatchPoolOptions)"
  fullName: "com.azure.compute.batch.BatchClient.getPool(String poolId, GetBatchPoolOptions options)"
  name: "getPool(String poolId, GetBatchPoolOptions options)"
  nameWithType: "BatchClient.getPool(String poolId, GetBatchPoolOptions options)"
  summary: "Gets information about the specified Pool using the options provided in options."
  parameters:
  - description: "The ID of the Pool to get."
    name: "poolId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "A group of optional parameters that includes timeOutInSeconds, select, expand, and\n requestConditions."
    name: "options"
    type: "<xref href=\"com.azure.compute.batch.models.GetBatchPoolOptions?alt=com.azure.compute.batch.models.GetBatchPoolOptions&text=GetBatchPoolOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public BatchPool getPool(String poolId, GetBatchPoolOptions options)"
  desc: "Gets information about the specified Pool using the options provided in options."
  returns:
    description: "information about the specified Pool."
    type: "<xref href=\"com.azure.compute.batch.models.BatchPool?alt=com.azure.compute.batch.models.BatchPool&text=BatchPool\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.compute.batch.BatchClient.getPoolWithResponse(java.lang.String,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.compute.batch.BatchClient.getPoolWithResponse(String poolId, RequestOptions requestOptions)"
  name: "getPoolWithResponse(String poolId, RequestOptions requestOptions)"
  nameWithType: "BatchClient.getPoolWithResponse(String poolId, RequestOptions requestOptions)"
  summary: "Gets information about the specified Pool."
  parameters:
  - description: "The ID of the Pool to get."
    name: "poolId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<BinaryData> getPoolWithResponse(String poolId, RequestOptions requestOptions)"
  desc: "Gets information about the specified Pool.\n\n**Query Parameters**\n\n    | ------- | ------------ | -------- | -------------------------------------------------------------------------------------------------------------- |\n    | Name    | Type         | Required | Description                                                                                                    |\n    | timeOut | Integer      | No       | Sets the maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. |\n    | $select | List<String> | No       | An OData $select clause. In the form of \",\" separated string.                                                  |\n    | $expand | List<String> | No       | An OData $expand clause. In the form of \",\" separated string.                                                  |\n\nYou can add these to a request with <xref uid=\"com.azure.core.http.rest.RequestOptions.addQueryParam\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RequestOptions#addQueryParam\"></xref>\n\n**Header Parameters**\n\n    | ------------------- | -------------- | -------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n    | Name                | Type           | Required | Description                                                                                                                                                                                                          |\n    | if-match            | String         | No       | An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service exactly matches the value specified by the client. |\n    | if-none-match       | String         | No       | An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service does not match the value specified by the client.  |\n    | if-modified-since   | OffsetDateTime | No       | A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has been modified since the specified time.                   |\n    | if-unmodified-since | OffsetDateTime | No       | A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has not been modified since the specified time.               |\n\nYou can add these to a request with <xref uid=\"com.azure.core.http.rest.RequestOptions.addHeader\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RequestOptions#addHeader\"></xref>\n\n**Response Body Schema**\n\n```java\n{\n     id: String (Optional)\n     displayName: String (Optional)\n     url: String (Optional)\n     eTag: String (Optional)\n     lastModified: OffsetDateTime (Optional)\n     creationTime: OffsetDateTime (Optional)\n     state: String(active/deleting) (Optional)\n     stateTransitionTime: OffsetDateTime (Optional)\n     allocationState: String(steady/resizing/stopping) (Optional)\n     allocationStateTransitionTime: OffsetDateTime (Optional)\n     vmSize: String (Optional)\n     cloudServiceConfiguration (Optional): {\n         osFamily: String (Required)\n         osVersion: String (Optional)\n     }\n     virtualMachineConfiguration (Optional): {\n         imageReference (Required): {\n             publisher: String (Optional)\n             offer: String (Optional)\n             sku: String (Optional)\n             version: String (Optional)\n             virtualMachineImageId: String (Optional)\n             exactVersion: String (Optional)\n         }\n         nodeAgentSKUId: String (Required)\n         windowsConfiguration (Optional): {\n             enableAutomaticUpdates: Boolean (Optional)\n         }\n         dataDisks (Optional): [\n              (Optional){\n                 lun: int (Required)\n                 caching: String(none/readonly/readwrite) (Optional)\n                 diskSizeGB: int (Required)\n                 storageAccountType: String(standard_lrs/premium_lrs) (Optional)\n             }\n         ]\n         licenseType: String (Optional)\n         containerConfiguration (Optional): {\n             type: String(dockerCompatible/criCompatible) (Required)\n             containerImageNames (Optional): [\n                 String (Optional)\n             ]\n             containerRegistries (Optional): [\n                  (Optional){\n                     username: String (Optional)\n                     password: String (Optional)\n                     registryServer: String (Optional)\n                     identityReference (Optional): {\n                         resourceId: String (Optional)\n                     }\n                 }\n             ]\n         }\n         diskEncryptionConfiguration (Optional): {\n             targets (Optional): [\n                 String(osdisk/temporarydisk) (Optional)\n             ]\n         }\n         nodePlacementConfiguration (Optional): {\n             policy: String(regional/zonal) (Optional)\n         }\n         extensions (Optional): [\n              (Optional){\n                 name: String (Required)\n                 publisher: String (Required)\n                 type: String (Required)\n                 typeHandlerVersion: String (Optional)\n                 autoUpgradeMinorVersion: Boolean (Optional)\n                 enableAutomaticUpgrade: Boolean (Optional)\n                 settings (Optional): {\n                     String: String (Optional)\n                 }\n                 protectedSettings (Optional): {\n                     String: String (Optional)\n                 }\n                 provisionAfterExtensions (Optional): [\n                     String (Optional)\n                 ]\n             }\n         ]\n         osDisk (Optional): {\n             ephemeralOSDiskSettings (Optional): {\n                 placement: String(cachedisk) (Optional)\n             }\n         }\n     }\n     resizeTimeout: Duration (Optional)\n     resizeErrors (Optional): [\n          (Optional){\n             code: String (Optional)\n             message: String (Optional)\n             values (Optional): [\n                  (Optional){\n                     name: String (Optional)\n                     value: String (Optional)\n                 }\n             ]\n         }\n     ]\n     currentDedicatedNodes: Integer (Optional)\n     currentLowPriorityNodes: Integer (Optional)\n     targetDedicatedNodes: Integer (Optional)\n     targetLowPriorityNodes: Integer (Optional)\n     enableAutoScale: Boolean (Optional)\n     autoScaleFormula: String (Optional)\n     autoScaleEvaluationInterval: Duration (Optional)\n     autoScaleRun (Optional): {\n         timestamp: OffsetDateTime (Required)\n         results: String (Optional)\n         error (Optional): {\n             code: String (Optional)\n             message: String (Optional)\n             values (Optional): [\n                 (recursive schema, see above)\n             ]\n         }\n     }\n     enableInterNodeCommunication: Boolean (Optional)\n     networkConfiguration (Optional): {\n         subnetId: String (Optional)\n         dynamicVNetAssignmentScope: String(none/job) (Optional)\n         endpointConfiguration (Optional): {\n             inboundNATPools (Required): [\n                  (Required){\n                     name: String (Required)\n                     protocol: String(tcp/udp) (Required)\n                     backendPort: int (Required)\n                     frontendPortRangeStart: int (Required)\n                     frontendPortRangeEnd: int (Required)\n                     networkSecurityGroupRules (Optional): [\n                          (Optional){\n                             priority: int (Required)\n                             access: String(allow/deny) (Required)\n                             sourceAddressPrefix: String (Required)\n                             sourcePortRanges (Optional): [\n                                 String (Optional)\n                             ]\n                         }\n                     ]\n                 }\n             ]\n         }\n         publicIPAddressConfiguration (Optional): {\n             provision: String(batchmanaged/usermanaged/nopublicipaddresses) (Optional)\n             ipAddressIds (Optional): [\n                 String (Optional)\n             ]\n         }\n         enableAcceleratedNetworking: Boolean (Optional)\n     }\n     startTask (Optional): {\n         commandLine: String (Required)\n         containerSettings (Optional): {\n             containerRunOptions: String (Optional)\n             imageName: String (Required)\n             registry (Optional): (recursive schema, see registry above)\n             workingDirectory: String(taskWorkingDirectory/containerImageDefault) (Optional)\n         }\n         resourceFiles (Optional): [\n              (Optional){\n                 autoStorageContainerName: String (Optional)\n                 storageContainerUrl: String (Optional)\n                 httpUrl: String (Optional)\n                 blobPrefix: String (Optional)\n                 filePath: String (Optional)\n                 fileMode: String (Optional)\n                 identityReference (Optional): (recursive schema, see identityReference above)\n             }\n         ]\n         environmentSettings (Optional): [\n              (Optional){\n                 name: String (Required)\n                 value: String (Optional)\n             }\n         ]\n         userIdentity (Optional): {\n             username: String (Optional)\n             autoUser (Optional): {\n                 scope: String(task/pool) (Optional)\n                 elevationLevel: String(nonadmin/admin) (Optional)\n             }\n         }\n         maxTaskRetryCount: Integer (Optional)\n         waitForSuccess: Boolean (Optional)\n     }\n     applicationPackageReferences (Optional): [\n          (Optional){\n             applicationId: String (Required)\n             version: String (Optional)\n         }\n     ]\n     applicationLicenses (Optional): [\n         String (Optional)\n     ]\n     taskSlotsPerNode: Integer (Optional)\n     taskSchedulingPolicy (Optional): {\n         nodeFillType: String(spread/pack) (Required)\n     }\n     userAccounts (Optional): [\n          (Optional){\n             name: String (Required)\n             password: String (Required)\n             elevationLevel: String(nonadmin/admin) (Optional)\n             linuxUserConfiguration (Optional): {\n                 uid: Integer (Optional)\n                 gid: Integer (Optional)\n                 sshPrivateKey: String (Optional)\n             }\n             windowsUserConfiguration (Optional): {\n                 loginMode: String(batch/interactive) (Optional)\n             }\n         }\n     ]\n     metadata (Optional): [\n          (Optional){\n             name: String (Required)\n             value: String (Required)\n         }\n     ]\n     stats (Optional): {\n         url: String (Required)\n         startTime: OffsetDateTime (Required)\n         lastUpdateTime: OffsetDateTime (Required)\n         usageStats (Optional): {\n             startTime: OffsetDateTime (Required)\n             lastUpdateTime: OffsetDateTime (Required)\n             dedicatedCoreTime: Duration (Required)\n         }\n         resourceStats (Optional): {\n             startTime: OffsetDateTime (Required)\n             lastUpdateTime: OffsetDateTime (Required)\n             avgCPUPercentage: double (Required)\n             avgMemoryGiB: double (Required)\n             peakMemoryGiB: double (Required)\n             avgDiskGiB: double (Required)\n             peakDiskGiB: double (Required)\n             diskReadIOps: int (Required)\n             diskWriteIOps: int (Required)\n             diskReadGiB: double (Required)\n             diskWriteGiB: double (Required)\n             networkReadGiB: double (Required)\n             networkWriteGiB: double (Required)\n         }\n     }\n     mountConfiguration (Optional): [\n          (Optional){\n             azureBlobFileSystemConfiguration (Optional): {\n                 accountName: String (Required)\n                 containerName: String (Required)\n                 accountKey: String (Optional)\n                 sasKey: String (Optional)\n                 blobfuseOptions: String (Optional)\n                 relativeMountPath: String (Required)\n                 identityReference (Optional): (recursive schema, see identityReference above)\n             }\n             nfsMountConfiguration (Optional): {\n                 source: String (Required)\n                 relativeMountPath: String (Required)\n                 mountOptions: String (Optional)\n             }\n             cifsMountConfiguration (Optional): {\n                 username: String (Required)\n                 source: String (Required)\n                 relativeMountPath: String (Required)\n                 mountOptions: String (Optional)\n                 password: String (Required)\n             }\n             azureFileShareConfiguration (Optional): {\n                 accountName: String (Required)\n                 azureFileUrl: String (Required)\n                 accountKey: String (Required)\n                 relativeMountPath: String (Required)\n                 mountOptions: String (Optional)\n             }\n         }\n     ]\n     identity (Optional): {\n         type: String(UserAssigned/None) (Required)\n         userAssignedIdentities (Optional): [\n              (Optional){\n                 resourceId: String (Required)\n                 clientId: String (Optional)\n                 principalId: String (Optional)\n             }\n         ]\n     }\n     targetNodeCommunicationMode: String(default/classic/simplified) (Optional)\n     currentNodeCommunicationMode: String(default/classic/simplified) (Optional)\n }\n```"
  returns:
    description: "information about the specified Pool along with <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.compute.batch.BatchClient.getTask(java.lang.String,java.lang.String)"
  fullName: "com.azure.compute.batch.BatchClient.getTask(String jobId, String taskId)"
  name: "getTask(String jobId, String taskId)"
  nameWithType: "BatchClient.getTask(String jobId, String taskId)"
  summary: "Gets information about the specified Task."
  parameters:
  - description: "The ID of the Job that contains the Task."
    name: "jobId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The ID of the Task to get information about."
    name: "taskId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public BatchTask getTask(String jobId, String taskId)"
  desc: "Gets information about the specified Task.\n\nFor multi-instance Tasks, information such as affinityId, executionInfo, and nodeInfo refer to the primary Task. Use the list subtasks API to retrieve information about subtasks."
  returns:
    description: "batch will retry Tasks when a recovery operation is triggered on a Node. Examples of recovery operations\n include (but are not limited to) when an unhealthy Node is rebooted or a Compute Node disappeared due to host\n failure. Retries due to recovery operations are independent of and are not counted against the\n maxTaskRetryCount."
    type: "<xref href=\"com.azure.compute.batch.models.BatchTask?alt=com.azure.compute.batch.models.BatchTask&text=BatchTask\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.compute.batch.BatchClient.getTask(java.lang.String,java.lang.String,com.azure.compute.batch.models.GetBatchTaskOptions)"
  fullName: "com.azure.compute.batch.BatchClient.getTask(String jobId, String taskId, GetBatchTaskOptions options)"
  name: "getTask(String jobId, String taskId, GetBatchTaskOptions options)"
  nameWithType: "BatchClient.getTask(String jobId, String taskId, GetBatchTaskOptions options)"
  summary: "Gets information about the specified Task."
  parameters:
  - description: "The ID of the Job that contains the Task."
    name: "jobId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The ID of the Task to get information about."
    name: "taskId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "A group containing optional parameters like timeOutInSeconds, select, expand, and\n requestConditions."
    name: "options"
    type: "<xref href=\"com.azure.compute.batch.models.GetBatchTaskOptions?alt=com.azure.compute.batch.models.GetBatchTaskOptions&text=GetBatchTaskOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public BatchTask getTask(String jobId, String taskId, GetBatchTaskOptions options)"
  desc: "Gets information about the specified Task.\n\nFor multi-instance Tasks, information such as affinityId, executionInfo, and nodeInfo refer to the primary Task. Use the list subtasks API to retrieve information about subtasks."
  returns:
    description: "batch will retry Tasks when a recovery operation is triggered on a Node. Examples of recovery operations\n include (but are not limited to) when an unhealthy Node is rebooted or a Compute Node disappeared due to host\n failure. Retries due to recovery operations are independent of and are not counted against the\n maxTaskRetryCount."
    type: "<xref href=\"com.azure.compute.batch.models.BatchTask?alt=com.azure.compute.batch.models.BatchTask&text=BatchTask\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.compute.batch.BatchClient.getTaskFile(java.lang.String,java.lang.String,java.lang.String)"
  fullName: "com.azure.compute.batch.BatchClient.getTaskFile(String jobId, String taskId, String filePath)"
  name: "getTaskFile(String jobId, String taskId, String filePath)"
  nameWithType: "BatchClient.getTaskFile(String jobId, String taskId, String filePath)"
  summary: "Returns the content of the specified Task file."
  parameters:
  - description: "The ID of the Job that contains the Task."
    name: "jobId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The ID of the Task whose file you want to retrieve."
    name: "taskId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The path to the Task file that you want to get the content of."
    name: "filePath"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public BinaryData getTaskFile(String jobId, String taskId, String filePath)"
  desc: "Returns the content of the specified Task file."
  returns:
    description: "the response."
    type: "<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.compute.batch.BatchClient.getTaskFile(java.lang.String,java.lang.String,java.lang.String,com.azure.compute.batch.models.GetBatchTaskFileOptions)"
  fullName: "com.azure.compute.batch.BatchClient.getTaskFile(String jobId, String taskId, String filePath, GetBatchTaskFileOptions options)"
  name: "getTaskFile(String jobId, String taskId, String filePath, GetBatchTaskFileOptions options)"
  nameWithType: "BatchClient.getTaskFile(String jobId, String taskId, String filePath, GetBatchTaskFileOptions options)"
  summary: "Returns the content of the specified Task file."
  parameters:
  - description: "The ID of the Job that contains the Task."
    name: "jobId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The ID of the Task whose file you want to retrieve."
    name: "taskId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The path to the Task file that you want to get the content of."
    name: "filePath"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "A group containing optional parameters like timeOutInSeconds, ifModifiedSince, ifUnmodifiedSince,\n and ocpRange."
    name: "options"
    type: "<xref href=\"com.azure.compute.batch.models.GetBatchTaskFileOptions?alt=com.azure.compute.batch.models.GetBatchTaskFileOptions&text=GetBatchTaskFileOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public BinaryData getTaskFile(String jobId, String taskId, String filePath, GetBatchTaskFileOptions options)"
  desc: "Returns the content of the specified Task file."
  returns:
    description: "the response."
    type: "<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.compute.batch.BatchClient.getTaskFileProperties(java.lang.String,java.lang.String,java.lang.String)"
  fullName: "com.azure.compute.batch.BatchClient.getTaskFileProperties(String jobId, String taskId, String filePath)"
  name: "getTaskFileProperties(String jobId, String taskId, String filePath)"
  nameWithType: "BatchClient.getTaskFileProperties(String jobId, String taskId, String filePath)"
  summary: "Gets the properties of the specified Task file."
  parameters:
  - description: "The ID of the Job that contains the Task."
    name: "jobId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The ID of the Task whose file properties you want to retrieve."
    name: "taskId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The path to the Task file that you want to get the properties of."
    name: "filePath"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public FileResponseHeaderProperties getTaskFileProperties(String jobId, String taskId, String filePath)"
  desc: "Gets the properties of the specified Task file."
  returns:
    description: "The <xref uid=\"com.azure.compute.batch.models.FileResponseHeaderProperties\" data-throw-if-not-resolved=\"false\" data-raw-source=\"FileResponseHeaderProperties\"></xref> object containing the properties retrieved from the response\n headers."
    type: "<xref href=\"com.azure.compute.batch.models.FileResponseHeaderProperties?alt=com.azure.compute.batch.models.FileResponseHeaderProperties&text=FileResponseHeaderProperties\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.compute.batch.BatchClient.getTaskFileProperties(java.lang.String,java.lang.String,java.lang.String,com.azure.compute.batch.models.GetBatchTaskFilePropertiesOptions)"
  fullName: "com.azure.compute.batch.BatchClient.getTaskFileProperties(String jobId, String taskId, String filePath, GetBatchTaskFilePropertiesOptions options)"
  name: "getTaskFileProperties(String jobId, String taskId, String filePath, GetBatchTaskFilePropertiesOptions options)"
  nameWithType: "BatchClient.getTaskFileProperties(String jobId, String taskId, String filePath, GetBatchTaskFilePropertiesOptions options)"
  summary: "Gets the properties of the specified Task file."
  parameters:
  - description: "The ID of the Job that contains the Task."
    name: "jobId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The ID of the Task whose file properties you want to retrieve."
    name: "taskId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The path to the Task file that you want to get the properties of."
    name: "filePath"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "A group containing optional parameters like timeOutInSeconds, ifModifiedSince, and\n ifUnmodifiedSince."
    name: "options"
    type: "<xref href=\"com.azure.compute.batch.models.GetBatchTaskFilePropertiesOptions?alt=com.azure.compute.batch.models.GetBatchTaskFilePropertiesOptions&text=GetBatchTaskFilePropertiesOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public FileResponseHeaderProperties getTaskFileProperties(String jobId, String taskId, String filePath, GetBatchTaskFilePropertiesOptions options)"
  desc: "Gets the properties of the specified Task file."
  returns:
    description: "The <xref uid=\"com.azure.compute.batch.models.FileResponseHeaderProperties\" data-throw-if-not-resolved=\"false\" data-raw-source=\"FileResponseHeaderProperties\"></xref> object containing the properties retrieved from the response\n headers."
    type: "<xref href=\"com.azure.compute.batch.models.FileResponseHeaderProperties?alt=com.azure.compute.batch.models.FileResponseHeaderProperties&text=FileResponseHeaderProperties\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.compute.batch.BatchClient.getTaskFilePropertiesWithResponse(java.lang.String,java.lang.String,java.lang.String,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.compute.batch.BatchClient.getTaskFilePropertiesWithResponse(String jobId, String taskId, String filePath, RequestOptions requestOptions)"
  name: "getTaskFilePropertiesWithResponse(String jobId, String taskId, String filePath, RequestOptions requestOptions)"
  nameWithType: "BatchClient.getTaskFilePropertiesWithResponse(String jobId, String taskId, String filePath, RequestOptions requestOptions)"
  summary: "Gets the properties of the specified Task file."
  parameters:
  - description: "The ID of the Job that contains the Task."
    name: "jobId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The ID of the Task whose file you want to retrieve."
    name: "taskId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The path to the Task file that you want to get the content of."
    name: "filePath"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<Void> getTaskFilePropertiesWithResponse(String jobId, String taskId, String filePath, RequestOptions requestOptions)"
  desc: "Gets the properties of the specified Task file.\n\n**Query Parameters**\n\n    | ------- | ------- | -------- | -------------------------------------------------------------------------------------------------------------- |\n    | Name    | Type    | Required | Description                                                                                                    |\n    | timeOut | Integer | No       | Sets the maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. |\n\nYou can add these to a request with <xref uid=\"com.azure.core.http.rest.RequestOptions.addQueryParam\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RequestOptions#addQueryParam\"></xref>\n\n**Header Parameters**\n\n    | ------------------- | -------------- | -------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |\n    | Name                | Type           | Required | Description                                                                                                                                                                                            |\n    | if-modified-since   | OffsetDateTime | No       | A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has been modified since the specified time.     |\n    | if-unmodified-since | OffsetDateTime | No       | A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has not been modified since the specified time. |\n\nYou can add these to a request with <xref uid=\"com.azure.core.http.rest.RequestOptions.addHeader\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RequestOptions#addHeader\"></xref>"
  returns:
    description: "the properties of the specified Task file along with <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Void.html\">Void</a>&gt;"
- uid: "com.azure.compute.batch.BatchClient.getTaskFileWithResponse(java.lang.String,java.lang.String,java.lang.String,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.compute.batch.BatchClient.getTaskFileWithResponse(String jobId, String taskId, String filePath, RequestOptions requestOptions)"
  name: "getTaskFileWithResponse(String jobId, String taskId, String filePath, RequestOptions requestOptions)"
  nameWithType: "BatchClient.getTaskFileWithResponse(String jobId, String taskId, String filePath, RequestOptions requestOptions)"
  summary: "Returns the content of the specified Task file."
  parameters:
  - description: "The ID of the Job that contains the Task."
    name: "jobId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The ID of the Task whose file you want to retrieve."
    name: "taskId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The path to the Task file that you want to get the content of."
    name: "filePath"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<BinaryData> getTaskFileWithResponse(String jobId, String taskId, String filePath, RequestOptions requestOptions)"
  desc: "Returns the content of the specified Task file.\n\n**Query Parameters**\n\n    | ------- | ------- | -------- | -------------------------------------------------------------------------------------------------------------- |\n    | Name    | Type    | Required | Description                                                                                                    |\n    | timeOut | Integer | No       | Sets the maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. |\n\nYou can add these to a request with <xref uid=\"com.azure.core.http.rest.RequestOptions.addQueryParam\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RequestOptions#addQueryParam\"></xref>\n\n**Header Parameters**\n\n    | ------------------- | -------------- | -------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |\n    | Name                | Type           | Required | Description                                                                                                                                                                                            |\n    | if-modified-since   | OffsetDateTime | No       | A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has been modified since the specified time.     |\n    | if-unmodified-since | OffsetDateTime | No       | A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has not been modified since the specified time. |\n    | ocp-range           | String         | No       | The byte range to be retrieved. The default is to retrieve the entire file. The format is bytes=startRange-endRange.                                                                                   |\n\nYou can add these to a request with <xref uid=\"com.azure.core.http.rest.RequestOptions.addHeader\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RequestOptions#addHeader\"></xref>\n\n**Response Body Schema**\n\n```java\nBinaryData\n```"
  returns:
    description: "the response body along with <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.compute.batch.BatchClient.getTaskWithResponse(java.lang.String,java.lang.String,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.compute.batch.BatchClient.getTaskWithResponse(String jobId, String taskId, RequestOptions requestOptions)"
  name: "getTaskWithResponse(String jobId, String taskId, RequestOptions requestOptions)"
  nameWithType: "BatchClient.getTaskWithResponse(String jobId, String taskId, RequestOptions requestOptions)"
  summary: "Gets information about the specified Task."
  parameters:
  - description: "The ID of the Job that contains the Task."
    name: "jobId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The ID of the Task to get information about."
    name: "taskId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<BinaryData> getTaskWithResponse(String jobId, String taskId, RequestOptions requestOptions)"
  desc: "Gets information about the specified Task.\n\nFor multi-instance Tasks, information such as affinityId, executionInfo and nodeInfo refer to the primary Task. Use the list subtasks API to retrieve information about subtasks.\n\n**Query Parameters**\n\n    | ------- | ------------ | -------- | -------------------------------------------------------------------------------------------------------------- |\n    | Name    | Type         | Required | Description                                                                                                    |\n    | timeOut | Integer      | No       | Sets the maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. |\n    | $select | List<String> | No       | An OData $select clause. In the form of \",\" separated string.                                                  |\n    | $expand | List<String> | No       | An OData $expand clause. In the form of \",\" separated string.                                                  |\n\nYou can add these to a request with <xref uid=\"com.azure.core.http.rest.RequestOptions.addQueryParam\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RequestOptions#addQueryParam\"></xref>\n\n**Header Parameters**\n\n    | ------------------- | -------------- | -------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n    | Name                | Type           | Required | Description                                                                                                                                                                                                          |\n    | if-match            | String         | No       | An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service exactly matches the value specified by the client. |\n    | if-none-match       | String         | No       | An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service does not match the value specified by the client.  |\n    | if-modified-since   | OffsetDateTime | No       | A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has been modified since the specified time.                   |\n    | if-unmodified-since | OffsetDateTime | No       | A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has not been modified since the specified time.               |\n\nYou can add these to a request with <xref uid=\"com.azure.core.http.rest.RequestOptions.addHeader\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RequestOptions#addHeader\"></xref>\n\n**Response Body Schema**\n\n```java\n{\n     id: String (Optional)\n     displayName: String (Optional)\n     url: String (Optional)\n     eTag: String (Optional)\n     lastModified: OffsetDateTime (Optional)\n     creationTime: OffsetDateTime (Optional)\n     exitConditions (Optional): {\n         exitCodes (Optional): [\n              (Optional){\n                 code: int (Required)\n                 exitOptions (Required): {\n                     jobAction: String(none/disable/terminate) (Optional)\n                     dependencyAction: String(satisfy/block) (Optional)\n                 }\n             }\n         ]\n         exitCodeRanges (Optional): [\n              (Optional){\n                 start: int (Required)\n                 end: int (Required)\n                 exitOptions (Required): (recursive schema, see exitOptions above)\n             }\n         ]\n         preProcessingError (Optional): (recursive schema, see preProcessingError above)\n         fileUploadError (Optional): (recursive schema, see fileUploadError above)\n         default (Optional): (recursive schema, see default above)\n     }\n     state: String(active/preparing/running/completed) (Optional)\n     stateTransitionTime: OffsetDateTime (Optional)\n     previousState: String(active/preparing/running/completed) (Optional)\n     previousStateTransitionTime: OffsetDateTime (Optional)\n     commandLine: String (Optional)\n     containerSettings (Optional): {\n         containerRunOptions: String (Optional)\n         imageName: String (Required)\n         registry (Optional): {\n             username: String (Optional)\n             password: String (Optional)\n             registryServer: String (Optional)\n             identityReference (Optional): {\n                 resourceId: String (Optional)\n             }\n         }\n         workingDirectory: String(taskWorkingDirectory/containerImageDefault) (Optional)\n     }\n     resourceFiles (Optional): [\n          (Optional){\n             autoStorageContainerName: String (Optional)\n             storageContainerUrl: String (Optional)\n             httpUrl: String (Optional)\n             blobPrefix: String (Optional)\n             filePath: String (Optional)\n             fileMode: String (Optional)\n             identityReference (Optional): (recursive schema, see identityReference above)\n         }\n     ]\n     outputFiles (Optional): [\n          (Optional){\n             filePattern: String (Required)\n             destination (Required): {\n                 container (Optional): {\n                     path: String (Optional)\n                     containerUrl: String (Required)\n                     identityReference (Optional): (recursive schema, see identityReference above)\n                     uploadHeaders (Optional): [\n                          (Optional){\n                             name: String (Required)\n                             value: String (Optional)\n                         }\n                     ]\n                 }\n             }\n             uploadOptions (Required): {\n                 uploadCondition: String(tasksuccess/taskfailure/taskcompletion) (Required)\n             }\n         }\n     ]\n     environmentSettings (Optional): [\n          (Optional){\n             name: String (Required)\n             value: String (Optional)\n         }\n     ]\n     affinityInfo (Optional): {\n         affinityId: String (Required)\n     }\n     constraints (Optional): {\n         maxWallClockTime: Duration (Optional)\n         retentionTime: Duration (Optional)\n         maxTaskRetryCount: Integer (Optional)\n     }\n     requiredSlots: Integer (Optional)\n     userIdentity (Optional): {\n         username: String (Optional)\n         autoUser (Optional): {\n             scope: String(task/pool) (Optional)\n             elevationLevel: String(nonadmin/admin) (Optional)\n         }\n     }\n     executionInfo (Optional): {\n         startTime: OffsetDateTime (Optional)\n         endTime: OffsetDateTime (Optional)\n         exitCode: Integer (Optional)\n         containerInfo (Optional): {\n             containerId: String (Optional)\n             state: String (Optional)\n             error: String (Optional)\n         }\n         failureInfo (Optional): {\n             category: String(usererror/servererror) (Required)\n             code: String (Optional)\n             message: String (Optional)\n             details (Optional): [\n                  (Optional){\n                     name: String (Optional)\n                     value: String (Optional)\n                 }\n             ]\n         }\n         retryCount: int (Required)\n         lastRetryTime: OffsetDateTime (Optional)\n         requeueCount: int (Required)\n         lastRequeueTime: OffsetDateTime (Optional)\n         result: String(success/failure) (Optional)\n     }\n     nodeInfo (Optional): {\n         affinityId: String (Optional)\n         nodeUrl: String (Optional)\n         poolId: String (Optional)\n         nodeId: String (Optional)\n         taskRootDirectory: String (Optional)\n         taskRootDirectoryUrl: String (Optional)\n     }\n     multiInstanceSettings (Optional): {\n         numberOfInstances: Integer (Optional)\n         coordinationCommandLine: String (Required)\n         commonResourceFiles (Optional): [\n             (recursive schema, see above)\n         ]\n     }\n     stats (Optional): {\n         url: String (Required)\n         startTime: OffsetDateTime (Required)\n         lastUpdateTime: OffsetDateTime (Required)\n         userCPUTime: Duration (Required)\n         kernelCPUTime: Duration (Required)\n         wallClockTime: Duration (Required)\n         readIOps: int (Required)\n         writeIOps: int (Required)\n         readIOGiB: double (Required)\n         writeIOGiB: double (Required)\n         waitTime: Duration (Required)\n     }\n     dependsOn (Optional): {\n         taskIds (Optional): [\n             String (Optional)\n         ]\n         taskIdRanges (Optional): [\n              (Optional){\n                 start: int (Required)\n                 end: int (Required)\n             }\n         ]\n     }\n     applicationPackageReferences (Optional): [\n          (Optional){\n             applicationId: String (Required)\n             version: String (Optional)\n         }\n     ]\n     authenticationTokenSettings (Optional): {\n         access (Optional): [\n             String(job) (Optional)\n         ]\n     }\n }\n```"
  returns:
    description: "batch will retry Tasks when a recovery operation is triggered on a Node. Examples of recovery operations\n include (but are not limited to) when an unhealthy Node is rebooted or a Compute Node disappeared due to host\n failure. Retries due to recovery operations are independent of and are not counted against the\n maxTaskRetryCount along with <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.compute.batch.BatchClient.jobScheduleExists(java.lang.String)"
  fullName: "com.azure.compute.batch.BatchClient.jobScheduleExists(String jobScheduleId)"
  name: "jobScheduleExists(String jobScheduleId)"
  nameWithType: "BatchClient.jobScheduleExists(String jobScheduleId)"
  summary: "Checks the specified Job Schedule exists."
  parameters:
  - description: "The ID of the Job Schedule which you want to check."
    name: "jobScheduleId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public boolean jobScheduleExists(String jobScheduleId)"
  desc: "Checks the specified Job Schedule exists."
  returns:
    description: "whether resource exists."
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.compute.batch.BatchClient.jobScheduleExists(java.lang.String,com.azure.compute.batch.models.BatchJobScheduleExistsOptions)"
  fullName: "com.azure.compute.batch.BatchClient.jobScheduleExists(String jobScheduleId, BatchJobScheduleExistsOptions options)"
  name: "jobScheduleExists(String jobScheduleId, BatchJobScheduleExistsOptions options)"
  nameWithType: "BatchClient.jobScheduleExists(String jobScheduleId, BatchJobScheduleExistsOptions options)"
  summary: "Checks the specified Job Schedule exists."
  parameters:
  - description: "The ID of the Job Schedule which you want to check."
    name: "jobScheduleId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "A group of optional parameters containing timeOutInSeconds and requestConditions."
    name: "options"
    type: "<xref href=\"com.azure.compute.batch.models.BatchJobScheduleExistsOptions?alt=com.azure.compute.batch.models.BatchJobScheduleExistsOptions&text=BatchJobScheduleExistsOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public boolean jobScheduleExists(String jobScheduleId, BatchJobScheduleExistsOptions options)"
  desc: "Checks the specified Job Schedule exists."
  returns:
    description: "whether resource exists."
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.compute.batch.BatchClient.jobScheduleExistsWithResponse(java.lang.String,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.compute.batch.BatchClient.jobScheduleExistsWithResponse(String jobScheduleId, RequestOptions requestOptions)"
  name: "jobScheduleExistsWithResponse(String jobScheduleId, RequestOptions requestOptions)"
  nameWithType: "BatchClient.jobScheduleExistsWithResponse(String jobScheduleId, RequestOptions requestOptions)"
  summary: "Checks the specified Job Schedule exists."
  parameters:
  - description: "The ID of the Job Schedule which you want to check."
    name: "jobScheduleId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<Boolean> jobScheduleExistsWithResponse(String jobScheduleId, RequestOptions requestOptions)"
  desc: "Checks the specified Job Schedule exists.\n\n**Query Parameters**\n\n    | ------- | ------- | -------- | -------------------------------------------------------------------------------------------------------------- |\n    | Name    | Type    | Required | Description                                                                                                    |\n    | timeOut | Integer | No       | Sets the maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. |\n\nYou can add these to a request with <xref uid=\"com.azure.core.http.rest.RequestOptions.addQueryParam\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RequestOptions#addQueryParam\"></xref>\n\n**Header Parameters**\n\n    | ------------------- | -------------- | -------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n    | Name                | Type           | Required | Description                                                                                                                                                                                                          |\n    | if-match            | String         | No       | An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service exactly matches the value specified by the client. |\n    | if-none-match       | String         | No       | An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service does not match the value specified by the client.  |\n    | if-modified-since   | OffsetDateTime | No       | A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has been modified since the specified time.                   |\n    | if-unmodified-since | OffsetDateTime | No       | A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has not been modified since the specified time.               |\n\nYou can add these to a request with <xref uid=\"com.azure.core.http.rest.RequestOptions.addHeader\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RequestOptions#addHeader\"></xref>\n\n**Response Body Schema**\n\n```java\nboolean\n```"
  returns:
    description: "whether resource exists along with <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Boolean.html\">Boolean</a>&gt;"
- uid: "com.azure.compute.batch.BatchClient.listApplications()"
  fullName: "com.azure.compute.batch.BatchClient.listApplications()"
  name: "listApplications()"
  nameWithType: "BatchClient.listApplications()"
  summary: "Lists all of the applications available in the specified Account."
  syntax: "public PagedIterable<BatchApplication> listApplications()"
  desc: "Lists all of the applications available in the specified Account.\n\nThis operation returns only Applications and versions that are available for use on Compute Nodes; that is, that can be used in an Package reference. For administrator information about applications and versions that are not yet available to Compute Nodes, use the Azure portal or the Azure Resource Manager API."
  returns:
    description: "the result of listing the applications available in an Account as paginated response with <xref uid=\"com.azure.core.http.rest.PagedIterable\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedIterable\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.PagedIterable?alt=com.azure.core.http.rest.PagedIterable&text=PagedIterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.compute.batch.models.BatchApplication?alt=com.azure.compute.batch.models.BatchApplication&text=BatchApplication\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.compute.batch.BatchClient.listApplications(com.azure.compute.batch.models.ListBatchApplicationsOptions)"
  fullName: "com.azure.compute.batch.BatchClient.listApplications(ListBatchApplicationsOptions options)"
  name: "listApplications(ListBatchApplicationsOptions options)"
  nameWithType: "BatchClient.listApplications(ListBatchApplicationsOptions options)"
  summary: "Lists all of the applications available in the specified Account."
  parameters:
  - description: "A group of optional parameters that includes timeOutInSeconds."
    name: "options"
    type: "<xref href=\"com.azure.compute.batch.models.ListBatchApplicationsOptions?alt=com.azure.compute.batch.models.ListBatchApplicationsOptions&text=ListBatchApplicationsOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PagedIterable<BatchApplication> listApplications(ListBatchApplicationsOptions options)"
  desc: "Lists all of the applications available in the specified Account.\n\nThis operation returns only Applications and versions that are available for use on Compute Nodes; that is, that can be used in an Package reference. For administrator information about applications and versions that are not yet available to Compute Nodes, use the Azure portal or the Azure Resource Manager API."
  returns:
    description: "the result of listing the applications available in an Account as paginated response with <xref uid=\"com.azure.core.http.rest.PagedIterable\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedIterable\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.PagedIterable?alt=com.azure.core.http.rest.PagedIterable&text=PagedIterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.compute.batch.models.BatchApplication?alt=com.azure.compute.batch.models.BatchApplication&text=BatchApplication\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.compute.batch.BatchClient.listJobPreparationAndReleaseTaskStatus(java.lang.String)"
  fullName: "com.azure.compute.batch.BatchClient.listJobPreparationAndReleaseTaskStatus(String jobId)"
  name: "listJobPreparationAndReleaseTaskStatus(String jobId)"
  nameWithType: "BatchClient.listJobPreparationAndReleaseTaskStatus(String jobId)"
  summary: "Lists the execution status of the Job Preparation and Job Release Task for the specified Job across the Compute Nodes where the Job has run."
  parameters:
  - description: "The ID of the Job."
    name: "jobId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public PagedIterable<BatchJobPreparationAndReleaseTaskStatus> listJobPreparationAndReleaseTaskStatus(String jobId)"
  desc: "Lists the execution status of the Job Preparation and Job Release Task for the specified Job across the Compute Nodes where the Job has run.\n\nThis API returns the Job Preparation and Job Release Task status on all Compute Nodes that have run the Job Preparation or Job Release Task. This includes Compute Nodes which have since been removed from the Pool. If this API is invoked on a Job which has no Job Preparation or Job Release Task, the Batch service returns HTTP status code 409 (Conflict) with an error code of JobPreparationTaskNotSpecified."
  returns:
    description: "the result of listing the status of the Job Preparation and Job Release Tasks for a Job as paginated\n response with <xref uid=\"com.azure.core.http.rest.PagedIterable\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedIterable\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.PagedIterable?alt=com.azure.core.http.rest.PagedIterable&text=PagedIterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.compute.batch.models.BatchJobPreparationAndReleaseTaskStatus?alt=com.azure.compute.batch.models.BatchJobPreparationAndReleaseTaskStatus&text=BatchJobPreparationAndReleaseTaskStatus\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.compute.batch.BatchClient.listJobPreparationAndReleaseTaskStatus(java.lang.String,com.azure.compute.batch.models.ListBatchJobPreparationAndReleaseTaskStatusOptions)"
  fullName: "com.azure.compute.batch.BatchClient.listJobPreparationAndReleaseTaskStatus(String jobId, ListBatchJobPreparationAndReleaseTaskStatusOptions options)"
  name: "listJobPreparationAndReleaseTaskStatus(String jobId, ListBatchJobPreparationAndReleaseTaskStatusOptions options)"
  nameWithType: "BatchClient.listJobPreparationAndReleaseTaskStatus(String jobId, ListBatchJobPreparationAndReleaseTaskStatusOptions options)"
  summary: "Lists the execution status of the Job Preparation and Job Release Task for the specified Job across the Compute Nodes where the Job has run."
  parameters:
  - description: "The ID of the Job."
    name: "jobId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "A group of optional parameters containing timeOutInSeconds, filter, and select."
    name: "options"
    type: "<xref href=\"com.azure.compute.batch.models.ListBatchJobPreparationAndReleaseTaskStatusOptions?alt=com.azure.compute.batch.models.ListBatchJobPreparationAndReleaseTaskStatusOptions&text=ListBatchJobPreparationAndReleaseTaskStatusOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PagedIterable<BatchJobPreparationAndReleaseTaskStatus> listJobPreparationAndReleaseTaskStatus(String jobId, ListBatchJobPreparationAndReleaseTaskStatusOptions options)"
  desc: "Lists the execution status of the Job Preparation and Job Release Task for the specified Job across the Compute Nodes where the Job has run.\n\nThis API returns the Job Preparation and Job Release Task status on all Compute Nodes that have run the Job Preparation or Job Release Task. This includes Compute Nodes which have since been removed from the Pool. If this API is invoked on a Job which has no Job Preparation or Job Release Task, the Batch service returns HTTP status code 409 (Conflict) with an error code of JobPreparationTaskNotSpecified."
  returns:
    description: "the result of listing the status of the Job Preparation and Job Release Tasks for a Job as paginated\n response with <xref uid=\"com.azure.core.http.rest.PagedIterable\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedIterable\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.PagedIterable?alt=com.azure.core.http.rest.PagedIterable&text=PagedIterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.compute.batch.models.BatchJobPreparationAndReleaseTaskStatus?alt=com.azure.compute.batch.models.BatchJobPreparationAndReleaseTaskStatus&text=BatchJobPreparationAndReleaseTaskStatus\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.compute.batch.BatchClient.listJobSchedules()"
  fullName: "com.azure.compute.batch.BatchClient.listJobSchedules()"
  name: "listJobSchedules()"
  nameWithType: "BatchClient.listJobSchedules()"
  summary: "Lists all of the Job Schedules in the specified Account."
  syntax: "public PagedIterable<BatchJobSchedule> listJobSchedules()"
  desc: "Lists all of the Job Schedules in the specified Account."
  returns:
    description: "the result of listing the Job Schedules in an Account as paginated response with <xref uid=\"com.azure.core.http.rest.PagedIterable\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedIterable\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.PagedIterable?alt=com.azure.core.http.rest.PagedIterable&text=PagedIterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.compute.batch.models.BatchJobSchedule?alt=com.azure.compute.batch.models.BatchJobSchedule&text=BatchJobSchedule\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.compute.batch.BatchClient.listJobSchedules(com.azure.compute.batch.models.ListBatchJobSchedulesOptions)"
  fullName: "com.azure.compute.batch.BatchClient.listJobSchedules(ListBatchJobSchedulesOptions options)"
  name: "listJobSchedules(ListBatchJobSchedulesOptions options)"
  nameWithType: "BatchClient.listJobSchedules(ListBatchJobSchedulesOptions options)"
  summary: "Lists all of the Job Schedules in the specified Account."
  parameters:
  - description: "A group containing optional parameters like timeOutInSeconds, filter, select, and\n expand."
    name: "options"
    type: "<xref href=\"com.azure.compute.batch.models.ListBatchJobSchedulesOptions?alt=com.azure.compute.batch.models.ListBatchJobSchedulesOptions&text=ListBatchJobSchedulesOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PagedIterable<BatchJobSchedule> listJobSchedules(ListBatchJobSchedulesOptions options)"
  desc: "Lists all of the Job Schedules in the specified Account."
  returns:
    description: "the result of listing the Job Schedules in an Account as paginated response with <xref uid=\"com.azure.core.http.rest.PagedIterable\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedIterable\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.PagedIterable?alt=com.azure.core.http.rest.PagedIterable&text=PagedIterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.compute.batch.models.BatchJobSchedule?alt=com.azure.compute.batch.models.BatchJobSchedule&text=BatchJobSchedule\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.compute.batch.BatchClient.listJobs()"
  fullName: "com.azure.compute.batch.BatchClient.listJobs()"
  name: "listJobs()"
  nameWithType: "BatchClient.listJobs()"
  summary: "Lists all of the Jobs in the specified Account."
  syntax: "public PagedIterable<BatchJob> listJobs()"
  desc: "Lists all of the Jobs in the specified Account."
  returns:
    description: "the result of listing the Jobs in an Account as paginated response with <xref uid=\"com.azure.core.http.rest.PagedIterable\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedIterable\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.PagedIterable?alt=com.azure.core.http.rest.PagedIterable&text=PagedIterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.compute.batch.models.BatchJob?alt=com.azure.compute.batch.models.BatchJob&text=BatchJob\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.compute.batch.BatchClient.listJobs(com.azure.compute.batch.models.ListBatchJobsOptions)"
  fullName: "com.azure.compute.batch.BatchClient.listJobs(ListBatchJobsOptions options)"
  name: "listJobs(ListBatchJobsOptions options)"
  nameWithType: "BatchClient.listJobs(ListBatchJobsOptions options)"
  summary: "Lists all of the Jobs in the specified Account."
  parameters:
  - description: "A group of optional parameters containing timeOutInSeconds, filter, select, and\n expand."
    name: "options"
    type: "<xref href=\"com.azure.compute.batch.models.ListBatchJobsOptions?alt=com.azure.compute.batch.models.ListBatchJobsOptions&text=ListBatchJobsOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PagedIterable<BatchJob> listJobs(ListBatchJobsOptions options)"
  desc: "Lists all of the Jobs in the specified Account."
  returns:
    description: "the result of listing the Jobs in an Account as paginated response with <xref uid=\"com.azure.core.http.rest.PagedIterable\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedIterable\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.PagedIterable?alt=com.azure.core.http.rest.PagedIterable&text=PagedIterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.compute.batch.models.BatchJob?alt=com.azure.compute.batch.models.BatchJob&text=BatchJob\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.compute.batch.BatchClient.listJobsFromSchedule(java.lang.String)"
  fullName: "com.azure.compute.batch.BatchClient.listJobsFromSchedule(String jobScheduleId)"
  name: "listJobsFromSchedule(String jobScheduleId)"
  nameWithType: "BatchClient.listJobsFromSchedule(String jobScheduleId)"
  summary: "Lists the Jobs that have been created under the specified Job Schedule."
  parameters:
  - description: "The ID of the Job Schedule from which you want to get a list of Jobs."
    name: "jobScheduleId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public PagedIterable<BatchJob> listJobsFromSchedule(String jobScheduleId)"
  desc: "Lists the Jobs that have been created under the specified Job Schedule."
  returns:
    description: "the result of listing the Jobs in an Account as paginated response with <xref uid=\"com.azure.core.http.rest.PagedIterable\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedIterable\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.PagedIterable?alt=com.azure.core.http.rest.PagedIterable&text=PagedIterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.compute.batch.models.BatchJob?alt=com.azure.compute.batch.models.BatchJob&text=BatchJob\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.compute.batch.BatchClient.listJobsFromSchedule(java.lang.String,com.azure.compute.batch.models.ListBatchJobsFromScheduleOptions)"
  fullName: "com.azure.compute.batch.BatchClient.listJobsFromSchedule(String jobScheduleId, ListBatchJobsFromScheduleOptions options)"
  name: "listJobsFromSchedule(String jobScheduleId, ListBatchJobsFromScheduleOptions options)"
  nameWithType: "BatchClient.listJobsFromSchedule(String jobScheduleId, ListBatchJobsFromScheduleOptions options)"
  summary: "Lists the Jobs that have been created under the specified Job Schedule."
  parameters:
  - description: "The ID of the Job Schedule from which you want to get a list of Jobs."
    name: "jobScheduleId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "A group of optional parameters containing timeOutInSeconds, filter, select, and\n expand."
    name: "options"
    type: "<xref href=\"com.azure.compute.batch.models.ListBatchJobsFromScheduleOptions?alt=com.azure.compute.batch.models.ListBatchJobsFromScheduleOptions&text=ListBatchJobsFromScheduleOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PagedIterable<BatchJob> listJobsFromSchedule(String jobScheduleId, ListBatchJobsFromScheduleOptions options)"
  desc: "Lists the Jobs that have been created under the specified Job Schedule."
  returns:
    description: "the result of listing the Jobs in an Account as paginated response with <xref uid=\"com.azure.core.http.rest.PagedIterable\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedIterable\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.PagedIterable?alt=com.azure.core.http.rest.PagedIterable&text=PagedIterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.compute.batch.models.BatchJob?alt=com.azure.compute.batch.models.BatchJob&text=BatchJob\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.compute.batch.BatchClient.listNodeExtensions(java.lang.String,java.lang.String)"
  fullName: "com.azure.compute.batch.BatchClient.listNodeExtensions(String poolId, String nodeId)"
  name: "listNodeExtensions(String poolId, String nodeId)"
  nameWithType: "BatchClient.listNodeExtensions(String poolId, String nodeId)"
  summary: "Lists the Compute Node Extensions in the specified Pool."
  parameters:
  - description: "The ID of the Pool that contains Compute Node."
    name: "poolId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The ID of the Compute Node that you want to list extensions."
    name: "nodeId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public PagedIterable<BatchNodeVMExtension> listNodeExtensions(String poolId, String nodeId)"
  desc: "Lists the Compute Node Extensions in the specified Pool."
  returns:
    description: "the result of listing the Compute Node extensions in a Node as paginated response with <xref uid=\"com.azure.core.http.rest.PagedIterable\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedIterable\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.PagedIterable?alt=com.azure.core.http.rest.PagedIterable&text=PagedIterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.compute.batch.models.BatchNodeVMExtension?alt=com.azure.compute.batch.models.BatchNodeVMExtension&text=BatchNodeVMExtension\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.compute.batch.BatchClient.listNodeExtensions(java.lang.String,java.lang.String,com.azure.compute.batch.models.ListBatchNodeExtensionsOptions)"
  fullName: "com.azure.compute.batch.BatchClient.listNodeExtensions(String poolId, String nodeId, ListBatchNodeExtensionsOptions options)"
  name: "listNodeExtensions(String poolId, String nodeId, ListBatchNodeExtensionsOptions options)"
  nameWithType: "BatchClient.listNodeExtensions(String poolId, String nodeId, ListBatchNodeExtensionsOptions options)"
  summary: "Lists the Compute Node Extensions in the specified Pool."
  parameters:
  - description: "The ID of the Pool that contains Compute Node."
    name: "poolId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The ID of the Compute Node that you want to list extensions."
    name: "nodeId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "A group containing optional parameters like timeOutInSeconds and select."
    name: "options"
    type: "<xref href=\"com.azure.compute.batch.models.ListBatchNodeExtensionsOptions?alt=com.azure.compute.batch.models.ListBatchNodeExtensionsOptions&text=ListBatchNodeExtensionsOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PagedIterable<BatchNodeVMExtension> listNodeExtensions(String poolId, String nodeId, ListBatchNodeExtensionsOptions options)"
  desc: "Lists the Compute Node Extensions in the specified Pool."
  returns:
    description: "the result of listing the Compute Node extensions in a Node as paginated response with <xref uid=\"com.azure.core.http.rest.PagedIterable\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedIterable\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.PagedIterable?alt=com.azure.core.http.rest.PagedIterable&text=PagedIterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.compute.batch.models.BatchNodeVMExtension?alt=com.azure.compute.batch.models.BatchNodeVMExtension&text=BatchNodeVMExtension\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.compute.batch.BatchClient.listNodeFiles(java.lang.String,java.lang.String)"
  fullName: "com.azure.compute.batch.BatchClient.listNodeFiles(String poolId, String nodeId)"
  name: "listNodeFiles(String poolId, String nodeId)"
  nameWithType: "BatchClient.listNodeFiles(String poolId, String nodeId)"
  summary: "Lists all of the files in Task directories on the specified Compute Node."
  parameters:
  - description: "The ID of the Pool that contains the Compute Node."
    name: "poolId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The ID of the Compute Node whose files you want to list."
    name: "nodeId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public PagedIterable<BatchNodeFile> listNodeFiles(String poolId, String nodeId)"
  desc: "Lists all of the files in Task directories on the specified Compute Node."
  returns:
    description: "the result of listing the files on a Compute Node, or the files associated with a Task on a Compute Node\n as paginated response with <xref uid=\"com.azure.core.http.rest.PagedIterable\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedIterable\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.PagedIterable?alt=com.azure.core.http.rest.PagedIterable&text=PagedIterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.compute.batch.models.BatchNodeFile?alt=com.azure.compute.batch.models.BatchNodeFile&text=BatchNodeFile\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.compute.batch.BatchClient.listNodeFiles(java.lang.String,java.lang.String,com.azure.compute.batch.models.ListBatchNodeFilesOptions)"
  fullName: "com.azure.compute.batch.BatchClient.listNodeFiles(String poolId, String nodeId, ListBatchNodeFilesOptions options)"
  name: "listNodeFiles(String poolId, String nodeId, ListBatchNodeFilesOptions options)"
  nameWithType: "BatchClient.listNodeFiles(String poolId, String nodeId, ListBatchNodeFilesOptions options)"
  summary: "Lists all of the files in Task directories on the specified Compute Node."
  parameters:
  - description: "The ID of the Pool that contains the Compute Node."
    name: "poolId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The ID of the Compute Node whose files you want to list."
    name: "nodeId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "A group containing optional parameters like timeOutInSeconds, filter, and recursive."
    name: "options"
    type: "<xref href=\"com.azure.compute.batch.models.ListBatchNodeFilesOptions?alt=com.azure.compute.batch.models.ListBatchNodeFilesOptions&text=ListBatchNodeFilesOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PagedIterable<BatchNodeFile> listNodeFiles(String poolId, String nodeId, ListBatchNodeFilesOptions options)"
  desc: "Lists all of the files in Task directories on the specified Compute Node."
  returns:
    description: "the result of listing the files on a Compute Node, or the files associated with a Task on a Compute Node\n as paginated response with <xref uid=\"com.azure.core.http.rest.PagedIterable\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedIterable\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.PagedIterable?alt=com.azure.core.http.rest.PagedIterable&text=PagedIterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.compute.batch.models.BatchNodeFile?alt=com.azure.compute.batch.models.BatchNodeFile&text=BatchNodeFile\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.compute.batch.BatchClient.listNodes(java.lang.String)"
  fullName: "com.azure.compute.batch.BatchClient.listNodes(String poolId)"
  name: "listNodes(String poolId)"
  nameWithType: "BatchClient.listNodes(String poolId)"
  summary: "Lists the Compute Nodes in the specified Pool."
  parameters:
  - description: "The ID of the Pool from which you want to list Compute Nodes."
    name: "poolId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public PagedIterable<BatchNode> listNodes(String poolId)"
  desc: "Lists the Compute Nodes in the specified Pool."
  returns:
    description: "the result of listing the Compute Nodes in a Pool as paginated response with <xref uid=\"com.azure.core.http.rest.PagedIterable\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedIterable\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.PagedIterable?alt=com.azure.core.http.rest.PagedIterable&text=PagedIterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.compute.batch.models.BatchNode?alt=com.azure.compute.batch.models.BatchNode&text=BatchNode\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.compute.batch.BatchClient.listNodes(java.lang.String,com.azure.compute.batch.models.ListBatchNodesOptions)"
  fullName: "com.azure.compute.batch.BatchClient.listNodes(String poolId, ListBatchNodesOptions options)"
  name: "listNodes(String poolId, ListBatchNodesOptions options)"
  nameWithType: "BatchClient.listNodes(String poolId, ListBatchNodesOptions options)"
  summary: "Lists the Compute Nodes in the specified Pool."
  parameters:
  - description: "The ID of the Pool from which you want to list Compute Nodes."
    name: "poolId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "A group containing optional parameters like timeOutInSeconds, filter, and select."
    name: "options"
    type: "<xref href=\"com.azure.compute.batch.models.ListBatchNodesOptions?alt=com.azure.compute.batch.models.ListBatchNodesOptions&text=ListBatchNodesOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PagedIterable<BatchNode> listNodes(String poolId, ListBatchNodesOptions options)"
  desc: "Lists the Compute Nodes in the specified Pool."
  returns:
    description: "the result of listing the Compute Nodes in a Pool as paginated response with <xref uid=\"com.azure.core.http.rest.PagedIterable\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedIterable\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.PagedIterable?alt=com.azure.core.http.rest.PagedIterable&text=PagedIterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.compute.batch.models.BatchNode?alt=com.azure.compute.batch.models.BatchNode&text=BatchNode\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.compute.batch.BatchClient.listPoolNodeCounts()"
  fullName: "com.azure.compute.batch.BatchClient.listPoolNodeCounts()"
  name: "listPoolNodeCounts()"
  nameWithType: "BatchClient.listPoolNodeCounts()"
  summary: "Gets the number of Compute Nodes in each state, grouped by Pool."
  syntax: "public PagedIterable<BatchPoolNodeCounts> listPoolNodeCounts()"
  desc: "Gets the number of Compute Nodes in each state, grouped by Pool. Note that the numbers returned may not always be up to date. If you need exact node counts, use a list query."
  returns:
    description: "the number of Compute Nodes in each state, grouped by Pool as paginated response with <xref uid=\"com.azure.core.http.rest.PagedIterable\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedIterable\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.PagedIterable?alt=com.azure.core.http.rest.PagedIterable&text=PagedIterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.compute.batch.models.BatchPoolNodeCounts?alt=com.azure.compute.batch.models.BatchPoolNodeCounts&text=BatchPoolNodeCounts\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.compute.batch.BatchClient.listPoolNodeCounts(com.azure.compute.batch.models.ListBatchPoolNodeCountsOptions)"
  fullName: "com.azure.compute.batch.BatchClient.listPoolNodeCounts(ListBatchPoolNodeCountsOptions options)"
  name: "listPoolNodeCounts(ListBatchPoolNodeCountsOptions options)"
  nameWithType: "BatchClient.listPoolNodeCounts(ListBatchPoolNodeCountsOptions options)"
  summary: "Gets the number of Compute Nodes in each state, grouped by Pool."
  parameters:
  - description: "A group of optional parameters."
    name: "options"
    type: "<xref href=\"com.azure.compute.batch.models.ListBatchPoolNodeCountsOptions?alt=com.azure.compute.batch.models.ListBatchPoolNodeCountsOptions&text=ListBatchPoolNodeCountsOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PagedIterable<BatchPoolNodeCounts> listPoolNodeCounts(ListBatchPoolNodeCountsOptions options)"
  desc: "Gets the number of Compute Nodes in each state, grouped by Pool. Note that the numbers returned may not always be up to date. If you need exact node counts, use a list query."
  returns:
    description: "the number of Compute Nodes in each state, grouped by Pool as paginated response with <xref uid=\"com.azure.core.http.rest.PagedIterable\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedIterable\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.PagedIterable?alt=com.azure.core.http.rest.PagedIterable&text=PagedIterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.compute.batch.models.BatchPoolNodeCounts?alt=com.azure.compute.batch.models.BatchPoolNodeCounts&text=BatchPoolNodeCounts\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.compute.batch.BatchClient.listPoolUsageMetrics()"
  fullName: "com.azure.compute.batch.BatchClient.listPoolUsageMetrics()"
  name: "listPoolUsageMetrics()"
  nameWithType: "BatchClient.listPoolUsageMetrics()"
  summary: "Lists the usage metrics, aggregated by Pool across individual time intervals, for the specified Account."
  syntax: "public PagedIterable<BatchPoolUsageMetrics> listPoolUsageMetrics()"
  desc: "Lists the usage metrics, aggregated by Pool across individual time intervals, for the specified Account.\n\nIf you do not specify a $filter clause including a poolId, the response includes all Pools that existed in the Account in the time range of the returned aggregation intervals. If you do not specify a $filter clause including a startTime or endTime these filters default to the start and end times of the last aggregation interval currently available; that is, only the last aggregation interval is returned."
  returns:
    description: "the result of a listing the usage metrics for an Account as paginated response with <xref uid=\"com.azure.core.http.rest.PagedIterable\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedIterable\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.PagedIterable?alt=com.azure.core.http.rest.PagedIterable&text=PagedIterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.compute.batch.models.BatchPoolUsageMetrics?alt=com.azure.compute.batch.models.BatchPoolUsageMetrics&text=BatchPoolUsageMetrics\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.compute.batch.BatchClient.listPoolUsageMetrics(com.azure.compute.batch.models.ListBatchPoolUsageMetricsOptions)"
  fullName: "com.azure.compute.batch.BatchClient.listPoolUsageMetrics(ListBatchPoolUsageMetricsOptions options)"
  name: "listPoolUsageMetrics(ListBatchPoolUsageMetricsOptions options)"
  nameWithType: "BatchClient.listPoolUsageMetrics(ListBatchPoolUsageMetricsOptions options)"
  summary: "Lists the usage metrics, aggregated by Pool across individual time intervals, for the specified Account."
  parameters:
  - description: "A group of optional parameters that includes timeOutInSeconds, starttime, endtime, and\n filter."
    name: "options"
    type: "<xref href=\"com.azure.compute.batch.models.ListBatchPoolUsageMetricsOptions?alt=com.azure.compute.batch.models.ListBatchPoolUsageMetricsOptions&text=ListBatchPoolUsageMetricsOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PagedIterable<BatchPoolUsageMetrics> listPoolUsageMetrics(ListBatchPoolUsageMetricsOptions options)"
  desc: "Lists the usage metrics, aggregated by Pool across individual time intervals, for the specified Account.\n\nIf you do not specify a $filter clause including a poolId, the response includes all Pools that existed in the Account in the time range of the returned aggregation intervals. If you do not specify a $filter clause including a startTime or endTime these filters default to the start and end times of the last aggregation interval currently available; that is, only the last aggregation interval is returned."
  returns:
    description: "the result of a listing the usage metrics for an Account as paginated response with <xref uid=\"com.azure.core.http.rest.PagedIterable\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedIterable\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.PagedIterable?alt=com.azure.core.http.rest.PagedIterable&text=PagedIterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.compute.batch.models.BatchPoolUsageMetrics?alt=com.azure.compute.batch.models.BatchPoolUsageMetrics&text=BatchPoolUsageMetrics\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.compute.batch.BatchClient.listPools()"
  fullName: "com.azure.compute.batch.BatchClient.listPools()"
  name: "listPools()"
  nameWithType: "BatchClient.listPools()"
  summary: "Lists all of the Pools in the specified Account using options provided in options."
  syntax: "public PagedIterable<BatchPool> listPools()"
  desc: "Lists all of the Pools in the specified Account using options provided in options."
  returns:
    description: "the result of listing the Pools in an Account as paginated response with <xref uid=\"com.azure.core.http.rest.PagedIterable\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedIterable\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.PagedIterable?alt=com.azure.core.http.rest.PagedIterable&text=PagedIterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.compute.batch.models.BatchPool?alt=com.azure.compute.batch.models.BatchPool&text=BatchPool\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.compute.batch.BatchClient.listPools(com.azure.compute.batch.models.ListBatchPoolsOptions)"
  fullName: "com.azure.compute.batch.BatchClient.listPools(ListBatchPoolsOptions options)"
  name: "listPools(ListBatchPoolsOptions options)"
  nameWithType: "BatchClient.listPools(ListBatchPoolsOptions options)"
  summary: "Lists all of the Pools in the specified Account using options provided in options."
  parameters:
  - description: "A group of optional parameters that includes timeOutInSeconds, filter, select, and\n expand."
    name: "options"
    type: "<xref href=\"com.azure.compute.batch.models.ListBatchPoolsOptions?alt=com.azure.compute.batch.models.ListBatchPoolsOptions&text=ListBatchPoolsOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PagedIterable<BatchPool> listPools(ListBatchPoolsOptions options)"
  desc: "Lists all of the Pools in the specified Account using options provided in options."
  returns:
    description: "the result of listing the Pools in an Account as paginated response with <xref uid=\"com.azure.core.http.rest.PagedIterable\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedIterable\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.PagedIterable?alt=com.azure.core.http.rest.PagedIterable&text=PagedIterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.compute.batch.models.BatchPool?alt=com.azure.compute.batch.models.BatchPool&text=BatchPool\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.compute.batch.BatchClient.listSubTasks(java.lang.String,java.lang.String)"
  fullName: "com.azure.compute.batch.BatchClient.listSubTasks(String jobId, String taskId)"
  name: "listSubTasks(String jobId, String taskId)"
  nameWithType: "BatchClient.listSubTasks(String jobId, String taskId)"
  summary: "Lists all of the subtasks that are associated with the specified multi-instance Task."
  parameters:
  - description: "The ID of the Job."
    name: "jobId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The ID of the Task."
    name: "taskId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public PagedIterable<BatchSubtask> listSubTasks(String jobId, String taskId)"
  desc: "Lists all of the subtasks that are associated with the specified multi-instance Task.\n\nIf the Task is not a multi-instance Task then this returns an empty collection."
  returns:
    description: "the result of listing the subtasks of a Task as paginated response with <xref uid=\"com.azure.core.http.rest.PagedIterable\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedIterable\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.PagedIterable?alt=com.azure.core.http.rest.PagedIterable&text=PagedIterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.compute.batch.models.BatchSubtask?alt=com.azure.compute.batch.models.BatchSubtask&text=BatchSubtask\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.compute.batch.BatchClient.listSubTasks(java.lang.String,java.lang.String,com.azure.compute.batch.models.ListBatchSubTasksOptions)"
  fullName: "com.azure.compute.batch.BatchClient.listSubTasks(String jobId, String taskId, ListBatchSubTasksOptions options)"
  name: "listSubTasks(String jobId, String taskId, ListBatchSubTasksOptions options)"
  nameWithType: "BatchClient.listSubTasks(String jobId, String taskId, ListBatchSubTasksOptions options)"
  summary: "Lists all of the subtasks that are associated with the specified multi-instance Task."
  parameters:
  - description: "The ID of the Job."
    name: "jobId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The ID of the Task."
    name: "taskId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "A group containing optional parameters like timeOutInSeconds and select."
    name: "options"
    type: "<xref href=\"com.azure.compute.batch.models.ListBatchSubTasksOptions?alt=com.azure.compute.batch.models.ListBatchSubTasksOptions&text=ListBatchSubTasksOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PagedIterable<BatchSubtask> listSubTasks(String jobId, String taskId, ListBatchSubTasksOptions options)"
  desc: "Lists all of the subtasks that are associated with the specified multi-instance Task.\n\nIf the Task is not a multi-instance Task then this returns an empty collection."
  returns:
    description: "the result of listing the subtasks of a Task as paginated response with <xref uid=\"com.azure.core.http.rest.PagedIterable\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedIterable\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.PagedIterable?alt=com.azure.core.http.rest.PagedIterable&text=PagedIterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.compute.batch.models.BatchSubtask?alt=com.azure.compute.batch.models.BatchSubtask&text=BatchSubtask\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.compute.batch.BatchClient.listSupportedImages()"
  fullName: "com.azure.compute.batch.BatchClient.listSupportedImages()"
  name: "listSupportedImages()"
  nameWithType: "BatchClient.listSupportedImages()"
  summary: "Lists all Virtual Machine Images supported by the Azure Batch service."
  syntax: "public PagedIterable<BatchSupportedImage> listSupportedImages()"
  desc: "Lists all Virtual Machine Images supported by the Azure Batch service."
  returns:
    description: "the result of listing the supported Virtual Machine Images as paginated response with <xref uid=\"com.azure.core.http.rest.PagedIterable\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedIterable\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.PagedIterable?alt=com.azure.core.http.rest.PagedIterable&text=PagedIterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.compute.batch.models.BatchSupportedImage?alt=com.azure.compute.batch.models.BatchSupportedImage&text=BatchSupportedImage\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.compute.batch.BatchClient.listSupportedImages(com.azure.compute.batch.models.ListSupportedBatchImagesOptions)"
  fullName: "com.azure.compute.batch.BatchClient.listSupportedImages(ListSupportedBatchImagesOptions options)"
  name: "listSupportedImages(ListSupportedBatchImagesOptions options)"
  nameWithType: "BatchClient.listSupportedImages(ListSupportedBatchImagesOptions options)"
  summary: "Lists all Virtual Machine Images supported by the Azure Batch service."
  parameters:
  - description: "A group of optional parameters."
    name: "options"
    type: "<xref href=\"com.azure.compute.batch.models.ListSupportedBatchImagesOptions?alt=com.azure.compute.batch.models.ListSupportedBatchImagesOptions&text=ListSupportedBatchImagesOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PagedIterable<BatchSupportedImage> listSupportedImages(ListSupportedBatchImagesOptions options)"
  desc: "Lists all Virtual Machine Images supported by the Azure Batch service."
  returns:
    description: "the result of listing the supported Virtual Machine Images as paginated response with <xref uid=\"com.azure.core.http.rest.PagedIterable\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedIterable\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.PagedIterable?alt=com.azure.core.http.rest.PagedIterable&text=PagedIterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.compute.batch.models.BatchSupportedImage?alt=com.azure.compute.batch.models.BatchSupportedImage&text=BatchSupportedImage\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.compute.batch.BatchClient.listTaskFiles(java.lang.String,java.lang.String)"
  fullName: "com.azure.compute.batch.BatchClient.listTaskFiles(String jobId, String taskId)"
  name: "listTaskFiles(String jobId, String taskId)"
  nameWithType: "BatchClient.listTaskFiles(String jobId, String taskId)"
  summary: "Lists the files in a Task's directory on its Compute Node."
  parameters:
  - description: "The ID of the Job that contains the Task."
    name: "jobId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The ID of the Task whose files you want to list."
    name: "taskId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public PagedIterable<BatchNodeFile> listTaskFiles(String jobId, String taskId)"
  desc: "Lists the files in a Task's directory on its Compute Node."
  returns:
    description: "the result of listing the files on a Compute Node, or the files associated with a Task on a Compute Node\n as paginated response with <xref uid=\"com.azure.core.http.rest.PagedIterable\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedIterable\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.PagedIterable?alt=com.azure.core.http.rest.PagedIterable&text=PagedIterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.compute.batch.models.BatchNodeFile?alt=com.azure.compute.batch.models.BatchNodeFile&text=BatchNodeFile\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.compute.batch.BatchClient.listTaskFiles(java.lang.String,java.lang.String,com.azure.compute.batch.models.ListBatchTaskFilesOptions)"
  fullName: "com.azure.compute.batch.BatchClient.listTaskFiles(String jobId, String taskId, ListBatchTaskFilesOptions options)"
  name: "listTaskFiles(String jobId, String taskId, ListBatchTaskFilesOptions options)"
  nameWithType: "BatchClient.listTaskFiles(String jobId, String taskId, ListBatchTaskFilesOptions options)"
  summary: "Lists the files in a Task's directory on its Compute Node."
  parameters:
  - description: "The ID of the Job that contains the Task."
    name: "jobId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The ID of the Task whose files you want to list."
    name: "taskId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "A group containing optional parameters like timeOutInSeconds, filter, and recursive."
    name: "options"
    type: "<xref href=\"com.azure.compute.batch.models.ListBatchTaskFilesOptions?alt=com.azure.compute.batch.models.ListBatchTaskFilesOptions&text=ListBatchTaskFilesOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PagedIterable<BatchNodeFile> listTaskFiles(String jobId, String taskId, ListBatchTaskFilesOptions options)"
  desc: "Lists the files in a Task's directory on its Compute Node."
  returns:
    description: "the result of listing the files on a Compute Node, or the files associated with a Task on a Compute Node\n as paginated response with <xref uid=\"com.azure.core.http.rest.PagedIterable\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedIterable\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.PagedIterable?alt=com.azure.core.http.rest.PagedIterable&text=PagedIterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.compute.batch.models.BatchNodeFile?alt=com.azure.compute.batch.models.BatchNodeFile&text=BatchNodeFile\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.compute.batch.BatchClient.listTasks(java.lang.String)"
  fullName: "com.azure.compute.batch.BatchClient.listTasks(String jobId)"
  name: "listTasks(String jobId)"
  nameWithType: "BatchClient.listTasks(String jobId)"
  summary: "Lists all of the Tasks that are associated with the specified Job."
  parameters:
  - description: "The ID of the Job."
    name: "jobId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public PagedIterable<BatchTask> listTasks(String jobId)"
  desc: "Lists all of the Tasks that are associated with the specified Job.\n\nFor multi-instance Tasks, information such as affinityId, executionInfo, and nodeInfo refer to the primary Task. Use the list subtasks API to retrieve information about subtasks."
  returns:
    description: "the result of listing the Tasks in a Job as paginated response with <xref uid=\"com.azure.core.http.rest.PagedIterable\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedIterable\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.PagedIterable?alt=com.azure.core.http.rest.PagedIterable&text=PagedIterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.compute.batch.models.BatchTask?alt=com.azure.compute.batch.models.BatchTask&text=BatchTask\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.compute.batch.BatchClient.listTasks(java.lang.String,com.azure.compute.batch.models.ListBatchTasksOptions)"
  fullName: "com.azure.compute.batch.BatchClient.listTasks(String jobId, ListBatchTasksOptions options)"
  name: "listTasks(String jobId, ListBatchTasksOptions options)"
  nameWithType: "BatchClient.listTasks(String jobId, ListBatchTasksOptions options)"
  summary: "Lists all of the Tasks that are associated with the specified Job."
  parameters:
  - description: "The ID of the Job."
    name: "jobId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "A group containing optional parameters like timeOutInSeconds, filter, select, and\n expand."
    name: "options"
    type: "<xref href=\"com.azure.compute.batch.models.ListBatchTasksOptions?alt=com.azure.compute.batch.models.ListBatchTasksOptions&text=ListBatchTasksOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PagedIterable<BatchTask> listTasks(String jobId, ListBatchTasksOptions options)"
  desc: "Lists all of the Tasks that are associated with the specified Job.\n\nFor multi-instance Tasks, information such as affinityId, executionInfo, and nodeInfo refer to the primary Task. Use the list subtasks API to retrieve information about subtasks."
  returns:
    description: "the result of listing the Tasks in a Job as paginated response with <xref uid=\"com.azure.core.http.rest.PagedIterable\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedIterable\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.PagedIterable?alt=com.azure.core.http.rest.PagedIterable&text=PagedIterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.compute.batch.models.BatchTask?alt=com.azure.compute.batch.models.BatchTask&text=BatchTask\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.compute.batch.BatchClient.poolExists(java.lang.String)"
  fullName: "com.azure.compute.batch.BatchClient.poolExists(String poolId)"
  name: "poolExists(String poolId)"
  nameWithType: "BatchClient.poolExists(String poolId)"
  summary: "Gets basic properties of a Pool using the options provided in options."
  parameters:
  - description: "The ID of the Pool to get."
    name: "poolId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public boolean poolExists(String poolId)"
  desc: "Gets basic properties of a Pool using the options provided in options."
  returns:
    description: "basic properties of a Pool."
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.compute.batch.BatchClient.poolExists(java.lang.String,com.azure.compute.batch.models.BatchPoolExistsOptions)"
  fullName: "com.azure.compute.batch.BatchClient.poolExists(String poolId, BatchPoolExistsOptions options)"
  name: "poolExists(String poolId, BatchPoolExistsOptions options)"
  nameWithType: "BatchClient.poolExists(String poolId, BatchPoolExistsOptions options)"
  summary: "Gets basic properties of a Pool using the options provided in options."
  parameters:
  - description: "The ID of the Pool to get."
    name: "poolId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "A group of optional parameters that includes timeOutInSeconds and requestConditions."
    name: "options"
    type: "<xref href=\"com.azure.compute.batch.models.BatchPoolExistsOptions?alt=com.azure.compute.batch.models.BatchPoolExistsOptions&text=BatchPoolExistsOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public boolean poolExists(String poolId, BatchPoolExistsOptions options)"
  desc: "Gets basic properties of a Pool using the options provided in options."
  returns:
    description: "basic properties of a Pool."
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.compute.batch.BatchClient.poolExistsWithResponse(java.lang.String,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.compute.batch.BatchClient.poolExistsWithResponse(String poolId, RequestOptions requestOptions)"
  name: "poolExistsWithResponse(String poolId, RequestOptions requestOptions)"
  nameWithType: "BatchClient.poolExistsWithResponse(String poolId, RequestOptions requestOptions)"
  summary: "Gets basic properties of a Pool."
  parameters:
  - description: "The ID of the Pool to get."
    name: "poolId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<Boolean> poolExistsWithResponse(String poolId, RequestOptions requestOptions)"
  desc: "Gets basic properties of a Pool.\n\n**Query Parameters**\n\n    | ------- | ------- | -------- | -------------------------------------------------------------------------------------------------------------- |\n    | Name    | Type    | Required | Description                                                                                                    |\n    | timeOut | Integer | No       | Sets the maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. |\n\nYou can add these to a request with <xref uid=\"com.azure.core.http.rest.RequestOptions.addQueryParam\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RequestOptions#addQueryParam\"></xref>\n\n**Header Parameters**\n\n    | ------------------- | -------------- | -------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n    | Name                | Type           | Required | Description                                                                                                                                                                                                          |\n    | if-match            | String         | No       | An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service exactly matches the value specified by the client. |\n    | if-none-match       | String         | No       | An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service does not match the value specified by the client.  |\n    | if-modified-since   | OffsetDateTime | No       | A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has been modified since the specified time.                   |\n    | if-unmodified-since | OffsetDateTime | No       | A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has not been modified since the specified time.               |\n\nYou can add these to a request with <xref uid=\"com.azure.core.http.rest.RequestOptions.addHeader\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RequestOptions#addHeader\"></xref>\n\n**Response Body Schema**\n\n```java\nboolean\n```"
  returns:
    description: "basic properties of a Pool along with <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Boolean.html\">Boolean</a>&gt;"
- uid: "com.azure.compute.batch.BatchClient.reactivateTask(java.lang.String,java.lang.String)"
  fullName: "com.azure.compute.batch.BatchClient.reactivateTask(String jobId, String taskId)"
  name: "reactivateTask(String jobId, String taskId)"
  nameWithType: "BatchClient.reactivateTask(String jobId, String taskId)"
  summary: "Reactivates a Task, allowing it to run again even if its retry count has been exhausted."
  parameters:
  - description: "The ID of the Job containing the Task."
    name: "jobId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The ID of the Task to reactivate."
    name: "taskId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public void reactivateTask(String jobId, String taskId)"
  desc: "Reactivates a Task, allowing it to run again even if its retry count has been exhausted.\n\nReactivation makes a Task eligible to be retried again up to its maximum retry count. The Task's state is changed to active. As the Task is no longer in the completed state, any previous exit code or failure information is no longer available after reactivation. Each time a Task is reactivated, its retry count is reset to 0. Reactivation will fail for Tasks that are not completed or that previously completed successfully (with an exit code of 0). Additionally, it will fail if the Job has completed (or is terminating or deleting)."
- uid: "com.azure.compute.batch.BatchClient.reactivateTask(java.lang.String,java.lang.String,com.azure.compute.batch.models.ReactivateBatchTaskOptions)"
  fullName: "com.azure.compute.batch.BatchClient.reactivateTask(String jobId, String taskId, ReactivateBatchTaskOptions options)"
  name: "reactivateTask(String jobId, String taskId, ReactivateBatchTaskOptions options)"
  nameWithType: "BatchClient.reactivateTask(String jobId, String taskId, ReactivateBatchTaskOptions options)"
  summary: "Reactivates a Task, allowing it to run again even if its retry count has been exhausted."
  parameters:
  - description: "The ID of the Job containing the Task."
    name: "jobId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The ID of the Task to reactivate."
    name: "taskId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "A group containing optional parameters like timeOutInSeconds and requestConditions."
    name: "options"
    type: "<xref href=\"com.azure.compute.batch.models.ReactivateBatchTaskOptions?alt=com.azure.compute.batch.models.ReactivateBatchTaskOptions&text=ReactivateBatchTaskOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public void reactivateTask(String jobId, String taskId, ReactivateBatchTaskOptions options)"
  desc: "Reactivates a Task, allowing it to run again even if its retry count has been exhausted.\n\nReactivation makes a Task eligible to be retried again up to its maximum retry count. The Task's state is changed to active. As the Task is no longer in the completed state, any previous exit code or failure information is no longer available after reactivation. Each time a Task is reactivated, its retry count is reset to 0. Reactivation will fail for Tasks that are not completed or that previously completed successfully (with an exit code of 0). Additionally, it will fail if the Job has completed (or is terminating or deleting)."
- uid: "com.azure.compute.batch.BatchClient.reactivateTaskWithResponse(java.lang.String,java.lang.String,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.compute.batch.BatchClient.reactivateTaskWithResponse(String jobId, String taskId, RequestOptions requestOptions)"
  name: "reactivateTaskWithResponse(String jobId, String taskId, RequestOptions requestOptions)"
  nameWithType: "BatchClient.reactivateTaskWithResponse(String jobId, String taskId, RequestOptions requestOptions)"
  summary: "Reactivates a Task, allowing it to run again even if its retry count has been exhausted."
  parameters:
  - description: "The ID of the Job containing the Task."
    name: "jobId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The ID of the Task to reactivate."
    name: "taskId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<Void> reactivateTaskWithResponse(String jobId, String taskId, RequestOptions requestOptions)"
  desc: "Reactivates a Task, allowing it to run again even if its retry count has been exhausted.\n\nReactivation makes a Task eligible to be retried again up to its maximum retry count. The Task's state is changed to active. As the Task is no longer in the completed state, any previous exit code or failure information is no longer available after reactivation. Each time a Task is reactivated, its retry count is reset to 0. Reactivation will fail for Tasks that are not completed or that previously completed successfully (with an exit code of 0). Additionally, it will fail if the Job has completed (or is terminating or deleting).\n\n**Query Parameters**\n\n    | ------- | ------- | -------- | -------------------------------------------------------------------------------------------------------------- |\n    | Name    | Type    | Required | Description                                                                                                    |\n    | timeOut | Integer | No       | Sets the maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. |\n\nYou can add these to a request with <xref uid=\"com.azure.core.http.rest.RequestOptions.addQueryParam\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RequestOptions#addQueryParam\"></xref>\n\n**Header Parameters**\n\n    | ------------------- | -------------- | -------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n    | Name                | Type           | Required | Description                                                                                                                                                                                                          |\n    | if-match            | String         | No       | An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service exactly matches the value specified by the client. |\n    | if-none-match       | String         | No       | An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service does not match the value specified by the client.  |\n    | if-modified-since   | OffsetDateTime | No       | A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has been modified since the specified time.                   |\n    | if-unmodified-since | OffsetDateTime | No       | A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has not been modified since the specified time.               |\n\nYou can add these to a request with <xref uid=\"com.azure.core.http.rest.RequestOptions.addHeader\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RequestOptions#addHeader\"></xref>"
  returns:
    description: "the <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Void.html\">Void</a>&gt;"
- uid: "com.azure.compute.batch.BatchClient.rebootNode(java.lang.String,java.lang.String)"
  fullName: "com.azure.compute.batch.BatchClient.rebootNode(String poolId, String nodeId)"
  name: "rebootNode(String poolId, String nodeId)"
  nameWithType: "BatchClient.rebootNode(String poolId, String nodeId)"
  summary: "Restarts the specified Compute Node."
  parameters:
  - description: "The ID of the Pool that contains the Compute Node."
    name: "poolId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The ID of the Compute Node that you want to restart."
    name: "nodeId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public void rebootNode(String poolId, String nodeId)"
  desc: "Restarts the specified Compute Node.\n\nYou can restart a Compute Node only if it is in an idle or running state."
- uid: "com.azure.compute.batch.BatchClient.rebootNode(java.lang.String,java.lang.String,com.azure.compute.batch.models.RebootBatchNodeOptions,com.azure.compute.batch.models.BatchNodeRebootContent)"
  fullName: "com.azure.compute.batch.BatchClient.rebootNode(String poolId, String nodeId, RebootBatchNodeOptions options, BatchNodeRebootContent body)"
  name: "rebootNode(String poolId, String nodeId, RebootBatchNodeOptions options, BatchNodeRebootContent body)"
  nameWithType: "BatchClient.rebootNode(String poolId, String nodeId, RebootBatchNodeOptions options, BatchNodeRebootContent body)"
  summary: "Restarts the specified Compute Node."
  parameters:
  - description: "The ID of the Pool that contains the Compute Node."
    name: "poolId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The ID of the Compute Node that you want to restart."
    name: "nodeId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "A group containing optional parameters like timeOutInSeconds."
    name: "options"
    type: "<xref href=\"com.azure.compute.batch.models.RebootBatchNodeOptions?alt=com.azure.compute.batch.models.RebootBatchNodeOptions&text=RebootBatchNodeOptions\" data-throw-if-not-resolved=\"False\" />"
  - description: "The options to use for rebooting the Compute Node."
    name: "body"
    type: "<xref href=\"com.azure.compute.batch.models.BatchNodeRebootContent?alt=com.azure.compute.batch.models.BatchNodeRebootContent&text=BatchNodeRebootContent\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public void rebootNode(String poolId, String nodeId, RebootBatchNodeOptions options, BatchNodeRebootContent body)"
  desc: "Restarts the specified Compute Node.\n\nYou can restart a Compute Node only if it is in an idle or running state."
- uid: "com.azure.compute.batch.BatchClient.rebootNodeWithResponse(java.lang.String,java.lang.String,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.compute.batch.BatchClient.rebootNodeWithResponse(String poolId, String nodeId, RequestOptions requestOptions)"
  name: "rebootNodeWithResponse(String poolId, String nodeId, RequestOptions requestOptions)"
  nameWithType: "BatchClient.rebootNodeWithResponse(String poolId, String nodeId, RequestOptions requestOptions)"
  summary: "Restarts the specified Compute Node."
  parameters:
  - description: "The ID of the Pool that contains the Compute Node."
    name: "poolId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The ID of the Compute Node that you want to restart."
    name: "nodeId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<Void> rebootNodeWithResponse(String poolId, String nodeId, RequestOptions requestOptions)"
  desc: "Restarts the specified Compute Node.\n\nYou can restart a Compute Node only if it is in an idle or running state.\n\n**Query Parameters**\n\n    | ------- | ------- | -------- | -------------------------------------------------------------------------------------------------------------- |\n    | Name    | Type    | Required | Description                                                                                                    |\n    | timeOut | Integer | No       | Sets the maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. |\n\nYou can add these to a request with <xref uid=\"com.azure.core.http.rest.RequestOptions.addQueryParam\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RequestOptions#addQueryParam\"></xref>\n\n**Request Body Schema**\n\n```java\n{\n     nodeRebootOption: String(requeue/terminate/taskcompletion/retaineddata) (Optional)\n }\n```"
  returns:
    description: "the <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Void.html\">Void</a>&gt;"
- uid: "com.azure.compute.batch.BatchClient.removeNodes(java.lang.String,com.azure.compute.batch.models.BatchNodeRemoveContent)"
  fullName: "com.azure.compute.batch.BatchClient.removeNodes(String poolId, BatchNodeRemoveContent body)"
  name: "removeNodes(String poolId, BatchNodeRemoveContent body)"
  nameWithType: "BatchClient.removeNodes(String poolId, BatchNodeRemoveContent body)"
  summary: "Removes Compute Nodes from the specified Pool."
  parameters:
  - description: "The ID of the Pool to get."
    name: "poolId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The options to use for removing the node."
    name: "body"
    type: "<xref href=\"com.azure.compute.batch.models.BatchNodeRemoveContent?alt=com.azure.compute.batch.models.BatchNodeRemoveContent&text=BatchNodeRemoveContent\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public void removeNodes(String poolId, BatchNodeRemoveContent body)"
  desc: "Removes Compute Nodes from the specified Pool."
- uid: "com.azure.compute.batch.BatchClient.removeNodes(java.lang.String,com.azure.compute.batch.models.BatchNodeRemoveContent,com.azure.compute.batch.models.RemoveBatchNodesOptions)"
  fullName: "com.azure.compute.batch.BatchClient.removeNodes(String poolId, BatchNodeRemoveContent body, RemoveBatchNodesOptions options)"
  name: "removeNodes(String poolId, BatchNodeRemoveContent body, RemoveBatchNodesOptions options)"
  nameWithType: "BatchClient.removeNodes(String poolId, BatchNodeRemoveContent body, RemoveBatchNodesOptions options)"
  summary: "Removes Compute Nodes from the specified Pool."
  parameters:
  - description: "The ID of the Pool to get."
    name: "poolId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The options to use for removing the node."
    name: "body"
    type: "<xref href=\"com.azure.compute.batch.models.BatchNodeRemoveContent?alt=com.azure.compute.batch.models.BatchNodeRemoveContent&text=BatchNodeRemoveContent\" data-throw-if-not-resolved=\"False\" />"
  - description: "A group of optional parameters."
    name: "options"
    type: "<xref href=\"com.azure.compute.batch.models.RemoveBatchNodesOptions?alt=com.azure.compute.batch.models.RemoveBatchNodesOptions&text=RemoveBatchNodesOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public void removeNodes(String poolId, BatchNodeRemoveContent body, RemoveBatchNodesOptions options)"
  desc: "Removes Compute Nodes from the specified Pool."
- uid: "com.azure.compute.batch.BatchClient.removeNodesWithResponse(java.lang.String,com.azure.core.util.BinaryData,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.compute.batch.BatchClient.removeNodesWithResponse(String poolId, BinaryData parameters, RequestOptions requestOptions)"
  name: "removeNodesWithResponse(String poolId, BinaryData parameters, RequestOptions requestOptions)"
  nameWithType: "BatchClient.removeNodesWithResponse(String poolId, BinaryData parameters, RequestOptions requestOptions)"
  summary: "Removes Compute Nodes from the specified Pool."
  parameters:
  - description: "The ID of the Pool to get."
    name: "poolId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The options to use for removing the node."
    name: "parameters"
    type: "<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<Void> removeNodesWithResponse(String poolId, BinaryData parameters, RequestOptions requestOptions)"
  desc: "Removes Compute Nodes from the specified Pool.\n\nThis operation can only run when the allocation state of the Pool is steady. When this operation runs, the allocation state changes from steady to resizing. Each request may remove up to 100 nodes.\n\n**Query Parameters**\n\n    | ------- | ------- | -------- | -------------------------------------------------------------------------------------------------------------- |\n    | Name    | Type    | Required | Description                                                                                                    |\n    | timeOut | Integer | No       | Sets the maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. |\n\nYou can add these to a request with <xref uid=\"com.azure.core.http.rest.RequestOptions.addQueryParam\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RequestOptions#addQueryParam\"></xref>\n\n**Header Parameters**\n\n    | ------------------- | -------------- | -------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n    | Name                | Type           | Required | Description                                                                                                                                                                                                          |\n    | if-match            | String         | No       | An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service exactly matches the value specified by the client. |\n    | if-none-match       | String         | No       | An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service does not match the value specified by the client.  |\n    | if-modified-since   | OffsetDateTime | No       | A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has been modified since the specified time.                   |\n    | if-unmodified-since | OffsetDateTime | No       | A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has not been modified since the specified time.               |\n\nYou can add these to a request with <xref uid=\"com.azure.core.http.rest.RequestOptions.addHeader\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RequestOptions#addHeader\"></xref>\n\n**Request Body Schema**\n\n```java\n{\n     nodeList (Required): [\n         String (Required)\n     ]\n     resizeTimeout: Duration (Optional)\n     nodeDeallocationOption: String(requeue/terminate/taskcompletion/retaineddata) (Optional)\n }\n```"
  returns:
    description: "the <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Void.html\">Void</a>&gt;"
- uid: "com.azure.compute.batch.BatchClient.replaceJob(java.lang.String,com.azure.compute.batch.models.BatchJob)"
  fullName: "com.azure.compute.batch.BatchClient.replaceJob(String jobId, BatchJob body)"
  name: "replaceJob(String jobId, BatchJob body)"
  nameWithType: "BatchClient.replaceJob(String jobId, BatchJob body)"
  summary: "Updates the properties of the specified Job."
  parameters:
  - description: "The ID of the Job whose properties you want to update."
    name: "jobId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "A job with updated properties."
    name: "body"
    type: "<xref href=\"com.azure.compute.batch.models.BatchJob?alt=com.azure.compute.batch.models.BatchJob&text=BatchJob\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public void replaceJob(String jobId, BatchJob body)"
  desc: "Updates the properties of the specified Job.\n\nThis fully replaces all the updatable properties of the Job. For example, if the Job has constraints associated with it and if constraints is not specified with this request, then the Batch service will remove the existing constraints."
- uid: "com.azure.compute.batch.BatchClient.replaceJob(java.lang.String,com.azure.compute.batch.models.BatchJob,com.azure.compute.batch.models.ReplaceBatchJobOptions)"
  fullName: "com.azure.compute.batch.BatchClient.replaceJob(String jobId, BatchJob body, ReplaceBatchJobOptions options)"
  name: "replaceJob(String jobId, BatchJob body, ReplaceBatchJobOptions options)"
  nameWithType: "BatchClient.replaceJob(String jobId, BatchJob body, ReplaceBatchJobOptions options)"
  summary: "Updates the properties of the specified Job."
  parameters:
  - description: "The ID of the Job whose properties you want to update."
    name: "jobId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "A job with updated properties."
    name: "body"
    type: "<xref href=\"com.azure.compute.batch.models.BatchJob?alt=com.azure.compute.batch.models.BatchJob&text=BatchJob\" data-throw-if-not-resolved=\"False\" />"
  - description: "A group of optional parameters containing timeOutInSeconds and requestConditions."
    name: "options"
    type: "<xref href=\"com.azure.compute.batch.models.ReplaceBatchJobOptions?alt=com.azure.compute.batch.models.ReplaceBatchJobOptions&text=ReplaceBatchJobOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public void replaceJob(String jobId, BatchJob body, ReplaceBatchJobOptions options)"
  desc: "Updates the properties of the specified Job.\n\nThis fully replaces all the updatable properties of the Job. For example, if the Job has constraints associated with it and if constraints is not specified with this request, then the Batch service will remove the existing constraints."
- uid: "com.azure.compute.batch.BatchClient.replaceJobSchedule(java.lang.String,com.azure.compute.batch.models.BatchJobSchedule)"
  fullName: "com.azure.compute.batch.BatchClient.replaceJobSchedule(String jobScheduleId, BatchJobSchedule body)"
  name: "replaceJobSchedule(String jobScheduleId, BatchJobSchedule body)"
  nameWithType: "BatchClient.replaceJobSchedule(String jobScheduleId, BatchJobSchedule body)"
  summary: "Updates the properties of the specified Job Schedule."
  parameters:
  - description: "The ID of the Job Schedule to update."
    name: "jobScheduleId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "A Job Schedule with updated properties."
    name: "body"
    type: "<xref href=\"com.azure.compute.batch.models.BatchJobSchedule?alt=com.azure.compute.batch.models.BatchJobSchedule&text=BatchJobSchedule\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public void replaceJobSchedule(String jobScheduleId, BatchJobSchedule body)"
  desc: "Updates the properties of the specified Job Schedule."
- uid: "com.azure.compute.batch.BatchClient.replaceJobSchedule(java.lang.String,com.azure.compute.batch.models.BatchJobSchedule,com.azure.compute.batch.models.ReplaceBatchJobScheduleOptions)"
  fullName: "com.azure.compute.batch.BatchClient.replaceJobSchedule(String jobScheduleId, BatchJobSchedule body, ReplaceBatchJobScheduleOptions options)"
  name: "replaceJobSchedule(String jobScheduleId, BatchJobSchedule body, ReplaceBatchJobScheduleOptions options)"
  nameWithType: "BatchClient.replaceJobSchedule(String jobScheduleId, BatchJobSchedule body, ReplaceBatchJobScheduleOptions options)"
  summary: "Updates the properties of the specified Job Schedule."
  parameters:
  - description: "The ID of the Job Schedule to update."
    name: "jobScheduleId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "A Job Schedule with updated properties."
    name: "body"
    type: "<xref href=\"com.azure.compute.batch.models.BatchJobSchedule?alt=com.azure.compute.batch.models.BatchJobSchedule&text=BatchJobSchedule\" data-throw-if-not-resolved=\"False\" />"
  - description: "A group containing optional parameters like timeOutInSeconds and requestConditions."
    name: "options"
    type: "<xref href=\"com.azure.compute.batch.models.ReplaceBatchJobScheduleOptions?alt=com.azure.compute.batch.models.ReplaceBatchJobScheduleOptions&text=ReplaceBatchJobScheduleOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public void replaceJobSchedule(String jobScheduleId, BatchJobSchedule body, ReplaceBatchJobScheduleOptions options)"
  desc: "Updates the properties of the specified Job Schedule."
- uid: "com.azure.compute.batch.BatchClient.replaceJobScheduleWithResponse(java.lang.String,com.azure.core.util.BinaryData,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.compute.batch.BatchClient.replaceJobScheduleWithResponse(String jobScheduleId, BinaryData jobSchedule, RequestOptions requestOptions)"
  name: "replaceJobScheduleWithResponse(String jobScheduleId, BinaryData jobSchedule, RequestOptions requestOptions)"
  nameWithType: "BatchClient.replaceJobScheduleWithResponse(String jobScheduleId, BinaryData jobSchedule, RequestOptions requestOptions)"
  summary: "Updates the properties of the specified Job Schedule."
  parameters:
  - description: "The ID of the Job Schedule to update."
    name: "jobScheduleId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "A Job Schedule with updated properties."
    name: "jobSchedule"
    type: "<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<Void> replaceJobScheduleWithResponse(String jobScheduleId, BinaryData jobSchedule, RequestOptions requestOptions)"
  desc: "Updates the properties of the specified Job Schedule.\n\nThis fully replaces all the updatable properties of the Job Schedule. For example, if the schedule property is not specified with this request, then the Batch service will remove the existing schedule. Changes to a Job Schedule only impact Jobs created by the schedule after the update has taken place; currently running Jobs are unaffected.\n\n**Query Parameters**\n\n    | ------- | ------- | -------- | -------------------------------------------------------------------------------------------------------------- |\n    | Name    | Type    | Required | Description                                                                                                    |\n    | timeOut | Integer | No       | Sets the maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. |\n\nYou can add these to a request with <xref uid=\"com.azure.core.http.rest.RequestOptions.addQueryParam\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RequestOptions#addQueryParam\"></xref>\n\n**Header Parameters**\n\n    | ------------------- | -------------- | -------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n    | Name                | Type           | Required | Description                                                                                                                                                                                                          |\n    | if-match            | String         | No       | An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service exactly matches the value specified by the client. |\n    | if-none-match       | String         | No       | An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service does not match the value specified by the client.  |\n    | if-modified-since   | OffsetDateTime | No       | A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has been modified since the specified time.                   |\n    | if-unmodified-since | OffsetDateTime | No       | A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has not been modified since the specified time.               |\n\nYou can add these to a request with <xref uid=\"com.azure.core.http.rest.RequestOptions.addHeader\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RequestOptions#addHeader\"></xref>\n\n**Request Body Schema**\n\n```java\n{\n     id: String (Optional)\n     displayName: String (Optional)\n     url: String (Optional)\n     eTag: String (Optional)\n     lastModified: OffsetDateTime (Optional)\n     creationTime: OffsetDateTime (Optional)\n     state: String(active/completed/disabled/terminating/deleting) (Optional)\n     stateTransitionTime: OffsetDateTime (Optional)\n     previousState: String(active/completed/disabled/terminating/deleting) (Optional)\n     previousStateTransitionTime: OffsetDateTime (Optional)\n     schedule (Required): {\n         doNotRunUntil: OffsetDateTime (Optional)\n         doNotRunAfter: OffsetDateTime (Optional)\n         startWindow: Duration (Optional)\n         recurrenceInterval: Duration (Optional)\n     }\n     jobSpecification (Required): {\n         priority: Integer (Optional)\n         allowTaskPreemption: Boolean (Optional)\n         maxParallelTasks: Integer (Optional)\n         displayName: String (Optional)\n         usesTaskDependencies: Boolean (Optional)\n         onAllTasksComplete: String(noaction/terminatejob) (Optional)\n         onTaskFailure: String(noaction/performexitoptionsjobaction) (Optional)\n         networkConfiguration (Optional): {\n             subnetId: String (Required)\n         }\n         constraints (Optional): {\n             maxWallClockTime: Duration (Optional)\n             maxTaskRetryCount: Integer (Optional)\n         }\n         jobManagerTask (Optional): {\n             id: String (Required)\n             displayName: String (Optional)\n             commandLine: String (Required)\n             containerSettings (Optional): {\n                 containerRunOptions: String (Optional)\n                 imageName: String (Required)\n                 registry (Optional): {\n                     username: String (Optional)\n                     password: String (Optional)\n                     registryServer: String (Optional)\n                     identityReference (Optional): {\n                         resourceId: String (Optional)\n                     }\n                 }\n                 workingDirectory: String(taskWorkingDirectory/containerImageDefault) (Optional)\n             }\n             resourceFiles (Optional): [\n                  (Optional){\n                     autoStorageContainerName: String (Optional)\n                     storageContainerUrl: String (Optional)\n                     httpUrl: String (Optional)\n                     blobPrefix: String (Optional)\n                     filePath: String (Optional)\n                     fileMode: String (Optional)\n                     identityReference (Optional): (recursive schema, see identityReference above)\n                 }\n             ]\n             outputFiles (Optional): [\n                  (Optional){\n                     filePattern: String (Required)\n                     destination (Required): {\n                         container (Optional): {\n                             path: String (Optional)\n                             containerUrl: String (Required)\n                             identityReference (Optional): (recursive schema, see identityReference above)\n                             uploadHeaders (Optional): [\n                                  (Optional){\n                                     name: String (Required)\n                                     value: String (Optional)\n                                 }\n                             ]\n                         }\n                     }\n                     uploadOptions (Required): {\n                         uploadCondition: String(tasksuccess/taskfailure/taskcompletion) (Required)\n                     }\n                 }\n             ]\n             environmentSettings (Optional): [\n                  (Optional){\n                     name: String (Required)\n                     value: String (Optional)\n                 }\n             ]\n             constraints (Optional): {\n                 maxWallClockTime: Duration (Optional)\n                 retentionTime: Duration (Optional)\n                 maxTaskRetryCount: Integer (Optional)\n             }\n             requiredSlots: Integer (Optional)\n             killJobOnCompletion: Boolean (Optional)\n             userIdentity (Optional): {\n                 username: String (Optional)\n                 autoUser (Optional): {\n                     scope: String(task/pool) (Optional)\n                     elevationLevel: String(nonadmin/admin) (Optional)\n                 }\n             }\n             runExclusive: Boolean (Optional)\n             applicationPackageReferences (Optional): [\n                  (Optional){\n                     applicationId: String (Required)\n                     version: String (Optional)\n                 }\n             ]\n             authenticationTokenSettings (Optional): {\n                 access (Optional): [\n                     String(job) (Optional)\n                 ]\n             }\n             allowLowPriorityNode: Boolean (Optional)\n         }\n         jobPreparationTask (Optional): {\n             id: String (Optional)\n             commandLine: String (Required)\n             containerSettings (Optional): (recursive schema, see containerSettings above)\n             resourceFiles (Optional): [\n                 (recursive schema, see above)\n             ]\n             environmentSettings (Optional): [\n                 (recursive schema, see above)\n             ]\n             constraints (Optional): (recursive schema, see constraints above)\n             waitForSuccess: Boolean (Optional)\n             userIdentity (Optional): (recursive schema, see userIdentity above)\n             rerunOnNodeRebootAfterSuccess: Boolean (Optional)\n         }\n         jobReleaseTask (Optional): {\n             id: String (Optional)\n             commandLine: String (Required)\n             containerSettings (Optional): (recursive schema, see containerSettings above)\n             resourceFiles (Optional): [\n                 (recursive schema, see above)\n             ]\n             environmentSettings (Optional): [\n                 (recursive schema, see above)\n             ]\n             maxWallClockTime: Duration (Optional)\n             retentionTime: Duration (Optional)\n             userIdentity (Optional): (recursive schema, see userIdentity above)\n         }\n         commonEnvironmentSettings (Optional): [\n             (recursive schema, see above)\n         ]\n         poolInfo (Required): {\n             poolId: String (Optional)\n             autoPoolSpecification (Optional): {\n                 autoPoolIdPrefix: String (Optional)\n                 poolLifetimeOption: String(jobschedule/job) (Required)\n                 keepAlive: Boolean (Optional)\n                 pool (Optional): {\n                     displayName: String (Optional)\n                     vmSize: String (Required)\n                     cloudServiceConfiguration (Optional): {\n                         osFamily: String (Required)\n                         osVersion: String (Optional)\n                     }\n                     virtualMachineConfiguration (Optional): {\n                         imageReference (Required): {\n                             publisher: String (Optional)\n                             offer: String (Optional)\n                             sku: String (Optional)\n                             version: String (Optional)\n                             virtualMachineImageId: String (Optional)\n                             exactVersion: String (Optional)\n                         }\n                         nodeAgentSKUId: String (Required)\n                         windowsConfiguration (Optional): {\n                             enableAutomaticUpdates: Boolean (Optional)\n                         }\n                         dataDisks (Optional): [\n                              (Optional){\n                                 lun: int (Required)\n                                 caching: String(none/readonly/readwrite) (Optional)\n                                 diskSizeGB: int (Required)\n                                 storageAccountType: String(standard_lrs/premium_lrs) (Optional)\n                             }\n                         ]\n                         licenseType: String (Optional)\n                         containerConfiguration (Optional): {\n                             type: String(dockerCompatible/criCompatible) (Required)\n                             containerImageNames (Optional): [\n                                 String (Optional)\n                             ]\n                             containerRegistries (Optional): [\n                                 (recursive schema, see above)\n                             ]\n                         }\n                         diskEncryptionConfiguration (Optional): {\n                             targets (Optional): [\n                                 String(osdisk/temporarydisk) (Optional)\n                             ]\n                         }\n                         nodePlacementConfiguration (Optional): {\n                             policy: String(regional/zonal) (Optional)\n                         }\n                         extensions (Optional): [\n                              (Optional){\n                                 name: String (Required)\n                                 publisher: String (Required)\n                                 type: String (Required)\n                                 typeHandlerVersion: String (Optional)\n                                 autoUpgradeMinorVersion: Boolean (Optional)\n                                 enableAutomaticUpgrade: Boolean (Optional)\n                                 settings (Optional): {\n                                     String: String (Optional)\n                                 }\n                                 protectedSettings (Optional): {\n                                     String: String (Optional)\n                                 }\n                                 provisionAfterExtensions (Optional): [\n                                     String (Optional)\n                                 ]\n                             }\n                         ]\n                         osDisk (Optional): {\n                             ephemeralOSDiskSettings (Optional): {\n                                 placement: String(cachedisk) (Optional)\n                             }\n                         }\n                     }\n                     taskSlotsPerNode: Integer (Optional)\n                     taskSchedulingPolicy (Optional): {\n                         nodeFillType: String(spread/pack) (Required)\n                     }\n                     resizeTimeout: Duration (Optional)\n                     targetDedicatedNodes: Integer (Optional)\n                     targetLowPriorityNodes: Integer (Optional)\n                     enableAutoScale: Boolean (Optional)\n                     autoScaleFormula: String (Optional)\n                     autoScaleEvaluationInterval: Duration (Optional)\n                     enableInterNodeCommunication: Boolean (Optional)\n                     networkConfiguration (Optional): {\n                         subnetId: String (Optional)\n                         dynamicVNetAssignmentScope: String(none/job) (Optional)\n                         endpointConfiguration (Optional): {\n                             inboundNATPools (Required): [\n                                  (Required){\n                                     name: String (Required)\n                                     protocol: String(tcp/udp) (Required)\n                                     backendPort: int (Required)\n                                     frontendPortRangeStart: int (Required)\n                                     frontendPortRangeEnd: int (Required)\n                                     networkSecurityGroupRules (Optional): [\n                                          (Optional){\n                                             priority: int (Required)\n                                             access: String(allow/deny) (Required)\n                                             sourceAddressPrefix: String (Required)\n                                             sourcePortRanges (Optional): [\n                                                 String (Optional)\n                                             ]\n                                         }\n                                     ]\n                                 }\n                             ]\n                         }\n                         publicIPAddressConfiguration (Optional): {\n                             provision: String(batchmanaged/usermanaged/nopublicipaddresses) (Optional)\n                             ipAddressIds (Optional): [\n                                 String (Optional)\n                             ]\n                         }\n                         enableAcceleratedNetworking: Boolean (Optional)\n                     }\n                     startTask (Optional): {\n                         commandLine: String (Required)\n                         containerSettings (Optional): (recursive schema, see containerSettings above)\n                         resourceFiles (Optional): [\n                             (recursive schema, see above)\n                         ]\n                         environmentSettings (Optional): [\n                             (recursive schema, see above)\n                         ]\n                         userIdentity (Optional): (recursive schema, see userIdentity above)\n                         maxTaskRetryCount: Integer (Optional)\n                         waitForSuccess: Boolean (Optional)\n                     }\n                     applicationPackageReferences (Optional): [\n                         (recursive schema, see above)\n                     ]\n                     applicationLicenses (Optional): [\n                         String (Optional)\n                     ]\n                     userAccounts (Optional): [\n                          (Optional){\n                             name: String (Required)\n                             password: String (Required)\n                             elevationLevel: String(nonadmin/admin) (Optional)\n                             linuxUserConfiguration (Optional): {\n                                 uid: Integer (Optional)\n                                 gid: Integer (Optional)\n                                 sshPrivateKey: String (Optional)\n                             }\n                             windowsUserConfiguration (Optional): {\n                                 loginMode: String(batch/interactive) (Optional)\n                             }\n                         }\n                     ]\n                     metadata (Optional): [\n                          (Optional){\n                             name: String (Required)\n                             value: String (Required)\n                         }\n                     ]\n                     mountConfiguration (Optional): [\n                          (Optional){\n                             azureBlobFileSystemConfiguration (Optional): {\n                                 accountName: String (Required)\n                                 containerName: String (Required)\n                                 accountKey: String (Optional)\n                                 sasKey: String (Optional)\n                                 blobfuseOptions: String (Optional)\n                                 relativeMountPath: String (Required)\n                                 identityReference (Optional): (recursive schema, see identityReference above)\n                             }\n                             nfsMountConfiguration (Optional): {\n                                 source: String (Required)\n                                 relativeMountPath: String (Required)\n                                 mountOptions: String (Optional)\n                             }\n                             cifsMountConfiguration (Optional): {\n                                 username: String (Required)\n                                 source: String (Required)\n                                 relativeMountPath: String (Required)\n                                 mountOptions: String (Optional)\n                                 password: String (Required)\n                             }\n                             azureFileShareConfiguration (Optional): {\n                                 accountName: String (Required)\n                                 azureFileUrl: String (Required)\n                                 accountKey: String (Required)\n                                 relativeMountPath: String (Required)\n                                 mountOptions: String (Optional)\n                             }\n                         }\n                     ]\n                     targetNodeCommunicationMode: String(default/classic/simplified) (Optional)\n                 }\n             }\n         }\n         metadata (Optional): [\n             (recursive schema, see above)\n         ]\n     }\n     executionInfo (Optional): {\n         nextRunTime: OffsetDateTime (Optional)\n         recentJob (Optional): {\n             id: String (Optional)\n             url: String (Optional)\n         }\n         endTime: OffsetDateTime (Optional)\n     }\n     metadata (Optional): [\n         (recursive schema, see above)\n     ]\n     stats (Optional): {\n         url: String (Required)\n         startTime: OffsetDateTime (Required)\n         lastUpdateTime: OffsetDateTime (Required)\n         userCPUTime: Duration (Required)\n         kernelCPUTime: Duration (Required)\n         wallClockTime: Duration (Required)\n         readIOps: int (Required)\n         writeIOps: int (Required)\n         readIOGiB: double (Required)\n         writeIOGiB: double (Required)\n         numSucceededTasks: int (Required)\n         numFailedTasks: int (Required)\n         numTaskRetries: int (Required)\n         waitTime: Duration (Required)\n     }\n }\n```"
  returns:
    description: "the <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Void.html\">Void</a>&gt;"
- uid: "com.azure.compute.batch.BatchClient.replaceJobWithResponse(java.lang.String,com.azure.core.util.BinaryData,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.compute.batch.BatchClient.replaceJobWithResponse(String jobId, BinaryData job, RequestOptions requestOptions)"
  name: "replaceJobWithResponse(String jobId, BinaryData job, RequestOptions requestOptions)"
  nameWithType: "BatchClient.replaceJobWithResponse(String jobId, BinaryData job, RequestOptions requestOptions)"
  summary: "Updates the properties of the specified Job."
  parameters:
  - description: "The ID of the Job whose properties you want to update."
    name: "jobId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "A job with updated properties."
    name: "job"
    type: "<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<Void> replaceJobWithResponse(String jobId, BinaryData job, RequestOptions requestOptions)"
  desc: "Updates the properties of the specified Job.\n\nThis fully replaces all the updatable properties of the Job. For example, if the Job has constraints associated with it and if constraints is not specified with this request, then the Batch service will remove the existing constraints.\n\n**Query Parameters**\n\n    | ------- | ------- | -------- | -------------------------------------------------------------------------------------------------------------- |\n    | Name    | Type    | Required | Description                                                                                                    |\n    | timeOut | Integer | No       | Sets the maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. |\n\nYou can add these to a request with <xref uid=\"com.azure.core.http.rest.RequestOptions.addQueryParam\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RequestOptions#addQueryParam\"></xref>\n\n**Header Parameters**\n\n    | ------------------- | -------------- | -------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n    | Name                | Type           | Required | Description                                                                                                                                                                                                          |\n    | if-match            | String         | No       | An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service exactly matches the value specified by the client. |\n    | if-none-match       | String         | No       | An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service does not match the value specified by the client.  |\n    | if-modified-since   | OffsetDateTime | No       | A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has been modified since the specified time.                   |\n    | if-unmodified-since | OffsetDateTime | No       | A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has not been modified since the specified time.               |\n\nYou can add these to a request with <xref uid=\"com.azure.core.http.rest.RequestOptions.addHeader\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RequestOptions#addHeader\"></xref>\n\n**Request Body Schema**\n\n```java\n{\n     id: String (Optional)\n     displayName: String (Optional)\n     usesTaskDependencies: Boolean (Optional)\n     url: String (Optional)\n     eTag: String (Optional)\n     lastModified: OffsetDateTime (Optional)\n     creationTime: OffsetDateTime (Optional)\n     state: String(active/disabling/disabled/enabling/terminating/completed/deleting) (Optional)\n     stateTransitionTime: OffsetDateTime (Optional)\n     previousState: String(active/disabling/disabled/enabling/terminating/completed/deleting) (Optional)\n     previousStateTransitionTime: OffsetDateTime (Optional)\n     priority: Integer (Optional)\n     allowTaskPreemption: Boolean (Optional)\n     maxParallelTasks: Integer (Optional)\n     constraints (Optional): {\n         maxWallClockTime: Duration (Optional)\n         maxTaskRetryCount: Integer (Optional)\n     }\n     jobManagerTask (Optional): {\n         id: String (Required)\n         displayName: String (Optional)\n         commandLine: String (Required)\n         containerSettings (Optional): {\n             containerRunOptions: String (Optional)\n             imageName: String (Required)\n             registry (Optional): {\n                 username: String (Optional)\n                 password: String (Optional)\n                 registryServer: String (Optional)\n                 identityReference (Optional): {\n                     resourceId: String (Optional)\n                 }\n             }\n             workingDirectory: String(taskWorkingDirectory/containerImageDefault) (Optional)\n         }\n         resourceFiles (Optional): [\n              (Optional){\n                 autoStorageContainerName: String (Optional)\n                 storageContainerUrl: String (Optional)\n                 httpUrl: String (Optional)\n                 blobPrefix: String (Optional)\n                 filePath: String (Optional)\n                 fileMode: String (Optional)\n                 identityReference (Optional): (recursive schema, see identityReference above)\n             }\n         ]\n         outputFiles (Optional): [\n              (Optional){\n                 filePattern: String (Required)\n                 destination (Required): {\n                     container (Optional): {\n                         path: String (Optional)\n                         containerUrl: String (Required)\n                         identityReference (Optional): (recursive schema, see identityReference above)\n                         uploadHeaders (Optional): [\n                              (Optional){\n                                 name: String (Required)\n                                 value: String (Optional)\n                             }\n                         ]\n                     }\n                 }\n                 uploadOptions (Required): {\n                     uploadCondition: String(tasksuccess/taskfailure/taskcompletion) (Required)\n                 }\n             }\n         ]\n         environmentSettings (Optional): [\n              (Optional){\n                 name: String (Required)\n                 value: String (Optional)\n             }\n         ]\n         constraints (Optional): {\n             maxWallClockTime: Duration (Optional)\n             retentionTime: Duration (Optional)\n             maxTaskRetryCount: Integer (Optional)\n         }\n         requiredSlots: Integer (Optional)\n         killJobOnCompletion: Boolean (Optional)\n         userIdentity (Optional): {\n             username: String (Optional)\n             autoUser (Optional): {\n                 scope: String(task/pool) (Optional)\n                 elevationLevel: String(nonadmin/admin) (Optional)\n             }\n         }\n         runExclusive: Boolean (Optional)\n         applicationPackageReferences (Optional): [\n              (Optional){\n                 applicationId: String (Required)\n                 version: String (Optional)\n             }\n         ]\n         authenticationTokenSettings (Optional): {\n             access (Optional): [\n                 String(job) (Optional)\n             ]\n         }\n         allowLowPriorityNode: Boolean (Optional)\n     }\n     jobPreparationTask (Optional): {\n         id: String (Optional)\n         commandLine: String (Required)\n         containerSettings (Optional): (recursive schema, see containerSettings above)\n         resourceFiles (Optional): [\n             (recursive schema, see above)\n         ]\n         environmentSettings (Optional): [\n             (recursive schema, see above)\n         ]\n         constraints (Optional): (recursive schema, see constraints above)\n         waitForSuccess: Boolean (Optional)\n         userIdentity (Optional): (recursive schema, see userIdentity above)\n         rerunOnNodeRebootAfterSuccess: Boolean (Optional)\n     }\n     jobReleaseTask (Optional): {\n         id: String (Optional)\n         commandLine: String (Required)\n         containerSettings (Optional): (recursive schema, see containerSettings above)\n         resourceFiles (Optional): [\n             (recursive schema, see above)\n         ]\n         environmentSettings (Optional): [\n             (recursive schema, see above)\n         ]\n         maxWallClockTime: Duration (Optional)\n         retentionTime: Duration (Optional)\n         userIdentity (Optional): (recursive schema, see userIdentity above)\n     }\n     commonEnvironmentSettings (Optional): [\n         (recursive schema, see above)\n     ]\n     poolInfo (Required): {\n         poolId: String (Optional)\n         autoPoolSpecification (Optional): {\n             autoPoolIdPrefix: String (Optional)\n             poolLifetimeOption: String(jobschedule/job) (Required)\n             keepAlive: Boolean (Optional)\n             pool (Optional): {\n                 displayName: String (Optional)\n                 vmSize: String (Required)\n                 cloudServiceConfiguration (Optional): {\n                     osFamily: String (Required)\n                     osVersion: String (Optional)\n                 }\n                 virtualMachineConfiguration (Optional): {\n                     imageReference (Required): {\n                         publisher: String (Optional)\n                         offer: String (Optional)\n                         sku: String (Optional)\n                         version: String (Optional)\n                         virtualMachineImageId: String (Optional)\n                         exactVersion: String (Optional)\n                     }\n                     nodeAgentSKUId: String (Required)\n                     windowsConfiguration (Optional): {\n                         enableAutomaticUpdates: Boolean (Optional)\n                     }\n                     dataDisks (Optional): [\n                          (Optional){\n                             lun: int (Required)\n                             caching: String(none/readonly/readwrite) (Optional)\n                             diskSizeGB: int (Required)\n                             storageAccountType: String(standard_lrs/premium_lrs) (Optional)\n                         }\n                     ]\n                     licenseType: String (Optional)\n                     containerConfiguration (Optional): {\n                         type: String(dockerCompatible/criCompatible) (Required)\n                         containerImageNames (Optional): [\n                             String (Optional)\n                         ]\n                         containerRegistries (Optional): [\n                             (recursive schema, see above)\n                         ]\n                     }\n                     diskEncryptionConfiguration (Optional): {\n                         targets (Optional): [\n                             String(osdisk/temporarydisk) (Optional)\n                         ]\n                     }\n                     nodePlacementConfiguration (Optional): {\n                         policy: String(regional/zonal) (Optional)\n                     }\n                     extensions (Optional): [\n                          (Optional){\n                             name: String (Required)\n                             publisher: String (Required)\n                             type: String (Required)\n                             typeHandlerVersion: String (Optional)\n                             autoUpgradeMinorVersion: Boolean (Optional)\n                             enableAutomaticUpgrade: Boolean (Optional)\n                             settings (Optional): {\n                                 String: String (Optional)\n                             }\n                             protectedSettings (Optional): {\n                                 String: String (Optional)\n                             }\n                             provisionAfterExtensions (Optional): [\n                                 String (Optional)\n                             ]\n                         }\n                     ]\n                     osDisk (Optional): {\n                         ephemeralOSDiskSettings (Optional): {\n                             placement: String(cachedisk) (Optional)\n                         }\n                     }\n                 }\n                 taskSlotsPerNode: Integer (Optional)\n                 taskSchedulingPolicy (Optional): {\n                     nodeFillType: String(spread/pack) (Required)\n                 }\n                 resizeTimeout: Duration (Optional)\n                 targetDedicatedNodes: Integer (Optional)\n                 targetLowPriorityNodes: Integer (Optional)\n                 enableAutoScale: Boolean (Optional)\n                 autoScaleFormula: String (Optional)\n                 autoScaleEvaluationInterval: Duration (Optional)\n                 enableInterNodeCommunication: Boolean (Optional)\n                 networkConfiguration (Optional): {\n                     subnetId: String (Optional)\n                     dynamicVNetAssignmentScope: String(none/job) (Optional)\n                     endpointConfiguration (Optional): {\n                         inboundNATPools (Required): [\n                              (Required){\n                                 name: String (Required)\n                                 protocol: String(tcp/udp) (Required)\n                                 backendPort: int (Required)\n                                 frontendPortRangeStart: int (Required)\n                                 frontendPortRangeEnd: int (Required)\n                                 networkSecurityGroupRules (Optional): [\n                                      (Optional){\n                                         priority: int (Required)\n                                         access: String(allow/deny) (Required)\n                                         sourceAddressPrefix: String (Required)\n                                         sourcePortRanges (Optional): [\n                                             String (Optional)\n                                         ]\n                                     }\n                                 ]\n                             }\n                         ]\n                     }\n                     publicIPAddressConfiguration (Optional): {\n                         provision: String(batchmanaged/usermanaged/nopublicipaddresses) (Optional)\n                         ipAddressIds (Optional): [\n                             String (Optional)\n                         ]\n                     }\n                     enableAcceleratedNetworking: Boolean (Optional)\n                 }\n                 startTask (Optional): {\n                     commandLine: String (Required)\n                     containerSettings (Optional): (recursive schema, see containerSettings above)\n                     resourceFiles (Optional): [\n                         (recursive schema, see above)\n                     ]\n                     environmentSettings (Optional): [\n                         (recursive schema, see above)\n                     ]\n                     userIdentity (Optional): (recursive schema, see userIdentity above)\n                     maxTaskRetryCount: Integer (Optional)\n                     waitForSuccess: Boolean (Optional)\n                 }\n                 applicationPackageReferences (Optional): [\n                     (recursive schema, see above)\n                 ]\n                 applicationLicenses (Optional): [\n                     String (Optional)\n                 ]\n                 userAccounts (Optional): [\n                      (Optional){\n                         name: String (Required)\n                         password: String (Required)\n                         elevationLevel: String(nonadmin/admin) (Optional)\n                         linuxUserConfiguration (Optional): {\n                             uid: Integer (Optional)\n                             gid: Integer (Optional)\n                             sshPrivateKey: String (Optional)\n                         }\n                         windowsUserConfiguration (Optional): {\n                             loginMode: String(batch/interactive) (Optional)\n                         }\n                     }\n                 ]\n                 metadata (Optional): [\n                      (Optional){\n                         name: String (Required)\n                         value: String (Required)\n                     }\n                 ]\n                 mountConfiguration (Optional): [\n                      (Optional){\n                         azureBlobFileSystemConfiguration (Optional): {\n                             accountName: String (Required)\n                             containerName: String (Required)\n                             accountKey: String (Optional)\n                             sasKey: String (Optional)\n                             blobfuseOptions: String (Optional)\n                             relativeMountPath: String (Required)\n                             identityReference (Optional): (recursive schema, see identityReference above)\n                         }\n                         nfsMountConfiguration (Optional): {\n                             source: String (Required)\n                             relativeMountPath: String (Required)\n                             mountOptions: String (Optional)\n                         }\n                         cifsMountConfiguration (Optional): {\n                             username: String (Required)\n                             source: String (Required)\n                             relativeMountPath: String (Required)\n                             mountOptions: String (Optional)\n                             password: String (Required)\n                         }\n                         azureFileShareConfiguration (Optional): {\n                             accountName: String (Required)\n                             azureFileUrl: String (Required)\n                             accountKey: String (Required)\n                             relativeMountPath: String (Required)\n                             mountOptions: String (Optional)\n                         }\n                     }\n                 ]\n                 targetNodeCommunicationMode: String(default/classic/simplified) (Optional)\n             }\n         }\n     }\n     onAllTasksComplete: String(noaction/terminatejob) (Optional)\n     onTaskFailure: String(noaction/performexitoptionsjobaction) (Optional)\n     networkConfiguration (Optional): {\n         subnetId: String (Required)\n     }\n     metadata (Optional): [\n         (recursive schema, see above)\n     ]\n     executionInfo (Optional): {\n         startTime: OffsetDateTime (Required)\n         endTime: OffsetDateTime (Optional)\n         poolId: String (Optional)\n         schedulingError (Optional): {\n             category: String(usererror/servererror) (Required)\n             code: String (Optional)\n             message: String (Optional)\n             details (Optional): [\n                  (Optional){\n                     name: String (Optional)\n                     value: String (Optional)\n                 }\n             ]\n         }\n         terminateReason: String (Optional)\n     }\n     stats (Optional): {\n         url: String (Required)\n         startTime: OffsetDateTime (Required)\n         lastUpdateTime: OffsetDateTime (Required)\n         userCPUTime: Duration (Required)\n         kernelCPUTime: Duration (Required)\n         wallClockTime: Duration (Required)\n         readIOps: int (Required)\n         writeIOps: int (Required)\n         readIOGiB: double (Required)\n         writeIOGiB: double (Required)\n         numSucceededTasks: int (Required)\n         numFailedTasks: int (Required)\n         numTaskRetries: int (Required)\n         waitTime: Duration (Required)\n     }\n }\n```"
  returns:
    description: "the <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Void.html\">Void</a>&gt;"
- uid: "com.azure.compute.batch.BatchClient.replaceNodeUser(java.lang.String,java.lang.String,java.lang.String,com.azure.compute.batch.models.BatchNodeUserUpdateContent)"
  fullName: "com.azure.compute.batch.BatchClient.replaceNodeUser(String poolId, String nodeId, String userName, BatchNodeUserUpdateContent body)"
  name: "replaceNodeUser(String poolId, String nodeId, String userName, BatchNodeUserUpdateContent body)"
  nameWithType: "BatchClient.replaceNodeUser(String poolId, String nodeId, String userName, BatchNodeUserUpdateContent body)"
  summary: "Updates the password and expiration time of a user Account on the specified Compute Node."
  parameters:
  - description: "The ID of the Pool that contains the Compute Node."
    name: "poolId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The ID of the machine on which you want to update a user Account."
    name: "nodeId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The name of the user Account to update."
    name: "userName"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The options to use for updating the user."
    name: "body"
    type: "<xref href=\"com.azure.compute.batch.models.BatchNodeUserUpdateContent?alt=com.azure.compute.batch.models.BatchNodeUserUpdateContent&text=BatchNodeUserUpdateContent\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public void replaceNodeUser(String poolId, String nodeId, String userName, BatchNodeUserUpdateContent body)"
  desc: "Updates the password and expiration time of a user Account on the specified Compute Node.\n\nThis operation replaces all of the updatable properties of the Account. For example, if the expiryTime element is not specified, the current value is replaced with the default value, not left unmodified. You can update a user Account on a Compute Node only when it is in the idle or running state."
- uid: "com.azure.compute.batch.BatchClient.replaceNodeUser(java.lang.String,java.lang.String,java.lang.String,com.azure.compute.batch.models.BatchNodeUserUpdateContent,com.azure.compute.batch.models.ReplaceBatchNodeUserOptions)"
  fullName: "com.azure.compute.batch.BatchClient.replaceNodeUser(String poolId, String nodeId, String userName, BatchNodeUserUpdateContent body, ReplaceBatchNodeUserOptions options)"
  name: "replaceNodeUser(String poolId, String nodeId, String userName, BatchNodeUserUpdateContent body, ReplaceBatchNodeUserOptions options)"
  nameWithType: "BatchClient.replaceNodeUser(String poolId, String nodeId, String userName, BatchNodeUserUpdateContent body, ReplaceBatchNodeUserOptions options)"
  summary: "Updates the password and expiration time of a user Account on the specified Compute Node."
  parameters:
  - description: "The ID of the Pool that contains the Compute Node."
    name: "poolId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The ID of the machine on which you want to update a user Account."
    name: "nodeId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The name of the user Account to update."
    name: "userName"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The options to use for updating the user."
    name: "body"
    type: "<xref href=\"com.azure.compute.batch.models.BatchNodeUserUpdateContent?alt=com.azure.compute.batch.models.BatchNodeUserUpdateContent&text=BatchNodeUserUpdateContent\" data-throw-if-not-resolved=\"False\" />"
  - description: "A group containing optional parameters like timeOutInSeconds."
    name: "options"
    type: "<xref href=\"com.azure.compute.batch.models.ReplaceBatchNodeUserOptions?alt=com.azure.compute.batch.models.ReplaceBatchNodeUserOptions&text=ReplaceBatchNodeUserOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public void replaceNodeUser(String poolId, String nodeId, String userName, BatchNodeUserUpdateContent body, ReplaceBatchNodeUserOptions options)"
  desc: "Updates the password and expiration time of a user Account on the specified Compute Node.\n\nThis operation replaces all of the updatable properties of the Account. For example, if the expiryTime element is not specified, the current value is replaced with the default value, not left unmodified. You can update a user Account on a Compute Node only when it is in the idle or running state."
- uid: "com.azure.compute.batch.BatchClient.replaceNodeUserWithResponse(java.lang.String,java.lang.String,java.lang.String,com.azure.core.util.BinaryData,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.compute.batch.BatchClient.replaceNodeUserWithResponse(String poolId, String nodeId, String userName, BinaryData parameters, RequestOptions requestOptions)"
  name: "replaceNodeUserWithResponse(String poolId, String nodeId, String userName, BinaryData parameters, RequestOptions requestOptions)"
  nameWithType: "BatchClient.replaceNodeUserWithResponse(String poolId, String nodeId, String userName, BinaryData parameters, RequestOptions requestOptions)"
  summary: "Updates the password and expiration time of a user Account on the specified Compute Node."
  parameters:
  - description: "The ID of the Pool that contains the Compute Node."
    name: "poolId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The ID of the machine on which you want to update a user Account."
    name: "nodeId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The name of the user Account to update."
    name: "userName"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The options to use for updating the user."
    name: "parameters"
    type: "<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<Void> replaceNodeUserWithResponse(String poolId, String nodeId, String userName, BinaryData parameters, RequestOptions requestOptions)"
  desc: "Updates the password and expiration time of a user Account on the specified Compute Node.\n\nThis operation replaces of all the updatable properties of the Account. For example, if the expiryTime element is not specified, the current value is replaced with the default value, not left unmodified. You can update a user Account on a Compute Node only when it is in the idle or running state.\n\n**Query Parameters**\n\n    | ------- | ------- | -------- | -------------------------------------------------------------------------------------------------------------- |\n    | Name    | Type    | Required | Description                                                                                                    |\n    | timeOut | Integer | No       | Sets the maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. |\n\nYou can add these to a request with <xref uid=\"com.azure.core.http.rest.RequestOptions.addQueryParam\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RequestOptions#addQueryParam\"></xref>\n\n**Request Body Schema**\n\n```java\n{\n     password: String (Optional)\n     expiryTime: OffsetDateTime (Optional)\n     sshPublicKey: String (Optional)\n }\n```"
  returns:
    description: "the <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Void.html\">Void</a>&gt;"
- uid: "com.azure.compute.batch.BatchClient.replacePoolProperties(java.lang.String,com.azure.compute.batch.models.BatchPoolReplaceContent)"
  fullName: "com.azure.compute.batch.BatchClient.replacePoolProperties(String poolId, BatchPoolReplaceContent body)"
  name: "replacePoolProperties(String poolId, BatchPoolReplaceContent body)"
  nameWithType: "BatchClient.replacePoolProperties(String poolId, BatchPoolReplaceContent body)"
  summary: "Updates the properties of the specified Pool."
  parameters:
  - description: "The ID of the Pool to update."
    name: "poolId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The options to use for replacing properties on the pool."
    name: "body"
    type: "<xref href=\"com.azure.compute.batch.models.BatchPoolReplaceContent?alt=com.azure.compute.batch.models.BatchPoolReplaceContent&text=BatchPoolReplaceContent\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public void replacePoolProperties(String poolId, BatchPoolReplaceContent body)"
  desc: "Updates the properties of the specified Pool."
- uid: "com.azure.compute.batch.BatchClient.replacePoolProperties(java.lang.String,com.azure.compute.batch.models.BatchPoolReplaceContent,com.azure.compute.batch.models.ReplaceBatchPoolPropertiesOptions)"
  fullName: "com.azure.compute.batch.BatchClient.replacePoolProperties(String poolId, BatchPoolReplaceContent body, ReplaceBatchPoolPropertiesOptions options)"
  name: "replacePoolProperties(String poolId, BatchPoolReplaceContent body, ReplaceBatchPoolPropertiesOptions options)"
  nameWithType: "BatchClient.replacePoolProperties(String poolId, BatchPoolReplaceContent body, ReplaceBatchPoolPropertiesOptions options)"
  summary: "Updates the properties of the specified Pool."
  parameters:
  - description: "The ID of the Pool to update."
    name: "poolId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The options to use for replacing properties on the pool."
    name: "body"
    type: "<xref href=\"com.azure.compute.batch.models.BatchPoolReplaceContent?alt=com.azure.compute.batch.models.BatchPoolReplaceContent&text=BatchPoolReplaceContent\" data-throw-if-not-resolved=\"False\" />"
  - description: "A group of optional parameters."
    name: "options"
    type: "<xref href=\"com.azure.compute.batch.models.ReplaceBatchPoolPropertiesOptions?alt=com.azure.compute.batch.models.ReplaceBatchPoolPropertiesOptions&text=ReplaceBatchPoolPropertiesOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public void replacePoolProperties(String poolId, BatchPoolReplaceContent body, ReplaceBatchPoolPropertiesOptions options)"
  desc: "Updates the properties of the specified Pool."
- uid: "com.azure.compute.batch.BatchClient.replacePoolPropertiesWithResponse(java.lang.String,com.azure.core.util.BinaryData,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.compute.batch.BatchClient.replacePoolPropertiesWithResponse(String poolId, BinaryData pool, RequestOptions requestOptions)"
  name: "replacePoolPropertiesWithResponse(String poolId, BinaryData pool, RequestOptions requestOptions)"
  nameWithType: "BatchClient.replacePoolPropertiesWithResponse(String poolId, BinaryData pool, RequestOptions requestOptions)"
  summary: "Updates the properties of the specified Pool."
  parameters:
  - description: "The ID of the Pool to update."
    name: "poolId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The options to use for replacing properties on the pool."
    name: "pool"
    type: "<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<Void> replacePoolPropertiesWithResponse(String poolId, BinaryData pool, RequestOptions requestOptions)"
  desc: "Updates the properties of the specified Pool.\n\nThis fully replaces all the updatable properties of the Pool. For example, if the Pool has a StartTask associated with it and if StartTask is not specified with this request, then the Batch service will remove the existing StartTask.\n\n**Query Parameters**\n\n    | ------- | ------- | -------- | -------------------------------------------------------------------------------------------------------------- |\n    | Name    | Type    | Required | Description                                                                                                    |\n    | timeOut | Integer | No       | Sets the maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. |\n\nYou can add these to a request with <xref uid=\"com.azure.core.http.rest.RequestOptions.addQueryParam\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RequestOptions#addQueryParam\"></xref>\n\n**Request Body Schema**\n\n```java\n{\n     startTask (Optional): {\n         commandLine: String (Required)\n         containerSettings (Optional): {\n             containerRunOptions: String (Optional)\n             imageName: String (Required)\n             registry (Optional): {\n                 username: String (Optional)\n                 password: String (Optional)\n                 registryServer: String (Optional)\n                 identityReference (Optional): {\n                     resourceId: String (Optional)\n                 }\n             }\n             workingDirectory: String(taskWorkingDirectory/containerImageDefault) (Optional)\n         }\n         resourceFiles (Optional): [\n              (Optional){\n                 autoStorageContainerName: String (Optional)\n                 storageContainerUrl: String (Optional)\n                 httpUrl: String (Optional)\n                 blobPrefix: String (Optional)\n                 filePath: String (Optional)\n                 fileMode: String (Optional)\n                 identityReference (Optional): (recursive schema, see identityReference above)\n             }\n         ]\n         environmentSettings (Optional): [\n              (Optional){\n                 name: String (Required)\n                 value: String (Optional)\n             }\n         ]\n         userIdentity (Optional): {\n             username: String (Optional)\n             autoUser (Optional): {\n                 scope: String(task/pool) (Optional)\n                 elevationLevel: String(nonadmin/admin) (Optional)\n             }\n         }\n         maxTaskRetryCount: Integer (Optional)\n         waitForSuccess: Boolean (Optional)\n     }\n     applicationPackageReferences (Required): [\n          (Required){\n             applicationId: String (Required)\n             version: String (Optional)\n         }\n     ]\n     metadata (Required): [\n          (Required){\n             name: String (Required)\n             value: String (Required)\n         }\n     ]\n     targetNodeCommunicationMode: String(default/classic/simplified) (Optional)\n }\n```"
  returns:
    description: "the <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Void.html\">Void</a>&gt;"
- uid: "com.azure.compute.batch.BatchClient.replaceTask(java.lang.String,java.lang.String,com.azure.compute.batch.models.BatchTask)"
  fullName: "com.azure.compute.batch.BatchClient.replaceTask(String jobId, String taskId, BatchTask body)"
  name: "replaceTask(String jobId, String taskId, BatchTask body)"
  nameWithType: "BatchClient.replaceTask(String jobId, String taskId, BatchTask body)"
  summary: "Updates the properties of the specified Task."
  parameters:
  - description: "The ID of the Job containing the Task."
    name: "jobId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The ID of the Task to update."
    name: "taskId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The Task to update."
    name: "body"
    type: "<xref href=\"com.azure.compute.batch.models.BatchTask?alt=com.azure.compute.batch.models.BatchTask&text=BatchTask\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public void replaceTask(String jobId, String taskId, BatchTask body)"
  desc: "Updates the properties of the specified Task."
- uid: "com.azure.compute.batch.BatchClient.replaceTask(java.lang.String,java.lang.String,com.azure.compute.batch.models.BatchTask,com.azure.compute.batch.models.ReplaceBatchTaskOptions)"
  fullName: "com.azure.compute.batch.BatchClient.replaceTask(String jobId, String taskId, BatchTask body, ReplaceBatchTaskOptions options)"
  name: "replaceTask(String jobId, String taskId, BatchTask body, ReplaceBatchTaskOptions options)"
  nameWithType: "BatchClient.replaceTask(String jobId, String taskId, BatchTask body, ReplaceBatchTaskOptions options)"
  summary: "Updates the properties of the specified Task."
  parameters:
  - description: "The ID of the Job containing the Task."
    name: "jobId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The ID of the Task to update."
    name: "taskId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The Task to update."
    name: "body"
    type: "<xref href=\"com.azure.compute.batch.models.BatchTask?alt=com.azure.compute.batch.models.BatchTask&text=BatchTask\" data-throw-if-not-resolved=\"False\" />"
  - description: "A group containing optional parameters like timeOutInSeconds and requestConditions."
    name: "options"
    type: "<xref href=\"com.azure.compute.batch.models.ReplaceBatchTaskOptions?alt=com.azure.compute.batch.models.ReplaceBatchTaskOptions&text=ReplaceBatchTaskOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public void replaceTask(String jobId, String taskId, BatchTask body, ReplaceBatchTaskOptions options)"
  desc: "Updates the properties of the specified Task."
- uid: "com.azure.compute.batch.BatchClient.replaceTaskWithResponse(java.lang.String,java.lang.String,com.azure.core.util.BinaryData,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.compute.batch.BatchClient.replaceTaskWithResponse(String jobId, String taskId, BinaryData task, RequestOptions requestOptions)"
  name: "replaceTaskWithResponse(String jobId, String taskId, BinaryData task, RequestOptions requestOptions)"
  nameWithType: "BatchClient.replaceTaskWithResponse(String jobId, String taskId, BinaryData task, RequestOptions requestOptions)"
  summary: "Updates the properties of the specified Task."
  parameters:
  - description: "The ID of the Job containing the Task."
    name: "jobId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The ID of the Task to update."
    name: "taskId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The Task to update."
    name: "task"
    type: "<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<Void> replaceTaskWithResponse(String jobId, String taskId, BinaryData task, RequestOptions requestOptions)"
  desc: "Updates the properties of the specified Task.\n\n**Query Parameters**\n\n    | ------- | ------- | -------- | -------------------------------------------------------------------------------------------------------------- |\n    | Name    | Type    | Required | Description                                                                                                    |\n    | timeOut | Integer | No       | Sets the maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. |\n\nYou can add these to a request with <xref uid=\"com.azure.core.http.rest.RequestOptions.addQueryParam\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RequestOptions#addQueryParam\"></xref>\n\n**Header Parameters**\n\n    | ------------------- | -------------- | -------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n    | Name                | Type           | Required | Description                                                                                                                                                                                                          |\n    | if-match            | String         | No       | An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service exactly matches the value specified by the client. |\n    | if-none-match       | String         | No       | An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service does not match the value specified by the client.  |\n    | if-modified-since   | OffsetDateTime | No       | A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has been modified since the specified time.                   |\n    | if-unmodified-since | OffsetDateTime | No       | A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has not been modified since the specified time.               |\n\nYou can add these to a request with <xref uid=\"com.azure.core.http.rest.RequestOptions.addHeader\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RequestOptions#addHeader\"></xref>\n\n**Request Body Schema**\n\n```java\n{\n     id: String (Optional)\n     displayName: String (Optional)\n     url: String (Optional)\n     eTag: String (Optional)\n     lastModified: OffsetDateTime (Optional)\n     creationTime: OffsetDateTime (Optional)\n     exitConditions (Optional): {\n         exitCodes (Optional): [\n              (Optional){\n                 code: int (Required)\n                 exitOptions (Required): {\n                     jobAction: String(none/disable/terminate) (Optional)\n                     dependencyAction: String(satisfy/block) (Optional)\n                 }\n             }\n         ]\n         exitCodeRanges (Optional): [\n              (Optional){\n                 start: int (Required)\n                 end: int (Required)\n                 exitOptions (Required): (recursive schema, see exitOptions above)\n             }\n         ]\n         preProcessingError (Optional): (recursive schema, see preProcessingError above)\n         fileUploadError (Optional): (recursive schema, see fileUploadError above)\n         default (Optional): (recursive schema, see default above)\n     }\n     state: String(active/preparing/running/completed) (Optional)\n     stateTransitionTime: OffsetDateTime (Optional)\n     previousState: String(active/preparing/running/completed) (Optional)\n     previousStateTransitionTime: OffsetDateTime (Optional)\n     commandLine: String (Optional)\n     containerSettings (Optional): {\n         containerRunOptions: String (Optional)\n         imageName: String (Required)\n         registry (Optional): {\n             username: String (Optional)\n             password: String (Optional)\n             registryServer: String (Optional)\n             identityReference (Optional): {\n                 resourceId: String (Optional)\n             }\n         }\n         workingDirectory: String(taskWorkingDirectory/containerImageDefault) (Optional)\n     }\n     resourceFiles (Optional): [\n          (Optional){\n             autoStorageContainerName: String (Optional)\n             storageContainerUrl: String (Optional)\n             httpUrl: String (Optional)\n             blobPrefix: String (Optional)\n             filePath: String (Optional)\n             fileMode: String (Optional)\n             identityReference (Optional): (recursive schema, see identityReference above)\n         }\n     ]\n     outputFiles (Optional): [\n          (Optional){\n             filePattern: String (Required)\n             destination (Required): {\n                 container (Optional): {\n                     path: String (Optional)\n                     containerUrl: String (Required)\n                     identityReference (Optional): (recursive schema, see identityReference above)\n                     uploadHeaders (Optional): [\n                          (Optional){\n                             name: String (Required)\n                             value: String (Optional)\n                         }\n                     ]\n                 }\n             }\n             uploadOptions (Required): {\n                 uploadCondition: String(tasksuccess/taskfailure/taskcompletion) (Required)\n             }\n         }\n     ]\n     environmentSettings (Optional): [\n          (Optional){\n             name: String (Required)\n             value: String (Optional)\n         }\n     ]\n     affinityInfo (Optional): {\n         affinityId: String (Required)\n     }\n     constraints (Optional): {\n         maxWallClockTime: Duration (Optional)\n         retentionTime: Duration (Optional)\n         maxTaskRetryCount: Integer (Optional)\n     }\n     requiredSlots: Integer (Optional)\n     userIdentity (Optional): {\n         username: String (Optional)\n         autoUser (Optional): {\n             scope: String(task/pool) (Optional)\n             elevationLevel: String(nonadmin/admin) (Optional)\n         }\n     }\n     executionInfo (Optional): {\n         startTime: OffsetDateTime (Optional)\n         endTime: OffsetDateTime (Optional)\n         exitCode: Integer (Optional)\n         containerInfo (Optional): {\n             containerId: String (Optional)\n             state: String (Optional)\n             error: String (Optional)\n         }\n         failureInfo (Optional): {\n             category: String(usererror/servererror) (Required)\n             code: String (Optional)\n             message: String (Optional)\n             details (Optional): [\n                  (Optional){\n                     name: String (Optional)\n                     value: String (Optional)\n                 }\n             ]\n         }\n         retryCount: int (Required)\n         lastRetryTime: OffsetDateTime (Optional)\n         requeueCount: int (Required)\n         lastRequeueTime: OffsetDateTime (Optional)\n         result: String(success/failure) (Optional)\n     }\n     nodeInfo (Optional): {\n         affinityId: String (Optional)\n         nodeUrl: String (Optional)\n         poolId: String (Optional)\n         nodeId: String (Optional)\n         taskRootDirectory: String (Optional)\n         taskRootDirectoryUrl: String (Optional)\n     }\n     multiInstanceSettings (Optional): {\n         numberOfInstances: Integer (Optional)\n         coordinationCommandLine: String (Required)\n         commonResourceFiles (Optional): [\n             (recursive schema, see above)\n         ]\n     }\n     stats (Optional): {\n         url: String (Required)\n         startTime: OffsetDateTime (Required)\n         lastUpdateTime: OffsetDateTime (Required)\n         userCPUTime: Duration (Required)\n         kernelCPUTime: Duration (Required)\n         wallClockTime: Duration (Required)\n         readIOps: int (Required)\n         writeIOps: int (Required)\n         readIOGiB: double (Required)\n         writeIOGiB: double (Required)\n         waitTime: Duration (Required)\n     }\n     dependsOn (Optional): {\n         taskIds (Optional): [\n             String (Optional)\n         ]\n         taskIdRanges (Optional): [\n              (Optional){\n                 start: int (Required)\n                 end: int (Required)\n             }\n         ]\n     }\n     applicationPackageReferences (Optional): [\n          (Optional){\n             applicationId: String (Required)\n             version: String (Optional)\n         }\n     ]\n     authenticationTokenSettings (Optional): {\n         access (Optional): [\n             String(job) (Optional)\n         ]\n     }\n }\n```"
  returns:
    description: "the <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Void.html\">Void</a>&gt;"
- uid: "com.azure.compute.batch.BatchClient.resizePool(java.lang.String,com.azure.compute.batch.models.BatchPoolResizeContent)"
  fullName: "com.azure.compute.batch.BatchClient.resizePool(String poolId, BatchPoolResizeContent body)"
  name: "resizePool(String poolId, BatchPoolResizeContent body)"
  nameWithType: "BatchClient.resizePool(String poolId, BatchPoolResizeContent body)"
  summary: "Changes the number of Compute Nodes that are assigned to a Pool using the options provided in options."
  parameters:
  - description: "The ID of the Pool to get."
    name: "poolId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The options to use for resizing the pool."
    name: "body"
    type: "<xref href=\"com.azure.compute.batch.models.BatchPoolResizeContent?alt=com.azure.compute.batch.models.BatchPoolResizeContent&text=BatchPoolResizeContent\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public void resizePool(String poolId, BatchPoolResizeContent body)"
  desc: "Changes the number of Compute Nodes that are assigned to a Pool using the options provided in options.\n\nYou can only resize a Pool when its allocation state is steady. If the Pool is already resizing, the request fails with status code 409. When you resize a Pool, the Pool's allocation state changes from steady to resizing. You cannot resize Pools which are configured for automatic scaling. If you try to do this, the Batch service returns an error 409. If you resize a Pool downwards, the Batch service chooses which Compute Nodes to remove. To remove specific Compute Nodes, use the Pool remove Compute Nodes API instead."
- uid: "com.azure.compute.batch.BatchClient.resizePool(java.lang.String,com.azure.compute.batch.models.BatchPoolResizeContent,com.azure.compute.batch.models.ResizeBatchPoolOptions)"
  fullName: "com.azure.compute.batch.BatchClient.resizePool(String poolId, BatchPoolResizeContent body, ResizeBatchPoolOptions options)"
  name: "resizePool(String poolId, BatchPoolResizeContent body, ResizeBatchPoolOptions options)"
  nameWithType: "BatchClient.resizePool(String poolId, BatchPoolResizeContent body, ResizeBatchPoolOptions options)"
  summary: "Changes the number of Compute Nodes that are assigned to a Pool using the options provided in options."
  parameters:
  - description: "The ID of the Pool to get."
    name: "poolId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The options to use for resizing the pool."
    name: "body"
    type: "<xref href=\"com.azure.compute.batch.models.BatchPoolResizeContent?alt=com.azure.compute.batch.models.BatchPoolResizeContent&text=BatchPoolResizeContent\" data-throw-if-not-resolved=\"False\" />"
  - description: "A group of optional parameters."
    name: "options"
    type: "<xref href=\"com.azure.compute.batch.models.ResizeBatchPoolOptions?alt=com.azure.compute.batch.models.ResizeBatchPoolOptions&text=ResizeBatchPoolOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public void resizePool(String poolId, BatchPoolResizeContent body, ResizeBatchPoolOptions options)"
  desc: "Changes the number of Compute Nodes that are assigned to a Pool using the options provided in options.\n\nYou can only resize a Pool when its allocation state is steady. If the Pool is already resizing, the request fails with status code 409. When you resize a Pool, the Pool's allocation state changes from steady to resizing. You cannot resize Pools which are configured for automatic scaling. If you try to do this, the Batch service returns an error 409. If you resize a Pool downwards, the Batch service chooses which Compute Nodes to remove. To remove specific Compute Nodes, use the Pool remove Compute Nodes API instead."
- uid: "com.azure.compute.batch.BatchClient.resizePoolWithResponse(java.lang.String,com.azure.core.util.BinaryData,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.compute.batch.BatchClient.resizePoolWithResponse(String poolId, BinaryData parameters, RequestOptions requestOptions)"
  name: "resizePoolWithResponse(String poolId, BinaryData parameters, RequestOptions requestOptions)"
  nameWithType: "BatchClient.resizePoolWithResponse(String poolId, BinaryData parameters, RequestOptions requestOptions)"
  summary: "Changes the number of Compute Nodes that are assigned to a Pool."
  parameters:
  - description: "The ID of the Pool to get."
    name: "poolId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The options to use for resizing the pool."
    name: "parameters"
    type: "<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<Void> resizePoolWithResponse(String poolId, BinaryData parameters, RequestOptions requestOptions)"
  desc: "Changes the number of Compute Nodes that are assigned to a Pool.\n\nYou can only resize a Pool when its allocation state is steady. If the Pool is already resizing, the request fails with status code 409. When you resize a Pool, the Pool's allocation state changes from steady to resizing. You cannot resize Pools which are configured for automatic scaling. If you try to do this, the Batch service returns an error 409. If you resize a Pool downwards, the Batch service chooses which Compute Nodes to remove. To remove specific Compute Nodes, use the Pool remove Compute Nodes API instead.\n\n**Query Parameters**\n\n    | ------- | ------- | -------- | -------------------------------------------------------------------------------------------------------------- |\n    | Name    | Type    | Required | Description                                                                                                    |\n    | timeOut | Integer | No       | Sets the maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. |\n\nYou can add these to a request with <xref uid=\"com.azure.core.http.rest.RequestOptions.addQueryParam\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RequestOptions#addQueryParam\"></xref>\n\n**Header Parameters**\n\n    | ------------------- | -------------- | -------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n    | Name                | Type           | Required | Description                                                                                                                                                                                                          |\n    | if-match            | String         | No       | An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service exactly matches the value specified by the client. |\n    | if-none-match       | String         | No       | An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service does not match the value specified by the client.  |\n    | if-modified-since   | OffsetDateTime | No       | A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has been modified since the specified time.                   |\n    | if-unmodified-since | OffsetDateTime | No       | A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has not been modified since the specified time.               |\n\nYou can add these to a request with <xref uid=\"com.azure.core.http.rest.RequestOptions.addHeader\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RequestOptions#addHeader\"></xref>\n\n**Request Body Schema**\n\n```java\n{\n     targetDedicatedNodes: Integer (Optional)\n     targetLowPriorityNodes: Integer (Optional)\n     resizeTimeout: Duration (Optional)\n     nodeDeallocationOption: String(requeue/terminate/taskcompletion/retaineddata) (Optional)\n }\n```"
  returns:
    description: "the <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Void.html\">Void</a>&gt;"
- uid: "com.azure.compute.batch.BatchClient.stopPoolResize(java.lang.String)"
  fullName: "com.azure.compute.batch.BatchClient.stopPoolResize(String poolId)"
  name: "stopPoolResize(String poolId)"
  nameWithType: "BatchClient.stopPoolResize(String poolId)"
  summary: "Stops an ongoing resize operation on the Pool."
  parameters:
  - description: "The ID of the Pool to get."
    name: "poolId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public void stopPoolResize(String poolId)"
  desc: "Stops an ongoing resize operation on the Pool."
- uid: "com.azure.compute.batch.BatchClient.stopPoolResize(java.lang.String,com.azure.compute.batch.models.StopBatchPoolResizeOptions)"
  fullName: "com.azure.compute.batch.BatchClient.stopPoolResize(String poolId, StopBatchPoolResizeOptions options)"
  name: "stopPoolResize(String poolId, StopBatchPoolResizeOptions options)"
  nameWithType: "BatchClient.stopPoolResize(String poolId, StopBatchPoolResizeOptions options)"
  summary: "Stops an ongoing resize operation on the Pool."
  parameters:
  - description: "The ID of the Pool to get."
    name: "poolId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "A group of optional parameters."
    name: "options"
    type: "<xref href=\"com.azure.compute.batch.models.StopBatchPoolResizeOptions?alt=com.azure.compute.batch.models.StopBatchPoolResizeOptions&text=StopBatchPoolResizeOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public void stopPoolResize(String poolId, StopBatchPoolResizeOptions options)"
  desc: "Stops an ongoing resize operation on the Pool."
- uid: "com.azure.compute.batch.BatchClient.stopPoolResizeWithResponse(java.lang.String,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.compute.batch.BatchClient.stopPoolResizeWithResponse(String poolId, RequestOptions requestOptions)"
  name: "stopPoolResizeWithResponse(String poolId, RequestOptions requestOptions)"
  nameWithType: "BatchClient.stopPoolResizeWithResponse(String poolId, RequestOptions requestOptions)"
  summary: "Stops an ongoing resize operation on the Pool."
  parameters:
  - description: "The ID of the Pool to get."
    name: "poolId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<Void> stopPoolResizeWithResponse(String poolId, RequestOptions requestOptions)"
  desc: "Stops an ongoing resize operation on the Pool.\n\nThis does not restore the Pool to its previous state before the resize operation: it only stops any further changes being made, and the Pool maintains its current state. After stopping, the Pool stabilizes at the number of Compute Nodes it was at when the stop operation was done. During the stop operation, the Pool allocation state changes first to stopping and then to steady. A resize operation need not be an explicit resize Pool request; this API can also be used to halt the initial sizing of the Pool when it is created.\n\n**Query Parameters**\n\n    | ------- | ------- | -------- | -------------------------------------------------------------------------------------------------------------- |\n    | Name    | Type    | Required | Description                                                                                                    |\n    | timeOut | Integer | No       | Sets the maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. |\n\nYou can add these to a request with <xref uid=\"com.azure.core.http.rest.RequestOptions.addQueryParam\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RequestOptions#addQueryParam\"></xref>\n\n**Header Parameters**\n\n    | ------------------- | -------------- | -------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n    | Name                | Type           | Required | Description                                                                                                                                                                                                          |\n    | if-match            | String         | No       | An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service exactly matches the value specified by the client. |\n    | if-none-match       | String         | No       | An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service does not match the value specified by the client.  |\n    | if-modified-since   | OffsetDateTime | No       | A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has been modified since the specified time.                   |\n    | if-unmodified-since | OffsetDateTime | No       | A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has not been modified since the specified time.               |\n\nYou can add these to a request with <xref uid=\"com.azure.core.http.rest.RequestOptions.addHeader\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RequestOptions#addHeader\"></xref>"
  returns:
    description: "the <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Void.html\">Void</a>&gt;"
- uid: "com.azure.compute.batch.BatchClient.terminateJob(java.lang.String)"
  fullName: "com.azure.compute.batch.BatchClient.terminateJob(String jobId)"
  name: "terminateJob(String jobId)"
  nameWithType: "BatchClient.terminateJob(String jobId)"
  summary: "Terminates the specified Job, marking it as completed."
  parameters:
  - description: "The ID of the Job to terminate."
    name: "jobId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public void terminateJob(String jobId)"
  desc: "Terminates the specified Job, marking it as completed.\n\nWhen a Terminate Job request is received, the Batch service sets the Job to the terminating state. The Batch service then terminates any running Tasks associated with the Job and runs any required Job release Tasks. Then the Job moves into the completed state. If there are any Tasks in the Job in the active state, they will remain in the active state. Once a Job is terminated, new Tasks cannot be added and any remaining active Tasks will not be scheduled."
- uid: "com.azure.compute.batch.BatchClient.terminateJob(java.lang.String,com.azure.compute.batch.models.TerminateBatchJobOptions,com.azure.compute.batch.models.BatchJobTerminateContent)"
  fullName: "com.azure.compute.batch.BatchClient.terminateJob(String jobId, TerminateBatchJobOptions options, BatchJobTerminateContent body)"
  name: "terminateJob(String jobId, TerminateBatchJobOptions options, BatchJobTerminateContent body)"
  nameWithType: "BatchClient.terminateJob(String jobId, TerminateBatchJobOptions options, BatchJobTerminateContent body)"
  summary: "Terminates the specified Job, marking it as completed."
  parameters:
  - description: "The ID of the Job to terminate."
    name: "jobId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "A group of optional parameters containing options like timeOutInSeconds and requestConditions."
    name: "options"
    type: "<xref href=\"com.azure.compute.batch.models.TerminateBatchJobOptions?alt=com.azure.compute.batch.models.TerminateBatchJobOptions&text=TerminateBatchJobOptions\" data-throw-if-not-resolved=\"False\" />"
  - description: "The options to use for terminating the Job."
    name: "body"
    type: "<xref href=\"com.azure.compute.batch.models.BatchJobTerminateContent?alt=com.azure.compute.batch.models.BatchJobTerminateContent&text=BatchJobTerminateContent\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public void terminateJob(String jobId, TerminateBatchJobOptions options, BatchJobTerminateContent body)"
  desc: "Terminates the specified Job, marking it as completed.\n\nWhen a Terminate Job request is received, the Batch service sets the Job to the terminating state. The Batch service then terminates any running Tasks associated with the Job and runs any required Job release Tasks. Then the Job moves into the completed state. If there are any Tasks in the Job in the active state, they will remain in the active state. Once a Job is terminated, new Tasks cannot be added and any remaining active Tasks will not be scheduled."
- uid: "com.azure.compute.batch.BatchClient.terminateJobSchedule(java.lang.String)"
  fullName: "com.azure.compute.batch.BatchClient.terminateJobSchedule(String jobScheduleId)"
  name: "terminateJobSchedule(String jobScheduleId)"
  nameWithType: "BatchClient.terminateJobSchedule(String jobScheduleId)"
  summary: "Terminates a Job Schedule."
  parameters:
  - description: "The ID of the Job Schedule to terminate."
    name: "jobScheduleId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public void terminateJobSchedule(String jobScheduleId)"
  desc: "Terminates a Job Schedule."
- uid: "com.azure.compute.batch.BatchClient.terminateJobSchedule(java.lang.String,com.azure.compute.batch.models.TerminateBatchJobScheduleOptions)"
  fullName: "com.azure.compute.batch.BatchClient.terminateJobSchedule(String jobScheduleId, TerminateBatchJobScheduleOptions options)"
  name: "terminateJobSchedule(String jobScheduleId, TerminateBatchJobScheduleOptions options)"
  nameWithType: "BatchClient.terminateJobSchedule(String jobScheduleId, TerminateBatchJobScheduleOptions options)"
  summary: "Terminates a Job Schedule."
  parameters:
  - description: "The ID of the Job Schedule to terminate."
    name: "jobScheduleId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "A group containing optional parameters like timeOutInSeconds and requestConditions."
    name: "options"
    type: "<xref href=\"com.azure.compute.batch.models.TerminateBatchJobScheduleOptions?alt=com.azure.compute.batch.models.TerminateBatchJobScheduleOptions&text=TerminateBatchJobScheduleOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public void terminateJobSchedule(String jobScheduleId, TerminateBatchJobScheduleOptions options)"
  desc: "Terminates a Job Schedule."
- uid: "com.azure.compute.batch.BatchClient.terminateJobScheduleWithResponse(java.lang.String,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.compute.batch.BatchClient.terminateJobScheduleWithResponse(String jobScheduleId, RequestOptions requestOptions)"
  name: "terminateJobScheduleWithResponse(String jobScheduleId, RequestOptions requestOptions)"
  nameWithType: "BatchClient.terminateJobScheduleWithResponse(String jobScheduleId, RequestOptions requestOptions)"
  summary: "Terminates a Job Schedule."
  parameters:
  - description: "The ID of the Job Schedule to terminates."
    name: "jobScheduleId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<Void> terminateJobScheduleWithResponse(String jobScheduleId, RequestOptions requestOptions)"
  desc: "Terminates a Job Schedule.\n\n**Query Parameters**\n\n    | ------- | ------- | -------- | -------------------------------------------------------------------------------------------------------------- |\n    | Name    | Type    | Required | Description                                                                                                    |\n    | timeOut | Integer | No       | Sets the maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. |\n\nYou can add these to a request with <xref uid=\"com.azure.core.http.rest.RequestOptions.addQueryParam\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RequestOptions#addQueryParam\"></xref>\n\n**Header Parameters**\n\n    | ------------------- | -------------- | -------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n    | Name                | Type           | Required | Description                                                                                                                                                                                                          |\n    | if-match            | String         | No       | An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service exactly matches the value specified by the client. |\n    | if-none-match       | String         | No       | An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service does not match the value specified by the client.  |\n    | if-modified-since   | OffsetDateTime | No       | A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has been modified since the specified time.                   |\n    | if-unmodified-since | OffsetDateTime | No       | A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has not been modified since the specified time.               |\n\nYou can add these to a request with <xref uid=\"com.azure.core.http.rest.RequestOptions.addHeader\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RequestOptions#addHeader\"></xref>"
  returns:
    description: "the <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Void.html\">Void</a>&gt;"
- uid: "com.azure.compute.batch.BatchClient.terminateJobWithResponse(java.lang.String,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.compute.batch.BatchClient.terminateJobWithResponse(String jobId, RequestOptions requestOptions)"
  name: "terminateJobWithResponse(String jobId, RequestOptions requestOptions)"
  nameWithType: "BatchClient.terminateJobWithResponse(String jobId, RequestOptions requestOptions)"
  summary: "Terminates the specified Job, marking it as completed."
  parameters:
  - description: "The ID of the Job to terminate."
    name: "jobId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<Void> terminateJobWithResponse(String jobId, RequestOptions requestOptions)"
  desc: "Terminates the specified Job, marking it as completed.\n\nWhen a Terminate Job request is received, the Batch service sets the Job to the terminating state. The Batch service then terminates any running Tasks associated with the Job and runs any required Job release Tasks. Then the Job moves into the completed state. If there are any Tasks in the Job in the active state, they will remain in the active state. Once a Job is terminated, new Tasks cannot be added and any remaining active Tasks will not be scheduled.\n\n**Query Parameters**\n\n    | ------- | ------- | -------- | -------------------------------------------------------------------------------------------------------------- |\n    | Name    | Type    | Required | Description                                                                                                    |\n    | timeOut | Integer | No       | Sets the maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. |\n\nYou can add these to a request with <xref uid=\"com.azure.core.http.rest.RequestOptions.addQueryParam\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RequestOptions#addQueryParam\"></xref>\n\n**Header Parameters**\n\n    | ------------------- | -------------- | -------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n    | Name                | Type           | Required | Description                                                                                                                                                                                                          |\n    | if-match            | String         | No       | An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service exactly matches the value specified by the client. |\n    | if-none-match       | String         | No       | An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service does not match the value specified by the client.  |\n    | if-modified-since   | OffsetDateTime | No       | A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has been modified since the specified time.                   |\n    | if-unmodified-since | OffsetDateTime | No       | A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has not been modified since the specified time.               |\n\nYou can add these to a request with <xref uid=\"com.azure.core.http.rest.RequestOptions.addHeader\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RequestOptions#addHeader\"></xref>\n\n**Request Body Schema**\n\n```java\n{\n     terminateReason: String (Optional)\n }\n```"
  returns:
    description: "the <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Void.html\">Void</a>&gt;"
- uid: "com.azure.compute.batch.BatchClient.terminateTask(java.lang.String,java.lang.String)"
  fullName: "com.azure.compute.batch.BatchClient.terminateTask(String jobId, String taskId)"
  name: "terminateTask(String jobId, String taskId)"
  nameWithType: "BatchClient.terminateTask(String jobId, String taskId)"
  summary: "Terminates the specified Task."
  parameters:
  - description: "The ID of the Job containing the Task."
    name: "jobId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The ID of the Task to terminate."
    name: "taskId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public void terminateTask(String jobId, String taskId)"
  desc: "Terminates the specified Task.\n\nWhen the Task has been terminated, it moves to the completed state. For multi-instance Tasks, the terminate Task operation applies synchronously to the primary task; subtasks are then terminated asynchronously in the background."
- uid: "com.azure.compute.batch.BatchClient.terminateTask(java.lang.String,java.lang.String,com.azure.compute.batch.models.TerminateBatchTaskOptions)"
  fullName: "com.azure.compute.batch.BatchClient.terminateTask(String jobId, String taskId, TerminateBatchTaskOptions options)"
  name: "terminateTask(String jobId, String taskId, TerminateBatchTaskOptions options)"
  nameWithType: "BatchClient.terminateTask(String jobId, String taskId, TerminateBatchTaskOptions options)"
  summary: "Terminates the specified Task."
  parameters:
  - description: "The ID of the Job containing the Task."
    name: "jobId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The ID of the Task to terminate."
    name: "taskId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "A group containing optional parameters like timeOutInSeconds and requestConditions."
    name: "options"
    type: "<xref href=\"com.azure.compute.batch.models.TerminateBatchTaskOptions?alt=com.azure.compute.batch.models.TerminateBatchTaskOptions&text=TerminateBatchTaskOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public void terminateTask(String jobId, String taskId, TerminateBatchTaskOptions options)"
  desc: "Terminates the specified Task.\n\nWhen the Task has been terminated, it moves to the completed state. For multi-instance Tasks, the terminate Task operation applies synchronously to the primary task; subtasks are then terminated asynchronously in the background."
- uid: "com.azure.compute.batch.BatchClient.terminateTaskWithResponse(java.lang.String,java.lang.String,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.compute.batch.BatchClient.terminateTaskWithResponse(String jobId, String taskId, RequestOptions requestOptions)"
  name: "terminateTaskWithResponse(String jobId, String taskId, RequestOptions requestOptions)"
  nameWithType: "BatchClient.terminateTaskWithResponse(String jobId, String taskId, RequestOptions requestOptions)"
  summary: "Terminates the specified Task."
  parameters:
  - description: "The ID of the Job containing the Task."
    name: "jobId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The ID of the Task to terminate."
    name: "taskId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<Void> terminateTaskWithResponse(String jobId, String taskId, RequestOptions requestOptions)"
  desc: "Terminates the specified Task.\n\nWhen the Task has been terminated, it moves to the completed state. For multi-instance Tasks, the terminate Task operation applies synchronously to the primary task; subtasks are then terminated asynchronously in the background.\n\n**Query Parameters**\n\n    | ------- | ------- | -------- | -------------------------------------------------------------------------------------------------------------- |\n    | Name    | Type    | Required | Description                                                                                                    |\n    | timeOut | Integer | No       | Sets the maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. |\n\nYou can add these to a request with <xref uid=\"com.azure.core.http.rest.RequestOptions.addQueryParam\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RequestOptions#addQueryParam\"></xref>\n\n**Header Parameters**\n\n    | ------------------- | -------------- | -------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n    | Name                | Type           | Required | Description                                                                                                                                                                                                          |\n    | if-match            | String         | No       | An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service exactly matches the value specified by the client. |\n    | if-none-match       | String         | No       | An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service does not match the value specified by the client.  |\n    | if-modified-since   | OffsetDateTime | No       | A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has been modified since the specified time.                   |\n    | if-unmodified-since | OffsetDateTime | No       | A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has not been modified since the specified time.               |\n\nYou can add these to a request with <xref uid=\"com.azure.core.http.rest.RequestOptions.addHeader\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RequestOptions#addHeader\"></xref>"
  returns:
    description: "the <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Void.html\">Void</a>&gt;"
- uid: "com.azure.compute.batch.BatchClient.updateJob(java.lang.String,com.azure.compute.batch.models.BatchJobUpdateContent)"
  fullName: "com.azure.compute.batch.BatchClient.updateJob(String jobId, BatchJobUpdateContent body)"
  name: "updateJob(String jobId, BatchJobUpdateContent body)"
  nameWithType: "BatchClient.updateJob(String jobId, BatchJobUpdateContent body)"
  summary: "Updates the properties of the specified Job."
  parameters:
  - description: "The ID of the Job whose properties you want to update."
    name: "jobId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The options to use for updating the Job."
    name: "body"
    type: "<xref href=\"com.azure.compute.batch.models.BatchJobUpdateContent?alt=com.azure.compute.batch.models.BatchJobUpdateContent&text=BatchJobUpdateContent\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public void updateJob(String jobId, BatchJobUpdateContent body)"
  desc: "Updates the properties of the specified Job.\n\nThis replaces only the Job properties specified in the request. For example, if the Job has constraints, and a request does not specify the constraints element, then the Job keeps the existing constraints."
- uid: "com.azure.compute.batch.BatchClient.updateJob(java.lang.String,com.azure.compute.batch.models.BatchJobUpdateContent,com.azure.compute.batch.models.UpdateBatchJobOptions)"
  fullName: "com.azure.compute.batch.BatchClient.updateJob(String jobId, BatchJobUpdateContent body, UpdateBatchJobOptions options)"
  name: "updateJob(String jobId, BatchJobUpdateContent body, UpdateBatchJobOptions options)"
  nameWithType: "BatchClient.updateJob(String jobId, BatchJobUpdateContent body, UpdateBatchJobOptions options)"
  summary: "Updates the properties of the specified Job."
  parameters:
  - description: "The ID of the Job whose properties you want to update."
    name: "jobId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The options to use for updating the Job."
    name: "body"
    type: "<xref href=\"com.azure.compute.batch.models.BatchJobUpdateContent?alt=com.azure.compute.batch.models.BatchJobUpdateContent&text=BatchJobUpdateContent\" data-throw-if-not-resolved=\"False\" />"
  - description: "A group of optional parameters."
    name: "options"
    type: "<xref href=\"com.azure.compute.batch.models.UpdateBatchJobOptions?alt=com.azure.compute.batch.models.UpdateBatchJobOptions&text=UpdateBatchJobOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public void updateJob(String jobId, BatchJobUpdateContent body, UpdateBatchJobOptions options)"
  desc: "Updates the properties of the specified Job.\n\nThis replaces only the Job properties specified in the request. For example, if the Job has constraints, and a request does not specify the constraints element, then the Job keeps the existing constraints."
- uid: "com.azure.compute.batch.BatchClient.updateJobSchedule(java.lang.String,com.azure.compute.batch.models.BatchJobScheduleUpdateContent)"
  fullName: "com.azure.compute.batch.BatchClient.updateJobSchedule(String jobScheduleId, BatchJobScheduleUpdateContent body)"
  name: "updateJobSchedule(String jobScheduleId, BatchJobScheduleUpdateContent body)"
  nameWithType: "BatchClient.updateJobSchedule(String jobScheduleId, BatchJobScheduleUpdateContent body)"
  summary: "Updates the properties of the specified Job Schedule."
  parameters:
  - description: "The ID of the Job Schedule to update."
    name: "jobScheduleId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The options to use for updating the Job Schedule."
    name: "body"
    type: "<xref href=\"com.azure.compute.batch.models.BatchJobScheduleUpdateContent?alt=com.azure.compute.batch.models.BatchJobScheduleUpdateContent&text=BatchJobScheduleUpdateContent\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public void updateJobSchedule(String jobScheduleId, BatchJobScheduleUpdateContent body)"
  desc: "Updates the properties of the specified Job Schedule."
- uid: "com.azure.compute.batch.BatchClient.updateJobSchedule(java.lang.String,com.azure.compute.batch.models.BatchJobScheduleUpdateContent,com.azure.compute.batch.models.UpdateBatchJobScheduleOptions)"
  fullName: "com.azure.compute.batch.BatchClient.updateJobSchedule(String jobScheduleId, BatchJobScheduleUpdateContent body, UpdateBatchJobScheduleOptions options)"
  name: "updateJobSchedule(String jobScheduleId, BatchJobScheduleUpdateContent body, UpdateBatchJobScheduleOptions options)"
  nameWithType: "BatchClient.updateJobSchedule(String jobScheduleId, BatchJobScheduleUpdateContent body, UpdateBatchJobScheduleOptions options)"
  summary: "Updates the properties of the specified Job Schedule."
  parameters:
  - description: "The ID of the Job Schedule to update."
    name: "jobScheduleId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The options to use for updating the Job Schedule."
    name: "body"
    type: "<xref href=\"com.azure.compute.batch.models.BatchJobScheduleUpdateContent?alt=com.azure.compute.batch.models.BatchJobScheduleUpdateContent&text=BatchJobScheduleUpdateContent\" data-throw-if-not-resolved=\"False\" />"
  - description: "A group containing optional parameters like timeOutInSeconds and requestConditions."
    name: "options"
    type: "<xref href=\"com.azure.compute.batch.models.UpdateBatchJobScheduleOptions?alt=com.azure.compute.batch.models.UpdateBatchJobScheduleOptions&text=UpdateBatchJobScheduleOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public void updateJobSchedule(String jobScheduleId, BatchJobScheduleUpdateContent body, UpdateBatchJobScheduleOptions options)"
  desc: "Updates the properties of the specified Job Schedule."
- uid: "com.azure.compute.batch.BatchClient.updateJobScheduleWithResponse(java.lang.String,com.azure.core.util.BinaryData,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.compute.batch.BatchClient.updateJobScheduleWithResponse(String jobScheduleId, BinaryData jobSchedule, RequestOptions requestOptions)"
  name: "updateJobScheduleWithResponse(String jobScheduleId, BinaryData jobSchedule, RequestOptions requestOptions)"
  nameWithType: "BatchClient.updateJobScheduleWithResponse(String jobScheduleId, BinaryData jobSchedule, RequestOptions requestOptions)"
  summary: "Updates the properties of the specified Job Schedule."
  parameters:
  - description: "The ID of the Job Schedule to update."
    name: "jobScheduleId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The options to use for updating the Job Schedule."
    name: "jobSchedule"
    type: "<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<Void> updateJobScheduleWithResponse(String jobScheduleId, BinaryData jobSchedule, RequestOptions requestOptions)"
  desc: "Updates the properties of the specified Job Schedule.\n\nThis replaces only the Job Schedule properties specified in the request. For example, if the schedule property is not specified with this request, then the Batch service will keep the existing schedule. Changes to a Job Schedule only impact Jobs created by the schedule after the update has taken place; currently running Jobs are unaffected.\n\n**Query Parameters**\n\n    | ------- | ------- | -------- | -------------------------------------------------------------------------------------------------------------- |\n    | Name    | Type    | Required | Description                                                                                                    |\n    | timeOut | Integer | No       | Sets the maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. |\n\nYou can add these to a request with <xref uid=\"com.azure.core.http.rest.RequestOptions.addQueryParam\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RequestOptions#addQueryParam\"></xref>\n\n**Header Parameters**\n\n    | ------------------- | -------------- | -------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n    | Name                | Type           | Required | Description                                                                                                                                                                                                          |\n    | if-match            | String         | No       | An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service exactly matches the value specified by the client. |\n    | if-none-match       | String         | No       | An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service does not match the value specified by the client.  |\n    | if-modified-since   | OffsetDateTime | No       | A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has been modified since the specified time.                   |\n    | if-unmodified-since | OffsetDateTime | No       | A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has not been modified since the specified time.               |\n\nYou can add these to a request with <xref uid=\"com.azure.core.http.rest.RequestOptions.addHeader\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RequestOptions#addHeader\"></xref>\n\n**Request Body Schema**\n\n```java\n{\n     schedule (Optional): {\n         doNotRunUntil: OffsetDateTime (Optional)\n         doNotRunAfter: OffsetDateTime (Optional)\n         startWindow: Duration (Optional)\n         recurrenceInterval: Duration (Optional)\n     }\n     jobSpecification (Optional): {\n         priority: Integer (Optional)\n         allowTaskPreemption: Boolean (Optional)\n         maxParallelTasks: Integer (Optional)\n         displayName: String (Optional)\n         usesTaskDependencies: Boolean (Optional)\n         onAllTasksComplete: String(noaction/terminatejob) (Optional)\n         onTaskFailure: String(noaction/performexitoptionsjobaction) (Optional)\n         networkConfiguration (Optional): {\n             subnetId: String (Required)\n         }\n         constraints (Optional): {\n             maxWallClockTime: Duration (Optional)\n             maxTaskRetryCount: Integer (Optional)\n         }\n         jobManagerTask (Optional): {\n             id: String (Required)\n             displayName: String (Optional)\n             commandLine: String (Required)\n             containerSettings (Optional): {\n                 containerRunOptions: String (Optional)\n                 imageName: String (Required)\n                 registry (Optional): {\n                     username: String (Optional)\n                     password: String (Optional)\n                     registryServer: String (Optional)\n                     identityReference (Optional): {\n                         resourceId: String (Optional)\n                     }\n                 }\n                 workingDirectory: String(taskWorkingDirectory/containerImageDefault) (Optional)\n             }\n             resourceFiles (Optional): [\n                  (Optional){\n                     autoStorageContainerName: String (Optional)\n                     storageContainerUrl: String (Optional)\n                     httpUrl: String (Optional)\n                     blobPrefix: String (Optional)\n                     filePath: String (Optional)\n                     fileMode: String (Optional)\n                     identityReference (Optional): (recursive schema, see identityReference above)\n                 }\n             ]\n             outputFiles (Optional): [\n                  (Optional){\n                     filePattern: String (Required)\n                     destination (Required): {\n                         container (Optional): {\n                             path: String (Optional)\n                             containerUrl: String (Required)\n                             identityReference (Optional): (recursive schema, see identityReference above)\n                             uploadHeaders (Optional): [\n                                  (Optional){\n                                     name: String (Required)\n                                     value: String (Optional)\n                                 }\n                             ]\n                         }\n                     }\n                     uploadOptions (Required): {\n                         uploadCondition: String(tasksuccess/taskfailure/taskcompletion) (Required)\n                     }\n                 }\n             ]\n             environmentSettings (Optional): [\n                  (Optional){\n                     name: String (Required)\n                     value: String (Optional)\n                 }\n             ]\n             constraints (Optional): {\n                 maxWallClockTime: Duration (Optional)\n                 retentionTime: Duration (Optional)\n                 maxTaskRetryCount: Integer (Optional)\n             }\n             requiredSlots: Integer (Optional)\n             killJobOnCompletion: Boolean (Optional)\n             userIdentity (Optional): {\n                 username: String (Optional)\n                 autoUser (Optional): {\n                     scope: String(task/pool) (Optional)\n                     elevationLevel: String(nonadmin/admin) (Optional)\n                 }\n             }\n             runExclusive: Boolean (Optional)\n             applicationPackageReferences (Optional): [\n                  (Optional){\n                     applicationId: String (Required)\n                     version: String (Optional)\n                 }\n             ]\n             authenticationTokenSettings (Optional): {\n                 access (Optional): [\n                     String(job) (Optional)\n                 ]\n             }\n             allowLowPriorityNode: Boolean (Optional)\n         }\n         jobPreparationTask (Optional): {\n             id: String (Optional)\n             commandLine: String (Required)\n             containerSettings (Optional): (recursive schema, see containerSettings above)\n             resourceFiles (Optional): [\n                 (recursive schema, see above)\n             ]\n             environmentSettings (Optional): [\n                 (recursive schema, see above)\n             ]\n             constraints (Optional): (recursive schema, see constraints above)\n             waitForSuccess: Boolean (Optional)\n             userIdentity (Optional): (recursive schema, see userIdentity above)\n             rerunOnNodeRebootAfterSuccess: Boolean (Optional)\n         }\n         jobReleaseTask (Optional): {\n             id: String (Optional)\n             commandLine: String (Required)\n             containerSettings (Optional): (recursive schema, see containerSettings above)\n             resourceFiles (Optional): [\n                 (recursive schema, see above)\n             ]\n             environmentSettings (Optional): [\n                 (recursive schema, see above)\n             ]\n             maxWallClockTime: Duration (Optional)\n             retentionTime: Duration (Optional)\n             userIdentity (Optional): (recursive schema, see userIdentity above)\n         }\n         commonEnvironmentSettings (Optional): [\n             (recursive schema, see above)\n         ]\n         poolInfo (Required): {\n             poolId: String (Optional)\n             autoPoolSpecification (Optional): {\n                 autoPoolIdPrefix: String (Optional)\n                 poolLifetimeOption: String(jobschedule/job) (Required)\n                 keepAlive: Boolean (Optional)\n                 pool (Optional): {\n                     displayName: String (Optional)\n                     vmSize: String (Required)\n                     cloudServiceConfiguration (Optional): {\n                         osFamily: String (Required)\n                         osVersion: String (Optional)\n                     }\n                     virtualMachineConfiguration (Optional): {\n                         imageReference (Required): {\n                             publisher: String (Optional)\n                             offer: String (Optional)\n                             sku: String (Optional)\n                             version: String (Optional)\n                             virtualMachineImageId: String (Optional)\n                             exactVersion: String (Optional)\n                         }\n                         nodeAgentSKUId: String (Required)\n                         windowsConfiguration (Optional): {\n                             enableAutomaticUpdates: Boolean (Optional)\n                         }\n                         dataDisks (Optional): [\n                              (Optional){\n                                 lun: int (Required)\n                                 caching: String(none/readonly/readwrite) (Optional)\n                                 diskSizeGB: int (Required)\n                                 storageAccountType: String(standard_lrs/premium_lrs) (Optional)\n                             }\n                         ]\n                         licenseType: String (Optional)\n                         containerConfiguration (Optional): {\n                             type: String(dockerCompatible/criCompatible) (Required)\n                             containerImageNames (Optional): [\n                                 String (Optional)\n                             ]\n                             containerRegistries (Optional): [\n                                 (recursive schema, see above)\n                             ]\n                         }\n                         diskEncryptionConfiguration (Optional): {\n                             targets (Optional): [\n                                 String(osdisk/temporarydisk) (Optional)\n                             ]\n                         }\n                         nodePlacementConfiguration (Optional): {\n                             policy: String(regional/zonal) (Optional)\n                         }\n                         extensions (Optional): [\n                              (Optional){\n                                 name: String (Required)\n                                 publisher: String (Required)\n                                 type: String (Required)\n                                 typeHandlerVersion: String (Optional)\n                                 autoUpgradeMinorVersion: Boolean (Optional)\n                                 enableAutomaticUpgrade: Boolean (Optional)\n                                 settings (Optional): {\n                                     String: String (Optional)\n                                 }\n                                 protectedSettings (Optional): {\n                                     String: String (Optional)\n                                 }\n                                 provisionAfterExtensions (Optional): [\n                                     String (Optional)\n                                 ]\n                             }\n                         ]\n                         osDisk (Optional): {\n                             ephemeralOSDiskSettings (Optional): {\n                                 placement: String(cachedisk) (Optional)\n                             }\n                         }\n                     }\n                     taskSlotsPerNode: Integer (Optional)\n                     taskSchedulingPolicy (Optional): {\n                         nodeFillType: String(spread/pack) (Required)\n                     }\n                     resizeTimeout: Duration (Optional)\n                     targetDedicatedNodes: Integer (Optional)\n                     targetLowPriorityNodes: Integer (Optional)\n                     enableAutoScale: Boolean (Optional)\n                     autoScaleFormula: String (Optional)\n                     autoScaleEvaluationInterval: Duration (Optional)\n                     enableInterNodeCommunication: Boolean (Optional)\n                     networkConfiguration (Optional): {\n                         subnetId: String (Optional)\n                         dynamicVNetAssignmentScope: String(none/job) (Optional)\n                         endpointConfiguration (Optional): {\n                             inboundNATPools (Required): [\n                                  (Required){\n                                     name: String (Required)\n                                     protocol: String(tcp/udp) (Required)\n                                     backendPort: int (Required)\n                                     frontendPortRangeStart: int (Required)\n                                     frontendPortRangeEnd: int (Required)\n                                     networkSecurityGroupRules (Optional): [\n                                          (Optional){\n                                             priority: int (Required)\n                                             access: String(allow/deny) (Required)\n                                             sourceAddressPrefix: String (Required)\n                                             sourcePortRanges (Optional): [\n                                                 String (Optional)\n                                             ]\n                                         }\n                                     ]\n                                 }\n                             ]\n                         }\n                         publicIPAddressConfiguration (Optional): {\n                             provision: String(batchmanaged/usermanaged/nopublicipaddresses) (Optional)\n                             ipAddressIds (Optional): [\n                                 String (Optional)\n                             ]\n                         }\n                         enableAcceleratedNetworking: Boolean (Optional)\n                     }\n                     startTask (Optional): {\n                         commandLine: String (Required)\n                         containerSettings (Optional): (recursive schema, see containerSettings above)\n                         resourceFiles (Optional): [\n                             (recursive schema, see above)\n                         ]\n                         environmentSettings (Optional): [\n                             (recursive schema, see above)\n                         ]\n                         userIdentity (Optional): (recursive schema, see userIdentity above)\n                         maxTaskRetryCount: Integer (Optional)\n                         waitForSuccess: Boolean (Optional)\n                     }\n                     applicationPackageReferences (Optional): [\n                         (recursive schema, see above)\n                     ]\n                     applicationLicenses (Optional): [\n                         String (Optional)\n                     ]\n                     userAccounts (Optional): [\n                          (Optional){\n                             name: String (Required)\n                             password: String (Required)\n                             elevationLevel: String(nonadmin/admin) (Optional)\n                             linuxUserConfiguration (Optional): {\n                                 uid: Integer (Optional)\n                                 gid: Integer (Optional)\n                                 sshPrivateKey: String (Optional)\n                             }\n                             windowsUserConfiguration (Optional): {\n                                 loginMode: String(batch/interactive) (Optional)\n                             }\n                         }\n                     ]\n                     metadata (Optional): [\n                          (Optional){\n                             name: String (Required)\n                             value: String (Required)\n                         }\n                     ]\n                     mountConfiguration (Optional): [\n                          (Optional){\n                             azureBlobFileSystemConfiguration (Optional): {\n                                 accountName: String (Required)\n                                 containerName: String (Required)\n                                 accountKey: String (Optional)\n                                 sasKey: String (Optional)\n                                 blobfuseOptions: String (Optional)\n                                 relativeMountPath: String (Required)\n                                 identityReference (Optional): (recursive schema, see identityReference above)\n                             }\n                             nfsMountConfiguration (Optional): {\n                                 source: String (Required)\n                                 relativeMountPath: String (Required)\n                                 mountOptions: String (Optional)\n                             }\n                             cifsMountConfiguration (Optional): {\n                                 username: String (Required)\n                                 source: String (Required)\n                                 relativeMountPath: String (Required)\n                                 mountOptions: String (Optional)\n                                 password: String (Required)\n                             }\n                             azureFileShareConfiguration (Optional): {\n                                 accountName: String (Required)\n                                 azureFileUrl: String (Required)\n                                 accountKey: String (Required)\n                                 relativeMountPath: String (Required)\n                                 mountOptions: String (Optional)\n                             }\n                         }\n                     ]\n                     targetNodeCommunicationMode: String(default/classic/simplified) (Optional)\n                 }\n             }\n         }\n         metadata (Optional): [\n             (recursive schema, see above)\n         ]\n     }\n     metadata (Optional): [\n         (recursive schema, see above)\n     ]\n }\n```"
  returns:
    description: "the <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Void.html\">Void</a>&gt;"
- uid: "com.azure.compute.batch.BatchClient.updateJobWithResponse(java.lang.String,com.azure.core.util.BinaryData,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.compute.batch.BatchClient.updateJobWithResponse(String jobId, BinaryData job, RequestOptions requestOptions)"
  name: "updateJobWithResponse(String jobId, BinaryData job, RequestOptions requestOptions)"
  nameWithType: "BatchClient.updateJobWithResponse(String jobId, BinaryData job, RequestOptions requestOptions)"
  summary: "Updates the properties of the specified Job."
  parameters:
  - description: "The ID of the Job whose properties you want to update."
    name: "jobId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The options to use for updating the Job."
    name: "job"
    type: "<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<Void> updateJobWithResponse(String jobId, BinaryData job, RequestOptions requestOptions)"
  desc: "Updates the properties of the specified Job.\n\nThis replaces only the Job properties specified in the request. For example, if the Job has constraints, and a request does not specify the constraints element, then the Job keeps the existing constraints.\n\n**Query Parameters**\n\n    | ------- | ------- | -------- | -------------------------------------------------------------------------------------------------------------- |\n    | Name    | Type    | Required | Description                                                                                                    |\n    | timeOut | Integer | No       | Sets the maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. |\n\nYou can add these to a request with <xref uid=\"com.azure.core.http.rest.RequestOptions.addQueryParam\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RequestOptions#addQueryParam\"></xref>\n\n**Header Parameters**\n\n    | ------------------- | -------------- | -------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n    | Name                | Type           | Required | Description                                                                                                                                                                                                          |\n    | if-match            | String         | No       | An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service exactly matches the value specified by the client. |\n    | if-none-match       | String         | No       | An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service does not match the value specified by the client.  |\n    | if-modified-since   | OffsetDateTime | No       | A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has been modified since the specified time.                   |\n    | if-unmodified-since | OffsetDateTime | No       | A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has not been modified since the specified time.               |\n\nYou can add these to a request with <xref uid=\"com.azure.core.http.rest.RequestOptions.addHeader\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RequestOptions#addHeader\"></xref>\n\n**Request Body Schema**\n\n```java\n{\n     priority: Integer (Optional)\n     allowTaskPreemption: Boolean (Optional)\n     maxParallelTasks: Integer (Optional)\n     constraints (Optional): {\n         maxWallClockTime: Duration (Optional)\n         maxTaskRetryCount: Integer (Optional)\n     }\n     poolInfo (Optional): {\n         poolId: String (Optional)\n         autoPoolSpecification (Optional): {\n             autoPoolIdPrefix: String (Optional)\n             poolLifetimeOption: String(jobschedule/job) (Required)\n             keepAlive: Boolean (Optional)\n             pool (Optional): {\n                 displayName: String (Optional)\n                 vmSize: String (Required)\n                 cloudServiceConfiguration (Optional): {\n                     osFamily: String (Required)\n                     osVersion: String (Optional)\n                 }\n                 virtualMachineConfiguration (Optional): {\n                     imageReference (Required): {\n                         publisher: String (Optional)\n                         offer: String (Optional)\n                         sku: String (Optional)\n                         version: String (Optional)\n                         virtualMachineImageId: String (Optional)\n                         exactVersion: String (Optional)\n                     }\n                     nodeAgentSKUId: String (Required)\n                     windowsConfiguration (Optional): {\n                         enableAutomaticUpdates: Boolean (Optional)\n                     }\n                     dataDisks (Optional): [\n                          (Optional){\n                             lun: int (Required)\n                             caching: String(none/readonly/readwrite) (Optional)\n                             diskSizeGB: int (Required)\n                             storageAccountType: String(standard_lrs/premium_lrs) (Optional)\n                         }\n                     ]\n                     licenseType: String (Optional)\n                     containerConfiguration (Optional): {\n                         type: String(dockerCompatible/criCompatible) (Required)\n                         containerImageNames (Optional): [\n                             String (Optional)\n                         ]\n                         containerRegistries (Optional): [\n                              (Optional){\n                                 username: String (Optional)\n                                 password: String (Optional)\n                                 registryServer: String (Optional)\n                                 identityReference (Optional): {\n                                     resourceId: String (Optional)\n                                 }\n                             }\n                         ]\n                     }\n                     diskEncryptionConfiguration (Optional): {\n                         targets (Optional): [\n                             String(osdisk/temporarydisk) (Optional)\n                         ]\n                     }\n                     nodePlacementConfiguration (Optional): {\n                         policy: String(regional/zonal) (Optional)\n                     }\n                     extensions (Optional): [\n                          (Optional){\n                             name: String (Required)\n                             publisher: String (Required)\n                             type: String (Required)\n                             typeHandlerVersion: String (Optional)\n                             autoUpgradeMinorVersion: Boolean (Optional)\n                             enableAutomaticUpgrade: Boolean (Optional)\n                             settings (Optional): {\n                                 String: String (Optional)\n                             }\n                             protectedSettings (Optional): {\n                                 String: String (Optional)\n                             }\n                             provisionAfterExtensions (Optional): [\n                                 String (Optional)\n                             ]\n                         }\n                     ]\n                     osDisk (Optional): {\n                         ephemeralOSDiskSettings (Optional): {\n                             placement: String(cachedisk) (Optional)\n                         }\n                     }\n                 }\n                 taskSlotsPerNode: Integer (Optional)\n                 taskSchedulingPolicy (Optional): {\n                     nodeFillType: String(spread/pack) (Required)\n                 }\n                 resizeTimeout: Duration (Optional)\n                 targetDedicatedNodes: Integer (Optional)\n                 targetLowPriorityNodes: Integer (Optional)\n                 enableAutoScale: Boolean (Optional)\n                 autoScaleFormula: String (Optional)\n                 autoScaleEvaluationInterval: Duration (Optional)\n                 enableInterNodeCommunication: Boolean (Optional)\n                 networkConfiguration (Optional): {\n                     subnetId: String (Optional)\n                     dynamicVNetAssignmentScope: String(none/job) (Optional)\n                     endpointConfiguration (Optional): {\n                         inboundNATPools (Required): [\n                              (Required){\n                                 name: String (Required)\n                                 protocol: String(tcp/udp) (Required)\n                                 backendPort: int (Required)\n                                 frontendPortRangeStart: int (Required)\n                                 frontendPortRangeEnd: int (Required)\n                                 networkSecurityGroupRules (Optional): [\n                                      (Optional){\n                                         priority: int (Required)\n                                         access: String(allow/deny) (Required)\n                                         sourceAddressPrefix: String (Required)\n                                         sourcePortRanges (Optional): [\n                                             String (Optional)\n                                         ]\n                                     }\n                                 ]\n                             }\n                         ]\n                     }\n                     publicIPAddressConfiguration (Optional): {\n                         provision: String(batchmanaged/usermanaged/nopublicipaddresses) (Optional)\n                         ipAddressIds (Optional): [\n                             String (Optional)\n                         ]\n                     }\n                     enableAcceleratedNetworking: Boolean (Optional)\n                 }\n                 startTask (Optional): {\n                     commandLine: String (Required)\n                     containerSettings (Optional): {\n                         containerRunOptions: String (Optional)\n                         imageName: String (Required)\n                         registry (Optional): (recursive schema, see registry above)\n                         workingDirectory: String(taskWorkingDirectory/containerImageDefault) (Optional)\n                     }\n                     resourceFiles (Optional): [\n                          (Optional){\n                             autoStorageContainerName: String (Optional)\n                             storageContainerUrl: String (Optional)\n                             httpUrl: String (Optional)\n                             blobPrefix: String (Optional)\n                             filePath: String (Optional)\n                             fileMode: String (Optional)\n                             identityReference (Optional): (recursive schema, see identityReference above)\n                         }\n                     ]\n                     environmentSettings (Optional): [\n                          (Optional){\n                             name: String (Required)\n                             value: String (Optional)\n                         }\n                     ]\n                     userIdentity (Optional): {\n                         username: String (Optional)\n                         autoUser (Optional): {\n                             scope: String(task/pool) (Optional)\n                             elevationLevel: String(nonadmin/admin) (Optional)\n                         }\n                     }\n                     maxTaskRetryCount: Integer (Optional)\n                     waitForSuccess: Boolean (Optional)\n                 }\n                 applicationPackageReferences (Optional): [\n                      (Optional){\n                         applicationId: String (Required)\n                         version: String (Optional)\n                     }\n                 ]\n                 applicationLicenses (Optional): [\n                     String (Optional)\n                 ]\n                 userAccounts (Optional): [\n                      (Optional){\n                         name: String (Required)\n                         password: String (Required)\n                         elevationLevel: String(nonadmin/admin) (Optional)\n                         linuxUserConfiguration (Optional): {\n                             uid: Integer (Optional)\n                             gid: Integer (Optional)\n                             sshPrivateKey: String (Optional)\n                         }\n                         windowsUserConfiguration (Optional): {\n                             loginMode: String(batch/interactive) (Optional)\n                         }\n                     }\n                 ]\n                 metadata (Optional): [\n                      (Optional){\n                         name: String (Required)\n                         value: String (Required)\n                     }\n                 ]\n                 mountConfiguration (Optional): [\n                      (Optional){\n                         azureBlobFileSystemConfiguration (Optional): {\n                             accountName: String (Required)\n                             containerName: String (Required)\n                             accountKey: String (Optional)\n                             sasKey: String (Optional)\n                             blobfuseOptions: String (Optional)\n                             relativeMountPath: String (Required)\n                             identityReference (Optional): (recursive schema, see identityReference above)\n                         }\n                         nfsMountConfiguration (Optional): {\n                             source: String (Required)\n                             relativeMountPath: String (Required)\n                             mountOptions: String (Optional)\n                         }\n                         cifsMountConfiguration (Optional): {\n                             username: String (Required)\n                             source: String (Required)\n                             relativeMountPath: String (Required)\n                             mountOptions: String (Optional)\n                             password: String (Required)\n                         }\n                         azureFileShareConfiguration (Optional): {\n                             accountName: String (Required)\n                             azureFileUrl: String (Required)\n                             accountKey: String (Required)\n                             relativeMountPath: String (Required)\n                             mountOptions: String (Optional)\n                         }\n                     }\n                 ]\n                 targetNodeCommunicationMode: String(default/classic/simplified) (Optional)\n             }\n         }\n     }\n     onAllTasksComplete: String(noaction/terminatejob) (Optional)\n     metadata (Optional): [\n         (recursive schema, see above)\n     ]\n }\n```"
  returns:
    description: "the <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Void.html\">Void</a>&gt;"
- uid: "com.azure.compute.batch.BatchClient.updatePool(java.lang.String,com.azure.compute.batch.models.BatchPoolUpdateContent)"
  fullName: "com.azure.compute.batch.BatchClient.updatePool(String poolId, BatchPoolUpdateContent body)"
  name: "updatePool(String poolId, BatchPoolUpdateContent body)"
  nameWithType: "BatchClient.updatePool(String poolId, BatchPoolUpdateContent body)"
  summary: "Updates the properties of the specified Pool using the options provided in options."
  parameters:
  - description: "The ID of the Pool to get."
    name: "poolId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The pool properties to update."
    name: "body"
    type: "<xref href=\"com.azure.compute.batch.models.BatchPoolUpdateContent?alt=com.azure.compute.batch.models.BatchPoolUpdateContent&text=BatchPoolUpdateContent\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public void updatePool(String poolId, BatchPoolUpdateContent body)"
  desc: "Updates the properties of the specified Pool using the options provided in options.\n\nThis only replaces the Pool properties specified in the request. For example, if the Pool has a StartTask associated with it, and a request does not specify a StartTask element, then the Pool keeps the existing StartTask."
- uid: "com.azure.compute.batch.BatchClient.updatePool(java.lang.String,com.azure.compute.batch.models.BatchPoolUpdateContent,com.azure.compute.batch.models.UpdateBatchPoolOptions)"
  fullName: "com.azure.compute.batch.BatchClient.updatePool(String poolId, BatchPoolUpdateContent body, UpdateBatchPoolOptions options)"
  name: "updatePool(String poolId, BatchPoolUpdateContent body, UpdateBatchPoolOptions options)"
  nameWithType: "BatchClient.updatePool(String poolId, BatchPoolUpdateContent body, UpdateBatchPoolOptions options)"
  summary: "Updates the properties of the specified Pool using the options provided in options."
  parameters:
  - description: "The ID of the Pool to get."
    name: "poolId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The pool properties to update."
    name: "body"
    type: "<xref href=\"com.azure.compute.batch.models.BatchPoolUpdateContent?alt=com.azure.compute.batch.models.BatchPoolUpdateContent&text=BatchPoolUpdateContent\" data-throw-if-not-resolved=\"False\" />"
  - description: "A group of optional parameters that includes timeOutInSeconds and requestConditions."
    name: "options"
    type: "<xref href=\"com.azure.compute.batch.models.UpdateBatchPoolOptions?alt=com.azure.compute.batch.models.UpdateBatchPoolOptions&text=UpdateBatchPoolOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public void updatePool(String poolId, BatchPoolUpdateContent body, UpdateBatchPoolOptions options)"
  desc: "Updates the properties of the specified Pool using the options provided in options.\n\nThis only replaces the Pool properties specified in the request. For example, if the Pool has a StartTask associated with it, and a request does not specify a StartTask element, then the Pool keeps the existing StartTask."
- uid: "com.azure.compute.batch.BatchClient.updatePoolWithResponse(java.lang.String,com.azure.core.util.BinaryData,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.compute.batch.BatchClient.updatePoolWithResponse(String poolId, BinaryData pool, RequestOptions requestOptions)"
  name: "updatePoolWithResponse(String poolId, BinaryData pool, RequestOptions requestOptions)"
  nameWithType: "BatchClient.updatePoolWithResponse(String poolId, BinaryData pool, RequestOptions requestOptions)"
  summary: "Updates the properties of the specified Pool."
  parameters:
  - description: "The ID of the Pool to get."
    name: "poolId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The pool properties to update."
    name: "pool"
    type: "<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<Void> updatePoolWithResponse(String poolId, BinaryData pool, RequestOptions requestOptions)"
  desc: "Updates the properties of the specified Pool.\n\nThis only replaces the Pool properties specified in the request. For example, if the Pool has a StartTask associated with it, and a request does not specify a StartTask element, then the Pool keeps the existing StartTask.\n\n**Query Parameters**\n\n    | ------- | ------- | -------- | -------------------------------------------------------------------------------------------------------------- |\n    | Name    | Type    | Required | Description                                                                                                    |\n    | timeOut | Integer | No       | Sets the maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. |\n\nYou can add these to a request with <xref uid=\"com.azure.core.http.rest.RequestOptions.addQueryParam\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RequestOptions#addQueryParam\"></xref>\n\n**Header Parameters**\n\n    | ------------------- | -------------- | -------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n    | Name                | Type           | Required | Description                                                                                                                                                                                                          |\n    | if-match            | String         | No       | An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service exactly matches the value specified by the client. |\n    | if-none-match       | String         | No       | An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service does not match the value specified by the client.  |\n    | if-modified-since   | OffsetDateTime | No       | A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has been modified since the specified time.                   |\n    | if-unmodified-since | OffsetDateTime | No       | A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has not been modified since the specified time.               |\n\nYou can add these to a request with <xref uid=\"com.azure.core.http.rest.RequestOptions.addHeader\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RequestOptions#addHeader\"></xref>\n\n**Request Body Schema**\n\n```java\n{\n     startTask (Optional): {\n         commandLine: String (Required)\n         containerSettings (Optional): {\n             containerRunOptions: String (Optional)\n             imageName: String (Required)\n             registry (Optional): {\n                 username: String (Optional)\n                 password: String (Optional)\n                 registryServer: String (Optional)\n                 identityReference (Optional): {\n                     resourceId: String (Optional)\n                 }\n             }\n             workingDirectory: String(taskWorkingDirectory/containerImageDefault) (Optional)\n         }\n         resourceFiles (Optional): [\n              (Optional){\n                 autoStorageContainerName: String (Optional)\n                 storageContainerUrl: String (Optional)\n                 httpUrl: String (Optional)\n                 blobPrefix: String (Optional)\n                 filePath: String (Optional)\n                 fileMode: String (Optional)\n                 identityReference (Optional): (recursive schema, see identityReference above)\n             }\n         ]\n         environmentSettings (Optional): [\n              (Optional){\n                 name: String (Required)\n                 value: String (Optional)\n             }\n         ]\n         userIdentity (Optional): {\n             username: String (Optional)\n             autoUser (Optional): {\n                 scope: String(task/pool) (Optional)\n                 elevationLevel: String(nonadmin/admin) (Optional)\n             }\n         }\n         maxTaskRetryCount: Integer (Optional)\n         waitForSuccess: Boolean (Optional)\n     }\n     applicationPackageReferences (Optional): [\n          (Optional){\n             applicationId: String (Required)\n             version: String (Optional)\n         }\n     ]\n     metadata (Optional): [\n          (Optional){\n             name: String (Required)\n             value: String (Required)\n         }\n     ]\n     targetNodeCommunicationMode: String(default/classic/simplified) (Optional)\n }\n```"
  returns:
    description: "the <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Void.html\">Void</a>&gt;"
- uid: "com.azure.compute.batch.BatchClient.uploadNodeLogs(java.lang.String,java.lang.String,com.azure.compute.batch.models.UploadBatchServiceLogsContent)"
  fullName: "com.azure.compute.batch.BatchClient.uploadNodeLogs(String poolId, String nodeId, UploadBatchServiceLogsContent body)"
  name: "uploadNodeLogs(String poolId, String nodeId, UploadBatchServiceLogsContent body)"
  nameWithType: "BatchClient.uploadNodeLogs(String poolId, String nodeId, UploadBatchServiceLogsContent body)"
  summary: "Upload Azure Batch service log files from the specified Compute Node to Azure Blob Storage."
  parameters:
  - description: "The ID of the Pool that contains the Compute Node."
    name: "poolId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The ID of the Compute Node for which you want to get the Remote Desktop Protocol file."
    name: "nodeId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The Azure Batch service log files upload options."
    name: "body"
    type: "<xref href=\"com.azure.compute.batch.models.UploadBatchServiceLogsContent?alt=com.azure.compute.batch.models.UploadBatchServiceLogsContent&text=UploadBatchServiceLogsContent\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public UploadBatchServiceLogsResult uploadNodeLogs(String poolId, String nodeId, UploadBatchServiceLogsContent body)"
  desc: "Upload Azure Batch service log files from the specified Compute Node to Azure Blob Storage.\n\nThis is for gathering Azure Batch service log files in an automated fashion from Compute Nodes if you are experiencing an error and wish to escalate to Azure support. The Azure Batch service log files should be shared with Azure support to aid in debugging issues with the Batch service."
  returns:
    description: "the result of uploading Batch service log files from a specific Compute Node."
    type: "<xref href=\"com.azure.compute.batch.models.UploadBatchServiceLogsResult?alt=com.azure.compute.batch.models.UploadBatchServiceLogsResult&text=UploadBatchServiceLogsResult\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.compute.batch.BatchClient.uploadNodeLogs(java.lang.String,java.lang.String,com.azure.compute.batch.models.UploadBatchServiceLogsContent,com.azure.compute.batch.models.UploadBatchNodeLogsOptions)"
  fullName: "com.azure.compute.batch.BatchClient.uploadNodeLogs(String poolId, String nodeId, UploadBatchServiceLogsContent body, UploadBatchNodeLogsOptions options)"
  name: "uploadNodeLogs(String poolId, String nodeId, UploadBatchServiceLogsContent body, UploadBatchNodeLogsOptions options)"
  nameWithType: "BatchClient.uploadNodeLogs(String poolId, String nodeId, UploadBatchServiceLogsContent body, UploadBatchNodeLogsOptions options)"
  summary: "Upload Azure Batch service log files from the specified Compute Node to Azure Blob Storage."
  parameters:
  - description: "The ID of the Pool that contains the Compute Node."
    name: "poolId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The ID of the Compute Node for which you want to get the Remote Desktop Protocol file."
    name: "nodeId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The Azure Batch service log files upload options."
    name: "body"
    type: "<xref href=\"com.azure.compute.batch.models.UploadBatchServiceLogsContent?alt=com.azure.compute.batch.models.UploadBatchServiceLogsContent&text=UploadBatchServiceLogsContent\" data-throw-if-not-resolved=\"False\" />"
  - description: "A group containing optional parameters like timeOutInSeconds."
    name: "options"
    type: "<xref href=\"com.azure.compute.batch.models.UploadBatchNodeLogsOptions?alt=com.azure.compute.batch.models.UploadBatchNodeLogsOptions&text=UploadBatchNodeLogsOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public UploadBatchServiceLogsResult uploadNodeLogs(String poolId, String nodeId, UploadBatchServiceLogsContent body, UploadBatchNodeLogsOptions options)"
  desc: "Upload Azure Batch service log files from the specified Compute Node to Azure Blob Storage.\n\nThis is for gathering Azure Batch service log files in an automated fashion from Compute Nodes if you are experiencing an error and wish to escalate to Azure support. The Azure Batch service log files should be shared with Azure support to aid in debugging issues with the Batch service."
  returns:
    description: "the result of uploading Batch service log files from a specific Compute Node."
    type: "<xref href=\"com.azure.compute.batch.models.UploadBatchServiceLogsResult?alt=com.azure.compute.batch.models.UploadBatchServiceLogsResult&text=UploadBatchServiceLogsResult\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.compute.batch.BatchClient.uploadNodeLogsWithResponse(java.lang.String,java.lang.String,com.azure.core.util.BinaryData,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.compute.batch.BatchClient.uploadNodeLogsWithResponse(String poolId, String nodeId, BinaryData parameters, RequestOptions requestOptions)"
  name: "uploadNodeLogsWithResponse(String poolId, String nodeId, BinaryData parameters, RequestOptions requestOptions)"
  nameWithType: "BatchClient.uploadNodeLogsWithResponse(String poolId, String nodeId, BinaryData parameters, RequestOptions requestOptions)"
  summary: "Upload Azure Batch service log files from the specified Compute Node to Azure Blob Storage."
  parameters:
  - description: "The ID of the Pool that contains the Compute Node."
    name: "poolId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The ID of the Compute Node for which you want to get the Remote Desktop Protocol file."
    name: "nodeId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The Azure Batch service log files upload options."
    name: "parameters"
    type: "<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<BinaryData> uploadNodeLogsWithResponse(String poolId, String nodeId, BinaryData parameters, RequestOptions requestOptions)"
  desc: "Upload Azure Batch service log files from the specified Compute Node to Azure Blob Storage.\n\nThis is for gathering Azure Batch service log files in an automated fashion from Compute Nodes if you are experiencing an error and wish to escalate to Azure support. The Azure Batch service log files should be shared with Azure support to aid in debugging issues with the Batch service.\n\n**Query Parameters**\n\n    | ------- | ------- | -------- | -------------------------------------------------------------------------------------------------------------- |\n    | Name    | Type    | Required | Description                                                                                                    |\n    | timeOut | Integer | No       | Sets the maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. |\n\nYou can add these to a request with <xref uid=\"com.azure.core.http.rest.RequestOptions.addQueryParam\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RequestOptions#addQueryParam\"></xref>\n\n**Request Body Schema**\n\n```java\n{\n     containerUrl: String (Required)\n     startTime: OffsetDateTime (Required)\n     endTime: OffsetDateTime (Optional)\n     identityReference (Optional): {\n         resourceId: String (Optional)\n     }\n }\n```\n\n**Response Body Schema**\n\n```java\n{\n     virtualDirectoryName: String (Required)\n     numberOfFilesUploaded: int (Required)\n }\n```"
  returns:
    description: "the result of uploading Batch service log files from a specific Compute Node along with <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />&gt;"
type: "class"
desc: "Initializes a new instance of the synchronous BatchClient type."
metadata: {}
package: "com.azure.compute.batch"
artifact: com.azure:azure-compute-batch:1.0.0-beta.1
