### YamlMime:ManagedReference
items:
- uid: com.azure.cosmos.implementation.guava25.collect.ComparisonChain
  id: ComparisonChain
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect
  children:
  - com.azure.cosmos.implementation.guava25.collect.ComparisonChain.<T>compare(T,T,java.util.Comparator<T>)
  - com.azure.cosmos.implementation.guava25.collect.ComparisonChain.compare(double,double)
  - com.azure.cosmos.implementation.guava25.collect.ComparisonChain.compare(float,float)
  - com.azure.cosmos.implementation.guava25.collect.ComparisonChain.compare(int,int)
  - com.azure.cosmos.implementation.guava25.collect.ComparisonChain.compare(java.lang.Boolean,java.lang.Boolean)
  - com.azure.cosmos.implementation.guava25.collect.ComparisonChain.compare(java.lang.Comparable<?>,java.lang.Comparable<?>)
  - com.azure.cosmos.implementation.guava25.collect.ComparisonChain.compare(long,long)
  - com.azure.cosmos.implementation.guava25.collect.ComparisonChain.compareFalseFirst(boolean,boolean)
  - com.azure.cosmos.implementation.guava25.collect.ComparisonChain.compareTrueFirst(boolean,boolean)
  - com.azure.cosmos.implementation.guava25.collect.ComparisonChain.result()
  - com.azure.cosmos.implementation.guava25.collect.ComparisonChain.start()
  langs:
  - java
  name: ComparisonChain
  nameWithType: ComparisonChain
  fullName: com.azure.cosmos.implementation.guava25.collect.ComparisonChain
  type: Class
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    A utility for performing a chained comparison statement. For example:


    ```java

    public int compareTo(Foo that) {
       return ComparisonChain.start()
           .compare(this.aString, that.aString)
           .compare(this.anInt, that.anInt)
           .compare(this.anEnum, that.anEnum, Ordering.natural().nullsLast())
           .result();
     }
    ```


    The value of this expression will have the same sign as the *first nonzero* comparison result in the chain, or will be zero if every comparison result was zero.


    **Note:** `ComparisonChain` instances are **immutable**. For this utility to work correctly, calls must be chained as illustrated above.


    Performance note: Even though the `ComparisonChain` caller always invokes its `compare` methods unconditionally, the `ComparisonChain` implementation stops calling its inputs' <xref uid="java.lang.Comparable.compareTo" data-throw-if-not-resolved="false">compareTo</xref> and <xref uid="java.util.Comparator.compare" data-throw-if-not-resolved="false">compare</xref> methods as soon as one of them returns a nonzero result. This optimization is typically important only in the presence of expensive `compareTo` and `compare` implementations.


    See the Guava User Guide article on [ `ComparisonChain`][_ComparisonChain].



    [_ComparisonChain]: https://github.com/google/guava/wiki/CommonObjectUtilitiesExplained#comparecompareto
  syntax:
    content: public abstract class ComparisonChain
  inheritance:
  - java.lang.Object
  inheritedMembers:
  - java.lang.Object.clone()
  - java.lang.Object.equals(java.lang.Object)
  - java.lang.Object.finalize()
  - java.lang.Object.getClass()
  - java.lang.Object.hashCode()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.toString()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
- uid: com.azure.cosmos.implementation.guava25.collect.ComparisonChain.<T>compare(T,T,java.util.Comparator<T>)
  id: <T>compare(T,T,java.util.Comparator<T>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ComparisonChain
  langs:
  - java
  name: <T>compare(T left, T right, Comparator<T> comparator)
  nameWithType: ComparisonChain.<T>compare(T left, T right, Comparator<T> comparator)
  fullName: com.azure.cosmos.implementation.guava25.collect.ComparisonChain.<T>compare(T left, T right, Comparator<T> comparator)
  overload: com.azure.cosmos.implementation.guava25.collect.ComparisonChain.compare*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Compares two objects using a comparator, *if* the result of this comparison chain has not already been determined.
  syntax:
    content: public abstract ComparisonChain <T>compare(T left, T right, Comparator<T> comparator)
    parameters:
    - id: left
      type: T
    - id: right
      type: T
    - id: comparator
      type: java.util.Comparator<T>
    return:
      type: com.azure.cosmos.implementation.guava25.collect.ComparisonChain
- uid: com.azure.cosmos.implementation.guava25.collect.ComparisonChain.ComparisonChain()
  id: ComparisonChain()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ComparisonChain
  langs:
  - java
  name: ComparisonChain()
  nameWithType: ComparisonChain.ComparisonChain()
  fullName: com.azure.cosmos.implementation.guava25.collect.ComparisonChain.ComparisonChain()
  overload: com.azure.cosmos.implementation.guava25.collect.ComparisonChain.ComparisonChain*
  type: Constructor
  package: com.azure.cosmos.implementation.guava25.collect
  syntax:
    content: private ComparisonChain()
- uid: com.azure.cosmos.implementation.guava25.collect.ComparisonChain.compare(double,double)
  id: compare(double,double)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ComparisonChain
  langs:
  - java
  name: compare(double left, double right)
  nameWithType: ComparisonChain.compare(double left, double right)
  fullName: com.azure.cosmos.implementation.guava25.collect.ComparisonChain.compare(double left, double right)
  overload: com.azure.cosmos.implementation.guava25.collect.ComparisonChain.compare*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Compares two `double` values as specified by <xref uid="" data-throw-if-not-resolved="false">Double#compare</xref>, *if* the result of this comparison chain has not already been determined.
  syntax:
    content: public abstract ComparisonChain compare(double left, double right)
    parameters:
    - id: left
      type: double
    - id: right
      type: double
    return:
      type: com.azure.cosmos.implementation.guava25.collect.ComparisonChain
- uid: com.azure.cosmos.implementation.guava25.collect.ComparisonChain.compare(float,float)
  id: compare(float,float)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ComparisonChain
  langs:
  - java
  name: compare(float left, float right)
  nameWithType: ComparisonChain.compare(float left, float right)
  fullName: com.azure.cosmos.implementation.guava25.collect.ComparisonChain.compare(float left, float right)
  overload: com.azure.cosmos.implementation.guava25.collect.ComparisonChain.compare*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Compares two `float` values as specified by <xref uid="" data-throw-if-not-resolved="false">Float#compare</xref>, *if* the result of this comparison chain has not already been determined.
  syntax:
    content: public abstract ComparisonChain compare(float left, float right)
    parameters:
    - id: left
      type: float
    - id: right
      type: float
    return:
      type: com.azure.cosmos.implementation.guava25.collect.ComparisonChain
- uid: com.azure.cosmos.implementation.guava25.collect.ComparisonChain.compare(int,int)
  id: compare(int,int)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ComparisonChain
  langs:
  - java
  name: compare(int left, int right)
  nameWithType: ComparisonChain.compare(int left, int right)
  fullName: com.azure.cosmos.implementation.guava25.collect.ComparisonChain.compare(int left, int right)
  overload: com.azure.cosmos.implementation.guava25.collect.ComparisonChain.compare*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Compares two `int` values as specified by <xref uid="com.azure.cosmos.implementation.guava25.primitives.Ints.compare*" data-throw-if-not-resolved="false">Ints#compare</xref>, *if* the result of this comparison chain has not already been determined.
  syntax:
    content: public abstract ComparisonChain compare(int left, int right)
    parameters:
    - id: left
      type: int
    - id: right
      type: int
    return:
      type: com.azure.cosmos.implementation.guava25.collect.ComparisonChain
- uid: com.azure.cosmos.implementation.guava25.collect.ComparisonChain.compare(java.lang.Boolean,java.lang.Boolean)
  id: compare(java.lang.Boolean,java.lang.Boolean)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ComparisonChain
  langs:
  - java
  name: compare(Boolean left, Boolean right)
  nameWithType: ComparisonChain.compare(Boolean left, Boolean right)
  fullName: com.azure.cosmos.implementation.guava25.collect.ComparisonChain.compare(Boolean left, Boolean right)
  overload: com.azure.cosmos.implementation.guava25.collect.ComparisonChain.compare*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Discouraged synonym for <xref uid="com.azure.cosmos.implementation.guava25.collect.ComparisonChain.compareFalseFirst*" data-throw-if-not-resolved="false">#compareFalseFirst</xref>.
  syntax:
    content: public final ComparisonChain compare(Boolean left, Boolean right)
    parameters:
    - id: left
      type: java.lang.Boolean
    - id: right
      type: java.lang.Boolean
    return:
      type: com.azure.cosmos.implementation.guava25.collect.ComparisonChain
- uid: com.azure.cosmos.implementation.guava25.collect.ComparisonChain.compare(java.lang.Comparable<?>,java.lang.Comparable<?>)
  id: compare(java.lang.Comparable<?>,java.lang.Comparable<?>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ComparisonChain
  langs:
  - java
  name: compare(Comparable<?> left, Comparable<?> right)
  nameWithType: ComparisonChain.compare(Comparable<?> left, Comparable<?> right)
  fullName: com.azure.cosmos.implementation.guava25.collect.ComparisonChain.compare(Comparable<?> left, Comparable<?> right)
  overload: com.azure.cosmos.implementation.guava25.collect.ComparisonChain.compare*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Compares two comparable objects as specified by <xref uid="java.lang.Comparable.compareTo" data-throw-if-not-resolved="false">Comparable#compareTo</xref>, *if* the result of this comparison chain has not already been determined.
  syntax:
    content: public abstract ComparisonChain compare(Comparable<?> left, Comparable<?> right)
    parameters:
    - id: left
      type: java.lang.Comparable<?>
    - id: right
      type: java.lang.Comparable<?>
    return:
      type: com.azure.cosmos.implementation.guava25.collect.ComparisonChain
- uid: com.azure.cosmos.implementation.guava25.collect.ComparisonChain.compare(long,long)
  id: compare(long,long)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ComparisonChain
  langs:
  - java
  name: compare(long left, long right)
  nameWithType: ComparisonChain.compare(long left, long right)
  fullName: com.azure.cosmos.implementation.guava25.collect.ComparisonChain.compare(long left, long right)
  overload: com.azure.cosmos.implementation.guava25.collect.ComparisonChain.compare*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Compares two `long` values as specified by <xref uid="com.azure.cosmos.implementation.guava25.primitives.Longs.compare*" data-throw-if-not-resolved="false">Longs#compare</xref>, *if* the result of this comparison chain has not already been determined.
  syntax:
    content: public abstract ComparisonChain compare(long left, long right)
    parameters:
    - id: left
      type: long
    - id: right
      type: long
    return:
      type: com.azure.cosmos.implementation.guava25.collect.ComparisonChain
- uid: com.azure.cosmos.implementation.guava25.collect.ComparisonChain.compareFalseFirst(boolean,boolean)
  id: compareFalseFirst(boolean,boolean)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ComparisonChain
  langs:
  - java
  name: compareFalseFirst(boolean left, boolean right)
  nameWithType: ComparisonChain.compareFalseFirst(boolean left, boolean right)
  fullName: com.azure.cosmos.implementation.guava25.collect.ComparisonChain.compareFalseFirst(boolean left, boolean right)
  overload: com.azure.cosmos.implementation.guava25.collect.ComparisonChain.compareFalseFirst*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Compares two `boolean` values, considering `false` to be less than `true`, *if* the result of this comparison chain has not already been determined.
  syntax:
    content: public abstract ComparisonChain compareFalseFirst(boolean left, boolean right)
    parameters:
    - id: left
      type: boolean
    - id: right
      type: boolean
    return:
      type: com.azure.cosmos.implementation.guava25.collect.ComparisonChain
- uid: com.azure.cosmos.implementation.guava25.collect.ComparisonChain.compareTrueFirst(boolean,boolean)
  id: compareTrueFirst(boolean,boolean)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ComparisonChain
  langs:
  - java
  name: compareTrueFirst(boolean left, boolean right)
  nameWithType: ComparisonChain.compareTrueFirst(boolean left, boolean right)
  fullName: com.azure.cosmos.implementation.guava25.collect.ComparisonChain.compareTrueFirst(boolean left, boolean right)
  overload: com.azure.cosmos.implementation.guava25.collect.ComparisonChain.compareTrueFirst*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Compares two `boolean` values, considering `true` to be less than `false`, *if* the result of this comparison chain has not already been determined.
  syntax:
    content: public abstract ComparisonChain compareTrueFirst(boolean left, boolean right)
    parameters:
    - id: left
      type: boolean
    - id: right
      type: boolean
    return:
      type: com.azure.cosmos.implementation.guava25.collect.ComparisonChain
- uid: com.azure.cosmos.implementation.guava25.collect.ComparisonChain.result()
  id: result()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ComparisonChain
  langs:
  - java
  name: result()
  nameWithType: ComparisonChain.result()
  fullName: com.azure.cosmos.implementation.guava25.collect.ComparisonChain.result()
  overload: com.azure.cosmos.implementation.guava25.collect.ComparisonChain.result*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: 'Ends this comparison chain and returns its result: a value having the same sign as the first nonzero comparison result in the chain, or zero if every result was zero.'
  syntax:
    content: public abstract int result()
    return:
      type: int
- uid: com.azure.cosmos.implementation.guava25.collect.ComparisonChain.start()
  id: start()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ComparisonChain
  langs:
  - java
  name: start()
  nameWithType: ComparisonChain.start()
  fullName: com.azure.cosmos.implementation.guava25.collect.ComparisonChain.start()
  overload: com.azure.cosmos.implementation.guava25.collect.ComparisonChain.start*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Begins a new chained comparison statement. See example in the class documentation.
  syntax:
    content: public static ComparisonChain start()
    return:
      type: com.azure.cosmos.implementation.guava25.collect.ComparisonChain
references:
- uid: com.azure.cosmos.implementation.guava25.collect.ComparisonChain.ComparisonChain*
  name: ComparisonChain
  nameWithType: ComparisonChain.ComparisonChain
  fullName: com.azure.cosmos.implementation.guava25.collect.ComparisonChain.ComparisonChain
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.ComparisonChain.start*
  name: start
  nameWithType: ComparisonChain.start
  fullName: com.azure.cosmos.implementation.guava25.collect.ComparisonChain.start
  package: com.azure.cosmos.implementation.guava25.collect
- uid: java.lang.Comparable<?>
  spec.java:
  - uid: java.lang.Comparable
    name: Comparable
    fullName: java.lang.Comparable
  - name: <
    fullName: <
  - uid: '?'
    name: '?'
    fullName: '?'
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.ComparisonChain.compare*
  name: compare
  nameWithType: ComparisonChain.compare
  fullName: com.azure.cosmos.implementation.guava25.collect.ComparisonChain.compare
  package: com.azure.cosmos.implementation.guava25.collect
- uid: T
  spec.java:
  - uid: T
    name: T
    fullName: T
- uid: java.util.Comparator<T>
  spec.java:
  - uid: java.util.Comparator
    name: Comparator
    fullName: java.util.Comparator
  - name: <
    fullName: <
  - uid: T
    name: T
    fullName: T
  - name: '>'
    fullName: '>'
- uid: int
  spec.java:
  - uid: int
    name: int
    fullName: int
- uid: long
  spec.java:
  - uid: long
    name: long
    fullName: long
- uid: float
  spec.java:
  - uid: float
    name: float
    fullName: float
- uid: double
  spec.java:
  - uid: double
    name: double
    fullName: double
- uid: java.lang.Boolean
  spec.java:
  - uid: java.lang.Boolean
    name: Boolean
    fullName: java.lang.Boolean
- uid: boolean
  spec.java:
  - uid: boolean
    name: boolean
    fullName: boolean
- uid: com.azure.cosmos.implementation.guava25.collect.ComparisonChain.compareTrueFirst*
  name: compareTrueFirst
  nameWithType: ComparisonChain.compareTrueFirst
  fullName: com.azure.cosmos.implementation.guava25.collect.ComparisonChain.compareTrueFirst
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.ComparisonChain.compareFalseFirst*
  name: compareFalseFirst
  nameWithType: ComparisonChain.compareFalseFirst
  fullName: com.azure.cosmos.implementation.guava25.collect.ComparisonChain.compareFalseFirst
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.ComparisonChain.result*
  name: result
  nameWithType: ComparisonChain.result
  fullName: com.azure.cosmos.implementation.guava25.collect.ComparisonChain.result
  package: com.azure.cosmos.implementation.guava25.collect
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: java.lang.Object.finalize()
  name: Object.finalize()
  nameWithType: Object.finalize()
  fullName: java.lang.Object.finalize()
- uid: java.lang.Object.clone()
  name: Object.clone()
  nameWithType: Object.clone()
  fullName: java.lang.Object.clone()
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: java.lang.Object.equals(java.lang.Object)
  name: Object.equals(Object)
  nameWithType: Object.equals(Object)
  fullName: java.lang.Object.equals(java.lang.Object)
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.lang.Object.hashCode()
  name: Object.hashCode()
  nameWithType: Object.hashCode()
  fullName: java.lang.Object.hashCode()
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: java.lang.Object.toString()
  name: Object.toString()
  nameWithType: Object.toString()
  fullName: java.lang.Object.toString()
- uid: java.lang.Comparable
  name: Comparable
  nameWithType: Comparable
  fullName: java.lang.Comparable
- uid: '?'
  name: '?'
  nameWithType: '?'
  fullName: '?'
- uid: java.util.Comparator
  name: Comparator
  nameWithType: Comparator
  fullName: java.util.Comparator
