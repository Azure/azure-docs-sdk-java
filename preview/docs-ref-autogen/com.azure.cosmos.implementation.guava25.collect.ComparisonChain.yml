### YamlMime:JavaType
uid: "com.azure.cosmos.implementation.guava25.collect.ComparisonChain"
fullName: "com.azure.cosmos.implementation.guava25.collect.ComparisonChain"
name: "ComparisonChain"
nameWithType: "ComparisonChain"
summary: "A utility for performing a chained comparison statement. For example:\n\n```java\npublic int compareTo(Foo that) {\n   return ComparisonChain.start()\n       .compare(this.aString, that.aString)\n       .compare(this.anInt, that.anInt)\n       .compare(this.anEnum, that.anEnum, Ordering.natural().nullsLast())\n       .result();\n }\n```\n\nThe value of this expression will have the same sign as the *first nonzero* comparison result in the chain, or will be zero if every comparison result was zero.\n\n**Note:** `ComparisonChain` instances are **immutable**. For this utility to work correctly, calls must be chained as illustrated above.\n\nPerformance note: Even though the `ComparisonChain` caller always invokes its `compare` methods unconditionally, the `ComparisonChain` implementation stops calling its inputs' <xref uid=\"java.lang.Comparable.compareTo\" data-throw-if-not-resolved=\"false\" data-raw-source=\"compareTo\"></xref> and <xref uid=\"java.util.Comparator.compare\" data-throw-if-not-resolved=\"false\" data-raw-source=\"compare\"></xref> methods as soon as one of them returns a nonzero result. This optimization is typically important only in the presence of expensive `compareTo` and `compare` implementations.\n\nSee the Guava User Guide article on [ `ComparisonChain`][_ComparisonChain].\n\n\n[_ComparisonChain]: https://github.com/google/guava/wiki/CommonObjectUtilitiesExplained#comparecompareto"
inheritances:
- "<xref href=\"java.lang.Object\" data-throw-if-not-resolved=\"False\" />"
inheritedMembers:
- "java.lang.Object.clone()"
- "java.lang.Object.equals(java.lang.Object)"
- "java.lang.Object.finalize()"
- "java.lang.Object.getClass()"
- "java.lang.Object.hashCode()"
- "java.lang.Object.notify()"
- "java.lang.Object.notifyAll()"
- "java.lang.Object.toString()"
- "java.lang.Object.wait()"
- "java.lang.Object.wait(long)"
- "java.lang.Object.wait(long,int)"
syntax: "public abstract class ComparisonChain"
methods:
- "com.azure.cosmos.implementation.guava25.collect.ComparisonChain.<T>compare(T,T,java.util.Comparator<T>)"
- "com.azure.cosmos.implementation.guava25.collect.ComparisonChain.compare(double,double)"
- "com.azure.cosmos.implementation.guava25.collect.ComparisonChain.compare(float,float)"
- "com.azure.cosmos.implementation.guava25.collect.ComparisonChain.compare(int,int)"
- "com.azure.cosmos.implementation.guava25.collect.ComparisonChain.compare(java.lang.Boolean,java.lang.Boolean)"
- "com.azure.cosmos.implementation.guava25.collect.ComparisonChain.compare(java.lang.Comparable<?>,java.lang.Comparable<?>)"
- "com.azure.cosmos.implementation.guava25.collect.ComparisonChain.compare(long,long)"
- "com.azure.cosmos.implementation.guava25.collect.ComparisonChain.compareFalseFirst(boolean,boolean)"
- "com.azure.cosmos.implementation.guava25.collect.ComparisonChain.compareTrueFirst(boolean,boolean)"
- "com.azure.cosmos.implementation.guava25.collect.ComparisonChain.result()"
- "com.azure.cosmos.implementation.guava25.collect.ComparisonChain.start()"
type: "class"
metadata: {}
package: "com.azure.cosmos.implementation.guava25.collect"
artifact: com.azure:azure-cosmos:4.4.0-beta.1
