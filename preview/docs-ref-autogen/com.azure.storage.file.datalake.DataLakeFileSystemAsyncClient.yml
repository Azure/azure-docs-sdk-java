### YamlMime:JavaType
uid: "com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient"
fullName: "com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient"
name: "DataLakeFileSystemAsyncClient"
nameWithType: "DataLakeFileSystemAsyncClient"
summary: "Client to a file system."
inheritances:
- "<xref href=\"java.lang.Object?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
inheritedMembers:
- "java.lang.Object.clone()"
- "java.lang.Object.equals(java.lang.Object)"
- "java.lang.Object.finalize()"
- "java.lang.Object.getClass()"
- "java.lang.Object.hashCode()"
- "java.lang.Object.notify()"
- "java.lang.Object.notifyAll()"
- "java.lang.Object.toString()"
- "java.lang.Object.wait()"
- "java.lang.Object.wait(long)"
- "java.lang.Object.wait(long,int)"
syntax: "public class DataLakeFileSystemAsyncClient"
fields:
- uid: "com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.ROOT_FILESYSTEM_NAME"
  fullName: "com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.ROOT_FILESYSTEM_NAME"
  name: "ROOT_FILESYSTEM_NAME"
  nameWithType: "DataLakeFileSystemAsyncClient.ROOT_FILESYSTEM_NAME"
  summary: "Special file system name for the root file system in the Storage account."
  modifiers:
  - "static"
  - "final"
  field:
    value: "$root"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public static final String ROOT_FILESYSTEM_NAME"
  desc: "Special file system name for the root file system in the Storage account."
methods:
- uid: "com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.create()"
  fullName: "com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.create()"
  name: "create()"
  nameWithType: "DataLakeFileSystemAsyncClient.create()"
  summary: "Creates a new file system within a storage account."
  syntax: "public Mono<Void> create()"
  desc: "Creates a new file system within a storage account. If a file system with the same name already exists, the operation fails. For more information, see the [Azure Docs][].\n\n**Code Samples**\n\n```java\nclient.create().subscribe(\n     response -> System.out.printf(\"Create completed%n\"),\n     error -> System.out.printf(\"Error while creating file system %s%n\", error));\n```\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/create-container"
  returns:
    description: "A reactive response signalling completion."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.createDirectory(java.lang.String)"
  fullName: "com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.createDirectory(String directoryName)"
  name: "createDirectory(String directoryName)"
  nameWithType: "DataLakeFileSystemAsyncClient.createDirectory(String directoryName)"
  summary: "Creates a new directory within a file system."
  parameters:
  - description: "Name of the directory to create. If the path name contains special characters, pass in the\n url encoded version of the path name."
    name: "directoryName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<DataLakeDirectoryAsyncClient> createDirectory(String directoryName)"
  desc: "Creates a new directory within a file system. By default, this method will not overwrite an existing directory. For more information, see the [Azure Docs][].\n\n**Code Samples**\n\n```java\nMono<DataLakeDirectoryAsyncClient> directoryClient = client.createDirectory(directoryName);\n```\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/datalakestoragegen2/path/create"
  returns:
    description: "A <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> containing a <xref uid=\"com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DataLakeDirectoryAsyncClient\"></xref> used to interact with the directory\n created."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient?alt=com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient&text=DataLakeDirectoryAsyncClient\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.createDirectory(java.lang.String,boolean)"
  fullName: "com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.createDirectory(String directoryName, boolean overwrite)"
  name: "createDirectory(String directoryName, boolean overwrite)"
  nameWithType: "DataLakeFileSystemAsyncClient.createDirectory(String directoryName, boolean overwrite)"
  summary: "Creates a new directory within a file system."
  parameters:
  - description: "Name of the directory to create. If the path name contains special characters, pass in the\n url encoded version of the path name."
    name: "directoryName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Whether to overwrite, should a directory exist."
    name: "overwrite"
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<DataLakeDirectoryAsyncClient> createDirectory(String directoryName, boolean overwrite)"
  desc: "Creates a new directory within a file system. For more information, see the [Azure Docs][].\n\n**Code Samples**\n\n```java\nboolean overwrite = false; /* Default value. */\n Mono<DataLakeDirectoryAsyncClient> dClient = client.createDirectory(directoryName, overwrite);\n```\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/datalakestoragegen2/path/create"
  returns:
    description: "A <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> containing a <xref uid=\"com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DataLakeDirectoryAsyncClient\"></xref> used to interact with the directory\n created."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient?alt=com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient&text=DataLakeDirectoryAsyncClient\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.createDirectoryIfNotExists(java.lang.String)"
  fullName: "com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.createDirectoryIfNotExists(String directoryName)"
  name: "createDirectoryIfNotExists(String directoryName)"
  nameWithType: "DataLakeFileSystemAsyncClient.createDirectoryIfNotExists(String directoryName)"
  summary: "Creates a new directory within a file system if it does not exist."
  parameters:
  - description: "Name of the directory to create. If the path name contains special characters, pass in the\n url encoded version of the path name."
    name: "directoryName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<DataLakeDirectoryAsyncClient> createDirectoryIfNotExists(String directoryName)"
  desc: "Creates a new directory within a file system if it does not exist. For more information, see the [Azure Docs][].\n\n**Code Samples**\n\n```java\nDataLakeDirectoryAsyncClient directoryAsyncClient = client.createDirectoryIfNotExists(directoryName).block();\n```\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/datalakestoragegen2/path/create"
  returns:
    description: "A <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> containing a <xref uid=\"com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DataLakeDirectoryAsyncClient\"></xref> used to interact with the directory\n created."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient?alt=com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient&text=DataLakeDirectoryAsyncClient\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.createDirectoryIfNotExistsWithResponse(java.lang.String,com.azure.storage.file.datalake.options.DataLakePathCreateOptions)"
  fullName: "com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.createDirectoryIfNotExistsWithResponse(String directoryName, DataLakePathCreateOptions options)"
  name: "createDirectoryIfNotExistsWithResponse(String directoryName, DataLakePathCreateOptions options)"
  nameWithType: "DataLakeFileSystemAsyncClient.createDirectoryIfNotExistsWithResponse(String directoryName, DataLakePathCreateOptions options)"
  summary: "Creates a new directory within a file system if it does not exist."
  parameters:
  - description: "Name of the directory to create. If the path name contains special characters, pass in the\n url encoded version of the path name."
    name: "directoryName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "<xref uid=\"com.azure.storage.file.datalake.options.DataLakePathCreateOptions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DataLakePathCreateOptions\"></xref>"
    name: "options"
    type: "<xref href=\"com.azure.storage.file.datalake.options.DataLakePathCreateOptions?alt=com.azure.storage.file.datalake.options.DataLakePathCreateOptions&text=DataLakePathCreateOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<DataLakeDirectoryAsyncClient>> createDirectoryIfNotExistsWithResponse(String directoryName, DataLakePathCreateOptions options)"
  desc: "Creates a new directory within a file system if it does not exist. For more information, see the [Azure Docs][].\n\n**Code Samples**\n\n```java\nPathHttpHeaders headers = new PathHttpHeaders()\n     .setContentLanguage(\"en-US\")\n     .setContentType(\"binary\");\n String permissions = \"permissions\";\n String umask = \"umask\";\n DataLakePathCreateOptions options = new DataLakePathCreateOptions()\n     .setPermissions(permissions)\n     .setUmask(umask)\n     .setPathHttpHeaders(headers)\n     .setMetadata(Collections.singletonMap(\"metadata\", \"value\"));\n\n client.createDirectoryIfNotExistsWithResponse(directoryName, options).subscribe(response -> {\n     if (response.getStatusCode() == 409) {\n         System.out.println(\"Already exists.\");\n     } else {\n         System.out.println(\"successfully created.\");\n     }\n });\n```\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/datalakestoragegen2/path/create"
  returns:
    description: "A <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> containing a <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> whose <xref uid=\"com.azure.core.http.rest.Response.getValue*\" data-throw-if-not-resolved=\"false\" data-raw-source=\"value\"></xref> contains a\n <xref uid=\"com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DataLakeDirectoryAsyncClient\"></xref> used to interact with the directory created. If <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref>'s status\n code is 201, a new directory was successfully created. If status code is 409, a directory with the same name\n already existed at this location."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient?alt=com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient&text=DataLakeDirectoryAsyncClient\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.createDirectoryWithResponse(java.lang.String,com.azure.storage.file.datalake.options.DataLakePathCreateOptions)"
  fullName: "com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.createDirectoryWithResponse(String directoryName, DataLakePathCreateOptions options)"
  name: "createDirectoryWithResponse(String directoryName, DataLakePathCreateOptions options)"
  nameWithType: "DataLakeFileSystemAsyncClient.createDirectoryWithResponse(String directoryName, DataLakePathCreateOptions options)"
  summary: "Creates a new directory within a file system."
  parameters:
  - description: "Name of the directory to create. If the path name contains special characters, pass in the\n url encoded version of the path name."
    name: "directoryName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "<xref uid=\"com.azure.storage.file.datalake.options.DataLakePathCreateOptions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DataLakePathCreateOptions\"></xref>"
    name: "options"
    type: "<xref href=\"com.azure.storage.file.datalake.options.DataLakePathCreateOptions?alt=com.azure.storage.file.datalake.options.DataLakePathCreateOptions&text=DataLakePathCreateOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<DataLakeDirectoryAsyncClient>> createDirectoryWithResponse(String directoryName, DataLakePathCreateOptions options)"
  desc: "Creates a new directory within a file system. If a directory with the same name already exists, the directory will be overwritten. For more information, see the [Azure Docs][].\n\n**Code Samples**\n\n```java\nPathHttpHeaders httpHeaders = new PathHttpHeaders()\n     .setContentLanguage(\"en-US\")\n     .setContentType(\"binary\");\n DataLakeRequestConditions requestConditions = new DataLakeRequestConditions()\n     .setLeaseId(leaseId);\n Map<String, String> metadata = Collections.singletonMap(\"metadata\", \"value\");\n String permissions = \"permissions\";\n String umask = \"umask\";\n String owner = \"rwx\";\n String group = \"r--\";\n String leaseId = UUID.randomUUID().toString();\n Integer duration = 15;\n\n DataLakePathCreateOptions options = new DataLakePathCreateOptions()\n     .setPermissions(permissions)\n     .setUmask(umask)\n     .setOwner(owner)\n     .setGroup(group)\n     .setPathHttpHeaders(httpHeaders)\n     .setRequestConditions(requestConditions)\n     .setMetadata(metadata)\n     .setProposedLeaseId(leaseId)\n     .setLeaseDuration(duration);\n\n Mono<Response<DataLakeDirectoryAsyncClient>> newDirectoryClient = client.createDirectoryWithResponse(\n     directoryName, options);\n```\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/datalakestoragegen2/path/create"
  returns:
    description: "A <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> containing a <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> whose <xref uid=\"com.azure.core.http.rest.Response.getValue*\" data-throw-if-not-resolved=\"false\" data-raw-source=\"value\"></xref> contains a <xref uid=\"com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DataLakeDirectoryAsyncClient\"></xref> used to interact with the directory created."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient?alt=com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient&text=DataLakeDirectoryAsyncClient\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.createDirectoryWithResponse(java.lang.String,java.lang.String,java.lang.String,com.azure.storage.file.datalake.models.PathHttpHeaders,java.util.Map<java.lang.String,java.lang.String>,com.azure.storage.file.datalake.models.DataLakeRequestConditions)"
  fullName: "com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.createDirectoryWithResponse(String directoryName, String permissions, String umask, PathHttpHeaders headers, Map<String,String> metadata, DataLakeRequestConditions requestConditions)"
  name: "createDirectoryWithResponse(String directoryName, String permissions, String umask, PathHttpHeaders headers, Map<String,String> metadata, DataLakeRequestConditions requestConditions)"
  nameWithType: "DataLakeFileSystemAsyncClient.createDirectoryWithResponse(String directoryName, String permissions, String umask, PathHttpHeaders headers, Map<String,String> metadata, DataLakeRequestConditions requestConditions)"
  summary: "Creates a new directory within a file system."
  parameters:
  - description: "Name of the directory to create. If the path name contains special characters, pass in the\n url encoded version of the path name."
    name: "directoryName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "POSIX access permissions for the directory owner, the directory owning group, and others."
    name: "permissions"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Restricts permissions of the directory to be created."
    name: "umask"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "<xref uid=\"com.azure.storage.file.datalake.models.PathHttpHeaders\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PathHttpHeaders\"></xref>"
    name: "headers"
    type: "<xref href=\"com.azure.storage.file.datalake.models.PathHttpHeaders?alt=com.azure.storage.file.datalake.models.PathHttpHeaders&text=PathHttpHeaders\" data-throw-if-not-resolved=\"False\" />"
  - description: "Metadata to associate with the resource. If there is leading or trailing whitespace in any\n metadata key or value, it must be removed or encoded."
    name: "metadata"
    type: "<xref href=\"java.util.Map?alt=java.util.Map&text=Map\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />,<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />&gt;"
  - description: "<xref uid=\"com.azure.storage.file.datalake.models.DataLakeRequestConditions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DataLakeRequestConditions\"></xref>"
    name: "requestConditions"
    type: "<xref href=\"com.azure.storage.file.datalake.models.DataLakeRequestConditions?alt=com.azure.storage.file.datalake.models.DataLakeRequestConditions&text=DataLakeRequestConditions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<DataLakeDirectoryAsyncClient>> createDirectoryWithResponse(String directoryName, String permissions, String umask, PathHttpHeaders headers, Map<String,String> metadata, DataLakeRequestConditions requestConditions)"
  desc: "Creates a new directory within a file system. If a directory with the same name already exists, the directory will be overwritten. For more information, see the [Azure Docs][].\n\n**Code Samples**\n\n```java\nPathHttpHeaders httpHeaders = new PathHttpHeaders()\n     .setContentLanguage(\"en-US\")\n     .setContentType(\"binary\");\n DataLakeRequestConditions requestConditions = new DataLakeRequestConditions()\n     .setLeaseId(leaseId);\n String permissions = \"permissions\";\n String umask = \"umask\";\n Mono<Response<DataLakeDirectoryAsyncClient>> newDirectoryClient = client.createDirectoryWithResponse(\n     directoryName, permissions, umask, httpHeaders, Collections.singletonMap(\"metadata\", \"value\"),\n     requestConditions);\n```\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/datalakestoragegen2/path/create"
  returns:
    description: "A <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> containing a <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> whose <xref uid=\"com.azure.core.http.rest.Response.getValue*\" data-throw-if-not-resolved=\"false\" data-raw-source=\"value\"></xref> contains a <xref uid=\"com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DataLakeDirectoryAsyncClient\"></xref> used to interact with the directory created."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient?alt=com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient&text=DataLakeDirectoryAsyncClient\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.createFile(java.lang.String)"
  fullName: "com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.createFile(String fileName)"
  name: "createFile(String fileName)"
  nameWithType: "DataLakeFileSystemAsyncClient.createFile(String fileName)"
  summary: "Creates a new file within a file system."
  parameters:
  - description: "Name of the file to create. If the path name contains special characters, pass in the url encoded\n version of the path name."
    name: "fileName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<DataLakeFileAsyncClient> createFile(String fileName)"
  desc: "Creates a new file within a file system. By default, this method will not overwrite an existing file. For more information, see the [Azure Docs][].\n\n**Code Samples**\n\n```java\nMono<DataLakeFileAsyncClient> fileClient = client.createFile(fileName);\n```\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/datalakestoragegen2/path/create"
  returns:
    description: "A <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> containing a <xref uid=\"com.azure.storage.file.datalake.DataLakeFileAsyncClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DataLakeFileAsyncClient\"></xref> used to interact with the file created."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.file.datalake.DataLakeFileAsyncClient?alt=com.azure.storage.file.datalake.DataLakeFileAsyncClient&text=DataLakeFileAsyncClient\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.createFile(java.lang.String,boolean)"
  fullName: "com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.createFile(String fileName, boolean overwrite)"
  name: "createFile(String fileName, boolean overwrite)"
  nameWithType: "DataLakeFileSystemAsyncClient.createFile(String fileName, boolean overwrite)"
  summary: "Creates a new file within a file system."
  parameters:
  - description: "Name of the file to create. If the path name contains special characters, pass in the url encoded\n version of the path name."
    name: "fileName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Whether to overwrite, should a file exist."
    name: "overwrite"
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<DataLakeFileAsyncClient> createFile(String fileName, boolean overwrite)"
  desc: "Creates a new file within a file system. For more information, see the [Azure Docs][].\n\n**Code Samples**\n\n```java\nboolean overwrite = false; /* Default value. */\n Mono<DataLakeFileAsyncClient> fClient = client.createFile(fileName, overwrite);\n```\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/datalakestoragegen2/path/create"
  returns:
    description: "A <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> containing a <xref uid=\"com.azure.storage.file.datalake.DataLakeFileAsyncClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DataLakeFileAsyncClient\"></xref> used to interact with the file created."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.file.datalake.DataLakeFileAsyncClient?alt=com.azure.storage.file.datalake.DataLakeFileAsyncClient&text=DataLakeFileAsyncClient\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.createFileIfNotExists(java.lang.String)"
  fullName: "com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.createFileIfNotExists(String fileName)"
  name: "createFileIfNotExists(String fileName)"
  nameWithType: "DataLakeFileSystemAsyncClient.createFileIfNotExists(String fileName)"
  summary: "Creates a new file within a file system if it does not exist."
  parameters:
  - description: "Name of the file to create. If the path name contains special characters, pass in the url encoded\n version of the path name."
    name: "fileName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<DataLakeFileAsyncClient> createFileIfNotExists(String fileName)"
  desc: "Creates a new file within a file system if it does not exist. For more information, see the [Azure Docs][].\n\n**Code Samples**\n\n```java\nDataLakeFileAsyncClient fileAsyncClient = client.createFileIfNotExists(fileName).block();\n```\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/datalakestoragegen2/path/create"
  returns:
    description: "A <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> containing a <xref uid=\"com.azure.storage.file.datalake.DataLakeFileAsyncClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DataLakeFileAsyncClient\"></xref> used to interact with the file created."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.file.datalake.DataLakeFileAsyncClient?alt=com.azure.storage.file.datalake.DataLakeFileAsyncClient&text=DataLakeFileAsyncClient\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.createFileIfNotExistsWithResponse(java.lang.String,com.azure.storage.file.datalake.options.DataLakePathCreateOptions)"
  fullName: "com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.createFileIfNotExistsWithResponse(String fileName, DataLakePathCreateOptions options)"
  name: "createFileIfNotExistsWithResponse(String fileName, DataLakePathCreateOptions options)"
  nameWithType: "DataLakeFileSystemAsyncClient.createFileIfNotExistsWithResponse(String fileName, DataLakePathCreateOptions options)"
  summary: "Creates a new file within a file system if it does not exist."
  parameters:
  - description: "Name of the file to create. If the path name contains special characters, pass in the url encoded\n version of the path name."
    name: "fileName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "<xref uid=\"com.azure.storage.file.datalake.options.DataLakePathCreateOptions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DataLakePathCreateOptions\"></xref>"
    name: "options"
    type: "<xref href=\"com.azure.storage.file.datalake.options.DataLakePathCreateOptions?alt=com.azure.storage.file.datalake.options.DataLakePathCreateOptions&text=DataLakePathCreateOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<DataLakeFileAsyncClient>> createFileIfNotExistsWithResponse(String fileName, DataLakePathCreateOptions options)"
  desc: "Creates a new file within a file system if it does not exist. For more information, see the [Azure Docs][].\n\n**Code Samples**\n\n```java\nPathHttpHeaders headers = new PathHttpHeaders()\n     .setContentLanguage(\"en-US\")\n     .setContentType(\"binary\");\n String permissions = \"permissions\";\n String umask = \"umask\";\n DataLakePathCreateOptions options = new DataLakePathCreateOptions()\n     .setPermissions(permissions)\n     .setUmask(umask)\n     .setPathHttpHeaders(headers)\n     .setMetadata(Collections.singletonMap(\"metadata\", \"value\"));\n\n client.createFileIfNotExistsWithResponse(fileName, options).subscribe(response -> {\n     if (response.getStatusCode() == 409) {\n         System.out.println(\"Already exists.\");\n     } else {\n         System.out.println(\"successfully created.\");\n     }\n });\n```\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/datalakestoragegen2/path/create"
  returns:
    description: "A <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> containing a <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> whose <xref uid=\"com.azure.core.http.rest.Response.getValue*\" data-throw-if-not-resolved=\"false\" data-raw-source=\"value\"></xref> contains a\n <xref uid=\"com.azure.storage.file.datalake.DataLakeFileAsyncClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DataLakeFileAsyncClient\"></xref> used to interact with the file created. If <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref>'s status code is 201,\n a new file was successfully created. If status code is 409, a file with the same name already existed\n at this location."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.file.datalake.DataLakeFileAsyncClient?alt=com.azure.storage.file.datalake.DataLakeFileAsyncClient&text=DataLakeFileAsyncClient\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.createFileWithResponse(java.lang.String,com.azure.storage.file.datalake.options.DataLakePathCreateOptions)"
  fullName: "com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.createFileWithResponse(String fileName, DataLakePathCreateOptions options)"
  name: "createFileWithResponse(String fileName, DataLakePathCreateOptions options)"
  nameWithType: "DataLakeFileSystemAsyncClient.createFileWithResponse(String fileName, DataLakePathCreateOptions options)"
  summary: "Creates a new file within a file system."
  parameters:
  - description: "Name of the file to create. If the path name contains special characters, pass in the url encoded\n version of the path name."
    name: "fileName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "<xref uid=\"com.azure.storage.file.datalake.options.DataLakePathCreateOptions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DataLakePathCreateOptions\"></xref>"
    name: "options"
    type: "<xref href=\"com.azure.storage.file.datalake.options.DataLakePathCreateOptions?alt=com.azure.storage.file.datalake.options.DataLakePathCreateOptions&text=DataLakePathCreateOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<DataLakeFileAsyncClient>> createFileWithResponse(String fileName, DataLakePathCreateOptions options)"
  desc: "Creates a new file within a file system. If a file with the same name already exists, the file will be overwritten. For more information, see the [Azure Docs][].\n\n**Code Samples**\n\n```java\nPathHttpHeaders httpHeaders = new PathHttpHeaders()\n     .setContentLanguage(\"en-US\")\n     .setContentType(\"binary\");\n DataLakeRequestConditions requestConditions = new DataLakeRequestConditions()\n     .setLeaseId(leaseId);\n Map<String, String> metadata = Collections.singletonMap(\"metadata\", \"value\");\n String permissions = \"permissions\";\n String umask = \"umask\";\n String owner = \"rwx\";\n String group = \"r--\";\n String leaseId = UUID.randomUUID().toString();\n Integer duration = 15;\n DataLakePathCreateOptions options = new DataLakePathCreateOptions()\n     .setPermissions(permissions)\n     .setUmask(umask)\n     .setOwner(owner)\n     .setGroup(group)\n     .setPathHttpHeaders(httpHeaders)\n     .setRequestConditions(requestConditions)\n     .setMetadata(metadata)\n     .setProposedLeaseId(leaseId)\n     .setLeaseDuration(duration);\n\n Mono<Response<DataLakeFileAsyncClient>> newFileClient = client.createFileWithResponse(fileName, options);\n```\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/datalakestoragegen2/path/create"
  returns:
    description: "A <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> containing a <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> whose <xref uid=\"com.azure.core.http.rest.Response.getValue*\" data-throw-if-not-resolved=\"false\" data-raw-source=\"value\"></xref> contains a <xref uid=\"com.azure.storage.file.datalake.DataLakeFileAsyncClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DataLakeFileAsyncClient\"></xref> used to interact with the file created."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.file.datalake.DataLakeFileAsyncClient?alt=com.azure.storage.file.datalake.DataLakeFileAsyncClient&text=DataLakeFileAsyncClient\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.createFileWithResponse(java.lang.String,java.lang.String,java.lang.String,com.azure.storage.file.datalake.models.PathHttpHeaders,java.util.Map<java.lang.String,java.lang.String>,com.azure.storage.file.datalake.models.DataLakeRequestConditions)"
  fullName: "com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.createFileWithResponse(String fileName, String permissions, String umask, PathHttpHeaders headers, Map<String,String> metadata, DataLakeRequestConditions requestConditions)"
  name: "createFileWithResponse(String fileName, String permissions, String umask, PathHttpHeaders headers, Map<String,String> metadata, DataLakeRequestConditions requestConditions)"
  nameWithType: "DataLakeFileSystemAsyncClient.createFileWithResponse(String fileName, String permissions, String umask, PathHttpHeaders headers, Map<String,String> metadata, DataLakeRequestConditions requestConditions)"
  summary: "Creates a new file within a file system."
  parameters:
  - description: "Name of the file to create. If the path name contains special characters, pass in the url encoded\n version of the path name."
    name: "fileName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "POSIX access permissions for the file owner, the file owning group, and others."
    name: "permissions"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Restricts permissions of the file to be created."
    name: "umask"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "<xref uid=\"com.azure.storage.file.datalake.models.PathHttpHeaders\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PathHttpHeaders\"></xref>"
    name: "headers"
    type: "<xref href=\"com.azure.storage.file.datalake.models.PathHttpHeaders?alt=com.azure.storage.file.datalake.models.PathHttpHeaders&text=PathHttpHeaders\" data-throw-if-not-resolved=\"False\" />"
  - description: "Metadata to associate with the file. If there is leading or trailing whitespace in any\n metadata key or value, it must be removed or encoded."
    name: "metadata"
    type: "<xref href=\"java.util.Map?alt=java.util.Map&text=Map\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />,<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />&gt;"
  - description: "<xref uid=\"com.azure.storage.file.datalake.models.DataLakeRequestConditions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DataLakeRequestConditions\"></xref>"
    name: "requestConditions"
    type: "<xref href=\"com.azure.storage.file.datalake.models.DataLakeRequestConditions?alt=com.azure.storage.file.datalake.models.DataLakeRequestConditions&text=DataLakeRequestConditions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<DataLakeFileAsyncClient>> createFileWithResponse(String fileName, String permissions, String umask, PathHttpHeaders headers, Map<String,String> metadata, DataLakeRequestConditions requestConditions)"
  desc: "Creates a new file within a file system. If a file with the same name already exists, the file will be overwritten. For more information, see the [Azure Docs][].\n\n**Code Samples**\n\n```java\nPathHttpHeaders httpHeaders = new PathHttpHeaders()\n     .setContentLanguage(\"en-US\")\n     .setContentType(\"binary\");\n DataLakeRequestConditions requestConditions = new DataLakeRequestConditions()\n     .setLeaseId(leaseId);\n String permissions = \"permissions\";\n String umask = \"umask\";\n Mono<Response<DataLakeFileAsyncClient>> newFileClient = client.createFileWithResponse(fileName, permissions,\n     umask, httpHeaders, Collections.singletonMap(\"metadata\", \"value\"), requestConditions);\n```\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/datalakestoragegen2/path/create"
  returns:
    description: "A <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> containing a <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> whose <xref uid=\"com.azure.core.http.rest.Response.getValue*\" data-throw-if-not-resolved=\"false\" data-raw-source=\"value\"></xref> contains a <xref uid=\"com.azure.storage.file.datalake.DataLakeFileAsyncClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DataLakeFileAsyncClient\"></xref> used to interact with the file created."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.file.datalake.DataLakeFileAsyncClient?alt=com.azure.storage.file.datalake.DataLakeFileAsyncClient&text=DataLakeFileAsyncClient\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.createIfNotExists()"
  fullName: "com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.createIfNotExists()"
  name: "createIfNotExists()"
  nameWithType: "DataLakeFileSystemAsyncClient.createIfNotExists()"
  summary: "Creates a new file system within a storage account if it does not exist."
  syntax: "public Mono<Boolean> createIfNotExists()"
  desc: "Creates a new file system within a storage account if it does not exist. For more information, see the [Azure Docs][].\n\n**Code Samples**\n\n```java\nclient.createIfNotExists().subscribe(created -> {\n     if (created) {\n         System.out.println(\"Successfully created.\");\n     } else {\n         System.out.println(\"Already exists.\");\n     }\n });\n```\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/create-container"
  returns:
    description: "A reactive response signalling completion. <code>true</code> indicates that a new file system was created.\n <code>false</code> indicates that a file system already existed at this location."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Boolean?alt=java.lang.Boolean&text=Boolean\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.createIfNotExistsWithResponse(java.util.Map<java.lang.String,java.lang.String>,com.azure.storage.file.datalake.models.PublicAccessType)"
  fullName: "com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.createIfNotExistsWithResponse(Map<String,String> metadata, PublicAccessType accessType)"
  name: "createIfNotExistsWithResponse(Map<String,String> metadata, PublicAccessType accessType)"
  nameWithType: "DataLakeFileSystemAsyncClient.createIfNotExistsWithResponse(Map<String,String> metadata, PublicAccessType accessType)"
  summary: "Creates a new file system within a storage account if it does not exist."
  parameters:
  - description: "Metadata to associate with the file system. If there is leading or trailing whitespace in any\n metadata key or value, it must be removed or encoded."
    name: "metadata"
    type: "<xref href=\"java.util.Map?alt=java.util.Map&text=Map\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />,<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />&gt;"
  - description: "Specifies how the data in this file system is available to the public. See the\n x-ms-blob-public-access header in the Azure Docs for more information. Pass null for no public access."
    name: "accessType"
    type: "<xref href=\"com.azure.storage.file.datalake.models.PublicAccessType?alt=com.azure.storage.file.datalake.models.PublicAccessType&text=PublicAccessType\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<Boolean>> createIfNotExistsWithResponse(Map<String,String> metadata, PublicAccessType accessType)"
  desc: "Creates a new file system within a storage account if it does not exist. For more information, see the [Azure Docs][].\n\n**Code Samples**\n\n```java\nMap<String, String> metadata = Collections.singletonMap(\"metadata\", \"value\");\n client.createIfNotExistsWithResponse(metadata, PublicAccessType.CONTAINER).subscribe(response -> {\n     if (response.getStatusCode() == 409) {\n         System.out.println(\"Already exists.\");\n     } else {\n         System.out.println(\"successfully created.\");\n     }\n });\n```\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/create-container"
  returns:
    description: "A reactive response signaling completion. If <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref>'s status code is 201, a new file system was\n successfully created. If status code is 409, a file system already existed at this location."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Boolean?alt=java.lang.Boolean&text=Boolean\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.createWithResponse(java.util.Map<java.lang.String,java.lang.String>,com.azure.storage.file.datalake.models.PublicAccessType)"
  fullName: "com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.createWithResponse(Map<String,String> metadata, PublicAccessType accessType)"
  name: "createWithResponse(Map<String,String> metadata, PublicAccessType accessType)"
  nameWithType: "DataLakeFileSystemAsyncClient.createWithResponse(Map<String,String> metadata, PublicAccessType accessType)"
  summary: "Creates a new file system within a storage account."
  parameters:
  - description: "Metadata to associate with the file system. If there is leading or trailing whitespace in any\n metadata key or value, it must be removed or encoded."
    name: "metadata"
    type: "<xref href=\"java.util.Map?alt=java.util.Map&text=Map\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />,<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />&gt;"
  - description: "Specifies how the data in this file system is available to the public. See the\n x-ms-blob-public-access header in the Azure Docs for more information. Pass null for no public access."
    name: "accessType"
    type: "<xref href=\"com.azure.storage.file.datalake.models.PublicAccessType?alt=com.azure.storage.file.datalake.models.PublicAccessType&text=PublicAccessType\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<Void>> createWithResponse(Map<String,String> metadata, PublicAccessType accessType)"
  desc: "Creates a new file system within a storage account. If a file system with the same name already exists, the operation fails. For more information, see the [Azure Docs][].\n\n**Code Samples**\n\n```java\nMap<String, String> metadata = Collections.singletonMap(\"metadata\", \"value\");\n client.createWithResponse(metadata, PublicAccessType.CONTAINER).subscribe(response ->\n     System.out.printf(\"Create completed with status %d%n\", response.getStatusCode()));\n```\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/create-container"
  returns:
    description: "A reactive response signalling completion."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.delete()"
  fullName: "com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.delete()"
  name: "delete()"
  nameWithType: "DataLakeFileSystemAsyncClient.delete()"
  summary: "Marks the specified file system for deletion."
  syntax: "public Mono<Void> delete()"
  desc: "Marks the specified file system for deletion. The file system and any files/directories contained within it are later deleted during garbage collection. For more information, see the [Azure Docs][].\n\n**Code Samples**\n\n```java\nclient.delete().subscribe(\n     response -> System.out.printf(\"Delete completed%n\"),\n     error -> System.out.printf(\"Delete failed: %s%n\", error));\n```\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/delete-container"
  returns:
    description: "A reactive response signalling completion."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.deleteDirectory(java.lang.String)"
  fullName: "com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.deleteDirectory(String directoryName)"
  name: "deleteDirectory(String directoryName)"
  nameWithType: "DataLakeFileSystemAsyncClient.deleteDirectory(String directoryName)"
  summary: "Deletes the specified directory in the file system."
  parameters:
  - description: "Name of the directory to delete. If the path name contains special characters, pass in the\n url encoded version of the path name."
    name: "directoryName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Void> deleteDirectory(String directoryName)"
  desc: "Deletes the specified directory in the file system. If the directory doesn't exist the operation fails. For more information see the [Azure Docs][].\n\n**Code Samples**\n\n```java\nclient.deleteDirectory(directoryName).subscribe(response ->\n     System.out.println(\"Delete request completed\"));\n```\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/datalakestoragegen2/path/delete"
  returns:
    description: "A reactive response signalling completion."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.deleteDirectoryIfExists(java.lang.String)"
  fullName: "com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.deleteDirectoryIfExists(String directoryName)"
  name: "deleteDirectoryIfExists(String directoryName)"
  nameWithType: "DataLakeFileSystemAsyncClient.deleteDirectoryIfExists(String directoryName)"
  summary: "Deletes the specified directory in the file system if it exists."
  parameters:
  - description: "Name of the directory to delete. If the path name contains special characters, pass in the\n url encoded version of the path name."
    name: "directoryName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Boolean> deleteDirectoryIfExists(String directoryName)"
  desc: "Deletes the specified directory in the file system if it exists. For more information see the [Azure Docs][].\n\n**Code Samples**\n\n```java\nclient.deleteDirectoryIfExists(fileName).subscribe(deleted -> {\n     if (deleted) {\n         System.out.println(\"Successfully deleted.\");\n     } else {\n         System.out.println(\"Does not exist.\");\n     }\n });\n```\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/datalakestoragegen2/path/delete"
  returns:
    description: "a reactive response signaling completion. <code>true</code> indicates that the specified directory was\n successfully deleted, <code>false</code> indicates that the specified directory did not exist."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Boolean?alt=java.lang.Boolean&text=Boolean\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.deleteDirectoryIfExistsWithResponse(java.lang.String,com.azure.storage.file.datalake.options.DataLakePathDeleteOptions)"
  fullName: "com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.deleteDirectoryIfExistsWithResponse(String directoryName, DataLakePathDeleteOptions options)"
  name: "deleteDirectoryIfExistsWithResponse(String directoryName, DataLakePathDeleteOptions options)"
  nameWithType: "DataLakeFileSystemAsyncClient.deleteDirectoryIfExistsWithResponse(String directoryName, DataLakePathDeleteOptions options)"
  summary: "Deletes the specified directory in the file system if it exists."
  parameters:
  - description: "Name of the directory to delete. If the path name contains special characters, pass in the\n url encoded version of the path name."
    name: "directoryName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "<xref uid=\"com.azure.storage.file.datalake.options.DataLakePathDeleteOptions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DataLakePathDeleteOptions\"></xref>"
    name: "options"
    type: "<xref href=\"com.azure.storage.file.datalake.options.DataLakePathDeleteOptions?alt=com.azure.storage.file.datalake.options.DataLakePathDeleteOptions&text=DataLakePathDeleteOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<Boolean>> deleteDirectoryIfExistsWithResponse(String directoryName, DataLakePathDeleteOptions options)"
  desc: "Deletes the specified directory in the file system if it exists. For more information see the [Azure Docs][].\n\n**Code Samples**\n\n```java\nDataLakeRequestConditions requestConditions = new DataLakeRequestConditions()\n     .setLeaseId(leaseId);\n boolean recursive = false; // Default value\n DataLakePathDeleteOptions options = new DataLakePathDeleteOptions().setIsRecursive(recursive)\n     .setRequestConditions(requestConditions);\n\n client.deleteDirectoryIfExistsWithResponse(directoryName, options).subscribe(response -> {\n     if (response.getStatusCode() == 404) {\n         System.out.println(\"Does not exist.\");\n     } else {\n         System.out.println(\"successfully deleted.\");\n     }\n });\n```\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/datalakestoragegen2/path/delete"
  returns:
    description: "A reactive response signaling completion. If <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref>'s status code is 200, the file was\n successfully deleted. If status code is 404, the file does not exist."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Boolean?alt=java.lang.Boolean&text=Boolean\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.deleteDirectoryWithResponse(java.lang.String,boolean,com.azure.storage.file.datalake.models.DataLakeRequestConditions)"
  fullName: "com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.deleteDirectoryWithResponse(String directoryName, boolean recursive, DataLakeRequestConditions requestConditions)"
  name: "deleteDirectoryWithResponse(String directoryName, boolean recursive, DataLakeRequestConditions requestConditions)"
  nameWithType: "DataLakeFileSystemAsyncClient.deleteDirectoryWithResponse(String directoryName, boolean recursive, DataLakeRequestConditions requestConditions)"
  summary: "Deletes the specified directory in the file system."
  parameters:
  - description: "Name of the directory to delete. If the path name contains special characters, pass in the\n url encoded version of the path name."
    name: "directoryName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Whether to delete all paths beneath the directory."
    name: "recursive"
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
  - description: "<xref uid=\"com.azure.storage.file.datalake.models.DataLakeRequestConditions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DataLakeRequestConditions\"></xref>"
    name: "requestConditions"
    type: "<xref href=\"com.azure.storage.file.datalake.models.DataLakeRequestConditions?alt=com.azure.storage.file.datalake.models.DataLakeRequestConditions&text=DataLakeRequestConditions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<Void>> deleteDirectoryWithResponse(String directoryName, boolean recursive, DataLakeRequestConditions requestConditions)"
  desc: "Deletes the specified directory in the file system. If the directory doesn't exist the operation fails. For more information see the [Azure Docs][].\n\n**Code Samples**\n\n```java\nDataLakeRequestConditions requestConditions = new DataLakeRequestConditions()\n     .setLeaseId(leaseId);\n boolean recursive = false; // Default value\n\n client.deleteDirectoryWithResponse(directoryName, recursive, requestConditions)\n     .subscribe(response -> System.out.println(\"Delete request completed\"));\n```\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/datalakestoragegen2/path/delete"
  returns:
    description: "A <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> containing status code and HTTP headers"
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.deleteFile(java.lang.String)"
  fullName: "com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.deleteFile(String fileName)"
  name: "deleteFile(String fileName)"
  nameWithType: "DataLakeFileSystemAsyncClient.deleteFile(String fileName)"
  summary: "Deletes the specified file in the file system."
  parameters:
  - description: "Name of the file to delete. If the path name contains special characters, pass in the url encoded\n version of the path name."
    name: "fileName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Void> deleteFile(String fileName)"
  desc: "Deletes the specified file in the file system. If the file doesn't exist the operation fails. For more information see the [Azure Docs][].\n\n**Code Samples**\n\n```java\nclient.deleteFile(fileName).subscribe(response ->\n     System.out.println(\"Delete request completed\"));\n```\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/datalakestoragegen2/path/delete"
  returns:
    description: "A reactive response signalling completion."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.deleteFileIfExists(java.lang.String)"
  fullName: "com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.deleteFileIfExists(String fileName)"
  name: "deleteFileIfExists(String fileName)"
  nameWithType: "DataLakeFileSystemAsyncClient.deleteFileIfExists(String fileName)"
  summary: "Deletes the specified file in the file system if it exists."
  parameters:
  - description: "Name of the file to delete. If the path name contains special characters, pass in the url encoded\n version of the path name."
    name: "fileName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Boolean> deleteFileIfExists(String fileName)"
  desc: "Deletes the specified file in the file system if it exists. For more information see the [Azure Docs][].\n\n**Code Samples**\n\n```java\nclient.deleteFileIfExists(fileName).subscribe(deleted -> {\n     if (deleted) {\n         System.out.println(\"Successfully deleted.\");\n     } else {\n         System.out.println(\"Does not exist.\");\n     }\n });\n```\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/datalakestoragegen2/path/delete"
  returns:
    description: "a reactive response signaling completion. <code>true</code> indicates that the specified file was successfully\n deleted, <code>false</code> indicates that the specified file did not exist."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Boolean?alt=java.lang.Boolean&text=Boolean\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.deleteFileIfExistsWithResponse(java.lang.String,com.azure.storage.file.datalake.options.DataLakePathDeleteOptions)"
  fullName: "com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.deleteFileIfExistsWithResponse(String fileName, DataLakePathDeleteOptions options)"
  name: "deleteFileIfExistsWithResponse(String fileName, DataLakePathDeleteOptions options)"
  nameWithType: "DataLakeFileSystemAsyncClient.deleteFileIfExistsWithResponse(String fileName, DataLakePathDeleteOptions options)"
  summary: "Deletes the specified file in the file system if it exists."
  parameters:
  - description: "Name of the file to delete. If the path name contains special characters, pass in the url encoded\n version of the path name."
    name: "fileName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "<xref uid=\"com.azure.storage.file.datalake.options.DataLakePathDeleteOptions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DataLakePathDeleteOptions\"></xref>"
    name: "options"
    type: "<xref href=\"com.azure.storage.file.datalake.options.DataLakePathDeleteOptions?alt=com.azure.storage.file.datalake.options.DataLakePathDeleteOptions&text=DataLakePathDeleteOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<Boolean>> deleteFileIfExistsWithResponse(String fileName, DataLakePathDeleteOptions options)"
  desc: "Deletes the specified file in the file system if it exists. For more information see the [Azure Docs][].\n\n**Code Samples**\n\n```java\nDataLakeRequestConditions requestConditions = new DataLakeRequestConditions()\n     .setLeaseId(leaseId);\n DataLakePathDeleteOptions options = new DataLakePathDeleteOptions().setIsRecursive(false)\n     .setRequestConditions(requestConditions);\n\n client.deleteFileIfExistsWithResponse(fileName, options).subscribe(response -> {\n     if (response.getStatusCode() == 404) {\n         System.out.println(\"Does not exist.\");\n     } else {\n         System.out.println(\"successfully deleted.\");\n     }\n });\n```\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/datalakestoragegen2/path/delete"
  returns:
    description: "A reactive response signaling completion. If <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref>'s status code is 200, the file was\n successfully deleted. If status code is 404, the file does not exist."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Boolean?alt=java.lang.Boolean&text=Boolean\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.deleteFileWithResponse(java.lang.String,com.azure.storage.file.datalake.models.DataLakeRequestConditions)"
  fullName: "com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.deleteFileWithResponse(String fileName, DataLakeRequestConditions requestConditions)"
  name: "deleteFileWithResponse(String fileName, DataLakeRequestConditions requestConditions)"
  nameWithType: "DataLakeFileSystemAsyncClient.deleteFileWithResponse(String fileName, DataLakeRequestConditions requestConditions)"
  summary: "Deletes the specified file in the file system."
  parameters:
  - description: "Name of the file to delete. If the path name contains special characters, pass in the url encoded\n version of the path name."
    name: "fileName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "<xref uid=\"com.azure.storage.file.datalake.models.DataLakeRequestConditions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DataLakeRequestConditions\"></xref>"
    name: "requestConditions"
    type: "<xref href=\"com.azure.storage.file.datalake.models.DataLakeRequestConditions?alt=com.azure.storage.file.datalake.models.DataLakeRequestConditions&text=DataLakeRequestConditions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<Void>> deleteFileWithResponse(String fileName, DataLakeRequestConditions requestConditions)"
  desc: "Deletes the specified file in the file system. If the file doesn't exist the operation fails. For more information see the [Azure Docs][].\n\n**Code Samples**\n\n```java\nDataLakeRequestConditions requestConditions = new DataLakeRequestConditions()\n     .setLeaseId(leaseId);\n\n client.deleteFileWithResponse(fileName, requestConditions)\n     .subscribe(response -> System.out.println(\"Delete request completed\"));\n```\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/datalakestoragegen2/path/delete"
  returns:
    description: "A <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> containing status code and HTTP headers"
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.deleteIfExists()"
  fullName: "com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.deleteIfExists()"
  name: "deleteIfExists()"
  nameWithType: "DataLakeFileSystemAsyncClient.deleteIfExists()"
  summary: "Marks the specified file system for deletion if it exists."
  syntax: "public Mono<Boolean> deleteIfExists()"
  desc: "Marks the specified file system for deletion if it exists. The file system and any files/directories contained within it are later deleted during garbage collection. For more information, see the [Azure Docs][].\n\n**Code Samples**\n\n```java\nclient.deleteIfExists().subscribe(deleted -> {\n     if (deleted) {\n         System.out.println(\"Successfully deleted.\");\n     } else {\n         System.out.println(\"Does not exist.\");\n     }\n });\n```\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/delete-container"
  returns:
    description: "a reactive response signaling completion. <code>true</code> indicates that the file system was successfully\n deleted, <code>false</code> indicates that the file system did not exist."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Boolean?alt=java.lang.Boolean&text=Boolean\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.deleteIfExistsWithResponse(com.azure.storage.file.datalake.options.DataLakePathDeleteOptions)"
  fullName: "com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.deleteIfExistsWithResponse(DataLakePathDeleteOptions options)"
  name: "deleteIfExistsWithResponse(DataLakePathDeleteOptions options)"
  nameWithType: "DataLakeFileSystemAsyncClient.deleteIfExistsWithResponse(DataLakePathDeleteOptions options)"
  summary: "Marks the specified file system for deletion if it exists."
  parameters:
  - description: "<xref uid=\"com.azure.storage.file.datalake.options.DataLakePathDeleteOptions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DataLakePathDeleteOptions\"></xref>"
    name: "options"
    type: "<xref href=\"com.azure.storage.file.datalake.options.DataLakePathDeleteOptions?alt=com.azure.storage.file.datalake.options.DataLakePathDeleteOptions&text=DataLakePathDeleteOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<Boolean>> deleteIfExistsWithResponse(DataLakePathDeleteOptions options)"
  desc: "Marks the specified file system for deletion if it exists. The file system and any files/directories contained within it are later deleted during garbage collection. For more information, see the [Azure Docs][].\n\n**Code Samples**\n\n```java\nDataLakeRequestConditions requestConditions = new DataLakeRequestConditions()\n     .setLeaseId(leaseId)\n     .setIfUnmodifiedSince(OffsetDateTime.now().minusDays(3));\n DataLakePathDeleteOptions options = new DataLakePathDeleteOptions().setIsRecursive(false)\n     .setRequestConditions(requestConditions);\n\n client.deleteIfExistsWithResponse(options).subscribe(response -> {\n     if (response.getStatusCode() == 404) {\n         System.out.println(\"Does not exist.\");\n     } else {\n         System.out.println(\"successfully deleted.\");\n     }\n });\n```\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/delete-container"
  returns:
    description: "A reactive response signaling completion. If <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref>'s status code is 202, the file system was\n successfully deleted. If status code is 404, the file system does not exist."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Boolean?alt=java.lang.Boolean&text=Boolean\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.deleteWithResponse(com.azure.storage.file.datalake.models.DataLakeRequestConditions)"
  fullName: "com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.deleteWithResponse(DataLakeRequestConditions requestConditions)"
  name: "deleteWithResponse(DataLakeRequestConditions requestConditions)"
  nameWithType: "DataLakeFileSystemAsyncClient.deleteWithResponse(DataLakeRequestConditions requestConditions)"
  summary: "Marks the specified file system for deletion."
  parameters:
  - description: "<xref uid=\"com.azure.storage.file.datalake.models.DataLakeRequestConditions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DataLakeRequestConditions\"></xref>"
    name: "requestConditions"
    type: "<xref href=\"com.azure.storage.file.datalake.models.DataLakeRequestConditions?alt=com.azure.storage.file.datalake.models.DataLakeRequestConditions&text=DataLakeRequestConditions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<Void>> deleteWithResponse(DataLakeRequestConditions requestConditions)"
  desc: "Marks the specified file system for deletion. The file system and any files/directories contained within it are later deleted during garbage collection. For more information, see the [Azure Docs][].\n\n**Code Samples**\n\n```java\nDataLakeRequestConditions requestConditions = new DataLakeRequestConditions()\n     .setLeaseId(leaseId)\n     .setIfUnmodifiedSince(OffsetDateTime.now().minusDays(3));\n\n client.deleteWithResponse(requestConditions).subscribe(response ->\n     System.out.printf(\"Delete completed with status %d%n\", response.getStatusCode()));\n```\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/delete-container"
  returns:
    description: "A reactive response signalling completion."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.generateSas(com.azure.storage.file.datalake.sas.DataLakeServiceSasSignatureValues)"
  fullName: "com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.generateSas(DataLakeServiceSasSignatureValues dataLakeServiceSasSignatureValues)"
  name: "generateSas(DataLakeServiceSasSignatureValues dataLakeServiceSasSignatureValues)"
  nameWithType: "DataLakeFileSystemAsyncClient.generateSas(DataLakeServiceSasSignatureValues dataLakeServiceSasSignatureValues)"
  summary: "Generates a service SAS for the file system using the specified <xref uid=\"com.azure.storage.file.datalake.sas.DataLakeServiceSasSignatureValues\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DataLakeServiceSasSignatureValues\"></xref>"
  parameters:
  - description: "<xref uid=\"com.azure.storage.file.datalake.sas.DataLakeServiceSasSignatureValues\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DataLakeServiceSasSignatureValues\"></xref>"
    name: "dataLakeServiceSasSignatureValues"
    type: "<xref href=\"com.azure.storage.file.datalake.sas.DataLakeServiceSasSignatureValues?alt=com.azure.storage.file.datalake.sas.DataLakeServiceSasSignatureValues&text=DataLakeServiceSasSignatureValues\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public String generateSas(DataLakeServiceSasSignatureValues dataLakeServiceSasSignatureValues)"
  desc: "Generates a service SAS for the file system using the specified <xref uid=\"com.azure.storage.file.datalake.sas.DataLakeServiceSasSignatureValues\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DataLakeServiceSasSignatureValues\"></xref>\n\nNote : The client must be authenticated via <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"StorageSharedKeyCredential\"></xref>\n\nSee <xref uid=\"com.azure.storage.file.datalake.sas.DataLakeServiceSasSignatureValues\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DataLakeServiceSasSignatureValues\"></xref> for more information on how to construct a service SAS.\n\n**Code Samples**\n\n```java\nOffsetDateTime expiryTime = OffsetDateTime.now().plusDays(1);\n FileSystemSasPermission permission = new FileSystemSasPermission().setReadPermission(true);\n\n DataLakeServiceSasSignatureValues values = new DataLakeServiceSasSignatureValues(expiryTime, permission)\n     .setStartTime(OffsetDateTime.now());\n\n client.generateSas(values); // Client must be authenticated via StorageSharedKeyCredential\n```"
  returns:
    description: "A <code>String</code> representing the SAS query parameters."
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.generateSas(com.azure.storage.file.datalake.sas.DataLakeServiceSasSignatureValues,com.azure.core.util.Context)"
  fullName: "com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.generateSas(DataLakeServiceSasSignatureValues dataLakeServiceSasSignatureValues, Context context)"
  name: "generateSas(DataLakeServiceSasSignatureValues dataLakeServiceSasSignatureValues, Context context)"
  nameWithType: "DataLakeFileSystemAsyncClient.generateSas(DataLakeServiceSasSignatureValues dataLakeServiceSasSignatureValues, Context context)"
  summary: "Generates a service SAS for the file system using the specified <xref uid=\"com.azure.storage.file.datalake.sas.DataLakeServiceSasSignatureValues\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DataLakeServiceSasSignatureValues\"></xref>"
  parameters:
  - description: "<xref uid=\"com.azure.storage.file.datalake.sas.DataLakeServiceSasSignatureValues\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DataLakeServiceSasSignatureValues\"></xref>"
    name: "dataLakeServiceSasSignatureValues"
    type: "<xref href=\"com.azure.storage.file.datalake.sas.DataLakeServiceSasSignatureValues?alt=com.azure.storage.file.datalake.sas.DataLakeServiceSasSignatureValues&text=DataLakeServiceSasSignatureValues\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional context that is passed through the code when generating a SAS."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public String generateSas(DataLakeServiceSasSignatureValues dataLakeServiceSasSignatureValues, Context context)"
  desc: "Generates a service SAS for the file system using the specified <xref uid=\"com.azure.storage.file.datalake.sas.DataLakeServiceSasSignatureValues\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DataLakeServiceSasSignatureValues\"></xref>\n\nNote : The client must be authenticated via <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"StorageSharedKeyCredential\"></xref>\n\nSee <xref uid=\"com.azure.storage.file.datalake.sas.DataLakeServiceSasSignatureValues\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DataLakeServiceSasSignatureValues\"></xref> for more information on how to construct a service SAS.\n\n**Code Samples**\n\n```java\nOffsetDateTime expiryTime = OffsetDateTime.now().plusDays(1);\n FileSystemSasPermission permission = new FileSystemSasPermission().setReadPermission(true);\n\n DataLakeServiceSasSignatureValues values = new DataLakeServiceSasSignatureValues(expiryTime, permission)\n     .setStartTime(OffsetDateTime.now());\n\n // Client must be authenticated via StorageSharedKeyCredential\n client.generateSas(values, new Context(\"key\", \"value\"));\n```"
  returns:
    description: "A <code>String</code> representing the SAS query parameters."
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.generateUserDelegationSas(com.azure.storage.file.datalake.sas.DataLakeServiceSasSignatureValues,com.azure.storage.file.datalake.models.UserDelegationKey)"
  fullName: "com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.generateUserDelegationSas(DataLakeServiceSasSignatureValues dataLakeServiceSasSignatureValues, UserDelegationKey userDelegationKey)"
  name: "generateUserDelegationSas(DataLakeServiceSasSignatureValues dataLakeServiceSasSignatureValues, UserDelegationKey userDelegationKey)"
  nameWithType: "DataLakeFileSystemAsyncClient.generateUserDelegationSas(DataLakeServiceSasSignatureValues dataLakeServiceSasSignatureValues, UserDelegationKey userDelegationKey)"
  summary: "Generates a user delegation SAS for the file system using the specified <xref uid=\"com.azure.storage.file.datalake.sas.DataLakeServiceSasSignatureValues\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DataLakeServiceSasSignatureValues\"></xref>."
  parameters:
  - description: "<xref uid=\"com.azure.storage.file.datalake.sas.DataLakeServiceSasSignatureValues\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DataLakeServiceSasSignatureValues\"></xref>"
    name: "dataLakeServiceSasSignatureValues"
    type: "<xref href=\"com.azure.storage.file.datalake.sas.DataLakeServiceSasSignatureValues?alt=com.azure.storage.file.datalake.sas.DataLakeServiceSasSignatureValues&text=DataLakeServiceSasSignatureValues\" data-throw-if-not-resolved=\"False\" />"
  - description: "A <xref uid=\"com.azure.storage.file.datalake.models.UserDelegationKey\" data-throw-if-not-resolved=\"false\" data-raw-source=\"UserDelegationKey\"></xref> object used to sign the SAS values.\n See <xref uid=\"com.azure.storage.file.datalake.DataLakeServiceAsyncClient.getUserDelegationKey(java.time.OffsetDateTime,java.time.OffsetDateTime)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DataLakeServiceAsyncClient#getUserDelegationKey(OffsetDateTime, OffsetDateTime)\"></xref> for more information\n on how to get a user delegation key."
    name: "userDelegationKey"
    type: "<xref href=\"com.azure.storage.file.datalake.models.UserDelegationKey?alt=com.azure.storage.file.datalake.models.UserDelegationKey&text=UserDelegationKey\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public String generateUserDelegationSas(DataLakeServiceSasSignatureValues dataLakeServiceSasSignatureValues, UserDelegationKey userDelegationKey)"
  desc: "Generates a user delegation SAS for the file system using the specified <xref uid=\"com.azure.storage.file.datalake.sas.DataLakeServiceSasSignatureValues\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DataLakeServiceSasSignatureValues\"></xref>.\n\nSee <xref uid=\"com.azure.storage.file.datalake.sas.DataLakeServiceSasSignatureValues\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DataLakeServiceSasSignatureValues\"></xref> for more information on how to construct a user delegation SAS.\n\n**Code Samples**\n\n```java\nOffsetDateTime myExpiryTime = OffsetDateTime.now().plusDays(1);\n FileSystemSasPermission myPermission = new FileSystemSasPermission().setReadPermission(true);\n\n DataLakeServiceSasSignatureValues myValues = new DataLakeServiceSasSignatureValues(expiryTime, permission)\n     .setStartTime(OffsetDateTime.now());\n\n client.generateUserDelegationSas(values, userDelegationKey);\n```"
  returns:
    description: "A <code>String</code> representing the SAS query parameters."
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.generateUserDelegationSas(com.azure.storage.file.datalake.sas.DataLakeServiceSasSignatureValues,com.azure.storage.file.datalake.models.UserDelegationKey,java.lang.String,com.azure.core.util.Context)"
  fullName: "com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.generateUserDelegationSas(DataLakeServiceSasSignatureValues dataLakeServiceSasSignatureValues, UserDelegationKey userDelegationKey, String accountName, Context context)"
  name: "generateUserDelegationSas(DataLakeServiceSasSignatureValues dataLakeServiceSasSignatureValues, UserDelegationKey userDelegationKey, String accountName, Context context)"
  nameWithType: "DataLakeFileSystemAsyncClient.generateUserDelegationSas(DataLakeServiceSasSignatureValues dataLakeServiceSasSignatureValues, UserDelegationKey userDelegationKey, String accountName, Context context)"
  summary: "Generates a user delegation SAS for the file system using the specified <xref uid=\"com.azure.storage.file.datalake.sas.DataLakeServiceSasSignatureValues\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DataLakeServiceSasSignatureValues\"></xref>."
  parameters:
  - description: "<xref uid=\"com.azure.storage.file.datalake.sas.DataLakeServiceSasSignatureValues\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DataLakeServiceSasSignatureValues\"></xref>"
    name: "dataLakeServiceSasSignatureValues"
    type: "<xref href=\"com.azure.storage.file.datalake.sas.DataLakeServiceSasSignatureValues?alt=com.azure.storage.file.datalake.sas.DataLakeServiceSasSignatureValues&text=DataLakeServiceSasSignatureValues\" data-throw-if-not-resolved=\"False\" />"
  - description: "A <xref uid=\"com.azure.storage.file.datalake.models.UserDelegationKey\" data-throw-if-not-resolved=\"false\" data-raw-source=\"UserDelegationKey\"></xref> object used to sign the SAS values.\n See <xref uid=\"com.azure.storage.file.datalake.DataLakeServiceAsyncClient.getUserDelegationKey(java.time.OffsetDateTime,java.time.OffsetDateTime)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DataLakeServiceAsyncClient#getUserDelegationKey(OffsetDateTime, OffsetDateTime)\"></xref> for more information\n on how to get a user delegation key."
    name: "userDelegationKey"
    type: "<xref href=\"com.azure.storage.file.datalake.models.UserDelegationKey?alt=com.azure.storage.file.datalake.models.UserDelegationKey&text=UserDelegationKey\" data-throw-if-not-resolved=\"False\" />"
  - description: "The account name."
    name: "accountName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional context that is passed through the code when generating a SAS."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public String generateUserDelegationSas(DataLakeServiceSasSignatureValues dataLakeServiceSasSignatureValues, UserDelegationKey userDelegationKey, String accountName, Context context)"
  desc: "Generates a user delegation SAS for the file system using the specified <xref uid=\"com.azure.storage.file.datalake.sas.DataLakeServiceSasSignatureValues\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DataLakeServiceSasSignatureValues\"></xref>.\n\nSee <xref uid=\"com.azure.storage.file.datalake.sas.DataLakeServiceSasSignatureValues\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DataLakeServiceSasSignatureValues\"></xref> for more information on how to construct a user delegation SAS.\n\n**Code Samples**\n\n```java\nOffsetDateTime myExpiryTime = OffsetDateTime.now().plusDays(1);\n FileSystemSasPermission myPermission = new FileSystemSasPermission().setReadPermission(true);\n\n DataLakeServiceSasSignatureValues myValues = new DataLakeServiceSasSignatureValues(expiryTime, permission)\n     .setStartTime(OffsetDateTime.now());\n\n client.generateUserDelegationSas(values, userDelegationKey, accountName, new Context(\"key\", \"value\"));\n```"
  returns:
    description: "A <code>String</code> representing the SAS query parameters."
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.getAccessPolicy()"
  fullName: "com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.getAccessPolicy()"
  name: "getAccessPolicy()"
  nameWithType: "DataLakeFileSystemAsyncClient.getAccessPolicy()"
  summary: "Returns the file system's permissions."
  syntax: "public Mono<FileSystemAccessPolicies> getAccessPolicy()"
  desc: "Returns the file system's permissions. The permissions indicate whether file system's paths may be accessed publicly. For more information, see the [Azure Docs][].\n\n**Code Samples**\n\n```java\nclient.getAccessPolicy().subscribe(response -> {\n     System.out.printf(\"Data Lake Access Type: %s%n\", response.getDataLakeAccessType());\n\n     for (DataLakeSignedIdentifier identifier : response.getIdentifiers()) {\n         System.out.printf(\"Identifier Name: %s, Permissions %s%n\",\n             identifier.getId(),\n             identifier.getAccessPolicy().getPermissions());\n     }\n });\n```\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/get-container-acl"
  returns:
    description: "A reactive response containing the file system access policy."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.file.datalake.models.FileSystemAccessPolicies?alt=com.azure.storage.file.datalake.models.FileSystemAccessPolicies&text=FileSystemAccessPolicies\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.getAccessPolicyWithResponse(java.lang.String)"
  fullName: "com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.getAccessPolicyWithResponse(String leaseId)"
  name: "getAccessPolicyWithResponse(String leaseId)"
  nameWithType: "DataLakeFileSystemAsyncClient.getAccessPolicyWithResponse(String leaseId)"
  summary: "Returns the file system's permissions."
  parameters:
  - description: "The lease ID the active lease on the file system must match."
    name: "leaseId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<FileSystemAccessPolicies>> getAccessPolicyWithResponse(String leaseId)"
  desc: "Returns the file system's permissions. The permissions indicate whether file system's paths may be accessed publicly. For more information, see the [Azure Docs][].\n\n**Code Samples**\n\n```java\nclient.getAccessPolicyWithResponse(leaseId).subscribe(response -> {\n     System.out.printf(\"Data Lake Access Type: %s%n\", response.getValue().getDataLakeAccessType());\n\n     for (DataLakeSignedIdentifier identifier : response.getValue().getIdentifiers()) {\n         System.out.printf(\"Identifier Name: %s, Permissions %s%n\",\n             identifier.getId(),\n             identifier.getAccessPolicy().getPermissions());\n     }\n });\n```\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/get-container-acl"
  returns:
    description: "A reactive response containing the file system access policy."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.file.datalake.models.FileSystemAccessPolicies?alt=com.azure.storage.file.datalake.models.FileSystemAccessPolicies&text=FileSystemAccessPolicies\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.getAccountName()"
  fullName: "com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.getAccountName()"
  name: "getAccountName()"
  nameWithType: "DataLakeFileSystemAsyncClient.getAccountName()"
  summary: "Get associated account name."
  syntax: "public String getAccountName()"
  desc: "Get associated account name."
  returns:
    description: "account name associated with this storage resource."
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.getAccountUrl()"
  fullName: "com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.getAccountUrl()"
  name: "getAccountUrl()"
  nameWithType: "DataLakeFileSystemAsyncClient.getAccountUrl()"
  summary: "Get the url of the storage account."
  syntax: "public String getAccountUrl()"
  desc: "Get the url of the storage account."
  returns:
    description: "the URL of the storage account"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.getDirectoryAsyncClient(java.lang.String)"
  fullName: "com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.getDirectoryAsyncClient(String directoryName)"
  name: "getDirectoryAsyncClient(String directoryName)"
  nameWithType: "DataLakeFileSystemAsyncClient.getDirectoryAsyncClient(String directoryName)"
  summary: "Initializes a new Data<wbr>Lake<wbr>Directory<wbr>Async<wbr>Client object by concatenating directory<wbr>Name to the end of Data<wbr>Lake<wbr>File<wbr>System<wbr>Async<wbr>Client's URL."
  parameters:
  - description: "A <code>String</code> representing the name of the directory. If the path name contains special\n characters, pass in the url encoded version of the path name."
    name: "directoryName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public DataLakeDirectoryAsyncClient getDirectoryAsyncClient(String directoryName)"
  desc: "Initializes a new DataLakeDirectoryAsyncClient object by concatenating directoryName to the end of DataLakeFileSystemAsyncClient's URL. The new DataLakeDirectoryAsyncClient uses the same request policy pipeline as the DataLakeFileSystemAsyncClient.\n\n**Code Samples**\n\n```java\nDataLakeDirectoryAsyncClient dataLakeDirectoryAsyncClient = client.getDirectoryAsyncClient(directoryName);\n```"
  returns:
    description: "A new <xref uid=\"com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DataLakeDirectoryAsyncClient\"></xref> object which references the directory with the specified name\n in this file system."
    type: "<xref href=\"com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient?alt=com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient&text=DataLakeDirectoryAsyncClient\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.getFileAsyncClient(java.lang.String)"
  fullName: "com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.getFileAsyncClient(String fileName)"
  name: "getFileAsyncClient(String fileName)"
  nameWithType: "DataLakeFileSystemAsyncClient.getFileAsyncClient(String fileName)"
  summary: "Initializes a new Data<wbr>Lake<wbr>File<wbr>Async<wbr>Client object by concatenating file<wbr>Name to the end of Data<wbr>Lake<wbr>File<wbr>System<wbr>Async<wbr>Client's URL."
  parameters:
  - description: "A <code>String</code> representing the name of the file. If the path name contains special characters,\n pass in the url encoded version of the path name."
    name: "fileName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public DataLakeFileAsyncClient getFileAsyncClient(String fileName)"
  desc: "Initializes a new DataLakeFileAsyncClient object by concatenating fileName to the end of DataLakeFileSystemAsyncClient's URL. The new DataLakeFileAsyncClient uses the same request policy pipeline as the DataLakeFileSystemAsyncClient.\n\n**Code Samples**\n\n```java\nDataLakeFileAsyncClient dataLakeFileAsyncClient = client.getFileAsyncClient(fileName);\n```"
  returns:
    description: "A new <xref uid=\"com.azure.storage.file.datalake.DataLakeFileAsyncClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DataLakeFileAsyncClient\"></xref> object which references the file with the specified name in this\n file system."
    type: "<xref href=\"com.azure.storage.file.datalake.DataLakeFileAsyncClient?alt=com.azure.storage.file.datalake.DataLakeFileAsyncClient&text=DataLakeFileAsyncClient\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.getFileSystemName()"
  fullName: "com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.getFileSystemName()"
  name: "getFileSystemName()"
  nameWithType: "DataLakeFileSystemAsyncClient.getFileSystemName()"
  summary: "Get the file system name."
  syntax: "public String getFileSystemName()"
  desc: "Get the file system name.\n\n**Code Samples**\n\n```java\nString fileSystemName = client.getFileSystemName();\n System.out.println(\"The name of the file system is \" + fileSystemName);\n```"
  returns:
    description: "The name of file system."
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.getFileSystemUrl()"
  fullName: "com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.getFileSystemUrl()"
  name: "getFileSystemUrl()"
  nameWithType: "DataLakeFileSystemAsyncClient.getFileSystemUrl()"
  summary: "Gets the URL of the file system represented by this client."
  syntax: "public String getFileSystemUrl()"
  desc: "Gets the URL of the file system represented by this client."
  returns:
    description: "the URL."
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.getHttpPipeline()"
  fullName: "com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.getHttpPipeline()"
  name: "getHttpPipeline()"
  nameWithType: "DataLakeFileSystemAsyncClient.getHttpPipeline()"
  summary: "Gets the <xref uid=\"com.azure.core.http.HttpPipeline\" data-throw-if-not-resolved=\"false\" data-raw-source=\"HttpPipeline\"></xref> powering this client."
  syntax: "public HttpPipeline getHttpPipeline()"
  desc: "Gets the <xref uid=\"com.azure.core.http.HttpPipeline\" data-throw-if-not-resolved=\"false\" data-raw-source=\"HttpPipeline\"></xref> powering this client."
  returns:
    description: "The pipeline."
    type: "<xref href=\"com.azure.core.http.HttpPipeline?alt=com.azure.core.http.HttpPipeline&text=HttpPipeline\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.getProperties()"
  fullName: "com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.getProperties()"
  name: "getProperties()"
  nameWithType: "DataLakeFileSystemAsyncClient.getProperties()"
  summary: "Returns the file system's metadata and system properties."
  syntax: "public Mono<FileSystemProperties> getProperties()"
  desc: "Returns the file system's metadata and system properties. For more information, see the [Azure Docs][].\n\n**Code Samples**\n\n```java\nclient.getProperties().subscribe(response ->\n     System.out.printf(\"Public Access Type: %s, Legal Hold? %b, Immutable? %b%n\",\n         response.getDataLakePublicAccess(),\n         response.hasLegalHold(),\n         response.hasImmutabilityPolicy()));\n```\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/get-container-metadata"
  returns:
    description: "A <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> containing a <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> whose <xref uid=\"com.azure.core.http.rest.Response.getValue*\" data-throw-if-not-resolved=\"false\" data-raw-source=\"value\"></xref> containing the\n file system properties."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.file.datalake.models.FileSystemProperties?alt=com.azure.storage.file.datalake.models.FileSystemProperties&text=FileSystemProperties\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.getPropertiesWithResponse(java.lang.String)"
  fullName: "com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.getPropertiesWithResponse(String leaseId)"
  name: "getPropertiesWithResponse(String leaseId)"
  nameWithType: "DataLakeFileSystemAsyncClient.getPropertiesWithResponse(String leaseId)"
  summary: "Returns the file system's metadata and system properties."
  parameters:
  - description: "The lease ID the active lease on the file system must match."
    name: "leaseId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<FileSystemProperties>> getPropertiesWithResponse(String leaseId)"
  desc: "Returns the file system's metadata and system properties. For more information, see the [Azure Docs][].\n\n**Code Samples**\n\n```java\nclient.getPropertiesWithResponse(leaseId).subscribe(response ->\n     System.out.printf(\"Public Access Type: %s, Legal Hold? %b, Immutable? %b%n\",\n         response.getValue().getDataLakePublicAccess(),\n         response.getValue().hasLegalHold(),\n         response.getValue().hasImmutabilityPolicy()));\n```\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/get-container-metadata"
  returns:
    description: "A reactive response containing the file system properties."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.file.datalake.models.FileSystemProperties?alt=com.azure.storage.file.datalake.models.FileSystemProperties&text=FileSystemProperties\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.getServiceVersion()"
  fullName: "com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.getServiceVersion()"
  name: "getServiceVersion()"
  nameWithType: "DataLakeFileSystemAsyncClient.getServiceVersion()"
  summary: "Gets the service version the client is using."
  syntax: "public DataLakeServiceVersion getServiceVersion()"
  desc: "Gets the service version the client is using."
  returns:
    description: "the service version the client is using."
    type: "<xref href=\"com.azure.storage.file.datalake.DataLakeServiceVersion?alt=com.azure.storage.file.datalake.DataLakeServiceVersion&text=DataLakeServiceVersion\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.listDeletedPaths()"
  fullName: "com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.listDeletedPaths()"
  name: "listDeletedPaths()"
  nameWithType: "DataLakeFileSystemAsyncClient.listDeletedPaths()"
  summary: "Returns a reactive Publisher emitting all the files/directories in this filesystem that have been recently soft deleted lazily as needed."
  syntax: "public PagedFlux<PathDeletedItem> listDeletedPaths()"
  desc: "Returns a reactive Publisher emitting all the files/directories in this filesystem that have been recently soft deleted lazily as needed. For more information, see the [Azure Docs][].\n\n**Code Samples**\n\n```java\nclient.listDeletedPaths().subscribe(path -> System.out.printf(\"Name: %s%n\", path.getPath()));\n```\n\n\n[Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/list-blobs"
  returns:
    description: "A reactive response emitting the list of files/directories."
    type: "<xref href=\"com.azure.core.http.rest.PagedFlux?alt=com.azure.core.http.rest.PagedFlux&text=PagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.file.datalake.models.PathDeletedItem?alt=com.azure.storage.file.datalake.models.PathDeletedItem&text=PathDeletedItem\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.listDeletedPaths(java.lang.String)"
  fullName: "com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.listDeletedPaths(String prefix)"
  name: "listDeletedPaths(String prefix)"
  nameWithType: "DataLakeFileSystemAsyncClient.listDeletedPaths(String prefix)"
  summary: "Returns a reactive Publisher emitting all the files/directories in this account lazily as needed."
  parameters:
  - description: "Specifies the path to filter the results to."
    name: "prefix"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PagedFlux<PathDeletedItem> listDeletedPaths(String prefix)"
  desc: "Returns a reactive Publisher emitting all the files/directories in this account lazily as needed. For more information, see the [Azure Docs][]. Note: You can specify the page size by using byPaged methods that accept an integer such as <xref uid=\"com.azure.core.http.rest.PagedFlux.byPage*\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedFlux#byPage(int)\"></xref>. Please refer to the REST docs above for limitations on page size\n\n**Code Samples**\n\n```java\nint pageSize = 10;\n client.listDeletedPaths(\"PathNamePrefixToMatch\")\n     .byPage(pageSize)\n     .subscribe(page ->\n         page.getValue().forEach(path ->\n             System.out.printf(\"Name: %s%n\", path.getPath())));\n```\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/list-blobs"
  returns:
    description: "A reactive response emitting the list of files/directories."
    type: "<xref href=\"com.azure.core.http.rest.PagedFlux?alt=com.azure.core.http.rest.PagedFlux&text=PagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.file.datalake.models.PathDeletedItem?alt=com.azure.storage.file.datalake.models.PathDeletedItem&text=PathDeletedItem\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.listPaths()"
  fullName: "com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.listPaths()"
  name: "listPaths()"
  nameWithType: "DataLakeFileSystemAsyncClient.listPaths()"
  summary: "Returns a reactive Publisher emitting all the files/directories in this account lazily as needed."
  syntax: "public PagedFlux<PathItem> listPaths()"
  desc: "Returns a reactive Publisher emitting all the files/directories in this account lazily as needed. For more information, see the [Azure Docs][].\n\n**Code Samples**\n\n```java\nclient.listPaths().subscribe(path -> System.out.printf(\"Name: %s%n\", path.getName()));\n```\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/datalakestoragegen2/filesystem/list"
  returns:
    description: "A reactive response emitting the list of files/directories."
    type: "<xref href=\"com.azure.core.http.rest.PagedFlux?alt=com.azure.core.http.rest.PagedFlux&text=PagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.file.datalake.models.PathItem?alt=com.azure.storage.file.datalake.models.PathItem&text=PathItem\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.listPaths(com.azure.storage.file.datalake.models.ListPathsOptions)"
  fullName: "com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.listPaths(ListPathsOptions options)"
  name: "listPaths(ListPathsOptions options)"
  nameWithType: "DataLakeFileSystemAsyncClient.listPaths(ListPathsOptions options)"
  summary: "Returns a reactive Publisher emitting all the files/directories in this account lazily as needed."
  parameters:
  - description: "A <xref uid=\"com.azure.storage.file.datalake.models.ListPathsOptions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ListPathsOptions\"></xref> which specifies what data should be returned by the service."
    name: "options"
    type: "<xref href=\"com.azure.storage.file.datalake.models.ListPathsOptions?alt=com.azure.storage.file.datalake.models.ListPathsOptions&text=ListPathsOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PagedFlux<PathItem> listPaths(ListPathsOptions options)"
  desc: "Returns a reactive Publisher emitting all the files/directories in this account lazily as needed. For more information, see the [Azure Docs][].\n\n**Code Samples**\n\n```java\nListPathsOptions options = new ListPathsOptions()\n     .setPath(\"PathNamePrefixToMatch\")\n     .setMaxResults(10);\n\n client.listPaths(options).subscribe(path -> System.out.printf(\"Name: %s%n\", path.getName()));\n```\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/datalakestoragegen2/filesystem/list"
  returns:
    description: "A reactive response emitting the list of files/directories."
    type: "<xref href=\"com.azure.core.http.rest.PagedFlux?alt=com.azure.core.http.rest.PagedFlux&text=PagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.file.datalake.models.PathItem?alt=com.azure.storage.file.datalake.models.PathItem&text=PathItem\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.setAccessPolicy(com.azure.storage.file.datalake.models.PublicAccessType,java.util.List<com.azure.storage.file.datalake.models.DataLakeSignedIdentifier>)"
  fullName: "com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.setAccessPolicy(PublicAccessType accessType, List<DataLakeSignedIdentifier> identifiers)"
  name: "setAccessPolicy(PublicAccessType accessType, List<DataLakeSignedIdentifier> identifiers)"
  nameWithType: "DataLakeFileSystemAsyncClient.setAccessPolicy(PublicAccessType accessType, List<DataLakeSignedIdentifier> identifiers)"
  summary: "Sets the file system's permissions."
  parameters:
  - description: "Specifies how the data in this file system is available to the public. See the\n x-ms-blob-public-access header in the Azure Docs for more information. Pass null for no public access."
    name: "accessType"
    type: "<xref href=\"com.azure.storage.file.datalake.models.PublicAccessType?alt=com.azure.storage.file.datalake.models.PublicAccessType&text=PublicAccessType\" data-throw-if-not-resolved=\"False\" />"
  - description: "A list of <xref uid=\"com.azure.storage.file.datalake.models.DataLakeSignedIdentifier\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DataLakeSignedIdentifier\"></xref> objects that specify the permissions for the file\n system.\n Please see\n <a href=\"https://docs.microsoft.com/rest/api/storageservices/establishing-a-stored-access-policy\">here</a>\n for more information. Passing null will clear all access policies."
    name: "identifiers"
    type: "<xref href=\"java.util.List?alt=java.util.List&text=List\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.file.datalake.models.DataLakeSignedIdentifier?alt=com.azure.storage.file.datalake.models.DataLakeSignedIdentifier&text=DataLakeSignedIdentifier\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public Mono<Void> setAccessPolicy(PublicAccessType accessType, List<DataLakeSignedIdentifier> identifiers)"
  desc: "Sets the file system's permissions. The permissions indicate whether paths in a file system may be accessed publicly. Note that, for each signed identifier, we will truncate the start and expiry times to the nearest second to ensure the time formatting is compatible with the service. For more information, see the [Azure Docs][].\n\n**Code Samples**\n\n```java\nDataLakeSignedIdentifier identifier = new DataLakeSignedIdentifier()\n     .setId(\"name\")\n     .setAccessPolicy(new DataLakeAccessPolicy()\n         .setStartsOn(OffsetDateTime.now())\n         .setExpiresOn(OffsetDateTime.now().plusDays(7))\n         .setPermissions(\"permissionString\"));\n\n client.setAccessPolicy(PublicAccessType.CONTAINER, Collections.singletonList(identifier)).subscribe(\n     response -> System.out.printf(\"Set access policy completed%n\"),\n     error -> System.out.printf(\"Set access policy failed: %s%n\", error));\n```\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/set-container-acl"
  returns:
    description: "A reactive response signalling completion."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.setAccessPolicyWithResponse(com.azure.storage.file.datalake.models.PublicAccessType,java.util.List<com.azure.storage.file.datalake.models.DataLakeSignedIdentifier>,com.azure.storage.file.datalake.models.DataLakeRequestConditions)"
  fullName: "com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.setAccessPolicyWithResponse(PublicAccessType accessType, List<DataLakeSignedIdentifier> identifiers, DataLakeRequestConditions requestConditions)"
  name: "setAccessPolicyWithResponse(PublicAccessType accessType, List<DataLakeSignedIdentifier> identifiers, DataLakeRequestConditions requestConditions)"
  nameWithType: "DataLakeFileSystemAsyncClient.setAccessPolicyWithResponse(PublicAccessType accessType, List<DataLakeSignedIdentifier> identifiers, DataLakeRequestConditions requestConditions)"
  summary: "Sets the file system's permissions."
  parameters:
  - description: "Specifies how the data in this file system is available to the public. See the\n x-ms-blob-public-access header in the Azure Docs for more information. Pass null for no public access."
    name: "accessType"
    type: "<xref href=\"com.azure.storage.file.datalake.models.PublicAccessType?alt=com.azure.storage.file.datalake.models.PublicAccessType&text=PublicAccessType\" data-throw-if-not-resolved=\"False\" />"
  - description: "A list of <xref uid=\"com.azure.storage.file.datalake.models.DataLakeSignedIdentifier\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DataLakeSignedIdentifier\"></xref> objects that specify the permissions for the file\n system.\n Please see\n <a href=\"https://docs.microsoft.com/rest/api/storageservices/establishing-a-stored-access-policy\">here</a>\n for more information. Passing null will clear all access policies."
    name: "identifiers"
    type: "<xref href=\"java.util.List?alt=java.util.List&text=List\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.file.datalake.models.DataLakeSignedIdentifier?alt=com.azure.storage.file.datalake.models.DataLakeSignedIdentifier&text=DataLakeSignedIdentifier\" data-throw-if-not-resolved=\"False\" />&gt;"
  - description: "<xref uid=\"com.azure.storage.file.datalake.models.DataLakeRequestConditions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DataLakeRequestConditions\"></xref>"
    name: "requestConditions"
    type: "<xref href=\"com.azure.storage.file.datalake.models.DataLakeRequestConditions?alt=com.azure.storage.file.datalake.models.DataLakeRequestConditions&text=DataLakeRequestConditions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<Void>> setAccessPolicyWithResponse(PublicAccessType accessType, List<DataLakeSignedIdentifier> identifiers, DataLakeRequestConditions requestConditions)"
  desc: "Sets the file system's permissions. The permissions indicate whether paths in a file system may be accessed publicly. Note that, for each signed identifier, we will truncate the start and expiry times to the nearest second to ensure the time formatting is compatible with the service. For more information, see the [Azure Docs][].\n\n**Code Samples**\n\n```java\nDataLakeSignedIdentifier identifier = new DataLakeSignedIdentifier()\n     .setId(\"name\")\n     .setAccessPolicy(new DataLakeAccessPolicy()\n         .setStartsOn(OffsetDateTime.now())\n         .setExpiresOn(OffsetDateTime.now().plusDays(7))\n         .setPermissions(\"permissionString\"));\n\n DataLakeRequestConditions requestConditions = new DataLakeRequestConditions()\n     .setLeaseId(leaseId)\n     .setIfUnmodifiedSince(OffsetDateTime.now().minusDays(3));\n\n client.setAccessPolicyWithResponse(PublicAccessType.CONTAINER, Collections.singletonList(identifier), requestConditions)\n     .subscribe(response ->\n         System.out.printf(\"Set access policy completed with status %d%n\", response.getStatusCode()));\n```\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/set-container-acl"
  returns:
    description: "A reactive response signalling completion."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.setMetadata(java.util.Map<java.lang.String,java.lang.String>)"
  fullName: "com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.setMetadata(Map<String,String> metadata)"
  name: "setMetadata(Map<String,String> metadata)"
  nameWithType: "DataLakeFileSystemAsyncClient.setMetadata(Map<String,String> metadata)"
  summary: "Sets the file system's metadata."
  parameters:
  - description: "Metadata to associate with the file system. If there is leading or trailing whitespace in any\n metadata key or value, it must be removed or encoded."
    name: "metadata"
    type: "<xref href=\"java.util.Map?alt=java.util.Map&text=Map\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />,<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public Mono<Void> setMetadata(Map<String,String> metadata)"
  desc: "Sets the file system's metadata. For more information, see the [Azure Docs][].\n\n**Code Samples**\n\n```java\nMap<String, String> metadata = Collections.singletonMap(\"metadata\", \"value\");\n client.setMetadata(metadata).subscribe(\n     response -> System.out.printf(\"Set metadata completed%n\"),\n     error -> System.out.printf(\"Set metadata failed: %s%n\", error));\n```\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/set-container-metadata"
  returns:
    description: "A reactive response signalling completion."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.setMetadataWithResponse(java.util.Map<java.lang.String,java.lang.String>,com.azure.storage.file.datalake.models.DataLakeRequestConditions)"
  fullName: "com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.setMetadataWithResponse(Map<String,String> metadata, DataLakeRequestConditions requestConditions)"
  name: "setMetadataWithResponse(Map<String,String> metadata, DataLakeRequestConditions requestConditions)"
  nameWithType: "DataLakeFileSystemAsyncClient.setMetadataWithResponse(Map<String,String> metadata, DataLakeRequestConditions requestConditions)"
  summary: "Sets the file system's metadata."
  parameters:
  - description: "Metadata to associate with the file system. If there is leading or trailing whitespace in any\n metadata key or value, it must be removed or encoded."
    name: "metadata"
    type: "<xref href=\"java.util.Map?alt=java.util.Map&text=Map\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />,<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />&gt;"
  - description: "<xref uid=\"com.azure.storage.file.datalake.models.DataLakeRequestConditions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DataLakeRequestConditions\"></xref>"
    name: "requestConditions"
    type: "<xref href=\"com.azure.storage.file.datalake.models.DataLakeRequestConditions?alt=com.azure.storage.file.datalake.models.DataLakeRequestConditions&text=DataLakeRequestConditions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<Void>> setMetadataWithResponse(Map<String,String> metadata, DataLakeRequestConditions requestConditions)"
  desc: "Sets the file system's metadata. For more information, see the [Azure Docs][].\n\n**Code Samples**\n\n```java\nMap<String, String> metadata = Collections.singletonMap(\"metadata\", \"value\");\n DataLakeRequestConditions requestConditions = new DataLakeRequestConditions()\n     .setLeaseId(leaseId)\n     .setIfModifiedSince(OffsetDateTime.now().minusDays(3));\n\n client.setMetadataWithResponse(metadata, requestConditions).subscribe(response ->\n     System.out.printf(\"Set metadata completed with status %d%n\", response.getStatusCode()));\n```\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/set-container-metadata"
  returns:
    description: "A <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> containing a <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> whose <xref uid=\"com.azure.core.http.rest.Response.getValue*\" data-throw-if-not-resolved=\"false\" data-raw-source=\"value\"></xref> contains signalling\n completion."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.undeletePath(java.lang.String,java.lang.String)"
  fullName: "com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.undeletePath(String deletedPath, String deletionId)"
  name: "undeletePath(String deletedPath, String deletionId)"
  nameWithType: "DataLakeFileSystemAsyncClient.undeletePath(String deletedPath, String deletionId)"
  summary: "Restores a soft deleted path in the file system."
  parameters:
  - description: "The deleted path"
    name: "deletedPath"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "deletion ID associated with the soft deleted path that uniquely identifies a resource if\n multiple have been soft deleted at this location.\n You can get soft deleted paths and their associated deletion IDs with <xref uid=\"com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.listDeletedPaths()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#listDeletedPaths()\"></xref>."
    name: "deletionId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<DataLakePathAsyncClient> undeletePath(String deletedPath, String deletionId)"
  desc: "Restores a soft deleted path in the file system. For more information see the [Azure Docs][].\n\n**Code Samples**\n\n```java\nclient.undeletePath(deletedPath, deletionId).doOnSuccess(response -> System.out.println(\"Completed undelete\"));\n```\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/datalakestoragegen2/path/delete"
  returns:
    description: "A reactive response signalling completion."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.file.datalake.DataLakePathAsyncClient?alt=com.azure.storage.file.datalake.DataLakePathAsyncClient&text=DataLakePathAsyncClient\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.undeletePathWithResponse(java.lang.String,java.lang.String)"
  fullName: "com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.undeletePathWithResponse(String deletedPath, String deletionId)"
  name: "undeletePathWithResponse(String deletedPath, String deletionId)"
  nameWithType: "DataLakeFileSystemAsyncClient.undeletePathWithResponse(String deletedPath, String deletionId)"
  summary: "Restores a soft deleted path in the file system."
  parameters:
  - description: "The deleted path"
    name: "deletedPath"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "deletion ID associated with the soft deleted path that uniquely identifies a resource if\n multiple have been soft deleted at this location.\n You can get soft deleted paths and their associated deletion IDs with <xref uid=\"com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.listDeletedPaths()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#listDeletedPaths()\"></xref>."
    name: "deletionId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<DataLakePathAsyncClient>> undeletePathWithResponse(String deletedPath, String deletionId)"
  desc: "Restores a soft deleted path in the file system. For more information see the [Azure Docs][].\n\n**Code Samples**\n\n```java\nclient.undeletePathWithResponse(deletedPath, deletionId)\n     .doOnSuccess(response -> System.out.println(\"Completed undelete\"));\n```\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/datalakestoragegen2/path/delete"
  returns:
    description: "A reactive response signalling completion."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.file.datalake.DataLakePathAsyncClient?alt=com.azure.storage.file.datalake.DataLakePathAsyncClient&text=DataLakePathAsyncClient\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
type: "class"
desc: "Client to a file system. It may only be instantiated through a <xref uid=\"com.azure.storage.file.datalake.DataLakeFileSystemClientBuilder\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DataLakeFileSystemClientBuilder\"></xref> or via the method <xref uid=\"com.azure.storage.file.datalake.DataLakeServiceAsyncClient.getFileSystemAsyncClient(java.lang.String)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DataLakeServiceAsyncClient#getFileSystemAsyncClient(String)\"></xref>. This class does not hold any state about a particular blob but is instead a convenient way of sending off appropriate requests to the resource on the service. It may also be used to construct clients for files/directories.\n\nThis client contains operations on a file system. Operations on a path are available on <xref uid=\"com.azure.storage.file.datalake.DataLakeFileAsyncClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DataLakeFileAsyncClient\"></xref> and <xref uid=\"com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DataLakeDirectoryAsyncClient\"></xref> through <xref uid=\"com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.getFileAsyncClient(java.lang.String)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#getFileAsyncClient(String)\"></xref> and <xref uid=\"com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.getDirectoryAsyncClient(java.lang.String)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#getDirectoryAsyncClient(String)\"></xref> respectively, and operations on the service are available on <xref uid=\"com.azure.storage.file.datalake.DataLakeServiceAsyncClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DataLakeServiceAsyncClient\"></xref>.\n\nPlease refer to the [ Azure Docs][Azure Docs] for more information on file systems.\n\nNote this client is an async client that returns reactive responses from Spring Reactor Core project (https://projectreactor.io/). Calling the methods in this client will **NOT** start the actual network operation, until `.subscribe()` is called on the reactive response. You can simply convert one of these responses to a <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"java.util.concurrent.CompletableFuture\"></xref> object through <xref uid=\"reactor.core.publisher.Mono.toFuture*\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono#toFuture()\"></xref>.\n\n\n[Azure Docs]: https://docs.microsoft.com/azure/storage/blobs/data-lake-storage-introduction"
metadata: {}
package: "com.azure.storage.file.datalake"
artifact: com.azure:azure-storage-file-datalake:12.11.0-beta.1
