### YamlMime:JavaType
uid: "com.azure.analytics.purview.catalog.RelationshipAsyncClient"
fullName: "com.azure.analytics.purview.catalog.RelationshipAsyncClient"
name: "RelationshipAsyncClient"
nameWithType: "RelationshipAsyncClient"
summary: "Initializes a new instance of the asynchronous Purview<wbr>Catalog<wbr>Client type."
inheritances:
- "<xref href=\"java.lang.Object?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
inheritedMembers:
- "java.lang.Object.clone()"
- "java.lang.Object.equals(java.lang.Object)"
- "java.lang.Object.finalize()"
- "java.lang.Object.getClass()"
- "java.lang.Object.hashCode()"
- "java.lang.Object.notify()"
- "java.lang.Object.notifyAll()"
- "java.lang.Object.toString()"
- "java.lang.Object.wait()"
- "java.lang.Object.wait(long)"
- "java.lang.Object.wait(long,int)"
syntax: "public final class RelationshipAsyncClient"
methods:
- uid: "com.azure.analytics.purview.catalog.RelationshipAsyncClient.createWithResponse(com.azure.core.util.BinaryData,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.analytics.purview.catalog.RelationshipAsyncClient.createWithResponse(BinaryData relationship, RequestOptions requestOptions)"
  name: "createWithResponse(BinaryData relationship, RequestOptions requestOptions)"
  nameWithType: "RelationshipAsyncClient.createWithResponse(BinaryData relationship, RequestOptions requestOptions)"
  summary: "Create a new relationship between entities."
  parameters:
  - description: "The AtlasRelationship object containing the information for the relationship to be created."
    name: "relationship"
    type: "<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<BinaryData>> createWithResponse(BinaryData relationship, RequestOptions requestOptions)"
  desc: "Create a new relationship between entities.\n\n**Request Body Schema**\n\n```java\n{\n     attributes: {\n         String: Object\n     }\n     typeName: String\n     lastModifiedTS: String\n     createTime: Float\n     createdBy: String\n     end1: {\n         guid: String\n         typeName: String\n         uniqueAttributes: {\n             String: Object\n         }\n     }\n     end2: (recursive schema, see end2 above)\n     guid: String\n     homeId: String\n     label: String\n     provenanceType: Float\n     status: String(ACTIVE/DELETED)\n     updateTime: Float\n     updatedBy: String\n     version: Float\n }\n```\n\n**Response Body Schema**\n\n```java\n{\n     attributes: {\n         String: Object\n     }\n     typeName: String\n     lastModifiedTS: String\n     createTime: Float\n     createdBy: String\n     end1: {\n         guid: String\n         typeName: String\n         uniqueAttributes: {\n             String: Object\n         }\n     }\n     end2: (recursive schema, see end2 above)\n     guid: String\n     homeId: String\n     label: String\n     provenanceType: Float\n     status: String(ACTIVE/DELETED)\n     updateTime: Float\n     updatedBy: String\n     version: Float\n }\n```"
  returns:
    description: "atlasRelationship along with <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> on successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.analytics.purview.catalog.RelationshipAsyncClient.deleteWithResponse(java.lang.String,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.analytics.purview.catalog.RelationshipAsyncClient.deleteWithResponse(String guid, RequestOptions requestOptions)"
  name: "deleteWithResponse(String guid, RequestOptions requestOptions)"
  nameWithType: "RelationshipAsyncClient.deleteWithResponse(String guid, RequestOptions requestOptions)"
  summary: "Delete a relationship between entities by its GUID."
  parameters:
  - description: "The globally unique identifier of the relationship."
    name: "guid"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<Void>> deleteWithResponse(String guid, RequestOptions requestOptions)"
  desc: "Delete a relationship between entities by its GUID."
  returns:
    description: "the <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> on successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.analytics.purview.catalog.RelationshipAsyncClient.getWithResponse(java.lang.String,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.analytics.purview.catalog.RelationshipAsyncClient.getWithResponse(String guid, RequestOptions requestOptions)"
  name: "getWithResponse(String guid, RequestOptions requestOptions)"
  nameWithType: "RelationshipAsyncClient.getWithResponse(String guid, RequestOptions requestOptions)"
  summary: "Get relationship information between entities by its GUID."
  parameters:
  - description: "The globally unique identifier of the relationship."
    name: "guid"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<BinaryData>> getWithResponse(String guid, RequestOptions requestOptions)"
  desc: "Get relationship information between entities by its GUID.\n\n**Query Parameters**\n\n    | ------------ | ------- | -------- | --------------------------------------------- |\n    | Name         | Type    | Required | Description                                   |\n    | extendedInfo | Boolean | No       | Limits whether includes extended information. |\n\n**Response Body Schema**\n\n```java\n{\n     referredEntities: {\n         String: {\n             attributes: {\n                 String: Object\n             }\n             typeName: String\n             lastModifiedTS: String\n             classificationNames: [\n                 String\n             ]\n             classifications: [\n                 {\n                     attributes: {\n                         String: Object\n                     }\n                     typeName: String\n                     lastModifiedTS: String\n                     entityGuid: String\n                     entityStatus: String(ACTIVE/DELETED)\n                     removePropagationsOnEntityDelete: Boolean\n                     validityPeriods: [\n                         {\n                             endTime: String\n                             startTime: String\n                             timeZone: String\n                         }\n                     ]\n                     source: String\n                     sourceDetails: {\n                         String: Object\n                     }\n                 }\n             ]\n             displayText: String\n             guid: String\n             isIncomplete: Boolean\n             labels: [\n                 String\n             ]\n             meaningNames: [\n                 String\n             ]\n             meanings: [\n                 {\n                     confidence: Integer\n                     createdBy: String\n                     description: String\n                     displayText: String\n                     expression: String\n                     relationGuid: String\n                     source: String\n                     status: String(DISCOVERED/PROPOSED/IMPORTED/VALIDATED/DEPRECATED/OBSOLETE/OTHER)\n                     steward: String\n                     termGuid: String\n                 }\n             ]\n             status: String(ACTIVE/DELETED)\n         }\n     }\n     relationship: {\n         attributes: {\n             String: Object\n         }\n         typeName: String\n         lastModifiedTS: String\n         createTime: Float\n         createdBy: String\n         end1: {\n             guid: String\n             typeName: String\n             uniqueAttributes: {\n                 String: Object\n             }\n         }\n         end2: (recursive schema, see end2 above)\n         guid: String\n         homeId: String\n         label: String\n         provenanceType: Float\n         status: String(ACTIVE/DELETED)\n         updateTime: Float\n         updatedBy: String\n         version: Float\n     }\n }\n```"
  returns:
    description: "relationship information between entities by its GUID along with <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> on successful\n     completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.analytics.purview.catalog.RelationshipAsyncClient.updateWithResponse(com.azure.core.util.BinaryData,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.analytics.purview.catalog.RelationshipAsyncClient.updateWithResponse(BinaryData relationship, RequestOptions requestOptions)"
  name: "updateWithResponse(BinaryData relationship, RequestOptions requestOptions)"
  nameWithType: "RelationshipAsyncClient.updateWithResponse(BinaryData relationship, RequestOptions requestOptions)"
  summary: "Update an existing relationship between entities."
  parameters:
  - description: "The AtlasRelationship object containing the information for the relationship to be created."
    name: "relationship"
    type: "<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<BinaryData>> updateWithResponse(BinaryData relationship, RequestOptions requestOptions)"
  desc: "Update an existing relationship between entities.\n\n**Request Body Schema**\n\n```java\n{\n     attributes: {\n         String: Object\n     }\n     typeName: String\n     lastModifiedTS: String\n     createTime: Float\n     createdBy: String\n     end1: {\n         guid: String\n         typeName: String\n         uniqueAttributes: {\n             String: Object\n         }\n     }\n     end2: (recursive schema, see end2 above)\n     guid: String\n     homeId: String\n     label: String\n     provenanceType: Float\n     status: String(ACTIVE/DELETED)\n     updateTime: Float\n     updatedBy: String\n     version: Float\n }\n```\n\n**Response Body Schema**\n\n```java\n{\n     attributes: {\n         String: Object\n     }\n     typeName: String\n     lastModifiedTS: String\n     createTime: Float\n     createdBy: String\n     end1: {\n         guid: String\n         typeName: String\n         uniqueAttributes: {\n             String: Object\n         }\n     }\n     end2: (recursive schema, see end2 above)\n     guid: String\n     homeId: String\n     label: String\n     provenanceType: Float\n     status: String(ACTIVE/DELETED)\n     updateTime: Float\n     updatedBy: String\n     version: Float\n }\n```"
  returns:
    description: "atlasRelationship along with <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> on successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
type: "class"
desc: "Initializes a new instance of the asynchronous PurviewCatalogClient type."
metadata: {}
package: "com.azure.analytics.purview.catalog"
artifact: com.azure:azure-analytics-purview-catalog:1.0.0-beta.4
