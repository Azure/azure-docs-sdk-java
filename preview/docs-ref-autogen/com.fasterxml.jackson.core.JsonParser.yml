### YamlMime:ManagedReference
items:
- uid: com.fasterxml.jackson.core.JsonParser
  id: JsonParser
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core
  children:
  - com.fasterxml.jackson.core.JsonParser.<T>readValueAs(com.fasterxml.jackson.core.type.TypeReference<?>)
  - com.fasterxml.jackson.core.JsonParser.<T>readValueAs(java.lang.Class<T>)
  - com.fasterxml.jackson.core.JsonParser.<T>readValueAsTree()
  - com.fasterxml.jackson.core.JsonParser.<T>readValuesAs(com.fasterxml.jackson.core.type.TypeReference<T>)
  - com.fasterxml.jackson.core.JsonParser.<T>readValuesAs(java.lang.Class<T>)
  - com.fasterxml.jackson.core.JsonParser.Feature
  - com.fasterxml.jackson.core.JsonParser.JsonParser()
  - com.fasterxml.jackson.core.JsonParser.JsonParser(int)
  - com.fasterxml.jackson.core.JsonParser.NumberType
  - com.fasterxml.jackson.core.JsonParser._codec()
  - com.fasterxml.jackson.core.JsonParser._constructError(java.lang.String)
  - com.fasterxml.jackson.core.JsonParser._features
  - com.fasterxml.jackson.core.JsonParser._reportUnsupportedOperation()
  - com.fasterxml.jackson.core.JsonParser._requestPayload
  - com.fasterxml.jackson.core.JsonParser.canParseAsync()
  - com.fasterxml.jackson.core.JsonParser.canReadObjectId()
  - com.fasterxml.jackson.core.JsonParser.canReadTypeId()
  - com.fasterxml.jackson.core.JsonParser.canUseSchema(com.fasterxml.jackson.core.FormatSchema)
  - com.fasterxml.jackson.core.JsonParser.clearCurrentToken()
  - com.fasterxml.jackson.core.JsonParser.close()
  - com.fasterxml.jackson.core.JsonParser.configure(com.fasterxml.jackson.core.JsonParser.Feature,boolean)
  - com.fasterxml.jackson.core.JsonParser.currentName()
  - com.fasterxml.jackson.core.JsonParser.currentToken()
  - com.fasterxml.jackson.core.JsonParser.currentTokenId()
  - com.fasterxml.jackson.core.JsonParser.disable(com.fasterxml.jackson.core.JsonParser.Feature)
  - com.fasterxml.jackson.core.JsonParser.enable(com.fasterxml.jackson.core.JsonParser.Feature)
  - com.fasterxml.jackson.core.JsonParser.finishToken()
  - com.fasterxml.jackson.core.JsonParser.getBigIntegerValue()
  - com.fasterxml.jackson.core.JsonParser.getBinaryValue()
  - com.fasterxml.jackson.core.JsonParser.getBinaryValue(com.fasterxml.jackson.core.Base64Variant)
  - com.fasterxml.jackson.core.JsonParser.getBooleanValue()
  - com.fasterxml.jackson.core.JsonParser.getByteValue()
  - com.fasterxml.jackson.core.JsonParser.getCodec()
  - com.fasterxml.jackson.core.JsonParser.getCurrentLocation()
  - com.fasterxml.jackson.core.JsonParser.getCurrentName()
  - com.fasterxml.jackson.core.JsonParser.getCurrentToken()
  - com.fasterxml.jackson.core.JsonParser.getCurrentTokenId()
  - com.fasterxml.jackson.core.JsonParser.getCurrentValue()
  - com.fasterxml.jackson.core.JsonParser.getDecimalValue()
  - com.fasterxml.jackson.core.JsonParser.getDoubleValue()
  - com.fasterxml.jackson.core.JsonParser.getEmbeddedObject()
  - com.fasterxml.jackson.core.JsonParser.getFeatureMask()
  - com.fasterxml.jackson.core.JsonParser.getFloatValue()
  - com.fasterxml.jackson.core.JsonParser.getFormatFeatures()
  - com.fasterxml.jackson.core.JsonParser.getInputSource()
  - com.fasterxml.jackson.core.JsonParser.getIntValue()
  - com.fasterxml.jackson.core.JsonParser.getLastClearedToken()
  - com.fasterxml.jackson.core.JsonParser.getLongValue()
  - com.fasterxml.jackson.core.JsonParser.getNonBlockingInputFeeder()
  - com.fasterxml.jackson.core.JsonParser.getNumberType()
  - com.fasterxml.jackson.core.JsonParser.getNumberValue()
  - com.fasterxml.jackson.core.JsonParser.getObjectId()
  - com.fasterxml.jackson.core.JsonParser.getParsingContext()
  - com.fasterxml.jackson.core.JsonParser.getSchema()
  - com.fasterxml.jackson.core.JsonParser.getShortValue()
  - com.fasterxml.jackson.core.JsonParser.getText()
  - com.fasterxml.jackson.core.JsonParser.getText(java.io.Writer)
  - com.fasterxml.jackson.core.JsonParser.getTextCharacters()
  - com.fasterxml.jackson.core.JsonParser.getTextLength()
  - com.fasterxml.jackson.core.JsonParser.getTextOffset()
  - com.fasterxml.jackson.core.JsonParser.getTokenLocation()
  - com.fasterxml.jackson.core.JsonParser.getTypeId()
  - com.fasterxml.jackson.core.JsonParser.getValueAsBoolean()
  - com.fasterxml.jackson.core.JsonParser.getValueAsBoolean(boolean)
  - com.fasterxml.jackson.core.JsonParser.getValueAsDouble()
  - com.fasterxml.jackson.core.JsonParser.getValueAsDouble(double)
  - com.fasterxml.jackson.core.JsonParser.getValueAsInt()
  - com.fasterxml.jackson.core.JsonParser.getValueAsInt(int)
  - com.fasterxml.jackson.core.JsonParser.getValueAsLong()
  - com.fasterxml.jackson.core.JsonParser.getValueAsLong(long)
  - com.fasterxml.jackson.core.JsonParser.getValueAsString()
  - com.fasterxml.jackson.core.JsonParser.getValueAsString(java.lang.String)
  - com.fasterxml.jackson.core.JsonParser.hasCurrentToken()
  - com.fasterxml.jackson.core.JsonParser.hasTextCharacters()
  - com.fasterxml.jackson.core.JsonParser.hasToken(com.fasterxml.jackson.core.JsonToken)
  - com.fasterxml.jackson.core.JsonParser.hasTokenId(int)
  - com.fasterxml.jackson.core.JsonParser.isClosed()
  - com.fasterxml.jackson.core.JsonParser.isEnabled(com.fasterxml.jackson.core.JsonParser.Feature)
  - com.fasterxml.jackson.core.JsonParser.isEnabled(com.fasterxml.jackson.core.StreamReadFeature)
  - com.fasterxml.jackson.core.JsonParser.isExpectedStartArrayToken()
  - com.fasterxml.jackson.core.JsonParser.isExpectedStartObjectToken()
  - com.fasterxml.jackson.core.JsonParser.isNaN()
  - com.fasterxml.jackson.core.JsonParser.nextBooleanValue()
  - com.fasterxml.jackson.core.JsonParser.nextFieldName()
  - com.fasterxml.jackson.core.JsonParser.nextFieldName(com.fasterxml.jackson.core.SerializableString)
  - com.fasterxml.jackson.core.JsonParser.nextIntValue(int)
  - com.fasterxml.jackson.core.JsonParser.nextLongValue(long)
  - com.fasterxml.jackson.core.JsonParser.nextTextValue()
  - com.fasterxml.jackson.core.JsonParser.nextToken()
  - com.fasterxml.jackson.core.JsonParser.nextValue()
  - com.fasterxml.jackson.core.JsonParser.overrideCurrentName(java.lang.String)
  - com.fasterxml.jackson.core.JsonParser.overrideFormatFeatures(int,int)
  - com.fasterxml.jackson.core.JsonParser.overrideStdFeatures(int,int)
  - com.fasterxml.jackson.core.JsonParser.readBinaryValue(com.fasterxml.jackson.core.Base64Variant,java.io.OutputStream)
  - com.fasterxml.jackson.core.JsonParser.readBinaryValue(java.io.OutputStream)
  - com.fasterxml.jackson.core.JsonParser.releaseBuffered(java.io.OutputStream)
  - com.fasterxml.jackson.core.JsonParser.releaseBuffered(java.io.Writer)
  - com.fasterxml.jackson.core.JsonParser.requiresCustomCodec()
  - com.fasterxml.jackson.core.JsonParser.setCodec(com.fasterxml.jackson.core.ObjectCodec)
  - com.fasterxml.jackson.core.JsonParser.setCurrentValue(java.lang.Object)
  - com.fasterxml.jackson.core.JsonParser.setFeatureMask(int)
  - com.fasterxml.jackson.core.JsonParser.setRequestPayloadOnError(byte[],java.lang.String)
  - com.fasterxml.jackson.core.JsonParser.setRequestPayloadOnError(com.fasterxml.jackson.core.util.RequestPayload)
  - com.fasterxml.jackson.core.JsonParser.setRequestPayloadOnError(java.lang.String)
  - com.fasterxml.jackson.core.JsonParser.setSchema(com.fasterxml.jackson.core.FormatSchema)
  - com.fasterxml.jackson.core.JsonParser.skipChildren()
  - com.fasterxml.jackson.core.JsonParser.version()
  langs:
  - java
  name: JsonParser
  nameWithType: JsonParser
  fullName: com.fasterxml.jackson.core.JsonParser
  type: Class
  package: com.fasterxml.jackson.core
  summary: Base class that defines public API for reading JSON content. Instances are created using factory methods of a <xref uid="com.fasterxml.jackson.core.JsonFactory" data-throw-if-not-resolved="false">JsonFactory</xref> instance.
  syntax:
    content: public abstract class JsonParser implements Closeable, Versioned
  inheritance:
  - java.lang.Object
  implements:
  - java.io.Closeable
  - com.fasterxml.jackson.core.Versioned
  inheritedMembers:
  - java.lang.Object.clone()
  - java.lang.Object.equals(java.lang.Object)
  - java.lang.Object.finalize()
  - java.lang.Object.getClass()
  - java.lang.Object.hashCode()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.toString()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
- uid: com.fasterxml.jackson.core.JsonParser.<T>readValueAs(com.fasterxml.jackson.core.type.TypeReference<?>)
  id: <T>readValueAs(com.fasterxml.jackson.core.type.TypeReference<?>)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.JsonParser
  langs:
  - java
  name: <T>readValueAs(TypeReference<?> valueTypeRef)
  nameWithType: JsonParser.<T>readValueAs(TypeReference<?> valueTypeRef)
  fullName: com.fasterxml.jackson.core.JsonParser.<T>readValueAs(TypeReference<?> valueTypeRef)
  overload: com.fasterxml.jackson.core.JsonParser.readValueAs*
  type: Method
  package: com.fasterxml.jackson.core
  summary: >-
    Method to deserialize JSON content into a Java type, reference to which is passed as argument. Type is passed using so-called "super type token" and specifically needs to be used if the root type is a parameterized (generic) container type. **Note**: method can only be called if the parser has an object codec assigned; this is true for parsers constructed by `MappingJsonFactory` (defined in 'jackson-databind' bundle) but not for <xref uid="com.fasterxml.jackson.core.JsonFactory" data-throw-if-not-resolved="false">JsonFactory</xref> (unless its `setCodec` method has been explicitly called).


    This method may advance the event stream, for structured types the current token will be the closing end marker (END\_ARRAY, END\_OBJECT) of the bound structure. For non-structured Json types (and for <xref uid="com.fasterxml.jackson.core.JsonToken.VALUE_EMBEDDED_OBJECT" data-throw-if-not-resolved="false">JsonToken#VALUE_EMBEDDED_OBJECT</xref>) stream is not advanced.
  syntax:
    content: public T <T>readValueAs(TypeReference<?> valueTypeRef)
    parameters:
    - id: valueTypeRef
      type: com.fasterxml.jackson.core.type.TypeReference<?>
    return:
      type: T
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.JsonParser.<T>readValueAs(java.lang.Class<T>)
  id: <T>readValueAs(java.lang.Class<T>)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.JsonParser
  langs:
  - java
  name: <T>readValueAs(Class<T> valueType)
  nameWithType: JsonParser.<T>readValueAs(Class<T> valueType)
  fullName: com.fasterxml.jackson.core.JsonParser.<T>readValueAs(Class<T> valueType)
  overload: com.fasterxml.jackson.core.JsonParser.readValueAs*
  type: Method
  package: com.fasterxml.jackson.core
  summary: >-
    Method to deserialize JSON content into a non-container type (it can be an array type, however): typically a bean, array or a wrapper type (like <xref uid="java.lang.Boolean" data-throw-if-not-resolved="false">java.lang.Boolean</xref>). **Note**: method can only be called if the parser has an object codec assigned; this is true for parsers constructed by `MappingJsonFactory` (from "jackson-databind" jar) but not for <xref uid="com.fasterxml.jackson.core.JsonFactory" data-throw-if-not-resolved="false">JsonFactory</xref> (unless its `setCodec` method has been explicitly called).


    This method may advance the event stream, for structured types the current token will be the closing end marker (END\_ARRAY, END\_OBJECT) of the bound structure. For non-structured Json types (and for <xref uid="com.fasterxml.jackson.core.JsonToken.VALUE_EMBEDDED_OBJECT" data-throw-if-not-resolved="false">JsonToken#VALUE_EMBEDDED_OBJECT</xref>) stream is not advanced.


    Note: this method should NOT be used if the result type is a container (<xref uid="java.util.Collection" data-throw-if-not-resolved="false">java.util.Collection</xref> or <xref uid="java.util.Map" data-throw-if-not-resolved="false">java.util.Map</xref>. The reason is that due to type erasure, key and value types can not be introspected when using this method.
  syntax:
    content: public T <T>readValueAs(Class<T> valueType)
    parameters:
    - id: valueType
      type: java.lang.Class<T>
    return:
      type: T
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.JsonParser.<T>readValueAsTree()
  id: <T>readValueAsTree()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.JsonParser
  langs:
  - java
  name: <T>readValueAsTree()
  nameWithType: JsonParser.<T>readValueAsTree()
  fullName: com.fasterxml.jackson.core.JsonParser.<T>readValueAsTree()
  overload: com.fasterxml.jackson.core.JsonParser.readValueAsTree*
  type: Method
  package: com.fasterxml.jackson.core
  summary: Method to deserialize JSON content into equivalent "tree model", represented by root <xref uid="com.fasterxml.jackson.core.TreeNode" data-throw-if-not-resolved="false">TreeNode</xref> of resulting model. For JSON Arrays it will an array node (with child nodes), for objects object node (with child nodes), and for other types matching leaf node type. Empty or whitespace documents are null.
  syntax:
    content: public T <T>readValueAsTree()
    return:
      type: T
      description: root of the document, or null if empty or whitespace.
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.JsonParser.<T>readValuesAs(com.fasterxml.jackson.core.type.TypeReference<T>)
  id: <T>readValuesAs(com.fasterxml.jackson.core.type.TypeReference<T>)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.JsonParser
  langs:
  - java
  name: <T>readValuesAs(TypeReference<T> valueTypeRef)
  nameWithType: JsonParser.<T>readValuesAs(TypeReference<T> valueTypeRef)
  fullName: com.fasterxml.jackson.core.JsonParser.<T>readValuesAs(TypeReference<T> valueTypeRef)
  overload: com.fasterxml.jackson.core.JsonParser.readValuesAs*
  type: Method
  package: com.fasterxml.jackson.core
  summary: Method for reading sequence of Objects from parser stream, all with same specified value type.
  syntax:
    content: public Iterator<T> <T>readValuesAs(TypeReference<T> valueTypeRef)
    parameters:
    - id: valueTypeRef
      type: com.fasterxml.jackson.core.type.TypeReference<T>
    return:
      type: java.util.Iterator<T>
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.JsonParser.<T>readValuesAs(java.lang.Class<T>)
  id: <T>readValuesAs(java.lang.Class<T>)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.JsonParser
  langs:
  - java
  name: <T>readValuesAs(Class<T> valueType)
  nameWithType: JsonParser.<T>readValuesAs(Class<T> valueType)
  fullName: com.fasterxml.jackson.core.JsonParser.<T>readValuesAs(Class<T> valueType)
  overload: com.fasterxml.jackson.core.JsonParser.readValuesAs*
  type: Method
  package: com.fasterxml.jackson.core
  summary: Method for reading sequence of Objects from parser stream, all with same specified value type.
  syntax:
    content: public Iterator<T> <T>readValuesAs(Class<T> valueType)
    parameters:
    - id: valueType
      type: java.lang.Class<T>
    return:
      type: java.util.Iterator<T>
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.JsonParser.JsonParser()
  id: JsonParser()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.JsonParser
  langs:
  - java
  name: JsonParser()
  nameWithType: JsonParser.JsonParser()
  fullName: com.fasterxml.jackson.core.JsonParser.JsonParser()
  overload: com.fasterxml.jackson.core.JsonParser.JsonParser*
  type: Constructor
  package: com.fasterxml.jackson.core
  syntax:
    content: protected JsonParser()
- uid: com.fasterxml.jackson.core.JsonParser.JsonParser(int)
  id: JsonParser(int)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.JsonParser
  langs:
  - java
  name: JsonParser(int features)
  nameWithType: JsonParser.JsonParser(int features)
  fullName: com.fasterxml.jackson.core.JsonParser.JsonParser(int features)
  overload: com.fasterxml.jackson.core.JsonParser.JsonParser*
  type: Constructor
  package: com.fasterxml.jackson.core
  syntax:
    content: protected JsonParser(int features)
    parameters:
    - id: features
      type: int
- uid: com.fasterxml.jackson.core.JsonParser._codec()
  id: _codec()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.JsonParser
  langs:
  - java
  name: _codec()
  nameWithType: JsonParser._codec()
  fullName: com.fasterxml.jackson.core.JsonParser._codec()
  overload: com.fasterxml.jackson.core.JsonParser._codec*
  type: Method
  package: com.fasterxml.jackson.core
  syntax:
    content: protected ObjectCodec _codec()
    return:
      type: com.fasterxml.jackson.core.ObjectCodec
- uid: com.fasterxml.jackson.core.JsonParser._constructError(java.lang.String)
  id: _constructError(java.lang.String)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.JsonParser
  langs:
  - java
  name: _constructError(String msg)
  nameWithType: JsonParser._constructError(String msg)
  fullName: com.fasterxml.jackson.core.JsonParser._constructError(String msg)
  overload: com.fasterxml.jackson.core.JsonParser._constructError*
  type: Method
  package: com.fasterxml.jackson.core
  summary: Helper method for constructing <xref uid="com.fasterxml.jackson.core.JsonParseException" data-throw-if-not-resolved="false">JsonParseException</xref>s based on current state of the parser
  syntax:
    content: protected JsonParseException _constructError(String msg)
    parameters:
    - id: msg
      type: java.lang.String
    return:
      type: com.fasterxml.jackson.core.JsonParseException
- uid: com.fasterxml.jackson.core.JsonParser._features
  id: _features
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.JsonParser
  langs:
  - java
  name: _features
  nameWithType: JsonParser._features
  fullName: com.fasterxml.jackson.core.JsonParser._features
  type: Field
  package: com.fasterxml.jackson.core
  summary: Bit flag composed of bits that indicate which <xref uid="com.fasterxml.jackson.core.JsonParser.Feature" data-throw-if-not-resolved="false">com.fasterxml.jackson.core.JsonParser.Feature</xref>s are enabled.
  syntax:
    content: protected int _features
    return:
      type: int
- uid: com.fasterxml.jackson.core.JsonParser._reportUnsupportedOperation()
  id: _reportUnsupportedOperation()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.JsonParser
  langs:
  - java
  name: _reportUnsupportedOperation()
  nameWithType: JsonParser._reportUnsupportedOperation()
  fullName: com.fasterxml.jackson.core.JsonParser._reportUnsupportedOperation()
  overload: com.fasterxml.jackson.core.JsonParser._reportUnsupportedOperation*
  type: Method
  package: com.fasterxml.jackson.core
  summary: Helper method to call for operations that are not supported by parser implementation.
  syntax:
    content: protected void _reportUnsupportedOperation()
- uid: com.fasterxml.jackson.core.JsonParser._requestPayload
  id: _requestPayload
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.JsonParser
  langs:
  - java
  name: _requestPayload
  nameWithType: JsonParser._requestPayload
  fullName: com.fasterxml.jackson.core.JsonParser._requestPayload
  type: Field
  package: com.fasterxml.jackson.core
  summary: Optional container that holds the request payload which will be displayed on JSON parsing error.
  syntax:
    content: protected transient RequestPayload _requestPayload
    return:
      type: com.fasterxml.jackson.core.util.RequestPayload
- uid: com.fasterxml.jackson.core.JsonParser.canParseAsync()
  id: canParseAsync()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.JsonParser
  langs:
  - java
  name: canParseAsync()
  nameWithType: JsonParser.canParseAsync()
  fullName: com.fasterxml.jackson.core.JsonParser.canParseAsync()
  overload: com.fasterxml.jackson.core.JsonParser.canParseAsync*
  type: Method
  package: com.fasterxml.jackson.core
  summary: >-
    Method that can be called to determine if this parser instance uses non-blocking ("asynchronous") input access for decoding or not. Access mode is determined by earlier calls via <xref uid="com.fasterxml.jackson.core.JsonFactory" data-throw-if-not-resolved="false">JsonFactory</xref>; it may not be changed after construction.


    If non-blocking decoding is u (@code true\}, it is possible to call <xref uid="com.fasterxml.jackson.core.JsonParser.getNonBlockingInputFeeder()" data-throw-if-not-resolved="false">#getNonBlockingInputFeeder()</xref> to obtain object to use for feeding input; otherwise (`false` returned) input is read by blocking
  syntax:
    content: public boolean canParseAsync()
    return:
      type: boolean
- uid: com.fasterxml.jackson.core.JsonParser.canReadObjectId()
  id: canReadObjectId()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.JsonParser
  langs:
  - java
  name: canReadObjectId()
  nameWithType: JsonParser.canReadObjectId()
  fullName: com.fasterxml.jackson.core.JsonParser.canReadObjectId()
  overload: com.fasterxml.jackson.core.JsonParser.canReadObjectId*
  type: Method
  package: com.fasterxml.jackson.core
  summary: >-
    Introspection method that may be called to see if the underlying data format supports some kind of Object Ids natively (many do not; for example, JSON doesn't).


    Default implementation returns true; overridden by data formats that do support native Object Ids. Caller is expected to either use a non-native notation (explicit property or such), or fail, in case it can not use native object ids.
  syntax:
    content: public boolean canReadObjectId()
    return:
      type: boolean
- uid: com.fasterxml.jackson.core.JsonParser.canReadTypeId()
  id: canReadTypeId()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.JsonParser
  langs:
  - java
  name: canReadTypeId()
  nameWithType: JsonParser.canReadTypeId()
  fullName: com.fasterxml.jackson.core.JsonParser.canReadTypeId()
  overload: com.fasterxml.jackson.core.JsonParser.canReadTypeId*
  type: Method
  package: com.fasterxml.jackson.core
  summary: >-
    Introspection method that may be called to see if the underlying data format supports some kind of Type Ids natively (many do not; for example, JSON doesn't).


    Default implementation returns true; overridden by data formats that do support native Type Ids. Caller is expected to either use a non-native notation (explicit property or such), or fail, in case it can not use native type ids.
  syntax:
    content: public boolean canReadTypeId()
    return:
      type: boolean
- uid: com.fasterxml.jackson.core.JsonParser.canUseSchema(com.fasterxml.jackson.core.FormatSchema)
  id: canUseSchema(com.fasterxml.jackson.core.FormatSchema)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.JsonParser
  langs:
  - java
  name: canUseSchema(FormatSchema schema)
  nameWithType: JsonParser.canUseSchema(FormatSchema schema)
  fullName: com.fasterxml.jackson.core.JsonParser.canUseSchema(FormatSchema schema)
  overload: com.fasterxml.jackson.core.JsonParser.canUseSchema*
  type: Method
  package: com.fasterxml.jackson.core
  summary: Method that can be used to verify that given schema can be used with this parser (using <xref uid="com.fasterxml.jackson.core.JsonParser.setSchema*" data-throw-if-not-resolved="false">#setSchema</xref>).
  syntax:
    content: public boolean canUseSchema(FormatSchema schema)
    parameters:
    - id: schema
      type: com.fasterxml.jackson.core.FormatSchema
      description: Schema to check
    return:
      type: boolean
      description: True if this parser can use given schema; false if not
- uid: com.fasterxml.jackson.core.JsonParser.clearCurrentToken()
  id: clearCurrentToken()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.JsonParser
  langs:
  - java
  name: clearCurrentToken()
  nameWithType: JsonParser.clearCurrentToken()
  fullName: com.fasterxml.jackson.core.JsonParser.clearCurrentToken()
  overload: com.fasterxml.jackson.core.JsonParser.clearCurrentToken*
  type: Method
  package: com.fasterxml.jackson.core
  summary: >-
    Method called to "consume" the current token by effectively removing it so that <xref uid="com.fasterxml.jackson.core.JsonParser.hasCurrentToken*" data-throw-if-not-resolved="false">#hasCurrentToken</xref> returns false, and <xref uid="com.fasterxml.jackson.core.JsonParser.getCurrentToken*" data-throw-if-not-resolved="false">#getCurrentToken</xref> null). Cleared token value can still be accessed by calling <xref uid="com.fasterxml.jackson.core.JsonParser.getLastClearedToken*" data-throw-if-not-resolved="false">#getLastClearedToken</xref> (if absolutely needed), but usually isn't.


    Method was added to be used by the optional data binder, since it has to be able to consume last token used for binding (so that it will not be used again).
  syntax:
    content: public abstract void clearCurrentToken()
- uid: com.fasterxml.jackson.core.JsonParser.close()
  id: close()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.JsonParser
  langs:
  - java
  name: close()
  nameWithType: JsonParser.close()
  fullName: com.fasterxml.jackson.core.JsonParser.close()
  overload: com.fasterxml.jackson.core.JsonParser.close*
  type: Method
  package: com.fasterxml.jackson.core
  summary: Closes the parser so that no further iteration or data access can be made; will also close the underlying input source if parser either **owns** the input source, or feature <xref uid="" data-throw-if-not-resolved="false">Feature#AUTO_CLOSE_SOURCE</xref> is enabled. Whether parser owns the input source depends on factory method that was used to construct instance (so check <xref uid="com.fasterxml.jackson.core.JsonFactory" data-throw-if-not-resolved="false">com.fasterxml.jackson.core.JsonFactory</xref> for details, but the general idea is that if caller passes in closable resource (such as <xref uid="java.io.InputStream" data-throw-if-not-resolved="false">InputStream</xref> or <xref uid="java.io.Reader" data-throw-if-not-resolved="false">Reader</xref>) parser does NOT own the source; but if it passes a reference (such as <xref uid="java.io.File" data-throw-if-not-resolved="false">java.io.File</xref> or <xref uid="java.net.URL" data-throw-if-not-resolved="false">java.net.URL</xref> and creates stream or reader it does own them.
  syntax:
    content: public abstract void close()
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.JsonParser.configure(com.fasterxml.jackson.core.JsonParser.Feature,boolean)
  id: configure(com.fasterxml.jackson.core.JsonParser.Feature,boolean)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.JsonParser
  langs:
  - java
  name: configure(JsonParser.Feature f, boolean state)
  nameWithType: JsonParser.configure(JsonParser.Feature f, boolean state)
  fullName: com.fasterxml.jackson.core.JsonParser.configure(JsonParser.Feature f, boolean state)
  overload: com.fasterxml.jackson.core.JsonParser.configure*
  type: Method
  package: com.fasterxml.jackson.core
  summary: Method for enabling or disabling specified feature (check <xref uid="" data-throw-if-not-resolved="false">Feature</xref> for list of features)
  syntax:
    content: public JsonParser configure(JsonParser.Feature f, boolean state)
    parameters:
    - id: f
      type: com.fasterxml.jackson.core.JsonParser.Feature
    - id: state
      type: boolean
    return:
      type: com.fasterxml.jackson.core.JsonParser
- uid: com.fasterxml.jackson.core.JsonParser.currentName()
  id: currentName()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.JsonParser
  langs:
  - java
  name: currentName()
  nameWithType: JsonParser.currentName()
  fullName: com.fasterxml.jackson.core.JsonParser.currentName()
  overload: com.fasterxml.jackson.core.JsonParser.currentName*
  type: Method
  package: com.fasterxml.jackson.core
  syntax:
    content: public String currentName()
    return:
      type: java.lang.String
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.JsonParser.currentToken()
  id: currentToken()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.JsonParser
  langs:
  - java
  name: currentToken()
  nameWithType: JsonParser.currentToken()
  fullName: com.fasterxml.jackson.core.JsonParser.currentToken()
  overload: com.fasterxml.jackson.core.JsonParser.currentToken*
  type: Method
  package: com.fasterxml.jackson.core
  summary: Accessor to find which token parser currently points to, if any; null will be returned if none. If return value is non-null, data associated with the token is available via other accessor methods.
  syntax:
    content: public JsonToken currentToken()
    return:
      type: com.fasterxml.jackson.core.JsonToken
      description: >-
        Type of the token this parser currently points to,
           if any: null before any tokens have been read, and
           after end-of-input has been encountered, as well as
           if the current token has been explicitly cleared.
- uid: com.fasterxml.jackson.core.JsonParser.currentTokenId()
  id: currentTokenId()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.JsonParser
  langs:
  - java
  name: currentTokenId()
  nameWithType: JsonParser.currentTokenId()
  fullName: com.fasterxml.jackson.core.JsonParser.currentTokenId()
  overload: com.fasterxml.jackson.core.JsonParser.currentTokenId*
  type: Method
  package: com.fasterxml.jackson.core
  summary: >-
    Method similar to <xref uid="com.fasterxml.jackson.core.JsonParser.getCurrentToken()" data-throw-if-not-resolved="false">#getCurrentToken()</xref> but that returns an `int` instead of <xref uid="com.fasterxml.jackson.core.JsonToken" data-throw-if-not-resolved="false">JsonToken</xref> (enum value).


    Use of int directly is typically more efficient on switch statements, so this method may be useful when building low-overhead codecs. Note, however, that effect may not be big enough to matter: make sure to profile performance before deciding to use this method.
  syntax:
    content: public int currentTokenId()
    return:
      type: int
      description: <code>int</code> matching one of constants from <xref uid="com.fasterxml.jackson.core.JsonTokenId" data-throw-if-not-resolved="false">JsonTokenId</xref>.
- uid: com.fasterxml.jackson.core.JsonParser.disable(com.fasterxml.jackson.core.JsonParser.Feature)
  id: disable(com.fasterxml.jackson.core.JsonParser.Feature)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.JsonParser
  langs:
  - java
  name: disable(JsonParser.Feature f)
  nameWithType: JsonParser.disable(JsonParser.Feature f)
  fullName: com.fasterxml.jackson.core.JsonParser.disable(JsonParser.Feature f)
  overload: com.fasterxml.jackson.core.JsonParser.disable*
  type: Method
  package: com.fasterxml.jackson.core
  summary: Method for disabling specified feature (check <xref uid="" data-throw-if-not-resolved="false">Feature</xref> for list of features)
  syntax:
    content: public JsonParser disable(JsonParser.Feature f)
    parameters:
    - id: f
      type: com.fasterxml.jackson.core.JsonParser.Feature
    return:
      type: com.fasterxml.jackson.core.JsonParser
- uid: com.fasterxml.jackson.core.JsonParser.enable(com.fasterxml.jackson.core.JsonParser.Feature)
  id: enable(com.fasterxml.jackson.core.JsonParser.Feature)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.JsonParser
  langs:
  - java
  name: enable(JsonParser.Feature f)
  nameWithType: JsonParser.enable(JsonParser.Feature f)
  fullName: com.fasterxml.jackson.core.JsonParser.enable(JsonParser.Feature f)
  overload: com.fasterxml.jackson.core.JsonParser.enable*
  type: Method
  package: com.fasterxml.jackson.core
  summary: Method for enabling specified parser feature (check <xref uid="" data-throw-if-not-resolved="false">Feature</xref> for list of features)
  syntax:
    content: public JsonParser enable(JsonParser.Feature f)
    parameters:
    - id: f
      type: com.fasterxml.jackson.core.JsonParser.Feature
    return:
      type: com.fasterxml.jackson.core.JsonParser
- uid: com.fasterxml.jackson.core.JsonParser.finishToken()
  id: finishToken()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.JsonParser
  langs:
  - java
  name: finishToken()
  nameWithType: JsonParser.finishToken()
  fullName: com.fasterxml.jackson.core.JsonParser.finishToken()
  overload: com.fasterxml.jackson.core.JsonParser.finishToken*
  type: Method
  package: com.fasterxml.jackson.core
  summary: >-
    Method that may be used to force full handling of the current token so that even if lazy processing is enabled, the whole contents are read for possible retrieval. This is usually used to ensure that the token end location is available, as well as token contents (similar to what calling, say <xref uid="com.fasterxml.jackson.core.JsonParser.getTextCharacters()" data-throw-if-not-resolved="false">#getTextCharacters()</xref>, would achieve).


    Note that for many dataformat implementations this method will not do anything; this is the default implementation unless overridden by sub-classes.
  syntax:
    content: public void finishToken()
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.JsonParser.getBigIntegerValue()
  id: getBigIntegerValue()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.JsonParser
  langs:
  - java
  name: getBigIntegerValue()
  nameWithType: JsonParser.getBigIntegerValue()
  fullName: com.fasterxml.jackson.core.JsonParser.getBigIntegerValue()
  overload: com.fasterxml.jackson.core.JsonParser.getBigIntegerValue*
  type: Method
  package: com.fasterxml.jackson.core
  summary: Numeric accessor that can be called when the current token is of type <xref uid="com.fasterxml.jackson.core.JsonToken.VALUE_NUMBER_INT" data-throw-if-not-resolved="false">JsonToken#VALUE_NUMBER_INT</xref> and it can not be used as a Java long primitive type due to its magnitude. It can also be called for <xref uid="com.fasterxml.jackson.core.JsonToken.VALUE_NUMBER_FLOAT" data-throw-if-not-resolved="false">JsonToken#VALUE_NUMBER_FLOAT</xref>; if so, it is equivalent to calling <xref uid="com.fasterxml.jackson.core.JsonParser.getDecimalValue*" data-throw-if-not-resolved="false">#getDecimalValue</xref> and then constructing a <xref uid="java.math.BigInteger" data-throw-if-not-resolved="false">BigInteger</xref> from that value.
  syntax:
    content: public abstract BigInteger getBigIntegerValue()
    return:
      type: java.math.BigInteger
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.JsonParser.getBinaryValue()
  id: getBinaryValue()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.JsonParser
  langs:
  - java
  name: getBinaryValue()
  nameWithType: JsonParser.getBinaryValue()
  fullName: com.fasterxml.jackson.core.JsonParser.getBinaryValue()
  overload: com.fasterxml.jackson.core.JsonParser.getBinaryValue*
  type: Method
  package: com.fasterxml.jackson.core
  summary: Convenience alternative to <xref uid="com.fasterxml.jackson.core.JsonParser.getBinaryValue(com.fasterxml.jackson.core.Base64Variant)" data-throw-if-not-resolved="false">#getBinaryValue(Base64Variant)</xref> that defaults to using <xref uid="com.fasterxml.jackson.core.Base64Variants.getDefaultVariant*" data-throw-if-not-resolved="false">Base64Variants#getDefaultVariant</xref> as the default encoding.
  syntax:
    content: public byte[] getBinaryValue()
    return:
      type: byte[]
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.JsonParser.getBinaryValue(com.fasterxml.jackson.core.Base64Variant)
  id: getBinaryValue(com.fasterxml.jackson.core.Base64Variant)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.JsonParser
  langs:
  - java
  name: getBinaryValue(Base64Variant bv)
  nameWithType: JsonParser.getBinaryValue(Base64Variant bv)
  fullName: com.fasterxml.jackson.core.JsonParser.getBinaryValue(Base64Variant bv)
  overload: com.fasterxml.jackson.core.JsonParser.getBinaryValue*
  type: Method
  package: com.fasterxml.jackson.core
  summary: >-
    Method that can be used to read (and consume -- results may not be accessible using other methods after the call) base64-encoded binary data included in the current textual JSON value. It works similar to getting String value via <xref uid="com.fasterxml.jackson.core.JsonParser.getText*" data-throw-if-not-resolved="false">#getText</xref> and decoding result (except for decoding part), but should be significantly more performant.


    Note that non-decoded textual contents of the current token are not guaranteed to be accessible after this method is called. Current implementation, for example, clears up textual content during decoding. Decoded binary content, however, will be retained until parser is advanced to the next event.
  syntax:
    content: public abstract byte[] getBinaryValue(Base64Variant bv)
    parameters:
    - id: bv
      type: com.fasterxml.jackson.core.Base64Variant
      description: >-
        Expected variant of base64 encoded
           content (see <xref uid="com.fasterxml.jackson.core.Base64Variants" data-throw-if-not-resolved="false">Base64Variants</xref> for definitions
           of "standard" variants).
    return:
      type: byte[]
      description: Decoded binary data
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.JsonParser.getBooleanValue()
  id: getBooleanValue()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.JsonParser
  langs:
  - java
  name: getBooleanValue()
  nameWithType: JsonParser.getBooleanValue()
  fullName: com.fasterxml.jackson.core.JsonParser.getBooleanValue()
  overload: com.fasterxml.jackson.core.JsonParser.getBooleanValue*
  type: Method
  package: com.fasterxml.jackson.core
  summary: >-
    Convenience accessor that can be called when the current token is <xref uid="com.fasterxml.jackson.core.JsonToken.VALUE_TRUE" data-throw-if-not-resolved="false">JsonToken#VALUE_TRUE</xref> or <xref uid="com.fasterxml.jackson.core.JsonToken.VALUE_FALSE" data-throw-if-not-resolved="false">JsonToken#VALUE_FALSE</xref>.


    Note: if the token is not of above-mentioned boolean types, an integer, but its value falls outside of range of Java long, a <xref uid="com.fasterxml.jackson.core.JsonParseException" data-throw-if-not-resolved="false">JsonParseException</xref> may be thrown to indicate numeric overflow/underflow.
  syntax:
    content: public boolean getBooleanValue()
    return:
      type: boolean
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.JsonParser.getByteValue()
  id: getByteValue()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.JsonParser
  langs:
  - java
  name: getByteValue()
  nameWithType: JsonParser.getByteValue()
  fullName: com.fasterxml.jackson.core.JsonParser.getByteValue()
  overload: com.fasterxml.jackson.core.JsonParser.getByteValue*
  type: Method
  package: com.fasterxml.jackson.core
  summary: >-
    Numeric accessor that can be called when the current token is of type <xref uid="com.fasterxml.jackson.core.JsonToken.VALUE_NUMBER_INT" data-throw-if-not-resolved="false">JsonToken#VALUE_NUMBER_INT</xref> and it can be expressed as a value of Java byte primitive type. It can also be called for <xref uid="com.fasterxml.jackson.core.JsonToken.VALUE_NUMBER_FLOAT" data-throw-if-not-resolved="false">JsonToken#VALUE_NUMBER_FLOAT</xref>; if so, it is equivalent to calling <xref uid="com.fasterxml.jackson.core.JsonParser.getDoubleValue*" data-throw-if-not-resolved="false">#getDoubleValue</xref> and then casting; except for possible overflow/underflow exception.


    Note: if the resulting integer value falls outside range of Java byte, a <xref uid="com.fasterxml.jackson.core.JsonParseException" data-throw-if-not-resolved="false">JsonParseException</xref> will be thrown to indicate numeric overflow/underflow.
  syntax:
    content: public byte getByteValue()
    return:
      type: byte
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.JsonParser.getCodec()
  id: getCodec()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.JsonParser
  langs:
  - java
  name: getCodec()
  nameWithType: JsonParser.getCodec()
  fullName: com.fasterxml.jackson.core.JsonParser.getCodec()
  overload: com.fasterxml.jackson.core.JsonParser.getCodec*
  type: Method
  package: com.fasterxml.jackson.core
  summary: Accessor for <xref uid="com.fasterxml.jackson.core.ObjectCodec" data-throw-if-not-resolved="false">ObjectCodec</xref> associated with this parser, if any. Codec is used by <xref uid="com.fasterxml.jackson.core.JsonParser.&lt;T&gt;readValueAs(java.lang.Class&lt;T&gt;)" data-throw-if-not-resolved="false">#readValueAs(Class)</xref> method (and its variants).
  syntax:
    content: public abstract ObjectCodec getCodec()
    return:
      type: com.fasterxml.jackson.core.ObjectCodec
- uid: com.fasterxml.jackson.core.JsonParser.getCurrentLocation()
  id: getCurrentLocation()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.JsonParser
  langs:
  - java
  name: getCurrentLocation()
  nameWithType: JsonParser.getCurrentLocation()
  fullName: com.fasterxml.jackson.core.JsonParser.getCurrentLocation()
  overload: com.fasterxml.jackson.core.JsonParser.getCurrentLocation*
  type: Method
  package: com.fasterxml.jackson.core
  summary: Method that returns location of the last processed character; usually for error reporting purposes.
  syntax:
    content: public abstract JsonLocation getCurrentLocation()
    return:
      type: com.fasterxml.jackson.core.JsonLocation
- uid: com.fasterxml.jackson.core.JsonParser.getCurrentName()
  id: getCurrentName()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.JsonParser
  langs:
  - java
  name: getCurrentName()
  nameWithType: JsonParser.getCurrentName()
  fullName: com.fasterxml.jackson.core.JsonParser.getCurrentName()
  overload: com.fasterxml.jackson.core.JsonParser.getCurrentName*
  type: Method
  package: com.fasterxml.jackson.core
  summary: 'Method that can be called to get the name associated with the current token: for <xref uid="com.fasterxml.jackson.core.JsonToken.FIELD_NAME" data-throw-if-not-resolved="false">JsonToken#FIELD_NAME</xref>s it will be the same as what <xref uid="com.fasterxml.jackson.core.JsonParser.getText*" data-throw-if-not-resolved="false">#getText</xref> returns; for field values it will be preceding field name; and for others (array values, root-level values) null.'
  syntax:
    content: public abstract String getCurrentName()
    return:
      type: java.lang.String
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.JsonParser.getCurrentToken()
  id: getCurrentToken()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.JsonParser
  langs:
  - java
  name: getCurrentToken()
  nameWithType: JsonParser.getCurrentToken()
  fullName: com.fasterxml.jackson.core.JsonParser.getCurrentToken()
  overload: com.fasterxml.jackson.core.JsonParser.getCurrentToken*
  type: Method
  package: com.fasterxml.jackson.core
  summary: Alias for <xref uid="com.fasterxml.jackson.core.JsonParser.currentToken()" data-throw-if-not-resolved="false">#currentToken()</xref>, will be deprecated in Jackson 2.9
  syntax:
    content: public abstract JsonToken getCurrentToken()
    return:
      type: com.fasterxml.jackson.core.JsonToken
- uid: com.fasterxml.jackson.core.JsonParser.getCurrentTokenId()
  id: getCurrentTokenId()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.JsonParser
  langs:
  - java
  name: getCurrentTokenId()
  nameWithType: JsonParser.getCurrentTokenId()
  fullName: com.fasterxml.jackson.core.JsonParser.getCurrentTokenId()
  overload: com.fasterxml.jackson.core.JsonParser.getCurrentTokenId*
  type: Method
  package: com.fasterxml.jackson.core
  summary: Alias for <xref uid="com.fasterxml.jackson.core.JsonParser.currentTokenId()" data-throw-if-not-resolved="false">#currentTokenId()</xref>, will be deprecated in Jackson 2.9
  syntax:
    content: public abstract int getCurrentTokenId()
    return:
      type: int
- uid: com.fasterxml.jackson.core.JsonParser.getCurrentValue()
  id: getCurrentValue()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.JsonParser
  langs:
  - java
  name: getCurrentValue()
  nameWithType: JsonParser.getCurrentValue()
  fullName: com.fasterxml.jackson.core.JsonParser.getCurrentValue()
  overload: com.fasterxml.jackson.core.JsonParser.getCurrentValue*
  type: Method
  package: com.fasterxml.jackson.core
  summary: >-
    Helper method, usually equivalent to: `getParsingContext().getCurrentValue();`


    Note that "current value" is NOT populated (or used) by Streaming parser; it is only used by higher-level data-binding functionality. The reason it is included here is that it can be stored and accessed hierarchically, and gets passed through data-binding.
  syntax:
    content: public Object getCurrentValue()
    return:
      type: java.lang.Object
- uid: com.fasterxml.jackson.core.JsonParser.getDecimalValue()
  id: getDecimalValue()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.JsonParser
  langs:
  - java
  name: getDecimalValue()
  nameWithType: JsonParser.getDecimalValue()
  fullName: com.fasterxml.jackson.core.JsonParser.getDecimalValue()
  overload: com.fasterxml.jackson.core.JsonParser.getDecimalValue*
  type: Method
  package: com.fasterxml.jackson.core
  summary: Numeric accessor that can be called when the current token is of type <xref uid="com.fasterxml.jackson.core.JsonToken.VALUE_NUMBER_FLOAT" data-throw-if-not-resolved="false">JsonToken#VALUE_NUMBER_FLOAT</xref> or <xref uid="com.fasterxml.jackson.core.JsonToken.VALUE_NUMBER_INT" data-throw-if-not-resolved="false">JsonToken#VALUE_NUMBER_INT</xref>. No under/overflow exceptions are ever thrown.
  syntax:
    content: public abstract BigDecimal getDecimalValue()
    return:
      type: java.math.BigDecimal
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.JsonParser.getDoubleValue()
  id: getDoubleValue()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.JsonParser
  langs:
  - java
  name: getDoubleValue()
  nameWithType: JsonParser.getDoubleValue()
  fullName: com.fasterxml.jackson.core.JsonParser.getDoubleValue()
  overload: com.fasterxml.jackson.core.JsonParser.getDoubleValue*
  type: Method
  package: com.fasterxml.jackson.core
  summary: >-
    Numeric accessor that can be called when the current token is of type <xref uid="com.fasterxml.jackson.core.JsonToken.VALUE_NUMBER_FLOAT" data-throw-if-not-resolved="false">JsonToken#VALUE_NUMBER_FLOAT</xref> and it can be expressed as a Java double primitive type. It can also be called for <xref uid="com.fasterxml.jackson.core.JsonToken.VALUE_NUMBER_INT" data-throw-if-not-resolved="false">JsonToken#VALUE_NUMBER_INT</xref>; if so, it is equivalent to calling <xref uid="com.fasterxml.jackson.core.JsonParser.getLongValue*" data-throw-if-not-resolved="false">#getLongValue</xref> and then casting; except for possible overflow/underflow exception.


    Note: if the value falls outside of range of Java double, a <xref uid="com.fasterxml.jackson.core.JsonParseException" data-throw-if-not-resolved="false">JsonParseException</xref> will be thrown to indicate numeric overflow/underflow.
  syntax:
    content: public abstract double getDoubleValue()
    return:
      type: double
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.JsonParser.getEmbeddedObject()
  id: getEmbeddedObject()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.JsonParser
  langs:
  - java
  name: getEmbeddedObject()
  nameWithType: JsonParser.getEmbeddedObject()
  fullName: com.fasterxml.jackson.core.JsonParser.getEmbeddedObject()
  overload: com.fasterxml.jackson.core.JsonParser.getEmbeddedObject*
  type: Method
  package: com.fasterxml.jackson.core
  summary: >-
    Accessor that can be called if (and only if) the current token is <xref uid="com.fasterxml.jackson.core.JsonToken.VALUE_EMBEDDED_OBJECT" data-throw-if-not-resolved="false">JsonToken#VALUE_EMBEDDED_OBJECT</xref>. For other token types, null is returned.


    Note: only some specialized parser implementations support embedding of objects (usually ones that are facades on top of non-streaming sources, such as object trees). One exception is access to binary content (whether via base64 encoding or not) which typically is accessible using this method, as well as <xref uid="com.fasterxml.jackson.core.JsonParser.getBinaryValue()" data-throw-if-not-resolved="false">#getBinaryValue()</xref>.
  syntax:
    content: public Object getEmbeddedObject()
    return:
      type: java.lang.Object
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.JsonParser.getFeatureMask()
  id: getFeatureMask()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.JsonParser
  langs:
  - java
  name: getFeatureMask()
  nameWithType: JsonParser.getFeatureMask()
  fullName: com.fasterxml.jackson.core.JsonParser.getFeatureMask()
  overload: com.fasterxml.jackson.core.JsonParser.getFeatureMask*
  type: Method
  package: com.fasterxml.jackson.core
  summary: Bulk access method for getting state of all standard <xref uid="" data-throw-if-not-resolved="false">Feature</xref>s.
  syntax:
    content: public int getFeatureMask()
    return:
      type: int
      description: Bit mask that defines current states of all standard <xref uid="" data-throw-if-not-resolved="false">Feature</xref>s.
- uid: com.fasterxml.jackson.core.JsonParser.getFloatValue()
  id: getFloatValue()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.JsonParser
  langs:
  - java
  name: getFloatValue()
  nameWithType: JsonParser.getFloatValue()
  fullName: com.fasterxml.jackson.core.JsonParser.getFloatValue()
  overload: com.fasterxml.jackson.core.JsonParser.getFloatValue*
  type: Method
  package: com.fasterxml.jackson.core
  summary: >-
    Numeric accessor that can be called when the current token is of type <xref uid="com.fasterxml.jackson.core.JsonToken.VALUE_NUMBER_FLOAT" data-throw-if-not-resolved="false">JsonToken#VALUE_NUMBER_FLOAT</xref> and it can be expressed as a Java float primitive type. It can also be called for <xref uid="com.fasterxml.jackson.core.JsonToken.VALUE_NUMBER_INT" data-throw-if-not-resolved="false">JsonToken#VALUE_NUMBER_INT</xref>; if so, it is equivalent to calling <xref uid="com.fasterxml.jackson.core.JsonParser.getLongValue*" data-throw-if-not-resolved="false">#getLongValue</xref> and then casting; except for possible overflow/underflow exception.


    Note: if the value falls outside of range of Java float, a <xref uid="com.fasterxml.jackson.core.JsonParseException" data-throw-if-not-resolved="false">JsonParseException</xref> will be thrown to indicate numeric overflow/underflow.
  syntax:
    content: public abstract float getFloatValue()
    return:
      type: float
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.JsonParser.getFormatFeatures()
  id: getFormatFeatures()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.JsonParser
  langs:
  - java
  name: getFormatFeatures()
  nameWithType: JsonParser.getFormatFeatures()
  fullName: com.fasterxml.jackson.core.JsonParser.getFormatFeatures()
  overload: com.fasterxml.jackson.core.JsonParser.getFormatFeatures*
  type: Method
  package: com.fasterxml.jackson.core
  summary: Bulk access method for getting state of all <xref uid="com.fasterxml.jackson.core.FormatFeature" data-throw-if-not-resolved="false">FormatFeature</xref>s, format-specific on/off configuration settings.
  syntax:
    content: public int getFormatFeatures()
    return:
      type: int
      description: Bit mask that defines current states of all standard <xref uid="com.fasterxml.jackson.core.FormatFeature" data-throw-if-not-resolved="false">FormatFeature</xref>s.
- uid: com.fasterxml.jackson.core.JsonParser.getInputSource()
  id: getInputSource()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.JsonParser
  langs:
  - java
  name: getInputSource()
  nameWithType: JsonParser.getInputSource()
  fullName: com.fasterxml.jackson.core.JsonParser.getInputSource()
  overload: com.fasterxml.jackson.core.JsonParser.getInputSource*
  type: Method
  package: com.fasterxml.jackson.core
  summary: >-
    Method that can be used to get access to object that is used to access input being parsed; this is usually either <xref uid="java.io.InputStream" data-throw-if-not-resolved="false">InputStream</xref> or <xref uid="java.io.Reader" data-throw-if-not-resolved="false">Reader</xref>, depending on what parser was constructed with. Note that returned value may be null in some cases; including case where parser implementation does not want to exposed raw source to caller. In cases where input has been decorated, object returned here is the decorated version; this allows some level of interaction between users of parser and decorator object.


    In general use of this accessor should be considered as "last effort", i.e. only used if no other mechanism is applicable.
  syntax:
    content: public Object getInputSource()
    return:
      type: java.lang.Object
- uid: com.fasterxml.jackson.core.JsonParser.getIntValue()
  id: getIntValue()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.JsonParser
  langs:
  - java
  name: getIntValue()
  nameWithType: JsonParser.getIntValue()
  fullName: com.fasterxml.jackson.core.JsonParser.getIntValue()
  overload: com.fasterxml.jackson.core.JsonParser.getIntValue*
  type: Method
  package: com.fasterxml.jackson.core
  summary: >-
    Numeric accessor that can be called when the current token is of type <xref uid="com.fasterxml.jackson.core.JsonToken.VALUE_NUMBER_INT" data-throw-if-not-resolved="false">JsonToken#VALUE_NUMBER_INT</xref> and it can be expressed as a value of Java int primitive type. It can also be called for <xref uid="com.fasterxml.jackson.core.JsonToken.VALUE_NUMBER_FLOAT" data-throw-if-not-resolved="false">JsonToken#VALUE_NUMBER_FLOAT</xref>; if so, it is equivalent to calling <xref uid="com.fasterxml.jackson.core.JsonParser.getDoubleValue*" data-throw-if-not-resolved="false">#getDoubleValue</xref> and then casting; except for possible overflow/underflow exception.


    Note: if the resulting integer value falls outside range of Java int, a <xref uid="com.fasterxml.jackson.core.JsonParseException" data-throw-if-not-resolved="false">JsonParseException</xref> may be thrown to indicate numeric overflow/underflow.
  syntax:
    content: public abstract int getIntValue()
    return:
      type: int
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.JsonParser.getLastClearedToken()
  id: getLastClearedToken()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.JsonParser
  langs:
  - java
  name: getLastClearedToken()
  nameWithType: JsonParser.getLastClearedToken()
  fullName: com.fasterxml.jackson.core.JsonParser.getLastClearedToken()
  overload: com.fasterxml.jackson.core.JsonParser.getLastClearedToken*
  type: Method
  package: com.fasterxml.jackson.core
  summary: Method that can be called to get the last token that was cleared using <xref uid="com.fasterxml.jackson.core.JsonParser.clearCurrentToken*" data-throw-if-not-resolved="false">#clearCurrentToken</xref>. This is not necessarily the latest token read. Will return null if no tokens have been cleared, or if parser has been closed.
  syntax:
    content: public abstract JsonToken getLastClearedToken()
    return:
      type: com.fasterxml.jackson.core.JsonToken
- uid: com.fasterxml.jackson.core.JsonParser.getLongValue()
  id: getLongValue()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.JsonParser
  langs:
  - java
  name: getLongValue()
  nameWithType: JsonParser.getLongValue()
  fullName: com.fasterxml.jackson.core.JsonParser.getLongValue()
  overload: com.fasterxml.jackson.core.JsonParser.getLongValue*
  type: Method
  package: com.fasterxml.jackson.core
  summary: >-
    Numeric accessor that can be called when the current token is of type <xref uid="com.fasterxml.jackson.core.JsonToken.VALUE_NUMBER_INT" data-throw-if-not-resolved="false">JsonToken#VALUE_NUMBER_INT</xref> and it can be expressed as a Java long primitive type. It can also be called for <xref uid="com.fasterxml.jackson.core.JsonToken.VALUE_NUMBER_FLOAT" data-throw-if-not-resolved="false">JsonToken#VALUE_NUMBER_FLOAT</xref>; if so, it is equivalent to calling <xref uid="com.fasterxml.jackson.core.JsonParser.getDoubleValue*" data-throw-if-not-resolved="false">#getDoubleValue</xref> and then casting to int; except for possible overflow/underflow exception.


    Note: if the token is an integer, but its value falls outside of range of Java long, a <xref uid="com.fasterxml.jackson.core.JsonParseException" data-throw-if-not-resolved="false">JsonParseException</xref> may be thrown to indicate numeric overflow/underflow.
  syntax:
    content: public abstract long getLongValue()
    return:
      type: long
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.JsonParser.getNonBlockingInputFeeder()
  id: getNonBlockingInputFeeder()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.JsonParser
  langs:
  - java
  name: getNonBlockingInputFeeder()
  nameWithType: JsonParser.getNonBlockingInputFeeder()
  fullName: com.fasterxml.jackson.core.JsonParser.getNonBlockingInputFeeder()
  overload: com.fasterxml.jackson.core.JsonParser.getNonBlockingInputFeeder*
  type: Method
  package: com.fasterxml.jackson.core
  summary: Method that will either return a feeder instance (if parser uses non-blocking, aka asynchronous access); or `null` for parsers that use blocking I/O.
  syntax:
    content: public NonBlockingInputFeeder getNonBlockingInputFeeder()
    return:
      type: com.fasterxml.jackson.core.async.NonBlockingInputFeeder
- uid: com.fasterxml.jackson.core.JsonParser.getNumberType()
  id: getNumberType()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.JsonParser
  langs:
  - java
  name: getNumberType()
  nameWithType: JsonParser.getNumberType()
  fullName: com.fasterxml.jackson.core.JsonParser.getNumberType()
  overload: com.fasterxml.jackson.core.JsonParser.getNumberType*
  type: Method
  package: com.fasterxml.jackson.core
  summary: If current token is of type <xref uid="com.fasterxml.jackson.core.JsonToken.VALUE_NUMBER_INT" data-throw-if-not-resolved="false">JsonToken#VALUE_NUMBER_INT</xref> or <xref uid="com.fasterxml.jackson.core.JsonToken.VALUE_NUMBER_FLOAT" data-throw-if-not-resolved="false">JsonToken#VALUE_NUMBER_FLOAT</xref>, returns one of <xref uid="" data-throw-if-not-resolved="false">NumberType</xref> constants; otherwise returns null.
  syntax:
    content: public abstract JsonParser.NumberType getNumberType()
    return:
      type: com.fasterxml.jackson.core.JsonParser.NumberType
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.JsonParser.getNumberValue()
  id: getNumberValue()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.JsonParser
  langs:
  - java
  name: getNumberValue()
  nameWithType: JsonParser.getNumberValue()
  fullName: com.fasterxml.jackson.core.JsonParser.getNumberValue()
  overload: com.fasterxml.jackson.core.JsonParser.getNumberValue*
  type: Method
  package: com.fasterxml.jackson.core
  summary: Generic number value accessor method that will work for all kinds of numeric values. It will return the optimal (simplest/smallest possible) wrapper object that can express the numeric value just parsed.
  syntax:
    content: public abstract Number getNumberValue()
    return:
      type: java.lang.Number
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.JsonParser.getObjectId()
  id: getObjectId()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.JsonParser
  langs:
  - java
  name: getObjectId()
  nameWithType: JsonParser.getObjectId()
  fullName: com.fasterxml.jackson.core.JsonParser.getObjectId()
  overload: com.fasterxml.jackson.core.JsonParser.getObjectId*
  type: Method
  package: com.fasterxml.jackson.core
  summary: >-
    Method that can be called to check whether current token (one that was just read) has an associated Object id, and if so, return it. Note that while typically caller should check with <xref uid="com.fasterxml.jackson.core.JsonParser.canReadObjectId*" data-throw-if-not-resolved="false">#canReadObjectId</xref> first, it is not illegal to call this method even if that method returns true; but if so, it will return null. This may be used to simplify calling code.


    Default implementation will simply return null.
  syntax:
    content: public Object getObjectId()
    return:
      type: java.lang.Object
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.JsonParser.getParsingContext()
  id: getParsingContext()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.JsonParser
  langs:
  - java
  name: getParsingContext()
  nameWithType: JsonParser.getParsingContext()
  fullName: com.fasterxml.jackson.core.JsonParser.getParsingContext()
  overload: com.fasterxml.jackson.core.JsonParser.getParsingContext*
  type: Method
  package: com.fasterxml.jackson.core
  summary: 'Method that can be used to access current parsing context reader is in. There are 3 different types: root, array and object contexts, with slightly different available information. Contexts are hierarchically nested, and can be used for example for figuring out part of the input document that correspond to specific array or object (for highlighting purposes, or error reporting). Contexts can also be used for simple xpath-like matching of input, if so desired.'
  syntax:
    content: public abstract JsonStreamContext getParsingContext()
    return:
      type: com.fasterxml.jackson.core.JsonStreamContext
- uid: com.fasterxml.jackson.core.JsonParser.getSchema()
  id: getSchema()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.JsonParser
  langs:
  - java
  name: getSchema()
  nameWithType: JsonParser.getSchema()
  fullName: com.fasterxml.jackson.core.JsonParser.getSchema()
  overload: com.fasterxml.jackson.core.JsonParser.getSchema*
  type: Method
  package: com.fasterxml.jackson.core
  summary: Method for accessing Schema that this parser uses, if any. Default implementation returns null.
  syntax:
    content: public FormatSchema getSchema()
    return:
      type: com.fasterxml.jackson.core.FormatSchema
- uid: com.fasterxml.jackson.core.JsonParser.getShortValue()
  id: getShortValue()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.JsonParser
  langs:
  - java
  name: getShortValue()
  nameWithType: JsonParser.getShortValue()
  fullName: com.fasterxml.jackson.core.JsonParser.getShortValue()
  overload: com.fasterxml.jackson.core.JsonParser.getShortValue*
  type: Method
  package: com.fasterxml.jackson.core
  summary: >-
    Numeric accessor that can be called when the current token is of type <xref uid="com.fasterxml.jackson.core.JsonToken.VALUE_NUMBER_INT" data-throw-if-not-resolved="false">JsonToken#VALUE_NUMBER_INT</xref> and it can be expressed as a value of Java short primitive type. It can also be called for <xref uid="com.fasterxml.jackson.core.JsonToken.VALUE_NUMBER_FLOAT" data-throw-if-not-resolved="false">JsonToken#VALUE_NUMBER_FLOAT</xref>; if so, it is equivalent to calling <xref uid="com.fasterxml.jackson.core.JsonParser.getDoubleValue*" data-throw-if-not-resolved="false">#getDoubleValue</xref> and then casting; except for possible overflow/underflow exception.


    Note: if the resulting integer value falls outside range of Java short, a <xref uid="com.fasterxml.jackson.core.JsonParseException" data-throw-if-not-resolved="false">JsonParseException</xref> will be thrown to indicate numeric overflow/underflow.
  syntax:
    content: public short getShortValue()
    return:
      type: short
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.JsonParser.getText()
  id: getText()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.JsonParser
  langs:
  - java
  name: getText()
  nameWithType: JsonParser.getText()
  fullName: com.fasterxml.jackson.core.JsonParser.getText()
  overload: com.fasterxml.jackson.core.JsonParser.getText*
  type: Method
  package: com.fasterxml.jackson.core
  summary: Method for accessing textual representation of the current token; if no current token (before first call to <xref uid="com.fasterxml.jackson.core.JsonParser.nextToken*" data-throw-if-not-resolved="false">#nextToken</xref>, or after encountering end-of-input), returns null. Method can be called for any token type.
  syntax:
    content: public abstract String getText()
    return:
      type: java.lang.String
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.JsonParser.getText(java.io.Writer)
  id: getText(java.io.Writer)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.JsonParser
  langs:
  - java
  name: getText(Writer writer)
  nameWithType: JsonParser.getText(Writer writer)
  fullName: com.fasterxml.jackson.core.JsonParser.getText(Writer writer)
  overload: com.fasterxml.jackson.core.JsonParser.getText*
  type: Method
  package: com.fasterxml.jackson.core
  summary: >-
    Method to read the textual representation of the current token in chunks and pass it to the given Writer. Conceptually same as calling:


    ```java

    writer.write(parser.getText());

    ```


    but should typically be more efficient as longer content does need to be combined into a single `String` to return, and write can occur directly from intermediate buffers Jackson uses.
  syntax:
    content: public int getText(Writer writer)
    parameters:
    - id: writer
      type: java.io.Writer
    return:
      type: int
      description: The number of characters written to the Writer
  exceptions:
  - type: java.io.IOException
  - type: java.lang.UnsupportedOperationException
- uid: com.fasterxml.jackson.core.JsonParser.getTextCharacters()
  id: getTextCharacters()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.JsonParser
  langs:
  - java
  name: getTextCharacters()
  nameWithType: JsonParser.getTextCharacters()
  fullName: com.fasterxml.jackson.core.JsonParser.getTextCharacters()
  overload: com.fasterxml.jackson.core.JsonParser.getTextCharacters*
  type: Method
  package: com.fasterxml.jackson.core
  summary: >-
    Method similar to <xref uid="com.fasterxml.jackson.core.JsonParser.getText*" data-throw-if-not-resolved="false">#getText</xref>, but that will return underlying (unmodifiable) character array that contains textual value, instead of constructing a String object to contain this information. Note, however, that:

     *  Textual contents are not guaranteed to start at index 0 (rather, call <xref uid="com.fasterxml.jackson.core.JsonParser.getTextOffset*" data-throw-if-not-resolved="false">#getTextOffset</xref>) to know the actual offset
     *  Length of textual contents may be less than the length of returned buffer: call <xref uid="com.fasterxml.jackson.core.JsonParser.getTextLength*" data-throw-if-not-resolved="false">#getTextLength</xref> for actual length of returned content.

    Note that caller **MUST NOT** modify the returned character array in any way -- doing so may corrupt current parser state and render parser instance useless.


    The only reason to call this method (over <xref uid="com.fasterxml.jackson.core.JsonParser.getText*" data-throw-if-not-resolved="false">#getText</xref>) is to avoid construction of a String object (which will make a copy of contents).
  syntax:
    content: public abstract char[] getTextCharacters()
    return:
      type: char[]
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.JsonParser.getTextLength()
  id: getTextLength()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.JsonParser
  langs:
  - java
  name: getTextLength()
  nameWithType: JsonParser.getTextLength()
  fullName: com.fasterxml.jackson.core.JsonParser.getTextLength()
  overload: com.fasterxml.jackson.core.JsonParser.getTextLength*
  type: Method
  package: com.fasterxml.jackson.core
  summary: Accessor used with <xref uid="com.fasterxml.jackson.core.JsonParser.getTextCharacters*" data-throw-if-not-resolved="false">#getTextCharacters</xref>, to know length of String stored in returned buffer.
  syntax:
    content: public abstract int getTextLength()
    return:
      type: int
      description: >-
        Number of characters within buffer returned
           by <xref uid="com.fasterxml.jackson.core.JsonParser.getTextCharacters*" data-throw-if-not-resolved="false">#getTextCharacters</xref> that are part of
           textual content of the current token.
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.JsonParser.getTextOffset()
  id: getTextOffset()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.JsonParser
  langs:
  - java
  name: getTextOffset()
  nameWithType: JsonParser.getTextOffset()
  fullName: com.fasterxml.jackson.core.JsonParser.getTextOffset()
  overload: com.fasterxml.jackson.core.JsonParser.getTextOffset*
  type: Method
  package: com.fasterxml.jackson.core
  summary: Accessor used with <xref uid="com.fasterxml.jackson.core.JsonParser.getTextCharacters*" data-throw-if-not-resolved="false">#getTextCharacters</xref>, to know offset of the first text content character within buffer.
  syntax:
    content: public abstract int getTextOffset()
    return:
      type: int
      description: >-
        Offset of the first character within buffer returned
           by <xref uid="com.fasterxml.jackson.core.JsonParser.getTextCharacters*" data-throw-if-not-resolved="false">#getTextCharacters</xref> that is part of
           textual content of the current token.
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.JsonParser.getTokenLocation()
  id: getTokenLocation()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.JsonParser
  langs:
  - java
  name: getTokenLocation()
  nameWithType: JsonParser.getTokenLocation()
  fullName: com.fasterxml.jackson.core.JsonParser.getTokenLocation()
  overload: com.fasterxml.jackson.core.JsonParser.getTokenLocation*
  type: Method
  package: com.fasterxml.jackson.core
  summary: Method that return the **starting** location of the current token; that is, position of the first character from input that starts the current token.
  syntax:
    content: public abstract JsonLocation getTokenLocation()
    return:
      type: com.fasterxml.jackson.core.JsonLocation
- uid: com.fasterxml.jackson.core.JsonParser.getTypeId()
  id: getTypeId()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.JsonParser
  langs:
  - java
  name: getTypeId()
  nameWithType: JsonParser.getTypeId()
  fullName: com.fasterxml.jackson.core.JsonParser.getTypeId()
  overload: com.fasterxml.jackson.core.JsonParser.getTypeId*
  type: Method
  package: com.fasterxml.jackson.core
  summary: >-
    Method that can be called to check whether current token (one that was just read) has an associated type id, and if so, return it. Note that while typically caller should check with <xref uid="com.fasterxml.jackson.core.JsonParser.canReadTypeId*" data-throw-if-not-resolved="false">#canReadTypeId</xref> first, it is not illegal to call this method even if that method returns true; but if so, it will return null. This may be used to simplify calling code.


    Default implementation will simply return null.
  syntax:
    content: public Object getTypeId()
    return:
      type: java.lang.Object
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.JsonParser.getValueAsBoolean()
  id: getValueAsBoolean()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.JsonParser
  langs:
  - java
  name: getValueAsBoolean()
  nameWithType: JsonParser.getValueAsBoolean()
  fullName: com.fasterxml.jackson.core.JsonParser.getValueAsBoolean()
  overload: com.fasterxml.jackson.core.JsonParser.getValueAsBoolean*
  type: Method
  package: com.fasterxml.jackson.core
  summary: >-
    Method that will try to convert value of current token to a **boolean**. JSON booleans map naturally; integer numbers other than 0 map to true, and 0 maps to false and Strings 'true' and 'false' map to corresponding values.


    If representation can not be converted to a boolean value (including structured types like Objects and Arrays), default value of **false** will be returned; no exceptions are thrown.
  syntax:
    content: public boolean getValueAsBoolean()
    return:
      type: boolean
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.JsonParser.getValueAsBoolean(boolean)
  id: getValueAsBoolean(boolean)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.JsonParser
  langs:
  - java
  name: getValueAsBoolean(boolean def)
  nameWithType: JsonParser.getValueAsBoolean(boolean def)
  fullName: com.fasterxml.jackson.core.JsonParser.getValueAsBoolean(boolean def)
  overload: com.fasterxml.jackson.core.JsonParser.getValueAsBoolean*
  type: Method
  package: com.fasterxml.jackson.core
  summary: >-
    Method that will try to convert value of current token to a **boolean**. JSON booleans map naturally; integer numbers other than 0 map to true, and 0 maps to false and Strings 'true' and 'false' map to corresponding values.


    If representation can not be converted to a boolean value (including structured types like Objects and Arrays), specified **def** will be returned; no exceptions are thrown.
  syntax:
    content: public boolean getValueAsBoolean(boolean def)
    parameters:
    - id: def
      type: boolean
    return:
      type: boolean
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.JsonParser.getValueAsDouble()
  id: getValueAsDouble()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.JsonParser
  langs:
  - java
  name: getValueAsDouble()
  nameWithType: JsonParser.getValueAsDouble()
  fullName: com.fasterxml.jackson.core.JsonParser.getValueAsDouble()
  overload: com.fasterxml.jackson.core.JsonParser.getValueAsDouble*
  type: Method
  package: com.fasterxml.jackson.core
  summary: >-
    Method that will try to convert value of current token to a Java **double**. Numbers are coerced using default Java rules; booleans convert to 0.0 (false) and 1.0 (true), and Strings are parsed using default Java language floating point parsing rules.


    If representation can not be converted to a double (including structured types like Objects and Arrays), default value of **0.0** will be returned; no exceptions are thrown.
  syntax:
    content: public double getValueAsDouble()
    return:
      type: double
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.JsonParser.getValueAsDouble(double)
  id: getValueAsDouble(double)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.JsonParser
  langs:
  - java
  name: getValueAsDouble(double def)
  nameWithType: JsonParser.getValueAsDouble(double def)
  fullName: com.fasterxml.jackson.core.JsonParser.getValueAsDouble(double def)
  overload: com.fasterxml.jackson.core.JsonParser.getValueAsDouble*
  type: Method
  package: com.fasterxml.jackson.core
  summary: >-
    Method that will try to convert value of current token to a Java **double**. Numbers are coerced using default Java rules; booleans convert to 0.0 (false) and 1.0 (true), and Strings are parsed using default Java language floating point parsing rules.


    If representation can not be converted to a double (including structured types like Objects and Arrays), specified **def** will be returned; no exceptions are thrown.
  syntax:
    content: public double getValueAsDouble(double def)
    parameters:
    - id: def
      type: double
    return:
      type: double
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.JsonParser.getValueAsInt()
  id: getValueAsInt()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.JsonParser
  langs:
  - java
  name: getValueAsInt()
  nameWithType: JsonParser.getValueAsInt()
  fullName: com.fasterxml.jackson.core.JsonParser.getValueAsInt()
  overload: com.fasterxml.jackson.core.JsonParser.getValueAsInt*
  type: Method
  package: com.fasterxml.jackson.core
  summary: >-
    Method that will try to convert value of current token to a **int**. Numbers are coerced using default Java rules; booleans convert to 0 (false) and 1 (true), and Strings are parsed using default Java language integer parsing rules.


    If representation can not be converted to an int (including structured type markers like start/end Object/Array) default value of **0** will be returned; no exceptions are thrown.
  syntax:
    content: public int getValueAsInt()
    return:
      type: int
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.JsonParser.getValueAsInt(int)
  id: getValueAsInt(int)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.JsonParser
  langs:
  - java
  name: getValueAsInt(int def)
  nameWithType: JsonParser.getValueAsInt(int def)
  fullName: com.fasterxml.jackson.core.JsonParser.getValueAsInt(int def)
  overload: com.fasterxml.jackson.core.JsonParser.getValueAsInt*
  type: Method
  package: com.fasterxml.jackson.core
  summary: >-
    Method that will try to convert value of current token to a **int**. Numbers are coerced using default Java rules; booleans convert to 0 (false) and 1 (true), and Strings are parsed using default Java language integer parsing rules.


    If representation can not be converted to an int (including structured type markers like start/end Object/Array) specified **def** will be returned; no exceptions are thrown.
  syntax:
    content: public int getValueAsInt(int def)
    parameters:
    - id: def
      type: int
    return:
      type: int
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.JsonParser.getValueAsLong()
  id: getValueAsLong()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.JsonParser
  langs:
  - java
  name: getValueAsLong()
  nameWithType: JsonParser.getValueAsLong()
  fullName: com.fasterxml.jackson.core.JsonParser.getValueAsLong()
  overload: com.fasterxml.jackson.core.JsonParser.getValueAsLong*
  type: Method
  package: com.fasterxml.jackson.core
  summary: >-
    Method that will try to convert value of current token to a **long**. Numbers are coerced using default Java rules; booleans convert to 0 (false) and 1 (true), and Strings are parsed using default Java language integer parsing rules.


    If representation can not be converted to a long (including structured type markers like start/end Object/Array) default value of **0L** will be returned; no exceptions are thrown.
  syntax:
    content: public long getValueAsLong()
    return:
      type: long
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.JsonParser.getValueAsLong(long)
  id: getValueAsLong(long)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.JsonParser
  langs:
  - java
  name: getValueAsLong(long def)
  nameWithType: JsonParser.getValueAsLong(long def)
  fullName: com.fasterxml.jackson.core.JsonParser.getValueAsLong(long def)
  overload: com.fasterxml.jackson.core.JsonParser.getValueAsLong*
  type: Method
  package: com.fasterxml.jackson.core
  summary: >-
    Method that will try to convert value of current token to a **long**. Numbers are coerced using default Java rules; booleans convert to 0 (false) and 1 (true), and Strings are parsed using default Java language integer parsing rules.


    If representation can not be converted to a long (including structured type markers like start/end Object/Array) specified **def** will be returned; no exceptions are thrown.
  syntax:
    content: public long getValueAsLong(long def)
    parameters:
    - id: def
      type: long
    return:
      type: long
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.JsonParser.getValueAsString()
  id: getValueAsString()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.JsonParser
  langs:
  - java
  name: getValueAsString()
  nameWithType: JsonParser.getValueAsString()
  fullName: com.fasterxml.jackson.core.JsonParser.getValueAsString()
  overload: com.fasterxml.jackson.core.JsonParser.getValueAsString*
  type: Method
  package: com.fasterxml.jackson.core
  summary: Method that will try to convert value of current token to a <xref uid="java.lang.String" data-throw-if-not-resolved="false">java.lang.String</xref>. JSON Strings map naturally; scalar values get converted to their textual representation. If representation can not be converted to a String value (including structured types like Objects and Arrays and null token), default value of **null** will be returned; no exceptions are thrown.
  syntax:
    content: public String getValueAsString()
    return:
      type: java.lang.String
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.JsonParser.getValueAsString(java.lang.String)
  id: getValueAsString(java.lang.String)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.JsonParser
  langs:
  - java
  name: getValueAsString(String def)
  nameWithType: JsonParser.getValueAsString(String def)
  fullName: com.fasterxml.jackson.core.JsonParser.getValueAsString(String def)
  overload: com.fasterxml.jackson.core.JsonParser.getValueAsString*
  type: Method
  package: com.fasterxml.jackson.core
  summary: Method that will try to convert value of current token to a <xref uid="java.lang.String" data-throw-if-not-resolved="false">java.lang.String</xref>. JSON Strings map naturally; scalar values get converted to their textual representation. If representation can not be converted to a String value (including structured types like Objects and Arrays and null token), specified default value will be returned; no exceptions are thrown.
  syntax:
    content: public abstract String getValueAsString(String def)
    parameters:
    - id: def
      type: java.lang.String
    return:
      type: java.lang.String
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.JsonParser.hasCurrentToken()
  id: hasCurrentToken()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.JsonParser
  langs:
  - java
  name: hasCurrentToken()
  nameWithType: JsonParser.hasCurrentToken()
  fullName: com.fasterxml.jackson.core.JsonParser.hasCurrentToken()
  overload: com.fasterxml.jackson.core.JsonParser.hasCurrentToken*
  type: Method
  package: com.fasterxml.jackson.core
  summary: Method for checking whether parser currently points to a token (and data for that token is available). Equivalent to check for `parser.getCurrentToken() != null`.
  syntax:
    content: public abstract boolean hasCurrentToken()
    return:
      type: boolean
      description: >-
        True if the parser just returned a valid
           token via <xref uid="com.fasterxml.jackson.core.JsonParser.nextToken*" data-throw-if-not-resolved="false">#nextToken</xref>; false otherwise (parser
           was just constructed, encountered end-of-input
           and returned null from <xref uid="com.fasterxml.jackson.core.JsonParser.nextToken*" data-throw-if-not-resolved="false">#nextToken</xref>, or the token
           has been consumed)
- uid: com.fasterxml.jackson.core.JsonParser.hasTextCharacters()
  id: hasTextCharacters()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.JsonParser
  langs:
  - java
  name: hasTextCharacters()
  nameWithType: JsonParser.hasTextCharacters()
  fullName: com.fasterxml.jackson.core.JsonParser.hasTextCharacters()
  overload: com.fasterxml.jackson.core.JsonParser.hasTextCharacters*
  type: Method
  package: com.fasterxml.jackson.core
  summary: >-
    Method that can be used to determine whether calling of <xref uid="com.fasterxml.jackson.core.JsonParser.getTextCharacters*" data-throw-if-not-resolved="false">#getTextCharacters</xref> would be the most efficient way to access textual content for the event parser currently points to.


    Default implementation simply returns false since only actual implementation class has knowledge of its internal buffering state. Implementations are strongly encouraged to properly override this method, to allow efficient copying of content by other code.
  syntax:
    content: public abstract boolean hasTextCharacters()
    return:
      type: boolean
      description: >-
        True if parser currently has character array that can
           be efficiently returned via <xref uid="com.fasterxml.jackson.core.JsonParser.getTextCharacters*" data-throw-if-not-resolved="false">#getTextCharacters</xref>; false
           means that it may or may not exist
- uid: com.fasterxml.jackson.core.JsonParser.hasToken(com.fasterxml.jackson.core.JsonToken)
  id: hasToken(com.fasterxml.jackson.core.JsonToken)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.JsonParser
  langs:
  - java
  name: hasToken(JsonToken t)
  nameWithType: JsonParser.hasToken(JsonToken t)
  fullName: com.fasterxml.jackson.core.JsonParser.hasToken(JsonToken t)
  overload: com.fasterxml.jackson.core.JsonParser.hasToken*
  type: Method
  package: com.fasterxml.jackson.core
  summary: >-
    Method that is functionally equivalent to: `return currentToken() == t` but may be more efficiently implemented.


    Note that no traversal or conversion is performed; so in some cases calling method like <xref uid="com.fasterxml.jackson.core.JsonParser.isExpectedStartArrayToken()" data-throw-if-not-resolved="false">#isExpectedStartArrayToken()</xref> is necessary instead.
  syntax:
    content: public abstract boolean hasToken(JsonToken t)
    parameters:
    - id: t
      type: com.fasterxml.jackson.core.JsonToken
    return:
      type: boolean
- uid: com.fasterxml.jackson.core.JsonParser.hasTokenId(int)
  id: hasTokenId(int)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.JsonParser
  langs:
  - java
  name: hasTokenId(int id)
  nameWithType: JsonParser.hasTokenId(int id)
  fullName: com.fasterxml.jackson.core.JsonParser.hasTokenId(int id)
  overload: com.fasterxml.jackson.core.JsonParser.hasTokenId*
  type: Method
  package: com.fasterxml.jackson.core
  summary: >-
    Method that is functionally equivalent to: `return currentTokenId() == id` but may be more efficiently implemented.


    Note that no traversal or conversion is performed; so in some cases calling method like <xref uid="com.fasterxml.jackson.core.JsonParser.isExpectedStartArrayToken()" data-throw-if-not-resolved="false">#isExpectedStartArrayToken()</xref> is necessary instead.
  syntax:
    content: public abstract boolean hasTokenId(int id)
    parameters:
    - id: id
      type: int
    return:
      type: boolean
- uid: com.fasterxml.jackson.core.JsonParser.isClosed()
  id: isClosed()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.JsonParser
  langs:
  - java
  name: isClosed()
  nameWithType: JsonParser.isClosed()
  fullName: com.fasterxml.jackson.core.JsonParser.isClosed()
  overload: com.fasterxml.jackson.core.JsonParser.isClosed*
  type: Method
  package: com.fasterxml.jackson.core
  summary: Method that can be called to determine whether this parser is closed or not. If it is closed, no new tokens can be retrieved by calling <xref uid="com.fasterxml.jackson.core.JsonParser.nextToken*" data-throw-if-not-resolved="false">#nextToken</xref> (and the underlying stream may be closed). Closing may be due to an explicit call to <xref uid="com.fasterxml.jackson.core.JsonParser.close*" data-throw-if-not-resolved="false">#close</xref> or because parser has encountered end of input.
  syntax:
    content: public abstract boolean isClosed()
    return:
      type: boolean
- uid: com.fasterxml.jackson.core.JsonParser.isEnabled(com.fasterxml.jackson.core.JsonParser.Feature)
  id: isEnabled(com.fasterxml.jackson.core.JsonParser.Feature)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.JsonParser
  langs:
  - java
  name: isEnabled(JsonParser.Feature f)
  nameWithType: JsonParser.isEnabled(JsonParser.Feature f)
  fullName: com.fasterxml.jackson.core.JsonParser.isEnabled(JsonParser.Feature f)
  overload: com.fasterxml.jackson.core.JsonParser.isEnabled*
  type: Method
  package: com.fasterxml.jackson.core
  summary: Method for checking whether specified <xref uid="" data-throw-if-not-resolved="false">Feature</xref> is enabled.
  syntax:
    content: public boolean isEnabled(JsonParser.Feature f)
    parameters:
    - id: f
      type: com.fasterxml.jackson.core.JsonParser.Feature
    return:
      type: boolean
- uid: com.fasterxml.jackson.core.JsonParser.isEnabled(com.fasterxml.jackson.core.StreamReadFeature)
  id: isEnabled(com.fasterxml.jackson.core.StreamReadFeature)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.JsonParser
  langs:
  - java
  name: isEnabled(StreamReadFeature f)
  nameWithType: JsonParser.isEnabled(StreamReadFeature f)
  fullName: com.fasterxml.jackson.core.JsonParser.isEnabled(StreamReadFeature f)
  overload: com.fasterxml.jackson.core.JsonParser.isEnabled*
  type: Method
  package: com.fasterxml.jackson.core
  summary: Method for checking whether specified <xref uid="" data-throw-if-not-resolved="false">Feature</xref> is enabled.
  syntax:
    content: public boolean isEnabled(StreamReadFeature f)
    parameters:
    - id: f
      type: com.fasterxml.jackson.core.StreamReadFeature
    return:
      type: boolean
- uid: com.fasterxml.jackson.core.JsonParser.isExpectedStartArrayToken()
  id: isExpectedStartArrayToken()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.JsonParser
  langs:
  - java
  name: isExpectedStartArrayToken()
  nameWithType: JsonParser.isExpectedStartArrayToken()
  fullName: com.fasterxml.jackson.core.JsonParser.isExpectedStartArrayToken()
  overload: com.fasterxml.jackson.core.JsonParser.isExpectedStartArrayToken*
  type: Method
  package: com.fasterxml.jackson.core
  summary: >-
    Specialized accessor that can be used to verify that the current token indicates start array (usually meaning that current token is <xref uid="com.fasterxml.jackson.core.JsonToken.START_ARRAY" data-throw-if-not-resolved="false">JsonToken#START_ARRAY</xref>) when start array is expected. For some specialized parsers this can return true for other cases as well; this is usually done to emulate arrays in cases underlying format is ambiguous (XML, for example, has no format-level difference between Objects and Arrays; it just has elements).


    Default implementation is equivalent to:


    ```java

    currentToken() == JsonToken.START_ARRAY

    ```


    but may be overridden by custom parser implementations.
  syntax:
    content: public boolean isExpectedStartArrayToken()
    return:
      type: boolean
      description: >-
        True if the current token can be considered as a
           start-array marker (such <xref uid="com.fasterxml.jackson.core.JsonToken.START_ARRAY" data-throw-if-not-resolved="false">JsonToken#START_ARRAY</xref>);
           false if not.
- uid: com.fasterxml.jackson.core.JsonParser.isExpectedStartObjectToken()
  id: isExpectedStartObjectToken()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.JsonParser
  langs:
  - java
  name: isExpectedStartObjectToken()
  nameWithType: JsonParser.isExpectedStartObjectToken()
  fullName: com.fasterxml.jackson.core.JsonParser.isExpectedStartObjectToken()
  overload: com.fasterxml.jackson.core.JsonParser.isExpectedStartObjectToken*
  type: Method
  package: com.fasterxml.jackson.core
  summary: Similar to <xref uid="com.fasterxml.jackson.core.JsonParser.isExpectedStartArrayToken()" data-throw-if-not-resolved="false">#isExpectedStartArrayToken()</xref>, but checks whether stream currently points to <xref uid="com.fasterxml.jackson.core.JsonToken.START_OBJECT" data-throw-if-not-resolved="false">JsonToken#START_OBJECT</xref>.
  syntax:
    content: public boolean isExpectedStartObjectToken()
    return:
      type: boolean
- uid: com.fasterxml.jackson.core.JsonParser.isNaN()
  id: isNaN()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.JsonParser
  langs:
  - java
  name: isNaN()
  nameWithType: JsonParser.isNaN()
  fullName: com.fasterxml.jackson.core.JsonParser.isNaN()
  overload: com.fasterxml.jackson.core.JsonParser.isNaN*
  type: Method
  package: com.fasterxml.jackson.core
  summary: 'Access for checking whether current token is a numeric value token, but one that is of "not-a-number" (NaN) variety (including both "NaN" AND positive/negative infinity!): not supported by all formats, but often supported for <xref uid="com.fasterxml.jackson.core.JsonToken.VALUE_NUMBER_FLOAT" data-throw-if-not-resolved="false">JsonToken#VALUE_NUMBER_FLOAT</xref>. NOTE: roughly equivalent to calling `!Double.isFinite()` on value you would get from calling <xref uid="com.fasterxml.jackson.core.JsonParser.getDoubleValue()" data-throw-if-not-resolved="false">#getDoubleValue()</xref>.'
  syntax:
    content: public boolean isNaN()
    return:
      type: boolean
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.JsonParser.nextBooleanValue()
  id: nextBooleanValue()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.JsonParser
  langs:
  - java
  name: nextBooleanValue()
  nameWithType: JsonParser.nextBooleanValue()
  fullName: com.fasterxml.jackson.core.JsonParser.nextBooleanValue()
  overload: com.fasterxml.jackson.core.JsonParser.nextBooleanValue*
  type: Method
  package: com.fasterxml.jackson.core
  summary: >-
    Method that fetches next token (as if calling <xref uid="com.fasterxml.jackson.core.JsonParser.nextToken*" data-throw-if-not-resolved="false">#nextToken</xref>) and if it is <xref uid="com.fasterxml.jackson.core.JsonToken.VALUE_TRUE" data-throw-if-not-resolved="false">JsonToken#VALUE_TRUE</xref> or <xref uid="com.fasterxml.jackson.core.JsonToken.VALUE_FALSE" data-throw-if-not-resolved="false">JsonToken#VALUE_FALSE</xref> returns matching Boolean value; otherwise return null. It is functionally equivalent to:


    ```java

    JsonToken t = nextToken();
      if (t == JsonToken.VALUE_TRUE) return Boolean.TRUE;
      if (t == JsonToken.VALUE_FALSE) return Boolean.FALSE;
      return null;
    ```


    but may be faster for parser to process, and can therefore be used if caller expects to get a Boolean value next from input.
  syntax:
    content: public Boolean nextBooleanValue()
    return:
      type: java.lang.Boolean
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.JsonParser.nextFieldName()
  id: nextFieldName()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.JsonParser
  langs:
  - java
  name: nextFieldName()
  nameWithType: JsonParser.nextFieldName()
  fullName: com.fasterxml.jackson.core.JsonParser.nextFieldName()
  overload: com.fasterxml.jackson.core.JsonParser.nextFieldName*
  type: Method
  package: com.fasterxml.jackson.core
  summary: Method that fetches next token (as if calling <xref uid="com.fasterxml.jackson.core.JsonParser.nextToken*" data-throw-if-not-resolved="false">#nextToken</xref>) and verifies whether it is <xref uid="com.fasterxml.jackson.core.JsonToken.FIELD_NAME" data-throw-if-not-resolved="false">JsonToken#FIELD_NAME</xref>; if it is, returns same as <xref uid="com.fasterxml.jackson.core.JsonParser.getCurrentName()" data-throw-if-not-resolved="false">#getCurrentName()</xref>, otherwise null.
  syntax:
    content: public String nextFieldName()
    return:
      type: java.lang.String
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.JsonParser.nextFieldName(com.fasterxml.jackson.core.SerializableString)
  id: nextFieldName(com.fasterxml.jackson.core.SerializableString)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.JsonParser
  langs:
  - java
  name: nextFieldName(SerializableString str)
  nameWithType: JsonParser.nextFieldName(SerializableString str)
  fullName: com.fasterxml.jackson.core.JsonParser.nextFieldName(SerializableString str)
  overload: com.fasterxml.jackson.core.JsonParser.nextFieldName*
  type: Method
  package: com.fasterxml.jackson.core
  summary: >-
    Method that fetches next token (as if calling <xref uid="com.fasterxml.jackson.core.JsonParser.nextToken*" data-throw-if-not-resolved="false">#nextToken</xref>) and verifies whether it is <xref uid="com.fasterxml.jackson.core.JsonToken.FIELD_NAME" data-throw-if-not-resolved="false">JsonToken#FIELD_NAME</xref> with specified name and returns result of that comparison. It is functionally equivalent to:


    ```java

    return (nextToken() == JsonToken.FIELD_NAME) && str.getValue().equals(getCurrentName());

    ```


    but may be faster for parser to verify, and can therefore be used if caller expects to get such a property name from input next.
  syntax:
    content: public boolean nextFieldName(SerializableString str)
    parameters:
    - id: str
      type: com.fasterxml.jackson.core.SerializableString
      description: >-
        Property name to compare next token to (if next token is
           <code>JsonToken.FIELD_NAME</code>)
    return:
      type: boolean
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.JsonParser.nextIntValue(int)
  id: nextIntValue(int)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.JsonParser
  langs:
  - java
  name: nextIntValue(int defaultValue)
  nameWithType: JsonParser.nextIntValue(int defaultValue)
  fullName: com.fasterxml.jackson.core.JsonParser.nextIntValue(int defaultValue)
  overload: com.fasterxml.jackson.core.JsonParser.nextIntValue*
  type: Method
  package: com.fasterxml.jackson.core
  summary: >-
    Method that fetches next token (as if calling <xref uid="com.fasterxml.jackson.core.JsonParser.nextToken*" data-throw-if-not-resolved="false">#nextToken</xref>) and if it is <xref uid="com.fasterxml.jackson.core.JsonToken.VALUE_NUMBER_INT" data-throw-if-not-resolved="false">JsonToken#VALUE_NUMBER_INT</xref> returns 32-bit int value; otherwise returns specified default value It is functionally equivalent to:


    ```java

    return (nextToken() == JsonToken.VALUE_NUMBER_INT) ? getIntValue() : defaultValue;

    ```


    but may be faster for parser to process, and can therefore be used if caller expects to get an int value next from input.
  syntax:
    content: public int nextIntValue(int defaultValue)
    parameters:
    - id: defaultValue
      type: int
    return:
      type: int
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.JsonParser.nextLongValue(long)
  id: nextLongValue(long)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.JsonParser
  langs:
  - java
  name: nextLongValue(long defaultValue)
  nameWithType: JsonParser.nextLongValue(long defaultValue)
  fullName: com.fasterxml.jackson.core.JsonParser.nextLongValue(long defaultValue)
  overload: com.fasterxml.jackson.core.JsonParser.nextLongValue*
  type: Method
  package: com.fasterxml.jackson.core
  summary: >-
    Method that fetches next token (as if calling <xref uid="com.fasterxml.jackson.core.JsonParser.nextToken*" data-throw-if-not-resolved="false">#nextToken</xref>) and if it is <xref uid="com.fasterxml.jackson.core.JsonToken.VALUE_NUMBER_INT" data-throw-if-not-resolved="false">JsonToken#VALUE_NUMBER_INT</xref> returns 64-bit long value; otherwise returns specified default value It is functionally equivalent to:


    ```java

    return (nextToken() == JsonToken.VALUE_NUMBER_INT) ? getLongValue() : defaultValue;

    ```


    but may be faster for parser to process, and can therefore be used if caller expects to get a long value next from input.
  syntax:
    content: public long nextLongValue(long defaultValue)
    parameters:
    - id: defaultValue
      type: long
    return:
      type: long
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.JsonParser.nextTextValue()
  id: nextTextValue()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.JsonParser
  langs:
  - java
  name: nextTextValue()
  nameWithType: JsonParser.nextTextValue()
  fullName: com.fasterxml.jackson.core.JsonParser.nextTextValue()
  overload: com.fasterxml.jackson.core.JsonParser.nextTextValue*
  type: Method
  package: com.fasterxml.jackson.core
  summary: >-
    Method that fetches next token (as if calling <xref uid="com.fasterxml.jackson.core.JsonParser.nextToken*" data-throw-if-not-resolved="false">#nextToken</xref>) and if it is <xref uid="com.fasterxml.jackson.core.JsonToken.VALUE_STRING" data-throw-if-not-resolved="false">JsonToken#VALUE_STRING</xref> returns contained String value; otherwise returns null. It is functionally equivalent to:


    ```java

    return (nextToken() == JsonToken.VALUE_STRING) ? getText() : null;

    ```


    but may be faster for parser to process, and can therefore be used if caller expects to get a String value next from input.
  syntax:
    content: public String nextTextValue()
    return:
      type: java.lang.String
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.JsonParser.nextToken()
  id: nextToken()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.JsonParser
  langs:
  - java
  name: nextToken()
  nameWithType: JsonParser.nextToken()
  fullName: com.fasterxml.jackson.core.JsonParser.nextToken()
  overload: com.fasterxml.jackson.core.JsonParser.nextToken*
  type: Method
  package: com.fasterxml.jackson.core
  summary: Main iteration method, which will advance stream enough to determine type of the next token, if any. If none remaining (stream has no content other than possible white space before ending), null will be returned.
  syntax:
    content: public abstract JsonToken nextToken()
    return:
      type: com.fasterxml.jackson.core.JsonToken
      description: >-
        Next token from the stream, if any found, or null
           to indicate end-of-input
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.JsonParser.nextValue()
  id: nextValue()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.JsonParser
  langs:
  - java
  name: nextValue()
  nameWithType: JsonParser.nextValue()
  fullName: com.fasterxml.jackson.core.JsonParser.nextValue()
  overload: com.fasterxml.jackson.core.JsonParser.nextValue*
  type: Method
  package: com.fasterxml.jackson.core
  summary: Iteration method that will advance stream enough to determine type of the next token that is a value type (including JSON Array and Object start/end markers). Or put another way, nextToken() will be called once, and if <xref uid="com.fasterxml.jackson.core.JsonToken.FIELD_NAME" data-throw-if-not-resolved="false">JsonToken#FIELD_NAME</xref> is returned, another time to get the value for the field. Method is most useful for iterating over value entries of JSON objects; field name will still be available by calling <xref uid="com.fasterxml.jackson.core.JsonParser.getCurrentName*" data-throw-if-not-resolved="false">#getCurrentName</xref> when parser points to the value.
  syntax:
    content: public abstract JsonToken nextValue()
    return:
      type: com.fasterxml.jackson.core.JsonToken
      description: >-
        Next non-field-name token from the stream, if any found,
           or null to indicate end-of-input (or, for non-blocking
           parsers, <xref uid="com.fasterxml.jackson.core.JsonToken.NOT_AVAILABLE" data-throw-if-not-resolved="false">JsonToken#NOT_AVAILABLE</xref> if no tokens were
           available yet)
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.JsonParser.overrideCurrentName(java.lang.String)
  id: overrideCurrentName(java.lang.String)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.JsonParser
  langs:
  - java
  name: overrideCurrentName(String name)
  nameWithType: JsonParser.overrideCurrentName(String name)
  fullName: com.fasterxml.jackson.core.JsonParser.overrideCurrentName(String name)
  overload: com.fasterxml.jackson.core.JsonParser.overrideCurrentName*
  type: Method
  package: com.fasterxml.jackson.core
  summary: >-
    Method that can be used to change what is considered to be the current (field) name. May be needed to support non-JSON data formats or unusual binding conventions; not needed for typical processing.


    Note that use of this method should only be done as sort of last resort, as it is a work-around for regular operation.
  syntax:
    content: public abstract void overrideCurrentName(String name)
    parameters:
    - id: name
      type: java.lang.String
      description: Name to use as the current name; may be null.
- uid: com.fasterxml.jackson.core.JsonParser.overrideFormatFeatures(int,int)
  id: overrideFormatFeatures(int,int)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.JsonParser
  langs:
  - java
  name: overrideFormatFeatures(int values, int mask)
  nameWithType: JsonParser.overrideFormatFeatures(int values, int mask)
  fullName: com.fasterxml.jackson.core.JsonParser.overrideFormatFeatures(int values, int mask)
  overload: com.fasterxml.jackson.core.JsonParser.overrideFormatFeatures*
  type: Method
  package: com.fasterxml.jackson.core
  summary: >-
    Bulk set method for (re)setting states of <xref uid="com.fasterxml.jackson.core.FormatFeature" data-throw-if-not-resolved="false">FormatFeature</xref>s, by specifying values (set / clear) along with a mask, to determine which features to change, if any.


    Default implementation will simply throw an exception to indicate that the generator implementation does not support any <xref uid="com.fasterxml.jackson.core.FormatFeature" data-throw-if-not-resolved="false">FormatFeature</xref>s.
  syntax:
    content: public JsonParser overrideFormatFeatures(int values, int mask)
    parameters:
    - id: values
      type: int
      description: Bit mask of set/clear state for features to change
    - id: mask
      type: int
      description: Bit mask of features to change
    return:
      type: com.fasterxml.jackson.core.JsonParser
- uid: com.fasterxml.jackson.core.JsonParser.overrideStdFeatures(int,int)
  id: overrideStdFeatures(int,int)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.JsonParser
  langs:
  - java
  name: overrideStdFeatures(int values, int mask)
  nameWithType: JsonParser.overrideStdFeatures(int values, int mask)
  fullName: com.fasterxml.jackson.core.JsonParser.overrideStdFeatures(int values, int mask)
  overload: com.fasterxml.jackson.core.JsonParser.overrideStdFeatures*
  type: Method
  package: com.fasterxml.jackson.core
  summary: Bulk set method for (re)setting states of features specified by `mask`. Functionally equivalent to `int oldState = getFeatureMask(); int newState = (oldState & ~mask) | (values & mask); setFeatureMask(newState);` but preferred as this lets caller more efficiently specify actual changes made.
  syntax:
    content: public JsonParser overrideStdFeatures(int values, int mask)
    parameters:
    - id: values
      type: int
      description: Bit mask of set/clear state for features to change
    - id: mask
      type: int
      description: Bit mask of features to change
    return:
      type: com.fasterxml.jackson.core.JsonParser
- uid: com.fasterxml.jackson.core.JsonParser.readBinaryValue(com.fasterxml.jackson.core.Base64Variant,java.io.OutputStream)
  id: readBinaryValue(com.fasterxml.jackson.core.Base64Variant,java.io.OutputStream)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.JsonParser
  langs:
  - java
  name: readBinaryValue(Base64Variant bv, OutputStream out)
  nameWithType: JsonParser.readBinaryValue(Base64Variant bv, OutputStream out)
  fullName: com.fasterxml.jackson.core.JsonParser.readBinaryValue(Base64Variant bv, OutputStream out)
  overload: com.fasterxml.jackson.core.JsonParser.readBinaryValue*
  type: Method
  package: com.fasterxml.jackson.core
  summary: Similar to <xref uid="com.fasterxml.jackson.core.JsonParser.readBinaryValue(java.io.OutputStream)" data-throw-if-not-resolved="false">#readBinaryValue(OutputStream)</xref> but allows explicitly specifying base64 variant to use.
  syntax:
    content: public int readBinaryValue(Base64Variant bv, OutputStream out)
    parameters:
    - id: bv
      type: com.fasterxml.jackson.core.Base64Variant
      description: base64 variant to use
    - id: out
      type: java.io.OutputStream
      description: Output stream to use for passing decoded binary data
    return:
      type: int
      description: Number of bytes that were decoded and written via <xref uid="java.io.OutputStream" data-throw-if-not-resolved="false">OutputStream</xref>
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.JsonParser.readBinaryValue(java.io.OutputStream)
  id: readBinaryValue(java.io.OutputStream)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.JsonParser
  langs:
  - java
  name: readBinaryValue(OutputStream out)
  nameWithType: JsonParser.readBinaryValue(OutputStream out)
  fullName: com.fasterxml.jackson.core.JsonParser.readBinaryValue(OutputStream out)
  overload: com.fasterxml.jackson.core.JsonParser.readBinaryValue*
  type: Method
  package: com.fasterxml.jackson.core
  summary: 'Method that can be used as an alternative to <xref uid="com.fasterxml.jackson.core.JsonParser.getBigIntegerValue()" data-throw-if-not-resolved="false">#getBigIntegerValue()</xref>, especially when value can be large. The main difference (beyond method of returning content using <xref uid="java.io.OutputStream" data-throw-if-not-resolved="false">OutputStream</xref> instead of as byte array) is that content will NOT remain accessible after method returns: any content processed will be consumed and is not buffered in any way. If caller needs buffering, it has to implement it.'
  syntax:
    content: public int readBinaryValue(OutputStream out)
    parameters:
    - id: out
      type: java.io.OutputStream
      description: Output stream to use for passing decoded binary data
    return:
      type: int
      description: Number of bytes that were decoded and written via <xref uid="java.io.OutputStream" data-throw-if-not-resolved="false">OutputStream</xref>
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.JsonParser.releaseBuffered(java.io.OutputStream)
  id: releaseBuffered(java.io.OutputStream)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.JsonParser
  langs:
  - java
  name: releaseBuffered(OutputStream out)
  nameWithType: JsonParser.releaseBuffered(OutputStream out)
  fullName: com.fasterxml.jackson.core.JsonParser.releaseBuffered(OutputStream out)
  overload: com.fasterxml.jackson.core.JsonParser.releaseBuffered*
  type: Method
  package: com.fasterxml.jackson.core
  summary: Method that can be called to push back any content that has been read but not consumed by the parser. This is usually done after reading all content of interest using parser. Content is released by writing it to given stream if possible; if underlying input is byte-based it can released, if not (char-based) it can not.
  syntax:
    content: public int releaseBuffered(OutputStream out)
    parameters:
    - id: out
      type: java.io.OutputStream
    return:
      type: int
      description: >-
        -1 if the underlying content source is not byte based
            (that is, input can not be sent to <xref uid="java.io.OutputStream" data-throw-if-not-resolved="false">OutputStream</xref>;
            otherwise number of bytes released (0 if there was nothing to release)
  exceptions:
  - type: java.io.IOException
    description: if write to stream threw exception
- uid: com.fasterxml.jackson.core.JsonParser.releaseBuffered(java.io.Writer)
  id: releaseBuffered(java.io.Writer)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.JsonParser
  langs:
  - java
  name: releaseBuffered(Writer w)
  nameWithType: JsonParser.releaseBuffered(Writer w)
  fullName: com.fasterxml.jackson.core.JsonParser.releaseBuffered(Writer w)
  overload: com.fasterxml.jackson.core.JsonParser.releaseBuffered*
  type: Method
  package: com.fasterxml.jackson.core
  summary: Method that can be called to push back any content that has been read but not consumed by the parser. This is usually done after reading all content of interest using parser. Content is released by writing it to given writer if possible; if underlying input is char-based it can released, if not (byte-based) it can not.
  syntax:
    content: public int releaseBuffered(Writer w)
    parameters:
    - id: w
      type: java.io.Writer
    return:
      type: int
      description: >-
        -1 if the underlying content source is not char-based
            (that is, input can not be sent to <xref uid="java.io.Writer" data-throw-if-not-resolved="false">Writer</xref>;
            otherwise number of chars released (0 if there was nothing to release)
  exceptions:
  - type: java.io.IOException
    description: if write using Writer threw exception
- uid: com.fasterxml.jackson.core.JsonParser.requiresCustomCodec()
  id: requiresCustomCodec()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.JsonParser
  langs:
  - java
  name: requiresCustomCodec()
  nameWithType: JsonParser.requiresCustomCodec()
  fullName: com.fasterxml.jackson.core.JsonParser.requiresCustomCodec()
  overload: com.fasterxml.jackson.core.JsonParser.requiresCustomCodec*
  type: Method
  package: com.fasterxml.jackson.core
  summary: Method that can be called to determine if a custom <xref uid="com.fasterxml.jackson.core.ObjectCodec" data-throw-if-not-resolved="false">ObjectCodec</xref> is needed for binding data parsed using <xref uid="com.fasterxml.jackson.core.JsonParser" data-throw-if-not-resolved="false">JsonParser</xref> constructed by this factory (which typically also implies the same for serialization with <xref uid="com.fasterxml.jackson.core.JsonGenerator" data-throw-if-not-resolved="false">JsonGenerator</xref>).
  syntax:
    content: public boolean requiresCustomCodec()
    return:
      type: boolean
      description: >-
        True if custom codec is needed with parsers and
           generators created by this factory; false if a general
           <xref uid="com.fasterxml.jackson.core.ObjectCodec" data-throw-if-not-resolved="false">ObjectCodec</xref> is enough
- uid: com.fasterxml.jackson.core.JsonParser.setCodec(com.fasterxml.jackson.core.ObjectCodec)
  id: setCodec(com.fasterxml.jackson.core.ObjectCodec)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.JsonParser
  langs:
  - java
  name: setCodec(ObjectCodec c)
  nameWithType: JsonParser.setCodec(ObjectCodec c)
  fullName: com.fasterxml.jackson.core.JsonParser.setCodec(ObjectCodec c)
  overload: com.fasterxml.jackson.core.JsonParser.setCodec*
  type: Method
  package: com.fasterxml.jackson.core
  summary: Setter that allows defining <xref uid="com.fasterxml.jackson.core.ObjectCodec" data-throw-if-not-resolved="false">ObjectCodec</xref> associated with this parser, if any. Codec is used by <xref uid="com.fasterxml.jackson.core.JsonParser.&lt;T&gt;readValueAs(java.lang.Class&lt;T&gt;)" data-throw-if-not-resolved="false">#readValueAs(Class)</xref> method (and its variants).
  syntax:
    content: public abstract void setCodec(ObjectCodec c)
    parameters:
    - id: c
      type: com.fasterxml.jackson.core.ObjectCodec
- uid: com.fasterxml.jackson.core.JsonParser.setCurrentValue(java.lang.Object)
  id: setCurrentValue(java.lang.Object)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.JsonParser
  langs:
  - java
  name: setCurrentValue(Object v)
  nameWithType: JsonParser.setCurrentValue(Object v)
  fullName: com.fasterxml.jackson.core.JsonParser.setCurrentValue(Object v)
  overload: com.fasterxml.jackson.core.JsonParser.setCurrentValue*
  type: Method
  package: com.fasterxml.jackson.core
  summary: 'Helper method, usually equivalent to: `getParsingContext().setCurrentValue(v);`'
  syntax:
    content: public void setCurrentValue(Object v)
    parameters:
    - id: v
      type: java.lang.Object
- uid: com.fasterxml.jackson.core.JsonParser.setFeatureMask(int)
  id: setFeatureMask(int)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.JsonParser
  langs:
  - java
  name: setFeatureMask(int mask)
  nameWithType: JsonParser.setFeatureMask(int mask)
  fullName: com.fasterxml.jackson.core.JsonParser.setFeatureMask(int mask)
  overload: com.fasterxml.jackson.core.JsonParser.setFeatureMask*
  type: Method
  package: com.fasterxml.jackson.core
  summary: Bulk set method for (re)setting states of all standard <xref uid="" data-throw-if-not-resolved="false">Feature</xref>s
  syntax:
    content: public JsonParser setFeatureMask(int mask)
    parameters:
    - id: mask
      type: int
    return:
      type: com.fasterxml.jackson.core.JsonParser
      description: This parser object, to allow chaining of calls
- uid: com.fasterxml.jackson.core.JsonParser.setRequestPayloadOnError(byte[],java.lang.String)
  id: setRequestPayloadOnError(byte[],java.lang.String)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.JsonParser
  langs:
  - java
  name: setRequestPayloadOnError(byte[] payload, String charset)
  nameWithType: JsonParser.setRequestPayloadOnError(byte[] payload, String charset)
  fullName: com.fasterxml.jackson.core.JsonParser.setRequestPayloadOnError(byte[] payload, String charset)
  overload: com.fasterxml.jackson.core.JsonParser.setRequestPayloadOnError*
  type: Method
  package: com.fasterxml.jackson.core
  summary: Sets the byte\[\] request payload and the charset
  syntax:
    content: public void setRequestPayloadOnError(byte[] payload, String charset)
    parameters:
    - id: payload
      type: byte[]
    - id: charset
      type: java.lang.String
- uid: com.fasterxml.jackson.core.JsonParser.setRequestPayloadOnError(com.fasterxml.jackson.core.util.RequestPayload)
  id: setRequestPayloadOnError(com.fasterxml.jackson.core.util.RequestPayload)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.JsonParser
  langs:
  - java
  name: setRequestPayloadOnError(RequestPayload payload)
  nameWithType: JsonParser.setRequestPayloadOnError(RequestPayload payload)
  fullName: com.fasterxml.jackson.core.JsonParser.setRequestPayloadOnError(RequestPayload payload)
  overload: com.fasterxml.jackson.core.JsonParser.setRequestPayloadOnError*
  type: Method
  package: com.fasterxml.jackson.core
  summary: Sets the payload to be passed if <xref uid="com.fasterxml.jackson.core.JsonParseException" data-throw-if-not-resolved="false">JsonParseException</xref> is thrown.
  syntax:
    content: public void setRequestPayloadOnError(RequestPayload payload)
    parameters:
    - id: payload
      type: com.fasterxml.jackson.core.util.RequestPayload
- uid: com.fasterxml.jackson.core.JsonParser.setRequestPayloadOnError(java.lang.String)
  id: setRequestPayloadOnError(java.lang.String)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.JsonParser
  langs:
  - java
  name: setRequestPayloadOnError(String payload)
  nameWithType: JsonParser.setRequestPayloadOnError(String payload)
  fullName: com.fasterxml.jackson.core.JsonParser.setRequestPayloadOnError(String payload)
  overload: com.fasterxml.jackson.core.JsonParser.setRequestPayloadOnError*
  type: Method
  package: com.fasterxml.jackson.core
  summary: Sets the String request payload
  syntax:
    content: public void setRequestPayloadOnError(String payload)
    parameters:
    - id: payload
      type: java.lang.String
- uid: com.fasterxml.jackson.core.JsonParser.setSchema(com.fasterxml.jackson.core.FormatSchema)
  id: setSchema(com.fasterxml.jackson.core.FormatSchema)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.JsonParser
  langs:
  - java
  name: setSchema(FormatSchema schema)
  nameWithType: JsonParser.setSchema(FormatSchema schema)
  fullName: com.fasterxml.jackson.core.JsonParser.setSchema(FormatSchema schema)
  overload: com.fasterxml.jackson.core.JsonParser.setSchema*
  type: Method
  package: com.fasterxml.jackson.core
  summary: >-
    Method to call to make this parser use specified schema. Method must be called before trying to parse any content, right after parser instance has been created. Note that not all parsers support schemas; and those that do usually only accept specific types of schemas: ones defined for data format parser can read.


    If parser does not support specified schema, <xref uid="java.lang.UnsupportedOperationException" data-throw-if-not-resolved="false">UnsupportedOperationException</xref> is thrown.
  syntax:
    content: public void setSchema(FormatSchema schema)
    parameters:
    - id: schema
      type: com.fasterxml.jackson.core.FormatSchema
      description: Schema to use
- uid: com.fasterxml.jackson.core.JsonParser.skipChildren()
  id: skipChildren()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.JsonParser
  langs:
  - java
  name: skipChildren()
  nameWithType: JsonParser.skipChildren()
  fullName: com.fasterxml.jackson.core.JsonParser.skipChildren()
  overload: com.fasterxml.jackson.core.JsonParser.skipChildren*
  type: Method
  package: com.fasterxml.jackson.core
  summary: Method that will skip all child tokens of an array or object token that the parser currently points to, iff stream points to <xref uid="com.fasterxml.jackson.core.JsonToken.START_OBJECT" data-throw-if-not-resolved="false">JsonToken#START_OBJECT</xref> or <xref uid="com.fasterxml.jackson.core.JsonToken.START_ARRAY" data-throw-if-not-resolved="false">JsonToken#START_ARRAY</xref>. If not, it will do nothing. After skipping, stream will point to **matching** <xref uid="com.fasterxml.jackson.core.JsonToken.END_OBJECT" data-throw-if-not-resolved="false">JsonToken#END_OBJECT</xref> or <xref uid="com.fasterxml.jackson.core.JsonToken.END_ARRAY" data-throw-if-not-resolved="false">JsonToken#END_ARRAY</xref> (possibly skipping nested pairs of START/END OBJECT/ARRAY tokens as well as value tokens). The idea is that after calling this method, application will call <xref uid="com.fasterxml.jackson.core.JsonParser.nextToken*" data-throw-if-not-resolved="false">#nextToken</xref> to point to the next available token, if any.
  syntax:
    content: public abstract JsonParser skipChildren()
    return:
      type: com.fasterxml.jackson.core.JsonParser
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.JsonParser.version()
  id: version()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.JsonParser
  langs:
  - java
  name: version()
  nameWithType: JsonParser.version()
  fullName: com.fasterxml.jackson.core.JsonParser.version()
  overload: com.fasterxml.jackson.core.JsonParser.version*
  type: Method
  package: com.fasterxml.jackson.core
  summary: Accessor for getting version of the core package, given a parser instance. Left for sub-classes to implement.
  syntax:
    content: public abstract Version version()
    return:
      type: com.fasterxml.jackson.core.Version
references:
- uid: com.fasterxml.jackson.core.JsonParser.JsonParser*
  name: JsonParser
  nameWithType: JsonParser.JsonParser
  fullName: com.fasterxml.jackson.core.JsonParser.JsonParser
  package: com.fasterxml.jackson.core
- uid: int
  spec.java:
  - uid: int
    name: int
    fullName: int
- uid: com.fasterxml.jackson.core.ObjectCodec
  name: ObjectCodec
  nameWithType: ObjectCodec
  fullName: com.fasterxml.jackson.core.ObjectCodec
- uid: com.fasterxml.jackson.core.JsonParser.getCodec*
  name: getCodec
  nameWithType: JsonParser.getCodec
  fullName: com.fasterxml.jackson.core.JsonParser.getCodec
  package: com.fasterxml.jackson.core
- uid: com.fasterxml.jackson.core.JsonParser.setCodec*
  name: setCodec
  nameWithType: JsonParser.setCodec
  fullName: com.fasterxml.jackson.core.JsonParser.setCodec
  package: com.fasterxml.jackson.core
- uid: java.lang.Object
  spec.java:
  - uid: java.lang.Object
    name: Object
    fullName: java.lang.Object
- uid: com.fasterxml.jackson.core.JsonParser.getInputSource*
  name: getInputSource
  nameWithType: JsonParser.getInputSource
  fullName: com.fasterxml.jackson.core.JsonParser.getInputSource
  package: com.fasterxml.jackson.core
- uid: com.fasterxml.jackson.core.JsonParser.getCurrentValue*
  name: getCurrentValue
  nameWithType: JsonParser.getCurrentValue
  fullName: com.fasterxml.jackson.core.JsonParser.getCurrentValue
  package: com.fasterxml.jackson.core
- uid: com.fasterxml.jackson.core.JsonParser.setCurrentValue*
  name: setCurrentValue
  nameWithType: JsonParser.setCurrentValue
  fullName: com.fasterxml.jackson.core.JsonParser.setCurrentValue
  package: com.fasterxml.jackson.core
- uid: com.fasterxml.jackson.core.util.RequestPayload
  name: RequestPayload
  nameWithType: RequestPayload
  fullName: com.fasterxml.jackson.core.util.RequestPayload
- uid: com.fasterxml.jackson.core.JsonParser.setRequestPayloadOnError*
  name: setRequestPayloadOnError
  nameWithType: JsonParser.setRequestPayloadOnError
  fullName: com.fasterxml.jackson.core.JsonParser.setRequestPayloadOnError
  package: com.fasterxml.jackson.core
- uid: byte[]
  spec.java:
  - uid: byte
    name: byte
    fullName: byte
  - name: '[]'
    fullName: '[]'
- uid: java.lang.String
  spec.java:
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
- uid: com.fasterxml.jackson.core.FormatSchema
  name: FormatSchema
  nameWithType: FormatSchema
  fullName: com.fasterxml.jackson.core.FormatSchema
- uid: com.fasterxml.jackson.core.JsonParser.setSchema*
  name: setSchema
  nameWithType: JsonParser.setSchema
  fullName: com.fasterxml.jackson.core.JsonParser.setSchema
  package: com.fasterxml.jackson.core
- uid: com.fasterxml.jackson.core.JsonParser.getSchema*
  name: getSchema
  nameWithType: JsonParser.getSchema
  fullName: com.fasterxml.jackson.core.JsonParser.getSchema
  package: com.fasterxml.jackson.core
- uid: boolean
  spec.java:
  - uid: boolean
    name: boolean
    fullName: boolean
- uid: com.fasterxml.jackson.core.JsonParser.canUseSchema*
  name: canUseSchema
  nameWithType: JsonParser.canUseSchema
  fullName: com.fasterxml.jackson.core.JsonParser.canUseSchema
  package: com.fasterxml.jackson.core
- uid: com.fasterxml.jackson.core.JsonParser.requiresCustomCodec*
  name: requiresCustomCodec
  nameWithType: JsonParser.requiresCustomCodec
  fullName: com.fasterxml.jackson.core.JsonParser.requiresCustomCodec
  package: com.fasterxml.jackson.core
- uid: com.fasterxml.jackson.core.JsonParser.canParseAsync*
  name: canParseAsync
  nameWithType: JsonParser.canParseAsync
  fullName: com.fasterxml.jackson.core.JsonParser.canParseAsync
  package: com.fasterxml.jackson.core
- uid: com.fasterxml.jackson.core.async.NonBlockingInputFeeder
  name: NonBlockingInputFeeder
  nameWithType: NonBlockingInputFeeder
  fullName: com.fasterxml.jackson.core.async.NonBlockingInputFeeder
- uid: com.fasterxml.jackson.core.JsonParser.getNonBlockingInputFeeder*
  name: getNonBlockingInputFeeder
  nameWithType: JsonParser.getNonBlockingInputFeeder
  fullName: com.fasterxml.jackson.core.JsonParser.getNonBlockingInputFeeder
  package: com.fasterxml.jackson.core
- uid: com.fasterxml.jackson.core.Version
  name: Version
  nameWithType: Version
  fullName: com.fasterxml.jackson.core.Version
- uid: com.fasterxml.jackson.core.JsonParser.version*
  name: version
  nameWithType: JsonParser.version
  fullName: com.fasterxml.jackson.core.JsonParser.version
  package: com.fasterxml.jackson.core
- uid: java.io.IOException
  spec.java:
  - uid: java.io.IOException
    name: IOException
    fullName: java.io.IOException
- uid: com.fasterxml.jackson.core.JsonParser.close*
  name: close
  nameWithType: JsonParser.close
  fullName: com.fasterxml.jackson.core.JsonParser.close
  package: com.fasterxml.jackson.core
- uid: com.fasterxml.jackson.core.JsonParser.isClosed*
  name: isClosed
  nameWithType: JsonParser.isClosed
  fullName: com.fasterxml.jackson.core.JsonParser.isClosed
  package: com.fasterxml.jackson.core
- uid: com.fasterxml.jackson.core.JsonStreamContext
  name: JsonStreamContext
  nameWithType: JsonStreamContext
  fullName: com.fasterxml.jackson.core.JsonStreamContext
- uid: com.fasterxml.jackson.core.JsonParser.getParsingContext*
  name: getParsingContext
  nameWithType: JsonParser.getParsingContext
  fullName: com.fasterxml.jackson.core.JsonParser.getParsingContext
  package: com.fasterxml.jackson.core
- uid: com.fasterxml.jackson.core.JsonLocation
  name: JsonLocation
  nameWithType: JsonLocation
  fullName: com.fasterxml.jackson.core.JsonLocation
- uid: com.fasterxml.jackson.core.JsonParser.getTokenLocation*
  name: getTokenLocation
  nameWithType: JsonParser.getTokenLocation
  fullName: com.fasterxml.jackson.core.JsonParser.getTokenLocation
  package: com.fasterxml.jackson.core
- uid: com.fasterxml.jackson.core.JsonParser.getCurrentLocation*
  name: getCurrentLocation
  nameWithType: JsonParser.getCurrentLocation
  fullName: com.fasterxml.jackson.core.JsonParser.getCurrentLocation
  package: com.fasterxml.jackson.core
- uid: java.io.OutputStream
  spec.java:
  - uid: java.io.OutputStream
    name: OutputStream
    fullName: java.io.OutputStream
- uid: com.fasterxml.jackson.core.JsonParser.releaseBuffered*
  name: releaseBuffered
  nameWithType: JsonParser.releaseBuffered
  fullName: com.fasterxml.jackson.core.JsonParser.releaseBuffered
  package: com.fasterxml.jackson.core
- uid: java.io.Writer
  spec.java:
  - uid: java.io.Writer
    name: Writer
    fullName: java.io.Writer
- uid: com.fasterxml.jackson.core.JsonParser.Feature
  name: JsonParser.Feature
  nameWithType: JsonParser.Feature
  fullName: com.fasterxml.jackson.core.JsonParser.Feature
- uid: com.fasterxml.jackson.core.JsonParser.enable*
  name: enable
  nameWithType: JsonParser.enable
  fullName: com.fasterxml.jackson.core.JsonParser.enable
  package: com.fasterxml.jackson.core
- uid: com.fasterxml.jackson.core.JsonParser.disable*
  name: disable
  nameWithType: JsonParser.disable
  fullName: com.fasterxml.jackson.core.JsonParser.disable
  package: com.fasterxml.jackson.core
- uid: com.fasterxml.jackson.core.JsonParser.configure*
  name: configure
  nameWithType: JsonParser.configure
  fullName: com.fasterxml.jackson.core.JsonParser.configure
  package: com.fasterxml.jackson.core
- uid: com.fasterxml.jackson.core.JsonParser.isEnabled*
  name: isEnabled
  nameWithType: JsonParser.isEnabled
  fullName: com.fasterxml.jackson.core.JsonParser.isEnabled
  package: com.fasterxml.jackson.core
- uid: com.fasterxml.jackson.core.StreamReadFeature
  name: StreamReadFeature
  nameWithType: StreamReadFeature
  fullName: com.fasterxml.jackson.core.StreamReadFeature
- uid: com.fasterxml.jackson.core.JsonParser.getFeatureMask*
  name: getFeatureMask
  nameWithType: JsonParser.getFeatureMask
  fullName: com.fasterxml.jackson.core.JsonParser.getFeatureMask
  package: com.fasterxml.jackson.core
- uid: com.fasterxml.jackson.core.JsonParser.setFeatureMask*
  name: setFeatureMask
  nameWithType: JsonParser.setFeatureMask
  fullName: com.fasterxml.jackson.core.JsonParser.setFeatureMask
  package: com.fasterxml.jackson.core
- uid: com.fasterxml.jackson.core.JsonParser.overrideStdFeatures*
  name: overrideStdFeatures
  nameWithType: JsonParser.overrideStdFeatures
  fullName: com.fasterxml.jackson.core.JsonParser.overrideStdFeatures
  package: com.fasterxml.jackson.core
- uid: com.fasterxml.jackson.core.JsonParser.getFormatFeatures*
  name: getFormatFeatures
  nameWithType: JsonParser.getFormatFeatures
  fullName: com.fasterxml.jackson.core.JsonParser.getFormatFeatures
  package: com.fasterxml.jackson.core
- uid: com.fasterxml.jackson.core.JsonParser.overrideFormatFeatures*
  name: overrideFormatFeatures
  nameWithType: JsonParser.overrideFormatFeatures
  fullName: com.fasterxml.jackson.core.JsonParser.overrideFormatFeatures
  package: com.fasterxml.jackson.core
- uid: com.fasterxml.jackson.core.JsonToken
  name: JsonToken
  nameWithType: JsonToken
  fullName: com.fasterxml.jackson.core.JsonToken
- uid: com.fasterxml.jackson.core.JsonParser.nextToken*
  name: nextToken
  nameWithType: JsonParser.nextToken
  fullName: com.fasterxml.jackson.core.JsonParser.nextToken
  package: com.fasterxml.jackson.core
- uid: com.fasterxml.jackson.core.JsonParser.nextValue*
  name: nextValue
  nameWithType: JsonParser.nextValue
  fullName: com.fasterxml.jackson.core.JsonParser.nextValue
  package: com.fasterxml.jackson.core
- uid: com.fasterxml.jackson.core.SerializableString
  name: SerializableString
  nameWithType: SerializableString
  fullName: com.fasterxml.jackson.core.SerializableString
- uid: com.fasterxml.jackson.core.JsonParser.nextFieldName*
  name: nextFieldName
  nameWithType: JsonParser.nextFieldName
  fullName: com.fasterxml.jackson.core.JsonParser.nextFieldName
  package: com.fasterxml.jackson.core
- uid: com.fasterxml.jackson.core.JsonParser.nextTextValue*
  name: nextTextValue
  nameWithType: JsonParser.nextTextValue
  fullName: com.fasterxml.jackson.core.JsonParser.nextTextValue
  package: com.fasterxml.jackson.core
- uid: com.fasterxml.jackson.core.JsonParser.nextIntValue*
  name: nextIntValue
  nameWithType: JsonParser.nextIntValue
  fullName: com.fasterxml.jackson.core.JsonParser.nextIntValue
  package: com.fasterxml.jackson.core
- uid: long
  spec.java:
  - uid: long
    name: long
    fullName: long
- uid: com.fasterxml.jackson.core.JsonParser.nextLongValue*
  name: nextLongValue
  nameWithType: JsonParser.nextLongValue
  fullName: com.fasterxml.jackson.core.JsonParser.nextLongValue
  package: com.fasterxml.jackson.core
- uid: java.lang.Boolean
  spec.java:
  - uid: java.lang.Boolean
    name: Boolean
    fullName: java.lang.Boolean
- uid: com.fasterxml.jackson.core.JsonParser.nextBooleanValue*
  name: nextBooleanValue
  nameWithType: JsonParser.nextBooleanValue
  fullName: com.fasterxml.jackson.core.JsonParser.nextBooleanValue
  package: com.fasterxml.jackson.core
- uid: com.fasterxml.jackson.core.JsonParser.skipChildren*
  name: skipChildren
  nameWithType: JsonParser.skipChildren
  fullName: com.fasterxml.jackson.core.JsonParser.skipChildren
  package: com.fasterxml.jackson.core
- uid: com.fasterxml.jackson.core.JsonParser.finishToken*
  name: finishToken
  nameWithType: JsonParser.finishToken
  fullName: com.fasterxml.jackson.core.JsonParser.finishToken
  package: com.fasterxml.jackson.core
- uid: com.fasterxml.jackson.core.JsonParser.currentToken*
  name: currentToken
  nameWithType: JsonParser.currentToken
  fullName: com.fasterxml.jackson.core.JsonParser.currentToken
  package: com.fasterxml.jackson.core
- uid: com.fasterxml.jackson.core.JsonParser.currentTokenId*
  name: currentTokenId
  nameWithType: JsonParser.currentTokenId
  fullName: com.fasterxml.jackson.core.JsonParser.currentTokenId
  package: com.fasterxml.jackson.core
- uid: com.fasterxml.jackson.core.JsonParser.getCurrentToken*
  name: getCurrentToken
  nameWithType: JsonParser.getCurrentToken
  fullName: com.fasterxml.jackson.core.JsonParser.getCurrentToken
  package: com.fasterxml.jackson.core
- uid: com.fasterxml.jackson.core.JsonParser.getCurrentTokenId*
  name: getCurrentTokenId
  nameWithType: JsonParser.getCurrentTokenId
  fullName: com.fasterxml.jackson.core.JsonParser.getCurrentTokenId
  package: com.fasterxml.jackson.core
- uid: com.fasterxml.jackson.core.JsonParser.hasCurrentToken*
  name: hasCurrentToken
  nameWithType: JsonParser.hasCurrentToken
  fullName: com.fasterxml.jackson.core.JsonParser.hasCurrentToken
  package: com.fasterxml.jackson.core
- uid: com.fasterxml.jackson.core.JsonParser.hasTokenId*
  name: hasTokenId
  nameWithType: JsonParser.hasTokenId
  fullName: com.fasterxml.jackson.core.JsonParser.hasTokenId
  package: com.fasterxml.jackson.core
- uid: com.fasterxml.jackson.core.JsonParser.hasToken*
  name: hasToken
  nameWithType: JsonParser.hasToken
  fullName: com.fasterxml.jackson.core.JsonParser.hasToken
  package: com.fasterxml.jackson.core
- uid: com.fasterxml.jackson.core.JsonParser.isExpectedStartArrayToken*
  name: isExpectedStartArrayToken
  nameWithType: JsonParser.isExpectedStartArrayToken
  fullName: com.fasterxml.jackson.core.JsonParser.isExpectedStartArrayToken
  package: com.fasterxml.jackson.core
- uid: com.fasterxml.jackson.core.JsonParser.isExpectedStartObjectToken*
  name: isExpectedStartObjectToken
  nameWithType: JsonParser.isExpectedStartObjectToken
  fullName: com.fasterxml.jackson.core.JsonParser.isExpectedStartObjectToken
  package: com.fasterxml.jackson.core
- uid: com.fasterxml.jackson.core.JsonParser.isNaN*
  name: isNaN
  nameWithType: JsonParser.isNaN
  fullName: com.fasterxml.jackson.core.JsonParser.isNaN
  package: com.fasterxml.jackson.core
- uid: com.fasterxml.jackson.core.JsonParser.clearCurrentToken*
  name: clearCurrentToken
  nameWithType: JsonParser.clearCurrentToken
  fullName: com.fasterxml.jackson.core.JsonParser.clearCurrentToken
  package: com.fasterxml.jackson.core
- uid: com.fasterxml.jackson.core.JsonParser.getLastClearedToken*
  name: getLastClearedToken
  nameWithType: JsonParser.getLastClearedToken
  fullName: com.fasterxml.jackson.core.JsonParser.getLastClearedToken
  package: com.fasterxml.jackson.core
- uid: com.fasterxml.jackson.core.JsonParser.overrideCurrentName*
  name: overrideCurrentName
  nameWithType: JsonParser.overrideCurrentName
  fullName: com.fasterxml.jackson.core.JsonParser.overrideCurrentName
  package: com.fasterxml.jackson.core
- uid: com.fasterxml.jackson.core.JsonParser.getCurrentName*
  name: getCurrentName
  nameWithType: JsonParser.getCurrentName
  fullName: com.fasterxml.jackson.core.JsonParser.getCurrentName
  package: com.fasterxml.jackson.core
- uid: com.fasterxml.jackson.core.JsonParser.currentName*
  name: currentName
  nameWithType: JsonParser.currentName
  fullName: com.fasterxml.jackson.core.JsonParser.currentName
  package: com.fasterxml.jackson.core
- uid: com.fasterxml.jackson.core.JsonParser.getText*
  name: getText
  nameWithType: JsonParser.getText
  fullName: com.fasterxml.jackson.core.JsonParser.getText
  package: com.fasterxml.jackson.core
- uid: java.lang.UnsupportedOperationException
  spec.java:
  - uid: java.lang.UnsupportedOperationException
    name: UnsupportedOperationException
    fullName: java.lang.UnsupportedOperationException
- uid: char[]
  spec.java:
  - uid: char
    name: char
    fullName: char
  - name: '[]'
    fullName: '[]'
- uid: com.fasterxml.jackson.core.JsonParser.getTextCharacters*
  name: getTextCharacters
  nameWithType: JsonParser.getTextCharacters
  fullName: com.fasterxml.jackson.core.JsonParser.getTextCharacters
  package: com.fasterxml.jackson.core
- uid: com.fasterxml.jackson.core.JsonParser.getTextLength*
  name: getTextLength
  nameWithType: JsonParser.getTextLength
  fullName: com.fasterxml.jackson.core.JsonParser.getTextLength
  package: com.fasterxml.jackson.core
- uid: com.fasterxml.jackson.core.JsonParser.getTextOffset*
  name: getTextOffset
  nameWithType: JsonParser.getTextOffset
  fullName: com.fasterxml.jackson.core.JsonParser.getTextOffset
  package: com.fasterxml.jackson.core
- uid: com.fasterxml.jackson.core.JsonParser.hasTextCharacters*
  name: hasTextCharacters
  nameWithType: JsonParser.hasTextCharacters
  fullName: com.fasterxml.jackson.core.JsonParser.hasTextCharacters
  package: com.fasterxml.jackson.core
- uid: java.lang.Number
  spec.java:
  - uid: java.lang.Number
    name: Number
    fullName: java.lang.Number
- uid: com.fasterxml.jackson.core.JsonParser.getNumberValue*
  name: getNumberValue
  nameWithType: JsonParser.getNumberValue
  fullName: com.fasterxml.jackson.core.JsonParser.getNumberValue
  package: com.fasterxml.jackson.core
- uid: com.fasterxml.jackson.core.JsonParser.NumberType
  name: JsonParser.NumberType
  nameWithType: JsonParser.NumberType
  fullName: com.fasterxml.jackson.core.JsonParser.NumberType
- uid: com.fasterxml.jackson.core.JsonParser.getNumberType*
  name: getNumberType
  nameWithType: JsonParser.getNumberType
  fullName: com.fasterxml.jackson.core.JsonParser.getNumberType
  package: com.fasterxml.jackson.core
- uid: byte
  spec.java:
  - uid: byte
    name: byte
    fullName: byte
- uid: com.fasterxml.jackson.core.JsonParser.getByteValue*
  name: getByteValue
  nameWithType: JsonParser.getByteValue
  fullName: com.fasterxml.jackson.core.JsonParser.getByteValue
  package: com.fasterxml.jackson.core
- uid: short
  spec.java:
  - uid: short
    name: short
    fullName: short
- uid: com.fasterxml.jackson.core.JsonParser.getShortValue*
  name: getShortValue
  nameWithType: JsonParser.getShortValue
  fullName: com.fasterxml.jackson.core.JsonParser.getShortValue
  package: com.fasterxml.jackson.core
- uid: com.fasterxml.jackson.core.JsonParser.getIntValue*
  name: getIntValue
  nameWithType: JsonParser.getIntValue
  fullName: com.fasterxml.jackson.core.JsonParser.getIntValue
  package: com.fasterxml.jackson.core
- uid: com.fasterxml.jackson.core.JsonParser.getLongValue*
  name: getLongValue
  nameWithType: JsonParser.getLongValue
  fullName: com.fasterxml.jackson.core.JsonParser.getLongValue
  package: com.fasterxml.jackson.core
- uid: java.math.BigInteger
  spec.java:
  - uid: java.math.BigInteger
    name: BigInteger
    fullName: java.math.BigInteger
- uid: com.fasterxml.jackson.core.JsonParser.getBigIntegerValue*
  name: getBigIntegerValue
  nameWithType: JsonParser.getBigIntegerValue
  fullName: com.fasterxml.jackson.core.JsonParser.getBigIntegerValue
  package: com.fasterxml.jackson.core
- uid: float
  spec.java:
  - uid: float
    name: float
    fullName: float
- uid: com.fasterxml.jackson.core.JsonParser.getFloatValue*
  name: getFloatValue
  nameWithType: JsonParser.getFloatValue
  fullName: com.fasterxml.jackson.core.JsonParser.getFloatValue
  package: com.fasterxml.jackson.core
- uid: double
  spec.java:
  - uid: double
    name: double
    fullName: double
- uid: com.fasterxml.jackson.core.JsonParser.getDoubleValue*
  name: getDoubleValue
  nameWithType: JsonParser.getDoubleValue
  fullName: com.fasterxml.jackson.core.JsonParser.getDoubleValue
  package: com.fasterxml.jackson.core
- uid: java.math.BigDecimal
  spec.java:
  - uid: java.math.BigDecimal
    name: BigDecimal
    fullName: java.math.BigDecimal
- uid: com.fasterxml.jackson.core.JsonParser.getDecimalValue*
  name: getDecimalValue
  nameWithType: JsonParser.getDecimalValue
  fullName: com.fasterxml.jackson.core.JsonParser.getDecimalValue
  package: com.fasterxml.jackson.core
- uid: com.fasterxml.jackson.core.JsonParser.getBooleanValue*
  name: getBooleanValue
  nameWithType: JsonParser.getBooleanValue
  fullName: com.fasterxml.jackson.core.JsonParser.getBooleanValue
  package: com.fasterxml.jackson.core
- uid: com.fasterxml.jackson.core.JsonParser.getEmbeddedObject*
  name: getEmbeddedObject
  nameWithType: JsonParser.getEmbeddedObject
  fullName: com.fasterxml.jackson.core.JsonParser.getEmbeddedObject
  package: com.fasterxml.jackson.core
- uid: com.fasterxml.jackson.core.Base64Variant
  name: Base64Variant
  nameWithType: Base64Variant
  fullName: com.fasterxml.jackson.core.Base64Variant
- uid: com.fasterxml.jackson.core.JsonParser.getBinaryValue*
  name: getBinaryValue
  nameWithType: JsonParser.getBinaryValue
  fullName: com.fasterxml.jackson.core.JsonParser.getBinaryValue
  package: com.fasterxml.jackson.core
- uid: com.fasterxml.jackson.core.JsonParser.readBinaryValue*
  name: readBinaryValue
  nameWithType: JsonParser.readBinaryValue
  fullName: com.fasterxml.jackson.core.JsonParser.readBinaryValue
  package: com.fasterxml.jackson.core
- uid: com.fasterxml.jackson.core.JsonParser.getValueAsInt*
  name: getValueAsInt
  nameWithType: JsonParser.getValueAsInt
  fullName: com.fasterxml.jackson.core.JsonParser.getValueAsInt
  package: com.fasterxml.jackson.core
- uid: com.fasterxml.jackson.core.JsonParser.getValueAsLong*
  name: getValueAsLong
  nameWithType: JsonParser.getValueAsLong
  fullName: com.fasterxml.jackson.core.JsonParser.getValueAsLong
  package: com.fasterxml.jackson.core
- uid: com.fasterxml.jackson.core.JsonParser.getValueAsDouble*
  name: getValueAsDouble
  nameWithType: JsonParser.getValueAsDouble
  fullName: com.fasterxml.jackson.core.JsonParser.getValueAsDouble
  package: com.fasterxml.jackson.core
- uid: com.fasterxml.jackson.core.JsonParser.getValueAsBoolean*
  name: getValueAsBoolean
  nameWithType: JsonParser.getValueAsBoolean
  fullName: com.fasterxml.jackson.core.JsonParser.getValueAsBoolean
  package: com.fasterxml.jackson.core
- uid: com.fasterxml.jackson.core.JsonParser.getValueAsString*
  name: getValueAsString
  nameWithType: JsonParser.getValueAsString
  fullName: com.fasterxml.jackson.core.JsonParser.getValueAsString
  package: com.fasterxml.jackson.core
- uid: com.fasterxml.jackson.core.JsonParser.canReadObjectId*
  name: canReadObjectId
  nameWithType: JsonParser.canReadObjectId
  fullName: com.fasterxml.jackson.core.JsonParser.canReadObjectId
  package: com.fasterxml.jackson.core
- uid: com.fasterxml.jackson.core.JsonParser.canReadTypeId*
  name: canReadTypeId
  nameWithType: JsonParser.canReadTypeId
  fullName: com.fasterxml.jackson.core.JsonParser.canReadTypeId
  package: com.fasterxml.jackson.core
- uid: com.fasterxml.jackson.core.JsonParser.getObjectId*
  name: getObjectId
  nameWithType: JsonParser.getObjectId
  fullName: com.fasterxml.jackson.core.JsonParser.getObjectId
  package: com.fasterxml.jackson.core
- uid: com.fasterxml.jackson.core.JsonParser.getTypeId*
  name: getTypeId
  nameWithType: JsonParser.getTypeId
  fullName: com.fasterxml.jackson.core.JsonParser.getTypeId
  package: com.fasterxml.jackson.core
- uid: java.lang.Class<T>
  spec.java:
  - uid: java.lang.Class
    name: Class
    fullName: java.lang.Class
  - name: <
    fullName: <
  - uid: T
    name: T
    fullName: T
  - name: '>'
    fullName: '>'
- uid: T
  spec.java:
  - uid: T
    name: T
    fullName: T
- uid: com.fasterxml.jackson.core.JsonParser.readValueAs*
  name: <T>readValueAs
  nameWithType: JsonParser.<T>readValueAs
  fullName: com.fasterxml.jackson.core.JsonParser.<T>readValueAs
  package: com.fasterxml.jackson.core
- uid: com.fasterxml.jackson.core.type.TypeReference<?>
  spec.java:
  - uid: com.fasterxml.jackson.core.type.TypeReference
    name: TypeReference
    fullName: com.fasterxml.jackson.core.type.TypeReference
  - name: <
    fullName: <
  - uid: '?'
    name: '?'
    fullName: '?'
  - name: '>'
    fullName: '>'
- uid: java.util.Iterator<T>
  spec.java:
  - uid: java.util.Iterator
    name: Iterator
    fullName: java.util.Iterator
  - name: <
    fullName: <
  - uid: T
    name: T
    fullName: T
  - name: '>'
    fullName: '>'
- uid: com.fasterxml.jackson.core.JsonParser.readValuesAs*
  name: <T>readValuesAs
  nameWithType: JsonParser.<T>readValuesAs
  fullName: com.fasterxml.jackson.core.JsonParser.<T>readValuesAs
  package: com.fasterxml.jackson.core
- uid: com.fasterxml.jackson.core.type.TypeReference<T>
  spec.java:
  - uid: com.fasterxml.jackson.core.type.TypeReference
    name: TypeReference
    fullName: com.fasterxml.jackson.core.type.TypeReference
  - name: <
    fullName: <
  - uid: T
    name: T
    fullName: T
  - name: '>'
    fullName: '>'
- uid: com.fasterxml.jackson.core.JsonParser.readValueAsTree*
  name: <T>readValueAsTree
  nameWithType: JsonParser.<T>readValueAsTree
  fullName: com.fasterxml.jackson.core.JsonParser.<T>readValueAsTree
  package: com.fasterxml.jackson.core
- uid: com.fasterxml.jackson.core.JsonParser._codec*
  name: _codec
  nameWithType: JsonParser._codec
  fullName: com.fasterxml.jackson.core.JsonParser._codec
  package: com.fasterxml.jackson.core
- uid: com.fasterxml.jackson.core.JsonParseException
  name: JsonParseException
  nameWithType: JsonParseException
  fullName: com.fasterxml.jackson.core.JsonParseException
- uid: com.fasterxml.jackson.core.JsonParser._constructError*
  name: _constructError
  nameWithType: JsonParser._constructError
  fullName: com.fasterxml.jackson.core.JsonParser._constructError
  package: com.fasterxml.jackson.core
- uid: com.fasterxml.jackson.core.JsonParser._reportUnsupportedOperation*
  name: _reportUnsupportedOperation
  nameWithType: JsonParser._reportUnsupportedOperation
  fullName: com.fasterxml.jackson.core.JsonParser._reportUnsupportedOperation
  package: com.fasterxml.jackson.core
- uid: java.io.Closeable
  name: Closeable
  nameWithType: Closeable
  fullName: java.io.Closeable
- uid: com.fasterxml.jackson.core.Versioned
  name: Versioned
  nameWithType: Versioned
  fullName: com.fasterxml.jackson.core.Versioned
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: java.lang.Object.finalize()
  name: Object.finalize()
  nameWithType: Object.finalize()
  fullName: java.lang.Object.finalize()
- uid: java.lang.Object.clone()
  name: Object.clone()
  nameWithType: Object.clone()
  fullName: java.lang.Object.clone()
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: java.lang.Object.equals(java.lang.Object)
  name: Object.equals(Object)
  nameWithType: Object.equals(Object)
  fullName: java.lang.Object.equals(java.lang.Object)
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.lang.Object.hashCode()
  name: Object.hashCode()
  nameWithType: Object.hashCode()
  fullName: java.lang.Object.hashCode()
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: java.lang.Object.toString()
  name: Object.toString()
  nameWithType: Object.toString()
  fullName: java.lang.Object.toString()
- uid: java.lang.Class
  name: Class
  nameWithType: Class
  fullName: java.lang.Class
- uid: com.fasterxml.jackson.core.type.TypeReference
  name: TypeReference
  nameWithType: TypeReference
  fullName: com.fasterxml.jackson.core.type.TypeReference
- uid: '?'
  name: '?'
  nameWithType: '?'
  fullName: '?'
- uid: java.util.Iterator
  name: Iterator
  nameWithType: Iterator
  fullName: java.util.Iterator
