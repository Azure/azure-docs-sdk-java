### YamlMime:ManagedReference
items:
- uid: com.azure.cosmos.implementation.AsyncDocumentClient
  id: AsyncDocumentClient
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation
  children:
  - com.azure.cosmos.implementation.AsyncDocumentClient.<T>readMany(java.util.List<com.azure.cosmos.implementation.apachecommons.lang.tuple.Pair<java.lang.String,com.azure.cosmos.models.PartitionKey>>,java.lang.String,com.azure.cosmos.models.CosmosQueryRequestOptions,java.lang.Class<T>)
  - com.azure.cosmos.implementation.AsyncDocumentClient.Builder
  - com.azure.cosmos.implementation.AsyncDocumentClient.close()
  - com.azure.cosmos.implementation.AsyncDocumentClient.createCollection(java.lang.String,com.azure.cosmos.implementation.DocumentCollection,com.azure.cosmos.implementation.RequestOptions)
  - com.azure.cosmos.implementation.AsyncDocumentClient.createDatabase(com.azure.cosmos.implementation.Database,com.azure.cosmos.implementation.RequestOptions)
  - com.azure.cosmos.implementation.AsyncDocumentClient.createDocument(java.lang.String,java.lang.Object,com.azure.cosmos.implementation.RequestOptions,boolean)
  - com.azure.cosmos.implementation.AsyncDocumentClient.createPermission(java.lang.String,com.azure.cosmos.implementation.Permission,com.azure.cosmos.implementation.RequestOptions)
  - com.azure.cosmos.implementation.AsyncDocumentClient.createStoredProcedure(java.lang.String,com.azure.cosmos.implementation.StoredProcedure,com.azure.cosmos.implementation.RequestOptions)
  - com.azure.cosmos.implementation.AsyncDocumentClient.createTrigger(java.lang.String,com.azure.cosmos.implementation.Trigger,com.azure.cosmos.implementation.RequestOptions)
  - com.azure.cosmos.implementation.AsyncDocumentClient.createUser(java.lang.String,com.azure.cosmos.implementation.User,com.azure.cosmos.implementation.RequestOptions)
  - com.azure.cosmos.implementation.AsyncDocumentClient.createUserDefinedFunction(java.lang.String,com.azure.cosmos.implementation.UserDefinedFunction,com.azure.cosmos.implementation.RequestOptions)
  - com.azure.cosmos.implementation.AsyncDocumentClient.deleteCollection(java.lang.String,com.azure.cosmos.implementation.RequestOptions)
  - com.azure.cosmos.implementation.AsyncDocumentClient.deleteConflict(java.lang.String,com.azure.cosmos.implementation.RequestOptions)
  - com.azure.cosmos.implementation.AsyncDocumentClient.deleteDatabase(java.lang.String,com.azure.cosmos.implementation.RequestOptions)
  - com.azure.cosmos.implementation.AsyncDocumentClient.deleteDocument(java.lang.String,com.azure.cosmos.implementation.RequestOptions)
  - com.azure.cosmos.implementation.AsyncDocumentClient.deletePermission(java.lang.String,com.azure.cosmos.implementation.RequestOptions)
  - com.azure.cosmos.implementation.AsyncDocumentClient.deleteStoredProcedure(java.lang.String,com.azure.cosmos.implementation.RequestOptions)
  - com.azure.cosmos.implementation.AsyncDocumentClient.deleteTrigger(java.lang.String,com.azure.cosmos.implementation.RequestOptions)
  - com.azure.cosmos.implementation.AsyncDocumentClient.deleteUser(java.lang.String,com.azure.cosmos.implementation.RequestOptions)
  - com.azure.cosmos.implementation.AsyncDocumentClient.deleteUserDefinedFunction(java.lang.String,com.azure.cosmos.implementation.RequestOptions)
  - com.azure.cosmos.implementation.AsyncDocumentClient.executeStoredProcedure(java.lang.String,com.azure.cosmos.implementation.RequestOptions,java.util.List<java.lang.Object>)
  - com.azure.cosmos.implementation.AsyncDocumentClient.executeStoredProcedure(java.lang.String,java.util.List<java.lang.Object>)
  - com.azure.cosmos.implementation.AsyncDocumentClient.getConnectionPolicy()
  - com.azure.cosmos.implementation.AsyncDocumentClient.getConsistencyLevel()
  - com.azure.cosmos.implementation.AsyncDocumentClient.getDatabaseAccount()
  - com.azure.cosmos.implementation.AsyncDocumentClient.getItemDeserializer()
  - com.azure.cosmos.implementation.AsyncDocumentClient.getReadEndpoint()
  - com.azure.cosmos.implementation.AsyncDocumentClient.getServiceEndpoint()
  - com.azure.cosmos.implementation.AsyncDocumentClient.getWriteEndpoint()
  - com.azure.cosmos.implementation.AsyncDocumentClient.isContentResponseOnWriteEnabled()
  - com.azure.cosmos.implementation.AsyncDocumentClient.queryCollections(java.lang.String,com.azure.cosmos.models.SqlQuerySpec,com.azure.cosmos.models.CosmosQueryRequestOptions)
  - com.azure.cosmos.implementation.AsyncDocumentClient.queryCollections(java.lang.String,java.lang.String,com.azure.cosmos.models.CosmosQueryRequestOptions)
  - com.azure.cosmos.implementation.AsyncDocumentClient.queryConflicts(java.lang.String,com.azure.cosmos.models.SqlQuerySpec,com.azure.cosmos.models.CosmosQueryRequestOptions)
  - com.azure.cosmos.implementation.AsyncDocumentClient.queryConflicts(java.lang.String,java.lang.String,com.azure.cosmos.models.CosmosQueryRequestOptions)
  - com.azure.cosmos.implementation.AsyncDocumentClient.queryDatabases(com.azure.cosmos.models.SqlQuerySpec,com.azure.cosmos.models.CosmosQueryRequestOptions)
  - com.azure.cosmos.implementation.AsyncDocumentClient.queryDatabases(java.lang.String,com.azure.cosmos.models.CosmosQueryRequestOptions)
  - com.azure.cosmos.implementation.AsyncDocumentClient.queryDocumentChangeFeed(java.lang.String,com.azure.cosmos.implementation.ChangeFeedOptions)
  - com.azure.cosmos.implementation.AsyncDocumentClient.queryDocuments(java.lang.String,com.azure.cosmos.models.SqlQuerySpec,com.azure.cosmos.models.CosmosQueryRequestOptions)
  - com.azure.cosmos.implementation.AsyncDocumentClient.queryDocuments(java.lang.String,java.lang.String,com.azure.cosmos.models.CosmosQueryRequestOptions)
  - com.azure.cosmos.implementation.AsyncDocumentClient.queryOffers(com.azure.cosmos.models.SqlQuerySpec,com.azure.cosmos.models.CosmosQueryRequestOptions)
  - com.azure.cosmos.implementation.AsyncDocumentClient.queryOffers(java.lang.String,com.azure.cosmos.models.CosmosQueryRequestOptions)
  - com.azure.cosmos.implementation.AsyncDocumentClient.queryPermissions(java.lang.String,com.azure.cosmos.models.SqlQuerySpec,com.azure.cosmos.models.CosmosQueryRequestOptions)
  - com.azure.cosmos.implementation.AsyncDocumentClient.queryPermissions(java.lang.String,java.lang.String,com.azure.cosmos.models.CosmosQueryRequestOptions)
  - com.azure.cosmos.implementation.AsyncDocumentClient.queryStoredProcedures(java.lang.String,com.azure.cosmos.models.SqlQuerySpec,com.azure.cosmos.models.CosmosQueryRequestOptions)
  - com.azure.cosmos.implementation.AsyncDocumentClient.queryStoredProcedures(java.lang.String,java.lang.String,com.azure.cosmos.models.CosmosQueryRequestOptions)
  - com.azure.cosmos.implementation.AsyncDocumentClient.queryTriggers(java.lang.String,com.azure.cosmos.models.SqlQuerySpec,com.azure.cosmos.models.CosmosQueryRequestOptions)
  - com.azure.cosmos.implementation.AsyncDocumentClient.queryTriggers(java.lang.String,java.lang.String,com.azure.cosmos.models.CosmosQueryRequestOptions)
  - com.azure.cosmos.implementation.AsyncDocumentClient.queryUserDefinedFunctions(java.lang.String,com.azure.cosmos.models.SqlQuerySpec,com.azure.cosmos.models.CosmosQueryRequestOptions)
  - com.azure.cosmos.implementation.AsyncDocumentClient.queryUserDefinedFunctions(java.lang.String,java.lang.String,com.azure.cosmos.models.CosmosQueryRequestOptions)
  - com.azure.cosmos.implementation.AsyncDocumentClient.queryUsers(java.lang.String,com.azure.cosmos.models.SqlQuerySpec,com.azure.cosmos.models.CosmosQueryRequestOptions)
  - com.azure.cosmos.implementation.AsyncDocumentClient.queryUsers(java.lang.String,java.lang.String,com.azure.cosmos.models.CosmosQueryRequestOptions)
  - com.azure.cosmos.implementation.AsyncDocumentClient.readCollection(java.lang.String,com.azure.cosmos.implementation.RequestOptions)
  - com.azure.cosmos.implementation.AsyncDocumentClient.readCollections(java.lang.String,com.azure.cosmos.models.CosmosQueryRequestOptions)
  - com.azure.cosmos.implementation.AsyncDocumentClient.readConflict(java.lang.String,com.azure.cosmos.implementation.RequestOptions)
  - com.azure.cosmos.implementation.AsyncDocumentClient.readConflicts(java.lang.String,com.azure.cosmos.models.CosmosQueryRequestOptions)
  - com.azure.cosmos.implementation.AsyncDocumentClient.readDatabase(java.lang.String,com.azure.cosmos.implementation.RequestOptions)
  - com.azure.cosmos.implementation.AsyncDocumentClient.readDatabases(com.azure.cosmos.models.CosmosQueryRequestOptions)
  - com.azure.cosmos.implementation.AsyncDocumentClient.readDocument(java.lang.String,com.azure.cosmos.implementation.RequestOptions)
  - com.azure.cosmos.implementation.AsyncDocumentClient.readDocuments(java.lang.String,com.azure.cosmos.models.CosmosQueryRequestOptions)
  - com.azure.cosmos.implementation.AsyncDocumentClient.readOffer(java.lang.String)
  - com.azure.cosmos.implementation.AsyncDocumentClient.readOffers(com.azure.cosmos.models.CosmosQueryRequestOptions)
  - com.azure.cosmos.implementation.AsyncDocumentClient.readPartitionKeyRanges(java.lang.String,com.azure.cosmos.models.CosmosQueryRequestOptions)
  - com.azure.cosmos.implementation.AsyncDocumentClient.readPermission(java.lang.String,com.azure.cosmos.implementation.RequestOptions)
  - com.azure.cosmos.implementation.AsyncDocumentClient.readPermissions(java.lang.String,com.azure.cosmos.models.CosmosQueryRequestOptions)
  - com.azure.cosmos.implementation.AsyncDocumentClient.readStoredProcedure(java.lang.String,com.azure.cosmos.implementation.RequestOptions)
  - com.azure.cosmos.implementation.AsyncDocumentClient.readStoredProcedures(java.lang.String,com.azure.cosmos.models.CosmosQueryRequestOptions)
  - com.azure.cosmos.implementation.AsyncDocumentClient.readTrigger(java.lang.String,com.azure.cosmos.implementation.RequestOptions)
  - com.azure.cosmos.implementation.AsyncDocumentClient.readTriggers(java.lang.String,com.azure.cosmos.models.CosmosQueryRequestOptions)
  - com.azure.cosmos.implementation.AsyncDocumentClient.readUser(java.lang.String,com.azure.cosmos.implementation.RequestOptions)
  - com.azure.cosmos.implementation.AsyncDocumentClient.readUserDefinedFunction(java.lang.String,com.azure.cosmos.implementation.RequestOptions)
  - com.azure.cosmos.implementation.AsyncDocumentClient.readUserDefinedFunctions(java.lang.String,com.azure.cosmos.models.CosmosQueryRequestOptions)
  - com.azure.cosmos.implementation.AsyncDocumentClient.readUsers(java.lang.String,com.azure.cosmos.models.CosmosQueryRequestOptions)
  - com.azure.cosmos.implementation.AsyncDocumentClient.replaceCollection(com.azure.cosmos.implementation.DocumentCollection,com.azure.cosmos.implementation.RequestOptions)
  - com.azure.cosmos.implementation.AsyncDocumentClient.replaceDocument(com.azure.cosmos.implementation.Document,com.azure.cosmos.implementation.RequestOptions)
  - com.azure.cosmos.implementation.AsyncDocumentClient.replaceDocument(java.lang.String,java.lang.Object,com.azure.cosmos.implementation.RequestOptions)
  - com.azure.cosmos.implementation.AsyncDocumentClient.replaceOffer(com.azure.cosmos.implementation.Offer)
  - com.azure.cosmos.implementation.AsyncDocumentClient.replacePermission(com.azure.cosmos.implementation.Permission,com.azure.cosmos.implementation.RequestOptions)
  - com.azure.cosmos.implementation.AsyncDocumentClient.replaceStoredProcedure(com.azure.cosmos.implementation.StoredProcedure,com.azure.cosmos.implementation.RequestOptions)
  - com.azure.cosmos.implementation.AsyncDocumentClient.replaceTrigger(com.azure.cosmos.implementation.Trigger,com.azure.cosmos.implementation.RequestOptions)
  - com.azure.cosmos.implementation.AsyncDocumentClient.replaceUser(com.azure.cosmos.implementation.User,com.azure.cosmos.implementation.RequestOptions)
  - com.azure.cosmos.implementation.AsyncDocumentClient.replaceUserDefinedFunction(com.azure.cosmos.implementation.UserDefinedFunction,com.azure.cosmos.implementation.RequestOptions)
  - com.azure.cosmos.implementation.AsyncDocumentClient.upsertDocument(java.lang.String,java.lang.Object,com.azure.cosmos.implementation.RequestOptions,boolean)
  - com.azure.cosmos.implementation.AsyncDocumentClient.upsertPermission(java.lang.String,com.azure.cosmos.implementation.Permission,com.azure.cosmos.implementation.RequestOptions)
  - com.azure.cosmos.implementation.AsyncDocumentClient.upsertStoredProcedure(java.lang.String,com.azure.cosmos.implementation.StoredProcedure,com.azure.cosmos.implementation.RequestOptions)
  - com.azure.cosmos.implementation.AsyncDocumentClient.upsertTrigger(java.lang.String,com.azure.cosmos.implementation.Trigger,com.azure.cosmos.implementation.RequestOptions)
  - com.azure.cosmos.implementation.AsyncDocumentClient.upsertUser(java.lang.String,com.azure.cosmos.implementation.User,com.azure.cosmos.implementation.RequestOptions)
  - com.azure.cosmos.implementation.AsyncDocumentClient.upsertUserDefinedFunction(java.lang.String,com.azure.cosmos.implementation.UserDefinedFunction,com.azure.cosmos.implementation.RequestOptions)
  langs:
  - java
  name: AsyncDocumentClient
  nameWithType: AsyncDocumentClient
  fullName: com.azure.cosmos.implementation.AsyncDocumentClient
  type: Interface
  package: com.azure.cosmos.implementation
  summary: >-
    Provides a client-side logical representation of the Azure Cosmos DB database service. This async client is used to configure and execute requests against the service.


    <xref uid="com.azure.cosmos.implementation.AsyncDocumentClient" data-throw-if-not-resolved="false">AsyncDocumentClient</xref> async APIs return [project reactor][]'s <xref uid="reactor.core.publisher.Flux" data-throw-if-not-resolved="false">Flux</xref>, and so you can use project reactor <xref uid="reactor.core.publisher.Flux" data-throw-if-not-resolved="false">Flux</xref> functionality. **The async <xref uid="reactor.core.publisher.Flux" data-throw-if-not-resolved="false">Flux</xref> based APIs perform the requested operation only after subscription.**


    The service client encapsulates the endpoint and credentials used to access the Cosmos DB service.


    To instantiate you can use the <xref uid="com.azure.cosmos.implementation.apachecommons.lang.builder.Builder" data-throw-if-not-resolved="false">Builder</xref>


    ```java

    ConnectionPolicy connectionPolicy = new ConnectionPolicy(DirectConnectionConfig.getDefaultConfig());
     AsyncDocumentClient client = new AsyncDocumentClient.Builder()
             .withServiceEndpoint(serviceEndpoint)
             .withMasterKeyOrResourceToken(masterKey)
             .withConnectionPolicy(connectionPolicy)
             .withConsistencyLevel(ConsistencyLevel.SESSION)
             .buildAsyncClient();
    ```



    [project reactor]: https://github.com/reactor/reactor-core
  syntax:
    content: public interface AsyncDocumentClient
- uid: com.azure.cosmos.implementation.AsyncDocumentClient.<T>readMany(java.util.List<com.azure.cosmos.implementation.apachecommons.lang.tuple.Pair<java.lang.String,com.azure.cosmos.models.PartitionKey>>,java.lang.String,com.azure.cosmos.models.CosmosQueryRequestOptions,java.lang.Class<T>)
  id: <T>readMany(java.util.List<com.azure.cosmos.implementation.apachecommons.lang.tuple.Pair<java.lang.String,com.azure.cosmos.models.PartitionKey>>,java.lang.String,com.azure.cosmos.models.CosmosQueryRequestOptions,java.lang.Class<T>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.AsyncDocumentClient
  langs:
  - java
  name: <T>readMany(List<Pair<String,PartitionKey>> itemKeyList, String collectionLink, CosmosQueryRequestOptions options, Class<T> klass)
  nameWithType: AsyncDocumentClient.<T>readMany(List<Pair<String,PartitionKey>> itemKeyList, String collectionLink, CosmosQueryRequestOptions options, Class<T> klass)
  fullName: com.azure.cosmos.implementation.AsyncDocumentClient.<T>readMany(List<Pair<String,PartitionKey>> itemKeyList, String collectionLink, CosmosQueryRequestOptions options, Class<T> klass)
  overload: com.azure.cosmos.implementation.AsyncDocumentClient.readMany*
  type: Method
  package: com.azure.cosmos.implementation
  summary: Reads many documents at once
  syntax:
    content: public abstract Mono<FeedResponse<T>> <T>readMany(List<Pair<String,PartitionKey>> itemKeyList, String collectionLink, CosmosQueryRequestOptions options, Class<T> klass)
    parameters:
    - id: itemKeyList
      type: java.util.List<com.azure.cosmos.implementation.apachecommons.lang.tuple.Pair<java.lang.String,com.azure.cosmos.models.PartitionKey>>
      description: document id and partition key pair that needs to be read
    - id: collectionLink
      type: java.lang.String
      description: link for the documentcollection/container to be queried
    - id: options
      type: com.azure.cosmos.models.CosmosQueryRequestOptions
      description: the query request options
    - id: klass
      type: java.lang.Class<T>
      description: class type
    return:
      type: reactor.core.publisher.Mono<com.azure.cosmos.models.FeedResponse<T>>
      description: a Mono with feed response of documents
- uid: com.azure.cosmos.implementation.AsyncDocumentClient.close()
  id: close()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.AsyncDocumentClient
  langs:
  - java
  name: close()
  nameWithType: AsyncDocumentClient.close()
  fullName: com.azure.cosmos.implementation.AsyncDocumentClient.close()
  overload: com.azure.cosmos.implementation.AsyncDocumentClient.close*
  type: Method
  package: com.azure.cosmos.implementation
  summary: Close this <xref uid="com.azure.cosmos.implementation.AsyncDocumentClient" data-throw-if-not-resolved="false">AsyncDocumentClient</xref> instance and cleans up the resources.
  syntax:
    content: public abstract void close()
- uid: com.azure.cosmos.implementation.AsyncDocumentClient.createCollection(java.lang.String,com.azure.cosmos.implementation.DocumentCollection,com.azure.cosmos.implementation.RequestOptions)
  id: createCollection(java.lang.String,com.azure.cosmos.implementation.DocumentCollection,com.azure.cosmos.implementation.RequestOptions)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.AsyncDocumentClient
  langs:
  - java
  name: createCollection(String databaseLink, DocumentCollection collection, RequestOptions options)
  nameWithType: AsyncDocumentClient.createCollection(String databaseLink, DocumentCollection collection, RequestOptions options)
  fullName: com.azure.cosmos.implementation.AsyncDocumentClient.createCollection(String databaseLink, DocumentCollection collection, RequestOptions options)
  overload: com.azure.cosmos.implementation.AsyncDocumentClient.createCollection*
  type: Method
  package: com.azure.cosmos.implementation
  summary: >-
    Creates a document collection.


    After subscription the operation will be performed. The <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> upon successful completion will contain a single resource response with the created collection. In case of failure the <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> will error.
  syntax:
    content: public abstract Mono<ResourceResponse<DocumentCollection>> createCollection(String databaseLink, DocumentCollection collection, RequestOptions options)
    parameters:
    - id: databaseLink
      type: java.lang.String
      description: the database link.
    - id: collection
      type: com.azure.cosmos.implementation.DocumentCollection
      description: the collection.
    - id: options
      type: com.azure.cosmos.implementation.RequestOptions
      description: the request options.
    return:
      type: reactor.core.publisher.Mono<com.azure.cosmos.implementation.ResourceResponse<com.azure.cosmos.implementation.DocumentCollection>>
      description: a <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> containing the single resource response with the created collection or an error.
- uid: com.azure.cosmos.implementation.AsyncDocumentClient.createDatabase(com.azure.cosmos.implementation.Database,com.azure.cosmos.implementation.RequestOptions)
  id: createDatabase(com.azure.cosmos.implementation.Database,com.azure.cosmos.implementation.RequestOptions)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.AsyncDocumentClient
  langs:
  - java
  name: createDatabase(Database database, RequestOptions options)
  nameWithType: AsyncDocumentClient.createDatabase(Database database, RequestOptions options)
  fullName: com.azure.cosmos.implementation.AsyncDocumentClient.createDatabase(Database database, RequestOptions options)
  overload: com.azure.cosmos.implementation.AsyncDocumentClient.createDatabase*
  type: Method
  package: com.azure.cosmos.implementation
  summary: >-
    Creates a database.


    After subscription the operation will be performed. The <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> upon successful completion will contain a single resource response with the created database. In case of failure the <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> will error.
  syntax:
    content: public abstract Mono<ResourceResponse<Database>> createDatabase(Database database, RequestOptions options)
    parameters:
    - id: database
      type: com.azure.cosmos.implementation.Database
      description: the database.
    - id: options
      type: com.azure.cosmos.implementation.RequestOptions
      description: the request options.
    return:
      type: reactor.core.publisher.Mono<com.azure.cosmos.implementation.ResourceResponse<com.azure.cosmos.implementation.Database>>
      description: a <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> containing the single resource response with the created database or an error.
- uid: com.azure.cosmos.implementation.AsyncDocumentClient.createDocument(java.lang.String,java.lang.Object,com.azure.cosmos.implementation.RequestOptions,boolean)
  id: createDocument(java.lang.String,java.lang.Object,com.azure.cosmos.implementation.RequestOptions,boolean)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.AsyncDocumentClient
  langs:
  - java
  name: createDocument(String collectionLink, Object document, RequestOptions options, boolean disableAutomaticIdGeneration)
  nameWithType: AsyncDocumentClient.createDocument(String collectionLink, Object document, RequestOptions options, boolean disableAutomaticIdGeneration)
  fullName: com.azure.cosmos.implementation.AsyncDocumentClient.createDocument(String collectionLink, Object document, RequestOptions options, boolean disableAutomaticIdGeneration)
  overload: com.azure.cosmos.implementation.AsyncDocumentClient.createDocument*
  type: Method
  package: com.azure.cosmos.implementation
  summary: >-
    Creates a document.


    After subscription the operation will be performed. The <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> upon successful completion will contain a single resource response with the created document. In case of failure the <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> will error.
  syntax:
    content: public abstract Mono<ResourceResponse<Document>> createDocument(String collectionLink, Object document, RequestOptions options, boolean disableAutomaticIdGeneration)
    parameters:
    - id: collectionLink
      type: java.lang.String
      description: the link to the parent document collection.
    - id: document
      type: java.lang.Object
      description: the document represented as a POJO or Document object.
    - id: options
      type: com.azure.cosmos.implementation.RequestOptions
      description: the request options.
    - id: disableAutomaticIdGeneration
      type: boolean
      description: the flag for disabling automatic id generation.
    return:
      type: reactor.core.publisher.Mono<com.azure.cosmos.implementation.ResourceResponse<com.azure.cosmos.implementation.Document>>
      description: a <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> containing the single resource response with the created document or an error.
- uid: com.azure.cosmos.implementation.AsyncDocumentClient.createPermission(java.lang.String,com.azure.cosmos.implementation.Permission,com.azure.cosmos.implementation.RequestOptions)
  id: createPermission(java.lang.String,com.azure.cosmos.implementation.Permission,com.azure.cosmos.implementation.RequestOptions)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.AsyncDocumentClient
  langs:
  - java
  name: createPermission(String userLink, Permission permission, RequestOptions options)
  nameWithType: AsyncDocumentClient.createPermission(String userLink, Permission permission, RequestOptions options)
  fullName: com.azure.cosmos.implementation.AsyncDocumentClient.createPermission(String userLink, Permission permission, RequestOptions options)
  overload: com.azure.cosmos.implementation.AsyncDocumentClient.createPermission*
  type: Method
  package: com.azure.cosmos.implementation
  summary: >-
    Creates a permission.


    After subscription the operation will be performed. The <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> upon successful completion will contain a single resource response with the created permission. In case of failure the <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> will error.
  syntax:
    content: public abstract Mono<ResourceResponse<Permission>> createPermission(String userLink, Permission permission, RequestOptions options)
    parameters:
    - id: userLink
      type: java.lang.String
      description: the user link.
    - id: permission
      type: com.azure.cosmos.implementation.Permission
      description: the permission to create.
    - id: options
      type: com.azure.cosmos.implementation.RequestOptions
      description: the request options.
    return:
      type: reactor.core.publisher.Mono<com.azure.cosmos.implementation.ResourceResponse<com.azure.cosmos.implementation.Permission>>
      description: a <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> containing the single resource response with the created permission or an error.
- uid: com.azure.cosmos.implementation.AsyncDocumentClient.createStoredProcedure(java.lang.String,com.azure.cosmos.implementation.StoredProcedure,com.azure.cosmos.implementation.RequestOptions)
  id: createStoredProcedure(java.lang.String,com.azure.cosmos.implementation.StoredProcedure,com.azure.cosmos.implementation.RequestOptions)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.AsyncDocumentClient
  langs:
  - java
  name: createStoredProcedure(String collectionLink, StoredProcedure storedProcedure, RequestOptions options)
  nameWithType: AsyncDocumentClient.createStoredProcedure(String collectionLink, StoredProcedure storedProcedure, RequestOptions options)
  fullName: com.azure.cosmos.implementation.AsyncDocumentClient.createStoredProcedure(String collectionLink, StoredProcedure storedProcedure, RequestOptions options)
  overload: com.azure.cosmos.implementation.AsyncDocumentClient.createStoredProcedure*
  type: Method
  package: com.azure.cosmos.implementation
  summary: >-
    Creates a stored procedure.


    After subscription the operation will be performed. The <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> upon successful completion will contain a single resource response with the created stored procedure. In case of failure the <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> will error.
  syntax:
    content: public abstract Mono<ResourceResponse<StoredProcedure>> createStoredProcedure(String collectionLink, StoredProcedure storedProcedure, RequestOptions options)
    parameters:
    - id: collectionLink
      type: java.lang.String
      description: the collection link.
    - id: storedProcedure
      type: com.azure.cosmos.implementation.StoredProcedure
      description: the stored procedure to create.
    - id: options
      type: com.azure.cosmos.implementation.RequestOptions
      description: the request options.
    return:
      type: reactor.core.publisher.Mono<com.azure.cosmos.implementation.ResourceResponse<com.azure.cosmos.implementation.StoredProcedure>>
      description: a <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> containing the single resource response with the created stored procedure or an error.
- uid: com.azure.cosmos.implementation.AsyncDocumentClient.createTrigger(java.lang.String,com.azure.cosmos.implementation.Trigger,com.azure.cosmos.implementation.RequestOptions)
  id: createTrigger(java.lang.String,com.azure.cosmos.implementation.Trigger,com.azure.cosmos.implementation.RequestOptions)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.AsyncDocumentClient
  langs:
  - java
  name: createTrigger(String collectionLink, Trigger trigger, RequestOptions options)
  nameWithType: AsyncDocumentClient.createTrigger(String collectionLink, Trigger trigger, RequestOptions options)
  fullName: com.azure.cosmos.implementation.AsyncDocumentClient.createTrigger(String collectionLink, Trigger trigger, RequestOptions options)
  overload: com.azure.cosmos.implementation.AsyncDocumentClient.createTrigger*
  type: Method
  package: com.azure.cosmos.implementation
  summary: >-
    Creates a trigger.


    After subscription the operation will be performed. The <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> upon successful completion will contain a single resource response with the created trigger. In case of failure the <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> will error.
  syntax:
    content: public abstract Mono<ResourceResponse<Trigger>> createTrigger(String collectionLink, Trigger trigger, RequestOptions options)
    parameters:
    - id: collectionLink
      type: java.lang.String
      description: the collection link.
    - id: trigger
      type: com.azure.cosmos.implementation.Trigger
      description: the trigger.
    - id: options
      type: com.azure.cosmos.implementation.RequestOptions
      description: the request options.
    return:
      type: reactor.core.publisher.Mono<com.azure.cosmos.implementation.ResourceResponse<com.azure.cosmos.implementation.Trigger>>
      description: a <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> containing the single resource response with the created trigger or an error.
- uid: com.azure.cosmos.implementation.AsyncDocumentClient.createUser(java.lang.String,com.azure.cosmos.implementation.User,com.azure.cosmos.implementation.RequestOptions)
  id: createUser(java.lang.String,com.azure.cosmos.implementation.User,com.azure.cosmos.implementation.RequestOptions)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.AsyncDocumentClient
  langs:
  - java
  name: createUser(String databaseLink, User user, RequestOptions options)
  nameWithType: AsyncDocumentClient.createUser(String databaseLink, User user, RequestOptions options)
  fullName: com.azure.cosmos.implementation.AsyncDocumentClient.createUser(String databaseLink, User user, RequestOptions options)
  overload: com.azure.cosmos.implementation.AsyncDocumentClient.createUser*
  type: Method
  package: com.azure.cosmos.implementation
  summary: >-
    Creates a user.


    After subscription the operation will be performed. The <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> upon successful completion will contain a single resource response with the created user. In case of failure the <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> will error.
  syntax:
    content: public abstract Mono<ResourceResponse<User>> createUser(String databaseLink, User user, RequestOptions options)
    parameters:
    - id: databaseLink
      type: java.lang.String
      description: the database link.
    - id: user
      type: com.azure.cosmos.implementation.User
      description: the user to create.
    - id: options
      type: com.azure.cosmos.implementation.RequestOptions
      description: the request options.
    return:
      type: reactor.core.publisher.Mono<com.azure.cosmos.implementation.ResourceResponse<com.azure.cosmos.implementation.User>>
      description: a <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> containing the single resource response with the created user or an error.
- uid: com.azure.cosmos.implementation.AsyncDocumentClient.createUserDefinedFunction(java.lang.String,com.azure.cosmos.implementation.UserDefinedFunction,com.azure.cosmos.implementation.RequestOptions)
  id: createUserDefinedFunction(java.lang.String,com.azure.cosmos.implementation.UserDefinedFunction,com.azure.cosmos.implementation.RequestOptions)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.AsyncDocumentClient
  langs:
  - java
  name: createUserDefinedFunction(String collectionLink, UserDefinedFunction udf, RequestOptions options)
  nameWithType: AsyncDocumentClient.createUserDefinedFunction(String collectionLink, UserDefinedFunction udf, RequestOptions options)
  fullName: com.azure.cosmos.implementation.AsyncDocumentClient.createUserDefinedFunction(String collectionLink, UserDefinedFunction udf, RequestOptions options)
  overload: com.azure.cosmos.implementation.AsyncDocumentClient.createUserDefinedFunction*
  type: Method
  package: com.azure.cosmos.implementation
  summary: >-
    Creates a user defined function.


    After subscription the operation will be performed. The <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> upon successful completion will contain a single resource response with the created user defined function. In case of failure the <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> will error.
  syntax:
    content: public abstract Mono<ResourceResponse<UserDefinedFunction>> createUserDefinedFunction(String collectionLink, UserDefinedFunction udf, RequestOptions options)
    parameters:
    - id: collectionLink
      type: java.lang.String
      description: the collection link.
    - id: udf
      type: com.azure.cosmos.implementation.UserDefinedFunction
      description: the user defined function.
    - id: options
      type: com.azure.cosmos.implementation.RequestOptions
      description: the request options.
    return:
      type: reactor.core.publisher.Mono<com.azure.cosmos.implementation.ResourceResponse<com.azure.cosmos.implementation.UserDefinedFunction>>
      description: a <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> containing the single resource response with the created user defined function or an error.
- uid: com.azure.cosmos.implementation.AsyncDocumentClient.deleteCollection(java.lang.String,com.azure.cosmos.implementation.RequestOptions)
  id: deleteCollection(java.lang.String,com.azure.cosmos.implementation.RequestOptions)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.AsyncDocumentClient
  langs:
  - java
  name: deleteCollection(String collectionLink, RequestOptions options)
  nameWithType: AsyncDocumentClient.deleteCollection(String collectionLink, RequestOptions options)
  fullName: com.azure.cosmos.implementation.AsyncDocumentClient.deleteCollection(String collectionLink, RequestOptions options)
  overload: com.azure.cosmos.implementation.AsyncDocumentClient.deleteCollection*
  type: Method
  package: com.azure.cosmos.implementation
  summary: >-
    Deletes a document collection


    After subscription the operation will be performed. The <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> upon successful completion will contain a single resource response for the deleted database. In case of failure the <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> will error.
  syntax:
    content: public abstract Mono<ResourceResponse<DocumentCollection>> deleteCollection(String collectionLink, RequestOptions options)
    parameters:
    - id: collectionLink
      type: java.lang.String
      description: the collection link.
    - id: options
      type: com.azure.cosmos.implementation.RequestOptions
      description: the request options.
    return:
      type: reactor.core.publisher.Mono<com.azure.cosmos.implementation.ResourceResponse<com.azure.cosmos.implementation.DocumentCollection>>
      description: a <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> containing the single resource response for the deleted database or an error.
- uid: com.azure.cosmos.implementation.AsyncDocumentClient.deleteConflict(java.lang.String,com.azure.cosmos.implementation.RequestOptions)
  id: deleteConflict(java.lang.String,com.azure.cosmos.implementation.RequestOptions)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.AsyncDocumentClient
  langs:
  - java
  name: deleteConflict(String conflictLink, RequestOptions options)
  nameWithType: AsyncDocumentClient.deleteConflict(String conflictLink, RequestOptions options)
  fullName: com.azure.cosmos.implementation.AsyncDocumentClient.deleteConflict(String conflictLink, RequestOptions options)
  overload: com.azure.cosmos.implementation.AsyncDocumentClient.deleteConflict*
  type: Method
  package: com.azure.cosmos.implementation
  summary: >-
    Deletes a conflict.


    After subscription the operation will be performed. The <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> upon successful completion will contain a single resource response for the deleted conflict. In case of failure the <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> will error.
  syntax:
    content: public abstract Mono<ResourceResponse<Conflict>> deleteConflict(String conflictLink, RequestOptions options)
    parameters:
    - id: conflictLink
      type: java.lang.String
      description: the conflict link.
    - id: options
      type: com.azure.cosmos.implementation.RequestOptions
      description: the request options.
    return:
      type: reactor.core.publisher.Mono<com.azure.cosmos.implementation.ResourceResponse<com.azure.cosmos.implementation.Conflict>>
      description: a <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> containing the single resource response for the deleted conflict or an error.
- uid: com.azure.cosmos.implementation.AsyncDocumentClient.deleteDatabase(java.lang.String,com.azure.cosmos.implementation.RequestOptions)
  id: deleteDatabase(java.lang.String,com.azure.cosmos.implementation.RequestOptions)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.AsyncDocumentClient
  langs:
  - java
  name: deleteDatabase(String databaseLink, RequestOptions options)
  nameWithType: AsyncDocumentClient.deleteDatabase(String databaseLink, RequestOptions options)
  fullName: com.azure.cosmos.implementation.AsyncDocumentClient.deleteDatabase(String databaseLink, RequestOptions options)
  overload: com.azure.cosmos.implementation.AsyncDocumentClient.deleteDatabase*
  type: Method
  package: com.azure.cosmos.implementation
  summary: >-
    Deletes a database.


    After subscription the operation will be performed. The <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> upon successful completion will contain a single resource response with the deleted database. In case of failure the <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> will error.
  syntax:
    content: public abstract Mono<ResourceResponse<Database>> deleteDatabase(String databaseLink, RequestOptions options)
    parameters:
    - id: databaseLink
      type: java.lang.String
      description: the database link.
    - id: options
      type: com.azure.cosmos.implementation.RequestOptions
      description: the request options.
    return:
      type: reactor.core.publisher.Mono<com.azure.cosmos.implementation.ResourceResponse<com.azure.cosmos.implementation.Database>>
      description: a <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> containing the single resource response with the deleted database or an error.
- uid: com.azure.cosmos.implementation.AsyncDocumentClient.deleteDocument(java.lang.String,com.azure.cosmos.implementation.RequestOptions)
  id: deleteDocument(java.lang.String,com.azure.cosmos.implementation.RequestOptions)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.AsyncDocumentClient
  langs:
  - java
  name: deleteDocument(String documentLink, RequestOptions options)
  nameWithType: AsyncDocumentClient.deleteDocument(String documentLink, RequestOptions options)
  fullName: com.azure.cosmos.implementation.AsyncDocumentClient.deleteDocument(String documentLink, RequestOptions options)
  overload: com.azure.cosmos.implementation.AsyncDocumentClient.deleteDocument*
  type: Method
  package: com.azure.cosmos.implementation
  summary: >-
    Deletes a document


    After subscription the operation will be performed. The <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> upon successful completion will contain a single resource response for the deleted document. In case of failure the <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> will error.
  syntax:
    content: public abstract Mono<ResourceResponse<Document>> deleteDocument(String documentLink, RequestOptions options)
    parameters:
    - id: documentLink
      type: java.lang.String
      description: the document link.
    - id: options
      type: com.azure.cosmos.implementation.RequestOptions
      description: the request options.
    return:
      type: reactor.core.publisher.Mono<com.azure.cosmos.implementation.ResourceResponse<com.azure.cosmos.implementation.Document>>
      description: a <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> containing the single resource response for the deleted document or an error.
- uid: com.azure.cosmos.implementation.AsyncDocumentClient.deletePermission(java.lang.String,com.azure.cosmos.implementation.RequestOptions)
  id: deletePermission(java.lang.String,com.azure.cosmos.implementation.RequestOptions)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.AsyncDocumentClient
  langs:
  - java
  name: deletePermission(String permissionLink, RequestOptions options)
  nameWithType: AsyncDocumentClient.deletePermission(String permissionLink, RequestOptions options)
  fullName: com.azure.cosmos.implementation.AsyncDocumentClient.deletePermission(String permissionLink, RequestOptions options)
  overload: com.azure.cosmos.implementation.AsyncDocumentClient.deletePermission*
  type: Method
  package: com.azure.cosmos.implementation
  summary: >-
    Deletes a permission.


    After subscription the operation will be performed. The <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> upon successful completion will contain a single resource response for the deleted permission. In case of failure the <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> will error.
  syntax:
    content: public abstract Mono<ResourceResponse<Permission>> deletePermission(String permissionLink, RequestOptions options)
    parameters:
    - id: permissionLink
      type: java.lang.String
      description: the permission link.
    - id: options
      type: com.azure.cosmos.implementation.RequestOptions
      description: the request options.
    return:
      type: reactor.core.publisher.Mono<com.azure.cosmos.implementation.ResourceResponse<com.azure.cosmos.implementation.Permission>>
      description: a <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> containing the single resource response for the deleted permission or an error.
- uid: com.azure.cosmos.implementation.AsyncDocumentClient.deleteStoredProcedure(java.lang.String,com.azure.cosmos.implementation.RequestOptions)
  id: deleteStoredProcedure(java.lang.String,com.azure.cosmos.implementation.RequestOptions)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.AsyncDocumentClient
  langs:
  - java
  name: deleteStoredProcedure(String storedProcedureLink, RequestOptions options)
  nameWithType: AsyncDocumentClient.deleteStoredProcedure(String storedProcedureLink, RequestOptions options)
  fullName: com.azure.cosmos.implementation.AsyncDocumentClient.deleteStoredProcedure(String storedProcedureLink, RequestOptions options)
  overload: com.azure.cosmos.implementation.AsyncDocumentClient.deleteStoredProcedure*
  type: Method
  package: com.azure.cosmos.implementation
  summary: >-
    Deletes a stored procedure


    After subscription the operation will be performed. The <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> upon successful completion will contain a single resource response for the deleted stored procedure. In case of failure the <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> will error.
  syntax:
    content: public abstract Mono<ResourceResponse<StoredProcedure>> deleteStoredProcedure(String storedProcedureLink, RequestOptions options)
    parameters:
    - id: storedProcedureLink
      type: java.lang.String
      description: the stored procedure link.
    - id: options
      type: com.azure.cosmos.implementation.RequestOptions
      description: the request options.
    return:
      type: reactor.core.publisher.Mono<com.azure.cosmos.implementation.ResourceResponse<com.azure.cosmos.implementation.StoredProcedure>>
      description: a <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> containing the single resource response for the deleted stored procedure or an error.
- uid: com.azure.cosmos.implementation.AsyncDocumentClient.deleteTrigger(java.lang.String,com.azure.cosmos.implementation.RequestOptions)
  id: deleteTrigger(java.lang.String,com.azure.cosmos.implementation.RequestOptions)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.AsyncDocumentClient
  langs:
  - java
  name: deleteTrigger(String triggerLink, RequestOptions options)
  nameWithType: AsyncDocumentClient.deleteTrigger(String triggerLink, RequestOptions options)
  fullName: com.azure.cosmos.implementation.AsyncDocumentClient.deleteTrigger(String triggerLink, RequestOptions options)
  overload: com.azure.cosmos.implementation.AsyncDocumentClient.deleteTrigger*
  type: Method
  package: com.azure.cosmos.implementation
  summary: >-
    Deletes a trigger.


    After subscription the operation will be performed. The <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> upon successful completion will contain a single resource response for the deleted trigger. In case of failure the <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> will error.
  syntax:
    content: public abstract Mono<ResourceResponse<Trigger>> deleteTrigger(String triggerLink, RequestOptions options)
    parameters:
    - id: triggerLink
      type: java.lang.String
      description: the trigger link.
    - id: options
      type: com.azure.cosmos.implementation.RequestOptions
      description: the request options.
    return:
      type: reactor.core.publisher.Mono<com.azure.cosmos.implementation.ResourceResponse<com.azure.cosmos.implementation.Trigger>>
      description: a <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> containing the single resource response for the deleted trigger or an error.
- uid: com.azure.cosmos.implementation.AsyncDocumentClient.deleteUser(java.lang.String,com.azure.cosmos.implementation.RequestOptions)
  id: deleteUser(java.lang.String,com.azure.cosmos.implementation.RequestOptions)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.AsyncDocumentClient
  langs:
  - java
  name: deleteUser(String userLink, RequestOptions options)
  nameWithType: AsyncDocumentClient.deleteUser(String userLink, RequestOptions options)
  fullName: com.azure.cosmos.implementation.AsyncDocumentClient.deleteUser(String userLink, RequestOptions options)
  overload: com.azure.cosmos.implementation.AsyncDocumentClient.deleteUser*
  type: Method
  package: com.azure.cosmos.implementation
  summary: >-
    Deletes a user.


    After subscription the operation will be performed. The <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> upon successful completion will contain a single resource response for the deleted user. In case of failure the <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> will error.
  syntax:
    content: public abstract Mono<ResourceResponse<User>> deleteUser(String userLink, RequestOptions options)
    parameters:
    - id: userLink
      type: java.lang.String
      description: the user link.
    - id: options
      type: com.azure.cosmos.implementation.RequestOptions
      description: the request options.
    return:
      type: reactor.core.publisher.Mono<com.azure.cosmos.implementation.ResourceResponse<com.azure.cosmos.implementation.User>>
      description: a <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> containing the single resource response for the deleted user or an error.
- uid: com.azure.cosmos.implementation.AsyncDocumentClient.deleteUserDefinedFunction(java.lang.String,com.azure.cosmos.implementation.RequestOptions)
  id: deleteUserDefinedFunction(java.lang.String,com.azure.cosmos.implementation.RequestOptions)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.AsyncDocumentClient
  langs:
  - java
  name: deleteUserDefinedFunction(String udfLink, RequestOptions options)
  nameWithType: AsyncDocumentClient.deleteUserDefinedFunction(String udfLink, RequestOptions options)
  fullName: com.azure.cosmos.implementation.AsyncDocumentClient.deleteUserDefinedFunction(String udfLink, RequestOptions options)
  overload: com.azure.cosmos.implementation.AsyncDocumentClient.deleteUserDefinedFunction*
  type: Method
  package: com.azure.cosmos.implementation
  summary: >-
    Deletes a user defined function.


    After subscription the operation will be performed. The <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> upon successful completion will contain a single resource response for the deleted user defined function. In case of failure the <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> will error.
  syntax:
    content: public abstract Mono<ResourceResponse<UserDefinedFunction>> deleteUserDefinedFunction(String udfLink, RequestOptions options)
    parameters:
    - id: udfLink
      type: java.lang.String
      description: the user defined function link.
    - id: options
      type: com.azure.cosmos.implementation.RequestOptions
      description: the request options.
    return:
      type: reactor.core.publisher.Mono<com.azure.cosmos.implementation.ResourceResponse<com.azure.cosmos.implementation.UserDefinedFunction>>
      description: a <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> containing the single resource response for the deleted user defined function or an error.
- uid: com.azure.cosmos.implementation.AsyncDocumentClient.executeStoredProcedure(java.lang.String,com.azure.cosmos.implementation.RequestOptions,java.util.List<java.lang.Object>)
  id: executeStoredProcedure(java.lang.String,com.azure.cosmos.implementation.RequestOptions,java.util.List<java.lang.Object>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.AsyncDocumentClient
  langs:
  - java
  name: executeStoredProcedure(String storedProcedureLink, RequestOptions options, List<Object> procedureParams)
  nameWithType: AsyncDocumentClient.executeStoredProcedure(String storedProcedureLink, RequestOptions options, List<Object> procedureParams)
  fullName: com.azure.cosmos.implementation.AsyncDocumentClient.executeStoredProcedure(String storedProcedureLink, RequestOptions options, List<Object> procedureParams)
  overload: com.azure.cosmos.implementation.AsyncDocumentClient.executeStoredProcedure*
  type: Method
  package: com.azure.cosmos.implementation
  summary: >-
    Executes a stored procedure


    After subscription the operation will be performed. The <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> upon successful completion will contain a single resource response with the stored procedure response. In case of failure the <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> will error.
  syntax:
    content: public abstract Mono<StoredProcedureResponse> executeStoredProcedure(String storedProcedureLink, RequestOptions options, List<Object> procedureParams)
    parameters:
    - id: storedProcedureLink
      type: java.lang.String
      description: the stored procedure link.
    - id: options
      type: com.azure.cosmos.implementation.RequestOptions
      description: the request options.
    - id: procedureParams
      type: java.util.List<java.lang.Object>
      description: the array of procedure parameter values.
    return:
      type: reactor.core.publisher.Mono<com.azure.cosmos.implementation.StoredProcedureResponse>
      description: a <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> containing the single resource response with the stored procedure response or an error.
- uid: com.azure.cosmos.implementation.AsyncDocumentClient.executeStoredProcedure(java.lang.String,java.util.List<java.lang.Object>)
  id: executeStoredProcedure(java.lang.String,java.util.List<java.lang.Object>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.AsyncDocumentClient
  langs:
  - java
  name: executeStoredProcedure(String storedProcedureLink, List<Object> procedureParams)
  nameWithType: AsyncDocumentClient.executeStoredProcedure(String storedProcedureLink, List<Object> procedureParams)
  fullName: com.azure.cosmos.implementation.AsyncDocumentClient.executeStoredProcedure(String storedProcedureLink, List<Object> procedureParams)
  overload: com.azure.cosmos.implementation.AsyncDocumentClient.executeStoredProcedure*
  type: Method
  package: com.azure.cosmos.implementation
  summary: >-
    Executes a stored procedure


    After subscription the operation will be performed. The <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> upon successful completion will contain a single resource response with the stored procedure response. In case of failure the <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> will error.
  syntax:
    content: public abstract Mono<StoredProcedureResponse> executeStoredProcedure(String storedProcedureLink, List<Object> procedureParams)
    parameters:
    - id: storedProcedureLink
      type: java.lang.String
      description: the stored procedure link.
    - id: procedureParams
      type: java.util.List<java.lang.Object>
      description: the array of procedure parameter values.
    return:
      type: reactor.core.publisher.Mono<com.azure.cosmos.implementation.StoredProcedureResponse>
      description: a <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> containing the single resource response with the stored procedure response or an error.
- uid: com.azure.cosmos.implementation.AsyncDocumentClient.getConnectionPolicy()
  id: getConnectionPolicy()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.AsyncDocumentClient
  langs:
  - java
  name: getConnectionPolicy()
  nameWithType: AsyncDocumentClient.getConnectionPolicy()
  fullName: com.azure.cosmos.implementation.AsyncDocumentClient.getConnectionPolicy()
  overload: com.azure.cosmos.implementation.AsyncDocumentClient.getConnectionPolicy*
  type: Method
  package: com.azure.cosmos.implementation
  summary: Gets the connection policy
  syntax:
    content: public abstract ConnectionPolicy getConnectionPolicy()
    return:
      type: com.azure.cosmos.implementation.ConnectionPolicy
      description: the connection policy
- uid: com.azure.cosmos.implementation.AsyncDocumentClient.getConsistencyLevel()
  id: getConsistencyLevel()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.AsyncDocumentClient
  langs:
  - java
  name: getConsistencyLevel()
  nameWithType: AsyncDocumentClient.getConsistencyLevel()
  fullName: com.azure.cosmos.implementation.AsyncDocumentClient.getConsistencyLevel()
  overload: com.azure.cosmos.implementation.AsyncDocumentClient.getConsistencyLevel*
  type: Method
  package: com.azure.cosmos.implementation
  summary: Gets the desired consistency level
  syntax:
    content: public abstract ConsistencyLevel getConsistencyLevel()
    return:
      type: com.azure.cosmos.ConsistencyLevel
      description: the consistency level
- uid: com.azure.cosmos.implementation.AsyncDocumentClient.getDatabaseAccount()
  id: getDatabaseAccount()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.AsyncDocumentClient
  langs:
  - java
  name: getDatabaseAccount()
  nameWithType: AsyncDocumentClient.getDatabaseAccount()
  fullName: com.azure.cosmos.implementation.AsyncDocumentClient.getDatabaseAccount()
  overload: com.azure.cosmos.implementation.AsyncDocumentClient.getDatabaseAccount*
  type: Method
  package: com.azure.cosmos.implementation
  summary: >-
    Gets database account information.


    After subscription the operation will be performed. The <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> upon successful completion will contain a single resource response with the database account. In case of failure the <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> will error.
  syntax:
    content: public abstract Mono<DatabaseAccount> getDatabaseAccount()
    return:
      type: reactor.core.publisher.Mono<com.azure.cosmos.implementation.DatabaseAccount>
      description: a <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> containing the single resource response with the database account or an error.
- uid: com.azure.cosmos.implementation.AsyncDocumentClient.getItemDeserializer()
  id: getItemDeserializer()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.AsyncDocumentClient
  langs:
  - java
  name: getItemDeserializer()
  nameWithType: AsyncDocumentClient.getItemDeserializer()
  fullName: com.azure.cosmos.implementation.AsyncDocumentClient.getItemDeserializer()
  overload: com.azure.cosmos.implementation.AsyncDocumentClient.getItemDeserializer*
  type: Method
  package: com.azure.cosmos.implementation
  syntax:
    content: public abstract ItemDeserializer getItemDeserializer()
    return:
      type: com.azure.cosmos.implementation.ItemDeserializer
- uid: com.azure.cosmos.implementation.AsyncDocumentClient.getReadEndpoint()
  id: getReadEndpoint()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.AsyncDocumentClient
  langs:
  - java
  name: getReadEndpoint()
  nameWithType: AsyncDocumentClient.getReadEndpoint()
  fullName: com.azure.cosmos.implementation.AsyncDocumentClient.getReadEndpoint()
  overload: com.azure.cosmos.implementation.AsyncDocumentClient.getReadEndpoint*
  type: Method
  package: com.azure.cosmos.implementation
  summary: Gets the current read endpoint chosen based on availability and preference.
  syntax:
    content: public abstract URI getReadEndpoint()
    return:
      type: java.net.URI
      description: the read endpoint URI
- uid: com.azure.cosmos.implementation.AsyncDocumentClient.getServiceEndpoint()
  id: getServiceEndpoint()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.AsyncDocumentClient
  langs:
  - java
  name: getServiceEndpoint()
  nameWithType: AsyncDocumentClient.getServiceEndpoint()
  fullName: com.azure.cosmos.implementation.AsyncDocumentClient.getServiceEndpoint()
  overload: com.azure.cosmos.implementation.AsyncDocumentClient.getServiceEndpoint*
  type: Method
  package: com.azure.cosmos.implementation
  summary: Gets the default service endpoint as passed in by the user during construction.
  syntax:
    content: public abstract URI getServiceEndpoint()
    return:
      type: java.net.URI
      description: the service endpoint URI
- uid: com.azure.cosmos.implementation.AsyncDocumentClient.getWriteEndpoint()
  id: getWriteEndpoint()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.AsyncDocumentClient
  langs:
  - java
  name: getWriteEndpoint()
  nameWithType: AsyncDocumentClient.getWriteEndpoint()
  fullName: com.azure.cosmos.implementation.AsyncDocumentClient.getWriteEndpoint()
  overload: com.azure.cosmos.implementation.AsyncDocumentClient.getWriteEndpoint*
  type: Method
  package: com.azure.cosmos.implementation
  summary: Gets the current write endpoint chosen based on availability and preference.
  syntax:
    content: public abstract URI getWriteEndpoint()
    return:
      type: java.net.URI
      description: the write endpoint URI
- uid: com.azure.cosmos.implementation.AsyncDocumentClient.isContentResponseOnWriteEnabled()
  id: isContentResponseOnWriteEnabled()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.AsyncDocumentClient
  langs:
  - java
  name: isContentResponseOnWriteEnabled()
  nameWithType: AsyncDocumentClient.isContentResponseOnWriteEnabled()
  fullName: com.azure.cosmos.implementation.AsyncDocumentClient.isContentResponseOnWriteEnabled()
  overload: com.azure.cosmos.implementation.AsyncDocumentClient.isContentResponseOnWriteEnabled*
  type: Method
  package: com.azure.cosmos.implementation
  summary: Gets the boolean which indicates whether to only return the headers and status code in Cosmos DB response in case of Create, Update and Delete operations on CosmosItem. If set to false (which is by default), this removes the resource from response. It reduces networking and CPU load by not sending the resource back over the network and serializing it on the client. By-default, this is false.
  syntax:
    content: public abstract boolean isContentResponseOnWriteEnabled()
    return:
      type: boolean
      description: a boolean indicating whether resource will be included in the response or not.
- uid: com.azure.cosmos.implementation.AsyncDocumentClient.queryCollections(java.lang.String,com.azure.cosmos.models.SqlQuerySpec,com.azure.cosmos.models.CosmosQueryRequestOptions)
  id: queryCollections(java.lang.String,com.azure.cosmos.models.SqlQuerySpec,com.azure.cosmos.models.CosmosQueryRequestOptions)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.AsyncDocumentClient
  langs:
  - java
  name: queryCollections(String databaseLink, SqlQuerySpec querySpec, CosmosQueryRequestOptions options)
  nameWithType: AsyncDocumentClient.queryCollections(String databaseLink, SqlQuerySpec querySpec, CosmosQueryRequestOptions options)
  fullName: com.azure.cosmos.implementation.AsyncDocumentClient.queryCollections(String databaseLink, SqlQuerySpec querySpec, CosmosQueryRequestOptions options)
  overload: com.azure.cosmos.implementation.AsyncDocumentClient.queryCollections*
  type: Method
  package: com.azure.cosmos.implementation
  summary: >-
    Query for document collections in a database.


    After subscription the operation will be performed. The <xref uid="reactor.core.publisher.Flux" data-throw-if-not-resolved="false">Flux</xref> will contain one or several feed response of the obtained collections. In case of failure the <xref uid="reactor.core.publisher.Flux" data-throw-if-not-resolved="false">Flux</xref> will error.
  syntax:
    content: public abstract Flux<FeedResponse<DocumentCollection>> queryCollections(String databaseLink, SqlQuerySpec querySpec, CosmosQueryRequestOptions options)
    parameters:
    - id: databaseLink
      type: java.lang.String
      description: the database link.
    - id: querySpec
      type: com.azure.cosmos.models.SqlQuerySpec
      description: the SQL query specification.
    - id: options
      type: com.azure.cosmos.models.CosmosQueryRequestOptions
      description: the query request options.
    return:
      type: reactor.core.publisher.Flux<com.azure.cosmos.models.FeedResponse<com.azure.cosmos.implementation.DocumentCollection>>
      description: a <xref uid="reactor.core.publisher.Flux" data-throw-if-not-resolved="false">Flux</xref> containing one or several feed response pages of the obtained collections or an error.
- uid: com.azure.cosmos.implementation.AsyncDocumentClient.queryCollections(java.lang.String,java.lang.String,com.azure.cosmos.models.CosmosQueryRequestOptions)
  id: queryCollections(java.lang.String,java.lang.String,com.azure.cosmos.models.CosmosQueryRequestOptions)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.AsyncDocumentClient
  langs:
  - java
  name: queryCollections(String databaseLink, String query, CosmosQueryRequestOptions options)
  nameWithType: AsyncDocumentClient.queryCollections(String databaseLink, String query, CosmosQueryRequestOptions options)
  fullName: com.azure.cosmos.implementation.AsyncDocumentClient.queryCollections(String databaseLink, String query, CosmosQueryRequestOptions options)
  overload: com.azure.cosmos.implementation.AsyncDocumentClient.queryCollections*
  type: Method
  package: com.azure.cosmos.implementation
  summary: >-
    Query for document collections in a database.


    After subscription the operation will be performed. The <xref uid="reactor.core.publisher.Flux" data-throw-if-not-resolved="false">Flux</xref> will contain one or several feed response of the obtained collections. In case of failure the <xref uid="reactor.core.publisher.Flux" data-throw-if-not-resolved="false">Flux</xref> will error.
  syntax:
    content: public abstract Flux<FeedResponse<DocumentCollection>> queryCollections(String databaseLink, String query, CosmosQueryRequestOptions options)
    parameters:
    - id: databaseLink
      type: java.lang.String
      description: the database link.
    - id: query
      type: java.lang.String
      description: the query.
    - id: options
      type: com.azure.cosmos.models.CosmosQueryRequestOptions
      description: the query request options.
    return:
      type: reactor.core.publisher.Flux<com.azure.cosmos.models.FeedResponse<com.azure.cosmos.implementation.DocumentCollection>>
      description: a <xref uid="reactor.core.publisher.Flux" data-throw-if-not-resolved="false">Flux</xref> containing one or several feed response pages of the obtained collections or an error.
- uid: com.azure.cosmos.implementation.AsyncDocumentClient.queryConflicts(java.lang.String,com.azure.cosmos.models.SqlQuerySpec,com.azure.cosmos.models.CosmosQueryRequestOptions)
  id: queryConflicts(java.lang.String,com.azure.cosmos.models.SqlQuerySpec,com.azure.cosmos.models.CosmosQueryRequestOptions)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.AsyncDocumentClient
  langs:
  - java
  name: queryConflicts(String collectionLink, SqlQuerySpec querySpec, CosmosQueryRequestOptions options)
  nameWithType: AsyncDocumentClient.queryConflicts(String collectionLink, SqlQuerySpec querySpec, CosmosQueryRequestOptions options)
  fullName: com.azure.cosmos.implementation.AsyncDocumentClient.queryConflicts(String collectionLink, SqlQuerySpec querySpec, CosmosQueryRequestOptions options)
  overload: com.azure.cosmos.implementation.AsyncDocumentClient.queryConflicts*
  type: Method
  package: com.azure.cosmos.implementation
  summary: >-
    Query for conflicts.


    After subscription the operation will be performed. The <xref uid="reactor.core.publisher.Flux" data-throw-if-not-resolved="false">Flux</xref> will contain one or several feed response pages of the obtained conflicts. In case of failure the <xref uid="reactor.core.publisher.Flux" data-throw-if-not-resolved="false">Flux</xref> will error.
  syntax:
    content: public abstract Flux<FeedResponse<Conflict>> queryConflicts(String collectionLink, SqlQuerySpec querySpec, CosmosQueryRequestOptions options)
    parameters:
    - id: collectionLink
      type: java.lang.String
      description: the collection link.
    - id: querySpec
      type: com.azure.cosmos.models.SqlQuerySpec
      description: the SQL query specification.
    - id: options
      type: com.azure.cosmos.models.CosmosQueryRequestOptions
      description: the query request options.
    return:
      type: reactor.core.publisher.Flux<com.azure.cosmos.models.FeedResponse<com.azure.cosmos.implementation.Conflict>>
      description: a <xref uid="reactor.core.publisher.Flux" data-throw-if-not-resolved="false">Flux</xref> containing one or several feed response pages of the obtained conflicts or an error.
- uid: com.azure.cosmos.implementation.AsyncDocumentClient.queryConflicts(java.lang.String,java.lang.String,com.azure.cosmos.models.CosmosQueryRequestOptions)
  id: queryConflicts(java.lang.String,java.lang.String,com.azure.cosmos.models.CosmosQueryRequestOptions)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.AsyncDocumentClient
  langs:
  - java
  name: queryConflicts(String collectionLink, String query, CosmosQueryRequestOptions options)
  nameWithType: AsyncDocumentClient.queryConflicts(String collectionLink, String query, CosmosQueryRequestOptions options)
  fullName: com.azure.cosmos.implementation.AsyncDocumentClient.queryConflicts(String collectionLink, String query, CosmosQueryRequestOptions options)
  overload: com.azure.cosmos.implementation.AsyncDocumentClient.queryConflicts*
  type: Method
  package: com.azure.cosmos.implementation
  summary: >-
    Query for conflicts.


    After subscription the operation will be performed. The <xref uid="reactor.core.publisher.Flux" data-throw-if-not-resolved="false">Flux</xref> will contain one or several feed response pages of the obtained conflicts. In case of failure the <xref uid="reactor.core.publisher.Flux" data-throw-if-not-resolved="false">Flux</xref> will error.
  syntax:
    content: public abstract Flux<FeedResponse<Conflict>> queryConflicts(String collectionLink, String query, CosmosQueryRequestOptions options)
    parameters:
    - id: collectionLink
      type: java.lang.String
      description: the collection link.
    - id: query
      type: java.lang.String
      description: the query.
    - id: options
      type: com.azure.cosmos.models.CosmosQueryRequestOptions
      description: the query request options.
    return:
      type: reactor.core.publisher.Flux<com.azure.cosmos.models.FeedResponse<com.azure.cosmos.implementation.Conflict>>
      description: a <xref uid="reactor.core.publisher.Flux" data-throw-if-not-resolved="false">Flux</xref> containing one or several feed response pages of the obtained conflicts or an error.
- uid: com.azure.cosmos.implementation.AsyncDocumentClient.queryDatabases(com.azure.cosmos.models.SqlQuerySpec,com.azure.cosmos.models.CosmosQueryRequestOptions)
  id: queryDatabases(com.azure.cosmos.models.SqlQuerySpec,com.azure.cosmos.models.CosmosQueryRequestOptions)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.AsyncDocumentClient
  langs:
  - java
  name: queryDatabases(SqlQuerySpec querySpec, CosmosQueryRequestOptions options)
  nameWithType: AsyncDocumentClient.queryDatabases(SqlQuerySpec querySpec, CosmosQueryRequestOptions options)
  fullName: com.azure.cosmos.implementation.AsyncDocumentClient.queryDatabases(SqlQuerySpec querySpec, CosmosQueryRequestOptions options)
  overload: com.azure.cosmos.implementation.AsyncDocumentClient.queryDatabases*
  type: Method
  package: com.azure.cosmos.implementation
  summary: >-
    Query for databases.


    After subscription the operation will be performed. The <xref uid="reactor.core.publisher.Flux" data-throw-if-not-resolved="false">Flux</xref> will contain one or several feed response of the obtained databases. In case of failure the <xref uid="reactor.core.publisher.Flux" data-throw-if-not-resolved="false">Flux</xref> will error.
  syntax:
    content: public abstract Flux<FeedResponse<Database>> queryDatabases(SqlQuerySpec querySpec, CosmosQueryRequestOptions options)
    parameters:
    - id: querySpec
      type: com.azure.cosmos.models.SqlQuerySpec
      description: the SQL query specification.
    - id: options
      type: com.azure.cosmos.models.CosmosQueryRequestOptions
      description: the query request options.
    return:
      type: reactor.core.publisher.Flux<com.azure.cosmos.models.FeedResponse<com.azure.cosmos.implementation.Database>>
      description: a <xref uid="reactor.core.publisher.Flux" data-throw-if-not-resolved="false">Flux</xref> containing one or several feed response pages of the obtained databases or an error.
- uid: com.azure.cosmos.implementation.AsyncDocumentClient.queryDatabases(java.lang.String,com.azure.cosmos.models.CosmosQueryRequestOptions)
  id: queryDatabases(java.lang.String,com.azure.cosmos.models.CosmosQueryRequestOptions)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.AsyncDocumentClient
  langs:
  - java
  name: queryDatabases(String query, CosmosQueryRequestOptions options)
  nameWithType: AsyncDocumentClient.queryDatabases(String query, CosmosQueryRequestOptions options)
  fullName: com.azure.cosmos.implementation.AsyncDocumentClient.queryDatabases(String query, CosmosQueryRequestOptions options)
  overload: com.azure.cosmos.implementation.AsyncDocumentClient.queryDatabases*
  type: Method
  package: com.azure.cosmos.implementation
  summary: >-
    Query for databases.


    After subscription the operation will be performed. The <xref uid="reactor.core.publisher.Flux" data-throw-if-not-resolved="false">Flux</xref> will contain one or several feed response of the read databases. In case of failure the <xref uid="reactor.core.publisher.Flux" data-throw-if-not-resolved="false">Flux</xref> will error.
  syntax:
    content: public abstract Flux<FeedResponse<Database>> queryDatabases(String query, CosmosQueryRequestOptions options)
    parameters:
    - id: query
      type: java.lang.String
      description: the query.
    - id: options
      type: com.azure.cosmos.models.CosmosQueryRequestOptions
      description: the query request options.
    return:
      type: reactor.core.publisher.Flux<com.azure.cosmos.models.FeedResponse<com.azure.cosmos.implementation.Database>>
      description: a <xref uid="reactor.core.publisher.Flux" data-throw-if-not-resolved="false">Flux</xref> containing one or several feed response pages of read databases or an error.
- uid: com.azure.cosmos.implementation.AsyncDocumentClient.queryDocumentChangeFeed(java.lang.String,com.azure.cosmos.implementation.ChangeFeedOptions)
  id: queryDocumentChangeFeed(java.lang.String,com.azure.cosmos.implementation.ChangeFeedOptions)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.AsyncDocumentClient
  langs:
  - java
  name: queryDocumentChangeFeed(String collectionLink, ChangeFeedOptions changeFeedOptions)
  nameWithType: AsyncDocumentClient.queryDocumentChangeFeed(String collectionLink, ChangeFeedOptions changeFeedOptions)
  fullName: com.azure.cosmos.implementation.AsyncDocumentClient.queryDocumentChangeFeed(String collectionLink, ChangeFeedOptions changeFeedOptions)
  overload: com.azure.cosmos.implementation.AsyncDocumentClient.queryDocumentChangeFeed*
  type: Method
  package: com.azure.cosmos.implementation
  summary: Query for documents change feed in a document collection. After subscription the operation will be performed. The <xref uid="reactor.core.publisher.Flux" data-throw-if-not-resolved="false">Flux</xref> will contain one or several feed response pages of the obtained documents. In case of failure the <xref uid="reactor.core.publisher.Flux" data-throw-if-not-resolved="false">Flux</xref> will error.
  syntax:
    content: public abstract Flux<FeedResponse<Document>> queryDocumentChangeFeed(String collectionLink, ChangeFeedOptions changeFeedOptions)
    parameters:
    - id: collectionLink
      type: java.lang.String
      description: the link to the parent document collection.
    - id: changeFeedOptions
      type: com.azure.cosmos.implementation.ChangeFeedOptions
      description: the change feed options.
    return:
      type: reactor.core.publisher.Flux<com.azure.cosmos.models.FeedResponse<com.azure.cosmos.implementation.Document>>
      description: a <xref uid="reactor.core.publisher.Flux" data-throw-if-not-resolved="false">Flux</xref> containing one or several feed response pages of the obtained documents or an error.
- uid: com.azure.cosmos.implementation.AsyncDocumentClient.queryDocuments(java.lang.String,com.azure.cosmos.models.SqlQuerySpec,com.azure.cosmos.models.CosmosQueryRequestOptions)
  id: queryDocuments(java.lang.String,com.azure.cosmos.models.SqlQuerySpec,com.azure.cosmos.models.CosmosQueryRequestOptions)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.AsyncDocumentClient
  langs:
  - java
  name: queryDocuments(String collectionLink, SqlQuerySpec querySpec, CosmosQueryRequestOptions options)
  nameWithType: AsyncDocumentClient.queryDocuments(String collectionLink, SqlQuerySpec querySpec, CosmosQueryRequestOptions options)
  fullName: com.azure.cosmos.implementation.AsyncDocumentClient.queryDocuments(String collectionLink, SqlQuerySpec querySpec, CosmosQueryRequestOptions options)
  overload: com.azure.cosmos.implementation.AsyncDocumentClient.queryDocuments*
  type: Method
  package: com.azure.cosmos.implementation
  summary: >-
    Query for documents in a document collection.


    After subscription the operation will be performed. The <xref uid="reactor.core.publisher.Flux" data-throw-if-not-resolved="false">Flux</xref> will contain one or several feed response of the obtained documents. In case of failure the <xref uid="reactor.core.publisher.Flux" data-throw-if-not-resolved="false">Flux</xref> will error.
  syntax:
    content: public abstract Flux<FeedResponse<Document>> queryDocuments(String collectionLink, SqlQuerySpec querySpec, CosmosQueryRequestOptions options)
    parameters:
    - id: collectionLink
      type: java.lang.String
      description: the link to the parent document collection.
    - id: querySpec
      type: com.azure.cosmos.models.SqlQuerySpec
      description: the SQL query specification.
    - id: options
      type: com.azure.cosmos.models.CosmosQueryRequestOptions
      description: the query request options.
    return:
      type: reactor.core.publisher.Flux<com.azure.cosmos.models.FeedResponse<com.azure.cosmos.implementation.Document>>
      description: a <xref uid="reactor.core.publisher.Flux" data-throw-if-not-resolved="false">Flux</xref> containing one or several feed response pages of the obtained documents or an error.
- uid: com.azure.cosmos.implementation.AsyncDocumentClient.queryDocuments(java.lang.String,java.lang.String,com.azure.cosmos.models.CosmosQueryRequestOptions)
  id: queryDocuments(java.lang.String,java.lang.String,com.azure.cosmos.models.CosmosQueryRequestOptions)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.AsyncDocumentClient
  langs:
  - java
  name: queryDocuments(String collectionLink, String query, CosmosQueryRequestOptions options)
  nameWithType: AsyncDocumentClient.queryDocuments(String collectionLink, String query, CosmosQueryRequestOptions options)
  fullName: com.azure.cosmos.implementation.AsyncDocumentClient.queryDocuments(String collectionLink, String query, CosmosQueryRequestOptions options)
  overload: com.azure.cosmos.implementation.AsyncDocumentClient.queryDocuments*
  type: Method
  package: com.azure.cosmos.implementation
  summary: >-
    Query for documents in a document collection.


    After subscription the operation will be performed. The <xref uid="reactor.core.publisher.Flux" data-throw-if-not-resolved="false">Flux</xref> will contain one or several feed response of the obtained documents. In case of failure the <xref uid="reactor.core.publisher.Flux" data-throw-if-not-resolved="false">Flux</xref> will error.
  syntax:
    content: public abstract Flux<FeedResponse<Document>> queryDocuments(String collectionLink, String query, CosmosQueryRequestOptions options)
    parameters:
    - id: collectionLink
      type: java.lang.String
      description: the link to the parent document collection.
    - id: query
      type: java.lang.String
      description: the query.
    - id: options
      type: com.azure.cosmos.models.CosmosQueryRequestOptions
      description: the query request options.
    return:
      type: reactor.core.publisher.Flux<com.azure.cosmos.models.FeedResponse<com.azure.cosmos.implementation.Document>>
      description: a <xref uid="reactor.core.publisher.Flux" data-throw-if-not-resolved="false">Flux</xref> containing one or several feed response pages of the obtained document or an error.
- uid: com.azure.cosmos.implementation.AsyncDocumentClient.queryOffers(com.azure.cosmos.models.SqlQuerySpec,com.azure.cosmos.models.CosmosQueryRequestOptions)
  id: queryOffers(com.azure.cosmos.models.SqlQuerySpec,com.azure.cosmos.models.CosmosQueryRequestOptions)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.AsyncDocumentClient
  langs:
  - java
  name: queryOffers(SqlQuerySpec querySpec, CosmosQueryRequestOptions options)
  nameWithType: AsyncDocumentClient.queryOffers(SqlQuerySpec querySpec, CosmosQueryRequestOptions options)
  fullName: com.azure.cosmos.implementation.AsyncDocumentClient.queryOffers(SqlQuerySpec querySpec, CosmosQueryRequestOptions options)
  overload: com.azure.cosmos.implementation.AsyncDocumentClient.queryOffers*
  type: Method
  package: com.azure.cosmos.implementation
  summary: >-
    Query for offers in a database.


    After subscription the operation will be performed. The <xref uid="reactor.core.publisher.Flux" data-throw-if-not-resolved="false">Flux</xref> will contain one or several feed response pages of obtained obtained offers. In case of failure the <xref uid="reactor.core.publisher.Flux" data-throw-if-not-resolved="false">Flux</xref> will error.
  syntax:
    content: public abstract Flux<FeedResponse<Offer>> queryOffers(SqlQuerySpec querySpec, CosmosQueryRequestOptions options)
    parameters:
    - id: querySpec
      type: com.azure.cosmos.models.SqlQuerySpec
      description: the query specification.
    - id: options
      type: com.azure.cosmos.models.CosmosQueryRequestOptions
      description: the query request options.
    return:
      type: reactor.core.publisher.Flux<com.azure.cosmos.models.FeedResponse<com.azure.cosmos.implementation.Offer>>
      description: a <xref uid="reactor.core.publisher.Flux" data-throw-if-not-resolved="false">Flux</xref> containing one or several feed response pages of the obtained offers or an error.
- uid: com.azure.cosmos.implementation.AsyncDocumentClient.queryOffers(java.lang.String,com.azure.cosmos.models.CosmosQueryRequestOptions)
  id: queryOffers(java.lang.String,com.azure.cosmos.models.CosmosQueryRequestOptions)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.AsyncDocumentClient
  langs:
  - java
  name: queryOffers(String query, CosmosQueryRequestOptions options)
  nameWithType: AsyncDocumentClient.queryOffers(String query, CosmosQueryRequestOptions options)
  fullName: com.azure.cosmos.implementation.AsyncDocumentClient.queryOffers(String query, CosmosQueryRequestOptions options)
  overload: com.azure.cosmos.implementation.AsyncDocumentClient.queryOffers*
  type: Method
  package: com.azure.cosmos.implementation
  summary: >-
    Query for offers in a database.


    After subscription the operation will be performed. The <xref uid="reactor.core.publisher.Flux" data-throw-if-not-resolved="false">Flux</xref> will contain one or several feed response pages of obtained obtained offers. In case of failure the <xref uid="reactor.core.publisher.Flux" data-throw-if-not-resolved="false">Flux</xref> will error.
  syntax:
    content: public abstract Flux<FeedResponse<Offer>> queryOffers(String query, CosmosQueryRequestOptions options)
    parameters:
    - id: query
      type: java.lang.String
      description: the query.
    - id: options
      type: com.azure.cosmos.models.CosmosQueryRequestOptions
      description: the query request options.
    return:
      type: reactor.core.publisher.Flux<com.azure.cosmos.models.FeedResponse<com.azure.cosmos.implementation.Offer>>
      description: a <xref uid="reactor.core.publisher.Flux" data-throw-if-not-resolved="false">Flux</xref> containing one or several feed response pages of the obtained offers or an error.
- uid: com.azure.cosmos.implementation.AsyncDocumentClient.queryPermissions(java.lang.String,com.azure.cosmos.models.SqlQuerySpec,com.azure.cosmos.models.CosmosQueryRequestOptions)
  id: queryPermissions(java.lang.String,com.azure.cosmos.models.SqlQuerySpec,com.azure.cosmos.models.CosmosQueryRequestOptions)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.AsyncDocumentClient
  langs:
  - java
  name: queryPermissions(String permissionLink, SqlQuerySpec querySpec, CosmosQueryRequestOptions options)
  nameWithType: AsyncDocumentClient.queryPermissions(String permissionLink, SqlQuerySpec querySpec, CosmosQueryRequestOptions options)
  fullName: com.azure.cosmos.implementation.AsyncDocumentClient.queryPermissions(String permissionLink, SqlQuerySpec querySpec, CosmosQueryRequestOptions options)
  overload: com.azure.cosmos.implementation.AsyncDocumentClient.queryPermissions*
  type: Method
  package: com.azure.cosmos.implementation
  summary: >-
    Query for permissions.


    After subscription the operation will be performed. The <xref uid="reactor.core.publisher.Flux" data-throw-if-not-resolved="false">Flux</xref> will contain one or several feed response pages of the obtained permissions. In case of failure the <xref uid="reactor.core.publisher.Flux" data-throw-if-not-resolved="false">Flux</xref> will error.
  syntax:
    content: public abstract Flux<FeedResponse<Permission>> queryPermissions(String permissionLink, SqlQuerySpec querySpec, CosmosQueryRequestOptions options)
    parameters:
    - id: permissionLink
      type: java.lang.String
      description: the permission link.
    - id: querySpec
      type: com.azure.cosmos.models.SqlQuerySpec
      description: the SQL query specification.
    - id: options
      type: com.azure.cosmos.models.CosmosQueryRequestOptions
      description: the query request options.
    return:
      type: reactor.core.publisher.Flux<com.azure.cosmos.models.FeedResponse<com.azure.cosmos.implementation.Permission>>
      description: a <xref uid="reactor.core.publisher.Flux" data-throw-if-not-resolved="false">Flux</xref> containing one or several feed response pages of the obtained permissions or an error.
- uid: com.azure.cosmos.implementation.AsyncDocumentClient.queryPermissions(java.lang.String,java.lang.String,com.azure.cosmos.models.CosmosQueryRequestOptions)
  id: queryPermissions(java.lang.String,java.lang.String,com.azure.cosmos.models.CosmosQueryRequestOptions)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.AsyncDocumentClient
  langs:
  - java
  name: queryPermissions(String permissionLink, String query, CosmosQueryRequestOptions options)
  nameWithType: AsyncDocumentClient.queryPermissions(String permissionLink, String query, CosmosQueryRequestOptions options)
  fullName: com.azure.cosmos.implementation.AsyncDocumentClient.queryPermissions(String permissionLink, String query, CosmosQueryRequestOptions options)
  overload: com.azure.cosmos.implementation.AsyncDocumentClient.queryPermissions*
  type: Method
  package: com.azure.cosmos.implementation
  summary: >-
    Query for permissions.


    After subscription the operation will be performed. The <xref uid="reactor.core.publisher.Flux" data-throw-if-not-resolved="false">Flux</xref> will contain one or several feed response pages of the obtained permissions. In case of failure the <xref uid="reactor.core.publisher.Flux" data-throw-if-not-resolved="false">Flux</xref> will error.
  syntax:
    content: public abstract Flux<FeedResponse<Permission>> queryPermissions(String permissionLink, String query, CosmosQueryRequestOptions options)
    parameters:
    - id: permissionLink
      type: java.lang.String
      description: the permission link.
    - id: query
      type: java.lang.String
      description: the query.
    - id: options
      type: com.azure.cosmos.models.CosmosQueryRequestOptions
      description: the query request options.
    return:
      type: reactor.core.publisher.Flux<com.azure.cosmos.models.FeedResponse<com.azure.cosmos.implementation.Permission>>
      description: a <xref uid="reactor.core.publisher.Flux" data-throw-if-not-resolved="false">Flux</xref> containing one or several feed response pages of the obtained permissions or an error.
- uid: com.azure.cosmos.implementation.AsyncDocumentClient.queryStoredProcedures(java.lang.String,com.azure.cosmos.models.SqlQuerySpec,com.azure.cosmos.models.CosmosQueryRequestOptions)
  id: queryStoredProcedures(java.lang.String,com.azure.cosmos.models.SqlQuerySpec,com.azure.cosmos.models.CosmosQueryRequestOptions)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.AsyncDocumentClient
  langs:
  - java
  name: queryStoredProcedures(String collectionLink, SqlQuerySpec querySpec, CosmosQueryRequestOptions options)
  nameWithType: AsyncDocumentClient.queryStoredProcedures(String collectionLink, SqlQuerySpec querySpec, CosmosQueryRequestOptions options)
  fullName: com.azure.cosmos.implementation.AsyncDocumentClient.queryStoredProcedures(String collectionLink, SqlQuerySpec querySpec, CosmosQueryRequestOptions options)
  overload: com.azure.cosmos.implementation.AsyncDocumentClient.queryStoredProcedures*
  type: Method
  package: com.azure.cosmos.implementation
  summary: >-
    Query for stored procedures in a document collection.


    After subscription the operation will be performed. The <xref uid="reactor.core.publisher.Flux" data-throw-if-not-resolved="false">Flux</xref> will contain one or several feed response pages of the obtained stored procedures. In case of failure the <xref uid="reactor.core.publisher.Flux" data-throw-if-not-resolved="false">Flux</xref> will error.
  syntax:
    content: public abstract Flux<FeedResponse<StoredProcedure>> queryStoredProcedures(String collectionLink, SqlQuerySpec querySpec, CosmosQueryRequestOptions options)
    parameters:
    - id: collectionLink
      type: java.lang.String
      description: the collection link.
    - id: querySpec
      type: com.azure.cosmos.models.SqlQuerySpec
      description: the SQL query specification.
    - id: options
      type: com.azure.cosmos.models.CosmosQueryRequestOptions
      description: the query request options.
    return:
      type: reactor.core.publisher.Flux<com.azure.cosmos.models.FeedResponse<com.azure.cosmos.implementation.StoredProcedure>>
      description: a <xref uid="reactor.core.publisher.Flux" data-throw-if-not-resolved="false">Flux</xref> containing one or several feed response pages of the obtained stored procedures or an error.
- uid: com.azure.cosmos.implementation.AsyncDocumentClient.queryStoredProcedures(java.lang.String,java.lang.String,com.azure.cosmos.models.CosmosQueryRequestOptions)
  id: queryStoredProcedures(java.lang.String,java.lang.String,com.azure.cosmos.models.CosmosQueryRequestOptions)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.AsyncDocumentClient
  langs:
  - java
  name: queryStoredProcedures(String collectionLink, String query, CosmosQueryRequestOptions options)
  nameWithType: AsyncDocumentClient.queryStoredProcedures(String collectionLink, String query, CosmosQueryRequestOptions options)
  fullName: com.azure.cosmos.implementation.AsyncDocumentClient.queryStoredProcedures(String collectionLink, String query, CosmosQueryRequestOptions options)
  overload: com.azure.cosmos.implementation.AsyncDocumentClient.queryStoredProcedures*
  type: Method
  package: com.azure.cosmos.implementation
  summary: >-
    Query for stored procedures in a document collection.


    After subscription the operation will be performed. The <xref uid="reactor.core.publisher.Flux" data-throw-if-not-resolved="false">Flux</xref> will contain one or several feed response pages of the obtained stored procedures. In case of failure the <xref uid="reactor.core.publisher.Flux" data-throw-if-not-resolved="false">Flux</xref> will error.
  syntax:
    content: public abstract Flux<FeedResponse<StoredProcedure>> queryStoredProcedures(String collectionLink, String query, CosmosQueryRequestOptions options)
    parameters:
    - id: collectionLink
      type: java.lang.String
      description: the collection link.
    - id: query
      type: java.lang.String
      description: the query.
    - id: options
      type: com.azure.cosmos.models.CosmosQueryRequestOptions
      description: the query request options.
    return:
      type: reactor.core.publisher.Flux<com.azure.cosmos.models.FeedResponse<com.azure.cosmos.implementation.StoredProcedure>>
      description: a <xref uid="reactor.core.publisher.Flux" data-throw-if-not-resolved="false">Flux</xref> containing one or several feed response pages of the obtained stored procedures or an error.
- uid: com.azure.cosmos.implementation.AsyncDocumentClient.queryTriggers(java.lang.String,com.azure.cosmos.models.SqlQuerySpec,com.azure.cosmos.models.CosmosQueryRequestOptions)
  id: queryTriggers(java.lang.String,com.azure.cosmos.models.SqlQuerySpec,com.azure.cosmos.models.CosmosQueryRequestOptions)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.AsyncDocumentClient
  langs:
  - java
  name: queryTriggers(String collectionLink, SqlQuerySpec querySpec, CosmosQueryRequestOptions options)
  nameWithType: AsyncDocumentClient.queryTriggers(String collectionLink, SqlQuerySpec querySpec, CosmosQueryRequestOptions options)
  fullName: com.azure.cosmos.implementation.AsyncDocumentClient.queryTriggers(String collectionLink, SqlQuerySpec querySpec, CosmosQueryRequestOptions options)
  overload: com.azure.cosmos.implementation.AsyncDocumentClient.queryTriggers*
  type: Method
  package: com.azure.cosmos.implementation
  summary: >-
    Query for triggers.


    After subscription the operation will be performed. The <xref uid="reactor.core.publisher.Flux" data-throw-if-not-resolved="false">Flux</xref> will contain one or several feed response pages of the obtained triggers. In case of failure the <xref uid="reactor.core.publisher.Flux" data-throw-if-not-resolved="false">Flux</xref> will error.
  syntax:
    content: public abstract Flux<FeedResponse<Trigger>> queryTriggers(String collectionLink, SqlQuerySpec querySpec, CosmosQueryRequestOptions options)
    parameters:
    - id: collectionLink
      type: java.lang.String
      description: the collection link.
    - id: querySpec
      type: com.azure.cosmos.models.SqlQuerySpec
      description: the SQL query specification.
    - id: options
      type: com.azure.cosmos.models.CosmosQueryRequestOptions
      description: the query request options.
    return:
      type: reactor.core.publisher.Flux<com.azure.cosmos.models.FeedResponse<com.azure.cosmos.implementation.Trigger>>
      description: a <xref uid="reactor.core.publisher.Flux" data-throw-if-not-resolved="false">Flux</xref> containing one or several feed response pages of the obtained triggers or an error.
- uid: com.azure.cosmos.implementation.AsyncDocumentClient.queryTriggers(java.lang.String,java.lang.String,com.azure.cosmos.models.CosmosQueryRequestOptions)
  id: queryTriggers(java.lang.String,java.lang.String,com.azure.cosmos.models.CosmosQueryRequestOptions)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.AsyncDocumentClient
  langs:
  - java
  name: queryTriggers(String collectionLink, String query, CosmosQueryRequestOptions options)
  nameWithType: AsyncDocumentClient.queryTriggers(String collectionLink, String query, CosmosQueryRequestOptions options)
  fullName: com.azure.cosmos.implementation.AsyncDocumentClient.queryTriggers(String collectionLink, String query, CosmosQueryRequestOptions options)
  overload: com.azure.cosmos.implementation.AsyncDocumentClient.queryTriggers*
  type: Method
  package: com.azure.cosmos.implementation
  summary: >-
    Query for triggers.


    After subscription the operation will be performed. The <xref uid="reactor.core.publisher.Flux" data-throw-if-not-resolved="false">Flux</xref> will contain one or several feed response pages of the obtained triggers. In case of failure the <xref uid="reactor.core.publisher.Flux" data-throw-if-not-resolved="false">Flux</xref> will error.
  syntax:
    content: public abstract Flux<FeedResponse<Trigger>> queryTriggers(String collectionLink, String query, CosmosQueryRequestOptions options)
    parameters:
    - id: collectionLink
      type: java.lang.String
      description: the collection link.
    - id: query
      type: java.lang.String
      description: the query.
    - id: options
      type: com.azure.cosmos.models.CosmosQueryRequestOptions
      description: the query request options.
    return:
      type: reactor.core.publisher.Flux<com.azure.cosmos.models.FeedResponse<com.azure.cosmos.implementation.Trigger>>
      description: a <xref uid="reactor.core.publisher.Flux" data-throw-if-not-resolved="false">Flux</xref> containing one or several feed response pages of the obtained triggers or an error.
- uid: com.azure.cosmos.implementation.AsyncDocumentClient.queryUserDefinedFunctions(java.lang.String,com.azure.cosmos.models.SqlQuerySpec,com.azure.cosmos.models.CosmosQueryRequestOptions)
  id: queryUserDefinedFunctions(java.lang.String,com.azure.cosmos.models.SqlQuerySpec,com.azure.cosmos.models.CosmosQueryRequestOptions)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.AsyncDocumentClient
  langs:
  - java
  name: queryUserDefinedFunctions(String collectionLink, SqlQuerySpec querySpec, CosmosQueryRequestOptions options)
  nameWithType: AsyncDocumentClient.queryUserDefinedFunctions(String collectionLink, SqlQuerySpec querySpec, CosmosQueryRequestOptions options)
  fullName: com.azure.cosmos.implementation.AsyncDocumentClient.queryUserDefinedFunctions(String collectionLink, SqlQuerySpec querySpec, CosmosQueryRequestOptions options)
  overload: com.azure.cosmos.implementation.AsyncDocumentClient.queryUserDefinedFunctions*
  type: Method
  package: com.azure.cosmos.implementation
  summary: >-
    Query for user defined functions.


    After subscription the operation will be performed. The <xref uid="reactor.core.publisher.Flux" data-throw-if-not-resolved="false">Flux</xref> will contain one or several feed response pages of the obtained user defined functions. In case of failure the <xref uid="reactor.core.publisher.Flux" data-throw-if-not-resolved="false">Flux</xref> will error.
  syntax:
    content: public abstract Flux<FeedResponse<UserDefinedFunction>> queryUserDefinedFunctions(String collectionLink, SqlQuerySpec querySpec, CosmosQueryRequestOptions options)
    parameters:
    - id: collectionLink
      type: java.lang.String
      description: the collection link.
    - id: querySpec
      type: com.azure.cosmos.models.SqlQuerySpec
      description: the SQL query specification.
    - id: options
      type: com.azure.cosmos.models.CosmosQueryRequestOptions
      description: the query request options.
    return:
      type: reactor.core.publisher.Flux<com.azure.cosmos.models.FeedResponse<com.azure.cosmos.implementation.UserDefinedFunction>>
      description: a <xref uid="reactor.core.publisher.Flux" data-throw-if-not-resolved="false">Flux</xref> containing one or several feed response pages of the obtained user defined functions or an error.
- uid: com.azure.cosmos.implementation.AsyncDocumentClient.queryUserDefinedFunctions(java.lang.String,java.lang.String,com.azure.cosmos.models.CosmosQueryRequestOptions)
  id: queryUserDefinedFunctions(java.lang.String,java.lang.String,com.azure.cosmos.models.CosmosQueryRequestOptions)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.AsyncDocumentClient
  langs:
  - java
  name: queryUserDefinedFunctions(String collectionLink, String query, CosmosQueryRequestOptions options)
  nameWithType: AsyncDocumentClient.queryUserDefinedFunctions(String collectionLink, String query, CosmosQueryRequestOptions options)
  fullName: com.azure.cosmos.implementation.AsyncDocumentClient.queryUserDefinedFunctions(String collectionLink, String query, CosmosQueryRequestOptions options)
  overload: com.azure.cosmos.implementation.AsyncDocumentClient.queryUserDefinedFunctions*
  type: Method
  package: com.azure.cosmos.implementation
  summary: >-
    Query for user defined functions.


    After subscription the operation will be performed. The <xref uid="reactor.core.publisher.Flux" data-throw-if-not-resolved="false">Flux</xref> will contain one or several feed response pages of the obtained user defined functions. In case of failure the <xref uid="reactor.core.publisher.Flux" data-throw-if-not-resolved="false">Flux</xref> will error.
  syntax:
    content: public abstract Flux<FeedResponse<UserDefinedFunction>> queryUserDefinedFunctions(String collectionLink, String query, CosmosQueryRequestOptions options)
    parameters:
    - id: collectionLink
      type: java.lang.String
      description: the collection link.
    - id: query
      type: java.lang.String
      description: the query.
    - id: options
      type: com.azure.cosmos.models.CosmosQueryRequestOptions
      description: the query request options.
    return:
      type: reactor.core.publisher.Flux<com.azure.cosmos.models.FeedResponse<com.azure.cosmos.implementation.UserDefinedFunction>>
      description: a <xref uid="reactor.core.publisher.Flux" data-throw-if-not-resolved="false">Flux</xref> containing one or several feed response pages of the obtained user defined functions or an error.
- uid: com.azure.cosmos.implementation.AsyncDocumentClient.queryUsers(java.lang.String,com.azure.cosmos.models.SqlQuerySpec,com.azure.cosmos.models.CosmosQueryRequestOptions)
  id: queryUsers(java.lang.String,com.azure.cosmos.models.SqlQuerySpec,com.azure.cosmos.models.CosmosQueryRequestOptions)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.AsyncDocumentClient
  langs:
  - java
  name: queryUsers(String databaseLink, SqlQuerySpec querySpec, CosmosQueryRequestOptions options)
  nameWithType: AsyncDocumentClient.queryUsers(String databaseLink, SqlQuerySpec querySpec, CosmosQueryRequestOptions options)
  fullName: com.azure.cosmos.implementation.AsyncDocumentClient.queryUsers(String databaseLink, SqlQuerySpec querySpec, CosmosQueryRequestOptions options)
  overload: com.azure.cosmos.implementation.AsyncDocumentClient.queryUsers*
  type: Method
  package: com.azure.cosmos.implementation
  summary: >-
    Query for users.


    After subscription the operation will be performed. The <xref uid="reactor.core.publisher.Flux" data-throw-if-not-resolved="false">Flux</xref> will contain one or several feed response pages of the obtained users. In case of failure the <xref uid="reactor.core.publisher.Flux" data-throw-if-not-resolved="false">Flux</xref> will error.
  syntax:
    content: public abstract Flux<FeedResponse<User>> queryUsers(String databaseLink, SqlQuerySpec querySpec, CosmosQueryRequestOptions options)
    parameters:
    - id: databaseLink
      type: java.lang.String
      description: the database link.
    - id: querySpec
      type: com.azure.cosmos.models.SqlQuerySpec
      description: the SQL query specification.
    - id: options
      type: com.azure.cosmos.models.CosmosQueryRequestOptions
      description: the query request options.
    return:
      type: reactor.core.publisher.Flux<com.azure.cosmos.models.FeedResponse<com.azure.cosmos.implementation.User>>
      description: a <xref uid="reactor.core.publisher.Flux" data-throw-if-not-resolved="false">Flux</xref> containing one or several feed response pages of the obtained users or an error.
- uid: com.azure.cosmos.implementation.AsyncDocumentClient.queryUsers(java.lang.String,java.lang.String,com.azure.cosmos.models.CosmosQueryRequestOptions)
  id: queryUsers(java.lang.String,java.lang.String,com.azure.cosmos.models.CosmosQueryRequestOptions)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.AsyncDocumentClient
  langs:
  - java
  name: queryUsers(String databaseLink, String query, CosmosQueryRequestOptions options)
  nameWithType: AsyncDocumentClient.queryUsers(String databaseLink, String query, CosmosQueryRequestOptions options)
  fullName: com.azure.cosmos.implementation.AsyncDocumentClient.queryUsers(String databaseLink, String query, CosmosQueryRequestOptions options)
  overload: com.azure.cosmos.implementation.AsyncDocumentClient.queryUsers*
  type: Method
  package: com.azure.cosmos.implementation
  summary: >-
    Query for users.


    After subscription the operation will be performed. The <xref uid="reactor.core.publisher.Flux" data-throw-if-not-resolved="false">Flux</xref> will contain one or several feed response pages of the obtained users. In case of failure the <xref uid="reactor.core.publisher.Flux" data-throw-if-not-resolved="false">Flux</xref> will error.
  syntax:
    content: public abstract Flux<FeedResponse<User>> queryUsers(String databaseLink, String query, CosmosQueryRequestOptions options)
    parameters:
    - id: databaseLink
      type: java.lang.String
      description: the database link.
    - id: query
      type: java.lang.String
      description: the query.
    - id: options
      type: com.azure.cosmos.models.CosmosQueryRequestOptions
      description: the query request options.
    return:
      type: reactor.core.publisher.Flux<com.azure.cosmos.models.FeedResponse<com.azure.cosmos.implementation.User>>
      description: a <xref uid="reactor.core.publisher.Flux" data-throw-if-not-resolved="false">Flux</xref> containing one or several feed response pages of the obtained users or an error.
- uid: com.azure.cosmos.implementation.AsyncDocumentClient.readCollection(java.lang.String,com.azure.cosmos.implementation.RequestOptions)
  id: readCollection(java.lang.String,com.azure.cosmos.implementation.RequestOptions)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.AsyncDocumentClient
  langs:
  - java
  name: readCollection(String collectionLink, RequestOptions options)
  nameWithType: AsyncDocumentClient.readCollection(String collectionLink, RequestOptions options)
  fullName: com.azure.cosmos.implementation.AsyncDocumentClient.readCollection(String collectionLink, RequestOptions options)
  overload: com.azure.cosmos.implementation.AsyncDocumentClient.readCollection*
  type: Method
  package: com.azure.cosmos.implementation
  summary: >-
    Reads a document collection


    After subscription the operation will be performed. The <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> upon successful completion will contain a single resource response with the read collection. In case of failure the <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> will error.
  syntax:
    content: public abstract Mono<ResourceResponse<DocumentCollection>> readCollection(String collectionLink, RequestOptions options)
    parameters:
    - id: collectionLink
      type: java.lang.String
      description: the collection link.
    - id: options
      type: com.azure.cosmos.implementation.RequestOptions
      description: the request options.
    return:
      type: reactor.core.publisher.Mono<com.azure.cosmos.implementation.ResourceResponse<com.azure.cosmos.implementation.DocumentCollection>>
      description: a <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> containing the single resource response with the read collection or an error.
- uid: com.azure.cosmos.implementation.AsyncDocumentClient.readCollections(java.lang.String,com.azure.cosmos.models.CosmosQueryRequestOptions)
  id: readCollections(java.lang.String,com.azure.cosmos.models.CosmosQueryRequestOptions)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.AsyncDocumentClient
  langs:
  - java
  name: readCollections(String databaseLink, CosmosQueryRequestOptions options)
  nameWithType: AsyncDocumentClient.readCollections(String databaseLink, CosmosQueryRequestOptions options)
  fullName: com.azure.cosmos.implementation.AsyncDocumentClient.readCollections(String databaseLink, CosmosQueryRequestOptions options)
  overload: com.azure.cosmos.implementation.AsyncDocumentClient.readCollections*
  type: Method
  package: com.azure.cosmos.implementation
  summary: >-
    Reads all document collections in a database.


    After subscription the operation will be performed. The <xref uid="reactor.core.publisher.Flux" data-throw-if-not-resolved="false">Flux</xref> will contain one or several feed response of the read collections. In case of failure the <xref uid="reactor.core.publisher.Flux" data-throw-if-not-resolved="false">Flux</xref> will error.
  syntax:
    content: public abstract Flux<FeedResponse<DocumentCollection>> readCollections(String databaseLink, CosmosQueryRequestOptions options)
    parameters:
    - id: databaseLink
      type: java.lang.String
      description: the database link.
    - id: options
      type: com.azure.cosmos.models.CosmosQueryRequestOptions
      description: the query request options.
    return:
      type: reactor.core.publisher.Flux<com.azure.cosmos.models.FeedResponse<com.azure.cosmos.implementation.DocumentCollection>>
      description: a <xref uid="reactor.core.publisher.Flux" data-throw-if-not-resolved="false">Flux</xref> containing one or several feed response pages of the read collections or an error.
- uid: com.azure.cosmos.implementation.AsyncDocumentClient.readConflict(java.lang.String,com.azure.cosmos.implementation.RequestOptions)
  id: readConflict(java.lang.String,com.azure.cosmos.implementation.RequestOptions)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.AsyncDocumentClient
  langs:
  - java
  name: readConflict(String conflictLink, RequestOptions options)
  nameWithType: AsyncDocumentClient.readConflict(String conflictLink, RequestOptions options)
  fullName: com.azure.cosmos.implementation.AsyncDocumentClient.readConflict(String conflictLink, RequestOptions options)
  overload: com.azure.cosmos.implementation.AsyncDocumentClient.readConflict*
  type: Method
  package: com.azure.cosmos.implementation
  summary: >-
    Reads a conflict.


    After subscription the operation will be performed. The <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> upon successful completion will contain a single resource response with the read conflict. In case of failure the <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> will error.
  syntax:
    content: public abstract Mono<ResourceResponse<Conflict>> readConflict(String conflictLink, RequestOptions options)
    parameters:
    - id: conflictLink
      type: java.lang.String
      description: the conflict link.
    - id: options
      type: com.azure.cosmos.implementation.RequestOptions
      description: the request options.
    return:
      type: reactor.core.publisher.Mono<com.azure.cosmos.implementation.ResourceResponse<com.azure.cosmos.implementation.Conflict>>
      description: a <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> containing the single resource response with the read conflict or an error.
- uid: com.azure.cosmos.implementation.AsyncDocumentClient.readConflicts(java.lang.String,com.azure.cosmos.models.CosmosQueryRequestOptions)
  id: readConflicts(java.lang.String,com.azure.cosmos.models.CosmosQueryRequestOptions)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.AsyncDocumentClient
  langs:
  - java
  name: readConflicts(String collectionLink, CosmosQueryRequestOptions options)
  nameWithType: AsyncDocumentClient.readConflicts(String collectionLink, CosmosQueryRequestOptions options)
  fullName: com.azure.cosmos.implementation.AsyncDocumentClient.readConflicts(String collectionLink, CosmosQueryRequestOptions options)
  overload: com.azure.cosmos.implementation.AsyncDocumentClient.readConflicts*
  type: Method
  package: com.azure.cosmos.implementation
  summary: >-
    Reads all conflicts in a document collection.


    After subscription the operation will be performed. The <xref uid="reactor.core.publisher.Flux" data-throw-if-not-resolved="false">Flux</xref> will contain one or several feed response pages of the read conflicts. In case of failure the <xref uid="reactor.core.publisher.Flux" data-throw-if-not-resolved="false">Flux</xref> will error.
  syntax:
    content: public abstract Flux<FeedResponse<Conflict>> readConflicts(String collectionLink, CosmosQueryRequestOptions options)
    parameters:
    - id: collectionLink
      type: java.lang.String
      description: the collection link.
    - id: options
      type: com.azure.cosmos.models.CosmosQueryRequestOptions
      description: the query request options.
    return:
      type: reactor.core.publisher.Flux<com.azure.cosmos.models.FeedResponse<com.azure.cosmos.implementation.Conflict>>
      description: a <xref uid="reactor.core.publisher.Flux" data-throw-if-not-resolved="false">Flux</xref> containing one or several feed response pages of the read conflicts or an error.
- uid: com.azure.cosmos.implementation.AsyncDocumentClient.readDatabase(java.lang.String,com.azure.cosmos.implementation.RequestOptions)
  id: readDatabase(java.lang.String,com.azure.cosmos.implementation.RequestOptions)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.AsyncDocumentClient
  langs:
  - java
  name: readDatabase(String databaseLink, RequestOptions options)
  nameWithType: AsyncDocumentClient.readDatabase(String databaseLink, RequestOptions options)
  fullName: com.azure.cosmos.implementation.AsyncDocumentClient.readDatabase(String databaseLink, RequestOptions options)
  overload: com.azure.cosmos.implementation.AsyncDocumentClient.readDatabase*
  type: Method
  package: com.azure.cosmos.implementation
  summary: >-
    Reads a database.


    After subscription the operation will be performed. The <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> upon successful completion will contain a single resource response with the read database. In case of failure the <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> will error.
  syntax:
    content: public abstract Mono<ResourceResponse<Database>> readDatabase(String databaseLink, RequestOptions options)
    parameters:
    - id: databaseLink
      type: java.lang.String
      description: the database link.
    - id: options
      type: com.azure.cosmos.implementation.RequestOptions
      description: the request options.
    return:
      type: reactor.core.publisher.Mono<com.azure.cosmos.implementation.ResourceResponse<com.azure.cosmos.implementation.Database>>
      description: a <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> containing the single resource response with the read database or an error.
- uid: com.azure.cosmos.implementation.AsyncDocumentClient.readDatabases(com.azure.cosmos.models.CosmosQueryRequestOptions)
  id: readDatabases(com.azure.cosmos.models.CosmosQueryRequestOptions)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.AsyncDocumentClient
  langs:
  - java
  name: readDatabases(CosmosQueryRequestOptions options)
  nameWithType: AsyncDocumentClient.readDatabases(CosmosQueryRequestOptions options)
  fullName: com.azure.cosmos.implementation.AsyncDocumentClient.readDatabases(CosmosQueryRequestOptions options)
  overload: com.azure.cosmos.implementation.AsyncDocumentClient.readDatabases*
  type: Method
  package: com.azure.cosmos.implementation
  summary: >-
    Reads all databases.


    After subscription the operation will be performed. The <xref uid="reactor.core.publisher.Flux" data-throw-if-not-resolved="false">Flux</xref> will contain one or several feed response of the read databases. In case of failure the <xref uid="reactor.core.publisher.Flux" data-throw-if-not-resolved="false">Flux</xref> will error.
  syntax:
    content: public abstract Flux<FeedResponse<Database>> readDatabases(CosmosQueryRequestOptions options)
    parameters:
    - id: options
      type: com.azure.cosmos.models.CosmosQueryRequestOptions
      description: the query request options.
    return:
      type: reactor.core.publisher.Flux<com.azure.cosmos.models.FeedResponse<com.azure.cosmos.implementation.Database>>
      description: a <xref uid="reactor.core.publisher.Flux" data-throw-if-not-resolved="false">Flux</xref> containing one or several feed response pages of read databases or an error.
- uid: com.azure.cosmos.implementation.AsyncDocumentClient.readDocument(java.lang.String,com.azure.cosmos.implementation.RequestOptions)
  id: readDocument(java.lang.String,com.azure.cosmos.implementation.RequestOptions)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.AsyncDocumentClient
  langs:
  - java
  name: readDocument(String documentLink, RequestOptions options)
  nameWithType: AsyncDocumentClient.readDocument(String documentLink, RequestOptions options)
  fullName: com.azure.cosmos.implementation.AsyncDocumentClient.readDocument(String documentLink, RequestOptions options)
  overload: com.azure.cosmos.implementation.AsyncDocumentClient.readDocument*
  type: Method
  package: com.azure.cosmos.implementation
  summary: >-
    Reads a document


    After subscription the operation will be performed. The <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> upon successful completion will contain a single resource response with the read document. In case of failure the <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> will error.
  syntax:
    content: public abstract Mono<ResourceResponse<Document>> readDocument(String documentLink, RequestOptions options)
    parameters:
    - id: documentLink
      type: java.lang.String
      description: the document link.
    - id: options
      type: com.azure.cosmos.implementation.RequestOptions
      description: the request options.
    return:
      type: reactor.core.publisher.Mono<com.azure.cosmos.implementation.ResourceResponse<com.azure.cosmos.implementation.Document>>
      description: a <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> containing the single resource response with the read document or an error.
- uid: com.azure.cosmos.implementation.AsyncDocumentClient.readDocuments(java.lang.String,com.azure.cosmos.models.CosmosQueryRequestOptions)
  id: readDocuments(java.lang.String,com.azure.cosmos.models.CosmosQueryRequestOptions)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.AsyncDocumentClient
  langs:
  - java
  name: readDocuments(String collectionLink, CosmosQueryRequestOptions options)
  nameWithType: AsyncDocumentClient.readDocuments(String collectionLink, CosmosQueryRequestOptions options)
  fullName: com.azure.cosmos.implementation.AsyncDocumentClient.readDocuments(String collectionLink, CosmosQueryRequestOptions options)
  overload: com.azure.cosmos.implementation.AsyncDocumentClient.readDocuments*
  type: Method
  package: com.azure.cosmos.implementation
  summary: >-
    Reads all documents in a document collection.


    After subscription the operation will be performed. The <xref uid="reactor.core.publisher.Flux" data-throw-if-not-resolved="false">Flux</xref> will contain one or several feed response of the read documents. In case of failure the <xref uid="reactor.core.publisher.Flux" data-throw-if-not-resolved="false">Flux</xref> will error.
  syntax:
    content: public abstract Flux<FeedResponse<Document>> readDocuments(String collectionLink, CosmosQueryRequestOptions options)
    parameters:
    - id: collectionLink
      type: java.lang.String
      description: the collection link.
    - id: options
      type: com.azure.cosmos.models.CosmosQueryRequestOptions
      description: the query request options.
    return:
      type: reactor.core.publisher.Flux<com.azure.cosmos.models.FeedResponse<com.azure.cosmos.implementation.Document>>
      description: a <xref uid="reactor.core.publisher.Flux" data-throw-if-not-resolved="false">Flux</xref> containing one or several feed response pages of the read documents or an error.
- uid: com.azure.cosmos.implementation.AsyncDocumentClient.readOffer(java.lang.String)
  id: readOffer(java.lang.String)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.AsyncDocumentClient
  langs:
  - java
  name: readOffer(String offerLink)
  nameWithType: AsyncDocumentClient.readOffer(String offerLink)
  fullName: com.azure.cosmos.implementation.AsyncDocumentClient.readOffer(String offerLink)
  overload: com.azure.cosmos.implementation.AsyncDocumentClient.readOffer*
  type: Method
  package: com.azure.cosmos.implementation
  summary: >-
    Reads an offer.


    After subscription the operation will be performed. The <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> upon successful completion will contain a single resource response with the read offer. In case of failure the <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> will error.
  syntax:
    content: public abstract Mono<ResourceResponse<Offer>> readOffer(String offerLink)
    parameters:
    - id: offerLink
      type: java.lang.String
      description: the offer link.
    return:
      type: reactor.core.publisher.Mono<com.azure.cosmos.implementation.ResourceResponse<com.azure.cosmos.implementation.Offer>>
      description: a <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> containing the single resource response with the read offer or an error.
- uid: com.azure.cosmos.implementation.AsyncDocumentClient.readOffers(com.azure.cosmos.models.CosmosQueryRequestOptions)
  id: readOffers(com.azure.cosmos.models.CosmosQueryRequestOptions)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.AsyncDocumentClient
  langs:
  - java
  name: readOffers(CosmosQueryRequestOptions options)
  nameWithType: AsyncDocumentClient.readOffers(CosmosQueryRequestOptions options)
  fullName: com.azure.cosmos.implementation.AsyncDocumentClient.readOffers(CosmosQueryRequestOptions options)
  overload: com.azure.cosmos.implementation.AsyncDocumentClient.readOffers*
  type: Method
  package: com.azure.cosmos.implementation
  summary: >-
    Reads offers.


    After subscription the operation will be performed. The <xref uid="reactor.core.publisher.Flux" data-throw-if-not-resolved="false">Flux</xref> will contain one or several feed response pages of the read offers. In case of failure the <xref uid="reactor.core.publisher.Flux" data-throw-if-not-resolved="false">Flux</xref> will error.
  syntax:
    content: public abstract Flux<FeedResponse<Offer>> readOffers(CosmosQueryRequestOptions options)
    parameters:
    - id: options
      type: com.azure.cosmos.models.CosmosQueryRequestOptions
      description: the query request options.
    return:
      type: reactor.core.publisher.Flux<com.azure.cosmos.models.FeedResponse<com.azure.cosmos.implementation.Offer>>
      description: a <xref uid="reactor.core.publisher.Flux" data-throw-if-not-resolved="false">Flux</xref> containing one or several feed response pages of the read offers or an error.
- uid: com.azure.cosmos.implementation.AsyncDocumentClient.readPartitionKeyRanges(java.lang.String,com.azure.cosmos.models.CosmosQueryRequestOptions)
  id: readPartitionKeyRanges(java.lang.String,com.azure.cosmos.models.CosmosQueryRequestOptions)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.AsyncDocumentClient
  langs:
  - java
  name: readPartitionKeyRanges(String collectionLink, CosmosQueryRequestOptions options)
  nameWithType: AsyncDocumentClient.readPartitionKeyRanges(String collectionLink, CosmosQueryRequestOptions options)
  fullName: com.azure.cosmos.implementation.AsyncDocumentClient.readPartitionKeyRanges(String collectionLink, CosmosQueryRequestOptions options)
  overload: com.azure.cosmos.implementation.AsyncDocumentClient.readPartitionKeyRanges*
  type: Method
  package: com.azure.cosmos.implementation
  summary: Reads all partition key ranges in a document collection. After subscription the operation will be performed. The <xref uid="reactor.core.publisher.Flux" data-throw-if-not-resolved="false">Flux</xref> will contain one or several feed response pages of the obtained partition key ranges. In case of failure the <xref uid="reactor.core.publisher.Flux" data-throw-if-not-resolved="false">Flux</xref> will error.
  syntax:
    content: public abstract Flux<FeedResponse<PartitionKeyRange>> readPartitionKeyRanges(String collectionLink, CosmosQueryRequestOptions options)
    parameters:
    - id: collectionLink
      type: java.lang.String
      description: the link to the parent document collection.
    - id: options
      type: com.azure.cosmos.models.CosmosQueryRequestOptions
      description: the query request options.
    return:
      type: reactor.core.publisher.Flux<com.azure.cosmos.models.FeedResponse<com.azure.cosmos.implementation.PartitionKeyRange>>
      description: a <xref uid="reactor.core.publisher.Flux" data-throw-if-not-resolved="false">Flux</xref> containing one or several feed response pages of the obtained partition key ranges or an error.
- uid: com.azure.cosmos.implementation.AsyncDocumentClient.readPermission(java.lang.String,com.azure.cosmos.implementation.RequestOptions)
  id: readPermission(java.lang.String,com.azure.cosmos.implementation.RequestOptions)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.AsyncDocumentClient
  langs:
  - java
  name: readPermission(String permissionLink, RequestOptions options)
  nameWithType: AsyncDocumentClient.readPermission(String permissionLink, RequestOptions options)
  fullName: com.azure.cosmos.implementation.AsyncDocumentClient.readPermission(String permissionLink, RequestOptions options)
  overload: com.azure.cosmos.implementation.AsyncDocumentClient.readPermission*
  type: Method
  package: com.azure.cosmos.implementation
  summary: >-
    Reads a permission.


    After subscription the operation will be performed. The <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> upon successful completion will contain a single resource response with the read permission. In case of failure the <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> will error.
  syntax:
    content: public abstract Mono<ResourceResponse<Permission>> readPermission(String permissionLink, RequestOptions options)
    parameters:
    - id: permissionLink
      type: java.lang.String
      description: the permission link.
    - id: options
      type: com.azure.cosmos.implementation.RequestOptions
      description: the request options.
    return:
      type: reactor.core.publisher.Mono<com.azure.cosmos.implementation.ResourceResponse<com.azure.cosmos.implementation.Permission>>
      description: a <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> containing the single resource response with the read permission or an error.
- uid: com.azure.cosmos.implementation.AsyncDocumentClient.readPermissions(java.lang.String,com.azure.cosmos.models.CosmosQueryRequestOptions)
  id: readPermissions(java.lang.String,com.azure.cosmos.models.CosmosQueryRequestOptions)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.AsyncDocumentClient
  langs:
  - java
  name: readPermissions(String permissionLink, CosmosQueryRequestOptions options)
  nameWithType: AsyncDocumentClient.readPermissions(String permissionLink, CosmosQueryRequestOptions options)
  fullName: com.azure.cosmos.implementation.AsyncDocumentClient.readPermissions(String permissionLink, CosmosQueryRequestOptions options)
  overload: com.azure.cosmos.implementation.AsyncDocumentClient.readPermissions*
  type: Method
  package: com.azure.cosmos.implementation
  summary: >-
    Reads all permissions.


    After subscription the operation will be performed. The <xref uid="reactor.core.publisher.Flux" data-throw-if-not-resolved="false">Flux</xref> will contain one or several feed response pages of the read permissions. In case of failure the <xref uid="reactor.core.publisher.Flux" data-throw-if-not-resolved="false">Flux</xref> will error.
  syntax:
    content: public abstract Flux<FeedResponse<Permission>> readPermissions(String permissionLink, CosmosQueryRequestOptions options)
    parameters:
    - id: permissionLink
      type: java.lang.String
      description: the permission link.
    - id: options
      type: com.azure.cosmos.models.CosmosQueryRequestOptions
      description: the query request options.
    return:
      type: reactor.core.publisher.Flux<com.azure.cosmos.models.FeedResponse<com.azure.cosmos.implementation.Permission>>
      description: a <xref uid="reactor.core.publisher.Flux" data-throw-if-not-resolved="false">Flux</xref> containing one or several feed response pages of the read permissions or an error.
- uid: com.azure.cosmos.implementation.AsyncDocumentClient.readStoredProcedure(java.lang.String,com.azure.cosmos.implementation.RequestOptions)
  id: readStoredProcedure(java.lang.String,com.azure.cosmos.implementation.RequestOptions)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.AsyncDocumentClient
  langs:
  - java
  name: readStoredProcedure(String storedProcedureLink, RequestOptions options)
  nameWithType: AsyncDocumentClient.readStoredProcedure(String storedProcedureLink, RequestOptions options)
  fullName: com.azure.cosmos.implementation.AsyncDocumentClient.readStoredProcedure(String storedProcedureLink, RequestOptions options)
  overload: com.azure.cosmos.implementation.AsyncDocumentClient.readStoredProcedure*
  type: Method
  package: com.azure.cosmos.implementation
  summary: >-
    READ a stored procedure


    After subscription the operation will be performed. The <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> upon successful completion will contain a single resource response with the read stored procedure. In case of failure the <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> will error.
  syntax:
    content: public abstract Mono<ResourceResponse<StoredProcedure>> readStoredProcedure(String storedProcedureLink, RequestOptions options)
    parameters:
    - id: storedProcedureLink
      type: java.lang.String
      description: the stored procedure link.
    - id: options
      type: com.azure.cosmos.implementation.RequestOptions
      description: the request options.
    return:
      type: reactor.core.publisher.Mono<com.azure.cosmos.implementation.ResourceResponse<com.azure.cosmos.implementation.StoredProcedure>>
      description: a <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> containing the single resource response with the read stored procedure or an error.
- uid: com.azure.cosmos.implementation.AsyncDocumentClient.readStoredProcedures(java.lang.String,com.azure.cosmos.models.CosmosQueryRequestOptions)
  id: readStoredProcedures(java.lang.String,com.azure.cosmos.models.CosmosQueryRequestOptions)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.AsyncDocumentClient
  langs:
  - java
  name: readStoredProcedures(String collectionLink, CosmosQueryRequestOptions options)
  nameWithType: AsyncDocumentClient.readStoredProcedures(String collectionLink, CosmosQueryRequestOptions options)
  fullName: com.azure.cosmos.implementation.AsyncDocumentClient.readStoredProcedures(String collectionLink, CosmosQueryRequestOptions options)
  overload: com.azure.cosmos.implementation.AsyncDocumentClient.readStoredProcedures*
  type: Method
  package: com.azure.cosmos.implementation
  summary: >-
    Reads all stored procedures in a document collection link.


    After subscription the operation will be performed. The <xref uid="reactor.core.publisher.Flux" data-throw-if-not-resolved="false">Flux</xref> will contain one or several feed response pages of the read stored procedures. In case of failure the <xref uid="reactor.core.publisher.Flux" data-throw-if-not-resolved="false">Flux</xref> will error.
  syntax:
    content: public abstract Flux<FeedResponse<StoredProcedure>> readStoredProcedures(String collectionLink, CosmosQueryRequestOptions options)
    parameters:
    - id: collectionLink
      type: java.lang.String
      description: the collection link.
    - id: options
      type: com.azure.cosmos.models.CosmosQueryRequestOptions
      description: the query request options.
    return:
      type: reactor.core.publisher.Flux<com.azure.cosmos.models.FeedResponse<com.azure.cosmos.implementation.StoredProcedure>>
      description: a <xref uid="reactor.core.publisher.Flux" data-throw-if-not-resolved="false">Flux</xref> containing one or several feed response pages of the read stored procedures or an error.
- uid: com.azure.cosmos.implementation.AsyncDocumentClient.readTrigger(java.lang.String,com.azure.cosmos.implementation.RequestOptions)
  id: readTrigger(java.lang.String,com.azure.cosmos.implementation.RequestOptions)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.AsyncDocumentClient
  langs:
  - java
  name: readTrigger(String triggerLink, RequestOptions options)
  nameWithType: AsyncDocumentClient.readTrigger(String triggerLink, RequestOptions options)
  fullName: com.azure.cosmos.implementation.AsyncDocumentClient.readTrigger(String triggerLink, RequestOptions options)
  overload: com.azure.cosmos.implementation.AsyncDocumentClient.readTrigger*
  type: Method
  package: com.azure.cosmos.implementation
  summary: >-
    Reads a trigger


    After subscription the operation will be performed. The <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> upon successful completion will contain a single resource response for the read trigger. In case of failure the <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> will error.
  syntax:
    content: public abstract Mono<ResourceResponse<Trigger>> readTrigger(String triggerLink, RequestOptions options)
    parameters:
    - id: triggerLink
      type: java.lang.String
      description: the trigger link.
    - id: options
      type: com.azure.cosmos.implementation.RequestOptions
      description: the request options.
    return:
      type: reactor.core.publisher.Mono<com.azure.cosmos.implementation.ResourceResponse<com.azure.cosmos.implementation.Trigger>>
      description: a <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> containing the single resource response for the read trigger or an error.
- uid: com.azure.cosmos.implementation.AsyncDocumentClient.readTriggers(java.lang.String,com.azure.cosmos.models.CosmosQueryRequestOptions)
  id: readTriggers(java.lang.String,com.azure.cosmos.models.CosmosQueryRequestOptions)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.AsyncDocumentClient
  langs:
  - java
  name: readTriggers(String collectionLink, CosmosQueryRequestOptions options)
  nameWithType: AsyncDocumentClient.readTriggers(String collectionLink, CosmosQueryRequestOptions options)
  fullName: com.azure.cosmos.implementation.AsyncDocumentClient.readTriggers(String collectionLink, CosmosQueryRequestOptions options)
  overload: com.azure.cosmos.implementation.AsyncDocumentClient.readTriggers*
  type: Method
  package: com.azure.cosmos.implementation
  summary: >-
    Reads all triggers in a document collection.


    After subscription the operation will be performed. The <xref uid="reactor.core.publisher.Flux" data-throw-if-not-resolved="false">Flux</xref> will contain one or several feed response pages of the read triggers. In case of failure the <xref uid="reactor.core.publisher.Flux" data-throw-if-not-resolved="false">Flux</xref> will error.
  syntax:
    content: public abstract Flux<FeedResponse<Trigger>> readTriggers(String collectionLink, CosmosQueryRequestOptions options)
    parameters:
    - id: collectionLink
      type: java.lang.String
      description: the collection link.
    - id: options
      type: com.azure.cosmos.models.CosmosQueryRequestOptions
      description: the query request options.
    return:
      type: reactor.core.publisher.Flux<com.azure.cosmos.models.FeedResponse<com.azure.cosmos.implementation.Trigger>>
      description: a <xref uid="reactor.core.publisher.Flux" data-throw-if-not-resolved="false">Flux</xref> containing one or several feed response pages of the read triggers or an error.
- uid: com.azure.cosmos.implementation.AsyncDocumentClient.readUser(java.lang.String,com.azure.cosmos.implementation.RequestOptions)
  id: readUser(java.lang.String,com.azure.cosmos.implementation.RequestOptions)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.AsyncDocumentClient
  langs:
  - java
  name: readUser(String userLink, RequestOptions options)
  nameWithType: AsyncDocumentClient.readUser(String userLink, RequestOptions options)
  fullName: com.azure.cosmos.implementation.AsyncDocumentClient.readUser(String userLink, RequestOptions options)
  overload: com.azure.cosmos.implementation.AsyncDocumentClient.readUser*
  type: Method
  package: com.azure.cosmos.implementation
  summary: >-
    Reads a user.


    After subscription the operation will be performed. The <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> upon successful completion will contain a single resource response with the read user. In case of failure the <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> will error.
  syntax:
    content: public abstract Mono<ResourceResponse<User>> readUser(String userLink, RequestOptions options)
    parameters:
    - id: userLink
      type: java.lang.String
      description: the user link.
    - id: options
      type: com.azure.cosmos.implementation.RequestOptions
      description: the request options.
    return:
      type: reactor.core.publisher.Mono<com.azure.cosmos.implementation.ResourceResponse<com.azure.cosmos.implementation.User>>
      description: a <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> containing the single resource response with the read user or an error.
- uid: com.azure.cosmos.implementation.AsyncDocumentClient.readUserDefinedFunction(java.lang.String,com.azure.cosmos.implementation.RequestOptions)
  id: readUserDefinedFunction(java.lang.String,com.azure.cosmos.implementation.RequestOptions)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.AsyncDocumentClient
  langs:
  - java
  name: readUserDefinedFunction(String udfLink, RequestOptions options)
  nameWithType: AsyncDocumentClient.readUserDefinedFunction(String udfLink, RequestOptions options)
  fullName: com.azure.cosmos.implementation.AsyncDocumentClient.readUserDefinedFunction(String udfLink, RequestOptions options)
  overload: com.azure.cosmos.implementation.AsyncDocumentClient.readUserDefinedFunction*
  type: Method
  package: com.azure.cosmos.implementation
  summary: >-
    READ a user defined function.


    After subscription the operation will be performed. The <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> upon successful completion will contain a single resource response for the read user defined function. In case of failure the <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> will error.
  syntax:
    content: public abstract Mono<ResourceResponse<UserDefinedFunction>> readUserDefinedFunction(String udfLink, RequestOptions options)
    parameters:
    - id: udfLink
      type: java.lang.String
      description: the user defined function link.
    - id: options
      type: com.azure.cosmos.implementation.RequestOptions
      description: the request options.
    return:
      type: reactor.core.publisher.Mono<com.azure.cosmos.implementation.ResourceResponse<com.azure.cosmos.implementation.UserDefinedFunction>>
      description: a <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> containing the single resource response for the read user defined function or an error.
- uid: com.azure.cosmos.implementation.AsyncDocumentClient.readUserDefinedFunctions(java.lang.String,com.azure.cosmos.models.CosmosQueryRequestOptions)
  id: readUserDefinedFunctions(java.lang.String,com.azure.cosmos.models.CosmosQueryRequestOptions)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.AsyncDocumentClient
  langs:
  - java
  name: readUserDefinedFunctions(String collectionLink, CosmosQueryRequestOptions options)
  nameWithType: AsyncDocumentClient.readUserDefinedFunctions(String collectionLink, CosmosQueryRequestOptions options)
  fullName: com.azure.cosmos.implementation.AsyncDocumentClient.readUserDefinedFunctions(String collectionLink, CosmosQueryRequestOptions options)
  overload: com.azure.cosmos.implementation.AsyncDocumentClient.readUserDefinedFunctions*
  type: Method
  package: com.azure.cosmos.implementation
  summary: >-
    Reads all user defined functions in a document collection.


    After subscription the operation will be performed. The <xref uid="reactor.core.publisher.Flux" data-throw-if-not-resolved="false">Flux</xref> will contain one or several feed response pages of the read user defined functions. In case of failure the <xref uid="reactor.core.publisher.Flux" data-throw-if-not-resolved="false">Flux</xref> will error.
  syntax:
    content: public abstract Flux<FeedResponse<UserDefinedFunction>> readUserDefinedFunctions(String collectionLink, CosmosQueryRequestOptions options)
    parameters:
    - id: collectionLink
      type: java.lang.String
      description: the collection link.
    - id: options
      type: com.azure.cosmos.models.CosmosQueryRequestOptions
      description: the query request options.
    return:
      type: reactor.core.publisher.Flux<com.azure.cosmos.models.FeedResponse<com.azure.cosmos.implementation.UserDefinedFunction>>
      description: a <xref uid="reactor.core.publisher.Flux" data-throw-if-not-resolved="false">Flux</xref> containing one or several feed response pages of the read user defined functions or an error.
- uid: com.azure.cosmos.implementation.AsyncDocumentClient.readUsers(java.lang.String,com.azure.cosmos.models.CosmosQueryRequestOptions)
  id: readUsers(java.lang.String,com.azure.cosmos.models.CosmosQueryRequestOptions)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.AsyncDocumentClient
  langs:
  - java
  name: readUsers(String databaseLink, CosmosQueryRequestOptions options)
  nameWithType: AsyncDocumentClient.readUsers(String databaseLink, CosmosQueryRequestOptions options)
  fullName: com.azure.cosmos.implementation.AsyncDocumentClient.readUsers(String databaseLink, CosmosQueryRequestOptions options)
  overload: com.azure.cosmos.implementation.AsyncDocumentClient.readUsers*
  type: Method
  package: com.azure.cosmos.implementation
  summary: >-
    Reads all users in a database.


    After subscription the operation will be performed. The <xref uid="reactor.core.publisher.Flux" data-throw-if-not-resolved="false">Flux</xref> will contain one or several feed response pages of the read users. In case of failure the <xref uid="reactor.core.publisher.Flux" data-throw-if-not-resolved="false">Flux</xref> will error.
  syntax:
    content: public abstract Flux<FeedResponse<User>> readUsers(String databaseLink, CosmosQueryRequestOptions options)
    parameters:
    - id: databaseLink
      type: java.lang.String
      description: the database link.
    - id: options
      type: com.azure.cosmos.models.CosmosQueryRequestOptions
      description: the query request options.
    return:
      type: reactor.core.publisher.Flux<com.azure.cosmos.models.FeedResponse<com.azure.cosmos.implementation.User>>
      description: a <xref uid="reactor.core.publisher.Flux" data-throw-if-not-resolved="false">Flux</xref> containing one or several feed response pages of the read users or an error.
- uid: com.azure.cosmos.implementation.AsyncDocumentClient.replaceCollection(com.azure.cosmos.implementation.DocumentCollection,com.azure.cosmos.implementation.RequestOptions)
  id: replaceCollection(com.azure.cosmos.implementation.DocumentCollection,com.azure.cosmos.implementation.RequestOptions)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.AsyncDocumentClient
  langs:
  - java
  name: replaceCollection(DocumentCollection collection, RequestOptions options)
  nameWithType: AsyncDocumentClient.replaceCollection(DocumentCollection collection, RequestOptions options)
  fullName: com.azure.cosmos.implementation.AsyncDocumentClient.replaceCollection(DocumentCollection collection, RequestOptions options)
  overload: com.azure.cosmos.implementation.AsyncDocumentClient.replaceCollection*
  type: Method
  package: com.azure.cosmos.implementation
  summary: >-
    Replaces a document collection.


    After subscription the operation will be performed. The <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> upon successful completion will contain a single resource response with the replaced document collection. In case of failure the <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> will error.
  syntax:
    content: public abstract Mono<ResourceResponse<DocumentCollection>> replaceCollection(DocumentCollection collection, RequestOptions options)
    parameters:
    - id: collection
      type: com.azure.cosmos.implementation.DocumentCollection
      description: the document collection to use.
    - id: options
      type: com.azure.cosmos.implementation.RequestOptions
      description: the request options.
    return:
      type: reactor.core.publisher.Mono<com.azure.cosmos.implementation.ResourceResponse<com.azure.cosmos.implementation.DocumentCollection>>
      description: a <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> containing the single resource response with the replaced document collection or an error.
- uid: com.azure.cosmos.implementation.AsyncDocumentClient.replaceDocument(com.azure.cosmos.implementation.Document,com.azure.cosmos.implementation.RequestOptions)
  id: replaceDocument(com.azure.cosmos.implementation.Document,com.azure.cosmos.implementation.RequestOptions)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.AsyncDocumentClient
  langs:
  - java
  name: replaceDocument(Document document, RequestOptions options)
  nameWithType: AsyncDocumentClient.replaceDocument(Document document, RequestOptions options)
  fullName: com.azure.cosmos.implementation.AsyncDocumentClient.replaceDocument(Document document, RequestOptions options)
  overload: com.azure.cosmos.implementation.AsyncDocumentClient.replaceDocument*
  type: Method
  package: com.azure.cosmos.implementation
  summary: >-
    Replaces a document with the passed in document.


    After subscription the operation will be performed. The <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> upon successful completion will contain a single resource response with the replaced document. In case of failure the <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> will error.
  syntax:
    content: public abstract Mono<ResourceResponse<Document>> replaceDocument(Document document, RequestOptions options)
    parameters:
    - id: document
      type: com.azure.cosmos.implementation.Document
      description: the document to replace (containing the document id).
    - id: options
      type: com.azure.cosmos.implementation.RequestOptions
      description: the request options.
    return:
      type: reactor.core.publisher.Mono<com.azure.cosmos.implementation.ResourceResponse<com.azure.cosmos.implementation.Document>>
      description: a <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> containing the single resource response with the replaced document or an error.
- uid: com.azure.cosmos.implementation.AsyncDocumentClient.replaceDocument(java.lang.String,java.lang.Object,com.azure.cosmos.implementation.RequestOptions)
  id: replaceDocument(java.lang.String,java.lang.Object,com.azure.cosmos.implementation.RequestOptions)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.AsyncDocumentClient
  langs:
  - java
  name: replaceDocument(String documentLink, Object document, RequestOptions options)
  nameWithType: AsyncDocumentClient.replaceDocument(String documentLink, Object document, RequestOptions options)
  fullName: com.azure.cosmos.implementation.AsyncDocumentClient.replaceDocument(String documentLink, Object document, RequestOptions options)
  overload: com.azure.cosmos.implementation.AsyncDocumentClient.replaceDocument*
  type: Method
  package: com.azure.cosmos.implementation
  summary: >-
    Replaces a document using a POJO object.


    After subscription the operation will be performed. The <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> upon successful completion will contain a single resource response with the replaced document. In case of failure the <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> will error.
  syntax:
    content: public abstract Mono<ResourceResponse<Document>> replaceDocument(String documentLink, Object document, RequestOptions options)
    parameters:
    - id: documentLink
      type: java.lang.String
      description: the document link.
    - id: document
      type: java.lang.Object
      description: the document represented as a POJO or Document object.
    - id: options
      type: com.azure.cosmos.implementation.RequestOptions
      description: the request options.
    return:
      type: reactor.core.publisher.Mono<com.azure.cosmos.implementation.ResourceResponse<com.azure.cosmos.implementation.Document>>
      description: a <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> containing the single resource response with the replaced document or an error.
- uid: com.azure.cosmos.implementation.AsyncDocumentClient.replaceOffer(com.azure.cosmos.implementation.Offer)
  id: replaceOffer(com.azure.cosmos.implementation.Offer)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.AsyncDocumentClient
  langs:
  - java
  name: replaceOffer(Offer offer)
  nameWithType: AsyncDocumentClient.replaceOffer(Offer offer)
  fullName: com.azure.cosmos.implementation.AsyncDocumentClient.replaceOffer(Offer offer)
  overload: com.azure.cosmos.implementation.AsyncDocumentClient.replaceOffer*
  type: Method
  package: com.azure.cosmos.implementation
  summary: >-
    Replaces an offer.


    After subscription the operation will be performed. The <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> upon successful completion will contain a single resource response with the replaced offer. In case of failure the <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> will error.
  syntax:
    content: public abstract Mono<ResourceResponse<Offer>> replaceOffer(Offer offer)
    parameters:
    - id: offer
      type: com.azure.cosmos.implementation.Offer
      description: the offer to use.
    return:
      type: reactor.core.publisher.Mono<com.azure.cosmos.implementation.ResourceResponse<com.azure.cosmos.implementation.Offer>>
      description: a <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> containing the single resource response with the replaced offer or an error.
- uid: com.azure.cosmos.implementation.AsyncDocumentClient.replacePermission(com.azure.cosmos.implementation.Permission,com.azure.cosmos.implementation.RequestOptions)
  id: replacePermission(com.azure.cosmos.implementation.Permission,com.azure.cosmos.implementation.RequestOptions)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.AsyncDocumentClient
  langs:
  - java
  name: replacePermission(Permission permission, RequestOptions options)
  nameWithType: AsyncDocumentClient.replacePermission(Permission permission, RequestOptions options)
  fullName: com.azure.cosmos.implementation.AsyncDocumentClient.replacePermission(Permission permission, RequestOptions options)
  overload: com.azure.cosmos.implementation.AsyncDocumentClient.replacePermission*
  type: Method
  package: com.azure.cosmos.implementation
  summary: >-
    Replaces a permission.


    After subscription the operation will be performed. The <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> upon successful completion will contain a single resource response with the replaced permission. In case of failure the <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> will error.
  syntax:
    content: public abstract Mono<ResourceResponse<Permission>> replacePermission(Permission permission, RequestOptions options)
    parameters:
    - id: permission
      type: com.azure.cosmos.implementation.Permission
      description: the permission to use.
    - id: options
      type: com.azure.cosmos.implementation.RequestOptions
      description: the request options.
    return:
      type: reactor.core.publisher.Mono<com.azure.cosmos.implementation.ResourceResponse<com.azure.cosmos.implementation.Permission>>
      description: a <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> containing the single resource response with the replaced permission or an error.
- uid: com.azure.cosmos.implementation.AsyncDocumentClient.replaceStoredProcedure(com.azure.cosmos.implementation.StoredProcedure,com.azure.cosmos.implementation.RequestOptions)
  id: replaceStoredProcedure(com.azure.cosmos.implementation.StoredProcedure,com.azure.cosmos.implementation.RequestOptions)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.AsyncDocumentClient
  langs:
  - java
  name: replaceStoredProcedure(StoredProcedure storedProcedure, RequestOptions options)
  nameWithType: AsyncDocumentClient.replaceStoredProcedure(StoredProcedure storedProcedure, RequestOptions options)
  fullName: com.azure.cosmos.implementation.AsyncDocumentClient.replaceStoredProcedure(StoredProcedure storedProcedure, RequestOptions options)
  overload: com.azure.cosmos.implementation.AsyncDocumentClient.replaceStoredProcedure*
  type: Method
  package: com.azure.cosmos.implementation
  summary: >-
    Replaces a stored procedure.


    After subscription the operation will be performed. The <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> upon successful completion will contain a single resource response with the replaced stored procedure. In case of failure the <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> will error.
  syntax:
    content: public abstract Mono<ResourceResponse<StoredProcedure>> replaceStoredProcedure(StoredProcedure storedProcedure, RequestOptions options)
    parameters:
    - id: storedProcedure
      type: com.azure.cosmos.implementation.StoredProcedure
      description: the stored procedure to use.
    - id: options
      type: com.azure.cosmos.implementation.RequestOptions
      description: the request options.
    return:
      type: reactor.core.publisher.Mono<com.azure.cosmos.implementation.ResourceResponse<com.azure.cosmos.implementation.StoredProcedure>>
      description: a <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> containing the single resource response with the replaced stored procedure or an error.
- uid: com.azure.cosmos.implementation.AsyncDocumentClient.replaceTrigger(com.azure.cosmos.implementation.Trigger,com.azure.cosmos.implementation.RequestOptions)
  id: replaceTrigger(com.azure.cosmos.implementation.Trigger,com.azure.cosmos.implementation.RequestOptions)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.AsyncDocumentClient
  langs:
  - java
  name: replaceTrigger(Trigger trigger, RequestOptions options)
  nameWithType: AsyncDocumentClient.replaceTrigger(Trigger trigger, RequestOptions options)
  fullName: com.azure.cosmos.implementation.AsyncDocumentClient.replaceTrigger(Trigger trigger, RequestOptions options)
  overload: com.azure.cosmos.implementation.AsyncDocumentClient.replaceTrigger*
  type: Method
  package: com.azure.cosmos.implementation
  summary: >-
    Replaces a trigger.


    After subscription the operation will be performed. The <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> upon successful completion will contain a single resource response with the replaced trigger. In case of failure the <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> will error.
  syntax:
    content: public abstract Mono<ResourceResponse<Trigger>> replaceTrigger(Trigger trigger, RequestOptions options)
    parameters:
    - id: trigger
      type: com.azure.cosmos.implementation.Trigger
      description: the trigger to use.
    - id: options
      type: com.azure.cosmos.implementation.RequestOptions
      description: the request options.
    return:
      type: reactor.core.publisher.Mono<com.azure.cosmos.implementation.ResourceResponse<com.azure.cosmos.implementation.Trigger>>
      description: a <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> containing the single resource response with the replaced trigger or an error.
- uid: com.azure.cosmos.implementation.AsyncDocumentClient.replaceUser(com.azure.cosmos.implementation.User,com.azure.cosmos.implementation.RequestOptions)
  id: replaceUser(com.azure.cosmos.implementation.User,com.azure.cosmos.implementation.RequestOptions)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.AsyncDocumentClient
  langs:
  - java
  name: replaceUser(User user, RequestOptions options)
  nameWithType: AsyncDocumentClient.replaceUser(User user, RequestOptions options)
  fullName: com.azure.cosmos.implementation.AsyncDocumentClient.replaceUser(User user, RequestOptions options)
  overload: com.azure.cosmos.implementation.AsyncDocumentClient.replaceUser*
  type: Method
  package: com.azure.cosmos.implementation
  summary: >-
    Replaces a user.


    After subscription the operation will be performed. The <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> upon successful completion will contain a single resource response with the replaced user. In case of failure the <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> will error.
  syntax:
    content: public abstract Mono<ResourceResponse<User>> replaceUser(User user, RequestOptions options)
    parameters:
    - id: user
      type: com.azure.cosmos.implementation.User
      description: the user to use.
    - id: options
      type: com.azure.cosmos.implementation.RequestOptions
      description: the request options.
    return:
      type: reactor.core.publisher.Mono<com.azure.cosmos.implementation.ResourceResponse<com.azure.cosmos.implementation.User>>
      description: a <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> containing the single resource response with the replaced user or an error.
- uid: com.azure.cosmos.implementation.AsyncDocumentClient.replaceUserDefinedFunction(com.azure.cosmos.implementation.UserDefinedFunction,com.azure.cosmos.implementation.RequestOptions)
  id: replaceUserDefinedFunction(com.azure.cosmos.implementation.UserDefinedFunction,com.azure.cosmos.implementation.RequestOptions)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.AsyncDocumentClient
  langs:
  - java
  name: replaceUserDefinedFunction(UserDefinedFunction udf, RequestOptions options)
  nameWithType: AsyncDocumentClient.replaceUserDefinedFunction(UserDefinedFunction udf, RequestOptions options)
  fullName: com.azure.cosmos.implementation.AsyncDocumentClient.replaceUserDefinedFunction(UserDefinedFunction udf, RequestOptions options)
  overload: com.azure.cosmos.implementation.AsyncDocumentClient.replaceUserDefinedFunction*
  type: Method
  package: com.azure.cosmos.implementation
  summary: >-
    Replaces a user defined function.


    After subscription the operation will be performed. The <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> upon successful completion will contain a single resource response with the replaced user defined function. In case of failure the <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> will error.
  syntax:
    content: public abstract Mono<ResourceResponse<UserDefinedFunction>> replaceUserDefinedFunction(UserDefinedFunction udf, RequestOptions options)
    parameters:
    - id: udf
      type: com.azure.cosmos.implementation.UserDefinedFunction
      description: the user defined function.
    - id: options
      type: com.azure.cosmos.implementation.RequestOptions
      description: the request options.
    return:
      type: reactor.core.publisher.Mono<com.azure.cosmos.implementation.ResourceResponse<com.azure.cosmos.implementation.UserDefinedFunction>>
      description: a <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> containing the single resource response with the replaced user defined function or an error.
- uid: com.azure.cosmos.implementation.AsyncDocumentClient.upsertDocument(java.lang.String,java.lang.Object,com.azure.cosmos.implementation.RequestOptions,boolean)
  id: upsertDocument(java.lang.String,java.lang.Object,com.azure.cosmos.implementation.RequestOptions,boolean)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.AsyncDocumentClient
  langs:
  - java
  name: upsertDocument(String collectionLink, Object document, RequestOptions options, boolean disableAutomaticIdGeneration)
  nameWithType: AsyncDocumentClient.upsertDocument(String collectionLink, Object document, RequestOptions options, boolean disableAutomaticIdGeneration)
  fullName: com.azure.cosmos.implementation.AsyncDocumentClient.upsertDocument(String collectionLink, Object document, RequestOptions options, boolean disableAutomaticIdGeneration)
  overload: com.azure.cosmos.implementation.AsyncDocumentClient.upsertDocument*
  type: Method
  package: com.azure.cosmos.implementation
  summary: >-
    Upserts a document.


    After subscription the operation will be performed. The <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> upon successful completion will contain a single resource response with the upserted document. In case of failure the <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> will error.
  syntax:
    content: public abstract Mono<ResourceResponse<Document>> upsertDocument(String collectionLink, Object document, RequestOptions options, boolean disableAutomaticIdGeneration)
    parameters:
    - id: collectionLink
      type: java.lang.String
      description: the link to the parent document collection.
    - id: document
      type: java.lang.Object
      description: the document represented as a POJO or Document object to upsert.
    - id: options
      type: com.azure.cosmos.implementation.RequestOptions
      description: the request options.
    - id: disableAutomaticIdGeneration
      type: boolean
      description: the flag for disabling automatic id generation.
    return:
      type: reactor.core.publisher.Mono<com.azure.cosmos.implementation.ResourceResponse<com.azure.cosmos.implementation.Document>>
      description: a <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> containing the single resource response with the upserted document or an error.
- uid: com.azure.cosmos.implementation.AsyncDocumentClient.upsertPermission(java.lang.String,com.azure.cosmos.implementation.Permission,com.azure.cosmos.implementation.RequestOptions)
  id: upsertPermission(java.lang.String,com.azure.cosmos.implementation.Permission,com.azure.cosmos.implementation.RequestOptions)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.AsyncDocumentClient
  langs:
  - java
  name: upsertPermission(String userLink, Permission permission, RequestOptions options)
  nameWithType: AsyncDocumentClient.upsertPermission(String userLink, Permission permission, RequestOptions options)
  fullName: com.azure.cosmos.implementation.AsyncDocumentClient.upsertPermission(String userLink, Permission permission, RequestOptions options)
  overload: com.azure.cosmos.implementation.AsyncDocumentClient.upsertPermission*
  type: Method
  package: com.azure.cosmos.implementation
  summary: >-
    Upserts a permission.


    After subscription the operation will be performed. The <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> upon successful completion will contain a single resource response with the upserted permission. In case of failure the <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> will error.
  syntax:
    content: public abstract Mono<ResourceResponse<Permission>> upsertPermission(String userLink, Permission permission, RequestOptions options)
    parameters:
    - id: userLink
      type: java.lang.String
      description: the user link.
    - id: permission
      type: com.azure.cosmos.implementation.Permission
      description: the permission to upsert.
    - id: options
      type: com.azure.cosmos.implementation.RequestOptions
      description: the request options.
    return:
      type: reactor.core.publisher.Mono<com.azure.cosmos.implementation.ResourceResponse<com.azure.cosmos.implementation.Permission>>
      description: a <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> containing the single resource response with the upserted permission or an error.
- uid: com.azure.cosmos.implementation.AsyncDocumentClient.upsertStoredProcedure(java.lang.String,com.azure.cosmos.implementation.StoredProcedure,com.azure.cosmos.implementation.RequestOptions)
  id: upsertStoredProcedure(java.lang.String,com.azure.cosmos.implementation.StoredProcedure,com.azure.cosmos.implementation.RequestOptions)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.AsyncDocumentClient
  langs:
  - java
  name: upsertStoredProcedure(String collectionLink, StoredProcedure storedProcedure, RequestOptions options)
  nameWithType: AsyncDocumentClient.upsertStoredProcedure(String collectionLink, StoredProcedure storedProcedure, RequestOptions options)
  fullName: com.azure.cosmos.implementation.AsyncDocumentClient.upsertStoredProcedure(String collectionLink, StoredProcedure storedProcedure, RequestOptions options)
  overload: com.azure.cosmos.implementation.AsyncDocumentClient.upsertStoredProcedure*
  type: Method
  package: com.azure.cosmos.implementation
  summary: >-
    Upserts a stored procedure.


    After subscription the operation will be performed. The <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> upon successful completion will contain a single resource response with the upserted stored procedure. In case of failure the <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> will error.
  syntax:
    content: public abstract Mono<ResourceResponse<StoredProcedure>> upsertStoredProcedure(String collectionLink, StoredProcedure storedProcedure, RequestOptions options)
    parameters:
    - id: collectionLink
      type: java.lang.String
      description: the collection link.
    - id: storedProcedure
      type: com.azure.cosmos.implementation.StoredProcedure
      description: the stored procedure to upsert.
    - id: options
      type: com.azure.cosmos.implementation.RequestOptions
      description: the request options.
    return:
      type: reactor.core.publisher.Mono<com.azure.cosmos.implementation.ResourceResponse<com.azure.cosmos.implementation.StoredProcedure>>
      description: a <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> containing the single resource response with the upserted stored procedure or an error.
- uid: com.azure.cosmos.implementation.AsyncDocumentClient.upsertTrigger(java.lang.String,com.azure.cosmos.implementation.Trigger,com.azure.cosmos.implementation.RequestOptions)
  id: upsertTrigger(java.lang.String,com.azure.cosmos.implementation.Trigger,com.azure.cosmos.implementation.RequestOptions)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.AsyncDocumentClient
  langs:
  - java
  name: upsertTrigger(String collectionLink, Trigger trigger, RequestOptions options)
  nameWithType: AsyncDocumentClient.upsertTrigger(String collectionLink, Trigger trigger, RequestOptions options)
  fullName: com.azure.cosmos.implementation.AsyncDocumentClient.upsertTrigger(String collectionLink, Trigger trigger, RequestOptions options)
  overload: com.azure.cosmos.implementation.AsyncDocumentClient.upsertTrigger*
  type: Method
  package: com.azure.cosmos.implementation
  summary: >-
    Upserts a trigger.


    After subscription the operation will be performed. The <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> upon successful completion will contain a single resource response with the upserted trigger. In case of failure the <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> will error.
  syntax:
    content: public abstract Mono<ResourceResponse<Trigger>> upsertTrigger(String collectionLink, Trigger trigger, RequestOptions options)
    parameters:
    - id: collectionLink
      type: java.lang.String
      description: the collection link.
    - id: trigger
      type: com.azure.cosmos.implementation.Trigger
      description: the trigger to upsert.
    - id: options
      type: com.azure.cosmos.implementation.RequestOptions
      description: the request options.
    return:
      type: reactor.core.publisher.Mono<com.azure.cosmos.implementation.ResourceResponse<com.azure.cosmos.implementation.Trigger>>
      description: a <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> containing the single resource response with the upserted trigger or an error.
- uid: com.azure.cosmos.implementation.AsyncDocumentClient.upsertUser(java.lang.String,com.azure.cosmos.implementation.User,com.azure.cosmos.implementation.RequestOptions)
  id: upsertUser(java.lang.String,com.azure.cosmos.implementation.User,com.azure.cosmos.implementation.RequestOptions)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.AsyncDocumentClient
  langs:
  - java
  name: upsertUser(String databaseLink, User user, RequestOptions options)
  nameWithType: AsyncDocumentClient.upsertUser(String databaseLink, User user, RequestOptions options)
  fullName: com.azure.cosmos.implementation.AsyncDocumentClient.upsertUser(String databaseLink, User user, RequestOptions options)
  overload: com.azure.cosmos.implementation.AsyncDocumentClient.upsertUser*
  type: Method
  package: com.azure.cosmos.implementation
  summary: >-
    Upserts a user.


    After subscription the operation will be performed. The <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> upon successful completion will contain a single resource response with the upserted user. In case of failure the <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> will error.
  syntax:
    content: public abstract Mono<ResourceResponse<User>> upsertUser(String databaseLink, User user, RequestOptions options)
    parameters:
    - id: databaseLink
      type: java.lang.String
      description: the database link.
    - id: user
      type: com.azure.cosmos.implementation.User
      description: the user to upsert.
    - id: options
      type: com.azure.cosmos.implementation.RequestOptions
      description: the request options.
    return:
      type: reactor.core.publisher.Mono<com.azure.cosmos.implementation.ResourceResponse<com.azure.cosmos.implementation.User>>
      description: a <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> containing the single resource response with the upserted user or an error.
- uid: com.azure.cosmos.implementation.AsyncDocumentClient.upsertUserDefinedFunction(java.lang.String,com.azure.cosmos.implementation.UserDefinedFunction,com.azure.cosmos.implementation.RequestOptions)
  id: upsertUserDefinedFunction(java.lang.String,com.azure.cosmos.implementation.UserDefinedFunction,com.azure.cosmos.implementation.RequestOptions)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.AsyncDocumentClient
  langs:
  - java
  name: upsertUserDefinedFunction(String collectionLink, UserDefinedFunction udf, RequestOptions options)
  nameWithType: AsyncDocumentClient.upsertUserDefinedFunction(String collectionLink, UserDefinedFunction udf, RequestOptions options)
  fullName: com.azure.cosmos.implementation.AsyncDocumentClient.upsertUserDefinedFunction(String collectionLink, UserDefinedFunction udf, RequestOptions options)
  overload: com.azure.cosmos.implementation.AsyncDocumentClient.upsertUserDefinedFunction*
  type: Method
  package: com.azure.cosmos.implementation
  summary: >-
    Upserts a user defined function.


    After subscription the operation will be performed. The <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> upon successful completion will contain a single resource response with the upserted user defined function. In case of failure the <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> will error.
  syntax:
    content: public abstract Mono<ResourceResponse<UserDefinedFunction>> upsertUserDefinedFunction(String collectionLink, UserDefinedFunction udf, RequestOptions options)
    parameters:
    - id: collectionLink
      type: java.lang.String
      description: the collection link.
    - id: udf
      type: com.azure.cosmos.implementation.UserDefinedFunction
      description: the user defined function to upsert.
    - id: options
      type: com.azure.cosmos.implementation.RequestOptions
      description: the request options.
    return:
      type: reactor.core.publisher.Mono<com.azure.cosmos.implementation.ResourceResponse<com.azure.cosmos.implementation.UserDefinedFunction>>
      description: a <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> containing the single resource response with the upserted user defined function or an error.
references:
- uid: java.net.URI
  spec.java:
  - uid: java.net.URI
    name: URI
    fullName: java.net.URI
- uid: com.azure.cosmos.implementation.AsyncDocumentClient.getServiceEndpoint*
  name: getServiceEndpoint
  nameWithType: AsyncDocumentClient.getServiceEndpoint
  fullName: com.azure.cosmos.implementation.AsyncDocumentClient.getServiceEndpoint
  package: com.azure.cosmos.implementation
- uid: com.azure.cosmos.implementation.AsyncDocumentClient.getWriteEndpoint*
  name: getWriteEndpoint
  nameWithType: AsyncDocumentClient.getWriteEndpoint
  fullName: com.azure.cosmos.implementation.AsyncDocumentClient.getWriteEndpoint
  package: com.azure.cosmos.implementation
- uid: com.azure.cosmos.implementation.AsyncDocumentClient.getReadEndpoint*
  name: getReadEndpoint
  nameWithType: AsyncDocumentClient.getReadEndpoint
  fullName: com.azure.cosmos.implementation.AsyncDocumentClient.getReadEndpoint
  package: com.azure.cosmos.implementation
- uid: com.azure.cosmos.ConsistencyLevel
  name: ConsistencyLevel
  nameWithType: ConsistencyLevel
  fullName: com.azure.cosmos.ConsistencyLevel
- uid: com.azure.cosmos.implementation.AsyncDocumentClient.getConsistencyLevel*
  name: getConsistencyLevel
  nameWithType: AsyncDocumentClient.getConsistencyLevel
  fullName: com.azure.cosmos.implementation.AsyncDocumentClient.getConsistencyLevel
  package: com.azure.cosmos.implementation
- uid: boolean
  spec.java:
  - uid: boolean
    name: boolean
    fullName: boolean
- uid: com.azure.cosmos.implementation.AsyncDocumentClient.isContentResponseOnWriteEnabled*
  name: isContentResponseOnWriteEnabled
  nameWithType: AsyncDocumentClient.isContentResponseOnWriteEnabled
  fullName: com.azure.cosmos.implementation.AsyncDocumentClient.isContentResponseOnWriteEnabled
  package: com.azure.cosmos.implementation
- uid: com.azure.cosmos.implementation.ConnectionPolicy
  name: ConnectionPolicy
  nameWithType: ConnectionPolicy
  fullName: com.azure.cosmos.implementation.ConnectionPolicy
- uid: com.azure.cosmos.implementation.AsyncDocumentClient.getConnectionPolicy*
  name: getConnectionPolicy
  nameWithType: AsyncDocumentClient.getConnectionPolicy
  fullName: com.azure.cosmos.implementation.AsyncDocumentClient.getConnectionPolicy
  package: com.azure.cosmos.implementation
- uid: com.azure.cosmos.implementation.Database
  name: Database
  nameWithType: Database
  fullName: com.azure.cosmos.implementation.Database
- uid: com.azure.cosmos.implementation.RequestOptions
  name: RequestOptions
  nameWithType: RequestOptions
  fullName: com.azure.cosmos.implementation.RequestOptions
- uid: reactor.core.publisher.Mono<com.azure.cosmos.implementation.ResourceResponse<com.azure.cosmos.implementation.Database>>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: com.azure.cosmos.implementation.ResourceResponse
    name: ResourceResponse
    fullName: com.azure.cosmos.implementation.ResourceResponse
  - name: <
    fullName: <
  - uid: com.azure.cosmos.implementation.Database
    name: Database
    fullName: com.azure.cosmos.implementation.Database
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.AsyncDocumentClient.createDatabase*
  name: createDatabase
  nameWithType: AsyncDocumentClient.createDatabase
  fullName: com.azure.cosmos.implementation.AsyncDocumentClient.createDatabase
  package: com.azure.cosmos.implementation
- uid: java.lang.String
  spec.java:
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
- uid: com.azure.cosmos.implementation.AsyncDocumentClient.deleteDatabase*
  name: deleteDatabase
  nameWithType: AsyncDocumentClient.deleteDatabase
  fullName: com.azure.cosmos.implementation.AsyncDocumentClient.deleteDatabase
  package: com.azure.cosmos.implementation
- uid: com.azure.cosmos.implementation.AsyncDocumentClient.readDatabase*
  name: readDatabase
  nameWithType: AsyncDocumentClient.readDatabase
  fullName: com.azure.cosmos.implementation.AsyncDocumentClient.readDatabase
  package: com.azure.cosmos.implementation
- uid: com.azure.cosmos.models.CosmosQueryRequestOptions
  name: CosmosQueryRequestOptions
  nameWithType: CosmosQueryRequestOptions
  fullName: com.azure.cosmos.models.CosmosQueryRequestOptions
- uid: reactor.core.publisher.Flux<com.azure.cosmos.models.FeedResponse<com.azure.cosmos.implementation.Database>>
  spec.java:
  - uid: reactor.core.publisher.Flux
    name: Flux
    fullName: reactor.core.publisher.Flux
  - name: <
    fullName: <
  - uid: com.azure.cosmos.models.FeedResponse
    name: FeedResponse
    fullName: com.azure.cosmos.models.FeedResponse
  - name: <
    fullName: <
  - uid: com.azure.cosmos.implementation.Database
    name: Database
    fullName: com.azure.cosmos.implementation.Database
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.AsyncDocumentClient.readDatabases*
  name: readDatabases
  nameWithType: AsyncDocumentClient.readDatabases
  fullName: com.azure.cosmos.implementation.AsyncDocumentClient.readDatabases
  package: com.azure.cosmos.implementation
- uid: com.azure.cosmos.implementation.AsyncDocumentClient.queryDatabases*
  name: queryDatabases
  nameWithType: AsyncDocumentClient.queryDatabases
  fullName: com.azure.cosmos.implementation.AsyncDocumentClient.queryDatabases
  package: com.azure.cosmos.implementation
- uid: com.azure.cosmos.models.SqlQuerySpec
  name: SqlQuerySpec
  nameWithType: SqlQuerySpec
  fullName: com.azure.cosmos.models.SqlQuerySpec
- uid: com.azure.cosmos.implementation.DocumentCollection
  name: DocumentCollection
  nameWithType: DocumentCollection
  fullName: com.azure.cosmos.implementation.DocumentCollection
- uid: reactor.core.publisher.Mono<com.azure.cosmos.implementation.ResourceResponse<com.azure.cosmos.implementation.DocumentCollection>>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: com.azure.cosmos.implementation.ResourceResponse
    name: ResourceResponse
    fullName: com.azure.cosmos.implementation.ResourceResponse
  - name: <
    fullName: <
  - uid: com.azure.cosmos.implementation.DocumentCollection
    name: DocumentCollection
    fullName: com.azure.cosmos.implementation.DocumentCollection
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.AsyncDocumentClient.createCollection*
  name: createCollection
  nameWithType: AsyncDocumentClient.createCollection
  fullName: com.azure.cosmos.implementation.AsyncDocumentClient.createCollection
  package: com.azure.cosmos.implementation
- uid: com.azure.cosmos.implementation.AsyncDocumentClient.replaceCollection*
  name: replaceCollection
  nameWithType: AsyncDocumentClient.replaceCollection
  fullName: com.azure.cosmos.implementation.AsyncDocumentClient.replaceCollection
  package: com.azure.cosmos.implementation
- uid: com.azure.cosmos.implementation.AsyncDocumentClient.deleteCollection*
  name: deleteCollection
  nameWithType: AsyncDocumentClient.deleteCollection
  fullName: com.azure.cosmos.implementation.AsyncDocumentClient.deleteCollection
  package: com.azure.cosmos.implementation
- uid: com.azure.cosmos.implementation.AsyncDocumentClient.readCollection*
  name: readCollection
  nameWithType: AsyncDocumentClient.readCollection
  fullName: com.azure.cosmos.implementation.AsyncDocumentClient.readCollection
  package: com.azure.cosmos.implementation
- uid: reactor.core.publisher.Flux<com.azure.cosmos.models.FeedResponse<com.azure.cosmos.implementation.DocumentCollection>>
  spec.java:
  - uid: reactor.core.publisher.Flux
    name: Flux
    fullName: reactor.core.publisher.Flux
  - name: <
    fullName: <
  - uid: com.azure.cosmos.models.FeedResponse
    name: FeedResponse
    fullName: com.azure.cosmos.models.FeedResponse
  - name: <
    fullName: <
  - uid: com.azure.cosmos.implementation.DocumentCollection
    name: DocumentCollection
    fullName: com.azure.cosmos.implementation.DocumentCollection
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.AsyncDocumentClient.readCollections*
  name: readCollections
  nameWithType: AsyncDocumentClient.readCollections
  fullName: com.azure.cosmos.implementation.AsyncDocumentClient.readCollections
  package: com.azure.cosmos.implementation
- uid: com.azure.cosmos.implementation.AsyncDocumentClient.queryCollections*
  name: queryCollections
  nameWithType: AsyncDocumentClient.queryCollections
  fullName: com.azure.cosmos.implementation.AsyncDocumentClient.queryCollections
  package: com.azure.cosmos.implementation
- uid: java.lang.Object
  spec.java:
  - uid: java.lang.Object
    name: Object
    fullName: java.lang.Object
- uid: reactor.core.publisher.Mono<com.azure.cosmos.implementation.ResourceResponse<com.azure.cosmos.implementation.Document>>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: com.azure.cosmos.implementation.ResourceResponse
    name: ResourceResponse
    fullName: com.azure.cosmos.implementation.ResourceResponse
  - name: <
    fullName: <
  - uid: com.azure.cosmos.implementation.Document
    name: Document
    fullName: com.azure.cosmos.implementation.Document
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.AsyncDocumentClient.createDocument*
  name: createDocument
  nameWithType: AsyncDocumentClient.createDocument
  fullName: com.azure.cosmos.implementation.AsyncDocumentClient.createDocument
  package: com.azure.cosmos.implementation
- uid: com.azure.cosmos.implementation.AsyncDocumentClient.upsertDocument*
  name: upsertDocument
  nameWithType: AsyncDocumentClient.upsertDocument
  fullName: com.azure.cosmos.implementation.AsyncDocumentClient.upsertDocument
  package: com.azure.cosmos.implementation
- uid: com.azure.cosmos.implementation.AsyncDocumentClient.replaceDocument*
  name: replaceDocument
  nameWithType: AsyncDocumentClient.replaceDocument
  fullName: com.azure.cosmos.implementation.AsyncDocumentClient.replaceDocument
  package: com.azure.cosmos.implementation
- uid: com.azure.cosmos.implementation.Document
  name: Document
  nameWithType: Document
  fullName: com.azure.cosmos.implementation.Document
- uid: com.azure.cosmos.implementation.AsyncDocumentClient.deleteDocument*
  name: deleteDocument
  nameWithType: AsyncDocumentClient.deleteDocument
  fullName: com.azure.cosmos.implementation.AsyncDocumentClient.deleteDocument
  package: com.azure.cosmos.implementation
- uid: com.azure.cosmos.implementation.AsyncDocumentClient.readDocument*
  name: readDocument
  nameWithType: AsyncDocumentClient.readDocument
  fullName: com.azure.cosmos.implementation.AsyncDocumentClient.readDocument
  package: com.azure.cosmos.implementation
- uid: reactor.core.publisher.Flux<com.azure.cosmos.models.FeedResponse<com.azure.cosmos.implementation.Document>>
  spec.java:
  - uid: reactor.core.publisher.Flux
    name: Flux
    fullName: reactor.core.publisher.Flux
  - name: <
    fullName: <
  - uid: com.azure.cosmos.models.FeedResponse
    name: FeedResponse
    fullName: com.azure.cosmos.models.FeedResponse
  - name: <
    fullName: <
  - uid: com.azure.cosmos.implementation.Document
    name: Document
    fullName: com.azure.cosmos.implementation.Document
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.AsyncDocumentClient.readDocuments*
  name: readDocuments
  nameWithType: AsyncDocumentClient.readDocuments
  fullName: com.azure.cosmos.implementation.AsyncDocumentClient.readDocuments
  package: com.azure.cosmos.implementation
- uid: com.azure.cosmos.implementation.AsyncDocumentClient.queryDocuments*
  name: queryDocuments
  nameWithType: AsyncDocumentClient.queryDocuments
  fullName: com.azure.cosmos.implementation.AsyncDocumentClient.queryDocuments
  package: com.azure.cosmos.implementation
- uid: com.azure.cosmos.implementation.ChangeFeedOptions
  name: ChangeFeedOptions
  nameWithType: ChangeFeedOptions
  fullName: com.azure.cosmos.implementation.ChangeFeedOptions
- uid: com.azure.cosmos.implementation.AsyncDocumentClient.queryDocumentChangeFeed*
  name: queryDocumentChangeFeed
  nameWithType: AsyncDocumentClient.queryDocumentChangeFeed
  fullName: com.azure.cosmos.implementation.AsyncDocumentClient.queryDocumentChangeFeed
  package: com.azure.cosmos.implementation
- uid: reactor.core.publisher.Flux<com.azure.cosmos.models.FeedResponse<com.azure.cosmos.implementation.PartitionKeyRange>>
  spec.java:
  - uid: reactor.core.publisher.Flux
    name: Flux
    fullName: reactor.core.publisher.Flux
  - name: <
    fullName: <
  - uid: com.azure.cosmos.models.FeedResponse
    name: FeedResponse
    fullName: com.azure.cosmos.models.FeedResponse
  - name: <
    fullName: <
  - uid: com.azure.cosmos.implementation.PartitionKeyRange
    name: PartitionKeyRange
    fullName: com.azure.cosmos.implementation.PartitionKeyRange
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.AsyncDocumentClient.readPartitionKeyRanges*
  name: readPartitionKeyRanges
  nameWithType: AsyncDocumentClient.readPartitionKeyRanges
  fullName: com.azure.cosmos.implementation.AsyncDocumentClient.readPartitionKeyRanges
  package: com.azure.cosmos.implementation
- uid: com.azure.cosmos.implementation.StoredProcedure
  name: StoredProcedure
  nameWithType: StoredProcedure
  fullName: com.azure.cosmos.implementation.StoredProcedure
- uid: reactor.core.publisher.Mono<com.azure.cosmos.implementation.ResourceResponse<com.azure.cosmos.implementation.StoredProcedure>>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: com.azure.cosmos.implementation.ResourceResponse
    name: ResourceResponse
    fullName: com.azure.cosmos.implementation.ResourceResponse
  - name: <
    fullName: <
  - uid: com.azure.cosmos.implementation.StoredProcedure
    name: StoredProcedure
    fullName: com.azure.cosmos.implementation.StoredProcedure
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.AsyncDocumentClient.createStoredProcedure*
  name: createStoredProcedure
  nameWithType: AsyncDocumentClient.createStoredProcedure
  fullName: com.azure.cosmos.implementation.AsyncDocumentClient.createStoredProcedure
  package: com.azure.cosmos.implementation
- uid: com.azure.cosmos.implementation.AsyncDocumentClient.upsertStoredProcedure*
  name: upsertStoredProcedure
  nameWithType: AsyncDocumentClient.upsertStoredProcedure
  fullName: com.azure.cosmos.implementation.AsyncDocumentClient.upsertStoredProcedure
  package: com.azure.cosmos.implementation
- uid: com.azure.cosmos.implementation.AsyncDocumentClient.replaceStoredProcedure*
  name: replaceStoredProcedure
  nameWithType: AsyncDocumentClient.replaceStoredProcedure
  fullName: com.azure.cosmos.implementation.AsyncDocumentClient.replaceStoredProcedure
  package: com.azure.cosmos.implementation
- uid: com.azure.cosmos.implementation.AsyncDocumentClient.deleteStoredProcedure*
  name: deleteStoredProcedure
  nameWithType: AsyncDocumentClient.deleteStoredProcedure
  fullName: com.azure.cosmos.implementation.AsyncDocumentClient.deleteStoredProcedure
  package: com.azure.cosmos.implementation
- uid: com.azure.cosmos.implementation.AsyncDocumentClient.readStoredProcedure*
  name: readStoredProcedure
  nameWithType: AsyncDocumentClient.readStoredProcedure
  fullName: com.azure.cosmos.implementation.AsyncDocumentClient.readStoredProcedure
  package: com.azure.cosmos.implementation
- uid: reactor.core.publisher.Flux<com.azure.cosmos.models.FeedResponse<com.azure.cosmos.implementation.StoredProcedure>>
  spec.java:
  - uid: reactor.core.publisher.Flux
    name: Flux
    fullName: reactor.core.publisher.Flux
  - name: <
    fullName: <
  - uid: com.azure.cosmos.models.FeedResponse
    name: FeedResponse
    fullName: com.azure.cosmos.models.FeedResponse
  - name: <
    fullName: <
  - uid: com.azure.cosmos.implementation.StoredProcedure
    name: StoredProcedure
    fullName: com.azure.cosmos.implementation.StoredProcedure
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.AsyncDocumentClient.readStoredProcedures*
  name: readStoredProcedures
  nameWithType: AsyncDocumentClient.readStoredProcedures
  fullName: com.azure.cosmos.implementation.AsyncDocumentClient.readStoredProcedures
  package: com.azure.cosmos.implementation
- uid: com.azure.cosmos.implementation.AsyncDocumentClient.queryStoredProcedures*
  name: queryStoredProcedures
  nameWithType: AsyncDocumentClient.queryStoredProcedures
  fullName: com.azure.cosmos.implementation.AsyncDocumentClient.queryStoredProcedures
  package: com.azure.cosmos.implementation
- uid: java.util.List<java.lang.Object>
  spec.java:
  - uid: java.util.List
    name: List
    fullName: java.util.List
  - name: <
    fullName: <
  - uid: java.lang.Object
    name: Object
    fullName: java.lang.Object
  - name: '>'
    fullName: '>'
- uid: reactor.core.publisher.Mono<com.azure.cosmos.implementation.StoredProcedureResponse>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: com.azure.cosmos.implementation.StoredProcedureResponse
    name: StoredProcedureResponse
    fullName: com.azure.cosmos.implementation.StoredProcedureResponse
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.AsyncDocumentClient.executeStoredProcedure*
  name: executeStoredProcedure
  nameWithType: AsyncDocumentClient.executeStoredProcedure
  fullName: com.azure.cosmos.implementation.AsyncDocumentClient.executeStoredProcedure
  package: com.azure.cosmos.implementation
- uid: com.azure.cosmos.implementation.Trigger
  name: Trigger
  nameWithType: Trigger
  fullName: com.azure.cosmos.implementation.Trigger
- uid: reactor.core.publisher.Mono<com.azure.cosmos.implementation.ResourceResponse<com.azure.cosmos.implementation.Trigger>>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: com.azure.cosmos.implementation.ResourceResponse
    name: ResourceResponse
    fullName: com.azure.cosmos.implementation.ResourceResponse
  - name: <
    fullName: <
  - uid: com.azure.cosmos.implementation.Trigger
    name: Trigger
    fullName: com.azure.cosmos.implementation.Trigger
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.AsyncDocumentClient.createTrigger*
  name: createTrigger
  nameWithType: AsyncDocumentClient.createTrigger
  fullName: com.azure.cosmos.implementation.AsyncDocumentClient.createTrigger
  package: com.azure.cosmos.implementation
- uid: com.azure.cosmos.implementation.AsyncDocumentClient.upsertTrigger*
  name: upsertTrigger
  nameWithType: AsyncDocumentClient.upsertTrigger
  fullName: com.azure.cosmos.implementation.AsyncDocumentClient.upsertTrigger
  package: com.azure.cosmos.implementation
- uid: com.azure.cosmos.implementation.AsyncDocumentClient.replaceTrigger*
  name: replaceTrigger
  nameWithType: AsyncDocumentClient.replaceTrigger
  fullName: com.azure.cosmos.implementation.AsyncDocumentClient.replaceTrigger
  package: com.azure.cosmos.implementation
- uid: com.azure.cosmos.implementation.AsyncDocumentClient.deleteTrigger*
  name: deleteTrigger
  nameWithType: AsyncDocumentClient.deleteTrigger
  fullName: com.azure.cosmos.implementation.AsyncDocumentClient.deleteTrigger
  package: com.azure.cosmos.implementation
- uid: com.azure.cosmos.implementation.AsyncDocumentClient.readTrigger*
  name: readTrigger
  nameWithType: AsyncDocumentClient.readTrigger
  fullName: com.azure.cosmos.implementation.AsyncDocumentClient.readTrigger
  package: com.azure.cosmos.implementation
- uid: reactor.core.publisher.Flux<com.azure.cosmos.models.FeedResponse<com.azure.cosmos.implementation.Trigger>>
  spec.java:
  - uid: reactor.core.publisher.Flux
    name: Flux
    fullName: reactor.core.publisher.Flux
  - name: <
    fullName: <
  - uid: com.azure.cosmos.models.FeedResponse
    name: FeedResponse
    fullName: com.azure.cosmos.models.FeedResponse
  - name: <
    fullName: <
  - uid: com.azure.cosmos.implementation.Trigger
    name: Trigger
    fullName: com.azure.cosmos.implementation.Trigger
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.AsyncDocumentClient.readTriggers*
  name: readTriggers
  nameWithType: AsyncDocumentClient.readTriggers
  fullName: com.azure.cosmos.implementation.AsyncDocumentClient.readTriggers
  package: com.azure.cosmos.implementation
- uid: com.azure.cosmos.implementation.AsyncDocumentClient.queryTriggers*
  name: queryTriggers
  nameWithType: AsyncDocumentClient.queryTriggers
  fullName: com.azure.cosmos.implementation.AsyncDocumentClient.queryTriggers
  package: com.azure.cosmos.implementation
- uid: com.azure.cosmos.implementation.UserDefinedFunction
  name: UserDefinedFunction
  nameWithType: UserDefinedFunction
  fullName: com.azure.cosmos.implementation.UserDefinedFunction
- uid: reactor.core.publisher.Mono<com.azure.cosmos.implementation.ResourceResponse<com.azure.cosmos.implementation.UserDefinedFunction>>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: com.azure.cosmos.implementation.ResourceResponse
    name: ResourceResponse
    fullName: com.azure.cosmos.implementation.ResourceResponse
  - name: <
    fullName: <
  - uid: com.azure.cosmos.implementation.UserDefinedFunction
    name: UserDefinedFunction
    fullName: com.azure.cosmos.implementation.UserDefinedFunction
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.AsyncDocumentClient.createUserDefinedFunction*
  name: createUserDefinedFunction
  nameWithType: AsyncDocumentClient.createUserDefinedFunction
  fullName: com.azure.cosmos.implementation.AsyncDocumentClient.createUserDefinedFunction
  package: com.azure.cosmos.implementation
- uid: com.azure.cosmos.implementation.AsyncDocumentClient.upsertUserDefinedFunction*
  name: upsertUserDefinedFunction
  nameWithType: AsyncDocumentClient.upsertUserDefinedFunction
  fullName: com.azure.cosmos.implementation.AsyncDocumentClient.upsertUserDefinedFunction
  package: com.azure.cosmos.implementation
- uid: com.azure.cosmos.implementation.AsyncDocumentClient.replaceUserDefinedFunction*
  name: replaceUserDefinedFunction
  nameWithType: AsyncDocumentClient.replaceUserDefinedFunction
  fullName: com.azure.cosmos.implementation.AsyncDocumentClient.replaceUserDefinedFunction
  package: com.azure.cosmos.implementation
- uid: com.azure.cosmos.implementation.AsyncDocumentClient.deleteUserDefinedFunction*
  name: deleteUserDefinedFunction
  nameWithType: AsyncDocumentClient.deleteUserDefinedFunction
  fullName: com.azure.cosmos.implementation.AsyncDocumentClient.deleteUserDefinedFunction
  package: com.azure.cosmos.implementation
- uid: com.azure.cosmos.implementation.AsyncDocumentClient.readUserDefinedFunction*
  name: readUserDefinedFunction
  nameWithType: AsyncDocumentClient.readUserDefinedFunction
  fullName: com.azure.cosmos.implementation.AsyncDocumentClient.readUserDefinedFunction
  package: com.azure.cosmos.implementation
- uid: reactor.core.publisher.Flux<com.azure.cosmos.models.FeedResponse<com.azure.cosmos.implementation.UserDefinedFunction>>
  spec.java:
  - uid: reactor.core.publisher.Flux
    name: Flux
    fullName: reactor.core.publisher.Flux
  - name: <
    fullName: <
  - uid: com.azure.cosmos.models.FeedResponse
    name: FeedResponse
    fullName: com.azure.cosmos.models.FeedResponse
  - name: <
    fullName: <
  - uid: com.azure.cosmos.implementation.UserDefinedFunction
    name: UserDefinedFunction
    fullName: com.azure.cosmos.implementation.UserDefinedFunction
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.AsyncDocumentClient.readUserDefinedFunctions*
  name: readUserDefinedFunctions
  nameWithType: AsyncDocumentClient.readUserDefinedFunctions
  fullName: com.azure.cosmos.implementation.AsyncDocumentClient.readUserDefinedFunctions
  package: com.azure.cosmos.implementation
- uid: com.azure.cosmos.implementation.AsyncDocumentClient.queryUserDefinedFunctions*
  name: queryUserDefinedFunctions
  nameWithType: AsyncDocumentClient.queryUserDefinedFunctions
  fullName: com.azure.cosmos.implementation.AsyncDocumentClient.queryUserDefinedFunctions
  package: com.azure.cosmos.implementation
- uid: reactor.core.publisher.Mono<com.azure.cosmos.implementation.ResourceResponse<com.azure.cosmos.implementation.Conflict>>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: com.azure.cosmos.implementation.ResourceResponse
    name: ResourceResponse
    fullName: com.azure.cosmos.implementation.ResourceResponse
  - name: <
    fullName: <
  - uid: com.azure.cosmos.implementation.Conflict
    name: Conflict
    fullName: com.azure.cosmos.implementation.Conflict
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.AsyncDocumentClient.readConflict*
  name: readConflict
  nameWithType: AsyncDocumentClient.readConflict
  fullName: com.azure.cosmos.implementation.AsyncDocumentClient.readConflict
  package: com.azure.cosmos.implementation
- uid: reactor.core.publisher.Flux<com.azure.cosmos.models.FeedResponse<com.azure.cosmos.implementation.Conflict>>
  spec.java:
  - uid: reactor.core.publisher.Flux
    name: Flux
    fullName: reactor.core.publisher.Flux
  - name: <
    fullName: <
  - uid: com.azure.cosmos.models.FeedResponse
    name: FeedResponse
    fullName: com.azure.cosmos.models.FeedResponse
  - name: <
    fullName: <
  - uid: com.azure.cosmos.implementation.Conflict
    name: Conflict
    fullName: com.azure.cosmos.implementation.Conflict
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.AsyncDocumentClient.readConflicts*
  name: readConflicts
  nameWithType: AsyncDocumentClient.readConflicts
  fullName: com.azure.cosmos.implementation.AsyncDocumentClient.readConflicts
  package: com.azure.cosmos.implementation
- uid: com.azure.cosmos.implementation.AsyncDocumentClient.queryConflicts*
  name: queryConflicts
  nameWithType: AsyncDocumentClient.queryConflicts
  fullName: com.azure.cosmos.implementation.AsyncDocumentClient.queryConflicts
  package: com.azure.cosmos.implementation
- uid: com.azure.cosmos.implementation.AsyncDocumentClient.deleteConflict*
  name: deleteConflict
  nameWithType: AsyncDocumentClient.deleteConflict
  fullName: com.azure.cosmos.implementation.AsyncDocumentClient.deleteConflict
  package: com.azure.cosmos.implementation
- uid: com.azure.cosmos.implementation.User
  name: User
  nameWithType: User
  fullName: com.azure.cosmos.implementation.User
- uid: reactor.core.publisher.Mono<com.azure.cosmos.implementation.ResourceResponse<com.azure.cosmos.implementation.User>>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: com.azure.cosmos.implementation.ResourceResponse
    name: ResourceResponse
    fullName: com.azure.cosmos.implementation.ResourceResponse
  - name: <
    fullName: <
  - uid: com.azure.cosmos.implementation.User
    name: User
    fullName: com.azure.cosmos.implementation.User
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.AsyncDocumentClient.createUser*
  name: createUser
  nameWithType: AsyncDocumentClient.createUser
  fullName: com.azure.cosmos.implementation.AsyncDocumentClient.createUser
  package: com.azure.cosmos.implementation
- uid: com.azure.cosmos.implementation.AsyncDocumentClient.upsertUser*
  name: upsertUser
  nameWithType: AsyncDocumentClient.upsertUser
  fullName: com.azure.cosmos.implementation.AsyncDocumentClient.upsertUser
  package: com.azure.cosmos.implementation
- uid: com.azure.cosmos.implementation.AsyncDocumentClient.replaceUser*
  name: replaceUser
  nameWithType: AsyncDocumentClient.replaceUser
  fullName: com.azure.cosmos.implementation.AsyncDocumentClient.replaceUser
  package: com.azure.cosmos.implementation
- uid: com.azure.cosmos.implementation.AsyncDocumentClient.deleteUser*
  name: deleteUser
  nameWithType: AsyncDocumentClient.deleteUser
  fullName: com.azure.cosmos.implementation.AsyncDocumentClient.deleteUser
  package: com.azure.cosmos.implementation
- uid: com.azure.cosmos.implementation.AsyncDocumentClient.readUser*
  name: readUser
  nameWithType: AsyncDocumentClient.readUser
  fullName: com.azure.cosmos.implementation.AsyncDocumentClient.readUser
  package: com.azure.cosmos.implementation
- uid: reactor.core.publisher.Flux<com.azure.cosmos.models.FeedResponse<com.azure.cosmos.implementation.User>>
  spec.java:
  - uid: reactor.core.publisher.Flux
    name: Flux
    fullName: reactor.core.publisher.Flux
  - name: <
    fullName: <
  - uid: com.azure.cosmos.models.FeedResponse
    name: FeedResponse
    fullName: com.azure.cosmos.models.FeedResponse
  - name: <
    fullName: <
  - uid: com.azure.cosmos.implementation.User
    name: User
    fullName: com.azure.cosmos.implementation.User
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.AsyncDocumentClient.readUsers*
  name: readUsers
  nameWithType: AsyncDocumentClient.readUsers
  fullName: com.azure.cosmos.implementation.AsyncDocumentClient.readUsers
  package: com.azure.cosmos.implementation
- uid: com.azure.cosmos.implementation.AsyncDocumentClient.queryUsers*
  name: queryUsers
  nameWithType: AsyncDocumentClient.queryUsers
  fullName: com.azure.cosmos.implementation.AsyncDocumentClient.queryUsers
  package: com.azure.cosmos.implementation
- uid: com.azure.cosmos.implementation.Permission
  name: Permission
  nameWithType: Permission
  fullName: com.azure.cosmos.implementation.Permission
- uid: reactor.core.publisher.Mono<com.azure.cosmos.implementation.ResourceResponse<com.azure.cosmos.implementation.Permission>>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: com.azure.cosmos.implementation.ResourceResponse
    name: ResourceResponse
    fullName: com.azure.cosmos.implementation.ResourceResponse
  - name: <
    fullName: <
  - uid: com.azure.cosmos.implementation.Permission
    name: Permission
    fullName: com.azure.cosmos.implementation.Permission
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.AsyncDocumentClient.createPermission*
  name: createPermission
  nameWithType: AsyncDocumentClient.createPermission
  fullName: com.azure.cosmos.implementation.AsyncDocumentClient.createPermission
  package: com.azure.cosmos.implementation
- uid: com.azure.cosmos.implementation.AsyncDocumentClient.upsertPermission*
  name: upsertPermission
  nameWithType: AsyncDocumentClient.upsertPermission
  fullName: com.azure.cosmos.implementation.AsyncDocumentClient.upsertPermission
  package: com.azure.cosmos.implementation
- uid: com.azure.cosmos.implementation.AsyncDocumentClient.replacePermission*
  name: replacePermission
  nameWithType: AsyncDocumentClient.replacePermission
  fullName: com.azure.cosmos.implementation.AsyncDocumentClient.replacePermission
  package: com.azure.cosmos.implementation
- uid: com.azure.cosmos.implementation.AsyncDocumentClient.deletePermission*
  name: deletePermission
  nameWithType: AsyncDocumentClient.deletePermission
  fullName: com.azure.cosmos.implementation.AsyncDocumentClient.deletePermission
  package: com.azure.cosmos.implementation
- uid: com.azure.cosmos.implementation.AsyncDocumentClient.readPermission*
  name: readPermission
  nameWithType: AsyncDocumentClient.readPermission
  fullName: com.azure.cosmos.implementation.AsyncDocumentClient.readPermission
  package: com.azure.cosmos.implementation
- uid: reactor.core.publisher.Flux<com.azure.cosmos.models.FeedResponse<com.azure.cosmos.implementation.Permission>>
  spec.java:
  - uid: reactor.core.publisher.Flux
    name: Flux
    fullName: reactor.core.publisher.Flux
  - name: <
    fullName: <
  - uid: com.azure.cosmos.models.FeedResponse
    name: FeedResponse
    fullName: com.azure.cosmos.models.FeedResponse
  - name: <
    fullName: <
  - uid: com.azure.cosmos.implementation.Permission
    name: Permission
    fullName: com.azure.cosmos.implementation.Permission
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.AsyncDocumentClient.readPermissions*
  name: readPermissions
  nameWithType: AsyncDocumentClient.readPermissions
  fullName: com.azure.cosmos.implementation.AsyncDocumentClient.readPermissions
  package: com.azure.cosmos.implementation
- uid: com.azure.cosmos.implementation.AsyncDocumentClient.queryPermissions*
  name: queryPermissions
  nameWithType: AsyncDocumentClient.queryPermissions
  fullName: com.azure.cosmos.implementation.AsyncDocumentClient.queryPermissions
  package: com.azure.cosmos.implementation
- uid: com.azure.cosmos.implementation.Offer
  name: Offer
  nameWithType: Offer
  fullName: com.azure.cosmos.implementation.Offer
- uid: reactor.core.publisher.Mono<com.azure.cosmos.implementation.ResourceResponse<com.azure.cosmos.implementation.Offer>>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: com.azure.cosmos.implementation.ResourceResponse
    name: ResourceResponse
    fullName: com.azure.cosmos.implementation.ResourceResponse
  - name: <
    fullName: <
  - uid: com.azure.cosmos.implementation.Offer
    name: Offer
    fullName: com.azure.cosmos.implementation.Offer
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.AsyncDocumentClient.replaceOffer*
  name: replaceOffer
  nameWithType: AsyncDocumentClient.replaceOffer
  fullName: com.azure.cosmos.implementation.AsyncDocumentClient.replaceOffer
  package: com.azure.cosmos.implementation
- uid: com.azure.cosmos.implementation.AsyncDocumentClient.readOffer*
  name: readOffer
  nameWithType: AsyncDocumentClient.readOffer
  fullName: com.azure.cosmos.implementation.AsyncDocumentClient.readOffer
  package: com.azure.cosmos.implementation
- uid: reactor.core.publisher.Flux<com.azure.cosmos.models.FeedResponse<com.azure.cosmos.implementation.Offer>>
  spec.java:
  - uid: reactor.core.publisher.Flux
    name: Flux
    fullName: reactor.core.publisher.Flux
  - name: <
    fullName: <
  - uid: com.azure.cosmos.models.FeedResponse
    name: FeedResponse
    fullName: com.azure.cosmos.models.FeedResponse
  - name: <
    fullName: <
  - uid: com.azure.cosmos.implementation.Offer
    name: Offer
    fullName: com.azure.cosmos.implementation.Offer
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.AsyncDocumentClient.readOffers*
  name: readOffers
  nameWithType: AsyncDocumentClient.readOffers
  fullName: com.azure.cosmos.implementation.AsyncDocumentClient.readOffers
  package: com.azure.cosmos.implementation
- uid: com.azure.cosmos.implementation.AsyncDocumentClient.queryOffers*
  name: queryOffers
  nameWithType: AsyncDocumentClient.queryOffers
  fullName: com.azure.cosmos.implementation.AsyncDocumentClient.queryOffers
  package: com.azure.cosmos.implementation
- uid: reactor.core.publisher.Mono<com.azure.cosmos.implementation.DatabaseAccount>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: com.azure.cosmos.implementation.DatabaseAccount
    name: DatabaseAccount
    fullName: com.azure.cosmos.implementation.DatabaseAccount
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.AsyncDocumentClient.getDatabaseAccount*
  name: getDatabaseAccount
  nameWithType: AsyncDocumentClient.getDatabaseAccount
  fullName: com.azure.cosmos.implementation.AsyncDocumentClient.getDatabaseAccount
  package: com.azure.cosmos.implementation
- uid: java.util.List<com.azure.cosmos.implementation.apachecommons.lang.tuple.Pair<java.lang.String,com.azure.cosmos.models.PartitionKey>>
  spec.java:
  - uid: java.util.List
    name: List
    fullName: java.util.List
  - name: <
    fullName: <
  - uid: com.azure.cosmos.implementation.apachecommons.lang.tuple.Pair
    name: Pair
    fullName: com.azure.cosmos.implementation.apachecommons.lang.tuple.Pair
  - name: <
    fullName: <
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
  - name: ','
    fullName: ','
  - uid: com.azure.cosmos.models.PartitionKey
    name: PartitionKey
    fullName: com.azure.cosmos.models.PartitionKey
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
- uid: java.lang.Class<T>
  spec.java:
  - uid: java.lang.Class
    name: Class
    fullName: java.lang.Class
  - name: <
    fullName: <
  - uid: T
    name: T
    fullName: T
  - name: '>'
    fullName: '>'
- uid: reactor.core.publisher.Mono<com.azure.cosmos.models.FeedResponse<T>>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: com.azure.cosmos.models.FeedResponse
    name: FeedResponse
    fullName: com.azure.cosmos.models.FeedResponse
  - name: <
    fullName: <
  - uid: T
    name: T
    fullName: T
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.AsyncDocumentClient.readMany*
  name: <T>readMany
  nameWithType: AsyncDocumentClient.<T>readMany
  fullName: com.azure.cosmos.implementation.AsyncDocumentClient.<T>readMany
  package: com.azure.cosmos.implementation
- uid: com.azure.cosmos.implementation.AsyncDocumentClient.close*
  name: close
  nameWithType: AsyncDocumentClient.close
  fullName: com.azure.cosmos.implementation.AsyncDocumentClient.close
  package: com.azure.cosmos.implementation
- uid: com.azure.cosmos.implementation.ItemDeserializer
  name: ItemDeserializer
  nameWithType: ItemDeserializer
  fullName: com.azure.cosmos.implementation.ItemDeserializer
- uid: com.azure.cosmos.implementation.AsyncDocumentClient.getItemDeserializer*
  name: getItemDeserializer
  nameWithType: AsyncDocumentClient.getItemDeserializer
  fullName: com.azure.cosmos.implementation.AsyncDocumentClient.getItemDeserializer
  package: com.azure.cosmos.implementation
- uid: com.azure.cosmos.implementation.AsyncDocumentClient.Builder
  name: AsyncDocumentClient.Builder
  nameWithType: AsyncDocumentClient.Builder
  fullName: com.azure.cosmos.implementation.AsyncDocumentClient.Builder
- uid: reactor.core.publisher.Mono
  name: Mono
  nameWithType: Mono
  fullName: reactor.core.publisher.Mono
- uid: com.azure.cosmos.implementation.ResourceResponse
  name: ResourceResponse
  nameWithType: ResourceResponse
  fullName: com.azure.cosmos.implementation.ResourceResponse
- uid: reactor.core.publisher.Flux
  name: Flux
  nameWithType: Flux
  fullName: reactor.core.publisher.Flux
- uid: com.azure.cosmos.models.FeedResponse
  name: FeedResponse
  nameWithType: FeedResponse
  fullName: com.azure.cosmos.models.FeedResponse
- uid: com.azure.cosmos.implementation.PartitionKeyRange
  name: PartitionKeyRange
  nameWithType: PartitionKeyRange
  fullName: com.azure.cosmos.implementation.PartitionKeyRange
- uid: java.util.List
  name: List
  nameWithType: List
  fullName: java.util.List
- uid: com.azure.cosmos.implementation.StoredProcedureResponse
  name: StoredProcedureResponse
  nameWithType: StoredProcedureResponse
  fullName: com.azure.cosmos.implementation.StoredProcedureResponse
- uid: com.azure.cosmos.implementation.Conflict
  name: Conflict
  nameWithType: Conflict
  fullName: com.azure.cosmos.implementation.Conflict
- uid: com.azure.cosmos.implementation.DatabaseAccount
  name: DatabaseAccount
  nameWithType: DatabaseAccount
  fullName: com.azure.cosmos.implementation.DatabaseAccount
- uid: com.azure.cosmos.implementation.apachecommons.lang.tuple.Pair
  name: Pair
  nameWithType: Pair
  fullName: com.azure.cosmos.implementation.apachecommons.lang.tuple.Pair
- uid: java.lang.String,com.azure.cosmos.models.PartitionKey
  name: String,PartitionKey
  nameWithType: String,PartitionKey
  fullName: java.lang.String,com.azure.cosmos.models.PartitionKey
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: java.lang.Class
  name: Class
  nameWithType: Class
  fullName: java.lang.Class
