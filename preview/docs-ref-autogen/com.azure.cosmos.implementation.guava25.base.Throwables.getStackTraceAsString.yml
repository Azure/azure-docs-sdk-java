### YamlMime:JavaMember
uid: "com.azure.cosmos.implementation.guava25.base.Throwables.getStackTraceAsString*"
fullName: "com.azure.cosmos.implementation.guava25.base.Throwables.getStackTraceAsString"
name: "getStackTraceAsString"
nameWithType: "Throwables.getStackTraceAsString"
members:
- uid: "com.azure.cosmos.implementation.guava25.base.Throwables.getStackTraceAsString(java.lang.Throwable)"
  fullName: "com.azure.cosmos.implementation.guava25.base.Throwables.getStackTraceAsString(Throwable throwable)"
  name: "getStackTraceAsString(Throwable throwable)"
  nameWithType: "Throwables.getStackTraceAsString(Throwable throwable)"
  summary: "Returns a string containing the result of <xref uid=\"java.lang.Throwable.toString()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"toString()\"></xref>, followed by the full, recursive stack trace of `throwable`. Note that you probably should not be parsing the resulting string; if you need programmatic access to the stack frames, you can call <xref uid=\"java.lang.Throwable.getStackTrace()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Throwable#getStackTrace()\"></xref>."
  parameters:
  - name: "throwable"
    type: "<xref href=\"java.lang.Throwable?alt=java.lang.Throwable&text=Throwable\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public static String getStackTraceAsString(Throwable throwable)"
  returns:
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
type: "method"
metadata: {}
package: "com.azure.cosmos.implementation.guava25.base"
artifact: com.azure:azure-cosmos:4.4.0-beta.1
