### YamlMime:ManagedReference
items:
- uid: com.azure.security.keyvault.keys.KeyClient
  id: KeyClient
  artifact: com.azure:azure-security-keyvault-keys:4.2.0-beta.4
  parent: com.azure.security.keyvault.keys
  children:
  - com.azure.security.keyvault.keys.KeyClient.backupKey(java.lang.String)
  - com.azure.security.keyvault.keys.KeyClient.backupKeyWithResponse(java.lang.String,com.azure.core.util.Context)
  - com.azure.security.keyvault.keys.KeyClient.beginDeleteKey(java.lang.String)
  - com.azure.security.keyvault.keys.KeyClient.beginRecoverDeletedKey(java.lang.String)
  - com.azure.security.keyvault.keys.KeyClient.createEcKey(com.azure.security.keyvault.keys.models.CreateEcKeyOptions)
  - com.azure.security.keyvault.keys.KeyClient.createEcKeyWithResponse(com.azure.security.keyvault.keys.models.CreateEcKeyOptions,com.azure.core.util.Context)
  - com.azure.security.keyvault.keys.KeyClient.createKey(com.azure.security.keyvault.keys.models.CreateKeyOptions)
  - com.azure.security.keyvault.keys.KeyClient.createKey(java.lang.String,com.azure.security.keyvault.keys.models.KeyType)
  - com.azure.security.keyvault.keys.KeyClient.createKeyWithResponse(com.azure.security.keyvault.keys.models.CreateKeyOptions,com.azure.core.util.Context)
  - com.azure.security.keyvault.keys.KeyClient.createRsaKey(com.azure.security.keyvault.keys.models.CreateRsaKeyOptions)
  - com.azure.security.keyvault.keys.KeyClient.createRsaKeyWithResponse(com.azure.security.keyvault.keys.models.CreateRsaKeyOptions,com.azure.core.util.Context)
  - com.azure.security.keyvault.keys.KeyClient.getDeletedKey(java.lang.String)
  - com.azure.security.keyvault.keys.KeyClient.getDeletedKeyWithResponse(java.lang.String,com.azure.core.util.Context)
  - com.azure.security.keyvault.keys.KeyClient.getKey(java.lang.String)
  - com.azure.security.keyvault.keys.KeyClient.getKey(java.lang.String,java.lang.String)
  - com.azure.security.keyvault.keys.KeyClient.getKeyWithResponse(java.lang.String,java.lang.String,com.azure.core.util.Context)
  - com.azure.security.keyvault.keys.KeyClient.getVaultUrl()
  - com.azure.security.keyvault.keys.KeyClient.importKey(com.azure.security.keyvault.keys.models.ImportKeyOptions)
  - com.azure.security.keyvault.keys.KeyClient.importKey(java.lang.String,com.azure.security.keyvault.keys.models.JsonWebKey)
  - com.azure.security.keyvault.keys.KeyClient.importKeyWithResponse(com.azure.security.keyvault.keys.models.ImportKeyOptions,com.azure.core.util.Context)
  - com.azure.security.keyvault.keys.KeyClient.listDeletedKeys()
  - com.azure.security.keyvault.keys.KeyClient.listDeletedKeys(com.azure.core.util.Context)
  - com.azure.security.keyvault.keys.KeyClient.listPropertiesOfKeyVersions(java.lang.String)
  - com.azure.security.keyvault.keys.KeyClient.listPropertiesOfKeyVersions(java.lang.String,com.azure.core.util.Context)
  - com.azure.security.keyvault.keys.KeyClient.listPropertiesOfKeys()
  - com.azure.security.keyvault.keys.KeyClient.listPropertiesOfKeys(com.azure.core.util.Context)
  - com.azure.security.keyvault.keys.KeyClient.purgeDeletedKey(java.lang.String)
  - com.azure.security.keyvault.keys.KeyClient.purgeDeletedKeyWithResponse(java.lang.String,com.azure.core.util.Context)
  - com.azure.security.keyvault.keys.KeyClient.restoreKeyBackup(byte[])
  - com.azure.security.keyvault.keys.KeyClient.restoreKeyBackupWithResponse(byte[],com.azure.core.util.Context)
  - com.azure.security.keyvault.keys.KeyClient.updateKeyProperties(com.azure.security.keyvault.keys.models.KeyProperties,com.azure.security.keyvault.keys.models.KeyOperation...)
  - com.azure.security.keyvault.keys.KeyClient.updateKeyPropertiesWithResponse(com.azure.security.keyvault.keys.models.KeyProperties,com.azure.core.util.Context,com.azure.security.keyvault.keys.models.KeyOperation...)
  langs:
  - java
  name: KeyClient
  nameWithType: KeyClient
  fullName: com.azure.security.keyvault.keys.KeyClient
  type: Class
  package: com.azure.security.keyvault.keys
  summary: >-
    The KeyClient provides synchronous methods to manage <xref uid="com.azure.security.keyvault.keys.models.KeyVaultKey" data-throw-if-not-resolved="false">keys</xref> in the Azure Key Vault. The client supports creating, retrieving, updating, deleting, purging, backing up, restoring and listing the <xref uid="com.azure.security.keyvault.keys.models.KeyVaultKey" data-throw-if-not-resolved="false">keys</xref>. The client also supports listing <xref uid="com.azure.security.keyvault.keys.models.DeletedKey" data-throw-if-not-resolved="false">deleted keys</xref> for a soft-delete enabled Azure Key Vault.


    **Samples to construct the sync client**


    ```java

    KeyClient keyClient = new KeyClientBuilder()
         .vaultUrl("https://myvault.azure.net/")
         .credential(new DefaultAzureCredentialBuilder().build())
         .buildClient();
    ```
  syntax:
    content: public final class KeyClient
  inheritance:
  - java.lang.Object
  inheritedMembers:
  - java.lang.Object.clone()
  - java.lang.Object.equals(java.lang.Object)
  - java.lang.Object.finalize()
  - java.lang.Object.getClass()
  - java.lang.Object.hashCode()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.toString()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
- uid: com.azure.security.keyvault.keys.KeyClient.KeyClient(com.azure.security.keyvault.keys.KeyAsyncClient)
  id: KeyClient(com.azure.security.keyvault.keys.KeyAsyncClient)
  artifact: com.azure:azure-security-keyvault-keys:4.2.0-beta.4
  parent: com.azure.security.keyvault.keys.KeyClient
  langs:
  - java
  name: KeyClient(KeyAsyncClient client)
  nameWithType: KeyClient.KeyClient(KeyAsyncClient client)
  fullName: com.azure.security.keyvault.keys.KeyClient.KeyClient(KeyAsyncClient client)
  overload: com.azure.security.keyvault.keys.KeyClient.KeyClient*
  type: Constructor
  package: com.azure.security.keyvault.keys
  summary: Creates a KeyClient that uses `pipeline` to service requests
  syntax:
    content: " KeyClient(KeyAsyncClient client)"
    parameters:
    - id: client
      type: com.azure.security.keyvault.keys.KeyAsyncClient
      description: The <xref uid="com.azure.security.keyvault.keys.KeyAsyncClient" data-throw-if-not-resolved="false">KeyAsyncClient</xref> that the client routes its request through.
- uid: com.azure.security.keyvault.keys.KeyClient.backupKey(java.lang.String)
  id: backupKey(java.lang.String)
  artifact: com.azure:azure-security-keyvault-keys:4.2.0-beta.4
  parent: com.azure.security.keyvault.keys.KeyClient
  langs:
  - java
  name: backupKey(String name)
  nameWithType: KeyClient.backupKey(String name)
  fullName: com.azure.security.keyvault.keys.KeyClient.backupKey(String name)
  overload: com.azure.security.keyvault.keys.KeyClient.backupKey*
  type: Method
  package: com.azure.security.keyvault.keys
  summary: >-
    Requests a backup of the specified key be downloaded to the client. The Key Backup operation exports a key from Azure Key Vault in a protected form. Note that this operation does not return key material in a form that can be used outside the Azure Key Vault system, the returned key material is either protected to a Azure Key Vault HSM or to Azure Key Vault itself. The intent of this operation is to allow a client to generate a key in one Azure Key Vault instance, backup the key, and then restore it into another Azure Key Vault instance. The backup operation may be used to export, in protected form, any key type from Azure Key Vault. Individual versions of a key cannot be backed up. Backup / Restore can be performed within geographical boundaries only; meaning that a backup from one geographical area cannot be restored to another geographical area. For example, a backup from the US geographical area cannot be restored in an EU geographical area. This operation requires the `key/backup` permission.


    **Code Samples**


    Backs up the key from the key vault and prints out the length of the key's backup byte array returned in the response


    ```java

    byte[] keyBackup = keyClient.backupKey("keyName");
     System.out.printf("Key's Backup Byte array's length %s", keyBackup.length);
    ```
  syntax:
    content: public byte[] backupKey(String name)
    parameters:
    - id: name
      type: java.lang.String
      description: The name of the key.
    return:
      type: byte[]
      description: The backed up key blob.
- uid: com.azure.security.keyvault.keys.KeyClient.backupKeyWithResponse(java.lang.String,com.azure.core.util.Context)
  id: backupKeyWithResponse(java.lang.String,com.azure.core.util.Context)
  artifact: com.azure:azure-security-keyvault-keys:4.2.0-beta.4
  parent: com.azure.security.keyvault.keys.KeyClient
  langs:
  - java
  name: backupKeyWithResponse(String name, Context context)
  nameWithType: KeyClient.backupKeyWithResponse(String name, Context context)
  fullName: com.azure.security.keyvault.keys.KeyClient.backupKeyWithResponse(String name, Context context)
  overload: com.azure.security.keyvault.keys.KeyClient.backupKeyWithResponse*
  type: Method
  package: com.azure.security.keyvault.keys
  summary: >-
    Requests a backup of the specified key be downloaded to the client. The Key Backup operation exports a key from Azure Key Vault in a protected form. Note that this operation does not return key material in a form that can be used outside the Azure Key Vault system, the returned key material is either protected to a Azure Key Vault HSM or to Azure Key Vault itself. The intent of this operation is to allow a client to generate a key in one Azure Key Vault instance, backup the key, and then restore it into another Azure Key Vault instance. The backup operation may be used to export, in protected form, any key type from Azure Key Vault. Individual versions of a key cannot be backed up. Backup / Restore can be performed within geographical boundaries only; meaning that a backup from one geographical area cannot be restored to another geographical area. For example, a backup from the US geographical area cannot be restored in an EU geographical area. This operation requires the `key/backup` permission.


    **Code Samples**


    Backs up the key from the key vault and prints out the length of the key's backup byte array returned in the response


    ```java

    byte[] keyBackup = keyClient.backupKeyWithResponse("keyName", new Context(key2, value2)).getValue();
     System.out.printf("Key's Backup Byte array's length %s", keyBackup.length);
    ```
  syntax:
    content: public Response<byte[]> backupKeyWithResponse(String name, Context context)
    parameters:
    - id: name
      type: java.lang.String
      description: The name of the key.
    - id: context
      type: com.azure.core.util.Context
      description: Additional context that is passed through the Http pipeline during the service call.
    return:
      type: com.azure.core.http.rest.Response<byte[]>
      description: A <xref uid="com.azure.core.http.rest.Response" data-throw-if-not-resolved="false">Response</xref> whose <xref uid="com.azure.core.http.rest.Response.getValue*" data-throw-if-not-resolved="false">value</xref> contains the backed up key blob.
- uid: com.azure.security.keyvault.keys.KeyClient.beginDeleteKey(java.lang.String)
  id: beginDeleteKey(java.lang.String)
  artifact: com.azure:azure-security-keyvault-keys:4.2.0-beta.4
  parent: com.azure.security.keyvault.keys.KeyClient
  langs:
  - java
  name: beginDeleteKey(String name)
  nameWithType: KeyClient.beginDeleteKey(String name)
  fullName: com.azure.security.keyvault.keys.KeyClient.beginDeleteKey(String name)
  overload: com.azure.security.keyvault.keys.KeyClient.beginDeleteKey*
  type: Method
  package: com.azure.security.keyvault.keys
  summary: "Deletes a key of any type from the key vault. If soft-delete is enabled on the key vault then the key is placed in the deleted state and requires to be purged for permanent deletion else the key is permanently deleted. The delete operation applies to any key stored in Azure Key Vault but it cannot be applied to an individual version of a key. This operation removes the cryptographic material associated with the key, which means the key is not usable for Sign/Verify, Wrap/Unwrap or Encrypt/Decrypt operations. This operation requires the `keys/delete` permission.\n\n**Code Samples**\n\nDeletes the key from the keyvault. Prints out the recovery id of the deleted key returned in the response.\n\n```java\nSyncPoller<DeletedKey, Void> deletedKeyPoller = keyClient.beginDeleteKey(\"keyName\");\n \n PollResponse<DeletedKey> deletedKeyPollResponse = deletedKeyPoller.poll();\n \n // Deleted date only works for SoftDelete Enabled Key Vault.\n DeletedKey deletedKey = deletedKeyPollResponse.getValue();\n System.out.println(\"Deleted Date  %s\" + deletedKey.getDeletedOn().toString());\n System.out.printf(\"Deleted Key's Recovery Id %s\", deletedKey.getRecoveryId());\n \n // Key is being deleted on server.\n deletedKeyPoller.waitForCompletion();\n // Key is deleted\n```"
  syntax:
    content: public SyncPoller<DeletedKey,Void> beginDeleteKey(String name)
    parameters:
    - id: name
      type: java.lang.String
      description: The name of the key to be deleted.
    return:
      type: com.azure.core.util.polling.SyncPoller<com.azure.security.keyvault.keys.models.DeletedKey,java.lang.Void>
      description: A <xref uid="com.azure.core.util.polling.SyncPoller" data-throw-if-not-resolved="false">SyncPoller</xref> to poll on and retrieve <xref uid="com.azure.security.keyvault.keys.models.DeletedKey" data-throw-if-not-resolved="false">deleted key</xref>
- uid: com.azure.security.keyvault.keys.KeyClient.beginRecoverDeletedKey(java.lang.String)
  id: beginRecoverDeletedKey(java.lang.String)
  artifact: com.azure:azure-security-keyvault-keys:4.2.0-beta.4
  parent: com.azure.security.keyvault.keys.KeyClient
  langs:
  - java
  name: beginRecoverDeletedKey(String name)
  nameWithType: KeyClient.beginRecoverDeletedKey(String name)
  fullName: com.azure.security.keyvault.keys.KeyClient.beginRecoverDeletedKey(String name)
  overload: com.azure.security.keyvault.keys.KeyClient.beginRecoverDeletedKey*
  type: Method
  package: com.azure.security.keyvault.keys
  summary: "Recovers the deleted key in the key vault to its latest version and can only be performed on a soft-delete enabled vault. An attempt to recover an non-deleted key will return an error. Consider this the inverse of the delete operation on soft-delete enabled vaults. This operation requires the `keys/recover` permission.\n\n**Code Samples**\n\nRecovers the deleted key from the key vault enabled for soft-delete.\n\n//Assuming key is deleted on a soft-delete enabled key vault.\n\n```java\nSyncPoller<KeyVaultKey, Void> recoverKeyPoller = keyClient.beginRecoverDeletedKey(\"deletedKeyName\");\n \n PollResponse<KeyVaultKey> recoverKeyPollResponse = recoverKeyPoller.poll();\n \n KeyVaultKey recoveredKey = recoverKeyPollResponse.getValue();\n System.out.println(\"Recovered Key Name %s\" + recoveredKey.getName());\n System.out.printf(\"Recovered Key's Id %s\", recoveredKey.getId());\n \n // Key is being recovered on server.\n recoverKeyPoller.waitForCompletion();\n // Key is recovered\n```"
  syntax:
    content: public SyncPoller<KeyVaultKey,Void> beginRecoverDeletedKey(String name)
    parameters:
    - id: name
      type: java.lang.String
      description: The name of the deleted key to be recovered.
    return:
      type: com.azure.core.util.polling.SyncPoller<com.azure.security.keyvault.keys.models.KeyVaultKey,java.lang.Void>
      description: A <xref uid="com.azure.core.util.polling.SyncPoller" data-throw-if-not-resolved="false">SyncPoller</xref> to poll on and retrieve <xref uid="com.azure.security.keyvault.keys.models.KeyVaultKey" data-throw-if-not-resolved="false">recovered key</xref>.
- uid: com.azure.security.keyvault.keys.KeyClient.createEcKey(com.azure.security.keyvault.keys.models.CreateEcKeyOptions)
  id: createEcKey(com.azure.security.keyvault.keys.models.CreateEcKeyOptions)
  artifact: com.azure:azure-security-keyvault-keys:4.2.0-beta.4
  parent: com.azure.security.keyvault.keys.KeyClient
  langs:
  - java
  name: createEcKey(CreateEcKeyOptions createEcKeyOptions)
  nameWithType: KeyClient.createEcKey(CreateEcKeyOptions createEcKeyOptions)
  fullName: com.azure.security.keyvault.keys.KeyClient.createEcKey(CreateEcKeyOptions createEcKeyOptions)
  overload: com.azure.security.keyvault.keys.KeyClient.createEcKey*
  type: Method
  package: com.azure.security.keyvault.keys
  summary: >-
    Creates a new Ec key and stores it in the key vault. The create Ec key operation can be used to create any Ec key type in key vault. If the named key already exists, Azure Key Vault creates a new version of the key. It requires the `keys/create` permission.


    The <xref uid="com.azure.security.keyvault.keys.models.CreateEcKeyOptions" data-throw-if-not-resolved="false">CreateEcKeyOptions</xref> parameter is required. The <xref uid="com.azure.security.keyvault.keys.models.CreateEcKeyOptions.getCurveName()" data-throw-if-not-resolved="false">key curve</xref> can be optionally specified. If not specified, default value of <xref uid="com.azure.security.keyvault.keys.models.KeyCurveName.P_256" data-throw-if-not-resolved="false">P-256</xref> is used by Azure Key Vault. The <xref uid="com.azure.security.keyvault.keys.models.CreateEcKeyOptions.getExpiresOn*" data-throw-if-not-resolved="false">expires</xref> and <xref uid="com.azure.security.keyvault.keys.models.CreateEcKeyOptions.getNotBefore*" data-throw-if-not-resolved="false">notBefore</xref> values are optional. The <xref uid="com.azure.security.keyvault.keys.models.CreateEcKeyOptions.isEnabled*" data-throw-if-not-resolved="false">enabled</xref> field is set to true by Azure Key Vault, if not specified.


    The <xref uid="com.azure.security.keyvault.keys.models.CreateEcKeyOptions.getKeyType*" data-throw-if-not-resolved="false">keyType</xref> indicates the type of key to create. Possible values include: <xref uid="com.azure.security.keyvault.keys.models.KeyType.EC" data-throw-if-not-resolved="false">EC</xref> and <xref uid="com.azure.security.keyvault.keys.models.KeyType.EC_HSM" data-throw-if-not-resolved="false">EC-HSM</xref>.


    **Code Samples**


    Creates a new EC key with P-384 web key curve. The key activates in one day and expires in one year. Prints out the details of the created key.


    ```java

    CreateEcKeyOptions createEcKeyOptions = new CreateEcKeyOptions("keyName")
         .setCurveName(KeyCurveName.P_384)
         .setNotBefore(OffsetDateTime.now().plusDays(1))
         .setExpiresOn(OffsetDateTime.now().plusYears(1));
     KeyVaultKey ecKey = keyClient.createEcKey(createEcKeyOptions);
     System.out.printf("Key is created with name %s and id %s %n", ecKey.getName(), ecKey.getId());
    ```
  syntax:
    content: public KeyVaultKey createEcKey(CreateEcKeyOptions createEcKeyOptions)
    parameters:
    - id: createEcKeyOptions
      type: com.azure.security.keyvault.keys.models.CreateEcKeyOptions
      description: The key options object containing information about the ec key being created.
    return:
      type: com.azure.security.keyvault.keys.models.KeyVaultKey
      description: The <xref uid="com.azure.security.keyvault.keys.models.KeyVaultKey" data-throw-if-not-resolved="false">created key</xref>.
- uid: com.azure.security.keyvault.keys.KeyClient.createEcKeyWithResponse(com.azure.security.keyvault.keys.models.CreateEcKeyOptions,com.azure.core.util.Context)
  id: createEcKeyWithResponse(com.azure.security.keyvault.keys.models.CreateEcKeyOptions,com.azure.core.util.Context)
  artifact: com.azure:azure-security-keyvault-keys:4.2.0-beta.4
  parent: com.azure.security.keyvault.keys.KeyClient
  langs:
  - java
  name: createEcKeyWithResponse(CreateEcKeyOptions createEcKeyOptions, Context context)
  nameWithType: KeyClient.createEcKeyWithResponse(CreateEcKeyOptions createEcKeyOptions, Context context)
  fullName: com.azure.security.keyvault.keys.KeyClient.createEcKeyWithResponse(CreateEcKeyOptions createEcKeyOptions, Context context)
  overload: com.azure.security.keyvault.keys.KeyClient.createEcKeyWithResponse*
  type: Method
  package: com.azure.security.keyvault.keys
  summary: >-
    Creates a new Ec key and stores it in the key vault. The create Ec key operation can be used to create any Ec key type in key vault. If the named key already exists, Azure Key Vault creates a new version of the key. It requires the `keys/create` permission.


    The <xref uid="com.azure.security.keyvault.keys.models.CreateEcKeyOptions" data-throw-if-not-resolved="false">CreateEcKeyOptions</xref> parameter is required. The <xref uid="com.azure.security.keyvault.keys.models.CreateEcKeyOptions.getCurveName()" data-throw-if-not-resolved="false">key curve</xref> can be optionally specified. If not specified, default value of <xref uid="com.azure.security.keyvault.keys.models.KeyCurveName.P_256" data-throw-if-not-resolved="false">P-256</xref> is used by Azure Key Vault. The <xref uid="com.azure.security.keyvault.keys.models.CreateEcKeyOptions.getExpiresOn*" data-throw-if-not-resolved="false">expires</xref> and <xref uid="com.azure.security.keyvault.keys.models.CreateEcKeyOptions.getNotBefore*" data-throw-if-not-resolved="false">notBefore</xref> values are optional. The <xref uid="com.azure.security.keyvault.keys.models.CreateEcKeyOptions.isEnabled*" data-throw-if-not-resolved="false">CreateEcKeyOptions#isEnabled()</xref> enabled\} field is set to true by Azure Key Vault, if not specified.


    The <xref uid="com.azure.security.keyvault.keys.models.CreateEcKeyOptions.getKeyType*" data-throw-if-not-resolved="false">keyType</xref> indicates the type of key to create. Possible values include: <xref uid="com.azure.security.keyvault.keys.models.KeyType.EC" data-throw-if-not-resolved="false">EC</xref> and <xref uid="com.azure.security.keyvault.keys.models.KeyType.EC_HSM" data-throw-if-not-resolved="false">EC-HSM</xref>.


    **Code Samples**


    Creates a new EC key with P-384 web key curve. The key activates in one day and expires in one year. Prints out the details of the created key.


    ```java

    CreateEcKeyOptions createEcKeyOptions = new CreateEcKeyOptions("keyName")
         .setCurveName(KeyCurveName.P_384)
         .setNotBefore(OffsetDateTime.now().plusDays(1))
         .setExpiresOn(OffsetDateTime.now().plusYears(1));
     KeyVaultKey ecKey = keyClient.createEcKeyWithResponse(createEcKeyOptions, new Context(key1, value1)).getValue();
     System.out.printf("Key is created with name %s and id %s %n", ecKey.getName(), ecKey.getId());
    ```
  syntax:
    content: public Response<KeyVaultKey> createEcKeyWithResponse(CreateEcKeyOptions createEcKeyOptions, Context context)
    parameters:
    - id: createEcKeyOptions
      type: com.azure.security.keyvault.keys.models.CreateEcKeyOptions
      description: The key options object containing information about the ec key being created.
    - id: context
      type: com.azure.core.util.Context
      description: Additional context that is passed through the Http pipeline during the service call.
    return:
      type: com.azure.core.http.rest.Response<com.azure.security.keyvault.keys.models.KeyVaultKey>
      description: A <xref uid="com.azure.core.http.rest.Response" data-throw-if-not-resolved="false">Response</xref> whose <xref uid="com.azure.core.http.rest.Response.getValue*" data-throw-if-not-resolved="false">value</xref> contains the <xref uid="com.azure.security.keyvault.keys.models.KeyVaultKey" data-throw-if-not-resolved="false">created key</xref>.
- uid: com.azure.security.keyvault.keys.KeyClient.createKey(com.azure.security.keyvault.keys.models.CreateKeyOptions)
  id: createKey(com.azure.security.keyvault.keys.models.CreateKeyOptions)
  artifact: com.azure:azure-security-keyvault-keys:4.2.0-beta.4
  parent: com.azure.security.keyvault.keys.KeyClient
  langs:
  - java
  name: createKey(CreateKeyOptions createKeyOptions)
  nameWithType: KeyClient.createKey(CreateKeyOptions createKeyOptions)
  fullName: com.azure.security.keyvault.keys.KeyClient.createKey(CreateKeyOptions createKeyOptions)
  overload: com.azure.security.keyvault.keys.KeyClient.createKey*
  type: Method
  package: com.azure.security.keyvault.keys
  summary: >-
    Creates a new key and stores it in the key vault. The create key operation can be used to create any key type in key vault. If the named key already exists, Azure Key Vault creates a new version of the key. It requires the `keys/create` permission.


    The <xref uid="com.azure.security.keyvault.keys.models.CreateKeyOptions" data-throw-if-not-resolved="false">CreateKeyOptions</xref> is required. The <xref uid="com.azure.security.keyvault.keys.models.CreateKeyOptions.getExpiresOn()" data-throw-if-not-resolved="false">expires</xref> and <xref uid="com.azure.security.keyvault.keys.models.CreateKeyOptions.getNotBefore()" data-throw-if-not-resolved="false">notBefore</xref> values are optional. The <xref uid="com.azure.security.keyvault.keys.models.CreateKeyOptions.isEnabled()" data-throw-if-not-resolved="false">CreateKeyOptions#isEnabled()</xref> enabled\} field is set to true by Azure Key Vault, if not specified.


    The <xref uid="com.azure.security.keyvault.keys.models.CreateKeyOptions.getKeyType()" data-throw-if-not-resolved="false">keyType</xref> indicates the type of key to create. Possible values include: <xref uid="com.azure.security.keyvault.keys.models.KeyType.EC" data-throw-if-not-resolved="false">EC</xref>, <xref uid="com.azure.security.keyvault.keys.models.KeyType.EC_HSM" data-throw-if-not-resolved="false">EC-HSM</xref>, <xref uid="com.azure.security.keyvault.keys.models.KeyType.RSA" data-throw-if-not-resolved="false">RSA</xref>, <xref uid="com.azure.security.keyvault.keys.models.KeyType.RSA_HSM" data-throw-if-not-resolved="false">RSA-HSM</xref> and <xref uid="com.azure.security.keyvault.keys.models.KeyType.OCT" data-throw-if-not-resolved="false">OCT</xref>.


    **Code Samples**


    Creates a new RSA key which activates in one day and expires in one year. Prints out the details of the


    ```java

    CreateKeyOptions createKeyOptions = new CreateKeyOptions("keyName", KeyType.RSA)
         .setNotBefore(OffsetDateTime.now().plusDays(1))
         .setExpiresOn(OffsetDateTime.now().plusYears(1));
     KeyVaultKey optionsKey = keyClient.createKey(createKeyOptions);
     System.out.printf("Key is created with name %s and id %s %n", optionsKey.getName(), optionsKey.getId());
    ```
  syntax:
    content: public KeyVaultKey createKey(CreateKeyOptions createKeyOptions)
    parameters:
    - id: createKeyOptions
      type: com.azure.security.keyvault.keys.models.CreateKeyOptions
      description: The key options object containing information about the key being created.
    return:
      type: com.azure.security.keyvault.keys.models.KeyVaultKey
      description: The <xref uid="com.azure.security.keyvault.keys.models.KeyVaultKey" data-throw-if-not-resolved="false">created key</xref>.
- uid: com.azure.security.keyvault.keys.KeyClient.createKey(java.lang.String,com.azure.security.keyvault.keys.models.KeyType)
  id: createKey(java.lang.String,com.azure.security.keyvault.keys.models.KeyType)
  artifact: com.azure:azure-security-keyvault-keys:4.2.0-beta.4
  parent: com.azure.security.keyvault.keys.KeyClient
  langs:
  - java
  name: createKey(String name, KeyType keyType)
  nameWithType: KeyClient.createKey(String name, KeyType keyType)
  fullName: com.azure.security.keyvault.keys.KeyClient.createKey(String name, KeyType keyType)
  overload: com.azure.security.keyvault.keys.KeyClient.createKey*
  type: Method
  package: com.azure.security.keyvault.keys
  summary: >-
    Creates a new key and stores it in the key vault. The create key operation can be used to create any key type in key vault. If the named key already exists, Azure Key Vault creates a new version of the key. It requires the `keys/create` permission.


    The <xref uid="com.azure.security.keyvault.keys.models.KeyType" data-throw-if-not-resolved="false">keyType</xref> indicates the type of key to create. Possible values include: <xref uid="com.azure.security.keyvault.keys.models.KeyType.EC" data-throw-if-not-resolved="false">EC</xref>, <xref uid="com.azure.security.keyvault.keys.models.KeyType.EC_HSM" data-throw-if-not-resolved="false">EC-HSM</xref>, <xref uid="com.azure.security.keyvault.keys.models.KeyType.RSA" data-throw-if-not-resolved="false">RSA</xref>, <xref uid="com.azure.security.keyvault.keys.models.KeyType.RSA_HSM" data-throw-if-not-resolved="false">RSA-HSM</xref> and <xref uid="com.azure.security.keyvault.keys.models.KeyType.OCT" data-throw-if-not-resolved="false">OCT</xref>.


    **Code Samples**


    Creates a new EC key. Prints out the details of the created key.


    ```java

    KeyVaultKey key = keyClient.createKey("keyName", KeyType.EC);
     System.out.printf("Key is created with name %s and id %s %n", key.getName(), key.getId());
    ```
  syntax:
    content: public KeyVaultKey createKey(String name, KeyType keyType)
    parameters:
    - id: name
      type: java.lang.String
      description: The name of the key being created.
    - id: keyType
      type: com.azure.security.keyvault.keys.models.KeyType
      description: The type of key to create. For valid values, see <xref uid="com.azure.security.keyvault.keys.models.KeyType" data-throw-if-not-resolved="false">KeyType</xref>.
    return:
      type: com.azure.security.keyvault.keys.models.KeyVaultKey
      description: The <xref uid="com.azure.security.keyvault.keys.models.KeyVaultKey" data-throw-if-not-resolved="false">created key</xref>.
- uid: com.azure.security.keyvault.keys.KeyClient.createKeyWithResponse(com.azure.security.keyvault.keys.models.CreateKeyOptions,com.azure.core.util.Context)
  id: createKeyWithResponse(com.azure.security.keyvault.keys.models.CreateKeyOptions,com.azure.core.util.Context)
  artifact: com.azure:azure-security-keyvault-keys:4.2.0-beta.4
  parent: com.azure.security.keyvault.keys.KeyClient
  langs:
  - java
  name: createKeyWithResponse(CreateKeyOptions createKeyOptions, Context context)
  nameWithType: KeyClient.createKeyWithResponse(CreateKeyOptions createKeyOptions, Context context)
  fullName: com.azure.security.keyvault.keys.KeyClient.createKeyWithResponse(CreateKeyOptions createKeyOptions, Context context)
  overload: com.azure.security.keyvault.keys.KeyClient.createKeyWithResponse*
  type: Method
  package: com.azure.security.keyvault.keys
  summary: >-
    Creates a new key and stores it in the key vault. The create key operation can be used to create any key type in key vault. If the named key already exists, Azure Key Vault creates a new version of the key. It requires the `keys/create` permission.


    The <xref uid="com.azure.security.keyvault.keys.models.CreateKeyOptions" data-throw-if-not-resolved="false">CreateKeyOptions</xref> is required. The <xref uid="com.azure.security.keyvault.keys.models.CreateKeyOptions.getExpiresOn()" data-throw-if-not-resolved="false">expires</xref> and <xref uid="com.azure.security.keyvault.keys.models.CreateKeyOptions.getNotBefore()" data-throw-if-not-resolved="false">notBefore</xref> values are optional. The <xref uid="com.azure.security.keyvault.keys.models.CreateKeyOptions.isEnabled()" data-throw-if-not-resolved="false">enabled</xref> field is set to true by Azure Key Vault, if not specified.


    The <xref uid="com.azure.security.keyvault.keys.models.CreateKeyOptions.getKeyType()" data-throw-if-not-resolved="false">keyType</xref> indicates the type of key to create. Possible values include: <xref uid="com.azure.security.keyvault.keys.models.KeyType.EC" data-throw-if-not-resolved="false">EC</xref>, <xref uid="com.azure.security.keyvault.keys.models.KeyType.EC_HSM" data-throw-if-not-resolved="false">EC-HSM</xref>, <xref uid="com.azure.security.keyvault.keys.models.KeyType.RSA" data-throw-if-not-resolved="false">RSA</xref>, <xref uid="com.azure.security.keyvault.keys.models.KeyType.RSA_HSM" data-throw-if-not-resolved="false">RSA-HSM</xref> and <xref uid="com.azure.security.keyvault.keys.models.KeyType.OCT" data-throw-if-not-resolved="false">OCT</xref>.


    **Code Samples**


    Creates a new RSA key which activates in one day and expires in one year. Prints out the details of the


    ```java

    CreateKeyOptions createKeyOptions = new CreateKeyOptions("keyName", KeyType.RSA)
         .setNotBefore(OffsetDateTime.now().plusDays(1))
         .setExpiresOn(OffsetDateTime.now().plusYears(1));
     KeyVaultKey optionsKey = keyClient.createKeyWithResponse(createKeyOptions, new Context(key1, value1)).getValue();
     System.out.printf("Key is created with name %s and id %s %n", optionsKey.getName(), optionsKey.getId());
    ```
  syntax:
    content: public Response<KeyVaultKey> createKeyWithResponse(CreateKeyOptions createKeyOptions, Context context)
    parameters:
    - id: createKeyOptions
      type: com.azure.security.keyvault.keys.models.CreateKeyOptions
      description: The key options object containing information about the key being created.
    - id: context
      type: com.azure.core.util.Context
      description: Additional context that is passed through the Http pipeline during the service call.
    return:
      type: com.azure.core.http.rest.Response<com.azure.security.keyvault.keys.models.KeyVaultKey>
      description: A <xref uid="com.azure.core.http.rest.Response" data-throw-if-not-resolved="false">Response</xref> whose <xref uid="com.azure.core.http.rest.Response.getValue*" data-throw-if-not-resolved="false">value</xref> contains the <xref uid="com.azure.security.keyvault.keys.models.KeyVaultKey" data-throw-if-not-resolved="false">created key</xref>.
- uid: com.azure.security.keyvault.keys.KeyClient.createRsaKey(com.azure.security.keyvault.keys.models.CreateRsaKeyOptions)
  id: createRsaKey(com.azure.security.keyvault.keys.models.CreateRsaKeyOptions)
  artifact: com.azure:azure-security-keyvault-keys:4.2.0-beta.4
  parent: com.azure.security.keyvault.keys.KeyClient
  langs:
  - java
  name: createRsaKey(CreateRsaKeyOptions createRsaKeyOptions)
  nameWithType: KeyClient.createRsaKey(CreateRsaKeyOptions createRsaKeyOptions)
  fullName: com.azure.security.keyvault.keys.KeyClient.createRsaKey(CreateRsaKeyOptions createRsaKeyOptions)
  overload: com.azure.security.keyvault.keys.KeyClient.createRsaKey*
  type: Method
  package: com.azure.security.keyvault.keys
  summary: >-
    Creates a new Rsa key and stores it in the key vault. The create Rsa key operation can be used to create any Rsa key type in key vault. If the named key already exists, Azure Key Vault creates a new version of the key. It requires the `keys/create` permission.


    The <xref uid="com.azure.security.keyvault.keys.models.CreateRsaKeyOptions" data-throw-if-not-resolved="false">CreateRsaKeyOptions</xref> is required. The <xref uid="com.azure.security.keyvault.keys.models.CreateRsaKeyOptions.getKeySize()" data-throw-if-not-resolved="false">keySize</xref> can be optionally specified. The <xref uid="com.azure.security.keyvault.keys.models.CreateRsaKeyOptions.getExpiresOn*" data-throw-if-not-resolved="false">expires</xref> and <xref uid="com.azure.security.keyvault.keys.models.CreateRsaKeyOptions.getNotBefore*" data-throw-if-not-resolved="false">notBefore</xref> values are optional. The <xref uid="com.azure.security.keyvault.keys.models.CreateRsaKeyOptions.isEnabled*" data-throw-if-not-resolved="false">enabled</xref> field is set to true by Azure Key Vault, if not specified.


    The <xref uid="com.azure.security.keyvault.keys.models.CreateRsaKeyOptions.getKeyType*" data-throw-if-not-resolved="false">keyType</xref> indicates the type of key to create. Possible values include: <xref uid="com.azure.security.keyvault.keys.models.KeyType.RSA" data-throw-if-not-resolved="false">RSA</xref> and <xref uid="com.azure.security.keyvault.keys.models.KeyType.RSA_HSM" data-throw-if-not-resolved="false">RSA-HSM</xref>.


    **Code Samples**


    Creates a new RSA key with size 2048 which activates in one day and expires in one year. Prints out the details of the created key.


    ```java

    CreateRsaKeyOptions createRsaKeyOptions = new CreateRsaKeyOptions("keyName")
         .setKeySize(2048)
         .setNotBefore(OffsetDateTime.now().plusDays(1))
         .setExpiresOn(OffsetDateTime.now().plusYears(1));
     KeyVaultKey rsaKey = keyClient.createRsaKey(createRsaKeyOptions);
     System.out.printf("Key is created with name %s and id %s %n", rsaKey.getName(), rsaKey.getId());
    ```
  syntax:
    content: public KeyVaultKey createRsaKey(CreateRsaKeyOptions createRsaKeyOptions)
    parameters:
    - id: createRsaKeyOptions
      type: com.azure.security.keyvault.keys.models.CreateRsaKeyOptions
      description: The key options object containing information about the rsa key being created.
    return:
      type: com.azure.security.keyvault.keys.models.KeyVaultKey
      description: The <xref uid="com.azure.security.keyvault.keys.models.KeyVaultKey" data-throw-if-not-resolved="false">created key</xref>.
- uid: com.azure.security.keyvault.keys.KeyClient.createRsaKeyWithResponse(com.azure.security.keyvault.keys.models.CreateRsaKeyOptions,com.azure.core.util.Context)
  id: createRsaKeyWithResponse(com.azure.security.keyvault.keys.models.CreateRsaKeyOptions,com.azure.core.util.Context)
  artifact: com.azure:azure-security-keyvault-keys:4.2.0-beta.4
  parent: com.azure.security.keyvault.keys.KeyClient
  langs:
  - java
  name: createRsaKeyWithResponse(CreateRsaKeyOptions createRsaKeyOptions, Context context)
  nameWithType: KeyClient.createRsaKeyWithResponse(CreateRsaKeyOptions createRsaKeyOptions, Context context)
  fullName: com.azure.security.keyvault.keys.KeyClient.createRsaKeyWithResponse(CreateRsaKeyOptions createRsaKeyOptions, Context context)
  overload: com.azure.security.keyvault.keys.KeyClient.createRsaKeyWithResponse*
  type: Method
  package: com.azure.security.keyvault.keys
  summary: >-
    Creates a new Rsa key and stores it in the key vault. The create Rsa key operation can be used to create any Rsa key type in key vault. If the named key already exists, Azure Key Vault creates a new version of the key. It requires the `keys/create` permission.


    The <xref uid="com.azure.security.keyvault.keys.models.CreateRsaKeyOptions" data-throw-if-not-resolved="false">CreateRsaKeyOptions</xref> is required. The <xref uid="com.azure.security.keyvault.keys.models.CreateRsaKeyOptions.getKeySize()" data-throw-if-not-resolved="false">keySize</xref> can be optionally specified. The <xref uid="com.azure.security.keyvault.keys.models.CreateRsaKeyOptions.getExpiresOn*" data-throw-if-not-resolved="false">expires</xref> and <xref uid="com.azure.security.keyvault.keys.models.CreateRsaKeyOptions.getNotBefore*" data-throw-if-not-resolved="false">notBefore</xref> values are optional. The <xref uid="com.azure.security.keyvault.keys.models.CreateRsaKeyOptions.isEnabled*" data-throw-if-not-resolved="false">enabled</xref> field is set to true by Azure Key Vault, if not specified.


    The <xref uid="com.azure.security.keyvault.keys.models.CreateRsaKeyOptions.getKeyType*" data-throw-if-not-resolved="false">keyType</xref> indicates the type of key to create. Possible values include: <xref uid="com.azure.security.keyvault.keys.models.KeyType.RSA" data-throw-if-not-resolved="false">RSA</xref> and <xref uid="com.azure.security.keyvault.keys.models.KeyType.RSA_HSM" data-throw-if-not-resolved="false">RSA-HSM</xref>.


    **Code Samples**


    Creates a new RSA key with size 2048 which activates in one day and expires in one year. Prints out the details of the created key.


    ```java

    CreateRsaKeyOptions createRsaKeyOptions = new CreateRsaKeyOptions("keyName")
         .setKeySize(2048)
         .setNotBefore(OffsetDateTime.now().plusDays(1))
         .setExpiresOn(OffsetDateTime.now().plusYears(1));
     KeyVaultKey rsaKey = keyClient.createRsaKeyWithResponse(createRsaKeyOptions, new Context(key1, value1)).getValue();
     System.out.printf("Key is created with name %s and id %s %n", rsaKey.getName(), rsaKey.getId());
    ```
  syntax:
    content: public Response<KeyVaultKey> createRsaKeyWithResponse(CreateRsaKeyOptions createRsaKeyOptions, Context context)
    parameters:
    - id: createRsaKeyOptions
      type: com.azure.security.keyvault.keys.models.CreateRsaKeyOptions
      description: The key options object containing information about the rsa key being created.
    - id: context
      type: com.azure.core.util.Context
      description: Additional context that is passed through the Http pipeline during the service call.
    return:
      type: com.azure.core.http.rest.Response<com.azure.security.keyvault.keys.models.KeyVaultKey>
      description: A <xref uid="com.azure.core.http.rest.Response" data-throw-if-not-resolved="false">Response</xref> whose <xref uid="com.azure.core.http.rest.Response.getValue*" data-throw-if-not-resolved="false">value</xref> contains the <xref uid="com.azure.security.keyvault.keys.models.KeyVaultKey" data-throw-if-not-resolved="false">created key</xref>.
- uid: com.azure.security.keyvault.keys.KeyClient.getDeletedKey(java.lang.String)
  id: getDeletedKey(java.lang.String)
  artifact: com.azure:azure-security-keyvault-keys:4.2.0-beta.4
  parent: com.azure.security.keyvault.keys.KeyClient
  langs:
  - java
  name: getDeletedKey(String name)
  nameWithType: KeyClient.getDeletedKey(String name)
  fullName: com.azure.security.keyvault.keys.KeyClient.getDeletedKey(String name)
  overload: com.azure.security.keyvault.keys.KeyClient.getDeletedKey*
  type: Method
  package: com.azure.security.keyvault.keys
  summary: >-
    Gets the public part of a deleted key. The Get Deleted Key operation is applicable for soft-delete enabled vaults. This operation requires the `keys/get` permission.


    **Code Samples**


    Gets the deleted key from the key vault enabled for soft-delete. Prints out the details of the deleted key returned in the response.


    //Assuming key is deleted on a soft-delete enabled key vault.


    ```java

    DeletedKey deletedKey = keyClient.getDeletedKey("keyName");
     System.out.printf("Deleted Key's Recovery Id %s", deletedKey.getRecoveryId());
    ```
  syntax:
    content: public DeletedKey getDeletedKey(String name)
    parameters:
    - id: name
      type: java.lang.String
      description: The name of the deleted key.
    return:
      type: com.azure.security.keyvault.keys.models.DeletedKey
      description: The <xref uid="com.azure.security.keyvault.keys.models.DeletedKey" data-throw-if-not-resolved="false">deleted key</xref>.
- uid: com.azure.security.keyvault.keys.KeyClient.getDeletedKeyWithResponse(java.lang.String,com.azure.core.util.Context)
  id: getDeletedKeyWithResponse(java.lang.String,com.azure.core.util.Context)
  artifact: com.azure:azure-security-keyvault-keys:4.2.0-beta.4
  parent: com.azure.security.keyvault.keys.KeyClient
  langs:
  - java
  name: getDeletedKeyWithResponse(String name, Context context)
  nameWithType: KeyClient.getDeletedKeyWithResponse(String name, Context context)
  fullName: com.azure.security.keyvault.keys.KeyClient.getDeletedKeyWithResponse(String name, Context context)
  overload: com.azure.security.keyvault.keys.KeyClient.getDeletedKeyWithResponse*
  type: Method
  package: com.azure.security.keyvault.keys
  summary: >-
    Gets the public part of a deleted key. The Get Deleted Key operation is applicable for soft-delete enabled vaults. This operation requires the `keys/get` permission.


    **Code Samples**


    Gets the deleted key from the key vault enabled for soft-delete. Prints out the details of the deleted key returned in the response.


    //Assuming key is deleted on a soft-delete enabled key vault.


    ```java

    DeletedKey deletedKey = keyClient.getDeletedKeyWithResponse("keyName", new Context(key1, value1))
         .getValue();
     System.out.printf("Deleted Key with recovery Id %s %n", deletedKey.getRecoveryId());
    ```
  syntax:
    content: public Response<DeletedKey> getDeletedKeyWithResponse(String name, Context context)
    parameters:
    - id: name
      type: java.lang.String
      description: The name of the deleted key.
    - id: context
      type: com.azure.core.util.Context
      description: Additional context that is passed through the Http pipeline during the service call.
    return:
      type: com.azure.core.http.rest.Response<com.azure.security.keyvault.keys.models.DeletedKey>
      description: A <xref uid="com.azure.core.http.rest.Response" data-throw-if-not-resolved="false">Response</xref> whose <xref uid="com.azure.core.http.rest.Response.getValue*" data-throw-if-not-resolved="false">value</xref> contains the <xref uid="com.azure.security.keyvault.keys.models.DeletedKey" data-throw-if-not-resolved="false">deleted key</xref>.
- uid: com.azure.security.keyvault.keys.KeyClient.getKey(java.lang.String)
  id: getKey(java.lang.String)
  artifact: com.azure:azure-security-keyvault-keys:4.2.0-beta.4
  parent: com.azure.security.keyvault.keys.KeyClient
  langs:
  - java
  name: getKey(String name)
  nameWithType: KeyClient.getKey(String name)
  fullName: com.azure.security.keyvault.keys.KeyClient.getKey(String name)
  overload: com.azure.security.keyvault.keys.KeyClient.getKey*
  type: Method
  package: com.azure.security.keyvault.keys
  summary: >-
    Get the public part of the latest version of the specified key from the key vault. The get key operation is applicable to all key types and it requires the `keys/get` permission.


    **Code Samples**


    Gets the latest version of the key in the key vault. Prints out the details of the returned key.


    ```java

    KeyVaultKey keyWithVersionValue = keyClient.getKey("keyName");
     System.out.printf("Key is returned with name %s and id %s %n", keyWithVersionValue.getName(),
         keyWithVersionValue.getId());
    ```
  syntax:
    content: public KeyVaultKey getKey(String name)
    parameters:
    - id: name
      type: java.lang.String
      description: The name of the key.
    return:
      type: com.azure.security.keyvault.keys.models.KeyVaultKey
      description: The requested <xref uid="com.azure.security.keyvault.keys.models.KeyVaultKey" data-throw-if-not-resolved="false">key</xref>. The content of the key is null if <code>name</code> is null or empty.
- uid: com.azure.security.keyvault.keys.KeyClient.getKey(java.lang.String,java.lang.String)
  id: getKey(java.lang.String,java.lang.String)
  artifact: com.azure:azure-security-keyvault-keys:4.2.0-beta.4
  parent: com.azure.security.keyvault.keys.KeyClient
  langs:
  - java
  name: getKey(String name, String version)
  nameWithType: KeyClient.getKey(String name, String version)
  fullName: com.azure.security.keyvault.keys.KeyClient.getKey(String name, String version)
  overload: com.azure.security.keyvault.keys.KeyClient.getKey*
  type: Method
  package: com.azure.security.keyvault.keys
  summary: >-
    Gets the public part of the specified key and key version. The get key operation is applicable to all key types and it requires the `keys/get` permission.


    **Code Samples**


    Gets a specific version of the key in the key vault. Prints out the details of the returned key.


    ```java

    String keyVersion = "6A385B124DEF4096AF1361A85B16C204";
     KeyVaultKey keyWithVersion = keyClient.getKey("keyName", keyVersion);
     System.out.printf("Key is returned with name %s and id %s %n", keyWithVersion.getName(),
         keyWithVersion.getId());
    ```
  syntax:
    content: public KeyVaultKey getKey(String name, String version)
    parameters:
    - id: name
      type: java.lang.String
      description: The name of the key, cannot be null
    - id: version
      type: java.lang.String
      description: >-
        The version of the key to retrieve. If this is an empty String or null, this call is
             equivalent to calling <xref uid="com.azure.security.keyvault.keys.KeyClient.getKey(java.lang.String)" data-throw-if-not-resolved="false">KeyClient#getKey(String)</xref>, with the latest version being retrieved.
    return:
      type: com.azure.security.keyvault.keys.models.KeyVaultKey
      description: >-
        The requested <xref uid="com.azure.security.keyvault.keys.models.KeyVaultKey" data-throw-if-not-resolved="false">key</xref>. The content of the key is null if
         both <code>name</code> and <code>version</code> are null or empty.
- uid: com.azure.security.keyvault.keys.KeyClient.getKeyWithResponse(java.lang.String,java.lang.String,com.azure.core.util.Context)
  id: getKeyWithResponse(java.lang.String,java.lang.String,com.azure.core.util.Context)
  artifact: com.azure:azure-security-keyvault-keys:4.2.0-beta.4
  parent: com.azure.security.keyvault.keys.KeyClient
  langs:
  - java
  name: getKeyWithResponse(String name, String version, Context context)
  nameWithType: KeyClient.getKeyWithResponse(String name, String version, Context context)
  fullName: com.azure.security.keyvault.keys.KeyClient.getKeyWithResponse(String name, String version, Context context)
  overload: com.azure.security.keyvault.keys.KeyClient.getKeyWithResponse*
  type: Method
  package: com.azure.security.keyvault.keys
  summary: >-
    Gets the public part of the specified key and key version. The get key operation is applicable to all key types and it requires the `keys/get` permission.


    **Code Samples**


    Gets a specific version of the key in the key vault. Prints out the details of the returned key.


    ```java

    String keyVersion = "6A385B124DEF4096AF1361A85B16C204";
     KeyVaultKey keyWithVersion = keyClient.getKeyWithResponse("keyName", keyVersion,
         new Context(key1, value1)).getValue();
     System.out.printf("Key is returned with name %s and id %s %n", keyWithVersion.getName(),
         keyWithVersion.getId());
    ```
  syntax:
    content: public Response<KeyVaultKey> getKeyWithResponse(String name, String version, Context context)
    parameters:
    - id: name
      type: java.lang.String
      description: The name of the key, cannot be null
    - id: version
      type: java.lang.String
      description: >-
        The version of the key to retrieve. If this is an empty String or null, this call is
             equivalent to calling <xref uid="com.azure.security.keyvault.keys.KeyClient.getKey(java.lang.String)" data-throw-if-not-resolved="false">KeyClient#getKey(String)</xref>, with the latest version being retrieved.
    - id: context
      type: com.azure.core.util.Context
      description: Additional context that is passed through the Http pipeline during the service call.
    return:
      type: com.azure.core.http.rest.Response<com.azure.security.keyvault.keys.models.KeyVaultKey>
      description: >-
        A <xref uid="com.azure.core.http.rest.Response" data-throw-if-not-resolved="false">Response</xref> whose <xref uid="com.azure.core.http.rest.Response.getValue*" data-throw-if-not-resolved="false">value</xref> contains the requested <xref uid="com.azure.security.keyvault.keys.models.KeyVaultKey" data-throw-if-not-resolved="false">key</xref>.
         The content of the key is null if both <code>name</code> and <code>version</code> are null or empty.
- uid: com.azure.security.keyvault.keys.KeyClient.getVaultUrl()
  id: getVaultUrl()
  artifact: com.azure:azure-security-keyvault-keys:4.2.0-beta.4
  parent: com.azure.security.keyvault.keys.KeyClient
  langs:
  - java
  name: getVaultUrl()
  nameWithType: KeyClient.getVaultUrl()
  fullName: com.azure.security.keyvault.keys.KeyClient.getVaultUrl()
  overload: com.azure.security.keyvault.keys.KeyClient.getVaultUrl*
  type: Method
  package: com.azure.security.keyvault.keys
  summary: Get the vault endpoint url
  syntax:
    content: public String getVaultUrl()
    return:
      type: java.lang.String
      description: the vault endpoint url
- uid: com.azure.security.keyvault.keys.KeyClient.importKey(com.azure.security.keyvault.keys.models.ImportKeyOptions)
  id: importKey(com.azure.security.keyvault.keys.models.ImportKeyOptions)
  artifact: com.azure:azure-security-keyvault-keys:4.2.0-beta.4
  parent: com.azure.security.keyvault.keys.KeyClient
  langs:
  - java
  name: importKey(ImportKeyOptions importKeyOptions)
  nameWithType: KeyClient.importKey(ImportKeyOptions importKeyOptions)
  fullName: com.azure.security.keyvault.keys.KeyClient.importKey(ImportKeyOptions importKeyOptions)
  overload: com.azure.security.keyvault.keys.KeyClient.importKey*
  type: Method
  package: com.azure.security.keyvault.keys
  summary: "Imports an externally created key and stores it in key vault. The import key operation may be used to import any key type into the Azure Key Vault. If the named key already exists, Azure Key Vault creates a new version of the key. This operation requires the `keys/import` permission.\n\nThe `keyImportOptions` is required and its fields <xref uid=\"com.azure.security.keyvault.keys.models.ImportKeyOptions.getName*\" data-throw-if-not-resolved=\"false\">name</xref> and <xref uid=\"com.azure.security.keyvault.keys.models.ImportKeyOptions.getKey()\" data-throw-if-not-resolved=\"false\">key material</xref> cannot be null. The <xref uid=\"com.azure.security.keyvault.keys.models.ImportKeyOptions.getExpiresOn*\" data-throw-if-not-resolved=\"false\">expires</xref> and <xref uid=\"com.azure.security.keyvault.keys.models.ImportKeyOptions.getNotBefore*\" data-throw-if-not-resolved=\"false\">notBefore</xref> values in `keyImportOptions` are optional. If not specified, no values are set for the fields. The <xref uid=\"com.azure.security.keyvault.keys.models.ImportKeyOptions.isEnabled*\" data-throw-if-not-resolved=\"false\">enabled</xref> field is set to true and the <xref uid=\"com.azure.security.keyvault.keys.models.ImportKeyOptions.isHardwareProtected()\" data-throw-if-not-resolved=\"false\">hsm</xref> field is set to false by Azure Key Vault, if they are not specified.\n\n**Code Samples**\n\nImports a new key into key vault. Prints out the details of the imported key.\n\n```java\nImportKeyOptions options = new ImportKeyOptions(\"keyName\", jsonWebKeyToImport)\n     .setHardwareProtected(false);\n \n KeyVaultKey importedKeyResponse = keyClient.importKey(options);\n System.out.printf(\"Key is imported with name %s and id %s \\n\", importedKeyResponse.getName(),\n     importedKeyResponse.getId());\n```"
  syntax:
    content: public KeyVaultKey importKey(ImportKeyOptions importKeyOptions)
    parameters:
    - id: importKeyOptions
      type: com.azure.security.keyvault.keys.models.ImportKeyOptions
      description: >-
        The key import configuration object containing information about the json web key
             being imported.
    return:
      type: com.azure.security.keyvault.keys.models.KeyVaultKey
      description: The <xref uid="com.azure.security.keyvault.keys.models.KeyVaultKey" data-throw-if-not-resolved="false">imported key</xref>.
- uid: com.azure.security.keyvault.keys.KeyClient.importKey(java.lang.String,com.azure.security.keyvault.keys.models.JsonWebKey)
  id: importKey(java.lang.String,com.azure.security.keyvault.keys.models.JsonWebKey)
  artifact: com.azure:azure-security-keyvault-keys:4.2.0-beta.4
  parent: com.azure.security.keyvault.keys.KeyClient
  langs:
  - java
  name: importKey(String name, JsonWebKey keyMaterial)
  nameWithType: KeyClient.importKey(String name, JsonWebKey keyMaterial)
  fullName: com.azure.security.keyvault.keys.KeyClient.importKey(String name, JsonWebKey keyMaterial)
  overload: com.azure.security.keyvault.keys.KeyClient.importKey*
  type: Method
  package: com.azure.security.keyvault.keys
  summary: >-
    Imports an externally created key and stores it in key vault. The import key operation may be used to import any key type into the Azure Key Vault. If the named key already exists, Azure Key Vault creates a new version of the key. This operation requires the `keys/import` permission.


    **Code Samples**


    Imports a new key into key vault. Prints out the details of the imported key.


    ```java

    KeyVaultKey importedKey = keyClient.importKey("keyName", jsonWebKeyToImport);
     System.out.printf("Key is imported with name %s and id %s \n", importedKey.getName(), importedKey.getId());
    ```
  syntax:
    content: public KeyVaultKey importKey(String name, JsonWebKey keyMaterial)
    parameters:
    - id: name
      type: java.lang.String
      description: The name for the imported key.
    - id: keyMaterial
      type: com.azure.security.keyvault.keys.models.JsonWebKey
      description: The Json web key being imported.
    return:
      type: com.azure.security.keyvault.keys.models.KeyVaultKey
      description: The <xref uid="com.azure.security.keyvault.keys.models.KeyVaultKey" data-throw-if-not-resolved="false">imported key</xref>.
- uid: com.azure.security.keyvault.keys.KeyClient.importKeyWithResponse(com.azure.security.keyvault.keys.models.ImportKeyOptions,com.azure.core.util.Context)
  id: importKeyWithResponse(com.azure.security.keyvault.keys.models.ImportKeyOptions,com.azure.core.util.Context)
  artifact: com.azure:azure-security-keyvault-keys:4.2.0-beta.4
  parent: com.azure.security.keyvault.keys.KeyClient
  langs:
  - java
  name: importKeyWithResponse(ImportKeyOptions importKeyOptions, Context context)
  nameWithType: KeyClient.importKeyWithResponse(ImportKeyOptions importKeyOptions, Context context)
  fullName: com.azure.security.keyvault.keys.KeyClient.importKeyWithResponse(ImportKeyOptions importKeyOptions, Context context)
  overload: com.azure.security.keyvault.keys.KeyClient.importKeyWithResponse*
  type: Method
  package: com.azure.security.keyvault.keys
  summary: "Imports an externally created key and stores it in key vault. The import key operation may be used to import any key type into the Azure Key Vault. If the named key already exists, Azure Key Vault creates a new version of the key. This operation requires the `keys/import` permission.\n\nThe `keyImportOptions` is required and its fields <xref uid=\"com.azure.security.keyvault.keys.models.ImportKeyOptions.getName*\" data-throw-if-not-resolved=\"false\">name</xref> and <xref uid=\"com.azure.security.keyvault.keys.models.ImportKeyOptions.getKey()\" data-throw-if-not-resolved=\"false\">key material</xref> cannot be null. The <xref uid=\"com.azure.security.keyvault.keys.models.ImportKeyOptions.getExpiresOn*\" data-throw-if-not-resolved=\"false\">expires</xref> and <xref uid=\"com.azure.security.keyvault.keys.models.ImportKeyOptions.getNotBefore*\" data-throw-if-not-resolved=\"false\">notBefore</xref> values in `keyImportOptions` are optional. If not specified, no values are set for the fields. The <xref uid=\"com.azure.security.keyvault.keys.models.ImportKeyOptions.isEnabled*\" data-throw-if-not-resolved=\"false\">enabled</xref> field is set to true and the <xref uid=\"com.azure.security.keyvault.keys.models.ImportKeyOptions.isHardwareProtected()\" data-throw-if-not-resolved=\"false\">hsm</xref> field is set to false by Azure Key Vault, if they are not specified.\n\n**Code Samples**\n\nImports a new key into key vault. Prints out the details of the imported key.\n\n```java\nImportKeyOptions importKeyOptions = new ImportKeyOptions(\"keyName\", jsonWebKeyToImport)\n     .setHardwareProtected(false);\n \n KeyVaultKey importedKeyResp = keyClient.importKeyWithResponse(importKeyOptions, new Context(key1, value1))\n     .getValue();\n System.out.printf(\"Key is imported with name %s and id %s \\n\", importedKeyResp.getName(),\n     importedKeyResp.getId());\n```"
  syntax:
    content: public Response<KeyVaultKey> importKeyWithResponse(ImportKeyOptions importKeyOptions, Context context)
    parameters:
    - id: importKeyOptions
      type: com.azure.security.keyvault.keys.models.ImportKeyOptions
      description: >-
        The key import configuration object containing information about the json web key
             being imported.
    - id: context
      type: com.azure.core.util.Context
      description: Additional context that is passed through the Http pipeline during the service call.
    return:
      type: com.azure.core.http.rest.Response<com.azure.security.keyvault.keys.models.KeyVaultKey>
      description: A <xref uid="com.azure.core.http.rest.Response" data-throw-if-not-resolved="false">Response</xref> whose <xref uid="com.azure.core.http.rest.Response.getValue*" data-throw-if-not-resolved="false">value</xref> contains the <xref uid="com.azure.security.keyvault.keys.models.KeyVaultKey" data-throw-if-not-resolved="false">imported key</xref>.
- uid: com.azure.security.keyvault.keys.KeyClient.listDeletedKeys()
  id: listDeletedKeys()
  artifact: com.azure:azure-security-keyvault-keys:4.2.0-beta.4
  parent: com.azure.security.keyvault.keys.KeyClient
  langs:
  - java
  name: listDeletedKeys()
  nameWithType: KeyClient.listDeletedKeys()
  fullName: com.azure.security.keyvault.keys.KeyClient.listDeletedKeys()
  overload: com.azure.security.keyvault.keys.KeyClient.listDeletedKeys*
  type: Method
  package: com.azure.security.keyvault.keys
  summary: >-
    Lists <xref uid="com.azure.security.keyvault.keys.models.DeletedKey" data-throw-if-not-resolved="false">deleted keys</xref> of the key vault. The deleted keys are retrieved as JSON Web Key structures that contain the public part of a deleted key. The Get Deleted Keys operation is applicable for vaults enabled for soft-delete. This operation requires the `keys/list` permission.


    **Code Samples**


    Lists the deleted keys in the key vault and for each deleted key prints out its recovery id.


    ```java

    for (DeletedKey deletedKey : keyClient.listDeletedKeys()) {
         System.out.printf("Deleted key's recovery Id %s", deletedKey.getRecoveryId());
     }
    ```


    **Code Samples to iterate over deleted keys by page**


    Iterate over the lists the deleted keys by each page in the key vault and for each deleted key prints out its recovery id.


    ```java

    keyClient.listDeletedKeys().iterableByPage().forEach(resp -> {
         System.out.printf("Got response headers . Url: %s, Status code: %d %n",
             resp.getRequest().getUrl(), resp.getStatusCode());
         resp.getItems().forEach(value -> {
             System.out.printf("Deleted key's recovery Id %s %n", value.getRecoveryId());
         });
     });
    ```
  syntax:
    content: public PagedIterable<DeletedKey> listDeletedKeys()
    return:
      type: com.azure.core.http.rest.PagedIterable<com.azure.security.keyvault.keys.models.DeletedKey>
      description: <xref uid="com.azure.core.http.rest.PagedIterable" data-throw-if-not-resolved="false">PagedIterable</xref> of all of the <xref uid="com.azure.security.keyvault.keys.models.DeletedKey" data-throw-if-not-resolved="false">deleted keys</xref> in the vault.
- uid: com.azure.security.keyvault.keys.KeyClient.listDeletedKeys(com.azure.core.util.Context)
  id: listDeletedKeys(com.azure.core.util.Context)
  artifact: com.azure:azure-security-keyvault-keys:4.2.0-beta.4
  parent: com.azure.security.keyvault.keys.KeyClient
  langs:
  - java
  name: listDeletedKeys(Context context)
  nameWithType: KeyClient.listDeletedKeys(Context context)
  fullName: com.azure.security.keyvault.keys.KeyClient.listDeletedKeys(Context context)
  overload: com.azure.security.keyvault.keys.KeyClient.listDeletedKeys*
  type: Method
  package: com.azure.security.keyvault.keys
  summary: >-
    Lists <xref uid="com.azure.security.keyvault.keys.models.DeletedKey" data-throw-if-not-resolved="false">deleted keys</xref> of the key vault. The deleted keys are retrieved as JSON Web Key structures that contain the public part of a deleted key. The Get Deleted Keys operation is applicable for vaults enabled for soft-delete. This operation requires the `keys/list` permission.


    **Code Samples**


    Lists the deleted keys in the key vault and for each deleted key prints out its recovery id.


    ```java

    for (DeletedKey deletedKey : keyClient.listDeletedKeys(new Context(key2, value2))) {
         System.out.printf("Deleted key's recovery Id %s", deletedKey.getRecoveryId());
     }
    ```


    **Code Samples to iterate over deleted keys by page**


    Iterate over the lists the deleted keys by each page in the key vault and for each deleted key prints out its recovery id.


    ```java

    keyClient.listDeletedKeys().iterableByPage().forEach(resp -> {
         System.out.printf("Got response headers . Url: %s, Status code: %d %n",
             resp.getRequest().getUrl(), resp.getStatusCode());
         resp.getItems().forEach(value -> {
             System.out.printf("Deleted key's recovery Id %s %n", value.getRecoveryId());
         });
     });
    ```
  syntax:
    content: public PagedIterable<DeletedKey> listDeletedKeys(Context context)
    parameters:
    - id: context
      type: com.azure.core.util.Context
      description: Additional context that is passed through the Http pipeline during the service call.
    return:
      type: com.azure.core.http.rest.PagedIterable<com.azure.security.keyvault.keys.models.DeletedKey>
      description: <xref uid="com.azure.core.http.rest.PagedIterable" data-throw-if-not-resolved="false">PagedIterable</xref> of all of the <xref uid="com.azure.security.keyvault.keys.models.DeletedKey" data-throw-if-not-resolved="false">deleted keys</xref> in the vault.
- uid: com.azure.security.keyvault.keys.KeyClient.listPropertiesOfKeyVersions(java.lang.String)
  id: listPropertiesOfKeyVersions(java.lang.String)
  artifact: com.azure:azure-security-keyvault-keys:4.2.0-beta.4
  parent: com.azure.security.keyvault.keys.KeyClient
  langs:
  - java
  name: listPropertiesOfKeyVersions(String name)
  nameWithType: KeyClient.listPropertiesOfKeyVersions(String name)
  fullName: com.azure.security.keyvault.keys.KeyClient.listPropertiesOfKeyVersions(String name)
  overload: com.azure.security.keyvault.keys.KeyClient.listPropertiesOfKeyVersions*
  type: Method
  package: com.azure.security.keyvault.keys
  summary: >-
    List all versions of the specified key. The individual key response in the flux is represented by <xref uid="com.azure.security.keyvault.keys.models.KeyProperties" data-throw-if-not-resolved="false">KeyProperties</xref> as only the key identifier, attributes and tags are provided in the response. The key material values are not provided in the response. This operation requires the `keys/list` permission.


    It is possible to get full keys with key material for each version from this information. Loop over the <xref uid="com.azure.security.keyvault.keys.models.KeyProperties" data-throw-if-not-resolved="false">key</xref> and call <xref uid="com.azure.security.keyvault.keys.KeyClient.getKey(java.lang.String,java.lang.String)" data-throw-if-not-resolved="false">KeyClient#getKey(String, String)</xref>. This will return the <xref uid="com.azure.security.keyvault.keys.models.KeyVaultKey" data-throw-if-not-resolved="false">keys</xref> with key material included of the specified versions.


    ```java

    for (KeyProperties key : keyClient.listPropertiesOfKeyVersions("keyName")) {
         KeyVaultKey keyWithMaterial  = keyClient.getKey(key.getName(), key.getVersion());
         System.out.printf("Received key's version with name %s, type %s and version %s",
             keyWithMaterial.getName(),
                 keyWithMaterial.getKeyType(), keyWithMaterial.getProperties().getVersion());
     }
    ```


    **Code Samples to iterate over key versions by page**


    It is possible to get full keys with key material for each version from this information. Iterate over all the <xref uid="com.azure.security.keyvault.keys.models.KeyProperties" data-throw-if-not-resolved="false">key</xref> by page and call <xref uid="com.azure.security.keyvault.keys.KeyClient.getKey(java.lang.String,java.lang.String)" data-throw-if-not-resolved="false">KeyClient#getKey(String, String)</xref>. This will return the <xref uid="com.azure.security.keyvault.keys.models.KeyVaultKey" data-throw-if-not-resolved="false">keys</xref> with key material included of the specified versions.


    ```java

    keyClient.listPropertiesOfKeyVersions("keyName").iterableByPage().forEach(resp -> {
         System.out.printf("Got response headers . Url: %s, Status code: %d %n",
             resp.getRequest().getUrl(), resp.getStatusCode());
         resp.getItems().forEach(value -> {
             System.out.printf("Key name: %s, Key version: %s %n", value.getName(), value.getVersion());
         });
     });
    ```
  syntax:
    content: public PagedIterable<KeyProperties> listPropertiesOfKeyVersions(String name)
    parameters:
    - id: name
      type: java.lang.String
      description: The name of the key.
    return:
      type: com.azure.core.http.rest.PagedIterable<com.azure.security.keyvault.keys.models.KeyProperties>
      description: >-
        <xref uid="com.azure.core.http.rest.PagedIterable" data-throw-if-not-resolved="false">PagedIterable</xref> of <xref uid="com.azure.security.keyvault.keys.models.KeyProperties" data-throw-if-not-resolved="false">key</xref> of all the versions of the specified key in the vault. List
             is empty if key with <code>name</code> does not exist in key vault.
- uid: com.azure.security.keyvault.keys.KeyClient.listPropertiesOfKeyVersions(java.lang.String,com.azure.core.util.Context)
  id: listPropertiesOfKeyVersions(java.lang.String,com.azure.core.util.Context)
  artifact: com.azure:azure-security-keyvault-keys:4.2.0-beta.4
  parent: com.azure.security.keyvault.keys.KeyClient
  langs:
  - java
  name: listPropertiesOfKeyVersions(String name, Context context)
  nameWithType: KeyClient.listPropertiesOfKeyVersions(String name, Context context)
  fullName: com.azure.security.keyvault.keys.KeyClient.listPropertiesOfKeyVersions(String name, Context context)
  overload: com.azure.security.keyvault.keys.KeyClient.listPropertiesOfKeyVersions*
  type: Method
  package: com.azure.security.keyvault.keys
  summary: >-
    List all versions of the specified key. The individual key response in the flux is represented by <xref uid="com.azure.security.keyvault.keys.models.KeyProperties" data-throw-if-not-resolved="false">KeyProperties</xref> as only the key identifier, attributes and tags are provided in the response. The key material values are not provided in the response. This operation requires the `keys/list` permission.


    It is possible to get full keys with key material for each version from this information. Loop over the <xref uid="com.azure.security.keyvault.keys.models.KeyProperties" data-throw-if-not-resolved="false">key</xref> and call <xref uid="com.azure.security.keyvault.keys.KeyClient.getKey(java.lang.String,java.lang.String)" data-throw-if-not-resolved="false">KeyClient#getKey(String, String)</xref>. This will return the <xref uid="com.azure.security.keyvault.keys.models.KeyVaultKey" data-throw-if-not-resolved="false">keys</xref> with key material included of the specified versions.


    ```java

    for (KeyProperties key : keyClient.listPropertiesOfKeyVersions("keyName")) {
         KeyVaultKey keyWithMaterial  = keyClient.getKey(key.getName(), key.getVersion());
         System.out.printf("Received key's version with name %s, type %s and version %s",
             keyWithMaterial.getName(),
                 keyWithMaterial.getKeyType(), keyWithMaterial.getProperties().getVersion());
     }
    ```


    **Code Samples to iterate over key versions by page**


    It is possible to get full keys with key material for each version from this information. Iterate over all the <xref uid="com.azure.security.keyvault.keys.models.KeyProperties" data-throw-if-not-resolved="false">key</xref> by page and call <xref uid="com.azure.security.keyvault.keys.KeyClient.getKey(java.lang.String,java.lang.String)" data-throw-if-not-resolved="false">KeyClient#getKey(String, String)</xref>. This will return the <xref uid="com.azure.security.keyvault.keys.models.KeyVaultKey" data-throw-if-not-resolved="false">keys</xref> with key material included of the specified versions.


    ```java

    keyClient.listPropertiesOfKeyVersions("keyName").iterableByPage().forEach(resp -> {
         System.out.printf("Got response headers . Url: %s, Status code: %d %n",
             resp.getRequest().getUrl(), resp.getStatusCode());
         resp.getItems().forEach(value -> {
             System.out.printf("Key name: %s, Key version: %s %n", value.getName(), value.getVersion());
         });
     });
    ```
  syntax:
    content: public PagedIterable<KeyProperties> listPropertiesOfKeyVersions(String name, Context context)
    parameters:
    - id: name
      type: java.lang.String
      description: The name of the key.
    - id: context
      type: com.azure.core.util.Context
      description: Additional context that is passed through the Http pipeline during the service call.
    return:
      type: com.azure.core.http.rest.PagedIterable<com.azure.security.keyvault.keys.models.KeyProperties>
      description: >-
        <xref uid="com.azure.core.http.rest.PagedIterable" data-throw-if-not-resolved="false">PagedIterable</xref> of <xref uid="com.azure.security.keyvault.keys.models.KeyProperties" data-throw-if-not-resolved="false">key</xref> of all the versions of the specified key in the vault. List
             is empty if key with <code>name</code> does not exist in key vault.
- uid: com.azure.security.keyvault.keys.KeyClient.listPropertiesOfKeys()
  id: listPropertiesOfKeys()
  artifact: com.azure:azure-security-keyvault-keys:4.2.0-beta.4
  parent: com.azure.security.keyvault.keys.KeyClient
  langs:
  - java
  name: listPropertiesOfKeys()
  nameWithType: KeyClient.listPropertiesOfKeys()
  fullName: com.azure.security.keyvault.keys.KeyClient.listPropertiesOfKeys()
  overload: com.azure.security.keyvault.keys.KeyClient.listPropertiesOfKeys*
  type: Method
  package: com.azure.security.keyvault.keys
  summary: >-
    List keys in the key vault. Retrieves a list of the keys in the Key Vault as JSON Web Key structures that contain the public part of a stored key. The List operation is applicable to all key types and the individual key response in the list is represented by <xref uid="com.azure.security.keyvault.keys.models.KeyProperties" data-throw-if-not-resolved="false">KeyProperties</xref> as only the key identifier, attributes and tags are provided in the response. The key material and individual key versions are not listed in the response. This operation requires the `keys/list` permission.


    It is possible to get full keys with key material from this information. Loop over the <xref uid="com.azure.security.keyvault.keys.models.KeyProperties" data-throw-if-not-resolved="false">key</xref> and call <xref uid="com.azure.security.keyvault.keys.KeyClient.getKey(java.lang.String,java.lang.String)" data-throw-if-not-resolved="false">KeyClient#getKey(String, String)</xref>. This will return the <xref uid="com.azure.security.keyvault.keys.models.KeyVaultKey" data-throw-if-not-resolved="false">key</xref> with key material included of its latest version.


    ```java

    for (KeyProperties key : keyClient.listPropertiesOfKeys()) {
         KeyVaultKey keyWithMaterial = keyClient.getKey(key.getName(), key.getVersion());
         System.out.printf("Received key with name %s and type %s", keyWithMaterial.getName(),
             keyWithMaterial.getKeyType());
     }
    ```


    **Code Samples to iterate keys by page**


    It is possible to get full keys with key material from this information. Iterate over all the <xref uid="com.azure.security.keyvault.keys.models.KeyProperties" data-throw-if-not-resolved="false">key</xref> by page and call <xref uid="com.azure.security.keyvault.keys.KeyClient.getKey(java.lang.String,java.lang.String)" data-throw-if-not-resolved="false">KeyClient#getKey(String, String)</xref>. This will return the <xref uid="com.azure.security.keyvault.keys.models.KeyVaultKey" data-throw-if-not-resolved="false">key</xref> with key material included of its latest version.


    ```java

    keyClient.listPropertiesOfKeys().iterableByPage().forEach(resp -> {
         System.out.printf("Got response headers . Url: %s, Status code: %d %n",
             resp.getRequest().getUrl(), resp.getStatusCode());
         resp.getItems().forEach(value -> {
             KeyVaultKey keyWithMaterial = keyClient.getKey(value.getName(), value.getVersion());
             System.out.printf("Received key with name %s and type %s %n", keyWithMaterial.getName(),
                 keyWithMaterial.getKeyType());
         });
     });
    ```
  syntax:
    content: public PagedIterable<KeyProperties> listPropertiesOfKeys()
    return:
      type: com.azure.core.http.rest.PagedIterable<com.azure.security.keyvault.keys.models.KeyProperties>
      description: <xref uid="com.azure.core.http.rest.PagedIterable" data-throw-if-not-resolved="false">PagedIterable</xref> of <xref uid="com.azure.security.keyvault.keys.models.KeyProperties" data-throw-if-not-resolved="false">key</xref> of all the keys in the vault.
- uid: com.azure.security.keyvault.keys.KeyClient.listPropertiesOfKeys(com.azure.core.util.Context)
  id: listPropertiesOfKeys(com.azure.core.util.Context)
  artifact: com.azure:azure-security-keyvault-keys:4.2.0-beta.4
  parent: com.azure.security.keyvault.keys.KeyClient
  langs:
  - java
  name: listPropertiesOfKeys(Context context)
  nameWithType: KeyClient.listPropertiesOfKeys(Context context)
  fullName: com.azure.security.keyvault.keys.KeyClient.listPropertiesOfKeys(Context context)
  overload: com.azure.security.keyvault.keys.KeyClient.listPropertiesOfKeys*
  type: Method
  package: com.azure.security.keyvault.keys
  summary: >-
    List keys in the key vault. Retrieves a list of the keys in the Key Vault as JSON Web Key structures that contain the public part of a stored key. The List operation is applicable to all key types and the individual key response in the list is represented by <xref uid="com.azure.security.keyvault.keys.models.KeyProperties" data-throw-if-not-resolved="false">KeyProperties</xref> as only the key identifier, attributes and tags are provided in the response. The key material and individual key versions are not listed in the response. This operation requires the `keys/list` permission.


    It is possible to get full keys with key material from this information. Loop over the <xref uid="com.azure.security.keyvault.keys.models.KeyProperties" data-throw-if-not-resolved="false">key</xref> and call <xref uid="com.azure.security.keyvault.keys.KeyClient.getKey(java.lang.String,java.lang.String)" data-throw-if-not-resolved="false">KeyClient#getKey(String, String)</xref>. This will return the <xref uid="com.azure.security.keyvault.keys.models.KeyVaultKey" data-throw-if-not-resolved="false">key</xref> with key material included of its latest version.


    ```java

    for (KeyProperties key : keyClient.listPropertiesOfKeys(new Context(key2, value2))) {
         KeyVaultKey keyWithMaterial = keyClient.getKey(key.getName(), key.getVersion());
         System.out.printf("Received key with name %s and type %s", keyWithMaterial.getName(),
             keyWithMaterial.getKeyType());
     }
    ```


    **Code Samples to iterate keys by page**


    It is possible to get full keys with key material from this information. Iterate over all the <xref uid="com.azure.security.keyvault.keys.models.KeyProperties" data-throw-if-not-resolved="false">key</xref> by page and call <xref uid="com.azure.security.keyvault.keys.KeyClient.getKey(java.lang.String,java.lang.String)" data-throw-if-not-resolved="false">KeyClient#getKey(String, String)</xref>. This will return the <xref uid="com.azure.security.keyvault.keys.models.KeyVaultKey" data-throw-if-not-resolved="false">key</xref> with key material included of its latest version.


    ```java

    keyClient.listPropertiesOfKeys().iterableByPage().forEach(resp -> {
         System.out.printf("Got response headers . Url: %s, Status code: %d %n",
             resp.getRequest().getUrl(), resp.getStatusCode());
         resp.getItems().forEach(value -> {
             KeyVaultKey keyWithMaterial = keyClient.getKey(value.getName(), value.getVersion());
             System.out.printf("Received key with name %s and type %s %n", keyWithMaterial.getName(),
                 keyWithMaterial.getKeyType());
         });
     });
    ```
  syntax:
    content: public PagedIterable<KeyProperties> listPropertiesOfKeys(Context context)
    parameters:
    - id: context
      type: com.azure.core.util.Context
      description: Additional context that is passed through the Http pipeline during the service call.
    return:
      type: com.azure.core.http.rest.PagedIterable<com.azure.security.keyvault.keys.models.KeyProperties>
      description: <xref uid="com.azure.core.http.rest.PagedIterable" data-throw-if-not-resolved="false">PagedIterable</xref> of <xref uid="com.azure.security.keyvault.keys.models.KeyProperties" data-throw-if-not-resolved="false">key</xref> of all the keys in the vault.
- uid: com.azure.security.keyvault.keys.KeyClient.purgeDeletedKey(java.lang.String)
  id: purgeDeletedKey(java.lang.String)
  artifact: com.azure:azure-security-keyvault-keys:4.2.0-beta.4
  parent: com.azure.security.keyvault.keys.KeyClient
  langs:
  - java
  name: purgeDeletedKey(String name)
  nameWithType: KeyClient.purgeDeletedKey(String name)
  fullName: com.azure.security.keyvault.keys.KeyClient.purgeDeletedKey(String name)
  overload: com.azure.security.keyvault.keys.KeyClient.purgeDeletedKey*
  type: Method
  package: com.azure.security.keyvault.keys
  summary: >-
    Permanently deletes the specified key without the possibility of recovery. The Purge Deleted Key operation is applicable for soft-delete enabled vaults. This operation requires the `keys/purge` permission.


    **Code Samples**


    Purges the deleted key from the key vault enabled for soft-delete. Prints out the status code from the server response.


    //Assuming key is deleted on a soft-delete enabled key vault.


    ```java

    keyClient.purgeDeletedKey("deletedKeyName");

    ```
  syntax:
    content: public void purgeDeletedKey(String name)
    parameters:
    - id: name
      type: java.lang.String
      description: The name of the deleted key.
- uid: com.azure.security.keyvault.keys.KeyClient.purgeDeletedKeyWithResponse(java.lang.String,com.azure.core.util.Context)
  id: purgeDeletedKeyWithResponse(java.lang.String,com.azure.core.util.Context)
  artifact: com.azure:azure-security-keyvault-keys:4.2.0-beta.4
  parent: com.azure.security.keyvault.keys.KeyClient
  langs:
  - java
  name: purgeDeletedKeyWithResponse(String name, Context context)
  nameWithType: KeyClient.purgeDeletedKeyWithResponse(String name, Context context)
  fullName: com.azure.security.keyvault.keys.KeyClient.purgeDeletedKeyWithResponse(String name, Context context)
  overload: com.azure.security.keyvault.keys.KeyClient.purgeDeletedKeyWithResponse*
  type: Method
  package: com.azure.security.keyvault.keys
  summary: >-
    Permanently deletes the specified key without the possibility of recovery. The Purge Deleted Key operation is applicable for soft-delete enabled vaults. This operation requires the `keys/purge` permission.


    **Code Samples**


    Purges the deleted key from the key vault enabled for soft-delete. Prints out the status code from the server response.


    //Assuming key is deleted on a soft-delete enabled key vault.


    ```java

    Response<Void> purgedResponse = keyClient.purgeDeletedKeyWithResponse("deletedKeyName",
         new Context(key2, value2));
     System.out.printf("Purge Status Code: %d %n", purgedResponse.getStatusCode());
    ```
  syntax:
    content: public Response<Void> purgeDeletedKeyWithResponse(String name, Context context)
    parameters:
    - id: name
      type: java.lang.String
      description: The name of the deleted key.
    - id: context
      type: com.azure.core.util.Context
      description: Additional context that is passed through the Http pipeline during the service call.
    return:
      type: com.azure.core.http.rest.Response<java.lang.Void>
      description: A response containing status code and HTTP headers.
- uid: com.azure.security.keyvault.keys.KeyClient.restoreKeyBackup(byte[])
  id: restoreKeyBackup(byte[])
  artifact: com.azure:azure-security-keyvault-keys:4.2.0-beta.4
  parent: com.azure.security.keyvault.keys.KeyClient
  langs:
  - java
  name: restoreKeyBackup(byte[] backup)
  nameWithType: KeyClient.restoreKeyBackup(byte[] backup)
  fullName: com.azure.security.keyvault.keys.KeyClient.restoreKeyBackup(byte[] backup)
  overload: com.azure.security.keyvault.keys.KeyClient.restoreKeyBackup*
  type: Method
  package: com.azure.security.keyvault.keys
  summary: >-
    Restores a backed up key to a vault. Imports a previously backed up key into Azure Key Vault, restoring the key, its key identifier, attributes and access control policies. The restore operation may be used to import a previously backed up key. Individual versions of a key cannot be restored. The key is restored in its entirety with the same key name as it had when it was backed up. If the key name is not available in the target Key Vault, the restore operation will be rejected. While the key name is retained during restore, the final key identifier will change if the key is restored to a different vault. Restore will restore all versions and preserve version identifiers. The restore operation is subject to security constraints: The target Key Vault must be owned by the same Microsoft Azure Subscription as the source Key Vault The user must have restore permission in the target Key Vault. This operation requires the `keys/restore` permission.


    **Code Samples**


    Restores the key in the key vault from its backup. Prints out the details of the restored key returned in the response.


    //Pass the Key Backup Byte array to the restore operation.


    ```java

    byte[] keyBackupByteArray = {};
     KeyVaultKey keyResponse = keyClient.restoreKeyBackup(keyBackupByteArray);
     System.out.printf("Restored Key with name %s and id %s %n", keyResponse.getName(), keyResponse.getId());
    ```
  syntax:
    content: public KeyVaultKey restoreKeyBackup(byte[] backup)
    parameters:
    - id: backup
      type: byte[]
      description: The backup blob associated with the key.
    return:
      type: com.azure.security.keyvault.keys.models.KeyVaultKey
      description: The <xref uid="com.azure.security.keyvault.keys.models.KeyVaultKey" data-throw-if-not-resolved="false">restored key</xref>.
- uid: com.azure.security.keyvault.keys.KeyClient.restoreKeyBackupWithResponse(byte[],com.azure.core.util.Context)
  id: restoreKeyBackupWithResponse(byte[],com.azure.core.util.Context)
  artifact: com.azure:azure-security-keyvault-keys:4.2.0-beta.4
  parent: com.azure.security.keyvault.keys.KeyClient
  langs:
  - java
  name: restoreKeyBackupWithResponse(byte[] backup, Context context)
  nameWithType: KeyClient.restoreKeyBackupWithResponse(byte[] backup, Context context)
  fullName: com.azure.security.keyvault.keys.KeyClient.restoreKeyBackupWithResponse(byte[] backup, Context context)
  overload: com.azure.security.keyvault.keys.KeyClient.restoreKeyBackupWithResponse*
  type: Method
  package: com.azure.security.keyvault.keys
  summary: >-
    Restores a backed up key to a vault. Imports a previously backed up key into Azure Key Vault, restoring the key, its key identifier, attributes and access control policies. The restore operation may be used to import a previously backed up key. Individual versions of a key cannot be restored. The key is restored in its entirety with the same key name as it had when it was backed up. If the key name is not available in the target Key Vault, the restore operation will be rejected. While the key name is retained during restore, the final key identifier will change if the key is restored to a different vault. Restore will restore all versions and preserve version identifiers. The restore operation is subject to security constraints: The target Key Vault must be owned by the same Microsoft Azure Subscription as the source Key Vault The user must have restore permission in the target Key Vault. This operation requires the `keys/restore` permission.


    **Code Samples**


    Restores the key in the key vault from its backup. Prints out the details of the restored key returned in the response.


    //Pass the Key Backup Byte array to the restore operation.


    ```java

    byte[] keyBackupByteArray = {};
     Response<KeyVaultKey> keyResponse = keyClient.restoreKeyBackupWithResponse(keyBackupByteArray,
         new Context(key1, value1));
     System.out.printf("Restored Key with name %s and id %s %n",
         keyResponse.getValue().getName(), keyResponse.getValue().getId());
    ```
  syntax:
    content: public Response<KeyVaultKey> restoreKeyBackupWithResponse(byte[] backup, Context context)
    parameters:
    - id: backup
      type: byte[]
      description: The backup blob associated with the key.
    - id: context
      type: com.azure.core.util.Context
      description: Additional context that is passed through the Http pipeline during the service call.
    return:
      type: com.azure.core.http.rest.Response<com.azure.security.keyvault.keys.models.KeyVaultKey>
      description: A <xref uid="com.azure.core.http.rest.Response" data-throw-if-not-resolved="false">Response</xref> whose <xref uid="com.azure.core.http.rest.Response.getValue*" data-throw-if-not-resolved="false">value</xref> contains the <xref uid="com.azure.security.keyvault.keys.models.KeyVaultKey" data-throw-if-not-resolved="false">restored key</xref>.
- uid: com.azure.security.keyvault.keys.KeyClient.updateKeyProperties(com.azure.security.keyvault.keys.models.KeyProperties,com.azure.security.keyvault.keys.models.KeyOperation...)
  id: updateKeyProperties(com.azure.security.keyvault.keys.models.KeyProperties,com.azure.security.keyvault.keys.models.KeyOperation...)
  artifact: com.azure:azure-security-keyvault-keys:4.2.0-beta.4
  parent: com.azure.security.keyvault.keys.KeyClient
  langs:
  - java
  name: updateKeyProperties(KeyProperties keyProperties, KeyOperation[] keyOperations)
  nameWithType: KeyClient.updateKeyProperties(KeyProperties keyProperties, KeyOperation[] keyOperations)
  fullName: com.azure.security.keyvault.keys.KeyClient.updateKeyProperties(KeyProperties keyProperties, KeyOperation[] keyOperations)
  overload: com.azure.security.keyvault.keys.KeyClient.updateKeyProperties*
  type: Method
  package: com.azure.security.keyvault.keys
  summary: >-
    Updates the attributes and key operations associated with the specified key, but not the cryptographic key material of the specified key in the key vault. The update operation changes specified attributes of an existing stored key and attributes that are not specified in the request are left unchanged. The cryptographic key material of a key itself cannot be changed. This operation requires the `keys/set` permission.


    **Code Samples**


    Gets the latest version of the key, changes its expiry time and key operations and the updates the key in the key vault.


    ```java

    KeyVaultKey key = keyClient.getKey("keyName");
     key.getProperties().setExpiresOn(OffsetDateTime.now().plusDays(60));
     KeyVaultKey updatedKey = keyClient.updateKeyProperties(key.getProperties(), KeyOperation.ENCRYPT,
         KeyOperation.DECRYPT);
     System.out.printf("Key is updated with name %s and id %s %n", updatedKey.getName(), updatedKey.getId());
    ```
  syntax:
    content: public KeyVaultKey updateKeyProperties(KeyProperties keyProperties, KeyOperation[] keyOperations)
    parameters:
    - id: keyProperties
      type: com.azure.security.keyvault.keys.models.KeyProperties
      description: The <xref uid="com.azure.security.keyvault.keys.models.KeyProperties" data-throw-if-not-resolved="false">key properties</xref> object with updated properties.
    - id: keyOperations
      type: com.azure.security.keyvault.keys.models.KeyOperation[]
      description: The updated key operations to associate with the key.
    return:
      type: com.azure.security.keyvault.keys.models.KeyVaultKey
      description: A <xref uid="com.azure.core.http.rest.Response" data-throw-if-not-resolved="false">Response</xref> whose <xref uid="com.azure.core.http.rest.Response.getValue*" data-throw-if-not-resolved="false">value</xref> contains the <xref uid="com.azure.security.keyvault.keys.models.KeyVaultKey" data-throw-if-not-resolved="false">updated key</xref>.
- uid: com.azure.security.keyvault.keys.KeyClient.updateKeyPropertiesWithResponse(com.azure.security.keyvault.keys.models.KeyProperties,com.azure.core.util.Context,com.azure.security.keyvault.keys.models.KeyOperation...)
  id: updateKeyPropertiesWithResponse(com.azure.security.keyvault.keys.models.KeyProperties,com.azure.core.util.Context,com.azure.security.keyvault.keys.models.KeyOperation...)
  artifact: com.azure:azure-security-keyvault-keys:4.2.0-beta.4
  parent: com.azure.security.keyvault.keys.KeyClient
  langs:
  - java
  name: updateKeyPropertiesWithResponse(KeyProperties keyProperties, Context context, KeyOperation[] keyOperations)
  nameWithType: KeyClient.updateKeyPropertiesWithResponse(KeyProperties keyProperties, Context context, KeyOperation[] keyOperations)
  fullName: com.azure.security.keyvault.keys.KeyClient.updateKeyPropertiesWithResponse(KeyProperties keyProperties, Context context, KeyOperation[] keyOperations)
  overload: com.azure.security.keyvault.keys.KeyClient.updateKeyPropertiesWithResponse*
  type: Method
  package: com.azure.security.keyvault.keys
  summary: >-
    Updates the attributes and key operations associated with the specified key, but not the cryptographic key material of the specified key in the key vault. The update operation changes specified attributes of an existing stored key and attributes that are not specified in the request are left unchanged. The cryptographic key material of a key itself cannot be changed. This operation requires the `keys/set` permission.


    **Code Samples**


    Gets the latest version of the key, changes its expiry time and key operations and the updates the key in the key vault.


    ```java

    KeyVaultKey key = keyClient.getKey("keyName");
     key.getProperties().setExpiresOn(OffsetDateTime.now().plusDays(60));
     KeyVaultKey updatedKey = keyClient.updateKeyPropertiesWithResponse(key.getProperties(),
         new Context(key1, value1), KeyOperation.ENCRYPT, KeyOperation.DECRYPT).getValue();
     System.out.printf("Key is updated with name %s and id %s %n", updatedKey.getName(), updatedKey.getId());
    ```
  syntax:
    content: public Response<KeyVaultKey> updateKeyPropertiesWithResponse(KeyProperties keyProperties, Context context, KeyOperation[] keyOperations)
    parameters:
    - id: keyProperties
      type: com.azure.security.keyvault.keys.models.KeyProperties
      description: The <xref uid="com.azure.security.keyvault.keys.models.KeyProperties" data-throw-if-not-resolved="false">key properties</xref> object with updated properties.
    - id: context
      type: com.azure.core.util.Context
      description: Additional context that is passed through the Http pipeline during the service call.
    - id: keyOperations
      type: com.azure.security.keyvault.keys.models.KeyOperation[]
      description: The updated key operations to associate with the key.
    return:
      type: com.azure.core.http.rest.Response<com.azure.security.keyvault.keys.models.KeyVaultKey>
      description: A <xref uid="com.azure.core.http.rest.Response" data-throw-if-not-resolved="false">Response</xref> whose <xref uid="com.azure.core.http.rest.Response.getValue*" data-throw-if-not-resolved="false">value</xref> contains the <xref uid="com.azure.security.keyvault.keys.models.KeyVaultKey" data-throw-if-not-resolved="false">updated key</xref>.
references:
- uid: com.azure.security.keyvault.keys.KeyAsyncClient
  name: KeyAsyncClient
  nameWithType: KeyAsyncClient
  fullName: com.azure.security.keyvault.keys.KeyAsyncClient
- uid: com.azure.security.keyvault.keys.KeyClient.KeyClient*
  name: KeyClient
  nameWithType: KeyClient.KeyClient
  fullName: com.azure.security.keyvault.keys.KeyClient.KeyClient
  package: com.azure.security.keyvault.keys
- uid: java.lang.String
  spec.java:
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
- uid: com.azure.security.keyvault.keys.KeyClient.getVaultUrl*
  name: getVaultUrl
  nameWithType: KeyClient.getVaultUrl
  fullName: com.azure.security.keyvault.keys.KeyClient.getVaultUrl
  package: com.azure.security.keyvault.keys
- uid: com.azure.security.keyvault.keys.models.KeyType
  name: KeyType
  nameWithType: KeyType
  fullName: com.azure.security.keyvault.keys.models.KeyType
- uid: com.azure.security.keyvault.keys.models.KeyVaultKey
  name: KeyVaultKey
  nameWithType: KeyVaultKey
  fullName: com.azure.security.keyvault.keys.models.KeyVaultKey
- uid: com.azure.security.keyvault.keys.KeyClient.createKey*
  name: createKey
  nameWithType: KeyClient.createKey
  fullName: com.azure.security.keyvault.keys.KeyClient.createKey
  package: com.azure.security.keyvault.keys
- uid: com.azure.security.keyvault.keys.models.CreateKeyOptions
  name: CreateKeyOptions
  nameWithType: CreateKeyOptions
  fullName: com.azure.security.keyvault.keys.models.CreateKeyOptions
- uid: com.azure.core.util.Context
  spec.java:
  - uid: com.azure.core.util.Context
    name: Context
    fullName: com.azure.core.util.Context
- uid: com.azure.core.http.rest.Response<com.azure.security.keyvault.keys.models.KeyVaultKey>
  spec.java:
  - uid: com.azure.core.http.rest.Response
    name: Response
    fullName: com.azure.core.http.rest.Response
  - name: <
    fullName: <
  - uid: com.azure.security.keyvault.keys.models.KeyVaultKey
    name: KeyVaultKey
    fullName: com.azure.security.keyvault.keys.models.KeyVaultKey
  - name: '>'
    fullName: '>'
- uid: com.azure.security.keyvault.keys.KeyClient.createKeyWithResponse*
  name: createKeyWithResponse
  nameWithType: KeyClient.createKeyWithResponse
  fullName: com.azure.security.keyvault.keys.KeyClient.createKeyWithResponse
  package: com.azure.security.keyvault.keys
- uid: com.azure.security.keyvault.keys.models.CreateRsaKeyOptions
  name: CreateRsaKeyOptions
  nameWithType: CreateRsaKeyOptions
  fullName: com.azure.security.keyvault.keys.models.CreateRsaKeyOptions
- uid: com.azure.security.keyvault.keys.KeyClient.createRsaKey*
  name: createRsaKey
  nameWithType: KeyClient.createRsaKey
  fullName: com.azure.security.keyvault.keys.KeyClient.createRsaKey
  package: com.azure.security.keyvault.keys
- uid: com.azure.security.keyvault.keys.KeyClient.createRsaKeyWithResponse*
  name: createRsaKeyWithResponse
  nameWithType: KeyClient.createRsaKeyWithResponse
  fullName: com.azure.security.keyvault.keys.KeyClient.createRsaKeyWithResponse
  package: com.azure.security.keyvault.keys
- uid: com.azure.security.keyvault.keys.models.CreateEcKeyOptions
  name: CreateEcKeyOptions
  nameWithType: CreateEcKeyOptions
  fullName: com.azure.security.keyvault.keys.models.CreateEcKeyOptions
- uid: com.azure.security.keyvault.keys.KeyClient.createEcKey*
  name: createEcKey
  nameWithType: KeyClient.createEcKey
  fullName: com.azure.security.keyvault.keys.KeyClient.createEcKey
  package: com.azure.security.keyvault.keys
- uid: com.azure.security.keyvault.keys.KeyClient.createEcKeyWithResponse*
  name: createEcKeyWithResponse
  nameWithType: KeyClient.createEcKeyWithResponse
  fullName: com.azure.security.keyvault.keys.KeyClient.createEcKeyWithResponse
  package: com.azure.security.keyvault.keys
- uid: com.azure.security.keyvault.keys.models.JsonWebKey
  name: JsonWebKey
  nameWithType: JsonWebKey
  fullName: com.azure.security.keyvault.keys.models.JsonWebKey
- uid: com.azure.security.keyvault.keys.KeyClient.importKey*
  name: importKey
  nameWithType: KeyClient.importKey
  fullName: com.azure.security.keyvault.keys.KeyClient.importKey
  package: com.azure.security.keyvault.keys
- uid: com.azure.security.keyvault.keys.models.ImportKeyOptions
  name: ImportKeyOptions
  nameWithType: ImportKeyOptions
  fullName: com.azure.security.keyvault.keys.models.ImportKeyOptions
- uid: com.azure.security.keyvault.keys.KeyClient.importKeyWithResponse*
  name: importKeyWithResponse
  nameWithType: KeyClient.importKeyWithResponse
  fullName: com.azure.security.keyvault.keys.KeyClient.importKeyWithResponse
  package: com.azure.security.keyvault.keys
- uid: com.azure.security.keyvault.keys.KeyClient.getKey*
  name: getKey
  nameWithType: KeyClient.getKey
  fullName: com.azure.security.keyvault.keys.KeyClient.getKey
  package: com.azure.security.keyvault.keys
- uid: com.azure.security.keyvault.keys.KeyClient.getKeyWithResponse*
  name: getKeyWithResponse
  nameWithType: KeyClient.getKeyWithResponse
  fullName: com.azure.security.keyvault.keys.KeyClient.getKeyWithResponse
  package: com.azure.security.keyvault.keys
- uid: com.azure.security.keyvault.keys.models.KeyProperties
  name: KeyProperties
  nameWithType: KeyProperties
  fullName: com.azure.security.keyvault.keys.models.KeyProperties
- uid: com.azure.security.keyvault.keys.models.KeyOperation[]
  spec.java:
  - uid: com.azure.security.keyvault.keys.models.KeyOperation
    name: KeyOperation
    fullName: com.azure.security.keyvault.keys.models.KeyOperation
  - name: '[]'
    fullName: '[]'
- uid: com.azure.security.keyvault.keys.KeyClient.updateKeyProperties*
  name: updateKeyProperties
  nameWithType: KeyClient.updateKeyProperties
  fullName: com.azure.security.keyvault.keys.KeyClient.updateKeyProperties
  package: com.azure.security.keyvault.keys
- uid: com.azure.security.keyvault.keys.KeyClient.updateKeyPropertiesWithResponse*
  name: updateKeyPropertiesWithResponse
  nameWithType: KeyClient.updateKeyPropertiesWithResponse
  fullName: com.azure.security.keyvault.keys.KeyClient.updateKeyPropertiesWithResponse
  package: com.azure.security.keyvault.keys
- uid: com.azure.core.util.polling.SyncPoller<com.azure.security.keyvault.keys.models.DeletedKey,java.lang.Void>
  spec.java:
  - uid: com.azure.core.util.polling.SyncPoller
    name: SyncPoller
    fullName: com.azure.core.util.polling.SyncPoller
  - name: <
    fullName: <
  - uid: com.azure.security.keyvault.keys.models.DeletedKey
    name: DeletedKey
    fullName: com.azure.security.keyvault.keys.models.DeletedKey
  - name: ','
    fullName: ','
  - uid: java.lang.Void
    name: Void
    fullName: java.lang.Void
  - name: '>'
    fullName: '>'
- uid: com.azure.security.keyvault.keys.KeyClient.beginDeleteKey*
  name: beginDeleteKey
  nameWithType: KeyClient.beginDeleteKey
  fullName: com.azure.security.keyvault.keys.KeyClient.beginDeleteKey
  package: com.azure.security.keyvault.keys
- uid: com.azure.security.keyvault.keys.models.DeletedKey
  name: DeletedKey
  nameWithType: DeletedKey
  fullName: com.azure.security.keyvault.keys.models.DeletedKey
- uid: com.azure.security.keyvault.keys.KeyClient.getDeletedKey*
  name: getDeletedKey
  nameWithType: KeyClient.getDeletedKey
  fullName: com.azure.security.keyvault.keys.KeyClient.getDeletedKey
  package: com.azure.security.keyvault.keys
- uid: com.azure.core.http.rest.Response<com.azure.security.keyvault.keys.models.DeletedKey>
  spec.java:
  - uid: com.azure.core.http.rest.Response
    name: Response
    fullName: com.azure.core.http.rest.Response
  - name: <
    fullName: <
  - uid: com.azure.security.keyvault.keys.models.DeletedKey
    name: DeletedKey
    fullName: com.azure.security.keyvault.keys.models.DeletedKey
  - name: '>'
    fullName: '>'
- uid: com.azure.security.keyvault.keys.KeyClient.getDeletedKeyWithResponse*
  name: getDeletedKeyWithResponse
  nameWithType: KeyClient.getDeletedKeyWithResponse
  fullName: com.azure.security.keyvault.keys.KeyClient.getDeletedKeyWithResponse
  package: com.azure.security.keyvault.keys
- uid: com.azure.security.keyvault.keys.KeyClient.purgeDeletedKey*
  name: purgeDeletedKey
  nameWithType: KeyClient.purgeDeletedKey
  fullName: com.azure.security.keyvault.keys.KeyClient.purgeDeletedKey
  package: com.azure.security.keyvault.keys
- uid: com.azure.core.http.rest.Response<java.lang.Void>
  spec.java:
  - uid: com.azure.core.http.rest.Response
    name: Response
    fullName: com.azure.core.http.rest.Response
  - name: <
    fullName: <
  - uid: java.lang.Void
    name: Void
    fullName: java.lang.Void
  - name: '>'
    fullName: '>'
- uid: com.azure.security.keyvault.keys.KeyClient.purgeDeletedKeyWithResponse*
  name: purgeDeletedKeyWithResponse
  nameWithType: KeyClient.purgeDeletedKeyWithResponse
  fullName: com.azure.security.keyvault.keys.KeyClient.purgeDeletedKeyWithResponse
  package: com.azure.security.keyvault.keys
- uid: com.azure.core.util.polling.SyncPoller<com.azure.security.keyvault.keys.models.KeyVaultKey,java.lang.Void>
  spec.java:
  - uid: com.azure.core.util.polling.SyncPoller
    name: SyncPoller
    fullName: com.azure.core.util.polling.SyncPoller
  - name: <
    fullName: <
  - uid: com.azure.security.keyvault.keys.models.KeyVaultKey
    name: KeyVaultKey
    fullName: com.azure.security.keyvault.keys.models.KeyVaultKey
  - name: ','
    fullName: ','
  - uid: java.lang.Void
    name: Void
    fullName: java.lang.Void
  - name: '>'
    fullName: '>'
- uid: com.azure.security.keyvault.keys.KeyClient.beginRecoverDeletedKey*
  name: beginRecoverDeletedKey
  nameWithType: KeyClient.beginRecoverDeletedKey
  fullName: com.azure.security.keyvault.keys.KeyClient.beginRecoverDeletedKey
  package: com.azure.security.keyvault.keys
- uid: byte[]
  spec.java:
  - uid: byte
    name: byte
    fullName: byte
  - name: '[]'
    fullName: '[]'
- uid: com.azure.security.keyvault.keys.KeyClient.backupKey*
  name: backupKey
  nameWithType: KeyClient.backupKey
  fullName: com.azure.security.keyvault.keys.KeyClient.backupKey
  package: com.azure.security.keyvault.keys
- uid: com.azure.core.http.rest.Response<byte[]>
  spec.java:
  - uid: com.azure.core.http.rest.Response
    name: Response
    fullName: com.azure.core.http.rest.Response
  - name: <
    fullName: <
  - uid: byte
    name: byte
    fullName: byte
  - name: '[]'
    fullName: '[]'
  - name: '>'
    fullName: '>'
- uid: com.azure.security.keyvault.keys.KeyClient.backupKeyWithResponse*
  name: backupKeyWithResponse
  nameWithType: KeyClient.backupKeyWithResponse
  fullName: com.azure.security.keyvault.keys.KeyClient.backupKeyWithResponse
  package: com.azure.security.keyvault.keys
- uid: com.azure.security.keyvault.keys.KeyClient.restoreKeyBackup*
  name: restoreKeyBackup
  nameWithType: KeyClient.restoreKeyBackup
  fullName: com.azure.security.keyvault.keys.KeyClient.restoreKeyBackup
  package: com.azure.security.keyvault.keys
- uid: com.azure.security.keyvault.keys.KeyClient.restoreKeyBackupWithResponse*
  name: restoreKeyBackupWithResponse
  nameWithType: KeyClient.restoreKeyBackupWithResponse
  fullName: com.azure.security.keyvault.keys.KeyClient.restoreKeyBackupWithResponse
  package: com.azure.security.keyvault.keys
- uid: com.azure.core.http.rest.PagedIterable<com.azure.security.keyvault.keys.models.KeyProperties>
  spec.java:
  - uid: com.azure.core.http.rest.PagedIterable
    name: PagedIterable
    fullName: com.azure.core.http.rest.PagedIterable
  - name: <
    fullName: <
  - uid: com.azure.security.keyvault.keys.models.KeyProperties
    name: KeyProperties
    fullName: com.azure.security.keyvault.keys.models.KeyProperties
  - name: '>'
    fullName: '>'
- uid: com.azure.security.keyvault.keys.KeyClient.listPropertiesOfKeys*
  name: listPropertiesOfKeys
  nameWithType: KeyClient.listPropertiesOfKeys
  fullName: com.azure.security.keyvault.keys.KeyClient.listPropertiesOfKeys
  package: com.azure.security.keyvault.keys
- uid: com.azure.core.http.rest.PagedIterable<com.azure.security.keyvault.keys.models.DeletedKey>
  spec.java:
  - uid: com.azure.core.http.rest.PagedIterable
    name: PagedIterable
    fullName: com.azure.core.http.rest.PagedIterable
  - name: <
    fullName: <
  - uid: com.azure.security.keyvault.keys.models.DeletedKey
    name: DeletedKey
    fullName: com.azure.security.keyvault.keys.models.DeletedKey
  - name: '>'
    fullName: '>'
- uid: com.azure.security.keyvault.keys.KeyClient.listDeletedKeys*
  name: listDeletedKeys
  nameWithType: KeyClient.listDeletedKeys
  fullName: com.azure.security.keyvault.keys.KeyClient.listDeletedKeys
  package: com.azure.security.keyvault.keys
- uid: com.azure.security.keyvault.keys.KeyClient.listPropertiesOfKeyVersions*
  name: listPropertiesOfKeyVersions
  nameWithType: KeyClient.listPropertiesOfKeyVersions
  fullName: com.azure.security.keyvault.keys.KeyClient.listPropertiesOfKeyVersions
  package: com.azure.security.keyvault.keys
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: java.lang.Object.finalize()
  name: Object.finalize()
  nameWithType: Object.finalize()
  fullName: java.lang.Object.finalize()
- uid: java.lang.Object.clone()
  name: Object.clone()
  nameWithType: Object.clone()
  fullName: java.lang.Object.clone()
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: java.lang.Object.equals(java.lang.Object)
  name: Object.equals(Object)
  nameWithType: Object.equals(Object)
  fullName: java.lang.Object.equals(java.lang.Object)
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.lang.Object.hashCode()
  name: Object.hashCode()
  nameWithType: Object.hashCode()
  fullName: java.lang.Object.hashCode()
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: java.lang.Object.toString()
  name: Object.toString()
  nameWithType: Object.toString()
  fullName: java.lang.Object.toString()
- uid: com.azure.core.http.rest.Response
  name: Response
  nameWithType: Response
  fullName: com.azure.core.http.rest.Response
- uid: com.azure.core.util.polling.SyncPoller
  name: SyncPoller
  nameWithType: SyncPoller
  fullName: com.azure.core.util.polling.SyncPoller
- uid: com.azure.security.keyvault.keys.models.DeletedKey,java.lang.Void
  name: DeletedKey,Void
  nameWithType: DeletedKey,Void
  fullName: com.azure.security.keyvault.keys.models.DeletedKey,java.lang.Void
- uid: java.lang.Void
  name: Void
  nameWithType: Void
  fullName: java.lang.Void
- uid: com.azure.security.keyvault.keys.models.KeyVaultKey,java.lang.Void
  name: KeyVaultKey,Void
  nameWithType: KeyVaultKey,Void
  fullName: com.azure.security.keyvault.keys.models.KeyVaultKey,java.lang.Void
- uid: com.azure.core.http.rest.PagedIterable
  name: PagedIterable
  nameWithType: PagedIterable
  fullName: com.azure.core.http.rest.PagedIterable
