### YamlMime:ManagedReference
items:
- uid: com.azure.security.keyvault.keys.KeyClient
  id: KeyClient
  parent: com.azure.security.keyvault.keys
  children:
  - com.azure.security.keyvault.keys.KeyClient.backupKey(String)
  - com.azure.security.keyvault.keys.KeyClient.createEcKey(EcKeyCreateOptions)
  - com.azure.security.keyvault.keys.KeyClient.createKey(KeyCreateOptions)
  - com.azure.security.keyvault.keys.KeyClient.createKey(String,KeyType)
  - com.azure.security.keyvault.keys.KeyClient.createRsaKey(RsaKeyCreateOptions)
  - com.azure.security.keyvault.keys.KeyClient.deleteKey(String)
  - com.azure.security.keyvault.keys.KeyClient.getDeletedKey(String)
  - com.azure.security.keyvault.keys.KeyClient.getKey(KeyBase)
  - com.azure.security.keyvault.keys.KeyClient.getKey(String)
  - com.azure.security.keyvault.keys.KeyClient.getKey(String,String)
  - com.azure.security.keyvault.keys.KeyClient.importKey(KeyImportOptions)
  - com.azure.security.keyvault.keys.KeyClient.importKey(String,JsonWebKey)
  - com.azure.security.keyvault.keys.KeyClient.listDeletedKeys()
  - com.azure.security.keyvault.keys.KeyClient.listKeys()
  - com.azure.security.keyvault.keys.KeyClient.listKeyVersions(String)
  - com.azure.security.keyvault.keys.KeyClient.purgeDeletedKey(String)
  - com.azure.security.keyvault.keys.KeyClient.recoverDeletedKey(String)
  - com.azure.security.keyvault.keys.KeyClient.restoreKey(byte [])
  - com.azure.security.keyvault.keys.KeyClient.updateKey(KeyBase)
  - com.azure.security.keyvault.keys.KeyClient.updateKey(KeyBase,KeyOperation...)
  href: com.azure.security.keyvault.keys.KeyClient.yml
  langs:
  - java
  name: KeyClient
  nameWithType: KeyClient
  fullName: com.azure.security.keyvault.keys.KeyClient
  type: Class
  source:
    remote: &o0
      path: sdk/keyvault/azure-keyvault-keys/src/main/java/com/azure/security/keyvault/keys/KeyClient.java
      branch: master
      repo: https://github.com/Azure/azure-sdk-for-java
    path: sdk/keyvault/azure-keyvault-keys/src/main/java/com/azure/security/keyvault/keys/KeyClient.java
    startLine: 36
  package: com.azure.security.keyvault.keys
  summary: "<p>The KeyClient provides synchronous methods to manage <xref uid=\"\" data-throw-if-not-resolved=\"false\">keys</xref> in the Azure Key Vault. The client supports creating, retrieving, updating, deleting, purging, backing up, restoring and listing the <xref uid=\"\" data-throw-if-not-resolved=\"false\">keys</xref>. The client also supports listing <xref uid=\"\" data-throw-if-not-resolved=\"false\">deleted keys</xref> for a soft-delete enabled Azure Key Vault.</p>\r\n<p>\r\n  <b>Samples to construct the sync client</b>\r\n</p>\r\n<p>{ com.azure.security.keyvault.keys.keyclient.instantiation}</p>\r\n<p></p>"
  syntax:
    content: public class KeyClient
  inheritance:
  - java.lang.Object
- uid: com.azure.security.keyvault.keys.KeyClient.backupKey(String)
  id: backupKey(String)
  parent: com.azure.security.keyvault.keys.KeyClient
  href: com.azure.security.keyvault.keys.KeyClient.yml
  langs:
  - java
  name: backupKey(String name)
  nameWithType: KeyClient.backupKey(String name)
  fullName: com.azure.security.keyvault.keys.KeyClient.backupKey(String name)
  overload: com.azure.security.keyvault.keys.KeyClient.backupKey*
  type: Method
  source:
    remote: *o0
    path: sdk/keyvault/azure-keyvault-keys/src/main/java/com/azure/security/keyvault/keys/KeyClient.java
    startLine: 438
  package: com.azure.security.keyvault.keys
  summary: "<p>Requests a backup of the specified key be downloaded to the client. The Key Backup operation exports a key from Azure Key Vault in a protected form. Note that this operation does not return key material in a form that can be used outside the Azure Key Vault system, the returned key material is either protected to a Azure Key Vault HSM or to Azure Key Vault itself. The intent of this operation is to allow a client to generate a key in one Azure Key Vault instance, backup the key, and then restore it into another Azure Key Vault instance. The backup operation may be used to export, in protected form, any key type from Azure Key Vault. Individual versions of a key cannot be backed up. Backup / Restore can be performed within geographical boundaries only; meaning that a backup from one geographical area cannot be restored to another geographical area. For example, a backup from the US geographical area cannot be restored in an EU geographical area. This operation requires the<code>key/backup \r\n    </code> permission.</p>\r\n<p>\r\n  <b>Code Samples</b>\r\n</p>\r\n<p>Backs up the key from the key vault and prints out the length of the key's backup byte array returned in the response</p>\r\n<p>\r\n  <pre>\r\nbyte[] keyBackup = keyClient.backupKey(\"keyName\").value();\r\nSystem.out.printf(\"Key's Backup Byte array's length %s\", keyBackup.length);\r\n</pre>\r\n</p>\r\n<p></p>"
  syntax:
    content: public Response<byte[]> backupKey(String name)
    parameters:
    - id: name
      type: "26831127"
      description: <p>The name of the key. </p>
    return:
      type: com.azure.core.http.rest.Response260ad3b5
      description: <p>A <xref uid="" data-throw-if-not-resolved="false">Response</xref> whose <xref uid="com.azure.core.http.rest.Response.value()" data-throw-if-not-resolved="false">value</xref> contains the backed up key blob. </p>
  exceptions:
  - type: 47b9dbf9
    description: >-
      <p>when a key with<code>name 

          </code> doesn't exist in the key vault. </p>
  - type: 409de17b
    description: >-
      <p>when a key with<code>name 

          </code> is empty string. </p>
- uid: com.azure.security.keyvault.keys.KeyClient.createEcKey(EcKeyCreateOptions)
  id: createEcKey(EcKeyCreateOptions)
  parent: com.azure.security.keyvault.keys.KeyClient
  href: com.azure.security.keyvault.keys.KeyClient.yml
  langs:
  - java
  name: createEcKey(EcKeyCreateOptions ecKeyCreateOptions)
  nameWithType: KeyClient.createEcKey(EcKeyCreateOptions ecKeyCreateOptions)
  fullName: com.azure.security.keyvault.keys.KeyClient.createEcKey(EcKeyCreateOptions ecKeyCreateOptions)
  overload: com.azure.security.keyvault.keys.KeyClient.createEcKey*
  type: Method
  source:
    remote: *o0
    path: sdk/keyvault/azure-keyvault-keys/src/main/java/com/azure/security/keyvault/keys/KeyClient.java
    startLine: 163
  package: com.azure.security.keyvault.keys
  summary: "<p>Creates a new Ec key and stores it in the key vault. The create Ec key operation can be used to create any Ec key type in key vault. If the named key already exists, Azure Key Vault creates a new version of the key. It requires the<code>keys/create \r\n    </code> permission.</p>\r\n<p>The <xref uid=\"\" data-throw-if-not-resolved=\"false\">EcKeyCreateOptions</xref> parameter is required. The <xref uid=\"com.azure.security.keyvault.keys.models.EcKeyCreateOptions.curve()\" data-throw-if-not-resolved=\"false\">key curve</xref> can be optionally specified. If not specified, default value of <xref uid=\"\" data-throw-if-not-resolved=\"false\">P-256</xref> is used by Azure Key Vault. The <xref uid=\"com.azure.security.keyvault.keys.models.KeyCreateOptions.expires()\" data-throw-if-not-resolved=\"false\">expires</xref> and <xref uid=\"com.azure.security.keyvault.keys.models.KeyCreateOptions.notBefore()\" data-throw-if-not-resolved=\"false\">notBefore</xref> values are optional. The <xref uid=\"com.azure.security.keyvault.keys.models.KeyCreateOptions.enabled()\" data-throw-if-not-resolved=\"false\">enabled</xref> field is set to true by Azure Key Vault, if not specified.</p>\r\n<p>The <xref uid=\"com.azure.security.keyvault.keys.models.KeyCreateOptions.keyType()\" data-throw-if-not-resolved=\"false\">keyType</xref> indicates the type of key to create. Possible values include: <xref uid=\"\" data-throw-if-not-resolved=\"false\">EC</xref> and <xref uid=\"\" data-throw-if-not-resolved=\"false\">EC-HSM</xref>.</p>\r\n<p>\r\n  <b>Code Samples</b>\r\n</p>\r\n<p>Creates a new EC key with P-384 web key curve. The key activates in one day and expires in one year. Prints out the details of the created key.</p>\r\n<p>\r\n  <pre>\r\nEcKeyCreateOptions ecKeyCreateOptions = new EcKeyCreateOptions(\"keyName\", KeyType.EC)\r\n   .curve(KeyCurveName.P_384)\r\n   .notBefore(OffsetDateTime.now().plusDays(1))\r\n   .expires(OffsetDateTime.now().plusYears(1));</pre>\r\n</p>\r\n<p>\r\n  <pre>Key ecKey = keyClient.createEcKey(ecKeyCreateOptions).value();\r\nSystem.out.printf(\"Key is created with name %s and id %s \\n\", ecKey.name(), ecKey.id());\r\n</pre>\r\n</p>\r\n<p></p>"
  syntax:
    content: public Response<Key> createEcKey(EcKeyCreateOptions ecKeyCreateOptions)
    parameters:
    - id: ecKeyCreateOptions
      type: com.azure.security.keyvault.keys.models.EcKeyCreateOptions
      description: <p>The key options object containing information about the ec key being created. </p>
    return:
      type: com.azure.core.http.rest.Response78504a52com.azure.security.keyvault.keys.models.Keya08ddfce
      description: <p>A <xref uid="" data-throw-if-not-resolved="false">Response</xref> whose <xref uid="com.azure.core.http.rest.Response.value()" data-throw-if-not-resolved="false">value</xref> contains the <xref uid="" data-throw-if-not-resolved="false">created key</xref>. </p>
  exceptions:
  - type: 17c54119
    description: >-
      <p>if<code>ecKeyCreateOptions 

          </code> is<code>null 

          </code> . </p>
  - type: 8eb71202
    description: >-
      <p>if<code>ecKeyCreateOptions 

          </code> is malformed. </p>
  - type: 409de17b
    description: >-
      <p>if<code>name 

          </code> is empty string. </p>
- uid: com.azure.security.keyvault.keys.KeyClient.createKey(KeyCreateOptions)
  id: createKey(KeyCreateOptions)
  parent: com.azure.security.keyvault.keys.KeyClient
  href: com.azure.security.keyvault.keys.KeyClient.yml
  langs:
  - java
  name: createKey(KeyCreateOptions keyCreateOptions)
  nameWithType: KeyClient.createKey(KeyCreateOptions keyCreateOptions)
  fullName: com.azure.security.keyvault.keys.KeyClient.createKey(KeyCreateOptions keyCreateOptions)
  overload: com.azure.security.keyvault.keys.KeyClient.createKey*
  type: Method
  source:
    remote: *o0
    path: sdk/keyvault/azure-keyvault-keys/src/main/java/com/azure/security/keyvault/keys/KeyClient.java
    startLine: 96
  package: com.azure.security.keyvault.keys
  summary: "<p>Creates a new key and stores it in the key vault. The create key operation can be used to create any key type in key vault. If the named key already exists, Azure Key Vault creates a new version of the key. It requires the<code>keys/create \r\n    </code> permission.</p>\r\n<p>The <xref uid=\"\" data-throw-if-not-resolved=\"false\">KeyCreateOptions</xref> is required. The <xref uid=\"com.azure.security.keyvault.keys.models.KeyCreateOptions.expires()\" data-throw-if-not-resolved=\"false\">expires</xref> and <xref uid=\"com.azure.security.keyvault.keys.models.KeyCreateOptions.notBefore()\" data-throw-if-not-resolved=\"false\">notBefore</xref> values are optional. The <xref uid=\"com.azure.security.keyvault.keys.models.KeyCreateOptions.enabled()\" data-throw-if-not-resolved=\"false\">enabled</xref> field is set to true by Azure Key Vault, if not specified.</p>\r\n<p>The <xref uid=\"com.azure.security.keyvault.keys.models.KeyCreateOptions.keyType()\" data-throw-if-not-resolved=\"false\">keyType</xref> indicates the type of key to create. Possible values include: <xref uid=\"\" data-throw-if-not-resolved=\"false\">EC</xref>, <xref uid=\"\" data-throw-if-not-resolved=\"false\">EC-HSM</xref>, <xref uid=\"\" data-throw-if-not-resolved=\"false\">RSA</xref>, <xref uid=\"\" data-throw-if-not-resolved=\"false\">RSA-HSM</xref> and <xref uid=\"\" data-throw-if-not-resolved=\"false\">OCT</xref>.</p>\r\n<p>\r\n  <b>Code Samples</b>\r\n</p>\r\n<p>Creates a new RSA key which activates in one day and expires in one year. Prints out the details of the created key.</p>\r\n<p>\r\n  <pre>\r\nKeyCreateOptions KeyCreateOptions = new KeyCreateOptions(\"keyName\", KeyType.RSA)\r\n   .notBefore(OffsetDateTime.now().plusDays(1))\r\n   .expires(OffsetDateTime.now().plusYears(1));</pre>\r\n</p>\r\n<p>\r\n  <pre>Key key = keyClient.createKey(keyCreateOptions).value();\r\nSystem.out.printf(\"Key is created with name %s and id %s \\n\", key.name(), key.id());\r\n</pre>\r\n</p>\r\n<p></p>"
  syntax:
    content: public Response<Key> createKey(KeyCreateOptions keyCreateOptions)
    parameters:
    - id: keyCreateOptions
      type: com.azure.security.keyvault.keys.models.KeyCreateOptions
      description: <p>The key options object containing information about the key being created. </p>
    return:
      type: com.azure.core.http.rest.Response78504a52com.azure.security.keyvault.keys.models.Keya08ddfce
      description: <p>A <xref uid="" data-throw-if-not-resolved="false">Response</xref> whose <xref uid="com.azure.core.http.rest.Response.value()" data-throw-if-not-resolved="false">value</xref> contains the <xref uid="" data-throw-if-not-resolved="false">created key</xref>. </p>
  exceptions:
  - type: 17c54119
    description: >-
      <p>if<code>keyCreateOptions 

          </code> is<code>null 

          </code> . </p>
  - type: 8eb71202
    description: >-
      <p>if<code>keyCreateOptions 

          </code> is malformed. </p>
  - type: 409de17b
    description: >-
      <p>if<code>name 

          </code> is empty string. </p>
- uid: com.azure.security.keyvault.keys.KeyClient.createKey(String,KeyType)
  id: createKey(String,KeyType)
  parent: com.azure.security.keyvault.keys.KeyClient
  href: com.azure.security.keyvault.keys.KeyClient.yml
  langs:
  - java
  name: createKey(String name, KeyType keyType)
  nameWithType: KeyClient.createKey(String name, KeyType keyType)
  fullName: com.azure.security.keyvault.keys.KeyClient.createKey(String name, KeyType keyType)
  overload: com.azure.security.keyvault.keys.KeyClient.createKey*
  type: Method
  source:
    remote: *o0
    path: sdk/keyvault/azure-keyvault-keys/src/main/java/com/azure/security/keyvault/keys/KeyClient.java
    startLine: 65
  package: com.azure.security.keyvault.keys
  summary: "<p>Creates a new key and stores it in the key vault. The create key operation can be used to create any key type in key vault. If the named key already exists, Azure Key Vault creates a new version of the key. It requires the<code>keys/create \r\n    </code> permission.</p>\r\n<p>The <xref uid=\"\" data-throw-if-not-resolved=\"false\">keyType</xref> indicates the type of key to create. Possible values include: <xref uid=\"\" data-throw-if-not-resolved=\"false\">EC</xref>, <xref uid=\"\" data-throw-if-not-resolved=\"false\">EC-HSM</xref>, <xref uid=\"\" data-throw-if-not-resolved=\"false\">RSA</xref>, <xref uid=\"\" data-throw-if-not-resolved=\"false\">RSA-HSM</xref> and <xref uid=\"\" data-throw-if-not-resolved=\"false\">OCT</xref>.</p>\r\n<p>\r\n  <b>Code Samples</b>\r\n</p>\r\n<p>Creates a new EC key. Prints out the details of the created key.</p>\r\n<p>{ com.azure.keyvault.keys.keyclient.createKey::string-keyType}</p>\r\n<p></p>"
  syntax:
    content: public Response<Key> createKey(String name, KeyType keyType)
    parameters:
    - id: name
      type: "26831127"
      description: <p>The name of the key being created. </p>
    - id: keyType
      type: com.azure.security.keyvault.keys.models.webkey.KeyType
      description: <p>The type of key to create. For valid values, see <xref uid="" data-throw-if-not-resolved="false">KeyType</xref>. </p>
    return:
      type: com.azure.core.http.rest.Response78504a52com.azure.security.keyvault.keys.models.Keya08ddfce
      description: <p>A <xref uid="" data-throw-if-not-resolved="false">Response</xref> whose <xref uid="com.azure.core.http.rest.Response.value()" data-throw-if-not-resolved="false">value</xref> contains the <xref uid="" data-throw-if-not-resolved="false">created key</xref>. </p>
  exceptions:
  - type: 8eb71202
    description: >-
      <p>if<code>name 

          </code> or<code>keyType 

          </code> is null. </p>
  - type: 409de17b
    description: >-
      <p>if<code>name 

          </code> is empty string. </p>
- uid: com.azure.security.keyvault.keys.KeyClient.createRsaKey(RsaKeyCreateOptions)
  id: createRsaKey(RsaKeyCreateOptions)
  parent: com.azure.security.keyvault.keys.KeyClient
  href: com.azure.security.keyvault.keys.KeyClient.yml
  langs:
  - java
  name: createRsaKey(RsaKeyCreateOptions rsaKeyCreateOptions)
  nameWithType: KeyClient.createRsaKey(RsaKeyCreateOptions rsaKeyCreateOptions)
  fullName: com.azure.security.keyvault.keys.KeyClient.createRsaKey(RsaKeyCreateOptions rsaKeyCreateOptions)
  overload: com.azure.security.keyvault.keys.KeyClient.createRsaKey*
  type: Method
  source:
    remote: *o0
    path: sdk/keyvault/azure-keyvault-keys/src/main/java/com/azure/security/keyvault/keys/KeyClient.java
    startLine: 129
  package: com.azure.security.keyvault.keys
  summary: "<p>Creates a new Rsa key and stores it in the key vault. The create Rsa key operation can be used to create any Rsa key type in key vault. If the named key already exists, Azure Key Vault creates a new version of the key. It requires the<code>keys/create \r\n    </code> permission.</p>\r\n<p>The <xref uid=\"\" data-throw-if-not-resolved=\"false\">RsaKeyCreateOptions</xref> is required. The <xref uid=\"com.azure.security.keyvault.keys.models.RsaKeyCreateOptions.keySize()\" data-throw-if-not-resolved=\"false\">keySize</xref> can be optionally specified. The <xref uid=\"com.azure.security.keyvault.keys.models.KeyCreateOptions.expires()\" data-throw-if-not-resolved=\"false\">expires</xref> and <xref uid=\"com.azure.security.keyvault.keys.models.KeyCreateOptions.notBefore()\" data-throw-if-not-resolved=\"false\">notBefore</xref> values are optional. The <xref uid=\"com.azure.security.keyvault.keys.models.KeyCreateOptions.enabled()\" data-throw-if-not-resolved=\"false\">enabled</xref> field is set to true by Azure Key Vault, if not specified.</p>\r\n<p>The <xref uid=\"com.azure.security.keyvault.keys.models.KeyCreateOptions.keyType()\" data-throw-if-not-resolved=\"false\">keyType</xref> indicates the type of key to create. Possible values include: <xref uid=\"\" data-throw-if-not-resolved=\"false\">RSA</xref> and <xref uid=\"\" data-throw-if-not-resolved=\"false\">RSA-HSM</xref>.</p>\r\n<p>\r\n  <b>Code Samples</b>\r\n</p>\r\n<p>Creates a new RSA key with size 2048 which activates in one day and expires in one year. Prints out the details of the created key.</p>\r\n<p>\r\n  <pre>\r\nRsaKeyCreateOptions rsaKeyCreateOptions = new RsaKeyCreateOptions(\"keyName\", KeyType.RSA)\r\n   .keySize(2048)\r\n   .notBefore(OffsetDateTime.now().plusDays(1))\r\n   .expires(OffsetDateTime.now().plusYears(1));</pre>\r\n</p>\r\n<p>\r\n  <pre>Key rsaKey = keyClient.createRsaKey(rsaKeyCreateOptions).value();\r\nSystem.out.printf(\"Key is created with name %s and id %s \\n\", rsaKey.name(), rsaKey.id());\r\n</pre>\r\n</p>\r\n<p></p>"
  syntax:
    content: public Response<Key> createRsaKey(RsaKeyCreateOptions rsaKeyCreateOptions)
    parameters:
    - id: rsaKeyCreateOptions
      type: com.azure.security.keyvault.keys.models.RsaKeyCreateOptions
      description: <p>The key options object containing information about the rsa key being created. </p>
    return:
      type: com.azure.core.http.rest.Response78504a52com.azure.security.keyvault.keys.models.Keya08ddfce
      description: <p>A <xref uid="" data-throw-if-not-resolved="false">Response</xref> whose <xref uid="com.azure.core.http.rest.Response.value()" data-throw-if-not-resolved="false">value</xref> contains the <xref uid="" data-throw-if-not-resolved="false">created key</xref>. </p>
  exceptions:
  - type: 17c54119
    description: >-
      <p>if<code>rsaKeyCreateOptions 

          </code> is<code>null 

          </code> . </p>
  - type: 8eb71202
    description: >-
      <p>if<code>rsaKeyCreateOptions 

          </code> is malformed. </p>
  - type: 409de17b
    description: >-
      <p>if<code>name 

          </code> is empty string. </p>
- uid: com.azure.security.keyvault.keys.KeyClient.deleteKey(String)
  id: deleteKey(String)
  parent: com.azure.security.keyvault.keys.KeyClient
  href: com.azure.security.keyvault.keys.KeyClient.yml
  langs:
  - java
  name: deleteKey(String name)
  nameWithType: KeyClient.deleteKey(String name)
  fullName: com.azure.security.keyvault.keys.KeyClient.deleteKey(String name)
  overload: com.azure.security.keyvault.keys.KeyClient.deleteKey*
  type: Method
  source:
    remote: *o0
    path: sdk/keyvault/azure-keyvault-keys/src/main/java/com/azure/security/keyvault/keys/KeyClient.java
    startLine: 347
  package: com.azure.security.keyvault.keys
  summary: "<p>Deletes a key of any type from the key vault. If soft-delete is enabled on the key vault then the key is placed in the deleted state and requires to be purged for permanent deletion else the key is permanently deleted. The delete operation applies to any key stored in Azure Key Vault but it cannot be applied to an individual version of a key. This operation removes the cryptographic material associated with the key, which means the key is not usable for Sign/Verify, Wrap/Unwrap or Encrypt/Decrypt operations. This operation requires the<code>keys/delete \r\n    </code> permission.</p>\r\n<p>\r\n  <b>Code Samples</b>\r\n</p>\r\n<p>Deletes the key from the keyvault. Prints out the recovery id of the deleted key returned in the response.</p>\r\n<p>\r\n  <pre>\r\nDeletedKey deletedKey = keyClient.deleteKey(\"keyName\").value();\r\nSystem.out.printf(\"Deleted Key's Recovery Id %s\", deletedKey.recoveryId()));\r\n</pre>\r\n</p>\r\n<p></p>"
  syntax:
    content: public Response<DeletedKey> deleteKey(String name)
    parameters:
    - id: name
      type: "26831127"
      description: <p>The name of the key to be deleted. </p>
    return:
      type: com.azure.core.http.rest.Response78504a52com.azure.security.keyvault.keys.models.DeletedKeya08ddfce
      description: <p>A <xref uid="" data-throw-if-not-resolved="false">Response</xref> whose <xref uid="com.azure.core.http.rest.Response.value()" data-throw-if-not-resolved="false">value</xref> contains the <xref uid="" data-throw-if-not-resolved="false">deleted key</xref>. </p>
  exceptions:
  - type: 47b9dbf9
    description: >-
      <p>when a key with<code>name 

          </code> doesn't exist in the key vault. </p>
  - type: 409de17b
    description: >-
      <p>when a key with<code>name 

          </code> is empty string. </p>
- uid: com.azure.security.keyvault.keys.KeyClient.getDeletedKey(String)
  id: getDeletedKey(String)
  parent: com.azure.security.keyvault.keys.KeyClient
  href: com.azure.security.keyvault.keys.KeyClient.yml
  langs:
  - java
  name: getDeletedKey(String name)
  nameWithType: KeyClient.getDeletedKey(String name)
  fullName: com.azure.security.keyvault.keys.KeyClient.getDeletedKey(String name)
  overload: com.azure.security.keyvault.keys.KeyClient.getDeletedKey*
  type: Method
  source:
    remote: *o0
    path: sdk/keyvault/azure-keyvault-keys/src/main/java/com/azure/security/keyvault/keys/KeyClient.java
    startLine: 369
  package: com.azure.security.keyvault.keys
  summary: "<p>Gets the public part of a deleted key. The Get Deleted Key operation is applicable for soft-delete enabled vaults. This operation requires the<code>keys/get \r\n    </code> permission.</p>\r\n<p>\r\n  <b>Code Samples</b>\r\n</p>\r\n<p>Gets the deleted key from the key vault enabled for soft-delete. Prints out the details of the deleted key returned in the response.</p>\r\n<p>\r\n  <pre>\r\n//Assuming key is deleted on a soft-delete enabled key vault.\r\nDeletedKey deletedKey = keyClient.getDeletedKey(\"keyName\").value();\r\nSystem.out.printf(\"Deleted Key with recovery Id %s \\n\", deletedKey.recoveryId());\r\n</pre>\r\n</p>\r\n<p></p>"
  syntax:
    content: public Response<DeletedKey> getDeletedKey(String name)
    parameters:
    - id: name
      type: "26831127"
      description: <p>The name of the deleted key. </p>
    return:
      type: com.azure.core.http.rest.Response78504a52com.azure.security.keyvault.keys.models.DeletedKeya08ddfce
      description: <p>A <xref uid="" data-throw-if-not-resolved="false">Response</xref> whose <xref uid="com.azure.core.http.rest.Response.value()" data-throw-if-not-resolved="false">value</xref> contains the <xref uid="" data-throw-if-not-resolved="false">deleted key</xref>. </p>
  exceptions:
  - type: 47b9dbf9
    description: >-
      <p>when a key with<code>name 

          </code> doesn't exist in the key vault. </p>
  - type: 409de17b
    description: >-
      <p>when a key with<code>name 

          </code> is empty string. </p>
- uid: com.azure.security.keyvault.keys.KeyClient.getKey(KeyBase)
  id: getKey(KeyBase)
  parent: com.azure.security.keyvault.keys.KeyClient
  href: com.azure.security.keyvault.keys.KeyClient.yml
  langs:
  - java
  name: getKey(KeyBase keyBase)
  nameWithType: KeyClient.getKey(KeyBase keyBase)
  fullName: com.azure.security.keyvault.keys.KeyClient.getKey(KeyBase keyBase)
  overload: com.azure.security.keyvault.keys.KeyClient.getKey*
  type: Method
  source:
    remote: *o0
    path: sdk/keyvault/azure-keyvault-keys/src/main/java/com/azure/security/keyvault/keys/KeyClient.java
    startLine: 275
  package: com.azure.security.keyvault.keys
  summary: "<p>Get public part of the key which represents <xref uid=\"\" data-throw-if-not-resolved=\"false\">keyBase</xref> from the key vault. The get key operation is applicable to all key types and it requires the<code>keys/get \r\n    </code> permission.</p>\r\n<p>The list operations <xref uid=\"com.azure.security.keyvault.keys.KeyClient.listKeys()\" data-throw-if-not-resolved=\"false\">KeyClient#listKeys()</xref> and <xref uid=\"com.azure.security.keyvault.keys.KeyClient.listKeyVersions(String)\" data-throw-if-not-resolved=\"false\">KeyClient#listKeyVersions(String)</xref> return the <xref uid=\"\" data-throw-if-not-resolved=\"false\">List</xref> containing <xref uid=\"\" data-throw-if-not-resolved=\"false\">base key</xref> as output excluding the key material of the key. This operation can then be used to get the full key with its key material from<code>keyBase \r\n    </code> . </p>\r\n<p>\r\n  <pre>\r\nkeyClient.listKeys().stream().map(keyClient::getKey).forEach(keyResponse -&gt;\r\n  System.out.printf(\"Key is returned with name %s and id %s \\n\", keyResponse.value().name(), keyResponse.value().id()));\r\n</pre>\r\n</p>\r\n<p></p>"
  syntax: &o4
    content: public Response<Key> getKey(KeyBase keyBase)
    parameters:
    - id: keyBase
      type: com.azure.security.keyvault.keys.models.KeyBase
      description: <p>The <xref uid="" data-throw-if-not-resolved="false">base key</xref> holding attributes of the key being requested. </p>
    return:
      type: com.azure.core.http.rest.Response78504a52com.azure.security.keyvault.keys.models.Keya08ddfce
      description: <p>A <xref uid="" data-throw-if-not-resolved="false">Response</xref> whose <xref uid="com.azure.core.http.rest.Response.value()" data-throw-if-not-resolved="false">value</xref> contains the requested <xref uid="" data-throw-if-not-resolved="false">key</xref>. </p>
  exceptions:
  - type: 47b9dbf9
    description: <p>when a key with <xref uid="com.azure.security.keyvault.keys.models.KeyBase.name()" data-throw-if-not-resolved="false">name</xref> and <xref uid="com.azure.security.keyvault.keys.models.KeyBase.version()" data-throw-if-not-resolved="false">version</xref> doesn't exist in the key vault. </p>
  - type: 409de17b
    description: <p>if <xref uid="com.azure.security.keyvault.keys.models.KeyBase.name()" data-throw-if-not-resolved="false">KeyBase#name()</xref> name} or <xref uid="com.azure.security.keyvault.keys.models.KeyBase.version()" data-throw-if-not-resolved="false">version</xref> is empty string. </p>
- uid: com.azure.security.keyvault.keys.KeyClient.getKey(String)
  id: getKey(String)
  parent: com.azure.security.keyvault.keys.KeyClient
  href: com.azure.security.keyvault.keys.KeyClient.yml
  langs:
  - java
  name: getKey(String name)
  nameWithType: KeyClient.getKey(String name)
  fullName: com.azure.security.keyvault.keys.KeyClient.getKey(String name)
  overload: com.azure.security.keyvault.keys.KeyClient.getKey*
  type: Method
  source:
    remote: *o0
    path: sdk/keyvault/azure-keyvault-keys/src/main/java/com/azure/security/keyvault/keys/KeyClient.java
    startLine: 253
  package: com.azure.security.keyvault.keys
  summary: "<p>Get the public part of the latest version of the specified key from the key vault. The get key operation is applicable to all key types and it requires the<code>keys/get \r\n    </code> permission.</p>\r\n<p>\r\n  <b>Code Samples</b>\r\n</p>\r\n<p>Gets the latest version of the key in the key vault. Prints out the details of the returned key.</p>\r\n<p>\r\n  <pre>\r\nKey key = keyClient.getKey(\"keyName\").value();\r\nSystem.out.printf(\"Key is returned with name %s and id %s \\n\", key.name(), key.value().id());\r\n</pre>\r\n</p>\r\n<p></p>"
  syntax: &o1
    content: public Response<Key> getKey(String name)
    parameters:
    - id: name
      type: "26831127"
      description: <p>The name of the key. </p>
    return:
      type: com.azure.core.http.rest.Response78504a52com.azure.security.keyvault.keys.models.Keya08ddfce
      description: <p>A <xref uid="" data-throw-if-not-resolved="false">Response</xref> whose <xref uid="com.azure.core.http.rest.Response.value()" data-throw-if-not-resolved="false">value</xref> contains the requested <xref uid="" data-throw-if-not-resolved="false">key</xref>. </p>
  exceptions:
  - type: 47b9dbf9
    description: >-
      <p>when a key with<code>name 

          </code> doesn't exist in the key vault. </p>
  - type: 409de17b
    description: >-
      <p>if<code>name 

          </code> is empty string. </p>
- uid: com.azure.security.keyvault.keys.KeyClient.getKey(String,String)
  id: getKey(String,String)
  parent: com.azure.security.keyvault.keys.KeyClient
  href: com.azure.security.keyvault.keys.KeyClient.yml
  langs:
  - java
  name: getKey(String name, String version)
  nameWithType: KeyClient.getKey(String name, String version)
  fullName: com.azure.security.keyvault.keys.KeyClient.getKey(String name, String version)
  overload: com.azure.security.keyvault.keys.KeyClient.getKey*
  type: Method
  source:
    remote: *o0
    path: sdk/keyvault/azure-keyvault-keys/src/main/java/com/azure/security/keyvault/keys/KeyClient.java
    startLine: 233
  package: com.azure.security.keyvault.keys
  summary: "<p>Gets the public part of the specified key and key version. The get key operation is applicable to all key types and it requires the<code>keys/get \r\n    </code> permission.</p>\r\n<p>\r\n  <b>Code Samples</b>\r\n</p>\r\n<p>Gets a specific version of the key in the key vault. Prints out the details of the returned key.</p>\r\n<p>\r\n  <pre>\r\nString keyVersion = \"6A385B124DEF4096AF1361A85B16C204\";\r\nKey keyWithVersion = keyClient.getKey(\"keyName\", keyVersion).value();\r\nSystem.out.printf(\"Key is returned with name %s and id %s \\n\", keyWithVersion.name(), keyWithVersion.id());\r\n</pre>\r\n</p>\r\n<p></p>"
  syntax:
    content: public Response<Key> getKey(String name, String version)
    parameters:
    - id: name
      type: "26831127"
      description: <p>The name of the key, cannot be null </p>
    - id: version
      type: "26831127"
      description: <p>The version of the key to retrieve. If this is an empty String or null, this call is equivalent to calling <xref uid="com.azure.security.keyvault.keys.KeyClient.getKey(String)" data-throw-if-not-resolved="false">KeyClient#getKey(String)</xref>, with the latest version being retrieved. </p>
    return:
      type: com.azure.core.http.rest.Response78504a52com.azure.security.keyvault.keys.models.Keya08ddfce
      description: <p>A <xref uid="" data-throw-if-not-resolved="false">Response</xref> whose <xref uid="com.azure.core.http.rest.Response.value()" data-throw-if-not-resolved="false">value</xref> contains the requested <xref uid="" data-throw-if-not-resolved="false">key</xref>. </p>
  exceptions:
  - type: 47b9dbf9
    description: >-
      <p>when a key with<code>name 

          </code> and<code>version 

          </code> doesn't exist in the key vault. </p>
  - type: 409de17b
    description: >-
      <p>if<code>name 

          </code> or<code>version 

          </code> is empty string. </p>
- uid: com.azure.security.keyvault.keys.KeyClient.importKey(KeyImportOptions)
  id: importKey(KeyImportOptions)
  parent: com.azure.security.keyvault.keys.KeyClient
  href: com.azure.security.keyvault.keys.KeyClient.yml
  langs:
  - java
  name: importKey(KeyImportOptions keyImportOptions)
  nameWithType: KeyClient.importKey(KeyImportOptions keyImportOptions)
  fullName: com.azure.security.keyvault.keys.KeyClient.importKey(KeyImportOptions keyImportOptions)
  overload: com.azure.security.keyvault.keys.KeyClient.importKey*
  type: Method
  source:
    remote: *o0
    path: sdk/keyvault/azure-keyvault-keys/src/main/java/com/azure/security/keyvault/keys/KeyClient.java
    startLine: 212
  package: com.azure.security.keyvault.keys
  summary: "<p>Imports an externally created key and stores it in key vault. The import key operation may be used to import any key type into the Azure Key Vault. If the named key already exists, Azure Key Vault creates a new version of the key. This operation requires the<code>keys/import \r\n    </code> permission.</p>\r\n<p>The<code>keyImportOptions \r\n    </code> is required and its fields <xref uid=\"com.azure.security.keyvault.keys.models.KeyBase.name()\" data-throw-if-not-resolved=\"false\">name</xref> and <xref uid=\"com.azure.security.keyvault.keys.models.KeyImportOptions.keyMaterial()\" data-throw-if-not-resolved=\"false\">key material</xref> cannot be null. The <xref uid=\"com.azure.security.keyvault.keys.models.KeyBase.expires()\" data-throw-if-not-resolved=\"false\">expires</xref> and <xref uid=\"com.azure.security.keyvault.keys.models.KeyBase.notBefore()\" data-throw-if-not-resolved=\"false\">notBefore</xref> values in<code>keyImportOptions \r\n    </code> are optional. If not specified, no values are set for the fields. The <xref uid=\"com.azure.security.keyvault.keys.models.KeyBase.enabled()\" data-throw-if-not-resolved=\"false\">enabled</xref> field is set to true and the <xref uid=\"com.azure.security.keyvault.keys.models.KeyImportOptions.hsm()\" data-throw-if-not-resolved=\"false\">hsm</xref> field is set to false by Azure Key Vault, if they are not specified.</p>\r\n<p>\r\n  <b>Code Samples</b>\r\n</p>\r\n<p>Imports a new key into key vault. Prints out the details of the imported key.</p>\r\n<p>\r\n  <pre>\r\nKeyImportOptions keyImportOptions = new KeyImportOptions(\"keyName\", jsonWebKeyToImport)\r\n  .hsm(true)\r\n  .expires(OffsetDateTime.now().plusDays(60));</pre>\r\n</p>\r\n<p>\r\n  <pre>Key importedKey = keyClient.importKey(keyImportOptions).value();\r\nSystem.out.printf(\"Key is imported with name %s and id %s \\n\", importedKey.name(), importedKey.id());\r\n</pre>\r\n</p>\r\n<p></p>"
  syntax:
    content: public Response<Key> importKey(KeyImportOptions keyImportOptions)
    parameters:
    - id: keyImportOptions
      type: com.azure.security.keyvault.keys.models.KeyImportOptions
      description: <p>The key import configuration object containing information about the json web key being imported. </p>
    return:
      type: com.azure.core.http.rest.Response78504a52com.azure.security.keyvault.keys.models.Keya08ddfce
      description: <p>A <xref uid="" data-throw-if-not-resolved="false">Response</xref> whose <xref uid="com.azure.core.http.rest.Response.value()" data-throw-if-not-resolved="false">value</xref> contains the <xref uid="" data-throw-if-not-resolved="false">imported key</xref>. </p>
  exceptions:
  - type: 17c54119
    description: >-
      <p>if<code>keyImportOptions 

          </code> is<code>null 

          </code> . </p>
  - type: 409de17b
    description: >-
      <p>if<code>name 

          </code> is empty string. </p>
- uid: com.azure.security.keyvault.keys.KeyClient.importKey(String,JsonWebKey)
  id: importKey(String,JsonWebKey)
  parent: com.azure.security.keyvault.keys.KeyClient
  href: com.azure.security.keyvault.keys.KeyClient.yml
  langs:
  - java
  name: importKey(String name, JsonWebKey keyMaterial)
  nameWithType: KeyClient.importKey(String name, JsonWebKey keyMaterial)
  fullName: com.azure.security.keyvault.keys.KeyClient.importKey(String name, JsonWebKey keyMaterial)
  overload: com.azure.security.keyvault.keys.KeyClient.importKey*
  type: Method
  source:
    remote: *o0
    path: sdk/keyvault/azure-keyvault-keys/src/main/java/com/azure/security/keyvault/keys/KeyClient.java
    startLine: 183
  package: com.azure.security.keyvault.keys
  summary: "<p>Imports an externally created key and stores it in key vault. The import key operation may be used to import any key type into the Azure Key Vault. If the named key already exists, Azure Key Vault creates a new version of the key. This operation requires the<code>keys/import \r\n    </code> permission.</p>\r\n<p>\r\n  <b>Code Samples</b>\r\n</p>\r\n<p>Imports a new key into key vault. Prints out the details of the imported key.</p>\r\n<p>\r\n  <pre>\r\nKey importedKey = keyClient.importKey(\"keyName\", jsonWebKeyToImport).value();\r\nSystem.out.printf(\"Key is imported with name %s and id %s \\n\", importedKey.name(), importedKey.id());\r\n</pre>\r\n</p>\r\n<p></p>"
  syntax:
    content: public Response<Key> importKey(String name, JsonWebKey keyMaterial)
    parameters:
    - id: name
      type: "26831127"
      description: <p>The name for the imported key. </p>
    - id: keyMaterial
      type: com.azure.security.keyvault.keys.models.webkey.JsonWebKey
      description: <p>The Json web key being imported. </p>
    return:
      type: com.azure.core.http.rest.Response78504a52com.azure.security.keyvault.keys.models.Keya08ddfce
      description: <p>A <xref uid="" data-throw-if-not-resolved="false">Response</xref> whose <xref uid="com.azure.core.http.rest.Response.value()" data-throw-if-not-resolved="false">value</xref> contains the <xref uid="" data-throw-if-not-resolved="false">imported key</xref>. </p>
  exceptions:
  - type: 409de17b
    description: >-
      <p>if<code>name 

          </code> is empty string. </p>
- uid: com.azure.security.keyvault.keys.KeyClient.listDeletedKeys()
  id: listDeletedKeys()
  parent: com.azure.security.keyvault.keys.KeyClient
  href: com.azure.security.keyvault.keys.KeyClient.yml
  langs:
  - java
  name: listDeletedKeys()
  nameWithType: KeyClient.listDeletedKeys()
  fullName: com.azure.security.keyvault.keys.KeyClient.listDeletedKeys()
  overload: com.azure.security.keyvault.keys.KeyClient.listDeletedKeys*
  type: Method
  source:
    remote: *o0
    path: sdk/keyvault/azure-keyvault-keys/src/main/java/com/azure/security/keyvault/keys/KeyClient.java
    startLine: 502
  package: com.azure.security.keyvault.keys
  summary: "<p>Lists <xref uid=\"\" data-throw-if-not-resolved=\"false\">deleted keys</xref> of the key vault. The deleted keys are retrieved as JSON Web Key structures that contain the public part of a deleted key. The Get Deleted Keys operation is applicable for vaults enabled for soft-delete. This operation requires the<code>keys/list \r\n    </code> permission.</p>\r\n<p>\r\n  <b>Code Samples</b>\r\n</p>\r\n<p>Lists the deleted keys in the key vault and for each deleted key prints out its recovery id.</p>\r\n<p>\r\n  <pre>\r\nfor (DeletedKey deletedKey : keyClient.listDeletedKeys()) {\r\n  System.out.printf(\"Deleted key's recovery Id %s\", deletedKey.recoveryId());\r\n}\r\n</pre>\r\n</p>\r\n<p></p>"
  syntax:
    content: public Iterable<DeletedKey> listDeletedKeys()
    return:
      type: 2a13b5a5com.azure.security.keyvault.keys.models.DeletedKeya08ddfce
      description: <p>A <xref uid="" data-throw-if-not-resolved="false">List</xref> containing all of the <xref uid="" data-throw-if-not-resolved="false">deleted keys</xref> in the vault. </p>
- uid: com.azure.security.keyvault.keys.KeyClient.listKeys()
  id: listKeys()
  parent: com.azure.security.keyvault.keys.KeyClient
  href: com.azure.security.keyvault.keys.KeyClient.yml
  langs:
  - java
  name: listKeys()
  nameWithType: KeyClient.listKeys()
  fullName: com.azure.security.keyvault.keys.KeyClient.listKeys()
  overload: com.azure.security.keyvault.keys.KeyClient.listKeys*
  type: Method
  source:
    remote: *o0
    path: sdk/keyvault/azure-keyvault-keys/src/main/java/com/azure/security/keyvault/keys/KeyClient.java
    startLine: 483
  package: com.azure.security.keyvault.keys
  summary: "<p>List keys in the key vault. Retrieves a list of the keys in the Key Vault as JSON Web Key structures that contain the public part of a stored key. The List operation is applicable to all key types and the individual key response in the list is represented by <xref uid=\"\" data-throw-if-not-resolved=\"false\">KeyBase</xref> as only the base key identifier, attributes and tags are provided in the response. The key material and individual key versions are not listed in the response. This operation requires the<code>keys/list \r\n    </code> permission.</p>\r\n<p>It is possible to get full keys with key material from this information. Loop over the <xref uid=\"\" data-throw-if-not-resolved=\"false\">key</xref> and call <xref uid=\"com.azure.security.keyvault.keys.KeyClient.getKey(KeyBase)\" data-throw-if-not-resolved=\"false\">KeyClient#getKey(KeyBase baseKey)</xref> . This will return the <xref uid=\"\" data-throw-if-not-resolved=\"false\">key</xref> with key material included of its latest version.</p>\r\n<p>\r\n  <pre>\r\nfor (KeyBase key : keyClient.listKeys()) {\r\n  Key keyWithMaterial = keyClient.getKey(key).value();\r\n  System.out.printf(\"Received key with name %s and type %s\", keyWithMaterial.name(), keyWithMaterial.keyMaterial().kty());\r\n}\r\n</pre>\r\n</p>\r\n<p></p>"
  syntax: &o2
    content: public Iterable<KeyBase> listKeys()
    return:
      type: 2a13b5a5com.azure.security.keyvault.keys.models.KeyBasea08ddfce
      description: <p>A <xref uid="" data-throw-if-not-resolved="false">List</xref> containing <xref uid="" data-throw-if-not-resolved="false">key</xref> of all the keys in the vault. </p>
- uid: com.azure.security.keyvault.keys.KeyClient.listKeyVersions(String)
  id: listKeyVersions(String)
  parent: com.azure.security.keyvault.keys.KeyClient
  href: com.azure.security.keyvault.keys.KeyClient.yml
  langs:
  - java
  name: listKeyVersions(String name)
  nameWithType: KeyClient.listKeyVersions(String name)
  fullName: com.azure.security.keyvault.keys.KeyClient.listKeyVersions(String name)
  overload: com.azure.security.keyvault.keys.KeyClient.listKeyVersions*
  type: Method
  source:
    remote: *o0
    path: sdk/keyvault/azure-keyvault-keys/src/main/java/com/azure/security/keyvault/keys/KeyClient.java
    startLine: 520
  package: com.azure.security.keyvault.keys
  summary: "<p>List all versions of the specified key. The individual key response in the flux is represented by <xref uid=\"\" data-throw-if-not-resolved=\"false\">KeyBase</xref> as only the base key identifier, attributes and tags are provided in the response. The key material values are not provided in the response. This operation requires the<code>keys/list \r\n    </code> permission.</p>\r\n<p>It is possible to get full keys with key material for each version from this information. Loop over the <xref uid=\"\" data-throw-if-not-resolved=\"false\">key</xref> and call <xref uid=\"com.azure.security.keyvault.keys.KeyClient.getKey(KeyBase)\" data-throw-if-not-resolved=\"false\">KeyClient#getKey(KeyBase baseKey)</xref> . This will return the <xref uid=\"\" data-throw-if-not-resolved=\"false\">keys</xref> with key material included of the specified versions.</p>\r\n<p>{ com.azure.keyvault.keys.keyclient.listKeyVersions}</p>\r\n<p></p>"
  syntax: &o3
    content: public Iterable<KeyBase> listKeyVersions(String name)
    parameters:
    - id: name
      type: "26831127"
      description: <p>The name of the key. </p>
    return:
      type: 2a13b5a5com.azure.security.keyvault.keys.models.KeyBasea08ddfce
      description: >-
        <p>A <xref uid="" data-throw-if-not-resolved="false">List</xref> containing <xref uid="" data-throw-if-not-resolved="false">key</xref> of all the versions of the specified key in the vault. List is empty if key with<code>name 

            </code> does not exist in key vault. </p>
  exceptions:
  - type: 47b9dbf9
    description: >-
      <p>when a key with<code>name 

          </code> doesn't exist in the key vault. </p>
  - type: 409de17b
    description: >-
      <p>when a key with<code>name 

          </code> is empty string. </p>
- uid: com.azure.security.keyvault.keys.KeyClient.purgeDeletedKey(String)
  id: purgeDeletedKey(String)
  parent: com.azure.security.keyvault.keys.KeyClient
  href: com.azure.security.keyvault.keys.KeyClient.yml
  langs:
  - java
  name: purgeDeletedKey(String name)
  nameWithType: KeyClient.purgeDeletedKey(String name)
  fullName: com.azure.security.keyvault.keys.KeyClient.purgeDeletedKey(String name)
  overload: com.azure.security.keyvault.keys.KeyClient.purgeDeletedKey*
  type: Method
  source:
    remote: *o0
    path: sdk/keyvault/azure-keyvault-keys/src/main/java/com/azure/security/keyvault/keys/KeyClient.java
    startLine: 390
  package: com.azure.security.keyvault.keys
  summary: "<p>Permanently deletes the specified key without the possibility of recovery. The Purge Deleted Key operation is applicable for soft-delete enabled vaults. This operation requires the<code>keys/purge \r\n    </code> permission.</p>\r\n<p>\r\n  <b>Code Samples</b>\r\n</p>\r\n<p>Purges the deleted key from the key vault enabled for soft-delete. Prints out the status code from the server response.</p>\r\n<p>\r\n  <pre>\r\n//Assuming key is deleted on a soft-delete enabled key vault.\r\nVoidResponse purgeResponse = keyClient.purgeDeletedKey(\"deletedKeyName\");\r\nSystem.out.printf(\"Purge Status Code: %rsaPrivateExponent\", purgeResponse.statusCode());\r\n</pre>\r\n</p>\r\n<p></p>"
  syntax:
    content: public VoidResponse purgeDeletedKey(String name)
    parameters:
    - id: name
      type: "26831127"
      description: <p>The name of the deleted key. </p>
    return:
      type: com.azure.core.http.rest.VoidResponse
      description: <p>A <xref uid="" data-throw-if-not-resolved="false">VoidResponse</xref>. </p>
  exceptions:
  - type: 47b9dbf9
    description: >-
      <p>when a key with<code>name 

          </code> doesn't exist in the key vault. </p>
  - type: 409de17b
    description: >-
      <p>when a key with<code>name 

          </code> is empty string. </p>
- uid: com.azure.security.keyvault.keys.KeyClient.recoverDeletedKey(String)
  id: recoverDeletedKey(String)
  parent: com.azure.security.keyvault.keys.KeyClient
  href: com.azure.security.keyvault.keys.KeyClient.yml
  langs:
  - java
  name: recoverDeletedKey(String name)
  nameWithType: KeyClient.recoverDeletedKey(String name)
  fullName: com.azure.security.keyvault.keys.KeyClient.recoverDeletedKey(String name)
  overload: com.azure.security.keyvault.keys.KeyClient.recoverDeletedKey*
  type: Method
  source:
    remote: *o0
    path: sdk/keyvault/azure-keyvault-keys/src/main/java/com/azure/security/keyvault/keys/KeyClient.java
    startLine: 412
  package: com.azure.security.keyvault.keys
  summary: "<p>Recovers the deleted key in the key vault to its latest version and can only be performed on a soft-delete enabled vault. An attempt to recover an non-deleted key will return an error. Consider this the inverse of the delete operation on soft-delete enabled vaults. This operation requires the<code>keys/recover \r\n    </code> permission.</p>\r\n<p>\r\n  <b>Code Samples</b>\r\n</p>\r\n<p>Recovers the deleted key from the key vault enabled for soft-delete.</p>\r\n<p>\r\n  <pre>\r\n//Assuming key is deleted on a soft-delete enabled key vault.\r\nKey recoveredKey =  keyClient.recoverDeletedKey(\"deletedKeyName\").value();\r\nSystem.out.printf(\"Recovered key with name %s\", recoveredKey.name());\r\n</pre>\r\n</p>\r\n<p></p>"
  syntax:
    content: public Response<Key> recoverDeletedKey(String name)
    parameters:
    - id: name
      type: "26831127"
      description: <p>The name of the deleted key to be recovered. </p>
    return:
      type: com.azure.core.http.rest.Response78504a52com.azure.security.keyvault.keys.models.Keya08ddfce
      description: <p>A <xref uid="" data-throw-if-not-resolved="false">Response</xref> whose <xref uid="com.azure.core.http.rest.Response.value()" data-throw-if-not-resolved="false">value</xref> contains the <xref uid="" data-throw-if-not-resolved="false">recovered key</xref>. </p>
  exceptions:
  - type: 47b9dbf9
    description: >-
      <p>when a key with<code>name 

          </code> doesn't exist in the key vault. </p>
  - type: 409de17b
    description: >-
      <p>when a key with<code>name 

          </code> is empty string. </p>
- uid: com.azure.security.keyvault.keys.KeyClient.restoreKey(byte [])
  id: restoreKey(byte [])
  parent: com.azure.security.keyvault.keys.KeyClient
  href: com.azure.security.keyvault.keys.KeyClient.yml
  langs:
  - java
  name: restoreKey(byte[] backup)
  nameWithType: KeyClient.restoreKey(byte[] backup)
  fullName: com.azure.security.keyvault.keys.KeyClient.restoreKey(byte[] backup)
  overload: com.azure.security.keyvault.keys.KeyClient.restoreKey*
  type: Method
  source:
    remote: *o0
    path: sdk/keyvault/azure-keyvault-keys/src/main/java/com/azure/security/keyvault/keys/KeyClient.java
    startLine: 463
  package: com.azure.security.keyvault.keys
  summary: "<p>Restores a backed up key to a vault. Imports a previously backed up key into Azure Key Vault, restoring the key, its key identifier, attributes and access control policies. The restore operation may be used to import a previously backed up key. Individual versions of a key cannot be restored. The key is restored in its entirety with the same key name as it had when it was backed up. If the key name is not available in the target Key Vault, the restore operation will be rejected. While the key name is retained during restore, the final key identifier will change if the key is restored to a different vault. Restore will restore all versions and preserve version identifiers. The restore operation is subject to security constraints: The target Key Vault must be owned by the same Microsoft Azure Subscription as the source Key Vault The user must have restore permission in the target Key Vault. This operation requires the<code>keys/restore \r\n    </code> permission.</p>\r\n<p>\r\n  <b>Code Samples</b>\r\n</p>\r\n<p>Restores the key in the key vault from its backup. Prints out the details of the restored key returned in the response.</p>\r\n<p>\r\n  <pre>\r\n//Pass the Key Backup Byte array to the restore operation.\r\nKeyClient.restoreKey(keyBackupByteArray).subscribe(keyResponse -&gt;\r\n  System.out.printf(\"Restored Key with name %s and id %s \\n\", keyResponse.value().name(), keyResponse.value().id()));\r\n</pre>\r\n</p>\r\n<p></p>"
  syntax:
    content: public Response<Key> restoreKey(byte[] backup)
    parameters:
    - id: backup
      type: ccd9418d
      description: <p>The backup blob associated with the key. </p>
    return:
      type: com.azure.core.http.rest.Response78504a52com.azure.security.keyvault.keys.models.Keya08ddfce
      description: <p>A <xref uid="" data-throw-if-not-resolved="false">Response</xref> whose <xref uid="com.azure.core.http.rest.Response.value()" data-throw-if-not-resolved="false">value</xref> contains the <xref uid="" data-throw-if-not-resolved="false">restored key</xref>. </p>
  exceptions:
  - type: 8eb71202
    description: >-
      <p>when<code>backup 

          </code> blob is malformed. </p>
- uid: com.azure.security.keyvault.keys.KeyClient.updateKey(KeyBase)
  id: updateKey(KeyBase)
  parent: com.azure.security.keyvault.keys.KeyClient
  href: com.azure.security.keyvault.keys.KeyClient.yml
  langs:
  - java
  name: updateKey(KeyBase key)
  nameWithType: KeyClient.updateKey(KeyBase key)
  fullName: com.azure.security.keyvault.keys.KeyClient.updateKey(KeyBase key)
  overload: com.azure.security.keyvault.keys.KeyClient.updateKey*
  type: Method
  source:
    remote: *o0
    path: sdk/keyvault/azure-keyvault-keys/src/main/java/com/azure/security/keyvault/keys/KeyClient.java
    startLine: 299
  package: com.azure.security.keyvault.keys
  summary: "<p>Updates the attributes associated with the specified key, but not the cryptographic key material of the specified key in the key vault. The update operation changes specified attributes of an existing stored key and attributes that are not specified in the request are left unchanged. The cryptographic key material of a key itself cannot be changed. This operation requires the<code>keys/set \r\n    </code> permission.</p>\r\n<p>\r\n  <b>Code Samples</b>\r\n</p>\r\n<p>Gets the latest version of the key, changes its expiry time and the updates the key in the key vault.</p>\r\n<p>\r\n  <pre>\r\nKey key = keyClient.getKey(\"keyName\").value();\r\nkey.expires(OffsetDateTime.now().plusDays(60));\r\nKeyBase updatedKeyBase = keyClient.updateKey(key).value();\r\nKey updatedKey = keyClient.getKey(updatedKeyBase.name()).value();\r\n</pre>\r\n</p>\r\n<p></p>"
  syntax:
    content: public Response<Key> updateKey(KeyBase key)
    parameters:
    - id: key
      type: com.azure.security.keyvault.keys.models.KeyBase
      description: <p>The <xref uid="" data-throw-if-not-resolved="false">base key</xref> object with updated properties. </p>
    return:
      type: com.azure.core.http.rest.Response78504a52com.azure.security.keyvault.keys.models.Keya08ddfce
      description: <p>A <xref uid="" data-throw-if-not-resolved="false">Response</xref> whose <xref uid="com.azure.core.http.rest.Response.value()" data-throw-if-not-resolved="false">value</xref> contains the <xref uid="" data-throw-if-not-resolved="false">updated key</xref>. </p>
  exceptions:
  - type: 17c54119
    description: >-
      <p>if<code>key 

          </code> is<code>null 

          </code> . </p>
  - type: 47b9dbf9
    description: <p>when a key with <xref uid="com.azure.security.keyvault.keys.models.KeyBase.name()" data-throw-if-not-resolved="false">name</xref> and <xref uid="com.azure.security.keyvault.keys.models.KeyBase.version()" data-throw-if-not-resolved="false">version</xref> doesn't exist in the key vault. </p>
  - type: 409de17b
    description: <p>if <xref uid="com.azure.security.keyvault.keys.models.KeyBase.name()" data-throw-if-not-resolved="false">name</xref> or <xref uid="com.azure.security.keyvault.keys.models.KeyBase.version()" data-throw-if-not-resolved="false">version</xref> is empty string. </p>
- uid: com.azure.security.keyvault.keys.KeyClient.updateKey(KeyBase,KeyOperation...)
  id: )
  parent: com.azure.security.keyvault.keys.KeyClient
  href: com.azure.security.keyvault.keys.KeyClient.yml
  langs:
  - java
  name: updateKey(KeyBase key, KeyOperation... keyOperations)
  nameWithType: KeyClient.updateKey(KeyBase key, KeyOperation... keyOperations)
  fullName: com.azure.security.keyvault.keys.KeyClient.updateKey(KeyBase key, KeyOperation... keyOperations)
  overload: com.azure.security.keyvault.keys.KeyClient.updateKey*
  type: Method
  source:
    remote: *o0
    path: sdk/keyvault/azure-keyvault-keys/src/main/java/com/azure/security/keyvault/keys/KeyClient.java
    startLine: 324
  package: com.azure.security.keyvault.keys
  summary: "<p>Updates the attributes and key operations associated with the specified key, but not the cryptographic key material of the specified key in the key vault. The update operation changes specified attributes of an existing stored key and attributes that are not specified in the request are left unchanged. The cryptographic key material of a key itself cannot be changed. This operation requires the<code>keys/set \r\n    </code> permission.</p>\r\n<p>\r\n  <b>Code Samples</b>\r\n</p>\r\n<p>Gets the latest version of the key, changes its expiry time and key operations and the updates the key in the key vault.</p>\r\n<p>\r\n  <pre>\r\nKey key = keyClient.getKey(\"keyName\").value();\r\nkey.expires(OffsetDateTime.now().plusDays(60));\r\nKeyBase updatedKeyBase = keyClient.updateKey(key, KeyOperation.ENCRYPT, KeyOperation.DECRYPT).value();\r\nKey updatedKey = keyClient.getKey(updatedKeyBase.name()).value();\r\n</pre>\r\n</p>\r\n<p></p>"
  syntax:
    content: public Response<Key> updateKey(KeyBase key, KeyOperation... keyOperations)
    parameters:
    - id: key
      type: com.azure.security.keyvault.keys.models.KeyBase
      description: <p>The <xref uid="" data-throw-if-not-resolved="false">base key</xref> object with updated properties. </p>
    - id: keyOperations
      type: d977d63e
      description: <p>The updated key operations to associate with the key. </p>
    return:
      type: com.azure.core.http.rest.Response78504a52com.azure.security.keyvault.keys.models.Keya08ddfce
      description: <p>A <xref uid="" data-throw-if-not-resolved="false">Response</xref> whose <xref uid="com.azure.core.http.rest.Response.value()" data-throw-if-not-resolved="false">value</xref> contains the <xref uid="" data-throw-if-not-resolved="false">updated key</xref>. </p>
  exceptions:
  - type: 17c54119
    description: >-
      <p>if<code>key 

          </code> is<code>null 

          </code> . </p>
  - type: 47b9dbf9
    description: <p>when a key with <xref uid="com.azure.security.keyvault.keys.models.KeyBase.name()" data-throw-if-not-resolved="false">name</xref> and <xref uid="com.azure.security.keyvault.keys.models.KeyBase.version()" data-throw-if-not-resolved="false">version</xref> doesn't exist in the key vault. </p>
  - type: 409de17b
    description: <p>if <xref uid="com.azure.security.keyvault.keys.models.KeyBase.name()" data-throw-if-not-resolved="false">name</xref> or <xref uid="com.azure.security.keyvault.keys.models.KeyBase.version()" data-throw-if-not-resolved="false">version</xref> is empty string. </p>
references:
- uid: 8eb71202
  spec.java:
  - name: ResourceModifiedException
    fullName: ResourceModifiedException
- uid: 409de17b
  spec.java:
  - name: HttpRequestException
    fullName: HttpRequestException
- uid: "26831127"
  spec.java:
  - name: String
    fullName: String
- uid: com.azure.core.http.rest.Response78504a52com.azure.security.keyvault.keys.models.Keya08ddfce
  spec.java:
  - uid: com.azure.core.http.rest.Response
    name: Response
    fullName: com.azure.core.http.rest.Response
    href: com.azure.core.http.rest.Response.yml
  - name: <
    fullName: <
  - uid: com.azure.security.keyvault.keys.models.Key
    name: Key
    fullName: com.azure.security.keyvault.keys.models.Key
    href: com.azure.security.keyvault.keys.models.Key.yml
  - name: '>'
    fullName: '>'
- uid: com.azure.security.keyvault.keys.KeyClient.createKey*
  name: createKey
  nameWithType: KeyClient.createKey
  fullName: com.azure.security.keyvault.keys.KeyClient.createKey
  package: com.azure.security.keyvault.keys
- uid: 17c54119
  spec.java:
  - name: NullPointerException
    fullName: NullPointerException
- uid: com.azure.security.keyvault.keys.KeyClient.createRsaKey*
  name: createRsaKey
  nameWithType: KeyClient.createRsaKey
  fullName: com.azure.security.keyvault.keys.KeyClient.createRsaKey
  package: com.azure.security.keyvault.keys
- uid: com.azure.security.keyvault.keys.KeyClient.createEcKey*
  name: createEcKey
  nameWithType: KeyClient.createEcKey
  fullName: com.azure.security.keyvault.keys.KeyClient.createEcKey
  package: com.azure.security.keyvault.keys
- uid: com.azure.security.keyvault.keys.KeyClient.importKey*
  name: importKey
  nameWithType: KeyClient.importKey
  fullName: com.azure.security.keyvault.keys.KeyClient.importKey
  package: com.azure.security.keyvault.keys
- uid: 47b9dbf9
  spec.java:
  - name: ResourceNotFoundException
    fullName: ResourceNotFoundException
- uid: com.azure.security.keyvault.keys.KeyClient.getKey*
  name: getKey
  nameWithType: KeyClient.getKey
  fullName: com.azure.security.keyvault.keys.KeyClient.getKey
  package: com.azure.security.keyvault.keys
- uid: com.azure.security.keyvault.keys.KeyClient.updateKey*
  name: updateKey
  nameWithType: KeyClient.updateKey
  fullName: com.azure.security.keyvault.keys.KeyClient.updateKey
  package: com.azure.security.keyvault.keys
- uid: d977d63e
  spec.java:
  - name: KeyOperation...
    fullName: KeyOperation...
- uid: com.azure.core.http.rest.Response78504a52com.azure.security.keyvault.keys.models.DeletedKeya08ddfce
  spec.java:
  - uid: com.azure.core.http.rest.Response
    name: Response
    fullName: com.azure.core.http.rest.Response
    href: com.azure.core.http.rest.Response.yml
  - name: <
    fullName: <
  - uid: com.azure.security.keyvault.keys.models.DeletedKey
    name: DeletedKey
    fullName: com.azure.security.keyvault.keys.models.DeletedKey
    href: com.azure.security.keyvault.keys.models.DeletedKey.yml
  - name: '>'
    fullName: '>'
- uid: com.azure.security.keyvault.keys.KeyClient.deleteKey*
  name: deleteKey
  nameWithType: KeyClient.deleteKey
  fullName: com.azure.security.keyvault.keys.KeyClient.deleteKey
  package: com.azure.security.keyvault.keys
- uid: com.azure.security.keyvault.keys.KeyClient.getDeletedKey*
  name: getDeletedKey
  nameWithType: KeyClient.getDeletedKey
  fullName: com.azure.security.keyvault.keys.KeyClient.getDeletedKey
  package: com.azure.security.keyvault.keys
- uid: com.azure.security.keyvault.keys.KeyClient.purgeDeletedKey*
  name: purgeDeletedKey
  nameWithType: KeyClient.purgeDeletedKey
  fullName: com.azure.security.keyvault.keys.KeyClient.purgeDeletedKey
  package: com.azure.security.keyvault.keys
- uid: com.azure.security.keyvault.keys.KeyClient.recoverDeletedKey*
  name: recoverDeletedKey
  nameWithType: KeyClient.recoverDeletedKey
  fullName: com.azure.security.keyvault.keys.KeyClient.recoverDeletedKey
  package: com.azure.security.keyvault.keys
- uid: com.azure.core.http.rest.Response260ad3b5
  spec.java:
  - uid: com.azure.core.http.rest.Response
    name: Response
    fullName: com.azure.core.http.rest.Response
    href: com.azure.core.http.rest.Response.yml
  - name: <byte[]>
    fullName: <byte[]>
- uid: com.azure.security.keyvault.keys.KeyClient.backupKey*
  name: backupKey
  nameWithType: KeyClient.backupKey
  fullName: com.azure.security.keyvault.keys.KeyClient.backupKey
  package: com.azure.security.keyvault.keys
- uid: ccd9418d
  spec.java:
  - name: byte []
    fullName: byte []
- uid: com.azure.security.keyvault.keys.KeyClient.restoreKey*
  name: restoreKey
  nameWithType: KeyClient.restoreKey
  fullName: com.azure.security.keyvault.keys.KeyClient.restoreKey
  package: com.azure.security.keyvault.keys
- uid: 2a13b5a5com.azure.security.keyvault.keys.models.KeyBasea08ddfce
  spec.java:
  - name: Iterable<
    fullName: Iterable<
  - uid: com.azure.security.keyvault.keys.models.KeyBase
    name: KeyBase
    fullName: com.azure.security.keyvault.keys.models.KeyBase
    href: com.azure.security.keyvault.keys.models.KeyBase.yml
  - name: '>'
    fullName: '>'
- uid: com.azure.security.keyvault.keys.KeyClient.listKeys*
  name: listKeys
  nameWithType: KeyClient.listKeys
  fullName: com.azure.security.keyvault.keys.KeyClient.listKeys
  package: com.azure.security.keyvault.keys
- uid: 2a13b5a5com.azure.security.keyvault.keys.models.DeletedKeya08ddfce
  spec.java:
  - name: Iterable<
    fullName: Iterable<
  - uid: com.azure.security.keyvault.keys.models.DeletedKey
    name: DeletedKey
    fullName: com.azure.security.keyvault.keys.models.DeletedKey
    href: com.azure.security.keyvault.keys.models.DeletedKey.yml
  - name: '>'
    fullName: '>'
- uid: com.azure.security.keyvault.keys.KeyClient.listDeletedKeys*
  name: listDeletedKeys
  nameWithType: KeyClient.listDeletedKeys
  fullName: com.azure.security.keyvault.keys.KeyClient.listDeletedKeys
  package: com.azure.security.keyvault.keys
- uid: com.azure.security.keyvault.keys.KeyClient.listKeyVersions*
  name: listKeyVersions
  nameWithType: KeyClient.listKeyVersions
  fullName: com.azure.security.keyvault.keys.KeyClient.listKeyVersions
  package: com.azure.security.keyvault.keys
- uid: com.azure.security.keyvault.keys.KeyAsyncClient
  parent: com.azure.security.keyvault.keys
  href: com.azure.security.keyvault.keys.KeyAsyncClient.yml
  name: KeyAsyncClient
  nameWithType: KeyAsyncClient
  fullName: com.azure.security.keyvault.keys.KeyAsyncClient
  type: Class
  summary: "<p>The KeyAsyncClient provides asynchronous methods to manage <xref uid=\"\" data-throw-if-not-resolved=\"false\">keys</xref> in the Azure Key Vault. The client supports creating, retrieving, updating, deleting, purging, backing up, restoring and listing the <xref uid=\"\" data-throw-if-not-resolved=\"false\">keys</xref>. The client also supports listing <xref uid=\"\" data-throw-if-not-resolved=\"false\">deleted keys</xref> for a soft-delete enabled Azure Key Vault.</p>\r\n<p>\r\n  <b>Samples to construct the async client</b>\r\n</p>\r\n<p>{ com.azure.security.keyvault.keys.async.keyclient.instantiation}</p>\r\n<p></p>"
  syntax:
    content: public class KeyAsyncClient
- uid: com.azure.core.http.rest.Response
  parent: com.azure.core.http.rest
  href: com.azure.core.http.rest.Response.yml
  name: Response<T>
  nameWithType: Response<T>
  fullName: com.azure.core.http.rest.Response<T>
  type: Interface
  summary: "<p>REST response with a strongly-typed content specified.</p>\r\n<p></p>"
  syntax:
    content: public interface Response<T>
    typeParameters:
    - id: T
      type: 8ce1ecb9
      description: <p>The deserialized type of the response content, available from <xref uid="com.azure.core.http.rest.Response.value()" data-throw-if-not-resolved="false">value()</xref>. </p>
- uid: com.azure.security.keyvault.keys.models.Key
  parent: com.azure.security.keyvault.keys.models
  href: com.azure.security.keyvault.keys.models.Key.yml
  name: Key
  nameWithType: Key
  fullName: com.azure.security.keyvault.keys.models.Key
  type: Class
  syntax:
    content: public class Key extends KeyBase
- uid: com.azure.security.keyvault.keys.models.webkey.KeyType
  parent: com.azure.security.keyvault.keys.models.webkey
  href: com.azure.security.keyvault.keys.models.webkey.KeyType.yml
  name: KeyType
  nameWithType: KeyType
  fullName: com.azure.security.keyvault.keys.models.webkey.KeyType
  type: Enum
  summary: "<p>Defines values for KeyType. </p>"
  syntax:
    content: public enum KeyType
- uid: com.azure.core.http.rest.Response.value()
  parent: com.azure.core.http.rest.Response
  href: com.azure.core.http.rest.Response.yml
  name: value()
  nameWithType: Response<T>.value()
  fullName: com.azure.core.http.rest.Response<T>.value()
  type: Method
  syntax:
    content: public T value()
    return:
      type: 8ce1ecb9
      description: <p>the deserialized value of the HTTP response. </p>
- uid: com.azure.security.keyvault.keys.models.KeyCreateOptions
  parent: com.azure.security.keyvault.keys.models
  href: com.azure.security.keyvault.keys.models.KeyCreateOptions.yml
  name: KeyCreateOptions
  nameWithType: KeyCreateOptions
  fullName: com.azure.security.keyvault.keys.models.KeyCreateOptions
  type: Class
  syntax:
    content: public class KeyCreateOptions
- uid: com.azure.security.keyvault.keys.models.KeyCreateOptions.expires()
  parent: com.azure.security.keyvault.keys.models.KeyCreateOptions
  href: com.azure.security.keyvault.keys.models.KeyCreateOptions.yml
  name: expires()
  nameWithType: KeyCreateOptions.expires()
  fullName: com.azure.security.keyvault.keys.models.KeyCreateOptions.expires()
  type: Method
  summary: "<p>Get the Key Expiry time in UTC.</p>\r\n<p></p>"
  syntax:
    content: public OffsetDateTime expires()
    return:
      type: 583ea9ea
      description: <p>the expires UTC time. </p>
- uid: com.azure.security.keyvault.keys.models.KeyCreateOptions.notBefore()
  parent: com.azure.security.keyvault.keys.models.KeyCreateOptions
  href: com.azure.security.keyvault.keys.models.KeyCreateOptions.yml
  name: notBefore()
  nameWithType: KeyCreateOptions.notBefore()
  fullName: com.azure.security.keyvault.keys.models.KeyCreateOptions.notBefore()
  type: Method
  summary: "<p>Get the notBefore UTC time.</p>\r\n<p></p>"
  syntax:
    content: public OffsetDateTime notBefore()
    return:
      type: 583ea9ea
      description: <p>the notBefore UTC time. </p>
- uid: com.azure.security.keyvault.keys.models.KeyCreateOptions.enabled()
  parent: com.azure.security.keyvault.keys.models.KeyCreateOptions
  href: com.azure.security.keyvault.keys.models.KeyCreateOptions.yml
  name: enabled()
  nameWithType: KeyCreateOptions.enabled()
  fullName: com.azure.security.keyvault.keys.models.KeyCreateOptions.enabled()
  type: Method
  summary: "<p>Get the enabled value.</p>\r\n<p></p>"
  syntax:
    content: public Boolean enabled()
    return:
      type: 866c2227
      description: <p>the enabled value </p>
- uid: com.azure.security.keyvault.keys.models.KeyCreateOptions.keyType()
  parent: com.azure.security.keyvault.keys.models.KeyCreateOptions
  href: com.azure.security.keyvault.keys.models.KeyCreateOptions.yml
  name: keyType()
  nameWithType: KeyCreateOptions.keyType()
  fullName: com.azure.security.keyvault.keys.models.KeyCreateOptions.keyType()
  type: Method
  summary: "<p>Get the key type.</p>\r\n<p></p>"
  syntax:
    content: public KeyType keyType()
    return:
      type: com.azure.security.keyvault.keys.models.webkey.KeyType
      description: <p>the key type. </p>
- uid: com.azure.security.keyvault.keys.models.RsaKeyCreateOptions
  parent: com.azure.security.keyvault.keys.models
  href: com.azure.security.keyvault.keys.models.RsaKeyCreateOptions.yml
  name: RsaKeyCreateOptions
  nameWithType: RsaKeyCreateOptions
  fullName: com.azure.security.keyvault.keys.models.RsaKeyCreateOptions
  type: Class
  syntax:
    content: public class RsaKeyCreateOptions
- uid: com.azure.security.keyvault.keys.models.RsaKeyCreateOptions.keySize()
  parent: com.azure.security.keyvault.keys.models.RsaKeyCreateOptions
  href: com.azure.security.keyvault.keys.models.RsaKeyCreateOptions.yml
  name: keySize()
  nameWithType: RsaKeyCreateOptions.keySize()
  fullName: com.azure.security.keyvault.keys.models.RsaKeyCreateOptions.keySize()
  type: Method
  summary: "<p>Get the keySize value.</p>\r\n<p></p>"
  syntax:
    content: public Integer keySize()
    return:
      type: 08effaa0
      description: <p>the keySize value </p>
- uid: com.azure.security.keyvault.keys.models.EcKeyCreateOptions
  parent: com.azure.security.keyvault.keys.models
  href: com.azure.security.keyvault.keys.models.EcKeyCreateOptions.yml
  name: EcKeyCreateOptions
  nameWithType: EcKeyCreateOptions
  fullName: com.azure.security.keyvault.keys.models.EcKeyCreateOptions
  type: Class
  syntax:
    content: public class EcKeyCreateOptions extends KeyCreateOptions
- uid: com.azure.security.keyvault.keys.models.EcKeyCreateOptions.curve()
  parent: com.azure.security.keyvault.keys.models.EcKeyCreateOptions
  href: com.azure.security.keyvault.keys.models.EcKeyCreateOptions.yml
  name: curve()
  nameWithType: EcKeyCreateOptions.curve()
  fullName: com.azure.security.keyvault.keys.models.EcKeyCreateOptions.curve()
  type: Method
  summary: "<p>Get the curve.</p>\r\n<p></p>"
  syntax:
    content: public KeyCurveName curve()
    return:
      type: com.azure.security.keyvault.keys.models.webkey.KeyCurveName
      description: <p>the curve. </p>
- uid: com.azure.security.keyvault.keys.models.webkey.JsonWebKey
  parent: com.azure.security.keyvault.keys.models.webkey
  href: com.azure.security.keyvault.keys.models.webkey.JsonWebKey.yml
  name: JsonWebKey
  nameWithType: JsonWebKey
  fullName: com.azure.security.keyvault.keys.models.webkey.JsonWebKey
  type: Class
  summary: "<p>As of <a href=\"http://tools.ietf.org/html/draft-ietf-jose-json-web-key-18\">http://tools.ietf.org/html/draft-ietf-jose-json-web-key-18</a>. </p>"
  syntax:
    content: public class JsonWebKey
- uid: com.azure.security.keyvault.keys.models.KeyImportOptions
  parent: com.azure.security.keyvault.keys.models
  href: com.azure.security.keyvault.keys.models.KeyImportOptions.yml
  name: KeyImportOptions
  nameWithType: KeyImportOptions
  fullName: com.azure.security.keyvault.keys.models.KeyImportOptions
  type: Class
  syntax:
    content: public class KeyImportOptions
- uid: com.azure.security.keyvault.keys.models.KeyBase.name()
  parent: com.azure.security.keyvault.keys.models.KeyBase
  href: com.azure.security.keyvault.keys.models.KeyBase.yml
  name: name()
  nameWithType: KeyBase.name()
  fullName: com.azure.security.keyvault.keys.models.KeyBase.name()
  type: Method
  summary: "<p>Get the key name.</p>\r\n<p></p>"
  syntax:
    content: public String name()
    return:
      type: "26831127"
      description: <p>the name of the key. </p>
- uid: com.azure.security.keyvault.keys.models.KeyImportOptions.keyMaterial()
  parent: com.azure.security.keyvault.keys.models.KeyImportOptions
  href: com.azure.security.keyvault.keys.models.KeyImportOptions.yml
  name: keyMaterial()
  nameWithType: KeyImportOptions.keyMaterial()
  fullName: com.azure.security.keyvault.keys.models.KeyImportOptions.keyMaterial()
  type: Method
  summary: "<p>Get the key material of the key being imported. </p>"
  syntax:
    content: public JsonWebKey keyMaterial()
    return:
      type: com.azure.security.keyvault.keys.models.webkey.JsonWebKey
      description: <p>the key material. </p>
- uid: com.azure.security.keyvault.keys.models.KeyBase.expires()
  parent: com.azure.security.keyvault.keys.models.KeyBase
  href: com.azure.security.keyvault.keys.models.KeyBase.yml
  name: expires()
  nameWithType: KeyBase.expires()
  fullName: com.azure.security.keyvault.keys.models.KeyBase.expires()
  type: Method
  summary: "<p>Get the Key Expiry time in UTC.</p>\r\n<p></p>"
  syntax:
    content: public OffsetDateTime expires()
    return:
      type: 583ea9ea
      description: <p>the expires UTC time. </p>
- uid: com.azure.security.keyvault.keys.models.KeyBase.notBefore()
  parent: com.azure.security.keyvault.keys.models.KeyBase
  href: com.azure.security.keyvault.keys.models.KeyBase.yml
  name: notBefore()
  nameWithType: KeyBase.notBefore()
  fullName: com.azure.security.keyvault.keys.models.KeyBase.notBefore()
  type: Method
  summary: "<p>Get the notBefore UTC time.</p>\r\n<p></p>"
  syntax:
    content: public OffsetDateTime notBefore()
    return:
      type: 583ea9ea
      description: <p>the notBefore UTC time. </p>
- uid: com.azure.security.keyvault.keys.models.KeyBase.enabled()
  parent: com.azure.security.keyvault.keys.models.KeyBase
  href: com.azure.security.keyvault.keys.models.KeyBase.yml
  name: enabled()
  nameWithType: KeyBase.enabled()
  fullName: com.azure.security.keyvault.keys.models.KeyBase.enabled()
  type: Method
  summary: "<p>Get the enabled value.</p>\r\n<p></p>"
  syntax:
    content: public Boolean enabled()
    return:
      type: 866c2227
      description: <p>the enabled value </p>
- uid: com.azure.security.keyvault.keys.models.KeyImportOptions.hsm()
  parent: com.azure.security.keyvault.keys.models.KeyImportOptions
  href: com.azure.security.keyvault.keys.models.KeyImportOptions.yml
  name: hsm()
  nameWithType: KeyImportOptions.hsm()
  fullName: com.azure.security.keyvault.keys.models.KeyImportOptions.hsm()
  type: Method
  summary: "<p>Get the hsm value of the key being imported. </p>"
  syntax:
    content: public Boolean hsm()
    return:
      type: 866c2227
      description: <p>the hsm value. </p>
- uid: com.azure.security.keyvault.keys.KeyClient.getKey(String)
  parent: com.azure.security.keyvault.keys.KeyClient
  href: com.azure.security.keyvault.keys.KeyClient.yml
  name: getKey(String name)
  nameWithType: KeyClient.getKey(String name)
  fullName: com.azure.security.keyvault.keys.KeyClient.getKey(String name)
  type: Method
  summary: "<p>Get the public part of the latest version of the specified key from the key vault. The get key operation is applicable to all key types and it requires the<code>keys/get \r\n    </code> permission.</p>\r\n<p>\r\n  <b>Code Samples</b>\r\n</p>\r\n<p>Gets the latest version of the key in the key vault. Prints out the details of the returned key.</p>\r\n<p>\r\n  <pre>\r\nKey key = keyClient.getKey(\"keyName\").value();\r\nSystem.out.printf(\"Key is returned with name %s and id %s \\n\", key.name(), key.value().id());\r\n</pre>\r\n</p>\r\n<p></p>"
  syntax: *o1
- uid: com.azure.security.keyvault.keys.models.KeyBase
  parent: com.azure.security.keyvault.keys.models
  href: com.azure.security.keyvault.keys.models.KeyBase.yml
  name: KeyBase
  nameWithType: KeyBase
  fullName: com.azure.security.keyvault.keys.models.KeyBase
  type: Class
  syntax:
    content: public class KeyBase
- uid: com.azure.security.keyvault.keys.KeyClient.listKeys()
  parent: com.azure.security.keyvault.keys.KeyClient
  href: com.azure.security.keyvault.keys.KeyClient.yml
  name: listKeys()
  nameWithType: KeyClient.listKeys()
  fullName: com.azure.security.keyvault.keys.KeyClient.listKeys()
  type: Method
  summary: "<p>List keys in the key vault. Retrieves a list of the keys in the Key Vault as JSON Web Key structures that contain the public part of a stored key. The List operation is applicable to all key types and the individual key response in the list is represented by <xref uid=\"\" data-throw-if-not-resolved=\"false\">KeyBase</xref> as only the base key identifier, attributes and tags are provided in the response. The key material and individual key versions are not listed in the response. This operation requires the<code>keys/list \r\n    </code> permission.</p>\r\n<p>It is possible to get full keys with key material from this information. Loop over the <xref uid=\"\" data-throw-if-not-resolved=\"false\">key</xref> and call <xref uid=\"com.azure.security.keyvault.keys.KeyClient.getKey(KeyBase)\" data-throw-if-not-resolved=\"false\">KeyClient#getKey(KeyBase baseKey)</xref> . This will return the <xref uid=\"\" data-throw-if-not-resolved=\"false\">key</xref> with key material included of its latest version.</p>\r\n<p>\r\n  <pre>\r\nfor (KeyBase key : keyClient.listKeys()) {\r\n  Key keyWithMaterial = keyClient.getKey(key).value();\r\n  System.out.printf(\"Received key with name %s and type %s\", keyWithMaterial.name(), keyWithMaterial.keyMaterial().kty());\r\n}\r\n</pre>\r\n</p>\r\n<p></p>"
  syntax: *o2
- uid: com.azure.security.keyvault.keys.KeyClient.listKeyVersions(String)
  parent: com.azure.security.keyvault.keys.KeyClient
  href: com.azure.security.keyvault.keys.KeyClient.yml
  name: listKeyVersions(String name)
  nameWithType: KeyClient.listKeyVersions(String name)
  fullName: com.azure.security.keyvault.keys.KeyClient.listKeyVersions(String name)
  type: Method
  summary: "<p>List all versions of the specified key. The individual key response in the flux is represented by <xref uid=\"\" data-throw-if-not-resolved=\"false\">KeyBase</xref> as only the base key identifier, attributes and tags are provided in the response. The key material values are not provided in the response. This operation requires the<code>keys/list \r\n    </code> permission.</p>\r\n<p>It is possible to get full keys with key material for each version from this information. Loop over the <xref uid=\"\" data-throw-if-not-resolved=\"false\">key</xref> and call <xref uid=\"com.azure.security.keyvault.keys.KeyClient.getKey(KeyBase)\" data-throw-if-not-resolved=\"false\">KeyClient#getKey(KeyBase baseKey)</xref> . This will return the <xref uid=\"\" data-throw-if-not-resolved=\"false\">keys</xref> with key material included of the specified versions.</p>\r\n<p>{ com.azure.keyvault.keys.keyclient.listKeyVersions}</p>\r\n<p></p>"
  syntax: *o3
- uid: com.azure.security.keyvault.keys.models.KeyBase.version()
  parent: com.azure.security.keyvault.keys.models.KeyBase
  href: com.azure.security.keyvault.keys.models.KeyBase.yml
  name: version()
  nameWithType: KeyBase.version()
  fullName: com.azure.security.keyvault.keys.models.KeyBase.version()
  type: Method
  summary: "<p>Get the version of the key.</p>\r\n<p></p>"
  syntax:
    content: public String version()
    return:
      type: "26831127"
      description: <p>the version of the key. </p>
- uid: com.azure.security.keyvault.keys.models.DeletedKey
  parent: com.azure.security.keyvault.keys.models
  href: com.azure.security.keyvault.keys.models.DeletedKey.yml
  name: DeletedKey
  nameWithType: DeletedKey
  fullName: com.azure.security.keyvault.keys.models.DeletedKey
  type: Class
  syntax:
    content: public class DeletedKey extends KeyBase
- uid: com.azure.core.http.rest.VoidResponse
  parent: com.azure.core.http.rest
  href: com.azure.core.http.rest.VoidResponse.yml
  name: VoidResponse
  nameWithType: VoidResponse
  fullName: com.azure.core.http.rest.VoidResponse
  type: Class
  summary: "<p>REST response containing only a status code and raw headers. </p>"
  syntax:
    content: public class VoidResponse
- uid: com.azure.security.keyvault.keys.KeyClient.getKey(KeyBase)
  parent: com.azure.security.keyvault.keys.KeyClient
  href: com.azure.security.keyvault.keys.KeyClient.yml
  name: getKey(KeyBase keyBase)
  nameWithType: KeyClient.getKey(KeyBase keyBase)
  fullName: com.azure.security.keyvault.keys.KeyClient.getKey(KeyBase keyBase)
  type: Method
  summary: "<p>Get public part of the key which represents <xref uid=\"\" data-throw-if-not-resolved=\"false\">keyBase</xref> from the key vault. The get key operation is applicable to all key types and it requires the<code>keys/get \r\n    </code> permission.</p>\r\n<p>The list operations <xref uid=\"com.azure.security.keyvault.keys.KeyClient.listKeys()\" data-throw-if-not-resolved=\"false\">KeyClient#listKeys()</xref> and <xref uid=\"com.azure.security.keyvault.keys.KeyClient.listKeyVersions(String)\" data-throw-if-not-resolved=\"false\">KeyClient#listKeyVersions(String)</xref> return the <xref uid=\"\" data-throw-if-not-resolved=\"false\">List</xref> containing <xref uid=\"\" data-throw-if-not-resolved=\"false\">base key</xref> as output excluding the key material of the key. This operation can then be used to get the full key with its key material from<code>keyBase \r\n    </code> . </p>\r\n<p>\r\n  <pre>\r\nkeyClient.listKeys().stream().map(keyClient::getKey).forEach(keyResponse -&gt;\r\n  System.out.printf(\"Key is returned with name %s and id %s \\n\", keyResponse.value().name(), keyResponse.value().id()));\r\n</pre>\r\n</p>\r\n<p></p>"
  syntax: *o4
