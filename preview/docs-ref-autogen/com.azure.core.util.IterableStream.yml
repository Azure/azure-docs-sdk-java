### YamlMime:JavaType
uid: "com.azure.core.util.IterableStream"
fullName: "com.azure.core.util.IterableStream<T>"
name: "IterableStream<T>"
nameWithType: "IterableStream<T>"
summary: "This class provides utility to iterate over values using standard 'for-each' style loops or to convert them into a <xref uid=\"java.util.stream.Stream\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Stream\"></xref> and operate in that fashion."
inheritances:
- "<xref href=\"java.lang.Object?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
inheritedMembers:
- "java.lang.Object.clone()"
- "java.lang.Object.equals(java.lang.Object)"
- "java.lang.Object.finalize()"
- "java.lang.Object.getClass()"
- "java.lang.Object.hashCode()"
- "java.lang.Object.notify()"
- "java.lang.Object.notifyAll()"
- "java.lang.Object.toString()"
- "java.lang.Object.wait()"
- "java.lang.Object.wait(long)"
- "java.lang.Object.wait(long,int)"
syntax: "public class IterableStream<T> implements Iterable<T>"
constructors:
- uid: "com.azure.core.util.IterableStream.IterableStream(java.lang.Iterable<T>)"
  fullName: "com.azure.core.util.IterableStream<T>.IterableStream(Iterable<T> iterable)"
  name: "IterableStream(Iterable<T> iterable)"
  nameWithType: "IterableStream<T>.IterableStream(Iterable<T> iterable)"
  summary: "Creates an instance with the given <xref uid=\"java.lang.Iterable\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Iterable\"></xref>."
  parameters:
  - description: "Collection of items to iterate over."
    name: "iterable"
    type: "<xref href=\"java.lang.Iterable?alt=java.lang.Iterable&text=Iterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public IterableStream(Iterable<T> iterable)"
  desc: "Creates an instance with the given <xref uid=\"java.lang.Iterable\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Iterable\"></xref>."
- uid: "com.azure.core.util.IterableStream.IterableStream(reactor.core.publisher.Flux<T>)"
  fullName: "com.azure.core.util.IterableStream<T>.IterableStream(Flux<T> flux)"
  name: "IterableStream(Flux<T> flux)"
  nameWithType: "IterableStream<T>.IterableStream(Flux<T> flux)"
  summary: "Creates an instance with the given <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Flux\"></xref>."
  parameters:
  - description: "Flux of items to iterate over."
    name: "flux"
    type: "<xref href=\"reactor.core.publisher.Flux?alt=reactor.core.publisher.Flux&text=Flux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public IterableStream(Flux<T> flux)"
  desc: "Creates an instance with the given <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Flux\"></xref>."
methods:
- uid: "com.azure.core.util.IterableStream.<T>of(java.lang.Iterable<T>)"
  fullName: "com.azure.core.util.IterableStream<T>.<T>of(Iterable<T> iterable)"
  name: "<T>of(Iterable<T> iterable)"
  nameWithType: "IterableStream<T>.<T>of(Iterable<T> iterable)"
  summary: "Creates an <xref uid=\"com.azure.core.util.IterableStream\" data-throw-if-not-resolved=\"false\" data-raw-source=\"IterableStream\"></xref> from an <xref uid=\"java.lang.Iterable\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Iterable\"></xref>."
  modifiers:
  - "static"
  parameters:
  - description: "Collection of items to iterate over."
    name: "iterable"
    type: "<xref href=\"java.lang.Iterable?alt=java.lang.Iterable&text=Iterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public static IterableStream<T> <T>of(Iterable<T> iterable)"
  desc: "Creates an <xref uid=\"com.azure.core.util.IterableStream\" data-throw-if-not-resolved=\"false\" data-raw-source=\"IterableStream\"></xref> from an <xref uid=\"java.lang.Iterable\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Iterable\"></xref>.\n\nAn empty <xref uid=\"com.azure.core.util.IterableStream\" data-throw-if-not-resolved=\"false\" data-raw-source=\"IterableStream\"></xref> will be returned if the input iterable is `null`."
  returns:
    description: "An <xref uid=\"com.azure.core.util.IterableStream\" data-throw-if-not-resolved=\"false\" data-raw-source=\"IterableStream\"></xref> based on the passed collection."
    type: "<xref href=\"com.azure.core.util.IterableStream?alt=com.azure.core.util.IterableStream&text=IterableStream\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.core.util.IterableStream.iterator()"
  fullName: "com.azure.core.util.IterableStream<T>.iterator()"
  name: "iterator()"
  nameWithType: "IterableStream<T>.iterator()"
  summary: "Utility function to provide <xref uid=\"java.util.Iterator\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Iterator\"></xref> of value `T`."
  syntax: "public Iterator<T> iterator()"
  desc: "Utility function to provide <xref uid=\"java.util.Iterator\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Iterator\"></xref> of value `T`."
  returns:
    description: "<xref uid=\"java.util.Iterator\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Iterator\"></xref> of value <code>T</code>."
    type: "<xref href=\"java.util.Iterator?alt=java.util.Iterator&text=Iterator\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.core.util.IterableStream.stream()"
  fullName: "com.azure.core.util.IterableStream<T>.stream()"
  name: "stream()"
  nameWithType: "IterableStream<T>.stream()"
  summary: "Utility function to provide <xref uid=\"java.util.stream.Stream\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Stream\"></xref> of value `T`."
  syntax: "public Stream<T> stream()"
  desc: "Utility function to provide <xref uid=\"java.util.stream.Stream\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Stream\"></xref> of value `T`."
  returns:
    description: "<xref uid=\"java.util.stream.Stream\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Stream\"></xref> of value <code>T</code>."
    type: "<xref href=\"java.util.stream.Stream?alt=java.util.stream.Stream&text=Stream\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
type: "class"
typeParameters:
- description: "The type of value in this <xref uid=\"Iterable\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Iterable\"></xref>."
  name: "T"
desc: "This class provides utility to iterate over values using standard 'for-each' style loops or to convert them into a <xref uid=\"java.util.stream.Stream\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Stream\"></xref> and operate in that fashion.\n\n**Code sample using Stream**\n\n```java\n// process the stream\n myIterableStream.stream().forEach(resp -> {\n     if (resp.getStatusCode() == HttpURLConnection.HTTP_OK) {\n         System.out.printf(\"Response headers are %s. Url %s%n\", resp.getDeserializedHeaders(),\n             resp.getRequest().getUrl());\n         resp.getElements().forEach(value -> System.out.printf(\"Response value is %d%n\", value));\n     }\n });\n```\n\n**Code sample using Iterator**\n\n```java\n// Iterate over iterator\n for (PagedResponseBase<String, Integer> resp : myIterableStream) {\n     if (resp.getStatusCode() == HttpURLConnection.HTTP_OK) {\n         System.out.printf(\"Response headers are %s. Url %s%n\", resp.getDeserializedHeaders(),\n             resp.getRequest().getUrl());\n         resp.getElements().forEach(value -> System.out.printf(\"Response value is %d%n\", value));\n     }\n }\n```\n\n**Code sample using Stream and filter**\n\n```java\n// process the stream\n myIterableStream.stream().filter(resp -> resp.getStatusCode() == HttpURLConnection.HTTP_OK)\n     .limit(10)\n     .forEach(resp -> {\n         System.out.printf(\"Response headers are %s. Url %s%n\", resp.getDeserializedHeaders(),\n             resp.getRequest().getUrl());\n         resp.getElements().forEach(value -> System.out.printf(\"Response value is %d%n\", value));\n     });\n```"
implements:
- "<xref href=\"java.lang.Iterable?alt=java.lang.Iterable&text=Iterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
metadata: {}
package: "com.azure.core.util"
artifact: com.azure:azure-core:1.22.0-beta.1
