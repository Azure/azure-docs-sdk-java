### YamlMime:JavaType
uid: "com.azure.core.util.IterableStream"
fullName: "com.azure.core.util.IterableStream<T>"
name: "IterableStream<T>"
nameWithType: "IterableStream<T>"
summary: "This class provides utility to iterate over values using standard 'for-each' style loops, or to convert them into a Stream and operate in that fashion. All the values are preserved even if they are traversed multiple times.\n\n**Code sample using Stream**\n\n\\{@codesnippet com.azure.core.util.iterableStream.stream\\}\n\n**Code sample using Iterator**\n\n\\{@codesnippet com.azure.core.util.iterableStream.iterator.while\\}\n\n**Code sample using Stream and filter**\n\n\\{@codesnippet com.azure.core.util.iterableStream.stream.filter\\}"
inheritances:
- "<xref href=\"java.lang.Object\" data-throw-if-not-resolved=\"False\" />"
inheritedMembers:
- "java.lang.Object.clone()"
- "java.lang.Object.equals(java.lang.Object)"
- "java.lang.Object.finalize()"
- "java.lang.Object.getClass()"
- "java.lang.Object.hashCode()"
- "java.lang.Object.notify()"
- "java.lang.Object.notifyAll()"
- "java.lang.Object.toString()"
- "java.lang.Object.wait()"
- "java.lang.Object.wait(long)"
- "java.lang.Object.wait(long,int)"
syntax: "public class IterableStream<T> implements Iterable<T>"
constructors:
- "com.azure.core.util.IterableStream.IterableStream(java.lang.Iterable<T>)"
- "com.azure.core.util.IterableStream.IterableStream(reactor.core.publisher.Flux<T>)"
methods:
- "com.azure.core.util.IterableStream.<T>of(java.lang.Iterable<T>)"
- "com.azure.core.util.IterableStream.iterator()"
- "com.azure.core.util.IterableStream.stream()"
type: "class"
typeParameters:
- name: "T"
implements:
- "<xref href=\"java.lang.Iterable?alt=java.lang.Iterable&text=Iterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
metadata: {}
package: "com.azure.core.util"
artifact: com.azure:azure-core:1.3.0-beta.1
