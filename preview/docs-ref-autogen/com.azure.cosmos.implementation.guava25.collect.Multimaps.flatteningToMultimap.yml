### YamlMime:JavaMember
uid: "com.azure.cosmos.implementation.guava25.collect.Multimaps.flatteningToMultimap*"
fullName: "com.azure.cosmos.implementation.guava25.collect.Multimaps.<T,K,V,M>flatteningToMultimap"
name: "<T,K,V,M>flatteningToMultimap"
nameWithType: "Multimaps.<T,K,V,M>flatteningToMultimap"
members:
- uid: "com.azure.cosmos.implementation.guava25.collect.Multimaps.<T,K,V,M>flatteningToMultimap(java.util.function.Function<? super T,? extends K>,java.util.function.Function<? super T,? extends java.util.stream.Stream<? extends V>>,java.util.function.Supplier<M>)"
  fullName: "com.azure.cosmos.implementation.guava25.collect.Multimaps.<T,K,V,M>flatteningToMultimap(Function<? super T,? extends K> keyFunction, Function<? super T,? extends Stream<? extends V>> valueFunction, Supplier<M> multimapSupplier)"
  name: "<T,K,V,M>flatteningToMultimap(Function<? super T,? extends K> keyFunction, Function<? super T,? extends Stream<? extends V>> valueFunction, Supplier<M> multimapSupplier)"
  nameWithType: "Multimaps.<T,K,V,M>flatteningToMultimap(Function<? super T,? extends K> keyFunction, Function<? super T,? extends Stream<? extends V>> valueFunction, Supplier<M> multimapSupplier)"
  summary: "Returns a `Collector` accumulating entries into a `Multimap` generated from the specified supplier. Each input element is mapped to a key and a stream of values, each of which are put into the resulting `Multimap`, in the encounter order of the stream and the encounter order of the streams of values.\n\nExample:\n\n```java\nstatic final ListMultimap FIRST_LETTER_MULTIMAP =\n     Stream.of(\"banana\", \"apple\", \"carrot\", \"asparagus\", \"cherry\")\n         .collect(\n             flatteningToMultimap(\n                  str -> str.charAt(0),\n                  str -> str.substring(1).chars().mapToObj(c -> (char) c),\n                  MultimapBuilder.linkedHashKeys().arrayListValues()::build));\n\n // is equivalent to\n\n static final ListMultimap FIRST_LETTER_MULTIMAP;\n\n static {\n     FIRST_LETTER_MULTIMAP = MultimapBuilder.linkedHashKeys().arrayListValues().build();\n     FIRST_LETTER_MULTIMAP.putAll('b', Arrays.asList('a', 'n', 'a', 'n', 'a'));\n     FIRST_LETTER_MULTIMAP.putAll('a', Arrays.asList('p', 'p', 'l', 'e'));\n     FIRST_LETTER_MULTIMAP.putAll('c', Arrays.asList('a', 'r', 'r', 'o', 't'));\n     FIRST_LETTER_MULTIMAP.putAll('a', Arrays.asList('s', 'p', 'a', 'r', 'a', 'g', 'u', 's'));\n     FIRST_LETTER_MULTIMAP.putAll('c', Arrays.asList('h', 'e', 'r', 'r', 'y'));\n }\n```"
  parameters:
  - name: "keyFunction"
    type: "<xref href=\"java.util.function.Function?alt=java.util.function.Function&text=Function\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"? super T?alt=? super T&text=? super T\" data-throw-if-not-resolved=\"False\" />,<xref href=\"? extends K?alt=? extends K&text=? extends K\" data-throw-if-not-resolved=\"False\" />&gt;"
  - name: "valueFunction"
    type: "<xref href=\"java.util.function.Function?alt=java.util.function.Function&text=Function\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"? super T?alt=? super T&text=? super T\" data-throw-if-not-resolved=\"False\" />,<xref href=\"? extends java.util.stream.Stream?alt=? extends java.util.stream.Stream&text=Stream\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"? extends V?alt=? extends V&text=? extends V\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
  - name: "multimapSupplier"
    type: "<xref href=\"java.util.function.Supplier?alt=java.util.function.Supplier&text=Supplier\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"M?alt=M&text=M\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public static Collector<T,?,M> <T,K,V,M>flatteningToMultimap(Function<? super T,? extends K> keyFunction, Function<? super T,? extends Stream<? extends V>> valueFunction, Supplier<M> multimapSupplier)"
  returns:
    type: "<xref href=\"java.util.stream.Collector?alt=java.util.stream.Collector&text=Collector\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />,?,<xref href=\"M?alt=M&text=M\" data-throw-if-not-resolved=\"False\" />&gt;"
type: "method"
metadata: {}
package: "com.azure.cosmos.implementation.guava25.collect"
artifact: com.azure:azure-cosmos:4.4.0-beta.1
