### YamlMime:ManagedReference
items:
- uid: org.apache.commons.codec.binary.BaseNCodecInputStream
  id: BaseNCodecInputStream
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.apache.commons.codec.binary
  children:
  - org.apache.commons.codec.binary.BaseNCodecInputStream.BaseNCodecInputStream(java.io.InputStream,org.apache.commons.codec.binary.BaseNCodec,boolean)
  - org.apache.commons.codec.binary.BaseNCodecInputStream.available()
  - org.apache.commons.codec.binary.BaseNCodecInputStream.mark(int)
  - org.apache.commons.codec.binary.BaseNCodecInputStream.markSupported()
  - org.apache.commons.codec.binary.BaseNCodecInputStream.read()
  - org.apache.commons.codec.binary.BaseNCodecInputStream.read(byte[],int,int)
  - org.apache.commons.codec.binary.BaseNCodecInputStream.reset()
  - org.apache.commons.codec.binary.BaseNCodecInputStream.skip(long)
  langs:
  - java
  name: BaseNCodecInputStream
  nameWithType: BaseNCodecInputStream
  fullName: org.apache.commons.codec.binary.BaseNCodecInputStream
  type: Class
  package: org.apache.commons.codec.binary
  summary: Abstract superclass for Base-N input streams.
  syntax:
    content: public class BaseNCodecInputStream extends FilterInputStream
  inheritance:
  - java.lang.Object
  - java.io.InputStream
  - java.io.FilterInputStream
  inheritedMembers:
  - java.io.FilterInputStream.available()
  - java.io.FilterInputStream.close()
  - java.io.FilterInputStream.mark(int)
  - java.io.FilterInputStream.markSupported()
  - java.io.FilterInputStream.read()
  - java.io.FilterInputStream.read(byte[])
  - java.io.FilterInputStream.read(byte[],int,int)
  - java.io.FilterInputStream.reset()
  - java.io.FilterInputStream.skip(long)
  - java.io.InputStream.nullInputStream()
  - java.io.InputStream.readAllBytes()
  - java.io.InputStream.readNBytes(byte[],int,int)
  - java.io.InputStream.readNBytes(int)
  - java.io.InputStream.transferTo(java.io.OutputStream)
  - java.lang.Object.clone()
  - java.lang.Object.equals(java.lang.Object)
  - java.lang.Object.finalize()
  - java.lang.Object.getClass()
  - java.lang.Object.hashCode()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.toString()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
- uid: org.apache.commons.codec.binary.BaseNCodecInputStream.BaseNCodecInputStream(java.io.InputStream,org.apache.commons.codec.binary.BaseNCodec,boolean)
  id: BaseNCodecInputStream(java.io.InputStream,org.apache.commons.codec.binary.BaseNCodec,boolean)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.apache.commons.codec.binary.BaseNCodecInputStream
  langs:
  - java
  name: BaseNCodecInputStream(InputStream in, BaseNCodec baseNCodec, boolean doEncode)
  nameWithType: BaseNCodecInputStream.BaseNCodecInputStream(InputStream in, BaseNCodec baseNCodec, boolean doEncode)
  fullName: org.apache.commons.codec.binary.BaseNCodecInputStream.BaseNCodecInputStream(InputStream in, BaseNCodec baseNCodec, boolean doEncode)
  overload: org.apache.commons.codec.binary.BaseNCodecInputStream.BaseNCodecInputStream*
  type: Constructor
  package: org.apache.commons.codec.binary
  syntax:
    content: protected BaseNCodecInputStream(InputStream in, BaseNCodec baseNCodec, boolean doEncode)
    parameters:
    - id: in
      type: java.io.InputStream
    - id: baseNCodec
      type: org.apache.commons.codec.binary.BaseNCodec
    - id: doEncode
      type: boolean
- uid: org.apache.commons.codec.binary.BaseNCodecInputStream.available()
  id: available()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.apache.commons.codec.binary.BaseNCodecInputStream
  langs:
  - java
  name: available()
  nameWithType: BaseNCodecInputStream.available()
  fullName: org.apache.commons.codec.binary.BaseNCodecInputStream.available()
  overload: org.apache.commons.codec.binary.BaseNCodecInputStream.available*
  type: Method
  package: org.apache.commons.codec.binary
  syntax:
    content: public int available()
    return:
      type: int
      description: >-
        <code>0</code> if the <xref uid="java.io.InputStream" data-throw-if-not-resolved="false">InputStream</xref> has reached <code>EOF</code>,
         <code>1</code> otherwise
  exceptions:
  - type: java.io.IOException
- uid: org.apache.commons.codec.binary.BaseNCodecInputStream.mark(int)
  id: mark(int)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.apache.commons.codec.binary.BaseNCodecInputStream
  langs:
  - java
  name: mark(int readLimit)
  nameWithType: BaseNCodecInputStream.mark(int readLimit)
  fullName: org.apache.commons.codec.binary.BaseNCodecInputStream.mark(int readLimit)
  overload: org.apache.commons.codec.binary.BaseNCodecInputStream.mark*
  type: Method
  package: org.apache.commons.codec.binary
  summary: >-
    Marks the current position in this input stream.


    The <xref uid="org.apache.commons.codec.binary.BaseNCodecInputStream.mark*" data-throw-if-not-resolved="false">#mark</xref> method of <xref uid="org.apache.commons.codec.binary.BaseNCodecInputStream" data-throw-if-not-resolved="false">BaseNCodecInputStream</xref> does nothing.
  syntax:
    content: public synchronized void mark(int readLimit)
    parameters:
    - id: readLimit
      type: int
      description: the maximum limit of bytes that can be read before the mark position becomes invalid.
- uid: org.apache.commons.codec.binary.BaseNCodecInputStream.markSupported()
  id: markSupported()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.apache.commons.codec.binary.BaseNCodecInputStream
  langs:
  - java
  name: markSupported()
  nameWithType: BaseNCodecInputStream.markSupported()
  fullName: org.apache.commons.codec.binary.BaseNCodecInputStream.markSupported()
  overload: org.apache.commons.codec.binary.BaseNCodecInputStream.markSupported*
  type: Method
  package: org.apache.commons.codec.binary
  syntax:
    content: public boolean markSupported()
    return:
      type: boolean
      description: Always returns <code>false</code>
- uid: org.apache.commons.codec.binary.BaseNCodecInputStream.read()
  id: read()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.apache.commons.codec.binary.BaseNCodecInputStream
  langs:
  - java
  name: read()
  nameWithType: BaseNCodecInputStream.read()
  fullName: org.apache.commons.codec.binary.BaseNCodecInputStream.read()
  overload: org.apache.commons.codec.binary.BaseNCodecInputStream.read*
  type: Method
  package: org.apache.commons.codec.binary
  summary: Reads one `byte` from this input stream.
  syntax:
    content: public int read()
    return:
      type: int
      description: the byte as an integer in the range 0 to 255. Returns -1 if EOF has been reached.
  exceptions:
  - type: java.io.IOException
    description: if an I/O error occurs.
- uid: org.apache.commons.codec.binary.BaseNCodecInputStream.read(byte[],int,int)
  id: read(byte[],int,int)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.apache.commons.codec.binary.BaseNCodecInputStream
  langs:
  - java
  name: read(byte[] b, int offset, int len)
  nameWithType: BaseNCodecInputStream.read(byte[] b, int offset, int len)
  fullName: org.apache.commons.codec.binary.BaseNCodecInputStream.read(byte[] b, int offset, int len)
  overload: org.apache.commons.codec.binary.BaseNCodecInputStream.read*
  type: Method
  package: org.apache.commons.codec.binary
  summary: Attempts to read `len` bytes into the specified `b` array starting at `offset` from this InputStream.
  syntax:
    content: public int read(byte[] b, int offset, int len)
    parameters:
    - id: b
      type: byte[]
      description: destination byte array
    - id: offset
      type: int
      description: where to start writing the bytes
    - id: len
      type: int
      description: maximum number of bytes to read
    return:
      type: int
      description: number of bytes read
  exceptions:
  - type: java.io.IOException
    description: if an I/O error occurs.
- uid: org.apache.commons.codec.binary.BaseNCodecInputStream.reset()
  id: reset()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.apache.commons.codec.binary.BaseNCodecInputStream
  langs:
  - java
  name: reset()
  nameWithType: BaseNCodecInputStream.reset()
  fullName: org.apache.commons.codec.binary.BaseNCodecInputStream.reset()
  overload: org.apache.commons.codec.binary.BaseNCodecInputStream.reset*
  type: Method
  package: org.apache.commons.codec.binary
  summary: >-
    Repositions this stream to the position at the time the mark method was last called on this input stream.


    The <xref uid="org.apache.commons.codec.binary.BaseNCodecInputStream.reset*" data-throw-if-not-resolved="false">#reset</xref> method of <xref uid="org.apache.commons.codec.binary.BaseNCodecInputStream" data-throw-if-not-resolved="false">BaseNCodecInputStream</xref> does nothing except throw an <xref uid="java.io.IOException" data-throw-if-not-resolved="false">IOException</xref>.
  syntax:
    content: public synchronized void reset()
  exceptions:
  - type: java.io.IOException
    description: if this method is invoked
- uid: org.apache.commons.codec.binary.BaseNCodecInputStream.skip(long)
  id: skip(long)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.apache.commons.codec.binary.BaseNCodecInputStream
  langs:
  - java
  name: skip(long n)
  nameWithType: BaseNCodecInputStream.skip(long n)
  fullName: org.apache.commons.codec.binary.BaseNCodecInputStream.skip(long n)
  overload: org.apache.commons.codec.binary.BaseNCodecInputStream.skip*
  type: Method
  package: org.apache.commons.codec.binary
  syntax:
    content: public long skip(long n)
    parameters:
    - id: n
      type: long
    return:
      type: long
  exceptions:
  - type: java.io.IOException
    description: if the provided skip length is negative
references:
- uid: java.io.InputStream
  spec.java:
  - uid: java.io.InputStream
    name: InputStream
    fullName: java.io.InputStream
- uid: org.apache.commons.codec.binary.BaseNCodec
  name: BaseNCodec
  nameWithType: BaseNCodec
  fullName: org.apache.commons.codec.binary.BaseNCodec
- uid: boolean
  spec.java:
  - uid: boolean
    name: boolean
    fullName: boolean
- uid: org.apache.commons.codec.binary.BaseNCodecInputStream.BaseNCodecInputStream*
  name: BaseNCodecInputStream
  nameWithType: BaseNCodecInputStream.BaseNCodecInputStream
  fullName: org.apache.commons.codec.binary.BaseNCodecInputStream.BaseNCodecInputStream
  package: org.apache.commons.codec.binary
- uid: java.io.IOException
  spec.java:
  - uid: java.io.IOException
    name: IOException
    fullName: java.io.IOException
- uid: int
  spec.java:
  - uid: int
    name: int
    fullName: int
- uid: org.apache.commons.codec.binary.BaseNCodecInputStream.available*
  name: available
  nameWithType: BaseNCodecInputStream.available
  fullName: org.apache.commons.codec.binary.BaseNCodecInputStream.available
  package: org.apache.commons.codec.binary
- uid: org.apache.commons.codec.binary.BaseNCodecInputStream.mark*
  name: mark
  nameWithType: BaseNCodecInputStream.mark
  fullName: org.apache.commons.codec.binary.BaseNCodecInputStream.mark
  package: org.apache.commons.codec.binary
- uid: org.apache.commons.codec.binary.BaseNCodecInputStream.markSupported*
  name: markSupported
  nameWithType: BaseNCodecInputStream.markSupported
  fullName: org.apache.commons.codec.binary.BaseNCodecInputStream.markSupported
  package: org.apache.commons.codec.binary
- uid: org.apache.commons.codec.binary.BaseNCodecInputStream.read*
  name: read
  nameWithType: BaseNCodecInputStream.read
  fullName: org.apache.commons.codec.binary.BaseNCodecInputStream.read
  package: org.apache.commons.codec.binary
- uid: byte[]
  spec.java:
  - uid: byte
    name: byte
    fullName: byte
  - name: '[]'
    fullName: '[]'
- uid: org.apache.commons.codec.binary.BaseNCodecInputStream.reset*
  name: reset
  nameWithType: BaseNCodecInputStream.reset
  fullName: org.apache.commons.codec.binary.BaseNCodecInputStream.reset
  package: org.apache.commons.codec.binary
- uid: long
  spec.java:
  - uid: long
    name: long
    fullName: long
- uid: org.apache.commons.codec.binary.BaseNCodecInputStream.skip*
  name: skip
  nameWithType: BaseNCodecInputStream.skip
  fullName: org.apache.commons.codec.binary.BaseNCodecInputStream.skip
  package: org.apache.commons.codec.binary
- uid: java.io.FilterInputStream
  name: FilterInputStream
  nameWithType: FilterInputStream
  fullName: java.io.FilterInputStream
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: java.lang.Object.finalize()
  name: Object.finalize()
  nameWithType: Object.finalize()
  fullName: java.lang.Object.finalize()
- uid: java.io.FilterInputStream.close()
  name: FilterInputStream.close()
  nameWithType: FilterInputStream.close()
  fullName: java.io.FilterInputStream.close()
- uid: java.io.FilterInputStream.read(byte[],int,int)
  name: FilterInputStream.read(byte[],int,int)
  nameWithType: FilterInputStream.read(byte[],int,int)
  fullName: java.io.FilterInputStream.read(byte[],int,int)
- uid: java.lang.Object.clone()
  name: Object.clone()
  nameWithType: Object.clone()
  fullName: java.lang.Object.clone()
- uid: java.io.InputStream.readNBytes(int)
  name: InputStream.readNBytes(int)
  nameWithType: InputStream.readNBytes(int)
  fullName: java.io.InputStream.readNBytes(int)
- uid: java.io.FilterInputStream.skip(long)
  name: FilterInputStream.skip(long)
  nameWithType: FilterInputStream.skip(long)
  fullName: java.io.FilterInputStream.skip(long)
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: java.lang.Object.hashCode()
  name: Object.hashCode()
  nameWithType: Object.hashCode()
  fullName: java.lang.Object.hashCode()
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: java.io.FilterInputStream.reset()
  name: FilterInputStream.reset()
  nameWithType: FilterInputStream.reset()
  fullName: java.io.FilterInputStream.reset()
- uid: java.io.InputStream.nullInputStream()
  name: InputStream.nullInputStream()
  nameWithType: InputStream.nullInputStream()
  fullName: java.io.InputStream.nullInputStream()
- uid: java.io.InputStream.transferTo(java.io.OutputStream)
  name: InputStream.transferTo(OutputStream)
  nameWithType: InputStream.transferTo(OutputStream)
  fullName: java.io.InputStream.transferTo(java.io.OutputStream)
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: java.io.InputStream.readNBytes(byte[],int,int)
  name: InputStream.readNBytes(byte[],int,int)
  nameWithType: InputStream.readNBytes(byte[],int,int)
  fullName: java.io.InputStream.readNBytes(byte[],int,int)
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: java.io.InputStream.readAllBytes()
  name: InputStream.readAllBytes()
  nameWithType: InputStream.readAllBytes()
  fullName: java.io.InputStream.readAllBytes()
- uid: java.io.FilterInputStream.mark(int)
  name: FilterInputStream.mark(int)
  nameWithType: FilterInputStream.mark(int)
  fullName: java.io.FilterInputStream.mark(int)
- uid: java.lang.Object.equals(java.lang.Object)
  name: Object.equals(Object)
  nameWithType: Object.equals(Object)
  fullName: java.lang.Object.equals(java.lang.Object)
- uid: java.io.FilterInputStream.read()
  name: FilterInputStream.read()
  nameWithType: FilterInputStream.read()
  fullName: java.io.FilterInputStream.read()
- uid: java.io.FilterInputStream.markSupported()
  name: FilterInputStream.markSupported()
  nameWithType: FilterInputStream.markSupported()
  fullName: java.io.FilterInputStream.markSupported()
- uid: java.lang.Object.toString()
  name: Object.toString()
  nameWithType: Object.toString()
  fullName: java.lang.Object.toString()
- uid: java.io.FilterInputStream.read(byte[])
  name: FilterInputStream.read(byte[])
  nameWithType: FilterInputStream.read(byte[])
  fullName: java.io.FilterInputStream.read(byte[])
- uid: java.io.FilterInputStream.available()
  name: FilterInputStream.available()
  nameWithType: FilterInputStream.available()
  fullName: java.io.FilterInputStream.available()
