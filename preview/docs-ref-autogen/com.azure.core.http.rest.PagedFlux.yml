### YamlMime:ManagedReference
items:
- uid: com.azure.core.http.rest.PagedFlux
  id: PagedFlux
  parent: com.azure.core.http.rest
  children:
  - com.azure.core.http.rest.PagedFlux.byPage()
  - com.azure.core.http.rest.PagedFlux.byPage(String)
  - com.azure.core.http.rest.PagedFlux.PagedFlux(Supplier<Mono<PagedResponse<T>>>,Function<String, Mono<PagedResponse<T>>>)
  - com.azure.core.http.rest.PagedFlux.subscribe(CoreSubscriber<? super T>)
  href: com.azure.core.http.rest.PagedFlux.yml
  langs:
  - java
  name: PagedFlux<T>
  nameWithType: PagedFlux<T>
  fullName: com.azure.core.http.rest.PagedFlux<T>
  type: Class
  source:
    remote: &o0
      path: sdk/core/azure-core/src/main/java/com/azure/core/http/rest/PagedFlux.java
      branch: master
      repo: https://github.com/Azure/azure-sdk-for-java
    path: sdk/core/azure-core/src/main/java/com/azure/core/http/rest/PagedFlux.java
    startLine: 38
  package: com.azure.core.http.rest
  summary: "<p>This class is a flux that can operate on a <xref uid=\"com.azure.core.http.rest.PagedResponse\" data-throw-if-not-resolved=\"false\">PagedResponse</xref> and also provides the ability to operate on individual items. When processing the response by page, each response will contain the items in the page as well as the request details like status code and headers.</p>\r\n<p>To process one item at a time, simply subscribe to this flux as shown below </p>\r\n<p>\r\n  <b>Code sample</b>\r\n</p>\r\n<p>{ com.azure.core.http.rest.pagedflux.items}</p>\r\n<p>To process one page at a time, use <xref uid=\"com.azure.core.http.rest.PagedFlux.byPage()\" data-throw-if-not-resolved=\"false\">byPage</xref> method as shown below </p>\r\n<p>\r\n  <b>Code sample</b>\r\n</p>\r\n<p>{ com.azure.core.http.rest.pagedflux.pages}</p>\r\n<p>To process items one page at a time starting from any page associated with a continuation token, use <xref uid=\"com.azure.core.http.rest.PagedFlux.byPage(String)\" data-throw-if-not-resolved=\"false\">byPage(String)</xref> as shown below</p>\r\n<p>\r\n  <b>Code sample</b>\r\n</p>\r\n<p>{ com.azure.core.http.rest.pagedflux.pagesWithContinuationToken}</p>\r\n<p></p>"
  syntax: &o1
    content: public class PagedFlux<T>
    typeParameters:
    - id: T
      type: 8ce1ecb9
      description: <p>The type of items in a <xref uid="com.azure.core.http.rest.PagedResponse" data-throw-if-not-resolved="false">PagedResponse</xref></p>
  inheritance:
  - java.lang.Object
  - reactor.core.publisher.Flux<T>
- uid: com.azure.core.http.rest.PagedFlux.byPage()
  id: byPage()
  parent: com.azure.core.http.rest.PagedFlux
  href: com.azure.core.http.rest.PagedFlux.yml
  langs:
  - java
  name: byPage()
  nameWithType: PagedFlux<T>.byPage()
  fullName: com.azure.core.http.rest.PagedFlux<T>.byPage()
  overload: com.azure.core.http.rest.PagedFlux.byPage*
  type: Method
  source:
    remote: *o0
    path: sdk/core/azure-core/src/main/java/com/azure/core/http/rest/PagedFlux.java
    startLine: 68
  package: com.azure.core.http.rest
  summary: "<p>Creates a flux of <xref uid=\"com.azure.core.http.rest.PagedResponse\" data-throw-if-not-resolved=\"false\">PagedResponse</xref> starting from the first page.</p>\r\n<p>\r\n  <b>Code sample</b>\r\n</p>\r\n<p>{ com.azure.core.http.rest.pagedflux.bypage}</p>\r\n<p></p>"
  syntax: &o2
    content: public Flux<PagedResponse<T>> byPage()
    return:
      type: f5e9f800com.azure.core.http.rest.PagedResponse84ce83e6
      description: <p>A <xref uid="com.azure.core.http.rest.PagedFlux" data-throw-if-not-resolved="false">PagedFlux</xref> starting from the first page </p>
- uid: com.azure.core.http.rest.PagedFlux.byPage(String)
  id: byPage(String)
  parent: com.azure.core.http.rest.PagedFlux
  href: com.azure.core.http.rest.PagedFlux.yml
  langs:
  - java
  name: byPage(String continuationToken)
  nameWithType: PagedFlux<T>.byPage(String continuationToken)
  fullName: com.azure.core.http.rest.PagedFlux<T>.byPage(String continuationToken)
  overload: com.azure.core.http.rest.PagedFlux.byPage*
  type: Method
  source:
    remote: *o0
    path: sdk/core/azure-core/src/main/java/com/azure/core/http/rest/PagedFlux.java
    startLine: 82
  package: com.azure.core.http.rest
  summary: "<p>Creates a flux of <xref uid=\"com.azure.core.http.rest.PagedResponse\" data-throw-if-not-resolved=\"false\">PagedResponse</xref> starting from the next page associated with the given continuation token. To start from first page, use <xref uid=\"com.azure.core.http.rest.PagedFlux.byPage()\" data-throw-if-not-resolved=\"false\">byPage()</xref> instead.</p>\r\n<p>\r\n  <b>Code sample</b>\r\n</p>\r\n<p>{ com.azure.core.http.rest.pagedflux.bypage::String}</p>\r\n<p></p>"
  syntax: &o3
    content: public Flux<PagedResponse<T>> byPage(String continuationToken)
    parameters:
    - id: continuationToken
      type: "26831127"
      description: <p>The continuation token used to fetch the next page </p>
    return:
      type: f5e9f800com.azure.core.http.rest.PagedResponse84ce83e6
      description: <p>A <xref uid="com.azure.core.http.rest.PagedFlux" data-throw-if-not-resolved="false">PagedFlux</xref> starting from the page associated with the continuation token </p>
- uid: com.azure.core.http.rest.PagedFlux.PagedFlux(Supplier<Mono<PagedResponse<T>>>,Function<String, Mono<PagedResponse<T>>>)
  id: PagedFlux(Supplier<Mono<PagedResponse<T>>>,Function<String, Mono<PagedResponse<T>>>)
  parent: com.azure.core.http.rest.PagedFlux
  href: com.azure.core.http.rest.PagedFlux.yml
  langs:
  - java
  name: PagedFlux(Supplier<Mono<PagedResponse<T>>> firstPageRetriever, Function<String, Mono<PagedResponse<T>>> nextPageRetriever)
  nameWithType: PagedFlux<T>.PagedFlux(Supplier<Mono<PagedResponse<T>>> firstPageRetriever, Function<String, Mono<PagedResponse<T>>> nextPageRetriever)
  fullName: com.azure.core.http.rest.PagedFlux<T>.PagedFlux(Supplier<Mono<PagedResponse<T>>> firstPageRetriever, Function<String, Mono<PagedResponse<T>>> nextPageRetriever)
  overload: com.azure.core.http.rest.PagedFlux.PagedFlux*
  type: Constructor
  source:
    remote: *o0
    path: sdk/core/azure-core/src/main/java/com/azure/core/http/rest/PagedFlux.java
    startLine: 52
  package: com.azure.core.http.rest
  summary: "<p>Creates an instance of <xref uid=\"com.azure.core.http.rest.PagedFlux\" data-throw-if-not-resolved=\"false\">PagedFlux</xref>. The constructor takes in two arguments. The first argument is a supplier that fetches the first page of<code>T \r\n    </code> . The second argument is a function that fetches subsequent pages of<code>T \r\n    </code></p>\r\n<p>\r\n  <b>Code sample</b>\r\n</p>\r\n<p>{ com.azure.core.http.rest.pagedflux.instantiation}</p>\r\n<p></p>"
  syntax:
    content: public PagedFlux(Supplier<Mono<PagedResponse<T>>> firstPageRetriever, Function<String, Mono<PagedResponse<T>>> nextPageRetriever)
    parameters:
    - id: firstPageRetriever
      type: 23fa3aeacom.azure.core.http.rest.PagedResponsebfb1e8b9
      description: <p>Supplier that retrieves the first page </p>
    - id: nextPageRetriever
      type: c9c3862acom.azure.core.http.rest.PagedResponsebfb1e8b9
      description: <p>Function that retrieves the next page given a continuation token </p>
- uid: com.azure.core.http.rest.PagedFlux.subscribe(CoreSubscriber<? super T>)
  id: subscribe(CoreSubscriber<? super T>)
  parent: com.azure.core.http.rest.PagedFlux
  href: com.azure.core.http.rest.PagedFlux.yml
  langs:
  - java
  name: subscribe(CoreSubscriber<? super T> coreSubscriber)
  nameWithType: PagedFlux<T>.subscribe(CoreSubscriber<? super T> coreSubscriber)
  fullName: com.azure.core.http.rest.PagedFlux<T>.subscribe(CoreSubscriber<? super T> coreSubscriber)
  overload: com.azure.core.http.rest.PagedFlux.subscribe*
  type: Method
  source:
    remote: *o0
    path: sdk/core/azure-core/src/main/java/com/azure/core/http/rest/PagedFlux.java
    startLine: 97
  package: com.azure.core.http.rest
  summary: "<p>Subscribe to consume all items of type<code>T \r\n    </code> in the sequence respectively. This is recommended for most common scenarios. This will seamlessly fetch next page when required and provide with a <xref uid=\"\" data-throw-if-not-resolved=\"false\">Flux</xref> of items.</p>\r\n<p>\r\n  <b>Code sample</b>\r\n</p>\r\n<p>{ com.azure.core.http.rest.pagedflux.subscribe}</p>\r\n<p></p>"
  syntax:
    content: public void subscribe(CoreSubscriber<? super T> coreSubscriber)
    parameters:
    - id: coreSubscriber
      type: fa963970
      description: <p>The subscriber for this <xref uid="com.azure.core.http.rest.PagedFlux" data-throw-if-not-resolved="false">PagedFlux</xref></p>
references:
- uid: 8ce1ecb9
  spec.java:
  - name: T
    fullName: T
- uid: 23fa3aeacom.azure.core.http.rest.PagedResponsebfb1e8b9
  spec.java:
  - name: Supplier<Mono<
    fullName: Supplier<Mono<
  - uid: com.azure.core.http.rest.PagedResponse
    name: PagedResponse
    fullName: com.azure.core.http.rest.PagedResponse
    href: com.azure.core.http.rest.PagedResponse.yml
  - name: <T>>>
    fullName: <T>>>
- uid: c9c3862acom.azure.core.http.rest.PagedResponsebfb1e8b9
  spec.java:
  - name: Function<String, Mono<
    fullName: Function<String, Mono<
  - uid: com.azure.core.http.rest.PagedResponse
    name: PagedResponse
    fullName: com.azure.core.http.rest.PagedResponse
    href: com.azure.core.http.rest.PagedResponse.yml
  - name: <T>>>
    fullName: <T>>>
- uid: com.azure.core.http.rest.PagedFlux.PagedFlux*
  name: PagedFlux
  nameWithType: PagedFlux<T>.PagedFlux
  fullName: com.azure.core.http.rest.PagedFlux<T>.PagedFlux
  package: com.azure.core.http.rest
- uid: f5e9f800com.azure.core.http.rest.PagedResponse84ce83e6
  spec.java:
  - name: Flux<
    fullName: Flux<
  - uid: com.azure.core.http.rest.PagedResponse
    name: PagedResponse
    fullName: com.azure.core.http.rest.PagedResponse
    href: com.azure.core.http.rest.PagedResponse.yml
  - name: <T>>
    fullName: <T>>
- uid: com.azure.core.http.rest.PagedFlux.byPage*
  name: byPage
  nameWithType: PagedFlux<T>.byPage
  fullName: com.azure.core.http.rest.PagedFlux<T>.byPage
  package: com.azure.core.http.rest
- uid: "26831127"
  spec.java:
  - name: String
    fullName: String
- uid: fa963970
  spec.java:
  - name: CoreSubscriber<? super T>
    fullName: CoreSubscriber<? super T>
- uid: com.azure.core.http.rest.PagedFlux.subscribe*
  name: subscribe
  nameWithType: PagedFlux<T>.subscribe
  fullName: com.azure.core.http.rest.PagedFlux<T>.subscribe
  package: com.azure.core.http.rest
- uid: com.azure.core.http.rest.PagedResponse
  parent: com.azure.core.http.rest
  href: com.azure.core.http.rest.PagedResponse.yml
  name: PagedResponse<T>
  nameWithType: PagedResponse<T>
  fullName: com.azure.core.http.rest.PagedResponse<T>
  type: Interface
  summary: "<p>Response of a REST API that returns page.</p>\r\n<p></p>"
  syntax:
    content: public interface PagedResponse<T>
    typeParameters:
    - id: T
      type: 8ce1ecb9
      description: <p>the type items in the page </p>
- uid: com.azure.core.http.rest.PagedFlux
  parent: com.azure.core.http.rest
  href: com.azure.core.http.rest.PagedFlux.yml
  name: PagedFlux<T>
  nameWithType: PagedFlux<T>
  fullName: com.azure.core.http.rest.PagedFlux<T>
  type: Class
  summary: "<p>This class is a flux that can operate on a <xref uid=\"com.azure.core.http.rest.PagedResponse\" data-throw-if-not-resolved=\"false\">PagedResponse</xref> and also provides the ability to operate on individual items. When processing the response by page, each response will contain the items in the page as well as the request details like status code and headers.</p>\r\n<p>To process one item at a time, simply subscribe to this flux as shown below </p>\r\n<p>\r\n  <b>Code sample</b>\r\n</p>\r\n<p>{ com.azure.core.http.rest.pagedflux.items}</p>\r\n<p>To process one page at a time, use <xref uid=\"com.azure.core.http.rest.PagedFlux.byPage()\" data-throw-if-not-resolved=\"false\">byPage</xref> method as shown below </p>\r\n<p>\r\n  <b>Code sample</b>\r\n</p>\r\n<p>{ com.azure.core.http.rest.pagedflux.pages}</p>\r\n<p>To process items one page at a time starting from any page associated with a continuation token, use <xref uid=\"com.azure.core.http.rest.PagedFlux.byPage(String)\" data-throw-if-not-resolved=\"false\">byPage(String)</xref> as shown below</p>\r\n<p>\r\n  <b>Code sample</b>\r\n</p>\r\n<p>{ com.azure.core.http.rest.pagedflux.pagesWithContinuationToken}</p>\r\n<p></p>"
  syntax: *o1
- uid: com.azure.core.http.rest.PagedFlux.byPage()
  parent: com.azure.core.http.rest.PagedFlux
  href: com.azure.core.http.rest.PagedFlux.yml
  name: byPage()
  nameWithType: PagedFlux<T>.byPage()
  fullName: com.azure.core.http.rest.PagedFlux<T>.byPage()
  type: Method
  summary: "<p>Creates a flux of <xref uid=\"com.azure.core.http.rest.PagedResponse\" data-throw-if-not-resolved=\"false\">PagedResponse</xref> starting from the first page.</p>\r\n<p>\r\n  <b>Code sample</b>\r\n</p>\r\n<p>{ com.azure.core.http.rest.pagedflux.bypage}</p>\r\n<p></p>"
  syntax: *o2
- uid: com.azure.core.http.rest.PagedFlux.byPage(String)
  parent: com.azure.core.http.rest.PagedFlux
  href: com.azure.core.http.rest.PagedFlux.yml
  name: byPage(String continuationToken)
  nameWithType: PagedFlux<T>.byPage(String continuationToken)
  fullName: com.azure.core.http.rest.PagedFlux<T>.byPage(String continuationToken)
  type: Method
  summary: "<p>Creates a flux of <xref uid=\"com.azure.core.http.rest.PagedResponse\" data-throw-if-not-resolved=\"false\">PagedResponse</xref> starting from the next page associated with the given continuation token. To start from first page, use <xref uid=\"com.azure.core.http.rest.PagedFlux.byPage()\" data-throw-if-not-resolved=\"false\">byPage()</xref> instead.</p>\r\n<p>\r\n  <b>Code sample</b>\r\n</p>\r\n<p>{ com.azure.core.http.rest.pagedflux.bypage::String}</p>\r\n<p></p>"
  syntax: *o3
