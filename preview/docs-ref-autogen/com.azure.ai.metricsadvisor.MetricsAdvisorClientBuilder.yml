### YamlMime:JavaType
uid: "com.azure.ai.metricsadvisor.MetricsAdvisorClientBuilder"
fullName: "com.azure.ai.metricsadvisor.MetricsAdvisorClientBuilder"
name: "MetricsAdvisorClientBuilder"
nameWithType: "MetricsAdvisorClientBuilder"
summary: "This class provides a fluent builder API to help instantiation of <xref uid=\"com.azure.ai.metricsadvisor.MetricsAdvisorClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"MetricsAdvisorClients\"></xref> and <xref uid=\"com.azure.ai.metricsadvisor.MetricsAdvisorAsyncClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"MetricsAdvisorAsyncClients\"></xref>, call <xref uid=\"com.azure.ai.metricsadvisor.MetricsAdvisorClientBuilder.buildClient()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#buildClient()\"></xref> buildClient\\} and <xref uid=\"com.azure.ai.metricsadvisor.MetricsAdvisorClientBuilder.buildAsyncClient()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"buildAsyncClient\"></xref> respectively to construct an instance of the desired client.\n\nThe client needs the service endpoint of the Azure Metrics Advisor to access the resource service. <xref uid=\"com.azure.ai.metricsadvisor.MetricsAdvisorClientBuilder.credential(com.azure.ai.metricsadvisor.models.MetricsAdvisorKeyCredential)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#credential(MetricsAdvisorKeyCredential)\"></xref> gives the builder access to credential.\n\n**Instantiating an asynchronous Metrics Advisor Client**\n\n```java\nMetricsAdvisorAsyncClient metricsAdvisorAsyncClient =\n     new MetricsAdvisorClientBuilder()\n         .credential(new MetricsAdvisorKeyCredential(\"{subscription_key}\", \"{api_key}\"))\n         .endpoint(\"{endpoint}\")\n         .buildAsyncClient();\n```\n\n**Instantiating a synchronous Metrics Advisor Client**\n\n```java\nMetricsAdvisorClient metricsAdvisorClient =\n     new MetricsAdvisorClientBuilder()\n         .credential(new MetricsAdvisorKeyCredential(\"{subscription_key}\", \"{api_key}\"))\n         .endpoint(\"{endpoint}\")\n         .buildClient();\n```\n\nAnother way to construct the client is using a <xref uid=\"com.azure.core.http.HttpPipeline\" data-throw-if-not-resolved=\"false\" data-raw-source=\"HttpPipeline\"></xref>. The pipeline gives the client an authenticated way to communicate with the service. Set the pipeline with <xref uid=\"com.azure.ai.metricsadvisor.MetricsAdvisorClientBuilder.pipeline(com.azure.core.http.HttpPipeline)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"this\"></xref> and set the service endpoint with <xref uid=\"com.azure.ai.metricsadvisor.MetricsAdvisorClientBuilder.endpoint(java.lang.String)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"this\"></xref>. Using a pipeline requires additional setup but allows for finer control on how the <xref uid=\"com.azure.ai.metricsadvisor.MetricsAdvisorClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"MetricsAdvisorClient\"></xref> and <xref uid=\"com.azure.ai.metricsadvisor.MetricsAdvisorAsyncClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"MetricsAdvisorAsyncClient\"></xref> is built.\n\n```java\nHttpPipeline pipeline = new HttpPipelineBuilder()\n     .policies(/* add policies */)\n     .build();\n \n MetricsAdvisorClient metricsAdvisorClient =\n     new MetricsAdvisorClientBuilder()\n         .credential(new MetricsAdvisorKeyCredential(\"{subscription_key}\", \"{api_key}\"))\n         .endpoint(\"{endpoint}\")\n         .pipeline(pipeline)\n         .buildClient();\n```"
inheritances:
- "<xref href=\"java.lang.Object\" data-throw-if-not-resolved=\"False\" />"
inheritedMembers:
- "java.lang.Object.clone()"
- "java.lang.Object.equals(java.lang.Object)"
- "java.lang.Object.finalize()"
- "java.lang.Object.getClass()"
- "java.lang.Object.hashCode()"
- "java.lang.Object.notify()"
- "java.lang.Object.notifyAll()"
- "java.lang.Object.toString()"
- "java.lang.Object.wait()"
- "java.lang.Object.wait(long)"
- "java.lang.Object.wait(long,int)"
syntax: "public final class MetricsAdvisorClientBuilder"
constructors:
- "com.azure.ai.metricsadvisor.MetricsAdvisorClientBuilder.MetricsAdvisorClientBuilder()"
methods:
- "com.azure.ai.metricsadvisor.MetricsAdvisorClientBuilder.addPolicy(com.azure.core.http.policy.HttpPipelinePolicy)"
- "com.azure.ai.metricsadvisor.MetricsAdvisorClientBuilder.buildAsyncClient()"
- "com.azure.ai.metricsadvisor.MetricsAdvisorClientBuilder.buildClient()"
- "com.azure.ai.metricsadvisor.MetricsAdvisorClientBuilder.configuration(com.azure.core.util.Configuration)"
- "com.azure.ai.metricsadvisor.MetricsAdvisorClientBuilder.credential(com.azure.ai.metricsadvisor.models.MetricsAdvisorKeyCredential)"
- "com.azure.ai.metricsadvisor.MetricsAdvisorClientBuilder.endpoint(java.lang.String)"
- "com.azure.ai.metricsadvisor.MetricsAdvisorClientBuilder.httpClient(com.azure.core.http.HttpClient)"
- "com.azure.ai.metricsadvisor.MetricsAdvisorClientBuilder.httpLogOptions(com.azure.core.http.policy.HttpLogOptions)"
- "com.azure.ai.metricsadvisor.MetricsAdvisorClientBuilder.pipeline(com.azure.core.http.HttpPipeline)"
- "com.azure.ai.metricsadvisor.MetricsAdvisorClientBuilder.retryPolicy(com.azure.core.http.policy.RetryPolicy)"
- "com.azure.ai.metricsadvisor.MetricsAdvisorClientBuilder.serviceVersion(com.azure.ai.metricsadvisor.models.MetricsAdvisorServiceVersion)"
type: "class"
metadata: {}
package: "com.azure.ai.metricsadvisor"
artifact: com.azure:azure-ai-metricsadvisor:1.0.0-beta.2
