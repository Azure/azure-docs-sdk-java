### YamlMime:JavaType
uid: "com.azure.analytics.synapse.monitoring.MonitoringAsyncClient"
fullName: "com.azure.analytics.synapse.monitoring.MonitoringAsyncClient"
name: "MonitoringAsyncClient"
nameWithType: "MonitoringAsyncClient"
summary: "Initializes a new instance of the asynchronous Monitoring<wbr>Client type."
inheritances:
- "<xref href=\"java.lang.Object?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
inheritedMembers:
- "java.lang.Object.clone()"
- "java.lang.Object.equals(java.lang.Object)"
- "java.lang.Object.finalize()"
- "java.lang.Object.getClass()"
- "java.lang.Object.hashCode()"
- "java.lang.Object.notify()"
- "java.lang.Object.notifyAll()"
- "java.lang.Object.toString()"
- "java.lang.Object.wait()"
- "java.lang.Object.wait(long)"
- "java.lang.Object.wait(long,int)"
syntax: "public final class MonitoringAsyncClient"
methods:
- uid: "com.azure.analytics.synapse.monitoring.MonitoringAsyncClient.getSparkJobList()"
  fullName: "com.azure.analytics.synapse.monitoring.MonitoringAsyncClient.getSparkJobList()"
  name: "getSparkJobList()"
  nameWithType: "MonitoringAsyncClient.getSparkJobList()"
  summary: "Get list of spark applications for the workspace."
  syntax: "public Mono<SparkJobListViewResponse> getSparkJobList()"
  desc: "Get list of spark applications for the workspace."
  returns:
    description: "list of spark applications for the workspace."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.analytics.synapse.monitoring.models.SparkJobListViewResponse?alt=com.azure.analytics.synapse.monitoring.models.SparkJobListViewResponse&text=SparkJobListViewResponse\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.analytics.synapse.monitoring.MonitoringAsyncClient.getSparkJobList(java.lang.String)"
  fullName: "com.azure.analytics.synapse.monitoring.MonitoringAsyncClient.getSparkJobList(String xMsClientRequestId)"
  name: "getSparkJobList(String xMsClientRequestId)"
  nameWithType: "MonitoringAsyncClient.getSparkJobList(String xMsClientRequestId)"
  summary: "Get list of spark applications for the workspace."
  parameters:
  - description: "Can provide a guid, which is helpful for debugging and to provide better customer\n     support."
    name: "xMsClientRequestId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<SparkJobListViewResponse> getSparkJobList(String xMsClientRequestId)"
  desc: "Get list of spark applications for the workspace."
  returns:
    description: "list of spark applications for the workspace."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.analytics.synapse.monitoring.models.SparkJobListViewResponse?alt=com.azure.analytics.synapse.monitoring.models.SparkJobListViewResponse&text=SparkJobListViewResponse\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.analytics.synapse.monitoring.MonitoringAsyncClient.getSparkJobListWithResponse(java.lang.String)"
  fullName: "com.azure.analytics.synapse.monitoring.MonitoringAsyncClient.getSparkJobListWithResponse(String xMsClientRequestId)"
  name: "getSparkJobListWithResponse(String xMsClientRequestId)"
  nameWithType: "MonitoringAsyncClient.getSparkJobListWithResponse(String xMsClientRequestId)"
  summary: "Get list of spark applications for the workspace."
  parameters:
  - description: "Can provide a guid, which is helpful for debugging and to provide better customer\n     support."
    name: "xMsClientRequestId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<SparkJobListViewResponse>> getSparkJobListWithResponse(String xMsClientRequestId)"
  desc: "Get list of spark applications for the workspace."
  returns:
    description: "list of spark applications for the workspace."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.analytics.synapse.monitoring.models.SparkJobListViewResponse?alt=com.azure.analytics.synapse.monitoring.models.SparkJobListViewResponse&text=SparkJobListViewResponse\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.analytics.synapse.monitoring.MonitoringAsyncClient.getSqlJobQueryString()"
  fullName: "com.azure.analytics.synapse.monitoring.MonitoringAsyncClient.getSqlJobQueryString()"
  name: "getSqlJobQueryString()"
  nameWithType: "MonitoringAsyncClient.getSqlJobQueryString()"
  summary: "Get SQL OD/DW Query for the workspace."
  syntax: "public Mono<SqlQueryStringDataModel> getSqlJobQueryString()"
  desc: "Get SQL OD/DW Query for the workspace."
  returns:
    description: "sQL OD/DW Query for the workspace."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.analytics.synapse.monitoring.models.SqlQueryStringDataModel?alt=com.azure.analytics.synapse.monitoring.models.SqlQueryStringDataModel&text=SqlQueryStringDataModel\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.analytics.synapse.monitoring.MonitoringAsyncClient.getSqlJobQueryString(java.lang.String,java.lang.String,java.lang.String,java.lang.String)"
  fullName: "com.azure.analytics.synapse.monitoring.MonitoringAsyncClient.getSqlJobQueryString(String xMsClientRequestId, String filter, String orderby, String skip)"
  name: "getSqlJobQueryString(String xMsClientRequestId, String filter, String orderby, String skip)"
  nameWithType: "MonitoringAsyncClient.getSqlJobQueryString(String xMsClientRequestId, String filter, String orderby, String skip)"
  summary: "Get SQL OD/DW Query for the workspace."
  parameters:
  - description: "Can provide a guid, which is helpful for debugging and to provide better customer\n     support."
    name: "xMsClientRequestId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The filter parameter."
    name: "filter"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The orderby parameter."
    name: "orderby"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The skip parameter."
    name: "skip"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<SqlQueryStringDataModel> getSqlJobQueryString(String xMsClientRequestId, String filter, String orderby, String skip)"
  desc: "Get SQL OD/DW Query for the workspace."
  returns:
    description: "sQL OD/DW Query for the workspace."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.analytics.synapse.monitoring.models.SqlQueryStringDataModel?alt=com.azure.analytics.synapse.monitoring.models.SqlQueryStringDataModel&text=SqlQueryStringDataModel\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.analytics.synapse.monitoring.MonitoringAsyncClient.getSqlJobQueryStringWithResponse(java.lang.String,java.lang.String,java.lang.String,java.lang.String)"
  fullName: "com.azure.analytics.synapse.monitoring.MonitoringAsyncClient.getSqlJobQueryStringWithResponse(String xMsClientRequestId, String filter, String orderby, String skip)"
  name: "getSqlJobQueryStringWithResponse(String xMsClientRequestId, String filter, String orderby, String skip)"
  nameWithType: "MonitoringAsyncClient.getSqlJobQueryStringWithResponse(String xMsClientRequestId, String filter, String orderby, String skip)"
  summary: "Get SQL OD/DW Query for the workspace."
  parameters:
  - description: "Can provide a guid, which is helpful for debugging and to provide better customer\n     support."
    name: "xMsClientRequestId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The filter parameter."
    name: "filter"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The orderby parameter."
    name: "orderby"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The skip parameter."
    name: "skip"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<SqlQueryStringDataModel>> getSqlJobQueryStringWithResponse(String xMsClientRequestId, String filter, String orderby, String skip)"
  desc: "Get SQL OD/DW Query for the workspace."
  returns:
    description: "sQL OD/DW Query for the workspace."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.analytics.synapse.monitoring.models.SqlQueryStringDataModel?alt=com.azure.analytics.synapse.monitoring.models.SqlQueryStringDataModel&text=SqlQueryStringDataModel\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
type: "class"
desc: "Initializes a new instance of the asynchronous MonitoringClient type."
metadata: {}
package: "com.azure.analytics.synapse.monitoring"
artifact: com.azure:azure-analytics-synapse-monitoring:1.0.0-beta.3
