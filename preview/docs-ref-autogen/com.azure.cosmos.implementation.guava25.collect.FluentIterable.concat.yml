### YamlMime:JavaMember
uid: "com.azure.cosmos.implementation.guava25.collect.FluentIterable.concat*"
fullName: "com.azure.cosmos.implementation.guava25.collect.FluentIterable<E>.<T>concat"
name: "<T>concat"
nameWithType: "FluentIterable<E>.<T>concat"
members:
- uid: "com.azure.cosmos.implementation.guava25.collect.FluentIterable.<T>concat(java.lang.Iterable<? extends T>,java.lang.Iterable<? extends T>)"
  fullName: "com.azure.cosmos.implementation.guava25.collect.FluentIterable<E>.<T>concat(Iterable<? extends T> a, Iterable<? extends T> b)"
  name: "<T>concat(Iterable<? extends T> a, Iterable<? extends T> b)"
  nameWithType: "FluentIterable<E>.<T>concat(Iterable<? extends T> a, Iterable<? extends T> b)"
  summary: "Returns a fluent iterable that combines two iterables. The returned iterable has an iterator that traverses the elements in `a`, followed by the elements in `b`. The source iterators are not polled until necessary.\n\nThe returned iterable's iterator supports `remove()` when the corresponding input iterator supports it.\n\n**`Stream` equivalent:** <xref uid=\"java.util.stream.Stream.concat\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Stream#concat\"></xref>."
  parameters:
  - name: "a"
    type: "<xref href=\"java.lang.Iterable?alt=java.lang.Iterable&text=Iterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"? extends T?alt=? extends T&text=? extends T\" data-throw-if-not-resolved=\"False\" />&gt;"
  - name: "b"
    type: "<xref href=\"java.lang.Iterable?alt=java.lang.Iterable&text=Iterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"? extends T?alt=? extends T&text=? extends T\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public static FluentIterable<T> <T>concat(Iterable<? extends T> a, Iterable<? extends T> b)"
  returns:
    type: "<xref href=\"com.azure.cosmos.implementation.guava25.collect.FluentIterable?alt=com.azure.cosmos.implementation.guava25.collect.FluentIterable&text=FluentIterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.cosmos.implementation.guava25.collect.FluentIterable.<T>concat(java.lang.Iterable<? extends T>,java.lang.Iterable<? extends T>,java.lang.Iterable<? extends T>)"
  fullName: "com.azure.cosmos.implementation.guava25.collect.FluentIterable<E>.<T>concat(Iterable<? extends T> a, Iterable<? extends T> b, Iterable<? extends T> c)"
  name: "<T>concat(Iterable<? extends T> a, Iterable<? extends T> b, Iterable<? extends T> c)"
  nameWithType: "FluentIterable<E>.<T>concat(Iterable<? extends T> a, Iterable<? extends T> b, Iterable<? extends T> c)"
  summary: "Returns a fluent iterable that combines three iterables. The returned iterable has an iterator that traverses the elements in `a`, followed by the elements in `b`, followed by the elements in `c`. The source iterators are not polled until necessary.\n\nThe returned iterable's iterator supports `remove()` when the corresponding input iterator supports it.\n\n**`Stream` equivalent:** use nested calls to <xref uid=\"java.util.stream.Stream.concat\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Stream#concat\"></xref>, or see the advice in <xref uid=\"com.azure.cosmos.implementation.guava25.collect.FluentIterable.concat*\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#concat(Iterable...)\"></xref>."
  parameters:
  - name: "a"
    type: "<xref href=\"java.lang.Iterable?alt=java.lang.Iterable&text=Iterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"? extends T?alt=? extends T&text=? extends T\" data-throw-if-not-resolved=\"False\" />&gt;"
  - name: "b"
    type: "<xref href=\"java.lang.Iterable?alt=java.lang.Iterable&text=Iterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"? extends T?alt=? extends T&text=? extends T\" data-throw-if-not-resolved=\"False\" />&gt;"
  - name: "c"
    type: "<xref href=\"java.lang.Iterable?alt=java.lang.Iterable&text=Iterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"? extends T?alt=? extends T&text=? extends T\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public static FluentIterable<T> <T>concat(Iterable<? extends T> a, Iterable<? extends T> b, Iterable<? extends T> c)"
  returns:
    type: "<xref href=\"com.azure.cosmos.implementation.guava25.collect.FluentIterable?alt=com.azure.cosmos.implementation.guava25.collect.FluentIterable&text=FluentIterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.cosmos.implementation.guava25.collect.FluentIterable.<T>concat(java.lang.Iterable<? extends T>,java.lang.Iterable<? extends T>,java.lang.Iterable<? extends T>,java.lang.Iterable<? extends T>)"
  fullName: "com.azure.cosmos.implementation.guava25.collect.FluentIterable<E>.<T>concat(Iterable<? extends T> a, Iterable<? extends T> b, Iterable<? extends T> c, Iterable<? extends T> d)"
  name: "<T>concat(Iterable<? extends T> a, Iterable<? extends T> b, Iterable<? extends T> c, Iterable<? extends T> d)"
  nameWithType: "FluentIterable<E>.<T>concat(Iterable<? extends T> a, Iterable<? extends T> b, Iterable<? extends T> c, Iterable<? extends T> d)"
  summary: "Returns a fluent iterable that combines four iterables. The returned iterable has an iterator that traverses the elements in `a`, followed by the elements in `b`, followed by the elements in `c`, followed by the elements in `d`. The source iterators are not polled until necessary.\n\nThe returned iterable's iterator supports `remove()` when the corresponding input iterator supports it.\n\n**`Stream` equivalent:** use nested calls to <xref uid=\"java.util.stream.Stream.concat\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Stream#concat\"></xref>, or see the advice in <xref uid=\"com.azure.cosmos.implementation.guava25.collect.FluentIterable.concat*\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#concat(Iterable...)\"></xref>."
  parameters:
  - name: "a"
    type: "<xref href=\"java.lang.Iterable?alt=java.lang.Iterable&text=Iterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"? extends T?alt=? extends T&text=? extends T\" data-throw-if-not-resolved=\"False\" />&gt;"
  - name: "b"
    type: "<xref href=\"java.lang.Iterable?alt=java.lang.Iterable&text=Iterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"? extends T?alt=? extends T&text=? extends T\" data-throw-if-not-resolved=\"False\" />&gt;"
  - name: "c"
    type: "<xref href=\"java.lang.Iterable?alt=java.lang.Iterable&text=Iterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"? extends T?alt=? extends T&text=? extends T\" data-throw-if-not-resolved=\"False\" />&gt;"
  - name: "d"
    type: "<xref href=\"java.lang.Iterable?alt=java.lang.Iterable&text=Iterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"? extends T?alt=? extends T&text=? extends T\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public static FluentIterable<T> <T>concat(Iterable<? extends T> a, Iterable<? extends T> b, Iterable<? extends T> c, Iterable<? extends T> d)"
  returns:
    type: "<xref href=\"com.azure.cosmos.implementation.guava25.collect.FluentIterable?alt=com.azure.cosmos.implementation.guava25.collect.FluentIterable&text=FluentIterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.cosmos.implementation.guava25.collect.FluentIterable.<T>concat(java.lang.Iterable<? extends T>...)"
  fullName: "com.azure.cosmos.implementation.guava25.collect.FluentIterable<E>.<T>concat(Iterable<? extends T>[] inputs)"
  name: "<T>concat(Iterable<? extends T>[] inputs)"
  nameWithType: "FluentIterable<E>.<T>concat(Iterable<? extends T>[] inputs)"
  summary: "Returns a fluent iterable that combines several iterables. The returned iterable has an iterator that traverses the elements of each iterable in `inputs`. The input iterators are not polled until necessary.\n\nThe returned iterable's iterator supports `remove()` when the corresponding input iterator supports it.\n\n**`Stream` equivalent:** to concatenate an arbitrary number of streams, use `Stream.of(stream1, stream2, ...).flatMap(s -> s)`. If the sources are iterables, use `Stream.of(iter1, iter2, ...).flatMap(Streams::stream)`."
  parameters:
  - name: "inputs"
    type: "<xref href=\"java.lang.Iterable?alt=java.lang.Iterable&text=Iterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"? extends T?alt=? extends T&text=? extends T\" data-throw-if-not-resolved=\"False\" />&gt;[]"
  syntax: "public static FluentIterable<T> <T>concat(Iterable<? extends T>[] inputs)"
  returns:
    type: "<xref href=\"com.azure.cosmos.implementation.guava25.collect.FluentIterable?alt=com.azure.cosmos.implementation.guava25.collect.FluentIterable&text=FluentIterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.cosmos.implementation.guava25.collect.FluentIterable.<T>concat(java.lang.Iterable<? extends java.lang.Iterable<? extends T>>)"
  fullName: "com.azure.cosmos.implementation.guava25.collect.FluentIterable<E>.<T>concat(Iterable<? extends Iterable<? extends T>> inputs)"
  name: "<T>concat(Iterable<? extends Iterable<? extends T>> inputs)"
  nameWithType: "FluentIterable<E>.<T>concat(Iterable<? extends Iterable<? extends T>> inputs)"
  summary: "Returns a fluent iterable that combines several iterables. The returned iterable has an iterator that traverses the elements of each iterable in `inputs`. The input iterators are not polled until necessary.\n\nThe returned iterable's iterator supports `remove()` when the corresponding input iterator supports it. The methods of the returned iterable may throw `NullPointerException` if any of the input iterators is `null`.\n\n**`Stream` equivalent:** `streamOfStreams.flatMap(s -> s)` or `streamOfIterables.flatMap(Streams::stream)`. (See <xref uid=\"com.azure.cosmos.implementation.guava25.collect.Streams.stream\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Streams#stream\"></xref>.)"
  parameters:
  - name: "inputs"
    type: "<xref href=\"java.lang.Iterable?alt=java.lang.Iterable&text=Iterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"? extends java.lang.Iterable?alt=? extends java.lang.Iterable&text=Iterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"? extends T?alt=? extends T&text=? extends T\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
  syntax: "public static FluentIterable<T> <T>concat(Iterable<? extends Iterable<? extends T>> inputs)"
  returns:
    type: "<xref href=\"com.azure.cosmos.implementation.guava25.collect.FluentIterable?alt=com.azure.cosmos.implementation.guava25.collect.FluentIterable&text=FluentIterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
type: "method"
metadata: {}
package: "com.azure.cosmos.implementation.guava25.collect"
artifact: com.azure:azure-cosmos:4.4.0-beta.1
