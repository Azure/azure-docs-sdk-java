### YamlMime:JavaMember
uid: "com.azure.cosmos.implementation.guava25.collect.Multimap.hashCode*"
fullName: "com.azure.cosmos.implementation.guava25.collect.Multimap<K,V>.hashCode"
name: "hashCode"
nameWithType: "Multimap<K,V>.hashCode"
members:
- uid: "com.azure.cosmos.implementation.guava25.collect.Multimap.hashCode()"
  fullName: "com.azure.cosmos.implementation.guava25.collect.Multimap<K,V>.hashCode()"
  name: "hashCode()"
  nameWithType: "Multimap<K,V>.hashCode()"
  summary: "Returns the hash code for this multimap.\n\nThe hash code of a multimap is defined as the hash code of the map view, as returned by <xref uid=\"com.azure.cosmos.implementation.guava25.collect.Multimap.asMap\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Multimap#asMap\"></xref>.\n\nIn general, two multimaps with identical key-value mappings may or may not have the same hash codes, depending on the implementation. For example, two <xref uid=\"com.azure.cosmos.implementation.guava25.collect.SetMultimap\" data-throw-if-not-resolved=\"false\" data-raw-source=\"SetMultimap\"></xref> instances with the same key-value mappings will have the same `hashCode`, but the `hashCode` of <xref uid=\"com.azure.cosmos.implementation.guava25.collect.ListMultimap\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ListMultimap\"></xref> instances depends on the ordering of the values for each key."
  overridden: "java.lang.Object.hashCode()"
  syntax: "public abstract int hashCode()"
  returns:
    type: "<xref href=\"int?alt=int&text=int\" data-throw-if-not-resolved=\"False\" />"
type: "method"
metadata: {}
package: "com.azure.cosmos.implementation.guava25.collect"
artifact: com.azure:azure-cosmos:4.4.0-beta.1
