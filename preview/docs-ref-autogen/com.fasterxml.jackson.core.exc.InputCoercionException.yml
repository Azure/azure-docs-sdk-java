### YamlMime:JavaType
uid: "com.fasterxml.jackson.core.exc.InputCoercionException"
fullName: "com.fasterxml.jackson.core.exc.InputCoercionException"
name: "InputCoercionException"
nameWithType: "InputCoercionException"
summary: "Exception type for read-side problems that are not direct decoding (\"parsing\") problems (those would be reported as <xref uid=\"com.fasterxml.jackson.core.JsonParseException\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.fasterxml.jackson.core.JsonParseException\"></xref>s), but rather result from failed attempts to convert specific Java value out of valid but incompatible input value. One example is numeric coercions where target number type's range does not allow mapping of too large/too small input value."
inheritances:
- "<xref href=\"java.lang.Object\" data-throw-if-not-resolved=\"False\" />"
- "<xref href=\"java.lang.Throwable\" data-throw-if-not-resolved=\"False\" />"
- "<xref href=\"java.lang.Exception\" data-throw-if-not-resolved=\"False\" />"
- "<xref href=\"java.io.IOException\" data-throw-if-not-resolved=\"False\" />"
- "<xref href=\"com.fasterxml.jackson.core.JsonProcessingException\" data-throw-if-not-resolved=\"False\" />"
- "<xref href=\"com.fasterxml.jackson.core.exc.StreamReadException\" data-throw-if-not-resolved=\"False\" />"
inheritedMembers:
- "com.fasterxml.jackson.core.JsonProcessingException.clearLocation()"
- "com.fasterxml.jackson.core.JsonProcessingException.getLocation()"
- "com.fasterxml.jackson.core.JsonProcessingException.getMessageSuffix()"
- "com.fasterxml.jackson.core.JsonProcessingException.getOriginalMessage()"
- "com.fasterxml.jackson.core.JsonProcessingException.toString()"
- "com.fasterxml.jackson.core.exc.StreamReadException.getMessage()"
- "com.fasterxml.jackson.core.exc.StreamReadException.getProcessor()"
- "com.fasterxml.jackson.core.exc.StreamReadException.getRequestPayload()"
- "com.fasterxml.jackson.core.exc.StreamReadException.getRequestPayloadAsString()"
- "com.fasterxml.jackson.core.exc.StreamReadException.withParser(com.fasterxml.jackson.core.JsonParser)"
- "com.fasterxml.jackson.core.exc.StreamReadException.withRequestPayload(com.fasterxml.jackson.core.util.RequestPayload)"
- "java.lang.Object.clone()"
- "java.lang.Object.equals(java.lang.Object)"
- "java.lang.Object.finalize()"
- "java.lang.Object.getClass()"
- "java.lang.Object.hashCode()"
- "java.lang.Object.notify()"
- "java.lang.Object.notifyAll()"
- "java.lang.Object.wait()"
- "java.lang.Object.wait(long)"
- "java.lang.Object.wait(long,int)"
- "java.lang.Throwable.addSuppressed(java.lang.Throwable)"
- "java.lang.Throwable.fillInStackTrace()"
- "java.lang.Throwable.getCause()"
- "java.lang.Throwable.getLocalizedMessage()"
- "java.lang.Throwable.getStackTrace()"
- "java.lang.Throwable.getSuppressed()"
- "java.lang.Throwable.initCause(java.lang.Throwable)"
- "java.lang.Throwable.printStackTrace()"
- "java.lang.Throwable.printStackTrace(java.io.PrintStream)"
- "java.lang.Throwable.printStackTrace(java.io.PrintWriter)"
- "java.lang.Throwable.setStackTrace(java.lang.StackTraceElement[])"
syntax: "public class InputCoercionException extends StreamReadException"
constructors:
- "com.fasterxml.jackson.core.exc.InputCoercionException.InputCoercionException(com.fasterxml.jackson.core.JsonParser,java.lang.String,com.fasterxml.jackson.core.JsonToken,java.lang.Class<?>)"
fields:
- "com.fasterxml.jackson.core.exc.InputCoercionException._inputType"
- "com.fasterxml.jackson.core.exc.InputCoercionException._targetType"
methods:
- "com.fasterxml.jackson.core.exc.InputCoercionException.getInputType()"
- "com.fasterxml.jackson.core.exc.InputCoercionException.getTargetType()"
- "com.fasterxml.jackson.core.exc.InputCoercionException.withParser(com.fasterxml.jackson.core.JsonParser)"
- "com.fasterxml.jackson.core.exc.InputCoercionException.withRequestPayload(com.fasterxml.jackson.core.util.RequestPayload)"
type: "class"
metadata: {}
package: "com.fasterxml.jackson.core.exc"
artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
