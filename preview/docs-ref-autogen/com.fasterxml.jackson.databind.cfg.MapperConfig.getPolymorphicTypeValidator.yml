### YamlMime:JavaMember
uid: "com.fasterxml.jackson.databind.cfg.MapperConfig.getPolymorphicTypeValidator*"
fullName: "com.fasterxml.jackson.databind.cfg.MapperConfig<T>.getPolymorphicTypeValidator"
name: "getPolymorphicTypeValidator"
nameWithType: "MapperConfig<T>.getPolymorphicTypeValidator"
members:
- uid: "com.fasterxml.jackson.databind.cfg.MapperConfig.getPolymorphicTypeValidator()"
  fullName: "com.fasterxml.jackson.databind.cfg.MapperConfig<T>.getPolymorphicTypeValidator()"
  name: "getPolymorphicTypeValidator()"
  nameWithType: "MapperConfig<T>.getPolymorphicTypeValidator()"
  summary: "Simple accessor for default <xref uid=\"com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PolymorphicTypeValidator\"></xref> to use for legacy Default Typing methods (`ObjectMapper.enableDefaultTyping()`) and annotation based enabling.\n\nSince 2.11 will also check <xref uid=\"com.fasterxml.jackson.databind.MapperFeature.BLOCK_UNSAFE_POLYMORPHIC_BASE_TYPES\" data-throw-if-not-resolved=\"false\" data-raw-source=\"MapperFeature#BLOCK_UNSAFE_POLYMORPHIC_BASE_TYPES\"></xref> to possibly override default to more restrictive implementation, see <xref uid=\"com.fasterxml.jackson.databind.jsontype.DefaultBaseTypeLimitingValidator\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.fasterxml.jackson.databind.jsontype.DefaultBaseTypeLimitingValidator\"></xref>)."
  syntax: "public PolymorphicTypeValidator getPolymorphicTypeValidator()"
  returns:
    type: "<xref href=\"com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator?alt=com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator&text=PolymorphicTypeValidator\" data-throw-if-not-resolved=\"False\" />"
type: "method"
metadata: {}
package: "com.fasterxml.jackson.databind.cfg"
artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
