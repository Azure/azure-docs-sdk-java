### YamlMime:JavaType
uid: "com.azure.ai.openai.OpenAIAsyncClient"
fullName: "com.azure.ai.openai.OpenAIAsyncClient"
name: "OpenAIAsyncClient"
nameWithType: "OpenAIAsyncClient"
summary: "Initializes a new instance of the asynchronous Open<wbr>AIClient type."
inheritances:
- "<xref href=\"java.lang.Object?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
inheritedClassMethods:
- classRef: "java.lang.<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html\">Object</a>"
  methodsRef:
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#clone--\">clone</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#equals-java.lang.Object-\">equals</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#finalize--\">finalize</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#getClass--\">getClass</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#hashCode--\">hashCode</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#notify--\">notify</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#notifyAll--\">notifyAll</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#toString--\">toString</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#wait--\">wait</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#wait-long-\">wait</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#wait-long-int-\">wait</a>"
syntax: "public final class **OpenAIAsyncClient**"
methods:
- uid: "com.azure.ai.openai.OpenAIAsyncClient.getChatCompletions(java.lang.String,com.azure.ai.openai.models.ChatCompletionsOptions)"
  fullName: "com.azure.ai.openai.OpenAIAsyncClient.getChatCompletions(String deploymentOrModelName, ChatCompletionsOptions chatCompletionsOptions)"
  name: "getChatCompletions(String deploymentOrModelName, ChatCompletionsOptions chatCompletionsOptions)"
  nameWithType: "OpenAIAsyncClient.getChatCompletions(String deploymentOrModelName, ChatCompletionsOptions chatCompletionsOptions)"
  summary: "Gets chat completions for the provided chat messages."
  parameters:
  - description: "Specifies either the model deployment name (when using Azure OpenAI) or model name\n     (when using non-Azure OpenAI) to use for this request."
    name: "deploymentOrModelName"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The configuration information for a chat completions request. Completions support a\n     wide variety of tasks and generate text that continues from or \"completes\" provided prompt data."
    name: "chatCompletionsOptions"
    type: "<xref href=\"com.azure.ai.openai.models.ChatCompletionsOptions?alt=com.azure.ai.openai.models.ChatCompletionsOptions&text=ChatCompletionsOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<ChatCompletions> getChatCompletions(String deploymentOrModelName, ChatCompletionsOptions chatCompletionsOptions)"
  desc: "Gets chat completions for the provided chat messages. Completions support a wide variety of tasks and generate text that continues from or \"completes\" provided prompt data."
  returns:
    description: "chat completions for the provided chat messages. Completions support a wide variety of tasks and generate\n     text that continues from or \"completes\" provided prompt data on successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.ai.openai.models.ChatCompletions?alt=com.azure.ai.openai.models.ChatCompletions&text=ChatCompletions\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.ai.openai.OpenAIAsyncClient.getChatCompletionsStream(java.lang.String,com.azure.ai.openai.models.ChatCompletionsOptions)"
  fullName: "com.azure.ai.openai.OpenAIAsyncClient.getChatCompletionsStream(String deploymentOrModelName, ChatCompletionsOptions chatCompletionsOptions)"
  name: "getChatCompletionsStream(String deploymentOrModelName, ChatCompletionsOptions chatCompletionsOptions)"
  nameWithType: "OpenAIAsyncClient.getChatCompletionsStream(String deploymentOrModelName, ChatCompletionsOptions chatCompletionsOptions)"
  summary: "Gets chat completions for the provided chat messages."
  parameters:
  - description: "Specifies either the model deployment name (when using Azure OpenAI) or model name\n     (when using non-Azure OpenAI) to use for this request."
    name: "deploymentOrModelName"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The configuration information for a chat completions request. Completions support a\n     wide variety of tasks and generate text that continues from or \"completes\" provided prompt data."
    name: "chatCompletionsOptions"
    type: "<xref href=\"com.azure.ai.openai.models.ChatCompletionsOptions?alt=com.azure.ai.openai.models.ChatCompletionsOptions&text=ChatCompletionsOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Flux<ChatCompletions> getChatCompletionsStream(String deploymentOrModelName, ChatCompletionsOptions chatCompletionsOptions)"
  desc: "Gets chat completions for the provided chat messages. Chat completions support a wide variety of tasks and generate text that continues from or \"completes\" provided prompt data."
  returns:
    description: "chat completions stream for the provided chat messages. Completions support a wide variety of tasks and\n     generate text that continues from or \"completes\" provided prompt data."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Flux.html\">Flux</a>&lt;<xref href=\"com.azure.ai.openai.models.ChatCompletions?alt=com.azure.ai.openai.models.ChatCompletions&text=ChatCompletions\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.ai.openai.OpenAIAsyncClient.getChatCompletionsWithResponse(java.lang.String,com.azure.core.util.BinaryData,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.ai.openai.OpenAIAsyncClient.getChatCompletionsWithResponse(String deploymentOrModelName, BinaryData chatCompletionsOptions, RequestOptions requestOptions)"
  name: "getChatCompletionsWithResponse(String deploymentOrModelName, BinaryData chatCompletionsOptions, RequestOptions requestOptions)"
  nameWithType: "OpenAIAsyncClient.getChatCompletionsWithResponse(String deploymentOrModelName, BinaryData chatCompletionsOptions, RequestOptions requestOptions)"
  summary: "Gets chat completions for the provided chat messages."
  parameters:
  - description: "Specifies either the model deployment name (when using Azure OpenAI) or model name\n     (when using non-Azure OpenAI) to use for this request."
    name: "deploymentOrModelName"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The configuration information for a chat completions request. Completions support a\n     wide variety of tasks and generate text that continues from or \"completes\" provided prompt data."
    name: "chatCompletionsOptions"
    type: "<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<BinaryData>> getChatCompletionsWithResponse(String deploymentOrModelName, BinaryData chatCompletionsOptions, RequestOptions requestOptions)"
  desc: "Gets chat completions for the provided chat messages. Completions support a wide variety of tasks and generate text that continues from or \"completes\" provided prompt data.\n\n**Request Body Schema**\n\n```java\n{\n     messages (Required): [\n          (Required){\n             role: String(system/assistant/user) (Required)\n             content: String (Optional)\n         }\n     ]\n     max_tokens: Integer (Optional)\n     temperature: Double (Optional)\n     top_p: Double (Optional)\n     logit_bias (Optional): {\n         String: int (Optional)\n     }\n     user: String (Optional)\n     n: Integer (Optional)\n     stop (Optional): [\n         String (Optional)\n     ]\n     presence_penalty: Double (Optional)\n     frequency_penalty: Double (Optional)\n     stream: Boolean (Optional)\n     model: String (Optional)\n }\n```\n\n**Response Body Schema**\n\n```java\n{\n     id: String (Required)\n     created: int (Required)\n     choices (Required): [\n          (Required){\n             message (Optional): {\n                 role: String(system/assistant/user) (Required)\n                 content: String (Optional)\n             }\n             index: int (Required)\n             finish_reason: String(stopped/tokenLimitReached/contentFiltered) (Required)\n             delta (Optional): {\n                 role: String(system/assistant/user) (Optional)\n                 content: String (Optional)\n             }\n         }\n     ]\n     usage (Required): {\n         completion_tokens: int (Required)\n         prompt_tokens: int (Required)\n         total_tokens: int (Required)\n     }\n }\n```"
  returns:
    description: "chat completions for the provided chat messages. Completions support a wide variety of tasks and generate\n     text that continues from or \"completes\" provided prompt data along with <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> on successful\n     completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.ai.openai.OpenAIAsyncClient.getCompletions(java.lang.String,com.azure.ai.openai.models.CompletionsOptions)"
  fullName: "com.azure.ai.openai.OpenAIAsyncClient.getCompletions(String deploymentOrModelName, CompletionsOptions completionsOptions)"
  name: "getCompletions(String deploymentOrModelName, CompletionsOptions completionsOptions)"
  nameWithType: "OpenAIAsyncClient.getCompletions(String deploymentOrModelName, CompletionsOptions completionsOptions)"
  summary: "Gets completions for the provided input prompts."
  parameters:
  - description: "Specifies either the model deployment name (when using Azure OpenAI) or model name\n     (when using non-Azure OpenAI) to use for this request."
    name: "deploymentOrModelName"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The configuration information for a completions request. Completions support a wide\n     variety of tasks and generate text that continues from or \"completes\" provided prompt data."
    name: "completionsOptions"
    type: "<xref href=\"com.azure.ai.openai.models.CompletionsOptions?alt=com.azure.ai.openai.models.CompletionsOptions&text=CompletionsOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Completions> getCompletions(String deploymentOrModelName, CompletionsOptions completionsOptions)"
  desc: "Gets completions for the provided input prompts. Completions support a wide variety of tasks and generate text that continues from or \"completes\" provided prompt data."
  returns:
    description: "completions for the provided input prompts. Completions support a wide variety of tasks and generate text\n     that continues from or \"completes\" provided prompt data on successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.ai.openai.models.Completions?alt=com.azure.ai.openai.models.Completions&text=Completions\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.ai.openai.OpenAIAsyncClient.getCompletions(java.lang.String,java.lang.String)"
  fullName: "com.azure.ai.openai.OpenAIAsyncClient.getCompletions(String deploymentOrModelName, String prompt)"
  name: "getCompletions(String deploymentOrModelName, String prompt)"
  nameWithType: "OpenAIAsyncClient.getCompletions(String deploymentOrModelName, String prompt)"
  summary: "Gets completions for the provided input prompt."
  parameters:
  - description: "Specifies either the model deployment name (when using Azure OpenAI) or model name\n     (when using non-Azure OpenAI) to use for this request."
    name: "deploymentOrModelName"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The prompt to generate completion text from."
    name: "prompt"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public Mono<Completions> getCompletions(String deploymentOrModelName, String prompt)"
  desc: "Gets completions for the provided input prompt. Completions support a wide variety of tasks and generate text that continues from or \"completes\" provided prompt data."
  returns:
    description: "completions for the provided input prompts. Completions support a wide variety of tasks and generate text\n     that continues from or \"completes\" provided prompt data on successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.ai.openai.models.Completions?alt=com.azure.ai.openai.models.Completions&text=Completions\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.ai.openai.OpenAIAsyncClient.getCompletionsStream(java.lang.String,com.azure.ai.openai.models.CompletionsOptions)"
  fullName: "com.azure.ai.openai.OpenAIAsyncClient.getCompletionsStream(String deploymentOrModelName, CompletionsOptions completionsOptions)"
  name: "getCompletionsStream(String deploymentOrModelName, CompletionsOptions completionsOptions)"
  nameWithType: "OpenAIAsyncClient.getCompletionsStream(String deploymentOrModelName, CompletionsOptions completionsOptions)"
  summary: "Gets completions as a stream for the provided input prompts."
  parameters:
  - description: "Specifies either the model deployment name (when using Azure OpenAI) or model name\n     (when using non-Azure OpenAI) to use for this request."
    name: "deploymentOrModelName"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The configuration information for a completions request. Completions support a wide\n     variety of tasks and generate text that continues from or \"completes\" provided prompt data."
    name: "completionsOptions"
    type: "<xref href=\"com.azure.ai.openai.models.CompletionsOptions?alt=com.azure.ai.openai.models.CompletionsOptions&text=CompletionsOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Flux<Completions> getCompletionsStream(String deploymentOrModelName, CompletionsOptions completionsOptions)"
  desc: "Gets completions as a stream for the provided input prompts. Completions support a wide variety of tasks and generate text that continues from or \"completes\" provided prompt data."
  returns:
    description: "a <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Flux\"></xref> of completions for the provided input prompts. Completions support a wide variety of tasks\n     and generate text that continues from or \"completes\" provided prompt data."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Flux.html\">Flux</a>&lt;<xref href=\"com.azure.ai.openai.models.Completions?alt=com.azure.ai.openai.models.Completions&text=Completions\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.ai.openai.OpenAIAsyncClient.getCompletionsWithResponse(java.lang.String,com.azure.core.util.BinaryData,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.ai.openai.OpenAIAsyncClient.getCompletionsWithResponse(String deploymentOrModelName, BinaryData completionsOptions, RequestOptions requestOptions)"
  name: "getCompletionsWithResponse(String deploymentOrModelName, BinaryData completionsOptions, RequestOptions requestOptions)"
  nameWithType: "OpenAIAsyncClient.getCompletionsWithResponse(String deploymentOrModelName, BinaryData completionsOptions, RequestOptions requestOptions)"
  summary: "Gets completions for the provided input prompts."
  parameters:
  - description: "Specifies either the model deployment name (when using Azure OpenAI) or model name\n     (when using non-Azure OpenAI) to use for this request."
    name: "deploymentOrModelName"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The configuration information for a completions request. Completions support a wide\n     variety of tasks and generate text that continues from or \"completes\" provided prompt data."
    name: "completionsOptions"
    type: "<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<BinaryData>> getCompletionsWithResponse(String deploymentOrModelName, BinaryData completionsOptions, RequestOptions requestOptions)"
  desc: "Gets completions for the provided input prompts. Completions support a wide variety of tasks and generate text that continues from or \"completes\" provided prompt data.\n\n**Request Body Schema**\n\n```java\n{\n     prompt (Required): [\n         String (Required)\n     ]\n     max_tokens: Integer (Optional)\n     temperature: Double (Optional)\n     top_p: Double (Optional)\n     logit_bias (Optional): {\n         String: int (Optional)\n     }\n     user: String (Optional)\n     n: Integer (Optional)\n     logprobs: Integer (Optional)\n     echo: Boolean (Optional)\n     stop (Optional): [\n         String (Optional)\n     ]\n     presence_penalty: Double (Optional)\n     frequency_penalty: Double (Optional)\n     best_of: Integer (Optional)\n     stream: Boolean (Optional)\n     model: String (Optional)\n }\n```\n\n**Response Body Schema**\n\n```java\n{\n     id: String (Required)\n     created: int (Required)\n     choices (Required): [\n          (Required){\n             text: String (Required)\n             index: int (Required)\n             logprobs (Required): {\n                 tokens (Required): [\n                     String (Required)\n                 ]\n                 token_logprobs (Required): [\n                     double (Required)\n                 ]\n                 top_logprobs (Required): [\n                      (Required){\n                         String: double (Required)\n                     }\n                 ]\n                 text_offset (Required): [\n                     int (Required)\n                 ]\n             }\n             finish_reason: String(stopped/tokenLimitReached/contentFiltered) (Required)\n         }\n     ]\n     usage (Required): {\n         completion_tokens: int (Required)\n         prompt_tokens: int (Required)\n         total_tokens: int (Required)\n     }\n }\n```"
  returns:
    description: "completions for the provided input prompts. Completions support a wide variety of tasks and generate text\n     that continues from or \"completes\" provided prompt data along with <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> on successful completion\n     of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.ai.openai.OpenAIAsyncClient.getEmbeddings(java.lang.String,com.azure.ai.openai.models.EmbeddingsOptions)"
  fullName: "com.azure.ai.openai.OpenAIAsyncClient.getEmbeddings(String deploymentOrModelName, EmbeddingsOptions embeddingsOptions)"
  name: "getEmbeddings(String deploymentOrModelName, EmbeddingsOptions embeddingsOptions)"
  nameWithType: "OpenAIAsyncClient.getEmbeddings(String deploymentOrModelName, EmbeddingsOptions embeddingsOptions)"
  summary: "Return the embeddings for a given prompt."
  parameters:
  - description: "Specifies either the model deployment name (when using Azure OpenAI) or model name\n     (when using non-Azure OpenAI) to use for this request."
    name: "deploymentOrModelName"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The configuration information for an embeddings request. Embeddings measure the\n     relatedness of text strings and are commonly used for search, clustering, recommendations, and other similar\n     scenarios."
    name: "embeddingsOptions"
    type: "<xref href=\"com.azure.ai.openai.models.EmbeddingsOptions?alt=com.azure.ai.openai.models.EmbeddingsOptions&text=EmbeddingsOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Embeddings> getEmbeddings(String deploymentOrModelName, EmbeddingsOptions embeddingsOptions)"
  desc: "Return the embeddings for a given prompt."
  returns:
    description: "representation of the response data from an embeddings request. Embeddings measure the relatedness of\n     text strings and are commonly used for search, clustering, recommendations, and other similar scenarios on\n     successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.ai.openai.models.Embeddings?alt=com.azure.ai.openai.models.Embeddings&text=Embeddings\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.ai.openai.OpenAIAsyncClient.getEmbeddingsWithResponse(java.lang.String,com.azure.core.util.BinaryData,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.ai.openai.OpenAIAsyncClient.getEmbeddingsWithResponse(String deploymentOrModelName, BinaryData embeddingsOptions, RequestOptions requestOptions)"
  name: "getEmbeddingsWithResponse(String deploymentOrModelName, BinaryData embeddingsOptions, RequestOptions requestOptions)"
  nameWithType: "OpenAIAsyncClient.getEmbeddingsWithResponse(String deploymentOrModelName, BinaryData embeddingsOptions, RequestOptions requestOptions)"
  summary: "Return the embeddings for a given prompt."
  parameters:
  - description: "Specifies either the model deployment name (when using Azure OpenAI) or model name\n     (when using non-Azure OpenAI) to use for this request."
    name: "deploymentOrModelName"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The configuration information for an embeddings request. Embeddings measure the\n     relatedness of text strings and are commonly used for search, clustering, recommendations, and other similar\n     scenarios."
    name: "embeddingsOptions"
    type: "<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<BinaryData>> getEmbeddingsWithResponse(String deploymentOrModelName, BinaryData embeddingsOptions, RequestOptions requestOptions)"
  desc: "Return the embeddings for a given prompt.\n\n**Request Body Schema**\n\n```java\n{\n     user: String (Optional)\n     model: String (Optional)\n     input (Required): [\n         String (Required)\n     ]\n }\n```\n\n**Response Body Schema**\n\n```java\n{\n     data (Required): [\n          (Required){\n             embedding (Required): [\n                 double (Required)\n             ]\n             index: int (Required)\n         }\n     ]\n     usage (Required): {\n         prompt_tokens: int (Required)\n         total_tokens: int (Required)\n     }\n }\n```"
  returns:
    description: "representation of the response data from an embeddings request. Embeddings measure the relatedness of\n     text strings and are commonly used for search, clustering, recommendations, and other similar scenarios along\n     with <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> on successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.ai.openai.OpenAIAsyncClient.getImages(com.azure.ai.openai.models.ImageGenerationOptions)"
  fullName: "com.azure.ai.openai.OpenAIAsyncClient.getImages(ImageGenerationOptions imageGenerationOptions)"
  name: "getImages(ImageGenerationOptions imageGenerationOptions)"
  nameWithType: "OpenAIAsyncClient.getImages(ImageGenerationOptions imageGenerationOptions)"
  summary: "Starts the generation of a batch of images from a text caption."
  parameters:
  - description: "Represents the request data used to generate images."
    name: "imageGenerationOptions"
    type: "<xref href=\"com.azure.ai.openai.models.ImageGenerationOptions?alt=com.azure.ai.openai.models.ImageGenerationOptions&text=ImageGenerationOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<ImageResponse> getImages(ImageGenerationOptions imageGenerationOptions)"
  desc: "Starts the generation of a batch of images from a text caption."
  returns:
    description: "the <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> with the image generation result"
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.ai.openai.models.ImageResponse?alt=com.azure.ai.openai.models.ImageResponse&text=ImageResponse\" data-throw-if-not-resolved=\"False\" />&gt;"
type: "class"
desc: "Initializes a new instance of the asynchronous OpenAIClient type."
metadata: {}
package: "com.azure.ai.openai"
artifact: com.azure:azure-ai-openai:1.0.0-beta.3
