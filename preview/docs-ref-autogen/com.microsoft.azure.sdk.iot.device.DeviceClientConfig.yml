### YamlMime:JavaType
uid: "com.microsoft.azure.sdk.iot.device.DeviceClientConfig"
fullName: "com.microsoft.azure.sdk.iot.device.DeviceClientConfig"
name: "DeviceClientConfig"
nameWithType: "DeviceClientConfig"
summary: "Configuration settings for an IoT Hub client."
inheritances:
- "<xref href=\"java.lang.Object?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
inheritedMembers:
- "java.lang.Object.clone()"
- "java.lang.Object.equals(java.lang.Object)"
- "java.lang.Object.finalize()"
- "java.lang.Object.getClass()"
- "java.lang.Object.hashCode()"
- "java.lang.Object.notify()"
- "java.lang.Object.notifyAll()"
- "java.lang.Object.toString()"
- "java.lang.Object.wait()"
- "java.lang.Object.wait(long)"
- "java.lang.Object.wait(long,int)"
syntax: "public final class DeviceClientConfig"
constructors:
- uid: "com.microsoft.azure.sdk.iot.device.DeviceClientConfig.DeviceClientConfig()"
  fullName: "com.microsoft.azure.sdk.iot.device.DeviceClientConfig.DeviceClientConfig()"
  name: "DeviceClientConfig()"
  nameWithType: "DeviceClientConfig.DeviceClientConfig()"
  modifiers:
  - "protected"
  syntax: "protected DeviceClientConfig()"
- uid: "com.microsoft.azure.sdk.iot.device.DeviceClientConfig.DeviceClientConfig(com.microsoft.azure.sdk.iot.device.IotHubConnectionString)"
  fullName: "com.microsoft.azure.sdk.iot.device.DeviceClientConfig.DeviceClientConfig(IotHubConnectionString iotHubConnectionString)"
  name: "DeviceClientConfig(IotHubConnectionString iotHubConnectionString)"
  nameWithType: "DeviceClientConfig.DeviceClientConfig(IotHubConnectionString iotHubConnectionString)"
  summary: "Constructor"
  parameters:
  - description: "is the string with the hostname, deviceId, and\n                               deviceKey or token, which identify the device in\n                               the Azure IotHub."
    name: "iotHubConnectionString"
    type: "<xref href=\"com.microsoft.azure.sdk.iot.device.IotHubConnectionString?alt=com.microsoft.azure.sdk.iot.device.IotHubConnectionString&text=IotHubConnectionString\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public DeviceClientConfig(IotHubConnectionString iotHubConnectionString)"
  exceptions:
  - description: "if the IoT Hub hostname does not contain\n a valid IoT Hub name as its prefix."
    type: "<xref href=\"java.lang.IllegalArgumentException?alt=java.lang.IllegalArgumentException&text=IllegalArgumentException\" data-throw-if-not-resolved=\"False\" />"
  desc: "Constructor"
- uid: "com.microsoft.azure.sdk.iot.device.DeviceClientConfig.DeviceClientConfig(com.microsoft.azure.sdk.iot.device.IotHubConnectionString,com.microsoft.azure.sdk.iot.device.ClientOptions)"
  fullName: "com.microsoft.azure.sdk.iot.device.DeviceClientConfig.DeviceClientConfig(IotHubConnectionString iotHubConnectionString, ClientOptions clientOptions)"
  name: "DeviceClientConfig(IotHubConnectionString iotHubConnectionString, ClientOptions clientOptions)"
  nameWithType: "DeviceClientConfig.DeviceClientConfig(IotHubConnectionString iotHubConnectionString, ClientOptions clientOptions)"
  parameters:
  - name: "iotHubConnectionString"
    type: "<xref href=\"com.microsoft.azure.sdk.iot.device.IotHubConnectionString?alt=com.microsoft.azure.sdk.iot.device.IotHubConnectionString&text=IotHubConnectionString\" data-throw-if-not-resolved=\"False\" />"
  - name: "clientOptions"
    type: "<xref href=\"com.microsoft.azure.sdk.iot.device.ClientOptions?alt=com.microsoft.azure.sdk.iot.device.ClientOptions&text=ClientOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public DeviceClientConfig(IotHubConnectionString iotHubConnectionString, ClientOptions clientOptions)"
- uid: "com.microsoft.azure.sdk.iot.device.DeviceClientConfig.DeviceClientConfig(com.microsoft.azure.sdk.iot.device.IotHubConnectionString,java.lang.String,boolean,java.lang.String,boolean)"
  fullName: "com.microsoft.azure.sdk.iot.device.DeviceClientConfig.DeviceClientConfig(IotHubConnectionString iotHubConnectionString, String publicKeyCertificate, boolean isPathForPublic, String privateKey, boolean isPathForPrivate)"
  name: "DeviceClientConfig(IotHubConnectionString iotHubConnectionString, String publicKeyCertificate, boolean isPathForPublic, String privateKey, boolean isPathForPrivate)"
  nameWithType: "DeviceClientConfig.DeviceClientConfig(IotHubConnectionString iotHubConnectionString, String publicKeyCertificate, boolean isPathForPublic, String privateKey, boolean isPathForPrivate)"
  summary: "Constructor for device configs that use x509 authentication"
  parameters:
  - description: "The connection string for the device. (format: \"HostName=...;deviceId=...;x509=true\")"
    name: "iotHubConnectionString"
    type: "<xref href=\"com.microsoft.azure.sdk.iot.device.IotHubConnectionString?alt=com.microsoft.azure.sdk.iot.device.IotHubConnectionString&text=IotHubConnectionString\" data-throw-if-not-resolved=\"False\" />"
  - description: "The PEM encoded public key certificate or the path to the PEM encoded public key certificate file"
    name: "publicKeyCertificate"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "If the provided publicKeyCertificate is a path to the actual public key certificate"
    name: "isPathForPublic"
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
  - description: "The PEM encoded private key or the path to the PEM encoded private key file"
    name: "privateKey"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "If the provided privateKey is a path to the actual private key"
    name: "isPathForPrivate"
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public DeviceClientConfig(IotHubConnectionString iotHubConnectionString, String publicKeyCertificate, boolean isPathForPublic, String privateKey, boolean isPathForPrivate)"
  desc: "Constructor for device configs that use x509 authentication"
- uid: "com.microsoft.azure.sdk.iot.device.DeviceClientConfig.DeviceClientConfig(com.microsoft.azure.sdk.iot.device.IotHubConnectionString,javax.net.ssl.SSLContext)"
  fullName: "com.microsoft.azure.sdk.iot.device.DeviceClientConfig.DeviceClientConfig(IotHubConnectionString iotHubConnectionString, SSLContext sslContext)"
  name: "DeviceClientConfig(IotHubConnectionString iotHubConnectionString, SSLContext sslContext)"
  nameWithType: "DeviceClientConfig.DeviceClientConfig(IotHubConnectionString iotHubConnectionString, SSLContext sslContext)"
  parameters:
  - name: "iotHubConnectionString"
    type: "<xref href=\"com.microsoft.azure.sdk.iot.device.IotHubConnectionString?alt=com.microsoft.azure.sdk.iot.device.IotHubConnectionString&text=IotHubConnectionString\" data-throw-if-not-resolved=\"False\" />"
  - name: "sslContext"
    type: "<xref href=\"javax.net.ssl.SSLContext?alt=javax.net.ssl.SSLContext&text=SSLContext\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public DeviceClientConfig(IotHubConnectionString iotHubConnectionString, SSLContext sslContext)"
- uid: "com.microsoft.azure.sdk.iot.device.DeviceClientConfig.DeviceClientConfig(com.microsoft.azure.sdk.iot.device.auth.IotHubAuthenticationProvider)"
  fullName: "com.microsoft.azure.sdk.iot.device.DeviceClientConfig.DeviceClientConfig(IotHubAuthenticationProvider authenticationProvider)"
  name: "DeviceClientConfig(IotHubAuthenticationProvider authenticationProvider)"
  nameWithType: "DeviceClientConfig.DeviceClientConfig(IotHubAuthenticationProvider authenticationProvider)"
  parameters:
  - name: "authenticationProvider"
    type: "<xref href=\"com.microsoft.azure.sdk.iot.device.auth.IotHubAuthenticationProvider?alt=com.microsoft.azure.sdk.iot.device.auth.IotHubAuthenticationProvider&text=IotHubAuthenticationProvider\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public DeviceClientConfig(IotHubAuthenticationProvider authenticationProvider)"
  exceptions:
  - type: "<xref href=\"java.lang.IllegalArgumentException?alt=java.lang.IllegalArgumentException&text=IllegalArgumentException\" data-throw-if-not-resolved=\"False\" />"
methods:
- uid: "com.microsoft.azure.sdk.iot.device.DeviceClientConfig.getAuthenticationProvider()"
  fullName: "com.microsoft.azure.sdk.iot.device.DeviceClientConfig.getAuthenticationProvider()"
  name: "getAuthenticationProvider()"
  nameWithType: "DeviceClientConfig.getAuthenticationProvider()"
  syntax: "public IotHubAuthenticationProvider getAuthenticationProvider()"
  returns:
    type: "<xref href=\"com.microsoft.azure.sdk.iot.device.auth.IotHubAuthenticationProvider?alt=com.microsoft.azure.sdk.iot.device.auth.IotHubAuthenticationProvider&text=IotHubAuthenticationProvider\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.sdk.iot.device.DeviceClientConfig.getAuthenticationType()"
  fullName: "com.microsoft.azure.sdk.iot.device.DeviceClientConfig.getAuthenticationType()"
  name: "getAuthenticationType()"
  nameWithType: "DeviceClientConfig.getAuthenticationType()"
  summary: "Getter for Authentication<wbr>Type"
  syntax: "public DeviceClientConfig.AuthType getAuthenticationType()"
  desc: "Getter for AuthenticationType"
  returns:
    description: "The value of AuthenticationType"
    type: "<xref href=\"com.microsoft.azure.sdk.iot.device.DeviceClientConfig.AuthType?alt=com.microsoft.azure.sdk.iot.device.DeviceClientConfig.AuthType&text=AuthType\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.sdk.iot.device.DeviceClientConfig.getDeviceId()"
  fullName: "com.microsoft.azure.sdk.iot.device.DeviceClientConfig.getDeviceId()"
  name: "getDeviceId()"
  nameWithType: "DeviceClientConfig.getDeviceId()"
  summary: "Getter for the device ID."
  syntax: "public String getDeviceId()"
  desc: "Getter for the device ID."
  returns:
    description: "the device ID."
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.sdk.iot.device.DeviceClientConfig.getDeviceMethodsMessageCallback()"
  fullName: "com.microsoft.azure.sdk.iot.device.DeviceClientConfig.getDeviceMethodsMessageCallback()"
  name: "getDeviceMethodsMessageCallback()"
  nameWithType: "DeviceClientConfig.getDeviceMethodsMessageCallback()"
  summary: "Getter for the device twin message callback."
  syntax: "public MessageCallback getDeviceMethodsMessageCallback()"
  desc: "Getter for the device twin message callback."
  returns:
    description: "the device method message callback."
    type: "<xref href=\"com.microsoft.azure.sdk.iot.device.MessageCallback?alt=com.microsoft.azure.sdk.iot.device.MessageCallback&text=MessageCallback\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.sdk.iot.device.DeviceClientConfig.getDeviceMethodsMessageContext()"
  fullName: "com.microsoft.azure.sdk.iot.device.DeviceClientConfig.getDeviceMethodsMessageContext()"
  name: "getDeviceMethodsMessageContext()"
  nameWithType: "DeviceClientConfig.getDeviceMethodsMessageContext()"
  summary: "Getter for the context to be passed in to the device twin message callback."
  syntax: "public Object getDeviceMethodsMessageContext()"
  desc: "Getter for the context to be passed in to the device twin message callback."
  returns:
    description: "the device method message context."
    type: "<xref href=\"java.lang.Object?alt=java.lang.Object&text=Object\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.sdk.iot.device.DeviceClientConfig.getDeviceTelemetryMessageCallback(java.lang.String)"
  fullName: "com.microsoft.azure.sdk.iot.device.DeviceClientConfig.getDeviceTelemetryMessageCallback(String inputName)"
  name: "getDeviceTelemetryMessageCallback(String inputName)"
  nameWithType: "DeviceClientConfig.getDeviceTelemetryMessageCallback(String inputName)"
  summary: "Getter for the message callback."
  parameters:
  - description: "the inputName that the desired callback is tied to, or null for the default callback"
    name: "inputName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public MessageCallback getDeviceTelemetryMessageCallback(String inputName)"
  desc: "Getter for the message callback."
  returns:
    description: "the message callback."
    type: "<xref href=\"com.microsoft.azure.sdk.iot.device.MessageCallback?alt=com.microsoft.azure.sdk.iot.device.MessageCallback&text=MessageCallback\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.sdk.iot.device.DeviceClientConfig.getDeviceTelemetryMessageContext(java.lang.String)"
  fullName: "com.microsoft.azure.sdk.iot.device.DeviceClientConfig.getDeviceTelemetryMessageContext(String inputName)"
  name: "getDeviceTelemetryMessageContext(String inputName)"
  nameWithType: "DeviceClientConfig.getDeviceTelemetryMessageContext(String inputName)"
  summary: "Getter for the context to be passed in to the message callback."
  parameters:
  - description: "the inputName that the desired callback context is tied to, or null for the default callback context"
    name: "inputName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Object getDeviceTelemetryMessageContext(String inputName)"
  desc: "Getter for the context to be passed in to the message callback."
  returns:
    description: "the message context."
    type: "<xref href=\"java.lang.Object?alt=java.lang.Object&text=Object\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.sdk.iot.device.DeviceClientConfig.getDeviceTwinMessageCallback()"
  fullName: "com.microsoft.azure.sdk.iot.device.DeviceClientConfig.getDeviceTwinMessageCallback()"
  name: "getDeviceTwinMessageCallback()"
  nameWithType: "DeviceClientConfig.getDeviceTwinMessageCallback()"
  summary: "Getter for the device twin message callback."
  syntax: "public MessageCallback getDeviceTwinMessageCallback()"
  desc: "Getter for the device twin message callback."
  returns:
    description: "the device twin message callback."
    type: "<xref href=\"com.microsoft.azure.sdk.iot.device.MessageCallback?alt=com.microsoft.azure.sdk.iot.device.MessageCallback&text=MessageCallback\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.sdk.iot.device.DeviceClientConfig.getDeviceTwinMessageContext()"
  fullName: "com.microsoft.azure.sdk.iot.device.DeviceClientConfig.getDeviceTwinMessageContext()"
  name: "getDeviceTwinMessageContext()"
  nameWithType: "DeviceClientConfig.getDeviceTwinMessageContext()"
  summary: "Getter for the context to be passed in to the device twin message callback."
  syntax: "public Object getDeviceTwinMessageContext()"
  desc: "Getter for the context to be passed in to the device twin message callback."
  returns:
    description: "the device twin message context."
    type: "<xref href=\"java.lang.Object?alt=java.lang.Object&text=Object\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.sdk.iot.device.DeviceClientConfig.getGatewayHostname()"
  fullName: "com.microsoft.azure.sdk.iot.device.DeviceClientConfig.getGatewayHostname()"
  name: "getGatewayHostname()"
  nameWithType: "DeviceClientConfig.getGatewayHostname()"
  summary: "Getter for the Gateway host name."
  syntax: "public String getGatewayHostname()"
  desc: "Getter for the Gateway host name."
  returns:
    description: "the name of the gateway host"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.sdk.iot.device.DeviceClientConfig.getIotHubHostname()"
  fullName: "com.microsoft.azure.sdk.iot.device.DeviceClientConfig.getIotHubHostname()"
  name: "getIotHubHostname()"
  nameWithType: "DeviceClientConfig.getIotHubHostname()"
  summary: "Getter for the IoT Hub hostname."
  syntax: "public String getIotHubHostname()"
  desc: "Getter for the IoT Hub hostname."
  returns:
    description: "the IoT Hub hostname."
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.sdk.iot.device.DeviceClientConfig.getIotHubName()"
  fullName: "com.microsoft.azure.sdk.iot.device.DeviceClientConfig.getIotHubName()"
  name: "getIotHubName()"
  nameWithType: "DeviceClientConfig.getIotHubName()"
  summary: "Getter for the IoT Hub name."
  syntax: "public String getIotHubName()"
  desc: "Getter for the IoT Hub name."
  returns:
    description: "the IoT Hub name."
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.sdk.iot.device.DeviceClientConfig.getMessageLockTimeoutSecs()"
  fullName: "com.microsoft.azure.sdk.iot.device.DeviceClientConfig.getMessageLockTimeoutSecs()"
  name: "getMessageLockTimeoutSecs()"
  nameWithType: "DeviceClientConfig.getMessageLockTimeoutSecs()"
  summary: "Getter for the timeout, in seconds, for the lock that the client has on a received message."
  syntax: "public int getMessageLockTimeoutSecs()"
  desc: "Getter for the timeout, in seconds, for the lock that the client has on a received message."
  returns:
    description: "the timeout, in seconds, for a received message lock."
    type: "<xref href=\"int?alt=int&text=int\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.sdk.iot.device.DeviceClientConfig.getModuleId()"
  fullName: "com.microsoft.azure.sdk.iot.device.DeviceClientConfig.getModuleId()"
  name: "getModuleId()"
  nameWithType: "DeviceClientConfig.getModuleId()"
  syntax: "public String getModuleId()"
  returns:
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.sdk.iot.device.DeviceClientConfig.getOperationTimeout()"
  fullName: "com.microsoft.azure.sdk.iot.device.DeviceClientConfig.getOperationTimeout()"
  name: "getOperationTimeout()"
  nameWithType: "DeviceClientConfig.getOperationTimeout()"
  summary: "Getter for the device operation timeout"
  syntax: "public long getOperationTimeout()"
  desc: "Getter for the device operation timeout"
  returns:
    description: "the amount of time, in milliseconds, before any device operation expires"
    type: "<xref href=\"long?alt=long&text=long\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.sdk.iot.device.DeviceClientConfig.getProductInfo()"
  fullName: "com.microsoft.azure.sdk.iot.device.DeviceClientConfig.getProductInfo()"
  name: "getProductInfo()"
  nameWithType: "DeviceClientConfig.getProductInfo()"
  syntax: "public ProductInfo getProductInfo()"
  returns:
    type: "<xref href=\"com.microsoft.azure.sdk.iot.device.ProductInfo?alt=com.microsoft.azure.sdk.iot.device.ProductInfo&text=ProductInfo\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.sdk.iot.device.DeviceClientConfig.getProtocol()"
  fullName: "com.microsoft.azure.sdk.iot.device.DeviceClientConfig.getProtocol()"
  name: "getProtocol()"
  nameWithType: "DeviceClientConfig.getProtocol()"
  syntax: "public IotHubClientProtocol getProtocol()"
  returns:
    type: "<xref href=\"com.microsoft.azure.sdk.iot.device.IotHubClientProtocol?alt=com.microsoft.azure.sdk.iot.device.IotHubClientProtocol&text=IotHubClientProtocol\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.sdk.iot.device.DeviceClientConfig.getProxySettings()"
  fullName: "com.microsoft.azure.sdk.iot.device.DeviceClientConfig.getProxySettings()"
  name: "getProxySettings()"
  nameWithType: "DeviceClientConfig.getProxySettings()"
  syntax: "public ProxySettings getProxySettings()"
  returns:
    type: "<xref href=\"com.microsoft.azure.sdk.iot.device.ProxySettings?alt=com.microsoft.azure.sdk.iot.device.ProxySettings&text=ProxySettings\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.sdk.iot.device.DeviceClientConfig.getRetryPolicy()"
  fullName: "com.microsoft.azure.sdk.iot.device.DeviceClientConfig.getRetryPolicy()"
  name: "getRetryPolicy()"
  nameWithType: "DeviceClientConfig.getRetryPolicy()"
  summary: "Getter for Retry<wbr>Policy"
  syntax: "public RetryPolicy getRetryPolicy()"
  desc: "Getter for RetryPolicy"
  returns:
    description: "The value of RetryPolicy"
    type: "<xref href=\"com.microsoft.azure.sdk.iot.device.transport.RetryPolicy?alt=com.microsoft.azure.sdk.iot.device.transport.RetryPolicy&text=RetryPolicy\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.sdk.iot.device.DeviceClientConfig.getSasTokenAuthentication()"
  fullName: "com.microsoft.azure.sdk.iot.device.DeviceClientConfig.getSasTokenAuthentication()"
  name: "getSasTokenAuthentication()"
  nameWithType: "DeviceClientConfig.getSasTokenAuthentication()"
  summary: "Getter for Sas<wbr>Token<wbr>Authentication"
  syntax: "public IotHubSasTokenAuthenticationProvider getSasTokenAuthentication()"
  desc: "Getter for SasTokenAuthentication"
  returns:
    description: "The value of SasTokenAuthentication, or null if this object isn't using sas token authentication"
    type: "<xref href=\"com.microsoft.azure.sdk.iot.device.auth.IotHubSasTokenAuthenticationProvider?alt=com.microsoft.azure.sdk.iot.device.auth.IotHubSasTokenAuthenticationProvider&text=IotHubSasTokenAuthenticationProvider\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.sdk.iot.device.DeviceClientConfig.isUseWebsocket()"
  fullName: "com.microsoft.azure.sdk.iot.device.DeviceClientConfig.isUseWebsocket()"
  name: "isUseWebsocket()"
  nameWithType: "DeviceClientConfig.isUseWebsocket()"
  summary: "Getter for Websocket"
  syntax: "public boolean isUseWebsocket()"
  desc: "Getter for Websocket"
  returns:
    description: "true if set, false otherwise"
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.sdk.iot.device.DeviceClientConfig.setDeviceMethodsMessageCallback(com.microsoft.azure.sdk.iot.device.MessageCallback,java.lang.Object)"
  fullName: "com.microsoft.azure.sdk.iot.device.DeviceClientConfig.setDeviceMethodsMessageCallback(MessageCallback callback, Object context)"
  name: "setDeviceMethodsMessageCallback(MessageCallback callback, Object context)"
  nameWithType: "DeviceClientConfig.setDeviceMethodsMessageCallback(MessageCallback callback, Object context)"
  summary: "Setter for the device method message callback."
  parameters:
  - description: "Callback for device method messages."
    name: "callback"
    type: "<xref href=\"com.microsoft.azure.sdk.iot.device.MessageCallback?alt=com.microsoft.azure.sdk.iot.device.MessageCallback&text=MessageCallback\" data-throw-if-not-resolved=\"False\" />"
  - description: "is the context for the callback."
    name: "context"
    type: "<xref href=\"java.lang.Object?alt=java.lang.Object&text=Object\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public void setDeviceMethodsMessageCallback(MessageCallback callback, Object context)"
  desc: "Setter for the device method message callback."
- uid: "com.microsoft.azure.sdk.iot.device.DeviceClientConfig.setDeviceTwinMessageCallback(com.microsoft.azure.sdk.iot.device.MessageCallback,java.lang.Object)"
  fullName: "com.microsoft.azure.sdk.iot.device.DeviceClientConfig.setDeviceTwinMessageCallback(MessageCallback callback, Object context)"
  name: "setDeviceTwinMessageCallback(MessageCallback callback, Object context)"
  nameWithType: "DeviceClientConfig.setDeviceTwinMessageCallback(MessageCallback callback, Object context)"
  summary: "Setter for the device twin message callback."
  parameters:
  - description: "callback to be invoked for device twin messages."
    name: "callback"
    type: "<xref href=\"com.microsoft.azure.sdk.iot.device.MessageCallback?alt=com.microsoft.azure.sdk.iot.device.MessageCallback&text=MessageCallback\" data-throw-if-not-resolved=\"False\" />"
  - description: "is the context for the callback."
    name: "context"
    type: "<xref href=\"java.lang.Object?alt=java.lang.Object&text=Object\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public void setDeviceTwinMessageCallback(MessageCallback callback, Object context)"
  desc: "Setter for the device twin message callback."
- uid: "com.microsoft.azure.sdk.iot.device.DeviceClientConfig.setMessageCallback(com.microsoft.azure.sdk.iot.device.MessageCallback,java.lang.Object)"
  fullName: "com.microsoft.azure.sdk.iot.device.DeviceClientConfig.setMessageCallback(MessageCallback callback, Object context)"
  name: "setMessageCallback(MessageCallback callback, Object context)"
  nameWithType: "DeviceClientConfig.setMessageCallback(MessageCallback callback, Object context)"
  summary: "Setter for the message callback."
  parameters:
  - description: "the message callback. Can be <code>null</code>."
    name: "callback"
    type: "<xref href=\"com.microsoft.azure.sdk.iot.device.MessageCallback?alt=com.microsoft.azure.sdk.iot.device.MessageCallback&text=MessageCallback\" data-throw-if-not-resolved=\"False\" />"
  - description: "the context to be passed in to the callback."
    name: "context"
    type: "<xref href=\"java.lang.Object?alt=java.lang.Object&text=Object\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public void setMessageCallback(MessageCallback callback, Object context)"
  desc: "Setter for the message callback. Can be `null`."
- uid: "com.microsoft.azure.sdk.iot.device.DeviceClientConfig.setMessageCallback(java.lang.String,com.microsoft.azure.sdk.iot.device.MessageCallback,java.lang.Object)"
  fullName: "com.microsoft.azure.sdk.iot.device.DeviceClientConfig.setMessageCallback(String inputName, MessageCallback callback, Object context)"
  name: "setMessageCallback(String inputName, MessageCallback callback, Object context)"
  nameWithType: "DeviceClientConfig.setMessageCallback(String inputName, MessageCallback callback, Object context)"
  parameters:
  - name: "inputName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - name: "callback"
    type: "<xref href=\"com.microsoft.azure.sdk.iot.device.MessageCallback?alt=com.microsoft.azure.sdk.iot.device.MessageCallback&text=MessageCallback\" data-throw-if-not-resolved=\"False\" />"
  - name: "context"
    type: "<xref href=\"java.lang.Object?alt=java.lang.Object&text=Object\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public void setMessageCallback(String inputName, MessageCallback callback, Object context)"
- uid: "com.microsoft.azure.sdk.iot.device.DeviceClientConfig.setProxy(com.microsoft.azure.sdk.iot.device.ProxySettings)"
  fullName: "com.microsoft.azure.sdk.iot.device.DeviceClientConfig.setProxy(ProxySettings proxySettings)"
  name: "setProxy(ProxySettings proxySettings)"
  nameWithType: "DeviceClientConfig.setProxy(ProxySettings proxySettings)"
  parameters:
  - name: "proxySettings"
    type: "<xref href=\"com.microsoft.azure.sdk.iot.device.ProxySettings?alt=com.microsoft.azure.sdk.iot.device.ProxySettings&text=ProxySettings\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public void setProxy(ProxySettings proxySettings)"
- uid: "com.microsoft.azure.sdk.iot.device.DeviceClientConfig.setRetryPolicy(com.microsoft.azure.sdk.iot.device.transport.RetryPolicy)"
  fullName: "com.microsoft.azure.sdk.iot.device.DeviceClientConfig.setRetryPolicy(RetryPolicy retryPolicy)"
  name: "setRetryPolicy(RetryPolicy retryPolicy)"
  nameWithType: "DeviceClientConfig.setRetryPolicy(RetryPolicy retryPolicy)"
  summary: "Setter for Retry<wbr>Policy"
  parameters:
  - description: "The types of retry policy to be used"
    name: "retryPolicy"
    type: "<xref href=\"com.microsoft.azure.sdk.iot.device.transport.RetryPolicy?alt=com.microsoft.azure.sdk.iot.device.transport.RetryPolicy&text=RetryPolicy\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public void setRetryPolicy(RetryPolicy retryPolicy)"
  exceptions:
  - description: "if retry policy is null"
    type: "<xref href=\"java.lang.IllegalArgumentException?alt=java.lang.IllegalArgumentException&text=IllegalArgumentException\" data-throw-if-not-resolved=\"False\" />"
  desc: "Setter for RetryPolicy"
- uid: "com.microsoft.azure.sdk.iot.device.DeviceClientConfig.setUseWebsocket(boolean)"
  fullName: "com.microsoft.azure.sdk.iot.device.DeviceClientConfig.setUseWebsocket(boolean useWebsocket)"
  name: "setUseWebsocket(boolean useWebsocket)"
  nameWithType: "DeviceClientConfig.setUseWebsocket(boolean useWebsocket)"
  summary: "Setter for Websocket"
  parameters:
  - description: "true if to be set, false otherwise"
    name: "useWebsocket"
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public void setUseWebsocket(boolean useWebsocket)"
  desc: "Setter for Websocket"
type: "class"
desc: "Configuration settings for an IoT Hub client. Validates all user-defined settings."
metadata: {}
package: "com.microsoft.azure.sdk.iot.device"
artifact: com.microsoft.azure.sdk.iot:iot-device-client-preview:1.2.0
