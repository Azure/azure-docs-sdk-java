### YamlMime:ManagedReference
items:
- uid: com.azure.spring.data.cosmos.repository.query.ReactiveCosmosQueryExecution
  id: ReactiveCosmosQueryExecution
  artifact: com.azure:azure-spring-data-cosmos:3.0.0-beta.2
  parent: com.azure.spring.data.cosmos.repository.query
  children:
  - com.azure.spring.data.cosmos.repository.query.ReactiveCosmosQueryExecution.ContainerExecution
  - com.azure.spring.data.cosmos.repository.query.ReactiveCosmosQueryExecution.DeleteExecution
  - com.azure.spring.data.cosmos.repository.query.ReactiveCosmosQueryExecution.ExistsExecution
  - com.azure.spring.data.cosmos.repository.query.ReactiveCosmosQueryExecution.MultiEntityExecution
  - com.azure.spring.data.cosmos.repository.query.ReactiveCosmosQueryExecution.SingleEntityExecution
  - com.azure.spring.data.cosmos.repository.query.ReactiveCosmosQueryExecution.execute(com.azure.spring.data.cosmos.core.query.CosmosQuery,java.lang.Class<?>,java.lang.String)
  langs:
  - java
  name: ReactiveCosmosQueryExecution
  nameWithType: ReactiveCosmosQueryExecution
  fullName: com.azure.spring.data.cosmos.repository.query.ReactiveCosmosQueryExecution
  type: Interface
  package: com.azure.spring.data.cosmos.repository.query
  summary: Interface to execute reactive cosmos query operations
  syntax:
    content: public interface ReactiveCosmosQueryExecution
- uid: com.azure.spring.data.cosmos.repository.query.ReactiveCosmosQueryExecution.execute(com.azure.spring.data.cosmos.core.query.CosmosQuery,java.lang.Class<?>,java.lang.String)
  id: execute(com.azure.spring.data.cosmos.core.query.CosmosQuery,java.lang.Class<?>,java.lang.String)
  artifact: com.azure:azure-spring-data-cosmos:3.0.0-beta.2
  parent: com.azure.spring.data.cosmos.repository.query.ReactiveCosmosQueryExecution
  langs:
  - java
  name: execute(CosmosQuery query, Class<?> type, String container)
  nameWithType: ReactiveCosmosQueryExecution.execute(CosmosQuery query, Class<?> type, String container)
  fullName: com.azure.spring.data.cosmos.repository.query.ReactiveCosmosQueryExecution.execute(CosmosQuery query, Class<?> type, String container)
  overload: com.azure.spring.data.cosmos.repository.query.ReactiveCosmosQueryExecution.execute*
  type: Method
  package: com.azure.spring.data.cosmos.repository.query
  summary: Declare an execute function for different operations to call
  syntax:
    content: public abstract Object execute(CosmosQuery query, Class<?> type, String container)
    parameters:
    - id: query
      type: com.azure.spring.data.cosmos.core.query.CosmosQuery
      description: document query operation
    - id: type
      type: java.lang.Class<?>
      description: domain type
    - id: container
      type: java.lang.String
      description: container to conduct query
    return:
      type: java.lang.Object
      description: Object according to execution result
references:
- uid: com.azure.spring.data.cosmos.core.query.CosmosQuery
  name: CosmosQuery
  nameWithType: CosmosQuery
  fullName: com.azure.spring.data.cosmos.core.query.CosmosQuery
- uid: java.lang.Class<?>
  spec.java:
  - uid: java.lang.Class
    name: Class
    fullName: java.lang.Class
  - name: <
    fullName: <
  - uid: '?'
    name: '?'
    fullName: '?'
  - name: '>'
    fullName: '>'
- uid: java.lang.String
  spec.java:
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
- uid: java.lang.Object
  spec.java:
  - uid: java.lang.Object
    name: Object
    fullName: java.lang.Object
- uid: com.azure.spring.data.cosmos.repository.query.ReactiveCosmosQueryExecution.execute*
  name: execute
  nameWithType: ReactiveCosmosQueryExecution.execute
  fullName: com.azure.spring.data.cosmos.repository.query.ReactiveCosmosQueryExecution.execute
  package: com.azure.spring.data.cosmos.repository.query
- uid: com.azure.spring.data.cosmos.repository.query.ReactiveCosmosQueryExecution.ContainerExecution
  name: ReactiveCosmosQueryExecution.ContainerExecution
  nameWithType: ReactiveCosmosQueryExecution.ContainerExecution
  fullName: com.azure.spring.data.cosmos.repository.query.ReactiveCosmosQueryExecution.ContainerExecution
- uid: com.azure.spring.data.cosmos.repository.query.ReactiveCosmosQueryExecution.DeleteExecution
  name: ReactiveCosmosQueryExecution.DeleteExecution
  nameWithType: ReactiveCosmosQueryExecution.DeleteExecution
  fullName: com.azure.spring.data.cosmos.repository.query.ReactiveCosmosQueryExecution.DeleteExecution
- uid: com.azure.spring.data.cosmos.repository.query.ReactiveCosmosQueryExecution.ExistsExecution
  name: ReactiveCosmosQueryExecution.ExistsExecution
  nameWithType: ReactiveCosmosQueryExecution.ExistsExecution
  fullName: com.azure.spring.data.cosmos.repository.query.ReactiveCosmosQueryExecution.ExistsExecution
- uid: com.azure.spring.data.cosmos.repository.query.ReactiveCosmosQueryExecution.MultiEntityExecution
  name: ReactiveCosmosQueryExecution.MultiEntityExecution
  nameWithType: ReactiveCosmosQueryExecution.MultiEntityExecution
  fullName: com.azure.spring.data.cosmos.repository.query.ReactiveCosmosQueryExecution.MultiEntityExecution
- uid: com.azure.spring.data.cosmos.repository.query.ReactiveCosmosQueryExecution.SingleEntityExecution
  name: ReactiveCosmosQueryExecution.SingleEntityExecution
  nameWithType: ReactiveCosmosQueryExecution.SingleEntityExecution
  fullName: com.azure.spring.data.cosmos.repository.query.ReactiveCosmosQueryExecution.SingleEntityExecution
- uid: java.lang.Class
  name: Class
  nameWithType: Class
  fullName: java.lang.Class
- uid: '?'
  name: '?'
  nameWithType: '?'
  fullName: '?'
