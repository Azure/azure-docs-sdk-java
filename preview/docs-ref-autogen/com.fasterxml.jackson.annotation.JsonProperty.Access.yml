### YamlMime:ManagedReference
items:
- uid: com.fasterxml.jackson.annotation.JsonProperty.Access
  id: Access
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.annotation
  children:
  - com.fasterxml.jackson.annotation.JsonProperty.Access.AUTO
  - com.fasterxml.jackson.annotation.JsonProperty.Access.READ_ONLY
  - com.fasterxml.jackson.annotation.JsonProperty.Access.READ_WRITE
  - com.fasterxml.jackson.annotation.JsonProperty.Access.WRITE_ONLY
  - com.fasterxml.jackson.annotation.JsonProperty.Access.valueOf(java.lang.String)
  - com.fasterxml.jackson.annotation.JsonProperty.Access.values()
  langs:
  - java
  name: JsonProperty.Access
  nameWithType: JsonProperty.Access
  fullName: com.fasterxml.jackson.annotation.JsonProperty.Access
  type: Enum
  package: com.fasterxml.jackson.annotation
  summary: >-
    Various options for <xref uid="com.fasterxml.jackson.annotation.JsonProperty.Access.access" data-throw-if-not-resolved="false">#access</xref> property, specifying how property may be accessed during serialization ("read") and deserialization ("write") (note that the direction of read and write is from perspective of the property, not from external data format: this may be confusing in some contexts).


    Note that while this annotation modifies access to annotated property, its effects may be further overridden by <xref uid="com.fasterxml.jackson.annotation.JsonIgnore" data-throw-if-not-resolved="false">JsonIgnore</xref> property: if both annotations are present on an accessors, <xref uid="com.fasterxml.jackson.annotation.JsonIgnore" data-throw-if-not-resolved="false">JsonIgnore</xref> has precedence over this property. This annotation property is, however, preferred over use of "split" <xref uid="com.fasterxml.jackson.annotation.JsonIgnore" data-throw-if-not-resolved="false">JsonIgnore</xref>/`JsonProperty` combination.
  syntax:
    content: public enum JsonProperty.Access extends Enum<JsonProperty.Access>
  inheritance:
  - java.lang.Object
  - java.lang.Enum
  inheritedMembers:
  - java.lang.Enum.<T>valueOf(java.lang.Class<T>,java.lang.String)
  - java.lang.Enum.clone()
  - java.lang.Enum.compareTo(E)
  - java.lang.Enum.equals(java.lang.Object)
  - java.lang.Enum.finalize()
  - java.lang.Enum.getDeclaringClass()
  - java.lang.Enum.hashCode()
  - java.lang.Enum.name()
  - java.lang.Enum.ordinal()
  - java.lang.Enum.toString()
  - java.lang.Object.getClass()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
- uid: com.fasterxml.jackson.annotation.JsonProperty.Access.AUTO
  id: AUTO
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.annotation.JsonProperty.Access
  langs:
  - java
  name: AUTO
  nameWithType: JsonProperty.Access.AUTO
  fullName: com.fasterxml.jackson.annotation.JsonProperty.Access.AUTO
  type: Field
  package: com.fasterxml.jackson.annotation
  summary: Access setting which means that visibility rules are to be used to automatically determine read- and/or write-access of this property.
  syntax:
    content: public static final JsonProperty.Access AUTO
    return:
      type: com.fasterxml.jackson.annotation.JsonProperty.Access
- uid: com.fasterxml.jackson.annotation.JsonProperty.Access.Access()
  id: Access()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.annotation.JsonProperty.Access
  langs:
  - java
  name: Access()
  nameWithType: JsonProperty.Access.Access()
  fullName: com.fasterxml.jackson.annotation.JsonProperty.Access.Access()
  overload: com.fasterxml.jackson.annotation.JsonProperty.Access.Access*
  type: Constructor
  package: com.fasterxml.jackson.annotation
  syntax:
    content: private Access()
- uid: com.fasterxml.jackson.annotation.JsonProperty.Access.READ_ONLY
  id: READ_ONLY
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.annotation.JsonProperty.Access
  langs:
  - java
  name: READ_ONLY
  nameWithType: JsonProperty.Access.READ_ONLY
  fullName: com.fasterxml.jackson.annotation.JsonProperty.Access.READ_ONLY
  type: Field
  package: com.fasterxml.jackson.annotation
  summary: Access setting that means that the property may only be read for serialization (value accessed via "getter" Method, or read from Field) but not written (set) during deserialization. Put another way, this would reflect "read-only POJO", in which value contained may be read but not written/set.
  syntax:
    content: public static final JsonProperty.Access READ_ONLY
    return:
      type: com.fasterxml.jackson.annotation.JsonProperty.Access
- uid: com.fasterxml.jackson.annotation.JsonProperty.Access.READ_WRITE
  id: READ_WRITE
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.annotation.JsonProperty.Access
  langs:
  - java
  name: READ_WRITE
  nameWithType: JsonProperty.Access.READ_WRITE
  fullName: com.fasterxml.jackson.annotation.JsonProperty.Access.READ_WRITE
  type: Field
  package: com.fasterxml.jackson.annotation
  summary: Access setting that means that the property will be accessed for both serialization (writing out values as external representation) and deserialization (reading values from external representation), regardless of visibility rules.
  syntax:
    content: public static final JsonProperty.Access READ_WRITE
    return:
      type: com.fasterxml.jackson.annotation.JsonProperty.Access
- uid: com.fasterxml.jackson.annotation.JsonProperty.Access.WRITE_ONLY
  id: WRITE_ONLY
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.annotation.JsonProperty.Access
  langs:
  - java
  name: WRITE_ONLY
  nameWithType: JsonProperty.Access.WRITE_ONLY
  fullName: com.fasterxml.jackson.annotation.JsonProperty.Access.WRITE_ONLY
  type: Field
  package: com.fasterxml.jackson.annotation
  summary: Access setting that means that the property may only be written (set) as part of deserialization (using "setter" method, or assigning to Field, or passed as Creator argument) but will not be read (get) for serialization, that is, the value of the property is not included in serialization.
  syntax:
    content: public static final JsonProperty.Access WRITE_ONLY
    return:
      type: com.fasterxml.jackson.annotation.JsonProperty.Access
- uid: com.fasterxml.jackson.annotation.JsonProperty.Access.valueOf(java.lang.String)
  id: valueOf(java.lang.String)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.annotation.JsonProperty.Access
  langs:
  - java
  name: valueOf(String name)
  nameWithType: JsonProperty.Access.valueOf(String name)
  fullName: com.fasterxml.jackson.annotation.JsonProperty.Access.valueOf(String name)
  overload: com.fasterxml.jackson.annotation.JsonProperty.Access.valueOf*
  type: Method
  package: com.fasterxml.jackson.annotation
  syntax:
    content: public static JsonProperty.Access valueOf(String name)
    parameters:
    - id: name
      type: java.lang.String
    return:
      type: com.fasterxml.jackson.annotation.JsonProperty.Access
- uid: com.fasterxml.jackson.annotation.JsonProperty.Access.values()
  id: values()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.annotation.JsonProperty.Access
  langs:
  - java
  name: values()
  nameWithType: JsonProperty.Access.values()
  fullName: com.fasterxml.jackson.annotation.JsonProperty.Access.values()
  overload: com.fasterxml.jackson.annotation.JsonProperty.Access.values*
  type: Method
  package: com.fasterxml.jackson.annotation
  syntax:
    content: public static JsonProperty.Access[] values()
    return:
      type: com.fasterxml.jackson.annotation.JsonProperty.Access[]
references:
- uid: com.fasterxml.jackson.annotation.JsonProperty.Access.Access*
  name: Access
  nameWithType: JsonProperty.Access.Access
  fullName: com.fasterxml.jackson.annotation.JsonProperty.Access.Access
  package: com.fasterxml.jackson.annotation
- uid: com.fasterxml.jackson.annotation.JsonProperty.Access[]
  spec.java:
  - uid: com.fasterxml.jackson.annotation.JsonProperty.Access
    name: Access
    fullName: com.fasterxml.jackson.annotation.JsonProperty.Access
  - name: '[]'
    fullName: '[]'
- uid: com.fasterxml.jackson.annotation.JsonProperty.Access.values*
  name: values
  nameWithType: JsonProperty.Access.values
  fullName: com.fasterxml.jackson.annotation.JsonProperty.Access.values
  package: com.fasterxml.jackson.annotation
- uid: java.lang.String
  spec.java:
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
- uid: com.fasterxml.jackson.annotation.JsonProperty.Access.valueOf*
  name: valueOf
  nameWithType: JsonProperty.Access.valueOf
  fullName: com.fasterxml.jackson.annotation.JsonProperty.Access.valueOf
  package: com.fasterxml.jackson.annotation
- uid: java.lang.Enum<com.fasterxml.jackson.annotation.JsonProperty.Access>
  name: Enum<JsonProperty.Access>
  nameWithType: Enum<JsonProperty.Access>
  fullName: java.lang.Enum<com.fasterxml.jackson.annotation.JsonProperty.Access>
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: java.lang.Enum.toString()
  name: Enum.toString()
  nameWithType: Enum.toString()
  fullName: java.lang.Enum.toString()
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: java.lang.Enum.clone()
  name: Enum.clone()
  nameWithType: Enum.clone()
  fullName: java.lang.Enum.clone()
- uid: java.lang.Enum.finalize()
  name: Enum.finalize()
  nameWithType: Enum.finalize()
  fullName: java.lang.Enum.finalize()
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: java.lang.Enum.compareTo(E)
  name: Enum.compareTo(E)
  nameWithType: Enum.compareTo(E)
  fullName: java.lang.Enum.compareTo(E)
- uid: java.lang.Enum.name()
  name: Enum.name()
  nameWithType: Enum.name()
  fullName: java.lang.Enum.name()
- uid: java.lang.Enum.<T>valueOf(java.lang.Class<T>,java.lang.String)
  name: Enum.<T>valueOf(Class<T>,String)
  nameWithType: Enum.<T>valueOf(Class<T>,String)
  fullName: java.lang.Enum.<T>valueOf(java.lang.Class<T>,java.lang.String)
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: java.lang.Enum.getDeclaringClass()
  name: Enum.getDeclaringClass()
  nameWithType: Enum.getDeclaringClass()
  fullName: java.lang.Enum.getDeclaringClass()
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.lang.Enum.ordinal()
  name: Enum.ordinal()
  nameWithType: Enum.ordinal()
  fullName: java.lang.Enum.ordinal()
- uid: java.lang.Enum.hashCode()
  name: Enum.hashCode()
  nameWithType: Enum.hashCode()
  fullName: java.lang.Enum.hashCode()
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: java.lang.Enum.equals(java.lang.Object)
  name: Enum.equals(Object)
  nameWithType: Enum.equals(Object)
  fullName: java.lang.Enum.equals(java.lang.Object)
- uid: java.lang.Enum
  name: Enum
  nameWithType: Enum
  fullName: java.lang.Enum
- uid: java.lang.Enum.
  name: Enum.
  nameWithType: Enum.
  fullName: java.lang.Enum.
- uid: T>,java.lang.String)
  name: T>,String)
  nameWithType: T>,String)
  fullName: T>,java.lang.String)
- uid: T>valueOf(java.lang.Class
  name: T>valueOf(Class
  nameWithType: T>valueOf(Class
  fullName: T>valueOf(java.lang.Class
