### YamlMime:JavaEnum
uid: "com.fasterxml.jackson.annotation.JsonProperty.Access"
fullName: "com.fasterxml.jackson.annotation.JsonProperty.Access"
name: "JsonProperty.Access"
nameWithType: "JsonProperty.Access"
summary: "Various options for <xref uid=\"com.fasterxml.jackson.annotation.JsonProperty.Access.access\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#access\"></xref> property, specifying how property may be accessed during serialization (\"read\") and deserialization (\"write\") (note that the direction of read and write is from perspective of the property, not from external data format: this may be confusing in some contexts).\n\nNote that while this annotation modifies access to annotated property, its effects may be further overridden by <xref uid=\"com.fasterxml.jackson.annotation.JsonIgnore\" data-throw-if-not-resolved=\"false\" data-raw-source=\"JsonIgnore\"></xref> property: if both annotations are present on an accessors, <xref uid=\"com.fasterxml.jackson.annotation.JsonIgnore\" data-throw-if-not-resolved=\"false\" data-raw-source=\"JsonIgnore\"></xref> has precedence over this property. This annotation property is, however, preferred over use of \"split\" <xref uid=\"com.fasterxml.jackson.annotation.JsonIgnore\" data-throw-if-not-resolved=\"false\" data-raw-source=\"JsonIgnore\"></xref>/`JsonProperty` combination."
inheritances:
- "<xref href=\"java.lang.Object\" data-throw-if-not-resolved=\"False\" />"
- "<xref href=\"java.lang.Enum\" data-throw-if-not-resolved=\"False\" />"
inheritedMembers:
- "java.lang.Enum.<T>valueOf(java.lang.Class<T>,java.lang.String)"
- "java.lang.Enum.clone()"
- "java.lang.Enum.compareTo(E)"
- "java.lang.Enum.equals(java.lang.Object)"
- "java.lang.Enum.finalize()"
- "java.lang.Enum.getDeclaringClass()"
- "java.lang.Enum.hashCode()"
- "java.lang.Enum.name()"
- "java.lang.Enum.ordinal()"
- "java.lang.Enum.toString()"
- "java.lang.Object.getClass()"
- "java.lang.Object.notify()"
- "java.lang.Object.notifyAll()"
- "java.lang.Object.wait()"
- "java.lang.Object.wait(long)"
- "java.lang.Object.wait(long,int)"
syntax: "public enum JsonProperty.Access extends Enum<JsonProperty.Access>"
fields:
- uid: "com.fasterxml.jackson.annotation.JsonProperty.Access.AUTO"
  fullName: "com.fasterxml.jackson.annotation.JsonProperty.Access.AUTO"
  name: "AUTO"
  nameWithType: "JsonProperty.Access.AUTO"
  summary: "Access setting which means that visibility rules are to be used to automatically determine read- and/or write-access of this property."
- uid: "com.fasterxml.jackson.annotation.JsonProperty.Access.READ_ONLY"
  fullName: "com.fasterxml.jackson.annotation.JsonProperty.Access.READ_ONLY"
  name: "READ_ONLY"
  nameWithType: "JsonProperty.Access.READ_ONLY"
  summary: "Access setting that means that the property may only be read for serialization (value accessed via \"getter\" Method, or read from Field) but not written (set) during deserialization. Put another way, this would reflect \"read-only POJO\", in which value contained may be read but not written/set."
- uid: "com.fasterxml.jackson.annotation.JsonProperty.Access.READ_WRITE"
  fullName: "com.fasterxml.jackson.annotation.JsonProperty.Access.READ_WRITE"
  name: "READ_WRITE"
  nameWithType: "JsonProperty.Access.READ_WRITE"
  summary: "Access setting that means that the property will be accessed for both serialization (writing out values as external representation) and deserialization (reading values from external representation), regardless of visibility rules."
- uid: "com.fasterxml.jackson.annotation.JsonProperty.Access.WRITE_ONLY"
  fullName: "com.fasterxml.jackson.annotation.JsonProperty.Access.WRITE_ONLY"
  name: "WRITE_ONLY"
  nameWithType: "JsonProperty.Access.WRITE_ONLY"
  summary: "Access setting that means that the property may only be written (set) as part of deserialization (using \"setter\" method, or assigning to Field, or passed as Creator argument) but will not be read (get) for serialization, that is, the value of the property is not included in serialization."
methods:
- uid: "com.fasterxml.jackson.annotation.JsonProperty.Access.valueOf(java.lang.String)"
  fullName: "com.fasterxml.jackson.annotation.JsonProperty.Access.valueOf(String name)"
  name: "valueOf(String name)"
  nameWithType: "JsonProperty.Access.valueOf(String name)"
  parameters:
  - name: "name"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public static JsonProperty.Access valueOf(String name)"
  returns:
    type: "<xref href=\"com.fasterxml.jackson.annotation.JsonProperty.Access?alt=com.fasterxml.jackson.annotation.JsonProperty.Access&text=Access\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.fasterxml.jackson.annotation.JsonProperty.Access.values()"
  fullName: "com.fasterxml.jackson.annotation.JsonProperty.Access.values()"
  name: "values()"
  nameWithType: "JsonProperty.Access.values()"
  syntax: "public static JsonProperty.Access[] values()"
  returns:
    type: "<xref href=\"com.fasterxml.jackson.annotation.JsonProperty.Access?alt=com.fasterxml.jackson.annotation.JsonProperty.Access&text=Access\" data-throw-if-not-resolved=\"False\" />[]"
metadata: {}
package: "com.fasterxml.jackson.annotation"
artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
