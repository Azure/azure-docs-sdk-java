### YamlMime:ManagedReference
items:
- uid: com.azure.cosmos.implementation.guava25.base.Equivalence
  id: Equivalence
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.base
  children:
  - com.azure.cosmos.implementation.guava25.base.Equivalence.<F>onResultOf(com.azure.cosmos.implementation.guava25.base.Function<F,? extends T>)
  - com.azure.cosmos.implementation.guava25.base.Equivalence.<S>pairwise()
  - com.azure.cosmos.implementation.guava25.base.Equivalence.<S>wrap(S)
  - com.azure.cosmos.implementation.guava25.base.Equivalence.Equivalence()
  - com.azure.cosmos.implementation.guava25.base.Equivalence.Wrapper
  - com.azure.cosmos.implementation.guava25.base.Equivalence.doEquivalent(T,T)
  - com.azure.cosmos.implementation.guava25.base.Equivalence.doHash(T)
  - com.azure.cosmos.implementation.guava25.base.Equivalence.equals()
  - com.azure.cosmos.implementation.guava25.base.Equivalence.equivalent(T,T)
  - com.azure.cosmos.implementation.guava25.base.Equivalence.equivalentTo(T)
  - com.azure.cosmos.implementation.guava25.base.Equivalence.hash(T)
  - com.azure.cosmos.implementation.guava25.base.Equivalence.identity()
  - com.azure.cosmos.implementation.guava25.base.Equivalence.test(T,T)
  langs:
  - java
  name: Equivalence<T>
  nameWithType: Equivalence<T>
  fullName: com.azure.cosmos.implementation.guava25.base.Equivalence<T>
  type: Class
  package: com.azure.cosmos.implementation.guava25.base
  summary: A strategy for determining whether two instances are considered equivalent, and for computing hash codes in a manner consistent with that equivalence. Two examples of equivalences are the <xref uid="com.azure.cosmos.implementation.guava25.base.Equivalence.identity()" data-throw-if-not-resolved="false">identity equivalence</xref> and the <xref uid="com.azure.cosmos.implementation.guava25.base.Equivalence.equals" data-throw-if-not-resolved="false">&quot;equals&quot; equivalence</xref>.
  syntax:
    content: public abstract class Equivalence<T> implements BiPredicate<T,T>
    typeParameters:
    - id: T
  inheritance:
  - java.lang.Object
  implements:
  - java.util.function.BiPredicate<T,T>
  inheritedMembers:
  - java.lang.Object.clone()
  - java.lang.Object.equals(java.lang.Object)
  - java.lang.Object.finalize()
  - java.lang.Object.getClass()
  - java.lang.Object.hashCode()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.toString()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
- uid: com.azure.cosmos.implementation.guava25.base.Equivalence.<F>onResultOf(com.azure.cosmos.implementation.guava25.base.Function<F,? extends T>)
  id: <F>onResultOf(com.azure.cosmos.implementation.guava25.base.Function<F,? extends T>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.base.Equivalence
  langs:
  - java
  name: <F>onResultOf(Function<F,? extends T> function)
  nameWithType: Equivalence<T>.<F>onResultOf(Function<F,? extends T> function)
  fullName: com.azure.cosmos.implementation.guava25.base.Equivalence<T>.<F>onResultOf(Function<F,? extends T> function)
  overload: com.azure.cosmos.implementation.guava25.base.Equivalence.onResultOf*
  type: Method
  package: com.azure.cosmos.implementation.guava25.base
  summary: >-
    Returns a new equivalence relation for `F` which evaluates equivalence by first applying `function` to the argument, then evaluating using `this`. That is, for any pair of non-null objects `x` and `y`, `equivalence.onResultOf(function).equivalent(a, b)` is true if and only if `equivalence.equivalent(function.apply(a), function.apply(b))` is true.


    For example:


    ```java

    Equivalence SAME_AGE = Equivalence.equals().onResultOf(GET_PERSON_AGE);

    ```


    `function` will never be invoked with a null value.


    Note that `function` must be consistent according to `this` equivalence relation. That is, invoking <xref uid="com.azure.cosmos.implementation.guava25.base.Function.apply" data-throw-if-not-resolved="false">Function#apply</xref> multiple times for a given value must return equivalent results. For example, `Equivalence.identity().onResultOf(Functions.toStringFunction())` is broken because it's not guaranteed that <xref uid="java.lang.Object.toString" data-throw-if-not-resolved="false">Object#toString</xref>) always returns the same string instance.
  syntax:
    content: public final Equivalence<F> <F>onResultOf(Function<F,? extends T> function)
    parameters:
    - id: function
      type: com.azure.cosmos.implementation.guava25.base.Function<F,? extends T>
    return:
      type: com.azure.cosmos.implementation.guava25.base.Equivalence<F>
- uid: com.azure.cosmos.implementation.guava25.base.Equivalence.<S>pairwise()
  id: <S>pairwise()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.base.Equivalence
  langs:
  - java
  name: <S>pairwise()
  nameWithType: Equivalence<T>.<S>pairwise()
  fullName: com.azure.cosmos.implementation.guava25.base.Equivalence<T>.<S>pairwise()
  overload: com.azure.cosmos.implementation.guava25.base.Equivalence.pairwise*
  type: Method
  package: com.azure.cosmos.implementation.guava25.base
  summary: >-
    Returns an equivalence over iterables based on the equivalence of their elements. More specifically, two iterables are considered equivalent if they both contain the same number of elements, and each pair of corresponding elements is equivalent according to `this`. Null iterables are equivalent to one another.


    Note that this method performs a similar function for equivalences as <xref uid="com.azure.cosmos.implementation.guava25.collect.Ordering.lexicographical" data-throw-if-not-resolved="false">com.azure.cosmos.implementation.guava25.collect.Ordering#lexicographical</xref> does for orderings.
  syntax:
    content: public final Equivalence<Iterable<S>> <S>pairwise()
    return:
      type: com.azure.cosmos.implementation.guava25.base.Equivalence<java.lang.Iterable<S>>
- uid: com.azure.cosmos.implementation.guava25.base.Equivalence.<S>wrap(S)
  id: <S>wrap(S)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.base.Equivalence
  langs:
  - java
  name: <S>wrap(S reference)
  nameWithType: Equivalence<T>.<S>wrap(S reference)
  fullName: com.azure.cosmos.implementation.guava25.base.Equivalence<T>.<S>wrap(S reference)
  overload: com.azure.cosmos.implementation.guava25.base.Equivalence.wrap*
  type: Method
  package: com.azure.cosmos.implementation.guava25.base
  summary: Returns a wrapper of `reference` that implements <xref uid="com.azure.cosmos.implementation.guava25.base.Equivalence.Wrapper.equals*" data-throw-if-not-resolved="false">Object.equals()</xref> such that `wrap(a).equals(wrap(b))` if and only if `equivalent(a, b)`.
  syntax:
    content: public final Equivalence.Wrapper<S> <S>wrap(S reference)
    parameters:
    - id: reference
      type: S
    return:
      type: com.azure.cosmos.implementation.guava25.base.Equivalence.Wrapper<S>
- uid: com.azure.cosmos.implementation.guava25.base.Equivalence.Equivalence()
  id: Equivalence()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.base.Equivalence
  langs:
  - java
  name: Equivalence()
  nameWithType: Equivalence<T>.Equivalence()
  fullName: com.azure.cosmos.implementation.guava25.base.Equivalence<T>.Equivalence()
  overload: com.azure.cosmos.implementation.guava25.base.Equivalence.Equivalence*
  type: Constructor
  package: com.azure.cosmos.implementation.guava25.base
  summary: Constructor for use by subclasses.
  syntax:
    content: protected Equivalence()
- uid: com.azure.cosmos.implementation.guava25.base.Equivalence.doEquivalent(T,T)
  id: doEquivalent(T,T)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.base.Equivalence
  langs:
  - java
  name: doEquivalent(T a, T b)
  nameWithType: Equivalence<T>.doEquivalent(T a, T b)
  fullName: com.azure.cosmos.implementation.guava25.base.Equivalence<T>.doEquivalent(T a, T b)
  overload: com.azure.cosmos.implementation.guava25.base.Equivalence.doEquivalent*
  type: Method
  package: com.azure.cosmos.implementation.guava25.base
  summary: >-
    Implemented by the user to determine whether `a` and `b` are considered equivalent, subject to the requirements specified in <xref uid="com.azure.cosmos.implementation.guava25.base.Equivalence.equivalent" data-throw-if-not-resolved="false">#equivalent</xref>.


    This method should not be called except by <xref uid="com.azure.cosmos.implementation.guava25.base.Equivalence.equivalent" data-throw-if-not-resolved="false">#equivalent</xref>. When <xref uid="com.azure.cosmos.implementation.guava25.base.Equivalence.equivalent" data-throw-if-not-resolved="false">#equivalent</xref> calls this method, `a` and `b` are guaranteed to be distinct, non-null instances.
  syntax:
    content: protected abstract boolean doEquivalent(T a, T b)
    parameters:
    - id: a
      type: T
    - id: b
      type: T
    return:
      type: boolean
- uid: com.azure.cosmos.implementation.guava25.base.Equivalence.doHash(T)
  id: doHash(T)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.base.Equivalence
  langs:
  - java
  name: doHash(T t)
  nameWithType: Equivalence<T>.doHash(T t)
  fullName: com.azure.cosmos.implementation.guava25.base.Equivalence<T>.doHash(T t)
  overload: com.azure.cosmos.implementation.guava25.base.Equivalence.doHash*
  type: Method
  package: com.azure.cosmos.implementation.guava25.base
  summary: >-
    Implemented by the user to return a hash code for `t`, subject to the requirements specified in <xref uid="com.azure.cosmos.implementation.guava25.base.Equivalence.hash" data-throw-if-not-resolved="false">#hash</xref>.


    This method should not be called except by <xref uid="com.azure.cosmos.implementation.guava25.base.Equivalence.hash" data-throw-if-not-resolved="false">#hash</xref>. When <xref uid="com.azure.cosmos.implementation.guava25.base.Equivalence.hash" data-throw-if-not-resolved="false">#hash</xref> calls this method, `t` is guaranteed to be non-null.
  syntax:
    content: protected abstract int doHash(T t)
    parameters:
    - id: t
      type: T
    return:
      type: int
- uid: com.azure.cosmos.implementation.guava25.base.Equivalence.equals()
  id: equals()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.base.Equivalence
  langs:
  - java
  name: equals()
  nameWithType: Equivalence<T>.equals()
  fullName: com.azure.cosmos.implementation.guava25.base.Equivalence<T>.equals()
  overload: com.azure.cosmos.implementation.guava25.base.Equivalence.equals*
  type: Method
  package: com.azure.cosmos.implementation.guava25.base
  summary: Returns an equivalence that delegates to <xref uid="java.lang.Object.equals" data-throw-if-not-resolved="false">Object#equals</xref> and <xref uid="java.lang.Object.hashCode" data-throw-if-not-resolved="false">Object#hashCode</xref>. <xref uid="com.azure.cosmos.implementation.guava25.base.Equivalence.equivalent" data-throw-if-not-resolved="false">Equivalence#equivalent</xref> returns `true` if both values are null, or if neither value is null and <xref uid="java.lang.Object.equals" data-throw-if-not-resolved="false">Object#equals</xref> returns `true`. <xref uid="com.azure.cosmos.implementation.guava25.base.Equivalence.hash" data-throw-if-not-resolved="false">Equivalence#hash</xref> returns `0` if passed a null value.
  syntax:
    content: public static Equivalence<Object> equals()
    return:
      type: com.azure.cosmos.implementation.guava25.base.Equivalence<java.lang.Object>
- uid: com.azure.cosmos.implementation.guava25.base.Equivalence.equivalent(T,T)
  id: equivalent(T,T)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.base.Equivalence
  langs:
  - java
  name: equivalent(T a, T b)
  nameWithType: Equivalence<T>.equivalent(T a, T b)
  fullName: com.azure.cosmos.implementation.guava25.base.Equivalence<T>.equivalent(T a, T b)
  overload: com.azure.cosmos.implementation.guava25.base.Equivalence.equivalent*
  type: Method
  package: com.azure.cosmos.implementation.guava25.base
  summary: >-
    Returns `true` if the given objects are considered equivalent.


    This method describes an *equivalence relation* on object references, meaning that for all references `x`, `y`, and `z` (any of which may be null):

     *  `equivalent(x, x)` is true (*reflexive* property)
     *  `equivalent(x, y)` and `equivalent(y, x)` each return the same result (*symmetric* property)
     *  If `equivalent(x, y)` and `equivalent(y, z)` are both true, then `equivalent(x, z)` is also true (*transitive* property)

    Note that all calls to `equivalent(x, y)` are expected to return the same result as long as neither `x` nor `y` is modified.
  syntax:
    content: public final boolean equivalent(T a, T b)
    parameters:
    - id: a
      type: T
    - id: b
      type: T
    return:
      type: boolean
- uid: com.azure.cosmos.implementation.guava25.base.Equivalence.equivalentTo(T)
  id: equivalentTo(T)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.base.Equivalence
  langs:
  - java
  name: equivalentTo(T target)
  nameWithType: Equivalence<T>.equivalentTo(T target)
  fullName: com.azure.cosmos.implementation.guava25.base.Equivalence<T>.equivalentTo(T target)
  overload: com.azure.cosmos.implementation.guava25.base.Equivalence.equivalentTo*
  type: Method
  package: com.azure.cosmos.implementation.guava25.base
  summary: Returns a predicate that evaluates to true if and only if the input is equivalent to `target` according to this equivalence relation.
  syntax:
    content: public final Predicate<T> equivalentTo(T target)
    parameters:
    - id: target
      type: T
    return:
      type: com.azure.cosmos.implementation.guava25.base.Predicate<T>
- uid: com.azure.cosmos.implementation.guava25.base.Equivalence.hash(T)
  id: hash(T)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.base.Equivalence
  langs:
  - java
  name: hash(T t)
  nameWithType: Equivalence<T>.hash(T t)
  fullName: com.azure.cosmos.implementation.guava25.base.Equivalence<T>.hash(T t)
  overload: com.azure.cosmos.implementation.guava25.base.Equivalence.hash*
  type: Method
  package: com.azure.cosmos.implementation.guava25.base
  summary: >-
    Returns a hash code for `t`.


    The `hash` has the following properties:

     *  It is *consistent*: for any reference `x`, multiple invocations of `hash(x`\} consistently return the same value provided `x` remains unchanged according to the definition of the equivalence. The hash need not remain consistent from one execution of an application to another execution of the same application.
     *  It is *distributable across equivalence*: for any references `x` and `y`, if `equivalent(x, y)`, then `hash(x) == hash(y)`. It is *not* necessary that the hash be distributable across *inequivalence*. If `equivalence(x, y)` is false, `hash(x) == hash(y)` may still be true.
     *  `hash(null)` is `0`.
  syntax:
    content: public final int hash(T t)
    parameters:
    - id: t
      type: T
    return:
      type: int
- uid: com.azure.cosmos.implementation.guava25.base.Equivalence.identity()
  id: identity()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.base.Equivalence
  langs:
  - java
  name: identity()
  nameWithType: Equivalence<T>.identity()
  fullName: com.azure.cosmos.implementation.guava25.base.Equivalence<T>.identity()
  overload: com.azure.cosmos.implementation.guava25.base.Equivalence.identity*
  type: Method
  package: com.azure.cosmos.implementation.guava25.base
  summary: Returns an equivalence that uses `==` to compare values and <xref uid="" data-throw-if-not-resolved="false">System#identityHashCode(Object)</xref> to compute the hash code. <xref uid="com.azure.cosmos.implementation.guava25.base.Equivalence.equivalent" data-throw-if-not-resolved="false">Equivalence#equivalent</xref> returns `true` if `a == b`, including in the case that a and b are both null.
  syntax:
    content: public static Equivalence<Object> identity()
    return:
      type: com.azure.cosmos.implementation.guava25.base.Equivalence<java.lang.Object>
- uid: com.azure.cosmos.implementation.guava25.base.Equivalence.test(T,T)
  id: test(T,T)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.base.Equivalence
  langs:
  - java
  name: test(T t, T u)
  nameWithType: Equivalence<T>.test(T t, T u)
  fullName: com.azure.cosmos.implementation.guava25.base.Equivalence<T>.test(T t, T u)
  overload: com.azure.cosmos.implementation.guava25.base.Equivalence.test*
  type: Method
  package: com.azure.cosmos.implementation.guava25.base
  syntax:
    content: public final boolean test(T t, T u)
    parameters:
    - id: t
      type: T
    - id: u
      type: T
    return:
      type: boolean
references:
- uid: com.azure.cosmos.implementation.guava25.base.Equivalence.Equivalence*
  name: Equivalence
  nameWithType: Equivalence<T>.Equivalence
  fullName: com.azure.cosmos.implementation.guava25.base.Equivalence<T>.Equivalence
  package: com.azure.cosmos.implementation.guava25.base
- uid: T
  spec.java:
  - uid: T
    name: T
    fullName: T
- uid: boolean
  spec.java:
  - uid: boolean
    name: boolean
    fullName: boolean
- uid: com.azure.cosmos.implementation.guava25.base.Equivalence.equivalent*
  name: equivalent
  nameWithType: Equivalence<T>.equivalent
  fullName: com.azure.cosmos.implementation.guava25.base.Equivalence<T>.equivalent
  package: com.azure.cosmos.implementation.guava25.base
- uid: com.azure.cosmos.implementation.guava25.base.Equivalence.test*
  name: test
  nameWithType: Equivalence<T>.test
  fullName: com.azure.cosmos.implementation.guava25.base.Equivalence<T>.test
  package: com.azure.cosmos.implementation.guava25.base
- uid: com.azure.cosmos.implementation.guava25.base.Equivalence.doEquivalent*
  name: doEquivalent
  nameWithType: Equivalence<T>.doEquivalent
  fullName: com.azure.cosmos.implementation.guava25.base.Equivalence<T>.doEquivalent
  package: com.azure.cosmos.implementation.guava25.base
- uid: int
  spec.java:
  - uid: int
    name: int
    fullName: int
- uid: com.azure.cosmos.implementation.guava25.base.Equivalence.hash*
  name: hash
  nameWithType: Equivalence<T>.hash
  fullName: com.azure.cosmos.implementation.guava25.base.Equivalence<T>.hash
  package: com.azure.cosmos.implementation.guava25.base
- uid: com.azure.cosmos.implementation.guava25.base.Equivalence.doHash*
  name: doHash
  nameWithType: Equivalence<T>.doHash
  fullName: com.azure.cosmos.implementation.guava25.base.Equivalence<T>.doHash
  package: com.azure.cosmos.implementation.guava25.base
- uid: com.azure.cosmos.implementation.guava25.base.Function<F,? extends T>
  spec.java:
  - uid: com.azure.cosmos.implementation.guava25.base.Function
    name: Function
    fullName: com.azure.cosmos.implementation.guava25.base.Function
  - name: <
    fullName: <
  - uid: F
    name: F
    fullName: F
  - name: ','
    fullName: ','
  - uid: '? extends T'
    name: '? extends T'
    fullName: '? extends T'
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.base.Equivalence<F>
  spec.java:
  - uid: com.azure.cosmos.implementation.guava25.base.Equivalence
    name: Equivalence
    fullName: com.azure.cosmos.implementation.guava25.base.Equivalence
  - name: <
    fullName: <
  - uid: F
    name: F
    fullName: F
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.base.Equivalence.onResultOf*
  name: <F>onResultOf
  nameWithType: Equivalence<T>.<F>onResultOf
  fullName: com.azure.cosmos.implementation.guava25.base.Equivalence<T>.<F>onResultOf
  package: com.azure.cosmos.implementation.guava25.base
- uid: S
  spec.java:
  - uid: S
    name: S
    fullName: S
- uid: com.azure.cosmos.implementation.guava25.base.Equivalence.Wrapper<S>
  spec.java:
  - uid: com.azure.cosmos.implementation.guava25.base.Equivalence.Wrapper
    name: Wrapper
    fullName: com.azure.cosmos.implementation.guava25.base.Equivalence.Wrapper
  - name: <
    fullName: <
  - uid: S
    name: S
    fullName: S
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.base.Equivalence.wrap*
  name: <S>wrap
  nameWithType: Equivalence<T>.<S>wrap
  fullName: com.azure.cosmos.implementation.guava25.base.Equivalence<T>.<S>wrap
  package: com.azure.cosmos.implementation.guava25.base
- uid: com.azure.cosmos.implementation.guava25.base.Equivalence<java.lang.Iterable<S>>
  spec.java:
  - uid: com.azure.cosmos.implementation.guava25.base.Equivalence
    name: Equivalence
    fullName: com.azure.cosmos.implementation.guava25.base.Equivalence
  - name: <
    fullName: <
  - uid: java.lang.Iterable
    name: Iterable
    fullName: java.lang.Iterable
  - name: <
    fullName: <
  - uid: S
    name: S
    fullName: S
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.base.Equivalence.pairwise*
  name: <S>pairwise
  nameWithType: Equivalence<T>.<S>pairwise
  fullName: com.azure.cosmos.implementation.guava25.base.Equivalence<T>.<S>pairwise
  package: com.azure.cosmos.implementation.guava25.base
- uid: com.azure.cosmos.implementation.guava25.base.Predicate<T>
  spec.java:
  - uid: com.azure.cosmos.implementation.guava25.base.Predicate
    name: Predicate
    fullName: com.azure.cosmos.implementation.guava25.base.Predicate
  - name: <
    fullName: <
  - uid: T
    name: T
    fullName: T
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.base.Equivalence.equivalentTo*
  name: equivalentTo
  nameWithType: Equivalence<T>.equivalentTo
  fullName: com.azure.cosmos.implementation.guava25.base.Equivalence<T>.equivalentTo
  package: com.azure.cosmos.implementation.guava25.base
- uid: com.azure.cosmos.implementation.guava25.base.Equivalence<java.lang.Object>
  spec.java:
  - uid: com.azure.cosmos.implementation.guava25.base.Equivalence
    name: Equivalence
    fullName: com.azure.cosmos.implementation.guava25.base.Equivalence
  - name: <
    fullName: <
  - uid: java.lang.Object
    name: Object
    fullName: java.lang.Object
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.base.Equivalence.equals*
  name: equals
  nameWithType: Equivalence<T>.equals
  fullName: com.azure.cosmos.implementation.guava25.base.Equivalence<T>.equals
  package: com.azure.cosmos.implementation.guava25.base
- uid: com.azure.cosmos.implementation.guava25.base.Equivalence.identity*
  name: identity
  nameWithType: Equivalence<T>.identity
  fullName: com.azure.cosmos.implementation.guava25.base.Equivalence<T>.identity
  package: com.azure.cosmos.implementation.guava25.base
- uid: java.util.function.BiPredicate<T,T>
  name: BiPredicate<T,T>
  nameWithType: BiPredicate<T,T>
  fullName: java.util.function.BiPredicate<T,T>
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: java.lang.Object.finalize()
  name: Object.finalize()
  nameWithType: Object.finalize()
  fullName: java.lang.Object.finalize()
- uid: java.lang.Object.clone()
  name: Object.clone()
  nameWithType: Object.clone()
  fullName: java.lang.Object.clone()
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: java.lang.Object.equals(java.lang.Object)
  name: Object.equals(Object)
  nameWithType: Object.equals(Object)
  fullName: java.lang.Object.equals(java.lang.Object)
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.lang.Object.hashCode()
  name: Object.hashCode()
  nameWithType: Object.hashCode()
  fullName: java.lang.Object.hashCode()
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: java.lang.Object.toString()
  name: Object.toString()
  nameWithType: Object.toString()
  fullName: java.lang.Object.toString()
- uid: com.azure.cosmos.implementation.guava25.base.Equivalence.Wrapper
  name: Equivalence.Wrapper<T>
  nameWithType: Equivalence.Wrapper<T>
  fullName: com.azure.cosmos.implementation.guava25.base.Equivalence.Wrapper<T>
- uid: com.azure.cosmos.implementation.guava25.base.Function
  name: Function
  nameWithType: Function
  fullName: com.azure.cosmos.implementation.guava25.base.Function
- uid: F,? extends T
  name: F,? extends T
  nameWithType: F,? extends T
  fullName: F,? extends T
- uid: F
  name: F
  nameWithType: F
  fullName: F
- uid: java.lang.Iterable
  name: Iterable
  nameWithType: Iterable
  fullName: java.lang.Iterable
- uid: com.azure.cosmos.implementation.guava25.base.Predicate
  name: Predicate
  nameWithType: Predicate
  fullName: com.azure.cosmos.implementation.guava25.base.Predicate
- uid: java.lang.Object
  name: Object
  nameWithType: Object
  fullName: java.lang.Object
- uid: java.util.function.BiPredicate
  name: BiPredicate
  nameWithType: BiPredicate
  fullName: java.util.function.BiPredicate
- uid: T,T
  name: T,T
  nameWithType: T,T
  fullName: T,T
