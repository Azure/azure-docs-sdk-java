### YamlMime:ManagedReference
items:
- uid: com.fasterxml.jackson.core.type.TypeReference
  id: TypeReference
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.type
  children:
  - com.fasterxml.jackson.core.type.TypeReference.TypeReference()
  - com.fasterxml.jackson.core.type.TypeReference._type
  - com.fasterxml.jackson.core.type.TypeReference.compareTo(com.fasterxml.jackson.core.type.TypeReference<T>)
  - com.fasterxml.jackson.core.type.TypeReference.getType()
  langs:
  - java
  name: TypeReference<T>
  nameWithType: TypeReference<T>
  fullName: com.fasterxml.jackson.core.type.TypeReference<T>
  type: Class
  package: com.fasterxml.jackson.core.type
  summary: >-
    This generic abstract class is used for obtaining full generics type information by sub-classing; it must be converted to <xref uid="com.fasterxml.jackson.core.type.ResolvedType" data-throw-if-not-resolved="false">ResolvedType</xref> implementation (implemented by `JavaType` from "databind" bundle) to be used. Class is based on ideas from http://gafter.blogspot.com/2006/12/super-type-tokens.html, Additional idea (from a suggestion made in comments of the article) is to require bogus implementation of `Comparable` (any such generic interface would do, as long as it forces a method with generic type to be implemented). to ensure that a Type argument is indeed given.


    Usage is by sub-classing: here is one way to instantiate reference to generic type `List<Integer>`:


    ```java

    TypeReference ref = new TypeReference<List<Integer>>() { };

    ```


    which can be passed to methods that accept TypeReference, or resolved using `TypeFactory` to obtain <xref uid="com.fasterxml.jackson.core.type.ResolvedType" data-throw-if-not-resolved="false">ResolvedType</xref>.
  syntax:
    content: public abstract class TypeReference<T> implements Comparable<TypeReference<T>>
    typeParameters:
    - id: T
  inheritance:
  - java.lang.Object
  implements:
  - java.lang.Comparable<com.fasterxml.jackson.core.type.TypeReference<T>>
  inheritedMembers:
  - java.lang.Object.clone()
  - java.lang.Object.equals(java.lang.Object)
  - java.lang.Object.finalize()
  - java.lang.Object.getClass()
  - java.lang.Object.hashCode()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.toString()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
- uid: com.fasterxml.jackson.core.type.TypeReference.TypeReference()
  id: TypeReference()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.type.TypeReference
  langs:
  - java
  name: TypeReference()
  nameWithType: TypeReference<T>.TypeReference()
  fullName: com.fasterxml.jackson.core.type.TypeReference<T>.TypeReference()
  overload: com.fasterxml.jackson.core.type.TypeReference.TypeReference*
  type: Constructor
  package: com.fasterxml.jackson.core.type
  syntax:
    content: protected TypeReference()
- uid: com.fasterxml.jackson.core.type.TypeReference._type
  id: _type
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.type.TypeReference
  langs:
  - java
  name: _type
  nameWithType: TypeReference<T>._type
  fullName: com.fasterxml.jackson.core.type.TypeReference<T>._type
  type: Field
  package: com.fasterxml.jackson.core.type
  syntax:
    content: protected final Type _type
    return:
      type: java.lang.reflect.Type
- uid: com.fasterxml.jackson.core.type.TypeReference.compareTo(com.fasterxml.jackson.core.type.TypeReference<T>)
  id: compareTo(com.fasterxml.jackson.core.type.TypeReference<T>)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.type.TypeReference
  langs:
  - java
  name: compareTo(TypeReference<T> o)
  nameWithType: TypeReference<T>.compareTo(TypeReference<T> o)
  fullName: com.fasterxml.jackson.core.type.TypeReference<T>.compareTo(TypeReference<T> o)
  overload: com.fasterxml.jackson.core.type.TypeReference.compareTo*
  type: Method
  package: com.fasterxml.jackson.core.type
  summary: The only reason we define this method (and require implementation of `Comparable`) is to prevent constructing a reference without type information.
  syntax:
    content: public int compareTo(TypeReference<T> o)
    parameters:
    - id: o
      type: com.fasterxml.jackson.core.type.TypeReference<T>
    return:
      type: int
- uid: com.fasterxml.jackson.core.type.TypeReference.getType()
  id: getType()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.type.TypeReference
  langs:
  - java
  name: getType()
  nameWithType: TypeReference<T>.getType()
  fullName: com.fasterxml.jackson.core.type.TypeReference<T>.getType()
  overload: com.fasterxml.jackson.core.type.TypeReference.getType*
  type: Method
  package: com.fasterxml.jackson.core.type
  syntax:
    content: public Type getType()
    return:
      type: java.lang.reflect.Type
references:
- uid: com.fasterxml.jackson.core.type.TypeReference.TypeReference*
  name: TypeReference
  nameWithType: TypeReference<T>.TypeReference
  fullName: com.fasterxml.jackson.core.type.TypeReference<T>.TypeReference
  package: com.fasterxml.jackson.core.type
- uid: java.lang.reflect.Type
  spec.java:
  - uid: java.lang.reflect.Type
    name: Type
    fullName: java.lang.reflect.Type
- uid: com.fasterxml.jackson.core.type.TypeReference.getType*
  name: getType
  nameWithType: TypeReference<T>.getType
  fullName: com.fasterxml.jackson.core.type.TypeReference<T>.getType
  package: com.fasterxml.jackson.core.type
- uid: com.fasterxml.jackson.core.type.TypeReference<T>
  spec.java:
  - uid: com.fasterxml.jackson.core.type.TypeReference
    name: TypeReference
    fullName: com.fasterxml.jackson.core.type.TypeReference
  - name: <
    fullName: <
  - uid: T
    name: T
    fullName: T
  - name: '>'
    fullName: '>'
- uid: int
  spec.java:
  - uid: int
    name: int
    fullName: int
- uid: com.fasterxml.jackson.core.type.TypeReference.compareTo*
  name: compareTo
  nameWithType: TypeReference<T>.compareTo
  fullName: com.fasterxml.jackson.core.type.TypeReference<T>.compareTo
  package: com.fasterxml.jackson.core.type
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: java.lang.Comparable<com.fasterxml.jackson.core.type.TypeReference<T>>
  name: Comparable<TypeReference<T>>
  nameWithType: Comparable<TypeReference<T>>
  fullName: java.lang.Comparable<com.fasterxml.jackson.core.type.TypeReference<T>>
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: java.lang.Object.finalize()
  name: Object.finalize()
  nameWithType: Object.finalize()
  fullName: java.lang.Object.finalize()
- uid: java.lang.Object.clone()
  name: Object.clone()
  nameWithType: Object.clone()
  fullName: java.lang.Object.clone()
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: java.lang.Object.equals(java.lang.Object)
  name: Object.equals(Object)
  nameWithType: Object.equals(Object)
  fullName: java.lang.Object.equals(java.lang.Object)
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.lang.Object.hashCode()
  name: Object.hashCode()
  nameWithType: Object.hashCode()
  fullName: java.lang.Object.hashCode()
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: java.lang.Object.toString()
  name: Object.toString()
  nameWithType: Object.toString()
  fullName: java.lang.Object.toString()
- uid: java.lang.Comparable
  name: Comparable
  nameWithType: Comparable
  fullName: java.lang.Comparable
