### YamlMime:JavaMember
uid: "com.azure.core.experimental.util.BinaryData.toObjectAsync*"
fullName: "com.azure.core.experimental.util.BinaryData.<T>toObjectAsync"
name: "<T>toObjectAsync"
nameWithType: "BinaryData.<T>toObjectAsync"
members:
- uid: "com.azure.core.experimental.util.BinaryData.<T>toObjectAsync(java.lang.Class<T>,com.azure.core.util.serializer.ObjectSerializer)"
  fullName: "com.azure.core.experimental.util.BinaryData.<T>toObjectAsync(Class<T> clazz, ObjectSerializer serializer)"
  name: "<T>toObjectAsync(Class<T> clazz, ObjectSerializer serializer)"
  nameWithType: "BinaryData.<T>toObjectAsync(Class<T> clazz, ObjectSerializer serializer)"
  summary: "Return a <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\">Mono</xref> by deserialize the bytes into the <xref uid=\"java.lang.Object\" data-throw-if-not-resolved=\"false\">Object</xref> of given type after applying the provided <xref uid=\"com.azure.core.util.serializer.ObjectSerializer\" data-throw-if-not-resolved=\"false\">ObjectSerializer</xref> on the <xref uid=\"com.azure.core.experimental.util.BinaryData\" data-throw-if-not-resolved=\"false\">BinaryData</xref>.\n\n**Gets the specified object**\n\n```java\n// Lets say we have Person object which could be serialized into json.\n class Person {\n     {@literal @}JsonProperty\n     private String name;\n \n     {@literal @}JsonSetter\n     public Person setName(String name) {\n         this.name = name;\n         return this;\n     }\n \n     {@literal @}JsonGetter\n     public String getName() {\n         return name;\n     }\n }\n final Person data = new Person().setName(\"John\");\n \n // Ensure your classpath have the Serializer to use to serialize object. For example you can use one of\n // following library.\n // https://mvnrepository.com/artifact/com.azure/azure-core-serializer-json-jackson or\n // https://mvnrepository.com/artifact/com.azure/azure-core-serializer-json-gson\n \n final ObjectSerializer serializer =\n     new MyJsonSerializer(); // Replace this with your Serializer\n BinaryData binaryData = BinaryData.fromObject(data, serializer);\n \n // Lets print the value of BinaryData\n Disposable subscriber = binaryData\n     .toObjectAsync(Person.class, serializer)\n     .map(person -> {\n         System.out.println(person.getName());\n         return true;\n     })\n     .subscribe();\n \n // So that your program wait for above subscribe to complete.\n TimeUnit.SECONDS.sleep(5);\n subscriber.dispose();\n```"
  parameters:
  - description: "representing the type of the Object."
    name: "clazz"
    type: "<xref href=\"java.lang.Class?alt=java.lang.Class&text=Class\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
  - description: "to use deserialize data into type."
    name: "serializer"
    type: "<xref href=\"com.azure.core.util.serializer.ObjectSerializer?alt=com.azure.core.util.serializer.ObjectSerializer&text=ObjectSerializer\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<T> <T>toObjectAsync(Class<T> clazz, ObjectSerializer serializer)"
  returns:
    description: "The <xref uid=\"java.lang.Object\" data-throw-if-not-resolved=\"false\">Object</xref> of given type after deserializing the bytes."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
type: "method"
metadata: {}
package: "com.azure.core.experimental.util"
artifact: com.azure:azure-core-experimental:1.0.0-beta.7
