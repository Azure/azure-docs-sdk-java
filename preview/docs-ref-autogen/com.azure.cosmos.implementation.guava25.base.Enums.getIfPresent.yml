### YamlMime:JavaMember
uid: "com.azure.cosmos.implementation.guava25.base.Enums.getIfPresent*"
fullName: "com.azure.cosmos.implementation.guava25.base.Enums.<T>getIfPresent"
name: "<T>getIfPresent"
nameWithType: "Enums.<T>getIfPresent"
members:
- uid: "com.azure.cosmos.implementation.guava25.base.Enums.<T>getIfPresent(java.lang.Class<T>,java.lang.String)"
  fullName: "com.azure.cosmos.implementation.guava25.base.Enums.<T>getIfPresent(Class<T> enumClass, String value)"
  name: "<T>getIfPresent(Class<T> enumClass, String value)"
  nameWithType: "Enums.<T>getIfPresent(Class<T> enumClass, String value)"
  summary: "Returns an optional enum constant for the given type, using <xref uid=\"java.lang.Enum.valueOf\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Enum#valueOf\"></xref>. If the constant does not exist, <xref uid=\"com.azure.cosmos.implementation.guava25.base.Optional.absent\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Optional#absent\"></xref> is returned. A common use case is for parsing user input or falling back to a default enum constant. For example, `Enums.getIfPresent(Country.class, countryInput).or(Country.DEFAULT);`"
  parameters:
  - name: "enumClass"
    type: "<xref href=\"java.lang.Class?alt=java.lang.Class&text=Class\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
  - name: "value"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public static Optional<T> <T>getIfPresent(Class<T> enumClass, String value)"
  returns:
    type: "<xref href=\"com.azure.cosmos.implementation.guava25.base.Optional?alt=com.azure.cosmos.implementation.guava25.base.Optional&text=Optional\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
type: "method"
metadata: {}
package: "com.azure.cosmos.implementation.guava25.base"
artifact: com.azure:azure-cosmos:4.4.0-beta.1
