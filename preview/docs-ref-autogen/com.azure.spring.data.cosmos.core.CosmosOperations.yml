### YamlMime:ManagedReference
items:
- uid: com.azure.spring.data.cosmos.core.CosmosOperations
  id: CosmosOperations
  artifact: com.azure:azure-spring-data-cosmos:3.0.0-beta.2
  parent: com.azure.spring.data.cosmos.core
  children:
  - com.azure.spring.data.cosmos.core.CosmosOperations.<T,ID>findByIds(java.lang.Iterable<ID>,java.lang.Class<T>,java.lang.String)
  - com.azure.spring.data.cosmos.core.CosmosOperations.<T>count(com.azure.spring.data.cosmos.core.query.CosmosQuery,java.lang.String)
  - com.azure.spring.data.cosmos.core.CosmosOperations.<T>delete(com.azure.spring.data.cosmos.core.query.CosmosQuery,java.lang.Class<T>,java.lang.String)
  - com.azure.spring.data.cosmos.core.CosmosOperations.<T>deleteEntity(java.lang.String,T)
  - com.azure.spring.data.cosmos.core.CosmosOperations.<T>exists(com.azure.spring.data.cosmos.core.query.CosmosQuery,java.lang.Class<T>,java.lang.String)
  - com.azure.spring.data.cosmos.core.CosmosOperations.<T>find(com.azure.spring.data.cosmos.core.query.CosmosQuery,java.lang.Class<T>,java.lang.String)
  - com.azure.spring.data.cosmos.core.CosmosOperations.<T>findAll(com.azure.cosmos.models.PartitionKey,java.lang.Class<T>)
  - com.azure.spring.data.cosmos.core.CosmosOperations.<T>findAll(java.lang.Class<T>)
  - com.azure.spring.data.cosmos.core.CosmosOperations.<T>findAll(java.lang.String,java.lang.Class<T>)
  - com.azure.spring.data.cosmos.core.CosmosOperations.<T>findAll(org.springframework.data.domain.Pageable,java.lang.Class<T>,java.lang.String)
  - com.azure.spring.data.cosmos.core.CosmosOperations.<T>findById(java.lang.Object,java.lang.Class<T>)
  - com.azure.spring.data.cosmos.core.CosmosOperations.<T>findById(java.lang.Object,java.lang.Class<T>,com.azure.cosmos.models.PartitionKey)
  - com.azure.spring.data.cosmos.core.CosmosOperations.<T>findById(java.lang.String,java.lang.Object,java.lang.Class<T>)
  - com.azure.spring.data.cosmos.core.CosmosOperations.<T>insert(T,com.azure.cosmos.models.PartitionKey)
  - com.azure.spring.data.cosmos.core.CosmosOperations.<T>insert(java.lang.String,T)
  - com.azure.spring.data.cosmos.core.CosmosOperations.<T>insert(java.lang.String,T,com.azure.cosmos.models.PartitionKey)
  - com.azure.spring.data.cosmos.core.CosmosOperations.<T>paginationQuery(com.azure.spring.data.cosmos.core.query.CosmosQuery,java.lang.Class<T>,java.lang.String)
  - com.azure.spring.data.cosmos.core.CosmosOperations.<T>runQuery(com.azure.cosmos.models.SqlQuerySpec,java.lang.Class<?>,java.lang.Class<T>)
  - com.azure.spring.data.cosmos.core.CosmosOperations.<T>upsert(T)
  - com.azure.spring.data.cosmos.core.CosmosOperations.<T>upsert(java.lang.String,T)
  - com.azure.spring.data.cosmos.core.CosmosOperations.<T>upsertAndReturnEntity(java.lang.String,T)
  - com.azure.spring.data.cosmos.core.CosmosOperations.count(java.lang.String)
  - com.azure.spring.data.cosmos.core.CosmosOperations.createContainerIfNotExists(com.azure.spring.data.cosmos.repository.support.CosmosEntityInformation<?,?>)
  - com.azure.spring.data.cosmos.core.CosmosOperations.deleteAll(java.lang.String,java.lang.Class<?>)
  - com.azure.spring.data.cosmos.core.CosmosOperations.deleteById(java.lang.String,java.lang.Object,com.azure.cosmos.models.PartitionKey)
  - com.azure.spring.data.cosmos.core.CosmosOperations.deleteContainer(java.lang.String)
  - com.azure.spring.data.cosmos.core.CosmosOperations.getContainerName(java.lang.Class<?>)
  - com.azure.spring.data.cosmos.core.CosmosOperations.getConverter()
  langs:
  - java
  name: CosmosOperations
  nameWithType: CosmosOperations
  fullName: com.azure.spring.data.cosmos.core.CosmosOperations
  type: Interface
  package: com.azure.spring.data.cosmos.core
  summary: Interface for cosmosDB operations
  syntax:
    content: public interface CosmosOperations
- uid: com.azure.spring.data.cosmos.core.CosmosOperations.<T,ID>findByIds(java.lang.Iterable<ID>,java.lang.Class<T>,java.lang.String)
  id: <T,ID>findByIds(java.lang.Iterable<ID>,java.lang.Class<T>,java.lang.String)
  artifact: com.azure:azure-spring-data-cosmos:3.0.0-beta.2
  parent: com.azure.spring.data.cosmos.core.CosmosOperations
  langs:
  - java
  name: <T,ID>findByIds(Iterable<ID> ids, Class<T> domainType, String containerName)
  nameWithType: CosmosOperations.<T,ID>findByIds(Iterable<ID> ids, Class<T> domainType, String containerName)
  fullName: com.azure.spring.data.cosmos.core.CosmosOperations.<T,ID>findByIds(Iterable<ID> ids, Class<T> domainType, String containerName)
  overload: com.azure.spring.data.cosmos.core.CosmosOperations.findByIds*
  type: Method
  package: com.azure.spring.data.cosmos.core
  summary: Find by ids
  syntax:
    content: public abstract Iterable<T> <T,ID>findByIds(Iterable<ID> ids, Class<T> domainType, String containerName)
    parameters:
    - id: ids
      type: java.lang.Iterable<ID>
      description: iterable of ids
    - id: domainType
      type: java.lang.Class<T>
      description: type class
    - id: containerName
      type: java.lang.String
      description: the container name
    return:
      type: java.lang.Iterable<T>
      description: results in an Iterable
- uid: com.azure.spring.data.cosmos.core.CosmosOperations.<T>count(com.azure.spring.data.cosmos.core.query.CosmosQuery,java.lang.String)
  id: <T>count(com.azure.spring.data.cosmos.core.query.CosmosQuery,java.lang.String)
  artifact: com.azure:azure-spring-data-cosmos:3.0.0-beta.2
  parent: com.azure.spring.data.cosmos.core.CosmosOperations
  langs:
  - java
  name: <T>count(CosmosQuery query, String containerName)
  nameWithType: CosmosOperations.<T>count(CosmosQuery query, String containerName)
  fullName: com.azure.spring.data.cosmos.core.CosmosOperations.<T>count(CosmosQuery query, String containerName)
  overload: com.azure.spring.data.cosmos.core.CosmosOperations.count*
  type: Method
  package: com.azure.spring.data.cosmos.core
  summary: Count
  syntax:
    content: public abstract long <T>count(CosmosQuery query, String containerName)
    parameters:
    - id: query
      type: com.azure.spring.data.cosmos.core.query.CosmosQuery
      description: the document query
    - id: containerName
      type: java.lang.String
      description: the container name
    return:
      type: long
      description: count result
- uid: com.azure.spring.data.cosmos.core.CosmosOperations.<T>delete(com.azure.spring.data.cosmos.core.query.CosmosQuery,java.lang.Class<T>,java.lang.String)
  id: <T>delete(com.azure.spring.data.cosmos.core.query.CosmosQuery,java.lang.Class<T>,java.lang.String)
  artifact: com.azure:azure-spring-data-cosmos:3.0.0-beta.2
  parent: com.azure.spring.data.cosmos.core.CosmosOperations
  langs:
  - java
  name: <T>delete(CosmosQuery query, Class<T> domainType, String containerName)
  nameWithType: CosmosOperations.<T>delete(CosmosQuery query, Class<T> domainType, String containerName)
  fullName: com.azure.spring.data.cosmos.core.CosmosOperations.<T>delete(CosmosQuery query, Class<T> domainType, String containerName)
  overload: com.azure.spring.data.cosmos.core.CosmosOperations.delete*
  type: Method
  package: com.azure.spring.data.cosmos.core
  summary: Delete items matching query
  syntax:
    content: public abstract Iterable<T> <T>delete(CosmosQuery query, Class<T> domainType, String containerName)
    parameters:
    - id: query
      type: com.azure.spring.data.cosmos.core.query.CosmosQuery
      description: the document query
    - id: domainType
      type: java.lang.Class<T>
      description: type class
    - id: containerName
      type: java.lang.String
      description: the container name
    return:
      type: java.lang.Iterable<T>
      description: deleted items in a Iterable
- uid: com.azure.spring.data.cosmos.core.CosmosOperations.<T>deleteEntity(java.lang.String,T)
  id: <T>deleteEntity(java.lang.String,T)
  artifact: com.azure:azure-spring-data-cosmos:3.0.0-beta.2
  parent: com.azure.spring.data.cosmos.core.CosmosOperations
  langs:
  - java
  name: <T>deleteEntity(String containerName, T entity)
  nameWithType: CosmosOperations.<T>deleteEntity(String containerName, T entity)
  fullName: com.azure.spring.data.cosmos.core.CosmosOperations.<T>deleteEntity(String containerName, T entity)
  overload: com.azure.spring.data.cosmos.core.CosmosOperations.deleteEntity*
  type: Method
  package: com.azure.spring.data.cosmos.core
  summary: Delete using entity
  syntax:
    content: public abstract void <T>deleteEntity(String containerName, T entity)
    parameters:
    - id: containerName
      type: java.lang.String
      description: the container name
    - id: entity
      type: T
      description: the entity object
- uid: com.azure.spring.data.cosmos.core.CosmosOperations.<T>exists(com.azure.spring.data.cosmos.core.query.CosmosQuery,java.lang.Class<T>,java.lang.String)
  id: <T>exists(com.azure.spring.data.cosmos.core.query.CosmosQuery,java.lang.Class<T>,java.lang.String)
  artifact: com.azure:azure-spring-data-cosmos:3.0.0-beta.2
  parent: com.azure.spring.data.cosmos.core.CosmosOperations
  langs:
  - java
  name: <T>exists(CosmosQuery query, Class<T> domainType, String containerName)
  nameWithType: CosmosOperations.<T>exists(CosmosQuery query, Class<T> domainType, String containerName)
  fullName: com.azure.spring.data.cosmos.core.CosmosOperations.<T>exists(CosmosQuery query, Class<T> domainType, String containerName)
  overload: com.azure.spring.data.cosmos.core.CosmosOperations.exists*
  type: Method
  package: com.azure.spring.data.cosmos.core
  summary: Exists
  syntax:
    content: public abstract Boolean <T>exists(CosmosQuery query, Class<T> domainType, String containerName)
    parameters:
    - id: query
      type: com.azure.spring.data.cosmos.core.query.CosmosQuery
      description: the document query
    - id: domainType
      type: java.lang.Class<T>
      description: type class
    - id: containerName
      type: java.lang.String
      description: the container name
    return:
      type: java.lang.Boolean
      description: Boolean
- uid: com.azure.spring.data.cosmos.core.CosmosOperations.<T>find(com.azure.spring.data.cosmos.core.query.CosmosQuery,java.lang.Class<T>,java.lang.String)
  id: <T>find(com.azure.spring.data.cosmos.core.query.CosmosQuery,java.lang.Class<T>,java.lang.String)
  artifact: com.azure:azure-spring-data-cosmos:3.0.0-beta.2
  parent: com.azure.spring.data.cosmos.core.CosmosOperations
  langs:
  - java
  name: <T>find(CosmosQuery query, Class<T> domainType, String containerName)
  nameWithType: CosmosOperations.<T>find(CosmosQuery query, Class<T> domainType, String containerName)
  fullName: com.azure.spring.data.cosmos.core.CosmosOperations.<T>find(CosmosQuery query, Class<T> domainType, String containerName)
  overload: com.azure.spring.data.cosmos.core.CosmosOperations.find*
  type: Method
  package: com.azure.spring.data.cosmos.core
  summary: Find query
  syntax:
    content: public abstract Iterable<T> <T>find(CosmosQuery query, Class<T> domainType, String containerName)
    parameters:
    - id: query
      type: com.azure.spring.data.cosmos.core.query.CosmosQuery
      description: the document query
    - id: domainType
      type: java.lang.Class<T>
      description: type class
    - id: containerName
      type: java.lang.String
      description: the container name
    return:
      type: java.lang.Iterable<T>
      description: results in an Iterable
- uid: com.azure.spring.data.cosmos.core.CosmosOperations.<T>findAll(com.azure.cosmos.models.PartitionKey,java.lang.Class<T>)
  id: <T>findAll(com.azure.cosmos.models.PartitionKey,java.lang.Class<T>)
  artifact: com.azure:azure-spring-data-cosmos:3.0.0-beta.2
  parent: com.azure.spring.data.cosmos.core.CosmosOperations
  langs:
  - java
  name: <T>findAll(PartitionKey partitionKey, Class<T> domainType)
  nameWithType: CosmosOperations.<T>findAll(PartitionKey partitionKey, Class<T> domainType)
  fullName: com.azure.spring.data.cosmos.core.CosmosOperations.<T>findAll(PartitionKey partitionKey, Class<T> domainType)
  overload: com.azure.spring.data.cosmos.core.CosmosOperations.findAll*
  type: Method
  package: com.azure.spring.data.cosmos.core
  summary: Find the DocumentQuery, find all the items specified by domain type in the given container.
  syntax:
    content: public abstract Iterable<T> <T>findAll(PartitionKey partitionKey, Class<T> domainType)
    parameters:
    - id: partitionKey
      type: com.azure.cosmos.models.PartitionKey
      description: the partition key
    - id: domainType
      type: java.lang.Class<T>
      description: the domain type
    return:
      type: java.lang.Iterable<T>
      description: results in an Iterable
- uid: com.azure.spring.data.cosmos.core.CosmosOperations.<T>findAll(java.lang.Class<T>)
  id: <T>findAll(java.lang.Class<T>)
  artifact: com.azure:azure-spring-data-cosmos:3.0.0-beta.2
  parent: com.azure.spring.data.cosmos.core.CosmosOperations
  langs:
  - java
  name: <T>findAll(Class<T> domainType)
  nameWithType: CosmosOperations.<T>findAll(Class<T> domainType)
  fullName: com.azure.spring.data.cosmos.core.CosmosOperations.<T>findAll(Class<T> domainType)
  overload: com.azure.spring.data.cosmos.core.CosmosOperations.findAll*
  type: Method
  package: com.azure.spring.data.cosmos.core
  summary: Find the DocumentQuery, find all the items specified by domain type.
  syntax:
    content: public abstract Iterable<T> <T>findAll(Class<T> domainType)
    parameters:
    - id: domainType
      type: java.lang.Class<T>
      description: the domain type
    return:
      type: java.lang.Iterable<T>
      description: results in an Iterable
- uid: com.azure.spring.data.cosmos.core.CosmosOperations.<T>findAll(java.lang.String,java.lang.Class<T>)
  id: <T>findAll(java.lang.String,java.lang.Class<T>)
  artifact: com.azure:azure-spring-data-cosmos:3.0.0-beta.2
  parent: com.azure.spring.data.cosmos.core.CosmosOperations
  langs:
  - java
  name: <T>findAll(String containerName, Class<T> domainType)
  nameWithType: CosmosOperations.<T>findAll(String containerName, Class<T> domainType)
  fullName: com.azure.spring.data.cosmos.core.CosmosOperations.<T>findAll(String containerName, Class<T> domainType)
  overload: com.azure.spring.data.cosmos.core.CosmosOperations.findAll*
  type: Method
  package: com.azure.spring.data.cosmos.core
  summary: Find the DocumentQuery, find all the items specified by domain type in the given container.
  syntax:
    content: public abstract Iterable<T> <T>findAll(String containerName, Class<T> domainType)
    parameters:
    - id: containerName
      type: java.lang.String
      description: the container name
    - id: domainType
      type: java.lang.Class<T>
      description: the domain type
    return:
      type: java.lang.Iterable<T>
      description: results in an Iterable
- uid: com.azure.spring.data.cosmos.core.CosmosOperations.<T>findAll(org.springframework.data.domain.Pageable,java.lang.Class<T>,java.lang.String)
  id: <T>findAll(org.springframework.data.domain.Pageable,java.lang.Class<T>,java.lang.String)
  artifact: com.azure:azure-spring-data-cosmos:3.0.0-beta.2
  parent: com.azure.spring.data.cosmos.core.CosmosOperations
  langs:
  - java
  name: <T>findAll(Pageable pageable, Class<T> domainType, String containerName)
  nameWithType: CosmosOperations.<T>findAll(Pageable pageable, Class<T> domainType, String containerName)
  fullName: com.azure.spring.data.cosmos.core.CosmosOperations.<T>findAll(Pageable pageable, Class<T> domainType, String containerName)
  overload: com.azure.spring.data.cosmos.core.CosmosOperations.findAll*
  type: Method
  package: com.azure.spring.data.cosmos.core
  summary: Find all items in a given container with partition key
  syntax:
    content: public abstract Page<T> <T>findAll(Pageable pageable, Class<T> domainType, String containerName)
    parameters:
    - id: pageable
      type: org.springframework.data.domain.Pageable
      description: Pageable object
    - id: domainType
      type: java.lang.Class<T>
      description: the domainType
    - id: containerName
      type: java.lang.String
      description: the container name
    return:
      type: org.springframework.data.domain.Page<T>
      description: results as Page
- uid: com.azure.spring.data.cosmos.core.CosmosOperations.<T>findById(java.lang.Object,java.lang.Class<T>)
  id: <T>findById(java.lang.Object,java.lang.Class<T>)
  artifact: com.azure:azure-spring-data-cosmos:3.0.0-beta.2
  parent: com.azure.spring.data.cosmos.core.CosmosOperations
  langs:
  - java
  name: <T>findById(Object id, Class<T> domainType)
  nameWithType: CosmosOperations.<T>findById(Object id, Class<T> domainType)
  fullName: com.azure.spring.data.cosmos.core.CosmosOperations.<T>findById(Object id, Class<T> domainType)
  overload: com.azure.spring.data.cosmos.core.CosmosOperations.findById*
  type: Method
  package: com.azure.spring.data.cosmos.core
  summary: Finds item by id
  syntax:
    content: public abstract T <T>findById(Object id, Class<T> domainType)
    parameters:
    - id: id
      type: java.lang.Object
      description: must not be null
    - id: domainType
      type: java.lang.Class<T>
      description: must not be null
    return:
      type: T
      description: found item
- uid: com.azure.spring.data.cosmos.core.CosmosOperations.<T>findById(java.lang.Object,java.lang.Class<T>,com.azure.cosmos.models.PartitionKey)
  id: <T>findById(java.lang.Object,java.lang.Class<T>,com.azure.cosmos.models.PartitionKey)
  artifact: com.azure:azure-spring-data-cosmos:3.0.0-beta.2
  parent: com.azure.spring.data.cosmos.core.CosmosOperations
  langs:
  - java
  name: <T>findById(Object id, Class<T> domainType, PartitionKey partitionKey)
  nameWithType: CosmosOperations.<T>findById(Object id, Class<T> domainType, PartitionKey partitionKey)
  fullName: com.azure.spring.data.cosmos.core.CosmosOperations.<T>findById(Object id, Class<T> domainType, PartitionKey partitionKey)
  overload: com.azure.spring.data.cosmos.core.CosmosOperations.findById*
  type: Method
  package: com.azure.spring.data.cosmos.core
  summary: Finds item by id
  syntax:
    content: public abstract T <T>findById(Object id, Class<T> domainType, PartitionKey partitionKey)
    parameters:
    - id: id
      type: java.lang.Object
      description: must not be null
    - id: domainType
      type: java.lang.Class<T>
      description: must not be null
    - id: partitionKey
      type: com.azure.cosmos.models.PartitionKey
      description: must not be null
    return:
      type: T
      description: found item
- uid: com.azure.spring.data.cosmos.core.CosmosOperations.<T>findById(java.lang.String,java.lang.Object,java.lang.Class<T>)
  id: <T>findById(java.lang.String,java.lang.Object,java.lang.Class<T>)
  artifact: com.azure:azure-spring-data-cosmos:3.0.0-beta.2
  parent: com.azure.spring.data.cosmos.core.CosmosOperations
  langs:
  - java
  name: <T>findById(String containerName, Object id, Class<T> domainType)
  nameWithType: CosmosOperations.<T>findById(String containerName, Object id, Class<T> domainType)
  fullName: com.azure.spring.data.cosmos.core.CosmosOperations.<T>findById(String containerName, Object id, Class<T> domainType)
  overload: com.azure.spring.data.cosmos.core.CosmosOperations.findById*
  type: Method
  package: com.azure.spring.data.cosmos.core
  summary: Finds item by id
  syntax:
    content: public abstract T <T>findById(String containerName, Object id, Class<T> domainType)
    parameters:
    - id: containerName
      type: java.lang.String
      description: must not be null
    - id: id
      type: java.lang.Object
      description: must not be null
    - id: domainType
      type: java.lang.Class<T>
      description: must not be null
    return:
      type: T
      description: found item
- uid: com.azure.spring.data.cosmos.core.CosmosOperations.<T>insert(T,com.azure.cosmos.models.PartitionKey)
  id: <T>insert(T,com.azure.cosmos.models.PartitionKey)
  artifact: com.azure:azure-spring-data-cosmos:3.0.0-beta.2
  parent: com.azure.spring.data.cosmos.core.CosmosOperations
  langs:
  - java
  name: <T>insert(T objectToSave, PartitionKey partitionKey)
  nameWithType: CosmosOperations.<T>insert(T objectToSave, PartitionKey partitionKey)
  fullName: com.azure.spring.data.cosmos.core.CosmosOperations.<T>insert(T objectToSave, PartitionKey partitionKey)
  overload: com.azure.spring.data.cosmos.core.CosmosOperations.insert*
  type: Method
  package: com.azure.spring.data.cosmos.core
  summary: Inserts item
  syntax:
    content: public abstract T <T>insert(T objectToSave, PartitionKey partitionKey)
    parameters:
    - id: objectToSave
      type: T
      description: must not be null
    - id: partitionKey
      type: com.azure.cosmos.models.PartitionKey
      description: must not be null
    return:
      type: T
      description: the inserted item
- uid: com.azure.spring.data.cosmos.core.CosmosOperations.<T>insert(java.lang.String,T)
  id: <T>insert(java.lang.String,T)
  artifact: com.azure:azure-spring-data-cosmos:3.0.0-beta.2
  parent: com.azure.spring.data.cosmos.core.CosmosOperations
  langs:
  - java
  name: <T>insert(String containerName, T objectToSave)
  nameWithType: CosmosOperations.<T>insert(String containerName, T objectToSave)
  fullName: com.azure.spring.data.cosmos.core.CosmosOperations.<T>insert(String containerName, T objectToSave)
  overload: com.azure.spring.data.cosmos.core.CosmosOperations.insert*
  type: Method
  package: com.azure.spring.data.cosmos.core
  summary: Inserts item
  syntax:
    content: public abstract T <T>insert(String containerName, T objectToSave)
    parameters:
    - id: containerName
      type: java.lang.String
      description: must not be null
    - id: objectToSave
      type: T
      description: must not be null
    return:
      type: T
      description: the inserted item
- uid: com.azure.spring.data.cosmos.core.CosmosOperations.<T>insert(java.lang.String,T,com.azure.cosmos.models.PartitionKey)
  id: <T>insert(java.lang.String,T,com.azure.cosmos.models.PartitionKey)
  artifact: com.azure:azure-spring-data-cosmos:3.0.0-beta.2
  parent: com.azure.spring.data.cosmos.core.CosmosOperations
  langs:
  - java
  name: <T>insert(String containerName, T objectToSave, PartitionKey partitionKey)
  nameWithType: CosmosOperations.<T>insert(String containerName, T objectToSave, PartitionKey partitionKey)
  fullName: com.azure.spring.data.cosmos.core.CosmosOperations.<T>insert(String containerName, T objectToSave, PartitionKey partitionKey)
  overload: com.azure.spring.data.cosmos.core.CosmosOperations.insert*
  type: Method
  package: com.azure.spring.data.cosmos.core
  summary: Inserts item
  syntax:
    content: public abstract T <T>insert(String containerName, T objectToSave, PartitionKey partitionKey)
    parameters:
    - id: containerName
      type: java.lang.String
      description: must not be null
    - id: objectToSave
      type: T
      description: must not be null
    - id: partitionKey
      type: com.azure.cosmos.models.PartitionKey
      description: must not be null
    return:
      type: T
      description: the inserted item
- uid: com.azure.spring.data.cosmos.core.CosmosOperations.<T>paginationQuery(com.azure.spring.data.cosmos.core.query.CosmosQuery,java.lang.Class<T>,java.lang.String)
  id: <T>paginationQuery(com.azure.spring.data.cosmos.core.query.CosmosQuery,java.lang.Class<T>,java.lang.String)
  artifact: com.azure:azure-spring-data-cosmos:3.0.0-beta.2
  parent: com.azure.spring.data.cosmos.core.CosmosOperations
  langs:
  - java
  name: <T>paginationQuery(CosmosQuery query, Class<T> domainType, String containerName)
  nameWithType: CosmosOperations.<T>paginationQuery(CosmosQuery query, Class<T> domainType, String containerName)
  fullName: com.azure.spring.data.cosmos.core.CosmosOperations.<T>paginationQuery(CosmosQuery query, Class<T> domainType, String containerName)
  overload: com.azure.spring.data.cosmos.core.CosmosOperations.paginationQuery*
  type: Method
  package: com.azure.spring.data.cosmos.core
  summary: Pagination query
  syntax:
    content: public abstract Page<T> <T>paginationQuery(CosmosQuery query, Class<T> domainType, String containerName)
    parameters:
    - id: query
      type: com.azure.spring.data.cosmos.core.query.CosmosQuery
      description: the document query
    - id: domainType
      type: java.lang.Class<T>
      description: type class
    - id: containerName
      type: java.lang.String
      description: the container name
    return:
      type: org.springframework.data.domain.Page<T>
      description: results as Page
- uid: com.azure.spring.data.cosmos.core.CosmosOperations.<T>runQuery(com.azure.cosmos.models.SqlQuerySpec,java.lang.Class<?>,java.lang.Class<T>)
  id: <T>runQuery(com.azure.cosmos.models.SqlQuerySpec,java.lang.Class<?>,java.lang.Class<T>)
  artifact: com.azure:azure-spring-data-cosmos:3.0.0-beta.2
  parent: com.azure.spring.data.cosmos.core.CosmosOperations
  langs:
  - java
  name: <T>runQuery(SqlQuerySpec querySpec, Class<?> domainType, Class<T> returnType)
  nameWithType: CosmosOperations.<T>runQuery(SqlQuerySpec querySpec, Class<?> domainType, Class<T> returnType)
  fullName: com.azure.spring.data.cosmos.core.CosmosOperations.<T>runQuery(SqlQuerySpec querySpec, Class<?> domainType, Class<T> returnType)
  overload: com.azure.spring.data.cosmos.core.CosmosOperations.runQuery*
  type: Method
  package: com.azure.spring.data.cosmos.core
  summary: Run the query.
  syntax:
    content: public abstract Iterable<T> <T>runQuery(SqlQuerySpec querySpec, Class<?> domainType, Class<T> returnType)
    parameters:
    - id: querySpec
      type: com.azure.cosmos.models.SqlQuerySpec
      description: the query spec
    - id: domainType
      type: java.lang.Class<?>
      description: the domain type
    - id: returnType
      type: java.lang.Class<T>
      description: the return type
    return:
      type: java.lang.Iterable<T>
      description: the Iterable
- uid: com.azure.spring.data.cosmos.core.CosmosOperations.<T>upsert(T)
  id: <T>upsert(T)
  artifact: com.azure:azure-spring-data-cosmos:3.0.0-beta.2
  parent: com.azure.spring.data.cosmos.core.CosmosOperations
  langs:
  - java
  name: <T>upsert(T object)
  nameWithType: CosmosOperations.<T>upsert(T object)
  fullName: com.azure.spring.data.cosmos.core.CosmosOperations.<T>upsert(T object)
  overload: com.azure.spring.data.cosmos.core.CosmosOperations.upsert*
  type: Method
  package: com.azure.spring.data.cosmos.core
  summary: Upserts an item with partition key
  syntax:
    content: public abstract void <T>upsert(T object)
    parameters:
    - id: object
      type: T
      description: upsert object
- uid: com.azure.spring.data.cosmos.core.CosmosOperations.<T>upsert(java.lang.String,T)
  id: <T>upsert(java.lang.String,T)
  artifact: com.azure:azure-spring-data-cosmos:3.0.0-beta.2
  parent: com.azure.spring.data.cosmos.core.CosmosOperations
  langs:
  - java
  name: <T>upsert(String containerName, T object)
  nameWithType: CosmosOperations.<T>upsert(String containerName, T object)
  fullName: com.azure.spring.data.cosmos.core.CosmosOperations.<T>upsert(String containerName, T object)
  overload: com.azure.spring.data.cosmos.core.CosmosOperations.upsert*
  type: Method
  package: com.azure.spring.data.cosmos.core
  summary: Upserts an item into container with partition key
  syntax:
    content: public abstract void <T>upsert(String containerName, T object)
    parameters:
    - id: containerName
      type: java.lang.String
      description: the container name
    - id: object
      type: T
      description: upsert object
- uid: com.azure.spring.data.cosmos.core.CosmosOperations.<T>upsertAndReturnEntity(java.lang.String,T)
  id: <T>upsertAndReturnEntity(java.lang.String,T)
  artifact: com.azure:azure-spring-data-cosmos:3.0.0-beta.2
  parent: com.azure.spring.data.cosmos.core.CosmosOperations
  langs:
  - java
  name: <T>upsertAndReturnEntity(String containerName, T object)
  nameWithType: CosmosOperations.<T>upsertAndReturnEntity(String containerName, T object)
  fullName: com.azure.spring.data.cosmos.core.CosmosOperations.<T>upsertAndReturnEntity(String containerName, T object)
  overload: com.azure.spring.data.cosmos.core.CosmosOperations.upsertAndReturnEntity*
  type: Method
  package: com.azure.spring.data.cosmos.core
  summary: Upserts an item and return item properties
  syntax:
    content: public abstract T <T>upsertAndReturnEntity(String containerName, T object)
    parameters:
    - id: containerName
      type: java.lang.String
      description: the container name
    - id: object
      type: T
      description: upsert object
    return:
      type: T
      description: upsert object entity
- uid: com.azure.spring.data.cosmos.core.CosmosOperations.count(java.lang.String)
  id: count(java.lang.String)
  artifact: com.azure:azure-spring-data-cosmos:3.0.0-beta.2
  parent: com.azure.spring.data.cosmos.core.CosmosOperations
  langs:
  - java
  name: count(String containerName)
  nameWithType: CosmosOperations.count(String containerName)
  fullName: com.azure.spring.data.cosmos.core.CosmosOperations.count(String containerName)
  overload: com.azure.spring.data.cosmos.core.CosmosOperations.count*
  type: Method
  package: com.azure.spring.data.cosmos.core
  summary: Count
  syntax:
    content: public abstract long count(String containerName)
    parameters:
    - id: containerName
      type: java.lang.String
      description: the container name
    return:
      type: long
      description: count result
- uid: com.azure.spring.data.cosmos.core.CosmosOperations.createContainerIfNotExists(com.azure.spring.data.cosmos.repository.support.CosmosEntityInformation<?,?>)
  id: createContainerIfNotExists(com.azure.spring.data.cosmos.repository.support.CosmosEntityInformation<?,?>)
  artifact: com.azure:azure-spring-data-cosmos:3.0.0-beta.2
  parent: com.azure.spring.data.cosmos.core.CosmosOperations
  langs:
  - java
  name: createContainerIfNotExists(CosmosEntityInformation<?,?> information)
  nameWithType: CosmosOperations.createContainerIfNotExists(CosmosEntityInformation<?,?> information)
  fullName: com.azure.spring.data.cosmos.core.CosmosOperations.createContainerIfNotExists(CosmosEntityInformation<?,?> information)
  overload: com.azure.spring.data.cosmos.core.CosmosOperations.createContainerIfNotExists*
  type: Method
  package: com.azure.spring.data.cosmos.core
  summary: Creates container if not exists
  syntax:
    content: public abstract CosmosContainerProperties createContainerIfNotExists(CosmosEntityInformation<?,?> information)
    parameters:
    - id: information
      type: com.azure.spring.data.cosmos.repository.support.CosmosEntityInformation<?,?>
      description: CosmosEntityInformation
    return:
      type: com.azure.cosmos.models.CosmosContainerProperties
      description: CosmosContainerProperties
- uid: com.azure.spring.data.cosmos.core.CosmosOperations.deleteAll(java.lang.String,java.lang.Class<?>)
  id: deleteAll(java.lang.String,java.lang.Class<?>)
  artifact: com.azure:azure-spring-data-cosmos:3.0.0-beta.2
  parent: com.azure.spring.data.cosmos.core.CosmosOperations
  langs:
  - java
  name: deleteAll(String containerName, Class<?> domainType)
  nameWithType: CosmosOperations.deleteAll(String containerName, Class<?> domainType)
  fullName: com.azure.spring.data.cosmos.core.CosmosOperations.deleteAll(String containerName, Class<?> domainType)
  overload: com.azure.spring.data.cosmos.core.CosmosOperations.deleteAll*
  type: Method
  package: com.azure.spring.data.cosmos.core
  summary: Delete all items in a container
  syntax:
    content: public abstract void deleteAll(String containerName, Class<?> domainType)
    parameters:
    - id: containerName
      type: java.lang.String
      description: the container name
    - id: domainType
      type: java.lang.Class<?>
      description: the domainType
- uid: com.azure.spring.data.cosmos.core.CosmosOperations.deleteById(java.lang.String,java.lang.Object,com.azure.cosmos.models.PartitionKey)
  id: deleteById(java.lang.String,java.lang.Object,com.azure.cosmos.models.PartitionKey)
  artifact: com.azure:azure-spring-data-cosmos:3.0.0-beta.2
  parent: com.azure.spring.data.cosmos.core.CosmosOperations
  langs:
  - java
  name: deleteById(String containerName, Object id, PartitionKey partitionKey)
  nameWithType: CosmosOperations.deleteById(String containerName, Object id, PartitionKey partitionKey)
  fullName: com.azure.spring.data.cosmos.core.CosmosOperations.deleteById(String containerName, Object id, PartitionKey partitionKey)
  overload: com.azure.spring.data.cosmos.core.CosmosOperations.deleteById*
  type: Method
  package: com.azure.spring.data.cosmos.core
  summary: Delete an item by id
  syntax:
    content: public abstract void deleteById(String containerName, Object id, PartitionKey partitionKey)
    parameters:
    - id: containerName
      type: java.lang.String
      description: the container name
    - id: id
      type: java.lang.Object
      description: the id
    - id: partitionKey
      type: com.azure.cosmos.models.PartitionKey
      description: the partition key
- uid: com.azure.spring.data.cosmos.core.CosmosOperations.deleteContainer(java.lang.String)
  id: deleteContainer(java.lang.String)
  artifact: com.azure:azure-spring-data-cosmos:3.0.0-beta.2
  parent: com.azure.spring.data.cosmos.core.CosmosOperations
  langs:
  - java
  name: deleteContainer(String containerName)
  nameWithType: CosmosOperations.deleteContainer(String containerName)
  fullName: com.azure.spring.data.cosmos.core.CosmosOperations.deleteContainer(String containerName)
  overload: com.azure.spring.data.cosmos.core.CosmosOperations.deleteContainer*
  type: Method
  package: com.azure.spring.data.cosmos.core
  summary: Delete container
  syntax:
    content: public abstract void deleteContainer(String containerName)
    parameters:
    - id: containerName
      type: java.lang.String
      description: the container name
- uid: com.azure.spring.data.cosmos.core.CosmosOperations.getContainerName(java.lang.Class<?>)
  id: getContainerName(java.lang.Class<?>)
  artifact: com.azure:azure-spring-data-cosmos:3.0.0-beta.2
  parent: com.azure.spring.data.cosmos.core.CosmosOperations
  langs:
  - java
  name: getContainerName(Class<?> domainType)
  nameWithType: CosmosOperations.getContainerName(Class<?> domainType)
  fullName: com.azure.spring.data.cosmos.core.CosmosOperations.getContainerName(Class<?> domainType)
  overload: com.azure.spring.data.cosmos.core.CosmosOperations.getContainerName*
  type: Method
  package: com.azure.spring.data.cosmos.core
  summary: To get container name by domainType
  syntax:
    content: public abstract String getContainerName(Class<?> domainType)
    parameters:
    - id: domainType
      type: java.lang.Class<?>
      description: class type
    return:
      type: java.lang.String
      description: String
- uid: com.azure.spring.data.cosmos.core.CosmosOperations.getConverter()
  id: getConverter()
  artifact: com.azure:azure-spring-data-cosmos:3.0.0-beta.2
  parent: com.azure.spring.data.cosmos.core.CosmosOperations
  langs:
  - java
  name: getConverter()
  nameWithType: CosmosOperations.getConverter()
  fullName: com.azure.spring.data.cosmos.core.CosmosOperations.getConverter()
  overload: com.azure.spring.data.cosmos.core.CosmosOperations.getConverter*
  type: Method
  package: com.azure.spring.data.cosmos.core
  summary: To get converter
  syntax:
    content: public abstract MappingCosmosConverter getConverter()
    return:
      type: com.azure.spring.data.cosmos.core.convert.MappingCosmosConverter
      description: MappingCosmosConverter
references:
- uid: java.lang.Class<?>
  spec.java:
  - uid: java.lang.Class
    name: Class
    fullName: java.lang.Class
  - name: <
    fullName: <
  - uid: '?'
    name: '?'
    fullName: '?'
  - name: '>'
    fullName: '>'
- uid: java.lang.String
  spec.java:
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
- uid: com.azure.spring.data.cosmos.core.CosmosOperations.getContainerName*
  name: getContainerName
  nameWithType: CosmosOperations.getContainerName
  fullName: com.azure.spring.data.cosmos.core.CosmosOperations.getContainerName
  package: com.azure.spring.data.cosmos.core
- uid: com.azure.spring.data.cosmos.repository.support.CosmosEntityInformation<?,?>
  spec.java:
  - uid: com.azure.spring.data.cosmos.repository.support.CosmosEntityInformation
    name: CosmosEntityInformation
    fullName: com.azure.spring.data.cosmos.repository.support.CosmosEntityInformation
  - name: <
    fullName: <
  - uid: '?'
    name: '?'
    fullName: '?'
  - name: ','
    fullName: ','
  - uid: '?'
    name: '?'
    fullName: '?'
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.models.CosmosContainerProperties
  spec.java:
  - uid: com.azure.cosmos.models.CosmosContainerProperties
    name: CosmosContainerProperties
    fullName: com.azure.cosmos.models.CosmosContainerProperties
- uid: com.azure.spring.data.cosmos.core.CosmosOperations.createContainerIfNotExists*
  name: createContainerIfNotExists
  nameWithType: CosmosOperations.createContainerIfNotExists
  fullName: com.azure.spring.data.cosmos.core.CosmosOperations.createContainerIfNotExists
  package: com.azure.spring.data.cosmos.core
- uid: java.lang.Class<T>
  spec.java:
  - uid: java.lang.Class
    name: Class
    fullName: java.lang.Class
  - name: <
    fullName: <
  - uid: T
    name: T
    fullName: T
  - name: '>'
    fullName: '>'
- uid: java.lang.Iterable<T>
  spec.java:
  - uid: java.lang.Iterable
    name: Iterable
    fullName: java.lang.Iterable
  - name: <
    fullName: <
  - uid: T
    name: T
    fullName: T
  - name: '>'
    fullName: '>'
- uid: com.azure.spring.data.cosmos.core.CosmosOperations.findAll*
  name: <T>findAll
  nameWithType: CosmosOperations.<T>findAll
  fullName: com.azure.spring.data.cosmos.core.CosmosOperations.<T>findAll
  package: com.azure.spring.data.cosmos.core
- uid: com.azure.cosmos.models.PartitionKey
  spec.java:
  - uid: com.azure.cosmos.models.PartitionKey
    name: PartitionKey
    fullName: com.azure.cosmos.models.PartitionKey
- uid: java.lang.Object
  spec.java:
  - uid: java.lang.Object
    name: Object
    fullName: java.lang.Object
- uid: T
  spec.java:
  - uid: T
    name: T
    fullName: T
- uid: com.azure.spring.data.cosmos.core.CosmosOperations.findById*
  name: <T>findById
  nameWithType: CosmosOperations.<T>findById
  fullName: com.azure.spring.data.cosmos.core.CosmosOperations.<T>findById
  package: com.azure.spring.data.cosmos.core
- uid: com.azure.spring.data.cosmos.core.CosmosOperations.insert*
  name: <T>insert
  nameWithType: CosmosOperations.<T>insert
  fullName: com.azure.spring.data.cosmos.core.CosmosOperations.<T>insert
  package: com.azure.spring.data.cosmos.core
- uid: com.azure.spring.data.cosmos.core.CosmosOperations.upsert*
  name: <T>upsert
  nameWithType: CosmosOperations.<T>upsert
  fullName: com.azure.spring.data.cosmos.core.CosmosOperations.<T>upsert
  package: com.azure.spring.data.cosmos.core
- uid: com.azure.spring.data.cosmos.core.CosmosOperations.upsertAndReturnEntity*
  name: <T>upsertAndReturnEntity
  nameWithType: CosmosOperations.<T>upsertAndReturnEntity
  fullName: com.azure.spring.data.cosmos.core.CosmosOperations.<T>upsertAndReturnEntity
  package: com.azure.spring.data.cosmos.core
- uid: com.azure.spring.data.cosmos.core.CosmosOperations.deleteById*
  name: deleteById
  nameWithType: CosmosOperations.deleteById
  fullName: com.azure.spring.data.cosmos.core.CosmosOperations.deleteById
  package: com.azure.spring.data.cosmos.core
- uid: com.azure.spring.data.cosmos.core.CosmosOperations.deleteEntity*
  name: <T>deleteEntity
  nameWithType: CosmosOperations.<T>deleteEntity
  fullName: com.azure.spring.data.cosmos.core.CosmosOperations.<T>deleteEntity
  package: com.azure.spring.data.cosmos.core
- uid: com.azure.spring.data.cosmos.core.CosmosOperations.deleteAll*
  name: deleteAll
  nameWithType: CosmosOperations.deleteAll
  fullName: com.azure.spring.data.cosmos.core.CosmosOperations.deleteAll
  package: com.azure.spring.data.cosmos.core
- uid: com.azure.spring.data.cosmos.core.CosmosOperations.deleteContainer*
  name: deleteContainer
  nameWithType: CosmosOperations.deleteContainer
  fullName: com.azure.spring.data.cosmos.core.CosmosOperations.deleteContainer
  package: com.azure.spring.data.cosmos.core
- uid: com.azure.spring.data.cosmos.core.query.CosmosQuery
  name: CosmosQuery
  nameWithType: CosmosQuery
  fullName: com.azure.spring.data.cosmos.core.query.CosmosQuery
- uid: com.azure.spring.data.cosmos.core.CosmosOperations.delete*
  name: <T>delete
  nameWithType: CosmosOperations.<T>delete
  fullName: com.azure.spring.data.cosmos.core.CosmosOperations.<T>delete
  package: com.azure.spring.data.cosmos.core
- uid: com.azure.spring.data.cosmos.core.CosmosOperations.find*
  name: <T>find
  nameWithType: CosmosOperations.<T>find
  fullName: com.azure.spring.data.cosmos.core.CosmosOperations.<T>find
  package: com.azure.spring.data.cosmos.core
- uid: java.lang.Iterable<ID>
  spec.java:
  - uid: java.lang.Iterable
    name: Iterable
    fullName: java.lang.Iterable
  - name: <
    fullName: <
  - uid: ID
    name: ID
    fullName: ID
  - name: '>'
    fullName: '>'
- uid: com.azure.spring.data.cosmos.core.CosmosOperations.findByIds*
  name: <T,ID>findByIds
  nameWithType: CosmosOperations.<T,ID>findByIds
  fullName: com.azure.spring.data.cosmos.core.CosmosOperations.<T,ID>findByIds
  package: com.azure.spring.data.cosmos.core
- uid: java.lang.Boolean
  spec.java:
  - uid: java.lang.Boolean
    name: Boolean
    fullName: java.lang.Boolean
- uid: com.azure.spring.data.cosmos.core.CosmosOperations.exists*
  name: <T>exists
  nameWithType: CosmosOperations.<T>exists
  fullName: com.azure.spring.data.cosmos.core.CosmosOperations.<T>exists
  package: com.azure.spring.data.cosmos.core
- uid: org.springframework.data.domain.Pageable
  spec.java:
  - uid: org.springframework.data.domain.Pageable
    name: Pageable
    fullName: org.springframework.data.domain.Pageable
- uid: org.springframework.data.domain.Page<T>
  spec.java:
  - uid: org.springframework.data.domain.Page
    name: Page
    fullName: org.springframework.data.domain.Page
  - name: <
    fullName: <
  - uid: T
    name: T
    fullName: T
  - name: '>'
    fullName: '>'
- uid: com.azure.spring.data.cosmos.core.CosmosOperations.paginationQuery*
  name: <T>paginationQuery
  nameWithType: CosmosOperations.<T>paginationQuery
  fullName: com.azure.spring.data.cosmos.core.CosmosOperations.<T>paginationQuery
  package: com.azure.spring.data.cosmos.core
- uid: long
  spec.java:
  - uid: long
    name: long
    fullName: long
- uid: com.azure.spring.data.cosmos.core.CosmosOperations.count*
  name: count
  nameWithType: CosmosOperations.count
  fullName: com.azure.spring.data.cosmos.core.CosmosOperations.count
  package: com.azure.spring.data.cosmos.core
- uid: com.azure.spring.data.cosmos.core.convert.MappingCosmosConverter
  name: MappingCosmosConverter
  nameWithType: MappingCosmosConverter
  fullName: com.azure.spring.data.cosmos.core.convert.MappingCosmosConverter
- uid: com.azure.spring.data.cosmos.core.CosmosOperations.getConverter*
  name: getConverter
  nameWithType: CosmosOperations.getConverter
  fullName: com.azure.spring.data.cosmos.core.CosmosOperations.getConverter
  package: com.azure.spring.data.cosmos.core
- uid: com.azure.cosmos.models.SqlQuerySpec
  spec.java:
  - uid: com.azure.cosmos.models.SqlQuerySpec
    name: SqlQuerySpec
    fullName: com.azure.cosmos.models.SqlQuerySpec
- uid: com.azure.spring.data.cosmos.core.CosmosOperations.runQuery*
  name: <T>runQuery
  nameWithType: CosmosOperations.<T>runQuery
  fullName: com.azure.spring.data.cosmos.core.CosmosOperations.<T>runQuery
  package: com.azure.spring.data.cosmos.core
- uid: java.lang.Class
  name: Class
  nameWithType: Class
  fullName: java.lang.Class
- uid: '?'
  name: '?'
  nameWithType: '?'
  fullName: '?'
- uid: ?,?
  name: ?,?
  nameWithType: ?,?
  fullName: ?,?
- uid: com.azure.spring.data.cosmos.repository.support.CosmosEntityInformation
  name: CosmosEntityInformation
  nameWithType: CosmosEntityInformation
  fullName: com.azure.spring.data.cosmos.repository.support.CosmosEntityInformation
- uid: java.lang.Iterable
  name: Iterable
  nameWithType: Iterable
  fullName: java.lang.Iterable
- uid: ID
  name: ID
  nameWithType: ID
  fullName: ID
- uid: org.springframework.data.domain.Page
  name: Page
  nameWithType: Page
  fullName: org.springframework.data.domain.Page
