### YamlMime:JavaMember
uid: "com.fasterxml.jackson.databind.ObjectMapper.readTree*"
fullName: "com.fasterxml.jackson.databind.ObjectMapper.<T>readTree"
name: "<T>readTree"
nameWithType: "ObjectMapper.<T>readTree"
members:
- uid: "com.fasterxml.jackson.databind.ObjectMapper.<T>readTree(com.fasterxml.jackson.core.JsonParser)"
  fullName: "com.fasterxml.jackson.databind.ObjectMapper.<T>readTree(JsonParser p)"
  name: "<T>readTree(JsonParser p)"
  nameWithType: "ObjectMapper.<T>readTree(JsonParser p)"
  summary: "Method to deserialize JSON content as a tree <xref uid=\"com.fasterxml.jackson.databind.JsonNode\" data-throw-if-not-resolved=\"false\" data-raw-source=\"JsonNode\"></xref>. Returns <xref uid=\"com.fasterxml.jackson.databind.JsonNode\" data-throw-if-not-resolved=\"false\" data-raw-source=\"JsonNode\"></xref> that represents the root of the resulting tree, if there was content to read, or `null` if no more content is accessible via passed <xref uid=\"com.fasterxml.jackson.core.JsonParser\" data-throw-if-not-resolved=\"false\" data-raw-source=\"JsonParser\"></xref>.\n\nNOTE! Behavior with end-of-input (no more content) differs between this `readTree` method, and all other methods that take input source: latter will return \"missing node\", NOT `null`"
  overridden: "com.fasterxml.jackson.core.ObjectCodec.<T>readTree(com.fasterxml.jackson.core.JsonParser)"
  parameters:
  - name: "p"
    type: "<xref href=\"com.fasterxml.jackson.core.JsonParser?alt=com.fasterxml.jackson.core.JsonParser&text=JsonParser\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public T <T>readTree(JsonParser p)"
  exceptions:
  - description: "if a low-level I/O problem (unexpected end-of-input,\n   network error) occurs (passed through as-is without additional wrapping -- note\n   that this is one case where <xref uid=\"DeserializationFeature#WRAP_EXCEPTIONS\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DeserializationFeature#WRAP_EXCEPTIONS\"></xref>\n   does NOT result in wrapping of exception even if enabled)"
    type: "<xref href=\"java.io.IOException?alt=java.io.IOException&text=IOException\" data-throw-if-not-resolved=\"False\" />"
  - description: "if a low-level I/O problem (unexpected end-of-input,\n   network error) occurs (passed through as-is without additional wrapping -- note\n   that this is one case where <xref uid=\"DeserializationFeature#WRAP_EXCEPTIONS\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DeserializationFeature#WRAP_EXCEPTIONS\"></xref>\n   does NOT result in wrapping of exception even if enabled)"
    type: "<xref href=\"com.fasterxml.jackson.core.JsonProcessingException?alt=com.fasterxml.jackson.core.JsonProcessingException&text=JsonProcessingException\" data-throw-if-not-resolved=\"False\" />"
  returns:
    description: "a <xref uid=\"com.fasterxml.jackson.databind.JsonNode\" data-throw-if-not-resolved=\"false\" data-raw-source=\"JsonNode\"></xref>, if valid JSON content found; null\n   if input has no content to bind -- note, however, that if\n   JSON <code>null</code> token is found, it will be represented\n   as a non-null <xref uid=\"com.fasterxml.jackson.databind.JsonNode\" data-throw-if-not-resolved=\"false\" data-raw-source=\"JsonNode\"></xref> (one that returns <code>true</code>\n   for <xref uid=\"com.fasterxml.jackson.databind.JsonNode.isNull()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"JsonNode#isNull()\"></xref>"
    type: "<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.fasterxml.jackson.databind.ObjectMapper.readTree(byte[])"
  fullName: "com.fasterxml.jackson.databind.ObjectMapper.readTree(byte[] content)"
  name: "readTree(byte[] content)"
  nameWithType: "ObjectMapper.readTree(byte[] content)"
  summary: "Same as <xref uid=\"com.fasterxml.jackson.databind.ObjectMapper.readTree(java.io.InputStream)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#readTree(InputStream)\"></xref> except content read from passed-in byte array."
  parameters:
  - name: "content"
    type: "<xref href=\"byte?alt=byte&text=byte\" data-throw-if-not-resolved=\"False\" />[]"
  syntax: "public JsonNode readTree(byte[] content)"
  exceptions:
  - type: "<xref href=\"java.io.IOException?alt=java.io.IOException&text=IOException\" data-throw-if-not-resolved=\"False\" />"
  returns:
    type: "<xref href=\"com.fasterxml.jackson.databind.JsonNode?alt=com.fasterxml.jackson.databind.JsonNode&text=JsonNode\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.fasterxml.jackson.databind.ObjectMapper.readTree(byte[],int,int)"
  fullName: "com.fasterxml.jackson.databind.ObjectMapper.readTree(byte[] content, int offset, int len)"
  name: "readTree(byte[] content, int offset, int len)"
  nameWithType: "ObjectMapper.readTree(byte[] content, int offset, int len)"
  summary: "Same as <xref uid=\"com.fasterxml.jackson.databind.ObjectMapper.readTree(java.io.InputStream)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#readTree(InputStream)\"></xref> except content read from passed-in byte array."
  parameters:
  - name: "content"
    type: "<xref href=\"byte?alt=byte&text=byte\" data-throw-if-not-resolved=\"False\" />[]"
  - name: "offset"
    type: "<xref href=\"int?alt=int&text=int\" data-throw-if-not-resolved=\"False\" />"
  - name: "len"
    type: "<xref href=\"int?alt=int&text=int\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public JsonNode readTree(byte[] content, int offset, int len)"
  exceptions:
  - type: "<xref href=\"java.io.IOException?alt=java.io.IOException&text=IOException\" data-throw-if-not-resolved=\"False\" />"
  returns:
    type: "<xref href=\"com.fasterxml.jackson.databind.JsonNode?alt=com.fasterxml.jackson.databind.JsonNode&text=JsonNode\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.fasterxml.jackson.databind.ObjectMapper.readTree(java.io.File)"
  fullName: "com.fasterxml.jackson.databind.ObjectMapper.readTree(File file)"
  name: "readTree(File file)"
  nameWithType: "ObjectMapper.readTree(File file)"
  summary: "Same as <xref uid=\"com.fasterxml.jackson.databind.ObjectMapper.readTree(java.io.InputStream)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#readTree(InputStream)\"></xref> except content read from passed-in <xref uid=\"java.io.File\" data-throw-if-not-resolved=\"false\" data-raw-source=\"File\"></xref>."
  parameters:
  - name: "file"
    type: "<xref href=\"java.io.File?alt=java.io.File&text=File\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public JsonNode readTree(File file)"
  exceptions:
  - type: "<xref href=\"java.io.IOException?alt=java.io.IOException&text=IOException\" data-throw-if-not-resolved=\"False\" />"
  - type: "<xref href=\"com.fasterxml.jackson.core.JsonProcessingException?alt=com.fasterxml.jackson.core.JsonProcessingException&text=JsonProcessingException\" data-throw-if-not-resolved=\"False\" />"
  returns:
    type: "<xref href=\"com.fasterxml.jackson.databind.JsonNode?alt=com.fasterxml.jackson.databind.JsonNode&text=JsonNode\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.fasterxml.jackson.databind.ObjectMapper.readTree(java.io.InputStream)"
  fullName: "com.fasterxml.jackson.databind.ObjectMapper.readTree(InputStream in)"
  name: "readTree(InputStream in)"
  nameWithType: "ObjectMapper.readTree(InputStream in)"
  summary: "Method to deserialize JSON content as tree expressed using set of <xref uid=\"com.fasterxml.jackson.databind.JsonNode\" data-throw-if-not-resolved=\"false\" data-raw-source=\"JsonNode\"></xref> instances. Returns root of the resulting tree (where root can consist of just a single node if the current event is a value event, not container).\n\nIf a low-level I/O problem (missing input, network error) occurs, a <xref uid=\"java.io.IOException\" data-throw-if-not-resolved=\"false\" data-raw-source=\"IOException\"></xref> will be thrown. If a parsing problem occurs (invalid JSON), <xref uid=\"com.fasterxml.jackson.core.JsonParseException\" data-throw-if-not-resolved=\"false\" data-raw-source=\"JsonParseException\"></xref> will be thrown. If no content is found from input (end-of-input), Java `null` will be returned."
  parameters:
  - description: "Input stream used to read JSON content\n   for building the JSON tree."
    name: "in"
    type: "<xref href=\"java.io.InputStream?alt=java.io.InputStream&text=InputStream\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public JsonNode readTree(InputStream in)"
  exceptions:
  - description: "if underlying input contains invalid content\n    of type <xref uid=\"JsonParser\" data-throw-if-not-resolved=\"false\" data-raw-source=\"JsonParser\"></xref> supports (JSON for default case)"
    type: "<xref href=\"java.io.IOException?alt=java.io.IOException&text=IOException\" data-throw-if-not-resolved=\"False\" />"
  returns:
    description: "a <xref uid=\"com.fasterxml.jackson.databind.JsonNode\" data-throw-if-not-resolved=\"false\" data-raw-source=\"JsonNode\"></xref>, if valid JSON content found; null\n   if input has no content to bind -- note, however, that if\n   JSON <code>null</code> token is found, it will be represented\n   as a non-null <xref uid=\"com.fasterxml.jackson.databind.JsonNode\" data-throw-if-not-resolved=\"false\" data-raw-source=\"JsonNode\"></xref> (one that returns <code>true</code>\n   for <xref uid=\"com.fasterxml.jackson.databind.JsonNode.isNull()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"JsonNode#isNull()\"></xref>"
    type: "<xref href=\"com.fasterxml.jackson.databind.JsonNode?alt=com.fasterxml.jackson.databind.JsonNode&text=JsonNode\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.fasterxml.jackson.databind.ObjectMapper.readTree(java.io.Reader)"
  fullName: "com.fasterxml.jackson.databind.ObjectMapper.readTree(Reader r)"
  name: "readTree(Reader r)"
  nameWithType: "ObjectMapper.readTree(Reader r)"
  summary: "Same as <xref uid=\"com.fasterxml.jackson.databind.ObjectMapper.readTree(java.io.InputStream)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#readTree(InputStream)\"></xref> except content accessed through passed-in <xref uid=\"java.io.Reader\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Reader\"></xref>"
  parameters:
  - name: "r"
    type: "<xref href=\"java.io.Reader?alt=java.io.Reader&text=Reader\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public JsonNode readTree(Reader r)"
  exceptions:
  - type: "<xref href=\"java.io.IOException?alt=java.io.IOException&text=IOException\" data-throw-if-not-resolved=\"False\" />"
  returns:
    type: "<xref href=\"com.fasterxml.jackson.databind.JsonNode?alt=com.fasterxml.jackson.databind.JsonNode&text=JsonNode\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.fasterxml.jackson.databind.ObjectMapper.readTree(java.lang.String)"
  fullName: "com.fasterxml.jackson.databind.ObjectMapper.readTree(String content)"
  name: "readTree(String content)"
  nameWithType: "ObjectMapper.readTree(String content)"
  summary: "Same as <xref uid=\"com.fasterxml.jackson.databind.ObjectMapper.readTree(java.io.InputStream)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#readTree(InputStream)\"></xref> except content read from passed-in <xref uid=\"java.lang.String\" data-throw-if-not-resolved=\"false\" data-raw-source=\"String\"></xref>"
  parameters:
  - name: "content"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public JsonNode readTree(String content)"
  exceptions:
  - type: "<xref href=\"com.fasterxml.jackson.core.JsonProcessingException?alt=com.fasterxml.jackson.core.JsonProcessingException&text=JsonProcessingException\" data-throw-if-not-resolved=\"False\" />"
  - type: "<xref href=\"com.fasterxml.jackson.databind.JsonMappingException?alt=com.fasterxml.jackson.databind.JsonMappingException&text=JsonMappingException\" data-throw-if-not-resolved=\"False\" />"
  returns:
    type: "<xref href=\"com.fasterxml.jackson.databind.JsonNode?alt=com.fasterxml.jackson.databind.JsonNode&text=JsonNode\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.fasterxml.jackson.databind.ObjectMapper.readTree(java.net.URL)"
  fullName: "com.fasterxml.jackson.databind.ObjectMapper.readTree(URL source)"
  name: "readTree(URL source)"
  nameWithType: "ObjectMapper.readTree(URL source)"
  summary: "Same as <xref uid=\"com.fasterxml.jackson.databind.ObjectMapper.readTree(java.io.InputStream)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#readTree(InputStream)\"></xref> except content read from passed-in <xref uid=\"java.net.URL\" data-throw-if-not-resolved=\"false\" data-raw-source=\"URL\"></xref>.\n\nNOTE: handling of <xref uid=\"java.net.URL\" data-throw-if-not-resolved=\"false\" data-raw-source=\"java.net.URL\"></xref> is delegated to <xref uid=\"com.fasterxml.jackson.core.JsonFactory.createParser(java.net.URL)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"JsonFactory#createParser(java.net.URL)\"></xref> and usually simply calls <xref uid=\"java.net.URL.openStream*\" data-throw-if-not-resolved=\"false\" data-raw-source=\"java.net.URL#openStream()\"></xref>, meaning no special handling is done. If different HTTP connection options are needed you will need to create <xref uid=\"java.io.InputStream\" data-throw-if-not-resolved=\"false\" data-raw-source=\"java.io.InputStream\"></xref> separately."
  parameters:
  - name: "source"
    type: "<xref href=\"java.net.URL?alt=java.net.URL&text=URL\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public JsonNode readTree(URL source)"
  exceptions:
  - type: "<xref href=\"java.io.IOException?alt=java.io.IOException&text=IOException\" data-throw-if-not-resolved=\"False\" />"
  returns:
    type: "<xref href=\"com.fasterxml.jackson.databind.JsonNode?alt=com.fasterxml.jackson.databind.JsonNode&text=JsonNode\" data-throw-if-not-resolved=\"False\" />"
type: "method"
metadata: {}
package: "com.fasterxml.jackson.databind"
artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
