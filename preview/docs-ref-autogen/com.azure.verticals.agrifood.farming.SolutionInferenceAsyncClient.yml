### YamlMime:JavaType
uid: "com.azure.verticals.agrifood.farming.SolutionInferenceAsyncClient"
fullName: "com.azure.verticals.agrifood.farming.SolutionInferenceAsyncClient"
name: "SolutionInferenceAsyncClient"
nameWithType: "SolutionInferenceAsyncClient"
summary: "Initializes a new instance of the asynchronous Farm<wbr>Beats<wbr>Client type."
inheritances:
- "<xref href=\"java.lang.Object?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
inheritedClassMethods:
- classRef: "java.lang.<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html\">Object</a>"
  methodsRef:
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#clone--\">clone</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#equals-java.lang.Object-\">equals</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#finalize--\">finalize</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#getClass--\">getClass</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#hashCode--\">hashCode</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#notify--\">notify</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#notifyAll--\">notifyAll</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#toString--\">toString</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#wait--\">wait</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#wait-long-\">wait</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#wait-long-int-\">wait</a>"
syntax: "public final class **SolutionInferenceAsyncClient**"
methods:
- uid: "com.azure.verticals.agrifood.farming.SolutionInferenceAsyncClient.beginCreateOrUpdate(java.lang.String,com.azure.core.util.BinaryData,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.verticals.agrifood.farming.SolutionInferenceAsyncClient.beginCreateOrUpdate(String solutionId, BinaryData solutionInferenceRequest, RequestOptions requestOptions)"
  name: "beginCreateOrUpdate(String solutionId, BinaryData solutionInferenceRequest, RequestOptions requestOptions)"
  nameWithType: "SolutionInferenceAsyncClient.beginCreateOrUpdate(String solutionId, BinaryData solutionInferenceRequest, RequestOptions requestOptions)"
  summary: "Creates a job trigger for a solution."
  parameters:
  - description: "Id of the solution resource."
    name: "solutionId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "solutionInferenceRequest containing input needed for job request processing."
    name: "solutionInferenceRequest"
    type: "<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PollerFlux<BinaryData,BinaryData> beginCreateOrUpdate(String solutionId, BinaryData solutionInferenceRequest, RequestOptions requestOptions)"
  desc: "Creates a job trigger for a solution.\n\n**Request Body Schema**\n\n```java\n{\n     requestPath: String (Required)\n     partnerRequestBody (Optional): {\n         String: Object (Optional)\n     }\n }\n```\n\n**Response Body Schema**\n\n```java\n{\n     String: Object (Required)\n }\n```"
  returns:
    description: "the <xref uid=\"com.azure.core.util.polling.PollerFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PollerFlux\"></xref> for polling of dictionary of &lt;any&gt;."
    type: "<xref href=\"com.azure.core.util.polling.PollerFlux?alt=com.azure.core.util.polling.PollerFlux&text=PollerFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />,<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.verticals.agrifood.farming.SolutionInferenceAsyncClient.cancelWithResponse(java.lang.String,com.azure.core.util.BinaryData,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.verticals.agrifood.farming.SolutionInferenceAsyncClient.cancelWithResponse(String solutionId, BinaryData solutionInferenceRequest, RequestOptions requestOptions)"
  name: "cancelWithResponse(String solutionId, BinaryData solutionInferenceRequest, RequestOptions requestOptions)"
  nameWithType: "SolutionInferenceAsyncClient.cancelWithResponse(String solutionId, BinaryData solutionInferenceRequest, RequestOptions requestOptions)"
  summary: "Cancels a job for given solution id."
  parameters:
  - description: "Id of solution for which job is to be cancelled."
    name: "solutionId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "solutionInferenceRequest containing input needed for job request processing."
    name: "solutionInferenceRequest"
    type: "<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<BinaryData>> cancelWithResponse(String solutionId, BinaryData solutionInferenceRequest, RequestOptions requestOptions)"
  desc: "Cancels a job for given solution id.\n\n**Request Body Schema**\n\n```java\n{\n     requestPath: String (Required)\n     partnerRequestBody (Optional): {\n         String: Object (Optional)\n     }\n }\n```\n\n**Response Body Schema**\n\n```java\n{\n     String: Object (Required)\n }\n```"
  returns:
    description: "dictionary of &lt;any&gt; along with <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> on successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.verticals.agrifood.farming.SolutionInferenceAsyncClient.fetchWithResponse(java.lang.String,com.azure.core.util.BinaryData,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.verticals.agrifood.farming.SolutionInferenceAsyncClient.fetchWithResponse(String solutionId, BinaryData solutionInferenceRequest, RequestOptions requestOptions)"
  name: "fetchWithResponse(String solutionId, BinaryData solutionInferenceRequest, RequestOptions requestOptions)"
  nameWithType: "SolutionInferenceAsyncClient.fetchWithResponse(String solutionId, BinaryData solutionInferenceRequest, RequestOptions requestOptions)"
  summary: "Fetches details of triggered job for a solution."
  parameters:
  - description: "Id of the solution."
    name: "solutionId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "solutionInferenceRequest containing input needed for job request processing."
    name: "solutionInferenceRequest"
    type: "<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<BinaryData>> fetchWithResponse(String solutionId, BinaryData solutionInferenceRequest, RequestOptions requestOptions)"
  desc: "Fetches details of triggered job for a solution.\n\n**Request Body Schema**\n\n```java\n{\n     requestPath: String (Required)\n     partnerRequestBody (Optional): {\n         String: Object (Optional)\n     }\n }\n```\n\n**Response Body Schema**\n\n```java\n{\n     String: Object (Required)\n }\n```"
  returns:
    description: "dictionary of &lt;any&gt; along with <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> on successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
type: "class"
desc: "Initializes a new instance of the asynchronous FarmBeatsClient type."
metadata: {}
package: "com.azure.verticals.agrifood.farming"
artifact: com.azure:azure-verticals-agrifood-farming:1.0.0-beta.3
