### YamlMime:JavaMember
uid: "com.azure.security.keyvault.certificates.CertificateAsyncClient.getCertificateOperation*"
fullName: "com.azure.security.keyvault.certificates.CertificateAsyncClient.getCertificateOperation"
name: "getCertificateOperation"
nameWithType: "CertificateAsyncClient.getCertificateOperation"
members:
- uid: "com.azure.security.keyvault.certificates.CertificateAsyncClient.getCertificateOperation(java.lang.String)"
  fullName: "com.azure.security.keyvault.certificates.CertificateAsyncClient.getCertificateOperation(String certificateName)"
  name: "getCertificateOperation(String certificateName)"
  nameWithType: "CertificateAsyncClient.getCertificateOperation(String certificateName)"
  summary: "Gets a pending <xref uid=\"com.azure.security.keyvault.certificates.models.CertificateOperation\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CertificateOperation\"></xref> from the key vault. This operation requires the certificates/get permission.\n\n**Code Samples**\n\nGet a pending certificate operation. The <xref uid=\"com.azure.core.util.polling.PollerFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"poller\"></xref> allows users to automatically poll on the certificate operation status. It is possible to monitor each intermediate poll response during the poll operation.\n\n```java\ncertificateAsyncClient.getCertificateOperation(\"certificateName\")\n     .subscribe(pollResponse -> {\n         System.out.println(\"---------------------------------------------------------------------------------\");\n         System.out.println(pollResponse.getStatus());\n         System.out.println(pollResponse.getValue().getStatus());\n         System.out.println(pollResponse.getValue().getStatusDetails());\n     });\n```"
  parameters:
  - description: "The name of the certificate."
    name: "certificateName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PollerFlux<CertificateOperation,KeyVaultCertificateWithPolicy> getCertificateOperation(String certificateName)"
  returns:
    description: "A <xref uid=\"com.azure.core.util.polling.PollerFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PollerFlux\"></xref> polling on the certificate operation status."
    type: "<xref href=\"com.azure.core.util.polling.PollerFlux?alt=com.azure.core.util.polling.PollerFlux&text=PollerFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.security.keyvault.certificates.models.CertificateOperation?alt=com.azure.security.keyvault.certificates.models.CertificateOperation&text=CertificateOperation\" data-throw-if-not-resolved=\"False\" />,<xref href=\"com.azure.security.keyvault.certificates.models.KeyVaultCertificateWithPolicy?alt=com.azure.security.keyvault.certificates.models.KeyVaultCertificateWithPolicy&text=KeyVaultCertificateWithPolicy\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.security.keyvault.certificates.CertificateAsyncClient.getCertificateOperation(java.lang.String,java.time.Duration)"
  fullName: "com.azure.security.keyvault.certificates.CertificateAsyncClient.getCertificateOperation(String certificateName, Duration pollingInterval)"
  name: "getCertificateOperation(String certificateName, Duration pollingInterval)"
  nameWithType: "CertificateAsyncClient.getCertificateOperation(String certificateName, Duration pollingInterval)"
  summary: "Gets a pending <xref uid=\"com.azure.security.keyvault.certificates.models.CertificateOperation\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CertificateOperation\"></xref> from the key vault. This operation requires the certificates/get permission.\n\n**Code Samples**\n\nGet a pending certificate operation. The <xref uid=\"com.azure.core.util.polling.PollerFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"poller\"></xref> allows users to automatically poll on the certificate operation status. It is possible to monitor each intermediate poll response during the poll operation.\n\n```java\ncertificateAsyncClient.getCertificateOperation(\"certificateName\", Duration.ofSeconds(1))\n     .subscribe(pollResponse -> {\n         System.out.println(\"---------------------------------------------------------------------------------\");\n         System.out.println(pollResponse.getStatus());\n         System.out.println(pollResponse.getValue().getStatus());\n         System.out.println(pollResponse.getValue().getStatusDetails());\n     });\n```"
  parameters:
  - description: "The name of the certificate."
    name: "certificateName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The interval at which the operation status will be polled for."
    name: "pollingInterval"
    type: "<xref href=\"java.time.Duration?alt=java.time.Duration&text=Duration\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PollerFlux<CertificateOperation,KeyVaultCertificateWithPolicy> getCertificateOperation(String certificateName, Duration pollingInterval)"
  returns:
    description: "A <xref uid=\"com.azure.core.util.polling.PollerFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PollerFlux\"></xref> polling on the certificate operation status."
    type: "<xref href=\"com.azure.core.util.polling.PollerFlux?alt=com.azure.core.util.polling.PollerFlux&text=PollerFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.security.keyvault.certificates.models.CertificateOperation?alt=com.azure.security.keyvault.certificates.models.CertificateOperation&text=CertificateOperation\" data-throw-if-not-resolved=\"False\" />,<xref href=\"com.azure.security.keyvault.certificates.models.KeyVaultCertificateWithPolicy?alt=com.azure.security.keyvault.certificates.models.KeyVaultCertificateWithPolicy&text=KeyVaultCertificateWithPolicy\" data-throw-if-not-resolved=\"False\" />&gt;"
type: "method"
metadata: {}
package: "com.azure.security.keyvault.certificates"
artifact: com.azure:azure-security-keyvault-certificates:4.2.0-beta.2
