### YamlMime:ManagedReference
items:
- uid: org.slf4j.IMarkerFactory
  id: IMarkerFactory
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.slf4j
  children:
  - org.slf4j.IMarkerFactory.detachMarker(java.lang.String)
  - org.slf4j.IMarkerFactory.exists(java.lang.String)
  - org.slf4j.IMarkerFactory.getDetachedMarker(java.lang.String)
  - org.slf4j.IMarkerFactory.getMarker(java.lang.String)
  langs:
  - java
  name: IMarkerFactory
  nameWithType: IMarkerFactory
  fullName: org.slf4j.IMarkerFactory
  type: Interface
  package: org.slf4j
  summary: >-
    Implementations of this interface are used to manufacture <xref uid="org.slf4j.Marker" data-throw-if-not-resolved="false">Marker</xref> instances.


    See the section [Implementing the SLF4J API][] in the FAQ for details on how to make your logging system conform to SLF4J.



    [Implementing the SLF4J API]: http://slf4j.org/faq.html#3
  syntax:
    content: public interface IMarkerFactory
- uid: org.slf4j.IMarkerFactory.detachMarker(java.lang.String)
  id: detachMarker(java.lang.String)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.slf4j.IMarkerFactory
  langs:
  - java
  name: detachMarker(String name)
  nameWithType: IMarkerFactory.detachMarker(String name)
  fullName: org.slf4j.IMarkerFactory.detachMarker(String name)
  overload: org.slf4j.IMarkerFactory.detachMarker*
  type: Method
  package: org.slf4j
  summary: >-
    Detach an existing marker.


    Note that after a marker is detached, there might still be "dangling" references to the detached marker.
  syntax:
    content: public abstract boolean detachMarker(String name)
    parameters:
    - id: name
      type: java.lang.String
      description: The name of the marker to detach
    return:
      type: boolean
      description: whether the marker  could be detached or not
- uid: org.slf4j.IMarkerFactory.exists(java.lang.String)
  id: exists(java.lang.String)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.slf4j.IMarkerFactory
  langs:
  - java
  name: exists(String name)
  nameWithType: IMarkerFactory.exists(String name)
  fullName: org.slf4j.IMarkerFactory.exists(String name)
  overload: org.slf4j.IMarkerFactory.exists*
  type: Method
  package: org.slf4j
  summary: Checks if the marker with the name already exists. If name is null, then false is returned.
  syntax:
    content: public abstract boolean exists(String name)
    parameters:
    - id: name
      type: java.lang.String
      description: logger name to check for
    return:
      type: boolean
      description: true id the marker exists, false otherwise.
- uid: org.slf4j.IMarkerFactory.getDetachedMarker(java.lang.String)
  id: getDetachedMarker(java.lang.String)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.slf4j.IMarkerFactory
  langs:
  - java
  name: getDetachedMarker(String name)
  nameWithType: IMarkerFactory.getDetachedMarker(String name)
  fullName: org.slf4j.IMarkerFactory.getDetachedMarker(String name)
  overload: org.slf4j.IMarkerFactory.getDetachedMarker*
  type: Method
  package: org.slf4j
  summary: Create a marker which is detached (even at birth) from this IMarkerFactory.
  syntax:
    content: public abstract Marker getDetachedMarker(String name)
    parameters:
    - id: name
      type: java.lang.String
      description: marker name
    return:
      type: org.slf4j.Marker
      description: a dangling marker
- uid: org.slf4j.IMarkerFactory.getMarker(java.lang.String)
  id: getMarker(java.lang.String)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.slf4j.IMarkerFactory
  langs:
  - java
  name: getMarker(String name)
  nameWithType: IMarkerFactory.getMarker(String name)
  fullName: org.slf4j.IMarkerFactory.getMarker(String name)
  overload: org.slf4j.IMarkerFactory.getMarker*
  type: Method
  package: org.slf4j
  summary: >-
    Manufacture a <xref uid="org.slf4j.Marker" data-throw-if-not-resolved="false">Marker</xref> instance by name. If the instance has been created earlier, return the previously created instance.


    Null name values are not allowed.
  syntax:
    content: public abstract Marker getMarker(String name)
    parameters:
    - id: name
      type: java.lang.String
      description: >-
        the name of the marker to be created, null value is
         not allowed.
    return:
      type: org.slf4j.Marker
      description: a Marker instance
references:
- uid: java.lang.String
  spec.java:
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
- uid: org.slf4j.Marker
  name: Marker
  nameWithType: Marker
  fullName: org.slf4j.Marker
- uid: org.slf4j.IMarkerFactory.getMarker*
  name: getMarker
  nameWithType: IMarkerFactory.getMarker
  fullName: org.slf4j.IMarkerFactory.getMarker
  package: org.slf4j
- uid: boolean
  spec.java:
  - uid: boolean
    name: boolean
    fullName: boolean
- uid: org.slf4j.IMarkerFactory.exists*
  name: exists
  nameWithType: IMarkerFactory.exists
  fullName: org.slf4j.IMarkerFactory.exists
  package: org.slf4j
- uid: org.slf4j.IMarkerFactory.detachMarker*
  name: detachMarker
  nameWithType: IMarkerFactory.detachMarker
  fullName: org.slf4j.IMarkerFactory.detachMarker
  package: org.slf4j
- uid: org.slf4j.IMarkerFactory.getDetachedMarker*
  name: getDetachedMarker
  nameWithType: IMarkerFactory.getDetachedMarker
  fullName: org.slf4j.IMarkerFactory.getDetachedMarker
  package: org.slf4j
