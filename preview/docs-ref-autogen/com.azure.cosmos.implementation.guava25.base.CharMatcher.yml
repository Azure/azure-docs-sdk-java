### YamlMime:ManagedReference
items:
- uid: com.azure.cosmos.implementation.guava25.base.CharMatcher
  id: CharMatcher
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.base
  children:
  - com.azure.cosmos.implementation.guava25.base.CharMatcher.ANY
  - com.azure.cosmos.implementation.guava25.base.CharMatcher.ASCII
  - com.azure.cosmos.implementation.guava25.base.CharMatcher.BREAKING_WHITESPACE
  - com.azure.cosmos.implementation.guava25.base.CharMatcher.CharMatcher()
  - com.azure.cosmos.implementation.guava25.base.CharMatcher.DIGIT
  - com.azure.cosmos.implementation.guava25.base.CharMatcher.INVISIBLE
  - com.azure.cosmos.implementation.guava25.base.CharMatcher.JAVA_DIGIT
  - com.azure.cosmos.implementation.guava25.base.CharMatcher.JAVA_ISO_CONTROL
  - com.azure.cosmos.implementation.guava25.base.CharMatcher.JAVA_LETTER
  - com.azure.cosmos.implementation.guava25.base.CharMatcher.JAVA_LETTER_OR_DIGIT
  - com.azure.cosmos.implementation.guava25.base.CharMatcher.JAVA_LOWER_CASE
  - com.azure.cosmos.implementation.guava25.base.CharMatcher.JAVA_UPPER_CASE
  - com.azure.cosmos.implementation.guava25.base.CharMatcher.NONE
  - com.azure.cosmos.implementation.guava25.base.CharMatcher.SINGLE_WIDTH
  - com.azure.cosmos.implementation.guava25.base.CharMatcher.WHITESPACE
  - com.azure.cosmos.implementation.guava25.base.CharMatcher.and(com.azure.cosmos.implementation.guava25.base.CharMatcher)
  - com.azure.cosmos.implementation.guava25.base.CharMatcher.any()
  - com.azure.cosmos.implementation.guava25.base.CharMatcher.anyOf(java.lang.CharSequence)
  - com.azure.cosmos.implementation.guava25.base.CharMatcher.apply(java.lang.Character)
  - com.azure.cosmos.implementation.guava25.base.CharMatcher.ascii()
  - com.azure.cosmos.implementation.guava25.base.CharMatcher.breakingWhitespace()
  - com.azure.cosmos.implementation.guava25.base.CharMatcher.collapseFrom(java.lang.CharSequence,char)
  - com.azure.cosmos.implementation.guava25.base.CharMatcher.countIn(java.lang.CharSequence)
  - com.azure.cosmos.implementation.guava25.base.CharMatcher.digit()
  - com.azure.cosmos.implementation.guava25.base.CharMatcher.forPredicate(com.azure.cosmos.implementation.guava25.base.Predicate<? super java.lang.Character>)
  - com.azure.cosmos.implementation.guava25.base.CharMatcher.inRange(char,char)
  - com.azure.cosmos.implementation.guava25.base.CharMatcher.indexIn(java.lang.CharSequence)
  - com.azure.cosmos.implementation.guava25.base.CharMatcher.indexIn(java.lang.CharSequence,int)
  - com.azure.cosmos.implementation.guava25.base.CharMatcher.invisible()
  - com.azure.cosmos.implementation.guava25.base.CharMatcher.is(char)
  - com.azure.cosmos.implementation.guava25.base.CharMatcher.isNot(char)
  - com.azure.cosmos.implementation.guava25.base.CharMatcher.javaDigit()
  - com.azure.cosmos.implementation.guava25.base.CharMatcher.javaIsoControl()
  - com.azure.cosmos.implementation.guava25.base.CharMatcher.javaLetter()
  - com.azure.cosmos.implementation.guava25.base.CharMatcher.javaLetterOrDigit()
  - com.azure.cosmos.implementation.guava25.base.CharMatcher.javaLowerCase()
  - com.azure.cosmos.implementation.guava25.base.CharMatcher.javaUpperCase()
  - com.azure.cosmos.implementation.guava25.base.CharMatcher.lastIndexIn(java.lang.CharSequence)
  - com.azure.cosmos.implementation.guava25.base.CharMatcher.matches(char)
  - com.azure.cosmos.implementation.guava25.base.CharMatcher.matchesAllOf(java.lang.CharSequence)
  - com.azure.cosmos.implementation.guava25.base.CharMatcher.matchesAnyOf(java.lang.CharSequence)
  - com.azure.cosmos.implementation.guava25.base.CharMatcher.matchesNoneOf(java.lang.CharSequence)
  - com.azure.cosmos.implementation.guava25.base.CharMatcher.negate()
  - com.azure.cosmos.implementation.guava25.base.CharMatcher.none()
  - com.azure.cosmos.implementation.guava25.base.CharMatcher.noneOf(java.lang.CharSequence)
  - com.azure.cosmos.implementation.guava25.base.CharMatcher.or(com.azure.cosmos.implementation.guava25.base.CharMatcher)
  - com.azure.cosmos.implementation.guava25.base.CharMatcher.precomputed()
  - com.azure.cosmos.implementation.guava25.base.CharMatcher.removeFrom(java.lang.CharSequence)
  - com.azure.cosmos.implementation.guava25.base.CharMatcher.replaceFrom(java.lang.CharSequence,char)
  - com.azure.cosmos.implementation.guava25.base.CharMatcher.replaceFrom(java.lang.CharSequence,java.lang.CharSequence)
  - com.azure.cosmos.implementation.guava25.base.CharMatcher.retainFrom(java.lang.CharSequence)
  - com.azure.cosmos.implementation.guava25.base.CharMatcher.singleWidth()
  - com.azure.cosmos.implementation.guava25.base.CharMatcher.toString()
  - com.azure.cosmos.implementation.guava25.base.CharMatcher.trimAndCollapseFrom(java.lang.CharSequence,char)
  - com.azure.cosmos.implementation.guava25.base.CharMatcher.trimFrom(java.lang.CharSequence)
  - com.azure.cosmos.implementation.guava25.base.CharMatcher.trimLeadingFrom(java.lang.CharSequence)
  - com.azure.cosmos.implementation.guava25.base.CharMatcher.trimTrailingFrom(java.lang.CharSequence)
  - com.azure.cosmos.implementation.guava25.base.CharMatcher.whitespace()
  langs:
  - java
  name: CharMatcher
  nameWithType: CharMatcher
  fullName: com.azure.cosmos.implementation.guava25.base.CharMatcher
  type: Class
  package: com.azure.cosmos.implementation.guava25.base
  summary: >-
    Determines a true or false value for any Java `char` value, just as <xref uid="com.azure.cosmos.implementation.guava25.base.Predicate" data-throw-if-not-resolved="false">Predicate</xref> does for any <xref uid="java.lang.Object" data-throw-if-not-resolved="false">Object</xref>. Also offers basic text processing methods based on this function. Implementations are strongly encouraged to be side-effect-free and immutable.


    Throughout the documentation of this class, the phrase "matching character" is used to mean "any `char` value `c` for which `this.matches(c)` returns `true`".


    **Warning:** This class deals only with `char` values, that is, [BMP characters][]. It does not understand [supplementary Unicode code points][] in the range `0x10000` to `0x10FFFF` which includes the majority of assigned characters, including important CJK characters and emoji.


    Supplementary characters are [encoded into a `String` using surrogate pairs][encoded into a _String_ using surrogate pairs], and a `CharMatcher` treats these just as two separate characters. <xref uid="com.azure.cosmos.implementation.guava25.base.CharMatcher.countIn*" data-throw-if-not-resolved="false">#countIn</xref> counts each supplementary character as 2 `char`s.


    For up-to-date Unicode character properties (digit, letter, etc.) and support for supplementary code points, use ICU4J UCharacter and UnicodeSet (freeze() after building). For basic text processing based on UnicodeSet use the ICU4J UnicodeSetSpanner.


    Example usages:


    ```java

    String trimmed = whitespace().trimFrom(userInput);
       if (ascii().matchesAllOf(s)) { ... }
    ```


    See the Guava User Guide article on [`CharMatcher` ][CharMatcher_].



    [BMP characters]: http://www.unicode.org/glossary/#BMP_character

    [supplementary Unicode code points]: http://www.unicode.org/glossary/#supplementary_code_point

    [encoded into a _String_ using surrogate pairs]: https://docs.oracle.com/javase/8/docs/api/java/lang/Character.html#supplementary

    [CharMatcher_]: https://github.com/google/guava/wiki/StringsExplained#charmatcher
  syntax:
    content: public abstract class CharMatcher implements Predicate<Character>
  inheritance:
  - java.lang.Object
  implements:
  - com.azure.cosmos.implementation.guava25.base.Predicate<java.lang.Character>
  inheritedMembers:
  - java.lang.Object.clone()
  - java.lang.Object.equals(java.lang.Object)
  - java.lang.Object.finalize()
  - java.lang.Object.getClass()
  - java.lang.Object.hashCode()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.toString()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
- uid: com.azure.cosmos.implementation.guava25.base.CharMatcher.ANY
  id: ANY
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.base.CharMatcher
  langs:
  - java
  name: ANY
  nameWithType: CharMatcher.ANY
  fullName: com.azure.cosmos.implementation.guava25.base.CharMatcher.ANY
  type: Field
  package: com.azure.cosmos.implementation.guava25.base
  summary: Matches any character.
  syntax:
    content: public static final CharMatcher ANY
    return:
      type: com.azure.cosmos.implementation.guava25.base.CharMatcher
- uid: com.azure.cosmos.implementation.guava25.base.CharMatcher.ASCII
  id: ASCII
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.base.CharMatcher
  langs:
  - java
  name: ASCII
  nameWithType: CharMatcher.ASCII
  fullName: com.azure.cosmos.implementation.guava25.base.CharMatcher.ASCII
  type: Field
  package: com.azure.cosmos.implementation.guava25.base
  summary: Determines whether a character is ASCII, meaning that its code point is less than 128.
  syntax:
    content: public static final CharMatcher ASCII
    return:
      type: com.azure.cosmos.implementation.guava25.base.CharMatcher
- uid: com.azure.cosmos.implementation.guava25.base.CharMatcher.BREAKING_WHITESPACE
  id: BREAKING_WHITESPACE
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.base.CharMatcher
  langs:
  - java
  name: BREAKING_WHITESPACE
  nameWithType: CharMatcher.BREAKING_WHITESPACE
  fullName: com.azure.cosmos.implementation.guava25.base.CharMatcher.BREAKING_WHITESPACE
  type: Field
  package: com.azure.cosmos.implementation.guava25.base
  summary: Determines whether a character is a breaking whitespace (that is, a whitespace which can be interpreted as a break between words for formatting purposes). See <xref uid="com.azure.cosmos.implementation.guava25.base.CharMatcher.whitespace*" data-throw-if-not-resolved="false">#whitespace</xref> for a discussion of that term.
  syntax:
    content: public static final CharMatcher BREAKING_WHITESPACE
    return:
      type: com.azure.cosmos.implementation.guava25.base.CharMatcher
- uid: com.azure.cosmos.implementation.guava25.base.CharMatcher.CharMatcher()
  id: CharMatcher()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.base.CharMatcher
  langs:
  - java
  name: CharMatcher()
  nameWithType: CharMatcher.CharMatcher()
  fullName: com.azure.cosmos.implementation.guava25.base.CharMatcher.CharMatcher()
  overload: com.azure.cosmos.implementation.guava25.base.CharMatcher.CharMatcher*
  type: Constructor
  package: com.azure.cosmos.implementation.guava25.base
  summary: Constructor for use by subclasses. When subclassing, you may want to override `toString()` to provide a useful description.
  syntax:
    content: protected CharMatcher()
- uid: com.azure.cosmos.implementation.guava25.base.CharMatcher.DIGIT
  id: DIGIT
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.base.CharMatcher
  langs:
  - java
  name: DIGIT
  nameWithType: CharMatcher.DIGIT
  fullName: com.azure.cosmos.implementation.guava25.base.CharMatcher.DIGIT
  type: Field
  package: com.azure.cosmos.implementation.guava25.base
  summary: >-
    Determines whether a character is a digit according to [ Unicode][Unicode]. If you only care to match ASCII digits, you can use `inRange('0', '9')`.



    [Unicode]: http://unicode.org/cldr/utility/list-unicodeset.jsp?a=%5Cp%7Bdigit%7D
  syntax:
    content: public static final CharMatcher DIGIT
    return:
      type: com.azure.cosmos.implementation.guava25.base.CharMatcher
- uid: com.azure.cosmos.implementation.guava25.base.CharMatcher.INVISIBLE
  id: INVISIBLE
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.base.CharMatcher
  langs:
  - java
  name: INVISIBLE
  nameWithType: CharMatcher.INVISIBLE
  fullName: com.azure.cosmos.implementation.guava25.base.CharMatcher.INVISIBLE
  type: Field
  package: com.azure.cosmos.implementation.guava25.base
  summary: Determines whether a character is invisible; that is, if its Unicode category is any of SPACE\_SEPARATOR, LINE\_SEPARATOR, PARAGRAPH\_SEPARATOR, CONTROL, FORMAT, SURROGATE, and PRIVATE\_USE according to ICU4J.
  syntax:
    content: public static final CharMatcher INVISIBLE
    return:
      type: com.azure.cosmos.implementation.guava25.base.CharMatcher
- uid: com.azure.cosmos.implementation.guava25.base.CharMatcher.JAVA_DIGIT
  id: JAVA_DIGIT
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.base.CharMatcher
  langs:
  - java
  name: JAVA_DIGIT
  nameWithType: CharMatcher.JAVA_DIGIT
  fullName: com.azure.cosmos.implementation.guava25.base.CharMatcher.JAVA_DIGIT
  type: Field
  package: com.azure.cosmos.implementation.guava25.base
  summary: Determines whether a character is a digit according to <xref uid="java.lang.Character.isDigit*" data-throw-if-not-resolved="false">Java's definition</xref>. If you only care to match ASCII digits, you can use `inRange('0', '9')`.
  syntax:
    content: public static final CharMatcher JAVA_DIGIT
    return:
      type: com.azure.cosmos.implementation.guava25.base.CharMatcher
- uid: com.azure.cosmos.implementation.guava25.base.CharMatcher.JAVA_ISO_CONTROL
  id: JAVA_ISO_CONTROL
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.base.CharMatcher
  langs:
  - java
  name: JAVA_ISO_CONTROL
  nameWithType: CharMatcher.JAVA_ISO_CONTROL
  fullName: com.azure.cosmos.implementation.guava25.base.CharMatcher.JAVA_ISO_CONTROL
  type: Field
  package: com.azure.cosmos.implementation.guava25.base
  summary: Determines whether a character is an ISO control character as specified by <xref uid="java.lang.Character.isISOControl*" data-throw-if-not-resolved="false">Character#isISOControl(char)</xref>.
  syntax:
    content: public static final CharMatcher JAVA_ISO_CONTROL
    return:
      type: com.azure.cosmos.implementation.guava25.base.CharMatcher
- uid: com.azure.cosmos.implementation.guava25.base.CharMatcher.JAVA_LETTER
  id: JAVA_LETTER
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.base.CharMatcher
  langs:
  - java
  name: JAVA_LETTER
  nameWithType: CharMatcher.JAVA_LETTER
  fullName: com.azure.cosmos.implementation.guava25.base.CharMatcher.JAVA_LETTER
  type: Field
  package: com.azure.cosmos.implementation.guava25.base
  summary: Determines whether a character is a letter according to <xref uid="java.lang.Character.isLetter*" data-throw-if-not-resolved="false">Java's definition</xref>. If you only care to match letters of the Latin alphabet, you can use `inRange('a', 'z').or(inRange('A', 'Z'))`.
  syntax:
    content: public static final CharMatcher JAVA_LETTER
    return:
      type: com.azure.cosmos.implementation.guava25.base.CharMatcher
- uid: com.azure.cosmos.implementation.guava25.base.CharMatcher.JAVA_LETTER_OR_DIGIT
  id: JAVA_LETTER_OR_DIGIT
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.base.CharMatcher
  langs:
  - java
  name: JAVA_LETTER_OR_DIGIT
  nameWithType: CharMatcher.JAVA_LETTER_OR_DIGIT
  fullName: com.azure.cosmos.implementation.guava25.base.CharMatcher.JAVA_LETTER_OR_DIGIT
  type: Field
  package: com.azure.cosmos.implementation.guava25.base
  summary: Determines whether a character is a letter or digit according to <xref uid="java.lang.Character.isLetterOrDigit*" data-throw-if-not-resolved="false">Java's definition</xref>.
  syntax:
    content: public static final CharMatcher JAVA_LETTER_OR_DIGIT
    return:
      type: com.azure.cosmos.implementation.guava25.base.CharMatcher
- uid: com.azure.cosmos.implementation.guava25.base.CharMatcher.JAVA_LOWER_CASE
  id: JAVA_LOWER_CASE
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.base.CharMatcher
  langs:
  - java
  name: JAVA_LOWER_CASE
  nameWithType: CharMatcher.JAVA_LOWER_CASE
  fullName: com.azure.cosmos.implementation.guava25.base.CharMatcher.JAVA_LOWER_CASE
  type: Field
  package: com.azure.cosmos.implementation.guava25.base
  summary: Determines whether a character is lower case according to <xref uid="java.lang.Character.isLowerCase*" data-throw-if-not-resolved="false">Java's definition</xref>.
  syntax:
    content: public static final CharMatcher JAVA_LOWER_CASE
    return:
      type: com.azure.cosmos.implementation.guava25.base.CharMatcher
- uid: com.azure.cosmos.implementation.guava25.base.CharMatcher.JAVA_UPPER_CASE
  id: JAVA_UPPER_CASE
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.base.CharMatcher
  langs:
  - java
  name: JAVA_UPPER_CASE
  nameWithType: CharMatcher.JAVA_UPPER_CASE
  fullName: com.azure.cosmos.implementation.guava25.base.CharMatcher.JAVA_UPPER_CASE
  type: Field
  package: com.azure.cosmos.implementation.guava25.base
  summary: Determines whether a character is upper case according to <xref uid="java.lang.Character.isUpperCase*" data-throw-if-not-resolved="false">Java's definition</xref>.
  syntax:
    content: public static final CharMatcher JAVA_UPPER_CASE
    return:
      type: com.azure.cosmos.implementation.guava25.base.CharMatcher
- uid: com.azure.cosmos.implementation.guava25.base.CharMatcher.NONE
  id: NONE
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.base.CharMatcher
  langs:
  - java
  name: NONE
  nameWithType: CharMatcher.NONE
  fullName: com.azure.cosmos.implementation.guava25.base.CharMatcher.NONE
  type: Field
  package: com.azure.cosmos.implementation.guava25.base
  summary: Matches no characters.
  syntax:
    content: public static final CharMatcher NONE
    return:
      type: com.azure.cosmos.implementation.guava25.base.CharMatcher
- uid: com.azure.cosmos.implementation.guava25.base.CharMatcher.SINGLE_WIDTH
  id: SINGLE_WIDTH
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.base.CharMatcher
  langs:
  - java
  name: SINGLE_WIDTH
  nameWithType: CharMatcher.SINGLE_WIDTH
  fullName: com.azure.cosmos.implementation.guava25.base.CharMatcher.SINGLE_WIDTH
  type: Field
  package: com.azure.cosmos.implementation.guava25.base
  summary: >-
    Determines whether a character is single-width (not double-width). When in doubt, this matcher errs on the side of returning `false` (that is, it tends to assume a character is double-width).


    **Note:** as the reference file evolves, we will modify this constant to keep it up to date.
  syntax:
    content: public static final CharMatcher SINGLE_WIDTH
    return:
      type: com.azure.cosmos.implementation.guava25.base.CharMatcher
- uid: com.azure.cosmos.implementation.guava25.base.CharMatcher.WHITESPACE
  id: WHITESPACE
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.base.CharMatcher
  langs:
  - java
  name: WHITESPACE
  nameWithType: CharMatcher.WHITESPACE
  fullName: com.azure.cosmos.implementation.guava25.base.CharMatcher.WHITESPACE
  type: Field
  package: com.azure.cosmos.implementation.guava25.base
  summary: >-
    Determines whether a character is whitespace according to the latest Unicode standard, as illustrated [here][]. This is not the same definition used by other Java APIs. (See a [comparison of several definitions of "whitespace"][comparison of several definitions of _whitespace].)


    **Note:** as the Unicode definition evolves, we will modify this constant to keep it up to date.



    [here]: http://unicode.org/cldr/utility/list-unicodeset.jsp?a=%5Cp%7Bwhitespace%7D

    [comparison of several definitions of _whitespace]: https://goo.gl/Y6SLWx
  syntax:
    content: public static final CharMatcher WHITESPACE
    return:
      type: com.azure.cosmos.implementation.guava25.base.CharMatcher
- uid: com.azure.cosmos.implementation.guava25.base.CharMatcher.and(com.azure.cosmos.implementation.guava25.base.CharMatcher)
  id: and(com.azure.cosmos.implementation.guava25.base.CharMatcher)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.base.CharMatcher
  langs:
  - java
  name: and(CharMatcher other)
  nameWithType: CharMatcher.and(CharMatcher other)
  fullName: com.azure.cosmos.implementation.guava25.base.CharMatcher.and(CharMatcher other)
  overload: com.azure.cosmos.implementation.guava25.base.CharMatcher.and*
  type: Method
  package: com.azure.cosmos.implementation.guava25.base
  summary: Returns a matcher that matches any character matched by both this matcher and `other`.
  syntax:
    content: public CharMatcher and(CharMatcher other)
    parameters:
    - id: other
      type: com.azure.cosmos.implementation.guava25.base.CharMatcher
    return:
      type: com.azure.cosmos.implementation.guava25.base.CharMatcher
- uid: com.azure.cosmos.implementation.guava25.base.CharMatcher.any()
  id: any()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.base.CharMatcher
  langs:
  - java
  name: any()
  nameWithType: CharMatcher.any()
  fullName: com.azure.cosmos.implementation.guava25.base.CharMatcher.any()
  overload: com.azure.cosmos.implementation.guava25.base.CharMatcher.any*
  type: Method
  package: com.azure.cosmos.implementation.guava25.base
  summary: Matches any character.
  syntax:
    content: public static CharMatcher any()
    return:
      type: com.azure.cosmos.implementation.guava25.base.CharMatcher
- uid: com.azure.cosmos.implementation.guava25.base.CharMatcher.anyOf(java.lang.CharSequence)
  id: anyOf(java.lang.CharSequence)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.base.CharMatcher
  langs:
  - java
  name: anyOf(CharSequence sequence)
  nameWithType: CharMatcher.anyOf(CharSequence sequence)
  fullName: com.azure.cosmos.implementation.guava25.base.CharMatcher.anyOf(CharSequence sequence)
  overload: com.azure.cosmos.implementation.guava25.base.CharMatcher.anyOf*
  type: Method
  package: com.azure.cosmos.implementation.guava25.base
  summary: Returns a `char` matcher that matches any BMP character present in the given character sequence. Returns a bogus matcher if the sequence contains supplementary characters.
  syntax:
    content: public static CharMatcher anyOf(CharSequence sequence)
    parameters:
    - id: sequence
      type: java.lang.CharSequence
    return:
      type: com.azure.cosmos.implementation.guava25.base.CharMatcher
- uid: com.azure.cosmos.implementation.guava25.base.CharMatcher.apply(java.lang.Character)
  id: apply(java.lang.Character)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.base.CharMatcher
  langs:
  - java
  name: apply(Character character)
  nameWithType: CharMatcher.apply(Character character)
  fullName: com.azure.cosmos.implementation.guava25.base.CharMatcher.apply(Character character)
  overload: com.azure.cosmos.implementation.guava25.base.CharMatcher.apply*
  type: Method
  package: com.azure.cosmos.implementation.guava25.base
  syntax:
    content: public boolean apply(Character character)
    parameters:
    - id: character
      type: java.lang.Character
    return:
      type: boolean
- uid: com.azure.cosmos.implementation.guava25.base.CharMatcher.ascii()
  id: ascii()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.base.CharMatcher
  langs:
  - java
  name: ascii()
  nameWithType: CharMatcher.ascii()
  fullName: com.azure.cosmos.implementation.guava25.base.CharMatcher.ascii()
  overload: com.azure.cosmos.implementation.guava25.base.CharMatcher.ascii*
  type: Method
  package: com.azure.cosmos.implementation.guava25.base
  summary: Determines whether a character is ASCII, meaning that its code point is less than 128.
  syntax:
    content: public static CharMatcher ascii()
    return:
      type: com.azure.cosmos.implementation.guava25.base.CharMatcher
- uid: com.azure.cosmos.implementation.guava25.base.CharMatcher.breakingWhitespace()
  id: breakingWhitespace()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.base.CharMatcher
  langs:
  - java
  name: breakingWhitespace()
  nameWithType: CharMatcher.breakingWhitespace()
  fullName: com.azure.cosmos.implementation.guava25.base.CharMatcher.breakingWhitespace()
  overload: com.azure.cosmos.implementation.guava25.base.CharMatcher.breakingWhitespace*
  type: Method
  package: com.azure.cosmos.implementation.guava25.base
  summary: Determines whether a character is a breaking whitespace (that is, a whitespace which can be interpreted as a break between words for formatting purposes). See <xref uid="com.azure.cosmos.implementation.guava25.base.CharMatcher.whitespace()" data-throw-if-not-resolved="false">#whitespace()</xref> for a discussion of that term.
  syntax:
    content: public static CharMatcher breakingWhitespace()
    return:
      type: com.azure.cosmos.implementation.guava25.base.CharMatcher
- uid: com.azure.cosmos.implementation.guava25.base.CharMatcher.collapseFrom(java.lang.CharSequence,char)
  id: collapseFrom(java.lang.CharSequence,char)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.base.CharMatcher
  langs:
  - java
  name: collapseFrom(CharSequence sequence, char replacement)
  nameWithType: CharMatcher.collapseFrom(CharSequence sequence, char replacement)
  fullName: com.azure.cosmos.implementation.guava25.base.CharMatcher.collapseFrom(CharSequence sequence, char replacement)
  overload: com.azure.cosmos.implementation.guava25.base.CharMatcher.collapseFrom*
  type: Method
  package: com.azure.cosmos.implementation.guava25.base
  summary: >-
    Returns a string copy of the input character sequence, with each group of consecutive matching BMP characters replaced by a single replacement character. For example:


    ```java

    CharMatcher.anyOf("eko").collapseFrom("bookkeeper", '-')

    ```


    ... returns `"b-p-r"`.


    The default implementation uses <xref uid="com.azure.cosmos.implementation.guava25.base.CharMatcher.indexIn(java.lang.CharSequence)" data-throw-if-not-resolved="false">#indexIn(CharSequence)</xref> to find the first matching character, then iterates the remainder of the sequence calling <xref uid="com.azure.cosmos.implementation.guava25.base.CharMatcher.matches(char)" data-throw-if-not-resolved="false">#matches(char)</xref> for each character.
  syntax:
    content: public String collapseFrom(CharSequence sequence, char replacement)
    parameters:
    - id: sequence
      type: java.lang.CharSequence
      description: the character sequence to replace matching groups of characters in
    - id: replacement
      type: char
      description: >-
        the character to append to the result string in place of each group of
             matching characters in <code>sequence</code>
    return:
      type: java.lang.String
      description: the new string
- uid: com.azure.cosmos.implementation.guava25.base.CharMatcher.countIn(java.lang.CharSequence)
  id: countIn(java.lang.CharSequence)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.base.CharMatcher
  langs:
  - java
  name: countIn(CharSequence sequence)
  nameWithType: CharMatcher.countIn(CharSequence sequence)
  fullName: com.azure.cosmos.implementation.guava25.base.CharMatcher.countIn(CharSequence sequence)
  overload: com.azure.cosmos.implementation.guava25.base.CharMatcher.countIn*
  type: Method
  package: com.azure.cosmos.implementation.guava25.base
  summary: >-
    Returns the number of matching `char`s found in a character sequence.


    Counts 2 per supplementary character, such as for <xref uid="com.azure.cosmos.implementation.guava25.base.CharMatcher.whitespace*" data-throw-if-not-resolved="false">#whitespace</xref>().<xref uid="com.azure.cosmos.implementation.guava25.base.CharMatcher.negate*" data-throw-if-not-resolved="false">#negate</xref>().
  syntax:
    content: public int countIn(CharSequence sequence)
    parameters:
    - id: sequence
      type: java.lang.CharSequence
    return:
      type: int
- uid: com.azure.cosmos.implementation.guava25.base.CharMatcher.digit()
  id: digit()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.base.CharMatcher
  langs:
  - java
  name: digit()
  nameWithType: CharMatcher.digit()
  fullName: com.azure.cosmos.implementation.guava25.base.CharMatcher.digit()
  overload: com.azure.cosmos.implementation.guava25.base.CharMatcher.digit*
  type: Method
  package: com.azure.cosmos.implementation.guava25.base
  summary: >-
    Determines whether a character is a BMP digit according to [Unicode][]. If you only care to match ASCII digits, you can use `inRange('0', '9')`.



    [Unicode]: http://unicode.org/cldr/utility/list-unicodeset.jsp?a=%5Cp%7Bdigit%7D
  syntax:
    content: public static CharMatcher digit()
    return:
      type: com.azure.cosmos.implementation.guava25.base.CharMatcher
- uid: com.azure.cosmos.implementation.guava25.base.CharMatcher.forPredicate(com.azure.cosmos.implementation.guava25.base.Predicate<? super java.lang.Character>)
  id: forPredicate(com.azure.cosmos.implementation.guava25.base.Predicate<? super java.lang.Character>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.base.CharMatcher
  langs:
  - java
  name: forPredicate(Predicate<? super Character> predicate)
  nameWithType: CharMatcher.forPredicate(Predicate<? super Character> predicate)
  fullName: com.azure.cosmos.implementation.guava25.base.CharMatcher.forPredicate(Predicate<? super Character> predicate)
  overload: com.azure.cosmos.implementation.guava25.base.CharMatcher.forPredicate*
  type: Method
  package: com.azure.cosmos.implementation.guava25.base
  summary: Returns a matcher with identical behavior to the given <xref uid="java.lang.Character" data-throw-if-not-resolved="false">Character</xref>\-based predicate, but which operates on primitive `char` instances instead.
  syntax:
    content: public static CharMatcher forPredicate(Predicate<? super Character> predicate)
    parameters:
    - id: predicate
      type: com.azure.cosmos.implementation.guava25.base.Predicate<? super java.lang.Character>
    return:
      type: com.azure.cosmos.implementation.guava25.base.CharMatcher
- uid: com.azure.cosmos.implementation.guava25.base.CharMatcher.inRange(char,char)
  id: inRange(char,char)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.base.CharMatcher
  langs:
  - java
  name: inRange(char startInclusive, char endInclusive)
  nameWithType: CharMatcher.inRange(char startInclusive, char endInclusive)
  fullName: com.azure.cosmos.implementation.guava25.base.CharMatcher.inRange(char startInclusive, char endInclusive)
  overload: com.azure.cosmos.implementation.guava25.base.CharMatcher.inRange*
  type: Method
  package: com.azure.cosmos.implementation.guava25.base
  summary: Returns a `char` matcher that matches any character in a given BMP range (both endpoints are inclusive). For example, to match any lowercase letter of the English alphabet, use `CharMatcher.inRange('a', 'z')`.
  syntax:
    content: public static CharMatcher inRange(char startInclusive, char endInclusive)
    parameters:
    - id: startInclusive
      type: char
    - id: endInclusive
      type: char
    return:
      type: com.azure.cosmos.implementation.guava25.base.CharMatcher
- uid: com.azure.cosmos.implementation.guava25.base.CharMatcher.indexIn(java.lang.CharSequence)
  id: indexIn(java.lang.CharSequence)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.base.CharMatcher
  langs:
  - java
  name: indexIn(CharSequence sequence)
  nameWithType: CharMatcher.indexIn(CharSequence sequence)
  fullName: com.azure.cosmos.implementation.guava25.base.CharMatcher.indexIn(CharSequence sequence)
  overload: com.azure.cosmos.implementation.guava25.base.CharMatcher.indexIn*
  type: Method
  package: com.azure.cosmos.implementation.guava25.base
  summary: >-
    Returns the index of the first matching BMP character in a character sequence, or `-1` if no matching character is present.


    The default implementation iterates over the sequence in forward order calling <xref uid="com.azure.cosmos.implementation.guava25.base.CharMatcher.matches*" data-throw-if-not-resolved="false">#matches</xref> for each character.
  syntax:
    content: public int indexIn(CharSequence sequence)
    parameters:
    - id: sequence
      type: java.lang.CharSequence
      description: the character sequence to examine from the beginning
    return:
      type: int
      description: an index, or <code>-1</code> if no character matches
- uid: com.azure.cosmos.implementation.guava25.base.CharMatcher.indexIn(java.lang.CharSequence,int)
  id: indexIn(java.lang.CharSequence,int)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.base.CharMatcher
  langs:
  - java
  name: indexIn(CharSequence sequence, int start)
  nameWithType: CharMatcher.indexIn(CharSequence sequence, int start)
  fullName: com.azure.cosmos.implementation.guava25.base.CharMatcher.indexIn(CharSequence sequence, int start)
  overload: com.azure.cosmos.implementation.guava25.base.CharMatcher.indexIn*
  type: Method
  package: com.azure.cosmos.implementation.guava25.base
  summary: >-
    Returns the index of the first matching BMP character in a character sequence, starting from a given position, or `-1` if no character matches after that position.


    The default implementation iterates over the sequence in forward order, beginning at `start`, calling <xref uid="com.azure.cosmos.implementation.guava25.base.CharMatcher.matches*" data-throw-if-not-resolved="false">#matches</xref> for each character.
  syntax:
    content: public int indexIn(CharSequence sequence, int start)
    parameters:
    - id: sequence
      type: java.lang.CharSequence
      description: the character sequence to examine
    - id: start
      type: int
      description: >-
        the first index to examine; must be nonnegative and no greater than <code>
             sequence.length()</code>
    return:
      type: int
      description: >-
        the index of the first matching character, guaranteed to be no less than <code>start</code>,
             or <code>-1</code> if no character matches
- uid: com.azure.cosmos.implementation.guava25.base.CharMatcher.invisible()
  id: invisible()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.base.CharMatcher
  langs:
  - java
  name: invisible()
  nameWithType: CharMatcher.invisible()
  fullName: com.azure.cosmos.implementation.guava25.base.CharMatcher.invisible()
  overload: com.azure.cosmos.implementation.guava25.base.CharMatcher.invisible*
  type: Method
  package: com.azure.cosmos.implementation.guava25.base
  summary: >-
    Determines whether a character is invisible; that is, if its Unicode category is any of SPACE\_SEPARATOR, LINE\_SEPARATOR, PARAGRAPH\_SEPARATOR, CONTROL, FORMAT, SURROGATE, and PRIVATE\_USE according to ICU4J.


    See also the Unicode Default\_Ignorable\_Code\_Point property (available via ICU).
  syntax:
    content: public static CharMatcher invisible()
    return:
      type: com.azure.cosmos.implementation.guava25.base.CharMatcher
- uid: com.azure.cosmos.implementation.guava25.base.CharMatcher.is(char)
  id: is(char)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.base.CharMatcher
  langs:
  - java
  name: is(char match)
  nameWithType: CharMatcher.is(char match)
  fullName: com.azure.cosmos.implementation.guava25.base.CharMatcher.is(char match)
  overload: com.azure.cosmos.implementation.guava25.base.CharMatcher.is*
  type: Method
  package: com.azure.cosmos.implementation.guava25.base
  summary: Returns a `char` matcher that matches only one specified BMP character.
  syntax:
    content: public static CharMatcher is(char match)
    parameters:
    - id: match
      type: char
    return:
      type: com.azure.cosmos.implementation.guava25.base.CharMatcher
- uid: com.azure.cosmos.implementation.guava25.base.CharMatcher.isNot(char)
  id: isNot(char)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.base.CharMatcher
  langs:
  - java
  name: isNot(char match)
  nameWithType: CharMatcher.isNot(char match)
  fullName: com.azure.cosmos.implementation.guava25.base.CharMatcher.isNot(char match)
  overload: com.azure.cosmos.implementation.guava25.base.CharMatcher.isNot*
  type: Method
  package: com.azure.cosmos.implementation.guava25.base
  summary: >-
    Returns a `char` matcher that matches any character except the BMP character specified.


    To negate another `CharMatcher`, use <xref uid="com.azure.cosmos.implementation.guava25.base.CharMatcher.negate()" data-throw-if-not-resolved="false">#negate()</xref>.
  syntax:
    content: public static CharMatcher isNot(char match)
    parameters:
    - id: match
      type: char
    return:
      type: com.azure.cosmos.implementation.guava25.base.CharMatcher
- uid: com.azure.cosmos.implementation.guava25.base.CharMatcher.javaDigit()
  id: javaDigit()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.base.CharMatcher
  langs:
  - java
  name: javaDigit()
  nameWithType: CharMatcher.javaDigit()
  fullName: com.azure.cosmos.implementation.guava25.base.CharMatcher.javaDigit()
  overload: com.azure.cosmos.implementation.guava25.base.CharMatcher.javaDigit*
  type: Method
  package: com.azure.cosmos.implementation.guava25.base
  summary: Determines whether a character is a BMP digit according to <xref uid="java.lang.Character.isDigit*" data-throw-if-not-resolved="false">Java's definition</xref>. If you only care to match ASCII digits, you can use `inRange('0', '9')`.
  syntax:
    content: public static CharMatcher javaDigit()
    return:
      type: com.azure.cosmos.implementation.guava25.base.CharMatcher
- uid: com.azure.cosmos.implementation.guava25.base.CharMatcher.javaIsoControl()
  id: javaIsoControl()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.base.CharMatcher
  langs:
  - java
  name: javaIsoControl()
  nameWithType: CharMatcher.javaIsoControl()
  fullName: com.azure.cosmos.implementation.guava25.base.CharMatcher.javaIsoControl()
  overload: com.azure.cosmos.implementation.guava25.base.CharMatcher.javaIsoControl*
  type: Method
  package: com.azure.cosmos.implementation.guava25.base
  summary: >-
    Determines whether a character is an ISO control character as specified by <xref uid="java.lang.Character.isISOControl*" data-throw-if-not-resolved="false">Character#isISOControl(char)</xref>.


    All ISO control codes are on the BMP and thus supported by this API.
  syntax:
    content: public static CharMatcher javaIsoControl()
    return:
      type: com.azure.cosmos.implementation.guava25.base.CharMatcher
- uid: com.azure.cosmos.implementation.guava25.base.CharMatcher.javaLetter()
  id: javaLetter()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.base.CharMatcher
  langs:
  - java
  name: javaLetter()
  nameWithType: CharMatcher.javaLetter()
  fullName: com.azure.cosmos.implementation.guava25.base.CharMatcher.javaLetter()
  overload: com.azure.cosmos.implementation.guava25.base.CharMatcher.javaLetter*
  type: Method
  package: com.azure.cosmos.implementation.guava25.base
  summary: Determines whether a character is a BMP letter according to <xref uid="java.lang.Character.isLetter*" data-throw-if-not-resolved="false">Java's definition</xref>. If you only care to match letters of the Latin alphabet, you can use `inRange('a', 'z').or(inRange('A', 'Z'))`.
  syntax:
    content: public static CharMatcher javaLetter()
    return:
      type: com.azure.cosmos.implementation.guava25.base.CharMatcher
- uid: com.azure.cosmos.implementation.guava25.base.CharMatcher.javaLetterOrDigit()
  id: javaLetterOrDigit()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.base.CharMatcher
  langs:
  - java
  name: javaLetterOrDigit()
  nameWithType: CharMatcher.javaLetterOrDigit()
  fullName: com.azure.cosmos.implementation.guava25.base.CharMatcher.javaLetterOrDigit()
  overload: com.azure.cosmos.implementation.guava25.base.CharMatcher.javaLetterOrDigit*
  type: Method
  package: com.azure.cosmos.implementation.guava25.base
  summary: Determines whether a character is a BMP letter or digit according to <xref uid="java.lang.Character.isLetterOrDigit*" data-throw-if-not-resolved="false">Java's definition</xref>.
  syntax:
    content: public static CharMatcher javaLetterOrDigit()
    return:
      type: com.azure.cosmos.implementation.guava25.base.CharMatcher
- uid: com.azure.cosmos.implementation.guava25.base.CharMatcher.javaLowerCase()
  id: javaLowerCase()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.base.CharMatcher
  langs:
  - java
  name: javaLowerCase()
  nameWithType: CharMatcher.javaLowerCase()
  fullName: com.azure.cosmos.implementation.guava25.base.CharMatcher.javaLowerCase()
  overload: com.azure.cosmos.implementation.guava25.base.CharMatcher.javaLowerCase*
  type: Method
  package: com.azure.cosmos.implementation.guava25.base
  summary: Determines whether a BMP character is lower case according to <xref uid="java.lang.Character.isLowerCase*" data-throw-if-not-resolved="false">Java's definition</xref>.
  syntax:
    content: public static CharMatcher javaLowerCase()
    return:
      type: com.azure.cosmos.implementation.guava25.base.CharMatcher
- uid: com.azure.cosmos.implementation.guava25.base.CharMatcher.javaUpperCase()
  id: javaUpperCase()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.base.CharMatcher
  langs:
  - java
  name: javaUpperCase()
  nameWithType: CharMatcher.javaUpperCase()
  fullName: com.azure.cosmos.implementation.guava25.base.CharMatcher.javaUpperCase()
  overload: com.azure.cosmos.implementation.guava25.base.CharMatcher.javaUpperCase*
  type: Method
  package: com.azure.cosmos.implementation.guava25.base
  summary: Determines whether a BMP character is upper case according to <xref uid="java.lang.Character.isUpperCase*" data-throw-if-not-resolved="false">Java's definition</xref>.
  syntax:
    content: public static CharMatcher javaUpperCase()
    return:
      type: com.azure.cosmos.implementation.guava25.base.CharMatcher
- uid: com.azure.cosmos.implementation.guava25.base.CharMatcher.lastIndexIn(java.lang.CharSequence)
  id: lastIndexIn(java.lang.CharSequence)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.base.CharMatcher
  langs:
  - java
  name: lastIndexIn(CharSequence sequence)
  nameWithType: CharMatcher.lastIndexIn(CharSequence sequence)
  fullName: com.azure.cosmos.implementation.guava25.base.CharMatcher.lastIndexIn(CharSequence sequence)
  overload: com.azure.cosmos.implementation.guava25.base.CharMatcher.lastIndexIn*
  type: Method
  package: com.azure.cosmos.implementation.guava25.base
  summary: >-
    Returns the index of the last matching BMP character in a character sequence, or `-1` if no matching character is present.


    The default implementation iterates over the sequence in reverse order calling <xref uid="com.azure.cosmos.implementation.guava25.base.CharMatcher.matches*" data-throw-if-not-resolved="false">#matches</xref> for each character.
  syntax:
    content: public int lastIndexIn(CharSequence sequence)
    parameters:
    - id: sequence
      type: java.lang.CharSequence
      description: the character sequence to examine from the end
    return:
      type: int
      description: an index, or <code>-1</code> if no character matches
- uid: com.azure.cosmos.implementation.guava25.base.CharMatcher.matches(char)
  id: matches(char)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.base.CharMatcher
  langs:
  - java
  name: matches(char c)
  nameWithType: CharMatcher.matches(char c)
  fullName: com.azure.cosmos.implementation.guava25.base.CharMatcher.matches(char c)
  overload: com.azure.cosmos.implementation.guava25.base.CharMatcher.matches*
  type: Method
  package: com.azure.cosmos.implementation.guava25.base
  summary: Determines a true or false value for the given character.
  syntax:
    content: public abstract boolean matches(char c)
    parameters:
    - id: c
      type: char
    return:
      type: boolean
- uid: com.azure.cosmos.implementation.guava25.base.CharMatcher.matchesAllOf(java.lang.CharSequence)
  id: matchesAllOf(java.lang.CharSequence)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.base.CharMatcher
  langs:
  - java
  name: matchesAllOf(CharSequence sequence)
  nameWithType: CharMatcher.matchesAllOf(CharSequence sequence)
  fullName: com.azure.cosmos.implementation.guava25.base.CharMatcher.matchesAllOf(CharSequence sequence)
  overload: com.azure.cosmos.implementation.guava25.base.CharMatcher.matchesAllOf*
  type: Method
  package: com.azure.cosmos.implementation.guava25.base
  summary: >-
    Returns `true` if a character sequence contains only matching BMP characters.


    The default implementation iterates over the sequence, invoking <xref uid="com.azure.cosmos.implementation.guava25.base.CharMatcher.matches*" data-throw-if-not-resolved="false">#matches</xref> for each character, until this returns `false` or the end is reached.
  syntax:
    content: public boolean matchesAllOf(CharSequence sequence)
    parameters:
    - id: sequence
      type: java.lang.CharSequence
      description: the character sequence to examine, possibly empty
    return:
      type: boolean
      description: >-
        <code>true</code> if this matcher matches every character in the sequence, including when
             the sequence is empty
- uid: com.azure.cosmos.implementation.guava25.base.CharMatcher.matchesAnyOf(java.lang.CharSequence)
  id: matchesAnyOf(java.lang.CharSequence)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.base.CharMatcher
  langs:
  - java
  name: matchesAnyOf(CharSequence sequence)
  nameWithType: CharMatcher.matchesAnyOf(CharSequence sequence)
  fullName: com.azure.cosmos.implementation.guava25.base.CharMatcher.matchesAnyOf(CharSequence sequence)
  overload: com.azure.cosmos.implementation.guava25.base.CharMatcher.matchesAnyOf*
  type: Method
  package: com.azure.cosmos.implementation.guava25.base
  summary: >-
    Returns `true` if a character sequence contains at least one matching BMP character. Equivalent to `!matchesNoneOf(sequence)`.


    The default implementation iterates over the sequence, invoking <xref uid="com.azure.cosmos.implementation.guava25.base.CharMatcher.matches*" data-throw-if-not-resolved="false">#matches</xref> for each character, until this returns `true` or the end is reached.
  syntax:
    content: public boolean matchesAnyOf(CharSequence sequence)
    parameters:
    - id: sequence
      type: java.lang.CharSequence
      description: the character sequence to examine, possibly empty
    return:
      type: boolean
      description: <code>true</code> if this matcher matches at least one character in the sequence
- uid: com.azure.cosmos.implementation.guava25.base.CharMatcher.matchesNoneOf(java.lang.CharSequence)
  id: matchesNoneOf(java.lang.CharSequence)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.base.CharMatcher
  langs:
  - java
  name: matchesNoneOf(CharSequence sequence)
  nameWithType: CharMatcher.matchesNoneOf(CharSequence sequence)
  fullName: com.azure.cosmos.implementation.guava25.base.CharMatcher.matchesNoneOf(CharSequence sequence)
  overload: com.azure.cosmos.implementation.guava25.base.CharMatcher.matchesNoneOf*
  type: Method
  package: com.azure.cosmos.implementation.guava25.base
  summary: >-
    Returns `true` if a character sequence contains no matching BMP characters. Equivalent to `!matchesAnyOf(sequence)`.


    The default implementation iterates over the sequence, invoking <xref uid="com.azure.cosmos.implementation.guava25.base.CharMatcher.matches*" data-throw-if-not-resolved="false">#matches</xref> for each character, until this returns `true` or the end is reached.
  syntax:
    content: public boolean matchesNoneOf(CharSequence sequence)
    parameters:
    - id: sequence
      type: java.lang.CharSequence
      description: the character sequence to examine, possibly empty
    return:
      type: boolean
      description: >-
        <code>true</code> if this matcher matches no characters in the sequence, including when the
             sequence is empty
- uid: com.azure.cosmos.implementation.guava25.base.CharMatcher.negate()
  id: negate()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.base.CharMatcher
  langs:
  - java
  name: negate()
  nameWithType: CharMatcher.negate()
  fullName: com.azure.cosmos.implementation.guava25.base.CharMatcher.negate()
  overload: com.azure.cosmos.implementation.guava25.base.CharMatcher.negate*
  type: Method
  package: com.azure.cosmos.implementation.guava25.base
  summary: Returns a matcher that matches any character not matched by this matcher.
  syntax:
    content: public CharMatcher negate()
    return:
      type: com.azure.cosmos.implementation.guava25.base.CharMatcher
- uid: com.azure.cosmos.implementation.guava25.base.CharMatcher.none()
  id: none()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.base.CharMatcher
  langs:
  - java
  name: none()
  nameWithType: CharMatcher.none()
  fullName: com.azure.cosmos.implementation.guava25.base.CharMatcher.none()
  overload: com.azure.cosmos.implementation.guava25.base.CharMatcher.none*
  type: Method
  package: com.azure.cosmos.implementation.guava25.base
  summary: Matches no characters.
  syntax:
    content: public static CharMatcher none()
    return:
      type: com.azure.cosmos.implementation.guava25.base.CharMatcher
- uid: com.azure.cosmos.implementation.guava25.base.CharMatcher.noneOf(java.lang.CharSequence)
  id: noneOf(java.lang.CharSequence)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.base.CharMatcher
  langs:
  - java
  name: noneOf(CharSequence sequence)
  nameWithType: CharMatcher.noneOf(CharSequence sequence)
  fullName: com.azure.cosmos.implementation.guava25.base.CharMatcher.noneOf(CharSequence sequence)
  overload: com.azure.cosmos.implementation.guava25.base.CharMatcher.noneOf*
  type: Method
  package: com.azure.cosmos.implementation.guava25.base
  summary: Returns a `char` matcher that matches any BMP character not present in the given character sequence. Returns a bogus matcher if the sequence contains supplementary characters.
  syntax:
    content: public static CharMatcher noneOf(CharSequence sequence)
    parameters:
    - id: sequence
      type: java.lang.CharSequence
    return:
      type: com.azure.cosmos.implementation.guava25.base.CharMatcher
- uid: com.azure.cosmos.implementation.guava25.base.CharMatcher.or(com.azure.cosmos.implementation.guava25.base.CharMatcher)
  id: or(com.azure.cosmos.implementation.guava25.base.CharMatcher)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.base.CharMatcher
  langs:
  - java
  name: or(CharMatcher other)
  nameWithType: CharMatcher.or(CharMatcher other)
  fullName: com.azure.cosmos.implementation.guava25.base.CharMatcher.or(CharMatcher other)
  overload: com.azure.cosmos.implementation.guava25.base.CharMatcher.or*
  type: Method
  package: com.azure.cosmos.implementation.guava25.base
  summary: Returns a matcher that matches any character matched by either this matcher or `other`.
  syntax:
    content: public CharMatcher or(CharMatcher other)
    parameters:
    - id: other
      type: com.azure.cosmos.implementation.guava25.base.CharMatcher
    return:
      type: com.azure.cosmos.implementation.guava25.base.CharMatcher
- uid: com.azure.cosmos.implementation.guava25.base.CharMatcher.precomputed()
  id: precomputed()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.base.CharMatcher
  langs:
  - java
  name: precomputed()
  nameWithType: CharMatcher.precomputed()
  fullName: com.azure.cosmos.implementation.guava25.base.CharMatcher.precomputed()
  overload: com.azure.cosmos.implementation.guava25.base.CharMatcher.precomputed*
  type: Method
  package: com.azure.cosmos.implementation.guava25.base
  summary: >-
    Returns a `char` matcher functionally equivalent to this one, but which may be faster to query than the original; your mileage may vary. Precomputation takes time and is likely to be worthwhile only if the precomputed matcher is queried many thousands of times.


    This method has no effect (returns `this`) when called in GWT: it's unclear whether a precomputed matcher is faster, but it certainly consumes more memory, which doesn't seem like a worthwhile tradeoff in a browser.
  syntax:
    content: public CharMatcher precomputed()
    return:
      type: com.azure.cosmos.implementation.guava25.base.CharMatcher
- uid: com.azure.cosmos.implementation.guava25.base.CharMatcher.removeFrom(java.lang.CharSequence)
  id: removeFrom(java.lang.CharSequence)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.base.CharMatcher
  langs:
  - java
  name: removeFrom(CharSequence sequence)
  nameWithType: CharMatcher.removeFrom(CharSequence sequence)
  fullName: com.azure.cosmos.implementation.guava25.base.CharMatcher.removeFrom(CharSequence sequence)
  overload: com.azure.cosmos.implementation.guava25.base.CharMatcher.removeFrom*
  type: Method
  package: com.azure.cosmos.implementation.guava25.base
  summary: >-
    Returns a string containing all non-matching characters of a character sequence, in order. For example:


    ```java

    CharMatcher.is('a').removeFrom("bazaar")

    ```


    ... returns `"bzr"`.
  syntax:
    content: public String removeFrom(CharSequence sequence)
    parameters:
    - id: sequence
      type: java.lang.CharSequence
    return:
      type: java.lang.String
- uid: com.azure.cosmos.implementation.guava25.base.CharMatcher.replaceFrom(java.lang.CharSequence,char)
  id: replaceFrom(java.lang.CharSequence,char)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.base.CharMatcher
  langs:
  - java
  name: replaceFrom(CharSequence sequence, char replacement)
  nameWithType: CharMatcher.replaceFrom(CharSequence sequence, char replacement)
  fullName: com.azure.cosmos.implementation.guava25.base.CharMatcher.replaceFrom(CharSequence sequence, char replacement)
  overload: com.azure.cosmos.implementation.guava25.base.CharMatcher.replaceFrom*
  type: Method
  package: com.azure.cosmos.implementation.guava25.base
  summary: >-
    Returns a string copy of the input character sequence, with each matching BMP character replaced by a given replacement character. For example:


    ```java

    CharMatcher.is('a').replaceFrom("radar", 'o')

    ```


    ... returns `"rodor"`.


    The default implementation uses <xref uid="com.azure.cosmos.implementation.guava25.base.CharMatcher.indexIn(java.lang.CharSequence)" data-throw-if-not-resolved="false">#indexIn(CharSequence)</xref> to find the first matching character, then iterates the remainder of the sequence calling <xref uid="com.azure.cosmos.implementation.guava25.base.CharMatcher.matches(char)" data-throw-if-not-resolved="false">#matches(char)</xref> for each character.
  syntax:
    content: public String replaceFrom(CharSequence sequence, char replacement)
    parameters:
    - id: sequence
      type: java.lang.CharSequence
      description: the character sequence to replace matching characters in
    - id: replacement
      type: char
      description: >-
        the character to append to the result string in place of each matching
             character in <code>sequence</code>
    return:
      type: java.lang.String
      description: the new string
- uid: com.azure.cosmos.implementation.guava25.base.CharMatcher.replaceFrom(java.lang.CharSequence,java.lang.CharSequence)
  id: replaceFrom(java.lang.CharSequence,java.lang.CharSequence)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.base.CharMatcher
  langs:
  - java
  name: replaceFrom(CharSequence sequence, CharSequence replacement)
  nameWithType: CharMatcher.replaceFrom(CharSequence sequence, CharSequence replacement)
  fullName: com.azure.cosmos.implementation.guava25.base.CharMatcher.replaceFrom(CharSequence sequence, CharSequence replacement)
  overload: com.azure.cosmos.implementation.guava25.base.CharMatcher.replaceFrom*
  type: Method
  package: com.azure.cosmos.implementation.guava25.base
  summary: >-
    Returns a string copy of the input character sequence, with each matching BMP character replaced by a given replacement sequence. For example:


    ```java

    CharMatcher.is('a').replaceFrom("yaha", "oo")

    ```


    ... returns `"yoohoo"`.


    **Note:** If the replacement is a fixed string with only one character, you are better off calling <xref uid="com.azure.cosmos.implementation.guava25.base.CharMatcher.replaceFrom(java.lang.CharSequence,char)" data-throw-if-not-resolved="false">#replaceFrom(CharSequence, char)</xref> directly.
  syntax:
    content: public String replaceFrom(CharSequence sequence, CharSequence replacement)
    parameters:
    - id: sequence
      type: java.lang.CharSequence
      description: the character sequence to replace matching characters in
    - id: replacement
      type: java.lang.CharSequence
      description: >-
        the characters to append to the result string in place of each matching
             character in <code>sequence</code>
    return:
      type: java.lang.String
      description: the new string
- uid: com.azure.cosmos.implementation.guava25.base.CharMatcher.retainFrom(java.lang.CharSequence)
  id: retainFrom(java.lang.CharSequence)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.base.CharMatcher
  langs:
  - java
  name: retainFrom(CharSequence sequence)
  nameWithType: CharMatcher.retainFrom(CharSequence sequence)
  fullName: com.azure.cosmos.implementation.guava25.base.CharMatcher.retainFrom(CharSequence sequence)
  overload: com.azure.cosmos.implementation.guava25.base.CharMatcher.retainFrom*
  type: Method
  package: com.azure.cosmos.implementation.guava25.base
  summary: >-
    Returns a string containing all matching BMP characters of a character sequence, in order. For example:


    ```java

    CharMatcher.is('a').retainFrom("bazaar")

    ```


    ... returns `"aaa"`.
  syntax:
    content: public String retainFrom(CharSequence sequence)
    parameters:
    - id: sequence
      type: java.lang.CharSequence
    return:
      type: java.lang.String
- uid: com.azure.cosmos.implementation.guava25.base.CharMatcher.singleWidth()
  id: singleWidth()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.base.CharMatcher
  langs:
  - java
  name: singleWidth()
  nameWithType: CharMatcher.singleWidth()
  fullName: com.azure.cosmos.implementation.guava25.base.CharMatcher.singleWidth()
  overload: com.azure.cosmos.implementation.guava25.base.CharMatcher.singleWidth*
  type: Method
  package: com.azure.cosmos.implementation.guava25.base
  summary: >-
    Determines whether a character is single-width (not double-width). When in doubt, this matcher errs on the side of returning `false` (that is, it tends to assume a character is double-width).


    **Note:** as the reference file evolves, we will modify this matcher to keep it up to date.


    See also [UAX \#11 East Asian Width][UAX _11 East Asian Width].



    [UAX _11 East Asian Width]: http://www.unicode.org/reports/tr11/
  syntax:
    content: public static CharMatcher singleWidth()
    return:
      type: com.azure.cosmos.implementation.guava25.base.CharMatcher
- uid: com.azure.cosmos.implementation.guava25.base.CharMatcher.toString()
  id: toString()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.base.CharMatcher
  langs:
  - java
  name: toString()
  nameWithType: CharMatcher.toString()
  fullName: com.azure.cosmos.implementation.guava25.base.CharMatcher.toString()
  overload: com.azure.cosmos.implementation.guava25.base.CharMatcher.toString*
  type: Method
  package: com.azure.cosmos.implementation.guava25.base
  summary: Returns a string representation of this `CharMatcher`, such as `CharMatcher.or(WHITESPACE, JAVA_DIGIT)`.
  syntax:
    content: public String toString()
    return:
      type: java.lang.String
- uid: com.azure.cosmos.implementation.guava25.base.CharMatcher.trimAndCollapseFrom(java.lang.CharSequence,char)
  id: trimAndCollapseFrom(java.lang.CharSequence,char)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.base.CharMatcher
  langs:
  - java
  name: trimAndCollapseFrom(CharSequence sequence, char replacement)
  nameWithType: CharMatcher.trimAndCollapseFrom(CharSequence sequence, char replacement)
  fullName: com.azure.cosmos.implementation.guava25.base.CharMatcher.trimAndCollapseFrom(CharSequence sequence, char replacement)
  overload: com.azure.cosmos.implementation.guava25.base.CharMatcher.trimAndCollapseFrom*
  type: Method
  package: com.azure.cosmos.implementation.guava25.base
  summary: Collapses groups of matching characters exactly as <xref uid="com.azure.cosmos.implementation.guava25.base.CharMatcher.collapseFrom*" data-throw-if-not-resolved="false">#collapseFrom</xref> does, except that groups of matching BMP characters at the start or end of the sequence are removed without replacement.
  syntax:
    content: public String trimAndCollapseFrom(CharSequence sequence, char replacement)
    parameters:
    - id: sequence
      type: java.lang.CharSequence
    - id: replacement
      type: char
    return:
      type: java.lang.String
- uid: com.azure.cosmos.implementation.guava25.base.CharMatcher.trimFrom(java.lang.CharSequence)
  id: trimFrom(java.lang.CharSequence)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.base.CharMatcher
  langs:
  - java
  name: trimFrom(CharSequence sequence)
  nameWithType: CharMatcher.trimFrom(CharSequence sequence)
  fullName: com.azure.cosmos.implementation.guava25.base.CharMatcher.trimFrom(CharSequence sequence)
  overload: com.azure.cosmos.implementation.guava25.base.CharMatcher.trimFrom*
  type: Method
  package: com.azure.cosmos.implementation.guava25.base
  summary: >-
    Returns a substring of the input character sequence that omits all matching BMP characters from the beginning and from the end of the string. For example:


    ```java

    CharMatcher.anyOf("ab").trimFrom("abacatbab")

    ```


    ... returns `"cat"`.


    Note that:


    ```java

    CharMatcher.inRange('\0', ' ').trimFrom(str)

    ```


    ... is equivalent to <xref uid="java.lang.String.trim*" data-throw-if-not-resolved="false">String#trim()</xref>.
  syntax:
    content: public String trimFrom(CharSequence sequence)
    parameters:
    - id: sequence
      type: java.lang.CharSequence
    return:
      type: java.lang.String
- uid: com.azure.cosmos.implementation.guava25.base.CharMatcher.trimLeadingFrom(java.lang.CharSequence)
  id: trimLeadingFrom(java.lang.CharSequence)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.base.CharMatcher
  langs:
  - java
  name: trimLeadingFrom(CharSequence sequence)
  nameWithType: CharMatcher.trimLeadingFrom(CharSequence sequence)
  fullName: com.azure.cosmos.implementation.guava25.base.CharMatcher.trimLeadingFrom(CharSequence sequence)
  overload: com.azure.cosmos.implementation.guava25.base.CharMatcher.trimLeadingFrom*
  type: Method
  package: com.azure.cosmos.implementation.guava25.base
  summary: >-
    Returns a substring of the input character sequence that omits all matching BMP characters from the beginning of the string. For example:


    ```java

    CharMatcher.anyOf("ab").trimLeadingFrom("abacatbab")

    ```


    ... returns `"catbab"`.
  syntax:
    content: public String trimLeadingFrom(CharSequence sequence)
    parameters:
    - id: sequence
      type: java.lang.CharSequence
    return:
      type: java.lang.String
- uid: com.azure.cosmos.implementation.guava25.base.CharMatcher.trimTrailingFrom(java.lang.CharSequence)
  id: trimTrailingFrom(java.lang.CharSequence)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.base.CharMatcher
  langs:
  - java
  name: trimTrailingFrom(CharSequence sequence)
  nameWithType: CharMatcher.trimTrailingFrom(CharSequence sequence)
  fullName: com.azure.cosmos.implementation.guava25.base.CharMatcher.trimTrailingFrom(CharSequence sequence)
  overload: com.azure.cosmos.implementation.guava25.base.CharMatcher.trimTrailingFrom*
  type: Method
  package: com.azure.cosmos.implementation.guava25.base
  summary: >-
    Returns a substring of the input character sequence that omits all matching BMP characters from the end of the string. For example:


    ```java

    CharMatcher.anyOf("ab").trimTrailingFrom("abacatbab")

    ```


    ... returns `"abacat"`.
  syntax:
    content: public String trimTrailingFrom(CharSequence sequence)
    parameters:
    - id: sequence
      type: java.lang.CharSequence
    return:
      type: java.lang.String
- uid: com.azure.cosmos.implementation.guava25.base.CharMatcher.whitespace()
  id: whitespace()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.base.CharMatcher
  langs:
  - java
  name: whitespace()
  nameWithType: CharMatcher.whitespace()
  fullName: com.azure.cosmos.implementation.guava25.base.CharMatcher.whitespace()
  overload: com.azure.cosmos.implementation.guava25.base.CharMatcher.whitespace*
  type: Method
  package: com.azure.cosmos.implementation.guava25.base
  summary: >-
    Determines whether a character is whitespace according to the latest Unicode standard, as illustrated [here][]. This is not the same definition used by other Java APIs. (See a [comparison of several definitions of "whitespace"][comparison of several definitions of _whitespace].)


    All Unicode White\_Space characters are on the BMP and thus supported by this API.


    **Note:** as the Unicode definition evolves, we will modify this matcher to keep it up to date.



    [here]: http://unicode.org/cldr/utility/list-unicodeset.jsp?a=%5Cp%7Bwhitespace%7D

    [comparison of several definitions of _whitespace]: https://goo.gl/Y6SLWx
  syntax:
    content: public static CharMatcher whitespace()
    return:
      type: com.azure.cosmos.implementation.guava25.base.CharMatcher
references:
- uid: com.azure.cosmos.implementation.guava25.base.CharMatcher.CharMatcher*
  name: CharMatcher
  nameWithType: CharMatcher.CharMatcher
  fullName: com.azure.cosmos.implementation.guava25.base.CharMatcher.CharMatcher
  package: com.azure.cosmos.implementation.guava25.base
- uid: com.azure.cosmos.implementation.guava25.base.CharMatcher.any*
  name: any
  nameWithType: CharMatcher.any
  fullName: com.azure.cosmos.implementation.guava25.base.CharMatcher.any
  package: com.azure.cosmos.implementation.guava25.base
- uid: com.azure.cosmos.implementation.guava25.base.CharMatcher.none*
  name: none
  nameWithType: CharMatcher.none
  fullName: com.azure.cosmos.implementation.guava25.base.CharMatcher.none
  package: com.azure.cosmos.implementation.guava25.base
- uid: com.azure.cosmos.implementation.guava25.base.CharMatcher.whitespace*
  name: whitespace
  nameWithType: CharMatcher.whitespace
  fullName: com.azure.cosmos.implementation.guava25.base.CharMatcher.whitespace
  package: com.azure.cosmos.implementation.guava25.base
- uid: com.azure.cosmos.implementation.guava25.base.CharMatcher.breakingWhitespace*
  name: breakingWhitespace
  nameWithType: CharMatcher.breakingWhitespace
  fullName: com.azure.cosmos.implementation.guava25.base.CharMatcher.breakingWhitespace
  package: com.azure.cosmos.implementation.guava25.base
- uid: com.azure.cosmos.implementation.guava25.base.CharMatcher.ascii*
  name: ascii
  nameWithType: CharMatcher.ascii
  fullName: com.azure.cosmos.implementation.guava25.base.CharMatcher.ascii
  package: com.azure.cosmos.implementation.guava25.base
- uid: com.azure.cosmos.implementation.guava25.base.CharMatcher.digit*
  name: digit
  nameWithType: CharMatcher.digit
  fullName: com.azure.cosmos.implementation.guava25.base.CharMatcher.digit
  package: com.azure.cosmos.implementation.guava25.base
- uid: com.azure.cosmos.implementation.guava25.base.CharMatcher.javaDigit*
  name: javaDigit
  nameWithType: CharMatcher.javaDigit
  fullName: com.azure.cosmos.implementation.guava25.base.CharMatcher.javaDigit
  package: com.azure.cosmos.implementation.guava25.base
- uid: com.azure.cosmos.implementation.guava25.base.CharMatcher.javaLetter*
  name: javaLetter
  nameWithType: CharMatcher.javaLetter
  fullName: com.azure.cosmos.implementation.guava25.base.CharMatcher.javaLetter
  package: com.azure.cosmos.implementation.guava25.base
- uid: com.azure.cosmos.implementation.guava25.base.CharMatcher.javaLetterOrDigit*
  name: javaLetterOrDigit
  nameWithType: CharMatcher.javaLetterOrDigit
  fullName: com.azure.cosmos.implementation.guava25.base.CharMatcher.javaLetterOrDigit
  package: com.azure.cosmos.implementation.guava25.base
- uid: com.azure.cosmos.implementation.guava25.base.CharMatcher.javaUpperCase*
  name: javaUpperCase
  nameWithType: CharMatcher.javaUpperCase
  fullName: com.azure.cosmos.implementation.guava25.base.CharMatcher.javaUpperCase
  package: com.azure.cosmos.implementation.guava25.base
- uid: com.azure.cosmos.implementation.guava25.base.CharMatcher.javaLowerCase*
  name: javaLowerCase
  nameWithType: CharMatcher.javaLowerCase
  fullName: com.azure.cosmos.implementation.guava25.base.CharMatcher.javaLowerCase
  package: com.azure.cosmos.implementation.guava25.base
- uid: com.azure.cosmos.implementation.guava25.base.CharMatcher.javaIsoControl*
  name: javaIsoControl
  nameWithType: CharMatcher.javaIsoControl
  fullName: com.azure.cosmos.implementation.guava25.base.CharMatcher.javaIsoControl
  package: com.azure.cosmos.implementation.guava25.base
- uid: com.azure.cosmos.implementation.guava25.base.CharMatcher.invisible*
  name: invisible
  nameWithType: CharMatcher.invisible
  fullName: com.azure.cosmos.implementation.guava25.base.CharMatcher.invisible
  package: com.azure.cosmos.implementation.guava25.base
- uid: com.azure.cosmos.implementation.guava25.base.CharMatcher.singleWidth*
  name: singleWidth
  nameWithType: CharMatcher.singleWidth
  fullName: com.azure.cosmos.implementation.guava25.base.CharMatcher.singleWidth
  package: com.azure.cosmos.implementation.guava25.base
- uid: char
  spec.java:
  - uid: char
    name: char
    fullName: char
- uid: com.azure.cosmos.implementation.guava25.base.CharMatcher.is*
  name: is
  nameWithType: CharMatcher.is
  fullName: com.azure.cosmos.implementation.guava25.base.CharMatcher.is
  package: com.azure.cosmos.implementation.guava25.base
- uid: com.azure.cosmos.implementation.guava25.base.CharMatcher.isNot*
  name: isNot
  nameWithType: CharMatcher.isNot
  fullName: com.azure.cosmos.implementation.guava25.base.CharMatcher.isNot
  package: com.azure.cosmos.implementation.guava25.base
- uid: java.lang.CharSequence
  spec.java:
  - uid: java.lang.CharSequence
    name: CharSequence
    fullName: java.lang.CharSequence
- uid: com.azure.cosmos.implementation.guava25.base.CharMatcher.anyOf*
  name: anyOf
  nameWithType: CharMatcher.anyOf
  fullName: com.azure.cosmos.implementation.guava25.base.CharMatcher.anyOf
  package: com.azure.cosmos.implementation.guava25.base
- uid: com.azure.cosmos.implementation.guava25.base.CharMatcher.noneOf*
  name: noneOf
  nameWithType: CharMatcher.noneOf
  fullName: com.azure.cosmos.implementation.guava25.base.CharMatcher.noneOf
  package: com.azure.cosmos.implementation.guava25.base
- uid: com.azure.cosmos.implementation.guava25.base.CharMatcher.inRange*
  name: inRange
  nameWithType: CharMatcher.inRange
  fullName: com.azure.cosmos.implementation.guava25.base.CharMatcher.inRange
  package: com.azure.cosmos.implementation.guava25.base
- uid: com.azure.cosmos.implementation.guava25.base.Predicate<? super java.lang.Character>
  spec.java:
  - uid: com.azure.cosmos.implementation.guava25.base.Predicate
    name: Predicate
    fullName: com.azure.cosmos.implementation.guava25.base.Predicate
  - name: <
    fullName: <
  - uid: '? super java.lang.Character'
    name: Character
    fullName: '? super java.lang.Character'
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.base.CharMatcher.forPredicate*
  name: forPredicate
  nameWithType: CharMatcher.forPredicate
  fullName: com.azure.cosmos.implementation.guava25.base.CharMatcher.forPredicate
  package: com.azure.cosmos.implementation.guava25.base
- uid: boolean
  spec.java:
  - uid: boolean
    name: boolean
    fullName: boolean
- uid: com.azure.cosmos.implementation.guava25.base.CharMatcher.matches*
  name: matches
  nameWithType: CharMatcher.matches
  fullName: com.azure.cosmos.implementation.guava25.base.CharMatcher.matches
  package: com.azure.cosmos.implementation.guava25.base
- uid: com.azure.cosmos.implementation.guava25.base.CharMatcher.negate*
  name: negate
  nameWithType: CharMatcher.negate
  fullName: com.azure.cosmos.implementation.guava25.base.CharMatcher.negate
  package: com.azure.cosmos.implementation.guava25.base
- uid: com.azure.cosmos.implementation.guava25.base.CharMatcher.and*
  name: and
  nameWithType: CharMatcher.and
  fullName: com.azure.cosmos.implementation.guava25.base.CharMatcher.and
  package: com.azure.cosmos.implementation.guava25.base
- uid: com.azure.cosmos.implementation.guava25.base.CharMatcher.or*
  name: or
  nameWithType: CharMatcher.or
  fullName: com.azure.cosmos.implementation.guava25.base.CharMatcher.or
  package: com.azure.cosmos.implementation.guava25.base
- uid: com.azure.cosmos.implementation.guava25.base.CharMatcher.precomputed*
  name: precomputed
  nameWithType: CharMatcher.precomputed
  fullName: com.azure.cosmos.implementation.guava25.base.CharMatcher.precomputed
  package: com.azure.cosmos.implementation.guava25.base
- uid: com.azure.cosmos.implementation.guava25.base.CharMatcher.matchesAnyOf*
  name: matchesAnyOf
  nameWithType: CharMatcher.matchesAnyOf
  fullName: com.azure.cosmos.implementation.guava25.base.CharMatcher.matchesAnyOf
  package: com.azure.cosmos.implementation.guava25.base
- uid: com.azure.cosmos.implementation.guava25.base.CharMatcher.matchesAllOf*
  name: matchesAllOf
  nameWithType: CharMatcher.matchesAllOf
  fullName: com.azure.cosmos.implementation.guava25.base.CharMatcher.matchesAllOf
  package: com.azure.cosmos.implementation.guava25.base
- uid: com.azure.cosmos.implementation.guava25.base.CharMatcher.matchesNoneOf*
  name: matchesNoneOf
  nameWithType: CharMatcher.matchesNoneOf
  fullName: com.azure.cosmos.implementation.guava25.base.CharMatcher.matchesNoneOf
  package: com.azure.cosmos.implementation.guava25.base
- uid: int
  spec.java:
  - uid: int
    name: int
    fullName: int
- uid: com.azure.cosmos.implementation.guava25.base.CharMatcher.indexIn*
  name: indexIn
  nameWithType: CharMatcher.indexIn
  fullName: com.azure.cosmos.implementation.guava25.base.CharMatcher.indexIn
  package: com.azure.cosmos.implementation.guava25.base
- uid: com.azure.cosmos.implementation.guava25.base.CharMatcher.lastIndexIn*
  name: lastIndexIn
  nameWithType: CharMatcher.lastIndexIn
  fullName: com.azure.cosmos.implementation.guava25.base.CharMatcher.lastIndexIn
  package: com.azure.cosmos.implementation.guava25.base
- uid: com.azure.cosmos.implementation.guava25.base.CharMatcher.countIn*
  name: countIn
  nameWithType: CharMatcher.countIn
  fullName: com.azure.cosmos.implementation.guava25.base.CharMatcher.countIn
  package: com.azure.cosmos.implementation.guava25.base
- uid: java.lang.String
  spec.java:
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
- uid: com.azure.cosmos.implementation.guava25.base.CharMatcher.removeFrom*
  name: removeFrom
  nameWithType: CharMatcher.removeFrom
  fullName: com.azure.cosmos.implementation.guava25.base.CharMatcher.removeFrom
  package: com.azure.cosmos.implementation.guava25.base
- uid: com.azure.cosmos.implementation.guava25.base.CharMatcher.retainFrom*
  name: retainFrom
  nameWithType: CharMatcher.retainFrom
  fullName: com.azure.cosmos.implementation.guava25.base.CharMatcher.retainFrom
  package: com.azure.cosmos.implementation.guava25.base
- uid: com.azure.cosmos.implementation.guava25.base.CharMatcher.replaceFrom*
  name: replaceFrom
  nameWithType: CharMatcher.replaceFrom
  fullName: com.azure.cosmos.implementation.guava25.base.CharMatcher.replaceFrom
  package: com.azure.cosmos.implementation.guava25.base
- uid: com.azure.cosmos.implementation.guava25.base.CharMatcher.trimFrom*
  name: trimFrom
  nameWithType: CharMatcher.trimFrom
  fullName: com.azure.cosmos.implementation.guava25.base.CharMatcher.trimFrom
  package: com.azure.cosmos.implementation.guava25.base
- uid: com.azure.cosmos.implementation.guava25.base.CharMatcher.trimLeadingFrom*
  name: trimLeadingFrom
  nameWithType: CharMatcher.trimLeadingFrom
  fullName: com.azure.cosmos.implementation.guava25.base.CharMatcher.trimLeadingFrom
  package: com.azure.cosmos.implementation.guava25.base
- uid: com.azure.cosmos.implementation.guava25.base.CharMatcher.trimTrailingFrom*
  name: trimTrailingFrom
  nameWithType: CharMatcher.trimTrailingFrom
  fullName: com.azure.cosmos.implementation.guava25.base.CharMatcher.trimTrailingFrom
  package: com.azure.cosmos.implementation.guava25.base
- uid: com.azure.cosmos.implementation.guava25.base.CharMatcher.collapseFrom*
  name: collapseFrom
  nameWithType: CharMatcher.collapseFrom
  fullName: com.azure.cosmos.implementation.guava25.base.CharMatcher.collapseFrom
  package: com.azure.cosmos.implementation.guava25.base
- uid: com.azure.cosmos.implementation.guava25.base.CharMatcher.trimAndCollapseFrom*
  name: trimAndCollapseFrom
  nameWithType: CharMatcher.trimAndCollapseFrom
  fullName: com.azure.cosmos.implementation.guava25.base.CharMatcher.trimAndCollapseFrom
  package: com.azure.cosmos.implementation.guava25.base
- uid: java.lang.Character
  spec.java:
  - uid: java.lang.Character
    name: Character
    fullName: java.lang.Character
- uid: com.azure.cosmos.implementation.guava25.base.CharMatcher.apply*
  name: apply
  nameWithType: CharMatcher.apply
  fullName: com.azure.cosmos.implementation.guava25.base.CharMatcher.apply
  package: com.azure.cosmos.implementation.guava25.base
- uid: com.azure.cosmos.implementation.guava25.base.CharMatcher.toString*
  name: toString
  nameWithType: CharMatcher.toString
  fullName: com.azure.cosmos.implementation.guava25.base.CharMatcher.toString
  package: com.azure.cosmos.implementation.guava25.base
- uid: com.azure.cosmos.implementation.guava25.base.Predicate<java.lang.Character>
  name: Predicate<Character>
  nameWithType: Predicate<Character>
  fullName: com.azure.cosmos.implementation.guava25.base.Predicate<java.lang.Character>
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: java.lang.Object.finalize()
  name: Object.finalize()
  nameWithType: Object.finalize()
  fullName: java.lang.Object.finalize()
- uid: java.lang.Object.clone()
  name: Object.clone()
  nameWithType: Object.clone()
  fullName: java.lang.Object.clone()
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: java.lang.Object.equals(java.lang.Object)
  name: Object.equals(Object)
  nameWithType: Object.equals(Object)
  fullName: java.lang.Object.equals(java.lang.Object)
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.lang.Object.hashCode()
  name: Object.hashCode()
  nameWithType: Object.hashCode()
  fullName: java.lang.Object.hashCode()
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: java.lang.Object.toString()
  name: Object.toString()
  nameWithType: Object.toString()
  fullName: java.lang.Object.toString()
- uid: com.azure.cosmos.implementation.guava25.base.Predicate
  name: Predicate
  nameWithType: Predicate
  fullName: com.azure.cosmos.implementation.guava25.base.Predicate
- uid: '? super java.lang.Character'
  name: '? super Character'
  nameWithType: '? super Character'
  fullName: '? super java.lang.Character'
