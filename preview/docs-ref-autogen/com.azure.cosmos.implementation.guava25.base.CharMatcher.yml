### YamlMime:JavaType
uid: "com.azure.cosmos.implementation.guava25.base.CharMatcher"
fullName: "com.azure.cosmos.implementation.guava25.base.CharMatcher"
name: "CharMatcher"
nameWithType: "CharMatcher"
summary: "Determines a true or false value for any Java `char` value, just as <xref uid=\"com.azure.cosmos.implementation.guava25.base.Predicate\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Predicate\"></xref> does for any <xref uid=\"java.lang.Object\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Object\"></xref>. Also offers basic text processing methods based on this function. Implementations are strongly encouraged to be side-effect-free and immutable.\n\nThroughout the documentation of this class, the phrase \"matching character\" is used to mean \"any `char` value `c` for which `this.matches(c)` returns `true`\".\n\n**Warning:** This class deals only with `char` values, that is, [BMP characters][]. It does not understand [supplementary Unicode code points][] in the range `0x10000` to `0x10FFFF` which includes the majority of assigned characters, including important CJK characters and emoji.\n\nSupplementary characters are [encoded into a `String` using surrogate pairs][encoded into a _String_ using surrogate pairs], and a `CharMatcher` treats these just as two separate characters. <xref uid=\"com.azure.cosmos.implementation.guava25.base.CharMatcher.countIn*\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#countIn\"></xref> counts each supplementary character as 2 `char`s.\n\nFor up-to-date Unicode character properties (digit, letter, etc.) and support for supplementary code points, use ICU4J UCharacter and UnicodeSet (freeze() after building). For basic text processing based on UnicodeSet use the ICU4J UnicodeSetSpanner.\n\nExample usages:\n\n```java\nString trimmed = .(userInput);\n   if (.(s)) { ... }\n```\n\nSee the Guava User Guide article on [`CharMatcher` ][CharMatcher_].\n\n\n[BMP characters]: http://www.unicode.org/glossary/#BMP_character\n[supplementary Unicode code points]: http://www.unicode.org/glossary/#supplementary_code_point\n[encoded into a _String_ using surrogate pairs]: https://docs.oracle.com/javase/8/docs/api/java/lang/Character.html#supplementary\n[CharMatcher_]: https://github.com/google/guava/wiki/StringsExplained#charmatcher"
inheritances:
- "<xref href=\"java.lang.Object\" data-throw-if-not-resolved=\"False\" />"
inheritedMembers:
- "java.lang.Object.clone()"
- "java.lang.Object.equals(java.lang.Object)"
- "java.lang.Object.finalize()"
- "java.lang.Object.getClass()"
- "java.lang.Object.hashCode()"
- "java.lang.Object.notify()"
- "java.lang.Object.notifyAll()"
- "java.lang.Object.toString()"
- "java.lang.Object.wait()"
- "java.lang.Object.wait(long)"
- "java.lang.Object.wait(long,int)"
syntax: "public abstract class CharMatcher implements Predicate<Character>"
constructors:
- "com.azure.cosmos.implementation.guava25.base.CharMatcher.CharMatcher()"
fields:
- "com.azure.cosmos.implementation.guava25.base.CharMatcher.ANY"
- "com.azure.cosmos.implementation.guava25.base.CharMatcher.ASCII"
- "com.azure.cosmos.implementation.guava25.base.CharMatcher.BREAKING_WHITESPACE"
- "com.azure.cosmos.implementation.guava25.base.CharMatcher.DIGIT"
- "com.azure.cosmos.implementation.guava25.base.CharMatcher.INVISIBLE"
- "com.azure.cosmos.implementation.guava25.base.CharMatcher.JAVA_DIGIT"
- "com.azure.cosmos.implementation.guava25.base.CharMatcher.JAVA_ISO_CONTROL"
- "com.azure.cosmos.implementation.guava25.base.CharMatcher.JAVA_LETTER"
- "com.azure.cosmos.implementation.guava25.base.CharMatcher.JAVA_LETTER_OR_DIGIT"
- "com.azure.cosmos.implementation.guava25.base.CharMatcher.JAVA_LOWER_CASE"
- "com.azure.cosmos.implementation.guava25.base.CharMatcher.JAVA_UPPER_CASE"
- "com.azure.cosmos.implementation.guava25.base.CharMatcher.NONE"
- "com.azure.cosmos.implementation.guava25.base.CharMatcher.SINGLE_WIDTH"
- "com.azure.cosmos.implementation.guava25.base.CharMatcher.WHITESPACE"
methods:
- "com.azure.cosmos.implementation.guava25.base.CharMatcher.and(com.azure.cosmos.implementation.guava25.base.CharMatcher)"
- "com.azure.cosmos.implementation.guava25.base.CharMatcher.any()"
- "com.azure.cosmos.implementation.guava25.base.CharMatcher.anyOf(java.lang.CharSequence)"
- "com.azure.cosmos.implementation.guava25.base.CharMatcher.apply(java.lang.Character)"
- "com.azure.cosmos.implementation.guava25.base.CharMatcher.ascii()"
- "com.azure.cosmos.implementation.guava25.base.CharMatcher.breakingWhitespace()"
- "com.azure.cosmos.implementation.guava25.base.CharMatcher.collapseFrom(java.lang.CharSequence,char)"
- "com.azure.cosmos.implementation.guava25.base.CharMatcher.countIn(java.lang.CharSequence)"
- "com.azure.cosmos.implementation.guava25.base.CharMatcher.digit()"
- "com.azure.cosmos.implementation.guava25.base.CharMatcher.forPredicate(com.azure.cosmos.implementation.guava25.base.Predicate<? super java.lang.Character>)"
- "com.azure.cosmos.implementation.guava25.base.CharMatcher.inRange(char,char)"
- "com.azure.cosmos.implementation.guava25.base.CharMatcher.indexIn(java.lang.CharSequence)"
- "com.azure.cosmos.implementation.guava25.base.CharMatcher.indexIn(java.lang.CharSequence,int)"
- "com.azure.cosmos.implementation.guava25.base.CharMatcher.invisible()"
- "com.azure.cosmos.implementation.guava25.base.CharMatcher.is(char)"
- "com.azure.cosmos.implementation.guava25.base.CharMatcher.isNot(char)"
- "com.azure.cosmos.implementation.guava25.base.CharMatcher.javaDigit()"
- "com.azure.cosmos.implementation.guava25.base.CharMatcher.javaIsoControl()"
- "com.azure.cosmos.implementation.guava25.base.CharMatcher.javaLetter()"
- "com.azure.cosmos.implementation.guava25.base.CharMatcher.javaLetterOrDigit()"
- "com.azure.cosmos.implementation.guava25.base.CharMatcher.javaLowerCase()"
- "com.azure.cosmos.implementation.guava25.base.CharMatcher.javaUpperCase()"
- "com.azure.cosmos.implementation.guava25.base.CharMatcher.lastIndexIn(java.lang.CharSequence)"
- "com.azure.cosmos.implementation.guava25.base.CharMatcher.matches(char)"
- "com.azure.cosmos.implementation.guava25.base.CharMatcher.matchesAllOf(java.lang.CharSequence)"
- "com.azure.cosmos.implementation.guava25.base.CharMatcher.matchesAnyOf(java.lang.CharSequence)"
- "com.azure.cosmos.implementation.guava25.base.CharMatcher.matchesNoneOf(java.lang.CharSequence)"
- "com.azure.cosmos.implementation.guava25.base.CharMatcher.negate()"
- "com.azure.cosmos.implementation.guava25.base.CharMatcher.none()"
- "com.azure.cosmos.implementation.guava25.base.CharMatcher.noneOf(java.lang.CharSequence)"
- "com.azure.cosmos.implementation.guava25.base.CharMatcher.or(com.azure.cosmos.implementation.guava25.base.CharMatcher)"
- "com.azure.cosmos.implementation.guava25.base.CharMatcher.precomputed()"
- "com.azure.cosmos.implementation.guava25.base.CharMatcher.removeFrom(java.lang.CharSequence)"
- "com.azure.cosmos.implementation.guava25.base.CharMatcher.replaceFrom(java.lang.CharSequence,char)"
- "com.azure.cosmos.implementation.guava25.base.CharMatcher.replaceFrom(java.lang.CharSequence,java.lang.CharSequence)"
- "com.azure.cosmos.implementation.guava25.base.CharMatcher.retainFrom(java.lang.CharSequence)"
- "com.azure.cosmos.implementation.guava25.base.CharMatcher.singleWidth()"
- "com.azure.cosmos.implementation.guava25.base.CharMatcher.toString()"
- "com.azure.cosmos.implementation.guava25.base.CharMatcher.trimAndCollapseFrom(java.lang.CharSequence,char)"
- "com.azure.cosmos.implementation.guava25.base.CharMatcher.trimFrom(java.lang.CharSequence)"
- "com.azure.cosmos.implementation.guava25.base.CharMatcher.trimLeadingFrom(java.lang.CharSequence)"
- "com.azure.cosmos.implementation.guava25.base.CharMatcher.trimTrailingFrom(java.lang.CharSequence)"
- "com.azure.cosmos.implementation.guava25.base.CharMatcher.whitespace()"
type: "class"
implements:
- "<xref href=\"com.azure.cosmos.implementation.guava25.base.Predicate?alt=com.azure.cosmos.implementation.guava25.base.Predicate&text=Predicate\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Character?alt=java.lang.Character&text=Character\" data-throw-if-not-resolved=\"False\" />&gt;"
metadata: {}
package: "com.azure.cosmos.implementation.guava25.base"
artifact: com.azure:azure-cosmos:4.4.0-beta.1
