### YamlMime:JavaMember
uid: "com.fasterxml.jackson.core.JsonFactory._createParser*"
fullName: "com.fasterxml.jackson.core.JsonFactory._createParser"
name: "_createParser"
nameWithType: "JsonFactory._createParser"
members:
- uid: "com.fasterxml.jackson.core.JsonFactory._createParser(byte[],int,int,com.fasterxml.jackson.core.io.IOContext)"
  fullName: "com.fasterxml.jackson.core.JsonFactory._createParser(byte[] data, int offset, int len, IOContext ctxt)"
  name: "_createParser(byte[] data, int offset, int len, IOContext ctxt)"
  nameWithType: "JsonFactory._createParser(byte[] data, int offset, int len, IOContext ctxt)"
  summary: "Overridable factory method that actually instantiates parser using given <xref uid=\"java.io.Reader\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Reader\"></xref> object for reading content passed as raw byte array.\n\nThis method is specifically designed to remain compatible between minor versions so that sub-classes can count on it being called as expected. That is, it is part of official interface from sub-class perspective, although not a public method available to users of factory implementations."
  parameters:
  - description: "Buffer that contains content to parse"
    name: "data"
    type: "<xref href=\"byte?alt=byte&text=byte\" data-throw-if-not-resolved=\"False\" />[]"
  - description: "Offset to the first character of data to parse"
    name: "offset"
    type: "<xref href=\"int?alt=int&text=int\" data-throw-if-not-resolved=\"False\" />"
  - description: "Number of characters within buffer to parse"
    name: "len"
    type: "<xref href=\"int?alt=int&text=int\" data-throw-if-not-resolved=\"False\" />"
  - description: "I/O context to use for parsing"
    name: "ctxt"
    type: "<xref href=\"com.fasterxml.jackson.core.io.IOContext?alt=com.fasterxml.jackson.core.io.IOContext&text=IOContext\" data-throw-if-not-resolved=\"False\" />"
  syntax: "protected JsonParser _createParser(byte[] data, int offset, int len, IOContext ctxt)"
  exceptions:
  - description: "if parser initialization fails due to I/O (read) problem"
    type: "<xref href=\"java.io.IOException?alt=java.io.IOException&text=IOException\" data-throw-if-not-resolved=\"False\" />"
  returns:
    description: "Actual parser to use"
    type: "<xref href=\"com.fasterxml.jackson.core.JsonParser?alt=com.fasterxml.jackson.core.JsonParser&text=JsonParser\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.fasterxml.jackson.core.JsonFactory._createParser(char[],int,int,com.fasterxml.jackson.core.io.IOContext,boolean)"
  fullName: "com.fasterxml.jackson.core.JsonFactory._createParser(char[] data, int offset, int len, IOContext ctxt, boolean recyclable)"
  name: "_createParser(char[] data, int offset, int len, IOContext ctxt, boolean recyclable)"
  nameWithType: "JsonFactory._createParser(char[] data, int offset, int len, IOContext ctxt, boolean recyclable)"
  summary: "Overridable factory method that actually instantiates parser using given `char[]` object for accessing content."
  parameters:
  - description: "Buffer that contains content to parse"
    name: "data"
    type: "<xref href=\"char?alt=char&text=char\" data-throw-if-not-resolved=\"False\" />[]"
  - description: "Offset to the first character of data to parse"
    name: "offset"
    type: "<xref href=\"int?alt=int&text=int\" data-throw-if-not-resolved=\"False\" />"
  - description: "Number of characters within buffer to parse"
    name: "len"
    type: "<xref href=\"int?alt=int&text=int\" data-throw-if-not-resolved=\"False\" />"
  - description: "I/O context to use for parsing"
    name: "ctxt"
    type: "<xref href=\"com.fasterxml.jackson.core.io.IOContext?alt=com.fasterxml.jackson.core.io.IOContext&text=IOContext\" data-throw-if-not-resolved=\"False\" />"
  - description: "Whether input buffer is recycled by the factory"
    name: "recyclable"
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
  syntax: "protected JsonParser _createParser(char[] data, int offset, int len, IOContext ctxt, boolean recyclable)"
  exceptions:
  - description: "if parser initialization fails due to I/O (read) problem"
    type: "<xref href=\"java.io.IOException?alt=java.io.IOException&text=IOException\" data-throw-if-not-resolved=\"False\" />"
  returns:
    description: "Actual parser to use"
    type: "<xref href=\"com.fasterxml.jackson.core.JsonParser?alt=com.fasterxml.jackson.core.JsonParser&text=JsonParser\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.fasterxml.jackson.core.JsonFactory._createParser(java.io.DataInput,com.fasterxml.jackson.core.io.IOContext)"
  fullName: "com.fasterxml.jackson.core.JsonFactory._createParser(DataInput input, IOContext ctxt)"
  name: "_createParser(DataInput input, IOContext ctxt)"
  nameWithType: "JsonFactory._createParser(DataInput input, IOContext ctxt)"
  summary: "Optional factory method, expected to be overridden"
  parameters:
  - description: "DataInput to use for reading content to parse"
    name: "input"
    type: "<xref href=\"java.io.DataInput?alt=java.io.DataInput&text=DataInput\" data-throw-if-not-resolved=\"False\" />"
  - description: "I/O context to use for parsing"
    name: "ctxt"
    type: "<xref href=\"com.fasterxml.jackson.core.io.IOContext?alt=com.fasterxml.jackson.core.io.IOContext&text=IOContext\" data-throw-if-not-resolved=\"False\" />"
  syntax: "protected JsonParser _createParser(DataInput input, IOContext ctxt)"
  exceptions:
  - description: "if parser initialization fails due to I/O (read) problem"
    type: "<xref href=\"java.io.IOException?alt=java.io.IOException&text=IOException\" data-throw-if-not-resolved=\"False\" />"
  returns:
    description: "Actual parser to use"
    type: "<xref href=\"com.fasterxml.jackson.core.JsonParser?alt=com.fasterxml.jackson.core.JsonParser&text=JsonParser\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.fasterxml.jackson.core.JsonFactory._createParser(java.io.InputStream,com.fasterxml.jackson.core.io.IOContext)"
  fullName: "com.fasterxml.jackson.core.JsonFactory._createParser(InputStream in, IOContext ctxt)"
  name: "_createParser(InputStream in, IOContext ctxt)"
  nameWithType: "JsonFactory._createParser(InputStream in, IOContext ctxt)"
  summary: "Overridable factory method that actually instantiates desired parser given <xref uid=\"java.io.InputStream\" data-throw-if-not-resolved=\"false\" data-raw-source=\"InputStream\"></xref> and context object.\n\nThis method is specifically designed to remain compatible between minor versions so that sub-classes can count on it being called as expected. That is, it is part of official interface from sub-class perspective, although not a public method available to users of factory implementations."
  parameters:
  - description: "InputStream to use for reading content to parse"
    name: "in"
    type: "<xref href=\"java.io.InputStream?alt=java.io.InputStream&text=InputStream\" data-throw-if-not-resolved=\"False\" />"
  - description: "I/O context to use for parsing"
    name: "ctxt"
    type: "<xref href=\"com.fasterxml.jackson.core.io.IOContext?alt=com.fasterxml.jackson.core.io.IOContext&text=IOContext\" data-throw-if-not-resolved=\"False\" />"
  syntax: "protected JsonParser _createParser(InputStream in, IOContext ctxt)"
  exceptions:
  - description: "if parser initialization fails due to I/O (read) problem"
    type: "<xref href=\"java.io.IOException?alt=java.io.IOException&text=IOException\" data-throw-if-not-resolved=\"False\" />"
  returns:
    description: "Parser constructed"
    type: "<xref href=\"com.fasterxml.jackson.core.JsonParser?alt=com.fasterxml.jackson.core.JsonParser&text=JsonParser\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.fasterxml.jackson.core.JsonFactory._createParser(java.io.Reader,com.fasterxml.jackson.core.io.IOContext)"
  fullName: "com.fasterxml.jackson.core.JsonFactory._createParser(Reader r, IOContext ctxt)"
  name: "_createParser(Reader r, IOContext ctxt)"
  nameWithType: "JsonFactory._createParser(Reader r, IOContext ctxt)"
  summary: "Overridable factory method that actually instantiates parser using given <xref uid=\"java.io.Reader\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Reader\"></xref> object for reading content.\n\nThis method is specifically designed to remain compatible between minor versions so that sub-classes can count on it being called as expected. That is, it is part of official interface from sub-class perspective, although not a public method available to users of factory implementations."
  parameters:
  - description: "Reader to use for reading content to parse"
    name: "r"
    type: "<xref href=\"java.io.Reader?alt=java.io.Reader&text=Reader\" data-throw-if-not-resolved=\"False\" />"
  - description: "I/O context to use for parsing"
    name: "ctxt"
    type: "<xref href=\"com.fasterxml.jackson.core.io.IOContext?alt=com.fasterxml.jackson.core.io.IOContext&text=IOContext\" data-throw-if-not-resolved=\"False\" />"
  syntax: "protected JsonParser _createParser(Reader r, IOContext ctxt)"
  exceptions:
  - description: "if parser initialization fails due to I/O (read) problem"
    type: "<xref href=\"java.io.IOException?alt=java.io.IOException&text=IOException\" data-throw-if-not-resolved=\"False\" />"
  returns:
    description: "Actual parser to use"
    type: "<xref href=\"com.fasterxml.jackson.core.JsonParser?alt=com.fasterxml.jackson.core.JsonParser&text=JsonParser\" data-throw-if-not-resolved=\"False\" />"
type: "method"
metadata: {}
package: "com.fasterxml.jackson.core"
artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.5
