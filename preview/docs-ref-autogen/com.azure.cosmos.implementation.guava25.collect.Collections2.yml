### YamlMime:ManagedReference
items:
- uid: com.azure.cosmos.implementation.guava25.collect.Collections2
  id: Collections2
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect
  children:
  - com.azure.cosmos.implementation.guava25.collect.Collections2.<E>filter(java.util.Collection<E>,com.azure.cosmos.implementation.guava25.base.Predicate<? super E>)
  - com.azure.cosmos.implementation.guava25.collect.Collections2.<E>orderedPermutations(java.lang.Iterable<E>)
  - com.azure.cosmos.implementation.guava25.collect.Collections2.<E>orderedPermutations(java.lang.Iterable<E>,java.util.Comparator<? super E>)
  - com.azure.cosmos.implementation.guava25.collect.Collections2.<E>permutations(java.util.Collection<E>)
  - com.azure.cosmos.implementation.guava25.collect.Collections2.<F,T>transform(java.util.Collection<F>,com.azure.cosmos.implementation.guava25.base.Function<? super F,T>)
  langs:
  - java
  name: Collections2
  nameWithType: Collections2
  fullName: com.azure.cosmos.implementation.guava25.collect.Collections2
  type: Class
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Provides static methods for working with `Collection` instances.


    **Java 8 users:** several common uses for this class are now more comprehensively addressed by the new <xref uid="java.util.stream.Stream" data-throw-if-not-resolved="false">java.util.stream.Stream</xref> library. Read the method documentation below for comparisons. These methods are not being deprecated, but we gently encourage you to migrate to streams.
  syntax:
    content: public final class Collections2
  inheritance:
  - java.lang.Object
  inheritedMembers:
  - java.lang.Object.clone()
  - java.lang.Object.equals(java.lang.Object)
  - java.lang.Object.finalize()
  - java.lang.Object.getClass()
  - java.lang.Object.hashCode()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.toString()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
- uid: com.azure.cosmos.implementation.guava25.collect.Collections2.<E>filter(java.util.Collection<E>,com.azure.cosmos.implementation.guava25.base.Predicate<? super E>)
  id: <E>filter(java.util.Collection<E>,com.azure.cosmos.implementation.guava25.base.Predicate<? super E>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.Collections2
  langs:
  - java
  name: <E>filter(Collection<E> unfiltered, Predicate<? super E> predicate)
  nameWithType: Collections2.<E>filter(Collection<E> unfiltered, Predicate<? super E> predicate)
  fullName: com.azure.cosmos.implementation.guava25.collect.Collections2.<E>filter(Collection<E> unfiltered, Predicate<? super E> predicate)
  overload: com.azure.cosmos.implementation.guava25.collect.Collections2.filter*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Returns the elements of `unfiltered` that satisfy a predicate. The returned collection is a live view of `unfiltered`; changes to one affect the other.


    The resulting collection's iterator does not support `remove()`, but all other collection methods are supported. When given an element that doesn't satisfy the predicate, the collection's `add()` and `addAll()` methods throw an <xref uid="" data-throw-if-not-resolved="false">IllegalArgumentException</xref>. When methods such as `removeAll()` and `clear()` are called on the filtered collection, only elements that satisfy the filter will be removed from the underlying collection.


    The returned collection isn't threadsafe or serializable, even if `unfiltered` is.


    Many of the filtered collection's methods, such as `size()`, iterate across every element in the underlying collection and determine which elements satisfy the filter. When a live view is *not* needed, it may be faster to copy `Iterables.filter(unfiltered, predicate)` and use the copy.


    **Warning:** `predicate` must be *consistent with equals*, as documented at <xref uid="com.azure.cosmos.implementation.guava25.base.Predicate.apply" data-throw-if-not-resolved="false">Predicate#apply</xref>. Do not provide a predicate such as `Predicates.instanceOf(ArrayList.class)`, which is inconsistent with equals. (See <xref uid="com.azure.cosmos.implementation.guava25.collect.Iterables.&lt;T&gt;filter(java.lang.Iterable&lt;?&gt;,java.lang.Class&lt;T&gt;)" data-throw-if-not-resolved="false">Iterables#filter(Iterable, Class)</xref> for related functionality.)


    **`Stream` equivalent:** <xref uid="java.util.stream.Stream.filter" data-throw-if-not-resolved="false">Stream.filter</xref>.
  syntax:
    content: public static Collection<E> <E>filter(Collection<E> unfiltered, Predicate<? super E> predicate)
    parameters:
    - id: unfiltered
      type: java.util.Collection<E>
    - id: predicate
      type: com.azure.cosmos.implementation.guava25.base.Predicate<? super E>
    return:
      type: java.util.Collection<E>
- uid: com.azure.cosmos.implementation.guava25.collect.Collections2.<E>orderedPermutations(java.lang.Iterable<E>)
  id: <E>orderedPermutations(java.lang.Iterable<E>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.Collections2
  langs:
  - java
  name: <E>orderedPermutations(Iterable<E> elements)
  nameWithType: Collections2.<E>orderedPermutations(Iterable<E> elements)
  fullName: com.azure.cosmos.implementation.guava25.collect.Collections2.<E>orderedPermutations(Iterable<E> elements)
  overload: com.azure.cosmos.implementation.guava25.collect.Collections2.orderedPermutations*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Returns a <xref uid="java.util.Collection" data-throw-if-not-resolved="false">Collection</xref> of all the permutations of the specified <xref uid="java.lang.Iterable" data-throw-if-not-resolved="false">Iterable</xref>.


    *Notes:* This is an implementation of the algorithm for Lexicographical Permutations Generation, described in Knuth's "The Art of Computer Programming", Volume 4, Chapter 7, Section 7.2.1.2. The iteration order follows the lexicographical order. This means that the first permutation will be in ascending order, and the last will be in descending order.


    Duplicate elements are considered equal. For example, the list \[1, 1\] will have only one permutation, instead of two. This is why the elements have to implement <xref uid="java.lang.Comparable" data-throw-if-not-resolved="false">Comparable</xref>.


    An empty iterable has only one permutation, which is an empty list.


    This method is equivalent to `Collections2.orderedPermutations(list, Ordering.natural())`.
  syntax:
    content: public static Collection<List<E>> <E>orderedPermutations(Iterable<E> elements)
    parameters:
    - id: elements
      type: java.lang.Iterable<E>
      description: the original iterable whose elements have to be permuted.
    return:
      type: java.util.Collection<java.util.List<E>>
      description: >-
        an immutable <xref uid="java.util.Collection" data-throw-if-not-resolved="false">Collection</xref> containing all the different permutations of the
             original iterable.
- uid: com.azure.cosmos.implementation.guava25.collect.Collections2.<E>orderedPermutations(java.lang.Iterable<E>,java.util.Comparator<? super E>)
  id: <E>orderedPermutations(java.lang.Iterable<E>,java.util.Comparator<? super E>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.Collections2
  langs:
  - java
  name: <E>orderedPermutations(Iterable<E> elements, Comparator<? super E> comparator)
  nameWithType: Collections2.<E>orderedPermutations(Iterable<E> elements, Comparator<? super E> comparator)
  fullName: com.azure.cosmos.implementation.guava25.collect.Collections2.<E>orderedPermutations(Iterable<E> elements, Comparator<? super E> comparator)
  overload: com.azure.cosmos.implementation.guava25.collect.Collections2.orderedPermutations*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Returns a <xref uid="java.util.Collection" data-throw-if-not-resolved="false">Collection</xref> of all the permutations of the specified <xref uid="java.lang.Iterable" data-throw-if-not-resolved="false">Iterable</xref> using the specified <xref uid="java.util.Comparator" data-throw-if-not-resolved="false">Comparator</xref> for establishing the lexicographical ordering.


    Examples:


    ```java

    for (List perm : orderedPermutations(asList("b", "c", "a"))) {
       println(perm);
     }
     // -> ["a", "b", "c"]
     // -> ["a", "c", "b"]
     // -> ["b", "a", "c"]
     // -> ["b", "c", "a"]
     // -> ["c", "a", "b"]
     // -> ["c", "b", "a"]

     for (List perm : orderedPermutations(asList(1, 2, 2, 1))) {
       println(perm);
     }
     // -> [1, 1, 2, 2]
     // -> [1, 2, 1, 2]
     // -> [1, 2, 2, 1]
     // -> [2, 1, 1, 2]
     // -> [2, 1, 2, 1]
     // -> [2, 2, 1, 1]
    ```


    *Notes:* This is an implementation of the algorithm for Lexicographical Permutations Generation, described in Knuth's "The Art of Computer Programming", Volume 4, Chapter 7, Section 7.2.1.2. The iteration order follows the lexicographical order. This means that the first permutation will be in ascending order, and the last will be in descending order.


    Elements that compare equal are considered equal and no new permutations are created by swapping them.


    An empty iterable has only one permutation, which is an empty list.
  syntax:
    content: public static Collection<List<E>> <E>orderedPermutations(Iterable<E> elements, Comparator<? super E> comparator)
    parameters:
    - id: elements
      type: java.lang.Iterable<E>
      description: the original iterable whose elements have to be permuted.
    - id: comparator
      type: java.util.Comparator<? super E>
      description: a comparator for the iterable's elements.
    return:
      type: java.util.Collection<java.util.List<E>>
      description: >-
        an immutable <xref uid="java.util.Collection" data-throw-if-not-resolved="false">Collection</xref> containing all the different permutations of the
             original iterable.
- uid: com.azure.cosmos.implementation.guava25.collect.Collections2.<E>permutations(java.util.Collection<E>)
  id: <E>permutations(java.util.Collection<E>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.Collections2
  langs:
  - java
  name: <E>permutations(Collection<E> elements)
  nameWithType: Collections2.<E>permutations(Collection<E> elements)
  fullName: com.azure.cosmos.implementation.guava25.collect.Collections2.<E>permutations(Collection<E> elements)
  overload: com.azure.cosmos.implementation.guava25.collect.Collections2.permutations*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Returns a <xref uid="java.util.Collection" data-throw-if-not-resolved="false">Collection</xref> of all the permutations of the specified <xref uid="java.util.Collection" data-throw-if-not-resolved="false">Collection</xref>.


    *Notes:* This is an implementation of the Plain Changes algorithm for permutations generation, described in Knuth's "The Art of Computer Programming", Volume 4, Chapter 7, Section 7.2.1.2.


    If the input list contains equal elements, some of the generated permutations will be equal.


    An empty collection has only one permutation, which is an empty list.
  syntax:
    content: public static Collection<List<E>> <E>permutations(Collection<E> elements)
    parameters:
    - id: elements
      type: java.util.Collection<E>
      description: the original collection whose elements have to be permuted.
    return:
      type: java.util.Collection<java.util.List<E>>
      description: >-
        an immutable <xref uid="java.util.Collection" data-throw-if-not-resolved="false">Collection</xref> containing all the different permutations of the
             original collection.
- uid: com.azure.cosmos.implementation.guava25.collect.Collections2.<F,T>transform(java.util.Collection<F>,com.azure.cosmos.implementation.guava25.base.Function<? super F,T>)
  id: <F,T>transform(java.util.Collection<F>,com.azure.cosmos.implementation.guava25.base.Function<? super F,T>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.Collections2
  langs:
  - java
  name: <F,T>transform(Collection<F> fromCollection, Function<? super F,T> function)
  nameWithType: Collections2.<F,T>transform(Collection<F> fromCollection, Function<? super F,T> function)
  fullName: com.azure.cosmos.implementation.guava25.collect.Collections2.<F,T>transform(Collection<F> fromCollection, Function<? super F,T> function)
  overload: com.azure.cosmos.implementation.guava25.collect.Collections2.transform*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Returns a collection that applies `function` to each element of `fromCollection`. The returned collection is a live view of `fromCollection`; changes to one affect the other.


    The returned collection's `add()` and `addAll()` methods throw an <xref uid="java.lang.UnsupportedOperationException" data-throw-if-not-resolved="false">UnsupportedOperationException</xref>. All other collection methods are supported, as long as `fromCollection` supports them.


    The returned collection isn't threadsafe or serializable, even if `fromCollection` is.


    When a live view is *not* needed, it may be faster to copy the transformed collection and use the copy.


    If the input `Collection` is known to be a `List`, consider <xref uid="com.azure.cosmos.implementation.Lists.transform" data-throw-if-not-resolved="false">Lists#transform</xref>. If only an `Iterable` is available, use <xref uid="com.azure.cosmos.implementation.guava25.collect.Iterables.transform" data-throw-if-not-resolved="false">Iterables#transform</xref>.


    **`Stream` equivalent:** <xref uid="java.util.stream.Stream.map" data-throw-if-not-resolved="false">Stream.map</xref>.
  syntax:
    content: public static Collection<T> <F,T>transform(Collection<F> fromCollection, Function<? super F,T> function)
    parameters:
    - id: fromCollection
      type: java.util.Collection<F>
    - id: function
      type: com.azure.cosmos.implementation.guava25.base.Function<? super F,T>
    return:
      type: java.util.Collection<T>
- uid: com.azure.cosmos.implementation.guava25.collect.Collections2.Collections2()
  id: Collections2()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.Collections2
  langs:
  - java
  name: Collections2()
  nameWithType: Collections2.Collections2()
  fullName: com.azure.cosmos.implementation.guava25.collect.Collections2.Collections2()
  overload: com.azure.cosmos.implementation.guava25.collect.Collections2.Collections2*
  type: Constructor
  package: com.azure.cosmos.implementation.guava25.collect
  syntax:
    content: private Collections2()
references:
- uid: com.azure.cosmos.implementation.guava25.collect.Collections2.Collections2*
  name: Collections2
  nameWithType: Collections2.Collections2
  fullName: com.azure.cosmos.implementation.guava25.collect.Collections2.Collections2
  package: com.azure.cosmos.implementation.guava25.collect
- uid: java.util.Collection<E>
  spec.java:
  - uid: java.util.Collection
    name: Collection
    fullName: java.util.Collection
  - name: <
    fullName: <
  - uid: E
    name: E
    fullName: E
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.base.Predicate<? super E>
  spec.java:
  - uid: com.azure.cosmos.implementation.guava25.base.Predicate
    name: Predicate
    fullName: com.azure.cosmos.implementation.guava25.base.Predicate
  - name: <
    fullName: <
  - uid: '? super E'
    name: '? super E'
    fullName: '? super E'
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.Collections2.filter*
  name: <E>filter
  nameWithType: Collections2.<E>filter
  fullName: com.azure.cosmos.implementation.guava25.collect.Collections2.<E>filter
  package: com.azure.cosmos.implementation.guava25.collect
- uid: java.util.Collection<F>
  spec.java:
  - uid: java.util.Collection
    name: Collection
    fullName: java.util.Collection
  - name: <
    fullName: <
  - uid: F
    name: F
    fullName: F
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.base.Function<? super F,T>
  spec.java:
  - uid: com.azure.cosmos.implementation.guava25.base.Function
    name: Function
    fullName: com.azure.cosmos.implementation.guava25.base.Function
  - name: <
    fullName: <
  - uid: '? super F'
    name: '? super F'
    fullName: '? super F'
  - name: ','
    fullName: ','
  - uid: T
    name: T
    fullName: T
  - name: '>'
    fullName: '>'
- uid: java.util.Collection<T>
  spec.java:
  - uid: java.util.Collection
    name: Collection
    fullName: java.util.Collection
  - name: <
    fullName: <
  - uid: T
    name: T
    fullName: T
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.Collections2.transform*
  name: <F,T>transform
  nameWithType: Collections2.<F,T>transform
  fullName: com.azure.cosmos.implementation.guava25.collect.Collections2.<F,T>transform
  package: com.azure.cosmos.implementation.guava25.collect
- uid: java.lang.Iterable<E>
  spec.java:
  - uid: java.lang.Iterable
    name: Iterable
    fullName: java.lang.Iterable
  - name: <
    fullName: <
  - uid: E
    name: E
    fullName: E
  - name: '>'
    fullName: '>'
- uid: java.util.Collection<java.util.List<E>>
  spec.java:
  - uid: java.util.Collection
    name: Collection
    fullName: java.util.Collection
  - name: <
    fullName: <
  - uid: java.util.List
    name: List
    fullName: java.util.List
  - name: <
    fullName: <
  - uid: E
    name: E
    fullName: E
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.Collections2.orderedPermutations*
  name: <E>orderedPermutations
  nameWithType: Collections2.<E>orderedPermutations
  fullName: com.azure.cosmos.implementation.guava25.collect.Collections2.<E>orderedPermutations
  package: com.azure.cosmos.implementation.guava25.collect
- uid: java.util.Comparator<? super E>
  spec.java:
  - uid: java.util.Comparator
    name: Comparator
    fullName: java.util.Comparator
  - name: <
    fullName: <
  - uid: '? super E'
    name: '? super E'
    fullName: '? super E'
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.Collections2.permutations*
  name: <E>permutations
  nameWithType: Collections2.<E>permutations
  fullName: com.azure.cosmos.implementation.guava25.collect.Collections2.<E>permutations
  package: com.azure.cosmos.implementation.guava25.collect
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: java.lang.Object.finalize()
  name: Object.finalize()
  nameWithType: Object.finalize()
  fullName: java.lang.Object.finalize()
- uid: java.lang.Object.clone()
  name: Object.clone()
  nameWithType: Object.clone()
  fullName: java.lang.Object.clone()
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: java.lang.Object.equals(java.lang.Object)
  name: Object.equals(Object)
  nameWithType: Object.equals(Object)
  fullName: java.lang.Object.equals(java.lang.Object)
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.lang.Object.hashCode()
  name: Object.hashCode()
  nameWithType: Object.hashCode()
  fullName: java.lang.Object.hashCode()
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: java.lang.Object.toString()
  name: Object.toString()
  nameWithType: Object.toString()
  fullName: java.lang.Object.toString()
- uid: E
  name: E
  nameWithType: E
  fullName: E
- uid: java.util.Collection
  name: Collection
  nameWithType: Collection
  fullName: java.util.Collection
- uid: '? super E'
  name: '? super E'
  nameWithType: '? super E'
  fullName: '? super E'
- uid: com.azure.cosmos.implementation.guava25.base.Predicate
  name: Predicate
  nameWithType: Predicate
  fullName: com.azure.cosmos.implementation.guava25.base.Predicate
- uid: F
  name: F
  nameWithType: F
  fullName: F
- uid: com.azure.cosmos.implementation.guava25.base.Function
  name: Function
  nameWithType: Function
  fullName: com.azure.cosmos.implementation.guava25.base.Function
- uid: '? super F,T'
  name: '? super F,T'
  nameWithType: '? super F,T'
  fullName: '? super F,T'
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: java.lang.Iterable
  name: Iterable
  nameWithType: Iterable
  fullName: java.lang.Iterable
- uid: java.util.List
  name: List
  nameWithType: List
  fullName: java.util.List
- uid: java.util.Comparator
  name: Comparator
  nameWithType: Comparator
  fullName: java.util.Comparator
