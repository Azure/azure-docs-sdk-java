### YamlMime:JavaMember
uid: "com.fasterxml.jackson.databind.ser.impl.SimpleBeanPropertyFilter.depositSchemaProperty*"
fullName: "com.fasterxml.jackson.databind.ser.impl.SimpleBeanPropertyFilter.depositSchemaProperty"
name: "depositSchemaProperty"
nameWithType: "SimpleBeanPropertyFilter.depositSchemaProperty"
members:
- uid: "com.fasterxml.jackson.databind.ser.impl.SimpleBeanPropertyFilter.depositSchemaProperty(com.fasterxml.jackson.databind.ser.BeanPropertyWriter,com.fasterxml.jackson.databind.jsonFormatVisitors.JsonObjectFormatVisitor,com.fasterxml.jackson.databind.SerializerProvider)"
  fullName: "com.fasterxml.jackson.databind.ser.impl.SimpleBeanPropertyFilter.depositSchemaProperty(BeanPropertyWriter writer, jsonFormatVisitors.JsonObjectFormatVisitor objectVisitor, SerializerProvider provider)"
  name: "depositSchemaProperty(BeanPropertyWriter writer, jsonFormatVisitors.JsonObjectFormatVisitor objectVisitor, SerializerProvider provider)"
  nameWithType: "SimpleBeanPropertyFilter.depositSchemaProperty(BeanPropertyWriter writer, jsonFormatVisitors.JsonObjectFormatVisitor objectVisitor, SerializerProvider provider)"
  summary: "Method called by <xref uid=\"com.fasterxml.jackson.databind.ser.BeanSerializer\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BeanSerializer\"></xref> to let the filter determine whether, and in what form the given property exist within the parent, or root, schema. Filters can omit adding the property to the node, or choose the form of the schema value for the property\n\nTypical implementation is something like:\n\n```java\nif (include(writer)) {\n      writer.depositSchemaProperty(objectVisitor, provider);\n }\n```"
  parameters:
  - name: "writer"
    type: "<xref href=\"com.fasterxml.jackson.databind.ser.BeanPropertyWriter?alt=com.fasterxml.jackson.databind.ser.BeanPropertyWriter&text=BeanPropertyWriter\" data-throw-if-not-resolved=\"False\" />"
  - name: "objectVisitor"
    type: "<xref href=\"com.fasterxml.jackson.databind.jsonFormatVisitors.JsonObjectFormatVisitor?alt=com.fasterxml.jackson.databind.jsonFormatVisitors.JsonObjectFormatVisitor&text=JsonObjectFormatVisitor\" data-throw-if-not-resolved=\"False\" />"
  - name: "provider"
    type: "<xref href=\"com.fasterxml.jackson.databind.SerializerProvider?alt=com.fasterxml.jackson.databind.SerializerProvider&text=SerializerProvider\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public void depositSchemaProperty(BeanPropertyWriter writer, jsonFormatVisitors.JsonObjectFormatVisitor objectVisitor, SerializerProvider provider)"
  exceptions:
  - type: "<xref href=\"com.fasterxml.jackson.databind.JsonMappingException?alt=com.fasterxml.jackson.databind.JsonMappingException&text=JsonMappingException\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.fasterxml.jackson.databind.ser.impl.SimpleBeanPropertyFilter.depositSchemaProperty(com.fasterxml.jackson.databind.ser.BeanPropertyWriter,com.fasterxml.jackson.databind.node.ObjectNode,com.fasterxml.jackson.databind.SerializerProvider)"
  fullName: "com.fasterxml.jackson.databind.ser.impl.SimpleBeanPropertyFilter.depositSchemaProperty(BeanPropertyWriter writer, ObjectNode propertiesNode, SerializerProvider provider)"
  name: "depositSchemaProperty(BeanPropertyWriter writer, ObjectNode propertiesNode, SerializerProvider provider)"
  nameWithType: "SimpleBeanPropertyFilter.depositSchemaProperty(BeanPropertyWriter writer, ObjectNode propertiesNode, SerializerProvider provider)"
  summary: "Method called by <xref uid=\"com.fasterxml.jackson.databind.ser.BeanSerializer\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BeanSerializer\"></xref> to let the filter determine whether, and in what form the given property exist within the parent, or root, schema. Filters can omit adding the property to the node, or choose the form of the schema value for the property.\n\nTypical implementation is something like:\n\n```java\nif (include(writer)) {\n      writer.depositSchemaProperty(propertiesNode, provider);\n }\n```"
  parameters:
  - name: "writer"
    type: "<xref href=\"com.fasterxml.jackson.databind.ser.BeanPropertyWriter?alt=com.fasterxml.jackson.databind.ser.BeanPropertyWriter&text=BeanPropertyWriter\" data-throw-if-not-resolved=\"False\" />"
  - name: "propertiesNode"
    type: "<xref href=\"com.fasterxml.jackson.databind.node.ObjectNode?alt=com.fasterxml.jackson.databind.node.ObjectNode&text=ObjectNode\" data-throw-if-not-resolved=\"False\" />"
  - name: "provider"
    type: "<xref href=\"com.fasterxml.jackson.databind.SerializerProvider?alt=com.fasterxml.jackson.databind.SerializerProvider&text=SerializerProvider\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public void depositSchemaProperty(BeanPropertyWriter writer, ObjectNode propertiesNode, SerializerProvider provider)"
  exceptions:
  - type: "<xref href=\"com.fasterxml.jackson.databind.JsonMappingException?alt=com.fasterxml.jackson.databind.JsonMappingException&text=JsonMappingException\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.fasterxml.jackson.databind.ser.impl.SimpleBeanPropertyFilter.depositSchemaProperty(com.fasterxml.jackson.databind.ser.PropertyWriter,com.fasterxml.jackson.databind.jsonFormatVisitors.JsonObjectFormatVisitor,com.fasterxml.jackson.databind.SerializerProvider)"
  fullName: "com.fasterxml.jackson.databind.ser.impl.SimpleBeanPropertyFilter.depositSchemaProperty(PropertyWriter writer, jsonFormatVisitors.JsonObjectFormatVisitor objectVisitor, SerializerProvider provider)"
  name: "depositSchemaProperty(PropertyWriter writer, jsonFormatVisitors.JsonObjectFormatVisitor objectVisitor, SerializerProvider provider)"
  nameWithType: "SimpleBeanPropertyFilter.depositSchemaProperty(PropertyWriter writer, jsonFormatVisitors.JsonObjectFormatVisitor objectVisitor, SerializerProvider provider)"
  summary: "Method called by <xref uid=\"com.fasterxml.jackson.databind.ser.BeanSerializer\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BeanSerializer\"></xref> to let the filter determine whether, and in what form the given property exist within the parent, or root, schema. Filters can omit adding the property to the node, or choose the form of the schema value for the property\n\nTypical implementation is something like:\n\n```java\nif (include(writer)) {\n      writer.depositSchemaProperty(objectVisitor, provider);\n }\n```"
  parameters:
  - name: "writer"
    type: "<xref href=\"com.fasterxml.jackson.databind.ser.PropertyWriter?alt=com.fasterxml.jackson.databind.ser.PropertyWriter&text=PropertyWriter\" data-throw-if-not-resolved=\"False\" />"
  - name: "objectVisitor"
    type: "<xref href=\"com.fasterxml.jackson.databind.jsonFormatVisitors.JsonObjectFormatVisitor?alt=com.fasterxml.jackson.databind.jsonFormatVisitors.JsonObjectFormatVisitor&text=JsonObjectFormatVisitor\" data-throw-if-not-resolved=\"False\" />"
  - name: "provider"
    type: "<xref href=\"com.fasterxml.jackson.databind.SerializerProvider?alt=com.fasterxml.jackson.databind.SerializerProvider&text=SerializerProvider\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public void depositSchemaProperty(PropertyWriter writer, jsonFormatVisitors.JsonObjectFormatVisitor objectVisitor, SerializerProvider provider)"
  exceptions:
  - type: "<xref href=\"com.fasterxml.jackson.databind.JsonMappingException?alt=com.fasterxml.jackson.databind.JsonMappingException&text=JsonMappingException\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.fasterxml.jackson.databind.ser.impl.SimpleBeanPropertyFilter.depositSchemaProperty(com.fasterxml.jackson.databind.ser.PropertyWriter,com.fasterxml.jackson.databind.node.ObjectNode,com.fasterxml.jackson.databind.SerializerProvider)"
  fullName: "com.fasterxml.jackson.databind.ser.impl.SimpleBeanPropertyFilter.depositSchemaProperty(PropertyWriter writer, ObjectNode propertiesNode, SerializerProvider provider)"
  name: "depositSchemaProperty(PropertyWriter writer, ObjectNode propertiesNode, SerializerProvider provider)"
  nameWithType: "SimpleBeanPropertyFilter.depositSchemaProperty(PropertyWriter writer, ObjectNode propertiesNode, SerializerProvider provider)"
  summary: "Method called by <xref uid=\"com.fasterxml.jackson.databind.ser.BeanSerializer\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BeanSerializer\"></xref> to let the filter determine whether, and in what form the given property exist within the parent, or root, schema. Filters can omit adding the property to the node, or choose the form of the schema value for the property.\n\nTypical implementation is something like:\n\n```java\nif (include(writer)) {\n      writer.depositSchemaProperty(propertiesNode, provider);\n }\n```"
  parameters:
  - name: "writer"
    type: "<xref href=\"com.fasterxml.jackson.databind.ser.PropertyWriter?alt=com.fasterxml.jackson.databind.ser.PropertyWriter&text=PropertyWriter\" data-throw-if-not-resolved=\"False\" />"
  - name: "propertiesNode"
    type: "<xref href=\"com.fasterxml.jackson.databind.node.ObjectNode?alt=com.fasterxml.jackson.databind.node.ObjectNode&text=ObjectNode\" data-throw-if-not-resolved=\"False\" />"
  - name: "provider"
    type: "<xref href=\"com.fasterxml.jackson.databind.SerializerProvider?alt=com.fasterxml.jackson.databind.SerializerProvider&text=SerializerProvider\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public void depositSchemaProperty(PropertyWriter writer, ObjectNode propertiesNode, SerializerProvider provider)"
  exceptions:
  - type: "<xref href=\"com.fasterxml.jackson.databind.JsonMappingException?alt=com.fasterxml.jackson.databind.JsonMappingException&text=JsonMappingException\" data-throw-if-not-resolved=\"False\" />"
type: "method"
metadata: {}
package: "com.fasterxml.jackson.databind.ser.impl"
artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
