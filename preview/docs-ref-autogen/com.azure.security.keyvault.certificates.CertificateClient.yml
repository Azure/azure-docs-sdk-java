### YamlMime:JavaType
uid: "com.azure.security.keyvault.certificates.CertificateClient"
fullName: "com.azure.security.keyvault.certificates.CertificateClient"
name: "CertificateClient"
nameWithType: "CertificateClient"
summary: "The Certificate<wbr>Client provides synchronous methods to manage <xref uid=\"com.azure.security.keyvault.certificates.models.KeyVaultCertificate\" data-throw-if-not-resolved=\"false\" data-raw-source=\"certifcates\"></xref> in the Azure Key Vault."
inheritances:
- "<xref href=\"java.lang.Object?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
inheritedMembers:
- "java.lang.Object.clone()"
- "java.lang.Object.equals(java.lang.Object)"
- "java.lang.Object.finalize()"
- "java.lang.Object.getClass()"
- "java.lang.Object.hashCode()"
- "java.lang.Object.notify()"
- "java.lang.Object.notifyAll()"
- "java.lang.Object.toString()"
- "java.lang.Object.wait()"
- "java.lang.Object.wait(long)"
- "java.lang.Object.wait(long,int)"
syntax: "public final class CertificateClient"
methods:
- uid: "com.azure.security.keyvault.certificates.CertificateClient.backupCertificate(java.lang.String)"
  fullName: "com.azure.security.keyvault.certificates.CertificateClient.backupCertificate(String certificateName)"
  name: "backupCertificate(String certificateName)"
  nameWithType: "CertificateClient.backupCertificate(String certificateName)"
  summary: "Requests that a backup of the specified certificate be downloaded to the client."
  parameters:
  - description: "The name of the certificate."
    name: "certificateName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public byte[] backupCertificate(String certificateName)"
  desc: "Requests that a backup of the specified certificate be downloaded to the client. All versions of the certificate will be downloaded. This operation requires the certificates/backup permission.\n\n**Code Samples**\n\nBacks up the certificate from the key vault. Prints out the length of the certificate's backup byte array returned in the response.\n\n```java\nbyte[] certificateBackup = certificateClient.backupCertificate(\"certificateName\");\n System.out.printf(\"Backed up certificate with back up blob length %d%n\", certificateBackup.length);\n```"
  returns:
    description: "The backed up certificate blob."
    type: "<xref href=\"byte?alt=byte&text=byte\" data-throw-if-not-resolved=\"False\" />[]"
- uid: "com.azure.security.keyvault.certificates.CertificateClient.backupCertificateWithResponse(java.lang.String,com.azure.core.util.Context)"
  fullName: "com.azure.security.keyvault.certificates.CertificateClient.backupCertificateWithResponse(String certificateName, Context context)"
  name: "backupCertificateWithResponse(String certificateName, Context context)"
  nameWithType: "CertificateClient.backupCertificateWithResponse(String certificateName, Context context)"
  summary: "Requests that a backup of the specified certificate be downloaded to the client."
  parameters:
  - description: "The certificateName of the certificate."
    name: "certificateName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional context that is passed through the Http pipeline during the service call."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<byte[]> backupCertificateWithResponse(String certificateName, Context context)"
  desc: "Requests that a backup of the specified certificate be downloaded to the client. All versions of the certificate will be downloaded. This operation requires the certificates/backup permission.\n\n**Code Samples**\n\nBacks up the certificate from the key vault. Prints out the length of the certificate's backup byte array returned in the response.\n\n```java\nResponse<byte[]> certificateBackupWithResponse = certificateClient\n     .backupCertificateWithResponse(\"certificateName\", new Context(key1, value1));\n System.out.printf(\"Backed up certificate with back up blob length %d%n\",\n     certificateBackupWithResponse.getValue().length);\n```"
  returns:
    description: "A <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> whose <xref uid=\"com.azure.core.http.rest.Response.getValue*\" data-throw-if-not-resolved=\"false\" data-raw-source=\"value\"></xref> contains the backed up certificate blob."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"byte?alt=byte&text=byte\" data-throw-if-not-resolved=\"False\" />[]&gt;"
- uid: "com.azure.security.keyvault.certificates.CertificateClient.beginCreateCertificate(java.lang.String,com.azure.security.keyvault.certificates.models.CertificatePolicy)"
  fullName: "com.azure.security.keyvault.certificates.CertificateClient.beginCreateCertificate(String certificateName, CertificatePolicy policy)"
  name: "beginCreateCertificate(String certificateName, CertificatePolicy policy)"
  nameWithType: "CertificateClient.beginCreateCertificate(String certificateName, CertificatePolicy policy)"
  summary: "Creates a new certificate."
  parameters:
  - description: "The name of the certificate to be created."
    name: "certificateName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The policy of the certificate to be created."
    name: "policy"
    type: "<xref href=\"com.azure.security.keyvault.certificates.models.CertificatePolicy?alt=com.azure.security.keyvault.certificates.models.CertificatePolicy&text=CertificatePolicy\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public SyncPoller<CertificateOperation,KeyVaultCertificateWithPolicy> beginCreateCertificate(String certificateName, CertificatePolicy policy)"
  desc: "Creates a new certificate. If this is the first version, the certificate resource is created. This operation requires the certificates/create permission.\n\nCreate certificate is a long running operation. It indefinitely waits for the create certificate operation to complete on service side.\n\n**Code Samples**\n\nCreate certificate is a long running operation. The createCertificate indefinitely waits for the operation to complete and returns its last status. The details of the last certificate operation status are printed when a response is received\n\n```java\nCertificatePolicy certPolicy = new CertificatePolicy(\"Self\",\n     \"CN=SelfSignedJavaPkcs12\");\n SyncPoller<CertificateOperation, KeyVaultCertificateWithPolicy> certPoller = certificateClient\n     .beginCreateCertificate(\"certificateName\", certPolicy);\n certPoller.waitUntil(LongRunningOperationStatus.SUCCESSFULLY_COMPLETED);\n KeyVaultCertificate cert = certPoller.getFinalResult();\n System.out.printf(\"Certificate created with name %s%n\", cert.getName());\n```"
  returns:
    description: "A <xref uid=\"com.azure.core.util.polling.SyncPoller\" data-throw-if-not-resolved=\"false\" data-raw-source=\"SyncPoller\"></xref> to poll on the create certificate operation status."
    type: "<xref href=\"com.azure.core.util.polling.SyncPoller?alt=com.azure.core.util.polling.SyncPoller&text=SyncPoller\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.security.keyvault.certificates.models.CertificateOperation?alt=com.azure.security.keyvault.certificates.models.CertificateOperation&text=CertificateOperation\" data-throw-if-not-resolved=\"False\" />,<xref href=\"com.azure.security.keyvault.certificates.models.KeyVaultCertificateWithPolicy?alt=com.azure.security.keyvault.certificates.models.KeyVaultCertificateWithPolicy&text=KeyVaultCertificateWithPolicy\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.security.keyvault.certificates.CertificateClient.beginCreateCertificate(java.lang.String,com.azure.security.keyvault.certificates.models.CertificatePolicy,java.lang.Boolean,java.util.Map<java.lang.String,java.lang.String>)"
  fullName: "com.azure.security.keyvault.certificates.CertificateClient.beginCreateCertificate(String certificateName, CertificatePolicy policy, Boolean isEnabled, Map<String,String> tags)"
  name: "beginCreateCertificate(String certificateName, CertificatePolicy policy, Boolean isEnabled, Map<String,String> tags)"
  nameWithType: "CertificateClient.beginCreateCertificate(String certificateName, CertificatePolicy policy, Boolean isEnabled, Map<String,String> tags)"
  summary: "Creates a new certificate."
  parameters:
  - description: "The name of the certificate to be created."
    name: "certificateName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The policy of the certificate to be created."
    name: "policy"
    type: "<xref href=\"com.azure.security.keyvault.certificates.models.CertificatePolicy?alt=com.azure.security.keyvault.certificates.models.CertificatePolicy&text=CertificatePolicy\" data-throw-if-not-resolved=\"False\" />"
  - description: "The enabled status of the certificate."
    name: "isEnabled"
    type: "<xref href=\"java.lang.Boolean?alt=java.lang.Boolean&text=Boolean\" data-throw-if-not-resolved=\"False\" />"
  - description: "The application specific metadata to set."
    name: "tags"
    type: "<xref href=\"java.util.Map?alt=java.util.Map&text=Map\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />,<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public SyncPoller<CertificateOperation,KeyVaultCertificateWithPolicy> beginCreateCertificate(String certificateName, CertificatePolicy policy, Boolean isEnabled, Map<String,String> tags)"
  desc: "Creates a new certificate. If this is the first version, the certificate resource is created. This operation requires the certificates/create permission.\n\nCreate certificate is a long running operation. It indefinitely waits for the create certificate operation to complete on service side.\n\n**Code Samples**\n\nCreate certificate is a long running operation. The createCertificate indefinitely waits for the operation to complete and returns its last status. The details of the last certificate operation status are printed when a response is received\n\n```java\nCertificatePolicy certificatePolicyPkcsSelf = new CertificatePolicy(\"Self\",\n     \"CN=SelfSignedJavaPkcs12\");\n SyncPoller<CertificateOperation, KeyVaultCertificateWithPolicy> certificateSyncPoller = certificateClient\n     .beginCreateCertificate(\"certificateName\", certificatePolicyPkcsSelf, true, new HashMap<>());\n certificateSyncPoller.waitUntil(LongRunningOperationStatus.SUCCESSFULLY_COMPLETED);\n KeyVaultCertificate createdCertificate = certificateSyncPoller.getFinalResult();\n System.out.printf(\"Certificate created with name %s%n\", createdCertificate.getName());\n```"
  returns:
    description: "A <xref uid=\"com.azure.core.util.polling.SyncPoller\" data-throw-if-not-resolved=\"false\" data-raw-source=\"SyncPoller\"></xref> to poll on the create certificate operation status."
    type: "<xref href=\"com.azure.core.util.polling.SyncPoller?alt=com.azure.core.util.polling.SyncPoller&text=SyncPoller\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.security.keyvault.certificates.models.CertificateOperation?alt=com.azure.security.keyvault.certificates.models.CertificateOperation&text=CertificateOperation\" data-throw-if-not-resolved=\"False\" />,<xref href=\"com.azure.security.keyvault.certificates.models.KeyVaultCertificateWithPolicy?alt=com.azure.security.keyvault.certificates.models.KeyVaultCertificateWithPolicy&text=KeyVaultCertificateWithPolicy\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.security.keyvault.certificates.CertificateClient.beginDeleteCertificate(java.lang.String)"
  fullName: "com.azure.security.keyvault.certificates.CertificateClient.beginDeleteCertificate(String certificateName)"
  name: "beginDeleteCertificate(String certificateName)"
  nameWithType: "CertificateClient.beginDeleteCertificate(String certificateName)"
  summary: "Deletes a certificate from a specified key vault."
  parameters:
  - description: "The name of the certificate to be deleted."
    name: "certificateName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public SyncPoller<DeletedCertificate,Void> beginDeleteCertificate(String certificateName)"
  desc: "Deletes a certificate from a specified key vault. All the versions of the certificate along with its associated policy get deleted. If soft-delete is enabled on the key vault then the certificate is placed in the deleted state and requires to be purged for permanent deletion else the certificate is permanently deleted. The delete operation applies to any certificate stored in Azure Key Vault but it cannot be applied to an individual version of a certificate. This operation requires the certificates/delete permission.\n\n**Code Samples**\n\nDeletes the certificate in the Azure Key Vault. Prints out the deleted certificate details when a response has been received.\n\n```java\nSyncPoller<DeletedCertificate, Void> deleteCertPoller =\n     certificateClient.beginDeleteCertificate(\"certificateName\");\n // Deleted Certificate is accessible as soon as polling beings.\n PollResponse<DeletedCertificate> deleteCertPollResponse = deleteCertPoller.poll();\n System.out.printf(\"Deleted certificate with name %s and recovery id %s%n\",\n     deleteCertPollResponse.getValue().getName(), deleteCertPollResponse.getValue().getRecoveryId());\n deleteCertPoller.waitForCompletion();\n```"
  returns:
    description: "A <xref uid=\"com.azure.core.util.polling.SyncPoller\" data-throw-if-not-resolved=\"false\" data-raw-source=\"SyncPoller\"></xref> to poll on and retrieve <xref uid=\"com.azure.security.keyvault.certificates.models.DeletedCertificate\" data-throw-if-not-resolved=\"false\" data-raw-source=\"deleted certificate\"></xref>."
    type: "<xref href=\"com.azure.core.util.polling.SyncPoller?alt=com.azure.core.util.polling.SyncPoller&text=SyncPoller\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.security.keyvault.certificates.models.DeletedCertificate?alt=com.azure.security.keyvault.certificates.models.DeletedCertificate&text=DeletedCertificate\" data-throw-if-not-resolved=\"False\" />,<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.security.keyvault.certificates.CertificateClient.beginRecoverDeletedCertificate(java.lang.String)"
  fullName: "com.azure.security.keyvault.certificates.CertificateClient.beginRecoverDeletedCertificate(String certificateName)"
  name: "beginRecoverDeletedCertificate(String certificateName)"
  nameWithType: "CertificateClient.beginRecoverDeletedCertificate(String certificateName)"
  summary: "Recovers the deleted certificate back to its current version under /certificates and can only be performed on a soft-delete enabled vault."
  parameters:
  - description: "The name of the deleted certificate to be recovered."
    name: "certificateName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public SyncPoller<KeyVaultCertificateWithPolicy,Void> beginRecoverDeletedCertificate(String certificateName)"
  desc: "Recovers the deleted certificate back to its current version under /certificates and can only be performed on a soft-delete enabled vault. The RecoverDeletedCertificate operation performs the reversal of the Delete operation and must be issued during the retention interval (available in the deleted certificate's attributes). This operation requires the certificates/recover permission.\n\n**Code Samples**\n\nRecovers the deleted certificate from the key vault enabled for soft-delete. Prints out the recovered certificate details when a response has been received.\n\n```java\nSyncPoller<KeyVaultCertificateWithPolicy, Void> recoverDeletedCertPoller = certificateClient\n     .beginRecoverDeletedCertificate(\"deletedCertificateName\");\n // Recovered certificate is accessible as soon as polling beings\n PollResponse<KeyVaultCertificateWithPolicy> recoverDeletedCertPollResponse = recoverDeletedCertPoller.poll();\n System.out.printf(\" Recovered Deleted certificate with name %s and id %s%n\",\n     recoverDeletedCertPollResponse.getValue().getProperties().getName(),\n     recoverDeletedCertPollResponse.getValue().getProperties().getId());\n recoverDeletedCertPoller.waitForCompletion();\n```"
  returns:
    description: "A <xref uid=\"com.azure.core.util.polling.SyncPoller\" data-throw-if-not-resolved=\"false\" data-raw-source=\"SyncPoller\"></xref> to poll on and retrieve <xref uid=\"com.azure.security.keyvault.certificates.models.KeyVaultCertificateWithPolicy\" data-throw-if-not-resolved=\"false\" data-raw-source=\"recovered certificate\"></xref>."
    type: "<xref href=\"com.azure.core.util.polling.SyncPoller?alt=com.azure.core.util.polling.SyncPoller&text=SyncPoller\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.security.keyvault.certificates.models.KeyVaultCertificateWithPolicy?alt=com.azure.security.keyvault.certificates.models.KeyVaultCertificateWithPolicy&text=KeyVaultCertificateWithPolicy\" data-throw-if-not-resolved=\"False\" />,<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.security.keyvault.certificates.CertificateClient.cancelCertificateOperation(java.lang.String)"
  fullName: "com.azure.security.keyvault.certificates.CertificateClient.cancelCertificateOperation(String certificateName)"
  name: "cancelCertificateOperation(String certificateName)"
  nameWithType: "CertificateClient.cancelCertificateOperation(String certificateName)"
  summary: "Cancels a certificate creation operation that is already in progress."
  parameters:
  - description: "The name of the certificate which is in the process of being created."
    name: "certificateName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public CertificateOperation cancelCertificateOperation(String certificateName)"
  desc: "Cancels a certificate creation operation that is already in progress. This operation requires the `certificates/update` permission.\n\n**Code Samples**\n\nTriggers certificate creation and then cancels the certificate creation operation in the Azure Key Vault. Subscribes to the call and prints out the updated certificate operation details when a response has been received.\n\n```java\nCertificateOperation certificateOperation = certificateClient\n     .cancelCertificateOperation(\"certificateName\");\n System.out.printf(\"Certificate Operation status %s%n\", certificateOperation.getStatus());\n```"
  returns:
    description: "A <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> whose <xref uid=\"com.azure.core.http.rest.Response.getValue*\" data-throw-if-not-resolved=\"false\" data-raw-source=\"value\"></xref> contains the <xref uid=\"com.azure.security.keyvault.certificates.models.CertificateOperation\" data-throw-if-not-resolved=\"false\" data-raw-source=\"cancelled certificate operation\"></xref>."
    type: "<xref href=\"com.azure.security.keyvault.certificates.models.CertificateOperation?alt=com.azure.security.keyvault.certificates.models.CertificateOperation&text=CertificateOperation\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.security.keyvault.certificates.CertificateClient.cancelCertificateOperationWithResponse(java.lang.String,com.azure.core.util.Context)"
  fullName: "com.azure.security.keyvault.certificates.CertificateClient.cancelCertificateOperationWithResponse(String certificateName, Context context)"
  name: "cancelCertificateOperationWithResponse(String certificateName, Context context)"
  nameWithType: "CertificateClient.cancelCertificateOperationWithResponse(String certificateName, Context context)"
  summary: "Cancels a certificate creation operation that is already in progress."
  parameters:
  - description: "The name of the certificate which is in the process of being created."
    name: "certificateName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional context that is passed through the Http pipeline during the service call."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<CertificateOperation> cancelCertificateOperationWithResponse(String certificateName, Context context)"
  desc: "Cancels a certificate creation operation that is already in progress. This operation requires the `certificates/update` permission.\n\n**Code Samples**\n\nTriggers certificate creation and then cancels the certificate creation operation in the Azure Key Vault. Subscribes to the call and prints out the updated certificate operation details when a response has been received.\n\n```java\nResponse<CertificateOperation> certificateOperationWithResponse = certificateClient\n     .cancelCertificateOperationWithResponse(\"certificateName\", new Context(key1, value1));\n System.out.printf(\"Certificate Operation status %s%n\", certificateOperationWithResponse.getValue().getStatus());\n```"
  returns:
    description: "A <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> whose <xref uid=\"com.azure.core.http.rest.Response.getValue*\" data-throw-if-not-resolved=\"false\" data-raw-source=\"value\"></xref> contains the <xref uid=\"com.azure.security.keyvault.certificates.models.CertificateOperation\" data-throw-if-not-resolved=\"false\" data-raw-source=\"cancelled certificate operation\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.security.keyvault.certificates.models.CertificateOperation?alt=com.azure.security.keyvault.certificates.models.CertificateOperation&text=CertificateOperation\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.security.keyvault.certificates.CertificateClient.createIssuer(com.azure.security.keyvault.certificates.models.CertificateIssuer)"
  fullName: "com.azure.security.keyvault.certificates.CertificateClient.createIssuer(CertificateIssuer issuer)"
  name: "createIssuer(CertificateIssuer issuer)"
  nameWithType: "CertificateClient.createIssuer(CertificateIssuer issuer)"
  summary: "Creates the specified certificate issuer."
  parameters:
  - description: "The configuration of the certificate issuer to be created."
    name: "issuer"
    type: "<xref href=\"com.azure.security.keyvault.certificates.models.CertificateIssuer?alt=com.azure.security.keyvault.certificates.models.CertificateIssuer&text=CertificateIssuer\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public CertificateIssuer createIssuer(CertificateIssuer issuer)"
  desc: "Creates the specified certificate issuer. The SetCertificateIssuer operation updates the specified certificate issuer if it already exists or adds it if doesn't exist. This operation requires the certificates/setissuers permission.\n\n**Code Samples**\n\nCreates a new certificate issuer in the key vault. Prints out the created certificate issuer details when a response has been received.\n\n```java\nCertificateIssuer issuerToCreate = new CertificateIssuer(\"myissuer\", \"myProvider\")\n     .setAccountId(\"testAccount\")\n     .setAdministratorContacts(Collections.singletonList(new AdministratorContact().setFirstName(\"test\")\n         .setLastName(\"name\").setEmail(\"test@example.com\")));\n CertificateIssuer returnedIssuer = certificateClient.createIssuer(issuerToCreate);\n System.out.printf(\"Created Issuer with name %s provider %s%n\", returnedIssuer.getName(),\n     returnedIssuer.getProvider());\n```"
  returns:
    description: "The created <xref uid=\"com.azure.security.keyvault.certificates.models.CertificateIssuer\" data-throw-if-not-resolved=\"false\" data-raw-source=\"certificate issuer\"></xref>."
    type: "<xref href=\"com.azure.security.keyvault.certificates.models.CertificateIssuer?alt=com.azure.security.keyvault.certificates.models.CertificateIssuer&text=CertificateIssuer\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.security.keyvault.certificates.CertificateClient.createIssuerWithResponse(com.azure.security.keyvault.certificates.models.CertificateIssuer,com.azure.core.util.Context)"
  fullName: "com.azure.security.keyvault.certificates.CertificateClient.createIssuerWithResponse(CertificateIssuer issuer, Context context)"
  name: "createIssuerWithResponse(CertificateIssuer issuer, Context context)"
  nameWithType: "CertificateClient.createIssuerWithResponse(CertificateIssuer issuer, Context context)"
  summary: "Creates the specified certificate issuer."
  parameters:
  - description: "The configuration of the certificate issuer to be created."
    name: "issuer"
    type: "<xref href=\"com.azure.security.keyvault.certificates.models.CertificateIssuer?alt=com.azure.security.keyvault.certificates.models.CertificateIssuer&text=CertificateIssuer\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional context that is passed through the Http pipeline during the service call."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<CertificateIssuer> createIssuerWithResponse(CertificateIssuer issuer, Context context)"
  desc: "Creates the specified certificate issuer. The SetCertificateIssuer operation updates the specified certificate issuer if it already exists or adds it if doesn't exist. This operation requires the certificates/setissuers permission.\n\n**Code Samples**\n\nCreates a new certificate issuer in the key vault. Prints out the created certificate issuer details when a response has been received.\n\n```java\nCertificateIssuer issuer = new CertificateIssuer(\"issuerName\", \"myProvider\")\n     .setAccountId(\"testAccount\")\n     .setAdministratorContacts(Collections.singletonList(new AdministratorContact().setFirstName(\"test\")\n         .setLastName(\"name\").setEmail(\"test@example.com\")));\n Response<CertificateIssuer> issuerResponse = certificateClient.createIssuerWithResponse(issuer,\n     new Context(key1, value1));\n System.out.printf(\"Created Issuer with name %s provider %s%n\", issuerResponse.getValue().getName(),\n     issuerResponse.getValue().getProvider());\n```"
  returns:
    description: "A <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> whose <xref uid=\"com.azure.core.http.rest.Response.getValue*\" data-throw-if-not-resolved=\"false\" data-raw-source=\"value\"></xref> contains the created <xref uid=\"com.azure.security.keyvault.certificates.models.CertificateIssuer\" data-throw-if-not-resolved=\"false\" data-raw-source=\"certificate issuer\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.security.keyvault.certificates.models.CertificateIssuer?alt=com.azure.security.keyvault.certificates.models.CertificateIssuer&text=CertificateIssuer\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.security.keyvault.certificates.CertificateClient.deleteCertificateOperation(java.lang.String)"
  fullName: "com.azure.security.keyvault.certificates.CertificateClient.deleteCertificateOperation(String certificateName)"
  name: "deleteCertificateOperation(String certificateName)"
  nameWithType: "CertificateClient.deleteCertificateOperation(String certificateName)"
  summary: "Deletes the creation operation for the specified certificate that is in the process of being created."
  parameters:
  - description: "The name of the certificate."
    name: "certificateName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public CertificateOperation deleteCertificateOperation(String certificateName)"
  desc: "Deletes the creation operation for the specified certificate that is in the process of being created. The certificate is no longer created. This operation requires the `certificates/update permission`.\n\n**Code Samples**\n\nTriggers certificate creation and then deletes the certificate creation operation in the Azure Key Vault. Subscribes to the call and prints out the deleted certificate operation details when a response has been received.\n\n```java\nResponse<CertificateOperation> deletedCertificateOperationWithResponse = certificateClient\n     .deleteCertificateOperationWithResponse(\"certificateName\", new Context(key1, value1));\n System.out.printf(\"Deleted Certificate Operation's last status %s%n\",\n     deletedCertificateOperationWithResponse.getValue().getStatus());\n```"
  returns:
    description: "The deleted <xref uid=\"com.azure.security.keyvault.certificates.models.CertificateOperation\" data-throw-if-not-resolved=\"false\" data-raw-source=\"certificate operation\"></xref>."
    type: "<xref href=\"com.azure.security.keyvault.certificates.models.CertificateOperation?alt=com.azure.security.keyvault.certificates.models.CertificateOperation&text=CertificateOperation\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.security.keyvault.certificates.CertificateClient.deleteCertificateOperationWithResponse(java.lang.String,com.azure.core.util.Context)"
  fullName: "com.azure.security.keyvault.certificates.CertificateClient.deleteCertificateOperationWithResponse(String certificateName, Context context)"
  name: "deleteCertificateOperationWithResponse(String certificateName, Context context)"
  nameWithType: "CertificateClient.deleteCertificateOperationWithResponse(String certificateName, Context context)"
  summary: "Deletes the creation operation for the specified certificate that is in the process of being created."
  parameters:
  - description: "The name of the certificate."
    name: "certificateName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional context that is passed through the Http pipeline during the service call."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<CertificateOperation> deleteCertificateOperationWithResponse(String certificateName, Context context)"
  desc: "Deletes the creation operation for the specified certificate that is in the process of being created. The certificate is no longer created. This operation requires the `certificates/update permission`.\n\n**Code Samples**\n\nTriggers certificate creation and then deletes the certificate creation operation in the Azure Key Vault. Subscribes to the call and prints out the deleted certificate operation details when a response has been received.\n\n```java\nCertificateOperation deletedCertificateOperation = certificateClient\n     .deleteCertificateOperation(\"certificateName\");\n System.out.printf(\"Deleted Certificate Operation's last status %s%n\", deletedCertificateOperation.getStatus());\n```"
  returns:
    description: "A <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> whose <xref uid=\"com.azure.core.http.rest.Response.getValue*\" data-throw-if-not-resolved=\"false\" data-raw-source=\"value\"></xref> contains the <xref uid=\"com.azure.security.keyvault.certificates.models.CertificateOperation\" data-throw-if-not-resolved=\"false\" data-raw-source=\"deleted certificate operation\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.security.keyvault.certificates.models.CertificateOperation?alt=com.azure.security.keyvault.certificates.models.CertificateOperation&text=CertificateOperation\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.security.keyvault.certificates.CertificateClient.deleteContacts()"
  fullName: "com.azure.security.keyvault.certificates.CertificateClient.deleteContacts()"
  name: "deleteContacts()"
  nameWithType: "CertificateClient.deleteContacts()"
  summary: "Deletes the certificate contacts in the key vault."
  syntax: "public PagedIterable<CertificateContact> deleteContacts()"
  desc: "Deletes the certificate contacts in the key vault. This operation requires the `certificates/managecontacts` permission.\n\n**Code Samples**\n\nDeletes the certificate contacts in the Azure Key Vault. Subscribes to the call and prints out the deleted contacts details.\n\n```java\nfor (CertificateContact contact : certificateClient.deleteContacts()) {\n     System.out.printf(\"Deleted contact with name %s and email %s from key vault%n\", contact.getName(),\n         contact.getEmail());\n }\n```"
  returns:
    description: "A <xref uid=\"com.azure.core.http.rest.PagedIterable\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedIterable\"></xref> containing all of the deleted <xref uid=\"com.azure.security.keyvault.certificates.models.CertificateContact\" data-throw-if-not-resolved=\"false\" data-raw-source=\"certificate contacts\"></xref> in the vault."
    type: "<xref href=\"com.azure.core.http.rest.PagedIterable?alt=com.azure.core.http.rest.PagedIterable&text=PagedIterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.security.keyvault.certificates.models.CertificateContact?alt=com.azure.security.keyvault.certificates.models.CertificateContact&text=CertificateContact\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.security.keyvault.certificates.CertificateClient.deleteContacts(com.azure.core.util.Context)"
  fullName: "com.azure.security.keyvault.certificates.CertificateClient.deleteContacts(Context context)"
  name: "deleteContacts(Context context)"
  nameWithType: "CertificateClient.deleteContacts(Context context)"
  summary: "Deletes the certificate contacts in the key vault."
  parameters:
  - description: "Additional context that is passed through the Http pipeline during the service call."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PagedIterable<CertificateContact> deleteContacts(Context context)"
  desc: "Deletes the certificate contacts in the key vault. This operation requires the `certificates/managecontacts` permission.\n\n**Code Samples**\n\nDeletes the certificate contacts in the Azure Key Vault. Prints out the deleted contacts details in the response.\n\n```java\nfor (CertificateContact contact : certificateClient.deleteContacts(new Context(key1, value1))) {\n     System.out.printf(\"Deleted contact with name %s and email %s from key vault%n\", contact.getName(),\n         contact.getEmail());\n }\n```"
  returns:
    description: "A <xref uid=\"com.azure.core.http.rest.PagedIterable\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedIterable\"></xref> containing all of the deleted <xref uid=\"com.azure.security.keyvault.certificates.models.CertificateContact\" data-throw-if-not-resolved=\"false\" data-raw-source=\"certificate contacts\"></xref> in the vault."
    type: "<xref href=\"com.azure.core.http.rest.PagedIterable?alt=com.azure.core.http.rest.PagedIterable&text=PagedIterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.security.keyvault.certificates.models.CertificateContact?alt=com.azure.security.keyvault.certificates.models.CertificateContact&text=CertificateContact\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.security.keyvault.certificates.CertificateClient.deleteIssuer(java.lang.String)"
  fullName: "com.azure.security.keyvault.certificates.CertificateClient.deleteIssuer(String issuerName)"
  name: "deleteIssuer(String issuerName)"
  nameWithType: "CertificateClient.deleteIssuer(String issuerName)"
  summary: "Deletes the specified certificate issuer."
  parameters:
  - description: "The name of the certificate issuer to be deleted."
    name: "issuerName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public CertificateIssuer deleteIssuer(String issuerName)"
  desc: "Deletes the specified certificate issuer. The DeleteCertificateIssuer operation permanently removes the specified certificate issuer from the key vault. This operation requires the `certificates/manageissuers/deleteissuers permission`.\n\n**Code Samples**\n\nDeletes the certificate issuer in the Azure Key Vault. Prints out the deleted certificate details when a response has been received.\n\n```java\nResponse<CertificateIssuer> deletedIssuerWithResponse = certificateClient.\n     deleteIssuerWithResponse(\"certificateName\", new Context(key1, value1));\n System.out.printf(\"Deleted certificate issuer with name %s and provider id %s%n\",\n     deletedIssuerWithResponse.getValue().getName(),\n     deletedIssuerWithResponse.getValue().getProvider());\n```"
  returns:
    description: "The <xref uid=\"com.azure.security.keyvault.certificates.models.CertificateIssuer\" data-throw-if-not-resolved=\"false\" data-raw-source=\"deleted issuer\"></xref>."
    type: "<xref href=\"com.azure.security.keyvault.certificates.models.CertificateIssuer?alt=com.azure.security.keyvault.certificates.models.CertificateIssuer&text=CertificateIssuer\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.security.keyvault.certificates.CertificateClient.deleteIssuerWithResponse(java.lang.String,com.azure.core.util.Context)"
  fullName: "com.azure.security.keyvault.certificates.CertificateClient.deleteIssuerWithResponse(String issuerName, Context context)"
  name: "deleteIssuerWithResponse(String issuerName, Context context)"
  nameWithType: "CertificateClient.deleteIssuerWithResponse(String issuerName, Context context)"
  summary: "Deletes the specified certificate issuer."
  parameters:
  - description: "The name of the certificate issuer to be deleted."
    name: "issuerName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional context that is passed through the Http pipeline during the service call."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<CertificateIssuer> deleteIssuerWithResponse(String issuerName, Context context)"
  desc: "Deletes the specified certificate issuer. The DeleteCertificateIssuer operation permanently removes the specified certificate issuer from the key vault. This operation requires the `certificates/manageissuers/deleteissuers permission`.\n\n**Code Samples**\n\nDeletes the certificate issuer in the Azure Key Vault. Prints out the deleted certificate details when a response has been received.\n\n```java\nCertificateIssuer deletedIssuer = certificateClient.deleteIssuer(\"certificateName\");\n System.out.printf(\"Deleted certificate issuer with name %s and provider id %s%n\", deletedIssuer.getName(),\n     deletedIssuer.getProvider());\n```"
  returns:
    description: "A <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> whose <xref uid=\"com.azure.core.http.rest.Response.getValue*\" data-throw-if-not-resolved=\"false\" data-raw-source=\"value\"></xref> contains the <xref uid=\"com.azure.security.keyvault.certificates.models.CertificateIssuer\" data-throw-if-not-resolved=\"false\" data-raw-source=\"deleted issuer\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.security.keyvault.certificates.models.CertificateIssuer?alt=com.azure.security.keyvault.certificates.models.CertificateIssuer&text=CertificateIssuer\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.security.keyvault.certificates.CertificateClient.getCertificate(java.lang.String)"
  fullName: "com.azure.security.keyvault.certificates.CertificateClient.getCertificate(String certificateName)"
  name: "getCertificate(String certificateName)"
  nameWithType: "CertificateClient.getCertificate(String certificateName)"
  summary: "Gets information about the latest version of the specified certificate."
  parameters:
  - description: "The name of the certificate to retrieve, cannot be null"
    name: "certificateName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public KeyVaultCertificateWithPolicy getCertificate(String certificateName)"
  desc: "Gets information about the latest version of the specified certificate. This operation requires the certificates/get permission.\n\n**Code Samples**\n\nGets a specific version of the certificate in the key vault. Prints out the returned certificate details when a response has been received.\n\n```java\nKeyVaultCertificateWithPolicy certificate = certificateClient.getCertificate(\"certificateName\");\n System.out.printf(\"Received certificate with name %s and version %s and secret id %s%n\",\n     certificate.getProperties().getName(),\n     certificate.getProperties().getVersion(), certificate.getSecretId());\n```"
  returns:
    description: "The requested <xref uid=\"com.azure.security.keyvault.certificates.models.KeyVaultCertificateWithPolicy\" data-throw-if-not-resolved=\"false\" data-raw-source=\"certificate\"></xref>."
    type: "<xref href=\"com.azure.security.keyvault.certificates.models.KeyVaultCertificateWithPolicy?alt=com.azure.security.keyvault.certificates.models.KeyVaultCertificateWithPolicy&text=KeyVaultCertificateWithPolicy\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.security.keyvault.certificates.CertificateClient.getCertificateOperation(java.lang.String)"
  fullName: "com.azure.security.keyvault.certificates.CertificateClient.getCertificateOperation(String certificateName)"
  name: "getCertificateOperation(String certificateName)"
  nameWithType: "CertificateClient.getCertificateOperation(String certificateName)"
  summary: "Gets a pending <xref uid=\"com.azure.security.keyvault.certificates.models.CertificateOperation\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CertificateOperation\"></xref> from the key vault."
  parameters:
  - description: "The name of the certificate."
    name: "certificateName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public SyncPoller<CertificateOperation,KeyVaultCertificateWithPolicy> getCertificateOperation(String certificateName)"
  desc: "Gets a pending <xref uid=\"com.azure.security.keyvault.certificates.models.CertificateOperation\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CertificateOperation\"></xref> from the key vault. This operation requires the certificates/get permission.\n\n**Code Samples**\n\nGeta a pending certificate operation. The <xref uid=\"com.azure.core.util.polling.SyncPoller\" data-throw-if-not-resolved=\"false\" data-raw-source=\"poller\"></xref> allows users to automatically poll on the certificate operation status.\n\n```java\nSyncPoller<CertificateOperation, KeyVaultCertificateWithPolicy> getCertPoller = certificateClient\n     .getCertificateOperation(\"certificateName\");\n getCertPoller.waitUntil(LongRunningOperationStatus.SUCCESSFULLY_COMPLETED);\n KeyVaultCertificate cert = getCertPoller.getFinalResult();\n System.out.printf(\"Certificate created with name %s%n\", cert.getName());\n```"
  returns:
    description: "A <xref uid=\"com.azure.core.util.polling.SyncPoller\" data-throw-if-not-resolved=\"false\" data-raw-source=\"SyncPoller\"></xref> to poll on the certificate operation status."
    type: "<xref href=\"com.azure.core.util.polling.SyncPoller?alt=com.azure.core.util.polling.SyncPoller&text=SyncPoller\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.security.keyvault.certificates.models.CertificateOperation?alt=com.azure.security.keyvault.certificates.models.CertificateOperation&text=CertificateOperation\" data-throw-if-not-resolved=\"False\" />,<xref href=\"com.azure.security.keyvault.certificates.models.KeyVaultCertificateWithPolicy?alt=com.azure.security.keyvault.certificates.models.KeyVaultCertificateWithPolicy&text=KeyVaultCertificateWithPolicy\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.security.keyvault.certificates.CertificateClient.getCertificatePolicy(java.lang.String)"
  fullName: "com.azure.security.keyvault.certificates.CertificateClient.getCertificatePolicy(String certificateName)"
  name: "getCertificatePolicy(String certificateName)"
  nameWithType: "CertificateClient.getCertificatePolicy(String certificateName)"
  summary: "Retrieves the policy of the specified certificate in the key vault."
  parameters:
  - description: "The name of the certificate whose policy is to be retrieved, cannot be null"
    name: "certificateName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public CertificatePolicy getCertificatePolicy(String certificateName)"
  desc: "Retrieves the policy of the specified certificate in the key vault. This operation requires the `certificates/get` permission.\n\n**Code Samples**\n\nGets the policy of a certirifcate in the key vault. Prints out the returned certificate policy details when a response has been received.\n\n```java\nCertificatePolicy policy = certificateClient.getCertificatePolicy(\"certificateName\");\n System.out.printf(\"Received policy with subject name %s%n\", policy.getSubject());\n```"
  returns:
    description: "The requested <xref uid=\"com.azure.security.keyvault.certificates.models.CertificatePolicy\" data-throw-if-not-resolved=\"false\" data-raw-source=\"certificate policy\"></xref>."
    type: "<xref href=\"com.azure.security.keyvault.certificates.models.CertificatePolicy?alt=com.azure.security.keyvault.certificates.models.CertificatePolicy&text=CertificatePolicy\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.security.keyvault.certificates.CertificateClient.getCertificatePolicyWithResponse(java.lang.String,com.azure.core.util.Context)"
  fullName: "com.azure.security.keyvault.certificates.CertificateClient.getCertificatePolicyWithResponse(String certificateName, Context context)"
  name: "getCertificatePolicyWithResponse(String certificateName, Context context)"
  nameWithType: "CertificateClient.getCertificatePolicyWithResponse(String certificateName, Context context)"
  summary: "Retrieves the policy of the specified certificate in the key vault."
  parameters:
  - description: "The name of the certificate whose policy is to be retrieved, cannot be null"
    name: "certificateName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional context that is passed through the Http pipeline during the service call."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<CertificatePolicy> getCertificatePolicyWithResponse(String certificateName, Context context)"
  desc: "Retrieves the policy of the specified certificate in the key vault. This operation requires the `certificates/get` permission.\n\n**Code Samples**\n\nGets the policy of a certirifcate in the key vault. Prints out the returned certificate policy details when a response has been received.\n\n```java\nResponse<CertificatePolicy> returnedPolicyWithResponse = certificateClient.getCertificatePolicyWithResponse(\n     \"certificateName\", new Context(key1, value1));\n System.out.printf(\"Received policy with subject name %s%n\",\n     returnedPolicyWithResponse.getValue().getSubject());\n```"
  returns:
    description: "A <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> whose <xref uid=\"com.azure.core.http.rest.Response.getValue*\" data-throw-if-not-resolved=\"false\" data-raw-source=\"value\"></xref> contains the requested <xref uid=\"com.azure.security.keyvault.certificates.models.CertificatePolicy\" data-throw-if-not-resolved=\"false\" data-raw-source=\"certificate policy\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.security.keyvault.certificates.models.CertificatePolicy?alt=com.azure.security.keyvault.certificates.models.CertificatePolicy&text=CertificatePolicy\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.security.keyvault.certificates.CertificateClient.getCertificateVersion(java.lang.String,java.lang.String)"
  fullName: "com.azure.security.keyvault.certificates.CertificateClient.getCertificateVersion(String certificateName, String version)"
  name: "getCertificateVersion(String certificateName, String version)"
  nameWithType: "CertificateClient.getCertificateVersion(String certificateName, String version)"
  summary: "Gets information about the specified version of the specified certificate."
  parameters:
  - description: "The name of the certificate to retrieve, cannot be null"
    name: "certificateName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The version of the certificate to retrieve. If this is an empty String or null then latest version of the certificate is retrieved."
    name: "version"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public KeyVaultCertificate getCertificateVersion(String certificateName, String version)"
  desc: "Gets information about the specified version of the specified certificate. This operation requires the certificates/get permission.\n\n**Code Samples**\n\nGets a specific version of the certificate in the key vault. Prints out the returned certificate details when a response has been received.\n\n```java\nKeyVaultCertificate returnedCertificate = certificateClient.getCertificateVersion(\"certificateName\",\n     \"certificateVersion\");\n System.out.printf(\"Received certificate with name %s and version %s and secret id %s%n\",\n     returnedCertificate.getProperties().getName(), returnedCertificate.getProperties().getVersion(),\n     returnedCertificate.getSecretId());\n```"
  returns:
    description: "The requested <xref uid=\"com.azure.security.keyvault.certificates.models.KeyVaultCertificate\" data-throw-if-not-resolved=\"false\" data-raw-source=\"certificate\"></xref>."
    type: "<xref href=\"com.azure.security.keyvault.certificates.models.KeyVaultCertificate?alt=com.azure.security.keyvault.certificates.models.KeyVaultCertificate&text=KeyVaultCertificate\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.security.keyvault.certificates.CertificateClient.getCertificateVersionWithResponse(java.lang.String,java.lang.String,com.azure.core.util.Context)"
  fullName: "com.azure.security.keyvault.certificates.CertificateClient.getCertificateVersionWithResponse(String certificateName, String version, Context context)"
  name: "getCertificateVersionWithResponse(String certificateName, String version, Context context)"
  nameWithType: "CertificateClient.getCertificateVersionWithResponse(String certificateName, String version, Context context)"
  summary: "Gets information about the latest version of the specified certificate."
  parameters:
  - description: "The name of the certificate to retrieve, cannot be null"
    name: "certificateName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The version of the certificate to retrieve. If this is an empty String or null then latest version of the certificate is retrieved."
    name: "version"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional context that is passed through the Http pipeline during the service call."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<KeyVaultCertificate> getCertificateVersionWithResponse(String certificateName, String version, Context context)"
  desc: "Gets information about the latest version of the specified certificate. This operation requires the certificates/get permission.\n\n**Code Samples**\n\nGets a specific version of the certificate in the key vault. Prints out the returned certificate details when a response has been received.\n\n```java\nResponse<KeyVaultCertificate> returnedCertificateWithResponse = certificateClient\n     .getCertificateVersionWithResponse(\"certificateName\", \"certificateVersion\",\n         new Context(key1, value1));\n System.out.printf(\"Received certificate with name %s and version %s and secret id %s%n\",\n     returnedCertificateWithResponse.getValue().getProperties().getName(),\n     returnedCertificateWithResponse.getValue().getProperties().getVersion(),\n     returnedCertificateWithResponse.getValue().getSecretId());\n```"
  returns:
    description: "A <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> whose <xref uid=\"com.azure.core.http.rest.Response.getValue*\" data-throw-if-not-resolved=\"false\" data-raw-source=\"value\"></xref> contains the requested <xref uid=\"com.azure.security.keyvault.certificates.models.KeyVaultCertificate\" data-throw-if-not-resolved=\"false\" data-raw-source=\"certificate\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.security.keyvault.certificates.models.KeyVaultCertificate?alt=com.azure.security.keyvault.certificates.models.KeyVaultCertificate&text=KeyVaultCertificate\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.security.keyvault.certificates.CertificateClient.getCertificateWithResponse(java.lang.String,com.azure.core.util.Context)"
  fullName: "com.azure.security.keyvault.certificates.CertificateClient.getCertificateWithResponse(String certificateName, Context context)"
  name: "getCertificateWithResponse(String certificateName, Context context)"
  nameWithType: "CertificateClient.getCertificateWithResponse(String certificateName, Context context)"
  summary: "Gets information about the latest version of the specified certificate."
  parameters:
  - description: "The name of the certificate to retrieve, cannot be null"
    name: "certificateName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional context that is passed through the Http pipeline during the service call."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<KeyVaultCertificateWithPolicy> getCertificateWithResponse(String certificateName, Context context)"
  desc: "Gets information about the latest version of the specified certificate. This operation requires the certificates/get permission.\n\n**Code Samples**\n\nGets a specific version of the certificate in the key vault. Prints out the returned certificate details when a response has been received.\n\n```java\nResponse<KeyVaultCertificateWithPolicy> certificateWithResponse = certificateClient\n     .getCertificateWithResponse(\"certificateName\", new Context(key1, value1));\n System.out.printf(\"Received certificate with name %s and version %s and secret id %s%n\",\n     certificateWithResponse.getValue().getProperties().getName(),\n     certificateWithResponse.getValue().getProperties().getVersion(), certificate.getSecretId());\n```"
  returns:
    description: "A <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> whose <xref uid=\"com.azure.core.http.rest.Response.getValue*\" data-throw-if-not-resolved=\"false\" data-raw-source=\"value\"></xref> contains the requested <xref uid=\"com.azure.security.keyvault.certificates.models.KeyVaultCertificateWithPolicy\" data-throw-if-not-resolved=\"false\" data-raw-source=\"certificate\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.security.keyvault.certificates.models.KeyVaultCertificateWithPolicy?alt=com.azure.security.keyvault.certificates.models.KeyVaultCertificateWithPolicy&text=KeyVaultCertificateWithPolicy\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.security.keyvault.certificates.CertificateClient.getDeletedCertificate(java.lang.String)"
  fullName: "com.azure.security.keyvault.certificates.CertificateClient.getDeletedCertificate(String certificateName)"
  name: "getDeletedCertificate(String certificateName)"
  nameWithType: "CertificateClient.getDeletedCertificate(String certificateName)"
  summary: "Retrieves information about the specified deleted certificate."
  parameters:
  - description: "The name of the deleted certificate."
    name: "certificateName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public DeletedCertificate getDeletedCertificate(String certificateName)"
  desc: "Retrieves information about the specified deleted certificate. The GetDeletedCertificate operation is applicable for soft-delete enabled vaults and additionally retrieves deleted certificate's attributes, such as retention interval, scheduled permanent deletion and the current deletion recovery level. This operation requires the certificates/get permission.\n\n**Code Samples**\n\nGets the deleted certificate from the key vault enabled for soft-delete. Prints out the deleted certificate details when a response has been received.\n\n```java\nDeletedCertificate deletedCertificate = certificateClient.getDeletedCertificate(\"certificateName\");\n System.out.printf(\"Deleted certificate with name %s and recovery id %s%n\", deletedCertificate.getName(),\n     deletedCertificate.getRecoveryId());\n```"
  returns:
    description: "The <xref uid=\"com.azure.security.keyvault.certificates.models.DeletedCertificate\" data-throw-if-not-resolved=\"false\" data-raw-source=\"deleted certificate\"></xref>."
    type: "<xref href=\"com.azure.security.keyvault.certificates.models.DeletedCertificate?alt=com.azure.security.keyvault.certificates.models.DeletedCertificate&text=DeletedCertificate\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.security.keyvault.certificates.CertificateClient.getDeletedCertificateWithResponse(java.lang.String,com.azure.core.util.Context)"
  fullName: "com.azure.security.keyvault.certificates.CertificateClient.getDeletedCertificateWithResponse(String certificateName, Context context)"
  name: "getDeletedCertificateWithResponse(String certificateName, Context context)"
  nameWithType: "CertificateClient.getDeletedCertificateWithResponse(String certificateName, Context context)"
  summary: "Retrieves information about the specified deleted certificate."
  parameters:
  - description: "The name of the deleted certificate."
    name: "certificateName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional context that is passed through the Http pipeline during the service call."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<DeletedCertificate> getDeletedCertificateWithResponse(String certificateName, Context context)"
  desc: "Retrieves information about the specified deleted certificate. The GetDeletedCertificate operation is applicable for soft-delete enabled vaults and additionally retrieves deleted certificate's attributes, such as retention interval, scheduled permanent deletion and the current deletion recovery level. This operation requires the certificates/get permission.\n\n**Code Samples**\n\nGets the deleted certificate from the key vault enabled for soft-delete. Prints out the deleted certificate details when a response has been received.\n\n```java\nResponse<DeletedCertificate> deletedCertificateWithResponse = certificateClient\n     .getDeletedCertificateWithResponse(\"certificateName\", new Context(key1, value1));\n System.out.printf(\"Deleted certificate with name %s and recovery id %s%n\",\n     deletedCertificateWithResponse.getValue().getName(),\n     deletedCertificateWithResponse.getValue().getRecoveryId());\n```"
  returns:
    description: "A <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> whose <xref uid=\"com.azure.core.http.rest.Response.getValue*\" data-throw-if-not-resolved=\"false\" data-raw-source=\"value\"></xref> contains the <xref uid=\"com.azure.security.keyvault.certificates.models.DeletedCertificate\" data-throw-if-not-resolved=\"false\" data-raw-source=\"deleted certificate\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.security.keyvault.certificates.models.DeletedCertificate?alt=com.azure.security.keyvault.certificates.models.DeletedCertificate&text=DeletedCertificate\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.security.keyvault.certificates.CertificateClient.getIssuer(java.lang.String)"
  fullName: "com.azure.security.keyvault.certificates.CertificateClient.getIssuer(String issuerName)"
  name: "getIssuer(String issuerName)"
  nameWithType: "CertificateClient.getIssuer(String issuerName)"
  summary: "Retrieves the specified certificate issuer from the key vault."
  parameters:
  - description: "The name of the certificate issuer to retrieve, cannot be null"
    name: "issuerName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public CertificateIssuer getIssuer(String issuerName)"
  desc: "Retrieves the specified certificate issuer from the key vault. This operation requires the certificates/manageissuers/getissuers permission.\n\n**Code Samples**\n\nGets the specified certificate issuer in the key vault. Prints out the returned certificate issuer details when a response has been received.\n\n```java\nCertificateIssuer returnedIssuer = certificateClient.getIssuer(\"issuerName\");\n System.out.printf(\"Retrieved issuer with name %s and provider %s%n\", returnedIssuer.getName(),\n     returnedIssuer.getProvider());\n```"
  returns:
    description: "The requested <xref uid=\"com.azure.security.keyvault.certificates.models.CertificateIssuer\" data-throw-if-not-resolved=\"false\" data-raw-source=\"certificate issuer\"></xref>."
    type: "<xref href=\"com.azure.security.keyvault.certificates.models.CertificateIssuer?alt=com.azure.security.keyvault.certificates.models.CertificateIssuer&text=CertificateIssuer\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.security.keyvault.certificates.CertificateClient.getIssuerWithResponse(java.lang.String,com.azure.core.util.Context)"
  fullName: "com.azure.security.keyvault.certificates.CertificateClient.getIssuerWithResponse(String issuerName, Context context)"
  name: "getIssuerWithResponse(String issuerName, Context context)"
  nameWithType: "CertificateClient.getIssuerWithResponse(String issuerName, Context context)"
  summary: "Retrieves the specified certificate issuer from the key vault."
  parameters:
  - description: "The name of the certificate issuer to retrieve, cannot be null"
    name: "issuerName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional context that is passed through the Http pipeline during the service call."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<CertificateIssuer> getIssuerWithResponse(String issuerName, Context context)"
  desc: "Retrieves the specified certificate issuer from the key vault. This operation requires the certificates/manageissuers/getissuers permission.\n\n**Code Samples**\n\nGets the specificed certifcate issuer in the key vault. Prints out the returned certificate issuer details when a response has been received.\n\n```java\nResponse<CertificateIssuer> issuerResponse = certificateClient.getIssuerWithResponse(\"issuerName\",\n     new Context(key1, value1));\n System.out.printf(\"Retrieved issuer with name %s and provider %s%n\", issuerResponse.getValue().getName(),\n     issuerResponse.getValue().getProvider());\n```"
  returns:
    description: "A <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> whose <xref uid=\"com.azure.core.http.rest.Response.getValue*\" data-throw-if-not-resolved=\"false\" data-raw-source=\"value\"></xref> contains the requested <xref uid=\"com.azure.security.keyvault.certificates.models.CertificateIssuer\" data-throw-if-not-resolved=\"false\" data-raw-source=\"certificate issuer\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.security.keyvault.certificates.models.CertificateIssuer?alt=com.azure.security.keyvault.certificates.models.CertificateIssuer&text=CertificateIssuer\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.security.keyvault.certificates.CertificateClient.getVaultUrl()"
  fullName: "com.azure.security.keyvault.certificates.CertificateClient.getVaultUrl()"
  name: "getVaultUrl()"
  nameWithType: "CertificateClient.getVaultUrl()"
  summary: "Get the vault endpoint url to which service requests are sent to."
  syntax: "public String getVaultUrl()"
  desc: "Get the vault endpoint url to which service requests are sent to."
  returns:
    description: "the vault endpoint url"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.security.keyvault.certificates.CertificateClient.importCertificate(com.azure.security.keyvault.certificates.models.ImportCertificateOptions)"
  fullName: "com.azure.security.keyvault.certificates.CertificateClient.importCertificate(ImportCertificateOptions importCertificateOptions)"
  name: "importCertificate(ImportCertificateOptions importCertificateOptions)"
  nameWithType: "CertificateClient.importCertificate(ImportCertificateOptions importCertificateOptions)"
  summary: "Imports a pre-existing certificate to the key vault."
  parameters:
  - description: "The details of the certificate to import to the key vault"
    name: "importCertificateOptions"
    type: "<xref href=\"com.azure.security.keyvault.certificates.models.ImportCertificateOptions?alt=com.azure.security.keyvault.certificates.models.ImportCertificateOptions&text=ImportCertificateOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public KeyVaultCertificateWithPolicy importCertificate(ImportCertificateOptions importCertificateOptions)"
  desc: "Imports a pre-existing certificate to the key vault. The specified certificate must be in PFX or PEM format, and must contain the private key as well as the x509 certificates. This operation requires the `certificates/import` permission.\n\n**Code Samples**\n\nImports a certificate into the key vault.\n\n```java\nbyte[] certificateToImport = new byte[100];\n ImportCertificateOptions config =\n     new ImportCertificateOptions(\"certificateName\", certificateToImport).setEnabled(false);\n KeyVaultCertificate importedCertificate = certificateClient.importCertificate(config);\n System.out.printf(\"Received Certificate with name %s and key id %s%n\",\n     importedCertificate.getProperties().getName(), importedCertificate.getKeyId());\n```"
  returns:
    description: "the <xref uid=\"com.azure.security.keyvault.certificates.models.KeyVaultCertificateWithPolicy\" data-throw-if-not-resolved=\"false\" data-raw-source=\"imported certificate\"></xref>."
    type: "<xref href=\"com.azure.security.keyvault.certificates.models.KeyVaultCertificateWithPolicy?alt=com.azure.security.keyvault.certificates.models.KeyVaultCertificateWithPolicy&text=KeyVaultCertificateWithPolicy\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.security.keyvault.certificates.CertificateClient.importCertificateWithResponse(com.azure.security.keyvault.certificates.models.ImportCertificateOptions,com.azure.core.util.Context)"
  fullName: "com.azure.security.keyvault.certificates.CertificateClient.importCertificateWithResponse(ImportCertificateOptions importCertificateOptions, Context context)"
  name: "importCertificateWithResponse(ImportCertificateOptions importCertificateOptions, Context context)"
  nameWithType: "CertificateClient.importCertificateWithResponse(ImportCertificateOptions importCertificateOptions, Context context)"
  summary: "Imports a pre-existing certificate to the key vault."
  parameters:
  - description: "The details of the certificate to import to the key vault"
    name: "importCertificateOptions"
    type: "<xref href=\"com.azure.security.keyvault.certificates.models.ImportCertificateOptions?alt=com.azure.security.keyvault.certificates.models.ImportCertificateOptions&text=ImportCertificateOptions\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional context that is passed through the Http pipeline during the service call."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<KeyVaultCertificateWithPolicy> importCertificateWithResponse(ImportCertificateOptions importCertificateOptions, Context context)"
  desc: "Imports a pre-existing certificate to the key vault. The specified certificate must be in PFX or PEM format, and must contain the private key as well as the x509 certificates. This operation requires the `certificates/import` permission.\n\n**Code Samples**\n\nImports a certificate into the key vault.\n\n```java\nbyte[] certToImport = new byte[100];\n ImportCertificateOptions importCertificateOptions =\n     new ImportCertificateOptions(\"certificateName\", certToImport).setEnabled(false);\n Response<KeyVaultCertificateWithPolicy> importedCertificateWithResponse =\n     certificateClient.importCertificateWithResponse(importCertificateOptions, new Context(key2, value2));\n System.out.printf(\"Received Certificate with name %s and key id %s%n\",\n     importedCertificateWithResponse.getValue().getProperties().getName(),\n     importedCertificateWithResponse.getValue().getKeyId());\n```"
  returns:
    description: "A <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> whose <xref uid=\"com.azure.core.http.rest.Response.getValue*\" data-throw-if-not-resolved=\"false\" data-raw-source=\"value\"></xref> contains the <xref uid=\"com.azure.security.keyvault.certificates.models.KeyVaultCertificateWithPolicy\" data-throw-if-not-resolved=\"false\" data-raw-source=\"imported certificate\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.security.keyvault.certificates.models.KeyVaultCertificateWithPolicy?alt=com.azure.security.keyvault.certificates.models.KeyVaultCertificateWithPolicy&text=KeyVaultCertificateWithPolicy\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.security.keyvault.certificates.CertificateClient.listContacts()"
  fullName: "com.azure.security.keyvault.certificates.CertificateClient.listContacts()"
  name: "listContacts()"
  nameWithType: "CertificateClient.listContacts()"
  summary: "Lists the certificate contacts in the key vault."
  syntax: "public PagedIterable<CertificateContact> listContacts()"
  desc: "Lists the certificate contacts in the key vault. This operation requires the certificates/managecontacts permission.\n\n**Code Samples**\n\nLists the certificate contacts in the Azure Key Vault. Prints out the returned contacts details in the response.\n\n```java\nfor (CertificateContact contact : certificateClient.listContacts()) {\n     System.out.printf(\"Added contact with name %s and email %s to key vault%n\", contact.getName(),\n         contact.getEmail());\n }\n```"
  returns:
    description: "A <xref uid=\"com.azure.core.http.rest.PagedIterable\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedIterable\"></xref> containing all of the <xref uid=\"com.azure.security.keyvault.certificates.models.CertificateContact\" data-throw-if-not-resolved=\"false\" data-raw-source=\"certificate contacts\"></xref> in the vault."
    type: "<xref href=\"com.azure.core.http.rest.PagedIterable?alt=com.azure.core.http.rest.PagedIterable&text=PagedIterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.security.keyvault.certificates.models.CertificateContact?alt=com.azure.security.keyvault.certificates.models.CertificateContact&text=CertificateContact\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.security.keyvault.certificates.CertificateClient.listContacts(com.azure.core.util.Context)"
  fullName: "com.azure.security.keyvault.certificates.CertificateClient.listContacts(Context context)"
  name: "listContacts(Context context)"
  nameWithType: "CertificateClient.listContacts(Context context)"
  summary: "Lists the certificate contacts in the key vault."
  parameters:
  - description: "Additional context that is passed through the Http pipeline during the service call."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PagedIterable<CertificateContact> listContacts(Context context)"
  desc: "Lists the certificate contacts in the key vault. This operation requires the certificates/managecontacts permission.\n\n**Code Samples**\n\nLists the certificate contacts in the Azure Key Vault. Prints out the returned contacts details in the response.\n\n```java\nfor (CertificateContact contact : certificateClient.listContacts(new Context(key1, value1))) {\n     System.out.printf(\"Added contact with name %s and email %s to key vault%n\", contact.getName(),\n         contact.getEmail());\n }\n```"
  returns:
    description: "A <xref uid=\"com.azure.core.http.rest.PagedIterable\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedIterable\"></xref> containing all of the <xref uid=\"com.azure.security.keyvault.certificates.models.CertificateContact\" data-throw-if-not-resolved=\"false\" data-raw-source=\"certificate contacts\"></xref> in the vault."
    type: "<xref href=\"com.azure.core.http.rest.PagedIterable?alt=com.azure.core.http.rest.PagedIterable&text=PagedIterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.security.keyvault.certificates.models.CertificateContact?alt=com.azure.security.keyvault.certificates.models.CertificateContact&text=CertificateContact\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.security.keyvault.certificates.CertificateClient.listDeletedCertificates()"
  fullName: "com.azure.security.keyvault.certificates.CertificateClient.listDeletedCertificates()"
  name: "listDeletedCertificates()"
  nameWithType: "CertificateClient.listDeletedCertificates()"
  summary: "Lists the <xref uid=\"com.azure.security.keyvault.certificates.models.DeletedCertificate\" data-throw-if-not-resolved=\"false\" data-raw-source=\"deleted certificates\"></xref> in the key vault currently available for recovery."
  syntax: "public PagedIterable<DeletedCertificate> listDeletedCertificates()"
  desc: "Lists the <xref uid=\"com.azure.security.keyvault.certificates.models.DeletedCertificate\" data-throw-if-not-resolved=\"false\" data-raw-source=\"deleted certificates\"></xref> in the key vault currently available for recovery. This operation includes deletion-specific information and is applicable for vaults enabled for soft-delete. This operation requires the `certificates/get/list` permission.\n\n**Code Samples**\n\nLists the deleted certificates in the key vault. Prints out the recovery id of each deleted certificate when a response has been received.\n\n```java\nfor (DeletedCertificate deletedCertificate : certificateClient.listDeletedCertificates()) {\n     System.out.printf(\"Deleted certificate's recovery Id %s%n\", deletedCertificate.getRecoveryId());\n }\n```"
  returns:
    description: "A <xref uid=\"com.azure.core.http.rest.PagedIterable\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedIterable\"></xref> containing all of the <xref uid=\"com.azure.security.keyvault.certificates.models.DeletedCertificate\" data-throw-if-not-resolved=\"false\" data-raw-source=\"deleted certificates\"></xref> in the vault."
    type: "<xref href=\"com.azure.core.http.rest.PagedIterable?alt=com.azure.core.http.rest.PagedIterable&text=PagedIterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.security.keyvault.certificates.models.DeletedCertificate?alt=com.azure.security.keyvault.certificates.models.DeletedCertificate&text=DeletedCertificate\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.security.keyvault.certificates.CertificateClient.listDeletedCertificates(boolean,com.azure.core.util.Context)"
  fullName: "com.azure.security.keyvault.certificates.CertificateClient.listDeletedCertificates(boolean includePending, Context context)"
  name: "listDeletedCertificates(boolean includePending, Context context)"
  nameWithType: "CertificateClient.listDeletedCertificates(boolean includePending, Context context)"
  summary: "Lists the <xref uid=\"com.azure.security.keyvault.certificates.models.DeletedCertificate\" data-throw-if-not-resolved=\"false\" data-raw-source=\"deleted certificates\"></xref> in the key vault currently available for recovery."
  parameters:
  - description: "indicate if pending deleted certificates should be included in the results."
    name: "includePending"
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional context that is passed through the Http pipeline during the service call."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PagedIterable<DeletedCertificate> listDeletedCertificates(boolean includePending, Context context)"
  desc: "Lists the <xref uid=\"com.azure.security.keyvault.certificates.models.DeletedCertificate\" data-throw-if-not-resolved=\"false\" data-raw-source=\"deleted certificates\"></xref> in the key vault currently available for recovery. This operation includes deletion-specific information and is applicable for vaults enabled for soft-delete. This operation requires the `certificates/get/list` permission.\n\n**Code Samples**\n\nLists the deleted certificates in the key vault. Prints out the recovery id of each deleted certificate when a response has been received.\n\n```java\nfor (DeletedCertificate deletedCertificate : certificateClient\n     .listDeletedCertificates(true, new Context(key1, value1))) {\n     System.out.printf(\"Deleted certificate's recovery Id %s%n\", deletedCertificate.getRecoveryId());\n }\n```"
  returns:
    description: "A <xref uid=\"com.azure.core.http.rest.PagedIterable\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedIterable\"></xref> containing all of the <xref uid=\"com.azure.security.keyvault.certificates.models.DeletedCertificate\" data-throw-if-not-resolved=\"false\" data-raw-source=\"deleted certificates\"></xref> in the vault."
    type: "<xref href=\"com.azure.core.http.rest.PagedIterable?alt=com.azure.core.http.rest.PagedIterable&text=PagedIterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.security.keyvault.certificates.models.DeletedCertificate?alt=com.azure.security.keyvault.certificates.models.DeletedCertificate&text=DeletedCertificate\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.security.keyvault.certificates.CertificateClient.listPropertiesOfCertificateVersions(java.lang.String)"
  fullName: "com.azure.security.keyvault.certificates.CertificateClient.listPropertiesOfCertificateVersions(String certificateName)"
  name: "listPropertiesOfCertificateVersions(String certificateName)"
  nameWithType: "CertificateClient.listPropertiesOfCertificateVersions(String certificateName)"
  summary: "List all versions of the specified certificate."
  parameters:
  - description: "The name of the certificate."
    name: "certificateName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PagedIterable<CertificateProperties> listPropertiesOfCertificateVersions(String certificateName)"
  desc: "List all versions of the specified certificate. The individual certificate response in the iterable is represented by <xref uid=\"com.azure.security.keyvault.certificates.models.CertificateProperties\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CertificateProperties\"></xref> as only the certificate identifier, thumbprint, attributes and tags are provided in the response. The policy is not listed in the response. This operation requires the certificates/list permission.\n\nIt is possible to get the certificates with properties excluding the policy for all the versions from this information. Loop over the <xref uid=\"com.azure.security.keyvault.certificates.models.CertificateProperties\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CertificateProperties\"></xref> and call <xref uid=\"com.azure.security.keyvault.certificates.CertificateClient.getCertificateVersion(java.lang.String,java.lang.String)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CertificateClient#getCertificateVersion(String, String)\"></xref>. This will return the <xref uid=\"com.azure.security.keyvault.certificates.models.KeyVaultCertificate\" data-throw-if-not-resolved=\"false\" data-raw-source=\"certificate\"></xref> with all its properties excluding the policy.\n\n```java\nfor (CertificateProperties certificateProperties : certificateClient\n     .listPropertiesOfCertificateVersions(\"certificateName\")) {\n     KeyVaultCertificate certificateWithAllProperties = certificateClient\n         .getCertificateVersion(certificateProperties.getName(), certificateProperties.getVersion());\n     System.out.printf(\"Received certificate's version with name %s, version %s and secret id %s%n\",\n         certificateWithAllProperties.getProperties().getName(),\n         certificateWithAllProperties.getProperties().getVersion(), certificateWithAllProperties.getSecretId());\n }\n```"
  returns:
    description: "A <xref uid=\"com.azure.core.http.rest.PagedIterable\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedIterable\"></xref> containing <xref uid=\"com.azure.security.keyvault.certificates.models.CertificateProperties\" data-throw-if-not-resolved=\"false\" data-raw-source=\"certificate\"></xref> of all the versions of the specified certificate in the vault. Paged Iterable is empty if certificate with <code>certificateName</code> does not exist in key vault."
    type: "<xref href=\"com.azure.core.http.rest.PagedIterable?alt=com.azure.core.http.rest.PagedIterable&text=PagedIterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.security.keyvault.certificates.models.CertificateProperties?alt=com.azure.security.keyvault.certificates.models.CertificateProperties&text=CertificateProperties\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.security.keyvault.certificates.CertificateClient.listPropertiesOfCertificateVersions(java.lang.String,com.azure.core.util.Context)"
  fullName: "com.azure.security.keyvault.certificates.CertificateClient.listPropertiesOfCertificateVersions(String certificateName, Context context)"
  name: "listPropertiesOfCertificateVersions(String certificateName, Context context)"
  nameWithType: "CertificateClient.listPropertiesOfCertificateVersions(String certificateName, Context context)"
  summary: "List all versions of the specified certificate."
  parameters:
  - description: "The name of the certificate."
    name: "certificateName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional context that is passed through the Http pipeline during the service call."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PagedIterable<CertificateProperties> listPropertiesOfCertificateVersions(String certificateName, Context context)"
  desc: "List all versions of the specified certificate. The individual certificate response in the iterable is represented by <xref uid=\"com.azure.security.keyvault.certificates.models.CertificateProperties\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CertificateProperties\"></xref> as only the certificate identifier, thumbprint, attributes and tags are provided in the response. The policy is not listed in the response. This operation requires the certificates/list permission.\n\nIt is possible to get the certificates with properties excluding the policy for all the versions from this information. Loop over the <xref uid=\"com.azure.security.keyvault.certificates.models.CertificateProperties\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CertificateProperties\"></xref> and call <xref uid=\"com.azure.security.keyvault.certificates.CertificateClient.getCertificateVersion(java.lang.String,java.lang.String)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CertificateClient#getCertificateVersion(String, String)\"></xref>. This will return the <xref uid=\"com.azure.security.keyvault.certificates.models.KeyVaultCertificate\" data-throw-if-not-resolved=\"false\" data-raw-source=\"certificate\"></xref> with all its properties excluding the policy.\n\n```java\nfor (CertificateProperties certificateProperties : certificateClient\n     .listPropertiesOfCertificateVersions(\"certificateName\")) {\n     KeyVaultCertificate certificateWithAllProperties = certificateClient\n         .getCertificateVersion(certificateProperties.getName(), certificateProperties.getVersion());\n     System.out.printf(\"Received certificate's version with name %s, version %s and secret id %s%n\",\n         certificateWithAllProperties.getProperties().getName(),\n         certificateWithAllProperties.getProperties().getVersion(), certificateWithAllProperties.getSecretId());\n }\n```"
  returns:
    description: "A <xref uid=\"com.azure.core.http.rest.PagedIterable\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedIterable\"></xref> containing <xref uid=\"com.azure.security.keyvault.certificates.models.CertificateProperties\" data-throw-if-not-resolved=\"false\" data-raw-source=\"certificate\"></xref> of all the versions of the specified certificate in the vault. Iterable is empty if certificate with <code>certificateName</code> does not exist in key vault."
    type: "<xref href=\"com.azure.core.http.rest.PagedIterable?alt=com.azure.core.http.rest.PagedIterable&text=PagedIterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.security.keyvault.certificates.models.CertificateProperties?alt=com.azure.security.keyvault.certificates.models.CertificateProperties&text=CertificateProperties\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.security.keyvault.certificates.CertificateClient.listPropertiesOfCertificates()"
  fullName: "com.azure.security.keyvault.certificates.CertificateClient.listPropertiesOfCertificates()"
  name: "listPropertiesOfCertificates()"
  nameWithType: "CertificateClient.listPropertiesOfCertificates()"
  summary: "List certificates in a the key vault."
  syntax: "public PagedIterable<CertificateProperties> listPropertiesOfCertificates()"
  desc: "List certificates in a the key vault. Retrieves the set of certificates resources in the key vault and the individual certificate response in the iterable is represented by <xref uid=\"com.azure.security.keyvault.certificates.models.CertificateProperties\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CertificateProperties\"></xref> as only the certificate identifier, thumbprint, attributes and tags are provided in the response. The policy and individual certificate versions are not listed in the response. This operation requires the certificates/list permission.\n\nIt is possible to get certificates with all the properties excluding the policy from this information. Loop over the <xref uid=\"com.azure.security.keyvault.certificates.models.CertificateProperties\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CertificateProperties\"></xref> and call <xref uid=\"com.azure.security.keyvault.certificates.CertificateClient.getCertificateVersion(java.lang.String,java.lang.String)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CertificateClient#getCertificateVersion(String, String)\"></xref> . This will return the <xref uid=\"com.azure.security.keyvault.certificates.models.KeyVaultCertificate\" data-throw-if-not-resolved=\"false\" data-raw-source=\"certificate\"></xref> with all its properties excluding the policy.\n\n```java\nfor (CertificateProperties certificateProperties : certificateClient.listPropertiesOfCertificates()) {\n     KeyVaultCertificate certificateWithAllProperties = certificateClient\n         .getCertificateVersion(certificateProperties.getName(), certificateProperties.getVersion());\n     System.out.printf(\"Received certificate with name %s and secret id %s%n\",\n         certificateWithAllProperties.getProperties().getName(),\n         certificateWithAllProperties.getSecretId());\n }\n```"
  returns:
    description: "A <xref uid=\"com.azure.core.http.rest.PagedIterable\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedIterable\"></xref> containing <xref uid=\"com.azure.security.keyvault.certificates.models.CertificateProperties\" data-throw-if-not-resolved=\"false\" data-raw-source=\"certificate\"></xref> for all the certificates in the vault."
    type: "<xref href=\"com.azure.core.http.rest.PagedIterable?alt=com.azure.core.http.rest.PagedIterable&text=PagedIterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.security.keyvault.certificates.models.CertificateProperties?alt=com.azure.security.keyvault.certificates.models.CertificateProperties&text=CertificateProperties\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.security.keyvault.certificates.CertificateClient.listPropertiesOfCertificates(boolean,com.azure.core.util.Context)"
  fullName: "com.azure.security.keyvault.certificates.CertificateClient.listPropertiesOfCertificates(boolean includePending, Context context)"
  name: "listPropertiesOfCertificates(boolean includePending, Context context)"
  nameWithType: "CertificateClient.listPropertiesOfCertificates(boolean includePending, Context context)"
  summary: "List certificates in a the key vault."
  parameters:
  - description: "indicate if pending certificates should be included in the results."
    name: "includePending"
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional context that is passed through the Http pipeline during the service call."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PagedIterable<CertificateProperties> listPropertiesOfCertificates(boolean includePending, Context context)"
  desc: "List certificates in a the key vault. Retrieves the set of certificates resources in the key vault and the individual certificate response in the iterable is represented by <xref uid=\"com.azure.security.keyvault.certificates.models.CertificateProperties\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CertificateProperties\"></xref> as only the certificate identifier, thumbprint, attributes and tags are provided in the response. The policy and individual certificate versions are not listed in the response. This operation requires the certificates/list permission.\n\nIt is possible to get certificates with all the properties excluding the policy from this information. Loop over the <xref uid=\"com.azure.security.keyvault.certificates.models.CertificateProperties\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CertificateProperties\"></xref> and call <xref uid=\"com.azure.security.keyvault.certificates.CertificateClient.getCertificateVersion(java.lang.String,java.lang.String)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CertificateClient#getCertificateVersion(String, String)\"></xref> . This will return the <xref uid=\"com.azure.security.keyvault.certificates.models.KeyVaultCertificate\" data-throw-if-not-resolved=\"false\" data-raw-source=\"certificate\"></xref> with all its properties excluding the policy.\n\n```java\nfor (CertificateProperties certificateProperties : certificateClient\n     .listPropertiesOfCertificates(true, new Context(key1, value1))) {\n     KeyVaultCertificate certificateWithAllProperties = certificateClient\n         .getCertificateVersion(certificateProperties.getName(), certificateProperties.getVersion());\n     System.out.printf(\"Received certificate with name %s and secret id %s%n\",\n         certificateWithAllProperties.getProperties().getName(),\n         certificateWithAllProperties.getSecretId());\n }\n```"
  returns:
    description: "A <xref uid=\"com.azure.core.http.rest.PagedIterable\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedIterable\"></xref> containing <xref uid=\"com.azure.security.keyvault.certificates.models.CertificateProperties\" data-throw-if-not-resolved=\"false\" data-raw-source=\"certificate\"></xref> for all the certificates in the vault."
    type: "<xref href=\"com.azure.core.http.rest.PagedIterable?alt=com.azure.core.http.rest.PagedIterable&text=PagedIterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.security.keyvault.certificates.models.CertificateProperties?alt=com.azure.security.keyvault.certificates.models.CertificateProperties&text=CertificateProperties\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.security.keyvault.certificates.CertificateClient.listPropertiesOfIssuers()"
  fullName: "com.azure.security.keyvault.certificates.CertificateClient.listPropertiesOfIssuers()"
  name: "listPropertiesOfIssuers()"
  nameWithType: "CertificateClient.listPropertiesOfIssuers()"
  summary: "List all the certificate issuers resources in the key vault."
  syntax: "public PagedIterable<IssuerProperties> listPropertiesOfIssuers()"
  desc: "List all the certificate issuers resources in the key vault. The individual certificate issuer response in the iterable is represented by <xref uid=\"com.azure.security.keyvault.certificates.models.IssuerProperties\" data-throw-if-not-resolved=\"false\" data-raw-source=\"IssuerProperties\"></xref> as only the certificate issuer identifier and provider are provided in the response. This operation requires the `certificates/manageissuers/getissuers` permission.\n\nIt is possible to get the certificate issuer with all of its properties from this information. Loop over the <xref uid=\"com.azure.security.keyvault.certificates.models.IssuerProperties\" data-throw-if-not-resolved=\"false\" data-raw-source=\"issuerProperties\"></xref> and call <xref uid=\"com.azure.security.keyvault.certificates.CertificateClient.getIssuer(java.lang.String)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CertificateClient#getIssuer(String)\"></xref> . This will return the <xref uid=\"com.azure.security.keyvault.certificates.models.CertificateIssuer\" data-throw-if-not-resolved=\"false\" data-raw-source=\"issuer\"></xref> with all its properties.\n\n.\n\n```java\nfor (IssuerProperties issuer : certificateClient.listPropertiesOfIssuers()) {\n     CertificateIssuer retrievedIssuer = certificateClient.getIssuer(issuer.getName());\n     System.out.printf(\"Received issuer with name %s and provider %s%n\", retrievedIssuer.getName(),\n         retrievedIssuer.getProvider());\n }\n```"
  returns:
    description: "A <xref uid=\"com.azure.core.http.rest.PagedIterable\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedIterable\"></xref> containing all of the <xref uid=\"com.azure.security.keyvault.certificates.models.IssuerProperties\" data-throw-if-not-resolved=\"false\" data-raw-source=\"certificate issuers\"></xref> in the vault."
    type: "<xref href=\"com.azure.core.http.rest.PagedIterable?alt=com.azure.core.http.rest.PagedIterable&text=PagedIterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.security.keyvault.certificates.models.IssuerProperties?alt=com.azure.security.keyvault.certificates.models.IssuerProperties&text=IssuerProperties\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.security.keyvault.certificates.CertificateClient.listPropertiesOfIssuers(com.azure.core.util.Context)"
  fullName: "com.azure.security.keyvault.certificates.CertificateClient.listPropertiesOfIssuers(Context context)"
  name: "listPropertiesOfIssuers(Context context)"
  nameWithType: "CertificateClient.listPropertiesOfIssuers(Context context)"
  summary: "List all the certificate issuers resources in the key vault."
  parameters:
  - description: "Additional context that is passed through the Http pipeline during the service call."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PagedIterable<IssuerProperties> listPropertiesOfIssuers(Context context)"
  desc: "List all the certificate issuers resources in the key vault. The individual certificate issuer response in the iterable is represented by <xref uid=\"com.azure.security.keyvault.certificates.models.IssuerProperties\" data-throw-if-not-resolved=\"false\" data-raw-source=\"IssuerProperties\"></xref> as only the certificate issuer identifier and provider are provided in the response. This operation requires the `certificates/manageissuers/getissuers` permission.\n\nIt is possible to get the certificate issuer with all of its properties from this information. Loop over the <xref uid=\"com.azure.security.keyvault.certificates.models.IssuerProperties\" data-throw-if-not-resolved=\"false\" data-raw-source=\"issuerProperties\"></xref> and call <xref uid=\"com.azure.security.keyvault.certificates.CertificateClient.getIssuer(java.lang.String)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CertificateClient#getIssuer(String)\"></xref>. This will return the <xref uid=\"com.azure.security.keyvault.certificates.models.CertificateIssuer\" data-throw-if-not-resolved=\"false\" data-raw-source=\"issuer\"></xref> with all its properties.\n\n.\n\n```java\nfor (IssuerProperties issuer : certificateClient.listPropertiesOfIssuers(new Context(key1, value1))) {\n     CertificateIssuer retrievedIssuer = certificateClient.getIssuer(issuer.getName());\n     System.out.printf(\"Received issuer with name %s and provider %s%n\", retrievedIssuer.getName(),\n         retrievedIssuer.getProvider());\n }\n```"
  returns:
    description: "A <xref uid=\"com.azure.core.http.rest.PagedIterable\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedIterable\"></xref> containing all of the <xref uid=\"com.azure.security.keyvault.certificates.models.IssuerProperties\" data-throw-if-not-resolved=\"false\" data-raw-source=\"certificate issuers\"></xref> in the vault."
    type: "<xref href=\"com.azure.core.http.rest.PagedIterable?alt=com.azure.core.http.rest.PagedIterable&text=PagedIterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.security.keyvault.certificates.models.IssuerProperties?alt=com.azure.security.keyvault.certificates.models.IssuerProperties&text=IssuerProperties\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.security.keyvault.certificates.CertificateClient.mergeCertificate(com.azure.security.keyvault.certificates.models.MergeCertificateOptions)"
  fullName: "com.azure.security.keyvault.certificates.CertificateClient.mergeCertificate(MergeCertificateOptions mergeCertificateOptions)"
  name: "mergeCertificate(MergeCertificateOptions mergeCertificateOptions)"
  nameWithType: "CertificateClient.mergeCertificate(MergeCertificateOptions mergeCertificateOptions)"
  summary: "Merges a certificate or a certificate chain with a key pair currently available in the service."
  parameters:
  - description: "the merge certificate configuration holding the x509 certificates."
    name: "mergeCertificateOptions"
    type: "<xref href=\"com.azure.security.keyvault.certificates.models.MergeCertificateOptions?alt=com.azure.security.keyvault.certificates.models.MergeCertificateOptions&text=MergeCertificateOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public KeyVaultCertificateWithPolicy mergeCertificate(MergeCertificateOptions mergeCertificateOptions)"
  desc: "Merges a certificate or a certificate chain with a key pair currently available in the service. This operation requires the `certificates/create` permission.\n\n**Code Samples**\n\nMerges a certificate with a kay pair available in the service.\n\n```java\nList<byte[]> x509CertificatesToMerge = new ArrayList<>();\n MergeCertificateOptions config =\n     new MergeCertificateOptions(\"certificateName\", x509CertificatesToMerge)\n         .setEnabled(false);\n KeyVaultCertificate mergedCertificate = certificateClient.mergeCertificate(config);\n System.out.printf(\"Received Certificate with name %s and key id %s%n\",\n     mergedCertificate.getProperties().getName(), mergedCertificate.getKeyId());\n```"
  returns:
    description: "The merged certificate."
    type: "<xref href=\"com.azure.security.keyvault.certificates.models.KeyVaultCertificateWithPolicy?alt=com.azure.security.keyvault.certificates.models.KeyVaultCertificateWithPolicy&text=KeyVaultCertificateWithPolicy\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.security.keyvault.certificates.CertificateClient.mergeCertificateWithResponse(com.azure.security.keyvault.certificates.models.MergeCertificateOptions,com.azure.core.util.Context)"
  fullName: "com.azure.security.keyvault.certificates.CertificateClient.mergeCertificateWithResponse(MergeCertificateOptions mergeCertificateOptions, Context context)"
  name: "mergeCertificateWithResponse(MergeCertificateOptions mergeCertificateOptions, Context context)"
  nameWithType: "CertificateClient.mergeCertificateWithResponse(MergeCertificateOptions mergeCertificateOptions, Context context)"
  summary: "Merges a certificate or a certificate chain with a key pair currently available in the service."
  parameters:
  - description: "the merge certificate configuration holding the x509 certificates."
    name: "mergeCertificateOptions"
    type: "<xref href=\"com.azure.security.keyvault.certificates.models.MergeCertificateOptions?alt=com.azure.security.keyvault.certificates.models.MergeCertificateOptions&text=MergeCertificateOptions\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional context that is passed through the Http pipeline during the service call."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<KeyVaultCertificateWithPolicy> mergeCertificateWithResponse(MergeCertificateOptions mergeCertificateOptions, Context context)"
  desc: "Merges a certificate or a certificate chain with a key pair currently available in the service. This operation requires the `certificates/create` permission.\n\n**Code Samples**\n\nMerges a certificate with a kay pair available in the service.\n\n```java\nList<byte[]> x509CertsToMerge = new ArrayList<>();\n MergeCertificateOptions mergeConfig =\n     new MergeCertificateOptions(\"certificateName\", x509CertsToMerge)\n         .setEnabled(false);\n Response<KeyVaultCertificateWithPolicy> mergedCertificateWithResponse =\n     certificateClient.mergeCertificateWithResponse(mergeConfig, new Context(key2, value2));\n System.out.printf(\"Received Certificate with name %s and key id %s%n\",\n     mergedCertificateWithResponse.getValue().getProperties().getName(),\n     mergedCertificateWithResponse.getValue().getKeyId());\n```"
  returns:
    description: "A <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> whose <xref uid=\"com.azure.core.http.rest.Response.getValue*\" data-throw-if-not-resolved=\"false\" data-raw-source=\"value\"></xref> contains the merged certificate."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.security.keyvault.certificates.models.KeyVaultCertificateWithPolicy?alt=com.azure.security.keyvault.certificates.models.KeyVaultCertificateWithPolicy&text=KeyVaultCertificateWithPolicy\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.security.keyvault.certificates.CertificateClient.purgeDeletedCertificate(java.lang.String)"
  fullName: "com.azure.security.keyvault.certificates.CertificateClient.purgeDeletedCertificate(String certificateName)"
  name: "purgeDeletedCertificate(String certificateName)"
  nameWithType: "CertificateClient.purgeDeletedCertificate(String certificateName)"
  summary: "Permanently deletes the specified deleted certificate without possibility for recovery."
  parameters:
  - description: "The name of the deleted certificate."
    name: "certificateName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public void purgeDeletedCertificate(String certificateName)"
  desc: "Permanently deletes the specified deleted certificate without possibility for recovery. The Purge Deleted Certificate operation is applicable for soft-delete enabled vaults and is not available if the recovery level does not specify 'Purgeable'. This operation requires the certificate/purge permission.\n\n**Code Samples**\n\nPurges the deleted certificate from the key vault enabled for soft-delete. Prints out the status code from the server response when a response has been received.\n\n```java\ncertificateClient.purgeDeletedCertificate(\"certificateName\");\n```"
- uid: "com.azure.security.keyvault.certificates.CertificateClient.purgeDeletedCertificateWithResponse(java.lang.String,com.azure.core.util.Context)"
  fullName: "com.azure.security.keyvault.certificates.CertificateClient.purgeDeletedCertificateWithResponse(String certificateName, Context context)"
  name: "purgeDeletedCertificateWithResponse(String certificateName, Context context)"
  nameWithType: "CertificateClient.purgeDeletedCertificateWithResponse(String certificateName, Context context)"
  summary: "Permanently deletes the specified deleted certificate without possibility for recovery."
  parameters:
  - description: "The name of the deleted certificate."
    name: "certificateName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional context that is passed through the Http pipeline during the service call."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<Void> purgeDeletedCertificateWithResponse(String certificateName, Context context)"
  desc: "Permanently deletes the specified deleted certificate without possibility for recovery. The Purge Deleted Certificate operation is applicable for soft-delete enabled vaults and is not available if the recovery level does not specify 'Purgeable'. This operation requires the certificate/purge permission.\n\n**Code Samples**\n\nPurges the deleted certificate from the key vault enabled for soft-delete. Prints out the status code from the server response when a response has been received.\n\n```java\nResponse<Void> purgeResponse = certificateClient.purgeDeletedCertificateWithResponse(\"certificateName\",\n     new Context(key1, value1));\n System.out.printf(\"Purged Deleted certificate with status %d%n\", purgeResponse.getStatusCode());\n```"
  returns:
    description: "A response containing status code and HTTP headers."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.security.keyvault.certificates.CertificateClient.restoreCertificateBackup(byte[])"
  fullName: "com.azure.security.keyvault.certificates.CertificateClient.restoreCertificateBackup(byte[] backup)"
  name: "restoreCertificateBackup(byte[] backup)"
  nameWithType: "CertificateClient.restoreCertificateBackup(byte[] backup)"
  summary: "Restores a backed up certificate to the vault."
  parameters:
  - description: "The backup blob associated with the certificate."
    name: "backup"
    type: "<xref href=\"byte?alt=byte&text=byte\" data-throw-if-not-resolved=\"False\" />[]"
  syntax: "public KeyVaultCertificateWithPolicy restoreCertificateBackup(byte[] backup)"
  desc: "Restores a backed up certificate to the vault. All the versions of the certificate are restored to the vault. This operation requires the certificates/restore permission.\n\n**Code Samples**\n\nRestores the certificate in the key vault from its backup. Prints out the restored certificate details when a response has been received.\n\n```java\nbyte[] certificateBackupBlob = {};\n KeyVaultCertificate certificate = certificateClient.restoreCertificateBackup(certificateBackupBlob);\n System.out.printf(\" Restored certificate with name %s and id %s%n\",\n     certificate.getProperties().getName(), certificate.getProperties().getId());\n```"
  returns:
    description: "The <xref uid=\"com.azure.security.keyvault.certificates.models.KeyVaultCertificate\" data-throw-if-not-resolved=\"false\" data-raw-source=\"restored certificate\"></xref>."
    type: "<xref href=\"com.azure.security.keyvault.certificates.models.KeyVaultCertificateWithPolicy?alt=com.azure.security.keyvault.certificates.models.KeyVaultCertificateWithPolicy&text=KeyVaultCertificateWithPolicy\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.security.keyvault.certificates.CertificateClient.restoreCertificateBackupWithResponse(byte[],com.azure.core.util.Context)"
  fullName: "com.azure.security.keyvault.certificates.CertificateClient.restoreCertificateBackupWithResponse(byte[] backup, Context context)"
  name: "restoreCertificateBackupWithResponse(byte[] backup, Context context)"
  nameWithType: "CertificateClient.restoreCertificateBackupWithResponse(byte[] backup, Context context)"
  summary: "Restores a backed up certificate to the vault."
  parameters:
  - description: "The backup blob associated with the certificate."
    name: "backup"
    type: "<xref href=\"byte?alt=byte&text=byte\" data-throw-if-not-resolved=\"False\" />[]"
  - description: "Additional context that is passed through the Http pipeline during the service call."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<KeyVaultCertificateWithPolicy> restoreCertificateBackupWithResponse(byte[] backup, Context context)"
  desc: "Restores a backed up certificate to the vault. All the versions of the certificate are restored to the vault. This operation requires the certificates/restore permission.\n\n**Code Samples**\n\nRestores the certificate in the key vault from its backup. Prints out the restored certificate details when a response has been received.\n\n```java\nbyte[] certificateBackupBlobArray = {};\n Response<KeyVaultCertificateWithPolicy> certificateResponse = certificateClient\n     .restoreCertificateBackupWithResponse(certificateBackupBlobArray, new Context(key1, value1));\n System.out.printf(\" Restored certificate with name %s and id %s%n\",\n     certificateResponse.getValue().getProperties().getName(),\n     certificateResponse.getValue().getProperties().getId());\n```"
  returns:
    description: "A <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> whose <xref uid=\"com.azure.core.http.rest.Response.getValue*\" data-throw-if-not-resolved=\"false\" data-raw-source=\"value\"></xref> contains the <xref uid=\"com.azure.security.keyvault.certificates.models.KeyVaultCertificate\" data-throw-if-not-resolved=\"false\" data-raw-source=\"restored certificate\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.security.keyvault.certificates.models.KeyVaultCertificateWithPolicy?alt=com.azure.security.keyvault.certificates.models.KeyVaultCertificateWithPolicy&text=KeyVaultCertificateWithPolicy\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.security.keyvault.certificates.CertificateClient.setContacts(java.util.List<com.azure.security.keyvault.certificates.models.CertificateContact>)"
  fullName: "com.azure.security.keyvault.certificates.CertificateClient.setContacts(List<CertificateContact> contacts)"
  name: "setContacts(List<CertificateContact> contacts)"
  nameWithType: "CertificateClient.setContacts(List<CertificateContact> contacts)"
  summary: "Sets the certificate contacts on the key vault."
  parameters:
  - description: "The list of contacts to set on the vault."
    name: "contacts"
    type: "<xref href=\"java.util.List?alt=java.util.List&text=List\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.security.keyvault.certificates.models.CertificateContact?alt=com.azure.security.keyvault.certificates.models.CertificateContact&text=CertificateContact\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public PagedIterable<CertificateContact> setContacts(List<CertificateContact> contacts)"
  desc: "Sets the certificate contacts on the key vault. This operation requires the `certificates/managecontacts` permission.\n\nThe <xref uid=\"com.azure.security.keyvault.certificates.models.LifetimeAction\" data-throw-if-not-resolved=\"false\" data-raw-source=\"LifetimeAction\"></xref> of type <xref uid=\"com.azure.security.keyvault.certificates.models.CertificatePolicyAction.EMAIL_CONTACTS\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CertificatePolicyAction#EMAIL_CONTACTS\"></xref> set on a <xref uid=\"com.azure.security.keyvault.certificates.models.CertificatePolicy\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CertificatePolicy\"></xref> emails the contacts set on the vault when triggered.\n\n**Code Samples**\n\nSets the certificate contacts in the Azure Key Vault. Prints out the returned contacts details.\n\n```java\nCertificateContact contactToAdd = new CertificateContact().setName(\"user\").setEmail(\"useremail@example.com\");\n for (CertificateContact contact : certificateClient.setContacts(Collections.singletonList(contactToAdd))) {\n     System.out.printf(\"Added contact with name %s and email %s to key vault%n\", contact.getName(),\n         contact.getEmail());\n }\n```"
  returns:
    description: "A <xref uid=\"com.azure.core.http.rest.PagedIterable\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedIterable\"></xref> containing all of the <xref uid=\"com.azure.security.keyvault.certificates.models.CertificateContact\" data-throw-if-not-resolved=\"false\" data-raw-source=\"certificate contacts\"></xref> in the vault."
    type: "<xref href=\"com.azure.core.http.rest.PagedIterable?alt=com.azure.core.http.rest.PagedIterable&text=PagedIterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.security.keyvault.certificates.models.CertificateContact?alt=com.azure.security.keyvault.certificates.models.CertificateContact&text=CertificateContact\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.security.keyvault.certificates.CertificateClient.setContacts(java.util.List<com.azure.security.keyvault.certificates.models.CertificateContact>,com.azure.core.util.Context)"
  fullName: "com.azure.security.keyvault.certificates.CertificateClient.setContacts(List<CertificateContact> contacts, Context context)"
  name: "setContacts(List<CertificateContact> contacts, Context context)"
  nameWithType: "CertificateClient.setContacts(List<CertificateContact> contacts, Context context)"
  summary: "Sets the certificate contacts on the key vault."
  parameters:
  - description: "The list of contacts to set on the vault."
    name: "contacts"
    type: "<xref href=\"java.util.List?alt=java.util.List&text=List\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.security.keyvault.certificates.models.CertificateContact?alt=com.azure.security.keyvault.certificates.models.CertificateContact&text=CertificateContact\" data-throw-if-not-resolved=\"False\" />&gt;"
  - description: "Additional context that is passed through the Http pipeline during the service call."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PagedIterable<CertificateContact> setContacts(List<CertificateContact> contacts, Context context)"
  desc: "Sets the certificate contacts on the key vault. This operation requires the `certificates/managecontacts` permission.\n\nThe <xref uid=\"com.azure.security.keyvault.certificates.models.LifetimeAction\" data-throw-if-not-resolved=\"false\" data-raw-source=\"LifetimeAction\"></xref> of type <xref uid=\"com.azure.security.keyvault.certificates.models.CertificatePolicyAction.EMAIL_CONTACTS\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CertificatePolicyAction#EMAIL_CONTACTS\"></xref> set on a <xref uid=\"com.azure.security.keyvault.certificates.models.CertificatePolicy\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CertificatePolicy\"></xref> emails the contacts set on the vault when triggered.\n\n**Code Samples**\n\nSets the certificate contacts in the Azure Key Vault. Prints out the returned contacts details.\n\n```java\nCertificateContact sampleContact = new CertificateContact().setName(\"user\").setEmail(\"useremail@example.com\");\n for (CertificateContact contact : certificateClient.setContacts(Collections.singletonList(sampleContact),\n     new Context(key1, value1))) {\n     System.out.printf(\"Added contact with name %s and email %s to key vault%n\", contact.getName(),\n         contact.getEmail());\n }\n```"
  returns:
    description: "A <xref uid=\"com.azure.core.http.rest.PagedIterable\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedIterable\"></xref> containing all of the <xref uid=\"com.azure.security.keyvault.certificates.models.CertificateContact\" data-throw-if-not-resolved=\"false\" data-raw-source=\"certificate contacts\"></xref> in the vault."
    type: "<xref href=\"com.azure.core.http.rest.PagedIterable?alt=com.azure.core.http.rest.PagedIterable&text=PagedIterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.security.keyvault.certificates.models.CertificateContact?alt=com.azure.security.keyvault.certificates.models.CertificateContact&text=CertificateContact\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.security.keyvault.certificates.CertificateClient.updateCertificatePolicy(java.lang.String,com.azure.security.keyvault.certificates.models.CertificatePolicy)"
  fullName: "com.azure.security.keyvault.certificates.CertificateClient.updateCertificatePolicy(String certificateName, CertificatePolicy policy)"
  name: "updateCertificatePolicy(String certificateName, CertificatePolicy policy)"
  nameWithType: "CertificateClient.updateCertificatePolicy(String certificateName, CertificatePolicy policy)"
  summary: "Updates the policy for a certificate."
  parameters:
  - description: "The name of the certificate whose policy is to be updated."
    name: "certificateName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The certificate policy to be updated."
    name: "policy"
    type: "<xref href=\"com.azure.security.keyvault.certificates.models.CertificatePolicy?alt=com.azure.security.keyvault.certificates.models.CertificatePolicy&text=CertificatePolicy\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public CertificatePolicy updateCertificatePolicy(String certificateName, CertificatePolicy policy)"
  desc: "Updates the policy for a certificate. The update operation changes specified attributes of the certificate policy and attributes that are not specified in the request are left unchanged. This operation requires the `certificates/update` permission.\n\n**Code Samples**\n\nGets the certificate policy, changes its properties and then updates it in the Azure Key Vault. Prints out the returned policy details when a response has been received.\n\n```java\nCertificatePolicy certificatePolicy = certificateClient.getCertificatePolicy(\"certificateName\");\n //Update the certificate policy cert transparency property.\n certificatePolicy.setCertificateTransparent(true);\n CertificatePolicy updatedCertPolicy = certificateClient.updateCertificatePolicy(\"certificateName\",\n     certificatePolicy);\n System.out.printf(\"Updated Certificate Policy transparency status %s%n\",\n     updatedCertPolicy.isCertificateTransparent());\n```"
  returns:
    description: "The updated <xref uid=\"com.azure.security.keyvault.certificates.models.CertificatePolicy\" data-throw-if-not-resolved=\"false\" data-raw-source=\"certificate policy\"></xref>."
    type: "<xref href=\"com.azure.security.keyvault.certificates.models.CertificatePolicy?alt=com.azure.security.keyvault.certificates.models.CertificatePolicy&text=CertificatePolicy\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.security.keyvault.certificates.CertificateClient.updateCertificatePolicyWithResponse(java.lang.String,com.azure.security.keyvault.certificates.models.CertificatePolicy,com.azure.core.util.Context)"
  fullName: "com.azure.security.keyvault.certificates.CertificateClient.updateCertificatePolicyWithResponse(String certificateName, CertificatePolicy policy, Context context)"
  name: "updateCertificatePolicyWithResponse(String certificateName, CertificatePolicy policy, Context context)"
  nameWithType: "CertificateClient.updateCertificatePolicyWithResponse(String certificateName, CertificatePolicy policy, Context context)"
  summary: "Updates the policy for a certificate."
  parameters:
  - description: "The certificateName of the certificate whose policy is to be updated."
    name: "certificateName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The certificate policy to be updated."
    name: "policy"
    type: "<xref href=\"com.azure.security.keyvault.certificates.models.CertificatePolicy?alt=com.azure.security.keyvault.certificates.models.CertificatePolicy&text=CertificatePolicy\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional context that is passed through the Http pipeline during the service call."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<CertificatePolicy> updateCertificatePolicyWithResponse(String certificateName, CertificatePolicy policy, Context context)"
  desc: "Updates the policy for a certificate. The update operation changes specified attributes of the certificate policy and attributes that are not specified in the request are left unchanged. This operation requires the `certificates/update` permission.\n\n**Code Samples**\n\nGets the certificate policy, changes its properties and then updates it in the Azure Key Vault. Prints out the returned policy details when a response has been received.\n\n```java\nCertificatePolicy certificatePolicyToUpdate = certificateClient.getCertificatePolicy(\"certificateName\");\n //Update the certificate policy cert transparency property.\n certificatePolicyToUpdate.setCertificateTransparent(true);\n Response<CertificatePolicy> updatedCertPolicyWithResponse = certificateClient\n     .updateCertificatePolicyWithResponse(\"certificateName\", certificatePolicyToUpdate,\n         new Context(key1, value1));\n System.out.printf(\"Updated Certificate Policy transparency status %s%n\", updatedCertPolicyWithResponse\n     .getValue().isCertificateTransparent());\n```"
  returns:
    description: "A <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> whose <xref uid=\"com.azure.core.http.rest.Response.getValue*\" data-throw-if-not-resolved=\"false\" data-raw-source=\"value\"></xref> contains the updated <xref uid=\"com.azure.security.keyvault.certificates.models.CertificatePolicy\" data-throw-if-not-resolved=\"false\" data-raw-source=\"certificate policy\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.security.keyvault.certificates.models.CertificatePolicy?alt=com.azure.security.keyvault.certificates.models.CertificatePolicy&text=CertificatePolicy\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.security.keyvault.certificates.CertificateClient.updateCertificateProperties(com.azure.security.keyvault.certificates.models.CertificateProperties)"
  fullName: "com.azure.security.keyvault.certificates.CertificateClient.updateCertificateProperties(CertificateProperties properties)"
  name: "updateCertificateProperties(CertificateProperties properties)"
  nameWithType: "CertificateClient.updateCertificateProperties(CertificateProperties properties)"
  summary: "Updates the specified attributes associated with the specified certificate."
  parameters:
  - description: "The <xref uid=\"com.azure.security.keyvault.certificates.models.CertificateProperties\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CertificateProperties\"></xref> object with updated properties."
    name: "properties"
    type: "<xref href=\"com.azure.security.keyvault.certificates.models.CertificateProperties?alt=com.azure.security.keyvault.certificates.models.CertificateProperties&text=CertificateProperties\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public KeyVaultCertificate updateCertificateProperties(CertificateProperties properties)"
  desc: "Updates the specified attributes associated with the specified certificate. The update operation changes specified attributes of an existing stored certificate and attributes that are not specified in the request are left unchanged. This operation requires the certificates/update permission.\n\n**Code Samples**\n\nGets latest version of the certificate, changes its tags and enabled status and then updates it in the Azure Key Vault. Prints out the returned certificate details when a response has been received.\n\n```java\nKeyVaultCertificate certificate = certificateClient.getCertificate(\"certificateName\");\n // Update certificate enabled status\n certificate.getProperties().setEnabled(false);\n KeyVaultCertificate updatedCertificate = certificateClient.updateCertificateProperties(certificate.getProperties());\n System.out.printf(\"Updated Certificate with name %s and enabled status %s%n\",\n     updatedCertificate.getProperties().getName(), updatedCertificate.getProperties().isEnabled());\n```"
  returns:
    description: "The <xref uid=\"com.azure.security.keyvault.certificates.models.CertificateProperties\" data-throw-if-not-resolved=\"false\" data-raw-source=\"updated certificate\"></xref>."
    type: "<xref href=\"com.azure.security.keyvault.certificates.models.KeyVaultCertificate?alt=com.azure.security.keyvault.certificates.models.KeyVaultCertificate&text=KeyVaultCertificate\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.security.keyvault.certificates.CertificateClient.updateCertificatePropertiesWithResponse(com.azure.security.keyvault.certificates.models.CertificateProperties,com.azure.core.util.Context)"
  fullName: "com.azure.security.keyvault.certificates.CertificateClient.updateCertificatePropertiesWithResponse(CertificateProperties properties, Context context)"
  name: "updateCertificatePropertiesWithResponse(CertificateProperties properties, Context context)"
  nameWithType: "CertificateClient.updateCertificatePropertiesWithResponse(CertificateProperties properties, Context context)"
  summary: "Updates the specified attributes associated with the specified certificate."
  parameters:
  - description: "The <xref uid=\"com.azure.security.keyvault.certificates.models.CertificateProperties\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CertificateProperties\"></xref> object with updated properties."
    name: "properties"
    type: "<xref href=\"com.azure.security.keyvault.certificates.models.CertificateProperties?alt=com.azure.security.keyvault.certificates.models.CertificateProperties&text=CertificateProperties\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional context that is passed through the Http pipeline during the service call."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<KeyVaultCertificate> updateCertificatePropertiesWithResponse(CertificateProperties properties, Context context)"
  desc: "Updates the specified attributes associated with the specified certificate. The update operation changes specified attributes of an existing stored certificate and attributes that are not specified in the request are left unchanged. This operation requires the certificates/update permission.\n\n**Code Samples**\n\nGets latest version of the certificate, changes its tags and enabled status and then updates it in the Azure Key Vault. Prints out the returned certificate details when a response has been received.\n\n```java\nKeyVaultCertificate certificateToUpdate = certificateClient.getCertificate(\"certificateName\");\n // Update certificate enabled status\n certificateToUpdate.getProperties().setEnabled(false);\n Response<KeyVaultCertificate> updatedCertificateResponse = certificateClient.\n     updateCertificatePropertiesWithResponse(certificateToUpdate.getProperties(), new Context(key1, value1));\n System.out.printf(\"Updated Certificate with name %s and enabled status %s%n\",\n     updatedCertificateResponse.getValue().getProperties().getName(),\n     updatedCertificateResponse.getValue().getProperties().isEnabled());\n```"
  returns:
    description: "A <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> whose <xref uid=\"com.azure.core.http.rest.Response.getValue*\" data-throw-if-not-resolved=\"false\" data-raw-source=\"value\"></xref> contains the <xref uid=\"com.azure.security.keyvault.certificates.models.CertificateProperties\" data-throw-if-not-resolved=\"false\" data-raw-source=\"updated certificate\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.security.keyvault.certificates.models.KeyVaultCertificate?alt=com.azure.security.keyvault.certificates.models.KeyVaultCertificate&text=KeyVaultCertificate\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.security.keyvault.certificates.CertificateClient.updateIssuer(com.azure.security.keyvault.certificates.models.CertificateIssuer)"
  fullName: "com.azure.security.keyvault.certificates.CertificateClient.updateIssuer(CertificateIssuer issuer)"
  name: "updateIssuer(CertificateIssuer issuer)"
  nameWithType: "CertificateClient.updateIssuer(CertificateIssuer issuer)"
  summary: "Updates the specified certificate issuer."
  parameters:
  - description: "The <xref uid=\"com.azure.security.keyvault.certificates.models.CertificateIssuer\" data-throw-if-not-resolved=\"false\" data-raw-source=\"issuer\"></xref> with updated properties."
    name: "issuer"
    type: "<xref href=\"com.azure.security.keyvault.certificates.models.CertificateIssuer?alt=com.azure.security.keyvault.certificates.models.CertificateIssuer&text=CertificateIssuer\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public CertificateIssuer updateIssuer(CertificateIssuer issuer)"
  desc: "Updates the specified certificate issuer. The UpdateCertificateIssuer operation updates the specified attributes of the certificate issuer entity. This operation requires the certificates/setissuers permission.\n\n**Code Samples**\n\nGets the certificate issuer, changes its attributes/properties then updates it in the Azure Key Vault. Prints out the returned certificate issuer details when a response has been received.\n\n```java\nCertificateIssuer returnedIssuer = certificateClient.getIssuer(\"issuerName\");\n returnedIssuer.setAccountId(\"newAccountId\");\n CertificateIssuer updatedIssuer = certificateClient.updateIssuer(returnedIssuer);\n System.out.printf(\"Updated issuer with name %s, provider %s and account Id %s%n\", updatedIssuer.getName(),\n     updatedIssuer.getProvider(), updatedIssuer.getAccountId());\n```"
  returns:
    description: "The <xref uid=\"com.azure.security.keyvault.certificates.models.CertificateIssuer\" data-throw-if-not-resolved=\"false\" data-raw-source=\"updated issuer\"></xref>."
    type: "<xref href=\"com.azure.security.keyvault.certificates.models.CertificateIssuer?alt=com.azure.security.keyvault.certificates.models.CertificateIssuer&text=CertificateIssuer\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.security.keyvault.certificates.CertificateClient.updateIssuerWithResponse(com.azure.security.keyvault.certificates.models.CertificateIssuer,com.azure.core.util.Context)"
  fullName: "com.azure.security.keyvault.certificates.CertificateClient.updateIssuerWithResponse(CertificateIssuer issuer, Context context)"
  name: "updateIssuerWithResponse(CertificateIssuer issuer, Context context)"
  nameWithType: "CertificateClient.updateIssuerWithResponse(CertificateIssuer issuer, Context context)"
  summary: "Updates the specified certificate issuer."
  parameters:
  - description: "The <xref uid=\"com.azure.security.keyvault.certificates.models.CertificateIssuer\" data-throw-if-not-resolved=\"false\" data-raw-source=\"issuer\"></xref> with updated properties."
    name: "issuer"
    type: "<xref href=\"com.azure.security.keyvault.certificates.models.CertificateIssuer?alt=com.azure.security.keyvault.certificates.models.CertificateIssuer&text=CertificateIssuer\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional context that is passed through the Http pipeline during the service call."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<CertificateIssuer> updateIssuerWithResponse(CertificateIssuer issuer, Context context)"
  desc: "Updates the specified certificate issuer. The UpdateCertificateIssuer operation updates the specified attributes of the certificate issuer entity. This operation requires the certificates/setissuers permission.\n\n**Code Samples**\n\nGets the certificate issuer, changes its attributes/properties then updates it in the Azure Key Vault. Prints out the returned certificate issuer details when a response has been received.\n\n```java\nCertificateIssuer issuer = certificateClient.getIssuer(\"issuerName\");\n returnedIssuer.setAccountId(\"newAccountId\");\n Response<CertificateIssuer> updatedIssuerWithResponse = certificateClient.updateIssuerWithResponse(issuer,\n     new Context(key1, value1));\n System.out.printf(\"Updated issuer with name %s, provider %s and account Id %s%n\",\n     updatedIssuerWithResponse.getValue().getName(),\n     updatedIssuerWithResponse.getValue().getProvider(),\n     updatedIssuerWithResponse.getValue().getAccountId());\n```"
  returns:
    description: "A <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> whose <xref uid=\"com.azure.core.http.rest.Response.getValue*\" data-throw-if-not-resolved=\"false\" data-raw-source=\"value\"></xref> contains the <xref uid=\"com.azure.security.keyvault.certificates.models.CertificateIssuer\" data-throw-if-not-resolved=\"false\" data-raw-source=\"updated issuer\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.security.keyvault.certificates.models.CertificateIssuer?alt=com.azure.security.keyvault.certificates.models.CertificateIssuer&text=CertificateIssuer\" data-throw-if-not-resolved=\"False\" />&gt;"
type: "class"
desc: "The CertificateClient provides synchronous methods to manage <xref uid=\"com.azure.security.keyvault.certificates.models.KeyVaultCertificate\" data-throw-if-not-resolved=\"false\" data-raw-source=\"certifcates\"></xref> in the Azure Key Vault. The client supports creating, retrieving, updating, merging, deleting, purging, backing up, restoring and listing the <xref uid=\"com.azure.security.keyvault.certificates.models.KeyVaultCertificate\" data-throw-if-not-resolved=\"false\" data-raw-source=\"certificates\"></xref>. The client also supports listing <xref uid=\"com.azure.security.keyvault.certificates.models.DeletedCertificate\" data-throw-if-not-resolved=\"false\" data-raw-source=\"deleted certificates\"></xref> for a soft-delete enabled Azure Key Vault.\n\nThe client further allows creating, retrieving, updating, deleting and listing the <xref uid=\"com.azure.security.keyvault.certificates.models.CertificateIssuer\" data-throw-if-not-resolved=\"false\" data-raw-source=\"certificate issuers\"></xref>. The client also supports creating, listing and deleting <xref uid=\"com.azure.security.keyvault.certificates.models.CertificateContact\" data-throw-if-not-resolved=\"false\" data-raw-source=\"certificate contacts\"></xref>\n\n**Samples to construct the sync client**\n\n```java\nCertificateClient certificateClient = new CertificateClientBuilder()\n     .credential(new DefaultAzureCredentialBuilder().build())\n     .vaultUrl(\"https://myvault.vault.azure.net/\")\n     .httpLogOptions(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BODY_AND_HEADERS))\n     .buildClient();\n```"
metadata: {}
package: "com.azure.security.keyvault.certificates"
artifact: com.azure:azure-security-keyvault-certificates:4.3.0-beta.5
