### YamlMime:ManagedReference
items:
- uid: com.azure.security.keyvault.certificates.CertificateClient
  id: CertificateClient
  artifact: com.azure:azure-security-keyvault-certificates:4.1.0-beta.3
  parent: com.azure.security.keyvault.certificates
  children:
  - com.azure.security.keyvault.certificates.CertificateClient.backupCertificate(java.lang.String)
  - com.azure.security.keyvault.certificates.CertificateClient.backupCertificateWithResponse(java.lang.String,com.azure.core.util.Context)
  - com.azure.security.keyvault.certificates.CertificateClient.beginCreateCertificate(java.lang.String,com.azure.security.keyvault.certificates.models.CertificatePolicy)
  - com.azure.security.keyvault.certificates.CertificateClient.beginCreateCertificate(java.lang.String,com.azure.security.keyvault.certificates.models.CertificatePolicy,java.lang.Boolean,java.util.Map<java.lang.String,java.lang.String>)
  - com.azure.security.keyvault.certificates.CertificateClient.beginDeleteCertificate(java.lang.String)
  - com.azure.security.keyvault.certificates.CertificateClient.beginRecoverDeletedCertificate(java.lang.String)
  - com.azure.security.keyvault.certificates.CertificateClient.cancelCertificateOperation(java.lang.String)
  - com.azure.security.keyvault.certificates.CertificateClient.cancelCertificateOperationWithResponse(java.lang.String,com.azure.core.util.Context)
  - com.azure.security.keyvault.certificates.CertificateClient.createIssuer(com.azure.security.keyvault.certificates.models.CertificateIssuer)
  - com.azure.security.keyvault.certificates.CertificateClient.createIssuerWithResponse(com.azure.security.keyvault.certificates.models.CertificateIssuer,com.azure.core.util.Context)
  - com.azure.security.keyvault.certificates.CertificateClient.deleteCertificateOperation(java.lang.String)
  - com.azure.security.keyvault.certificates.CertificateClient.deleteCertificateOperationWithResponse(java.lang.String,com.azure.core.util.Context)
  - com.azure.security.keyvault.certificates.CertificateClient.deleteContacts()
  - com.azure.security.keyvault.certificates.CertificateClient.deleteContacts(com.azure.core.util.Context)
  - com.azure.security.keyvault.certificates.CertificateClient.deleteIssuer(java.lang.String)
  - com.azure.security.keyvault.certificates.CertificateClient.deleteIssuerWithResponse(java.lang.String,com.azure.core.util.Context)
  - com.azure.security.keyvault.certificates.CertificateClient.getCertificate(java.lang.String)
  - com.azure.security.keyvault.certificates.CertificateClient.getCertificateOperation(java.lang.String)
  - com.azure.security.keyvault.certificates.CertificateClient.getCertificatePolicy(java.lang.String)
  - com.azure.security.keyvault.certificates.CertificateClient.getCertificatePolicyWithResponse(java.lang.String,com.azure.core.util.Context)
  - com.azure.security.keyvault.certificates.CertificateClient.getCertificateVersion(java.lang.String,java.lang.String)
  - com.azure.security.keyvault.certificates.CertificateClient.getCertificateVersionWithResponse(java.lang.String,java.lang.String,com.azure.core.util.Context)
  - com.azure.security.keyvault.certificates.CertificateClient.getCertificateWithResponse(java.lang.String,com.azure.core.util.Context)
  - com.azure.security.keyvault.certificates.CertificateClient.getDeletedCertificate(java.lang.String)
  - com.azure.security.keyvault.certificates.CertificateClient.getDeletedCertificateWithResponse(java.lang.String,com.azure.core.util.Context)
  - com.azure.security.keyvault.certificates.CertificateClient.getIssuer(java.lang.String)
  - com.azure.security.keyvault.certificates.CertificateClient.getIssuerWithResponse(java.lang.String,com.azure.core.util.Context)
  - com.azure.security.keyvault.certificates.CertificateClient.getVaultUrl()
  - com.azure.security.keyvault.certificates.CertificateClient.importCertificate(com.azure.security.keyvault.certificates.models.ImportCertificateOptions)
  - com.azure.security.keyvault.certificates.CertificateClient.importCertificateWithResponse(com.azure.security.keyvault.certificates.models.ImportCertificateOptions,com.azure.core.util.Context)
  - com.azure.security.keyvault.certificates.CertificateClient.listContacts()
  - com.azure.security.keyvault.certificates.CertificateClient.listContacts(com.azure.core.util.Context)
  - com.azure.security.keyvault.certificates.CertificateClient.listDeletedCertificates()
  - com.azure.security.keyvault.certificates.CertificateClient.listDeletedCertificates(boolean,com.azure.core.util.Context)
  - com.azure.security.keyvault.certificates.CertificateClient.listPropertiesOfCertificateVersions(java.lang.String)
  - com.azure.security.keyvault.certificates.CertificateClient.listPropertiesOfCertificateVersions(java.lang.String,com.azure.core.util.Context)
  - com.azure.security.keyvault.certificates.CertificateClient.listPropertiesOfCertificates()
  - com.azure.security.keyvault.certificates.CertificateClient.listPropertiesOfCertificates(boolean,com.azure.core.util.Context)
  - com.azure.security.keyvault.certificates.CertificateClient.listPropertiesOfIssuers()
  - com.azure.security.keyvault.certificates.CertificateClient.listPropertiesOfIssuers(com.azure.core.util.Context)
  - com.azure.security.keyvault.certificates.CertificateClient.mergeCertificate(com.azure.security.keyvault.certificates.models.MergeCertificateOptions)
  - com.azure.security.keyvault.certificates.CertificateClient.mergeCertificateWithResponse(com.azure.security.keyvault.certificates.models.MergeCertificateOptions,com.azure.core.util.Context)
  - com.azure.security.keyvault.certificates.CertificateClient.purgeDeletedCertificate(java.lang.String)
  - com.azure.security.keyvault.certificates.CertificateClient.purgeDeletedCertificateWithResponse(java.lang.String,com.azure.core.util.Context)
  - com.azure.security.keyvault.certificates.CertificateClient.restoreCertificateBackup(byte[])
  - com.azure.security.keyvault.certificates.CertificateClient.restoreCertificateBackupWithResponse(byte[],com.azure.core.util.Context)
  - com.azure.security.keyvault.certificates.CertificateClient.setContacts(java.util.List<com.azure.security.keyvault.certificates.models.CertificateContact>)
  - com.azure.security.keyvault.certificates.CertificateClient.setContacts(java.util.List<com.azure.security.keyvault.certificates.models.CertificateContact>,com.azure.core.util.Context)
  - com.azure.security.keyvault.certificates.CertificateClient.updateCertificatePolicy(java.lang.String,com.azure.security.keyvault.certificates.models.CertificatePolicy)
  - com.azure.security.keyvault.certificates.CertificateClient.updateCertificatePolicyWithResponse(java.lang.String,com.azure.security.keyvault.certificates.models.CertificatePolicy,com.azure.core.util.Context)
  - com.azure.security.keyvault.certificates.CertificateClient.updateCertificateProperties(com.azure.security.keyvault.certificates.models.CertificateProperties)
  - com.azure.security.keyvault.certificates.CertificateClient.updateCertificatePropertiesWithResponse(com.azure.security.keyvault.certificates.models.CertificateProperties,com.azure.core.util.Context)
  - com.azure.security.keyvault.certificates.CertificateClient.updateIssuer(com.azure.security.keyvault.certificates.models.CertificateIssuer)
  - com.azure.security.keyvault.certificates.CertificateClient.updateIssuerWithResponse(com.azure.security.keyvault.certificates.models.CertificateIssuer,com.azure.core.util.Context)
  langs:
  - java
  name: CertificateClient
  nameWithType: CertificateClient
  fullName: com.azure.security.keyvault.certificates.CertificateClient
  type: Class
  package: com.azure.security.keyvault.certificates
  summary: >-
    The CertificateClient provides synchronous methods to manage <xref uid="com.azure.security.keyvault.certificates.models.KeyVaultCertificate" data-throw-if-not-resolved="false">certifcates</xref> in the Azure Key Vault. The client supports creating, retrieving, updating, merging, deleting, purging, backing up, restoring and listing the <xref uid="com.azure.security.keyvault.certificates.models.KeyVaultCertificate" data-throw-if-not-resolved="false">certificates</xref>. The client also supports listing <xref uid="com.azure.security.keyvault.certificates.models.DeletedCertificate" data-throw-if-not-resolved="false">deleted certificates</xref> for a soft-delete enabled Azure Key Vault.


    The client further allows creating, retrieving, updating, deleting and listing the <xref uid="com.azure.security.keyvault.certificates.models.CertificateIssuer" data-throw-if-not-resolved="false">certificate issuers</xref>. The client also supports creating, listing and deleting <xref uid="com.azure.security.keyvault.certificates.models.CertificateContact" data-throw-if-not-resolved="false">certificate contacts</xref>


    **Samples to construct the sync client**


    ```java

    CertificateClient certificateClient = new CertificateClientBuilder()
         .credential(new DefaultAzureCredentialBuilder().build())
         .vaultUrl("https://myvault.vault.azure.net/")
         .httpLogOptions(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BODY_AND_HEADERS))
         .buildClient();
    ```
  syntax:
    content: public final class CertificateClient
  inheritance:
  - java.lang.Object
  inheritedMembers:
  - java.lang.Object.clone()
  - java.lang.Object.equals(java.lang.Object)
  - java.lang.Object.finalize()
  - java.lang.Object.getClass()
  - java.lang.Object.hashCode()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.toString()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
- uid: com.azure.security.keyvault.certificates.CertificateClient.CertificateClient(com.azure.security.keyvault.certificates.CertificateAsyncClient)
  id: CertificateClient(com.azure.security.keyvault.certificates.CertificateAsyncClient)
  artifact: com.azure:azure-security-keyvault-certificates:4.1.0-beta.3
  parent: com.azure.security.keyvault.certificates.CertificateClient
  langs:
  - java
  name: CertificateClient(CertificateAsyncClient client)
  nameWithType: CertificateClient.CertificateClient(CertificateAsyncClient client)
  fullName: com.azure.security.keyvault.certificates.CertificateClient.CertificateClient(CertificateAsyncClient client)
  overload: com.azure.security.keyvault.certificates.CertificateClient.CertificateClient*
  type: Constructor
  package: com.azure.security.keyvault.certificates
  summary: Creates a CertificateClient that uses `pipeline` to service requests
  syntax:
    content: " CertificateClient(CertificateAsyncClient client)"
    parameters:
    - id: client
      type: com.azure.security.keyvault.certificates.CertificateAsyncClient
      description: The <xref uid="com.azure.security.keyvault.certificates.CertificateAsyncClient" data-throw-if-not-resolved="false">CertificateAsyncClient</xref> that the client routes its request through.
- uid: com.azure.security.keyvault.certificates.CertificateClient.backupCertificate(java.lang.String)
  id: backupCertificate(java.lang.String)
  artifact: com.azure:azure-security-keyvault-certificates:4.1.0-beta.3
  parent: com.azure.security.keyvault.certificates.CertificateClient
  langs:
  - java
  name: backupCertificate(String certificateName)
  nameWithType: CertificateClient.backupCertificate(String certificateName)
  fullName: com.azure.security.keyvault.certificates.CertificateClient.backupCertificate(String certificateName)
  overload: com.azure.security.keyvault.certificates.CertificateClient.backupCertificate*
  type: Method
  package: com.azure.security.keyvault.certificates
  summary: >-
    Requests that a backup of the specified certificate be downloaded to the client. All versions of the certificate will be downloaded. This operation requires the certificates/backup permission.


    **Code Samples**


    Backs up the certificate from the key vault. Prints out the length of the certificate's backup byte array returned in the response.


    ```java

    byte[] certificateBackup = certificateClient.backupCertificate("certificateName");
     System.out.printf("Backed up certificate with back up blob length %d", certificateBackup.length);
    ```
  syntax:
    content: public byte[] backupCertificate(String certificateName)
    parameters:
    - id: certificateName
      type: java.lang.String
      description: The name of the certificate.
    return:
      type: byte[]
      description: The backed up certificate blob.
- uid: com.azure.security.keyvault.certificates.CertificateClient.backupCertificateWithResponse(java.lang.String,com.azure.core.util.Context)
  id: backupCertificateWithResponse(java.lang.String,com.azure.core.util.Context)
  artifact: com.azure:azure-security-keyvault-certificates:4.1.0-beta.3
  parent: com.azure.security.keyvault.certificates.CertificateClient
  langs:
  - java
  name: backupCertificateWithResponse(String certificateName, Context context)
  nameWithType: CertificateClient.backupCertificateWithResponse(String certificateName, Context context)
  fullName: com.azure.security.keyvault.certificates.CertificateClient.backupCertificateWithResponse(String certificateName, Context context)
  overload: com.azure.security.keyvault.certificates.CertificateClient.backupCertificateWithResponse*
  type: Method
  package: com.azure.security.keyvault.certificates
  summary: >-
    Requests that a backup of the specified certificate be downloaded to the client. All versions of the certificate will be downloaded. This operation requires the certificates/backup permission.


    **Code Samples**


    Backs up the certificate from the key vault. Prints out the length of the certificate's backup byte array returned in the response.


    ```java

    Response<byte[]> certificateBackupWithResponse = certificateClient
         .backupCertificateWithResponse("certificateName", new Context(key1, value1));
     System.out.printf("Backed up certificate with back up blob length %d",
         certificateBackupWithResponse.getValue().length);
    ```
  syntax:
    content: public Response<byte[]> backupCertificateWithResponse(String certificateName, Context context)
    parameters:
    - id: certificateName
      type: java.lang.String
      description: The certificateName of the certificate.
    - id: context
      type: com.azure.core.util.Context
      description: Additional context that is passed through the Http pipeline during the service call.
    return:
      type: com.azure.core.http.rest.Response<byte[]>
      description: A <xref uid="com.azure.core.http.rest.Response" data-throw-if-not-resolved="false">Response</xref> whose <xref uid="com.azure.core.http.rest.Response.getValue*" data-throw-if-not-resolved="false">value</xref> contains the backed up certificate blob.
- uid: com.azure.security.keyvault.certificates.CertificateClient.beginCreateCertificate(java.lang.String,com.azure.security.keyvault.certificates.models.CertificatePolicy)
  id: beginCreateCertificate(java.lang.String,com.azure.security.keyvault.certificates.models.CertificatePolicy)
  artifact: com.azure:azure-security-keyvault-certificates:4.1.0-beta.3
  parent: com.azure.security.keyvault.certificates.CertificateClient
  langs:
  - java
  name: beginCreateCertificate(String certificateName, CertificatePolicy policy)
  nameWithType: CertificateClient.beginCreateCertificate(String certificateName, CertificatePolicy policy)
  fullName: com.azure.security.keyvault.certificates.CertificateClient.beginCreateCertificate(String certificateName, CertificatePolicy policy)
  overload: com.azure.security.keyvault.certificates.CertificateClient.beginCreateCertificate*
  type: Method
  package: com.azure.security.keyvault.certificates
  summary: >-
    Creates a new certificate. If this is the first version, the certificate resource is created. This operation requires the certificates/create permission.


    **Code Samples**


    Create certificate is a long running operation. The createCertificate indefinitely waits for the operation to complete and returns its last status. The details of the last certificate operation status are printed when a response is received


    ```java

    CertificatePolicy certificatePolicy = new CertificatePolicy("Self",
         "CN=SelfSignedJavaPkcs12");
     SyncPoller<CertificateOperation, KeyVaultCertificateWithPolicy> certificatePoller = certificateClient
         .beginCreateCertificate("certificateName", certificatePolicy);
     certificatePoller.waitUntil(LongRunningOperationStatus.SUCCESSFULLY_COMPLETED);
     KeyVaultCertificate certificate = certificatePoller.getFinalResult();
     System.out.printf("Certificate created with name %s", certificate.getName());
    ```
  syntax:
    content: public SyncPoller<CertificateOperation,KeyVaultCertificateWithPolicy> beginCreateCertificate(String certificateName, CertificatePolicy policy)
    parameters:
    - id: certificateName
      type: java.lang.String
      description: The name of the certificate to be created.
    - id: policy
      type: com.azure.security.keyvault.certificates.models.CertificatePolicy
      description: The policy of the certificate to be created.
    return:
      type: com.azure.core.util.polling.SyncPoller<com.azure.security.keyvault.certificates.models.CertificateOperation,com.azure.security.keyvault.certificates.models.KeyVaultCertificateWithPolicy>
      description: A <xref uid="com.azure.core.util.polling.SyncPoller" data-throw-if-not-resolved="false">SyncPoller</xref> to poll on the create certificate operation status.
- uid: com.azure.security.keyvault.certificates.CertificateClient.beginCreateCertificate(java.lang.String,com.azure.security.keyvault.certificates.models.CertificatePolicy,java.lang.Boolean,java.util.Map<java.lang.String,java.lang.String>)
  id: beginCreateCertificate(java.lang.String,com.azure.security.keyvault.certificates.models.CertificatePolicy,java.lang.Boolean,java.util.Map<java.lang.String,java.lang.String>)
  artifact: com.azure:azure-security-keyvault-certificates:4.1.0-beta.3
  parent: com.azure.security.keyvault.certificates.CertificateClient
  langs:
  - java
  name: beginCreateCertificate(String certificateName, CertificatePolicy policy, Boolean isEnabled, Map<String,String> tags)
  nameWithType: CertificateClient.beginCreateCertificate(String certificateName, CertificatePolicy policy, Boolean isEnabled, Map<String,String> tags)
  fullName: com.azure.security.keyvault.certificates.CertificateClient.beginCreateCertificate(String certificateName, CertificatePolicy policy, Boolean isEnabled, Map<String,String> tags)
  overload: com.azure.security.keyvault.certificates.CertificateClient.beginCreateCertificate*
  type: Method
  package: com.azure.security.keyvault.certificates
  summary: >-
    Creates a new certificate. If this is the first version, the certificate resource is created. This operation requires the certificates/create permission.


    Create certificate is a long running operation. It indefinitely waits for the create certificate operation to complete on service side.


    **Code Samples**


    Create certificate is a long running operation. The createCertificate indefinitely waits for the operation to complete and returns its last status. The details of the last certificate operation status are printed when a response is received


    ```java

    CertificatePolicy certificatePolicyPkcsSelf = new CertificatePolicy("Self",
         "CN=SelfSignedJavaPkcs12");
     SyncPoller<CertificateOperation, KeyVaultCertificateWithPolicy> certPoller = certificateClient
         .beginCreateCertificate("certificateName", certificatePolicyPkcsSelf, true, new HashMap<>());
     certPoller.waitUntil(LongRunningOperationStatus.SUCCESSFULLY_COMPLETED);
     KeyVaultCertificate cert = certPoller.getFinalResult();
     System.out.printf("Certificate created with name %s", cert.getName());
    ```
  syntax:
    content: public SyncPoller<CertificateOperation,KeyVaultCertificateWithPolicy> beginCreateCertificate(String certificateName, CertificatePolicy policy, Boolean isEnabled, Map<String,String> tags)
    parameters:
    - id: certificateName
      type: java.lang.String
      description: The name of the certificate to be created.
    - id: policy
      type: com.azure.security.keyvault.certificates.models.CertificatePolicy
      description: The policy of the certificate to be created.
    - id: isEnabled
      type: java.lang.Boolean
      description: The enabled status of the certificate.
    - id: tags
      type: java.util.Map<java.lang.String,java.lang.String>
      description: The application specific metadata to set.
    return:
      type: com.azure.core.util.polling.SyncPoller<com.azure.security.keyvault.certificates.models.CertificateOperation,com.azure.security.keyvault.certificates.models.KeyVaultCertificateWithPolicy>
      description: A <xref uid="com.azure.core.util.polling.SyncPoller" data-throw-if-not-resolved="false">SyncPoller</xref> to poll on the create certificate operation status.
- uid: com.azure.security.keyvault.certificates.CertificateClient.beginDeleteCertificate(java.lang.String)
  id: beginDeleteCertificate(java.lang.String)
  artifact: com.azure:azure-security-keyvault-certificates:4.1.0-beta.3
  parent: com.azure.security.keyvault.certificates.CertificateClient
  langs:
  - java
  name: beginDeleteCertificate(String certificateName)
  nameWithType: CertificateClient.beginDeleteCertificate(String certificateName)
  fullName: com.azure.security.keyvault.certificates.CertificateClient.beginDeleteCertificate(String certificateName)
  overload: com.azure.security.keyvault.certificates.CertificateClient.beginDeleteCertificate*
  type: Method
  package: com.azure.security.keyvault.certificates
  summary: >-
    Deletes a certificate from a specified key vault. All the versions of the certificate along with its associated policy get deleted. If soft-delete is enabled on the key vault then the certificate is placed in the deleted state and requires to be purged for permanent deletion else the certificate is permanently deleted. The delete operation applies to any certificate stored in Azure Key Vault but it cannot be applied to an individual version of a certificate. This operation requires the certificates/delete permission.


    **Code Samples**


    Deletes the certificate in the Azure Key Vault. Prints out the deleted certificate details when a response has been received.


    ```java

    SyncPoller<DeletedCertificate, Void> deleteCertificatePoller =
         certificateClient.beginDeleteCertificate("certificateName");
     // Deleted Certificate is accessible as soon as polling beings.
     PollResponse<DeletedCertificate> pollResponse = deleteCertificatePoller.poll();
     System.out.printf("Deleted certitifcate with name %s and recovery id %s", pollResponse.getValue().getName(),
         pollResponse.getValue().getRecoveryId());
     deleteCertificatePoller.waitForCompletion();
    ```
  syntax:
    content: public SyncPoller<DeletedCertificate,Void> beginDeleteCertificate(String certificateName)
    parameters:
    - id: certificateName
      type: java.lang.String
      description: The name of the certificate to be deleted.
    return:
      type: com.azure.core.util.polling.SyncPoller<com.azure.security.keyvault.certificates.models.DeletedCertificate,java.lang.Void>
      description: A <xref uid="com.azure.core.util.polling.SyncPoller" data-throw-if-not-resolved="false">SyncPoller</xref> to poll on and retrieve <xref uid="com.azure.security.keyvault.certificates.models.DeletedCertificate" data-throw-if-not-resolved="false">deleted certificate</xref>.
- uid: com.azure.security.keyvault.certificates.CertificateClient.beginRecoverDeletedCertificate(java.lang.String)
  id: beginRecoverDeletedCertificate(java.lang.String)
  artifact: com.azure:azure-security-keyvault-certificates:4.1.0-beta.3
  parent: com.azure.security.keyvault.certificates.CertificateClient
  langs:
  - java
  name: beginRecoverDeletedCertificate(String certificateName)
  nameWithType: CertificateClient.beginRecoverDeletedCertificate(String certificateName)
  fullName: com.azure.security.keyvault.certificates.CertificateClient.beginRecoverDeletedCertificate(String certificateName)
  overload: com.azure.security.keyvault.certificates.CertificateClient.beginRecoverDeletedCertificate*
  type: Method
  package: com.azure.security.keyvault.certificates
  summary: >-
    Recovers the deleted certificate back to its current version under /certificates and can only be performed on a soft-delete enabled vault. The RecoverDeletedCertificate operation performs the reversal of the Delete operation and must be issued during the retention interval (available in the deleted certificate's attributes). This operation requires the certificates/recover permission.


    **Code Samples**


    Recovers the deleted certificate from the key vault enabled for soft-delete. Prints out the recovered certificate details when a response has been received.


    ```java

    SyncPoller<KeyVaultCertificateWithPolicy, Void> recoverCertPoller = certificateClient
         .beginRecoverDeletedCertificate("deletedCertificateName");
     // Recovered certificate is accessible as soon as polling beings
     PollResponse<KeyVaultCertificateWithPolicy> pollResponse = recoverCertPoller.poll();
     System.out.printf(" Recovered Deleted certificate with name %s and id %s", pollResponse.getValue()
             .getProperties().getName(), pollResponse.getValue().getProperties().getId());
     recoverCertPoller.waitForCompletion();
    ```
  syntax:
    content: public SyncPoller<KeyVaultCertificateWithPolicy,Void> beginRecoverDeletedCertificate(String certificateName)
    parameters:
    - id: certificateName
      type: java.lang.String
      description: The name of the deleted certificate to be recovered.
    return:
      type: com.azure.core.util.polling.SyncPoller<com.azure.security.keyvault.certificates.models.KeyVaultCertificateWithPolicy,java.lang.Void>
      description: A <xref uid="com.azure.core.util.polling.SyncPoller" data-throw-if-not-resolved="false">SyncPoller</xref> to poll on and retrieve <xref uid="com.azure.security.keyvault.certificates.models.KeyVaultCertificateWithPolicy" data-throw-if-not-resolved="false">recovered certificate</xref>.
- uid: com.azure.security.keyvault.certificates.CertificateClient.cancelCertificateOperation(java.lang.String)
  id: cancelCertificateOperation(java.lang.String)
  artifact: com.azure:azure-security-keyvault-certificates:4.1.0-beta.3
  parent: com.azure.security.keyvault.certificates.CertificateClient
  langs:
  - java
  name: cancelCertificateOperation(String certificateName)
  nameWithType: CertificateClient.cancelCertificateOperation(String certificateName)
  fullName: com.azure.security.keyvault.certificates.CertificateClient.cancelCertificateOperation(String certificateName)
  overload: com.azure.security.keyvault.certificates.CertificateClient.cancelCertificateOperation*
  type: Method
  package: com.azure.security.keyvault.certificates
  summary: >-
    Cancels a certificate creation operation that is already in progress. This operation requires the `certificates/update` permission.


    **Code Samples**


    Triggers certificate creation and then cancels the certificate creation operation in the Azure Key Vault. Subscribes to the call and prints out the updated certificate operation details when a response has been received.


    ```java

    CertificateOperation certificateOperation = certificateClient
         .cancelCertificateOperation("certificateName");
     System.out.printf("Certificate Operation status %s", certificateOperation.getStatus());
    ```
  syntax:
    content: public CertificateOperation cancelCertificateOperation(String certificateName)
    parameters:
    - id: certificateName
      type: java.lang.String
      description: The name of the certificate which is in the process of being created.
    return:
      type: com.azure.security.keyvault.certificates.models.CertificateOperation
      description: A <xref uid="com.azure.core.http.rest.Response" data-throw-if-not-resolved="false">Response</xref> whose <xref uid="com.azure.core.http.rest.Response.getValue*" data-throw-if-not-resolved="false">value</xref> contains the <xref uid="com.azure.security.keyvault.certificates.models.CertificateOperation" data-throw-if-not-resolved="false">cancelled certificate operation</xref>.
- uid: com.azure.security.keyvault.certificates.CertificateClient.cancelCertificateOperationWithResponse(java.lang.String,com.azure.core.util.Context)
  id: cancelCertificateOperationWithResponse(java.lang.String,com.azure.core.util.Context)
  artifact: com.azure:azure-security-keyvault-certificates:4.1.0-beta.3
  parent: com.azure.security.keyvault.certificates.CertificateClient
  langs:
  - java
  name: cancelCertificateOperationWithResponse(String certificateName, Context context)
  nameWithType: CertificateClient.cancelCertificateOperationWithResponse(String certificateName, Context context)
  fullName: com.azure.security.keyvault.certificates.CertificateClient.cancelCertificateOperationWithResponse(String certificateName, Context context)
  overload: com.azure.security.keyvault.certificates.CertificateClient.cancelCertificateOperationWithResponse*
  type: Method
  package: com.azure.security.keyvault.certificates
  summary: >-
    Cancels a certificate creation operation that is already in progress. This operation requires the `certificates/update` permission.


    **Code Samples**


    Triggers certificate creation and then cancels the certificate creation operation in the Azure Key Vault. Subscribes to the call and prints out the updated certificate operation details when a response has been received.


    ```java

    Response<CertificateOperation> certificateOperationWithResponse = certificateClient
         .cancelCertificateOperationWithResponse("certificateName", new Context(key1, value1));
     System.out.printf("Certificate Operation status %s", certificateOperationWithResponse.getValue().getStatus());
    ```
  syntax:
    content: public Response<CertificateOperation> cancelCertificateOperationWithResponse(String certificateName, Context context)
    parameters:
    - id: certificateName
      type: java.lang.String
      description: The name of the certificate which is in the process of being created.
    - id: context
      type: com.azure.core.util.Context
      description: Additional context that is passed through the Http pipeline during the service call.
    return:
      type: com.azure.core.http.rest.Response<com.azure.security.keyvault.certificates.models.CertificateOperation>
      description: A <xref uid="com.azure.core.http.rest.Response" data-throw-if-not-resolved="false">Response</xref> whose <xref uid="com.azure.core.http.rest.Response.getValue*" data-throw-if-not-resolved="false">value</xref> contains the <xref uid="com.azure.security.keyvault.certificates.models.CertificateOperation" data-throw-if-not-resolved="false">cancelled certificate operation</xref>.
- uid: com.azure.security.keyvault.certificates.CertificateClient.createIssuer(com.azure.security.keyvault.certificates.models.CertificateIssuer)
  id: createIssuer(com.azure.security.keyvault.certificates.models.CertificateIssuer)
  artifact: com.azure:azure-security-keyvault-certificates:4.1.0-beta.3
  parent: com.azure.security.keyvault.certificates.CertificateClient
  langs:
  - java
  name: createIssuer(CertificateIssuer issuer)
  nameWithType: CertificateClient.createIssuer(CertificateIssuer issuer)
  fullName: com.azure.security.keyvault.certificates.CertificateClient.createIssuer(CertificateIssuer issuer)
  overload: com.azure.security.keyvault.certificates.CertificateClient.createIssuer*
  type: Method
  package: com.azure.security.keyvault.certificates
  summary: >-
    Creates the specified certificate issuer. The SetCertificateIssuer operation updates the specified certificate issuer if it already exists or adds it if doesn't exist. This operation requires the certificates/setissuers permission.


    **Code Samples**


    Creates a new certificate issuer in the key vault. Prints out the created certificate issuer details when a response has been received.


    ```java

    CertificateIssuer issuerToCreate = new CertificateIssuer("myissuer", "myProvider")
         .setAccountId("testAccount")
         .setAdministratorContacts(Arrays.asList(new AdministratorContact().setFirstName("test").setLastName("name")
             .setEmail("test{@literal @}example.com")));
     CertificateIssuer returnedIssuer = certificateClient.createIssuer(issuerToCreate);
     System.out.printf("Created Issuer with name %s provider %s", returnedIssuer.getName(),
         returnedIssuer.getProvider());
    ```
  syntax:
    content: public CertificateIssuer createIssuer(CertificateIssuer issuer)
    parameters:
    - id: issuer
      type: com.azure.security.keyvault.certificates.models.CertificateIssuer
      description: The configuration of the certificate issuer to be created.
    return:
      type: com.azure.security.keyvault.certificates.models.CertificateIssuer
      description: The created <xref uid="com.azure.security.keyvault.certificates.models.CertificateIssuer" data-throw-if-not-resolved="false">certificate issuer</xref>.
- uid: com.azure.security.keyvault.certificates.CertificateClient.createIssuerWithResponse(com.azure.security.keyvault.certificates.models.CertificateIssuer,com.azure.core.util.Context)
  id: createIssuerWithResponse(com.azure.security.keyvault.certificates.models.CertificateIssuer,com.azure.core.util.Context)
  artifact: com.azure:azure-security-keyvault-certificates:4.1.0-beta.3
  parent: com.azure.security.keyvault.certificates.CertificateClient
  langs:
  - java
  name: createIssuerWithResponse(CertificateIssuer issuer, Context context)
  nameWithType: CertificateClient.createIssuerWithResponse(CertificateIssuer issuer, Context context)
  fullName: com.azure.security.keyvault.certificates.CertificateClient.createIssuerWithResponse(CertificateIssuer issuer, Context context)
  overload: com.azure.security.keyvault.certificates.CertificateClient.createIssuerWithResponse*
  type: Method
  package: com.azure.security.keyvault.certificates
  summary: >-
    Creates the specified certificate issuer. The SetCertificateIssuer operation updates the specified certificate issuer if it already exists or adds it if doesn't exist. This operation requires the certificates/setissuers permission.


    **Code Samples**


    Creates a new certificate issuer in the key vault. Prints out the created certificate issuer details when a response has been received.


    ```java

    CertificateIssuer issuer = new CertificateIssuer("issuerName", "myProvider")
         .setAccountId("testAccount")
         .setAdministratorContacts(Arrays.asList(new AdministratorContact().setFirstName("test").setLastName("name")
             .setEmail("test{@literal @}example.com")));
     Response<CertificateIssuer> issuerResponse = certificateClient.createIssuerWithResponse(issuer,
         new Context(key1, value1));
     System.out.printf("Created Issuer with name %s provider %s", issuerResponse.getValue().getName(),
         issuerResponse.getValue().getProvider());
    ```
  syntax:
    content: public Response<CertificateIssuer> createIssuerWithResponse(CertificateIssuer issuer, Context context)
    parameters:
    - id: issuer
      type: com.azure.security.keyvault.certificates.models.CertificateIssuer
      description: The configuration of the certificate issuer to be created.
    - id: context
      type: com.azure.core.util.Context
      description: Additional context that is passed through the Http pipeline during the service call.
    return:
      type: com.azure.core.http.rest.Response<com.azure.security.keyvault.certificates.models.CertificateIssuer>
      description: A <xref uid="com.azure.core.http.rest.Response" data-throw-if-not-resolved="false">Response</xref> whose <xref uid="com.azure.core.http.rest.Response.getValue*" data-throw-if-not-resolved="false">value</xref> contains the created <xref uid="com.azure.security.keyvault.certificates.models.CertificateIssuer" data-throw-if-not-resolved="false">certificate issuer</xref>.
- uid: com.azure.security.keyvault.certificates.CertificateClient.deleteCertificateOperation(java.lang.String)
  id: deleteCertificateOperation(java.lang.String)
  artifact: com.azure:azure-security-keyvault-certificates:4.1.0-beta.3
  parent: com.azure.security.keyvault.certificates.CertificateClient
  langs:
  - java
  name: deleteCertificateOperation(String certificateName)
  nameWithType: CertificateClient.deleteCertificateOperation(String certificateName)
  fullName: com.azure.security.keyvault.certificates.CertificateClient.deleteCertificateOperation(String certificateName)
  overload: com.azure.security.keyvault.certificates.CertificateClient.deleteCertificateOperation*
  type: Method
  package: com.azure.security.keyvault.certificates
  summary: >-
    Deletes the creation operation for the specified certificate that is in the process of being created. The certificate is no longer created. This operation requires the `certificates/update permission`.


    **Code Samples**


    Triggers certificate creation and then deletes the certificate creation operation in the Azure Key Vault. Subscribes to the call and prints out the deleted certificate operation details when a response has been received.


    ```java

    Response<CertificateOperation> deletedCertificateOperationWithResponse = certificateClient
         .deleteCertificateOperationWithResponse("certificateName", new Context(key1, value1));
     System.out.printf("Deleted Certificate Operation's last status %s",
         deletedCertificateOperationWithResponse.getValue().getStatus());
    ```
  syntax:
    content: public CertificateOperation deleteCertificateOperation(String certificateName)
    parameters:
    - id: certificateName
      type: java.lang.String
      description: The name of the certificate.
    return:
      type: com.azure.security.keyvault.certificates.models.CertificateOperation
      description: The deleted <xref uid="com.azure.security.keyvault.certificates.models.CertificateOperation" data-throw-if-not-resolved="false">certificate operation</xref>.
- uid: com.azure.security.keyvault.certificates.CertificateClient.deleteCertificateOperationWithResponse(java.lang.String,com.azure.core.util.Context)
  id: deleteCertificateOperationWithResponse(java.lang.String,com.azure.core.util.Context)
  artifact: com.azure:azure-security-keyvault-certificates:4.1.0-beta.3
  parent: com.azure.security.keyvault.certificates.CertificateClient
  langs:
  - java
  name: deleteCertificateOperationWithResponse(String certificateName, Context context)
  nameWithType: CertificateClient.deleteCertificateOperationWithResponse(String certificateName, Context context)
  fullName: com.azure.security.keyvault.certificates.CertificateClient.deleteCertificateOperationWithResponse(String certificateName, Context context)
  overload: com.azure.security.keyvault.certificates.CertificateClient.deleteCertificateOperationWithResponse*
  type: Method
  package: com.azure.security.keyvault.certificates
  summary: >-
    Deletes the creation operation for the specified certificate that is in the process of being created. The certificate is no longer created. This operation requires the `certificates/update permission`.


    **Code Samples**


    Triggers certificate creation and then deletes the certificate creation operation in the Azure Key Vault. Subscribes to the call and prints out the deleted certificate operation details when a response has been received.


    ```java

    CertificateOperation deletedCertificateOperation = certificateClient
         .deleteCertificateOperation("certificateName");
     System.out.printf("Deleted Certificate Operation's last status %s", deletedCertificateOperation.getStatus());
    ```
  syntax:
    content: public Response<CertificateOperation> deleteCertificateOperationWithResponse(String certificateName, Context context)
    parameters:
    - id: certificateName
      type: java.lang.String
      description: The name of the certificate.
    - id: context
      type: com.azure.core.util.Context
      description: Additional context that is passed through the Http pipeline during the service call.
    return:
      type: com.azure.core.http.rest.Response<com.azure.security.keyvault.certificates.models.CertificateOperation>
      description: A <xref uid="com.azure.core.http.rest.Response" data-throw-if-not-resolved="false">Response</xref> whose <xref uid="com.azure.core.http.rest.Response.getValue*" data-throw-if-not-resolved="false">value</xref> contains the <xref uid="com.azure.security.keyvault.certificates.models.CertificateOperation" data-throw-if-not-resolved="false">deleted certificate operation</xref>.
- uid: com.azure.security.keyvault.certificates.CertificateClient.deleteContacts()
  id: deleteContacts()
  artifact: com.azure:azure-security-keyvault-certificates:4.1.0-beta.3
  parent: com.azure.security.keyvault.certificates.CertificateClient
  langs:
  - java
  name: deleteContacts()
  nameWithType: CertificateClient.deleteContacts()
  fullName: com.azure.security.keyvault.certificates.CertificateClient.deleteContacts()
  overload: com.azure.security.keyvault.certificates.CertificateClient.deleteContacts*
  type: Method
  package: com.azure.security.keyvault.certificates
  summary: >-
    Deletes the certificate contacts in the key vault. This operation requires the `certificates/managecontacts` permission.


    **Code Samples**


    Deletes the certificate contacts in the Azure Key Vault. Subscribes to the call and prints out the deleted contacts details.


    ```java

    for (CertificateContact contact : certificateClient.deleteContacts()) {
         System.out.printf("Deleted contact with name %s and email %s from key vault", contact.getName(),
             contact.getEmail());
     }
    ```
  syntax:
    content: public PagedIterable<CertificateContact> deleteContacts()
    return:
      type: com.azure.core.http.rest.PagedIterable<com.azure.security.keyvault.certificates.models.CertificateContact>
      description: A <xref uid="com.azure.core.http.rest.PagedIterable" data-throw-if-not-resolved="false">PagedIterable</xref> containing all of the deleted <xref uid="com.azure.security.keyvault.certificates.models.CertificateContact" data-throw-if-not-resolved="false">certificate contacts</xref> in the vault.
- uid: com.azure.security.keyvault.certificates.CertificateClient.deleteContacts(com.azure.core.util.Context)
  id: deleteContacts(com.azure.core.util.Context)
  artifact: com.azure:azure-security-keyvault-certificates:4.1.0-beta.3
  parent: com.azure.security.keyvault.certificates.CertificateClient
  langs:
  - java
  name: deleteContacts(Context context)
  nameWithType: CertificateClient.deleteContacts(Context context)
  fullName: com.azure.security.keyvault.certificates.CertificateClient.deleteContacts(Context context)
  overload: com.azure.security.keyvault.certificates.CertificateClient.deleteContacts*
  type: Method
  package: com.azure.security.keyvault.certificates
  summary: >-
    Deletes the certificate contacts in the key vault. This operation requires the `certificates/managecontacts` permission.


    **Code Samples**


    Deletes the certificate contacts in the Azure Key Vault. Prints out the deleted contacts details in the response.


    ```java

    for (CertificateContact contact : certificateClient.deleteContacts(new Context(key1, value1))) {
         System.out.printf("Deleted contact with name %s and email %s from key vault", contact.getName(),
             contact.getEmail());
     }
    ```
  syntax:
    content: public PagedIterable<CertificateContact> deleteContacts(Context context)
    parameters:
    - id: context
      type: com.azure.core.util.Context
      description: Additional context that is passed through the Http pipeline during the service call.
    return:
      type: com.azure.core.http.rest.PagedIterable<com.azure.security.keyvault.certificates.models.CertificateContact>
      description: A <xref uid="com.azure.core.http.rest.PagedIterable" data-throw-if-not-resolved="false">PagedIterable</xref> containing all of the deleted <xref uid="com.azure.security.keyvault.certificates.models.CertificateContact" data-throw-if-not-resolved="false">certificate contacts</xref> in the vault.
- uid: com.azure.security.keyvault.certificates.CertificateClient.deleteIssuer(java.lang.String)
  id: deleteIssuer(java.lang.String)
  artifact: com.azure:azure-security-keyvault-certificates:4.1.0-beta.3
  parent: com.azure.security.keyvault.certificates.CertificateClient
  langs:
  - java
  name: deleteIssuer(String issuerName)
  nameWithType: CertificateClient.deleteIssuer(String issuerName)
  fullName: com.azure.security.keyvault.certificates.CertificateClient.deleteIssuer(String issuerName)
  overload: com.azure.security.keyvault.certificates.CertificateClient.deleteIssuer*
  type: Method
  package: com.azure.security.keyvault.certificates
  summary: >-
    Deletes the specified certificate issuer. The DeleteCertificateIssuer operation permanently removes the specified certificate issuer from the key vault. This operation requires the `certificates/manageissuers/deleteissuers permission`.


    **Code Samples**


    Deletes the certificate issuer in the Azure Key Vault. Prints out the deleted certificate details when a response has been received.


    ```java

    Response<CertificateIssuer> deletedIssuerWithResponse = certificateClient.
         deleteIssuerWithResponse("certificateName", new Context(key1, value1));
     System.out.printf("Deleted certificate issuer with name %s and provider id %s",
         deletedIssuerWithResponse.getValue().getName(),
         deletedIssuerWithResponse.getValue().getProvider());
    ```
  syntax:
    content: public CertificateIssuer deleteIssuer(String issuerName)
    parameters:
    - id: issuerName
      type: java.lang.String
      description: The name of the certificate issuer to be deleted.
    return:
      type: com.azure.security.keyvault.certificates.models.CertificateIssuer
      description: The <xref uid="com.azure.security.keyvault.certificates.models.CertificateIssuer" data-throw-if-not-resolved="false">deleted issuer</xref>.
- uid: com.azure.security.keyvault.certificates.CertificateClient.deleteIssuerWithResponse(java.lang.String,com.azure.core.util.Context)
  id: deleteIssuerWithResponse(java.lang.String,com.azure.core.util.Context)
  artifact: com.azure:azure-security-keyvault-certificates:4.1.0-beta.3
  parent: com.azure.security.keyvault.certificates.CertificateClient
  langs:
  - java
  name: deleteIssuerWithResponse(String issuerName, Context context)
  nameWithType: CertificateClient.deleteIssuerWithResponse(String issuerName, Context context)
  fullName: com.azure.security.keyvault.certificates.CertificateClient.deleteIssuerWithResponse(String issuerName, Context context)
  overload: com.azure.security.keyvault.certificates.CertificateClient.deleteIssuerWithResponse*
  type: Method
  package: com.azure.security.keyvault.certificates
  summary: >-
    Deletes the specified certificate issuer. The DeleteCertificateIssuer operation permanently removes the specified certificate issuer from the key vault. This operation requires the `certificates/manageissuers/deleteissuers permission`.


    **Code Samples**


    Deletes the certificate issuer in the Azure Key Vault. Prints out the deleted certificate details when a response has been received.


    ```java

    CertificateIssuer deletedIssuer = certificateClient.deleteIssuer("certificateName");
     System.out.printf("Deleted certificate issuer with name %s and provider id %s", deletedIssuer.getName(),
         deletedIssuer.getProvider());
    ```
  syntax:
    content: public Response<CertificateIssuer> deleteIssuerWithResponse(String issuerName, Context context)
    parameters:
    - id: issuerName
      type: java.lang.String
      description: The name of the certificate issuer to be deleted.
    - id: context
      type: com.azure.core.util.Context
      description: Additional context that is passed through the Http pipeline during the service call.
    return:
      type: com.azure.core.http.rest.Response<com.azure.security.keyvault.certificates.models.CertificateIssuer>
      description: A <xref uid="com.azure.core.http.rest.Response" data-throw-if-not-resolved="false">Response</xref> whose <xref uid="com.azure.core.http.rest.Response.getValue*" data-throw-if-not-resolved="false">value</xref> contains the <xref uid="com.azure.security.keyvault.certificates.models.CertificateIssuer" data-throw-if-not-resolved="false">deleted issuer</xref>.
- uid: com.azure.security.keyvault.certificates.CertificateClient.getCertificate(java.lang.String)
  id: getCertificate(java.lang.String)
  artifact: com.azure:azure-security-keyvault-certificates:4.1.0-beta.3
  parent: com.azure.security.keyvault.certificates.CertificateClient
  langs:
  - java
  name: getCertificate(String certificateName)
  nameWithType: CertificateClient.getCertificate(String certificateName)
  fullName: com.azure.security.keyvault.certificates.CertificateClient.getCertificate(String certificateName)
  overload: com.azure.security.keyvault.certificates.CertificateClient.getCertificate*
  type: Method
  package: com.azure.security.keyvault.certificates
  summary: >-
    Gets information about the latest version of the specified certificate. This operation requires the certificates/get permission.


    **Code Samples**


    Gets a specific version of the certificate in the key vault. Prints out the returned certificate details when a response has been received.


    ```java

    KeyVaultCertificateWithPolicy certificate = certificateClient.getCertificate("certificateName");
     System.out.printf("Received certificate with name %s and version %s and secret id",
         certificate.getProperties().getName(),
         certificate.getProperties().getVersion(), certificate.getSecretId());
    ```
  syntax:
    content: public KeyVaultCertificateWithPolicy getCertificate(String certificateName)
    parameters:
    - id: certificateName
      type: java.lang.String
      description: The name of the certificate to retrieve, cannot be null
    return:
      type: com.azure.security.keyvault.certificates.models.KeyVaultCertificateWithPolicy
      description: The requested <xref uid="com.azure.security.keyvault.certificates.models.KeyVaultCertificateWithPolicy" data-throw-if-not-resolved="false">certificate</xref>.
- uid: com.azure.security.keyvault.certificates.CertificateClient.getCertificateOperation(java.lang.String)
  id: getCertificateOperation(java.lang.String)
  artifact: com.azure:azure-security-keyvault-certificates:4.1.0-beta.3
  parent: com.azure.security.keyvault.certificates.CertificateClient
  langs:
  - java
  name: getCertificateOperation(String certificateName)
  nameWithType: CertificateClient.getCertificateOperation(String certificateName)
  fullName: com.azure.security.keyvault.certificates.CertificateClient.getCertificateOperation(String certificateName)
  overload: com.azure.security.keyvault.certificates.CertificateClient.getCertificateOperation*
  type: Method
  package: com.azure.security.keyvault.certificates
  summary: >-
    Gets a pending <xref uid="com.azure.security.keyvault.certificates.models.CertificateOperation" data-throw-if-not-resolved="false">CertificateOperation</xref> from the key vault. This operation requires the certificates/get permission.


    **Code Samples**


    Geta a pending certificate operation. The <xref uid="com.azure.core.util.polling.SyncPoller" data-throw-if-not-resolved="false">poller</xref> allows users to automatically poll on the certificate operation status.


    ```java

    SyncPoller<CertificateOperation, KeyVaultCertificateWithPolicy> certPoller = certificateClient
         .getCertificateOperation("certificateName");
     certPoller.waitUntil(LongRunningOperationStatus.SUCCESSFULLY_COMPLETED);
     KeyVaultCertificate cert = certPoller.getFinalResult();
     System.out.printf("Certificate created with name %s", cert.getName());
    ```
  syntax:
    content: public SyncPoller<CertificateOperation,KeyVaultCertificateWithPolicy> getCertificateOperation(String certificateName)
    parameters:
    - id: certificateName
      type: java.lang.String
      description: The name of the certificate.
    return:
      type: com.azure.core.util.polling.SyncPoller<com.azure.security.keyvault.certificates.models.CertificateOperation,com.azure.security.keyvault.certificates.models.KeyVaultCertificateWithPolicy>
      description: A <xref uid="com.azure.core.util.polling.SyncPoller" data-throw-if-not-resolved="false">SyncPoller</xref> to poll on the certificate operation status.
- uid: com.azure.security.keyvault.certificates.CertificateClient.getCertificatePolicy(java.lang.String)
  id: getCertificatePolicy(java.lang.String)
  artifact: com.azure:azure-security-keyvault-certificates:4.1.0-beta.3
  parent: com.azure.security.keyvault.certificates.CertificateClient
  langs:
  - java
  name: getCertificatePolicy(String certificateName)
  nameWithType: CertificateClient.getCertificatePolicy(String certificateName)
  fullName: com.azure.security.keyvault.certificates.CertificateClient.getCertificatePolicy(String certificateName)
  overload: com.azure.security.keyvault.certificates.CertificateClient.getCertificatePolicy*
  type: Method
  package: com.azure.security.keyvault.certificates
  summary: >-
    Retrieves the policy of the specified certificate in the key vault. This operation requires the `certificates/get` permission.


    **Code Samples**


    Gets the policy of a certirifcate in the key vault. Prints out the returned certificate policy details when a response has been received.


    ```java

    CertificatePolicy policy = certificateClient.getCertificatePolicy("certificateName");
     System.out.printf("Received policy with subject name %s", policy.getSubject());
    ```
  syntax:
    content: public CertificatePolicy getCertificatePolicy(String certificateName)
    parameters:
    - id: certificateName
      type: java.lang.String
      description: The name of the certificate whose policy is to be retrieved, cannot be null
    return:
      type: com.azure.security.keyvault.certificates.models.CertificatePolicy
      description: The requested <xref uid="com.azure.security.keyvault.certificates.models.CertificatePolicy" data-throw-if-not-resolved="false">certificate policy</xref>.
- uid: com.azure.security.keyvault.certificates.CertificateClient.getCertificatePolicyWithResponse(java.lang.String,com.azure.core.util.Context)
  id: getCertificatePolicyWithResponse(java.lang.String,com.azure.core.util.Context)
  artifact: com.azure:azure-security-keyvault-certificates:4.1.0-beta.3
  parent: com.azure.security.keyvault.certificates.CertificateClient
  langs:
  - java
  name: getCertificatePolicyWithResponse(String certificateName, Context context)
  nameWithType: CertificateClient.getCertificatePolicyWithResponse(String certificateName, Context context)
  fullName: com.azure.security.keyvault.certificates.CertificateClient.getCertificatePolicyWithResponse(String certificateName, Context context)
  overload: com.azure.security.keyvault.certificates.CertificateClient.getCertificatePolicyWithResponse*
  type: Method
  package: com.azure.security.keyvault.certificates
  summary: >-
    Retrieves the policy of the specified certificate in the key vault. This operation requires the `certificates/get` permission.


    **Code Samples**


    Gets the policy of a certirifcate in the key vault. Prints out the returned certificate policy details when a response has been received.


    ```java

    Response<CertificatePolicy> returnedPolicyWithResponse = certificateClient.getCertificatePolicyWithResponse(
         "certificateName", new Context(key1, value1));
     System.out.printf("Received policy with subject name %s",
         returnedPolicyWithResponse.getValue().getSubject());
    ```
  syntax:
    content: public Response<CertificatePolicy> getCertificatePolicyWithResponse(String certificateName, Context context)
    parameters:
    - id: certificateName
      type: java.lang.String
      description: The name of the certificate whose policy is to be retrieved, cannot be null
    - id: context
      type: com.azure.core.util.Context
      description: Additional context that is passed through the Http pipeline during the service call.
    return:
      type: com.azure.core.http.rest.Response<com.azure.security.keyvault.certificates.models.CertificatePolicy>
      description: A <xref uid="com.azure.core.http.rest.Response" data-throw-if-not-resolved="false">Response</xref> whose <xref uid="com.azure.core.http.rest.Response.getValue*" data-throw-if-not-resolved="false">value</xref> contains the requested <xref uid="com.azure.security.keyvault.certificates.models.CertificatePolicy" data-throw-if-not-resolved="false">certificate policy</xref>.
- uid: com.azure.security.keyvault.certificates.CertificateClient.getCertificateVersion(java.lang.String,java.lang.String)
  id: getCertificateVersion(java.lang.String,java.lang.String)
  artifact: com.azure:azure-security-keyvault-certificates:4.1.0-beta.3
  parent: com.azure.security.keyvault.certificates.CertificateClient
  langs:
  - java
  name: getCertificateVersion(String certificateName, String version)
  nameWithType: CertificateClient.getCertificateVersion(String certificateName, String version)
  fullName: com.azure.security.keyvault.certificates.CertificateClient.getCertificateVersion(String certificateName, String version)
  overload: com.azure.security.keyvault.certificates.CertificateClient.getCertificateVersion*
  type: Method
  package: com.azure.security.keyvault.certificates
  summary: >-
    Gets information about the specified version of the specified certificate. This operation requires the certificates/get permission.


    **Code Samples**


    Gets a specific version of the certificate in the key vault. Prints out the returned certificate details when a response has been received.


    ```java

    KeyVaultCertificate returnedCertificate = certificateClient.getCertificateVersion("certificateName",
         "certificateVersion");
     System.out.printf("Received certificate with name %s and version %s and secret id",
         returnedCertificate.getProperties().getName(), returnedCertificate.getProperties().getVersion(),
         returnedCertificate.getSecretId());
    ```
  syntax:
    content: public KeyVaultCertificate getCertificateVersion(String certificateName, String version)
    parameters:
    - id: certificateName
      type: java.lang.String
      description: The name of the certificate to retrieve, cannot be null
    - id: version
      type: java.lang.String
      description: The version of the certificate to retrieve. If this is an empty String or null then latest version of the certificate is retrieved.
    return:
      type: com.azure.security.keyvault.certificates.models.KeyVaultCertificate
      description: The requested <xref uid="com.azure.security.keyvault.certificates.models.KeyVaultCertificate" data-throw-if-not-resolved="false">certificate</xref>.
- uid: com.azure.security.keyvault.certificates.CertificateClient.getCertificateVersionWithResponse(java.lang.String,java.lang.String,com.azure.core.util.Context)
  id: getCertificateVersionWithResponse(java.lang.String,java.lang.String,com.azure.core.util.Context)
  artifact: com.azure:azure-security-keyvault-certificates:4.1.0-beta.3
  parent: com.azure.security.keyvault.certificates.CertificateClient
  langs:
  - java
  name: getCertificateVersionWithResponse(String certificateName, String version, Context context)
  nameWithType: CertificateClient.getCertificateVersionWithResponse(String certificateName, String version, Context context)
  fullName: com.azure.security.keyvault.certificates.CertificateClient.getCertificateVersionWithResponse(String certificateName, String version, Context context)
  overload: com.azure.security.keyvault.certificates.CertificateClient.getCertificateVersionWithResponse*
  type: Method
  package: com.azure.security.keyvault.certificates
  summary: >-
    Gets information about the latest version of the specified certificate. This operation requires the certificates/get permission.


    **Code Samples**


    Gets a specific version of the certificate in the key vault. Prints out the returned certificate details when a response has been received.


    ```java

    Response<KeyVaultCertificate> returnedCertificateWithResponse = certificateClient
         .getCertificateVersionWithResponse("certificateName", "certificateVersion",
             new Context(key1, value1));
     System.out.printf("Received certificate with name %s and version %s and secret id",
         returnedCertificateWithResponse.getValue().getProperties().getName(),
         returnedCertificateWithResponse.getValue().getProperties().getVersion(),
         returnedCertificateWithResponse.getValue().getSecretId());
    ```
  syntax:
    content: public Response<KeyVaultCertificate> getCertificateVersionWithResponse(String certificateName, String version, Context context)
    parameters:
    - id: certificateName
      type: java.lang.String
      description: The name of the certificate to retrieve, cannot be null
    - id: version
      type: java.lang.String
      description: The version of the certificate to retrieve. If this is an empty String or null then latest version of the certificate is retrieved.
    - id: context
      type: com.azure.core.util.Context
      description: Additional context that is passed through the Http pipeline during the service call.
    return:
      type: com.azure.core.http.rest.Response<com.azure.security.keyvault.certificates.models.KeyVaultCertificate>
      description: A <xref uid="com.azure.core.http.rest.Response" data-throw-if-not-resolved="false">Response</xref> whose <xref uid="com.azure.core.http.rest.Response.getValue*" data-throw-if-not-resolved="false">value</xref> contains the requested <xref uid="com.azure.security.keyvault.certificates.models.KeyVaultCertificate" data-throw-if-not-resolved="false">certificate</xref>.
- uid: com.azure.security.keyvault.certificates.CertificateClient.getCertificateWithResponse(java.lang.String,com.azure.core.util.Context)
  id: getCertificateWithResponse(java.lang.String,com.azure.core.util.Context)
  artifact: com.azure:azure-security-keyvault-certificates:4.1.0-beta.3
  parent: com.azure.security.keyvault.certificates.CertificateClient
  langs:
  - java
  name: getCertificateWithResponse(String certificateName, Context context)
  nameWithType: CertificateClient.getCertificateWithResponse(String certificateName, Context context)
  fullName: com.azure.security.keyvault.certificates.CertificateClient.getCertificateWithResponse(String certificateName, Context context)
  overload: com.azure.security.keyvault.certificates.CertificateClient.getCertificateWithResponse*
  type: Method
  package: com.azure.security.keyvault.certificates
  summary: >-
    Gets information about the latest version of the specified certificate. This operation requires the certificates/get permission.


    **Code Samples**


    Gets a specific version of the certificate in the key vault. Prints out the returned certificate details when a response has been received.


    ```java

    Response<KeyVaultCertificateWithPolicy> certificateWithResponse = certificateClient
         .getCertificateWithResponse("certificateName", new Context(key1, value1));
     System.out.printf("Received certificate with name %s and version %s and secret id",
         certificateWithResponse.getValue().getProperties().getName(),
         certificateWithResponse.getValue().getProperties().getVersion(), certificate.getSecretId());
    ```
  syntax:
    content: public Response<KeyVaultCertificateWithPolicy> getCertificateWithResponse(String certificateName, Context context)
    parameters:
    - id: certificateName
      type: java.lang.String
      description: The name of the certificate to retrieve, cannot be null
    - id: context
      type: com.azure.core.util.Context
      description: Additional context that is passed through the Http pipeline during the service call.
    return:
      type: com.azure.core.http.rest.Response<com.azure.security.keyvault.certificates.models.KeyVaultCertificateWithPolicy>
      description: A <xref uid="com.azure.core.http.rest.Response" data-throw-if-not-resolved="false">Response</xref> whose <xref uid="com.azure.core.http.rest.Response.getValue*" data-throw-if-not-resolved="false">value</xref> contains the requested <xref uid="com.azure.security.keyvault.certificates.models.KeyVaultCertificateWithPolicy" data-throw-if-not-resolved="false">certificate</xref>.
- uid: com.azure.security.keyvault.certificates.CertificateClient.getDeletedCertificate(java.lang.String)
  id: getDeletedCertificate(java.lang.String)
  artifact: com.azure:azure-security-keyvault-certificates:4.1.0-beta.3
  parent: com.azure.security.keyvault.certificates.CertificateClient
  langs:
  - java
  name: getDeletedCertificate(String certificateName)
  nameWithType: CertificateClient.getDeletedCertificate(String certificateName)
  fullName: com.azure.security.keyvault.certificates.CertificateClient.getDeletedCertificate(String certificateName)
  overload: com.azure.security.keyvault.certificates.CertificateClient.getDeletedCertificate*
  type: Method
  package: com.azure.security.keyvault.certificates
  summary: >-
    Retrieves information about the specified deleted certificate. The GetDeletedCertificate operation is applicable for soft-delete enabled vaults and additionally retrieves deleted certificate's attributes, such as retention interval, scheduled permanent deletion and the current deletion recovery level. This operation requires the certificates/get permission.


    **Code Samples**


    Gets the deleted certificate from the key vault enabled for soft-delete. Prints out the deleted certificate details when a response has been received.


    ```java

    DeletedCertificate deletedCertificate = certificateClient.getDeletedCertificate("certificateName");
     System.out.printf("Deleted certificate with name %s and recovery id %s", deletedCertificate.getName(),
         deletedCertificate.getRecoveryId());
    ```
  syntax:
    content: public DeletedCertificate getDeletedCertificate(String certificateName)
    parameters:
    - id: certificateName
      type: java.lang.String
      description: The name of the deleted certificate.
    return:
      type: com.azure.security.keyvault.certificates.models.DeletedCertificate
      description: The <xref uid="com.azure.security.keyvault.certificates.models.DeletedCertificate" data-throw-if-not-resolved="false">deleted certificate</xref>.
- uid: com.azure.security.keyvault.certificates.CertificateClient.getDeletedCertificateWithResponse(java.lang.String,com.azure.core.util.Context)
  id: getDeletedCertificateWithResponse(java.lang.String,com.azure.core.util.Context)
  artifact: com.azure:azure-security-keyvault-certificates:4.1.0-beta.3
  parent: com.azure.security.keyvault.certificates.CertificateClient
  langs:
  - java
  name: getDeletedCertificateWithResponse(String certificateName, Context context)
  nameWithType: CertificateClient.getDeletedCertificateWithResponse(String certificateName, Context context)
  fullName: com.azure.security.keyvault.certificates.CertificateClient.getDeletedCertificateWithResponse(String certificateName, Context context)
  overload: com.azure.security.keyvault.certificates.CertificateClient.getDeletedCertificateWithResponse*
  type: Method
  package: com.azure.security.keyvault.certificates
  summary: >-
    Retrieves information about the specified deleted certificate. The GetDeletedCertificate operation is applicable for soft-delete enabled vaults and additionally retrieves deleted certificate's attributes, such as retention interval, scheduled permanent deletion and the current deletion recovery level. This operation requires the certificates/get permission.


    **Code Samples**


    Gets the deleted certificate from the key vault enabled for soft-delete. Prints out the deleted certificate details when a response has been received.


    ```java

    Response<DeletedCertificate> deletedCertificateWithResponse = certificateClient
         .getDeletedCertificateWithResponse("certificateName", new Context(key1, value1));
     System.out.printf("Deleted certificate with name %s and recovery id %s",
         deletedCertificateWithResponse.getValue().getName(),
         deletedCertificateWithResponse.getValue().getRecoveryId());
    ```
  syntax:
    content: public Response<DeletedCertificate> getDeletedCertificateWithResponse(String certificateName, Context context)
    parameters:
    - id: certificateName
      type: java.lang.String
      description: The name of the deleted certificate.
    - id: context
      type: com.azure.core.util.Context
      description: Additional context that is passed through the Http pipeline during the service call.
    return:
      type: com.azure.core.http.rest.Response<com.azure.security.keyvault.certificates.models.DeletedCertificate>
      description: A <xref uid="com.azure.core.http.rest.Response" data-throw-if-not-resolved="false">Response</xref> whose <xref uid="com.azure.core.http.rest.Response.getValue*" data-throw-if-not-resolved="false">value</xref> contains the <xref uid="com.azure.security.keyvault.certificates.models.DeletedCertificate" data-throw-if-not-resolved="false">deleted certificate</xref>.
- uid: com.azure.security.keyvault.certificates.CertificateClient.getIssuer(java.lang.String)
  id: getIssuer(java.lang.String)
  artifact: com.azure:azure-security-keyvault-certificates:4.1.0-beta.3
  parent: com.azure.security.keyvault.certificates.CertificateClient
  langs:
  - java
  name: getIssuer(String issuerName)
  nameWithType: CertificateClient.getIssuer(String issuerName)
  fullName: com.azure.security.keyvault.certificates.CertificateClient.getIssuer(String issuerName)
  overload: com.azure.security.keyvault.certificates.CertificateClient.getIssuer*
  type: Method
  package: com.azure.security.keyvault.certificates
  summary: >-
    Retrieves the specified certificate issuer from the key vault. This operation requires the certificates/manageissuers/getissuers permission.


    **Code Samples**


    Gets the specified certificate issuer in the key vault. Prints out the returned certificate issuer details when a response has been received.


    ```java

    CertificateIssuer returnedIssuer = certificateClient.getIssuer("issuerName");
     System.out.printf("Retrieved issuer with name %s and prodier %s", returnedIssuer.getName(),
         returnedIssuer.getProvider());
    ```
  syntax:
    content: public CertificateIssuer getIssuer(String issuerName)
    parameters:
    - id: issuerName
      type: java.lang.String
      description: The name of the certificate issuer to retrieve, cannot be null
    return:
      type: com.azure.security.keyvault.certificates.models.CertificateIssuer
      description: The requested <xref uid="com.azure.security.keyvault.certificates.models.CertificateIssuer" data-throw-if-not-resolved="false">certificate issuer</xref>.
- uid: com.azure.security.keyvault.certificates.CertificateClient.getIssuerWithResponse(java.lang.String,com.azure.core.util.Context)
  id: getIssuerWithResponse(java.lang.String,com.azure.core.util.Context)
  artifact: com.azure:azure-security-keyvault-certificates:4.1.0-beta.3
  parent: com.azure.security.keyvault.certificates.CertificateClient
  langs:
  - java
  name: getIssuerWithResponse(String issuerName, Context context)
  nameWithType: CertificateClient.getIssuerWithResponse(String issuerName, Context context)
  fullName: com.azure.security.keyvault.certificates.CertificateClient.getIssuerWithResponse(String issuerName, Context context)
  overload: com.azure.security.keyvault.certificates.CertificateClient.getIssuerWithResponse*
  type: Method
  package: com.azure.security.keyvault.certificates
  summary: >-
    Retrieves the specified certificate issuer from the key vault. This operation requires the certificates/manageissuers/getissuers permission.


    **Code Samples**


    Gets the specificed certifcate issuer in the key vault. Prints out the returned certificate issuer details when a response has been received.


    ```java

    Response<CertificateIssuer> issuerResponse = certificateClient.getIssuerWithResponse("issuerName",
         new Context(key1, value1));
     System.out.printf("Retrieved issuer with name %s and prodier %s", issuerResponse.getValue().getName(),
         issuerResponse.getValue().getProvider());
    ```
  syntax:
    content: public Response<CertificateIssuer> getIssuerWithResponse(String issuerName, Context context)
    parameters:
    - id: issuerName
      type: java.lang.String
      description: The name of the certificate issuer to retrieve, cannot be null
    - id: context
      type: com.azure.core.util.Context
      description: Additional context that is passed through the Http pipeline during the service call.
    return:
      type: com.azure.core.http.rest.Response<com.azure.security.keyvault.certificates.models.CertificateIssuer>
      description: A <xref uid="com.azure.core.http.rest.Response" data-throw-if-not-resolved="false">Response</xref> whose <xref uid="com.azure.core.http.rest.Response.getValue*" data-throw-if-not-resolved="false">value</xref> contains the requested <xref uid="com.azure.security.keyvault.certificates.models.CertificateIssuer" data-throw-if-not-resolved="false">certificate issuer</xref>.
- uid: com.azure.security.keyvault.certificates.CertificateClient.getVaultUrl()
  id: getVaultUrl()
  artifact: com.azure:azure-security-keyvault-certificates:4.1.0-beta.3
  parent: com.azure.security.keyvault.certificates.CertificateClient
  langs:
  - java
  name: getVaultUrl()
  nameWithType: CertificateClient.getVaultUrl()
  fullName: com.azure.security.keyvault.certificates.CertificateClient.getVaultUrl()
  overload: com.azure.security.keyvault.certificates.CertificateClient.getVaultUrl*
  type: Method
  package: com.azure.security.keyvault.certificates
  summary: Get the vault endpoint url to which service requests are sent to.
  syntax:
    content: public String getVaultUrl()
    return:
      type: java.lang.String
      description: the vault endpoint url
- uid: com.azure.security.keyvault.certificates.CertificateClient.importCertificate(com.azure.security.keyvault.certificates.models.ImportCertificateOptions)
  id: importCertificate(com.azure.security.keyvault.certificates.models.ImportCertificateOptions)
  artifact: com.azure:azure-security-keyvault-certificates:4.1.0-beta.3
  parent: com.azure.security.keyvault.certificates.CertificateClient
  langs:
  - java
  name: importCertificate(ImportCertificateOptions importCertificateOptions)
  nameWithType: CertificateClient.importCertificate(ImportCertificateOptions importCertificateOptions)
  fullName: com.azure.security.keyvault.certificates.CertificateClient.importCertificate(ImportCertificateOptions importCertificateOptions)
  overload: com.azure.security.keyvault.certificates.CertificateClient.importCertificate*
  type: Method
  package: com.azure.security.keyvault.certificates
  summary: >-
    Imports a pre-existing certificate to the key vault. The specified certificate must be in PFX or PEM format, and must contain the private key as well as the x509 certificates. This operation requires the `certificates/import` permission.


    **Code Samples**


    Imports a certificate into the key vault.


    ```java

    byte[] certificateToImport = new byte[100];
     ImportCertificateOptions config =
         new ImportCertificateOptions("certificateName", certificateToImport).setEnabled(false);
     KeyVaultCertificate importedCertificate = certificateClient.importCertificate(config);
     System.out.printf("Received Certificate with name %s and key id %s",
         importedCertificate.getProperties().getName(), importedCertificate.getKeyId());
    ```
  syntax:
    content: public KeyVaultCertificateWithPolicy importCertificate(ImportCertificateOptions importCertificateOptions)
    parameters:
    - id: importCertificateOptions
      type: com.azure.security.keyvault.certificates.models.ImportCertificateOptions
      description: The details of the certificate to import to the key vault
    return:
      type: com.azure.security.keyvault.certificates.models.KeyVaultCertificateWithPolicy
      description: the <xref uid="com.azure.security.keyvault.certificates.models.KeyVaultCertificateWithPolicy" data-throw-if-not-resolved="false">imported certificate</xref>.
- uid: com.azure.security.keyvault.certificates.CertificateClient.importCertificateWithResponse(com.azure.security.keyvault.certificates.models.ImportCertificateOptions,com.azure.core.util.Context)
  id: importCertificateWithResponse(com.azure.security.keyvault.certificates.models.ImportCertificateOptions,com.azure.core.util.Context)
  artifact: com.azure:azure-security-keyvault-certificates:4.1.0-beta.3
  parent: com.azure.security.keyvault.certificates.CertificateClient
  langs:
  - java
  name: importCertificateWithResponse(ImportCertificateOptions importCertificateOptions, Context context)
  nameWithType: CertificateClient.importCertificateWithResponse(ImportCertificateOptions importCertificateOptions, Context context)
  fullName: com.azure.security.keyvault.certificates.CertificateClient.importCertificateWithResponse(ImportCertificateOptions importCertificateOptions, Context context)
  overload: com.azure.security.keyvault.certificates.CertificateClient.importCertificateWithResponse*
  type: Method
  package: com.azure.security.keyvault.certificates
  summary: >-
    Imports a pre-existing certificate to the key vault. The specified certificate must be in PFX or PEM format, and must contain the private key as well as the x509 certificates. This operation requires the `certificates/import` permission.


    **Code Samples**


    Imports a certificate into the key vault.


    ```java

    byte[] certToImport = new byte[100];
     ImportCertificateOptions importCertificateOptions  =
         new ImportCertificateOptions("certificateName", certToImport).setEnabled(false);
     Response<KeyVaultCertificateWithPolicy> importedCertificateWithResponse =
         certificateClient.importCertificateWithResponse(importCertificateOptions, new Context(key2, value2));
     System.out.printf("Received Certificate with name %s and key id %s",
         importedCertificateWithResponse.getValue().getProperties().getName(),
         importedCertificateWithResponse.getValue().getKeyId());
    ```
  syntax:
    content: public Response<KeyVaultCertificateWithPolicy> importCertificateWithResponse(ImportCertificateOptions importCertificateOptions, Context context)
    parameters:
    - id: importCertificateOptions
      type: com.azure.security.keyvault.certificates.models.ImportCertificateOptions
      description: The details of the certificate to import to the key vault
    - id: context
      type: com.azure.core.util.Context
      description: Additional context that is passed through the Http pipeline during the service call.
    return:
      type: com.azure.core.http.rest.Response<com.azure.security.keyvault.certificates.models.KeyVaultCertificateWithPolicy>
      description: A <xref uid="com.azure.core.http.rest.Response" data-throw-if-not-resolved="false">Response</xref> whose <xref uid="com.azure.core.http.rest.Response.getValue*" data-throw-if-not-resolved="false">value</xref> contains the <xref uid="com.azure.security.keyvault.certificates.models.KeyVaultCertificateWithPolicy" data-throw-if-not-resolved="false">imported certificate</xref>.
- uid: com.azure.security.keyvault.certificates.CertificateClient.listContacts()
  id: listContacts()
  artifact: com.azure:azure-security-keyvault-certificates:4.1.0-beta.3
  parent: com.azure.security.keyvault.certificates.CertificateClient
  langs:
  - java
  name: listContacts()
  nameWithType: CertificateClient.listContacts()
  fullName: com.azure.security.keyvault.certificates.CertificateClient.listContacts()
  overload: com.azure.security.keyvault.certificates.CertificateClient.listContacts*
  type: Method
  package: com.azure.security.keyvault.certificates
  summary: >-
    Lists the certificate contacts in the key vault. This operation requires the certificates/managecontacts permission.


    **Code Samples**


    Lists the certificate contacts in the Azure Key Vault. Prints out the returned contacts details in the response.


    ```java

    for (CertificateContact contact : certificateClient.listContacts()) {
         System.out.printf("Added contact with name %s and email %s to key vault", contact.getName(),
             contact.getEmail());
     }
    ```
  syntax:
    content: public PagedIterable<CertificateContact> listContacts()
    return:
      type: com.azure.core.http.rest.PagedIterable<com.azure.security.keyvault.certificates.models.CertificateContact>
      description: A <xref uid="com.azure.core.http.rest.PagedIterable" data-throw-if-not-resolved="false">PagedIterable</xref> containing all of the <xref uid="com.azure.security.keyvault.certificates.models.CertificateContact" data-throw-if-not-resolved="false">certificate contacts</xref> in the vault.
- uid: com.azure.security.keyvault.certificates.CertificateClient.listContacts(com.azure.core.util.Context)
  id: listContacts(com.azure.core.util.Context)
  artifact: com.azure:azure-security-keyvault-certificates:4.1.0-beta.3
  parent: com.azure.security.keyvault.certificates.CertificateClient
  langs:
  - java
  name: listContacts(Context context)
  nameWithType: CertificateClient.listContacts(Context context)
  fullName: com.azure.security.keyvault.certificates.CertificateClient.listContacts(Context context)
  overload: com.azure.security.keyvault.certificates.CertificateClient.listContacts*
  type: Method
  package: com.azure.security.keyvault.certificates
  summary: >-
    Lists the certificate contacts in the key vault. This operation requires the certificates/managecontacts permission.


    **Code Samples**


    Lists the certificate contacts in the Azure Key Vault. Prints out the returned contacts details in the response.


    ```java

    for (CertificateContact contact : certificateClient.listContacts(new Context(key1, value1))) {
         System.out.printf("Added contact with name %s and email %s to key vault", contact.getName(),
             contact.getEmail());
     }
    ```
  syntax:
    content: public PagedIterable<CertificateContact> listContacts(Context context)
    parameters:
    - id: context
      type: com.azure.core.util.Context
      description: Additional context that is passed through the Http pipeline during the service call.
    return:
      type: com.azure.core.http.rest.PagedIterable<com.azure.security.keyvault.certificates.models.CertificateContact>
      description: A <xref uid="com.azure.core.http.rest.PagedIterable" data-throw-if-not-resolved="false">PagedIterable</xref> containing all of the <xref uid="com.azure.security.keyvault.certificates.models.CertificateContact" data-throw-if-not-resolved="false">certificate contacts</xref> in the vault.
- uid: com.azure.security.keyvault.certificates.CertificateClient.listDeletedCertificates()
  id: listDeletedCertificates()
  artifact: com.azure:azure-security-keyvault-certificates:4.1.0-beta.3
  parent: com.azure.security.keyvault.certificates.CertificateClient
  langs:
  - java
  name: listDeletedCertificates()
  nameWithType: CertificateClient.listDeletedCertificates()
  fullName: com.azure.security.keyvault.certificates.CertificateClient.listDeletedCertificates()
  overload: com.azure.security.keyvault.certificates.CertificateClient.listDeletedCertificates*
  type: Method
  package: com.azure.security.keyvault.certificates
  summary: >-
    Lists the <xref uid="com.azure.security.keyvault.certificates.models.DeletedCertificate" data-throw-if-not-resolved="false">deleted certificates</xref> in the key vault currently available for recovery. This operation includes deletion-specific information and is applicable for vaults enabled for soft-delete. This operation requires the `certificates/get/list` permission.


    **Code Samples**


    Lists the deleted certificates in the key vault. Prints out the recovery id of each deleted certificate when a response has been received.


    ```java

    for (DeletedCertificate deletedCertificate : certificateClient.listDeletedCertificates()) {
         System.out.printf("Deleted certificate's recovery Id %s", deletedCertificate.getRecoveryId());
     }
    ```
  syntax:
    content: public PagedIterable<DeletedCertificate> listDeletedCertificates()
    return:
      type: com.azure.core.http.rest.PagedIterable<com.azure.security.keyvault.certificates.models.DeletedCertificate>
      description: A <xref uid="com.azure.core.http.rest.PagedIterable" data-throw-if-not-resolved="false">PagedIterable</xref> containing all of the <xref uid="com.azure.security.keyvault.certificates.models.DeletedCertificate" data-throw-if-not-resolved="false">deleted certificates</xref> in the vault.
- uid: com.azure.security.keyvault.certificates.CertificateClient.listDeletedCertificates(boolean,com.azure.core.util.Context)
  id: listDeletedCertificates(boolean,com.azure.core.util.Context)
  artifact: com.azure:azure-security-keyvault-certificates:4.1.0-beta.3
  parent: com.azure.security.keyvault.certificates.CertificateClient
  langs:
  - java
  name: listDeletedCertificates(boolean includePending, Context context)
  nameWithType: CertificateClient.listDeletedCertificates(boolean includePending, Context context)
  fullName: com.azure.security.keyvault.certificates.CertificateClient.listDeletedCertificates(boolean includePending, Context context)
  overload: com.azure.security.keyvault.certificates.CertificateClient.listDeletedCertificates*
  type: Method
  package: com.azure.security.keyvault.certificates
  summary: >-
    Lists the <xref uid="com.azure.security.keyvault.certificates.models.DeletedCertificate" data-throw-if-not-resolved="false">deleted certificates</xref> in the key vault currently available for recovery. This operation includes deletion-specific information and is applicable for vaults enabled for soft-delete. This operation requires the `certificates/get/list` permission.


    **Code Samples**


    Lists the deleted certificates in the key vault. Prints out the recovery id of each deleted certificate when a response has been received.


    ```java

    for (DeletedCertificate deletedCertificate : certificateClient
         .listDeletedCertificates(true, new Context(key1, value1))) {
         System.out.printf("Deleted certificate's recovery Id %s", deletedCertificate.getRecoveryId());
     }
    ```
  syntax:
    content: public PagedIterable<DeletedCertificate> listDeletedCertificates(boolean includePending, Context context)
    parameters:
    - id: includePending
      type: boolean
      description: indicate if pending deleted certificates should be included in the results.
    - id: context
      type: com.azure.core.util.Context
      description: Additional context that is passed through the Http pipeline during the service call.
    return:
      type: com.azure.core.http.rest.PagedIterable<com.azure.security.keyvault.certificates.models.DeletedCertificate>
      description: A <xref uid="com.azure.core.http.rest.PagedIterable" data-throw-if-not-resolved="false">PagedIterable</xref> containing all of the <xref uid="com.azure.security.keyvault.certificates.models.DeletedCertificate" data-throw-if-not-resolved="false">deleted certificates</xref> in the vault.
- uid: com.azure.security.keyvault.certificates.CertificateClient.listPropertiesOfCertificateVersions(java.lang.String)
  id: listPropertiesOfCertificateVersions(java.lang.String)
  artifact: com.azure:azure-security-keyvault-certificates:4.1.0-beta.3
  parent: com.azure.security.keyvault.certificates.CertificateClient
  langs:
  - java
  name: listPropertiesOfCertificateVersions(String certificateName)
  nameWithType: CertificateClient.listPropertiesOfCertificateVersions(String certificateName)
  fullName: com.azure.security.keyvault.certificates.CertificateClient.listPropertiesOfCertificateVersions(String certificateName)
  overload: com.azure.security.keyvault.certificates.CertificateClient.listPropertiesOfCertificateVersions*
  type: Method
  package: com.azure.security.keyvault.certificates
  summary: >-
    List all versions of the specified certificate. The individual certificate response in the iterable is represented by <xref uid="com.azure.security.keyvault.certificates.models.CertificateProperties" data-throw-if-not-resolved="false">CertificateProperties</xref> as only the certificate identifier, thumbprint, attributes and tags are provided in the response. The policy is not listed in the response. This operation requires the certificates/list permission.


    It is possible to get the certificates with properties excluding the policy for all the versions from this information. Loop over the <xref uid="com.azure.security.keyvault.certificates.models.CertificateProperties" data-throw-if-not-resolved="false">CertificateProperties</xref> and call <xref uid="com.azure.security.keyvault.certificates.CertificateClient.getCertificateVersion(java.lang.String,java.lang.String)" data-throw-if-not-resolved="false">CertificateClient#getCertificateVersion(String, String)</xref>. This will return the <xref uid="com.azure.security.keyvault.certificates.models.KeyVaultCertificate" data-throw-if-not-resolved="false">certificate</xref> with all its properties excluding the policy.


    ```java

    for (CertificateProperties certificateProperties : certificateClient
         .listPropertiesOfCertificateVersions("certificateName")) {
         KeyVaultCertificate certificateWithAllProperites  = certificateClient
             .getCertificateVersion(certificateProperties.getName(), certificateProperties.getVersion());
         System.out.printf("Received certificate's version with name %s, version %s and secret id %s",
             certificateWithAllProperites.getProperties().getName(),
             certificateWithAllProperites.getProperties().getVersion(), certificateWithAllProperites.getSecretId());
     }
    ```
  syntax:
    content: public PagedIterable<CertificateProperties> listPropertiesOfCertificateVersions(String certificateName)
    parameters:
    - id: certificateName
      type: java.lang.String
      description: The name of the certificate.
    return:
      type: com.azure.core.http.rest.PagedIterable<com.azure.security.keyvault.certificates.models.CertificateProperties>
      description: A <xref uid="com.azure.core.http.rest.PagedIterable" data-throw-if-not-resolved="false">PagedIterable</xref> containing <xref uid="com.azure.security.keyvault.certificates.models.CertificateProperties" data-throw-if-not-resolved="false">certificate</xref> of all the versions of the specified certificate in the vault. Paged Iterable is empty if certificate with <code>certificateName</code> does not exist in key vault.
- uid: com.azure.security.keyvault.certificates.CertificateClient.listPropertiesOfCertificateVersions(java.lang.String,com.azure.core.util.Context)
  id: listPropertiesOfCertificateVersions(java.lang.String,com.azure.core.util.Context)
  artifact: com.azure:azure-security-keyvault-certificates:4.1.0-beta.3
  parent: com.azure.security.keyvault.certificates.CertificateClient
  langs:
  - java
  name: listPropertiesOfCertificateVersions(String certificateName, Context context)
  nameWithType: CertificateClient.listPropertiesOfCertificateVersions(String certificateName, Context context)
  fullName: com.azure.security.keyvault.certificates.CertificateClient.listPropertiesOfCertificateVersions(String certificateName, Context context)
  overload: com.azure.security.keyvault.certificates.CertificateClient.listPropertiesOfCertificateVersions*
  type: Method
  package: com.azure.security.keyvault.certificates
  summary: >-
    List all versions of the specified certificate. The individual certificate response in the iterable is represented by <xref uid="com.azure.security.keyvault.certificates.models.CertificateProperties" data-throw-if-not-resolved="false">CertificateProperties</xref> as only the certificate identifier, thumbprint, attributes and tags are provided in the response. The policy is not listed in the response. This operation requires the certificates/list permission.


    It is possible to get the certificates with properties excluding the policy for all the versions from this information. Loop over the <xref uid="com.azure.security.keyvault.certificates.models.CertificateProperties" data-throw-if-not-resolved="false">CertificateProperties</xref> and call <xref uid="com.azure.security.keyvault.certificates.CertificateClient.getCertificateVersion(java.lang.String,java.lang.String)" data-throw-if-not-resolved="false">CertificateClient#getCertificateVersion(String, String)</xref>. This will return the <xref uid="com.azure.security.keyvault.certificates.models.KeyVaultCertificate" data-throw-if-not-resolved="false">certificate</xref> with all its properties excluding the policy.


    ```java

    for (CertificateProperties certificateProperties : certificateClient
         .listPropertiesOfCertificateVersions("certificateName")) {
         KeyVaultCertificate certificateWithAllProperites  = certificateClient
             .getCertificateVersion(certificateProperties.getName(), certificateProperties.getVersion());
         System.out.printf("Received certificate's version with name %s, version %s and secret id %s",
             certificateWithAllProperites.getProperties().getName(),
             certificateWithAllProperites.getProperties().getVersion(), certificateWithAllProperites.getSecretId());
     }
    ```
  syntax:
    content: public PagedIterable<CertificateProperties> listPropertiesOfCertificateVersions(String certificateName, Context context)
    parameters:
    - id: certificateName
      type: java.lang.String
      description: The name of the certificate.
    - id: context
      type: com.azure.core.util.Context
      description: Additional context that is passed through the Http pipeline during the service call.
    return:
      type: com.azure.core.http.rest.PagedIterable<com.azure.security.keyvault.certificates.models.CertificateProperties>
      description: A <xref uid="com.azure.core.http.rest.PagedIterable" data-throw-if-not-resolved="false">PagedIterable</xref> containing <xref uid="com.azure.security.keyvault.certificates.models.CertificateProperties" data-throw-if-not-resolved="false">certificate</xref> of all the versions of the specified certificate in the vault. Iterable is empty if certificate with <code>certificateName</code> does not exist in key vault.
- uid: com.azure.security.keyvault.certificates.CertificateClient.listPropertiesOfCertificates()
  id: listPropertiesOfCertificates()
  artifact: com.azure:azure-security-keyvault-certificates:4.1.0-beta.3
  parent: com.azure.security.keyvault.certificates.CertificateClient
  langs:
  - java
  name: listPropertiesOfCertificates()
  nameWithType: CertificateClient.listPropertiesOfCertificates()
  fullName: com.azure.security.keyvault.certificates.CertificateClient.listPropertiesOfCertificates()
  overload: com.azure.security.keyvault.certificates.CertificateClient.listPropertiesOfCertificates*
  type: Method
  package: com.azure.security.keyvault.certificates
  summary: >-
    List certificates in a the key vault. Retrieves the set of certificates resources in the key vault and the individual certificate response in the iterable is represented by <xref uid="com.azure.security.keyvault.certificates.models.CertificateProperties" data-throw-if-not-resolved="false">CertificateProperties</xref> as only the certificate identifier, thumbprint, attributes and tags are provided in the response. The policy and individual certificate versions are not listed in the response. This operation requires the certificates/list permission.


    It is possible to get certificates with all the properties excluding the policy from this information. Loop over the <xref uid="com.azure.security.keyvault.certificates.models.CertificateProperties" data-throw-if-not-resolved="false">CertificateProperties</xref> and call <xref uid="com.azure.security.keyvault.certificates.CertificateClient.getCertificateVersion(java.lang.String,java.lang.String)" data-throw-if-not-resolved="false">CertificateClient#getCertificateVersion(String, String)</xref> . This will return the <xref uid="com.azure.security.keyvault.certificates.models.KeyVaultCertificate" data-throw-if-not-resolved="false">certificate</xref> with all its properties excluding the policy.


    ```java

    for (CertificateProperties certificateProperties : certificateClient.listPropertiesOfCertificates()) {
         KeyVaultCertificate certificateWithAllProperties = certificateClient
             .getCertificateVersion(certificateProperties.getName(), certificateProperties.getVersion());
         System.out.printf("Received certificate with name %s and secret id %s",
             certificateWithAllProperties.getProperties().getName(),
             certificateWithAllProperties.getSecretId());
     }
    ```
  syntax:
    content: public PagedIterable<CertificateProperties> listPropertiesOfCertificates()
    return:
      type: com.azure.core.http.rest.PagedIterable<com.azure.security.keyvault.certificates.models.CertificateProperties>
      description: A <xref uid="com.azure.core.http.rest.PagedIterable" data-throw-if-not-resolved="false">PagedIterable</xref> containing <xref uid="com.azure.security.keyvault.certificates.models.CertificateProperties" data-throw-if-not-resolved="false">certificate</xref> for all the certificates in the vault.
- uid: com.azure.security.keyvault.certificates.CertificateClient.listPropertiesOfCertificates(boolean,com.azure.core.util.Context)
  id: listPropertiesOfCertificates(boolean,com.azure.core.util.Context)
  artifact: com.azure:azure-security-keyvault-certificates:4.1.0-beta.3
  parent: com.azure.security.keyvault.certificates.CertificateClient
  langs:
  - java
  name: listPropertiesOfCertificates(boolean includePending, Context context)
  nameWithType: CertificateClient.listPropertiesOfCertificates(boolean includePending, Context context)
  fullName: com.azure.security.keyvault.certificates.CertificateClient.listPropertiesOfCertificates(boolean includePending, Context context)
  overload: com.azure.security.keyvault.certificates.CertificateClient.listPropertiesOfCertificates*
  type: Method
  package: com.azure.security.keyvault.certificates
  summary: >-
    List certificates in a the key vault. Retrieves the set of certificates resources in the key vault and the individual certificate response in the iterable is represented by <xref uid="com.azure.security.keyvault.certificates.models.CertificateProperties" data-throw-if-not-resolved="false">CertificateProperties</xref> as only the certificate identifier, thumbprint, attributes and tags are provided in the response. The policy and individual certificate versions are not listed in the response. This operation requires the certificates/list permission.


    It is possible to get certificates with all the properties excluding the policy from this information. Loop over the <xref uid="com.azure.security.keyvault.certificates.models.CertificateProperties" data-throw-if-not-resolved="false">CertificateProperties</xref> and call <xref uid="com.azure.security.keyvault.certificates.CertificateClient.getCertificateVersion(java.lang.String,java.lang.String)" data-throw-if-not-resolved="false">CertificateClient#getCertificateVersion(String, String)</xref> . This will return the <xref uid="com.azure.security.keyvault.certificates.models.KeyVaultCertificate" data-throw-if-not-resolved="false">certificate</xref> with all its properties excluding the policy.


    ```java

    for (CertificateProperties certificateProperties : certificateClient
         .listPropertiesOfCertificates(true, new Context(key1, value1))) {
         KeyVaultCertificate certificateWithAllProperties = certificateClient
             .getCertificateVersion(certificateProperties.getName(), certificateProperties.getVersion());
         System.out.printf("Received certificate with name %s and secret id %s",
             certificateWithAllProperties.getProperties().getName(),
             certificateWithAllProperties.getSecretId());
     }
    ```
  syntax:
    content: public PagedIterable<CertificateProperties> listPropertiesOfCertificates(boolean includePending, Context context)
    parameters:
    - id: includePending
      type: boolean
      description: indicate if pending certificates should be included in the results.
    - id: context
      type: com.azure.core.util.Context
      description: Additional context that is passed through the Http pipeline during the service call.
    return:
      type: com.azure.core.http.rest.PagedIterable<com.azure.security.keyvault.certificates.models.CertificateProperties>
      description: A <xref uid="com.azure.core.http.rest.PagedIterable" data-throw-if-not-resolved="false">PagedIterable</xref> containing <xref uid="com.azure.security.keyvault.certificates.models.CertificateProperties" data-throw-if-not-resolved="false">certificate</xref> for all the certificates in the vault.
- uid: com.azure.security.keyvault.certificates.CertificateClient.listPropertiesOfIssuers()
  id: listPropertiesOfIssuers()
  artifact: com.azure:azure-security-keyvault-certificates:4.1.0-beta.3
  parent: com.azure.security.keyvault.certificates.CertificateClient
  langs:
  - java
  name: listPropertiesOfIssuers()
  nameWithType: CertificateClient.listPropertiesOfIssuers()
  fullName: com.azure.security.keyvault.certificates.CertificateClient.listPropertiesOfIssuers()
  overload: com.azure.security.keyvault.certificates.CertificateClient.listPropertiesOfIssuers*
  type: Method
  package: com.azure.security.keyvault.certificates
  summary: >-
    List all the certificate issuers resources in the key vault. The individual certificate issuer response in the iterable is represented by <xref uid="com.azure.security.keyvault.certificates.models.IssuerProperties" data-throw-if-not-resolved="false">IssuerProperties</xref> as only the certificate issuer identifier and provider are provided in the response. This operation requires the `certificates/manageissuers/getissuers` permission.


    It is possible to get the certificate issuer with all of its properties from this information. Loop over the <xref uid="com.azure.security.keyvault.certificates.models.IssuerProperties" data-throw-if-not-resolved="false">issuerProperties</xref> and call <xref uid="com.azure.security.keyvault.certificates.CertificateClient.getIssuer(java.lang.String)" data-throw-if-not-resolved="false">CertificateClient#getIssuer(String)</xref> . This will return the <xref uid="com.azure.security.keyvault.certificates.models.CertificateIssuer" data-throw-if-not-resolved="false">issuer</xref> with all its properties.


    .


    ```java

    for (IssuerProperties issuer : certificateClient.listPropertiesOfIssuers()) {
         CertificateIssuer retrievedIssuer = certificateClient.getIssuer(issuer.getName());
         System.out.printf("Received issuer with name %s and provider %s", retrievedIssuer.getName(),
             retrievedIssuer.getProvider());
     }
    ```
  syntax:
    content: public PagedIterable<IssuerProperties> listPropertiesOfIssuers()
    return:
      type: com.azure.core.http.rest.PagedIterable<com.azure.security.keyvault.certificates.models.IssuerProperties>
      description: A <xref uid="com.azure.core.http.rest.PagedIterable" data-throw-if-not-resolved="false">PagedIterable</xref> containing all of the <xref uid="com.azure.security.keyvault.certificates.models.IssuerProperties" data-throw-if-not-resolved="false">certificate issuers</xref> in the vault.
- uid: com.azure.security.keyvault.certificates.CertificateClient.listPropertiesOfIssuers(com.azure.core.util.Context)
  id: listPropertiesOfIssuers(com.azure.core.util.Context)
  artifact: com.azure:azure-security-keyvault-certificates:4.1.0-beta.3
  parent: com.azure.security.keyvault.certificates.CertificateClient
  langs:
  - java
  name: listPropertiesOfIssuers(Context context)
  nameWithType: CertificateClient.listPropertiesOfIssuers(Context context)
  fullName: com.azure.security.keyvault.certificates.CertificateClient.listPropertiesOfIssuers(Context context)
  overload: com.azure.security.keyvault.certificates.CertificateClient.listPropertiesOfIssuers*
  type: Method
  package: com.azure.security.keyvault.certificates
  summary: >-
    List all the certificate issuers resources in the key vault. The individual certificate issuer response in the iterable is represented by <xref uid="com.azure.security.keyvault.certificates.models.IssuerProperties" data-throw-if-not-resolved="false">IssuerProperties</xref> as only the certificate issuer identifier and provider are provided in the response. This operation requires the `certificates/manageissuers/getissuers` permission.


    It is possible to get the certificate issuer with all of its properties from this information. Loop over the <xref uid="com.azure.security.keyvault.certificates.models.IssuerProperties" data-throw-if-not-resolved="false">issuerProperties</xref> and call <xref uid="com.azure.security.keyvault.certificates.CertificateClient.getIssuer(java.lang.String)" data-throw-if-not-resolved="false">CertificateClient#getIssuer(String)</xref>. This will return the <xref uid="com.azure.security.keyvault.certificates.models.CertificateIssuer" data-throw-if-not-resolved="false">issuer</xref> with all its properties.


    .


    ```java

    for (IssuerProperties issuer : certificateClient.listPropertiesOfIssuers(new Context(key1, value1))) {
         CertificateIssuer retrievedIssuer = certificateClient.getIssuer(issuer.getName());
         System.out.printf("Received issuer with name %s and provider %s", retrievedIssuer.getName(),
             retrievedIssuer.getProvider());
     }
    ```
  syntax:
    content: public PagedIterable<IssuerProperties> listPropertiesOfIssuers(Context context)
    parameters:
    - id: context
      type: com.azure.core.util.Context
      description: Additional context that is passed through the Http pipeline during the service call.
    return:
      type: com.azure.core.http.rest.PagedIterable<com.azure.security.keyvault.certificates.models.IssuerProperties>
      description: A <xref uid="com.azure.core.http.rest.PagedIterable" data-throw-if-not-resolved="false">PagedIterable</xref> containing all of the <xref uid="com.azure.security.keyvault.certificates.models.IssuerProperties" data-throw-if-not-resolved="false">certificate issuers</xref> in the vault.
- uid: com.azure.security.keyvault.certificates.CertificateClient.mergeCertificate(com.azure.security.keyvault.certificates.models.MergeCertificateOptions)
  id: mergeCertificate(com.azure.security.keyvault.certificates.models.MergeCertificateOptions)
  artifact: com.azure:azure-security-keyvault-certificates:4.1.0-beta.3
  parent: com.azure.security.keyvault.certificates.CertificateClient
  langs:
  - java
  name: mergeCertificate(MergeCertificateOptions mergeCertificateOptions)
  nameWithType: CertificateClient.mergeCertificate(MergeCertificateOptions mergeCertificateOptions)
  fullName: com.azure.security.keyvault.certificates.CertificateClient.mergeCertificate(MergeCertificateOptions mergeCertificateOptions)
  overload: com.azure.security.keyvault.certificates.CertificateClient.mergeCertificate*
  type: Method
  package: com.azure.security.keyvault.certificates
  summary: >-
    Merges a certificate or a certificate chain with a key pair currently available in the service. This operation requires the `certificates/create` permission.


    **Code Samples**


    Merges a certificate with a kay pair available in the service.


    ```java

    List<byte[]> x509CertificatesToMerge = new ArrayList<>();
     MergeCertificateOptions config =
         new MergeCertificateOptions("certificateName", x509CertificatesToMerge)
             .setEnabled(false);
     KeyVaultCertificate mergedCertificate = certificateClient.mergeCertificate(config);
     System.out.printf("Received Certificate with name %s and key id %s",
         mergedCertificate.getProperties().getName(), mergedCertificate.getKeyId());
    ```
  syntax:
    content: public KeyVaultCertificateWithPolicy mergeCertificate(MergeCertificateOptions mergeCertificateOptions)
    parameters:
    - id: mergeCertificateOptions
      type: com.azure.security.keyvault.certificates.models.MergeCertificateOptions
      description: the merge certificate configuration holding the x509 certificates.
    return:
      type: com.azure.security.keyvault.certificates.models.KeyVaultCertificateWithPolicy
      description: The merged certificate.
- uid: com.azure.security.keyvault.certificates.CertificateClient.mergeCertificateWithResponse(com.azure.security.keyvault.certificates.models.MergeCertificateOptions,com.azure.core.util.Context)
  id: mergeCertificateWithResponse(com.azure.security.keyvault.certificates.models.MergeCertificateOptions,com.azure.core.util.Context)
  artifact: com.azure:azure-security-keyvault-certificates:4.1.0-beta.3
  parent: com.azure.security.keyvault.certificates.CertificateClient
  langs:
  - java
  name: mergeCertificateWithResponse(MergeCertificateOptions mergeCertificateOptions, Context context)
  nameWithType: CertificateClient.mergeCertificateWithResponse(MergeCertificateOptions mergeCertificateOptions, Context context)
  fullName: com.azure.security.keyvault.certificates.CertificateClient.mergeCertificateWithResponse(MergeCertificateOptions mergeCertificateOptions, Context context)
  overload: com.azure.security.keyvault.certificates.CertificateClient.mergeCertificateWithResponse*
  type: Method
  package: com.azure.security.keyvault.certificates
  summary: >-
    Merges a certificate or a certificate chain with a key pair currently available in the service. This operation requires the `certificates/create` permission.


    **Code Samples**


    Merges a certificate with a kay pair available in the service.


    ```java

    List<byte[]> x509CertsToMerge = new ArrayList<>();
     MergeCertificateOptions mergeConfig =
         new MergeCertificateOptions("certificateName", x509CertsToMerge)
             .setEnabled(false);
     Response<KeyVaultCertificateWithPolicy> mergedCertificateWithResponse =
         certificateClient.mergeCertificateWithResponse(mergeConfig, new Context(key2, value2));
     System.out.printf("Received Certificate with name %s and key id %s",
         mergedCertificateWithResponse.getValue().getProperties().getName(),
         mergedCertificateWithResponse.getValue().getKeyId());
    ```
  syntax:
    content: public Response<KeyVaultCertificateWithPolicy> mergeCertificateWithResponse(MergeCertificateOptions mergeCertificateOptions, Context context)
    parameters:
    - id: mergeCertificateOptions
      type: com.azure.security.keyvault.certificates.models.MergeCertificateOptions
      description: the merge certificate configuration holding the x509 certificates.
    - id: context
      type: com.azure.core.util.Context
      description: Additional context that is passed through the Http pipeline during the service call.
    return:
      type: com.azure.core.http.rest.Response<com.azure.security.keyvault.certificates.models.KeyVaultCertificateWithPolicy>
      description: A <xref uid="com.azure.core.http.rest.Response" data-throw-if-not-resolved="false">Response</xref> whose <xref uid="com.azure.core.http.rest.Response.getValue*" data-throw-if-not-resolved="false">value</xref> contains the merged certificate.
- uid: com.azure.security.keyvault.certificates.CertificateClient.purgeDeletedCertificate(java.lang.String)
  id: purgeDeletedCertificate(java.lang.String)
  artifact: com.azure:azure-security-keyvault-certificates:4.1.0-beta.3
  parent: com.azure.security.keyvault.certificates.CertificateClient
  langs:
  - java
  name: purgeDeletedCertificate(String certificateName)
  nameWithType: CertificateClient.purgeDeletedCertificate(String certificateName)
  fullName: com.azure.security.keyvault.certificates.CertificateClient.purgeDeletedCertificate(String certificateName)
  overload: com.azure.security.keyvault.certificates.CertificateClient.purgeDeletedCertificate*
  type: Method
  package: com.azure.security.keyvault.certificates
  summary: >-
    Permanently deletes the specified deleted certificate without possibility for recovery. The Purge Deleted Certificate operation is applicable for soft-delete enabled vaults and is not available if the recovery level does not specify 'Purgeable'. This operation requires the certificate/purge permission.


    **Code Samples**


    Purges the deleted certificate from the key vault enabled for soft-delete. Prints out the status code from the server response when a response has been received.


    ```java

    certificateClient.purgeDeletedCertificate("certificateName");

    ```
  syntax:
    content: public void purgeDeletedCertificate(String certificateName)
    parameters:
    - id: certificateName
      type: java.lang.String
      description: The name of the deleted certificate.
- uid: com.azure.security.keyvault.certificates.CertificateClient.purgeDeletedCertificateWithResponse(java.lang.String,com.azure.core.util.Context)
  id: purgeDeletedCertificateWithResponse(java.lang.String,com.azure.core.util.Context)
  artifact: com.azure:azure-security-keyvault-certificates:4.1.0-beta.3
  parent: com.azure.security.keyvault.certificates.CertificateClient
  langs:
  - java
  name: purgeDeletedCertificateWithResponse(String certificateName, Context context)
  nameWithType: CertificateClient.purgeDeletedCertificateWithResponse(String certificateName, Context context)
  fullName: com.azure.security.keyvault.certificates.CertificateClient.purgeDeletedCertificateWithResponse(String certificateName, Context context)
  overload: com.azure.security.keyvault.certificates.CertificateClient.purgeDeletedCertificateWithResponse*
  type: Method
  package: com.azure.security.keyvault.certificates
  summary: >-
    Permanently deletes the specified deleted certificate without possibility for recovery. The Purge Deleted Certificate operation is applicable for soft-delete enabled vaults and is not available if the recovery level does not specify 'Purgeable'. This operation requires the certificate/purge permission.


    **Code Samples**


    Purges the deleted certificate from the key vault enabled for soft-delete. Prints out the status code from the server response when a response has been received.


    ```java

    Response<Void> purgeResponse = certificateClient.purgeDeletedCertificateWithResponse("certificateName",
         new Context(key1, value1));
     System.out.printf("Purged Deleted certificate with status %d %n", purgeResponse.getStatusCode());
    ```
  syntax:
    content: public Response<Void> purgeDeletedCertificateWithResponse(String certificateName, Context context)
    parameters:
    - id: certificateName
      type: java.lang.String
      description: The name of the deleted certificate.
    - id: context
      type: com.azure.core.util.Context
      description: Additional context that is passed through the Http pipeline during the service call.
    return:
      type: com.azure.core.http.rest.Response<java.lang.Void>
      description: A response containing status code and HTTP headers.
- uid: com.azure.security.keyvault.certificates.CertificateClient.restoreCertificateBackup(byte[])
  id: restoreCertificateBackup(byte[])
  artifact: com.azure:azure-security-keyvault-certificates:4.1.0-beta.3
  parent: com.azure.security.keyvault.certificates.CertificateClient
  langs:
  - java
  name: restoreCertificateBackup(byte[] backup)
  nameWithType: CertificateClient.restoreCertificateBackup(byte[] backup)
  fullName: com.azure.security.keyvault.certificates.CertificateClient.restoreCertificateBackup(byte[] backup)
  overload: com.azure.security.keyvault.certificates.CertificateClient.restoreCertificateBackup*
  type: Method
  package: com.azure.security.keyvault.certificates
  summary: >-
    Restores a backed up certificate to the vault. All the versions of the certificate are restored to the vault. This operation requires the certificates/restore permission.


    **Code Samples**


    Restores the certificate in the key vault from its backup. Prints out the restored certificate details when a response has been received.


    ```java

    byte[] certificateBackupBlob = {};
     KeyVaultCertificate certificate = certificateClient.restoreCertificateBackup(certificateBackupBlob);
     System.out.printf(" Restored certificate with name %s and id %s",
         certificate.getProperties().getName(), certificate.getProperties().getId());
    ```
  syntax:
    content: public KeyVaultCertificateWithPolicy restoreCertificateBackup(byte[] backup)
    parameters:
    - id: backup
      type: byte[]
      description: The backup blob associated with the certificate.
    return:
      type: com.azure.security.keyvault.certificates.models.KeyVaultCertificateWithPolicy
      description: The <xref uid="com.azure.security.keyvault.certificates.models.KeyVaultCertificate" data-throw-if-not-resolved="false">restored certificate</xref>.
- uid: com.azure.security.keyvault.certificates.CertificateClient.restoreCertificateBackupWithResponse(byte[],com.azure.core.util.Context)
  id: restoreCertificateBackupWithResponse(byte[],com.azure.core.util.Context)
  artifact: com.azure:azure-security-keyvault-certificates:4.1.0-beta.3
  parent: com.azure.security.keyvault.certificates.CertificateClient
  langs:
  - java
  name: restoreCertificateBackupWithResponse(byte[] backup, Context context)
  nameWithType: CertificateClient.restoreCertificateBackupWithResponse(byte[] backup, Context context)
  fullName: com.azure.security.keyvault.certificates.CertificateClient.restoreCertificateBackupWithResponse(byte[] backup, Context context)
  overload: com.azure.security.keyvault.certificates.CertificateClient.restoreCertificateBackupWithResponse*
  type: Method
  package: com.azure.security.keyvault.certificates
  summary: >-
    Restores a backed up certificate to the vault. All the versions of the certificate are restored to the vault. This operation requires the certificates/restore permission.


    **Code Samples**


    Restores the certificate in the key vault from its backup. Prints out the restored certificate details when a response has been received.


    ```java

    byte[] certificateBackupBlobArray = {};
     Response<KeyVaultCertificateWithPolicy> certificateResponse = certificateClient
         .restoreCertificateBackupWithResponse(certificateBackupBlobArray, new Context(key1, value1));
     System.out.printf(" Restored certificate with name %s and id %s",
         certificateResponse.getValue().getProperties().getName(),
         certificateResponse.getValue().getProperties().getId());
    ```
  syntax:
    content: public Response<KeyVaultCertificateWithPolicy> restoreCertificateBackupWithResponse(byte[] backup, Context context)
    parameters:
    - id: backup
      type: byte[]
      description: The backup blob associated with the certificate.
    - id: context
      type: com.azure.core.util.Context
      description: Additional context that is passed through the Http pipeline during the service call.
    return:
      type: com.azure.core.http.rest.Response<com.azure.security.keyvault.certificates.models.KeyVaultCertificateWithPolicy>
      description: A <xref uid="com.azure.core.http.rest.Response" data-throw-if-not-resolved="false">Response</xref> whose <xref uid="com.azure.core.http.rest.Response.getValue*" data-throw-if-not-resolved="false">value</xref> contains the <xref uid="com.azure.security.keyvault.certificates.models.KeyVaultCertificate" data-throw-if-not-resolved="false">restored certificate</xref>.
- uid: com.azure.security.keyvault.certificates.CertificateClient.setContacts(java.util.List<com.azure.security.keyvault.certificates.models.CertificateContact>)
  id: setContacts(java.util.List<com.azure.security.keyvault.certificates.models.CertificateContact>)
  artifact: com.azure:azure-security-keyvault-certificates:4.1.0-beta.3
  parent: com.azure.security.keyvault.certificates.CertificateClient
  langs:
  - java
  name: setContacts(List<CertificateContact> contacts)
  nameWithType: CertificateClient.setContacts(List<CertificateContact> contacts)
  fullName: com.azure.security.keyvault.certificates.CertificateClient.setContacts(List<CertificateContact> contacts)
  overload: com.azure.security.keyvault.certificates.CertificateClient.setContacts*
  type: Method
  package: com.azure.security.keyvault.certificates
  summary: >-
    Sets the certificate contacts on the key vault. This operation requires the `certificates/managecontacts` permission.


    The <xref uid="com.azure.security.keyvault.certificates.models.LifetimeAction" data-throw-if-not-resolved="false">LifetimeAction</xref> of type <xref uid="com.azure.security.keyvault.certificates.models.CertificatePolicyAction.EMAIL_CONTACTS" data-throw-if-not-resolved="false">CertificatePolicyAction#EMAIL_CONTACTS</xref> set on a <xref uid="com.azure.security.keyvault.certificates.models.CertificatePolicy" data-throw-if-not-resolved="false">CertificatePolicy</xref> emails the contacts set on the vault when triggered.


    **Code Samples**


    Sets the certificate contacts in the Azure Key Vault. Prints out the returned contacts details.


    ```java

    CertificateContact contactToAdd = new CertificateContact().setName("user").setEmail("useremail{@literal @}exmaple.com");
     for (CertificateContact contact : certificateClient.setContacts(Arrays.asList(contactToAdd))) {
         System.out.printf("Added contact with name %s and email %s to key vault", contact.getName(),
             contact.getEmail());
     }
    ```
  syntax:
    content: public PagedIterable<CertificateContact> setContacts(List<CertificateContact> contacts)
    parameters:
    - id: contacts
      type: java.util.List<com.azure.security.keyvault.certificates.models.CertificateContact>
      description: The list of contacts to set on the vault.
    return:
      type: com.azure.core.http.rest.PagedIterable<com.azure.security.keyvault.certificates.models.CertificateContact>
      description: A <xref uid="com.azure.core.http.rest.PagedIterable" data-throw-if-not-resolved="false">PagedIterable</xref> containing all of the <xref uid="com.azure.security.keyvault.certificates.models.CertificateContact" data-throw-if-not-resolved="false">certificate contacts</xref> in the vault.
- uid: com.azure.security.keyvault.certificates.CertificateClient.setContacts(java.util.List<com.azure.security.keyvault.certificates.models.CertificateContact>,com.azure.core.util.Context)
  id: setContacts(java.util.List<com.azure.security.keyvault.certificates.models.CertificateContact>,com.azure.core.util.Context)
  artifact: com.azure:azure-security-keyvault-certificates:4.1.0-beta.3
  parent: com.azure.security.keyvault.certificates.CertificateClient
  langs:
  - java
  name: setContacts(List<CertificateContact> contacts, Context context)
  nameWithType: CertificateClient.setContacts(List<CertificateContact> contacts, Context context)
  fullName: com.azure.security.keyvault.certificates.CertificateClient.setContacts(List<CertificateContact> contacts, Context context)
  overload: com.azure.security.keyvault.certificates.CertificateClient.setContacts*
  type: Method
  package: com.azure.security.keyvault.certificates
  summary: >-
    Sets the certificate contacts on the key vault. This operation requires the `certificates/managecontacts` permission.


    The <xref uid="com.azure.security.keyvault.certificates.models.LifetimeAction" data-throw-if-not-resolved="false">LifetimeAction</xref> of type <xref uid="com.azure.security.keyvault.certificates.models.CertificatePolicyAction.EMAIL_CONTACTS" data-throw-if-not-resolved="false">CertificatePolicyAction#EMAIL_CONTACTS</xref> set on a <xref uid="com.azure.security.keyvault.certificates.models.CertificatePolicy" data-throw-if-not-resolved="false">CertificatePolicy</xref> emails the contacts set on the vault when triggered.


    **Code Samples**


    Sets the certificate contacts in the Azure Key Vault. Prints out the returned contacts details.


    ```java

    CertificateContact sampleContact = new CertificateContact().setName("user").setEmail("useremail{@literal @}exmaple.com");
     for (CertificateContact contact : certificateClient.setContacts(Arrays.asList(sampleContact),
         new Context(key1, value1))) {
         System.out.printf("Added contact with name %s and email %s to key vault", contact.getName(),
             contact.getEmail());
     }
    ```
  syntax:
    content: public PagedIterable<CertificateContact> setContacts(List<CertificateContact> contacts, Context context)
    parameters:
    - id: contacts
      type: java.util.List<com.azure.security.keyvault.certificates.models.CertificateContact>
      description: The list of contacts to set on the vault.
    - id: context
      type: com.azure.core.util.Context
      description: Additional context that is passed through the Http pipeline during the service call.
    return:
      type: com.azure.core.http.rest.PagedIterable<com.azure.security.keyvault.certificates.models.CertificateContact>
      description: A <xref uid="com.azure.core.http.rest.PagedIterable" data-throw-if-not-resolved="false">PagedIterable</xref> containing all of the <xref uid="com.azure.security.keyvault.certificates.models.CertificateContact" data-throw-if-not-resolved="false">certificate contacts</xref> in the vault.
- uid: com.azure.security.keyvault.certificates.CertificateClient.updateCertificatePolicy(java.lang.String,com.azure.security.keyvault.certificates.models.CertificatePolicy)
  id: updateCertificatePolicy(java.lang.String,com.azure.security.keyvault.certificates.models.CertificatePolicy)
  artifact: com.azure:azure-security-keyvault-certificates:4.1.0-beta.3
  parent: com.azure.security.keyvault.certificates.CertificateClient
  langs:
  - java
  name: updateCertificatePolicy(String certificateName, CertificatePolicy policy)
  nameWithType: CertificateClient.updateCertificatePolicy(String certificateName, CertificatePolicy policy)
  fullName: com.azure.security.keyvault.certificates.CertificateClient.updateCertificatePolicy(String certificateName, CertificatePolicy policy)
  overload: com.azure.security.keyvault.certificates.CertificateClient.updateCertificatePolicy*
  type: Method
  package: com.azure.security.keyvault.certificates
  summary: >-
    Updates the policy for a certificate. The update operation changes specified attributes of the certificate policy and attributes that are not specified in the request are left unchanged. This operation requires the `certificates/update` permission.


    **Code Samples**


    Gets the certificate policy, changes its properties and then updates it in the Azure Key Vault. Prints out the returned policy details when a response has been received.


    ```java

    CertificatePolicy certificatePolicy = certificateClient.getCertificatePolicy("certificateName");
     //Update the certificate policy cert transparency property.
     certificatePolicy.setCertificateTransparent(true);
     CertificatePolicy updatedCertPolicy = certificateClient.updateCertificatePolicy("certificateName",
         certificatePolicy);
     System.out.printf("Updated Certificate Policy transparency status %s",
         updatedCertPolicy.isCertificateTransparent());
    ```
  syntax:
    content: public CertificatePolicy updateCertificatePolicy(String certificateName, CertificatePolicy policy)
    parameters:
    - id: certificateName
      type: java.lang.String
      description: The name of the certificate whose policy is to be updated.
    - id: policy
      type: com.azure.security.keyvault.certificates.models.CertificatePolicy
      description: The certificate policy to be updated.
    return:
      type: com.azure.security.keyvault.certificates.models.CertificatePolicy
      description: The updated <xref uid="com.azure.security.keyvault.certificates.models.CertificatePolicy" data-throw-if-not-resolved="false">certificate policy</xref>.
- uid: com.azure.security.keyvault.certificates.CertificateClient.updateCertificatePolicyWithResponse(java.lang.String,com.azure.security.keyvault.certificates.models.CertificatePolicy,com.azure.core.util.Context)
  id: updateCertificatePolicyWithResponse(java.lang.String,com.azure.security.keyvault.certificates.models.CertificatePolicy,com.azure.core.util.Context)
  artifact: com.azure:azure-security-keyvault-certificates:4.1.0-beta.3
  parent: com.azure.security.keyvault.certificates.CertificateClient
  langs:
  - java
  name: updateCertificatePolicyWithResponse(String certificateName, CertificatePolicy policy, Context context)
  nameWithType: CertificateClient.updateCertificatePolicyWithResponse(String certificateName, CertificatePolicy policy, Context context)
  fullName: com.azure.security.keyvault.certificates.CertificateClient.updateCertificatePolicyWithResponse(String certificateName, CertificatePolicy policy, Context context)
  overload: com.azure.security.keyvault.certificates.CertificateClient.updateCertificatePolicyWithResponse*
  type: Method
  package: com.azure.security.keyvault.certificates
  summary: >-
    Updates the policy for a certificate. The update operation changes specified attributes of the certificate policy and attributes that are not specified in the request are left unchanged. This operation requires the `certificates/update` permission.


    **Code Samples**


    Gets the certificate policy, changes its properties and then updates it in the Azure Key Vault. Prints out the returned policy details when a response has been received.


    ```java

    CertificatePolicy certificatePolicyToUpdate = certificateClient.getCertificatePolicy("certificateName");
     //Update the certificate policy cert transparency property.
     certificatePolicyToUpdate.setCertificateTransparent(true);
     Response<CertificatePolicy> updatedCertPolicyWithResponse = certificateClient
         .updateCertificatePolicyWithResponse("certificateName", certificatePolicyToUpdate,
             new Context(key1, value1));
     System.out.printf("Updated Certificate Policy transparency status %s", updatedCertPolicyWithResponse
         .getValue().isCertificateTransparent());
    ```
  syntax:
    content: public Response<CertificatePolicy> updateCertificatePolicyWithResponse(String certificateName, CertificatePolicy policy, Context context)
    parameters:
    - id: certificateName
      type: java.lang.String
      description: The certificateName of the certificate whose policy is to be updated.
    - id: policy
      type: com.azure.security.keyvault.certificates.models.CertificatePolicy
      description: The certificate policy to be updated.
    - id: context
      type: com.azure.core.util.Context
      description: Additional context that is passed through the Http pipeline during the service call.
    return:
      type: com.azure.core.http.rest.Response<com.azure.security.keyvault.certificates.models.CertificatePolicy>
      description: A <xref uid="com.azure.core.http.rest.Response" data-throw-if-not-resolved="false">Response</xref> whose <xref uid="com.azure.core.http.rest.Response.getValue*" data-throw-if-not-resolved="false">value</xref> contains the updated <xref uid="com.azure.security.keyvault.certificates.models.CertificatePolicy" data-throw-if-not-resolved="false">certificate policy</xref>.
- uid: com.azure.security.keyvault.certificates.CertificateClient.updateCertificateProperties(com.azure.security.keyvault.certificates.models.CertificateProperties)
  id: updateCertificateProperties(com.azure.security.keyvault.certificates.models.CertificateProperties)
  artifact: com.azure:azure-security-keyvault-certificates:4.1.0-beta.3
  parent: com.azure.security.keyvault.certificates.CertificateClient
  langs:
  - java
  name: updateCertificateProperties(CertificateProperties properties)
  nameWithType: CertificateClient.updateCertificateProperties(CertificateProperties properties)
  fullName: com.azure.security.keyvault.certificates.CertificateClient.updateCertificateProperties(CertificateProperties properties)
  overload: com.azure.security.keyvault.certificates.CertificateClient.updateCertificateProperties*
  type: Method
  package: com.azure.security.keyvault.certificates
  summary: >-
    Updates the specified attributes associated with the specified certificate. The update operation changes specified attributes of an existing stored certificate and attributes that are not specified in the request are left unchanged. This operation requires the certificates/update permission.


    **Code Samples**


    Gets latest version of the certificate, changes its tags and enabled status and then updates it in the Azure Key Vault. Prints out the returned certificate details when a response has been received.


    ```java

    KeyVaultCertificate certificate = certificateClient.getCertificate("certificateName");
     // Update certificate enabled status
     certificate.getProperties().setEnabled(false);
     KeyVaultCertificate updatedCertificate = certificateClient.updateCertificateProperties(certificate.getProperties());
     System.out.printf("Updated Certificate with name %s and enabled status %s",
         updatedCertificate.getProperties().getName(), updatedCertificate.getProperties().isEnabled());
    ```
  syntax:
    content: public KeyVaultCertificate updateCertificateProperties(CertificateProperties properties)
    parameters:
    - id: properties
      type: com.azure.security.keyvault.certificates.models.CertificateProperties
      description: The <xref uid="com.azure.security.keyvault.certificates.models.CertificateProperties" data-throw-if-not-resolved="false">CertificateProperties</xref> object with updated properties.
    return:
      type: com.azure.security.keyvault.certificates.models.KeyVaultCertificate
      description: The <xref uid="com.azure.security.keyvault.certificates.models.CertificateProperties" data-throw-if-not-resolved="false">updated certificate</xref>.
- uid: com.azure.security.keyvault.certificates.CertificateClient.updateCertificatePropertiesWithResponse(com.azure.security.keyvault.certificates.models.CertificateProperties,com.azure.core.util.Context)
  id: updateCertificatePropertiesWithResponse(com.azure.security.keyvault.certificates.models.CertificateProperties,com.azure.core.util.Context)
  artifact: com.azure:azure-security-keyvault-certificates:4.1.0-beta.3
  parent: com.azure.security.keyvault.certificates.CertificateClient
  langs:
  - java
  name: updateCertificatePropertiesWithResponse(CertificateProperties properties, Context context)
  nameWithType: CertificateClient.updateCertificatePropertiesWithResponse(CertificateProperties properties, Context context)
  fullName: com.azure.security.keyvault.certificates.CertificateClient.updateCertificatePropertiesWithResponse(CertificateProperties properties, Context context)
  overload: com.azure.security.keyvault.certificates.CertificateClient.updateCertificatePropertiesWithResponse*
  type: Method
  package: com.azure.security.keyvault.certificates
  summary: >-
    Updates the specified attributes associated with the specified certificate. The update operation changes specified attributes of an existing stored certificate and attributes that are not specified in the request are left unchanged. This operation requires the certificates/update permission.


    **Code Samples**


    Gets latest version of the certificate, changes its tags and enabled status and then updates it in the Azure Key Vault. Prints out the returned certificate details when a response has been received.


    ```java

    KeyVaultCertificate certificateToUpdate = certificateClient.getCertificate("certificateName");
     // Update certificate enabled status
     certificateToUpdate.getProperties().setEnabled(false);
     Response<KeyVaultCertificate> updatedCertificateResponse = certificateClient.
         updateCertificatePropertiesWithResponse(certificateToUpdate.getProperties(), new Context(key1, value1));
     System.out.printf("Updated Certificate with name %s and enabled status %s",
         updatedCertificateResponse.getValue().getProperties().getName(),
         updatedCertificateResponse.getValue().getProperties().isEnabled());
    ```
  syntax:
    content: public Response<KeyVaultCertificate> updateCertificatePropertiesWithResponse(CertificateProperties properties, Context context)
    parameters:
    - id: properties
      type: com.azure.security.keyvault.certificates.models.CertificateProperties
      description: The <xref uid="com.azure.security.keyvault.certificates.models.CertificateProperties" data-throw-if-not-resolved="false">CertificateProperties</xref> object with updated properties.
    - id: context
      type: com.azure.core.util.Context
      description: Additional context that is passed through the Http pipeline during the service call.
    return:
      type: com.azure.core.http.rest.Response<com.azure.security.keyvault.certificates.models.KeyVaultCertificate>
      description: A <xref uid="com.azure.core.http.rest.Response" data-throw-if-not-resolved="false">Response</xref> whose <xref uid="com.azure.core.http.rest.Response.getValue*" data-throw-if-not-resolved="false">value</xref> contains the <xref uid="com.azure.security.keyvault.certificates.models.CertificateProperties" data-throw-if-not-resolved="false">updated certificate</xref>.
- uid: com.azure.security.keyvault.certificates.CertificateClient.updateIssuer(com.azure.security.keyvault.certificates.models.CertificateIssuer)
  id: updateIssuer(com.azure.security.keyvault.certificates.models.CertificateIssuer)
  artifact: com.azure:azure-security-keyvault-certificates:4.1.0-beta.3
  parent: com.azure.security.keyvault.certificates.CertificateClient
  langs:
  - java
  name: updateIssuer(CertificateIssuer issuer)
  nameWithType: CertificateClient.updateIssuer(CertificateIssuer issuer)
  fullName: com.azure.security.keyvault.certificates.CertificateClient.updateIssuer(CertificateIssuer issuer)
  overload: com.azure.security.keyvault.certificates.CertificateClient.updateIssuer*
  type: Method
  package: com.azure.security.keyvault.certificates
  summary: >-
    Updates the specified certificate issuer. The UpdateCertificateIssuer operation updates the specified attributes of the certificate issuer entity. This operation requires the certificates/setissuers permission.


    **Code Samples**


    Gets the certificate issuer, changes its attributes/properties then updates it in the Azure Key Vault. Prints out the returned certificate issuer details when a response has been received.


    ```java

    CertificateIssuer returnedIssuer = certificateClient.getIssuer("issuerName");
     returnedIssuer.setAccountId("newAccountId");
     CertificateIssuer updatedIssuer = certificateClient.updateIssuer(returnedIssuer);
     System.out.printf("Updated issuer with name %s, provider %s and account Id %s", updatedIssuer.getName(),
         updatedIssuer.getProvider(), updatedIssuer.getAccountId());
    ```
  syntax:
    content: public CertificateIssuer updateIssuer(CertificateIssuer issuer)
    parameters:
    - id: issuer
      type: com.azure.security.keyvault.certificates.models.CertificateIssuer
      description: The <xref uid="com.azure.security.keyvault.certificates.models.CertificateIssuer" data-throw-if-not-resolved="false">issuer</xref> with updated properties.
    return:
      type: com.azure.security.keyvault.certificates.models.CertificateIssuer
      description: The <xref uid="com.azure.security.keyvault.certificates.models.CertificateIssuer" data-throw-if-not-resolved="false">updated issuer</xref>.
- uid: com.azure.security.keyvault.certificates.CertificateClient.updateIssuerWithResponse(com.azure.security.keyvault.certificates.models.CertificateIssuer,com.azure.core.util.Context)
  id: updateIssuerWithResponse(com.azure.security.keyvault.certificates.models.CertificateIssuer,com.azure.core.util.Context)
  artifact: com.azure:azure-security-keyvault-certificates:4.1.0-beta.3
  parent: com.azure.security.keyvault.certificates.CertificateClient
  langs:
  - java
  name: updateIssuerWithResponse(CertificateIssuer issuer, Context context)
  nameWithType: CertificateClient.updateIssuerWithResponse(CertificateIssuer issuer, Context context)
  fullName: com.azure.security.keyvault.certificates.CertificateClient.updateIssuerWithResponse(CertificateIssuer issuer, Context context)
  overload: com.azure.security.keyvault.certificates.CertificateClient.updateIssuerWithResponse*
  type: Method
  package: com.azure.security.keyvault.certificates
  summary: >-
    Updates the specified certificate issuer. The UpdateCertificateIssuer operation updates the specified attributes of the certificate issuer entity. This operation requires the certificates/setissuers permission.


    **Code Samples**


    Gets the certificate issuer, changes its attributes/properties then updates it in the Azure Key Vault. Prints out the returned certificate issuer details when a response has been received.


    ```java

    CertificateIssuer issuer = certificateClient.getIssuer("issuerName");
     returnedIssuer.setAccountId("newAccountId");
     Response<CertificateIssuer> updatedIssuerWithResponse = certificateClient.updateIssuerWithResponse(issuer,
         new Context(key1, value1));
     System.out.printf("Updated issuer with name %s, provider %s and account Id %s",
         updatedIssuerWithResponse.getValue().getName(),
         updatedIssuerWithResponse.getValue().getProvider(),
         updatedIssuerWithResponse.getValue().getAccountId());
    ```
  syntax:
    content: public Response<CertificateIssuer> updateIssuerWithResponse(CertificateIssuer issuer, Context context)
    parameters:
    - id: issuer
      type: com.azure.security.keyvault.certificates.models.CertificateIssuer
      description: The <xref uid="com.azure.security.keyvault.certificates.models.CertificateIssuer" data-throw-if-not-resolved="false">issuer</xref> with updated properties.
    - id: context
      type: com.azure.core.util.Context
      description: Additional context that is passed through the Http pipeline during the service call.
    return:
      type: com.azure.core.http.rest.Response<com.azure.security.keyvault.certificates.models.CertificateIssuer>
      description: A <xref uid="com.azure.core.http.rest.Response" data-throw-if-not-resolved="false">Response</xref> whose <xref uid="com.azure.core.http.rest.Response.getValue*" data-throw-if-not-resolved="false">value</xref> contains the <xref uid="com.azure.security.keyvault.certificates.models.CertificateIssuer" data-throw-if-not-resolved="false">updated issuer</xref>.
references:
- uid: com.azure.security.keyvault.certificates.CertificateAsyncClient
  name: CertificateAsyncClient
  nameWithType: CertificateAsyncClient
  fullName: com.azure.security.keyvault.certificates.CertificateAsyncClient
- uid: com.azure.security.keyvault.certificates.CertificateClient.CertificateClient*
  name: CertificateClient
  nameWithType: CertificateClient.CertificateClient
  fullName: com.azure.security.keyvault.certificates.CertificateClient.CertificateClient
  package: com.azure.security.keyvault.certificates
- uid: java.lang.String
  spec.java:
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
- uid: com.azure.security.keyvault.certificates.CertificateClient.getVaultUrl*
  name: getVaultUrl
  nameWithType: CertificateClient.getVaultUrl
  fullName: com.azure.security.keyvault.certificates.CertificateClient.getVaultUrl
  package: com.azure.security.keyvault.certificates
- uid: com.azure.security.keyvault.certificates.models.CertificatePolicy
  name: CertificatePolicy
  nameWithType: CertificatePolicy
  fullName: com.azure.security.keyvault.certificates.models.CertificatePolicy
- uid: java.lang.Boolean
  spec.java:
  - uid: java.lang.Boolean
    name: Boolean
    fullName: java.lang.Boolean
- uid: java.util.Map<java.lang.String,java.lang.String>
  spec.java:
  - uid: java.util.Map
    name: Map
    fullName: java.util.Map
  - name: <
    fullName: <
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
  - name: ','
    fullName: ','
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
  - name: '>'
    fullName: '>'
- uid: com.azure.core.util.polling.SyncPoller<com.azure.security.keyvault.certificates.models.CertificateOperation,com.azure.security.keyvault.certificates.models.KeyVaultCertificateWithPolicy>
  spec.java:
  - uid: com.azure.core.util.polling.SyncPoller
    name: SyncPoller
    fullName: com.azure.core.util.polling.SyncPoller
  - name: <
    fullName: <
  - uid: com.azure.security.keyvault.certificates.models.CertificateOperation
    name: CertificateOperation
    fullName: com.azure.security.keyvault.certificates.models.CertificateOperation
  - name: ','
    fullName: ','
  - uid: com.azure.security.keyvault.certificates.models.KeyVaultCertificateWithPolicy
    name: KeyVaultCertificateWithPolicy
    fullName: com.azure.security.keyvault.certificates.models.KeyVaultCertificateWithPolicy
  - name: '>'
    fullName: '>'
- uid: com.azure.security.keyvault.certificates.CertificateClient.beginCreateCertificate*
  name: beginCreateCertificate
  nameWithType: CertificateClient.beginCreateCertificate
  fullName: com.azure.security.keyvault.certificates.CertificateClient.beginCreateCertificate
  package: com.azure.security.keyvault.certificates
- uid: com.azure.security.keyvault.certificates.CertificateClient.getCertificateOperation*
  name: getCertificateOperation
  nameWithType: CertificateClient.getCertificateOperation
  fullName: com.azure.security.keyvault.certificates.CertificateClient.getCertificateOperation
  package: com.azure.security.keyvault.certificates
- uid: com.azure.security.keyvault.certificates.models.KeyVaultCertificateWithPolicy
  name: KeyVaultCertificateWithPolicy
  nameWithType: KeyVaultCertificateWithPolicy
  fullName: com.azure.security.keyvault.certificates.models.KeyVaultCertificateWithPolicy
- uid: com.azure.security.keyvault.certificates.CertificateClient.getCertificate*
  name: getCertificate
  nameWithType: CertificateClient.getCertificate
  fullName: com.azure.security.keyvault.certificates.CertificateClient.getCertificate
  package: com.azure.security.keyvault.certificates
- uid: com.azure.core.util.Context
  spec.java:
  - uid: com.azure.core.util.Context
    name: Context
    fullName: com.azure.core.util.Context
- uid: com.azure.core.http.rest.Response<com.azure.security.keyvault.certificates.models.KeyVaultCertificateWithPolicy>
  spec.java:
  - uid: com.azure.core.http.rest.Response
    name: Response
    fullName: com.azure.core.http.rest.Response
  - name: <
    fullName: <
  - uid: com.azure.security.keyvault.certificates.models.KeyVaultCertificateWithPolicy
    name: KeyVaultCertificateWithPolicy
    fullName: com.azure.security.keyvault.certificates.models.KeyVaultCertificateWithPolicy
  - name: '>'
    fullName: '>'
- uid: com.azure.security.keyvault.certificates.CertificateClient.getCertificateWithResponse*
  name: getCertificateWithResponse
  nameWithType: CertificateClient.getCertificateWithResponse
  fullName: com.azure.security.keyvault.certificates.CertificateClient.getCertificateWithResponse
  package: com.azure.security.keyvault.certificates
- uid: com.azure.core.http.rest.Response<com.azure.security.keyvault.certificates.models.KeyVaultCertificate>
  spec.java:
  - uid: com.azure.core.http.rest.Response
    name: Response
    fullName: com.azure.core.http.rest.Response
  - name: <
    fullName: <
  - uid: com.azure.security.keyvault.certificates.models.KeyVaultCertificate
    name: KeyVaultCertificate
    fullName: com.azure.security.keyvault.certificates.models.KeyVaultCertificate
  - name: '>'
    fullName: '>'
- uid: com.azure.security.keyvault.certificates.CertificateClient.getCertificateVersionWithResponse*
  name: getCertificateVersionWithResponse
  nameWithType: CertificateClient.getCertificateVersionWithResponse
  fullName: com.azure.security.keyvault.certificates.CertificateClient.getCertificateVersionWithResponse
  package: com.azure.security.keyvault.certificates
- uid: com.azure.security.keyvault.certificates.models.KeyVaultCertificate
  name: KeyVaultCertificate
  nameWithType: KeyVaultCertificate
  fullName: com.azure.security.keyvault.certificates.models.KeyVaultCertificate
- uid: com.azure.security.keyvault.certificates.CertificateClient.getCertificateVersion*
  name: getCertificateVersion
  nameWithType: CertificateClient.getCertificateVersion
  fullName: com.azure.security.keyvault.certificates.CertificateClient.getCertificateVersion
  package: com.azure.security.keyvault.certificates
- uid: com.azure.security.keyvault.certificates.models.CertificateProperties
  name: CertificateProperties
  nameWithType: CertificateProperties
  fullName: com.azure.security.keyvault.certificates.models.CertificateProperties
- uid: com.azure.security.keyvault.certificates.CertificateClient.updateCertificateProperties*
  name: updateCertificateProperties
  nameWithType: CertificateClient.updateCertificateProperties
  fullName: com.azure.security.keyvault.certificates.CertificateClient.updateCertificateProperties
  package: com.azure.security.keyvault.certificates
- uid: com.azure.security.keyvault.certificates.CertificateClient.updateCertificatePropertiesWithResponse*
  name: updateCertificatePropertiesWithResponse
  nameWithType: CertificateClient.updateCertificatePropertiesWithResponse
  fullName: com.azure.security.keyvault.certificates.CertificateClient.updateCertificatePropertiesWithResponse
  package: com.azure.security.keyvault.certificates
- uid: com.azure.core.util.polling.SyncPoller<com.azure.security.keyvault.certificates.models.DeletedCertificate,java.lang.Void>
  spec.java:
  - uid: com.azure.core.util.polling.SyncPoller
    name: SyncPoller
    fullName: com.azure.core.util.polling.SyncPoller
  - name: <
    fullName: <
  - uid: com.azure.security.keyvault.certificates.models.DeletedCertificate
    name: DeletedCertificate
    fullName: com.azure.security.keyvault.certificates.models.DeletedCertificate
  - name: ','
    fullName: ','
  - uid: java.lang.Void
    name: Void
    fullName: java.lang.Void
  - name: '>'
    fullName: '>'
- uid: com.azure.security.keyvault.certificates.CertificateClient.beginDeleteCertificate*
  name: beginDeleteCertificate
  nameWithType: CertificateClient.beginDeleteCertificate
  fullName: com.azure.security.keyvault.certificates.CertificateClient.beginDeleteCertificate
  package: com.azure.security.keyvault.certificates
- uid: com.azure.security.keyvault.certificates.models.DeletedCertificate
  name: DeletedCertificate
  nameWithType: DeletedCertificate
  fullName: com.azure.security.keyvault.certificates.models.DeletedCertificate
- uid: com.azure.security.keyvault.certificates.CertificateClient.getDeletedCertificate*
  name: getDeletedCertificate
  nameWithType: CertificateClient.getDeletedCertificate
  fullName: com.azure.security.keyvault.certificates.CertificateClient.getDeletedCertificate
  package: com.azure.security.keyvault.certificates
- uid: com.azure.core.http.rest.Response<com.azure.security.keyvault.certificates.models.DeletedCertificate>
  spec.java:
  - uid: com.azure.core.http.rest.Response
    name: Response
    fullName: com.azure.core.http.rest.Response
  - name: <
    fullName: <
  - uid: com.azure.security.keyvault.certificates.models.DeletedCertificate
    name: DeletedCertificate
    fullName: com.azure.security.keyvault.certificates.models.DeletedCertificate
  - name: '>'
    fullName: '>'
- uid: com.azure.security.keyvault.certificates.CertificateClient.getDeletedCertificateWithResponse*
  name: getDeletedCertificateWithResponse
  nameWithType: CertificateClient.getDeletedCertificateWithResponse
  fullName: com.azure.security.keyvault.certificates.CertificateClient.getDeletedCertificateWithResponse
  package: com.azure.security.keyvault.certificates
- uid: com.azure.security.keyvault.certificates.CertificateClient.purgeDeletedCertificate*
  name: purgeDeletedCertificate
  nameWithType: CertificateClient.purgeDeletedCertificate
  fullName: com.azure.security.keyvault.certificates.CertificateClient.purgeDeletedCertificate
  package: com.azure.security.keyvault.certificates
- uid: com.azure.core.http.rest.Response<java.lang.Void>
  spec.java:
  - uid: com.azure.core.http.rest.Response
    name: Response
    fullName: com.azure.core.http.rest.Response
  - name: <
    fullName: <
  - uid: java.lang.Void
    name: Void
    fullName: java.lang.Void
  - name: '>'
    fullName: '>'
- uid: com.azure.security.keyvault.certificates.CertificateClient.purgeDeletedCertificateWithResponse*
  name: purgeDeletedCertificateWithResponse
  nameWithType: CertificateClient.purgeDeletedCertificateWithResponse
  fullName: com.azure.security.keyvault.certificates.CertificateClient.purgeDeletedCertificateWithResponse
  package: com.azure.security.keyvault.certificates
- uid: com.azure.core.util.polling.SyncPoller<com.azure.security.keyvault.certificates.models.KeyVaultCertificateWithPolicy,java.lang.Void>
  spec.java:
  - uid: com.azure.core.util.polling.SyncPoller
    name: SyncPoller
    fullName: com.azure.core.util.polling.SyncPoller
  - name: <
    fullName: <
  - uid: com.azure.security.keyvault.certificates.models.KeyVaultCertificateWithPolicy
    name: KeyVaultCertificateWithPolicy
    fullName: com.azure.security.keyvault.certificates.models.KeyVaultCertificateWithPolicy
  - name: ','
    fullName: ','
  - uid: java.lang.Void
    name: Void
    fullName: java.lang.Void
  - name: '>'
    fullName: '>'
- uid: com.azure.security.keyvault.certificates.CertificateClient.beginRecoverDeletedCertificate*
  name: beginRecoverDeletedCertificate
  nameWithType: CertificateClient.beginRecoverDeletedCertificate
  fullName: com.azure.security.keyvault.certificates.CertificateClient.beginRecoverDeletedCertificate
  package: com.azure.security.keyvault.certificates
- uid: byte[]
  spec.java:
  - uid: byte
    name: byte
    fullName: byte
  - name: '[]'
    fullName: '[]'
- uid: com.azure.security.keyvault.certificates.CertificateClient.backupCertificate*
  name: backupCertificate
  nameWithType: CertificateClient.backupCertificate
  fullName: com.azure.security.keyvault.certificates.CertificateClient.backupCertificate
  package: com.azure.security.keyvault.certificates
- uid: com.azure.core.http.rest.Response<byte[]>
  spec.java:
  - uid: com.azure.core.http.rest.Response
    name: Response
    fullName: com.azure.core.http.rest.Response
  - name: <
    fullName: <
  - uid: byte
    name: byte
    fullName: byte
  - name: '[]'
    fullName: '[]'
  - name: '>'
    fullName: '>'
- uid: com.azure.security.keyvault.certificates.CertificateClient.backupCertificateWithResponse*
  name: backupCertificateWithResponse
  nameWithType: CertificateClient.backupCertificateWithResponse
  fullName: com.azure.security.keyvault.certificates.CertificateClient.backupCertificateWithResponse
  package: com.azure.security.keyvault.certificates
- uid: com.azure.security.keyvault.certificates.CertificateClient.restoreCertificateBackup*
  name: restoreCertificateBackup
  nameWithType: CertificateClient.restoreCertificateBackup
  fullName: com.azure.security.keyvault.certificates.CertificateClient.restoreCertificateBackup
  package: com.azure.security.keyvault.certificates
- uid: com.azure.security.keyvault.certificates.CertificateClient.restoreCertificateBackupWithResponse*
  name: restoreCertificateBackupWithResponse
  nameWithType: CertificateClient.restoreCertificateBackupWithResponse
  fullName: com.azure.security.keyvault.certificates.CertificateClient.restoreCertificateBackupWithResponse
  package: com.azure.security.keyvault.certificates
- uid: com.azure.core.http.rest.PagedIterable<com.azure.security.keyvault.certificates.models.CertificateProperties>
  spec.java:
  - uid: com.azure.core.http.rest.PagedIterable
    name: PagedIterable
    fullName: com.azure.core.http.rest.PagedIterable
  - name: <
    fullName: <
  - uid: com.azure.security.keyvault.certificates.models.CertificateProperties
    name: CertificateProperties
    fullName: com.azure.security.keyvault.certificates.models.CertificateProperties
  - name: '>'
    fullName: '>'
- uid: com.azure.security.keyvault.certificates.CertificateClient.listPropertiesOfCertificates*
  name: listPropertiesOfCertificates
  nameWithType: CertificateClient.listPropertiesOfCertificates
  fullName: com.azure.security.keyvault.certificates.CertificateClient.listPropertiesOfCertificates
  package: com.azure.security.keyvault.certificates
- uid: boolean
  spec.java:
  - uid: boolean
    name: boolean
    fullName: boolean
- uid: com.azure.core.http.rest.PagedIterable<com.azure.security.keyvault.certificates.models.DeletedCertificate>
  spec.java:
  - uid: com.azure.core.http.rest.PagedIterable
    name: PagedIterable
    fullName: com.azure.core.http.rest.PagedIterable
  - name: <
    fullName: <
  - uid: com.azure.security.keyvault.certificates.models.DeletedCertificate
    name: DeletedCertificate
    fullName: com.azure.security.keyvault.certificates.models.DeletedCertificate
  - name: '>'
    fullName: '>'
- uid: com.azure.security.keyvault.certificates.CertificateClient.listDeletedCertificates*
  name: listDeletedCertificates
  nameWithType: CertificateClient.listDeletedCertificates
  fullName: com.azure.security.keyvault.certificates.CertificateClient.listDeletedCertificates
  package: com.azure.security.keyvault.certificates
- uid: com.azure.security.keyvault.certificates.CertificateClient.listPropertiesOfCertificateVersions*
  name: listPropertiesOfCertificateVersions
  nameWithType: CertificateClient.listPropertiesOfCertificateVersions
  fullName: com.azure.security.keyvault.certificates.CertificateClient.listPropertiesOfCertificateVersions
  package: com.azure.security.keyvault.certificates
- uid: com.azure.security.keyvault.certificates.CertificateClient.getCertificatePolicy*
  name: getCertificatePolicy
  nameWithType: CertificateClient.getCertificatePolicy
  fullName: com.azure.security.keyvault.certificates.CertificateClient.getCertificatePolicy
  package: com.azure.security.keyvault.certificates
- uid: com.azure.core.http.rest.Response<com.azure.security.keyvault.certificates.models.CertificatePolicy>
  spec.java:
  - uid: com.azure.core.http.rest.Response
    name: Response
    fullName: com.azure.core.http.rest.Response
  - name: <
    fullName: <
  - uid: com.azure.security.keyvault.certificates.models.CertificatePolicy
    name: CertificatePolicy
    fullName: com.azure.security.keyvault.certificates.models.CertificatePolicy
  - name: '>'
    fullName: '>'
- uid: com.azure.security.keyvault.certificates.CertificateClient.getCertificatePolicyWithResponse*
  name: getCertificatePolicyWithResponse
  nameWithType: CertificateClient.getCertificatePolicyWithResponse
  fullName: com.azure.security.keyvault.certificates.CertificateClient.getCertificatePolicyWithResponse
  package: com.azure.security.keyvault.certificates
- uid: com.azure.security.keyvault.certificates.CertificateClient.updateCertificatePolicy*
  name: updateCertificatePolicy
  nameWithType: CertificateClient.updateCertificatePolicy
  fullName: com.azure.security.keyvault.certificates.CertificateClient.updateCertificatePolicy
  package: com.azure.security.keyvault.certificates
- uid: com.azure.security.keyvault.certificates.CertificateClient.updateCertificatePolicyWithResponse*
  name: updateCertificatePolicyWithResponse
  nameWithType: CertificateClient.updateCertificatePolicyWithResponse
  fullName: com.azure.security.keyvault.certificates.CertificateClient.updateCertificatePolicyWithResponse
  package: com.azure.security.keyvault.certificates
- uid: com.azure.security.keyvault.certificates.models.CertificateIssuer
  name: CertificateIssuer
  nameWithType: CertificateIssuer
  fullName: com.azure.security.keyvault.certificates.models.CertificateIssuer
- uid: com.azure.security.keyvault.certificates.CertificateClient.createIssuer*
  name: createIssuer
  nameWithType: CertificateClient.createIssuer
  fullName: com.azure.security.keyvault.certificates.CertificateClient.createIssuer
  package: com.azure.security.keyvault.certificates
- uid: com.azure.core.http.rest.Response<com.azure.security.keyvault.certificates.models.CertificateIssuer>
  spec.java:
  - uid: com.azure.core.http.rest.Response
    name: Response
    fullName: com.azure.core.http.rest.Response
  - name: <
    fullName: <
  - uid: com.azure.security.keyvault.certificates.models.CertificateIssuer
    name: CertificateIssuer
    fullName: com.azure.security.keyvault.certificates.models.CertificateIssuer
  - name: '>'
    fullName: '>'
- uid: com.azure.security.keyvault.certificates.CertificateClient.createIssuerWithResponse*
  name: createIssuerWithResponse
  nameWithType: CertificateClient.createIssuerWithResponse
  fullName: com.azure.security.keyvault.certificates.CertificateClient.createIssuerWithResponse
  package: com.azure.security.keyvault.certificates
- uid: com.azure.security.keyvault.certificates.CertificateClient.getIssuerWithResponse*
  name: getIssuerWithResponse
  nameWithType: CertificateClient.getIssuerWithResponse
  fullName: com.azure.security.keyvault.certificates.CertificateClient.getIssuerWithResponse
  package: com.azure.security.keyvault.certificates
- uid: com.azure.security.keyvault.certificates.CertificateClient.getIssuer*
  name: getIssuer
  nameWithType: CertificateClient.getIssuer
  fullName: com.azure.security.keyvault.certificates.CertificateClient.getIssuer
  package: com.azure.security.keyvault.certificates
- uid: com.azure.security.keyvault.certificates.CertificateClient.deleteIssuerWithResponse*
  name: deleteIssuerWithResponse
  nameWithType: CertificateClient.deleteIssuerWithResponse
  fullName: com.azure.security.keyvault.certificates.CertificateClient.deleteIssuerWithResponse
  package: com.azure.security.keyvault.certificates
- uid: com.azure.security.keyvault.certificates.CertificateClient.deleteIssuer*
  name: deleteIssuer
  nameWithType: CertificateClient.deleteIssuer
  fullName: com.azure.security.keyvault.certificates.CertificateClient.deleteIssuer
  package: com.azure.security.keyvault.certificates
- uid: com.azure.core.http.rest.PagedIterable<com.azure.security.keyvault.certificates.models.IssuerProperties>
  spec.java:
  - uid: com.azure.core.http.rest.PagedIterable
    name: PagedIterable
    fullName: com.azure.core.http.rest.PagedIterable
  - name: <
    fullName: <
  - uid: com.azure.security.keyvault.certificates.models.IssuerProperties
    name: IssuerProperties
    fullName: com.azure.security.keyvault.certificates.models.IssuerProperties
  - name: '>'
    fullName: '>'
- uid: com.azure.security.keyvault.certificates.CertificateClient.listPropertiesOfIssuers*
  name: listPropertiesOfIssuers
  nameWithType: CertificateClient.listPropertiesOfIssuers
  fullName: com.azure.security.keyvault.certificates.CertificateClient.listPropertiesOfIssuers
  package: com.azure.security.keyvault.certificates
- uid: com.azure.security.keyvault.certificates.CertificateClient.updateIssuer*
  name: updateIssuer
  nameWithType: CertificateClient.updateIssuer
  fullName: com.azure.security.keyvault.certificates.CertificateClient.updateIssuer
  package: com.azure.security.keyvault.certificates
- uid: com.azure.security.keyvault.certificates.CertificateClient.updateIssuerWithResponse*
  name: updateIssuerWithResponse
  nameWithType: CertificateClient.updateIssuerWithResponse
  fullName: com.azure.security.keyvault.certificates.CertificateClient.updateIssuerWithResponse
  package: com.azure.security.keyvault.certificates
- uid: java.util.List<com.azure.security.keyvault.certificates.models.CertificateContact>
  spec.java:
  - uid: java.util.List
    name: List
    fullName: java.util.List
  - name: <
    fullName: <
  - uid: com.azure.security.keyvault.certificates.models.CertificateContact
    name: CertificateContact
    fullName: com.azure.security.keyvault.certificates.models.CertificateContact
  - name: '>'
    fullName: '>'
- uid: com.azure.core.http.rest.PagedIterable<com.azure.security.keyvault.certificates.models.CertificateContact>
  spec.java:
  - uid: com.azure.core.http.rest.PagedIterable
    name: PagedIterable
    fullName: com.azure.core.http.rest.PagedIterable
  - name: <
    fullName: <
  - uid: com.azure.security.keyvault.certificates.models.CertificateContact
    name: CertificateContact
    fullName: com.azure.security.keyvault.certificates.models.CertificateContact
  - name: '>'
    fullName: '>'
- uid: com.azure.security.keyvault.certificates.CertificateClient.setContacts*
  name: setContacts
  nameWithType: CertificateClient.setContacts
  fullName: com.azure.security.keyvault.certificates.CertificateClient.setContacts
  package: com.azure.security.keyvault.certificates
- uid: com.azure.security.keyvault.certificates.CertificateClient.listContacts*
  name: listContacts
  nameWithType: CertificateClient.listContacts
  fullName: com.azure.security.keyvault.certificates.CertificateClient.listContacts
  package: com.azure.security.keyvault.certificates
- uid: com.azure.security.keyvault.certificates.CertificateClient.deleteContacts*
  name: deleteContacts
  nameWithType: CertificateClient.deleteContacts
  fullName: com.azure.security.keyvault.certificates.CertificateClient.deleteContacts
  package: com.azure.security.keyvault.certificates
- uid: com.azure.security.keyvault.certificates.models.CertificateOperation
  name: CertificateOperation
  nameWithType: CertificateOperation
  fullName: com.azure.security.keyvault.certificates.models.CertificateOperation
- uid: com.azure.security.keyvault.certificates.CertificateClient.deleteCertificateOperation*
  name: deleteCertificateOperation
  nameWithType: CertificateClient.deleteCertificateOperation
  fullName: com.azure.security.keyvault.certificates.CertificateClient.deleteCertificateOperation
  package: com.azure.security.keyvault.certificates
- uid: com.azure.core.http.rest.Response<com.azure.security.keyvault.certificates.models.CertificateOperation>
  spec.java:
  - uid: com.azure.core.http.rest.Response
    name: Response
    fullName: com.azure.core.http.rest.Response
  - name: <
    fullName: <
  - uid: com.azure.security.keyvault.certificates.models.CertificateOperation
    name: CertificateOperation
    fullName: com.azure.security.keyvault.certificates.models.CertificateOperation
  - name: '>'
    fullName: '>'
- uid: com.azure.security.keyvault.certificates.CertificateClient.deleteCertificateOperationWithResponse*
  name: deleteCertificateOperationWithResponse
  nameWithType: CertificateClient.deleteCertificateOperationWithResponse
  fullName: com.azure.security.keyvault.certificates.CertificateClient.deleteCertificateOperationWithResponse
  package: com.azure.security.keyvault.certificates
- uid: com.azure.security.keyvault.certificates.CertificateClient.cancelCertificateOperation*
  name: cancelCertificateOperation
  nameWithType: CertificateClient.cancelCertificateOperation
  fullName: com.azure.security.keyvault.certificates.CertificateClient.cancelCertificateOperation
  package: com.azure.security.keyvault.certificates
- uid: com.azure.security.keyvault.certificates.CertificateClient.cancelCertificateOperationWithResponse*
  name: cancelCertificateOperationWithResponse
  nameWithType: CertificateClient.cancelCertificateOperationWithResponse
  fullName: com.azure.security.keyvault.certificates.CertificateClient.cancelCertificateOperationWithResponse
  package: com.azure.security.keyvault.certificates
- uid: com.azure.security.keyvault.certificates.models.MergeCertificateOptions
  name: MergeCertificateOptions
  nameWithType: MergeCertificateOptions
  fullName: com.azure.security.keyvault.certificates.models.MergeCertificateOptions
- uid: com.azure.security.keyvault.certificates.CertificateClient.mergeCertificate*
  name: mergeCertificate
  nameWithType: CertificateClient.mergeCertificate
  fullName: com.azure.security.keyvault.certificates.CertificateClient.mergeCertificate
  package: com.azure.security.keyvault.certificates
- uid: com.azure.security.keyvault.certificates.CertificateClient.mergeCertificateWithResponse*
  name: mergeCertificateWithResponse
  nameWithType: CertificateClient.mergeCertificateWithResponse
  fullName: com.azure.security.keyvault.certificates.CertificateClient.mergeCertificateWithResponse
  package: com.azure.security.keyvault.certificates
- uid: com.azure.security.keyvault.certificates.models.ImportCertificateOptions
  name: ImportCertificateOptions
  nameWithType: ImportCertificateOptions
  fullName: com.azure.security.keyvault.certificates.models.ImportCertificateOptions
- uid: com.azure.security.keyvault.certificates.CertificateClient.importCertificate*
  name: importCertificate
  nameWithType: CertificateClient.importCertificate
  fullName: com.azure.security.keyvault.certificates.CertificateClient.importCertificate
  package: com.azure.security.keyvault.certificates
- uid: com.azure.security.keyvault.certificates.CertificateClient.importCertificateWithResponse*
  name: importCertificateWithResponse
  nameWithType: CertificateClient.importCertificateWithResponse
  fullName: com.azure.security.keyvault.certificates.CertificateClient.importCertificateWithResponse
  package: com.azure.security.keyvault.certificates
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: java.lang.Object.finalize()
  name: Object.finalize()
  nameWithType: Object.finalize()
  fullName: java.lang.Object.finalize()
- uid: java.lang.Object.clone()
  name: Object.clone()
  nameWithType: Object.clone()
  fullName: java.lang.Object.clone()
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: java.lang.Object.equals(java.lang.Object)
  name: Object.equals(Object)
  nameWithType: Object.equals(Object)
  fullName: java.lang.Object.equals(java.lang.Object)
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.lang.Object.hashCode()
  name: Object.hashCode()
  nameWithType: Object.hashCode()
  fullName: java.lang.Object.hashCode()
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: java.lang.Object.toString()
  name: Object.toString()
  nameWithType: Object.toString()
  fullName: java.lang.Object.toString()
- uid: java.util.Map
  name: Map
  nameWithType: Map
  fullName: java.util.Map
- uid: java.lang.String,java.lang.String
  name: String,String
  nameWithType: String,String
  fullName: java.lang.String,java.lang.String
- uid: com.azure.core.util.polling.SyncPoller
  name: SyncPoller
  nameWithType: SyncPoller
  fullName: com.azure.core.util.polling.SyncPoller
- uid: com.azure.security.keyvault.certificates.models.CertificateOperation,com.azure.security.keyvault.certificates.models.KeyVaultCertificateWithPolicy
  name: CertificateOperation,KeyVaultCertificateWithPolicy
  nameWithType: CertificateOperation,KeyVaultCertificateWithPolicy
  fullName: com.azure.security.keyvault.certificates.models.CertificateOperation,com.azure.security.keyvault.certificates.models.KeyVaultCertificateWithPolicy
- uid: com.azure.core.http.rest.Response
  name: Response
  nameWithType: Response
  fullName: com.azure.core.http.rest.Response
- uid: com.azure.security.keyvault.certificates.models.DeletedCertificate,java.lang.Void
  name: DeletedCertificate,Void
  nameWithType: DeletedCertificate,Void
  fullName: com.azure.security.keyvault.certificates.models.DeletedCertificate,java.lang.Void
- uid: java.lang.Void
  name: Void
  nameWithType: Void
  fullName: java.lang.Void
- uid: com.azure.security.keyvault.certificates.models.KeyVaultCertificateWithPolicy,java.lang.Void
  name: KeyVaultCertificateWithPolicy,Void
  nameWithType: KeyVaultCertificateWithPolicy,Void
  fullName: com.azure.security.keyvault.certificates.models.KeyVaultCertificateWithPolicy,java.lang.Void
- uid: com.azure.core.http.rest.PagedIterable
  name: PagedIterable
  nameWithType: PagedIterable
  fullName: com.azure.core.http.rest.PagedIterable
- uid: com.azure.security.keyvault.certificates.models.IssuerProperties
  name: IssuerProperties
  nameWithType: IssuerProperties
  fullName: com.azure.security.keyvault.certificates.models.IssuerProperties
- uid: java.util.List
  name: List
  nameWithType: List
  fullName: java.util.List
- uid: com.azure.security.keyvault.certificates.models.CertificateContact
  name: CertificateContact
  nameWithType: CertificateContact
  fullName: com.azure.security.keyvault.certificates.models.CertificateContact
