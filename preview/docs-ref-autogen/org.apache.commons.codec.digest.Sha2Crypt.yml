### YamlMime:ManagedReference
items:
- uid: org.apache.commons.codec.digest.Sha2Crypt
  id: Sha2Crypt
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.apache.commons.codec.digest
  children:
  - org.apache.commons.codec.digest.Sha2Crypt.Sha2Crypt()
  - org.apache.commons.codec.digest.Sha2Crypt.sha256Crypt(byte[])
  - org.apache.commons.codec.digest.Sha2Crypt.sha256Crypt(byte[],java.lang.String)
  - org.apache.commons.codec.digest.Sha2Crypt.sha256Crypt(byte[],java.lang.String,java.util.Random)
  - org.apache.commons.codec.digest.Sha2Crypt.sha512Crypt(byte[])
  - org.apache.commons.codec.digest.Sha2Crypt.sha512Crypt(byte[],java.lang.String)
  - org.apache.commons.codec.digest.Sha2Crypt.sha512Crypt(byte[],java.lang.String,java.util.Random)
  langs:
  - java
  name: Sha2Crypt
  nameWithType: Sha2Crypt
  fullName: org.apache.commons.codec.digest.Sha2Crypt
  type: Class
  package: org.apache.commons.codec.digest
  summary: >-
    SHA2-based Unix crypt implementation.


    Based on the C implementation released into the Public Domain by Ulrich Drepper <drepper@redhat.com> http://www.akkadia.org/drepper/SHA-crypt.txt


    Conversion to Kotlin and from there to Java in 2012 by Christian Hammers <ch@lathspell.de> and likewise put into the Public Domain.


    This class is immutable and thread-safe.
  syntax:
    content: public class Sha2Crypt
  inheritance:
  - java.lang.Object
  inheritedMembers:
  - java.lang.Object.clone()
  - java.lang.Object.equals(java.lang.Object)
  - java.lang.Object.finalize()
  - java.lang.Object.getClass()
  - java.lang.Object.hashCode()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.toString()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
- uid: org.apache.commons.codec.digest.Sha2Crypt.Sha2Crypt()
  id: Sha2Crypt()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.apache.commons.codec.digest.Sha2Crypt
  langs:
  - java
  name: Sha2Crypt()
  nameWithType: Sha2Crypt.Sha2Crypt()
  fullName: org.apache.commons.codec.digest.Sha2Crypt.Sha2Crypt()
  overload: org.apache.commons.codec.digest.Sha2Crypt.Sha2Crypt*
  type: Constructor
  package: org.apache.commons.codec.digest
  syntax:
    content: public Sha2Crypt()
- uid: org.apache.commons.codec.digest.Sha2Crypt.sha256Crypt(byte[])
  id: sha256Crypt(byte[])
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.apache.commons.codec.digest.Sha2Crypt
  langs:
  - java
  name: sha256Crypt(byte[] keyBytes)
  nameWithType: Sha2Crypt.sha256Crypt(byte[] keyBytes)
  fullName: org.apache.commons.codec.digest.Sha2Crypt.sha256Crypt(byte[] keyBytes)
  overload: org.apache.commons.codec.digest.Sha2Crypt.sha256Crypt*
  type: Method
  package: org.apache.commons.codec.digest
  summary: >-
    Generates a libc crypt() compatible "$5$" hash value with random salt.


    See <xref uid="org.apache.commons.codec.digest.Crypt.crypt(java.lang.String,java.lang.String)" data-throw-if-not-resolved="false">Crypt#crypt(String, String)</xref> for details.


    A salt is generated for you using <xref uid="" data-throw-if-not-resolved="false">ThreadLocalRandom</xref>; for more secure salts consider using <xref uid="" data-throw-if-not-resolved="false">SecureRandom</xref> to generate your own salts and calling <xref uid="org.apache.commons.codec.digest.Sha2Crypt.sha256Crypt(byte[],java.lang.String)" data-throw-if-not-resolved="false">#sha256Crypt(byte[], String)</xref>.
  syntax:
    content: public static String sha256Crypt(byte[] keyBytes)
    parameters:
    - id: keyBytes
      type: byte[]
      description: plaintext to hash
    return:
      type: java.lang.String
      description: complete hash value
- uid: org.apache.commons.codec.digest.Sha2Crypt.sha256Crypt(byte[],java.lang.String)
  id: sha256Crypt(byte[],java.lang.String)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.apache.commons.codec.digest.Sha2Crypt
  langs:
  - java
  name: sha256Crypt(byte[] keyBytes, String salt)
  nameWithType: Sha2Crypt.sha256Crypt(byte[] keyBytes, String salt)
  fullName: org.apache.commons.codec.digest.Sha2Crypt.sha256Crypt(byte[] keyBytes, String salt)
  overload: org.apache.commons.codec.digest.Sha2Crypt.sha256Crypt*
  type: Method
  package: org.apache.commons.codec.digest
  summary: >-
    Generates a libc6 crypt() compatible "$5$" hash value.


    See <xref uid="org.apache.commons.codec.digest.Crypt.crypt(java.lang.String,java.lang.String)" data-throw-if-not-resolved="false">Crypt#crypt(String, String)</xref> for details.
  syntax:
    content: public static String sha256Crypt(byte[] keyBytes, String salt)
    parameters:
    - id: keyBytes
      type: byte[]
      description: plaintext to hash
    - id: salt
      type: java.lang.String
      description: >-
        real salt value without prefix or "rounds=". The salt may be null, in which case a salt
                    is generated for you using <xref uid="" data-throw-if-not-resolved="false">SecureRandom</xref>. If one does not want to use <xref uid="" data-throw-if-not-resolved="false">SecureRandom</xref>,
                    you can pass your own <xref uid="java.util.Random" data-throw-if-not-resolved="false">Random</xref> in <xref uid="org.apache.commons.codec.digest.Sha2Crypt.sha256Crypt(byte[],java.lang.String,java.util.Random)" data-throw-if-not-resolved="false">#sha256Crypt(byte[], String, Random)</xref>.
    return:
      type: java.lang.String
      description: complete hash value including salt
- uid: org.apache.commons.codec.digest.Sha2Crypt.sha256Crypt(byte[],java.lang.String,java.util.Random)
  id: sha256Crypt(byte[],java.lang.String,java.util.Random)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.apache.commons.codec.digest.Sha2Crypt
  langs:
  - java
  name: sha256Crypt(byte[] keyBytes, String salt, Random random)
  nameWithType: Sha2Crypt.sha256Crypt(byte[] keyBytes, String salt, Random random)
  fullName: org.apache.commons.codec.digest.Sha2Crypt.sha256Crypt(byte[] keyBytes, String salt, Random random)
  overload: org.apache.commons.codec.digest.Sha2Crypt.sha256Crypt*
  type: Method
  package: org.apache.commons.codec.digest
  summary: >-
    Generates a libc6 crypt() compatible "$5$" hash value.


    See <xref uid="org.apache.commons.codec.digest.Crypt.crypt(java.lang.String,java.lang.String)" data-throw-if-not-resolved="false">Crypt#crypt(String, String)</xref> for details.
  syntax:
    content: public static String sha256Crypt(byte[] keyBytes, String salt, Random random)
    parameters:
    - id: keyBytes
      type: byte[]
      description: plaintext to hash
    - id: salt
      type: java.lang.String
      description: real salt value without prefix or "rounds=".
    - id: random
      type: java.util.Random
      description: >-
        the instance of <xref uid="java.util.Random" data-throw-if-not-resolved="false">Random</xref> to use for generating the salt. Consider using <xref uid="" data-throw-if-not-resolved="false">SecureRandom</xref>
                    or <xref uid="" data-throw-if-not-resolved="false">ThreadLocalRandom</xref>.
    return:
      type: java.lang.String
      description: complete hash value including salt
- uid: org.apache.commons.codec.digest.Sha2Crypt.sha512Crypt(byte[])
  id: sha512Crypt(byte[])
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.apache.commons.codec.digest.Sha2Crypt
  langs:
  - java
  name: sha512Crypt(byte[] keyBytes)
  nameWithType: Sha2Crypt.sha512Crypt(byte[] keyBytes)
  fullName: org.apache.commons.codec.digest.Sha2Crypt.sha512Crypt(byte[] keyBytes)
  overload: org.apache.commons.codec.digest.Sha2Crypt.sha512Crypt*
  type: Method
  package: org.apache.commons.codec.digest
  summary: >-
    Generates a libc crypt() compatible "$6$" hash value with random salt.


    See <xref uid="org.apache.commons.codec.digest.Crypt.crypt(java.lang.String,java.lang.String)" data-throw-if-not-resolved="false">Crypt#crypt(String, String)</xref> for details.


    A salt is generated for you using <xref uid="" data-throw-if-not-resolved="false">ThreadLocalRandom</xref>; for more secure salts consider using <xref uid="" data-throw-if-not-resolved="false">SecureRandom</xref> to generate your own salts and calling <xref uid="org.apache.commons.codec.digest.Sha2Crypt.sha512Crypt(byte[],java.lang.String)" data-throw-if-not-resolved="false">#sha512Crypt(byte[], String)</xref>.
  syntax:
    content: public static String sha512Crypt(byte[] keyBytes)
    parameters:
    - id: keyBytes
      type: byte[]
      description: plaintext to hash
    return:
      type: java.lang.String
      description: complete hash value
- uid: org.apache.commons.codec.digest.Sha2Crypt.sha512Crypt(byte[],java.lang.String)
  id: sha512Crypt(byte[],java.lang.String)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.apache.commons.codec.digest.Sha2Crypt
  langs:
  - java
  name: sha512Crypt(byte[] keyBytes, String salt)
  nameWithType: Sha2Crypt.sha512Crypt(byte[] keyBytes, String salt)
  fullName: org.apache.commons.codec.digest.Sha2Crypt.sha512Crypt(byte[] keyBytes, String salt)
  overload: org.apache.commons.codec.digest.Sha2Crypt.sha512Crypt*
  type: Method
  package: org.apache.commons.codec.digest
  summary: >-
    Generates a libc6 crypt() compatible "$6$" hash value.


    See <xref uid="org.apache.commons.codec.digest.Crypt.crypt(java.lang.String,java.lang.String)" data-throw-if-not-resolved="false">Crypt#crypt(String, String)</xref> for details.
  syntax:
    content: public static String sha512Crypt(byte[] keyBytes, String salt)
    parameters:
    - id: keyBytes
      type: byte[]
      description: plaintext to hash
    - id: salt
      type: java.lang.String
      description: >-
        real salt value without prefix or "rounds=". The salt may be null, in which case a salt is generated
                    for you using <xref uid="" data-throw-if-not-resolved="false">SecureRandom</xref>; if you want to use a <xref uid="java.util.Random" data-throw-if-not-resolved="false">Random</xref> object other than
                    <xref uid="" data-throw-if-not-resolved="false">SecureRandom</xref> then we suggest you provide it using
                    <xref uid="org.apache.commons.codec.digest.Sha2Crypt.sha512Crypt(byte[],java.lang.String,java.util.Random)" data-throw-if-not-resolved="false">#sha512Crypt(byte[], String, Random)</xref>.
    return:
      type: java.lang.String
      description: complete hash value including salt
- uid: org.apache.commons.codec.digest.Sha2Crypt.sha512Crypt(byte[],java.lang.String,java.util.Random)
  id: sha512Crypt(byte[],java.lang.String,java.util.Random)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.apache.commons.codec.digest.Sha2Crypt
  langs:
  - java
  name: sha512Crypt(byte[] keyBytes, String salt, Random random)
  nameWithType: Sha2Crypt.sha512Crypt(byte[] keyBytes, String salt, Random random)
  fullName: org.apache.commons.codec.digest.Sha2Crypt.sha512Crypt(byte[] keyBytes, String salt, Random random)
  overload: org.apache.commons.codec.digest.Sha2Crypt.sha512Crypt*
  type: Method
  package: org.apache.commons.codec.digest
  summary: >-
    Generates a libc6 crypt() compatible "$6$" hash value.


    See <xref uid="org.apache.commons.codec.digest.Crypt.crypt(java.lang.String,java.lang.String)" data-throw-if-not-resolved="false">Crypt#crypt(String, String)</xref> for details.
  syntax:
    content: public static String sha512Crypt(byte[] keyBytes, String salt, Random random)
    parameters:
    - id: keyBytes
      type: byte[]
      description: plaintext to hash
    - id: salt
      type: java.lang.String
      description: >-
        real salt value without prefix or "rounds=". The salt may be null, in which case a salt
                    is generated for you using <xref uid="" data-throw-if-not-resolved="false">ThreadLocalRandom</xref>; for more secure salts consider using
                    <xref uid="" data-throw-if-not-resolved="false">SecureRandom</xref> to generate your own salts.
    - id: random
      type: java.util.Random
      description: >-
        the instance of <xref uid="java.util.Random" data-throw-if-not-resolved="false">Random</xref> to use for generating the salt. Consider using <xref uid="" data-throw-if-not-resolved="false">SecureRandom</xref>
                    or <xref uid="" data-throw-if-not-resolved="false">ThreadLocalRandom</xref>.
    return:
      type: java.lang.String
      description: complete hash value including salt
references:
- uid: org.apache.commons.codec.digest.Sha2Crypt.Sha2Crypt*
  name: Sha2Crypt
  nameWithType: Sha2Crypt.Sha2Crypt
  fullName: org.apache.commons.codec.digest.Sha2Crypt.Sha2Crypt
  package: org.apache.commons.codec.digest
- uid: byte[]
  spec.java:
  - uid: byte
    name: byte
    fullName: byte
  - name: '[]'
    fullName: '[]'
- uid: java.lang.String
  spec.java:
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
- uid: org.apache.commons.codec.digest.Sha2Crypt.sha256Crypt*
  name: sha256Crypt
  nameWithType: Sha2Crypt.sha256Crypt
  fullName: org.apache.commons.codec.digest.Sha2Crypt.sha256Crypt
  package: org.apache.commons.codec.digest
- uid: java.util.Random
  spec.java:
  - uid: java.util.Random
    name: Random
    fullName: java.util.Random
- uid: org.apache.commons.codec.digest.Sha2Crypt.sha512Crypt*
  name: sha512Crypt
  nameWithType: Sha2Crypt.sha512Crypt
  fullName: org.apache.commons.codec.digest.Sha2Crypt.sha512Crypt
  package: org.apache.commons.codec.digest
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: java.lang.Object.finalize()
  name: Object.finalize()
  nameWithType: Object.finalize()
  fullName: java.lang.Object.finalize()
- uid: java.lang.Object.clone()
  name: Object.clone()
  nameWithType: Object.clone()
  fullName: java.lang.Object.clone()
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: java.lang.Object.equals(java.lang.Object)
  name: Object.equals(Object)
  nameWithType: Object.equals(Object)
  fullName: java.lang.Object.equals(java.lang.Object)
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.lang.Object.hashCode()
  name: Object.hashCode()
  nameWithType: Object.hashCode()
  fullName: java.lang.Object.hashCode()
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: java.lang.Object.toString()
  name: Object.toString()
  nameWithType: Object.toString()
  fullName: java.lang.Object.toString()
