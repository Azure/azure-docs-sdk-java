### YamlMime:JavaType
uid: "com.fasterxml.jackson.annotation.JsonInclude"
fullName: "com.fasterxml.jackson.annotation.JsonInclude"
name: "JsonInclude"
nameWithType: "JsonInclude"
summary: "Annotation used to indicate when value of the annotated property (when used for a field, method or constructor parameter), or all properties of the annotated class, is to be serialized. Without annotation property values are always included, but by using this annotation one can specify simple exclusion rules to reduce amount of properties to write out.\n\nNote that the main inclusion criteria (one annotated with <xref uid=\"com.fasterxml.jackson.annotation.JsonInclude.value*\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#value\"></xref>) is checked on **Java object level**, for the annotated type, and **NOT** on JSON output -- so even with <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Include#NON_NULL\"></xref> it is possible that JSON null values are output, if object reference in question is not \\`null\\`. An example is <xref uid=\"java.util.concurrent.atomic.AtomicReference\" data-throw-if-not-resolved=\"false\" data-raw-source=\"java.util.concurrent.atomic.AtomicReference\"></xref> instance constructed to reference `null` value: such a value would be serialized as JSON null, and not filtered out.\n\nTo base inclusion on value of contained value(s), you will typically also need to specify <xref uid=\"com.fasterxml.jackson.annotation.JsonInclude.content()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#content()\"></xref> annotation; for example, specifying only <xref uid=\"com.fasterxml.jackson.annotation.JsonInclude.value*\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#value\"></xref> as <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Include#NON_EMPTY\"></xref> for a \\{link java.util.Map\\} would exclude `Map`s with no values, but would include `Map`s with \\`null\\` values. To exclude Map with only \\`null\\` value, you would use both annotations like so:\n\n```java\npublic class Bean {\n   @JsonInclude(value=Include.NON_EMPTY, content=Include.NON_NULL)\n   public Map<String,String> entries;\n}\n```\n\nSimilarly you could Maps that only contain \"empty\" elements, or \"non-default\" values (see <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Include#NON_EMPTY\"></xref> and <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Include#NON_DEFAULT\"></xref> for more details).\n\nIn addition to \\`Map\\`s, \\`content\\` concept is also supported for referential types (like <xref uid=\"java.util.concurrent.atomic.AtomicReference\" data-throw-if-not-resolved=\"false\" data-raw-source=\"java.util.concurrent.atomic.AtomicReference\"></xref>). Note that \\`content\\` is NOT currently (as of Jackson 2.9) supported for arrays or <xref uid=\"java.util.Collection\" data-throw-if-not-resolved=\"false\" data-raw-source=\"java.util.Collection\"></xref>s, but supported may be added in future versions."
syntax: "public interface JsonInclude implements Annotation"
methods:
- "com.fasterxml.jackson.annotation.JsonInclude.content()"
- "com.fasterxml.jackson.annotation.JsonInclude.contentFilter()"
- "com.fasterxml.jackson.annotation.JsonInclude.value()"
- "com.fasterxml.jackson.annotation.JsonInclude.valueFilter()"
type: "interface"
implements:
- "<xref href=\"java.lang.annotation.Annotation?alt=java.lang.annotation.Annotation&text=Annotation\" data-throw-if-not-resolved=\"False\" />"
metadata: {}
package: "com.fasterxml.jackson.annotation"
artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
