### YamlMime:JavaType
uid: "com.azure.cosmos.implementation.guava25.collect.AbstractIterator"
fullName: "com.azure.cosmos.implementation.guava25.collect.AbstractIterator<T>"
name: "AbstractIterator<T>"
nameWithType: "AbstractIterator<T>"
summary: "This class provides a skeletal implementation of the `Iterator` interface, to make this interface easier to implement for certain types of data sources.\n\n`Iterator` requires its implementations to support querying the end-of-data status without changing the iterator's state, using the <xref uid=\"com.azure.cosmos.implementation.guava25.collect.AbstractIterator.hasNext\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#hasNext\"></xref> method. But many data sources, such as <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"java.io.Reader#read()\"></xref>, do not expose this information; the only way to discover whether there is any data left is by trying to retrieve it. These types of data sources are ordinarily difficult to write iterators for. But using this class, one must implement only the <xref uid=\"com.azure.cosmos.implementation.guava25.collect.AbstractIterator.computeNext\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#computeNext\"></xref> method, and invoke the <xref uid=\"com.azure.cosmos.implementation.guava25.collect.AbstractIterator.endOfData\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#endOfData\"></xref> method when appropriate.\n\nAnother example is an iterator that skips over null elements in a backing iterator. This could be implemented as:\n\n```java\npublic static Iterator skipNulls(final Iterator in) {\n   return new AbstractIterator() {\n     protected String computeNext() {\n       while (in.hasNext()) {\n         String s = in.next();\n         if (s != null) {\n           return s;\n         }\n       }\n       return endOfData();\n     }\n   };\n }\n```\n\nThis class supports iterators that include null elements."
inheritances:
- "<xref href=\"java.lang.Object\" data-throw-if-not-resolved=\"False\" />"
- "<xref href=\"com.azure.cosmos.implementation.guava25.collect.UnmodifiableIterator\" data-throw-if-not-resolved=\"False\" />"
inheritedMembers:
- "com.azure.cosmos.implementation.guava25.collect.UnmodifiableIterator.remove()"
- "java.lang.Object.clone()"
- "java.lang.Object.equals(java.lang.Object)"
- "java.lang.Object.finalize()"
- "java.lang.Object.getClass()"
- "java.lang.Object.hashCode()"
- "java.lang.Object.notify()"
- "java.lang.Object.notifyAll()"
- "java.lang.Object.toString()"
- "java.lang.Object.wait()"
- "java.lang.Object.wait(long)"
- "java.lang.Object.wait(long,int)"
syntax: "public abstract class AbstractIterator<T> extends UnmodifiableIterator<T>"
constructors:
- "com.azure.cosmos.implementation.guava25.collect.AbstractIterator.AbstractIterator()"
methods:
- "com.azure.cosmos.implementation.guava25.collect.AbstractIterator.computeNext()"
- "com.azure.cosmos.implementation.guava25.collect.AbstractIterator.endOfData()"
- "com.azure.cosmos.implementation.guava25.collect.AbstractIterator.hasNext()"
- "com.azure.cosmos.implementation.guava25.collect.AbstractIterator.next()"
- "com.azure.cosmos.implementation.guava25.collect.AbstractIterator.peek()"
type: "class"
typeParameters:
- name: "T"
metadata: {}
package: "com.azure.cosmos.implementation.guava25.collect"
artifact: com.azure:azure-cosmos:4.4.0-beta.1
