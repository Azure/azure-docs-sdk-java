### YamlMime:JavaMember
uid: "com.azure.ai.metricsadvisor.MetricsAdvisorAsyncClient.listIncidentsForDetectionConfiguration*"
fullName: "com.azure.ai.metricsadvisor.MetricsAdvisorAsyncClient.listIncidentsForDetectionConfiguration"
name: "listIncidentsForDetectionConfiguration"
nameWithType: "MetricsAdvisorAsyncClient.listIncidentsForDetectionConfiguration"
members:
- uid: "com.azure.ai.metricsadvisor.MetricsAdvisorAsyncClient.listIncidentsForDetectionConfiguration(java.lang.String,com.azure.ai.metricsadvisor.models.ListIncidentsDetectedOptions)"
  fullName: "com.azure.ai.metricsadvisor.MetricsAdvisorAsyncClient.listIncidentsForDetectionConfiguration(String detectionConfigurationId, ListIncidentsDetectedOptions options)"
  name: "listIncidentsForDetectionConfiguration(String detectionConfigurationId, ListIncidentsDetectedOptions options)"
  nameWithType: "MetricsAdvisorAsyncClient.listIncidentsForDetectionConfiguration(String detectionConfigurationId, ListIncidentsDetectedOptions options)"
  summary: "Fetch the incidents identified by an anomaly detection configuration.\n\n**Code sample**\n\n```java\nfinal String detectionConfigurationId = \"c0f2539f-b804-4ab9-a70f-0da0c89c76d8\";\n final OffsetDateTime startTime = OffsetDateTime.parse(\"2020-09-09T00:00:00Z\");\n final OffsetDateTime endTime = OffsetDateTime.parse(\"2020-09-09T12:00:00Z\");\n final ListIncidentsDetectedOptions options = new ListIncidentsDetectedOptions(startTime, endTime)\n     .setTop(1000);\n \n PagedFlux<Incident> incidentsFlux\n     = metricAdvisorAsyncClient.listIncidentsForDetectionConfiguration(detectionConfigurationId, options);\n \n incidentsFlux.subscribe(incident -> {\n     System.out.printf(\"Metric Id: %s%n\", incident.getMetricId());\n     System.out.printf(\"Detection Configuration Id: %s%n\", incident.getDetectionConfigurationId());\n     System.out.printf(\"Incident Id: %s%n\", incident.getId());\n     System.out.printf(\"Incident Start Time: %s%n\", incident.getStartTime());\n     System.out.printf(\"Incident Severity: %s%n\", incident.getSeverity());\n     System.out.printf(\"Incident Status: %s%n\", incident.getStatus());\n     System.out.printf(\"Root Dimension Key: %s%n\", incident.getRootDimensionKey().asMap());\n });\n```"
  parameters:
  - description: "The anomaly detection configuration id."
    name: "detectionConfigurationId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The additional parameters."
    name: "options"
    type: "<xref href=\"com.azure.ai.metricsadvisor.models.ListIncidentsDetectedOptions?alt=com.azure.ai.metricsadvisor.models.ListIncidentsDetectedOptions&text=ListIncidentsDetectedOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PagedFlux<Incident> listIncidentsForDetectionConfiguration(String detectionConfigurationId, ListIncidentsDetectedOptions options)"
  returns:
    description: "The incidents."
    type: "<xref href=\"com.azure.core.http.rest.PagedFlux?alt=com.azure.core.http.rest.PagedFlux&text=PagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.ai.metricsadvisor.models.Incident?alt=com.azure.ai.metricsadvisor.models.Incident&text=Incident\" data-throw-if-not-resolved=\"False\" />&gt;"
type: "method"
metadata: {}
package: "com.azure.ai.metricsadvisor"
artifact: com.azure:azure-ai-metricsadvisor:1.0.0-beta.1
