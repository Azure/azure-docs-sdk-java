### YamlMime:JavaMember
uid: "com.azure.ai.textanalytics.TextAnalyticsAsyncClient.beginAnalyzeBatchActions*"
fullName: "com.azure.ai.textanalytics.TextAnalyticsAsyncClient.beginAnalyzeBatchActions"
name: "beginAnalyzeBatchActions"
nameWithType: "TextAnalyticsAsyncClient.beginAnalyzeBatchActions"
members:
- uid: "com.azure.ai.textanalytics.TextAnalyticsAsyncClient.beginAnalyzeBatchActions(java.lang.Iterable<com.azure.ai.textanalytics.models.TextDocumentInput>,com.azure.ai.textanalytics.models.TextAnalyticsActions,com.azure.ai.textanalytics.models.AnalyzeBatchActionsOptions)"
  fullName: "com.azure.ai.textanalytics.TextAnalyticsAsyncClient.beginAnalyzeBatchActions(Iterable<TextDocumentInput> documents, TextAnalyticsActions actions, AnalyzeBatchActionsOptions options)"
  name: "beginAnalyzeBatchActions(Iterable<TextDocumentInput> documents, TextAnalyticsActions actions, AnalyzeBatchActionsOptions options)"
  nameWithType: "TextAnalyticsAsyncClient.beginAnalyzeBatchActions(Iterable<TextDocumentInput> documents, TextAnalyticsActions actions, AnalyzeBatchActionsOptions options)"
  summary: "Execute actions, such as, entities recognition, PII entities recognition and key phrases extraction for a list of <xref uid=\"com.azure.ai.textanalytics.models.TextDocumentInput\" data-throw-if-not-resolved=\"false\" data-raw-source=\"documents\"></xref> with provided request options. See [this][] supported languages in Text Analytics API.\n\n**Code Sample**\n\n```java\nList<TextDocumentInput> documents = Arrays.asList(\n     new TextDocumentInput(\"0\", \"Elon Musk is the CEO of SpaceX and Tesla.\").setLanguage(\"en\"),\n     new TextDocumentInput(\"1\", \"My SSN is 859-98-0987\").setLanguage(\"en\")\n );\n textAnalyticsAsyncClient.beginAnalyzeBatchActions(documents,\n     new TextAnalyticsActions().setDisplayName(\"{tasks_display_name}\")\n         .setRecognizeEntitiesOptions(new RecognizeEntitiesOptions())\n         .setExtractKeyPhrasesOptions(new ExtractKeyPhrasesOptions()),\n     new AnalyzeBatchActionsOptions().setIncludeStatistics(false))\n     .flatMap(AsyncPollResponse::getFinalResult)\n     .subscribe(\n         analyzeBatchActionsResultPagedFlux -> analyzeBatchActionsResultPagedFlux.subscribe(\n             analyzeBatchActionsResult -> {\n                 System.out.println(\"Entities recognition action results:\");\n                 analyzeBatchActionsResult.getRecognizeEntitiesActionResults().forEach(\n                     actionResult -> {\n                         if (!actionResult.isError()) {\n                             actionResult.getResult().forEach(\n                                 entitiesResult -> entitiesResult.getEntities().forEach(\n                                     entity -> System.out.printf(\n                                         \"Recognized entity: %s, entity category: %s, entity subcategory: %s,\"\n                                             + \" confidence score: %f.%n\",\n                                         entity.getText(), entity.getCategory(), entity.getSubcategory(),\n                                         entity.getConfidenceScore())));\n                         }\n                     });\n                 System.out.println(\"Key phrases extraction action results:\");\n                 analyzeBatchActionsResult.getExtractKeyPhrasesActionResults().forEach(\n                     actionResult -> {\n                         if (!actionResult.isError()) {\n                             actionResult.getResult().forEach(extractKeyPhraseResult -> {\n                                 System.out.println(\"Extracted phrases:\");\n                                 extractKeyPhraseResult.getKeyPhrases()\n                                     .forEach(keyPhrases -> System.out.printf(\"\\t%s.%n\", keyPhrases));\n                             });\n                         }\n                     });\n             }));\n```\n\n\n[this]: https://aka.ms/talangs"
  parameters:
  - description: "A list of <xref uid=\"com.azure.ai.textanalytics.models.TextDocumentInput\" data-throw-if-not-resolved=\"false\" data-raw-source=\"documents\"></xref> to be analyzed."
    name: "documents"
    type: "<xref href=\"java.lang.Iterable?alt=java.lang.Iterable&text=Iterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.ai.textanalytics.models.TextDocumentInput?alt=com.azure.ai.textanalytics.models.TextDocumentInput&text=TextDocumentInput\" data-throw-if-not-resolved=\"False\" />&gt;"
  - description: "The <xref uid=\"com.azure.ai.textanalytics.models.TextAnalyticsActions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"actions\"></xref> that contains all actions to be executed.\n An action is one task of execution, such as a single task of 'Key Phrases Extraction' on the given document\n inputs."
    name: "actions"
    type: "<xref href=\"com.azure.ai.textanalytics.models.TextAnalyticsActions?alt=com.azure.ai.textanalytics.models.TextAnalyticsActions&text=TextAnalyticsActions\" data-throw-if-not-resolved=\"False\" />"
  - description: "The additional configurable <xref uid=\"com.azure.ai.textanalytics.models.AnalyzeBatchActionsOptions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"options\"></xref> that may be passed when\n analyzing a collection of tasks."
    name: "options"
    type: "<xref href=\"com.azure.ai.textanalytics.models.AnalyzeBatchActionsOptions?alt=com.azure.ai.textanalytics.models.AnalyzeBatchActionsOptions&text=AnalyzeBatchActionsOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PollerFlux<AnalyzeBatchActionsOperationDetail,PagedFlux<AnalyzeBatchActionsResult>> beginAnalyzeBatchActions(Iterable<TextDocumentInput> documents, TextAnalyticsActions actions, AnalyzeBatchActionsOptions options)"
  returns:
    description: "A <xref uid=\"com.azure.core.util.polling.PollerFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PollerFlux\"></xref> that polls the analyze a collection of tasks operation until it has completed,\n has failed, or has been cancelled. The completed operation returns a <xref uid=\"com.azure.core.http.rest.PagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedFlux\"></xref> of\n <xref uid=\"com.azure.ai.textanalytics.models.AnalyzeBatchActionsResult\" data-throw-if-not-resolved=\"false\" data-raw-source=\"AnalyzeBatchActionsResult\"></xref>."
    type: "<xref href=\"com.azure.core.util.polling.PollerFlux?alt=com.azure.core.util.polling.PollerFlux&text=PollerFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.ai.textanalytics.models.AnalyzeBatchActionsOperationDetail?alt=com.azure.ai.textanalytics.models.AnalyzeBatchActionsOperationDetail&text=AnalyzeBatchActionsOperationDetail\" data-throw-if-not-resolved=\"False\" />,<xref href=\"com.azure.core.http.rest.PagedFlux?alt=com.azure.core.http.rest.PagedFlux&text=PagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.ai.textanalytics.models.AnalyzeBatchActionsResult?alt=com.azure.ai.textanalytics.models.AnalyzeBatchActionsResult&text=AnalyzeBatchActionsResult\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.ai.textanalytics.TextAnalyticsAsyncClient.beginAnalyzeBatchActions(java.lang.Iterable<java.lang.String>,com.azure.ai.textanalytics.models.TextAnalyticsActions,java.lang.String,com.azure.ai.textanalytics.models.AnalyzeBatchActionsOptions)"
  fullName: "com.azure.ai.textanalytics.TextAnalyticsAsyncClient.beginAnalyzeBatchActions(Iterable<String> documents, TextAnalyticsActions actions, String language, AnalyzeBatchActionsOptions options)"
  name: "beginAnalyzeBatchActions(Iterable<String> documents, TextAnalyticsActions actions, String language, AnalyzeBatchActionsOptions options)"
  nameWithType: "TextAnalyticsAsyncClient.beginAnalyzeBatchActions(Iterable<String> documents, TextAnalyticsActions actions, String language, AnalyzeBatchActionsOptions options)"
  summary: "Execute actions, such as, entities recognition, PII entities recognition and key phrases extraction for a list of <xref uid=\"java.lang.String\" data-throw-if-not-resolved=\"false\" data-raw-source=\"documents\"></xref> with provided request options. See [this][] supported languages in Text Analytics API.\n\n**Code Sample**\n\n```java\nList<String> documents = Arrays.asList(\n     \"Elon Musk is the CEO of SpaceX and Tesla.\",\n     \"1\", \"My SSN is 859-98-0987\"\n );\n textAnalyticsAsyncClient.beginAnalyzeBatchActions(documents,\n     new TextAnalyticsActions().setDisplayName(\"{tasks_display_name}\")\n         .setRecognizeEntitiesOptions(new RecognizeEntitiesOptions())\n         .setExtractKeyPhrasesOptions(new ExtractKeyPhrasesOptions()),\n     \"en\",\n     new AnalyzeBatchActionsOptions().setIncludeStatistics(false))\n     .flatMap(AsyncPollResponse::getFinalResult)\n     .subscribe(\n         analyzeBatchActionsResultPagedFlux -> analyzeBatchActionsResultPagedFlux.subscribe(\n             analyzeBatchActionsResult -> {\n                 analyzeBatchActionsResult.getRecognizeEntitiesActionResults().forEach(\n                     actionResult -> {\n                         if (!actionResult.isError()) {\n                             actionResult.getResult().forEach(\n                                 entitiesResult -> entitiesResult.getEntities().forEach(\n                                     entity -> System.out.printf(\n                                         \"Recognized entity: %s, entity category: %s, entity subcategory: %s,\"\n                                             + \" confidence score: %f.%n\",\n                                         entity.getText(), entity.getCategory(), entity.getSubcategory(),\n                                         entity.getConfidenceScore())));\n                         }\n                     });\n                 analyzeBatchActionsResult.getExtractKeyPhrasesActionResults().forEach(\n                     actionResult -> {\n                         if (!actionResult.isError()) {\n                             actionResult.getResult().forEach(extractKeyPhraseResult -> {\n                                 System.out.println(\"Extracted phrases:\");\n                                 extractKeyPhraseResult.getKeyPhrases()\n                                     .forEach(keyPhrases -> System.out.printf(\"\\t%s.%n\", keyPhrases));\n                             });\n                         }\n                     });\n             }));\n```\n\n\n[this]: https://aka.ms/talangs"
  parameters:
  - description: "A list of documents to be analyzed.\n For text length limits, maximum batch size, and supported text encoding, see\n <a href=\"https://docs.microsoft.com/azure/cognitive-services/text-analytics/overview#data-limits\">data limits</a>."
    name: "documents"
    type: "<xref href=\"java.lang.Iterable?alt=java.lang.Iterable&text=Iterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />&gt;"
  - description: "The <xref uid=\"com.azure.ai.textanalytics.models.TextAnalyticsActions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"actions\"></xref> that contains all actions to be executed.\n An action is one task of execution, such as a single task of 'Key Phrases Extraction' on the given document\n inputs."
    name: "actions"
    type: "<xref href=\"com.azure.ai.textanalytics.models.TextAnalyticsActions?alt=com.azure.ai.textanalytics.models.TextAnalyticsActions&text=TextAnalyticsActions\" data-throw-if-not-resolved=\"False\" />"
  - description: "The 2 letter ISO 639-1 representation of language for the documents. If not set, uses \"en\" for\n English as default."
    name: "language"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The additional configurable <xref uid=\"com.azure.ai.textanalytics.models.AnalyzeBatchActionsOptions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"options\"></xref> that may be passed when\n analyzing a collection of actions."
    name: "options"
    type: "<xref href=\"com.azure.ai.textanalytics.models.AnalyzeBatchActionsOptions?alt=com.azure.ai.textanalytics.models.AnalyzeBatchActionsOptions&text=AnalyzeBatchActionsOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PollerFlux<AnalyzeBatchActionsOperationDetail,PagedFlux<AnalyzeBatchActionsResult>> beginAnalyzeBatchActions(Iterable<String> documents, TextAnalyticsActions actions, String language, AnalyzeBatchActionsOptions options)"
  returns:
    description: "A <xref uid=\"com.azure.core.util.polling.PollerFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PollerFlux\"></xref> that polls the analyze a collection of actions operation until it has completed,\n has failed, or has been cancelled. The completed operation returns a <xref uid=\"com.azure.core.http.rest.PagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedFlux\"></xref> of\n <xref uid=\"com.azure.ai.textanalytics.models.AnalyzeBatchActionsResult\" data-throw-if-not-resolved=\"false\" data-raw-source=\"AnalyzeBatchActionsResult\"></xref>."
    type: "<xref href=\"com.azure.core.util.polling.PollerFlux?alt=com.azure.core.util.polling.PollerFlux&text=PollerFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.ai.textanalytics.models.AnalyzeBatchActionsOperationDetail?alt=com.azure.ai.textanalytics.models.AnalyzeBatchActionsOperationDetail&text=AnalyzeBatchActionsOperationDetail\" data-throw-if-not-resolved=\"False\" />,<xref href=\"com.azure.core.http.rest.PagedFlux?alt=com.azure.core.http.rest.PagedFlux&text=PagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.ai.textanalytics.models.AnalyzeBatchActionsResult?alt=com.azure.ai.textanalytics.models.AnalyzeBatchActionsResult&text=AnalyzeBatchActionsResult\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
type: "method"
metadata: {}
package: "com.azure.ai.textanalytics"
artifact: com.azure:azure-ai-textanalytics:5.1.0-beta.6
