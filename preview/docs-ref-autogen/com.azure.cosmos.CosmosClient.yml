### YamlMime:ManagedReference
items:
- uid: com.azure.cosmos.CosmosClient
  id: CosmosClient
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos
  children:
  - com.azure.cosmos.CosmosClient.close()
  - com.azure.cosmos.CosmosClient.createDatabase(com.azure.cosmos.models.CosmosDatabaseProperties)
  - com.azure.cosmos.CosmosClient.createDatabase(com.azure.cosmos.models.CosmosDatabaseProperties,com.azure.cosmos.models.CosmosDatabaseRequestOptions)
  - com.azure.cosmos.CosmosClient.createDatabase(com.azure.cosmos.models.CosmosDatabaseProperties,com.azure.cosmos.models.ThroughputProperties)
  - com.azure.cosmos.CosmosClient.createDatabase(com.azure.cosmos.models.CosmosDatabaseProperties,com.azure.cosmos.models.ThroughputProperties,com.azure.cosmos.models.CosmosDatabaseRequestOptions)
  - com.azure.cosmos.CosmosClient.createDatabase(java.lang.String)
  - com.azure.cosmos.CosmosClient.createDatabase(java.lang.String,com.azure.cosmos.models.ThroughputProperties)
  - com.azure.cosmos.CosmosClient.createDatabaseIfNotExists(java.lang.String)
  - com.azure.cosmos.CosmosClient.createDatabaseIfNotExists(java.lang.String,com.azure.cosmos.models.ThroughputProperties)
  - com.azure.cosmos.CosmosClient.getDatabase(java.lang.String)
  - com.azure.cosmos.CosmosClient.queryDatabases(com.azure.cosmos.models.SqlQuerySpec,com.azure.cosmos.models.CosmosQueryRequestOptions)
  - com.azure.cosmos.CosmosClient.queryDatabases(java.lang.String,com.azure.cosmos.models.CosmosQueryRequestOptions)
  - com.azure.cosmos.CosmosClient.readAllDatabases()
  langs:
  - java
  name: CosmosClient
  nameWithType: CosmosClient
  fullName: com.azure.cosmos.CosmosClient
  type: Class
  package: com.azure.cosmos
  summary: Provides a client-side logical representation of the Azure Cosmos DB service. Calls to CosmosClient API's are blocked for completion.
  syntax:
    content: public final class CosmosClient implements Closeable
  inheritance:
  - java.lang.Object
  implements:
  - java.io.Closeable
  inheritedMembers:
  - java.lang.Object.clone()
  - java.lang.Object.equals(java.lang.Object)
  - java.lang.Object.finalize()
  - java.lang.Object.getClass()
  - java.lang.Object.hashCode()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.toString()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
- uid: com.azure.cosmos.CosmosClient.CosmosClient(com.azure.cosmos.CosmosClientBuilder)
  id: CosmosClient(com.azure.cosmos.CosmosClientBuilder)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.CosmosClient
  langs:
  - java
  name: CosmosClient(CosmosClientBuilder builder)
  nameWithType: CosmosClient.CosmosClient(CosmosClientBuilder builder)
  fullName: com.azure.cosmos.CosmosClient.CosmosClient(CosmosClientBuilder builder)
  overload: com.azure.cosmos.CosmosClient.CosmosClient*
  type: Constructor
  package: com.azure.cosmos
  syntax:
    content: " CosmosClient(CosmosClientBuilder builder)"
    parameters:
    - id: builder
      type: com.azure.cosmos.CosmosClientBuilder
- uid: com.azure.cosmos.CosmosClient.close()
  id: close()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.CosmosClient
  langs:
  - java
  name: close()
  nameWithType: CosmosClient.close()
  fullName: com.azure.cosmos.CosmosClient.close()
  overload: com.azure.cosmos.CosmosClient.close*
  type: Method
  package: com.azure.cosmos
  summary: Close this <xref uid="com.azure.cosmos.CosmosClient" data-throw-if-not-resolved="false">CosmosClient</xref> instance.
  syntax:
    content: public void close()
- uid: com.azure.cosmos.CosmosClient.createDatabase(com.azure.cosmos.models.CosmosDatabaseProperties)
  id: createDatabase(com.azure.cosmos.models.CosmosDatabaseProperties)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.CosmosClient
  langs:
  - java
  name: createDatabase(CosmosDatabaseProperties databaseProperties)
  nameWithType: CosmosClient.createDatabase(CosmosDatabaseProperties databaseProperties)
  fullName: com.azure.cosmos.CosmosClient.createDatabase(CosmosDatabaseProperties databaseProperties)
  overload: com.azure.cosmos.CosmosClient.createDatabase*
  type: Method
  package: com.azure.cosmos
  summary: Creates a Cosmos database.
  syntax:
    content: public CosmosDatabaseResponse createDatabase(CosmosDatabaseProperties databaseProperties)
    parameters:
    - id: databaseProperties
      type: com.azure.cosmos.models.CosmosDatabaseProperties
      description: <xref uid="com.azure.cosmos.models.CosmosDatabaseProperties" data-throw-if-not-resolved="false">CosmosDatabaseProperties</xref> the database properties.
    return:
      type: com.azure.cosmos.models.CosmosDatabaseResponse
      description: the <xref uid="com.azure.cosmos.models.CosmosDatabaseResponse" data-throw-if-not-resolved="false">CosmosDatabaseResponse</xref> with the created database.
- uid: com.azure.cosmos.CosmosClient.createDatabase(com.azure.cosmos.models.CosmosDatabaseProperties,com.azure.cosmos.models.CosmosDatabaseRequestOptions)
  id: createDatabase(com.azure.cosmos.models.CosmosDatabaseProperties,com.azure.cosmos.models.CosmosDatabaseRequestOptions)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.CosmosClient
  langs:
  - java
  name: createDatabase(CosmosDatabaseProperties databaseProperties, CosmosDatabaseRequestOptions options)
  nameWithType: CosmosClient.createDatabase(CosmosDatabaseProperties databaseProperties, CosmosDatabaseRequestOptions options)
  fullName: com.azure.cosmos.CosmosClient.createDatabase(CosmosDatabaseProperties databaseProperties, CosmosDatabaseRequestOptions options)
  overload: com.azure.cosmos.CosmosClient.createDatabase*
  type: Method
  package: com.azure.cosmos
  summary: Creates a database.
  syntax:
    content: public CosmosDatabaseResponse createDatabase(CosmosDatabaseProperties databaseProperties, CosmosDatabaseRequestOptions options)
    parameters:
    - id: databaseProperties
      type: com.azure.cosmos.models.CosmosDatabaseProperties
      description: <xref uid="com.azure.cosmos.models.CosmosDatabaseProperties" data-throw-if-not-resolved="false">CosmosDatabaseProperties</xref> the database properties.
    - id: options
      type: com.azure.cosmos.models.CosmosDatabaseRequestOptions
      description: the request options.
    return:
      type: com.azure.cosmos.models.CosmosDatabaseResponse
      description: the <xref uid="com.azure.cosmos.models.CosmosDatabaseResponse" data-throw-if-not-resolved="false">CosmosDatabaseResponse</xref> with the created database.
- uid: com.azure.cosmos.CosmosClient.createDatabase(com.azure.cosmos.models.CosmosDatabaseProperties,com.azure.cosmos.models.ThroughputProperties)
  id: createDatabase(com.azure.cosmos.models.CosmosDatabaseProperties,com.azure.cosmos.models.ThroughputProperties)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.CosmosClient
  langs:
  - java
  name: createDatabase(CosmosDatabaseProperties databaseProperties, ThroughputProperties throughputProperties)
  nameWithType: CosmosClient.createDatabase(CosmosDatabaseProperties databaseProperties, ThroughputProperties throughputProperties)
  fullName: com.azure.cosmos.CosmosClient.createDatabase(CosmosDatabaseProperties databaseProperties, ThroughputProperties throughputProperties)
  overload: com.azure.cosmos.CosmosClient.createDatabase*
  type: Method
  package: com.azure.cosmos
  summary: Creates a Cosmos database.
  syntax:
    content: public CosmosDatabaseResponse createDatabase(CosmosDatabaseProperties databaseProperties, ThroughputProperties throughputProperties)
    parameters:
    - id: databaseProperties
      type: com.azure.cosmos.models.CosmosDatabaseProperties
      description: <xref uid="com.azure.cosmos.models.CosmosDatabaseProperties" data-throw-if-not-resolved="false">CosmosDatabaseProperties</xref> the database properties.
    - id: throughputProperties
      type: com.azure.cosmos.models.ThroughputProperties
      description: the throughput properties.
    return:
      type: com.azure.cosmos.models.CosmosDatabaseResponse
      description: the <xref uid="com.azure.cosmos.models.CosmosDatabaseResponse" data-throw-if-not-resolved="false">CosmosDatabaseResponse</xref> with the created database.
- uid: com.azure.cosmos.CosmosClient.createDatabase(com.azure.cosmos.models.CosmosDatabaseProperties,com.azure.cosmos.models.ThroughputProperties,com.azure.cosmos.models.CosmosDatabaseRequestOptions)
  id: createDatabase(com.azure.cosmos.models.CosmosDatabaseProperties,com.azure.cosmos.models.ThroughputProperties,com.azure.cosmos.models.CosmosDatabaseRequestOptions)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.CosmosClient
  langs:
  - java
  name: createDatabase(CosmosDatabaseProperties databaseProperties, ThroughputProperties throughputProperties, CosmosDatabaseRequestOptions options)
  nameWithType: CosmosClient.createDatabase(CosmosDatabaseProperties databaseProperties, ThroughputProperties throughputProperties, CosmosDatabaseRequestOptions options)
  fullName: com.azure.cosmos.CosmosClient.createDatabase(CosmosDatabaseProperties databaseProperties, ThroughputProperties throughputProperties, CosmosDatabaseRequestOptions options)
  overload: com.azure.cosmos.CosmosClient.createDatabase*
  type: Method
  package: com.azure.cosmos
  summary: Creates a Cosmos database.
  syntax:
    content: public CosmosDatabaseResponse createDatabase(CosmosDatabaseProperties databaseProperties, ThroughputProperties throughputProperties, CosmosDatabaseRequestOptions options)
    parameters:
    - id: databaseProperties
      type: com.azure.cosmos.models.CosmosDatabaseProperties
      description: <xref uid="com.azure.cosmos.models.CosmosDatabaseProperties" data-throw-if-not-resolved="false">CosmosDatabaseProperties</xref> the database properties.
    - id: throughputProperties
      type: com.azure.cosmos.models.ThroughputProperties
      description: the throughput properties.
    - id: options
      type: com.azure.cosmos.models.CosmosDatabaseRequestOptions
      description: <xref uid="com.azure.cosmos.models.CosmosDatabaseRequestOptions" data-throw-if-not-resolved="false">CosmosDatabaseRequestOptions</xref> the request options.
    return:
      type: com.azure.cosmos.models.CosmosDatabaseResponse
      description: the <xref uid="com.azure.cosmos.models.CosmosDatabaseResponse" data-throw-if-not-resolved="false">CosmosDatabaseResponse</xref> with the created database.
- uid: com.azure.cosmos.CosmosClient.createDatabase(java.lang.String)
  id: createDatabase(java.lang.String)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.CosmosClient
  langs:
  - java
  name: createDatabase(String id)
  nameWithType: CosmosClient.createDatabase(String id)
  fullName: com.azure.cosmos.CosmosClient.createDatabase(String id)
  overload: com.azure.cosmos.CosmosClient.createDatabase*
  type: Method
  package: com.azure.cosmos
  summary: Creates a Cosmos database.
  syntax:
    content: public CosmosDatabaseResponse createDatabase(String id)
    parameters:
    - id: id
      type: java.lang.String
      description: the id of the database.
    return:
      type: com.azure.cosmos.models.CosmosDatabaseResponse
      description: the <xref uid="com.azure.cosmos.models.CosmosDatabaseResponse" data-throw-if-not-resolved="false">CosmosDatabaseResponse</xref> with the created database.
- uid: com.azure.cosmos.CosmosClient.createDatabase(java.lang.String,com.azure.cosmos.models.ThroughputProperties)
  id: createDatabase(java.lang.String,com.azure.cosmos.models.ThroughputProperties)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.CosmosClient
  langs:
  - java
  name: createDatabase(String id, ThroughputProperties throughputProperties)
  nameWithType: CosmosClient.createDatabase(String id, ThroughputProperties throughputProperties)
  fullName: com.azure.cosmos.CosmosClient.createDatabase(String id, ThroughputProperties throughputProperties)
  overload: com.azure.cosmos.CosmosClient.createDatabase*
  type: Method
  package: com.azure.cosmos
  summary: Creates a Cosmos database.
  syntax:
    content: public CosmosDatabaseResponse createDatabase(String id, ThroughputProperties throughputProperties)
    parameters:
    - id: id
      type: java.lang.String
      description: the id of the database.
    - id: throughputProperties
      type: com.azure.cosmos.models.ThroughputProperties
      description: the throughput properties.
    return:
      type: com.azure.cosmos.models.CosmosDatabaseResponse
      description: the <xref uid="com.azure.cosmos.models.CosmosDatabaseResponse" data-throw-if-not-resolved="false">CosmosDatabaseResponse</xref> with the created database.
- uid: com.azure.cosmos.CosmosClient.createDatabaseIfNotExists(java.lang.String)
  id: createDatabaseIfNotExists(java.lang.String)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.CosmosClient
  langs:
  - java
  name: createDatabaseIfNotExists(String id)
  nameWithType: CosmosClient.createDatabaseIfNotExists(String id)
  fullName: com.azure.cosmos.CosmosClient.createDatabaseIfNotExists(String id)
  overload: com.azure.cosmos.CosmosClient.createDatabaseIfNotExists*
  type: Method
  package: com.azure.cosmos
  summary: Create a Cosmos database if it does not already exist on the service.
  syntax:
    content: public CosmosDatabaseResponse createDatabaseIfNotExists(String id)
    parameters:
    - id: id
      type: java.lang.String
      description: the id of the database.
    return:
      type: com.azure.cosmos.models.CosmosDatabaseResponse
      description: the <xref uid="com.azure.cosmos.models.CosmosDatabaseResponse" data-throw-if-not-resolved="false">CosmosDatabaseResponse</xref> with the created database.
- uid: com.azure.cosmos.CosmosClient.createDatabaseIfNotExists(java.lang.String,com.azure.cosmos.models.ThroughputProperties)
  id: createDatabaseIfNotExists(java.lang.String,com.azure.cosmos.models.ThroughputProperties)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.CosmosClient
  langs:
  - java
  name: createDatabaseIfNotExists(String id, ThroughputProperties throughputProperties)
  nameWithType: CosmosClient.createDatabaseIfNotExists(String id, ThroughputProperties throughputProperties)
  fullName: com.azure.cosmos.CosmosClient.createDatabaseIfNotExists(String id, ThroughputProperties throughputProperties)
  overload: com.azure.cosmos.CosmosClient.createDatabaseIfNotExists*
  type: Method
  package: com.azure.cosmos
  summary: >-
    Create a Cosmos database if it does not already exist on the service.


    The throughputProperties will only be used if the specified database does not exist and therefor a new database will be created with throughputProperties.
  syntax:
    content: public CosmosDatabaseResponse createDatabaseIfNotExists(String id, ThroughputProperties throughputProperties)
    parameters:
    - id: id
      type: java.lang.String
      description: the id of the database.
    - id: throughputProperties
      type: com.azure.cosmos.models.ThroughputProperties
      description: the throughputProperties.
    return:
      type: com.azure.cosmos.models.CosmosDatabaseResponse
      description: the <xref uid="com.azure.cosmos.models.CosmosDatabaseResponse" data-throw-if-not-resolved="false">CosmosDatabaseResponse</xref> with the created database.
- uid: com.azure.cosmos.CosmosClient.getDatabase(java.lang.String)
  id: getDatabase(java.lang.String)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.CosmosClient
  langs:
  - java
  name: getDatabase(String id)
  nameWithType: CosmosClient.getDatabase(String id)
  fullName: com.azure.cosmos.CosmosClient.getDatabase(String id)
  overload: com.azure.cosmos.CosmosClient.getDatabase*
  type: Method
  package: com.azure.cosmos
  summary: Gets the Cosmos database client.
  syntax:
    content: public CosmosDatabase getDatabase(String id)
    parameters:
    - id: id
      type: java.lang.String
      description: the id of the database.
    return:
      type: com.azure.cosmos.CosmosDatabase
      description: <xref uid="com.azure.cosmos.CosmosDatabase" data-throw-if-not-resolved="false">CosmosDatabase</xref> the cosmos sync database.
- uid: com.azure.cosmos.CosmosClient.queryDatabases(com.azure.cosmos.models.SqlQuerySpec,com.azure.cosmos.models.CosmosQueryRequestOptions)
  id: queryDatabases(com.azure.cosmos.models.SqlQuerySpec,com.azure.cosmos.models.CosmosQueryRequestOptions)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.CosmosClient
  langs:
  - java
  name: queryDatabases(SqlQuerySpec querySpec, CosmosQueryRequestOptions options)
  nameWithType: CosmosClient.queryDatabases(SqlQuerySpec querySpec, CosmosQueryRequestOptions options)
  fullName: com.azure.cosmos.CosmosClient.queryDatabases(SqlQuerySpec querySpec, CosmosQueryRequestOptions options)
  overload: com.azure.cosmos.CosmosClient.queryDatabases*
  type: Method
  package: com.azure.cosmos
  summary: Query a Cosmos database.
  syntax:
    content: public CosmosPagedIterable<CosmosDatabaseProperties> queryDatabases(SqlQuerySpec querySpec, CosmosQueryRequestOptions options)
    parameters:
    - id: querySpec
      type: com.azure.cosmos.models.SqlQuerySpec
      description: <xref uid="com.azure.cosmos.models.SqlQuerySpec" data-throw-if-not-resolved="false">SqlQuerySpec</xref> the query spec.
    - id: options
      type: com.azure.cosmos.models.CosmosQueryRequestOptions
      description: the query request options.
    return:
      type: com.azure.cosmos.util.CosmosPagedIterable<com.azure.cosmos.models.CosmosDatabaseProperties>
      description: the <xref uid="com.azure.cosmos.util.CosmosPagedIterable" data-throw-if-not-resolved="false">CosmosPagedIterable</xref> for feed response with the obtained databases.
- uid: com.azure.cosmos.CosmosClient.queryDatabases(java.lang.String,com.azure.cosmos.models.CosmosQueryRequestOptions)
  id: queryDatabases(java.lang.String,com.azure.cosmos.models.CosmosQueryRequestOptions)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.CosmosClient
  langs:
  - java
  name: queryDatabases(String query, CosmosQueryRequestOptions options)
  nameWithType: CosmosClient.queryDatabases(String query, CosmosQueryRequestOptions options)
  fullName: com.azure.cosmos.CosmosClient.queryDatabases(String query, CosmosQueryRequestOptions options)
  overload: com.azure.cosmos.CosmosClient.queryDatabases*
  type: Method
  package: com.azure.cosmos
  summary: Query a Cosmos database.
  syntax:
    content: public CosmosPagedIterable<CosmosDatabaseProperties> queryDatabases(String query, CosmosQueryRequestOptions options)
    parameters:
    - id: query
      type: java.lang.String
      description: the query.
    - id: options
      type: com.azure.cosmos.models.CosmosQueryRequestOptions
      description: <xref uid="com.azure.cosmos.models.CosmosQueryRequestOptions" data-throw-if-not-resolved="false">CosmosQueryRequestOptions</xref>the feed options.
    return:
      type: com.azure.cosmos.util.CosmosPagedIterable<com.azure.cosmos.models.CosmosDatabaseProperties>
      description: the <xref uid="com.azure.cosmos.util.CosmosPagedIterable" data-throw-if-not-resolved="false">CosmosPagedIterable</xref> for feed response with the obtained databases.
- uid: com.azure.cosmos.CosmosClient.readAllDatabases()
  id: readAllDatabases()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.CosmosClient
  langs:
  - java
  name: readAllDatabases()
  nameWithType: CosmosClient.readAllDatabases()
  fullName: com.azure.cosmos.CosmosClient.readAllDatabases()
  overload: com.azure.cosmos.CosmosClient.readAllDatabases*
  type: Method
  package: com.azure.cosmos
  summary: Reads all Cosmos databases.
  syntax:
    content: public CosmosPagedIterable<CosmosDatabaseProperties> readAllDatabases()
    return:
      type: com.azure.cosmos.util.CosmosPagedIterable<com.azure.cosmos.models.CosmosDatabaseProperties>
      description: the <xref uid="com.azure.cosmos.util.CosmosPagedIterable" data-throw-if-not-resolved="false">CosmosPagedIterable</xref> for feed response with the read databases.
references:
- uid: com.azure.cosmos.CosmosClientBuilder
  name: CosmosClientBuilder
  nameWithType: CosmosClientBuilder
  fullName: com.azure.cosmos.CosmosClientBuilder
- uid: com.azure.cosmos.CosmosClient.CosmosClient*
  name: CosmosClient
  nameWithType: CosmosClient.CosmosClient
  fullName: com.azure.cosmos.CosmosClient.CosmosClient
  package: com.azure.cosmos
- uid: java.lang.String
  spec.java:
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
- uid: com.azure.cosmos.models.ThroughputProperties
  name: ThroughputProperties
  nameWithType: ThroughputProperties
  fullName: com.azure.cosmos.models.ThroughputProperties
- uid: com.azure.cosmos.models.CosmosDatabaseResponse
  name: CosmosDatabaseResponse
  nameWithType: CosmosDatabaseResponse
  fullName: com.azure.cosmos.models.CosmosDatabaseResponse
- uid: com.azure.cosmos.CosmosClient.createDatabaseIfNotExists*
  name: createDatabaseIfNotExists
  nameWithType: CosmosClient.createDatabaseIfNotExists
  fullName: com.azure.cosmos.CosmosClient.createDatabaseIfNotExists
  package: com.azure.cosmos
- uid: com.azure.cosmos.models.CosmosDatabaseProperties
  name: CosmosDatabaseProperties
  nameWithType: CosmosDatabaseProperties
  fullName: com.azure.cosmos.models.CosmosDatabaseProperties
- uid: com.azure.cosmos.models.CosmosDatabaseRequestOptions
  name: CosmosDatabaseRequestOptions
  nameWithType: CosmosDatabaseRequestOptions
  fullName: com.azure.cosmos.models.CosmosDatabaseRequestOptions
- uid: com.azure.cosmos.CosmosClient.createDatabase*
  name: createDatabase
  nameWithType: CosmosClient.createDatabase
  fullName: com.azure.cosmos.CosmosClient.createDatabase
  package: com.azure.cosmos
- uid: com.azure.cosmos.util.CosmosPagedIterable<com.azure.cosmos.models.CosmosDatabaseProperties>
  spec.java:
  - uid: com.azure.cosmos.util.CosmosPagedIterable
    name: CosmosPagedIterable
    fullName: com.azure.cosmos.util.CosmosPagedIterable
  - name: <
    fullName: <
  - uid: com.azure.cosmos.models.CosmosDatabaseProperties
    name: CosmosDatabaseProperties
    fullName: com.azure.cosmos.models.CosmosDatabaseProperties
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.CosmosClient.readAllDatabases*
  name: readAllDatabases
  nameWithType: CosmosClient.readAllDatabases
  fullName: com.azure.cosmos.CosmosClient.readAllDatabases
  package: com.azure.cosmos
- uid: com.azure.cosmos.models.CosmosQueryRequestOptions
  name: CosmosQueryRequestOptions
  nameWithType: CosmosQueryRequestOptions
  fullName: com.azure.cosmos.models.CosmosQueryRequestOptions
- uid: com.azure.cosmos.CosmosClient.queryDatabases*
  name: queryDatabases
  nameWithType: CosmosClient.queryDatabases
  fullName: com.azure.cosmos.CosmosClient.queryDatabases
  package: com.azure.cosmos
- uid: com.azure.cosmos.models.SqlQuerySpec
  name: SqlQuerySpec
  nameWithType: SqlQuerySpec
  fullName: com.azure.cosmos.models.SqlQuerySpec
- uid: com.azure.cosmos.CosmosDatabase
  name: CosmosDatabase
  nameWithType: CosmosDatabase
  fullName: com.azure.cosmos.CosmosDatabase
- uid: com.azure.cosmos.CosmosClient.getDatabase*
  name: getDatabase
  nameWithType: CosmosClient.getDatabase
  fullName: com.azure.cosmos.CosmosClient.getDatabase
  package: com.azure.cosmos
- uid: com.azure.cosmos.CosmosClient.close*
  name: close
  nameWithType: CosmosClient.close
  fullName: com.azure.cosmos.CosmosClient.close
  package: com.azure.cosmos
- uid: java.io.Closeable
  name: Closeable
  nameWithType: Closeable
  fullName: java.io.Closeable
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: java.lang.Object.finalize()
  name: Object.finalize()
  nameWithType: Object.finalize()
  fullName: java.lang.Object.finalize()
- uid: java.lang.Object.clone()
  name: Object.clone()
  nameWithType: Object.clone()
  fullName: java.lang.Object.clone()
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: java.lang.Object.equals(java.lang.Object)
  name: Object.equals(Object)
  nameWithType: Object.equals(Object)
  fullName: java.lang.Object.equals(java.lang.Object)
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.lang.Object.hashCode()
  name: Object.hashCode()
  nameWithType: Object.hashCode()
  fullName: java.lang.Object.hashCode()
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: java.lang.Object.toString()
  name: Object.toString()
  nameWithType: Object.toString()
  fullName: java.lang.Object.toString()
- uid: com.azure.cosmos.util.CosmosPagedIterable
  name: CosmosPagedIterable
  nameWithType: CosmosPagedIterable
  fullName: com.azure.cosmos.util.CosmosPagedIterable
