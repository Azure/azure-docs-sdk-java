### YamlMime:JavaType
uid: "com.microsoft.azure.sdk.iot.device.auth.IotHubX509SoftwareAuthenticationProvider"
fullName: "com.microsoft.azure.sdk.iot.device.auth.IotHubX509SoftwareAuthenticationProvider"
name: "IotHubX509SoftwareAuthenticationProvider"
nameWithType: "IotHubX509SoftwareAuthenticationProvider"
inheritances:
- "<xref href=\"java.lang.Object?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
- "<xref href=\"com.microsoft.azure.sdk.iot.device.auth.IotHubAuthenticationProvider?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
inheritedMembers:
- "com.microsoft.azure.sdk.iot.device.auth.IotHubAuthenticationProvider.getDeviceId()"
- "com.microsoft.azure.sdk.iot.device.auth.IotHubAuthenticationProvider.getGatewayHostname()"
- "com.microsoft.azure.sdk.iot.device.auth.IotHubAuthenticationProvider.getHostname()"
- "com.microsoft.azure.sdk.iot.device.auth.IotHubAuthenticationProvider.getIotHubTrustedCert()"
- "com.microsoft.azure.sdk.iot.device.auth.IotHubAuthenticationProvider.getModuleId()"
- "com.microsoft.azure.sdk.iot.device.auth.IotHubAuthenticationProvider.getPathToIotHubTrustedCert()"
- "com.microsoft.azure.sdk.iot.device.auth.IotHubAuthenticationProvider.getSSLContext()"
- "com.microsoft.azure.sdk.iot.device.auth.IotHubAuthenticationProvider.setIotHubTrustedCert(java.lang.String)"
- "com.microsoft.azure.sdk.iot.device.auth.IotHubAuthenticationProvider.setPathToIotHubTrustedCert(java.lang.String)"
- "java.lang.Object.clone()"
- "java.lang.Object.equals(java.lang.Object)"
- "java.lang.Object.finalize()"
- "java.lang.Object.getClass()"
- "java.lang.Object.hashCode()"
- "java.lang.Object.notify()"
- "java.lang.Object.notifyAll()"
- "java.lang.Object.toString()"
- "java.lang.Object.wait()"
- "java.lang.Object.wait(long)"
- "java.lang.Object.wait(long,int)"
syntax: "public class IotHubX509SoftwareAuthenticationProvider extends IotHubAuthenticationProvider"
constructors:
- uid: "com.microsoft.azure.sdk.iot.device.auth.IotHubX509SoftwareAuthenticationProvider.IotHubX509SoftwareAuthenticationProvider(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean,java.lang.String,boolean)"
  fullName: "com.microsoft.azure.sdk.iot.device.auth.IotHubX509SoftwareAuthenticationProvider.IotHubX509SoftwareAuthenticationProvider(String hostname, String gatewayHostname, String deviceId, String moduleId, String publicKeyCertificate, boolean isCertificatePath, String privateKey, boolean isPrivateKeyPath)"
  name: "IotHubX509SoftwareAuthenticationProvider(String hostname, String gatewayHostname, String deviceId, String moduleId, String publicKeyCertificate, boolean isCertificatePath, String privateKey, boolean isPrivateKeyPath)"
  nameWithType: "IotHubX509SoftwareAuthenticationProvider.IotHubX509SoftwareAuthenticationProvider(String hostname, String gatewayHostname, String deviceId, String moduleId, String publicKeyCertificate, boolean isCertificatePath, String privateKey, boolean isPrivateKeyPath)"
  summary: "Constructor that takes in a connection string and certificate/private key pair needed to use x509 authentication"
  parameters:
  - description: "the IotHub host name"
    name: "hostname"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The gateway hostname to use, or null if connecting to an IotHub"
    name: "gatewayHostname"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The device to be authenticated."
    name: "deviceId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The module to be authenticated. May be null if this authentication is not for a module"
    name: "moduleId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The PEM encoded string for the public key certificate or the path to a file containing it"
    name: "publicKeyCertificate"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "If the provided publicKeyCertificate is a path to the PEM encoded public key certificate file"
    name: "isCertificatePath"
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
  - description: "The PEM encoded string for the private key or the path to a file containing it."
    name: "privateKey"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "If the provided privateKey is a path to the PEM encoded private key file"
    name: "isPrivateKeyPath"
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public IotHubX509SoftwareAuthenticationProvider(String hostname, String gatewayHostname, String deviceId, String moduleId, String publicKeyCertificate, boolean isCertificatePath, String privateKey, boolean isPrivateKeyPath)"
  exceptions:
  - description: "if the public key certificate or private key is null or empty"
    type: "<xref href=\"java.lang.IllegalArgumentException?alt=java.lang.IllegalArgumentException&text=IllegalArgumentException\" data-throw-if-not-resolved=\"False\" />"
  desc: "Constructor that takes in a connection string and certificate/private key pair needed to use x509 authentication"
- uid: "com.microsoft.azure.sdk.iot.device.auth.IotHubX509SoftwareAuthenticationProvider.IotHubX509SoftwareAuthenticationProvider(java.lang.String,java.lang.String,java.lang.String,java.lang.String,javax.net.ssl.SSLContext)"
  fullName: "com.microsoft.azure.sdk.iot.device.auth.IotHubX509SoftwareAuthenticationProvider.IotHubX509SoftwareAuthenticationProvider(String hostname, String gatewayHostname, String deviceId, String moduleId, SSLContext sslContext)"
  name: "IotHubX509SoftwareAuthenticationProvider(String hostname, String gatewayHostname, String deviceId, String moduleId, SSLContext sslContext)"
  nameWithType: "IotHubX509SoftwareAuthenticationProvider.IotHubX509SoftwareAuthenticationProvider(String hostname, String gatewayHostname, String deviceId, String moduleId, SSLContext sslContext)"
  parameters:
  - name: "hostname"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - name: "gatewayHostname"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - name: "deviceId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - name: "moduleId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - name: "sslContext"
    type: "<xref href=\"javax.net.ssl.SSLContext?alt=javax.net.ssl.SSLContext&text=SSLContext\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public IotHubX509SoftwareAuthenticationProvider(String hostname, String gatewayHostname, String deviceId, String moduleId, SSLContext sslContext)"
  exceptions:
  - type: "<xref href=\"java.lang.IllegalArgumentException?alt=java.lang.IllegalArgumentException&text=IllegalArgumentException\" data-throw-if-not-resolved=\"False\" />"
fields:
- uid: "com.microsoft.azure.sdk.iot.device.auth.IotHubX509SoftwareAuthenticationProvider.iotHubX509"
  fullName: "com.microsoft.azure.sdk.iot.device.auth.IotHubX509SoftwareAuthenticationProvider.iotHubX509"
  name: "iotHubX509"
  nameWithType: "IotHubX509SoftwareAuthenticationProvider.iotHubX509"
  modifiers:
  - "protected"
  field:
    type: "<xref href=\"com.microsoft.azure.sdk.iot.device.auth.IotHubX509?alt=com.microsoft.azure.sdk.iot.device.auth.IotHubX509&text=IotHubX509\" data-throw-if-not-resolved=\"False\" />"
  syntax: "protected IotHubX509 iotHubX509"
methods:
- uid: "com.microsoft.azure.sdk.iot.device.auth.IotHubX509SoftwareAuthenticationProvider.getSSLContext()"
  fullName: "com.microsoft.azure.sdk.iot.device.auth.IotHubX509SoftwareAuthenticationProvider.getSSLContext()"
  name: "getSSLContext()"
  nameWithType: "IotHubX509SoftwareAuthenticationProvider.getSSLContext()"
  summary: "Getter for Iot<wbr>Hub<wbr>SSLContext"
  overridden: "com.microsoft.azure.sdk.iot.device.auth.IotHubAuthenticationProvider.getSSLContext()"
  syntax: "public SSLContext getSSLContext()"
  exceptions:
  - description: "if an error occurs when generating the SSLContext"
    type: "<xref href=\"java.io.IOException?alt=java.io.IOException&text=IOException\" data-throw-if-not-resolved=\"False\" />"
  desc: "Getter for IotHubSSLContext"
  returns:
    description: "The value of IotHubSSLContext"
    type: "<xref href=\"javax.net.ssl.SSLContext?alt=javax.net.ssl.SSLContext&text=SSLContext\" data-throw-if-not-resolved=\"False\" />"
type: "class"
metadata: {}
package: "com.microsoft.azure.sdk.iot.device.auth"
artifact: com.microsoft.azure.sdk.iot:iot-device-client-preview:1.2.0
