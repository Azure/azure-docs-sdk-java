### YamlMime:ManagedReference
items:
- uid: "com.azure.cosmos.CosmosClientBuilder"
  id: "CosmosClientBuilder"
  parent: "com.azure.cosmos"
  children:
  - "com.azure.cosmos.CosmosClientBuilder.CosmosClientBuilder()"
  - "com.azure.cosmos.CosmosClientBuilder.buildAsyncClient()"
  - "com.azure.cosmos.CosmosClientBuilder.buildClient()"
  - "com.azure.cosmos.CosmosClientBuilder.configs()"
  - "com.azure.cosmos.CosmosClientBuilder.configs(com.azure.cosmos.implementation.Configs)"
  - "com.azure.cosmos.CosmosClientBuilder.getConnectionPolicy()"
  - "com.azure.cosmos.CosmosClientBuilder.getConsistencyLevel()"
  - "com.azure.cosmos.CosmosClientBuilder.getCosmosAuthorizationTokenResolver()"
  - "com.azure.cosmos.CosmosClientBuilder.getCosmosKeyCredential()"
  - "com.azure.cosmos.CosmosClientBuilder.getEndpoint()"
  - "com.azure.cosmos.CosmosClientBuilder.getKey()"
  - "com.azure.cosmos.CosmosClientBuilder.getPermissions()"
  - "com.azure.cosmos.CosmosClientBuilder.getResourceToken()"
  - "com.azure.cosmos.CosmosClientBuilder.isConnectionReuseAcrossClientsEnabled()"
  - "com.azure.cosmos.CosmosClientBuilder.isSessionCapturingOverrideEnabled()"
  - "com.azure.cosmos.CosmosClientBuilder.setConnectionPolicy(com.azure.cosmos.ConnectionPolicy)"
  - "com.azure.cosmos.CosmosClientBuilder.setConnectionReuseAcrossClientsEnabled(boolean)"
  - "com.azure.cosmos.CosmosClientBuilder.setConsistencyLevel(com.azure.cosmos.ConsistencyLevel)"
  - "com.azure.cosmos.CosmosClientBuilder.setCosmosAuthorizationTokenResolver(com.azure.cosmos.CosmosAuthorizationTokenResolver)"
  - "com.azure.cosmos.CosmosClientBuilder.setCosmosKeyCredential(com.azure.cosmos.CosmosKeyCredential)"
  - "com.azure.cosmos.CosmosClientBuilder.setEndpoint(java.lang.String)"
  - "com.azure.cosmos.CosmosClientBuilder.setKey(java.lang.String)"
  - "com.azure.cosmos.CosmosClientBuilder.setPermissions(java.util.List<com.azure.cosmos.models.Permission>)"
  - "com.azure.cosmos.CosmosClientBuilder.setResourceToken(java.lang.String)"
  - "com.azure.cosmos.CosmosClientBuilder.setSessionCapturingOverrideEnabled(boolean)"
  langs:
  - "java"
  name: "CosmosClientBuilder"
  nameWithType: "CosmosClientBuilder"
  fullName: "com.azure.cosmos.CosmosClientBuilder"
  type: "Class"
  package: "com.azure.cosmos"
  summary: "Helper class to buildAsyncClient <xref uid=\"com.azure.cosmos.CosmosAsyncClient\" data-throw-if-not-resolved=\"false\">CosmosAsyncClient</xref> instances as logical representation of the Azure Cosmos database service.\n\n```java\nConnectionPolicy connectionPolicy = new ConnectionPolicy();\n getConnectionPolicy.getConnectionMode(ConnectionMode.DIRECT);\n CosmosAsyncClient client = new CosmosAsyncClient.cosmosClientBuilder()\n         .setEndpoint(serviceEndpoint)\n         .setKey(key)\n         .setConnectionPolicy(connectionPolicy)\n         .setConsistencyLevel(ConsistencyLevel.SESSION)\n         .buildAsyncClient();\n```"
  syntax:
    content: "public class CosmosClientBuilder"
  inheritance:
  - "java.lang.Object"
  inheritedMembers:
  - "java.lang.Object.clone()"
  - "java.lang.Object.equals(java.lang.Object)"
  - "java.lang.Object.finalize()"
  - "java.lang.Object.getClass()"
  - "java.lang.Object.hashCode()"
  - "java.lang.Object.notify()"
  - "java.lang.Object.notifyAll()"
  - "java.lang.Object.toString()"
  - "java.lang.Object.wait()"
  - "java.lang.Object.wait(long)"
  - "java.lang.Object.wait(long,int)"
- uid: "com.azure.cosmos.CosmosClientBuilder.CosmosClientBuilder()"
  id: "CosmosClientBuilder()"
  parent: "com.azure.cosmos.CosmosClientBuilder"
  langs:
  - "java"
  name: "CosmosClientBuilder()"
  nameWithType: "CosmosClientBuilder.CosmosClientBuilder()"
  fullName: "com.azure.cosmos.CosmosClientBuilder.CosmosClientBuilder()"
  overload: "com.azure.cosmos.CosmosClientBuilder.CosmosClientBuilder*"
  type: "Constructor"
  package: "com.azure.cosmos"
  summary: "Instantiates a new Cosmos client builder."
  syntax:
    content: "public CosmosClientBuilder()"
- uid: "com.azure.cosmos.CosmosClientBuilder.buildAsyncClient()"
  id: "buildAsyncClient()"
  parent: "com.azure.cosmos.CosmosClientBuilder"
  langs:
  - "java"
  name: "buildAsyncClient()"
  nameWithType: "CosmosClientBuilder.buildAsyncClient()"
  fullName: "com.azure.cosmos.CosmosClientBuilder.buildAsyncClient()"
  overload: "com.azure.cosmos.CosmosClientBuilder.buildAsyncClient*"
  type: "Method"
  package: "com.azure.cosmos"
  summary: "Builds a cosmos configuration object with the provided properties"
  syntax:
    content: "public CosmosAsyncClient buildAsyncClient()"
    return:
      type: "com.azure.cosmos.CosmosAsyncClient"
      description: "CosmosAsyncClient"
- uid: "com.azure.cosmos.CosmosClientBuilder.buildClient()"
  id: "buildClient()"
  parent: "com.azure.cosmos.CosmosClientBuilder"
  langs:
  - "java"
  name: "buildClient()"
  nameWithType: "CosmosClientBuilder.buildClient()"
  fullName: "com.azure.cosmos.CosmosClientBuilder.buildClient()"
  overload: "com.azure.cosmos.CosmosClientBuilder.buildClient*"
  type: "Method"
  package: "com.azure.cosmos"
  summary: "Builds a cosmos sync client object with the provided properties"
  syntax:
    content: "public CosmosClient buildClient()"
    return:
      type: "com.azure.cosmos.CosmosClient"
      description: "CosmosClient"
- uid: "com.azure.cosmos.CosmosClientBuilder.configs()"
  id: "configs()"
  parent: "com.azure.cosmos.CosmosClientBuilder"
  langs:
  - "java"
  name: "configs()"
  nameWithType: "CosmosClientBuilder.configs()"
  fullName: "com.azure.cosmos.CosmosClientBuilder.configs()"
  overload: "com.azure.cosmos.CosmosClientBuilder.configs*"
  type: "Method"
  package: "com.azure.cosmos"
  syntax:
    content: " Configs configs()"
    return:
      type: "com.azure.cosmos.implementation.Configs"
- uid: "com.azure.cosmos.CosmosClientBuilder.configs(com.azure.cosmos.implementation.Configs)"
  id: "configs(com.azure.cosmos.implementation.Configs)"
  parent: "com.azure.cosmos.CosmosClientBuilder"
  langs:
  - "java"
  name: "configs(Configs configs)"
  nameWithType: "CosmosClientBuilder.configs(Configs configs)"
  fullName: "com.azure.cosmos.CosmosClientBuilder.configs(Configs configs)"
  overload: "com.azure.cosmos.CosmosClientBuilder.configs*"
  type: "Method"
  package: "com.azure.cosmos"
  summary: "Configs"
  syntax:
    content: " CosmosClientBuilder configs(Configs configs)"
    parameters:
    - id: "configs"
      type: "com.azure.cosmos.implementation.Configs"
    return:
      type: "com.azure.cosmos.CosmosClientBuilder"
      description: "current cosmosClientBuilder"
- uid: "com.azure.cosmos.CosmosClientBuilder.getConnectionPolicy()"
  id: "getConnectionPolicy()"
  parent: "com.azure.cosmos.CosmosClientBuilder"
  langs:
  - "java"
  name: "getConnectionPolicy()"
  nameWithType: "CosmosClientBuilder.getConnectionPolicy()"
  fullName: "com.azure.cosmos.CosmosClientBuilder.getConnectionPolicy()"
  overload: "com.azure.cosmos.CosmosClientBuilder.getConnectionPolicy*"
  type: "Method"
  package: "com.azure.cosmos"
  summary: "Gets the (@link ConnectionPolicy) to be used"
  syntax:
    content: "public ConnectionPolicy getConnectionPolicy()"
    return:
      type: "com.azure.cosmos.ConnectionPolicy"
      description: "the connection policy"
- uid: "com.azure.cosmos.CosmosClientBuilder.getConsistencyLevel()"
  id: "getConsistencyLevel()"
  parent: "com.azure.cosmos.CosmosClientBuilder"
  langs:
  - "java"
  name: "getConsistencyLevel()"
  nameWithType: "CosmosClientBuilder.getConsistencyLevel()"
  fullName: "com.azure.cosmos.CosmosClientBuilder.getConsistencyLevel()"
  overload: "com.azure.cosmos.CosmosClientBuilder.getConsistencyLevel*"
  type: "Method"
  package: "com.azure.cosmos"
  summary: "Gets the <xref uid=\"com.azure.cosmos.ConsistencyLevel\" data-throw-if-not-resolved=\"false\">ConsistencyLevel</xref> to be used"
  syntax:
    content: "public ConsistencyLevel getConsistencyLevel()"
    return:
      type: "com.azure.cosmos.ConsistencyLevel"
      description: "the consistency level"
- uid: "com.azure.cosmos.CosmosClientBuilder.getCosmosAuthorizationTokenResolver()"
  id: "getCosmosAuthorizationTokenResolver()"
  parent: "com.azure.cosmos.CosmosClientBuilder"
  langs:
  - "java"
  name: "getCosmosAuthorizationTokenResolver()"
  nameWithType: "CosmosClientBuilder.getCosmosAuthorizationTokenResolver()"
  fullName: "com.azure.cosmos.CosmosClientBuilder.getCosmosAuthorizationTokenResolver()"
  overload: "com.azure.cosmos.CosmosClientBuilder.getCosmosAuthorizationTokenResolver*"
  type: "Method"
  package: "com.azure.cosmos"
  summary: "Gets the token resolver"
  syntax:
    content: "public CosmosAuthorizationTokenResolver getCosmosAuthorizationTokenResolver()"
    return:
      type: "com.azure.cosmos.CosmosAuthorizationTokenResolver"
      description: "the token resolver"
- uid: "com.azure.cosmos.CosmosClientBuilder.getCosmosKeyCredential()"
  id: "getCosmosKeyCredential()"
  parent: "com.azure.cosmos.CosmosClientBuilder"
  langs:
  - "java"
  name: "getCosmosKeyCredential()"
  nameWithType: "CosmosClientBuilder.getCosmosKeyCredential()"
  fullName: "com.azure.cosmos.CosmosClientBuilder.getCosmosKeyCredential()"
  overload: "com.azure.cosmos.CosmosClientBuilder.getCosmosKeyCredential*"
  type: "Method"
  package: "com.azure.cosmos"
  summary: "Gets the <xref uid=\"com.azure.cosmos.CosmosKeyCredential\" data-throw-if-not-resolved=\"false\">CosmosKeyCredential</xref> to be used"
  syntax:
    content: "public CosmosKeyCredential getCosmosKeyCredential()"
    return:
      type: "com.azure.cosmos.CosmosKeyCredential"
      description: "cosmosKeyCredential"
- uid: "com.azure.cosmos.CosmosClientBuilder.getEndpoint()"
  id: "getEndpoint()"
  parent: "com.azure.cosmos.CosmosClientBuilder"
  langs:
  - "java"
  name: "getEndpoint()"
  nameWithType: "CosmosClientBuilder.getEndpoint()"
  fullName: "com.azure.cosmos.CosmosClientBuilder.getEndpoint()"
  overload: "com.azure.cosmos.CosmosClientBuilder.getEndpoint*"
  type: "Method"
  package: "com.azure.cosmos"
  summary: "Gets the Azure Cosmos DB endpoint the SDK will connect to"
  syntax:
    content: "public String getEndpoint()"
    return:
      type: "java.lang.String"
      description: "the endpoint"
- uid: "com.azure.cosmos.CosmosClientBuilder.getKey()"
  id: "getKey()"
  parent: "com.azure.cosmos.CosmosClientBuilder"
  langs:
  - "java"
  name: "getKey()"
  nameWithType: "CosmosClientBuilder.getKey()"
  fullName: "com.azure.cosmos.CosmosClientBuilder.getKey()"
  overload: "com.azure.cosmos.CosmosClientBuilder.getKey*"
  type: "Method"
  package: "com.azure.cosmos"
  summary: "Gets either a master or readonly key used to perform authentication for accessing resource."
  syntax:
    content: "public String getKey()"
    return:
      type: "java.lang.String"
      description: "the key"
- uid: "com.azure.cosmos.CosmosClientBuilder.getPermissions()"
  id: "getPermissions()"
  parent: "com.azure.cosmos.CosmosClientBuilder"
  langs:
  - "java"
  name: "getPermissions()"
  nameWithType: "CosmosClientBuilder.getPermissions()"
  fullName: "com.azure.cosmos.CosmosClientBuilder.getPermissions()"
  overload: "com.azure.cosmos.CosmosClientBuilder.getPermissions*"
  type: "Method"
  package: "com.azure.cosmos"
  summary: "Gets the permission list, which contains the resource tokens needed to access resources."
  syntax:
    content: "public List<Permission> getPermissions()"
    return:
      type: "java.util.List<com.azure.cosmos.models.Permission>"
      description: "the permission list"
- uid: "com.azure.cosmos.CosmosClientBuilder.getResourceToken()"
  id: "getResourceToken()"
  parent: "com.azure.cosmos.CosmosClientBuilder"
  langs:
  - "java"
  name: "getResourceToken()"
  nameWithType: "CosmosClientBuilder.getResourceToken()"
  fullName: "com.azure.cosmos.CosmosClientBuilder.getResourceToken()"
  overload: "com.azure.cosmos.CosmosClientBuilder.getResourceToken*"
  type: "Method"
  package: "com.azure.cosmos"
  summary: "Sets a resource token used to perform authentication for accessing resource."
  syntax:
    content: "public String getResourceToken()"
    return:
      type: "java.lang.String"
      description: "the resourceToken"
- uid: "com.azure.cosmos.CosmosClientBuilder.isConnectionReuseAcrossClientsEnabled()"
  id: "isConnectionReuseAcrossClientsEnabled()"
  parent: "com.azure.cosmos.CosmosClientBuilder"
  langs:
  - "java"
  name: "isConnectionReuseAcrossClientsEnabled()"
  nameWithType: "CosmosClientBuilder.isConnectionReuseAcrossClientsEnabled()"
  fullName: "com.azure.cosmos.CosmosClientBuilder.isConnectionReuseAcrossClientsEnabled()"
  overload: "com.azure.cosmos.CosmosClientBuilder.isConnectionReuseAcrossClientsEnabled*"
  type: "Method"
  package: "com.azure.cosmos"
  summary: "Indicates whether connection sharing is enabled. The default is false. When you have multiple instances of Cosmos Client in the same JVM interacting to multiple Cosmos accounts, enabling this allows connection sharing in Direct mode if possible between instances of Cosmos Client."
  syntax:
    content: "public boolean isConnectionReuseAcrossClientsEnabled()"
    return:
      type: "boolean"
      description: "the connection sharing across multiple clients"
- uid: "com.azure.cosmos.CosmosClientBuilder.isSessionCapturingOverrideEnabled()"
  id: "isSessionCapturingOverrideEnabled()"
  parent: "com.azure.cosmos.CosmosClientBuilder"
  langs:
  - "java"
  name: "isSessionCapturingOverrideEnabled()"
  nameWithType: "CosmosClientBuilder.isSessionCapturingOverrideEnabled()"
  fullName: "com.azure.cosmos.CosmosClientBuilder.isSessionCapturingOverrideEnabled()"
  overload: "com.azure.cosmos.CosmosClientBuilder.isSessionCapturingOverrideEnabled*"
  type: "Method"
  package: "com.azure.cosmos"
  summary: "Indicates if Session capturing is enabled for non Session modes. The default is false."
  syntax:
    content: "public boolean isSessionCapturingOverrideEnabled()"
    return:
      type: "boolean"
      description: "the session capturing override"
- uid: "com.azure.cosmos.CosmosClientBuilder.setConnectionPolicy(com.azure.cosmos.ConnectionPolicy)"
  id: "setConnectionPolicy(com.azure.cosmos.ConnectionPolicy)"
  parent: "com.azure.cosmos.CosmosClientBuilder"
  langs:
  - "java"
  name: "setConnectionPolicy(ConnectionPolicy connectionPolicy)"
  nameWithType: "CosmosClientBuilder.setConnectionPolicy(ConnectionPolicy connectionPolicy)"
  fullName: "com.azure.cosmos.CosmosClientBuilder.setConnectionPolicy(ConnectionPolicy connectionPolicy)"
  overload: "com.azure.cosmos.CosmosClientBuilder.setConnectionPolicy*"
  type: "Method"
  package: "com.azure.cosmos"
  summary: "Sets the <xref uid=\"com.azure.cosmos.ConnectionPolicy\" data-throw-if-not-resolved=\"false\">ConnectionPolicy</xref> to be used"
  syntax:
    content: "public CosmosClientBuilder setConnectionPolicy(ConnectionPolicy connectionPolicy)"
    parameters:
    - id: "connectionPolicy"
      type: "com.azure.cosmos.ConnectionPolicy"
      description: "<xref uid=\"com.azure.cosmos.ConnectionPolicy\" data-throw-if-not-resolved=\"false\">ConnectionPolicy</xref>"
    return:
      type: "com.azure.cosmos.CosmosClientBuilder"
      description: "current Builder"
- uid: "com.azure.cosmos.CosmosClientBuilder.setConnectionReuseAcrossClientsEnabled(boolean)"
  id: "setConnectionReuseAcrossClientsEnabled(boolean)"
  parent: "com.azure.cosmos.CosmosClientBuilder"
  langs:
  - "java"
  name: "setConnectionReuseAcrossClientsEnabled(boolean connectionReuseAcrossClientsEnabled)"
  nameWithType: "CosmosClientBuilder.setConnectionReuseAcrossClientsEnabled(boolean connectionReuseAcrossClientsEnabled)"
  fullName: "com.azure.cosmos.CosmosClientBuilder.setConnectionReuseAcrossClientsEnabled(boolean connectionReuseAcrossClientsEnabled)"
  overload: "com.azure.cosmos.CosmosClientBuilder.setConnectionReuseAcrossClientsEnabled*"
  type: "Method"
  package: "com.azure.cosmos"
  summary: "Enables connections sharing across multiple Cosmos Clients. The default is false.\n\n```java\nConnectionPolicy connectionPolicy = new ConnectionPolicy();\n getConnectionPolicy.getConnectionMode(ConnectionMode.DIRECT);\n CosmosAsyncClient client1 = new CosmosAsyncClient.cosmosClientBuilder()\n         .setEndpoint(serviceEndpoint1)\n         .setKey(key1)\n         .setConnectionPolicy(connectionPolicy)\n         .setConsistencyLevel(ConsistencyLevel.SESSION)\n         .setConnectionSharingAcrossClientsEnabled(true)\n         .buildAsyncClient();\n\n CosmosAsyncClient client2 = new CosmosAsyncClient.cosmosClientBuilder()\n         .setEndpoint(serviceEndpoint2)\n         .setKey(key2)\n         .setConnectionPolicy(connectionPolicy)\n         .setConsistencyLevel(ConsistencyLevel.SESSION)\n         .setConnectionSharingAcrossClientsEnabled(true)\n         .buildAsyncClient();\n\n // when configured this way client1 and client2 will share connections when possible.\n```\n\nWhen you have multiple instances of Cosmos Client in the same JVM interacting to multiple Cosmos accounts, enabling this allows connection sharing in Direct mode if possible between instances of Cosmos Client. Please note, when setting this option, the connection configuration (e.g., socket timeout config, idle timeout config) of the first instantiated client will be used for all other client instances."
  syntax:
    content: "public CosmosClientBuilder setConnectionReuseAcrossClientsEnabled(boolean connectionReuseAcrossClientsEnabled)"
    parameters:
    - id: "connectionReuseAcrossClientsEnabled"
      type: "boolean"
      description: "connection sharing"
    return:
      type: "com.azure.cosmos.CosmosClientBuilder"
      description: "current cosmosClientBuilder"
- uid: "com.azure.cosmos.CosmosClientBuilder.setConsistencyLevel(com.azure.cosmos.ConsistencyLevel)"
  id: "setConsistencyLevel(com.azure.cosmos.ConsistencyLevel)"
  parent: "com.azure.cosmos.CosmosClientBuilder"
  langs:
  - "java"
  name: "setConsistencyLevel(ConsistencyLevel desiredConsistencyLevel)"
  nameWithType: "CosmosClientBuilder.setConsistencyLevel(ConsistencyLevel desiredConsistencyLevel)"
  fullName: "com.azure.cosmos.CosmosClientBuilder.setConsistencyLevel(ConsistencyLevel desiredConsistencyLevel)"
  overload: "com.azure.cosmos.CosmosClientBuilder.setConsistencyLevel*"
  type: "Method"
  package: "com.azure.cosmos"
  summary: "Sets the <xref uid=\"com.azure.cosmos.ConsistencyLevel\" data-throw-if-not-resolved=\"false\">ConsistencyLevel</xref> to be used"
  syntax:
    content: "public CosmosClientBuilder setConsistencyLevel(ConsistencyLevel desiredConsistencyLevel)"
    parameters:
    - id: "desiredConsistencyLevel"
      type: "com.azure.cosmos.ConsistencyLevel"
      description: "<xref uid=\"com.azure.cosmos.ConsistencyLevel\" data-throw-if-not-resolved=\"false\">ConsistencyLevel</xref>"
    return:
      type: "com.azure.cosmos.CosmosClientBuilder"
      description: "current Builder"
- uid: "com.azure.cosmos.CosmosClientBuilder.setCosmosAuthorizationTokenResolver(com.azure.cosmos.CosmosAuthorizationTokenResolver)"
  id: "setCosmosAuthorizationTokenResolver(com.azure.cosmos.CosmosAuthorizationTokenResolver)"
  parent: "com.azure.cosmos.CosmosClientBuilder"
  langs:
  - "java"
  name: "setCosmosAuthorizationTokenResolver(CosmosAuthorizationTokenResolver cosmosAuthorizationTokenResolver)"
  nameWithType: "CosmosClientBuilder.setCosmosAuthorizationTokenResolver(CosmosAuthorizationTokenResolver cosmosAuthorizationTokenResolver)"
  fullName: "com.azure.cosmos.CosmosClientBuilder.setCosmosAuthorizationTokenResolver(CosmosAuthorizationTokenResolver cosmosAuthorizationTokenResolver)"
  overload: "com.azure.cosmos.CosmosClientBuilder.setCosmosAuthorizationTokenResolver*"
  type: "Method"
  package: "com.azure.cosmos"
  summary: "Sets the token resolver"
  syntax:
    content: "public CosmosClientBuilder setCosmosAuthorizationTokenResolver(CosmosAuthorizationTokenResolver cosmosAuthorizationTokenResolver)"
    parameters:
    - id: "cosmosAuthorizationTokenResolver"
      type: "com.azure.cosmos.CosmosAuthorizationTokenResolver"
      description: "the token resolver"
    return:
      type: "com.azure.cosmos.CosmosClientBuilder"
      description: "current cosmosClientBuilder"
- uid: "com.azure.cosmos.CosmosClientBuilder.setCosmosKeyCredential(com.azure.cosmos.CosmosKeyCredential)"
  id: "setCosmosKeyCredential(com.azure.cosmos.CosmosKeyCredential)"
  parent: "com.azure.cosmos.CosmosClientBuilder"
  langs:
  - "java"
  name: "setCosmosKeyCredential(CosmosKeyCredential cosmosKeyCredential)"
  nameWithType: "CosmosClientBuilder.setCosmosKeyCredential(CosmosKeyCredential cosmosKeyCredential)"
  fullName: "com.azure.cosmos.CosmosClientBuilder.setCosmosKeyCredential(CosmosKeyCredential cosmosKeyCredential)"
  overload: "com.azure.cosmos.CosmosClientBuilder.setCosmosKeyCredential*"
  type: "Method"
  package: "com.azure.cosmos"
  summary: "Sets the <xref uid=\"com.azure.cosmos.CosmosKeyCredential\" data-throw-if-not-resolved=\"false\">CosmosKeyCredential</xref> to be used"
  syntax:
    content: "public CosmosClientBuilder setCosmosKeyCredential(CosmosKeyCredential cosmosKeyCredential)"
    parameters:
    - id: "cosmosKeyCredential"
      type: "com.azure.cosmos.CosmosKeyCredential"
      description: "<xref uid=\"com.azure.cosmos.CosmosKeyCredential\" data-throw-if-not-resolved=\"false\">CosmosKeyCredential</xref>"
    return:
      type: "com.azure.cosmos.CosmosClientBuilder"
      description: "current cosmosClientBuilder"
- uid: "com.azure.cosmos.CosmosClientBuilder.setEndpoint(java.lang.String)"
  id: "setEndpoint(java.lang.String)"
  parent: "com.azure.cosmos.CosmosClientBuilder"
  langs:
  - "java"
  name: "setEndpoint(String endpoint)"
  nameWithType: "CosmosClientBuilder.setEndpoint(String endpoint)"
  fullName: "com.azure.cosmos.CosmosClientBuilder.setEndpoint(String endpoint)"
  overload: "com.azure.cosmos.CosmosClientBuilder.setEndpoint*"
  type: "Method"
  package: "com.azure.cosmos"
  summary: "Sets the Azure Cosmos DB endpoint the SDK will connect to"
  syntax:
    content: "public CosmosClientBuilder setEndpoint(String endpoint)"
    parameters:
    - id: "endpoint"
      type: "java.lang.String"
      description: "the service endpoint"
    return:
      type: "com.azure.cosmos.CosmosClientBuilder"
      description: "current Builder"
- uid: "com.azure.cosmos.CosmosClientBuilder.setKey(java.lang.String)"
  id: "setKey(java.lang.String)"
  parent: "com.azure.cosmos.CosmosClientBuilder"
  langs:
  - "java"
  name: "setKey(String key)"
  nameWithType: "CosmosClientBuilder.setKey(String key)"
  fullName: "com.azure.cosmos.CosmosClientBuilder.setKey(String key)"
  overload: "com.azure.cosmos.CosmosClientBuilder.setKey*"
  type: "Method"
  package: "com.azure.cosmos"
  summary: "Sets either a master or readonly key used to perform authentication for accessing resource."
  syntax:
    content: "public CosmosClientBuilder setKey(String key)"
    parameters:
    - id: "key"
      type: "java.lang.String"
      description: "master or readonly key"
    return:
      type: "com.azure.cosmos.CosmosClientBuilder"
      description: "current Builder."
- uid: "com.azure.cosmos.CosmosClientBuilder.setPermissions(java.util.List<com.azure.cosmos.models.Permission>)"
  id: "setPermissions(java.util.List<com.azure.cosmos.models.Permission>)"
  parent: "com.azure.cosmos.CosmosClientBuilder"
  langs:
  - "java"
  name: "setPermissions(List<Permission> permissions)"
  nameWithType: "CosmosClientBuilder.setPermissions(List<Permission> permissions)"
  fullName: "com.azure.cosmos.CosmosClientBuilder.setPermissions(List<Permission> permissions)"
  overload: "com.azure.cosmos.CosmosClientBuilder.setPermissions*"
  type: "Method"
  package: "com.azure.cosmos"
  summary: "Sets the permission list, which contains the resource tokens needed to access resources."
  syntax:
    content: "public CosmosClientBuilder setPermissions(List<Permission> permissions)"
    parameters:
    - id: "permissions"
      type: "java.util.List<com.azure.cosmos.models.Permission>"
      description: "Permission list for authentication."
    return:
      type: "com.azure.cosmos.CosmosClientBuilder"
      description: "current Builder."
- uid: "com.azure.cosmos.CosmosClientBuilder.setResourceToken(java.lang.String)"
  id: "setResourceToken(java.lang.String)"
  parent: "com.azure.cosmos.CosmosClientBuilder"
  langs:
  - "java"
  name: "setResourceToken(String resourceToken)"
  nameWithType: "CosmosClientBuilder.setResourceToken(String resourceToken)"
  fullName: "com.azure.cosmos.CosmosClientBuilder.setResourceToken(String resourceToken)"
  overload: "com.azure.cosmos.CosmosClientBuilder.setResourceToken*"
  type: "Method"
  package: "com.azure.cosmos"
  summary: "Sets a resource token used to perform authentication for accessing resource."
  syntax:
    content: "public CosmosClientBuilder setResourceToken(String resourceToken)"
    parameters:
    - id: "resourceToken"
      type: "java.lang.String"
      description: "resourceToken for authentication"
    return:
      type: "com.azure.cosmos.CosmosClientBuilder"
      description: "current Builder."
- uid: "com.azure.cosmos.CosmosClientBuilder.setSessionCapturingOverrideEnabled(boolean)"
  id: "setSessionCapturingOverrideEnabled(boolean)"
  parent: "com.azure.cosmos.CosmosClientBuilder"
  langs:
  - "java"
  name: "setSessionCapturingOverrideEnabled(boolean sessionCapturingOverrideEnabled)"
  nameWithType: "CosmosClientBuilder.setSessionCapturingOverrideEnabled(boolean sessionCapturingOverrideEnabled)"
  fullName: "com.azure.cosmos.CosmosClientBuilder.setSessionCapturingOverrideEnabled(boolean sessionCapturingOverrideEnabled)"
  overload: "com.azure.cosmos.CosmosClientBuilder.setSessionCapturingOverrideEnabled*"
  type: "Method"
  package: "com.azure.cosmos"
  summary: "Session capturing is enabled by default for <xref uid=\"com.azure.cosmos.ConsistencyLevel.SESSION\" data-throw-if-not-resolved=\"false\">ConsistencyLevel#SESSION</xref>. For other consistency levels, it is not needed, unless if you need occasionally send requests with Session Consistency while the client is not configured in session.\n\nenabling Session capturing for Session mode has no effect."
  syntax:
    content: "public CosmosClientBuilder setSessionCapturingOverrideEnabled(boolean sessionCapturingOverrideEnabled)"
    parameters:
    - id: "sessionCapturingOverrideEnabled"
      type: "boolean"
      description: "session capturing override"
    return:
      type: "com.azure.cosmos.CosmosClientBuilder"
      description: "current cosmosClientBuilder"
references:
- uid: "com.azure.cosmos.CosmosClientBuilder.CosmosClientBuilder*"
  name: "CosmosClientBuilder"
  nameWithType: "CosmosClientBuilder.CosmosClientBuilder"
  fullName: "com.azure.cosmos.CosmosClientBuilder.CosmosClientBuilder"
  package: "com.azure.cosmos"
- uid: "boolean"
  spec.java:
  - uid: "boolean"
    name: "boolean"
    fullName: "boolean"
- uid: "com.azure.cosmos.CosmosClientBuilder.setSessionCapturingOverrideEnabled*"
  name: "setSessionCapturingOverrideEnabled"
  nameWithType: "CosmosClientBuilder.setSessionCapturingOverrideEnabled"
  fullName: "com.azure.cosmos.CosmosClientBuilder.setSessionCapturingOverrideEnabled"
  package: "com.azure.cosmos"
- uid: "com.azure.cosmos.CosmosClientBuilder.isSessionCapturingOverrideEnabled*"
  name: "isSessionCapturingOverrideEnabled"
  nameWithType: "CosmosClientBuilder.isSessionCapturingOverrideEnabled"
  fullName: "com.azure.cosmos.CosmosClientBuilder.isSessionCapturingOverrideEnabled"
  package: "com.azure.cosmos"
- uid: "com.azure.cosmos.CosmosClientBuilder.setConnectionReuseAcrossClientsEnabled*"
  name: "setConnectionReuseAcrossClientsEnabled"
  nameWithType: "CosmosClientBuilder.setConnectionReuseAcrossClientsEnabled"
  fullName: "com.azure.cosmos.CosmosClientBuilder.setConnectionReuseAcrossClientsEnabled"
  package: "com.azure.cosmos"
- uid: "com.azure.cosmos.CosmosClientBuilder.isConnectionReuseAcrossClientsEnabled*"
  name: "isConnectionReuseAcrossClientsEnabled"
  nameWithType: "CosmosClientBuilder.isConnectionReuseAcrossClientsEnabled"
  fullName: "com.azure.cosmos.CosmosClientBuilder.isConnectionReuseAcrossClientsEnabled"
  package: "com.azure.cosmos"
- uid: "com.azure.cosmos.CosmosAuthorizationTokenResolver"
  name: "CosmosAuthorizationTokenResolver"
  nameWithType: "CosmosAuthorizationTokenResolver"
  fullName: "com.azure.cosmos.CosmosAuthorizationTokenResolver"
- uid: "com.azure.cosmos.CosmosClientBuilder.getCosmosAuthorizationTokenResolver*"
  name: "getCosmosAuthorizationTokenResolver"
  nameWithType: "CosmosClientBuilder.getCosmosAuthorizationTokenResolver"
  fullName: "com.azure.cosmos.CosmosClientBuilder.getCosmosAuthorizationTokenResolver"
  package: "com.azure.cosmos"
- uid: "com.azure.cosmos.CosmosClientBuilder.setCosmosAuthorizationTokenResolver*"
  name: "setCosmosAuthorizationTokenResolver"
  nameWithType: "CosmosClientBuilder.setCosmosAuthorizationTokenResolver"
  fullName: "com.azure.cosmos.CosmosClientBuilder.setCosmosAuthorizationTokenResolver"
  package: "com.azure.cosmos"
- uid: "java.lang.String"
  spec.java:
  - uid: "java.lang.String"
    name: "String"
    fullName: "java.lang.String"
- uid: "com.azure.cosmos.CosmosClientBuilder.getEndpoint*"
  name: "getEndpoint"
  nameWithType: "CosmosClientBuilder.getEndpoint"
  fullName: "com.azure.cosmos.CosmosClientBuilder.getEndpoint"
  package: "com.azure.cosmos"
- uid: "com.azure.cosmos.CosmosClientBuilder.setEndpoint*"
  name: "setEndpoint"
  nameWithType: "CosmosClientBuilder.setEndpoint"
  fullName: "com.azure.cosmos.CosmosClientBuilder.setEndpoint"
  package: "com.azure.cosmos"
- uid: "com.azure.cosmos.CosmosClientBuilder.getKey*"
  name: "getKey"
  nameWithType: "CosmosClientBuilder.getKey"
  fullName: "com.azure.cosmos.CosmosClientBuilder.getKey"
  package: "com.azure.cosmos"
- uid: "com.azure.cosmos.CosmosClientBuilder.setKey*"
  name: "setKey"
  nameWithType: "CosmosClientBuilder.setKey"
  fullName: "com.azure.cosmos.CosmosClientBuilder.setKey"
  package: "com.azure.cosmos"
- uid: "com.azure.cosmos.CosmosClientBuilder.getResourceToken*"
  name: "getResourceToken"
  nameWithType: "CosmosClientBuilder.getResourceToken"
  fullName: "com.azure.cosmos.CosmosClientBuilder.getResourceToken"
  package: "com.azure.cosmos"
- uid: "com.azure.cosmos.CosmosClientBuilder.setResourceToken*"
  name: "setResourceToken"
  nameWithType: "CosmosClientBuilder.setResourceToken"
  fullName: "com.azure.cosmos.CosmosClientBuilder.setResourceToken"
  package: "com.azure.cosmos"
- uid: "java.util.List<com.azure.cosmos.models.Permission>"
  spec.java:
  - uid: "java.util.List"
    name: "List"
    fullName: "java.util.List"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.cosmos.models.Permission"
    name: "Permission"
    fullName: "com.azure.cosmos.models.Permission"
  - name: ">"
    fullName: ">"
- uid: "com.azure.cosmos.CosmosClientBuilder.getPermissions*"
  name: "getPermissions"
  nameWithType: "CosmosClientBuilder.getPermissions"
  fullName: "com.azure.cosmos.CosmosClientBuilder.getPermissions"
  package: "com.azure.cosmos"
- uid: "com.azure.cosmos.CosmosClientBuilder.setPermissions*"
  name: "setPermissions"
  nameWithType: "CosmosClientBuilder.setPermissions"
  fullName: "com.azure.cosmos.CosmosClientBuilder.setPermissions"
  package: "com.azure.cosmos"
- uid: "com.azure.cosmos.ConsistencyLevel"
  name: "ConsistencyLevel"
  nameWithType: "ConsistencyLevel"
  fullName: "com.azure.cosmos.ConsistencyLevel"
- uid: "com.azure.cosmos.CosmosClientBuilder.getConsistencyLevel*"
  name: "getConsistencyLevel"
  nameWithType: "CosmosClientBuilder.getConsistencyLevel"
  fullName: "com.azure.cosmos.CosmosClientBuilder.getConsistencyLevel"
  package: "com.azure.cosmos"
- uid: "com.azure.cosmos.CosmosClientBuilder.setConsistencyLevel*"
  name: "setConsistencyLevel"
  nameWithType: "CosmosClientBuilder.setConsistencyLevel"
  fullName: "com.azure.cosmos.CosmosClientBuilder.setConsistencyLevel"
  package: "com.azure.cosmos"
- uid: "com.azure.cosmos.ConnectionPolicy"
  name: "ConnectionPolicy"
  nameWithType: "ConnectionPolicy"
  fullName: "com.azure.cosmos.ConnectionPolicy"
- uid: "com.azure.cosmos.CosmosClientBuilder.getConnectionPolicy*"
  name: "getConnectionPolicy"
  nameWithType: "CosmosClientBuilder.getConnectionPolicy"
  fullName: "com.azure.cosmos.CosmosClientBuilder.getConnectionPolicy"
  package: "com.azure.cosmos"
- uid: "com.azure.cosmos.CosmosClientBuilder.setConnectionPolicy*"
  name: "setConnectionPolicy"
  nameWithType: "CosmosClientBuilder.setConnectionPolicy"
  fullName: "com.azure.cosmos.CosmosClientBuilder.setConnectionPolicy"
  package: "com.azure.cosmos"
- uid: "com.azure.cosmos.CosmosKeyCredential"
  name: "CosmosKeyCredential"
  nameWithType: "CosmosKeyCredential"
  fullName: "com.azure.cosmos.CosmosKeyCredential"
- uid: "com.azure.cosmos.CosmosClientBuilder.getCosmosKeyCredential*"
  name: "getCosmosKeyCredential"
  nameWithType: "CosmosClientBuilder.getCosmosKeyCredential"
  fullName: "com.azure.cosmos.CosmosClientBuilder.getCosmosKeyCredential"
  package: "com.azure.cosmos"
- uid: "com.azure.cosmos.CosmosClientBuilder.setCosmosKeyCredential*"
  name: "setCosmosKeyCredential"
  nameWithType: "CosmosClientBuilder.setCosmosKeyCredential"
  fullName: "com.azure.cosmos.CosmosClientBuilder.setCosmosKeyCredential"
  package: "com.azure.cosmos"
- uid: "com.azure.cosmos.CosmosAsyncClient"
  name: "CosmosAsyncClient"
  nameWithType: "CosmosAsyncClient"
  fullName: "com.azure.cosmos.CosmosAsyncClient"
- uid: "com.azure.cosmos.CosmosClientBuilder.buildAsyncClient*"
  name: "buildAsyncClient"
  nameWithType: "CosmosClientBuilder.buildAsyncClient"
  fullName: "com.azure.cosmos.CosmosClientBuilder.buildAsyncClient"
  package: "com.azure.cosmos"
- uid: "com.azure.cosmos.CosmosClient"
  name: "CosmosClient"
  nameWithType: "CosmosClient"
  fullName: "com.azure.cosmos.CosmosClient"
- uid: "com.azure.cosmos.CosmosClientBuilder.buildClient*"
  name: "buildClient"
  nameWithType: "CosmosClientBuilder.buildClient"
  fullName: "com.azure.cosmos.CosmosClientBuilder.buildClient"
  package: "com.azure.cosmos"
- uid: "com.azure.cosmos.implementation.Configs"
  name: "Configs"
  nameWithType: "Configs"
  fullName: "com.azure.cosmos.implementation.Configs"
- uid: "com.azure.cosmos.CosmosClientBuilder.configs*"
  name: "configs"
  nameWithType: "CosmosClientBuilder.configs"
  fullName: "com.azure.cosmos.CosmosClientBuilder.configs"
  package: "com.azure.cosmos"
- uid: "java.lang.Object.notify()"
  name: "Object.notify()"
  nameWithType: "Object.notify()"
  fullName: "java.lang.Object.notify()"
- uid: "java.lang.Object.wait()"
  name: "Object.wait()"
  nameWithType: "Object.wait()"
  fullName: "java.lang.Object.wait()"
- uid: "java.lang.Object.finalize()"
  name: "Object.finalize()"
  nameWithType: "Object.finalize()"
  fullName: "java.lang.Object.finalize()"
- uid: "java.lang.Object.clone()"
  name: "Object.clone()"
  nameWithType: "Object.clone()"
  fullName: "java.lang.Object.clone()"
- uid: "java.lang.Object.notifyAll()"
  name: "Object.notifyAll()"
  nameWithType: "Object.notifyAll()"
  fullName: "java.lang.Object.notifyAll()"
- uid: "java.lang.Object.equals(java.lang.Object)"
  name: "Object.equals(Object)"
  nameWithType: "Object.equals(Object)"
  fullName: "java.lang.Object.equals(java.lang.Object)"
- uid: "java.lang.Object.getClass()"
  name: "Object.getClass()"
  nameWithType: "Object.getClass()"
  fullName: "java.lang.Object.getClass()"
- uid: "java.lang.Object.wait(long)"
  name: "Object.wait(long)"
  nameWithType: "Object.wait(long)"
  fullName: "java.lang.Object.wait(long)"
- uid: "java.lang.Object.hashCode()"
  name: "Object.hashCode()"
  nameWithType: "Object.hashCode()"
  fullName: "java.lang.Object.hashCode()"
- uid: "java.lang.Object.wait(long,int)"
  name: "Object.wait(long,int)"
  nameWithType: "Object.wait(long,int)"
  fullName: "java.lang.Object.wait(long,int)"
- uid: "java.lang.Object.toString()"
  name: "Object.toString()"
  nameWithType: "Object.toString()"
  fullName: "java.lang.Object.toString()"
- uid: "java.util.List"
  name: "List"
  nameWithType: "List"
  fullName: "java.util.List"
- uid: "com.azure.cosmos.models.Permission"
  name: "Permission"
  nameWithType: "Permission"
  fullName: "com.azure.cosmos.models.Permission"
