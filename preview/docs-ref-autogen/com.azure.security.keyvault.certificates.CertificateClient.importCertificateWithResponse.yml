### YamlMime:JavaMember
uid: "com.azure.security.keyvault.certificates.CertificateClient.importCertificateWithResponse*"
fullName: "com.azure.security.keyvault.certificates.CertificateClient.importCertificateWithResponse"
name: "importCertificateWithResponse"
nameWithType: "CertificateClient.importCertificateWithResponse"
members:
- uid: "com.azure.security.keyvault.certificates.CertificateClient.importCertificateWithResponse(com.azure.security.keyvault.certificates.models.ImportCertificateOptions,com.azure.core.util.Context)"
  fullName: "com.azure.security.keyvault.certificates.CertificateClient.importCertificateWithResponse(ImportCertificateOptions importCertificateOptions, Context context)"
  name: "importCertificateWithResponse(ImportCertificateOptions importCertificateOptions, Context context)"
  nameWithType: "CertificateClient.importCertificateWithResponse(ImportCertificateOptions importCertificateOptions, Context context)"
  summary: "Imports a pre-existing certificate to the key vault. The specified certificate must be in PFX or PEM format, and must contain the private key as well as the x509 certificates. This operation requires the `certificates/import` permission.\n\n**Code Samples**\n\nImports a certificate into the key vault.\n\n```java\nbyte[] certToImport = new byte[100];\n ImportCertificateOptions importCertificateOptions  =\n     new ImportCertificateOptions(\"certificateName\", certToImport).setEnabled(false);\n Response<KeyVaultCertificateWithPolicy> importedCertificateWithResponse =\n     certificateClient.importCertificateWithResponse(importCertificateOptions, new Context(key2, value2));\n System.out.printf(\"Received Certificate with name %s and key id %s\",\n     importedCertificateWithResponse.getValue().getProperties().getName(),\n     importedCertificateWithResponse.getValue().getKeyId());\n```"
  parameters:
  - description: "The details of the certificate to import to the key vault"
    name: "importCertificateOptions"
    type: "<xref href=\"com.azure.security.keyvault.certificates.models.ImportCertificateOptions?alt=com.azure.security.keyvault.certificates.models.ImportCertificateOptions&text=ImportCertificateOptions\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional context that is passed through the Http pipeline during the service call."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<KeyVaultCertificateWithPolicy> importCertificateWithResponse(ImportCertificateOptions importCertificateOptions, Context context)"
  returns:
    description: "A <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> whose <xref uid=\"com.azure.core.http.rest.Response.getValue*\" data-throw-if-not-resolved=\"false\" data-raw-source=\"value\"></xref> contains the <xref uid=\"com.azure.security.keyvault.certificates.models.KeyVaultCertificateWithPolicy\" data-throw-if-not-resolved=\"false\" data-raw-source=\"imported certificate\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.security.keyvault.certificates.models.KeyVaultCertificateWithPolicy?alt=com.azure.security.keyvault.certificates.models.KeyVaultCertificateWithPolicy&text=KeyVaultCertificateWithPolicy\" data-throw-if-not-resolved=\"False\" />&gt;"
type: "method"
metadata: {}
package: "com.azure.security.keyvault.certificates"
artifact: com.azure:azure-security-keyvault-certificates:4.2.0-beta.2
