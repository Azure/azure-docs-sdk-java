### YamlMime:ManagedReference
items:
- uid: org.apache.hc.client5.http.impl.nio.PoolingAsyncClientConnectionManager
  id: PoolingAsyncClientConnectionManager
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.apache.hc.client5.http.impl.nio
  children:
  - org.apache.hc.client5.http.impl.nio.PoolingAsyncClientConnectionManager.DEFAULT_MAX_CONNECTIONS_PER_ROUTE
  - org.apache.hc.client5.http.impl.nio.PoolingAsyncClientConnectionManager.DEFAULT_MAX_TOTAL_CONNECTIONS
  - org.apache.hc.client5.http.impl.nio.PoolingAsyncClientConnectionManager.PoolingAsyncClientConnectionManager()
  - org.apache.hc.client5.http.impl.nio.PoolingAsyncClientConnectionManager.PoolingAsyncClientConnectionManager(org.apache.hc.client5.http.nio.AsyncClientConnectionOperator,org.apache.hc.core5.pool.PoolConcurrencyPolicy,org.apache.hc.core5.pool.PoolReusePolicy,org.apache.hc.core5.util.TimeValue)
  - org.apache.hc.client5.http.impl.nio.PoolingAsyncClientConnectionManager.PoolingAsyncClientConnectionManager(org.apache.hc.core5.http.config.Lookup<org.apache.hc.core5.http.nio.ssl.TlsStrategy>)
  - org.apache.hc.client5.http.impl.nio.PoolingAsyncClientConnectionManager.PoolingAsyncClientConnectionManager(org.apache.hc.core5.http.config.Lookup<org.apache.hc.core5.http.nio.ssl.TlsStrategy>,org.apache.hc.core5.pool.PoolConcurrencyPolicy,org.apache.hc.core5.pool.PoolReusePolicy,org.apache.hc.core5.util.TimeValue)
  - org.apache.hc.client5.http.impl.nio.PoolingAsyncClientConnectionManager.PoolingAsyncClientConnectionManager(org.apache.hc.core5.http.config.Lookup<org.apache.hc.core5.http.nio.ssl.TlsStrategy>,org.apache.hc.core5.pool.PoolConcurrencyPolicy,org.apache.hc.core5.pool.PoolReusePolicy,org.apache.hc.core5.util.TimeValue,org.apache.hc.client5.http.SchemePortResolver,org.apache.hc.client5.http.DnsResolver)
  - org.apache.hc.client5.http.impl.nio.PoolingAsyncClientConnectionManager.PoolingAsyncClientConnectionManager(org.apache.hc.core5.http.config.Lookup<org.apache.hc.core5.http.nio.ssl.TlsStrategy>,org.apache.hc.core5.pool.PoolConcurrencyPolicy,org.apache.hc.core5.util.TimeValue)
  - org.apache.hc.client5.http.impl.nio.PoolingAsyncClientConnectionManager.PoolingAsyncClientConnectionManager(org.apache.hc.core5.pool.ManagedConnPool<org.apache.hc.client5.http.HttpRoute,org.apache.hc.client5.http.nio.ManagedAsyncClientConnection>,org.apache.hc.client5.http.nio.AsyncClientConnectionOperator)
  - org.apache.hc.client5.http.impl.nio.PoolingAsyncClientConnectionManager.close()
  - org.apache.hc.client5.http.impl.nio.PoolingAsyncClientConnectionManager.close(org.apache.hc.core5.io.CloseMode)
  - org.apache.hc.client5.http.impl.nio.PoolingAsyncClientConnectionManager.closeExpired()
  - org.apache.hc.client5.http.impl.nio.PoolingAsyncClientConnectionManager.closeIdle(org.apache.hc.core5.util.TimeValue)
  - org.apache.hc.client5.http.impl.nio.PoolingAsyncClientConnectionManager.connect(org.apache.hc.client5.http.nio.AsyncConnectionEndpoint,org.apache.hc.core5.reactor.ConnectionInitiator,org.apache.hc.core5.util.Timeout,java.lang.Object,org.apache.hc.core5.http.protocol.HttpContext,org.apache.hc.core5.concurrent.FutureCallback<org.apache.hc.client5.http.nio.AsyncConnectionEndpoint>)
  - org.apache.hc.client5.http.impl.nio.PoolingAsyncClientConnectionManager.getDefaultMaxPerRoute()
  - org.apache.hc.client5.http.impl.nio.PoolingAsyncClientConnectionManager.getMaxPerRoute(org.apache.hc.client5.http.HttpRoute)
  - org.apache.hc.client5.http.impl.nio.PoolingAsyncClientConnectionManager.getMaxTotal()
  - org.apache.hc.client5.http.impl.nio.PoolingAsyncClientConnectionManager.getRoutes()
  - org.apache.hc.client5.http.impl.nio.PoolingAsyncClientConnectionManager.getStats(org.apache.hc.client5.http.HttpRoute)
  - org.apache.hc.client5.http.impl.nio.PoolingAsyncClientConnectionManager.getTotalStats()
  - org.apache.hc.client5.http.impl.nio.PoolingAsyncClientConnectionManager.getValidateAfterInactivity()
  - org.apache.hc.client5.http.impl.nio.PoolingAsyncClientConnectionManager.lease(java.lang.String,org.apache.hc.client5.http.HttpRoute,java.lang.Object,org.apache.hc.core5.util.Timeout,org.apache.hc.core5.concurrent.FutureCallback<org.apache.hc.client5.http.nio.AsyncConnectionEndpoint>)
  - org.apache.hc.client5.http.impl.nio.PoolingAsyncClientConnectionManager.release(org.apache.hc.client5.http.nio.AsyncConnectionEndpoint,java.lang.Object,org.apache.hc.core5.util.TimeValue)
  - org.apache.hc.client5.http.impl.nio.PoolingAsyncClientConnectionManager.setDefaultMaxPerRoute(int)
  - org.apache.hc.client5.http.impl.nio.PoolingAsyncClientConnectionManager.setMaxPerRoute(org.apache.hc.client5.http.HttpRoute,int)
  - org.apache.hc.client5.http.impl.nio.PoolingAsyncClientConnectionManager.setMaxTotal(int)
  - org.apache.hc.client5.http.impl.nio.PoolingAsyncClientConnectionManager.setValidateAfterInactivity(org.apache.hc.core5.util.TimeValue)
  - org.apache.hc.client5.http.impl.nio.PoolingAsyncClientConnectionManager.upgrade(org.apache.hc.client5.http.nio.AsyncConnectionEndpoint,java.lang.Object,org.apache.hc.core5.http.protocol.HttpContext)
  langs:
  - java
  name: PoolingAsyncClientConnectionManager
  nameWithType: PoolingAsyncClientConnectionManager
  fullName: org.apache.hc.client5.http.impl.nio.PoolingAsyncClientConnectionManager
  type: Class
  package: org.apache.hc.client5.http.impl.nio
  summary: >-
    `PoolingAsyncClientConnectionManager` maintains a pool of non-blocking <xref uid="org.apache.hc.core5.http.HttpConnection" data-throw-if-not-resolved="false">org.apache.hc.core5.http.HttpConnection</xref>s and is able to service connection requests from multiple execution threads. Connections are pooled on a per route basis. A request for a route which already the manager has persistent connections for available in the pool will be services by leasing a connection from the pool rather than creating a new connection.


    `PoolingAsyncClientConnectionManager` maintains a maximum limit of connection on a per route basis and in total. Connection limits can be adjusted using <xref uid="org.apache.hc.core5.pool.ConnPoolControl" data-throw-if-not-resolved="false">ConnPoolControl</xref> methods.


    Total time to live (TTL) set at construction time defines maximum life span of persistent connections regardless of their expiration setting. No persistent connection will be re-used past its TTL value.
  syntax:
    content: public class PoolingAsyncClientConnectionManager implements AsyncClientConnectionManager, ConnPoolControl<HttpRoute>
  inheritance:
  - java.lang.Object
  implements:
  - org.apache.hc.client5.http.nio.AsyncClientConnectionManager
  - org.apache.hc.core5.pool.ConnPoolControl<org.apache.hc.client5.http.HttpRoute>
  inheritedMembers:
  - java.lang.Object.clone()
  - java.lang.Object.equals(java.lang.Object)
  - java.lang.Object.finalize()
  - java.lang.Object.getClass()
  - java.lang.Object.hashCode()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.toString()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
- uid: org.apache.hc.client5.http.impl.nio.PoolingAsyncClientConnectionManager.DEFAULT_MAX_CONNECTIONS_PER_ROUTE
  id: DEFAULT_MAX_CONNECTIONS_PER_ROUTE
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.apache.hc.client5.http.impl.nio.PoolingAsyncClientConnectionManager
  langs:
  - java
  name: DEFAULT_MAX_CONNECTIONS_PER_ROUTE
  nameWithType: PoolingAsyncClientConnectionManager.DEFAULT_MAX_CONNECTIONS_PER_ROUTE
  fullName: org.apache.hc.client5.http.impl.nio.PoolingAsyncClientConnectionManager.DEFAULT_MAX_CONNECTIONS_PER_ROUTE
  type: Field
  package: org.apache.hc.client5.http.impl.nio
  syntax:
    content: public static final int DEFAULT_MAX_CONNECTIONS_PER_ROUTE
    return:
      type: int
- uid: org.apache.hc.client5.http.impl.nio.PoolingAsyncClientConnectionManager.DEFAULT_MAX_TOTAL_CONNECTIONS
  id: DEFAULT_MAX_TOTAL_CONNECTIONS
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.apache.hc.client5.http.impl.nio.PoolingAsyncClientConnectionManager
  langs:
  - java
  name: DEFAULT_MAX_TOTAL_CONNECTIONS
  nameWithType: PoolingAsyncClientConnectionManager.DEFAULT_MAX_TOTAL_CONNECTIONS
  fullName: org.apache.hc.client5.http.impl.nio.PoolingAsyncClientConnectionManager.DEFAULT_MAX_TOTAL_CONNECTIONS
  type: Field
  package: org.apache.hc.client5.http.impl.nio
  syntax:
    content: public static final int DEFAULT_MAX_TOTAL_CONNECTIONS
    return:
      type: int
- uid: org.apache.hc.client5.http.impl.nio.PoolingAsyncClientConnectionManager.PoolingAsyncClientConnectionManager()
  id: PoolingAsyncClientConnectionManager()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.apache.hc.client5.http.impl.nio.PoolingAsyncClientConnectionManager
  langs:
  - java
  name: PoolingAsyncClientConnectionManager()
  nameWithType: PoolingAsyncClientConnectionManager.PoolingAsyncClientConnectionManager()
  fullName: org.apache.hc.client5.http.impl.nio.PoolingAsyncClientConnectionManager.PoolingAsyncClientConnectionManager()
  overload: org.apache.hc.client5.http.impl.nio.PoolingAsyncClientConnectionManager.PoolingAsyncClientConnectionManager*
  type: Constructor
  package: org.apache.hc.client5.http.impl.nio
  syntax:
    content: public PoolingAsyncClientConnectionManager()
- uid: org.apache.hc.client5.http.impl.nio.PoolingAsyncClientConnectionManager.PoolingAsyncClientConnectionManager(org.apache.hc.client5.http.nio.AsyncClientConnectionOperator,org.apache.hc.core5.pool.PoolConcurrencyPolicy,org.apache.hc.core5.pool.PoolReusePolicy,org.apache.hc.core5.util.TimeValue)
  id: PoolingAsyncClientConnectionManager(org.apache.hc.client5.http.nio.AsyncClientConnectionOperator,org.apache.hc.core5.pool.PoolConcurrencyPolicy,org.apache.hc.core5.pool.PoolReusePolicy,org.apache.hc.core5.util.TimeValue)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.apache.hc.client5.http.impl.nio.PoolingAsyncClientConnectionManager
  langs:
  - java
  name: PoolingAsyncClientConnectionManager(AsyncClientConnectionOperator connectionOperator, PoolConcurrencyPolicy poolConcurrencyPolicy, PoolReusePolicy poolReusePolicy, TimeValue timeToLive)
  nameWithType: PoolingAsyncClientConnectionManager.PoolingAsyncClientConnectionManager(AsyncClientConnectionOperator connectionOperator, PoolConcurrencyPolicy poolConcurrencyPolicy, PoolReusePolicy poolReusePolicy, TimeValue timeToLive)
  fullName: org.apache.hc.client5.http.impl.nio.PoolingAsyncClientConnectionManager.PoolingAsyncClientConnectionManager(AsyncClientConnectionOperator connectionOperator, PoolConcurrencyPolicy poolConcurrencyPolicy, PoolReusePolicy poolReusePolicy, TimeValue timeToLive)
  overload: org.apache.hc.client5.http.impl.nio.PoolingAsyncClientConnectionManager.PoolingAsyncClientConnectionManager*
  type: Constructor
  package: org.apache.hc.client5.http.impl.nio
  syntax:
    content: protected PoolingAsyncClientConnectionManager(AsyncClientConnectionOperator connectionOperator, PoolConcurrencyPolicy poolConcurrencyPolicy, PoolReusePolicy poolReusePolicy, TimeValue timeToLive)
    parameters:
    - id: connectionOperator
      type: org.apache.hc.client5.http.nio.AsyncClientConnectionOperator
    - id: poolConcurrencyPolicy
      type: org.apache.hc.core5.pool.PoolConcurrencyPolicy
    - id: poolReusePolicy
      type: org.apache.hc.core5.pool.PoolReusePolicy
    - id: timeToLive
      type: org.apache.hc.core5.util.TimeValue
- uid: org.apache.hc.client5.http.impl.nio.PoolingAsyncClientConnectionManager.PoolingAsyncClientConnectionManager(org.apache.hc.core5.http.config.Lookup<org.apache.hc.core5.http.nio.ssl.TlsStrategy>)
  id: PoolingAsyncClientConnectionManager(org.apache.hc.core5.http.config.Lookup<org.apache.hc.core5.http.nio.ssl.TlsStrategy>)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.apache.hc.client5.http.impl.nio.PoolingAsyncClientConnectionManager
  langs:
  - java
  name: PoolingAsyncClientConnectionManager(Lookup<TlsStrategy> tlsStrategyLookup)
  nameWithType: PoolingAsyncClientConnectionManager.PoolingAsyncClientConnectionManager(Lookup<TlsStrategy> tlsStrategyLookup)
  fullName: org.apache.hc.client5.http.impl.nio.PoolingAsyncClientConnectionManager.PoolingAsyncClientConnectionManager(Lookup<TlsStrategy> tlsStrategyLookup)
  overload: org.apache.hc.client5.http.impl.nio.PoolingAsyncClientConnectionManager.PoolingAsyncClientConnectionManager*
  type: Constructor
  package: org.apache.hc.client5.http.impl.nio
  syntax:
    content: public PoolingAsyncClientConnectionManager(Lookup<TlsStrategy> tlsStrategyLookup)
    parameters:
    - id: tlsStrategyLookup
      type: org.apache.hc.core5.http.config.Lookup<org.apache.hc.core5.http.nio.ssl.TlsStrategy>
- uid: org.apache.hc.client5.http.impl.nio.PoolingAsyncClientConnectionManager.PoolingAsyncClientConnectionManager(org.apache.hc.core5.http.config.Lookup<org.apache.hc.core5.http.nio.ssl.TlsStrategy>,org.apache.hc.core5.pool.PoolConcurrencyPolicy,org.apache.hc.core5.pool.PoolReusePolicy,org.apache.hc.core5.util.TimeValue)
  id: PoolingAsyncClientConnectionManager(org.apache.hc.core5.http.config.Lookup<org.apache.hc.core5.http.nio.ssl.TlsStrategy>,org.apache.hc.core5.pool.PoolConcurrencyPolicy,org.apache.hc.core5.pool.PoolReusePolicy,org.apache.hc.core5.util.TimeValue)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.apache.hc.client5.http.impl.nio.PoolingAsyncClientConnectionManager
  langs:
  - java
  name: PoolingAsyncClientConnectionManager(Lookup<TlsStrategy> tlsStrategyLookup, PoolConcurrencyPolicy poolConcurrencyPolicy, PoolReusePolicy poolReusePolicy, TimeValue timeToLive)
  nameWithType: PoolingAsyncClientConnectionManager.PoolingAsyncClientConnectionManager(Lookup<TlsStrategy> tlsStrategyLookup, PoolConcurrencyPolicy poolConcurrencyPolicy, PoolReusePolicy poolReusePolicy, TimeValue timeToLive)
  fullName: org.apache.hc.client5.http.impl.nio.PoolingAsyncClientConnectionManager.PoolingAsyncClientConnectionManager(Lookup<TlsStrategy> tlsStrategyLookup, PoolConcurrencyPolicy poolConcurrencyPolicy, PoolReusePolicy poolReusePolicy, TimeValue timeToLive)
  overload: org.apache.hc.client5.http.impl.nio.PoolingAsyncClientConnectionManager.PoolingAsyncClientConnectionManager*
  type: Constructor
  package: org.apache.hc.client5.http.impl.nio
  syntax:
    content: public PoolingAsyncClientConnectionManager(Lookup<TlsStrategy> tlsStrategyLookup, PoolConcurrencyPolicy poolConcurrencyPolicy, PoolReusePolicy poolReusePolicy, TimeValue timeToLive)
    parameters:
    - id: tlsStrategyLookup
      type: org.apache.hc.core5.http.config.Lookup<org.apache.hc.core5.http.nio.ssl.TlsStrategy>
    - id: poolConcurrencyPolicy
      type: org.apache.hc.core5.pool.PoolConcurrencyPolicy
    - id: poolReusePolicy
      type: org.apache.hc.core5.pool.PoolReusePolicy
    - id: timeToLive
      type: org.apache.hc.core5.util.TimeValue
- uid: org.apache.hc.client5.http.impl.nio.PoolingAsyncClientConnectionManager.PoolingAsyncClientConnectionManager(org.apache.hc.core5.http.config.Lookup<org.apache.hc.core5.http.nio.ssl.TlsStrategy>,org.apache.hc.core5.pool.PoolConcurrencyPolicy,org.apache.hc.core5.pool.PoolReusePolicy,org.apache.hc.core5.util.TimeValue,org.apache.hc.client5.http.SchemePortResolver,org.apache.hc.client5.http.DnsResolver)
  id: PoolingAsyncClientConnectionManager(org.apache.hc.core5.http.config.Lookup<org.apache.hc.core5.http.nio.ssl.TlsStrategy>,org.apache.hc.core5.pool.PoolConcurrencyPolicy,org.apache.hc.core5.pool.PoolReusePolicy,org.apache.hc.core5.util.TimeValue,org.apache.hc.client5.http.SchemePortResolver,org.apache.hc.client5.http.DnsResolver)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.apache.hc.client5.http.impl.nio.PoolingAsyncClientConnectionManager
  langs:
  - java
  name: PoolingAsyncClientConnectionManager(Lookup<TlsStrategy> tlsStrategyLookup, PoolConcurrencyPolicy poolConcurrencyPolicy, PoolReusePolicy poolReusePolicy, TimeValue timeToLive, SchemePortResolver schemePortResolver, DnsResolver dnsResolver)
  nameWithType: PoolingAsyncClientConnectionManager.PoolingAsyncClientConnectionManager(Lookup<TlsStrategy> tlsStrategyLookup, PoolConcurrencyPolicy poolConcurrencyPolicy, PoolReusePolicy poolReusePolicy, TimeValue timeToLive, SchemePortResolver schemePortResolver, DnsResolver dnsResolver)
  fullName: org.apache.hc.client5.http.impl.nio.PoolingAsyncClientConnectionManager.PoolingAsyncClientConnectionManager(Lookup<TlsStrategy> tlsStrategyLookup, PoolConcurrencyPolicy poolConcurrencyPolicy, PoolReusePolicy poolReusePolicy, TimeValue timeToLive, SchemePortResolver schemePortResolver, DnsResolver dnsResolver)
  overload: org.apache.hc.client5.http.impl.nio.PoolingAsyncClientConnectionManager.PoolingAsyncClientConnectionManager*
  type: Constructor
  package: org.apache.hc.client5.http.impl.nio
  syntax:
    content: public PoolingAsyncClientConnectionManager(Lookup<TlsStrategy> tlsStrategyLookup, PoolConcurrencyPolicy poolConcurrencyPolicy, PoolReusePolicy poolReusePolicy, TimeValue timeToLive, SchemePortResolver schemePortResolver, DnsResolver dnsResolver)
    parameters:
    - id: tlsStrategyLookup
      type: org.apache.hc.core5.http.config.Lookup<org.apache.hc.core5.http.nio.ssl.TlsStrategy>
    - id: poolConcurrencyPolicy
      type: org.apache.hc.core5.pool.PoolConcurrencyPolicy
    - id: poolReusePolicy
      type: org.apache.hc.core5.pool.PoolReusePolicy
    - id: timeToLive
      type: org.apache.hc.core5.util.TimeValue
    - id: schemePortResolver
      type: org.apache.hc.client5.http.SchemePortResolver
    - id: dnsResolver
      type: org.apache.hc.client5.http.DnsResolver
- uid: org.apache.hc.client5.http.impl.nio.PoolingAsyncClientConnectionManager.PoolingAsyncClientConnectionManager(org.apache.hc.core5.http.config.Lookup<org.apache.hc.core5.http.nio.ssl.TlsStrategy>,org.apache.hc.core5.pool.PoolConcurrencyPolicy,org.apache.hc.core5.util.TimeValue)
  id: PoolingAsyncClientConnectionManager(org.apache.hc.core5.http.config.Lookup<org.apache.hc.core5.http.nio.ssl.TlsStrategy>,org.apache.hc.core5.pool.PoolConcurrencyPolicy,org.apache.hc.core5.util.TimeValue)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.apache.hc.client5.http.impl.nio.PoolingAsyncClientConnectionManager
  langs:
  - java
  name: PoolingAsyncClientConnectionManager(Lookup<TlsStrategy> tlsStrategyLookup, PoolConcurrencyPolicy poolConcurrencyPolicy, TimeValue timeToLive)
  nameWithType: PoolingAsyncClientConnectionManager.PoolingAsyncClientConnectionManager(Lookup<TlsStrategy> tlsStrategyLookup, PoolConcurrencyPolicy poolConcurrencyPolicy, TimeValue timeToLive)
  fullName: org.apache.hc.client5.http.impl.nio.PoolingAsyncClientConnectionManager.PoolingAsyncClientConnectionManager(Lookup<TlsStrategy> tlsStrategyLookup, PoolConcurrencyPolicy poolConcurrencyPolicy, TimeValue timeToLive)
  overload: org.apache.hc.client5.http.impl.nio.PoolingAsyncClientConnectionManager.PoolingAsyncClientConnectionManager*
  type: Constructor
  package: org.apache.hc.client5.http.impl.nio
  syntax:
    content: public PoolingAsyncClientConnectionManager(Lookup<TlsStrategy> tlsStrategyLookup, PoolConcurrencyPolicy poolConcurrencyPolicy, TimeValue timeToLive)
    parameters:
    - id: tlsStrategyLookup
      type: org.apache.hc.core5.http.config.Lookup<org.apache.hc.core5.http.nio.ssl.TlsStrategy>
    - id: poolConcurrencyPolicy
      type: org.apache.hc.core5.pool.PoolConcurrencyPolicy
    - id: timeToLive
      type: org.apache.hc.core5.util.TimeValue
- uid: org.apache.hc.client5.http.impl.nio.PoolingAsyncClientConnectionManager.PoolingAsyncClientConnectionManager(org.apache.hc.core5.pool.ManagedConnPool<org.apache.hc.client5.http.HttpRoute,org.apache.hc.client5.http.nio.ManagedAsyncClientConnection>,org.apache.hc.client5.http.nio.AsyncClientConnectionOperator)
  id: PoolingAsyncClientConnectionManager(org.apache.hc.core5.pool.ManagedConnPool<org.apache.hc.client5.http.HttpRoute,org.apache.hc.client5.http.nio.ManagedAsyncClientConnection>,org.apache.hc.client5.http.nio.AsyncClientConnectionOperator)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.apache.hc.client5.http.impl.nio.PoolingAsyncClientConnectionManager
  langs:
  - java
  name: PoolingAsyncClientConnectionManager(ManagedConnPool<HttpRoute,ManagedAsyncClientConnection> pool, AsyncClientConnectionOperator connectionOperator)
  nameWithType: PoolingAsyncClientConnectionManager.PoolingAsyncClientConnectionManager(ManagedConnPool<HttpRoute,ManagedAsyncClientConnection> pool, AsyncClientConnectionOperator connectionOperator)
  fullName: org.apache.hc.client5.http.impl.nio.PoolingAsyncClientConnectionManager.PoolingAsyncClientConnectionManager(ManagedConnPool<HttpRoute,ManagedAsyncClientConnection> pool, AsyncClientConnectionOperator connectionOperator)
  overload: org.apache.hc.client5.http.impl.nio.PoolingAsyncClientConnectionManager.PoolingAsyncClientConnectionManager*
  type: Constructor
  package: org.apache.hc.client5.http.impl.nio
  syntax:
    content: protected PoolingAsyncClientConnectionManager(ManagedConnPool<HttpRoute,ManagedAsyncClientConnection> pool, AsyncClientConnectionOperator connectionOperator)
    parameters:
    - id: pool
      type: org.apache.hc.core5.pool.ManagedConnPool<org.apache.hc.client5.http.HttpRoute,org.apache.hc.client5.http.nio.ManagedAsyncClientConnection>
    - id: connectionOperator
      type: org.apache.hc.client5.http.nio.AsyncClientConnectionOperator
- uid: org.apache.hc.client5.http.impl.nio.PoolingAsyncClientConnectionManager.close()
  id: close()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.apache.hc.client5.http.impl.nio.PoolingAsyncClientConnectionManager
  langs:
  - java
  name: close()
  nameWithType: PoolingAsyncClientConnectionManager.close()
  fullName: org.apache.hc.client5.http.impl.nio.PoolingAsyncClientConnectionManager.close()
  overload: org.apache.hc.client5.http.impl.nio.PoolingAsyncClientConnectionManager.close*
  type: Method
  package: org.apache.hc.client5.http.impl.nio
  syntax:
    content: public void close()
- uid: org.apache.hc.client5.http.impl.nio.PoolingAsyncClientConnectionManager.close(org.apache.hc.core5.io.CloseMode)
  id: close(org.apache.hc.core5.io.CloseMode)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.apache.hc.client5.http.impl.nio.PoolingAsyncClientConnectionManager
  langs:
  - java
  name: close(CloseMode closeMode)
  nameWithType: PoolingAsyncClientConnectionManager.close(CloseMode closeMode)
  fullName: org.apache.hc.client5.http.impl.nio.PoolingAsyncClientConnectionManager.close(CloseMode closeMode)
  overload: org.apache.hc.client5.http.impl.nio.PoolingAsyncClientConnectionManager.close*
  type: Method
  package: org.apache.hc.client5.http.impl.nio
  summary: Closes this process or endpoint and releases any system resources associated with it. If the endpoint or the process is already closed then invoking this method has no effect.
  syntax:
    content: public void close(CloseMode closeMode)
    parameters:
    - id: closeMode
      type: org.apache.hc.core5.io.CloseMode
- uid: org.apache.hc.client5.http.impl.nio.PoolingAsyncClientConnectionManager.closeExpired()
  id: closeExpired()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.apache.hc.client5.http.impl.nio.PoolingAsyncClientConnectionManager
  langs:
  - java
  name: closeExpired()
  nameWithType: PoolingAsyncClientConnectionManager.closeExpired()
  fullName: org.apache.hc.client5.http.impl.nio.PoolingAsyncClientConnectionManager.closeExpired()
  overload: org.apache.hc.client5.http.impl.nio.PoolingAsyncClientConnectionManager.closeExpired*
  type: Method
  package: org.apache.hc.client5.http.impl.nio
  syntax:
    content: public void closeExpired()
- uid: org.apache.hc.client5.http.impl.nio.PoolingAsyncClientConnectionManager.closeIdle(org.apache.hc.core5.util.TimeValue)
  id: closeIdle(org.apache.hc.core5.util.TimeValue)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.apache.hc.client5.http.impl.nio.PoolingAsyncClientConnectionManager
  langs:
  - java
  name: closeIdle(TimeValue idletime)
  nameWithType: PoolingAsyncClientConnectionManager.closeIdle(TimeValue idletime)
  fullName: org.apache.hc.client5.http.impl.nio.PoolingAsyncClientConnectionManager.closeIdle(TimeValue idletime)
  overload: org.apache.hc.client5.http.impl.nio.PoolingAsyncClientConnectionManager.closeIdle*
  type: Method
  package: org.apache.hc.client5.http.impl.nio
  syntax:
    content: public void closeIdle(TimeValue idletime)
    parameters:
    - id: idletime
      type: org.apache.hc.core5.util.TimeValue
- uid: org.apache.hc.client5.http.impl.nio.PoolingAsyncClientConnectionManager.connect(org.apache.hc.client5.http.nio.AsyncConnectionEndpoint,org.apache.hc.core5.reactor.ConnectionInitiator,org.apache.hc.core5.util.Timeout,java.lang.Object,org.apache.hc.core5.http.protocol.HttpContext,org.apache.hc.core5.concurrent.FutureCallback<org.apache.hc.client5.http.nio.AsyncConnectionEndpoint>)
  id: connect(org.apache.hc.client5.http.nio.AsyncConnectionEndpoint,org.apache.hc.core5.reactor.ConnectionInitiator,org.apache.hc.core5.util.Timeout,java.lang.Object,org.apache.hc.core5.http.protocol.HttpContext,org.apache.hc.core5.concurrent.FutureCallback<org.apache.hc.client5.http.nio.AsyncConnectionEndpoint>)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.apache.hc.client5.http.impl.nio.PoolingAsyncClientConnectionManager
  langs:
  - java
  name: connect(AsyncConnectionEndpoint endpoint, ConnectionInitiator connectionInitiator, Timeout connectTimeout, Object attachment, HttpContext context, FutureCallback<AsyncConnectionEndpoint> callback)
  nameWithType: PoolingAsyncClientConnectionManager.connect(AsyncConnectionEndpoint endpoint, ConnectionInitiator connectionInitiator, Timeout connectTimeout, Object attachment, HttpContext context, FutureCallback<AsyncConnectionEndpoint> callback)
  fullName: org.apache.hc.client5.http.impl.nio.PoolingAsyncClientConnectionManager.connect(AsyncConnectionEndpoint endpoint, ConnectionInitiator connectionInitiator, Timeout connectTimeout, Object attachment, HttpContext context, FutureCallback<AsyncConnectionEndpoint> callback)
  overload: org.apache.hc.client5.http.impl.nio.PoolingAsyncClientConnectionManager.connect*
  type: Method
  package: org.apache.hc.client5.http.impl.nio
  summary: Connects the endpoint to the initial hop (connection target in case of a direct route or to the first proxy hop in case of a route via a proxy or multiple proxies).
  syntax:
    content: public Future<AsyncConnectionEndpoint> connect(AsyncConnectionEndpoint endpoint, ConnectionInitiator connectionInitiator, Timeout connectTimeout, Object attachment, HttpContext context, FutureCallback<AsyncConnectionEndpoint> callback)
    parameters:
    - id: endpoint
      type: org.apache.hc.client5.http.nio.AsyncConnectionEndpoint
    - id: connectionInitiator
      type: org.apache.hc.core5.reactor.ConnectionInitiator
    - id: connectTimeout
      type: org.apache.hc.core5.util.Timeout
    - id: attachment
      type: java.lang.Object
    - id: context
      type: org.apache.hc.core5.http.protocol.HttpContext
    - id: callback
      type: org.apache.hc.core5.concurrent.FutureCallback<org.apache.hc.client5.http.nio.AsyncConnectionEndpoint>
    return:
      type: java.util.concurrent.Future<org.apache.hc.client5.http.nio.AsyncConnectionEndpoint>
- uid: org.apache.hc.client5.http.impl.nio.PoolingAsyncClientConnectionManager.getDefaultMaxPerRoute()
  id: getDefaultMaxPerRoute()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.apache.hc.client5.http.impl.nio.PoolingAsyncClientConnectionManager
  langs:
  - java
  name: getDefaultMaxPerRoute()
  nameWithType: PoolingAsyncClientConnectionManager.getDefaultMaxPerRoute()
  fullName: org.apache.hc.client5.http.impl.nio.PoolingAsyncClientConnectionManager.getDefaultMaxPerRoute()
  overload: org.apache.hc.client5.http.impl.nio.PoolingAsyncClientConnectionManager.getDefaultMaxPerRoute*
  type: Method
  package: org.apache.hc.client5.http.impl.nio
  syntax:
    content: public int getDefaultMaxPerRoute()
    return:
      type: int
- uid: org.apache.hc.client5.http.impl.nio.PoolingAsyncClientConnectionManager.getMaxPerRoute(org.apache.hc.client5.http.HttpRoute)
  id: getMaxPerRoute(org.apache.hc.client5.http.HttpRoute)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.apache.hc.client5.http.impl.nio.PoolingAsyncClientConnectionManager
  langs:
  - java
  name: getMaxPerRoute(HttpRoute route)
  nameWithType: PoolingAsyncClientConnectionManager.getMaxPerRoute(HttpRoute route)
  fullName: org.apache.hc.client5.http.impl.nio.PoolingAsyncClientConnectionManager.getMaxPerRoute(HttpRoute route)
  overload: org.apache.hc.client5.http.impl.nio.PoolingAsyncClientConnectionManager.getMaxPerRoute*
  type: Method
  package: org.apache.hc.client5.http.impl.nio
  syntax:
    content: public int getMaxPerRoute(HttpRoute route)
    parameters:
    - id: route
      type: org.apache.hc.client5.http.HttpRoute
    return:
      type: int
- uid: org.apache.hc.client5.http.impl.nio.PoolingAsyncClientConnectionManager.getMaxTotal()
  id: getMaxTotal()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.apache.hc.client5.http.impl.nio.PoolingAsyncClientConnectionManager
  langs:
  - java
  name: getMaxTotal()
  nameWithType: PoolingAsyncClientConnectionManager.getMaxTotal()
  fullName: org.apache.hc.client5.http.impl.nio.PoolingAsyncClientConnectionManager.getMaxTotal()
  overload: org.apache.hc.client5.http.impl.nio.PoolingAsyncClientConnectionManager.getMaxTotal*
  type: Method
  package: org.apache.hc.client5.http.impl.nio
  syntax:
    content: public int getMaxTotal()
    return:
      type: int
- uid: org.apache.hc.client5.http.impl.nio.PoolingAsyncClientConnectionManager.getRoutes()
  id: getRoutes()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.apache.hc.client5.http.impl.nio.PoolingAsyncClientConnectionManager
  langs:
  - java
  name: getRoutes()
  nameWithType: PoolingAsyncClientConnectionManager.getRoutes()
  fullName: org.apache.hc.client5.http.impl.nio.PoolingAsyncClientConnectionManager.getRoutes()
  overload: org.apache.hc.client5.http.impl.nio.PoolingAsyncClientConnectionManager.getRoutes*
  type: Method
  package: org.apache.hc.client5.http.impl.nio
  syntax:
    content: public Set<HttpRoute> getRoutes()
    return:
      type: java.util.Set<org.apache.hc.client5.http.HttpRoute>
- uid: org.apache.hc.client5.http.impl.nio.PoolingAsyncClientConnectionManager.getStats(org.apache.hc.client5.http.HttpRoute)
  id: getStats(org.apache.hc.client5.http.HttpRoute)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.apache.hc.client5.http.impl.nio.PoolingAsyncClientConnectionManager
  langs:
  - java
  name: getStats(HttpRoute route)
  nameWithType: PoolingAsyncClientConnectionManager.getStats(HttpRoute route)
  fullName: org.apache.hc.client5.http.impl.nio.PoolingAsyncClientConnectionManager.getStats(HttpRoute route)
  overload: org.apache.hc.client5.http.impl.nio.PoolingAsyncClientConnectionManager.getStats*
  type: Method
  package: org.apache.hc.client5.http.impl.nio
  syntax:
    content: public PoolStats getStats(HttpRoute route)
    parameters:
    - id: route
      type: org.apache.hc.client5.http.HttpRoute
    return:
      type: org.apache.hc.core5.pool.PoolStats
- uid: org.apache.hc.client5.http.impl.nio.PoolingAsyncClientConnectionManager.getTotalStats()
  id: getTotalStats()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.apache.hc.client5.http.impl.nio.PoolingAsyncClientConnectionManager
  langs:
  - java
  name: getTotalStats()
  nameWithType: PoolingAsyncClientConnectionManager.getTotalStats()
  fullName: org.apache.hc.client5.http.impl.nio.PoolingAsyncClientConnectionManager.getTotalStats()
  overload: org.apache.hc.client5.http.impl.nio.PoolingAsyncClientConnectionManager.getTotalStats*
  type: Method
  package: org.apache.hc.client5.http.impl.nio
  syntax:
    content: public PoolStats getTotalStats()
    return:
      type: org.apache.hc.core5.pool.PoolStats
- uid: org.apache.hc.client5.http.impl.nio.PoolingAsyncClientConnectionManager.getValidateAfterInactivity()
  id: getValidateAfterInactivity()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.apache.hc.client5.http.impl.nio.PoolingAsyncClientConnectionManager
  langs:
  - java
  name: getValidateAfterInactivity()
  nameWithType: PoolingAsyncClientConnectionManager.getValidateAfterInactivity()
  fullName: org.apache.hc.client5.http.impl.nio.PoolingAsyncClientConnectionManager.getValidateAfterInactivity()
  overload: org.apache.hc.client5.http.impl.nio.PoolingAsyncClientConnectionManager.getValidateAfterInactivity*
  type: Method
  package: org.apache.hc.client5.http.impl.nio
  syntax:
    content: public TimeValue getValidateAfterInactivity()
    return:
      type: org.apache.hc.core5.util.TimeValue
- uid: org.apache.hc.client5.http.impl.nio.PoolingAsyncClientConnectionManager.lease(java.lang.String,org.apache.hc.client5.http.HttpRoute,java.lang.Object,org.apache.hc.core5.util.Timeout,org.apache.hc.core5.concurrent.FutureCallback<org.apache.hc.client5.http.nio.AsyncConnectionEndpoint>)
  id: lease(java.lang.String,org.apache.hc.client5.http.HttpRoute,java.lang.Object,org.apache.hc.core5.util.Timeout,org.apache.hc.core5.concurrent.FutureCallback<org.apache.hc.client5.http.nio.AsyncConnectionEndpoint>)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.apache.hc.client5.http.impl.nio.PoolingAsyncClientConnectionManager
  langs:
  - java
  name: lease(String id, HttpRoute route, Object state, Timeout requestTimeout, FutureCallback<AsyncConnectionEndpoint> callback)
  nameWithType: PoolingAsyncClientConnectionManager.lease(String id, HttpRoute route, Object state, Timeout requestTimeout, FutureCallback<AsyncConnectionEndpoint> callback)
  fullName: org.apache.hc.client5.http.impl.nio.PoolingAsyncClientConnectionManager.lease(String id, HttpRoute route, Object state, Timeout requestTimeout, FutureCallback<AsyncConnectionEndpoint> callback)
  overload: org.apache.hc.client5.http.impl.nio.PoolingAsyncClientConnectionManager.lease*
  type: Method
  package: org.apache.hc.client5.http.impl.nio
  summary: >-
    Returns a <xref uid="java.util.concurrent.Future" data-throw-if-not-resolved="false">Future</xref> object which can be used to obtain an <xref uid="org.apache.hc.client5.http.nio.AsyncConnectionEndpoint" data-throw-if-not-resolved="false">AsyncConnectionEndpoint</xref> or to cancel the request by calling <xref uid="java.util.concurrent.Future.cancel*" data-throw-if-not-resolved="false">Future#cancel(boolean)</xref>.


    Please note that newly allocated endpoints can be leased <xref uid="org.apache.hc.client5.http.nio.AsyncConnectionEndpoint.isConnected()" data-throw-if-not-resolved="false">disconnected</xref>. The consumer of the endpoint is responsible for fully establishing the route to the endpoint target by calling <xref uid="#connect(AsyncConnectionEndpoint,
     ConnectionInitiator, Timeout, Object, HttpContext, FutureCallback)" data-throw-if-not-resolved="false">#connect(AsyncConnectionEndpoint,
     ConnectionInitiator, Timeout, Object, HttpContext, FutureCallback)</xref> in order to connect directly to the target or to the first proxy hop, and optionally calling <xref uid="org.apache.hc.client5.http.impl.nio.PoolingAsyncClientConnectionManager.upgrade(org.apache.hc.client5.http.nio.AsyncConnectionEndpoint,java.lang.Object,org.apache.hc.core5.http.protocol.HttpContext)" data-throw-if-not-resolved="false">#upgrade(AsyncConnectionEndpoint, Object, HttpContext)</xref> method to upgrade the underlying transport to Transport Layer Security after having executed a `CONNECT` method to all intermediate proxy hops.
  syntax:
    content: public Future<AsyncConnectionEndpoint> lease(String id, HttpRoute route, Object state, Timeout requestTimeout, FutureCallback<AsyncConnectionEndpoint> callback)
    parameters:
    - id: id
      type: java.lang.String
    - id: route
      type: org.apache.hc.client5.http.HttpRoute
    - id: state
      type: java.lang.Object
    - id: requestTimeout
      type: org.apache.hc.core5.util.Timeout
    - id: callback
      type: org.apache.hc.core5.concurrent.FutureCallback<org.apache.hc.client5.http.nio.AsyncConnectionEndpoint>
    return:
      type: java.util.concurrent.Future<org.apache.hc.client5.http.nio.AsyncConnectionEndpoint>
- uid: org.apache.hc.client5.http.impl.nio.PoolingAsyncClientConnectionManager.release(org.apache.hc.client5.http.nio.AsyncConnectionEndpoint,java.lang.Object,org.apache.hc.core5.util.TimeValue)
  id: release(org.apache.hc.client5.http.nio.AsyncConnectionEndpoint,java.lang.Object,org.apache.hc.core5.util.TimeValue)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.apache.hc.client5.http.impl.nio.PoolingAsyncClientConnectionManager
  langs:
  - java
  name: release(AsyncConnectionEndpoint endpoint, Object state, TimeValue keepAlive)
  nameWithType: PoolingAsyncClientConnectionManager.release(AsyncConnectionEndpoint endpoint, Object state, TimeValue keepAlive)
  fullName: org.apache.hc.client5.http.impl.nio.PoolingAsyncClientConnectionManager.release(AsyncConnectionEndpoint endpoint, Object state, TimeValue keepAlive)
  overload: org.apache.hc.client5.http.impl.nio.PoolingAsyncClientConnectionManager.release*
  type: Method
  package: org.apache.hc.client5.http.impl.nio
  summary: Releases the endpoint back to the manager making it potentially re-usable by other consumers. Optionally, the maximum period of how long the manager should keep the connection alive can be defined using `validDuration` and `timeUnit` parameters.
  syntax:
    content: public void release(AsyncConnectionEndpoint endpoint, Object state, TimeValue keepAlive)
    parameters:
    - id: endpoint
      type: org.apache.hc.client5.http.nio.AsyncConnectionEndpoint
    - id: state
      type: java.lang.Object
    - id: keepAlive
      type: org.apache.hc.core5.util.TimeValue
- uid: org.apache.hc.client5.http.impl.nio.PoolingAsyncClientConnectionManager.setDefaultMaxPerRoute(int)
  id: setDefaultMaxPerRoute(int)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.apache.hc.client5.http.impl.nio.PoolingAsyncClientConnectionManager
  langs:
  - java
  name: setDefaultMaxPerRoute(int max)
  nameWithType: PoolingAsyncClientConnectionManager.setDefaultMaxPerRoute(int max)
  fullName: org.apache.hc.client5.http.impl.nio.PoolingAsyncClientConnectionManager.setDefaultMaxPerRoute(int max)
  overload: org.apache.hc.client5.http.impl.nio.PoolingAsyncClientConnectionManager.setDefaultMaxPerRoute*
  type: Method
  package: org.apache.hc.client5.http.impl.nio
  syntax:
    content: public void setDefaultMaxPerRoute(int max)
    parameters:
    - id: max
      type: int
- uid: org.apache.hc.client5.http.impl.nio.PoolingAsyncClientConnectionManager.setMaxPerRoute(org.apache.hc.client5.http.HttpRoute,int)
  id: setMaxPerRoute(org.apache.hc.client5.http.HttpRoute,int)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.apache.hc.client5.http.impl.nio.PoolingAsyncClientConnectionManager
  langs:
  - java
  name: setMaxPerRoute(HttpRoute route, int max)
  nameWithType: PoolingAsyncClientConnectionManager.setMaxPerRoute(HttpRoute route, int max)
  fullName: org.apache.hc.client5.http.impl.nio.PoolingAsyncClientConnectionManager.setMaxPerRoute(HttpRoute route, int max)
  overload: org.apache.hc.client5.http.impl.nio.PoolingAsyncClientConnectionManager.setMaxPerRoute*
  type: Method
  package: org.apache.hc.client5.http.impl.nio
  syntax:
    content: public void setMaxPerRoute(HttpRoute route, int max)
    parameters:
    - id: route
      type: org.apache.hc.client5.http.HttpRoute
    - id: max
      type: int
- uid: org.apache.hc.client5.http.impl.nio.PoolingAsyncClientConnectionManager.setMaxTotal(int)
  id: setMaxTotal(int)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.apache.hc.client5.http.impl.nio.PoolingAsyncClientConnectionManager
  langs:
  - java
  name: setMaxTotal(int max)
  nameWithType: PoolingAsyncClientConnectionManager.setMaxTotal(int max)
  fullName: org.apache.hc.client5.http.impl.nio.PoolingAsyncClientConnectionManager.setMaxTotal(int max)
  overload: org.apache.hc.client5.http.impl.nio.PoolingAsyncClientConnectionManager.setMaxTotal*
  type: Method
  package: org.apache.hc.client5.http.impl.nio
  syntax:
    content: public void setMaxTotal(int max)
    parameters:
    - id: max
      type: int
- uid: org.apache.hc.client5.http.impl.nio.PoolingAsyncClientConnectionManager.setValidateAfterInactivity(org.apache.hc.core5.util.TimeValue)
  id: setValidateAfterInactivity(org.apache.hc.core5.util.TimeValue)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.apache.hc.client5.http.impl.nio.PoolingAsyncClientConnectionManager
  langs:
  - java
  name: setValidateAfterInactivity(TimeValue validateAfterInactivity)
  nameWithType: PoolingAsyncClientConnectionManager.setValidateAfterInactivity(TimeValue validateAfterInactivity)
  fullName: org.apache.hc.client5.http.impl.nio.PoolingAsyncClientConnectionManager.setValidateAfterInactivity(TimeValue validateAfterInactivity)
  overload: org.apache.hc.client5.http.impl.nio.PoolingAsyncClientConnectionManager.setValidateAfterInactivity*
  type: Method
  package: org.apache.hc.client5.http.impl.nio
  summary: >-
    Defines period of inactivity after which persistent connections must be re-validated prior to being <xref uid="#lease(String, HttpRoute, Object, Timeout,
     FutureCallback)" data-throw-if-not-resolved="false">#lease(String, HttpRoute, Object, Timeout,
     FutureCallback)</xref> leased\} to the consumer. Negative values passed to this method disable connection validation. This check helps detect connections that have become stale (half-closed) while kept inactive in the pool.
  syntax:
    content: public void setValidateAfterInactivity(TimeValue validateAfterInactivity)
    parameters:
    - id: validateAfterInactivity
      type: org.apache.hc.core5.util.TimeValue
- uid: org.apache.hc.client5.http.impl.nio.PoolingAsyncClientConnectionManager.upgrade(org.apache.hc.client5.http.nio.AsyncConnectionEndpoint,java.lang.Object,org.apache.hc.core5.http.protocol.HttpContext)
  id: upgrade(org.apache.hc.client5.http.nio.AsyncConnectionEndpoint,java.lang.Object,org.apache.hc.core5.http.protocol.HttpContext)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.apache.hc.client5.http.impl.nio.PoolingAsyncClientConnectionManager
  langs:
  - java
  name: upgrade(AsyncConnectionEndpoint endpoint, Object attachment, HttpContext context)
  nameWithType: PoolingAsyncClientConnectionManager.upgrade(AsyncConnectionEndpoint endpoint, Object attachment, HttpContext context)
  fullName: org.apache.hc.client5.http.impl.nio.PoolingAsyncClientConnectionManager.upgrade(AsyncConnectionEndpoint endpoint, Object attachment, HttpContext context)
  overload: org.apache.hc.client5.http.impl.nio.PoolingAsyncClientConnectionManager.upgrade*
  type: Method
  package: org.apache.hc.client5.http.impl.nio
  summary: Upgrades transport security of the given endpoint by using the TLS security protocol.
  syntax:
    content: public void upgrade(AsyncConnectionEndpoint endpoint, Object attachment, HttpContext context)
    parameters:
    - id: endpoint
      type: org.apache.hc.client5.http.nio.AsyncConnectionEndpoint
    - id: attachment
      type: java.lang.Object
    - id: context
      type: org.apache.hc.core5.http.protocol.HttpContext
references:
- uid: org.apache.hc.client5.http.impl.nio.PoolingAsyncClientConnectionManager.PoolingAsyncClientConnectionManager*
  name: PoolingAsyncClientConnectionManager
  nameWithType: PoolingAsyncClientConnectionManager.PoolingAsyncClientConnectionManager
  fullName: org.apache.hc.client5.http.impl.nio.PoolingAsyncClientConnectionManager.PoolingAsyncClientConnectionManager
  package: org.apache.hc.client5.http.impl.nio
- uid: org.apache.hc.core5.http.config.Lookup<org.apache.hc.core5.http.nio.ssl.TlsStrategy>
  spec.java:
  - uid: org.apache.hc.core5.http.config.Lookup
    name: Lookup
    fullName: org.apache.hc.core5.http.config.Lookup
  - name: <
    fullName: <
  - uid: org.apache.hc.core5.http.nio.ssl.TlsStrategy
    name: TlsStrategy
    fullName: org.apache.hc.core5.http.nio.ssl.TlsStrategy
  - name: '>'
    fullName: '>'
- uid: org.apache.hc.core5.pool.PoolConcurrencyPolicy
  name: PoolConcurrencyPolicy
  nameWithType: PoolConcurrencyPolicy
  fullName: org.apache.hc.core5.pool.PoolConcurrencyPolicy
- uid: org.apache.hc.core5.util.TimeValue
  name: TimeValue
  nameWithType: TimeValue
  fullName: org.apache.hc.core5.util.TimeValue
- uid: org.apache.hc.core5.pool.PoolReusePolicy
  name: PoolReusePolicy
  nameWithType: PoolReusePolicy
  fullName: org.apache.hc.core5.pool.PoolReusePolicy
- uid: org.apache.hc.client5.http.SchemePortResolver
  name: SchemePortResolver
  nameWithType: SchemePortResolver
  fullName: org.apache.hc.client5.http.SchemePortResolver
- uid: org.apache.hc.client5.http.DnsResolver
  name: DnsResolver
  nameWithType: DnsResolver
  fullName: org.apache.hc.client5.http.DnsResolver
- uid: org.apache.hc.client5.http.nio.AsyncClientConnectionOperator
  name: AsyncClientConnectionOperator
  nameWithType: AsyncClientConnectionOperator
  fullName: org.apache.hc.client5.http.nio.AsyncClientConnectionOperator
- uid: org.apache.hc.core5.pool.ManagedConnPool<org.apache.hc.client5.http.HttpRoute,org.apache.hc.client5.http.nio.ManagedAsyncClientConnection>
  spec.java:
  - uid: org.apache.hc.core5.pool.ManagedConnPool
    name: ManagedConnPool
    fullName: org.apache.hc.core5.pool.ManagedConnPool
  - name: <
    fullName: <
  - uid: org.apache.hc.client5.http.HttpRoute
    name: HttpRoute
    fullName: org.apache.hc.client5.http.HttpRoute
  - name: ','
    fullName: ','
  - uid: org.apache.hc.client5.http.nio.ManagedAsyncClientConnection
    name: ManagedAsyncClientConnection
    fullName: org.apache.hc.client5.http.nio.ManagedAsyncClientConnection
  - name: '>'
    fullName: '>'
- uid: org.apache.hc.client5.http.impl.nio.PoolingAsyncClientConnectionManager.close*
  name: close
  nameWithType: PoolingAsyncClientConnectionManager.close
  fullName: org.apache.hc.client5.http.impl.nio.PoolingAsyncClientConnectionManager.close
  package: org.apache.hc.client5.http.impl.nio
- uid: org.apache.hc.core5.io.CloseMode
  name: CloseMode
  nameWithType: CloseMode
  fullName: org.apache.hc.core5.io.CloseMode
- uid: java.lang.String
  spec.java:
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
- uid: org.apache.hc.client5.http.HttpRoute
  name: HttpRoute
  nameWithType: HttpRoute
  fullName: org.apache.hc.client5.http.HttpRoute
- uid: java.lang.Object
  spec.java:
  - uid: java.lang.Object
    name: Object
    fullName: java.lang.Object
- uid: org.apache.hc.core5.util.Timeout
  name: Timeout
  nameWithType: Timeout
  fullName: org.apache.hc.core5.util.Timeout
- uid: org.apache.hc.core5.concurrent.FutureCallback<org.apache.hc.client5.http.nio.AsyncConnectionEndpoint>
  spec.java:
  - uid: org.apache.hc.core5.concurrent.FutureCallback
    name: FutureCallback
    fullName: org.apache.hc.core5.concurrent.FutureCallback
  - name: <
    fullName: <
  - uid: org.apache.hc.client5.http.nio.AsyncConnectionEndpoint
    name: AsyncConnectionEndpoint
    fullName: org.apache.hc.client5.http.nio.AsyncConnectionEndpoint
  - name: '>'
    fullName: '>'
- uid: java.util.concurrent.Future<org.apache.hc.client5.http.nio.AsyncConnectionEndpoint>
  spec.java:
  - uid: java.util.concurrent.Future
    name: Future
    fullName: java.util.concurrent.Future
  - name: <
    fullName: <
  - uid: org.apache.hc.client5.http.nio.AsyncConnectionEndpoint
    name: AsyncConnectionEndpoint
    fullName: org.apache.hc.client5.http.nio.AsyncConnectionEndpoint
  - name: '>'
    fullName: '>'
- uid: org.apache.hc.client5.http.impl.nio.PoolingAsyncClientConnectionManager.lease*
  name: lease
  nameWithType: PoolingAsyncClientConnectionManager.lease
  fullName: org.apache.hc.client5.http.impl.nio.PoolingAsyncClientConnectionManager.lease
  package: org.apache.hc.client5.http.impl.nio
- uid: org.apache.hc.client5.http.nio.AsyncConnectionEndpoint
  name: AsyncConnectionEndpoint
  nameWithType: AsyncConnectionEndpoint
  fullName: org.apache.hc.client5.http.nio.AsyncConnectionEndpoint
- uid: org.apache.hc.client5.http.impl.nio.PoolingAsyncClientConnectionManager.release*
  name: release
  nameWithType: PoolingAsyncClientConnectionManager.release
  fullName: org.apache.hc.client5.http.impl.nio.PoolingAsyncClientConnectionManager.release
  package: org.apache.hc.client5.http.impl.nio
- uid: org.apache.hc.core5.reactor.ConnectionInitiator
  name: ConnectionInitiator
  nameWithType: ConnectionInitiator
  fullName: org.apache.hc.core5.reactor.ConnectionInitiator
- uid: org.apache.hc.core5.http.protocol.HttpContext
  name: HttpContext
  nameWithType: HttpContext
  fullName: org.apache.hc.core5.http.protocol.HttpContext
- uid: org.apache.hc.client5.http.impl.nio.PoolingAsyncClientConnectionManager.connect*
  name: connect
  nameWithType: PoolingAsyncClientConnectionManager.connect
  fullName: org.apache.hc.client5.http.impl.nio.PoolingAsyncClientConnectionManager.connect
  package: org.apache.hc.client5.http.impl.nio
- uid: org.apache.hc.client5.http.impl.nio.PoolingAsyncClientConnectionManager.upgrade*
  name: upgrade
  nameWithType: PoolingAsyncClientConnectionManager.upgrade
  fullName: org.apache.hc.client5.http.impl.nio.PoolingAsyncClientConnectionManager.upgrade
  package: org.apache.hc.client5.http.impl.nio
- uid: java.util.Set<org.apache.hc.client5.http.HttpRoute>
  spec.java:
  - uid: java.util.Set
    name: Set
    fullName: java.util.Set
  - name: <
    fullName: <
  - uid: org.apache.hc.client5.http.HttpRoute
    name: HttpRoute
    fullName: org.apache.hc.client5.http.HttpRoute
  - name: '>'
    fullName: '>'
- uid: org.apache.hc.client5.http.impl.nio.PoolingAsyncClientConnectionManager.getRoutes*
  name: getRoutes
  nameWithType: PoolingAsyncClientConnectionManager.getRoutes
  fullName: org.apache.hc.client5.http.impl.nio.PoolingAsyncClientConnectionManager.getRoutes
  package: org.apache.hc.client5.http.impl.nio
- uid: int
  spec.java:
  - uid: int
    name: int
    fullName: int
- uid: org.apache.hc.client5.http.impl.nio.PoolingAsyncClientConnectionManager.setMaxTotal*
  name: setMaxTotal
  nameWithType: PoolingAsyncClientConnectionManager.setMaxTotal
  fullName: org.apache.hc.client5.http.impl.nio.PoolingAsyncClientConnectionManager.setMaxTotal
  package: org.apache.hc.client5.http.impl.nio
- uid: org.apache.hc.client5.http.impl.nio.PoolingAsyncClientConnectionManager.getMaxTotal*
  name: getMaxTotal
  nameWithType: PoolingAsyncClientConnectionManager.getMaxTotal
  fullName: org.apache.hc.client5.http.impl.nio.PoolingAsyncClientConnectionManager.getMaxTotal
  package: org.apache.hc.client5.http.impl.nio
- uid: org.apache.hc.client5.http.impl.nio.PoolingAsyncClientConnectionManager.setDefaultMaxPerRoute*
  name: setDefaultMaxPerRoute
  nameWithType: PoolingAsyncClientConnectionManager.setDefaultMaxPerRoute
  fullName: org.apache.hc.client5.http.impl.nio.PoolingAsyncClientConnectionManager.setDefaultMaxPerRoute
  package: org.apache.hc.client5.http.impl.nio
- uid: org.apache.hc.client5.http.impl.nio.PoolingAsyncClientConnectionManager.getDefaultMaxPerRoute*
  name: getDefaultMaxPerRoute
  nameWithType: PoolingAsyncClientConnectionManager.getDefaultMaxPerRoute
  fullName: org.apache.hc.client5.http.impl.nio.PoolingAsyncClientConnectionManager.getDefaultMaxPerRoute
  package: org.apache.hc.client5.http.impl.nio
- uid: org.apache.hc.client5.http.impl.nio.PoolingAsyncClientConnectionManager.setMaxPerRoute*
  name: setMaxPerRoute
  nameWithType: PoolingAsyncClientConnectionManager.setMaxPerRoute
  fullName: org.apache.hc.client5.http.impl.nio.PoolingAsyncClientConnectionManager.setMaxPerRoute
  package: org.apache.hc.client5.http.impl.nio
- uid: org.apache.hc.client5.http.impl.nio.PoolingAsyncClientConnectionManager.getMaxPerRoute*
  name: getMaxPerRoute
  nameWithType: PoolingAsyncClientConnectionManager.getMaxPerRoute
  fullName: org.apache.hc.client5.http.impl.nio.PoolingAsyncClientConnectionManager.getMaxPerRoute
  package: org.apache.hc.client5.http.impl.nio
- uid: org.apache.hc.client5.http.impl.nio.PoolingAsyncClientConnectionManager.closeIdle*
  name: closeIdle
  nameWithType: PoolingAsyncClientConnectionManager.closeIdle
  fullName: org.apache.hc.client5.http.impl.nio.PoolingAsyncClientConnectionManager.closeIdle
  package: org.apache.hc.client5.http.impl.nio
- uid: org.apache.hc.client5.http.impl.nio.PoolingAsyncClientConnectionManager.closeExpired*
  name: closeExpired
  nameWithType: PoolingAsyncClientConnectionManager.closeExpired
  fullName: org.apache.hc.client5.http.impl.nio.PoolingAsyncClientConnectionManager.closeExpired
  package: org.apache.hc.client5.http.impl.nio
- uid: org.apache.hc.core5.pool.PoolStats
  name: PoolStats
  nameWithType: PoolStats
  fullName: org.apache.hc.core5.pool.PoolStats
- uid: org.apache.hc.client5.http.impl.nio.PoolingAsyncClientConnectionManager.getTotalStats*
  name: getTotalStats
  nameWithType: PoolingAsyncClientConnectionManager.getTotalStats
  fullName: org.apache.hc.client5.http.impl.nio.PoolingAsyncClientConnectionManager.getTotalStats
  package: org.apache.hc.client5.http.impl.nio
- uid: org.apache.hc.client5.http.impl.nio.PoolingAsyncClientConnectionManager.getStats*
  name: getStats
  nameWithType: PoolingAsyncClientConnectionManager.getStats
  fullName: org.apache.hc.client5.http.impl.nio.PoolingAsyncClientConnectionManager.getStats
  package: org.apache.hc.client5.http.impl.nio
- uid: org.apache.hc.client5.http.impl.nio.PoolingAsyncClientConnectionManager.getValidateAfterInactivity*
  name: getValidateAfterInactivity
  nameWithType: PoolingAsyncClientConnectionManager.getValidateAfterInactivity
  fullName: org.apache.hc.client5.http.impl.nio.PoolingAsyncClientConnectionManager.getValidateAfterInactivity
  package: org.apache.hc.client5.http.impl.nio
- uid: org.apache.hc.client5.http.impl.nio.PoolingAsyncClientConnectionManager.setValidateAfterInactivity*
  name: setValidateAfterInactivity
  nameWithType: PoolingAsyncClientConnectionManager.setValidateAfterInactivity
  fullName: org.apache.hc.client5.http.impl.nio.PoolingAsyncClientConnectionManager.setValidateAfterInactivity
  package: org.apache.hc.client5.http.impl.nio
- uid: org.apache.hc.core5.pool.ConnPoolControl<org.apache.hc.client5.http.HttpRoute>
  name: ConnPoolControl<HttpRoute>
  nameWithType: ConnPoolControl<HttpRoute>
  fullName: org.apache.hc.core5.pool.ConnPoolControl<org.apache.hc.client5.http.HttpRoute>
- uid: org.apache.hc.client5.http.nio.AsyncClientConnectionManager
  name: AsyncClientConnectionManager
  nameWithType: AsyncClientConnectionManager
  fullName: org.apache.hc.client5.http.nio.AsyncClientConnectionManager
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: java.lang.Object.finalize()
  name: Object.finalize()
  nameWithType: Object.finalize()
  fullName: java.lang.Object.finalize()
- uid: java.lang.Object.clone()
  name: Object.clone()
  nameWithType: Object.clone()
  fullName: java.lang.Object.clone()
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: java.lang.Object.equals(java.lang.Object)
  name: Object.equals(Object)
  nameWithType: Object.equals(Object)
  fullName: java.lang.Object.equals(java.lang.Object)
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.lang.Object.hashCode()
  name: Object.hashCode()
  nameWithType: Object.hashCode()
  fullName: java.lang.Object.hashCode()
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: java.lang.Object.toString()
  name: Object.toString()
  nameWithType: Object.toString()
  fullName: java.lang.Object.toString()
- uid: org.apache.hc.core5.http.config.Lookup
  name: Lookup
  nameWithType: Lookup
  fullName: org.apache.hc.core5.http.config.Lookup
- uid: org.apache.hc.core5.http.nio.ssl.TlsStrategy
  name: TlsStrategy
  nameWithType: TlsStrategy
  fullName: org.apache.hc.core5.http.nio.ssl.TlsStrategy
- uid: org.apache.hc.client5.http.HttpRoute,org.apache.hc.client5.http.nio.ManagedAsyncClientConnection
  name: HttpRoute,ManagedAsyncClientConnection
  nameWithType: HttpRoute,ManagedAsyncClientConnection
  fullName: org.apache.hc.client5.http.HttpRoute,org.apache.hc.client5.http.nio.ManagedAsyncClientConnection
- uid: org.apache.hc.core5.pool.ManagedConnPool
  name: ManagedConnPool
  nameWithType: ManagedConnPool
  fullName: org.apache.hc.core5.pool.ManagedConnPool
- uid: org.apache.hc.core5.concurrent.FutureCallback
  name: FutureCallback
  nameWithType: FutureCallback
  fullName: org.apache.hc.core5.concurrent.FutureCallback
- uid: java.util.concurrent.Future
  name: Future
  nameWithType: Future
  fullName: java.util.concurrent.Future
- uid: java.util.Set
  name: Set
  nameWithType: Set
  fullName: java.util.Set
- uid: org.apache.hc.core5.pool.ConnPoolControl
  name: ConnPoolControl
  nameWithType: ConnPoolControl
  fullName: org.apache.hc.core5.pool.ConnPoolControl
