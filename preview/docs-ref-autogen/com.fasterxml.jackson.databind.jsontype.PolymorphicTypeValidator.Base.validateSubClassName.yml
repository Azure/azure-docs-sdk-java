### YamlMime:JavaMember
uid: "com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator.Base.validateSubClassName*"
fullName: "com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator.Base.validateSubClassName"
name: "validateSubClassName"
nameWithType: "PolymorphicTypeValidator.Base.validateSubClassName"
members:
- uid: "com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator.Base.validateSubClassName(com.fasterxml.jackson.databind.cfg.MapperConfig<?>,com.fasterxml.jackson.databind.JavaType,java.lang.String)"
  fullName: "com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator.Base.validateSubClassName(MapperConfig<?> config, JavaType baseType, String subClassName)"
  name: "validateSubClassName(MapperConfig<?> config, JavaType baseType, String subClassName)"
  nameWithType: "PolymorphicTypeValidator.Base.validateSubClassName(MapperConfig<?> config, JavaType baseType, String subClassName)"
  summary: "Method called after intended class name for subtype has been read (and in case of minimal class name, expanded to fully-qualified class name) but before attempt is made to look up actual <xref uid=\"java.lang.Class\" data-throw-if-not-resolved=\"false\" data-raw-source=\"java.lang.Class\"></xref> or <xref uid=\"com.fasterxml.jackson.databind.JavaType\" data-throw-if-not-resolved=\"false\" data-raw-source=\"JavaType\"></xref>. Validator may be able to determine validity of eventual type (and return <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Validity#ALLOWED\"></xref> or <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Validity#DENIED\"></xref>) or, if not able to, can defer validation to actual resolved type by returning <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Validity#INDETERMINATE\"></xref>.\n\nValidator may also choose to indicate denial by throwing a <xref uid=\"com.fasterxml.jackson.databind.JsonMappingException\" data-throw-if-not-resolved=\"false\" data-raw-source=\"JsonMappingException\"></xref> (such as <xref uid=\"com.fasterxml.jackson.databind.exc.InvalidTypeIdException\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.fasterxml.jackson.databind.exc.InvalidTypeIdException\"></xref>)"
  overridden: "com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator.validateSubClassName(com.fasterxml.jackson.databind.cfg.MapperConfig<?>,com.fasterxml.jackson.databind.JavaType,java.lang.String)"
  parameters:
  - name: "config"
    type: "<xref href=\"com.fasterxml.jackson.databind.cfg.MapperConfig?alt=com.fasterxml.jackson.databind.cfg.MapperConfig&text=MapperConfig\" data-throw-if-not-resolved=\"False\" />&lt;?&gt;"
  - name: "baseType"
    type: "<xref href=\"com.fasterxml.jackson.databind.JavaType?alt=com.fasterxml.jackson.databind.JavaType&text=JavaType\" data-throw-if-not-resolved=\"False\" />"
  - name: "subClassName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PolymorphicTypeValidator.Validity validateSubClassName(MapperConfig<?> config, JavaType baseType, String subClassName)"
  exceptions:
  - type: "<xref href=\"com.fasterxml.jackson.databind.JsonMappingException?alt=com.fasterxml.jackson.databind.JsonMappingException&text=JsonMappingException\" data-throw-if-not-resolved=\"False\" />"
  returns:
    type: "<xref href=\"com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator.Validity?alt=com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator.Validity&text=Validity\" data-throw-if-not-resolved=\"False\" />"
type: "method"
metadata: {}
package: "com.fasterxml.jackson.databind.jsontype"
artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
