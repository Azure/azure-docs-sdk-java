### YamlMime:JavaMember
uid: "com.azure.communication.callingserver.models.ParallelDownloadOptions.setBlockSize*"
fullName: "com.azure.communication.callingserver.models.ParallelDownloadOptions.setBlockSize"
name: "setBlockSize"
nameWithType: "ParallelDownloadOptions.setBlockSize"
members:
- uid: "com.azure.communication.callingserver.models.ParallelDownloadOptions.setBlockSize(java.lang.Long)"
  fullName: "com.azure.communication.callingserver.models.ParallelDownloadOptions.setBlockSize(Long blockSize)"
  name: "setBlockSize(Long blockSize)"
  nameWithType: "ParallelDownloadOptions.setBlockSize(Long blockSize)"
  summary: "Sets the block size."
  parameters:
  - description: "The block size."
    name: "blockSize"
    type: "<xref href=\"java.lang.Long?alt=java.lang.Long&text=Long\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public ParallelDownloadOptions setBlockSize(Long blockSize)"
  desc: "Sets the block size. For upload, The block size is the size of each block that will be staged. This value also determines the number of requests that need to be made. This parameter also determines the size that each buffer uses when buffering is required and consequently amount of memory consumed by such methods may be up to blockSize \\* numBuffers. For download to file, the block size is the size of each data chunk returned from the service. For both applications, If block size is large, upload will make fewer network calls, but each individual call will send more data and will therefore take longer."
  returns:
    description: "The ParallelDownloadOptions object itself."
    type: "<xref href=\"com.azure.communication.callingserver.models.ParallelDownloadOptions?alt=com.azure.communication.callingserver.models.ParallelDownloadOptions&text=ParallelDownloadOptions\" data-throw-if-not-resolved=\"False\" />"
type: "method"
metadata: {}
package: "com.azure.communication.callingserver.models"
artifact: com.azure:azure-communication-callingserver:1.0.0-beta.4
