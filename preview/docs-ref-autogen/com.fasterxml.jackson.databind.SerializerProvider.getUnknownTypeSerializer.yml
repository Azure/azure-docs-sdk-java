### YamlMime:JavaMember
uid: "com.fasterxml.jackson.databind.SerializerProvider.getUnknownTypeSerializer*"
fullName: "com.fasterxml.jackson.databind.SerializerProvider.getUnknownTypeSerializer"
name: "getUnknownTypeSerializer"
nameWithType: "SerializerProvider.getUnknownTypeSerializer"
members:
- uid: "com.fasterxml.jackson.databind.SerializerProvider.getUnknownTypeSerializer(java.lang.Class<?>)"
  fullName: "com.fasterxml.jackson.databind.SerializerProvider.getUnknownTypeSerializer(Class<?> unknownType)"
  name: "getUnknownTypeSerializer(Class<?> unknownType)"
  nameWithType: "SerializerProvider.getUnknownTypeSerializer(Class<?> unknownType)"
  summary: "Method called to get the serializer to use if provider cannot determine an actual type-specific serializer to use; typically when none of <xref uid=\"com.fasterxml.jackson.databind.ser.SerializerFactory\" data-throw-if-not-resolved=\"false\" data-raw-source=\"SerializerFactory\"></xref> instances are able to construct a serializer.\n\nTypically, returned serializer will throw an exception, although alternatively <xref uid=\"com.fasterxml.jackson.databind.ser.std.ToStringSerializer\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.fasterxml.jackson.databind.ser.std.ToStringSerializer\"></xref> could be returned as well."
  parameters:
  - description: "Type for which no serializer is found"
    name: "unknownType"
    type: "<xref href=\"java.lang.Class?alt=java.lang.Class&text=Class\" data-throw-if-not-resolved=\"False\" />&lt;?&gt;"
  syntax: "public JsonSerializer<Object> getUnknownTypeSerializer(Class<?> unknownType)"
  returns:
    type: "<xref href=\"com.fasterxml.jackson.databind.JsonSerializer?alt=com.fasterxml.jackson.databind.JsonSerializer&text=JsonSerializer\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Object?alt=java.lang.Object&text=Object\" data-throw-if-not-resolved=\"False\" />&gt;"
type: "method"
metadata: {}
package: "com.fasterxml.jackson.databind"
artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
