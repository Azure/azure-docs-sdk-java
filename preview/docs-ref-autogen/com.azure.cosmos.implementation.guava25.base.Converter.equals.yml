### YamlMime:JavaMember
uid: "com.azure.cosmos.implementation.guava25.base.Converter.equals*"
fullName: "com.azure.cosmos.implementation.guava25.base.Converter<A,B>.equals"
name: "equals"
nameWithType: "Converter<A,B>.equals"
members:
- uid: "com.azure.cosmos.implementation.guava25.base.Converter.equals(java.lang.Object)"
  fullName: "com.azure.cosmos.implementation.guava25.base.Converter<A,B>.equals(Object object)"
  name: "equals(Object object)"
  nameWithType: "Converter<A,B>.equals(Object object)"
  summary: "Indicates whether another object is equal to this converter.\n\nMost implementations will have no reason to override the behavior of <xref uid=\"java.lang.Object.equals\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Object#equals\"></xref>. However, an implementation may also choose to return `true` whenever `object` is a <xref uid=\"com.azure.cosmos.implementation.guava25.base.Converter\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Converter\"></xref> that it considers *interchangeable* with this one. \"Interchangeable\" *typically* means that `Objects.equal(this.convert(a), that.convert(a))` is true for all `a` of type `A` (and similarly for `reverse`). Note that a `false` result from this method does not imply that the converters are known *not* to be interchangeable."
  overridden: "java.lang.Object.equals(java.lang.Object)"
  parameters:
  - name: "object"
    type: "<xref href=\"java.lang.Object?alt=java.lang.Object&text=Object\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public boolean equals(Object object)"
  returns:
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
type: "method"
metadata: {}
package: "com.azure.cosmos.implementation.guava25.base"
artifact: com.azure:azure-cosmos:4.4.0-beta.1
