### YamlMime:ManagedReference
items:
- uid: com.fasterxml.jackson.core.json.UTF8JsonGenerator
  id: UTF8JsonGenerator
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.json
  children:
  - com.fasterxml.jackson.core.json.UTF8JsonGenerator.UTF8JsonGenerator(com.fasterxml.jackson.core.io.IOContext,int,com.fasterxml.jackson.core.ObjectCodec,java.io.OutputStream)
  - com.fasterxml.jackson.core.json.UTF8JsonGenerator.UTF8JsonGenerator(com.fasterxml.jackson.core.io.IOContext,int,com.fasterxml.jackson.core.ObjectCodec,java.io.OutputStream,byte[],int,boolean)
  - com.fasterxml.jackson.core.json.UTF8JsonGenerator.UTF8JsonGenerator(com.fasterxml.jackson.core.io.IOContext,int,com.fasterxml.jackson.core.ObjectCodec,java.io.OutputStream,char)
  - com.fasterxml.jackson.core.json.UTF8JsonGenerator.UTF8JsonGenerator(com.fasterxml.jackson.core.io.IOContext,int,com.fasterxml.jackson.core.ObjectCodec,java.io.OutputStream,char,byte[],int,boolean)
  - com.fasterxml.jackson.core.json.UTF8JsonGenerator._bufferRecyclable
  - com.fasterxml.jackson.core.json.UTF8JsonGenerator._charBuffer
  - com.fasterxml.jackson.core.json.UTF8JsonGenerator._charBufferLength
  - com.fasterxml.jackson.core.json.UTF8JsonGenerator._entityBuffer
  - com.fasterxml.jackson.core.json.UTF8JsonGenerator._flushBuffer()
  - com.fasterxml.jackson.core.json.UTF8JsonGenerator._outputBuffer
  - com.fasterxml.jackson.core.json.UTF8JsonGenerator._outputEnd
  - com.fasterxml.jackson.core.json.UTF8JsonGenerator._outputMaxContiguous
  - com.fasterxml.jackson.core.json.UTF8JsonGenerator._outputStream
  - com.fasterxml.jackson.core.json.UTF8JsonGenerator._outputSurrogates(int,int)
  - com.fasterxml.jackson.core.json.UTF8JsonGenerator._outputTail
  - com.fasterxml.jackson.core.json.UTF8JsonGenerator._quoteChar
  - com.fasterxml.jackson.core.json.UTF8JsonGenerator._releaseBuffers()
  - com.fasterxml.jackson.core.json.UTF8JsonGenerator._verifyValueWrite(java.lang.String)
  - com.fasterxml.jackson.core.json.UTF8JsonGenerator._writeBinary(com.fasterxml.jackson.core.Base64Variant,byte[],int,int)
  - com.fasterxml.jackson.core.json.UTF8JsonGenerator._writeBinary(com.fasterxml.jackson.core.Base64Variant,java.io.InputStream,byte[])
  - com.fasterxml.jackson.core.json.UTF8JsonGenerator._writeBinary(com.fasterxml.jackson.core.Base64Variant,java.io.InputStream,byte[],int)
  - com.fasterxml.jackson.core.json.UTF8JsonGenerator._writePPFieldName(com.fasterxml.jackson.core.SerializableString)
  - com.fasterxml.jackson.core.json.UTF8JsonGenerator._writePPFieldName(java.lang.String)
  - com.fasterxml.jackson.core.json.UTF8JsonGenerator.close()
  - com.fasterxml.jackson.core.json.UTF8JsonGenerator.flush()
  - com.fasterxml.jackson.core.json.UTF8JsonGenerator.getOutputBuffered()
  - com.fasterxml.jackson.core.json.UTF8JsonGenerator.getOutputTarget()
  - com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeBinary(com.fasterxml.jackson.core.Base64Variant,byte[],int,int)
  - com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeBinary(com.fasterxml.jackson.core.Base64Variant,java.io.InputStream,int)
  - com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeBoolean(boolean)
  - com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeEndArray()
  - com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeEndObject()
  - com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeFieldName(com.fasterxml.jackson.core.SerializableString)
  - com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeFieldName(java.lang.String)
  - com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeNull()
  - com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeNumber(char[],int,int)
  - com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeNumber(double)
  - com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeNumber(float)
  - com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeNumber(int)
  - com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeNumber(java.lang.String)
  - com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeNumber(java.math.BigDecimal)
  - com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeNumber(java.math.BigInteger)
  - com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeNumber(long)
  - com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeNumber(short)
  - com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeRaw(char)
  - com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeRaw(char[],int,int)
  - com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeRaw(com.fasterxml.jackson.core.SerializableString)
  - com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeRaw(java.lang.String)
  - com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeRaw(java.lang.String,int,int)
  - com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeRawUTF8String(byte[],int,int)
  - com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeRawValue(com.fasterxml.jackson.core.SerializableString)
  - com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeStartArray()
  - com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeStartArray(int)
  - com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeStartObject()
  - com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeStartObject(java.lang.Object)
  - com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeString(char[],int,int)
  - com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeString(com.fasterxml.jackson.core.SerializableString)
  - com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeString(java.io.Reader,int)
  - com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeString(java.lang.String)
  - com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeUTF8String(byte[],int,int)
  langs:
  - java
  name: UTF8JsonGenerator
  nameWithType: UTF8JsonGenerator
  fullName: com.fasterxml.jackson.core.json.UTF8JsonGenerator
  type: Class
  package: com.fasterxml.jackson.core.json
  syntax:
    content: public class UTF8JsonGenerator extends JsonGeneratorImpl
  inheritance:
  - java.lang.Object
  - com.fasterxml.jackson.core.JsonGenerator
  - com.fasterxml.jackson.core.base.GeneratorBase
  - com.fasterxml.jackson.core.json.JsonGeneratorImpl
  inheritedMembers:
  - com.fasterxml.jackson.core.JsonGenerator._copyCurrentContents(com.fasterxml.jackson.core.JsonParser)
  - com.fasterxml.jackson.core.JsonGenerator._reportError(java.lang.String)
  - com.fasterxml.jackson.core.JsonGenerator._reportUnsupportedOperation()
  - com.fasterxml.jackson.core.JsonGenerator._throwInternal()
  - com.fasterxml.jackson.core.JsonGenerator._verifyOffsets(int,int,int)
  - com.fasterxml.jackson.core.JsonGenerator._writeSimpleObject(java.lang.Object)
  - com.fasterxml.jackson.core.JsonGenerator.canOmitFields()
  - com.fasterxml.jackson.core.JsonGenerator.canUseSchema(com.fasterxml.jackson.core.FormatSchema)
  - com.fasterxml.jackson.core.JsonGenerator.canWriteBinaryNatively()
  - com.fasterxml.jackson.core.JsonGenerator.canWriteFormattedNumbers()
  - com.fasterxml.jackson.core.JsonGenerator.canWriteObjectId()
  - com.fasterxml.jackson.core.JsonGenerator.canWriteTypeId()
  - com.fasterxml.jackson.core.JsonGenerator.configure(com.fasterxml.jackson.core.JsonGenerator.Feature,boolean)
  - com.fasterxml.jackson.core.JsonGenerator.copyCurrentEvent(com.fasterxml.jackson.core.JsonParser)
  - com.fasterxml.jackson.core.JsonGenerator.copyCurrentStructure(com.fasterxml.jackson.core.JsonParser)
  - com.fasterxml.jackson.core.JsonGenerator.getFormatFeatures()
  - com.fasterxml.jackson.core.JsonGenerator.getOutputBuffered()
  - com.fasterxml.jackson.core.JsonGenerator.getOutputTarget()
  - com.fasterxml.jackson.core.JsonGenerator.getPrettyPrinter()
  - com.fasterxml.jackson.core.JsonGenerator.getSchema()
  - com.fasterxml.jackson.core.JsonGenerator.isEnabled(com.fasterxml.jackson.core.StreamWriteFeature)
  - com.fasterxml.jackson.core.JsonGenerator.overrideFormatFeatures(int,int)
  - com.fasterxml.jackson.core.JsonGenerator.setPrettyPrinter(com.fasterxml.jackson.core.PrettyPrinter)
  - com.fasterxml.jackson.core.JsonGenerator.setSchema(com.fasterxml.jackson.core.FormatSchema)
  - com.fasterxml.jackson.core.JsonGenerator.writeArray(double[],int,int)
  - com.fasterxml.jackson.core.JsonGenerator.writeArray(int[],int,int)
  - com.fasterxml.jackson.core.JsonGenerator.writeArray(java.lang.String[],int,int)
  - com.fasterxml.jackson.core.JsonGenerator.writeArray(long[],int,int)
  - com.fasterxml.jackson.core.JsonGenerator.writeArrayFieldStart(java.lang.String)
  - com.fasterxml.jackson.core.JsonGenerator.writeBinary(byte[])
  - com.fasterxml.jackson.core.JsonGenerator.writeBinary(byte[],int,int)
  - com.fasterxml.jackson.core.JsonGenerator.writeBinary(com.fasterxml.jackson.core.Base64Variant,byte[],int,int)
  - com.fasterxml.jackson.core.JsonGenerator.writeBinary(java.io.InputStream,int)
  - com.fasterxml.jackson.core.JsonGenerator.writeBinaryField(java.lang.String,byte[])
  - com.fasterxml.jackson.core.JsonGenerator.writeBoolean(boolean)
  - com.fasterxml.jackson.core.JsonGenerator.writeBooleanField(java.lang.String,boolean)
  - com.fasterxml.jackson.core.JsonGenerator.writeEmbeddedObject(java.lang.Object)
  - com.fasterxml.jackson.core.JsonGenerator.writeEndArray()
  - com.fasterxml.jackson.core.JsonGenerator.writeEndObject()
  - com.fasterxml.jackson.core.JsonGenerator.writeFieldId(long)
  - com.fasterxml.jackson.core.JsonGenerator.writeFieldName(java.lang.String)
  - com.fasterxml.jackson.core.JsonGenerator.writeNull()
  - com.fasterxml.jackson.core.JsonGenerator.writeNullField(java.lang.String)
  - com.fasterxml.jackson.core.JsonGenerator.writeNumber(char[],int,int)
  - com.fasterxml.jackson.core.JsonGenerator.writeNumber(double)
  - com.fasterxml.jackson.core.JsonGenerator.writeNumber(float)
  - com.fasterxml.jackson.core.JsonGenerator.writeNumber(int)
  - com.fasterxml.jackson.core.JsonGenerator.writeNumber(java.lang.String)
  - com.fasterxml.jackson.core.JsonGenerator.writeNumber(java.math.BigDecimal)
  - com.fasterxml.jackson.core.JsonGenerator.writeNumber(java.math.BigInteger)
  - com.fasterxml.jackson.core.JsonGenerator.writeNumber(long)
  - com.fasterxml.jackson.core.JsonGenerator.writeNumber(short)
  - com.fasterxml.jackson.core.JsonGenerator.writeNumberField(java.lang.String,double)
  - com.fasterxml.jackson.core.JsonGenerator.writeNumberField(java.lang.String,float)
  - com.fasterxml.jackson.core.JsonGenerator.writeNumberField(java.lang.String,int)
  - com.fasterxml.jackson.core.JsonGenerator.writeNumberField(java.lang.String,java.math.BigDecimal)
  - com.fasterxml.jackson.core.JsonGenerator.writeNumberField(java.lang.String,java.math.BigInteger)
  - com.fasterxml.jackson.core.JsonGenerator.writeNumberField(java.lang.String,long)
  - com.fasterxml.jackson.core.JsonGenerator.writeNumberField(java.lang.String,short)
  - com.fasterxml.jackson.core.JsonGenerator.writeObjectField(java.lang.String,java.lang.Object)
  - com.fasterxml.jackson.core.JsonGenerator.writeObjectFieldStart(java.lang.String)
  - com.fasterxml.jackson.core.JsonGenerator.writeObjectId(java.lang.Object)
  - com.fasterxml.jackson.core.JsonGenerator.writeObjectRef(java.lang.Object)
  - com.fasterxml.jackson.core.JsonGenerator.writeOmittedField(java.lang.String)
  - com.fasterxml.jackson.core.JsonGenerator.writeRaw(char)
  - com.fasterxml.jackson.core.JsonGenerator.writeRaw(char[],int,int)
  - com.fasterxml.jackson.core.JsonGenerator.writeRaw(com.fasterxml.jackson.core.SerializableString)
  - com.fasterxml.jackson.core.JsonGenerator.writeRaw(java.lang.String)
  - com.fasterxml.jackson.core.JsonGenerator.writeRaw(java.lang.String,int,int)
  - com.fasterxml.jackson.core.JsonGenerator.writeRawUTF8String(byte[],int,int)
  - com.fasterxml.jackson.core.JsonGenerator.writeStartArray()
  - com.fasterxml.jackson.core.JsonGenerator.writeStartArray(int)
  - com.fasterxml.jackson.core.JsonGenerator.writeStartArray(java.lang.Object)
  - com.fasterxml.jackson.core.JsonGenerator.writeStartArray(java.lang.Object,int)
  - com.fasterxml.jackson.core.JsonGenerator.writeStartObject()
  - com.fasterxml.jackson.core.JsonGenerator.writeStartObject(java.lang.Object,int)
  - com.fasterxml.jackson.core.JsonGenerator.writeString(char[],int,int)
  - com.fasterxml.jackson.core.JsonGenerator.writeString(java.io.Reader,int)
  - com.fasterxml.jackson.core.JsonGenerator.writeString(java.lang.String)
  - com.fasterxml.jackson.core.JsonGenerator.writeStringField(java.lang.String,java.lang.String)
  - com.fasterxml.jackson.core.JsonGenerator.writeTypeId(java.lang.Object)
  - com.fasterxml.jackson.core.JsonGenerator.writeTypePrefix(com.fasterxml.jackson.core.type.WritableTypeId)
  - com.fasterxml.jackson.core.JsonGenerator.writeTypeSuffix(com.fasterxml.jackson.core.type.WritableTypeId)
  - com.fasterxml.jackson.core.JsonGenerator.writeUTF8String(byte[],int,int)
  - com.fasterxml.jackson.core.base.GeneratorBase._asString(java.math.BigDecimal)
  - com.fasterxml.jackson.core.base.GeneratorBase._constructDefaultPrettyPrinter()
  - com.fasterxml.jackson.core.base.GeneratorBase._decodeSurrogate(int,int)
  - com.fasterxml.jackson.core.base.GeneratorBase._releaseBuffers()
  - com.fasterxml.jackson.core.base.GeneratorBase._verifyValueWrite(java.lang.String)
  - com.fasterxml.jackson.core.base.GeneratorBase.close()
  - com.fasterxml.jackson.core.base.GeneratorBase.flush()
  - com.fasterxml.jackson.core.base.GeneratorBase.getCodec()
  - com.fasterxml.jackson.core.base.GeneratorBase.getCurrentValue()
  - com.fasterxml.jackson.core.base.GeneratorBase.getFeatureMask()
  - com.fasterxml.jackson.core.base.GeneratorBase.getOutputContext()
  - com.fasterxml.jackson.core.base.GeneratorBase.isClosed()
  - com.fasterxml.jackson.core.base.GeneratorBase.isEnabled(com.fasterxml.jackson.core.JsonGenerator.Feature)
  - com.fasterxml.jackson.core.base.GeneratorBase.overrideStdFeatures(int,int)
  - com.fasterxml.jackson.core.base.GeneratorBase.setCodec(com.fasterxml.jackson.core.ObjectCodec)
  - com.fasterxml.jackson.core.base.GeneratorBase.setCurrentValue(java.lang.Object)
  - com.fasterxml.jackson.core.base.GeneratorBase.setFeatureMask(int)
  - com.fasterxml.jackson.core.base.GeneratorBase.useDefaultPrettyPrinter()
  - com.fasterxml.jackson.core.base.GeneratorBase.writeBinary(com.fasterxml.jackson.core.Base64Variant,java.io.InputStream,int)
  - com.fasterxml.jackson.core.base.GeneratorBase.writeFieldName(com.fasterxml.jackson.core.SerializableString)
  - com.fasterxml.jackson.core.base.GeneratorBase.writeObject(java.lang.Object)
  - com.fasterxml.jackson.core.base.GeneratorBase.writeRawValue(char[],int,int)
  - com.fasterxml.jackson.core.base.GeneratorBase.writeRawValue(com.fasterxml.jackson.core.SerializableString)
  - com.fasterxml.jackson.core.base.GeneratorBase.writeRawValue(java.lang.String)
  - com.fasterxml.jackson.core.base.GeneratorBase.writeRawValue(java.lang.String,int,int)
  - com.fasterxml.jackson.core.base.GeneratorBase.writeStartObject(java.lang.Object)
  - com.fasterxml.jackson.core.base.GeneratorBase.writeString(com.fasterxml.jackson.core.SerializableString)
  - com.fasterxml.jackson.core.base.GeneratorBase.writeTree(com.fasterxml.jackson.core.TreeNode)
  - com.fasterxml.jackson.core.json.JsonGeneratorImpl._checkStdFeatureChanges(int,int)
  - com.fasterxml.jackson.core.json.JsonGeneratorImpl._reportCantWriteValueExpectName(java.lang.String)
  - com.fasterxml.jackson.core.json.JsonGeneratorImpl._verifyPrettyValueWrite(java.lang.String,int)
  - com.fasterxml.jackson.core.json.JsonGeneratorImpl.disable(com.fasterxml.jackson.core.JsonGenerator.Feature)
  - com.fasterxml.jackson.core.json.JsonGeneratorImpl.enable(com.fasterxml.jackson.core.JsonGenerator.Feature)
  - com.fasterxml.jackson.core.json.JsonGeneratorImpl.getCharacterEscapes()
  - com.fasterxml.jackson.core.json.JsonGeneratorImpl.getHighestEscapedChar()
  - com.fasterxml.jackson.core.json.JsonGeneratorImpl.setCharacterEscapes(com.fasterxml.jackson.core.io.CharacterEscapes)
  - com.fasterxml.jackson.core.json.JsonGeneratorImpl.setHighestNonEscapedChar(int)
  - com.fasterxml.jackson.core.json.JsonGeneratorImpl.setRootValueSeparator(com.fasterxml.jackson.core.SerializableString)
  - com.fasterxml.jackson.core.json.JsonGeneratorImpl.version()
  - java.lang.Object.clone()
  - java.lang.Object.equals(java.lang.Object)
  - java.lang.Object.finalize()
  - java.lang.Object.getClass()
  - java.lang.Object.hashCode()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.toString()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
- uid: com.fasterxml.jackson.core.json.UTF8JsonGenerator.UTF8JsonGenerator(com.fasterxml.jackson.core.io.IOContext,int,com.fasterxml.jackson.core.ObjectCodec,java.io.OutputStream)
  id: UTF8JsonGenerator(com.fasterxml.jackson.core.io.IOContext,int,com.fasterxml.jackson.core.ObjectCodec,java.io.OutputStream)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.json.UTF8JsonGenerator
  langs:
  - java
  name: UTF8JsonGenerator(IOContext ctxt, int features, ObjectCodec codec, OutputStream out)
  nameWithType: UTF8JsonGenerator.UTF8JsonGenerator(IOContext ctxt, int features, ObjectCodec codec, OutputStream out)
  fullName: com.fasterxml.jackson.core.json.UTF8JsonGenerator.UTF8JsonGenerator(IOContext ctxt, int features, ObjectCodec codec, OutputStream out)
  overload: com.fasterxml.jackson.core.json.UTF8JsonGenerator.UTF8JsonGenerator*
  type: Constructor
  package: com.fasterxml.jackson.core.json
  syntax:
    content: public UTF8JsonGenerator(IOContext ctxt, int features, ObjectCodec codec, OutputStream out)
    parameters:
    - id: ctxt
      type: com.fasterxml.jackson.core.io.IOContext
    - id: features
      type: int
    - id: codec
      type: com.fasterxml.jackson.core.ObjectCodec
    - id: out
      type: java.io.OutputStream
- uid: com.fasterxml.jackson.core.json.UTF8JsonGenerator.UTF8JsonGenerator(com.fasterxml.jackson.core.io.IOContext,int,com.fasterxml.jackson.core.ObjectCodec,java.io.OutputStream,byte[],int,boolean)
  id: UTF8JsonGenerator(com.fasterxml.jackson.core.io.IOContext,int,com.fasterxml.jackson.core.ObjectCodec,java.io.OutputStream,byte[],int,boolean)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.json.UTF8JsonGenerator
  langs:
  - java
  name: UTF8JsonGenerator(IOContext ctxt, int features, ObjectCodec codec, OutputStream out, byte[] outputBuffer, int outputOffset, boolean bufferRecyclable)
  nameWithType: UTF8JsonGenerator.UTF8JsonGenerator(IOContext ctxt, int features, ObjectCodec codec, OutputStream out, byte[] outputBuffer, int outputOffset, boolean bufferRecyclable)
  fullName: com.fasterxml.jackson.core.json.UTF8JsonGenerator.UTF8JsonGenerator(IOContext ctxt, int features, ObjectCodec codec, OutputStream out, byte[] outputBuffer, int outputOffset, boolean bufferRecyclable)
  overload: com.fasterxml.jackson.core.json.UTF8JsonGenerator.UTF8JsonGenerator*
  type: Constructor
  package: com.fasterxml.jackson.core.json
  syntax:
    content: public UTF8JsonGenerator(IOContext ctxt, int features, ObjectCodec codec, OutputStream out, byte[] outputBuffer, int outputOffset, boolean bufferRecyclable)
    parameters:
    - id: ctxt
      type: com.fasterxml.jackson.core.io.IOContext
    - id: features
      type: int
    - id: codec
      type: com.fasterxml.jackson.core.ObjectCodec
    - id: out
      type: java.io.OutputStream
    - id: outputBuffer
      type: byte[]
    - id: outputOffset
      type: int
    - id: bufferRecyclable
      type: boolean
- uid: com.fasterxml.jackson.core.json.UTF8JsonGenerator.UTF8JsonGenerator(com.fasterxml.jackson.core.io.IOContext,int,com.fasterxml.jackson.core.ObjectCodec,java.io.OutputStream,char)
  id: UTF8JsonGenerator(com.fasterxml.jackson.core.io.IOContext,int,com.fasterxml.jackson.core.ObjectCodec,java.io.OutputStream,char)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.json.UTF8JsonGenerator
  langs:
  - java
  name: UTF8JsonGenerator(IOContext ctxt, int features, ObjectCodec codec, OutputStream out, char quoteChar)
  nameWithType: UTF8JsonGenerator.UTF8JsonGenerator(IOContext ctxt, int features, ObjectCodec codec, OutputStream out, char quoteChar)
  fullName: com.fasterxml.jackson.core.json.UTF8JsonGenerator.UTF8JsonGenerator(IOContext ctxt, int features, ObjectCodec codec, OutputStream out, char quoteChar)
  overload: com.fasterxml.jackson.core.json.UTF8JsonGenerator.UTF8JsonGenerator*
  type: Constructor
  package: com.fasterxml.jackson.core.json
  syntax:
    content: public UTF8JsonGenerator(IOContext ctxt, int features, ObjectCodec codec, OutputStream out, char quoteChar)
    parameters:
    - id: ctxt
      type: com.fasterxml.jackson.core.io.IOContext
    - id: features
      type: int
    - id: codec
      type: com.fasterxml.jackson.core.ObjectCodec
    - id: out
      type: java.io.OutputStream
    - id: quoteChar
      type: char
- uid: com.fasterxml.jackson.core.json.UTF8JsonGenerator.UTF8JsonGenerator(com.fasterxml.jackson.core.io.IOContext,int,com.fasterxml.jackson.core.ObjectCodec,java.io.OutputStream,char,byte[],int,boolean)
  id: UTF8JsonGenerator(com.fasterxml.jackson.core.io.IOContext,int,com.fasterxml.jackson.core.ObjectCodec,java.io.OutputStream,char,byte[],int,boolean)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.json.UTF8JsonGenerator
  langs:
  - java
  name: UTF8JsonGenerator(IOContext ctxt, int features, ObjectCodec codec, OutputStream out, char quoteChar, byte[] outputBuffer, int outputOffset, boolean bufferRecyclable)
  nameWithType: UTF8JsonGenerator.UTF8JsonGenerator(IOContext ctxt, int features, ObjectCodec codec, OutputStream out, char quoteChar, byte[] outputBuffer, int outputOffset, boolean bufferRecyclable)
  fullName: com.fasterxml.jackson.core.json.UTF8JsonGenerator.UTF8JsonGenerator(IOContext ctxt, int features, ObjectCodec codec, OutputStream out, char quoteChar, byte[] outputBuffer, int outputOffset, boolean bufferRecyclable)
  overload: com.fasterxml.jackson.core.json.UTF8JsonGenerator.UTF8JsonGenerator*
  type: Constructor
  package: com.fasterxml.jackson.core.json
  syntax:
    content: public UTF8JsonGenerator(IOContext ctxt, int features, ObjectCodec codec, OutputStream out, char quoteChar, byte[] outputBuffer, int outputOffset, boolean bufferRecyclable)
    parameters:
    - id: ctxt
      type: com.fasterxml.jackson.core.io.IOContext
    - id: features
      type: int
    - id: codec
      type: com.fasterxml.jackson.core.ObjectCodec
    - id: out
      type: java.io.OutputStream
    - id: quoteChar
      type: char
    - id: outputBuffer
      type: byte[]
    - id: outputOffset
      type: int
    - id: bufferRecyclable
      type: boolean
- uid: com.fasterxml.jackson.core.json.UTF8JsonGenerator._bufferRecyclable
  id: _bufferRecyclable
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.json.UTF8JsonGenerator
  langs:
  - java
  name: _bufferRecyclable
  nameWithType: UTF8JsonGenerator._bufferRecyclable
  fullName: com.fasterxml.jackson.core.json.UTF8JsonGenerator._bufferRecyclable
  type: Field
  package: com.fasterxml.jackson.core.json
  summary: Flag that indicates whether the output buffer is recycable (and needs to be returned to recycler once we are done) or not.
  syntax:
    content: protected boolean _bufferRecyclable
    return:
      type: boolean
- uid: com.fasterxml.jackson.core.json.UTF8JsonGenerator._charBuffer
  id: _charBuffer
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.json.UTF8JsonGenerator
  langs:
  - java
  name: _charBuffer
  nameWithType: UTF8JsonGenerator._charBuffer
  fullName: com.fasterxml.jackson.core.json.UTF8JsonGenerator._charBuffer
  type: Field
  package: com.fasterxml.jackson.core.json
  summary: Intermediate buffer in which characters of a String are copied before being encoded.
  syntax:
    content: protected char[] _charBuffer
    return:
      type: char[]
- uid: com.fasterxml.jackson.core.json.UTF8JsonGenerator._charBufferLength
  id: _charBufferLength
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.json.UTF8JsonGenerator
  langs:
  - java
  name: _charBufferLength
  nameWithType: UTF8JsonGenerator._charBufferLength
  fullName: com.fasterxml.jackson.core.json.UTF8JsonGenerator._charBufferLength
  type: Field
  package: com.fasterxml.jackson.core.json
  summary: Length of `_charBuffer`
  syntax:
    content: protected final int _charBufferLength
    return:
      type: int
- uid: com.fasterxml.jackson.core.json.UTF8JsonGenerator._entityBuffer
  id: _entityBuffer
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.json.UTF8JsonGenerator
  langs:
  - java
  name: _entityBuffer
  nameWithType: UTF8JsonGenerator._entityBuffer
  fullName: com.fasterxml.jackson.core.json.UTF8JsonGenerator._entityBuffer
  type: Field
  package: com.fasterxml.jackson.core.json
  summary: 6 character temporary buffer allocated if needed, for constructing escape sequences
  syntax:
    content: protected byte[] _entityBuffer
    return:
      type: byte[]
- uid: com.fasterxml.jackson.core.json.UTF8JsonGenerator._flushBuffer()
  id: _flushBuffer()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.json.UTF8JsonGenerator
  langs:
  - java
  name: _flushBuffer()
  nameWithType: UTF8JsonGenerator._flushBuffer()
  fullName: com.fasterxml.jackson.core.json.UTF8JsonGenerator._flushBuffer()
  overload: com.fasterxml.jackson.core.json.UTF8JsonGenerator._flushBuffer*
  type: Method
  package: com.fasterxml.jackson.core.json
  syntax:
    content: protected final void _flushBuffer()
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.json.UTF8JsonGenerator._outputBuffer
  id: _outputBuffer
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.json.UTF8JsonGenerator
  langs:
  - java
  name: _outputBuffer
  nameWithType: UTF8JsonGenerator._outputBuffer
  fullName: com.fasterxml.jackson.core.json.UTF8JsonGenerator._outputBuffer
  type: Field
  package: com.fasterxml.jackson.core.json
  summary: Intermediate buffer in which contents are buffered before being written using <xref uid="com.fasterxml.jackson.core.json.UTF8JsonGenerator._outputStream" data-throw-if-not-resolved="false">#_outputStream</xref>.
  syntax:
    content: protected byte[] _outputBuffer
    return:
      type: byte[]
- uid: com.fasterxml.jackson.core.json.UTF8JsonGenerator._outputEnd
  id: _outputEnd
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.json.UTF8JsonGenerator
  langs:
  - java
  name: _outputEnd
  nameWithType: UTF8JsonGenerator._outputEnd
  fullName: com.fasterxml.jackson.core.json.UTF8JsonGenerator._outputEnd
  type: Field
  package: com.fasterxml.jackson.core.json
  summary: End marker of the output buffer; one past the last valid position within the buffer.
  syntax:
    content: protected final int _outputEnd
    return:
      type: int
- uid: com.fasterxml.jackson.core.json.UTF8JsonGenerator._outputMaxContiguous
  id: _outputMaxContiguous
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.json.UTF8JsonGenerator
  langs:
  - java
  name: _outputMaxContiguous
  nameWithType: UTF8JsonGenerator._outputMaxContiguous
  fullName: com.fasterxml.jackson.core.json.UTF8JsonGenerator._outputMaxContiguous
  type: Field
  package: com.fasterxml.jackson.core.json
  summary: Maximum number of `char`s that we know will always fit in the output buffer after escaping
  syntax:
    content: protected final int _outputMaxContiguous
    return:
      type: int
- uid: com.fasterxml.jackson.core.json.UTF8JsonGenerator._outputStream
  id: _outputStream
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.json.UTF8JsonGenerator
  langs:
  - java
  name: _outputStream
  nameWithType: UTF8JsonGenerator._outputStream
  fullName: com.fasterxml.jackson.core.json.UTF8JsonGenerator._outputStream
  type: Field
  package: com.fasterxml.jackson.core.json
  summary: Underlying output stream used for writing JSON content.
  syntax:
    content: protected final OutputStream _outputStream
    return:
      type: java.io.OutputStream
- uid: com.fasterxml.jackson.core.json.UTF8JsonGenerator._outputSurrogates(int,int)
  id: _outputSurrogates(int,int)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.json.UTF8JsonGenerator
  langs:
  - java
  name: _outputSurrogates(int surr1, int surr2)
  nameWithType: UTF8JsonGenerator._outputSurrogates(int surr1, int surr2)
  fullName: com.fasterxml.jackson.core.json.UTF8JsonGenerator._outputSurrogates(int surr1, int surr2)
  overload: com.fasterxml.jackson.core.json.UTF8JsonGenerator._outputSurrogates*
  type: Method
  package: com.fasterxml.jackson.core.json
  syntax:
    content: protected final void _outputSurrogates(int surr1, int surr2)
    parameters:
    - id: surr1
      type: int
    - id: surr2
      type: int
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.json.UTF8JsonGenerator._outputTail
  id: _outputTail
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.json.UTF8JsonGenerator
  langs:
  - java
  name: _outputTail
  nameWithType: UTF8JsonGenerator._outputTail
  fullName: com.fasterxml.jackson.core.json.UTF8JsonGenerator._outputTail
  type: Field
  package: com.fasterxml.jackson.core.json
  summary: Pointer to the position right beyond the last character to output (end marker; may be past the buffer)
  syntax:
    content: protected int _outputTail
    return:
      type: int
- uid: com.fasterxml.jackson.core.json.UTF8JsonGenerator._quoteChar
  id: _quoteChar
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.json.UTF8JsonGenerator
  langs:
  - java
  name: _quoteChar
  nameWithType: UTF8JsonGenerator._quoteChar
  fullName: com.fasterxml.jackson.core.json.UTF8JsonGenerator._quoteChar
  type: Field
  package: com.fasterxml.jackson.core.json
  summary: Character used for quoting JSON Object property names and String values.
  syntax:
    content: protected byte _quoteChar
    return:
      type: byte
- uid: com.fasterxml.jackson.core.json.UTF8JsonGenerator._releaseBuffers()
  id: _releaseBuffers()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.json.UTF8JsonGenerator
  langs:
  - java
  name: _releaseBuffers()
  nameWithType: UTF8JsonGenerator._releaseBuffers()
  fullName: com.fasterxml.jackson.core.json.UTF8JsonGenerator._releaseBuffers()
  overload: com.fasterxml.jackson.core.json.UTF8JsonGenerator._releaseBuffers*
  type: Method
  package: com.fasterxml.jackson.core.json
  summary: Method called to release any buffers generator may be holding, once generator is being closed.
  syntax:
    content: protected void _releaseBuffers()
- uid: com.fasterxml.jackson.core.json.UTF8JsonGenerator._verifyValueWrite(java.lang.String)
  id: _verifyValueWrite(java.lang.String)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.json.UTF8JsonGenerator
  langs:
  - java
  name: _verifyValueWrite(String typeMsg)
  nameWithType: UTF8JsonGenerator._verifyValueWrite(String typeMsg)
  fullName: com.fasterxml.jackson.core.json.UTF8JsonGenerator._verifyValueWrite(String typeMsg)
  overload: com.fasterxml.jackson.core.json.UTF8JsonGenerator._verifyValueWrite*
  type: Method
  package: com.fasterxml.jackson.core.json
  summary: Method called before trying to write a value (scalar or structured), to verify that this is legal in current output state, as well as to output separators if and as necessary.
  syntax:
    content: protected final void _verifyValueWrite(String typeMsg)
    parameters:
    - id: typeMsg
      type: java.lang.String
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.json.UTF8JsonGenerator._writeBinary(com.fasterxml.jackson.core.Base64Variant,byte[],int,int)
  id: _writeBinary(com.fasterxml.jackson.core.Base64Variant,byte[],int,int)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.json.UTF8JsonGenerator
  langs:
  - java
  name: _writeBinary(Base64Variant b64variant, byte[] input, int inputPtr, int inputEnd)
  nameWithType: UTF8JsonGenerator._writeBinary(Base64Variant b64variant, byte[] input, int inputPtr, int inputEnd)
  fullName: com.fasterxml.jackson.core.json.UTF8JsonGenerator._writeBinary(Base64Variant b64variant, byte[] input, int inputPtr, int inputEnd)
  overload: com.fasterxml.jackson.core.json.UTF8JsonGenerator._writeBinary*
  type: Method
  package: com.fasterxml.jackson.core.json
  syntax:
    content: protected final void _writeBinary(Base64Variant b64variant, byte[] input, int inputPtr, int inputEnd)
    parameters:
    - id: b64variant
      type: com.fasterxml.jackson.core.Base64Variant
    - id: input
      type: byte[]
    - id: inputPtr
      type: int
    - id: inputEnd
      type: int
  exceptions:
  - type: java.io.IOException
  - type: com.fasterxml.jackson.core.JsonGenerationException
- uid: com.fasterxml.jackson.core.json.UTF8JsonGenerator._writeBinary(com.fasterxml.jackson.core.Base64Variant,java.io.InputStream,byte[])
  id: _writeBinary(com.fasterxml.jackson.core.Base64Variant,java.io.InputStream,byte[])
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.json.UTF8JsonGenerator
  langs:
  - java
  name: _writeBinary(Base64Variant b64variant, InputStream data, byte[] readBuffer)
  nameWithType: UTF8JsonGenerator._writeBinary(Base64Variant b64variant, InputStream data, byte[] readBuffer)
  fullName: com.fasterxml.jackson.core.json.UTF8JsonGenerator._writeBinary(Base64Variant b64variant, InputStream data, byte[] readBuffer)
  overload: com.fasterxml.jackson.core.json.UTF8JsonGenerator._writeBinary*
  type: Method
  package: com.fasterxml.jackson.core.json
  syntax:
    content: protected final int _writeBinary(Base64Variant b64variant, InputStream data, byte[] readBuffer)
    parameters:
    - id: b64variant
      type: com.fasterxml.jackson.core.Base64Variant
    - id: data
      type: java.io.InputStream
    - id: readBuffer
      type: byte[]
    return:
      type: int
  exceptions:
  - type: java.io.IOException
  - type: com.fasterxml.jackson.core.JsonGenerationException
- uid: com.fasterxml.jackson.core.json.UTF8JsonGenerator._writeBinary(com.fasterxml.jackson.core.Base64Variant,java.io.InputStream,byte[],int)
  id: _writeBinary(com.fasterxml.jackson.core.Base64Variant,java.io.InputStream,byte[],int)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.json.UTF8JsonGenerator
  langs:
  - java
  name: _writeBinary(Base64Variant b64variant, InputStream data, byte[] readBuffer, int bytesLeft)
  nameWithType: UTF8JsonGenerator._writeBinary(Base64Variant b64variant, InputStream data, byte[] readBuffer, int bytesLeft)
  fullName: com.fasterxml.jackson.core.json.UTF8JsonGenerator._writeBinary(Base64Variant b64variant, InputStream data, byte[] readBuffer, int bytesLeft)
  overload: com.fasterxml.jackson.core.json.UTF8JsonGenerator._writeBinary*
  type: Method
  package: com.fasterxml.jackson.core.json
  syntax:
    content: protected final int _writeBinary(Base64Variant b64variant, InputStream data, byte[] readBuffer, int bytesLeft)
    parameters:
    - id: b64variant
      type: com.fasterxml.jackson.core.Base64Variant
    - id: data
      type: java.io.InputStream
    - id: readBuffer
      type: byte[]
    - id: bytesLeft
      type: int
    return:
      type: int
  exceptions:
  - type: java.io.IOException
  - type: com.fasterxml.jackson.core.JsonGenerationException
- uid: com.fasterxml.jackson.core.json.UTF8JsonGenerator._writePPFieldName(com.fasterxml.jackson.core.SerializableString)
  id: _writePPFieldName(com.fasterxml.jackson.core.SerializableString)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.json.UTF8JsonGenerator
  langs:
  - java
  name: _writePPFieldName(SerializableString name)
  nameWithType: UTF8JsonGenerator._writePPFieldName(SerializableString name)
  fullName: com.fasterxml.jackson.core.json.UTF8JsonGenerator._writePPFieldName(SerializableString name)
  overload: com.fasterxml.jackson.core.json.UTF8JsonGenerator._writePPFieldName*
  type: Method
  package: com.fasterxml.jackson.core.json
  syntax:
    content: protected final void _writePPFieldName(SerializableString name)
    parameters:
    - id: name
      type: com.fasterxml.jackson.core.SerializableString
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.json.UTF8JsonGenerator._writePPFieldName(java.lang.String)
  id: _writePPFieldName(java.lang.String)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.json.UTF8JsonGenerator
  langs:
  - java
  name: _writePPFieldName(String name)
  nameWithType: UTF8JsonGenerator._writePPFieldName(String name)
  fullName: com.fasterxml.jackson.core.json.UTF8JsonGenerator._writePPFieldName(String name)
  overload: com.fasterxml.jackson.core.json.UTF8JsonGenerator._writePPFieldName*
  type: Method
  package: com.fasterxml.jackson.core.json
  summary: Specialized version of `_writeFieldName`, off-lined to keep the "fast path" as simple (and hopefully fast) as possible.
  syntax:
    content: protected final void _writePPFieldName(String name)
    parameters:
    - id: name
      type: java.lang.String
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.json.UTF8JsonGenerator.close()
  id: close()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.json.UTF8JsonGenerator
  langs:
  - java
  name: close()
  nameWithType: UTF8JsonGenerator.close()
  fullName: com.fasterxml.jackson.core.json.UTF8JsonGenerator.close()
  overload: com.fasterxml.jackson.core.json.UTF8JsonGenerator.close*
  type: Method
  package: com.fasterxml.jackson.core.json
  summary: >-
    Method called to close this generator, so that no more content can be written.


    Whether the underlying target (stream, writer) gets closed depends on whether this generator either manages the target (i.e. is the only one with access to the target -- case if caller passes a reference to the resource such as File, but not stream); or has feature <xref uid="" data-throw-if-not-resolved="false">Feature#AUTO_CLOSE_TARGET</xref> enabled. If either of above is true, the target is also closed. Otherwise (not managing, feature not enabled), target is not closed.
  syntax:
    content: public void close()
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.json.UTF8JsonGenerator.flush()
  id: flush()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.json.UTF8JsonGenerator
  langs:
  - java
  name: flush()
  nameWithType: UTF8JsonGenerator.flush()
  fullName: com.fasterxml.jackson.core.json.UTF8JsonGenerator.flush()
  overload: com.fasterxml.jackson.core.json.UTF8JsonGenerator.flush*
  type: Method
  package: com.fasterxml.jackson.core.json
  summary: Method called to flush any buffered content to the underlying target (output stream, writer), and to flush the target itself as well.
  syntax:
    content: public void flush()
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.json.UTF8JsonGenerator.getOutputBuffered()
  id: getOutputBuffered()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.json.UTF8JsonGenerator
  langs:
  - java
  name: getOutputBuffered()
  nameWithType: UTF8JsonGenerator.getOutputBuffered()
  fullName: com.fasterxml.jackson.core.json.UTF8JsonGenerator.getOutputBuffered()
  overload: com.fasterxml.jackson.core.json.UTF8JsonGenerator.getOutputBuffered*
  type: Method
  package: com.fasterxml.jackson.core.json
  summary: >-
    Method for verifying amount of content that is buffered by generator but not yet flushed to the underlying target (stream, writer), in units (byte, char) that the generator implementation uses for buffering; or -1 if this information is not available. Unit used is often the same as the unit of underlying target (that is, \`byte\` for <xref uid="java.io.OutputStream" data-throw-if-not-resolved="false">java.io.OutputStream</xref>, \`char\` for <xref uid="java.io.Writer" data-throw-if-not-resolved="false">java.io.Writer</xref>), but may differ if buffering is done before encoding. Default JSON-backed implementations do use matching units.


    Note: non-JSON implementations will be retrofitted for 2.6 and beyond; please report if you see -1 (missing override)
  syntax:
    content: public int getOutputBuffered()
    return:
      type: int
- uid: com.fasterxml.jackson.core.json.UTF8JsonGenerator.getOutputTarget()
  id: getOutputTarget()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.json.UTF8JsonGenerator
  langs:
  - java
  name: getOutputTarget()
  nameWithType: UTF8JsonGenerator.getOutputTarget()
  fullName: com.fasterxml.jackson.core.json.UTF8JsonGenerator.getOutputTarget()
  overload: com.fasterxml.jackson.core.json.UTF8JsonGenerator.getOutputTarget*
  type: Method
  package: com.fasterxml.jackson.core.json
  summary: >-
    Method that can be used to get access to object that is used as target for generated output; this is usually either <xref uid="java.io.OutputStream" data-throw-if-not-resolved="false">OutputStream</xref> or <xref uid="" data-throw-if-not-resolved="false">Writer</xref>, depending on what generator was constructed with. Note that returned value may be null in some cases; including case where implementation does not want to exposed raw source to caller. In cases where output has been decorated, object returned here is the decorated version; this allows some level of interaction between users of generator and decorator object.


    In general use of this accessor should be considered as "last effort", i.e. only used if no other mechanism is applicable.
  syntax:
    content: public Object getOutputTarget()
    return:
      type: java.lang.Object
- uid: com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeBinary(com.fasterxml.jackson.core.Base64Variant,byte[],int,int)
  id: writeBinary(com.fasterxml.jackson.core.Base64Variant,byte[],int,int)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.json.UTF8JsonGenerator
  langs:
  - java
  name: writeBinary(Base64Variant b64variant, byte[] data, int offset, int len)
  nameWithType: UTF8JsonGenerator.writeBinary(Base64Variant b64variant, byte[] data, int offset, int len)
  fullName: com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeBinary(Base64Variant b64variant, byte[] data, int offset, int len)
  overload: com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeBinary*
  type: Method
  package: com.fasterxml.jackson.core.json
  summary: >-
    Method that will output given chunk of binary data as base64 encoded, as a complete String value (surrounded by double quotes). This method defaults


    Note: because JSON Strings can not contain unescaped linefeeds, if linefeeds are included (as per last argument), they must be escaped. This adds overhead for decoding without improving readability. Alternatively if linefeeds are not included, resulting String value may violate the requirement of base64 RFC which mandates line-length of 76 characters and use of linefeeds. However, all <xref uid="com.fasterxml.jackson.core.JsonParser" data-throw-if-not-resolved="false">JsonParser</xref> implementations are required to accept such "long line base64"; as do typical production-level base64 decoders.
  syntax:
    content: public void writeBinary(Base64Variant b64variant, byte[] data, int offset, int len)
    parameters:
    - id: b64variant
      type: com.fasterxml.jackson.core.Base64Variant
    - id: data
      type: byte[]
    - id: offset
      type: int
    - id: len
      type: int
  exceptions:
  - type: java.io.IOException
  - type: com.fasterxml.jackson.core.JsonGenerationException
- uid: com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeBinary(com.fasterxml.jackson.core.Base64Variant,java.io.InputStream,int)
  id: writeBinary(com.fasterxml.jackson.core.Base64Variant,java.io.InputStream,int)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.json.UTF8JsonGenerator
  langs:
  - java
  name: writeBinary(Base64Variant b64variant, InputStream data, int dataLength)
  nameWithType: UTF8JsonGenerator.writeBinary(Base64Variant b64variant, InputStream data, int dataLength)
  fullName: com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeBinary(Base64Variant b64variant, InputStream data, int dataLength)
  overload: com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeBinary*
  type: Method
  package: com.fasterxml.jackson.core.json
  summary: Method similar to <xref uid="com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeBinary(com.fasterxml.jackson.core.Base64Variant,byte[],int,int)" data-throw-if-not-resolved="false">#writeBinary(Base64Variant,byte[],int,int)</xref>, but where input is provided through a stream, allowing for incremental writes without holding the whole input in memory.
  syntax:
    content: public int writeBinary(Base64Variant b64variant, InputStream data, int dataLength)
    parameters:
    - id: b64variant
      type: com.fasterxml.jackson.core.Base64Variant
    - id: data
      type: java.io.InputStream
    - id: dataLength
      type: int
    return:
      type: int
  exceptions:
  - type: java.io.IOException
  - type: com.fasterxml.jackson.core.JsonGenerationException
- uid: com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeBoolean(boolean)
  id: writeBoolean(boolean)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.json.UTF8JsonGenerator
  langs:
  - java
  name: writeBoolean(boolean state)
  nameWithType: UTF8JsonGenerator.writeBoolean(boolean state)
  fullName: com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeBoolean(boolean state)
  overload: com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeBoolean*
  type: Method
  package: com.fasterxml.jackson.core.json
  summary: Method for outputting literal JSON boolean value (one of Strings 'true' and 'false'). Can be called in any context where a value is expected (Array value, Object field value, root-level value). Additional white space may be added around the value if pretty-printing is enabled.
  syntax:
    content: public void writeBoolean(boolean state)
    parameters:
    - id: state
      type: boolean
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeEndArray()
  id: writeEndArray()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.json.UTF8JsonGenerator
  langs:
  - java
  name: writeEndArray()
  nameWithType: UTF8JsonGenerator.writeEndArray()
  fullName: com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeEndArray()
  overload: com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeEndArray*
  type: Method
  package: com.fasterxml.jackson.core.json
  summary: >-
    Method for writing closing marker of a JSON Array value (character '\]'; plus possible white space decoration if pretty-printing is enabled).


    Marker can be written if the innermost structured type is Array.
  syntax:
    content: public final void writeEndArray()
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeEndObject()
  id: writeEndObject()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.json.UTF8JsonGenerator
  langs:
  - java
  name: writeEndObject()
  nameWithType: UTF8JsonGenerator.writeEndObject()
  fullName: com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeEndObject()
  overload: com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeEndObject*
  type: Method
  package: com.fasterxml.jackson.core.json
  summary: >-
    Method for writing closing marker of an Object value (character '\}'; plus possible white space decoration if pretty-printing is enabled).


    Marker can be written if the innermost structured type is Object, and the last written event was either a complete value, or START-OBJECT marker (see JSON specification for more details).
  syntax:
    content: public final void writeEndObject()
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeFieldName(com.fasterxml.jackson.core.SerializableString)
  id: writeFieldName(com.fasterxml.jackson.core.SerializableString)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.json.UTF8JsonGenerator
  langs:
  - java
  name: writeFieldName(SerializableString name)
  nameWithType: UTF8JsonGenerator.writeFieldName(SerializableString name)
  fullName: com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeFieldName(SerializableString name)
  overload: com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeFieldName*
  type: Method
  package: com.fasterxml.jackson.core.json
  summary: >-
    Method similar to <xref uid="com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeFieldName(java.lang.String)" data-throw-if-not-resolved="false">#writeFieldName(String)</xref>, main difference being that it may perform better as some of processing (such as quoting of certain characters, or encoding into external encoding if supported by generator) can be done just once and reused for later calls.


    Default implementation simple uses unprocessed name container in serialized String; implementations are strongly encouraged to make use of more efficient methods argument object has.
  syntax:
    content: public void writeFieldName(SerializableString name)
    parameters:
    - id: name
      type: com.fasterxml.jackson.core.SerializableString
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeFieldName(java.lang.String)
  id: writeFieldName(java.lang.String)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.json.UTF8JsonGenerator
  langs:
  - java
  name: writeFieldName(String name)
  nameWithType: UTF8JsonGenerator.writeFieldName(String name)
  fullName: com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeFieldName(String name)
  overload: com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeFieldName*
  type: Method
  package: com.fasterxml.jackson.core.json
  summary: >-
    Method for writing a field name (JSON String surrounded by double quotes: syntactically identical to a JSON String value), possibly decorated by white space if pretty-printing is enabled.


    Field names can only be written in Object context (check out JSON specification for details), when field name is expected (field names alternate with values).
  syntax:
    content: public void writeFieldName(String name)
    parameters:
    - id: name
      type: java.lang.String
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeNull()
  id: writeNull()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.json.UTF8JsonGenerator
  langs:
  - java
  name: writeNull()
  nameWithType: UTF8JsonGenerator.writeNull()
  fullName: com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeNull()
  overload: com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeNull*
  type: Method
  package: com.fasterxml.jackson.core.json
  summary: Method for outputting literal JSON null value. Can be called in any context where a value is expected (Array value, Object field value, root-level value). Additional white space may be added around the value if pretty-printing is enabled.
  syntax:
    content: public void writeNull()
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeNumber(char[],int,int)
  id: writeNumber(char[],int,int)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.json.UTF8JsonGenerator
  langs:
  - java
  name: writeNumber(char[] encodedValueBuffer, int offset, int length)
  nameWithType: UTF8JsonGenerator.writeNumber(char[] encodedValueBuffer, int offset, int length)
  fullName: com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeNumber(char[] encodedValueBuffer, int offset, int length)
  overload: com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeNumber*
  type: Method
  package: com.fasterxml.jackson.core.json
  summary: Overloaded version of <xref uid="com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeNumber(java.lang.String)" data-throw-if-not-resolved="false">#writeNumber(String)</xref> with same semantics but possibly more efficient operation.
  syntax:
    content: public void writeNumber(char[] encodedValueBuffer, int offset, int length)
    parameters:
    - id: encodedValueBuffer
      type: char[]
    - id: offset
      type: int
    - id: length
      type: int
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeNumber(double)
  id: writeNumber(double)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.json.UTF8JsonGenerator
  langs:
  - java
  name: writeNumber(double d)
  nameWithType: UTF8JsonGenerator.writeNumber(double d)
  fullName: com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeNumber(double d)
  overload: com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeNumber*
  type: Method
  package: com.fasterxml.jackson.core.json
  summary: Method for outputting indicate JSON numeric value. Can be called in any context where a value is expected (Array value, Object field value, root-level value). Additional white space may be added around the value if pretty-printing is enabled.
  syntax:
    content: public void writeNumber(double d)
    parameters:
    - id: d
      type: double
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeNumber(float)
  id: writeNumber(float)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.json.UTF8JsonGenerator
  langs:
  - java
  name: writeNumber(float f)
  nameWithType: UTF8JsonGenerator.writeNumber(float f)
  fullName: com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeNumber(float f)
  overload: com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeNumber*
  type: Method
  package: com.fasterxml.jackson.core.json
  summary: Method for outputting indicate JSON numeric value. Can be called in any context where a value is expected (Array value, Object field value, root-level value). Additional white space may be added around the value if pretty-printing is enabled.
  syntax:
    content: public void writeNumber(float f)
    parameters:
    - id: f
      type: float
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeNumber(int)
  id: writeNumber(int)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.json.UTF8JsonGenerator
  langs:
  - java
  name: writeNumber(int i)
  nameWithType: UTF8JsonGenerator.writeNumber(int i)
  fullName: com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeNumber(int i)
  overload: com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeNumber*
  type: Method
  package: com.fasterxml.jackson.core.json
  summary: Method for outputting given value as JSON number. Can be called in any context where a value is expected (Array value, Object field value, root-level value). Additional white space may be added around the value if pretty-printing is enabled.
  syntax:
    content: public void writeNumber(int i)
    parameters:
    - id: i
      type: int
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeNumber(java.lang.String)
  id: writeNumber(java.lang.String)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.json.UTF8JsonGenerator
  langs:
  - java
  name: writeNumber(String encodedValue)
  nameWithType: UTF8JsonGenerator.writeNumber(String encodedValue)
  fullName: com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeNumber(String encodedValue)
  overload: com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeNumber*
  type: Method
  package: com.fasterxml.jackson.core.json
  summary: >-
    Write method that can be used for custom numeric types that can not be (easily?) converted to "standard" Java number types. Because numbers are not surrounded by double quotes, regular <xref uid="com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeString*" data-throw-if-not-resolved="false">#writeString</xref> method can not be used; nor <xref uid="com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeRaw*" data-throw-if-not-resolved="false">#writeRaw</xref> because that does not properly handle value separators needed in Array or Object contexts.


    Note: because of lack of type safety, some generator implementations may not be able to implement this method. For example, if a binary JSON format is used, it may require type information for encoding; similarly for generator-wrappers around Java objects or JSON nodes. If implementation does not implement this method, it needs to throw <xref uid="" data-throw-if-not-resolved="false">UnsupportedOperationException</xref>.
  syntax:
    content: public void writeNumber(String encodedValue)
    parameters:
    - id: encodedValue
      type: java.lang.String
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeNumber(java.math.BigDecimal)
  id: writeNumber(java.math.BigDecimal)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.json.UTF8JsonGenerator
  langs:
  - java
  name: writeNumber(BigDecimal value)
  nameWithType: UTF8JsonGenerator.writeNumber(BigDecimal value)
  fullName: com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeNumber(BigDecimal value)
  overload: com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeNumber*
  type: Method
  package: com.fasterxml.jackson.core.json
  summary: Method for outputting indicate JSON numeric value. Can be called in any context where a value is expected (Array value, Object field value, root-level value). Additional white space may be added around the value if pretty-printing is enabled.
  syntax:
    content: public void writeNumber(BigDecimal value)
    parameters:
    - id: value
      type: java.math.BigDecimal
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeNumber(java.math.BigInteger)
  id: writeNumber(java.math.BigInteger)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.json.UTF8JsonGenerator
  langs:
  - java
  name: writeNumber(BigInteger value)
  nameWithType: UTF8JsonGenerator.writeNumber(BigInteger value)
  fullName: com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeNumber(BigInteger value)
  overload: com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeNumber*
  type: Method
  package: com.fasterxml.jackson.core.json
  summary: Method for outputting given value as JSON number. Can be called in any context where a value is expected (Array value, Object field value, root-level value). Additional white space may be added around the value if pretty-printing is enabled.
  syntax:
    content: public void writeNumber(BigInteger value)
    parameters:
    - id: value
      type: java.math.BigInteger
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeNumber(long)
  id: writeNumber(long)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.json.UTF8JsonGenerator
  langs:
  - java
  name: writeNumber(long l)
  nameWithType: UTF8JsonGenerator.writeNumber(long l)
  fullName: com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeNumber(long l)
  overload: com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeNumber*
  type: Method
  package: com.fasterxml.jackson.core.json
  summary: Method for outputting given value as JSON number. Can be called in any context where a value is expected (Array value, Object field value, root-level value). Additional white space may be added around the value if pretty-printing is enabled.
  syntax:
    content: public void writeNumber(long l)
    parameters:
    - id: l
      type: long
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeNumber(short)
  id: writeNumber(short)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.json.UTF8JsonGenerator
  langs:
  - java
  name: writeNumber(short s)
  nameWithType: UTF8JsonGenerator.writeNumber(short s)
  fullName: com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeNumber(short s)
  overload: com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeNumber*
  type: Method
  package: com.fasterxml.jackson.core.json
  summary: Method for outputting given value as JSON number. Can be called in any context where a value is expected (Array value, Object field value, root-level value). Additional white space may be added around the value if pretty-printing is enabled.
  syntax:
    content: public void writeNumber(short s)
    parameters:
    - id: s
      type: short
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeRaw(char)
  id: writeRaw(char)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.json.UTF8JsonGenerator
  langs:
  - java
  name: writeRaw(char ch)
  nameWithType: UTF8JsonGenerator.writeRaw(char ch)
  fullName: com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeRaw(char ch)
  overload: com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeRaw*
  type: Method
  package: com.fasterxml.jackson.core.json
  summary: >-
    Method that will force generator to copy input text verbatim with **no** modifications (including that no escaping is done and no separators are added even if context \[array, object\] would otherwise require such). If such separators are desired, use <xref uid="com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeRawValue*" data-throw-if-not-resolved="false">#writeRawValue(String)</xref> instead.


    Note that not all generator implementations necessarily support such by-pass methods: those that do not will throw <xref uid="" data-throw-if-not-resolved="false">UnsupportedOperationException</xref>.
  syntax:
    content: public void writeRaw(char ch)
    parameters:
    - id: ch
      type: char
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeRaw(char[],int,int)
  id: writeRaw(char[],int,int)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.json.UTF8JsonGenerator
  langs:
  - java
  name: writeRaw(char[] cbuf, int offset, int len)
  nameWithType: UTF8JsonGenerator.writeRaw(char[] cbuf, int offset, int len)
  fullName: com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeRaw(char[] cbuf, int offset, int len)
  overload: com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeRaw*
  type: Method
  package: com.fasterxml.jackson.core.json
  summary: >-
    Method that will force generator to copy input text verbatim with **no** modifications (including that no escaping is done and no separators are added even if context \[array, object\] would otherwise require such). If such separators are desired, use <xref uid="com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeRawValue*" data-throw-if-not-resolved="false">#writeRawValue(String)</xref> instead.


    Note that not all generator implementations necessarily support such by-pass methods: those that do not will throw <xref uid="" data-throw-if-not-resolved="false">UnsupportedOperationException</xref>.
  syntax:
    content: public final void writeRaw(char[] cbuf, int offset, int len)
    parameters:
    - id: cbuf
      type: char[]
    - id: offset
      type: int
    - id: len
      type: int
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeRaw(com.fasterxml.jackson.core.SerializableString)
  id: writeRaw(com.fasterxml.jackson.core.SerializableString)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.json.UTF8JsonGenerator
  langs:
  - java
  name: writeRaw(SerializableString text)
  nameWithType: UTF8JsonGenerator.writeRaw(SerializableString text)
  fullName: com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeRaw(SerializableString text)
  overload: com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeRaw*
  type: Method
  package: com.fasterxml.jackson.core.json
  summary: >-
    Method that will force generator to copy input text verbatim with **no** modifications (including that no escaping is done and no separators are added even if context \[array, object\] would otherwise require such). If such separators are desired, use <xref uid="com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeRawValue*" data-throw-if-not-resolved="false">#writeRawValue(String)</xref> instead.


    Note that not all generator implementations necessarily support such by-pass methods: those that do not will throw <xref uid="" data-throw-if-not-resolved="false">UnsupportedOperationException</xref>.


    The default implementation delegates to <xref uid="com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeRaw(java.lang.String)" data-throw-if-not-resolved="false">#writeRaw(String)</xref>; other backends that support raw inclusion of text are encouraged to implement it in more efficient manner (especially if they use UTF-8 encoding).
  syntax:
    content: public void writeRaw(SerializableString text)
    parameters:
    - id: text
      type: com.fasterxml.jackson.core.SerializableString
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeRaw(java.lang.String)
  id: writeRaw(java.lang.String)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.json.UTF8JsonGenerator
  langs:
  - java
  name: writeRaw(String text)
  nameWithType: UTF8JsonGenerator.writeRaw(String text)
  fullName: com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeRaw(String text)
  overload: com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeRaw*
  type: Method
  package: com.fasterxml.jackson.core.json
  summary: >-
    Method that will force generator to copy input text verbatim with **no** modifications (including that no escaping is done and no separators are added even if context \[array, object\] would otherwise require such). If such separators are desired, use <xref uid="com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeRawValue*" data-throw-if-not-resolved="false">#writeRawValue(String)</xref> instead.


    Note that not all generator implementations necessarily support such by-pass methods: those that do not will throw <xref uid="" data-throw-if-not-resolved="false">UnsupportedOperationException</xref>.
  syntax:
    content: public void writeRaw(String text)
    parameters:
    - id: text
      type: java.lang.String
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeRaw(java.lang.String,int,int)
  id: writeRaw(java.lang.String,int,int)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.json.UTF8JsonGenerator
  langs:
  - java
  name: writeRaw(String text, int offset, int len)
  nameWithType: UTF8JsonGenerator.writeRaw(String text, int offset, int len)
  fullName: com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeRaw(String text, int offset, int len)
  overload: com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeRaw*
  type: Method
  package: com.fasterxml.jackson.core.json
  summary: >-
    Method that will force generator to copy input text verbatim with **no** modifications (including that no escaping is done and no separators are added even if context \[array, object\] would otherwise require such). If such separators are desired, use <xref uid="com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeRawValue*" data-throw-if-not-resolved="false">#writeRawValue(String)</xref> instead.


    Note that not all generator implementations necessarily support such by-pass methods: those that do not will throw <xref uid="" data-throw-if-not-resolved="false">UnsupportedOperationException</xref>.
  syntax:
    content: public void writeRaw(String text, int offset, int len)
    parameters:
    - id: text
      type: java.lang.String
    - id: offset
      type: int
    - id: len
      type: int
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeRawUTF8String(byte[],int,int)
  id: writeRawUTF8String(byte[],int,int)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.json.UTF8JsonGenerator
  langs:
  - java
  name: writeRawUTF8String(byte[] text, int offset, int length)
  nameWithType: UTF8JsonGenerator.writeRawUTF8String(byte[] text, int offset, int length)
  fullName: com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeRawUTF8String(byte[] text, int offset, int length)
  overload: com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeRawUTF8String*
  type: Method
  package: com.fasterxml.jackson.core.json
  summary: >-
    Method similar to <xref uid="com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeString(java.lang.String)" data-throw-if-not-resolved="false">#writeString(String)</xref> but that takes as its input a UTF-8 encoded String that is to be output as-is, without additional escaping (type of which depends on data format; backslashes for JSON). However, quoting that data format requires (like double-quotes for JSON) will be added around the value if and as necessary.


    Note that some backends may choose not to support this method: for example, if underlying destination is a <xref uid="java.io.Writer" data-throw-if-not-resolved="false">java.io.Writer</xref> using this method would require UTF-8 decoding. If so, implementation may instead choose to throw a <xref uid="" data-throw-if-not-resolved="false">UnsupportedOperationException</xref> due to ineffectiveness of having to decode input.
  syntax:
    content: public void writeRawUTF8String(byte[] text, int offset, int length)
    parameters:
    - id: text
      type: byte[]
    - id: offset
      type: int
    - id: length
      type: int
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeRawValue(com.fasterxml.jackson.core.SerializableString)
  id: writeRawValue(com.fasterxml.jackson.core.SerializableString)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.json.UTF8JsonGenerator
  langs:
  - java
  name: writeRawValue(SerializableString text)
  nameWithType: UTF8JsonGenerator.writeRawValue(SerializableString text)
  fullName: com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeRawValue(SerializableString text)
  overload: com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeRawValue*
  type: Method
  package: com.fasterxml.jackson.core.json
  summary: Method similar to <xref uid="com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeRawValue*" data-throw-if-not-resolved="false">#writeRawValue(String)</xref>, but potentially more efficient as it may be able to use pre-encoded content (similar to <xref uid="com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeRaw(com.fasterxml.jackson.core.SerializableString)" data-throw-if-not-resolved="false">#writeRaw(SerializableString)</xref>.
  syntax:
    content: public void writeRawValue(SerializableString text)
    parameters:
    - id: text
      type: com.fasterxml.jackson.core.SerializableString
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeStartArray()
  id: writeStartArray()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.json.UTF8JsonGenerator
  langs:
  - java
  name: writeStartArray()
  nameWithType: UTF8JsonGenerator.writeStartArray()
  fullName: com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeStartArray()
  overload: com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeStartArray*
  type: Method
  package: com.fasterxml.jackson.core.json
  summary: >-
    Method for writing starting marker of a Array value (for JSON this is character '\['; plus possible white space decoration if pretty-printing is enabled).


    Array values can be written in any context where values are allowed: meaning everywhere except for when a field name is expected.
  syntax:
    content: public final void writeStartArray()
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeStartArray(int)
  id: writeStartArray(int)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.json.UTF8JsonGenerator
  langs:
  - java
  name: writeStartArray(int size)
  nameWithType: UTF8JsonGenerator.writeStartArray(int size)
  fullName: com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeStartArray(int size)
  overload: com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeStartArray*
  type: Method
  package: com.fasterxml.jackson.core.json
  summary: >-
    Method for writing start marker of an Array value, similar to <xref uid="com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeStartArray()" data-throw-if-not-resolved="false">#writeStartArray()</xref>, but also specifying how many elements will be written for the array before calling <xref uid="com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeEndArray()" data-throw-if-not-resolved="false">#writeEndArray()</xref>.


    Default implementation simply calls <xref uid="com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeStartArray()" data-throw-if-not-resolved="false">#writeStartArray()</xref>.
  syntax:
    content: public void writeStartArray(int size)
    parameters:
    - id: size
      type: int
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeStartObject()
  id: writeStartObject()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.json.UTF8JsonGenerator
  langs:
  - java
  name: writeStartObject()
  nameWithType: UTF8JsonGenerator.writeStartObject()
  fullName: com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeStartObject()
  overload: com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeStartObject*
  type: Method
  package: com.fasterxml.jackson.core.json
  summary: >-
    Method for writing starting marker of an Object value (character '\{'; plus possible white space decoration if pretty-printing is enabled).


    Object values can be written in any context where values are allowed: meaning everywhere except for when a field name is expected.
  syntax:
    content: public final void writeStartObject()
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeStartObject(java.lang.Object)
  id: writeStartObject(java.lang.Object)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.json.UTF8JsonGenerator
  langs:
  - java
  name: writeStartObject(Object forValue)
  nameWithType: UTF8JsonGenerator.writeStartObject(Object forValue)
  fullName: com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeStartObject(Object forValue)
  overload: com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeStartObject*
  type: Method
  package: com.fasterxml.jackson.core.json
  summary: >-
    Method for writing starting marker of an Object value to represent the given Java Object value. Argument is offered as metadata, but more importantly it should be assigned as the "current value" for the Object content that gets constructed and initialized.


    Object values can be written in any context where values are allowed: meaning everywhere except for when a field name is expected.
  syntax:
    content: public void writeStartObject(Object forValue)
    parameters:
    - id: forValue
      type: java.lang.Object
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeString(char[],int,int)
  id: writeString(char[],int,int)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.json.UTF8JsonGenerator
  langs:
  - java
  name: writeString(char[] text, int offset, int len)
  nameWithType: UTF8JsonGenerator.writeString(char[] text, int offset, int len)
  fullName: com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeString(char[] text, int offset, int len)
  overload: com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeString*
  type: Method
  package: com.fasterxml.jackson.core.json
  summary: Method for outputting a String value. Depending on context this means either array element, (object) field value or a stand alone String; but in all cases, String will be surrounded in double quotes, and contents will be properly escaped as required by JSON specification.
  syntax:
    content: public void writeString(char[] text, int offset, int len)
    parameters:
    - id: text
      type: char[]
    - id: offset
      type: int
    - id: len
      type: int
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeString(com.fasterxml.jackson.core.SerializableString)
  id: writeString(com.fasterxml.jackson.core.SerializableString)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.json.UTF8JsonGenerator
  langs:
  - java
  name: writeString(SerializableString text)
  nameWithType: UTF8JsonGenerator.writeString(SerializableString text)
  fullName: com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeString(SerializableString text)
  overload: com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeString*
  type: Method
  package: com.fasterxml.jackson.core.json
  summary: >-
    Method similar to <xref uid="com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeString(java.lang.String)" data-throw-if-not-resolved="false">#writeString(String)</xref>, but that takes <xref uid="com.fasterxml.jackson.core.SerializableString" data-throw-if-not-resolved="false">SerializableString</xref> which can make this potentially more efficient to call as generator may be able to reuse quoted and/or encoded representation.


    Default implementation just calls <xref uid="com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeString(java.lang.String)" data-throw-if-not-resolved="false">#writeString(String)</xref>; sub-classes should override it with more efficient implementation if possible.
  syntax:
    content: public final void writeString(SerializableString text)
    parameters:
    - id: text
      type: com.fasterxml.jackson.core.SerializableString
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeString(java.io.Reader,int)
  id: writeString(java.io.Reader,int)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.json.UTF8JsonGenerator
  langs:
  - java
  name: writeString(Reader reader, int len)
  nameWithType: UTF8JsonGenerator.writeString(Reader reader, int len)
  fullName: com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeString(Reader reader, int len)
  overload: com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeString*
  type: Method
  package: com.fasterxml.jackson.core.json
  summary: Method for outputting a String value. Depending on context this means either array element, (object) field value or a stand alone String; but in all cases, String will be surrounded in double quotes, and contents will be properly escaped as required by JSON specification. If the reader is null, then write a null. If len is < 0, then write all contents of the reader. Otherwise, write only len characters.
  syntax:
    content: public void writeString(Reader reader, int len)
    parameters:
    - id: reader
      type: java.io.Reader
    - id: len
      type: int
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeString(java.lang.String)
  id: writeString(java.lang.String)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.json.UTF8JsonGenerator
  langs:
  - java
  name: writeString(String text)
  nameWithType: UTF8JsonGenerator.writeString(String text)
  fullName: com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeString(String text)
  overload: com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeString*
  type: Method
  package: com.fasterxml.jackson.core.json
  summary: Method for outputting a String value. Depending on context this means either array element, (object) field value or a stand alone String; but in all cases, String will be surrounded in double quotes, and contents will be properly escaped as required by JSON specification.
  syntax:
    content: public void writeString(String text)
    parameters:
    - id: text
      type: java.lang.String
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeUTF8String(byte[],int,int)
  id: writeUTF8String(byte[],int,int)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.json.UTF8JsonGenerator
  langs:
  - java
  name: writeUTF8String(byte[] text, int offset, int len)
  nameWithType: UTF8JsonGenerator.writeUTF8String(byte[] text, int offset, int len)
  fullName: com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeUTF8String(byte[] text, int offset, int len)
  overload: com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeUTF8String*
  type: Method
  package: com.fasterxml.jackson.core.json
  summary: >-
    Method similar to <xref uid="com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeString(java.lang.String)" data-throw-if-not-resolved="false">#writeString(String)</xref> but that takes as its input a UTF-8 encoded String which has **not** been escaped using whatever escaping scheme data format requires (for JSON that is backslash-escaping for control characters and double-quotes; for other formats something else). This means that textual JSON backends need to check if value needs JSON escaping, but otherwise can just be copied as is to output. Also, quoting that data format requires (like double-quotes for JSON) will be added around the value if and as necessary.


    Note that some backends may choose not to support this method: for example, if underlying destination is a <xref uid="java.io.Writer" data-throw-if-not-resolved="false">java.io.Writer</xref> using this method would require UTF-8 decoding. In this case generator implementation may instead choose to throw a <xref uid="" data-throw-if-not-resolved="false">UnsupportedOperationException</xref> due to ineffectiveness of having to decode input.
  syntax:
    content: public void writeUTF8String(byte[] text, int offset, int len)
    parameters:
    - id: text
      type: byte[]
    - id: offset
      type: int
    - id: len
      type: int
  exceptions:
  - type: java.io.IOException
references:
- uid: com.fasterxml.jackson.core.io.IOContext
  name: IOContext
  nameWithType: IOContext
  fullName: com.fasterxml.jackson.core.io.IOContext
- uid: int
  spec.java:
  - uid: int
    name: int
    fullName: int
- uid: com.fasterxml.jackson.core.ObjectCodec
  name: ObjectCodec
  nameWithType: ObjectCodec
  fullName: com.fasterxml.jackson.core.ObjectCodec
- uid: java.io.OutputStream
  spec.java:
  - uid: java.io.OutputStream
    name: OutputStream
    fullName: java.io.OutputStream
- uid: char
  spec.java:
  - uid: char
    name: char
    fullName: char
- uid: com.fasterxml.jackson.core.json.UTF8JsonGenerator.UTF8JsonGenerator*
  name: UTF8JsonGenerator
  nameWithType: UTF8JsonGenerator.UTF8JsonGenerator
  fullName: com.fasterxml.jackson.core.json.UTF8JsonGenerator.UTF8JsonGenerator
  package: com.fasterxml.jackson.core.json
- uid: byte[]
  spec.java:
  - uid: byte
    name: byte
    fullName: byte
  - name: '[]'
    fullName: '[]'
- uid: boolean
  spec.java:
  - uid: boolean
    name: boolean
    fullName: boolean
- uid: java.lang.Object
  spec.java:
  - uid: java.lang.Object
    name: Object
    fullName: java.lang.Object
- uid: com.fasterxml.jackson.core.json.UTF8JsonGenerator.getOutputTarget*
  name: getOutputTarget
  nameWithType: UTF8JsonGenerator.getOutputTarget
  fullName: com.fasterxml.jackson.core.json.UTF8JsonGenerator.getOutputTarget
  package: com.fasterxml.jackson.core.json
- uid: com.fasterxml.jackson.core.json.UTF8JsonGenerator.getOutputBuffered*
  name: getOutputBuffered
  nameWithType: UTF8JsonGenerator.getOutputBuffered
  fullName: com.fasterxml.jackson.core.json.UTF8JsonGenerator.getOutputBuffered
  package: com.fasterxml.jackson.core.json
- uid: java.io.IOException
  spec.java:
  - uid: java.io.IOException
    name: IOException
    fullName: java.io.IOException
- uid: java.lang.String
  spec.java:
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
- uid: com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeFieldName*
  name: writeFieldName
  nameWithType: UTF8JsonGenerator.writeFieldName
  fullName: com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeFieldName
  package: com.fasterxml.jackson.core.json
- uid: com.fasterxml.jackson.core.SerializableString
  name: SerializableString
  nameWithType: SerializableString
  fullName: com.fasterxml.jackson.core.SerializableString
- uid: com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeStartArray*
  name: writeStartArray
  nameWithType: UTF8JsonGenerator.writeStartArray
  fullName: com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeStartArray
  package: com.fasterxml.jackson.core.json
- uid: com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeEndArray*
  name: writeEndArray
  nameWithType: UTF8JsonGenerator.writeEndArray
  fullName: com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeEndArray
  package: com.fasterxml.jackson.core.json
- uid: com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeStartObject*
  name: writeStartObject
  nameWithType: UTF8JsonGenerator.writeStartObject
  fullName: com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeStartObject
  package: com.fasterxml.jackson.core.json
- uid: com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeEndObject*
  name: writeEndObject
  nameWithType: UTF8JsonGenerator.writeEndObject
  fullName: com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeEndObject
  package: com.fasterxml.jackson.core.json
- uid: com.fasterxml.jackson.core.json.UTF8JsonGenerator._writePPFieldName*
  name: _writePPFieldName
  nameWithType: UTF8JsonGenerator._writePPFieldName
  fullName: com.fasterxml.jackson.core.json.UTF8JsonGenerator._writePPFieldName
  package: com.fasterxml.jackson.core.json
- uid: com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeString*
  name: writeString
  nameWithType: UTF8JsonGenerator.writeString
  fullName: com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeString
  package: com.fasterxml.jackson.core.json
- uid: java.io.Reader
  spec.java:
  - uid: java.io.Reader
    name: Reader
    fullName: java.io.Reader
- uid: char[]
  spec.java:
  - uid: char
    name: char
    fullName: char
  - name: '[]'
    fullName: '[]'
- uid: com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeRawUTF8String*
  name: writeRawUTF8String
  nameWithType: UTF8JsonGenerator.writeRawUTF8String
  fullName: com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeRawUTF8String
  package: com.fasterxml.jackson.core.json
- uid: com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeUTF8String*
  name: writeUTF8String
  nameWithType: UTF8JsonGenerator.writeUTF8String
  fullName: com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeUTF8String
  package: com.fasterxml.jackson.core.json
- uid: com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeRaw*
  name: writeRaw
  nameWithType: UTF8JsonGenerator.writeRaw
  fullName: com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeRaw
  package: com.fasterxml.jackson.core.json
- uid: com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeRawValue*
  name: writeRawValue
  nameWithType: UTF8JsonGenerator.writeRawValue
  fullName: com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeRawValue
  package: com.fasterxml.jackson.core.json
- uid: com.fasterxml.jackson.core.JsonGenerationException
  name: JsonGenerationException
  nameWithType: JsonGenerationException
  fullName: com.fasterxml.jackson.core.JsonGenerationException
- uid: com.fasterxml.jackson.core.Base64Variant
  name: Base64Variant
  nameWithType: Base64Variant
  fullName: com.fasterxml.jackson.core.Base64Variant
- uid: com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeBinary*
  name: writeBinary
  nameWithType: UTF8JsonGenerator.writeBinary
  fullName: com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeBinary
  package: com.fasterxml.jackson.core.json
- uid: java.io.InputStream
  spec.java:
  - uid: java.io.InputStream
    name: InputStream
    fullName: java.io.InputStream
- uid: short
  spec.java:
  - uid: short
    name: short
    fullName: short
- uid: com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeNumber*
  name: writeNumber
  nameWithType: UTF8JsonGenerator.writeNumber
  fullName: com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeNumber
  package: com.fasterxml.jackson.core.json
- uid: long
  spec.java:
  - uid: long
    name: long
    fullName: long
- uid: java.math.BigInteger
  spec.java:
  - uid: java.math.BigInteger
    name: BigInteger
    fullName: java.math.BigInteger
- uid: double
  spec.java:
  - uid: double
    name: double
    fullName: double
- uid: float
  spec.java:
  - uid: float
    name: float
    fullName: float
- uid: java.math.BigDecimal
  spec.java:
  - uid: java.math.BigDecimal
    name: BigDecimal
    fullName: java.math.BigDecimal
- uid: com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeBoolean*
  name: writeBoolean
  nameWithType: UTF8JsonGenerator.writeBoolean
  fullName: com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeBoolean
  package: com.fasterxml.jackson.core.json
- uid: com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeNull*
  name: writeNull
  nameWithType: UTF8JsonGenerator.writeNull
  fullName: com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeNull
  package: com.fasterxml.jackson.core.json
- uid: com.fasterxml.jackson.core.json.UTF8JsonGenerator._verifyValueWrite*
  name: _verifyValueWrite
  nameWithType: UTF8JsonGenerator._verifyValueWrite
  fullName: com.fasterxml.jackson.core.json.UTF8JsonGenerator._verifyValueWrite
  package: com.fasterxml.jackson.core.json
- uid: com.fasterxml.jackson.core.json.UTF8JsonGenerator.flush*
  name: flush
  nameWithType: UTF8JsonGenerator.flush
  fullName: com.fasterxml.jackson.core.json.UTF8JsonGenerator.flush
  package: com.fasterxml.jackson.core.json
- uid: com.fasterxml.jackson.core.json.UTF8JsonGenerator.close*
  name: close
  nameWithType: UTF8JsonGenerator.close
  fullName: com.fasterxml.jackson.core.json.UTF8JsonGenerator.close
  package: com.fasterxml.jackson.core.json
- uid: com.fasterxml.jackson.core.json.UTF8JsonGenerator._releaseBuffers*
  name: _releaseBuffers
  nameWithType: UTF8JsonGenerator._releaseBuffers
  fullName: com.fasterxml.jackson.core.json.UTF8JsonGenerator._releaseBuffers
  package: com.fasterxml.jackson.core.json
- uid: com.fasterxml.jackson.core.json.UTF8JsonGenerator._writeBinary*
  name: _writeBinary
  nameWithType: UTF8JsonGenerator._writeBinary
  fullName: com.fasterxml.jackson.core.json.UTF8JsonGenerator._writeBinary
  package: com.fasterxml.jackson.core.json
- uid: com.fasterxml.jackson.core.json.UTF8JsonGenerator._outputSurrogates*
  name: _outputSurrogates
  nameWithType: UTF8JsonGenerator._outputSurrogates
  fullName: com.fasterxml.jackson.core.json.UTF8JsonGenerator._outputSurrogates
  package: com.fasterxml.jackson.core.json
- uid: com.fasterxml.jackson.core.json.UTF8JsonGenerator._flushBuffer*
  name: _flushBuffer
  nameWithType: UTF8JsonGenerator._flushBuffer
  fullName: com.fasterxml.jackson.core.json.UTF8JsonGenerator._flushBuffer
  package: com.fasterxml.jackson.core.json
- uid: byte
  spec.java:
  - uid: byte
    name: byte
    fullName: byte
- uid: com.fasterxml.jackson.core.json.JsonGeneratorImpl
  name: JsonGeneratorImpl
  nameWithType: JsonGeneratorImpl
  fullName: com.fasterxml.jackson.core.json.JsonGeneratorImpl
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: com.fasterxml.jackson.core.json.JsonGeneratorImpl._verifyPrettyValueWrite(java.lang.String,int)
  name: JsonGeneratorImpl._verifyPrettyValueWrite(String,int)
  nameWithType: JsonGeneratorImpl._verifyPrettyValueWrite(String,int)
  fullName: com.fasterxml.jackson.core.json.JsonGeneratorImpl._verifyPrettyValueWrite(java.lang.String,int)
- uid: java.lang.Object.finalize()
  name: Object.finalize()
  nameWithType: Object.finalize()
  fullName: java.lang.Object.finalize()
- uid: com.fasterxml.jackson.core.JsonGenerator.writeObjectField(java.lang.String,java.lang.Object)
  name: JsonGenerator.writeObjectField(String,Object)
  nameWithType: JsonGenerator.writeObjectField(String,Object)
  fullName: com.fasterxml.jackson.core.JsonGenerator.writeObjectField(java.lang.String,java.lang.Object)
- uid: com.fasterxml.jackson.core.JsonGenerator.writeArray(double[],int,int)
  name: JsonGenerator.writeArray(double[],int,int)
  nameWithType: JsonGenerator.writeArray(double[],int,int)
  fullName: com.fasterxml.jackson.core.JsonGenerator.writeArray(double[],int,int)
- uid: com.fasterxml.jackson.core.JsonGenerator.writeBinary(byte[])
  name: JsonGenerator.writeBinary(byte[])
  nameWithType: JsonGenerator.writeBinary(byte[])
  fullName: com.fasterxml.jackson.core.JsonGenerator.writeBinary(byte[])
- uid: com.fasterxml.jackson.core.JsonGenerator.copyCurrentEvent(com.fasterxml.jackson.core.JsonParser)
  name: JsonGenerator.copyCurrentEvent(JsonParser)
  nameWithType: JsonGenerator.copyCurrentEvent(JsonParser)
  fullName: com.fasterxml.jackson.core.JsonGenerator.copyCurrentEvent(com.fasterxml.jackson.core.JsonParser)
- uid: com.fasterxml.jackson.core.base.GeneratorBase.getFeatureMask()
  name: GeneratorBase.getFeatureMask()
  nameWithType: GeneratorBase.getFeatureMask()
  fullName: com.fasterxml.jackson.core.base.GeneratorBase.getFeatureMask()
- uid: com.fasterxml.jackson.core.JsonGenerator.writeStartObject()
  name: JsonGenerator.writeStartObject()
  nameWithType: JsonGenerator.writeStartObject()
  fullName: com.fasterxml.jackson.core.JsonGenerator.writeStartObject()
- uid: com.fasterxml.jackson.core.JsonGenerator.writeArrayFieldStart(java.lang.String)
  name: JsonGenerator.writeArrayFieldStart(String)
  nameWithType: JsonGenerator.writeArrayFieldStart(String)
  fullName: com.fasterxml.jackson.core.JsonGenerator.writeArrayFieldStart(java.lang.String)
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: com.fasterxml.jackson.core.JsonGenerator.writeNumber(double)
  name: JsonGenerator.writeNumber(double)
  nameWithType: JsonGenerator.writeNumber(double)
  fullName: com.fasterxml.jackson.core.JsonGenerator.writeNumber(double)
- uid: com.fasterxml.jackson.core.base.GeneratorBase.writeBinary(com.fasterxml.jackson.core.Base64Variant,java.io.InputStream,int)
  name: GeneratorBase.writeBinary(Base64Variant,InputStream,int)
  nameWithType: GeneratorBase.writeBinary(Base64Variant,InputStream,int)
  fullName: com.fasterxml.jackson.core.base.GeneratorBase.writeBinary(com.fasterxml.jackson.core.Base64Variant,java.io.InputStream,int)
- uid: com.fasterxml.jackson.core.JsonGenerator.isEnabled(com.fasterxml.jackson.core.StreamWriteFeature)
  name: JsonGenerator.isEnabled(StreamWriteFeature)
  nameWithType: JsonGenerator.isEnabled(StreamWriteFeature)
  fullName: com.fasterxml.jackson.core.JsonGenerator.isEnabled(com.fasterxml.jackson.core.StreamWriteFeature)
- uid: com.fasterxml.jackson.core.JsonGenerator.writeEndObject()
  name: JsonGenerator.writeEndObject()
  nameWithType: JsonGenerator.writeEndObject()
  fullName: com.fasterxml.jackson.core.JsonGenerator.writeEndObject()
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: com.fasterxml.jackson.core.json.JsonGeneratorImpl._reportCantWriteValueExpectName(java.lang.String)
  name: JsonGeneratorImpl._reportCantWriteValueExpectName(String)
  nameWithType: JsonGeneratorImpl._reportCantWriteValueExpectName(String)
  fullName: com.fasterxml.jackson.core.json.JsonGeneratorImpl._reportCantWriteValueExpectName(java.lang.String)
- uid: com.fasterxml.jackson.core.JsonGenerator.getSchema()
  name: JsonGenerator.getSchema()
  nameWithType: JsonGenerator.getSchema()
  fullName: com.fasterxml.jackson.core.JsonGenerator.getSchema()
- uid: com.fasterxml.jackson.core.JsonGenerator.writeNull()
  name: JsonGenerator.writeNull()
  nameWithType: JsonGenerator.writeNull()
  fullName: com.fasterxml.jackson.core.JsonGenerator.writeNull()
- uid: com.fasterxml.jackson.core.base.GeneratorBase.writeRawValue(com.fasterxml.jackson.core.SerializableString)
  name: GeneratorBase.writeRawValue(SerializableString)
  nameWithType: GeneratorBase.writeRawValue(SerializableString)
  fullName: com.fasterxml.jackson.core.base.GeneratorBase.writeRawValue(com.fasterxml.jackson.core.SerializableString)
- uid: com.fasterxml.jackson.core.JsonGenerator.writeStartObject(java.lang.Object,int)
  name: JsonGenerator.writeStartObject(Object,int)
  nameWithType: JsonGenerator.writeStartObject(Object,int)
  fullName: com.fasterxml.jackson.core.JsonGenerator.writeStartObject(java.lang.Object,int)
- uid: com.fasterxml.jackson.core.JsonGenerator.getPrettyPrinter()
  name: JsonGenerator.getPrettyPrinter()
  nameWithType: JsonGenerator.getPrettyPrinter()
  fullName: com.fasterxml.jackson.core.JsonGenerator.getPrettyPrinter()
- uid: com.fasterxml.jackson.core.base.GeneratorBase.writeRawValue(java.lang.String)
  name: GeneratorBase.writeRawValue(String)
  nameWithType: GeneratorBase.writeRawValue(String)
  fullName: com.fasterxml.jackson.core.base.GeneratorBase.writeRawValue(java.lang.String)
- uid: com.fasterxml.jackson.core.JsonGenerator._reportUnsupportedOperation()
  name: JsonGenerator._reportUnsupportedOperation()
  nameWithType: JsonGenerator._reportUnsupportedOperation()
  fullName: com.fasterxml.jackson.core.JsonGenerator._reportUnsupportedOperation()
- uid: com.fasterxml.jackson.core.JsonGenerator.writeStartArray(int)
  name: JsonGenerator.writeStartArray(int)
  nameWithType: JsonGenerator.writeStartArray(int)
  fullName: com.fasterxml.jackson.core.JsonGenerator.writeStartArray(int)
- uid: com.fasterxml.jackson.core.JsonGenerator.canWriteTypeId()
  name: JsonGenerator.canWriteTypeId()
  nameWithType: JsonGenerator.canWriteTypeId()
  fullName: com.fasterxml.jackson.core.JsonGenerator.canWriteTypeId()
- uid: com.fasterxml.jackson.core.JsonGenerator.writeNumber(java.math.BigDecimal)
  name: JsonGenerator.writeNumber(BigDecimal)
  nameWithType: JsonGenerator.writeNumber(BigDecimal)
  fullName: com.fasterxml.jackson.core.JsonGenerator.writeNumber(java.math.BigDecimal)
- uid: com.fasterxml.jackson.core.JsonGenerator.copyCurrentStructure(com.fasterxml.jackson.core.JsonParser)
  name: JsonGenerator.copyCurrentStructure(JsonParser)
  nameWithType: JsonGenerator.copyCurrentStructure(JsonParser)
  fullName: com.fasterxml.jackson.core.JsonGenerator.copyCurrentStructure(com.fasterxml.jackson.core.JsonParser)
- uid: com.fasterxml.jackson.core.json.JsonGeneratorImpl.enable(com.fasterxml.jackson.core.JsonGenerator.Feature)
  name: JsonGeneratorImpl.enable(JsonGenerator.Feature)
  nameWithType: JsonGeneratorImpl.enable(JsonGenerator.Feature)
  fullName: com.fasterxml.jackson.core.json.JsonGeneratorImpl.enable(com.fasterxml.jackson.core.JsonGenerator.Feature)
- uid: com.fasterxml.jackson.core.base.GeneratorBase._verifyValueWrite(java.lang.String)
  name: GeneratorBase._verifyValueWrite(String)
  nameWithType: GeneratorBase._verifyValueWrite(String)
  fullName: com.fasterxml.jackson.core.base.GeneratorBase._verifyValueWrite(java.lang.String)
- uid: com.fasterxml.jackson.core.json.JsonGeneratorImpl.getHighestEscapedChar()
  name: JsonGeneratorImpl.getHighestEscapedChar()
  nameWithType: JsonGeneratorImpl.getHighestEscapedChar()
  fullName: com.fasterxml.jackson.core.json.JsonGeneratorImpl.getHighestEscapedChar()
- uid: com.fasterxml.jackson.core.JsonGenerator.canWriteObjectId()
  name: JsonGenerator.canWriteObjectId()
  nameWithType: JsonGenerator.canWriteObjectId()
  fullName: com.fasterxml.jackson.core.JsonGenerator.canWriteObjectId()
- uid: com.fasterxml.jackson.core.base.GeneratorBase.writeRawValue(java.lang.String,int,int)
  name: GeneratorBase.writeRawValue(String,int,int)
  nameWithType: GeneratorBase.writeRawValue(String,int,int)
  fullName: com.fasterxml.jackson.core.base.GeneratorBase.writeRawValue(java.lang.String,int,int)
- uid: com.fasterxml.jackson.core.JsonGenerator.getOutputBuffered()
  name: JsonGenerator.getOutputBuffered()
  nameWithType: JsonGenerator.getOutputBuffered()
  fullName: com.fasterxml.jackson.core.JsonGenerator.getOutputBuffered()
- uid: com.fasterxml.jackson.core.JsonGenerator.writeObjectRef(java.lang.Object)
  name: JsonGenerator.writeObjectRef(Object)
  nameWithType: JsonGenerator.writeObjectRef(Object)
  fullName: com.fasterxml.jackson.core.JsonGenerator.writeObjectRef(java.lang.Object)
- uid: com.fasterxml.jackson.core.JsonGenerator.writeObjectId(java.lang.Object)
  name: JsonGenerator.writeObjectId(Object)
  nameWithType: JsonGenerator.writeObjectId(Object)
  fullName: com.fasterxml.jackson.core.JsonGenerator.writeObjectId(java.lang.Object)
- uid: com.fasterxml.jackson.core.json.JsonGeneratorImpl.getCharacterEscapes()
  name: JsonGeneratorImpl.getCharacterEscapes()
  nameWithType: JsonGeneratorImpl.getCharacterEscapes()
  fullName: com.fasterxml.jackson.core.json.JsonGeneratorImpl.getCharacterEscapes()
- uid: com.fasterxml.jackson.core.JsonGenerator.writeArray(int[],int,int)
  name: JsonGenerator.writeArray(int[],int,int)
  nameWithType: JsonGenerator.writeArray(int[],int,int)
  fullName: com.fasterxml.jackson.core.JsonGenerator.writeArray(int[],int,int)
- uid: com.fasterxml.jackson.core.JsonGenerator.configure(com.fasterxml.jackson.core.JsonGenerator.Feature,boolean)
  name: JsonGenerator.configure(JsonGenerator.Feature,boolean)
  nameWithType: JsonGenerator.configure(JsonGenerator.Feature,boolean)
  fullName: com.fasterxml.jackson.core.JsonGenerator.configure(com.fasterxml.jackson.core.JsonGenerator.Feature,boolean)
- uid: com.fasterxml.jackson.core.JsonGenerator.writeEndArray()
  name: JsonGenerator.writeEndArray()
  nameWithType: JsonGenerator.writeEndArray()
  fullName: com.fasterxml.jackson.core.JsonGenerator.writeEndArray()
- uid: com.fasterxml.jackson.core.json.JsonGeneratorImpl.disable(com.fasterxml.jackson.core.JsonGenerator.Feature)
  name: JsonGeneratorImpl.disable(JsonGenerator.Feature)
  nameWithType: JsonGeneratorImpl.disable(JsonGenerator.Feature)
  fullName: com.fasterxml.jackson.core.json.JsonGeneratorImpl.disable(com.fasterxml.jackson.core.JsonGenerator.Feature)
- uid: com.fasterxml.jackson.core.json.JsonGeneratorImpl.setCharacterEscapes(com.fasterxml.jackson.core.io.CharacterEscapes)
  name: JsonGeneratorImpl.setCharacterEscapes(CharacterEscapes)
  nameWithType: JsonGeneratorImpl.setCharacterEscapes(CharacterEscapes)
  fullName: com.fasterxml.jackson.core.json.JsonGeneratorImpl.setCharacterEscapes(com.fasterxml.jackson.core.io.CharacterEscapes)
- uid: com.fasterxml.jackson.core.JsonGenerator.writeUTF8String(byte[],int,int)
  name: JsonGenerator.writeUTF8String(byte[],int,int)
  nameWithType: JsonGenerator.writeUTF8String(byte[],int,int)
  fullName: com.fasterxml.jackson.core.JsonGenerator.writeUTF8String(byte[],int,int)
- uid: com.fasterxml.jackson.core.JsonGenerator.writeBoolean(boolean)
  name: JsonGenerator.writeBoolean(boolean)
  nameWithType: JsonGenerator.writeBoolean(boolean)
  fullName: com.fasterxml.jackson.core.JsonGenerator.writeBoolean(boolean)
- uid: com.fasterxml.jackson.core.json.JsonGeneratorImpl.version()
  name: JsonGeneratorImpl.version()
  nameWithType: JsonGeneratorImpl.version()
  fullName: com.fasterxml.jackson.core.json.JsonGeneratorImpl.version()
- uid: com.fasterxml.jackson.core.JsonGenerator.writeRaw(com.fasterxml.jackson.core.SerializableString)
  name: JsonGenerator.writeRaw(SerializableString)
  nameWithType: JsonGenerator.writeRaw(SerializableString)
  fullName: com.fasterxml.jackson.core.JsonGenerator.writeRaw(com.fasterxml.jackson.core.SerializableString)
- uid: com.fasterxml.jackson.core.base.GeneratorBase.setCurrentValue(java.lang.Object)
  name: GeneratorBase.setCurrentValue(Object)
  nameWithType: GeneratorBase.setCurrentValue(Object)
  fullName: com.fasterxml.jackson.core.base.GeneratorBase.setCurrentValue(java.lang.Object)
- uid: com.fasterxml.jackson.core.JsonGenerator.writeTypeId(java.lang.Object)
  name: JsonGenerator.writeTypeId(Object)
  nameWithType: JsonGenerator.writeTypeId(Object)
  fullName: com.fasterxml.jackson.core.JsonGenerator.writeTypeId(java.lang.Object)
- uid: com.fasterxml.jackson.core.base.GeneratorBase._asString(java.math.BigDecimal)
  name: GeneratorBase._asString(BigDecimal)
  nameWithType: GeneratorBase._asString(BigDecimal)
  fullName: com.fasterxml.jackson.core.base.GeneratorBase._asString(java.math.BigDecimal)
- uid: com.fasterxml.jackson.core.base.GeneratorBase.overrideStdFeatures(int,int)
  name: GeneratorBase.overrideStdFeatures(int,int)
  nameWithType: GeneratorBase.overrideStdFeatures(int,int)
  fullName: com.fasterxml.jackson.core.base.GeneratorBase.overrideStdFeatures(int,int)
- uid: com.fasterxml.jackson.core.JsonGenerator.writeBinary(byte[],int,int)
  name: JsonGenerator.writeBinary(byte[],int,int)
  nameWithType: JsonGenerator.writeBinary(byte[],int,int)
  fullName: com.fasterxml.jackson.core.JsonGenerator.writeBinary(byte[],int,int)
- uid: com.fasterxml.jackson.core.base.GeneratorBase._releaseBuffers()
  name: GeneratorBase._releaseBuffers()
  nameWithType: GeneratorBase._releaseBuffers()
  fullName: com.fasterxml.jackson.core.base.GeneratorBase._releaseBuffers()
- uid: com.fasterxml.jackson.core.JsonGenerator.writeObjectFieldStart(java.lang.String)
  name: JsonGenerator.writeObjectFieldStart(String)
  nameWithType: JsonGenerator.writeObjectFieldStart(String)
  fullName: com.fasterxml.jackson.core.JsonGenerator.writeObjectFieldStart(java.lang.String)
- uid: com.fasterxml.jackson.core.base.GeneratorBase.writeFieldName(com.fasterxml.jackson.core.SerializableString)
  name: GeneratorBase.writeFieldName(SerializableString)
  nameWithType: GeneratorBase.writeFieldName(SerializableString)
  fullName: com.fasterxml.jackson.core.base.GeneratorBase.writeFieldName(com.fasterxml.jackson.core.SerializableString)
- uid: com.fasterxml.jackson.core.JsonGenerator._throwInternal()
  name: JsonGenerator._throwInternal()
  nameWithType: JsonGenerator._throwInternal()
  fullName: com.fasterxml.jackson.core.JsonGenerator._throwInternal()
- uid: com.fasterxml.jackson.core.JsonGenerator.writeRaw(char[],int,int)
  name: JsonGenerator.writeRaw(char[],int,int)
  nameWithType: JsonGenerator.writeRaw(char[],int,int)
  fullName: com.fasterxml.jackson.core.JsonGenerator.writeRaw(char[],int,int)
- uid: com.fasterxml.jackson.core.base.GeneratorBase.writeObject(java.lang.Object)
  name: GeneratorBase.writeObject(Object)
  nameWithType: GeneratorBase.writeObject(Object)
  fullName: com.fasterxml.jackson.core.base.GeneratorBase.writeObject(java.lang.Object)
- uid: com.fasterxml.jackson.core.JsonGenerator.writeStartArray()
  name: JsonGenerator.writeStartArray()
  nameWithType: JsonGenerator.writeStartArray()
  fullName: com.fasterxml.jackson.core.JsonGenerator.writeStartArray()
- uid: com.fasterxml.jackson.core.JsonGenerator.getOutputTarget()
  name: JsonGenerator.getOutputTarget()
  nameWithType: JsonGenerator.getOutputTarget()
  fullName: com.fasterxml.jackson.core.JsonGenerator.getOutputTarget()
- uid: com.fasterxml.jackson.core.base.GeneratorBase.writeStartObject(java.lang.Object)
  name: GeneratorBase.writeStartObject(Object)
  nameWithType: GeneratorBase.writeStartObject(Object)
  fullName: com.fasterxml.jackson.core.base.GeneratorBase.writeStartObject(java.lang.Object)
- uid: com.fasterxml.jackson.core.base.GeneratorBase._constructDefaultPrettyPrinter()
  name: GeneratorBase._constructDefaultPrettyPrinter()
  nameWithType: GeneratorBase._constructDefaultPrettyPrinter()
  fullName: com.fasterxml.jackson.core.base.GeneratorBase._constructDefaultPrettyPrinter()
- uid: com.fasterxml.jackson.core.base.GeneratorBase.isEnabled(com.fasterxml.jackson.core.JsonGenerator.Feature)
  name: GeneratorBase.isEnabled(JsonGenerator.Feature)
  nameWithType: GeneratorBase.isEnabled(JsonGenerator.Feature)
  fullName: com.fasterxml.jackson.core.base.GeneratorBase.isEnabled(com.fasterxml.jackson.core.JsonGenerator.Feature)
- uid: java.lang.Object.clone()
  name: Object.clone()
  nameWithType: Object.clone()
  fullName: java.lang.Object.clone()
- uid: com.fasterxml.jackson.core.JsonGenerator.writeBinaryField(java.lang.String,byte[])
  name: JsonGenerator.writeBinaryField(String,byte[])
  nameWithType: JsonGenerator.writeBinaryField(String,byte[])
  fullName: com.fasterxml.jackson.core.JsonGenerator.writeBinaryField(java.lang.String,byte[])
- uid: com.fasterxml.jackson.core.JsonGenerator.writeStartArray(java.lang.Object,int)
  name: JsonGenerator.writeStartArray(Object,int)
  nameWithType: JsonGenerator.writeStartArray(Object,int)
  fullName: com.fasterxml.jackson.core.JsonGenerator.writeStartArray(java.lang.Object,int)
- uid: com.fasterxml.jackson.core.JsonGenerator.writeNumber(java.lang.String)
  name: JsonGenerator.writeNumber(String)
  nameWithType: JsonGenerator.writeNumber(String)
  fullName: com.fasterxml.jackson.core.JsonGenerator.writeNumber(java.lang.String)
- uid: com.fasterxml.jackson.core.JsonGenerator.writeNumber(char[],int,int)
  name: JsonGenerator.writeNumber(char[],int,int)
  nameWithType: JsonGenerator.writeNumber(char[],int,int)
  fullName: com.fasterxml.jackson.core.JsonGenerator.writeNumber(char[],int,int)
- uid: com.fasterxml.jackson.core.JsonGenerator.writeRaw(char)
  name: JsonGenerator.writeRaw(char)
  nameWithType: JsonGenerator.writeRaw(char)
  fullName: com.fasterxml.jackson.core.JsonGenerator.writeRaw(char)
- uid: com.fasterxml.jackson.core.base.GeneratorBase._decodeSurrogate(int,int)
  name: GeneratorBase._decodeSurrogate(int,int)
  nameWithType: GeneratorBase._decodeSurrogate(int,int)
  fullName: com.fasterxml.jackson.core.base.GeneratorBase._decodeSurrogate(int,int)
- uid: com.fasterxml.jackson.core.base.GeneratorBase.close()
  name: GeneratorBase.close()
  nameWithType: GeneratorBase.close()
  fullName: com.fasterxml.jackson.core.base.GeneratorBase.close()
- uid: com.fasterxml.jackson.core.JsonGenerator.writeNumber(long)
  name: JsonGenerator.writeNumber(long)
  nameWithType: JsonGenerator.writeNumber(long)
  fullName: com.fasterxml.jackson.core.JsonGenerator.writeNumber(long)
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: com.fasterxml.jackson.core.JsonGenerator.writeNumber(float)
  name: JsonGenerator.writeNumber(float)
  nameWithType: JsonGenerator.writeNumber(float)
  fullName: com.fasterxml.jackson.core.JsonGenerator.writeNumber(float)
- uid: com.fasterxml.jackson.core.base.GeneratorBase.writeTree(com.fasterxml.jackson.core.TreeNode)
  name: GeneratorBase.writeTree(TreeNode)
  nameWithType: GeneratorBase.writeTree(TreeNode)
  fullName: com.fasterxml.jackson.core.base.GeneratorBase.writeTree(com.fasterxml.jackson.core.TreeNode)
- uid: com.fasterxml.jackson.core.JsonGenerator.writeNumber(java.math.BigInteger)
  name: JsonGenerator.writeNumber(BigInteger)
  nameWithType: JsonGenerator.writeNumber(BigInteger)
  fullName: com.fasterxml.jackson.core.JsonGenerator.writeNumber(java.math.BigInteger)
- uid: com.fasterxml.jackson.core.JsonGenerator.writeRaw(java.lang.String)
  name: JsonGenerator.writeRaw(String)
  nameWithType: JsonGenerator.writeRaw(String)
  fullName: com.fasterxml.jackson.core.JsonGenerator.writeRaw(java.lang.String)
- uid: com.fasterxml.jackson.core.JsonGenerator.writeRawUTF8String(byte[],int,int)
  name: JsonGenerator.writeRawUTF8String(byte[],int,int)
  nameWithType: JsonGenerator.writeRawUTF8String(byte[],int,int)
  fullName: com.fasterxml.jackson.core.JsonGenerator.writeRawUTF8String(byte[],int,int)
- uid: com.fasterxml.jackson.core.JsonGenerator.canWriteFormattedNumbers()
  name: JsonGenerator.canWriteFormattedNumbers()
  nameWithType: JsonGenerator.canWriteFormattedNumbers()
  fullName: com.fasterxml.jackson.core.JsonGenerator.canWriteFormattedNumbers()
- uid: java.lang.Object.equals(java.lang.Object)
  name: Object.equals(Object)
  nameWithType: Object.equals(Object)
  fullName: java.lang.Object.equals(java.lang.Object)
- uid: com.fasterxml.jackson.core.json.JsonGeneratorImpl._checkStdFeatureChanges(int,int)
  name: JsonGeneratorImpl._checkStdFeatureChanges(int,int)
  nameWithType: JsonGeneratorImpl._checkStdFeatureChanges(int,int)
  fullName: com.fasterxml.jackson.core.json.JsonGeneratorImpl._checkStdFeatureChanges(int,int)
- uid: com.fasterxml.jackson.core.json.JsonGeneratorImpl.setHighestNonEscapedChar(int)
  name: JsonGeneratorImpl.setHighestNonEscapedChar(int)
  nameWithType: JsonGeneratorImpl.setHighestNonEscapedChar(int)
  fullName: com.fasterxml.jackson.core.json.JsonGeneratorImpl.setHighestNonEscapedChar(int)
- uid: java.lang.Object.toString()
  name: Object.toString()
  nameWithType: Object.toString()
  fullName: java.lang.Object.toString()
- uid: com.fasterxml.jackson.core.JsonGenerator.writeArray(long[],int,int)
  name: JsonGenerator.writeArray(long[],int,int)
  nameWithType: JsonGenerator.writeArray(long[],int,int)
  fullName: com.fasterxml.jackson.core.JsonGenerator.writeArray(long[],int,int)
- uid: com.fasterxml.jackson.core.JsonGenerator._reportError(java.lang.String)
  name: JsonGenerator._reportError(String)
  nameWithType: JsonGenerator._reportError(String)
  fullName: com.fasterxml.jackson.core.JsonGenerator._reportError(java.lang.String)
- uid: com.fasterxml.jackson.core.JsonGenerator.writeStringField(java.lang.String,java.lang.String)
  name: JsonGenerator.writeStringField(String,String)
  nameWithType: JsonGenerator.writeStringField(String,String)
  fullName: com.fasterxml.jackson.core.JsonGenerator.writeStringField(java.lang.String,java.lang.String)
- uid: com.fasterxml.jackson.core.JsonGenerator.writeTypePrefix(com.fasterxml.jackson.core.type.WritableTypeId)
  name: JsonGenerator.writeTypePrefix(WritableTypeId)
  nameWithType: JsonGenerator.writeTypePrefix(WritableTypeId)
  fullName: com.fasterxml.jackson.core.JsonGenerator.writeTypePrefix(com.fasterxml.jackson.core.type.WritableTypeId)
- uid: com.fasterxml.jackson.core.JsonGenerator.writeNumber(short)
  name: JsonGenerator.writeNumber(short)
  nameWithType: JsonGenerator.writeNumber(short)
  fullName: com.fasterxml.jackson.core.JsonGenerator.writeNumber(short)
- uid: com.fasterxml.jackson.core.JsonGenerator.writeTypeSuffix(com.fasterxml.jackson.core.type.WritableTypeId)
  name: JsonGenerator.writeTypeSuffix(WritableTypeId)
  nameWithType: JsonGenerator.writeTypeSuffix(WritableTypeId)
  fullName: com.fasterxml.jackson.core.JsonGenerator.writeTypeSuffix(com.fasterxml.jackson.core.type.WritableTypeId)
- uid: com.fasterxml.jackson.core.JsonGenerator.writeString(java.lang.String)
  name: JsonGenerator.writeString(String)
  nameWithType: JsonGenerator.writeString(String)
  fullName: com.fasterxml.jackson.core.JsonGenerator.writeString(java.lang.String)
- uid: com.fasterxml.jackson.core.JsonGenerator.canUseSchema(com.fasterxml.jackson.core.FormatSchema)
  name: JsonGenerator.canUseSchema(FormatSchema)
  nameWithType: JsonGenerator.canUseSchema(FormatSchema)
  fullName: com.fasterxml.jackson.core.JsonGenerator.canUseSchema(com.fasterxml.jackson.core.FormatSchema)
- uid: com.fasterxml.jackson.core.base.GeneratorBase.setFeatureMask(int)
  name: GeneratorBase.setFeatureMask(int)
  nameWithType: GeneratorBase.setFeatureMask(int)
  fullName: com.fasterxml.jackson.core.base.GeneratorBase.setFeatureMask(int)
- uid: com.fasterxml.jackson.core.JsonGenerator.writeBooleanField(java.lang.String,boolean)
  name: JsonGenerator.writeBooleanField(String,boolean)
  nameWithType: JsonGenerator.writeBooleanField(String,boolean)
  fullName: com.fasterxml.jackson.core.JsonGenerator.writeBooleanField(java.lang.String,boolean)
- uid: com.fasterxml.jackson.core.JsonGenerator.setSchema(com.fasterxml.jackson.core.FormatSchema)
  name: JsonGenerator.setSchema(FormatSchema)
  nameWithType: JsonGenerator.setSchema(FormatSchema)
  fullName: com.fasterxml.jackson.core.JsonGenerator.setSchema(com.fasterxml.jackson.core.FormatSchema)
- uid: com.fasterxml.jackson.core.JsonGenerator.writeArray(java.lang.String[],int,int)
  name: JsonGenerator.writeArray(String[],int,int)
  nameWithType: JsonGenerator.writeArray(String[],int,int)
  fullName: com.fasterxml.jackson.core.JsonGenerator.writeArray(java.lang.String[],int,int)
- uid: com.fasterxml.jackson.core.JsonGenerator.writeNumberField(java.lang.String,long)
  name: JsonGenerator.writeNumberField(String,long)
  nameWithType: JsonGenerator.writeNumberField(String,long)
  fullName: com.fasterxml.jackson.core.JsonGenerator.writeNumberField(java.lang.String,long)
- uid: com.fasterxml.jackson.core.JsonGenerator.writeNullField(java.lang.String)
  name: JsonGenerator.writeNullField(String)
  nameWithType: JsonGenerator.writeNullField(String)
  fullName: com.fasterxml.jackson.core.JsonGenerator.writeNullField(java.lang.String)
- uid: com.fasterxml.jackson.core.base.GeneratorBase.isClosed()
  name: GeneratorBase.isClosed()
  nameWithType: GeneratorBase.isClosed()
  fullName: com.fasterxml.jackson.core.base.GeneratorBase.isClosed()
- uid: com.fasterxml.jackson.core.base.GeneratorBase.getCurrentValue()
  name: GeneratorBase.getCurrentValue()
  nameWithType: GeneratorBase.getCurrentValue()
  fullName: com.fasterxml.jackson.core.base.GeneratorBase.getCurrentValue()
- uid: com.fasterxml.jackson.core.base.GeneratorBase.getOutputContext()
  name: GeneratorBase.getOutputContext()
  nameWithType: GeneratorBase.getOutputContext()
  fullName: com.fasterxml.jackson.core.base.GeneratorBase.getOutputContext()
- uid: com.fasterxml.jackson.core.JsonGenerator.writeStartArray(java.lang.Object)
  name: JsonGenerator.writeStartArray(Object)
  nameWithType: JsonGenerator.writeStartArray(Object)
  fullName: com.fasterxml.jackson.core.JsonGenerator.writeStartArray(java.lang.Object)
- uid: com.fasterxml.jackson.core.JsonGenerator.writeRaw(java.lang.String,int,int)
  name: JsonGenerator.writeRaw(String,int,int)
  nameWithType: JsonGenerator.writeRaw(String,int,int)
  fullName: com.fasterxml.jackson.core.JsonGenerator.writeRaw(java.lang.String,int,int)
- uid: com.fasterxml.jackson.core.JsonGenerator._verifyOffsets(int,int,int)
  name: JsonGenerator._verifyOffsets(int,int,int)
  nameWithType: JsonGenerator._verifyOffsets(int,int,int)
  fullName: com.fasterxml.jackson.core.JsonGenerator._verifyOffsets(int,int,int)
- uid: com.fasterxml.jackson.core.JsonGenerator.writeEmbeddedObject(java.lang.Object)
  name: JsonGenerator.writeEmbeddedObject(Object)
  nameWithType: JsonGenerator.writeEmbeddedObject(Object)
  fullName: com.fasterxml.jackson.core.JsonGenerator.writeEmbeddedObject(java.lang.Object)
- uid: com.fasterxml.jackson.core.JsonGenerator.writeNumberField(java.lang.String,float)
  name: JsonGenerator.writeNumberField(String,float)
  nameWithType: JsonGenerator.writeNumberField(String,float)
  fullName: com.fasterxml.jackson.core.JsonGenerator.writeNumberField(java.lang.String,float)
- uid: com.fasterxml.jackson.core.base.GeneratorBase.setCodec(com.fasterxml.jackson.core.ObjectCodec)
  name: GeneratorBase.setCodec(ObjectCodec)
  nameWithType: GeneratorBase.setCodec(ObjectCodec)
  fullName: com.fasterxml.jackson.core.base.GeneratorBase.setCodec(com.fasterxml.jackson.core.ObjectCodec)
- uid: com.fasterxml.jackson.core.JsonGenerator.writeString(java.io.Reader,int)
  name: JsonGenerator.writeString(Reader,int)
  nameWithType: JsonGenerator.writeString(Reader,int)
  fullName: com.fasterxml.jackson.core.JsonGenerator.writeString(java.io.Reader,int)
- uid: com.fasterxml.jackson.core.base.GeneratorBase.writeRawValue(char[],int,int)
  name: GeneratorBase.writeRawValue(char[],int,int)
  nameWithType: GeneratorBase.writeRawValue(char[],int,int)
  fullName: com.fasterxml.jackson.core.base.GeneratorBase.writeRawValue(char[],int,int)
- uid: java.lang.Object.hashCode()
  name: Object.hashCode()
  nameWithType: Object.hashCode()
  fullName: java.lang.Object.hashCode()
- uid: com.fasterxml.jackson.core.JsonGenerator.canOmitFields()
  name: JsonGenerator.canOmitFields()
  nameWithType: JsonGenerator.canOmitFields()
  fullName: com.fasterxml.jackson.core.JsonGenerator.canOmitFields()
- uid: com.fasterxml.jackson.core.JsonGenerator.writeBinary(com.fasterxml.jackson.core.Base64Variant,byte[],int,int)
  name: JsonGenerator.writeBinary(Base64Variant,byte[],int,int)
  nameWithType: JsonGenerator.writeBinary(Base64Variant,byte[],int,int)
  fullName: com.fasterxml.jackson.core.JsonGenerator.writeBinary(com.fasterxml.jackson.core.Base64Variant,byte[],int,int)
- uid: com.fasterxml.jackson.core.JsonGenerator.canWriteBinaryNatively()
  name: JsonGenerator.canWriteBinaryNatively()
  nameWithType: JsonGenerator.canWriteBinaryNatively()
  fullName: com.fasterxml.jackson.core.JsonGenerator.canWriteBinaryNatively()
- uid: com.fasterxml.jackson.core.json.JsonGeneratorImpl.setRootValueSeparator(com.fasterxml.jackson.core.SerializableString)
  name: JsonGeneratorImpl.setRootValueSeparator(SerializableString)
  nameWithType: JsonGeneratorImpl.setRootValueSeparator(SerializableString)
  fullName: com.fasterxml.jackson.core.json.JsonGeneratorImpl.setRootValueSeparator(com.fasterxml.jackson.core.SerializableString)
- uid: com.fasterxml.jackson.core.JsonGenerator.getFormatFeatures()
  name: JsonGenerator.getFormatFeatures()
  nameWithType: JsonGenerator.getFormatFeatures()
  fullName: com.fasterxml.jackson.core.JsonGenerator.getFormatFeatures()
- uid: com.fasterxml.jackson.core.JsonGenerator.overrideFormatFeatures(int,int)
  name: JsonGenerator.overrideFormatFeatures(int,int)
  nameWithType: JsonGenerator.overrideFormatFeatures(int,int)
  fullName: com.fasterxml.jackson.core.JsonGenerator.overrideFormatFeatures(int,int)
- uid: com.fasterxml.jackson.core.JsonGenerator.setPrettyPrinter(com.fasterxml.jackson.core.PrettyPrinter)
  name: JsonGenerator.setPrettyPrinter(PrettyPrinter)
  nameWithType: JsonGenerator.setPrettyPrinter(PrettyPrinter)
  fullName: com.fasterxml.jackson.core.JsonGenerator.setPrettyPrinter(com.fasterxml.jackson.core.PrettyPrinter)
- uid: com.fasterxml.jackson.core.JsonGenerator._writeSimpleObject(java.lang.Object)
  name: JsonGenerator._writeSimpleObject(Object)
  nameWithType: JsonGenerator._writeSimpleObject(Object)
  fullName: com.fasterxml.jackson.core.JsonGenerator._writeSimpleObject(java.lang.Object)
- uid: com.fasterxml.jackson.core.base.GeneratorBase.useDefaultPrettyPrinter()
  name: GeneratorBase.useDefaultPrettyPrinter()
  nameWithType: GeneratorBase.useDefaultPrettyPrinter()
  fullName: com.fasterxml.jackson.core.base.GeneratorBase.useDefaultPrettyPrinter()
- uid: com.fasterxml.jackson.core.JsonGenerator.writeNumberField(java.lang.String,int)
  name: JsonGenerator.writeNumberField(String,int)
  nameWithType: JsonGenerator.writeNumberField(String,int)
  fullName: com.fasterxml.jackson.core.JsonGenerator.writeNumberField(java.lang.String,int)
- uid: com.fasterxml.jackson.core.base.GeneratorBase.writeString(com.fasterxml.jackson.core.SerializableString)
  name: GeneratorBase.writeString(SerializableString)
  nameWithType: GeneratorBase.writeString(SerializableString)
  fullName: com.fasterxml.jackson.core.base.GeneratorBase.writeString(com.fasterxml.jackson.core.SerializableString)
- uid: com.fasterxml.jackson.core.JsonGenerator.writeNumber(int)
  name: JsonGenerator.writeNumber(int)
  nameWithType: JsonGenerator.writeNumber(int)
  fullName: com.fasterxml.jackson.core.JsonGenerator.writeNumber(int)
- uid: com.fasterxml.jackson.core.JsonGenerator._copyCurrentContents(com.fasterxml.jackson.core.JsonParser)
  name: JsonGenerator._copyCurrentContents(JsonParser)
  nameWithType: JsonGenerator._copyCurrentContents(JsonParser)
  fullName: com.fasterxml.jackson.core.JsonGenerator._copyCurrentContents(com.fasterxml.jackson.core.JsonParser)
- uid: com.fasterxml.jackson.core.JsonGenerator.writeOmittedField(java.lang.String)
  name: JsonGenerator.writeOmittedField(String)
  nameWithType: JsonGenerator.writeOmittedField(String)
  fullName: com.fasterxml.jackson.core.JsonGenerator.writeOmittedField(java.lang.String)
- uid: com.fasterxml.jackson.core.base.GeneratorBase.getCodec()
  name: GeneratorBase.getCodec()
  nameWithType: GeneratorBase.getCodec()
  fullName: com.fasterxml.jackson.core.base.GeneratorBase.getCodec()
- uid: com.fasterxml.jackson.core.JsonGenerator.writeFieldId(long)
  name: JsonGenerator.writeFieldId(long)
  nameWithType: JsonGenerator.writeFieldId(long)
  fullName: com.fasterxml.jackson.core.JsonGenerator.writeFieldId(long)
- uid: com.fasterxml.jackson.core.base.GeneratorBase.flush()
  name: GeneratorBase.flush()
  nameWithType: GeneratorBase.flush()
  fullName: com.fasterxml.jackson.core.base.GeneratorBase.flush()
- uid: com.fasterxml.jackson.core.JsonGenerator.writeBinary(java.io.InputStream,int)
  name: JsonGenerator.writeBinary(InputStream,int)
  nameWithType: JsonGenerator.writeBinary(InputStream,int)
  fullName: com.fasterxml.jackson.core.JsonGenerator.writeBinary(java.io.InputStream,int)
- uid: com.fasterxml.jackson.core.JsonGenerator.writeNumberField(java.lang.String,java.math.BigInteger)
  name: JsonGenerator.writeNumberField(String,BigInteger)
  nameWithType: JsonGenerator.writeNumberField(String,BigInteger)
  fullName: com.fasterxml.jackson.core.JsonGenerator.writeNumberField(java.lang.String,java.math.BigInteger)
- uid: com.fasterxml.jackson.core.JsonGenerator.writeNumberField(java.lang.String,java.math.BigDecimal)
  name: JsonGenerator.writeNumberField(String,BigDecimal)
  nameWithType: JsonGenerator.writeNumberField(String,BigDecimal)
  fullName: com.fasterxml.jackson.core.JsonGenerator.writeNumberField(java.lang.String,java.math.BigDecimal)
- uid: com.fasterxml.jackson.core.JsonGenerator.writeNumberField(java.lang.String,double)
  name: JsonGenerator.writeNumberField(String,double)
  nameWithType: JsonGenerator.writeNumberField(String,double)
  fullName: com.fasterxml.jackson.core.JsonGenerator.writeNumberField(java.lang.String,double)
- uid: com.fasterxml.jackson.core.JsonGenerator.writeNumberField(java.lang.String,short)
  name: JsonGenerator.writeNumberField(String,short)
  nameWithType: JsonGenerator.writeNumberField(String,short)
  fullName: com.fasterxml.jackson.core.JsonGenerator.writeNumberField(java.lang.String,short)
- uid: com.fasterxml.jackson.core.JsonGenerator.writeFieldName(java.lang.String)
  name: JsonGenerator.writeFieldName(String)
  nameWithType: JsonGenerator.writeFieldName(String)
  fullName: com.fasterxml.jackson.core.JsonGenerator.writeFieldName(java.lang.String)
- uid: com.fasterxml.jackson.core.JsonGenerator.writeString(char[],int,int)
  name: JsonGenerator.writeString(char[],int,int)
  nameWithType: JsonGenerator.writeString(char[],int,int)
  fullName: com.fasterxml.jackson.core.JsonGenerator.writeString(char[],int,int)
