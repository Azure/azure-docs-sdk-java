### YamlMime:JavaType
uid: "com.azure.security.keyvault.keys.cryptography.CryptographyClientBuilder"
fullName: "com.azure.security.keyvault.keys.cryptography.CryptographyClientBuilder"
name: "CryptographyClientBuilder"
nameWithType: "CryptographyClientBuilder"
summary: "This class provides a fluent builder API to help aid the configuration and instantiation of the <xref uid=\"com.azure.security.keyvault.keys.cryptography.CryptographyAsyncClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"cryptography async client\"></xref> and <xref uid=\"com.azure.security.keyvault.keys.cryptography.CryptographyClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"cryptography sync client\"></xref>, by calling <xref uid=\"com.azure.security.keyvault.keys.cryptography.CryptographyClientBuilder.buildAsyncClient()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"buildAsyncClient\"></xref> and <xref uid=\"com.azure.security.keyvault.keys.cryptography.CryptographyClientBuilder.buildClient()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"buildClient\"></xref> respectively It constructs an instance of the desired client.\n\nThe minimal configuration options required by <xref uid=\"com.azure.security.keyvault.keys.cryptography.CryptographyClientBuilder\" data-throw-if-not-resolved=\"false\" data-raw-source=\"cryptographyClientBuilder\"></xref> to build <xref uid=\"com.azure.security.keyvault.keys.cryptography.CryptographyAsyncClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CryptographyAsyncClient\"></xref> are (<xref uid=\"com.azure.security.keyvault.keys.models.JsonWebKey\" data-throw-if-not-resolved=\"false\" data-raw-source=\"jsonWebKey\"></xref> or <xref uid=\"java.lang.String\" data-throw-if-not-resolved=\"false\" data-raw-source=\"jsonWebKey identifier\"></xref>) and <xref uid=\"com.azure.core.credential.TokenCredential\" data-throw-if-not-resolved=\"false\" data-raw-source=\"credential\"></xref>).\n\n```java\nCryptographyAsyncClient cryptographyAsyncClient = new CryptographyClientBuilder()\n     .keyIdentifier(\"<YOUR-KEY-ID>\")\n     .credential(new DefaultAzureCredentialBuilder().build())\n     .buildAsyncClient();\n```\n\nThe <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"log detail level\"></xref>, multiple custom <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"policies\"></xref> and custom <xref uid=\"com.azure.core.http.HttpClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"http client\"></xref> can be optionally configured in the <xref uid=\"com.azure.security.keyvault.keys.cryptography.CryptographyClientBuilder\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CryptographyClientBuilder\"></xref>.\n\n```java\nCryptographyAsyncClient cryptographyAsyncClient = new CryptographyClientBuilder()\n     .keyIdentifier(\"<Your-Key-ID>\")\n     .httpLogOptions(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BODY_AND_HEADERS))\n     .addPolicy(new KeyVaultCredentialPolicy(new DefaultAzureCredentialBuilder().build()))\n     .httpClient(HttpClient.createDefault())\n     .buildAsyncClient();\n```\n\nAlternatively, custom <xref uid=\"com.azure.core.http.HttpPipeline\" data-throw-if-not-resolved=\"false\" data-raw-source=\"http pipeline\"></xref> with custom <xref uid=\"com.azure.core.http.policy.HttpPipelinePolicy\" data-throw-if-not-resolved=\"false\" data-raw-source=\"HttpPipelinePolicy\"></xref> policies can be specified. It provides finer control over the construction of <xref uid=\"com.azure.security.keyvault.keys.cryptography.CryptographyAsyncClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CryptographyAsyncClient\"></xref> and <xref uid=\"com.azure.security.keyvault.keys.cryptography.CryptographyClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CryptographyClient\"></xref>\n\n```java\nHttpPipeline pipeline = new HttpPipelineBuilder()\n     .policies(new KeyVaultCredentialPolicy(new DefaultAzureCredentialBuilder().build()), new RetryPolicy())\n     .build();\n CryptographyAsyncClient cryptographyAsyncClient = new CryptographyClientBuilder()\n     .pipeline(pipeline)\n     .keyIdentifier(\"<YOUR-KEY-ID\")\n     .buildAsyncClient();\n```\n\nThe minimal configuration options required by <xref uid=\"com.azure.security.keyvault.keys.cryptography.CryptographyClientBuilder\" data-throw-if-not-resolved=\"false\" data-raw-source=\"cryptographyClientBuilder\"></xref> to build <xref uid=\"com.azure.security.keyvault.keys.cryptography.CryptographyClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CryptographyClient\"></xref> are <xref uid=\"com.azure.security.keyvault.keys.models.JsonWebKey\" data-throw-if-not-resolved=\"false\" data-raw-source=\"jsonWebKey\"></xref> ot <xref uid=\"java.lang.String\" data-throw-if-not-resolved=\"false\" data-raw-source=\"jsonWebKey identifier\"></xref>) and <xref uid=\"com.azure.core.credential.TokenCredential\" data-throw-if-not-resolved=\"false\" data-raw-source=\"credential\"></xref>).\n\n```java\nCryptographyClient cryptographyClient = new CryptographyClientBuilder()\n     .keyIdentifier(\"<YOUR-KEY-IDENTIFIER>\")\n     .credential(new DefaultAzureCredentialBuilder().build())\n     .buildClient();\n```"
inheritances:
- "<xref href=\"java.lang.Object\" data-throw-if-not-resolved=\"False\" />"
inheritedMembers:
- "java.lang.Object.clone()"
- "java.lang.Object.equals(java.lang.Object)"
- "java.lang.Object.finalize()"
- "java.lang.Object.getClass()"
- "java.lang.Object.hashCode()"
- "java.lang.Object.notify()"
- "java.lang.Object.notifyAll()"
- "java.lang.Object.toString()"
- "java.lang.Object.wait()"
- "java.lang.Object.wait(long)"
- "java.lang.Object.wait(long,int)"
syntax: "public final class CryptographyClientBuilder"
constructors:
- "com.azure.security.keyvault.keys.cryptography.CryptographyClientBuilder.CryptographyClientBuilder()"
methods:
- "com.azure.security.keyvault.keys.cryptography.CryptographyClientBuilder.addPolicy(com.azure.core.http.policy.HttpPipelinePolicy)"
- "com.azure.security.keyvault.keys.cryptography.CryptographyClientBuilder.buildAsyncClient()"
- "com.azure.security.keyvault.keys.cryptography.CryptographyClientBuilder.buildClient()"
- "com.azure.security.keyvault.keys.cryptography.CryptographyClientBuilder.clientOptions(com.azure.core.util.ClientOptions)"
- "com.azure.security.keyvault.keys.cryptography.CryptographyClientBuilder.configuration(com.azure.core.util.Configuration)"
- "com.azure.security.keyvault.keys.cryptography.CryptographyClientBuilder.credential(com.azure.core.credential.TokenCredential)"
- "com.azure.security.keyvault.keys.cryptography.CryptographyClientBuilder.httpClient(com.azure.core.http.HttpClient)"
- "com.azure.security.keyvault.keys.cryptography.CryptographyClientBuilder.httpLogOptions(com.azure.core.http.policy.HttpLogOptions)"
- "com.azure.security.keyvault.keys.cryptography.CryptographyClientBuilder.keyIdentifier(java.lang.String)"
- "com.azure.security.keyvault.keys.cryptography.CryptographyClientBuilder.pipeline(com.azure.core.http.HttpPipeline)"
- "com.azure.security.keyvault.keys.cryptography.CryptographyClientBuilder.retryPolicy(com.azure.core.http.policy.RetryPolicy)"
- "com.azure.security.keyvault.keys.cryptography.CryptographyClientBuilder.serviceVersion(com.azure.security.keyvault.keys.cryptography.CryptographyServiceVersion)"
type: "class"
metadata: {}
package: "com.azure.security.keyvault.keys.cryptography"
artifact: com.azure:azure-security-keyvault-keys:4.3.0-beta.3
