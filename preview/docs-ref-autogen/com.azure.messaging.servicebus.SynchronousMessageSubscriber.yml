### YamlMime:ManagedReference
items:
- uid: "com.azure.messaging.servicebus.SynchronousMessageSubscriber"
  id: "SynchronousMessageSubscriber"
  parent: "com.azure.messaging.servicebus"
  children:
  - "com.azure.messaging.servicebus.SynchronousMessageSubscriber.SynchronousMessageSubscriber(com.azure.messaging.servicebus.SynchronousReceiveWork)"
  - "com.azure.messaging.servicebus.SynchronousMessageSubscriber.dispose()"
  - "com.azure.messaging.servicebus.SynchronousMessageSubscriber.hookOnCancel()"
  - "com.azure.messaging.servicebus.SynchronousMessageSubscriber.hookOnComplete()"
  - "com.azure.messaging.servicebus.SynchronousMessageSubscriber.hookOnError(java.lang.Throwable)"
  - "com.azure.messaging.servicebus.SynchronousMessageSubscriber.hookOnNext(com.azure.messaging.servicebus.ServiceBusReceivedMessage)"
  - "com.azure.messaging.servicebus.SynchronousMessageSubscriber.hookOnSubscribe(org.reactivestreams.Subscription)"
  langs:
  - "java"
  name: "SynchronousMessageSubscriber"
  nameWithType: "SynchronousMessageSubscriber"
  fullName: "com.azure.messaging.servicebus.SynchronousMessageSubscriber"
  type: "Class"
  package: "com.azure.messaging.servicebus"
  summary: "Subscriber that listens to events and publishes them downstream and publishes events to them in the order received."
  syntax:
    content: " class SynchronousMessageSubscriber extends BaseSubscriber<ServiceBusReceivedMessage>"
  inheritance:
  - "java.lang.Object"
  - "reactor.core.publisher.BaseSubscriber"
  inheritedMembers:
  - "java.lang.Object.clone()"
  - "java.lang.Object.equals(java.lang.Object)"
  - "java.lang.Object.finalize()"
  - "java.lang.Object.getClass()"
  - "java.lang.Object.hashCode()"
  - "java.lang.Object.notify()"
  - "java.lang.Object.notifyAll()"
  - "java.lang.Object.wait()"
  - "java.lang.Object.wait(long)"
  - "java.lang.Object.wait(long,int)"
  - "reactor.core.publisher.BaseSubscriber.cancel()"
  - "reactor.core.publisher.BaseSubscriber.dispose()"
  - "reactor.core.publisher.BaseSubscriber.hookFinally(reactor.core.publisher.SignalType)"
  - "reactor.core.publisher.BaseSubscriber.hookOnCancel()"
  - "reactor.core.publisher.BaseSubscriber.hookOnComplete()"
  - "reactor.core.publisher.BaseSubscriber.hookOnError(java.lang.Throwable)"
  - "reactor.core.publisher.BaseSubscriber.hookOnNext(T)"
  - "reactor.core.publisher.BaseSubscriber.hookOnSubscribe(org.reactivestreams.Subscription)"
  - "reactor.core.publisher.BaseSubscriber.isDisposed()"
  - "reactor.core.publisher.BaseSubscriber.onComplete()"
  - "reactor.core.publisher.BaseSubscriber.onError(java.lang.Throwable)"
  - "reactor.core.publisher.BaseSubscriber.onNext(T)"
  - "reactor.core.publisher.BaseSubscriber.onSubscribe(org.reactivestreams.Subscription)"
  - "reactor.core.publisher.BaseSubscriber.request(long)"
  - "reactor.core.publisher.BaseSubscriber.requestUnbounded()"
  - "reactor.core.publisher.BaseSubscriber.safeHookFinally(reactor.core.publisher.SignalType)"
  - "reactor.core.publisher.BaseSubscriber.toString()"
  - "reactor.core.publisher.BaseSubscriber.upstream()"
- uid: "com.azure.messaging.servicebus.SynchronousMessageSubscriber.SynchronousMessageSubscriber(com.azure.messaging.servicebus.SynchronousReceiveWork)"
  id: "SynchronousMessageSubscriber(com.azure.messaging.servicebus.SynchronousReceiveWork)"
  parent: "com.azure.messaging.servicebus.SynchronousMessageSubscriber"
  langs:
  - "java"
  name: "SynchronousMessageSubscriber(SynchronousReceiveWork work)"
  nameWithType: "SynchronousMessageSubscriber.SynchronousMessageSubscriber(SynchronousReceiveWork work)"
  fullName: "com.azure.messaging.servicebus.SynchronousMessageSubscriber.SynchronousMessageSubscriber(SynchronousReceiveWork work)"
  overload: "com.azure.messaging.servicebus.SynchronousMessageSubscriber.SynchronousMessageSubscriber*"
  type: "Constructor"
  package: "com.azure.messaging.servicebus"
  syntax:
    content: " SynchronousMessageSubscriber(SynchronousReceiveWork work)"
    parameters:
    - id: "work"
      type: "com.azure.messaging.servicebus.SynchronousReceiveWork"
- uid: "com.azure.messaging.servicebus.SynchronousMessageSubscriber.dispose()"
  id: "dispose()"
  parent: "com.azure.messaging.servicebus.SynchronousMessageSubscriber"
  langs:
  - "java"
  name: "dispose()"
  nameWithType: "SynchronousMessageSubscriber.dispose()"
  fullName: "com.azure.messaging.servicebus.SynchronousMessageSubscriber.dispose()"
  overload: "com.azure.messaging.servicebus.SynchronousMessageSubscriber.dispose*"
  type: "Method"
  package: "com.azure.messaging.servicebus"
  summary: "\\{@inheritDoc\\}"
  syntax:
    content: "public void dispose()"
- uid: "com.azure.messaging.servicebus.SynchronousMessageSubscriber.hookOnCancel()"
  id: "hookOnCancel()"
  parent: "com.azure.messaging.servicebus.SynchronousMessageSubscriber"
  langs:
  - "java"
  name: "hookOnCancel()"
  nameWithType: "SynchronousMessageSubscriber.hookOnCancel()"
  fullName: "com.azure.messaging.servicebus.SynchronousMessageSubscriber.hookOnCancel()"
  overload: "com.azure.messaging.servicebus.SynchronousMessageSubscriber.hookOnCancel*"
  type: "Method"
  package: "com.azure.messaging.servicebus"
  syntax:
    content: "protected void hookOnCancel()"
- uid: "com.azure.messaging.servicebus.SynchronousMessageSubscriber.hookOnComplete()"
  id: "hookOnComplete()"
  parent: "com.azure.messaging.servicebus.SynchronousMessageSubscriber"
  langs:
  - "java"
  name: "hookOnComplete()"
  nameWithType: "SynchronousMessageSubscriber.hookOnComplete()"
  fullName: "com.azure.messaging.servicebus.SynchronousMessageSubscriber.hookOnComplete()"
  overload: "com.azure.messaging.servicebus.SynchronousMessageSubscriber.hookOnComplete*"
  type: "Method"
  package: "com.azure.messaging.servicebus"
  syntax:
    content: "protected void hookOnComplete()"
- uid: "com.azure.messaging.servicebus.SynchronousMessageSubscriber.hookOnError(java.lang.Throwable)"
  id: "hookOnError(java.lang.Throwable)"
  parent: "com.azure.messaging.servicebus.SynchronousMessageSubscriber"
  langs:
  - "java"
  name: "hookOnError(Throwable throwable)"
  nameWithType: "SynchronousMessageSubscriber.hookOnError(Throwable throwable)"
  fullName: "com.azure.messaging.servicebus.SynchronousMessageSubscriber.hookOnError(Throwable throwable)"
  overload: "com.azure.messaging.servicebus.SynchronousMessageSubscriber.hookOnError*"
  type: "Method"
  package: "com.azure.messaging.servicebus"
  summary: "\\{@inheritDoc\\}"
  syntax:
    content: "protected void hookOnError(Throwable throwable)"
    parameters:
    - id: "throwable"
      type: "java.lang.Throwable"
- uid: "com.azure.messaging.servicebus.SynchronousMessageSubscriber.hookOnNext(com.azure.messaging.servicebus.ServiceBusReceivedMessage)"
  id: "hookOnNext(com.azure.messaging.servicebus.ServiceBusReceivedMessage)"
  parent: "com.azure.messaging.servicebus.SynchronousMessageSubscriber"
  langs:
  - "java"
  name: "hookOnNext(ServiceBusReceivedMessage value)"
  nameWithType: "SynchronousMessageSubscriber.hookOnNext(ServiceBusReceivedMessage value)"
  fullName: "com.azure.messaging.servicebus.SynchronousMessageSubscriber.hookOnNext(ServiceBusReceivedMessage value)"
  overload: "com.azure.messaging.servicebus.SynchronousMessageSubscriber.hookOnNext*"
  type: "Method"
  package: "com.azure.messaging.servicebus"
  summary: "Publishes the event to the current <xref uid=\"com.azure.messaging.servicebus.SynchronousReceiveWork\" data-throw-if-not-resolved=\"false\">SynchronousReceiveWork</xref>. If that work item is complete, will dispose of the subscriber."
  syntax:
    content: "protected void hookOnNext(ServiceBusReceivedMessage value)"
    parameters:
    - id: "value"
      type: "com.azure.messaging.servicebus.ServiceBusReceivedMessage"
      description: "Event to publish."
- uid: "com.azure.messaging.servicebus.SynchronousMessageSubscriber.hookOnSubscribe(org.reactivestreams.Subscription)"
  id: "hookOnSubscribe(org.reactivestreams.Subscription)"
  parent: "com.azure.messaging.servicebus.SynchronousMessageSubscriber"
  langs:
  - "java"
  name: "hookOnSubscribe(Subscription subscription)"
  nameWithType: "SynchronousMessageSubscriber.hookOnSubscribe(Subscription subscription)"
  fullName: "com.azure.messaging.servicebus.SynchronousMessageSubscriber.hookOnSubscribe(Subscription subscription)"
  overload: "com.azure.messaging.servicebus.SynchronousMessageSubscriber.hookOnSubscribe*"
  type: "Method"
  package: "com.azure.messaging.servicebus"
  summary: "On an initial subscription, will take the first work item, and request that amount of work for it."
  syntax:
    content: "protected void hookOnSubscribe(Subscription subscription)"
    parameters:
    - id: "subscription"
      type: "org.reactivestreams.Subscription"
      description: "Subscription for upstream."
references:
- uid: "com.azure.messaging.servicebus.SynchronousReceiveWork"
  name: "SynchronousReceiveWork"
  nameWithType: "SynchronousReceiveWork"
  fullName: "com.azure.messaging.servicebus.SynchronousReceiveWork"
- uid: "com.azure.messaging.servicebus.SynchronousMessageSubscriber.SynchronousMessageSubscriber*"
  name: "SynchronousMessageSubscriber"
  nameWithType: "SynchronousMessageSubscriber.SynchronousMessageSubscriber"
  fullName: "com.azure.messaging.servicebus.SynchronousMessageSubscriber.SynchronousMessageSubscriber"
  package: "com.azure.messaging.servicebus"
- uid: "org.reactivestreams.Subscription"
  spec.java:
  - uid: "org.reactivestreams.Subscription"
    name: "Subscription"
    fullName: "org.reactivestreams.Subscription"
- uid: "com.azure.messaging.servicebus.SynchronousMessageSubscriber.hookOnSubscribe*"
  name: "hookOnSubscribe"
  nameWithType: "SynchronousMessageSubscriber.hookOnSubscribe"
  fullName: "com.azure.messaging.servicebus.SynchronousMessageSubscriber.hookOnSubscribe"
  package: "com.azure.messaging.servicebus"
- uid: "com.azure.messaging.servicebus.ServiceBusReceivedMessage"
  name: "ServiceBusReceivedMessage"
  nameWithType: "ServiceBusReceivedMessage"
  fullName: "com.azure.messaging.servicebus.ServiceBusReceivedMessage"
- uid: "com.azure.messaging.servicebus.SynchronousMessageSubscriber.hookOnNext*"
  name: "hookOnNext"
  nameWithType: "SynchronousMessageSubscriber.hookOnNext"
  fullName: "com.azure.messaging.servicebus.SynchronousMessageSubscriber.hookOnNext"
  package: "com.azure.messaging.servicebus"
- uid: "com.azure.messaging.servicebus.SynchronousMessageSubscriber.hookOnComplete*"
  name: "hookOnComplete"
  nameWithType: "SynchronousMessageSubscriber.hookOnComplete"
  fullName: "com.azure.messaging.servicebus.SynchronousMessageSubscriber.hookOnComplete"
  package: "com.azure.messaging.servicebus"
- uid: "java.lang.Throwable"
  spec.java:
  - uid: "java.lang.Throwable"
    name: "Throwable"
    fullName: "java.lang.Throwable"
- uid: "com.azure.messaging.servicebus.SynchronousMessageSubscriber.hookOnError*"
  name: "hookOnError"
  nameWithType: "SynchronousMessageSubscriber.hookOnError"
  fullName: "com.azure.messaging.servicebus.SynchronousMessageSubscriber.hookOnError"
  package: "com.azure.messaging.servicebus"
- uid: "com.azure.messaging.servicebus.SynchronousMessageSubscriber.hookOnCancel*"
  name: "hookOnCancel"
  nameWithType: "SynchronousMessageSubscriber.hookOnCancel"
  fullName: "com.azure.messaging.servicebus.SynchronousMessageSubscriber.hookOnCancel"
  package: "com.azure.messaging.servicebus"
- uid: "com.azure.messaging.servicebus.SynchronousMessageSubscriber.dispose*"
  name: "dispose"
  nameWithType: "SynchronousMessageSubscriber.dispose"
  fullName: "com.azure.messaging.servicebus.SynchronousMessageSubscriber.dispose"
  package: "com.azure.messaging.servicebus"
- uid: "reactor.core.publisher.BaseSubscriber<com.azure.messaging.servicebus.ServiceBusReceivedMessage>"
  name: "BaseSubscriber<ServiceBusReceivedMessage>"
  nameWithType: "BaseSubscriber<ServiceBusReceivedMessage>"
  fullName: "reactor.core.publisher.BaseSubscriber<com.azure.messaging.servicebus.ServiceBusReceivedMessage>"
- uid: "java.lang.Object.wait()"
  name: "Object.wait()"
  nameWithType: "Object.wait()"
  fullName: "java.lang.Object.wait()"
- uid: "reactor.core.publisher.BaseSubscriber.isDisposed()"
  name: "BaseSubscriber.isDisposed()"
  nameWithType: "BaseSubscriber.isDisposed()"
  fullName: "reactor.core.publisher.BaseSubscriber.isDisposed()"
- uid: "reactor.core.publisher.BaseSubscriber.hookOnError(java.lang.Throwable)"
  name: "BaseSubscriber.hookOnError(Throwable)"
  nameWithType: "BaseSubscriber.hookOnError(Throwable)"
  fullName: "reactor.core.publisher.BaseSubscriber.hookOnError(java.lang.Throwable)"
- uid: "reactor.core.publisher.BaseSubscriber.onNext(T)"
  name: "BaseSubscriber.onNext(T)"
  nameWithType: "BaseSubscriber.onNext(T)"
  fullName: "reactor.core.publisher.BaseSubscriber.onNext(T)"
- uid: "java.lang.Object.finalize()"
  name: "Object.finalize()"
  nameWithType: "Object.finalize()"
  fullName: "java.lang.Object.finalize()"
- uid: "java.lang.Object.clone()"
  name: "Object.clone()"
  nameWithType: "Object.clone()"
  fullName: "java.lang.Object.clone()"
- uid: "reactor.core.publisher.BaseSubscriber.safeHookFinally(reactor.core.publisher.SignalType)"
  name: "BaseSubscriber.safeHookFinally(SignalType)"
  nameWithType: "BaseSubscriber.safeHookFinally(SignalType)"
  fullName: "reactor.core.publisher.BaseSubscriber.safeHookFinally(reactor.core.publisher.SignalType)"
- uid: "reactor.core.publisher.BaseSubscriber.hookOnSubscribe(org.reactivestreams.Subscription)"
  name: "BaseSubscriber.hookOnSubscribe(Subscription)"
  nameWithType: "BaseSubscriber.hookOnSubscribe(Subscription)"
  fullName: "reactor.core.publisher.BaseSubscriber.hookOnSubscribe(org.reactivestreams.Subscription)"
- uid: "reactor.core.publisher.BaseSubscriber.hookOnNext(T)"
  name: "BaseSubscriber.hookOnNext(T)"
  nameWithType: "BaseSubscriber.hookOnNext(T)"
  fullName: "reactor.core.publisher.BaseSubscriber.hookOnNext(T)"
- uid: "reactor.core.publisher.BaseSubscriber.request(long)"
  name: "BaseSubscriber.request(long)"
  nameWithType: "BaseSubscriber.request(long)"
  fullName: "reactor.core.publisher.BaseSubscriber.request(long)"
- uid: "java.lang.Object.wait(long)"
  name: "Object.wait(long)"
  nameWithType: "Object.wait(long)"
  fullName: "java.lang.Object.wait(long)"
- uid: "java.lang.Object.getClass()"
  name: "Object.getClass()"
  nameWithType: "Object.getClass()"
  fullName: "java.lang.Object.getClass()"
- uid: "java.lang.Object.hashCode()"
  name: "Object.hashCode()"
  nameWithType: "Object.hashCode()"
  fullName: "java.lang.Object.hashCode()"
- uid: "java.lang.Object.wait(long,int)"
  name: "Object.wait(long,int)"
  nameWithType: "Object.wait(long,int)"
  fullName: "java.lang.Object.wait(long,int)"
- uid: "reactor.core.publisher.BaseSubscriber.dispose()"
  name: "BaseSubscriber.dispose()"
  nameWithType: "BaseSubscriber.dispose()"
  fullName: "reactor.core.publisher.BaseSubscriber.dispose()"
- uid: "java.lang.Object.notify()"
  name: "Object.notify()"
  nameWithType: "Object.notify()"
  fullName: "java.lang.Object.notify()"
- uid: "reactor.core.publisher.BaseSubscriber.upstream()"
  name: "BaseSubscriber.upstream()"
  nameWithType: "BaseSubscriber.upstream()"
  fullName: "reactor.core.publisher.BaseSubscriber.upstream()"
- uid: "java.lang.Object.notifyAll()"
  name: "Object.notifyAll()"
  nameWithType: "Object.notifyAll()"
  fullName: "java.lang.Object.notifyAll()"
- uid: "java.lang.Object.equals(java.lang.Object)"
  name: "Object.equals(Object)"
  nameWithType: "Object.equals(Object)"
  fullName: "java.lang.Object.equals(java.lang.Object)"
- uid: "reactor.core.publisher.BaseSubscriber.onComplete()"
  name: "BaseSubscriber.onComplete()"
  nameWithType: "BaseSubscriber.onComplete()"
  fullName: "reactor.core.publisher.BaseSubscriber.onComplete()"
- uid: "reactor.core.publisher.BaseSubscriber.cancel()"
  name: "BaseSubscriber.cancel()"
  nameWithType: "BaseSubscriber.cancel()"
  fullName: "reactor.core.publisher.BaseSubscriber.cancel()"
- uid: "reactor.core.publisher.BaseSubscriber.onError(java.lang.Throwable)"
  name: "BaseSubscriber.onError(Throwable)"
  nameWithType: "BaseSubscriber.onError(Throwable)"
  fullName: "reactor.core.publisher.BaseSubscriber.onError(java.lang.Throwable)"
- uid: "reactor.core.publisher.BaseSubscriber.hookOnComplete()"
  name: "BaseSubscriber.hookOnComplete()"
  nameWithType: "BaseSubscriber.hookOnComplete()"
  fullName: "reactor.core.publisher.BaseSubscriber.hookOnComplete()"
- uid: "reactor.core.publisher.BaseSubscriber.onSubscribe(org.reactivestreams.Subscription)"
  name: "BaseSubscriber.onSubscribe(Subscription)"
  nameWithType: "BaseSubscriber.onSubscribe(Subscription)"
  fullName: "reactor.core.publisher.BaseSubscriber.onSubscribe(org.reactivestreams.Subscription)"
- uid: "reactor.core.publisher.BaseSubscriber.toString()"
  name: "BaseSubscriber.toString()"
  nameWithType: "BaseSubscriber.toString()"
  fullName: "reactor.core.publisher.BaseSubscriber.toString()"
- uid: "reactor.core.publisher.BaseSubscriber.hookFinally(reactor.core.publisher.SignalType)"
  name: "BaseSubscriber.hookFinally(SignalType)"
  nameWithType: "BaseSubscriber.hookFinally(SignalType)"
  fullName: "reactor.core.publisher.BaseSubscriber.hookFinally(reactor.core.publisher.SignalType)"
- uid: "reactor.core.publisher.BaseSubscriber.hookOnCancel()"
  name: "BaseSubscriber.hookOnCancel()"
  nameWithType: "BaseSubscriber.hookOnCancel()"
  fullName: "reactor.core.publisher.BaseSubscriber.hookOnCancel()"
- uid: "reactor.core.publisher.BaseSubscriber.requestUnbounded()"
  name: "BaseSubscriber.requestUnbounded()"
  nameWithType: "BaseSubscriber.requestUnbounded()"
  fullName: "reactor.core.publisher.BaseSubscriber.requestUnbounded()"
- uid: "com.azure.messaging.servicebus.SynchronousMessageSubscriber.ReceiveTimeoutTask"
  name: "SynchronousMessageSubscriber.ReceiveTimeoutTask"
  nameWithType: "SynchronousMessageSubscriber.ReceiveTimeoutTask"
  fullName: "com.azure.messaging.servicebus.SynchronousMessageSubscriber.ReceiveTimeoutTask"
- uid: "reactor.core.publisher.BaseSubscriber"
  name: "BaseSubscriber"
  nameWithType: "BaseSubscriber"
  fullName: "reactor.core.publisher.BaseSubscriber"
