### YamlMime:ManagedReference
items:
- uid: com.azure.cosmos.implementation.routing.LocationCache
  id: LocationCache
  artifact: com.azure:azure-cosmos:4.0.1-beta.1
  parent: com.azure.cosmos.implementation.routing
  children:
  - com.azure.cosmos.implementation.routing.LocationCache.LocationCache(java.util.List<java.lang.String>,java.net.URI,boolean,boolean,com.azure.cosmos.implementation.Configs)
  - com.azure.cosmos.implementation.routing.LocationCache.canUseMultipleWriteLocations(com.azure.cosmos.implementation.RxDocumentServiceRequest)
  - com.azure.cosmos.implementation.routing.LocationCache.getReadEndpoints()
  - com.azure.cosmos.implementation.routing.LocationCache.getWriteEndpoints()
  - com.azure.cosmos.implementation.routing.LocationCache.markEndpointUnavailableForRead(java.net.URI)
  - com.azure.cosmos.implementation.routing.LocationCache.markEndpointUnavailableForWrite(java.net.URI)
  - com.azure.cosmos.implementation.routing.LocationCache.onDatabaseAccountRead(com.azure.cosmos.models.DatabaseAccount)
  - com.azure.cosmos.implementation.routing.LocationCache.resolveServiceEndpoint(com.azure.cosmos.implementation.RxDocumentServiceRequest)
  - com.azure.cosmos.implementation.routing.LocationCache.shouldRefreshEndpoints(com.azure.cosmos.implementation.Utils.ValueHolder)
  langs:
  - java
  name: LocationCache
  nameWithType: LocationCache
  fullName: com.azure.cosmos.implementation.routing.LocationCache
  type: Class
  package: com.azure.cosmos.implementation.routing
  summary: Implements the abstraction to resolve target location for geo-replicated DatabaseAccount with multiple writable and readable locations.
  syntax:
    content: public class LocationCache
  inheritance:
  - java.lang.Object
  inheritedMembers:
  - java.lang.Object.clone()
  - java.lang.Object.equals(java.lang.Object)
  - java.lang.Object.finalize()
  - java.lang.Object.getClass()
  - java.lang.Object.hashCode()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.toString()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
- uid: com.azure.cosmos.implementation.routing.LocationCache.LocationCache(java.util.List<java.lang.String>,java.net.URI,boolean,boolean,com.azure.cosmos.implementation.Configs)
  id: LocationCache(java.util.List<java.lang.String>,java.net.URI,boolean,boolean,com.azure.cosmos.implementation.Configs)
  artifact: com.azure:azure-cosmos:4.0.1-beta.1
  parent: com.azure.cosmos.implementation.routing.LocationCache
  langs:
  - java
  name: LocationCache(List<String> preferredLocations, URI defaultEndpoint, boolean enableEndpointDiscovery, boolean useMultipleWriteLocations, Configs configs)
  nameWithType: LocationCache.LocationCache(List<String> preferredLocations, URI defaultEndpoint, boolean enableEndpointDiscovery, boolean useMultipleWriteLocations, Configs configs)
  fullName: com.azure.cosmos.implementation.routing.LocationCache.LocationCache(List<String> preferredLocations, URI defaultEndpoint, boolean enableEndpointDiscovery, boolean useMultipleWriteLocations, Configs configs)
  overload: com.azure.cosmos.implementation.routing.LocationCache.LocationCache*
  type: Constructor
  package: com.azure.cosmos.implementation.routing
  syntax:
    content: public LocationCache(List<String> preferredLocations, URI defaultEndpoint, boolean enableEndpointDiscovery, boolean useMultipleWriteLocations, Configs configs)
    parameters:
    - id: preferredLocations
      type: java.util.List<java.lang.String>
    - id: defaultEndpoint
      type: java.net.URI
    - id: enableEndpointDiscovery
      type: boolean
    - id: useMultipleWriteLocations
      type: boolean
    - id: configs
      type: com.azure.cosmos.implementation.Configs
- uid: com.azure.cosmos.implementation.routing.LocationCache.canUseMultipleWriteLocations(com.azure.cosmos.implementation.RxDocumentServiceRequest)
  id: canUseMultipleWriteLocations(com.azure.cosmos.implementation.RxDocumentServiceRequest)
  artifact: com.azure:azure-cosmos:4.0.1-beta.1
  parent: com.azure.cosmos.implementation.routing.LocationCache
  langs:
  - java
  name: canUseMultipleWriteLocations(RxDocumentServiceRequest request)
  nameWithType: LocationCache.canUseMultipleWriteLocations(RxDocumentServiceRequest request)
  fullName: com.azure.cosmos.implementation.routing.LocationCache.canUseMultipleWriteLocations(RxDocumentServiceRequest request)
  overload: com.azure.cosmos.implementation.routing.LocationCache.canUseMultipleWriteLocations*
  type: Method
  package: com.azure.cosmos.implementation.routing
  syntax:
    content: public boolean canUseMultipleWriteLocations(RxDocumentServiceRequest request)
    parameters:
    - id: request
      type: com.azure.cosmos.implementation.RxDocumentServiceRequest
    return:
      type: boolean
- uid: com.azure.cosmos.implementation.routing.LocationCache.getReadEndpoints()
  id: getReadEndpoints()
  artifact: com.azure:azure-cosmos:4.0.1-beta.1
  parent: com.azure.cosmos.implementation.routing.LocationCache
  langs:
  - java
  name: getReadEndpoints()
  nameWithType: LocationCache.getReadEndpoints()
  fullName: com.azure.cosmos.implementation.routing.LocationCache.getReadEndpoints()
  overload: com.azure.cosmos.implementation.routing.LocationCache.getReadEndpoints*
  type: Method
  package: com.azure.cosmos.implementation.routing
  summary: Gets list of read endpoints ordered by 1. Preferred location 2. Endpoint availability
  syntax:
    content: public UnmodifiableList<URI> getReadEndpoints()
    return:
      type: org.apache.commons.collections4.list.UnmodifiableList<java.net.URI>
- uid: com.azure.cosmos.implementation.routing.LocationCache.getWriteEndpoints()
  id: getWriteEndpoints()
  artifact: com.azure:azure-cosmos:4.0.1-beta.1
  parent: com.azure.cosmos.implementation.routing.LocationCache
  langs:
  - java
  name: getWriteEndpoints()
  nameWithType: LocationCache.getWriteEndpoints()
  fullName: com.azure.cosmos.implementation.routing.LocationCache.getWriteEndpoints()
  overload: com.azure.cosmos.implementation.routing.LocationCache.getWriteEndpoints*
  type: Method
  package: com.azure.cosmos.implementation.routing
  summary: Gets list of write endpoints ordered by 1. Preferred location 2. Endpoint availability
  syntax:
    content: public UnmodifiableList<URI> getWriteEndpoints()
    return:
      type: org.apache.commons.collections4.list.UnmodifiableList<java.net.URI>
- uid: com.azure.cosmos.implementation.routing.LocationCache.markEndpointUnavailableForRead(java.net.URI)
  id: markEndpointUnavailableForRead(java.net.URI)
  artifact: com.azure:azure-cosmos:4.0.1-beta.1
  parent: com.azure.cosmos.implementation.routing.LocationCache
  langs:
  - java
  name: markEndpointUnavailableForRead(URI endpoint)
  nameWithType: LocationCache.markEndpointUnavailableForRead(URI endpoint)
  fullName: com.azure.cosmos.implementation.routing.LocationCache.markEndpointUnavailableForRead(URI endpoint)
  overload: com.azure.cosmos.implementation.routing.LocationCache.markEndpointUnavailableForRead*
  type: Method
  package: com.azure.cosmos.implementation.routing
  summary: Marks the current location unavailable for read
  syntax:
    content: public void markEndpointUnavailableForRead(URI endpoint)
    parameters:
    - id: endpoint
      type: java.net.URI
- uid: com.azure.cosmos.implementation.routing.LocationCache.markEndpointUnavailableForWrite(java.net.URI)
  id: markEndpointUnavailableForWrite(java.net.URI)
  artifact: com.azure:azure-cosmos:4.0.1-beta.1
  parent: com.azure.cosmos.implementation.routing.LocationCache
  langs:
  - java
  name: markEndpointUnavailableForWrite(URI endpoint)
  nameWithType: LocationCache.markEndpointUnavailableForWrite(URI endpoint)
  fullName: com.azure.cosmos.implementation.routing.LocationCache.markEndpointUnavailableForWrite(URI endpoint)
  overload: com.azure.cosmos.implementation.routing.LocationCache.markEndpointUnavailableForWrite*
  type: Method
  package: com.azure.cosmos.implementation.routing
  summary: Marks the current location unavailable for write
  syntax:
    content: public void markEndpointUnavailableForWrite(URI endpoint)
    parameters:
    - id: endpoint
      type: java.net.URI
- uid: com.azure.cosmos.implementation.routing.LocationCache.onDatabaseAccountRead(com.azure.cosmos.models.DatabaseAccount)
  id: onDatabaseAccountRead(com.azure.cosmos.models.DatabaseAccount)
  artifact: com.azure:azure-cosmos:4.0.1-beta.1
  parent: com.azure.cosmos.implementation.routing.LocationCache
  langs:
  - java
  name: onDatabaseAccountRead(DatabaseAccount databaseAccount)
  nameWithType: LocationCache.onDatabaseAccountRead(DatabaseAccount databaseAccount)
  fullName: com.azure.cosmos.implementation.routing.LocationCache.onDatabaseAccountRead(DatabaseAccount databaseAccount)
  overload: com.azure.cosmos.implementation.routing.LocationCache.onDatabaseAccountRead*
  type: Method
  package: com.azure.cosmos.implementation.routing
  summary: Invoked when <xref uid="com.azure.cosmos.models.DatabaseAccount" data-throw-if-not-resolved="false">DatabaseAccount</xref> is read
  syntax:
    content: public void onDatabaseAccountRead(DatabaseAccount databaseAccount)
    parameters:
    - id: databaseAccount
      type: com.azure.cosmos.models.DatabaseAccount
      description: READ DatabaseAccount
- uid: com.azure.cosmos.implementation.routing.LocationCache.resolveServiceEndpoint(com.azure.cosmos.implementation.RxDocumentServiceRequest)
  id: resolveServiceEndpoint(com.azure.cosmos.implementation.RxDocumentServiceRequest)
  artifact: com.azure:azure-cosmos:4.0.1-beta.1
  parent: com.azure.cosmos.implementation.routing.LocationCache
  langs:
  - java
  name: resolveServiceEndpoint(RxDocumentServiceRequest request)
  nameWithType: LocationCache.resolveServiceEndpoint(RxDocumentServiceRequest request)
  fullName: com.azure.cosmos.implementation.routing.LocationCache.resolveServiceEndpoint(RxDocumentServiceRequest request)
  overload: com.azure.cosmos.implementation.routing.LocationCache.resolveServiceEndpoint*
  type: Method
  package: com.azure.cosmos.implementation.routing
  summary: Resolves request to service endpoint. 1. If this is a write request (a) If UseMultipleWriteLocations = true (i) For document writes, resolve to most preferred and available write endpoint. Once the endpoint is marked unavailable, it is moved to the end of available write endpoint. Current request will be retried on next preferred available write endpoint. (ii) For all other resources, always resolve to first/second (regardless of preferred locations) write getEndpoint in <xref uid="com.azure.cosmos.models.DatabaseAccount.getWritableLocations()" data-throw-if-not-resolved="false">DatabaseAccount#getWritableLocations()</xref>. Endpoint of first write location in <xref uid="com.azure.cosmos.models.DatabaseAccount.getWritableLocations()" data-throw-if-not-resolved="false">DatabaseAccount#getWritableLocations()</xref> is the only getEndpoint that supports write operation on all resource types (except during that region's failover). Only during manual failover, client would retry write on second write location in <xref uid="com.azure.cosmos.models.DatabaseAccount.getWritableLocations()" data-throw-if-not-resolved="false">DatabaseAccount#getWritableLocations()</xref>. (b) Else resolve the request to first write getEndpoint in <xref uid="com.azure.cosmos.models.DatabaseAccount.getWritableLocations()" data-throw-if-not-resolved="false">DatabaseAccount#getWritableLocations()</xref> OR second write getEndpoint in <xref uid="com.azure.cosmos.models.DatabaseAccount.getWritableLocations()" data-throw-if-not-resolved="false">DatabaseAccount#getWritableLocations()</xref> in case of manual failover of that location. 2. Else resolve the request to most preferred available read getEndpoint (getAutomatic failover for read requests)
  syntax:
    content: public URI resolveServiceEndpoint(RxDocumentServiceRequest request)
    parameters:
    - id: request
      type: com.azure.cosmos.implementation.RxDocumentServiceRequest
      description: Request for which getEndpoint is to be resolved
    return:
      type: java.net.URI
      description: Resolved getEndpoint
- uid: com.azure.cosmos.implementation.routing.LocationCache.shouldRefreshEndpoints(com.azure.cosmos.implementation.Utils.ValueHolder)
  id: shouldRefreshEndpoints(com.azure.cosmos.implementation.Utils.ValueHolder)
  artifact: com.azure:azure-cosmos:4.0.1-beta.1
  parent: com.azure.cosmos.implementation.routing.LocationCache
  langs:
  - java
  name: shouldRefreshEndpoints(Utils.ValueHolder canRefreshInBackground)
  nameWithType: LocationCache.shouldRefreshEndpoints(Utils.ValueHolder canRefreshInBackground)
  fullName: com.azure.cosmos.implementation.routing.LocationCache.shouldRefreshEndpoints(Utils.ValueHolder canRefreshInBackground)
  overload: com.azure.cosmos.implementation.routing.LocationCache.shouldRefreshEndpoints*
  type: Method
  package: com.azure.cosmos.implementation.routing
  syntax:
    content: public boolean shouldRefreshEndpoints(Utils.ValueHolder canRefreshInBackground)
    parameters:
    - id: canRefreshInBackground
      type: com.azure.cosmos.implementation.Utils.ValueHolder
    return:
      type: boolean
references:
- uid: java.util.List<java.lang.String>
  spec.java:
  - uid: java.util.List
    name: List
    fullName: java.util.List
  - name: <
    fullName: <
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
  - name: '>'
    fullName: '>'
- uid: java.net.URI
  spec.java:
  - uid: java.net.URI
    name: URI
    fullName: java.net.URI
- uid: boolean
  spec.java:
  - uid: boolean
    name: boolean
    fullName: boolean
- uid: com.azure.cosmos.implementation.Configs
  name: Configs
  nameWithType: Configs
  fullName: com.azure.cosmos.implementation.Configs
- uid: com.azure.cosmos.implementation.routing.LocationCache.LocationCache*
  name: LocationCache
  nameWithType: LocationCache.LocationCache
  fullName: com.azure.cosmos.implementation.routing.LocationCache.LocationCache
  package: com.azure.cosmos.implementation.routing
- uid: org.apache.commons.collections4.list.UnmodifiableList<java.net.URI>
  spec.java:
  - uid: org.apache.commons.collections4.list.UnmodifiableList
    name: UnmodifiableList
    fullName: org.apache.commons.collections4.list.UnmodifiableList
  - name: <
    fullName: <
  - uid: java.net.URI
    name: URI
    fullName: java.net.URI
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.routing.LocationCache.getReadEndpoints*
  name: getReadEndpoints
  nameWithType: LocationCache.getReadEndpoints
  fullName: com.azure.cosmos.implementation.routing.LocationCache.getReadEndpoints
  package: com.azure.cosmos.implementation.routing
- uid: com.azure.cosmos.implementation.routing.LocationCache.getWriteEndpoints*
  name: getWriteEndpoints
  nameWithType: LocationCache.getWriteEndpoints
  fullName: com.azure.cosmos.implementation.routing.LocationCache.getWriteEndpoints
  package: com.azure.cosmos.implementation.routing
- uid: com.azure.cosmos.implementation.routing.LocationCache.markEndpointUnavailableForRead*
  name: markEndpointUnavailableForRead
  nameWithType: LocationCache.markEndpointUnavailableForRead
  fullName: com.azure.cosmos.implementation.routing.LocationCache.markEndpointUnavailableForRead
  package: com.azure.cosmos.implementation.routing
- uid: com.azure.cosmos.implementation.routing.LocationCache.markEndpointUnavailableForWrite*
  name: markEndpointUnavailableForWrite
  nameWithType: LocationCache.markEndpointUnavailableForWrite
  fullName: com.azure.cosmos.implementation.routing.LocationCache.markEndpointUnavailableForWrite
  package: com.azure.cosmos.implementation.routing
- uid: com.azure.cosmos.models.DatabaseAccount
  name: DatabaseAccount
  nameWithType: DatabaseAccount
  fullName: com.azure.cosmos.models.DatabaseAccount
- uid: com.azure.cosmos.implementation.routing.LocationCache.onDatabaseAccountRead*
  name: onDatabaseAccountRead
  nameWithType: LocationCache.onDatabaseAccountRead
  fullName: com.azure.cosmos.implementation.routing.LocationCache.onDatabaseAccountRead
  package: com.azure.cosmos.implementation.routing
- uid: com.azure.cosmos.implementation.RxDocumentServiceRequest
  name: RxDocumentServiceRequest
  nameWithType: RxDocumentServiceRequest
  fullName: com.azure.cosmos.implementation.RxDocumentServiceRequest
- uid: com.azure.cosmos.implementation.routing.LocationCache.resolveServiceEndpoint*
  name: resolveServiceEndpoint
  nameWithType: LocationCache.resolveServiceEndpoint
  fullName: com.azure.cosmos.implementation.routing.LocationCache.resolveServiceEndpoint
  package: com.azure.cosmos.implementation.routing
- uid: com.azure.cosmos.implementation.Utils.ValueHolder
  spec.java:
  - uid: com.azure.cosmos.implementation.Utils.ValueHolder
    name: ValueHolder
    fullName: com.azure.cosmos.implementation.Utils.ValueHolder
- uid: com.azure.cosmos.implementation.routing.LocationCache.shouldRefreshEndpoints*
  name: shouldRefreshEndpoints
  nameWithType: LocationCache.shouldRefreshEndpoints
  fullName: com.azure.cosmos.implementation.routing.LocationCache.shouldRefreshEndpoints
  package: com.azure.cosmos.implementation.routing
- uid: com.azure.cosmos.implementation.routing.LocationCache.canUseMultipleWriteLocations*
  name: canUseMultipleWriteLocations
  nameWithType: LocationCache.canUseMultipleWriteLocations
  fullName: com.azure.cosmos.implementation.routing.LocationCache.canUseMultipleWriteLocations
  package: com.azure.cosmos.implementation.routing
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: java.lang.Object.finalize()
  name: Object.finalize()
  nameWithType: Object.finalize()
  fullName: java.lang.Object.finalize()
- uid: java.lang.Object.clone()
  name: Object.clone()
  nameWithType: Object.clone()
  fullName: java.lang.Object.clone()
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: java.lang.Object.equals(java.lang.Object)
  name: Object.equals(Object)
  nameWithType: Object.equals(Object)
  fullName: java.lang.Object.equals(java.lang.Object)
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.lang.Object.hashCode()
  name: Object.hashCode()
  nameWithType: Object.hashCode()
  fullName: java.lang.Object.hashCode()
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: java.lang.Object.toString()
  name: Object.toString()
  nameWithType: Object.toString()
  fullName: java.lang.Object.toString()
- uid: java.util.List
  name: List
  nameWithType: List
  fullName: java.util.List
- uid: java.lang.String
  name: String
  nameWithType: String
  fullName: java.lang.String
- uid: org.apache.commons.collections4.list.UnmodifiableList
  name: UnmodifiableList
  nameWithType: UnmodifiableList
  fullName: org.apache.commons.collections4.list.UnmodifiableList
