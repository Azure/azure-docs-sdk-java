### YamlMime:JavaType
uid: "com.microsoft.azure.sdk.iot.device.transport.mqtt.Mqtt"
fullName: "com.microsoft.azure.sdk.iot.device.transport.mqtt.Mqtt"
name: "Mqtt"
nameWithType: "Mqtt"
inheritances:
- "<xref href=\"java.lang.Object?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
inheritedMembers:
- "java.lang.Object.clone()"
- "java.lang.Object.equals(java.lang.Object)"
- "java.lang.Object.finalize()"
- "java.lang.Object.getClass()"
- "java.lang.Object.hashCode()"
- "java.lang.Object.notify()"
- "java.lang.Object.notifyAll()"
- "java.lang.Object.toString()"
- "java.lang.Object.wait()"
- "java.lang.Object.wait(long)"
- "java.lang.Object.wait(long,int)"
syntax: "public abstract class Mqtt implements MqttCallback"
constructors:
- uid: "com.microsoft.azure.sdk.iot.device.transport.mqtt.Mqtt.Mqtt(com.microsoft.azure.sdk.iot.device.transport.mqtt.MqttConnection,com.microsoft.azure.sdk.iot.device.transport.IotHubListener,com.microsoft.azure.sdk.iot.device.transport.mqtt.MqttMessageListener,java.lang.String,java.util.Map<java.lang.Integer,com.microsoft.azure.sdk.iot.device.Message>)"
  fullName: "com.microsoft.azure.sdk.iot.device.transport.mqtt.Mqtt.Mqtt(MqttConnection mqttConnection, IotHubListener listener, MqttMessageListener messageListener, String connectionId, Map<Integer,Message> unacknowledgedSentMessages)"
  name: "Mqtt(MqttConnection mqttConnection, IotHubListener listener, MqttMessageListener messageListener, String connectionId, Map<Integer,Message> unacknowledgedSentMessages)"
  nameWithType: "Mqtt.Mqtt(MqttConnection mqttConnection, IotHubListener listener, MqttMessageListener messageListener, String connectionId, Map<Integer,Message> unacknowledgedSentMessages)"
  summary: "Constructor to instantiate mqtt broker connection."
  parameters:
  - description: "the connection to use"
    name: "mqttConnection"
    type: "<xref href=\"com.microsoft.azure.sdk.iot.device.transport.mqtt.MqttConnection?alt=com.microsoft.azure.sdk.iot.device.transport.mqtt.MqttConnection&text=MqttConnection\" data-throw-if-not-resolved=\"False\" />"
  - description: "the listener to be called back upon connection established/lost and upon a message being delivered"
    name: "listener"
    type: "<xref href=\"com.microsoft.azure.sdk.iot.device.transport.IotHubListener?alt=com.microsoft.azure.sdk.iot.device.transport.IotHubListener&text=IotHubListener\" data-throw-if-not-resolved=\"False\" />"
  - description: "the listener to be called back upon a message arriving"
    name: "messageListener"
    type: "<xref href=\"com.microsoft.azure.sdk.iot.device.transport.mqtt.MqttMessageListener?alt=com.microsoft.azure.sdk.iot.device.transport.mqtt.MqttMessageListener&text=MqttMessageListener\" data-throw-if-not-resolved=\"False\" />"
  - description: "the id of the connection"
    name: "connectionId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - name: "unacknowledgedSentMessages"
    type: "<xref href=\"java.util.Map?alt=java.util.Map&text=Map\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Integer?alt=java.lang.Integer&text=Integer\" data-throw-if-not-resolved=\"False\" />,<xref href=\"com.microsoft.azure.sdk.iot.device.Message?alt=com.microsoft.azure.sdk.iot.device.Message&text=Message\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public Mqtt(MqttConnection mqttConnection, IotHubListener listener, MqttMessageListener messageListener, String connectionId, Map<Integer,Message> unacknowledgedSentMessages)"
  exceptions:
  - description: "if the provided mqttConnection is null"
    type: "<xref href=\"java.lang.IllegalArgumentException?alt=java.lang.IllegalArgumentException&text=IllegalArgumentException\" data-throw-if-not-resolved=\"False\" />"
  desc: "Constructor to instantiate mqtt broker connection."
fields:
- uid: "com.microsoft.azure.sdk.iot.device.transport.mqtt.Mqtt.incomingLock"
  fullName: "com.microsoft.azure.sdk.iot.device.transport.mqtt.Mqtt.incomingLock"
  name: "incomingLock"
  nameWithType: "Mqtt.incomingLock"
  modifiers:
  - "protected"
  - "final"
  field:
    type: "<xref href=\"java.lang.Object?alt=java.lang.Object&text=Object\" data-throw-if-not-resolved=\"False\" />"
  syntax: "protected final Object incomingLock"
methods:
- uid: "com.microsoft.azure.sdk.iot.device.transport.mqtt.Mqtt.connect()"
  fullName: "com.microsoft.azure.sdk.iot.device.transport.mqtt.Mqtt.connect()"
  name: "connect()"
  nameWithType: "Mqtt.connect()"
  summary: "Method to connect to mqtt broker connection."
  modifiers:
  - "protected"
  syntax: "protected void connect()"
  exceptions:
  - description: "if failed to establish the mqtt connection."
    type: "<xref href=\"com.microsoft.azure.sdk.iot.device.exceptions.TransportException?alt=com.microsoft.azure.sdk.iot.device.exceptions.TransportException&text=TransportException\" data-throw-if-not-resolved=\"False\" />"
  desc: "Method to connect to mqtt broker connection."
- uid: "com.microsoft.azure.sdk.iot.device.transport.mqtt.Mqtt.connectionLost(java.lang.Throwable)"
  fullName: "com.microsoft.azure.sdk.iot.device.transport.mqtt.Mqtt.connectionLost(Throwable throwable)"
  name: "connectionLost(Throwable throwable)"
  nameWithType: "Mqtt.connectionLost(Throwable throwable)"
  summary: "Event fired when the connection with the MQTT broker is lost."
  parameters:
  - description: "Reason for losing the connection."
    name: "throwable"
    type: "<xref href=\"java.lang.Throwable?alt=java.lang.Throwable&text=Throwable\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public void connectionLost(Throwable throwable)"
  desc: "Event fired when the connection with the MQTT broker is lost."
- uid: "com.microsoft.azure.sdk.iot.device.transport.mqtt.Mqtt.deliveryComplete(org.eclipse.paho.client.mqttv3.IMqttDeliveryToken)"
  fullName: "com.microsoft.azure.sdk.iot.device.transport.mqtt.Mqtt.deliveryComplete(IMqttDeliveryToken iMqttDeliveryToken)"
  name: "deliveryComplete(IMqttDeliveryToken iMqttDeliveryToken)"
  nameWithType: "Mqtt.deliveryComplete(IMqttDeliveryToken iMqttDeliveryToken)"
  summary: "Event fired when the message arrived on the MQTT broker."
  parameters:
  - description: "the MqttDeliveryToken for which the message was successfully sent."
    name: "iMqttDeliveryToken"
    type: "<xref href=\"org.eclipse.paho.client.mqttv3.IMqttDeliveryToken?alt=org.eclipse.paho.client.mqttv3.IMqttDeliveryToken&text=IMqttDeliveryToken\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public void deliveryComplete(IMqttDeliveryToken iMqttDeliveryToken)"
  desc: "Event fired when the message arrived on the MQTT broker."
- uid: "com.microsoft.azure.sdk.iot.device.transport.mqtt.Mqtt.disconnect()"
  fullName: "com.microsoft.azure.sdk.iot.device.transport.mqtt.Mqtt.disconnect()"
  name: "disconnect()"
  nameWithType: "Mqtt.disconnect()"
  summary: "Method to disconnect to mqtt broker connection."
  modifiers:
  - "protected"
  syntax: "protected void disconnect()"
  exceptions:
  - description: "if failed to ends the mqtt connection."
    type: "<xref href=\"com.microsoft.azure.sdk.iot.device.exceptions.TransportException?alt=com.microsoft.azure.sdk.iot.device.exceptions.TransportException&text=TransportException\" data-throw-if-not-resolved=\"False\" />"
  desc: "Method to disconnect to mqtt broker connection."
- uid: "com.microsoft.azure.sdk.iot.device.transport.mqtt.Mqtt.messageArrived(java.lang.String,org.eclipse.paho.client.mqttv3.MqttMessage)"
  fullName: "com.microsoft.azure.sdk.iot.device.transport.mqtt.Mqtt.messageArrived(String topic, MqttMessage mqttMessage)"
  name: "messageArrived(String topic, MqttMessage mqttMessage)"
  nameWithType: "Mqtt.messageArrived(String topic, MqttMessage mqttMessage)"
  summary: "Event fired when the message arrived on the MQTT broker."
  parameters:
  - description: "the topic on which message arrived."
    name: "topic"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "the message arrived on the Mqtt broker."
    name: "mqttMessage"
    type: "<xref href=\"org.eclipse.paho.client.mqttv3.MqttMessage?alt=org.eclipse.paho.client.mqttv3.MqttMessage&text=MqttMessage\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public void messageArrived(String topic, MqttMessage mqttMessage)"
  desc: "Event fired when the message arrived on the MQTT broker."
- uid: "com.microsoft.azure.sdk.iot.device.transport.mqtt.Mqtt.peekMessage()"
  fullName: "com.microsoft.azure.sdk.iot.device.transport.mqtt.Mqtt.peekMessage()"
  name: "peekMessage()"
  nameWithType: "Mqtt.peekMessage()"
  syntax: "public Pair<String,byte[]> peekMessage()"
  returns:
    type: "<xref href=\"org.apache.commons.lang3.tuple.Pair?alt=org.apache.commons.lang3.tuple.Pair&text=Pair\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />,<xref href=\"byte?alt=byte&text=byte\" data-throw-if-not-resolved=\"False\" />[]&gt;"
- uid: "com.microsoft.azure.sdk.iot.device.transport.mqtt.Mqtt.publish(java.lang.String,com.microsoft.azure.sdk.iot.device.Message)"
  fullName: "com.microsoft.azure.sdk.iot.device.transport.mqtt.Mqtt.publish(String publishTopic, Message message)"
  name: "publish(String publishTopic, Message message)"
  nameWithType: "Mqtt.publish(String publishTopic, Message message)"
  summary: "Method to publish to mqtt broker connection."
  modifiers:
  - "protected"
  parameters:
  - description: "the topic to publish on mqtt broker connection."
    name: "publishTopic"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "the message to publish."
    name: "message"
    type: "<xref href=\"com.microsoft.azure.sdk.iot.device.Message?alt=com.microsoft.azure.sdk.iot.device.Message&text=Message\" data-throw-if-not-resolved=\"False\" />"
  syntax: "protected void publish(String publishTopic, Message message)"
  exceptions:
  - description: "if sas token has expired, if connection hasn't been established yet, or if Paho throws\n for any other reason"
    type: "<xref href=\"com.microsoft.azure.sdk.iot.device.exceptions.TransportException?alt=com.microsoft.azure.sdk.iot.device.exceptions.TransportException&text=TransportException\" data-throw-if-not-resolved=\"False\" />"
  desc: "Method to publish to mqtt broker connection."
- uid: "com.microsoft.azure.sdk.iot.device.transport.mqtt.Mqtt.receive()"
  fullName: "com.microsoft.azure.sdk.iot.device.transport.mqtt.Mqtt.receive()"
  name: "receive()"
  nameWithType: "Mqtt.receive()"
  summary: "Method to receive messages on mqtt broker connection."
  syntax: "public IotHubTransportMessage receive()"
  exceptions:
  - description: "if failed to receive mqtt message."
    type: "<xref href=\"com.microsoft.azure.sdk.iot.device.exceptions.TransportException?alt=com.microsoft.azure.sdk.iot.device.exceptions.TransportException&text=TransportException\" data-throw-if-not-resolved=\"False\" />"
  desc: "Method to receive messages on mqtt broker connection."
  returns:
    description: "a received message. It can be <code>null</code>"
    type: "<xref href=\"com.microsoft.azure.sdk.iot.device.transport.IotHubTransportMessage?alt=com.microsoft.azure.sdk.iot.device.transport.IotHubTransportMessage&text=IotHubTransportMessage\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.sdk.iot.device.transport.mqtt.Mqtt.sendMessageAcknowledgement(int)"
  fullName: "com.microsoft.azure.sdk.iot.device.transport.mqtt.Mqtt.sendMessageAcknowledgement(int messageId)"
  name: "sendMessageAcknowledgement(int messageId)"
  nameWithType: "Mqtt.sendMessageAcknowledgement(int messageId)"
  summary: "Attempts to send ack for the provided message."
  modifiers:
  - "protected"
  parameters:
  - description: "The message id to send the ack for"
    name: "messageId"
    type: "<xref href=\"int?alt=int&text=int\" data-throw-if-not-resolved=\"False\" />"
  syntax: "protected boolean sendMessageAcknowledgement(int messageId)"
  exceptions:
  - description: "if an exception occurs when sending the ack"
    type: "<xref href=\"com.microsoft.azure.sdk.iot.device.exceptions.TransportException?alt=com.microsoft.azure.sdk.iot.device.exceptions.TransportException&text=TransportException\" data-throw-if-not-resolved=\"False\" />"
  desc: "Attempts to send ack for the provided message. If the message does not have a saved messageId in this layer, this function shall return false."
  returns:
    description: "true if the ack is sent successfully or false if the message isn't tied to this mqtt client"
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.sdk.iot.device.transport.mqtt.Mqtt.subscribe(java.lang.String)"
  fullName: "com.microsoft.azure.sdk.iot.device.transport.mqtt.Mqtt.subscribe(String topic)"
  name: "subscribe(String topic)"
  nameWithType: "Mqtt.subscribe(String topic)"
  summary: "Method to subscribe to mqtt broker connection."
  modifiers:
  - "protected"
  parameters:
  - description: "the topic to subscribe on mqtt broker connection."
    name: "topic"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "protected void subscribe(String topic)"
  exceptions:
  - description: "if failed to subscribe the mqtt topic."
    type: "<xref href=\"com.microsoft.azure.sdk.iot.device.exceptions.TransportException?alt=com.microsoft.azure.sdk.iot.device.exceptions.TransportException&text=TransportException\" data-throw-if-not-resolved=\"False\" />"
  desc: "Method to subscribe to mqtt broker connection."
type: "class"
implements:
- "<xref href=\"org.eclipse.paho.client.mqttv3.MqttCallback?alt=org.eclipse.paho.client.mqttv3.MqttCallback&text=MqttCallback\" data-throw-if-not-resolved=\"False\" />"
metadata: {}
package: "com.microsoft.azure.sdk.iot.device.transport.mqtt"
artifact: com.microsoft.azure.sdk.iot:iot-device-client-preview:1.2.0
