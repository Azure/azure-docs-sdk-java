### YamlMime:ManagedReference
items:
- uid: com.fasterxml.jackson.annotation.JsonFormat
  id: JsonFormat
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.annotation
  children:
  - com.fasterxml.jackson.annotation.JsonFormat.DEFAULT_LOCALE
  - com.fasterxml.jackson.annotation.JsonFormat.DEFAULT_TIMEZONE
  - com.fasterxml.jackson.annotation.JsonFormat.Feature
  - com.fasterxml.jackson.annotation.JsonFormat.Features
  - com.fasterxml.jackson.annotation.JsonFormat.Shape
  - com.fasterxml.jackson.annotation.JsonFormat.Value
  - com.fasterxml.jackson.annotation.JsonFormat.lenient()
  - com.fasterxml.jackson.annotation.JsonFormat.locale()
  - com.fasterxml.jackson.annotation.JsonFormat.pattern()
  - com.fasterxml.jackson.annotation.JsonFormat.shape()
  - com.fasterxml.jackson.annotation.JsonFormat.timezone()
  - com.fasterxml.jackson.annotation.JsonFormat.with()
  - com.fasterxml.jackson.annotation.JsonFormat.without()
  langs:
  - java
  name: JsonFormat
  nameWithType: JsonFormat
  fullName: com.fasterxml.jackson.annotation.JsonFormat
  type: Interface
  package: com.fasterxml.jackson.annotation
  summary: >-
    General-purpose annotation used for configuring details of how values of properties are to be serialized. Unlike most other Jackson annotations, annotation does not have specific universal interpretation: instead, effect depends on datatype of property being annotated (or more specifically, deserializer and serializer being used).


    Common uses include choosing between alternate representations -- for example, whether <xref uid="java.util.Date" data-throw-if-not-resolved="false">java.util.Date</xref> is to be serialized as number (Java timestamp) or String (such as ISO-8601 compatible time value) -- as well as configuring exact details with <xref uid="com.fasterxml.jackson.annotation.JsonFormat.pattern*" data-throw-if-not-resolved="false">#pattern</xref> property.


    As of Jackson 2.6, known special handling includes:

     *  <xref uid="java.util.Date" data-throw-if-not-resolved="false">java.util.Date</xref>: Shape can be <xref uid="" data-throw-if-not-resolved="false">Shape#STRING</xref> or <xref uid="" data-throw-if-not-resolved="false">Shape#NUMBER</xref>; pattern may contain <xref uid="" data-throw-if-not-resolved="false">java.text.SimpleDateFormat</xref>\-compatible pattern definition.
     *  Can be used on Classes (types) as well, for modified default behavior, possibly overridden by per-property annotation
     *  <xref uid="java.lang.Enum" data-throw-if-not-resolved="false">java.lang.Enum</xref>s: Shapes <xref uid="" data-throw-if-not-resolved="false">Shape#STRING</xref> and <xref uid="" data-throw-if-not-resolved="false">Shape#NUMBER</xref> can be used to change between numeric (index) and textual (name or `toString()`); but it is also possible to use <xref uid="" data-throw-if-not-resolved="false">Shape#OBJECT</xref> to serialize (but not deserialize) <xref uid="java.lang.Enum" data-throw-if-not-resolved="false">java.lang.Enum</xref>s as JSON Objects (as if they were POJOs). NOTE: serialization as JSON Object only works with class annotation; will not work as per-property annotation.
     *  <xref uid="java.util.Collection" data-throw-if-not-resolved="false">java.util.Collection</xref>s can be serialized as (and deserialized from) JSON Objects, if <xref uid="" data-throw-if-not-resolved="false">Shape#OBJECT</xref> is used. NOTE: can ONLY be used as class annotation; will not work as per-property annotation.
     *  <xref uid="java.lang.Number" data-throw-if-not-resolved="false">java.lang.Number</xref> subclasses can be serialized as full objects if <xref uid="" data-throw-if-not-resolved="false">Shape#OBJECT</xref> is used. Otherwise the default behavior of serializing to a scalar number value will be preferred. NOTE: can ONLY be used as class annotation; will not work as per-property annotation.
  syntax:
    content: public interface JsonFormat implements Annotation
  implements:
  - java.lang.annotation.Annotation
- uid: com.fasterxml.jackson.annotation.JsonFormat.DEFAULT_LOCALE
  id: DEFAULT_LOCALE
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.annotation.JsonFormat
  langs:
  - java
  name: DEFAULT_LOCALE
  nameWithType: JsonFormat.DEFAULT_LOCALE
  fullName: com.fasterxml.jackson.annotation.JsonFormat.DEFAULT_LOCALE
  type: Field
  package: com.fasterxml.jackson.annotation
  summary: 'Value that indicates that default <xref uid="java.util.Locale" data-throw-if-not-resolved="false">java.util.Locale</xref> (from deserialization or serialization context) should be used: annotation does not define value to use.'
  syntax:
    content: public static final String DEFAULT_LOCALE
    return:
      type: java.lang.String
- uid: com.fasterxml.jackson.annotation.JsonFormat.DEFAULT_TIMEZONE
  id: DEFAULT_TIMEZONE
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.annotation.JsonFormat
  langs:
  - java
  name: DEFAULT_TIMEZONE
  nameWithType: JsonFormat.DEFAULT_TIMEZONE
  fullName: com.fasterxml.jackson.annotation.JsonFormat.DEFAULT_TIMEZONE
  type: Field
  package: com.fasterxml.jackson.annotation
  summary: >-
    Value that indicates that default <xref uid="java.util.TimeZone" data-throw-if-not-resolved="false">java.util.TimeZone</xref> (from deserialization or serialization context) should be used: annotation does not define value to use.


    NOTE: default here does NOT mean JVM defaults but Jackson databindings default, usually UTC, but may be changed on `ObjectMapper`.
  syntax:
    content: public static final String DEFAULT_TIMEZONE
    return:
      type: java.lang.String
- uid: com.fasterxml.jackson.annotation.JsonFormat.lenient()
  id: lenient()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.annotation.JsonFormat
  langs:
  - java
  name: lenient()
  nameWithType: JsonFormat.lenient()
  fullName: com.fasterxml.jackson.annotation.JsonFormat.lenient()
  overload: com.fasterxml.jackson.annotation.JsonFormat.lenient*
  type: Method
  package: com.fasterxml.jackson.annotation
  summary: >-
    Property that indicates whether "lenient" handling should be enabled or disabled. This is relevant mostly for deserialization of some textual datatypes, especially date/time types.


    Note that underlying default setting depends on datatype (or more precisely deserializer for it): for most date/time types, default is for leniency to be enabled.
  syntax:
    content: public abstract OptBoolean lenient()
    return:
      type: com.fasterxml.jackson.annotation.OptBoolean
- uid: com.fasterxml.jackson.annotation.JsonFormat.locale()
  id: locale()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.annotation.JsonFormat
  langs:
  - java
  name: locale()
  nameWithType: JsonFormat.locale()
  fullName: com.fasterxml.jackson.annotation.JsonFormat.locale()
  overload: com.fasterxml.jackson.annotation.JsonFormat.locale*
  type: Method
  package: com.fasterxml.jackson.annotation
  summary: <xref uid="java.util.Locale" data-throw-if-not-resolved="false">java.util.Locale</xref> to use for serialization (if needed). Special value of <xref uid="com.fasterxml.jackson.annotation.JsonFormat.DEFAULT_LOCALE" data-throw-if-not-resolved="false">#DEFAULT_LOCALE</xref> can be used to mean "just use the default", where default is specified by the serialization context, which in turn defaults to system defaults (<xref uid="" data-throw-if-not-resolved="false">java.util.Locale#getDefault()</xref>) unless explicitly set to another locale.
  syntax:
    content: public abstract String locale()
    return:
      type: java.lang.String
- uid: com.fasterxml.jackson.annotation.JsonFormat.pattern()
  id: pattern()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.annotation.JsonFormat
  langs:
  - java
  name: pattern()
  nameWithType: JsonFormat.pattern()
  fullName: com.fasterxml.jackson.annotation.JsonFormat.pattern()
  overload: com.fasterxml.jackson.annotation.JsonFormat.pattern*
  type: Method
  package: com.fasterxml.jackson.annotation
  summary: Datatype-specific additional piece of configuration that may be used to further refine formatting aspects. This may, for example, determine low-level format String used for <xref uid="java.util.Date" data-throw-if-not-resolved="false">java.util.Date</xref> serialization; however, exact use is determined by specific `JsonSerializer`
  syntax:
    content: public abstract String pattern()
    return:
      type: java.lang.String
- uid: com.fasterxml.jackson.annotation.JsonFormat.shape()
  id: shape()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.annotation.JsonFormat
  langs:
  - java
  name: shape()
  nameWithType: JsonFormat.shape()
  fullName: com.fasterxml.jackson.annotation.JsonFormat.shape()
  overload: com.fasterxml.jackson.annotation.JsonFormat.shape*
  type: Method
  package: com.fasterxml.jackson.annotation
  summary: "Structure to use for serialization: definition of mapping depends on datatype, but usually has straight-forward counterpart in data format (JSON). Note that commonly only a subset of shapes is available; and if 'invalid' value is chosen, defaults are usually used."
  syntax:
    content: public abstract JsonFormat.Shape shape()
    return:
      type: com.fasterxml.jackson.annotation.JsonFormat.Shape
- uid: com.fasterxml.jackson.annotation.JsonFormat.timezone()
  id: timezone()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.annotation.JsonFormat
  langs:
  - java
  name: timezone()
  nameWithType: JsonFormat.timezone()
  fullName: com.fasterxml.jackson.annotation.JsonFormat.timezone()
  overload: com.fasterxml.jackson.annotation.JsonFormat.timezone*
  type: Method
  package: com.fasterxml.jackson.annotation
  summary: <xref uid="java.util.TimeZone" data-throw-if-not-resolved="false">java.util.TimeZone</xref> to use for serialization (if needed). Special value of <xref uid="com.fasterxml.jackson.annotation.JsonFormat.DEFAULT_TIMEZONE" data-throw-if-not-resolved="false">#DEFAULT_TIMEZONE</xref> can be used to mean "just use the default", where default is specified by the serialization context, which in turn defaults to system default (UTC) unless explicitly set to another timezone.
  syntax:
    content: public abstract String timezone()
    return:
      type: java.lang.String
- uid: com.fasterxml.jackson.annotation.JsonFormat.with()
  id: with()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.annotation.JsonFormat
  langs:
  - java
  name: with()
  nameWithType: JsonFormat.with()
  fullName: com.fasterxml.jackson.annotation.JsonFormat.with()
  overload: com.fasterxml.jackson.annotation.JsonFormat.with*
  type: Method
  package: com.fasterxml.jackson.annotation
  summary: Set of <xref uid="com.fasterxml.jackson.annotation.JsonFormat.Feature" data-throw-if-not-resolved="false">JsonFormat.Feature</xref>s to explicitly enable with respect to handling of annotated property. This will have precedence over possible global configuration.
  syntax:
    content: public abstract JsonFormat.Feature[] with()
    return:
      type: com.fasterxml.jackson.annotation.JsonFormat.Feature[]
- uid: com.fasterxml.jackson.annotation.JsonFormat.without()
  id: without()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.annotation.JsonFormat
  langs:
  - java
  name: without()
  nameWithType: JsonFormat.without()
  fullName: com.fasterxml.jackson.annotation.JsonFormat.without()
  overload: com.fasterxml.jackson.annotation.JsonFormat.without*
  type: Method
  package: com.fasterxml.jackson.annotation
  summary: Set of <xref uid="com.fasterxml.jackson.annotation.JsonFormat.Feature" data-throw-if-not-resolved="false">JsonFormat.Feature</xref>s to explicitly disable with respect to handling of annotated property. This will have precedence over possible global configuration.
  syntax:
    content: public abstract JsonFormat.Feature[] without()
    return:
      type: com.fasterxml.jackson.annotation.JsonFormat.Feature[]
references:
- uid: java.lang.String
  spec.java:
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
- uid: com.fasterxml.jackson.annotation.JsonFormat.pattern*
  name: pattern
  nameWithType: JsonFormat.pattern
  fullName: com.fasterxml.jackson.annotation.JsonFormat.pattern
  package: com.fasterxml.jackson.annotation
- uid: com.fasterxml.jackson.annotation.JsonFormat.Shape
  name: JsonFormat.Shape
  nameWithType: JsonFormat.Shape
  fullName: com.fasterxml.jackson.annotation.JsonFormat.Shape
- uid: com.fasterxml.jackson.annotation.JsonFormat.shape*
  name: shape
  nameWithType: JsonFormat.shape
  fullName: com.fasterxml.jackson.annotation.JsonFormat.shape
  package: com.fasterxml.jackson.annotation
- uid: com.fasterxml.jackson.annotation.JsonFormat.locale*
  name: locale
  nameWithType: JsonFormat.locale
  fullName: com.fasterxml.jackson.annotation.JsonFormat.locale
  package: com.fasterxml.jackson.annotation
- uid: com.fasterxml.jackson.annotation.JsonFormat.timezone*
  name: timezone
  nameWithType: JsonFormat.timezone
  fullName: com.fasterxml.jackson.annotation.JsonFormat.timezone
  package: com.fasterxml.jackson.annotation
- uid: com.fasterxml.jackson.annotation.OptBoolean
  name: OptBoolean
  nameWithType: OptBoolean
  fullName: com.fasterxml.jackson.annotation.OptBoolean
- uid: com.fasterxml.jackson.annotation.JsonFormat.lenient*
  name: lenient
  nameWithType: JsonFormat.lenient
  fullName: com.fasterxml.jackson.annotation.JsonFormat.lenient
  package: com.fasterxml.jackson.annotation
- uid: com.fasterxml.jackson.annotation.JsonFormat.Feature[]
  spec.java:
  - uid: com.fasterxml.jackson.annotation.JsonFormat.Feature
    name: Feature
    fullName: com.fasterxml.jackson.annotation.JsonFormat.Feature
  - name: '[]'
    fullName: '[]'
- uid: com.fasterxml.jackson.annotation.JsonFormat.with*
  name: with
  nameWithType: JsonFormat.with
  fullName: com.fasterxml.jackson.annotation.JsonFormat.with
  package: com.fasterxml.jackson.annotation
- uid: com.fasterxml.jackson.annotation.JsonFormat.without*
  name: without
  nameWithType: JsonFormat.without
  fullName: com.fasterxml.jackson.annotation.JsonFormat.without
  package: com.fasterxml.jackson.annotation
- uid: java.lang.annotation.Annotation
  name: Annotation
  nameWithType: Annotation
  fullName: java.lang.annotation.Annotation
- uid: com.fasterxml.jackson.annotation.JsonFormat.Feature
  name: JsonFormat.Feature
  nameWithType: JsonFormat.Feature
  fullName: com.fasterxml.jackson.annotation.JsonFormat.Feature
- uid: com.fasterxml.jackson.annotation.JsonFormat.Features
  name: JsonFormat.Features
  nameWithType: JsonFormat.Features
  fullName: com.fasterxml.jackson.annotation.JsonFormat.Features
- uid: com.fasterxml.jackson.annotation.JsonFormat.Value
  name: JsonFormat.Value
  nameWithType: JsonFormat.Value
  fullName: com.fasterxml.jackson.annotation.JsonFormat.Value
